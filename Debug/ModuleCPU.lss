
ModuleCPU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000511a  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000da  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000511c  2**0
                  ALLOC
  3 .noinit       00000422  00800102  00800102  0000511c  2**2
                  ALLOC
  4 .comment      0000002f  00000000  00000000  0000511a  2**0
                  CONTENTS, READONLY
  5 .stack.descriptors.hdr 00000142  00000000  00000000  00005149  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000550  00000000  00000000  0000528b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000092e7  00000000  00000000  000057db  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001ad7  00000000  00000000  0000eac2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003ab2  00000000  00000000  00010599  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000012c4  00000000  00000000  0001404c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000070d  00000000  00000000  00015310  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00004926  00000000  00000000  00015a1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000530  00000000  00000000  0001a343  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .text         00000004  00005056  00005056  0000510a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0001a874  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .text.__vector_27 000000bc  00003322  00003322  000033d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.ADCSetPowerOn 0000000c  00005010  00005010  000050c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.ADCStartConversion 0000002a  00004a02  00004a02  00004ab6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .progmemx.data 0000000b  00000341  00000341  000003f5  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 20 .text.ADCInit 0000013c  00002440  00002440  000024f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .progmemx.data.sg_sMuxSelectList 0000000f  0000031a  0000031a  000003ce  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 22 .bss.sg_eCurrentType 00000001  00800b47  00800b47  0000511c  2**0
                  ALLOC
 23 .bss.sg_eState 00000001  00800b64  00800b64  0000511c  2**0
                  ALLOC
 24 .text.CANLookupCommand 00000062  00004016  00004016  000040ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .progmemx.data 0000000b  0000034c  0000034c  00000400  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 26 .text.CANMOBSet 00000212  00001ae6  00001ae6  00001b9a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.CANSendMessageInternal 00000180  00001eb6  00001eb6  00001f6a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.CANMOBInterrupt 00000166  00002036  00002036  000020ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.__vector_18 0000013e  00002302  00002302  000023b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.CANSendMessage 0000002e  000048ca  000048ca  0000497e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.CANSetRXCallback 0000000a  00005028  00005028  000050dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.CANInit 0000009c  00003730  00003730  000037e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.CANCheckTxStatus 000000ac  00003498  00003498  0000354c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.CANCheckHealth 00000130  000026b0  000026b0  00002764  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .bss.lastREC.2007 00000001  00800b65  00800b65  0000511c  2**0
                  ALLOC
 36 .bss.lastTEC.2006 00000001  00800b66  00800b66  0000511c  2**0
                  ALLOC
 37 .progmemx.data.sg_sRXCommandList 00000021  000002d5  000002d5  00000389  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 38 .progmemx.data.sg_sMOBModuleRequestTime 00000008  00000357  00000357  0000040b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 39 .progmemx.data.sg_sMOBModuleHardwareDetail 00000008  0000035f  0000035f  00000413  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 40 .progmemx.data.sg_sMOBModuleCellDetail 00000008  00000367  00000367  0000041b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 41 .progmemx.data.sg_sMOBModuleCellCommStat2 00000008  0000036f  0000036f  00000423  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 42 .progmemx.data.sg_sMOBModuleCellCommStat1 00000008  00000377  00000377  0000042b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 43 .progmemx.data.sg_sMOBModuleStatus3 00000008  0000037f  0000037f  00000433  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 44 .progmemx.data.sg_sMOBModuleStatus2 00000008  00000387  00000387  0000043b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 45 .progmemx.data.sg_sMOBModuleStatus1 00000008  0000038f  0000038f  00000443  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 46 .progmemx.data.sg_sMOBModuleAnnouncement 00000008  00000397  00000397  0000044b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 47 .progmemx.data.sg_sMOBGenericReceive 00000008  0000039f  0000039f  00000453  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 48 .progmemx.data.sg_sMOBDisabled 00000008  000003a7  000003a7  0000045b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 49 .bss.sg_u8TxBackoffDelay 00000001  00800b67  00800b67  0000511c  2**0
                  ALLOC
 50 .bss.sg_u8TxOnlyErrorCount 00000001  00800b68  00800b68  0000511c  2**0
                  ALLOC
 51 .bss.sg_u8BusOffRecoveryDelay 00000001  00800b69  00800b69  0000511c  2**0
                  ALLOC
 52 .bss.sg_u16ErrorPassive 00000002  00800b45  00800b45  0000511c  2**0
                  ALLOC
 53 .bss.sg_u16BusOffEvents 00000002  00800b54  00800b54  0000511c  2**0
                  ALLOC
 54 .bss.sg_u16TxOkPolled 00000002  00800b56  00800b56  0000511c  2**0
                  ALLOC
 55 .bss.sg_u16TxErrors 00000002  00800b58  00800b58  0000511c  2**0
                  ALLOC
 56 .bss.sg_u16TxTimeouts 00000002  00800b5a  00800b5a  0000511c  2**0
                  ALLOC
 57 .bss.sg_bInRetransmit 00000001  00800b6a  00800b6a  0000511c  2**0
                  ALLOC
 58 .bss.sg_u8LastTXDataLen 00000001  00800b6b  00800b6b  0000511c  2**0
                  ALLOC
 59 .bss.sg_u8LastTXData 00000008  00800b35  00800b35  0000511c  2**0
                  ALLOC
 60 .bss.sg_eLastTXType 00000001  00800b6c  00800b6c  0000511c  2**0
                  ALLOC
 61 .bss.sg_u8TransmitAttempts 00000001  00800b6d  00800b6d  0000511c  2**0
                  ALLOC
 62 .bss.sg_pfRXCallback 00000002  00800b5c  00800b5c  0000511c  2**0
                  ALLOC
 63 .bss.sg_u8Busy 00000001  00800b6e  00800b6e  0000511c  2**0
                  ALLOC
 64 .text.DebugOut 0000000e  00004fd8  00004fd8  0000508c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .text.EEPROMRead 00000012  00004f3e  00004f3e  00004ff2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 66 .text.I2CBitDelay 0000000e  00004fe6  00004fe6  0000509a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 67 .text.I2CStart 0000002c  00004926  00004926  000049da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 68 .text.I2CStop 00000026  00004acc  00004acc  00004b80  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 69 .text.I2CUnstick 0000003c  00004642  00004642  000046f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 70 .text.I2CTxByte 0000006a  00003ede  00003ede  00003f92  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 71 .text.I2CRxByte 0000007a  00003d7e  00003d7e  00003e32  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 72 .text.I2CSetup 0000002c  00004952  00004952  00004a06  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 73 .text.I2CStartTransaction 00000028  00004a2c  00004a2c  00004ae0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 74 .text.CellCountExpectedSet 000000c4  0000319c  0000319c  00003250  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 75 .text.SendModuleControllerStatus 00000010  00004f98  00004f98  0000504c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 76 .text.ModuleControllerStateSet 0000000a  00005032  00005032  000050e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 77 .text.ModuleControllerStateSetMax 00000016  00004ebe  00004ebe  00004f72  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 78 .text.Check5VLoss 00000018  00004e76  00004e76  00004f2a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 79 .text.CellDataConvertVoltage 0000005e  000040da  000040da  0000418e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 80 .text.CellDataConvertTemperature 00000064  00003fb2  00003fb2  00004066  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 81 .text.ModuleCurrentConvertReadings 00000104  000027e0  000027e0  00002894  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 82 .text.__vector_1 00000024  00004af2  00004af2  00004ba6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 83 .text.__vector_2 00000024  00004b16  00004b16  00004bca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 84 .text.__vector_3 00000024  00004b3a  00004b3a  00004bee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 85 .text.__vector_4 00000024  00004b5e  00004b5e  00004c12  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 86 .text.__vector_5 00000024  00004b82  00004b82  00004c36  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 87 .text.__vector_6 00000024  00004ba6  00004ba6  00004c5a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 88 .text.__vector_22 00000024  00004bca  00004bca  00004c7e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 89 .text.__vector_9 00000024  00004bee  00004bee  00004ca2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 90 .text.__vector_11 00000024  00004c12  00004c12  00004cc6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 91 .text.__vector_13 00000024  00004c36  00004c36  00004cea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 92 .text.__vector_14 00000024  00004c5a  00004c5a  00004d0e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 93 .text.__vector_17 00000024  00004c7e  00004c7e  00004d32  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 94 .text.__vector_19 00000024  00004ca2  00004ca2  00004d56  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 95 .text.__vector_21 00000024  00004cc6  00004cc6  00004d7a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 96 .text.__vector_25 00000024  00004cea  00004cea  00004d9e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 97 .text.__vector_26 00000024  00004d0e  00004d0e  00004dc2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 98 .text.__vector_29 00000024  00004d32  00004d32  00004de6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 99 .text.__vector_30 00000024  00004d56  00004d56  00004e0a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
100 .text.CurrentThresholdsGet 00000094  000037cc  000037cc  00003880  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
101 .progmemx.data 000001a1  000000da  000000da  0000018e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
102 .text.CANReceiveCallback 00000298  000011b8  000011b8  0000126c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
103 .text.ControllerStatusMessagesSend 00000424  00000810  00000810  000008c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
104 .text.CellStringProcess 000002ac  00000f0c  00000f0c  00000fc0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
105 .text.Delay   00000052  000043ee  000043ee  000044a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
106 .text.PlatformAssert 0000002c  0000497e  0000497e  00004a32  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
107 .text.ModuleControllerStateHandle 0000021e  000018c8  000018c8  0000197c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
108 .text.PlatformGetRegistrationID 00000006  00005050  00005050  00005104  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
109 .text.SetSysclock 0000000c  0000501c  0000501c  000050d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
110 .text.ModuleControllerGetUniqueID 0000007e  00003b8a  00003b8a  00003c3e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
111 .text.TimerInit 00000052  00004440  00004440  000044f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
112 .text.__vector_12 000000ba  000033de  000033de  00003492  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
113 .text.WatchdogReset 00000002  0000505e  0000505e  00005112  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
114 .text.WatchdogOff 0000001a  00004e5c  00004e5c  00004f10  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
115 .text.__vector_28 00000052  00004492  00004492  00004546  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
116 .text.__vector_23 0000008a  00003860  00003860  00003914  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
117 .text.__vector_24 0000004c  000044e4  000044e4  00004598  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
118 .text.vUARTRXStart 00000016  00004ed4  00004ed4  00004f88  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
119 .text.vUARTRXEnd 00000024  00004d7a  00004d7a  00004e2e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
120 .text.vUARTRXData 0000007a  00003df8  00003df8  00003eac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
121 .text.PlatformGetSendData 00000028  00004a54  00004a54  00004b08  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
122 .text.ADCCallback 0000002c  000049aa  000049aa  00004a5e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
123 .text.FrameInit 000000cc  00002f40  00002f40  00002ff4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
124 .text.CellStringPowerStateMachine 00000088  00003974  00003974  00003a28  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
125 .text.main    000002d8  00000c34  00000c34  00000ce8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
126 .bss.sg_u8PCMSK1 00000001  00800b6f  00800b6f  0000511c  2**0
                  ALLOC
127 .bss.sg_u8PCMSK0 00000001  00800b70  00800b70  0000511c  2**0
                  ALLOC
128 .bss.sg_u8UnhandledInterruptVector 00000001  00800b71  00800b71  0000511c  2**0
                  ALLOC
129 .bss.sg_u8Reason 00000001  00800b72  00800b72  0000511c  2**0
                  ALLOC
130 .progmemx.data.sg_u8FractionalLookup 00000010  0000030a  0000030a  000003be  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
131 .bss.sg_u8ControllerStatusMsgCount 00000001  00800b73  00800b73  0000511c  2**0
                  ALLOC
132 .bss.sg_u8CellReports 00000001  00800b74  00800b74  0000511c  2**0
                  ALLOC
133 .bss.sg_u16BytesReceived 00000002  00800b5e  00800b5e  0000511c  2**0
                  ALLOC
134 .bss.sg_u8CellBufferTemp 00000004  00800b48  00800b48  0000511c  2**2
                  ALLOC
135 .bss.sg_u8CellBufferRX 00000001  00800b75  00800b75  0000511c  2**0
                  ALLOC
136 .bss.sg_u8CellIndex 00000001  00800b76  00800b76  0000511c  2**0
                  ALLOC
137 .bss.sg_u8TicksSinceLastPackControllerMessage 00000001  00800b77  00800b77  0000511c  2**0
                  ALLOC
138 .bss.sg_u8CellStringPowerTimer 00000001  00800b78  00800b78  0000511c  2**0
                  ALLOC
139 .bss.sg_bFrameStart 00000001  00800b79  00800b79  0000511c  2**0
                  ALLOC
140 .bss.sg_u8CellFrameTimer 00000001  00800b7a  00800b7a  0000511c  2**0
                  ALLOC
141 .bss.sg_bIgnoreStatusRequests 00000001  00800b7b  00800b7b  0000511c  2**0
                  ALLOC
142 .bss.sg_u8AnnouncementDelayTicks 00000001  00800b7c  00800b7c  0000511c  2**0
                  ALLOC
143 .bss.sg_bAnnouncementPending 00000001  00800b7d  00800b7d  0000511c  2**0
                  ALLOC
144 .bss.sg_u8CurrentBufferIndex 00000001  00800b7e  00800b7e  0000511c  2**0
                  ALLOC
145 .bss.sg_sCurrenBuffer 00000010  00800b15  00800b15  0000511c  2**0
                  ALLOC
146 .text.IsLeapYear 00000034  00004798  00004798  0000484c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
147 .text.RTCStartTransaction 00000044  0000457c  0000457c  00004630  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
148 .text.StructTMToHW 00000054  00004346  00004346  000043fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
149 .text.HWToStructTM 0000007c  00003c86  00003c86  00003d3a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
150 .text.__vector_10 00000086  000039fc  000039fc  00003ab0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
151 .progmemx.data 00000014  000002f6  000002f6  000003aa  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
152 .text.RTCReadRegisters 0000007e  00003c08  00003c08  00003cbc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
153 .text.RTCReadHW 000000e2  00002bce  00002bce  00002c82  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
154 .text.RTCWriteRegisters 0000006a  00003f48  00003f48  00003ffc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
155 .text.RTCWriteHW 000000fe  000028e4  000028e4  00002998  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
156 .text.RTCSetTime 000000c6  000030d6  000030d6  0000318a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
157 .text.RTCInit 00000222  000016a6  000016a6  0000175a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
158 .progmemx.data.sg_u8DaysInMonths 0000000c  00000329  00000329  000003dd  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
159 .bss.sg_u64Time 00000008  00800b3d  00800b3d  0000511c  2**0
                  ALLOC
160 .text.SDSetCS 00000014  00004f16  00004f16  00004fca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
161 .text.SDPowerup 0000003a  000046ba  000046ba  0000476e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
162 .text.SDCommand 000000aa  00003544  00003544  000035f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
163 .text.SDGoIdle 00000022  00004dc2  00004dc2  00004e76  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
164 .text.SDSendOpCondition 00000034  000047cc  000047cc  00004880  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
165 .text.SDSendOpConditionArg 00000056  00004244  00004244  000042f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
166 .text.SDWaitResponse7 0000000e  00004ff4  00004ff4  000050a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
167 .text.SDSendInterfaceCondition 00000034  00004800  00004800  000048b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
168 .text.SDReadOCR 00000032  00004834  00004834  000048e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
169 .text.SDReadCSD 0000007c  00003d02  00003d02  00003db6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
170 .text.SDReceiveDataBlock 0000008a  000038ea  000038ea  0000399e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
171 .text.SDTransmitDataBlock 000000c2  00003260  00003260  00003314  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
172 .text.SDInit  00000166  0000219c  0000219c  00002250  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
173 .text.SDRead  000000d8  00002e68  00002e68  00002f1c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
174 .text.SDWrite 000000dc  00002cb0  00002cb0  00002d64  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
175 .bss.sg_u8CSD 00000010  00800b25  00800b25  0000511c  2**0
                  ALLOC
176 .bss.sg_u16BlockSize 00000002  00800b60  00800b60  0000511c  2**0
                  ALLOC
177 .bss.sg_u32SDSectorCount 00000004  00800b4c  00800b4c  0000511c  2**0
                  ALLOC
178 .text.SPITransaction 00000058  00004194  00004194  00004248  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
179 .text.SPISetBaudRate 000000ca  0000300c  0000300c  000030c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
180 .text.SPIInit 0000002c  000049d6  000049d6  00004a8a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
181 .progmemx.data.sg_sSPIBaudRates 0000002a  000002ab  000002ab  0000035f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
182 .text.readGlobalState 0000003e  00004604  00004604  000046b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
183 .text.writeGlobalState 00000032  00004866  00004866  0000491a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
184 .text.updateSessionMap 000000dc  00002d8c  00002d8c  00002e40  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
185 .text.STORE_Init 00000082  00003b08  00003b08  00003bbc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
186 .text.STORE_WriteFrame 000000f8  000029e2  000029e2  00002a96  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
187 .text.STORE_StartNewSession 00000054  0000439a  0000439a  0000444e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
188 .text.STORE_EndSession 00000058  000041ec  000041ec  000042a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
189 .bss.frameBuffer 00000400  00800524  00800524  0000511c  2**2
                  ALLOC
190 .bss.currentSector 00000004  00800b50  00800b50  0000511c  2**0
                  ALLOC
191 .bss.gState   000001d8  00800924  00800924  0000511c  2**2
                  ALLOC
192 .text.vUARTtxDataAvailable 00000024  00004d9e  00004d9e  00004e52  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
193 .text.vUARTtxDataGet 0000004c  00004530  00004530  000045e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
194 .text.vUARTRXReset 0000000a  0000503c  0000503c  000050f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
195 .text.vUARTStarttx 00000056  0000429a  0000429a  0000434e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
196 .text.__vector_8 0000005c  00004138  00004138  000041ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
197 .text.__vector_16 000000f4  00002ada  00002ada  00002b8e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
198 .text.__vector_15 00000134  0000257c  0000257c  00002630  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
199 .text.vUARTInit 00000036  0000472c  0000472c  000047e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
200 .text.vUARTInitReceive 00000014  00004f2a  00004f2a  00004fde  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
201 .bss.sg_bState 00000001  00800b7f  00800b7f  0000511c  2**0
                  ALLOC
202 .bss.sg_u8SendData 00000002  00800b62  00800b62  0000511c  2**0
                  ALLOC
203 .bss.sg_u8SendIndex 00000001  00800b80  00800b80  0000511c  2**0
                  ALLOC
204 .bss.sg_bMCTxNextBit 00000001  00800b81  00800b81  0000511c  2**0
                  ALLOC
205 .bss.sg_bCellReportsReuested 00000001  00800b82  00800b82  0000511c  2**0
                  ALLOC
206 .bss.sg_etxState 00000001  00800b83  00800b83  0000511c  2**0
                  ALLOC
207 .bss.sg_btxMoreAvailable 00000001  00800b84  00800b84  0000511c  2**0
                  ALLOC
208 .bss.sg_u8txDataByte 00000001  00800b85  00800b85  0000511c  2**0
                  ALLOC
209 .bss.sg_u8txBitCount 00000001  00800b86  00800b86  0000511c  2**0
                  ALLOC
210 .bss.sg_bCell_mc_rxMoreData 00000001  00800b87  00800b87  0000511c  2**0
                  ALLOC
211 .bss.sg_bCell_mc_rxPriorState 00000001  00800b88  00800b88  0000511c  2**0
                  ALLOC
212 .bss.sg_eCell_mc_rxState 00000001  00800b89  00800b89  0000511c  2**0
                  ALLOC
213 .bss.sg_u8rxDataByte 00000001  00800b8a  00800b8a  0000511c  2**0
                  ALLOC
214 .bss.sg_u8Cell_mc_rxBitCount 00000001  00800b8b  00800b8b  0000511c  2**0
                  ALLOC
215 .text.libgcc.div 00000028  00004a7c  00004a7c  00004b30  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
216 .text.libgcc.div 00000044  000045c0  000045c0  00004674  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
217 .text.libgcc.div 0000002e  000048f8  000048f8  000049ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
218 .text.libgcc.div 00000010  00004fa8  00004fa8  0000505c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
219 .text.libgcc.mul 0000001e  00004e04  00004e04  00004eb8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
220 .text.libgcc.mul 0000000e  00005002  00005002  000050b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
221 .text.libgcc.mul 00000016  00004eea  00004eea  00004f9e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
222 .text.libgcc.mul 00000010  00004fb8  00004fb8  0000506c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
223 .text.libgcc  00000010  00004fc8  00004fc8  0000507c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
224 .text.libgcc  00000018  00004e8e  00004e8e  00004f42  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
225 .text.libgcc  00000018  00004ea6  00004ea6  00004f5a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
226 .text.__dummy_fini 00000002  00005060  00005060  00005114  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
227 .text.__dummy_funcs_on_exit 00000002  00005062  00005062  00005116  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
228 .text.__dummy_simulator_exit 00000002  00005064  00005064  00005118  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
229 .text.exit    00000016  00004f00  00004f00  00004fb4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
230 .text.memcpy  00000032  00004898  00004898  0000494c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
231 .text.memset  00000012  00004f50  00004f50  00005004  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
232 .text.gmtime  0000000a  00005046  00005046  000050fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
233 .bss.tm.1240  00000019  00800afc  00800afc  0000511c  2**0
                  ALLOC
234 .progmemx.data 00000004  000003af  000003af  00000463  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
235 .text.__gmtime_r 0000006c  00003e72  00003e72  00003f26  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
236 .progmemx.data 00000004  000003b3  000003b3  00000467  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
237 .text.mktime  00000086  00003a82  00003a82  00003b36  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
238 .text._Exit   00000004  0000505a  0000505a  0000510e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
239 .text.__tm_to_secs 000001be  00001cf8  00001cf8  00001dac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
240 .text.__year_to_secs 00000256  00001450  00001450  00001504  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
241 .text.__month_to_secs 0000003c  0000467e  0000467e  00004732  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
242 .progmemx.data.secs_through_month.1090 00000030  0000027b  0000027b  0000032f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
243 .text.__secs_to_tm 00000458  000003b8  000003b8  0000046c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
244 .progmemx.data.days_in_month.1250 0000000c  00000335  00000335  000003e9  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
245 .text.libgcc.div 00000028  00004aa4  00004aa4  00004b58  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
246 .text.libgcc.mul 000000a0  00003690  00003690  00003744  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
247 .text.libgcc.mul 00000012  00004f62  00004f62  00005016  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
248 .text.libgcc.mul 0000001e  00004e22  00004e22  00004ed6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
249 .text.libgcc.mul 00000056  000042f0  000042f0  000043a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
250 .text.libgcc.div 00000062  00004078  00004078  0000412c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
251 .text.libgcc.div 0000001c  00004e40  00004e40  00004ef4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
252 .text.libgcc.div 000000a2  000035ee  000035ee  000036a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
253 .text.libgcc  00000020  00004de4  00004de4  00004e98  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
254 .text.libgcc.prologue 00000038  000046f4  000046f4  000047a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
255 .text.libgcc.prologue 00000036  00004762  00004762  00004816  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
256 .text.libgcc  00000012  00004f74  00004f74  00005028  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
257 .text.libgcc  00000012  00004f86  00004f86  0000503a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 43 00 	jmp	0x86	; 0x86 <__ctors_end>
   4:	0c 94 79 25 	jmp	0x4af2	; 0x4af2 <__vector_1>
   8:	0c 94 8b 25 	jmp	0x4b16	; 0x4b16 <__vector_2>
   c:	0c 94 9d 25 	jmp	0x4b3a	; 0x4b3a <__vector_3>
  10:	0c 94 af 25 	jmp	0x4b5e	; 0x4b5e <__vector_4>
  14:	0c 94 c1 25 	jmp	0x4b82	; 0x4b82 <__vector_5>
  18:	0c 94 d3 25 	jmp	0x4ba6	; 0x4ba6 <__vector_6>
  1c:	0c 94 2b 28 	jmp	0x5056	; 0x5056 <__bad_interrupt>
  20:	0c 94 9c 20 	jmp	0x4138	; 0x4138 <__vector_8>
  24:	0c 94 f7 25 	jmp	0x4bee	; 0x4bee <__vector_9>
  28:	0c 94 fe 1c 	jmp	0x39fc	; 0x39fc <__vector_10>
  2c:	0c 94 09 26 	jmp	0x4c12	; 0x4c12 <__vector_11>
  30:	0c 94 ef 19 	jmp	0x33de	; 0x33de <__vector_12>
  34:	0c 94 1b 26 	jmp	0x4c36	; 0x4c36 <__vector_13>
  38:	0c 94 2d 26 	jmp	0x4c5a	; 0x4c5a <__vector_14>
  3c:	0c 94 be 12 	jmp	0x257c	; 0x257c <__vector_15>
  40:	0c 94 6d 15 	jmp	0x2ada	; 0x2ada <__vector_16>
  44:	0c 94 3f 26 	jmp	0x4c7e	; 0x4c7e <__vector_17>
  48:	0c 94 81 11 	jmp	0x2302	; 0x2302 <__vector_18>
  4c:	0c 94 51 26 	jmp	0x4ca2	; 0x4ca2 <__vector_19>
  50:	0c 94 2b 28 	jmp	0x5056	; 0x5056 <__bad_interrupt>
  54:	0c 94 63 26 	jmp	0x4cc6	; 0x4cc6 <__vector_21>
  58:	0c 94 e5 25 	jmp	0x4bca	; 0x4bca <__vector_22>
  5c:	0c 94 30 1c 	jmp	0x3860	; 0x3860 <__vector_23>
  60:	0c 94 72 22 	jmp	0x44e4	; 0x44e4 <__vector_24>
  64:	0c 94 75 26 	jmp	0x4cea	; 0x4cea <__vector_25>
  68:	0c 94 87 26 	jmp	0x4d0e	; 0x4d0e <__vector_26>
  6c:	0c 94 91 19 	jmp	0x3322	; 0x3322 <__vector_27>
  70:	0c 94 49 22 	jmp	0x4492	; 0x4492 <__vector_28>
  74:	0c 94 99 26 	jmp	0x4d32	; 0x4d32 <__vector_29>
  78:	0c 94 ab 26 	jmp	0x4d56	; 0x4d56 <__vector_30>

0000007c <.dinit>:
  7c:	01 00       	.word	0x0001	; ????
  7e:	01 02       	muls	r16, r17
  80:	80 01       	movw	r16, r0
  82:	04 0b       	sbc	r16, r20
  84:	8c 80       	ldd	r8, Y+4	; 0x04

00000086 <__ctors_end>:
  86:	11 24       	eor	r1, r1
  88:	1f be       	out	0x3f, r1	; 63
  8a:	cf ef       	ldi	r28, 0xFF	; 255
  8c:	d0 e1       	ldi	r29, 0x10	; 16
  8e:	de bf       	out	0x3e, r29	; 62
  90:	cd bf       	out	0x3d, r28	; 61

00000092 <__do_copy_data>:
  92:	ec e7       	ldi	r30, 0x7C	; 124
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	40 e0       	ldi	r20, 0x00	; 0
  98:	17 c0       	rjmp	.+46     	; 0xc8 <__do_clear_bss+0x8>
  9a:	b5 91       	lpm	r27, Z+
  9c:	a5 91       	lpm	r26, Z+
  9e:	35 91       	lpm	r19, Z+
  a0:	25 91       	lpm	r18, Z+
  a2:	05 91       	lpm	r16, Z+
  a4:	07 fd       	sbrc	r16, 7
  a6:	0c c0       	rjmp	.+24     	; 0xc0 <__do_clear_bss>
  a8:	95 91       	lpm	r25, Z+
  aa:	85 91       	lpm	r24, Z+
  ac:	ef 01       	movw	r28, r30
  ae:	f9 2f       	mov	r31, r25
  b0:	e8 2f       	mov	r30, r24
  b2:	05 90       	lpm	r0, Z+
  b4:	0d 92       	st	X+, r0
  b6:	a2 17       	cp	r26, r18
  b8:	b3 07       	cpc	r27, r19
  ba:	d9 f7       	brne	.-10     	; 0xb2 <__do_copy_data+0x20>
  bc:	fe 01       	movw	r30, r28
  be:	04 c0       	rjmp	.+8      	; 0xc8 <__do_clear_bss+0x8>

000000c0 <__do_clear_bss>:
  c0:	1d 92       	st	X+, r1
  c2:	a2 17       	cp	r26, r18
  c4:	b3 07       	cpc	r27, r19
  c6:	e1 f7       	brne	.-8      	; 0xc0 <__do_clear_bss>
  c8:	e6 38       	cpi	r30, 0x86	; 134
  ca:	f4 07       	cpc	r31, r20
  cc:	31 f7       	brne	.-52     	; 0x9a <__do_copy_data+0x8>
  ce:	0e 94 1a 06 	call	0xc34	; 0xc34 <main>
  d2:	0c 94 80 27 	jmp	0x4f00	; 0x4f00 <exit>

000000d6 <_exit>:
  d6:	f8 94       	cli

000000d8 <__stop_program>:
  d8:	ff cf       	rjmp	.-2      	; 0xd8 <__stop_program>

Disassembly of section .text:

00005056 <__bad_interrupt>:
    5056:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.__vector_27:

00003322 <__vector_27>:

	// Disable the conversion complete interrupt
	ADCSRA &= (uint8_t)~(1 << ADIE);

	// Clear any pending interrupt	
	ADCSRA |= (1 << ADIF);
    3322:	78 94       	sei
    3324:	1f 92       	push	r1
    3326:	0f 92       	push	r0
    3328:	0f b6       	in	r0, 0x3f	; 63
    332a:	0f 92       	push	r0
    332c:	11 24       	eor	r1, r1
    332e:	2f 93       	push	r18
    3330:	3f 93       	push	r19
    3332:	4f 93       	push	r20
    3334:	5f 93       	push	r21
    3336:	6f 93       	push	r22
    3338:	7f 93       	push	r23
    333a:	8f 93       	push	r24
    333c:	9f 93       	push	r25
    333e:	af 93       	push	r26
    3340:	bf 93       	push	r27
    3342:	ef 93       	push	r30
    3344:	ff 93       	push	r31
    3346:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f0078>
    334a:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f0079>
    334e:	80 91 47 0b 	lds	r24, 0x0B47	; 0x800b47 <sg_eCurrentType>
    3352:	91 e0       	ldi	r25, 0x01	; 1
    3354:	98 0f       	add	r25, r24
    3356:	90 93 47 0b 	sts	0x0B47, r25	; 0x800b47 <sg_eCurrentType>
    335a:	95 30       	cpi	r25, 0x05	; 5
    335c:	10 f0       	brcs	.+4      	; 0x3362 <__vector_27+0x40>
    335e:	10 92 47 0b 	sts	0x0B47, r1	; 0x800b47 <sg_eCurrentType>
    3362:	ac e7       	ldi	r26, 0x7C	; 124
    3364:	b0 e0       	ldi	r27, 0x00	; 0
    3366:	5c 91       	ld	r21, X
    3368:	20 91 47 0b 	lds	r18, 0x0B47	; 0x800b47 <sg_eCurrentType>
    336c:	30 e0       	ldi	r19, 0x00	; 0
    336e:	f9 01       	movw	r30, r18
    3370:	ee 0f       	add	r30, r30
    3372:	ff 1f       	adc	r31, r31
    3374:	2e 0f       	add	r18, r30
    3376:	3f 1f       	adc	r19, r31
    3378:	03 2e       	mov	r0, r19
    337a:	00 0c       	add	r0, r0
    337c:	44 0b       	sbc	r20, r20
    337e:	26 5e       	subi	r18, 0xE6	; 230
    3380:	3c 4f       	sbci	r19, 0xFC	; 252
    3382:	4f 4f       	sbci	r20, 0xFF	; 255
    3384:	f9 01       	movw	r30, r18
    3386:	94 91       	lpm	r25, Z
    3388:	47 fd       	sbrc	r20, 7
    338a:	90 81       	ld	r25, Z
    338c:	50 7e       	andi	r21, 0xE0	; 224
    338e:	95 2b       	or	r25, r21
    3390:	90 6c       	ori	r25, 0xC0	; 192
    3392:	9c 93       	st	X, r25
    3394:	0e 94 d5 24 	call	0x49aa	; 0x49aa <ADCCallback>
    3398:	80 91 47 0b 	lds	r24, 0x0B47	; 0x800b47 <sg_eCurrentType>
    339c:	81 11       	cpse	r24, r1
    339e:	09 c0       	rjmp	.+18     	; 0x33b2 <__vector_27+0x90>
    33a0:	ea e7       	ldi	r30, 0x7A	; 122
    33a2:	f0 e0       	ldi	r31, 0x00	; 0
    33a4:	80 81       	ld	r24, Z
    33a6:	87 7f       	andi	r24, 0xF7	; 247
    33a8:	80 83       	st	Z, r24
    33aa:	81 e0       	ldi	r24, 0x01	; 1
    33ac:	80 93 64 0b 	sts	0x0B64, r24	; 0x800b64 <sg_eState>
    33b0:	05 c0       	rjmp	.+10     	; 0x33bc <__vector_27+0x9a>
    33b2:	ea e7       	ldi	r30, 0x7A	; 122
    33b4:	f0 e0       	ldi	r31, 0x00	; 0
    33b6:	80 81       	ld	r24, Z
    33b8:	88 64       	ori	r24, 0x48	; 72
    33ba:	80 83       	st	Z, r24
    33bc:	ff 91       	pop	r31
    33be:	ef 91       	pop	r30
    33c0:	bf 91       	pop	r27
    33c2:	af 91       	pop	r26
    33c4:	9f 91       	pop	r25
    33c6:	8f 91       	pop	r24
    33c8:	7f 91       	pop	r23
    33ca:	6f 91       	pop	r22
    33cc:	5f 91       	pop	r21
    33ce:	4f 91       	pop	r20
    33d0:	3f 91       	pop	r19
    33d2:	2f 91       	pop	r18
    33d4:	0f 90       	pop	r0
    33d6:	0f be       	out	0x3f, r0	; 63
    33d8:	0f 90       	pop	r0
    33da:	1f 90       	pop	r1
    33dc:	18 95       	reti

Disassembly of section .text.ADCSetPowerOn:

00005010 <ADCSetPowerOn>:
}

// Enable ADC
void ADCSetPowerOn( void )
{
	ADCSRA |= (1 << ADEN);
    5010:	ea e7       	ldi	r30, 0x7A	; 122
    5012:	f0 e0       	ldi	r31, 0x00	; 0
    5014:	80 81       	ld	r24, Z
    5016:	80 68       	ori	r24, 0x80	; 128
    5018:	80 83       	st	Z, r24
    501a:	08 95       	ret

Disassembly of section .text.ADCStartConversion:

00004a02 <ADCStartConversion>:
}

void ADCStartConversion(void)
{
	// Don't start anything if we're not idle
	if (EADCSTATE_IDLE != sg_eState)
    4a02:	80 91 64 0b 	lds	r24, 0x0B64	; 0x800b64 <sg_eState>
    4a06:	81 30       	cpi	r24, 0x01	; 1
    4a08:	81 f4       	brne	.+32     	; 0x4a2a <ADCStartConversion+0x28>
	{
		return;
	}
	
	// Set back to the first channel
	sg_eCurrentType = EADCTYPE_FIRST;
    4a0a:	10 92 47 0b 	sts	0x0B47, r1	; 0x800b47 <sg_eCurrentType>
	
	// Set the MUX
	ADMUX = (ADMUX & MUX_MASK) | (sg_sMuxSelectList[sg_eCurrentType].u8MuxSelect) | MUX_AREF;
    4a0e:	ec e7       	ldi	r30, 0x7C	; 124
    4a10:	f0 e0       	ldi	r31, 0x00	; 0
    4a12:	80 81       	ld	r24, Z
    4a14:	80 7e       	andi	r24, 0xE0	; 224
    4a16:	89 6c       	ori	r24, 0xC9	; 201
    4a18:	80 83       	st	Z, r24
		
	sg_eState = EADCSTATE_READING;
    4a1a:	82 e0       	ldi	r24, 0x02	; 2
    4a1c:	80 93 64 0b 	sts	0x0B64, r24	; 0x800b64 <sg_eState>
	
	// Start a single conversion  - *dp run one at a time for now instead of continuous
	ADCSRA |= (1 << ADSC) | (1 << ADIE) | (1 << ADEN);  // turn power on if it isn't
    4a20:	ea e7       	ldi	r30, 0x7A	; 122
    4a22:	f0 e0       	ldi	r31, 0x00	; 0
    4a24:	80 81       	ld	r24, Z
    4a26:	88 6c       	ori	r24, 0xC8	; 200
    4a28:	80 83       	st	Z, r24
    4a2a:	08 95       	ret

Disassembly of section .text.ADCInit:

00002440 <ADCInit>:

	// Disable the conversion complete interrupt
	ADCSRA &= (uint8_t)~(1 << ADIE);

	// Clear any pending interrupt	
	ADCSRA |= (1 << ADIF);
    2440:	cf 93       	push	r28
    2442:	82 e0       	ldi	r24, 0x02	; 2
    2444:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f007a>
    2448:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
    244c:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7f0094>
    2450:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7f0095>
    2454:	10 92 96 00 	sts	0x0096, r1	; 0x800096 <__TEXT_REGION_LENGTH__+0x7f0096>
    2458:	10 92 97 00 	sts	0x0097, r1	; 0x800097 <__TEXT_REGION_LENGTH__+0x7f0097>
    245c:	80 ea       	ldi	r24, 0xA0	; 160
    245e:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f007b>
    2462:	c0 e0       	ldi	r28, 0x00	; 0
    2464:	83 c0       	rjmp	.+262    	; 0x256c <ADCInit+0x12c>
    2466:	2c 2f       	mov	r18, r28
    2468:	30 e0       	ldi	r19, 0x00	; 0
    246a:	c9 01       	movw	r24, r18
    246c:	88 0f       	add	r24, r24
    246e:	99 1f       	adc	r25, r25
    2470:	82 0f       	add	r24, r18
    2472:	93 1f       	adc	r25, r19
    2474:	01 96       	adiw	r24, 0x01	; 1
    2476:	09 2e       	mov	r0, r25
    2478:	00 0c       	add	r0, r0
    247a:	aa 0b       	sbc	r26, r26
    247c:	86 5e       	subi	r24, 0xE6	; 230
    247e:	9c 4f       	sbci	r25, 0xFC	; 252
    2480:	af 4f       	sbci	r26, 0xFF	; 255
    2482:	fc 01       	movw	r30, r24
    2484:	84 91       	lpm	r24, Z
    2486:	a7 fd       	sbrc	r26, 7
    2488:	80 81       	ld	r24, Z
    248a:	81 30       	cpi	r24, 0x01	; 1
    248c:	41 f0       	breq	.+16     	; 0x249e <ADCInit+0x5e>
    248e:	08 f4       	brcc	.+2      	; 0x2492 <ADCInit+0x52>
    2490:	6c c0       	rjmp	.+216    	; 0x256a <ADCInit+0x12a>
    2492:	82 30       	cpi	r24, 0x02	; 2
    2494:	21 f1       	breq	.+72     	; 0x24de <ADCInit+0x9e>
    2496:	83 30       	cpi	r24, 0x03	; 3
    2498:	09 f4       	brne	.+2      	; 0x249c <ADCInit+0x5c>
    249a:	41 c0       	rjmp	.+130    	; 0x251e <ADCInit+0xde>
    249c:	5f c0       	rjmp	.+190    	; 0x255c <ADCInit+0x11c>
    249e:	54 b1       	in	r21, 0x04	; 4
    24a0:	c9 01       	movw	r24, r18
    24a2:	88 0f       	add	r24, r24
    24a4:	99 1f       	adc	r25, r25
    24a6:	28 0f       	add	r18, r24
    24a8:	39 1f       	adc	r19, r25
    24aa:	2e 5f       	subi	r18, 0xFE	; 254
    24ac:	3f 4f       	sbci	r19, 0xFF	; 255
    24ae:	03 2e       	mov	r0, r19
    24b0:	00 0c       	add	r0, r0
    24b2:	44 0b       	sbc	r20, r20
    24b4:	26 5e       	subi	r18, 0xE6	; 230
    24b6:	3c 4f       	sbci	r19, 0xFC	; 252
    24b8:	4f 4f       	sbci	r20, 0xFF	; 255
    24ba:	f9 01       	movw	r30, r18
    24bc:	24 91       	lpm	r18, Z
    24be:	47 fd       	sbrc	r20, 7
    24c0:	20 81       	ld	r18, Z
    24c2:	81 e0       	ldi	r24, 0x01	; 1
    24c4:	90 e0       	ldi	r25, 0x00	; 0
    24c6:	02 c0       	rjmp	.+4      	; 0x24cc <ADCInit+0x8c>
    24c8:	88 0f       	add	r24, r24
    24ca:	99 1f       	adc	r25, r25
    24cc:	2a 95       	dec	r18
    24ce:	e2 f7       	brpl	.-8      	; 0x24c8 <ADCInit+0x88>
    24d0:	80 95       	com	r24
    24d2:	58 23       	and	r21, r24
    24d4:	54 b9       	out	0x04, r21	; 4
    24d6:	95 b1       	in	r25, 0x05	; 5
    24d8:	89 23       	and	r24, r25
    24da:	85 b9       	out	0x05, r24	; 5
    24dc:	46 c0       	rjmp	.+140    	; 0x256a <ADCInit+0x12a>
    24de:	57 b1       	in	r21, 0x07	; 7
    24e0:	c9 01       	movw	r24, r18
    24e2:	88 0f       	add	r24, r24
    24e4:	99 1f       	adc	r25, r25
    24e6:	28 0f       	add	r18, r24
    24e8:	39 1f       	adc	r19, r25
    24ea:	2e 5f       	subi	r18, 0xFE	; 254
    24ec:	3f 4f       	sbci	r19, 0xFF	; 255
    24ee:	03 2e       	mov	r0, r19
    24f0:	00 0c       	add	r0, r0
    24f2:	44 0b       	sbc	r20, r20
    24f4:	26 5e       	subi	r18, 0xE6	; 230
    24f6:	3c 4f       	sbci	r19, 0xFC	; 252
    24f8:	4f 4f       	sbci	r20, 0xFF	; 255
    24fa:	f9 01       	movw	r30, r18
    24fc:	24 91       	lpm	r18, Z
    24fe:	47 fd       	sbrc	r20, 7
    2500:	20 81       	ld	r18, Z
    2502:	81 e0       	ldi	r24, 0x01	; 1
    2504:	90 e0       	ldi	r25, 0x00	; 0
    2506:	02 c0       	rjmp	.+4      	; 0x250c <ADCInit+0xcc>
    2508:	88 0f       	add	r24, r24
    250a:	99 1f       	adc	r25, r25
    250c:	2a 95       	dec	r18
    250e:	e2 f7       	brpl	.-8      	; 0x2508 <ADCInit+0xc8>
    2510:	80 95       	com	r24
    2512:	58 23       	and	r21, r24
    2514:	57 b9       	out	0x07, r21	; 7
    2516:	98 b1       	in	r25, 0x08	; 8
    2518:	89 23       	and	r24, r25
    251a:	88 b9       	out	0x08, r24	; 8
    251c:	26 c0       	rjmp	.+76     	; 0x256a <ADCInit+0x12a>
    251e:	4a b1       	in	r20, 0x0a	; 10
    2520:	c9 01       	movw	r24, r18
    2522:	88 0f       	add	r24, r24
    2524:	99 1f       	adc	r25, r25
    2526:	82 0f       	add	r24, r18
    2528:	93 1f       	adc	r25, r19
    252a:	02 96       	adiw	r24, 0x02	; 2
    252c:	09 2e       	mov	r0, r25
    252e:	00 0c       	add	r0, r0
    2530:	aa 0b       	sbc	r26, r26
    2532:	86 5e       	subi	r24, 0xE6	; 230
    2534:	9c 4f       	sbci	r25, 0xFC	; 252
    2536:	af 4f       	sbci	r26, 0xFF	; 255
    2538:	fc 01       	movw	r30, r24
    253a:	24 91       	lpm	r18, Z
    253c:	a7 fd       	sbrc	r26, 7
    253e:	20 81       	ld	r18, Z
    2540:	81 e0       	ldi	r24, 0x01	; 1
    2542:	90 e0       	ldi	r25, 0x00	; 0
    2544:	02 c0       	rjmp	.+4      	; 0x254a <ADCInit+0x10a>
    2546:	88 0f       	add	r24, r24
    2548:	99 1f       	adc	r25, r25
    254a:	2a 95       	dec	r18
    254c:	e2 f7       	brpl	.-8      	; 0x2546 <ADCInit+0x106>
    254e:	80 95       	com	r24
    2550:	48 23       	and	r20, r24
    2552:	4a b9       	out	0x0a, r20	; 10
    2554:	9b b1       	in	r25, 0x0b	; 11
    2556:	89 23       	and	r24, r25
    2558:	8b b9       	out	0x0b, r24	; 11
    255a:	07 c0       	rjmp	.+14     	; 0x256a <ADCInit+0x12a>
    255c:	45 eb       	ldi	r20, 0xB5	; 181
    255e:	50 e0       	ldi	r21, 0x00	; 0
    2560:	61 e4       	ldi	r22, 0x41	; 65
    2562:	73 e0       	ldi	r23, 0x03	; 3
    2564:	80 e0       	ldi	r24, 0x00	; 0
    2566:	0e 94 bf 24 	call	0x497e	; 0x497e <PlatformAssert>
    256a:	cf 5f       	subi	r28, 0xFF	; 255
    256c:	c5 30       	cpi	r28, 0x05	; 5
    256e:	08 f4       	brcc	.+2      	; 0x2572 <ADCInit+0x132>
    2570:	7a cf       	rjmp	.-268    	; 0x2466 <ADCInit+0x26>
    2572:	81 e0       	ldi	r24, 0x01	; 1
    2574:	80 93 64 0b 	sts	0x0B64, r24	; 0x800b64 <sg_eState>
    2578:	cf 91       	pop	r28
    257a:	08 95       	ret

Disassembly of section .text.CANLookupCommand:

00004016 <CANLookupCommand>:
	{PKT_MODULE_SET_TIME,		ECANMessageType_SetTime},
	{PKT_MODULE_MAX_STATE,		ECANMessageType_MaxState}
};

static ECANMessageType CANLookupCommand( uint16_t u16ID )
{
    4016:	cf 93       	push	r28
    4018:	df 93       	push	r29
    401a:	ec 01       	movw	r28, r24
	uint8_t u8Index = 0;
    401c:	90 e0       	ldi	r25, 0x00	; 0
	
	while( u8Index < (sizeof(sg_sRXCommandList)/sizeof(sg_sRXCommandList[0])) )
    401e:	26 c0       	rjmp	.+76     	; 0x406c <CANLookupCommand+0x56>
	{
		if( sg_sRXCommandList[u8Index].u16ID == u16ID )
    4020:	a9 2f       	mov	r26, r25
    4022:	b0 e0       	ldi	r27, 0x00	; 0
    4024:	9d 01       	movw	r18, r26
    4026:	22 0f       	add	r18, r18
    4028:	33 1f       	adc	r19, r19
    402a:	2a 0f       	add	r18, r26
    402c:	3b 1f       	adc	r19, r27
    402e:	03 2e       	mov	r0, r19
    4030:	00 0c       	add	r0, r0
    4032:	44 0b       	sbc	r20, r20
    4034:	2b 52       	subi	r18, 0x2B	; 43
    4036:	3d 4f       	sbci	r19, 0xFD	; 253
    4038:	4f 4f       	sbci	r20, 0xFF	; 255
    403a:	f9 01       	movw	r30, r18
    403c:	54 2f       	mov	r21, r20
    403e:	0e 94 e4 27 	call	0x4fc8	; 0x4fc8 <__xload_2>
    4042:	6c 17       	cp	r22, r28
    4044:	7d 07       	cpc	r23, r29
    4046:	89 f4       	brne	.+34     	; 0x406a <CANLookupCommand+0x54>
		{
			return( sg_sRXCommandList[u8Index].eType );
    4048:	cd 01       	movw	r24, r26
    404a:	88 0f       	add	r24, r24
    404c:	99 1f       	adc	r25, r25
    404e:	8a 0f       	add	r24, r26
    4050:	9b 1f       	adc	r25, r27
    4052:	02 96       	adiw	r24, 0x02	; 2
    4054:	09 2e       	mov	r0, r25
    4056:	00 0c       	add	r0, r0
    4058:	aa 0b       	sbc	r26, r26
    405a:	8b 52       	subi	r24, 0x2B	; 43
    405c:	9d 4f       	sbci	r25, 0xFD	; 253
    405e:	af 4f       	sbci	r26, 0xFF	; 255
    4060:	fc 01       	movw	r30, r24
    4062:	84 91       	lpm	r24, Z
    4064:	a7 fd       	sbrc	r26, 7
    4066:	80 81       	ld	r24, Z
    4068:	04 c0       	rjmp	.+8      	; 0x4072 <CANLookupCommand+0x5c>
		}
		
		u8Index++;
    406a:	9f 5f       	subi	r25, 0xFF	; 255

static ECANMessageType CANLookupCommand( uint16_t u16ID )
{
	uint8_t u8Index = 0;
	
	while( u8Index < (sizeof(sg_sRXCommandList)/sizeof(sg_sRXCommandList[0])) )
    406c:	9b 30       	cpi	r25, 0x0B	; 11
    406e:	c0 f2       	brcs	.-80     	; 0x4020 <CANLookupCommand+0xa>
		}
		
		u8Index++;
	}
	
	return( ECANMessageType_MAX );
    4070:	83 e1       	ldi	r24, 0x13	; 19
}
    4072:	df 91       	pop	r29
    4074:	cf 91       	pop	r28
    4076:	08 95       	ret

Disassembly of section .text.CANMOBSet:

00001ae6 <CANMOBSet>:
}

uint8_t CANGetTxBackoffDelay(void)
{
	return sg_u8TxBackoffDelay;
}
    1ae6:	6f 92       	push	r6
    1ae8:	7f 92       	push	r7
    1aea:	8f 92       	push	r8
    1aec:	9f 92       	push	r9
    1aee:	bf 92       	push	r11
    1af0:	cf 92       	push	r12
    1af2:	df 92       	push	r13
    1af4:	ef 92       	push	r14
    1af6:	ff 92       	push	r15
    1af8:	0f 93       	push	r16
    1afa:	1f 93       	push	r17
    1afc:	cf 93       	push	r28
    1afe:	df 93       	push	r29
    1b00:	f8 2e       	mov	r15, r24
    1b02:	6a 01       	movw	r12, r20
    1b04:	e6 2e       	mov	r14, r22
    1b06:	e9 01       	movw	r28, r18
    1b08:	0f 2e       	mov	r0, r31
    1b0a:	f5 e0       	ldi	r31, 0x05	; 5
    1b0c:	6f 2e       	mov	r6, r31
    1b0e:	f0 2d       	mov	r31, r0
    1b10:	68 16       	cp	r6, r24
    1b12:	38 f4       	brcc	.+14     	; 0x1b22 <CANMOBSet+0x3c>
    1b14:	4d ed       	ldi	r20, 0xDD	; 221
    1b16:	50 e0       	ldi	r21, 0x00	; 0
    1b18:	6c e4       	ldi	r22, 0x4C	; 76
    1b1a:	73 e0       	ldi	r23, 0x03	; 3
    1b1c:	80 e0       	ldi	r24, 0x00	; 0
    1b1e:	0e 94 bf 24 	call	0x497e	; 0x497e <PlatformAssert>
    1b22:	09 30       	cpi	r16, 0x09	; 9
    1b24:	38 f0       	brcs	.+14     	; 0x1b34 <CANMOBSet+0x4e>
    1b26:	4e ed       	ldi	r20, 0xDE	; 222
    1b28:	50 e0       	ldi	r21, 0x00	; 0
    1b2a:	6c e4       	ldi	r22, 0x4C	; 76
    1b2c:	73 e0       	ldi	r23, 0x03	; 3
    1b2e:	80 e0       	ldi	r24, 0x00	; 0
    1b30:	0e 94 bf 24 	call	0x497e	; 0x497e <PlatformAssert>
    1b34:	eb ed       	ldi	r30, 0xDB	; 219
    1b36:	f0 e0       	ldi	r31, 0x00	; 0
    1b38:	b0 80       	ld	r11, Z
    1b3a:	80 81       	ld	r24, Z
    1b3c:	8f 77       	andi	r24, 0x7F	; 127
    1b3e:	80 83       	st	Z, r24
    1b40:	8f 2d       	mov	r24, r15
    1b42:	82 95       	swap	r24
    1b44:	80 7f       	andi	r24, 0xF0	; 240
    1b46:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f00ed>
    1b4a:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    1b4e:	f6 01       	movw	r30, r12
    1b50:	84 91       	lpm	r24, Z
    1b52:	e7 fc       	sbrc	r14, 7
    1b54:	80 81       	ld	r24, Z
    1b56:	20 e4       	ldi	r18, 0x40	; 64
    1b58:	82 9f       	mul	r24, r18
    1b5a:	c0 01       	movw	r24, r0
    1b5c:	11 24       	eor	r1, r1
    1b5e:	10 2f       	mov	r17, r16
    1b60:	18 2b       	or	r17, r24
    1b62:	ae 2d       	mov	r26, r14
    1b64:	c6 01       	movw	r24, r12
    1b66:	01 96       	adiw	r24, 0x01	; 1
    1b68:	a1 1d       	adc	r26, r1
    1b6a:	fc 01       	movw	r30, r24
    1b6c:	84 91       	lpm	r24, Z
    1b6e:	a7 fd       	sbrc	r26, 7
    1b70:	80 81       	ld	r24, Z
    1b72:	81 11       	cpse	r24, r1
    1b74:	10 62       	ori	r17, 0x20	; 32
    1b76:	10 61       	ori	r17, 0x10	; 16
    1b78:	0e 94 28 28 	call	0x5050	; 0x5050 <PlatformGetRegistrationID>
    1b7c:	4e 2d       	mov	r20, r14
    1b7e:	96 01       	movw	r18, r12
    1b80:	2e 5f       	subi	r18, 0xFE	; 254
    1b82:	3f 4f       	sbci	r19, 0xFF	; 255
    1b84:	4f 4f       	sbci	r20, 0xFF	; 255
    1b86:	f9 01       	movw	r30, r18
    1b88:	54 2f       	mov	r21, r20
    1b8a:	0e 94 e4 27 	call	0x4fc8	; 0x4fc8 <__xload_2>
    1b8e:	ab 01       	movw	r20, r22
    1b90:	57 70       	andi	r21, 0x07	; 7
    1b92:	60 e0       	ldi	r22, 0x00	; 0
    1b94:	70 e0       	ldi	r23, 0x00	; 0
    1b96:	03 2e       	mov	r0, r19
    1b98:	32 e1       	ldi	r19, 0x12	; 18
    1b9a:	44 0f       	add	r20, r20
    1b9c:	55 1f       	adc	r21, r21
    1b9e:	66 1f       	adc	r22, r22
    1ba0:	77 1f       	adc	r23, r23
    1ba2:	3a 95       	dec	r19
    1ba4:	d1 f7       	brne	.-12     	; 0x1b9a <CANMOBSet+0xb4>
    1ba6:	30 2d       	mov	r19, r0
    1ba8:	3a 01       	movw	r6, r20
    1baa:	4b 01       	movw	r8, r22
    1bac:	68 2a       	or	r6, r24
    1bae:	d4 01       	movw	r26, r8
    1bb0:	c3 01       	movw	r24, r6
    1bb2:	4e 2d       	mov	r20, r14
    1bb4:	96 01       	movw	r18, r12
    1bb6:	2a 5f       	subi	r18, 0xFA	; 250
    1bb8:	3f 4f       	sbci	r19, 0xFF	; 255
    1bba:	4f 4f       	sbci	r20, 0xFF	; 255
    1bbc:	f9 01       	movw	r30, r18
    1bbe:	24 91       	lpm	r18, Z
    1bc0:	47 fd       	sbrc	r20, 7
    1bc2:	20 81       	ld	r18, Z
    1bc4:	22 23       	and	r18, r18
    1bc6:	11 f0       	breq	.+4      	; 0x1bcc <CANMOBSet+0xe6>
    1bc8:	24 e0       	ldi	r18, 0x04	; 4
    1bca:	01 c0       	rjmp	.+2      	; 0x1bce <CANMOBSet+0xe8>
    1bcc:	20 e0       	ldi	r18, 0x00	; 0
    1bce:	e0 ef       	ldi	r30, 0xF0	; 240
    1bd0:	f0 e0       	ldi	r31, 0x00	; 0
    1bd2:	20 83       	st	Z, r18
    1bd4:	20 81       	ld	r18, Z
    1bd6:	38 2f       	mov	r19, r24
    1bd8:	33 0f       	add	r19, r19
    1bda:	33 0f       	add	r19, r19
    1bdc:	33 0f       	add	r19, r19
    1bde:	23 2b       	or	r18, r19
    1be0:	20 83       	st	Z, r18
    1be2:	ac 01       	movw	r20, r24
    1be4:	bd 01       	movw	r22, r26
    1be6:	68 94       	set
    1be8:	14 f8       	bld	r1, 4
    1bea:	76 95       	lsr	r23
    1bec:	67 95       	ror	r22
    1bee:	57 95       	ror	r21
    1bf0:	47 95       	ror	r20
    1bf2:	16 94       	lsr	r1
    1bf4:	d1 f7       	brne	.-12     	; 0x1bea <CANMOBSet+0x104>
    1bf6:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f00f1>
    1bfa:	ac 01       	movw	r20, r24
    1bfc:	bd 01       	movw	r22, r26
    1bfe:	03 2e       	mov	r0, r19
    1c00:	3d e0       	ldi	r19, 0x0D	; 13
    1c02:	76 95       	lsr	r23
    1c04:	67 95       	ror	r22
    1c06:	57 95       	ror	r21
    1c08:	47 95       	ror	r20
    1c0a:	3a 95       	dec	r19
    1c0c:	d1 f7       	brne	.-12     	; 0x1c02 <CANMOBSet+0x11c>
    1c0e:	30 2d       	mov	r19, r0
    1c10:	40 93 f2 00 	sts	0x00F2, r20	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f00f2>
    1c14:	07 2e       	mov	r0, r23
    1c16:	75 e1       	ldi	r23, 0x15	; 21
    1c18:	b6 95       	lsr	r27
    1c1a:	a7 95       	ror	r26
    1c1c:	97 95       	ror	r25
    1c1e:	87 95       	ror	r24
    1c20:	7a 95       	dec	r23
    1c22:	d1 f7       	brne	.-12     	; 0x1c18 <CANMOBSet+0x132>
    1c24:	70 2d       	mov	r23, r0
    1c26:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f00f3>
    1c2a:	ae 2d       	mov	r26, r14
    1c2c:	c6 01       	movw	r24, r12
    1c2e:	07 96       	adiw	r24, 0x07	; 7
    1c30:	a1 1d       	adc	r26, r1
    1c32:	fc 01       	movw	r30, r24
    1c34:	84 91       	lpm	r24, Z
    1c36:	a7 fd       	sbrc	r26, 7
    1c38:	80 81       	ld	r24, Z
    1c3a:	88 23       	and	r24, r24
    1c3c:	11 f0       	breq	.+4      	; 0x1c42 <CANMOBSet+0x15c>
    1c3e:	84 e0       	ldi	r24, 0x04	; 4
    1c40:	01 c0       	rjmp	.+2      	; 0x1c44 <CANMOBSet+0x15e>
    1c42:	80 e0       	ldi	r24, 0x00	; 0
    1c44:	e4 ef       	ldi	r30, 0xF4	; 244
    1c46:	f0 e0       	ldi	r31, 0x00	; 0
    1c48:	80 83       	st	Z, r24
    1c4a:	80 81       	ld	r24, Z
    1c4c:	81 60       	ori	r24, 0x01	; 1
    1c4e:	80 83       	st	Z, r24
    1c50:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7f00f5>
    1c54:	ae 2d       	mov	r26, r14
    1c56:	c6 01       	movw	r24, r12
    1c58:	04 96       	adiw	r24, 0x04	; 4
    1c5a:	a1 1d       	adc	r26, r1
    1c5c:	fc 01       	movw	r30, r24
    1c5e:	5a 2f       	mov	r21, r26
    1c60:	0e 94 e4 27 	call	0x4fc8	; 0x4fc8 <__xload_2>
    1c64:	62 95       	swap	r22
    1c66:	66 0f       	add	r22, r22
    1c68:	60 7e       	andi	r22, 0xE0	; 224
    1c6a:	60 93 f6 00 	sts	0x00F6, r22	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7f00f6>
    1c6e:	fc 01       	movw	r30, r24
    1c70:	5a 2f       	mov	r21, r26
    1c72:	0e 94 e4 27 	call	0x4fc8	; 0x4fc8 <__xload_2>
    1c76:	76 95       	lsr	r23
    1c78:	67 95       	ror	r22
    1c7a:	76 95       	lsr	r23
    1c7c:	67 95       	ror	r22
    1c7e:	76 95       	lsr	r23
    1c80:	67 95       	ror	r22
    1c82:	60 93 f7 00 	sts	0x00F7, r22	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7f00f7>
    1c86:	04 c0       	rjmp	.+8      	; 0x1c90 <CANMOBSet+0x1aa>
    1c88:	89 91       	ld	r24, Y+
    1c8a:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
    1c8e:	01 50       	subi	r16, 0x01	; 1
    1c90:	01 11       	cpse	r16, r1
    1c92:	fa cf       	rjmp	.-12     	; 0x1c88 <CANMOBSet+0x1a2>
    1c94:	10 93 ef 00 	sts	0x00EF, r17	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    1c98:	f6 01       	movw	r30, r12
    1c9a:	84 91       	lpm	r24, Z
    1c9c:	e7 fc       	sbrc	r14, 7
    1c9e:	80 81       	ld	r24, Z
    1ca0:	88 23       	and	r24, r24
    1ca2:	69 f0       	breq	.+26     	; 0x1cbe <CANMOBSet+0x1d8>
    1ca4:	ee ed       	ldi	r30, 0xDE	; 222
    1ca6:	f0 e0       	ldi	r31, 0x00	; 0
    1ca8:	20 81       	ld	r18, Z
    1caa:	81 e0       	ldi	r24, 0x01	; 1
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	02 c0       	rjmp	.+4      	; 0x1cb4 <CANMOBSet+0x1ce>
    1cb0:	88 0f       	add	r24, r24
    1cb2:	99 1f       	adc	r25, r25
    1cb4:	fa 94       	dec	r15
    1cb6:	e2 f7       	brpl	.-8      	; 0x1cb0 <CANMOBSet+0x1ca>
    1cb8:	82 2b       	or	r24, r18
    1cba:	80 83       	st	Z, r24
    1cbc:	0d c0       	rjmp	.+26     	; 0x1cd8 <CANMOBSet+0x1f2>
    1cbe:	ee ed       	ldi	r30, 0xDE	; 222
    1cc0:	f0 e0       	ldi	r31, 0x00	; 0
    1cc2:	20 81       	ld	r18, Z
    1cc4:	81 e0       	ldi	r24, 0x01	; 1
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	02 c0       	rjmp	.+4      	; 0x1cce <CANMOBSet+0x1e8>
    1cca:	88 0f       	add	r24, r24
    1ccc:	99 1f       	adc	r25, r25
    1cce:	fa 94       	dec	r15
    1cd0:	e2 f7       	brpl	.-8      	; 0x1cca <CANMOBSet+0x1e4>
    1cd2:	80 95       	com	r24
    1cd4:	82 23       	and	r24, r18
    1cd6:	80 83       	st	Z, r24
    1cd8:	b0 92 db 00 	sts	0x00DB, r11	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f00db>
    1cdc:	df 91       	pop	r29
    1cde:	cf 91       	pop	r28
    1ce0:	1f 91       	pop	r17
    1ce2:	0f 91       	pop	r16
    1ce4:	ff 90       	pop	r15
    1ce6:	ef 90       	pop	r14
    1ce8:	df 90       	pop	r13
    1cea:	cf 90       	pop	r12
    1cec:	bf 90       	pop	r11
    1cee:	9f 90       	pop	r9
    1cf0:	8f 90       	pop	r8
    1cf2:	7f 90       	pop	r7
    1cf4:	6f 90       	pop	r6
    1cf6:	08 95       	ret

Disassembly of section .text.CANSendMessageInternal:

00001eb6 <CANSendMessageInternal>:
    1eb6:	6f 92       	push	r6
    1eb8:	7f 92       	push	r7
    1eba:	8f 92       	push	r8
    1ebc:	ef 92       	push	r14
    1ebe:	ff 92       	push	r15
    1ec0:	0f 93       	push	r16
    1ec2:	cf 93       	push	r28
    1ec4:	df 93       	push	r29
    1ec6:	c8 2f       	mov	r28, r24
    1ec8:	7b 01       	movw	r14, r22
    1eca:	04 2f       	mov	r16, r20
    1ecc:	d2 2f       	mov	r29, r18
    1ece:	88 23       	and	r24, r24
    1ed0:	f9 f0       	breq	.+62     	; 0x1f10 <CANSendMessageInternal+0x5a>
    1ed2:	81 30       	cpi	r24, 0x01	; 1
    1ed4:	31 f1       	breq	.+76     	; 0x1f22 <CANSendMessageInternal+0x6c>
    1ed6:	82 30       	cpi	r24, 0x02	; 2
    1ed8:	69 f1       	breq	.+90     	; 0x1f34 <CANSendMessageInternal+0x7e>
    1eda:	83 30       	cpi	r24, 0x03	; 3
    1edc:	a1 f1       	breq	.+104    	; 0x1f46 <CANSendMessageInternal+0x90>
    1ede:	86 30       	cpi	r24, 0x06	; 6
    1ee0:	d9 f1       	breq	.+118    	; 0x1f58 <CANSendMessageInternal+0xa2>
    1ee2:	87 30       	cpi	r24, 0x07	; 7
    1ee4:	09 f4       	brne	.+2      	; 0x1ee8 <CANSendMessageInternal+0x32>
    1ee6:	41 c0       	rjmp	.+130    	; 0x1f6a <CANSendMessageInternal+0xb4>
    1ee8:	85 30       	cpi	r24, 0x05	; 5
    1eea:	09 f4       	brne	.+2      	; 0x1eee <CANSendMessageInternal+0x38>
    1eec:	47 c0       	rjmp	.+142    	; 0x1f7c <CANSendMessageInternal+0xc6>
    1eee:	84 30       	cpi	r24, 0x04	; 4
    1ef0:	09 f4       	brne	.+2      	; 0x1ef4 <CANSendMessageInternal+0x3e>
    1ef2:	4d c0       	rjmp	.+154    	; 0x1f8e <CANSendMessageInternal+0xd8>
    1ef4:	88 30       	cpi	r24, 0x08	; 8
    1ef6:	09 f4       	brne	.+2      	; 0x1efa <CANSendMessageInternal+0x44>
    1ef8:	53 c0       	rjmp	.+166    	; 0x1fa0 <CANSendMessageInternal+0xea>
    1efa:	40 e5       	ldi	r20, 0x50	; 80
    1efc:	51 e0       	ldi	r21, 0x01	; 1
    1efe:	6c e4       	ldi	r22, 0x4C	; 76
    1f00:	73 e0       	ldi	r23, 0x03	; 3
    1f02:	80 e0       	ldi	r24, 0x00	; 0
    1f04:	0e 94 bf 24 	call	0x497e	; 0x497e <PlatformAssert>
    1f08:	61 2c       	mov	r6, r1
    1f0a:	71 2c       	mov	r7, r1
    1f0c:	81 2c       	mov	r8, r1
    1f0e:	50 c0       	rjmp	.+160    	; 0x1fb0 <CANSendMessageInternal+0xfa>
    1f10:	0f 2e       	mov	r0, r31
    1f12:	f7 e9       	ldi	r31, 0x97	; 151
    1f14:	6f 2e       	mov	r6, r31
    1f16:	f3 e0       	ldi	r31, 0x03	; 3
    1f18:	7f 2e       	mov	r7, r31
    1f1a:	f0 e0       	ldi	r31, 0x00	; 0
    1f1c:	8f 2e       	mov	r8, r31
    1f1e:	f0 2d       	mov	r31, r0
    1f20:	47 c0       	rjmp	.+142    	; 0x1fb0 <CANSendMessageInternal+0xfa>
    1f22:	0f 2e       	mov	r0, r31
    1f24:	ff e8       	ldi	r31, 0x8F	; 143
    1f26:	6f 2e       	mov	r6, r31
    1f28:	f3 e0       	ldi	r31, 0x03	; 3
    1f2a:	7f 2e       	mov	r7, r31
    1f2c:	f0 e0       	ldi	r31, 0x00	; 0
    1f2e:	8f 2e       	mov	r8, r31
    1f30:	f0 2d       	mov	r31, r0
    1f32:	3e c0       	rjmp	.+124    	; 0x1fb0 <CANSendMessageInternal+0xfa>
    1f34:	0f 2e       	mov	r0, r31
    1f36:	f7 e8       	ldi	r31, 0x87	; 135
    1f38:	6f 2e       	mov	r6, r31
    1f3a:	f3 e0       	ldi	r31, 0x03	; 3
    1f3c:	7f 2e       	mov	r7, r31
    1f3e:	f0 e0       	ldi	r31, 0x00	; 0
    1f40:	8f 2e       	mov	r8, r31
    1f42:	f0 2d       	mov	r31, r0
    1f44:	35 c0       	rjmp	.+106    	; 0x1fb0 <CANSendMessageInternal+0xfa>
    1f46:	0f 2e       	mov	r0, r31
    1f48:	ff e7       	ldi	r31, 0x7F	; 127
    1f4a:	6f 2e       	mov	r6, r31
    1f4c:	f3 e0       	ldi	r31, 0x03	; 3
    1f4e:	7f 2e       	mov	r7, r31
    1f50:	f0 e0       	ldi	r31, 0x00	; 0
    1f52:	8f 2e       	mov	r8, r31
    1f54:	f0 2d       	mov	r31, r0
    1f56:	2c c0       	rjmp	.+88     	; 0x1fb0 <CANSendMessageInternal+0xfa>
    1f58:	0f 2e       	mov	r0, r31
    1f5a:	f7 e7       	ldi	r31, 0x77	; 119
    1f5c:	6f 2e       	mov	r6, r31
    1f5e:	f3 e0       	ldi	r31, 0x03	; 3
    1f60:	7f 2e       	mov	r7, r31
    1f62:	f0 e0       	ldi	r31, 0x00	; 0
    1f64:	8f 2e       	mov	r8, r31
    1f66:	f0 2d       	mov	r31, r0
    1f68:	23 c0       	rjmp	.+70     	; 0x1fb0 <CANSendMessageInternal+0xfa>
    1f6a:	0f 2e       	mov	r0, r31
    1f6c:	ff e6       	ldi	r31, 0x6F	; 111
    1f6e:	6f 2e       	mov	r6, r31
    1f70:	f3 e0       	ldi	r31, 0x03	; 3
    1f72:	7f 2e       	mov	r7, r31
    1f74:	f0 e0       	ldi	r31, 0x00	; 0
    1f76:	8f 2e       	mov	r8, r31
    1f78:	f0 2d       	mov	r31, r0
    1f7a:	1a c0       	rjmp	.+52     	; 0x1fb0 <CANSendMessageInternal+0xfa>
    1f7c:	0f 2e       	mov	r0, r31
    1f7e:	ff e5       	ldi	r31, 0x5F	; 95
    1f80:	6f 2e       	mov	r6, r31
    1f82:	f3 e0       	ldi	r31, 0x03	; 3
    1f84:	7f 2e       	mov	r7, r31
    1f86:	f0 e0       	ldi	r31, 0x00	; 0
    1f88:	8f 2e       	mov	r8, r31
    1f8a:	f0 2d       	mov	r31, r0
    1f8c:	11 c0       	rjmp	.+34     	; 0x1fb0 <CANSendMessageInternal+0xfa>
    1f8e:	0f 2e       	mov	r0, r31
    1f90:	f7 e6       	ldi	r31, 0x67	; 103
    1f92:	6f 2e       	mov	r6, r31
    1f94:	f3 e0       	ldi	r31, 0x03	; 3
    1f96:	7f 2e       	mov	r7, r31
    1f98:	f0 e0       	ldi	r31, 0x00	; 0
    1f9a:	8f 2e       	mov	r8, r31
    1f9c:	f0 2d       	mov	r31, r0
    1f9e:	08 c0       	rjmp	.+16     	; 0x1fb0 <CANSendMessageInternal+0xfa>
    1fa0:	0f 2e       	mov	r0, r31
    1fa2:	f7 e5       	ldi	r31, 0x57	; 87
    1fa4:	6f 2e       	mov	r6, r31
    1fa6:	f3 e0       	ldi	r31, 0x03	; 3
    1fa8:	7f 2e       	mov	r7, r31
    1faa:	f0 e0       	ldi	r31, 0x00	; 0
    1fac:	8f 2e       	mov	r8, r31
    1fae:	f0 2d       	mov	r31, r0
    1fb0:	dd 23       	and	r29, r29
    1fb2:	21 f0       	breq	.+8      	; 0x1fbc <CANSendMessageInternal+0x106>
    1fb4:	80 91 6a 0b 	lds	r24, 0x0B6A	; 0x800b6a <sg_bInRetransmit>
    1fb8:	81 11       	cpse	r24, r1
    1fba:	34 c0       	rjmp	.+104    	; 0x2024 <CANSendMessageInternal+0x16e>
    1fbc:	d1 11       	cpse	r29, r1
    1fbe:	04 c0       	rjmp	.+8      	; 0x1fc8 <CANSendMessageInternal+0x112>
    1fc0:	80 91 6e 0b 	lds	r24, 0x0B6E	; 0x800b6e <sg_u8Busy>
    1fc4:	81 11       	cpse	r24, r1
    1fc6:	2e c0       	rjmp	.+92     	; 0x2024 <CANSendMessageInternal+0x16e>
    1fc8:	80 91 6e 0b 	lds	r24, 0x0B6E	; 0x800b6e <sg_u8Busy>
    1fcc:	81 11       	cpse	r24, r1
    1fce:	03 c0       	rjmp	.+6      	; 0x1fd6 <CANSendMessageInternal+0x120>
    1fd0:	82 e0       	ldi	r24, 0x02	; 2
    1fd2:	80 93 6e 0b 	sts	0x0B6E, r24	; 0x800b6e <sg_u8Busy>
    1fd6:	d1 11       	cpse	r29, r1
    1fd8:	1a c0       	rjmp	.+52     	; 0x200e <CANSendMessageInternal+0x158>
    1fda:	10 92 6d 0b 	sts	0x0B6D, r1	; 0x800b6d <sg_u8TransmitAttempts>
    1fde:	c0 93 6c 0b 	sts	0x0B6C, r28	; 0x800b6c <sg_eLastTXType>
    1fe2:	09 30       	cpi	r16, 0x09	; 9
    1fe4:	38 f0       	brcs	.+14     	; 0x1ff4 <CANSendMessageInternal+0x13e>
    1fe6:	45 e6       	ldi	r20, 0x65	; 101
    1fe8:	51 e0       	ldi	r21, 0x01	; 1
    1fea:	6c e4       	ldi	r22, 0x4C	; 76
    1fec:	73 e0       	ldi	r23, 0x03	; 3
    1fee:	80 e0       	ldi	r24, 0x00	; 0
    1ff0:	0e 94 bf 24 	call	0x497e	; 0x497e <PlatformAssert>
    1ff4:	20 2f       	mov	r18, r16
    1ff6:	30 e0       	ldi	r19, 0x00	; 0
    1ff8:	c7 01       	movw	r24, r14
    1ffa:	a0 e8       	ldi	r26, 0x80	; 128
    1ffc:	ac 01       	movw	r20, r24
    1ffe:	6a 2f       	mov	r22, r26
    2000:	85 e3       	ldi	r24, 0x35	; 53
    2002:	9b e0       	ldi	r25, 0x0B	; 11
    2004:	0e 94 4c 24 	call	0x4898	; 0x4898 <memcpy>
    2008:	00 93 6b 0b 	sts	0x0B6B, r16	; 0x800b6b <sg_u8LastTXDataLen>
    200c:	05 c0       	rjmp	.+10     	; 0x2018 <CANSendMessageInternal+0x162>
    200e:	80 91 6d 0b 	lds	r24, 0x0B6D	; 0x800b6d <sg_u8TransmitAttempts>
    2012:	8f 5f       	subi	r24, 0xFF	; 255
    2014:	80 93 6d 0b 	sts	0x0B6D, r24	; 0x800b6d <sg_u8TransmitAttempts>
    2018:	97 01       	movw	r18, r14
    201a:	68 2d       	mov	r22, r8
    201c:	a3 01       	movw	r20, r6
    201e:	81 e0       	ldi	r24, 0x01	; 1
    2020:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <CANMOBSet>
    2024:	df 91       	pop	r29
    2026:	cf 91       	pop	r28
    2028:	0f 91       	pop	r16
    202a:	ff 90       	pop	r15
    202c:	ef 90       	pop	r14
    202e:	8f 90       	pop	r8
    2030:	7f 90       	pop	r7
    2032:	6f 90       	pop	r6
    2034:	08 95       	ret

Disassembly of section .text.CANMOBInterrupt:

00002036 <CANMOBInterrupt>:
    2036:	cf 92       	push	r12
    2038:	df 92       	push	r13
    203a:	ff 92       	push	r15
    203c:	0f 93       	push	r16
    203e:	1f 93       	push	r17
    2040:	cf 93       	push	r28
    2042:	df 93       	push	r29
    2044:	cd b7       	in	r28, 0x3d	; 61
    2046:	de b7       	in	r29, 0x3e	; 62
    2048:	28 97       	sbiw	r28, 0x08	; 8
    204a:	0f b6       	in	r0, 0x3f	; 63
    204c:	f8 94       	cli
    204e:	de bf       	out	0x3e, r29	; 62
    2050:	0f be       	out	0x3f, r0	; 63
    2052:	cd bf       	out	0x3d, r28	; 61
    2054:	98 2f       	mov	r25, r24
    2056:	92 95       	swap	r25
    2058:	90 7f       	andi	r25, 0xF0	; 240
    205a:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f00ed>
    205e:	ee ed       	ldi	r30, 0xDE	; 222
    2060:	f0 e0       	ldi	r31, 0x00	; 0
    2062:	20 81       	ld	r18, Z
    2064:	01 e0       	ldi	r16, 0x01	; 1
    2066:	10 e0       	ldi	r17, 0x00	; 0
    2068:	08 2e       	mov	r0, r24
    206a:	02 c0       	rjmp	.+4      	; 0x2070 <CANMOBInterrupt+0x3a>
    206c:	00 0f       	add	r16, r16
    206e:	11 1f       	adc	r17, r17
    2070:	0a 94       	dec	r0
    2072:	e2 f7       	brpl	.-8      	; 0x206c <CANMOBInterrupt+0x36>
    2074:	90 2f       	mov	r25, r16
    2076:	90 95       	com	r25
    2078:	92 23       	and	r25, r18
    207a:	90 83       	st	Z, r25
    207c:	ef ee       	ldi	r30, 0xEF	; 239
    207e:	f0 e0       	ldi	r31, 0x00	; 0
    2080:	90 81       	ld	r25, Z
    2082:	9f 73       	andi	r25, 0x3F	; 63
    2084:	90 83       	st	Z, r25
    2086:	81 11       	cpse	r24, r1
    2088:	50 c0       	rjmp	.+160    	; 0x212a <CANMOBInterrupt+0xf4>
    208a:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    208e:	85 ff       	sbrs	r24, 5
    2090:	38 c0       	rjmp	.+112    	; 0x2102 <CANMOBInterrupt+0xcc>
    2092:	ee ee       	ldi	r30, 0xEE	; 238
    2094:	f0 e0       	ldi	r31, 0x00	; 0
    2096:	80 81       	ld	r24, Z
    2098:	8f 7d       	andi	r24, 0xDF	; 223
    209a:	80 83       	st	Z, r24
    209c:	c0 90 5c 0b 	lds	r12, 0x0B5C	; 0x800b5c <sg_pfRXCallback>
    20a0:	d0 90 5d 0b 	lds	r13, 0x0B5D	; 0x800b5d <sg_pfRXCallback+0x1>
    20a4:	c1 14       	cp	r12, r1
    20a6:	d1 04       	cpc	r13, r1
    20a8:	61 f1       	breq	.+88     	; 0x2102 <CANMOBInterrupt+0xcc>
    20aa:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    20ae:	8f 70       	andi	r24, 0x0F	; 15
    20b0:	f8 2e       	mov	r15, r24
    20b2:	40 91 f3 00 	lds	r20, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f00f3>
    20b6:	50 e0       	ldi	r21, 0x00	; 0
    20b8:	44 0f       	add	r20, r20
    20ba:	55 1f       	adc	r21, r21
    20bc:	44 0f       	add	r20, r20
    20be:	55 1f       	adc	r21, r21
    20c0:	44 0f       	add	r20, r20
    20c2:	55 1f       	adc	r21, r21
    20c4:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f00f2>
    20c8:	82 95       	swap	r24
    20ca:	86 95       	lsr	r24
    20cc:	87 70       	andi	r24, 0x07	; 7
    20ce:	48 2b       	or	r20, r24
    20d0:	90 e0       	ldi	r25, 0x00	; 0
    20d2:	0a c0       	rjmp	.+20     	; 0x20e8 <CANMOBInterrupt+0xb2>
    20d4:	20 91 fa 00 	lds	r18, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
    20d8:	e1 e0       	ldi	r30, 0x01	; 1
    20da:	f0 e0       	ldi	r31, 0x00	; 0
    20dc:	ec 0f       	add	r30, r28
    20de:	fd 1f       	adc	r31, r29
    20e0:	e9 0f       	add	r30, r25
    20e2:	f1 1d       	adc	r31, r1
    20e4:	20 83       	st	Z, r18
    20e6:	9f 5f       	subi	r25, 0xFF	; 255
    20e8:	9f 15       	cp	r25, r15
    20ea:	a0 f3       	brcs	.-24     	; 0x20d4 <CANMOBInterrupt+0x9e>
    20ec:	ca 01       	movw	r24, r20
    20ee:	0e 94 0b 20 	call	0x4016	; 0x4016 <CANLookupCommand>
    20f2:	83 31       	cpi	r24, 0x13	; 19
    20f4:	31 f0       	breq	.+12     	; 0x2102 <CANMOBInterrupt+0xcc>
    20f6:	4f 2d       	mov	r20, r15
    20f8:	be 01       	movw	r22, r28
    20fa:	6f 5f       	subi	r22, 0xFF	; 255
    20fc:	7f 4f       	sbci	r23, 0xFF	; 255
    20fe:	f6 01       	movw	r30, r12
    2100:	09 95       	icall
    2102:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    2106:	8e 70       	andi	r24, 0x0E	; 14
    2108:	29 f0       	breq	.+10     	; 0x2114 <CANMOBInterrupt+0xde>
    210a:	ee ee       	ldi	r30, 0xEE	; 238
    210c:	f0 e0       	ldi	r31, 0x00	; 0
    210e:	80 81       	ld	r24, Z
    2110:	81 7f       	andi	r24, 0xF1	; 241
    2112:	80 83       	st	Z, r24
    2114:	ee ed       	ldi	r30, 0xDE	; 222
    2116:	f0 e0       	ldi	r31, 0x00	; 0
    2118:	80 81       	ld	r24, Z
    211a:	08 2b       	or	r16, r24
    211c:	00 83       	st	Z, r16
    211e:	ef ee       	ldi	r30, 0xEF	; 239
    2120:	f0 e0       	ldi	r31, 0x00	; 0
    2122:	80 81       	ld	r24, Z
    2124:	80 68       	ori	r24, 0x80	; 128
    2126:	80 83       	st	Z, r24
    2128:	2b c0       	rjmp	.+86     	; 0x2180 <CANMOBInterrupt+0x14a>
    212a:	81 30       	cpi	r24, 0x01	; 1
    212c:	49 f5       	brne	.+82     	; 0x2180 <CANMOBInterrupt+0x14a>
    212e:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    2132:	86 ff       	sbrs	r24, 6
    2134:	07 c0       	rjmp	.+14     	; 0x2144 <CANMOBInterrupt+0x10e>
    2136:	ee ee       	ldi	r30, 0xEE	; 238
    2138:	f0 e0       	ldi	r31, 0x00	; 0
    213a:	80 81       	ld	r24, Z
    213c:	8f 7b       	andi	r24, 0xBF	; 191
    213e:	80 83       	st	Z, r24
    2140:	10 92 6e 0b 	sts	0x0B6E, r1	; 0x800b6e <sg_u8Busy>
    2144:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    2148:	89 71       	andi	r24, 0x19	; 25
    214a:	d1 f0       	breq	.+52     	; 0x2180 <CANMOBInterrupt+0x14a>
    214c:	ee ee       	ldi	r30, 0xEE	; 238
    214e:	f0 e0       	ldi	r31, 0x00	; 0
    2150:	80 81       	ld	r24, Z
    2152:	86 7e       	andi	r24, 0xE6	; 230
    2154:	80 83       	st	Z, r24
    2156:	80 91 6d 0b 	lds	r24, 0x0B6D	; 0x800b6d <sg_u8TransmitAttempts>
    215a:	84 31       	cpi	r24, 0x14	; 20
    215c:	68 f4       	brcc	.+26     	; 0x2178 <CANMOBInterrupt+0x142>
    215e:	81 e0       	ldi	r24, 0x01	; 1
    2160:	80 93 6a 0b 	sts	0x0B6A, r24	; 0x800b6a <sg_bInRetransmit>
    2164:	21 e0       	ldi	r18, 0x01	; 1
    2166:	40 91 6b 0b 	lds	r20, 0x0B6B	; 0x800b6b <sg_u8LastTXDataLen>
    216a:	65 e3       	ldi	r22, 0x35	; 53
    216c:	7b e0       	ldi	r23, 0x0B	; 11
    216e:	80 91 6c 0b 	lds	r24, 0x0B6C	; 0x800b6c <sg_eLastTXType>
    2172:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <CANSendMessageInternal>
    2176:	04 c0       	rjmp	.+8      	; 0x2180 <CANMOBInterrupt+0x14a>
    2178:	10 92 6e 0b 	sts	0x0B6E, r1	; 0x800b6e <sg_u8Busy>
    217c:	10 92 6a 0b 	sts	0x0B6A, r1	; 0x800b6a <sg_bInRetransmit>
    2180:	28 96       	adiw	r28, 0x08	; 8
    2182:	0f b6       	in	r0, 0x3f	; 63
    2184:	f8 94       	cli
    2186:	de bf       	out	0x3e, r29	; 62
    2188:	0f be       	out	0x3f, r0	; 63
    218a:	cd bf       	out	0x3d, r28	; 61
    218c:	df 91       	pop	r29
    218e:	cf 91       	pop	r28
    2190:	1f 91       	pop	r17
    2192:	0f 91       	pop	r16
    2194:	ff 90       	pop	r15
    2196:	df 90       	pop	r13
    2198:	cf 90       	pop	r12
    219a:	08 95       	ret

Disassembly of section .text.__vector_18:

00002302 <__vector_18>:
    2302:	1f 92       	push	r1
    2304:	0f 92       	push	r0
    2306:	0f b6       	in	r0, 0x3f	; 63
    2308:	0f 92       	push	r0
    230a:	11 24       	eor	r1, r1
    230c:	0f 93       	push	r16
    230e:	1f 93       	push	r17
    2310:	2f 93       	push	r18
    2312:	3f 93       	push	r19
    2314:	4f 93       	push	r20
    2316:	5f 93       	push	r21
    2318:	6f 93       	push	r22
    231a:	7f 93       	push	r23
    231c:	8f 93       	push	r24
    231e:	9f 93       	push	r25
    2320:	af 93       	push	r26
    2322:	bf 93       	push	r27
    2324:	cf 93       	push	r28
    2326:	df 93       	push	r29
    2328:	ef 93       	push	r30
    232a:	ff 93       	push	r31
    232c:	eb ed       	ldi	r30, 0xDB	; 219
    232e:	f0 e0       	ldi	r31, 0x00	; 0
    2330:	d0 81       	ld	r29, Z
    2332:	10 91 de 00 	lds	r17, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7f00de>
    2336:	80 81       	ld	r24, Z
    2338:	8f 77       	andi	r24, 0x7F	; 127
    233a:	80 83       	st	Z, r24
    233c:	c0 91 e0 00 	lds	r28, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f00e0>
    2340:	c0 ff       	sbrs	r28, 0
    2342:	0c c0       	rjmp	.+24     	; 0x235c <__vector_18+0x5a>
    2344:	80 e0       	ldi	r24, 0x00	; 0
    2346:	0e 94 1b 10 	call	0x2036	; 0x2036 <CANMOBInterrupt>
    234a:	00 e0       	ldi	r16, 0x00	; 0
    234c:	20 e0       	ldi	r18, 0x00	; 0
    234e:	30 e0       	ldi	r19, 0x00	; 0
    2350:	4f e9       	ldi	r20, 0x9F	; 159
    2352:	53 e0       	ldi	r21, 0x03	; 3
    2354:	60 e0       	ldi	r22, 0x00	; 0
    2356:	80 e0       	ldi	r24, 0x00	; 0
    2358:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <CANMOBSet>
    235c:	c1 ff       	sbrs	r28, 1
    235e:	03 c0       	rjmp	.+6      	; 0x2366 <__vector_18+0x64>
    2360:	81 e0       	ldi	r24, 0x01	; 1
    2362:	0e 94 1b 10 	call	0x2036	; 0x2036 <CANMOBInterrupt>
    2366:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    236a:	86 ff       	sbrs	r24, 6
    236c:	16 c0       	rjmp	.+44     	; 0x239a <__vector_18+0x98>
    236e:	80 e4       	ldi	r24, 0x40	; 64
    2370:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    2374:	80 91 54 0b 	lds	r24, 0x0B54	; 0x800b54 <sg_u16BusOffEvents>
    2378:	90 91 55 0b 	lds	r25, 0x0B55	; 0x800b55 <sg_u16BusOffEvents+0x1>
    237c:	01 96       	adiw	r24, 0x01	; 1
    237e:	90 93 55 0b 	sts	0x0B55, r25	; 0x800b55 <sg_u16BusOffEvents+0x1>
    2382:	80 93 54 0b 	sts	0x0B54, r24	; 0x800b54 <sg_u16BusOffEvents>
    2386:	82 e0       	ldi	r24, 0x02	; 2
    2388:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f00d8>
    238c:	10 92 6e 0b 	sts	0x0B6E, r1	; 0x800b6e <sg_u8Busy>
    2390:	10 92 6a 0b 	sts	0x0B6A, r1	; 0x800b6a <sg_bInRetransmit>
    2394:	8a e0       	ldi	r24, 0x0A	; 10
    2396:	80 93 69 0b 	sts	0x0B69, r24	; 0x800b69 <sg_u8BusOffRecoveryDelay>
    239a:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    239e:	84 ff       	sbrs	r24, 4
    23a0:	0a c0       	rjmp	.+20     	; 0x23b6 <__vector_18+0xb4>
    23a2:	45 e4       	ldi	r20, 0x45	; 69
    23a4:	52 e0       	ldi	r21, 0x02	; 2
    23a6:	6c e4       	ldi	r22, 0x4C	; 76
    23a8:	73 e0       	ldi	r23, 0x03	; 3
    23aa:	80 e0       	ldi	r24, 0x00	; 0
    23ac:	0e 94 bf 24 	call	0x497e	; 0x497e <PlatformAssert>
    23b0:	80 e1       	ldi	r24, 0x10	; 16
    23b2:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    23b6:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    23ba:	83 ff       	sbrs	r24, 3
    23bc:	03 c0       	rjmp	.+6      	; 0x23c4 <__vector_18+0xc2>
    23be:	88 e0       	ldi	r24, 0x08	; 8
    23c0:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    23c4:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    23c8:	82 ff       	sbrs	r24, 2
    23ca:	03 c0       	rjmp	.+6      	; 0x23d2 <__vector_18+0xd0>
    23cc:	84 e0       	ldi	r24, 0x04	; 4
    23ce:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    23d2:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    23d6:	81 ff       	sbrs	r24, 1
    23d8:	03 c0       	rjmp	.+6      	; 0x23e0 <__vector_18+0xde>
    23da:	82 e0       	ldi	r24, 0x02	; 2
    23dc:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    23e0:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    23e4:	80 ff       	sbrs	r24, 0
    23e6:	13 c0       	rjmp	.+38     	; 0x240e <__vector_18+0x10c>
    23e8:	81 e0       	ldi	r24, 0x01	; 1
    23ea:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    23ee:	80 91 6d 0b 	lds	r24, 0x0B6D	; 0x800b6d <sg_u8TransmitAttempts>
    23f2:	84 31       	cpi	r24, 0x14	; 20
    23f4:	50 f4       	brcc	.+20     	; 0x240a <__vector_18+0x108>
    23f6:	21 e0       	ldi	r18, 0x01	; 1
    23f8:	40 91 6b 0b 	lds	r20, 0x0B6B	; 0x800b6b <sg_u8LastTXDataLen>
    23fc:	65 e3       	ldi	r22, 0x35	; 53
    23fe:	7b e0       	ldi	r23, 0x0B	; 11
    2400:	80 91 6c 0b 	lds	r24, 0x0B6C	; 0x800b6c <sg_eLastTXType>
    2404:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <CANSendMessageInternal>
    2408:	02 c0       	rjmp	.+4      	; 0x240e <__vector_18+0x10c>
    240a:	10 92 6e 0b 	sts	0x0B6E, r1	; 0x800b6e <sg_u8Busy>
    240e:	10 93 de 00 	sts	0x00DE, r17	; 0x8000de <__TEXT_REGION_LENGTH__+0x7f00de>
    2412:	d0 93 db 00 	sts	0x00DB, r29	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f00db>
    2416:	ff 91       	pop	r31
    2418:	ef 91       	pop	r30
    241a:	df 91       	pop	r29
    241c:	cf 91       	pop	r28
    241e:	bf 91       	pop	r27
    2420:	af 91       	pop	r26
    2422:	9f 91       	pop	r25
    2424:	8f 91       	pop	r24
    2426:	7f 91       	pop	r23
    2428:	6f 91       	pop	r22
    242a:	5f 91       	pop	r21
    242c:	4f 91       	pop	r20
    242e:	3f 91       	pop	r19
    2430:	2f 91       	pop	r18
    2432:	1f 91       	pop	r17
    2434:	0f 91       	pop	r16
    2436:	0f 90       	pop	r0
    2438:	0f be       	out	0x3f, r0	; 63
    243a:	0f 90       	pop	r0
    243c:	1f 90       	pop	r1
    243e:	18 95       	reti

Disassembly of section .text.CANSendMessage:

000048ca <CANSendMessage>:
bool CANSendMessage( ECANMessageType eType,
					 uint8_t* pu8Data,
					 uint8_t u8DataLen )
{
	// Don't transmit during bus-off recovery period
	if (sg_u8BusOffRecoveryDelay > 0)
    48ca:	90 91 69 0b 	lds	r25, 0x0B69	; 0x800b69 <sg_u8BusOffRecoveryDelay>
    48ce:	91 11       	cpse	r25, r1
    48d0:	0d c0       	rjmp	.+26     	; 0x48ec <CANSendMessage+0x22>
	{
		return(false);
	}

	// Don't transmit during TX backoff period (adaptive backoff for persistent errors)
	if (sg_u8TxBackoffDelay > 0)
    48d2:	90 91 67 0b 	lds	r25, 0x0B67	; 0x800b67 <sg_u8TxBackoffDelay>
    48d6:	91 11       	cpse	r25, r1
    48d8:	0b c0       	rjmp	.+22     	; 0x48f0 <CANSendMessage+0x26>
		return(false);
	}

	// If we're busy, kick it back so we're cooperatively multitasking
	// rather than spin locking
	if (sg_u8Busy)
    48da:	90 91 6e 0b 	lds	r25, 0x0B6E	; 0x800b6e <sg_u8Busy>
    48de:	91 11       	cpse	r25, r1
    48e0:	09 c0       	rjmp	.+18     	; 0x48f4 <CANSendMessage+0x2a>
	{
		return(false);
	}

	CANSendMessageInternal( eType, pu8Data, u8DataLen, false );
    48e2:	20 e0       	ldi	r18, 0x00	; 0
    48e4:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <CANSendMessageInternal>
	return( true );
    48e8:	81 e0       	ldi	r24, 0x01	; 1
    48ea:	08 95       	ret
					 uint8_t u8DataLen )
{
	// Don't transmit during bus-off recovery period
	if (sg_u8BusOffRecoveryDelay > 0)
	{
		return(false);
    48ec:	80 e0       	ldi	r24, 0x00	; 0
    48ee:	08 95       	ret
	}

	// Don't transmit during TX backoff period (adaptive backoff for persistent errors)
	if (sg_u8TxBackoffDelay > 0)
	{
		return(false);
    48f0:	80 e0       	ldi	r24, 0x00	; 0
    48f2:	08 95       	ret

	// If we're busy, kick it back so we're cooperatively multitasking
	// rather than spin locking
	if (sg_u8Busy)
	{
		return(false);
    48f4:	80 e0       	ldi	r24, 0x00	; 0
	}

	CANSendMessageInternal( eType, pu8Data, u8DataLen, false );
	return( true );
}
    48f6:	08 95       	ret

Disassembly of section .text.CANSetRXCallback:

00005028 <CANSetRXCallback>:

void CANSetRXCallback( void (*pfCallback)(ECANMessageType eType, uint8_t* pu8Data, uint8_t u8DataLen) )
{
	sg_pfRXCallback = pfCallback;
    5028:	90 93 5d 0b 	sts	0x0B5D, r25	; 0x800b5d <sg_pfRXCallback+0x1>
    502c:	80 93 5c 0b 	sts	0x0B5C, r24	; 0x800b5c <sg_pfRXCallback>
    5030:	08 95       	ret

Disassembly of section .text.CANInit:

00003730 <CANInit>:
}

void CANInit( void )
{
    3730:	0f 93       	push	r16
    3732:	cf 93       	push	r28
	// Init clock
	// See datasheet table 16-2.
	// For 8Mhz, set CAN rate to 500 Kbps
	CANBT1 = 0x02;
    3734:	c2 e0       	ldi	r28, 0x02	; 2
    3736:	c0 93 e2 00 	sts	0x00E2, r28	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f00e2>
	CANBT2 = 0x04;
    373a:	84 e0       	ldi	r24, 0x04	; 4
    373c:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f00e3>
	CANBT3 = 0x12;
    3740:	82 e1       	ldi	r24, 0x12	; 18
    3742:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7f00e4>
	
	// Init message objects (MOBs) since there are no defaults at reset
	CANMOBSet( 0, &sg_sMOBDisabled, NULL, 0 );
    3746:	00 e0       	ldi	r16, 0x00	; 0
    3748:	20 e0       	ldi	r18, 0x00	; 0
    374a:	30 e0       	ldi	r19, 0x00	; 0
    374c:	47 ea       	ldi	r20, 0xA7	; 167
    374e:	53 e0       	ldi	r21, 0x03	; 3
    3750:	60 e0       	ldi	r22, 0x00	; 0
    3752:	80 e0       	ldi	r24, 0x00	; 0
    3754:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <CANMOBSet>
	CANMOBSet( 1, &sg_sMOBDisabled, NULL, 0 );
    3758:	20 e0       	ldi	r18, 0x00	; 0
    375a:	30 e0       	ldi	r19, 0x00	; 0
    375c:	47 ea       	ldi	r20, 0xA7	; 167
    375e:	53 e0       	ldi	r21, 0x03	; 3
    3760:	60 e0       	ldi	r22, 0x00	; 0
    3762:	81 e0       	ldi	r24, 0x01	; 1
    3764:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <CANMOBSet>
	CANMOBSet( 2, &sg_sMOBDisabled, NULL, 0 );
    3768:	20 e0       	ldi	r18, 0x00	; 0
    376a:	30 e0       	ldi	r19, 0x00	; 0
    376c:	47 ea       	ldi	r20, 0xA7	; 167
    376e:	53 e0       	ldi	r21, 0x03	; 3
    3770:	60 e0       	ldi	r22, 0x00	; 0
    3772:	82 e0       	ldi	r24, 0x02	; 2
    3774:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <CANMOBSet>
	CANMOBSet( 3, &sg_sMOBDisabled, NULL, 0 );
    3778:	20 e0       	ldi	r18, 0x00	; 0
    377a:	30 e0       	ldi	r19, 0x00	; 0
    377c:	47 ea       	ldi	r20, 0xA7	; 167
    377e:	53 e0       	ldi	r21, 0x03	; 3
    3780:	60 e0       	ldi	r22, 0x00	; 0
    3782:	83 e0       	ldi	r24, 0x03	; 3
    3784:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <CANMOBSet>
	CANMOBSet( 4, &sg_sMOBDisabled, NULL, 0 );
    3788:	20 e0       	ldi	r18, 0x00	; 0
    378a:	30 e0       	ldi	r19, 0x00	; 0
    378c:	47 ea       	ldi	r20, 0xA7	; 167
    378e:	53 e0       	ldi	r21, 0x03	; 3
    3790:	60 e0       	ldi	r22, 0x00	; 0
    3792:	84 e0       	ldi	r24, 0x04	; 4
    3794:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <CANMOBSet>
	CANMOBSet( 5, &sg_sMOBDisabled, NULL, 0 );
    3798:	20 e0       	ldi	r18, 0x00	; 0
    379a:	30 e0       	ldi	r19, 0x00	; 0
    379c:	47 ea       	ldi	r20, 0xA7	; 167
    379e:	53 e0       	ldi	r21, 0x03	; 3
    37a0:	60 e0       	ldi	r22, 0x00	; 0
    37a2:	85 e0       	ldi	r24, 0x05	; 5
    37a4:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <CANMOBSet>
	
	// Setup generic RX
	CANMOBSet( CANMOB_RX_IDX, &sg_sMOBGenericReceive, NULL, 0 );
    37a8:	20 e0       	ldi	r18, 0x00	; 0
    37aa:	30 e0       	ldi	r19, 0x00	; 0
    37ac:	4f e9       	ldi	r20, 0x9F	; 159
    37ae:	53 e0       	ldi	r21, 0x03	; 3
    37b0:	60 e0       	ldi	r22, 0x00	; 0
    37b2:	80 e0       	ldi	r24, 0x00	; 0
    37b4:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <CANMOBSet>
	
	// Enable general CAN interrupts
	CANGIE = (1 << ENIT) | (1 << ENRX) | (1 << ENTX) | (1 << ENERR) | (1 << ENBX) | (1 << ENERG);
    37b8:	8e eb       	ldi	r24, 0xBE	; 190
    37ba:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f00db>

//	CANGIE &= ~(1 << ENOVRT);  // Disable CAN timer overflow interrupt

	// Enable the bus
	CANGCON = (1 << ENASTB);
    37be:	c0 93 d8 00 	sts	0x00D8, r28	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f00d8>
	sg_u8Busy = 0;
    37c2:	10 92 6e 0b 	sts	0x0B6E, r1	; 0x800b6e <sg_u8Busy>
}
    37c6:	cf 91       	pop	r28
    37c8:	0f 91       	pop	r16
    37ca:	08 95       	ret

Disassembly of section .text.CANCheckTxStatus:

00003498 <CANCheckTxStatus>:

void CANCheckTxStatus(void)
{
	// Only check if we think we're busy
	if (sg_u8Busy > 0)
    3498:	80 91 6e 0b 	lds	r24, 0x0B6E	; 0x800b6e <sg_u8Busy>
    349c:	88 23       	and	r24, r24
    349e:	09 f4       	brne	.+2      	; 0x34a2 <CANCheckTxStatus+0xa>
    34a0:	50 c0       	rjmp	.+160    	; 0x3542 <CANCheckTxStatus+0xaa>
	{
		// Save current MOB and switch to TX MOB
		uint8_t savedMOB = CANPAGE;
    34a2:	ed ee       	ldi	r30, 0xED	; 237
    34a4:	f0 e0       	ldi	r31, 0x00	; 0
    34a6:	80 81       	ld	r24, Z
		CANPAGE = CANMOB_TX_IDX << MOBNB0;
    34a8:	90 e1       	ldi	r25, 0x10	; 16
    34aa:	90 83       	st	Z, r25

		// Check if transmission completed successfully
		if (CANSTMOB & (1 << TXOK))
    34ac:	90 91 ee 00 	lds	r25, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    34b0:	96 ff       	sbrs	r25, 6
    34b2:	12 c0       	rjmp	.+36     	; 0x34d8 <CANCheckTxStatus+0x40>
		{
			// Clear the flag
			CANSTMOB &= ~(1 << TXOK);
    34b4:	ee ee       	ldi	r30, 0xEE	; 238
    34b6:	f0 e0       	ldi	r31, 0x00	; 0
    34b8:	90 81       	ld	r25, Z
    34ba:	9f 7b       	andi	r25, 0xBF	; 191
    34bc:	90 83       	st	Z, r25
			sg_u8Busy = 0;
    34be:	10 92 6e 0b 	sts	0x0B6E, r1	; 0x800b6e <sg_u8Busy>
			sg_u16TxOkPolled++;	// Diagnostic: we caught TXOK by polling
    34c2:	20 91 56 0b 	lds	r18, 0x0B56	; 0x800b56 <sg_u16TxOkPolled>
    34c6:	30 91 57 0b 	lds	r19, 0x0B57	; 0x800b57 <sg_u16TxOkPolled+0x1>
    34ca:	2f 5f       	subi	r18, 0xFF	; 255
    34cc:	3f 4f       	sbci	r19, 0xFF	; 255
    34ce:	30 93 57 0b 	sts	0x0B57, r19	; 0x800b57 <sg_u16TxOkPolled+0x1>
    34d2:	20 93 56 0b 	sts	0x0B56, r18	; 0x800b56 <sg_u16TxOkPolled>
    34d6:	33 c0       	rjmp	.+102    	; 0x353e <CANCheckTxStatus+0xa6>
		}
		// Check for transmission errors
		else if (CANSTMOB & ((1 << BERR) | (1 << SERR) | (1 << CERR) | (1 << FERR) | (1 << AERR)))
    34d8:	90 91 ee 00 	lds	r25, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    34dc:	9f 71       	andi	r25, 0x1F	; 31
    34de:	89 f0       	breq	.+34     	; 0x3502 <CANCheckTxStatus+0x6a>
		{
			// Clear all error flags and reset busy flag
			CANSTMOB = 0x00;
    34e0:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
			sg_u8Busy = 0;
    34e4:	10 92 6e 0b 	sts	0x0B6E, r1	; 0x800b6e <sg_u8Busy>
			sg_u16TxErrors++;	// Diagnostic: error recovered
    34e8:	20 91 58 0b 	lds	r18, 0x0B58	; 0x800b58 <sg_u16TxErrors>
    34ec:	30 91 59 0b 	lds	r19, 0x0B59	; 0x800b59 <sg_u16TxErrors+0x1>
    34f0:	2f 5f       	subi	r18, 0xFF	; 255
    34f2:	3f 4f       	sbci	r19, 0xFF	; 255
    34f4:	30 93 59 0b 	sts	0x0B59, r19	; 0x800b59 <sg_u16TxErrors+0x1>
    34f8:	20 93 58 0b 	sts	0x0B58, r18	; 0x800b58 <sg_u16TxErrors>

			// Clear in-retransmit flag since we're giving up
			sg_bInRetransmit = false;
    34fc:	10 92 6a 0b 	sts	0x0B6A, r1	; 0x800b6a <sg_bInRetransmit>
    3500:	1e c0       	rjmp	.+60     	; 0x353e <CANCheckTxStatus+0xa6>
		}
		else
		{
			// No completion or error yet, decrement timeout counter
			sg_u8Busy--;
    3502:	90 91 6e 0b 	lds	r25, 0x0B6E	; 0x800b6e <sg_u8Busy>
    3506:	91 50       	subi	r25, 0x01	; 1
    3508:	90 93 6e 0b 	sts	0x0B6E, r25	; 0x800b6e <sg_u8Busy>

			// If timeout expired, force clear
			if (sg_u8Busy == 0)
    350c:	90 91 6e 0b 	lds	r25, 0x0B6E	; 0x800b6e <sg_u8Busy>
    3510:	91 11       	cpse	r25, r1
    3512:	15 c0       	rjmp	.+42     	; 0x353e <CANCheckTxStatus+0xa6>
			{
				// Clear any pending status and disable the MOB
				CANSTMOB = 0x00;
    3514:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
				CANCDMOB = 0x00;	// Disable the MOB
    3518:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>

				// Clear in-retransmit flag since we're giving up
				sg_bInRetransmit = false;
    351c:	10 92 6a 0b 	sts	0x0B6A, r1	; 0x800b6a <sg_bInRetransmit>

				// Disable the MOB interrupt to prevent spurious interrupts
				CANIE2 &= ~(1 << CANMOB_TX_IDX);
    3520:	ee ed       	ldi	r30, 0xDE	; 222
    3522:	f0 e0       	ldi	r31, 0x00	; 0
    3524:	90 81       	ld	r25, Z
    3526:	9d 7f       	andi	r25, 0xFD	; 253
    3528:	90 83       	st	Z, r25

				sg_u16TxTimeouts++;	// Diagnostic: timeout occurred
    352a:	20 91 5a 0b 	lds	r18, 0x0B5A	; 0x800b5a <sg_u16TxTimeouts>
    352e:	30 91 5b 0b 	lds	r19, 0x0B5B	; 0x800b5b <sg_u16TxTimeouts+0x1>
    3532:	2f 5f       	subi	r18, 0xFF	; 255
    3534:	3f 4f       	sbci	r19, 0xFF	; 255
    3536:	30 93 5b 0b 	sts	0x0B5B, r19	; 0x800b5b <sg_u16TxTimeouts+0x1>
    353a:	20 93 5a 0b 	sts	0x0B5A, r18	; 0x800b5a <sg_u16TxTimeouts>
			}
		}

		// Restore MOB
		CANPAGE = savedMOB;
    353e:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f00ed>
    3542:	08 95       	ret

Disassembly of section .text.CANCheckHealth:

000026b0 <CANCheckHealth>:
{
	return sg_u8TxBackoffDelay;
}

void CANCheckHealth(void)
{
    26b0:	0f 93       	push	r16
	// Decrement bus-off recovery delay if active
	if (sg_u8BusOffRecoveryDelay > 0)
    26b2:	80 91 69 0b 	lds	r24, 0x0B69	; 0x800b69 <sg_u8BusOffRecoveryDelay>
    26b6:	88 23       	and	r24, r24
    26b8:	19 f0       	breq	.+6      	; 0x26c0 <CANCheckHealth+0x10>
	{
		sg_u8BusOffRecoveryDelay--;
    26ba:	81 50       	subi	r24, 0x01	; 1
    26bc:	80 93 69 0b 	sts	0x0B69, r24	; 0x800b69 <sg_u8BusOffRecoveryDelay>
	}

	// Decrement TX backoff delay if active
	if (sg_u8TxBackoffDelay > 0)
    26c0:	80 91 67 0b 	lds	r24, 0x0B67	; 0x800b67 <sg_u8TxBackoffDelay>
    26c4:	88 23       	and	r24, r24
    26c6:	19 f0       	breq	.+6      	; 0x26ce <CANCheckHealth+0x1e>
	{
		sg_u8TxBackoffDelay--;
    26c8:	81 50       	subi	r24, 0x01	; 1
    26ca:	80 93 67 0b 	sts	0x0B67, r24	; 0x800b67 <sg_u8TxBackoffDelay>
	}

	// Store current error counter values for diagnostics
	static uint8_t lastTEC = 0;
	static uint8_t lastREC = 0;
	uint8_t currentTEC = CANTEC;
    26ce:	20 91 ea 00 	lds	r18, 0x00EA	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7f00ea>
	uint8_t currentREC = CANREC;
    26d2:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f00eb>

	// Detect TX-only errors (TEC increasing but REC stays at 0)
	// This indicates the module can't transmit but isn't seeing bus activity
	// Likely a hardware issue with TX circuitry or transceiver
	if ((currentTEC > lastTEC) && (currentREC == 0) && (lastREC == 0))
    26d6:	80 91 66 0b 	lds	r24, 0x0B66	; 0x800b66 <lastTEC.2006>
    26da:	82 17       	cp	r24, r18
    26dc:	48 f5       	brcc	.+82     	; 0x2730 <CANCheckHealth+0x80>
    26de:	31 11       	cpse	r19, r1
    26e0:	27 c0       	rjmp	.+78     	; 0x2730 <CANCheckHealth+0x80>
    26e2:	90 91 65 0b 	lds	r25, 0x0B65	; 0x800b65 <lastREC.2007>
    26e6:	91 11       	cpse	r25, r1
    26e8:	23 c0       	rjmp	.+70     	; 0x2730 <CANCheckHealth+0x80>
	{
		sg_u8TxOnlyErrorCount++;
    26ea:	40 91 68 0b 	lds	r20, 0x0B68	; 0x800b68 <sg_u8TxOnlyErrorCount>
    26ee:	4f 5f       	subi	r20, 0xFF	; 255
    26f0:	40 93 68 0b 	sts	0x0B68, r20	; 0x800b68 <sg_u8TxOnlyErrorCount>

		// If we have persistent TX-only errors, apply adaptive backoff
		if (sg_u8TxOnlyErrorCount > 3)
    26f4:	44 30       	cpi	r20, 0x04	; 4
    26f6:	f8 f0       	brcs	.+62     	; 0x2736 <CANCheckHealth+0x86>
		{
			// Exponential backoff: 2, 4, 8, 16 ticks (200ms to 1.6s)
			if (sg_u8TxBackoffDelay == 0)
    26f8:	90 91 67 0b 	lds	r25, 0x0B67	; 0x800b67 <sg_u8TxBackoffDelay>
    26fc:	91 11       	cpse	r25, r1
    26fe:	1b c0       	rjmp	.+54     	; 0x2736 <CANCheckHealth+0x86>
			{
				sg_u8TxBackoffDelay = 2 << ((sg_u8TxOnlyErrorCount - 3) > 3 ? 3 : (sg_u8TxOnlyErrorCount - 3));
    2700:	50 e0       	ldi	r21, 0x00	; 0
    2702:	43 50       	subi	r20, 0x03	; 3
    2704:	51 09       	sbc	r21, r1
    2706:	44 30       	cpi	r20, 0x04	; 4
    2708:	51 05       	cpc	r21, r1
    270a:	14 f0       	brlt	.+4      	; 0x2710 <CANCheckHealth+0x60>
    270c:	43 e0       	ldi	r20, 0x03	; 3
    270e:	50 e0       	ldi	r21, 0x00	; 0
    2710:	62 e0       	ldi	r22, 0x02	; 2
    2712:	70 e0       	ldi	r23, 0x00	; 0
    2714:	fb 01       	movw	r30, r22
    2716:	02 c0       	rjmp	.+4      	; 0x271c <CANCheckHealth+0x6c>
    2718:	ee 0f       	add	r30, r30
    271a:	ff 1f       	adc	r31, r31
    271c:	4a 95       	dec	r20
    271e:	e2 f7       	brpl	.-8      	; 0x2718 <CANCheckHealth+0x68>
    2720:	e0 93 67 0b 	sts	0x0B67, r30	; 0x800b67 <sg_u8TxBackoffDelay>
				if (sg_u8TxBackoffDelay > 16)
    2724:	e1 31       	cpi	r30, 0x11	; 17
    2726:	38 f0       	brcs	.+14     	; 0x2736 <CANCheckHealth+0x86>
				{
					sg_u8TxBackoffDelay = 16;	// Cap at 1.6 seconds
    2728:	90 e1       	ldi	r25, 0x10	; 16
    272a:	90 93 67 0b 	sts	0x0B67, r25	; 0x800b67 <sg_u8TxBackoffDelay>
    272e:	03 c0       	rjmp	.+6      	; 0x2736 <CANCheckHealth+0x86>
				}
			}
		}
	}
	else if (currentREC > 0)
    2730:	31 11       	cpse	r19, r1
	{
		// We're seeing bus activity - reset TX-only error counter
		sg_u8TxOnlyErrorCount = 0;
    2732:	10 92 68 0b 	sts	0x0B68, r1	; 0x800b68 <sg_u8TxOnlyErrorCount>
	}

	// Check if error counters are increasing rapidly (sign of bus problems)
	if ((currentTEC > lastTEC + 10) || (currentREC > lastREC + 10))
    2736:	42 2f       	mov	r20, r18
    2738:	50 e0       	ldi	r21, 0x00	; 0
    273a:	90 e0       	ldi	r25, 0x00	; 0
    273c:	0a 96       	adiw	r24, 0x0a	; 10
    273e:	84 17       	cp	r24, r20
    2740:	95 07       	cpc	r25, r21
    2742:	4c f0       	brlt	.+18     	; 0x2756 <CANCheckHealth+0xa6>
    2744:	43 2f       	mov	r20, r19
    2746:	50 e0       	ldi	r21, 0x00	; 0
    2748:	80 91 65 0b 	lds	r24, 0x0B65	; 0x800b65 <lastREC.2007>
    274c:	90 e0       	ldi	r25, 0x00	; 0
    274e:	0a 96       	adiw	r24, 0x0a	; 10
    2750:	84 17       	cp	r24, r20
    2752:	95 07       	cpc	r25, r21
    2754:	3c f4       	brge	.+14     	; 0x2764 <CANCheckHealth+0xb4>
	{
		// Rapid error increase - likely physical bus problem
		// Apply temporary backoff
		if (sg_u8TxBackoffDelay < 5)
    2756:	80 91 67 0b 	lds	r24, 0x0B67	; 0x800b67 <sg_u8TxBackoffDelay>
    275a:	85 30       	cpi	r24, 0x05	; 5
    275c:	18 f4       	brcc	.+6      	; 0x2764 <CANCheckHealth+0xb4>
		{
			sg_u8TxBackoffDelay = 5;	// 500ms backoff for rapid errors
    275e:	85 e0       	ldi	r24, 0x05	; 5
    2760:	80 93 67 0b 	sts	0x0B67, r24	; 0x800b67 <sg_u8TxBackoffDelay>
		}
	}

	lastTEC = currentTEC;
    2764:	20 93 66 0b 	sts	0x0B66, r18	; 0x800b66 <lastTEC.2006>
	lastREC = currentREC;
    2768:	30 93 65 0b 	sts	0x0B65, r19	; 0x800b65 <lastREC.2007>

	// Check if CAN controller is in error passive state
	// TEC (Transmit Error Counter) or REC (Receive Error Counter) > 127
	if ((currentTEC > 127) || (currentREC > 127))
    276c:	22 23       	and	r18, r18
    276e:	14 f0       	brlt	.+4      	; 0x2774 <CANCheckHealth+0xc4>
    2770:	33 23       	and	r19, r19
    2772:	4c f4       	brge	.+18     	; 0x2786 <CANCheckHealth+0xd6>
	{
		sg_u16ErrorPassive++;
    2774:	80 91 45 0b 	lds	r24, 0x0B45	; 0x800b45 <sg_u16ErrorPassive>
    2778:	90 91 46 0b 	lds	r25, 0x0B46	; 0x800b46 <sg_u16ErrorPassive+0x1>
    277c:	01 96       	adiw	r24, 0x01	; 1
    277e:	90 93 46 0b 	sts	0x0B46, r25	; 0x800b46 <sg_u16ErrorPassive+0x1>
    2782:	80 93 45 0b 	sts	0x0B45, r24	; 0x800b45 <sg_u16ErrorPassive>
		// Very close to bus-off (255) - try to prevent it
		// Could temporarily stop transmitting to let errors clear
	}

	// Check if CAN is disabled (should always be enabled)
	if (!(CANGSTA & (1 << ENFG)))
    2786:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7f00d9>
    278a:	82 fd       	sbrc	r24, 2
    278c:	12 c0       	rjmp	.+36     	; 0x27b2 <CANCheckHealth+0x102>
	{
		// CAN controller is disabled - re-enable it!
		CANGCON = (1 << ENASTB);
    278e:	82 e0       	ldi	r24, 0x02	; 2
    2790:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f00d8>

		// Re-initialize RX MOB since controller was disabled
		CANMOBSet(CANMOB_RX_IDX, &sg_sMOBGenericReceive, NULL, 0);
    2794:	00 e0       	ldi	r16, 0x00	; 0
    2796:	20 e0       	ldi	r18, 0x00	; 0
    2798:	30 e0       	ldi	r19, 0x00	; 0
    279a:	4f e9       	ldi	r20, 0x9F	; 159
    279c:	53 e0       	ldi	r21, 0x03	; 3
    279e:	60 e0       	ldi	r22, 0x00	; 0
    27a0:	80 e0       	ldi	r24, 0x00	; 0
    27a2:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <CANMOBSet>

		// After bus-off recovery, error counters should be at 0
		// If they're not, there's still a bus problem
		if ((CANTEC > 0) || (CANREC > 0))
    27a6:	80 91 ea 00 	lds	r24, 0x00EA	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7f00ea>
    27aa:	81 11       	cpse	r24, r1
    27ac:	02 c0       	rjmp	.+4      	; 0x27b2 <CANCheckHealth+0x102>
    27ae:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f00eb>
			// Still have errors after re-enable - bus problem persists
		}
	}

	// Check if RX MOB is still enabled
	uint8_t savedMOB = CANPAGE;
    27b2:	ed ee       	ldi	r30, 0xED	; 237
    27b4:	f0 e0       	ldi	r31, 0x00	; 0
    27b6:	90 81       	ld	r25, Z
	CANPAGE = CANMOB_RX_IDX << MOBNB0;
    27b8:	10 82       	st	Z, r1

	// If RX MOB is disabled (CONMOB bits are 0), re-enable it
	if ((CANCDMOB & 0xC0) == 0)
    27ba:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    27be:	80 7c       	andi	r24, 0xC0	; 192
    27c0:	59 f4       	brne	.+22     	; 0x27d8 <CANCheckHealth+0x128>
	{
		// RX MOB is disabled - this shouldn't happen!
		// Re-enable it
		CANPAGE = savedMOB;  // Restore first
    27c2:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f00ed>
		CANMOBSet(CANMOB_RX_IDX, &sg_sMOBGenericReceive, NULL, 0);
    27c6:	00 e0       	ldi	r16, 0x00	; 0
    27c8:	20 e0       	ldi	r18, 0x00	; 0
    27ca:	30 e0       	ldi	r19, 0x00	; 0
    27cc:	4f e9       	ldi	r20, 0x9F	; 159
    27ce:	53 e0       	ldi	r21, 0x03	; 3
    27d0:	60 e0       	ldi	r22, 0x00	; 0
    27d2:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <CANMOBSet>
    27d6:	02 c0       	rjmp	.+4      	; 0x27dc <CANCheckHealth+0x12c>
	}
	else
	{
		CANPAGE = savedMOB;  // Restore MOB
    27d8:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f00ed>
	}
}
    27dc:	0f 91       	pop	r16
    27de:	08 95       	ret

Disassembly of section .text.DebugOut:

00004fd8 <DebugOut>:
}

#endif

void DebugOut( const char* peFormat, ... )
{
    4fd8:	cf 93       	push	r28
    4fda:	df 93       	push	r29
    4fdc:	cd b7       	in	r28, 0x3d	; 61
    4fde:	de b7       	in	r29, 0x3e	; 62
	
	va_end( args );	 */
	
	//DebugSerialSend( (uint8_t*)u8Buffer, strlen(u8Buffer) );
#endif
}
    4fe0:	df 91       	pop	r29
    4fe2:	cf 91       	pop	r28
    4fe4:	08 95       	ret

Disassembly of section .text.EEPROMRead:

00004f3e <EEPROMRead>:
}

uint8_t EEPROMRead(uint16_t u16Address)
{
	// Wait for any completion of writes, etc..
	while (EECR & (1 << EEWE));
    4f3e:	f9 99       	sbic	0x1f, 1	; 31
    4f40:	fe cf       	rjmp	.-4      	; 0x4f3e <EEPROMRead>

	// Set address	
	EEAR = u16Address;
    4f42:	92 bd       	out	0x22, r25	; 34
    4f44:	81 bd       	out	0x21, r24	; 33
	
	// Start EEPROM read
	EECR |= (1 << EERE);
    4f46:	8f b3       	in	r24, 0x1f	; 31
    4f48:	81 60       	ori	r24, 0x01	; 1
    4f4a:	8f bb       	out	0x1f, r24	; 31
	
	// Return the data
	return(EEDR);
    4f4c:	80 b5       	in	r24, 0x20	; 32
    4f4e:	08 95       	ret

Disassembly of section .text.I2CBitDelay:

00004fe6 <I2CBitDelay>:
#define SDA_SET_INPUT()			(I2C_PORT_DDR &= ((uint8_t) ~(1 << I2C_SDA_PIN))); SDA_HIGH()

// Delays for one I2C bit's worth of time
static void I2CBitDelay(void)
{
	Delay(10);
    4fe6:	6a e0       	ldi	r22, 0x0A	; 10
    4fe8:	70 e0       	ldi	r23, 0x00	; 0
    4fea:	80 e0       	ldi	r24, 0x00	; 0
    4fec:	90 e0       	ldi	r25, 0x00	; 0
    4fee:	0e 94 f7 21 	call	0x43ee	; 0x43ee <Delay>
    4ff2:	08 95       	ret

Disassembly of section .text.I2CStart:

00004926 <I2CStart>:

// Send an I2C start sequence and quantize foreground code to the overflow
// timer
void I2CStart(void)
{
	SDA_SET_OUTPUT();
    4926:	8a b1       	in	r24, 0x0a	; 10
    4928:	82 60       	ori	r24, 0x02	; 2
    492a:	8a b9       	out	0x0a, r24	; 10
	SDA_HIGH();
    492c:	8b b1       	in	r24, 0x0b	; 11
    492e:	82 60       	ori	r24, 0x02	; 2
    4930:	8b b9       	out	0x0b, r24	; 11
	SCL_HIGH();
    4932:	8b b1       	in	r24, 0x0b	; 11
    4934:	81 60       	ori	r24, 0x01	; 1
    4936:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    4938:	0e 94 f3 27 	call	0x4fe6	; 0x4fe6 <I2CBitDelay>
	SDA_LOW();
    493c:	8b b1       	in	r24, 0x0b	; 11
    493e:	8d 7f       	andi	r24, 0xFD	; 253
    4940:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    4942:	0e 94 f3 27 	call	0x4fe6	; 0x4fe6 <I2CBitDelay>
	SCL_LOW();
    4946:	8b b1       	in	r24, 0x0b	; 11
    4948:	8e 7f       	andi	r24, 0xFE	; 254
    494a:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    494c:	0e 94 f3 27 	call	0x4fe6	; 0x4fe6 <I2CBitDelay>
    4950:	08 95       	ret

Disassembly of section .text.I2CStop:

00004acc <I2CStop>:
}

// Send an I2C stop sequence
void I2CStop(void)
{
	SDA_LOW();
    4acc:	8b b1       	in	r24, 0x0b	; 11
    4ace:	8d 7f       	andi	r24, 0xFD	; 253
    4ad0:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    4ad2:	0e 94 f3 27 	call	0x4fe6	; 0x4fe6 <I2CBitDelay>
	SCL_HIGH();
    4ad6:	8b b1       	in	r24, 0x0b	; 11
    4ad8:	81 60       	ori	r24, 0x01	; 1
    4ada:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    4adc:	0e 94 f3 27 	call	0x4fe6	; 0x4fe6 <I2CBitDelay>
	SDA_SET_INPUT();
    4ae0:	8a b1       	in	r24, 0x0a	; 10
    4ae2:	8d 7f       	andi	r24, 0xFD	; 253
    4ae4:	8a b9       	out	0x0a, r24	; 10
    4ae6:	8b b1       	in	r24, 0x0b	; 11
    4ae8:	82 60       	ori	r24, 0x02	; 2
    4aea:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    4aec:	0e 94 f3 27 	call	0x4fe6	; 0x4fe6 <I2CBitDelay>
    4af0:	08 95       	ret

Disassembly of section .text.I2CUnstick:

00004642 <I2CUnstick>:
}

// Unsticks an I2C bus
void I2CUnstick(void)
{
    4642:	cf 93       	push	r28
	uint8_t u8UnstickBits = 64;

	SCL_SET_OUTPUT();
    4644:	8a b1       	in	r24, 0x0a	; 10
    4646:	81 60       	ori	r24, 0x01	; 1
    4648:	8a b9       	out	0x0a, r24	; 10
	SDA_SET_OUTPUT();
    464a:	8a b1       	in	r24, 0x0a	; 10
    464c:	82 60       	ori	r24, 0x02	; 2
    464e:	8a b9       	out	0x0a, r24	; 10
}

// Unsticks an I2C bus
void I2CUnstick(void)
{
	uint8_t u8UnstickBits = 64;
    4650:	c0 e4       	ldi	r28, 0x40	; 64

	SCL_SET_OUTPUT();
	SDA_SET_OUTPUT();
	
	while (u8UnstickBits)
    4652:	11 c0       	rjmp	.+34     	; 0x4676 <I2CUnstick+0x34>
	{
		SCL_LOW();
    4654:	8b b1       	in	r24, 0x0b	; 11
    4656:	8e 7f       	andi	r24, 0xFE	; 254
    4658:	8b b9       	out	0x0b, r24	; 11
		SDA_LOW();
    465a:	8b b1       	in	r24, 0x0b	; 11
    465c:	8d 7f       	andi	r24, 0xFD	; 253
    465e:	8b b9       	out	0x0b, r24	; 11
		I2CBitDelay();
    4660:	0e 94 f3 27 	call	0x4fe6	; 0x4fe6 <I2CBitDelay>
		SCL_HIGH();
    4664:	8b b1       	in	r24, 0x0b	; 11
    4666:	81 60       	ori	r24, 0x01	; 1
    4668:	8b b9       	out	0x0b, r24	; 11
		SDA_HIGH();
    466a:	8b b1       	in	r24, 0x0b	; 11
    466c:	82 60       	ori	r24, 0x02	; 2
    466e:	8b b9       	out	0x0b, r24	; 11
		I2CBitDelay();
    4670:	0e 94 f3 27 	call	0x4fe6	; 0x4fe6 <I2CBitDelay>
		u8UnstickBits--;
    4674:	c1 50       	subi	r28, 0x01	; 1
	uint8_t u8UnstickBits = 64;

	SCL_SET_OUTPUT();
	SDA_SET_OUTPUT();
	
	while (u8UnstickBits)
    4676:	c1 11       	cpse	r28, r1
    4678:	ed cf       	rjmp	.-38     	; 0x4654 <I2CUnstick+0x12>
		SCL_HIGH();
		SDA_HIGH();
		I2CBitDelay();
		u8UnstickBits--;
	}
}
    467a:	cf 91       	pop	r28
    467c:	08 95       	ret

Disassembly of section .text.I2CTxByte:

00003ede <I2CTxByte>:

// Sends a single I2C byte. Returns false if the byte is not acked, or true if it is.
bool I2CTxByte(uint8_t u8Byte)
{
    3ede:	cf 93       	push	r28
    3ee0:	df 93       	push	r29
    3ee2:	d8 2f       	mov	r29, r24
	uint8_t u8Length = 8;			// 8 Bits to send
	bool bAck = false;

	SDA_SET_OUTPUT();
    3ee4:	8a b1       	in	r24, 0x0a	; 10
    3ee6:	82 60       	ori	r24, 0x02	; 2
    3ee8:	8a b9       	out	0x0a, r24	; 10
}

// Sends a single I2C byte. Returns false if the byte is not acked, or true if it is.
bool I2CTxByte(uint8_t u8Byte)
{
	uint8_t u8Length = 8;			// 8 Bits to send
    3eea:	c8 e0       	ldi	r28, 0x08	; 8
	bool bAck = false;

	SDA_SET_OUTPUT();

	while (u8Length)
    3eec:	15 c0       	rjmp	.+42     	; 0x3f18 <I2CTxByte+0x3a>
	{
		if (u8Byte & 0x80)
    3eee:	dd 23       	and	r29, r29
    3ef0:	24 f4       	brge	.+8      	; 0x3efa <I2CTxByte+0x1c>
		{
			SDA_HIGH();
    3ef2:	8b b1       	in	r24, 0x0b	; 11
    3ef4:	82 60       	ori	r24, 0x02	; 2
    3ef6:	8b b9       	out	0x0b, r24	; 11
    3ef8:	03 c0       	rjmp	.+6      	; 0x3f00 <I2CTxByte+0x22>
		}
		else
		{
			SDA_LOW();
    3efa:	8b b1       	in	r24, 0x0b	; 11
    3efc:	8d 7f       	andi	r24, 0xFD	; 253
    3efe:	8b b9       	out	0x0b, r24	; 11
		}
		
		// Drive SCL high
		SCL_HIGH();
    3f00:	8b b1       	in	r24, 0x0b	; 11
    3f02:	81 60       	ori	r24, 0x01	; 1
    3f04:	8b b9       	out	0x0b, r24	; 11
		
		I2CBitDelay();
    3f06:	0e 94 f3 27 	call	0x4fe6	; 0x4fe6 <I2CBitDelay>
		
		// Ensure SCL is low
		SCL_LOW();
    3f0a:	8b b1       	in	r24, 0x0b	; 11
    3f0c:	8e 7f       	andi	r24, 0xFE	; 254
    3f0e:	8b b9       	out	0x0b, r24	; 11
	
		// SDA Is now set. Delay.
		I2CBitDelay();
    3f10:	0e 94 f3 27 	call	0x4fe6	; 0x4fe6 <I2CBitDelay>
		
		// Next bit
		u8Byte <<= 1;	
    3f14:	dd 0f       	add	r29, r29
		u8Length--;
    3f16:	c1 50       	subi	r28, 0x01	; 1
	uint8_t u8Length = 8;			// 8 Bits to send
	bool bAck = false;

	SDA_SET_OUTPUT();

	while (u8Length)
    3f18:	c1 11       	cpse	r28, r1
    3f1a:	e9 cf       	rjmp	.-46     	; 0x3eee <I2CTxByte+0x10>
		// Next bit
		u8Byte <<= 1;	
		u8Length--;
	}
	
	SDA_SET_INPUT();
    3f1c:	8a b1       	in	r24, 0x0a	; 10
    3f1e:	8d 7f       	andi	r24, 0xFD	; 253
    3f20:	8a b9       	out	0x0a, r24	; 10
    3f22:	8b b1       	in	r24, 0x0b	; 11
    3f24:	82 60       	ori	r24, 0x02	; 2
    3f26:	8b b9       	out	0x0b, r24	; 11
	SCL_HIGH();
    3f28:	8b b1       	in	r24, 0x0b	; 11
    3f2a:	81 60       	ori	r24, 0x01	; 1
    3f2c:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    3f2e:	0e 94 f3 27 	call	0x4fe6	; 0x4fe6 <I2CBitDelay>
	
	// See if the byte was acknowledged
	if (SDA_READ())
    3f32:	49 9b       	sbis	0x09, 1	; 9
	{
		bAck = false;
	}
	else
	{
		bAck = true;
    3f34:	c1 e0       	ldi	r28, 0x01	; 1
	}
	
	SCL_LOW();
    3f36:	8b b1       	in	r24, 0x0b	; 11
    3f38:	8e 7f       	andi	r24, 0xFE	; 254
    3f3a:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    3f3c:	0e 94 f3 27 	call	0x4fe6	; 0x4fe6 <I2CBitDelay>
	return(bAck);
}
    3f40:	8c 2f       	mov	r24, r28
    3f42:	df 91       	pop	r29
    3f44:	cf 91       	pop	r28
    3f46:	08 95       	ret

Disassembly of section .text.I2CRxByte:

00003d7e <I2CRxByte>:

// Receives a single I2C byte and will optionally generate an ack at the end
uint8_t I2CRxByte(bool bAck)
{
    3d7e:	1f 93       	push	r17
    3d80:	cf 93       	push	r28
    3d82:	df 93       	push	r29
    3d84:	18 2f       	mov	r17, r24
	uint8_t u8Data = 0;
	uint8_t u8Count = 8;
	
	SDA_SET_INPUT();
    3d86:	8a b1       	in	r24, 0x0a	; 10
    3d88:	8d 7f       	andi	r24, 0xFD	; 253
    3d8a:	8a b9       	out	0x0a, r24	; 10
    3d8c:	8b b1       	in	r24, 0x0b	; 11
    3d8e:	82 60       	ori	r24, 0x02	; 2
    3d90:	8b b9       	out	0x0b, r24	; 11

// Receives a single I2C byte and will optionally generate an ack at the end
uint8_t I2CRxByte(bool bAck)
{
	uint8_t u8Data = 0;
	uint8_t u8Count = 8;
    3d92:	c8 e0       	ldi	r28, 0x08	; 8
}

// Receives a single I2C byte and will optionally generate an ack at the end
uint8_t I2CRxByte(bool bAck)
{
	uint8_t u8Data = 0;
    3d94:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t u8Count = 8;
	
	SDA_SET_INPUT();
	
	// Consume all 8 data bits
	while (u8Count)
    3d96:	0e c0       	rjmp	.+28     	; 0x3db4 <I2CRxByte+0x36>
	{
		u8Data <<= 1;
    3d98:	dd 0f       	add	r29, r29

		SCL_HIGH();
    3d9a:	8b b1       	in	r24, 0x0b	; 11
    3d9c:	81 60       	ori	r24, 0x01	; 1
    3d9e:	8b b9       	out	0x0b, r24	; 11
		I2CBitDelay();
    3da0:	0e 94 f3 27 	call	0x4fe6	; 0x4fe6 <I2CBitDelay>
			
		if (SDA_READ())
    3da4:	49 99       	sbic	0x09, 1	; 9
		{
			u8Data |= 1;
    3da6:	d1 60       	ori	r29, 0x01	; 1
		}
		
		SCL_LOW();
    3da8:	8b b1       	in	r24, 0x0b	; 11
    3daa:	8e 7f       	andi	r24, 0xFE	; 254
    3dac:	8b b9       	out	0x0b, r24	; 11
		I2CBitDelay();
    3dae:	0e 94 f3 27 	call	0x4fe6	; 0x4fe6 <I2CBitDelay>
		u8Count--;
    3db2:	c1 50       	subi	r28, 0x01	; 1
	uint8_t u8Count = 8;
	
	SDA_SET_INPUT();
	
	// Consume all 8 data bits
	while (u8Count)
    3db4:	c1 11       	cpse	r28, r1
    3db6:	f0 cf       	rjmp	.-32     	; 0x3d98 <I2CRxByte+0x1a>
		I2CBitDelay();
		u8Count--;
	}

	// See if we acknowledge this
	SDA_SET_OUTPUT();
    3db8:	8a b1       	in	r24, 0x0a	; 10
    3dba:	82 60       	ori	r24, 0x02	; 2
    3dbc:	8a b9       	out	0x0a, r24	; 10
	if (bAck)
    3dbe:	11 23       	and	r17, r17
    3dc0:	21 f0       	breq	.+8      	; 0x3dca <I2CRxByte+0x4c>
	{
		SDA_LOW();
    3dc2:	8b b1       	in	r24, 0x0b	; 11
    3dc4:	8d 7f       	andi	r24, 0xFD	; 253
    3dc6:	8b b9       	out	0x0b, r24	; 11
    3dc8:	03 c0       	rjmp	.+6      	; 0x3dd0 <I2CRxByte+0x52>
	}
	else
	{
		SDA_HIGH();
    3dca:	8b b1       	in	r24, 0x0b	; 11
    3dcc:	82 60       	ori	r24, 0x02	; 2
    3dce:	8b b9       	out	0x0b, r24	; 11
	}
	
	I2CBitDelay();
    3dd0:	0e 94 f3 27 	call	0x4fe6	; 0x4fe6 <I2CBitDelay>
	SCL_HIGH();
    3dd4:	8b b1       	in	r24, 0x0b	; 11
    3dd6:	81 60       	ori	r24, 0x01	; 1
    3dd8:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    3dda:	0e 94 f3 27 	call	0x4fe6	; 0x4fe6 <I2CBitDelay>
	SCL_LOW();
    3dde:	8b b1       	in	r24, 0x0b	; 11
    3de0:	8e 7f       	andi	r24, 0xFE	; 254
    3de2:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    3de4:	0e 94 f3 27 	call	0x4fe6	; 0x4fe6 <I2CBitDelay>
	SDA_LOW();
    3de8:	8b b1       	in	r24, 0x0b	; 11
    3dea:	8d 7f       	andi	r24, 0xFD	; 253
    3dec:	8b b9       	out	0x0b, r24	; 11

	return(u8Data);	
}
    3dee:	8d 2f       	mov	r24, r29
    3df0:	df 91       	pop	r29
    3df2:	cf 91       	pop	r28
    3df4:	1f 91       	pop	r17
    3df6:	08 95       	ret

Disassembly of section .text.I2CSetup:

00004952 <I2CSetup>:
// Prepares the SCL/SDA pins for I2C operation and returns when the CPU is
// quantized to the timer (for consistent bit alignment)
void I2CSetup(void)
{
	// Deassert SCL and SDA
	SCL_HIGH();
    4952:	8b b1       	in	r24, 0x0b	; 11
    4954:	81 60       	ori	r24, 0x01	; 1
    4956:	8b b9       	out	0x0b, r24	; 11
	SDA_HIGH();
    4958:	8b b1       	in	r24, 0x0b	; 11
    495a:	82 60       	ori	r24, 0x02	; 2
    495c:	8b b9       	out	0x0b, r24	; 11

	// Set SCL and SDA lines as push/pull output drives
	SCL_SET_OUTPUT();
    495e:	8a b1       	in	r24, 0x0a	; 10
    4960:	81 60       	ori	r24, 0x01	; 1
    4962:	8a b9       	out	0x0a, r24	; 10
	
	// Turn on SDA, set as an input
	SDA_SET_INPUT();
    4964:	8a b1       	in	r24, 0x0a	; 10
    4966:	8d 7f       	andi	r24, 0xFD	; 253
    4968:	8a b9       	out	0x0a, r24	; 10
    496a:	8b b1       	in	r24, 0x0b	; 11
    496c:	82 60       	ori	r24, 0x02	; 2
    496e:	8b b9       	out	0x0b, r24	; 11
	
	Delay(20);
    4970:	64 e1       	ldi	r22, 0x14	; 20
    4972:	70 e0       	ldi	r23, 0x00	; 0
    4974:	80 e0       	ldi	r24, 0x00	; 0
    4976:	90 e0       	ldi	r25, 0x00	; 0
    4978:	0e 94 f7 21 	call	0x43ee	; 0x43ee <Delay>
    497c:	08 95       	ret

Disassembly of section .text.I2CStartTransaction:

00004a2c <I2CStartTransaction>:

// Sets up the I2C pins, sends slave address/read/write byte, and waits for acknowledgment.
// Returns false if no device is responding.
bool I2CStartTransaction(uint8_t u8SlaveAddress,
						 bool bRead)
{
    4a2c:	cf 93       	push	r28
    4a2e:	df 93       	push	r29
    4a30:	c8 2f       	mov	r28, r24
    4a32:	d6 2f       	mov	r29, r22
	// Set up the pins for I2C operation
	I2CSetup();
    4a34:	0e 94 a9 24 	call	0x4952	; 0x4952 <I2CSetup>
	
	// I2C Start condition
	I2CStart();
    4a38:	0e 94 93 24 	call	0x4926	; 0x4926 <I2CStart>

	// If it's a read operation, clear the lower bit
	if (bRead)
    4a3c:	dd 23       	and	r29, r29
    4a3e:	19 f0       	breq	.+6      	; 0x4a46 <I2CStartTransaction+0x1a>
	{
		u8SlaveAddress |= 1;
    4a40:	8c 2f       	mov	r24, r28
    4a42:	81 60       	ori	r24, 0x01	; 1
    4a44:	02 c0       	rjmp	.+4      	; 0x4a4a <I2CStartTransaction+0x1e>
	}
	else
	{
		// Otherwise set it
		u8SlaveAddress &= (uint8_t) (~1);
    4a46:	8c 2f       	mov	r24, r28
    4a48:	8e 7f       	andi	r24, 0xFE	; 254
	}
	
	// Now send out the slave address + the read/write bit
	return(I2CTxByte(u8SlaveAddress));
    4a4a:	0e 94 6f 1f 	call	0x3ede	; 0x3ede <I2CTxByte>
}
    4a4e:	df 91       	pop	r29
    4a50:	cf 91       	pop	r28
    4a52:	08 95       	ret

Disassembly of section .text.CellCountExpectedSet:

0000319c <CellCountExpectedSet>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    319c:	cf 92       	push	r12
    319e:	df 92       	push	r13
    31a0:	ef 92       	push	r14
    31a2:	ff 92       	push	r15
    31a4:	8f 35       	cpi	r24, 0x5F	; 95
    31a6:	08 f0       	brcs	.+2      	; 0x31aa <CellCountExpectedSet+0xe>
    31a8:	8e e5       	ldi	r24, 0x5E	; 94
    31aa:	ec e0       	ldi	r30, 0x0C	; 12
    31ac:	f1 e0       	ldi	r31, 0x01	; 1
    31ae:	85 8b       	std	Z+21, r24	; 0x15
    31b0:	c8 2e       	mov	r12, r24
    31b2:	d1 2c       	mov	r13, r1
    31b4:	e1 2c       	mov	r14, r1
    31b6:	f1 2c       	mov	r15, r1
    31b8:	aa ec       	ldi	r26, 0xCA	; 202
    31ba:	b8 e0       	ldi	r27, 0x08	; 8
    31bc:	a7 01       	movw	r20, r14
    31be:	96 01       	movw	r18, r12
    31c0:	0e 94 75 27 	call	0x4eea	; 0x4eea <__muluhisi3>
    31c4:	65 8f       	std	Z+29, r22	; 0x1d
    31c6:	76 8f       	std	Z+30, r23	; 0x1e
    31c8:	87 8f       	std	Z+31, r24	; 0x1f
    31ca:	90 a3       	std	Z+32, r25	; 0x20
    31cc:	a4 e9       	ldi	r26, 0x94	; 148
    31ce:	b1 e1       	ldi	r27, 0x11	; 17
    31d0:	0e 94 75 27 	call	0x4eea	; 0x4eea <__muluhisi3>
    31d4:	61 a3       	std	Z+33, r22	; 0x21
    31d6:	72 a3       	std	Z+34, r23	; 0x22
    31d8:	83 a3       	std	Z+35, r24	; 0x23
    31da:	94 a3       	std	Z+36, r25	; 0x24
    31dc:	81 a1       	ldd	r24, Z+33	; 0x21
    31de:	92 a1       	ldd	r25, Z+34	; 0x22
    31e0:	a3 a1       	ldd	r26, Z+35	; 0x23
    31e2:	b4 a1       	ldd	r27, Z+36	; 0x24
    31e4:	45 8d       	ldd	r20, Z+29	; 0x1d
    31e6:	56 8d       	ldd	r21, Z+30	; 0x1e
    31e8:	67 8d       	ldd	r22, Z+31	; 0x1f
    31ea:	70 a1       	ldd	r23, Z+32	; 0x20
    31ec:	84 1b       	sub	r24, r20
    31ee:	95 0b       	sbc	r25, r21
    31f0:	a6 0b       	sbc	r26, r22
    31f2:	b7 0b       	sbc	r27, r23
    31f4:	88 0f       	add	r24, r24
    31f6:	99 1f       	adc	r25, r25
    31f8:	aa 1f       	adc	r26, r26
    31fa:	bb 1f       	adc	r27, r27
    31fc:	88 0f       	add	r24, r24
    31fe:	99 1f       	adc	r25, r25
    3200:	aa 1f       	adc	r26, r26
    3202:	bb 1f       	adc	r27, r27
    3204:	88 0f       	add	r24, r24
    3206:	99 1f       	adc	r25, r25
    3208:	aa 1f       	adc	r26, r26
    320a:	bb 1f       	adc	r27, r27
    320c:	88 0f       	add	r24, r24
    320e:	99 1f       	adc	r25, r25
    3210:	aa 1f       	adc	r26, r26
    3212:	bb 1f       	adc	r27, r27
    3214:	88 0f       	add	r24, r24
    3216:	99 1f       	adc	r25, r25
    3218:	aa 1f       	adc	r26, r26
    321a:	bb 1f       	adc	r27, r27
    321c:	88 0f       	add	r24, r24
    321e:	99 1f       	adc	r25, r25
    3220:	aa 1f       	adc	r26, r26
    3222:	bb 1f       	adc	r27, r27
    3224:	88 0f       	add	r24, r24
    3226:	99 1f       	adc	r25, r25
    3228:	aa 1f       	adc	r26, r26
    322a:	bb 1f       	adc	r27, r27
    322c:	ac 01       	movw	r20, r24
    322e:	bd 01       	movw	r22, r26
    3230:	bb 23       	and	r27, r27
    3232:	24 f4       	brge	.+8      	; 0x323c <CellCountExpectedSet+0xa0>
    3234:	41 50       	subi	r20, 0x01	; 1
    3236:	5c 4f       	sbci	r21, 0xFC	; 252
    3238:	6f 4f       	sbci	r22, 0xFF	; 255
    323a:	7f 4f       	sbci	r23, 0xFF	; 255
    323c:	03 2e       	mov	r0, r19
    323e:	3a e0       	ldi	r19, 0x0A	; 10
    3240:	75 95       	asr	r23
    3242:	67 95       	ror	r22
    3244:	57 95       	ror	r21
    3246:	47 95       	ror	r20
    3248:	3a 95       	dec	r19
    324a:	d1 f7       	brne	.-12     	; 0x3240 <CellCountExpectedSet+0xa4>
    324c:	30 2d       	mov	r19, r0
    324e:	50 93 32 01 	sts	0x0132, r21	; 0x800132 <sg_sFrame+0x26>
    3252:	40 93 31 01 	sts	0x0131, r20	; 0x800131 <sg_sFrame+0x25>
    3256:	ff 90       	pop	r15
    3258:	ef 90       	pop	r14
    325a:	df 90       	pop	r13
    325c:	cf 90       	pop	r12
    325e:	08 95       	ret

Disassembly of section .text.SendModuleControllerStatus:

00004f98 <SendModuleControllerStatus>:

static uint8_t sg_u8ControllerStatusMsgCount = 0;

static void SendModuleControllerStatus(void)
{
	sg_bSendModuleControllerStatus = true;
    4f98:	81 e0       	ldi	r24, 0x01	; 1
    4f9a:	80 93 16 05 	sts	0x0516, r24	; 0x800516 <sg_bSendModuleControllerStatus>
	sg_u8ControllerStatusMsgCount = 0;
    4f9e:	10 92 73 0b 	sts	0x0B73, r1	; 0x800b73 <sg_u8ControllerStatusMsgCount>
	sg_bIgnoreStatusRequests = true;  // Start ignoring new requests
    4fa2:	80 93 7b 0b 	sts	0x0B7B, r24	; 0x800b7b <sg_bIgnoreStatusRequests>
    4fa6:	08 95       	ret

Disassembly of section .text.ModuleControllerStateSet:

00005032 <ModuleControllerStateSet>:
	MBASSERT(0);
}

static void ModuleControllerStateSet( EModuleControllerState eNext )
{
	if(eNext < EMODSTATE_COUNT)
    5032:	84 30       	cpi	r24, 0x04	; 4
    5034:	10 f4       	brcc	.+4      	; 0x503a <ModuleControllerStateSet+0x8>
	{
		sg_eModuleControllerStateTarget = eNext;
    5036:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <sg_eModuleControllerStateTarget>
    503a:	08 95       	ret

Disassembly of section .text.ModuleControllerStateSetMax:

00004ebe <ModuleControllerStateSetMax>:



static void ModuleControllerStateSetMax( EModuleControllerState eNext )
{
	if(eNext < EMODSTATE_COUNT)
    4ebe:	84 30       	cpi	r24, 0x04	; 4
    4ec0:	40 f4       	brcc	.+16     	; 0x4ed2 <ModuleControllerStateSetMax+0x14>
	{
		sg_eModuleControllerStateMax = eNext;
    4ec2:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <sg_eModuleControllerStateMax>
		if (sg_eModuleControllerStateCurrent > eNext) // we are in a higher state than allowed
    4ec6:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    4eca:	89 17       	cp	r24, r25
    4ecc:	10 f4       	brcc	.+4      	; 0x4ed2 <ModuleControllerStateSetMax+0x14>
		{
			sg_eModuleControllerStateTarget = eNext;
    4ece:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <sg_eModuleControllerStateTarget>
    4ed2:	08 95       	ret

Disassembly of section .text.Check5VLoss:

00004e76 <Check5VLoss>:
}

// Checks for 5V loss
static void Check5VLoss(uint8_t u8NewState)
{
	if( u8NewState & (1 << PIN_5V_DET) )
    4e76:	86 fd       	sbrc	r24, 6
    4e78:	09 c0       	rjmp	.+18     	; 0x4e8c <Check5VLoss+0x16>
		// Not asserted
	}
	else
	{
		// 5V detect is low
		FET_EN_DEASSERT();
    4e7a:	88 b1       	in	r24, 0x08	; 8
    4e7c:	8f 7e       	andi	r24, 0xEF	; 239
    4e7e:	88 b9       	out	0x08, r24	; 8
		RELAY_EN_DEASSERT();
    4e80:	8e b1       	in	r24, 0x0e	; 14
    4e82:	8d 7f       	andi	r24, 0xFD	; 253
    4e84:	8e b9       	out	0x0e, r24	; 14
		ModuleControllerStateSet( EMODSTATE_OFF );
    4e86:	80 e0       	ldi	r24, 0x00	; 0
    4e88:	0e 94 19 28 	call	0x5032	; 0x5032 <ModuleControllerStateSet>
    4e8c:	08 95       	ret

Disassembly of section .text.CellDataConvertVoltage:

000040da <CellDataConvertVoltage>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    40da:	fb 01       	movw	r30, r22
    40dc:	dc 01       	movw	r26, r24
    40de:	b3 70       	andi	r27, 0x03	; 3
    40e0:	2b ed       	ldi	r18, 0xDB	; 219
    40e2:	36 ea       	ldi	r19, 0xA6	; 166
    40e4:	43 e2       	ldi	r20, 0x23	; 35
    40e6:	50 e0       	ldi	r21, 0x00	; 0
    40e8:	0e 94 75 27 	call	0x4eea	; 0x4eea <__muluhisi3>
    40ec:	dc 01       	movw	r26, r24
    40ee:	cb 01       	movw	r24, r22
    40f0:	07 2e       	mov	r0, r23
    40f2:	7a e0       	ldi	r23, 0x0A	; 10
    40f4:	b6 95       	lsr	r27
    40f6:	a7 95       	ror	r26
    40f8:	97 95       	ror	r25
    40fa:	87 95       	ror	r24
    40fc:	7a 95       	dec	r23
    40fe:	d1 f7       	brne	.-12     	; 0x40f4 <CellDataConvertVoltage+0x1a>
    4100:	70 2d       	mov	r23, r0
    4102:	9f 5f       	subi	r25, 0xFF	; 255
    4104:	af 4f       	sbci	r26, 0xFF	; 255
    4106:	bf 4f       	sbci	r27, 0xFF	; 255
    4108:	07 2e       	mov	r0, r23
    410a:	79 e0       	ldi	r23, 0x09	; 9
    410c:	b6 95       	lsr	r27
    410e:	a7 95       	ror	r26
    4110:	97 95       	ror	r25
    4112:	87 95       	ror	r24
    4114:	7a 95       	dec	r23
    4116:	d1 f7       	brne	.-12     	; 0x410c <CellDataConvertVoltage+0x32>
    4118:	70 2d       	mov	r23, r0
    411a:	9c 01       	movw	r18, r24
    411c:	01 97       	sbiw	r24, 0x01	; 1
    411e:	8e 3f       	cpi	r24, 0xFE	; 254
    4120:	9f 4f       	sbci	r25, 0xFF	; 255
    4122:	10 f4       	brcc	.+4      	; 0x4128 <CellDataConvertVoltage+0x4e>
    4124:	81 e0       	ldi	r24, 0x01	; 1
    4126:	03 c0       	rjmp	.+6      	; 0x412e <CellDataConvertVoltage+0x54>
    4128:	80 e0       	ldi	r24, 0x00	; 0
    412a:	20 e0       	ldi	r18, 0x00	; 0
    412c:	30 e0       	ldi	r19, 0x00	; 0
    412e:	30 97       	sbiw	r30, 0x00	; 0
    4130:	11 f0       	breq	.+4      	; 0x4136 <CellDataConvertVoltage+0x5c>
    4132:	31 83       	std	Z+1, r19	; 0x01
    4134:	20 83       	st	Z, r18
    4136:	08 95       	ret

Disassembly of section .text.CellDataConvertTemperature:

00003fb2 <CellDataConvertTemperature>:
    3fb2:	8f 3f       	cpi	r24, 0xFF	; 255
    3fb4:	2f ef       	ldi	r18, 0xFF	; 255
    3fb6:	92 07       	cpc	r25, r18
    3fb8:	29 f1       	breq	.+74     	; 0x4004 <CellDataConvertTemperature+0x52>
    3fba:	28 2f       	mov	r18, r24
    3fbc:	2f 70       	andi	r18, 0x0F	; 15
    3fbe:	94 ff       	sbrs	r25, 4
    3fc0:	02 c0       	rjmp	.+4      	; 0x3fc6 <CellDataConvertTemperature+0x14>
    3fc2:	90 6f       	ori	r25, 0xF0	; 240
    3fc4:	01 c0       	rjmp	.+2      	; 0x3fc8 <CellDataConvertTemperature+0x16>
    3fc6:	9f 77       	andi	r25, 0x7F	; 127
    3fc8:	ac 01       	movw	r20, r24
    3fca:	55 95       	asr	r21
    3fcc:	47 95       	ror	r20
    3fce:	55 95       	asr	r21
    3fd0:	47 95       	ror	r20
    3fd2:	55 95       	asr	r21
    3fd4:	47 95       	ror	r20
    3fd6:	55 95       	asr	r21
    3fd8:	47 95       	ror	r20
    3fda:	34 e6       	ldi	r19, 0x64	; 100
    3fdc:	34 9f       	mul	r19, r20
    3fde:	c0 01       	movw	r24, r0
    3fe0:	35 9f       	mul	r19, r21
    3fe2:	90 0d       	add	r25, r0
    3fe4:	11 24       	eor	r1, r1
    3fe6:	30 e0       	ldi	r19, 0x00	; 0
    3fe8:	40 e0       	ldi	r20, 0x00	; 0
    3fea:	26 5f       	subi	r18, 0xF6	; 246
    3fec:	3c 4f       	sbci	r19, 0xFC	; 252
    3fee:	4f 4f       	sbci	r20, 0xFF	; 255
    3ff0:	f9 01       	movw	r30, r18
    3ff2:	24 91       	lpm	r18, Z
    3ff4:	47 fd       	sbrc	r20, 7
    3ff6:	20 81       	ld	r18, Z
    3ff8:	82 0f       	add	r24, r18
    3ffa:	91 1d       	adc	r25, r1
    3ffc:	81 56       	subi	r24, 0x61	; 97
    3ffe:	9a 4e       	sbci	r25, 0xEA	; 234
    4000:	21 e0       	ldi	r18, 0x01	; 1
    4002:	01 c0       	rjmp	.+2      	; 0x4006 <CellDataConvertTemperature+0x54>
    4004:	20 e0       	ldi	r18, 0x00	; 0
    4006:	61 15       	cp	r22, r1
    4008:	71 05       	cpc	r23, r1
    400a:	19 f0       	breq	.+6      	; 0x4012 <CellDataConvertTemperature+0x60>
    400c:	fb 01       	movw	r30, r22
    400e:	91 83       	std	Z+1, r25	; 0x01
    4010:	80 83       	st	Z, r24
    4012:	82 2f       	mov	r24, r18
    4014:	08 95       	ret

Disassembly of section .text.ModuleCurrentConvertReadings:

000027e0 <ModuleCurrentConvertReadings>:
    27e0:	a0 91 56 01 	lds	r26, 0x0156	; 0x800156 <sg_sFrame+0x4a>
    27e4:	b0 91 57 01 	lds	r27, 0x0157	; 0x800157 <sg_sFrame+0x4b>
    27e8:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <sg_sFrame+0x4d>
    27ec:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <sg_sFrame+0x4e>
    27f0:	e0 91 7e 0b 	lds	r30, 0x0B7E	; 0x800b7e <sg_u8CurrentBufferIndex>
    27f4:	ef 3f       	cpi	r30, 0xFF	; 255
    27f6:	81 f4       	brne	.+32     	; 0x2818 <ModuleCurrentConvertReadings+0x38>
    27f8:	07 c0       	rjmp	.+14     	; 0x2808 <ModuleCurrentConvertReadings+0x28>
    27fa:	f0 e0       	ldi	r31, 0x00	; 0
    27fc:	ee 0f       	add	r30, r30
    27fe:	ff 1f       	adc	r31, r31
    2800:	eb 5e       	subi	r30, 0xEB	; 235
    2802:	f4 4f       	sbci	r31, 0xF4	; 244
    2804:	91 83       	std	Z+1, r25	; 0x01
    2806:	80 83       	st	Z, r24
    2808:	e0 91 7e 0b 	lds	r30, 0x0B7E	; 0x800b7e <sg_u8CurrentBufferIndex>
    280c:	ef 5f       	subi	r30, 0xFF	; 255
    280e:	e0 93 7e 0b 	sts	0x0B7E, r30	; 0x800b7e <sg_u8CurrentBufferIndex>
    2812:	e8 30       	cpi	r30, 0x08	; 8
    2814:	90 f3       	brcs	.-28     	; 0x27fa <ModuleCurrentConvertReadings+0x1a>
    2816:	0f c0       	rjmp	.+30     	; 0x2836 <ModuleCurrentConvertReadings+0x56>
    2818:	21 e0       	ldi	r18, 0x01	; 1
    281a:	2e 0f       	add	r18, r30
    281c:	20 93 7e 0b 	sts	0x0B7E, r18	; 0x800b7e <sg_u8CurrentBufferIndex>
    2820:	f0 e0       	ldi	r31, 0x00	; 0
    2822:	ee 0f       	add	r30, r30
    2824:	ff 1f       	adc	r31, r31
    2826:	eb 5e       	subi	r30, 0xEB	; 235
    2828:	f4 4f       	sbci	r31, 0xF4	; 244
    282a:	91 83       	std	Z+1, r25	; 0x01
    282c:	80 83       	st	Z, r24
    282e:	28 30       	cpi	r18, 0x08	; 8
    2830:	10 f0       	brcs	.+4      	; 0x2836 <ModuleCurrentConvertReadings+0x56>
    2832:	10 92 7e 0b 	sts	0x0B7E, r1	; 0x800b7e <sg_u8CurrentBufferIndex>
    2836:	80 e0       	ldi	r24, 0x00	; 0
    2838:	20 e0       	ldi	r18, 0x00	; 0
    283a:	30 e0       	ldi	r19, 0x00	; 0
    283c:	0b c0       	rjmp	.+22     	; 0x2854 <ModuleCurrentConvertReadings+0x74>
    283e:	e8 2f       	mov	r30, r24
    2840:	f0 e0       	ldi	r31, 0x00	; 0
    2842:	ee 0f       	add	r30, r30
    2844:	ff 1f       	adc	r31, r31
    2846:	eb 5e       	subi	r30, 0xEB	; 235
    2848:	f4 4f       	sbci	r31, 0xF4	; 244
    284a:	40 81       	ld	r20, Z
    284c:	51 81       	ldd	r21, Z+1	; 0x01
    284e:	24 0f       	add	r18, r20
    2850:	35 1f       	adc	r19, r21
    2852:	8f 5f       	subi	r24, 0xFF	; 255
    2854:	88 30       	cpi	r24, 0x08	; 8
    2856:	98 f3       	brcs	.-26     	; 0x283e <ModuleCurrentConvertReadings+0x5e>
    2858:	c9 01       	movw	r24, r18
    285a:	99 23       	and	r25, r25
    285c:	0c f4       	brge	.+2      	; 0x2860 <ModuleCurrentConvertReadings+0x80>
    285e:	07 96       	adiw	r24, 0x07	; 7
    2860:	95 95       	asr	r25
    2862:	87 95       	ror	r24
    2864:	95 95       	asr	r25
    2866:	87 95       	ror	r24
    2868:	95 95       	asr	r25
    286a:	87 95       	ror	r24
    286c:	a8 1b       	sub	r26, r24
    286e:	b9 0b       	sbc	r27, r25
    2870:	20 e8       	ldi	r18, 0x80	; 128
    2872:	3c e0       	ldi	r19, 0x0C	; 12
    2874:	0e 94 01 28 	call	0x5002	; 0x5002 <__usmulhisi3>
    2878:	ab 01       	movw	r20, r22
    287a:	bc 01       	movw	r22, r24
    287c:	5f 5f       	subi	r21, 0xFF	; 255
    287e:	6f 4f       	sbci	r22, 0xFF	; 255
    2880:	7f 4f       	sbci	r23, 0xFF	; 255
    2882:	db 01       	movw	r26, r22
    2884:	ca 01       	movw	r24, r20
    2886:	77 23       	and	r23, r23
    2888:	24 f4       	brge	.+8      	; 0x2892 <ModuleCurrentConvertReadings+0xb2>
    288a:	81 50       	subi	r24, 0x01	; 1
    288c:	9e 4f       	sbci	r25, 0xFE	; 254
    288e:	af 4f       	sbci	r26, 0xFF	; 255
    2890:	bf 4f       	sbci	r27, 0xFF	; 255
    2892:	07 2e       	mov	r0, r23
    2894:	79 e0       	ldi	r23, 0x09	; 9
    2896:	b5 95       	asr	r27
    2898:	a7 95       	ror	r26
    289a:	97 95       	ror	r25
    289c:	87 95       	ror	r24
    289e:	7a 95       	dec	r23
    28a0:	d1 f7       	brne	.-12     	; 0x2896 <ModuleCurrentConvertReadings+0xb6>
    28a2:	70 2d       	mov	r23, r0
    28a4:	90 58       	subi	r25, 0x80	; 128
    28a6:	af 4f       	sbci	r26, 0xFF	; 255
    28a8:	bf 4f       	sbci	r27, 0xFF	; 255
    28aa:	ec e0       	ldi	r30, 0x0C	; 12
    28ac:	f1 e0       	ldi	r31, 0x01	; 1
    28ae:	91 ab       	std	Z+49, r25	; 0x31
    28b0:	80 ab       	std	Z+48, r24	; 0x30
    28b2:	20 a9       	ldd	r18, Z+48	; 0x30
    28b4:	31 a9       	ldd	r19, Z+49	; 0x31
    28b6:	86 89       	ldd	r24, Z+22	; 0x16
    28b8:	97 89       	ldd	r25, Z+23	; 0x17
    28ba:	82 17       	cp	r24, r18
    28bc:	93 07       	cpc	r25, r19
    28be:	20 f4       	brcc	.+8      	; 0x28c8 <ModuleCurrentConvertReadings+0xe8>
    28c0:	80 a9       	ldd	r24, Z+48	; 0x30
    28c2:	91 a9       	ldd	r25, Z+49	; 0x31
    28c4:	97 8b       	std	Z+23, r25	; 0x17
    28c6:	86 8b       	std	Z+22, r24	; 0x16
    28c8:	ec e0       	ldi	r30, 0x0C	; 12
    28ca:	f1 e0       	ldi	r31, 0x01	; 1
    28cc:	20 a9       	ldd	r18, Z+48	; 0x30
    28ce:	31 a9       	ldd	r19, Z+49	; 0x31
    28d0:	80 8d       	ldd	r24, Z+24	; 0x18
    28d2:	91 8d       	ldd	r25, Z+25	; 0x19
    28d4:	28 17       	cp	r18, r24
    28d6:	39 07       	cpc	r19, r25
    28d8:	20 f4       	brcc	.+8      	; 0x28e2 <ModuleCurrentConvertReadings+0x102>
    28da:	80 a9       	ldd	r24, Z+48	; 0x30
    28dc:	91 a9       	ldd	r25, Z+49	; 0x31
    28de:	91 8f       	std	Z+25, r25	; 0x19
    28e0:	80 8f       	std	Z+24, r24	; 0x18
    28e2:	08 95       	ret

Disassembly of section .text.__vector_1:

00004af2 <__vector_1>:

// NOTE: If you're getting unexpected AVR resets, uncomment these unused handlers to see
// if another interrupt is being taken that doesn't have a handler. AVR Defaults to jumping
// to 0 when not vector is programmed.
ISR(ANACOMP0_vect, ISR_BLOCK)
{
    4af2:	1f 92       	push	r1
    4af4:	0f 92       	push	r0
    4af6:	0f b6       	in	r0, 0x3f	; 63
    4af8:	0f 92       	push	r0
    4afa:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) ANACOMP0_vect;
    4afc:	89 e7       	ldi	r24, 0x79	; 121
    4afe:	95 e2       	ldi	r25, 0x25	; 37
    4b00:	80 93 71 0b 	sts	0x0B71, r24	; 0x800b71 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4b04:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4b08:	80 93 70 0b 	sts	0x0B70, r24	; 0x800b70 <sg_u8PCMSK0>
    4b0c:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4b10:	80 93 6f 0b 	sts	0x0B6F, r24	; 0x800b6f <sg_u8PCMSK1>
    4b14:	ff cf       	rjmp	.-2      	; 0x4b14 <__vector_1+0x22>

Disassembly of section .text.__vector_2:

00004b16 <__vector_2>:
	while (1);
}

ISR(ANACOMP1_vect, ISR_BLOCK)
{
    4b16:	1f 92       	push	r1
    4b18:	0f 92       	push	r0
    4b1a:	0f b6       	in	r0, 0x3f	; 63
    4b1c:	0f 92       	push	r0
    4b1e:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) ANACOMP1_vect;
    4b20:	8b e8       	ldi	r24, 0x8B	; 139
    4b22:	95 e2       	ldi	r25, 0x25	; 37
    4b24:	80 93 71 0b 	sts	0x0B71, r24	; 0x800b71 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4b28:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4b2c:	80 93 70 0b 	sts	0x0B70, r24	; 0x800b70 <sg_u8PCMSK0>
    4b30:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4b34:	80 93 6f 0b 	sts	0x0B6F, r24	; 0x800b6f <sg_u8PCMSK1>
    4b38:	ff cf       	rjmp	.-2      	; 0x4b38 <__vector_2+0x22>

Disassembly of section .text.__vector_3:

00004b3a <__vector_3>:
	while (1);
}

ISR(ANACOMP2_vect, ISR_BLOCK)
{
    4b3a:	1f 92       	push	r1
    4b3c:	0f 92       	push	r0
    4b3e:	0f b6       	in	r0, 0x3f	; 63
    4b40:	0f 92       	push	r0
    4b42:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) ANACOMP2_vect;
    4b44:	8d e9       	ldi	r24, 0x9D	; 157
    4b46:	95 e2       	ldi	r25, 0x25	; 37
    4b48:	80 93 71 0b 	sts	0x0B71, r24	; 0x800b71 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4b4c:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4b50:	80 93 70 0b 	sts	0x0B70, r24	; 0x800b70 <sg_u8PCMSK0>
    4b54:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4b58:	80 93 6f 0b 	sts	0x0B6F, r24	; 0x800b6f <sg_u8PCMSK1>
    4b5c:	ff cf       	rjmp	.-2      	; 0x4b5c <__vector_3+0x22>

Disassembly of section .text.__vector_4:

00004b5e <__vector_4>:
	while (1);
}

ISR(ANACOMP3_vect, ISR_BLOCK)
{
    4b5e:	1f 92       	push	r1
    4b60:	0f 92       	push	r0
    4b62:	0f b6       	in	r0, 0x3f	; 63
    4b64:	0f 92       	push	r0
    4b66:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) ANACOMP3_vect;
    4b68:	8f ea       	ldi	r24, 0xAF	; 175
    4b6a:	95 e2       	ldi	r25, 0x25	; 37
    4b6c:	80 93 71 0b 	sts	0x0B71, r24	; 0x800b71 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4b70:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4b74:	80 93 70 0b 	sts	0x0B70, r24	; 0x800b70 <sg_u8PCMSK0>
    4b78:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4b7c:	80 93 6f 0b 	sts	0x0B6F, r24	; 0x800b6f <sg_u8PCMSK1>
    4b80:	ff cf       	rjmp	.-2      	; 0x4b80 <__vector_4+0x22>

Disassembly of section .text.__vector_5:

00004b82 <__vector_5>:
	while (1);
}

ISR(PSC_FAULT_vect, ISR_BLOCK)
{
    4b82:	1f 92       	push	r1
    4b84:	0f 92       	push	r0
    4b86:	0f b6       	in	r0, 0x3f	; 63
    4b88:	0f 92       	push	r0
    4b8a:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) PSC_FAULT_vect;
    4b8c:	81 ec       	ldi	r24, 0xC1	; 193
    4b8e:	95 e2       	ldi	r25, 0x25	; 37
    4b90:	80 93 71 0b 	sts	0x0B71, r24	; 0x800b71 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4b94:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4b98:	80 93 70 0b 	sts	0x0B70, r24	; 0x800b70 <sg_u8PCMSK0>
    4b9c:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4ba0:	80 93 6f 0b 	sts	0x0B6F, r24	; 0x800b6f <sg_u8PCMSK1>
    4ba4:	ff cf       	rjmp	.-2      	; 0x4ba4 <__vector_5+0x22>

Disassembly of section .text.__vector_6:

00004ba6 <__vector_6>:
	while (1);
}

ISR(PSC_EC_vect, ISR_BLOCK)
{
    4ba6:	1f 92       	push	r1
    4ba8:	0f 92       	push	r0
    4baa:	0f b6       	in	r0, 0x3f	; 63
    4bac:	0f 92       	push	r0
    4bae:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) PSC_EC_vect;
    4bb0:	83 ed       	ldi	r24, 0xD3	; 211
    4bb2:	95 e2       	ldi	r25, 0x25	; 37
    4bb4:	80 93 71 0b 	sts	0x0B71, r24	; 0x800b71 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4bb8:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4bbc:	80 93 70 0b 	sts	0x0B70, r24	; 0x800b70 <sg_u8PCMSK0>
    4bc0:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4bc4:	80 93 6f 0b 	sts	0x0B6F, r24	; 0x800b6f <sg_u8PCMSK1>
    4bc8:	ff cf       	rjmp	.-2      	; 0x4bc8 <__vector_6+0x22>

Disassembly of section .text.__vector_22:

00004bca <__vector_22>:
	while (1);
}

ISR(PCINT0_vect, ISR_BLOCK)
{
    4bca:	1f 92       	push	r1
    4bcc:	0f 92       	push	r0
    4bce:	0f b6       	in	r0, 0x3f	; 63
    4bd0:	0f 92       	push	r0
    4bd2:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) PCINT0_vect;
    4bd4:	85 ee       	ldi	r24, 0xE5	; 229
    4bd6:	95 e2       	ldi	r25, 0x25	; 37
    4bd8:	80 93 71 0b 	sts	0x0B71, r24	; 0x800b71 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4bdc:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4be0:	80 93 70 0b 	sts	0x0B70, r24	; 0x800b70 <sg_u8PCMSK0>
    4be4:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4be8:	80 93 6f 0b 	sts	0x0B6F, r24	; 0x800b6f <sg_u8PCMSK1>
    4bec:	ff cf       	rjmp	.-2      	; 0x4bec <__vector_22+0x22>

Disassembly of section .text.__vector_9:

00004bee <__vector_9>:
// 	while (1);
// }
*/

ISR(INT2_vect, ISR_BLOCK)
{
    4bee:	1f 92       	push	r1
    4bf0:	0f 92       	push	r0
    4bf2:	0f b6       	in	r0, 0x3f	; 63
    4bf4:	0f 92       	push	r0
    4bf6:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) INT2_vect;
    4bf8:	87 ef       	ldi	r24, 0xF7	; 247
    4bfa:	95 e2       	ldi	r25, 0x25	; 37
    4bfc:	80 93 71 0b 	sts	0x0B71, r24	; 0x800b71 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4c00:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4c04:	80 93 70 0b 	sts	0x0B70, r24	; 0x800b70 <sg_u8PCMSK0>
    4c08:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4c0c:	80 93 6f 0b 	sts	0x0B6F, r24	; 0x800b6f <sg_u8PCMSK1>
    4c10:	ff cf       	rjmp	.-2      	; 0x4c10 <__vector_9+0x22>

Disassembly of section .text.__vector_11:

00004c12 <__vector_11>:
// 	while (1);
// }


ISR(TIMER1_CAPT_vect, ISR_BLOCK)
{
    4c12:	1f 92       	push	r1
    4c14:	0f 92       	push	r0
    4c16:	0f b6       	in	r0, 0x3f	; 63
    4c18:	0f 92       	push	r0
    4c1a:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) TIMER1_CAPT_vect;
    4c1c:	89 e0       	ldi	r24, 0x09	; 9
    4c1e:	96 e2       	ldi	r25, 0x26	; 38
    4c20:	80 93 71 0b 	sts	0x0B71, r24	; 0x800b71 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4c24:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4c28:	80 93 70 0b 	sts	0x0B70, r24	; 0x800b70 <sg_u8PCMSK0>
    4c2c:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4c30:	80 93 6f 0b 	sts	0x0B6F, r24	; 0x800b6f <sg_u8PCMSK1>
    4c34:	ff cf       	rjmp	.-2      	; 0x4c34 <__vector_11+0x22>

Disassembly of section .text.__vector_13:

00004c36 <__vector_13>:
// }



ISR(TIMER1_COMPB_vect, ISR_BLOCK)
{
    4c36:	1f 92       	push	r1
    4c38:	0f 92       	push	r0
    4c3a:	0f b6       	in	r0, 0x3f	; 63
    4c3c:	0f 92       	push	r0
    4c3e:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) TIMER1_COMPB_vect;
    4c40:	8b e1       	ldi	r24, 0x1B	; 27
    4c42:	96 e2       	ldi	r25, 0x26	; 38
    4c44:	80 93 71 0b 	sts	0x0B71, r24	; 0x800b71 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4c48:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4c4c:	80 93 70 0b 	sts	0x0B70, r24	; 0x800b70 <sg_u8PCMSK0>
    4c50:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4c54:	80 93 6f 0b 	sts	0x0B6F, r24	; 0x800b6f <sg_u8PCMSK1>
    4c58:	ff cf       	rjmp	.-2      	; 0x4c58 <__vector_13+0x22>

Disassembly of section .text.__vector_14:

00004c5a <__vector_14>:
	while (1);
}


ISR(TIMER1_OVF_vect, ISR_BLOCK)
{
    4c5a:	1f 92       	push	r1
    4c5c:	0f 92       	push	r0
    4c5e:	0f b6       	in	r0, 0x3f	; 63
    4c60:	0f 92       	push	r0
    4c62:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) TIMER1_OVF_vect;
    4c64:	8d e2       	ldi	r24, 0x2D	; 45
    4c66:	96 e2       	ldi	r25, 0x26	; 38
    4c68:	80 93 71 0b 	sts	0x0B71, r24	; 0x800b71 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4c6c:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4c70:	80 93 70 0b 	sts	0x0B70, r24	; 0x800b70 <sg_u8PCMSK0>
    4c74:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4c78:	80 93 6f 0b 	sts	0x0B6F, r24	; 0x800b6f <sg_u8PCMSK1>
    4c7c:	ff cf       	rjmp	.-2      	; 0x4c7c <__vector_14+0x22>

Disassembly of section .text.__vector_17:

00004c7e <__vector_17>:
	while (1);
}

ISR(TIMER0_OVF_vect, ISR_BLOCK)
{
    4c7e:	1f 92       	push	r1
    4c80:	0f 92       	push	r0
    4c82:	0f b6       	in	r0, 0x3f	; 63
    4c84:	0f 92       	push	r0
    4c86:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) TIMER0_OVF_vect;
    4c88:	8f e3       	ldi	r24, 0x3F	; 63
    4c8a:	96 e2       	ldi	r25, 0x26	; 38
    4c8c:	80 93 71 0b 	sts	0x0B71, r24	; 0x800b71 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4c90:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4c94:	80 93 70 0b 	sts	0x0B70, r24	; 0x800b70 <sg_u8PCMSK0>
    4c98:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4c9c:	80 93 6f 0b 	sts	0x0B6F, r24	; 0x800b6f <sg_u8PCMSK1>
    4ca0:	ff cf       	rjmp	.-2      	; 0x4ca0 <__vector_17+0x22>

Disassembly of section .text.__vector_19:

00004ca2 <__vector_19>:
	while (1);
}

ISR(CAN_TOVF_vect, ISR_BLOCK)
{
    4ca2:	1f 92       	push	r1
    4ca4:	0f 92       	push	r0
    4ca6:	0f b6       	in	r0, 0x3f	; 63
    4ca8:	0f 92       	push	r0
    4caa:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) CAN_TOVF_vect;
    4cac:	81 e5       	ldi	r24, 0x51	; 81
    4cae:	96 e2       	ldi	r25, 0x26	; 38
    4cb0:	80 93 71 0b 	sts	0x0B71, r24	; 0x800b71 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4cb4:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4cb8:	80 93 70 0b 	sts	0x0B70, r24	; 0x800b70 <sg_u8PCMSK0>
    4cbc:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4cc0:	80 93 6f 0b 	sts	0x0B6F, r24	; 0x800b6f <sg_u8PCMSK1>
    4cc4:	ff cf       	rjmp	.-2      	; 0x4cc4 <__vector_19+0x22>

Disassembly of section .text.__vector_21:

00004cc6 <__vector_21>:
	while (1);
}

ISR(LIN_ERR_vect, ISR_BLOCK)
{
    4cc6:	1f 92       	push	r1
    4cc8:	0f 92       	push	r0
    4cca:	0f b6       	in	r0, 0x3f	; 63
    4ccc:	0f 92       	push	r0
    4cce:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) LIN_ERR_vect;
    4cd0:	83 e6       	ldi	r24, 0x63	; 99
    4cd2:	96 e2       	ldi	r25, 0x26	; 38
    4cd4:	80 93 71 0b 	sts	0x0B71, r24	; 0x800b71 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4cd8:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4cdc:	80 93 70 0b 	sts	0x0B70, r24	; 0x800b70 <sg_u8PCMSK0>
    4ce0:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4ce4:	80 93 6f 0b 	sts	0x0B6F, r24	; 0x800b6f <sg_u8PCMSK1>
    4ce8:	ff cf       	rjmp	.-2      	; 0x4ce8 <__vector_21+0x22>

Disassembly of section .text.__vector_25:

00004cea <__vector_25>:
// 	while (1);
// }


ISR(PCINT3_vect, ISR_BLOCK)
{
    4cea:	1f 92       	push	r1
    4cec:	0f 92       	push	r0
    4cee:	0f b6       	in	r0, 0x3f	; 63
    4cf0:	0f 92       	push	r0
    4cf2:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) PCINT3_vect;
    4cf4:	85 e7       	ldi	r24, 0x75	; 117
    4cf6:	96 e2       	ldi	r25, 0x26	; 38
    4cf8:	80 93 71 0b 	sts	0x0B71, r24	; 0x800b71 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4cfc:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4d00:	80 93 70 0b 	sts	0x0B70, r24	; 0x800b70 <sg_u8PCMSK0>
    4d04:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4d08:	80 93 6f 0b 	sts	0x0B6F, r24	; 0x800b6f <sg_u8PCMSK1>
    4d0c:	ff cf       	rjmp	.-2      	; 0x4d0c <__vector_25+0x22>

Disassembly of section .text.__vector_26:

00004d0e <__vector_26>:
	while (1);
}


ISR(SPI_STC_vect, ISR_BLOCK)
{
    4d0e:	1f 92       	push	r1
    4d10:	0f 92       	push	r0
    4d12:	0f b6       	in	r0, 0x3f	; 63
    4d14:	0f 92       	push	r0
    4d16:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) SPI_STC_vect;
    4d18:	87 e8       	ldi	r24, 0x87	; 135
    4d1a:	96 e2       	ldi	r25, 0x26	; 38
    4d1c:	80 93 71 0b 	sts	0x0B71, r24	; 0x800b71 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4d20:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4d24:	80 93 70 0b 	sts	0x0B70, r24	; 0x800b70 <sg_u8PCMSK0>
    4d28:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4d2c:	80 93 6f 0b 	sts	0x0B6F, r24	; 0x800b6f <sg_u8PCMSK1>
    4d30:	ff cf       	rjmp	.-2      	; 0x4d30 <__vector_26+0x22>

Disassembly of section .text.__vector_29:

00004d32 <__vector_29>:
	while (1);
}

ISR(EE_READY_vect, ISR_BLOCK)
{
    4d32:	1f 92       	push	r1
    4d34:	0f 92       	push	r0
    4d36:	0f b6       	in	r0, 0x3f	; 63
    4d38:	0f 92       	push	r0
    4d3a:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) EE_READY_vect;
    4d3c:	89 e9       	ldi	r24, 0x99	; 153
    4d3e:	96 e2       	ldi	r25, 0x26	; 38
    4d40:	80 93 71 0b 	sts	0x0B71, r24	; 0x800b71 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4d44:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4d48:	80 93 70 0b 	sts	0x0B70, r24	; 0x800b70 <sg_u8PCMSK0>
    4d4c:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4d50:	80 93 6f 0b 	sts	0x0B6F, r24	; 0x800b6f <sg_u8PCMSK1>
    4d54:	ff cf       	rjmp	.-2      	; 0x4d54 <__vector_29+0x22>

Disassembly of section .text.__vector_30:

00004d56 <__vector_30>:
	while (1);
}

ISR(SPM_READY_vect, ISR_BLOCK)
{
    4d56:	1f 92       	push	r1
    4d58:	0f 92       	push	r0
    4d5a:	0f b6       	in	r0, 0x3f	; 63
    4d5c:	0f 92       	push	r0
    4d5e:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) SPM_READY_vect;
    4d60:	8b ea       	ldi	r24, 0xAB	; 171
    4d62:	96 e2       	ldi	r25, 0x26	; 38
    4d64:	80 93 71 0b 	sts	0x0B71, r24	; 0x800b71 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4d68:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4d6c:	80 93 70 0b 	sts	0x0B70, r24	; 0x800b70 <sg_u8PCMSK0>
    4d70:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4d74:	80 93 6f 0b 	sts	0x0B6F, r24	; 0x800b6f <sg_u8PCMSK1>
    4d78:	ff cf       	rjmp	.-2      	; 0x4d78 <__vector_30+0x22>

Disassembly of section .text.CurrentThresholdsGet:

000037cc <CurrentThresholdsGet>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    37cc:	0f 93       	push	r16
    37ce:	1f 93       	push	r17
    37d0:	cf 93       	push	r28
    37d2:	df 93       	push	r29
    37d4:	8c 01       	movw	r16, r24
    37d6:	eb 01       	movw	r28, r22
    37d8:	89 2b       	or	r24, r25
    37da:	f9 f0       	breq	.+62     	; 0x381a <CurrentThresholdsGet+0x4e>
    37dc:	87 e0       	ldi	r24, 0x07	; 7
    37de:	90 e0       	ldi	r25, 0x00	; 0
    37e0:	0e 94 9f 27 	call	0x4f3e	; 0x4f3e <EEPROMRead>
    37e4:	90 e0       	ldi	r25, 0x00	; 0
    37e6:	f8 01       	movw	r30, r16
    37e8:	91 83       	std	Z+1, r25	; 0x01
    37ea:	80 83       	st	Z, r24
    37ec:	88 e0       	ldi	r24, 0x08	; 8
    37ee:	90 e0       	ldi	r25, 0x00	; 0
    37f0:	0e 94 9f 27 	call	0x4f3e	; 0x4f3e <EEPROMRead>
    37f4:	90 e0       	ldi	r25, 0x00	; 0
    37f6:	98 2f       	mov	r25, r24
    37f8:	88 27       	eor	r24, r24
    37fa:	f8 01       	movw	r30, r16
    37fc:	20 81       	ld	r18, Z
    37fe:	31 81       	ldd	r19, Z+1	; 0x01
    3800:	82 2b       	or	r24, r18
    3802:	93 2b       	or	r25, r19
    3804:	91 83       	std	Z+1, r25	; 0x01
    3806:	80 83       	st	Z, r24
    3808:	01 97       	sbiw	r24, 0x01	; 1
    380a:	8e 3f       	cpi	r24, 0xFE	; 254
    380c:	9f 4f       	sbci	r25, 0xFF	; 255
    380e:	28 f0       	brcs	.+10     	; 0x381a <CurrentThresholdsGet+0x4e>
    3810:	8c ec       	ldi	r24, 0xCC	; 204
    3812:	97 e7       	ldi	r25, 0x77	; 119
    3814:	f8 01       	movw	r30, r16
    3816:	91 83       	std	Z+1, r25	; 0x01
    3818:	80 83       	st	Z, r24
    381a:	20 97       	sbiw	r28, 0x00	; 0
    381c:	e1 f0       	breq	.+56     	; 0x3856 <CurrentThresholdsGet+0x8a>
    381e:	85 e0       	ldi	r24, 0x05	; 5
    3820:	90 e0       	ldi	r25, 0x00	; 0
    3822:	0e 94 9f 27 	call	0x4f3e	; 0x4f3e <EEPROMRead>
    3826:	90 e0       	ldi	r25, 0x00	; 0
    3828:	99 83       	std	Y+1, r25	; 0x01
    382a:	88 83       	st	Y, r24
    382c:	86 e0       	ldi	r24, 0x06	; 6
    382e:	90 e0       	ldi	r25, 0x00	; 0
    3830:	0e 94 9f 27 	call	0x4f3e	; 0x4f3e <EEPROMRead>
    3834:	90 e0       	ldi	r25, 0x00	; 0
    3836:	98 2f       	mov	r25, r24
    3838:	88 27       	eor	r24, r24
    383a:	28 81       	ld	r18, Y
    383c:	39 81       	ldd	r19, Y+1	; 0x01
    383e:	82 2b       	or	r24, r18
    3840:	93 2b       	or	r25, r19
    3842:	99 83       	std	Y+1, r25	; 0x01
    3844:	88 83       	st	Y, r24
    3846:	01 97       	sbiw	r24, 0x01	; 1
    3848:	8e 3f       	cpi	r24, 0xFE	; 254
    384a:	9f 4f       	sbci	r25, 0xFF	; 255
    384c:	20 f0       	brcs	.+8      	; 0x3856 <CurrentThresholdsGet+0x8a>
    384e:	84 ef       	ldi	r24, 0xF4	; 244
    3850:	91 e8       	ldi	r25, 0x81	; 129
    3852:	99 83       	std	Y+1, r25	; 0x01
    3854:	88 83       	st	Y, r24
    3856:	df 91       	pop	r29
    3858:	cf 91       	pop	r28
    385a:	1f 91       	pop	r17
    385c:	0f 91       	pop	r16
    385e:	08 95       	ret

Disassembly of section .text.CANReceiveCallback:

000011b8 <CANReceiveCallback>:
    11b8:	cf 92       	push	r12
    11ba:	df 92       	push	r13
    11bc:	ef 92       	push	r14
    11be:	ff 92       	push	r15
    11c0:	cf 93       	push	r28
    11c2:	fb 01       	movw	r30, r22
    11c4:	90 91 19 05 	lds	r25, 0x0519	; 0x800519 <sg_bModuleRegistered>
    11c8:	10 92 77 0b 	sts	0x0B77, r1	; 0x800b77 <sg_u8TicksSinceLastPackControllerMessage>
    11cc:	82 31       	cpi	r24, 0x12	; 18
    11ce:	29 f4       	brne	.+10     	; 0x11da <CANReceiveCallback+0x22>
    11d0:	80 81       	ld	r24, Z
    11d2:	8f 70       	andi	r24, 0x0F	; 15
    11d4:	0e 94 5f 27 	call	0x4ebe	; 0x4ebe <ModuleControllerStateSetMax>
    11d8:	35 c1       	rjmp	.+618    	; 0x1444 <CANReceiveCallback+0x28c>
    11da:	8f 30       	cpi	r24, 0x0F	; 15
    11dc:	a9 f4       	brne	.+42     	; 0x1208 <CANReceiveCallback+0x50>
    11de:	8a ed       	ldi	r24, 0xDA	; 218
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	a0 e0       	ldi	r26, 0x00	; 0
    11e4:	af 93       	push	r26
    11e6:	9f 93       	push	r25
    11e8:	8f 93       	push	r24
    11ea:	0e 94 ec 27 	call	0x4fd8	; 0x4fd8 <DebugOut>
    11ee:	10 92 1f 05 	sts	0x051F, r1	; 0x80051f <sg_u8ModuleRegistrationID>
    11f2:	10 92 19 05 	sts	0x0519, r1	; 0x800519 <sg_bModuleRegistered>
    11f6:	10 92 7b 0b 	sts	0x0B7B, r1	; 0x800b7b <sg_bIgnoreStatusRequests>
    11fa:	80 e0       	ldi	r24, 0x00	; 0
    11fc:	0e 94 19 28 	call	0x5032	; 0x5032 <ModuleControllerStateSet>
    1200:	0f 90       	pop	r0
    1202:	0f 90       	pop	r0
    1204:	0f 90       	pop	r0
    1206:	1e c1       	rjmp	.+572    	; 0x1444 <CANReceiveCallback+0x28c>
    1208:	80 31       	cpi	r24, 0x10	; 16
    120a:	21 f4       	brne	.+8      	; 0x1214 <CANReceiveCallback+0x5c>
    120c:	80 e0       	ldi	r24, 0x00	; 0
    120e:	0e 94 19 28 	call	0x5032	; 0x5032 <ModuleControllerStateSet>
    1212:	18 c1       	rjmp	.+560    	; 0x1444 <CANReceiveCallback+0x28c>
    1214:	81 31       	cpi	r24, 0x11	; 17
    1216:	59 f4       	brne	.+22     	; 0x122e <CANReceiveCallback+0x76>
    1218:	20 81       	ld	r18, Z
    121a:	31 81       	ldd	r19, Z+1	; 0x01
    121c:	42 81       	ldd	r20, Z+2	; 0x02
    121e:	53 81       	ldd	r21, Z+3	; 0x03
    1220:	64 81       	ldd	r22, Z+4	; 0x04
    1222:	75 81       	ldd	r23, Z+5	; 0x05
    1224:	86 81       	ldd	r24, Z+6	; 0x06
    1226:	97 81       	ldd	r25, Z+7	; 0x07
    1228:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <RTCSetTime>
    122c:	0b c1       	rjmp	.+534    	; 0x1444 <CANReceiveCallback+0x28c>
    122e:	8d 30       	cpi	r24, 0x0D	; 13
    1230:	09 f0       	breq	.+2      	; 0x1234 <CANReceiveCallback+0x7c>
    1232:	4f c0       	rjmp	.+158    	; 0x12d2 <CANReceiveCallback+0x11a>
    1234:	80 91 19 05 	lds	r24, 0x0519	; 0x800519 <sg_bModuleRegistered>
    1238:	81 11       	cpse	r24, r1
    123a:	2f c0       	rjmp	.+94     	; 0x129a <CANReceiveCallback+0xe2>
    123c:	80 91 7d 0b 	lds	r24, 0x0B7D	; 0x800b7d <sg_bAnnouncementPending>
    1240:	81 11       	cpse	r24, r1
    1242:	2b c0       	rjmp	.+86     	; 0x129a <CANReceiveCallback+0xe2>
    1244:	c0 90 1a 01 	lds	r12, 0x011A	; 0x80011a <sg_sFrame+0xe>
    1248:	d0 90 1b 01 	lds	r13, 0x011B	; 0x80011b <sg_sFrame+0xf>
    124c:	e0 90 1c 01 	lds	r14, 0x011C	; 0x80011c <sg_sFrame+0x10>
    1250:	f0 90 1d 01 	lds	r15, 0x011D	; 0x80011d <sg_sFrame+0x11>
    1254:	1f 92       	push	r1
    1256:	cf 92       	push	r12
    1258:	85 e0       	ldi	r24, 0x05	; 5
    125a:	91 e0       	ldi	r25, 0x01	; 1
    125c:	a0 e0       	ldi	r26, 0x00	; 0
    125e:	af 93       	push	r26
    1260:	9f 93       	push	r25
    1262:	8f 93       	push	r24
    1264:	0e 94 ec 27 	call	0x4fd8	; 0x4fd8 <DebugOut>
    1268:	8d ec       	ldi	r24, 0xCD	; 205
    126a:	c8 9e       	mul	r12, r24
    126c:	c1 2c       	mov	r12, r1
    126e:	11 24       	eor	r1, r1
    1270:	c6 94       	lsr	r12
    1272:	c6 94       	lsr	r12
    1274:	c6 94       	lsr	r12
    1276:	c0 92 7c 0b 	sts	0x0B7C, r12	; 0x800b7c <sg_u8AnnouncementDelayTicks>
    127a:	80 91 7c 0b 	lds	r24, 0x0B7C	; 0x800b7c <sg_u8AnnouncementDelayTicks>
    127e:	0f 90       	pop	r0
    1280:	0f 90       	pop	r0
    1282:	0f 90       	pop	r0
    1284:	0f 90       	pop	r0
    1286:	0f 90       	pop	r0
    1288:	81 11       	cpse	r24, r1
    128a:	03 c0       	rjmp	.+6      	; 0x1292 <CANReceiveCallback+0xda>
    128c:	81 e0       	ldi	r24, 0x01	; 1
    128e:	80 93 7c 0b 	sts	0x0B7C, r24	; 0x800b7c <sg_u8AnnouncementDelayTicks>
    1292:	81 e0       	ldi	r24, 0x01	; 1
    1294:	80 93 7d 0b 	sts	0x0B7D, r24	; 0x800b7d <sg_bAnnouncementPending>
    1298:	d5 c0       	rjmp	.+426    	; 0x1444 <CANReceiveCallback+0x28c>
    129a:	80 91 19 05 	lds	r24, 0x0519	; 0x800519 <sg_bModuleRegistered>
    129e:	88 23       	and	r24, r24
    12a0:	61 f0       	breq	.+24     	; 0x12ba <CANReceiveCallback+0x102>
    12a2:	88 e4       	ldi	r24, 0x48	; 72
    12a4:	91 e0       	ldi	r25, 0x01	; 1
    12a6:	a0 e0       	ldi	r26, 0x00	; 0
    12a8:	af 93       	push	r26
    12aa:	9f 93       	push	r25
    12ac:	8f 93       	push	r24
    12ae:	0e 94 ec 27 	call	0x4fd8	; 0x4fd8 <DebugOut>
    12b2:	0f 90       	pop	r0
    12b4:	0f 90       	pop	r0
    12b6:	0f 90       	pop	r0
    12b8:	c5 c0       	rjmp	.+394    	; 0x1444 <CANReceiveCallback+0x28c>
    12ba:	86 e7       	ldi	r24, 0x76	; 118
    12bc:	91 e0       	ldi	r25, 0x01	; 1
    12be:	a0 e0       	ldi	r26, 0x00	; 0
    12c0:	af 93       	push	r26
    12c2:	9f 93       	push	r25
    12c4:	8f 93       	push	r24
    12c6:	0e 94 ec 27 	call	0x4fd8	; 0x4fd8 <DebugOut>
    12ca:	0f 90       	pop	r0
    12cc:	0f 90       	pop	r0
    12ce:	0f 90       	pop	r0
    12d0:	b9 c0       	rjmp	.+370    	; 0x1444 <CANReceiveCallback+0x28c>
    12d2:	89 30       	cpi	r24, 0x09	; 9
    12d4:	09 f0       	breq	.+2      	; 0x12d8 <CANReceiveCallback+0x120>
    12d6:	41 c0       	rjmp	.+130    	; 0x135a <CANReceiveCallback+0x1a2>
    12d8:	48 30       	cpi	r20, 0x08	; 8
    12da:	09 f0       	breq	.+2      	; 0x12de <CANReceiveCallback+0x126>
    12dc:	b3 c0       	rjmp	.+358    	; 0x1444 <CANReceiveCallback+0x28c>
    12de:	f0 80       	ld	r15, Z
    12e0:	82 81       	ldd	r24, Z+2	; 0x02
    12e2:	82 30       	cpi	r24, 0x02	; 2
    12e4:	09 f0       	breq	.+2      	; 0x12e8 <CANReceiveCallback+0x130>
    12e6:	ae c0       	rjmp	.+348    	; 0x1444 <CANReceiveCallback+0x28c>
    12e8:	83 81       	ldd	r24, Z+3	; 0x03
    12ea:	83 30       	cpi	r24, 0x03	; 3
    12ec:	09 f0       	breq	.+2      	; 0x12f0 <CANReceiveCallback+0x138>
    12ee:	aa c0       	rjmp	.+340    	; 0x1444 <CANReceiveCallback+0x28c>
    12f0:	40 91 1a 01 	lds	r20, 0x011A	; 0x80011a <sg_sFrame+0xe>
    12f4:	50 91 1b 01 	lds	r21, 0x011B	; 0x80011b <sg_sFrame+0xf>
    12f8:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <sg_sFrame+0x10>
    12fc:	70 91 1d 01 	lds	r23, 0x011D	; 0x80011d <sg_sFrame+0x11>
    1300:	84 81       	ldd	r24, Z+4	; 0x04
    1302:	95 81       	ldd	r25, Z+5	; 0x05
    1304:	a6 81       	ldd	r26, Z+6	; 0x06
    1306:	b7 81       	ldd	r27, Z+7	; 0x07
    1308:	48 17       	cp	r20, r24
    130a:	59 07       	cpc	r21, r25
    130c:	6a 07       	cpc	r22, r26
    130e:	7b 07       	cpc	r23, r27
    1310:	09 f0       	breq	.+2      	; 0x1314 <CANReceiveCallback+0x15c>
    1312:	98 c0       	rjmp	.+304    	; 0x1444 <CANReceiveCallback+0x28c>
    1314:	10 92 77 0b 	sts	0x0B77, r1	; 0x800b77 <sg_u8TicksSinceLastPackControllerMessage>
    1318:	f0 92 1f 05 	sts	0x051F, r15	; 0x80051f <sg_u8ModuleRegistrationID>
    131c:	0e 94 cc 27 	call	0x4f98	; 0x4f98 <SendModuleControllerStatus>
    1320:	c1 e0       	ldi	r28, 0x01	; 1
    1322:	c0 93 14 05 	sts	0x0514, r28	; 0x800514 <sg_bSendHardwareDetail>
    1326:	c0 93 19 05 	sts	0x0519, r28	; 0x800519 <sg_bModuleRegistered>
    132a:	10 92 7b 0b 	sts	0x0B7B, r1	; 0x800b7b <sg_bIgnoreStatusRequests>
    132e:	1f 92       	push	r1
    1330:	ff 92       	push	r15
    1332:	8e e9       	ldi	r24, 0x9E	; 158
    1334:	91 e0       	ldi	r25, 0x01	; 1
    1336:	a0 e0       	ldi	r26, 0x00	; 0
    1338:	af 93       	push	r26
    133a:	9f 93       	push	r25
    133c:	8f 93       	push	r24
    133e:	0e 94 ec 27 	call	0x4fd8	; 0x4fd8 <DebugOut>
    1342:	10 92 7d 0b 	sts	0x0B7D, r1	; 0x800b7d <sg_bAnnouncementPending>
    1346:	10 92 7c 0b 	sts	0x0B7C, r1	; 0x800b7c <sg_u8AnnouncementDelayTicks>
    134a:	c0 93 18 05 	sts	0x0518, r28	; 0x800518 <sg_bSendTimeRequest>
    134e:	0f 90       	pop	r0
    1350:	0f 90       	pop	r0
    1352:	0f 90       	pop	r0
    1354:	0f 90       	pop	r0
    1356:	0f 90       	pop	r0
    1358:	75 c0       	rjmp	.+234    	; 0x1444 <CANReceiveCallback+0x28c>
    135a:	44 23       	and	r20, r20
    135c:	09 f4       	brne	.+2      	; 0x1360 <CANReceiveCallback+0x1a8>
    135e:	72 c0       	rjmp	.+228    	; 0x1444 <CANReceiveCallback+0x28c>
    1360:	20 81       	ld	r18, Z
    1362:	91 11       	cpse	r25, r1
    1364:	08 c0       	rjmp	.+16     	; 0x1376 <CANReceiveCallback+0x1be>
    1366:	8a 30       	cpi	r24, 0x0A	; 10
    1368:	09 f0       	breq	.+2      	; 0x136c <CANReceiveCallback+0x1b4>
    136a:	6c c0       	rjmp	.+216    	; 0x1444 <CANReceiveCallback+0x28c>
    136c:	90 91 19 05 	lds	r25, 0x0519	; 0x800519 <sg_bModuleRegistered>
    1370:	99 23       	and	r25, r25
    1372:	09 f4       	brne	.+2      	; 0x1376 <CANReceiveCallback+0x1be>
    1374:	67 c0       	rjmp	.+206    	; 0x1444 <CANReceiveCallback+0x28c>
    1376:	90 91 1f 05 	lds	r25, 0x051F	; 0x80051f <sg_u8ModuleRegistrationID>
    137a:	29 13       	cpse	r18, r25
    137c:	63 c0       	rjmp	.+198    	; 0x1444 <CANReceiveCallback+0x28c>
    137e:	8a 30       	cpi	r24, 0x0A	; 10
    1380:	a9 f4       	brne	.+42     	; 0x13ac <CANReceiveCallback+0x1f4>
    1382:	41 30       	cpi	r20, 0x01	; 1
    1384:	09 f0       	breq	.+2      	; 0x1388 <CANReceiveCallback+0x1d0>
    1386:	5e c0       	rjmp	.+188    	; 0x1444 <CANReceiveCallback+0x28c>
    1388:	80 91 7b 0b 	lds	r24, 0x0B7B	; 0x800b7b <sg_bIgnoreStatusRequests>
    138c:	81 11       	cpse	r24, r1
    138e:	5a c0       	rjmp	.+180    	; 0x1444 <CANReceiveCallback+0x28c>
    1390:	89 ed       	ldi	r24, 0xD9	; 217
    1392:	91 e0       	ldi	r25, 0x01	; 1
    1394:	a0 e0       	ldi	r26, 0x00	; 0
    1396:	af 93       	push	r26
    1398:	9f 93       	push	r25
    139a:	8f 93       	push	r24
    139c:	0e 94 ec 27 	call	0x4fd8	; 0x4fd8 <DebugOut>
    13a0:	0e 94 cc 27 	call	0x4f98	; 0x4f98 <SendModuleControllerStatus>
    13a4:	0f 90       	pop	r0
    13a6:	0f 90       	pop	r0
    13a8:	0f 90       	pop	r0
    13aa:	4c c0       	rjmp	.+152    	; 0x1444 <CANReceiveCallback+0x28c>
    13ac:	8b 30       	cpi	r24, 0x0B	; 11
    13ae:	f9 f4       	brne	.+62     	; 0x13ee <CANReceiveCallback+0x236>
    13b0:	43 30       	cpi	r20, 0x03	; 3
    13b2:	09 f0       	breq	.+2      	; 0x13b6 <CANReceiveCallback+0x1fe>
    13b4:	47 c0       	rjmp	.+142    	; 0x1444 <CANReceiveCallback+0x28c>
    13b6:	80 91 15 05 	lds	r24, 0x0515	; 0x800515 <sg_bSendCellStatus>
    13ba:	81 11       	cpse	r24, r1
    13bc:	43 c0       	rjmp	.+134    	; 0x1444 <CANReceiveCallback+0x28c>
    13be:	81 81       	ldd	r24, Z+1	; 0x01
    13c0:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <sg_sFrame+0x15>
    13c4:	89 17       	cp	r24, r25
    13c6:	f0 f5       	brcc	.+124    	; 0x1444 <CANReceiveCallback+0x28c>
    13c8:	80 93 1b 05 	sts	0x051B, r24	; 0x80051b <sg_u8CellStatus>
    13cc:	90 91 1b 05 	lds	r25, 0x051B	; 0x80051b <sg_u8CellStatus>
    13d0:	9f 5f       	subi	r25, 0xFF	; 255
    13d2:	90 93 1c 05 	sts	0x051C, r25	; 0x80051c <sg_u8CellStatusTarget>
    13d6:	8f 3f       	cpi	r24, 0xFF	; 255
    13d8:	31 f4       	brne	.+12     	; 0x13e6 <CANReceiveCallback+0x22e>
    13da:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <sg_sFrame+0x15>
    13de:	80 93 1c 05 	sts	0x051C, r24	; 0x80051c <sg_u8CellStatusTarget>
    13e2:	10 92 1b 05 	sts	0x051B, r1	; 0x80051b <sg_u8CellStatus>
    13e6:	81 e0       	ldi	r24, 0x01	; 1
    13e8:	80 93 15 05 	sts	0x0515, r24	; 0x800515 <sg_bSendCellStatus>
    13ec:	2b c0       	rjmp	.+86     	; 0x1444 <CANReceiveCallback+0x28c>
    13ee:	8c 30       	cpi	r24, 0x0C	; 12
    13f0:	49 f4       	brne	.+18     	; 0x1404 <CANReceiveCallback+0x24c>
    13f2:	10 92 77 0b 	sts	0x0B77, r1	; 0x800b77 <sg_u8TicksSinceLastPackControllerMessage>
    13f6:	42 30       	cpi	r20, 0x02	; 2
    13f8:	29 f5       	brne	.+74     	; 0x1444 <CANReceiveCallback+0x28c>
    13fa:	81 81       	ldd	r24, Z+1	; 0x01
    13fc:	8f 70       	andi	r24, 0x0F	; 15
    13fe:	0e 94 19 28 	call	0x5032	; 0x5032 <ModuleControllerStateSet>
    1402:	20 c0       	rjmp	.+64     	; 0x1444 <CANReceiveCallback+0x28c>
    1404:	85 30       	cpi	r24, 0x05	; 5
    1406:	21 f4       	brne	.+8      	; 0x1410 <CANReceiveCallback+0x258>
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	80 93 14 05 	sts	0x0514, r24	; 0x800514 <sg_bSendHardwareDetail>
    140e:	1a c0       	rjmp	.+52     	; 0x1444 <CANReceiveCallback+0x28c>
    1410:	8e 30       	cpi	r24, 0x0E	; 14
    1412:	c1 f4       	brne	.+48     	; 0x1444 <CANReceiveCallback+0x28c>
    1414:	1f 92       	push	r1
    1416:	2f 93       	push	r18
    1418:	8e ef       	ldi	r24, 0xFE	; 254
    141a:	91 e0       	ldi	r25, 0x01	; 1
    141c:	a0 e0       	ldi	r26, 0x00	; 0
    141e:	af 93       	push	r26
    1420:	9f 93       	push	r25
    1422:	8f 93       	push	r24
    1424:	0e 94 ec 27 	call	0x4fd8	; 0x4fd8 <DebugOut>
    1428:	10 92 1f 05 	sts	0x051F, r1	; 0x80051f <sg_u8ModuleRegistrationID>
    142c:	10 92 19 05 	sts	0x0519, r1	; 0x800519 <sg_bModuleRegistered>
    1430:	10 92 7b 0b 	sts	0x0B7B, r1	; 0x800b7b <sg_bIgnoreStatusRequests>
    1434:	80 e0       	ldi	r24, 0x00	; 0
    1436:	0e 94 19 28 	call	0x5032	; 0x5032 <ModuleControllerStateSet>
    143a:	0f 90       	pop	r0
    143c:	0f 90       	pop	r0
    143e:	0f 90       	pop	r0
    1440:	0f 90       	pop	r0
    1442:	0f 90       	pop	r0
    1444:	cf 91       	pop	r28
    1446:	ff 90       	pop	r15
    1448:	ef 90       	pop	r14
    144a:	df 90       	pop	r13
    144c:	cf 90       	pop	r12
    144e:	08 95       	ret

Disassembly of section .text.ControllerStatusMessagesSend:

00000810 <ControllerStatusMessagesSend>:
 810:	cf 92       	push	r12
 812:	df 92       	push	r13
 814:	ef 92       	push	r14
 816:	ff 92       	push	r15
 818:	0f 93       	push	r16
 81a:	1f 93       	push	r17
 81c:	cf 93       	push	r28
 81e:	df 93       	push	r29
 820:	00 d0       	rcall	.+0      	; 0x822 <ControllerStatusMessagesSend+0x12>
 822:	00 d0       	rcall	.+0      	; 0x824 <ControllerStatusMessagesSend+0x14>
 824:	cd b7       	in	r28, 0x3d	; 61
 826:	de b7       	in	r29, 0x3e	; 62
 828:	8c 01       	movw	r16, r24
 82a:	80 91 18 05 	lds	r24, 0x0518	; 0x800518 <sg_bSendTimeRequest>
 82e:	88 23       	and	r24, r24
 830:	69 f0       	breq	.+26     	; 0x84c <ControllerStatusMessagesSend+0x3c>
 832:	88 e0       	ldi	r24, 0x08	; 8
 834:	d8 01       	movw	r26, r16
 836:	1d 92       	st	X+, r1
 838:	8a 95       	dec	r24
 83a:	e9 f7       	brne	.-6      	; 0x836 <ControllerStatusMessagesSend+0x26>
 83c:	48 e0       	ldi	r20, 0x08	; 8
 83e:	b8 01       	movw	r22, r16
 840:	88 e0       	ldi	r24, 0x08	; 8
 842:	0e 94 65 24 	call	0x48ca	; 0x48ca <CANSendMessage>
 846:	81 11       	cpse	r24, r1
 848:	10 92 18 05 	sts	0x0518, r1	; 0x800518 <sg_bSendTimeRequest>
 84c:	80 91 16 05 	lds	r24, 0x0516	; 0x800516 <sg_bSendModuleControllerStatus>
 850:	88 23       	and	r24, r24
 852:	09 f4       	brne	.+2      	; 0x856 <ControllerStatusMessagesSend+0x46>
 854:	06 c1       	rjmp	.+524    	; 0xa62 <ControllerStatusMessagesSend+0x252>
 856:	80 91 73 0b 	lds	r24, 0x0B73	; 0x800b73 <sg_u8ControllerStatusMsgCount>
 85a:	81 11       	cpse	r24, r1
 85c:	80 c0       	rjmp	.+256    	; 0x95e <ControllerStatusMessagesSend+0x14e>
 85e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
 862:	8f 70       	andi	r24, 0x0F	; 15
 864:	f8 01       	movw	r30, r16
 866:	80 83       	st	Z, r24
 868:	80 91 1e 05 	lds	r24, 0x051E	; 0x80051e <sg_u8SOC>
 86c:	81 83       	std	Z+1, r24	; 0x01
 86e:	80 91 1d 05 	lds	r24, 0x051D	; 0x80051d <sg_u8SOH>
 872:	82 83       	std	Z+2, r24	; 0x02
 874:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <sg_sFrame+0x15>
 878:	83 83       	std	Z+3, r24	; 0x03
 87a:	84 e0       	ldi	r24, 0x04	; 4
 87c:	34 96       	adiw	r30, 0x04	; 4
 87e:	df 01       	movw	r26, r30
 880:	1d 92       	st	X+, r1
 882:	8a 95       	dec	r24
 884:	e9 f7       	brne	.-6      	; 0x880 <ControllerStatusMessagesSend+0x70>
 886:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <sg_sFrame+0x49>
 88a:	88 23       	and	r24, r24
 88c:	79 f0       	breq	.+30     	; 0x8ac <ControllerStatusMessagesSend+0x9c>
 88e:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <sg_sFrame+0x4c>
 892:	88 23       	and	r24, r24
 894:	71 f0       	breq	.+28     	; 0x8b2 <ControllerStatusMessagesSend+0xa2>
 896:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
 89a:	83 30       	cpi	r24, 0x03	; 3
 89c:	69 f4       	brne	.+26     	; 0x8b8 <ControllerStatusMessagesSend+0xa8>
 89e:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <ModuleCurrentConvertReadings>
 8a2:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <sg_sFrame+0x30>
 8a6:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <sg_sFrame+0x31>
 8aa:	08 c0       	rjmp	.+16     	; 0x8bc <ControllerStatusMessagesSend+0xac>
 8ac:	80 e0       	ldi	r24, 0x00	; 0
 8ae:	90 e8       	ldi	r25, 0x80	; 128
 8b0:	05 c0       	rjmp	.+10     	; 0x8bc <ControllerStatusMessagesSend+0xac>
 8b2:	80 e0       	ldi	r24, 0x00	; 0
 8b4:	90 e8       	ldi	r25, 0x80	; 128
 8b6:	02 c0       	rjmp	.+4      	; 0x8bc <ControllerStatusMessagesSend+0xac>
 8b8:	80 e0       	ldi	r24, 0x00	; 0
 8ba:	90 e8       	ldi	r25, 0x80	; 128
 8bc:	f8 01       	movw	r30, r16
 8be:	84 83       	std	Z+4, r24	; 0x04
 8c0:	95 83       	std	Z+5, r25	; 0x05
 8c2:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <sg_sFrame+0x46>
 8c6:	88 23       	and	r24, r24
 8c8:	79 f0       	breq	.+30     	; 0x8e8 <ControllerStatusMessagesSend+0xd8>
 8ca:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <sg_sFrame+0x47>
 8ce:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <sg_sFrame+0x48>
 8d2:	4f ef       	ldi	r20, 0xFF	; 255
 8d4:	53 e0       	ldi	r21, 0x03	; 3
 8d6:	60 e0       	ldi	r22, 0x00	; 0
 8d8:	70 e0       	ldi	r23, 0x00	; 0
 8da:	9a 01       	movw	r18, r20
 8dc:	ab 01       	movw	r20, r22
 8de:	28 1b       	sub	r18, r24
 8e0:	39 0b       	sbc	r19, r25
 8e2:	41 09       	sbc	r20, r1
 8e4:	51 09       	sbc	r21, r1
 8e6:	03 c0       	rjmp	.+6      	; 0x8ee <ControllerStatusMessagesSend+0xde>
 8e8:	20 e0       	ldi	r18, 0x00	; 0
 8ea:	30 e0       	ldi	r19, 0x00	; 0
 8ec:	a9 01       	movw	r20, r18
 8ee:	ec e0       	ldi	r30, 0x0C	; 12
 8f0:	f1 e0       	ldi	r31, 0x01	; 1
 8f2:	a5 a1       	ldd	r26, Z+37	; 0x25
 8f4:	b6 a1       	ldd	r27, Z+38	; 0x26
 8f6:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <__mulshisi3>
 8fa:	dc 01       	movw	r26, r24
 8fc:	cb 01       	movw	r24, r22
 8fe:	68 94       	set
 900:	16 f8       	bld	r1, 6
 902:	b6 95       	lsr	r27
 904:	a7 95       	ror	r26
 906:	97 95       	ror	r25
 908:	87 95       	ror	r24
 90a:	16 94       	lsr	r1
 90c:	d1 f7       	brne	.-12     	; 0x902 <ControllerStatusMessagesSend+0xf2>
 90e:	c5 8c       	ldd	r12, Z+29	; 0x1d
 910:	d6 8c       	ldd	r13, Z+30	; 0x1e
 912:	e7 8c       	ldd	r14, Z+31	; 0x1f
 914:	f0 a0       	ldd	r15, Z+32	; 0x20
 916:	bc 01       	movw	r22, r24
 918:	cd 01       	movw	r24, r26
 91a:	6c 0d       	add	r22, r12
 91c:	7d 1d       	adc	r23, r13
 91e:	8e 1d       	adc	r24, r14
 920:	9f 1d       	adc	r25, r15
 922:	2f e0       	ldi	r18, 0x0F	; 15
 924:	30 e0       	ldi	r19, 0x00	; 0
 926:	40 e0       	ldi	r20, 0x00	; 0
 928:	50 e0       	ldi	r21, 0x00	; 0
 92a:	0e 94 e0 22 	call	0x45c0	; 0x45c0 <__udivmodsi4>
 92e:	20 93 4e 01 	sts	0x014E, r18	; 0x80014e <sg_sFrame+0x42>
 932:	30 93 4f 01 	sts	0x014F, r19	; 0x80014f <sg_sFrame+0x43>
 936:	40 93 50 01 	sts	0x0150, r20	; 0x800150 <sg_sFrame+0x44>
 93a:	50 93 51 01 	sts	0x0151, r21	; 0x800151 <sg_sFrame+0x45>
 93e:	d8 01       	movw	r26, r16
 940:	16 96       	adiw	r26, 0x06	; 6
 942:	2c 93       	st	X, r18
 944:	16 97       	sbiw	r26, 0x06	; 6
 946:	17 96       	adiw	r26, 0x07	; 7
 948:	3c 93       	st	X, r19
 94a:	48 e0       	ldi	r20, 0x08	; 8
 94c:	b8 01       	movw	r22, r16
 94e:	81 e0       	ldi	r24, 0x01	; 1
 950:	0e 94 65 24 	call	0x48ca	; 0x48ca <CANSendMessage>
 954:	88 23       	and	r24, r24
 956:	09 f4       	brne	.+2      	; 0x95a <ControllerStatusMessagesSend+0x14a>
 958:	6b c0       	rjmp	.+214    	; 0xa30 <ControllerStatusMessagesSend+0x220>
 95a:	81 e0       	ldi	r24, 0x01	; 1
 95c:	70 c0       	rjmp	.+224    	; 0xa3e <ControllerStatusMessagesSend+0x22e>
 95e:	81 30       	cpi	r24, 0x01	; 1
 960:	c1 f5       	brne	.+112    	; 0x9d2 <ControllerStatusMessagesSend+0x1c2>
 962:	ec e0       	ldi	r30, 0x0C	; 12
 964:	f1 e0       	ldi	r31, 0x01	; 1
 966:	82 ad       	ldd	r24, Z+58	; 0x3a
 968:	93 ad       	ldd	r25, Z+59	; 0x3b
 96a:	d8 01       	movw	r26, r16
 96c:	8c 93       	st	X, r24
 96e:	82 ad       	ldd	r24, Z+58	; 0x3a
 970:	93 ad       	ldd	r25, Z+59	; 0x3b
 972:	11 96       	adiw	r26, 0x01	; 1
 974:	9c 93       	st	X, r25
 976:	11 97       	sbiw	r26, 0x01	; 1
 978:	80 ad       	ldd	r24, Z+56	; 0x38
 97a:	91 ad       	ldd	r25, Z+57	; 0x39
 97c:	12 96       	adiw	r26, 0x02	; 2
 97e:	8c 93       	st	X, r24
 980:	12 97       	sbiw	r26, 0x02	; 2
 982:	80 ad       	ldd	r24, Z+56	; 0x38
 984:	91 ad       	ldd	r25, Z+57	; 0x39
 986:	13 96       	adiw	r26, 0x03	; 3
 988:	9c 93       	st	X, r25
 98a:	13 97       	sbiw	r26, 0x03	; 3
 98c:	84 ad       	ldd	r24, Z+60	; 0x3c
 98e:	95 ad       	ldd	r25, Z+61	; 0x3d
 990:	14 96       	adiw	r26, 0x04	; 4
 992:	8c 93       	st	X, r24
 994:	14 97       	sbiw	r26, 0x04	; 4
 996:	84 ad       	ldd	r24, Z+60	; 0x3c
 998:	95 ad       	ldd	r25, Z+61	; 0x3d
 99a:	15 96       	adiw	r26, 0x05	; 5
 99c:	9c 93       	st	X, r25
 99e:	60 91 4a 01 	lds	r22, 0x014A	; 0x80014a <sg_sFrame+0x3e>
 9a2:	70 91 4b 01 	lds	r23, 0x014B	; 0x80014b <sg_sFrame+0x3f>
 9a6:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <sg_sFrame+0x40>
 9aa:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <sg_sFrame+0x41>
 9ae:	2f e0       	ldi	r18, 0x0F	; 15
 9b0:	30 e0       	ldi	r19, 0x00	; 0
 9b2:	40 e0       	ldi	r20, 0x00	; 0
 9b4:	50 e0       	ldi	r21, 0x00	; 0
 9b6:	0e 94 e0 22 	call	0x45c0	; 0x45c0 <__udivmodsi4>
 9ba:	f8 01       	movw	r30, r16
 9bc:	26 83       	std	Z+6, r18	; 0x06
 9be:	37 83       	std	Z+7, r19	; 0x07
 9c0:	48 e0       	ldi	r20, 0x08	; 8
 9c2:	b8 01       	movw	r22, r16
 9c4:	82 e0       	ldi	r24, 0x02	; 2
 9c6:	0e 94 65 24 	call	0x48ca	; 0x48ca <CANSendMessage>
 9ca:	88 23       	and	r24, r24
 9cc:	99 f1       	breq	.+102    	; 0xa34 <ControllerStatusMessagesSend+0x224>
 9ce:	81 e0       	ldi	r24, 0x01	; 1
 9d0:	36 c0       	rjmp	.+108    	; 0xa3e <ControllerStatusMessagesSend+0x22e>
 9d2:	82 30       	cpi	r24, 0x02	; 2
 9d4:	89 f5       	brne	.+98     	; 0xa38 <ControllerStatusMessagesSend+0x228>
 9d6:	ec e0       	ldi	r30, 0x0C	; 12
 9d8:	f1 e0       	ldi	r31, 0x01	; 1
 9da:	84 a9       	ldd	r24, Z+52	; 0x34
 9dc:	95 a9       	ldd	r25, Z+53	; 0x35
 9de:	d8 01       	movw	r26, r16
 9e0:	8c 93       	st	X, r24
 9e2:	84 a9       	ldd	r24, Z+52	; 0x34
 9e4:	95 a9       	ldd	r25, Z+53	; 0x35
 9e6:	11 96       	adiw	r26, 0x01	; 1
 9e8:	9c 93       	st	X, r25
 9ea:	11 97       	sbiw	r26, 0x01	; 1
 9ec:	82 a9       	ldd	r24, Z+50	; 0x32
 9ee:	93 a9       	ldd	r25, Z+51	; 0x33
 9f0:	12 96       	adiw	r26, 0x02	; 2
 9f2:	8c 93       	st	X, r24
 9f4:	12 97       	sbiw	r26, 0x02	; 2
 9f6:	82 a9       	ldd	r24, Z+50	; 0x32
 9f8:	93 a9       	ldd	r25, Z+51	; 0x33
 9fa:	13 96       	adiw	r26, 0x03	; 3
 9fc:	9c 93       	st	X, r25
 9fe:	13 97       	sbiw	r26, 0x03	; 3
 a00:	86 a9       	ldd	r24, Z+54	; 0x36
 a02:	97 a9       	ldd	r25, Z+55	; 0x37
 a04:	14 96       	adiw	r26, 0x04	; 4
 a06:	8c 93       	st	X, r24
 a08:	14 97       	sbiw	r26, 0x04	; 4
 a0a:	86 a9       	ldd	r24, Z+54	; 0x36
 a0c:	97 a9       	ldd	r25, Z+55	; 0x37
 a0e:	15 96       	adiw	r26, 0x05	; 5
 a10:	9c 93       	st	X, r25
 a12:	15 97       	sbiw	r26, 0x05	; 5
 a14:	16 96       	adiw	r26, 0x06	; 6
 a16:	1c 92       	st	X, r1
 a18:	16 97       	sbiw	r26, 0x06	; 6
 a1a:	17 96       	adiw	r26, 0x07	; 7
 a1c:	1c 92       	st	X, r1
 a1e:	48 e0       	ldi	r20, 0x08	; 8
 a20:	b8 01       	movw	r22, r16
 a22:	83 e0       	ldi	r24, 0x03	; 3
 a24:	0e 94 65 24 	call	0x48ca	; 0x48ca <CANSendMessage>
 a28:	88 23       	and	r24, r24
 a2a:	41 f0       	breq	.+16     	; 0xa3c <ControllerStatusMessagesSend+0x22c>
 a2c:	81 e0       	ldi	r24, 0x01	; 1
 a2e:	07 c0       	rjmp	.+14     	; 0xa3e <ControllerStatusMessagesSend+0x22e>
 a30:	80 e0       	ldi	r24, 0x00	; 0
 a32:	05 c0       	rjmp	.+10     	; 0xa3e <ControllerStatusMessagesSend+0x22e>
 a34:	80 e0       	ldi	r24, 0x00	; 0
 a36:	03 c0       	rjmp	.+6      	; 0xa3e <ControllerStatusMessagesSend+0x22e>
 a38:	81 e0       	ldi	r24, 0x01	; 1
 a3a:	01 c0       	rjmp	.+2      	; 0xa3e <ControllerStatusMessagesSend+0x22e>
 a3c:	80 e0       	ldi	r24, 0x00	; 0
 a3e:	88 23       	and	r24, r24
 a40:	81 f0       	breq	.+32     	; 0xa62 <ControllerStatusMessagesSend+0x252>
 a42:	80 91 73 0b 	lds	r24, 0x0B73	; 0x800b73 <sg_u8ControllerStatusMsgCount>
 a46:	8f 5f       	subi	r24, 0xFF	; 255
 a48:	80 93 73 0b 	sts	0x0B73, r24	; 0x800b73 <sg_u8ControllerStatusMsgCount>
 a4c:	83 30       	cpi	r24, 0x03	; 3
 a4e:	48 f0       	brcs	.+18     	; 0xa62 <ControllerStatusMessagesSend+0x252>
 a50:	10 92 73 0b 	sts	0x0B73, r1	; 0x800b73 <sg_u8ControllerStatusMsgCount>
 a54:	10 92 16 05 	sts	0x0516, r1	; 0x800516 <sg_bSendModuleControllerStatus>
 a58:	10 92 7b 0b 	sts	0x0B7B, r1	; 0x800b7b <sg_bIgnoreStatusRequests>
 a5c:	81 e0       	ldi	r24, 0x01	; 1
 a5e:	80 93 13 05 	sts	0x0513, r24	; 0x800513 <sg_bSendCellCommStatus>
 a62:	80 91 15 05 	lds	r24, 0x0515	; 0x800515 <sg_bSendCellStatus>
 a66:	88 23       	and	r24, r24
 a68:	09 f4       	brne	.+2      	; 0xa6c <ControllerStatusMessagesSend+0x25c>
 a6a:	7d c0       	rjmp	.+250    	; 0xb66 <ControllerStatusMessagesSend+0x356>
 a6c:	1c 82       	std	Y+4, r1	; 0x04
 a6e:	1b 82       	std	Y+3, r1	; 0x03
 a70:	1a 82       	std	Y+2, r1	; 0x02
 a72:	19 82       	std	Y+1, r1	; 0x01
 a74:	e0 90 1b 05 	lds	r14, 0x051B	; 0x80051b <sg_u8CellStatus>
 a78:	f0 90 3b 01 	lds	r15, 0x013B	; 0x80013b <sg_sFrame+0x2f>
 a7c:	ef 14       	cp	r14, r15
 a7e:	30 f5       	brcc	.+76     	; 0xacc <ControllerStatusMessagesSend+0x2bc>
 a80:	ff 20       	and	r15, r15
 a82:	21 f1       	breq	.+72     	; 0xacc <ControllerStatusMessagesSend+0x2bc>
 a84:	ef 2d       	mov	r30, r15
 a86:	ee 19       	sub	r30, r14
 a88:	e1 50       	subi	r30, 0x01	; 1
 a8a:	ec 36       	cpi	r30, 0x6C	; 108
 a8c:	f8 f4       	brcc	.+62     	; 0xacc <ControllerStatusMessagesSend+0x2bc>
 a8e:	f0 e0       	ldi	r31, 0x00	; 0
 a90:	77 96       	adiw	r30, 0x17	; 23
 a92:	ee 0f       	add	r30, r30
 a94:	ff 1f       	adc	r31, r31
 a96:	ee 0f       	add	r30, r30
 a98:	ff 1f       	adc	r31, r31
 a9a:	e4 5f       	subi	r30, 0xF4	; 244
 a9c:	fe 4f       	sbci	r31, 0xFE	; 254
 a9e:	83 81       	ldd	r24, Z+3	; 0x03
 aa0:	94 81       	ldd	r25, Z+4	; 0x04
 aa2:	c5 80       	ldd	r12, Z+5	; 0x05
 aa4:	d6 80       	ldd	r13, Z+6	; 0x06
 aa6:	be 01       	movw	r22, r28
 aa8:	6d 5f       	subi	r22, 0xFD	; 253
 aaa:	7f 4f       	sbci	r23, 0xFF	; 255
 aac:	0e 94 6d 20 	call	0x40da	; 0x40da <CellDataConvertVoltage>
 ab0:	81 11       	cpse	r24, r1
 ab2:	02 c0       	rjmp	.+4      	; 0xab8 <ControllerStatusMessagesSend+0x2a8>
 ab4:	1c 82       	std	Y+4, r1	; 0x04
 ab6:	1b 82       	std	Y+3, r1	; 0x03
 ab8:	be 01       	movw	r22, r28
 aba:	6f 5f       	subi	r22, 0xFF	; 255
 abc:	7f 4f       	sbci	r23, 0xFF	; 255
 abe:	c6 01       	movw	r24, r12
 ac0:	0e 94 d9 1f 	call	0x3fb2	; 0x3fb2 <CellDataConvertTemperature>
 ac4:	81 11       	cpse	r24, r1
 ac6:	02 c0       	rjmp	.+4      	; 0xacc <ControllerStatusMessagesSend+0x2bc>
 ac8:	1a 82       	std	Y+2, r1	; 0x02
 aca:	19 82       	std	Y+1, r1	; 0x01
 acc:	f8 01       	movw	r30, r16
 ace:	e0 82       	st	Z, r14
 ad0:	f1 82       	std	Z+1, r15	; 0x01
 ad2:	99 81       	ldd	r25, Y+1	; 0x01
 ad4:	8a 81       	ldd	r24, Y+2	; 0x02
 ad6:	92 83       	std	Z+2, r25	; 0x02
 ad8:	83 83       	std	Z+3, r24	; 0x03
 ada:	2b 81       	ldd	r18, Y+3	; 0x03
 adc:	3c 81       	ldd	r19, Y+4	; 0x04
 ade:	24 83       	std	Z+4, r18	; 0x04
 ae0:	35 83       	std	Z+5, r19	; 0x05
 ae2:	21 15       	cp	r18, r1
 ae4:	31 05       	cpc	r19, r1
 ae6:	59 f0       	breq	.+22     	; 0xafe <ControllerStatusMessagesSend+0x2ee>
 ae8:	c9 01       	movw	r24, r18
 aea:	64 e0       	ldi	r22, 0x04	; 4
 aec:	70 e1       	ldi	r23, 0x10	; 16
 aee:	0e 94 3e 25 	call	0x4a7c	; 0x4a7c <__udivmodhi4>
 af2:	84 e6       	ldi	r24, 0x64	; 100
 af4:	68 9f       	mul	r22, r24
 af6:	60 2d       	mov	r22, r0
 af8:	11 24       	eor	r1, r1
 afa:	66 83       	std	Z+6, r22	; 0x06
 afc:	01 c0       	rjmp	.+2      	; 0xb00 <ControllerStatusMessagesSend+0x2f0>
 afe:	16 82       	std	Z+6, r1	; 0x06
 b00:	ec e0       	ldi	r30, 0x0C	; 12
 b02:	f1 e0       	ldi	r31, 0x01	; 1
 b04:	40 ad       	ldd	r20, Z+56	; 0x38
 b06:	51 ad       	ldd	r21, Z+57	; 0x39
 b08:	82 ad       	ldd	r24, Z+58	; 0x3a
 b0a:	93 ad       	ldd	r25, Z+59	; 0x3b
 b0c:	84 17       	cp	r24, r20
 b0e:	95 07       	cpc	r25, r21
 b10:	98 f4       	brcc	.+38     	; 0xb38 <ControllerStatusMessagesSend+0x328>
 b12:	21 15       	cp	r18, r1
 b14:	31 05       	cpc	r19, r1
 b16:	81 f0       	breq	.+32     	; 0xb38 <ControllerStatusMessagesSend+0x328>
 b18:	60 ad       	ldd	r22, Z+56	; 0x38
 b1a:	71 ad       	ldd	r23, Z+57	; 0x39
 b1c:	82 ad       	ldd	r24, Z+58	; 0x3a
 b1e:	93 ad       	ldd	r25, Z+59	; 0x3b
 b20:	68 1b       	sub	r22, r24
 b22:	79 0b       	sbc	r23, r25
 b24:	c9 01       	movw	r24, r18
 b26:	0e 94 3e 25 	call	0x4a7c	; 0x4a7c <__udivmodhi4>
 b2a:	84 e6       	ldi	r24, 0x64	; 100
 b2c:	68 9f       	mul	r22, r24
 b2e:	60 2d       	mov	r22, r0
 b30:	11 24       	eor	r1, r1
 b32:	f8 01       	movw	r30, r16
 b34:	67 83       	std	Z+7, r22	; 0x07
 b36:	03 c0       	rjmp	.+6      	; 0xb3e <ControllerStatusMessagesSend+0x32e>
 b38:	d8 01       	movw	r26, r16
 b3a:	17 96       	adiw	r26, 0x07	; 7
 b3c:	1c 92       	st	X, r1
 b3e:	48 e0       	ldi	r20, 0x08	; 8
 b40:	b8 01       	movw	r22, r16
 b42:	84 e0       	ldi	r24, 0x04	; 4
 b44:	0e 94 65 24 	call	0x48ca	; 0x48ca <CANSendMessage>
 b48:	88 23       	and	r24, r24
 b4a:	69 f0       	breq	.+26     	; 0xb66 <ControllerStatusMessagesSend+0x356>
 b4c:	80 91 1b 05 	lds	r24, 0x051B	; 0x80051b <sg_u8CellStatus>
 b50:	8f 5f       	subi	r24, 0xFF	; 255
 b52:	80 93 1b 05 	sts	0x051B, r24	; 0x80051b <sg_u8CellStatus>
 b56:	90 91 1b 05 	lds	r25, 0x051B	; 0x80051b <sg_u8CellStatus>
 b5a:	80 91 1c 05 	lds	r24, 0x051C	; 0x80051c <sg_u8CellStatusTarget>
 b5e:	98 17       	cp	r25, r24
 b60:	10 f0       	brcs	.+4      	; 0xb66 <ControllerStatusMessagesSend+0x356>
 b62:	10 92 15 05 	sts	0x0515, r1	; 0x800515 <sg_bSendCellStatus>
 b66:	80 91 13 05 	lds	r24, 0x0513	; 0x800513 <sg_bSendCellCommStatus>
 b6a:	88 23       	and	r24, r24
 b6c:	89 f1       	breq	.+98     	; 0xbd0 <ControllerStatusMessagesSend+0x3c0>
 b6e:	ec e0       	ldi	r30, 0x0C	; 12
 b70:	f1 e0       	ldi	r31, 0x01	; 1
 b72:	83 89       	ldd	r24, Z+19	; 0x13
 b74:	d8 01       	movw	r26, r16
 b76:	8c 93       	st	X, r24
 b78:	84 89       	ldd	r24, Z+20	; 0x14
 b7a:	11 96       	adiw	r26, 0x01	; 1
 b7c:	8c 93       	st	X, r24
 b7e:	11 97       	sbiw	r26, 0x01	; 1
 b80:	80 a5       	ldd	r24, Z+40	; 0x28
 b82:	91 a5       	ldd	r25, Z+41	; 0x29
 b84:	12 96       	adiw	r26, 0x02	; 2
 b86:	8c 93       	st	X, r24
 b88:	12 97       	sbiw	r26, 0x02	; 2
 b8a:	80 a5       	ldd	r24, Z+40	; 0x28
 b8c:	91 a5       	ldd	r25, Z+41	; 0x29
 b8e:	13 96       	adiw	r26, 0x03	; 3
 b90:	9c 93       	st	X, r25
 b92:	13 97       	sbiw	r26, 0x03	; 3
 b94:	86 a5       	ldd	r24, Z+46	; 0x2e
 b96:	14 96       	adiw	r26, 0x04	; 4
 b98:	8c 93       	st	X, r24
 b9a:	14 97       	sbiw	r26, 0x04	; 4
 b9c:	82 a5       	ldd	r24, Z+42	; 0x2a
 b9e:	8f 3f       	cpi	r24, 0xFF	; 255
 ba0:	31 f0       	breq	.+12     	; 0xbae <ControllerStatusMessagesSend+0x39e>
 ba2:	85 a5       	ldd	r24, Z+45	; 0x2d
 ba4:	92 a5       	ldd	r25, Z+42	; 0x2a
 ba6:	89 1b       	sub	r24, r25
 ba8:	15 96       	adiw	r26, 0x05	; 5
 baa:	8c 93       	st	X, r24
 bac:	03 c0       	rjmp	.+6      	; 0xbb4 <ControllerStatusMessagesSend+0x3a4>
 bae:	8f ef       	ldi	r24, 0xFF	; 255
 bb0:	f8 01       	movw	r30, r16
 bb2:	85 83       	std	Z+5, r24	; 0x05
 bb4:	d8 01       	movw	r26, r16
 bb6:	16 96       	adiw	r26, 0x06	; 6
 bb8:	1c 92       	st	X, r1
 bba:	16 97       	sbiw	r26, 0x06	; 6
 bbc:	17 96       	adiw	r26, 0x07	; 7
 bbe:	1c 92       	st	X, r1
 bc0:	48 e0       	ldi	r20, 0x08	; 8
 bc2:	b8 01       	movw	r22, r16
 bc4:	86 e0       	ldi	r24, 0x06	; 6
 bc6:	0e 94 65 24 	call	0x48ca	; 0x48ca <CANSendMessage>
 bca:	81 11       	cpse	r24, r1
 bcc:	10 92 13 05 	sts	0x0513, r1	; 0x800513 <sg_bSendCellCommStatus>
 bd0:	80 91 14 05 	lds	r24, 0x0514	; 0x800514 <sg_bSendHardwareDetail>
 bd4:	88 23       	and	r24, r24
 bd6:	09 f1       	breq	.+66     	; 0xc1a <ControllerStatusMessagesSend+0x40a>
 bd8:	b8 01       	movw	r22, r16
 bda:	c8 01       	movw	r24, r16
 bdc:	02 96       	adiw	r24, 0x02	; 2
 bde:	0e 94 e6 1b 	call	0x37cc	; 0x37cc <CurrentThresholdsGet>
 be2:	a0 91 21 01 	lds	r26, 0x0121	; 0x800121 <sg_sFrame+0x15>
 be6:	b0 e0       	ldi	r27, 0x00	; 0
 be8:	28 e9       	ldi	r18, 0x98	; 152
 bea:	36 e1       	ldi	r19, 0x16	; 22
 bec:	46 e0       	ldi	r20, 0x06	; 6
 bee:	50 e0       	ldi	r21, 0x00	; 0
 bf0:	0e 94 75 27 	call	0x4eea	; 0x4eea <__muluhisi3>
 bf4:	2c ed       	ldi	r18, 0xDC	; 220
 bf6:	35 e0       	ldi	r19, 0x05	; 5
 bf8:	40 e0       	ldi	r20, 0x00	; 0
 bfa:	50 e0       	ldi	r21, 0x00	; 0
 bfc:	0e 94 e0 22 	call	0x45c0	; 0x45c0 <__udivmodsi4>
 c00:	f8 01       	movw	r30, r16
 c02:	24 83       	std	Z+4, r18	; 0x04
 c04:	35 83       	std	Z+5, r19	; 0x05
 c06:	16 82       	std	Z+6, r1	; 0x06
 c08:	17 82       	std	Z+7, r1	; 0x07
 c0a:	48 e0       	ldi	r20, 0x08	; 8
 c0c:	b8 01       	movw	r22, r16
 c0e:	85 e0       	ldi	r24, 0x05	; 5
 c10:	0e 94 65 24 	call	0x48ca	; 0x48ca <CANSendMessage>
 c14:	81 11       	cpse	r24, r1
 c16:	10 92 14 05 	sts	0x0514, r1	; 0x800514 <sg_bSendHardwareDetail>
 c1a:	0f 90       	pop	r0
 c1c:	0f 90       	pop	r0
 c1e:	0f 90       	pop	r0
 c20:	0f 90       	pop	r0
 c22:	df 91       	pop	r29
 c24:	cf 91       	pop	r28
 c26:	1f 91       	pop	r17
 c28:	0f 91       	pop	r16
 c2a:	ff 90       	pop	r15
 c2c:	ef 90       	pop	r14
 c2e:	df 90       	pop	r13
 c30:	cf 90       	pop	r12
 c32:	08 95       	ret

Disassembly of section .text.CellStringProcess:

00000f0c <CellStringProcess>:
     f0c:	3f 92       	push	r3
     f0e:	4f 92       	push	r4
     f10:	5f 92       	push	r5
     f12:	6f 92       	push	r6
     f14:	7f 92       	push	r7
     f16:	8f 92       	push	r8
     f18:	9f 92       	push	r9
     f1a:	af 92       	push	r10
     f1c:	bf 92       	push	r11
     f1e:	cf 92       	push	r12
     f20:	df 92       	push	r13
     f22:	ef 92       	push	r14
     f24:	ff 92       	push	r15
     f26:	0f 93       	push	r16
     f28:	1f 93       	push	r17
     f2a:	cf 93       	push	r28
     f2c:	df 93       	push	r29
     f2e:	00 d0       	rcall	.+0      	; 0xf30 <CellStringProcess+0x24>
     f30:	00 d0       	rcall	.+0      	; 0xf32 <CellStringProcess+0x26>
     f32:	00 d0       	rcall	.+0      	; 0xf34 <CellStringProcess+0x28>
     f34:	cd b7       	in	r28, 0x3d	; 61
     f36:	de b7       	in	r29, 0x3e	; 62
     f38:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <sg_sFrame+0x2b>
     f3c:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <sg_sFrame+0x2c>
     f40:	89 2b       	or	r24, r25
     f42:	09 f4       	brne	.+2      	; 0xf46 <CellStringProcess+0x3a>
     f44:	10 c1       	rjmp	.+544    	; 0x1166 <__stack+0x67>
     f46:	ec e0       	ldi	r30, 0x0C	; 12
     f48:	f1 e0       	ldi	r31, 0x01	; 1
     f4a:	8f ef       	ldi	r24, 0xFF	; 255
     f4c:	82 a7       	std	Z+42, r24	; 0x2a
     f4e:	93 89       	ldd	r25, Z+19	; 0x13
     f50:	85 a5       	ldd	r24, Z+45	; 0x2d
     f52:	89 17       	cp	r24, r25
     f54:	28 f4       	brcc	.+10     	; 0xf60 <CellStringProcess+0x54>
     f56:	85 a5       	ldd	r24, Z+45	; 0x2d
     f58:	83 8b       	std	Z+19, r24	; 0x13
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	80 93 13 05 	sts	0x0513, r24	; 0x800513 <sg_bSendCellCommStatus>
     f60:	ec e0       	ldi	r30, 0x0C	; 12
     f62:	f1 e0       	ldi	r31, 0x01	; 1
     f64:	94 89       	ldd	r25, Z+20	; 0x14
     f66:	85 a5       	ldd	r24, Z+45	; 0x2d
     f68:	98 17       	cp	r25, r24
     f6a:	28 f4       	brcc	.+10     	; 0xf76 <CellStringProcess+0x6a>
     f6c:	85 a5       	ldd	r24, Z+45	; 0x2d
     f6e:	84 8b       	std	Z+20, r24	; 0x14
     f70:	81 e0       	ldi	r24, 0x01	; 1
     f72:	80 93 13 05 	sts	0x0513, r24	; 0x800513 <sg_bSendCellCommStatus>
     f76:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <sg_sFrame+0x2b>
     f7a:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <sg_sFrame+0x2c>
     f7e:	83 70       	andi	r24, 0x03	; 3
     f80:	99 27       	eor	r25, r25
     f82:	89 2b       	or	r24, r25
     f84:	61 f0       	breq	.+24     	; 0xf9e <CellStringProcess+0x92>
     f86:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <sg_sFrame+0x2e>
     f8a:	8f 3f       	cpi	r24, 0xFF	; 255
     f8c:	41 f0       	breq	.+16     	; 0xf9e <CellStringProcess+0x92>
     f8e:	ec e0       	ldi	r30, 0x0C	; 12
     f90:	f1 e0       	ldi	r31, 0x01	; 1
     f92:	86 a5       	ldd	r24, Z+46	; 0x2e
     f94:	8f 5f       	subi	r24, 0xFF	; 255
     f96:	86 a7       	std	Z+46, r24	; 0x2e
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	80 93 13 05 	sts	0x0513, r24	; 0x800513 <sg_bSendCellCommStatus>
     f9e:	ec e0       	ldi	r30, 0x0C	; 12
     fa0:	f1 e0       	ldi	r31, 0x01	; 1
     fa2:	11 ae       	std	Z+57, r1	; 0x39
     fa4:	10 ae       	std	Z+56, r1	; 0x38
     fa6:	8f ef       	ldi	r24, 0xFF	; 255
     fa8:	9f ef       	ldi	r25, 0xFF	; 255
     faa:	93 af       	std	Z+59, r25	; 0x3b
     fac:	82 af       	std	Z+58, r24	; 0x3a
     fae:	15 ae       	std	Z+61, r1	; 0x3d
     fb0:	14 ae       	std	Z+60, r1	; 0x3c
     fb2:	80 e0       	ldi	r24, 0x00	; 0
     fb4:	90 e8       	ldi	r25, 0x80	; 128
     fb6:	93 ab       	std	Z+51, r25	; 0x33
     fb8:	82 ab       	std	Z+50, r24	; 0x32
     fba:	8f ef       	ldi	r24, 0xFF	; 255
     fbc:	9f e7       	ldi	r25, 0x7F	; 127
     fbe:	95 ab       	std	Z+53, r25	; 0x35
     fc0:	84 ab       	std	Z+52, r24	; 0x34
     fc2:	17 aa       	std	Z+55, r1	; 0x37
     fc4:	16 aa       	std	Z+54, r1	; 0x36
     fc6:	d1 2c       	mov	r13, r1
     fc8:	31 2c       	mov	r3, r1
     fca:	c1 2c       	mov	r12, r1
     fcc:	41 2c       	mov	r4, r1
     fce:	51 2c       	mov	r5, r1
     fd0:	32 01       	movw	r6, r4
     fd2:	81 2c       	mov	r8, r1
     fd4:	91 2c       	mov	r9, r1
     fd6:	54 01       	movw	r10, r8
     fd8:	2f ef       	ldi	r18, 0xFF	; 255
     fda:	3f e7       	ldi	r19, 0x7F	; 127
     fdc:	3e 83       	std	Y+6, r19	; 0x06
     fde:	2d 83       	std	Y+5, r18	; 0x05
     fe0:	80 e0       	ldi	r24, 0x00	; 0
     fe2:	90 e8       	ldi	r25, 0x80	; 128
     fe4:	9c 83       	std	Y+4, r25	; 0x04
     fe6:	8b 83       	std	Y+3, r24	; 0x03
     fe8:	6b c0       	rjmp	.+214    	; 0x10c0 <__DATA_REGION_LENGTH__+0xc0>
     fea:	0d 2d       	mov	r16, r13
     fec:	10 e0       	ldi	r17, 0x00	; 0
     fee:	f8 01       	movw	r30, r16
     ff0:	77 96       	adiw	r30, 0x17	; 23
     ff2:	ee 0f       	add	r30, r30
     ff4:	ff 1f       	adc	r31, r31
     ff6:	ee 0f       	add	r30, r30
     ff8:	ff 1f       	adc	r31, r31
     ffa:	e4 5f       	subi	r30, 0xF4	; 244
     ffc:	fe 4f       	sbci	r31, 0xFE	; 254
     ffe:	83 81       	ldd	r24, Z+3	; 0x03
    1000:	94 81       	ldd	r25, Z+4	; 0x04
    1002:	9a 83       	std	Y+2, r25	; 0x02
    1004:	89 83       	std	Y+1, r24	; 0x01
    1006:	e5 80       	ldd	r14, Z+5	; 0x05
    1008:	f6 80       	ldd	r15, Z+6	; 0x06
    100a:	60 e0       	ldi	r22, 0x00	; 0
    100c:	70 e0       	ldi	r23, 0x00	; 0
    100e:	c7 01       	movw	r24, r14
    1010:	0e 94 d9 1f 	call	0x3fb2	; 0x3fb2 <CellDataConvertTemperature>
    1014:	88 23       	and	r24, r24
    1016:	f1 f0       	breq	.+60     	; 0x1054 <__DATA_REGION_LENGTH__+0x54>
    1018:	f4 fe       	sbrs	r15, 4
    101a:	03 c0       	rjmp	.+6      	; 0x1022 <__DATA_REGION_LENGTH__+0x22>
    101c:	c7 01       	movw	r24, r14
    101e:	90 6f       	ori	r25, 0xF0	; 240
    1020:	02 c0       	rjmp	.+4      	; 0x1026 <__DATA_REGION_LENGTH__+0x26>
    1022:	c7 01       	movw	r24, r14
    1024:	9f 77       	andi	r25, 0x7F	; 127
    1026:	2b 81       	ldd	r18, Y+3	; 0x03
    1028:	3c 81       	ldd	r19, Y+4	; 0x04
    102a:	28 17       	cp	r18, r24
    102c:	39 07       	cpc	r19, r25
    102e:	14 f4       	brge	.+4      	; 0x1034 <__DATA_REGION_LENGTH__+0x34>
    1030:	9c 83       	std	Y+4, r25	; 0x04
    1032:	8b 83       	std	Y+3, r24	; 0x03
    1034:	2d 81       	ldd	r18, Y+5	; 0x05
    1036:	3e 81       	ldd	r19, Y+6	; 0x06
    1038:	82 17       	cp	r24, r18
    103a:	93 07       	cpc	r25, r19
    103c:	14 f4       	brge	.+4      	; 0x1042 <__DATA_REGION_LENGTH__+0x42>
    103e:	9e 83       	std	Y+6, r25	; 0x06
    1040:	8d 83       	std	Y+5, r24	; 0x05
    1042:	09 2e       	mov	r0, r25
    1044:	00 0c       	add	r0, r0
    1046:	aa 0b       	sbc	r26, r26
    1048:	bb 0b       	sbc	r27, r27
    104a:	88 0e       	add	r8, r24
    104c:	99 1e       	adc	r9, r25
    104e:	aa 1e       	adc	r10, r26
    1050:	bb 1e       	adc	r11, r27
    1052:	33 94       	inc	r3
    1054:	f8 01       	movw	r30, r16
    1056:	77 96       	adiw	r30, 0x17	; 23
    1058:	ee 0f       	add	r30, r30
    105a:	ff 1f       	adc	r31, r31
    105c:	ee 0f       	add	r30, r30
    105e:	ff 1f       	adc	r31, r31
    1060:	e4 5f       	subi	r30, 0xF4	; 244
    1062:	fe 4f       	sbci	r31, 0xFE	; 254
    1064:	83 81       	ldd	r24, Z+3	; 0x03
    1066:	94 81       	ldd	r25, Z+4	; 0x04
    1068:	99 23       	and	r25, r25
    106a:	1c f4       	brge	.+6      	; 0x1072 <__DATA_REGION_LENGTH__+0x72>
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <sg_sFrame+0x27>
    1072:	be 01       	movw	r22, r28
    1074:	6f 5f       	subi	r22, 0xFF	; 255
    1076:	7f 4f       	sbci	r23, 0xFF	; 255
    1078:	89 81       	ldd	r24, Y+1	; 0x01
    107a:	9a 81       	ldd	r25, Y+2	; 0x02
    107c:	0e 94 6d 20 	call	0x40da	; 0x40da <CellDataConvertVoltage>
    1080:	88 23       	and	r24, r24
    1082:	e9 f0       	breq	.+58     	; 0x10be <__DATA_REGION_LENGTH__+0xbe>
    1084:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <sg_sFrame+0x38>
    1088:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <sg_sFrame+0x39>
    108c:	89 81       	ldd	r24, Y+1	; 0x01
    108e:	9a 81       	ldd	r25, Y+2	; 0x02
    1090:	28 17       	cp	r18, r24
    1092:	39 07       	cpc	r19, r25
    1094:	20 f4       	brcc	.+8      	; 0x109e <__DATA_REGION_LENGTH__+0x9e>
    1096:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <sg_sFrame+0x39>
    109a:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <sg_sFrame+0x38>
    109e:	20 91 46 01 	lds	r18, 0x0146	; 0x800146 <sg_sFrame+0x3a>
    10a2:	30 91 47 01 	lds	r19, 0x0147	; 0x800147 <sg_sFrame+0x3b>
    10a6:	82 17       	cp	r24, r18
    10a8:	93 07       	cpc	r25, r19
    10aa:	20 f4       	brcc	.+8      	; 0x10b4 <__DATA_REGION_LENGTH__+0xb4>
    10ac:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <sg_sFrame+0x3b>
    10b0:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <sg_sFrame+0x3a>
    10b4:	48 0e       	add	r4, r24
    10b6:	59 1e       	adc	r5, r25
    10b8:	61 1c       	adc	r6, r1
    10ba:	71 1c       	adc	r7, r1
    10bc:	c3 94       	inc	r12
    10be:	d3 94       	inc	r13
    10c0:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <sg_sFrame+0x2d>
    10c4:	d8 16       	cp	r13, r24
    10c6:	08 f4       	brcc	.+2      	; 0x10ca <__DATA_REGION_LENGTH__+0xca>
    10c8:	90 cf       	rjmp	.-224    	; 0xfea <CellStringProcess+0xde>
    10ca:	cc 20       	and	r12, r12
    10cc:	89 f1       	breq	.+98     	; 0x1130 <__stack+0x31>
    10ce:	ea e4       	ldi	r30, 0x4A	; 74
    10d0:	f1 e0       	ldi	r31, 0x01	; 1
    10d2:	40 82       	st	Z, r4
    10d4:	51 82       	std	Z+1, r5	; 0x01
    10d6:	62 82       	std	Z+2, r6	; 0x02
    10d8:	73 82       	std	Z+3, r7	; 0x03
    10da:	60 81       	ld	r22, Z
    10dc:	71 81       	ldd	r23, Z+1	; 0x01
    10de:	82 81       	ldd	r24, Z+2	; 0x02
    10e0:	93 81       	ldd	r25, Z+3	; 0x03
    10e2:	2c 2d       	mov	r18, r12
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	40 e0       	ldi	r20, 0x00	; 0
    10e8:	50 e0       	ldi	r21, 0x00	; 0
    10ea:	0e 94 e0 22 	call	0x45c0	; 0x45c0 <__udivmodsi4>
    10ee:	30 93 49 01 	sts	0x0149, r19	; 0x800149 <sg_sFrame+0x3d>
    10f2:	20 93 48 01 	sts	0x0148, r18	; 0x800148 <sg_sFrame+0x3c>
    10f6:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    10fa:	83 30       	cpi	r24, 0x03	; 3
    10fc:	c9 f0       	breq	.+50     	; 0x1130 <__stack+0x31>
    10fe:	80 91 11 05 	lds	r24, 0x0511	; 0x800511 <sg_bCellBalancedOnce>
    1102:	81 11       	cpse	r24, r1
    1104:	15 c0       	rjmp	.+42     	; 0x1130 <__stack+0x31>
    1106:	ec e0       	ldi	r30, 0x0C	; 12
    1108:	f1 e0       	ldi	r31, 0x01	; 1
    110a:	20 ad       	ldd	r18, Z+56	; 0x38
    110c:	31 ad       	ldd	r19, Z+57	; 0x39
    110e:	82 ad       	ldd	r24, Z+58	; 0x3a
    1110:	93 ad       	ldd	r25, Z+59	; 0x3b
    1112:	28 17       	cp	r18, r24
    1114:	39 07       	cpc	r19, r25
    1116:	60 f0       	brcs	.+24     	; 0x1130 <__stack+0x31>
    1118:	80 ad       	ldd	r24, Z+56	; 0x38
    111a:	91 ad       	ldd	r25, Z+57	; 0x39
    111c:	22 ad       	ldd	r18, Z+58	; 0x3a
    111e:	33 ad       	ldd	r19, Z+59	; 0x3b
    1120:	82 1b       	sub	r24, r18
    1122:	93 0b       	sbc	r25, r19
    1124:	80 34       	cpi	r24, 0x40	; 64
    1126:	91 05       	cpc	r25, r1
    1128:	18 f0       	brcs	.+6      	; 0x1130 <__stack+0x31>
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	80 93 12 05 	sts	0x0512, r24	; 0x800512 <sg_bCellBalanceReady>
    1130:	33 20       	and	r3, r3
    1132:	c9 f0       	breq	.+50     	; 0x1166 <__stack+0x67>
    1134:	23 2d       	mov	r18, r3
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	40 e0       	ldi	r20, 0x00	; 0
    113a:	50 e0       	ldi	r21, 0x00	; 0
    113c:	c5 01       	movw	r24, r10
    113e:	b4 01       	movw	r22, r8
    1140:	0e 94 7c 24 	call	0x48f8	; 0x48f8 <__divmodsi4>
    1144:	62 e4       	ldi	r22, 0x42	; 66
    1146:	71 e0       	ldi	r23, 0x01	; 1
    1148:	c9 01       	movw	r24, r18
    114a:	0e 94 d9 1f 	call	0x3fb2	; 0x3fb2 <CellDataConvertTemperature>
    114e:	6e e3       	ldi	r22, 0x3E	; 62
    1150:	71 e0       	ldi	r23, 0x01	; 1
    1152:	8b 81       	ldd	r24, Y+3	; 0x03
    1154:	9c 81       	ldd	r25, Y+4	; 0x04
    1156:	0e 94 d9 1f 	call	0x3fb2	; 0x3fb2 <CellDataConvertTemperature>
    115a:	60 e4       	ldi	r22, 0x40	; 64
    115c:	71 e0       	ldi	r23, 0x01	; 1
    115e:	8d 81       	ldd	r24, Y+5	; 0x05
    1160:	9e 81       	ldd	r25, Y+6	; 0x06
    1162:	0e 94 d9 1f 	call	0x3fb2	; 0x3fb2 <CellDataConvertTemperature>
    1166:	ec e0       	ldi	r30, 0x0C	; 12
    1168:	f1 e0       	ldi	r31, 0x01	; 1
    116a:	85 a5       	ldd	r24, Z+45	; 0x2d
    116c:	87 a7       	std	Z+47, r24	; 0x2f
    116e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <sg_bSDCardReady>
    1172:	88 23       	and	r24, r24
    1174:	49 f0       	breq	.+18     	; 0x1188 <__stack+0x89>
    1176:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    117a:	88 23       	and	r24, r24
    117c:	29 f0       	breq	.+10     	; 0x1188 <__stack+0x89>
    117e:	cf 01       	movw	r24, r30
    1180:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <STORE_WriteFrame>
    1184:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <sg_bSDCardReady>
    1188:	26 96       	adiw	r28, 0x06	; 6
    118a:	0f b6       	in	r0, 0x3f	; 63
    118c:	f8 94       	cli
    118e:	de bf       	out	0x3e, r29	; 62
    1190:	0f be       	out	0x3f, r0	; 63
    1192:	cd bf       	out	0x3d, r28	; 61
    1194:	df 91       	pop	r29
    1196:	cf 91       	pop	r28
    1198:	1f 91       	pop	r17
    119a:	0f 91       	pop	r16
    119c:	ff 90       	pop	r15
    119e:	ef 90       	pop	r14
    11a0:	df 90       	pop	r13
    11a2:	cf 90       	pop	r12
    11a4:	bf 90       	pop	r11
    11a6:	af 90       	pop	r10
    11a8:	9f 90       	pop	r9
    11aa:	8f 90       	pop	r8
    11ac:	7f 90       	pop	r7
    11ae:	6f 90       	pop	r6
    11b0:	5f 90       	pop	r5
    11b2:	4f 90       	pop	r4
    11b4:	3f 90       	pop	r3
    11b6:	08 95       	ret

Disassembly of section .text.Delay:

000043ee <Delay>:
    43ee:	ab 01       	movw	r20, r22
    43f0:	bc 01       	movw	r22, r24
    43f2:	4f 5f       	subi	r20, 0xFF	; 255
    43f4:	5f 4f       	sbci	r21, 0xFF	; 255
    43f6:	6f 4f       	sbci	r22, 0xFF	; 255
    43f8:	7f 4f       	sbci	r23, 0xFF	; 255
    43fa:	76 95       	lsr	r23
    43fc:	67 95       	ror	r22
    43fe:	57 95       	ror	r21
    4400:	47 95       	ror	r20
    4402:	96 b5       	in	r25, 0x26	; 38
    4404:	17 c0       	rjmp	.+46     	; 0x4434 <Delay+0x46>
    4406:	86 b5       	in	r24, 0x26	; 38
    4408:	98 17       	cp	r25, r24
    440a:	e9 f3       	breq	.-6      	; 0x4406 <Delay+0x18>
    440c:	26 b5       	in	r18, 0x26	; 38
    440e:	82 2f       	mov	r24, r18
    4410:	89 1b       	sub	r24, r25
    4412:	90 e0       	ldi	r25, 0x00	; 0
    4414:	a0 e0       	ldi	r26, 0x00	; 0
    4416:	b0 e0       	ldi	r27, 0x00	; 0
    4418:	48 17       	cp	r20, r24
    441a:	59 07       	cpc	r21, r25
    441c:	6a 07       	cpc	r22, r26
    441e:	7b 07       	cpc	r23, r27
    4420:	28 f0       	brcs	.+10     	; 0x442c <Delay+0x3e>
    4422:	48 1b       	sub	r20, r24
    4424:	59 0b       	sbc	r21, r25
    4426:	6a 0b       	sbc	r22, r26
    4428:	7b 0b       	sbc	r23, r27
    442a:	03 c0       	rjmp	.+6      	; 0x4432 <Delay+0x44>
    442c:	40 e0       	ldi	r20, 0x00	; 0
    442e:	50 e0       	ldi	r21, 0x00	; 0
    4430:	ba 01       	movw	r22, r20
    4432:	92 2f       	mov	r25, r18
    4434:	41 15       	cp	r20, r1
    4436:	51 05       	cpc	r21, r1
    4438:	61 05       	cpc	r22, r1
    443a:	71 05       	cpc	r23, r1
    443c:	21 f7       	brne	.-56     	; 0x4406 <Delay+0x18>
    443e:	08 95       	ret

Disassembly of section .text.PlatformAssert:

0000497e <PlatformAssert>:



void PlatformAssert( const char* peFilename, const int s32LineNumber )
{
	DebugOut("Assert %s: %d\n", peFilename, s32LineNumber);
    497e:	5f 93       	push	r21
    4980:	4f 93       	push	r20
    4982:	8f 93       	push	r24
    4984:	7f 93       	push	r23
    4986:	6f 93       	push	r22
    4988:	88 e3       	ldi	r24, 0x38	; 56
    498a:	92 e0       	ldi	r25, 0x02	; 2
    498c:	a0 e0       	ldi	r26, 0x00	; 0
    498e:	af 93       	push	r26
    4990:	9f 93       	push	r25
    4992:	8f 93       	push	r24
    4994:	0e 94 ec 27 	call	0x4fd8	; 0x4fd8 <DebugOut>
	
//	while(1);
}
    4998:	8d b7       	in	r24, 0x3d	; 61
    499a:	9e b7       	in	r25, 0x3e	; 62
    499c:	08 96       	adiw	r24, 0x08	; 8
    499e:	0f b6       	in	r0, 0x3f	; 63
    49a0:	f8 94       	cli
    49a2:	9e bf       	out	0x3e, r25	; 62
    49a4:	0f be       	out	0x3f, r0	; 63
    49a6:	8d bf       	out	0x3d, r24	; 61
    49a8:	08 95       	ret

Disassembly of section .text.ModuleControllerStateHandle:

000018c8 <ModuleControllerStateHandle>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    18c8:	1f 93       	push	r17
    18ca:	cf 93       	push	r28
    18cc:	df 93       	push	r29
    18ce:	d0 91 06 01 	lds	r29, 0x0106	; 0x800106 <sg_eModuleControllerStateTarget>
    18d2:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <sg_eModuleControllerStateMax>
    18d6:	8d 17       	cp	r24, r29
    18d8:	30 f0       	brcs	.+12     	; 0x18e6 <ModuleControllerStateHandle+0x1e>
    18da:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    18de:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <sg_eModuleControllerStateMax>
    18e2:	89 17       	cp	r24, r25
    18e4:	10 f4       	brcc	.+4      	; 0x18ea <ModuleControllerStateHandle+0x22>
    18e6:	d0 91 05 01 	lds	r29, 0x0105	; 0x800105 <sg_eModuleControllerStateMax>
    18ea:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    18ee:	d8 17       	cp	r29, r24
    18f0:	09 f4       	brne	.+2      	; 0x18f4 <ModuleControllerStateHandle+0x2c>
    18f2:	f5 c0       	rjmp	.+490    	; 0x1ade <ModuleControllerStateHandle+0x216>
    18f4:	d2 30       	cpi	r29, 0x02	; 2
    18f6:	09 f4       	brne	.+2      	; 0x18fa <ModuleControllerStateHandle+0x32>
    18f8:	72 c0       	rjmp	.+228    	; 0x19de <ModuleControllerStateHandle+0x116>
    18fa:	28 f4       	brcc	.+10     	; 0x1906 <ModuleControllerStateHandle+0x3e>
    18fc:	dd 23       	and	r29, r29
    18fe:	89 f0       	breq	.+34     	; 0x1922 <ModuleControllerStateHandle+0x5a>
    1900:	d1 30       	cpi	r29, 0x01	; 1
    1902:	e1 f1       	breq	.+120    	; 0x197c <ModuleControllerStateHandle+0xb4>
    1904:	e0 c0       	rjmp	.+448    	; 0x1ac6 <ModuleControllerStateHandle+0x1fe>
    1906:	d3 30       	cpi	r29, 0x03	; 3
    1908:	09 f4       	brne	.+2      	; 0x190c <ModuleControllerStateHandle+0x44>
    190a:	a9 c0       	rjmp	.+338    	; 0x1a5e <ModuleControllerStateHandle+0x196>
    190c:	d5 30       	cpi	r29, 0x05	; 5
    190e:	09 f0       	breq	.+2      	; 0x1912 <ModuleControllerStateHandle+0x4a>
    1910:	da c0       	rjmp	.+436    	; 0x1ac6 <ModuleControllerStateHandle+0x1fe>
    1912:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <sg_eModuleControllerStateCurrent>
    1916:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <sg_eModuleControllerStateTarget>
    191a:	d0 91 07 01 	lds	r29, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    191e:	0e 94 08 28 	call	0x5010	; 0x5010 <ADCSetPowerOn>
    1922:	88 b1       	in	r24, 0x08	; 8
    1924:	8f 7e       	andi	r24, 0xEF	; 239
    1926:	88 b9       	out	0x08, r24	; 8
    1928:	68 e8       	ldi	r22, 0x88	; 136
    192a:	73 e1       	ldi	r23, 0x13	; 19
    192c:	80 e0       	ldi	r24, 0x00	; 0
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	0e 94 f7 21 	call	0x43ee	; 0x43ee <Delay>
    1934:	8e b1       	in	r24, 0x0e	; 14
    1936:	8d 7f       	andi	r24, 0xFD	; 253
    1938:	8e b9       	out	0x0e, r24	; 14
    193a:	68 e8       	ldi	r22, 0x88	; 136
    193c:	73 e1       	ldi	r23, 0x13	; 19
    193e:	80 e0       	ldi	r24, 0x00	; 0
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	0e 94 f7 21 	call	0x43ee	; 0x43ee <Delay>
    1946:	eb e6       	ldi	r30, 0x6B	; 107
    1948:	f0 e0       	ldi	r31, 0x00	; 0
    194a:	80 81       	ld	r24, Z
    194c:	8d 7f       	andi	r24, 0xFD	; 253
    194e:	80 83       	st	Z, r24
    1950:	e8 e6       	ldi	r30, 0x68	; 104
    1952:	f0 e0       	ldi	r31, 0x00	; 0
    1954:	80 81       	ld	r24, Z
    1956:	8d 7f       	andi	r24, 0xFD	; 253
    1958:	80 83       	st	Z, r24
    195a:	81 e0       	ldi	r24, 0x01	; 1
    195c:	80 93 12 05 	sts	0x0512, r24	; 0x800512 <sg_bCellBalanceReady>
    1960:	10 92 11 05 	sts	0x0511, r1	; 0x800511 <sg_bCellBalancedOnce>
    1964:	10 92 10 05 	sts	0x0510, r1	; 0x800510 <sg_bStopDischarge>
    1968:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <sg_bSDCardReady>
    196c:	88 23       	and	r24, r24
    196e:	09 f4       	brne	.+2      	; 0x1972 <ModuleControllerStateHandle+0xaa>
    1970:	b2 c0       	rjmp	.+356    	; 0x1ad6 <ModuleControllerStateHandle+0x20e>
    1972:	0e 94 f6 20 	call	0x41ec	; 0x41ec <STORE_EndSession>
    1976:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <sg_bSDCardReady>
    197a:	ad c0       	rjmp	.+346    	; 0x1ad6 <ModuleControllerStateHandle+0x20e>
    197c:	88 b1       	in	r24, 0x08	; 8
    197e:	8f 7e       	andi	r24, 0xEF	; 239
    1980:	88 b9       	out	0x08, r24	; 8
    1982:	68 e8       	ldi	r22, 0x88	; 136
    1984:	73 e1       	ldi	r23, 0x13	; 19
    1986:	80 e0       	ldi	r24, 0x00	; 0
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	0e 94 f7 21 	call	0x43ee	; 0x43ee <Delay>
    198e:	eb e6       	ldi	r30, 0x6B	; 107
    1990:	f0 e0       	ldi	r31, 0x00	; 0
    1992:	80 81       	ld	r24, Z
    1994:	8d 7f       	andi	r24, 0xFD	; 253
    1996:	80 83       	st	Z, r24
    1998:	e8 e6       	ldi	r30, 0x68	; 104
    199a:	f0 e0       	ldi	r31, 0x00	; 0
    199c:	80 81       	ld	r24, Z
    199e:	8d 7f       	andi	r24, 0xFD	; 253
    19a0:	80 83       	st	Z, r24
    19a2:	80 91 19 05 	lds	r24, 0x0519	; 0x800519 <sg_bModuleRegistered>
    19a6:	88 23       	and	r24, r24
    19a8:	19 f0       	breq	.+6      	; 0x19b0 <ModuleControllerStateHandle+0xe8>
    19aa:	8e b1       	in	r24, 0x0e	; 14
    19ac:	82 60       	ori	r24, 0x02	; 2
    19ae:	8e b9       	out	0x0e, r24	; 14
    19b0:	68 e8       	ldi	r22, 0x88	; 136
    19b2:	73 e1       	ldi	r23, 0x13	; 19
    19b4:	80 e0       	ldi	r24, 0x00	; 0
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	0e 94 f7 21 	call	0x43ee	; 0x43ee <Delay>
    19bc:	81 e0       	ldi	r24, 0x01	; 1
    19be:	80 93 12 05 	sts	0x0512, r24	; 0x800512 <sg_bCellBalanceReady>
    19c2:	10 92 11 05 	sts	0x0511, r1	; 0x800511 <sg_bCellBalancedOnce>
    19c6:	10 92 10 05 	sts	0x0510, r1	; 0x800510 <sg_bStopDischarge>
    19ca:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <sg_bSDCardReady>
    19ce:	88 23       	and	r24, r24
    19d0:	09 f4       	brne	.+2      	; 0x19d4 <ModuleControllerStateHandle+0x10c>
    19d2:	81 c0       	rjmp	.+258    	; 0x1ad6 <ModuleControllerStateHandle+0x20e>
    19d4:	0e 94 cd 21 	call	0x439a	; 0x439a <STORE_StartNewSession>
    19d8:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <sg_bSDCardReady>
    19dc:	7c c0       	rjmp	.+248    	; 0x1ad6 <ModuleControllerStateHandle+0x20e>
    19de:	61 99       	sbic	0x0c, 1	; 12
    19e0:	0d c0       	rjmp	.+26     	; 0x19fc <ModuleControllerStateHandle+0x134>
    19e2:	80 91 19 05 	lds	r24, 0x0519	; 0x800519 <sg_bModuleRegistered>
    19e6:	88 23       	and	r24, r24
    19e8:	19 f0       	breq	.+6      	; 0x19f0 <ModuleControllerStateHandle+0x128>
    19ea:	8e b1       	in	r24, 0x0e	; 14
    19ec:	82 60       	ori	r24, 0x02	; 2
    19ee:	8e b9       	out	0x0e, r24	; 14
    19f0:	68 e8       	ldi	r22, 0x88	; 136
    19f2:	73 e1       	ldi	r23, 0x13	; 19
    19f4:	80 e0       	ldi	r24, 0x00	; 0
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	0e 94 f7 21 	call	0x43ee	; 0x43ee <Delay>
    19fc:	cb e0       	ldi	r28, 0x0B	; 11
    19fe:	2a c0       	rjmp	.+84     	; 0x1a54 <ModuleControllerStateHandle+0x18c>
    1a00:	80 91 19 05 	lds	r24, 0x0519	; 0x800519 <sg_bModuleRegistered>
    1a04:	88 23       	and	r24, r24
    1a06:	49 f0       	breq	.+18     	; 0x1a1a <ModuleControllerStateHandle+0x152>
    1a08:	88 b1       	in	r24, 0x08	; 8
    1a0a:	80 61       	ori	r24, 0x10	; 16
    1a0c:	88 b9       	out	0x08, r24	; 8
    1a0e:	88 b1       	in	r24, 0x08	; 8
    1a10:	8f 77       	andi	r24, 0x7F	; 127
    1a12:	88 b9       	out	0x08, r24	; 8
    1a14:	88 b1       	in	r24, 0x08	; 8
    1a16:	80 68       	ori	r24, 0x80	; 128
    1a18:	88 b9       	out	0x08, r24	; 8
    1a1a:	68 ee       	ldi	r22, 0xE8	; 232
    1a1c:	73 e0       	ldi	r23, 0x03	; 3
    1a1e:	80 e0       	ldi	r24, 0x00	; 0
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	0e 94 f7 21 	call	0x43ee	; 0x43ee <Delay>
    1a26:	88 b1       	in	r24, 0x08	; 8
    1a28:	8f 7e       	andi	r24, 0xEF	; 239
    1a2a:	88 b9       	out	0x08, r24	; 8
    1a2c:	68 e8       	ldi	r22, 0x88	; 136
    1a2e:	73 e1       	ldi	r23, 0x13	; 19
    1a30:	80 e0       	ldi	r24, 0x00	; 0
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	0e 94 f7 21 	call	0x43ee	; 0x43ee <Delay>
    1a38:	60 e5       	ldi	r22, 0x50	; 80
    1a3a:	73 ec       	ldi	r23, 0xC3	; 195
    1a3c:	80 e0       	ldi	r24, 0x00	; 0
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	0e 94 f7 21 	call	0x43ee	; 0x43ee <Delay>
    1a44:	80 91 0f 05 	lds	r24, 0x050F	; 0x80050f <sg_bOvercurrentSignal>
    1a48:	88 23       	and	r24, r24
    1a4a:	19 f0       	breq	.+6      	; 0x1a52 <ModuleControllerStateHandle+0x18a>
    1a4c:	10 92 0f 05 	sts	0x050F, r1	; 0x80050f <sg_bOvercurrentSignal>
    1a50:	01 c0       	rjmp	.+2      	; 0x1a54 <ModuleControllerStateHandle+0x18c>
    1a52:	c1 2f       	mov	r28, r17
    1a54:	1f ef       	ldi	r17, 0xFF	; 255
    1a56:	1c 0f       	add	r17, r28
    1a58:	c1 11       	cpse	r28, r1
    1a5a:	d2 cf       	rjmp	.-92     	; 0x1a00 <ModuleControllerStateHandle+0x138>
    1a5c:	3c c0       	rjmp	.+120    	; 0x1ad6 <ModuleControllerStateHandle+0x20e>
    1a5e:	61 99       	sbic	0x0c, 1	; 12
    1a60:	0d c0       	rjmp	.+26     	; 0x1a7c <ModuleControllerStateHandle+0x1b4>
    1a62:	80 91 19 05 	lds	r24, 0x0519	; 0x800519 <sg_bModuleRegistered>
    1a66:	88 23       	and	r24, r24
    1a68:	19 f0       	breq	.+6      	; 0x1a70 <ModuleControllerStateHandle+0x1a8>
    1a6a:	8e b1       	in	r24, 0x0e	; 14
    1a6c:	82 60       	ori	r24, 0x02	; 2
    1a6e:	8e b9       	out	0x0e, r24	; 14
    1a70:	68 e8       	ldi	r22, 0x88	; 136
    1a72:	73 e1       	ldi	r23, 0x13	; 19
    1a74:	80 e0       	ldi	r24, 0x00	; 0
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	0e 94 f7 21 	call	0x43ee	; 0x43ee <Delay>
    1a7c:	80 91 19 05 	lds	r24, 0x0519	; 0x800519 <sg_bModuleRegistered>
    1a80:	88 23       	and	r24, r24
    1a82:	49 f0       	breq	.+18     	; 0x1a96 <ModuleControllerStateHandle+0x1ce>
    1a84:	88 b1       	in	r24, 0x08	; 8
    1a86:	80 61       	ori	r24, 0x10	; 16
    1a88:	88 b9       	out	0x08, r24	; 8
    1a8a:	88 b1       	in	r24, 0x08	; 8
    1a8c:	8f 77       	andi	r24, 0x7F	; 127
    1a8e:	88 b9       	out	0x08, r24	; 8
    1a90:	88 b1       	in	r24, 0x08	; 8
    1a92:	80 68       	ori	r24, 0x80	; 128
    1a94:	88 b9       	out	0x08, r24	; 8
    1a96:	68 e8       	ldi	r22, 0x88	; 136
    1a98:	73 e1       	ldi	r23, 0x13	; 19
    1a9a:	80 e0       	ldi	r24, 0x00	; 0
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	0e 94 f7 21 	call	0x43ee	; 0x43ee <Delay>
    1aa2:	10 92 12 05 	sts	0x0512, r1	; 0x800512 <sg_bCellBalanceReady>
    1aa6:	10 92 11 05 	sts	0x0511, r1	; 0x800511 <sg_bCellBalancedOnce>
    1aaa:	81 e0       	ldi	r24, 0x01	; 1
    1aac:	80 93 10 05 	sts	0x0510, r24	; 0x800510 <sg_bStopDischarge>
    1ab0:	eb e6       	ldi	r30, 0x6B	; 107
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	80 81       	ld	r24, Z
    1ab6:	82 60       	ori	r24, 0x02	; 2
    1ab8:	80 83       	st	Z, r24
    1aba:	e8 e6       	ldi	r30, 0x68	; 104
    1abc:	f0 e0       	ldi	r31, 0x00	; 0
    1abe:	80 81       	ld	r24, Z
    1ac0:	82 60       	ori	r24, 0x02	; 2
    1ac2:	80 83       	st	Z, r24
    1ac4:	08 c0       	rjmp	.+16     	; 0x1ad6 <ModuleControllerStateHandle+0x20e>
    1ac6:	4d ef       	ldi	r20, 0xFD	; 253
    1ac8:	53 e0       	ldi	r21, 0x03	; 3
    1aca:	67 e4       	ldi	r22, 0x47	; 71
    1acc:	72 e0       	ldi	r23, 0x02	; 2
    1ace:	80 e0       	ldi	r24, 0x00	; 0
    1ad0:	0e 94 bf 24 	call	0x497e	; 0x497e <PlatformAssert>
    1ad4:	d5 e0       	ldi	r29, 0x05	; 5
    1ad6:	d0 93 07 01 	sts	0x0107, r29	; 0x800107 <sg_eModuleControllerStateCurrent>
    1ada:	0e 94 cc 27 	call	0x4f98	; 0x4f98 <SendModuleControllerStatus>
    1ade:	df 91       	pop	r29
    1ae0:	cf 91       	pop	r28
    1ae2:	1f 91       	pop	r17
    1ae4:	08 95       	ret

Disassembly of section .text.PlatformGetRegistrationID:

00005050 <PlatformGetRegistrationID>:
}

uint8_t PlatformGetRegistrationID( void )
{
	return(sg_u8ModuleRegistrationID);
}
    5050:	80 91 1f 05 	lds	r24, 0x051F	; 0x80051f <sg_u8ModuleRegistrationID>
    5054:	08 95       	ret

Disassembly of section .text.SetSysclock:

0000501c <SetSysclock>:

void SetSysclock( void )
{
	// First set the prescaler enable
	CLKPR = (1 << CLKPCE);
    501c:	e1 e6       	ldi	r30, 0x61	; 97
    501e:	f0 e0       	ldi	r31, 0x00	; 0
    5020:	80 e8       	ldi	r24, 0x80	; 128
    5022:	80 83       	st	Z, r24
	
	// Now set the desired prescale value
	CLKPR = SYSCLOCK_PRESCALE;
    5024:	10 82       	st	Z, r1
    5026:	08 95       	ret

Disassembly of section .text.ModuleControllerGetUniqueID:

00003b8a <ModuleControllerGetUniqueID>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    3b8a:	cf 92       	push	r12
    3b8c:	df 92       	push	r13
    3b8e:	ef 92       	push	r14
    3b90:	ff 92       	push	r15
    3b92:	80 e0       	ldi	r24, 0x00	; 0
    3b94:	90 e0       	ldi	r25, 0x00	; 0
    3b96:	0e 94 9f 27 	call	0x4f3e	; 0x4f3e <EEPROMRead>
    3b9a:	c8 2e       	mov	r12, r24
    3b9c:	d1 2c       	mov	r13, r1
    3b9e:	e1 2c       	mov	r14, r1
    3ba0:	f1 2c       	mov	r15, r1
    3ba2:	81 e0       	ldi	r24, 0x01	; 1
    3ba4:	90 e0       	ldi	r25, 0x00	; 0
    3ba6:	0e 94 9f 27 	call	0x4f3e	; 0x4f3e <EEPROMRead>
    3baa:	90 e0       	ldi	r25, 0x00	; 0
    3bac:	a0 e0       	ldi	r26, 0x00	; 0
    3bae:	b0 e0       	ldi	r27, 0x00	; 0
    3bb0:	ba 2f       	mov	r27, r26
    3bb2:	a9 2f       	mov	r26, r25
    3bb4:	98 2f       	mov	r25, r24
    3bb6:	88 27       	eor	r24, r24
    3bb8:	c8 2a       	or	r12, r24
    3bba:	d9 2a       	or	r13, r25
    3bbc:	ea 2a       	or	r14, r26
    3bbe:	fb 2a       	or	r15, r27
    3bc0:	82 e0       	ldi	r24, 0x02	; 2
    3bc2:	90 e0       	ldi	r25, 0x00	; 0
    3bc4:	0e 94 9f 27 	call	0x4f3e	; 0x4f3e <EEPROMRead>
    3bc8:	90 e0       	ldi	r25, 0x00	; 0
    3bca:	a0 e0       	ldi	r26, 0x00	; 0
    3bcc:	b0 e0       	ldi	r27, 0x00	; 0
    3bce:	dc 01       	movw	r26, r24
    3bd0:	99 27       	eor	r25, r25
    3bd2:	88 27       	eor	r24, r24
    3bd4:	c8 2a       	or	r12, r24
    3bd6:	d9 2a       	or	r13, r25
    3bd8:	ea 2a       	or	r14, r26
    3bda:	fb 2a       	or	r15, r27
    3bdc:	83 e0       	ldi	r24, 0x03	; 3
    3bde:	90 e0       	ldi	r25, 0x00	; 0
    3be0:	0e 94 9f 27 	call	0x4f3e	; 0x4f3e <EEPROMRead>
    3be4:	90 e0       	ldi	r25, 0x00	; 0
    3be6:	a0 e0       	ldi	r26, 0x00	; 0
    3be8:	b0 e0       	ldi	r27, 0x00	; 0
    3bea:	b8 2f       	mov	r27, r24
    3bec:	aa 27       	eor	r26, r26
    3bee:	99 27       	eor	r25, r25
    3bf0:	88 27       	eor	r24, r24
    3bf2:	bc 01       	movw	r22, r24
    3bf4:	cd 01       	movw	r24, r26
    3bf6:	6c 29       	or	r22, r12
    3bf8:	7d 29       	or	r23, r13
    3bfa:	8e 29       	or	r24, r14
    3bfc:	9f 29       	or	r25, r15
    3bfe:	ff 90       	pop	r15
    3c00:	ef 90       	pop	r14
    3c02:	df 90       	pop	r13
    3c04:	cf 90       	pop	r12
    3c06:	08 95       	ret

Disassembly of section .text.TimerInit:

00004440 <TimerInit>:
    4440:	14 bc       	out	0x24, r1	; 36
    4442:	92 e0       	ldi	r25, 0x02	; 2
    4444:	95 bd       	out	0x25, r25	; 37
    4446:	a4 e6       	ldi	r26, 0x64	; 100
    4448:	b0 e0       	ldi	r27, 0x00	; 0
    444a:	8c 91       	ld	r24, X
    444c:	87 7f       	andi	r24, 0xF7	; 247
    444e:	8c 93       	st	X, r24
    4450:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f0080>
    4454:	84 e0       	ldi	r24, 0x04	; 4
    4456:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f0081>
    445a:	96 bb       	out	0x16, r25	; 22
    445c:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f0084>
    4460:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f0085>
    4464:	8b 5c       	subi	r24, 0xCB	; 203
    4466:	93 4f       	sbci	r25, 0xF3	; 243
    4468:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f0089>
    446c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f0088>
    4470:	ef e6       	ldi	r30, 0x6F	; 111
    4472:	f0 e0       	ldi	r31, 0x00	; 0
    4474:	80 81       	ld	r24, Z
    4476:	82 60       	ori	r24, 0x02	; 2
    4478:	80 83       	st	Z, r24
    447a:	8c 91       	ld	r24, X
    447c:	8f 7e       	andi	r24, 0xEF	; 239
    447e:	8c 93       	st	X, r24
    4480:	ae e6       	ldi	r26, 0x6E	; 110
    4482:	b0 e0       	ldi	r27, 0x00	; 0
    4484:	8c 91       	ld	r24, X
    4486:	8e 7f       	andi	r24, 0xFE	; 254
    4488:	8c 93       	st	X, r24
    448a:	80 81       	ld	r24, Z
    448c:	8e 7f       	andi	r24, 0xFE	; 254
    448e:	80 83       	st	Z, r24
    4490:	08 95       	ret

Disassembly of section .text.__vector_12:

000033de <__vector_12>:
    33de:	78 94       	sei
    33e0:	1f 92       	push	r1
    33e2:	0f 92       	push	r0
    33e4:	0f b6       	in	r0, 0x3f	; 63
    33e6:	0f 92       	push	r0
    33e8:	11 24       	eor	r1, r1
    33ea:	8f 93       	push	r24
    33ec:	9f 93       	push	r25
    33ee:	ef 93       	push	r30
    33f0:	ff 93       	push	r31
    33f2:	82 e0       	ldi	r24, 0x02	; 2
    33f4:	86 bb       	out	0x16, r24	; 22
    33f6:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f0084>
    33fa:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f0085>
    33fe:	8b 5c       	subi	r24, 0xCB	; 203
    3400:	93 4f       	sbci	r25, 0xF3	; 243
    3402:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f0089>
    3406:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f0088>
    340a:	ef e6       	ldi	r30, 0x6F	; 111
    340c:	f0 e0       	ldi	r31, 0x00	; 0
    340e:	80 81       	ld	r24, Z
    3410:	82 60       	ori	r24, 0x02	; 2
    3412:	80 83       	st	Z, r24
    3414:	81 e0       	ldi	r24, 0x01	; 1
    3416:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <sg_bNewTick>
    341a:	80 91 7a 0b 	lds	r24, 0x0B7A	; 0x800b7a <sg_u8CellFrameTimer>
    341e:	8f 5f       	subi	r24, 0xFF	; 255
    3420:	80 93 7a 0b 	sts	0x0B7A, r24	; 0x800b7a <sg_u8CellFrameTimer>
    3424:	80 91 7a 0b 	lds	r24, 0x0B7A	; 0x800b7a <sg_u8CellFrameTimer>
    3428:	83 30       	cpi	r24, 0x03	; 3
    342a:	78 f0       	brcs	.+30     	; 0x344a <__vector_12+0x6c>
    342c:	10 92 7a 0b 	sts	0x0B7A, r1	; 0x800b7a <sg_u8CellFrameTimer>
    3430:	81 e0       	ldi	r24, 0x01	; 1
    3432:	80 93 79 0b 	sts	0x0B79, r24	; 0x800b79 <sg_bFrameStart>
    3436:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <sg_eFrameStatus>
    343a:	81 30       	cpi	r24, 0x01	; 1
    343c:	19 f4       	brne	.+6      	; 0x3444 <__vector_12+0x66>
    343e:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <sg_eFrameStatus>
    3442:	03 c0       	rjmp	.+6      	; 0x344a <__vector_12+0x6c>
    3444:	81 e0       	ldi	r24, 0x01	; 1
    3446:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <sg_eFrameStatus>
    344a:	80 91 77 0b 	lds	r24, 0x0B77	; 0x800b77 <sg_u8TicksSinceLastPackControllerMessage>
    344e:	8f 3f       	cpi	r24, 0xFF	; 255
    3450:	29 f0       	breq	.+10     	; 0x345c <__vector_12+0x7e>
    3452:	80 91 77 0b 	lds	r24, 0x0B77	; 0x800b77 <sg_u8TicksSinceLastPackControllerMessage>
    3456:	8f 5f       	subi	r24, 0xFF	; 255
    3458:	80 93 77 0b 	sts	0x0B77, r24	; 0x800b77 <sg_u8TicksSinceLastPackControllerMessage>
    345c:	80 91 77 0b 	lds	r24, 0x0B77	; 0x800b77 <sg_u8TicksSinceLastPackControllerMessage>
    3460:	8f 36       	cpi	r24, 0x6F	; 111
    3462:	40 f0       	brcs	.+16     	; 0x3474 <__vector_12+0x96>
    3464:	80 91 77 0b 	lds	r24, 0x0B77	; 0x800b77 <sg_u8TicksSinceLastPackControllerMessage>
    3468:	8f 56       	subi	r24, 0x6F	; 111
    346a:	80 93 77 0b 	sts	0x0B77, r24	; 0x800b77 <sg_u8TicksSinceLastPackControllerMessage>
    346e:	81 e0       	ldi	r24, 0x01	; 1
    3470:	80 93 17 05 	sts	0x0517, r24	; 0x800517 <sg_bPackControllerTimeout>
    3474:	80 91 78 0b 	lds	r24, 0x0B78	; 0x800b78 <sg_u8CellStringPowerTimer>
    3478:	88 23       	and	r24, r24
    347a:	29 f0       	breq	.+10     	; 0x3486 <__vector_12+0xa8>
    347c:	80 91 78 0b 	lds	r24, 0x0B78	; 0x800b78 <sg_u8CellStringPowerTimer>
    3480:	81 50       	subi	r24, 0x01	; 1
    3482:	80 93 78 0b 	sts	0x0B78, r24	; 0x800b78 <sg_u8CellStringPowerTimer>
    3486:	ff 91       	pop	r31
    3488:	ef 91       	pop	r30
    348a:	9f 91       	pop	r25
    348c:	8f 91       	pop	r24
    348e:	0f 90       	pop	r0
    3490:	0f be       	out	0x3f, r0	; 63
    3492:	0f 90       	pop	r0
    3494:	1f 90       	pop	r1
    3496:	18 95       	reti

Disassembly of section .text.WatchdogReset:

0000505e <WatchdogReset>:
		sg_u8CellStringPowerTimer--;
	}
}

void WatchdogReset( void )
{
    505e:	08 95       	ret

Disassembly of section .text.WatchdogOff:

00004e5c <WatchdogOff>:
// }

// Assume interrupts are disabled
void WatchdogOff( void )  // turn it off even when WDT_ENABLE is not defined
{
	wdt_reset();
    4e5c:	a8 95       	wdr
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    4e5e:	0f b6       	in	r0, 0x3f	; 63
    4e60:	f8 94       	cli
    4e62:	a8 95       	wdr
    4e64:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f0060>
    4e68:	88 61       	ori	r24, 0x18	; 24
    4e6a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f0060>
    4e6e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f0060>
    4e72:	0f be       	out	0x3f, r0	; 63
    4e74:	08 95       	ret

Disassembly of section .text.__vector_28:

00004492 <__vector_28>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    4492:	1f 92       	push	r1
    4494:	0f 92       	push	r0
    4496:	0f b6       	in	r0, 0x3f	; 63
    4498:	0f 92       	push	r0
    449a:	11 24       	eor	r1, r1
    449c:	2f 93       	push	r18
    449e:	3f 93       	push	r19
    44a0:	4f 93       	push	r20
    44a2:	5f 93       	push	r21
    44a4:	6f 93       	push	r22
    44a6:	7f 93       	push	r23
    44a8:	8f 93       	push	r24
    44aa:	9f 93       	push	r25
    44ac:	af 93       	push	r26
    44ae:	bf 93       	push	r27
    44b0:	ef 93       	push	r30
    44b2:	ff 93       	push	r31
    44b4:	49 e0       	ldi	r20, 0x09	; 9
    44b6:	53 e0       	ldi	r21, 0x03	; 3
    44b8:	67 e4       	ldi	r22, 0x47	; 71
    44ba:	72 e0       	ldi	r23, 0x02	; 2
    44bc:	80 e0       	ldi	r24, 0x00	; 0
    44be:	0e 94 bf 24 	call	0x497e	; 0x497e <PlatformAssert>
    44c2:	ff 91       	pop	r31
    44c4:	ef 91       	pop	r30
    44c6:	bf 91       	pop	r27
    44c8:	af 91       	pop	r26
    44ca:	9f 91       	pop	r25
    44cc:	8f 91       	pop	r24
    44ce:	7f 91       	pop	r23
    44d0:	6f 91       	pop	r22
    44d2:	5f 91       	pop	r21
    44d4:	4f 91       	pop	r20
    44d6:	3f 91       	pop	r19
    44d8:	2f 91       	pop	r18
    44da:	0f 90       	pop	r0
    44dc:	0f be       	out	0x3f, r0	; 63
    44de:	0f 90       	pop	r0
    44e0:	1f 90       	pop	r1
    44e2:	18 95       	reti

Disassembly of section .text.__vector_23:

00003860 <__vector_23>:
    3860:	78 94       	sei
    3862:	1f 92       	push	r1
    3864:	0f 92       	push	r0
    3866:	0f b6       	in	r0, 0x3f	; 63
    3868:	0f 92       	push	r0
    386a:	11 24       	eor	r1, r1
    386c:	2f 93       	push	r18
    386e:	3f 93       	push	r19
    3870:	4f 93       	push	r20
    3872:	5f 93       	push	r21
    3874:	6f 93       	push	r22
    3876:	7f 93       	push	r23
    3878:	8f 93       	push	r24
    387a:	9f 93       	push	r25
    387c:	af 93       	push	r26
    387e:	bf 93       	push	r27
    3880:	ef 93       	push	r30
    3882:	ff 93       	push	r31
    3884:	96 b1       	in	r25, 0x06	; 6
    3886:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    388a:	83 30       	cpi	r24, 0x03	; 3
    388c:	21 f0       	breq	.+8      	; 0x3896 <__vector_23+0x36>
    388e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    3892:	82 30       	cpi	r24, 0x02	; 2
    3894:	c9 f4       	brne	.+50     	; 0x38c8 <__vector_23+0x68>
    3896:	91 ff       	sbrs	r25, 1
    3898:	17 c0       	rjmp	.+46     	; 0x38c8 <__vector_23+0x68>
    389a:	88 b1       	in	r24, 0x08	; 8
    389c:	8f 7e       	andi	r24, 0xEF	; 239
    389e:	88 b9       	out	0x08, r24	; 8
    38a0:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    38a4:	83 30       	cpi	r24, 0x03	; 3
    38a6:	19 f4       	brne	.+6      	; 0x38ae <__vector_23+0x4e>
    38a8:	81 e0       	ldi	r24, 0x01	; 1
    38aa:	0e 94 19 28 	call	0x5032	; 0x5032 <ModuleControllerStateSet>
    38ae:	eb e6       	ldi	r30, 0x6B	; 107
    38b0:	f0 e0       	ldi	r31, 0x00	; 0
    38b2:	80 81       	ld	r24, Z
    38b4:	8d 7f       	andi	r24, 0xFD	; 253
    38b6:	80 83       	st	Z, r24
    38b8:	e8 e6       	ldi	r30, 0x68	; 104
    38ba:	f0 e0       	ldi	r31, 0x00	; 0
    38bc:	80 81       	ld	r24, Z
    38be:	8d 7f       	andi	r24, 0xFD	; 253
    38c0:	80 83       	st	Z, r24
    38c2:	81 e0       	ldi	r24, 0x01	; 1
    38c4:	80 93 0f 05 	sts	0x050F, r24	; 0x80050f <sg_bOvercurrentSignal>
    38c8:	ff 91       	pop	r31
    38ca:	ef 91       	pop	r30
    38cc:	bf 91       	pop	r27
    38ce:	af 91       	pop	r26
    38d0:	9f 91       	pop	r25
    38d2:	8f 91       	pop	r24
    38d4:	7f 91       	pop	r23
    38d6:	6f 91       	pop	r22
    38d8:	5f 91       	pop	r21
    38da:	4f 91       	pop	r20
    38dc:	3f 91       	pop	r19
    38de:	2f 91       	pop	r18
    38e0:	0f 90       	pop	r0
    38e2:	0f be       	out	0x3f, r0	; 63
    38e4:	0f 90       	pop	r0
    38e6:	1f 90       	pop	r1
    38e8:	18 95       	reti

Disassembly of section .text.__vector_24:

000044e4 <__vector_24>:
    44e4:	78 94       	sei
    44e6:	1f 92       	push	r1
    44e8:	0f 92       	push	r0
    44ea:	0f b6       	in	r0, 0x3f	; 63
    44ec:	0f 92       	push	r0
    44ee:	11 24       	eor	r1, r1
    44f0:	2f 93       	push	r18
    44f2:	3f 93       	push	r19
    44f4:	4f 93       	push	r20
    44f6:	5f 93       	push	r21
    44f8:	6f 93       	push	r22
    44fa:	7f 93       	push	r23
    44fc:	8f 93       	push	r24
    44fe:	9f 93       	push	r25
    4500:	af 93       	push	r26
    4502:	bf 93       	push	r27
    4504:	ef 93       	push	r30
    4506:	ff 93       	push	r31
    4508:	8b b1       	in	r24, 0x0b	; 11
    450a:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <Check5VLoss>
    450e:	ff 91       	pop	r31
    4510:	ef 91       	pop	r30
    4512:	bf 91       	pop	r27
    4514:	af 91       	pop	r26
    4516:	9f 91       	pop	r25
    4518:	8f 91       	pop	r24
    451a:	7f 91       	pop	r23
    451c:	6f 91       	pop	r22
    451e:	5f 91       	pop	r21
    4520:	4f 91       	pop	r20
    4522:	3f 91       	pop	r19
    4524:	2f 91       	pop	r18
    4526:	0f 90       	pop	r0
    4528:	0f be       	out	0x3f, r0	; 63
    452a:	0f 90       	pop	r0
    452c:	1f 90       	pop	r1
    452e:	18 95       	reti

Disassembly of section .text.vUARTRXStart:

00004ed4 <vUARTRXStart>:
}

// Called at the start of cell string data via MC RX
void vUARTRXStart(void)
{
	sg_u8CellBufferRX = 0;
    4ed4:	10 92 75 0b 	sts	0x0B75, r1	; 0x800b75 <sg_u8CellBufferRX>
	sg_u8CellIndex = 0;
    4ed8:	10 92 76 0b 	sts	0x0B76, r1	; 0x800b76 <sg_u8CellIndex>
	sg_u16BytesReceived = 0;
    4edc:	10 92 5f 0b 	sts	0x0B5F, r1	; 0x800b5f <sg_u16BytesReceived+0x1>
    4ee0:	10 92 5e 0b 	sts	0x0B5E, r1	; 0x800b5e <sg_u16BytesReceived>
	sg_u8CellReports = 0;
    4ee4:	10 92 74 0b 	sts	0x0B74, r1	; 0x800b74 <sg_u8CellReports>
    4ee8:	08 95       	ret

Disassembly of section .text.vUARTRXEnd:

00004d7a <vUARTRXEnd>:
	// disable the edge interrupt
//	VUART_RX_DISABLE();
	// disable bit timer interrupt, should already be off but just in case
//	TIMER_CHB_INT_DISABLE();
	// update bytes and cells received
	sg_sFrame.m.sg_u16BytesReceived = sg_u16BytesReceived;
    4d7a:	80 91 5e 0b 	lds	r24, 0x0B5E	; 0x800b5e <sg_u16BytesReceived>
    4d7e:	90 91 5f 0b 	lds	r25, 0x0B5F	; 0x800b5f <sg_u16BytesReceived+0x1>
    4d82:	ec e0       	ldi	r30, 0x0C	; 12
    4d84:	f1 e0       	ldi	r31, 0x01	; 1
    4d86:	94 a7       	std	Z+44, r25	; 0x2c
    4d88:	83 a7       	std	Z+43, r24	; 0x2b
	sg_sFrame.m.sg_u8CellCPUCount = sg_u8CellReports;
    4d8a:	80 91 74 0b 	lds	r24, 0x0B74	; 0x800b74 <sg_u8CellReports>
    4d8e:	85 a7       	std	Z+45, r24	; 0x2d
	sg_u16BytesReceived = 0;
    4d90:	10 92 5f 0b 	sts	0x0B5F, r1	; 0x800b5f <sg_u16BytesReceived+0x1>
    4d94:	10 92 5e 0b 	sts	0x0B5E, r1	; 0x800b5e <sg_u16BytesReceived>
	sg_u8CellReports = 0;
    4d98:	10 92 74 0b 	sts	0x0B74, r1	; 0x800b74 <sg_u8CellReports>
    4d9c:	08 95       	ret

Disassembly of section .text.vUARTRXData:

00003df8 <vUARTRXData>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    3df8:	e0 91 75 0b 	lds	r30, 0x0B75	; 0x800b75 <sg_u8CellBufferRX>
    3dfc:	21 e0       	ldi	r18, 0x01	; 1
    3dfe:	2e 0f       	add	r18, r30
    3e00:	20 93 75 0b 	sts	0x0B75, r18	; 0x800b75 <sg_u8CellBufferRX>
    3e04:	f0 e0       	ldi	r31, 0x00	; 0
    3e06:	e8 5b       	subi	r30, 0xB8	; 184
    3e08:	f4 4f       	sbci	r31, 0xF4	; 244
    3e0a:	80 83       	st	Z, r24
    3e0c:	80 91 5e 0b 	lds	r24, 0x0B5E	; 0x800b5e <sg_u16BytesReceived>
    3e10:	90 91 5f 0b 	lds	r25, 0x0B5F	; 0x800b5f <sg_u16BytesReceived+0x1>
    3e14:	01 96       	adiw	r24, 0x01	; 1
    3e16:	90 93 5f 0b 	sts	0x0B5F, r25	; 0x800b5f <sg_u16BytesReceived+0x1>
    3e1a:	80 93 5e 0b 	sts	0x0B5E, r24	; 0x800b5e <sg_u16BytesReceived>
    3e1e:	24 30       	cpi	r18, 0x04	; 4
    3e20:	38 f1       	brcs	.+78     	; 0x3e70 <vUARTRXData+0x78>
    3e22:	10 92 75 0b 	sts	0x0B75, r1	; 0x800b75 <sg_u8CellBufferRX>
    3e26:	80 91 76 0b 	lds	r24, 0x0B76	; 0x800b76 <sg_u8CellIndex>
    3e2a:	8c 36       	cpi	r24, 0x6C	; 108
    3e2c:	08 f5       	brcc	.+66     	; 0x3e70 <vUARTRXData+0x78>
    3e2e:	e8 2f       	mov	r30, r24
    3e30:	f0 e0       	ldi	r31, 0x00	; 0
    3e32:	77 96       	adiw	r30, 0x17	; 23
    3e34:	ee 0f       	add	r30, r30
    3e36:	ff 1f       	adc	r31, r31
    3e38:	ee 0f       	add	r30, r30
    3e3a:	ff 1f       	adc	r31, r31
    3e3c:	e4 5f       	subi	r30, 0xF4	; 244
    3e3e:	fe 4f       	sbci	r31, 0xFE	; 254
    3e40:	a8 e4       	ldi	r26, 0x48	; 72
    3e42:	bb e0       	ldi	r27, 0x0B	; 11
    3e44:	4d 91       	ld	r20, X+
    3e46:	5d 91       	ld	r21, X+
    3e48:	6d 91       	ld	r22, X+
    3e4a:	7c 91       	ld	r23, X
    3e4c:	13 97       	sbiw	r26, 0x03	; 3
    3e4e:	43 83       	std	Z+3, r20	; 0x03
    3e50:	54 83       	std	Z+4, r21	; 0x04
    3e52:	65 83       	std	Z+5, r22	; 0x05
    3e54:	76 83       	std	Z+6, r23	; 0x06
    3e56:	1d 92       	st	X+, r1
    3e58:	1d 92       	st	X+, r1
    3e5a:	1d 92       	st	X+, r1
    3e5c:	1c 92       	st	X, r1
    3e5e:	13 97       	sbiw	r26, 0x03	; 3
    3e60:	8f 5f       	subi	r24, 0xFF	; 255
    3e62:	80 93 76 0b 	sts	0x0B76, r24	; 0x800b76 <sg_u8CellIndex>
    3e66:	80 91 74 0b 	lds	r24, 0x0B74	; 0x800b74 <sg_u8CellReports>
    3e6a:	8f 5f       	subi	r24, 0xFF	; 255
    3e6c:	80 93 74 0b 	sts	0x0B74, r24	; 0x800b74 <sg_u8CellReports>
    3e70:	08 95       	ret

Disassembly of section .text.PlatformGetSendData:

00004a54 <PlatformGetSendData>:
uint16_t PlatformGetSendData( bool bUpdateBalanceStatus )
{
	uint16_t u16SendValue = 0;
	
	
	if( sg_bStopDischarge )
    4a54:	90 91 10 05 	lds	r25, 0x0510	; 0x800510 <sg_bStopDischarge>
    4a58:	99 23       	and	r25, r25
    4a5a:	51 f0       	breq	.+20     	; 0x4a70 <PlatformGetSendData+0x1c>
	{
		if (bUpdateBalanceStatus)	// don't update if ony an availability check
    4a5c:	88 23       	and	r24, r24
    4a5e:	59 f0       	breq	.+22     	; 0x4a76 <PlatformGetSendData+0x22>
		{
			sg_bStopDischarge = false;
    4a60:	10 92 10 05 	sts	0x0510, r1	; 0x800510 <sg_bStopDischarge>
			sg_bCellBalancedOnce = true;
    4a64:	81 e0       	ldi	r24, 0x01	; 1
    4a66:	80 93 11 05 	sts	0x0511, r24	; 0x800511 <sg_bCellBalancedOnce>
		}
		u16SendValue = 0x3ff;
    4a6a:	8f ef       	ldi	r24, 0xFF	; 255
    4a6c:	93 e0       	ldi	r25, 0x03	; 3
    4a6e:	08 95       	ret
			}
		}
		else
#endif
		{
			u16SendValue |= MSG_CELL_SEND_REPORT;
    4a70:	80 e0       	ldi	r24, 0x00	; 0
    4a72:	90 e8       	ldi	r25, 0x80	; 128
    4a74:	08 95       	ret
		if (bUpdateBalanceStatus)	// don't update if ony an availability check
		{
			sg_bStopDischarge = false;
			sg_bCellBalancedOnce = true;
		}
		u16SendValue = 0x3ff;
    4a76:	8f ef       	ldi	r24, 0xFF	; 255
    4a78:	93 e0       	ldi	r25, 0x03	; 3
#endif
		}
	}
	
	return( u16SendValue );
}
    4a7a:	08 95       	ret

Disassembly of section .text.ADCCallback:

000049aa <ADCCallback>:
// Called every time there's an ADC read since apparently ISR can't access global variables?  compiler fails
void ADCCallback(EADCType eType,
				 uint16_t u16Reading)
{
	// End of chain? Indicate it's time for an ADC update
	if ((EADCTYPE_COUNT-1) == eType)
    49aa:	84 30       	cpi	r24, 0x04	; 4
    49ac:	19 f4       	brne	.+6      	; 0x49b4 <ADCCallback+0xa>
	{
		sg_bADCUpdate = true;
    49ae:	91 e0       	ldi	r25, 0x01	; 1
    49b0:	90 93 0e 05 	sts	0x050E, r25	; 0x80050e <sg_bADCUpdate>
	}
	sg_sFrame.m.ADCReadings[eType].u16Reading = u16Reading;
    49b4:	90 e0       	ldi	r25, 0x00	; 0
    49b6:	9c 01       	movw	r18, r24
    49b8:	22 0f       	add	r18, r18
    49ba:	33 1f       	adc	r19, r19
    49bc:	82 0f       	add	r24, r18
    49be:	93 1f       	adc	r25, r19
    49c0:	84 5f       	subi	r24, 0xF4	; 244
    49c2:	9e 4f       	sbci	r25, 0xFE	; 254
    49c4:	fc 01       	movw	r30, r24
    49c6:	e9 5b       	subi	r30, 0xB9	; 185
    49c8:	ff 4f       	sbci	r31, 0xFF	; 255
    49ca:	71 83       	std	Z+1, r23	; 0x01
    49cc:	60 83       	st	Z, r22
	sg_sFrame.m.ADCReadings[eType].bValid = true;
    49ce:	31 97       	sbiw	r30, 0x01	; 1
    49d0:	21 e0       	ldi	r18, 0x01	; 1
    49d2:	20 83       	st	Z, r18
    49d4:	08 95       	ret

Disassembly of section .text.FrameInit:

00002f40 <FrameInit>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    2f40:	cf 93       	push	r28
    2f42:	df 93       	push	r29
    2f44:	81 11       	cpse	r24, r1
    2f46:	0d c0       	rjmp	.+26     	; 0x2f62 <FrameInit+0x22>
    2f48:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <sg_sFrame>
    2f4c:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <sg_sFrame+0x1>
    2f50:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <sg_sFrame+0x2>
    2f54:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <sg_sFrame+0x3>
    2f58:	8a 37       	cpi	r24, 0x7A	; 122
    2f5a:	9a 4d       	sbci	r25, 0xDA	; 218
    2f5c:	a7 47       	sbci	r26, 0x77	; 119
    2f5e:	ba 4b       	sbci	r27, 0xBA	; 186
    2f60:	29 f1       	breq	.+74     	; 0x2fac <FrameInit+0x6c>
    2f62:	cc e0       	ldi	r28, 0x0C	; 12
    2f64:	d1 e0       	ldi	r29, 0x01	; 1
    2f66:	80 e0       	ldi	r24, 0x00	; 0
    2f68:	94 e0       	ldi	r25, 0x04	; 4
    2f6a:	fe 01       	movw	r30, r28
    2f6c:	9c 01       	movw	r18, r24
    2f6e:	11 92       	st	Z+, r1
    2f70:	21 50       	subi	r18, 0x01	; 1
    2f72:	30 40       	sbci	r19, 0x00	; 0
    2f74:	e1 f7       	brne	.-8      	; 0x2f6e <FrameInit+0x2e>
    2f76:	9d 83       	std	Y+5, r25	; 0x05
    2f78:	8c 83       	std	Y+4, r24	; 0x04
    2f7a:	8a e7       	ldi	r24, 0x7A	; 122
    2f7c:	9a ed       	ldi	r25, 0xDA	; 218
    2f7e:	a7 e7       	ldi	r26, 0x77	; 119
    2f80:	ba eb       	ldi	r27, 0xBA	; 186
    2f82:	88 83       	st	Y, r24
    2f84:	99 83       	std	Y+1, r25	; 0x01
    2f86:	aa 83       	std	Y+2, r26	; 0x02
    2f88:	bb 83       	std	Y+3, r27	; 0x03
    2f8a:	0e 94 c5 1d 	call	0x3b8a	; 0x3b8a <ModuleControllerGetUniqueID>
    2f8e:	6e 87       	std	Y+14, r22	; 0x0e
    2f90:	7f 87       	std	Y+15, r23	; 0x0f
    2f92:	88 8b       	std	Y+16, r24	; 0x10
    2f94:	99 8b       	std	Y+17, r25	; 0x11
    2f96:	8f ef       	ldi	r24, 0xFF	; 255
    2f98:	8a a7       	std	Y+42, r24	; 0x2a
    2f9a:	8b 8b       	std	Y+19, r24	; 0x13
    2f9c:	1c 8a       	std	Y+20, r1	; 0x14
    2f9e:	84 e0       	ldi	r24, 0x04	; 4
    2fa0:	90 e0       	ldi	r25, 0x00	; 0
    2fa2:	0e 94 9f 27 	call	0x4f3e	; 0x4f3e <EEPROMRead>
    2fa6:	0e 94 ce 18 	call	0x319c	; 0x319c <CellCountExpectedSet>
    2faa:	2a c0       	rjmp	.+84     	; 0x3000 <FrameInit+0xc0>
    2fac:	ec e0       	ldi	r30, 0x0C	; 12
    2fae:	f1 e0       	ldi	r31, 0x01	; 1
    2fb0:	17 a2       	std	Z+39, r1	; 0x27
    2fb2:	11 a6       	std	Z+41, r1	; 0x29
    2fb4:	10 a6       	std	Z+40, r1	; 0x28
    2fb6:	12 a6       	std	Z+42, r1	; 0x2a
    2fb8:	15 a6       	std	Z+45, r1	; 0x2d
    2fba:	16 a6       	std	Z+46, r1	; 0x2e
    2fbc:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <sg_sFrame+0x3e>
    2fc0:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <sg_sFrame+0x3f>
    2fc4:	a0 91 4c 01 	lds	r26, 0x014C	; 0x80014c <sg_sFrame+0x40>
    2fc8:	b0 91 4d 01 	lds	r27, 0x014D	; 0x80014d <sg_sFrame+0x41>
    2fcc:	89 2b       	or	r24, r25
    2fce:	8a 2b       	or	r24, r26
    2fd0:	8b 2b       	or	r24, r27
    2fd2:	b1 f4       	brne	.+44     	; 0x3000 <FrameInit+0xc0>
    2fd4:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <sg_sFrame+0x3e>
    2fd8:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <sg_sFrame+0x3f>
    2fdc:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <sg_sFrame+0x40>
    2fe0:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <sg_sFrame+0x41>
    2fe4:	11 ae       	std	Z+57, r1	; 0x39
    2fe6:	10 ae       	std	Z+56, r1	; 0x38
    2fe8:	13 ae       	std	Z+59, r1	; 0x3b
    2fea:	12 ae       	std	Z+58, r1	; 0x3a
    2fec:	15 ae       	std	Z+61, r1	; 0x3d
    2fee:	14 ae       	std	Z+60, r1	; 0x3c
    2ff0:	8f e9       	ldi	r24, 0x9F	; 159
    2ff2:	95 e1       	ldi	r25, 0x15	; 21
    2ff4:	93 ab       	std	Z+51, r25	; 0x33
    2ff6:	82 ab       	std	Z+50, r24	; 0x32
    2ff8:	95 ab       	std	Z+53, r25	; 0x35
    2ffa:	84 ab       	std	Z+52, r24	; 0x34
    2ffc:	97 ab       	std	Z+55, r25	; 0x37
    2ffe:	86 ab       	std	Z+54, r24	; 0x36
    3000:	8f ef       	ldi	r24, 0xFF	; 255
    3002:	80 93 7e 0b 	sts	0x0B7E, r24	; 0x800b7e <sg_u8CurrentBufferIndex>
    3006:	df 91       	pop	r29
    3008:	cf 91       	pop	r28
    300a:	08 95       	ret

Disassembly of section .text.CellStringPowerStateMachine:

00003974 <CellStringPowerStateMachine>:
    3974:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <sg_eStringPowerState>
    3978:	82 30       	cpi	r24, 0x02	; 2
    397a:	49 f1       	breq	.+82     	; 0x39ce <CellStringPowerStateMachine+0x5a>
    397c:	28 f4       	brcc	.+10     	; 0x3988 <CellStringPowerStateMachine+0x14>
    397e:	88 23       	and	r24, r24
    3980:	41 f0       	breq	.+16     	; 0x3992 <CellStringPowerStateMachine+0x1e>
    3982:	81 30       	cpi	r24, 0x01	; 1
    3984:	91 f0       	breq	.+36     	; 0x39aa <CellStringPowerStateMachine+0x36>
    3986:	32 c0       	rjmp	.+100    	; 0x39ec <CellStringPowerStateMachine+0x78>
    3988:	83 30       	cpi	r24, 0x03	; 3
    398a:	61 f1       	breq	.+88     	; 0x39e4 <CellStringPowerStateMachine+0x70>
    398c:	84 30       	cpi	r24, 0x04	; 4
    398e:	a9 f1       	breq	.+106    	; 0x39fa <CellStringPowerStateMachine+0x86>
    3990:	2d c0       	rjmp	.+90     	; 0x39ec <CellStringPowerStateMachine+0x78>
    3992:	85 b1       	in	r24, 0x05	; 5
    3994:	8f 7e       	andi	r24, 0xEF	; 239
    3996:	85 b9       	out	0x05, r24	; 5
    3998:	81 e0       	ldi	r24, 0x01	; 1
    399a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <sg_eStringPowerState>
    399e:	80 e0       	ldi	r24, 0x00	; 0
    39a0:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <FrameInit>
    39a4:	0e 94 cc 27 	call	0x4f98	; 0x4f98 <SendModuleControllerStatus>
    39a8:	08 95       	ret
    39aa:	85 b1       	in	r24, 0x05	; 5
    39ac:	8f 7e       	andi	r24, 0xEF	; 239
    39ae:	85 b9       	out	0x05, r24	; 5
    39b0:	80 e0       	ldi	r24, 0x00	; 0
    39b2:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <FrameInit>
    39b6:	82 e0       	ldi	r24, 0x02	; 2
    39b8:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <sg_eStringPowerState>
    39bc:	81 e0       	ldi	r24, 0x01	; 1
    39be:	80 93 78 0b 	sts	0x0B78, r24	; 0x800b78 <sg_u8CellStringPowerTimer>
    39c2:	ec e0       	ldi	r30, 0x0C	; 12
    39c4:	f1 e0       	ldi	r31, 0x01	; 1
    39c6:	8f ef       	ldi	r24, 0xFF	; 255
    39c8:	83 8b       	std	Z+19, r24	; 0x13
    39ca:	14 8a       	std	Z+20, r1	; 0x14
    39cc:	08 95       	ret
    39ce:	80 91 78 0b 	lds	r24, 0x0B78	; 0x800b78 <sg_u8CellStringPowerTimer>
    39d2:	81 11       	cpse	r24, r1
    39d4:	12 c0       	rjmp	.+36     	; 0x39fa <CellStringPowerStateMachine+0x86>
    39d6:	85 b1       	in	r24, 0x05	; 5
    39d8:	80 61       	ori	r24, 0x10	; 16
    39da:	85 b9       	out	0x05, r24	; 5
    39dc:	83 e0       	ldi	r24, 0x03	; 3
    39de:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <sg_eStringPowerState>
    39e2:	08 95       	ret
    39e4:	84 e0       	ldi	r24, 0x04	; 4
    39e6:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <sg_eStringPowerState>
    39ea:	08 95       	ret
    39ec:	40 e7       	ldi	r20, 0x70	; 112
    39ee:	52 e0       	ldi	r21, 0x02	; 2
    39f0:	67 e4       	ldi	r22, 0x47	; 71
    39f2:	72 e0       	ldi	r23, 0x02	; 2
    39f4:	80 e0       	ldi	r24, 0x00	; 0
    39f6:	0e 94 bf 24 	call	0x497e	; 0x497e <PlatformAssert>
    39fa:	08 95       	ret

Disassembly of section .text.main:

00000c34 <main>:
 c34:	cf 93       	push	r28
 c36:	df 93       	push	r29
 c38:	cd b7       	in	r28, 0x3d	; 61
 c3a:	de b7       	in	r29, 0x3e	; 62
 c3c:	28 97       	sbiw	r28, 0x08	; 8
 c3e:	0f b6       	in	r0, 0x3f	; 63
 c40:	f8 94       	cli
 c42:	de bf       	out	0x3e, r29	; 62
 c44:	0f be       	out	0x3f, r0	; 63
 c46:	cd bf       	out	0x3d, r28	; 61
 c48:	0e 94 2e 27 	call	0x4e5c	; 0x4e5c <WatchdogOff>
 c4c:	88 b1       	in	r24, 0x08	; 8
 c4e:	8f 7e       	andi	r24, 0xEF	; 239
 c50:	88 b9       	out	0x08, r24	; 8
 c52:	87 b1       	in	r24, 0x07	; 7
 c54:	80 61       	ori	r24, 0x10	; 16
 c56:	87 b9       	out	0x07, r24	; 7
 c58:	87 b1       	in	r24, 0x07	; 7
 c5a:	8d 7f       	andi	r24, 0xFD	; 253
 c5c:	87 b9       	out	0x07, r24	; 7
 c5e:	87 b1       	in	r24, 0x07	; 7
 c60:	80 68       	ori	r24, 0x80	; 128
 c62:	87 b9       	out	0x07, r24	; 7
 c64:	88 b1       	in	r24, 0x08	; 8
 c66:	8f 7e       	andi	r24, 0xEF	; 239
 c68:	88 b9       	out	0x08, r24	; 8
 c6a:	8d b1       	in	r24, 0x0d	; 13
 c6c:	82 60       	ori	r24, 0x02	; 2
 c6e:	8d b9       	out	0x0d, r24	; 13
 c70:	8e b1       	in	r24, 0x0e	; 14
 c72:	8d 7f       	andi	r24, 0xFD	; 253
 c74:	8e b9       	out	0x0e, r24	; 14
 c76:	84 b1       	in	r24, 0x04	; 4
 c78:	80 61       	ori	r24, 0x10	; 16
 c7a:	84 b9       	out	0x04, r24	; 4
 c7c:	85 b1       	in	r24, 0x05	; 5
 c7e:	8f 7e       	andi	r24, 0xEF	; 239
 c80:	85 b9       	out	0x05, r24	; 5
 c82:	84 b7       	in	r24, 0x34	; 52
 c84:	80 93 72 0b 	sts	0x0B72, r24	; 0x800b72 <sg_u8Reason>
 c88:	80 91 72 0b 	lds	r24, 0x0B72	; 0x800b72 <sg_u8Reason>
 c8c:	83 ff       	sbrs	r24, 3
 c8e:	0a c0       	rjmp	.+20     	; 0xca4 <main+0x70>
 c90:	80 91 20 05 	lds	r24, 0x0520	; 0x800520 <sg_eWDTCurrentStatus>
 c94:	ec e0       	ldi	r30, 0x0C	; 12
 c96:	f1 e0       	ldi	r31, 0x01	; 1
 c98:	82 89       	ldd	r24, Z+18	; 0x12
 c9a:	8f 5f       	subi	r24, 0xFF	; 255
 c9c:	82 8b       	std	Z+18, r24	; 0x12
 c9e:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <ModuleControllerStateHandle>
 ca2:	68 c0       	rjmp	.+208    	; 0xd74 <main+0x140>
 ca4:	80 91 72 0b 	lds	r24, 0x0B72	; 0x800b72 <sg_u8Reason>
 ca8:	80 91 72 0b 	lds	r24, 0x0B72	; 0x800b72 <sg_u8Reason>
 cac:	80 91 72 0b 	lds	r24, 0x0B72	; 0x800b72 <sg_u8Reason>
 cb0:	f8 94       	cli
 cb2:	0e 94 0e 28 	call	0x501c	; 0x501c <SetSysclock>
 cb6:	0e 94 20 22 	call	0x4440	; 0x4440 <TimerInit>
 cba:	0e 94 96 23 	call	0x472c	; 0x472c <vUARTInit>
 cbe:	0e 94 20 12 	call	0x2440	; 0x2440 <ADCInit>
 cc2:	0e 94 84 1d 	call	0x3b08	; 0x3b08 <STORE_Init>
 cc6:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <sg_bSDCardReady>
 cca:	81 e0       	ldi	r24, 0x01	; 1
 ccc:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <FrameInit>
 cd0:	8a b1       	in	r24, 0x0a	; 10
 cd2:	8f 7b       	andi	r24, 0xBF	; 191
 cd4:	8a b9       	out	0x0a, r24	; 10
 cd6:	8b b1       	in	r24, 0x0b	; 11
 cd8:	80 64       	ori	r24, 0x40	; 64
 cda:	8b b9       	out	0x0b, r24	; 11
 cdc:	11 e0       	ldi	r17, 0x01	; 1
 cde:	1b bb       	out	0x1b, r17	; 27
 ce0:	82 e0       	ldi	r24, 0x02	; 2
 ce2:	8b bb       	out	0x1b, r24	; 27
 ce4:	84 e0       	ldi	r24, 0x04	; 4
 ce6:	8b bb       	out	0x1b, r24	; 27
 ce8:	88 e0       	ldi	r24, 0x08	; 8
 cea:	8b bb       	out	0x1b, r24	; 27
 cec:	ec e6       	ldi	r30, 0x6C	; 108
 cee:	f0 e0       	ldi	r31, 0x00	; 0
 cf0:	80 81       	ld	r24, Z
 cf2:	80 64       	ori	r24, 0x40	; 64
 cf4:	80 83       	st	Z, r24
 cf6:	8b b3       	in	r24, 0x1b	; 27
 cf8:	84 60       	ori	r24, 0x04	; 4
 cfa:	8b bb       	out	0x1b, r24	; 27
 cfc:	8c ed       	ldi	r24, 0xDC	; 220
 cfe:	98 e0       	ldi	r25, 0x08	; 8
 d00:	0e 94 14 28 	call	0x5028	; 0x5028 <CANSetRXCallback>
 d04:	0e 94 98 1b 	call	0x3730	; 0x3730 <CANInit>
 d08:	10 92 1f 05 	sts	0x051F, r1	; 0x80051f <sg_u8ModuleRegistrationID>
 d0c:	10 92 19 05 	sts	0x0519, r1	; 0x800519 <sg_bModuleRegistered>
 d10:	10 92 7b 0b 	sts	0x0B7B, r1	; 0x800b7b <sg_bIgnoreStatusRequests>
 d14:	80 e0       	ldi	r24, 0x00	; 0
 d16:	0e 94 19 28 	call	0x5032	; 0x5032 <ModuleControllerStateSet>
 d1a:	10 93 1a 05 	sts	0x051A, r17	; 0x80051a <sg_bSendAnnouncement>
 d1e:	10 92 17 05 	sts	0x0517, r1	; 0x800517 <sg_bPackControllerTimeout>
 d22:	10 92 16 05 	sts	0x0516, r1	; 0x800516 <sg_bSendModuleControllerStatus>
 d26:	10 92 15 05 	sts	0x0515, r1	; 0x800515 <sg_bSendCellStatus>
 d2a:	10 92 14 05 	sts	0x0514, r1	; 0x800514 <sg_bSendHardwareDetail>
 d2e:	10 92 13 05 	sts	0x0513, r1	; 0x800513 <sg_bSendCellCommStatus>
 d32:	10 92 12 05 	sts	0x0512, r1	; 0x800512 <sg_bCellBalanceReady>
 d36:	10 92 11 05 	sts	0x0511, r1	; 0x800511 <sg_bCellBalancedOnce>
 d3a:	10 92 10 05 	sts	0x0510, r1	; 0x800510 <sg_bStopDischarge>
 d3e:	10 92 0f 05 	sts	0x050F, r1	; 0x80050f <sg_bOvercurrentSignal>
 d42:	10 92 1c 05 	sts	0x051C, r1	; 0x80051c <sg_u8CellStatusTarget>
 d46:	10 92 1b 05 	sts	0x051B, r1	; 0x80051b <sg_u8CellStatus>
 d4a:	10 92 1e 05 	sts	0x051E, r1	; 0x80051e <sg_u8SOC>
 d4e:	10 92 1d 05 	sts	0x051D, r1	; 0x80051d <sg_u8SOH>
 d52:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <sg_u8SequentailCellCountMismatches>
 d56:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <RTCInit>
 d5a:	85 e0       	ldi	r24, 0x05	; 5
 d5c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <sg_eModuleControllerStateCurrent>
 d60:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <sg_eModuleControllerStateTarget>
 d64:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <sg_eModuleControllerStateMax>
 d68:	10 92 19 05 	sts	0x0519, r1	; 0x800519 <sg_bModuleRegistered>
 d6c:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <sg_eStringPowerState>
 d70:	10 93 0b 01 	sts	0x010B, r17	; 0x80010b <sg_eFrameStatus>
 d74:	78 94       	sei
 d76:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <sg_bNewTick>
 d7a:	88 23       	and	r24, r24
 d7c:	e1 f3       	breq	.-8      	; 0xd76 <main+0x142>
 d7e:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <sg_bNewTick>
 d82:	0e 94 4c 1a 	call	0x3498	; 0x3498 <CANCheckTxStatus>
 d86:	0e 94 58 13 	call	0x26b0	; 0x26b0 <CANCheckHealth>
 d8a:	80 91 19 05 	lds	r24, 0x0519	; 0x800519 <sg_bModuleRegistered>
 d8e:	81 11       	cpse	r24, r1
 d90:	22 c0       	rjmp	.+68     	; 0xdd6 <main+0x1a2>
 d92:	80 91 7d 0b 	lds	r24, 0x0B7D	; 0x800b7d <sg_bAnnouncementPending>
 d96:	88 23       	and	r24, r24
 d98:	11 f1       	breq	.+68     	; 0xdde <main+0x1aa>
 d9a:	80 91 7c 0b 	lds	r24, 0x0B7C	; 0x800b7c <sg_u8AnnouncementDelayTicks>
 d9e:	88 23       	and	r24, r24
 da0:	29 f0       	breq	.+10     	; 0xdac <main+0x178>
 da2:	80 91 7c 0b 	lds	r24, 0x0B7C	; 0x800b7c <sg_u8AnnouncementDelayTicks>
 da6:	81 50       	subi	r24, 0x01	; 1
 da8:	80 93 7c 0b 	sts	0x0B7C, r24	; 0x800b7c <sg_u8AnnouncementDelayTicks>
 dac:	80 91 7c 0b 	lds	r24, 0x0B7C	; 0x800b7c <sg_u8AnnouncementDelayTicks>
 db0:	81 11       	cpse	r24, r1
 db2:	15 c0       	rjmp	.+42     	; 0xdde <main+0x1aa>
 db4:	81 e0       	ldi	r24, 0x01	; 1
 db6:	80 93 1a 05 	sts	0x051A, r24	; 0x80051a <sg_bSendAnnouncement>
 dba:	10 92 7d 0b 	sts	0x0B7D, r1	; 0x800b7d <sg_bAnnouncementPending>
 dbe:	83 e5       	ldi	r24, 0x53	; 83
 dc0:	92 e0       	ldi	r25, 0x02	; 2
 dc2:	a0 e0       	ldi	r26, 0x00	; 0
 dc4:	af 93       	push	r26
 dc6:	9f 93       	push	r25
 dc8:	8f 93       	push	r24
 dca:	0e 94 ec 27 	call	0x4fd8	; 0x4fd8 <DebugOut>
 dce:	0f 90       	pop	r0
 dd0:	0f 90       	pop	r0
 dd2:	0f 90       	pop	r0
 dd4:	04 c0       	rjmp	.+8      	; 0xdde <main+0x1aa>
 dd6:	ce 01       	movw	r24, r28
 dd8:	01 96       	adiw	r24, 0x01	; 1
 dda:	0e 94 08 04 	call	0x810	; 0x810 <ControllerStatusMessagesSend>
 dde:	80 91 17 05 	lds	r24, 0x0517	; 0x800517 <sg_bPackControllerTimeout>
 de2:	88 23       	and	r24, r24
 de4:	81 f0       	breq	.+32     	; 0xe06 <main+0x1d2>
 de6:	10 92 17 05 	sts	0x0517, r1	; 0x800517 <sg_bPackControllerTimeout>
 dea:	10 92 1f 05 	sts	0x051F, r1	; 0x80051f <sg_u8ModuleRegistrationID>
 dee:	10 92 19 05 	sts	0x0519, r1	; 0x800519 <sg_bModuleRegistered>
 df2:	10 92 7b 0b 	sts	0x0B7B, r1	; 0x800b7b <sg_bIgnoreStatusRequests>
 df6:	81 e0       	ldi	r24, 0x01	; 1
 df8:	80 93 1a 05 	sts	0x051A, r24	; 0x80051a <sg_bSendAnnouncement>
 dfc:	0e 94 cc 27 	call	0x4f98	; 0x4f98 <SendModuleControllerStatus>
 e00:	80 e0       	ldi	r24, 0x00	; 0
 e02:	0e 94 19 28 	call	0x5032	; 0x5032 <ModuleControllerStateSet>
 e06:	ef e6       	ldi	r30, 0x6F	; 111
 e08:	f0 e0       	ldi	r31, 0x00	; 0
 e0a:	90 81       	ld	r25, Z
 e0c:	80 81       	ld	r24, Z
 e0e:	8d 7f       	andi	r24, 0xFD	; 253
 e10:	80 83       	st	Z, r24
 e12:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <sg_eFrameStatus>
 e16:	20 91 79 0b 	lds	r18, 0x0B79	; 0x800b79 <sg_bFrameStart>
 e1a:	90 83       	st	Z, r25
 e1c:	81 30       	cpi	r24, 0x01	; 1
 e1e:	09 f0       	breq	.+2      	; 0xe22 <main+0x1ee>
 e20:	57 c0       	rjmp	.+174    	; 0xed0 <main+0x29c>
 e22:	22 23       	and	r18, r18
 e24:	09 f4       	brne	.+2      	; 0xe28 <main+0x1f4>
 e26:	4b c0       	rjmp	.+150    	; 0xebe <main+0x28a>
 e28:	10 92 79 0b 	sts	0x0B79, r1	; 0x800b79 <sg_bFrameStart>
 e2c:	0e 94 ba 1c 	call	0x3974	; 0x3974 <CellStringPowerStateMachine>
 e30:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <vUARTRXEnd>
 e34:	ce 01       	movw	r24, r28
 e36:	01 96       	adiw	r24, 0x01	; 1
 e38:	0e 94 86 07 	call	0xf0c	; 0xf0c <CellStringProcess>
 e3c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <sg_eStringPowerState>
 e40:	84 30       	cpi	r24, 0x04	; 4
 e42:	d9 f4       	brne	.+54     	; 0xe7a <main+0x246>
 e44:	ec e0       	ldi	r30, 0x0C	; 12
 e46:	f1 e0       	ldi	r31, 0x01	; 1
 e48:	95 a5       	ldd	r25, Z+45	; 0x2d
 e4a:	85 89       	ldd	r24, Z+21	; 0x15
 e4c:	98 17       	cp	r25, r24
 e4e:	99 f0       	breq	.+38     	; 0xe76 <main+0x242>
 e50:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <sg_sFrame+0x15>
 e54:	88 23       	and	r24, r24
 e56:	79 f0       	breq	.+30     	; 0xe76 <main+0x242>
 e58:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <sg_u8SequentailCellCountMismatches>
 e5c:	8f 5f       	subi	r24, 0xFF	; 255
 e5e:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <sg_u8SequentailCellCountMismatches>
 e62:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <sg_u8SequentailCellCountMismatches>
 e66:	85 30       	cpi	r24, 0x05	; 5
 e68:	40 f0       	brcs	.+16     	; 0xe7a <main+0x246>
 e6a:	81 e0       	ldi	r24, 0x01	; 1
 e6c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <sg_eStringPowerState>
 e70:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <sg_u8SequentailCellCountMismatches>
 e74:	02 c0       	rjmp	.+4      	; 0xe7a <main+0x246>
 e76:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <sg_u8SequentailCellCountMismatches>
 e7a:	80 91 1a 05 	lds	r24, 0x051A	; 0x80051a <sg_bSendAnnouncement>
 e7e:	88 23       	and	r24, r24
 e80:	f1 f0       	breq	.+60     	; 0xebe <main+0x28a>
 e82:	86 e5       	ldi	r24, 0x56	; 86
 e84:	89 83       	std	Y+1, r24	; 0x01
 e86:	80 e2       	ldi	r24, 0x20	; 32
 e88:	8a 83       	std	Y+2, r24	; 0x02
 e8a:	82 e0       	ldi	r24, 0x02	; 2
 e8c:	8b 83       	std	Y+3, r24	; 0x03
 e8e:	83 e0       	ldi	r24, 0x03	; 3
 e90:	8c 83       	std	Y+4, r24	; 0x04
 e92:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <sg_sFrame+0xe>
 e96:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <sg_sFrame+0xf>
 e9a:	a0 91 1c 01 	lds	r26, 0x011C	; 0x80011c <sg_sFrame+0x10>
 e9e:	b0 91 1d 01 	lds	r27, 0x011D	; 0x80011d <sg_sFrame+0x11>
 ea2:	8d 83       	std	Y+5, r24	; 0x05
 ea4:	9e 83       	std	Y+6, r25	; 0x06
 ea6:	af 83       	std	Y+7, r26	; 0x07
 ea8:	b8 87       	std	Y+8, r27	; 0x08
 eaa:	48 e0       	ldi	r20, 0x08	; 8
 eac:	be 01       	movw	r22, r28
 eae:	6f 5f       	subi	r22, 0xFF	; 255
 eb0:	7f 4f       	sbci	r23, 0xFF	; 255
 eb2:	80 e0       	ldi	r24, 0x00	; 0
 eb4:	0e 94 65 24 	call	0x48ca	; 0x48ca <CANSendMessage>
 eb8:	81 11       	cpse	r24, r1
 eba:	10 92 1a 05 	sts	0x051A, r1	; 0x80051a <sg_bSendAnnouncement>
 ebe:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <ModuleControllerStateHandle>
 ec2:	80 91 0f 05 	lds	r24, 0x050F	; 0x80050f <sg_bOvercurrentSignal>
 ec6:	88 23       	and	r24, r24
 ec8:	b1 f0       	breq	.+44     	; 0xef6 <main+0x2c2>
 eca:	10 92 0f 05 	sts	0x050F, r1	; 0x80050f <sg_bOvercurrentSignal>
 ece:	13 c0       	rjmp	.+38     	; 0xef6 <main+0x2c2>
 ed0:	22 23       	and	r18, r18
 ed2:	89 f0       	breq	.+34     	; 0xef6 <main+0x2c2>
 ed4:	10 92 79 0b 	sts	0x0B79, r1	; 0x800b79 <sg_bFrameStart>
 ed8:	0e 94 ba 1c 	call	0x3974	; 0x3974 <CellStringPowerStateMachine>
 edc:	80 e0       	ldi	r24, 0x00	; 0
 ede:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <FrameInit>
 ee2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <sg_eStringPowerState>
 ee6:	84 30       	cpi	r24, 0x04	; 4
 ee8:	31 f4       	brne	.+12     	; 0xef6 <main+0x2c2>
 eea:	0e 94 95 27 	call	0x4f2a	; 0x4f2a <vUARTInitReceive>
 eee:	0e 94 1e 28 	call	0x503c	; 0x503c <vUARTRXReset>
 ef2:	0e 94 4d 21 	call	0x429a	; 0x429a <vUARTStarttx>
 ef6:	80 91 0e 05 	lds	r24, 0x050E	; 0x80050e <sg_bADCUpdate>
 efa:	88 23       	and	r24, r24
 efc:	21 f0       	breq	.+8      	; 0xf06 <main+0x2d2>
 efe:	10 92 0e 05 	sts	0x050E, r1	; 0x80050e <sg_bADCUpdate>
 f02:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <ModuleCurrentConvertReadings>
 f06:	0e 94 01 25 	call	0x4a02	; 0x4a02 <ADCStartConversion>
 f0a:	35 cf       	rjmp	.-406    	; 0xd76 <main+0x142>

Disassembly of section .text.IsLeapYear:

00004798 <IsLeapYear>:
	return( bResult );
}

// Returns true if u16Year is a leap year
static bool IsLeapYear(uint16_t u16Year)
{
    4798:	9c 01       	movw	r18, r24
	bool bLeapYear = false;
	
	if ((u16Year % 400) == 0)
    479a:	60 e9       	ldi	r22, 0x90	; 144
    479c:	71 e0       	ldi	r23, 0x01	; 1
    479e:	0e 94 3e 25 	call	0x4a7c	; 0x4a7c <__udivmodhi4>
    47a2:	89 2b       	or	r24, r25
    47a4:	69 f0       	breq	.+26     	; 0x47c0 <IsLeapYear+0x28>
	{
		bLeapYear = true;
	}
	else
	if ((u16Year % 100) == 0)
    47a6:	c9 01       	movw	r24, r18
    47a8:	64 e6       	ldi	r22, 0x64	; 100
    47aa:	70 e0       	ldi	r23, 0x00	; 0
    47ac:	0e 94 3e 25 	call	0x4a7c	; 0x4a7c <__udivmodhi4>
    47b0:	89 2b       	or	r24, r25
    47b2:	41 f0       	breq	.+16     	; 0x47c4 <IsLeapYear+0x2c>
	{
		// Not a leap year if divisible by 100 but not by 400
	}
	else
	if ((u16Year % 4) == 0)
    47b4:	23 70       	andi	r18, 0x03	; 3
    47b6:	33 27       	eor	r19, r19
    47b8:	23 2b       	or	r18, r19
    47ba:	31 f0       	breq	.+12     	; 0x47c8 <IsLeapYear+0x30>
}

// Returns true if u16Year is a leap year
static bool IsLeapYear(uint16_t u16Year)
{
	bool bLeapYear = false;
    47bc:	80 e0       	ldi	r24, 0x00	; 0
    47be:	08 95       	ret
	
	if ((u16Year % 400) == 0)
	{
		bLeapYear = true;
    47c0:	81 e0       	ldi	r24, 0x01	; 1
    47c2:	08 95       	ret
}

// Returns true if u16Year is a leap year
static bool IsLeapYear(uint16_t u16Year)
{
	bool bLeapYear = false;
    47c4:	80 e0       	ldi	r24, 0x00	; 0
    47c6:	08 95       	ret
		// Not a leap year if divisible by 100 but not by 400
	}
	else
	if ((u16Year % 4) == 0)
	{
		bLeapYear = true;
    47c8:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return(bLeapYear);
}
    47ca:	08 95       	ret

Disassembly of section .text.RTCStartTransaction:

0000457c <RTCStartTransaction>:
}

static bool RTCStartTransaction( uint8_t u8Address, 
								 bool bRead, 
								 bool bAllowUnstick )
{
    457c:	ff 92       	push	r15
    457e:	0f 93       	push	r16
    4580:	1f 93       	push	r17
    4582:	cf 93       	push	r28
    4584:	df 93       	push	r29
    4586:	f8 2e       	mov	r15, r24
    4588:	06 2f       	mov	r16, r22
    458a:	14 2f       	mov	r17, r20
	bool bResult = false;
	uint8_t u8Tries = RTC_MAX_ADDRESS_TRIES;
    458c:	d3 e0       	ldi	r29, 0x03	; 3

static bool RTCStartTransaction( uint8_t u8Address, 
								 bool bRead, 
								 bool bAllowUnstick )
{
	bool bResult = false;
    458e:	c0 e0       	ldi	r28, 0x00	; 0
	uint8_t u8Tries = RTC_MAX_ADDRESS_TRIES;
	
	while( (false == bResult) && u8Tries )
    4590:	0c c0       	rjmp	.+24     	; 0x45aa <RTCStartTransaction+0x2e>
	{
		u8Tries--;
    4592:	d1 50       	subi	r29, 0x01	; 1
		
		bResult = I2CStartTransaction( u8Address, bRead );
    4594:	60 2f       	mov	r22, r16
    4596:	8f 2d       	mov	r24, r15
    4598:	0e 94 16 25 	call	0x4a2c	; 0x4a2c <I2CStartTransaction>
    459c:	c8 2f       	mov	r28, r24
	
		if( false == bAllowUnstick )
    459e:	11 23       	and	r17, r17
    45a0:	41 f0       	breq	.+16     	; 0x45b2 <RTCStartTransaction+0x36>
		{
			break;
		}
		
		// Unstick and retry on failure
		if( false == bResult )
    45a2:	81 11       	cpse	r24, r1
    45a4:	02 c0       	rjmp	.+4      	; 0x45aa <RTCStartTransaction+0x2e>
		{
			I2CUnstick();
    45a6:	0e 94 21 23 	call	0x4642	; 0x4642 <I2CUnstick>
								 bool bAllowUnstick )
{
	bool bResult = false;
	uint8_t u8Tries = RTC_MAX_ADDRESS_TRIES;
	
	while( (false == bResult) && u8Tries )
    45aa:	c1 11       	cpse	r28, r1
    45ac:	02 c0       	rjmp	.+4      	; 0x45b2 <RTCStartTransaction+0x36>
    45ae:	d1 11       	cpse	r29, r1
    45b0:	f0 cf       	rjmp	.-32     	; 0x4592 <RTCStartTransaction+0x16>
			I2CUnstick();
		}
	}
	
	return( bResult );
}
    45b2:	8c 2f       	mov	r24, r28
    45b4:	df 91       	pop	r29
    45b6:	cf 91       	pop	r28
    45b8:	1f 91       	pop	r17
    45ba:	0f 91       	pop	r16
    45bc:	ff 90       	pop	r15
    45be:	08 95       	ret

Disassembly of section .text.StructTMToHW:

00004346 <StructTMToHW>:
}

// Converts struct tm to SMCP7940NTime structure
static void StructTMToHW(struct tm *psTimeTM,
						 SMCP7940NTime *psTime)
{
    4346:	cf 93       	push	r28
    4348:	df 93       	push	r29
    434a:	dc 01       	movw	r26, r24
    434c:	fb 01       	movw	r30, r22
	memset((void *) psTime, 0, sizeof(*psTime));
    434e:	87 e0       	ldi	r24, 0x07	; 7
    4350:	eb 01       	movw	r28, r22
    4352:	19 92       	st	Y+, r1
    4354:	8a 95       	dec	r24
    4356:	e9 f7       	brne	.-6      	; 0x4352 <StructTMToHW+0xc>
	
	psTime->u8Seconds = psTimeTM->tm_sec;
    4358:	8c 91       	ld	r24, X
    435a:	80 83       	st	Z, r24
	psTime->u8Minutes = psTimeTM->tm_min;
    435c:	12 96       	adiw	r26, 0x02	; 2
    435e:	8c 91       	ld	r24, X
    4360:	12 97       	sbiw	r26, 0x02	; 2
    4362:	81 83       	std	Z+1, r24	; 0x01
	psTime->u8Hours = psTimeTM->tm_hour;
    4364:	14 96       	adiw	r26, 0x04	; 4
    4366:	8c 91       	ld	r24, X
    4368:	14 97       	sbiw	r26, 0x04	; 4
    436a:	82 83       	std	Z+2, r24	; 0x02
	psTime->u8Day = psTimeTM->tm_mday;
    436c:	16 96       	adiw	r26, 0x06	; 6
    436e:	8c 91       	ld	r24, X
    4370:	16 97       	sbiw	r26, 0x06	; 6
    4372:	84 83       	std	Z+4, r24	; 0x04
	psTime->u8Month = psTimeTM->tm_mon;
    4374:	18 96       	adiw	r26, 0x08	; 8
    4376:	8c 91       	ld	r24, X
    4378:	18 97       	sbiw	r26, 0x08	; 8
    437a:	85 83       	std	Z+5, r24	; 0x05
	
	if (psTimeTM->tm_year > (2099-1900))
    437c:	1a 96       	adiw	r26, 0x0a	; 10
    437e:	8d 91       	ld	r24, X+
    4380:	9c 91       	ld	r25, X
    4382:	1b 97       	sbiw	r26, 0x0b	; 11
    4384:	88 3c       	cpi	r24, 0xC8	; 200
    4386:	91 05       	cpc	r25, r1
    4388:	1c f0       	brlt	.+6      	; 0x4390 <StructTMToHW+0x4a>
	{
		psTime->u8Year = psTimeTM->tm_year - 2100;
    438a:	84 53       	subi	r24, 0x34	; 52
    438c:	86 83       	std	Z+6, r24	; 0x06
    438e:	02 c0       	rjmp	.+4      	; 0x4394 <StructTMToHW+0x4e>
	}
	else
	{
		psTime->u8Year = psTimeTM->tm_year - 2000;
    4390:	80 5d       	subi	r24, 0xD0	; 208
    4392:	86 83       	std	Z+6, r24	; 0x06
	}
	
}
    4394:	df 91       	pop	r29
    4396:	cf 91       	pop	r28
    4398:	08 95       	ret

Disassembly of section .text.HWToStructTM:

00003c86 <HWToStructTM>:
}

// Converts an SMCP7940NTime structure to struct tm
static void HWToStructTM(SMCP7940NTime *psTime,
						 struct tm *psTimeTM)
{
    3c86:	cf 93       	push	r28
    3c88:	df 93       	push	r29
    3c8a:	dc 01       	movw	r26, r24
    3c8c:	fb 01       	movw	r30, r22
	// At this point, the time is in STime and we should
	// turn that in to time_t
	memset((void *) psTimeTM, 0, sizeof(*psTimeTM));
    3c8e:	89 e1       	ldi	r24, 0x19	; 25
    3c90:	eb 01       	movw	r28, r22
    3c92:	19 92       	st	Y+, r1
    3c94:	8a 95       	dec	r24
    3c96:	e9 f7       	brne	.-6      	; 0x3c92 <HWToStructTM+0xc>
	
	psTimeTM->tm_sec = psTime->u8Seconds;
    3c98:	8c 91       	ld	r24, X
    3c9a:	90 e0       	ldi	r25, 0x00	; 0
    3c9c:	91 83       	std	Z+1, r25	; 0x01
    3c9e:	80 83       	st	Z, r24
	psTimeTM->tm_min = psTime->u8Minutes;
    3ca0:	11 96       	adiw	r26, 0x01	; 1
    3ca2:	8c 91       	ld	r24, X
    3ca4:	11 97       	sbiw	r26, 0x01	; 1
    3ca6:	90 e0       	ldi	r25, 0x00	; 0
    3ca8:	93 83       	std	Z+3, r25	; 0x03
    3caa:	82 83       	std	Z+2, r24	; 0x02
	psTimeTM->tm_hour = psTime->u8Hours;
    3cac:	12 96       	adiw	r26, 0x02	; 2
    3cae:	8c 91       	ld	r24, X
    3cb0:	12 97       	sbiw	r26, 0x02	; 2
    3cb2:	90 e0       	ldi	r25, 0x00	; 0
    3cb4:	95 83       	std	Z+5, r25	; 0x05
    3cb6:	84 83       	std	Z+4, r24	; 0x04
	psTimeTM->tm_mday = psTime->u8Day;
    3cb8:	14 96       	adiw	r26, 0x04	; 4
    3cba:	8c 91       	ld	r24, X
    3cbc:	14 97       	sbiw	r26, 0x04	; 4
    3cbe:	90 e0       	ldi	r25, 0x00	; 0
    3cc0:	97 83       	std	Z+7, r25	; 0x07
    3cc2:	86 83       	std	Z+6, r24	; 0x06
	psTimeTM->tm_mon = psTime->u8Month - 1;
    3cc4:	15 96       	adiw	r26, 0x05	; 5
    3cc6:	8c 91       	ld	r24, X
    3cc8:	15 97       	sbiw	r26, 0x05	; 5
    3cca:	90 e0       	ldi	r25, 0x00	; 0
    3ccc:	01 97       	sbiw	r24, 0x01	; 1
    3cce:	91 87       	std	Z+9, r25	; 0x09
    3cd0:	80 87       	std	Z+8, r24	; 0x08
	
	if (psTime->u8Year < YEAR_ROLLOVER_CUTOFF)
    3cd2:	16 96       	adiw	r26, 0x06	; 6
    3cd4:	8c 91       	ld	r24, X
    3cd6:	84 31       	cpi	r24, 0x14	; 20
    3cd8:	30 f4       	brcc	.+12     	; 0x3ce6 <HWToStructTM+0x60>
	{
		psTimeTM->tm_year = 2100 + psTime->u8Year;
    3cda:	90 e0       	ldi	r25, 0x00	; 0
    3cdc:	8c 5c       	subi	r24, 0xCC	; 204
    3cde:	97 4f       	sbci	r25, 0xF7	; 247
    3ce0:	93 87       	std	Z+11, r25	; 0x0b
    3ce2:	82 87       	std	Z+10, r24	; 0x0a
    3ce4:	05 c0       	rjmp	.+10     	; 0x3cf0 <HWToStructTM+0x6a>
	}
	else
	{
		psTimeTM->tm_year = 2000 + psTime->u8Year;
    3ce6:	90 e0       	ldi	r25, 0x00	; 0
    3ce8:	80 53       	subi	r24, 0x30	; 48
    3cea:	98 4f       	sbci	r25, 0xF8	; 248
    3cec:	93 87       	std	Z+11, r25	; 0x0b
    3cee:	82 87       	std	Z+10, r24	; 0x0a
	}	
	
	psTimeTM->tm_year -= 1900;
    3cf0:	82 85       	ldd	r24, Z+10	; 0x0a
    3cf2:	93 85       	ldd	r25, Z+11	; 0x0b
    3cf4:	8c 56       	subi	r24, 0x6C	; 108
    3cf6:	97 40       	sbci	r25, 0x07	; 7
    3cf8:	93 87       	std	Z+11, r25	; 0x0b
    3cfa:	82 87       	std	Z+10, r24	; 0x0a
}
    3cfc:	df 91       	pop	r29
    3cfe:	cf 91       	pop	r28
    3d00:	08 95       	ret

Disassembly of section .text.__vector_10:

000039fc <__vector_10>:
// # Of seconds since January 1, 1970
static volatile uint64_t sg_u64Time;

// Called once per second on rev 1 and newer hardware
ISR(INT3_vect, ISR_NOBLOCK)
{
    39fc:	78 94       	sei
    39fe:	1f 92       	push	r1
    3a00:	0f 92       	push	r0
    3a02:	0f b6       	in	r0, 0x3f	; 63
    3a04:	0f 92       	push	r0
    3a06:	11 24       	eor	r1, r1
    3a08:	2f 93       	push	r18
    3a0a:	3f 93       	push	r19
    3a0c:	4f 93       	push	r20
    3a0e:	5f 93       	push	r21
    3a10:	6f 93       	push	r22
    3a12:	7f 93       	push	r23
    3a14:	8f 93       	push	r24
    3a16:	9f 93       	push	r25
    3a18:	af 93       	push	r26
	EIFR |= (1 << INTF3);
    3a1a:	8c b3       	in	r24, 0x1c	; 28
    3a1c:	88 60       	ori	r24, 0x08	; 8
    3a1e:	8c bb       	out	0x1c, r24	; 28
	sg_u64Time++;
    3a20:	20 91 3d 0b 	lds	r18, 0x0B3D	; 0x800b3d <sg_u64Time>
    3a24:	30 91 3e 0b 	lds	r19, 0x0B3E	; 0x800b3e <sg_u64Time+0x1>
    3a28:	40 91 3f 0b 	lds	r20, 0x0B3F	; 0x800b3f <sg_u64Time+0x2>
    3a2c:	50 91 40 0b 	lds	r21, 0x0B40	; 0x800b40 <sg_u64Time+0x3>
    3a30:	60 91 41 0b 	lds	r22, 0x0B41	; 0x800b41 <sg_u64Time+0x4>
    3a34:	70 91 42 0b 	lds	r23, 0x0B42	; 0x800b42 <sg_u64Time+0x5>
    3a38:	80 91 43 0b 	lds	r24, 0x0B43	; 0x800b43 <sg_u64Time+0x6>
    3a3c:	90 91 44 0b 	lds	r25, 0x0B44	; 0x800b44 <sg_u64Time+0x7>
    3a40:	a1 e0       	ldi	r26, 0x01	; 1
    3a42:	0e 94 53 27 	call	0x4ea6	; 0x4ea6 <__adddi3_s8>
    3a46:	20 93 3d 0b 	sts	0x0B3D, r18	; 0x800b3d <sg_u64Time>
    3a4a:	30 93 3e 0b 	sts	0x0B3E, r19	; 0x800b3e <sg_u64Time+0x1>
    3a4e:	40 93 3f 0b 	sts	0x0B3F, r20	; 0x800b3f <sg_u64Time+0x2>
    3a52:	50 93 40 0b 	sts	0x0B40, r21	; 0x800b40 <sg_u64Time+0x3>
    3a56:	60 93 41 0b 	sts	0x0B41, r22	; 0x800b41 <sg_u64Time+0x4>
    3a5a:	70 93 42 0b 	sts	0x0B42, r23	; 0x800b42 <sg_u64Time+0x5>
    3a5e:	80 93 43 0b 	sts	0x0B43, r24	; 0x800b43 <sg_u64Time+0x6>
    3a62:	90 93 44 0b 	sts	0x0B44, r25	; 0x800b44 <sg_u64Time+0x7>
}
    3a66:	af 91       	pop	r26
    3a68:	9f 91       	pop	r25
    3a6a:	8f 91       	pop	r24
    3a6c:	7f 91       	pop	r23
    3a6e:	6f 91       	pop	r22
    3a70:	5f 91       	pop	r21
    3a72:	4f 91       	pop	r20
    3a74:	3f 91       	pop	r19
    3a76:	2f 91       	pop	r18
    3a78:	0f 90       	pop	r0
    3a7a:	0f be       	out	0x3f, r0	; 63
    3a7c:	0f 90       	pop	r0
    3a7e:	1f 90       	pop	r1
    3a80:	18 95       	reti

Disassembly of section .text.RTCReadRegisters:

00003c08 <RTCReadRegisters>:
}

bool RTCReadRegisters( uint8_t u8RegisterAddr, 
					   uint8_t* pu8Data, 
					   uint8_t u8Length )
{
    3c08:	ff 92       	push	r15
    3c0a:	0f 93       	push	r16
    3c0c:	1f 93       	push	r17
    3c0e:	cf 93       	push	r28
    3c10:	df 93       	push	r29
    3c12:	f8 2e       	mov	r15, r24
    3c14:	8b 01       	movw	r16, r22
    3c16:	c4 2f       	mov	r28, r20
	bool bResult;
	
	MBASSERT( u8Length >= 1 );
    3c18:	41 11       	cpse	r20, r1
    3c1a:	07 c0       	rjmp	.+14     	; 0x3c2a <RTCReadRegisters+0x22>
    3c1c:	4f e5       	ldi	r20, 0x5F	; 95
    3c1e:	50 e0       	ldi	r21, 0x00	; 0
    3c20:	66 ef       	ldi	r22, 0xF6	; 246
    3c22:	72 e0       	ldi	r23, 0x02	; 2
    3c24:	80 e0       	ldi	r24, 0x00	; 0
    3c26:	0e 94 bf 24 	call	0x497e	; 0x497e <PlatformAssert>
	
	// First send device address and write register address
	bResult = RTCStartTransaction( RTC_ADDRESS, false, true );
    3c2a:	41 e0       	ldi	r20, 0x01	; 1
    3c2c:	60 e0       	ldi	r22, 0x00	; 0
    3c2e:	8e ed       	ldi	r24, 0xDE	; 222
    3c30:	0e 94 be 22 	call	0x457c	; 0x457c <RTCStartTransaction>
    3c34:	d8 2f       	mov	r29, r24
	
	// Couldn't get an ACK?  Give up now
	if( false == bResult )
    3c36:	88 23       	and	r24, r24
    3c38:	e9 f0       	breq	.+58     	; 0x3c74 <RTCReadRegisters+0x6c>
	{
		goto errorExit;
	}
	
	// Send the register address
	bResult = I2CTxByte( u8RegisterAddr );
    3c3a:	8f 2d       	mov	r24, r15
    3c3c:	0e 94 6f 1f 	call	0x3ede	; 0x3ede <I2CTxByte>
    3c40:	d8 2f       	mov	r29, r24
	
	if( false == bResult )
    3c42:	88 23       	and	r24, r24
    3c44:	b9 f0       	breq	.+46     	; 0x3c74 <RTCReadRegisters+0x6c>
	{
		goto errorExit;
	}
	
	// Send repeated start with read
	bResult = RTCStartTransaction( RTC_ADDRESS, true, false );
    3c46:	40 e0       	ldi	r20, 0x00	; 0
    3c48:	61 e0       	ldi	r22, 0x01	; 1
    3c4a:	8e ed       	ldi	r24, 0xDE	; 222
    3c4c:	0e 94 be 22 	call	0x457c	; 0x457c <RTCStartTransaction>
    3c50:	d8 2f       	mov	r29, r24
	
	// Couldn't get an ACK?  Give up now
	if( false == bResult )
    3c52:	81 11       	cpse	r24, r1
    3c54:	08 c0       	rjmp	.+16     	; 0x3c66 <RTCReadRegisters+0x5e>
    3c56:	0e c0       	rjmp	.+28     	; 0x3c74 <RTCReadRegisters+0x6c>
		goto errorExit;
	}
	
	while( u8Length >= 2 )
	{
		*pu8Data = I2CRxByte( true );
    3c58:	81 e0       	ldi	r24, 0x01	; 1
    3c5a:	0e 94 bf 1e 	call	0x3d7e	; 0x3d7e <I2CRxByte>
    3c5e:	f8 01       	movw	r30, r16
    3c60:	81 93       	st	Z+, r24
    3c62:	8f 01       	movw	r16, r30
		pu8Data++;
		u8Length--;
    3c64:	c1 50       	subi	r28, 0x01	; 1
	if( false == bResult )
	{
		goto errorExit;
	}
	
	while( u8Length >= 2 )
    3c66:	c2 30       	cpi	r28, 0x02	; 2
    3c68:	b8 f7       	brcc	.-18     	; 0x3c58 <RTCReadRegisters+0x50>
		pu8Data++;
		u8Length--;
	}
	
	// Final read with NACK
	*pu8Data = I2CRxByte( false );
    3c6a:	80 e0       	ldi	r24, 0x00	; 0
    3c6c:	0e 94 bf 1e 	call	0x3d7e	; 0x3d7e <I2CRxByte>
    3c70:	f8 01       	movw	r30, r16
    3c72:	80 83       	st	Z, r24
	
errorExit:

	I2CStop();
    3c74:	0e 94 66 25 	call	0x4acc	; 0x4acc <I2CStop>
	
	return(bResult);
}
    3c78:	8d 2f       	mov	r24, r29
    3c7a:	df 91       	pop	r29
    3c7c:	cf 91       	pop	r28
    3c7e:	1f 91       	pop	r17
    3c80:	0f 91       	pop	r16
    3c82:	ff 90       	pop	r15
    3c84:	08 95       	ret

Disassembly of section .text.RTCReadHW:

00002bce <RTCReadHW>:
	sei();
	
	psSrc = gmtime((const time_t *) &u64Time);
	memcpy((void *) psTime, (void *) psSrc, sizeof(*psTime));
	return(true);
}
    2bce:	cf 93       	push	r28
    2bd0:	df 93       	push	r29
    2bd2:	ec 01       	movw	r28, r24
    2bd4:	47 e0       	ldi	r20, 0x07	; 7
    2bd6:	bc 01       	movw	r22, r24
    2bd8:	80 e0       	ldi	r24, 0x00	; 0
    2bda:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <RTCReadRegisters>
    2bde:	88 23       	and	r24, r24
    2be0:	09 f4       	brne	.+2      	; 0x2be4 <RTCReadHW+0x16>
    2be2:	63 c0       	rjmp	.+198    	; 0x2caa <RTCReadHW+0xdc>
    2be4:	98 81       	ld	r25, Y
    2be6:	29 2f       	mov	r18, r25
    2be8:	22 95       	swap	r18
    2bea:	2f 70       	andi	r18, 0x0F	; 15
    2bec:	27 70       	andi	r18, 0x07	; 7
    2bee:	22 0f       	add	r18, r18
    2bf0:	32 2f       	mov	r19, r18
    2bf2:	33 0f       	add	r19, r19
    2bf4:	33 0f       	add	r19, r19
    2bf6:	23 0f       	add	r18, r19
    2bf8:	9f 70       	andi	r25, 0x0F	; 15
    2bfa:	92 0f       	add	r25, r18
    2bfc:	98 83       	st	Y, r25
    2bfe:	99 81       	ldd	r25, Y+1	; 0x01
    2c00:	29 2f       	mov	r18, r25
    2c02:	22 95       	swap	r18
    2c04:	2f 70       	andi	r18, 0x0F	; 15
    2c06:	27 70       	andi	r18, 0x07	; 7
    2c08:	22 0f       	add	r18, r18
    2c0a:	32 2f       	mov	r19, r18
    2c0c:	33 0f       	add	r19, r19
    2c0e:	33 0f       	add	r19, r19
    2c10:	23 0f       	add	r18, r19
    2c12:	9f 70       	andi	r25, 0x0F	; 15
    2c14:	92 0f       	add	r25, r18
    2c16:	99 83       	std	Y+1, r25	; 0x01
    2c18:	9a 81       	ldd	r25, Y+2	; 0x02
    2c1a:	96 ff       	sbrs	r25, 6
    2c1c:	11 c0       	rjmp	.+34     	; 0x2c40 <RTCReadHW+0x72>
    2c1e:	94 fb       	bst	r25, 4
    2c20:	22 27       	eor	r18, r18
    2c22:	20 f9       	bld	r18, 0
    2c24:	22 0f       	add	r18, r18
    2c26:	32 2f       	mov	r19, r18
    2c28:	33 0f       	add	r19, r19
    2c2a:	33 0f       	add	r19, r19
    2c2c:	23 0f       	add	r18, r19
    2c2e:	39 2f       	mov	r19, r25
    2c30:	3f 70       	andi	r19, 0x0F	; 15
    2c32:	23 0f       	add	r18, r19
    2c34:	2a 83       	std	Y+2, r18	; 0x02
    2c36:	95 ff       	sbrs	r25, 5
    2c38:	0f c0       	rjmp	.+30     	; 0x2c58 <RTCReadHW+0x8a>
    2c3a:	24 5f       	subi	r18, 0xF4	; 244
    2c3c:	2a 83       	std	Y+2, r18	; 0x02
    2c3e:	0c c0       	rjmp	.+24     	; 0x2c58 <RTCReadHW+0x8a>
    2c40:	29 2f       	mov	r18, r25
    2c42:	22 95       	swap	r18
    2c44:	2f 70       	andi	r18, 0x0F	; 15
    2c46:	23 70       	andi	r18, 0x03	; 3
    2c48:	22 0f       	add	r18, r18
    2c4a:	32 2f       	mov	r19, r18
    2c4c:	33 0f       	add	r19, r19
    2c4e:	33 0f       	add	r19, r19
    2c50:	23 0f       	add	r18, r19
    2c52:	9f 70       	andi	r25, 0x0F	; 15
    2c54:	92 0f       	add	r25, r18
    2c56:	9a 83       	std	Y+2, r25	; 0x02
    2c58:	9b 81       	ldd	r25, Y+3	; 0x03
    2c5a:	97 70       	andi	r25, 0x07	; 7
    2c5c:	9b 83       	std	Y+3, r25	; 0x03
    2c5e:	9c 81       	ldd	r25, Y+4	; 0x04
    2c60:	29 2f       	mov	r18, r25
    2c62:	22 95       	swap	r18
    2c64:	2f 70       	andi	r18, 0x0F	; 15
    2c66:	23 70       	andi	r18, 0x03	; 3
    2c68:	22 0f       	add	r18, r18
    2c6a:	32 2f       	mov	r19, r18
    2c6c:	33 0f       	add	r19, r19
    2c6e:	33 0f       	add	r19, r19
    2c70:	23 0f       	add	r18, r19
    2c72:	9f 70       	andi	r25, 0x0F	; 15
    2c74:	92 0f       	add	r25, r18
    2c76:	9c 83       	std	Y+4, r25	; 0x04
    2c78:	9d 81       	ldd	r25, Y+5	; 0x05
    2c7a:	94 fb       	bst	r25, 4
    2c7c:	22 27       	eor	r18, r18
    2c7e:	20 f9       	bld	r18, 0
    2c80:	22 0f       	add	r18, r18
    2c82:	32 2f       	mov	r19, r18
    2c84:	33 0f       	add	r19, r19
    2c86:	33 0f       	add	r19, r19
    2c88:	23 0f       	add	r18, r19
    2c8a:	9f 70       	andi	r25, 0x0F	; 15
    2c8c:	92 0f       	add	r25, r18
    2c8e:	9d 83       	std	Y+5, r25	; 0x05
    2c90:	9e 81       	ldd	r25, Y+6	; 0x06
    2c92:	29 2f       	mov	r18, r25
    2c94:	22 95       	swap	r18
    2c96:	2f 70       	andi	r18, 0x0F	; 15
    2c98:	22 0f       	add	r18, r18
    2c9a:	32 2f       	mov	r19, r18
    2c9c:	33 0f       	add	r19, r19
    2c9e:	33 0f       	add	r19, r19
    2ca0:	23 0f       	add	r18, r19
    2ca2:	9f 70       	andi	r25, 0x0F	; 15
    2ca4:	92 0f       	add	r25, r18
    2ca6:	9c 5e       	subi	r25, 0xEC	; 236
    2ca8:	9e 83       	std	Y+6, r25	; 0x06
    2caa:	df 91       	pop	r29
    2cac:	cf 91       	pop	r28
    2cae:	08 95       	ret

Disassembly of section .text.RTCWriteRegisters:

00003f48 <RTCWriteRegisters>:
}

bool RTCWriteRegisters( uint8_t u8RegisterAddr,
						uint8_t* pu8Data, 
						uint8_t u8Length )
{
    3f48:	ff 92       	push	r15
    3f4a:	0f 93       	push	r16
    3f4c:	1f 93       	push	r17
    3f4e:	cf 93       	push	r28
    3f50:	df 93       	push	r29
    3f52:	f8 2e       	mov	r15, r24
    3f54:	8b 01       	movw	r16, r22
    3f56:	c4 2f       	mov	r28, r20
	bool bResult;
	
	MBASSERT( u8Length >= 1 );
    3f58:	41 11       	cpse	r20, r1
    3f5a:	07 c0       	rjmp	.+14     	; 0x3f6a <RTCWriteRegisters+0x22>
    3f5c:	42 e9       	ldi	r20, 0x92	; 146
    3f5e:	50 e0       	ldi	r21, 0x00	; 0
    3f60:	66 ef       	ldi	r22, 0xF6	; 246
    3f62:	72 e0       	ldi	r23, 0x02	; 2
    3f64:	80 e0       	ldi	r24, 0x00	; 0
    3f66:	0e 94 bf 24 	call	0x497e	; 0x497e <PlatformAssert>
	
	// First send device address and write register address
	bResult = RTCStartTransaction( RTC_ADDRESS, false, true );
    3f6a:	41 e0       	ldi	r20, 0x01	; 1
    3f6c:	60 e0       	ldi	r22, 0x00	; 0
    3f6e:	8e ed       	ldi	r24, 0xDE	; 222
    3f70:	0e 94 be 22 	call	0x457c	; 0x457c <RTCStartTransaction>
    3f74:	d8 2f       	mov	r29, r24
	
	// Couldn't get an ACK?  Give up now
	if( false == bResult )
    3f76:	88 23       	and	r24, r24
    3f78:	99 f0       	breq	.+38     	; 0x3fa0 <RTCWriteRegisters+0x58>
	{
		goto errorExit;
	}
	
	// Send the register address
	bResult = I2CTxByte( u8RegisterAddr );
    3f7a:	8f 2d       	mov	r24, r15
    3f7c:	0e 94 6f 1f 	call	0x3ede	; 0x3ede <I2CTxByte>
    3f80:	d8 2f       	mov	r29, r24
	
	if( false == bResult )
    3f82:	81 11       	cpse	r24, r1
    3f84:	0b c0       	rjmp	.+22     	; 0x3f9c <RTCWriteRegisters+0x54>
    3f86:	0c c0       	rjmp	.+24     	; 0x3fa0 <RTCWriteRegisters+0x58>
	}
	
	// Now immediately send the sequential data
	while( u8Length )
	{
		bResult = I2CTxByte( *pu8Data );
    3f88:	f8 01       	movw	r30, r16
    3f8a:	80 81       	ld	r24, Z
    3f8c:	0e 94 6f 1f 	call	0x3ede	; 0x3ede <I2CTxByte>
    3f90:	d8 2f       	mov	r29, r24
		
		if( false == bResult )
    3f92:	88 23       	and	r24, r24
    3f94:	29 f0       	breq	.+10     	; 0x3fa0 <RTCWriteRegisters+0x58>
		{
			goto errorExit;
		}
		
		pu8Data++;
    3f96:	0f 5f       	subi	r16, 0xFF	; 255
    3f98:	1f 4f       	sbci	r17, 0xFF	; 255
		u8Length--;
    3f9a:	c1 50       	subi	r28, 0x01	; 1
	{
		goto errorExit;
	}
	
	// Now immediately send the sequential data
	while( u8Length )
    3f9c:	c1 11       	cpse	r28, r1
    3f9e:	f4 cf       	rjmp	.-24     	; 0x3f88 <RTCWriteRegisters+0x40>
		u8Length--;
	}
	
errorExit:

	I2CStop();
    3fa0:	0e 94 66 25 	call	0x4acc	; 0x4acc <I2CStop>
	
	return( bResult );
}
    3fa4:	8d 2f       	mov	r24, r29
    3fa6:	df 91       	pop	r29
    3fa8:	cf 91       	pop	r28
    3faa:	1f 91       	pop	r17
    3fac:	0f 91       	pop	r16
    3fae:	ff 90       	pop	r15
    3fb0:	08 95       	ret

Disassembly of section .text.RTCWriteHW:

000028e4 <RTCWriteHW>:
	sei();
	
	psSrc = gmtime((const time_t *) &u64Time);
	memcpy((void *) psTime, (void *) psSrc, sizeof(*psTime));
	return(true);
}
    28e4:	fc 01       	movw	r30, r24
    28e6:	20 81       	ld	r18, Z
    28e8:	8d ec       	ldi	r24, 0xCD	; 205
    28ea:	28 9f       	mul	r18, r24
    28ec:	91 2d       	mov	r25, r1
    28ee:	11 24       	eor	r1, r1
    28f0:	96 95       	lsr	r25
    28f2:	96 95       	lsr	r25
    28f4:	96 95       	lsr	r25
    28f6:	30 e1       	ldi	r19, 0x10	; 16
    28f8:	93 9f       	mul	r25, r19
    28fa:	a0 01       	movw	r20, r0
    28fc:	11 24       	eor	r1, r1
    28fe:	99 0f       	add	r25, r25
    2900:	39 2f       	mov	r19, r25
    2902:	33 0f       	add	r19, r19
    2904:	33 0f       	add	r19, r19
    2906:	93 0f       	add	r25, r19
    2908:	29 1b       	sub	r18, r25
    290a:	24 2b       	or	r18, r20
    290c:	20 83       	st	Z, r18
    290e:	21 81       	ldd	r18, Z+1	; 0x01
    2910:	28 9f       	mul	r18, r24
    2912:	91 2d       	mov	r25, r1
    2914:	11 24       	eor	r1, r1
    2916:	96 95       	lsr	r25
    2918:	96 95       	lsr	r25
    291a:	96 95       	lsr	r25
    291c:	30 e1       	ldi	r19, 0x10	; 16
    291e:	93 9f       	mul	r25, r19
    2920:	a0 01       	movw	r20, r0
    2922:	11 24       	eor	r1, r1
    2924:	99 0f       	add	r25, r25
    2926:	39 2f       	mov	r19, r25
    2928:	33 0f       	add	r19, r19
    292a:	33 0f       	add	r19, r19
    292c:	93 0f       	add	r25, r19
    292e:	29 1b       	sub	r18, r25
    2930:	24 2b       	or	r18, r20
    2932:	21 83       	std	Z+1, r18	; 0x01
    2934:	42 81       	ldd	r20, Z+2	; 0x02
    2936:	48 9f       	mul	r20, r24
    2938:	91 2d       	mov	r25, r1
    293a:	11 24       	eor	r1, r1
    293c:	96 95       	lsr	r25
    293e:	96 95       	lsr	r25
    2940:	96 95       	lsr	r25
    2942:	50 e1       	ldi	r21, 0x10	; 16
    2944:	95 9f       	mul	r25, r21
    2946:	90 01       	movw	r18, r0
    2948:	11 24       	eor	r1, r1
    294a:	99 0f       	add	r25, r25
    294c:	39 2f       	mov	r19, r25
    294e:	33 0f       	add	r19, r19
    2950:	33 0f       	add	r19, r19
    2952:	93 0f       	add	r25, r19
    2954:	49 1b       	sub	r20, r25
    2956:	24 2b       	or	r18, r20
    2958:	2f 7b       	andi	r18, 0xBF	; 191
    295a:	22 83       	std	Z+2, r18	; 0x02
    295c:	93 81       	ldd	r25, Z+3	; 0x03
    295e:	97 70       	andi	r25, 0x07	; 7
    2960:	98 60       	ori	r25, 0x08	; 8
    2962:	93 83       	std	Z+3, r25	; 0x03
    2964:	24 81       	ldd	r18, Z+4	; 0x04
    2966:	28 9f       	mul	r18, r24
    2968:	91 2d       	mov	r25, r1
    296a:	11 24       	eor	r1, r1
    296c:	96 95       	lsr	r25
    296e:	96 95       	lsr	r25
    2970:	96 95       	lsr	r25
    2972:	30 e1       	ldi	r19, 0x10	; 16
    2974:	93 9f       	mul	r25, r19
    2976:	a0 01       	movw	r20, r0
    2978:	11 24       	eor	r1, r1
    297a:	99 0f       	add	r25, r25
    297c:	39 2f       	mov	r19, r25
    297e:	33 0f       	add	r19, r19
    2980:	33 0f       	add	r19, r19
    2982:	93 0f       	add	r25, r19
    2984:	29 1b       	sub	r18, r25
    2986:	24 2b       	or	r18, r20
    2988:	24 83       	std	Z+4, r18	; 0x04
    298a:	25 81       	ldd	r18, Z+5	; 0x05
    298c:	28 9f       	mul	r18, r24
    298e:	91 2d       	mov	r25, r1
    2990:	11 24       	eor	r1, r1
    2992:	96 95       	lsr	r25
    2994:	96 95       	lsr	r25
    2996:	96 95       	lsr	r25
    2998:	30 e1       	ldi	r19, 0x10	; 16
    299a:	93 9f       	mul	r25, r19
    299c:	a0 01       	movw	r20, r0
    299e:	11 24       	eor	r1, r1
    29a0:	99 0f       	add	r25, r25
    29a2:	39 2f       	mov	r19, r25
    29a4:	33 0f       	add	r19, r19
    29a6:	33 0f       	add	r19, r19
    29a8:	93 0f       	add	r25, r19
    29aa:	29 1b       	sub	r18, r25
    29ac:	24 2b       	or	r18, r20
    29ae:	25 83       	std	Z+5, r18	; 0x05
    29b0:	96 81       	ldd	r25, Z+6	; 0x06
    29b2:	98 9f       	mul	r25, r24
    29b4:	81 2d       	mov	r24, r1
    29b6:	11 24       	eor	r1, r1
    29b8:	86 95       	lsr	r24
    29ba:	86 95       	lsr	r24
    29bc:	86 95       	lsr	r24
    29be:	40 e1       	ldi	r20, 0x10	; 16
    29c0:	84 9f       	mul	r24, r20
    29c2:	90 01       	movw	r18, r0
    29c4:	11 24       	eor	r1, r1
    29c6:	88 0f       	add	r24, r24
    29c8:	38 2f       	mov	r19, r24
    29ca:	33 0f       	add	r19, r19
    29cc:	33 0f       	add	r19, r19
    29ce:	83 0f       	add	r24, r19
    29d0:	98 1b       	sub	r25, r24
    29d2:	92 2b       	or	r25, r18
    29d4:	96 83       	std	Z+6, r25	; 0x06
    29d6:	47 e0       	ldi	r20, 0x07	; 7
    29d8:	bf 01       	movw	r22, r30
    29da:	80 e0       	ldi	r24, 0x00	; 0
    29dc:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <RTCWriteRegisters>
    29e0:	08 95       	ret

Disassembly of section .text.RTCSetTime:

000030d6 <RTCSetTime>:

// This sets the RTC to the specific time passed in. True is returned
// if it's 
bool RTCSetTime(uint64_t u64Timet)
{
    30d6:	0f 93       	push	r16
    30d8:	1f 93       	push	r17
    30da:	cf 93       	push	r28
    30dc:	df 93       	push	r29
    30de:	cd b7       	in	r28, 0x3d	; 61
    30e0:	de b7       	in	r29, 0x3e	; 62
    30e2:	a8 97       	sbiw	r28, 0x28	; 40
    30e4:	0f b6       	in	r0, 0x3f	; 63
    30e6:	f8 94       	cli
    30e8:	de bf       	out	0x3e, r29	; 62
    30ea:	0f be       	out	0x3f, r0	; 63
    30ec:	cd bf       	out	0x3d, r28	; 61
    30ee:	29 a3       	std	Y+33, r18	; 0x21
    30f0:	3a a3       	std	Y+34, r19	; 0x22
    30f2:	4b a3       	std	Y+35, r20	; 0x23
    30f4:	5c a3       	std	Y+36, r21	; 0x24
    30f6:	6d a3       	std	Y+37, r22	; 0x25
    30f8:	7e a3       	std	Y+38, r23	; 0x26
    30fa:	8f a3       	std	Y+39, r24	; 0x27
    30fc:	98 a7       	std	Y+40, r25	; 0x28
	struct tm sTime;
	struct tm *psTime;
	SMCP7940NTime sTimeHW;

	// Convert to GMTime
	memset((void *) &sTime, 0, sizeof(sTime));
    30fe:	fe 01       	movw	r30, r28
    3100:	31 96       	adiw	r30, 0x01	; 1
    3102:	89 e1       	ldi	r24, 0x19	; 25
    3104:	df 01       	movw	r26, r30
    3106:	1d 92       	st	X+, r1
    3108:	8a 95       	dec	r24
    310a:	e9 f7       	brne	.-6      	; 0x3106 <RTCSetTime+0x30>
	psTime = gmtime((const time_t *) &u64Timet);
    310c:	be 01       	movw	r22, r28
    310e:	6f 5d       	subi	r22, 0xDF	; 223
    3110:	7f 4f       	sbci	r23, 0xFF	; 255
    3112:	80 e8       	ldi	r24, 0x80	; 128
    3114:	0e 94 23 28 	call	0x5046	; 0x5046 <gmtime>
    3118:	8c 01       	movw	r16, r24
	MBASSERT(psTime);
    311a:	89 2b       	or	r24, r25
    311c:	39 f4       	brne	.+14     	; 0x312c <RTCSetTime+0x56>
    311e:	42 e8       	ldi	r20, 0x82	; 130
    3120:	51 e0       	ldi	r21, 0x01	; 1
    3122:	66 ef       	ldi	r22, 0xF6	; 246
    3124:	72 e0       	ldi	r23, 0x02	; 2
    3126:	80 e0       	ldi	r24, 0x00	; 0
    3128:	0e 94 bf 24 	call	0x497e	; 0x497e <PlatformAssert>
	memcpy((void *) &sTime, (void *) psTime, sizeof(sTime));
    312c:	a8 01       	movw	r20, r16
    312e:	60 e8       	ldi	r22, 0x80	; 128
    3130:	29 e1       	ldi	r18, 0x19	; 25
    3132:	30 e0       	ldi	r19, 0x00	; 0
    3134:	ce 01       	movw	r24, r28
    3136:	01 96       	adiw	r24, 0x01	; 1
    3138:	0e 94 4c 24 	call	0x4898	; 0x4898 <memcpy>
	
	// Now convert to hardware
	StructTMToHW(&sTime,
    313c:	be 01       	movw	r22, r28
    313e:	66 5e       	subi	r22, 0xE6	; 230
    3140:	7f 4f       	sbci	r23, 0xFF	; 255
    3142:	ce 01       	movw	r24, r28
    3144:	01 96       	adiw	r24, 0x01	; 1
    3146:	0e 94 a3 21 	call	0x4346	; 0x4346 <StructTMToHW>
				 &sTimeHW);
	
	// Set the time			 
	cli();
    314a:	f8 94       	cli
	sg_u64Time = u64Timet;
    314c:	79 a1       	ldd	r23, Y+33	; 0x21
    314e:	6a a1       	ldd	r22, Y+34	; 0x22
    3150:	5b a1       	ldd	r21, Y+35	; 0x23
    3152:	4c a1       	ldd	r20, Y+36	; 0x24
    3154:	3d a1       	ldd	r19, Y+37	; 0x25
    3156:	2e a1       	ldd	r18, Y+38	; 0x26
    3158:	9f a1       	ldd	r25, Y+39	; 0x27
    315a:	88 a5       	ldd	r24, Y+40	; 0x28
    315c:	70 93 3d 0b 	sts	0x0B3D, r23	; 0x800b3d <sg_u64Time>
    3160:	60 93 3e 0b 	sts	0x0B3E, r22	; 0x800b3e <sg_u64Time+0x1>
    3164:	50 93 3f 0b 	sts	0x0B3F, r21	; 0x800b3f <sg_u64Time+0x2>
    3168:	40 93 40 0b 	sts	0x0B40, r20	; 0x800b40 <sg_u64Time+0x3>
    316c:	30 93 41 0b 	sts	0x0B41, r19	; 0x800b41 <sg_u64Time+0x4>
    3170:	20 93 42 0b 	sts	0x0B42, r18	; 0x800b42 <sg_u64Time+0x5>
    3174:	90 93 43 0b 	sts	0x0B43, r25	; 0x800b43 <sg_u64Time+0x6>
    3178:	80 93 44 0b 	sts	0x0B44, r24	; 0x800b44 <sg_u64Time+0x7>
	sei();
    317c:	78 94       	sei
	
	// Now go tell the hardware about it
	return(RTCWriteHW(&sTimeHW));
    317e:	ce 01       	movw	r24, r28
    3180:	4a 96       	adiw	r24, 0x1a	; 26
    3182:	0e 94 72 14 	call	0x28e4	; 0x28e4 <RTCWriteHW>
}
    3186:	a8 96       	adiw	r28, 0x28	; 40
    3188:	0f b6       	in	r0, 0x3f	; 63
    318a:	f8 94       	cli
    318c:	de bf       	out	0x3e, r29	; 62
    318e:	0f be       	out	0x3f, r0	; 63
    3190:	cd bf       	out	0x3d, r28	; 61
    3192:	df 91       	pop	r29
    3194:	cf 91       	pop	r28
    3196:	1f 91       	pop	r17
    3198:	0f 91       	pop	r16
    319a:	08 95       	ret

Disassembly of section .text.RTCInit:

000016a6 <RTCInit>:
	sei();
	
	psSrc = gmtime((const time_t *) &u64Time);
	memcpy((void *) psTime, (void *) psSrc, sizeof(*psTime));
	return(true);
}
    16a6:	ff 92       	push	r15
    16a8:	0f 93       	push	r16
    16aa:	1f 93       	push	r17
    16ac:	cf 93       	push	r28
    16ae:	df 93       	push	r29
    16b0:	cd b7       	in	r28, 0x3d	; 61
    16b2:	de b7       	in	r29, 0x3e	; 62
    16b4:	a1 97       	sbiw	r28, 0x21	; 33
    16b6:	0f b6       	in	r0, 0x3f	; 63
    16b8:	f8 94       	cli
    16ba:	de bf       	out	0x3e, r29	; 62
    16bc:	0f be       	out	0x3f, r0	; 63
    16be:	cd bf       	out	0x3d, r28	; 61
    16c0:	19 82       	std	Y+1, r1	; 0x01
    16c2:	41 e0       	ldi	r20, 0x01	; 1
    16c4:	be 01       	movw	r22, r28
    16c6:	6f 5f       	subi	r22, 0xFF	; 255
    16c8:	7f 4f       	sbci	r23, 0xFF	; 255
    16ca:	87 e0       	ldi	r24, 0x07	; 7
    16cc:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <RTCWriteRegisters>
    16d0:	18 2f       	mov	r17, r24
    16d2:	88 23       	and	r24, r24
    16d4:	09 f4       	brne	.+2      	; 0x16d8 <RTCInit+0x32>
    16d6:	eb c0       	rjmp	.+470    	; 0x18ae <RTCInit+0x208>
    16d8:	80 e8       	ldi	r24, 0x80	; 128
    16da:	89 83       	std	Y+1, r24	; 0x01
    16dc:	41 e0       	ldi	r20, 0x01	; 1
    16de:	be 01       	movw	r22, r28
    16e0:	6f 5f       	subi	r22, 0xFF	; 255
    16e2:	7f 4f       	sbci	r23, 0xFF	; 255
    16e4:	80 e0       	ldi	r24, 0x00	; 0
    16e6:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <RTCWriteRegisters>
    16ea:	18 2f       	mov	r17, r24
    16ec:	81 11       	cpse	r24, r1
    16ee:	17 c0       	rjmp	.+46     	; 0x171e <RTCInit+0x78>
    16f0:	de c0       	rjmp	.+444    	; 0x18ae <RTCInit+0x208>
    16f2:	19 82       	std	Y+1, r1	; 0x01
    16f4:	41 e0       	ldi	r20, 0x01	; 1
    16f6:	be 01       	movw	r22, r28
    16f8:	6f 5f       	subi	r22, 0xFF	; 255
    16fa:	7f 4f       	sbci	r23, 0xFF	; 255
    16fc:	83 e0       	ldi	r24, 0x03	; 3
    16fe:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <RTCReadRegisters>
    1702:	18 2f       	mov	r17, r24
    1704:	88 23       	and	r24, r24
    1706:	09 f4       	brne	.+2      	; 0x170a <RTCInit+0x64>
    1708:	d2 c0       	rjmp	.+420    	; 0x18ae <RTCInit+0x208>
    170a:	89 81       	ldd	r24, Y+1	; 0x01
    170c:	85 fd       	sbrc	r24, 5
    170e:	0a c0       	rjmp	.+20     	; 0x1724 <RTCInit+0x7e>
    1710:	60 e0       	ldi	r22, 0x00	; 0
    1712:	70 e0       	ldi	r23, 0x00	; 0
    1714:	cb 01       	movw	r24, r22
    1716:	0e 94 f7 21 	call	0x43ee	; 0x43ee <Delay>
    171a:	0f 5f       	subi	r16, 0xFF	; 255
    171c:	01 c0       	rjmp	.+2      	; 0x1720 <RTCInit+0x7a>
    171e:	00 e0       	ldi	r16, 0x00	; 0
    1720:	08 3c       	cpi	r16, 0xC8	; 200
    1722:	38 f3       	brcs	.-50     	; 0x16f2 <RTCInit+0x4c>
    1724:	08 3c       	cpi	r16, 0xC8	; 200
    1726:	08 f0       	brcs	.+2      	; 0x172a <RTCInit+0x84>
    1728:	c2 c0       	rjmp	.+388    	; 0x18ae <RTCInit+0x208>
    172a:	89 81       	ldd	r24, Y+1	; 0x01
    172c:	88 60       	ori	r24, 0x08	; 8
    172e:	89 83       	std	Y+1, r24	; 0x01
    1730:	41 e0       	ldi	r20, 0x01	; 1
    1732:	be 01       	movw	r22, r28
    1734:	6f 5f       	subi	r22, 0xFF	; 255
    1736:	7f 4f       	sbci	r23, 0xFF	; 255
    1738:	83 e0       	ldi	r24, 0x03	; 3
    173a:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <RTCWriteRegisters>
    173e:	18 2f       	mov	r17, r24
    1740:	88 23       	and	r24, r24
    1742:	09 f4       	brne	.+2      	; 0x1746 <RTCInit+0xa0>
    1744:	b4 c0       	rjmp	.+360    	; 0x18ae <RTCInit+0x208>
    1746:	41 e0       	ldi	r20, 0x01	; 1
    1748:	be 01       	movw	r22, r28
    174a:	6f 5f       	subi	r22, 0xFF	; 255
    174c:	7f 4f       	sbci	r23, 0xFF	; 255
    174e:	82 e0       	ldi	r24, 0x02	; 2
    1750:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <RTCReadRegisters>
    1754:	18 2f       	mov	r17, r24
    1756:	88 23       	and	r24, r24
    1758:	09 f4       	brne	.+2      	; 0x175c <RTCInit+0xb6>
    175a:	a9 c0       	rjmp	.+338    	; 0x18ae <RTCInit+0x208>
    175c:	89 81       	ldd	r24, Y+1	; 0x01
    175e:	8f 7b       	andi	r24, 0xBF	; 191
    1760:	89 83       	std	Y+1, r24	; 0x01
    1762:	41 e0       	ldi	r20, 0x01	; 1
    1764:	be 01       	movw	r22, r28
    1766:	6f 5f       	subi	r22, 0xFF	; 255
    1768:	7f 4f       	sbci	r23, 0xFF	; 255
    176a:	82 e0       	ldi	r24, 0x02	; 2
    176c:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <RTCWriteRegisters>
    1770:	18 2f       	mov	r17, r24
    1772:	88 23       	and	r24, r24
    1774:	09 f4       	brne	.+2      	; 0x1778 <RTCInit+0xd2>
    1776:	9b c0       	rjmp	.+310    	; 0x18ae <RTCInit+0x208>
    1778:	ce 01       	movw	r24, r28
    177a:	02 96       	adiw	r24, 0x02	; 2
    177c:	0e 94 e7 15 	call	0x2bce	; 0x2bce <RTCReadHW>
    1780:	18 2f       	mov	r17, r24
    1782:	88 23       	and	r24, r24
    1784:	09 f4       	brne	.+2      	; 0x1788 <RTCInit+0xe2>
    1786:	93 c0       	rjmp	.+294    	; 0x18ae <RTCInit+0x208>
    1788:	8a 81       	ldd	r24, Y+2	; 0x02
    178a:	8c 33       	cpi	r24, 0x3C	; 60
    178c:	10 f4       	brcc	.+4      	; 0x1792 <RTCInit+0xec>
    178e:	10 e0       	ldi	r17, 0x00	; 0
    1790:	01 c0       	rjmp	.+2      	; 0x1794 <RTCInit+0xee>
    1792:	11 e0       	ldi	r17, 0x01	; 1
    1794:	8b 81       	ldd	r24, Y+3	; 0x03
    1796:	8c 33       	cpi	r24, 0x3C	; 60
    1798:	08 f0       	brcs	.+2      	; 0x179c <RTCInit+0xf6>
    179a:	11 e0       	ldi	r17, 0x01	; 1
    179c:	8c 81       	ldd	r24, Y+4	; 0x04
    179e:	8c 33       	cpi	r24, 0x3C	; 60
    17a0:	08 f0       	brcs	.+2      	; 0x17a4 <RTCInit+0xfe>
    17a2:	11 e0       	ldi	r17, 0x01	; 1
    17a4:	8d 81       	ldd	r24, Y+5	; 0x05
    17a6:	81 50       	subi	r24, 0x01	; 1
    17a8:	87 30       	cpi	r24, 0x07	; 7
    17aa:	08 f0       	brcs	.+2      	; 0x17ae <RTCInit+0x108>
    17ac:	11 e0       	ldi	r17, 0x01	; 1
    17ae:	2f 81       	ldd	r18, Y+7	; 0x07
    17b0:	8f ef       	ldi	r24, 0xFF	; 255
    17b2:	82 0f       	add	r24, r18
    17b4:	8c 30       	cpi	r24, 0x0C	; 12
    17b6:	18 f5       	brcc	.+70     	; 0x17fe <RTCInit+0x158>
    17b8:	0e 81       	ldd	r16, Y+6	; 0x06
    17ba:	00 23       	and	r16, r16
    17bc:	11 f1       	breq	.+68     	; 0x1802 <RTCInit+0x15c>
    17be:	82 2f       	mov	r24, r18
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	01 97       	sbiw	r24, 0x01	; 1
    17c4:	09 2e       	mov	r0, r25
    17c6:	00 0c       	add	r0, r0
    17c8:	aa 0b       	sbc	r26, r26
    17ca:	87 5d       	subi	r24, 0xD7	; 215
    17cc:	9c 4f       	sbci	r25, 0xFC	; 252
    17ce:	af 4f       	sbci	r26, 0xFF	; 255
    17d0:	fc 01       	movw	r30, r24
    17d2:	f4 90       	lpm	r15, Z
    17d4:	a7 fd       	sbrc	r26, 7
    17d6:	f0 80       	ld	r15, Z
    17d8:	22 30       	cpi	r18, 0x02	; 2
    17da:	71 f4       	brne	.+28     	; 0x17f8 <RTCInit+0x152>
    17dc:	88 85       	ldd	r24, Y+8	; 0x08
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	84 31       	cpi	r24, 0x14	; 20
    17e2:	91 05       	cpc	r25, r1
    17e4:	18 f4       	brcc	.+6      	; 0x17ec <RTCInit+0x146>
    17e6:	8c 5c       	subi	r24, 0xCC	; 204
    17e8:	97 4f       	sbci	r25, 0xF7	; 247
    17ea:	02 c0       	rjmp	.+4      	; 0x17f0 <RTCInit+0x14a>
    17ec:	80 53       	subi	r24, 0x30	; 48
    17ee:	98 4f       	sbci	r25, 0xF8	; 248
    17f0:	0e 94 cc 23 	call	0x4798	; 0x4798 <IsLeapYear>
    17f4:	81 11       	cpse	r24, r1
    17f6:	f3 94       	inc	r15
    17f8:	f0 16       	cp	r15, r16
    17fa:	28 f0       	brcs	.+10     	; 0x1806 <RTCInit+0x160>
    17fc:	05 c0       	rjmp	.+10     	; 0x1808 <RTCInit+0x162>
    17fe:	11 e0       	ldi	r17, 0x01	; 1
    1800:	03 c0       	rjmp	.+6      	; 0x1808 <RTCInit+0x162>
    1802:	11 e0       	ldi	r17, 0x01	; 1
    1804:	01 c0       	rjmp	.+2      	; 0x1808 <RTCInit+0x162>
    1806:	11 e0       	ldi	r17, 0x01	; 1
    1808:	11 23       	and	r17, r17
    180a:	b9 f0       	breq	.+46     	; 0x183a <RTCInit+0x194>
    180c:	1a 82       	std	Y+2, r1	; 0x02
    180e:	1b 82       	std	Y+3, r1	; 0x03
    1810:	1c 82       	std	Y+4, r1	; 0x04
    1812:	81 e0       	ldi	r24, 0x01	; 1
    1814:	8e 83       	std	Y+6, r24	; 0x06
    1816:	8f 83       	std	Y+7, r24	; 0x07
    1818:	88 e1       	ldi	r24, 0x18	; 24
    181a:	88 87       	std	Y+8, r24	; 0x08
    181c:	ce 01       	movw	r24, r28
    181e:	02 96       	adiw	r24, 0x02	; 2
    1820:	0e 94 72 14 	call	0x28e4	; 0x28e4 <RTCWriteHW>
    1824:	18 2f       	mov	r17, r24
    1826:	88 23       	and	r24, r24
    1828:	09 f4       	brne	.+2      	; 0x182c <RTCInit+0x186>
    182a:	41 c0       	rjmp	.+130    	; 0x18ae <RTCInit+0x208>
    182c:	ce 01       	movw	r24, r28
    182e:	02 96       	adiw	r24, 0x02	; 2
    1830:	0e 94 e7 15 	call	0x2bce	; 0x2bce <RTCReadHW>
    1834:	18 2f       	mov	r17, r24
    1836:	88 23       	and	r24, r24
    1838:	d1 f1       	breq	.+116    	; 0x18ae <RTCInit+0x208>
    183a:	be 01       	movw	r22, r28
    183c:	67 5f       	subi	r22, 0xF7	; 247
    183e:	7f 4f       	sbci	r23, 0xFF	; 255
    1840:	ce 01       	movw	r24, r28
    1842:	02 96       	adiw	r24, 0x02	; 2
    1844:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <HWToStructTM>
    1848:	ce 01       	movw	r24, r28
    184a:	09 96       	adiw	r24, 0x09	; 9
    184c:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <mktime>
    1850:	8b 01       	movw	r16, r22
    1852:	9c 01       	movw	r18, r24
    1854:	f8 94       	cli
    1856:	00 93 3d 0b 	sts	0x0B3D, r16	; 0x800b3d <sg_u64Time>
    185a:	10 93 3e 0b 	sts	0x0B3E, r17	; 0x800b3e <sg_u64Time+0x1>
    185e:	20 93 3f 0b 	sts	0x0B3F, r18	; 0x800b3f <sg_u64Time+0x2>
    1862:	30 93 40 0b 	sts	0x0B40, r19	; 0x800b40 <sg_u64Time+0x3>
    1866:	10 92 41 0b 	sts	0x0B41, r1	; 0x800b41 <sg_u64Time+0x4>
    186a:	10 92 42 0b 	sts	0x0B42, r1	; 0x800b42 <sg_u64Time+0x5>
    186e:	10 92 43 0b 	sts	0x0B43, r1	; 0x800b43 <sg_u64Time+0x6>
    1872:	10 92 44 0b 	sts	0x0B44, r1	; 0x800b44 <sg_u64Time+0x7>
    1876:	78 94       	sei
    1878:	87 b1       	in	r24, 0x07	; 7
    187a:	8e 7f       	andi	r24, 0xFE	; 254
    187c:	87 b9       	out	0x07, r24	; 7
    187e:	88 b1       	in	r24, 0x08	; 8
    1880:	81 60       	ori	r24, 0x01	; 1
    1882:	88 b9       	out	0x08, r24	; 8
    1884:	41 e0       	ldi	r20, 0x01	; 1
    1886:	be 01       	movw	r22, r28
    1888:	6f 5f       	subi	r22, 0xFF	; 255
    188a:	7f 4f       	sbci	r23, 0xFF	; 255
    188c:	87 e0       	ldi	r24, 0x07	; 7
    188e:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <RTCReadRegisters>
    1892:	18 2f       	mov	r17, r24
    1894:	88 23       	and	r24, r24
    1896:	59 f0       	breq	.+22     	; 0x18ae <RTCInit+0x208>
    1898:	89 81       	ldd	r24, Y+1	; 0x01
    189a:	80 64       	ori	r24, 0x40	; 64
    189c:	89 83       	std	Y+1, r24	; 0x01
    189e:	41 e0       	ldi	r20, 0x01	; 1
    18a0:	be 01       	movw	r22, r28
    18a2:	6f 5f       	subi	r22, 0xFF	; 255
    18a4:	7f 4f       	sbci	r23, 0xFF	; 255
    18a6:	87 e0       	ldi	r24, 0x07	; 7
    18a8:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <RTCWriteRegisters>
    18ac:	18 2f       	mov	r17, r24
    18ae:	81 2f       	mov	r24, r17
    18b0:	a1 96       	adiw	r28, 0x21	; 33
    18b2:	0f b6       	in	r0, 0x3f	; 63
    18b4:	f8 94       	cli
    18b6:	de bf       	out	0x3e, r29	; 62
    18b8:	0f be       	out	0x3f, r0	; 63
    18ba:	cd bf       	out	0x3d, r28	; 61
    18bc:	df 91       	pop	r29
    18be:	cf 91       	pop	r28
    18c0:	1f 91       	pop	r17
    18c2:	0f 91       	pop	r16
    18c4:	ff 90       	pop	r15
    18c6:	08 95       	ret

Disassembly of section .text.SDSetCS:

00004f16 <SDSetCS>:
static uint8_t sg_u8CSD[16];

// This will provide a !CS assertion or deassertion with pre/postamble clock
static void SDSetCS(bool bAsserted)
{
	if (bAsserted)
    4f16:	88 23       	and	r24, r24
    4f18:	21 f0       	breq	.+8      	; 0x4f22 <SDSetCS+0xc>
	{
		SD_CS_ASSERT();
    4f1a:	88 b1       	in	r24, 0x08	; 8
    4f1c:	8f 7b       	andi	r24, 0xBF	; 191
    4f1e:	88 b9       	out	0x08, r24	; 8
    4f20:	08 95       	ret
	}
	else
	{
		SD_CS_DEASSERT();
    4f22:	88 b1       	in	r24, 0x08	; 8
    4f24:	80 64       	ori	r24, 0x40	; 64
    4f26:	88 b9       	out	0x08, r24	; 8
    4f28:	08 95       	ret

Disassembly of section .text.SDPowerup:

000046ba <SDPowerup>:

// Sends SD powerup sequence to card and attempts to initialize it
static void SDPowerup(void)
{
	// Set SPI baud rate to (SD_SPEED_SLOW, which is the max for the init sequence)
	(void) SPISetBaudRate(SD_SPEED_SLOW);
    46ba:	60 e8       	ldi	r22, 0x80	; 128
    46bc:	7a e1       	ldi	r23, 0x1A	; 26
    46be:	86 e0       	ldi	r24, 0x06	; 6
    46c0:	90 e0       	ldi	r25, 0x00	; 0
    46c2:	0e 94 06 18 	call	0x300c	; 0x300c <SPISetBaudRate>
	
	// Deassert chip select
	SD_CS_DEASSERT();
    46c6:	88 b1       	in	r24, 0x08	; 8
    46c8:	80 64       	ori	r24, 0x40	; 64
    46ca:	88 b9       	out	0x08, r24	; 8
	
	// Delay time after possible deassertion (2ms)
	Delay(2000);
    46cc:	60 ed       	ldi	r22, 0xD0	; 208
    46ce:	77 e0       	ldi	r23, 0x07	; 7
    46d0:	80 e0       	ldi	r24, 0x00	; 0
    46d2:	90 e0       	ldi	r25, 0x00	; 0
    46d4:	0e 94 f7 21 	call	0x43ee	; 0x43ee <Delay>
	
	// Send 74/80 bits of 0xff as a reset (80 bits required since we're byte-
	// sized transactions)
	SPIWritePattern(0xff,
    46d8:	40 e1       	ldi	r20, 0x10	; 16
    46da:	50 e0       	ldi	r21, 0x00	; 0
    46dc:	6f ef       	ldi	r22, 0xFF	; 255
    46de:	70 e0       	ldi	r23, 0x00	; 0
    46e0:	82 e0       	ldi	r24, 0x02	; 2
    46e2:	0e 94 ca 20 	call	0x4194	; 0x4194 <SPITransaction>
				    128/8);

	// Delay time after write
	Delay(2000);
    46e6:	60 ed       	ldi	r22, 0xD0	; 208
    46e8:	77 e0       	ldi	r23, 0x07	; 7
    46ea:	80 e0       	ldi	r24, 0x00	; 0
    46ec:	90 e0       	ldi	r25, 0x00	; 0
    46ee:	0e 94 f7 21 	call	0x43ee	; 0x43ee <Delay>
    46f2:	08 95       	ret

Disassembly of section .text.SDCommand:

00003544 <SDCommand>:
#define CMD8_CRC    0x87

// Sends a command to the SD card, including argument an CRC
static uint8_t SDCommand(uint8_t u8Cmd,
						 uint32_t u32Arg)
{
    3544:	df 92       	push	r13
    3546:	ef 92       	push	r14
    3548:	ff 92       	push	r15
    354a:	0f 93       	push	r16
    354c:	1f 93       	push	r17
    354e:	cf 93       	push	r28
    3550:	df 93       	push	r29
    3552:	cd b7       	in	r28, 0x3d	; 61
    3554:	de b7       	in	r29, 0x3e	; 62
    3556:	27 97       	sbiw	r28, 0x07	; 7
    3558:	0f b6       	in	r0, 0x3f	; 63
    355a:	f8 94       	cli
    355c:	de bf       	out	0x3e, r29	; 62
    355e:	0f be       	out	0x3f, r0	; 63
    3560:	cd bf       	out	0x3d, r28	; 61
    3562:	18 2f       	mov	r17, r24
    3564:	04 2f       	mov	r16, r20
    3566:	f5 2e       	mov	r15, r21
    3568:	e6 2e       	mov	r14, r22
    356a:	d7 2e       	mov	r13, r23
	uint8_t u8Buffer[sizeof(u8Cmd) + sizeof(u32Arg) + sizeof(u8CRC)];
	uint8_t u8Response;
	uint8_t u8Count;
	
	// If this is an ACMD, prefix a CMD55
	if (u8Cmd & 0x80)
    356c:	88 23       	and	r24, r24
    356e:	4c f4       	brge	.+18     	; 0x3582 <SDCommand+0x3e>
	{
		u8Response = SDCommand(CMD55,
    3570:	40 e0       	ldi	r20, 0x00	; 0
    3572:	50 e0       	ldi	r21, 0x00	; 0
    3574:	ba 01       	movw	r22, r20
    3576:	87 e3       	ldi	r24, 0x37	; 55
    3578:	0e 94 a2 1a 	call	0x3544	; 0x3544 <SDCommand>
    357c:	8f 83       	std	Y+7, r24	; 0x07
							   CMD55_ARG);
							   
		if (u8Response > 1)
    357e:	82 30       	cpi	r24, 0x02	; 2
    3580:	40 f5       	brcc	.+80     	; 0x35d2 <SDCommand+0x8e>
			return(u8Response);
		}
	}
	
	// SD Command (OR in 0x40 so bit 47 is always a 1
	u8Buffer[0] = (u8Cmd & 0x7f) | 0x40;
    3582:	81 2f       	mov	r24, r17
    3584:	8f 73       	andi	r24, 0x3F	; 63
    3586:	80 64       	ori	r24, 0x40	; 64
    3588:	89 83       	std	Y+1, r24	; 0x01
	
	// 32 Bits of argument
	u8Buffer[1] = (uint8_t) (u32Arg >> 24);
    358a:	da 82       	std	Y+2, r13	; 0x02
	u8Buffer[2] = (uint8_t) (u32Arg >> 16);
    358c:	eb 82       	std	Y+3, r14	; 0x03
	u8Buffer[3] = (uint8_t) (u32Arg >> 8);
    358e:	fc 82       	std	Y+4, r15	; 0x04
	u8Buffer[4] = (uint8_t) (u32Arg >> 0);
    3590:	0d 83       	std	Y+5, r16	; 0x05
	
	// Valid CRCs for specific commands
	u8CRC = 0;
	if (CMD0 == u8Cmd)
    3592:	11 23       	and	r17, r17
    3594:	11 f0       	breq	.+4      	; 0x359a <SDCommand+0x56>
	u8Buffer[2] = (uint8_t) (u32Arg >> 16);
	u8Buffer[3] = (uint8_t) (u32Arg >> 8);
	u8Buffer[4] = (uint8_t) (u32Arg >> 0);
	
	// Valid CRCs for specific commands
	u8CRC = 0;
    3596:	80 e0       	ldi	r24, 0x00	; 0
    3598:	01 c0       	rjmp	.+2      	; 0x359c <SDCommand+0x58>
	if (CMD0 == u8Cmd)
	{
		u8CRC = 0x95;
    359a:	85 e9       	ldi	r24, 0x95	; 149
	}
	
	if (CMD8 == u8Cmd)
    359c:	18 30       	cpi	r17, 0x08	; 8
    359e:	09 f4       	brne	.+2      	; 0x35a2 <SDCommand+0x5e>
	{
		u8CRC = 0x87;
    35a0:	87 e8       	ldi	r24, 0x87	; 135
	}
	
	// Now the CRC - Bit 0 means "ignore CRC"
	u8Buffer[5] = (uint8_t) (u8CRC | 0x01);
    35a2:	81 60       	ori	r24, 0x01	; 1
    35a4:	8e 83       	std	Y+6, r24	; 0x06
	
	// Send all bytes to the SD card
	SPIWrite(u8Buffer,
    35a6:	46 e0       	ldi	r20, 0x06	; 6
    35a8:	50 e0       	ldi	r21, 0x00	; 0
    35aa:	be 01       	movw	r22, r28
    35ac:	6f 5f       	subi	r22, 0xFF	; 255
    35ae:	7f 4f       	sbci	r23, 0xFF	; 255
    35b0:	81 e0       	ldi	r24, 0x01	; 1
    35b2:	0e 94 ca 20 	call	0x4194	; 0x4194 <SPITransaction>
			 sizeof(u8Buffer));
			 
	u8Count = 10;
    35b6:	1a e0       	ldi	r17, 0x0A	; 10
	
	do 
	{
		SPIRead(&u8Response,
    35b8:	41 e0       	ldi	r20, 0x01	; 1
    35ba:	50 e0       	ldi	r21, 0x00	; 0
    35bc:	be 01       	movw	r22, r28
    35be:	69 5f       	subi	r22, 0xF9	; 249
    35c0:	7f 4f       	sbci	r23, 0xFF	; 255
    35c2:	83 e0       	ldi	r24, 0x03	; 3
    35c4:	0e 94 ca 20 	call	0x4194	; 0x4194 <SPITransaction>
				sizeof(u8Response));
	} while ((u8Response & 0x80) && --u8Count);
    35c8:	8f 81       	ldd	r24, Y+7	; 0x07
    35ca:	88 23       	and	r24, r24
    35cc:	14 f4       	brge	.+4      	; 0x35d2 <SDCommand+0x8e>
    35ce:	11 50       	subi	r17, 0x01	; 1
    35d0:	99 f7       	brne	.-26     	; 0x35b8 <SDCommand+0x74>
	
	return(u8Response);
}
    35d2:	27 96       	adiw	r28, 0x07	; 7
    35d4:	0f b6       	in	r0, 0x3f	; 63
    35d6:	f8 94       	cli
    35d8:	de bf       	out	0x3e, r29	; 62
    35da:	0f be       	out	0x3f, r0	; 63
    35dc:	cd bf       	out	0x3d, r28	; 61
    35de:	df 91       	pop	r29
    35e0:	cf 91       	pop	r28
    35e2:	1f 91       	pop	r17
    35e4:	0f 91       	pop	r16
    35e6:	ff 90       	pop	r15
    35e8:	ef 90       	pop	r14
    35ea:	df 90       	pop	r13
    35ec:	08 95       	ret

Disassembly of section .text.SDGoIdle:

00004dc2 <SDGoIdle>:
			sizeof(uint32_t));
}

// SD - Go idle!
static uint8_t SDGoIdle(uint8_t *pu8Response)
{
    4dc2:	cf 93       	push	r28
	uint8_t u8Response;
	
	SDSetCS(true);
    4dc4:	81 e0       	ldi	r24, 0x01	; 1
    4dc6:	0e 94 8b 27 	call	0x4f16	; 0x4f16 <SDSetCS>
	
	// Send our CMD0 (go idle)
	u8Response = SDCommand(CMD0,
    4dca:	40 e0       	ldi	r20, 0x00	; 0
    4dcc:	50 e0       	ldi	r21, 0x00	; 0
    4dce:	ba 01       	movw	r22, r20
    4dd0:	80 e0       	ldi	r24, 0x00	; 0
    4dd2:	0e 94 a2 1a 	call	0x3544	; 0x3544 <SDCommand>
    4dd6:	c8 2f       	mov	r28, r24
						   CMD0_ARG);
						   
	SDSetCS(false);
    4dd8:	80 e0       	ldi	r24, 0x00	; 0
    4dda:	0e 94 8b 27 	call	0x4f16	; 0x4f16 <SDSetCS>

	return(u8Response);
}
    4dde:	8c 2f       	mov	r24, r28
    4de0:	cf 91       	pop	r28
    4de2:	08 95       	ret

Disassembly of section .text.SDSendOpCondition:

000047cc <SDSendOpCondition>:
#define ACMD41_CRC  0x00

// Send operation condition
static uint8_t SDSendOpCondition(uint8_t *pu8Response,
								 uint32_t u32Arg)
{
    47cc:	cf 92       	push	r12
    47ce:	df 92       	push	r13
    47d0:	ef 92       	push	r14
    47d2:	ff 92       	push	r15
    47d4:	cf 93       	push	r28
    47d6:	6a 01       	movw	r12, r20
    47d8:	7b 01       	movw	r14, r22
	uint8_t u8Response;
	
	// Assert chip select
	SDSetCS(true);
    47da:	81 e0       	ldi	r24, 0x01	; 1
    47dc:	0e 94 8b 27 	call	0x4f16	; 0x4f16 <SDSetCS>
	
	// Send the app command
	u8Response = SDCommand(ACMD41,
    47e0:	b7 01       	movw	r22, r14
    47e2:	a6 01       	movw	r20, r12
    47e4:	89 ea       	ldi	r24, 0xA9	; 169
    47e6:	0e 94 a2 1a 	call	0x3544	; 0x3544 <SDCommand>
    47ea:	c8 2f       	mov	r28, r24
						   u32Arg);
	// Deassert chip select
	SDSetCS(false);
    47ec:	80 e0       	ldi	r24, 0x00	; 0
    47ee:	0e 94 8b 27 	call	0x4f16	; 0x4f16 <SDSetCS>
	
	return(u8Response);
}
    47f2:	8c 2f       	mov	r24, r28
    47f4:	cf 91       	pop	r28
    47f6:	ff 90       	pop	r15
    47f8:	ef 90       	pop	r14
    47fa:	df 90       	pop	r13
    47fc:	cf 90       	pop	r12
    47fe:	08 95       	ret

Disassembly of section .text.SDSendOpConditionArg:

00004244 <SDSendOpConditionArg>:
	return(u8Response);
}

static uint8_t SDSendOpConditionArg(uint8_t *pu8Resp,
									uint32_t u32Arg)
{
    4244:	cf 92       	push	r12
    4246:	df 92       	push	r13
    4248:	ef 92       	push	r14
    424a:	ff 92       	push	r15
    424c:	0f 93       	push	r16
    424e:	1f 93       	push	r17
    4250:	cf 93       	push	r28
    4252:	df 93       	push	r29
    4254:	8c 01       	movw	r16, r24
    4256:	6a 01       	movw	r12, r20
    4258:	7b 01       	movw	r14, r22
	uint8_t u8Attempts;
	uint8_t u8Response;
	
	u8Attempts = 0;
    425a:	c0 e0       	ldi	r28, 0x00	; 0
		
	// Loop until it comes alive - if it comes alive. Put the card in idle state.
	while (u8Attempts < SD_GO_IDLE_RETRIES)
    425c:	0f c0       	rjmp	.+30     	; 0x427c <SDSendOpConditionArg+0x38>
	{
		u8Response = SDSendOpCondition(pu8Resp,
    425e:	b7 01       	movw	r22, r14
    4260:	a6 01       	movw	r20, r12
    4262:	c8 01       	movw	r24, r16
    4264:	0e 94 e6 23 	call	0x47cc	; 0x47cc <SDSendOpCondition>
    4268:	d8 2f       	mov	r29, r24
									   u32Arg);
		if (0 == u8Response)
    426a:	88 23       	and	r24, r24
    426c:	49 f0       	breq	.+18     	; 0x4280 <SDSendOpConditionArg+0x3c>
		{
			break;
		}
			
		// Give it a little time to settle
		Delay(10000);
    426e:	60 e1       	ldi	r22, 0x10	; 16
    4270:	77 e2       	ldi	r23, 0x27	; 39
    4272:	80 e0       	ldi	r24, 0x00	; 0
    4274:	90 e0       	ldi	r25, 0x00	; 0
    4276:	0e 94 f7 21 	call	0x43ee	; 0x43ee <Delay>
		u8Attempts++;
    427a:	cf 5f       	subi	r28, 0xFF	; 255
	uint8_t u8Response;
	
	u8Attempts = 0;
		
	// Loop until it comes alive - if it comes alive. Put the card in idle state.
	while (u8Attempts < SD_GO_IDLE_RETRIES)
    427c:	c4 36       	cpi	r28, 0x64	; 100
    427e:	78 f3       	brcs	.-34     	; 0x425e <SDSendOpConditionArg+0x1a>
		Delay(10000);
		u8Attempts++;
	}

	// If we've retried too much, bail out. We're done.
	if (SD_GO_IDLE_RETRIES == u8Attempts)
    4280:	c4 36       	cpi	r28, 0x64	; 100
    4282:	09 f4       	brne	.+2      	; 0x4286 <SDSendOpConditionArg+0x42>
	{
		u8Response = 0x80;
    4284:	d0 e8       	ldi	r29, 0x80	; 128
	}
	
	return(u8Response);
}
    4286:	8d 2f       	mov	r24, r29
    4288:	df 91       	pop	r29
    428a:	cf 91       	pop	r28
    428c:	1f 91       	pop	r17
    428e:	0f 91       	pop	r16
    4290:	ff 90       	pop	r15
    4292:	ef 90       	pop	r14
    4294:	df 90       	pop	r13
    4296:	cf 90       	pop	r12
    4298:	08 95       	ret

Disassembly of section .text.SDWaitResponse7:

00004ff4 <SDWaitResponse7>:

// This will return true if a response 7 was received, otherwise false
static void SDWaitResponse7(uint8_t *pu8ResponseByte)
{
	// Go read the remaining 4 bytes
	SPIRead(pu8ResponseByte,
    4ff4:	44 e0       	ldi	r20, 0x04	; 4
    4ff6:	50 e0       	ldi	r21, 0x00	; 0
    4ff8:	bc 01       	movw	r22, r24
    4ffa:	83 e0       	ldi	r24, 0x03	; 3
    4ffc:	0e 94 ca 20 	call	0x4194	; 0x4194 <SPITransaction>
    5000:	08 95       	ret

Disassembly of section .text.SDSendInterfaceCondition:

00004800 <SDSendInterfaceCondition>:
	return(u8Response);
}

// Send interface condition
static uint8_t SDSendInterfaceCondition(uint8_t *pu8Response)
{
    4800:	0f 93       	push	r16
    4802:	1f 93       	push	r17
    4804:	cf 93       	push	r28
    4806:	8c 01       	movw	r16, r24
	uint8_t u8Response;
	
	SDSetCS(true);
    4808:	81 e0       	ldi	r24, 0x01	; 1
    480a:	0e 94 8b 27 	call	0x4f16	; 0x4f16 <SDSetCS>
	
	// Send our CMD8 Send interface condition
	u8Response = SDCommand(CMD8,
    480e:	4a ea       	ldi	r20, 0xAA	; 170
    4810:	51 e0       	ldi	r21, 0x01	; 1
    4812:	60 e0       	ldi	r22, 0x00	; 0
    4814:	70 e0       	ldi	r23, 0x00	; 0
    4816:	88 e0       	ldi	r24, 0x08	; 8
    4818:	0e 94 a2 1a 	call	0x3544	; 0x3544 <SDCommand>
    481c:	c8 2f       	mov	r28, r24
						   CMD8_ARG);
						   
	SDWaitResponse7(pu8Response);
    481e:	c8 01       	movw	r24, r16
    4820:	0e 94 fa 27 	call	0x4ff4	; 0x4ff4 <SDWaitResponse7>
		
	SDSetCS(false);
    4824:	80 e0       	ldi	r24, 0x00	; 0
    4826:	0e 94 8b 27 	call	0x4f16	; 0x4f16 <SDSetCS>

	return(u8Response);
}
    482a:	8c 2f       	mov	r24, r28
    482c:	cf 91       	pop	r28
    482e:	1f 91       	pop	r17
    4830:	0f 91       	pop	r16
    4832:	08 95       	ret

Disassembly of section .text.SDReadOCR:

00004834 <SDReadOCR>:
#define CMD58_ARG   0x00000000
#define CMD58_CRC   0x00

// Go read the OCR
static uint8_t SDReadOCR(uint8_t *pu8Response)
{
    4834:	0f 93       	push	r16
    4836:	1f 93       	push	r17
    4838:	cf 93       	push	r28
    483a:	8c 01       	movw	r16, r24
	uint8_t u8Response;
	
	// Assert chip select
	SDSetCS(true);
    483c:	81 e0       	ldi	r24, 0x01	; 1
    483e:	0e 94 8b 27 	call	0x4f16	; 0x4f16 <SDSetCS>
	
	// Send the app command
	u8Response = SDCommand(CMD58,
    4842:	40 e0       	ldi	r20, 0x00	; 0
    4844:	50 e0       	ldi	r21, 0x00	; 0
    4846:	ba 01       	movw	r22, r20
    4848:	8a e3       	ldi	r24, 0x3A	; 58
    484a:	0e 94 a2 1a 	call	0x3544	; 0x3544 <SDCommand>
    484e:	c8 2f       	mov	r28, r24
						   CMD58_ARG);

	// Read response
	SDWaitResponse7(pu8Response);
    4850:	c8 01       	movw	r24, r16
    4852:	0e 94 fa 27 	call	0x4ff4	; 0x4ff4 <SDWaitResponse7>

	// Deassert chip select
	SDSetCS(false);
    4856:	80 e0       	ldi	r24, 0x00	; 0
    4858:	0e 94 8b 27 	call	0x4f16	; 0x4f16 <SDSetCS>
	
	return(u8Response);
}
    485c:	8c 2f       	mov	r24, r28
    485e:	cf 91       	pop	r28
    4860:	1f 91       	pop	r17
    4862:	0f 91       	pop	r16
    4864:	08 95       	ret

Disassembly of section .text.SDReadCSD:

00003d02 <SDReadCSD>:
#define CMD9_ARG    0x000000000
#define CMD9_CRC    0x00

// Read CSD (card specific data) - CSD is 128 bits - see the SD spec for details.
static uint8_t SDReadCSD(uint8_t *pu8CSD)
{
    3d02:	ef 92       	push	r14
    3d04:	ff 92       	push	r15
    3d06:	0f 93       	push	r16
    3d08:	1f 93       	push	r17
    3d0a:	cf 93       	push	r28
    3d0c:	df 93       	push	r29
    3d0e:	0f 92       	push	r0
    3d10:	cd b7       	in	r28, 0x3d	; 61
    3d12:	de b7       	in	r29, 0x3e	; 62
    3d14:	7c 01       	movw	r14, r24
	uint8_t u8Response;
	uint8_t u8CmdResponse;
	uint8_t u8Count = 8;
	
	SDSetCS(true);
    3d16:	81 e0       	ldi	r24, 0x01	; 1
    3d18:	0e 94 8b 27 	call	0x4f16	; 0x4f16 <SDSetCS>
	
	// Send our CMD9 (read CSD)
	u8CmdResponse = SDCommand(CMD9,
    3d1c:	40 e0       	ldi	r20, 0x00	; 0
    3d1e:	50 e0       	ldi	r21, 0x00	; 0
    3d20:	ba 01       	movw	r22, r20
    3d22:	89 e0       	ldi	r24, 0x09	; 9
    3d24:	0e 94 a2 1a 	call	0x3544	; 0x3544 <SDCommand>
    3d28:	08 2f       	mov	r16, r24
							  CMD9_ARG);
	
	// Success! Let's get a response
	if (u8CmdResponse)
    3d2a:	81 11       	cpse	r24, r1
    3d2c:	1c c0       	rjmp	.+56     	; 0x3d66 <SDReadCSD+0x64>
    3d2e:	18 e0       	ldi	r17, 0x08	; 8
    3d30:	01 c0       	rjmp	.+2      	; 0x3d34 <SDReadCSD+0x32>
	do 
	{
		SPIRead(&u8Response,
			    sizeof(u8Response));
	} while ((u8Response != SD_START_TOKEN) &&
			 (u8Count--));
    3d32:	18 2f       	mov	r17, r24
	}
	
	// Wait until SD_START_TOKEN (start of data sector). We should easily see it in a few bytes.
	do 
	{
		SPIRead(&u8Response,
    3d34:	41 e0       	ldi	r20, 0x01	; 1
    3d36:	50 e0       	ldi	r21, 0x00	; 0
    3d38:	be 01       	movw	r22, r28
    3d3a:	6f 5f       	subi	r22, 0xFF	; 255
    3d3c:	7f 4f       	sbci	r23, 0xFF	; 255
    3d3e:	83 e0       	ldi	r24, 0x03	; 3
    3d40:	0e 94 ca 20 	call	0x4194	; 0x4194 <SPITransaction>
			    sizeof(u8Response));
	} while ((u8Response != SD_START_TOKEN) &&
    3d44:	89 81       	ldd	r24, Y+1	; 0x01
			 (u8Count--));
    3d46:	8e 3f       	cpi	r24, 0xFE	; 254
    3d48:	29 f0       	breq	.+10     	; 0x3d54 <SDReadCSD+0x52>
    3d4a:	8f ef       	ldi	r24, 0xFF	; 255
    3d4c:	81 0f       	add	r24, r17
	// Wait until SD_START_TOKEN (start of data sector). We should easily see it in a few bytes.
	do 
	{
		SPIRead(&u8Response,
			    sizeof(u8Response));
	} while ((u8Response != SD_START_TOKEN) &&
    3d4e:	11 11       	cpse	r17, r1
    3d50:	f0 cf       	rjmp	.-32     	; 0x3d32 <SDReadCSD+0x30>
    3d52:	01 c0       	rjmp	.+2      	; 0x3d56 <SDReadCSD+0x54>
    3d54:	81 2f       	mov	r24, r17
			 (u8Count--));
			 
	// If we haven't seen it in u8Count bytes, then error the call
	if (0 == u8Count)
    3d56:	88 23       	and	r24, r24
    3d58:	31 f0       	breq	.+12     	; 0x3d66 <SDReadCSD+0x64>
	{
		goto errorExit;
	}
	
	// Go read the remaining 16 bytes
	SPIRead(pu8CSD,
    3d5a:	40 e1       	ldi	r20, 0x10	; 16
    3d5c:	50 e0       	ldi	r21, 0x00	; 0
    3d5e:	b7 01       	movw	r22, r14
    3d60:	83 e0       	ldi	r24, 0x03	; 3
    3d62:	0e 94 ca 20 	call	0x4194	; 0x4194 <SPITransaction>
		    16);
	
errorExit:	
	SDSetCS(false);
    3d66:	80 e0       	ldi	r24, 0x00	; 0
    3d68:	0e 94 8b 27 	call	0x4f16	; 0x4f16 <SDSetCS>
	return(u8CmdResponse);
	
}
    3d6c:	80 2f       	mov	r24, r16
    3d6e:	0f 90       	pop	r0
    3d70:	df 91       	pop	r29
    3d72:	cf 91       	pop	r28
    3d74:	1f 91       	pop	r17
    3d76:	0f 91       	pop	r16
    3d78:	ff 90       	pop	r15
    3d7a:	ef 90       	pop	r14
    3d7c:	08 95       	ret

Disassembly of section .text.SDReceiveDataBlock:

000038ea <SDReceiveDataBlock>:
}

// Receives a datablock during the data phase which may take some time
static bool SDReceiveDataBlock(uint8_t *pu8Buffer,
							   uint16_t u16RXCount)
{
    38ea:	cf 92       	push	r12
    38ec:	df 92       	push	r13
    38ee:	ef 92       	push	r14
    38f0:	ff 92       	push	r15
    38f2:	0f 93       	push	r16
    38f4:	1f 93       	push	r17
    38f6:	cf 93       	push	r28
    38f8:	df 93       	push	r29
    38fa:	0f 92       	push	r0
    38fc:	cd b7       	in	r28, 0x3d	; 61
    38fe:	de b7       	in	r29, 0x3e	; 62
    3900:	7c 01       	movw	r14, r24
    3902:	6b 01       	movw	r12, r22
	uint8_t u8Response;
	uint16_t u16Count = 4096;
    3904:	00 e0       	ldi	r16, 0x00	; 0
    3906:	10 e1       	ldi	r17, 0x10	; 16
    3908:	01 c0       	rjmp	.+2      	; 0x390c <SDReceiveDataBlock+0x22>
	{
		SPIRead(&u8Response,
				sizeof(u8Response));
	} 
	while ((u8Response != SD_START_TOKEN) &&
		   (u16Count--));
    390a:	89 01       	movw	r16, r18
	uint16_t u16Count = 4096;
	
	// Wait for response token
	do 
	{
		SPIRead(&u8Response,
    390c:	41 e0       	ldi	r20, 0x01	; 1
    390e:	50 e0       	ldi	r21, 0x00	; 0
    3910:	be 01       	movw	r22, r28
    3912:	6f 5f       	subi	r22, 0xFF	; 255
    3914:	7f 4f       	sbci	r23, 0xFF	; 255
    3916:	83 e0       	ldi	r24, 0x03	; 3
    3918:	0e 94 ca 20 	call	0x4194	; 0x4194 <SPITransaction>
				sizeof(u8Response));
	} 
	while ((u8Response != SD_START_TOKEN) &&
    391c:	89 81       	ldd	r24, Y+1	; 0x01
		   (u16Count--));
    391e:	8e 3f       	cpi	r24, 0xFE	; 254
    3920:	29 f0       	breq	.+10     	; 0x392c <SDReceiveDataBlock+0x42>
    3922:	98 01       	movw	r18, r16
    3924:	21 50       	subi	r18, 0x01	; 1
    3926:	31 09       	sbc	r19, r1
	do 
	{
		SPIRead(&u8Response,
				sizeof(u8Response));
	} 
	while ((u8Response != SD_START_TOKEN) &&
    3928:	01 2b       	or	r16, r17
    392a:	79 f7       	brne	.-34     	; 0x390a <SDReceiveDataBlock+0x20>
		   (u16Count--));
		   
	if (u8Response != SD_START_TOKEN)
    392c:	8e 3f       	cpi	r24, 0xFE	; 254
    392e:	b9 f4       	brne	.+46     	; 0x395e <SDReceiveDataBlock+0x74>
	{
		return(false);
	}
	
	// Start of data. Pull it down.
	SPIRead(pu8Buffer,
    3930:	a6 01       	movw	r20, r12
    3932:	b7 01       	movw	r22, r14
    3934:	83 e0       	ldi	r24, 0x03	; 3
    3936:	0e 94 ca 20 	call	0x4194	; 0x4194 <SPITransaction>
			u16RXCount);
			
	// Discard CRC
	SPIRead(&u8Response,
    393a:	41 e0       	ldi	r20, 0x01	; 1
    393c:	50 e0       	ldi	r21, 0x00	; 0
    393e:	be 01       	movw	r22, r28
    3940:	6f 5f       	subi	r22, 0xFF	; 255
    3942:	7f 4f       	sbci	r23, 0xFF	; 255
    3944:	83 e0       	ldi	r24, 0x03	; 3
    3946:	0e 94 ca 20 	call	0x4194	; 0x4194 <SPITransaction>
			sizeof(u8Response));
	SPIRead(&u8Response,
    394a:	41 e0       	ldi	r20, 0x01	; 1
    394c:	50 e0       	ldi	r21, 0x00	; 0
    394e:	be 01       	movw	r22, r28
    3950:	6f 5f       	subi	r22, 0xFF	; 255
    3952:	7f 4f       	sbci	r23, 0xFF	; 255
    3954:	83 e0       	ldi	r24, 0x03	; 3
    3956:	0e 94 ca 20 	call	0x4194	; 0x4194 <SPITransaction>
			sizeof(u8Response));
	return(true);			   
    395a:	81 e0       	ldi	r24, 0x01	; 1
    395c:	01 c0       	rjmp	.+2      	; 0x3960 <SDReceiveDataBlock+0x76>
	while ((u8Response != SD_START_TOKEN) &&
		   (u16Count--));
		   
	if (u8Response != SD_START_TOKEN)
	{
		return(false);
    395e:	80 e0       	ldi	r24, 0x00	; 0
	SPIRead(&u8Response,
			sizeof(u8Response));
	SPIRead(&u8Response,
			sizeof(u8Response));
	return(true);			   
}
    3960:	0f 90       	pop	r0
    3962:	df 91       	pop	r29
    3964:	cf 91       	pop	r28
    3966:	1f 91       	pop	r17
    3968:	0f 91       	pop	r16
    396a:	ff 90       	pop	r15
    396c:	ef 90       	pop	r14
    396e:	df 90       	pop	r13
    3970:	cf 90       	pop	r12
    3972:	08 95       	ret

Disassembly of section .text.SDTransmitDataBlock:

00003260 <SDTransmitDataBlock>:

// Transmits a datablock during the data phase which may take some time
static bool SDTransmitDataBlock(uint8_t *pu8Buffer,
							    uint16_t u16TXCount,
								uint8_t u8DataPhaseToken)
{
    3260:	ef 92       	push	r14
    3262:	ff 92       	push	r15
    3264:	0f 93       	push	r16
    3266:	1f 93       	push	r17
    3268:	cf 93       	push	r28
    326a:	df 93       	push	r29
    326c:	00 d0       	rcall	.+0      	; 0x326e <SDTransmitDataBlock+0xe>
    326e:	cd b7       	in	r28, 0x3d	; 61
    3270:	de b7       	in	r29, 0x3e	; 62
    3272:	8c 01       	movw	r16, r24
    3274:	7b 01       	movw	r14, r22
    3276:	4a 83       	std	Y+2, r20	; 0x02
	uint8_t u8Response;
	uint16_t u16Attempts;
	bool bResult = true;

	// Send the data phase token (whatever it is)
	SPIWrite(&u8DataPhaseToken,
    3278:	41 e0       	ldi	r20, 0x01	; 1
    327a:	50 e0       	ldi	r21, 0x00	; 0
    327c:	be 01       	movw	r22, r28
    327e:	6e 5f       	subi	r22, 0xFE	; 254
    3280:	7f 4f       	sbci	r23, 0xFF	; 255
    3282:	81 e0       	ldi	r24, 0x01	; 1
    3284:	0e 94 ca 20 	call	0x4194	; 0x4194 <SPITransaction>
			 sizeof(u8DataPhaseToken));
	
	if (u8DataPhaseToken != SD_STOP_TRANSACTION)
    3288:	8a 81       	ldd	r24, Y+2	; 0x02
    328a:	8d 3f       	cpi	r24, 0xFD	; 253
    328c:	e1 f1       	breq	.+120    	; 0x3306 <SDTransmitDataBlock+0xa6>
	{
		// As long as we're not stopping a transaction, we're writing data
		SPIWrite(pu8Buffer,
    328e:	a7 01       	movw	r20, r14
    3290:	b8 01       	movw	r22, r16
    3292:	81 e0       	ldi	r24, 0x01	; 1
    3294:	0e 94 ca 20 	call	0x4194	; 0x4194 <SPITransaction>
				 u16TXCount);
				 
		// Wait for acceptance of the sector
		u16Attempts = 0;
    3298:	00 e0       	ldi	r16, 0x00	; 0
    329a:	10 e0       	ldi	r17, 0x00	; 0
		while (u16Attempts < SD_MAX_WRITE_ATTEMPTS)
    329c:	0d c0       	rjmp	.+26     	; 0x32b8 <SDTransmitDataBlock+0x58>
		{
			// Get some data
			SPIRead(&u8Response,
    329e:	41 e0       	ldi	r20, 0x01	; 1
    32a0:	50 e0       	ldi	r21, 0x00	; 0
    32a2:	be 01       	movw	r22, r28
    32a4:	6f 5f       	subi	r22, 0xFF	; 255
    32a6:	7f 4f       	sbci	r23, 0xFF	; 255
    32a8:	83 e0       	ldi	r24, 0x03	; 3
    32aa:	0e 94 ca 20 	call	0x4194	; 0x4194 <SPITransaction>
					sizeof(u8Response));
			if (u8Response != 0xff)
    32ae:	89 81       	ldd	r24, Y+1	; 0x01
    32b0:	8f 3f       	cpi	r24, 0xFF	; 255
    32b2:	31 f4       	brne	.+12     	; 0x32c0 <SDTransmitDataBlock+0x60>
			{
				break;
			}
				
			++u16Attempts;
    32b4:	0f 5f       	subi	r16, 0xFF	; 255
    32b6:	1f 4f       	sbci	r17, 0xFF	; 255
		SPIWrite(pu8Buffer,
				 u16TXCount);
				 
		// Wait for acceptance of the sector
		u16Attempts = 0;
		while (u16Attempts < SD_MAX_WRITE_ATTEMPTS)
    32b8:	0e 39       	cpi	r16, 0x9E	; 158
    32ba:	88 e9       	ldi	r24, 0x98	; 152
    32bc:	18 07       	cpc	r17, r24
    32be:	78 f3       	brcs	.-34     	; 0x329e <SDTransmitDataBlock+0x3e>
				
			++u16Attempts;
		}
			
		// We've timed out or else the card is dead
		if (SD_MAX_WRITE_ATTEMPTS == u16Attempts)
    32c0:	0e 39       	cpi	r16, 0x9E	; 158
    32c2:	18 49       	sbci	r17, 0x98	; 152
    32c4:	11 f1       	breq	.+68     	; 0x330a <SDTransmitDataBlock+0xaa>
			bResult = false;
			goto errorExit;
		}
			
		// See if the data was accepted
		u8Response &= 0x1f;
    32c6:	89 81       	ldd	r24, Y+1	; 0x01
    32c8:	8f 71       	andi	r24, 0x1F	; 31
    32ca:	89 83       	std	Y+1, r24	; 0x01
		if (0x05 == u8Response)
    32cc:	85 30       	cpi	r24, 0x05	; 5
    32ce:	81 f0       	breq	.+32     	; 0x32f0 <SDTransmitDataBlock+0x90>
			// Success!
		}
		else
		{
			// Sector not accepted
			bResult = false;
    32d0:	80 e0       	ldi	r24, 0x00	; 0
    32d2:	1e c0       	rjmp	.+60     	; 0x3310 <SDTransmitDataBlock+0xb0>
			// Wait for the write to finish
			u16Attempts = 0;
			while (u16Attempts < SD_MAX_WRITE_ATTEMPTS)
			{
				// Wait for the card to accept writing the sector
				SPIRead(&u8Response,
    32d4:	41 e0       	ldi	r20, 0x01	; 1
    32d6:	50 e0       	ldi	r21, 0x00	; 0
    32d8:	be 01       	movw	r22, r28
    32da:	6f 5f       	subi	r22, 0xFF	; 255
    32dc:	7f 4f       	sbci	r23, 0xFF	; 255
    32de:	83 e0       	ldi	r24, 0x03	; 3
    32e0:	0e 94 ca 20 	call	0x4194	; 0x4194 <SPITransaction>
						sizeof(u8Response));
				if (u8Response)
    32e4:	89 81       	ldd	r24, Y+1	; 0x01
    32e6:	81 11       	cpse	r24, r1
    32e8:	09 c0       	rjmp	.+18     	; 0x32fc <SDTransmitDataBlock+0x9c>
				{
					break;
				}
					
				++u16Attempts;
    32ea:	0f 5f       	subi	r16, 0xFF	; 255
    32ec:	1f 4f       	sbci	r17, 0xFF	; 255
    32ee:	02 c0       	rjmp	.+4      	; 0x32f4 <SDTransmitDataBlock+0x94>
    32f0:	00 e0       	ldi	r16, 0x00	; 0
    32f2:	10 e0       	ldi	r17, 0x00	; 0
		u8Response &= 0x1f;
		if (0x05 == u8Response)
		{
			// Wait for the write to finish
			u16Attempts = 0;
			while (u16Attempts < SD_MAX_WRITE_ATTEMPTS)
    32f4:	0e 39       	cpi	r16, 0x9E	; 158
    32f6:	88 e9       	ldi	r24, 0x98	; 152
    32f8:	18 07       	cpc	r17, r24
    32fa:	60 f3       	brcs	.-40     	; 0x32d4 <SDTransmitDataBlock+0x74>
				}
					
				++u16Attempts;
			}
				
			if (SD_MAX_WRITE_ATTEMPTS == u16Attempts)
    32fc:	0e 39       	cpi	r16, 0x9E	; 158
    32fe:	18 49       	sbci	r17, 0x98	; 152
    3300:	31 f0       	breq	.+12     	; 0x330e <SDTransmitDataBlock+0xae>
							    uint16_t u16TXCount,
								uint8_t u8DataPhaseToken)
{
	uint8_t u8Response;
	uint16_t u16Attempts;
	bool bResult = true;
    3302:	81 e0       	ldi	r24, 0x01	; 1
    3304:	05 c0       	rjmp	.+10     	; 0x3310 <SDTransmitDataBlock+0xb0>
    3306:	81 e0       	ldi	r24, 0x01	; 1
    3308:	03 c0       	rjmp	.+6      	; 0x3310 <SDTransmitDataBlock+0xb0>
		}
			
		// We've timed out or else the card is dead
		if (SD_MAX_WRITE_ATTEMPTS == u16Attempts)
		{
			bResult = false;
    330a:	80 e0       	ldi	r24, 0x00	; 0
    330c:	01 c0       	rjmp	.+2      	; 0x3310 <SDTransmitDataBlock+0xb0>
				++u16Attempts;
			}
				
			if (SD_MAX_WRITE_ATTEMPTS == u16Attempts)
			{
				bResult = false;
    330e:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	
errorExit:
	return(bResult);
}
    3310:	0f 90       	pop	r0
    3312:	0f 90       	pop	r0
    3314:	df 91       	pop	r29
    3316:	cf 91       	pop	r28
    3318:	1f 91       	pop	r17
    331a:	0f 91       	pop	r16
    331c:	ff 90       	pop	r15
    331e:	ef 90       	pop	r14
    3320:	08 95       	ret

Disassembly of section .text.SDInit:

0000219c <SDInit>:

bool SDGetBlockSize(uint32_t *pu32BlockSize)
{
	*pu32BlockSize = sg_u16BlockSize;
	return(true);
}
    219c:	1f 93       	push	r17
    219e:	cf 93       	push	r28
    21a0:	df 93       	push	r29
    21a2:	00 d0       	rcall	.+0      	; 0x21a4 <SDInit+0x8>
    21a4:	00 d0       	rcall	.+0      	; 0x21a6 <SDInit+0xa>
    21a6:	0f 92       	push	r0
    21a8:	cd b7       	in	r28, 0x3d	; 61
    21aa:	de b7       	in	r29, 0x3e	; 62
    21ac:	87 b1       	in	r24, 0x07	; 7
    21ae:	80 64       	ori	r24, 0x40	; 64
    21b0:	87 b9       	out	0x07, r24	; 7
    21b2:	88 b1       	in	r24, 0x08	; 8
    21b4:	80 64       	ori	r24, 0x40	; 64
    21b6:	88 b9       	out	0x08, r24	; 8
    21b8:	88 b1       	in	r24, 0x08	; 8
    21ba:	80 64       	ori	r24, 0x40	; 64
    21bc:	88 b9       	out	0x08, r24	; 8
    21be:	0e 94 eb 24 	call	0x49d6	; 0x49d6 <SPIInit>
    21c2:	0e 94 5d 23 	call	0x46ba	; 0x46ba <SDPowerup>
    21c6:	10 e0       	ldi	r17, 0x00	; 0
    21c8:	0d c0       	rjmp	.+26     	; 0x21e4 <SDInit+0x48>
    21ca:	ce 01       	movw	r24, r28
    21cc:	01 96       	adiw	r24, 0x01	; 1
    21ce:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <SDGoIdle>
    21d2:	81 30       	cpi	r24, 0x01	; 1
    21d4:	49 f0       	breq	.+18     	; 0x21e8 <SDInit+0x4c>
    21d6:	60 e1       	ldi	r22, 0x10	; 16
    21d8:	77 e2       	ldi	r23, 0x27	; 39
    21da:	80 e0       	ldi	r24, 0x00	; 0
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	0e 94 f7 21 	call	0x43ee	; 0x43ee <Delay>
    21e2:	1f 5f       	subi	r17, 0xFF	; 255
    21e4:	14 36       	cpi	r17, 0x64	; 100
    21e6:	88 f3       	brcs	.-30     	; 0x21ca <SDInit+0x2e>
    21e8:	14 36       	cpi	r17, 0x64	; 100
    21ea:	09 f4       	brne	.+2      	; 0x21ee <SDInit+0x52>
    21ec:	76 c0       	rjmp	.+236    	; 0x22da <SDInit+0x13e>
    21ee:	ce 01       	movw	r24, r28
    21f0:	01 96       	adiw	r24, 0x01	; 1
    21f2:	25 e0       	ldi	r18, 0x05	; 5
    21f4:	fc 01       	movw	r30, r24
    21f6:	11 92       	st	Z+, r1
    21f8:	2a 95       	dec	r18
    21fa:	e9 f7       	brne	.-6      	; 0x21f6 <SDInit+0x5a>
    21fc:	0e 94 00 24 	call	0x4800	; 0x4800 <SDSendInterfaceCondition>
    2200:	81 30       	cpi	r24, 0x01	; 1
    2202:	09 f0       	breq	.+2      	; 0x2206 <SDInit+0x6a>
    2204:	5e c0       	rjmp	.+188    	; 0x22c2 <SDInit+0x126>
    2206:	8c 81       	ldd	r24, Y+4	; 0x04
    2208:	8a 3a       	cpi	r24, 0xAA	; 170
    220a:	09 f0       	breq	.+2      	; 0x220e <SDInit+0x72>
    220c:	68 c0       	rjmp	.+208    	; 0x22de <SDInit+0x142>
    220e:	40 e0       	ldi	r20, 0x00	; 0
    2210:	50 e0       	ldi	r21, 0x00	; 0
    2212:	60 e0       	ldi	r22, 0x00	; 0
    2214:	70 e4       	ldi	r23, 0x40	; 64
    2216:	ce 01       	movw	r24, r28
    2218:	01 96       	adiw	r24, 0x01	; 1
    221a:	0e 94 22 21 	call	0x4244	; 0x4244 <SDSendOpConditionArg>
    221e:	81 11       	cpse	r24, r1
    2220:	60 c0       	rjmp	.+192    	; 0x22e2 <SDInit+0x146>
    2222:	ce 01       	movw	r24, r28
    2224:	01 96       	adiw	r24, 0x01	; 1
    2226:	0e 94 1a 24 	call	0x4834	; 0x4834 <SDReadOCR>
    222a:	88 23       	and	r24, r24
    222c:	0c f4       	brge	.+2      	; 0x2230 <SDInit+0x94>
    222e:	5b c0       	rjmp	.+182    	; 0x22e6 <SDInit+0x14a>
    2230:	85 e2       	ldi	r24, 0x25	; 37
    2232:	9b e0       	ldi	r25, 0x0B	; 11
    2234:	0e 94 81 1e 	call	0x3d02	; 0x3d02 <SDReadCSD>
    2238:	88 23       	and	r24, r24
    223a:	0c f4       	brge	.+2      	; 0x223e <SDInit+0xa2>
    223c:	56 c0       	rjmp	.+172    	; 0x22ea <SDInit+0x14e>
    223e:	e5 e2       	ldi	r30, 0x25	; 37
    2240:	fb e0       	ldi	r31, 0x0B	; 11
    2242:	87 81       	ldd	r24, Z+7	; 0x07
    2244:	8f 73       	andi	r24, 0x3F	; 63
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	a0 e0       	ldi	r26, 0x00	; 0
    224a:	b0 e0       	ldi	r27, 0x00	; 0
    224c:	bc 01       	movw	r22, r24
    224e:	55 27       	eor	r21, r21
    2250:	44 27       	eor	r20, r20
    2252:	90 85       	ldd	r25, Z+8	; 0x08
    2254:	89 2f       	mov	r24, r25
    2256:	90 e0       	ldi	r25, 0x00	; 0
    2258:	a0 e0       	ldi	r26, 0x00	; 0
    225a:	b0 e0       	ldi	r27, 0x00	; 0
    225c:	ba 2f       	mov	r27, r26
    225e:	a9 2f       	mov	r26, r25
    2260:	98 2f       	mov	r25, r24
    2262:	88 27       	eor	r24, r24
    2264:	84 2b       	or	r24, r20
    2266:	95 2b       	or	r25, r21
    2268:	a6 2b       	or	r26, r22
    226a:	b7 2b       	or	r27, r23
    226c:	21 85       	ldd	r18, Z+9	; 0x09
    226e:	82 2b       	or	r24, r18
    2270:	01 96       	adiw	r24, 0x01	; 1
    2272:	a1 1d       	adc	r26, r1
    2274:	b1 1d       	adc	r27, r1
    2276:	07 2e       	mov	r0, r23
    2278:	7a e0       	ldi	r23, 0x0A	; 10
    227a:	88 0f       	add	r24, r24
    227c:	99 1f       	adc	r25, r25
    227e:	aa 1f       	adc	r26, r26
    2280:	bb 1f       	adc	r27, r27
    2282:	7a 95       	dec	r23
    2284:	d1 f7       	brne	.-12     	; 0x227a <SDInit+0xde>
    2286:	70 2d       	mov	r23, r0
    2288:	80 93 4c 0b 	sts	0x0B4C, r24	; 0x800b4c <sg_u32SDSectorCount>
    228c:	90 93 4d 0b 	sts	0x0B4D, r25	; 0x800b4d <sg_u32SDSectorCount+0x1>
    2290:	a0 93 4e 0b 	sts	0x0B4E, r26	; 0x800b4e <sg_u32SDSectorCount+0x2>
    2294:	b0 93 4f 0b 	sts	0x0B4F, r27	; 0x800b4f <sg_u32SDSectorCount+0x3>
    2298:	25 81       	ldd	r18, Z+5	; 0x05
    229a:	2f 70       	andi	r18, 0x0F	; 15
    229c:	81 e0       	ldi	r24, 0x01	; 1
    229e:	90 e0       	ldi	r25, 0x00	; 0
    22a0:	02 c0       	rjmp	.+4      	; 0x22a6 <SDInit+0x10a>
    22a2:	88 0f       	add	r24, r24
    22a4:	99 1f       	adc	r25, r25
    22a6:	2a 95       	dec	r18
    22a8:	e2 f7       	brpl	.-8      	; 0x22a2 <SDInit+0x106>
    22aa:	90 93 61 0b 	sts	0x0B61, r25	; 0x800b61 <sg_u16BlockSize+0x1>
    22ae:	80 93 60 0b 	sts	0x0B60, r24	; 0x800b60 <sg_u16BlockSize>
    22b2:	60 ec       	ldi	r22, 0xC0	; 192
    22b4:	78 ed       	ldi	r23, 0xD8	; 216
    22b6:	87 ea       	ldi	r24, 0xA7	; 167
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	0e 94 06 18 	call	0x300c	; 0x300c <SPISetBaudRate>
    22be:	81 e0       	ldi	r24, 0x01	; 1
    22c0:	17 c0       	rjmp	.+46     	; 0x22f0 <SDInit+0x154>
    22c2:	40 e0       	ldi	r20, 0x00	; 0
    22c4:	50 e0       	ldi	r21, 0x00	; 0
    22c6:	60 e0       	ldi	r22, 0x00	; 0
    22c8:	70 e4       	ldi	r23, 0x40	; 64
    22ca:	ce 01       	movw	r24, r28
    22cc:	01 96       	adiw	r24, 0x01	; 1
    22ce:	0e 94 22 21 	call	0x4244	; 0x4244 <SDSendOpConditionArg>
    22d2:	81 11       	cpse	r24, r1
    22d4:	0c c0       	rjmp	.+24     	; 0x22ee <SDInit+0x152>
    22d6:	81 e0       	ldi	r24, 0x01	; 1
    22d8:	0b c0       	rjmp	.+22     	; 0x22f0 <SDInit+0x154>
    22da:	80 e0       	ldi	r24, 0x00	; 0
    22dc:	09 c0       	rjmp	.+18     	; 0x22f0 <SDInit+0x154>
    22de:	80 e0       	ldi	r24, 0x00	; 0
    22e0:	07 c0       	rjmp	.+14     	; 0x22f0 <SDInit+0x154>
    22e2:	80 e0       	ldi	r24, 0x00	; 0
    22e4:	05 c0       	rjmp	.+10     	; 0x22f0 <SDInit+0x154>
    22e6:	80 e0       	ldi	r24, 0x00	; 0
    22e8:	03 c0       	rjmp	.+6      	; 0x22f0 <SDInit+0x154>
    22ea:	80 e0       	ldi	r24, 0x00	; 0
    22ec:	01 c0       	rjmp	.+2      	; 0x22f0 <SDInit+0x154>
    22ee:	80 e0       	ldi	r24, 0x00	; 0
    22f0:	0f 90       	pop	r0
    22f2:	0f 90       	pop	r0
    22f4:	0f 90       	pop	r0
    22f6:	0f 90       	pop	r0
    22f8:	0f 90       	pop	r0
    22fa:	df 91       	pop	r29
    22fc:	cf 91       	pop	r28
    22fe:	1f 91       	pop	r17
    2300:	08 95       	ret

Disassembly of section .text.SDRead:

00002e68 <SDRead>:

// Read one or more sectors from SD
bool SDRead(uint32_t u32Sector,
			uint8_t *pu8Buffer,
			uint32_t u32SectorCount)
{
    2e68:	8f 92       	push	r8
    2e6a:	9f 92       	push	r9
    2e6c:	af 92       	push	r10
    2e6e:	bf 92       	push	r11
    2e70:	cf 92       	push	r12
    2e72:	df 92       	push	r13
    2e74:	ef 92       	push	r14
    2e76:	ff 92       	push	r15
    2e78:	0f 93       	push	r16
    2e7a:	1f 93       	push	r17
    2e7c:	cf 93       	push	r28
    2e7e:	df 93       	push	r29
    2e80:	4b 01       	movw	r8, r22
    2e82:	5c 01       	movw	r10, r24
    2e84:	ea 01       	movw	r28, r20
    2e86:	68 01       	movw	r12, r16
    2e88:	79 01       	movw	r14, r18
	bool bResult = false;
	
	// Pet the watchdog
	WatchdogReset();
    2e8a:	0e 94 2f 28 	call	0x505e	; 0x505e <WatchdogReset>
		
	// Assert chip select
	SDSetCS(true);
    2e8e:	81 e0       	ldi	r24, 0x01	; 1
    2e90:	0e 94 8b 27 	call	0x4f16	; 0x4f16 <SDSetCS>

	if (1 == u32SectorCount)
    2e94:	81 e0       	ldi	r24, 0x01	; 1
    2e96:	c8 16       	cp	r12, r24
    2e98:	d1 04       	cpc	r13, r1
    2e9a:	e1 04       	cpc	r14, r1
    2e9c:	f1 04       	cpc	r15, r1
    2e9e:	81 f4       	brne	.+32     	; 0x2ec0 <SDRead+0x58>
	{
		if (0 == SDCommand(CMD17,
    2ea0:	b5 01       	movw	r22, r10
    2ea2:	a4 01       	movw	r20, r8
    2ea4:	81 e1       	ldi	r24, 0x11	; 17
    2ea6:	0e 94 a2 1a 	call	0x3544	; 0x3544 <SDCommand>
    2eaa:	81 11       	cpse	r24, r1
    2eac:	35 c0       	rjmp	.+106    	; 0x2f18 <SDRead+0xb0>
						   u32Sector))
		{
			bResult = SDReceiveDataBlock(pu8Buffer,
    2eae:	60 91 60 0b 	lds	r22, 0x0B60	; 0x800b60 <sg_u16BlockSize>
    2eb2:	70 91 61 0b 	lds	r23, 0x0B61	; 0x800b61 <sg_u16BlockSize+0x1>
    2eb6:	ce 01       	movw	r24, r28
    2eb8:	0e 94 75 1c 	call	0x38ea	; 0x38ea <SDReceiveDataBlock>
    2ebc:	18 2f       	mov	r17, r24
    2ebe:	2f c0       	rjmp	.+94     	; 0x2f1e <SDRead+0xb6>
		}
	}
	else
	{
		// Multisector
		if (0 == SDCommand(CMD18,
    2ec0:	b5 01       	movw	r22, r10
    2ec2:	a4 01       	movw	r20, r8
    2ec4:	82 e1       	ldi	r24, 0x12	; 18
    2ec6:	0e 94 a2 1a 	call	0x3544	; 0x3544 <SDCommand>
    2eca:	88 23       	and	r24, r24
    2ecc:	19 f0       	breq	.+6      	; 0x2ed4 <SDRead+0x6c>
    2ece:	26 c0       	rjmp	.+76     	; 0x2f1c <SDRead+0xb4>
				WatchdogReset();
				
				pu8Buffer += sg_u16BlockSize;
			} 
			while ((bResult) &&
				   (u32SectorCount--));
    2ed0:	6c 01       	movw	r12, r24
    2ed2:	7d 01       	movw	r14, r26
		if (0 == SDCommand(CMD18,
						   u32Sector))
		{
			do 
			{
				bResult = SDReceiveDataBlock(pu8Buffer,
    2ed4:	60 91 60 0b 	lds	r22, 0x0B60	; 0x800b60 <sg_u16BlockSize>
    2ed8:	70 91 61 0b 	lds	r23, 0x0B61	; 0x800b61 <sg_u16BlockSize+0x1>
    2edc:	ce 01       	movw	r24, r28
    2ede:	0e 94 75 1c 	call	0x38ea	; 0x38ea <SDReceiveDataBlock>
    2ee2:	18 2f       	mov	r17, r24
							 				 sg_u16BlockSize);
				// Pet the watchdog
				WatchdogReset();
    2ee4:	0e 94 2f 28 	call	0x505e	; 0x505e <WatchdogReset>
				
				pu8Buffer += sg_u16BlockSize;
    2ee8:	80 91 60 0b 	lds	r24, 0x0B60	; 0x800b60 <sg_u16BlockSize>
    2eec:	90 91 61 0b 	lds	r25, 0x0B61	; 0x800b61 <sg_u16BlockSize+0x1>
    2ef0:	c8 0f       	add	r28, r24
    2ef2:	d9 1f       	adc	r29, r25
			} 
			while ((bResult) &&
				   (u32SectorCount--));
    2ef4:	11 23       	and	r17, r17
    2ef6:	49 f0       	breq	.+18     	; 0x2f0a <SDRead+0xa2>
    2ef8:	d7 01       	movw	r26, r14
    2efa:	c6 01       	movw	r24, r12
    2efc:	01 97       	sbiw	r24, 0x01	; 1
    2efe:	a1 09       	sbc	r26, r1
    2f00:	b1 09       	sbc	r27, r1
				// Pet the watchdog
				WatchdogReset();
				
				pu8Buffer += sg_u16BlockSize;
			} 
			while ((bResult) &&
    2f02:	cd 28       	or	r12, r13
    2f04:	ce 28       	or	r12, r14
    2f06:	cf 28       	or	r12, r15
    2f08:	19 f7       	brne	.-58     	; 0x2ed0 <SDRead+0x68>
				   (u32SectorCount--));
				   
			// Regardless, send a stop command
			(void) SDCommand(CMD12,
    2f0a:	40 e0       	ldi	r20, 0x00	; 0
    2f0c:	50 e0       	ldi	r21, 0x00	; 0
    2f0e:	ba 01       	movw	r22, r20
    2f10:	8c e0       	ldi	r24, 0x0C	; 12
    2f12:	0e 94 a2 1a 	call	0x3544	; 0x3544 <SDCommand>
    2f16:	03 c0       	rjmp	.+6      	; 0x2f1e <SDRead+0xb6>
// Read one or more sectors from SD
bool SDRead(uint32_t u32Sector,
			uint8_t *pu8Buffer,
			uint32_t u32SectorCount)
{
	bool bResult = false;
    2f18:	10 e0       	ldi	r17, 0x00	; 0
    2f1a:	01 c0       	rjmp	.+2      	; 0x2f1e <SDRead+0xb6>
    2f1c:	10 e0       	ldi	r17, 0x00	; 0
		{
			// Failed
		}
	}
	
	SDSetCS(false);
    2f1e:	80 e0       	ldi	r24, 0x00	; 0
    2f20:	0e 94 8b 27 	call	0x4f16	; 0x4f16 <SDSetCS>

	return(bResult);
}
    2f24:	81 2f       	mov	r24, r17
    2f26:	df 91       	pop	r29
    2f28:	cf 91       	pop	r28
    2f2a:	1f 91       	pop	r17
    2f2c:	0f 91       	pop	r16
    2f2e:	ff 90       	pop	r15
    2f30:	ef 90       	pop	r14
    2f32:	df 90       	pop	r13
    2f34:	cf 90       	pop	r12
    2f36:	bf 90       	pop	r11
    2f38:	af 90       	pop	r10
    2f3a:	9f 90       	pop	r9
    2f3c:	8f 90       	pop	r8
    2f3e:	08 95       	ret

Disassembly of section .text.SDWrite:

00002cb0 <SDWrite>:

bool SDGetBlockSize(uint32_t *pu32BlockSize)
{
	*pu32BlockSize = sg_u16BlockSize;
	return(true);
}
    2cb0:	8f 92       	push	r8
    2cb2:	9f 92       	push	r9
    2cb4:	af 92       	push	r10
    2cb6:	bf 92       	push	r11
    2cb8:	cf 92       	push	r12
    2cba:	df 92       	push	r13
    2cbc:	ef 92       	push	r14
    2cbe:	ff 92       	push	r15
    2cc0:	0f 93       	push	r16
    2cc2:	1f 93       	push	r17
    2cc4:	cf 93       	push	r28
    2cc6:	df 93       	push	r29
    2cc8:	4b 01       	movw	r8, r22
    2cca:	5c 01       	movw	r10, r24
    2ccc:	ea 01       	movw	r28, r20
    2cce:	68 01       	movw	r12, r16
    2cd0:	79 01       	movw	r14, r18
    2cd2:	0e 94 2f 28 	call	0x505e	; 0x505e <WatchdogReset>
    2cd6:	81 e0       	ldi	r24, 0x01	; 1
    2cd8:	0e 94 8b 27 	call	0x4f16	; 0x4f16 <SDSetCS>
    2cdc:	81 e0       	ldi	r24, 0x01	; 1
    2cde:	c8 16       	cp	r12, r24
    2ce0:	d1 04       	cpc	r13, r1
    2ce2:	e1 04       	cpc	r14, r1
    2ce4:	f1 04       	cpc	r15, r1
    2ce6:	89 f4       	brne	.+34     	; 0x2d0a <SDWrite+0x5a>
    2ce8:	b5 01       	movw	r22, r10
    2cea:	a4 01       	movw	r20, r8
    2cec:	88 e1       	ldi	r24, 0x18	; 24
    2cee:	0e 94 a2 1a 	call	0x3544	; 0x3544 <SDCommand>
    2cf2:	81 11       	cpse	r24, r1
    2cf4:	37 c0       	rjmp	.+110    	; 0x2d64 <SDWrite+0xb4>
    2cf6:	60 91 60 0b 	lds	r22, 0x0B60	; 0x800b60 <sg_u16BlockSize>
    2cfa:	70 91 61 0b 	lds	r23, 0x0B61	; 0x800b61 <sg_u16BlockSize+0x1>
    2cfe:	4e ef       	ldi	r20, 0xFE	; 254
    2d00:	ce 01       	movw	r24, r28
    2d02:	0e 94 30 19 	call	0x3260	; 0x3260 <SDTransmitDataBlock>
    2d06:	18 2f       	mov	r17, r24
    2d08:	30 c0       	rjmp	.+96     	; 0x2d6a <SDWrite+0xba>
    2d0a:	b5 01       	movw	r22, r10
    2d0c:	a4 01       	movw	r20, r8
    2d0e:	89 e1       	ldi	r24, 0x19	; 25
    2d10:	0e 94 a2 1a 	call	0x3544	; 0x3544 <SDCommand>
    2d14:	88 23       	and	r24, r24
    2d16:	19 f0       	breq	.+6      	; 0x2d1e <SDWrite+0x6e>
    2d18:	27 c0       	rjmp	.+78     	; 0x2d68 <SDWrite+0xb8>
    2d1a:	6c 01       	movw	r12, r24
    2d1c:	7d 01       	movw	r14, r26
    2d1e:	60 91 60 0b 	lds	r22, 0x0B60	; 0x800b60 <sg_u16BlockSize>
    2d22:	70 91 61 0b 	lds	r23, 0x0B61	; 0x800b61 <sg_u16BlockSize+0x1>
    2d26:	4c ef       	ldi	r20, 0xFC	; 252
    2d28:	ce 01       	movw	r24, r28
    2d2a:	0e 94 30 19 	call	0x3260	; 0x3260 <SDTransmitDataBlock>
    2d2e:	18 2f       	mov	r17, r24
    2d30:	0e 94 2f 28 	call	0x505e	; 0x505e <WatchdogReset>
    2d34:	80 91 60 0b 	lds	r24, 0x0B60	; 0x800b60 <sg_u16BlockSize>
    2d38:	90 91 61 0b 	lds	r25, 0x0B61	; 0x800b61 <sg_u16BlockSize+0x1>
    2d3c:	c8 0f       	add	r28, r24
    2d3e:	d9 1f       	adc	r29, r25
    2d40:	11 23       	and	r17, r17
    2d42:	49 f0       	breq	.+18     	; 0x2d56 <SDWrite+0xa6>
    2d44:	d7 01       	movw	r26, r14
    2d46:	c6 01       	movw	r24, r12
    2d48:	01 97       	sbiw	r24, 0x01	; 1
    2d4a:	a1 09       	sbc	r26, r1
    2d4c:	b1 09       	sbc	r27, r1
    2d4e:	cd 28       	or	r12, r13
    2d50:	ce 28       	or	r12, r14
    2d52:	cf 28       	or	r12, r15
    2d54:	11 f7       	brne	.-60     	; 0x2d1a <SDWrite+0x6a>
    2d56:	40 e0       	ldi	r20, 0x00	; 0
    2d58:	50 e0       	ldi	r21, 0x00	; 0
    2d5a:	ba 01       	movw	r22, r20
    2d5c:	8c e0       	ldi	r24, 0x0C	; 12
    2d5e:	0e 94 a2 1a 	call	0x3544	; 0x3544 <SDCommand>
    2d62:	03 c0       	rjmp	.+6      	; 0x2d6a <SDWrite+0xba>
    2d64:	10 e0       	ldi	r17, 0x00	; 0
    2d66:	01 c0       	rjmp	.+2      	; 0x2d6a <SDWrite+0xba>
    2d68:	10 e0       	ldi	r17, 0x00	; 0
    2d6a:	80 e0       	ldi	r24, 0x00	; 0
    2d6c:	0e 94 8b 27 	call	0x4f16	; 0x4f16 <SDSetCS>
    2d70:	81 2f       	mov	r24, r17
    2d72:	df 91       	pop	r29
    2d74:	cf 91       	pop	r28
    2d76:	1f 91       	pop	r17
    2d78:	0f 91       	pop	r16
    2d7a:	ff 90       	pop	r15
    2d7c:	ef 90       	pop	r14
    2d7e:	df 90       	pop	r13
    2d80:	cf 90       	pop	r12
    2d82:	bf 90       	pop	r11
    2d84:	af 90       	pop	r10
    2d86:	9f 90       	pop	r9
    2d88:	8f 90       	pop	r8
    2d8a:	08 95       	ret

Disassembly of section .text.SPITransaction:

00004194 <SPITransaction>:

// Do a SPI transaction - read or write (or write pattern)
void SPITransaction(ESPIBusState eSPIBusState,
					uint8_t *pu8Buffer,
					uint16_t u16ByteCount)
{
    4194:	fb 01       	movw	r30, r22
	// If we're transmitting, start the transaction
	if (ESTATE_RX_DATA == eSPIBusState)
    4196:	83 30       	cpi	r24, 0x03	; 3
    4198:	71 f4       	brne	.+28     	; 0x41b6 <SPITransaction+0x22>
    419a:	08 c0       	rjmp	.+16     	; 0x41ac <SPITransaction+0x18>
	{
		while (u16ByteCount--)
		{
			// Clock out 0xff so we can receive the data
			SPDR = 0xff;
    419c:	2f ef       	ldi	r18, 0xFF	; 255
    419e:	2e bd       	out	0x2e, r18	; 46

			// Wait for data to be available
			while (0 == (SPSR & (1 << SPIF)));
    41a0:	0d b4       	in	r0, 0x2d	; 45
    41a2:	07 fe       	sbrs	r0, 7
    41a4:	fd cf       	rjmp	.-6      	; 0x41a0 <SPITransaction+0xc>
			
			// Read the byte
			*pu8Buffer = SPDR;
    41a6:	2e b5       	in	r18, 0x2e	; 46
    41a8:	21 93       	st	Z+, r18
					uint16_t u16ByteCount)
{
	// If we're transmitting, start the transaction
	if (ESTATE_RX_DATA == eSPIBusState)
	{
		while (u16ByteCount--)
    41aa:	ac 01       	movw	r20, r24
    41ac:	ca 01       	movw	r24, r20
    41ae:	01 97       	sbiw	r24, 0x01	; 1
    41b0:	45 2b       	or	r20, r21
    41b2:	a1 f7       	brne	.-24     	; 0x419c <SPITransaction+0x8>
    41b4:	08 95       	ret
			*pu8Buffer = SPDR;
			++pu8Buffer;
		}
	}
	else
	if (ESTATE_TX_DATA == eSPIBusState)
    41b6:	81 30       	cpi	r24, 0x01	; 1
    41b8:	61 f4       	brne	.+24     	; 0x41d2 <SPITransaction+0x3e>
    41ba:	06 c0       	rjmp	.+12     	; 0x41c8 <SPITransaction+0x34>
	{
		// Clock out whatever our data is in our queue
		while (u16ByteCount--)
		{
			SPDR = *pu8Buffer;
    41bc:	21 91       	ld	r18, Z+
    41be:	2e bd       	out	0x2e, r18	; 46
			++pu8Buffer;
			
			// Wait for the transmit to complete
			while (0 == (SPSR & (1 << SPIF)));
    41c0:	0d b4       	in	r0, 0x2d	; 45
    41c2:	07 fe       	sbrs	r0, 7
    41c4:	fd cf       	rjmp	.-6      	; 0x41c0 <SPITransaction+0x2c>
	}
	else
	if (ESTATE_TX_DATA == eSPIBusState)
	{
		// Clock out whatever our data is in our queue
		while (u16ByteCount--)
    41c6:	ac 01       	movw	r20, r24
    41c8:	ca 01       	movw	r24, r20
    41ca:	01 97       	sbiw	r24, 0x01	; 1
    41cc:	45 2b       	or	r20, r21
    41ce:	b1 f7       	brne	.-20     	; 0x41bc <SPITransaction+0x28>
    41d0:	08 95       	ret
			// Wait for the transmit to complete
			while (0 == (SPSR & (1 << SPIF)));
		}
	}
	else
	if (ESTATE_TX_PATTERN == eSPIBusState)
    41d2:	82 30       	cpi	r24, 0x02	; 2
    41d4:	51 f4       	brne	.+20     	; 0x41ea <SPITransaction+0x56>
    41d6:	05 c0       	rjmp	.+10     	; 0x41e2 <SPITransaction+0x4e>
		// Clock out whatever our data is in our queue
		while (u16ByteCount--)
		{
			// This is OK - as the position where the pointer would normally
			// be is just the pattern (single byte)
			SPDR = (uint8_t) (pu8Buffer);
    41d8:	ee bd       	out	0x2e, r30	; 46
		
			// Wait for the transmit to complete
			while (0 == (SPSR & (1 << SPIF)));
    41da:	0d b4       	in	r0, 0x2d	; 45
    41dc:	07 fe       	sbrs	r0, 7
    41de:	fd cf       	rjmp	.-6      	; 0x41da <SPITransaction+0x46>
	}
	else
	if (ESTATE_TX_PATTERN == eSPIBusState)
	{
		// Clock out whatever our data is in our queue
		while (u16ByteCount--)
    41e0:	ac 01       	movw	r20, r24
    41e2:	ca 01       	movw	r24, r20
    41e4:	01 97       	sbiw	r24, 0x01	; 1
    41e6:	45 2b       	or	r20, r21
    41e8:	b9 f7       	brne	.-18     	; 0x41d8 <SPITransaction+0x44>
    41ea:	08 95       	ret

Disassembly of section .text.SPISetBaudRate:

0000300c <SPISetBaudRate>:
	{FCLKIO >> 7,	(1 << SPR1) | (0 << SPR0),	0},					// /128
};

// Sets the SPI baud rate and returns the actual baud rate selected
uint32_t SPISetBaudRate(uint32_t u32BaudRate)
{
    300c:	cf 92       	push	r12
    300e:	df 92       	push	r13
    3010:	ef 92       	push	r14
    3012:	ff 92       	push	r15
    3014:	6b 01       	movw	r12, r22
    3016:	7c 01       	movw	r14, r24
	uint8_t u8Loop;
	
	// Find the baud rate that's the closest
	for (u8Loop = 0; u8Loop < (sizeof(sg_sSPIBaudRates) / sizeof(sg_sSPIBaudRates[0])); u8Loop++)
    3018:	20 e0       	ldi	r18, 0x00	; 0
    301a:	19 c0       	rjmp	.+50     	; 0x304e <SPISetBaudRate+0x42>
	{
		if (u32BaudRate >= sg_sSPIBaudRates[u8Loop].u32BaudRate)
    301c:	82 2f       	mov	r24, r18
    301e:	90 e0       	ldi	r25, 0x00	; 0
    3020:	ac 01       	movw	r20, r24
    3022:	44 0f       	add	r20, r20
    3024:	55 1f       	adc	r21, r21
    3026:	84 0f       	add	r24, r20
    3028:	95 1f       	adc	r25, r21
    302a:	88 0f       	add	r24, r24
    302c:	99 1f       	adc	r25, r25
    302e:	09 2e       	mov	r0, r25
    3030:	00 0c       	add	r0, r0
    3032:	aa 0b       	sbc	r26, r26
    3034:	85 55       	subi	r24, 0x55	; 85
    3036:	9d 4f       	sbci	r25, 0xFD	; 253
    3038:	af 4f       	sbci	r26, 0xFF	; 255
    303a:	fc 01       	movw	r30, r24
    303c:	5a 2f       	mov	r21, r26
    303e:	0e 94 47 27 	call	0x4e8e	; 0x4e8e <__xload_4>
    3042:	c6 16       	cp	r12, r22
    3044:	d7 06       	cpc	r13, r23
    3046:	e8 06       	cpc	r14, r24
    3048:	f9 06       	cpc	r15, r25
    304a:	18 f4       	brcc	.+6      	; 0x3052 <SPISetBaudRate+0x46>
uint32_t SPISetBaudRate(uint32_t u32BaudRate)
{
	uint8_t u8Loop;
	
	// Find the baud rate that's the closest
	for (u8Loop = 0; u8Loop < (sizeof(sg_sSPIBaudRates) / sizeof(sg_sSPIBaudRates[0])); u8Loop++)
    304c:	2f 5f       	subi	r18, 0xFF	; 255
    304e:	27 30       	cpi	r18, 0x07	; 7
    3050:	28 f3       	brcs	.-54     	; 0x301c <SPISetBaudRate+0x10>
			break;
		}
	}

	// If we've hit the end, use the slowest speed
	if ((sizeof(sg_sSPIBaudRates) / sizeof(sg_sSPIBaudRates[0])) == u8Loop)
    3052:	27 30       	cpi	r18, 0x07	; 7
    3054:	09 f4       	brne	.+2      	; 0x3058 <SPISetBaudRate+0x4c>
	{
		u8Loop--;
    3056:	21 50       	subi	r18, 0x01	; 1
	}

	// Found one!
	SPCR = (SPCR & (uint8_t) ~((1 << SPR1) | (1 << SPR0))) | sg_sSPIBaudRates[u8Loop].u8SPCR;
    3058:	6c b5       	in	r22, 0x2c	; 44
    305a:	30 e0       	ldi	r19, 0x00	; 0
    305c:	a9 01       	movw	r20, r18
    305e:	44 0f       	add	r20, r20
    3060:	55 1f       	adc	r21, r21
    3062:	ca 01       	movw	r24, r20
    3064:	82 0f       	add	r24, r18
    3066:	93 1f       	adc	r25, r19
    3068:	88 0f       	add	r24, r24
    306a:	99 1f       	adc	r25, r25
    306c:	04 96       	adiw	r24, 0x04	; 4
    306e:	09 2e       	mov	r0, r25
    3070:	00 0c       	add	r0, r0
    3072:	aa 0b       	sbc	r26, r26
    3074:	85 55       	subi	r24, 0x55	; 85
    3076:	9d 4f       	sbci	r25, 0xFD	; 253
    3078:	af 4f       	sbci	r26, 0xFF	; 255
    307a:	fc 01       	movw	r30, r24
    307c:	84 91       	lpm	r24, Z
    307e:	a7 fd       	sbrc	r26, 7
    3080:	80 81       	ld	r24, Z
    3082:	6c 7f       	andi	r22, 0xFC	; 252
    3084:	86 2b       	or	r24, r22
    3086:	8c bd       	out	0x2c, r24	; 44
	SPSR = (SPSR & (uint8_t) ~(1 << SPI2X)) | sg_sSPIBaudRates[u8Loop].u8SPSR;
    3088:	6d b5       	in	r22, 0x2d	; 45
    308a:	ca 01       	movw	r24, r20
    308c:	82 0f       	add	r24, r18
    308e:	93 1f       	adc	r25, r19
    3090:	88 0f       	add	r24, r24
    3092:	99 1f       	adc	r25, r25
    3094:	05 96       	adiw	r24, 0x05	; 5
    3096:	09 2e       	mov	r0, r25
    3098:	00 0c       	add	r0, r0
    309a:	aa 0b       	sbc	r26, r26
    309c:	85 55       	subi	r24, 0x55	; 85
    309e:	9d 4f       	sbci	r25, 0xFD	; 253
    30a0:	af 4f       	sbci	r26, 0xFF	; 255
    30a2:	fc 01       	movw	r30, r24
    30a4:	84 91       	lpm	r24, Z
    30a6:	a7 fd       	sbrc	r26, 7
    30a8:	80 81       	ld	r24, Z
    30aa:	6e 7f       	andi	r22, 0xFE	; 254
    30ac:	86 2b       	or	r24, r22
    30ae:	8d bd       	out	0x2d, r24	; 45
	return(sg_sSPIBaudRates[u8Loop].u32BaudRate);
    30b0:	24 0f       	add	r18, r20
    30b2:	35 1f       	adc	r19, r21
    30b4:	22 0f       	add	r18, r18
    30b6:	33 1f       	adc	r19, r19
    30b8:	03 2e       	mov	r0, r19
    30ba:	00 0c       	add	r0, r0
    30bc:	44 0b       	sbc	r20, r20
    30be:	25 55       	subi	r18, 0x55	; 85
    30c0:	3d 4f       	sbci	r19, 0xFD	; 253
    30c2:	4f 4f       	sbci	r20, 0xFF	; 255
    30c4:	f9 01       	movw	r30, r18
    30c6:	54 2f       	mov	r21, r20
    30c8:	0e 94 47 27 	call	0x4e8e	; 0x4e8e <__xload_4>
}
    30cc:	ff 90       	pop	r15
    30ce:	ef 90       	pop	r14
    30d0:	df 90       	pop	r13
    30d2:	cf 90       	pop	r12
    30d4:	08 95       	ret

Disassembly of section .text.SPIInit:

000049d6 <SPIInit>:

void SPIInit(void)
{
	// Set MOSI and SCK to output
	DDR_SPI |= (1 << MOSI) | (1 << SCK);
    49d6:	84 b1       	in	r24, 0x04	; 4
    49d8:	82 68       	ori	r24, 0x82	; 130
    49da:	84 b9       	out	0x04, r24	; 4
	DDR_SPI &= (uint8_t) ~(1 << MISO);
    49dc:	84 b1       	in	r24, 0x04	; 4
    49de:	8e 7f       	andi	r24, 0xFE	; 254
    49e0:	84 b9       	out	0x04, r24	; 4
	
	// MISO As input (need our pullup)
	PORT_SPI |= (1 << MISO);
    49e2:	85 b1       	in	r24, 0x05	; 5
    49e4:	81 60       	ori	r24, 0x01	; 1
    49e6:	85 b9       	out	0x05, r24	; 5
	
	// Enable SPI engine, master only, and clock to fosc/128 and SPI mode 0 (which is what SD wants)
	SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR1) | (1 << SPR0);
    49e8:	83 e5       	ldi	r24, 0x53	; 83
    49ea:	8c bd       	out	0x2c, r24	; 44
	
	// Zero out SPSR (all zeroes)
	SPSR = 0;
    49ec:	1d bc       	out	0x2d, r1	; 45
	
	// Zero out SPIPS so the SPI IP is connected to MISO, MOSI, SCK, and SS
	MCUCR &= (uint8_t) ~(1 << SPIPS);
    49ee:	85 b7       	in	r24, 0x35	; 53
    49f0:	8f 77       	andi	r24, 0x7F	; 127
    49f2:	85 bf       	out	0x35, r24	; 53

	// Set to something slow/compatible
	(void) SPISetBaudRate(400000);
    49f4:	60 e8       	ldi	r22, 0x80	; 128
    49f6:	7a e1       	ldi	r23, 0x1A	; 26
    49f8:	86 e0       	ldi	r24, 0x06	; 6
    49fa:	90 e0       	ldi	r25, 0x00	; 0
    49fc:	0e 94 06 18 	call	0x300c	; 0x300c <SPISetBaudRate>
    4a00:	08 95       	ret

Disassembly of section .text.readGlobalState:

00004604 <readGlobalState>:

static GlobalState gState;
static uint32_t currentSector;
static uint8_t __attribute__((aligned(4))) frameBuffer[FRAME_BUFFER_SIZE];  // Enlarged to handle full frame

static bool readGlobalState(void) {
    4604:	0f 93       	push	r16
    4606:	1f 93       	push	r17
    4608:	cf 93       	push	r28
	if (!SDRead(0, frameBuffer, 1)) {
    460a:	01 e0       	ldi	r16, 0x01	; 1
    460c:	10 e0       	ldi	r17, 0x00	; 0
    460e:	20 e0       	ldi	r18, 0x00	; 0
    4610:	30 e0       	ldi	r19, 0x00	; 0
    4612:	44 e2       	ldi	r20, 0x24	; 36
    4614:	55 e0       	ldi	r21, 0x05	; 5
    4616:	60 e0       	ldi	r22, 0x00	; 0
    4618:	70 e0       	ldi	r23, 0x00	; 0
    461a:	cb 01       	movw	r24, r22
    461c:	0e 94 34 17 	call	0x2e68	; 0x2e68 <SDRead>
    4620:	c8 2f       	mov	r28, r24
    4622:	88 23       	and	r24, r24
    4624:	49 f0       	breq	.+18     	; 0x4638 <readGlobalState+0x34>
		return false;
	}
	memcpy(&gState, frameBuffer, sizeof(GlobalState));
    4626:	44 e2       	ldi	r20, 0x24	; 36
    4628:	55 e0       	ldi	r21, 0x05	; 5
    462a:	60 e8       	ldi	r22, 0x80	; 128
    462c:	28 ed       	ldi	r18, 0xD8	; 216
    462e:	31 e0       	ldi	r19, 0x01	; 1
    4630:	84 e2       	ldi	r24, 0x24	; 36
    4632:	99 e0       	ldi	r25, 0x09	; 9
    4634:	0e 94 4c 24 	call	0x4898	; 0x4898 <memcpy>
	// TODO: Implement checksum verification
	return true;
}
    4638:	8c 2f       	mov	r24, r28
    463a:	cf 91       	pop	r28
    463c:	1f 91       	pop	r17
    463e:	0f 91       	pop	r16
    4640:	08 95       	ret

Disassembly of section .text.writeGlobalState:

00004866 <writeGlobalState>:

static bool writeGlobalState(void) {
    4866:	0f 93       	push	r16
    4868:	1f 93       	push	r17
	memcpy(frameBuffer, &gState, sizeof(GlobalState));
    486a:	44 e2       	ldi	r20, 0x24	; 36
    486c:	59 e0       	ldi	r21, 0x09	; 9
    486e:	60 e8       	ldi	r22, 0x80	; 128
    4870:	28 ed       	ldi	r18, 0xD8	; 216
    4872:	31 e0       	ldi	r19, 0x01	; 1
    4874:	84 e2       	ldi	r24, 0x24	; 36
    4876:	95 e0       	ldi	r25, 0x05	; 5
    4878:	0e 94 4c 24 	call	0x4898	; 0x4898 <memcpy>
	// TODO: Calculate and update checksum
	return SDWrite(0, frameBuffer, 1);
    487c:	01 e0       	ldi	r16, 0x01	; 1
    487e:	10 e0       	ldi	r17, 0x00	; 0
    4880:	20 e0       	ldi	r18, 0x00	; 0
    4882:	30 e0       	ldi	r19, 0x00	; 0
    4884:	44 e2       	ldi	r20, 0x24	; 36
    4886:	55 e0       	ldi	r21, 0x05	; 5
    4888:	60 e0       	ldi	r22, 0x00	; 0
    488a:	70 e0       	ldi	r23, 0x00	; 0
    488c:	cb 01       	movw	r24, r22
    488e:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <SDWrite>
}
    4892:	1f 91       	pop	r17
    4894:	0f 91       	pop	r16
    4896:	08 95       	ret

Disassembly of section .text.updateSessionMap:

00002d8c <updateSessionMap>:

static bool updateSessionMap(void) {
    2d8c:	8f 92       	push	r8
    2d8e:	9f 92       	push	r9
    2d90:	af 92       	push	r10
    2d92:	bf 92       	push	r11
    2d94:	cf 92       	push	r12
    2d96:	df 92       	push	r13
    2d98:	ef 92       	push	r14
    2d9a:	ff 92       	push	r15
    2d9c:	0f 93       	push	r16
    2d9e:	1f 93       	push	r17
	uint32_t mapSector = gState.activeSessionMapSector;
    2da0:	e4 e2       	ldi	r30, 0x24	; 36
    2da2:	f9 e0       	ldi	r31, 0x09	; 9
    2da4:	c4 8c       	ldd	r12, Z+28	; 0x1c
    2da6:	d5 8c       	ldd	r13, Z+29	; 0x1d
    2da8:	e6 8c       	ldd	r14, Z+30	; 0x1e
    2daa:	f7 8c       	ldd	r15, Z+31	; 0x1f
	uint32_t mapOffset = gState.activeSessionMapOffset;
    2dac:	80 a0       	ldd	r8, Z+32	; 0x20
    2dae:	91 a0       	ldd	r9, Z+33	; 0x21
    2db0:	a2 a0       	ldd	r10, Z+34	; 0x22
    2db2:	b3 a0       	ldd	r11, Z+35	; 0x23

	if (!SDRead(mapSector, frameBuffer, 1)) {
    2db4:	01 e0       	ldi	r16, 0x01	; 1
    2db6:	10 e0       	ldi	r17, 0x00	; 0
    2db8:	20 e0       	ldi	r18, 0x00	; 0
    2dba:	30 e0       	ldi	r19, 0x00	; 0
    2dbc:	44 e2       	ldi	r20, 0x24	; 36
    2dbe:	55 e0       	ldi	r21, 0x05	; 5
    2dc0:	c7 01       	movw	r24, r14
    2dc2:	b6 01       	movw	r22, r12
    2dc4:	0e 94 34 17 	call	0x2e68	; 0x2e68 <SDRead>
    2dc8:	88 23       	and	r24, r24
    2dca:	09 f4       	brne	.+2      	; 0x2dce <updateSessionMap+0x42>
    2dcc:	42 c0       	rjmp	.+132    	; 0x2e52 <updateSessionMap+0xc6>
		return false;
	}

	// Update session map
	*(uint64_t*)(frameBuffer + mapOffset) = gState.newSessionSector;
    2dce:	f4 01       	movw	r30, r8
    2dd0:	ec 5d       	subi	r30, 0xDC	; 220
    2dd2:	fa 4f       	sbci	r31, 0xFA	; 250
    2dd4:	00 91 3c 09 	lds	r16, 0x093C	; 0x80093c <gState+0x18>
    2dd8:	10 91 3d 09 	lds	r17, 0x093D	; 0x80093d <gState+0x19>
    2ddc:	20 91 3e 09 	lds	r18, 0x093E	; 0x80093e <gState+0x1a>
    2de0:	30 91 3f 09 	lds	r19, 0x093F	; 0x80093f <gState+0x1b>
    2de4:	00 83       	st	Z, r16
    2de6:	11 83       	std	Z+1, r17	; 0x01
    2de8:	22 83       	std	Z+2, r18	; 0x02
    2dea:	33 83       	std	Z+3, r19	; 0x03
    2dec:	14 82       	std	Z+4, r1	; 0x04
    2dee:	15 82       	std	Z+5, r1	; 0x05
    2df0:	16 82       	std	Z+6, r1	; 0x06
    2df2:	17 82       	std	Z+7, r1	; 0x07

	if (!SDWrite(mapSector, frameBuffer, 1)) {
    2df4:	01 e0       	ldi	r16, 0x01	; 1
    2df6:	10 e0       	ldi	r17, 0x00	; 0
    2df8:	20 e0       	ldi	r18, 0x00	; 0
    2dfa:	30 e0       	ldi	r19, 0x00	; 0
    2dfc:	44 e2       	ldi	r20, 0x24	; 36
    2dfe:	55 e0       	ldi	r21, 0x05	; 5
    2e00:	c7 01       	movw	r24, r14
    2e02:	b6 01       	movw	r22, r12
    2e04:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <SDWrite>
    2e08:	88 23       	and	r24, r24
    2e0a:	19 f1       	breq	.+70     	; 0x2e52 <updateSessionMap+0xc6>
		return false;
	}

	// Update map pointers
	gState.activeSessionMapOffset += sizeof(uint64_t);
    2e0c:	e4 e2       	ldi	r30, 0x24	; 36
    2e0e:	f9 e0       	ldi	r31, 0x09	; 9
    2e10:	80 a1       	ldd	r24, Z+32	; 0x20
    2e12:	91 a1       	ldd	r25, Z+33	; 0x21
    2e14:	a2 a1       	ldd	r26, Z+34	; 0x22
    2e16:	b3 a1       	ldd	r27, Z+35	; 0x23
    2e18:	08 96       	adiw	r24, 0x08	; 8
    2e1a:	a1 1d       	adc	r26, r1
    2e1c:	b1 1d       	adc	r27, r1
    2e1e:	80 a3       	std	Z+32, r24	; 0x20
    2e20:	91 a3       	std	Z+33, r25	; 0x21
    2e22:	a2 a3       	std	Z+34, r26	; 0x22
    2e24:	b3 a3       	std	Z+35, r27	; 0x23
	if (gState.activeSessionMapOffset >= SECTOR_SIZE) {
    2e26:	81 15       	cp	r24, r1
    2e28:	92 40       	sbci	r25, 0x02	; 2
    2e2a:	a1 05       	cpc	r26, r1
    2e2c:	b1 05       	cpc	r27, r1
    2e2e:	78 f0       	brcs	.+30     	; 0x2e4e <updateSessionMap+0xc2>
		gState.activeSessionMapSector++;
    2e30:	84 8d       	ldd	r24, Z+28	; 0x1c
    2e32:	95 8d       	ldd	r25, Z+29	; 0x1d
    2e34:	a6 8d       	ldd	r26, Z+30	; 0x1e
    2e36:	b7 8d       	ldd	r27, Z+31	; 0x1f
    2e38:	01 96       	adiw	r24, 0x01	; 1
    2e3a:	a1 1d       	adc	r26, r1
    2e3c:	b1 1d       	adc	r27, r1
    2e3e:	84 8f       	std	Z+28, r24	; 0x1c
    2e40:	95 8f       	std	Z+29, r25	; 0x1d
    2e42:	a6 8f       	std	Z+30, r26	; 0x1e
    2e44:	b7 8f       	std	Z+31, r27	; 0x1f
		gState.activeSessionMapOffset = 0;
    2e46:	10 a2       	std	Z+32, r1	; 0x20
    2e48:	11 a2       	std	Z+33, r1	; 0x21
    2e4a:	12 a2       	std	Z+34, r1	; 0x22
    2e4c:	13 a2       	std	Z+35, r1	; 0x23
	}

	return writeGlobalState();
    2e4e:	0e 94 33 24 	call	0x4866	; 0x4866 <writeGlobalState>
}
    2e52:	1f 91       	pop	r17
    2e54:	0f 91       	pop	r16
    2e56:	ff 90       	pop	r15
    2e58:	ef 90       	pop	r14
    2e5a:	df 90       	pop	r13
    2e5c:	cf 90       	pop	r12
    2e5e:	bf 90       	pop	r11
    2e60:	af 90       	pop	r10
    2e62:	9f 90       	pop	r9
    2e64:	8f 90       	pop	r8
    2e66:	08 95       	ret

Disassembly of section .text.STORE_Init:

00003b08 <STORE_Init>:

bool STORE_Init(void) {
    3b08:	cf 93       	push	r28
	if (!SDInit()) {
    3b0a:	0e 94 ce 10 	call	0x219c	; 0x219c <SDInit>
    3b0e:	c8 2f       	mov	r28, r24
    3b10:	88 23       	and	r24, r24
    3b12:	c1 f1       	breq	.+112    	; 0x3b84 <STORE_Init+0x7c>
		return false;
	}

	if (!readGlobalState()) {
    3b14:	0e 94 02 23 	call	0x4604	; 0x4604 <readGlobalState>
    3b18:	81 11       	cpse	r24, r1
    3b1a:	22 c0       	rjmp	.+68     	; 0x3b60 <STORE_Init+0x58>
		// Initialize global state if it doesn't exist
		memset(&gState, 0, sizeof(GlobalState));
    3b1c:	e4 e2       	ldi	r30, 0x24	; 36
    3b1e:	f9 e0       	ldi	r31, 0x09	; 9
    3b20:	88 ed       	ldi	r24, 0xD8	; 216
    3b22:	91 e0       	ldi	r25, 0x01	; 1
    3b24:	df 01       	movw	r26, r30
    3b26:	9c 01       	movw	r18, r24
    3b28:	1d 92       	st	X+, r1
    3b2a:	21 50       	subi	r18, 0x01	; 1
    3b2c:	30 40       	sbci	r19, 0x00	; 0
    3b2e:	e1 f7       	brne	.-8      	; 0x3b28 <STORE_Init+0x20>
		gState.firstSessionSector = 1;
    3b30:	81 e0       	ldi	r24, 0x01	; 1
    3b32:	90 e0       	ldi	r25, 0x00	; 0
    3b34:	a0 e0       	ldi	r26, 0x00	; 0
    3b36:	b0 e0       	ldi	r27, 0x00	; 0
    3b38:	84 87       	std	Z+12, r24	; 0x0c
    3b3a:	95 87       	std	Z+13, r25	; 0x0d
    3b3c:	a6 87       	std	Z+14, r26	; 0x0e
    3b3e:	b7 87       	std	Z+15, r27	; 0x0f
		gState.newSessionSector = 1;
    3b40:	80 8f       	std	Z+24, r24	; 0x18
    3b42:	91 8f       	std	Z+25, r25	; 0x19
    3b44:	a2 8f       	std	Z+26, r26	; 0x1a
    3b46:	b3 8f       	std	Z+27, r27	; 0x1b
		gState.activeSessionMapSector = 4;
    3b48:	84 e0       	ldi	r24, 0x04	; 4
    3b4a:	90 e0       	ldi	r25, 0x00	; 0
    3b4c:	a0 e0       	ldi	r26, 0x00	; 0
    3b4e:	b0 e0       	ldi	r27, 0x00	; 0
    3b50:	84 8f       	std	Z+28, r24	; 0x1c
    3b52:	95 8f       	std	Z+29, r25	; 0x1d
    3b54:	a6 8f       	std	Z+30, r26	; 0x1e
    3b56:	b7 8f       	std	Z+31, r27	; 0x1f
		gState.activeSessionMapOffset = 0;
		// TODO: Initialize other fields as needed
		if (!writeGlobalState()) {
    3b58:	0e 94 33 24 	call	0x4866	; 0x4866 <writeGlobalState>
    3b5c:	88 23       	and	r24, r24
    3b5e:	89 f0       	breq	.+34     	; 0x3b82 <STORE_Init+0x7a>
			return false;
		}
	}

	currentSector = gState.newSessionSector;
    3b60:	80 91 3c 09 	lds	r24, 0x093C	; 0x80093c <gState+0x18>
    3b64:	90 91 3d 09 	lds	r25, 0x093D	; 0x80093d <gState+0x19>
    3b68:	a0 91 3e 09 	lds	r26, 0x093E	; 0x80093e <gState+0x1a>
    3b6c:	b0 91 3f 09 	lds	r27, 0x093F	; 0x80093f <gState+0x1b>
    3b70:	80 93 50 0b 	sts	0x0B50, r24	; 0x800b50 <currentSector>
    3b74:	90 93 51 0b 	sts	0x0B51, r25	; 0x800b51 <currentSector+0x1>
    3b78:	a0 93 52 0b 	sts	0x0B52, r26	; 0x800b52 <currentSector+0x2>
    3b7c:	b0 93 53 0b 	sts	0x0B53, r27	; 0x800b53 <currentSector+0x3>
	return true;
    3b80:	01 c0       	rjmp	.+2      	; 0x3b84 <STORE_Init+0x7c>
		gState.newSessionSector = 1;
		gState.activeSessionMapSector = 4;
		gState.activeSessionMapOffset = 0;
		// TODO: Initialize other fields as needed
		if (!writeGlobalState()) {
			return false;
    3b82:	c8 2f       	mov	r28, r24
		}
	}

	currentSector = gState.newSessionSector;
	return true;
}
    3b84:	8c 2f       	mov	r24, r28
    3b86:	cf 91       	pop	r28
    3b88:	08 95       	ret

Disassembly of section .text.STORE_WriteFrame:

000029e2 <STORE_WriteFrame>:

bool STORE_WriteFrame(volatile FrameData* frame) {
    29e2:	8f 92       	push	r8
    29e4:	9f 92       	push	r9
    29e6:	af 92       	push	r10
    29e8:	bf 92       	push	r11
    29ea:	cf 92       	push	r12
    29ec:	df 92       	push	r13
    29ee:	ef 92       	push	r14
    29f0:	ff 92       	push	r15
    29f2:	0f 93       	push	r16
    29f4:	1f 93       	push	r17
    29f6:	cf 93       	push	r28
    29f8:	df 93       	push	r29
	uint32_t bytesWritten = 0;
	uint32_t currentOffset = 0;
	uint32_t sectorsToWrite;
	
	// Verify frame size
	if(frame->m.frameBytes > FRAME_BUFFER_SIZE) {
    29fa:	fc 01       	movw	r30, r24
    29fc:	24 81       	ldd	r18, Z+4	; 0x04
    29fe:	35 81       	ldd	r19, Z+5	; 0x05
    2a00:	21 30       	cpi	r18, 0x01	; 1
    2a02:	34 40       	sbci	r19, 0x04	; 4
    2a04:	08 f0       	brcs	.+2      	; 0x2a08 <STORE_WriteFrame+0x26>
    2a06:	5b c0       	rjmp	.+182    	; 0x2abe <STORE_WriteFrame+0xdc>
    2a08:	ec 01       	movw	r28, r24
		return false;
	}

	// Copy frame data to our buffer
	memcpy(frameBuffer, (const void*)frame, frame->m.frameBytes);
    2a0a:	2c 81       	ldd	r18, Y+4	; 0x04
    2a0c:	3d 81       	ldd	r19, Y+5	; 0x05
    2a0e:	ac 01       	movw	r20, r24
    2a10:	60 e8       	ldi	r22, 0x80	; 128
    2a12:	84 e2       	ldi	r24, 0x24	; 36
    2a14:	95 e0       	ldi	r25, 0x05	; 5
    2a16:	0e 94 4c 24 	call	0x4898	; 0x4898 <memcpy>

	// Zero out any remaining buffer space in last sector
	if(frame->m.frameBytes < FRAME_BUFFER_SIZE) {
    2a1a:	8c 81       	ldd	r24, Y+4	; 0x04
    2a1c:	9d 81       	ldd	r25, Y+5	; 0x05
    2a1e:	81 15       	cp	r24, r1
    2a20:	94 40       	sbci	r25, 0x04	; 4
    2a22:	70 f4       	brcc	.+28     	; 0x2a40 <STORE_WriteFrame+0x5e>
		memset(frameBuffer + frame->m.frameBytes, 0, FRAME_BUFFER_SIZE - frame->m.frameBytes);
    2a24:	2c 81       	ldd	r18, Y+4	; 0x04
    2a26:	3d 81       	ldd	r19, Y+5	; 0x05
    2a28:	8c 81       	ldd	r24, Y+4	; 0x04
    2a2a:	9d 81       	ldd	r25, Y+5	; 0x05
    2a2c:	40 e0       	ldi	r20, 0x00	; 0
    2a2e:	54 e0       	ldi	r21, 0x04	; 4
    2a30:	42 1b       	sub	r20, r18
    2a32:	53 0b       	sbc	r21, r19
    2a34:	60 e0       	ldi	r22, 0x00	; 0
    2a36:	70 e0       	ldi	r23, 0x00	; 0
    2a38:	8c 5d       	subi	r24, 0xDC	; 220
    2a3a:	9a 4f       	sbci	r25, 0xFA	; 250
    2a3c:	0e 94 a8 27 	call	0x4f50	; 0x4f50 <memset>

	currentSector = gState.newSessionSector;
	return true;
}

bool STORE_WriteFrame(volatile FrameData* frame) {
    2a40:	c1 2c       	mov	r12, r1
    2a42:	d1 2c       	mov	r13, r1
    2a44:	76 01       	movw	r14, r12
    2a46:	68 94       	set
    2a48:	c1 f8       	bld	r12, 1
    2a4a:	81 2c       	mov	r8, r1
    2a4c:	91 2c       	mov	r9, r1
    2a4e:	54 01       	movw	r10, r8
    2a50:	2f c0       	rjmp	.+94     	; 0x2ab0 <STORE_WriteFrame+0xce>
	// Calculate how many complete sectors we need to write
	sectorsToWrite = SECTORS_PER_FRAME;
	
	// Write all sectors
	while(sectorsToWrite > 0) {
		if(!SDWrite(currentSector, frameBuffer + currentOffset, 1)) {
    2a52:	60 91 50 0b 	lds	r22, 0x0B50	; 0x800b50 <currentSector>
    2a56:	70 91 51 0b 	lds	r23, 0x0B51	; 0x800b51 <currentSector+0x1>
    2a5a:	80 91 52 0b 	lds	r24, 0x0B52	; 0x800b52 <currentSector+0x2>
    2a5e:	90 91 53 0b 	lds	r25, 0x0B53	; 0x800b53 <currentSector+0x3>
    2a62:	01 e0       	ldi	r16, 0x01	; 1
    2a64:	10 e0       	ldi	r17, 0x00	; 0
    2a66:	20 e0       	ldi	r18, 0x00	; 0
    2a68:	30 e0       	ldi	r19, 0x00	; 0
    2a6a:	a4 01       	movw	r20, r8
    2a6c:	4c 5d       	subi	r20, 0xDC	; 220
    2a6e:	5a 4f       	sbci	r21, 0xFA	; 250
    2a70:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <SDWrite>
    2a74:	88 23       	and	r24, r24
    2a76:	21 f1       	breq	.+72     	; 0x2ac0 <STORE_WriteFrame+0xde>
			return false;
		}
		currentSector++;
    2a78:	80 91 50 0b 	lds	r24, 0x0B50	; 0x800b50 <currentSector>
    2a7c:	90 91 51 0b 	lds	r25, 0x0B51	; 0x800b51 <currentSector+0x1>
    2a80:	a0 91 52 0b 	lds	r26, 0x0B52	; 0x800b52 <currentSector+0x2>
    2a84:	b0 91 53 0b 	lds	r27, 0x0B53	; 0x800b53 <currentSector+0x3>
    2a88:	01 96       	adiw	r24, 0x01	; 1
    2a8a:	a1 1d       	adc	r26, r1
    2a8c:	b1 1d       	adc	r27, r1
    2a8e:	80 93 50 0b 	sts	0x0B50, r24	; 0x800b50 <currentSector>
    2a92:	90 93 51 0b 	sts	0x0B51, r25	; 0x800b51 <currentSector+0x1>
    2a96:	a0 93 52 0b 	sts	0x0B52, r26	; 0x800b52 <currentSector+0x2>
    2a9a:	b0 93 53 0b 	sts	0x0B53, r27	; 0x800b53 <currentSector+0x3>
		currentOffset += SECTOR_SIZE;
    2a9e:	42 e0       	ldi	r20, 0x02	; 2
    2aa0:	94 0e       	add	r9, r20
    2aa2:	a1 1c       	adc	r10, r1
    2aa4:	b1 1c       	adc	r11, r1
		sectorsToWrite--;
    2aa6:	81 e0       	ldi	r24, 0x01	; 1
    2aa8:	c8 1a       	sub	r12, r24
    2aaa:	d1 08       	sbc	r13, r1
    2aac:	e1 08       	sbc	r14, r1
    2aae:	f1 08       	sbc	r15, r1
	
	// Calculate how many complete sectors we need to write
	sectorsToWrite = SECTORS_PER_FRAME;
	
	// Write all sectors
	while(sectorsToWrite > 0) {
    2ab0:	c1 14       	cp	r12, r1
    2ab2:	d1 04       	cpc	r13, r1
    2ab4:	e1 04       	cpc	r14, r1
    2ab6:	f1 04       	cpc	r15, r1
    2ab8:	61 f6       	brne	.-104    	; 0x2a52 <STORE_WriteFrame+0x70>
		currentSector++;
		currentOffset += SECTOR_SIZE;
		sectorsToWrite--;
	}
	
	return true;
    2aba:	81 e0       	ldi	r24, 0x01	; 1
    2abc:	01 c0       	rjmp	.+2      	; 0x2ac0 <STORE_WriteFrame+0xde>
	uint32_t currentOffset = 0;
	uint32_t sectorsToWrite;
	
	// Verify frame size
	if(frame->m.frameBytes > FRAME_BUFFER_SIZE) {
		return false;
    2abe:	80 e0       	ldi	r24, 0x00	; 0
		currentOffset += SECTOR_SIZE;
		sectorsToWrite--;
	}
	
	return true;
}
    2ac0:	df 91       	pop	r29
    2ac2:	cf 91       	pop	r28
    2ac4:	1f 91       	pop	r17
    2ac6:	0f 91       	pop	r16
    2ac8:	ff 90       	pop	r15
    2aca:	ef 90       	pop	r14
    2acc:	df 90       	pop	r13
    2ace:	cf 90       	pop	r12
    2ad0:	bf 90       	pop	r11
    2ad2:	af 90       	pop	r10
    2ad4:	9f 90       	pop	r9
    2ad6:	8f 90       	pop	r8
    2ad8:	08 95       	ret

Disassembly of section .text.STORE_StartNewSession:

0000439a <STORE_StartNewSession>:

bool STORE_StartNewSession(void) {
	// Update session info
	gState.sessionCount++;
    439a:	e4 e2       	ldi	r30, 0x24	; 36
    439c:	f9 e0       	ldi	r31, 0x09	; 9
    439e:	84 89       	ldd	r24, Z+20	; 0x14
    43a0:	95 89       	ldd	r25, Z+21	; 0x15
    43a2:	a6 89       	ldd	r26, Z+22	; 0x16
    43a4:	b7 89       	ldd	r27, Z+23	; 0x17
    43a6:	01 96       	adiw	r24, 0x01	; 1
    43a8:	a1 1d       	adc	r26, r1
    43aa:	b1 1d       	adc	r27, r1
    43ac:	84 8b       	std	Z+20, r24	; 0x14
    43ae:	95 8b       	std	Z+21, r25	; 0x15
    43b0:	a6 8b       	std	Z+22, r26	; 0x16
    43b2:	b7 8b       	std	Z+23, r27	; 0x17
	gState.newSessionSector = currentSector;
    43b4:	80 91 50 0b 	lds	r24, 0x0B50	; 0x800b50 <currentSector>
    43b8:	90 91 51 0b 	lds	r25, 0x0B51	; 0x800b51 <currentSector+0x1>
    43bc:	a0 91 52 0b 	lds	r26, 0x0B52	; 0x800b52 <currentSector+0x2>
    43c0:	b0 91 53 0b 	lds	r27, 0x0B53	; 0x800b53 <currentSector+0x3>
    43c4:	80 8f       	std	Z+24, r24	; 0x18
    43c6:	91 8f       	std	Z+25, r25	; 0x19
    43c8:	a2 8f       	std	Z+26, r26	; 0x1a
    43ca:	b3 8f       	std	Z+27, r27	; 0x1b
	
	// Ensure sector alignment for new sessions
	if(currentSector % SECTORS_PER_FRAME != 0) {
    43cc:	80 ff       	sbrs	r24, 0
    43ce:	0c c0       	rjmp	.+24     	; 0x43e8 <STORE_StartNewSession+0x4e>
		currentSector += SECTORS_PER_FRAME - (currentSector % SECTORS_PER_FRAME);
    43d0:	8e 7f       	andi	r24, 0xFE	; 254
    43d2:	02 96       	adiw	r24, 0x02	; 2
    43d4:	a1 1d       	adc	r26, r1
    43d6:	b1 1d       	adc	r27, r1
    43d8:	80 93 50 0b 	sts	0x0B50, r24	; 0x800b50 <currentSector>
    43dc:	90 93 51 0b 	sts	0x0B51, r25	; 0x800b51 <currentSector+0x1>
    43e0:	a0 93 52 0b 	sts	0x0B52, r26	; 0x800b52 <currentSector+0x2>
    43e4:	b0 93 53 0b 	sts	0x0B53, r27	; 0x800b53 <currentSector+0x3>
	}
	
	return updateSessionMap();
    43e8:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <updateSessionMap>
}
    43ec:	08 95       	ret

Disassembly of section .text.STORE_EndSession:

000041ec <STORE_EndSession>:

bool STORE_EndSession(void) {
	// Ensure we end on a frame boundary
	if(currentSector % SECTORS_PER_FRAME != 0) {
    41ec:	80 91 50 0b 	lds	r24, 0x0B50	; 0x800b50 <currentSector>
    41f0:	90 91 51 0b 	lds	r25, 0x0B51	; 0x800b51 <currentSector+0x1>
    41f4:	a0 91 52 0b 	lds	r26, 0x0B52	; 0x800b52 <currentSector+0x2>
    41f8:	b0 91 53 0b 	lds	r27, 0x0B53	; 0x800b53 <currentSector+0x3>
    41fc:	80 ff       	sbrs	r24, 0
    41fe:	0c c0       	rjmp	.+24     	; 0x4218 <STORE_EndSession+0x2c>
		currentSector += SECTORS_PER_FRAME - (currentSector % SECTORS_PER_FRAME);
    4200:	8e 7f       	andi	r24, 0xFE	; 254
    4202:	02 96       	adiw	r24, 0x02	; 2
    4204:	a1 1d       	adc	r26, r1
    4206:	b1 1d       	adc	r27, r1
    4208:	80 93 50 0b 	sts	0x0B50, r24	; 0x800b50 <currentSector>
    420c:	90 93 51 0b 	sts	0x0B51, r25	; 0x800b51 <currentSector+0x1>
    4210:	a0 93 52 0b 	sts	0x0B52, r26	; 0x800b52 <currentSector+0x2>
    4214:	b0 93 53 0b 	sts	0x0B53, r27	; 0x800b53 <currentSector+0x3>
	}
	
	gState.lastSessionSector = currentSector - 1;
    4218:	80 91 50 0b 	lds	r24, 0x0B50	; 0x800b50 <currentSector>
    421c:	90 91 51 0b 	lds	r25, 0x0B51	; 0x800b51 <currentSector+0x1>
    4220:	a0 91 52 0b 	lds	r26, 0x0B52	; 0x800b52 <currentSector+0x2>
    4224:	b0 91 53 0b 	lds	r27, 0x0B53	; 0x800b53 <currentSector+0x3>
    4228:	01 97       	sbiw	r24, 0x01	; 1
    422a:	a1 09       	sbc	r26, r1
    422c:	b1 09       	sbc	r27, r1
    422e:	80 93 34 09 	sts	0x0934, r24	; 0x800934 <gState+0x10>
    4232:	90 93 35 09 	sts	0x0935, r25	; 0x800935 <gState+0x11>
    4236:	a0 93 36 09 	sts	0x0936, r26	; 0x800936 <gState+0x12>
    423a:	b0 93 37 09 	sts	0x0937, r27	; 0x800937 <gState+0x13>
	return writeGlobalState();
    423e:	0e 94 33 24 	call	0x4866	; 0x4866 <writeGlobalState>
}
    4242:	08 95       	ret

Disassembly of section .text.vUARTtxDataAvailable:

00004d9e <vUARTtxDataAvailable>:
#endif

bool vUARTIsBusy(void) {
	return ((sg_etxState != ESTATE_IDLE) ||
		(sg_eCell_mc_rxState != ESTATE_IDLE));
}
    4d9e:	80 91 80 0b 	lds	r24, 0x0B80	; 0x800b80 <sg_u8SendIndex>
    4da2:	81 11       	cpse	r24, r1
    4da4:	06 c0       	rjmp	.+12     	; 0x4db2 <vUARTtxDataAvailable+0x14>
    4da6:	0e 94 2a 25 	call	0x4a54	; 0x4a54 <PlatformGetSendData>
    4daa:	90 93 63 0b 	sts	0x0B63, r25	; 0x800b63 <sg_u8SendData+0x1>
    4dae:	80 93 62 0b 	sts	0x0B62, r24	; 0x800b62 <sg_u8SendData>
    4db2:	80 91 80 0b 	lds	r24, 0x0B80	; 0x800b80 <sg_u8SendIndex>
    4db6:	81 11       	cpse	r24, r1
    4db8:	02 c0       	rjmp	.+4      	; 0x4dbe <vUARTtxDataAvailable+0x20>
    4dba:	81 e0       	ldi	r24, 0x01	; 1
    4dbc:	08 95       	ret
    4dbe:	80 e0       	ldi	r24, 0x00	; 0
    4dc0:	08 95       	ret

Disassembly of section .text.vUARTtxDataGet:

00004530 <vUARTtxDataGet>:
    4530:	80 91 80 0b 	lds	r24, 0x0B80	; 0x800b80 <sg_u8SendIndex>
    4534:	81 11       	cpse	r24, r1
    4536:	10 c0       	rjmp	.+32     	; 0x4558 <vUARTtxDataGet+0x28>
    4538:	81 e0       	ldi	r24, 0x01	; 1
    453a:	0e 94 2a 25 	call	0x4a54	; 0x4a54 <PlatformGetSendData>
    453e:	e2 e6       	ldi	r30, 0x62	; 98
    4540:	fb e0       	ldi	r31, 0x0B	; 11
    4542:	90 83       	st	Z, r25
    4544:	81 83       	std	Z+1, r24	; 0x01
    4546:	80 81       	ld	r24, Z
    4548:	88 23       	and	r24, r24
    454a:	24 f4       	brge	.+8      	; 0x4554 <vUARTtxDataGet+0x24>
    454c:	81 e0       	ldi	r24, 0x01	; 1
    454e:	80 93 82 0b 	sts	0x0B82, r24	; 0x800b82 <sg_bCellReportsReuested>
    4552:	02 c0       	rjmp	.+4      	; 0x4558 <vUARTtxDataGet+0x28>
    4554:	10 92 82 0b 	sts	0x0B82, r1	; 0x800b82 <sg_bCellReportsReuested>
    4558:	e0 91 80 0b 	lds	r30, 0x0B80	; 0x800b80 <sg_u8SendIndex>
    455c:	f0 e0       	ldi	r31, 0x00	; 0
    455e:	ee 59       	subi	r30, 0x9E	; 158
    4560:	f4 4f       	sbci	r31, 0xF4	; 244
    4562:	80 81       	ld	r24, Z
    4564:	90 91 80 0b 	lds	r25, 0x0B80	; 0x800b80 <sg_u8SendIndex>
    4568:	9f 5f       	subi	r25, 0xFF	; 255
    456a:	90 93 80 0b 	sts	0x0B80, r25	; 0x800b80 <sg_u8SendIndex>
    456e:	90 91 80 0b 	lds	r25, 0x0B80	; 0x800b80 <sg_u8SendIndex>
    4572:	92 30       	cpi	r25, 0x02	; 2
    4574:	10 f0       	brcs	.+4      	; 0x457a <vUARTtxDataGet+0x4a>
    4576:	10 92 80 0b 	sts	0x0B80, r1	; 0x800b80 <sg_u8SendIndex>
    457a:	08 95       	ret

Disassembly of section .text.vUARTRXReset:

0000503c <vUARTRXReset>:

// Called when we have a string timeout or need to reset the state machine
// for the MC RX side of things
void vUARTRXReset(void)
{
	sg_eCell_mc_rxState = ESTATE_IDLE;
    503c:	10 92 89 0b 	sts	0x0B89, r1	; 0x800b89 <sg_eCell_mc_rxState>
	vUARTRXStart();
    5040:	0e 94 6a 27 	call	0x4ed4	; 0x4ed4 <vUARTRXStart>
    5044:	08 95       	ret

Disassembly of section .text.vUARTStarttx:

0000429a <vUARTStarttx>:
#endif

bool vUARTIsBusy(void) {
	return ((sg_etxState != ESTATE_IDLE) ||
		(sg_eCell_mc_rxState != ESTATE_IDLE));
}
    429a:	80 91 83 0b 	lds	r24, 0x0B83	; 0x800b83 <sg_etxState>
    429e:	81 11       	cpse	r24, r1
    42a0:	23 c0       	rjmp	.+70     	; 0x42e8 <vUARTStarttx+0x4e>
    42a2:	80 91 89 0b 	lds	r24, 0x0B89	; 0x800b89 <sg_eCell_mc_rxState>
    42a6:	81 11       	cpse	r24, r1
    42a8:	21 c0       	rjmp	.+66     	; 0x42ec <vUARTStarttx+0x52>
    42aa:	82 e0       	ldi	r24, 0x02	; 2
    42ac:	80 93 83 0b 	sts	0x0B83, r24	; 0x800b83 <sg_etxState>
    42b0:	10 92 80 0b 	sts	0x0B80, r1	; 0x800b80 <sg_u8SendIndex>
    42b4:	10 92 86 0b 	sts	0x0B86, r1	; 0x800b86 <sg_u8txBitCount>
    42b8:	81 e0       	ldi	r24, 0x01	; 1
    42ba:	80 93 81 0b 	sts	0x0B81, r24	; 0x800b81 <sg_bMCTxNextBit>
    42be:	86 b5       	in	r24, 0x26	; 38
    42c0:	8e 5c       	subi	r24, 0xCE	; 206
    42c2:	87 bd       	out	0x27, r24	; 39
    42c4:	85 b3       	in	r24, 0x15	; 21
    42c6:	82 60       	ori	r24, 0x02	; 2
    42c8:	85 bb       	out	0x15, r24	; 21
    42ca:	ee e6       	ldi	r30, 0x6E	; 110
    42cc:	f0 e0       	ldi	r31, 0x00	; 0
    42ce:	80 81       	ld	r24, Z
    42d0:	82 60       	ori	r24, 0x02	; 2
    42d2:	80 83       	st	Z, r24
    42d4:	0e 94 cf 26 	call	0x4d9e	; 0x4d9e <vUARTtxDataAvailable>
    42d8:	80 93 84 0b 	sts	0x0B84, r24	; 0x800b84 <sg_btxMoreAvailable>
    42dc:	0e 94 98 22 	call	0x4530	; 0x4530 <vUARTtxDataGet>
    42e0:	80 93 85 0b 	sts	0x0B85, r24	; 0x800b85 <sg_u8txDataByte>
    42e4:	81 e0       	ldi	r24, 0x01	; 1
    42e6:	08 95       	ret
    42e8:	80 e0       	ldi	r24, 0x00	; 0
    42ea:	08 95       	ret
    42ec:	80 e0       	ldi	r24, 0x00	; 0
    42ee:	08 95       	ret

Disassembly of section .text.__vector_8:

00004138 <__vector_8>:
    4138:	1f 92       	push	r1
    413a:	0f 92       	push	r0
    413c:	0f b6       	in	r0, 0x3f	; 63
    413e:	0f 92       	push	r0
    4140:	11 24       	eor	r1, r1
    4142:	8f 93       	push	r24
    4144:	ef 93       	push	r30
    4146:	ff 93       	push	r31
    4148:	80 91 89 0b 	lds	r24, 0x0B89	; 0x800b89 <sg_eCell_mc_rxState>
    414c:	88 23       	and	r24, r24
    414e:	11 f0       	breq	.+4      	; 0x4154 <__vector_8+0x1c>
    4150:	83 30       	cpi	r24, 0x03	; 3
    4152:	c1 f4       	brne	.+48     	; 0x4184 <__vector_8+0x4c>
    4154:	86 b5       	in	r24, 0x26	; 38
    4156:	85 5b       	subi	r24, 0xB5	; 181
    4158:	88 bd       	out	0x28, r24	; 40
    415a:	85 b3       	in	r24, 0x15	; 21
    415c:	84 60       	ori	r24, 0x04	; 4
    415e:	85 bb       	out	0x15, r24	; 21
    4160:	ee e6       	ldi	r30, 0x6E	; 110
    4162:	f0 e0       	ldi	r31, 0x00	; 0
    4164:	80 81       	ld	r24, Z
    4166:	84 60       	ori	r24, 0x04	; 4
    4168:	80 83       	st	Z, r24
    416a:	8d b3       	in	r24, 0x1d	; 29
    416c:	8d 7f       	andi	r24, 0xFD	; 253
    416e:	8d bb       	out	0x1d, r24	; 29
    4170:	8b b1       	in	r24, 0x0b	; 11
    4172:	80 62       	ori	r24, 0x20	; 32
    4174:	8b b9       	out	0x0b, r24	; 11
    4176:	10 92 7f 0b 	sts	0x0B7F, r1	; 0x800b7f <sg_bState>
    417a:	81 e0       	ldi	r24, 0x01	; 1
    417c:	80 93 89 0b 	sts	0x0B89, r24	; 0x800b89 <sg_eCell_mc_rxState>
    4180:	10 92 8b 0b 	sts	0x0B8B, r1	; 0x800b8b <sg_u8Cell_mc_rxBitCount>
    4184:	ff 91       	pop	r31
    4186:	ef 91       	pop	r30
    4188:	8f 91       	pop	r24
    418a:	0f 90       	pop	r0
    418c:	0f be       	out	0x3f, r0	; 63
    418e:	0f 90       	pop	r0
    4190:	1f 90       	pop	r1
    4192:	18 95       	reti

Disassembly of section .text.__vector_16:

00002ada <__vector_16>:
    2ada:	1f 92       	push	r1
    2adc:	0f 92       	push	r0
    2ade:	0f b6       	in	r0, 0x3f	; 63
    2ae0:	0f 92       	push	r0
    2ae2:	11 24       	eor	r1, r1
    2ae4:	2f 93       	push	r18
    2ae6:	3f 93       	push	r19
    2ae8:	4f 93       	push	r20
    2aea:	5f 93       	push	r21
    2aec:	6f 93       	push	r22
    2aee:	7f 93       	push	r23
    2af0:	8f 93       	push	r24
    2af2:	9f 93       	push	r25
    2af4:	af 93       	push	r26
    2af6:	bf 93       	push	r27
    2af8:	ef 93       	push	r30
    2afa:	ff 93       	push	r31
    2afc:	86 b5       	in	r24, 0x26	; 38
    2afe:	8e 5c       	subi	r24, 0xCE	; 206
    2b00:	88 bd       	out	0x28, r24	; 40
    2b02:	85 b3       	in	r24, 0x15	; 21
    2b04:	84 60       	ori	r24, 0x04	; 4
    2b06:	85 bb       	out	0x15, r24	; 21
    2b08:	ee e6       	ldi	r30, 0x6E	; 110
    2b0a:	f0 e0       	ldi	r31, 0x00	; 0
    2b0c:	80 81       	ld	r24, Z
    2b0e:	84 60       	ori	r24, 0x04	; 4
    2b10:	80 83       	st	Z, r24
    2b12:	20 91 88 0b 	lds	r18, 0x0B88	; 0x800b88 <sg_bCell_mc_rxPriorState>
    2b16:	83 b1       	in	r24, 0x03	; 3
    2b18:	82 fb       	bst	r24, 2
    2b1a:	88 27       	eor	r24, r24
    2b1c:	80 f9       	bld	r24, 0
    2b1e:	80 93 88 0b 	sts	0x0B88, r24	; 0x800b88 <sg_bCell_mc_rxPriorState>
    2b22:	90 91 7f 0b 	lds	r25, 0x0B7F	; 0x800b7f <sg_bState>
    2b26:	99 23       	and	r25, r25
    2b28:	31 f0       	breq	.+12     	; 0x2b36 <__vector_16+0x5c>
    2b2a:	9b b1       	in	r25, 0x0b	; 11
    2b2c:	90 62       	ori	r25, 0x20	; 32
    2b2e:	9b b9       	out	0x0b, r25	; 11
    2b30:	10 92 7f 0b 	sts	0x0B7F, r1	; 0x800b7f <sg_bState>
    2b34:	06 c0       	rjmp	.+12     	; 0x2b42 <__vector_16+0x68>
    2b36:	9b b1       	in	r25, 0x0b	; 11
    2b38:	9f 7d       	andi	r25, 0xDF	; 223
    2b3a:	9b b9       	out	0x0b, r25	; 11
    2b3c:	81 e0       	ldi	r24, 0x01	; 1
    2b3e:	80 93 7f 0b 	sts	0x0B7F, r24	; 0x800b7f <sg_bState>
    2b42:	80 91 8b 0b 	lds	r24, 0x0B8B	; 0x800b8b <sg_u8Cell_mc_rxBitCount>
    2b46:	8f 5f       	subi	r24, 0xFF	; 255
    2b48:	80 93 8b 0b 	sts	0x0B8B, r24	; 0x800b8b <sg_u8Cell_mc_rxBitCount>
    2b4c:	81 30       	cpi	r24, 0x01	; 1
    2b4e:	19 f4       	brne	.+6      	; 0x2b56 <__vector_16+0x7c>
    2b50:	10 92 8a 0b 	sts	0x0B8A, r1	; 0x800b8a <sg_u8rxDataByte>
    2b54:	2b c0       	rjmp	.+86     	; 0x2bac <__vector_16+0xd2>
    2b56:	8a 30       	cpi	r24, 0x0A	; 10
    2b58:	38 f4       	brcc	.+14     	; 0x2b68 <__vector_16+0x8e>
    2b5a:	80 91 8a 0b 	lds	r24, 0x0B8A	; 0x800b8a <sg_u8rxDataByte>
    2b5e:	88 0f       	add	r24, r24
    2b60:	82 2b       	or	r24, r18
    2b62:	80 93 8a 0b 	sts	0x0B8A, r24	; 0x800b8a <sg_u8rxDataByte>
    2b66:	22 c0       	rjmp	.+68     	; 0x2bac <__vector_16+0xd2>
    2b68:	20 93 87 0b 	sts	0x0B87, r18	; 0x800b87 <sg_bCell_mc_rxMoreData>
    2b6c:	8b b1       	in	r24, 0x0b	; 11
    2b6e:	8f 7d       	andi	r24, 0xDF	; 223
    2b70:	8b b9       	out	0x0b, r24	; 11
    2b72:	81 e0       	ldi	r24, 0x01	; 1
    2b74:	80 93 7f 0b 	sts	0x0B7F, r24	; 0x800b7f <sg_bState>
    2b78:	e9 e6       	ldi	r30, 0x69	; 105
    2b7a:	f0 e0       	ldi	r31, 0x00	; 0
    2b7c:	9c e0       	ldi	r25, 0x0C	; 12
    2b7e:	90 83       	st	Z, r25
    2b80:	8c b3       	in	r24, 0x1c	; 28
    2b82:	82 60       	ori	r24, 0x02	; 2
    2b84:	8c bb       	out	0x1c, r24	; 28
    2b86:	90 83       	st	Z, r25
    2b88:	8c b3       	in	r24, 0x1c	; 28
    2b8a:	82 60       	ori	r24, 0x02	; 2
    2b8c:	8c bb       	out	0x1c, r24	; 28
    2b8e:	8d b3       	in	r24, 0x1d	; 29
    2b90:	82 60       	ori	r24, 0x02	; 2
    2b92:	8d bb       	out	0x1d, r24	; 29
    2b94:	ee e6       	ldi	r30, 0x6E	; 110
    2b96:	f0 e0       	ldi	r31, 0x00	; 0
    2b98:	80 81       	ld	r24, Z
    2b9a:	8b 7f       	andi	r24, 0xFB	; 251
    2b9c:	80 83       	st	Z, r24
    2b9e:	80 91 8a 0b 	lds	r24, 0x0B8A	; 0x800b8a <sg_u8rxDataByte>
    2ba2:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <vUARTRXData>
    2ba6:	83 e0       	ldi	r24, 0x03	; 3
    2ba8:	80 93 89 0b 	sts	0x0B89, r24	; 0x800b89 <sg_eCell_mc_rxState>
    2bac:	ff 91       	pop	r31
    2bae:	ef 91       	pop	r30
    2bb0:	bf 91       	pop	r27
    2bb2:	af 91       	pop	r26
    2bb4:	9f 91       	pop	r25
    2bb6:	8f 91       	pop	r24
    2bb8:	7f 91       	pop	r23
    2bba:	6f 91       	pop	r22
    2bbc:	5f 91       	pop	r21
    2bbe:	4f 91       	pop	r20
    2bc0:	3f 91       	pop	r19
    2bc2:	2f 91       	pop	r18
    2bc4:	0f 90       	pop	r0
    2bc6:	0f be       	out	0x3f, r0	; 63
    2bc8:	0f 90       	pop	r0
    2bca:	1f 90       	pop	r1
    2bcc:	18 95       	reti

Disassembly of section .text.__vector_15:

0000257c <__vector_15>:
    257c:	1f 92       	push	r1
    257e:	0f 92       	push	r0
    2580:	0f b6       	in	r0, 0x3f	; 63
    2582:	0f 92       	push	r0
    2584:	11 24       	eor	r1, r1
    2586:	2f 93       	push	r18
    2588:	3f 93       	push	r19
    258a:	4f 93       	push	r20
    258c:	5f 93       	push	r21
    258e:	6f 93       	push	r22
    2590:	7f 93       	push	r23
    2592:	8f 93       	push	r24
    2594:	9f 93       	push	r25
    2596:	af 93       	push	r26
    2598:	bf 93       	push	r27
    259a:	ef 93       	push	r30
    259c:	ff 93       	push	r31
    259e:	86 b5       	in	r24, 0x26	; 38
    25a0:	83 5d       	subi	r24, 0xD3	; 211
    25a2:	87 bd       	out	0x27, r24	; 39
    25a4:	85 b3       	in	r24, 0x15	; 21
    25a6:	82 60       	ori	r24, 0x02	; 2
    25a8:	85 bb       	out	0x15, r24	; 21
    25aa:	ee e6       	ldi	r30, 0x6E	; 110
    25ac:	f0 e0       	ldi	r31, 0x00	; 0
    25ae:	80 81       	ld	r24, Z
    25b0:	82 60       	ori	r24, 0x02	; 2
    25b2:	80 83       	st	Z, r24
    25b4:	80 91 81 0b 	lds	r24, 0x0B81	; 0x800b81 <sg_bMCTxNextBit>
    25b8:	88 23       	and	r24, r24
    25ba:	21 f0       	breq	.+8      	; 0x25c4 <__vector_15+0x48>
    25bc:	85 b1       	in	r24, 0x05	; 5
    25be:	88 60       	ori	r24, 0x08	; 8
    25c0:	85 b9       	out	0x05, r24	; 5
    25c2:	03 c0       	rjmp	.+6      	; 0x25ca <__vector_15+0x4e>
    25c4:	85 b1       	in	r24, 0x05	; 5
    25c6:	87 7f       	andi	r24, 0xF7	; 247
    25c8:	85 b9       	out	0x05, r24	; 5
    25ca:	80 91 86 0b 	lds	r24, 0x0B86	; 0x800b86 <sg_u8txBitCount>
    25ce:	8f 5f       	subi	r24, 0xFF	; 255
    25d0:	80 93 86 0b 	sts	0x0B86, r24	; 0x800b86 <sg_u8txBitCount>
    25d4:	80 91 86 0b 	lds	r24, 0x0B86	; 0x800b86 <sg_u8txBitCount>
    25d8:	83 30       	cpi	r24, 0x03	; 3
    25da:	61 f4       	brne	.+24     	; 0x25f4 <__vector_15+0x78>
    25dc:	80 91 82 0b 	lds	r24, 0x0B82	; 0x800b82 <sg_bCellReportsReuested>
    25e0:	88 23       	and	r24, r24
    25e2:	41 f0       	breq	.+16     	; 0x25f4 <__vector_15+0x78>
    25e4:	8b e0       	ldi	r24, 0x0B	; 11
    25e6:	80 93 86 0b 	sts	0x0B86, r24	; 0x800b86 <sg_u8txBitCount>
    25ea:	10 92 81 0b 	sts	0x0B81, r1	; 0x800b81 <sg_bMCTxNextBit>
    25ee:	10 92 84 0b 	sts	0x0B84, r1	; 0x800b84 <sg_btxMoreAvailable>
    25f2:	4d c0       	rjmp	.+154    	; 0x268e <__vector_15+0x112>
    25f4:	80 91 86 0b 	lds	r24, 0x0B86	; 0x800b86 <sg_u8txBitCount>
    25f8:	8a 30       	cpi	r24, 0x0A	; 10
    25fa:	80 f4       	brcc	.+32     	; 0x261c <__vector_15+0xa0>
    25fc:	80 91 85 0b 	lds	r24, 0x0B85	; 0x800b85 <sg_u8txDataByte>
    2600:	88 23       	and	r24, r24
    2602:	24 f4       	brge	.+8      	; 0x260c <__vector_15+0x90>
    2604:	81 e0       	ldi	r24, 0x01	; 1
    2606:	80 93 81 0b 	sts	0x0B81, r24	; 0x800b81 <sg_bMCTxNextBit>
    260a:	02 c0       	rjmp	.+4      	; 0x2610 <__vector_15+0x94>
    260c:	10 92 81 0b 	sts	0x0B81, r1	; 0x800b81 <sg_bMCTxNextBit>
    2610:	80 91 85 0b 	lds	r24, 0x0B85	; 0x800b85 <sg_u8txDataByte>
    2614:	88 0f       	add	r24, r24
    2616:	80 93 85 0b 	sts	0x0B85, r24	; 0x800b85 <sg_u8txDataByte>
    261a:	39 c0       	rjmp	.+114    	; 0x268e <__vector_15+0x112>
    261c:	80 91 86 0b 	lds	r24, 0x0B86	; 0x800b86 <sg_u8txBitCount>
    2620:	8a 30       	cpi	r24, 0x0A	; 10
    2622:	29 f4       	brne	.+10     	; 0x262e <__vector_15+0xb2>
    2624:	80 91 84 0b 	lds	r24, 0x0B84	; 0x800b84 <sg_btxMoreAvailable>
    2628:	80 93 81 0b 	sts	0x0B81, r24	; 0x800b81 <sg_bMCTxNextBit>
    262c:	30 c0       	rjmp	.+96     	; 0x268e <__vector_15+0x112>
    262e:	80 91 86 0b 	lds	r24, 0x0B86	; 0x800b86 <sg_u8txBitCount>
    2632:	8b 30       	cpi	r24, 0x0B	; 11
    2634:	19 f4       	brne	.+6      	; 0x263c <__vector_15+0xc0>
    2636:	10 92 81 0b 	sts	0x0B81, r1	; 0x800b81 <sg_bMCTxNextBit>
    263a:	29 c0       	rjmp	.+82     	; 0x268e <__vector_15+0x112>
    263c:	80 91 86 0b 	lds	r24, 0x0B86	; 0x800b86 <sg_u8txBitCount>
    2640:	8c 30       	cpi	r24, 0x0C	; 12
    2642:	29 f5       	brne	.+74     	; 0x268e <__vector_15+0x112>
    2644:	80 91 84 0b 	lds	r24, 0x0B84	; 0x800b84 <sg_btxMoreAvailable>
    2648:	80 93 81 0b 	sts	0x0B81, r24	; 0x800b81 <sg_bMCTxNextBit>
    264c:	10 92 86 0b 	sts	0x0B86, r1	; 0x800b86 <sg_u8txBitCount>
    2650:	80 91 84 0b 	lds	r24, 0x0B84	; 0x800b84 <sg_btxMoreAvailable>
    2654:	81 11       	cpse	r24, r1
    2656:	08 c0       	rjmp	.+16     	; 0x2668 <__vector_15+0xec>
    2658:	10 92 83 0b 	sts	0x0B83, r1	; 0x800b83 <sg_etxState>
    265c:	ee e6       	ldi	r30, 0x6E	; 110
    265e:	f0 e0       	ldi	r31, 0x00	; 0
    2660:	80 81       	ld	r24, Z
    2662:	8d 7f       	andi	r24, 0xFD	; 253
    2664:	80 83       	st	Z, r24
    2666:	13 c0       	rjmp	.+38     	; 0x268e <__vector_15+0x112>
    2668:	0e 94 cf 26 	call	0x4d9e	; 0x4d9e <vUARTtxDataAvailable>
    266c:	80 93 84 0b 	sts	0x0B84, r24	; 0x800b84 <sg_btxMoreAvailable>
    2670:	0e 94 98 22 	call	0x4530	; 0x4530 <vUARTtxDataGet>
    2674:	80 93 85 0b 	sts	0x0B85, r24	; 0x800b85 <sg_u8txDataByte>
    2678:	86 b5       	in	r24, 0x26	; 38
    267a:	88 53       	subi	r24, 0x38	; 56
    267c:	87 bd       	out	0x27, r24	; 39
    267e:	85 b3       	in	r24, 0x15	; 21
    2680:	82 60       	ori	r24, 0x02	; 2
    2682:	85 bb       	out	0x15, r24	; 21
    2684:	ee e6       	ldi	r30, 0x6E	; 110
    2686:	f0 e0       	ldi	r31, 0x00	; 0
    2688:	80 81       	ld	r24, Z
    268a:	82 60       	ori	r24, 0x02	; 2
    268c:	80 83       	st	Z, r24
    268e:	ff 91       	pop	r31
    2690:	ef 91       	pop	r30
    2692:	bf 91       	pop	r27
    2694:	af 91       	pop	r26
    2696:	9f 91       	pop	r25
    2698:	8f 91       	pop	r24
    269a:	7f 91       	pop	r23
    269c:	6f 91       	pop	r22
    269e:	5f 91       	pop	r21
    26a0:	4f 91       	pop	r20
    26a2:	3f 91       	pop	r19
    26a4:	2f 91       	pop	r18
    26a6:	0f 90       	pop	r0
    26a8:	0f be       	out	0x3f, r0	; 63
    26aa:	0f 90       	pop	r0
    26ac:	1f 90       	pop	r1
    26ae:	18 95       	reti

Disassembly of section .text.vUARTInit:

0000472c <vUARTInit>:
    472c:	85 b7       	in	r24, 0x35	; 53
    472e:	8f 7e       	andi	r24, 0xEF	; 239
    4730:	85 bf       	out	0x35, r24	; 53
    4732:	84 b1       	in	r24, 0x04	; 4
    4734:	88 60       	ori	r24, 0x08	; 8
    4736:	84 b9       	out	0x04, r24	; 4
    4738:	84 b1       	in	r24, 0x04	; 4
    473a:	8b 7f       	andi	r24, 0xFB	; 251
    473c:	84 b9       	out	0x04, r24	; 4
    473e:	85 b1       	in	r24, 0x05	; 5
    4740:	8b 7f       	andi	r24, 0xFB	; 251
    4742:	85 b9       	out	0x05, r24	; 5
    4744:	8a b1       	in	r24, 0x0a	; 10
    4746:	80 62       	ori	r24, 0x20	; 32
    4748:	8a b9       	out	0x0a, r24	; 10
    474a:	8b b1       	in	r24, 0x0b	; 11
    474c:	80 62       	ori	r24, 0x20	; 32
    474e:	8b b9       	out	0x0b, r24	; 11
    4750:	8d b3       	in	r24, 0x1d	; 29
    4752:	8d 7f       	andi	r24, 0xFD	; 253
    4754:	8d bb       	out	0x1d, r24	; 29
    4756:	10 92 83 0b 	sts	0x0B83, r1	; 0x800b83 <sg_etxState>
    475a:	85 b1       	in	r24, 0x05	; 5
    475c:	87 7f       	andi	r24, 0xF7	; 247
    475e:	85 b9       	out	0x05, r24	; 5
    4760:	08 95       	ret

Disassembly of section .text.vUARTInitReceive:

00004f2a <vUARTInitReceive>:
    4f2a:	8c e0       	ldi	r24, 0x0C	; 12
    4f2c:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f0069>
    4f30:	8c b3       	in	r24, 0x1c	; 28
    4f32:	82 60       	ori	r24, 0x02	; 2
    4f34:	8c bb       	out	0x1c, r24	; 28
    4f36:	8d b3       	in	r24, 0x1d	; 29
    4f38:	82 60       	ori	r24, 0x02	; 2
    4f3a:	8d bb       	out	0x1d, r24	; 29
    4f3c:	08 95       	ret

Disassembly of section .text.libgcc.div:

00004a7c <__udivmodhi4>:
    4a7c:	aa 1b       	sub	r26, r26
    4a7e:	bb 1b       	sub	r27, r27
    4a80:	51 e1       	ldi	r21, 0x11	; 17
    4a82:	07 c0       	rjmp	.+14     	; 0x4a92 <__udivmodhi4_ep>

00004a84 <__udivmodhi4_loop>:
    4a84:	aa 1f       	adc	r26, r26
    4a86:	bb 1f       	adc	r27, r27
    4a88:	a6 17       	cp	r26, r22
    4a8a:	b7 07       	cpc	r27, r23
    4a8c:	10 f0       	brcs	.+4      	; 0x4a92 <__udivmodhi4_ep>
    4a8e:	a6 1b       	sub	r26, r22
    4a90:	b7 0b       	sbc	r27, r23

00004a92 <__udivmodhi4_ep>:
    4a92:	88 1f       	adc	r24, r24
    4a94:	99 1f       	adc	r25, r25
    4a96:	5a 95       	dec	r21
    4a98:	a9 f7       	brne	.-22     	; 0x4a84 <__udivmodhi4_loop>
    4a9a:	80 95       	com	r24
    4a9c:	90 95       	com	r25
    4a9e:	bc 01       	movw	r22, r24
    4aa0:	cd 01       	movw	r24, r26
    4aa2:	08 95       	ret

Disassembly of section .text.libgcc.div:

000045c0 <__udivmodsi4>:
    45c0:	a1 e2       	ldi	r26, 0x21	; 33
    45c2:	1a 2e       	mov	r1, r26
    45c4:	aa 1b       	sub	r26, r26
    45c6:	bb 1b       	sub	r27, r27
    45c8:	fd 01       	movw	r30, r26
    45ca:	0d c0       	rjmp	.+26     	; 0x45e6 <__udivmodsi4_ep>

000045cc <__udivmodsi4_loop>:
    45cc:	aa 1f       	adc	r26, r26
    45ce:	bb 1f       	adc	r27, r27
    45d0:	ee 1f       	adc	r30, r30
    45d2:	ff 1f       	adc	r31, r31
    45d4:	a2 17       	cp	r26, r18
    45d6:	b3 07       	cpc	r27, r19
    45d8:	e4 07       	cpc	r30, r20
    45da:	f5 07       	cpc	r31, r21
    45dc:	20 f0       	brcs	.+8      	; 0x45e6 <__udivmodsi4_ep>
    45de:	a2 1b       	sub	r26, r18
    45e0:	b3 0b       	sbc	r27, r19
    45e2:	e4 0b       	sbc	r30, r20
    45e4:	f5 0b       	sbc	r31, r21

000045e6 <__udivmodsi4_ep>:
    45e6:	66 1f       	adc	r22, r22
    45e8:	77 1f       	adc	r23, r23
    45ea:	88 1f       	adc	r24, r24
    45ec:	99 1f       	adc	r25, r25
    45ee:	1a 94       	dec	r1
    45f0:	69 f7       	brne	.-38     	; 0x45cc <__udivmodsi4_loop>
    45f2:	60 95       	com	r22
    45f4:	70 95       	com	r23
    45f6:	80 95       	com	r24
    45f8:	90 95       	com	r25
    45fa:	9b 01       	movw	r18, r22
    45fc:	ac 01       	movw	r20, r24
    45fe:	bd 01       	movw	r22, r26
    4600:	cf 01       	movw	r24, r30
    4602:	08 95       	ret

Disassembly of section .text.libgcc.div:

000048f8 <__divmodsi4>:
    48f8:	05 2e       	mov	r0, r21
    48fa:	97 fb       	bst	r25, 7
    48fc:	1e f4       	brtc	.+6      	; 0x4904 <__divmodsi4+0xc>
    48fe:	00 94       	com	r0
    4900:	0e 94 d4 27 	call	0x4fa8	; 0x4fa8 <__negsi2>
    4904:	57 fd       	sbrc	r21, 7
    4906:	07 d0       	rcall	.+14     	; 0x4916 <__divmodsi4_neg2>
    4908:	0e 94 e0 22 	call	0x45c0	; 0x45c0 <__udivmodsi4>
    490c:	07 fc       	sbrc	r0, 7
    490e:	03 d0       	rcall	.+6      	; 0x4916 <__divmodsi4_neg2>
    4910:	4e f4       	brtc	.+18     	; 0x4924 <__divmodsi4_exit>
    4912:	0c 94 d4 27 	jmp	0x4fa8	; 0x4fa8 <__negsi2>

00004916 <__divmodsi4_neg2>:
    4916:	50 95       	com	r21
    4918:	40 95       	com	r20
    491a:	30 95       	com	r19
    491c:	21 95       	neg	r18
    491e:	3f 4f       	sbci	r19, 0xFF	; 255
    4920:	4f 4f       	sbci	r20, 0xFF	; 255
    4922:	5f 4f       	sbci	r21, 0xFF	; 255

00004924 <__divmodsi4_exit>:
    4924:	08 95       	ret

Disassembly of section .text.libgcc.div:

00004fa8 <__negsi2>:
    4fa8:	90 95       	com	r25
    4faa:	80 95       	com	r24
    4fac:	70 95       	com	r23
    4fae:	61 95       	neg	r22
    4fb0:	7f 4f       	sbci	r23, 0xFF	; 255
    4fb2:	8f 4f       	sbci	r24, 0xFF	; 255
    4fb4:	9f 4f       	sbci	r25, 0xFF	; 255
    4fb6:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00004e04 <__umulhisi3>:
    4e04:	a2 9f       	mul	r26, r18
    4e06:	b0 01       	movw	r22, r0
    4e08:	b3 9f       	mul	r27, r19
    4e0a:	c0 01       	movw	r24, r0
    4e0c:	a3 9f       	mul	r26, r19
    4e0e:	70 0d       	add	r23, r0
    4e10:	81 1d       	adc	r24, r1
    4e12:	11 24       	eor	r1, r1
    4e14:	91 1d       	adc	r25, r1
    4e16:	b2 9f       	mul	r27, r18
    4e18:	70 0d       	add	r23, r0
    4e1a:	81 1d       	adc	r24, r1
    4e1c:	11 24       	eor	r1, r1
    4e1e:	91 1d       	adc	r25, r1
    4e20:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00005002 <__usmulhisi3>:
    5002:	0e 94 02 27 	call	0x4e04	; 0x4e04 <__umulhisi3>

00005006 <__usmulhisi3_tail>:
    5006:	b7 ff       	sbrs	r27, 7
    5008:	08 95       	ret
    500a:	82 1b       	sub	r24, r18
    500c:	93 0b       	sbc	r25, r19
    500e:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00004eea <__muluhisi3>:
    4eea:	0e 94 02 27 	call	0x4e04	; 0x4e04 <__umulhisi3>
    4eee:	a5 9f       	mul	r26, r21
    4ef0:	90 0d       	add	r25, r0
    4ef2:	b4 9f       	mul	r27, r20
    4ef4:	90 0d       	add	r25, r0
    4ef6:	a4 9f       	mul	r26, r20
    4ef8:	80 0d       	add	r24, r0
    4efa:	91 1d       	adc	r25, r1
    4efc:	11 24       	eor	r1, r1
    4efe:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00004fb8 <__mulshisi3>:
    4fb8:	b7 ff       	sbrs	r27, 7
    4fba:	0c 94 75 27 	jmp	0x4eea	; 0x4eea <__muluhisi3>

00004fbe <__mulohisi3>:
    4fbe:	0e 94 75 27 	call	0x4eea	; 0x4eea <__muluhisi3>
    4fc2:	82 1b       	sub	r24, r18
    4fc4:	93 0b       	sbc	r25, r19
    4fc6:	08 95       	ret

Disassembly of section .text.libgcc:

00004fc8 <__xload_2>:
    4fc8:	57 fd       	sbrc	r21, 7
    4fca:	03 c0       	rjmp	.+6      	; 0x4fd2 <__xload_2+0xa>
    4fcc:	65 91       	lpm	r22, Z+
    4fce:	75 91       	lpm	r23, Z+
    4fd0:	08 95       	ret
    4fd2:	61 91       	ld	r22, Z+
    4fd4:	71 91       	ld	r23, Z+
    4fd6:	08 95       	ret

Disassembly of section .text.libgcc:

00004e8e <__xload_4>:
    4e8e:	57 fd       	sbrc	r21, 7
    4e90:	05 c0       	rjmp	.+10     	; 0x4e9c <__xload_4+0xe>
    4e92:	65 91       	lpm	r22, Z+
    4e94:	75 91       	lpm	r23, Z+
    4e96:	85 91       	lpm	r24, Z+
    4e98:	95 91       	lpm	r25, Z+
    4e9a:	08 95       	ret
    4e9c:	61 91       	ld	r22, Z+
    4e9e:	71 91       	ld	r23, Z+
    4ea0:	81 91       	ld	r24, Z+
    4ea2:	91 91       	ld	r25, Z+
    4ea4:	08 95       	ret

Disassembly of section .text.libgcc:

00004ea6 <__adddi3_s8>:
    4ea6:	00 24       	eor	r0, r0
    4ea8:	a7 fd       	sbrc	r26, 7
    4eaa:	00 94       	com	r0
    4eac:	2a 0f       	add	r18, r26
    4eae:	30 1d       	adc	r19, r0
    4eb0:	40 1d       	adc	r20, r0
    4eb2:	50 1d       	adc	r21, r0
    4eb4:	60 1d       	adc	r22, r0
    4eb6:	70 1d       	adc	r23, r0
    4eb8:	80 1d       	adc	r24, r0
    4eba:	90 1d       	adc	r25, r0
    4ebc:	08 95       	ret

Disassembly of section .text.__dummy_fini:

00005060 <_fini>:
    5060:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00005062 <__funcs_on_exit>:
    5062:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00005064 <__simulator_exit>:
    5064:	08 95       	ret

Disassembly of section .text.exit:

00004f00 <exit>:
    4f00:	ec 01       	movw	r28, r24
    4f02:	0e 94 31 28 	call	0x5062	; 0x5062 <__funcs_on_exit>
    4f06:	0e 94 30 28 	call	0x5060	; 0x5060 <_fini>
    4f0a:	ce 01       	movw	r24, r28
    4f0c:	0e 94 32 28 	call	0x5064	; 0x5064 <__simulator_exit>
    4f10:	ce 01       	movw	r24, r28
    4f12:	0e 94 2d 28 	call	0x505a	; 0x505a <_Exit>

Disassembly of section .text.memcpy:

00004898 <memcpy>:
    4898:	cf 92       	push	r12
    489a:	df 92       	push	r13
    489c:	ef 92       	push	r14
    489e:	6a 01       	movw	r12, r20
    48a0:	e6 2e       	mov	r14, r22
    48a2:	dc 01       	movw	r26, r24
    48a4:	28 0f       	add	r18, r24
    48a6:	39 1f       	adc	r19, r25
    48a8:	a2 17       	cp	r26, r18
    48aa:	b3 07       	cpc	r27, r19
    48ac:	51 f0       	breq	.+20     	; 0x48c2 <memcpy+0x2a>
    48ae:	f6 01       	movw	r30, r12
    48b0:	44 91       	lpm	r20, Z
    48b2:	e7 fc       	sbrc	r14, 7
    48b4:	40 81       	ld	r20, Z
    48b6:	4d 93       	st	X+, r20
    48b8:	4f ef       	ldi	r20, 0xFF	; 255
    48ba:	c4 1a       	sub	r12, r20
    48bc:	d4 0a       	sbc	r13, r20
    48be:	e4 0a       	sbc	r14, r20
    48c0:	f3 cf       	rjmp	.-26     	; 0x48a8 <memcpy+0x10>
    48c2:	ef 90       	pop	r14
    48c4:	df 90       	pop	r13
    48c6:	cf 90       	pop	r12
    48c8:	08 95       	ret

Disassembly of section .text.memset:

00004f50 <memset>:
    4f50:	fc 01       	movw	r30, r24
    4f52:	48 0f       	add	r20, r24
    4f54:	59 1f       	adc	r21, r25
    4f56:	e4 17       	cp	r30, r20
    4f58:	f5 07       	cpc	r31, r21
    4f5a:	11 f0       	breq	.+4      	; 0x4f60 <memset+0x10>
    4f5c:	61 93       	st	Z+, r22
    4f5e:	fb cf       	rjmp	.-10     	; 0x4f56 <memset+0x6>
    4f60:	08 95       	ret

Disassembly of section .text.gmtime:

00005046 <gmtime>:
    5046:	4c ef       	ldi	r20, 0xFC	; 252
    5048:	5a e0       	ldi	r21, 0x0A	; 10
    504a:	0e 94 39 1f 	call	0x3e72	; 0x3e72 <__gmtime_r>
    504e:	08 95       	ret

Disassembly of section .text.__gmtime_r:

00003e72 <__gmtime_r>:
    3e72:	a0 e0       	ldi	r26, 0x00	; 0
    3e74:	b0 e0       	ldi	r27, 0x00	; 0
    3e76:	ef e3       	ldi	r30, 0x3F	; 63
    3e78:	ff e1       	ldi	r31, 0x1F	; 31
    3e7a:	0c 94 80 23 	jmp	0x4700	; 0x4700 <__prologue_saves__+0xc>
    3e7e:	ea 01       	movw	r28, r20
    3e80:	fb 01       	movw	r30, r22
    3e82:	58 2f       	mov	r21, r24
    3e84:	0e 94 47 27 	call	0x4e8e	; 0x4e8e <__xload_4>
    3e88:	4b 01       	movw	r8, r22
    3e8a:	5c 01       	movw	r10, r24
    3e8c:	c1 2c       	mov	r12, r1
    3e8e:	d1 2c       	mov	r13, r1
    3e90:	76 01       	movw	r14, r12
    3e92:	8e 01       	movw	r16, r28
    3e94:	9b 01       	movw	r18, r22
    3e96:	a5 01       	movw	r20, r10
    3e98:	60 e0       	ldi	r22, 0x00	; 0
    3e9a:	70 e0       	ldi	r23, 0x00	; 0
    3e9c:	80 e0       	ldi	r24, 0x00	; 0
    3e9e:	90 e0       	ldi	r25, 0x00	; 0
    3ea0:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <__secs_to_tm>
    3ea4:	97 ff       	sbrs	r25, 7
    3ea6:	09 c0       	rjmp	.+18     	; 0x3eba <__gmtime_r+0x48>
    3ea8:	8f e4       	ldi	r24, 0x4F	; 79
    3eaa:	90 e0       	ldi	r25, 0x00	; 0
    3eac:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    3eb0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    3eb4:	80 e0       	ldi	r24, 0x00	; 0
    3eb6:	90 e0       	ldi	r25, 0x00	; 0
    3eb8:	0d c0       	rjmp	.+26     	; 0x3ed4 <__gmtime_r+0x62>
    3eba:	19 8a       	std	Y+17, r1	; 0x11
    3ebc:	18 8a       	std	Y+16, r1	; 0x10
    3ebe:	1a 8a       	std	Y+18, r1	; 0x12
    3ec0:	1b 8a       	std	Y+19, r1	; 0x13
    3ec2:	1c 8a       	std	Y+20, r1	; 0x14
    3ec4:	1d 8a       	std	Y+21, r1	; 0x15
    3ec6:	8f ea       	ldi	r24, 0xAF	; 175
    3ec8:	93 e0       	ldi	r25, 0x03	; 3
    3eca:	a0 e0       	ldi	r26, 0x00	; 0
    3ecc:	8e 8b       	std	Y+22, r24	; 0x16
    3ece:	9f 8b       	std	Y+23, r25	; 0x17
    3ed0:	a8 8f       	std	Y+24, r26	; 0x18
    3ed2:	ce 01       	movw	r24, r28
    3ed4:	cd b7       	in	r28, 0x3d	; 61
    3ed6:	de b7       	in	r29, 0x3e	; 62
    3ed8:	ec e0       	ldi	r30, 0x0C	; 12
    3eda:	0c 94 b7 23 	jmp	0x476e	; 0x476e <__epilogue_restores__+0xc>

Disassembly of section .text.mktime:

00003a82 <mktime>:
    3a82:	a9 e1       	ldi	r26, 0x19	; 25
    3a84:	b0 e0       	ldi	r27, 0x00	; 0
    3a86:	e7 e4       	ldi	r30, 0x47	; 71
    3a88:	fd e1       	ldi	r31, 0x1D	; 29
    3a8a:	0c 94 7c 23 	jmp	0x46f8	; 0x46f8 <__prologue_saves__+0x4>
    3a8e:	2c 01       	movw	r4, r24
    3a90:	bc 01       	movw	r22, r24
    3a92:	80 e8       	ldi	r24, 0x80	; 128
    3a94:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__tm_to_secs>
    3a98:	39 01       	movw	r6, r18
    3a9a:	4a 01       	movw	r8, r20
    3a9c:	59 01       	movw	r10, r18
    3a9e:	6a 01       	movw	r12, r20
    3aa0:	e1 2c       	mov	r14, r1
    3aa2:	f1 2c       	mov	r15, r1
    3aa4:	00 e0       	ldi	r16, 0x00	; 0
    3aa6:	10 e0       	ldi	r17, 0x00	; 0
    3aa8:	0e 94 c3 27 	call	0x4f86	; 0x4f86 <__cmpdi2>
    3aac:	f9 f4       	brne	.+62     	; 0x3aec <mktime+0x6a>
    3aae:	1a 8a       	std	Y+18, r1	; 0x12
    3ab0:	19 8a       	std	Y+17, r1	; 0x11
    3ab2:	1b 8a       	std	Y+19, r1	; 0x13
    3ab4:	1c 8a       	std	Y+20, r1	; 0x14
    3ab6:	1d 8a       	std	Y+21, r1	; 0x15
    3ab8:	1e 8a       	std	Y+22, r1	; 0x16
    3aba:	23 eb       	ldi	r18, 0xB3	; 179
    3abc:	33 e0       	ldi	r19, 0x03	; 3
    3abe:	40 e0       	ldi	r20, 0x00	; 0
    3ac0:	2f 8b       	std	Y+23, r18	; 0x17
    3ac2:	38 8f       	std	Y+24, r19	; 0x18
    3ac4:	49 8f       	std	Y+25, r20	; 0x19
    3ac6:	8e 01       	movw	r16, r28
    3ac8:	0f 5f       	subi	r16, 0xFF	; 255
    3aca:	1f 4f       	sbci	r17, 0xFF	; 255
    3acc:	93 01       	movw	r18, r6
    3ace:	48 2d       	mov	r20, r8
    3ad0:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <__secs_to_tm>
    3ad4:	97 fd       	sbrc	r25, 7
    3ad6:	0a c0       	rjmp	.+20     	; 0x3aec <mktime+0x6a>
    3ad8:	89 e1       	ldi	r24, 0x19	; 25
    3ada:	f8 01       	movw	r30, r16
    3adc:	d2 01       	movw	r26, r4
    3ade:	01 90       	ld	r0, Z+
    3ae0:	0d 92       	st	X+, r0
    3ae2:	8a 95       	dec	r24
    3ae4:	e1 f7       	brne	.-8      	; 0x3ade <mktime+0x5c>
    3ae6:	b3 01       	movw	r22, r6
    3ae8:	c4 01       	movw	r24, r8
    3aea:	0a c0       	rjmp	.+20     	; 0x3b00 <mktime+0x7e>
    3aec:	8f e4       	ldi	r24, 0x4F	; 79
    3aee:	90 e0       	ldi	r25, 0x00	; 0
    3af0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    3af4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    3af8:	6f ef       	ldi	r22, 0xFF	; 255
    3afa:	7f ef       	ldi	r23, 0xFF	; 255
    3afc:	8f ef       	ldi	r24, 0xFF	; 255
    3afe:	9f ef       	ldi	r25, 0xFF	; 255
    3b00:	69 96       	adiw	r28, 0x19	; 25
    3b02:	e0 e1       	ldi	r30, 0x10	; 16
    3b04:	0c 94 b3 23 	jmp	0x4766	; 0x4766 <__epilogue_restores__+0x4>

Disassembly of section .text._Exit:

0000505a <_Exit>:
    505a:	0e 94 6b 00 	call	0xd6	; 0xd6 <_exit>

Disassembly of section .text.__tm_to_secs:

00001cf8 <__tm_to_secs>:
    1cf8:	a5 e0       	ldi	r26, 0x05	; 5
    1cfa:	b0 e0       	ldi	r27, 0x00	; 0
    1cfc:	e2 e8       	ldi	r30, 0x82	; 130
    1cfe:	fe e0       	ldi	r31, 0x0E	; 14
    1d00:	0c 94 7a 23 	jmp	0x46f4	; 0x46f4 <__prologue_saves__>
    1d04:	3b 01       	movw	r6, r22
    1d06:	88 2e       	mov	r8, r24
    1d08:	a8 2f       	mov	r26, r24
    1d0a:	cb 01       	movw	r24, r22
    1d0c:	0a 96       	adiw	r24, 0x0a	; 10
    1d0e:	a1 1d       	adc	r26, r1
    1d10:	fc 01       	movw	r30, r24
    1d12:	5a 2f       	mov	r21, r26
    1d14:	0e 94 e4 27 	call	0x4fc8	; 0x4fc8 <__xload_2>
    1d18:	5b 01       	movw	r10, r22
    1d1a:	9b 01       	movw	r18, r22
    1d1c:	9b 2c       	mov	r9, r11
    1d1e:	99 0c       	add	r9, r9
    1d20:	99 08       	sbc	r9, r9
    1d22:	f9 2c       	mov	r15, r9
    1d24:	b9 2d       	mov	r27, r9
    1d26:	a9 2d       	mov	r26, r9
    1d28:	89 2d       	mov	r24, r9
    1d2a:	99 2d       	mov	r25, r9
    1d2c:	e8 2c       	mov	r14, r8
    1d2e:	63 01       	movw	r12, r6
    1d30:	48 e0       	ldi	r20, 0x08	; 8
    1d32:	c4 0e       	add	r12, r20
    1d34:	d1 1c       	adc	r13, r1
    1d36:	e1 1c       	adc	r14, r1
    1d38:	f6 01       	movw	r30, r12
    1d3a:	5e 2d       	mov	r21, r14
    1d3c:	0e 94 e4 27 	call	0x4fc8	; 0x4fc8 <__xload_2>
    1d40:	2b 01       	movw	r4, r22
    1d42:	6c 30       	cpi	r22, 0x0C	; 12
    1d44:	71 05       	cpc	r23, r1
    1d46:	10 f1       	brcs	.+68     	; 0x1d8c <__tm_to_secs+0x94>
    1d48:	cb 01       	movw	r24, r22
    1d4a:	6c e0       	ldi	r22, 0x0C	; 12
    1d4c:	70 e0       	ldi	r23, 0x00	; 0
    1d4e:	0e 94 52 25 	call	0x4aa4	; 0x4aa4 <__divmodhi4>
    1d52:	2c 01       	movw	r4, r24
    1d54:	97 ff       	sbrs	r25, 7
    1d56:	05 c0       	rjmp	.+10     	; 0x1d62 <__tm_to_secs+0x6a>
    1d58:	61 50       	subi	r22, 0x01	; 1
    1d5a:	71 09       	sbc	r23, r1
    1d5c:	8c e0       	ldi	r24, 0x0C	; 12
    1d5e:	48 0e       	add	r4, r24
    1d60:	51 1c       	adc	r5, r1
    1d62:	97 2f       	mov	r25, r23
    1d64:	99 0f       	add	r25, r25
    1d66:	99 0b       	sbc	r25, r25
    1d68:	9b 01       	movw	r18, r22
    1d6a:	49 2f       	mov	r20, r25
    1d6c:	59 2f       	mov	r21, r25
    1d6e:	69 2f       	mov	r22, r25
    1d70:	79 2f       	mov	r23, r25
    1d72:	89 2f       	mov	r24, r25
    1d74:	c9 2c       	mov	r12, r9
    1d76:	d9 2c       	mov	r13, r9
    1d78:	e9 2c       	mov	r14, r9
    1d7a:	f9 2c       	mov	r15, r9
    1d7c:	09 2d       	mov	r16, r9
    1d7e:	19 2d       	mov	r17, r9
    1d80:	0e 94 ba 27 	call	0x4f74	; 0x4f74 <__adddi3>
    1d84:	94 2e       	mov	r9, r20
    1d86:	f5 2e       	mov	r15, r21
    1d88:	b6 2f       	mov	r27, r22
    1d8a:	a7 2f       	mov	r26, r23
    1d8c:	8e 01       	movw	r16, r28
    1d8e:	0f 5f       	subi	r16, 0xFF	; 255
    1d90:	1f 4f       	sbci	r17, 0xFF	; 255
    1d92:	49 2d       	mov	r20, r9
    1d94:	5f 2d       	mov	r21, r15
    1d96:	6b 2f       	mov	r22, r27
    1d98:	7a 2f       	mov	r23, r26
    1d9a:	0e 94 28 0a 	call	0x1450	; 0x1450 <__year_to_secs>
    1d9e:	59 01       	movw	r10, r18
    1da0:	6a 01       	movw	r12, r20
    1da2:	7b 01       	movw	r14, r22
    1da4:	8c 01       	movw	r16, r24
    1da6:	69 81       	ldd	r22, Y+1	; 0x01
    1da8:	7a 81       	ldd	r23, Y+2	; 0x02
    1daa:	c2 01       	movw	r24, r4
    1dac:	0e 94 3f 23 	call	0x467e	; 0x467e <__month_to_secs>
    1db0:	1b 01       	movw	r2, r22
    1db2:	2c 01       	movw	r4, r24
    1db4:	55 0c       	add	r5, r5
    1db6:	22 08       	sbc	r2, r2
    1db8:	32 2c       	mov	r3, r2
    1dba:	21 01       	movw	r4, r2
    1dbc:	9b 01       	movw	r18, r22
    1dbe:	ac 01       	movw	r20, r24
    1dc0:	62 2d       	mov	r22, r2
    1dc2:	72 2d       	mov	r23, r2
    1dc4:	82 2d       	mov	r24, r2
    1dc6:	92 2d       	mov	r25, r2
    1dc8:	0e 94 ba 27 	call	0x4f74	; 0x4f74 <__adddi3>
    1dcc:	19 01       	movw	r2, r18
    1dce:	2a 01       	movw	r4, r20
    1dd0:	96 2e       	mov	r9, r22
    1dd2:	7b 83       	std	Y+3, r23	; 0x03
    1dd4:	8c 83       	std	Y+4, r24	; 0x04
    1dd6:	9d 83       	std	Y+5, r25	; 0x05
    1dd8:	a8 2d       	mov	r26, r8
    1dda:	c3 01       	movw	r24, r6
    1ddc:	06 96       	adiw	r24, 0x06	; 6
    1dde:	a1 1d       	adc	r26, r1
    1de0:	fc 01       	movw	r30, r24
    1de2:	5a 2f       	mov	r21, r26
    1de4:	0e 94 e4 27 	call	0x4fc8	; 0x4fc8 <__xload_2>
    1de8:	61 50       	subi	r22, 0x01	; 1
    1dea:	71 09       	sbc	r23, r1
    1dec:	97 2f       	mov	r25, r23
    1dee:	99 0f       	add	r25, r25
    1df0:	99 0b       	sbc	r25, r25
    1df2:	30 e8       	ldi	r19, 0x80	; 128
    1df4:	a3 2e       	mov	r10, r19
    1df6:	41 e5       	ldi	r20, 0x51	; 81
    1df8:	b4 2e       	mov	r11, r20
    1dfa:	cc 24       	eor	r12, r12
    1dfc:	c3 94       	inc	r12
    1dfe:	d1 2c       	mov	r13, r1
    1e00:	e1 2c       	mov	r14, r1
    1e02:	f1 2c       	mov	r15, r1
    1e04:	00 e0       	ldi	r16, 0x00	; 0
    1e06:	10 e0       	ldi	r17, 0x00	; 0
    1e08:	9b 01       	movw	r18, r22
    1e0a:	49 2f       	mov	r20, r25
    1e0c:	59 2f       	mov	r21, r25
    1e0e:	69 2f       	mov	r22, r25
    1e10:	79 2f       	mov	r23, r25
    1e12:	89 2f       	mov	r24, r25
    1e14:	0e 94 48 1b 	call	0x3690	; 0x3690 <__muldi3>
    1e18:	51 01       	movw	r10, r2
    1e1a:	62 01       	movw	r12, r4
    1e1c:	e9 2c       	mov	r14, r9
    1e1e:	fb 80       	ldd	r15, Y+3	; 0x03
    1e20:	0c 81       	ldd	r16, Y+4	; 0x04
    1e22:	1d 81       	ldd	r17, Y+5	; 0x05
    1e24:	0e 94 ba 27 	call	0x4f74	; 0x4f74 <__adddi3>
    1e28:	59 01       	movw	r10, r18
    1e2a:	6a 01       	movw	r12, r20
    1e2c:	7b 01       	movw	r14, r22
    1e2e:	8c 01       	movw	r16, r24
    1e30:	a8 2d       	mov	r26, r8
    1e32:	c3 01       	movw	r24, r6
    1e34:	04 96       	adiw	r24, 0x04	; 4
    1e36:	a1 1d       	adc	r26, r1
    1e38:	fc 01       	movw	r30, r24
    1e3a:	5a 2f       	mov	r21, r26
    1e3c:	0e 94 e4 27 	call	0x4fc8	; 0x4fc8 <__xload_2>
    1e40:	07 2e       	mov	r0, r23
    1e42:	00 0c       	add	r0, r0
    1e44:	88 0b       	sbc	r24, r24
    1e46:	99 0b       	sbc	r25, r25
    1e48:	20 e1       	ldi	r18, 0x10	; 16
    1e4a:	3e e0       	ldi	r19, 0x0E	; 14
    1e4c:	40 e0       	ldi	r20, 0x00	; 0
    1e4e:	50 e0       	ldi	r21, 0x00	; 0
    1e50:	0e 94 11 27 	call	0x4e22	; 0x4e22 <__mulsidi3>
    1e54:	0e 94 ba 27 	call	0x4f74	; 0x4f74 <__adddi3>
    1e58:	59 01       	movw	r10, r18
    1e5a:	6a 01       	movw	r12, r20
    1e5c:	7b 01       	movw	r14, r22
    1e5e:	8c 01       	movw	r16, r24
    1e60:	a8 2d       	mov	r26, r8
    1e62:	c3 01       	movw	r24, r6
    1e64:	02 96       	adiw	r24, 0x02	; 2
    1e66:	a1 1d       	adc	r26, r1
    1e68:	fc 01       	movw	r30, r24
    1e6a:	5a 2f       	mov	r21, r26
    1e6c:	0e 94 e4 27 	call	0x4fc8	; 0x4fc8 <__xload_2>
    1e70:	07 2e       	mov	r0, r23
    1e72:	00 0c       	add	r0, r0
    1e74:	88 0b       	sbc	r24, r24
    1e76:	99 0b       	sbc	r25, r25
    1e78:	2c e3       	ldi	r18, 0x3C	; 60
    1e7a:	30 e0       	ldi	r19, 0x00	; 0
    1e7c:	40 e0       	ldi	r20, 0x00	; 0
    1e7e:	50 e0       	ldi	r21, 0x00	; 0
    1e80:	0e 94 11 27 	call	0x4e22	; 0x4e22 <__mulsidi3>
    1e84:	0e 94 ba 27 	call	0x4f74	; 0x4f74 <__adddi3>
    1e88:	59 01       	movw	r10, r18
    1e8a:	6a 01       	movw	r12, r20
    1e8c:	7b 01       	movw	r14, r22
    1e8e:	8c 01       	movw	r16, r24
    1e90:	f3 01       	movw	r30, r6
    1e92:	58 2d       	mov	r21, r8
    1e94:	0e 94 e4 27 	call	0x4fc8	; 0x4fc8 <__xload_2>
    1e98:	9b 01       	movw	r18, r22
    1e9a:	93 2f       	mov	r25, r19
    1e9c:	99 0f       	add	r25, r25
    1e9e:	99 0b       	sbc	r25, r25
    1ea0:	49 2f       	mov	r20, r25
    1ea2:	59 2f       	mov	r21, r25
    1ea4:	69 2f       	mov	r22, r25
    1ea6:	79 2f       	mov	r23, r25
    1ea8:	89 2f       	mov	r24, r25
    1eaa:	0e 94 ba 27 	call	0x4f74	; 0x4f74 <__adddi3>
    1eae:	25 96       	adiw	r28, 0x05	; 5
    1eb0:	e2 e1       	ldi	r30, 0x12	; 18
    1eb2:	0c 94 b1 23 	jmp	0x4762	; 0x4762 <__epilogue_restores__>

Disassembly of section .text.__year_to_secs:

00001450 <__year_to_secs>:
    1450:	ac e0       	ldi	r26, 0x0C	; 12
    1452:	b0 e0       	ldi	r27, 0x00	; 0
    1454:	ee e2       	ldi	r30, 0x2E	; 46
    1456:	fa e0       	ldi	r31, 0x0A	; 10
    1458:	0c 94 7a 23 	jmp	0x46f4	; 0x46f4 <__prologue_saves__>
    145c:	49 01       	movw	r8, r18
    145e:	5a 01       	movw	r10, r20
    1460:	6b 01       	movw	r12, r22
    1462:	7c 01       	movw	r14, r24
    1464:	1c 83       	std	Y+4, r17	; 0x04
    1466:	0b 83       	std	Y+3, r16	; 0x03
    1468:	2a 38       	cpi	r18, 0x8A	; 138
    146a:	31 05       	cpc	r19, r1
    146c:	41 05       	cpc	r20, r1
    146e:	51 05       	cpc	r21, r1
    1470:	61 05       	cpc	r22, r1
    1472:	71 05       	cpc	r23, r1
    1474:	81 05       	cpc	r24, r1
    1476:	91 05       	cpc	r25, r1
    1478:	11 f0       	breq	.+4      	; 0x147e <__year_to_secs+0x2e>
    147a:	0c f0       	brlt	.+2      	; 0x147e <__year_to_secs+0x2e>
    147c:	42 c0       	rjmp	.+132    	; 0x1502 <__year_to_secs+0xb2>
    147e:	f9 01       	movw	r30, r18
    1480:	e4 54       	subi	r30, 0x44	; 68
    1482:	f1 09       	sbc	r31, r1
    1484:	f5 95       	asr	r31
    1486:	e7 95       	ror	r30
    1488:	f5 95       	asr	r31
    148a:	e7 95       	ror	r30
    148c:	c9 01       	movw	r24, r18
    148e:	83 70       	andi	r24, 0x03	; 3
    1490:	99 27       	eor	r25, r25
    1492:	89 2b       	or	r24, r25
    1494:	51 f4       	brne	.+20     	; 0x14aa <__year_to_secs+0x5a>
    1496:	31 97       	sbiw	r30, 0x01	; 1
    1498:	01 15       	cp	r16, r1
    149a:	11 05       	cpc	r17, r1
    149c:	69 f0       	breq	.+26     	; 0x14b8 <__year_to_secs+0x68>
    149e:	81 e0       	ldi	r24, 0x01	; 1
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	d8 01       	movw	r26, r16
    14a4:	8d 93       	st	X+, r24
    14a6:	9c 93       	st	X, r25
    14a8:	07 c0       	rjmp	.+14     	; 0x14b8 <__year_to_secs+0x68>
    14aa:	8b 81       	ldd	r24, Y+3	; 0x03
    14ac:	9c 81       	ldd	r25, Y+4	; 0x04
    14ae:	00 97       	sbiw	r24, 0x00	; 0
    14b0:	19 f0       	breq	.+6      	; 0x14b8 <__year_to_secs+0x68>
    14b2:	dc 01       	movw	r26, r24
    14b4:	1d 92       	st	X+, r1
    14b6:	1c 92       	st	X, r1
    14b8:	d9 01       	movw	r26, r18
    14ba:	a6 54       	subi	r26, 0x46	; 70
    14bc:	b1 09       	sbc	r27, r1
    14be:	20 e8       	ldi	r18, 0x80	; 128
    14c0:	33 e3       	ldi	r19, 0x33	; 51
    14c2:	41 ee       	ldi	r20, 0xE1	; 225
    14c4:	51 e0       	ldi	r21, 0x01	; 1
    14c6:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <__mulshisi3>
    14ca:	6b 01       	movw	r12, r22
    14cc:	7c 01       	movw	r14, r24
    14ce:	df 01       	movw	r26, r30
    14d0:	20 e8       	ldi	r18, 0x80	; 128
    14d2:	31 e5       	ldi	r19, 0x51	; 81
    14d4:	41 e0       	ldi	r20, 0x01	; 1
    14d6:	50 e0       	ldi	r21, 0x00	; 0
    14d8:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <__mulshisi3>
    14dc:	dc 01       	movw	r26, r24
    14de:	cb 01       	movw	r24, r22
    14e0:	8c 0d       	add	r24, r12
    14e2:	9d 1d       	adc	r25, r13
    14e4:	ae 1d       	adc	r26, r14
    14e6:	bf 1d       	adc	r27, r15
    14e8:	9c 01       	movw	r18, r24
    14ea:	ad 01       	movw	r20, r26
    14ec:	6c 01       	movw	r12, r24
    14ee:	7d 01       	movw	r14, r26
    14f0:	ff 0c       	add	r15, r15
    14f2:	cc 08       	sbc	r12, r12
    14f4:	dc 2c       	mov	r13, r12
    14f6:	76 01       	movw	r14, r12
    14f8:	ac 2d       	mov	r26, r12
    14fa:	fc 2d       	mov	r31, r12
    14fc:	ec 2d       	mov	r30, r12
    14fe:	9c 2d       	mov	r25, r12
    1500:	cb c0       	rjmp	.+406    	; 0x1698 <__year_to_secs+0x248>
    1502:	eb 81       	ldd	r30, Y+3	; 0x03
    1504:	fc 81       	ldd	r31, Y+4	; 0x04
    1506:	ef 2b       	or	r30, r31
    1508:	31 f4       	brne	.+12     	; 0x1516 <__year_to_secs+0xc6>
    150a:	1a 82       	std	Y+2, r1	; 0x02
    150c:	19 82       	std	Y+1, r1	; 0x01
    150e:	ce 01       	movw	r24, r28
    1510:	01 96       	adiw	r24, 0x01	; 1
    1512:	9c 83       	std	Y+4, r25	; 0x04
    1514:	8b 83       	std	Y+3, r24	; 0x03
    1516:	c4 01       	movw	r24, r8
    1518:	84 56       	subi	r24, 0x64	; 100
    151a:	91 09       	sbc	r25, r1
    151c:	60 e9       	ldi	r22, 0x90	; 144
    151e:	71 e0       	ldi	r23, 0x01	; 1
    1520:	0e 94 52 25 	call	0x4aa4	; 0x4aa4 <__divmodhi4>
    1524:	7e 83       	std	Y+6, r23	; 0x06
    1526:	6d 83       	std	Y+5, r22	; 0x05
    1528:	94 01       	movw	r18, r8
    152a:	a5 01       	movw	r20, r10
    152c:	b6 01       	movw	r22, r12
    152e:	c7 01       	movw	r24, r14
    1530:	ac e9       	ldi	r26, 0x9C	; 156
    1532:	0e 94 53 27 	call	0x4ea6	; 0x4ea6 <__adddi3_s8>
    1536:	19 01       	movw	r2, r18
    1538:	2a 01       	movw	r4, r20
    153a:	3b 01       	movw	r6, r22
    153c:	8f 83       	std	Y+7, r24	; 0x07
    153e:	98 87       	std	Y+8, r25	; 0x08
    1540:	70 e9       	ldi	r23, 0x90	; 144
    1542:	a7 2e       	mov	r10, r23
    1544:	bb 24       	eor	r11, r11
    1546:	b3 94       	inc	r11
    1548:	c1 2c       	mov	r12, r1
    154a:	d1 2c       	mov	r13, r1
    154c:	e1 2c       	mov	r14, r1
    154e:	f1 2c       	mov	r15, r1
    1550:	00 e0       	ldi	r16, 0x00	; 0
    1552:	10 e0       	ldi	r17, 0x00	; 0
    1554:	91 01       	movw	r18, r2
    1556:	a2 01       	movw	r20, r4
    1558:	b3 01       	movw	r22, r6
    155a:	0e 94 3c 20 	call	0x4078	; 0x4078 <__moddi3>
    155e:	c9 01       	movw	r24, r18
    1560:	00 97       	sbiw	r24, 0x00	; 0
    1562:	59 f4       	brne	.+22     	; 0x157a <__year_to_secs+0x12a>
    1564:	81 e0       	ldi	r24, 0x01	; 1
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	ab 81       	ldd	r26, Y+3	; 0x03
    156a:	bc 81       	ldd	r27, Y+4	; 0x04
    156c:	8d 93       	st	X+, r24
    156e:	9c 93       	st	X, r25
    1570:	20 e0       	ldi	r18, 0x00	; 0
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	40 e0       	ldi	r20, 0x00	; 0
    1576:	50 e0       	ldi	r21, 0x00	; 0
    1578:	33 c0       	rjmp	.+102    	; 0x15e0 <__year_to_secs+0x190>
    157a:	28 3c       	cpi	r18, 0xC8	; 200
    157c:	31 05       	cpc	r19, r1
    157e:	6c f0       	brlt	.+26     	; 0x159a <__year_to_secs+0x14a>
    1580:	2c 32       	cpi	r18, 0x2C	; 44
    1582:	31 40       	sbci	r19, 0x01	; 1
    1584:	2c f0       	brlt	.+10     	; 0x1590 <__year_to_secs+0x140>
    1586:	8c 52       	subi	r24, 0x2C	; 44
    1588:	91 40       	sbci	r25, 0x01	; 1
    158a:	43 e0       	ldi	r20, 0x03	; 3
    158c:	50 e0       	ldi	r21, 0x00	; 0
    158e:	0c c0       	rjmp	.+24     	; 0x15a8 <__year_to_secs+0x158>
    1590:	88 5c       	subi	r24, 0xC8	; 200
    1592:	91 09       	sbc	r25, r1
    1594:	42 e0       	ldi	r20, 0x02	; 2
    1596:	50 e0       	ldi	r21, 0x00	; 0
    1598:	07 c0       	rjmp	.+14     	; 0x15a8 <__year_to_secs+0x158>
    159a:	24 36       	cpi	r18, 0x64	; 100
    159c:	31 05       	cpc	r19, r1
    159e:	6c f0       	brlt	.+26     	; 0x15ba <__year_to_secs+0x16a>
    15a0:	84 56       	subi	r24, 0x64	; 100
    15a2:	91 09       	sbc	r25, r1
    15a4:	41 e0       	ldi	r20, 0x01	; 1
    15a6:	50 e0       	ldi	r21, 0x00	; 0
    15a8:	00 97       	sbiw	r24, 0x00	; 0
    15aa:	49 f4       	brne	.+18     	; 0x15be <__year_to_secs+0x16e>
    15ac:	eb 81       	ldd	r30, Y+3	; 0x03
    15ae:	fc 81       	ldd	r31, Y+4	; 0x04
    15b0:	11 82       	std	Z+1, r1	; 0x01
    15b2:	10 82       	st	Z, r1
    15b4:	20 e0       	ldi	r18, 0x00	; 0
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	13 c0       	rjmp	.+38     	; 0x15e0 <__year_to_secs+0x190>
    15ba:	40 e0       	ldi	r20, 0x00	; 0
    15bc:	50 e0       	ldi	r21, 0x00	; 0
    15be:	9c 01       	movw	r18, r24
    15c0:	36 95       	lsr	r19
    15c2:	27 95       	ror	r18
    15c4:	36 95       	lsr	r19
    15c6:	27 95       	ror	r18
    15c8:	83 70       	andi	r24, 0x03	; 3
    15ca:	99 27       	eor	r25, r25
    15cc:	61 e0       	ldi	r22, 0x01	; 1
    15ce:	70 e0       	ldi	r23, 0x00	; 0
    15d0:	89 2b       	or	r24, r25
    15d2:	11 f0       	breq	.+4      	; 0x15d8 <__year_to_secs+0x188>
    15d4:	60 e0       	ldi	r22, 0x00	; 0
    15d6:	70 e0       	ldi	r23, 0x00	; 0
    15d8:	ab 81       	ldd	r26, Y+3	; 0x03
    15da:	bc 81       	ldd	r27, Y+4	; 0x04
    15dc:	6d 93       	st	X+, r22
    15de:	7c 93       	st	X, r23
    15e0:	81 e6       	ldi	r24, 0x61	; 97
    15e2:	ed 81       	ldd	r30, Y+5	; 0x05
    15e4:	fe 81       	ldd	r31, Y+6	; 0x06
    15e6:	8e 9f       	mul	r24, r30
    15e8:	b0 01       	movw	r22, r0
    15ea:	8f 9f       	mul	r24, r31
    15ec:	70 0d       	add	r23, r0
    15ee:	11 24       	eor	r1, r1
    15f0:	e8 e1       	ldi	r30, 0x18	; 24
    15f2:	e4 9f       	mul	r30, r20
    15f4:	c0 01       	movw	r24, r0
    15f6:	e5 9f       	mul	r30, r21
    15f8:	90 0d       	add	r25, r0
    15fa:	11 24       	eor	r1, r1
    15fc:	86 0f       	add	r24, r22
    15fe:	97 1f       	adc	r25, r23
    1600:	ab 81       	ldd	r26, Y+3	; 0x03
    1602:	bc 81       	ldd	r27, Y+4	; 0x04
    1604:	4d 91       	ld	r20, X+
    1606:	5c 91       	ld	r21, X
    1608:	84 1b       	sub	r24, r20
    160a:	95 0b       	sbc	r25, r21
    160c:	82 0f       	add	r24, r18
    160e:	93 1f       	adc	r25, r19
    1610:	e9 2f       	mov	r30, r25
    1612:	ee 0f       	add	r30, r30
    1614:	ee 0b       	sbc	r30, r30
    1616:	20 e8       	ldi	r18, 0x80	; 128
    1618:	a2 2e       	mov	r10, r18
    161a:	31 e5       	ldi	r19, 0x51	; 81
    161c:	b3 2e       	mov	r11, r19
    161e:	cc 24       	eor	r12, r12
    1620:	c3 94       	inc	r12
    1622:	d1 2c       	mov	r13, r1
    1624:	e1 2c       	mov	r14, r1
    1626:	f1 2c       	mov	r15, r1
    1628:	00 e0       	ldi	r16, 0x00	; 0
    162a:	10 e0       	ldi	r17, 0x00	; 0
    162c:	9c 01       	movw	r18, r24
    162e:	4e 2f       	mov	r20, r30
    1630:	5e 2f       	mov	r21, r30
    1632:	6e 2f       	mov	r22, r30
    1634:	7e 2f       	mov	r23, r30
    1636:	8e 2f       	mov	r24, r30
    1638:	9e 2f       	mov	r25, r30
    163a:	0e 94 48 1b 	call	0x3690	; 0x3690 <__muldi3>
    163e:	92 2e       	mov	r9, r18
    1640:	83 2e       	mov	r8, r19
    1642:	4b 83       	std	Y+3, r20	; 0x03
    1644:	5d 83       	std	Y+5, r21	; 0x05
    1646:	69 87       	std	Y+9, r22	; 0x09
    1648:	7a 87       	std	Y+10, r23	; 0x0a
    164a:	8b 87       	std	Y+11, r24	; 0x0b
    164c:	9c 87       	std	Y+12, r25	; 0x0c
    164e:	43 e3       	ldi	r20, 0x33	; 51
    1650:	b4 2e       	mov	r11, r20
    1652:	51 ee       	ldi	r21, 0xE1	; 225
    1654:	c5 2e       	mov	r12, r21
    1656:	dd 24       	eor	r13, r13
    1658:	d3 94       	inc	r13
    165a:	91 01       	movw	r18, r2
    165c:	a2 01       	movw	r20, r4
    165e:	b3 01       	movw	r22, r6
    1660:	8f 81       	ldd	r24, Y+7	; 0x07
    1662:	98 85       	ldd	r25, Y+8	; 0x08
    1664:	0e 94 48 1b 	call	0x3690	; 0x3690 <__muldi3>
    1668:	59 01       	movw	r10, r18
    166a:	6a 01       	movw	r12, r20
    166c:	7b 01       	movw	r14, r22
    166e:	8c 01       	movw	r16, r24
    1670:	29 2d       	mov	r18, r9
    1672:	38 2d       	mov	r19, r8
    1674:	4b 81       	ldd	r20, Y+3	; 0x03
    1676:	5d 81       	ldd	r21, Y+5	; 0x05
    1678:	69 85       	ldd	r22, Y+9	; 0x09
    167a:	7a 85       	ldd	r23, Y+10	; 0x0a
    167c:	8b 85       	ldd	r24, Y+11	; 0x0b
    167e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1680:	0e 94 ba 27 	call	0x4f74	; 0x4f74 <__adddi3>
    1684:	3b 56       	subi	r19, 0x6B	; 107
    1686:	41 49       	sbci	r20, 0x91	; 145
    1688:	57 4c       	sbci	r21, 0xC7	; 199
    168a:	6f 4f       	sbci	r22, 0xFF	; 255
    168c:	7f 4f       	sbci	r23, 0xFF	; 255
    168e:	8f 4f       	sbci	r24, 0xFF	; 255
    1690:	9f 4f       	sbci	r25, 0xFF	; 255
    1692:	a6 2f       	mov	r26, r22
    1694:	f7 2f       	mov	r31, r23
    1696:	e8 2f       	mov	r30, r24
    1698:	6a 2f       	mov	r22, r26
    169a:	7f 2f       	mov	r23, r31
    169c:	8e 2f       	mov	r24, r30
    169e:	2c 96       	adiw	r28, 0x0c	; 12
    16a0:	e2 e1       	ldi	r30, 0x12	; 18
    16a2:	0c 94 b1 23 	jmp	0x4762	; 0x4762 <__epilogue_restores__>

Disassembly of section .text.__month_to_secs:

0000467e <__month_to_secs>:
    467e:	cf 93       	push	r28
    4680:	df 93       	push	r29
    4682:	9c 01       	movw	r18, r24
    4684:	eb 01       	movw	r28, r22
    4686:	88 0f       	add	r24, r24
    4688:	99 1f       	adc	r25, r25
    468a:	88 0f       	add	r24, r24
    468c:	99 1f       	adc	r25, r25
    468e:	09 2e       	mov	r0, r25
    4690:	00 0c       	add	r0, r0
    4692:	aa 0b       	sbc	r26, r26
    4694:	85 58       	subi	r24, 0x85	; 133
    4696:	9d 4f       	sbci	r25, 0xFD	; 253
    4698:	af 4f       	sbci	r26, 0xFF	; 255
    469a:	fc 01       	movw	r30, r24
    469c:	5a 2f       	mov	r21, r26
    469e:	0e 94 47 27 	call	0x4e8e	; 0x4e8e <__xload_4>
    46a2:	cd 2b       	or	r28, r29
    46a4:	39 f0       	breq	.+14     	; 0x46b4 <__month_to_secs+0x36>
    46a6:	22 30       	cpi	r18, 0x02	; 2
    46a8:	31 05       	cpc	r19, r1
    46aa:	24 f0       	brlt	.+8      	; 0x46b4 <__month_to_secs+0x36>
    46ac:	60 58       	subi	r22, 0x80	; 128
    46ae:	7e 4a       	sbci	r23, 0xAE	; 174
    46b0:	8e 4f       	sbci	r24, 0xFE	; 254
    46b2:	9f 4f       	sbci	r25, 0xFF	; 255
    46b4:	df 91       	pop	r29
    46b6:	cf 91       	pop	r28
    46b8:	08 95       	ret

Disassembly of section .text.__secs_to_tm:

000003b8 <__secs_to_tm>:
 3b8:	a6 e1       	ldi	r26, 0x16	; 22
 3ba:	b0 e0       	ldi	r27, 0x00	; 0
 3bc:	e2 ee       	ldi	r30, 0xE2	; 226
 3be:	f1 e0       	ldi	r31, 0x01	; 1
 3c0:	0c 94 7a 23 	jmp	0x46f4	; 0x46f4 <__prologue_saves__>
 3c4:	79 01       	movw	r14, r18
 3c6:	d4 2e       	mov	r13, r20
 3c8:	c5 2e       	mov	r12, r21
 3ca:	b6 2f       	mov	r27, r22
 3cc:	a7 2f       	mov	r26, r23
 3ce:	f8 2f       	mov	r31, r24
 3d0:	b9 2e       	mov	r11, r25
 3d2:	40 58       	subi	r20, 0x80	; 128
 3d4:	5d 4b       	sbci	r21, 0xBD	; 189
 3d6:	6e 40       	sbci	r22, 0x0E	; 14
 3d8:	7f 4f       	sbci	r23, 0xFF	; 255
 3da:	8f 4f       	sbci	r24, 0xFF	; 255
 3dc:	9f 4f       	sbci	r25, 0xFF	; 255
 3de:	21 15       	cp	r18, r1
 3e0:	3b 47       	sbci	r19, 0x7B	; 123
 3e2:	4d 41       	sbci	r20, 0x1D	; 29
 3e4:	53 48       	sbci	r21, 0x83	; 131
 3e6:	62 4e       	sbci	r22, 0xE2	; 226
 3e8:	71 40       	sbci	r23, 0x01	; 1
 3ea:	81 05       	cpc	r24, r1
 3ec:	91 05       	cpc	r25, r1
 3ee:	11 f0       	breq	.+4      	; 0x3f4 <__secs_to_tm+0x3c>
 3f0:	08 f0       	brcs	.+2      	; 0x3f4 <__secs_to_tm+0x3c>
 3f2:	08 c2       	rjmp	.+1040   	; 0x804 <__EEPROM_REGION_LENGTH__+0x4>
 3f4:	18 8b       	std	Y+16, r17	; 0x10
 3f6:	0f 87       	std	Y+15, r16	; 0x0f
 3f8:	9b 2d       	mov	r25, r11
 3fa:	8f 2f       	mov	r24, r31
 3fc:	7a 2f       	mov	r23, r26
 3fe:	6b 2f       	mov	r22, r27
 400:	5c 2d       	mov	r21, r12
 402:	4d 2d       	mov	r20, r13
 404:	97 01       	movw	r18, r14
 406:	20 58       	subi	r18, 0x80	; 128
 408:	3d 45       	sbci	r19, 0x5D	; 93
 40a:	4c 4b       	sbci	r20, 0xBC	; 188
 40c:	58 43       	sbci	r21, 0x38	; 56
 40e:	61 09       	sbc	r22, r1
 410:	71 09       	sbc	r23, r1
 412:	81 09       	sbc	r24, r1
 414:	91 09       	sbc	r25, r1
 416:	19 01       	movw	r2, r18
 418:	4d 83       	std	Y+5, r20	; 0x05
 41a:	59 87       	std	Y+9, r21	; 0x09
 41c:	6d 87       	std	Y+13, r22	; 0x0d
 41e:	79 83       	std	Y+1, r23	; 0x01
 420:	89 8b       	std	Y+17, r24	; 0x11
 422:	9a 8b       	std	Y+18, r25	; 0x12
 424:	f0 e8       	ldi	r31, 0x80	; 128
 426:	af 2e       	mov	r10, r31
 428:	a1 e5       	ldi	r26, 0x51	; 81
 42a:	ba 2e       	mov	r11, r26
 42c:	cc 24       	eor	r12, r12
 42e:	c3 94       	inc	r12
 430:	d1 2c       	mov	r13, r1
 432:	e1 2c       	mov	r14, r1
 434:	f1 2c       	mov	r15, r1
 436:	00 e0       	ldi	r16, 0x00	; 0
 438:	10 e0       	ldi	r17, 0x00	; 0
 43a:	0e 94 3e 20 	call	0x407c	; 0x407c <__divdi3>
 43e:	29 01       	movw	r4, r18
 440:	3a 01       	movw	r6, r20
 442:	4b 01       	movw	r8, r22
 444:	8e 8b       	std	Y+22, r24	; 0x16
 446:	9b 8b       	std	Y+19, r25	; 0x13
 448:	91 01       	movw	r18, r2
 44a:	4d 81       	ldd	r20, Y+5	; 0x05
 44c:	59 85       	ldd	r21, Y+9	; 0x09
 44e:	6d 85       	ldd	r22, Y+13	; 0x0d
 450:	79 81       	ldd	r23, Y+1	; 0x01
 452:	89 89       	ldd	r24, Y+17	; 0x11
 454:	9a 89       	ldd	r25, Y+18	; 0x12
 456:	0e 94 3c 20 	call	0x4078	; 0x4078 <__moddi3>
 45a:	2d 83       	std	Y+5, r18	; 0x05
 45c:	3e 83       	std	Y+6, r19	; 0x06
 45e:	4f 83       	std	Y+7, r20	; 0x07
 460:	58 87       	std	Y+8, r21	; 0x08
 462:	8d 81       	ldd	r24, Y+5	; 0x05
 464:	9e 81       	ldd	r25, Y+6	; 0x06
 466:	af 81       	ldd	r26, Y+7	; 0x07
 468:	b8 85       	ldd	r27, Y+8	; 0x08
 46a:	b7 ff       	sbrs	r27, 7
 46c:	15 c0       	rjmp	.+42     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
 46e:	80 58       	subi	r24, 0x80	; 128
 470:	9e 4a       	sbci	r25, 0xAE	; 174
 472:	ae 4f       	sbci	r26, 0xFE	; 254
 474:	bf 4f       	sbci	r27, 0xFF	; 255
 476:	8d 83       	std	Y+5, r24	; 0x05
 478:	9e 83       	std	Y+6, r25	; 0x06
 47a:	af 83       	std	Y+7, r26	; 0x07
 47c:	b8 87       	std	Y+8, r27	; 0x08
 47e:	92 01       	movw	r18, r4
 480:	a3 01       	movw	r20, r6
 482:	b4 01       	movw	r22, r8
 484:	8e 89       	ldd	r24, Y+22	; 0x16
 486:	9b 89       	ldd	r25, Y+19	; 0x13
 488:	af ef       	ldi	r26, 0xFF	; 255
 48a:	0e 94 53 27 	call	0x4ea6	; 0x4ea6 <__adddi3_s8>
 48e:	29 01       	movw	r4, r18
 490:	3a 01       	movw	r6, r20
 492:	4b 01       	movw	r8, r22
 494:	8e 8b       	std	Y+22, r24	; 0x16
 496:	9b 8b       	std	Y+19, r25	; 0x13
 498:	92 01       	movw	r18, r4
 49a:	a3 01       	movw	r20, r6
 49c:	b4 01       	movw	r22, r8
 49e:	8e 89       	ldd	r24, Y+22	; 0x16
 4a0:	9b 89       	ldd	r25, Y+19	; 0x13
 4a2:	a3 e0       	ldi	r26, 0x03	; 3
 4a4:	0e 94 53 27 	call	0x4ea6	; 0x4ea6 <__adddi3_s8>
 4a8:	e7 e0       	ldi	r30, 0x07	; 7
 4aa:	ae 2e       	mov	r10, r30
 4ac:	b1 2c       	mov	r11, r1
 4ae:	c1 2c       	mov	r12, r1
 4b0:	d1 2c       	mov	r13, r1
 4b2:	e1 2c       	mov	r14, r1
 4b4:	f1 2c       	mov	r15, r1
 4b6:	00 e0       	ldi	r16, 0x00	; 0
 4b8:	10 e0       	ldi	r17, 0x00	; 0
 4ba:	0e 94 3c 20 	call	0x4078	; 0x4078 <__moddi3>
 4be:	2d 87       	std	Y+13, r18	; 0x0d
 4c0:	3e 87       	std	Y+14, r19	; 0x0e
 4c2:	ad 85       	ldd	r26, Y+13	; 0x0d
 4c4:	be 85       	ldd	r27, Y+14	; 0x0e
 4c6:	b7 ff       	sbrs	r27, 7
 4c8:	03 c0       	rjmp	.+6      	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
 4ca:	17 96       	adiw	r26, 0x07	; 7
 4cc:	be 87       	std	Y+14, r27	; 0x0e
 4ce:	ad 87       	std	Y+13, r26	; 0x0d
 4d0:	51 eb       	ldi	r21, 0xB1	; 177
 4d2:	a5 2e       	mov	r10, r21
 4d4:	6a e3       	ldi	r22, 0x3A	; 58
 4d6:	b6 2e       	mov	r11, r22
 4d8:	72 e0       	ldi	r23, 0x02	; 2
 4da:	c7 2e       	mov	r12, r23
 4dc:	d1 2c       	mov	r13, r1
 4de:	e1 2c       	mov	r14, r1
 4e0:	f1 2c       	mov	r15, r1
 4e2:	00 e0       	ldi	r16, 0x00	; 0
 4e4:	10 e0       	ldi	r17, 0x00	; 0
 4e6:	92 01       	movw	r18, r4
 4e8:	a3 01       	movw	r20, r6
 4ea:	b4 01       	movw	r22, r8
 4ec:	8e 89       	ldd	r24, Y+22	; 0x16
 4ee:	9b 89       	ldd	r25, Y+19	; 0x13
 4f0:	0e 94 3e 20 	call	0x407c	; 0x407c <__divdi3>
 4f4:	29 87       	std	Y+9, r18	; 0x09
 4f6:	3a 87       	std	Y+10, r19	; 0x0a
 4f8:	4b 87       	std	Y+11, r20	; 0x0b
 4fa:	5c 87       	std	Y+12, r21	; 0x0c
 4fc:	92 01       	movw	r18, r4
 4fe:	a3 01       	movw	r20, r6
 500:	b4 01       	movw	r22, r8
 502:	8e 89       	ldd	r24, Y+22	; 0x16
 504:	9b 89       	ldd	r25, Y+19	; 0x13
 506:	0e 94 3c 20 	call	0x4078	; 0x4078 <__moddi3>
 50a:	82 2e       	mov	r8, r18
 50c:	93 2e       	mov	r9, r19
 50e:	a4 2e       	mov	r10, r20
 510:	b5 2e       	mov	r11, r21
 512:	b7 fe       	sbrs	r11, 7
 514:	12 c0       	rjmp	.+36     	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
 516:	b1 eb       	ldi	r27, 0xB1	; 177
 518:	8b 0e       	add	r8, r27
 51a:	ba e3       	ldi	r27, 0x3A	; 58
 51c:	9b 1e       	adc	r9, r27
 51e:	b2 e0       	ldi	r27, 0x02	; 2
 520:	ab 1e       	adc	r10, r27
 522:	b1 1c       	adc	r11, r1
 524:	89 85       	ldd	r24, Y+9	; 0x09
 526:	9a 85       	ldd	r25, Y+10	; 0x0a
 528:	ab 85       	ldd	r26, Y+11	; 0x0b
 52a:	bc 85       	ldd	r27, Y+12	; 0x0c
 52c:	01 97       	sbiw	r24, 0x01	; 1
 52e:	a1 09       	sbc	r26, r1
 530:	b1 09       	sbc	r27, r1
 532:	89 87       	std	Y+9, r24	; 0x09
 534:	9a 87       	std	Y+10, r25	; 0x0a
 536:	ab 87       	std	Y+11, r26	; 0x0b
 538:	bc 87       	std	Y+12, r27	; 0x0c
 53a:	c5 01       	movw	r24, r10
 53c:	b4 01       	movw	r22, r8
 53e:	2c ea       	ldi	r18, 0xAC	; 172
 540:	3e e8       	ldi	r19, 0x8E	; 142
 542:	40 e0       	ldi	r20, 0x00	; 0
 544:	50 e0       	ldi	r21, 0x00	; 0
 546:	0e 94 7c 24 	call	0x48f8	; 0x48f8 <__divmodsi4>
 54a:	69 01       	movw	r12, r18
 54c:	7a 01       	movw	r14, r20
 54e:	24 30       	cpi	r18, 0x04	; 4
 550:	31 05       	cpc	r19, r1
 552:	41 05       	cpc	r20, r1
 554:	51 05       	cpc	r21, r1
 556:	29 f4       	brne	.+10     	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
 558:	43 e0       	ldi	r20, 0x03	; 3
 55a:	c4 2e       	mov	r12, r20
 55c:	d1 2c       	mov	r13, r1
 55e:	e1 2c       	mov	r14, r1
 560:	f1 2c       	mov	r15, r1
 562:	a4 e5       	ldi	r26, 0x54	; 84
 564:	b1 e7       	ldi	r27, 0x71	; 113
 566:	a7 01       	movw	r20, r14
 568:	96 01       	movw	r18, r12
 56a:	0e 94 df 27 	call	0x4fbe	; 0x4fbe <__mulohisi3>
 56e:	2b 01       	movw	r4, r22
 570:	3c 01       	movw	r6, r24
 572:	48 0c       	add	r4, r8
 574:	59 1c       	adc	r5, r9
 576:	6a 1c       	adc	r6, r10
 578:	7b 1c       	adc	r7, r11
 57a:	c3 01       	movw	r24, r6
 57c:	b2 01       	movw	r22, r4
 57e:	25 eb       	ldi	r18, 0xB5	; 181
 580:	35 e0       	ldi	r19, 0x05	; 5
 582:	40 e0       	ldi	r20, 0x00	; 0
 584:	50 e0       	ldi	r21, 0x00	; 0
 586:	0e 94 7c 24 	call	0x48f8	; 0x48f8 <__divmodsi4>
 58a:	49 01       	movw	r8, r18
 58c:	5a 01       	movw	r10, r20
 58e:	29 31       	cpi	r18, 0x19	; 25
 590:	31 05       	cpc	r19, r1
 592:	41 05       	cpc	r20, r1
 594:	51 05       	cpc	r21, r1
 596:	29 f4       	brne	.+10     	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
 598:	38 e1       	ldi	r19, 0x18	; 24
 59a:	83 2e       	mov	r8, r19
 59c:	91 2c       	mov	r9, r1
 59e:	a1 2c       	mov	r10, r1
 5a0:	b1 2c       	mov	r11, r1
 5a2:	ab e4       	ldi	r26, 0x4B	; 75
 5a4:	ba ef       	ldi	r27, 0xFA	; 250
 5a6:	a5 01       	movw	r20, r10
 5a8:	94 01       	movw	r18, r8
 5aa:	0e 94 df 27 	call	0x4fbe	; 0x4fbe <__mulohisi3>
 5ae:	46 0e       	add	r4, r22
 5b0:	57 1e       	adc	r5, r23
 5b2:	68 1e       	adc	r6, r24
 5b4:	79 1e       	adc	r7, r25
 5b6:	c3 01       	movw	r24, r6
 5b8:	b2 01       	movw	r22, r4
 5ba:	2d e6       	ldi	r18, 0x6D	; 109
 5bc:	31 e0       	ldi	r19, 0x01	; 1
 5be:	40 e0       	ldi	r20, 0x00	; 0
 5c0:	50 e0       	ldi	r21, 0x00	; 0
 5c2:	0e 94 7c 24 	call	0x48f8	; 0x48f8 <__divmodsi4>
 5c6:	29 83       	std	Y+1, r18	; 0x01
 5c8:	3a 83       	std	Y+2, r19	; 0x02
 5ca:	4b 83       	std	Y+3, r20	; 0x03
 5cc:	5c 83       	std	Y+4, r21	; 0x04
 5ce:	24 30       	cpi	r18, 0x04	; 4
 5d0:	31 05       	cpc	r19, r1
 5d2:	41 05       	cpc	r20, r1
 5d4:	51 05       	cpc	r21, r1
 5d6:	41 f4       	brne	.+16     	; 0x5e8 <__LOCK_REGION_LENGTH__+0x1e8>
 5d8:	83 e0       	ldi	r24, 0x03	; 3
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	a0 e0       	ldi	r26, 0x00	; 0
 5de:	b0 e0       	ldi	r27, 0x00	; 0
 5e0:	89 83       	std	Y+1, r24	; 0x01
 5e2:	9a 83       	std	Y+2, r25	; 0x02
 5e4:	ab 83       	std	Y+3, r26	; 0x03
 5e6:	bc 83       	std	Y+4, r27	; 0x04
 5e8:	a3 e9       	ldi	r26, 0x93	; 147
 5ea:	be ef       	ldi	r27, 0xFE	; 254
 5ec:	29 81       	ldd	r18, Y+1	; 0x01
 5ee:	3a 81       	ldd	r19, Y+2	; 0x02
 5f0:	4b 81       	ldd	r20, Y+3	; 0x03
 5f2:	5c 81       	ldd	r21, Y+4	; 0x04
 5f4:	0e 94 df 27 	call	0x4fbe	; 0x4fbe <__mulohisi3>
 5f8:	46 0e       	add	r4, r22
 5fa:	57 1e       	adc	r5, r23
 5fc:	68 1e       	adc	r6, r24
 5fe:	79 1e       	adc	r7, r25
 600:	23 2b       	or	r18, r19
 602:	24 2b       	or	r18, r20
 604:	25 2b       	or	r18, r21
 606:	81 f4       	brne	.+32     	; 0x628 <__LOCK_REGION_LENGTH__+0x228>
 608:	81 14       	cp	r8, r1
 60a:	91 04       	cpc	r9, r1
 60c:	a1 04       	cpc	r10, r1
 60e:	b1 04       	cpc	r11, r1
 610:	71 f4       	brne	.+28     	; 0x62e <__LOCK_REGION_LENGTH__+0x22e>
 612:	31 e0       	ldi	r19, 0x01	; 1
 614:	20 e0       	ldi	r18, 0x00	; 0
 616:	c1 14       	cp	r12, r1
 618:	d1 04       	cpc	r13, r1
 61a:	e1 04       	cpc	r14, r1
 61c:	f1 04       	cpc	r15, r1
 61e:	09 f0       	breq	.+2      	; 0x622 <__LOCK_REGION_LENGTH__+0x222>
 620:	30 e0       	ldi	r19, 0x00	; 0
 622:	83 2f       	mov	r24, r19
 624:	92 2f       	mov	r25, r18
 626:	05 c0       	rjmp	.+10     	; 0x632 <__LOCK_REGION_LENGTH__+0x232>
 628:	80 e0       	ldi	r24, 0x00	; 0
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	02 c0       	rjmp	.+4      	; 0x632 <__LOCK_REGION_LENGTH__+0x232>
 62e:	81 e0       	ldi	r24, 0x01	; 1
 630:	90 e0       	ldi	r25, 0x00	; 0
 632:	12 01       	movw	r2, r4
 634:	ab e3       	ldi	r26, 0x3B	; 59
 636:	2a 0e       	add	r2, r26
 638:	31 1c       	adc	r3, r1
 63a:	28 0e       	add	r2, r24
 63c:	39 1e       	adc	r3, r25
 63e:	9c 01       	movw	r18, r24
 640:	24 59       	subi	r18, 0x94	; 148
 642:	3e 4f       	sbci	r19, 0xFE	; 254
 644:	22 15       	cp	r18, r2
 646:	33 05       	cpc	r19, r3
 648:	24 f4       	brge	.+8      	; 0x652 <__LOCK_REGION_LENGTH__+0x252>
 64a:	83 59       	subi	r24, 0x93	; 147
 64c:	9e 4f       	sbci	r25, 0xFE	; 254
 64e:	28 1a       	sub	r2, r24
 650:	39 0a       	sbc	r3, r25
 652:	92 e0       	ldi	r25, 0x02	; 2
 654:	88 0c       	add	r8, r8
 656:	99 1c       	adc	r9, r9
 658:	aa 1c       	adc	r10, r10
 65a:	bb 1c       	adc	r11, r11
 65c:	9a 95       	dec	r25
 65e:	d1 f7       	brne	.-12     	; 0x654 <__LOCK_REGION_LENGTH__+0x254>
 660:	89 81       	ldd	r24, Y+1	; 0x01
 662:	9a 81       	ldd	r25, Y+2	; 0x02
 664:	ab 81       	ldd	r26, Y+3	; 0x03
 666:	bc 81       	ldd	r27, Y+4	; 0x04
 668:	88 0e       	add	r8, r24
 66a:	99 1e       	adc	r9, r25
 66c:	aa 1e       	adc	r10, r26
 66e:	bb 1e       	adc	r11, r27
 670:	a4 e6       	ldi	r26, 0x64	; 100
 672:	b0 e0       	ldi	r27, 0x00	; 0
 674:	a7 01       	movw	r20, r14
 676:	96 01       	movw	r18, r12
 678:	0e 94 75 27 	call	0x4eea	; 0x4eea <__muluhisi3>
 67c:	86 0e       	add	r8, r22
 67e:	97 1e       	adc	r9, r23
 680:	a8 1e       	adc	r10, r24
 682:	b9 1e       	adc	r11, r25
 684:	d5 01       	movw	r26, r10
 686:	c4 01       	movw	r24, r8
 688:	bb 0f       	add	r27, r27
 68a:	88 0b       	sbc	r24, r24
 68c:	98 2f       	mov	r25, r24
 68e:	dc 01       	movw	r26, r24
 690:	89 83       	std	Y+1, r24	; 0x01
 692:	9a 83       	std	Y+2, r25	; 0x02
 694:	ab 83       	std	Y+3, r26	; 0x03
 696:	bc 83       	std	Y+4, r27	; 0x04
 698:	69 85       	ldd	r22, Y+9	; 0x09
 69a:	7a 85       	ldd	r23, Y+10	; 0x0a
 69c:	8b 85       	ldd	r24, Y+11	; 0x0b
 69e:	9c 85       	ldd	r25, Y+12	; 0x0c
 6a0:	20 e9       	ldi	r18, 0x90	; 144
 6a2:	31 e0       	ldi	r19, 0x01	; 1
 6a4:	40 e0       	ldi	r20, 0x00	; 0
 6a6:	50 e0       	ldi	r21, 0x00	; 0
 6a8:	0e 94 11 27 	call	0x4e22	; 0x4e22 <__mulsidi3>
 6ac:	f2 2f       	mov	r31, r18
 6ae:	e3 2f       	mov	r30, r19
 6b0:	6a 01       	movw	r12, r20
 6b2:	7b 01       	movw	r14, r22
 6b4:	8c 01       	movw	r16, r24
 6b6:	94 01       	movw	r18, r8
 6b8:	a5 01       	movw	r20, r10
 6ba:	69 81       	ldd	r22, Y+1	; 0x01
 6bc:	76 2f       	mov	r23, r22
 6be:	86 2f       	mov	r24, r22
 6c0:	96 2f       	mov	r25, r22
 6c2:	af 2e       	mov	r10, r31
 6c4:	be 2e       	mov	r11, r30
 6c6:	0e 94 ba 27 	call	0x4f74	; 0x4f74 <__adddi3>
 6ca:	49 01       	movw	r8, r18
 6cc:	5a 01       	movw	r10, r20
 6ce:	6b 01       	movw	r12, r22
 6d0:	7c 01       	movw	r14, r24
 6d2:	25 e3       	ldi	r18, 0x35	; 53
 6d4:	33 e0       	ldi	r19, 0x03	; 3
 6d6:	40 e0       	ldi	r20, 0x00	; 0
 6d8:	1a 82       	std	Y+2, r1	; 0x02
 6da:	19 82       	std	Y+1, r1	; 0x01
 6dc:	f9 01       	movw	r30, r18
 6de:	84 91       	lpm	r24, Z
 6e0:	47 fd       	sbrc	r20, 7
 6e2:	80 81       	ld	r24, Z
 6e4:	08 2e       	mov	r0, r24
 6e6:	00 0c       	add	r0, r0
 6e8:	99 0b       	sbc	r25, r25
 6ea:	aa 0b       	sbc	r26, r26
 6ec:	bb 0b       	sbc	r27, r27
 6ee:	2f 5f       	subi	r18, 0xFF	; 255
 6f0:	3f 4f       	sbci	r19, 0xFF	; 255
 6f2:	4f 4f       	sbci	r20, 0xFF	; 255
 6f4:	48 16       	cp	r4, r24
 6f6:	59 06       	cpc	r5, r25
 6f8:	6a 06       	cpc	r6, r26
 6fa:	7b 06       	cpc	r7, r27
 6fc:	54 f0       	brlt	.+20     	; 0x712 <__LOCK_REGION_LENGTH__+0x312>
 6fe:	48 1a       	sub	r4, r24
 700:	59 0a       	sbc	r5, r25
 702:	6a 0a       	sbc	r6, r26
 704:	7b 0a       	sbc	r7, r27
 706:	a9 81       	ldd	r26, Y+1	; 0x01
 708:	ba 81       	ldd	r27, Y+2	; 0x02
 70a:	11 96       	adiw	r26, 0x01	; 1
 70c:	ba 83       	std	Y+2, r27	; 0x02
 70e:	a9 83       	std	Y+1, r26	; 0x01
 710:	e5 cf       	rjmp	.-54     	; 0x6dc <__LOCK_REGION_LENGTH__+0x2dc>
 712:	e9 81       	ldd	r30, Y+1	; 0x01
 714:	fa 81       	ldd	r31, Y+2	; 0x02
 716:	ea 30       	cpi	r30, 0x0A	; 10
 718:	f1 05       	cpc	r31, r1
 71a:	74 f0       	brlt	.+28     	; 0x738 <__LOCK_REGION_LENGTH__+0x338>
 71c:	3c 97       	sbiw	r30, 0x0c	; 12
 71e:	fa 83       	std	Y+2, r31	; 0x02
 720:	e9 83       	std	Y+1, r30	; 0x01
 722:	94 01       	movw	r18, r8
 724:	a5 01       	movw	r20, r10
 726:	b6 01       	movw	r22, r12
 728:	c7 01       	movw	r24, r14
 72a:	a1 e0       	ldi	r26, 0x01	; 1
 72c:	0e 94 53 27 	call	0x4ea6	; 0x4ea6 <__adddi3_s8>
 730:	49 01       	movw	r8, r18
 732:	5a 01       	movw	r10, r20
 734:	6b 01       	movw	r12, r22
 736:	7c 01       	movw	r14, r24
 738:	94 01       	movw	r18, r8
 73a:	a5 01       	movw	r20, r10
 73c:	b6 01       	movw	r22, r12
 73e:	c7 01       	movw	r24, r14
 740:	2c 59       	subi	r18, 0x9C	; 156
 742:	3f 47       	sbci	r19, 0x7F	; 127
 744:	4f 4f       	sbci	r20, 0xFF	; 255
 746:	5f 4f       	sbci	r21, 0xFF	; 255
 748:	6f 4f       	sbci	r22, 0xFF	; 255
 74a:	7f 4f       	sbci	r23, 0xFF	; 255
 74c:	8f 4f       	sbci	r24, 0xFF	; 255
 74e:	9f 4f       	sbci	r25, 0xFF	; 255
 750:	2f 3f       	cpi	r18, 0xFF	; 255
 752:	3f 4f       	sbci	r19, 0xFF	; 255
 754:	41 05       	cpc	r20, r1
 756:	51 05       	cpc	r21, r1
 758:	61 05       	cpc	r22, r1
 75a:	71 05       	cpc	r23, r1
 75c:	81 05       	cpc	r24, r1
 75e:	91 05       	cpc	r25, r1
 760:	11 f0       	breq	.+4      	; 0x766 <__LOCK_REGION_LENGTH__+0x366>
 762:	08 f0       	brcs	.+2      	; 0x766 <__LOCK_REGION_LENGTH__+0x366>
 764:	4f c0       	rjmp	.+158    	; 0x804 <__EEPROM_REGION_LENGTH__+0x4>
 766:	24 e6       	ldi	r18, 0x64	; 100
 768:	82 0e       	add	r8, r18
 76a:	91 1c       	adc	r9, r1
 76c:	af 85       	ldd	r26, Y+15	; 0x0f
 76e:	b8 89       	ldd	r27, Y+16	; 0x10
 770:	1b 96       	adiw	r26, 0x0b	; 11
 772:	9c 92       	st	X, r9
 774:	8e 92       	st	-X, r8
 776:	1a 97       	sbiw	r26, 0x0a	; 10
 778:	e9 81       	ldd	r30, Y+1	; 0x01
 77a:	fa 81       	ldd	r31, Y+2	; 0x02
 77c:	32 96       	adiw	r30, 0x02	; 2
 77e:	19 96       	adiw	r26, 0x09	; 9
 780:	fc 93       	st	X, r31
 782:	ee 93       	st	-X, r30
 784:	18 97       	sbiw	r26, 0x08	; 8
 786:	ff ef       	ldi	r31, 0xFF	; 255
 788:	4f 1a       	sub	r4, r31
 78a:	5f 0a       	sbc	r5, r31
 78c:	17 96       	adiw	r26, 0x07	; 7
 78e:	5c 92       	st	X, r5
 790:	4e 92       	st	-X, r4
 792:	16 97       	sbiw	r26, 0x06	; 6
 794:	8d 85       	ldd	r24, Y+13	; 0x0d
 796:	9e 85       	ldd	r25, Y+14	; 0x0e
 798:	1d 96       	adiw	r26, 0x0d	; 13
 79a:	9c 93       	st	X, r25
 79c:	8e 93       	st	-X, r24
 79e:	1c 97       	sbiw	r26, 0x0c	; 12
 7a0:	1f 96       	adiw	r26, 0x0f	; 15
 7a2:	3c 92       	st	X, r3
 7a4:	2e 92       	st	-X, r2
 7a6:	1e 97       	sbiw	r26, 0x0e	; 14
 7a8:	6d 81       	ldd	r22, Y+5	; 0x05
 7aa:	7e 81       	ldd	r23, Y+6	; 0x06
 7ac:	8f 81       	ldd	r24, Y+7	; 0x07
 7ae:	98 85       	ldd	r25, Y+8	; 0x08
 7b0:	20 e1       	ldi	r18, 0x10	; 16
 7b2:	3e e0       	ldi	r19, 0x0E	; 14
 7b4:	40 e0       	ldi	r20, 0x00	; 0
 7b6:	50 e0       	ldi	r21, 0x00	; 0
 7b8:	0e 94 7c 24 	call	0x48f8	; 0x48f8 <__divmodsi4>
 7bc:	af 85       	ldd	r26, Y+15	; 0x0f
 7be:	b8 89       	ldd	r27, Y+16	; 0x10
 7c0:	15 96       	adiw	r26, 0x05	; 5
 7c2:	3c 93       	st	X, r19
 7c4:	2e 93       	st	-X, r18
 7c6:	14 97       	sbiw	r26, 0x04	; 4
 7c8:	8c e3       	ldi	r24, 0x3C	; 60
 7ca:	c8 2e       	mov	r12, r24
 7cc:	d1 2c       	mov	r13, r1
 7ce:	e1 2c       	mov	r14, r1
 7d0:	f1 2c       	mov	r15, r1
 7d2:	6d 81       	ldd	r22, Y+5	; 0x05
 7d4:	7e 81       	ldd	r23, Y+6	; 0x06
 7d6:	8f 81       	ldd	r24, Y+7	; 0x07
 7d8:	98 85       	ldd	r25, Y+8	; 0x08
 7da:	a7 01       	movw	r20, r14
 7dc:	96 01       	movw	r18, r12
 7de:	0e 94 7c 24 	call	0x48f8	; 0x48f8 <__divmodsi4>
 7e2:	4b 01       	movw	r8, r22
 7e4:	5c 01       	movw	r10, r24
 7e6:	ca 01       	movw	r24, r20
 7e8:	b9 01       	movw	r22, r18
 7ea:	a7 01       	movw	r20, r14
 7ec:	96 01       	movw	r18, r12
 7ee:	0e 94 7c 24 	call	0x48f8	; 0x48f8 <__divmodsi4>
 7f2:	ef 85       	ldd	r30, Y+15	; 0x0f
 7f4:	f8 89       	ldd	r31, Y+16	; 0x10
 7f6:	73 83       	std	Z+3, r23	; 0x03
 7f8:	62 83       	std	Z+2, r22	; 0x02
 7fa:	91 82       	std	Z+1, r9	; 0x01
 7fc:	80 82       	st	Z, r8
 7fe:	80 e0       	ldi	r24, 0x00	; 0
 800:	90 e0       	ldi	r25, 0x00	; 0
 802:	02 c0       	rjmp	.+4      	; 0x808 <__EEPROM_REGION_LENGTH__+0x8>
 804:	8f ef       	ldi	r24, 0xFF	; 255
 806:	9f ef       	ldi	r25, 0xFF	; 255
 808:	66 96       	adiw	r28, 0x16	; 22
 80a:	e2 e1       	ldi	r30, 0x12	; 18
 80c:	0c 94 b1 23 	jmp	0x4762	; 0x4762 <__epilogue_restores__>

Disassembly of section .text.libgcc.div:

00004aa4 <__divmodhi4>:
    4aa4:	97 fb       	bst	r25, 7
    4aa6:	07 2e       	mov	r0, r23
    4aa8:	16 f4       	brtc	.+4      	; 0x4aae <__divmodhi4+0xa>
    4aaa:	00 94       	com	r0
    4aac:	07 d0       	rcall	.+14     	; 0x4abc <__divmodhi4_neg1>
    4aae:	77 fd       	sbrc	r23, 7
    4ab0:	09 d0       	rcall	.+18     	; 0x4ac4 <__divmodhi4_neg2>
    4ab2:	0e 94 3e 25 	call	0x4a7c	; 0x4a7c <__udivmodhi4>
    4ab6:	07 fc       	sbrc	r0, 7
    4ab8:	05 d0       	rcall	.+10     	; 0x4ac4 <__divmodhi4_neg2>
    4aba:	3e f4       	brtc	.+14     	; 0x4aca <__divmodhi4_exit>

00004abc <__divmodhi4_neg1>:
    4abc:	90 95       	com	r25
    4abe:	81 95       	neg	r24
    4ac0:	9f 4f       	sbci	r25, 0xFF	; 255
    4ac2:	08 95       	ret

00004ac4 <__divmodhi4_neg2>:
    4ac4:	70 95       	com	r23
    4ac6:	61 95       	neg	r22
    4ac8:	7f 4f       	sbci	r23, 0xFF	; 255

00004aca <__divmodhi4_exit>:
    4aca:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00003690 <__muldi3>:
    3690:	df 93       	push	r29
    3692:	cf 93       	push	r28
    3694:	1f 93       	push	r17
    3696:	0f 93       	push	r16
    3698:	9a 9d       	mul	r25, r10
    369a:	f0 2d       	mov	r31, r0
    369c:	21 9f       	mul	r18, r17
    369e:	f0 0d       	add	r31, r0
    36a0:	8b 9d       	mul	r24, r11
    36a2:	f0 0d       	add	r31, r0
    36a4:	8a 9d       	mul	r24, r10
    36a6:	e0 2d       	mov	r30, r0
    36a8:	f1 0d       	add	r31, r1
    36aa:	03 9f       	mul	r16, r19
    36ac:	f0 0d       	add	r31, r0
    36ae:	02 9f       	mul	r16, r18
    36b0:	e0 0d       	add	r30, r0
    36b2:	f1 1d       	adc	r31, r1
    36b4:	4e 9d       	mul	r20, r14
    36b6:	e0 0d       	add	r30, r0
    36b8:	f1 1d       	adc	r31, r1
    36ba:	5e 9d       	mul	r21, r14
    36bc:	f0 0d       	add	r31, r0
    36be:	4f 9d       	mul	r20, r15
    36c0:	f0 0d       	add	r31, r0
    36c2:	7f 93       	push	r23
    36c4:	6f 93       	push	r22
    36c6:	bf 92       	push	r11
    36c8:	af 92       	push	r10
    36ca:	5f 93       	push	r21
    36cc:	4f 93       	push	r20
    36ce:	d5 01       	movw	r26, r10
    36d0:	0e 94 02 27 	call	0x4e04	; 0x4e04 <__umulhisi3>
    36d4:	8b 01       	movw	r16, r22
    36d6:	ac 01       	movw	r20, r24
    36d8:	d7 01       	movw	r26, r14
    36da:	0e 94 02 27 	call	0x4e04	; 0x4e04 <__umulhisi3>
    36de:	eb 01       	movw	r28, r22
    36e0:	e8 0f       	add	r30, r24
    36e2:	f9 1f       	adc	r31, r25
    36e4:	d6 01       	movw	r26, r12
    36e6:	0e 94 b1 27 	call	0x4f62	; 0x4f62 <__muldi3_6>
    36ea:	2f 91       	pop	r18
    36ec:	3f 91       	pop	r19
    36ee:	d6 01       	movw	r26, r12
    36f0:	0e 94 02 27 	call	0x4e04	; 0x4e04 <__umulhisi3>
    36f4:	c6 0f       	add	r28, r22
    36f6:	d7 1f       	adc	r29, r23
    36f8:	e8 1f       	adc	r30, r24
    36fa:	f9 1f       	adc	r31, r25
    36fc:	af 91       	pop	r26
    36fe:	bf 91       	pop	r27
    3700:	0e 94 b1 27 	call	0x4f62	; 0x4f62 <__muldi3_6>
    3704:	2f 91       	pop	r18
    3706:	3f 91       	pop	r19
    3708:	0e 94 02 27 	call	0x4e04	; 0x4e04 <__umulhisi3>
    370c:	c6 0f       	add	r28, r22
    370e:	d7 1f       	adc	r29, r23
    3710:	e8 1f       	adc	r30, r24
    3712:	f9 1f       	adc	r31, r25
    3714:	d6 01       	movw	r26, r12
    3716:	0e 94 02 27 	call	0x4e04	; 0x4e04 <__umulhisi3>
    371a:	e6 0f       	add	r30, r22
    371c:	f7 1f       	adc	r31, r23
    371e:	98 01       	movw	r18, r16
    3720:	be 01       	movw	r22, r28
    3722:	cf 01       	movw	r24, r30
    3724:	11 24       	eor	r1, r1
    3726:	0f 91       	pop	r16
    3728:	1f 91       	pop	r17
    372a:	cf 91       	pop	r28
    372c:	df 91       	pop	r29
    372e:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00004f62 <__muldi3_6>:
    4f62:	0e 94 02 27 	call	0x4e04	; 0x4e04 <__umulhisi3>
    4f66:	46 0f       	add	r20, r22
    4f68:	57 1f       	adc	r21, r23
    4f6a:	c8 1f       	adc	r28, r24
    4f6c:	d9 1f       	adc	r29, r25
    4f6e:	08 f4       	brcc	.+2      	; 0x4f72 <__muldi3_6+0x10>
    4f70:	31 96       	adiw	r30, 0x01	; 1
    4f72:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00004e22 <__mulsidi3>:
    4e22:	97 fb       	bst	r25, 7
    4e24:	57 ff       	sbrs	r21, 7
    4e26:	0c 94 79 21 	jmp	0x42f2	; 0x42f2 <__umulsidi3_helper>
    4e2a:	9f 93       	push	r25
    4e2c:	8f 93       	push	r24
    4e2e:	0e 94 79 21 	call	0x42f2	; 0x42f2 <__umulsidi3_helper>
    4e32:	6e 1b       	sub	r22, r30
    4e34:	7f 0b       	sbc	r23, r31
    4e36:	af 91       	pop	r26
    4e38:	bf 91       	pop	r27
    4e3a:	8a 0b       	sbc	r24, r26
    4e3c:	9b 0b       	sbc	r25, r27
    4e3e:	08 95       	ret

Disassembly of section .text.libgcc.mul:

000042f0 <__umulsidi3>:
    42f0:	e8 94       	clt

000042f2 <__umulsidi3_helper>:
    42f2:	df 93       	push	r29
    42f4:	cf 93       	push	r28
    42f6:	fc 01       	movw	r30, r24
    42f8:	db 01       	movw	r26, r22
    42fa:	0e 94 02 27 	call	0x4e04	; 0x4e04 <__umulhisi3>
    42fe:	7f 93       	push	r23
    4300:	6f 93       	push	r22
    4302:	e9 01       	movw	r28, r18
    4304:	9a 01       	movw	r18, r20
    4306:	ac 01       	movw	r20, r24
    4308:	bf 93       	push	r27
    430a:	af 93       	push	r26
    430c:	3f 93       	push	r19
    430e:	2f 93       	push	r18
    4310:	df 01       	movw	r26, r30
    4312:	0e 94 02 27 	call	0x4e04	; 0x4e04 <__umulhisi3>
    4316:	26 f4       	brtc	.+8      	; 0x4320 <__umulsidi3_helper+0x2e>
    4318:	6c 1b       	sub	r22, r28
    431a:	7d 0b       	sbc	r23, r29
    431c:	82 0b       	sbc	r24, r18
    431e:	93 0b       	sbc	r25, r19
    4320:	9e 01       	movw	r18, r28
    4322:	eb 01       	movw	r28, r22
    4324:	fc 01       	movw	r30, r24
    4326:	0e 94 b1 27 	call	0x4f62	; 0x4f62 <__muldi3_6>
    432a:	af 91       	pop	r26
    432c:	bf 91       	pop	r27
    432e:	2f 91       	pop	r18
    4330:	3f 91       	pop	r19
    4332:	0e 94 b1 27 	call	0x4f62	; 0x4f62 <__muldi3_6>
    4336:	be 01       	movw	r22, r28
    4338:	cf 01       	movw	r24, r30
    433a:	f9 01       	movw	r30, r18
    433c:	2f 91       	pop	r18
    433e:	3f 91       	pop	r19
    4340:	cf 91       	pop	r28
    4342:	df 91       	pop	r29
    4344:	08 95       	ret

Disassembly of section .text.libgcc.div:

00004078 <__moddi3>:
    4078:	68 94       	set
    407a:	01 c0       	rjmp	.+2      	; 0x407e <__divdi3_moddi3>

0000407c <__divdi3>:
    407c:	e8 94       	clt

0000407e <__divdi3_moddi3>:
    407e:	f9 2f       	mov	r31, r25
    4080:	f1 2b       	or	r31, r17
    4082:	12 f0       	brmi	.+4      	; 0x4088 <__divdi3_moddi3+0xa>
    4084:	0c 94 23 27 	jmp	0x4e46	; 0x4e46 <__udivdi3_umoddi3>
    4088:	a0 e0       	ldi	r26, 0x00	; 0
    408a:	b0 e0       	ldi	r27, 0x00	; 0
    408c:	ea e4       	ldi	r30, 0x4A	; 74
    408e:	f0 e2       	ldi	r31, 0x20	; 32
    4090:	0c 94 80 23 	jmp	0x4700	; 0x4700 <__prologue_saves__+0xc>
    4094:	09 2e       	mov	r0, r25
    4096:	05 94       	asr	r0
    4098:	22 f4       	brpl	.+8      	; 0x40a2 <__divdi3_moddi3+0x24>
    409a:	0e 94 f2 26 	call	0x4de4	; 0x4de4 <__negdi2>
    409e:	11 23       	and	r17, r17
    40a0:	92 f4       	brpl	.+36     	; 0x40c6 <__divdi3_moddi3+0x48>
    40a2:	f0 e8       	ldi	r31, 0x80	; 128
    40a4:	0f 26       	eor	r0, r31
    40a6:	ff ef       	ldi	r31, 0xFF	; 255
    40a8:	e0 94       	com	r14
    40aa:	f0 94       	com	r15
    40ac:	00 95       	com	r16
    40ae:	10 95       	com	r17
    40b0:	b0 94       	com	r11
    40b2:	c0 94       	com	r12
    40b4:	d0 94       	com	r13
    40b6:	a1 94       	neg	r10
    40b8:	bf 0a       	sbc	r11, r31
    40ba:	cf 0a       	sbc	r12, r31
    40bc:	df 0a       	sbc	r13, r31
    40be:	ef 0a       	sbc	r14, r31
    40c0:	ff 0a       	sbc	r15, r31
    40c2:	0f 0b       	sbc	r16, r31
    40c4:	1f 0b       	sbc	r17, r31
    40c6:	0e 94 f7 1a 	call	0x35ee	; 0x35ee <__udivmod64>
    40ca:	07 fc       	sbrc	r0, 7
    40cc:	0e 94 f2 26 	call	0x4de4	; 0x4de4 <__negdi2>
    40d0:	cd b7       	in	r28, 0x3d	; 61
    40d2:	de b7       	in	r29, 0x3e	; 62
    40d4:	ec e0       	ldi	r30, 0x0C	; 12
    40d6:	0c 94 b7 23 	jmp	0x476e	; 0x476e <__epilogue_restores__+0xc>

Disassembly of section .text.libgcc.div:

00004e40 <__umoddi3>:
    4e40:	68 94       	set
    4e42:	01 c0       	rjmp	.+2      	; 0x4e46 <__udivdi3_umoddi3>

00004e44 <__udivdi3>:
    4e44:	e8 94       	clt

00004e46 <__udivdi3_umoddi3>:
    4e46:	8f 92       	push	r8
    4e48:	9f 92       	push	r9
    4e4a:	cf 93       	push	r28
    4e4c:	df 93       	push	r29
    4e4e:	0e 94 f7 1a 	call	0x35ee	; 0x35ee <__udivmod64>
    4e52:	df 91       	pop	r29
    4e54:	cf 91       	pop	r28
    4e56:	9f 90       	pop	r9
    4e58:	8f 90       	pop	r8
    4e5a:	08 95       	ret

Disassembly of section .text.libgcc.div:

000035ee <__udivmod64>:
    35ee:	88 24       	eor	r8, r8
    35f0:	99 24       	eor	r9, r9
    35f2:	f4 01       	movw	r30, r8
    35f4:	e4 01       	movw	r28, r8
    35f6:	b0 e4       	ldi	r27, 0x40	; 64
    35f8:	9f 93       	push	r25
    35fa:	aa 27       	eor	r26, r26
    35fc:	9a 15       	cp	r25, r10
    35fe:	8b 04       	cpc	r8, r11
    3600:	9c 04       	cpc	r9, r12
    3602:	ed 05       	cpc	r30, r13
    3604:	fe 05       	cpc	r31, r14
    3606:	cf 05       	cpc	r28, r15
    3608:	d0 07       	cpc	r29, r16
    360a:	a1 07       	cpc	r26, r17
    360c:	98 f4       	brcc	.+38     	; 0x3634 <__udivmod64+0x46>
    360e:	ad 2f       	mov	r26, r29
    3610:	dc 2f       	mov	r29, r28
    3612:	cf 2f       	mov	r28, r31
    3614:	fe 2f       	mov	r31, r30
    3616:	e9 2d       	mov	r30, r9
    3618:	98 2c       	mov	r9, r8
    361a:	89 2e       	mov	r8, r25
    361c:	98 2f       	mov	r25, r24
    361e:	87 2f       	mov	r24, r23
    3620:	76 2f       	mov	r23, r22
    3622:	65 2f       	mov	r22, r21
    3624:	54 2f       	mov	r21, r20
    3626:	43 2f       	mov	r20, r19
    3628:	32 2f       	mov	r19, r18
    362a:	22 27       	eor	r18, r18
    362c:	b8 50       	subi	r27, 0x08	; 8
    362e:	31 f7       	brne	.-52     	; 0x35fc <__udivmod64+0xe>
    3630:	bf 91       	pop	r27
    3632:	27 c0       	rjmp	.+78     	; 0x3682 <__udivmod64+0x94>
    3634:	1b 2e       	mov	r1, r27
    3636:	bf 91       	pop	r27
    3638:	bb 27       	eor	r27, r27
    363a:	22 0f       	add	r18, r18
    363c:	33 1f       	adc	r19, r19
    363e:	44 1f       	adc	r20, r20
    3640:	55 1f       	adc	r21, r21
    3642:	66 1f       	adc	r22, r22
    3644:	77 1f       	adc	r23, r23
    3646:	88 1f       	adc	r24, r24
    3648:	99 1f       	adc	r25, r25
    364a:	88 1c       	adc	r8, r8
    364c:	99 1c       	adc	r9, r9
    364e:	ee 1f       	adc	r30, r30
    3650:	ff 1f       	adc	r31, r31
    3652:	cc 1f       	adc	r28, r28
    3654:	dd 1f       	adc	r29, r29
    3656:	aa 1f       	adc	r26, r26
    3658:	bb 1f       	adc	r27, r27
    365a:	8a 14       	cp	r8, r10
    365c:	9b 04       	cpc	r9, r11
    365e:	ec 05       	cpc	r30, r12
    3660:	fd 05       	cpc	r31, r13
    3662:	ce 05       	cpc	r28, r14
    3664:	df 05       	cpc	r29, r15
    3666:	a0 07       	cpc	r26, r16
    3668:	b1 07       	cpc	r27, r17
    366a:	48 f0       	brcs	.+18     	; 0x367e <__udivmod64+0x90>
    366c:	8a 18       	sub	r8, r10
    366e:	9b 08       	sbc	r9, r11
    3670:	ec 09       	sbc	r30, r12
    3672:	fd 09       	sbc	r31, r13
    3674:	ce 09       	sbc	r28, r14
    3676:	df 09       	sbc	r29, r15
    3678:	a0 0b       	sbc	r26, r16
    367a:	b1 0b       	sbc	r27, r17
    367c:	21 60       	ori	r18, 0x01	; 1
    367e:	1a 94       	dec	r1
    3680:	e1 f6       	brne	.-72     	; 0x363a <__udivmod64+0x4c>
    3682:	2e f4       	brtc	.+10     	; 0x368e <__udivmod64+0xa0>
    3684:	94 01       	movw	r18, r8
    3686:	af 01       	movw	r20, r30
    3688:	be 01       	movw	r22, r28
    368a:	cd 01       	movw	r24, r26
    368c:	00 0c       	add	r0, r0
    368e:	08 95       	ret

Disassembly of section .text.libgcc:

00004de4 <__negdi2>:
    4de4:	60 95       	com	r22
    4de6:	70 95       	com	r23
    4de8:	80 95       	com	r24
    4dea:	90 95       	com	r25
    4dec:	30 95       	com	r19
    4dee:	40 95       	com	r20
    4df0:	50 95       	com	r21
    4df2:	21 95       	neg	r18
    4df4:	3f 4f       	sbci	r19, 0xFF	; 255
    4df6:	4f 4f       	sbci	r20, 0xFF	; 255
    4df8:	5f 4f       	sbci	r21, 0xFF	; 255
    4dfa:	6f 4f       	sbci	r22, 0xFF	; 255
    4dfc:	7f 4f       	sbci	r23, 0xFF	; 255
    4dfe:	8f 4f       	sbci	r24, 0xFF	; 255
    4e00:	9f 4f       	sbci	r25, 0xFF	; 255
    4e02:	08 95       	ret

Disassembly of section .text.libgcc.prologue:

000046f4 <__prologue_saves__>:
    46f4:	2f 92       	push	r2
    46f6:	3f 92       	push	r3
    46f8:	4f 92       	push	r4
    46fa:	5f 92       	push	r5
    46fc:	6f 92       	push	r6
    46fe:	7f 92       	push	r7
    4700:	8f 92       	push	r8
    4702:	9f 92       	push	r9
    4704:	af 92       	push	r10
    4706:	bf 92       	push	r11
    4708:	cf 92       	push	r12
    470a:	df 92       	push	r13
    470c:	ef 92       	push	r14
    470e:	ff 92       	push	r15
    4710:	0f 93       	push	r16
    4712:	1f 93       	push	r17
    4714:	cf 93       	push	r28
    4716:	df 93       	push	r29
    4718:	cd b7       	in	r28, 0x3d	; 61
    471a:	de b7       	in	r29, 0x3e	; 62
    471c:	ca 1b       	sub	r28, r26
    471e:	db 0b       	sbc	r29, r27
    4720:	0f b6       	in	r0, 0x3f	; 63
    4722:	f8 94       	cli
    4724:	de bf       	out	0x3e, r29	; 62
    4726:	0f be       	out	0x3f, r0	; 63
    4728:	cd bf       	out	0x3d, r28	; 61
    472a:	09 94       	ijmp

Disassembly of section .text.libgcc.prologue:

00004762 <__epilogue_restores__>:
    4762:	2a 88       	ldd	r2, Y+18	; 0x12
    4764:	39 88       	ldd	r3, Y+17	; 0x11
    4766:	48 88       	ldd	r4, Y+16	; 0x10
    4768:	5f 84       	ldd	r5, Y+15	; 0x0f
    476a:	6e 84       	ldd	r6, Y+14	; 0x0e
    476c:	7d 84       	ldd	r7, Y+13	; 0x0d
    476e:	8c 84       	ldd	r8, Y+12	; 0x0c
    4770:	9b 84       	ldd	r9, Y+11	; 0x0b
    4772:	aa 84       	ldd	r10, Y+10	; 0x0a
    4774:	b9 84       	ldd	r11, Y+9	; 0x09
    4776:	c8 84       	ldd	r12, Y+8	; 0x08
    4778:	df 80       	ldd	r13, Y+7	; 0x07
    477a:	ee 80       	ldd	r14, Y+6	; 0x06
    477c:	fd 80       	ldd	r15, Y+5	; 0x05
    477e:	0c 81       	ldd	r16, Y+4	; 0x04
    4780:	1b 81       	ldd	r17, Y+3	; 0x03
    4782:	aa 81       	ldd	r26, Y+2	; 0x02
    4784:	b9 81       	ldd	r27, Y+1	; 0x01
    4786:	ce 0f       	add	r28, r30
    4788:	d1 1d       	adc	r29, r1
    478a:	0f b6       	in	r0, 0x3f	; 63
    478c:	f8 94       	cli
    478e:	de bf       	out	0x3e, r29	; 62
    4790:	0f be       	out	0x3f, r0	; 63
    4792:	cd bf       	out	0x3d, r28	; 61
    4794:	ed 01       	movw	r28, r26
    4796:	08 95       	ret

Disassembly of section .text.libgcc:

00004f74 <__adddi3>:
    4f74:	2a 0d       	add	r18, r10
    4f76:	3b 1d       	adc	r19, r11
    4f78:	4c 1d       	adc	r20, r12
    4f7a:	5d 1d       	adc	r21, r13
    4f7c:	6e 1d       	adc	r22, r14
    4f7e:	7f 1d       	adc	r23, r15
    4f80:	80 1f       	adc	r24, r16
    4f82:	91 1f       	adc	r25, r17
    4f84:	08 95       	ret

Disassembly of section .text.libgcc:

00004f86 <__cmpdi2>:
    4f86:	2a 15       	cp	r18, r10
    4f88:	3b 05       	cpc	r19, r11
    4f8a:	4c 05       	cpc	r20, r12
    4f8c:	5d 05       	cpc	r21, r13
    4f8e:	6e 05       	cpc	r22, r14
    4f90:	7f 05       	cpc	r23, r15
    4f92:	80 07       	cpc	r24, r16
    4f94:	91 07       	cpc	r25, r17
    4f96:	08 95       	ret
