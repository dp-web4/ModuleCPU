
ModuleCPU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00004f6a  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000da  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00004f6c  2**0
                  ALLOC
  3 .noinit       0000022a  00800102  00800102  00004f6c  2**2
                  ALLOC
  4 .comment      0000002f  00000000  00000000  00004f6a  2**0
                  CONTENTS, READONLY
  5 .stack.descriptors.hdr 00000142  00000000  00000000  00004f99  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000500  00000000  00000000  000050db  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00008e6f  00000000  00000000  000055db  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001ab6  00000000  00000000  0000e44a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000383c  00000000  00000000  0000ff00  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001220  00000000  00000000  0001373c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000006e4  00000000  00000000  0001495c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000488e  00000000  00000000  00015040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000004e0  00000000  00000000  000198ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .text         00000004  00004ea6  00004ea6  00004f5a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00019db0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .text.__vector_27 000000bc  0000326e  0000326e  00003322  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.ADCSetPowerOn 0000000c  00004e60  00004e60  00004f14  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.ADCStartConversion 0000002a  00004802  00004802  000048b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .progmemx.data 0000000b  00000341  00000341  000003f5  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 20 .text.ADCInit 0000013c  000022f8  000022f8  000023ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .progmemx.data.sg_sMuxSelectList 0000000f  0000031a  0000031a  000003ce  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 22 .bss.sg_eCurrentType 00000001  0080094f  0080094f  00004f6c  2**0
                  ALLOC
 23 .bss.sg_eState 00000001  00800964  00800964  00004f6c  2**0
                  ALLOC
 24 .text.CANLookupCommand 00000062  00003ecc  00003ecc  00003f80  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .progmemx.data 0000000b  0000034c  0000034c  00000400  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 26 .text.CANMOBSet 00000212  00001ab8  00001ab8  00001b6c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.CANSendMessageInternal 00000178  0000201a  0000201a  000020ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.CANMOBInterrupt 00000192  00001e88  00001e88  00001f3c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.__vector_18 00000118  00002568  00002568  0000261c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.CANSendMessage 00000016  00004d0c  00004d0c  00004dc0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.CANSetRXCallback 0000000a  00004e78  00004e78  00004f2c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.CANInit 0000009c  000035d0  000035d0  00003684  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .progmemx.data.sg_sRXCommandList 00000021  000002d5  000002d5  00000389  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 34 .progmemx.data.sg_sMOBModuleRequestTime 00000008  00000357  00000357  0000040b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 35 .progmemx.data.sg_sMOBModuleHardwareDetail 00000008  0000035f  0000035f  00000413  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 36 .progmemx.data.sg_sMOBModuleCellDetail 00000008  00000367  00000367  0000041b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 37 .progmemx.data.sg_sMOBModuleCellCommStat2 00000008  0000036f  0000036f  00000423  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 38 .progmemx.data.sg_sMOBModuleCellCommStat1 00000008  00000377  00000377  0000042b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 39 .progmemx.data.sg_sMOBModuleStatus3 00000008  0000037f  0000037f  00000433  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 40 .progmemx.data.sg_sMOBModuleStatus2 00000008  00000387  00000387  0000043b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 41 .progmemx.data.sg_sMOBModuleStatus1 00000008  0000038f  0000038f  00000443  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 42 .progmemx.data.sg_sMOBModuleAnnouncement 00000008  00000397  00000397  0000044b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 43 .progmemx.data.sg_sMOBGenericReceive 00000008  0000039f  0000039f  00000453  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 44 .progmemx.data.sg_sMOBDisabled 00000008  000003a7  000003a7  0000045b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 45 .bss.sg_bInRetransmit 00000001  00800965  00800965  00004f6c  2**0
                  ALLOC
 46 .bss.sg_u8LastTXDataLen 00000001  00800966  00800966  00004f6c  2**0
                  ALLOC
 47 .bss.sg_u8LastTXData 00000008  0080093d  0080093d  00004f6c  2**0
                  ALLOC
 48 .bss.sg_eLastTXType 00000001  00800967  00800967  00004f6c  2**0
                  ALLOC
 49 .bss.sg_u8TransmitAttempts 00000001  00800968  00800968  00004f6c  2**0
                  ALLOC
 50 .bss.sg_pfRXCallback 00000002  0080094d  0080094d  00004f6c  2**0
                  ALLOC
 51 .bss.sg_bBusy 00000001  00800969  00800969  00004f6c  2**0
                  ALLOC
 52 .text.DebugOut 0000000e  00004e28  00004e28  00004edc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 53 .text.EEPROMRead 00000012  00004d8e  00004d8e  00004e42  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 .text.I2CBitDelay 0000000e  00004e36  00004e36  00004eea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.I2CStart 0000002c  00004752  00004752  00004806  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.I2CStop 00000026  000048f4  000048f4  000049a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .text.I2CUnstick 0000003c  0000449c  0000449c  00004550  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .text.I2CTxByte 0000006a  00003df8  00003df8  00003eac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 .text.I2CRxByte 0000007a  00003c1e  00003c1e  00003cd2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 60 .text.I2CSetup 0000002c  0000477e  0000477e  00004832  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 61 .text.I2CStartTransaction 00000028  0000482c  0000482c  000048e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 62 .text.CellCountExpectedSet 000000c4  000030e8  000030e8  0000319c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 63 .text.SendModuleControllerStatus 00000010  00004de8  00004de8  00004e9c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 64 .text.ModuleControllerStateSet 0000000a  00004e82  00004e82  00004f36  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .text.ModuleControllerStateSetMax 00000016  00004d22  00004d22  00004dd6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 66 .text.Check5VLoss 00000018  00004cc4  00004cc4  00004d78  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 67 .text.CellDataConvertVoltage 0000005e  00003f90  00003f90  00004044  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 68 .text.CellDataConvertTemperature 0000007a  00003c98  00003c98  00003d4c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 69 .text.ModuleCurrentConvertReadings 00000104  00002680  00002680  00002734  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 70 .text.__vector_1 00000024  00004940  00004940  000049f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 71 .text.__vector_2 00000024  00004964  00004964  00004a18  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 72 .text.__vector_3 00000024  00004988  00004988  00004a3c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 73 .text.__vector_4 00000024  000049ac  000049ac  00004a60  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 74 .text.__vector_5 00000024  000049d0  000049d0  00004a84  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 75 .text.__vector_6 00000024  000049f4  000049f4  00004aa8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 76 .text.__vector_22 00000024  00004a18  00004a18  00004acc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 77 .text.__vector_9 00000024  00004a3c  00004a3c  00004af0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 78 .text.__vector_11 00000024  00004a60  00004a60  00004b14  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 79 .text.__vector_13 00000024  00004a84  00004a84  00004b38  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 80 .text.__vector_14 00000024  00004aa8  00004aa8  00004b5c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 81 .text.__vector_17 00000024  00004acc  00004acc  00004b80  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 82 .text.__vector_19 00000024  00004af0  00004af0  00004ba4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 83 .text.__vector_21 00000024  00004b14  00004b14  00004bc8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 84 .text.__vector_25 00000024  00004b38  00004b38  00004bec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 85 .text.__vector_26 00000024  00004b5c  00004b5c  00004c10  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 86 .text.__vector_29 00000024  00004b80  00004b80  00004c34  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 87 .text.__vector_30 00000024  00004ba4  00004ba4  00004c58  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 88 .text.CurrentThresholdsGet 00000094  0000366c  0000366c  00003720  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 89 .progmemx.data 000001a1  000000da  000000da  0000018e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 90 .text.CANReceiveCallback 00000294  0000118e  0000118e  00001242  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 91 .text.ControllerStatusMessagesSend 00000424  00000810  00000810  000008c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 92 .text.CellStringProcess 000002a6  00000ee8  00000ee8  00000f9c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 93 .text.Delay   00000052  00004248  00004248  000042fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 94 .text.PlatformAssert 0000002c  000047aa  000047aa  0000485e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 95 .text.ModuleControllerStateHandle 0000021e  0000189a  0000189a  0000194e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 96 .text.PlatformGetRegistrationID 00000006  00004ea0  00004ea0  00004f54  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 97 .text.SetSysclock 0000000c  00004e6c  00004e6c  00004f20  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 98 .text.ModuleControllerGetUniqueID 0000007e  00003a2a  00003a2a  00003ade  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 99 .text.TimerInit 00000052  0000429a  0000429a  0000434e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
100 .text.__vector_12 000000ba  0000332a  0000332a  000033de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
101 .text.WatchdogReset 00000002  00004eae  00004eae  00004f62  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
102 .text.WatchdogOff 0000001a  00004caa  00004caa  00004d5e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
103 .text.__vector_28 00000052  000042ec  000042ec  000043a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
104 .text.__vector_23 0000008a  00003700  00003700  000037b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
105 .text.__vector_24 0000004c  0000433e  0000433e  000043f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
106 .text.vUARTRXStart 00000016  00004d38  00004d38  00004dec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
107 .text.vUARTRXEnd 00000024  00004bc8  00004bc8  00004c7c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
108 .text.vUARTRXData 0000007a  00003d12  00003d12  00003dc6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
109 .text.PlatformGetSendData 00000028  00004854  00004854  00004908  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
110 .text.ADCCallback 00000026  0000491a  0000491a  000049ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
111 .text.FrameInit 000000cc  00002dc4  00002dc4  00002e78  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
112 .text.CellStringPowerStateMachine 00000088  00003814  00003814  000038c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
113 .text.main    000002b4  00000c34  00000c34  00000ce8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
114 .bss.sg_u8PCMSK1 00000001  0080096a  0080096a  00004f6c  2**0
                  ALLOC
115 .bss.sg_u8PCMSK0 00000001  0080096b  0080096b  00004f6c  2**0
                  ALLOC
116 .bss.sg_u8UnhandledInterruptVector 00000001  0080096c  0080096c  00004f6c  2**0
                  ALLOC
117 .bss.sg_u8Reason 00000001  0080096d  0080096d  00004f6c  2**0
                  ALLOC
118 .progmemx.data.sg_u8FractionalLookup 00000010  0000030a  0000030a  000003be  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
119 .bss.sg_u8ControllerStatusMsgCount 00000001  0080096e  0080096e  00004f6c  2**0
                  ALLOC
120 .bss.sg_u8CellReports 00000001  0080096f  0080096f  00004f6c  2**0
                  ALLOC
121 .bss.sg_u16BytesReceived 00000002  0080095c  0080095c  00004f6c  2**0
                  ALLOC
122 .bss.sg_u8CellBufferTemp 00000004  00800950  00800950  00004f6c  2**2
                  ALLOC
123 .bss.sg_u8CellBufferRX 00000001  00800970  00800970  00004f6c  2**0
                  ALLOC
124 .bss.sg_u8CellIndex 00000001  00800971  00800971  00004f6c  2**0
                  ALLOC
125 .bss.sg_u8TicksSinceLastPackControllerMessage 00000001  00800972  00800972  00004f6c  2**0
                  ALLOC
126 .bss.sg_u8CellStringPowerTimer 00000001  00800973  00800973  00004f6c  2**0
                  ALLOC
127 .bss.sg_bFrameStart 00000001  00800974  00800974  00004f6c  2**0
                  ALLOC
128 .bss.sg_u8CellFrameTimer 00000001  00800975  00800975  00004f6c  2**0
                  ALLOC
129 .bss.sg_bIgnoreStatusRequests 00000001  00800976  00800976  00004f6c  2**0
                  ALLOC
130 .bss.sg_u8AnnouncementDelayTicks 00000001  00800977  00800977  00004f6c  2**0
                  ALLOC
131 .bss.sg_bAnnouncementPending 00000001  00800978  00800978  00004f6c  2**0
                  ALLOC
132 .bss.sg_u8CurrentBufferIndex 00000001  00800979  00800979  00004f6c  2**0
                  ALLOC
133 .bss.sg_sCurrenBuffer 00000010  0080091d  0080091d  00004f6c  2**0
                  ALLOC
134 .text.IsLeapYear 00000034  000045f2  000045f2  000046a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
135 .text.RTCStartTransaction 00000044  000043d6  000043d6  0000448a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
136 .text.StructTMToHW 00000054  000041a0  000041a0  00004254  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
137 .text.HWToStructTM 0000007c  00003b26  00003b26  00003bda  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
138 .text.__vector_10 00000086  0000389c  0000389c  00003950  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
139 .progmemx.data 00000014  000002f6  000002f6  000003aa  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
140 .text.RTCReadRegisters 0000007e  00003aa8  00003aa8  00003b5c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
141 .text.RTCReadHW 000000e2  0000297a  0000297a  00002a2e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
142 .text.RTCWriteRegisters 0000006a  00003e62  00003e62  00003f16  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
143 .text.RTCWriteHW 000000fe  00002784  00002784  00002838  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
144 .text.RTCSetTime 000000c6  00003022  00003022  000030d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
145 .text.RTCInit 00000222  00001678  00001678  0000172c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
146 .progmemx.data.sg_u8DaysInMonths 0000000c  00000329  00000329  000003dd  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
147 .bss.sg_u64Time 00000008  00800945  00800945  00004f6c  2**0
                  ALLOC
148 .text.SDSetCS 00000014  00004d7a  00004d7a  00004e2e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
149 .text.SDPowerup 0000003a  00004514  00004514  000045c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
150 .text.SDCommand 000000aa  000033e4  000033e4  00003498  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
151 .text.SDGoIdle 00000022  00004c10  00004c10  00004cc4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
152 .text.SDSendOpCondition 00000034  00004626  00004626  000046da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
153 .text.SDSendOpConditionArg 00000056  0000409e  0000409e  00004152  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
154 .text.SDWaitResponse7 0000000e  00004e44  00004e44  00004ef8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
155 .text.SDSendInterfaceCondition 00000034  0000465a  0000465a  0000470e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
156 .text.SDReadOCR 00000032  0000468e  0000468e  00004742  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
157 .text.SDReadCSD 0000007c  00003ba2  00003ba2  00003c56  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
158 .text.SDReceiveDataBlock 0000008a  0000378a  0000378a  0000383e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
159 .text.SDTransmitDataBlock 000000c2  000031ac  000031ac  00003260  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
160 .text.SDInit  00000166  00002192  00002192  00002246  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
161 .text.SDRead  000000d8  00002c14  00002c14  00002cc8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
162 .text.SDWrite 000000dc  00002a5c  00002a5c  00002b10  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
163 .bss.sg_u8CSD 00000010  0080092d  0080092d  00004f6c  2**0
                  ALLOC
164 .bss.sg_u16BlockSize 00000002  0080095e  0080095e  00004f6c  2**0
                  ALLOC
165 .bss.sg_u32SDSectorCount 00000004  00800954  00800954  00004f6c  2**0
                  ALLOC
166 .text.SPITransaction 00000058  00003fee  00003fee  000040a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
167 .text.SPISetBaudRate 000000ca  00002e90  00002e90  00002f44  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
168 .text.SPIInit 0000002c  000047d6  000047d6  0000488a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
169 .progmemx.data.sg_sSPIBaudRates 0000002a  000002ab  000002ab  0000035f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
170 .text.readGlobalState 0000003e  0000445e  0000445e  00004512  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
171 .text.writeGlobalState 00000032  000046c0  000046c0  00004774  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
172 .text.updateSessionMap 000000dc  00002b38  00002b38  00002bec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
173 .text.STORE_Init 00000082  000039a8  000039a8  00003a5c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
174 .text.STORE_WriteFrame 000000f8  00002882  00002882  00002936  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
175 .text.STORE_StartNewSession 00000054  000041f4  000041f4  000042a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
176 .text.STORE_EndSession 00000058  00004046  00004046  000040fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
177 .bss.frameBuffer 00000400  0080032c  0080032c  00004f6c  2**2
                  ALLOC
178 .bss.currentSector 00000004  00800958  00800958  00004f6c  2**0
                  ALLOC
179 .bss.gState   000001d8  0080072c  0080072c  00004f6c  2**2
                  ALLOC
180 .text.vUARTtxDataAvailable 00000024  00004bec  00004bec  00004ca0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
181 .text.vUARTtxDataGet 0000004c  0000438a  0000438a  0000443e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
182 .text.vUARTRXReset 0000000a  00004e8c  00004e8c  00004f40  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
183 .text.vUARTStarttx 00000056  000040f4  000040f4  000041a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
184 .text.__vector_8 000000c8  00002f5a  00002f5a  0000300e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
185 .text.__vector_16 000000d8  00002cec  00002cec  00002da0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
186 .text.__vector_15 00000134  00002434  00002434  000024e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
187 .text.vUARTInit 00000036  00004586  00004586  0000463a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
188 .text.vUARTInitReceive 00000028  0000487c  0000487c  00004930  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
189 .bss.sg_bState 00000001  0080097a  0080097a  00004f6c  2**0
                  ALLOC
190 .bss.sg_u8SendData 00000002  00800960  00800960  00004f6c  2**0
                  ALLOC
191 .bss.sg_u8SendIndex 00000001  0080097b  0080097b  00004f6c  2**0
                  ALLOC
192 .bss.sg_edgeCorrections 00000002  00800962  00800962  00004f6c  2**0
                  ALLOC
193 .bss.sg_maxTimingError 00000001  0080097c  0080097c  00004f6c  2**0
                  ALLOC
194 .bss.sg_minTimingError 00000001  0080097d  0080097d  00004f6c  2**0
                  ALLOC
195 .bss.sg_bMCTxNextBit 00000001  0080097e  0080097e  00004f6c  2**0
                  ALLOC
196 .bss.sg_bCellReportsReuested 00000001  0080097f  0080097f  00004f6c  2**0
                  ALLOC
197 .bss.sg_etxState 00000001  00800980  00800980  00004f6c  2**0
                  ALLOC
198 .bss.sg_btxMoreAvailable 00000001  00800981  00800981  00004f6c  2**0
                  ALLOC
199 .bss.sg_u8txDataByte 00000001  00800982  00800982  00004f6c  2**0
                  ALLOC
200 .bss.sg_u8txBitCount 00000001  00800983  00800983  00004f6c  2**0
                  ALLOC
201 .bss.sg_bCell_mc_rxMoreData 00000001  00800984  00800984  00004f6c  2**0
                  ALLOC
202 .bss.sg_bCell_mc_rxPriorState 00000001  00800985  00800985  00004f6c  2**0
                  ALLOC
203 .bss.sg_eCell_mc_rxState 00000001  00800986  00800986  00004f6c  2**0
                  ALLOC
204 .bss.sg_u8rxDataByte 00000001  00800987  00800987  00004f6c  2**0
                  ALLOC
205 .bss.sg_u8Cell_mc_rxBitCount 00000001  00800988  00800988  00004f6c  2**0
                  ALLOC
206 .text.libgcc.div 00000028  000048a4  000048a4  00004958  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
207 .text.libgcc.div 00000044  0000441a  0000441a  000044ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
208 .text.libgcc.div 0000002e  00004724  00004724  000047d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
209 .text.libgcc.div 00000010  00004df8  00004df8  00004eac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
210 .text.libgcc.mul 0000001e  00004c52  00004c52  00004d06  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
211 .text.libgcc.mul 0000000e  00004e52  00004e52  00004f06  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
212 .text.libgcc.mul 00000016  00004d4e  00004d4e  00004e02  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
213 .text.libgcc.mul 00000010  00004e08  00004e08  00004ebc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
214 .text.libgcc  00000010  00004e18  00004e18  00004ecc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
215 .text.libgcc  00000018  00004cdc  00004cdc  00004d90  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
216 .text.libgcc  00000018  00004cf4  00004cf4  00004da8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
217 .text.__dummy_fini 00000002  00004eb0  00004eb0  00004f64  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
218 .text.__dummy_funcs_on_exit 00000002  00004eb2  00004eb2  00004f66  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
219 .text.__dummy_simulator_exit 00000002  00004eb4  00004eb4  00004f68  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
220 .text.exit    00000016  00004d64  00004d64  00004e18  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
221 .text.memcpy  00000032  000046f2  000046f2  000047a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
222 .text.memset  00000012  00004da0  00004da0  00004e54  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
223 .text.gmtime  0000000a  00004e96  00004e96  00004f4a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
224 .bss.tm.1240  00000019  00800904  00800904  00004f6c  2**0
                  ALLOC
225 .progmemx.data 00000004  000003af  000003af  00000463  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
226 .text.__gmtime_r 0000006c  00003d8c  00003d8c  00003e40  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
227 .progmemx.data 00000004  000003b3  000003b3  00000467  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
228 .text.mktime  00000086  00003922  00003922  000039d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
229 .text._Exit   00000004  00004eaa  00004eaa  00004f5e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
230 .text.__tm_to_secs 000001be  00001cca  00001cca  00001d7e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
231 .text.__year_to_secs 00000256  00001422  00001422  000014d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
232 .text.__month_to_secs 0000003c  000044d8  000044d8  0000458c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
233 .progmemx.data.secs_through_month.1090 00000030  0000027b  0000027b  0000032f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
234 .text.__secs_to_tm 00000458  000003b8  000003b8  0000046c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
235 .progmemx.data.days_in_month.1250 0000000c  00000335  00000335  000003e9  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
236 .text.libgcc.div 00000028  000048cc  000048cc  00004980  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
237 .text.libgcc.mul 000000a0  00003530  00003530  000035e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
238 .text.libgcc.mul 00000012  00004db2  00004db2  00004e66  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
239 .text.libgcc.mul 0000001e  00004c70  00004c70  00004d24  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
240 .text.libgcc.mul 00000056  0000414a  0000414a  000041fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
241 .text.libgcc.div 00000062  00003f2e  00003f2e  00003fe2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
242 .text.libgcc.div 0000001c  00004c8e  00004c8e  00004d42  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
243 .text.libgcc.div 000000a2  0000348e  0000348e  00003542  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
244 .text.libgcc  00000020  00004c32  00004c32  00004ce6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
245 .text.libgcc.prologue 00000038  0000454e  0000454e  00004602  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
246 .text.libgcc.prologue 00000036  000045bc  000045bc  00004670  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
247 .text.libgcc  00000012  00004dc4  00004dc4  00004e78  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
248 .text.libgcc  00000012  00004dd6  00004dd6  00004e8a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 43 00 	jmp	0x86	; 0x86 <__ctors_end>
   4:	0c 94 a0 24 	jmp	0x4940	; 0x4940 <__vector_1>
   8:	0c 94 b2 24 	jmp	0x4964	; 0x4964 <__vector_2>
   c:	0c 94 c4 24 	jmp	0x4988	; 0x4988 <__vector_3>
  10:	0c 94 d6 24 	jmp	0x49ac	; 0x49ac <__vector_4>
  14:	0c 94 e8 24 	jmp	0x49d0	; 0x49d0 <__vector_5>
  18:	0c 94 fa 24 	jmp	0x49f4	; 0x49f4 <__vector_6>
  1c:	0c 94 53 27 	jmp	0x4ea6	; 0x4ea6 <__bad_interrupt>
  20:	0c 94 ad 17 	jmp	0x2f5a	; 0x2f5a <__vector_8>
  24:	0c 94 1e 25 	jmp	0x4a3c	; 0x4a3c <__vector_9>
  28:	0c 94 4e 1c 	jmp	0x389c	; 0x389c <__vector_10>
  2c:	0c 94 30 25 	jmp	0x4a60	; 0x4a60 <__vector_11>
  30:	0c 94 95 19 	jmp	0x332a	; 0x332a <__vector_12>
  34:	0c 94 42 25 	jmp	0x4a84	; 0x4a84 <__vector_13>
  38:	0c 94 54 25 	jmp	0x4aa8	; 0x4aa8 <__vector_14>
  3c:	0c 94 1a 12 	jmp	0x2434	; 0x2434 <__vector_15>
  40:	0c 94 76 16 	jmp	0x2cec	; 0x2cec <__vector_16>
  44:	0c 94 66 25 	jmp	0x4acc	; 0x4acc <__vector_17>
  48:	0c 94 b4 12 	jmp	0x2568	; 0x2568 <__vector_18>
  4c:	0c 94 78 25 	jmp	0x4af0	; 0x4af0 <__vector_19>
  50:	0c 94 53 27 	jmp	0x4ea6	; 0x4ea6 <__bad_interrupt>
  54:	0c 94 8a 25 	jmp	0x4b14	; 0x4b14 <__vector_21>
  58:	0c 94 0c 25 	jmp	0x4a18	; 0x4a18 <__vector_22>
  5c:	0c 94 80 1b 	jmp	0x3700	; 0x3700 <__vector_23>
  60:	0c 94 9f 21 	jmp	0x433e	; 0x433e <__vector_24>
  64:	0c 94 9c 25 	jmp	0x4b38	; 0x4b38 <__vector_25>
  68:	0c 94 ae 25 	jmp	0x4b5c	; 0x4b5c <__vector_26>
  6c:	0c 94 37 19 	jmp	0x326e	; 0x326e <__vector_27>
  70:	0c 94 76 21 	jmp	0x42ec	; 0x42ec <__vector_28>
  74:	0c 94 c0 25 	jmp	0x4b80	; 0x4b80 <__vector_29>
  78:	0c 94 d2 25 	jmp	0x4ba4	; 0x4ba4 <__vector_30>

0000007c <.dinit>:
  7c:	01 00       	.word	0x0001	; ????
  7e:	01 02       	muls	r16, r17
  80:	80 01       	movw	r16, r0
  82:	04 09       	sbc	r16, r4
  84:	89 80       	ldd	r8, Y+1	; 0x01

00000086 <__ctors_end>:
  86:	11 24       	eor	r1, r1
  88:	1f be       	out	0x3f, r1	; 63
  8a:	cf ef       	ldi	r28, 0xFF	; 255
  8c:	d0 e1       	ldi	r29, 0x10	; 16
  8e:	de bf       	out	0x3e, r29	; 62
  90:	cd bf       	out	0x3d, r28	; 61

00000092 <__do_copy_data>:
  92:	ec e7       	ldi	r30, 0x7C	; 124
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	40 e0       	ldi	r20, 0x00	; 0
  98:	17 c0       	rjmp	.+46     	; 0xc8 <__do_clear_bss+0x8>
  9a:	b5 91       	lpm	r27, Z+
  9c:	a5 91       	lpm	r26, Z+
  9e:	35 91       	lpm	r19, Z+
  a0:	25 91       	lpm	r18, Z+
  a2:	05 91       	lpm	r16, Z+
  a4:	07 fd       	sbrc	r16, 7
  a6:	0c c0       	rjmp	.+24     	; 0xc0 <__do_clear_bss>
  a8:	95 91       	lpm	r25, Z+
  aa:	85 91       	lpm	r24, Z+
  ac:	ef 01       	movw	r28, r30
  ae:	f9 2f       	mov	r31, r25
  b0:	e8 2f       	mov	r30, r24
  b2:	05 90       	lpm	r0, Z+
  b4:	0d 92       	st	X+, r0
  b6:	a2 17       	cp	r26, r18
  b8:	b3 07       	cpc	r27, r19
  ba:	d9 f7       	brne	.-10     	; 0xb2 <__do_copy_data+0x20>
  bc:	fe 01       	movw	r30, r28
  be:	04 c0       	rjmp	.+8      	; 0xc8 <__do_clear_bss+0x8>

000000c0 <__do_clear_bss>:
  c0:	1d 92       	st	X+, r1
  c2:	a2 17       	cp	r26, r18
  c4:	b3 07       	cpc	r27, r19
  c6:	e1 f7       	brne	.-8      	; 0xc0 <__do_clear_bss>
  c8:	e6 38       	cpi	r30, 0x86	; 134
  ca:	f4 07       	cpc	r31, r20
  cc:	31 f7       	brne	.-52     	; 0x9a <__do_copy_data+0x8>
  ce:	0e 94 1a 06 	call	0xc34	; 0xc34 <main>
  d2:	0c 94 b2 26 	jmp	0x4d64	; 0x4d64 <exit>

000000d6 <_exit>:
  d6:	f8 94       	cli

000000d8 <__stop_program>:
  d8:	ff cf       	rjmp	.-2      	; 0xd8 <__stop_program>

Disassembly of section .text:

00004ea6 <__bad_interrupt>:
    4ea6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.__vector_27:

0000326e <__vector_27>:

	// Disable the conversion complete interrupt
	ADCSRA &= (uint8_t)~(1 << ADIE);

	// Clear any pending interrupt	
	ADCSRA |= (1 << ADIF);
    326e:	78 94       	sei
    3270:	1f 92       	push	r1
    3272:	0f 92       	push	r0
    3274:	0f b6       	in	r0, 0x3f	; 63
    3276:	0f 92       	push	r0
    3278:	11 24       	eor	r1, r1
    327a:	2f 93       	push	r18
    327c:	3f 93       	push	r19
    327e:	4f 93       	push	r20
    3280:	5f 93       	push	r21
    3282:	6f 93       	push	r22
    3284:	7f 93       	push	r23
    3286:	8f 93       	push	r24
    3288:	9f 93       	push	r25
    328a:	af 93       	push	r26
    328c:	bf 93       	push	r27
    328e:	ef 93       	push	r30
    3290:	ff 93       	push	r31
    3292:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f0078>
    3296:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f0079>
    329a:	80 91 4f 09 	lds	r24, 0x094F	; 0x80094f <sg_eCurrentType>
    329e:	91 e0       	ldi	r25, 0x01	; 1
    32a0:	98 0f       	add	r25, r24
    32a2:	90 93 4f 09 	sts	0x094F, r25	; 0x80094f <sg_eCurrentType>
    32a6:	95 30       	cpi	r25, 0x05	; 5
    32a8:	10 f0       	brcs	.+4      	; 0x32ae <__vector_27+0x40>
    32aa:	10 92 4f 09 	sts	0x094F, r1	; 0x80094f <sg_eCurrentType>
    32ae:	ac e7       	ldi	r26, 0x7C	; 124
    32b0:	b0 e0       	ldi	r27, 0x00	; 0
    32b2:	5c 91       	ld	r21, X
    32b4:	20 91 4f 09 	lds	r18, 0x094F	; 0x80094f <sg_eCurrentType>
    32b8:	30 e0       	ldi	r19, 0x00	; 0
    32ba:	f9 01       	movw	r30, r18
    32bc:	ee 0f       	add	r30, r30
    32be:	ff 1f       	adc	r31, r31
    32c0:	2e 0f       	add	r18, r30
    32c2:	3f 1f       	adc	r19, r31
    32c4:	03 2e       	mov	r0, r19
    32c6:	00 0c       	add	r0, r0
    32c8:	44 0b       	sbc	r20, r20
    32ca:	26 5e       	subi	r18, 0xE6	; 230
    32cc:	3c 4f       	sbci	r19, 0xFC	; 252
    32ce:	4f 4f       	sbci	r20, 0xFF	; 255
    32d0:	f9 01       	movw	r30, r18
    32d2:	94 91       	lpm	r25, Z
    32d4:	47 fd       	sbrc	r20, 7
    32d6:	90 81       	ld	r25, Z
    32d8:	50 7e       	andi	r21, 0xE0	; 224
    32da:	95 2b       	or	r25, r21
    32dc:	90 6c       	ori	r25, 0xC0	; 192
    32de:	9c 93       	st	X, r25
    32e0:	0e 94 8d 24 	call	0x491a	; 0x491a <ADCCallback>
    32e4:	80 91 4f 09 	lds	r24, 0x094F	; 0x80094f <sg_eCurrentType>
    32e8:	81 11       	cpse	r24, r1
    32ea:	09 c0       	rjmp	.+18     	; 0x32fe <__vector_27+0x90>
    32ec:	ea e7       	ldi	r30, 0x7A	; 122
    32ee:	f0 e0       	ldi	r31, 0x00	; 0
    32f0:	80 81       	ld	r24, Z
    32f2:	87 7f       	andi	r24, 0xF7	; 247
    32f4:	80 83       	st	Z, r24
    32f6:	81 e0       	ldi	r24, 0x01	; 1
    32f8:	80 93 64 09 	sts	0x0964, r24	; 0x800964 <sg_eState>
    32fc:	05 c0       	rjmp	.+10     	; 0x3308 <__vector_27+0x9a>
    32fe:	ea e7       	ldi	r30, 0x7A	; 122
    3300:	f0 e0       	ldi	r31, 0x00	; 0
    3302:	80 81       	ld	r24, Z
    3304:	88 64       	ori	r24, 0x48	; 72
    3306:	80 83       	st	Z, r24
    3308:	ff 91       	pop	r31
    330a:	ef 91       	pop	r30
    330c:	bf 91       	pop	r27
    330e:	af 91       	pop	r26
    3310:	9f 91       	pop	r25
    3312:	8f 91       	pop	r24
    3314:	7f 91       	pop	r23
    3316:	6f 91       	pop	r22
    3318:	5f 91       	pop	r21
    331a:	4f 91       	pop	r20
    331c:	3f 91       	pop	r19
    331e:	2f 91       	pop	r18
    3320:	0f 90       	pop	r0
    3322:	0f be       	out	0x3f, r0	; 63
    3324:	0f 90       	pop	r0
    3326:	1f 90       	pop	r1
    3328:	18 95       	reti

Disassembly of section .text.ADCSetPowerOn:

00004e60 <ADCSetPowerOn>:
}

// Enable ADC
void ADCSetPowerOn( void )
{
	ADCSRA |= (1 << ADEN);
    4e60:	ea e7       	ldi	r30, 0x7A	; 122
    4e62:	f0 e0       	ldi	r31, 0x00	; 0
    4e64:	80 81       	ld	r24, Z
    4e66:	80 68       	ori	r24, 0x80	; 128
    4e68:	80 83       	st	Z, r24
    4e6a:	08 95       	ret

Disassembly of section .text.ADCStartConversion:

00004802 <ADCStartConversion>:
}

void ADCStartConversion(void)
{
	// Don't start anything if we're not idle
	if (EADCSTATE_IDLE != sg_eState)
    4802:	80 91 64 09 	lds	r24, 0x0964	; 0x800964 <sg_eState>
    4806:	81 30       	cpi	r24, 0x01	; 1
    4808:	81 f4       	brne	.+32     	; 0x482a <ADCStartConversion+0x28>
	{
		return;
	}
	
	// Set back to the first channel
	sg_eCurrentType = EADCTYPE_FIRST;
    480a:	10 92 4f 09 	sts	0x094F, r1	; 0x80094f <sg_eCurrentType>
	
	// Set the MUX
	ADMUX = (ADMUX & MUX_MASK) | (sg_sMuxSelectList[sg_eCurrentType].u8MuxSelect) | MUX_AREF;
    480e:	ec e7       	ldi	r30, 0x7C	; 124
    4810:	f0 e0       	ldi	r31, 0x00	; 0
    4812:	80 81       	ld	r24, Z
    4814:	80 7e       	andi	r24, 0xE0	; 224
    4816:	89 6c       	ori	r24, 0xC9	; 201
    4818:	80 83       	st	Z, r24
		
	sg_eState = EADCSTATE_READING;
    481a:	82 e0       	ldi	r24, 0x02	; 2
    481c:	80 93 64 09 	sts	0x0964, r24	; 0x800964 <sg_eState>
	
	// Start a single conversion  - *dp run one at a time for now instead of continuous
	ADCSRA |= (1 << ADSC) | (1 << ADIE) | (1 << ADEN);  // turn power on if it isn't
    4820:	ea e7       	ldi	r30, 0x7A	; 122
    4822:	f0 e0       	ldi	r31, 0x00	; 0
    4824:	80 81       	ld	r24, Z
    4826:	88 6c       	ori	r24, 0xC8	; 200
    4828:	80 83       	st	Z, r24
    482a:	08 95       	ret

Disassembly of section .text.ADCInit:

000022f8 <ADCInit>:

	// Disable the conversion complete interrupt
	ADCSRA &= (uint8_t)~(1 << ADIE);

	// Clear any pending interrupt	
	ADCSRA |= (1 << ADIF);
    22f8:	cf 93       	push	r28
    22fa:	82 e0       	ldi	r24, 0x02	; 2
    22fc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f007a>
    2300:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
    2304:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7f0094>
    2308:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7f0095>
    230c:	10 92 96 00 	sts	0x0096, r1	; 0x800096 <__TEXT_REGION_LENGTH__+0x7f0096>
    2310:	10 92 97 00 	sts	0x0097, r1	; 0x800097 <__TEXT_REGION_LENGTH__+0x7f0097>
    2314:	80 ea       	ldi	r24, 0xA0	; 160
    2316:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f007b>
    231a:	c0 e0       	ldi	r28, 0x00	; 0
    231c:	83 c0       	rjmp	.+262    	; 0x2424 <ADCInit+0x12c>
    231e:	2c 2f       	mov	r18, r28
    2320:	30 e0       	ldi	r19, 0x00	; 0
    2322:	c9 01       	movw	r24, r18
    2324:	88 0f       	add	r24, r24
    2326:	99 1f       	adc	r25, r25
    2328:	82 0f       	add	r24, r18
    232a:	93 1f       	adc	r25, r19
    232c:	01 96       	adiw	r24, 0x01	; 1
    232e:	09 2e       	mov	r0, r25
    2330:	00 0c       	add	r0, r0
    2332:	aa 0b       	sbc	r26, r26
    2334:	86 5e       	subi	r24, 0xE6	; 230
    2336:	9c 4f       	sbci	r25, 0xFC	; 252
    2338:	af 4f       	sbci	r26, 0xFF	; 255
    233a:	fc 01       	movw	r30, r24
    233c:	84 91       	lpm	r24, Z
    233e:	a7 fd       	sbrc	r26, 7
    2340:	80 81       	ld	r24, Z
    2342:	81 30       	cpi	r24, 0x01	; 1
    2344:	41 f0       	breq	.+16     	; 0x2356 <ADCInit+0x5e>
    2346:	08 f4       	brcc	.+2      	; 0x234a <ADCInit+0x52>
    2348:	6c c0       	rjmp	.+216    	; 0x2422 <ADCInit+0x12a>
    234a:	82 30       	cpi	r24, 0x02	; 2
    234c:	21 f1       	breq	.+72     	; 0x2396 <ADCInit+0x9e>
    234e:	83 30       	cpi	r24, 0x03	; 3
    2350:	09 f4       	brne	.+2      	; 0x2354 <ADCInit+0x5c>
    2352:	41 c0       	rjmp	.+130    	; 0x23d6 <ADCInit+0xde>
    2354:	5f c0       	rjmp	.+190    	; 0x2414 <ADCInit+0x11c>
    2356:	54 b1       	in	r21, 0x04	; 4
    2358:	c9 01       	movw	r24, r18
    235a:	88 0f       	add	r24, r24
    235c:	99 1f       	adc	r25, r25
    235e:	28 0f       	add	r18, r24
    2360:	39 1f       	adc	r19, r25
    2362:	2e 5f       	subi	r18, 0xFE	; 254
    2364:	3f 4f       	sbci	r19, 0xFF	; 255
    2366:	03 2e       	mov	r0, r19
    2368:	00 0c       	add	r0, r0
    236a:	44 0b       	sbc	r20, r20
    236c:	26 5e       	subi	r18, 0xE6	; 230
    236e:	3c 4f       	sbci	r19, 0xFC	; 252
    2370:	4f 4f       	sbci	r20, 0xFF	; 255
    2372:	f9 01       	movw	r30, r18
    2374:	24 91       	lpm	r18, Z
    2376:	47 fd       	sbrc	r20, 7
    2378:	20 81       	ld	r18, Z
    237a:	81 e0       	ldi	r24, 0x01	; 1
    237c:	90 e0       	ldi	r25, 0x00	; 0
    237e:	02 c0       	rjmp	.+4      	; 0x2384 <ADCInit+0x8c>
    2380:	88 0f       	add	r24, r24
    2382:	99 1f       	adc	r25, r25
    2384:	2a 95       	dec	r18
    2386:	e2 f7       	brpl	.-8      	; 0x2380 <ADCInit+0x88>
    2388:	80 95       	com	r24
    238a:	58 23       	and	r21, r24
    238c:	54 b9       	out	0x04, r21	; 4
    238e:	95 b1       	in	r25, 0x05	; 5
    2390:	89 23       	and	r24, r25
    2392:	85 b9       	out	0x05, r24	; 5
    2394:	46 c0       	rjmp	.+140    	; 0x2422 <ADCInit+0x12a>
    2396:	57 b1       	in	r21, 0x07	; 7
    2398:	c9 01       	movw	r24, r18
    239a:	88 0f       	add	r24, r24
    239c:	99 1f       	adc	r25, r25
    239e:	28 0f       	add	r18, r24
    23a0:	39 1f       	adc	r19, r25
    23a2:	2e 5f       	subi	r18, 0xFE	; 254
    23a4:	3f 4f       	sbci	r19, 0xFF	; 255
    23a6:	03 2e       	mov	r0, r19
    23a8:	00 0c       	add	r0, r0
    23aa:	44 0b       	sbc	r20, r20
    23ac:	26 5e       	subi	r18, 0xE6	; 230
    23ae:	3c 4f       	sbci	r19, 0xFC	; 252
    23b0:	4f 4f       	sbci	r20, 0xFF	; 255
    23b2:	f9 01       	movw	r30, r18
    23b4:	24 91       	lpm	r18, Z
    23b6:	47 fd       	sbrc	r20, 7
    23b8:	20 81       	ld	r18, Z
    23ba:	81 e0       	ldi	r24, 0x01	; 1
    23bc:	90 e0       	ldi	r25, 0x00	; 0
    23be:	02 c0       	rjmp	.+4      	; 0x23c4 <ADCInit+0xcc>
    23c0:	88 0f       	add	r24, r24
    23c2:	99 1f       	adc	r25, r25
    23c4:	2a 95       	dec	r18
    23c6:	e2 f7       	brpl	.-8      	; 0x23c0 <ADCInit+0xc8>
    23c8:	80 95       	com	r24
    23ca:	58 23       	and	r21, r24
    23cc:	57 b9       	out	0x07, r21	; 7
    23ce:	98 b1       	in	r25, 0x08	; 8
    23d0:	89 23       	and	r24, r25
    23d2:	88 b9       	out	0x08, r24	; 8
    23d4:	26 c0       	rjmp	.+76     	; 0x2422 <ADCInit+0x12a>
    23d6:	4a b1       	in	r20, 0x0a	; 10
    23d8:	c9 01       	movw	r24, r18
    23da:	88 0f       	add	r24, r24
    23dc:	99 1f       	adc	r25, r25
    23de:	82 0f       	add	r24, r18
    23e0:	93 1f       	adc	r25, r19
    23e2:	02 96       	adiw	r24, 0x02	; 2
    23e4:	09 2e       	mov	r0, r25
    23e6:	00 0c       	add	r0, r0
    23e8:	aa 0b       	sbc	r26, r26
    23ea:	86 5e       	subi	r24, 0xE6	; 230
    23ec:	9c 4f       	sbci	r25, 0xFC	; 252
    23ee:	af 4f       	sbci	r26, 0xFF	; 255
    23f0:	fc 01       	movw	r30, r24
    23f2:	24 91       	lpm	r18, Z
    23f4:	a7 fd       	sbrc	r26, 7
    23f6:	20 81       	ld	r18, Z
    23f8:	81 e0       	ldi	r24, 0x01	; 1
    23fa:	90 e0       	ldi	r25, 0x00	; 0
    23fc:	02 c0       	rjmp	.+4      	; 0x2402 <ADCInit+0x10a>
    23fe:	88 0f       	add	r24, r24
    2400:	99 1f       	adc	r25, r25
    2402:	2a 95       	dec	r18
    2404:	e2 f7       	brpl	.-8      	; 0x23fe <ADCInit+0x106>
    2406:	80 95       	com	r24
    2408:	48 23       	and	r20, r24
    240a:	4a b9       	out	0x0a, r20	; 10
    240c:	9b b1       	in	r25, 0x0b	; 11
    240e:	89 23       	and	r24, r25
    2410:	8b b9       	out	0x0b, r24	; 11
    2412:	07 c0       	rjmp	.+14     	; 0x2422 <ADCInit+0x12a>
    2414:	45 eb       	ldi	r20, 0xB5	; 181
    2416:	50 e0       	ldi	r21, 0x00	; 0
    2418:	61 e4       	ldi	r22, 0x41	; 65
    241a:	73 e0       	ldi	r23, 0x03	; 3
    241c:	80 e0       	ldi	r24, 0x00	; 0
    241e:	0e 94 d5 23 	call	0x47aa	; 0x47aa <PlatformAssert>
    2422:	cf 5f       	subi	r28, 0xFF	; 255
    2424:	c5 30       	cpi	r28, 0x05	; 5
    2426:	08 f4       	brcc	.+2      	; 0x242a <ADCInit+0x132>
    2428:	7a cf       	rjmp	.-268    	; 0x231e <ADCInit+0x26>
    242a:	81 e0       	ldi	r24, 0x01	; 1
    242c:	80 93 64 09 	sts	0x0964, r24	; 0x800964 <sg_eState>
    2430:	cf 91       	pop	r28
    2432:	08 95       	ret

Disassembly of section .text.CANLookupCommand:

00003ecc <CANLookupCommand>:
	{PKT_MODULE_SET_TIME,		ECANMessageType_SetTime},
	{PKT_MODULE_MAX_STATE,		ECANMessageType_MaxState}
};

static ECANMessageType CANLookupCommand( uint16_t u16ID )
{
    3ecc:	cf 93       	push	r28
    3ece:	df 93       	push	r29
    3ed0:	ec 01       	movw	r28, r24
	uint8_t u8Index = 0;
    3ed2:	90 e0       	ldi	r25, 0x00	; 0
	
	while( u8Index < (sizeof(sg_sRXCommandList)/sizeof(sg_sRXCommandList[0])) )
    3ed4:	26 c0       	rjmp	.+76     	; 0x3f22 <CANLookupCommand+0x56>
	{
		if( sg_sRXCommandList[u8Index].u16ID == u16ID )
    3ed6:	a9 2f       	mov	r26, r25
    3ed8:	b0 e0       	ldi	r27, 0x00	; 0
    3eda:	9d 01       	movw	r18, r26
    3edc:	22 0f       	add	r18, r18
    3ede:	33 1f       	adc	r19, r19
    3ee0:	2a 0f       	add	r18, r26
    3ee2:	3b 1f       	adc	r19, r27
    3ee4:	03 2e       	mov	r0, r19
    3ee6:	00 0c       	add	r0, r0
    3ee8:	44 0b       	sbc	r20, r20
    3eea:	2b 52       	subi	r18, 0x2B	; 43
    3eec:	3d 4f       	sbci	r19, 0xFD	; 253
    3eee:	4f 4f       	sbci	r20, 0xFF	; 255
    3ef0:	f9 01       	movw	r30, r18
    3ef2:	54 2f       	mov	r21, r20
    3ef4:	0e 94 0c 27 	call	0x4e18	; 0x4e18 <__xload_2>
    3ef8:	6c 17       	cp	r22, r28
    3efa:	7d 07       	cpc	r23, r29
    3efc:	89 f4       	brne	.+34     	; 0x3f20 <CANLookupCommand+0x54>
		{
			return( sg_sRXCommandList[u8Index].eType );
    3efe:	cd 01       	movw	r24, r26
    3f00:	88 0f       	add	r24, r24
    3f02:	99 1f       	adc	r25, r25
    3f04:	8a 0f       	add	r24, r26
    3f06:	9b 1f       	adc	r25, r27
    3f08:	02 96       	adiw	r24, 0x02	; 2
    3f0a:	09 2e       	mov	r0, r25
    3f0c:	00 0c       	add	r0, r0
    3f0e:	aa 0b       	sbc	r26, r26
    3f10:	8b 52       	subi	r24, 0x2B	; 43
    3f12:	9d 4f       	sbci	r25, 0xFD	; 253
    3f14:	af 4f       	sbci	r26, 0xFF	; 255
    3f16:	fc 01       	movw	r30, r24
    3f18:	84 91       	lpm	r24, Z
    3f1a:	a7 fd       	sbrc	r26, 7
    3f1c:	80 81       	ld	r24, Z
    3f1e:	04 c0       	rjmp	.+8      	; 0x3f28 <CANLookupCommand+0x5c>
		}
		
		u8Index++;
    3f20:	9f 5f       	subi	r25, 0xFF	; 255

static ECANMessageType CANLookupCommand( uint16_t u16ID )
{
	uint8_t u8Index = 0;
	
	while( u8Index < (sizeof(sg_sRXCommandList)/sizeof(sg_sRXCommandList[0])) )
    3f22:	9b 30       	cpi	r25, 0x0B	; 11
    3f24:	c0 f2       	brcs	.-80     	; 0x3ed6 <CANLookupCommand+0xa>
		}
		
		u8Index++;
	}
	
	return( ECANMessageType_MAX );
    3f26:	83 e1       	ldi	r24, 0x13	; 19
}
    3f28:	df 91       	pop	r29
    3f2a:	cf 91       	pop	r28
    3f2c:	08 95       	ret

Disassembly of section .text.CANMOBSet:

00001ab8 <CANMOBSet>:

static void CANMOBSet( uint8_t u8MOBIndex,
					   const SMOBDef* psDef,
					   uint8_t* pu8Data,
					   uint8_t u8DataLen )
{
    1ab8:	6f 92       	push	r6
    1aba:	7f 92       	push	r7
    1abc:	8f 92       	push	r8
    1abe:	9f 92       	push	r9
    1ac0:	bf 92       	push	r11
    1ac2:	cf 92       	push	r12
    1ac4:	df 92       	push	r13
    1ac6:	ef 92       	push	r14
    1ac8:	ff 92       	push	r15
    1aca:	0f 93       	push	r16
    1acc:	1f 93       	push	r17
    1ace:	cf 93       	push	r28
    1ad0:	df 93       	push	r29
    1ad2:	f8 2e       	mov	r15, r24
    1ad4:	6a 01       	movw	r12, r20
    1ad6:	e6 2e       	mov	r14, r22
    1ad8:	e9 01       	movw	r28, r18
	uint8_t u8CANCDMOBValue;
	uint32_t u32MessageID;
	uint8_t savedCANGIE;
	
	MBASSERT( u8MOBIndex <= 5 );
    1ada:	0f 2e       	mov	r0, r31
    1adc:	f5 e0       	ldi	r31, 0x05	; 5
    1ade:	6f 2e       	mov	r6, r31
    1ae0:	f0 2d       	mov	r31, r0
    1ae2:	68 16       	cp	r6, r24
    1ae4:	38 f4       	brcc	.+14     	; 0x1af4 <CANMOBSet+0x3c>
    1ae6:	40 ed       	ldi	r20, 0xD0	; 208
    1ae8:	50 e0       	ldi	r21, 0x00	; 0
    1aea:	6c e4       	ldi	r22, 0x4C	; 76
    1aec:	73 e0       	ldi	r23, 0x03	; 3
    1aee:	80 e0       	ldi	r24, 0x00	; 0
    1af0:	0e 94 d5 23 	call	0x47aa	; 0x47aa <PlatformAssert>
	MBASSERT( u8DataLen <= 8 );
    1af4:	09 30       	cpi	r16, 0x09	; 9
    1af6:	38 f0       	brcs	.+14     	; 0x1b06 <CANMOBSet+0x4e>
    1af8:	41 ed       	ldi	r20, 0xD1	; 209
    1afa:	50 e0       	ldi	r21, 0x00	; 0
    1afc:	6c e4       	ldi	r22, 0x4C	; 76
    1afe:	73 e0       	ldi	r23, 0x03	; 3
    1b00:	80 e0       	ldi	r24, 0x00	; 0
    1b02:	0e 94 d5 23 	call	0x47aa	; 0x47aa <PlatformAssert>
	
	// Disable CAN interrupts during MOB configuration to prevent corruption
	savedCANGIE = CANGIE;
    1b06:	eb ed       	ldi	r30, 0xDB	; 219
    1b08:	f0 e0       	ldi	r31, 0x00	; 0
    1b0a:	b0 80       	ld	r11, Z
	CANGIE &= ~(1 << ENIT);
    1b0c:	80 81       	ld	r24, Z
    1b0e:	8f 77       	andi	r24, 0x7F	; 127
    1b10:	80 83       	st	Z, r24
	
	// Set the MOB page, auto increment, and data index 0
	CANPAGE = u8MOBIndex << 4;
    1b12:	8f 2d       	mov	r24, r15
    1b14:	82 95       	swap	r24
    1b16:	80 7f       	andi	r24, 0xF0	; 240
    1b18:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f00ed>
	
	// Clear the MOB status
	CANSTMOB = 0;
    1b1c:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
	
	// Set the MOB registers for this page
	u8CANCDMOBValue = u8DataLen;
	u8CANCDMOBValue |= (psDef->u8Mode << CONMOB0);
    1b20:	f6 01       	movw	r30, r12
    1b22:	84 91       	lpm	r24, Z
    1b24:	e7 fc       	sbrc	r14, 7
    1b26:	80 81       	ld	r24, Z
    1b28:	20 e4       	ldi	r18, 0x40	; 64
    1b2a:	82 9f       	mul	r24, r18
    1b2c:	c0 01       	movw	r24, r0
    1b2e:	11 24       	eor	r1, r1
    1b30:	10 2f       	mov	r17, r16
    1b32:	18 2b       	or	r17, r24
	if( psDef->bReplyValid )
    1b34:	ae 2d       	mov	r26, r14
    1b36:	c6 01       	movw	r24, r12
    1b38:	01 96       	adiw	r24, 0x01	; 1
    1b3a:	a1 1d       	adc	r26, r1
    1b3c:	fc 01       	movw	r30, r24
    1b3e:	84 91       	lpm	r24, Z
    1b40:	a7 fd       	sbrc	r26, 7
    1b42:	80 81       	ld	r24, Z
    1b44:	81 11       	cpse	r24, r1
	{
		u8CANCDMOBValue |= (1 << RPLV);
    1b46:	10 62       	ori	r17, 0x20	; 32
	}
	u8CANCDMOBValue |= (1 << IDE);
    1b48:	10 61       	ori	r17, 0x10	; 16
	// Extended frame address format
	//	Bits 0-7: Pack / Module registration ID of sender (if assigned, zero otherwise)
	//	Bits 8-17: Reserved, set to zero.
	//	Bits 18-28: Static message ID (eg. 0x500)
	
	u32MessageID = (uint32_t)PlatformGetRegistrationID();
    1b4a:	0e 94 50 27 	call	0x4ea0	; 0x4ea0 <PlatformGetRegistrationID>
	u32MessageID |= (((uint32_t)psDef->u16ID) & 0x7ff) << 18;
    1b4e:	4e 2d       	mov	r20, r14
    1b50:	96 01       	movw	r18, r12
    1b52:	2e 5f       	subi	r18, 0xFE	; 254
    1b54:	3f 4f       	sbci	r19, 0xFF	; 255
    1b56:	4f 4f       	sbci	r20, 0xFF	; 255
    1b58:	f9 01       	movw	r30, r18
    1b5a:	54 2f       	mov	r21, r20
    1b5c:	0e 94 0c 27 	call	0x4e18	; 0x4e18 <__xload_2>
    1b60:	ab 01       	movw	r20, r22
    1b62:	57 70       	andi	r21, 0x07	; 7
    1b64:	60 e0       	ldi	r22, 0x00	; 0
    1b66:	70 e0       	ldi	r23, 0x00	; 0
    1b68:	03 2e       	mov	r0, r19
    1b6a:	32 e1       	ldi	r19, 0x12	; 18
    1b6c:	44 0f       	add	r20, r20
    1b6e:	55 1f       	adc	r21, r21
    1b70:	66 1f       	adc	r22, r22
    1b72:	77 1f       	adc	r23, r23
    1b74:	3a 95       	dec	r19
    1b76:	d1 f7       	brne	.-12     	; 0x1b6c <CANMOBSet+0xb4>
    1b78:	30 2d       	mov	r19, r0
    1b7a:	3a 01       	movw	r6, r20
    1b7c:	4b 01       	movw	r8, r22
    1b7e:	68 2a       	or	r6, r24
    1b80:	d4 01       	movw	r26, r8
    1b82:	c3 01       	movw	r24, r6
	
	CANIDT4 = psDef->bRTRTag?(1 << RTRTAG):0;
    1b84:	4e 2d       	mov	r20, r14
    1b86:	96 01       	movw	r18, r12
    1b88:	2a 5f       	subi	r18, 0xFA	; 250
    1b8a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b8c:	4f 4f       	sbci	r20, 0xFF	; 255
    1b8e:	f9 01       	movw	r30, r18
    1b90:	24 91       	lpm	r18, Z
    1b92:	47 fd       	sbrc	r20, 7
    1b94:	20 81       	ld	r18, Z
    1b96:	22 23       	and	r18, r18
    1b98:	11 f0       	breq	.+4      	; 0x1b9e <CANMOBSet+0xe6>
    1b9a:	24 e0       	ldi	r18, 0x04	; 4
    1b9c:	01 c0       	rjmp	.+2      	; 0x1ba0 <CANMOBSet+0xe8>
    1b9e:	20 e0       	ldi	r18, 0x00	; 0
    1ba0:	e0 ef       	ldi	r30, 0xF0	; 240
    1ba2:	f0 e0       	ldi	r31, 0x00	; 0
    1ba4:	20 83       	st	Z, r18
	CANIDT4 |= u32MessageID << 3;
    1ba6:	20 81       	ld	r18, Z
    1ba8:	38 2f       	mov	r19, r24
    1baa:	33 0f       	add	r19, r19
    1bac:	33 0f       	add	r19, r19
    1bae:	33 0f       	add	r19, r19
    1bb0:	23 2b       	or	r18, r19
    1bb2:	20 83       	st	Z, r18
	CANIDT3 = u32MessageID >> 5;
    1bb4:	ac 01       	movw	r20, r24
    1bb6:	bd 01       	movw	r22, r26
    1bb8:	68 94       	set
    1bba:	14 f8       	bld	r1, 4
    1bbc:	76 95       	lsr	r23
    1bbe:	67 95       	ror	r22
    1bc0:	57 95       	ror	r21
    1bc2:	47 95       	ror	r20
    1bc4:	16 94       	lsr	r1
    1bc6:	d1 f7       	brne	.-12     	; 0x1bbc <CANMOBSet+0x104>
    1bc8:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f00f1>
	CANIDT2 = u32MessageID >> 13;
    1bcc:	ac 01       	movw	r20, r24
    1bce:	bd 01       	movw	r22, r26
    1bd0:	03 2e       	mov	r0, r19
    1bd2:	3d e0       	ldi	r19, 0x0D	; 13
    1bd4:	76 95       	lsr	r23
    1bd6:	67 95       	ror	r22
    1bd8:	57 95       	ror	r21
    1bda:	47 95       	ror	r20
    1bdc:	3a 95       	dec	r19
    1bde:	d1 f7       	brne	.-12     	; 0x1bd4 <CANMOBSet+0x11c>
    1be0:	30 2d       	mov	r19, r0
    1be2:	40 93 f2 00 	sts	0x00F2, r20	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f00f2>
	CANIDT1 = u32MessageID >> 21;
    1be6:	07 2e       	mov	r0, r23
    1be8:	75 e1       	ldi	r23, 0x15	; 21
    1bea:	b6 95       	lsr	r27
    1bec:	a7 95       	ror	r26
    1bee:	97 95       	ror	r25
    1bf0:	87 95       	ror	r24
    1bf2:	7a 95       	dec	r23
    1bf4:	d1 f7       	brne	.-12     	; 0x1bea <CANMOBSet+0x132>
    1bf6:	70 2d       	mov	r23, r0
    1bf8:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f00f3>
	
	// Setup mask for the cmd (require matching ID extention bit)
	CANIDM4 = psDef->bRTRMask?(1 << RTRTAG):0;
    1bfc:	ae 2d       	mov	r26, r14
    1bfe:	c6 01       	movw	r24, r12
    1c00:	07 96       	adiw	r24, 0x07	; 7
    1c02:	a1 1d       	adc	r26, r1
    1c04:	fc 01       	movw	r30, r24
    1c06:	84 91       	lpm	r24, Z
    1c08:	a7 fd       	sbrc	r26, 7
    1c0a:	80 81       	ld	r24, Z
    1c0c:	88 23       	and	r24, r24
    1c0e:	11 f0       	breq	.+4      	; 0x1c14 <CANMOBSet+0x15c>
    1c10:	84 e0       	ldi	r24, 0x04	; 4
    1c12:	01 c0       	rjmp	.+2      	; 0x1c16 <CANMOBSet+0x15e>
    1c14:	80 e0       	ldi	r24, 0x00	; 0
    1c16:	e4 ef       	ldi	r30, 0xF4	; 244
    1c18:	f0 e0       	ldi	r31, 0x00	; 0
    1c1a:	80 83       	st	Z, r24
	CANIDM4 |= (1 << IDEMSK);
    1c1c:	80 81       	ld	r24, Z
    1c1e:	81 60       	ori	r24, 0x01	; 1
    1c20:	80 83       	st	Z, r24
	CANIDM3 = 0;
    1c22:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7f00f5>
	CANIDM2 = psDef->u16IDMask << 5;
    1c26:	ae 2d       	mov	r26, r14
    1c28:	c6 01       	movw	r24, r12
    1c2a:	04 96       	adiw	r24, 0x04	; 4
    1c2c:	a1 1d       	adc	r26, r1
    1c2e:	fc 01       	movw	r30, r24
    1c30:	5a 2f       	mov	r21, r26
    1c32:	0e 94 0c 27 	call	0x4e18	; 0x4e18 <__xload_2>
    1c36:	62 95       	swap	r22
    1c38:	66 0f       	add	r22, r22
    1c3a:	60 7e       	andi	r22, 0xE0	; 224
    1c3c:	60 93 f6 00 	sts	0x00F6, r22	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7f00f6>
	CANIDM1 = psDef->u16IDMask >> 3;
    1c40:	fc 01       	movw	r30, r24
    1c42:	5a 2f       	mov	r21, r26
    1c44:	0e 94 0c 27 	call	0x4e18	; 0x4e18 <__xload_2>
    1c48:	76 95       	lsr	r23
    1c4a:	67 95       	ror	r22
    1c4c:	76 95       	lsr	r23
    1c4e:	67 95       	ror	r22
    1c50:	76 95       	lsr	r23
    1c52:	67 95       	ror	r22
    1c54:	60 93 f7 00 	sts	0x00F7, r22	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7f00f7>
	
	// Set the data into the FIFO
	while( u8DataLen )
    1c58:	04 c0       	rjmp	.+8      	; 0x1c62 <CANMOBSet+0x1aa>
	{
		CANMSG = *pu8Data;
    1c5a:	89 91       	ld	r24, Y+
    1c5c:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
		
		pu8Data++;
		u8DataLen--;
    1c60:	01 50       	subi	r16, 0x01	; 1
	CANIDM3 = 0;
	CANIDM2 = psDef->u16IDMask << 5;
	CANIDM1 = psDef->u16IDMask >> 3;
	
	// Set the data into the FIFO
	while( u8DataLen )
    1c62:	01 11       	cpse	r16, r1
    1c64:	fa cf       	rjmp	.-12     	; 0x1c5a <CANMOBSet+0x1a2>
		pu8Data++;
		u8DataLen--;
	}
	
	// Send it now
	CANCDMOB = u8CANCDMOBValue;
    1c66:	10 93 ef 00 	sts	0x00EF, r17	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
	
	// Enable (activates the MOB) or disable the MOB interrupt
	if( psDef->u8Mode != CAN_DISABLED )
    1c6a:	f6 01       	movw	r30, r12
    1c6c:	84 91       	lpm	r24, Z
    1c6e:	e7 fc       	sbrc	r14, 7
    1c70:	80 81       	ld	r24, Z
    1c72:	88 23       	and	r24, r24
    1c74:	69 f0       	breq	.+26     	; 0x1c90 <CANMOBSet+0x1d8>
	{
		CANIE2 |= (1 << u8MOBIndex);
    1c76:	ee ed       	ldi	r30, 0xDE	; 222
    1c78:	f0 e0       	ldi	r31, 0x00	; 0
    1c7a:	20 81       	ld	r18, Z
    1c7c:	81 e0       	ldi	r24, 0x01	; 1
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	02 c0       	rjmp	.+4      	; 0x1c86 <CANMOBSet+0x1ce>
    1c82:	88 0f       	add	r24, r24
    1c84:	99 1f       	adc	r25, r25
    1c86:	fa 94       	dec	r15
    1c88:	e2 f7       	brpl	.-8      	; 0x1c82 <CANMOBSet+0x1ca>
    1c8a:	82 2b       	or	r24, r18
    1c8c:	80 83       	st	Z, r24
    1c8e:	0d c0       	rjmp	.+26     	; 0x1caa <CANMOBSet+0x1f2>
	}
	else
	{
		CANIE2 &= (uint8_t)~(1 << u8MOBIndex);
    1c90:	ee ed       	ldi	r30, 0xDE	; 222
    1c92:	f0 e0       	ldi	r31, 0x00	; 0
    1c94:	20 81       	ld	r18, Z
    1c96:	81 e0       	ldi	r24, 0x01	; 1
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	02 c0       	rjmp	.+4      	; 0x1ca0 <CANMOBSet+0x1e8>
    1c9c:	88 0f       	add	r24, r24
    1c9e:	99 1f       	adc	r25, r25
    1ca0:	fa 94       	dec	r15
    1ca2:	e2 f7       	brpl	.-8      	; 0x1c9c <CANMOBSet+0x1e4>
    1ca4:	80 95       	com	r24
    1ca6:	82 23       	and	r24, r18
    1ca8:	80 83       	st	Z, r24
	}
	
	// Restore CAN interrupts
	CANGIE = savedCANGIE;
    1caa:	b0 92 db 00 	sts	0x00DB, r11	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f00db>
}
    1cae:	df 91       	pop	r29
    1cb0:	cf 91       	pop	r28
    1cb2:	1f 91       	pop	r17
    1cb4:	0f 91       	pop	r16
    1cb6:	ff 90       	pop	r15
    1cb8:	ef 90       	pop	r14
    1cba:	df 90       	pop	r13
    1cbc:	cf 90       	pop	r12
    1cbe:	bf 90       	pop	r11
    1cc0:	9f 90       	pop	r9
    1cc2:	8f 90       	pop	r8
    1cc4:	7f 90       	pop	r7
    1cc6:	6f 90       	pop	r6
    1cc8:	08 95       	ret

Disassembly of section .text.CANSendMessageInternal:

0000201a <CANSendMessageInternal>:

static void CANSendMessageInternal( ECANMessageType eType,
									uint8_t* pu8Data,
									uint8_t u8DataLen,	
									bool bRetransmit )
{
    201a:	6f 92       	push	r6
    201c:	7f 92       	push	r7
    201e:	8f 92       	push	r8
    2020:	ef 92       	push	r14
    2022:	ff 92       	push	r15
    2024:	0f 93       	push	r16
    2026:	cf 93       	push	r28
    2028:	df 93       	push	r29
    202a:	c8 2f       	mov	r28, r24
    202c:	7b 01       	movw	r14, r22
    202e:	04 2f       	mov	r16, r20
    2030:	d2 2f       	mov	r29, r18
	const SMOBDef* psDef = NULL;
	
	if( ECANMessageType_ModuleAnnouncement == eType )
    2032:	88 23       	and	r24, r24
    2034:	f9 f0       	breq	.+62     	; 0x2074 <CANSendMessageInternal+0x5a>
	{
		psDef = &sg_sMOBModuleAnnouncement;
	}
	else if( ECANMessageType_ModuleStatus1 == eType )
    2036:	81 30       	cpi	r24, 0x01	; 1
    2038:	31 f1       	breq	.+76     	; 0x2086 <CANSendMessageInternal+0x6c>
	{
		psDef = &sg_sMOBModuleStatus1;
	}
	else if( ECANMessageType_ModuleStatus2 == eType )
    203a:	82 30       	cpi	r24, 0x02	; 2
    203c:	69 f1       	breq	.+90     	; 0x2098 <CANSendMessageInternal+0x7e>
	{
		psDef = &sg_sMOBModuleStatus2;
	}
	else if( ECANMessageType_ModuleStatus3 == eType )
    203e:	83 30       	cpi	r24, 0x03	; 3
    2040:	a1 f1       	breq	.+104    	; 0x20aa <CANSendMessageInternal+0x90>
	{
		psDef = &sg_sMOBModuleStatus3;
	}
	else if( ECANMessageType_ModuleCellCommStat1 == eType )
    2042:	86 30       	cpi	r24, 0x06	; 6
    2044:	d9 f1       	breq	.+118    	; 0x20bc <CANSendMessageInternal+0xa2>
	{
		psDef = &sg_sMOBModuleCellCommStat1;
	}
	else if( ECANMessageType_ModuleCellCommStat2 == eType )
    2046:	87 30       	cpi	r24, 0x07	; 7
    2048:	09 f4       	brne	.+2      	; 0x204c <CANSendMessageInternal+0x32>
    204a:	41 c0       	rjmp	.+130    	; 0x20ce <CANSendMessageInternal+0xb4>
	{
		psDef = &sg_sMOBModuleCellCommStat2;
	}
	else if( ECANMessageType_ModuleHardwareDetail == eType )
    204c:	85 30       	cpi	r24, 0x05	; 5
    204e:	09 f4       	brne	.+2      	; 0x2052 <CANSendMessageInternal+0x38>
    2050:	47 c0       	rjmp	.+142    	; 0x20e0 <CANSendMessageInternal+0xc6>
	{
		psDef = &sg_sMOBModuleHardwareDetail;
	}
	else if( ECANMessageType_ModuleCellDetail == eType )
    2052:	84 30       	cpi	r24, 0x04	; 4
    2054:	09 f4       	brne	.+2      	; 0x2058 <CANSendMessageInternal+0x3e>
    2056:	4d c0       	rjmp	.+154    	; 0x20f2 <CANSendMessageInternal+0xd8>
	{
		psDef = &sg_sMOBModuleCellDetail;
	}
	else if( ECANMessageType_ModuleRequestTime == eType )
    2058:	88 30       	cpi	r24, 0x08	; 8
    205a:	09 f4       	brne	.+2      	; 0x205e <CANSendMessageInternal+0x44>
    205c:	53 c0       	rjmp	.+166    	; 0x2104 <CANSendMessageInternal+0xea>
		psDef = &sg_sMOBModuleRequestTime;
	}
	else
	{
		// Invalid message type
		MBASSERT(0);
    205e:	43 e4       	ldi	r20, 0x43	; 67
    2060:	51 e0       	ldi	r21, 0x01	; 1
    2062:	6c e4       	ldi	r22, 0x4C	; 76
    2064:	73 e0       	ldi	r23, 0x03	; 3
    2066:	80 e0       	ldi	r24, 0x00	; 0
    2068:	0e 94 d5 23 	call	0x47aa	; 0x47aa <PlatformAssert>
static void CANSendMessageInternal( ECANMessageType eType,
									uint8_t* pu8Data,
									uint8_t u8DataLen,	
									bool bRetransmit )
{
	const SMOBDef* psDef = NULL;
    206c:	61 2c       	mov	r6, r1
    206e:	71 2c       	mov	r7, r1
    2070:	81 2c       	mov	r8, r1
    2072:	50 c0       	rjmp	.+160    	; 0x2114 <CANSendMessageInternal+0xfa>
	
	if( ECANMessageType_ModuleAnnouncement == eType )
	{
		psDef = &sg_sMOBModuleAnnouncement;
    2074:	0f 2e       	mov	r0, r31
    2076:	f7 e9       	ldi	r31, 0x97	; 151
    2078:	6f 2e       	mov	r6, r31
    207a:	f3 e0       	ldi	r31, 0x03	; 3
    207c:	7f 2e       	mov	r7, r31
    207e:	f0 e0       	ldi	r31, 0x00	; 0
    2080:	8f 2e       	mov	r8, r31
    2082:	f0 2d       	mov	r31, r0
    2084:	47 c0       	rjmp	.+142    	; 0x2114 <CANSendMessageInternal+0xfa>
	}
	else if( ECANMessageType_ModuleStatus1 == eType )
	{
		psDef = &sg_sMOBModuleStatus1;
    2086:	0f 2e       	mov	r0, r31
    2088:	ff e8       	ldi	r31, 0x8F	; 143
    208a:	6f 2e       	mov	r6, r31
    208c:	f3 e0       	ldi	r31, 0x03	; 3
    208e:	7f 2e       	mov	r7, r31
    2090:	f0 e0       	ldi	r31, 0x00	; 0
    2092:	8f 2e       	mov	r8, r31
    2094:	f0 2d       	mov	r31, r0
    2096:	3e c0       	rjmp	.+124    	; 0x2114 <CANSendMessageInternal+0xfa>
	}
	else if( ECANMessageType_ModuleStatus2 == eType )
	{
		psDef = &sg_sMOBModuleStatus2;
    2098:	0f 2e       	mov	r0, r31
    209a:	f7 e8       	ldi	r31, 0x87	; 135
    209c:	6f 2e       	mov	r6, r31
    209e:	f3 e0       	ldi	r31, 0x03	; 3
    20a0:	7f 2e       	mov	r7, r31
    20a2:	f0 e0       	ldi	r31, 0x00	; 0
    20a4:	8f 2e       	mov	r8, r31
    20a6:	f0 2d       	mov	r31, r0
    20a8:	35 c0       	rjmp	.+106    	; 0x2114 <CANSendMessageInternal+0xfa>
	}
	else if( ECANMessageType_ModuleStatus3 == eType )
	{
		psDef = &sg_sMOBModuleStatus3;
    20aa:	0f 2e       	mov	r0, r31
    20ac:	ff e7       	ldi	r31, 0x7F	; 127
    20ae:	6f 2e       	mov	r6, r31
    20b0:	f3 e0       	ldi	r31, 0x03	; 3
    20b2:	7f 2e       	mov	r7, r31
    20b4:	f0 e0       	ldi	r31, 0x00	; 0
    20b6:	8f 2e       	mov	r8, r31
    20b8:	f0 2d       	mov	r31, r0
    20ba:	2c c0       	rjmp	.+88     	; 0x2114 <CANSendMessageInternal+0xfa>
	}
	else if( ECANMessageType_ModuleCellCommStat1 == eType )
	{
		psDef = &sg_sMOBModuleCellCommStat1;
    20bc:	0f 2e       	mov	r0, r31
    20be:	f7 e7       	ldi	r31, 0x77	; 119
    20c0:	6f 2e       	mov	r6, r31
    20c2:	f3 e0       	ldi	r31, 0x03	; 3
    20c4:	7f 2e       	mov	r7, r31
    20c6:	f0 e0       	ldi	r31, 0x00	; 0
    20c8:	8f 2e       	mov	r8, r31
    20ca:	f0 2d       	mov	r31, r0
    20cc:	23 c0       	rjmp	.+70     	; 0x2114 <CANSendMessageInternal+0xfa>
	}
	else if( ECANMessageType_ModuleCellCommStat2 == eType )
	{
		psDef = &sg_sMOBModuleCellCommStat2;
    20ce:	0f 2e       	mov	r0, r31
    20d0:	ff e6       	ldi	r31, 0x6F	; 111
    20d2:	6f 2e       	mov	r6, r31
    20d4:	f3 e0       	ldi	r31, 0x03	; 3
    20d6:	7f 2e       	mov	r7, r31
    20d8:	f0 e0       	ldi	r31, 0x00	; 0
    20da:	8f 2e       	mov	r8, r31
    20dc:	f0 2d       	mov	r31, r0
    20de:	1a c0       	rjmp	.+52     	; 0x2114 <CANSendMessageInternal+0xfa>
	}
	else if( ECANMessageType_ModuleHardwareDetail == eType )
	{
		psDef = &sg_sMOBModuleHardwareDetail;
    20e0:	0f 2e       	mov	r0, r31
    20e2:	ff e5       	ldi	r31, 0x5F	; 95
    20e4:	6f 2e       	mov	r6, r31
    20e6:	f3 e0       	ldi	r31, 0x03	; 3
    20e8:	7f 2e       	mov	r7, r31
    20ea:	f0 e0       	ldi	r31, 0x00	; 0
    20ec:	8f 2e       	mov	r8, r31
    20ee:	f0 2d       	mov	r31, r0
    20f0:	11 c0       	rjmp	.+34     	; 0x2114 <CANSendMessageInternal+0xfa>
	}
	else if( ECANMessageType_ModuleCellDetail == eType )
	{
		psDef = &sg_sMOBModuleCellDetail;
    20f2:	0f 2e       	mov	r0, r31
    20f4:	f7 e6       	ldi	r31, 0x67	; 103
    20f6:	6f 2e       	mov	r6, r31
    20f8:	f3 e0       	ldi	r31, 0x03	; 3
    20fa:	7f 2e       	mov	r7, r31
    20fc:	f0 e0       	ldi	r31, 0x00	; 0
    20fe:	8f 2e       	mov	r8, r31
    2100:	f0 2d       	mov	r31, r0
    2102:	08 c0       	rjmp	.+16     	; 0x2114 <CANSendMessageInternal+0xfa>
	}
	else if( ECANMessageType_ModuleRequestTime == eType )
	{
		psDef = &sg_sMOBModuleRequestTime;
    2104:	0f 2e       	mov	r0, r31
    2106:	f7 e5       	ldi	r31, 0x57	; 87
    2108:	6f 2e       	mov	r6, r31
    210a:	f3 e0       	ldi	r31, 0x03	; 3
    210c:	7f 2e       	mov	r7, r31
    210e:	f0 e0       	ldi	r31, 0x00	; 0
    2110:	8f 2e       	mov	r8, r31
    2112:	f0 2d       	mov	r31, r0
	{
		// Invalid message type
		MBASSERT(0);
	}
	
	if(bRetransmit && sg_bInRetransmit) {
    2114:	dd 23       	and	r29, r29
    2116:	21 f0       	breq	.+8      	; 0x2120 <CANSendMessageInternal+0x106>
    2118:	80 91 65 09 	lds	r24, 0x0965	; 0x800965 <sg_bInRetransmit>
    211c:	81 11       	cpse	r24, r1
    211e:	30 c0       	rjmp	.+96     	; 0x2180 <CANSendMessageInternal+0x166>
		// Already in a retransmit, don't allow nested retries
		return;
	}
	if( bRetransmit || (false == sg_bBusy) )
    2120:	d1 11       	cpse	r29, r1
    2122:	04 c0       	rjmp	.+8      	; 0x212c <CANSendMessageInternal+0x112>
    2124:	80 91 69 09 	lds	r24, 0x0969	; 0x800969 <sg_bBusy>
    2128:	81 11       	cpse	r24, r1
    212a:	2a c0       	rjmp	.+84     	; 0x2180 <CANSendMessageInternal+0x166>
	{
		sg_bBusy = true;
    212c:	81 e0       	ldi	r24, 0x01	; 1
    212e:	80 93 69 09 	sts	0x0969, r24	; 0x800969 <sg_bBusy>
		
		// Save this message info for retransmit later if needed
		if( false == bRetransmit )
    2132:	d1 11       	cpse	r29, r1
    2134:	1a c0       	rjmp	.+52     	; 0x216a <CANSendMessageInternal+0x150>
		{
			sg_u8TransmitAttempts = 0;
    2136:	10 92 68 09 	sts	0x0968, r1	; 0x800968 <sg_u8TransmitAttempts>
			sg_eLastTXType = eType;
    213a:	c0 93 67 09 	sts	0x0967, r28	; 0x800967 <sg_eLastTXType>
			MBASSERT(u8DataLen <= CAN_MAX_MSG_SIZE);
    213e:	09 30       	cpi	r16, 0x09	; 9
    2140:	38 f0       	brcs	.+14     	; 0x2150 <CANSendMessageInternal+0x136>
    2142:	43 e5       	ldi	r20, 0x53	; 83
    2144:	51 e0       	ldi	r21, 0x01	; 1
    2146:	6c e4       	ldi	r22, 0x4C	; 76
    2148:	73 e0       	ldi	r23, 0x03	; 3
    214a:	80 e0       	ldi	r24, 0x00	; 0
    214c:	0e 94 d5 23 	call	0x47aa	; 0x47aa <PlatformAssert>
			memcpy(sg_u8LastTXData, pu8Data, u8DataLen);
    2150:	20 2f       	mov	r18, r16
    2152:	30 e0       	ldi	r19, 0x00	; 0
    2154:	c7 01       	movw	r24, r14
    2156:	a0 e8       	ldi	r26, 0x80	; 128
    2158:	ac 01       	movw	r20, r24
    215a:	6a 2f       	mov	r22, r26
    215c:	8d e3       	ldi	r24, 0x3D	; 61
    215e:	99 e0       	ldi	r25, 0x09	; 9
    2160:	0e 94 79 23 	call	0x46f2	; 0x46f2 <memcpy>
			sg_u8LastTXDataLen = u8DataLen;
    2164:	00 93 66 09 	sts	0x0966, r16	; 0x800966 <sg_u8LastTXDataLen>
    2168:	05 c0       	rjmp	.+10     	; 0x2174 <CANSendMessageInternal+0x15a>
		}
		else
		{
			sg_u8TransmitAttempts++;
    216a:	80 91 68 09 	lds	r24, 0x0968	; 0x800968 <sg_u8TransmitAttempts>
    216e:	8f 5f       	subi	r24, 0xFF	; 255
    2170:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <sg_u8TransmitAttempts>
		}
		
		// Send it now
		CANMOBSet( CANMOB_TX_IDX, psDef, pu8Data, u8DataLen );
    2174:	97 01       	movw	r18, r14
    2176:	68 2d       	mov	r22, r8
    2178:	a3 01       	movw	r20, r6
    217a:	81 e0       	ldi	r24, 0x01	; 1
    217c:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <CANMOBSet>
	}
}
    2180:	df 91       	pop	r29
    2182:	cf 91       	pop	r28
    2184:	0f 91       	pop	r16
    2186:	ff 90       	pop	r15
    2188:	ef 90       	pop	r14
    218a:	8f 90       	pop	r8
    218c:	7f 90       	pop	r7
    218e:	6f 90       	pop	r6
    2190:	08 95       	ret

Disassembly of section .text.CANMOBInterrupt:

00001e88 <CANMOBInterrupt>:

void CANMOBInterrupt( uint8_t u8MOBIndex )
{
    1e88:	cf 92       	push	r12
    1e8a:	df 92       	push	r13
    1e8c:	ff 92       	push	r15
    1e8e:	0f 93       	push	r16
    1e90:	1f 93       	push	r17
    1e92:	cf 93       	push	r28
    1e94:	df 93       	push	r29
    1e96:	cd b7       	in	r28, 0x3d	; 61
    1e98:	de b7       	in	r29, 0x3e	; 62
    1e9a:	28 97       	sbiw	r28, 0x08	; 8
    1e9c:	0f b6       	in	r0, 0x3f	; 63
    1e9e:	f8 94       	cli
    1ea0:	de bf       	out	0x3e, r29	; 62
    1ea2:	0f be       	out	0x3f, r0	; 63
    1ea4:	cd bf       	out	0x3d, r28	; 61
	// Set the MOB page first (and zero the data index)
	CANPAGE = u8MOBIndex << 4;
    1ea6:	98 2f       	mov	r25, r24
    1ea8:	92 95       	swap	r25
    1eaa:	90 7f       	andi	r25, 0xF0	; 240
    1eac:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f00ed>
	
	// Temporarily disable the MOB to examine and modify the registers
	CANIE2 &= (uint8_t)~(1 << u8MOBIndex);
    1eb0:	ee ed       	ldi	r30, 0xDE	; 222
    1eb2:	f0 e0       	ldi	r31, 0x00	; 0
    1eb4:	20 81       	ld	r18, Z
    1eb6:	01 e0       	ldi	r16, 0x01	; 1
    1eb8:	10 e0       	ldi	r17, 0x00	; 0
    1eba:	08 2e       	mov	r0, r24
    1ebc:	02 c0       	rjmp	.+4      	; 0x1ec2 <CANMOBInterrupt+0x3a>
    1ebe:	00 0f       	add	r16, r16
    1ec0:	11 1f       	adc	r17, r17
    1ec2:	0a 94       	dec	r0
    1ec4:	e2 f7       	brpl	.-8      	; 0x1ebe <CANMOBInterrupt+0x36>
    1ec6:	90 2f       	mov	r25, r16
    1ec8:	90 95       	com	r25
    1eca:	92 23       	and	r25, r18
    1ecc:	90 83       	st	Z, r25
	CANCDMOB &= (uint8_t)~((1 << CONMOB0) | (1 << CONMOB1));
    1ece:	ef ee       	ldi	r30, 0xEF	; 239
    1ed0:	f0 e0       	ldi	r31, 0x00	; 0
    1ed2:	90 81       	ld	r25, Z
    1ed4:	9f 73       	andi	r25, 0x3F	; 63
    1ed6:	90 83       	st	Z, r25
	
	if( CANMOB_RX_IDX == u8MOBIndex )
    1ed8:	81 11       	cpse	r24, r1
    1eda:	5d c0       	rjmp	.+186    	; 0x1f96 <CANMOBInterrupt+0x10e>
	{
		// TX success?  Just clear it since this is the RX context
		if( CANSTMOB & (1 << TXOK) )
    1edc:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    1ee0:	86 ff       	sbrs	r24, 6
    1ee2:	09 c0       	rjmp	.+18     	; 0x1ef6 <CANMOBInterrupt+0x6e>
		{
			// Clear it
			CANSTMOB &= ~(1 << TXOK);
    1ee4:	ee ee       	ldi	r30, 0xEE	; 238
    1ee6:	f0 e0       	ldi	r31, 0x00	; 0
    1ee8:	80 81       	ld	r24, Z
    1eea:	8f 7b       	andi	r24, 0xBF	; 191
    1eec:	80 83       	st	Z, r24
            sg_bBusy = false;
    1eee:	10 92 69 09 	sts	0x0969, r1	; 0x800969 <sg_bBusy>
            sg_bInRetransmit = false;  // Clear flag on success	
    1ef2:	10 92 65 09 	sts	0x0965, r1	; 0x800965 <sg_bInRetransmit>
		}
		// RX success?
		if( CANSTMOB & (1 << RXOK) )
    1ef6:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    1efa:	85 ff       	sbrs	r24, 5
    1efc:	38 c0       	rjmp	.+112    	; 0x1f6e <CANMOBInterrupt+0xe6>
		{
			// Clear it
			CANSTMOB &= ~(1 << RXOK);
    1efe:	ee ee       	ldi	r30, 0xEE	; 238
    1f00:	f0 e0       	ldi	r31, 0x00	; 0
    1f02:	80 81       	ld	r24, Z
    1f04:	8f 7d       	andi	r24, 0xDF	; 223
    1f06:	80 83       	st	Z, r24
		
			if( sg_pfRXCallback )
    1f08:	c0 90 4d 09 	lds	r12, 0x094D	; 0x80094d <sg_pfRXCallback>
    1f0c:	d0 90 4e 09 	lds	r13, 0x094E	; 0x80094e <sg_pfRXCallback+0x1>
    1f10:	c1 14       	cp	r12, r1
    1f12:	d1 04       	cpc	r13, r1
    1f14:	61 f1       	breq	.+88     	; 0x1f6e <CANMOBInterrupt+0xe6>
			{
				ECANMessageType eType;
				uint16_t u16ID = 0;
				uint8_t u8Data[8];
				uint8_t u8DataLen = CANCDMOB & 0x0f;
    1f16:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    1f1a:	8f 70       	andi	r24, 0x0F	; 15
    1f1c:	f8 2e       	mov	r15, r24
				uint8_t u8Index = 0;
			
				// Grab the messageID from the identifier registers
				// TODO: This extraction may be wrong for extended frames
				// but it worked with the real Pack Controller somehow
				u16ID = ((uint16_t)CANIDT1) << 3;
    1f1e:	40 91 f3 00 	lds	r20, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f00f3>
    1f22:	50 e0       	ldi	r21, 0x00	; 0
    1f24:	44 0f       	add	r20, r20
    1f26:	55 1f       	adc	r21, r21
    1f28:	44 0f       	add	r20, r20
    1f2a:	55 1f       	adc	r21, r21
    1f2c:	44 0f       	add	r20, r20
    1f2e:	55 1f       	adc	r21, r21
				u16ID |= CANIDT2 >> 5;
    1f30:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f00f2>
    1f34:	82 95       	swap	r24
    1f36:	86 95       	lsr	r24
    1f38:	87 70       	andi	r24, 0x07	; 7
    1f3a:	48 2b       	or	r20, r24
			{
				ECANMessageType eType;
				uint16_t u16ID = 0;
				uint8_t u8Data[8];
				uint8_t u8DataLen = CANCDMOB & 0x0f;
				uint8_t u8Index = 0;
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
				// but it worked with the real Pack Controller somehow
				u16ID = ((uint16_t)CANIDT1) << 3;
				u16ID |= CANIDT2 >> 5;
			
				// Pull the data out into a temp buffer
				while( u8Index < u8DataLen )
    1f3e:	0a c0       	rjmp	.+20     	; 0x1f54 <CANMOBInterrupt+0xcc>
				{
					u8Data[u8Index] = CANMSG;
    1f40:	20 91 fa 00 	lds	r18, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
    1f44:	e1 e0       	ldi	r30, 0x01	; 1
    1f46:	f0 e0       	ldi	r31, 0x00	; 0
    1f48:	ec 0f       	add	r30, r28
    1f4a:	fd 1f       	adc	r31, r29
    1f4c:	e9 0f       	add	r30, r25
    1f4e:	f1 1d       	adc	r31, r1
    1f50:	20 83       	st	Z, r18
					u8Index++;
    1f52:	9f 5f       	subi	r25, 0xFF	; 255
				// but it worked with the real Pack Controller somehow
				u16ID = ((uint16_t)CANIDT1) << 3;
				u16ID |= CANIDT2 >> 5;
			
				// Pull the data out into a temp buffer
				while( u8Index < u8DataLen )
    1f54:	9f 15       	cp	r25, r15
    1f56:	a0 f3       	brcs	.-24     	; 0x1f40 <CANMOBInterrupt+0xb8>
					u8Data[u8Index] = CANMSG;
					u8Index++;
				}
			
				// Lookup ID to see if it matches one of ours
				eType = CANLookupCommand( u16ID );
    1f58:	ca 01       	movw	r24, r20
    1f5a:	0e 94 66 1f 	call	0x3ecc	; 0x3ecc <CANLookupCommand>
			
				if( eType != ECANMessageType_MAX )
    1f5e:	83 31       	cpi	r24, 0x13	; 19
    1f60:	31 f0       	breq	.+12     	; 0x1f6e <CANMOBInterrupt+0xe6>
				{
					// Call comamnd handler
					sg_pfRXCallback( eType, u8Data, u8DataLen );
    1f62:	4f 2d       	mov	r20, r15
    1f64:	be 01       	movw	r22, r28
    1f66:	6f 5f       	subi	r22, 0xFF	; 255
    1f68:	7f 4f       	sbci	r23, 0xFF	; 255
    1f6a:	f6 01       	movw	r30, r12
    1f6c:	09 95       	icall
				}
			}
		}
	
		// If receive error, clear the bits
		if( CANSTMOB & ((1 << SERR) | (1 << CERR) | (1 << FERR)) )
    1f6e:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    1f72:	8e 70       	andi	r24, 0x0E	; 14
    1f74:	29 f0       	breq	.+10     	; 0x1f80 <CANMOBInterrupt+0xf8>
		{
			// Clear it.  Just ignore
			CANSTMOB &= ~((1 << SERR) | (1 << CERR) | (1 << FERR));
    1f76:	ee ee       	ldi	r30, 0xEE	; 238
    1f78:	f0 e0       	ldi	r31, 0x00	; 0
    1f7a:	80 81       	ld	r24, Z
    1f7c:	81 7f       	andi	r24, 0xF1	; 241
    1f7e:	80 83       	st	Z, r24
		}
	
		// Re-enable RX now
		CANIE2 |= (1 << u8MOBIndex);
    1f80:	ee ed       	ldi	r30, 0xDE	; 222
    1f82:	f0 e0       	ldi	r31, 0x00	; 0
    1f84:	80 81       	ld	r24, Z
    1f86:	08 2b       	or	r16, r24
    1f88:	00 83       	st	Z, r16
		CANCDMOB |= (1 << CONMOB1);
    1f8a:	ef ee       	ldi	r30, 0xEF	; 239
    1f8c:	f0 e0       	ldi	r31, 0x00	; 0
    1f8e:	80 81       	ld	r24, Z
    1f90:	80 68       	ori	r24, 0x80	; 128
    1f92:	80 83       	st	Z, r24
    1f94:	34 c0       	rjmp	.+104    	; 0x1ffe <CANMOBInterrupt+0x176>
	}
	else if( CANMOB_TX_IDX == u8MOBIndex )
    1f96:	81 30       	cpi	r24, 0x01	; 1
    1f98:	91 f5       	brne	.+100    	; 0x1ffe <CANMOBInterrupt+0x176>
	{
		if( CANSTMOB & (1 << TXOK) )
    1f9a:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    1f9e:	86 ff       	sbrs	r24, 6
    1fa0:	07 c0       	rjmp	.+14     	; 0x1fb0 <CANMOBInterrupt+0x128>
		{
			// Clear it
			CANSTMOB &= ~(1 << TXOK);
    1fa2:	ee ee       	ldi	r30, 0xEE	; 238
    1fa4:	f0 e0       	ldi	r31, 0x00	; 0
    1fa6:	80 81       	ld	r24, Z
    1fa8:	8f 7b       	andi	r24, 0xBF	; 191
    1faa:	80 83       	st	Z, r24
		
			sg_bBusy = false;
    1fac:	10 92 69 09 	sts	0x0969, r1	; 0x800969 <sg_bBusy>
		}
		
		// RX success, just clear it since this is the TX context
		if( CANSTMOB & (1 << RXOK) )
    1fb0:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    1fb4:	85 ff       	sbrs	r24, 5
    1fb6:	05 c0       	rjmp	.+10     	; 0x1fc2 <CANMOBInterrupt+0x13a>
		{
			// Clear it
			CANSTMOB &= ~(1 << RXOK);
    1fb8:	ee ee       	ldi	r30, 0xEE	; 238
    1fba:	f0 e0       	ldi	r31, 0x00	; 0
    1fbc:	80 81       	ld	r24, Z
    1fbe:	8f 7d       	andi	r24, 0xDF	; 223
    1fc0:	80 83       	st	Z, r24
		}

		// If TX Error on transmit (collision with another device)
		// -or- ACK error (nobody listening),
		// retry send
		if( CANSTMOB & ((1 << BERR) | (1 << AERR) | (1 << SERR)) )
    1fc2:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    1fc6:	89 71       	andi	r24, 0x19	; 25
    1fc8:	d1 f0       	breq	.+52     	; 0x1ffe <CANMOBInterrupt+0x176>
		{
			// Clear it
			CANSTMOB &= ~((1 << BERR) | (1 << AERR) | (1 << SERR));
    1fca:	ee ee       	ldi	r30, 0xEE	; 238
    1fcc:	f0 e0       	ldi	r31, 0x00	; 0
    1fce:	80 81       	ld	r24, Z
    1fd0:	86 7e       	andi	r24, 0xE6	; 230
    1fd2:	80 83       	st	Z, r24

			if( sg_u8TransmitAttempts < 20 )
    1fd4:	80 91 68 09 	lds	r24, 0x0968	; 0x800968 <sg_u8TransmitAttempts>
    1fd8:	84 31       	cpi	r24, 0x14	; 20
    1fda:	68 f4       	brcc	.+26     	; 0x1ff6 <CANMOBInterrupt+0x16e>
			{
				// Retransmit now
               sg_bInRetransmit = true;  // Set flag before retry
    1fdc:	81 e0       	ldi	r24, 0x01	; 1
    1fde:	80 93 65 09 	sts	0x0965, r24	; 0x800965 <sg_bInRetransmit>
               CANSendMessageInternal( sg_eLastTXType, sg_u8LastTXData, sg_u8LastTXDataLen, true );
    1fe2:	21 e0       	ldi	r18, 0x01	; 1
    1fe4:	40 91 66 09 	lds	r20, 0x0966	; 0x800966 <sg_u8LastTXDataLen>
    1fe8:	6d e3       	ldi	r22, 0x3D	; 61
    1fea:	79 e0       	ldi	r23, 0x09	; 9
    1fec:	80 91 67 09 	lds	r24, 0x0967	; 0x800967 <sg_eLastTXType>
    1ff0:	0e 94 0d 10 	call	0x201a	; 0x201a <CANSendMessageInternal>
    1ff4:	04 c0       	rjmp	.+8      	; 0x1ffe <CANMOBInterrupt+0x176>
			}
			else
			{
				// Retries exhausted.  Give up
				sg_bBusy = false;
    1ff6:	10 92 69 09 	sts	0x0969, r1	; 0x800969 <sg_bBusy>
                sg_bInRetransmit = false;
    1ffa:	10 92 65 09 	sts	0x0965, r1	; 0x800965 <sg_bInRetransmit>
			}
		}
	}
}
    1ffe:	28 96       	adiw	r28, 0x08	; 8
    2000:	0f b6       	in	r0, 0x3f	; 63
    2002:	f8 94       	cli
    2004:	de bf       	out	0x3e, r29	; 62
    2006:	0f be       	out	0x3f, r0	; 63
    2008:	cd bf       	out	0x3d, r28	; 61
    200a:	df 91       	pop	r29
    200c:	cf 91       	pop	r28
    200e:	1f 91       	pop	r17
    2010:	0f 91       	pop	r16
    2012:	ff 90       	pop	r15
    2014:	df 90       	pop	r13
    2016:	cf 90       	pop	r12
    2018:	08 95       	ret

Disassembly of section .text.__vector_18:

00002568 <__vector_18>:

// Generic CAN interrupt handler
// Check interrrupt sources and clear them (by servicing or explicit clearing)
ISR(CAN_INT_vect, ISR_BLOCK)
{
    2568:	1f 92       	push	r1
    256a:	0f 92       	push	r0
    256c:	0f b6       	in	r0, 0x3f	; 63
    256e:	0f 92       	push	r0
    2570:	11 24       	eor	r1, r1
    2572:	0f 93       	push	r16
    2574:	1f 93       	push	r17
    2576:	2f 93       	push	r18
    2578:	3f 93       	push	r19
    257a:	4f 93       	push	r20
    257c:	5f 93       	push	r21
    257e:	6f 93       	push	r22
    2580:	7f 93       	push	r23
    2582:	8f 93       	push	r24
    2584:	9f 93       	push	r25
    2586:	af 93       	push	r26
    2588:	bf 93       	push	r27
    258a:	cf 93       	push	r28
    258c:	df 93       	push	r29
    258e:	ef 93       	push	r30
    2590:	ff 93       	push	r31
	// Save state we'll need to restore
	uint8_t saved_cangie = CANGIE;
    2592:	eb ed       	ldi	r30, 0xDB	; 219
    2594:	f0 e0       	ldi	r31, 0x00	; 0
    2596:	d0 81       	ld	r29, Z
	uint8_t saved_canie2 = CANIE2;	// Temporarily disable CAN interrupts to prevent reentry
    2598:	10 91 de 00 	lds	r17, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7f00de>
	CANGIE &= (uint8_t)~(1 << ENIT);
    259c:	80 81       	ld	r24, Z
    259e:	8f 77       	andi	r24, 0x7F	; 127
    25a0:	80 83       	st	Z, r24

	// Do NOT re-enable global interrupts - this causes race conditions!
	
	 uint8_t sit = CANSIT2;
    25a2:	c0 91 e0 00 	lds	r28, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f00e0>
	 
	 // Most common interrupts first  *claude
	 if(sit & (1 << CANMOB_RX_IDX)) {
    25a6:	c0 ff       	sbrs	r28, 0
    25a8:	0c c0       	rjmp	.+24     	; 0x25c2 <__vector_18+0x5a>
		 CANMOBInterrupt(CANMOB_RX_IDX);
    25aa:	80 e0       	ldi	r24, 0x00	; 0
    25ac:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <CANMOBInterrupt>
		 CANMOBSet(CANMOB_RX_IDX, &sg_sMOBGenericReceive, NULL, 0);
    25b0:	00 e0       	ldi	r16, 0x00	; 0
    25b2:	20 e0       	ldi	r18, 0x00	; 0
    25b4:	30 e0       	ldi	r19, 0x00	; 0
    25b6:	4f e9       	ldi	r20, 0x9F	; 159
    25b8:	53 e0       	ldi	r21, 0x03	; 3
    25ba:	60 e0       	ldi	r22, 0x00	; 0
    25bc:	80 e0       	ldi	r24, 0x00	; 0
    25be:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <CANMOBSet>
	 }
	 
	
	// Check TX MOB
	if( sit & (1 << CANMOB_TX_IDX) )
    25c2:	c1 ff       	sbrs	r28, 1
    25c4:	03 c0       	rjmp	.+6      	; 0x25cc <__vector_18+0x64>
	{
		CANMOBInterrupt( CANMOB_TX_IDX );
    25c6:	81 e0       	ldi	r24, 0x01	; 1
    25c8:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <CANMOBInterrupt>
	}
	
	// Now the generic, non-MOB interrupts (some of which may have already been handled by the MOB handler)
	
	// Bus Off interrupt
	if( CANGIT & (1 << BOFFIT) )
    25cc:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    25d0:	86 ff       	sbrs	r24, 6
    25d2:	03 c0       	rjmp	.+6      	; 0x25da <__vector_18+0x72>
	{
		// Just clear it for now
		CANGIT = (1 << BOFFIT);
    25d4:	80 e4       	ldi	r24, 0x40	; 64
    25d6:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
	}
	
	// Frame buffer receive (burst receive interrupt)
	// This should not be used
	if( CANGIT & (1 << BXOK) )
    25da:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    25de:	84 ff       	sbrs	r24, 4
    25e0:	0a c0       	rjmp	.+20     	; 0x25f6 <__vector_18+0x8e>
	{
		MBASSERT(0);
    25e2:	45 ef       	ldi	r20, 0xF5	; 245
    25e4:	51 e0       	ldi	r21, 0x01	; 1
    25e6:	6c e4       	ldi	r22, 0x4C	; 76
    25e8:	73 e0       	ldi	r23, 0x03	; 3
    25ea:	80 e0       	ldi	r24, 0x00	; 0
    25ec:	0e 94 d5 23 	call	0x47aa	; 0x47aa <PlatformAssert>
		
		// TODO: Must write the CONMOB fields of the MOB that interrupted first?
		// Just clear it for now
		CANGIT = (1 << BXOK);
    25f0:	80 e1       	ldi	r24, 0x10	; 16
    25f2:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
	}
	
	// Bit stuffing error on receive
	if( CANGIT & (1 << SERG) )
    25f6:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    25fa:	83 ff       	sbrs	r24, 3
    25fc:	03 c0       	rjmp	.+6      	; 0x2604 <__vector_18+0x9c>
	{
		// Just clear it for now.  Ignored.
		CANGIT = (1 << SERG);
    25fe:	88 e0       	ldi	r24, 0x08	; 8
    2600:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
	}
	
	// CRC error on receive
	if( CANGIT & (1 << CERG) )
    2604:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    2608:	82 ff       	sbrs	r24, 2
    260a:	03 c0       	rjmp	.+6      	; 0x2612 <__vector_18+0xaa>
	{
		// Just clear it for now.  Ignored.
		CANGIT = (1 << CERG);
    260c:	84 e0       	ldi	r24, 0x04	; 4
    260e:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
	}
	
	// Form error
	if( CANGIT & (1 << FERG) )
    2612:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    2616:	81 ff       	sbrs	r24, 1
    2618:	03 c0       	rjmp	.+6      	; 0x2620 <__vector_18+0xb8>
	{
		// If detected form error on transmit, could be duplicate to MOB error interrupt (see 16.8.2 - Interrupt Behavior)
		// Ignore this one
		
		// Just clear it for now.  Ignored.
		CANGIT = (1 << FERG);
    261a:	82 e0       	ldi	r24, 0x02	; 2
    261c:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
	}
	
	// ACK missing on transmit (nobody's listening! (or failure on transmit???))
	if( CANGIT & (1 << AERG) )
    2620:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    2624:	80 ff       	sbrs	r24, 0
    2626:	13 c0       	rjmp	.+38     	; 0x264e <__vector_18+0xe6>
	{
		// Clear the interrupt
		CANGIT = (1 << AERG);
    2628:	81 e0       	ldi	r24, 0x01	; 1
    262a:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
		
		if( sg_u8TransmitAttempts < 20 )
    262e:	80 91 68 09 	lds	r24, 0x0968	; 0x800968 <sg_u8TransmitAttempts>
    2632:	84 31       	cpi	r24, 0x14	; 20
    2634:	50 f4       	brcc	.+20     	; 0x264a <__vector_18+0xe2>
		{
			// Retransmit now
			CANSendMessageInternal( sg_eLastTXType, sg_u8LastTXData, sg_u8LastTXDataLen, true );
    2636:	21 e0       	ldi	r18, 0x01	; 1
    2638:	40 91 66 09 	lds	r20, 0x0966	; 0x800966 <sg_u8LastTXDataLen>
    263c:	6d e3       	ldi	r22, 0x3D	; 61
    263e:	79 e0       	ldi	r23, 0x09	; 9
    2640:	80 91 67 09 	lds	r24, 0x0967	; 0x800967 <sg_eLastTXType>
    2644:	0e 94 0d 10 	call	0x201a	; 0x201a <CANSendMessageInternal>
    2648:	02 c0       	rjmp	.+4      	; 0x264e <__vector_18+0xe6>
		}
		else
		{
			// Retries exhausted.  Give up
			sg_bBusy = false;
    264a:	10 92 69 09 	sts	0x0969, r1	; 0x800969 <sg_bBusy>
		}
	}

	// Reenable CAN general interrupt	
//	CANGIE |= (1 << ENIT);
    CANIE2 = saved_canie2;
    264e:	10 93 de 00 	sts	0x00DE, r17	; 0x8000de <__TEXT_REGION_LENGTH__+0x7f00de>
    CANGIE = saved_cangie;
    2652:	d0 93 db 00 	sts	0x00DB, r29	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f00db>
}
    2656:	ff 91       	pop	r31
    2658:	ef 91       	pop	r30
    265a:	df 91       	pop	r29
    265c:	cf 91       	pop	r28
    265e:	bf 91       	pop	r27
    2660:	af 91       	pop	r26
    2662:	9f 91       	pop	r25
    2664:	8f 91       	pop	r24
    2666:	7f 91       	pop	r23
    2668:	6f 91       	pop	r22
    266a:	5f 91       	pop	r21
    266c:	4f 91       	pop	r20
    266e:	3f 91       	pop	r19
    2670:	2f 91       	pop	r18
    2672:	1f 91       	pop	r17
    2674:	0f 91       	pop	r16
    2676:	0f 90       	pop	r0
    2678:	0f be       	out	0x3f, r0	; 63
    267a:	0f 90       	pop	r0
    267c:	1f 90       	pop	r1
    267e:	18 95       	reti

Disassembly of section .text.CANSendMessage:

00004d0c <CANSendMessage>:
					 uint8_t* pu8Data,
					 uint8_t u8DataLen )
{
	// If we're busy, kick it back so we're cooperatively multitasking
	// rather than spin locking
	if (sg_bBusy)
    4d0c:	90 91 69 09 	lds	r25, 0x0969	; 0x800969 <sg_bBusy>
    4d10:	91 11       	cpse	r25, r1
    4d12:	05 c0       	rjmp	.+10     	; 0x4d1e <CANSendMessage+0x12>
	{
		return(false);
	}

	CANSendMessageInternal( eType, pu8Data, u8DataLen, false );
    4d14:	20 e0       	ldi	r18, 0x00	; 0
    4d16:	0e 94 0d 10 	call	0x201a	; 0x201a <CANSendMessageInternal>
	return( true );
    4d1a:	81 e0       	ldi	r24, 0x01	; 1
    4d1c:	08 95       	ret
{
	// If we're busy, kick it back so we're cooperatively multitasking
	// rather than spin locking
	if (sg_bBusy)
	{
		return(false);
    4d1e:	80 e0       	ldi	r24, 0x00	; 0
	}

	CANSendMessageInternal( eType, pu8Data, u8DataLen, false );
	return( true );
}
    4d20:	08 95       	ret

Disassembly of section .text.CANSetRXCallback:

00004e78 <CANSetRXCallback>:

void CANSetRXCallback( void (*pfCallback)(ECANMessageType eType, uint8_t* pu8Data, uint8_t u8DataLen) )
{
	sg_pfRXCallback = pfCallback;
    4e78:	90 93 4e 09 	sts	0x094E, r25	; 0x80094e <sg_pfRXCallback+0x1>
    4e7c:	80 93 4d 09 	sts	0x094D, r24	; 0x80094d <sg_pfRXCallback>
    4e80:	08 95       	ret

Disassembly of section .text.CANInit:

000035d0 <CANInit>:
}

void CANInit( void )
{
    35d0:	0f 93       	push	r16
    35d2:	cf 93       	push	r28
	// Init clock
	// See datasheet table 16-2.
	// For 8Mhz, set CAN rate to 500 Kbps
	CANBT1 = 0x02;
    35d4:	c2 e0       	ldi	r28, 0x02	; 2
    35d6:	c0 93 e2 00 	sts	0x00E2, r28	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f00e2>
	CANBT2 = 0x04;
    35da:	84 e0       	ldi	r24, 0x04	; 4
    35dc:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f00e3>
	CANBT3 = 0x12;
    35e0:	82 e1       	ldi	r24, 0x12	; 18
    35e2:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7f00e4>
	
	// Init message objects (MOBs) since there are no defaults at reset
	CANMOBSet( 0, &sg_sMOBDisabled, NULL, 0 );
    35e6:	00 e0       	ldi	r16, 0x00	; 0
    35e8:	20 e0       	ldi	r18, 0x00	; 0
    35ea:	30 e0       	ldi	r19, 0x00	; 0
    35ec:	47 ea       	ldi	r20, 0xA7	; 167
    35ee:	53 e0       	ldi	r21, 0x03	; 3
    35f0:	60 e0       	ldi	r22, 0x00	; 0
    35f2:	80 e0       	ldi	r24, 0x00	; 0
    35f4:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <CANMOBSet>
	CANMOBSet( 1, &sg_sMOBDisabled, NULL, 0 );
    35f8:	20 e0       	ldi	r18, 0x00	; 0
    35fa:	30 e0       	ldi	r19, 0x00	; 0
    35fc:	47 ea       	ldi	r20, 0xA7	; 167
    35fe:	53 e0       	ldi	r21, 0x03	; 3
    3600:	60 e0       	ldi	r22, 0x00	; 0
    3602:	81 e0       	ldi	r24, 0x01	; 1
    3604:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <CANMOBSet>
	CANMOBSet( 2, &sg_sMOBDisabled, NULL, 0 );
    3608:	20 e0       	ldi	r18, 0x00	; 0
    360a:	30 e0       	ldi	r19, 0x00	; 0
    360c:	47 ea       	ldi	r20, 0xA7	; 167
    360e:	53 e0       	ldi	r21, 0x03	; 3
    3610:	60 e0       	ldi	r22, 0x00	; 0
    3612:	82 e0       	ldi	r24, 0x02	; 2
    3614:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <CANMOBSet>
	CANMOBSet( 3, &sg_sMOBDisabled, NULL, 0 );
    3618:	20 e0       	ldi	r18, 0x00	; 0
    361a:	30 e0       	ldi	r19, 0x00	; 0
    361c:	47 ea       	ldi	r20, 0xA7	; 167
    361e:	53 e0       	ldi	r21, 0x03	; 3
    3620:	60 e0       	ldi	r22, 0x00	; 0
    3622:	83 e0       	ldi	r24, 0x03	; 3
    3624:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <CANMOBSet>
	CANMOBSet( 4, &sg_sMOBDisabled, NULL, 0 );
    3628:	20 e0       	ldi	r18, 0x00	; 0
    362a:	30 e0       	ldi	r19, 0x00	; 0
    362c:	47 ea       	ldi	r20, 0xA7	; 167
    362e:	53 e0       	ldi	r21, 0x03	; 3
    3630:	60 e0       	ldi	r22, 0x00	; 0
    3632:	84 e0       	ldi	r24, 0x04	; 4
    3634:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <CANMOBSet>
	CANMOBSet( 5, &sg_sMOBDisabled, NULL, 0 );
    3638:	20 e0       	ldi	r18, 0x00	; 0
    363a:	30 e0       	ldi	r19, 0x00	; 0
    363c:	47 ea       	ldi	r20, 0xA7	; 167
    363e:	53 e0       	ldi	r21, 0x03	; 3
    3640:	60 e0       	ldi	r22, 0x00	; 0
    3642:	85 e0       	ldi	r24, 0x05	; 5
    3644:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <CANMOBSet>
	
	// Setup generic RX
	CANMOBSet( CANMOB_RX_IDX, &sg_sMOBGenericReceive, NULL, 0 );
    3648:	20 e0       	ldi	r18, 0x00	; 0
    364a:	30 e0       	ldi	r19, 0x00	; 0
    364c:	4f e9       	ldi	r20, 0x9F	; 159
    364e:	53 e0       	ldi	r21, 0x03	; 3
    3650:	60 e0       	ldi	r22, 0x00	; 0
    3652:	80 e0       	ldi	r24, 0x00	; 0
    3654:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <CANMOBSet>
	
	// Enable general CAN interrupts
	CANGIE = (1 << ENIT) | (1 << ENRX) | (1 << ENTX) | (1 << ENERR) | (1 << ENBX) | (1 << ENERG);
    3658:	8e eb       	ldi	r24, 0xBE	; 190
    365a:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f00db>

//	CANGIE &= ~(1 << ENOVRT);  // Disable CAN timer overflow interrupt

	// Enable the bus
	CANGCON = (1 << ENASTB);
    365e:	c0 93 d8 00 	sts	0x00D8, r28	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f00d8>
	sg_bBusy = false;
    3662:	10 92 69 09 	sts	0x0969, r1	; 0x800969 <sg_bBusy>
}
    3666:	cf 91       	pop	r28
    3668:	0f 91       	pop	r16
    366a:	08 95       	ret

Disassembly of section .text.DebugOut:

00004e28 <DebugOut>:
}

#endif

void DebugOut( const char* peFormat, ... )
{
    4e28:	cf 93       	push	r28
    4e2a:	df 93       	push	r29
    4e2c:	cd b7       	in	r28, 0x3d	; 61
    4e2e:	de b7       	in	r29, 0x3e	; 62
	
	va_end( args );	 */
	
	//DebugSerialSend( (uint8_t*)u8Buffer, strlen(u8Buffer) );
#endif
}
    4e30:	df 91       	pop	r29
    4e32:	cf 91       	pop	r28
    4e34:	08 95       	ret

Disassembly of section .text.EEPROMRead:

00004d8e <EEPROMRead>:
}

uint8_t EEPROMRead(uint16_t u16Address)
{
	// Wait for any completion of writes, etc..
	while (EECR & (1 << EEWE));
    4d8e:	f9 99       	sbic	0x1f, 1	; 31
    4d90:	fe cf       	rjmp	.-4      	; 0x4d8e <EEPROMRead>

	// Set address	
	EEAR = u16Address;
    4d92:	92 bd       	out	0x22, r25	; 34
    4d94:	81 bd       	out	0x21, r24	; 33
	
	// Start EEPROM read
	EECR |= (1 << EERE);
    4d96:	8f b3       	in	r24, 0x1f	; 31
    4d98:	81 60       	ori	r24, 0x01	; 1
    4d9a:	8f bb       	out	0x1f, r24	; 31
	
	// Return the data
	return(EEDR);
    4d9c:	80 b5       	in	r24, 0x20	; 32
    4d9e:	08 95       	ret

Disassembly of section .text.I2CBitDelay:

00004e36 <I2CBitDelay>:
#define SDA_SET_INPUT()			(I2C_PORT_DDR &= ((uint8_t) ~(1 << I2C_SDA_PIN))); SDA_HIGH()

// Delays for one I2C bit's worth of time
static void I2CBitDelay(void)
{
	Delay(10);
    4e36:	6a e0       	ldi	r22, 0x0A	; 10
    4e38:	70 e0       	ldi	r23, 0x00	; 0
    4e3a:	80 e0       	ldi	r24, 0x00	; 0
    4e3c:	90 e0       	ldi	r25, 0x00	; 0
    4e3e:	0e 94 24 21 	call	0x4248	; 0x4248 <Delay>
    4e42:	08 95       	ret

Disassembly of section .text.I2CStart:

00004752 <I2CStart>:

// Send an I2C start sequence and quantize foreground code to the overflow
// timer
void I2CStart(void)
{
	SDA_SET_OUTPUT();
    4752:	8a b1       	in	r24, 0x0a	; 10
    4754:	82 60       	ori	r24, 0x02	; 2
    4756:	8a b9       	out	0x0a, r24	; 10
	SDA_HIGH();
    4758:	8b b1       	in	r24, 0x0b	; 11
    475a:	82 60       	ori	r24, 0x02	; 2
    475c:	8b b9       	out	0x0b, r24	; 11
	SCL_HIGH();
    475e:	8b b1       	in	r24, 0x0b	; 11
    4760:	81 60       	ori	r24, 0x01	; 1
    4762:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    4764:	0e 94 1b 27 	call	0x4e36	; 0x4e36 <I2CBitDelay>
	SDA_LOW();
    4768:	8b b1       	in	r24, 0x0b	; 11
    476a:	8d 7f       	andi	r24, 0xFD	; 253
    476c:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    476e:	0e 94 1b 27 	call	0x4e36	; 0x4e36 <I2CBitDelay>
	SCL_LOW();
    4772:	8b b1       	in	r24, 0x0b	; 11
    4774:	8e 7f       	andi	r24, 0xFE	; 254
    4776:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    4778:	0e 94 1b 27 	call	0x4e36	; 0x4e36 <I2CBitDelay>
    477c:	08 95       	ret

Disassembly of section .text.I2CStop:

000048f4 <I2CStop>:
}

// Send an I2C stop sequence
void I2CStop(void)
{
	SDA_LOW();
    48f4:	8b b1       	in	r24, 0x0b	; 11
    48f6:	8d 7f       	andi	r24, 0xFD	; 253
    48f8:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    48fa:	0e 94 1b 27 	call	0x4e36	; 0x4e36 <I2CBitDelay>
	SCL_HIGH();
    48fe:	8b b1       	in	r24, 0x0b	; 11
    4900:	81 60       	ori	r24, 0x01	; 1
    4902:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    4904:	0e 94 1b 27 	call	0x4e36	; 0x4e36 <I2CBitDelay>
	SDA_SET_INPUT();
    4908:	8a b1       	in	r24, 0x0a	; 10
    490a:	8d 7f       	andi	r24, 0xFD	; 253
    490c:	8a b9       	out	0x0a, r24	; 10
    490e:	8b b1       	in	r24, 0x0b	; 11
    4910:	82 60       	ori	r24, 0x02	; 2
    4912:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    4914:	0e 94 1b 27 	call	0x4e36	; 0x4e36 <I2CBitDelay>
    4918:	08 95       	ret

Disassembly of section .text.I2CUnstick:

0000449c <I2CUnstick>:
}

// Unsticks an I2C bus
void I2CUnstick(void)
{
    449c:	cf 93       	push	r28
	uint8_t u8UnstickBits = 64;

	SCL_SET_OUTPUT();
    449e:	8a b1       	in	r24, 0x0a	; 10
    44a0:	81 60       	ori	r24, 0x01	; 1
    44a2:	8a b9       	out	0x0a, r24	; 10
	SDA_SET_OUTPUT();
    44a4:	8a b1       	in	r24, 0x0a	; 10
    44a6:	82 60       	ori	r24, 0x02	; 2
    44a8:	8a b9       	out	0x0a, r24	; 10
}

// Unsticks an I2C bus
void I2CUnstick(void)
{
	uint8_t u8UnstickBits = 64;
    44aa:	c0 e4       	ldi	r28, 0x40	; 64

	SCL_SET_OUTPUT();
	SDA_SET_OUTPUT();
	
	while (u8UnstickBits)
    44ac:	11 c0       	rjmp	.+34     	; 0x44d0 <I2CUnstick+0x34>
	{
		SCL_LOW();
    44ae:	8b b1       	in	r24, 0x0b	; 11
    44b0:	8e 7f       	andi	r24, 0xFE	; 254
    44b2:	8b b9       	out	0x0b, r24	; 11
		SDA_LOW();
    44b4:	8b b1       	in	r24, 0x0b	; 11
    44b6:	8d 7f       	andi	r24, 0xFD	; 253
    44b8:	8b b9       	out	0x0b, r24	; 11
		I2CBitDelay();
    44ba:	0e 94 1b 27 	call	0x4e36	; 0x4e36 <I2CBitDelay>
		SCL_HIGH();
    44be:	8b b1       	in	r24, 0x0b	; 11
    44c0:	81 60       	ori	r24, 0x01	; 1
    44c2:	8b b9       	out	0x0b, r24	; 11
		SDA_HIGH();
    44c4:	8b b1       	in	r24, 0x0b	; 11
    44c6:	82 60       	ori	r24, 0x02	; 2
    44c8:	8b b9       	out	0x0b, r24	; 11
		I2CBitDelay();
    44ca:	0e 94 1b 27 	call	0x4e36	; 0x4e36 <I2CBitDelay>
		u8UnstickBits--;
    44ce:	c1 50       	subi	r28, 0x01	; 1
	uint8_t u8UnstickBits = 64;

	SCL_SET_OUTPUT();
	SDA_SET_OUTPUT();
	
	while (u8UnstickBits)
    44d0:	c1 11       	cpse	r28, r1
    44d2:	ed cf       	rjmp	.-38     	; 0x44ae <I2CUnstick+0x12>
		SCL_HIGH();
		SDA_HIGH();
		I2CBitDelay();
		u8UnstickBits--;
	}
}
    44d4:	cf 91       	pop	r28
    44d6:	08 95       	ret

Disassembly of section .text.I2CTxByte:

00003df8 <I2CTxByte>:

// Sends a single I2C byte. Returns false if the byte is not acked, or true if it is.
bool I2CTxByte(uint8_t u8Byte)
{
    3df8:	cf 93       	push	r28
    3dfa:	df 93       	push	r29
    3dfc:	d8 2f       	mov	r29, r24
	uint8_t u8Length = 8;			// 8 Bits to send
	bool bAck = false;

	SDA_SET_OUTPUT();
    3dfe:	8a b1       	in	r24, 0x0a	; 10
    3e00:	82 60       	ori	r24, 0x02	; 2
    3e02:	8a b9       	out	0x0a, r24	; 10
}

// Sends a single I2C byte. Returns false if the byte is not acked, or true if it is.
bool I2CTxByte(uint8_t u8Byte)
{
	uint8_t u8Length = 8;			// 8 Bits to send
    3e04:	c8 e0       	ldi	r28, 0x08	; 8
	bool bAck = false;

	SDA_SET_OUTPUT();

	while (u8Length)
    3e06:	15 c0       	rjmp	.+42     	; 0x3e32 <I2CTxByte+0x3a>
	{
		if (u8Byte & 0x80)
    3e08:	dd 23       	and	r29, r29
    3e0a:	24 f4       	brge	.+8      	; 0x3e14 <I2CTxByte+0x1c>
		{
			SDA_HIGH();
    3e0c:	8b b1       	in	r24, 0x0b	; 11
    3e0e:	82 60       	ori	r24, 0x02	; 2
    3e10:	8b b9       	out	0x0b, r24	; 11
    3e12:	03 c0       	rjmp	.+6      	; 0x3e1a <I2CTxByte+0x22>
		}
		else
		{
			SDA_LOW();
    3e14:	8b b1       	in	r24, 0x0b	; 11
    3e16:	8d 7f       	andi	r24, 0xFD	; 253
    3e18:	8b b9       	out	0x0b, r24	; 11
		}
		
		// Drive SCL high
		SCL_HIGH();
    3e1a:	8b b1       	in	r24, 0x0b	; 11
    3e1c:	81 60       	ori	r24, 0x01	; 1
    3e1e:	8b b9       	out	0x0b, r24	; 11
		
		I2CBitDelay();
    3e20:	0e 94 1b 27 	call	0x4e36	; 0x4e36 <I2CBitDelay>
		
		// Ensure SCL is low
		SCL_LOW();
    3e24:	8b b1       	in	r24, 0x0b	; 11
    3e26:	8e 7f       	andi	r24, 0xFE	; 254
    3e28:	8b b9       	out	0x0b, r24	; 11
	
		// SDA Is now set. Delay.
		I2CBitDelay();
    3e2a:	0e 94 1b 27 	call	0x4e36	; 0x4e36 <I2CBitDelay>
		
		// Next bit
		u8Byte <<= 1;	
    3e2e:	dd 0f       	add	r29, r29
		u8Length--;
    3e30:	c1 50       	subi	r28, 0x01	; 1
	uint8_t u8Length = 8;			// 8 Bits to send
	bool bAck = false;

	SDA_SET_OUTPUT();

	while (u8Length)
    3e32:	c1 11       	cpse	r28, r1
    3e34:	e9 cf       	rjmp	.-46     	; 0x3e08 <I2CTxByte+0x10>
		// Next bit
		u8Byte <<= 1;	
		u8Length--;
	}
	
	SDA_SET_INPUT();
    3e36:	8a b1       	in	r24, 0x0a	; 10
    3e38:	8d 7f       	andi	r24, 0xFD	; 253
    3e3a:	8a b9       	out	0x0a, r24	; 10
    3e3c:	8b b1       	in	r24, 0x0b	; 11
    3e3e:	82 60       	ori	r24, 0x02	; 2
    3e40:	8b b9       	out	0x0b, r24	; 11
	SCL_HIGH();
    3e42:	8b b1       	in	r24, 0x0b	; 11
    3e44:	81 60       	ori	r24, 0x01	; 1
    3e46:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    3e48:	0e 94 1b 27 	call	0x4e36	; 0x4e36 <I2CBitDelay>
	
	// See if the byte was acknowledged
	if (SDA_READ())
    3e4c:	49 9b       	sbis	0x09, 1	; 9
	{
		bAck = false;
	}
	else
	{
		bAck = true;
    3e4e:	c1 e0       	ldi	r28, 0x01	; 1
	}
	
	SCL_LOW();
    3e50:	8b b1       	in	r24, 0x0b	; 11
    3e52:	8e 7f       	andi	r24, 0xFE	; 254
    3e54:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    3e56:	0e 94 1b 27 	call	0x4e36	; 0x4e36 <I2CBitDelay>
	return(bAck);
}
    3e5a:	8c 2f       	mov	r24, r28
    3e5c:	df 91       	pop	r29
    3e5e:	cf 91       	pop	r28
    3e60:	08 95       	ret

Disassembly of section .text.I2CRxByte:

00003c1e <I2CRxByte>:

// Receives a single I2C byte and will optionally generate an ack at the end
uint8_t I2CRxByte(bool bAck)
{
    3c1e:	1f 93       	push	r17
    3c20:	cf 93       	push	r28
    3c22:	df 93       	push	r29
    3c24:	18 2f       	mov	r17, r24
	uint8_t u8Data = 0;
	uint8_t u8Count = 8;
	
	SDA_SET_INPUT();
    3c26:	8a b1       	in	r24, 0x0a	; 10
    3c28:	8d 7f       	andi	r24, 0xFD	; 253
    3c2a:	8a b9       	out	0x0a, r24	; 10
    3c2c:	8b b1       	in	r24, 0x0b	; 11
    3c2e:	82 60       	ori	r24, 0x02	; 2
    3c30:	8b b9       	out	0x0b, r24	; 11

// Receives a single I2C byte and will optionally generate an ack at the end
uint8_t I2CRxByte(bool bAck)
{
	uint8_t u8Data = 0;
	uint8_t u8Count = 8;
    3c32:	c8 e0       	ldi	r28, 0x08	; 8
}

// Receives a single I2C byte and will optionally generate an ack at the end
uint8_t I2CRxByte(bool bAck)
{
	uint8_t u8Data = 0;
    3c34:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t u8Count = 8;
	
	SDA_SET_INPUT();
	
	// Consume all 8 data bits
	while (u8Count)
    3c36:	0e c0       	rjmp	.+28     	; 0x3c54 <I2CRxByte+0x36>
	{
		u8Data <<= 1;
    3c38:	dd 0f       	add	r29, r29

		SCL_HIGH();
    3c3a:	8b b1       	in	r24, 0x0b	; 11
    3c3c:	81 60       	ori	r24, 0x01	; 1
    3c3e:	8b b9       	out	0x0b, r24	; 11
		I2CBitDelay();
    3c40:	0e 94 1b 27 	call	0x4e36	; 0x4e36 <I2CBitDelay>
			
		if (SDA_READ())
    3c44:	49 99       	sbic	0x09, 1	; 9
		{
			u8Data |= 1;
    3c46:	d1 60       	ori	r29, 0x01	; 1
		}
		
		SCL_LOW();
    3c48:	8b b1       	in	r24, 0x0b	; 11
    3c4a:	8e 7f       	andi	r24, 0xFE	; 254
    3c4c:	8b b9       	out	0x0b, r24	; 11
		I2CBitDelay();
    3c4e:	0e 94 1b 27 	call	0x4e36	; 0x4e36 <I2CBitDelay>
		u8Count--;
    3c52:	c1 50       	subi	r28, 0x01	; 1
	uint8_t u8Count = 8;
	
	SDA_SET_INPUT();
	
	// Consume all 8 data bits
	while (u8Count)
    3c54:	c1 11       	cpse	r28, r1
    3c56:	f0 cf       	rjmp	.-32     	; 0x3c38 <I2CRxByte+0x1a>
		I2CBitDelay();
		u8Count--;
	}

	// See if we acknowledge this
	SDA_SET_OUTPUT();
    3c58:	8a b1       	in	r24, 0x0a	; 10
    3c5a:	82 60       	ori	r24, 0x02	; 2
    3c5c:	8a b9       	out	0x0a, r24	; 10
	if (bAck)
    3c5e:	11 23       	and	r17, r17
    3c60:	21 f0       	breq	.+8      	; 0x3c6a <I2CRxByte+0x4c>
	{
		SDA_LOW();
    3c62:	8b b1       	in	r24, 0x0b	; 11
    3c64:	8d 7f       	andi	r24, 0xFD	; 253
    3c66:	8b b9       	out	0x0b, r24	; 11
    3c68:	03 c0       	rjmp	.+6      	; 0x3c70 <I2CRxByte+0x52>
	}
	else
	{
		SDA_HIGH();
    3c6a:	8b b1       	in	r24, 0x0b	; 11
    3c6c:	82 60       	ori	r24, 0x02	; 2
    3c6e:	8b b9       	out	0x0b, r24	; 11
	}
	
	I2CBitDelay();
    3c70:	0e 94 1b 27 	call	0x4e36	; 0x4e36 <I2CBitDelay>
	SCL_HIGH();
    3c74:	8b b1       	in	r24, 0x0b	; 11
    3c76:	81 60       	ori	r24, 0x01	; 1
    3c78:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    3c7a:	0e 94 1b 27 	call	0x4e36	; 0x4e36 <I2CBitDelay>
	SCL_LOW();
    3c7e:	8b b1       	in	r24, 0x0b	; 11
    3c80:	8e 7f       	andi	r24, 0xFE	; 254
    3c82:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    3c84:	0e 94 1b 27 	call	0x4e36	; 0x4e36 <I2CBitDelay>
	SDA_LOW();
    3c88:	8b b1       	in	r24, 0x0b	; 11
    3c8a:	8d 7f       	andi	r24, 0xFD	; 253
    3c8c:	8b b9       	out	0x0b, r24	; 11

	return(u8Data);	
}
    3c8e:	8d 2f       	mov	r24, r29
    3c90:	df 91       	pop	r29
    3c92:	cf 91       	pop	r28
    3c94:	1f 91       	pop	r17
    3c96:	08 95       	ret

Disassembly of section .text.I2CSetup:

0000477e <I2CSetup>:
// Prepares the SCL/SDA pins for I2C operation and returns when the CPU is
// quantized to the timer (for consistent bit alignment)
void I2CSetup(void)
{
	// Deassert SCL and SDA
	SCL_HIGH();
    477e:	8b b1       	in	r24, 0x0b	; 11
    4780:	81 60       	ori	r24, 0x01	; 1
    4782:	8b b9       	out	0x0b, r24	; 11
	SDA_HIGH();
    4784:	8b b1       	in	r24, 0x0b	; 11
    4786:	82 60       	ori	r24, 0x02	; 2
    4788:	8b b9       	out	0x0b, r24	; 11

	// Set SCL and SDA lines as push/pull output drives
	SCL_SET_OUTPUT();
    478a:	8a b1       	in	r24, 0x0a	; 10
    478c:	81 60       	ori	r24, 0x01	; 1
    478e:	8a b9       	out	0x0a, r24	; 10
	
	// Turn on SDA, set as an input
	SDA_SET_INPUT();
    4790:	8a b1       	in	r24, 0x0a	; 10
    4792:	8d 7f       	andi	r24, 0xFD	; 253
    4794:	8a b9       	out	0x0a, r24	; 10
    4796:	8b b1       	in	r24, 0x0b	; 11
    4798:	82 60       	ori	r24, 0x02	; 2
    479a:	8b b9       	out	0x0b, r24	; 11
	
	Delay(20);
    479c:	64 e1       	ldi	r22, 0x14	; 20
    479e:	70 e0       	ldi	r23, 0x00	; 0
    47a0:	80 e0       	ldi	r24, 0x00	; 0
    47a2:	90 e0       	ldi	r25, 0x00	; 0
    47a4:	0e 94 24 21 	call	0x4248	; 0x4248 <Delay>
    47a8:	08 95       	ret

Disassembly of section .text.I2CStartTransaction:

0000482c <I2CStartTransaction>:

// Sets up the I2C pins, sends slave address/read/write byte, and waits for acknowledgment.
// Returns false if no device is responding.
bool I2CStartTransaction(uint8_t u8SlaveAddress,
						 bool bRead)
{
    482c:	cf 93       	push	r28
    482e:	df 93       	push	r29
    4830:	c8 2f       	mov	r28, r24
    4832:	d6 2f       	mov	r29, r22
	// Set up the pins for I2C operation
	I2CSetup();
    4834:	0e 94 bf 23 	call	0x477e	; 0x477e <I2CSetup>
	
	// I2C Start condition
	I2CStart();
    4838:	0e 94 a9 23 	call	0x4752	; 0x4752 <I2CStart>

	// If it's a read operation, clear the lower bit
	if (bRead)
    483c:	dd 23       	and	r29, r29
    483e:	19 f0       	breq	.+6      	; 0x4846 <I2CStartTransaction+0x1a>
	{
		u8SlaveAddress |= 1;
    4840:	8c 2f       	mov	r24, r28
    4842:	81 60       	ori	r24, 0x01	; 1
    4844:	02 c0       	rjmp	.+4      	; 0x484a <I2CStartTransaction+0x1e>
	}
	else
	{
		// Otherwise set it
		u8SlaveAddress &= (uint8_t) (~1);
    4846:	8c 2f       	mov	r24, r28
    4848:	8e 7f       	andi	r24, 0xFE	; 254
	}
	
	// Now send out the slave address + the read/write bit
	return(I2CTxByte(u8SlaveAddress));
    484a:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <I2CTxByte>
}
    484e:	df 91       	pop	r29
    4850:	cf 91       	pop	r28
    4852:	08 95       	ret

Disassembly of section .text.CellCountExpectedSet:

000030e8 <CellCountExpectedSet>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    30e8:	cf 92       	push	r12
    30ea:	df 92       	push	r13
    30ec:	ef 92       	push	r14
    30ee:	ff 92       	push	r15
    30f0:	8f 35       	cpi	r24, 0x5F	; 95
    30f2:	08 f0       	brcs	.+2      	; 0x30f6 <CellCountExpectedSet+0xe>
    30f4:	8e e5       	ldi	r24, 0x5E	; 94
    30f6:	e0 e1       	ldi	r30, 0x10	; 16
    30f8:	f1 e0       	ldi	r31, 0x01	; 1
    30fa:	85 8b       	std	Z+21, r24	; 0x15
    30fc:	c8 2e       	mov	r12, r24
    30fe:	d1 2c       	mov	r13, r1
    3100:	e1 2c       	mov	r14, r1
    3102:	f1 2c       	mov	r15, r1
    3104:	aa ec       	ldi	r26, 0xCA	; 202
    3106:	b8 e0       	ldi	r27, 0x08	; 8
    3108:	a7 01       	movw	r20, r14
    310a:	96 01       	movw	r18, r12
    310c:	0e 94 a7 26 	call	0x4d4e	; 0x4d4e <__muluhisi3>
    3110:	65 8f       	std	Z+29, r22	; 0x1d
    3112:	76 8f       	std	Z+30, r23	; 0x1e
    3114:	87 8f       	std	Z+31, r24	; 0x1f
    3116:	90 a3       	std	Z+32, r25	; 0x20
    3118:	a4 e9       	ldi	r26, 0x94	; 148
    311a:	b1 e1       	ldi	r27, 0x11	; 17
    311c:	0e 94 a7 26 	call	0x4d4e	; 0x4d4e <__muluhisi3>
    3120:	61 a3       	std	Z+33, r22	; 0x21
    3122:	72 a3       	std	Z+34, r23	; 0x22
    3124:	83 a3       	std	Z+35, r24	; 0x23
    3126:	94 a3       	std	Z+36, r25	; 0x24
    3128:	81 a1       	ldd	r24, Z+33	; 0x21
    312a:	92 a1       	ldd	r25, Z+34	; 0x22
    312c:	a3 a1       	ldd	r26, Z+35	; 0x23
    312e:	b4 a1       	ldd	r27, Z+36	; 0x24
    3130:	45 8d       	ldd	r20, Z+29	; 0x1d
    3132:	56 8d       	ldd	r21, Z+30	; 0x1e
    3134:	67 8d       	ldd	r22, Z+31	; 0x1f
    3136:	70 a1       	ldd	r23, Z+32	; 0x20
    3138:	84 1b       	sub	r24, r20
    313a:	95 0b       	sbc	r25, r21
    313c:	a6 0b       	sbc	r26, r22
    313e:	b7 0b       	sbc	r27, r23
    3140:	88 0f       	add	r24, r24
    3142:	99 1f       	adc	r25, r25
    3144:	aa 1f       	adc	r26, r26
    3146:	bb 1f       	adc	r27, r27
    3148:	88 0f       	add	r24, r24
    314a:	99 1f       	adc	r25, r25
    314c:	aa 1f       	adc	r26, r26
    314e:	bb 1f       	adc	r27, r27
    3150:	88 0f       	add	r24, r24
    3152:	99 1f       	adc	r25, r25
    3154:	aa 1f       	adc	r26, r26
    3156:	bb 1f       	adc	r27, r27
    3158:	88 0f       	add	r24, r24
    315a:	99 1f       	adc	r25, r25
    315c:	aa 1f       	adc	r26, r26
    315e:	bb 1f       	adc	r27, r27
    3160:	88 0f       	add	r24, r24
    3162:	99 1f       	adc	r25, r25
    3164:	aa 1f       	adc	r26, r26
    3166:	bb 1f       	adc	r27, r27
    3168:	88 0f       	add	r24, r24
    316a:	99 1f       	adc	r25, r25
    316c:	aa 1f       	adc	r26, r26
    316e:	bb 1f       	adc	r27, r27
    3170:	88 0f       	add	r24, r24
    3172:	99 1f       	adc	r25, r25
    3174:	aa 1f       	adc	r26, r26
    3176:	bb 1f       	adc	r27, r27
    3178:	ac 01       	movw	r20, r24
    317a:	bd 01       	movw	r22, r26
    317c:	bb 23       	and	r27, r27
    317e:	24 f4       	brge	.+8      	; 0x3188 <CellCountExpectedSet+0xa0>
    3180:	41 50       	subi	r20, 0x01	; 1
    3182:	5c 4f       	sbci	r21, 0xFC	; 252
    3184:	6f 4f       	sbci	r22, 0xFF	; 255
    3186:	7f 4f       	sbci	r23, 0xFF	; 255
    3188:	03 2e       	mov	r0, r19
    318a:	3a e0       	ldi	r19, 0x0A	; 10
    318c:	75 95       	asr	r23
    318e:	67 95       	ror	r22
    3190:	57 95       	ror	r21
    3192:	47 95       	ror	r20
    3194:	3a 95       	dec	r19
    3196:	d1 f7       	brne	.-12     	; 0x318c <CellCountExpectedSet+0xa4>
    3198:	30 2d       	mov	r19, r0
    319a:	50 93 36 01 	sts	0x0136, r21	; 0x800136 <sg_sFrame+0x26>
    319e:	40 93 35 01 	sts	0x0135, r20	; 0x800135 <sg_sFrame+0x25>
    31a2:	ff 90       	pop	r15
    31a4:	ef 90       	pop	r14
    31a6:	df 90       	pop	r13
    31a8:	cf 90       	pop	r12
    31aa:	08 95       	ret

Disassembly of section .text.SendModuleControllerStatus:

00004de8 <SendModuleControllerStatus>:

static uint8_t sg_u8ControllerStatusMsgCount = 0;

static void SendModuleControllerStatus(void)
{
	sg_bSendModuleControllerStatus = true;
    4de8:	81 e0       	ldi	r24, 0x01	; 1
    4dea:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <sg_bSendModuleControllerStatus>
	sg_u8ControllerStatusMsgCount = 0;
    4dee:	10 92 6e 09 	sts	0x096E, r1	; 0x80096e <sg_u8ControllerStatusMsgCount>
	sg_bIgnoreStatusRequests = true;  // Start ignoring new requests
    4df2:	80 93 76 09 	sts	0x0976, r24	; 0x800976 <sg_bIgnoreStatusRequests>
    4df6:	08 95       	ret

Disassembly of section .text.ModuleControllerStateSet:

00004e82 <ModuleControllerStateSet>:
	MBASSERT(0);
}

static void ModuleControllerStateSet( EModuleControllerState eNext )
{
	if(eNext < EMODSTATE_COUNT)
    4e82:	84 30       	cpi	r24, 0x04	; 4
    4e84:	10 f4       	brcc	.+4      	; 0x4e8a <ModuleControllerStateSet+0x8>
	{
		sg_eModuleControllerStateTarget = eNext;
    4e86:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <sg_eModuleControllerStateTarget>
    4e8a:	08 95       	ret

Disassembly of section .text.ModuleControllerStateSetMax:

00004d22 <ModuleControllerStateSetMax>:



static void ModuleControllerStateSetMax( EModuleControllerState eNext )
{
	if(eNext < EMODSTATE_COUNT)
    4d22:	84 30       	cpi	r24, 0x04	; 4
    4d24:	40 f4       	brcc	.+16     	; 0x4d36 <ModuleControllerStateSetMax+0x14>
	{
		sg_eModuleControllerStateMax = eNext;
    4d26:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <sg_eModuleControllerStateMax>
		if (sg_eModuleControllerStateCurrent > eNext) // we are in a higher state than allowed
    4d2a:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    4d2e:	89 17       	cp	r24, r25
    4d30:	10 f4       	brcc	.+4      	; 0x4d36 <ModuleControllerStateSetMax+0x14>
		{
			sg_eModuleControllerStateTarget = eNext;
    4d32:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <sg_eModuleControllerStateTarget>
    4d36:	08 95       	ret

Disassembly of section .text.Check5VLoss:

00004cc4 <Check5VLoss>:
}

// Checks for 5V loss
static void Check5VLoss(uint8_t u8NewState)
{
	if( u8NewState & (1 << PIN_5V_DET) )
    4cc4:	86 fd       	sbrc	r24, 6
    4cc6:	09 c0       	rjmp	.+18     	; 0x4cda <Check5VLoss+0x16>
		// Not asserted
	}
	else
	{
		// 5V detect is low
		FET_EN_DEASSERT();
    4cc8:	88 b1       	in	r24, 0x08	; 8
    4cca:	8f 7e       	andi	r24, 0xEF	; 239
    4ccc:	88 b9       	out	0x08, r24	; 8
		RELAY_EN_DEASSERT();
    4cce:	8e b1       	in	r24, 0x0e	; 14
    4cd0:	8d 7f       	andi	r24, 0xFD	; 253
    4cd2:	8e b9       	out	0x0e, r24	; 14
		ModuleControllerStateSet( EMODSTATE_OFF );
    4cd4:	80 e0       	ldi	r24, 0x00	; 0
    4cd6:	0e 94 41 27 	call	0x4e82	; 0x4e82 <ModuleControllerStateSet>
    4cda:	08 95       	ret

Disassembly of section .text.CellDataConvertVoltage:

00003f90 <CellDataConvertVoltage>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    3f90:	fb 01       	movw	r30, r22
    3f92:	dc 01       	movw	r26, r24
    3f94:	b3 70       	andi	r27, 0x03	; 3
    3f96:	2b ed       	ldi	r18, 0xDB	; 219
    3f98:	36 ea       	ldi	r19, 0xA6	; 166
    3f9a:	43 e2       	ldi	r20, 0x23	; 35
    3f9c:	50 e0       	ldi	r21, 0x00	; 0
    3f9e:	0e 94 a7 26 	call	0x4d4e	; 0x4d4e <__muluhisi3>
    3fa2:	dc 01       	movw	r26, r24
    3fa4:	cb 01       	movw	r24, r22
    3fa6:	07 2e       	mov	r0, r23
    3fa8:	7a e0       	ldi	r23, 0x0A	; 10
    3faa:	b6 95       	lsr	r27
    3fac:	a7 95       	ror	r26
    3fae:	97 95       	ror	r25
    3fb0:	87 95       	ror	r24
    3fb2:	7a 95       	dec	r23
    3fb4:	d1 f7       	brne	.-12     	; 0x3faa <CellDataConvertVoltage+0x1a>
    3fb6:	70 2d       	mov	r23, r0
    3fb8:	9f 5f       	subi	r25, 0xFF	; 255
    3fba:	af 4f       	sbci	r26, 0xFF	; 255
    3fbc:	bf 4f       	sbci	r27, 0xFF	; 255
    3fbe:	07 2e       	mov	r0, r23
    3fc0:	79 e0       	ldi	r23, 0x09	; 9
    3fc2:	b6 95       	lsr	r27
    3fc4:	a7 95       	ror	r26
    3fc6:	97 95       	ror	r25
    3fc8:	87 95       	ror	r24
    3fca:	7a 95       	dec	r23
    3fcc:	d1 f7       	brne	.-12     	; 0x3fc2 <CellDataConvertVoltage+0x32>
    3fce:	70 2d       	mov	r23, r0
    3fd0:	9c 01       	movw	r18, r24
    3fd2:	01 97       	sbiw	r24, 0x01	; 1
    3fd4:	8e 3f       	cpi	r24, 0xFE	; 254
    3fd6:	9f 4f       	sbci	r25, 0xFF	; 255
    3fd8:	10 f4       	brcc	.+4      	; 0x3fde <CellDataConvertVoltage+0x4e>
    3fda:	81 e0       	ldi	r24, 0x01	; 1
    3fdc:	03 c0       	rjmp	.+6      	; 0x3fe4 <CellDataConvertVoltage+0x54>
    3fde:	80 e0       	ldi	r24, 0x00	; 0
    3fe0:	20 e0       	ldi	r18, 0x00	; 0
    3fe2:	30 e0       	ldi	r19, 0x00	; 0
    3fe4:	30 97       	sbiw	r30, 0x00	; 0
    3fe6:	11 f0       	breq	.+4      	; 0x3fec <CellDataConvertVoltage+0x5c>
    3fe8:	31 83       	std	Z+1, r19	; 0x01
    3fea:	20 83       	st	Z, r18
    3fec:	08 95       	ret

Disassembly of section .text.CellDataConvertTemperature:

00003c98 <CellDataConvertTemperature>:
    3c98:	8f 3f       	cpi	r24, 0xFF	; 255
    3c9a:	2f ef       	ldi	r18, 0xFF	; 255
    3c9c:	92 07       	cpc	r25, r18
    3c9e:	61 f1       	breq	.+88     	; 0x3cf8 <CellDataConvertTemperature+0x60>
    3ca0:	28 2f       	mov	r18, r24
    3ca2:	2f 70       	andi	r18, 0x0F	; 15
    3ca4:	94 ff       	sbrs	r25, 4
    3ca6:	02 c0       	rjmp	.+4      	; 0x3cac <CellDataConvertTemperature+0x14>
    3ca8:	90 6f       	ori	r25, 0xF0	; 240
    3caa:	01 c0       	rjmp	.+2      	; 0x3cae <CellDataConvertTemperature+0x16>
    3cac:	9f 77       	andi	r25, 0x7F	; 127
    3cae:	95 95       	asr	r25
    3cb0:	87 95       	ror	r24
    3cb2:	95 95       	asr	r25
    3cb4:	87 95       	ror	r24
    3cb6:	95 95       	asr	r25
    3cb8:	87 95       	ror	r24
    3cba:	95 95       	asr	r25
    3cbc:	87 95       	ror	r24
    3cbe:	ac 01       	movw	r20, r24
    3cc0:	4c 5e       	subi	r20, 0xEC	; 236
    3cc2:	5f 4f       	sbci	r21, 0xFF	; 255
    3cc4:	4d 38       	cpi	r20, 0x8D	; 141
    3cc6:	51 05       	cpc	r21, r1
    3cc8:	c8 f4       	brcc	.+50     	; 0x3cfc <CellDataConvertTemperature+0x64>
    3cca:	34 e6       	ldi	r19, 0x64	; 100
    3ccc:	38 9f       	mul	r19, r24
    3cce:	d0 01       	movw	r26, r0
    3cd0:	39 9f       	mul	r19, r25
    3cd2:	b0 0d       	add	r27, r0
    3cd4:	11 24       	eor	r1, r1
    3cd6:	30 e0       	ldi	r19, 0x00	; 0
    3cd8:	40 e0       	ldi	r20, 0x00	; 0
    3cda:	26 5f       	subi	r18, 0xF6	; 246
    3cdc:	3c 4f       	sbci	r19, 0xFC	; 252
    3cde:	4f 4f       	sbci	r20, 0xFF	; 255
    3ce0:	f9 01       	movw	r30, r18
    3ce2:	84 91       	lpm	r24, Z
    3ce4:	47 fd       	sbrc	r20, 7
    3ce6:	80 81       	ld	r24, Z
    3ce8:	fd 01       	movw	r30, r26
    3cea:	e8 0f       	add	r30, r24
    3cec:	f1 1d       	adc	r31, r1
    3cee:	cf 01       	movw	r24, r30
    3cf0:	81 56       	subi	r24, 0x61	; 97
    3cf2:	9a 4e       	sbci	r25, 0xEA	; 234
    3cf4:	21 e0       	ldi	r18, 0x01	; 1
    3cf6:	05 c0       	rjmp	.+10     	; 0x3d02 <CellDataConvertTemperature+0x6a>
    3cf8:	20 e0       	ldi	r18, 0x00	; 0
    3cfa:	03 c0       	rjmp	.+6      	; 0x3d02 <CellDataConvertTemperature+0x6a>
    3cfc:	8f ef       	ldi	r24, 0xFF	; 255
    3cfe:	9f ef       	ldi	r25, 0xFF	; 255
    3d00:	20 e0       	ldi	r18, 0x00	; 0
    3d02:	61 15       	cp	r22, r1
    3d04:	71 05       	cpc	r23, r1
    3d06:	19 f0       	breq	.+6      	; 0x3d0e <CellDataConvertTemperature+0x76>
    3d08:	fb 01       	movw	r30, r22
    3d0a:	91 83       	std	Z+1, r25	; 0x01
    3d0c:	80 83       	st	Z, r24
    3d0e:	82 2f       	mov	r24, r18
    3d10:	08 95       	ret

Disassembly of section .text.ModuleCurrentConvertReadings:

00002680 <ModuleCurrentConvertReadings>:
    2680:	a0 91 59 01 	lds	r26, 0x0159	; 0x800159 <sg_sFrame+0x49>
    2684:	b0 91 5a 01 	lds	r27, 0x015A	; 0x80015a <sg_sFrame+0x4a>
    2688:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <sg_sFrame+0x4c>
    268c:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <sg_sFrame+0x4d>
    2690:	e0 91 79 09 	lds	r30, 0x0979	; 0x800979 <sg_u8CurrentBufferIndex>
    2694:	ef 3f       	cpi	r30, 0xFF	; 255
    2696:	81 f4       	brne	.+32     	; 0x26b8 <ModuleCurrentConvertReadings+0x38>
    2698:	07 c0       	rjmp	.+14     	; 0x26a8 <ModuleCurrentConvertReadings+0x28>
    269a:	f0 e0       	ldi	r31, 0x00	; 0
    269c:	ee 0f       	add	r30, r30
    269e:	ff 1f       	adc	r31, r31
    26a0:	e3 5e       	subi	r30, 0xE3	; 227
    26a2:	f6 4f       	sbci	r31, 0xF6	; 246
    26a4:	91 83       	std	Z+1, r25	; 0x01
    26a6:	80 83       	st	Z, r24
    26a8:	e0 91 79 09 	lds	r30, 0x0979	; 0x800979 <sg_u8CurrentBufferIndex>
    26ac:	ef 5f       	subi	r30, 0xFF	; 255
    26ae:	e0 93 79 09 	sts	0x0979, r30	; 0x800979 <sg_u8CurrentBufferIndex>
    26b2:	e8 30       	cpi	r30, 0x08	; 8
    26b4:	90 f3       	brcs	.-28     	; 0x269a <ModuleCurrentConvertReadings+0x1a>
    26b6:	0f c0       	rjmp	.+30     	; 0x26d6 <ModuleCurrentConvertReadings+0x56>
    26b8:	21 e0       	ldi	r18, 0x01	; 1
    26ba:	2e 0f       	add	r18, r30
    26bc:	20 93 79 09 	sts	0x0979, r18	; 0x800979 <sg_u8CurrentBufferIndex>
    26c0:	f0 e0       	ldi	r31, 0x00	; 0
    26c2:	ee 0f       	add	r30, r30
    26c4:	ff 1f       	adc	r31, r31
    26c6:	e3 5e       	subi	r30, 0xE3	; 227
    26c8:	f6 4f       	sbci	r31, 0xF6	; 246
    26ca:	91 83       	std	Z+1, r25	; 0x01
    26cc:	80 83       	st	Z, r24
    26ce:	28 30       	cpi	r18, 0x08	; 8
    26d0:	10 f0       	brcs	.+4      	; 0x26d6 <ModuleCurrentConvertReadings+0x56>
    26d2:	10 92 79 09 	sts	0x0979, r1	; 0x800979 <sg_u8CurrentBufferIndex>
    26d6:	80 e0       	ldi	r24, 0x00	; 0
    26d8:	20 e0       	ldi	r18, 0x00	; 0
    26da:	30 e0       	ldi	r19, 0x00	; 0
    26dc:	0b c0       	rjmp	.+22     	; 0x26f4 <ModuleCurrentConvertReadings+0x74>
    26de:	e8 2f       	mov	r30, r24
    26e0:	f0 e0       	ldi	r31, 0x00	; 0
    26e2:	ee 0f       	add	r30, r30
    26e4:	ff 1f       	adc	r31, r31
    26e6:	e3 5e       	subi	r30, 0xE3	; 227
    26e8:	f6 4f       	sbci	r31, 0xF6	; 246
    26ea:	40 81       	ld	r20, Z
    26ec:	51 81       	ldd	r21, Z+1	; 0x01
    26ee:	24 0f       	add	r18, r20
    26f0:	35 1f       	adc	r19, r21
    26f2:	8f 5f       	subi	r24, 0xFF	; 255
    26f4:	88 30       	cpi	r24, 0x08	; 8
    26f6:	98 f3       	brcs	.-26     	; 0x26de <ModuleCurrentConvertReadings+0x5e>
    26f8:	c9 01       	movw	r24, r18
    26fa:	99 23       	and	r25, r25
    26fc:	0c f4       	brge	.+2      	; 0x2700 <ModuleCurrentConvertReadings+0x80>
    26fe:	07 96       	adiw	r24, 0x07	; 7
    2700:	95 95       	asr	r25
    2702:	87 95       	ror	r24
    2704:	95 95       	asr	r25
    2706:	87 95       	ror	r24
    2708:	95 95       	asr	r25
    270a:	87 95       	ror	r24
    270c:	a8 1b       	sub	r26, r24
    270e:	b9 0b       	sbc	r27, r25
    2710:	20 e8       	ldi	r18, 0x80	; 128
    2712:	3c e0       	ldi	r19, 0x0C	; 12
    2714:	0e 94 29 27 	call	0x4e52	; 0x4e52 <__usmulhisi3>
    2718:	ab 01       	movw	r20, r22
    271a:	bc 01       	movw	r22, r24
    271c:	5f 5f       	subi	r21, 0xFF	; 255
    271e:	6f 4f       	sbci	r22, 0xFF	; 255
    2720:	7f 4f       	sbci	r23, 0xFF	; 255
    2722:	db 01       	movw	r26, r22
    2724:	ca 01       	movw	r24, r20
    2726:	77 23       	and	r23, r23
    2728:	24 f4       	brge	.+8      	; 0x2732 <ModuleCurrentConvertReadings+0xb2>
    272a:	81 50       	subi	r24, 0x01	; 1
    272c:	9e 4f       	sbci	r25, 0xFE	; 254
    272e:	af 4f       	sbci	r26, 0xFF	; 255
    2730:	bf 4f       	sbci	r27, 0xFF	; 255
    2732:	07 2e       	mov	r0, r23
    2734:	79 e0       	ldi	r23, 0x09	; 9
    2736:	b5 95       	asr	r27
    2738:	a7 95       	ror	r26
    273a:	97 95       	ror	r25
    273c:	87 95       	ror	r24
    273e:	7a 95       	dec	r23
    2740:	d1 f7       	brne	.-12     	; 0x2736 <ModuleCurrentConvertReadings+0xb6>
    2742:	70 2d       	mov	r23, r0
    2744:	90 58       	subi	r25, 0x80	; 128
    2746:	af 4f       	sbci	r26, 0xFF	; 255
    2748:	bf 4f       	sbci	r27, 0xFF	; 255
    274a:	e0 e1       	ldi	r30, 0x10	; 16
    274c:	f1 e0       	ldi	r31, 0x01	; 1
    274e:	90 ab       	std	Z+48, r25	; 0x30
    2750:	87 a7       	std	Z+47, r24	; 0x2f
    2752:	27 a5       	ldd	r18, Z+47	; 0x2f
    2754:	30 a9       	ldd	r19, Z+48	; 0x30
    2756:	86 89       	ldd	r24, Z+22	; 0x16
    2758:	97 89       	ldd	r25, Z+23	; 0x17
    275a:	82 17       	cp	r24, r18
    275c:	93 07       	cpc	r25, r19
    275e:	20 f4       	brcc	.+8      	; 0x2768 <ModuleCurrentConvertReadings+0xe8>
    2760:	87 a5       	ldd	r24, Z+47	; 0x2f
    2762:	90 a9       	ldd	r25, Z+48	; 0x30
    2764:	97 8b       	std	Z+23, r25	; 0x17
    2766:	86 8b       	std	Z+22, r24	; 0x16
    2768:	e0 e1       	ldi	r30, 0x10	; 16
    276a:	f1 e0       	ldi	r31, 0x01	; 1
    276c:	27 a5       	ldd	r18, Z+47	; 0x2f
    276e:	30 a9       	ldd	r19, Z+48	; 0x30
    2770:	80 8d       	ldd	r24, Z+24	; 0x18
    2772:	91 8d       	ldd	r25, Z+25	; 0x19
    2774:	28 17       	cp	r18, r24
    2776:	39 07       	cpc	r19, r25
    2778:	20 f4       	brcc	.+8      	; 0x2782 <ModuleCurrentConvertReadings+0x102>
    277a:	87 a5       	ldd	r24, Z+47	; 0x2f
    277c:	90 a9       	ldd	r25, Z+48	; 0x30
    277e:	91 8f       	std	Z+25, r25	; 0x19
    2780:	80 8f       	std	Z+24, r24	; 0x18
    2782:	08 95       	ret

Disassembly of section .text.__vector_1:

00004940 <__vector_1>:

// NOTE: If you're getting unexpected AVR resets, uncomment these unused handlers to see
// if another interrupt is being taken that doesn't have a handler. AVR Defaults to jumping
// to 0 when not vector is programmed.
ISR(ANACOMP0_vect, ISR_BLOCK)
{
    4940:	1f 92       	push	r1
    4942:	0f 92       	push	r0
    4944:	0f b6       	in	r0, 0x3f	; 63
    4946:	0f 92       	push	r0
    4948:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) ANACOMP0_vect;
    494a:	80 ea       	ldi	r24, 0xA0	; 160
    494c:	94 e2       	ldi	r25, 0x24	; 36
    494e:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4952:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4956:	80 93 6b 09 	sts	0x096B, r24	; 0x80096b <sg_u8PCMSK0>
    495a:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    495e:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8PCMSK1>
    4962:	ff cf       	rjmp	.-2      	; 0x4962 <__vector_1+0x22>

Disassembly of section .text.__vector_2:

00004964 <__vector_2>:
	while (1);
}

ISR(ANACOMP1_vect, ISR_BLOCK)
{
    4964:	1f 92       	push	r1
    4966:	0f 92       	push	r0
    4968:	0f b6       	in	r0, 0x3f	; 63
    496a:	0f 92       	push	r0
    496c:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) ANACOMP1_vect;
    496e:	82 eb       	ldi	r24, 0xB2	; 178
    4970:	94 e2       	ldi	r25, 0x24	; 36
    4972:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4976:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    497a:	80 93 6b 09 	sts	0x096B, r24	; 0x80096b <sg_u8PCMSK0>
    497e:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4982:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8PCMSK1>
    4986:	ff cf       	rjmp	.-2      	; 0x4986 <__vector_2+0x22>

Disassembly of section .text.__vector_3:

00004988 <__vector_3>:
	while (1);
}

ISR(ANACOMP2_vect, ISR_BLOCK)
{
    4988:	1f 92       	push	r1
    498a:	0f 92       	push	r0
    498c:	0f b6       	in	r0, 0x3f	; 63
    498e:	0f 92       	push	r0
    4990:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) ANACOMP2_vect;
    4992:	84 ec       	ldi	r24, 0xC4	; 196
    4994:	94 e2       	ldi	r25, 0x24	; 36
    4996:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    499a:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    499e:	80 93 6b 09 	sts	0x096B, r24	; 0x80096b <sg_u8PCMSK0>
    49a2:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    49a6:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8PCMSK1>
    49aa:	ff cf       	rjmp	.-2      	; 0x49aa <__vector_3+0x22>

Disassembly of section .text.__vector_4:

000049ac <__vector_4>:
	while (1);
}

ISR(ANACOMP3_vect, ISR_BLOCK)
{
    49ac:	1f 92       	push	r1
    49ae:	0f 92       	push	r0
    49b0:	0f b6       	in	r0, 0x3f	; 63
    49b2:	0f 92       	push	r0
    49b4:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) ANACOMP3_vect;
    49b6:	86 ed       	ldi	r24, 0xD6	; 214
    49b8:	94 e2       	ldi	r25, 0x24	; 36
    49ba:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    49be:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    49c2:	80 93 6b 09 	sts	0x096B, r24	; 0x80096b <sg_u8PCMSK0>
    49c6:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    49ca:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8PCMSK1>
    49ce:	ff cf       	rjmp	.-2      	; 0x49ce <__vector_4+0x22>

Disassembly of section .text.__vector_5:

000049d0 <__vector_5>:
	while (1);
}

ISR(PSC_FAULT_vect, ISR_BLOCK)
{
    49d0:	1f 92       	push	r1
    49d2:	0f 92       	push	r0
    49d4:	0f b6       	in	r0, 0x3f	; 63
    49d6:	0f 92       	push	r0
    49d8:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) PSC_FAULT_vect;
    49da:	88 ee       	ldi	r24, 0xE8	; 232
    49dc:	94 e2       	ldi	r25, 0x24	; 36
    49de:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    49e2:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    49e6:	80 93 6b 09 	sts	0x096B, r24	; 0x80096b <sg_u8PCMSK0>
    49ea:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    49ee:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8PCMSK1>
    49f2:	ff cf       	rjmp	.-2      	; 0x49f2 <__vector_5+0x22>

Disassembly of section .text.__vector_6:

000049f4 <__vector_6>:
	while (1);
}

ISR(PSC_EC_vect, ISR_BLOCK)
{
    49f4:	1f 92       	push	r1
    49f6:	0f 92       	push	r0
    49f8:	0f b6       	in	r0, 0x3f	; 63
    49fa:	0f 92       	push	r0
    49fc:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) PSC_EC_vect;
    49fe:	8a ef       	ldi	r24, 0xFA	; 250
    4a00:	94 e2       	ldi	r25, 0x24	; 36
    4a02:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4a06:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4a0a:	80 93 6b 09 	sts	0x096B, r24	; 0x80096b <sg_u8PCMSK0>
    4a0e:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4a12:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8PCMSK1>
    4a16:	ff cf       	rjmp	.-2      	; 0x4a16 <__vector_6+0x22>

Disassembly of section .text.__vector_22:

00004a18 <__vector_22>:
	while (1);
}

ISR(PCINT0_vect, ISR_BLOCK)
{
    4a18:	1f 92       	push	r1
    4a1a:	0f 92       	push	r0
    4a1c:	0f b6       	in	r0, 0x3f	; 63
    4a1e:	0f 92       	push	r0
    4a20:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) PCINT0_vect;
    4a22:	8c e0       	ldi	r24, 0x0C	; 12
    4a24:	95 e2       	ldi	r25, 0x25	; 37
    4a26:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4a2a:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4a2e:	80 93 6b 09 	sts	0x096B, r24	; 0x80096b <sg_u8PCMSK0>
    4a32:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4a36:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8PCMSK1>
    4a3a:	ff cf       	rjmp	.-2      	; 0x4a3a <__vector_22+0x22>

Disassembly of section .text.__vector_9:

00004a3c <__vector_9>:
// 	while (1);
// }
*/

ISR(INT2_vect, ISR_BLOCK)
{
    4a3c:	1f 92       	push	r1
    4a3e:	0f 92       	push	r0
    4a40:	0f b6       	in	r0, 0x3f	; 63
    4a42:	0f 92       	push	r0
    4a44:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) INT2_vect;
    4a46:	8e e1       	ldi	r24, 0x1E	; 30
    4a48:	95 e2       	ldi	r25, 0x25	; 37
    4a4a:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4a4e:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4a52:	80 93 6b 09 	sts	0x096B, r24	; 0x80096b <sg_u8PCMSK0>
    4a56:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4a5a:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8PCMSK1>
    4a5e:	ff cf       	rjmp	.-2      	; 0x4a5e <__vector_9+0x22>

Disassembly of section .text.__vector_11:

00004a60 <__vector_11>:
// 	while (1);
// }


ISR(TIMER1_CAPT_vect, ISR_BLOCK)
{
    4a60:	1f 92       	push	r1
    4a62:	0f 92       	push	r0
    4a64:	0f b6       	in	r0, 0x3f	; 63
    4a66:	0f 92       	push	r0
    4a68:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) TIMER1_CAPT_vect;
    4a6a:	80 e3       	ldi	r24, 0x30	; 48
    4a6c:	95 e2       	ldi	r25, 0x25	; 37
    4a6e:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4a72:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4a76:	80 93 6b 09 	sts	0x096B, r24	; 0x80096b <sg_u8PCMSK0>
    4a7a:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4a7e:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8PCMSK1>
    4a82:	ff cf       	rjmp	.-2      	; 0x4a82 <__vector_11+0x22>

Disassembly of section .text.__vector_13:

00004a84 <__vector_13>:
// }



ISR(TIMER1_COMPB_vect, ISR_BLOCK)
{
    4a84:	1f 92       	push	r1
    4a86:	0f 92       	push	r0
    4a88:	0f b6       	in	r0, 0x3f	; 63
    4a8a:	0f 92       	push	r0
    4a8c:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) TIMER1_COMPB_vect;
    4a8e:	82 e4       	ldi	r24, 0x42	; 66
    4a90:	95 e2       	ldi	r25, 0x25	; 37
    4a92:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4a96:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4a9a:	80 93 6b 09 	sts	0x096B, r24	; 0x80096b <sg_u8PCMSK0>
    4a9e:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4aa2:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8PCMSK1>
    4aa6:	ff cf       	rjmp	.-2      	; 0x4aa6 <__vector_13+0x22>

Disassembly of section .text.__vector_14:

00004aa8 <__vector_14>:
	while (1);
}


ISR(TIMER1_OVF_vect, ISR_BLOCK)
{
    4aa8:	1f 92       	push	r1
    4aaa:	0f 92       	push	r0
    4aac:	0f b6       	in	r0, 0x3f	; 63
    4aae:	0f 92       	push	r0
    4ab0:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) TIMER1_OVF_vect;
    4ab2:	84 e5       	ldi	r24, 0x54	; 84
    4ab4:	95 e2       	ldi	r25, 0x25	; 37
    4ab6:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4aba:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4abe:	80 93 6b 09 	sts	0x096B, r24	; 0x80096b <sg_u8PCMSK0>
    4ac2:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4ac6:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8PCMSK1>
    4aca:	ff cf       	rjmp	.-2      	; 0x4aca <__vector_14+0x22>

Disassembly of section .text.__vector_17:

00004acc <__vector_17>:
	while (1);
}

ISR(TIMER0_OVF_vect, ISR_BLOCK)
{
    4acc:	1f 92       	push	r1
    4ace:	0f 92       	push	r0
    4ad0:	0f b6       	in	r0, 0x3f	; 63
    4ad2:	0f 92       	push	r0
    4ad4:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) TIMER0_OVF_vect;
    4ad6:	86 e6       	ldi	r24, 0x66	; 102
    4ad8:	95 e2       	ldi	r25, 0x25	; 37
    4ada:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4ade:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4ae2:	80 93 6b 09 	sts	0x096B, r24	; 0x80096b <sg_u8PCMSK0>
    4ae6:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4aea:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8PCMSK1>
    4aee:	ff cf       	rjmp	.-2      	; 0x4aee <__vector_17+0x22>

Disassembly of section .text.__vector_19:

00004af0 <__vector_19>:
	while (1);
}

ISR(CAN_TOVF_vect, ISR_BLOCK)
{
    4af0:	1f 92       	push	r1
    4af2:	0f 92       	push	r0
    4af4:	0f b6       	in	r0, 0x3f	; 63
    4af6:	0f 92       	push	r0
    4af8:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) CAN_TOVF_vect;
    4afa:	88 e7       	ldi	r24, 0x78	; 120
    4afc:	95 e2       	ldi	r25, 0x25	; 37
    4afe:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4b02:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4b06:	80 93 6b 09 	sts	0x096B, r24	; 0x80096b <sg_u8PCMSK0>
    4b0a:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4b0e:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8PCMSK1>
    4b12:	ff cf       	rjmp	.-2      	; 0x4b12 <__vector_19+0x22>

Disassembly of section .text.__vector_21:

00004b14 <__vector_21>:
	while (1);
}

ISR(LIN_ERR_vect, ISR_BLOCK)
{
    4b14:	1f 92       	push	r1
    4b16:	0f 92       	push	r0
    4b18:	0f b6       	in	r0, 0x3f	; 63
    4b1a:	0f 92       	push	r0
    4b1c:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) LIN_ERR_vect;
    4b1e:	8a e8       	ldi	r24, 0x8A	; 138
    4b20:	95 e2       	ldi	r25, 0x25	; 37
    4b22:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4b26:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4b2a:	80 93 6b 09 	sts	0x096B, r24	; 0x80096b <sg_u8PCMSK0>
    4b2e:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4b32:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8PCMSK1>
    4b36:	ff cf       	rjmp	.-2      	; 0x4b36 <__vector_21+0x22>

Disassembly of section .text.__vector_25:

00004b38 <__vector_25>:
// 	while (1);
// }


ISR(PCINT3_vect, ISR_BLOCK)
{
    4b38:	1f 92       	push	r1
    4b3a:	0f 92       	push	r0
    4b3c:	0f b6       	in	r0, 0x3f	; 63
    4b3e:	0f 92       	push	r0
    4b40:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) PCINT3_vect;
    4b42:	8c e9       	ldi	r24, 0x9C	; 156
    4b44:	95 e2       	ldi	r25, 0x25	; 37
    4b46:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4b4a:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4b4e:	80 93 6b 09 	sts	0x096B, r24	; 0x80096b <sg_u8PCMSK0>
    4b52:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4b56:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8PCMSK1>
    4b5a:	ff cf       	rjmp	.-2      	; 0x4b5a <__vector_25+0x22>

Disassembly of section .text.__vector_26:

00004b5c <__vector_26>:
	while (1);
}


ISR(SPI_STC_vect, ISR_BLOCK)
{
    4b5c:	1f 92       	push	r1
    4b5e:	0f 92       	push	r0
    4b60:	0f b6       	in	r0, 0x3f	; 63
    4b62:	0f 92       	push	r0
    4b64:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) SPI_STC_vect;
    4b66:	8e ea       	ldi	r24, 0xAE	; 174
    4b68:	95 e2       	ldi	r25, 0x25	; 37
    4b6a:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4b6e:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4b72:	80 93 6b 09 	sts	0x096B, r24	; 0x80096b <sg_u8PCMSK0>
    4b76:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4b7a:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8PCMSK1>
    4b7e:	ff cf       	rjmp	.-2      	; 0x4b7e <__vector_26+0x22>

Disassembly of section .text.__vector_29:

00004b80 <__vector_29>:
	while (1);
}

ISR(EE_READY_vect, ISR_BLOCK)
{
    4b80:	1f 92       	push	r1
    4b82:	0f 92       	push	r0
    4b84:	0f b6       	in	r0, 0x3f	; 63
    4b86:	0f 92       	push	r0
    4b88:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) EE_READY_vect;
    4b8a:	80 ec       	ldi	r24, 0xC0	; 192
    4b8c:	95 e2       	ldi	r25, 0x25	; 37
    4b8e:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4b92:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4b96:	80 93 6b 09 	sts	0x096B, r24	; 0x80096b <sg_u8PCMSK0>
    4b9a:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4b9e:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8PCMSK1>
    4ba2:	ff cf       	rjmp	.-2      	; 0x4ba2 <__vector_29+0x22>

Disassembly of section .text.__vector_30:

00004ba4 <__vector_30>:
	while (1);
}

ISR(SPM_READY_vect, ISR_BLOCK)
{
    4ba4:	1f 92       	push	r1
    4ba6:	0f 92       	push	r0
    4ba8:	0f b6       	in	r0, 0x3f	; 63
    4baa:	0f 92       	push	r0
    4bac:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) SPM_READY_vect;
    4bae:	82 ed       	ldi	r24, 0xD2	; 210
    4bb0:	95 e2       	ldi	r25, 0x25	; 37
    4bb2:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4bb6:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4bba:	80 93 6b 09 	sts	0x096B, r24	; 0x80096b <sg_u8PCMSK0>
    4bbe:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4bc2:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8PCMSK1>
    4bc6:	ff cf       	rjmp	.-2      	; 0x4bc6 <__vector_30+0x22>

Disassembly of section .text.CurrentThresholdsGet:

0000366c <CurrentThresholdsGet>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    366c:	0f 93       	push	r16
    366e:	1f 93       	push	r17
    3670:	cf 93       	push	r28
    3672:	df 93       	push	r29
    3674:	8c 01       	movw	r16, r24
    3676:	eb 01       	movw	r28, r22
    3678:	89 2b       	or	r24, r25
    367a:	f9 f0       	breq	.+62     	; 0x36ba <CurrentThresholdsGet+0x4e>
    367c:	87 e0       	ldi	r24, 0x07	; 7
    367e:	90 e0       	ldi	r25, 0x00	; 0
    3680:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <EEPROMRead>
    3684:	90 e0       	ldi	r25, 0x00	; 0
    3686:	f8 01       	movw	r30, r16
    3688:	91 83       	std	Z+1, r25	; 0x01
    368a:	80 83       	st	Z, r24
    368c:	88 e0       	ldi	r24, 0x08	; 8
    368e:	90 e0       	ldi	r25, 0x00	; 0
    3690:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <EEPROMRead>
    3694:	90 e0       	ldi	r25, 0x00	; 0
    3696:	98 2f       	mov	r25, r24
    3698:	88 27       	eor	r24, r24
    369a:	f8 01       	movw	r30, r16
    369c:	20 81       	ld	r18, Z
    369e:	31 81       	ldd	r19, Z+1	; 0x01
    36a0:	82 2b       	or	r24, r18
    36a2:	93 2b       	or	r25, r19
    36a4:	91 83       	std	Z+1, r25	; 0x01
    36a6:	80 83       	st	Z, r24
    36a8:	01 97       	sbiw	r24, 0x01	; 1
    36aa:	8e 3f       	cpi	r24, 0xFE	; 254
    36ac:	9f 4f       	sbci	r25, 0xFF	; 255
    36ae:	28 f0       	brcs	.+10     	; 0x36ba <CurrentThresholdsGet+0x4e>
    36b0:	8c ec       	ldi	r24, 0xCC	; 204
    36b2:	97 e7       	ldi	r25, 0x77	; 119
    36b4:	f8 01       	movw	r30, r16
    36b6:	91 83       	std	Z+1, r25	; 0x01
    36b8:	80 83       	st	Z, r24
    36ba:	20 97       	sbiw	r28, 0x00	; 0
    36bc:	e1 f0       	breq	.+56     	; 0x36f6 <CurrentThresholdsGet+0x8a>
    36be:	85 e0       	ldi	r24, 0x05	; 5
    36c0:	90 e0       	ldi	r25, 0x00	; 0
    36c2:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <EEPROMRead>
    36c6:	90 e0       	ldi	r25, 0x00	; 0
    36c8:	99 83       	std	Y+1, r25	; 0x01
    36ca:	88 83       	st	Y, r24
    36cc:	86 e0       	ldi	r24, 0x06	; 6
    36ce:	90 e0       	ldi	r25, 0x00	; 0
    36d0:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <EEPROMRead>
    36d4:	90 e0       	ldi	r25, 0x00	; 0
    36d6:	98 2f       	mov	r25, r24
    36d8:	88 27       	eor	r24, r24
    36da:	28 81       	ld	r18, Y
    36dc:	39 81       	ldd	r19, Y+1	; 0x01
    36de:	82 2b       	or	r24, r18
    36e0:	93 2b       	or	r25, r19
    36e2:	99 83       	std	Y+1, r25	; 0x01
    36e4:	88 83       	st	Y, r24
    36e6:	01 97       	sbiw	r24, 0x01	; 1
    36e8:	8e 3f       	cpi	r24, 0xFE	; 254
    36ea:	9f 4f       	sbci	r25, 0xFF	; 255
    36ec:	20 f0       	brcs	.+8      	; 0x36f6 <CurrentThresholdsGet+0x8a>
    36ee:	84 ef       	ldi	r24, 0xF4	; 244
    36f0:	91 e8       	ldi	r25, 0x81	; 129
    36f2:	99 83       	std	Y+1, r25	; 0x01
    36f4:	88 83       	st	Y, r24
    36f6:	df 91       	pop	r29
    36f8:	cf 91       	pop	r28
    36fa:	1f 91       	pop	r17
    36fc:	0f 91       	pop	r16
    36fe:	08 95       	ret

Disassembly of section .text.CANReceiveCallback:

0000118e <CANReceiveCallback>:
    118e:	cf 92       	push	r12
    1190:	df 92       	push	r13
    1192:	ef 92       	push	r14
    1194:	ff 92       	push	r15
    1196:	cf 93       	push	r28
    1198:	fb 01       	movw	r30, r22
    119a:	90 91 21 03 	lds	r25, 0x0321	; 0x800321 <sg_bModuleRegistered>
    119e:	10 92 72 09 	sts	0x0972, r1	; 0x800972 <sg_u8TicksSinceLastPackControllerMessage>
    11a2:	82 31       	cpi	r24, 0x12	; 18
    11a4:	29 f4       	brne	.+10     	; 0x11b0 <CANReceiveCallback+0x22>
    11a6:	80 81       	ld	r24, Z
    11a8:	8f 70       	andi	r24, 0x0F	; 15
    11aa:	0e 94 91 26 	call	0x4d22	; 0x4d22 <ModuleControllerStateSetMax>
    11ae:	33 c1       	rjmp	.+614    	; 0x1416 <CANReceiveCallback+0x288>
    11b0:	8f 30       	cpi	r24, 0x0F	; 15
    11b2:	a9 f4       	brne	.+42     	; 0x11de <CANReceiveCallback+0x50>
    11b4:	8a ed       	ldi	r24, 0xDA	; 218
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	a0 e0       	ldi	r26, 0x00	; 0
    11ba:	af 93       	push	r26
    11bc:	9f 93       	push	r25
    11be:	8f 93       	push	r24
    11c0:	0e 94 14 27 	call	0x4e28	; 0x4e28 <DebugOut>
    11c4:	10 92 27 03 	sts	0x0327, r1	; 0x800327 <sg_u8ModuleRegistrationID>
    11c8:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <sg_bModuleRegistered>
    11cc:	10 92 76 09 	sts	0x0976, r1	; 0x800976 <sg_bIgnoreStatusRequests>
    11d0:	80 e0       	ldi	r24, 0x00	; 0
    11d2:	0e 94 41 27 	call	0x4e82	; 0x4e82 <ModuleControllerStateSet>
    11d6:	0f 90       	pop	r0
    11d8:	0f 90       	pop	r0
    11da:	0f 90       	pop	r0
    11dc:	1c c1       	rjmp	.+568    	; 0x1416 <CANReceiveCallback+0x288>
    11de:	80 31       	cpi	r24, 0x10	; 16
    11e0:	21 f4       	brne	.+8      	; 0x11ea <CANReceiveCallback+0x5c>
    11e2:	80 e0       	ldi	r24, 0x00	; 0
    11e4:	0e 94 41 27 	call	0x4e82	; 0x4e82 <ModuleControllerStateSet>
    11e8:	16 c1       	rjmp	.+556    	; 0x1416 <CANReceiveCallback+0x288>
    11ea:	81 31       	cpi	r24, 0x11	; 17
    11ec:	59 f4       	brne	.+22     	; 0x1204 <CANReceiveCallback+0x76>
    11ee:	20 81       	ld	r18, Z
    11f0:	31 81       	ldd	r19, Z+1	; 0x01
    11f2:	42 81       	ldd	r20, Z+2	; 0x02
    11f4:	53 81       	ldd	r21, Z+3	; 0x03
    11f6:	64 81       	ldd	r22, Z+4	; 0x04
    11f8:	75 81       	ldd	r23, Z+5	; 0x05
    11fa:	86 81       	ldd	r24, Z+6	; 0x06
    11fc:	97 81       	ldd	r25, Z+7	; 0x07
    11fe:	0e 94 11 18 	call	0x3022	; 0x3022 <RTCSetTime>
    1202:	09 c1       	rjmp	.+530    	; 0x1416 <CANReceiveCallback+0x288>
    1204:	8d 30       	cpi	r24, 0x0D	; 13
    1206:	09 f0       	breq	.+2      	; 0x120a <CANReceiveCallback+0x7c>
    1208:	4f c0       	rjmp	.+158    	; 0x12a8 <CANReceiveCallback+0x11a>
    120a:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <sg_bModuleRegistered>
    120e:	81 11       	cpse	r24, r1
    1210:	2f c0       	rjmp	.+94     	; 0x1270 <CANReceiveCallback+0xe2>
    1212:	80 91 78 09 	lds	r24, 0x0978	; 0x800978 <sg_bAnnouncementPending>
    1216:	81 11       	cpse	r24, r1
    1218:	2b c0       	rjmp	.+86     	; 0x1270 <CANReceiveCallback+0xe2>
    121a:	c0 90 1e 01 	lds	r12, 0x011E	; 0x80011e <sg_sFrame+0xe>
    121e:	d0 90 1f 01 	lds	r13, 0x011F	; 0x80011f <sg_sFrame+0xf>
    1222:	e0 90 20 01 	lds	r14, 0x0120	; 0x800120 <sg_sFrame+0x10>
    1226:	f0 90 21 01 	lds	r15, 0x0121	; 0x800121 <sg_sFrame+0x11>
    122a:	1f 92       	push	r1
    122c:	cf 92       	push	r12
    122e:	85 e0       	ldi	r24, 0x05	; 5
    1230:	91 e0       	ldi	r25, 0x01	; 1
    1232:	a0 e0       	ldi	r26, 0x00	; 0
    1234:	af 93       	push	r26
    1236:	9f 93       	push	r25
    1238:	8f 93       	push	r24
    123a:	0e 94 14 27 	call	0x4e28	; 0x4e28 <DebugOut>
    123e:	8d ec       	ldi	r24, 0xCD	; 205
    1240:	c8 9e       	mul	r12, r24
    1242:	c1 2c       	mov	r12, r1
    1244:	11 24       	eor	r1, r1
    1246:	c6 94       	lsr	r12
    1248:	c6 94       	lsr	r12
    124a:	c6 94       	lsr	r12
    124c:	c0 92 77 09 	sts	0x0977, r12	; 0x800977 <sg_u8AnnouncementDelayTicks>
    1250:	80 91 77 09 	lds	r24, 0x0977	; 0x800977 <sg_u8AnnouncementDelayTicks>
    1254:	0f 90       	pop	r0
    1256:	0f 90       	pop	r0
    1258:	0f 90       	pop	r0
    125a:	0f 90       	pop	r0
    125c:	0f 90       	pop	r0
    125e:	81 11       	cpse	r24, r1
    1260:	03 c0       	rjmp	.+6      	; 0x1268 <CANReceiveCallback+0xda>
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	80 93 77 09 	sts	0x0977, r24	; 0x800977 <sg_u8AnnouncementDelayTicks>
    1268:	81 e0       	ldi	r24, 0x01	; 1
    126a:	80 93 78 09 	sts	0x0978, r24	; 0x800978 <sg_bAnnouncementPending>
    126e:	d3 c0       	rjmp	.+422    	; 0x1416 <CANReceiveCallback+0x288>
    1270:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <sg_bModuleRegistered>
    1274:	88 23       	and	r24, r24
    1276:	61 f0       	breq	.+24     	; 0x1290 <CANReceiveCallback+0x102>
    1278:	88 e4       	ldi	r24, 0x48	; 72
    127a:	91 e0       	ldi	r25, 0x01	; 1
    127c:	a0 e0       	ldi	r26, 0x00	; 0
    127e:	af 93       	push	r26
    1280:	9f 93       	push	r25
    1282:	8f 93       	push	r24
    1284:	0e 94 14 27 	call	0x4e28	; 0x4e28 <DebugOut>
    1288:	0f 90       	pop	r0
    128a:	0f 90       	pop	r0
    128c:	0f 90       	pop	r0
    128e:	c3 c0       	rjmp	.+390    	; 0x1416 <CANReceiveCallback+0x288>
    1290:	86 e7       	ldi	r24, 0x76	; 118
    1292:	91 e0       	ldi	r25, 0x01	; 1
    1294:	a0 e0       	ldi	r26, 0x00	; 0
    1296:	af 93       	push	r26
    1298:	9f 93       	push	r25
    129a:	8f 93       	push	r24
    129c:	0e 94 14 27 	call	0x4e28	; 0x4e28 <DebugOut>
    12a0:	0f 90       	pop	r0
    12a2:	0f 90       	pop	r0
    12a4:	0f 90       	pop	r0
    12a6:	b7 c0       	rjmp	.+366    	; 0x1416 <CANReceiveCallback+0x288>
    12a8:	89 30       	cpi	r24, 0x09	; 9
    12aa:	09 f0       	breq	.+2      	; 0x12ae <CANReceiveCallback+0x120>
    12ac:	3f c0       	rjmp	.+126    	; 0x132c <CANReceiveCallback+0x19e>
    12ae:	48 30       	cpi	r20, 0x08	; 8
    12b0:	09 f0       	breq	.+2      	; 0x12b4 <CANReceiveCallback+0x126>
    12b2:	b1 c0       	rjmp	.+354    	; 0x1416 <CANReceiveCallback+0x288>
    12b4:	f0 80       	ld	r15, Z
    12b6:	82 81       	ldd	r24, Z+2	; 0x02
    12b8:	82 30       	cpi	r24, 0x02	; 2
    12ba:	09 f0       	breq	.+2      	; 0x12be <CANReceiveCallback+0x130>
    12bc:	ac c0       	rjmp	.+344    	; 0x1416 <CANReceiveCallback+0x288>
    12be:	83 81       	ldd	r24, Z+3	; 0x03
    12c0:	83 30       	cpi	r24, 0x03	; 3
    12c2:	09 f0       	breq	.+2      	; 0x12c6 <CANReceiveCallback+0x138>
    12c4:	a8 c0       	rjmp	.+336    	; 0x1416 <CANReceiveCallback+0x288>
    12c6:	40 91 1e 01 	lds	r20, 0x011E	; 0x80011e <sg_sFrame+0xe>
    12ca:	50 91 1f 01 	lds	r21, 0x011F	; 0x80011f <sg_sFrame+0xf>
    12ce:	60 91 20 01 	lds	r22, 0x0120	; 0x800120 <sg_sFrame+0x10>
    12d2:	70 91 21 01 	lds	r23, 0x0121	; 0x800121 <sg_sFrame+0x11>
    12d6:	84 81       	ldd	r24, Z+4	; 0x04
    12d8:	95 81       	ldd	r25, Z+5	; 0x05
    12da:	a6 81       	ldd	r26, Z+6	; 0x06
    12dc:	b7 81       	ldd	r27, Z+7	; 0x07
    12de:	48 17       	cp	r20, r24
    12e0:	59 07       	cpc	r21, r25
    12e2:	6a 07       	cpc	r22, r26
    12e4:	7b 07       	cpc	r23, r27
    12e6:	09 f0       	breq	.+2      	; 0x12ea <CANReceiveCallback+0x15c>
    12e8:	96 c0       	rjmp	.+300    	; 0x1416 <CANReceiveCallback+0x288>
    12ea:	10 92 72 09 	sts	0x0972, r1	; 0x800972 <sg_u8TicksSinceLastPackControllerMessage>
    12ee:	f0 92 27 03 	sts	0x0327, r15	; 0x800327 <sg_u8ModuleRegistrationID>
    12f2:	0e 94 f4 26 	call	0x4de8	; 0x4de8 <SendModuleControllerStatus>
    12f6:	c1 e0       	ldi	r28, 0x01	; 1
    12f8:	c0 93 1c 03 	sts	0x031C, r28	; 0x80031c <sg_bSendHardwareDetail>
    12fc:	c0 93 21 03 	sts	0x0321, r28	; 0x800321 <sg_bModuleRegistered>
    1300:	1f 92       	push	r1
    1302:	ff 92       	push	r15
    1304:	8e e9       	ldi	r24, 0x9E	; 158
    1306:	91 e0       	ldi	r25, 0x01	; 1
    1308:	a0 e0       	ldi	r26, 0x00	; 0
    130a:	af 93       	push	r26
    130c:	9f 93       	push	r25
    130e:	8f 93       	push	r24
    1310:	0e 94 14 27 	call	0x4e28	; 0x4e28 <DebugOut>
    1314:	10 92 78 09 	sts	0x0978, r1	; 0x800978 <sg_bAnnouncementPending>
    1318:	10 92 77 09 	sts	0x0977, r1	; 0x800977 <sg_u8AnnouncementDelayTicks>
    131c:	c0 93 20 03 	sts	0x0320, r28	; 0x800320 <sg_bSendTimeRequest>
    1320:	0f 90       	pop	r0
    1322:	0f 90       	pop	r0
    1324:	0f 90       	pop	r0
    1326:	0f 90       	pop	r0
    1328:	0f 90       	pop	r0
    132a:	75 c0       	rjmp	.+234    	; 0x1416 <CANReceiveCallback+0x288>
    132c:	44 23       	and	r20, r20
    132e:	09 f4       	brne	.+2      	; 0x1332 <CANReceiveCallback+0x1a4>
    1330:	72 c0       	rjmp	.+228    	; 0x1416 <CANReceiveCallback+0x288>
    1332:	20 81       	ld	r18, Z
    1334:	91 11       	cpse	r25, r1
    1336:	08 c0       	rjmp	.+16     	; 0x1348 <CANReceiveCallback+0x1ba>
    1338:	8a 30       	cpi	r24, 0x0A	; 10
    133a:	09 f0       	breq	.+2      	; 0x133e <CANReceiveCallback+0x1b0>
    133c:	6c c0       	rjmp	.+216    	; 0x1416 <CANReceiveCallback+0x288>
    133e:	90 91 21 03 	lds	r25, 0x0321	; 0x800321 <sg_bModuleRegistered>
    1342:	99 23       	and	r25, r25
    1344:	09 f4       	brne	.+2      	; 0x1348 <CANReceiveCallback+0x1ba>
    1346:	67 c0       	rjmp	.+206    	; 0x1416 <CANReceiveCallback+0x288>
    1348:	90 91 27 03 	lds	r25, 0x0327	; 0x800327 <sg_u8ModuleRegistrationID>
    134c:	29 13       	cpse	r18, r25
    134e:	63 c0       	rjmp	.+198    	; 0x1416 <CANReceiveCallback+0x288>
    1350:	8a 30       	cpi	r24, 0x0A	; 10
    1352:	a9 f4       	brne	.+42     	; 0x137e <CANReceiveCallback+0x1f0>
    1354:	41 30       	cpi	r20, 0x01	; 1
    1356:	09 f0       	breq	.+2      	; 0x135a <CANReceiveCallback+0x1cc>
    1358:	5e c0       	rjmp	.+188    	; 0x1416 <CANReceiveCallback+0x288>
    135a:	80 91 76 09 	lds	r24, 0x0976	; 0x800976 <sg_bIgnoreStatusRequests>
    135e:	81 11       	cpse	r24, r1
    1360:	5a c0       	rjmp	.+180    	; 0x1416 <CANReceiveCallback+0x288>
    1362:	89 ed       	ldi	r24, 0xD9	; 217
    1364:	91 e0       	ldi	r25, 0x01	; 1
    1366:	a0 e0       	ldi	r26, 0x00	; 0
    1368:	af 93       	push	r26
    136a:	9f 93       	push	r25
    136c:	8f 93       	push	r24
    136e:	0e 94 14 27 	call	0x4e28	; 0x4e28 <DebugOut>
    1372:	0e 94 f4 26 	call	0x4de8	; 0x4de8 <SendModuleControllerStatus>
    1376:	0f 90       	pop	r0
    1378:	0f 90       	pop	r0
    137a:	0f 90       	pop	r0
    137c:	4c c0       	rjmp	.+152    	; 0x1416 <CANReceiveCallback+0x288>
    137e:	8b 30       	cpi	r24, 0x0B	; 11
    1380:	f9 f4       	brne	.+62     	; 0x13c0 <CANReceiveCallback+0x232>
    1382:	43 30       	cpi	r20, 0x03	; 3
    1384:	09 f0       	breq	.+2      	; 0x1388 <CANReceiveCallback+0x1fa>
    1386:	47 c0       	rjmp	.+142    	; 0x1416 <CANReceiveCallback+0x288>
    1388:	80 91 1d 03 	lds	r24, 0x031D	; 0x80031d <sg_bSendCellStatus>
    138c:	81 11       	cpse	r24, r1
    138e:	43 c0       	rjmp	.+134    	; 0x1416 <CANReceiveCallback+0x288>
    1390:	81 81       	ldd	r24, Z+1	; 0x01
    1392:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <sg_sFrame+0x15>
    1396:	89 17       	cp	r24, r25
    1398:	f0 f5       	brcc	.+124    	; 0x1416 <CANReceiveCallback+0x288>
    139a:	80 93 23 03 	sts	0x0323, r24	; 0x800323 <sg_u8CellStatus>
    139e:	90 91 23 03 	lds	r25, 0x0323	; 0x800323 <sg_u8CellStatus>
    13a2:	9f 5f       	subi	r25, 0xFF	; 255
    13a4:	90 93 24 03 	sts	0x0324, r25	; 0x800324 <sg_u8CellStatusTarget>
    13a8:	8f 3f       	cpi	r24, 0xFF	; 255
    13aa:	31 f4       	brne	.+12     	; 0x13b8 <CANReceiveCallback+0x22a>
    13ac:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <sg_sFrame+0x15>
    13b0:	80 93 24 03 	sts	0x0324, r24	; 0x800324 <sg_u8CellStatusTarget>
    13b4:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <sg_u8CellStatus>
    13b8:	81 e0       	ldi	r24, 0x01	; 1
    13ba:	80 93 1d 03 	sts	0x031D, r24	; 0x80031d <sg_bSendCellStatus>
    13be:	2b c0       	rjmp	.+86     	; 0x1416 <CANReceiveCallback+0x288>
    13c0:	8c 30       	cpi	r24, 0x0C	; 12
    13c2:	49 f4       	brne	.+18     	; 0x13d6 <CANReceiveCallback+0x248>
    13c4:	10 92 72 09 	sts	0x0972, r1	; 0x800972 <sg_u8TicksSinceLastPackControllerMessage>
    13c8:	42 30       	cpi	r20, 0x02	; 2
    13ca:	29 f5       	brne	.+74     	; 0x1416 <CANReceiveCallback+0x288>
    13cc:	81 81       	ldd	r24, Z+1	; 0x01
    13ce:	8f 70       	andi	r24, 0x0F	; 15
    13d0:	0e 94 41 27 	call	0x4e82	; 0x4e82 <ModuleControllerStateSet>
    13d4:	20 c0       	rjmp	.+64     	; 0x1416 <CANReceiveCallback+0x288>
    13d6:	85 30       	cpi	r24, 0x05	; 5
    13d8:	21 f4       	brne	.+8      	; 0x13e2 <CANReceiveCallback+0x254>
    13da:	81 e0       	ldi	r24, 0x01	; 1
    13dc:	80 93 1c 03 	sts	0x031C, r24	; 0x80031c <sg_bSendHardwareDetail>
    13e0:	1a c0       	rjmp	.+52     	; 0x1416 <CANReceiveCallback+0x288>
    13e2:	8e 30       	cpi	r24, 0x0E	; 14
    13e4:	c1 f4       	brne	.+48     	; 0x1416 <CANReceiveCallback+0x288>
    13e6:	1f 92       	push	r1
    13e8:	2f 93       	push	r18
    13ea:	8e ef       	ldi	r24, 0xFE	; 254
    13ec:	91 e0       	ldi	r25, 0x01	; 1
    13ee:	a0 e0       	ldi	r26, 0x00	; 0
    13f0:	af 93       	push	r26
    13f2:	9f 93       	push	r25
    13f4:	8f 93       	push	r24
    13f6:	0e 94 14 27 	call	0x4e28	; 0x4e28 <DebugOut>
    13fa:	10 92 27 03 	sts	0x0327, r1	; 0x800327 <sg_u8ModuleRegistrationID>
    13fe:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <sg_bModuleRegistered>
    1402:	10 92 76 09 	sts	0x0976, r1	; 0x800976 <sg_bIgnoreStatusRequests>
    1406:	80 e0       	ldi	r24, 0x00	; 0
    1408:	0e 94 41 27 	call	0x4e82	; 0x4e82 <ModuleControllerStateSet>
    140c:	0f 90       	pop	r0
    140e:	0f 90       	pop	r0
    1410:	0f 90       	pop	r0
    1412:	0f 90       	pop	r0
    1414:	0f 90       	pop	r0
    1416:	cf 91       	pop	r28
    1418:	ff 90       	pop	r15
    141a:	ef 90       	pop	r14
    141c:	df 90       	pop	r13
    141e:	cf 90       	pop	r12
    1420:	08 95       	ret

Disassembly of section .text.ControllerStatusMessagesSend:

00000810 <ControllerStatusMessagesSend>:
 810:	cf 92       	push	r12
 812:	df 92       	push	r13
 814:	ef 92       	push	r14
 816:	ff 92       	push	r15
 818:	0f 93       	push	r16
 81a:	1f 93       	push	r17
 81c:	cf 93       	push	r28
 81e:	df 93       	push	r29
 820:	00 d0       	rcall	.+0      	; 0x822 <ControllerStatusMessagesSend+0x12>
 822:	00 d0       	rcall	.+0      	; 0x824 <ControllerStatusMessagesSend+0x14>
 824:	cd b7       	in	r28, 0x3d	; 61
 826:	de b7       	in	r29, 0x3e	; 62
 828:	8c 01       	movw	r16, r24
 82a:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <sg_bSendTimeRequest>
 82e:	88 23       	and	r24, r24
 830:	69 f0       	breq	.+26     	; 0x84c <ControllerStatusMessagesSend+0x3c>
 832:	88 e0       	ldi	r24, 0x08	; 8
 834:	d8 01       	movw	r26, r16
 836:	1d 92       	st	X+, r1
 838:	8a 95       	dec	r24
 83a:	e9 f7       	brne	.-6      	; 0x836 <ControllerStatusMessagesSend+0x26>
 83c:	48 e0       	ldi	r20, 0x08	; 8
 83e:	b8 01       	movw	r22, r16
 840:	88 e0       	ldi	r24, 0x08	; 8
 842:	0e 94 86 26 	call	0x4d0c	; 0x4d0c <CANSendMessage>
 846:	81 11       	cpse	r24, r1
 848:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <sg_bSendTimeRequest>
 84c:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <sg_bSendModuleControllerStatus>
 850:	88 23       	and	r24, r24
 852:	09 f4       	brne	.+2      	; 0x856 <ControllerStatusMessagesSend+0x46>
 854:	06 c1       	rjmp	.+524    	; 0xa62 <ControllerStatusMessagesSend+0x252>
 856:	80 91 6e 09 	lds	r24, 0x096E	; 0x80096e <sg_u8ControllerStatusMsgCount>
 85a:	81 11       	cpse	r24, r1
 85c:	80 c0       	rjmp	.+256    	; 0x95e <ControllerStatusMessagesSend+0x14e>
 85e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
 862:	8f 70       	andi	r24, 0x0F	; 15
 864:	f8 01       	movw	r30, r16
 866:	80 83       	st	Z, r24
 868:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <sg_u8SOC>
 86c:	81 83       	std	Z+1, r24	; 0x01
 86e:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <sg_u8SOH>
 872:	82 83       	std	Z+2, r24	; 0x02
 874:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <sg_sFrame+0x15>
 878:	83 83       	std	Z+3, r24	; 0x03
 87a:	84 e0       	ldi	r24, 0x04	; 4
 87c:	34 96       	adiw	r30, 0x04	; 4
 87e:	df 01       	movw	r26, r30
 880:	1d 92       	st	X+, r1
 882:	8a 95       	dec	r24
 884:	e9 f7       	brne	.-6      	; 0x880 <ControllerStatusMessagesSend+0x70>
 886:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <sg_sFrame+0x48>
 88a:	88 23       	and	r24, r24
 88c:	79 f0       	breq	.+30     	; 0x8ac <ControllerStatusMessagesSend+0x9c>
 88e:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <sg_sFrame+0x4b>
 892:	88 23       	and	r24, r24
 894:	71 f0       	breq	.+28     	; 0x8b2 <ControllerStatusMessagesSend+0xa2>
 896:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
 89a:	83 30       	cpi	r24, 0x03	; 3
 89c:	69 f4       	brne	.+26     	; 0x8b8 <ControllerStatusMessagesSend+0xa8>
 89e:	0e 94 40 13 	call	0x2680	; 0x2680 <ModuleCurrentConvertReadings>
 8a2:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <sg_sFrame+0x2f>
 8a6:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <sg_sFrame+0x30>
 8aa:	08 c0       	rjmp	.+16     	; 0x8bc <ControllerStatusMessagesSend+0xac>
 8ac:	80 e0       	ldi	r24, 0x00	; 0
 8ae:	90 e8       	ldi	r25, 0x80	; 128
 8b0:	05 c0       	rjmp	.+10     	; 0x8bc <ControllerStatusMessagesSend+0xac>
 8b2:	80 e0       	ldi	r24, 0x00	; 0
 8b4:	90 e8       	ldi	r25, 0x80	; 128
 8b6:	02 c0       	rjmp	.+4      	; 0x8bc <ControllerStatusMessagesSend+0xac>
 8b8:	80 e0       	ldi	r24, 0x00	; 0
 8ba:	90 e8       	ldi	r25, 0x80	; 128
 8bc:	f8 01       	movw	r30, r16
 8be:	84 83       	std	Z+4, r24	; 0x04
 8c0:	95 83       	std	Z+5, r25	; 0x05
 8c2:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <sg_sFrame+0x45>
 8c6:	88 23       	and	r24, r24
 8c8:	79 f0       	breq	.+30     	; 0x8e8 <ControllerStatusMessagesSend+0xd8>
 8ca:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <sg_sFrame+0x46>
 8ce:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <sg_sFrame+0x47>
 8d2:	4f ef       	ldi	r20, 0xFF	; 255
 8d4:	53 e0       	ldi	r21, 0x03	; 3
 8d6:	60 e0       	ldi	r22, 0x00	; 0
 8d8:	70 e0       	ldi	r23, 0x00	; 0
 8da:	9a 01       	movw	r18, r20
 8dc:	ab 01       	movw	r20, r22
 8de:	28 1b       	sub	r18, r24
 8e0:	39 0b       	sbc	r19, r25
 8e2:	41 09       	sbc	r20, r1
 8e4:	51 09       	sbc	r21, r1
 8e6:	03 c0       	rjmp	.+6      	; 0x8ee <ControllerStatusMessagesSend+0xde>
 8e8:	20 e0       	ldi	r18, 0x00	; 0
 8ea:	30 e0       	ldi	r19, 0x00	; 0
 8ec:	a9 01       	movw	r20, r18
 8ee:	e0 e1       	ldi	r30, 0x10	; 16
 8f0:	f1 e0       	ldi	r31, 0x01	; 1
 8f2:	a5 a1       	ldd	r26, Z+37	; 0x25
 8f4:	b6 a1       	ldd	r27, Z+38	; 0x26
 8f6:	0e 94 04 27 	call	0x4e08	; 0x4e08 <__mulshisi3>
 8fa:	dc 01       	movw	r26, r24
 8fc:	cb 01       	movw	r24, r22
 8fe:	68 94       	set
 900:	16 f8       	bld	r1, 6
 902:	b6 95       	lsr	r27
 904:	a7 95       	ror	r26
 906:	97 95       	ror	r25
 908:	87 95       	ror	r24
 90a:	16 94       	lsr	r1
 90c:	d1 f7       	brne	.-12     	; 0x902 <ControllerStatusMessagesSend+0xf2>
 90e:	c5 8c       	ldd	r12, Z+29	; 0x1d
 910:	d6 8c       	ldd	r13, Z+30	; 0x1e
 912:	e7 8c       	ldd	r14, Z+31	; 0x1f
 914:	f0 a0       	ldd	r15, Z+32	; 0x20
 916:	bc 01       	movw	r22, r24
 918:	cd 01       	movw	r24, r26
 91a:	6c 0d       	add	r22, r12
 91c:	7d 1d       	adc	r23, r13
 91e:	8e 1d       	adc	r24, r14
 920:	9f 1d       	adc	r25, r15
 922:	2f e0       	ldi	r18, 0x0F	; 15
 924:	30 e0       	ldi	r19, 0x00	; 0
 926:	40 e0       	ldi	r20, 0x00	; 0
 928:	50 e0       	ldi	r21, 0x00	; 0
 92a:	0e 94 0d 22 	call	0x441a	; 0x441a <__udivmodsi4>
 92e:	20 93 51 01 	sts	0x0151, r18	; 0x800151 <sg_sFrame+0x41>
 932:	30 93 52 01 	sts	0x0152, r19	; 0x800152 <sg_sFrame+0x42>
 936:	40 93 53 01 	sts	0x0153, r20	; 0x800153 <sg_sFrame+0x43>
 93a:	50 93 54 01 	sts	0x0154, r21	; 0x800154 <sg_sFrame+0x44>
 93e:	d8 01       	movw	r26, r16
 940:	16 96       	adiw	r26, 0x06	; 6
 942:	2c 93       	st	X, r18
 944:	16 97       	sbiw	r26, 0x06	; 6
 946:	17 96       	adiw	r26, 0x07	; 7
 948:	3c 93       	st	X, r19
 94a:	48 e0       	ldi	r20, 0x08	; 8
 94c:	b8 01       	movw	r22, r16
 94e:	81 e0       	ldi	r24, 0x01	; 1
 950:	0e 94 86 26 	call	0x4d0c	; 0x4d0c <CANSendMessage>
 954:	88 23       	and	r24, r24
 956:	09 f4       	brne	.+2      	; 0x95a <ControllerStatusMessagesSend+0x14a>
 958:	6b c0       	rjmp	.+214    	; 0xa30 <ControllerStatusMessagesSend+0x220>
 95a:	81 e0       	ldi	r24, 0x01	; 1
 95c:	70 c0       	rjmp	.+224    	; 0xa3e <ControllerStatusMessagesSend+0x22e>
 95e:	81 30       	cpi	r24, 0x01	; 1
 960:	c1 f5       	brne	.+112    	; 0x9d2 <ControllerStatusMessagesSend+0x1c2>
 962:	e0 e1       	ldi	r30, 0x10	; 16
 964:	f1 e0       	ldi	r31, 0x01	; 1
 966:	81 ad       	ldd	r24, Z+57	; 0x39
 968:	92 ad       	ldd	r25, Z+58	; 0x3a
 96a:	d8 01       	movw	r26, r16
 96c:	8c 93       	st	X, r24
 96e:	81 ad       	ldd	r24, Z+57	; 0x39
 970:	92 ad       	ldd	r25, Z+58	; 0x3a
 972:	11 96       	adiw	r26, 0x01	; 1
 974:	9c 93       	st	X, r25
 976:	11 97       	sbiw	r26, 0x01	; 1
 978:	87 a9       	ldd	r24, Z+55	; 0x37
 97a:	90 ad       	ldd	r25, Z+56	; 0x38
 97c:	12 96       	adiw	r26, 0x02	; 2
 97e:	8c 93       	st	X, r24
 980:	12 97       	sbiw	r26, 0x02	; 2
 982:	87 a9       	ldd	r24, Z+55	; 0x37
 984:	90 ad       	ldd	r25, Z+56	; 0x38
 986:	13 96       	adiw	r26, 0x03	; 3
 988:	9c 93       	st	X, r25
 98a:	13 97       	sbiw	r26, 0x03	; 3
 98c:	83 ad       	ldd	r24, Z+59	; 0x3b
 98e:	94 ad       	ldd	r25, Z+60	; 0x3c
 990:	14 96       	adiw	r26, 0x04	; 4
 992:	8c 93       	st	X, r24
 994:	14 97       	sbiw	r26, 0x04	; 4
 996:	83 ad       	ldd	r24, Z+59	; 0x3b
 998:	94 ad       	ldd	r25, Z+60	; 0x3c
 99a:	15 96       	adiw	r26, 0x05	; 5
 99c:	9c 93       	st	X, r25
 99e:	60 91 4d 01 	lds	r22, 0x014D	; 0x80014d <sg_sFrame+0x3d>
 9a2:	70 91 4e 01 	lds	r23, 0x014E	; 0x80014e <sg_sFrame+0x3e>
 9a6:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <sg_sFrame+0x3f>
 9aa:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <sg_sFrame+0x40>
 9ae:	2f e0       	ldi	r18, 0x0F	; 15
 9b0:	30 e0       	ldi	r19, 0x00	; 0
 9b2:	40 e0       	ldi	r20, 0x00	; 0
 9b4:	50 e0       	ldi	r21, 0x00	; 0
 9b6:	0e 94 0d 22 	call	0x441a	; 0x441a <__udivmodsi4>
 9ba:	f8 01       	movw	r30, r16
 9bc:	26 83       	std	Z+6, r18	; 0x06
 9be:	37 83       	std	Z+7, r19	; 0x07
 9c0:	48 e0       	ldi	r20, 0x08	; 8
 9c2:	b8 01       	movw	r22, r16
 9c4:	82 e0       	ldi	r24, 0x02	; 2
 9c6:	0e 94 86 26 	call	0x4d0c	; 0x4d0c <CANSendMessage>
 9ca:	88 23       	and	r24, r24
 9cc:	99 f1       	breq	.+102    	; 0xa34 <ControllerStatusMessagesSend+0x224>
 9ce:	81 e0       	ldi	r24, 0x01	; 1
 9d0:	36 c0       	rjmp	.+108    	; 0xa3e <ControllerStatusMessagesSend+0x22e>
 9d2:	82 30       	cpi	r24, 0x02	; 2
 9d4:	89 f5       	brne	.+98     	; 0xa38 <ControllerStatusMessagesSend+0x228>
 9d6:	e0 e1       	ldi	r30, 0x10	; 16
 9d8:	f1 e0       	ldi	r31, 0x01	; 1
 9da:	83 a9       	ldd	r24, Z+51	; 0x33
 9dc:	94 a9       	ldd	r25, Z+52	; 0x34
 9de:	d8 01       	movw	r26, r16
 9e0:	8c 93       	st	X, r24
 9e2:	83 a9       	ldd	r24, Z+51	; 0x33
 9e4:	94 a9       	ldd	r25, Z+52	; 0x34
 9e6:	11 96       	adiw	r26, 0x01	; 1
 9e8:	9c 93       	st	X, r25
 9ea:	11 97       	sbiw	r26, 0x01	; 1
 9ec:	81 a9       	ldd	r24, Z+49	; 0x31
 9ee:	92 a9       	ldd	r25, Z+50	; 0x32
 9f0:	12 96       	adiw	r26, 0x02	; 2
 9f2:	8c 93       	st	X, r24
 9f4:	12 97       	sbiw	r26, 0x02	; 2
 9f6:	81 a9       	ldd	r24, Z+49	; 0x31
 9f8:	92 a9       	ldd	r25, Z+50	; 0x32
 9fa:	13 96       	adiw	r26, 0x03	; 3
 9fc:	9c 93       	st	X, r25
 9fe:	13 97       	sbiw	r26, 0x03	; 3
 a00:	85 a9       	ldd	r24, Z+53	; 0x35
 a02:	96 a9       	ldd	r25, Z+54	; 0x36
 a04:	14 96       	adiw	r26, 0x04	; 4
 a06:	8c 93       	st	X, r24
 a08:	14 97       	sbiw	r26, 0x04	; 4
 a0a:	85 a9       	ldd	r24, Z+53	; 0x35
 a0c:	96 a9       	ldd	r25, Z+54	; 0x36
 a0e:	15 96       	adiw	r26, 0x05	; 5
 a10:	9c 93       	st	X, r25
 a12:	15 97       	sbiw	r26, 0x05	; 5
 a14:	16 96       	adiw	r26, 0x06	; 6
 a16:	1c 92       	st	X, r1
 a18:	16 97       	sbiw	r26, 0x06	; 6
 a1a:	17 96       	adiw	r26, 0x07	; 7
 a1c:	1c 92       	st	X, r1
 a1e:	48 e0       	ldi	r20, 0x08	; 8
 a20:	b8 01       	movw	r22, r16
 a22:	83 e0       	ldi	r24, 0x03	; 3
 a24:	0e 94 86 26 	call	0x4d0c	; 0x4d0c <CANSendMessage>
 a28:	88 23       	and	r24, r24
 a2a:	41 f0       	breq	.+16     	; 0xa3c <ControllerStatusMessagesSend+0x22c>
 a2c:	81 e0       	ldi	r24, 0x01	; 1
 a2e:	07 c0       	rjmp	.+14     	; 0xa3e <ControllerStatusMessagesSend+0x22e>
 a30:	80 e0       	ldi	r24, 0x00	; 0
 a32:	05 c0       	rjmp	.+10     	; 0xa3e <ControllerStatusMessagesSend+0x22e>
 a34:	80 e0       	ldi	r24, 0x00	; 0
 a36:	03 c0       	rjmp	.+6      	; 0xa3e <ControllerStatusMessagesSend+0x22e>
 a38:	81 e0       	ldi	r24, 0x01	; 1
 a3a:	01 c0       	rjmp	.+2      	; 0xa3e <ControllerStatusMessagesSend+0x22e>
 a3c:	80 e0       	ldi	r24, 0x00	; 0
 a3e:	88 23       	and	r24, r24
 a40:	81 f0       	breq	.+32     	; 0xa62 <ControllerStatusMessagesSend+0x252>
 a42:	80 91 6e 09 	lds	r24, 0x096E	; 0x80096e <sg_u8ControllerStatusMsgCount>
 a46:	8f 5f       	subi	r24, 0xFF	; 255
 a48:	80 93 6e 09 	sts	0x096E, r24	; 0x80096e <sg_u8ControllerStatusMsgCount>
 a4c:	83 30       	cpi	r24, 0x03	; 3
 a4e:	48 f0       	brcs	.+18     	; 0xa62 <ControllerStatusMessagesSend+0x252>
 a50:	10 92 6e 09 	sts	0x096E, r1	; 0x80096e <sg_u8ControllerStatusMsgCount>
 a54:	10 92 1e 03 	sts	0x031E, r1	; 0x80031e <sg_bSendModuleControllerStatus>
 a58:	10 92 76 09 	sts	0x0976, r1	; 0x800976 <sg_bIgnoreStatusRequests>
 a5c:	81 e0       	ldi	r24, 0x01	; 1
 a5e:	80 93 1b 03 	sts	0x031B, r24	; 0x80031b <sg_bSendCellCommStatus>
 a62:	80 91 1d 03 	lds	r24, 0x031D	; 0x80031d <sg_bSendCellStatus>
 a66:	88 23       	and	r24, r24
 a68:	09 f4       	brne	.+2      	; 0xa6c <ControllerStatusMessagesSend+0x25c>
 a6a:	8c c0       	rjmp	.+280    	; 0xb84 <ControllerStatusMessagesSend+0x374>
 a6c:	1c 82       	std	Y+4, r1	; 0x04
 a6e:	1b 82       	std	Y+3, r1	; 0x03
 a70:	1a 82       	std	Y+2, r1	; 0x02
 a72:	19 82       	std	Y+1, r1	; 0x01
 a74:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <sg_sFrame+0x15>
 a78:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <sg_u8CellStatus>
 a7c:	89 17       	cp	r24, r25
 a7e:	88 f5       	brcc	.+98     	; 0xae2 <ControllerStatusMessagesSend+0x2d2>
 a80:	e0 91 23 03 	lds	r30, 0x0323	; 0x800323 <sg_u8CellStatus>
 a84:	f0 e0       	ldi	r31, 0x00	; 0
 a86:	75 96       	adiw	r30, 0x15	; 21
 a88:	ee 0f       	add	r30, r30
 a8a:	ff 1f       	adc	r31, r31
 a8c:	ee 0f       	add	r30, r30
 a8e:	ff 1f       	adc	r31, r31
 a90:	e0 5f       	subi	r30, 0xF0	; 240
 a92:	fe 4f       	sbci	r31, 0xFE	; 254
 a94:	80 81       	ld	r24, Z
 a96:	91 81       	ldd	r25, Z+1	; 0x01
 a98:	e0 91 23 03 	lds	r30, 0x0323	; 0x800323 <sg_u8CellStatus>
 a9c:	f0 e0       	ldi	r31, 0x00	; 0
 a9e:	75 96       	adiw	r30, 0x15	; 21
 aa0:	ee 0f       	add	r30, r30
 aa2:	ff 1f       	adc	r31, r31
 aa4:	ee 0f       	add	r30, r30
 aa6:	ff 1f       	adc	r31, r31
 aa8:	e0 5f       	subi	r30, 0xF0	; 240
 aaa:	fe 4f       	sbci	r31, 0xFE	; 254
 aac:	e2 80       	ldd	r14, Z+2	; 0x02
 aae:	f3 80       	ldd	r15, Z+3	; 0x03
 ab0:	be 01       	movw	r22, r28
 ab2:	6d 5f       	subi	r22, 0xFD	; 253
 ab4:	7f 4f       	sbci	r23, 0xFF	; 255
 ab6:	0e 94 c8 1f 	call	0x3f90	; 0x3f90 <CellDataConvertVoltage>
 aba:	81 11       	cpse	r24, r1
 abc:	02 c0       	rjmp	.+4      	; 0xac2 <ControllerStatusMessagesSend+0x2b2>
 abe:	1c 82       	std	Y+4, r1	; 0x04
 ac0:	1b 82       	std	Y+3, r1	; 0x03
 ac2:	60 e0       	ldi	r22, 0x00	; 0
 ac4:	70 e0       	ldi	r23, 0x00	; 0
 ac6:	c7 01       	movw	r24, r14
 ac8:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <CellDataConvertTemperature>
 acc:	88 23       	and	r24, r24
 ace:	39 f0       	breq	.+14     	; 0xade <ControllerStatusMessagesSend+0x2ce>
 ad0:	be 01       	movw	r22, r28
 ad2:	6f 5f       	subi	r22, 0xFF	; 255
 ad4:	7f 4f       	sbci	r23, 0xFF	; 255
 ad6:	c7 01       	movw	r24, r14
 ad8:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <CellDataConvertTemperature>
 adc:	02 c0       	rjmp	.+4      	; 0xae2 <ControllerStatusMessagesSend+0x2d2>
 ade:	1a 82       	std	Y+2, r1	; 0x02
 ae0:	19 82       	std	Y+1, r1	; 0x01
 ae2:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <sg_u8CellStatus>
 ae6:	f8 01       	movw	r30, r16
 ae8:	80 83       	st	Z, r24
 aea:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <sg_sFrame+0x15>
 aee:	81 83       	std	Z+1, r24	; 0x01
 af0:	99 81       	ldd	r25, Y+1	; 0x01
 af2:	8a 81       	ldd	r24, Y+2	; 0x02
 af4:	92 83       	std	Z+2, r25	; 0x02
 af6:	83 83       	std	Z+3, r24	; 0x03
 af8:	2b 81       	ldd	r18, Y+3	; 0x03
 afa:	3c 81       	ldd	r19, Y+4	; 0x04
 afc:	24 83       	std	Z+4, r18	; 0x04
 afe:	35 83       	std	Z+5, r19	; 0x05
 b00:	21 15       	cp	r18, r1
 b02:	31 05       	cpc	r19, r1
 b04:	59 f0       	breq	.+22     	; 0xb1c <ControllerStatusMessagesSend+0x30c>
 b06:	c9 01       	movw	r24, r18
 b08:	64 e0       	ldi	r22, 0x04	; 4
 b0a:	70 e1       	ldi	r23, 0x10	; 16
 b0c:	0e 94 52 24 	call	0x48a4	; 0x48a4 <__udivmodhi4>
 b10:	84 e6       	ldi	r24, 0x64	; 100
 b12:	68 9f       	mul	r22, r24
 b14:	60 2d       	mov	r22, r0
 b16:	11 24       	eor	r1, r1
 b18:	66 83       	std	Z+6, r22	; 0x06
 b1a:	01 c0       	rjmp	.+2      	; 0xb1e <ControllerStatusMessagesSend+0x30e>
 b1c:	16 82       	std	Z+6, r1	; 0x06
 b1e:	e0 e1       	ldi	r30, 0x10	; 16
 b20:	f1 e0       	ldi	r31, 0x01	; 1
 b22:	47 a9       	ldd	r20, Z+55	; 0x37
 b24:	50 ad       	ldd	r21, Z+56	; 0x38
 b26:	81 ad       	ldd	r24, Z+57	; 0x39
 b28:	92 ad       	ldd	r25, Z+58	; 0x3a
 b2a:	84 17       	cp	r24, r20
 b2c:	95 07       	cpc	r25, r21
 b2e:	98 f4       	brcc	.+38     	; 0xb56 <ControllerStatusMessagesSend+0x346>
 b30:	21 15       	cp	r18, r1
 b32:	31 05       	cpc	r19, r1
 b34:	81 f0       	breq	.+32     	; 0xb56 <ControllerStatusMessagesSend+0x346>
 b36:	67 a9       	ldd	r22, Z+55	; 0x37
 b38:	70 ad       	ldd	r23, Z+56	; 0x38
 b3a:	81 ad       	ldd	r24, Z+57	; 0x39
 b3c:	92 ad       	ldd	r25, Z+58	; 0x3a
 b3e:	68 1b       	sub	r22, r24
 b40:	79 0b       	sbc	r23, r25
 b42:	c9 01       	movw	r24, r18
 b44:	0e 94 52 24 	call	0x48a4	; 0x48a4 <__udivmodhi4>
 b48:	84 e6       	ldi	r24, 0x64	; 100
 b4a:	68 9f       	mul	r22, r24
 b4c:	60 2d       	mov	r22, r0
 b4e:	11 24       	eor	r1, r1
 b50:	f8 01       	movw	r30, r16
 b52:	67 83       	std	Z+7, r22	; 0x07
 b54:	03 c0       	rjmp	.+6      	; 0xb5c <ControllerStatusMessagesSend+0x34c>
 b56:	d8 01       	movw	r26, r16
 b58:	17 96       	adiw	r26, 0x07	; 7
 b5a:	1c 92       	st	X, r1
 b5c:	48 e0       	ldi	r20, 0x08	; 8
 b5e:	b8 01       	movw	r22, r16
 b60:	84 e0       	ldi	r24, 0x04	; 4
 b62:	0e 94 86 26 	call	0x4d0c	; 0x4d0c <CANSendMessage>
 b66:	88 23       	and	r24, r24
 b68:	69 f0       	breq	.+26     	; 0xb84 <ControllerStatusMessagesSend+0x374>
 b6a:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <sg_u8CellStatus>
 b6e:	8f 5f       	subi	r24, 0xFF	; 255
 b70:	80 93 23 03 	sts	0x0323, r24	; 0x800323 <sg_u8CellStatus>
 b74:	90 91 23 03 	lds	r25, 0x0323	; 0x800323 <sg_u8CellStatus>
 b78:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <sg_u8CellStatusTarget>
 b7c:	98 17       	cp	r25, r24
 b7e:	10 f0       	brcs	.+4      	; 0xb84 <ControllerStatusMessagesSend+0x374>
 b80:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <sg_bSendCellStatus>
 b84:	80 91 1b 03 	lds	r24, 0x031B	; 0x80031b <sg_bSendCellCommStatus>
 b88:	88 23       	and	r24, r24
 b8a:	89 f1       	breq	.+98     	; 0xbee <ControllerStatusMessagesSend+0x3de>
 b8c:	e0 e1       	ldi	r30, 0x10	; 16
 b8e:	f1 e0       	ldi	r31, 0x01	; 1
 b90:	83 89       	ldd	r24, Z+19	; 0x13
 b92:	d8 01       	movw	r26, r16
 b94:	8c 93       	st	X, r24
 b96:	84 89       	ldd	r24, Z+20	; 0x14
 b98:	11 96       	adiw	r26, 0x01	; 1
 b9a:	8c 93       	st	X, r24
 b9c:	11 97       	sbiw	r26, 0x01	; 1
 b9e:	80 a5       	ldd	r24, Z+40	; 0x28
 ba0:	91 a5       	ldd	r25, Z+41	; 0x29
 ba2:	12 96       	adiw	r26, 0x02	; 2
 ba4:	8c 93       	st	X, r24
 ba6:	12 97       	sbiw	r26, 0x02	; 2
 ba8:	80 a5       	ldd	r24, Z+40	; 0x28
 baa:	91 a5       	ldd	r25, Z+41	; 0x29
 bac:	13 96       	adiw	r26, 0x03	; 3
 bae:	9c 93       	st	X, r25
 bb0:	13 97       	sbiw	r26, 0x03	; 3
 bb2:	86 a5       	ldd	r24, Z+46	; 0x2e
 bb4:	14 96       	adiw	r26, 0x04	; 4
 bb6:	8c 93       	st	X, r24
 bb8:	14 97       	sbiw	r26, 0x04	; 4
 bba:	82 a5       	ldd	r24, Z+42	; 0x2a
 bbc:	8f 3f       	cpi	r24, 0xFF	; 255
 bbe:	31 f0       	breq	.+12     	; 0xbcc <ControllerStatusMessagesSend+0x3bc>
 bc0:	85 a5       	ldd	r24, Z+45	; 0x2d
 bc2:	92 a5       	ldd	r25, Z+42	; 0x2a
 bc4:	89 1b       	sub	r24, r25
 bc6:	15 96       	adiw	r26, 0x05	; 5
 bc8:	8c 93       	st	X, r24
 bca:	03 c0       	rjmp	.+6      	; 0xbd2 <ControllerStatusMessagesSend+0x3c2>
 bcc:	8f ef       	ldi	r24, 0xFF	; 255
 bce:	f8 01       	movw	r30, r16
 bd0:	85 83       	std	Z+5, r24	; 0x05
 bd2:	d8 01       	movw	r26, r16
 bd4:	16 96       	adiw	r26, 0x06	; 6
 bd6:	1c 92       	st	X, r1
 bd8:	16 97       	sbiw	r26, 0x06	; 6
 bda:	17 96       	adiw	r26, 0x07	; 7
 bdc:	1c 92       	st	X, r1
 bde:	48 e0       	ldi	r20, 0x08	; 8
 be0:	b8 01       	movw	r22, r16
 be2:	86 e0       	ldi	r24, 0x06	; 6
 be4:	0e 94 86 26 	call	0x4d0c	; 0x4d0c <CANSendMessage>
 be8:	81 11       	cpse	r24, r1
 bea:	10 92 1b 03 	sts	0x031B, r1	; 0x80031b <sg_bSendCellCommStatus>
 bee:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <sg_bSendHardwareDetail>
 bf2:	88 23       	and	r24, r24
 bf4:	91 f0       	breq	.+36     	; 0xc1a <ControllerStatusMessagesSend+0x40a>
 bf6:	b8 01       	movw	r22, r16
 bf8:	c8 01       	movw	r24, r16
 bfa:	02 96       	adiw	r24, 0x02	; 2
 bfc:	0e 94 36 1b 	call	0x366c	; 0x366c <CurrentThresholdsGet>
 c00:	f8 01       	movw	r30, r16
 c02:	14 82       	std	Z+4, r1	; 0x04
 c04:	15 82       	std	Z+5, r1	; 0x05
 c06:	16 82       	std	Z+6, r1	; 0x06
 c08:	17 82       	std	Z+7, r1	; 0x07
 c0a:	48 e0       	ldi	r20, 0x08	; 8
 c0c:	b8 01       	movw	r22, r16
 c0e:	85 e0       	ldi	r24, 0x05	; 5
 c10:	0e 94 86 26 	call	0x4d0c	; 0x4d0c <CANSendMessage>
 c14:	81 11       	cpse	r24, r1
 c16:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <sg_bSendHardwareDetail>
 c1a:	0f 90       	pop	r0
 c1c:	0f 90       	pop	r0
 c1e:	0f 90       	pop	r0
 c20:	0f 90       	pop	r0
 c22:	df 91       	pop	r29
 c24:	cf 91       	pop	r28
 c26:	1f 91       	pop	r17
 c28:	0f 91       	pop	r16
 c2a:	ff 90       	pop	r15
 c2c:	ef 90       	pop	r14
 c2e:	df 90       	pop	r13
 c30:	cf 90       	pop	r12
 c32:	08 95       	ret

Disassembly of section .text.CellStringProcess:

00000ee8 <CellStringProcess>:
     ee8:	3f 92       	push	r3
     eea:	4f 92       	push	r4
     eec:	5f 92       	push	r5
     eee:	6f 92       	push	r6
     ef0:	7f 92       	push	r7
     ef2:	8f 92       	push	r8
     ef4:	9f 92       	push	r9
     ef6:	af 92       	push	r10
     ef8:	bf 92       	push	r11
     efa:	cf 92       	push	r12
     efc:	df 92       	push	r13
     efe:	ef 92       	push	r14
     f00:	ff 92       	push	r15
     f02:	0f 93       	push	r16
     f04:	1f 93       	push	r17
     f06:	cf 93       	push	r28
     f08:	df 93       	push	r29
     f0a:	00 d0       	rcall	.+0      	; 0xf0c <CellStringProcess+0x24>
     f0c:	00 d0       	rcall	.+0      	; 0xf0e <CellStringProcess+0x26>
     f0e:	00 d0       	rcall	.+0      	; 0xf10 <CellStringProcess+0x28>
     f10:	cd b7       	in	r28, 0x3d	; 61
     f12:	de b7       	in	r29, 0x3e	; 62
     f14:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <sg_sFrame+0x2b>
     f18:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <sg_sFrame+0x2c>
     f1c:	89 2b       	or	r24, r25
     f1e:	09 f4       	brne	.+2      	; 0xf22 <CellStringProcess+0x3a>
     f20:	1e c1       	rjmp	.+572    	; 0x115e <__stack+0x5f>
     f22:	e0 e1       	ldi	r30, 0x10	; 16
     f24:	f1 e0       	ldi	r31, 0x01	; 1
     f26:	8f ef       	ldi	r24, 0xFF	; 255
     f28:	82 a7       	std	Z+42, r24	; 0x2a
     f2a:	93 89       	ldd	r25, Z+19	; 0x13
     f2c:	85 a5       	ldd	r24, Z+45	; 0x2d
     f2e:	89 17       	cp	r24, r25
     f30:	28 f4       	brcc	.+10     	; 0xf3c <CellStringProcess+0x54>
     f32:	85 a5       	ldd	r24, Z+45	; 0x2d
     f34:	83 8b       	std	Z+19, r24	; 0x13
     f36:	81 e0       	ldi	r24, 0x01	; 1
     f38:	80 93 1b 03 	sts	0x031B, r24	; 0x80031b <sg_bSendCellCommStatus>
     f3c:	e0 e1       	ldi	r30, 0x10	; 16
     f3e:	f1 e0       	ldi	r31, 0x01	; 1
     f40:	94 89       	ldd	r25, Z+20	; 0x14
     f42:	85 a5       	ldd	r24, Z+45	; 0x2d
     f44:	98 17       	cp	r25, r24
     f46:	28 f4       	brcc	.+10     	; 0xf52 <CellStringProcess+0x6a>
     f48:	85 a5       	ldd	r24, Z+45	; 0x2d
     f4a:	84 8b       	std	Z+20, r24	; 0x14
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	80 93 1b 03 	sts	0x031B, r24	; 0x80031b <sg_bSendCellCommStatus>
     f52:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <sg_sFrame+0x2b>
     f56:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <sg_sFrame+0x2c>
     f5a:	83 70       	andi	r24, 0x03	; 3
     f5c:	99 27       	eor	r25, r25
     f5e:	89 2b       	or	r24, r25
     f60:	61 f0       	breq	.+24     	; 0xf7a <CellStringProcess+0x92>
     f62:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <sg_sFrame+0x2e>
     f66:	8f 3f       	cpi	r24, 0xFF	; 255
     f68:	41 f0       	breq	.+16     	; 0xf7a <CellStringProcess+0x92>
     f6a:	e0 e1       	ldi	r30, 0x10	; 16
     f6c:	f1 e0       	ldi	r31, 0x01	; 1
     f6e:	86 a5       	ldd	r24, Z+46	; 0x2e
     f70:	8f 5f       	subi	r24, 0xFF	; 255
     f72:	86 a7       	std	Z+46, r24	; 0x2e
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	80 93 1b 03 	sts	0x031B, r24	; 0x80031b <sg_bSendCellCommStatus>
     f7a:	e0 e1       	ldi	r30, 0x10	; 16
     f7c:	f1 e0       	ldi	r31, 0x01	; 1
     f7e:	10 ae       	std	Z+56, r1	; 0x38
     f80:	17 aa       	std	Z+55, r1	; 0x37
     f82:	8f ef       	ldi	r24, 0xFF	; 255
     f84:	9f ef       	ldi	r25, 0xFF	; 255
     f86:	92 af       	std	Z+58, r25	; 0x3a
     f88:	81 af       	std	Z+57, r24	; 0x39
     f8a:	14 ae       	std	Z+60, r1	; 0x3c
     f8c:	13 ae       	std	Z+59, r1	; 0x3b
     f8e:	80 e0       	ldi	r24, 0x00	; 0
     f90:	90 e8       	ldi	r25, 0x80	; 128
     f92:	92 ab       	std	Z+50, r25	; 0x32
     f94:	81 ab       	std	Z+49, r24	; 0x31
     f96:	8f ef       	ldi	r24, 0xFF	; 255
     f98:	9f e7       	ldi	r25, 0x7F	; 127
     f9a:	94 ab       	std	Z+52, r25	; 0x34
     f9c:	83 ab       	std	Z+51, r24	; 0x33
     f9e:	16 aa       	std	Z+54, r1	; 0x36
     fa0:	15 aa       	std	Z+53, r1	; 0x35
     fa2:	d1 2c       	mov	r13, r1
     fa4:	31 2c       	mov	r3, r1
     fa6:	c1 2c       	mov	r12, r1
     fa8:	41 2c       	mov	r4, r1
     faa:	51 2c       	mov	r5, r1
     fac:	32 01       	movw	r6, r4
     fae:	81 2c       	mov	r8, r1
     fb0:	91 2c       	mov	r9, r1
     fb2:	54 01       	movw	r10, r8
     fb4:	2f ef       	ldi	r18, 0xFF	; 255
     fb6:	3f e7       	ldi	r19, 0x7F	; 127
     fb8:	3e 83       	std	Y+6, r19	; 0x06
     fba:	2d 83       	std	Y+5, r18	; 0x05
     fbc:	80 e0       	ldi	r24, 0x00	; 0
     fbe:	90 e8       	ldi	r25, 0x80	; 128
     fc0:	9c 83       	std	Y+4, r25	; 0x04
     fc2:	8b 83       	std	Y+3, r24	; 0x03
     fc4:	6b c0       	rjmp	.+214    	; 0x109c <__DATA_REGION_LENGTH__+0x9c>
     fc6:	0d 2d       	mov	r16, r13
     fc8:	10 e0       	ldi	r17, 0x00	; 0
     fca:	f8 01       	movw	r30, r16
     fcc:	75 96       	adiw	r30, 0x15	; 21
     fce:	ee 0f       	add	r30, r30
     fd0:	ff 1f       	adc	r31, r31
     fd2:	ee 0f       	add	r30, r30
     fd4:	ff 1f       	adc	r31, r31
     fd6:	e0 5f       	subi	r30, 0xF0	; 240
     fd8:	fe 4f       	sbci	r31, 0xFE	; 254
     fda:	80 81       	ld	r24, Z
     fdc:	91 81       	ldd	r25, Z+1	; 0x01
     fde:	9a 83       	std	Y+2, r25	; 0x02
     fe0:	89 83       	std	Y+1, r24	; 0x01
     fe2:	e2 80       	ldd	r14, Z+2	; 0x02
     fe4:	f3 80       	ldd	r15, Z+3	; 0x03
     fe6:	60 e0       	ldi	r22, 0x00	; 0
     fe8:	70 e0       	ldi	r23, 0x00	; 0
     fea:	c7 01       	movw	r24, r14
     fec:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <CellDataConvertTemperature>
     ff0:	88 23       	and	r24, r24
     ff2:	f1 f0       	breq	.+60     	; 0x1030 <__DATA_REGION_LENGTH__+0x30>
     ff4:	f4 fe       	sbrs	r15, 4
     ff6:	03 c0       	rjmp	.+6      	; 0xffe <CellStringProcess+0x116>
     ff8:	c7 01       	movw	r24, r14
     ffa:	90 6f       	ori	r25, 0xF0	; 240
     ffc:	02 c0       	rjmp	.+4      	; 0x1002 <__DATA_REGION_LENGTH__+0x2>
     ffe:	c7 01       	movw	r24, r14
    1000:	9f 77       	andi	r25, 0x7F	; 127
    1002:	2b 81       	ldd	r18, Y+3	; 0x03
    1004:	3c 81       	ldd	r19, Y+4	; 0x04
    1006:	28 17       	cp	r18, r24
    1008:	39 07       	cpc	r19, r25
    100a:	14 f4       	brge	.+4      	; 0x1010 <__DATA_REGION_LENGTH__+0x10>
    100c:	9c 83       	std	Y+4, r25	; 0x04
    100e:	8b 83       	std	Y+3, r24	; 0x03
    1010:	2d 81       	ldd	r18, Y+5	; 0x05
    1012:	3e 81       	ldd	r19, Y+6	; 0x06
    1014:	82 17       	cp	r24, r18
    1016:	93 07       	cpc	r25, r19
    1018:	14 f4       	brge	.+4      	; 0x101e <__DATA_REGION_LENGTH__+0x1e>
    101a:	9e 83       	std	Y+6, r25	; 0x06
    101c:	8d 83       	std	Y+5, r24	; 0x05
    101e:	09 2e       	mov	r0, r25
    1020:	00 0c       	add	r0, r0
    1022:	aa 0b       	sbc	r26, r26
    1024:	bb 0b       	sbc	r27, r27
    1026:	88 0e       	add	r8, r24
    1028:	99 1e       	adc	r9, r25
    102a:	aa 1e       	adc	r10, r26
    102c:	bb 1e       	adc	r11, r27
    102e:	33 94       	inc	r3
    1030:	f8 01       	movw	r30, r16
    1032:	75 96       	adiw	r30, 0x15	; 21
    1034:	ee 0f       	add	r30, r30
    1036:	ff 1f       	adc	r31, r31
    1038:	ee 0f       	add	r30, r30
    103a:	ff 1f       	adc	r31, r31
    103c:	e0 5f       	subi	r30, 0xF0	; 240
    103e:	fe 4f       	sbci	r31, 0xFE	; 254
    1040:	80 81       	ld	r24, Z
    1042:	91 81       	ldd	r25, Z+1	; 0x01
    1044:	99 23       	and	r25, r25
    1046:	1c f4       	brge	.+6      	; 0x104e <__DATA_REGION_LENGTH__+0x4e>
    1048:	81 e0       	ldi	r24, 0x01	; 1
    104a:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <sg_sFrame+0x27>
    104e:	be 01       	movw	r22, r28
    1050:	6f 5f       	subi	r22, 0xFF	; 255
    1052:	7f 4f       	sbci	r23, 0xFF	; 255
    1054:	89 81       	ldd	r24, Y+1	; 0x01
    1056:	9a 81       	ldd	r25, Y+2	; 0x02
    1058:	0e 94 c8 1f 	call	0x3f90	; 0x3f90 <CellDataConvertVoltage>
    105c:	88 23       	and	r24, r24
    105e:	e9 f0       	breq	.+58     	; 0x109a <__DATA_REGION_LENGTH__+0x9a>
    1060:	20 91 47 01 	lds	r18, 0x0147	; 0x800147 <sg_sFrame+0x37>
    1064:	30 91 48 01 	lds	r19, 0x0148	; 0x800148 <sg_sFrame+0x38>
    1068:	89 81       	ldd	r24, Y+1	; 0x01
    106a:	9a 81       	ldd	r25, Y+2	; 0x02
    106c:	28 17       	cp	r18, r24
    106e:	39 07       	cpc	r19, r25
    1070:	20 f4       	brcc	.+8      	; 0x107a <__DATA_REGION_LENGTH__+0x7a>
    1072:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <sg_sFrame+0x38>
    1076:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <sg_sFrame+0x37>
    107a:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <sg_sFrame+0x39>
    107e:	30 91 4a 01 	lds	r19, 0x014A	; 0x80014a <sg_sFrame+0x3a>
    1082:	82 17       	cp	r24, r18
    1084:	93 07       	cpc	r25, r19
    1086:	20 f4       	brcc	.+8      	; 0x1090 <__DATA_REGION_LENGTH__+0x90>
    1088:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <sg_sFrame+0x3a>
    108c:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <sg_sFrame+0x39>
    1090:	48 0e       	add	r4, r24
    1092:	59 1e       	adc	r5, r25
    1094:	61 1c       	adc	r6, r1
    1096:	71 1c       	adc	r7, r1
    1098:	c3 94       	inc	r12
    109a:	d3 94       	inc	r13
    109c:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <sg_sFrame+0x2d>
    10a0:	d8 16       	cp	r13, r24
    10a2:	08 f4       	brcc	.+2      	; 0x10a6 <__DATA_REGION_LENGTH__+0xa6>
    10a4:	90 cf       	rjmp	.-224    	; 0xfc6 <CellStringProcess+0xde>
    10a6:	cc 20       	and	r12, r12
    10a8:	89 f1       	breq	.+98     	; 0x110c <__stack+0xd>
    10aa:	ed e4       	ldi	r30, 0x4D	; 77
    10ac:	f1 e0       	ldi	r31, 0x01	; 1
    10ae:	40 82       	st	Z, r4
    10b0:	51 82       	std	Z+1, r5	; 0x01
    10b2:	62 82       	std	Z+2, r6	; 0x02
    10b4:	73 82       	std	Z+3, r7	; 0x03
    10b6:	60 81       	ld	r22, Z
    10b8:	71 81       	ldd	r23, Z+1	; 0x01
    10ba:	82 81       	ldd	r24, Z+2	; 0x02
    10bc:	93 81       	ldd	r25, Z+3	; 0x03
    10be:	2c 2d       	mov	r18, r12
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	40 e0       	ldi	r20, 0x00	; 0
    10c4:	50 e0       	ldi	r21, 0x00	; 0
    10c6:	0e 94 0d 22 	call	0x441a	; 0x441a <__udivmodsi4>
    10ca:	30 93 4c 01 	sts	0x014C, r19	; 0x80014c <sg_sFrame+0x3c>
    10ce:	20 93 4b 01 	sts	0x014B, r18	; 0x80014b <sg_sFrame+0x3b>
    10d2:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    10d6:	83 30       	cpi	r24, 0x03	; 3
    10d8:	c9 f0       	breq	.+50     	; 0x110c <__stack+0xd>
    10da:	80 91 19 03 	lds	r24, 0x0319	; 0x800319 <sg_bCellBalancedOnce>
    10de:	81 11       	cpse	r24, r1
    10e0:	15 c0       	rjmp	.+42     	; 0x110c <__stack+0xd>
    10e2:	e0 e1       	ldi	r30, 0x10	; 16
    10e4:	f1 e0       	ldi	r31, 0x01	; 1
    10e6:	27 a9       	ldd	r18, Z+55	; 0x37
    10e8:	30 ad       	ldd	r19, Z+56	; 0x38
    10ea:	81 ad       	ldd	r24, Z+57	; 0x39
    10ec:	92 ad       	ldd	r25, Z+58	; 0x3a
    10ee:	28 17       	cp	r18, r24
    10f0:	39 07       	cpc	r19, r25
    10f2:	60 f0       	brcs	.+24     	; 0x110c <__stack+0xd>
    10f4:	87 a9       	ldd	r24, Z+55	; 0x37
    10f6:	90 ad       	ldd	r25, Z+56	; 0x38
    10f8:	21 ad       	ldd	r18, Z+57	; 0x39
    10fa:	32 ad       	ldd	r19, Z+58	; 0x3a
    10fc:	82 1b       	sub	r24, r18
    10fe:	93 0b       	sbc	r25, r19
    1100:	80 34       	cpi	r24, 0x40	; 64
    1102:	91 05       	cpc	r25, r1
    1104:	18 f0       	brcs	.+6      	; 0x110c <__stack+0xd>
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <sg_bCellBalanceReady>
    110c:	33 20       	and	r3, r3
    110e:	c9 f0       	breq	.+50     	; 0x1142 <__stack+0x43>
    1110:	23 2d       	mov	r18, r3
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	40 e0       	ldi	r20, 0x00	; 0
    1116:	50 e0       	ldi	r21, 0x00	; 0
    1118:	c5 01       	movw	r24, r10
    111a:	b4 01       	movw	r22, r8
    111c:	0e 94 92 23 	call	0x4724	; 0x4724 <__divmodsi4>
    1120:	65 e4       	ldi	r22, 0x45	; 69
    1122:	71 e0       	ldi	r23, 0x01	; 1
    1124:	c9 01       	movw	r24, r18
    1126:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <CellDataConvertTemperature>
    112a:	61 e4       	ldi	r22, 0x41	; 65
    112c:	71 e0       	ldi	r23, 0x01	; 1
    112e:	8b 81       	ldd	r24, Y+3	; 0x03
    1130:	9c 81       	ldd	r25, Y+4	; 0x04
    1132:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <CellDataConvertTemperature>
    1136:	63 e4       	ldi	r22, 0x43	; 67
    1138:	71 e0       	ldi	r23, 0x01	; 1
    113a:	8d 81       	ldd	r24, Y+5	; 0x05
    113c:	9e 81       	ldd	r25, Y+6	; 0x06
    113e:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <CellDataConvertTemperature>
    1142:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <sg_bSDCardReady>
    1146:	88 23       	and	r24, r24
    1148:	51 f0       	breq	.+20     	; 0x115e <__stack+0x5f>
    114a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    114e:	88 23       	and	r24, r24
    1150:	31 f0       	breq	.+12     	; 0x115e <__stack+0x5f>
    1152:	80 e1       	ldi	r24, 0x10	; 16
    1154:	91 e0       	ldi	r25, 0x01	; 1
    1156:	0e 94 41 14 	call	0x2882	; 0x2882 <STORE_WriteFrame>
    115a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <sg_bSDCardReady>
    115e:	26 96       	adiw	r28, 0x06	; 6
    1160:	0f b6       	in	r0, 0x3f	; 63
    1162:	f8 94       	cli
    1164:	de bf       	out	0x3e, r29	; 62
    1166:	0f be       	out	0x3f, r0	; 63
    1168:	cd bf       	out	0x3d, r28	; 61
    116a:	df 91       	pop	r29
    116c:	cf 91       	pop	r28
    116e:	1f 91       	pop	r17
    1170:	0f 91       	pop	r16
    1172:	ff 90       	pop	r15
    1174:	ef 90       	pop	r14
    1176:	df 90       	pop	r13
    1178:	cf 90       	pop	r12
    117a:	bf 90       	pop	r11
    117c:	af 90       	pop	r10
    117e:	9f 90       	pop	r9
    1180:	8f 90       	pop	r8
    1182:	7f 90       	pop	r7
    1184:	6f 90       	pop	r6
    1186:	5f 90       	pop	r5
    1188:	4f 90       	pop	r4
    118a:	3f 90       	pop	r3
    118c:	08 95       	ret

Disassembly of section .text.Delay:

00004248 <Delay>:
    4248:	ab 01       	movw	r20, r22
    424a:	bc 01       	movw	r22, r24
    424c:	4f 5f       	subi	r20, 0xFF	; 255
    424e:	5f 4f       	sbci	r21, 0xFF	; 255
    4250:	6f 4f       	sbci	r22, 0xFF	; 255
    4252:	7f 4f       	sbci	r23, 0xFF	; 255
    4254:	76 95       	lsr	r23
    4256:	67 95       	ror	r22
    4258:	57 95       	ror	r21
    425a:	47 95       	ror	r20
    425c:	96 b5       	in	r25, 0x26	; 38
    425e:	17 c0       	rjmp	.+46     	; 0x428e <Delay+0x46>
    4260:	86 b5       	in	r24, 0x26	; 38
    4262:	98 17       	cp	r25, r24
    4264:	e9 f3       	breq	.-6      	; 0x4260 <Delay+0x18>
    4266:	26 b5       	in	r18, 0x26	; 38
    4268:	82 2f       	mov	r24, r18
    426a:	89 1b       	sub	r24, r25
    426c:	90 e0       	ldi	r25, 0x00	; 0
    426e:	a0 e0       	ldi	r26, 0x00	; 0
    4270:	b0 e0       	ldi	r27, 0x00	; 0
    4272:	48 17       	cp	r20, r24
    4274:	59 07       	cpc	r21, r25
    4276:	6a 07       	cpc	r22, r26
    4278:	7b 07       	cpc	r23, r27
    427a:	28 f0       	brcs	.+10     	; 0x4286 <Delay+0x3e>
    427c:	48 1b       	sub	r20, r24
    427e:	59 0b       	sbc	r21, r25
    4280:	6a 0b       	sbc	r22, r26
    4282:	7b 0b       	sbc	r23, r27
    4284:	03 c0       	rjmp	.+6      	; 0x428c <Delay+0x44>
    4286:	40 e0       	ldi	r20, 0x00	; 0
    4288:	50 e0       	ldi	r21, 0x00	; 0
    428a:	ba 01       	movw	r22, r20
    428c:	92 2f       	mov	r25, r18
    428e:	41 15       	cp	r20, r1
    4290:	51 05       	cpc	r21, r1
    4292:	61 05       	cpc	r22, r1
    4294:	71 05       	cpc	r23, r1
    4296:	21 f7       	brne	.-56     	; 0x4260 <Delay+0x18>
    4298:	08 95       	ret

Disassembly of section .text.PlatformAssert:

000047aa <PlatformAssert>:



void PlatformAssert( const char* peFilename, const int s32LineNumber )
{
	DebugOut("Assert %s: %d\n", peFilename, s32LineNumber);
    47aa:	5f 93       	push	r21
    47ac:	4f 93       	push	r20
    47ae:	8f 93       	push	r24
    47b0:	7f 93       	push	r23
    47b2:	6f 93       	push	r22
    47b4:	88 e3       	ldi	r24, 0x38	; 56
    47b6:	92 e0       	ldi	r25, 0x02	; 2
    47b8:	a0 e0       	ldi	r26, 0x00	; 0
    47ba:	af 93       	push	r26
    47bc:	9f 93       	push	r25
    47be:	8f 93       	push	r24
    47c0:	0e 94 14 27 	call	0x4e28	; 0x4e28 <DebugOut>
	
//	while(1);
}
    47c4:	8d b7       	in	r24, 0x3d	; 61
    47c6:	9e b7       	in	r25, 0x3e	; 62
    47c8:	08 96       	adiw	r24, 0x08	; 8
    47ca:	0f b6       	in	r0, 0x3f	; 63
    47cc:	f8 94       	cli
    47ce:	9e bf       	out	0x3e, r25	; 62
    47d0:	0f be       	out	0x3f, r0	; 63
    47d2:	8d bf       	out	0x3d, r24	; 61
    47d4:	08 95       	ret

Disassembly of section .text.ModuleControllerStateHandle:

0000189a <ModuleControllerStateHandle>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    189a:	1f 93       	push	r17
    189c:	cf 93       	push	r28
    189e:	df 93       	push	r29
    18a0:	d0 91 06 01 	lds	r29, 0x0106	; 0x800106 <sg_eModuleControllerStateTarget>
    18a4:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <sg_eModuleControllerStateMax>
    18a8:	8d 17       	cp	r24, r29
    18aa:	30 f0       	brcs	.+12     	; 0x18b8 <ModuleControllerStateHandle+0x1e>
    18ac:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    18b0:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <sg_eModuleControllerStateMax>
    18b4:	89 17       	cp	r24, r25
    18b6:	10 f4       	brcc	.+4      	; 0x18bc <ModuleControllerStateHandle+0x22>
    18b8:	d0 91 05 01 	lds	r29, 0x0105	; 0x800105 <sg_eModuleControllerStateMax>
    18bc:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    18c0:	d8 17       	cp	r29, r24
    18c2:	09 f4       	brne	.+2      	; 0x18c6 <ModuleControllerStateHandle+0x2c>
    18c4:	f5 c0       	rjmp	.+490    	; 0x1ab0 <ModuleControllerStateHandle+0x216>
    18c6:	d2 30       	cpi	r29, 0x02	; 2
    18c8:	09 f4       	brne	.+2      	; 0x18cc <ModuleControllerStateHandle+0x32>
    18ca:	72 c0       	rjmp	.+228    	; 0x19b0 <ModuleControllerStateHandle+0x116>
    18cc:	28 f4       	brcc	.+10     	; 0x18d8 <ModuleControllerStateHandle+0x3e>
    18ce:	dd 23       	and	r29, r29
    18d0:	89 f0       	breq	.+34     	; 0x18f4 <ModuleControllerStateHandle+0x5a>
    18d2:	d1 30       	cpi	r29, 0x01	; 1
    18d4:	e1 f1       	breq	.+120    	; 0x194e <ModuleControllerStateHandle+0xb4>
    18d6:	e0 c0       	rjmp	.+448    	; 0x1a98 <ModuleControllerStateHandle+0x1fe>
    18d8:	d3 30       	cpi	r29, 0x03	; 3
    18da:	09 f4       	brne	.+2      	; 0x18de <ModuleControllerStateHandle+0x44>
    18dc:	a9 c0       	rjmp	.+338    	; 0x1a30 <ModuleControllerStateHandle+0x196>
    18de:	d5 30       	cpi	r29, 0x05	; 5
    18e0:	09 f0       	breq	.+2      	; 0x18e4 <ModuleControllerStateHandle+0x4a>
    18e2:	da c0       	rjmp	.+436    	; 0x1a98 <ModuleControllerStateHandle+0x1fe>
    18e4:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <sg_eModuleControllerStateCurrent>
    18e8:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <sg_eModuleControllerStateTarget>
    18ec:	d0 91 07 01 	lds	r29, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    18f0:	0e 94 30 27 	call	0x4e60	; 0x4e60 <ADCSetPowerOn>
    18f4:	88 b1       	in	r24, 0x08	; 8
    18f6:	8f 7e       	andi	r24, 0xEF	; 239
    18f8:	88 b9       	out	0x08, r24	; 8
    18fa:	68 e8       	ldi	r22, 0x88	; 136
    18fc:	73 e1       	ldi	r23, 0x13	; 19
    18fe:	80 e0       	ldi	r24, 0x00	; 0
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	0e 94 24 21 	call	0x4248	; 0x4248 <Delay>
    1906:	8e b1       	in	r24, 0x0e	; 14
    1908:	8d 7f       	andi	r24, 0xFD	; 253
    190a:	8e b9       	out	0x0e, r24	; 14
    190c:	68 e8       	ldi	r22, 0x88	; 136
    190e:	73 e1       	ldi	r23, 0x13	; 19
    1910:	80 e0       	ldi	r24, 0x00	; 0
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	0e 94 24 21 	call	0x4248	; 0x4248 <Delay>
    1918:	eb e6       	ldi	r30, 0x6B	; 107
    191a:	f0 e0       	ldi	r31, 0x00	; 0
    191c:	80 81       	ld	r24, Z
    191e:	8d 7f       	andi	r24, 0xFD	; 253
    1920:	80 83       	st	Z, r24
    1922:	e8 e6       	ldi	r30, 0x68	; 104
    1924:	f0 e0       	ldi	r31, 0x00	; 0
    1926:	80 81       	ld	r24, Z
    1928:	8d 7f       	andi	r24, 0xFD	; 253
    192a:	80 83       	st	Z, r24
    192c:	81 e0       	ldi	r24, 0x01	; 1
    192e:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <sg_bCellBalanceReady>
    1932:	10 92 19 03 	sts	0x0319, r1	; 0x800319 <sg_bCellBalancedOnce>
    1936:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <sg_bStopDischarge>
    193a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <sg_bSDCardReady>
    193e:	88 23       	and	r24, r24
    1940:	09 f4       	brne	.+2      	; 0x1944 <ModuleControllerStateHandle+0xaa>
    1942:	b2 c0       	rjmp	.+356    	; 0x1aa8 <ModuleControllerStateHandle+0x20e>
    1944:	0e 94 23 20 	call	0x4046	; 0x4046 <STORE_EndSession>
    1948:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <sg_bSDCardReady>
    194c:	ad c0       	rjmp	.+346    	; 0x1aa8 <ModuleControllerStateHandle+0x20e>
    194e:	88 b1       	in	r24, 0x08	; 8
    1950:	8f 7e       	andi	r24, 0xEF	; 239
    1952:	88 b9       	out	0x08, r24	; 8
    1954:	68 e8       	ldi	r22, 0x88	; 136
    1956:	73 e1       	ldi	r23, 0x13	; 19
    1958:	80 e0       	ldi	r24, 0x00	; 0
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	0e 94 24 21 	call	0x4248	; 0x4248 <Delay>
    1960:	eb e6       	ldi	r30, 0x6B	; 107
    1962:	f0 e0       	ldi	r31, 0x00	; 0
    1964:	80 81       	ld	r24, Z
    1966:	8d 7f       	andi	r24, 0xFD	; 253
    1968:	80 83       	st	Z, r24
    196a:	e8 e6       	ldi	r30, 0x68	; 104
    196c:	f0 e0       	ldi	r31, 0x00	; 0
    196e:	80 81       	ld	r24, Z
    1970:	8d 7f       	andi	r24, 0xFD	; 253
    1972:	80 83       	st	Z, r24
    1974:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <sg_bModuleRegistered>
    1978:	88 23       	and	r24, r24
    197a:	19 f0       	breq	.+6      	; 0x1982 <ModuleControllerStateHandle+0xe8>
    197c:	8e b1       	in	r24, 0x0e	; 14
    197e:	82 60       	ori	r24, 0x02	; 2
    1980:	8e b9       	out	0x0e, r24	; 14
    1982:	68 e8       	ldi	r22, 0x88	; 136
    1984:	73 e1       	ldi	r23, 0x13	; 19
    1986:	80 e0       	ldi	r24, 0x00	; 0
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	0e 94 24 21 	call	0x4248	; 0x4248 <Delay>
    198e:	81 e0       	ldi	r24, 0x01	; 1
    1990:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <sg_bCellBalanceReady>
    1994:	10 92 19 03 	sts	0x0319, r1	; 0x800319 <sg_bCellBalancedOnce>
    1998:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <sg_bStopDischarge>
    199c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <sg_bSDCardReady>
    19a0:	88 23       	and	r24, r24
    19a2:	09 f4       	brne	.+2      	; 0x19a6 <ModuleControllerStateHandle+0x10c>
    19a4:	81 c0       	rjmp	.+258    	; 0x1aa8 <ModuleControllerStateHandle+0x20e>
    19a6:	0e 94 fa 20 	call	0x41f4	; 0x41f4 <STORE_StartNewSession>
    19aa:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <sg_bSDCardReady>
    19ae:	7c c0       	rjmp	.+248    	; 0x1aa8 <ModuleControllerStateHandle+0x20e>
    19b0:	61 99       	sbic	0x0c, 1	; 12
    19b2:	0d c0       	rjmp	.+26     	; 0x19ce <ModuleControllerStateHandle+0x134>
    19b4:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <sg_bModuleRegistered>
    19b8:	88 23       	and	r24, r24
    19ba:	19 f0       	breq	.+6      	; 0x19c2 <ModuleControllerStateHandle+0x128>
    19bc:	8e b1       	in	r24, 0x0e	; 14
    19be:	82 60       	ori	r24, 0x02	; 2
    19c0:	8e b9       	out	0x0e, r24	; 14
    19c2:	68 e8       	ldi	r22, 0x88	; 136
    19c4:	73 e1       	ldi	r23, 0x13	; 19
    19c6:	80 e0       	ldi	r24, 0x00	; 0
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	0e 94 24 21 	call	0x4248	; 0x4248 <Delay>
    19ce:	cb e0       	ldi	r28, 0x0B	; 11
    19d0:	2a c0       	rjmp	.+84     	; 0x1a26 <ModuleControllerStateHandle+0x18c>
    19d2:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <sg_bModuleRegistered>
    19d6:	88 23       	and	r24, r24
    19d8:	49 f0       	breq	.+18     	; 0x19ec <ModuleControllerStateHandle+0x152>
    19da:	88 b1       	in	r24, 0x08	; 8
    19dc:	80 61       	ori	r24, 0x10	; 16
    19de:	88 b9       	out	0x08, r24	; 8
    19e0:	88 b1       	in	r24, 0x08	; 8
    19e2:	8f 77       	andi	r24, 0x7F	; 127
    19e4:	88 b9       	out	0x08, r24	; 8
    19e6:	88 b1       	in	r24, 0x08	; 8
    19e8:	80 68       	ori	r24, 0x80	; 128
    19ea:	88 b9       	out	0x08, r24	; 8
    19ec:	68 ee       	ldi	r22, 0xE8	; 232
    19ee:	73 e0       	ldi	r23, 0x03	; 3
    19f0:	80 e0       	ldi	r24, 0x00	; 0
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	0e 94 24 21 	call	0x4248	; 0x4248 <Delay>
    19f8:	88 b1       	in	r24, 0x08	; 8
    19fa:	8f 7e       	andi	r24, 0xEF	; 239
    19fc:	88 b9       	out	0x08, r24	; 8
    19fe:	68 e8       	ldi	r22, 0x88	; 136
    1a00:	73 e1       	ldi	r23, 0x13	; 19
    1a02:	80 e0       	ldi	r24, 0x00	; 0
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	0e 94 24 21 	call	0x4248	; 0x4248 <Delay>
    1a0a:	60 e5       	ldi	r22, 0x50	; 80
    1a0c:	73 ec       	ldi	r23, 0xC3	; 195
    1a0e:	80 e0       	ldi	r24, 0x00	; 0
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	0e 94 24 21 	call	0x4248	; 0x4248 <Delay>
    1a16:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <sg_bOvercurrentSignal>
    1a1a:	88 23       	and	r24, r24
    1a1c:	19 f0       	breq	.+6      	; 0x1a24 <ModuleControllerStateHandle+0x18a>
    1a1e:	10 92 17 03 	sts	0x0317, r1	; 0x800317 <sg_bOvercurrentSignal>
    1a22:	01 c0       	rjmp	.+2      	; 0x1a26 <ModuleControllerStateHandle+0x18c>
    1a24:	c1 2f       	mov	r28, r17
    1a26:	1f ef       	ldi	r17, 0xFF	; 255
    1a28:	1c 0f       	add	r17, r28
    1a2a:	c1 11       	cpse	r28, r1
    1a2c:	d2 cf       	rjmp	.-92     	; 0x19d2 <ModuleControllerStateHandle+0x138>
    1a2e:	3c c0       	rjmp	.+120    	; 0x1aa8 <ModuleControllerStateHandle+0x20e>
    1a30:	61 99       	sbic	0x0c, 1	; 12
    1a32:	0d c0       	rjmp	.+26     	; 0x1a4e <ModuleControllerStateHandle+0x1b4>
    1a34:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <sg_bModuleRegistered>
    1a38:	88 23       	and	r24, r24
    1a3a:	19 f0       	breq	.+6      	; 0x1a42 <ModuleControllerStateHandle+0x1a8>
    1a3c:	8e b1       	in	r24, 0x0e	; 14
    1a3e:	82 60       	ori	r24, 0x02	; 2
    1a40:	8e b9       	out	0x0e, r24	; 14
    1a42:	68 e8       	ldi	r22, 0x88	; 136
    1a44:	73 e1       	ldi	r23, 0x13	; 19
    1a46:	80 e0       	ldi	r24, 0x00	; 0
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	0e 94 24 21 	call	0x4248	; 0x4248 <Delay>
    1a4e:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <sg_bModuleRegistered>
    1a52:	88 23       	and	r24, r24
    1a54:	49 f0       	breq	.+18     	; 0x1a68 <ModuleControllerStateHandle+0x1ce>
    1a56:	88 b1       	in	r24, 0x08	; 8
    1a58:	80 61       	ori	r24, 0x10	; 16
    1a5a:	88 b9       	out	0x08, r24	; 8
    1a5c:	88 b1       	in	r24, 0x08	; 8
    1a5e:	8f 77       	andi	r24, 0x7F	; 127
    1a60:	88 b9       	out	0x08, r24	; 8
    1a62:	88 b1       	in	r24, 0x08	; 8
    1a64:	80 68       	ori	r24, 0x80	; 128
    1a66:	88 b9       	out	0x08, r24	; 8
    1a68:	68 e8       	ldi	r22, 0x88	; 136
    1a6a:	73 e1       	ldi	r23, 0x13	; 19
    1a6c:	80 e0       	ldi	r24, 0x00	; 0
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	0e 94 24 21 	call	0x4248	; 0x4248 <Delay>
    1a74:	10 92 1a 03 	sts	0x031A, r1	; 0x80031a <sg_bCellBalanceReady>
    1a78:	10 92 19 03 	sts	0x0319, r1	; 0x800319 <sg_bCellBalancedOnce>
    1a7c:	81 e0       	ldi	r24, 0x01	; 1
    1a7e:	80 93 18 03 	sts	0x0318, r24	; 0x800318 <sg_bStopDischarge>
    1a82:	eb e6       	ldi	r30, 0x6B	; 107
    1a84:	f0 e0       	ldi	r31, 0x00	; 0
    1a86:	80 81       	ld	r24, Z
    1a88:	82 60       	ori	r24, 0x02	; 2
    1a8a:	80 83       	st	Z, r24
    1a8c:	e8 e6       	ldi	r30, 0x68	; 104
    1a8e:	f0 e0       	ldi	r31, 0x00	; 0
    1a90:	80 81       	ld	r24, Z
    1a92:	82 60       	ori	r24, 0x02	; 2
    1a94:	80 83       	st	Z, r24
    1a96:	08 c0       	rjmp	.+16     	; 0x1aa8 <ModuleControllerStateHandle+0x20e>
    1a98:	48 ef       	ldi	r20, 0xF8	; 248
    1a9a:	53 e0       	ldi	r21, 0x03	; 3
    1a9c:	67 e4       	ldi	r22, 0x47	; 71
    1a9e:	72 e0       	ldi	r23, 0x02	; 2
    1aa0:	80 e0       	ldi	r24, 0x00	; 0
    1aa2:	0e 94 d5 23 	call	0x47aa	; 0x47aa <PlatformAssert>
    1aa6:	d5 e0       	ldi	r29, 0x05	; 5
    1aa8:	d0 93 07 01 	sts	0x0107, r29	; 0x800107 <sg_eModuleControllerStateCurrent>
    1aac:	0e 94 f4 26 	call	0x4de8	; 0x4de8 <SendModuleControllerStatus>
    1ab0:	df 91       	pop	r29
    1ab2:	cf 91       	pop	r28
    1ab4:	1f 91       	pop	r17
    1ab6:	08 95       	ret

Disassembly of section .text.PlatformGetRegistrationID:

00004ea0 <PlatformGetRegistrationID>:
}

uint8_t PlatformGetRegistrationID( void )
{
	return(sg_u8ModuleRegistrationID);
}
    4ea0:	80 91 27 03 	lds	r24, 0x0327	; 0x800327 <sg_u8ModuleRegistrationID>
    4ea4:	08 95       	ret

Disassembly of section .text.SetSysclock:

00004e6c <SetSysclock>:

void SetSysclock( void )
{
	// First set the prescaler enable
	CLKPR = (1 << CLKPCE);
    4e6c:	e1 e6       	ldi	r30, 0x61	; 97
    4e6e:	f0 e0       	ldi	r31, 0x00	; 0
    4e70:	80 e8       	ldi	r24, 0x80	; 128
    4e72:	80 83       	st	Z, r24
	
	// Now set the desired prescale value
	CLKPR = SYSCLOCK_PRESCALE;
    4e74:	10 82       	st	Z, r1
    4e76:	08 95       	ret

Disassembly of section .text.ModuleControllerGetUniqueID:

00003a2a <ModuleControllerGetUniqueID>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    3a2a:	cf 92       	push	r12
    3a2c:	df 92       	push	r13
    3a2e:	ef 92       	push	r14
    3a30:	ff 92       	push	r15
    3a32:	80 e0       	ldi	r24, 0x00	; 0
    3a34:	90 e0       	ldi	r25, 0x00	; 0
    3a36:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <EEPROMRead>
    3a3a:	c8 2e       	mov	r12, r24
    3a3c:	d1 2c       	mov	r13, r1
    3a3e:	e1 2c       	mov	r14, r1
    3a40:	f1 2c       	mov	r15, r1
    3a42:	81 e0       	ldi	r24, 0x01	; 1
    3a44:	90 e0       	ldi	r25, 0x00	; 0
    3a46:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <EEPROMRead>
    3a4a:	90 e0       	ldi	r25, 0x00	; 0
    3a4c:	a0 e0       	ldi	r26, 0x00	; 0
    3a4e:	b0 e0       	ldi	r27, 0x00	; 0
    3a50:	ba 2f       	mov	r27, r26
    3a52:	a9 2f       	mov	r26, r25
    3a54:	98 2f       	mov	r25, r24
    3a56:	88 27       	eor	r24, r24
    3a58:	c8 2a       	or	r12, r24
    3a5a:	d9 2a       	or	r13, r25
    3a5c:	ea 2a       	or	r14, r26
    3a5e:	fb 2a       	or	r15, r27
    3a60:	82 e0       	ldi	r24, 0x02	; 2
    3a62:	90 e0       	ldi	r25, 0x00	; 0
    3a64:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <EEPROMRead>
    3a68:	90 e0       	ldi	r25, 0x00	; 0
    3a6a:	a0 e0       	ldi	r26, 0x00	; 0
    3a6c:	b0 e0       	ldi	r27, 0x00	; 0
    3a6e:	dc 01       	movw	r26, r24
    3a70:	99 27       	eor	r25, r25
    3a72:	88 27       	eor	r24, r24
    3a74:	c8 2a       	or	r12, r24
    3a76:	d9 2a       	or	r13, r25
    3a78:	ea 2a       	or	r14, r26
    3a7a:	fb 2a       	or	r15, r27
    3a7c:	83 e0       	ldi	r24, 0x03	; 3
    3a7e:	90 e0       	ldi	r25, 0x00	; 0
    3a80:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <EEPROMRead>
    3a84:	90 e0       	ldi	r25, 0x00	; 0
    3a86:	a0 e0       	ldi	r26, 0x00	; 0
    3a88:	b0 e0       	ldi	r27, 0x00	; 0
    3a8a:	b8 2f       	mov	r27, r24
    3a8c:	aa 27       	eor	r26, r26
    3a8e:	99 27       	eor	r25, r25
    3a90:	88 27       	eor	r24, r24
    3a92:	bc 01       	movw	r22, r24
    3a94:	cd 01       	movw	r24, r26
    3a96:	6c 29       	or	r22, r12
    3a98:	7d 29       	or	r23, r13
    3a9a:	8e 29       	or	r24, r14
    3a9c:	9f 29       	or	r25, r15
    3a9e:	ff 90       	pop	r15
    3aa0:	ef 90       	pop	r14
    3aa2:	df 90       	pop	r13
    3aa4:	cf 90       	pop	r12
    3aa6:	08 95       	ret

Disassembly of section .text.TimerInit:

0000429a <TimerInit>:
    429a:	14 bc       	out	0x24, r1	; 36
    429c:	92 e0       	ldi	r25, 0x02	; 2
    429e:	95 bd       	out	0x25, r25	; 37
    42a0:	a4 e6       	ldi	r26, 0x64	; 100
    42a2:	b0 e0       	ldi	r27, 0x00	; 0
    42a4:	8c 91       	ld	r24, X
    42a6:	87 7f       	andi	r24, 0xF7	; 247
    42a8:	8c 93       	st	X, r24
    42aa:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f0080>
    42ae:	84 e0       	ldi	r24, 0x04	; 4
    42b0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f0081>
    42b4:	96 bb       	out	0x16, r25	; 22
    42b6:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f0084>
    42ba:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f0085>
    42be:	8b 5c       	subi	r24, 0xCB	; 203
    42c0:	93 4f       	sbci	r25, 0xF3	; 243
    42c2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f0089>
    42c6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f0088>
    42ca:	ef e6       	ldi	r30, 0x6F	; 111
    42cc:	f0 e0       	ldi	r31, 0x00	; 0
    42ce:	80 81       	ld	r24, Z
    42d0:	82 60       	ori	r24, 0x02	; 2
    42d2:	80 83       	st	Z, r24
    42d4:	8c 91       	ld	r24, X
    42d6:	8f 7e       	andi	r24, 0xEF	; 239
    42d8:	8c 93       	st	X, r24
    42da:	ae e6       	ldi	r26, 0x6E	; 110
    42dc:	b0 e0       	ldi	r27, 0x00	; 0
    42de:	8c 91       	ld	r24, X
    42e0:	8e 7f       	andi	r24, 0xFE	; 254
    42e2:	8c 93       	st	X, r24
    42e4:	80 81       	ld	r24, Z
    42e6:	8e 7f       	andi	r24, 0xFE	; 254
    42e8:	80 83       	st	Z, r24
    42ea:	08 95       	ret

Disassembly of section .text.__vector_12:

0000332a <__vector_12>:
    332a:	78 94       	sei
    332c:	1f 92       	push	r1
    332e:	0f 92       	push	r0
    3330:	0f b6       	in	r0, 0x3f	; 63
    3332:	0f 92       	push	r0
    3334:	11 24       	eor	r1, r1
    3336:	8f 93       	push	r24
    3338:	9f 93       	push	r25
    333a:	ef 93       	push	r30
    333c:	ff 93       	push	r31
    333e:	82 e0       	ldi	r24, 0x02	; 2
    3340:	86 bb       	out	0x16, r24	; 22
    3342:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f0084>
    3346:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f0085>
    334a:	8b 5c       	subi	r24, 0xCB	; 203
    334c:	93 4f       	sbci	r25, 0xF3	; 243
    334e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f0089>
    3352:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f0088>
    3356:	ef e6       	ldi	r30, 0x6F	; 111
    3358:	f0 e0       	ldi	r31, 0x00	; 0
    335a:	80 81       	ld	r24, Z
    335c:	82 60       	ori	r24, 0x02	; 2
    335e:	80 83       	st	Z, r24
    3360:	81 e0       	ldi	r24, 0x01	; 1
    3362:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <sg_bNewTick>
    3366:	80 91 75 09 	lds	r24, 0x0975	; 0x800975 <sg_u8CellFrameTimer>
    336a:	8f 5f       	subi	r24, 0xFF	; 255
    336c:	80 93 75 09 	sts	0x0975, r24	; 0x800975 <sg_u8CellFrameTimer>
    3370:	80 91 75 09 	lds	r24, 0x0975	; 0x800975 <sg_u8CellFrameTimer>
    3374:	83 30       	cpi	r24, 0x03	; 3
    3376:	78 f0       	brcs	.+30     	; 0x3396 <__vector_12+0x6c>
    3378:	10 92 75 09 	sts	0x0975, r1	; 0x800975 <sg_u8CellFrameTimer>
    337c:	81 e0       	ldi	r24, 0x01	; 1
    337e:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <sg_bFrameStart>
    3382:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <sg_eFrameStatus>
    3386:	81 30       	cpi	r24, 0x01	; 1
    3388:	19 f4       	brne	.+6      	; 0x3390 <__vector_12+0x66>
    338a:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <sg_eFrameStatus>
    338e:	03 c0       	rjmp	.+6      	; 0x3396 <__vector_12+0x6c>
    3390:	81 e0       	ldi	r24, 0x01	; 1
    3392:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <sg_eFrameStatus>
    3396:	80 91 72 09 	lds	r24, 0x0972	; 0x800972 <sg_u8TicksSinceLastPackControllerMessage>
    339a:	8f 3f       	cpi	r24, 0xFF	; 255
    339c:	29 f0       	breq	.+10     	; 0x33a8 <__vector_12+0x7e>
    339e:	80 91 72 09 	lds	r24, 0x0972	; 0x800972 <sg_u8TicksSinceLastPackControllerMessage>
    33a2:	8f 5f       	subi	r24, 0xFF	; 255
    33a4:	80 93 72 09 	sts	0x0972, r24	; 0x800972 <sg_u8TicksSinceLastPackControllerMessage>
    33a8:	80 91 72 09 	lds	r24, 0x0972	; 0x800972 <sg_u8TicksSinceLastPackControllerMessage>
    33ac:	8f 36       	cpi	r24, 0x6F	; 111
    33ae:	40 f0       	brcs	.+16     	; 0x33c0 <__vector_12+0x96>
    33b0:	80 91 72 09 	lds	r24, 0x0972	; 0x800972 <sg_u8TicksSinceLastPackControllerMessage>
    33b4:	8f 56       	subi	r24, 0x6F	; 111
    33b6:	80 93 72 09 	sts	0x0972, r24	; 0x800972 <sg_u8TicksSinceLastPackControllerMessage>
    33ba:	81 e0       	ldi	r24, 0x01	; 1
    33bc:	80 93 1f 03 	sts	0x031F, r24	; 0x80031f <sg_bPackControllerTimeout>
    33c0:	80 91 73 09 	lds	r24, 0x0973	; 0x800973 <sg_u8CellStringPowerTimer>
    33c4:	88 23       	and	r24, r24
    33c6:	29 f0       	breq	.+10     	; 0x33d2 <__vector_12+0xa8>
    33c8:	80 91 73 09 	lds	r24, 0x0973	; 0x800973 <sg_u8CellStringPowerTimer>
    33cc:	81 50       	subi	r24, 0x01	; 1
    33ce:	80 93 73 09 	sts	0x0973, r24	; 0x800973 <sg_u8CellStringPowerTimer>
    33d2:	ff 91       	pop	r31
    33d4:	ef 91       	pop	r30
    33d6:	9f 91       	pop	r25
    33d8:	8f 91       	pop	r24
    33da:	0f 90       	pop	r0
    33dc:	0f be       	out	0x3f, r0	; 63
    33de:	0f 90       	pop	r0
    33e0:	1f 90       	pop	r1
    33e2:	18 95       	reti

Disassembly of section .text.WatchdogReset:

00004eae <WatchdogReset>:
		sg_u8CellStringPowerTimer--;
	}
}

void WatchdogReset( void )
{
    4eae:	08 95       	ret

Disassembly of section .text.WatchdogOff:

00004caa <WatchdogOff>:
// }

// Assume interrupts are disabled
void WatchdogOff( void )  // turn it off even when WDT_ENABLE is not defined
{
	wdt_reset();
    4caa:	a8 95       	wdr
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    4cac:	0f b6       	in	r0, 0x3f	; 63
    4cae:	f8 94       	cli
    4cb0:	a8 95       	wdr
    4cb2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f0060>
    4cb6:	88 61       	ori	r24, 0x18	; 24
    4cb8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f0060>
    4cbc:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f0060>
    4cc0:	0f be       	out	0x3f, r0	; 63
    4cc2:	08 95       	ret

Disassembly of section .text.__vector_28:

000042ec <__vector_28>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    42ec:	1f 92       	push	r1
    42ee:	0f 92       	push	r0
    42f0:	0f b6       	in	r0, 0x3f	; 63
    42f2:	0f 92       	push	r0
    42f4:	11 24       	eor	r1, r1
    42f6:	2f 93       	push	r18
    42f8:	3f 93       	push	r19
    42fa:	4f 93       	push	r20
    42fc:	5f 93       	push	r21
    42fe:	6f 93       	push	r22
    4300:	7f 93       	push	r23
    4302:	8f 93       	push	r24
    4304:	9f 93       	push	r25
    4306:	af 93       	push	r26
    4308:	bf 93       	push	r27
    430a:	ef 93       	push	r30
    430c:	ff 93       	push	r31
    430e:	44 e0       	ldi	r20, 0x04	; 4
    4310:	53 e0       	ldi	r21, 0x03	; 3
    4312:	67 e4       	ldi	r22, 0x47	; 71
    4314:	72 e0       	ldi	r23, 0x02	; 2
    4316:	80 e0       	ldi	r24, 0x00	; 0
    4318:	0e 94 d5 23 	call	0x47aa	; 0x47aa <PlatformAssert>
    431c:	ff 91       	pop	r31
    431e:	ef 91       	pop	r30
    4320:	bf 91       	pop	r27
    4322:	af 91       	pop	r26
    4324:	9f 91       	pop	r25
    4326:	8f 91       	pop	r24
    4328:	7f 91       	pop	r23
    432a:	6f 91       	pop	r22
    432c:	5f 91       	pop	r21
    432e:	4f 91       	pop	r20
    4330:	3f 91       	pop	r19
    4332:	2f 91       	pop	r18
    4334:	0f 90       	pop	r0
    4336:	0f be       	out	0x3f, r0	; 63
    4338:	0f 90       	pop	r0
    433a:	1f 90       	pop	r1
    433c:	18 95       	reti

Disassembly of section .text.__vector_23:

00003700 <__vector_23>:
    3700:	78 94       	sei
    3702:	1f 92       	push	r1
    3704:	0f 92       	push	r0
    3706:	0f b6       	in	r0, 0x3f	; 63
    3708:	0f 92       	push	r0
    370a:	11 24       	eor	r1, r1
    370c:	2f 93       	push	r18
    370e:	3f 93       	push	r19
    3710:	4f 93       	push	r20
    3712:	5f 93       	push	r21
    3714:	6f 93       	push	r22
    3716:	7f 93       	push	r23
    3718:	8f 93       	push	r24
    371a:	9f 93       	push	r25
    371c:	af 93       	push	r26
    371e:	bf 93       	push	r27
    3720:	ef 93       	push	r30
    3722:	ff 93       	push	r31
    3724:	96 b1       	in	r25, 0x06	; 6
    3726:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    372a:	83 30       	cpi	r24, 0x03	; 3
    372c:	21 f0       	breq	.+8      	; 0x3736 <__vector_23+0x36>
    372e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    3732:	82 30       	cpi	r24, 0x02	; 2
    3734:	c9 f4       	brne	.+50     	; 0x3768 <__vector_23+0x68>
    3736:	91 ff       	sbrs	r25, 1
    3738:	17 c0       	rjmp	.+46     	; 0x3768 <__vector_23+0x68>
    373a:	88 b1       	in	r24, 0x08	; 8
    373c:	8f 7e       	andi	r24, 0xEF	; 239
    373e:	88 b9       	out	0x08, r24	; 8
    3740:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    3744:	83 30       	cpi	r24, 0x03	; 3
    3746:	19 f4       	brne	.+6      	; 0x374e <__vector_23+0x4e>
    3748:	81 e0       	ldi	r24, 0x01	; 1
    374a:	0e 94 41 27 	call	0x4e82	; 0x4e82 <ModuleControllerStateSet>
    374e:	eb e6       	ldi	r30, 0x6B	; 107
    3750:	f0 e0       	ldi	r31, 0x00	; 0
    3752:	80 81       	ld	r24, Z
    3754:	8d 7f       	andi	r24, 0xFD	; 253
    3756:	80 83       	st	Z, r24
    3758:	e8 e6       	ldi	r30, 0x68	; 104
    375a:	f0 e0       	ldi	r31, 0x00	; 0
    375c:	80 81       	ld	r24, Z
    375e:	8d 7f       	andi	r24, 0xFD	; 253
    3760:	80 83       	st	Z, r24
    3762:	81 e0       	ldi	r24, 0x01	; 1
    3764:	80 93 17 03 	sts	0x0317, r24	; 0x800317 <sg_bOvercurrentSignal>
    3768:	ff 91       	pop	r31
    376a:	ef 91       	pop	r30
    376c:	bf 91       	pop	r27
    376e:	af 91       	pop	r26
    3770:	9f 91       	pop	r25
    3772:	8f 91       	pop	r24
    3774:	7f 91       	pop	r23
    3776:	6f 91       	pop	r22
    3778:	5f 91       	pop	r21
    377a:	4f 91       	pop	r20
    377c:	3f 91       	pop	r19
    377e:	2f 91       	pop	r18
    3780:	0f 90       	pop	r0
    3782:	0f be       	out	0x3f, r0	; 63
    3784:	0f 90       	pop	r0
    3786:	1f 90       	pop	r1
    3788:	18 95       	reti

Disassembly of section .text.__vector_24:

0000433e <__vector_24>:
    433e:	78 94       	sei
    4340:	1f 92       	push	r1
    4342:	0f 92       	push	r0
    4344:	0f b6       	in	r0, 0x3f	; 63
    4346:	0f 92       	push	r0
    4348:	11 24       	eor	r1, r1
    434a:	2f 93       	push	r18
    434c:	3f 93       	push	r19
    434e:	4f 93       	push	r20
    4350:	5f 93       	push	r21
    4352:	6f 93       	push	r22
    4354:	7f 93       	push	r23
    4356:	8f 93       	push	r24
    4358:	9f 93       	push	r25
    435a:	af 93       	push	r26
    435c:	bf 93       	push	r27
    435e:	ef 93       	push	r30
    4360:	ff 93       	push	r31
    4362:	8b b1       	in	r24, 0x0b	; 11
    4364:	0e 94 62 26 	call	0x4cc4	; 0x4cc4 <Check5VLoss>
    4368:	ff 91       	pop	r31
    436a:	ef 91       	pop	r30
    436c:	bf 91       	pop	r27
    436e:	af 91       	pop	r26
    4370:	9f 91       	pop	r25
    4372:	8f 91       	pop	r24
    4374:	7f 91       	pop	r23
    4376:	6f 91       	pop	r22
    4378:	5f 91       	pop	r21
    437a:	4f 91       	pop	r20
    437c:	3f 91       	pop	r19
    437e:	2f 91       	pop	r18
    4380:	0f 90       	pop	r0
    4382:	0f be       	out	0x3f, r0	; 63
    4384:	0f 90       	pop	r0
    4386:	1f 90       	pop	r1
    4388:	18 95       	reti

Disassembly of section .text.vUARTRXStart:

00004d38 <vUARTRXStart>:
}

// Called at the start of cell string data via MC RX
void vUARTRXStart(void)
{
	sg_u8CellBufferRX = 0;
    4d38:	10 92 70 09 	sts	0x0970, r1	; 0x800970 <sg_u8CellBufferRX>
	sg_u8CellIndex = 0;
    4d3c:	10 92 71 09 	sts	0x0971, r1	; 0x800971 <sg_u8CellIndex>
	sg_u16BytesReceived = 0;
    4d40:	10 92 5d 09 	sts	0x095D, r1	; 0x80095d <sg_u16BytesReceived+0x1>
    4d44:	10 92 5c 09 	sts	0x095C, r1	; 0x80095c <sg_u16BytesReceived>
	sg_u8CellReports = 0;
    4d48:	10 92 6f 09 	sts	0x096F, r1	; 0x80096f <sg_u8CellReports>
    4d4c:	08 95       	ret

Disassembly of section .text.vUARTRXEnd:

00004bc8 <vUARTRXEnd>:
	// disable the edge interrupt
//	VUART_RX_DISABLE();
	// disable bit timer interrupt, should already be off but just in case
//	TIMER_CHB_INT_DISABLE();
	// update bytes and cells received
	sg_sFrame.sg_u16BytesReceived = sg_u16BytesReceived;
    4bc8:	80 91 5c 09 	lds	r24, 0x095C	; 0x80095c <sg_u16BytesReceived>
    4bcc:	90 91 5d 09 	lds	r25, 0x095D	; 0x80095d <sg_u16BytesReceived+0x1>
    4bd0:	e0 e1       	ldi	r30, 0x10	; 16
    4bd2:	f1 e0       	ldi	r31, 0x01	; 1
    4bd4:	94 a7       	std	Z+44, r25	; 0x2c
    4bd6:	83 a7       	std	Z+43, r24	; 0x2b
	sg_sFrame.sg_u8CellCPUCount = sg_u8CellReports;
    4bd8:	80 91 6f 09 	lds	r24, 0x096F	; 0x80096f <sg_u8CellReports>
    4bdc:	85 a7       	std	Z+45, r24	; 0x2d
	sg_u16BytesReceived = 0;
    4bde:	10 92 5d 09 	sts	0x095D, r1	; 0x80095d <sg_u16BytesReceived+0x1>
    4be2:	10 92 5c 09 	sts	0x095C, r1	; 0x80095c <sg_u16BytesReceived>
	sg_u8CellReports = 0;
    4be6:	10 92 6f 09 	sts	0x096F, r1	; 0x80096f <sg_u8CellReports>
    4bea:	08 95       	ret

Disassembly of section .text.vUARTRXData:

00003d12 <vUARTRXData>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    3d12:	e0 91 70 09 	lds	r30, 0x0970	; 0x800970 <sg_u8CellBufferRX>
    3d16:	21 e0       	ldi	r18, 0x01	; 1
    3d18:	2e 0f       	add	r18, r30
    3d1a:	20 93 70 09 	sts	0x0970, r18	; 0x800970 <sg_u8CellBufferRX>
    3d1e:	f0 e0       	ldi	r31, 0x00	; 0
    3d20:	e0 5b       	subi	r30, 0xB0	; 176
    3d22:	f6 4f       	sbci	r31, 0xF6	; 246
    3d24:	80 83       	st	Z, r24
    3d26:	80 91 5c 09 	lds	r24, 0x095C	; 0x80095c <sg_u16BytesReceived>
    3d2a:	90 91 5d 09 	lds	r25, 0x095D	; 0x80095d <sg_u16BytesReceived+0x1>
    3d2e:	01 96       	adiw	r24, 0x01	; 1
    3d30:	90 93 5d 09 	sts	0x095D, r25	; 0x80095d <sg_u16BytesReceived+0x1>
    3d34:	80 93 5c 09 	sts	0x095C, r24	; 0x80095c <sg_u16BytesReceived>
    3d38:	24 30       	cpi	r18, 0x04	; 4
    3d3a:	38 f1       	brcs	.+78     	; 0x3d8a <vUARTRXData+0x78>
    3d3c:	10 92 70 09 	sts	0x0970, r1	; 0x800970 <sg_u8CellBufferRX>
    3d40:	80 91 71 09 	lds	r24, 0x0971	; 0x800971 <sg_u8CellIndex>
    3d44:	8c 36       	cpi	r24, 0x6C	; 108
    3d46:	08 f5       	brcc	.+66     	; 0x3d8a <vUARTRXData+0x78>
    3d48:	e8 2f       	mov	r30, r24
    3d4a:	f0 e0       	ldi	r31, 0x00	; 0
    3d4c:	75 96       	adiw	r30, 0x15	; 21
    3d4e:	ee 0f       	add	r30, r30
    3d50:	ff 1f       	adc	r31, r31
    3d52:	ee 0f       	add	r30, r30
    3d54:	ff 1f       	adc	r31, r31
    3d56:	e0 5f       	subi	r30, 0xF0	; 240
    3d58:	fe 4f       	sbci	r31, 0xFE	; 254
    3d5a:	a0 e5       	ldi	r26, 0x50	; 80
    3d5c:	b9 e0       	ldi	r27, 0x09	; 9
    3d5e:	4d 91       	ld	r20, X+
    3d60:	5d 91       	ld	r21, X+
    3d62:	6d 91       	ld	r22, X+
    3d64:	7c 91       	ld	r23, X
    3d66:	13 97       	sbiw	r26, 0x03	; 3
    3d68:	40 83       	st	Z, r20
    3d6a:	51 83       	std	Z+1, r21	; 0x01
    3d6c:	62 83       	std	Z+2, r22	; 0x02
    3d6e:	73 83       	std	Z+3, r23	; 0x03
    3d70:	1d 92       	st	X+, r1
    3d72:	1d 92       	st	X+, r1
    3d74:	1d 92       	st	X+, r1
    3d76:	1c 92       	st	X, r1
    3d78:	13 97       	sbiw	r26, 0x03	; 3
    3d7a:	8f 5f       	subi	r24, 0xFF	; 255
    3d7c:	80 93 71 09 	sts	0x0971, r24	; 0x800971 <sg_u8CellIndex>
    3d80:	80 91 6f 09 	lds	r24, 0x096F	; 0x80096f <sg_u8CellReports>
    3d84:	8f 5f       	subi	r24, 0xFF	; 255
    3d86:	80 93 6f 09 	sts	0x096F, r24	; 0x80096f <sg_u8CellReports>
    3d8a:	08 95       	ret

Disassembly of section .text.PlatformGetSendData:

00004854 <PlatformGetSendData>:
uint16_t PlatformGetSendData( bool bUpdateBalanceStatus )
{
	uint16_t u16SendValue = 0;
	
	
	if( sg_bStopDischarge )
    4854:	90 91 18 03 	lds	r25, 0x0318	; 0x800318 <sg_bStopDischarge>
    4858:	99 23       	and	r25, r25
    485a:	51 f0       	breq	.+20     	; 0x4870 <PlatformGetSendData+0x1c>
	{
		if (bUpdateBalanceStatus)	// don't update if ony an availability check
    485c:	88 23       	and	r24, r24
    485e:	59 f0       	breq	.+22     	; 0x4876 <PlatformGetSendData+0x22>
		{
			sg_bStopDischarge = false;
    4860:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <sg_bStopDischarge>
			sg_bCellBalancedOnce = true;
    4864:	81 e0       	ldi	r24, 0x01	; 1
    4866:	80 93 19 03 	sts	0x0319, r24	; 0x800319 <sg_bCellBalancedOnce>
		}
		u16SendValue = 0x3ff;
    486a:	8f ef       	ldi	r24, 0xFF	; 255
    486c:	93 e0       	ldi	r25, 0x03	; 3
    486e:	08 95       	ret
			}
		}
		else
#endif
		{
			u16SendValue |= MSG_CELL_SEND_REPORT;
    4870:	80 e0       	ldi	r24, 0x00	; 0
    4872:	90 e8       	ldi	r25, 0x80	; 128
    4874:	08 95       	ret
		if (bUpdateBalanceStatus)	// don't update if ony an availability check
		{
			sg_bStopDischarge = false;
			sg_bCellBalancedOnce = true;
		}
		u16SendValue = 0x3ff;
    4876:	8f ef       	ldi	r24, 0xFF	; 255
    4878:	93 e0       	ldi	r25, 0x03	; 3
#endif
		}
	}
	
	return( u16SendValue );
}
    487a:	08 95       	ret

Disassembly of section .text.ADCCallback:

0000491a <ADCCallback>:
// Called every time there's an ADC read since apparently ISR can't access global variables?  compiler fails
void ADCCallback(EADCType eType,
				 uint16_t u16Reading)
{
	// End of chain? Indicate it's time for an ADC update
	if ((EADCTYPE_COUNT-1) == eType)
    491a:	84 30       	cpi	r24, 0x04	; 4
    491c:	19 f4       	brne	.+6      	; 0x4924 <ADCCallback+0xa>
	{
		sg_bADCUpdate = true;
    491e:	91 e0       	ldi	r25, 0x01	; 1
    4920:	90 93 16 03 	sts	0x0316, r25	; 0x800316 <sg_bADCUpdate>
	}
	sg_sFrame.ADCReadings[eType].u16Reading = u16Reading;
    4924:	90 e0       	ldi	r25, 0x00	; 0
    4926:	fc 01       	movw	r30, r24
    4928:	ee 0f       	add	r30, r30
    492a:	ff 1f       	adc	r31, r31
    492c:	8e 0f       	add	r24, r30
    492e:	9f 1f       	adc	r25, r31
    4930:	fc 01       	movw	r30, r24
    4932:	eb 5a       	subi	r30, 0xAB	; 171
    4934:	fe 4f       	sbci	r31, 0xFE	; 254
    4936:	72 83       	std	Z+2, r23	; 0x02
    4938:	61 83       	std	Z+1, r22	; 0x01
	sg_sFrame.ADCReadings[eType].bValid = true;
    493a:	81 e0       	ldi	r24, 0x01	; 1
    493c:	80 83       	st	Z, r24
    493e:	08 95       	ret

Disassembly of section .text.FrameInit:

00002dc4 <FrameInit>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    2dc4:	cf 93       	push	r28
    2dc6:	df 93       	push	r29
    2dc8:	81 11       	cpse	r24, r1
    2dca:	0d c0       	rjmp	.+26     	; 0x2de6 <FrameInit+0x22>
    2dcc:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <sg_sFrame>
    2dd0:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <sg_sFrame+0x1>
    2dd4:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <sg_sFrame+0x2>
    2dd8:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <sg_sFrame+0x3>
    2ddc:	8a 37       	cpi	r24, 0x7A	; 122
    2dde:	9a 4d       	sbci	r25, 0xDA	; 218
    2de0:	a7 47       	sbci	r26, 0x77	; 119
    2de2:	ba 4b       	sbci	r27, 0xBA	; 186
    2de4:	29 f1       	breq	.+74     	; 0x2e30 <FrameInit+0x6c>
    2de6:	c0 e1       	ldi	r28, 0x10	; 16
    2de8:	d1 e0       	ldi	r29, 0x01	; 1
    2dea:	84 e0       	ldi	r24, 0x04	; 4
    2dec:	92 e0       	ldi	r25, 0x02	; 2
    2dee:	fe 01       	movw	r30, r28
    2df0:	9c 01       	movw	r18, r24
    2df2:	11 92       	st	Z+, r1
    2df4:	21 50       	subi	r18, 0x01	; 1
    2df6:	30 40       	sbci	r19, 0x00	; 0
    2df8:	e1 f7       	brne	.-8      	; 0x2df2 <FrameInit+0x2e>
    2dfa:	9d 83       	std	Y+5, r25	; 0x05
    2dfc:	8c 83       	std	Y+4, r24	; 0x04
    2dfe:	8a e7       	ldi	r24, 0x7A	; 122
    2e00:	9a ed       	ldi	r25, 0xDA	; 218
    2e02:	a7 e7       	ldi	r26, 0x77	; 119
    2e04:	ba eb       	ldi	r27, 0xBA	; 186
    2e06:	88 83       	st	Y, r24
    2e08:	99 83       	std	Y+1, r25	; 0x01
    2e0a:	aa 83       	std	Y+2, r26	; 0x02
    2e0c:	bb 83       	std	Y+3, r27	; 0x03
    2e0e:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <ModuleControllerGetUniqueID>
    2e12:	6e 87       	std	Y+14, r22	; 0x0e
    2e14:	7f 87       	std	Y+15, r23	; 0x0f
    2e16:	88 8b       	std	Y+16, r24	; 0x10
    2e18:	99 8b       	std	Y+17, r25	; 0x11
    2e1a:	8f ef       	ldi	r24, 0xFF	; 255
    2e1c:	8a a7       	std	Y+42, r24	; 0x2a
    2e1e:	8b 8b       	std	Y+19, r24	; 0x13
    2e20:	1c 8a       	std	Y+20, r1	; 0x14
    2e22:	84 e0       	ldi	r24, 0x04	; 4
    2e24:	90 e0       	ldi	r25, 0x00	; 0
    2e26:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <EEPROMRead>
    2e2a:	0e 94 74 18 	call	0x30e8	; 0x30e8 <CellCountExpectedSet>
    2e2e:	2a c0       	rjmp	.+84     	; 0x2e84 <FrameInit+0xc0>
    2e30:	e0 e1       	ldi	r30, 0x10	; 16
    2e32:	f1 e0       	ldi	r31, 0x01	; 1
    2e34:	17 a2       	std	Z+39, r1	; 0x27
    2e36:	11 a6       	std	Z+41, r1	; 0x29
    2e38:	10 a6       	std	Z+40, r1	; 0x28
    2e3a:	12 a6       	std	Z+42, r1	; 0x2a
    2e3c:	15 a6       	std	Z+45, r1	; 0x2d
    2e3e:	16 a6       	std	Z+46, r1	; 0x2e
    2e40:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <sg_sFrame+0x3d>
    2e44:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <sg_sFrame+0x3e>
    2e48:	a0 91 4f 01 	lds	r26, 0x014F	; 0x80014f <sg_sFrame+0x3f>
    2e4c:	b0 91 50 01 	lds	r27, 0x0150	; 0x800150 <sg_sFrame+0x40>
    2e50:	89 2b       	or	r24, r25
    2e52:	8a 2b       	or	r24, r26
    2e54:	8b 2b       	or	r24, r27
    2e56:	b1 f4       	brne	.+44     	; 0x2e84 <FrameInit+0xc0>
    2e58:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <sg_sFrame+0x3d>
    2e5c:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <sg_sFrame+0x3e>
    2e60:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <sg_sFrame+0x3f>
    2e64:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <sg_sFrame+0x40>
    2e68:	10 ae       	std	Z+56, r1	; 0x38
    2e6a:	17 aa       	std	Z+55, r1	; 0x37
    2e6c:	12 ae       	std	Z+58, r1	; 0x3a
    2e6e:	11 ae       	std	Z+57, r1	; 0x39
    2e70:	14 ae       	std	Z+60, r1	; 0x3c
    2e72:	13 ae       	std	Z+59, r1	; 0x3b
    2e74:	8f e9       	ldi	r24, 0x9F	; 159
    2e76:	95 e1       	ldi	r25, 0x15	; 21
    2e78:	92 ab       	std	Z+50, r25	; 0x32
    2e7a:	81 ab       	std	Z+49, r24	; 0x31
    2e7c:	94 ab       	std	Z+52, r25	; 0x34
    2e7e:	83 ab       	std	Z+51, r24	; 0x33
    2e80:	96 ab       	std	Z+54, r25	; 0x36
    2e82:	85 ab       	std	Z+53, r24	; 0x35
    2e84:	8f ef       	ldi	r24, 0xFF	; 255
    2e86:	80 93 79 09 	sts	0x0979, r24	; 0x800979 <sg_u8CurrentBufferIndex>
    2e8a:	df 91       	pop	r29
    2e8c:	cf 91       	pop	r28
    2e8e:	08 95       	ret

Disassembly of section .text.CellStringPowerStateMachine:

00003814 <CellStringPowerStateMachine>:
    3814:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <sg_eStringPowerState>
    3818:	82 30       	cpi	r24, 0x02	; 2
    381a:	49 f1       	breq	.+82     	; 0x386e <CellStringPowerStateMachine+0x5a>
    381c:	28 f4       	brcc	.+10     	; 0x3828 <CellStringPowerStateMachine+0x14>
    381e:	88 23       	and	r24, r24
    3820:	41 f0       	breq	.+16     	; 0x3832 <CellStringPowerStateMachine+0x1e>
    3822:	81 30       	cpi	r24, 0x01	; 1
    3824:	91 f0       	breq	.+36     	; 0x384a <CellStringPowerStateMachine+0x36>
    3826:	32 c0       	rjmp	.+100    	; 0x388c <CellStringPowerStateMachine+0x78>
    3828:	83 30       	cpi	r24, 0x03	; 3
    382a:	61 f1       	breq	.+88     	; 0x3884 <CellStringPowerStateMachine+0x70>
    382c:	84 30       	cpi	r24, 0x04	; 4
    382e:	a9 f1       	breq	.+106    	; 0x389a <CellStringPowerStateMachine+0x86>
    3830:	2d c0       	rjmp	.+90     	; 0x388c <CellStringPowerStateMachine+0x78>
    3832:	85 b1       	in	r24, 0x05	; 5
    3834:	8f 7e       	andi	r24, 0xEF	; 239
    3836:	85 b9       	out	0x05, r24	; 5
    3838:	81 e0       	ldi	r24, 0x01	; 1
    383a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <sg_eStringPowerState>
    383e:	80 e0       	ldi	r24, 0x00	; 0
    3840:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <FrameInit>
    3844:	0e 94 f4 26 	call	0x4de8	; 0x4de8 <SendModuleControllerStatus>
    3848:	08 95       	ret
    384a:	85 b1       	in	r24, 0x05	; 5
    384c:	8f 7e       	andi	r24, 0xEF	; 239
    384e:	85 b9       	out	0x05, r24	; 5
    3850:	80 e0       	ldi	r24, 0x00	; 0
    3852:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <FrameInit>
    3856:	82 e0       	ldi	r24, 0x02	; 2
    3858:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <sg_eStringPowerState>
    385c:	81 e0       	ldi	r24, 0x01	; 1
    385e:	80 93 73 09 	sts	0x0973, r24	; 0x800973 <sg_u8CellStringPowerTimer>
    3862:	e0 e1       	ldi	r30, 0x10	; 16
    3864:	f1 e0       	ldi	r31, 0x01	; 1
    3866:	8f ef       	ldi	r24, 0xFF	; 255
    3868:	83 8b       	std	Z+19, r24	; 0x13
    386a:	14 8a       	std	Z+20, r1	; 0x14
    386c:	08 95       	ret
    386e:	80 91 73 09 	lds	r24, 0x0973	; 0x800973 <sg_u8CellStringPowerTimer>
    3872:	81 11       	cpse	r24, r1
    3874:	12 c0       	rjmp	.+36     	; 0x389a <CellStringPowerStateMachine+0x86>
    3876:	85 b1       	in	r24, 0x05	; 5
    3878:	80 61       	ori	r24, 0x10	; 16
    387a:	85 b9       	out	0x05, r24	; 5
    387c:	83 e0       	ldi	r24, 0x03	; 3
    387e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <sg_eStringPowerState>
    3882:	08 95       	ret
    3884:	84 e0       	ldi	r24, 0x04	; 4
    3886:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <sg_eStringPowerState>
    388a:	08 95       	ret
    388c:	4b e6       	ldi	r20, 0x6B	; 107
    388e:	52 e0       	ldi	r21, 0x02	; 2
    3890:	67 e4       	ldi	r22, 0x47	; 71
    3892:	72 e0       	ldi	r23, 0x02	; 2
    3894:	80 e0       	ldi	r24, 0x00	; 0
    3896:	0e 94 d5 23 	call	0x47aa	; 0x47aa <PlatformAssert>
    389a:	08 95       	ret

Disassembly of section .text.main:

00000c34 <main>:
 c34:	cf 93       	push	r28
 c36:	df 93       	push	r29
 c38:	cd b7       	in	r28, 0x3d	; 61
 c3a:	de b7       	in	r29, 0x3e	; 62
 c3c:	28 97       	sbiw	r28, 0x08	; 8
 c3e:	0f b6       	in	r0, 0x3f	; 63
 c40:	f8 94       	cli
 c42:	de bf       	out	0x3e, r29	; 62
 c44:	0f be       	out	0x3f, r0	; 63
 c46:	cd bf       	out	0x3d, r28	; 61
 c48:	0e 94 55 26 	call	0x4caa	; 0x4caa <WatchdogOff>
 c4c:	88 b1       	in	r24, 0x08	; 8
 c4e:	8f 7e       	andi	r24, 0xEF	; 239
 c50:	88 b9       	out	0x08, r24	; 8
 c52:	87 b1       	in	r24, 0x07	; 7
 c54:	80 61       	ori	r24, 0x10	; 16
 c56:	87 b9       	out	0x07, r24	; 7
 c58:	87 b1       	in	r24, 0x07	; 7
 c5a:	8d 7f       	andi	r24, 0xFD	; 253
 c5c:	87 b9       	out	0x07, r24	; 7
 c5e:	87 b1       	in	r24, 0x07	; 7
 c60:	80 68       	ori	r24, 0x80	; 128
 c62:	87 b9       	out	0x07, r24	; 7
 c64:	88 b1       	in	r24, 0x08	; 8
 c66:	8f 7e       	andi	r24, 0xEF	; 239
 c68:	88 b9       	out	0x08, r24	; 8
 c6a:	8d b1       	in	r24, 0x0d	; 13
 c6c:	82 60       	ori	r24, 0x02	; 2
 c6e:	8d b9       	out	0x0d, r24	; 13
 c70:	8e b1       	in	r24, 0x0e	; 14
 c72:	8d 7f       	andi	r24, 0xFD	; 253
 c74:	8e b9       	out	0x0e, r24	; 14
 c76:	84 b1       	in	r24, 0x04	; 4
 c78:	80 61       	ori	r24, 0x10	; 16
 c7a:	84 b9       	out	0x04, r24	; 4
 c7c:	85 b1       	in	r24, 0x05	; 5
 c7e:	8f 7e       	andi	r24, 0xEF	; 239
 c80:	85 b9       	out	0x05, r24	; 5
 c82:	e0 e0       	ldi	r30, 0x00	; 0
 c84:	f8 e0       	ldi	r31, 0x08	; 8
 c86:	02 c0       	rjmp	.+4      	; 0xc8c <main+0x58>
 c88:	8a ea       	ldi	r24, 0xAA	; 170
 c8a:	81 93       	st	Z+, r24
 c8c:	e1 15       	cp	r30, r1
 c8e:	80 e1       	ldi	r24, 0x10	; 16
 c90:	f8 07       	cpc	r31, r24
 c92:	d0 f3       	brcs	.-12     	; 0xc88 <main+0x54>
 c94:	84 b7       	in	r24, 0x34	; 52
 c96:	80 93 6d 09 	sts	0x096D, r24	; 0x80096d <sg_u8Reason>
 c9a:	80 91 6d 09 	lds	r24, 0x096D	; 0x80096d <sg_u8Reason>
 c9e:	83 ff       	sbrs	r24, 3
 ca0:	0a c0       	rjmp	.+20     	; 0xcb6 <main+0x82>
 ca2:	80 91 28 03 	lds	r24, 0x0328	; 0x800328 <sg_eWDTCurrentStatus>
 ca6:	e0 e1       	ldi	r30, 0x10	; 16
 ca8:	f1 e0       	ldi	r31, 0x01	; 1
 caa:	82 89       	ldd	r24, Z+18	; 0x12
 cac:	8f 5f       	subi	r24, 0xFF	; 255
 cae:	82 8b       	std	Z+18, r24	; 0x12
 cb0:	0e 94 4d 0c 	call	0x189a	; 0x189a <ModuleControllerStateHandle>
 cb4:	47 c0       	rjmp	.+142    	; 0xd44 <main+0x110>
 cb6:	80 91 6d 09 	lds	r24, 0x096D	; 0x80096d <sg_u8Reason>
 cba:	80 91 6d 09 	lds	r24, 0x096D	; 0x80096d <sg_u8Reason>
 cbe:	80 91 6d 09 	lds	r24, 0x096D	; 0x80096d <sg_u8Reason>
 cc2:	f8 94       	cli
 cc4:	0e 94 36 27 	call	0x4e6c	; 0x4e6c <SetSysclock>
 cc8:	0e 94 4d 21 	call	0x429a	; 0x429a <TimerInit>
 ccc:	0e 94 c3 22 	call	0x4586	; 0x4586 <vUARTInit>
 cd0:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <ADCInit>
 cd4:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <STORE_Init>
 cd8:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <sg_bSDCardReady>
 cdc:	81 e0       	ldi	r24, 0x01	; 1
 cde:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <FrameInit>
 ce2:	89 e0       	ldi	r24, 0x09	; 9
 ce4:	90 e0       	ldi	r25, 0x00	; 0
 ce6:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <EEPROMRead>
 cea:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <sg_u8SequentailCountMismatchThreshold>
 cee:	8a b1       	in	r24, 0x0a	; 10
 cf0:	8f 7b       	andi	r24, 0xBF	; 191
 cf2:	8a b9       	out	0x0a, r24	; 10
 cf4:	8b b1       	in	r24, 0x0b	; 11
 cf6:	80 64       	ori	r24, 0x40	; 64
 cf8:	8b b9       	out	0x0b, r24	; 11
 cfa:	11 e0       	ldi	r17, 0x01	; 1
 cfc:	1b bb       	out	0x1b, r17	; 27
 cfe:	82 e0       	ldi	r24, 0x02	; 2
 d00:	8b bb       	out	0x1b, r24	; 27
 d02:	84 e0       	ldi	r24, 0x04	; 4
 d04:	8b bb       	out	0x1b, r24	; 27
 d06:	88 e0       	ldi	r24, 0x08	; 8
 d08:	8b bb       	out	0x1b, r24	; 27
 d0a:	ec e6       	ldi	r30, 0x6C	; 108
 d0c:	f0 e0       	ldi	r31, 0x00	; 0
 d0e:	80 81       	ld	r24, Z
 d10:	80 64       	ori	r24, 0x40	; 64
 d12:	80 83       	st	Z, r24
 d14:	8b b3       	in	r24, 0x1b	; 27
 d16:	84 60       	ori	r24, 0x04	; 4
 d18:	8b bb       	out	0x1b, r24	; 27
 d1a:	87 ec       	ldi	r24, 0xC7	; 199
 d1c:	98 e0       	ldi	r25, 0x08	; 8
 d1e:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <CANSetRXCallback>
 d22:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <CANInit>
 d26:	0e 94 3c 0b 	call	0x1678	; 0x1678 <RTCInit>
 d2a:	85 e0       	ldi	r24, 0x05	; 5
 d2c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <sg_eModuleControllerStateCurrent>
 d30:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <sg_eModuleControllerStateTarget>
 d34:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <sg_eModuleControllerStateMax>
 d38:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <sg_bModuleRegistered>
 d3c:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <sg_eStringPowerState>
 d40:	10 93 0c 01 	sts	0x010C, r17	; 0x80010c <sg_eFrameStatus>
 d44:	78 94       	sei
 d46:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <sg_bNewTick>
 d4a:	88 23       	and	r24, r24
 d4c:	e1 f3       	breq	.-8      	; 0xd46 <main+0x112>
 d4e:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <sg_bNewTick>
 d52:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <sg_bModuleRegistered>
 d56:	81 11       	cpse	r24, r1
 d58:	22 c0       	rjmp	.+68     	; 0xd9e <main+0x16a>
 d5a:	80 91 78 09 	lds	r24, 0x0978	; 0x800978 <sg_bAnnouncementPending>
 d5e:	88 23       	and	r24, r24
 d60:	11 f1       	breq	.+68     	; 0xda6 <main+0x172>
 d62:	80 91 77 09 	lds	r24, 0x0977	; 0x800977 <sg_u8AnnouncementDelayTicks>
 d66:	88 23       	and	r24, r24
 d68:	29 f0       	breq	.+10     	; 0xd74 <main+0x140>
 d6a:	80 91 77 09 	lds	r24, 0x0977	; 0x800977 <sg_u8AnnouncementDelayTicks>
 d6e:	81 50       	subi	r24, 0x01	; 1
 d70:	80 93 77 09 	sts	0x0977, r24	; 0x800977 <sg_u8AnnouncementDelayTicks>
 d74:	80 91 77 09 	lds	r24, 0x0977	; 0x800977 <sg_u8AnnouncementDelayTicks>
 d78:	81 11       	cpse	r24, r1
 d7a:	15 c0       	rjmp	.+42     	; 0xda6 <main+0x172>
 d7c:	81 e0       	ldi	r24, 0x01	; 1
 d7e:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <sg_bSendAnnouncement>
 d82:	10 92 78 09 	sts	0x0978, r1	; 0x800978 <sg_bAnnouncementPending>
 d86:	83 e5       	ldi	r24, 0x53	; 83
 d88:	92 e0       	ldi	r25, 0x02	; 2
 d8a:	a0 e0       	ldi	r26, 0x00	; 0
 d8c:	af 93       	push	r26
 d8e:	9f 93       	push	r25
 d90:	8f 93       	push	r24
 d92:	0e 94 14 27 	call	0x4e28	; 0x4e28 <DebugOut>
 d96:	0f 90       	pop	r0
 d98:	0f 90       	pop	r0
 d9a:	0f 90       	pop	r0
 d9c:	04 c0       	rjmp	.+8      	; 0xda6 <main+0x172>
 d9e:	ce 01       	movw	r24, r28
 da0:	01 96       	adiw	r24, 0x01	; 1
 da2:	0e 94 08 04 	call	0x810	; 0x810 <ControllerStatusMessagesSend>
 da6:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <sg_bPackControllerTimeout>
 daa:	88 23       	and	r24, r24
 dac:	81 f0       	breq	.+32     	; 0xdce <main+0x19a>
 dae:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <sg_bPackControllerTimeout>
 db2:	10 92 27 03 	sts	0x0327, r1	; 0x800327 <sg_u8ModuleRegistrationID>
 db6:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <sg_bModuleRegistered>
 dba:	10 92 76 09 	sts	0x0976, r1	; 0x800976 <sg_bIgnoreStatusRequests>
 dbe:	81 e0       	ldi	r24, 0x01	; 1
 dc0:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <sg_bSendAnnouncement>
 dc4:	0e 94 f4 26 	call	0x4de8	; 0x4de8 <SendModuleControllerStatus>
 dc8:	80 e0       	ldi	r24, 0x00	; 0
 dca:	0e 94 41 27 	call	0x4e82	; 0x4e82 <ModuleControllerStateSet>
 dce:	ef e6       	ldi	r30, 0x6F	; 111
 dd0:	f0 e0       	ldi	r31, 0x00	; 0
 dd2:	90 81       	ld	r25, Z
 dd4:	80 81       	ld	r24, Z
 dd6:	8d 7f       	andi	r24, 0xFD	; 253
 dd8:	80 83       	st	Z, r24
 dda:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <sg_eFrameStatus>
 dde:	20 91 74 09 	lds	r18, 0x0974	; 0x800974 <sg_bFrameStart>
 de2:	90 83       	st	Z, r25
 de4:	81 30       	cpi	r24, 0x01	; 1
 de6:	09 f0       	breq	.+2      	; 0xdea <main+0x1b6>
 de8:	61 c0       	rjmp	.+194    	; 0xeac <main+0x278>
 dea:	22 23       	and	r18, r18
 dec:	09 f4       	brne	.+2      	; 0xdf0 <main+0x1bc>
 dee:	55 c0       	rjmp	.+170    	; 0xe9a <main+0x266>
 df0:	10 92 74 09 	sts	0x0974, r1	; 0x800974 <sg_bFrameStart>
 df4:	0e 94 0a 1c 	call	0x3814	; 0x3814 <CellStringPowerStateMachine>
 df8:	0e 94 e4 25 	call	0x4bc8	; 0x4bc8 <vUARTRXEnd>
 dfc:	ce 01       	movw	r24, r28
 dfe:	01 96       	adiw	r24, 0x01	; 1
 e00:	0e 94 74 07 	call	0xee8	; 0xee8 <CellStringProcess>
 e04:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <sg_eStringPowerState>
 e08:	84 30       	cpi	r24, 0x04	; 4
 e0a:	29 f5       	brne	.+74     	; 0xe56 <main+0x222>
 e0c:	e0 e1       	ldi	r30, 0x10	; 16
 e0e:	f1 e0       	ldi	r31, 0x01	; 1
 e10:	95 a5       	ldd	r25, Z+45	; 0x2d
 e12:	85 89       	ldd	r24, Z+21	; 0x15
 e14:	98 17       	cp	r25, r24
 e16:	e9 f0       	breq	.+58     	; 0xe52 <main+0x21e>
 e18:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <sg_sFrame+0x15>
 e1c:	88 23       	and	r24, r24
 e1e:	c9 f0       	breq	.+50     	; 0xe52 <main+0x21e>
 e20:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <sg_u8SequentailCountMismatchThreshold>
 e24:	88 23       	and	r24, r24
 e26:	b9 f0       	breq	.+46     	; 0xe56 <main+0x222>
 e28:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <sg_u8SequentailCountMismatchThreshold>
 e2c:	8f 3f       	cpi	r24, 0xFF	; 255
 e2e:	99 f0       	breq	.+38     	; 0xe56 <main+0x222>
 e30:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <sg_u8SequentailCellCountMismatches>
 e34:	8f 5f       	subi	r24, 0xFF	; 255
 e36:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <sg_u8SequentailCellCountMismatches>
 e3a:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <sg_u8SequentailCellCountMismatches>
 e3e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <sg_u8SequentailCountMismatchThreshold>
 e42:	98 17       	cp	r25, r24
 e44:	40 f0       	brcs	.+16     	; 0xe56 <main+0x222>
 e46:	81 e0       	ldi	r24, 0x01	; 1
 e48:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <sg_eStringPowerState>
 e4c:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <sg_u8SequentailCellCountMismatches>
 e50:	02 c0       	rjmp	.+4      	; 0xe56 <main+0x222>
 e52:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <sg_u8SequentailCellCountMismatches>
 e56:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <sg_bSendAnnouncement>
 e5a:	88 23       	and	r24, r24
 e5c:	f1 f0       	breq	.+60     	; 0xe9a <main+0x266>
 e5e:	86 e5       	ldi	r24, 0x56	; 86
 e60:	89 83       	std	Y+1, r24	; 0x01
 e62:	80 e2       	ldi	r24, 0x20	; 32
 e64:	8a 83       	std	Y+2, r24	; 0x02
 e66:	82 e0       	ldi	r24, 0x02	; 2
 e68:	8b 83       	std	Y+3, r24	; 0x03
 e6a:	83 e0       	ldi	r24, 0x03	; 3
 e6c:	8c 83       	std	Y+4, r24	; 0x04
 e6e:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <sg_sFrame+0xe>
 e72:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <sg_sFrame+0xf>
 e76:	a0 91 20 01 	lds	r26, 0x0120	; 0x800120 <sg_sFrame+0x10>
 e7a:	b0 91 21 01 	lds	r27, 0x0121	; 0x800121 <sg_sFrame+0x11>
 e7e:	8d 83       	std	Y+5, r24	; 0x05
 e80:	9e 83       	std	Y+6, r25	; 0x06
 e82:	af 83       	std	Y+7, r26	; 0x07
 e84:	b8 87       	std	Y+8, r27	; 0x08
 e86:	48 e0       	ldi	r20, 0x08	; 8
 e88:	be 01       	movw	r22, r28
 e8a:	6f 5f       	subi	r22, 0xFF	; 255
 e8c:	7f 4f       	sbci	r23, 0xFF	; 255
 e8e:	80 e0       	ldi	r24, 0x00	; 0
 e90:	0e 94 86 26 	call	0x4d0c	; 0x4d0c <CANSendMessage>
 e94:	81 11       	cpse	r24, r1
 e96:	10 92 22 03 	sts	0x0322, r1	; 0x800322 <sg_bSendAnnouncement>
 e9a:	0e 94 4d 0c 	call	0x189a	; 0x189a <ModuleControllerStateHandle>
 e9e:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <sg_bOvercurrentSignal>
 ea2:	88 23       	and	r24, r24
 ea4:	b1 f0       	breq	.+44     	; 0xed2 <main+0x29e>
 ea6:	10 92 17 03 	sts	0x0317, r1	; 0x800317 <sg_bOvercurrentSignal>
 eaa:	13 c0       	rjmp	.+38     	; 0xed2 <main+0x29e>
 eac:	22 23       	and	r18, r18
 eae:	89 f0       	breq	.+34     	; 0xed2 <main+0x29e>
 eb0:	10 92 74 09 	sts	0x0974, r1	; 0x800974 <sg_bFrameStart>
 eb4:	0e 94 0a 1c 	call	0x3814	; 0x3814 <CellStringPowerStateMachine>
 eb8:	80 e0       	ldi	r24, 0x00	; 0
 eba:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <FrameInit>
 ebe:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <sg_eStringPowerState>
 ec2:	84 30       	cpi	r24, 0x04	; 4
 ec4:	31 f4       	brne	.+12     	; 0xed2 <main+0x29e>
 ec6:	0e 94 3e 24 	call	0x487c	; 0x487c <vUARTInitReceive>
 eca:	0e 94 46 27 	call	0x4e8c	; 0x4e8c <vUARTRXReset>
 ece:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <vUARTStarttx>
 ed2:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <sg_bADCUpdate>
 ed6:	88 23       	and	r24, r24
 ed8:	21 f0       	breq	.+8      	; 0xee2 <main+0x2ae>
 eda:	10 92 16 03 	sts	0x0316, r1	; 0x800316 <sg_bADCUpdate>
 ede:	0e 94 40 13 	call	0x2680	; 0x2680 <ModuleCurrentConvertReadings>
 ee2:	0e 94 01 24 	call	0x4802	; 0x4802 <ADCStartConversion>
 ee6:	2f cf       	rjmp	.-418    	; 0xd46 <main+0x112>

Disassembly of section .text.IsLeapYear:

000045f2 <IsLeapYear>:
	return( bResult );
}

// Returns true if u16Year is a leap year
static bool IsLeapYear(uint16_t u16Year)
{
    45f2:	9c 01       	movw	r18, r24
	bool bLeapYear = false;
	
	if ((u16Year % 400) == 0)
    45f4:	60 e9       	ldi	r22, 0x90	; 144
    45f6:	71 e0       	ldi	r23, 0x01	; 1
    45f8:	0e 94 52 24 	call	0x48a4	; 0x48a4 <__udivmodhi4>
    45fc:	89 2b       	or	r24, r25
    45fe:	69 f0       	breq	.+26     	; 0x461a <IsLeapYear+0x28>
	{
		bLeapYear = true;
	}
	else
	if ((u16Year % 100) == 0)
    4600:	c9 01       	movw	r24, r18
    4602:	64 e6       	ldi	r22, 0x64	; 100
    4604:	70 e0       	ldi	r23, 0x00	; 0
    4606:	0e 94 52 24 	call	0x48a4	; 0x48a4 <__udivmodhi4>
    460a:	89 2b       	or	r24, r25
    460c:	41 f0       	breq	.+16     	; 0x461e <IsLeapYear+0x2c>
	{
		// Not a leap year if divisible by 100 but not by 400
	}
	else
	if ((u16Year % 4) == 0)
    460e:	23 70       	andi	r18, 0x03	; 3
    4610:	33 27       	eor	r19, r19
    4612:	23 2b       	or	r18, r19
    4614:	31 f0       	breq	.+12     	; 0x4622 <IsLeapYear+0x30>
}

// Returns true if u16Year is a leap year
static bool IsLeapYear(uint16_t u16Year)
{
	bool bLeapYear = false;
    4616:	80 e0       	ldi	r24, 0x00	; 0
    4618:	08 95       	ret
	
	if ((u16Year % 400) == 0)
	{
		bLeapYear = true;
    461a:	81 e0       	ldi	r24, 0x01	; 1
    461c:	08 95       	ret
}

// Returns true if u16Year is a leap year
static bool IsLeapYear(uint16_t u16Year)
{
	bool bLeapYear = false;
    461e:	80 e0       	ldi	r24, 0x00	; 0
    4620:	08 95       	ret
		// Not a leap year if divisible by 100 but not by 400
	}
	else
	if ((u16Year % 4) == 0)
	{
		bLeapYear = true;
    4622:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return(bLeapYear);
}
    4624:	08 95       	ret

Disassembly of section .text.RTCStartTransaction:

000043d6 <RTCStartTransaction>:
}

static bool RTCStartTransaction( uint8_t u8Address, 
								 bool bRead, 
								 bool bAllowUnstick )
{
    43d6:	ff 92       	push	r15
    43d8:	0f 93       	push	r16
    43da:	1f 93       	push	r17
    43dc:	cf 93       	push	r28
    43de:	df 93       	push	r29
    43e0:	f8 2e       	mov	r15, r24
    43e2:	06 2f       	mov	r16, r22
    43e4:	14 2f       	mov	r17, r20
	bool bResult = false;
	uint8_t u8Tries = RTC_MAX_ADDRESS_TRIES;
    43e6:	d3 e0       	ldi	r29, 0x03	; 3

static bool RTCStartTransaction( uint8_t u8Address, 
								 bool bRead, 
								 bool bAllowUnstick )
{
	bool bResult = false;
    43e8:	c0 e0       	ldi	r28, 0x00	; 0
	uint8_t u8Tries = RTC_MAX_ADDRESS_TRIES;
	
	while( (false == bResult) && u8Tries )
    43ea:	0c c0       	rjmp	.+24     	; 0x4404 <RTCStartTransaction+0x2e>
	{
		u8Tries--;
    43ec:	d1 50       	subi	r29, 0x01	; 1
		
		bResult = I2CStartTransaction( u8Address, bRead );
    43ee:	60 2f       	mov	r22, r16
    43f0:	8f 2d       	mov	r24, r15
    43f2:	0e 94 16 24 	call	0x482c	; 0x482c <I2CStartTransaction>
    43f6:	c8 2f       	mov	r28, r24
	
		if( false == bAllowUnstick )
    43f8:	11 23       	and	r17, r17
    43fa:	41 f0       	breq	.+16     	; 0x440c <RTCStartTransaction+0x36>
		{
			break;
		}
		
		// Unstick and retry on failure
		if( false == bResult )
    43fc:	81 11       	cpse	r24, r1
    43fe:	02 c0       	rjmp	.+4      	; 0x4404 <RTCStartTransaction+0x2e>
		{
			I2CUnstick();
    4400:	0e 94 4e 22 	call	0x449c	; 0x449c <I2CUnstick>
								 bool bAllowUnstick )
{
	bool bResult = false;
	uint8_t u8Tries = RTC_MAX_ADDRESS_TRIES;
	
	while( (false == bResult) && u8Tries )
    4404:	c1 11       	cpse	r28, r1
    4406:	02 c0       	rjmp	.+4      	; 0x440c <RTCStartTransaction+0x36>
    4408:	d1 11       	cpse	r29, r1
    440a:	f0 cf       	rjmp	.-32     	; 0x43ec <RTCStartTransaction+0x16>
			I2CUnstick();
		}
	}
	
	return( bResult );
}
    440c:	8c 2f       	mov	r24, r28
    440e:	df 91       	pop	r29
    4410:	cf 91       	pop	r28
    4412:	1f 91       	pop	r17
    4414:	0f 91       	pop	r16
    4416:	ff 90       	pop	r15
    4418:	08 95       	ret

Disassembly of section .text.StructTMToHW:

000041a0 <StructTMToHW>:
}

// Converts struct tm to SMCP7940NTime structure
static void StructTMToHW(struct tm *psTimeTM,
						 SMCP7940NTime *psTime)
{
    41a0:	cf 93       	push	r28
    41a2:	df 93       	push	r29
    41a4:	dc 01       	movw	r26, r24
    41a6:	fb 01       	movw	r30, r22
	memset((void *) psTime, 0, sizeof(*psTime));
    41a8:	87 e0       	ldi	r24, 0x07	; 7
    41aa:	eb 01       	movw	r28, r22
    41ac:	19 92       	st	Y+, r1
    41ae:	8a 95       	dec	r24
    41b0:	e9 f7       	brne	.-6      	; 0x41ac <StructTMToHW+0xc>
	
	psTime->u8Seconds = psTimeTM->tm_sec;
    41b2:	8c 91       	ld	r24, X
    41b4:	80 83       	st	Z, r24
	psTime->u8Minutes = psTimeTM->tm_min;
    41b6:	12 96       	adiw	r26, 0x02	; 2
    41b8:	8c 91       	ld	r24, X
    41ba:	12 97       	sbiw	r26, 0x02	; 2
    41bc:	81 83       	std	Z+1, r24	; 0x01
	psTime->u8Hours = psTimeTM->tm_hour;
    41be:	14 96       	adiw	r26, 0x04	; 4
    41c0:	8c 91       	ld	r24, X
    41c2:	14 97       	sbiw	r26, 0x04	; 4
    41c4:	82 83       	std	Z+2, r24	; 0x02
	psTime->u8Day = psTimeTM->tm_mday;
    41c6:	16 96       	adiw	r26, 0x06	; 6
    41c8:	8c 91       	ld	r24, X
    41ca:	16 97       	sbiw	r26, 0x06	; 6
    41cc:	84 83       	std	Z+4, r24	; 0x04
	psTime->u8Month = psTimeTM->tm_mon;
    41ce:	18 96       	adiw	r26, 0x08	; 8
    41d0:	8c 91       	ld	r24, X
    41d2:	18 97       	sbiw	r26, 0x08	; 8
    41d4:	85 83       	std	Z+5, r24	; 0x05
	
	if (psTimeTM->tm_year > (2099-1900))
    41d6:	1a 96       	adiw	r26, 0x0a	; 10
    41d8:	8d 91       	ld	r24, X+
    41da:	9c 91       	ld	r25, X
    41dc:	1b 97       	sbiw	r26, 0x0b	; 11
    41de:	88 3c       	cpi	r24, 0xC8	; 200
    41e0:	91 05       	cpc	r25, r1
    41e2:	1c f0       	brlt	.+6      	; 0x41ea <StructTMToHW+0x4a>
	{
		psTime->u8Year = psTimeTM->tm_year - 2100;
    41e4:	84 53       	subi	r24, 0x34	; 52
    41e6:	86 83       	std	Z+6, r24	; 0x06
    41e8:	02 c0       	rjmp	.+4      	; 0x41ee <StructTMToHW+0x4e>
	}
	else
	{
		psTime->u8Year = psTimeTM->tm_year - 2000;
    41ea:	80 5d       	subi	r24, 0xD0	; 208
    41ec:	86 83       	std	Z+6, r24	; 0x06
	}
	
}
    41ee:	df 91       	pop	r29
    41f0:	cf 91       	pop	r28
    41f2:	08 95       	ret

Disassembly of section .text.HWToStructTM:

00003b26 <HWToStructTM>:
}

// Converts an SMCP7940NTime structure to struct tm
static void HWToStructTM(SMCP7940NTime *psTime,
						 struct tm *psTimeTM)
{
    3b26:	cf 93       	push	r28
    3b28:	df 93       	push	r29
    3b2a:	dc 01       	movw	r26, r24
    3b2c:	fb 01       	movw	r30, r22
	// At this point, the time is in STime and we should
	// turn that in to time_t
	memset((void *) psTimeTM, 0, sizeof(*psTimeTM));
    3b2e:	89 e1       	ldi	r24, 0x19	; 25
    3b30:	eb 01       	movw	r28, r22
    3b32:	19 92       	st	Y+, r1
    3b34:	8a 95       	dec	r24
    3b36:	e9 f7       	brne	.-6      	; 0x3b32 <HWToStructTM+0xc>
	
	psTimeTM->tm_sec = psTime->u8Seconds;
    3b38:	8c 91       	ld	r24, X
    3b3a:	90 e0       	ldi	r25, 0x00	; 0
    3b3c:	91 83       	std	Z+1, r25	; 0x01
    3b3e:	80 83       	st	Z, r24
	psTimeTM->tm_min = psTime->u8Minutes;
    3b40:	11 96       	adiw	r26, 0x01	; 1
    3b42:	8c 91       	ld	r24, X
    3b44:	11 97       	sbiw	r26, 0x01	; 1
    3b46:	90 e0       	ldi	r25, 0x00	; 0
    3b48:	93 83       	std	Z+3, r25	; 0x03
    3b4a:	82 83       	std	Z+2, r24	; 0x02
	psTimeTM->tm_hour = psTime->u8Hours;
    3b4c:	12 96       	adiw	r26, 0x02	; 2
    3b4e:	8c 91       	ld	r24, X
    3b50:	12 97       	sbiw	r26, 0x02	; 2
    3b52:	90 e0       	ldi	r25, 0x00	; 0
    3b54:	95 83       	std	Z+5, r25	; 0x05
    3b56:	84 83       	std	Z+4, r24	; 0x04
	psTimeTM->tm_mday = psTime->u8Day;
    3b58:	14 96       	adiw	r26, 0x04	; 4
    3b5a:	8c 91       	ld	r24, X
    3b5c:	14 97       	sbiw	r26, 0x04	; 4
    3b5e:	90 e0       	ldi	r25, 0x00	; 0
    3b60:	97 83       	std	Z+7, r25	; 0x07
    3b62:	86 83       	std	Z+6, r24	; 0x06
	psTimeTM->tm_mon = psTime->u8Month - 1;
    3b64:	15 96       	adiw	r26, 0x05	; 5
    3b66:	8c 91       	ld	r24, X
    3b68:	15 97       	sbiw	r26, 0x05	; 5
    3b6a:	90 e0       	ldi	r25, 0x00	; 0
    3b6c:	01 97       	sbiw	r24, 0x01	; 1
    3b6e:	91 87       	std	Z+9, r25	; 0x09
    3b70:	80 87       	std	Z+8, r24	; 0x08
	
	if (psTime->u8Year < YEAR_ROLLOVER_CUTOFF)
    3b72:	16 96       	adiw	r26, 0x06	; 6
    3b74:	8c 91       	ld	r24, X
    3b76:	84 31       	cpi	r24, 0x14	; 20
    3b78:	30 f4       	brcc	.+12     	; 0x3b86 <HWToStructTM+0x60>
	{
		psTimeTM->tm_year = 2100 + psTime->u8Year;
    3b7a:	90 e0       	ldi	r25, 0x00	; 0
    3b7c:	8c 5c       	subi	r24, 0xCC	; 204
    3b7e:	97 4f       	sbci	r25, 0xF7	; 247
    3b80:	93 87       	std	Z+11, r25	; 0x0b
    3b82:	82 87       	std	Z+10, r24	; 0x0a
    3b84:	05 c0       	rjmp	.+10     	; 0x3b90 <HWToStructTM+0x6a>
	}
	else
	{
		psTimeTM->tm_year = 2000 + psTime->u8Year;
    3b86:	90 e0       	ldi	r25, 0x00	; 0
    3b88:	80 53       	subi	r24, 0x30	; 48
    3b8a:	98 4f       	sbci	r25, 0xF8	; 248
    3b8c:	93 87       	std	Z+11, r25	; 0x0b
    3b8e:	82 87       	std	Z+10, r24	; 0x0a
	}	
	
	psTimeTM->tm_year -= 1900;
    3b90:	82 85       	ldd	r24, Z+10	; 0x0a
    3b92:	93 85       	ldd	r25, Z+11	; 0x0b
    3b94:	8c 56       	subi	r24, 0x6C	; 108
    3b96:	97 40       	sbci	r25, 0x07	; 7
    3b98:	93 87       	std	Z+11, r25	; 0x0b
    3b9a:	82 87       	std	Z+10, r24	; 0x0a
}
    3b9c:	df 91       	pop	r29
    3b9e:	cf 91       	pop	r28
    3ba0:	08 95       	ret

Disassembly of section .text.__vector_10:

0000389c <__vector_10>:
// # Of seconds since January 1, 1970
static volatile uint64_t sg_u64Time;

// Called once per second on rev 1 and newer hardware
ISR(INT3_vect, ISR_NOBLOCK)
{
    389c:	78 94       	sei
    389e:	1f 92       	push	r1
    38a0:	0f 92       	push	r0
    38a2:	0f b6       	in	r0, 0x3f	; 63
    38a4:	0f 92       	push	r0
    38a6:	11 24       	eor	r1, r1
    38a8:	2f 93       	push	r18
    38aa:	3f 93       	push	r19
    38ac:	4f 93       	push	r20
    38ae:	5f 93       	push	r21
    38b0:	6f 93       	push	r22
    38b2:	7f 93       	push	r23
    38b4:	8f 93       	push	r24
    38b6:	9f 93       	push	r25
    38b8:	af 93       	push	r26
	EIFR |= (1 << INTF3);
    38ba:	8c b3       	in	r24, 0x1c	; 28
    38bc:	88 60       	ori	r24, 0x08	; 8
    38be:	8c bb       	out	0x1c, r24	; 28
	sg_u64Time++;
    38c0:	20 91 45 09 	lds	r18, 0x0945	; 0x800945 <sg_u64Time>
    38c4:	30 91 46 09 	lds	r19, 0x0946	; 0x800946 <sg_u64Time+0x1>
    38c8:	40 91 47 09 	lds	r20, 0x0947	; 0x800947 <sg_u64Time+0x2>
    38cc:	50 91 48 09 	lds	r21, 0x0948	; 0x800948 <sg_u64Time+0x3>
    38d0:	60 91 49 09 	lds	r22, 0x0949	; 0x800949 <sg_u64Time+0x4>
    38d4:	70 91 4a 09 	lds	r23, 0x094A	; 0x80094a <sg_u64Time+0x5>
    38d8:	80 91 4b 09 	lds	r24, 0x094B	; 0x80094b <sg_u64Time+0x6>
    38dc:	90 91 4c 09 	lds	r25, 0x094C	; 0x80094c <sg_u64Time+0x7>
    38e0:	a1 e0       	ldi	r26, 0x01	; 1
    38e2:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__adddi3_s8>
    38e6:	20 93 45 09 	sts	0x0945, r18	; 0x800945 <sg_u64Time>
    38ea:	30 93 46 09 	sts	0x0946, r19	; 0x800946 <sg_u64Time+0x1>
    38ee:	40 93 47 09 	sts	0x0947, r20	; 0x800947 <sg_u64Time+0x2>
    38f2:	50 93 48 09 	sts	0x0948, r21	; 0x800948 <sg_u64Time+0x3>
    38f6:	60 93 49 09 	sts	0x0949, r22	; 0x800949 <sg_u64Time+0x4>
    38fa:	70 93 4a 09 	sts	0x094A, r23	; 0x80094a <sg_u64Time+0x5>
    38fe:	80 93 4b 09 	sts	0x094B, r24	; 0x80094b <sg_u64Time+0x6>
    3902:	90 93 4c 09 	sts	0x094C, r25	; 0x80094c <sg_u64Time+0x7>
}
    3906:	af 91       	pop	r26
    3908:	9f 91       	pop	r25
    390a:	8f 91       	pop	r24
    390c:	7f 91       	pop	r23
    390e:	6f 91       	pop	r22
    3910:	5f 91       	pop	r21
    3912:	4f 91       	pop	r20
    3914:	3f 91       	pop	r19
    3916:	2f 91       	pop	r18
    3918:	0f 90       	pop	r0
    391a:	0f be       	out	0x3f, r0	; 63
    391c:	0f 90       	pop	r0
    391e:	1f 90       	pop	r1
    3920:	18 95       	reti

Disassembly of section .text.RTCReadRegisters:

00003aa8 <RTCReadRegisters>:
}

bool RTCReadRegisters( uint8_t u8RegisterAddr, 
					   uint8_t* pu8Data, 
					   uint8_t u8Length )
{
    3aa8:	ff 92       	push	r15
    3aaa:	0f 93       	push	r16
    3aac:	1f 93       	push	r17
    3aae:	cf 93       	push	r28
    3ab0:	df 93       	push	r29
    3ab2:	f8 2e       	mov	r15, r24
    3ab4:	8b 01       	movw	r16, r22
    3ab6:	c4 2f       	mov	r28, r20
	bool bResult;
	
	MBASSERT( u8Length >= 1 );
    3ab8:	41 11       	cpse	r20, r1
    3aba:	07 c0       	rjmp	.+14     	; 0x3aca <RTCReadRegisters+0x22>
    3abc:	4f e5       	ldi	r20, 0x5F	; 95
    3abe:	50 e0       	ldi	r21, 0x00	; 0
    3ac0:	66 ef       	ldi	r22, 0xF6	; 246
    3ac2:	72 e0       	ldi	r23, 0x02	; 2
    3ac4:	80 e0       	ldi	r24, 0x00	; 0
    3ac6:	0e 94 d5 23 	call	0x47aa	; 0x47aa <PlatformAssert>
	
	// First send device address and write register address
	bResult = RTCStartTransaction( RTC_ADDRESS, false, true );
    3aca:	41 e0       	ldi	r20, 0x01	; 1
    3acc:	60 e0       	ldi	r22, 0x00	; 0
    3ace:	8e ed       	ldi	r24, 0xDE	; 222
    3ad0:	0e 94 eb 21 	call	0x43d6	; 0x43d6 <RTCStartTransaction>
    3ad4:	d8 2f       	mov	r29, r24
	
	// Couldn't get an ACK?  Give up now
	if( false == bResult )
    3ad6:	88 23       	and	r24, r24
    3ad8:	e9 f0       	breq	.+58     	; 0x3b14 <RTCReadRegisters+0x6c>
	{
		goto errorExit;
	}
	
	// Send the register address
	bResult = I2CTxByte( u8RegisterAddr );
    3ada:	8f 2d       	mov	r24, r15
    3adc:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <I2CTxByte>
    3ae0:	d8 2f       	mov	r29, r24
	
	if( false == bResult )
    3ae2:	88 23       	and	r24, r24
    3ae4:	b9 f0       	breq	.+46     	; 0x3b14 <RTCReadRegisters+0x6c>
	{
		goto errorExit;
	}
	
	// Send repeated start with read
	bResult = RTCStartTransaction( RTC_ADDRESS, true, false );
    3ae6:	40 e0       	ldi	r20, 0x00	; 0
    3ae8:	61 e0       	ldi	r22, 0x01	; 1
    3aea:	8e ed       	ldi	r24, 0xDE	; 222
    3aec:	0e 94 eb 21 	call	0x43d6	; 0x43d6 <RTCStartTransaction>
    3af0:	d8 2f       	mov	r29, r24
	
	// Couldn't get an ACK?  Give up now
	if( false == bResult )
    3af2:	81 11       	cpse	r24, r1
    3af4:	08 c0       	rjmp	.+16     	; 0x3b06 <RTCReadRegisters+0x5e>
    3af6:	0e c0       	rjmp	.+28     	; 0x3b14 <RTCReadRegisters+0x6c>
		goto errorExit;
	}
	
	while( u8Length >= 2 )
	{
		*pu8Data = I2CRxByte( true );
    3af8:	81 e0       	ldi	r24, 0x01	; 1
    3afa:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <I2CRxByte>
    3afe:	f8 01       	movw	r30, r16
    3b00:	81 93       	st	Z+, r24
    3b02:	8f 01       	movw	r16, r30
		pu8Data++;
		u8Length--;
    3b04:	c1 50       	subi	r28, 0x01	; 1
	if( false == bResult )
	{
		goto errorExit;
	}
	
	while( u8Length >= 2 )
    3b06:	c2 30       	cpi	r28, 0x02	; 2
    3b08:	b8 f7       	brcc	.-18     	; 0x3af8 <RTCReadRegisters+0x50>
		pu8Data++;
		u8Length--;
	}
	
	// Final read with NACK
	*pu8Data = I2CRxByte( false );
    3b0a:	80 e0       	ldi	r24, 0x00	; 0
    3b0c:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <I2CRxByte>
    3b10:	f8 01       	movw	r30, r16
    3b12:	80 83       	st	Z, r24
	
errorExit:

	I2CStop();
    3b14:	0e 94 7a 24 	call	0x48f4	; 0x48f4 <I2CStop>
	
	return(bResult);
}
    3b18:	8d 2f       	mov	r24, r29
    3b1a:	df 91       	pop	r29
    3b1c:	cf 91       	pop	r28
    3b1e:	1f 91       	pop	r17
    3b20:	0f 91       	pop	r16
    3b22:	ff 90       	pop	r15
    3b24:	08 95       	ret

Disassembly of section .text.RTCReadHW:

0000297a <RTCReadHW>:
	sei();
	
	psSrc = gmtime((const time_t *) &u64Time);
	memcpy((void *) psTime, (void *) psSrc, sizeof(*psTime));
	return(true);
}
    297a:	cf 93       	push	r28
    297c:	df 93       	push	r29
    297e:	ec 01       	movw	r28, r24
    2980:	47 e0       	ldi	r20, 0x07	; 7
    2982:	bc 01       	movw	r22, r24
    2984:	80 e0       	ldi	r24, 0x00	; 0
    2986:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <RTCReadRegisters>
    298a:	88 23       	and	r24, r24
    298c:	09 f4       	brne	.+2      	; 0x2990 <RTCReadHW+0x16>
    298e:	63 c0       	rjmp	.+198    	; 0x2a56 <RTCReadHW+0xdc>
    2990:	98 81       	ld	r25, Y
    2992:	29 2f       	mov	r18, r25
    2994:	22 95       	swap	r18
    2996:	2f 70       	andi	r18, 0x0F	; 15
    2998:	27 70       	andi	r18, 0x07	; 7
    299a:	22 0f       	add	r18, r18
    299c:	32 2f       	mov	r19, r18
    299e:	33 0f       	add	r19, r19
    29a0:	33 0f       	add	r19, r19
    29a2:	23 0f       	add	r18, r19
    29a4:	9f 70       	andi	r25, 0x0F	; 15
    29a6:	92 0f       	add	r25, r18
    29a8:	98 83       	st	Y, r25
    29aa:	99 81       	ldd	r25, Y+1	; 0x01
    29ac:	29 2f       	mov	r18, r25
    29ae:	22 95       	swap	r18
    29b0:	2f 70       	andi	r18, 0x0F	; 15
    29b2:	27 70       	andi	r18, 0x07	; 7
    29b4:	22 0f       	add	r18, r18
    29b6:	32 2f       	mov	r19, r18
    29b8:	33 0f       	add	r19, r19
    29ba:	33 0f       	add	r19, r19
    29bc:	23 0f       	add	r18, r19
    29be:	9f 70       	andi	r25, 0x0F	; 15
    29c0:	92 0f       	add	r25, r18
    29c2:	99 83       	std	Y+1, r25	; 0x01
    29c4:	9a 81       	ldd	r25, Y+2	; 0x02
    29c6:	96 ff       	sbrs	r25, 6
    29c8:	11 c0       	rjmp	.+34     	; 0x29ec <RTCReadHW+0x72>
    29ca:	94 fb       	bst	r25, 4
    29cc:	22 27       	eor	r18, r18
    29ce:	20 f9       	bld	r18, 0
    29d0:	22 0f       	add	r18, r18
    29d2:	32 2f       	mov	r19, r18
    29d4:	33 0f       	add	r19, r19
    29d6:	33 0f       	add	r19, r19
    29d8:	23 0f       	add	r18, r19
    29da:	39 2f       	mov	r19, r25
    29dc:	3f 70       	andi	r19, 0x0F	; 15
    29de:	23 0f       	add	r18, r19
    29e0:	2a 83       	std	Y+2, r18	; 0x02
    29e2:	95 ff       	sbrs	r25, 5
    29e4:	0f c0       	rjmp	.+30     	; 0x2a04 <RTCReadHW+0x8a>
    29e6:	24 5f       	subi	r18, 0xF4	; 244
    29e8:	2a 83       	std	Y+2, r18	; 0x02
    29ea:	0c c0       	rjmp	.+24     	; 0x2a04 <RTCReadHW+0x8a>
    29ec:	29 2f       	mov	r18, r25
    29ee:	22 95       	swap	r18
    29f0:	2f 70       	andi	r18, 0x0F	; 15
    29f2:	23 70       	andi	r18, 0x03	; 3
    29f4:	22 0f       	add	r18, r18
    29f6:	32 2f       	mov	r19, r18
    29f8:	33 0f       	add	r19, r19
    29fa:	33 0f       	add	r19, r19
    29fc:	23 0f       	add	r18, r19
    29fe:	9f 70       	andi	r25, 0x0F	; 15
    2a00:	92 0f       	add	r25, r18
    2a02:	9a 83       	std	Y+2, r25	; 0x02
    2a04:	9b 81       	ldd	r25, Y+3	; 0x03
    2a06:	97 70       	andi	r25, 0x07	; 7
    2a08:	9b 83       	std	Y+3, r25	; 0x03
    2a0a:	9c 81       	ldd	r25, Y+4	; 0x04
    2a0c:	29 2f       	mov	r18, r25
    2a0e:	22 95       	swap	r18
    2a10:	2f 70       	andi	r18, 0x0F	; 15
    2a12:	23 70       	andi	r18, 0x03	; 3
    2a14:	22 0f       	add	r18, r18
    2a16:	32 2f       	mov	r19, r18
    2a18:	33 0f       	add	r19, r19
    2a1a:	33 0f       	add	r19, r19
    2a1c:	23 0f       	add	r18, r19
    2a1e:	9f 70       	andi	r25, 0x0F	; 15
    2a20:	92 0f       	add	r25, r18
    2a22:	9c 83       	std	Y+4, r25	; 0x04
    2a24:	9d 81       	ldd	r25, Y+5	; 0x05
    2a26:	94 fb       	bst	r25, 4
    2a28:	22 27       	eor	r18, r18
    2a2a:	20 f9       	bld	r18, 0
    2a2c:	22 0f       	add	r18, r18
    2a2e:	32 2f       	mov	r19, r18
    2a30:	33 0f       	add	r19, r19
    2a32:	33 0f       	add	r19, r19
    2a34:	23 0f       	add	r18, r19
    2a36:	9f 70       	andi	r25, 0x0F	; 15
    2a38:	92 0f       	add	r25, r18
    2a3a:	9d 83       	std	Y+5, r25	; 0x05
    2a3c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a3e:	29 2f       	mov	r18, r25
    2a40:	22 95       	swap	r18
    2a42:	2f 70       	andi	r18, 0x0F	; 15
    2a44:	22 0f       	add	r18, r18
    2a46:	32 2f       	mov	r19, r18
    2a48:	33 0f       	add	r19, r19
    2a4a:	33 0f       	add	r19, r19
    2a4c:	23 0f       	add	r18, r19
    2a4e:	9f 70       	andi	r25, 0x0F	; 15
    2a50:	92 0f       	add	r25, r18
    2a52:	9c 5e       	subi	r25, 0xEC	; 236
    2a54:	9e 83       	std	Y+6, r25	; 0x06
    2a56:	df 91       	pop	r29
    2a58:	cf 91       	pop	r28
    2a5a:	08 95       	ret

Disassembly of section .text.RTCWriteRegisters:

00003e62 <RTCWriteRegisters>:
}

bool RTCWriteRegisters( uint8_t u8RegisterAddr,
						uint8_t* pu8Data, 
						uint8_t u8Length )
{
    3e62:	ff 92       	push	r15
    3e64:	0f 93       	push	r16
    3e66:	1f 93       	push	r17
    3e68:	cf 93       	push	r28
    3e6a:	df 93       	push	r29
    3e6c:	f8 2e       	mov	r15, r24
    3e6e:	8b 01       	movw	r16, r22
    3e70:	c4 2f       	mov	r28, r20
	bool bResult;
	
	MBASSERT( u8Length >= 1 );
    3e72:	41 11       	cpse	r20, r1
    3e74:	07 c0       	rjmp	.+14     	; 0x3e84 <RTCWriteRegisters+0x22>
    3e76:	42 e9       	ldi	r20, 0x92	; 146
    3e78:	50 e0       	ldi	r21, 0x00	; 0
    3e7a:	66 ef       	ldi	r22, 0xF6	; 246
    3e7c:	72 e0       	ldi	r23, 0x02	; 2
    3e7e:	80 e0       	ldi	r24, 0x00	; 0
    3e80:	0e 94 d5 23 	call	0x47aa	; 0x47aa <PlatformAssert>
	
	// First send device address and write register address
	bResult = RTCStartTransaction( RTC_ADDRESS, false, true );
    3e84:	41 e0       	ldi	r20, 0x01	; 1
    3e86:	60 e0       	ldi	r22, 0x00	; 0
    3e88:	8e ed       	ldi	r24, 0xDE	; 222
    3e8a:	0e 94 eb 21 	call	0x43d6	; 0x43d6 <RTCStartTransaction>
    3e8e:	d8 2f       	mov	r29, r24
	
	// Couldn't get an ACK?  Give up now
	if( false == bResult )
    3e90:	88 23       	and	r24, r24
    3e92:	99 f0       	breq	.+38     	; 0x3eba <RTCWriteRegisters+0x58>
	{
		goto errorExit;
	}
	
	// Send the register address
	bResult = I2CTxByte( u8RegisterAddr );
    3e94:	8f 2d       	mov	r24, r15
    3e96:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <I2CTxByte>
    3e9a:	d8 2f       	mov	r29, r24
	
	if( false == bResult )
    3e9c:	81 11       	cpse	r24, r1
    3e9e:	0b c0       	rjmp	.+22     	; 0x3eb6 <RTCWriteRegisters+0x54>
    3ea0:	0c c0       	rjmp	.+24     	; 0x3eba <RTCWriteRegisters+0x58>
	}
	
	// Now immediately send the sequential data
	while( u8Length )
	{
		bResult = I2CTxByte( *pu8Data );
    3ea2:	f8 01       	movw	r30, r16
    3ea4:	80 81       	ld	r24, Z
    3ea6:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <I2CTxByte>
    3eaa:	d8 2f       	mov	r29, r24
		
		if( false == bResult )
    3eac:	88 23       	and	r24, r24
    3eae:	29 f0       	breq	.+10     	; 0x3eba <RTCWriteRegisters+0x58>
		{
			goto errorExit;
		}
		
		pu8Data++;
    3eb0:	0f 5f       	subi	r16, 0xFF	; 255
    3eb2:	1f 4f       	sbci	r17, 0xFF	; 255
		u8Length--;
    3eb4:	c1 50       	subi	r28, 0x01	; 1
	{
		goto errorExit;
	}
	
	// Now immediately send the sequential data
	while( u8Length )
    3eb6:	c1 11       	cpse	r28, r1
    3eb8:	f4 cf       	rjmp	.-24     	; 0x3ea2 <RTCWriteRegisters+0x40>
		u8Length--;
	}
	
errorExit:

	I2CStop();
    3eba:	0e 94 7a 24 	call	0x48f4	; 0x48f4 <I2CStop>
	
	return( bResult );
}
    3ebe:	8d 2f       	mov	r24, r29
    3ec0:	df 91       	pop	r29
    3ec2:	cf 91       	pop	r28
    3ec4:	1f 91       	pop	r17
    3ec6:	0f 91       	pop	r16
    3ec8:	ff 90       	pop	r15
    3eca:	08 95       	ret

Disassembly of section .text.RTCWriteHW:

00002784 <RTCWriteHW>:
	sei();
	
	psSrc = gmtime((const time_t *) &u64Time);
	memcpy((void *) psTime, (void *) psSrc, sizeof(*psTime));
	return(true);
}
    2784:	fc 01       	movw	r30, r24
    2786:	20 81       	ld	r18, Z
    2788:	8d ec       	ldi	r24, 0xCD	; 205
    278a:	28 9f       	mul	r18, r24
    278c:	91 2d       	mov	r25, r1
    278e:	11 24       	eor	r1, r1
    2790:	96 95       	lsr	r25
    2792:	96 95       	lsr	r25
    2794:	96 95       	lsr	r25
    2796:	30 e1       	ldi	r19, 0x10	; 16
    2798:	93 9f       	mul	r25, r19
    279a:	a0 01       	movw	r20, r0
    279c:	11 24       	eor	r1, r1
    279e:	99 0f       	add	r25, r25
    27a0:	39 2f       	mov	r19, r25
    27a2:	33 0f       	add	r19, r19
    27a4:	33 0f       	add	r19, r19
    27a6:	93 0f       	add	r25, r19
    27a8:	29 1b       	sub	r18, r25
    27aa:	24 2b       	or	r18, r20
    27ac:	20 83       	st	Z, r18
    27ae:	21 81       	ldd	r18, Z+1	; 0x01
    27b0:	28 9f       	mul	r18, r24
    27b2:	91 2d       	mov	r25, r1
    27b4:	11 24       	eor	r1, r1
    27b6:	96 95       	lsr	r25
    27b8:	96 95       	lsr	r25
    27ba:	96 95       	lsr	r25
    27bc:	30 e1       	ldi	r19, 0x10	; 16
    27be:	93 9f       	mul	r25, r19
    27c0:	a0 01       	movw	r20, r0
    27c2:	11 24       	eor	r1, r1
    27c4:	99 0f       	add	r25, r25
    27c6:	39 2f       	mov	r19, r25
    27c8:	33 0f       	add	r19, r19
    27ca:	33 0f       	add	r19, r19
    27cc:	93 0f       	add	r25, r19
    27ce:	29 1b       	sub	r18, r25
    27d0:	24 2b       	or	r18, r20
    27d2:	21 83       	std	Z+1, r18	; 0x01
    27d4:	42 81       	ldd	r20, Z+2	; 0x02
    27d6:	48 9f       	mul	r20, r24
    27d8:	91 2d       	mov	r25, r1
    27da:	11 24       	eor	r1, r1
    27dc:	96 95       	lsr	r25
    27de:	96 95       	lsr	r25
    27e0:	96 95       	lsr	r25
    27e2:	50 e1       	ldi	r21, 0x10	; 16
    27e4:	95 9f       	mul	r25, r21
    27e6:	90 01       	movw	r18, r0
    27e8:	11 24       	eor	r1, r1
    27ea:	99 0f       	add	r25, r25
    27ec:	39 2f       	mov	r19, r25
    27ee:	33 0f       	add	r19, r19
    27f0:	33 0f       	add	r19, r19
    27f2:	93 0f       	add	r25, r19
    27f4:	49 1b       	sub	r20, r25
    27f6:	24 2b       	or	r18, r20
    27f8:	2f 7b       	andi	r18, 0xBF	; 191
    27fa:	22 83       	std	Z+2, r18	; 0x02
    27fc:	93 81       	ldd	r25, Z+3	; 0x03
    27fe:	97 70       	andi	r25, 0x07	; 7
    2800:	98 60       	ori	r25, 0x08	; 8
    2802:	93 83       	std	Z+3, r25	; 0x03
    2804:	24 81       	ldd	r18, Z+4	; 0x04
    2806:	28 9f       	mul	r18, r24
    2808:	91 2d       	mov	r25, r1
    280a:	11 24       	eor	r1, r1
    280c:	96 95       	lsr	r25
    280e:	96 95       	lsr	r25
    2810:	96 95       	lsr	r25
    2812:	30 e1       	ldi	r19, 0x10	; 16
    2814:	93 9f       	mul	r25, r19
    2816:	a0 01       	movw	r20, r0
    2818:	11 24       	eor	r1, r1
    281a:	99 0f       	add	r25, r25
    281c:	39 2f       	mov	r19, r25
    281e:	33 0f       	add	r19, r19
    2820:	33 0f       	add	r19, r19
    2822:	93 0f       	add	r25, r19
    2824:	29 1b       	sub	r18, r25
    2826:	24 2b       	or	r18, r20
    2828:	24 83       	std	Z+4, r18	; 0x04
    282a:	25 81       	ldd	r18, Z+5	; 0x05
    282c:	28 9f       	mul	r18, r24
    282e:	91 2d       	mov	r25, r1
    2830:	11 24       	eor	r1, r1
    2832:	96 95       	lsr	r25
    2834:	96 95       	lsr	r25
    2836:	96 95       	lsr	r25
    2838:	30 e1       	ldi	r19, 0x10	; 16
    283a:	93 9f       	mul	r25, r19
    283c:	a0 01       	movw	r20, r0
    283e:	11 24       	eor	r1, r1
    2840:	99 0f       	add	r25, r25
    2842:	39 2f       	mov	r19, r25
    2844:	33 0f       	add	r19, r19
    2846:	33 0f       	add	r19, r19
    2848:	93 0f       	add	r25, r19
    284a:	29 1b       	sub	r18, r25
    284c:	24 2b       	or	r18, r20
    284e:	25 83       	std	Z+5, r18	; 0x05
    2850:	96 81       	ldd	r25, Z+6	; 0x06
    2852:	98 9f       	mul	r25, r24
    2854:	81 2d       	mov	r24, r1
    2856:	11 24       	eor	r1, r1
    2858:	86 95       	lsr	r24
    285a:	86 95       	lsr	r24
    285c:	86 95       	lsr	r24
    285e:	40 e1       	ldi	r20, 0x10	; 16
    2860:	84 9f       	mul	r24, r20
    2862:	90 01       	movw	r18, r0
    2864:	11 24       	eor	r1, r1
    2866:	88 0f       	add	r24, r24
    2868:	38 2f       	mov	r19, r24
    286a:	33 0f       	add	r19, r19
    286c:	33 0f       	add	r19, r19
    286e:	83 0f       	add	r24, r19
    2870:	98 1b       	sub	r25, r24
    2872:	92 2b       	or	r25, r18
    2874:	96 83       	std	Z+6, r25	; 0x06
    2876:	47 e0       	ldi	r20, 0x07	; 7
    2878:	bf 01       	movw	r22, r30
    287a:	80 e0       	ldi	r24, 0x00	; 0
    287c:	0e 94 31 1f 	call	0x3e62	; 0x3e62 <RTCWriteRegisters>
    2880:	08 95       	ret

Disassembly of section .text.RTCSetTime:

00003022 <RTCSetTime>:

// This sets the RTC to the specific time passed in. True is returned
// if it's 
bool RTCSetTime(uint64_t u64Timet)
{
    3022:	0f 93       	push	r16
    3024:	1f 93       	push	r17
    3026:	cf 93       	push	r28
    3028:	df 93       	push	r29
    302a:	cd b7       	in	r28, 0x3d	; 61
    302c:	de b7       	in	r29, 0x3e	; 62
    302e:	a8 97       	sbiw	r28, 0x28	; 40
    3030:	0f b6       	in	r0, 0x3f	; 63
    3032:	f8 94       	cli
    3034:	de bf       	out	0x3e, r29	; 62
    3036:	0f be       	out	0x3f, r0	; 63
    3038:	cd bf       	out	0x3d, r28	; 61
    303a:	29 a3       	std	Y+33, r18	; 0x21
    303c:	3a a3       	std	Y+34, r19	; 0x22
    303e:	4b a3       	std	Y+35, r20	; 0x23
    3040:	5c a3       	std	Y+36, r21	; 0x24
    3042:	6d a3       	std	Y+37, r22	; 0x25
    3044:	7e a3       	std	Y+38, r23	; 0x26
    3046:	8f a3       	std	Y+39, r24	; 0x27
    3048:	98 a7       	std	Y+40, r25	; 0x28
	struct tm sTime;
	struct tm *psTime;
	SMCP7940NTime sTimeHW;

	// Convert to GMTime
	memset((void *) &sTime, 0, sizeof(sTime));
    304a:	fe 01       	movw	r30, r28
    304c:	31 96       	adiw	r30, 0x01	; 1
    304e:	89 e1       	ldi	r24, 0x19	; 25
    3050:	df 01       	movw	r26, r30
    3052:	1d 92       	st	X+, r1
    3054:	8a 95       	dec	r24
    3056:	e9 f7       	brne	.-6      	; 0x3052 <RTCSetTime+0x30>
	psTime = gmtime((const time_t *) &u64Timet);
    3058:	be 01       	movw	r22, r28
    305a:	6f 5d       	subi	r22, 0xDF	; 223
    305c:	7f 4f       	sbci	r23, 0xFF	; 255
    305e:	80 e8       	ldi	r24, 0x80	; 128
    3060:	0e 94 4b 27 	call	0x4e96	; 0x4e96 <gmtime>
    3064:	8c 01       	movw	r16, r24
	MBASSERT(psTime);
    3066:	89 2b       	or	r24, r25
    3068:	39 f4       	brne	.+14     	; 0x3078 <RTCSetTime+0x56>
    306a:	42 e8       	ldi	r20, 0x82	; 130
    306c:	51 e0       	ldi	r21, 0x01	; 1
    306e:	66 ef       	ldi	r22, 0xF6	; 246
    3070:	72 e0       	ldi	r23, 0x02	; 2
    3072:	80 e0       	ldi	r24, 0x00	; 0
    3074:	0e 94 d5 23 	call	0x47aa	; 0x47aa <PlatformAssert>
	memcpy((void *) &sTime, (void *) psTime, sizeof(sTime));
    3078:	a8 01       	movw	r20, r16
    307a:	60 e8       	ldi	r22, 0x80	; 128
    307c:	29 e1       	ldi	r18, 0x19	; 25
    307e:	30 e0       	ldi	r19, 0x00	; 0
    3080:	ce 01       	movw	r24, r28
    3082:	01 96       	adiw	r24, 0x01	; 1
    3084:	0e 94 79 23 	call	0x46f2	; 0x46f2 <memcpy>
	
	// Now convert to hardware
	StructTMToHW(&sTime,
    3088:	be 01       	movw	r22, r28
    308a:	66 5e       	subi	r22, 0xE6	; 230
    308c:	7f 4f       	sbci	r23, 0xFF	; 255
    308e:	ce 01       	movw	r24, r28
    3090:	01 96       	adiw	r24, 0x01	; 1
    3092:	0e 94 d0 20 	call	0x41a0	; 0x41a0 <StructTMToHW>
				 &sTimeHW);
	
	// Set the time			 
	cli();
    3096:	f8 94       	cli
	sg_u64Time = u64Timet;
    3098:	79 a1       	ldd	r23, Y+33	; 0x21
    309a:	6a a1       	ldd	r22, Y+34	; 0x22
    309c:	5b a1       	ldd	r21, Y+35	; 0x23
    309e:	4c a1       	ldd	r20, Y+36	; 0x24
    30a0:	3d a1       	ldd	r19, Y+37	; 0x25
    30a2:	2e a1       	ldd	r18, Y+38	; 0x26
    30a4:	9f a1       	ldd	r25, Y+39	; 0x27
    30a6:	88 a5       	ldd	r24, Y+40	; 0x28
    30a8:	70 93 45 09 	sts	0x0945, r23	; 0x800945 <sg_u64Time>
    30ac:	60 93 46 09 	sts	0x0946, r22	; 0x800946 <sg_u64Time+0x1>
    30b0:	50 93 47 09 	sts	0x0947, r21	; 0x800947 <sg_u64Time+0x2>
    30b4:	40 93 48 09 	sts	0x0948, r20	; 0x800948 <sg_u64Time+0x3>
    30b8:	30 93 49 09 	sts	0x0949, r19	; 0x800949 <sg_u64Time+0x4>
    30bc:	20 93 4a 09 	sts	0x094A, r18	; 0x80094a <sg_u64Time+0x5>
    30c0:	90 93 4b 09 	sts	0x094B, r25	; 0x80094b <sg_u64Time+0x6>
    30c4:	80 93 4c 09 	sts	0x094C, r24	; 0x80094c <sg_u64Time+0x7>
	sei();
    30c8:	78 94       	sei
	
	// Now go tell the hardware about it
	return(RTCWriteHW(&sTimeHW));
    30ca:	ce 01       	movw	r24, r28
    30cc:	4a 96       	adiw	r24, 0x1a	; 26
    30ce:	0e 94 c2 13 	call	0x2784	; 0x2784 <RTCWriteHW>
}
    30d2:	a8 96       	adiw	r28, 0x28	; 40
    30d4:	0f b6       	in	r0, 0x3f	; 63
    30d6:	f8 94       	cli
    30d8:	de bf       	out	0x3e, r29	; 62
    30da:	0f be       	out	0x3f, r0	; 63
    30dc:	cd bf       	out	0x3d, r28	; 61
    30de:	df 91       	pop	r29
    30e0:	cf 91       	pop	r28
    30e2:	1f 91       	pop	r17
    30e4:	0f 91       	pop	r16
    30e6:	08 95       	ret

Disassembly of section .text.RTCInit:

00001678 <RTCInit>:
	sei();
	
	psSrc = gmtime((const time_t *) &u64Time);
	memcpy((void *) psTime, (void *) psSrc, sizeof(*psTime));
	return(true);
}
    1678:	ff 92       	push	r15
    167a:	0f 93       	push	r16
    167c:	1f 93       	push	r17
    167e:	cf 93       	push	r28
    1680:	df 93       	push	r29
    1682:	cd b7       	in	r28, 0x3d	; 61
    1684:	de b7       	in	r29, 0x3e	; 62
    1686:	a1 97       	sbiw	r28, 0x21	; 33
    1688:	0f b6       	in	r0, 0x3f	; 63
    168a:	f8 94       	cli
    168c:	de bf       	out	0x3e, r29	; 62
    168e:	0f be       	out	0x3f, r0	; 63
    1690:	cd bf       	out	0x3d, r28	; 61
    1692:	19 82       	std	Y+1, r1	; 0x01
    1694:	41 e0       	ldi	r20, 0x01	; 1
    1696:	be 01       	movw	r22, r28
    1698:	6f 5f       	subi	r22, 0xFF	; 255
    169a:	7f 4f       	sbci	r23, 0xFF	; 255
    169c:	87 e0       	ldi	r24, 0x07	; 7
    169e:	0e 94 31 1f 	call	0x3e62	; 0x3e62 <RTCWriteRegisters>
    16a2:	18 2f       	mov	r17, r24
    16a4:	88 23       	and	r24, r24
    16a6:	09 f4       	brne	.+2      	; 0x16aa <RTCInit+0x32>
    16a8:	eb c0       	rjmp	.+470    	; 0x1880 <RTCInit+0x208>
    16aa:	80 e8       	ldi	r24, 0x80	; 128
    16ac:	89 83       	std	Y+1, r24	; 0x01
    16ae:	41 e0       	ldi	r20, 0x01	; 1
    16b0:	be 01       	movw	r22, r28
    16b2:	6f 5f       	subi	r22, 0xFF	; 255
    16b4:	7f 4f       	sbci	r23, 0xFF	; 255
    16b6:	80 e0       	ldi	r24, 0x00	; 0
    16b8:	0e 94 31 1f 	call	0x3e62	; 0x3e62 <RTCWriteRegisters>
    16bc:	18 2f       	mov	r17, r24
    16be:	81 11       	cpse	r24, r1
    16c0:	17 c0       	rjmp	.+46     	; 0x16f0 <RTCInit+0x78>
    16c2:	de c0       	rjmp	.+444    	; 0x1880 <RTCInit+0x208>
    16c4:	19 82       	std	Y+1, r1	; 0x01
    16c6:	41 e0       	ldi	r20, 0x01	; 1
    16c8:	be 01       	movw	r22, r28
    16ca:	6f 5f       	subi	r22, 0xFF	; 255
    16cc:	7f 4f       	sbci	r23, 0xFF	; 255
    16ce:	83 e0       	ldi	r24, 0x03	; 3
    16d0:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <RTCReadRegisters>
    16d4:	18 2f       	mov	r17, r24
    16d6:	88 23       	and	r24, r24
    16d8:	09 f4       	brne	.+2      	; 0x16dc <RTCInit+0x64>
    16da:	d2 c0       	rjmp	.+420    	; 0x1880 <RTCInit+0x208>
    16dc:	89 81       	ldd	r24, Y+1	; 0x01
    16de:	85 fd       	sbrc	r24, 5
    16e0:	0a c0       	rjmp	.+20     	; 0x16f6 <RTCInit+0x7e>
    16e2:	60 e0       	ldi	r22, 0x00	; 0
    16e4:	70 e0       	ldi	r23, 0x00	; 0
    16e6:	cb 01       	movw	r24, r22
    16e8:	0e 94 24 21 	call	0x4248	; 0x4248 <Delay>
    16ec:	0f 5f       	subi	r16, 0xFF	; 255
    16ee:	01 c0       	rjmp	.+2      	; 0x16f2 <RTCInit+0x7a>
    16f0:	00 e0       	ldi	r16, 0x00	; 0
    16f2:	08 3c       	cpi	r16, 0xC8	; 200
    16f4:	38 f3       	brcs	.-50     	; 0x16c4 <RTCInit+0x4c>
    16f6:	08 3c       	cpi	r16, 0xC8	; 200
    16f8:	08 f0       	brcs	.+2      	; 0x16fc <RTCInit+0x84>
    16fa:	c2 c0       	rjmp	.+388    	; 0x1880 <RTCInit+0x208>
    16fc:	89 81       	ldd	r24, Y+1	; 0x01
    16fe:	88 60       	ori	r24, 0x08	; 8
    1700:	89 83       	std	Y+1, r24	; 0x01
    1702:	41 e0       	ldi	r20, 0x01	; 1
    1704:	be 01       	movw	r22, r28
    1706:	6f 5f       	subi	r22, 0xFF	; 255
    1708:	7f 4f       	sbci	r23, 0xFF	; 255
    170a:	83 e0       	ldi	r24, 0x03	; 3
    170c:	0e 94 31 1f 	call	0x3e62	; 0x3e62 <RTCWriteRegisters>
    1710:	18 2f       	mov	r17, r24
    1712:	88 23       	and	r24, r24
    1714:	09 f4       	brne	.+2      	; 0x1718 <RTCInit+0xa0>
    1716:	b4 c0       	rjmp	.+360    	; 0x1880 <RTCInit+0x208>
    1718:	41 e0       	ldi	r20, 0x01	; 1
    171a:	be 01       	movw	r22, r28
    171c:	6f 5f       	subi	r22, 0xFF	; 255
    171e:	7f 4f       	sbci	r23, 0xFF	; 255
    1720:	82 e0       	ldi	r24, 0x02	; 2
    1722:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <RTCReadRegisters>
    1726:	18 2f       	mov	r17, r24
    1728:	88 23       	and	r24, r24
    172a:	09 f4       	brne	.+2      	; 0x172e <RTCInit+0xb6>
    172c:	a9 c0       	rjmp	.+338    	; 0x1880 <RTCInit+0x208>
    172e:	89 81       	ldd	r24, Y+1	; 0x01
    1730:	8f 7b       	andi	r24, 0xBF	; 191
    1732:	89 83       	std	Y+1, r24	; 0x01
    1734:	41 e0       	ldi	r20, 0x01	; 1
    1736:	be 01       	movw	r22, r28
    1738:	6f 5f       	subi	r22, 0xFF	; 255
    173a:	7f 4f       	sbci	r23, 0xFF	; 255
    173c:	82 e0       	ldi	r24, 0x02	; 2
    173e:	0e 94 31 1f 	call	0x3e62	; 0x3e62 <RTCWriteRegisters>
    1742:	18 2f       	mov	r17, r24
    1744:	88 23       	and	r24, r24
    1746:	09 f4       	brne	.+2      	; 0x174a <RTCInit+0xd2>
    1748:	9b c0       	rjmp	.+310    	; 0x1880 <RTCInit+0x208>
    174a:	ce 01       	movw	r24, r28
    174c:	02 96       	adiw	r24, 0x02	; 2
    174e:	0e 94 bd 14 	call	0x297a	; 0x297a <RTCReadHW>
    1752:	18 2f       	mov	r17, r24
    1754:	88 23       	and	r24, r24
    1756:	09 f4       	brne	.+2      	; 0x175a <RTCInit+0xe2>
    1758:	93 c0       	rjmp	.+294    	; 0x1880 <RTCInit+0x208>
    175a:	8a 81       	ldd	r24, Y+2	; 0x02
    175c:	8c 33       	cpi	r24, 0x3C	; 60
    175e:	10 f4       	brcc	.+4      	; 0x1764 <RTCInit+0xec>
    1760:	10 e0       	ldi	r17, 0x00	; 0
    1762:	01 c0       	rjmp	.+2      	; 0x1766 <RTCInit+0xee>
    1764:	11 e0       	ldi	r17, 0x01	; 1
    1766:	8b 81       	ldd	r24, Y+3	; 0x03
    1768:	8c 33       	cpi	r24, 0x3C	; 60
    176a:	08 f0       	brcs	.+2      	; 0x176e <RTCInit+0xf6>
    176c:	11 e0       	ldi	r17, 0x01	; 1
    176e:	8c 81       	ldd	r24, Y+4	; 0x04
    1770:	8c 33       	cpi	r24, 0x3C	; 60
    1772:	08 f0       	brcs	.+2      	; 0x1776 <RTCInit+0xfe>
    1774:	11 e0       	ldi	r17, 0x01	; 1
    1776:	8d 81       	ldd	r24, Y+5	; 0x05
    1778:	81 50       	subi	r24, 0x01	; 1
    177a:	87 30       	cpi	r24, 0x07	; 7
    177c:	08 f0       	brcs	.+2      	; 0x1780 <RTCInit+0x108>
    177e:	11 e0       	ldi	r17, 0x01	; 1
    1780:	2f 81       	ldd	r18, Y+7	; 0x07
    1782:	8f ef       	ldi	r24, 0xFF	; 255
    1784:	82 0f       	add	r24, r18
    1786:	8c 30       	cpi	r24, 0x0C	; 12
    1788:	18 f5       	brcc	.+70     	; 0x17d0 <RTCInit+0x158>
    178a:	0e 81       	ldd	r16, Y+6	; 0x06
    178c:	00 23       	and	r16, r16
    178e:	11 f1       	breq	.+68     	; 0x17d4 <RTCInit+0x15c>
    1790:	82 2f       	mov	r24, r18
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	01 97       	sbiw	r24, 0x01	; 1
    1796:	09 2e       	mov	r0, r25
    1798:	00 0c       	add	r0, r0
    179a:	aa 0b       	sbc	r26, r26
    179c:	87 5d       	subi	r24, 0xD7	; 215
    179e:	9c 4f       	sbci	r25, 0xFC	; 252
    17a0:	af 4f       	sbci	r26, 0xFF	; 255
    17a2:	fc 01       	movw	r30, r24
    17a4:	f4 90       	lpm	r15, Z
    17a6:	a7 fd       	sbrc	r26, 7
    17a8:	f0 80       	ld	r15, Z
    17aa:	22 30       	cpi	r18, 0x02	; 2
    17ac:	71 f4       	brne	.+28     	; 0x17ca <RTCInit+0x152>
    17ae:	88 85       	ldd	r24, Y+8	; 0x08
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	84 31       	cpi	r24, 0x14	; 20
    17b4:	91 05       	cpc	r25, r1
    17b6:	18 f4       	brcc	.+6      	; 0x17be <RTCInit+0x146>
    17b8:	8c 5c       	subi	r24, 0xCC	; 204
    17ba:	97 4f       	sbci	r25, 0xF7	; 247
    17bc:	02 c0       	rjmp	.+4      	; 0x17c2 <RTCInit+0x14a>
    17be:	80 53       	subi	r24, 0x30	; 48
    17c0:	98 4f       	sbci	r25, 0xF8	; 248
    17c2:	0e 94 f9 22 	call	0x45f2	; 0x45f2 <IsLeapYear>
    17c6:	81 11       	cpse	r24, r1
    17c8:	f3 94       	inc	r15
    17ca:	f0 16       	cp	r15, r16
    17cc:	28 f0       	brcs	.+10     	; 0x17d8 <RTCInit+0x160>
    17ce:	05 c0       	rjmp	.+10     	; 0x17da <RTCInit+0x162>
    17d0:	11 e0       	ldi	r17, 0x01	; 1
    17d2:	03 c0       	rjmp	.+6      	; 0x17da <RTCInit+0x162>
    17d4:	11 e0       	ldi	r17, 0x01	; 1
    17d6:	01 c0       	rjmp	.+2      	; 0x17da <RTCInit+0x162>
    17d8:	11 e0       	ldi	r17, 0x01	; 1
    17da:	11 23       	and	r17, r17
    17dc:	b9 f0       	breq	.+46     	; 0x180c <RTCInit+0x194>
    17de:	1a 82       	std	Y+2, r1	; 0x02
    17e0:	1b 82       	std	Y+3, r1	; 0x03
    17e2:	1c 82       	std	Y+4, r1	; 0x04
    17e4:	81 e0       	ldi	r24, 0x01	; 1
    17e6:	8e 83       	std	Y+6, r24	; 0x06
    17e8:	8f 83       	std	Y+7, r24	; 0x07
    17ea:	88 e1       	ldi	r24, 0x18	; 24
    17ec:	88 87       	std	Y+8, r24	; 0x08
    17ee:	ce 01       	movw	r24, r28
    17f0:	02 96       	adiw	r24, 0x02	; 2
    17f2:	0e 94 c2 13 	call	0x2784	; 0x2784 <RTCWriteHW>
    17f6:	18 2f       	mov	r17, r24
    17f8:	88 23       	and	r24, r24
    17fa:	09 f4       	brne	.+2      	; 0x17fe <RTCInit+0x186>
    17fc:	41 c0       	rjmp	.+130    	; 0x1880 <RTCInit+0x208>
    17fe:	ce 01       	movw	r24, r28
    1800:	02 96       	adiw	r24, 0x02	; 2
    1802:	0e 94 bd 14 	call	0x297a	; 0x297a <RTCReadHW>
    1806:	18 2f       	mov	r17, r24
    1808:	88 23       	and	r24, r24
    180a:	d1 f1       	breq	.+116    	; 0x1880 <RTCInit+0x208>
    180c:	be 01       	movw	r22, r28
    180e:	67 5f       	subi	r22, 0xF7	; 247
    1810:	7f 4f       	sbci	r23, 0xFF	; 255
    1812:	ce 01       	movw	r24, r28
    1814:	02 96       	adiw	r24, 0x02	; 2
    1816:	0e 94 93 1d 	call	0x3b26	; 0x3b26 <HWToStructTM>
    181a:	ce 01       	movw	r24, r28
    181c:	09 96       	adiw	r24, 0x09	; 9
    181e:	0e 94 91 1c 	call	0x3922	; 0x3922 <mktime>
    1822:	8b 01       	movw	r16, r22
    1824:	9c 01       	movw	r18, r24
    1826:	f8 94       	cli
    1828:	00 93 45 09 	sts	0x0945, r16	; 0x800945 <sg_u64Time>
    182c:	10 93 46 09 	sts	0x0946, r17	; 0x800946 <sg_u64Time+0x1>
    1830:	20 93 47 09 	sts	0x0947, r18	; 0x800947 <sg_u64Time+0x2>
    1834:	30 93 48 09 	sts	0x0948, r19	; 0x800948 <sg_u64Time+0x3>
    1838:	10 92 49 09 	sts	0x0949, r1	; 0x800949 <sg_u64Time+0x4>
    183c:	10 92 4a 09 	sts	0x094A, r1	; 0x80094a <sg_u64Time+0x5>
    1840:	10 92 4b 09 	sts	0x094B, r1	; 0x80094b <sg_u64Time+0x6>
    1844:	10 92 4c 09 	sts	0x094C, r1	; 0x80094c <sg_u64Time+0x7>
    1848:	78 94       	sei
    184a:	87 b1       	in	r24, 0x07	; 7
    184c:	8e 7f       	andi	r24, 0xFE	; 254
    184e:	87 b9       	out	0x07, r24	; 7
    1850:	88 b1       	in	r24, 0x08	; 8
    1852:	81 60       	ori	r24, 0x01	; 1
    1854:	88 b9       	out	0x08, r24	; 8
    1856:	41 e0       	ldi	r20, 0x01	; 1
    1858:	be 01       	movw	r22, r28
    185a:	6f 5f       	subi	r22, 0xFF	; 255
    185c:	7f 4f       	sbci	r23, 0xFF	; 255
    185e:	87 e0       	ldi	r24, 0x07	; 7
    1860:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <RTCReadRegisters>
    1864:	18 2f       	mov	r17, r24
    1866:	88 23       	and	r24, r24
    1868:	59 f0       	breq	.+22     	; 0x1880 <RTCInit+0x208>
    186a:	89 81       	ldd	r24, Y+1	; 0x01
    186c:	80 64       	ori	r24, 0x40	; 64
    186e:	89 83       	std	Y+1, r24	; 0x01
    1870:	41 e0       	ldi	r20, 0x01	; 1
    1872:	be 01       	movw	r22, r28
    1874:	6f 5f       	subi	r22, 0xFF	; 255
    1876:	7f 4f       	sbci	r23, 0xFF	; 255
    1878:	87 e0       	ldi	r24, 0x07	; 7
    187a:	0e 94 31 1f 	call	0x3e62	; 0x3e62 <RTCWriteRegisters>
    187e:	18 2f       	mov	r17, r24
    1880:	81 2f       	mov	r24, r17
    1882:	a1 96       	adiw	r28, 0x21	; 33
    1884:	0f b6       	in	r0, 0x3f	; 63
    1886:	f8 94       	cli
    1888:	de bf       	out	0x3e, r29	; 62
    188a:	0f be       	out	0x3f, r0	; 63
    188c:	cd bf       	out	0x3d, r28	; 61
    188e:	df 91       	pop	r29
    1890:	cf 91       	pop	r28
    1892:	1f 91       	pop	r17
    1894:	0f 91       	pop	r16
    1896:	ff 90       	pop	r15
    1898:	08 95       	ret

Disassembly of section .text.SDSetCS:

00004d7a <SDSetCS>:
static uint8_t sg_u8CSD[16];

// This will provide a !CS assertion or deassertion with pre/postamble clock
static void SDSetCS(bool bAsserted)
{
	if (bAsserted)
    4d7a:	88 23       	and	r24, r24
    4d7c:	21 f0       	breq	.+8      	; 0x4d86 <SDSetCS+0xc>
	{
		SD_CS_ASSERT();
    4d7e:	88 b1       	in	r24, 0x08	; 8
    4d80:	8f 7b       	andi	r24, 0xBF	; 191
    4d82:	88 b9       	out	0x08, r24	; 8
    4d84:	08 95       	ret
	}
	else
	{
		SD_CS_DEASSERT();
    4d86:	88 b1       	in	r24, 0x08	; 8
    4d88:	80 64       	ori	r24, 0x40	; 64
    4d8a:	88 b9       	out	0x08, r24	; 8
    4d8c:	08 95       	ret

Disassembly of section .text.SDPowerup:

00004514 <SDPowerup>:

// Sends SD powerup sequence to card and attempts to initialize it
static void SDPowerup(void)
{
	// Set SPI baud rate to (SD_SPEED_SLOW, which is the max for the init sequence)
	(void) SPISetBaudRate(SD_SPEED_SLOW);
    4514:	60 e8       	ldi	r22, 0x80	; 128
    4516:	7a e1       	ldi	r23, 0x1A	; 26
    4518:	86 e0       	ldi	r24, 0x06	; 6
    451a:	90 e0       	ldi	r25, 0x00	; 0
    451c:	0e 94 48 17 	call	0x2e90	; 0x2e90 <SPISetBaudRate>
	
	// Deassert chip select
	SD_CS_DEASSERT();
    4520:	88 b1       	in	r24, 0x08	; 8
    4522:	80 64       	ori	r24, 0x40	; 64
    4524:	88 b9       	out	0x08, r24	; 8
	
	// Delay time after possible deassertion (2ms)
	Delay(2000);
    4526:	60 ed       	ldi	r22, 0xD0	; 208
    4528:	77 e0       	ldi	r23, 0x07	; 7
    452a:	80 e0       	ldi	r24, 0x00	; 0
    452c:	90 e0       	ldi	r25, 0x00	; 0
    452e:	0e 94 24 21 	call	0x4248	; 0x4248 <Delay>
	
	// Send 74/80 bits of 0xff as a reset (80 bits required since we're byte-
	// sized transactions)
	SPIWritePattern(0xff,
    4532:	40 e1       	ldi	r20, 0x10	; 16
    4534:	50 e0       	ldi	r21, 0x00	; 0
    4536:	6f ef       	ldi	r22, 0xFF	; 255
    4538:	70 e0       	ldi	r23, 0x00	; 0
    453a:	82 e0       	ldi	r24, 0x02	; 2
    453c:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <SPITransaction>
				    128/8);

	// Delay time after write
	Delay(2000);
    4540:	60 ed       	ldi	r22, 0xD0	; 208
    4542:	77 e0       	ldi	r23, 0x07	; 7
    4544:	80 e0       	ldi	r24, 0x00	; 0
    4546:	90 e0       	ldi	r25, 0x00	; 0
    4548:	0e 94 24 21 	call	0x4248	; 0x4248 <Delay>
    454c:	08 95       	ret

Disassembly of section .text.SDCommand:

000033e4 <SDCommand>:
#define CMD8_CRC    0x87

// Sends a command to the SD card, including argument an CRC
static uint8_t SDCommand(uint8_t u8Cmd,
						 uint32_t u32Arg)
{
    33e4:	df 92       	push	r13
    33e6:	ef 92       	push	r14
    33e8:	ff 92       	push	r15
    33ea:	0f 93       	push	r16
    33ec:	1f 93       	push	r17
    33ee:	cf 93       	push	r28
    33f0:	df 93       	push	r29
    33f2:	cd b7       	in	r28, 0x3d	; 61
    33f4:	de b7       	in	r29, 0x3e	; 62
    33f6:	27 97       	sbiw	r28, 0x07	; 7
    33f8:	0f b6       	in	r0, 0x3f	; 63
    33fa:	f8 94       	cli
    33fc:	de bf       	out	0x3e, r29	; 62
    33fe:	0f be       	out	0x3f, r0	; 63
    3400:	cd bf       	out	0x3d, r28	; 61
    3402:	18 2f       	mov	r17, r24
    3404:	04 2f       	mov	r16, r20
    3406:	f5 2e       	mov	r15, r21
    3408:	e6 2e       	mov	r14, r22
    340a:	d7 2e       	mov	r13, r23
	uint8_t u8Buffer[sizeof(u8Cmd) + sizeof(u32Arg) + sizeof(u8CRC)];
	uint8_t u8Response;
	uint8_t u8Count;
	
	// If this is an ACMD, prefix a CMD55
	if (u8Cmd & 0x80)
    340c:	88 23       	and	r24, r24
    340e:	4c f4       	brge	.+18     	; 0x3422 <SDCommand+0x3e>
	{
		u8Response = SDCommand(CMD55,
    3410:	40 e0       	ldi	r20, 0x00	; 0
    3412:	50 e0       	ldi	r21, 0x00	; 0
    3414:	ba 01       	movw	r22, r20
    3416:	87 e3       	ldi	r24, 0x37	; 55
    3418:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <SDCommand>
    341c:	8f 83       	std	Y+7, r24	; 0x07
							   CMD55_ARG);
							   
		if (u8Response > 1)
    341e:	82 30       	cpi	r24, 0x02	; 2
    3420:	40 f5       	brcc	.+80     	; 0x3472 <SDCommand+0x8e>
			return(u8Response);
		}
	}
	
	// SD Command (OR in 0x40 so bit 47 is always a 1
	u8Buffer[0] = (u8Cmd & 0x7f) | 0x40;
    3422:	81 2f       	mov	r24, r17
    3424:	8f 73       	andi	r24, 0x3F	; 63
    3426:	80 64       	ori	r24, 0x40	; 64
    3428:	89 83       	std	Y+1, r24	; 0x01
	
	// 32 Bits of argument
	u8Buffer[1] = (uint8_t) (u32Arg >> 24);
    342a:	da 82       	std	Y+2, r13	; 0x02
	u8Buffer[2] = (uint8_t) (u32Arg >> 16);
    342c:	eb 82       	std	Y+3, r14	; 0x03
	u8Buffer[3] = (uint8_t) (u32Arg >> 8);
    342e:	fc 82       	std	Y+4, r15	; 0x04
	u8Buffer[4] = (uint8_t) (u32Arg >> 0);
    3430:	0d 83       	std	Y+5, r16	; 0x05
	
	// Valid CRCs for specific commands
	u8CRC = 0;
	if (CMD0 == u8Cmd)
    3432:	11 23       	and	r17, r17
    3434:	11 f0       	breq	.+4      	; 0x343a <SDCommand+0x56>
	u8Buffer[2] = (uint8_t) (u32Arg >> 16);
	u8Buffer[3] = (uint8_t) (u32Arg >> 8);
	u8Buffer[4] = (uint8_t) (u32Arg >> 0);
	
	// Valid CRCs for specific commands
	u8CRC = 0;
    3436:	80 e0       	ldi	r24, 0x00	; 0
    3438:	01 c0       	rjmp	.+2      	; 0x343c <SDCommand+0x58>
	if (CMD0 == u8Cmd)
	{
		u8CRC = 0x95;
    343a:	85 e9       	ldi	r24, 0x95	; 149
	}
	
	if (CMD8 == u8Cmd)
    343c:	18 30       	cpi	r17, 0x08	; 8
    343e:	09 f4       	brne	.+2      	; 0x3442 <SDCommand+0x5e>
	{
		u8CRC = 0x87;
    3440:	87 e8       	ldi	r24, 0x87	; 135
	}
	
	// Now the CRC - Bit 0 means "ignore CRC"
	u8Buffer[5] = (uint8_t) (u8CRC | 0x01);
    3442:	81 60       	ori	r24, 0x01	; 1
    3444:	8e 83       	std	Y+6, r24	; 0x06
	
	// Send all bytes to the SD card
	SPIWrite(u8Buffer,
    3446:	46 e0       	ldi	r20, 0x06	; 6
    3448:	50 e0       	ldi	r21, 0x00	; 0
    344a:	be 01       	movw	r22, r28
    344c:	6f 5f       	subi	r22, 0xFF	; 255
    344e:	7f 4f       	sbci	r23, 0xFF	; 255
    3450:	81 e0       	ldi	r24, 0x01	; 1
    3452:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <SPITransaction>
			 sizeof(u8Buffer));
			 
	u8Count = 10;
    3456:	1a e0       	ldi	r17, 0x0A	; 10
	
	do 
	{
		SPIRead(&u8Response,
    3458:	41 e0       	ldi	r20, 0x01	; 1
    345a:	50 e0       	ldi	r21, 0x00	; 0
    345c:	be 01       	movw	r22, r28
    345e:	69 5f       	subi	r22, 0xF9	; 249
    3460:	7f 4f       	sbci	r23, 0xFF	; 255
    3462:	83 e0       	ldi	r24, 0x03	; 3
    3464:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <SPITransaction>
				sizeof(u8Response));
	} while ((u8Response & 0x80) && --u8Count);
    3468:	8f 81       	ldd	r24, Y+7	; 0x07
    346a:	88 23       	and	r24, r24
    346c:	14 f4       	brge	.+4      	; 0x3472 <SDCommand+0x8e>
    346e:	11 50       	subi	r17, 0x01	; 1
    3470:	99 f7       	brne	.-26     	; 0x3458 <SDCommand+0x74>
	
	return(u8Response);
}
    3472:	27 96       	adiw	r28, 0x07	; 7
    3474:	0f b6       	in	r0, 0x3f	; 63
    3476:	f8 94       	cli
    3478:	de bf       	out	0x3e, r29	; 62
    347a:	0f be       	out	0x3f, r0	; 63
    347c:	cd bf       	out	0x3d, r28	; 61
    347e:	df 91       	pop	r29
    3480:	cf 91       	pop	r28
    3482:	1f 91       	pop	r17
    3484:	0f 91       	pop	r16
    3486:	ff 90       	pop	r15
    3488:	ef 90       	pop	r14
    348a:	df 90       	pop	r13
    348c:	08 95       	ret

Disassembly of section .text.SDGoIdle:

00004c10 <SDGoIdle>:
			sizeof(uint32_t));
}

// SD - Go idle!
static uint8_t SDGoIdle(uint8_t *pu8Response)
{
    4c10:	cf 93       	push	r28
	uint8_t u8Response;
	
	SDSetCS(true);
    4c12:	81 e0       	ldi	r24, 0x01	; 1
    4c14:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <SDSetCS>
	
	// Send our CMD0 (go idle)
	u8Response = SDCommand(CMD0,
    4c18:	40 e0       	ldi	r20, 0x00	; 0
    4c1a:	50 e0       	ldi	r21, 0x00	; 0
    4c1c:	ba 01       	movw	r22, r20
    4c1e:	80 e0       	ldi	r24, 0x00	; 0
    4c20:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <SDCommand>
    4c24:	c8 2f       	mov	r28, r24
						   CMD0_ARG);
						   
	SDSetCS(false);
    4c26:	80 e0       	ldi	r24, 0x00	; 0
    4c28:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <SDSetCS>

	return(u8Response);
}
    4c2c:	8c 2f       	mov	r24, r28
    4c2e:	cf 91       	pop	r28
    4c30:	08 95       	ret

Disassembly of section .text.SDSendOpCondition:

00004626 <SDSendOpCondition>:
#define ACMD41_CRC  0x00

// Send operation condition
static uint8_t SDSendOpCondition(uint8_t *pu8Response,
								 uint32_t u32Arg)
{
    4626:	cf 92       	push	r12
    4628:	df 92       	push	r13
    462a:	ef 92       	push	r14
    462c:	ff 92       	push	r15
    462e:	cf 93       	push	r28
    4630:	6a 01       	movw	r12, r20
    4632:	7b 01       	movw	r14, r22
	uint8_t u8Response;
	
	// Assert chip select
	SDSetCS(true);
    4634:	81 e0       	ldi	r24, 0x01	; 1
    4636:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <SDSetCS>
	
	// Send the app command
	u8Response = SDCommand(ACMD41,
    463a:	b7 01       	movw	r22, r14
    463c:	a6 01       	movw	r20, r12
    463e:	89 ea       	ldi	r24, 0xA9	; 169
    4640:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <SDCommand>
    4644:	c8 2f       	mov	r28, r24
						   u32Arg);
	// Deassert chip select
	SDSetCS(false);
    4646:	80 e0       	ldi	r24, 0x00	; 0
    4648:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <SDSetCS>
	
	return(u8Response);
}
    464c:	8c 2f       	mov	r24, r28
    464e:	cf 91       	pop	r28
    4650:	ff 90       	pop	r15
    4652:	ef 90       	pop	r14
    4654:	df 90       	pop	r13
    4656:	cf 90       	pop	r12
    4658:	08 95       	ret

Disassembly of section .text.SDSendOpConditionArg:

0000409e <SDSendOpConditionArg>:
	return(u8Response);
}

static uint8_t SDSendOpConditionArg(uint8_t *pu8Resp,
									uint32_t u32Arg)
{
    409e:	cf 92       	push	r12
    40a0:	df 92       	push	r13
    40a2:	ef 92       	push	r14
    40a4:	ff 92       	push	r15
    40a6:	0f 93       	push	r16
    40a8:	1f 93       	push	r17
    40aa:	cf 93       	push	r28
    40ac:	df 93       	push	r29
    40ae:	8c 01       	movw	r16, r24
    40b0:	6a 01       	movw	r12, r20
    40b2:	7b 01       	movw	r14, r22
	uint8_t u8Attempts;
	uint8_t u8Response;
	
	u8Attempts = 0;
    40b4:	c0 e0       	ldi	r28, 0x00	; 0
		
	// Loop until it comes alive - if it comes alive. Put the card in idle state.
	while (u8Attempts < SD_GO_IDLE_RETRIES)
    40b6:	0f c0       	rjmp	.+30     	; 0x40d6 <SDSendOpConditionArg+0x38>
	{
		u8Response = SDSendOpCondition(pu8Resp,
    40b8:	b7 01       	movw	r22, r14
    40ba:	a6 01       	movw	r20, r12
    40bc:	c8 01       	movw	r24, r16
    40be:	0e 94 13 23 	call	0x4626	; 0x4626 <SDSendOpCondition>
    40c2:	d8 2f       	mov	r29, r24
									   u32Arg);
		if (0 == u8Response)
    40c4:	88 23       	and	r24, r24
    40c6:	49 f0       	breq	.+18     	; 0x40da <SDSendOpConditionArg+0x3c>
		{
			break;
		}
			
		// Give it a little time to settle
		Delay(10000);
    40c8:	60 e1       	ldi	r22, 0x10	; 16
    40ca:	77 e2       	ldi	r23, 0x27	; 39
    40cc:	80 e0       	ldi	r24, 0x00	; 0
    40ce:	90 e0       	ldi	r25, 0x00	; 0
    40d0:	0e 94 24 21 	call	0x4248	; 0x4248 <Delay>
		u8Attempts++;
    40d4:	cf 5f       	subi	r28, 0xFF	; 255
	uint8_t u8Response;
	
	u8Attempts = 0;
		
	// Loop until it comes alive - if it comes alive. Put the card in idle state.
	while (u8Attempts < SD_GO_IDLE_RETRIES)
    40d6:	c4 36       	cpi	r28, 0x64	; 100
    40d8:	78 f3       	brcs	.-34     	; 0x40b8 <SDSendOpConditionArg+0x1a>
		Delay(10000);
		u8Attempts++;
	}

	// If we've retried too much, bail out. We're done.
	if (SD_GO_IDLE_RETRIES == u8Attempts)
    40da:	c4 36       	cpi	r28, 0x64	; 100
    40dc:	09 f4       	brne	.+2      	; 0x40e0 <SDSendOpConditionArg+0x42>
	{
		u8Response = 0x80;
    40de:	d0 e8       	ldi	r29, 0x80	; 128
	}
	
	return(u8Response);
}
    40e0:	8d 2f       	mov	r24, r29
    40e2:	df 91       	pop	r29
    40e4:	cf 91       	pop	r28
    40e6:	1f 91       	pop	r17
    40e8:	0f 91       	pop	r16
    40ea:	ff 90       	pop	r15
    40ec:	ef 90       	pop	r14
    40ee:	df 90       	pop	r13
    40f0:	cf 90       	pop	r12
    40f2:	08 95       	ret

Disassembly of section .text.SDWaitResponse7:

00004e44 <SDWaitResponse7>:

// This will return true if a response 7 was received, otherwise false
static void SDWaitResponse7(uint8_t *pu8ResponseByte)
{
	// Go read the remaining 4 bytes
	SPIRead(pu8ResponseByte,
    4e44:	44 e0       	ldi	r20, 0x04	; 4
    4e46:	50 e0       	ldi	r21, 0x00	; 0
    4e48:	bc 01       	movw	r22, r24
    4e4a:	83 e0       	ldi	r24, 0x03	; 3
    4e4c:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <SPITransaction>
    4e50:	08 95       	ret

Disassembly of section .text.SDSendInterfaceCondition:

0000465a <SDSendInterfaceCondition>:
	return(u8Response);
}

// Send interface condition
static uint8_t SDSendInterfaceCondition(uint8_t *pu8Response)
{
    465a:	0f 93       	push	r16
    465c:	1f 93       	push	r17
    465e:	cf 93       	push	r28
    4660:	8c 01       	movw	r16, r24
	uint8_t u8Response;
	
	SDSetCS(true);
    4662:	81 e0       	ldi	r24, 0x01	; 1
    4664:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <SDSetCS>
	
	// Send our CMD8 Send interface condition
	u8Response = SDCommand(CMD8,
    4668:	4a ea       	ldi	r20, 0xAA	; 170
    466a:	51 e0       	ldi	r21, 0x01	; 1
    466c:	60 e0       	ldi	r22, 0x00	; 0
    466e:	70 e0       	ldi	r23, 0x00	; 0
    4670:	88 e0       	ldi	r24, 0x08	; 8
    4672:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <SDCommand>
    4676:	c8 2f       	mov	r28, r24
						   CMD8_ARG);
						   
	SDWaitResponse7(pu8Response);
    4678:	c8 01       	movw	r24, r16
    467a:	0e 94 22 27 	call	0x4e44	; 0x4e44 <SDWaitResponse7>
		
	SDSetCS(false);
    467e:	80 e0       	ldi	r24, 0x00	; 0
    4680:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <SDSetCS>

	return(u8Response);
}
    4684:	8c 2f       	mov	r24, r28
    4686:	cf 91       	pop	r28
    4688:	1f 91       	pop	r17
    468a:	0f 91       	pop	r16
    468c:	08 95       	ret

Disassembly of section .text.SDReadOCR:

0000468e <SDReadOCR>:
#define CMD58_ARG   0x00000000
#define CMD58_CRC   0x00

// Go read the OCR
static uint8_t SDReadOCR(uint8_t *pu8Response)
{
    468e:	0f 93       	push	r16
    4690:	1f 93       	push	r17
    4692:	cf 93       	push	r28
    4694:	8c 01       	movw	r16, r24
	uint8_t u8Response;
	
	// Assert chip select
	SDSetCS(true);
    4696:	81 e0       	ldi	r24, 0x01	; 1
    4698:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <SDSetCS>
	
	// Send the app command
	u8Response = SDCommand(CMD58,
    469c:	40 e0       	ldi	r20, 0x00	; 0
    469e:	50 e0       	ldi	r21, 0x00	; 0
    46a0:	ba 01       	movw	r22, r20
    46a2:	8a e3       	ldi	r24, 0x3A	; 58
    46a4:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <SDCommand>
    46a8:	c8 2f       	mov	r28, r24
						   CMD58_ARG);

	// Read response
	SDWaitResponse7(pu8Response);
    46aa:	c8 01       	movw	r24, r16
    46ac:	0e 94 22 27 	call	0x4e44	; 0x4e44 <SDWaitResponse7>

	// Deassert chip select
	SDSetCS(false);
    46b0:	80 e0       	ldi	r24, 0x00	; 0
    46b2:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <SDSetCS>
	
	return(u8Response);
}
    46b6:	8c 2f       	mov	r24, r28
    46b8:	cf 91       	pop	r28
    46ba:	1f 91       	pop	r17
    46bc:	0f 91       	pop	r16
    46be:	08 95       	ret

Disassembly of section .text.SDReadCSD:

00003ba2 <SDReadCSD>:
#define CMD9_ARG    0x000000000
#define CMD9_CRC    0x00

// Read CSD (card specific data) - CSD is 128 bits - see the SD spec for details.
static uint8_t SDReadCSD(uint8_t *pu8CSD)
{
    3ba2:	ef 92       	push	r14
    3ba4:	ff 92       	push	r15
    3ba6:	0f 93       	push	r16
    3ba8:	1f 93       	push	r17
    3baa:	cf 93       	push	r28
    3bac:	df 93       	push	r29
    3bae:	0f 92       	push	r0
    3bb0:	cd b7       	in	r28, 0x3d	; 61
    3bb2:	de b7       	in	r29, 0x3e	; 62
    3bb4:	7c 01       	movw	r14, r24
	uint8_t u8Response;
	uint8_t u8CmdResponse;
	uint8_t u8Count = 8;
	
	SDSetCS(true);
    3bb6:	81 e0       	ldi	r24, 0x01	; 1
    3bb8:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <SDSetCS>
	
	// Send our CMD9 (read CSD)
	u8CmdResponse = SDCommand(CMD9,
    3bbc:	40 e0       	ldi	r20, 0x00	; 0
    3bbe:	50 e0       	ldi	r21, 0x00	; 0
    3bc0:	ba 01       	movw	r22, r20
    3bc2:	89 e0       	ldi	r24, 0x09	; 9
    3bc4:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <SDCommand>
    3bc8:	08 2f       	mov	r16, r24
							  CMD9_ARG);
	
	// Success! Let's get a response
	if (u8CmdResponse)
    3bca:	81 11       	cpse	r24, r1
    3bcc:	1c c0       	rjmp	.+56     	; 0x3c06 <SDReadCSD+0x64>
    3bce:	18 e0       	ldi	r17, 0x08	; 8
    3bd0:	01 c0       	rjmp	.+2      	; 0x3bd4 <SDReadCSD+0x32>
	do 
	{
		SPIRead(&u8Response,
			    sizeof(u8Response));
	} while ((u8Response != SD_START_TOKEN) &&
			 (u8Count--));
    3bd2:	18 2f       	mov	r17, r24
	}
	
	// Wait until SD_START_TOKEN (start of data sector). We should easily see it in a few bytes.
	do 
	{
		SPIRead(&u8Response,
    3bd4:	41 e0       	ldi	r20, 0x01	; 1
    3bd6:	50 e0       	ldi	r21, 0x00	; 0
    3bd8:	be 01       	movw	r22, r28
    3bda:	6f 5f       	subi	r22, 0xFF	; 255
    3bdc:	7f 4f       	sbci	r23, 0xFF	; 255
    3bde:	83 e0       	ldi	r24, 0x03	; 3
    3be0:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <SPITransaction>
			    sizeof(u8Response));
	} while ((u8Response != SD_START_TOKEN) &&
    3be4:	89 81       	ldd	r24, Y+1	; 0x01
			 (u8Count--));
    3be6:	8e 3f       	cpi	r24, 0xFE	; 254
    3be8:	29 f0       	breq	.+10     	; 0x3bf4 <SDReadCSD+0x52>
    3bea:	8f ef       	ldi	r24, 0xFF	; 255
    3bec:	81 0f       	add	r24, r17
	// Wait until SD_START_TOKEN (start of data sector). We should easily see it in a few bytes.
	do 
	{
		SPIRead(&u8Response,
			    sizeof(u8Response));
	} while ((u8Response != SD_START_TOKEN) &&
    3bee:	11 11       	cpse	r17, r1
    3bf0:	f0 cf       	rjmp	.-32     	; 0x3bd2 <SDReadCSD+0x30>
    3bf2:	01 c0       	rjmp	.+2      	; 0x3bf6 <SDReadCSD+0x54>
    3bf4:	81 2f       	mov	r24, r17
			 (u8Count--));
			 
	// If we haven't seen it in u8Count bytes, then error the call
	if (0 == u8Count)
    3bf6:	88 23       	and	r24, r24
    3bf8:	31 f0       	breq	.+12     	; 0x3c06 <SDReadCSD+0x64>
	{
		goto errorExit;
	}
	
	// Go read the remaining 16 bytes
	SPIRead(pu8CSD,
    3bfa:	40 e1       	ldi	r20, 0x10	; 16
    3bfc:	50 e0       	ldi	r21, 0x00	; 0
    3bfe:	b7 01       	movw	r22, r14
    3c00:	83 e0       	ldi	r24, 0x03	; 3
    3c02:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <SPITransaction>
		    16);
	
errorExit:	
	SDSetCS(false);
    3c06:	80 e0       	ldi	r24, 0x00	; 0
    3c08:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <SDSetCS>
	return(u8CmdResponse);
	
}
    3c0c:	80 2f       	mov	r24, r16
    3c0e:	0f 90       	pop	r0
    3c10:	df 91       	pop	r29
    3c12:	cf 91       	pop	r28
    3c14:	1f 91       	pop	r17
    3c16:	0f 91       	pop	r16
    3c18:	ff 90       	pop	r15
    3c1a:	ef 90       	pop	r14
    3c1c:	08 95       	ret

Disassembly of section .text.SDReceiveDataBlock:

0000378a <SDReceiveDataBlock>:
}

// Receives a datablock during the data phase which may take some time
static bool SDReceiveDataBlock(uint8_t *pu8Buffer,
							   uint16_t u16RXCount)
{
    378a:	cf 92       	push	r12
    378c:	df 92       	push	r13
    378e:	ef 92       	push	r14
    3790:	ff 92       	push	r15
    3792:	0f 93       	push	r16
    3794:	1f 93       	push	r17
    3796:	cf 93       	push	r28
    3798:	df 93       	push	r29
    379a:	0f 92       	push	r0
    379c:	cd b7       	in	r28, 0x3d	; 61
    379e:	de b7       	in	r29, 0x3e	; 62
    37a0:	7c 01       	movw	r14, r24
    37a2:	6b 01       	movw	r12, r22
	uint8_t u8Response;
	uint16_t u16Count = 4096;
    37a4:	00 e0       	ldi	r16, 0x00	; 0
    37a6:	10 e1       	ldi	r17, 0x10	; 16
    37a8:	01 c0       	rjmp	.+2      	; 0x37ac <SDReceiveDataBlock+0x22>
	{
		SPIRead(&u8Response,
				sizeof(u8Response));
	} 
	while ((u8Response != SD_START_TOKEN) &&
		   (u16Count--));
    37aa:	89 01       	movw	r16, r18
	uint16_t u16Count = 4096;
	
	// Wait for response token
	do 
	{
		SPIRead(&u8Response,
    37ac:	41 e0       	ldi	r20, 0x01	; 1
    37ae:	50 e0       	ldi	r21, 0x00	; 0
    37b0:	be 01       	movw	r22, r28
    37b2:	6f 5f       	subi	r22, 0xFF	; 255
    37b4:	7f 4f       	sbci	r23, 0xFF	; 255
    37b6:	83 e0       	ldi	r24, 0x03	; 3
    37b8:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <SPITransaction>
				sizeof(u8Response));
	} 
	while ((u8Response != SD_START_TOKEN) &&
    37bc:	89 81       	ldd	r24, Y+1	; 0x01
		   (u16Count--));
    37be:	8e 3f       	cpi	r24, 0xFE	; 254
    37c0:	29 f0       	breq	.+10     	; 0x37cc <SDReceiveDataBlock+0x42>
    37c2:	98 01       	movw	r18, r16
    37c4:	21 50       	subi	r18, 0x01	; 1
    37c6:	31 09       	sbc	r19, r1
	do 
	{
		SPIRead(&u8Response,
				sizeof(u8Response));
	} 
	while ((u8Response != SD_START_TOKEN) &&
    37c8:	01 2b       	or	r16, r17
    37ca:	79 f7       	brne	.-34     	; 0x37aa <SDReceiveDataBlock+0x20>
		   (u16Count--));
		   
	if (u8Response != SD_START_TOKEN)
    37cc:	8e 3f       	cpi	r24, 0xFE	; 254
    37ce:	b9 f4       	brne	.+46     	; 0x37fe <SDReceiveDataBlock+0x74>
	{
		return(false);
	}
	
	// Start of data. Pull it down.
	SPIRead(pu8Buffer,
    37d0:	a6 01       	movw	r20, r12
    37d2:	b7 01       	movw	r22, r14
    37d4:	83 e0       	ldi	r24, 0x03	; 3
    37d6:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <SPITransaction>
			u16RXCount);
			
	// Discard CRC
	SPIRead(&u8Response,
    37da:	41 e0       	ldi	r20, 0x01	; 1
    37dc:	50 e0       	ldi	r21, 0x00	; 0
    37de:	be 01       	movw	r22, r28
    37e0:	6f 5f       	subi	r22, 0xFF	; 255
    37e2:	7f 4f       	sbci	r23, 0xFF	; 255
    37e4:	83 e0       	ldi	r24, 0x03	; 3
    37e6:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <SPITransaction>
			sizeof(u8Response));
	SPIRead(&u8Response,
    37ea:	41 e0       	ldi	r20, 0x01	; 1
    37ec:	50 e0       	ldi	r21, 0x00	; 0
    37ee:	be 01       	movw	r22, r28
    37f0:	6f 5f       	subi	r22, 0xFF	; 255
    37f2:	7f 4f       	sbci	r23, 0xFF	; 255
    37f4:	83 e0       	ldi	r24, 0x03	; 3
    37f6:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <SPITransaction>
			sizeof(u8Response));
	return(true);			   
    37fa:	81 e0       	ldi	r24, 0x01	; 1
    37fc:	01 c0       	rjmp	.+2      	; 0x3800 <SDReceiveDataBlock+0x76>
	while ((u8Response != SD_START_TOKEN) &&
		   (u16Count--));
		   
	if (u8Response != SD_START_TOKEN)
	{
		return(false);
    37fe:	80 e0       	ldi	r24, 0x00	; 0
	SPIRead(&u8Response,
			sizeof(u8Response));
	SPIRead(&u8Response,
			sizeof(u8Response));
	return(true);			   
}
    3800:	0f 90       	pop	r0
    3802:	df 91       	pop	r29
    3804:	cf 91       	pop	r28
    3806:	1f 91       	pop	r17
    3808:	0f 91       	pop	r16
    380a:	ff 90       	pop	r15
    380c:	ef 90       	pop	r14
    380e:	df 90       	pop	r13
    3810:	cf 90       	pop	r12
    3812:	08 95       	ret

Disassembly of section .text.SDTransmitDataBlock:

000031ac <SDTransmitDataBlock>:

// Transmits a datablock during the data phase which may take some time
static bool SDTransmitDataBlock(uint8_t *pu8Buffer,
							    uint16_t u16TXCount,
								uint8_t u8DataPhaseToken)
{
    31ac:	ef 92       	push	r14
    31ae:	ff 92       	push	r15
    31b0:	0f 93       	push	r16
    31b2:	1f 93       	push	r17
    31b4:	cf 93       	push	r28
    31b6:	df 93       	push	r29
    31b8:	00 d0       	rcall	.+0      	; 0x31ba <SDTransmitDataBlock+0xe>
    31ba:	cd b7       	in	r28, 0x3d	; 61
    31bc:	de b7       	in	r29, 0x3e	; 62
    31be:	8c 01       	movw	r16, r24
    31c0:	7b 01       	movw	r14, r22
    31c2:	4a 83       	std	Y+2, r20	; 0x02
	uint8_t u8Response;
	uint16_t u16Attempts;
	bool bResult = true;

	// Send the data phase token (whatever it is)
	SPIWrite(&u8DataPhaseToken,
    31c4:	41 e0       	ldi	r20, 0x01	; 1
    31c6:	50 e0       	ldi	r21, 0x00	; 0
    31c8:	be 01       	movw	r22, r28
    31ca:	6e 5f       	subi	r22, 0xFE	; 254
    31cc:	7f 4f       	sbci	r23, 0xFF	; 255
    31ce:	81 e0       	ldi	r24, 0x01	; 1
    31d0:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <SPITransaction>
			 sizeof(u8DataPhaseToken));
	
	if (u8DataPhaseToken != SD_STOP_TRANSACTION)
    31d4:	8a 81       	ldd	r24, Y+2	; 0x02
    31d6:	8d 3f       	cpi	r24, 0xFD	; 253
    31d8:	e1 f1       	breq	.+120    	; 0x3252 <SDTransmitDataBlock+0xa6>
	{
		// As long as we're not stopping a transaction, we're writing data
		SPIWrite(pu8Buffer,
    31da:	a7 01       	movw	r20, r14
    31dc:	b8 01       	movw	r22, r16
    31de:	81 e0       	ldi	r24, 0x01	; 1
    31e0:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <SPITransaction>
				 u16TXCount);
				 
		// Wait for acceptance of the sector
		u16Attempts = 0;
    31e4:	00 e0       	ldi	r16, 0x00	; 0
    31e6:	10 e0       	ldi	r17, 0x00	; 0
		while (u16Attempts < SD_MAX_WRITE_ATTEMPTS)
    31e8:	0d c0       	rjmp	.+26     	; 0x3204 <SDTransmitDataBlock+0x58>
		{
			// Get some data
			SPIRead(&u8Response,
    31ea:	41 e0       	ldi	r20, 0x01	; 1
    31ec:	50 e0       	ldi	r21, 0x00	; 0
    31ee:	be 01       	movw	r22, r28
    31f0:	6f 5f       	subi	r22, 0xFF	; 255
    31f2:	7f 4f       	sbci	r23, 0xFF	; 255
    31f4:	83 e0       	ldi	r24, 0x03	; 3
    31f6:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <SPITransaction>
					sizeof(u8Response));
			if (u8Response != 0xff)
    31fa:	89 81       	ldd	r24, Y+1	; 0x01
    31fc:	8f 3f       	cpi	r24, 0xFF	; 255
    31fe:	31 f4       	brne	.+12     	; 0x320c <SDTransmitDataBlock+0x60>
			{
				break;
			}
				
			++u16Attempts;
    3200:	0f 5f       	subi	r16, 0xFF	; 255
    3202:	1f 4f       	sbci	r17, 0xFF	; 255
		SPIWrite(pu8Buffer,
				 u16TXCount);
				 
		// Wait for acceptance of the sector
		u16Attempts = 0;
		while (u16Attempts < SD_MAX_WRITE_ATTEMPTS)
    3204:	0e 39       	cpi	r16, 0x9E	; 158
    3206:	88 e9       	ldi	r24, 0x98	; 152
    3208:	18 07       	cpc	r17, r24
    320a:	78 f3       	brcs	.-34     	; 0x31ea <SDTransmitDataBlock+0x3e>
				
			++u16Attempts;
		}
			
		// We've timed out or else the card is dead
		if (SD_MAX_WRITE_ATTEMPTS == u16Attempts)
    320c:	0e 39       	cpi	r16, 0x9E	; 158
    320e:	18 49       	sbci	r17, 0x98	; 152
    3210:	11 f1       	breq	.+68     	; 0x3256 <SDTransmitDataBlock+0xaa>
			bResult = false;
			goto errorExit;
		}
			
		// See if the data was accepted
		u8Response &= 0x1f;
    3212:	89 81       	ldd	r24, Y+1	; 0x01
    3214:	8f 71       	andi	r24, 0x1F	; 31
    3216:	89 83       	std	Y+1, r24	; 0x01
		if (0x05 == u8Response)
    3218:	85 30       	cpi	r24, 0x05	; 5
    321a:	81 f0       	breq	.+32     	; 0x323c <SDTransmitDataBlock+0x90>
			// Success!
		}
		else
		{
			// Sector not accepted
			bResult = false;
    321c:	80 e0       	ldi	r24, 0x00	; 0
    321e:	1e c0       	rjmp	.+60     	; 0x325c <SDTransmitDataBlock+0xb0>
			// Wait for the write to finish
			u16Attempts = 0;
			while (u16Attempts < SD_MAX_WRITE_ATTEMPTS)
			{
				// Wait for the card to accept writing the sector
				SPIRead(&u8Response,
    3220:	41 e0       	ldi	r20, 0x01	; 1
    3222:	50 e0       	ldi	r21, 0x00	; 0
    3224:	be 01       	movw	r22, r28
    3226:	6f 5f       	subi	r22, 0xFF	; 255
    3228:	7f 4f       	sbci	r23, 0xFF	; 255
    322a:	83 e0       	ldi	r24, 0x03	; 3
    322c:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <SPITransaction>
						sizeof(u8Response));
				if (u8Response)
    3230:	89 81       	ldd	r24, Y+1	; 0x01
    3232:	81 11       	cpse	r24, r1
    3234:	09 c0       	rjmp	.+18     	; 0x3248 <SDTransmitDataBlock+0x9c>
				{
					break;
				}
					
				++u16Attempts;
    3236:	0f 5f       	subi	r16, 0xFF	; 255
    3238:	1f 4f       	sbci	r17, 0xFF	; 255
    323a:	02 c0       	rjmp	.+4      	; 0x3240 <SDTransmitDataBlock+0x94>
    323c:	00 e0       	ldi	r16, 0x00	; 0
    323e:	10 e0       	ldi	r17, 0x00	; 0
		u8Response &= 0x1f;
		if (0x05 == u8Response)
		{
			// Wait for the write to finish
			u16Attempts = 0;
			while (u16Attempts < SD_MAX_WRITE_ATTEMPTS)
    3240:	0e 39       	cpi	r16, 0x9E	; 158
    3242:	88 e9       	ldi	r24, 0x98	; 152
    3244:	18 07       	cpc	r17, r24
    3246:	60 f3       	brcs	.-40     	; 0x3220 <SDTransmitDataBlock+0x74>
				}
					
				++u16Attempts;
			}
				
			if (SD_MAX_WRITE_ATTEMPTS == u16Attempts)
    3248:	0e 39       	cpi	r16, 0x9E	; 158
    324a:	18 49       	sbci	r17, 0x98	; 152
    324c:	31 f0       	breq	.+12     	; 0x325a <SDTransmitDataBlock+0xae>
							    uint16_t u16TXCount,
								uint8_t u8DataPhaseToken)
{
	uint8_t u8Response;
	uint16_t u16Attempts;
	bool bResult = true;
    324e:	81 e0       	ldi	r24, 0x01	; 1
    3250:	05 c0       	rjmp	.+10     	; 0x325c <SDTransmitDataBlock+0xb0>
    3252:	81 e0       	ldi	r24, 0x01	; 1
    3254:	03 c0       	rjmp	.+6      	; 0x325c <SDTransmitDataBlock+0xb0>
		}
			
		// We've timed out or else the card is dead
		if (SD_MAX_WRITE_ATTEMPTS == u16Attempts)
		{
			bResult = false;
    3256:	80 e0       	ldi	r24, 0x00	; 0
    3258:	01 c0       	rjmp	.+2      	; 0x325c <SDTransmitDataBlock+0xb0>
				++u16Attempts;
			}
				
			if (SD_MAX_WRITE_ATTEMPTS == u16Attempts)
			{
				bResult = false;
    325a:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	
errorExit:
	return(bResult);
}
    325c:	0f 90       	pop	r0
    325e:	0f 90       	pop	r0
    3260:	df 91       	pop	r29
    3262:	cf 91       	pop	r28
    3264:	1f 91       	pop	r17
    3266:	0f 91       	pop	r16
    3268:	ff 90       	pop	r15
    326a:	ef 90       	pop	r14
    326c:	08 95       	ret

Disassembly of section .text.SDInit:

00002192 <SDInit>:

bool SDGetBlockSize(uint32_t *pu32BlockSize)
{
	*pu32BlockSize = sg_u16BlockSize;
	return(true);
}
    2192:	1f 93       	push	r17
    2194:	cf 93       	push	r28
    2196:	df 93       	push	r29
    2198:	00 d0       	rcall	.+0      	; 0x219a <SDInit+0x8>
    219a:	00 d0       	rcall	.+0      	; 0x219c <SDInit+0xa>
    219c:	0f 92       	push	r0
    219e:	cd b7       	in	r28, 0x3d	; 61
    21a0:	de b7       	in	r29, 0x3e	; 62
    21a2:	87 b1       	in	r24, 0x07	; 7
    21a4:	80 64       	ori	r24, 0x40	; 64
    21a6:	87 b9       	out	0x07, r24	; 7
    21a8:	88 b1       	in	r24, 0x08	; 8
    21aa:	80 64       	ori	r24, 0x40	; 64
    21ac:	88 b9       	out	0x08, r24	; 8
    21ae:	88 b1       	in	r24, 0x08	; 8
    21b0:	80 64       	ori	r24, 0x40	; 64
    21b2:	88 b9       	out	0x08, r24	; 8
    21b4:	0e 94 eb 23 	call	0x47d6	; 0x47d6 <SPIInit>
    21b8:	0e 94 8a 22 	call	0x4514	; 0x4514 <SDPowerup>
    21bc:	10 e0       	ldi	r17, 0x00	; 0
    21be:	0d c0       	rjmp	.+26     	; 0x21da <SDInit+0x48>
    21c0:	ce 01       	movw	r24, r28
    21c2:	01 96       	adiw	r24, 0x01	; 1
    21c4:	0e 94 08 26 	call	0x4c10	; 0x4c10 <SDGoIdle>
    21c8:	81 30       	cpi	r24, 0x01	; 1
    21ca:	49 f0       	breq	.+18     	; 0x21de <SDInit+0x4c>
    21cc:	60 e1       	ldi	r22, 0x10	; 16
    21ce:	77 e2       	ldi	r23, 0x27	; 39
    21d0:	80 e0       	ldi	r24, 0x00	; 0
    21d2:	90 e0       	ldi	r25, 0x00	; 0
    21d4:	0e 94 24 21 	call	0x4248	; 0x4248 <Delay>
    21d8:	1f 5f       	subi	r17, 0xFF	; 255
    21da:	14 36       	cpi	r17, 0x64	; 100
    21dc:	88 f3       	brcs	.-30     	; 0x21c0 <SDInit+0x2e>
    21de:	14 36       	cpi	r17, 0x64	; 100
    21e0:	09 f4       	brne	.+2      	; 0x21e4 <SDInit+0x52>
    21e2:	76 c0       	rjmp	.+236    	; 0x22d0 <SDInit+0x13e>
    21e4:	ce 01       	movw	r24, r28
    21e6:	01 96       	adiw	r24, 0x01	; 1
    21e8:	25 e0       	ldi	r18, 0x05	; 5
    21ea:	fc 01       	movw	r30, r24
    21ec:	11 92       	st	Z+, r1
    21ee:	2a 95       	dec	r18
    21f0:	e9 f7       	brne	.-6      	; 0x21ec <SDInit+0x5a>
    21f2:	0e 94 2d 23 	call	0x465a	; 0x465a <SDSendInterfaceCondition>
    21f6:	81 30       	cpi	r24, 0x01	; 1
    21f8:	09 f0       	breq	.+2      	; 0x21fc <SDInit+0x6a>
    21fa:	5e c0       	rjmp	.+188    	; 0x22b8 <SDInit+0x126>
    21fc:	8c 81       	ldd	r24, Y+4	; 0x04
    21fe:	8a 3a       	cpi	r24, 0xAA	; 170
    2200:	09 f0       	breq	.+2      	; 0x2204 <SDInit+0x72>
    2202:	68 c0       	rjmp	.+208    	; 0x22d4 <SDInit+0x142>
    2204:	40 e0       	ldi	r20, 0x00	; 0
    2206:	50 e0       	ldi	r21, 0x00	; 0
    2208:	60 e0       	ldi	r22, 0x00	; 0
    220a:	70 e4       	ldi	r23, 0x40	; 64
    220c:	ce 01       	movw	r24, r28
    220e:	01 96       	adiw	r24, 0x01	; 1
    2210:	0e 94 4f 20 	call	0x409e	; 0x409e <SDSendOpConditionArg>
    2214:	81 11       	cpse	r24, r1
    2216:	60 c0       	rjmp	.+192    	; 0x22d8 <SDInit+0x146>
    2218:	ce 01       	movw	r24, r28
    221a:	01 96       	adiw	r24, 0x01	; 1
    221c:	0e 94 47 23 	call	0x468e	; 0x468e <SDReadOCR>
    2220:	88 23       	and	r24, r24
    2222:	0c f4       	brge	.+2      	; 0x2226 <SDInit+0x94>
    2224:	5b c0       	rjmp	.+182    	; 0x22dc <SDInit+0x14a>
    2226:	8d e2       	ldi	r24, 0x2D	; 45
    2228:	99 e0       	ldi	r25, 0x09	; 9
    222a:	0e 94 d1 1d 	call	0x3ba2	; 0x3ba2 <SDReadCSD>
    222e:	88 23       	and	r24, r24
    2230:	0c f4       	brge	.+2      	; 0x2234 <SDInit+0xa2>
    2232:	56 c0       	rjmp	.+172    	; 0x22e0 <SDInit+0x14e>
    2234:	ed e2       	ldi	r30, 0x2D	; 45
    2236:	f9 e0       	ldi	r31, 0x09	; 9
    2238:	87 81       	ldd	r24, Z+7	; 0x07
    223a:	8f 73       	andi	r24, 0x3F	; 63
    223c:	90 e0       	ldi	r25, 0x00	; 0
    223e:	a0 e0       	ldi	r26, 0x00	; 0
    2240:	b0 e0       	ldi	r27, 0x00	; 0
    2242:	bc 01       	movw	r22, r24
    2244:	55 27       	eor	r21, r21
    2246:	44 27       	eor	r20, r20
    2248:	90 85       	ldd	r25, Z+8	; 0x08
    224a:	89 2f       	mov	r24, r25
    224c:	90 e0       	ldi	r25, 0x00	; 0
    224e:	a0 e0       	ldi	r26, 0x00	; 0
    2250:	b0 e0       	ldi	r27, 0x00	; 0
    2252:	ba 2f       	mov	r27, r26
    2254:	a9 2f       	mov	r26, r25
    2256:	98 2f       	mov	r25, r24
    2258:	88 27       	eor	r24, r24
    225a:	84 2b       	or	r24, r20
    225c:	95 2b       	or	r25, r21
    225e:	a6 2b       	or	r26, r22
    2260:	b7 2b       	or	r27, r23
    2262:	21 85       	ldd	r18, Z+9	; 0x09
    2264:	82 2b       	or	r24, r18
    2266:	01 96       	adiw	r24, 0x01	; 1
    2268:	a1 1d       	adc	r26, r1
    226a:	b1 1d       	adc	r27, r1
    226c:	07 2e       	mov	r0, r23
    226e:	7a e0       	ldi	r23, 0x0A	; 10
    2270:	88 0f       	add	r24, r24
    2272:	99 1f       	adc	r25, r25
    2274:	aa 1f       	adc	r26, r26
    2276:	bb 1f       	adc	r27, r27
    2278:	7a 95       	dec	r23
    227a:	d1 f7       	brne	.-12     	; 0x2270 <SDInit+0xde>
    227c:	70 2d       	mov	r23, r0
    227e:	80 93 54 09 	sts	0x0954, r24	; 0x800954 <sg_u32SDSectorCount>
    2282:	90 93 55 09 	sts	0x0955, r25	; 0x800955 <sg_u32SDSectorCount+0x1>
    2286:	a0 93 56 09 	sts	0x0956, r26	; 0x800956 <sg_u32SDSectorCount+0x2>
    228a:	b0 93 57 09 	sts	0x0957, r27	; 0x800957 <sg_u32SDSectorCount+0x3>
    228e:	25 81       	ldd	r18, Z+5	; 0x05
    2290:	2f 70       	andi	r18, 0x0F	; 15
    2292:	81 e0       	ldi	r24, 0x01	; 1
    2294:	90 e0       	ldi	r25, 0x00	; 0
    2296:	02 c0       	rjmp	.+4      	; 0x229c <SDInit+0x10a>
    2298:	88 0f       	add	r24, r24
    229a:	99 1f       	adc	r25, r25
    229c:	2a 95       	dec	r18
    229e:	e2 f7       	brpl	.-8      	; 0x2298 <SDInit+0x106>
    22a0:	90 93 5f 09 	sts	0x095F, r25	; 0x80095f <sg_u16BlockSize+0x1>
    22a4:	80 93 5e 09 	sts	0x095E, r24	; 0x80095e <sg_u16BlockSize>
    22a8:	60 ec       	ldi	r22, 0xC0	; 192
    22aa:	78 ed       	ldi	r23, 0xD8	; 216
    22ac:	87 ea       	ldi	r24, 0xA7	; 167
    22ae:	90 e0       	ldi	r25, 0x00	; 0
    22b0:	0e 94 48 17 	call	0x2e90	; 0x2e90 <SPISetBaudRate>
    22b4:	81 e0       	ldi	r24, 0x01	; 1
    22b6:	17 c0       	rjmp	.+46     	; 0x22e6 <SDInit+0x154>
    22b8:	40 e0       	ldi	r20, 0x00	; 0
    22ba:	50 e0       	ldi	r21, 0x00	; 0
    22bc:	60 e0       	ldi	r22, 0x00	; 0
    22be:	70 e4       	ldi	r23, 0x40	; 64
    22c0:	ce 01       	movw	r24, r28
    22c2:	01 96       	adiw	r24, 0x01	; 1
    22c4:	0e 94 4f 20 	call	0x409e	; 0x409e <SDSendOpConditionArg>
    22c8:	81 11       	cpse	r24, r1
    22ca:	0c c0       	rjmp	.+24     	; 0x22e4 <SDInit+0x152>
    22cc:	81 e0       	ldi	r24, 0x01	; 1
    22ce:	0b c0       	rjmp	.+22     	; 0x22e6 <SDInit+0x154>
    22d0:	80 e0       	ldi	r24, 0x00	; 0
    22d2:	09 c0       	rjmp	.+18     	; 0x22e6 <SDInit+0x154>
    22d4:	80 e0       	ldi	r24, 0x00	; 0
    22d6:	07 c0       	rjmp	.+14     	; 0x22e6 <SDInit+0x154>
    22d8:	80 e0       	ldi	r24, 0x00	; 0
    22da:	05 c0       	rjmp	.+10     	; 0x22e6 <SDInit+0x154>
    22dc:	80 e0       	ldi	r24, 0x00	; 0
    22de:	03 c0       	rjmp	.+6      	; 0x22e6 <SDInit+0x154>
    22e0:	80 e0       	ldi	r24, 0x00	; 0
    22e2:	01 c0       	rjmp	.+2      	; 0x22e6 <SDInit+0x154>
    22e4:	80 e0       	ldi	r24, 0x00	; 0
    22e6:	0f 90       	pop	r0
    22e8:	0f 90       	pop	r0
    22ea:	0f 90       	pop	r0
    22ec:	0f 90       	pop	r0
    22ee:	0f 90       	pop	r0
    22f0:	df 91       	pop	r29
    22f2:	cf 91       	pop	r28
    22f4:	1f 91       	pop	r17
    22f6:	08 95       	ret

Disassembly of section .text.SDRead:

00002c14 <SDRead>:

// Read one or more sectors from SD
bool SDRead(uint32_t u32Sector,
			uint8_t *pu8Buffer,
			uint32_t u32SectorCount)
{
    2c14:	8f 92       	push	r8
    2c16:	9f 92       	push	r9
    2c18:	af 92       	push	r10
    2c1a:	bf 92       	push	r11
    2c1c:	cf 92       	push	r12
    2c1e:	df 92       	push	r13
    2c20:	ef 92       	push	r14
    2c22:	ff 92       	push	r15
    2c24:	0f 93       	push	r16
    2c26:	1f 93       	push	r17
    2c28:	cf 93       	push	r28
    2c2a:	df 93       	push	r29
    2c2c:	4b 01       	movw	r8, r22
    2c2e:	5c 01       	movw	r10, r24
    2c30:	ea 01       	movw	r28, r20
    2c32:	68 01       	movw	r12, r16
    2c34:	79 01       	movw	r14, r18
	bool bResult = false;
	
	// Pet the watchdog
	WatchdogReset();
    2c36:	0e 94 57 27 	call	0x4eae	; 0x4eae <WatchdogReset>
		
	// Assert chip select
	SDSetCS(true);
    2c3a:	81 e0       	ldi	r24, 0x01	; 1
    2c3c:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <SDSetCS>

	if (1 == u32SectorCount)
    2c40:	81 e0       	ldi	r24, 0x01	; 1
    2c42:	c8 16       	cp	r12, r24
    2c44:	d1 04       	cpc	r13, r1
    2c46:	e1 04       	cpc	r14, r1
    2c48:	f1 04       	cpc	r15, r1
    2c4a:	81 f4       	brne	.+32     	; 0x2c6c <SDRead+0x58>
	{
		if (0 == SDCommand(CMD17,
    2c4c:	b5 01       	movw	r22, r10
    2c4e:	a4 01       	movw	r20, r8
    2c50:	81 e1       	ldi	r24, 0x11	; 17
    2c52:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <SDCommand>
    2c56:	81 11       	cpse	r24, r1
    2c58:	35 c0       	rjmp	.+106    	; 0x2cc4 <SDRead+0xb0>
						   u32Sector))
		{
			bResult = SDReceiveDataBlock(pu8Buffer,
    2c5a:	60 91 5e 09 	lds	r22, 0x095E	; 0x80095e <sg_u16BlockSize>
    2c5e:	70 91 5f 09 	lds	r23, 0x095F	; 0x80095f <sg_u16BlockSize+0x1>
    2c62:	ce 01       	movw	r24, r28
    2c64:	0e 94 c5 1b 	call	0x378a	; 0x378a <SDReceiveDataBlock>
    2c68:	18 2f       	mov	r17, r24
    2c6a:	2f c0       	rjmp	.+94     	; 0x2cca <SDRead+0xb6>
		}
	}
	else
	{
		// Multisector
		if (0 == SDCommand(CMD18,
    2c6c:	b5 01       	movw	r22, r10
    2c6e:	a4 01       	movw	r20, r8
    2c70:	82 e1       	ldi	r24, 0x12	; 18
    2c72:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <SDCommand>
    2c76:	88 23       	and	r24, r24
    2c78:	19 f0       	breq	.+6      	; 0x2c80 <SDRead+0x6c>
    2c7a:	26 c0       	rjmp	.+76     	; 0x2cc8 <SDRead+0xb4>
				WatchdogReset();
				
				pu8Buffer += sg_u16BlockSize;
			} 
			while ((bResult) &&
				   (u32SectorCount--));
    2c7c:	6c 01       	movw	r12, r24
    2c7e:	7d 01       	movw	r14, r26
		if (0 == SDCommand(CMD18,
						   u32Sector))
		{
			do 
			{
				bResult = SDReceiveDataBlock(pu8Buffer,
    2c80:	60 91 5e 09 	lds	r22, 0x095E	; 0x80095e <sg_u16BlockSize>
    2c84:	70 91 5f 09 	lds	r23, 0x095F	; 0x80095f <sg_u16BlockSize+0x1>
    2c88:	ce 01       	movw	r24, r28
    2c8a:	0e 94 c5 1b 	call	0x378a	; 0x378a <SDReceiveDataBlock>
    2c8e:	18 2f       	mov	r17, r24
							 				 sg_u16BlockSize);
				// Pet the watchdog
				WatchdogReset();
    2c90:	0e 94 57 27 	call	0x4eae	; 0x4eae <WatchdogReset>
				
				pu8Buffer += sg_u16BlockSize;
    2c94:	80 91 5e 09 	lds	r24, 0x095E	; 0x80095e <sg_u16BlockSize>
    2c98:	90 91 5f 09 	lds	r25, 0x095F	; 0x80095f <sg_u16BlockSize+0x1>
    2c9c:	c8 0f       	add	r28, r24
    2c9e:	d9 1f       	adc	r29, r25
			} 
			while ((bResult) &&
				   (u32SectorCount--));
    2ca0:	11 23       	and	r17, r17
    2ca2:	49 f0       	breq	.+18     	; 0x2cb6 <SDRead+0xa2>
    2ca4:	d7 01       	movw	r26, r14
    2ca6:	c6 01       	movw	r24, r12
    2ca8:	01 97       	sbiw	r24, 0x01	; 1
    2caa:	a1 09       	sbc	r26, r1
    2cac:	b1 09       	sbc	r27, r1
				// Pet the watchdog
				WatchdogReset();
				
				pu8Buffer += sg_u16BlockSize;
			} 
			while ((bResult) &&
    2cae:	cd 28       	or	r12, r13
    2cb0:	ce 28       	or	r12, r14
    2cb2:	cf 28       	or	r12, r15
    2cb4:	19 f7       	brne	.-58     	; 0x2c7c <SDRead+0x68>
				   (u32SectorCount--));
				   
			// Regardless, send a stop command
			(void) SDCommand(CMD12,
    2cb6:	40 e0       	ldi	r20, 0x00	; 0
    2cb8:	50 e0       	ldi	r21, 0x00	; 0
    2cba:	ba 01       	movw	r22, r20
    2cbc:	8c e0       	ldi	r24, 0x0C	; 12
    2cbe:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <SDCommand>
    2cc2:	03 c0       	rjmp	.+6      	; 0x2cca <SDRead+0xb6>
// Read one or more sectors from SD
bool SDRead(uint32_t u32Sector,
			uint8_t *pu8Buffer,
			uint32_t u32SectorCount)
{
	bool bResult = false;
    2cc4:	10 e0       	ldi	r17, 0x00	; 0
    2cc6:	01 c0       	rjmp	.+2      	; 0x2cca <SDRead+0xb6>
    2cc8:	10 e0       	ldi	r17, 0x00	; 0
		{
			// Failed
		}
	}
	
	SDSetCS(false);
    2cca:	80 e0       	ldi	r24, 0x00	; 0
    2ccc:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <SDSetCS>

	return(bResult);
}
    2cd0:	81 2f       	mov	r24, r17
    2cd2:	df 91       	pop	r29
    2cd4:	cf 91       	pop	r28
    2cd6:	1f 91       	pop	r17
    2cd8:	0f 91       	pop	r16
    2cda:	ff 90       	pop	r15
    2cdc:	ef 90       	pop	r14
    2cde:	df 90       	pop	r13
    2ce0:	cf 90       	pop	r12
    2ce2:	bf 90       	pop	r11
    2ce4:	af 90       	pop	r10
    2ce6:	9f 90       	pop	r9
    2ce8:	8f 90       	pop	r8
    2cea:	08 95       	ret

Disassembly of section .text.SDWrite:

00002a5c <SDWrite>:

bool SDGetBlockSize(uint32_t *pu32BlockSize)
{
	*pu32BlockSize = sg_u16BlockSize;
	return(true);
}
    2a5c:	8f 92       	push	r8
    2a5e:	9f 92       	push	r9
    2a60:	af 92       	push	r10
    2a62:	bf 92       	push	r11
    2a64:	cf 92       	push	r12
    2a66:	df 92       	push	r13
    2a68:	ef 92       	push	r14
    2a6a:	ff 92       	push	r15
    2a6c:	0f 93       	push	r16
    2a6e:	1f 93       	push	r17
    2a70:	cf 93       	push	r28
    2a72:	df 93       	push	r29
    2a74:	4b 01       	movw	r8, r22
    2a76:	5c 01       	movw	r10, r24
    2a78:	ea 01       	movw	r28, r20
    2a7a:	68 01       	movw	r12, r16
    2a7c:	79 01       	movw	r14, r18
    2a7e:	0e 94 57 27 	call	0x4eae	; 0x4eae <WatchdogReset>
    2a82:	81 e0       	ldi	r24, 0x01	; 1
    2a84:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <SDSetCS>
    2a88:	81 e0       	ldi	r24, 0x01	; 1
    2a8a:	c8 16       	cp	r12, r24
    2a8c:	d1 04       	cpc	r13, r1
    2a8e:	e1 04       	cpc	r14, r1
    2a90:	f1 04       	cpc	r15, r1
    2a92:	89 f4       	brne	.+34     	; 0x2ab6 <SDWrite+0x5a>
    2a94:	b5 01       	movw	r22, r10
    2a96:	a4 01       	movw	r20, r8
    2a98:	88 e1       	ldi	r24, 0x18	; 24
    2a9a:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <SDCommand>
    2a9e:	81 11       	cpse	r24, r1
    2aa0:	37 c0       	rjmp	.+110    	; 0x2b10 <SDWrite+0xb4>
    2aa2:	60 91 5e 09 	lds	r22, 0x095E	; 0x80095e <sg_u16BlockSize>
    2aa6:	70 91 5f 09 	lds	r23, 0x095F	; 0x80095f <sg_u16BlockSize+0x1>
    2aaa:	4e ef       	ldi	r20, 0xFE	; 254
    2aac:	ce 01       	movw	r24, r28
    2aae:	0e 94 d6 18 	call	0x31ac	; 0x31ac <SDTransmitDataBlock>
    2ab2:	18 2f       	mov	r17, r24
    2ab4:	30 c0       	rjmp	.+96     	; 0x2b16 <SDWrite+0xba>
    2ab6:	b5 01       	movw	r22, r10
    2ab8:	a4 01       	movw	r20, r8
    2aba:	89 e1       	ldi	r24, 0x19	; 25
    2abc:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <SDCommand>
    2ac0:	88 23       	and	r24, r24
    2ac2:	19 f0       	breq	.+6      	; 0x2aca <SDWrite+0x6e>
    2ac4:	27 c0       	rjmp	.+78     	; 0x2b14 <SDWrite+0xb8>
    2ac6:	6c 01       	movw	r12, r24
    2ac8:	7d 01       	movw	r14, r26
    2aca:	60 91 5e 09 	lds	r22, 0x095E	; 0x80095e <sg_u16BlockSize>
    2ace:	70 91 5f 09 	lds	r23, 0x095F	; 0x80095f <sg_u16BlockSize+0x1>
    2ad2:	4c ef       	ldi	r20, 0xFC	; 252
    2ad4:	ce 01       	movw	r24, r28
    2ad6:	0e 94 d6 18 	call	0x31ac	; 0x31ac <SDTransmitDataBlock>
    2ada:	18 2f       	mov	r17, r24
    2adc:	0e 94 57 27 	call	0x4eae	; 0x4eae <WatchdogReset>
    2ae0:	80 91 5e 09 	lds	r24, 0x095E	; 0x80095e <sg_u16BlockSize>
    2ae4:	90 91 5f 09 	lds	r25, 0x095F	; 0x80095f <sg_u16BlockSize+0x1>
    2ae8:	c8 0f       	add	r28, r24
    2aea:	d9 1f       	adc	r29, r25
    2aec:	11 23       	and	r17, r17
    2aee:	49 f0       	breq	.+18     	; 0x2b02 <SDWrite+0xa6>
    2af0:	d7 01       	movw	r26, r14
    2af2:	c6 01       	movw	r24, r12
    2af4:	01 97       	sbiw	r24, 0x01	; 1
    2af6:	a1 09       	sbc	r26, r1
    2af8:	b1 09       	sbc	r27, r1
    2afa:	cd 28       	or	r12, r13
    2afc:	ce 28       	or	r12, r14
    2afe:	cf 28       	or	r12, r15
    2b00:	11 f7       	brne	.-60     	; 0x2ac6 <SDWrite+0x6a>
    2b02:	40 e0       	ldi	r20, 0x00	; 0
    2b04:	50 e0       	ldi	r21, 0x00	; 0
    2b06:	ba 01       	movw	r22, r20
    2b08:	8c e0       	ldi	r24, 0x0C	; 12
    2b0a:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <SDCommand>
    2b0e:	03 c0       	rjmp	.+6      	; 0x2b16 <SDWrite+0xba>
    2b10:	10 e0       	ldi	r17, 0x00	; 0
    2b12:	01 c0       	rjmp	.+2      	; 0x2b16 <SDWrite+0xba>
    2b14:	10 e0       	ldi	r17, 0x00	; 0
    2b16:	80 e0       	ldi	r24, 0x00	; 0
    2b18:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <SDSetCS>
    2b1c:	81 2f       	mov	r24, r17
    2b1e:	df 91       	pop	r29
    2b20:	cf 91       	pop	r28
    2b22:	1f 91       	pop	r17
    2b24:	0f 91       	pop	r16
    2b26:	ff 90       	pop	r15
    2b28:	ef 90       	pop	r14
    2b2a:	df 90       	pop	r13
    2b2c:	cf 90       	pop	r12
    2b2e:	bf 90       	pop	r11
    2b30:	af 90       	pop	r10
    2b32:	9f 90       	pop	r9
    2b34:	8f 90       	pop	r8
    2b36:	08 95       	ret

Disassembly of section .text.SPITransaction:

00003fee <SPITransaction>:

// Do a SPI transaction - read or write (or write pattern)
void SPITransaction(ESPIBusState eSPIBusState,
					uint8_t *pu8Buffer,
					uint16_t u16ByteCount)
{
    3fee:	fb 01       	movw	r30, r22
	// If we're transmitting, start the transaction
	if (ESTATE_RX_DATA == eSPIBusState)
    3ff0:	83 30       	cpi	r24, 0x03	; 3
    3ff2:	71 f4       	brne	.+28     	; 0x4010 <SPITransaction+0x22>
    3ff4:	08 c0       	rjmp	.+16     	; 0x4006 <SPITransaction+0x18>
	{
		while (u16ByteCount--)
		{
			// Clock out 0xff so we can receive the data
			SPDR = 0xff;
    3ff6:	2f ef       	ldi	r18, 0xFF	; 255
    3ff8:	2e bd       	out	0x2e, r18	; 46

			// Wait for data to be available
			while (0 == (SPSR & (1 << SPIF)));
    3ffa:	0d b4       	in	r0, 0x2d	; 45
    3ffc:	07 fe       	sbrs	r0, 7
    3ffe:	fd cf       	rjmp	.-6      	; 0x3ffa <SPITransaction+0xc>
			
			// Read the byte
			*pu8Buffer = SPDR;
    4000:	2e b5       	in	r18, 0x2e	; 46
    4002:	21 93       	st	Z+, r18
					uint16_t u16ByteCount)
{
	// If we're transmitting, start the transaction
	if (ESTATE_RX_DATA == eSPIBusState)
	{
		while (u16ByteCount--)
    4004:	ac 01       	movw	r20, r24
    4006:	ca 01       	movw	r24, r20
    4008:	01 97       	sbiw	r24, 0x01	; 1
    400a:	45 2b       	or	r20, r21
    400c:	a1 f7       	brne	.-24     	; 0x3ff6 <SPITransaction+0x8>
    400e:	08 95       	ret
			*pu8Buffer = SPDR;
			++pu8Buffer;
		}
	}
	else
	if (ESTATE_TX_DATA == eSPIBusState)
    4010:	81 30       	cpi	r24, 0x01	; 1
    4012:	61 f4       	brne	.+24     	; 0x402c <SPITransaction+0x3e>
    4014:	06 c0       	rjmp	.+12     	; 0x4022 <SPITransaction+0x34>
	{
		// Clock out whatever our data is in our queue
		while (u16ByteCount--)
		{
			SPDR = *pu8Buffer;
    4016:	21 91       	ld	r18, Z+
    4018:	2e bd       	out	0x2e, r18	; 46
			++pu8Buffer;
			
			// Wait for the transmit to complete
			while (0 == (SPSR & (1 << SPIF)));
    401a:	0d b4       	in	r0, 0x2d	; 45
    401c:	07 fe       	sbrs	r0, 7
    401e:	fd cf       	rjmp	.-6      	; 0x401a <SPITransaction+0x2c>
	}
	else
	if (ESTATE_TX_DATA == eSPIBusState)
	{
		// Clock out whatever our data is in our queue
		while (u16ByteCount--)
    4020:	ac 01       	movw	r20, r24
    4022:	ca 01       	movw	r24, r20
    4024:	01 97       	sbiw	r24, 0x01	; 1
    4026:	45 2b       	or	r20, r21
    4028:	b1 f7       	brne	.-20     	; 0x4016 <SPITransaction+0x28>
    402a:	08 95       	ret
			// Wait for the transmit to complete
			while (0 == (SPSR & (1 << SPIF)));
		}
	}
	else
	if (ESTATE_TX_PATTERN == eSPIBusState)
    402c:	82 30       	cpi	r24, 0x02	; 2
    402e:	51 f4       	brne	.+20     	; 0x4044 <SPITransaction+0x56>
    4030:	05 c0       	rjmp	.+10     	; 0x403c <SPITransaction+0x4e>
		// Clock out whatever our data is in our queue
		while (u16ByteCount--)
		{
			// This is OK - as the position where the pointer would normally
			// be is just the pattern (single byte)
			SPDR = (uint8_t) (pu8Buffer);
    4032:	ee bd       	out	0x2e, r30	; 46
		
			// Wait for the transmit to complete
			while (0 == (SPSR & (1 << SPIF)));
    4034:	0d b4       	in	r0, 0x2d	; 45
    4036:	07 fe       	sbrs	r0, 7
    4038:	fd cf       	rjmp	.-6      	; 0x4034 <SPITransaction+0x46>
	}
	else
	if (ESTATE_TX_PATTERN == eSPIBusState)
	{
		// Clock out whatever our data is in our queue
		while (u16ByteCount--)
    403a:	ac 01       	movw	r20, r24
    403c:	ca 01       	movw	r24, r20
    403e:	01 97       	sbiw	r24, 0x01	; 1
    4040:	45 2b       	or	r20, r21
    4042:	b9 f7       	brne	.-18     	; 0x4032 <SPITransaction+0x44>
    4044:	08 95       	ret

Disassembly of section .text.SPISetBaudRate:

00002e90 <SPISetBaudRate>:
	{FCLKIO >> 7,	(1 << SPR1) | (0 << SPR0),	0},					// /128
};

// Sets the SPI baud rate and returns the actual baud rate selected
uint32_t SPISetBaudRate(uint32_t u32BaudRate)
{
    2e90:	cf 92       	push	r12
    2e92:	df 92       	push	r13
    2e94:	ef 92       	push	r14
    2e96:	ff 92       	push	r15
    2e98:	6b 01       	movw	r12, r22
    2e9a:	7c 01       	movw	r14, r24
	uint8_t u8Loop;
	
	// Find the baud rate that's the closest
	for (u8Loop = 0; u8Loop < (sizeof(sg_sSPIBaudRates) / sizeof(sg_sSPIBaudRates[0])); u8Loop++)
    2e9c:	20 e0       	ldi	r18, 0x00	; 0
    2e9e:	19 c0       	rjmp	.+50     	; 0x2ed2 <SPISetBaudRate+0x42>
	{
		if (u32BaudRate >= sg_sSPIBaudRates[u8Loop].u32BaudRate)
    2ea0:	82 2f       	mov	r24, r18
    2ea2:	90 e0       	ldi	r25, 0x00	; 0
    2ea4:	ac 01       	movw	r20, r24
    2ea6:	44 0f       	add	r20, r20
    2ea8:	55 1f       	adc	r21, r21
    2eaa:	84 0f       	add	r24, r20
    2eac:	95 1f       	adc	r25, r21
    2eae:	88 0f       	add	r24, r24
    2eb0:	99 1f       	adc	r25, r25
    2eb2:	09 2e       	mov	r0, r25
    2eb4:	00 0c       	add	r0, r0
    2eb6:	aa 0b       	sbc	r26, r26
    2eb8:	85 55       	subi	r24, 0x55	; 85
    2eba:	9d 4f       	sbci	r25, 0xFD	; 253
    2ebc:	af 4f       	sbci	r26, 0xFF	; 255
    2ebe:	fc 01       	movw	r30, r24
    2ec0:	5a 2f       	mov	r21, r26
    2ec2:	0e 94 6e 26 	call	0x4cdc	; 0x4cdc <__xload_4>
    2ec6:	c6 16       	cp	r12, r22
    2ec8:	d7 06       	cpc	r13, r23
    2eca:	e8 06       	cpc	r14, r24
    2ecc:	f9 06       	cpc	r15, r25
    2ece:	18 f4       	brcc	.+6      	; 0x2ed6 <SPISetBaudRate+0x46>
uint32_t SPISetBaudRate(uint32_t u32BaudRate)
{
	uint8_t u8Loop;
	
	// Find the baud rate that's the closest
	for (u8Loop = 0; u8Loop < (sizeof(sg_sSPIBaudRates) / sizeof(sg_sSPIBaudRates[0])); u8Loop++)
    2ed0:	2f 5f       	subi	r18, 0xFF	; 255
    2ed2:	27 30       	cpi	r18, 0x07	; 7
    2ed4:	28 f3       	brcs	.-54     	; 0x2ea0 <SPISetBaudRate+0x10>
			break;
		}
	}

	// If we've hit the end, use the slowest speed
	if ((sizeof(sg_sSPIBaudRates) / sizeof(sg_sSPIBaudRates[0])) == u8Loop)
    2ed6:	27 30       	cpi	r18, 0x07	; 7
    2ed8:	09 f4       	brne	.+2      	; 0x2edc <SPISetBaudRate+0x4c>
	{
		u8Loop--;
    2eda:	21 50       	subi	r18, 0x01	; 1
	}

	// Found one!
	SPCR = (SPCR & (uint8_t) ~((1 << SPR1) | (1 << SPR0))) | sg_sSPIBaudRates[u8Loop].u8SPCR;
    2edc:	6c b5       	in	r22, 0x2c	; 44
    2ede:	30 e0       	ldi	r19, 0x00	; 0
    2ee0:	a9 01       	movw	r20, r18
    2ee2:	44 0f       	add	r20, r20
    2ee4:	55 1f       	adc	r21, r21
    2ee6:	ca 01       	movw	r24, r20
    2ee8:	82 0f       	add	r24, r18
    2eea:	93 1f       	adc	r25, r19
    2eec:	88 0f       	add	r24, r24
    2eee:	99 1f       	adc	r25, r25
    2ef0:	04 96       	adiw	r24, 0x04	; 4
    2ef2:	09 2e       	mov	r0, r25
    2ef4:	00 0c       	add	r0, r0
    2ef6:	aa 0b       	sbc	r26, r26
    2ef8:	85 55       	subi	r24, 0x55	; 85
    2efa:	9d 4f       	sbci	r25, 0xFD	; 253
    2efc:	af 4f       	sbci	r26, 0xFF	; 255
    2efe:	fc 01       	movw	r30, r24
    2f00:	84 91       	lpm	r24, Z
    2f02:	a7 fd       	sbrc	r26, 7
    2f04:	80 81       	ld	r24, Z
    2f06:	6c 7f       	andi	r22, 0xFC	; 252
    2f08:	86 2b       	or	r24, r22
    2f0a:	8c bd       	out	0x2c, r24	; 44
	SPSR = (SPSR & (uint8_t) ~(1 << SPI2X)) | sg_sSPIBaudRates[u8Loop].u8SPSR;
    2f0c:	6d b5       	in	r22, 0x2d	; 45
    2f0e:	ca 01       	movw	r24, r20
    2f10:	82 0f       	add	r24, r18
    2f12:	93 1f       	adc	r25, r19
    2f14:	88 0f       	add	r24, r24
    2f16:	99 1f       	adc	r25, r25
    2f18:	05 96       	adiw	r24, 0x05	; 5
    2f1a:	09 2e       	mov	r0, r25
    2f1c:	00 0c       	add	r0, r0
    2f1e:	aa 0b       	sbc	r26, r26
    2f20:	85 55       	subi	r24, 0x55	; 85
    2f22:	9d 4f       	sbci	r25, 0xFD	; 253
    2f24:	af 4f       	sbci	r26, 0xFF	; 255
    2f26:	fc 01       	movw	r30, r24
    2f28:	84 91       	lpm	r24, Z
    2f2a:	a7 fd       	sbrc	r26, 7
    2f2c:	80 81       	ld	r24, Z
    2f2e:	6e 7f       	andi	r22, 0xFE	; 254
    2f30:	86 2b       	or	r24, r22
    2f32:	8d bd       	out	0x2d, r24	; 45
	return(sg_sSPIBaudRates[u8Loop].u32BaudRate);
    2f34:	24 0f       	add	r18, r20
    2f36:	35 1f       	adc	r19, r21
    2f38:	22 0f       	add	r18, r18
    2f3a:	33 1f       	adc	r19, r19
    2f3c:	03 2e       	mov	r0, r19
    2f3e:	00 0c       	add	r0, r0
    2f40:	44 0b       	sbc	r20, r20
    2f42:	25 55       	subi	r18, 0x55	; 85
    2f44:	3d 4f       	sbci	r19, 0xFD	; 253
    2f46:	4f 4f       	sbci	r20, 0xFF	; 255
    2f48:	f9 01       	movw	r30, r18
    2f4a:	54 2f       	mov	r21, r20
    2f4c:	0e 94 6e 26 	call	0x4cdc	; 0x4cdc <__xload_4>
}
    2f50:	ff 90       	pop	r15
    2f52:	ef 90       	pop	r14
    2f54:	df 90       	pop	r13
    2f56:	cf 90       	pop	r12
    2f58:	08 95       	ret

Disassembly of section .text.SPIInit:

000047d6 <SPIInit>:

void SPIInit(void)
{
	// Set MOSI and SCK to output
	DDR_SPI |= (1 << MOSI) | (1 << SCK);
    47d6:	84 b1       	in	r24, 0x04	; 4
    47d8:	82 68       	ori	r24, 0x82	; 130
    47da:	84 b9       	out	0x04, r24	; 4
	DDR_SPI &= (uint8_t) ~(1 << MISO);
    47dc:	84 b1       	in	r24, 0x04	; 4
    47de:	8e 7f       	andi	r24, 0xFE	; 254
    47e0:	84 b9       	out	0x04, r24	; 4
	
	// MISO As input (need our pullup)
	PORT_SPI |= (1 << MISO);
    47e2:	85 b1       	in	r24, 0x05	; 5
    47e4:	81 60       	ori	r24, 0x01	; 1
    47e6:	85 b9       	out	0x05, r24	; 5
	
	// Enable SPI engine, master only, and clock to fosc/128 and SPI mode 0 (which is what SD wants)
	SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR1) | (1 << SPR0);
    47e8:	83 e5       	ldi	r24, 0x53	; 83
    47ea:	8c bd       	out	0x2c, r24	; 44
	
	// Zero out SPSR (all zeroes)
	SPSR = 0;
    47ec:	1d bc       	out	0x2d, r1	; 45
	
	// Zero out SPIPS so the SPI IP is connected to MISO, MOSI, SCK, and SS
	MCUCR &= (uint8_t) ~(1 << SPIPS);
    47ee:	85 b7       	in	r24, 0x35	; 53
    47f0:	8f 77       	andi	r24, 0x7F	; 127
    47f2:	85 bf       	out	0x35, r24	; 53

	// Set to something slow/compatible
	(void) SPISetBaudRate(400000);
    47f4:	60 e8       	ldi	r22, 0x80	; 128
    47f6:	7a e1       	ldi	r23, 0x1A	; 26
    47f8:	86 e0       	ldi	r24, 0x06	; 6
    47fa:	90 e0       	ldi	r25, 0x00	; 0
    47fc:	0e 94 48 17 	call	0x2e90	; 0x2e90 <SPISetBaudRate>
    4800:	08 95       	ret

Disassembly of section .text.readGlobalState:

0000445e <readGlobalState>:

static GlobalState gState;
static uint32_t currentSector;
static uint8_t __attribute__((aligned(4))) frameBuffer[FRAME_BUFFER_SIZE];  // Enlarged to handle full frame

static bool readGlobalState(void) {
    445e:	0f 93       	push	r16
    4460:	1f 93       	push	r17
    4462:	cf 93       	push	r28
	if (!SDRead(0, frameBuffer, 1)) {
    4464:	01 e0       	ldi	r16, 0x01	; 1
    4466:	10 e0       	ldi	r17, 0x00	; 0
    4468:	20 e0       	ldi	r18, 0x00	; 0
    446a:	30 e0       	ldi	r19, 0x00	; 0
    446c:	4c e2       	ldi	r20, 0x2C	; 44
    446e:	53 e0       	ldi	r21, 0x03	; 3
    4470:	60 e0       	ldi	r22, 0x00	; 0
    4472:	70 e0       	ldi	r23, 0x00	; 0
    4474:	cb 01       	movw	r24, r22
    4476:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <SDRead>
    447a:	c8 2f       	mov	r28, r24
    447c:	88 23       	and	r24, r24
    447e:	49 f0       	breq	.+18     	; 0x4492 <readGlobalState+0x34>
		return false;
	}
	memcpy(&gState, frameBuffer, sizeof(GlobalState));
    4480:	4c e2       	ldi	r20, 0x2C	; 44
    4482:	53 e0       	ldi	r21, 0x03	; 3
    4484:	60 e8       	ldi	r22, 0x80	; 128
    4486:	28 ed       	ldi	r18, 0xD8	; 216
    4488:	31 e0       	ldi	r19, 0x01	; 1
    448a:	8c e2       	ldi	r24, 0x2C	; 44
    448c:	97 e0       	ldi	r25, 0x07	; 7
    448e:	0e 94 79 23 	call	0x46f2	; 0x46f2 <memcpy>
	// TODO: Implement checksum verification
	return true;
}
    4492:	8c 2f       	mov	r24, r28
    4494:	cf 91       	pop	r28
    4496:	1f 91       	pop	r17
    4498:	0f 91       	pop	r16
    449a:	08 95       	ret

Disassembly of section .text.writeGlobalState:

000046c0 <writeGlobalState>:

static bool writeGlobalState(void) {
    46c0:	0f 93       	push	r16
    46c2:	1f 93       	push	r17
	memcpy(frameBuffer, &gState, sizeof(GlobalState));
    46c4:	4c e2       	ldi	r20, 0x2C	; 44
    46c6:	57 e0       	ldi	r21, 0x07	; 7
    46c8:	60 e8       	ldi	r22, 0x80	; 128
    46ca:	28 ed       	ldi	r18, 0xD8	; 216
    46cc:	31 e0       	ldi	r19, 0x01	; 1
    46ce:	8c e2       	ldi	r24, 0x2C	; 44
    46d0:	93 e0       	ldi	r25, 0x03	; 3
    46d2:	0e 94 79 23 	call	0x46f2	; 0x46f2 <memcpy>
	// TODO: Calculate and update checksum
	return SDWrite(0, frameBuffer, 1);
    46d6:	01 e0       	ldi	r16, 0x01	; 1
    46d8:	10 e0       	ldi	r17, 0x00	; 0
    46da:	20 e0       	ldi	r18, 0x00	; 0
    46dc:	30 e0       	ldi	r19, 0x00	; 0
    46de:	4c e2       	ldi	r20, 0x2C	; 44
    46e0:	53 e0       	ldi	r21, 0x03	; 3
    46e2:	60 e0       	ldi	r22, 0x00	; 0
    46e4:	70 e0       	ldi	r23, 0x00	; 0
    46e6:	cb 01       	movw	r24, r22
    46e8:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <SDWrite>
}
    46ec:	1f 91       	pop	r17
    46ee:	0f 91       	pop	r16
    46f0:	08 95       	ret

Disassembly of section .text.updateSessionMap:

00002b38 <updateSessionMap>:

static bool updateSessionMap(void) {
    2b38:	8f 92       	push	r8
    2b3a:	9f 92       	push	r9
    2b3c:	af 92       	push	r10
    2b3e:	bf 92       	push	r11
    2b40:	cf 92       	push	r12
    2b42:	df 92       	push	r13
    2b44:	ef 92       	push	r14
    2b46:	ff 92       	push	r15
    2b48:	0f 93       	push	r16
    2b4a:	1f 93       	push	r17
	uint32_t mapSector = gState.activeSessionMapSector;
    2b4c:	ec e2       	ldi	r30, 0x2C	; 44
    2b4e:	f7 e0       	ldi	r31, 0x07	; 7
    2b50:	c4 8c       	ldd	r12, Z+28	; 0x1c
    2b52:	d5 8c       	ldd	r13, Z+29	; 0x1d
    2b54:	e6 8c       	ldd	r14, Z+30	; 0x1e
    2b56:	f7 8c       	ldd	r15, Z+31	; 0x1f
	uint32_t mapOffset = gState.activeSessionMapOffset;
    2b58:	80 a0       	ldd	r8, Z+32	; 0x20
    2b5a:	91 a0       	ldd	r9, Z+33	; 0x21
    2b5c:	a2 a0       	ldd	r10, Z+34	; 0x22
    2b5e:	b3 a0       	ldd	r11, Z+35	; 0x23

	if (!SDRead(mapSector, frameBuffer, 1)) {
    2b60:	01 e0       	ldi	r16, 0x01	; 1
    2b62:	10 e0       	ldi	r17, 0x00	; 0
    2b64:	20 e0       	ldi	r18, 0x00	; 0
    2b66:	30 e0       	ldi	r19, 0x00	; 0
    2b68:	4c e2       	ldi	r20, 0x2C	; 44
    2b6a:	53 e0       	ldi	r21, 0x03	; 3
    2b6c:	c7 01       	movw	r24, r14
    2b6e:	b6 01       	movw	r22, r12
    2b70:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <SDRead>
    2b74:	88 23       	and	r24, r24
    2b76:	09 f4       	brne	.+2      	; 0x2b7a <updateSessionMap+0x42>
    2b78:	42 c0       	rjmp	.+132    	; 0x2bfe <updateSessionMap+0xc6>
		return false;
	}

	// Update session map
	*(uint64_t*)(frameBuffer + mapOffset) = gState.newSessionSector;
    2b7a:	f4 01       	movw	r30, r8
    2b7c:	e4 5d       	subi	r30, 0xD4	; 212
    2b7e:	fc 4f       	sbci	r31, 0xFC	; 252
    2b80:	00 91 44 07 	lds	r16, 0x0744	; 0x800744 <gState+0x18>
    2b84:	10 91 45 07 	lds	r17, 0x0745	; 0x800745 <gState+0x19>
    2b88:	20 91 46 07 	lds	r18, 0x0746	; 0x800746 <gState+0x1a>
    2b8c:	30 91 47 07 	lds	r19, 0x0747	; 0x800747 <gState+0x1b>
    2b90:	00 83       	st	Z, r16
    2b92:	11 83       	std	Z+1, r17	; 0x01
    2b94:	22 83       	std	Z+2, r18	; 0x02
    2b96:	33 83       	std	Z+3, r19	; 0x03
    2b98:	14 82       	std	Z+4, r1	; 0x04
    2b9a:	15 82       	std	Z+5, r1	; 0x05
    2b9c:	16 82       	std	Z+6, r1	; 0x06
    2b9e:	17 82       	std	Z+7, r1	; 0x07

	if (!SDWrite(mapSector, frameBuffer, 1)) {
    2ba0:	01 e0       	ldi	r16, 0x01	; 1
    2ba2:	10 e0       	ldi	r17, 0x00	; 0
    2ba4:	20 e0       	ldi	r18, 0x00	; 0
    2ba6:	30 e0       	ldi	r19, 0x00	; 0
    2ba8:	4c e2       	ldi	r20, 0x2C	; 44
    2baa:	53 e0       	ldi	r21, 0x03	; 3
    2bac:	c7 01       	movw	r24, r14
    2bae:	b6 01       	movw	r22, r12
    2bb0:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <SDWrite>
    2bb4:	88 23       	and	r24, r24
    2bb6:	19 f1       	breq	.+70     	; 0x2bfe <updateSessionMap+0xc6>
		return false;
	}

	// Update map pointers
	gState.activeSessionMapOffset += sizeof(uint64_t);
    2bb8:	ec e2       	ldi	r30, 0x2C	; 44
    2bba:	f7 e0       	ldi	r31, 0x07	; 7
    2bbc:	80 a1       	ldd	r24, Z+32	; 0x20
    2bbe:	91 a1       	ldd	r25, Z+33	; 0x21
    2bc0:	a2 a1       	ldd	r26, Z+34	; 0x22
    2bc2:	b3 a1       	ldd	r27, Z+35	; 0x23
    2bc4:	08 96       	adiw	r24, 0x08	; 8
    2bc6:	a1 1d       	adc	r26, r1
    2bc8:	b1 1d       	adc	r27, r1
    2bca:	80 a3       	std	Z+32, r24	; 0x20
    2bcc:	91 a3       	std	Z+33, r25	; 0x21
    2bce:	a2 a3       	std	Z+34, r26	; 0x22
    2bd0:	b3 a3       	std	Z+35, r27	; 0x23
	if (gState.activeSessionMapOffset >= SECTOR_SIZE) {
    2bd2:	81 15       	cp	r24, r1
    2bd4:	92 40       	sbci	r25, 0x02	; 2
    2bd6:	a1 05       	cpc	r26, r1
    2bd8:	b1 05       	cpc	r27, r1
    2bda:	78 f0       	brcs	.+30     	; 0x2bfa <updateSessionMap+0xc2>
		gState.activeSessionMapSector++;
    2bdc:	84 8d       	ldd	r24, Z+28	; 0x1c
    2bde:	95 8d       	ldd	r25, Z+29	; 0x1d
    2be0:	a6 8d       	ldd	r26, Z+30	; 0x1e
    2be2:	b7 8d       	ldd	r27, Z+31	; 0x1f
    2be4:	01 96       	adiw	r24, 0x01	; 1
    2be6:	a1 1d       	adc	r26, r1
    2be8:	b1 1d       	adc	r27, r1
    2bea:	84 8f       	std	Z+28, r24	; 0x1c
    2bec:	95 8f       	std	Z+29, r25	; 0x1d
    2bee:	a6 8f       	std	Z+30, r26	; 0x1e
    2bf0:	b7 8f       	std	Z+31, r27	; 0x1f
		gState.activeSessionMapOffset = 0;
    2bf2:	10 a2       	std	Z+32, r1	; 0x20
    2bf4:	11 a2       	std	Z+33, r1	; 0x21
    2bf6:	12 a2       	std	Z+34, r1	; 0x22
    2bf8:	13 a2       	std	Z+35, r1	; 0x23
	}

	return writeGlobalState();
    2bfa:	0e 94 60 23 	call	0x46c0	; 0x46c0 <writeGlobalState>
}
    2bfe:	1f 91       	pop	r17
    2c00:	0f 91       	pop	r16
    2c02:	ff 90       	pop	r15
    2c04:	ef 90       	pop	r14
    2c06:	df 90       	pop	r13
    2c08:	cf 90       	pop	r12
    2c0a:	bf 90       	pop	r11
    2c0c:	af 90       	pop	r10
    2c0e:	9f 90       	pop	r9
    2c10:	8f 90       	pop	r8
    2c12:	08 95       	ret

Disassembly of section .text.STORE_Init:

000039a8 <STORE_Init>:

bool STORE_Init(void) {
    39a8:	cf 93       	push	r28
	if (!SDInit()) {
    39aa:	0e 94 c9 10 	call	0x2192	; 0x2192 <SDInit>
    39ae:	c8 2f       	mov	r28, r24
    39b0:	88 23       	and	r24, r24
    39b2:	c1 f1       	breq	.+112    	; 0x3a24 <STORE_Init+0x7c>
		return false;
	}

	if (!readGlobalState()) {
    39b4:	0e 94 2f 22 	call	0x445e	; 0x445e <readGlobalState>
    39b8:	81 11       	cpse	r24, r1
    39ba:	22 c0       	rjmp	.+68     	; 0x3a00 <STORE_Init+0x58>
		// Initialize global state if it doesn't exist
		memset(&gState, 0, sizeof(GlobalState));
    39bc:	ec e2       	ldi	r30, 0x2C	; 44
    39be:	f7 e0       	ldi	r31, 0x07	; 7
    39c0:	88 ed       	ldi	r24, 0xD8	; 216
    39c2:	91 e0       	ldi	r25, 0x01	; 1
    39c4:	df 01       	movw	r26, r30
    39c6:	9c 01       	movw	r18, r24
    39c8:	1d 92       	st	X+, r1
    39ca:	21 50       	subi	r18, 0x01	; 1
    39cc:	30 40       	sbci	r19, 0x00	; 0
    39ce:	e1 f7       	brne	.-8      	; 0x39c8 <STORE_Init+0x20>
		gState.firstSessionSector = 1;
    39d0:	81 e0       	ldi	r24, 0x01	; 1
    39d2:	90 e0       	ldi	r25, 0x00	; 0
    39d4:	a0 e0       	ldi	r26, 0x00	; 0
    39d6:	b0 e0       	ldi	r27, 0x00	; 0
    39d8:	84 87       	std	Z+12, r24	; 0x0c
    39da:	95 87       	std	Z+13, r25	; 0x0d
    39dc:	a6 87       	std	Z+14, r26	; 0x0e
    39de:	b7 87       	std	Z+15, r27	; 0x0f
		gState.newSessionSector = 1;
    39e0:	80 8f       	std	Z+24, r24	; 0x18
    39e2:	91 8f       	std	Z+25, r25	; 0x19
    39e4:	a2 8f       	std	Z+26, r26	; 0x1a
    39e6:	b3 8f       	std	Z+27, r27	; 0x1b
		gState.activeSessionMapSector = 4;
    39e8:	84 e0       	ldi	r24, 0x04	; 4
    39ea:	90 e0       	ldi	r25, 0x00	; 0
    39ec:	a0 e0       	ldi	r26, 0x00	; 0
    39ee:	b0 e0       	ldi	r27, 0x00	; 0
    39f0:	84 8f       	std	Z+28, r24	; 0x1c
    39f2:	95 8f       	std	Z+29, r25	; 0x1d
    39f4:	a6 8f       	std	Z+30, r26	; 0x1e
    39f6:	b7 8f       	std	Z+31, r27	; 0x1f
		gState.activeSessionMapOffset = 0;
		// TODO: Initialize other fields as needed
		if (!writeGlobalState()) {
    39f8:	0e 94 60 23 	call	0x46c0	; 0x46c0 <writeGlobalState>
    39fc:	88 23       	and	r24, r24
    39fe:	89 f0       	breq	.+34     	; 0x3a22 <STORE_Init+0x7a>
			return false;
		}
	}

	currentSector = gState.newSessionSector;
    3a00:	80 91 44 07 	lds	r24, 0x0744	; 0x800744 <gState+0x18>
    3a04:	90 91 45 07 	lds	r25, 0x0745	; 0x800745 <gState+0x19>
    3a08:	a0 91 46 07 	lds	r26, 0x0746	; 0x800746 <gState+0x1a>
    3a0c:	b0 91 47 07 	lds	r27, 0x0747	; 0x800747 <gState+0x1b>
    3a10:	80 93 58 09 	sts	0x0958, r24	; 0x800958 <currentSector>
    3a14:	90 93 59 09 	sts	0x0959, r25	; 0x800959 <currentSector+0x1>
    3a18:	a0 93 5a 09 	sts	0x095A, r26	; 0x80095a <currentSector+0x2>
    3a1c:	b0 93 5b 09 	sts	0x095B, r27	; 0x80095b <currentSector+0x3>
	return true;
    3a20:	01 c0       	rjmp	.+2      	; 0x3a24 <STORE_Init+0x7c>
		gState.newSessionSector = 1;
		gState.activeSessionMapSector = 4;
		gState.activeSessionMapOffset = 0;
		// TODO: Initialize other fields as needed
		if (!writeGlobalState()) {
			return false;
    3a22:	c8 2f       	mov	r28, r24
		}
	}

	currentSector = gState.newSessionSector;
	return true;
}
    3a24:	8c 2f       	mov	r24, r28
    3a26:	cf 91       	pop	r28
    3a28:	08 95       	ret

Disassembly of section .text.STORE_WriteFrame:

00002882 <STORE_WriteFrame>:

bool STORE_WriteFrame(volatile FrameData* frame) {
    2882:	8f 92       	push	r8
    2884:	9f 92       	push	r9
    2886:	af 92       	push	r10
    2888:	bf 92       	push	r11
    288a:	cf 92       	push	r12
    288c:	df 92       	push	r13
    288e:	ef 92       	push	r14
    2890:	ff 92       	push	r15
    2892:	0f 93       	push	r16
    2894:	1f 93       	push	r17
    2896:	cf 93       	push	r28
    2898:	df 93       	push	r29
	uint32_t bytesWritten = 0;
	uint32_t currentOffset = 0;
	uint32_t sectorsToWrite;
	
	// Verify frame size
	if(frame->frameBytes > FRAME_BUFFER_SIZE) {
    289a:	fc 01       	movw	r30, r24
    289c:	24 81       	ldd	r18, Z+4	; 0x04
    289e:	35 81       	ldd	r19, Z+5	; 0x05
    28a0:	21 30       	cpi	r18, 0x01	; 1
    28a2:	34 40       	sbci	r19, 0x04	; 4
    28a4:	08 f0       	brcs	.+2      	; 0x28a8 <STORE_WriteFrame+0x26>
    28a6:	5b c0       	rjmp	.+182    	; 0x295e <STORE_WriteFrame+0xdc>
    28a8:	ec 01       	movw	r28, r24
		return false;
	}
	
	// Copy frame data to our buffer
	memcpy(frameBuffer, (const void*)frame, frame->frameBytes);
    28aa:	2c 81       	ldd	r18, Y+4	; 0x04
    28ac:	3d 81       	ldd	r19, Y+5	; 0x05
    28ae:	ac 01       	movw	r20, r24
    28b0:	60 e8       	ldi	r22, 0x80	; 128
    28b2:	8c e2       	ldi	r24, 0x2C	; 44
    28b4:	93 e0       	ldi	r25, 0x03	; 3
    28b6:	0e 94 79 23 	call	0x46f2	; 0x46f2 <memcpy>
	
	// Zero out any remaining buffer space in last sector
	if(frame->frameBytes < FRAME_BUFFER_SIZE) {
    28ba:	8c 81       	ldd	r24, Y+4	; 0x04
    28bc:	9d 81       	ldd	r25, Y+5	; 0x05
    28be:	81 15       	cp	r24, r1
    28c0:	94 40       	sbci	r25, 0x04	; 4
    28c2:	70 f4       	brcc	.+28     	; 0x28e0 <STORE_WriteFrame+0x5e>
		memset(frameBuffer + frame->frameBytes, 0, FRAME_BUFFER_SIZE - frame->frameBytes);
    28c4:	2c 81       	ldd	r18, Y+4	; 0x04
    28c6:	3d 81       	ldd	r19, Y+5	; 0x05
    28c8:	8c 81       	ldd	r24, Y+4	; 0x04
    28ca:	9d 81       	ldd	r25, Y+5	; 0x05
    28cc:	40 e0       	ldi	r20, 0x00	; 0
    28ce:	54 e0       	ldi	r21, 0x04	; 4
    28d0:	42 1b       	sub	r20, r18
    28d2:	53 0b       	sbc	r21, r19
    28d4:	60 e0       	ldi	r22, 0x00	; 0
    28d6:	70 e0       	ldi	r23, 0x00	; 0
    28d8:	84 5d       	subi	r24, 0xD4	; 212
    28da:	9c 4f       	sbci	r25, 0xFC	; 252
    28dc:	0e 94 d0 26 	call	0x4da0	; 0x4da0 <memset>

	currentSector = gState.newSessionSector;
	return true;
}

bool STORE_WriteFrame(volatile FrameData* frame) {
    28e0:	c1 2c       	mov	r12, r1
    28e2:	d1 2c       	mov	r13, r1
    28e4:	76 01       	movw	r14, r12
    28e6:	68 94       	set
    28e8:	c1 f8       	bld	r12, 1
    28ea:	81 2c       	mov	r8, r1
    28ec:	91 2c       	mov	r9, r1
    28ee:	54 01       	movw	r10, r8
    28f0:	2f c0       	rjmp	.+94     	; 0x2950 <STORE_WriteFrame+0xce>
	// Calculate how many complete sectors we need to write
	sectorsToWrite = SECTORS_PER_FRAME;
	
	// Write all sectors
	while(sectorsToWrite > 0) {
		if(!SDWrite(currentSector, frameBuffer + currentOffset, 1)) {
    28f2:	60 91 58 09 	lds	r22, 0x0958	; 0x800958 <currentSector>
    28f6:	70 91 59 09 	lds	r23, 0x0959	; 0x800959 <currentSector+0x1>
    28fa:	80 91 5a 09 	lds	r24, 0x095A	; 0x80095a <currentSector+0x2>
    28fe:	90 91 5b 09 	lds	r25, 0x095B	; 0x80095b <currentSector+0x3>
    2902:	01 e0       	ldi	r16, 0x01	; 1
    2904:	10 e0       	ldi	r17, 0x00	; 0
    2906:	20 e0       	ldi	r18, 0x00	; 0
    2908:	30 e0       	ldi	r19, 0x00	; 0
    290a:	a4 01       	movw	r20, r8
    290c:	44 5d       	subi	r20, 0xD4	; 212
    290e:	5c 4f       	sbci	r21, 0xFC	; 252
    2910:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <SDWrite>
    2914:	88 23       	and	r24, r24
    2916:	21 f1       	breq	.+72     	; 0x2960 <STORE_WriteFrame+0xde>
			return false;
		}
		currentSector++;
    2918:	80 91 58 09 	lds	r24, 0x0958	; 0x800958 <currentSector>
    291c:	90 91 59 09 	lds	r25, 0x0959	; 0x800959 <currentSector+0x1>
    2920:	a0 91 5a 09 	lds	r26, 0x095A	; 0x80095a <currentSector+0x2>
    2924:	b0 91 5b 09 	lds	r27, 0x095B	; 0x80095b <currentSector+0x3>
    2928:	01 96       	adiw	r24, 0x01	; 1
    292a:	a1 1d       	adc	r26, r1
    292c:	b1 1d       	adc	r27, r1
    292e:	80 93 58 09 	sts	0x0958, r24	; 0x800958 <currentSector>
    2932:	90 93 59 09 	sts	0x0959, r25	; 0x800959 <currentSector+0x1>
    2936:	a0 93 5a 09 	sts	0x095A, r26	; 0x80095a <currentSector+0x2>
    293a:	b0 93 5b 09 	sts	0x095B, r27	; 0x80095b <currentSector+0x3>
		currentOffset += SECTOR_SIZE;
    293e:	42 e0       	ldi	r20, 0x02	; 2
    2940:	94 0e       	add	r9, r20
    2942:	a1 1c       	adc	r10, r1
    2944:	b1 1c       	adc	r11, r1
		sectorsToWrite--;
    2946:	81 e0       	ldi	r24, 0x01	; 1
    2948:	c8 1a       	sub	r12, r24
    294a:	d1 08       	sbc	r13, r1
    294c:	e1 08       	sbc	r14, r1
    294e:	f1 08       	sbc	r15, r1
	
	// Calculate how many complete sectors we need to write
	sectorsToWrite = SECTORS_PER_FRAME;
	
	// Write all sectors
	while(sectorsToWrite > 0) {
    2950:	c1 14       	cp	r12, r1
    2952:	d1 04       	cpc	r13, r1
    2954:	e1 04       	cpc	r14, r1
    2956:	f1 04       	cpc	r15, r1
    2958:	61 f6       	brne	.-104    	; 0x28f2 <STORE_WriteFrame+0x70>
		currentSector++;
		currentOffset += SECTOR_SIZE;
		sectorsToWrite--;
	}
	
	return true;
    295a:	81 e0       	ldi	r24, 0x01	; 1
    295c:	01 c0       	rjmp	.+2      	; 0x2960 <STORE_WriteFrame+0xde>
	uint32_t currentOffset = 0;
	uint32_t sectorsToWrite;
	
	// Verify frame size
	if(frame->frameBytes > FRAME_BUFFER_SIZE) {
		return false;
    295e:	80 e0       	ldi	r24, 0x00	; 0
		currentOffset += SECTOR_SIZE;
		sectorsToWrite--;
	}
	
	return true;
}
    2960:	df 91       	pop	r29
    2962:	cf 91       	pop	r28
    2964:	1f 91       	pop	r17
    2966:	0f 91       	pop	r16
    2968:	ff 90       	pop	r15
    296a:	ef 90       	pop	r14
    296c:	df 90       	pop	r13
    296e:	cf 90       	pop	r12
    2970:	bf 90       	pop	r11
    2972:	af 90       	pop	r10
    2974:	9f 90       	pop	r9
    2976:	8f 90       	pop	r8
    2978:	08 95       	ret

Disassembly of section .text.STORE_StartNewSession:

000041f4 <STORE_StartNewSession>:

bool STORE_StartNewSession(void) {
	// Update session info
	gState.sessionCount++;
    41f4:	ec e2       	ldi	r30, 0x2C	; 44
    41f6:	f7 e0       	ldi	r31, 0x07	; 7
    41f8:	84 89       	ldd	r24, Z+20	; 0x14
    41fa:	95 89       	ldd	r25, Z+21	; 0x15
    41fc:	a6 89       	ldd	r26, Z+22	; 0x16
    41fe:	b7 89       	ldd	r27, Z+23	; 0x17
    4200:	01 96       	adiw	r24, 0x01	; 1
    4202:	a1 1d       	adc	r26, r1
    4204:	b1 1d       	adc	r27, r1
    4206:	84 8b       	std	Z+20, r24	; 0x14
    4208:	95 8b       	std	Z+21, r25	; 0x15
    420a:	a6 8b       	std	Z+22, r26	; 0x16
    420c:	b7 8b       	std	Z+23, r27	; 0x17
	gState.newSessionSector = currentSector;
    420e:	80 91 58 09 	lds	r24, 0x0958	; 0x800958 <currentSector>
    4212:	90 91 59 09 	lds	r25, 0x0959	; 0x800959 <currentSector+0x1>
    4216:	a0 91 5a 09 	lds	r26, 0x095A	; 0x80095a <currentSector+0x2>
    421a:	b0 91 5b 09 	lds	r27, 0x095B	; 0x80095b <currentSector+0x3>
    421e:	80 8f       	std	Z+24, r24	; 0x18
    4220:	91 8f       	std	Z+25, r25	; 0x19
    4222:	a2 8f       	std	Z+26, r26	; 0x1a
    4224:	b3 8f       	std	Z+27, r27	; 0x1b
	
	// Ensure sector alignment for new sessions
	if(currentSector % SECTORS_PER_FRAME != 0) {
    4226:	80 ff       	sbrs	r24, 0
    4228:	0c c0       	rjmp	.+24     	; 0x4242 <STORE_StartNewSession+0x4e>
		currentSector += SECTORS_PER_FRAME - (currentSector % SECTORS_PER_FRAME);
    422a:	8e 7f       	andi	r24, 0xFE	; 254
    422c:	02 96       	adiw	r24, 0x02	; 2
    422e:	a1 1d       	adc	r26, r1
    4230:	b1 1d       	adc	r27, r1
    4232:	80 93 58 09 	sts	0x0958, r24	; 0x800958 <currentSector>
    4236:	90 93 59 09 	sts	0x0959, r25	; 0x800959 <currentSector+0x1>
    423a:	a0 93 5a 09 	sts	0x095A, r26	; 0x80095a <currentSector+0x2>
    423e:	b0 93 5b 09 	sts	0x095B, r27	; 0x80095b <currentSector+0x3>
	}
	
	return updateSessionMap();
    4242:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <updateSessionMap>
}
    4246:	08 95       	ret

Disassembly of section .text.STORE_EndSession:

00004046 <STORE_EndSession>:

bool STORE_EndSession(void) {
	// Ensure we end on a frame boundary
	if(currentSector % SECTORS_PER_FRAME != 0) {
    4046:	80 91 58 09 	lds	r24, 0x0958	; 0x800958 <currentSector>
    404a:	90 91 59 09 	lds	r25, 0x0959	; 0x800959 <currentSector+0x1>
    404e:	a0 91 5a 09 	lds	r26, 0x095A	; 0x80095a <currentSector+0x2>
    4052:	b0 91 5b 09 	lds	r27, 0x095B	; 0x80095b <currentSector+0x3>
    4056:	80 ff       	sbrs	r24, 0
    4058:	0c c0       	rjmp	.+24     	; 0x4072 <STORE_EndSession+0x2c>
		currentSector += SECTORS_PER_FRAME - (currentSector % SECTORS_PER_FRAME);
    405a:	8e 7f       	andi	r24, 0xFE	; 254
    405c:	02 96       	adiw	r24, 0x02	; 2
    405e:	a1 1d       	adc	r26, r1
    4060:	b1 1d       	adc	r27, r1
    4062:	80 93 58 09 	sts	0x0958, r24	; 0x800958 <currentSector>
    4066:	90 93 59 09 	sts	0x0959, r25	; 0x800959 <currentSector+0x1>
    406a:	a0 93 5a 09 	sts	0x095A, r26	; 0x80095a <currentSector+0x2>
    406e:	b0 93 5b 09 	sts	0x095B, r27	; 0x80095b <currentSector+0x3>
	}
	
	gState.lastSessionSector = currentSector - 1;
    4072:	80 91 58 09 	lds	r24, 0x0958	; 0x800958 <currentSector>
    4076:	90 91 59 09 	lds	r25, 0x0959	; 0x800959 <currentSector+0x1>
    407a:	a0 91 5a 09 	lds	r26, 0x095A	; 0x80095a <currentSector+0x2>
    407e:	b0 91 5b 09 	lds	r27, 0x095B	; 0x80095b <currentSector+0x3>
    4082:	01 97       	sbiw	r24, 0x01	; 1
    4084:	a1 09       	sbc	r26, r1
    4086:	b1 09       	sbc	r27, r1
    4088:	80 93 3c 07 	sts	0x073C, r24	; 0x80073c <gState+0x10>
    408c:	90 93 3d 07 	sts	0x073D, r25	; 0x80073d <gState+0x11>
    4090:	a0 93 3e 07 	sts	0x073E, r26	; 0x80073e <gState+0x12>
    4094:	b0 93 3f 07 	sts	0x073F, r27	; 0x80073f <gState+0x13>
	return writeGlobalState();
    4098:	0e 94 60 23 	call	0x46c0	; 0x46c0 <writeGlobalState>
}
    409c:	08 95       	ret

Disassembly of section .text.vUARTtxDataAvailable:

00004bec <vUARTtxDataAvailable>:
#endif

bool vUARTIsBusy(void) {
	return ((sg_etxState != ESTATE_IDLE) ||
		(sg_eCell_mc_rxState != ESTATE_IDLE));
}
    4bec:	80 91 7b 09 	lds	r24, 0x097B	; 0x80097b <sg_u8SendIndex>
    4bf0:	81 11       	cpse	r24, r1
    4bf2:	06 c0       	rjmp	.+12     	; 0x4c00 <vUARTtxDataAvailable+0x14>
    4bf4:	0e 94 2a 24 	call	0x4854	; 0x4854 <PlatformGetSendData>
    4bf8:	90 93 61 09 	sts	0x0961, r25	; 0x800961 <sg_u8SendData+0x1>
    4bfc:	80 93 60 09 	sts	0x0960, r24	; 0x800960 <sg_u8SendData>
    4c00:	80 91 7b 09 	lds	r24, 0x097B	; 0x80097b <sg_u8SendIndex>
    4c04:	81 11       	cpse	r24, r1
    4c06:	02 c0       	rjmp	.+4      	; 0x4c0c <vUARTtxDataAvailable+0x20>
    4c08:	81 e0       	ldi	r24, 0x01	; 1
    4c0a:	08 95       	ret
    4c0c:	80 e0       	ldi	r24, 0x00	; 0
    4c0e:	08 95       	ret

Disassembly of section .text.vUARTtxDataGet:

0000438a <vUARTtxDataGet>:
    438a:	80 91 7b 09 	lds	r24, 0x097B	; 0x80097b <sg_u8SendIndex>
    438e:	81 11       	cpse	r24, r1
    4390:	10 c0       	rjmp	.+32     	; 0x43b2 <vUARTtxDataGet+0x28>
    4392:	81 e0       	ldi	r24, 0x01	; 1
    4394:	0e 94 2a 24 	call	0x4854	; 0x4854 <PlatformGetSendData>
    4398:	e0 e6       	ldi	r30, 0x60	; 96
    439a:	f9 e0       	ldi	r31, 0x09	; 9
    439c:	90 83       	st	Z, r25
    439e:	81 83       	std	Z+1, r24	; 0x01
    43a0:	80 81       	ld	r24, Z
    43a2:	88 23       	and	r24, r24
    43a4:	24 f4       	brge	.+8      	; 0x43ae <vUARTtxDataGet+0x24>
    43a6:	81 e0       	ldi	r24, 0x01	; 1
    43a8:	80 93 7f 09 	sts	0x097F, r24	; 0x80097f <sg_bCellReportsReuested>
    43ac:	02 c0       	rjmp	.+4      	; 0x43b2 <vUARTtxDataGet+0x28>
    43ae:	10 92 7f 09 	sts	0x097F, r1	; 0x80097f <sg_bCellReportsReuested>
    43b2:	e0 91 7b 09 	lds	r30, 0x097B	; 0x80097b <sg_u8SendIndex>
    43b6:	f0 e0       	ldi	r31, 0x00	; 0
    43b8:	e0 5a       	subi	r30, 0xA0	; 160
    43ba:	f6 4f       	sbci	r31, 0xF6	; 246
    43bc:	80 81       	ld	r24, Z
    43be:	90 91 7b 09 	lds	r25, 0x097B	; 0x80097b <sg_u8SendIndex>
    43c2:	9f 5f       	subi	r25, 0xFF	; 255
    43c4:	90 93 7b 09 	sts	0x097B, r25	; 0x80097b <sg_u8SendIndex>
    43c8:	90 91 7b 09 	lds	r25, 0x097B	; 0x80097b <sg_u8SendIndex>
    43cc:	92 30       	cpi	r25, 0x02	; 2
    43ce:	10 f0       	brcs	.+4      	; 0x43d4 <vUARTtxDataGet+0x4a>
    43d0:	10 92 7b 09 	sts	0x097B, r1	; 0x80097b <sg_u8SendIndex>
    43d4:	08 95       	ret

Disassembly of section .text.vUARTRXReset:

00004e8c <vUARTRXReset>:

// Called when we have a string timeout or need to reset the state machine
// for the MC RX side of things
void vUARTRXReset(void)
{
	sg_eCell_mc_rxState = ESTATE_IDLE;
    4e8c:	10 92 86 09 	sts	0x0986, r1	; 0x800986 <sg_eCell_mc_rxState>
	vUARTRXStart();
    4e90:	0e 94 9c 26 	call	0x4d38	; 0x4d38 <vUARTRXStart>
    4e94:	08 95       	ret

Disassembly of section .text.vUARTStarttx:

000040f4 <vUARTStarttx>:
#endif

bool vUARTIsBusy(void) {
	return ((sg_etxState != ESTATE_IDLE) ||
		(sg_eCell_mc_rxState != ESTATE_IDLE));
}
    40f4:	80 91 80 09 	lds	r24, 0x0980	; 0x800980 <sg_etxState>
    40f8:	81 11       	cpse	r24, r1
    40fa:	23 c0       	rjmp	.+70     	; 0x4142 <vUARTStarttx+0x4e>
    40fc:	80 91 86 09 	lds	r24, 0x0986	; 0x800986 <sg_eCell_mc_rxState>
    4100:	81 11       	cpse	r24, r1
    4102:	21 c0       	rjmp	.+66     	; 0x4146 <vUARTStarttx+0x52>
    4104:	82 e0       	ldi	r24, 0x02	; 2
    4106:	80 93 80 09 	sts	0x0980, r24	; 0x800980 <sg_etxState>
    410a:	10 92 7b 09 	sts	0x097B, r1	; 0x80097b <sg_u8SendIndex>
    410e:	10 92 83 09 	sts	0x0983, r1	; 0x800983 <sg_u8txBitCount>
    4112:	81 e0       	ldi	r24, 0x01	; 1
    4114:	80 93 7e 09 	sts	0x097E, r24	; 0x80097e <sg_bMCTxNextBit>
    4118:	86 b5       	in	r24, 0x26	; 38
    411a:	8e 5c       	subi	r24, 0xCE	; 206
    411c:	87 bd       	out	0x27, r24	; 39
    411e:	85 b3       	in	r24, 0x15	; 21
    4120:	82 60       	ori	r24, 0x02	; 2
    4122:	85 bb       	out	0x15, r24	; 21
    4124:	ee e6       	ldi	r30, 0x6E	; 110
    4126:	f0 e0       	ldi	r31, 0x00	; 0
    4128:	80 81       	ld	r24, Z
    412a:	82 60       	ori	r24, 0x02	; 2
    412c:	80 83       	st	Z, r24
    412e:	0e 94 f6 25 	call	0x4bec	; 0x4bec <vUARTtxDataAvailable>
    4132:	80 93 81 09 	sts	0x0981, r24	; 0x800981 <sg_btxMoreAvailable>
    4136:	0e 94 c5 21 	call	0x438a	; 0x438a <vUARTtxDataGet>
    413a:	80 93 82 09 	sts	0x0982, r24	; 0x800982 <sg_u8txDataByte>
    413e:	81 e0       	ldi	r24, 0x01	; 1
    4140:	08 95       	ret
    4142:	80 e0       	ldi	r24, 0x00	; 0
    4144:	08 95       	ret
    4146:	80 e0       	ldi	r24, 0x00	; 0
    4148:	08 95       	ret

Disassembly of section .text.__vector_8:

00002f5a <__vector_8>:
    2f5a:	1f 92       	push	r1
    2f5c:	0f 92       	push	r0
    2f5e:	0f b6       	in	r0, 0x3f	; 63
    2f60:	0f 92       	push	r0
    2f62:	11 24       	eor	r1, r1
    2f64:	8f 93       	push	r24
    2f66:	9f 93       	push	r25
    2f68:	ef 93       	push	r30
    2f6a:	ff 93       	push	r31
    2f6c:	80 91 86 09 	lds	r24, 0x0986	; 0x800986 <sg_eCell_mc_rxState>
    2f70:	88 23       	and	r24, r24
    2f72:	11 f0       	breq	.+4      	; 0x2f78 <__vector_8+0x1e>
    2f74:	83 30       	cpi	r24, 0x03	; 3
    2f76:	51 f5       	brne	.+84     	; 0x2fcc <__vector_8+0x72>
    2f78:	86 b5       	in	r24, 0x26	; 38
    2f7a:	85 5c       	subi	r24, 0xC5	; 197
    2f7c:	88 bd       	out	0x28, r24	; 40
    2f7e:	85 b3       	in	r24, 0x15	; 21
    2f80:	84 60       	ori	r24, 0x04	; 4
    2f82:	85 bb       	out	0x15, r24	; 21
    2f84:	ee e6       	ldi	r30, 0x6E	; 110
    2f86:	f0 e0       	ldi	r31, 0x00	; 0
    2f88:	80 81       	ld	r24, Z
    2f8a:	84 60       	ori	r24, 0x04	; 4
    2f8c:	80 83       	st	Z, r24
    2f8e:	e9 e6       	ldi	r30, 0x69	; 105
    2f90:	f0 e0       	ldi	r31, 0x00	; 0
    2f92:	80 81       	ld	r24, Z
    2f94:	83 7f       	andi	r24, 0xF3	; 243
    2f96:	84 60       	ori	r24, 0x04	; 4
    2f98:	80 83       	st	Z, r24
    2f9a:	8c b3       	in	r24, 0x1c	; 28
    2f9c:	82 60       	ori	r24, 0x02	; 2
    2f9e:	8c bb       	out	0x1c, r24	; 28
    2fa0:	80 91 7a 09 	lds	r24, 0x097A	; 0x80097a <sg_bState>
    2fa4:	88 23       	and	r24, r24
    2fa6:	31 f0       	breq	.+12     	; 0x2fb4 <__vector_8+0x5a>
    2fa8:	8b b1       	in	r24, 0x0b	; 11
    2faa:	80 62       	ori	r24, 0x20	; 32
    2fac:	8b b9       	out	0x0b, r24	; 11
    2fae:	10 92 7a 09 	sts	0x097A, r1	; 0x80097a <sg_bState>
    2fb2:	06 c0       	rjmp	.+12     	; 0x2fc0 <__vector_8+0x66>
    2fb4:	8b b1       	in	r24, 0x0b	; 11
    2fb6:	8f 7d       	andi	r24, 0xDF	; 223
    2fb8:	8b b9       	out	0x0b, r24	; 11
    2fba:	81 e0       	ldi	r24, 0x01	; 1
    2fbc:	80 93 7a 09 	sts	0x097A, r24	; 0x80097a <sg_bState>
    2fc0:	81 e0       	ldi	r24, 0x01	; 1
    2fc2:	80 93 86 09 	sts	0x0986, r24	; 0x800986 <sg_eCell_mc_rxState>
    2fc6:	10 92 88 09 	sts	0x0988, r1	; 0x800988 <sg_u8Cell_mc_rxBitCount>
    2fca:	22 c0       	rjmp	.+68     	; 0x3010 <__vector_8+0xb6>
    2fcc:	81 30       	cpi	r24, 0x01	; 1
    2fce:	01 f5       	brne	.+64     	; 0x3010 <__vector_8+0xb6>
    2fd0:	80 91 88 09 	lds	r24, 0x0988	; 0x800988 <sg_u8Cell_mc_rxBitCount>
    2fd4:	88 23       	and	r24, r24
    2fd6:	e1 f0       	breq	.+56     	; 0x3010 <__vector_8+0xb6>
    2fd8:	86 b5       	in	r24, 0x26	; 38
    2fda:	98 b5       	in	r25, 0x28	; 40
    2fdc:	99 51       	subi	r25, 0x19	; 25
    2fde:	89 1b       	sub	r24, r25
    2fe0:	90 91 7d 09 	lds	r25, 0x097D	; 0x80097d <sg_minTimingError>
    2fe4:	89 17       	cp	r24, r25
    2fe6:	14 f4       	brge	.+4      	; 0x2fec <__vector_8+0x92>
    2fe8:	80 93 7d 09 	sts	0x097D, r24	; 0x80097d <sg_minTimingError>
    2fec:	90 91 7c 09 	lds	r25, 0x097C	; 0x80097c <sg_maxTimingError>
    2ff0:	98 17       	cp	r25, r24
    2ff2:	14 f4       	brge	.+4      	; 0x2ff8 <__vector_8+0x9e>
    2ff4:	80 93 7c 09 	sts	0x097C, r24	; 0x80097c <sg_maxTimingError>
    2ff8:	86 b5       	in	r24, 0x26	; 38
    2ffa:	8e 5e       	subi	r24, 0xEE	; 238
    2ffc:	88 bd       	out	0x28, r24	; 40
    2ffe:	80 91 62 09 	lds	r24, 0x0962	; 0x800962 <sg_edgeCorrections>
    3002:	90 91 63 09 	lds	r25, 0x0963	; 0x800963 <sg_edgeCorrections+0x1>
    3006:	01 96       	adiw	r24, 0x01	; 1
    3008:	90 93 63 09 	sts	0x0963, r25	; 0x800963 <sg_edgeCorrections+0x1>
    300c:	80 93 62 09 	sts	0x0962, r24	; 0x800962 <sg_edgeCorrections>
    3010:	ff 91       	pop	r31
    3012:	ef 91       	pop	r30
    3014:	9f 91       	pop	r25
    3016:	8f 91       	pop	r24
    3018:	0f 90       	pop	r0
    301a:	0f be       	out	0x3f, r0	; 63
    301c:	0f 90       	pop	r0
    301e:	1f 90       	pop	r1
    3020:	18 95       	reti

Disassembly of section .text.__vector_16:

00002cec <__vector_16>:
    2cec:	1f 92       	push	r1
    2cee:	0f 92       	push	r0
    2cf0:	0f b6       	in	r0, 0x3f	; 63
    2cf2:	0f 92       	push	r0
    2cf4:	11 24       	eor	r1, r1
    2cf6:	2f 93       	push	r18
    2cf8:	3f 93       	push	r19
    2cfa:	4f 93       	push	r20
    2cfc:	5f 93       	push	r21
    2cfe:	6f 93       	push	r22
    2d00:	7f 93       	push	r23
    2d02:	8f 93       	push	r24
    2d04:	9f 93       	push	r25
    2d06:	af 93       	push	r26
    2d08:	bf 93       	push	r27
    2d0a:	ef 93       	push	r30
    2d0c:	ff 93       	push	r31
    2d0e:	86 b5       	in	r24, 0x26	; 38
    2d10:	85 5d       	subi	r24, 0xD5	; 213
    2d12:	88 bd       	out	0x28, r24	; 40
    2d14:	85 b3       	in	r24, 0x15	; 21
    2d16:	84 60       	ori	r24, 0x04	; 4
    2d18:	85 bb       	out	0x15, r24	; 21
    2d1a:	ee e6       	ldi	r30, 0x6E	; 110
    2d1c:	f0 e0       	ldi	r31, 0x00	; 0
    2d1e:	80 81       	ld	r24, Z
    2d20:	84 60       	ori	r24, 0x04	; 4
    2d22:	80 83       	st	Z, r24
    2d24:	20 91 85 09 	lds	r18, 0x0985	; 0x800985 <sg_bCell_mc_rxPriorState>
    2d28:	83 b1       	in	r24, 0x03	; 3
    2d2a:	82 fb       	bst	r24, 2
    2d2c:	88 27       	eor	r24, r24
    2d2e:	80 f9       	bld	r24, 0
    2d30:	80 93 85 09 	sts	0x0985, r24	; 0x800985 <sg_bCell_mc_rxPriorState>
    2d34:	90 91 7a 09 	lds	r25, 0x097A	; 0x80097a <sg_bState>
    2d38:	99 23       	and	r25, r25
    2d3a:	31 f0       	breq	.+12     	; 0x2d48 <__vector_16+0x5c>
    2d3c:	9b b1       	in	r25, 0x0b	; 11
    2d3e:	90 62       	ori	r25, 0x20	; 32
    2d40:	9b b9       	out	0x0b, r25	; 11
    2d42:	10 92 7a 09 	sts	0x097A, r1	; 0x80097a <sg_bState>
    2d46:	06 c0       	rjmp	.+12     	; 0x2d54 <__vector_16+0x68>
    2d48:	9b b1       	in	r25, 0x0b	; 11
    2d4a:	9f 7d       	andi	r25, 0xDF	; 223
    2d4c:	9b b9       	out	0x0b, r25	; 11
    2d4e:	81 e0       	ldi	r24, 0x01	; 1
    2d50:	80 93 7a 09 	sts	0x097A, r24	; 0x80097a <sg_bState>
    2d54:	80 91 88 09 	lds	r24, 0x0988	; 0x800988 <sg_u8Cell_mc_rxBitCount>
    2d58:	8f 5f       	subi	r24, 0xFF	; 255
    2d5a:	80 93 88 09 	sts	0x0988, r24	; 0x800988 <sg_u8Cell_mc_rxBitCount>
    2d5e:	81 30       	cpi	r24, 0x01	; 1
    2d60:	19 f4       	brne	.+6      	; 0x2d68 <__vector_16+0x7c>
    2d62:	10 92 87 09 	sts	0x0987, r1	; 0x800987 <sg_u8rxDataByte>
    2d66:	1d c0       	rjmp	.+58     	; 0x2da2 <__vector_16+0xb6>
    2d68:	8a 30       	cpi	r24, 0x0A	; 10
    2d6a:	38 f4       	brcc	.+14     	; 0x2d7a <__vector_16+0x8e>
    2d6c:	80 91 87 09 	lds	r24, 0x0987	; 0x800987 <sg_u8rxDataByte>
    2d70:	88 0f       	add	r24, r24
    2d72:	82 2b       	or	r24, r18
    2d74:	80 93 87 09 	sts	0x0987, r24	; 0x800987 <sg_u8rxDataByte>
    2d78:	14 c0       	rjmp	.+40     	; 0x2da2 <__vector_16+0xb6>
    2d7a:	20 93 84 09 	sts	0x0984, r18	; 0x800984 <sg_bCell_mc_rxMoreData>
    2d7e:	88 e0       	ldi	r24, 0x08	; 8
    2d80:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f0069>
    2d84:	8c b3       	in	r24, 0x1c	; 28
    2d86:	82 60       	ori	r24, 0x02	; 2
    2d88:	8c bb       	out	0x1c, r24	; 28
    2d8a:	ee e6       	ldi	r30, 0x6E	; 110
    2d8c:	f0 e0       	ldi	r31, 0x00	; 0
    2d8e:	80 81       	ld	r24, Z
    2d90:	8b 7f       	andi	r24, 0xFB	; 251
    2d92:	80 83       	st	Z, r24
    2d94:	80 91 87 09 	lds	r24, 0x0987	; 0x800987 <sg_u8rxDataByte>
    2d98:	0e 94 89 1e 	call	0x3d12	; 0x3d12 <vUARTRXData>
    2d9c:	83 e0       	ldi	r24, 0x03	; 3
    2d9e:	80 93 86 09 	sts	0x0986, r24	; 0x800986 <sg_eCell_mc_rxState>
    2da2:	ff 91       	pop	r31
    2da4:	ef 91       	pop	r30
    2da6:	bf 91       	pop	r27
    2da8:	af 91       	pop	r26
    2daa:	9f 91       	pop	r25
    2dac:	8f 91       	pop	r24
    2dae:	7f 91       	pop	r23
    2db0:	6f 91       	pop	r22
    2db2:	5f 91       	pop	r21
    2db4:	4f 91       	pop	r20
    2db6:	3f 91       	pop	r19
    2db8:	2f 91       	pop	r18
    2dba:	0f 90       	pop	r0
    2dbc:	0f be       	out	0x3f, r0	; 63
    2dbe:	0f 90       	pop	r0
    2dc0:	1f 90       	pop	r1
    2dc2:	18 95       	reti

Disassembly of section .text.__vector_15:

00002434 <__vector_15>:
    2434:	1f 92       	push	r1
    2436:	0f 92       	push	r0
    2438:	0f b6       	in	r0, 0x3f	; 63
    243a:	0f 92       	push	r0
    243c:	11 24       	eor	r1, r1
    243e:	2f 93       	push	r18
    2440:	3f 93       	push	r19
    2442:	4f 93       	push	r20
    2444:	5f 93       	push	r21
    2446:	6f 93       	push	r22
    2448:	7f 93       	push	r23
    244a:	8f 93       	push	r24
    244c:	9f 93       	push	r25
    244e:	af 93       	push	r26
    2450:	bf 93       	push	r27
    2452:	ef 93       	push	r30
    2454:	ff 93       	push	r31
    2456:	86 b5       	in	r24, 0x26	; 38
    2458:	83 5d       	subi	r24, 0xD3	; 211
    245a:	87 bd       	out	0x27, r24	; 39
    245c:	85 b3       	in	r24, 0x15	; 21
    245e:	82 60       	ori	r24, 0x02	; 2
    2460:	85 bb       	out	0x15, r24	; 21
    2462:	ee e6       	ldi	r30, 0x6E	; 110
    2464:	f0 e0       	ldi	r31, 0x00	; 0
    2466:	80 81       	ld	r24, Z
    2468:	82 60       	ori	r24, 0x02	; 2
    246a:	80 83       	st	Z, r24
    246c:	80 91 7e 09 	lds	r24, 0x097E	; 0x80097e <sg_bMCTxNextBit>
    2470:	88 23       	and	r24, r24
    2472:	21 f0       	breq	.+8      	; 0x247c <__vector_15+0x48>
    2474:	85 b1       	in	r24, 0x05	; 5
    2476:	88 60       	ori	r24, 0x08	; 8
    2478:	85 b9       	out	0x05, r24	; 5
    247a:	03 c0       	rjmp	.+6      	; 0x2482 <__vector_15+0x4e>
    247c:	85 b1       	in	r24, 0x05	; 5
    247e:	87 7f       	andi	r24, 0xF7	; 247
    2480:	85 b9       	out	0x05, r24	; 5
    2482:	80 91 83 09 	lds	r24, 0x0983	; 0x800983 <sg_u8txBitCount>
    2486:	8f 5f       	subi	r24, 0xFF	; 255
    2488:	80 93 83 09 	sts	0x0983, r24	; 0x800983 <sg_u8txBitCount>
    248c:	80 91 83 09 	lds	r24, 0x0983	; 0x800983 <sg_u8txBitCount>
    2490:	83 30       	cpi	r24, 0x03	; 3
    2492:	61 f4       	brne	.+24     	; 0x24ac <__vector_15+0x78>
    2494:	80 91 7f 09 	lds	r24, 0x097F	; 0x80097f <sg_bCellReportsReuested>
    2498:	88 23       	and	r24, r24
    249a:	41 f0       	breq	.+16     	; 0x24ac <__vector_15+0x78>
    249c:	8b e0       	ldi	r24, 0x0B	; 11
    249e:	80 93 83 09 	sts	0x0983, r24	; 0x800983 <sg_u8txBitCount>
    24a2:	10 92 7e 09 	sts	0x097E, r1	; 0x80097e <sg_bMCTxNextBit>
    24a6:	10 92 81 09 	sts	0x0981, r1	; 0x800981 <sg_btxMoreAvailable>
    24aa:	4d c0       	rjmp	.+154    	; 0x2546 <__vector_15+0x112>
    24ac:	80 91 83 09 	lds	r24, 0x0983	; 0x800983 <sg_u8txBitCount>
    24b0:	8a 30       	cpi	r24, 0x0A	; 10
    24b2:	80 f4       	brcc	.+32     	; 0x24d4 <__vector_15+0xa0>
    24b4:	80 91 82 09 	lds	r24, 0x0982	; 0x800982 <sg_u8txDataByte>
    24b8:	88 23       	and	r24, r24
    24ba:	24 f4       	brge	.+8      	; 0x24c4 <__vector_15+0x90>
    24bc:	81 e0       	ldi	r24, 0x01	; 1
    24be:	80 93 7e 09 	sts	0x097E, r24	; 0x80097e <sg_bMCTxNextBit>
    24c2:	02 c0       	rjmp	.+4      	; 0x24c8 <__vector_15+0x94>
    24c4:	10 92 7e 09 	sts	0x097E, r1	; 0x80097e <sg_bMCTxNextBit>
    24c8:	80 91 82 09 	lds	r24, 0x0982	; 0x800982 <sg_u8txDataByte>
    24cc:	88 0f       	add	r24, r24
    24ce:	80 93 82 09 	sts	0x0982, r24	; 0x800982 <sg_u8txDataByte>
    24d2:	39 c0       	rjmp	.+114    	; 0x2546 <__vector_15+0x112>
    24d4:	80 91 83 09 	lds	r24, 0x0983	; 0x800983 <sg_u8txBitCount>
    24d8:	8a 30       	cpi	r24, 0x0A	; 10
    24da:	29 f4       	brne	.+10     	; 0x24e6 <__vector_15+0xb2>
    24dc:	80 91 81 09 	lds	r24, 0x0981	; 0x800981 <sg_btxMoreAvailable>
    24e0:	80 93 7e 09 	sts	0x097E, r24	; 0x80097e <sg_bMCTxNextBit>
    24e4:	30 c0       	rjmp	.+96     	; 0x2546 <__vector_15+0x112>
    24e6:	80 91 83 09 	lds	r24, 0x0983	; 0x800983 <sg_u8txBitCount>
    24ea:	8b 30       	cpi	r24, 0x0B	; 11
    24ec:	19 f4       	brne	.+6      	; 0x24f4 <__vector_15+0xc0>
    24ee:	10 92 7e 09 	sts	0x097E, r1	; 0x80097e <sg_bMCTxNextBit>
    24f2:	29 c0       	rjmp	.+82     	; 0x2546 <__vector_15+0x112>
    24f4:	80 91 83 09 	lds	r24, 0x0983	; 0x800983 <sg_u8txBitCount>
    24f8:	8c 30       	cpi	r24, 0x0C	; 12
    24fa:	29 f5       	brne	.+74     	; 0x2546 <__vector_15+0x112>
    24fc:	80 91 81 09 	lds	r24, 0x0981	; 0x800981 <sg_btxMoreAvailable>
    2500:	80 93 7e 09 	sts	0x097E, r24	; 0x80097e <sg_bMCTxNextBit>
    2504:	10 92 83 09 	sts	0x0983, r1	; 0x800983 <sg_u8txBitCount>
    2508:	80 91 81 09 	lds	r24, 0x0981	; 0x800981 <sg_btxMoreAvailable>
    250c:	81 11       	cpse	r24, r1
    250e:	08 c0       	rjmp	.+16     	; 0x2520 <__vector_15+0xec>
    2510:	10 92 80 09 	sts	0x0980, r1	; 0x800980 <sg_etxState>
    2514:	ee e6       	ldi	r30, 0x6E	; 110
    2516:	f0 e0       	ldi	r31, 0x00	; 0
    2518:	80 81       	ld	r24, Z
    251a:	8d 7f       	andi	r24, 0xFD	; 253
    251c:	80 83       	st	Z, r24
    251e:	13 c0       	rjmp	.+38     	; 0x2546 <__vector_15+0x112>
    2520:	0e 94 f6 25 	call	0x4bec	; 0x4bec <vUARTtxDataAvailable>
    2524:	80 93 81 09 	sts	0x0981, r24	; 0x800981 <sg_btxMoreAvailable>
    2528:	0e 94 c5 21 	call	0x438a	; 0x438a <vUARTtxDataGet>
    252c:	80 93 82 09 	sts	0x0982, r24	; 0x800982 <sg_u8txDataByte>
    2530:	86 b5       	in	r24, 0x26	; 38
    2532:	88 53       	subi	r24, 0x38	; 56
    2534:	87 bd       	out	0x27, r24	; 39
    2536:	85 b3       	in	r24, 0x15	; 21
    2538:	82 60       	ori	r24, 0x02	; 2
    253a:	85 bb       	out	0x15, r24	; 21
    253c:	ee e6       	ldi	r30, 0x6E	; 110
    253e:	f0 e0       	ldi	r31, 0x00	; 0
    2540:	80 81       	ld	r24, Z
    2542:	82 60       	ori	r24, 0x02	; 2
    2544:	80 83       	st	Z, r24
    2546:	ff 91       	pop	r31
    2548:	ef 91       	pop	r30
    254a:	bf 91       	pop	r27
    254c:	af 91       	pop	r26
    254e:	9f 91       	pop	r25
    2550:	8f 91       	pop	r24
    2552:	7f 91       	pop	r23
    2554:	6f 91       	pop	r22
    2556:	5f 91       	pop	r21
    2558:	4f 91       	pop	r20
    255a:	3f 91       	pop	r19
    255c:	2f 91       	pop	r18
    255e:	0f 90       	pop	r0
    2560:	0f be       	out	0x3f, r0	; 63
    2562:	0f 90       	pop	r0
    2564:	1f 90       	pop	r1
    2566:	18 95       	reti

Disassembly of section .text.vUARTInit:

00004586 <vUARTInit>:
    4586:	85 b7       	in	r24, 0x35	; 53
    4588:	8f 7e       	andi	r24, 0xEF	; 239
    458a:	85 bf       	out	0x35, r24	; 53
    458c:	84 b1       	in	r24, 0x04	; 4
    458e:	88 60       	ori	r24, 0x08	; 8
    4590:	84 b9       	out	0x04, r24	; 4
    4592:	84 b1       	in	r24, 0x04	; 4
    4594:	8b 7f       	andi	r24, 0xFB	; 251
    4596:	84 b9       	out	0x04, r24	; 4
    4598:	85 b1       	in	r24, 0x05	; 5
    459a:	8b 7f       	andi	r24, 0xFB	; 251
    459c:	85 b9       	out	0x05, r24	; 5
    459e:	8a b1       	in	r24, 0x0a	; 10
    45a0:	80 62       	ori	r24, 0x20	; 32
    45a2:	8a b9       	out	0x0a, r24	; 10
    45a4:	8b b1       	in	r24, 0x0b	; 11
    45a6:	80 62       	ori	r24, 0x20	; 32
    45a8:	8b b9       	out	0x0b, r24	; 11
    45aa:	8d b3       	in	r24, 0x1d	; 29
    45ac:	8d 7f       	andi	r24, 0xFD	; 253
    45ae:	8d bb       	out	0x1d, r24	; 29
    45b0:	10 92 80 09 	sts	0x0980, r1	; 0x800980 <sg_etxState>
    45b4:	85 b1       	in	r24, 0x05	; 5
    45b6:	87 7f       	andi	r24, 0xF7	; 247
    45b8:	85 b9       	out	0x05, r24	; 5
    45ba:	08 95       	ret

Disassembly of section .text.vUARTInitReceive:

0000487c <vUARTInitReceive>:
    487c:	8f e7       	ldi	r24, 0x7F	; 127
    487e:	80 93 7d 09 	sts	0x097D, r24	; 0x80097d <sg_minTimingError>
    4882:	80 e8       	ldi	r24, 0x80	; 128
    4884:	80 93 7c 09 	sts	0x097C, r24	; 0x80097c <sg_maxTimingError>
    4888:	10 92 63 09 	sts	0x0963, r1	; 0x800963 <sg_edgeCorrections+0x1>
    488c:	10 92 62 09 	sts	0x0962, r1	; 0x800962 <sg_edgeCorrections>
    4890:	88 e0       	ldi	r24, 0x08	; 8
    4892:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f0069>
    4896:	8c b3       	in	r24, 0x1c	; 28
    4898:	82 60       	ori	r24, 0x02	; 2
    489a:	8c bb       	out	0x1c, r24	; 28
    489c:	8d b3       	in	r24, 0x1d	; 29
    489e:	82 60       	ori	r24, 0x02	; 2
    48a0:	8d bb       	out	0x1d, r24	; 29
    48a2:	08 95       	ret

Disassembly of section .text.libgcc.div:

000048a4 <__udivmodhi4>:
    48a4:	aa 1b       	sub	r26, r26
    48a6:	bb 1b       	sub	r27, r27
    48a8:	51 e1       	ldi	r21, 0x11	; 17
    48aa:	07 c0       	rjmp	.+14     	; 0x48ba <__udivmodhi4_ep>

000048ac <__udivmodhi4_loop>:
    48ac:	aa 1f       	adc	r26, r26
    48ae:	bb 1f       	adc	r27, r27
    48b0:	a6 17       	cp	r26, r22
    48b2:	b7 07       	cpc	r27, r23
    48b4:	10 f0       	brcs	.+4      	; 0x48ba <__udivmodhi4_ep>
    48b6:	a6 1b       	sub	r26, r22
    48b8:	b7 0b       	sbc	r27, r23

000048ba <__udivmodhi4_ep>:
    48ba:	88 1f       	adc	r24, r24
    48bc:	99 1f       	adc	r25, r25
    48be:	5a 95       	dec	r21
    48c0:	a9 f7       	brne	.-22     	; 0x48ac <__udivmodhi4_loop>
    48c2:	80 95       	com	r24
    48c4:	90 95       	com	r25
    48c6:	bc 01       	movw	r22, r24
    48c8:	cd 01       	movw	r24, r26
    48ca:	08 95       	ret

Disassembly of section .text.libgcc.div:

0000441a <__udivmodsi4>:
    441a:	a1 e2       	ldi	r26, 0x21	; 33
    441c:	1a 2e       	mov	r1, r26
    441e:	aa 1b       	sub	r26, r26
    4420:	bb 1b       	sub	r27, r27
    4422:	fd 01       	movw	r30, r26
    4424:	0d c0       	rjmp	.+26     	; 0x4440 <__udivmodsi4_ep>

00004426 <__udivmodsi4_loop>:
    4426:	aa 1f       	adc	r26, r26
    4428:	bb 1f       	adc	r27, r27
    442a:	ee 1f       	adc	r30, r30
    442c:	ff 1f       	adc	r31, r31
    442e:	a2 17       	cp	r26, r18
    4430:	b3 07       	cpc	r27, r19
    4432:	e4 07       	cpc	r30, r20
    4434:	f5 07       	cpc	r31, r21
    4436:	20 f0       	brcs	.+8      	; 0x4440 <__udivmodsi4_ep>
    4438:	a2 1b       	sub	r26, r18
    443a:	b3 0b       	sbc	r27, r19
    443c:	e4 0b       	sbc	r30, r20
    443e:	f5 0b       	sbc	r31, r21

00004440 <__udivmodsi4_ep>:
    4440:	66 1f       	adc	r22, r22
    4442:	77 1f       	adc	r23, r23
    4444:	88 1f       	adc	r24, r24
    4446:	99 1f       	adc	r25, r25
    4448:	1a 94       	dec	r1
    444a:	69 f7       	brne	.-38     	; 0x4426 <__udivmodsi4_loop>
    444c:	60 95       	com	r22
    444e:	70 95       	com	r23
    4450:	80 95       	com	r24
    4452:	90 95       	com	r25
    4454:	9b 01       	movw	r18, r22
    4456:	ac 01       	movw	r20, r24
    4458:	bd 01       	movw	r22, r26
    445a:	cf 01       	movw	r24, r30
    445c:	08 95       	ret

Disassembly of section .text.libgcc.div:

00004724 <__divmodsi4>:
    4724:	05 2e       	mov	r0, r21
    4726:	97 fb       	bst	r25, 7
    4728:	1e f4       	brtc	.+6      	; 0x4730 <__divmodsi4+0xc>
    472a:	00 94       	com	r0
    472c:	0e 94 fc 26 	call	0x4df8	; 0x4df8 <__negsi2>
    4730:	57 fd       	sbrc	r21, 7
    4732:	07 d0       	rcall	.+14     	; 0x4742 <__divmodsi4_neg2>
    4734:	0e 94 0d 22 	call	0x441a	; 0x441a <__udivmodsi4>
    4738:	07 fc       	sbrc	r0, 7
    473a:	03 d0       	rcall	.+6      	; 0x4742 <__divmodsi4_neg2>
    473c:	4e f4       	brtc	.+18     	; 0x4750 <__divmodsi4_exit>
    473e:	0c 94 fc 26 	jmp	0x4df8	; 0x4df8 <__negsi2>

00004742 <__divmodsi4_neg2>:
    4742:	50 95       	com	r21
    4744:	40 95       	com	r20
    4746:	30 95       	com	r19
    4748:	21 95       	neg	r18
    474a:	3f 4f       	sbci	r19, 0xFF	; 255
    474c:	4f 4f       	sbci	r20, 0xFF	; 255
    474e:	5f 4f       	sbci	r21, 0xFF	; 255

00004750 <__divmodsi4_exit>:
    4750:	08 95       	ret

Disassembly of section .text.libgcc.div:

00004df8 <__negsi2>:
    4df8:	90 95       	com	r25
    4dfa:	80 95       	com	r24
    4dfc:	70 95       	com	r23
    4dfe:	61 95       	neg	r22
    4e00:	7f 4f       	sbci	r23, 0xFF	; 255
    4e02:	8f 4f       	sbci	r24, 0xFF	; 255
    4e04:	9f 4f       	sbci	r25, 0xFF	; 255
    4e06:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00004c52 <__umulhisi3>:
    4c52:	a2 9f       	mul	r26, r18
    4c54:	b0 01       	movw	r22, r0
    4c56:	b3 9f       	mul	r27, r19
    4c58:	c0 01       	movw	r24, r0
    4c5a:	a3 9f       	mul	r26, r19
    4c5c:	70 0d       	add	r23, r0
    4c5e:	81 1d       	adc	r24, r1
    4c60:	11 24       	eor	r1, r1
    4c62:	91 1d       	adc	r25, r1
    4c64:	b2 9f       	mul	r27, r18
    4c66:	70 0d       	add	r23, r0
    4c68:	81 1d       	adc	r24, r1
    4c6a:	11 24       	eor	r1, r1
    4c6c:	91 1d       	adc	r25, r1
    4c6e:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00004e52 <__usmulhisi3>:
    4e52:	0e 94 29 26 	call	0x4c52	; 0x4c52 <__umulhisi3>

00004e56 <__usmulhisi3_tail>:
    4e56:	b7 ff       	sbrs	r27, 7
    4e58:	08 95       	ret
    4e5a:	82 1b       	sub	r24, r18
    4e5c:	93 0b       	sbc	r25, r19
    4e5e:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00004d4e <__muluhisi3>:
    4d4e:	0e 94 29 26 	call	0x4c52	; 0x4c52 <__umulhisi3>
    4d52:	a5 9f       	mul	r26, r21
    4d54:	90 0d       	add	r25, r0
    4d56:	b4 9f       	mul	r27, r20
    4d58:	90 0d       	add	r25, r0
    4d5a:	a4 9f       	mul	r26, r20
    4d5c:	80 0d       	add	r24, r0
    4d5e:	91 1d       	adc	r25, r1
    4d60:	11 24       	eor	r1, r1
    4d62:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00004e08 <__mulshisi3>:
    4e08:	b7 ff       	sbrs	r27, 7
    4e0a:	0c 94 a7 26 	jmp	0x4d4e	; 0x4d4e <__muluhisi3>

00004e0e <__mulohisi3>:
    4e0e:	0e 94 a7 26 	call	0x4d4e	; 0x4d4e <__muluhisi3>
    4e12:	82 1b       	sub	r24, r18
    4e14:	93 0b       	sbc	r25, r19
    4e16:	08 95       	ret

Disassembly of section .text.libgcc:

00004e18 <__xload_2>:
    4e18:	57 fd       	sbrc	r21, 7
    4e1a:	03 c0       	rjmp	.+6      	; 0x4e22 <__xload_2+0xa>
    4e1c:	65 91       	lpm	r22, Z+
    4e1e:	75 91       	lpm	r23, Z+
    4e20:	08 95       	ret
    4e22:	61 91       	ld	r22, Z+
    4e24:	71 91       	ld	r23, Z+
    4e26:	08 95       	ret

Disassembly of section .text.libgcc:

00004cdc <__xload_4>:
    4cdc:	57 fd       	sbrc	r21, 7
    4cde:	05 c0       	rjmp	.+10     	; 0x4cea <__xload_4+0xe>
    4ce0:	65 91       	lpm	r22, Z+
    4ce2:	75 91       	lpm	r23, Z+
    4ce4:	85 91       	lpm	r24, Z+
    4ce6:	95 91       	lpm	r25, Z+
    4ce8:	08 95       	ret
    4cea:	61 91       	ld	r22, Z+
    4cec:	71 91       	ld	r23, Z+
    4cee:	81 91       	ld	r24, Z+
    4cf0:	91 91       	ld	r25, Z+
    4cf2:	08 95       	ret

Disassembly of section .text.libgcc:

00004cf4 <__adddi3_s8>:
    4cf4:	00 24       	eor	r0, r0
    4cf6:	a7 fd       	sbrc	r26, 7
    4cf8:	00 94       	com	r0
    4cfa:	2a 0f       	add	r18, r26
    4cfc:	30 1d       	adc	r19, r0
    4cfe:	40 1d       	adc	r20, r0
    4d00:	50 1d       	adc	r21, r0
    4d02:	60 1d       	adc	r22, r0
    4d04:	70 1d       	adc	r23, r0
    4d06:	80 1d       	adc	r24, r0
    4d08:	90 1d       	adc	r25, r0
    4d0a:	08 95       	ret

Disassembly of section .text.__dummy_fini:

00004eb0 <_fini>:
    4eb0:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00004eb2 <__funcs_on_exit>:
    4eb2:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00004eb4 <__simulator_exit>:
    4eb4:	08 95       	ret

Disassembly of section .text.exit:

00004d64 <exit>:
    4d64:	ec 01       	movw	r28, r24
    4d66:	0e 94 59 27 	call	0x4eb2	; 0x4eb2 <__funcs_on_exit>
    4d6a:	0e 94 58 27 	call	0x4eb0	; 0x4eb0 <_fini>
    4d6e:	ce 01       	movw	r24, r28
    4d70:	0e 94 5a 27 	call	0x4eb4	; 0x4eb4 <__simulator_exit>
    4d74:	ce 01       	movw	r24, r28
    4d76:	0e 94 55 27 	call	0x4eaa	; 0x4eaa <_Exit>

Disassembly of section .text.memcpy:

000046f2 <memcpy>:
    46f2:	cf 92       	push	r12
    46f4:	df 92       	push	r13
    46f6:	ef 92       	push	r14
    46f8:	6a 01       	movw	r12, r20
    46fa:	e6 2e       	mov	r14, r22
    46fc:	dc 01       	movw	r26, r24
    46fe:	28 0f       	add	r18, r24
    4700:	39 1f       	adc	r19, r25
    4702:	a2 17       	cp	r26, r18
    4704:	b3 07       	cpc	r27, r19
    4706:	51 f0       	breq	.+20     	; 0x471c <memcpy+0x2a>
    4708:	f6 01       	movw	r30, r12
    470a:	44 91       	lpm	r20, Z
    470c:	e7 fc       	sbrc	r14, 7
    470e:	40 81       	ld	r20, Z
    4710:	4d 93       	st	X+, r20
    4712:	4f ef       	ldi	r20, 0xFF	; 255
    4714:	c4 1a       	sub	r12, r20
    4716:	d4 0a       	sbc	r13, r20
    4718:	e4 0a       	sbc	r14, r20
    471a:	f3 cf       	rjmp	.-26     	; 0x4702 <memcpy+0x10>
    471c:	ef 90       	pop	r14
    471e:	df 90       	pop	r13
    4720:	cf 90       	pop	r12
    4722:	08 95       	ret

Disassembly of section .text.memset:

00004da0 <memset>:
    4da0:	fc 01       	movw	r30, r24
    4da2:	48 0f       	add	r20, r24
    4da4:	59 1f       	adc	r21, r25
    4da6:	e4 17       	cp	r30, r20
    4da8:	f5 07       	cpc	r31, r21
    4daa:	11 f0       	breq	.+4      	; 0x4db0 <memset+0x10>
    4dac:	61 93       	st	Z+, r22
    4dae:	fb cf       	rjmp	.-10     	; 0x4da6 <memset+0x6>
    4db0:	08 95       	ret

Disassembly of section .text.gmtime:

00004e96 <gmtime>:
    4e96:	44 e0       	ldi	r20, 0x04	; 4
    4e98:	59 e0       	ldi	r21, 0x09	; 9
    4e9a:	0e 94 c6 1e 	call	0x3d8c	; 0x3d8c <__gmtime_r>
    4e9e:	08 95       	ret

Disassembly of section .text.__gmtime_r:

00003d8c <__gmtime_r>:
    3d8c:	a0 e0       	ldi	r26, 0x00	; 0
    3d8e:	b0 e0       	ldi	r27, 0x00	; 0
    3d90:	ec ec       	ldi	r30, 0xCC	; 204
    3d92:	fe e1       	ldi	r31, 0x1E	; 30
    3d94:	0c 94 ad 22 	jmp	0x455a	; 0x455a <__prologue_saves__+0xc>
    3d98:	ea 01       	movw	r28, r20
    3d9a:	fb 01       	movw	r30, r22
    3d9c:	58 2f       	mov	r21, r24
    3d9e:	0e 94 6e 26 	call	0x4cdc	; 0x4cdc <__xload_4>
    3da2:	4b 01       	movw	r8, r22
    3da4:	5c 01       	movw	r10, r24
    3da6:	c1 2c       	mov	r12, r1
    3da8:	d1 2c       	mov	r13, r1
    3daa:	76 01       	movw	r14, r12
    3dac:	8e 01       	movw	r16, r28
    3dae:	9b 01       	movw	r18, r22
    3db0:	a5 01       	movw	r20, r10
    3db2:	60 e0       	ldi	r22, 0x00	; 0
    3db4:	70 e0       	ldi	r23, 0x00	; 0
    3db6:	80 e0       	ldi	r24, 0x00	; 0
    3db8:	90 e0       	ldi	r25, 0x00	; 0
    3dba:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <__secs_to_tm>
    3dbe:	97 ff       	sbrs	r25, 7
    3dc0:	09 c0       	rjmp	.+18     	; 0x3dd4 <__gmtime_r+0x48>
    3dc2:	8f e4       	ldi	r24, 0x4F	; 79
    3dc4:	90 e0       	ldi	r25, 0x00	; 0
    3dc6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
    3dca:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
    3dce:	80 e0       	ldi	r24, 0x00	; 0
    3dd0:	90 e0       	ldi	r25, 0x00	; 0
    3dd2:	0d c0       	rjmp	.+26     	; 0x3dee <__gmtime_r+0x62>
    3dd4:	19 8a       	std	Y+17, r1	; 0x11
    3dd6:	18 8a       	std	Y+16, r1	; 0x10
    3dd8:	1a 8a       	std	Y+18, r1	; 0x12
    3dda:	1b 8a       	std	Y+19, r1	; 0x13
    3ddc:	1c 8a       	std	Y+20, r1	; 0x14
    3dde:	1d 8a       	std	Y+21, r1	; 0x15
    3de0:	8f ea       	ldi	r24, 0xAF	; 175
    3de2:	93 e0       	ldi	r25, 0x03	; 3
    3de4:	a0 e0       	ldi	r26, 0x00	; 0
    3de6:	8e 8b       	std	Y+22, r24	; 0x16
    3de8:	9f 8b       	std	Y+23, r25	; 0x17
    3dea:	a8 8f       	std	Y+24, r26	; 0x18
    3dec:	ce 01       	movw	r24, r28
    3dee:	cd b7       	in	r28, 0x3d	; 61
    3df0:	de b7       	in	r29, 0x3e	; 62
    3df2:	ec e0       	ldi	r30, 0x0C	; 12
    3df4:	0c 94 e4 22 	jmp	0x45c8	; 0x45c8 <__epilogue_restores__+0xc>

Disassembly of section .text.mktime:

00003922 <mktime>:
    3922:	a9 e1       	ldi	r26, 0x19	; 25
    3924:	b0 e0       	ldi	r27, 0x00	; 0
    3926:	e7 e9       	ldi	r30, 0x97	; 151
    3928:	fc e1       	ldi	r31, 0x1C	; 28
    392a:	0c 94 a9 22 	jmp	0x4552	; 0x4552 <__prologue_saves__+0x4>
    392e:	2c 01       	movw	r4, r24
    3930:	bc 01       	movw	r22, r24
    3932:	80 e8       	ldi	r24, 0x80	; 128
    3934:	0e 94 65 0e 	call	0x1cca	; 0x1cca <__tm_to_secs>
    3938:	39 01       	movw	r6, r18
    393a:	4a 01       	movw	r8, r20
    393c:	59 01       	movw	r10, r18
    393e:	6a 01       	movw	r12, r20
    3940:	e1 2c       	mov	r14, r1
    3942:	f1 2c       	mov	r15, r1
    3944:	00 e0       	ldi	r16, 0x00	; 0
    3946:	10 e0       	ldi	r17, 0x00	; 0
    3948:	0e 94 eb 26 	call	0x4dd6	; 0x4dd6 <__cmpdi2>
    394c:	f9 f4       	brne	.+62     	; 0x398c <mktime+0x6a>
    394e:	1a 8a       	std	Y+18, r1	; 0x12
    3950:	19 8a       	std	Y+17, r1	; 0x11
    3952:	1b 8a       	std	Y+19, r1	; 0x13
    3954:	1c 8a       	std	Y+20, r1	; 0x14
    3956:	1d 8a       	std	Y+21, r1	; 0x15
    3958:	1e 8a       	std	Y+22, r1	; 0x16
    395a:	23 eb       	ldi	r18, 0xB3	; 179
    395c:	33 e0       	ldi	r19, 0x03	; 3
    395e:	40 e0       	ldi	r20, 0x00	; 0
    3960:	2f 8b       	std	Y+23, r18	; 0x17
    3962:	38 8f       	std	Y+24, r19	; 0x18
    3964:	49 8f       	std	Y+25, r20	; 0x19
    3966:	8e 01       	movw	r16, r28
    3968:	0f 5f       	subi	r16, 0xFF	; 255
    396a:	1f 4f       	sbci	r17, 0xFF	; 255
    396c:	93 01       	movw	r18, r6
    396e:	48 2d       	mov	r20, r8
    3970:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <__secs_to_tm>
    3974:	97 fd       	sbrc	r25, 7
    3976:	0a c0       	rjmp	.+20     	; 0x398c <mktime+0x6a>
    3978:	89 e1       	ldi	r24, 0x19	; 25
    397a:	f8 01       	movw	r30, r16
    397c:	d2 01       	movw	r26, r4
    397e:	01 90       	ld	r0, Z+
    3980:	0d 92       	st	X+, r0
    3982:	8a 95       	dec	r24
    3984:	e1 f7       	brne	.-8      	; 0x397e <mktime+0x5c>
    3986:	b3 01       	movw	r22, r6
    3988:	c4 01       	movw	r24, r8
    398a:	0a c0       	rjmp	.+20     	; 0x39a0 <mktime+0x7e>
    398c:	8f e4       	ldi	r24, 0x4F	; 79
    398e:	90 e0       	ldi	r25, 0x00	; 0
    3990:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
    3994:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
    3998:	6f ef       	ldi	r22, 0xFF	; 255
    399a:	7f ef       	ldi	r23, 0xFF	; 255
    399c:	8f ef       	ldi	r24, 0xFF	; 255
    399e:	9f ef       	ldi	r25, 0xFF	; 255
    39a0:	69 96       	adiw	r28, 0x19	; 25
    39a2:	e0 e1       	ldi	r30, 0x10	; 16
    39a4:	0c 94 e0 22 	jmp	0x45c0	; 0x45c0 <__epilogue_restores__+0x4>

Disassembly of section .text._Exit:

00004eaa <_Exit>:
    4eaa:	0e 94 6b 00 	call	0xd6	; 0xd6 <_exit>

Disassembly of section .text.__tm_to_secs:

00001cca <__tm_to_secs>:
    1cca:	a5 e0       	ldi	r26, 0x05	; 5
    1ccc:	b0 e0       	ldi	r27, 0x00	; 0
    1cce:	eb e6       	ldi	r30, 0x6B	; 107
    1cd0:	fe e0       	ldi	r31, 0x0E	; 14
    1cd2:	0c 94 a7 22 	jmp	0x454e	; 0x454e <__prologue_saves__>
    1cd6:	3b 01       	movw	r6, r22
    1cd8:	88 2e       	mov	r8, r24
    1cda:	a8 2f       	mov	r26, r24
    1cdc:	cb 01       	movw	r24, r22
    1cde:	0a 96       	adiw	r24, 0x0a	; 10
    1ce0:	a1 1d       	adc	r26, r1
    1ce2:	fc 01       	movw	r30, r24
    1ce4:	5a 2f       	mov	r21, r26
    1ce6:	0e 94 0c 27 	call	0x4e18	; 0x4e18 <__xload_2>
    1cea:	5b 01       	movw	r10, r22
    1cec:	9b 01       	movw	r18, r22
    1cee:	9b 2c       	mov	r9, r11
    1cf0:	99 0c       	add	r9, r9
    1cf2:	99 08       	sbc	r9, r9
    1cf4:	f9 2c       	mov	r15, r9
    1cf6:	b9 2d       	mov	r27, r9
    1cf8:	a9 2d       	mov	r26, r9
    1cfa:	89 2d       	mov	r24, r9
    1cfc:	99 2d       	mov	r25, r9
    1cfe:	e8 2c       	mov	r14, r8
    1d00:	63 01       	movw	r12, r6
    1d02:	48 e0       	ldi	r20, 0x08	; 8
    1d04:	c4 0e       	add	r12, r20
    1d06:	d1 1c       	adc	r13, r1
    1d08:	e1 1c       	adc	r14, r1
    1d0a:	f6 01       	movw	r30, r12
    1d0c:	5e 2d       	mov	r21, r14
    1d0e:	0e 94 0c 27 	call	0x4e18	; 0x4e18 <__xload_2>
    1d12:	2b 01       	movw	r4, r22
    1d14:	6c 30       	cpi	r22, 0x0C	; 12
    1d16:	71 05       	cpc	r23, r1
    1d18:	10 f1       	brcs	.+68     	; 0x1d5e <__tm_to_secs+0x94>
    1d1a:	cb 01       	movw	r24, r22
    1d1c:	6c e0       	ldi	r22, 0x0C	; 12
    1d1e:	70 e0       	ldi	r23, 0x00	; 0
    1d20:	0e 94 66 24 	call	0x48cc	; 0x48cc <__divmodhi4>
    1d24:	2c 01       	movw	r4, r24
    1d26:	97 ff       	sbrs	r25, 7
    1d28:	05 c0       	rjmp	.+10     	; 0x1d34 <__tm_to_secs+0x6a>
    1d2a:	61 50       	subi	r22, 0x01	; 1
    1d2c:	71 09       	sbc	r23, r1
    1d2e:	8c e0       	ldi	r24, 0x0C	; 12
    1d30:	48 0e       	add	r4, r24
    1d32:	51 1c       	adc	r5, r1
    1d34:	97 2f       	mov	r25, r23
    1d36:	99 0f       	add	r25, r25
    1d38:	99 0b       	sbc	r25, r25
    1d3a:	9b 01       	movw	r18, r22
    1d3c:	49 2f       	mov	r20, r25
    1d3e:	59 2f       	mov	r21, r25
    1d40:	69 2f       	mov	r22, r25
    1d42:	79 2f       	mov	r23, r25
    1d44:	89 2f       	mov	r24, r25
    1d46:	c9 2c       	mov	r12, r9
    1d48:	d9 2c       	mov	r13, r9
    1d4a:	e9 2c       	mov	r14, r9
    1d4c:	f9 2c       	mov	r15, r9
    1d4e:	09 2d       	mov	r16, r9
    1d50:	19 2d       	mov	r17, r9
    1d52:	0e 94 e2 26 	call	0x4dc4	; 0x4dc4 <__adddi3>
    1d56:	94 2e       	mov	r9, r20
    1d58:	f5 2e       	mov	r15, r21
    1d5a:	b6 2f       	mov	r27, r22
    1d5c:	a7 2f       	mov	r26, r23
    1d5e:	8e 01       	movw	r16, r28
    1d60:	0f 5f       	subi	r16, 0xFF	; 255
    1d62:	1f 4f       	sbci	r17, 0xFF	; 255
    1d64:	49 2d       	mov	r20, r9
    1d66:	5f 2d       	mov	r21, r15
    1d68:	6b 2f       	mov	r22, r27
    1d6a:	7a 2f       	mov	r23, r26
    1d6c:	0e 94 11 0a 	call	0x1422	; 0x1422 <__year_to_secs>
    1d70:	59 01       	movw	r10, r18
    1d72:	6a 01       	movw	r12, r20
    1d74:	7b 01       	movw	r14, r22
    1d76:	8c 01       	movw	r16, r24
    1d78:	69 81       	ldd	r22, Y+1	; 0x01
    1d7a:	7a 81       	ldd	r23, Y+2	; 0x02
    1d7c:	c2 01       	movw	r24, r4
    1d7e:	0e 94 6c 22 	call	0x44d8	; 0x44d8 <__month_to_secs>
    1d82:	1b 01       	movw	r2, r22
    1d84:	2c 01       	movw	r4, r24
    1d86:	55 0c       	add	r5, r5
    1d88:	22 08       	sbc	r2, r2
    1d8a:	32 2c       	mov	r3, r2
    1d8c:	21 01       	movw	r4, r2
    1d8e:	9b 01       	movw	r18, r22
    1d90:	ac 01       	movw	r20, r24
    1d92:	62 2d       	mov	r22, r2
    1d94:	72 2d       	mov	r23, r2
    1d96:	82 2d       	mov	r24, r2
    1d98:	92 2d       	mov	r25, r2
    1d9a:	0e 94 e2 26 	call	0x4dc4	; 0x4dc4 <__adddi3>
    1d9e:	19 01       	movw	r2, r18
    1da0:	2a 01       	movw	r4, r20
    1da2:	96 2e       	mov	r9, r22
    1da4:	7b 83       	std	Y+3, r23	; 0x03
    1da6:	8c 83       	std	Y+4, r24	; 0x04
    1da8:	9d 83       	std	Y+5, r25	; 0x05
    1daa:	a8 2d       	mov	r26, r8
    1dac:	c3 01       	movw	r24, r6
    1dae:	06 96       	adiw	r24, 0x06	; 6
    1db0:	a1 1d       	adc	r26, r1
    1db2:	fc 01       	movw	r30, r24
    1db4:	5a 2f       	mov	r21, r26
    1db6:	0e 94 0c 27 	call	0x4e18	; 0x4e18 <__xload_2>
    1dba:	61 50       	subi	r22, 0x01	; 1
    1dbc:	71 09       	sbc	r23, r1
    1dbe:	97 2f       	mov	r25, r23
    1dc0:	99 0f       	add	r25, r25
    1dc2:	99 0b       	sbc	r25, r25
    1dc4:	30 e8       	ldi	r19, 0x80	; 128
    1dc6:	a3 2e       	mov	r10, r19
    1dc8:	41 e5       	ldi	r20, 0x51	; 81
    1dca:	b4 2e       	mov	r11, r20
    1dcc:	cc 24       	eor	r12, r12
    1dce:	c3 94       	inc	r12
    1dd0:	d1 2c       	mov	r13, r1
    1dd2:	e1 2c       	mov	r14, r1
    1dd4:	f1 2c       	mov	r15, r1
    1dd6:	00 e0       	ldi	r16, 0x00	; 0
    1dd8:	10 e0       	ldi	r17, 0x00	; 0
    1dda:	9b 01       	movw	r18, r22
    1ddc:	49 2f       	mov	r20, r25
    1dde:	59 2f       	mov	r21, r25
    1de0:	69 2f       	mov	r22, r25
    1de2:	79 2f       	mov	r23, r25
    1de4:	89 2f       	mov	r24, r25
    1de6:	0e 94 98 1a 	call	0x3530	; 0x3530 <__muldi3>
    1dea:	51 01       	movw	r10, r2
    1dec:	62 01       	movw	r12, r4
    1dee:	e9 2c       	mov	r14, r9
    1df0:	fb 80       	ldd	r15, Y+3	; 0x03
    1df2:	0c 81       	ldd	r16, Y+4	; 0x04
    1df4:	1d 81       	ldd	r17, Y+5	; 0x05
    1df6:	0e 94 e2 26 	call	0x4dc4	; 0x4dc4 <__adddi3>
    1dfa:	59 01       	movw	r10, r18
    1dfc:	6a 01       	movw	r12, r20
    1dfe:	7b 01       	movw	r14, r22
    1e00:	8c 01       	movw	r16, r24
    1e02:	a8 2d       	mov	r26, r8
    1e04:	c3 01       	movw	r24, r6
    1e06:	04 96       	adiw	r24, 0x04	; 4
    1e08:	a1 1d       	adc	r26, r1
    1e0a:	fc 01       	movw	r30, r24
    1e0c:	5a 2f       	mov	r21, r26
    1e0e:	0e 94 0c 27 	call	0x4e18	; 0x4e18 <__xload_2>
    1e12:	07 2e       	mov	r0, r23
    1e14:	00 0c       	add	r0, r0
    1e16:	88 0b       	sbc	r24, r24
    1e18:	99 0b       	sbc	r25, r25
    1e1a:	20 e1       	ldi	r18, 0x10	; 16
    1e1c:	3e e0       	ldi	r19, 0x0E	; 14
    1e1e:	40 e0       	ldi	r20, 0x00	; 0
    1e20:	50 e0       	ldi	r21, 0x00	; 0
    1e22:	0e 94 38 26 	call	0x4c70	; 0x4c70 <__mulsidi3>
    1e26:	0e 94 e2 26 	call	0x4dc4	; 0x4dc4 <__adddi3>
    1e2a:	59 01       	movw	r10, r18
    1e2c:	6a 01       	movw	r12, r20
    1e2e:	7b 01       	movw	r14, r22
    1e30:	8c 01       	movw	r16, r24
    1e32:	a8 2d       	mov	r26, r8
    1e34:	c3 01       	movw	r24, r6
    1e36:	02 96       	adiw	r24, 0x02	; 2
    1e38:	a1 1d       	adc	r26, r1
    1e3a:	fc 01       	movw	r30, r24
    1e3c:	5a 2f       	mov	r21, r26
    1e3e:	0e 94 0c 27 	call	0x4e18	; 0x4e18 <__xload_2>
    1e42:	07 2e       	mov	r0, r23
    1e44:	00 0c       	add	r0, r0
    1e46:	88 0b       	sbc	r24, r24
    1e48:	99 0b       	sbc	r25, r25
    1e4a:	2c e3       	ldi	r18, 0x3C	; 60
    1e4c:	30 e0       	ldi	r19, 0x00	; 0
    1e4e:	40 e0       	ldi	r20, 0x00	; 0
    1e50:	50 e0       	ldi	r21, 0x00	; 0
    1e52:	0e 94 38 26 	call	0x4c70	; 0x4c70 <__mulsidi3>
    1e56:	0e 94 e2 26 	call	0x4dc4	; 0x4dc4 <__adddi3>
    1e5a:	59 01       	movw	r10, r18
    1e5c:	6a 01       	movw	r12, r20
    1e5e:	7b 01       	movw	r14, r22
    1e60:	8c 01       	movw	r16, r24
    1e62:	f3 01       	movw	r30, r6
    1e64:	58 2d       	mov	r21, r8
    1e66:	0e 94 0c 27 	call	0x4e18	; 0x4e18 <__xload_2>
    1e6a:	9b 01       	movw	r18, r22
    1e6c:	93 2f       	mov	r25, r19
    1e6e:	99 0f       	add	r25, r25
    1e70:	99 0b       	sbc	r25, r25
    1e72:	49 2f       	mov	r20, r25
    1e74:	59 2f       	mov	r21, r25
    1e76:	69 2f       	mov	r22, r25
    1e78:	79 2f       	mov	r23, r25
    1e7a:	89 2f       	mov	r24, r25
    1e7c:	0e 94 e2 26 	call	0x4dc4	; 0x4dc4 <__adddi3>
    1e80:	25 96       	adiw	r28, 0x05	; 5
    1e82:	e2 e1       	ldi	r30, 0x12	; 18
    1e84:	0c 94 de 22 	jmp	0x45bc	; 0x45bc <__epilogue_restores__>

Disassembly of section .text.__year_to_secs:

00001422 <__year_to_secs>:
    1422:	ac e0       	ldi	r26, 0x0C	; 12
    1424:	b0 e0       	ldi	r27, 0x00	; 0
    1426:	e7 e1       	ldi	r30, 0x17	; 23
    1428:	fa e0       	ldi	r31, 0x0A	; 10
    142a:	0c 94 a7 22 	jmp	0x454e	; 0x454e <__prologue_saves__>
    142e:	49 01       	movw	r8, r18
    1430:	5a 01       	movw	r10, r20
    1432:	6b 01       	movw	r12, r22
    1434:	7c 01       	movw	r14, r24
    1436:	1c 83       	std	Y+4, r17	; 0x04
    1438:	0b 83       	std	Y+3, r16	; 0x03
    143a:	2a 38       	cpi	r18, 0x8A	; 138
    143c:	31 05       	cpc	r19, r1
    143e:	41 05       	cpc	r20, r1
    1440:	51 05       	cpc	r21, r1
    1442:	61 05       	cpc	r22, r1
    1444:	71 05       	cpc	r23, r1
    1446:	81 05       	cpc	r24, r1
    1448:	91 05       	cpc	r25, r1
    144a:	11 f0       	breq	.+4      	; 0x1450 <__year_to_secs+0x2e>
    144c:	0c f0       	brlt	.+2      	; 0x1450 <__year_to_secs+0x2e>
    144e:	42 c0       	rjmp	.+132    	; 0x14d4 <__year_to_secs+0xb2>
    1450:	f9 01       	movw	r30, r18
    1452:	e4 54       	subi	r30, 0x44	; 68
    1454:	f1 09       	sbc	r31, r1
    1456:	f5 95       	asr	r31
    1458:	e7 95       	ror	r30
    145a:	f5 95       	asr	r31
    145c:	e7 95       	ror	r30
    145e:	c9 01       	movw	r24, r18
    1460:	83 70       	andi	r24, 0x03	; 3
    1462:	99 27       	eor	r25, r25
    1464:	89 2b       	or	r24, r25
    1466:	51 f4       	brne	.+20     	; 0x147c <__year_to_secs+0x5a>
    1468:	31 97       	sbiw	r30, 0x01	; 1
    146a:	01 15       	cp	r16, r1
    146c:	11 05       	cpc	r17, r1
    146e:	69 f0       	breq	.+26     	; 0x148a <__year_to_secs+0x68>
    1470:	81 e0       	ldi	r24, 0x01	; 1
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	d8 01       	movw	r26, r16
    1476:	8d 93       	st	X+, r24
    1478:	9c 93       	st	X, r25
    147a:	07 c0       	rjmp	.+14     	; 0x148a <__year_to_secs+0x68>
    147c:	8b 81       	ldd	r24, Y+3	; 0x03
    147e:	9c 81       	ldd	r25, Y+4	; 0x04
    1480:	00 97       	sbiw	r24, 0x00	; 0
    1482:	19 f0       	breq	.+6      	; 0x148a <__year_to_secs+0x68>
    1484:	dc 01       	movw	r26, r24
    1486:	1d 92       	st	X+, r1
    1488:	1c 92       	st	X, r1
    148a:	d9 01       	movw	r26, r18
    148c:	a6 54       	subi	r26, 0x46	; 70
    148e:	b1 09       	sbc	r27, r1
    1490:	20 e8       	ldi	r18, 0x80	; 128
    1492:	33 e3       	ldi	r19, 0x33	; 51
    1494:	41 ee       	ldi	r20, 0xE1	; 225
    1496:	51 e0       	ldi	r21, 0x01	; 1
    1498:	0e 94 04 27 	call	0x4e08	; 0x4e08 <__mulshisi3>
    149c:	6b 01       	movw	r12, r22
    149e:	7c 01       	movw	r14, r24
    14a0:	df 01       	movw	r26, r30
    14a2:	20 e8       	ldi	r18, 0x80	; 128
    14a4:	31 e5       	ldi	r19, 0x51	; 81
    14a6:	41 e0       	ldi	r20, 0x01	; 1
    14a8:	50 e0       	ldi	r21, 0x00	; 0
    14aa:	0e 94 04 27 	call	0x4e08	; 0x4e08 <__mulshisi3>
    14ae:	dc 01       	movw	r26, r24
    14b0:	cb 01       	movw	r24, r22
    14b2:	8c 0d       	add	r24, r12
    14b4:	9d 1d       	adc	r25, r13
    14b6:	ae 1d       	adc	r26, r14
    14b8:	bf 1d       	adc	r27, r15
    14ba:	9c 01       	movw	r18, r24
    14bc:	ad 01       	movw	r20, r26
    14be:	6c 01       	movw	r12, r24
    14c0:	7d 01       	movw	r14, r26
    14c2:	ff 0c       	add	r15, r15
    14c4:	cc 08       	sbc	r12, r12
    14c6:	dc 2c       	mov	r13, r12
    14c8:	76 01       	movw	r14, r12
    14ca:	ac 2d       	mov	r26, r12
    14cc:	fc 2d       	mov	r31, r12
    14ce:	ec 2d       	mov	r30, r12
    14d0:	9c 2d       	mov	r25, r12
    14d2:	cb c0       	rjmp	.+406    	; 0x166a <__year_to_secs+0x248>
    14d4:	eb 81       	ldd	r30, Y+3	; 0x03
    14d6:	fc 81       	ldd	r31, Y+4	; 0x04
    14d8:	ef 2b       	or	r30, r31
    14da:	31 f4       	brne	.+12     	; 0x14e8 <__year_to_secs+0xc6>
    14dc:	1a 82       	std	Y+2, r1	; 0x02
    14de:	19 82       	std	Y+1, r1	; 0x01
    14e0:	ce 01       	movw	r24, r28
    14e2:	01 96       	adiw	r24, 0x01	; 1
    14e4:	9c 83       	std	Y+4, r25	; 0x04
    14e6:	8b 83       	std	Y+3, r24	; 0x03
    14e8:	c4 01       	movw	r24, r8
    14ea:	84 56       	subi	r24, 0x64	; 100
    14ec:	91 09       	sbc	r25, r1
    14ee:	60 e9       	ldi	r22, 0x90	; 144
    14f0:	71 e0       	ldi	r23, 0x01	; 1
    14f2:	0e 94 66 24 	call	0x48cc	; 0x48cc <__divmodhi4>
    14f6:	7e 83       	std	Y+6, r23	; 0x06
    14f8:	6d 83       	std	Y+5, r22	; 0x05
    14fa:	94 01       	movw	r18, r8
    14fc:	a5 01       	movw	r20, r10
    14fe:	b6 01       	movw	r22, r12
    1500:	c7 01       	movw	r24, r14
    1502:	ac e9       	ldi	r26, 0x9C	; 156
    1504:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__adddi3_s8>
    1508:	19 01       	movw	r2, r18
    150a:	2a 01       	movw	r4, r20
    150c:	3b 01       	movw	r6, r22
    150e:	8f 83       	std	Y+7, r24	; 0x07
    1510:	98 87       	std	Y+8, r25	; 0x08
    1512:	70 e9       	ldi	r23, 0x90	; 144
    1514:	a7 2e       	mov	r10, r23
    1516:	bb 24       	eor	r11, r11
    1518:	b3 94       	inc	r11
    151a:	c1 2c       	mov	r12, r1
    151c:	d1 2c       	mov	r13, r1
    151e:	e1 2c       	mov	r14, r1
    1520:	f1 2c       	mov	r15, r1
    1522:	00 e0       	ldi	r16, 0x00	; 0
    1524:	10 e0       	ldi	r17, 0x00	; 0
    1526:	91 01       	movw	r18, r2
    1528:	a2 01       	movw	r20, r4
    152a:	b3 01       	movw	r22, r6
    152c:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <__moddi3>
    1530:	c9 01       	movw	r24, r18
    1532:	00 97       	sbiw	r24, 0x00	; 0
    1534:	59 f4       	brne	.+22     	; 0x154c <__year_to_secs+0x12a>
    1536:	81 e0       	ldi	r24, 0x01	; 1
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	ab 81       	ldd	r26, Y+3	; 0x03
    153c:	bc 81       	ldd	r27, Y+4	; 0x04
    153e:	8d 93       	st	X+, r24
    1540:	9c 93       	st	X, r25
    1542:	20 e0       	ldi	r18, 0x00	; 0
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	40 e0       	ldi	r20, 0x00	; 0
    1548:	50 e0       	ldi	r21, 0x00	; 0
    154a:	33 c0       	rjmp	.+102    	; 0x15b2 <__year_to_secs+0x190>
    154c:	28 3c       	cpi	r18, 0xC8	; 200
    154e:	31 05       	cpc	r19, r1
    1550:	6c f0       	brlt	.+26     	; 0x156c <__year_to_secs+0x14a>
    1552:	2c 32       	cpi	r18, 0x2C	; 44
    1554:	31 40       	sbci	r19, 0x01	; 1
    1556:	2c f0       	brlt	.+10     	; 0x1562 <__year_to_secs+0x140>
    1558:	8c 52       	subi	r24, 0x2C	; 44
    155a:	91 40       	sbci	r25, 0x01	; 1
    155c:	43 e0       	ldi	r20, 0x03	; 3
    155e:	50 e0       	ldi	r21, 0x00	; 0
    1560:	0c c0       	rjmp	.+24     	; 0x157a <__year_to_secs+0x158>
    1562:	88 5c       	subi	r24, 0xC8	; 200
    1564:	91 09       	sbc	r25, r1
    1566:	42 e0       	ldi	r20, 0x02	; 2
    1568:	50 e0       	ldi	r21, 0x00	; 0
    156a:	07 c0       	rjmp	.+14     	; 0x157a <__year_to_secs+0x158>
    156c:	24 36       	cpi	r18, 0x64	; 100
    156e:	31 05       	cpc	r19, r1
    1570:	6c f0       	brlt	.+26     	; 0x158c <__year_to_secs+0x16a>
    1572:	84 56       	subi	r24, 0x64	; 100
    1574:	91 09       	sbc	r25, r1
    1576:	41 e0       	ldi	r20, 0x01	; 1
    1578:	50 e0       	ldi	r21, 0x00	; 0
    157a:	00 97       	sbiw	r24, 0x00	; 0
    157c:	49 f4       	brne	.+18     	; 0x1590 <__year_to_secs+0x16e>
    157e:	eb 81       	ldd	r30, Y+3	; 0x03
    1580:	fc 81       	ldd	r31, Y+4	; 0x04
    1582:	11 82       	std	Z+1, r1	; 0x01
    1584:	10 82       	st	Z, r1
    1586:	20 e0       	ldi	r18, 0x00	; 0
    1588:	30 e0       	ldi	r19, 0x00	; 0
    158a:	13 c0       	rjmp	.+38     	; 0x15b2 <__year_to_secs+0x190>
    158c:	40 e0       	ldi	r20, 0x00	; 0
    158e:	50 e0       	ldi	r21, 0x00	; 0
    1590:	9c 01       	movw	r18, r24
    1592:	36 95       	lsr	r19
    1594:	27 95       	ror	r18
    1596:	36 95       	lsr	r19
    1598:	27 95       	ror	r18
    159a:	83 70       	andi	r24, 0x03	; 3
    159c:	99 27       	eor	r25, r25
    159e:	61 e0       	ldi	r22, 0x01	; 1
    15a0:	70 e0       	ldi	r23, 0x00	; 0
    15a2:	89 2b       	or	r24, r25
    15a4:	11 f0       	breq	.+4      	; 0x15aa <__year_to_secs+0x188>
    15a6:	60 e0       	ldi	r22, 0x00	; 0
    15a8:	70 e0       	ldi	r23, 0x00	; 0
    15aa:	ab 81       	ldd	r26, Y+3	; 0x03
    15ac:	bc 81       	ldd	r27, Y+4	; 0x04
    15ae:	6d 93       	st	X+, r22
    15b0:	7c 93       	st	X, r23
    15b2:	81 e6       	ldi	r24, 0x61	; 97
    15b4:	ed 81       	ldd	r30, Y+5	; 0x05
    15b6:	fe 81       	ldd	r31, Y+6	; 0x06
    15b8:	8e 9f       	mul	r24, r30
    15ba:	b0 01       	movw	r22, r0
    15bc:	8f 9f       	mul	r24, r31
    15be:	70 0d       	add	r23, r0
    15c0:	11 24       	eor	r1, r1
    15c2:	e8 e1       	ldi	r30, 0x18	; 24
    15c4:	e4 9f       	mul	r30, r20
    15c6:	c0 01       	movw	r24, r0
    15c8:	e5 9f       	mul	r30, r21
    15ca:	90 0d       	add	r25, r0
    15cc:	11 24       	eor	r1, r1
    15ce:	86 0f       	add	r24, r22
    15d0:	97 1f       	adc	r25, r23
    15d2:	ab 81       	ldd	r26, Y+3	; 0x03
    15d4:	bc 81       	ldd	r27, Y+4	; 0x04
    15d6:	4d 91       	ld	r20, X+
    15d8:	5c 91       	ld	r21, X
    15da:	84 1b       	sub	r24, r20
    15dc:	95 0b       	sbc	r25, r21
    15de:	82 0f       	add	r24, r18
    15e0:	93 1f       	adc	r25, r19
    15e2:	e9 2f       	mov	r30, r25
    15e4:	ee 0f       	add	r30, r30
    15e6:	ee 0b       	sbc	r30, r30
    15e8:	20 e8       	ldi	r18, 0x80	; 128
    15ea:	a2 2e       	mov	r10, r18
    15ec:	31 e5       	ldi	r19, 0x51	; 81
    15ee:	b3 2e       	mov	r11, r19
    15f0:	cc 24       	eor	r12, r12
    15f2:	c3 94       	inc	r12
    15f4:	d1 2c       	mov	r13, r1
    15f6:	e1 2c       	mov	r14, r1
    15f8:	f1 2c       	mov	r15, r1
    15fa:	00 e0       	ldi	r16, 0x00	; 0
    15fc:	10 e0       	ldi	r17, 0x00	; 0
    15fe:	9c 01       	movw	r18, r24
    1600:	4e 2f       	mov	r20, r30
    1602:	5e 2f       	mov	r21, r30
    1604:	6e 2f       	mov	r22, r30
    1606:	7e 2f       	mov	r23, r30
    1608:	8e 2f       	mov	r24, r30
    160a:	9e 2f       	mov	r25, r30
    160c:	0e 94 98 1a 	call	0x3530	; 0x3530 <__muldi3>
    1610:	92 2e       	mov	r9, r18
    1612:	83 2e       	mov	r8, r19
    1614:	4b 83       	std	Y+3, r20	; 0x03
    1616:	5d 83       	std	Y+5, r21	; 0x05
    1618:	69 87       	std	Y+9, r22	; 0x09
    161a:	7a 87       	std	Y+10, r23	; 0x0a
    161c:	8b 87       	std	Y+11, r24	; 0x0b
    161e:	9c 87       	std	Y+12, r25	; 0x0c
    1620:	43 e3       	ldi	r20, 0x33	; 51
    1622:	b4 2e       	mov	r11, r20
    1624:	51 ee       	ldi	r21, 0xE1	; 225
    1626:	c5 2e       	mov	r12, r21
    1628:	dd 24       	eor	r13, r13
    162a:	d3 94       	inc	r13
    162c:	91 01       	movw	r18, r2
    162e:	a2 01       	movw	r20, r4
    1630:	b3 01       	movw	r22, r6
    1632:	8f 81       	ldd	r24, Y+7	; 0x07
    1634:	98 85       	ldd	r25, Y+8	; 0x08
    1636:	0e 94 98 1a 	call	0x3530	; 0x3530 <__muldi3>
    163a:	59 01       	movw	r10, r18
    163c:	6a 01       	movw	r12, r20
    163e:	7b 01       	movw	r14, r22
    1640:	8c 01       	movw	r16, r24
    1642:	29 2d       	mov	r18, r9
    1644:	38 2d       	mov	r19, r8
    1646:	4b 81       	ldd	r20, Y+3	; 0x03
    1648:	5d 81       	ldd	r21, Y+5	; 0x05
    164a:	69 85       	ldd	r22, Y+9	; 0x09
    164c:	7a 85       	ldd	r23, Y+10	; 0x0a
    164e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1650:	9c 85       	ldd	r25, Y+12	; 0x0c
    1652:	0e 94 e2 26 	call	0x4dc4	; 0x4dc4 <__adddi3>
    1656:	3b 56       	subi	r19, 0x6B	; 107
    1658:	41 49       	sbci	r20, 0x91	; 145
    165a:	57 4c       	sbci	r21, 0xC7	; 199
    165c:	6f 4f       	sbci	r22, 0xFF	; 255
    165e:	7f 4f       	sbci	r23, 0xFF	; 255
    1660:	8f 4f       	sbci	r24, 0xFF	; 255
    1662:	9f 4f       	sbci	r25, 0xFF	; 255
    1664:	a6 2f       	mov	r26, r22
    1666:	f7 2f       	mov	r31, r23
    1668:	e8 2f       	mov	r30, r24
    166a:	6a 2f       	mov	r22, r26
    166c:	7f 2f       	mov	r23, r31
    166e:	8e 2f       	mov	r24, r30
    1670:	2c 96       	adiw	r28, 0x0c	; 12
    1672:	e2 e1       	ldi	r30, 0x12	; 18
    1674:	0c 94 de 22 	jmp	0x45bc	; 0x45bc <__epilogue_restores__>

Disassembly of section .text.__month_to_secs:

000044d8 <__month_to_secs>:
    44d8:	cf 93       	push	r28
    44da:	df 93       	push	r29
    44dc:	9c 01       	movw	r18, r24
    44de:	eb 01       	movw	r28, r22
    44e0:	88 0f       	add	r24, r24
    44e2:	99 1f       	adc	r25, r25
    44e4:	88 0f       	add	r24, r24
    44e6:	99 1f       	adc	r25, r25
    44e8:	09 2e       	mov	r0, r25
    44ea:	00 0c       	add	r0, r0
    44ec:	aa 0b       	sbc	r26, r26
    44ee:	85 58       	subi	r24, 0x85	; 133
    44f0:	9d 4f       	sbci	r25, 0xFD	; 253
    44f2:	af 4f       	sbci	r26, 0xFF	; 255
    44f4:	fc 01       	movw	r30, r24
    44f6:	5a 2f       	mov	r21, r26
    44f8:	0e 94 6e 26 	call	0x4cdc	; 0x4cdc <__xload_4>
    44fc:	cd 2b       	or	r28, r29
    44fe:	39 f0       	breq	.+14     	; 0x450e <__month_to_secs+0x36>
    4500:	22 30       	cpi	r18, 0x02	; 2
    4502:	31 05       	cpc	r19, r1
    4504:	24 f0       	brlt	.+8      	; 0x450e <__month_to_secs+0x36>
    4506:	60 58       	subi	r22, 0x80	; 128
    4508:	7e 4a       	sbci	r23, 0xAE	; 174
    450a:	8e 4f       	sbci	r24, 0xFE	; 254
    450c:	9f 4f       	sbci	r25, 0xFF	; 255
    450e:	df 91       	pop	r29
    4510:	cf 91       	pop	r28
    4512:	08 95       	ret

Disassembly of section .text.__secs_to_tm:

000003b8 <__secs_to_tm>:
 3b8:	a6 e1       	ldi	r26, 0x16	; 22
 3ba:	b0 e0       	ldi	r27, 0x00	; 0
 3bc:	e2 ee       	ldi	r30, 0xE2	; 226
 3be:	f1 e0       	ldi	r31, 0x01	; 1
 3c0:	0c 94 a7 22 	jmp	0x454e	; 0x454e <__prologue_saves__>
 3c4:	79 01       	movw	r14, r18
 3c6:	d4 2e       	mov	r13, r20
 3c8:	c5 2e       	mov	r12, r21
 3ca:	b6 2f       	mov	r27, r22
 3cc:	a7 2f       	mov	r26, r23
 3ce:	f8 2f       	mov	r31, r24
 3d0:	b9 2e       	mov	r11, r25
 3d2:	40 58       	subi	r20, 0x80	; 128
 3d4:	5d 4b       	sbci	r21, 0xBD	; 189
 3d6:	6e 40       	sbci	r22, 0x0E	; 14
 3d8:	7f 4f       	sbci	r23, 0xFF	; 255
 3da:	8f 4f       	sbci	r24, 0xFF	; 255
 3dc:	9f 4f       	sbci	r25, 0xFF	; 255
 3de:	21 15       	cp	r18, r1
 3e0:	3b 47       	sbci	r19, 0x7B	; 123
 3e2:	4d 41       	sbci	r20, 0x1D	; 29
 3e4:	53 48       	sbci	r21, 0x83	; 131
 3e6:	62 4e       	sbci	r22, 0xE2	; 226
 3e8:	71 40       	sbci	r23, 0x01	; 1
 3ea:	81 05       	cpc	r24, r1
 3ec:	91 05       	cpc	r25, r1
 3ee:	11 f0       	breq	.+4      	; 0x3f4 <__secs_to_tm+0x3c>
 3f0:	08 f0       	brcs	.+2      	; 0x3f4 <__secs_to_tm+0x3c>
 3f2:	08 c2       	rjmp	.+1040   	; 0x804 <__EEPROM_REGION_LENGTH__+0x4>
 3f4:	18 8b       	std	Y+16, r17	; 0x10
 3f6:	0f 87       	std	Y+15, r16	; 0x0f
 3f8:	9b 2d       	mov	r25, r11
 3fa:	8f 2f       	mov	r24, r31
 3fc:	7a 2f       	mov	r23, r26
 3fe:	6b 2f       	mov	r22, r27
 400:	5c 2d       	mov	r21, r12
 402:	4d 2d       	mov	r20, r13
 404:	97 01       	movw	r18, r14
 406:	20 58       	subi	r18, 0x80	; 128
 408:	3d 45       	sbci	r19, 0x5D	; 93
 40a:	4c 4b       	sbci	r20, 0xBC	; 188
 40c:	58 43       	sbci	r21, 0x38	; 56
 40e:	61 09       	sbc	r22, r1
 410:	71 09       	sbc	r23, r1
 412:	81 09       	sbc	r24, r1
 414:	91 09       	sbc	r25, r1
 416:	19 01       	movw	r2, r18
 418:	4d 83       	std	Y+5, r20	; 0x05
 41a:	59 87       	std	Y+9, r21	; 0x09
 41c:	6d 87       	std	Y+13, r22	; 0x0d
 41e:	79 83       	std	Y+1, r23	; 0x01
 420:	89 8b       	std	Y+17, r24	; 0x11
 422:	9a 8b       	std	Y+18, r25	; 0x12
 424:	f0 e8       	ldi	r31, 0x80	; 128
 426:	af 2e       	mov	r10, r31
 428:	a1 e5       	ldi	r26, 0x51	; 81
 42a:	ba 2e       	mov	r11, r26
 42c:	cc 24       	eor	r12, r12
 42e:	c3 94       	inc	r12
 430:	d1 2c       	mov	r13, r1
 432:	e1 2c       	mov	r14, r1
 434:	f1 2c       	mov	r15, r1
 436:	00 e0       	ldi	r16, 0x00	; 0
 438:	10 e0       	ldi	r17, 0x00	; 0
 43a:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <__divdi3>
 43e:	29 01       	movw	r4, r18
 440:	3a 01       	movw	r6, r20
 442:	4b 01       	movw	r8, r22
 444:	8e 8b       	std	Y+22, r24	; 0x16
 446:	9b 8b       	std	Y+19, r25	; 0x13
 448:	91 01       	movw	r18, r2
 44a:	4d 81       	ldd	r20, Y+5	; 0x05
 44c:	59 85       	ldd	r21, Y+9	; 0x09
 44e:	6d 85       	ldd	r22, Y+13	; 0x0d
 450:	79 81       	ldd	r23, Y+1	; 0x01
 452:	89 89       	ldd	r24, Y+17	; 0x11
 454:	9a 89       	ldd	r25, Y+18	; 0x12
 456:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <__moddi3>
 45a:	2d 83       	std	Y+5, r18	; 0x05
 45c:	3e 83       	std	Y+6, r19	; 0x06
 45e:	4f 83       	std	Y+7, r20	; 0x07
 460:	58 87       	std	Y+8, r21	; 0x08
 462:	8d 81       	ldd	r24, Y+5	; 0x05
 464:	9e 81       	ldd	r25, Y+6	; 0x06
 466:	af 81       	ldd	r26, Y+7	; 0x07
 468:	b8 85       	ldd	r27, Y+8	; 0x08
 46a:	b7 ff       	sbrs	r27, 7
 46c:	15 c0       	rjmp	.+42     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
 46e:	80 58       	subi	r24, 0x80	; 128
 470:	9e 4a       	sbci	r25, 0xAE	; 174
 472:	ae 4f       	sbci	r26, 0xFE	; 254
 474:	bf 4f       	sbci	r27, 0xFF	; 255
 476:	8d 83       	std	Y+5, r24	; 0x05
 478:	9e 83       	std	Y+6, r25	; 0x06
 47a:	af 83       	std	Y+7, r26	; 0x07
 47c:	b8 87       	std	Y+8, r27	; 0x08
 47e:	92 01       	movw	r18, r4
 480:	a3 01       	movw	r20, r6
 482:	b4 01       	movw	r22, r8
 484:	8e 89       	ldd	r24, Y+22	; 0x16
 486:	9b 89       	ldd	r25, Y+19	; 0x13
 488:	af ef       	ldi	r26, 0xFF	; 255
 48a:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__adddi3_s8>
 48e:	29 01       	movw	r4, r18
 490:	3a 01       	movw	r6, r20
 492:	4b 01       	movw	r8, r22
 494:	8e 8b       	std	Y+22, r24	; 0x16
 496:	9b 8b       	std	Y+19, r25	; 0x13
 498:	92 01       	movw	r18, r4
 49a:	a3 01       	movw	r20, r6
 49c:	b4 01       	movw	r22, r8
 49e:	8e 89       	ldd	r24, Y+22	; 0x16
 4a0:	9b 89       	ldd	r25, Y+19	; 0x13
 4a2:	a3 e0       	ldi	r26, 0x03	; 3
 4a4:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__adddi3_s8>
 4a8:	e7 e0       	ldi	r30, 0x07	; 7
 4aa:	ae 2e       	mov	r10, r30
 4ac:	b1 2c       	mov	r11, r1
 4ae:	c1 2c       	mov	r12, r1
 4b0:	d1 2c       	mov	r13, r1
 4b2:	e1 2c       	mov	r14, r1
 4b4:	f1 2c       	mov	r15, r1
 4b6:	00 e0       	ldi	r16, 0x00	; 0
 4b8:	10 e0       	ldi	r17, 0x00	; 0
 4ba:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <__moddi3>
 4be:	2d 87       	std	Y+13, r18	; 0x0d
 4c0:	3e 87       	std	Y+14, r19	; 0x0e
 4c2:	ad 85       	ldd	r26, Y+13	; 0x0d
 4c4:	be 85       	ldd	r27, Y+14	; 0x0e
 4c6:	b7 ff       	sbrs	r27, 7
 4c8:	03 c0       	rjmp	.+6      	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
 4ca:	17 96       	adiw	r26, 0x07	; 7
 4cc:	be 87       	std	Y+14, r27	; 0x0e
 4ce:	ad 87       	std	Y+13, r26	; 0x0d
 4d0:	51 eb       	ldi	r21, 0xB1	; 177
 4d2:	a5 2e       	mov	r10, r21
 4d4:	6a e3       	ldi	r22, 0x3A	; 58
 4d6:	b6 2e       	mov	r11, r22
 4d8:	72 e0       	ldi	r23, 0x02	; 2
 4da:	c7 2e       	mov	r12, r23
 4dc:	d1 2c       	mov	r13, r1
 4de:	e1 2c       	mov	r14, r1
 4e0:	f1 2c       	mov	r15, r1
 4e2:	00 e0       	ldi	r16, 0x00	; 0
 4e4:	10 e0       	ldi	r17, 0x00	; 0
 4e6:	92 01       	movw	r18, r4
 4e8:	a3 01       	movw	r20, r6
 4ea:	b4 01       	movw	r22, r8
 4ec:	8e 89       	ldd	r24, Y+22	; 0x16
 4ee:	9b 89       	ldd	r25, Y+19	; 0x13
 4f0:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <__divdi3>
 4f4:	29 87       	std	Y+9, r18	; 0x09
 4f6:	3a 87       	std	Y+10, r19	; 0x0a
 4f8:	4b 87       	std	Y+11, r20	; 0x0b
 4fa:	5c 87       	std	Y+12, r21	; 0x0c
 4fc:	92 01       	movw	r18, r4
 4fe:	a3 01       	movw	r20, r6
 500:	b4 01       	movw	r22, r8
 502:	8e 89       	ldd	r24, Y+22	; 0x16
 504:	9b 89       	ldd	r25, Y+19	; 0x13
 506:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <__moddi3>
 50a:	82 2e       	mov	r8, r18
 50c:	93 2e       	mov	r9, r19
 50e:	a4 2e       	mov	r10, r20
 510:	b5 2e       	mov	r11, r21
 512:	b7 fe       	sbrs	r11, 7
 514:	12 c0       	rjmp	.+36     	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
 516:	b1 eb       	ldi	r27, 0xB1	; 177
 518:	8b 0e       	add	r8, r27
 51a:	ba e3       	ldi	r27, 0x3A	; 58
 51c:	9b 1e       	adc	r9, r27
 51e:	b2 e0       	ldi	r27, 0x02	; 2
 520:	ab 1e       	adc	r10, r27
 522:	b1 1c       	adc	r11, r1
 524:	89 85       	ldd	r24, Y+9	; 0x09
 526:	9a 85       	ldd	r25, Y+10	; 0x0a
 528:	ab 85       	ldd	r26, Y+11	; 0x0b
 52a:	bc 85       	ldd	r27, Y+12	; 0x0c
 52c:	01 97       	sbiw	r24, 0x01	; 1
 52e:	a1 09       	sbc	r26, r1
 530:	b1 09       	sbc	r27, r1
 532:	89 87       	std	Y+9, r24	; 0x09
 534:	9a 87       	std	Y+10, r25	; 0x0a
 536:	ab 87       	std	Y+11, r26	; 0x0b
 538:	bc 87       	std	Y+12, r27	; 0x0c
 53a:	c5 01       	movw	r24, r10
 53c:	b4 01       	movw	r22, r8
 53e:	2c ea       	ldi	r18, 0xAC	; 172
 540:	3e e8       	ldi	r19, 0x8E	; 142
 542:	40 e0       	ldi	r20, 0x00	; 0
 544:	50 e0       	ldi	r21, 0x00	; 0
 546:	0e 94 92 23 	call	0x4724	; 0x4724 <__divmodsi4>
 54a:	69 01       	movw	r12, r18
 54c:	7a 01       	movw	r14, r20
 54e:	24 30       	cpi	r18, 0x04	; 4
 550:	31 05       	cpc	r19, r1
 552:	41 05       	cpc	r20, r1
 554:	51 05       	cpc	r21, r1
 556:	29 f4       	brne	.+10     	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
 558:	43 e0       	ldi	r20, 0x03	; 3
 55a:	c4 2e       	mov	r12, r20
 55c:	d1 2c       	mov	r13, r1
 55e:	e1 2c       	mov	r14, r1
 560:	f1 2c       	mov	r15, r1
 562:	a4 e5       	ldi	r26, 0x54	; 84
 564:	b1 e7       	ldi	r27, 0x71	; 113
 566:	a7 01       	movw	r20, r14
 568:	96 01       	movw	r18, r12
 56a:	0e 94 07 27 	call	0x4e0e	; 0x4e0e <__mulohisi3>
 56e:	2b 01       	movw	r4, r22
 570:	3c 01       	movw	r6, r24
 572:	48 0c       	add	r4, r8
 574:	59 1c       	adc	r5, r9
 576:	6a 1c       	adc	r6, r10
 578:	7b 1c       	adc	r7, r11
 57a:	c3 01       	movw	r24, r6
 57c:	b2 01       	movw	r22, r4
 57e:	25 eb       	ldi	r18, 0xB5	; 181
 580:	35 e0       	ldi	r19, 0x05	; 5
 582:	40 e0       	ldi	r20, 0x00	; 0
 584:	50 e0       	ldi	r21, 0x00	; 0
 586:	0e 94 92 23 	call	0x4724	; 0x4724 <__divmodsi4>
 58a:	49 01       	movw	r8, r18
 58c:	5a 01       	movw	r10, r20
 58e:	29 31       	cpi	r18, 0x19	; 25
 590:	31 05       	cpc	r19, r1
 592:	41 05       	cpc	r20, r1
 594:	51 05       	cpc	r21, r1
 596:	29 f4       	brne	.+10     	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
 598:	38 e1       	ldi	r19, 0x18	; 24
 59a:	83 2e       	mov	r8, r19
 59c:	91 2c       	mov	r9, r1
 59e:	a1 2c       	mov	r10, r1
 5a0:	b1 2c       	mov	r11, r1
 5a2:	ab e4       	ldi	r26, 0x4B	; 75
 5a4:	ba ef       	ldi	r27, 0xFA	; 250
 5a6:	a5 01       	movw	r20, r10
 5a8:	94 01       	movw	r18, r8
 5aa:	0e 94 07 27 	call	0x4e0e	; 0x4e0e <__mulohisi3>
 5ae:	46 0e       	add	r4, r22
 5b0:	57 1e       	adc	r5, r23
 5b2:	68 1e       	adc	r6, r24
 5b4:	79 1e       	adc	r7, r25
 5b6:	c3 01       	movw	r24, r6
 5b8:	b2 01       	movw	r22, r4
 5ba:	2d e6       	ldi	r18, 0x6D	; 109
 5bc:	31 e0       	ldi	r19, 0x01	; 1
 5be:	40 e0       	ldi	r20, 0x00	; 0
 5c0:	50 e0       	ldi	r21, 0x00	; 0
 5c2:	0e 94 92 23 	call	0x4724	; 0x4724 <__divmodsi4>
 5c6:	29 83       	std	Y+1, r18	; 0x01
 5c8:	3a 83       	std	Y+2, r19	; 0x02
 5ca:	4b 83       	std	Y+3, r20	; 0x03
 5cc:	5c 83       	std	Y+4, r21	; 0x04
 5ce:	24 30       	cpi	r18, 0x04	; 4
 5d0:	31 05       	cpc	r19, r1
 5d2:	41 05       	cpc	r20, r1
 5d4:	51 05       	cpc	r21, r1
 5d6:	41 f4       	brne	.+16     	; 0x5e8 <__LOCK_REGION_LENGTH__+0x1e8>
 5d8:	83 e0       	ldi	r24, 0x03	; 3
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	a0 e0       	ldi	r26, 0x00	; 0
 5de:	b0 e0       	ldi	r27, 0x00	; 0
 5e0:	89 83       	std	Y+1, r24	; 0x01
 5e2:	9a 83       	std	Y+2, r25	; 0x02
 5e4:	ab 83       	std	Y+3, r26	; 0x03
 5e6:	bc 83       	std	Y+4, r27	; 0x04
 5e8:	a3 e9       	ldi	r26, 0x93	; 147
 5ea:	be ef       	ldi	r27, 0xFE	; 254
 5ec:	29 81       	ldd	r18, Y+1	; 0x01
 5ee:	3a 81       	ldd	r19, Y+2	; 0x02
 5f0:	4b 81       	ldd	r20, Y+3	; 0x03
 5f2:	5c 81       	ldd	r21, Y+4	; 0x04
 5f4:	0e 94 07 27 	call	0x4e0e	; 0x4e0e <__mulohisi3>
 5f8:	46 0e       	add	r4, r22
 5fa:	57 1e       	adc	r5, r23
 5fc:	68 1e       	adc	r6, r24
 5fe:	79 1e       	adc	r7, r25
 600:	23 2b       	or	r18, r19
 602:	24 2b       	or	r18, r20
 604:	25 2b       	or	r18, r21
 606:	81 f4       	brne	.+32     	; 0x628 <__LOCK_REGION_LENGTH__+0x228>
 608:	81 14       	cp	r8, r1
 60a:	91 04       	cpc	r9, r1
 60c:	a1 04       	cpc	r10, r1
 60e:	b1 04       	cpc	r11, r1
 610:	71 f4       	brne	.+28     	; 0x62e <__LOCK_REGION_LENGTH__+0x22e>
 612:	31 e0       	ldi	r19, 0x01	; 1
 614:	20 e0       	ldi	r18, 0x00	; 0
 616:	c1 14       	cp	r12, r1
 618:	d1 04       	cpc	r13, r1
 61a:	e1 04       	cpc	r14, r1
 61c:	f1 04       	cpc	r15, r1
 61e:	09 f0       	breq	.+2      	; 0x622 <__LOCK_REGION_LENGTH__+0x222>
 620:	30 e0       	ldi	r19, 0x00	; 0
 622:	83 2f       	mov	r24, r19
 624:	92 2f       	mov	r25, r18
 626:	05 c0       	rjmp	.+10     	; 0x632 <__LOCK_REGION_LENGTH__+0x232>
 628:	80 e0       	ldi	r24, 0x00	; 0
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	02 c0       	rjmp	.+4      	; 0x632 <__LOCK_REGION_LENGTH__+0x232>
 62e:	81 e0       	ldi	r24, 0x01	; 1
 630:	90 e0       	ldi	r25, 0x00	; 0
 632:	12 01       	movw	r2, r4
 634:	ab e3       	ldi	r26, 0x3B	; 59
 636:	2a 0e       	add	r2, r26
 638:	31 1c       	adc	r3, r1
 63a:	28 0e       	add	r2, r24
 63c:	39 1e       	adc	r3, r25
 63e:	9c 01       	movw	r18, r24
 640:	24 59       	subi	r18, 0x94	; 148
 642:	3e 4f       	sbci	r19, 0xFE	; 254
 644:	22 15       	cp	r18, r2
 646:	33 05       	cpc	r19, r3
 648:	24 f4       	brge	.+8      	; 0x652 <__LOCK_REGION_LENGTH__+0x252>
 64a:	83 59       	subi	r24, 0x93	; 147
 64c:	9e 4f       	sbci	r25, 0xFE	; 254
 64e:	28 1a       	sub	r2, r24
 650:	39 0a       	sbc	r3, r25
 652:	92 e0       	ldi	r25, 0x02	; 2
 654:	88 0c       	add	r8, r8
 656:	99 1c       	adc	r9, r9
 658:	aa 1c       	adc	r10, r10
 65a:	bb 1c       	adc	r11, r11
 65c:	9a 95       	dec	r25
 65e:	d1 f7       	brne	.-12     	; 0x654 <__LOCK_REGION_LENGTH__+0x254>
 660:	89 81       	ldd	r24, Y+1	; 0x01
 662:	9a 81       	ldd	r25, Y+2	; 0x02
 664:	ab 81       	ldd	r26, Y+3	; 0x03
 666:	bc 81       	ldd	r27, Y+4	; 0x04
 668:	88 0e       	add	r8, r24
 66a:	99 1e       	adc	r9, r25
 66c:	aa 1e       	adc	r10, r26
 66e:	bb 1e       	adc	r11, r27
 670:	a4 e6       	ldi	r26, 0x64	; 100
 672:	b0 e0       	ldi	r27, 0x00	; 0
 674:	a7 01       	movw	r20, r14
 676:	96 01       	movw	r18, r12
 678:	0e 94 a7 26 	call	0x4d4e	; 0x4d4e <__muluhisi3>
 67c:	86 0e       	add	r8, r22
 67e:	97 1e       	adc	r9, r23
 680:	a8 1e       	adc	r10, r24
 682:	b9 1e       	adc	r11, r25
 684:	d5 01       	movw	r26, r10
 686:	c4 01       	movw	r24, r8
 688:	bb 0f       	add	r27, r27
 68a:	88 0b       	sbc	r24, r24
 68c:	98 2f       	mov	r25, r24
 68e:	dc 01       	movw	r26, r24
 690:	89 83       	std	Y+1, r24	; 0x01
 692:	9a 83       	std	Y+2, r25	; 0x02
 694:	ab 83       	std	Y+3, r26	; 0x03
 696:	bc 83       	std	Y+4, r27	; 0x04
 698:	69 85       	ldd	r22, Y+9	; 0x09
 69a:	7a 85       	ldd	r23, Y+10	; 0x0a
 69c:	8b 85       	ldd	r24, Y+11	; 0x0b
 69e:	9c 85       	ldd	r25, Y+12	; 0x0c
 6a0:	20 e9       	ldi	r18, 0x90	; 144
 6a2:	31 e0       	ldi	r19, 0x01	; 1
 6a4:	40 e0       	ldi	r20, 0x00	; 0
 6a6:	50 e0       	ldi	r21, 0x00	; 0
 6a8:	0e 94 38 26 	call	0x4c70	; 0x4c70 <__mulsidi3>
 6ac:	f2 2f       	mov	r31, r18
 6ae:	e3 2f       	mov	r30, r19
 6b0:	6a 01       	movw	r12, r20
 6b2:	7b 01       	movw	r14, r22
 6b4:	8c 01       	movw	r16, r24
 6b6:	94 01       	movw	r18, r8
 6b8:	a5 01       	movw	r20, r10
 6ba:	69 81       	ldd	r22, Y+1	; 0x01
 6bc:	76 2f       	mov	r23, r22
 6be:	86 2f       	mov	r24, r22
 6c0:	96 2f       	mov	r25, r22
 6c2:	af 2e       	mov	r10, r31
 6c4:	be 2e       	mov	r11, r30
 6c6:	0e 94 e2 26 	call	0x4dc4	; 0x4dc4 <__adddi3>
 6ca:	49 01       	movw	r8, r18
 6cc:	5a 01       	movw	r10, r20
 6ce:	6b 01       	movw	r12, r22
 6d0:	7c 01       	movw	r14, r24
 6d2:	25 e3       	ldi	r18, 0x35	; 53
 6d4:	33 e0       	ldi	r19, 0x03	; 3
 6d6:	40 e0       	ldi	r20, 0x00	; 0
 6d8:	1a 82       	std	Y+2, r1	; 0x02
 6da:	19 82       	std	Y+1, r1	; 0x01
 6dc:	f9 01       	movw	r30, r18
 6de:	84 91       	lpm	r24, Z
 6e0:	47 fd       	sbrc	r20, 7
 6e2:	80 81       	ld	r24, Z
 6e4:	08 2e       	mov	r0, r24
 6e6:	00 0c       	add	r0, r0
 6e8:	99 0b       	sbc	r25, r25
 6ea:	aa 0b       	sbc	r26, r26
 6ec:	bb 0b       	sbc	r27, r27
 6ee:	2f 5f       	subi	r18, 0xFF	; 255
 6f0:	3f 4f       	sbci	r19, 0xFF	; 255
 6f2:	4f 4f       	sbci	r20, 0xFF	; 255
 6f4:	48 16       	cp	r4, r24
 6f6:	59 06       	cpc	r5, r25
 6f8:	6a 06       	cpc	r6, r26
 6fa:	7b 06       	cpc	r7, r27
 6fc:	54 f0       	brlt	.+20     	; 0x712 <__LOCK_REGION_LENGTH__+0x312>
 6fe:	48 1a       	sub	r4, r24
 700:	59 0a       	sbc	r5, r25
 702:	6a 0a       	sbc	r6, r26
 704:	7b 0a       	sbc	r7, r27
 706:	a9 81       	ldd	r26, Y+1	; 0x01
 708:	ba 81       	ldd	r27, Y+2	; 0x02
 70a:	11 96       	adiw	r26, 0x01	; 1
 70c:	ba 83       	std	Y+2, r27	; 0x02
 70e:	a9 83       	std	Y+1, r26	; 0x01
 710:	e5 cf       	rjmp	.-54     	; 0x6dc <__LOCK_REGION_LENGTH__+0x2dc>
 712:	e9 81       	ldd	r30, Y+1	; 0x01
 714:	fa 81       	ldd	r31, Y+2	; 0x02
 716:	ea 30       	cpi	r30, 0x0A	; 10
 718:	f1 05       	cpc	r31, r1
 71a:	74 f0       	brlt	.+28     	; 0x738 <__LOCK_REGION_LENGTH__+0x338>
 71c:	3c 97       	sbiw	r30, 0x0c	; 12
 71e:	fa 83       	std	Y+2, r31	; 0x02
 720:	e9 83       	std	Y+1, r30	; 0x01
 722:	94 01       	movw	r18, r8
 724:	a5 01       	movw	r20, r10
 726:	b6 01       	movw	r22, r12
 728:	c7 01       	movw	r24, r14
 72a:	a1 e0       	ldi	r26, 0x01	; 1
 72c:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__adddi3_s8>
 730:	49 01       	movw	r8, r18
 732:	5a 01       	movw	r10, r20
 734:	6b 01       	movw	r12, r22
 736:	7c 01       	movw	r14, r24
 738:	94 01       	movw	r18, r8
 73a:	a5 01       	movw	r20, r10
 73c:	b6 01       	movw	r22, r12
 73e:	c7 01       	movw	r24, r14
 740:	2c 59       	subi	r18, 0x9C	; 156
 742:	3f 47       	sbci	r19, 0x7F	; 127
 744:	4f 4f       	sbci	r20, 0xFF	; 255
 746:	5f 4f       	sbci	r21, 0xFF	; 255
 748:	6f 4f       	sbci	r22, 0xFF	; 255
 74a:	7f 4f       	sbci	r23, 0xFF	; 255
 74c:	8f 4f       	sbci	r24, 0xFF	; 255
 74e:	9f 4f       	sbci	r25, 0xFF	; 255
 750:	2f 3f       	cpi	r18, 0xFF	; 255
 752:	3f 4f       	sbci	r19, 0xFF	; 255
 754:	41 05       	cpc	r20, r1
 756:	51 05       	cpc	r21, r1
 758:	61 05       	cpc	r22, r1
 75a:	71 05       	cpc	r23, r1
 75c:	81 05       	cpc	r24, r1
 75e:	91 05       	cpc	r25, r1
 760:	11 f0       	breq	.+4      	; 0x766 <__LOCK_REGION_LENGTH__+0x366>
 762:	08 f0       	brcs	.+2      	; 0x766 <__LOCK_REGION_LENGTH__+0x366>
 764:	4f c0       	rjmp	.+158    	; 0x804 <__EEPROM_REGION_LENGTH__+0x4>
 766:	24 e6       	ldi	r18, 0x64	; 100
 768:	82 0e       	add	r8, r18
 76a:	91 1c       	adc	r9, r1
 76c:	af 85       	ldd	r26, Y+15	; 0x0f
 76e:	b8 89       	ldd	r27, Y+16	; 0x10
 770:	1b 96       	adiw	r26, 0x0b	; 11
 772:	9c 92       	st	X, r9
 774:	8e 92       	st	-X, r8
 776:	1a 97       	sbiw	r26, 0x0a	; 10
 778:	e9 81       	ldd	r30, Y+1	; 0x01
 77a:	fa 81       	ldd	r31, Y+2	; 0x02
 77c:	32 96       	adiw	r30, 0x02	; 2
 77e:	19 96       	adiw	r26, 0x09	; 9
 780:	fc 93       	st	X, r31
 782:	ee 93       	st	-X, r30
 784:	18 97       	sbiw	r26, 0x08	; 8
 786:	ff ef       	ldi	r31, 0xFF	; 255
 788:	4f 1a       	sub	r4, r31
 78a:	5f 0a       	sbc	r5, r31
 78c:	17 96       	adiw	r26, 0x07	; 7
 78e:	5c 92       	st	X, r5
 790:	4e 92       	st	-X, r4
 792:	16 97       	sbiw	r26, 0x06	; 6
 794:	8d 85       	ldd	r24, Y+13	; 0x0d
 796:	9e 85       	ldd	r25, Y+14	; 0x0e
 798:	1d 96       	adiw	r26, 0x0d	; 13
 79a:	9c 93       	st	X, r25
 79c:	8e 93       	st	-X, r24
 79e:	1c 97       	sbiw	r26, 0x0c	; 12
 7a0:	1f 96       	adiw	r26, 0x0f	; 15
 7a2:	3c 92       	st	X, r3
 7a4:	2e 92       	st	-X, r2
 7a6:	1e 97       	sbiw	r26, 0x0e	; 14
 7a8:	6d 81       	ldd	r22, Y+5	; 0x05
 7aa:	7e 81       	ldd	r23, Y+6	; 0x06
 7ac:	8f 81       	ldd	r24, Y+7	; 0x07
 7ae:	98 85       	ldd	r25, Y+8	; 0x08
 7b0:	20 e1       	ldi	r18, 0x10	; 16
 7b2:	3e e0       	ldi	r19, 0x0E	; 14
 7b4:	40 e0       	ldi	r20, 0x00	; 0
 7b6:	50 e0       	ldi	r21, 0x00	; 0
 7b8:	0e 94 92 23 	call	0x4724	; 0x4724 <__divmodsi4>
 7bc:	af 85       	ldd	r26, Y+15	; 0x0f
 7be:	b8 89       	ldd	r27, Y+16	; 0x10
 7c0:	15 96       	adiw	r26, 0x05	; 5
 7c2:	3c 93       	st	X, r19
 7c4:	2e 93       	st	-X, r18
 7c6:	14 97       	sbiw	r26, 0x04	; 4
 7c8:	8c e3       	ldi	r24, 0x3C	; 60
 7ca:	c8 2e       	mov	r12, r24
 7cc:	d1 2c       	mov	r13, r1
 7ce:	e1 2c       	mov	r14, r1
 7d0:	f1 2c       	mov	r15, r1
 7d2:	6d 81       	ldd	r22, Y+5	; 0x05
 7d4:	7e 81       	ldd	r23, Y+6	; 0x06
 7d6:	8f 81       	ldd	r24, Y+7	; 0x07
 7d8:	98 85       	ldd	r25, Y+8	; 0x08
 7da:	a7 01       	movw	r20, r14
 7dc:	96 01       	movw	r18, r12
 7de:	0e 94 92 23 	call	0x4724	; 0x4724 <__divmodsi4>
 7e2:	4b 01       	movw	r8, r22
 7e4:	5c 01       	movw	r10, r24
 7e6:	ca 01       	movw	r24, r20
 7e8:	b9 01       	movw	r22, r18
 7ea:	a7 01       	movw	r20, r14
 7ec:	96 01       	movw	r18, r12
 7ee:	0e 94 92 23 	call	0x4724	; 0x4724 <__divmodsi4>
 7f2:	ef 85       	ldd	r30, Y+15	; 0x0f
 7f4:	f8 89       	ldd	r31, Y+16	; 0x10
 7f6:	73 83       	std	Z+3, r23	; 0x03
 7f8:	62 83       	std	Z+2, r22	; 0x02
 7fa:	91 82       	std	Z+1, r9	; 0x01
 7fc:	80 82       	st	Z, r8
 7fe:	80 e0       	ldi	r24, 0x00	; 0
 800:	90 e0       	ldi	r25, 0x00	; 0
 802:	02 c0       	rjmp	.+4      	; 0x808 <__EEPROM_REGION_LENGTH__+0x8>
 804:	8f ef       	ldi	r24, 0xFF	; 255
 806:	9f ef       	ldi	r25, 0xFF	; 255
 808:	66 96       	adiw	r28, 0x16	; 22
 80a:	e2 e1       	ldi	r30, 0x12	; 18
 80c:	0c 94 de 22 	jmp	0x45bc	; 0x45bc <__epilogue_restores__>

Disassembly of section .text.libgcc.div:

000048cc <__divmodhi4>:
    48cc:	97 fb       	bst	r25, 7
    48ce:	07 2e       	mov	r0, r23
    48d0:	16 f4       	brtc	.+4      	; 0x48d6 <__divmodhi4+0xa>
    48d2:	00 94       	com	r0
    48d4:	07 d0       	rcall	.+14     	; 0x48e4 <__divmodhi4_neg1>
    48d6:	77 fd       	sbrc	r23, 7
    48d8:	09 d0       	rcall	.+18     	; 0x48ec <__divmodhi4_neg2>
    48da:	0e 94 52 24 	call	0x48a4	; 0x48a4 <__udivmodhi4>
    48de:	07 fc       	sbrc	r0, 7
    48e0:	05 d0       	rcall	.+10     	; 0x48ec <__divmodhi4_neg2>
    48e2:	3e f4       	brtc	.+14     	; 0x48f2 <__divmodhi4_exit>

000048e4 <__divmodhi4_neg1>:
    48e4:	90 95       	com	r25
    48e6:	81 95       	neg	r24
    48e8:	9f 4f       	sbci	r25, 0xFF	; 255
    48ea:	08 95       	ret

000048ec <__divmodhi4_neg2>:
    48ec:	70 95       	com	r23
    48ee:	61 95       	neg	r22
    48f0:	7f 4f       	sbci	r23, 0xFF	; 255

000048f2 <__divmodhi4_exit>:
    48f2:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00003530 <__muldi3>:
    3530:	df 93       	push	r29
    3532:	cf 93       	push	r28
    3534:	1f 93       	push	r17
    3536:	0f 93       	push	r16
    3538:	9a 9d       	mul	r25, r10
    353a:	f0 2d       	mov	r31, r0
    353c:	21 9f       	mul	r18, r17
    353e:	f0 0d       	add	r31, r0
    3540:	8b 9d       	mul	r24, r11
    3542:	f0 0d       	add	r31, r0
    3544:	8a 9d       	mul	r24, r10
    3546:	e0 2d       	mov	r30, r0
    3548:	f1 0d       	add	r31, r1
    354a:	03 9f       	mul	r16, r19
    354c:	f0 0d       	add	r31, r0
    354e:	02 9f       	mul	r16, r18
    3550:	e0 0d       	add	r30, r0
    3552:	f1 1d       	adc	r31, r1
    3554:	4e 9d       	mul	r20, r14
    3556:	e0 0d       	add	r30, r0
    3558:	f1 1d       	adc	r31, r1
    355a:	5e 9d       	mul	r21, r14
    355c:	f0 0d       	add	r31, r0
    355e:	4f 9d       	mul	r20, r15
    3560:	f0 0d       	add	r31, r0
    3562:	7f 93       	push	r23
    3564:	6f 93       	push	r22
    3566:	bf 92       	push	r11
    3568:	af 92       	push	r10
    356a:	5f 93       	push	r21
    356c:	4f 93       	push	r20
    356e:	d5 01       	movw	r26, r10
    3570:	0e 94 29 26 	call	0x4c52	; 0x4c52 <__umulhisi3>
    3574:	8b 01       	movw	r16, r22
    3576:	ac 01       	movw	r20, r24
    3578:	d7 01       	movw	r26, r14
    357a:	0e 94 29 26 	call	0x4c52	; 0x4c52 <__umulhisi3>
    357e:	eb 01       	movw	r28, r22
    3580:	e8 0f       	add	r30, r24
    3582:	f9 1f       	adc	r31, r25
    3584:	d6 01       	movw	r26, r12
    3586:	0e 94 d9 26 	call	0x4db2	; 0x4db2 <__muldi3_6>
    358a:	2f 91       	pop	r18
    358c:	3f 91       	pop	r19
    358e:	d6 01       	movw	r26, r12
    3590:	0e 94 29 26 	call	0x4c52	; 0x4c52 <__umulhisi3>
    3594:	c6 0f       	add	r28, r22
    3596:	d7 1f       	adc	r29, r23
    3598:	e8 1f       	adc	r30, r24
    359a:	f9 1f       	adc	r31, r25
    359c:	af 91       	pop	r26
    359e:	bf 91       	pop	r27
    35a0:	0e 94 d9 26 	call	0x4db2	; 0x4db2 <__muldi3_6>
    35a4:	2f 91       	pop	r18
    35a6:	3f 91       	pop	r19
    35a8:	0e 94 29 26 	call	0x4c52	; 0x4c52 <__umulhisi3>
    35ac:	c6 0f       	add	r28, r22
    35ae:	d7 1f       	adc	r29, r23
    35b0:	e8 1f       	adc	r30, r24
    35b2:	f9 1f       	adc	r31, r25
    35b4:	d6 01       	movw	r26, r12
    35b6:	0e 94 29 26 	call	0x4c52	; 0x4c52 <__umulhisi3>
    35ba:	e6 0f       	add	r30, r22
    35bc:	f7 1f       	adc	r31, r23
    35be:	98 01       	movw	r18, r16
    35c0:	be 01       	movw	r22, r28
    35c2:	cf 01       	movw	r24, r30
    35c4:	11 24       	eor	r1, r1
    35c6:	0f 91       	pop	r16
    35c8:	1f 91       	pop	r17
    35ca:	cf 91       	pop	r28
    35cc:	df 91       	pop	r29
    35ce:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00004db2 <__muldi3_6>:
    4db2:	0e 94 29 26 	call	0x4c52	; 0x4c52 <__umulhisi3>
    4db6:	46 0f       	add	r20, r22
    4db8:	57 1f       	adc	r21, r23
    4dba:	c8 1f       	adc	r28, r24
    4dbc:	d9 1f       	adc	r29, r25
    4dbe:	08 f4       	brcc	.+2      	; 0x4dc2 <__muldi3_6+0x10>
    4dc0:	31 96       	adiw	r30, 0x01	; 1
    4dc2:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00004c70 <__mulsidi3>:
    4c70:	97 fb       	bst	r25, 7
    4c72:	57 ff       	sbrs	r21, 7
    4c74:	0c 94 a6 20 	jmp	0x414c	; 0x414c <__umulsidi3_helper>
    4c78:	9f 93       	push	r25
    4c7a:	8f 93       	push	r24
    4c7c:	0e 94 a6 20 	call	0x414c	; 0x414c <__umulsidi3_helper>
    4c80:	6e 1b       	sub	r22, r30
    4c82:	7f 0b       	sbc	r23, r31
    4c84:	af 91       	pop	r26
    4c86:	bf 91       	pop	r27
    4c88:	8a 0b       	sbc	r24, r26
    4c8a:	9b 0b       	sbc	r25, r27
    4c8c:	08 95       	ret

Disassembly of section .text.libgcc.mul:

0000414a <__umulsidi3>:
    414a:	e8 94       	clt

0000414c <__umulsidi3_helper>:
    414c:	df 93       	push	r29
    414e:	cf 93       	push	r28
    4150:	fc 01       	movw	r30, r24
    4152:	db 01       	movw	r26, r22
    4154:	0e 94 29 26 	call	0x4c52	; 0x4c52 <__umulhisi3>
    4158:	7f 93       	push	r23
    415a:	6f 93       	push	r22
    415c:	e9 01       	movw	r28, r18
    415e:	9a 01       	movw	r18, r20
    4160:	ac 01       	movw	r20, r24
    4162:	bf 93       	push	r27
    4164:	af 93       	push	r26
    4166:	3f 93       	push	r19
    4168:	2f 93       	push	r18
    416a:	df 01       	movw	r26, r30
    416c:	0e 94 29 26 	call	0x4c52	; 0x4c52 <__umulhisi3>
    4170:	26 f4       	brtc	.+8      	; 0x417a <__umulsidi3_helper+0x2e>
    4172:	6c 1b       	sub	r22, r28
    4174:	7d 0b       	sbc	r23, r29
    4176:	82 0b       	sbc	r24, r18
    4178:	93 0b       	sbc	r25, r19
    417a:	9e 01       	movw	r18, r28
    417c:	eb 01       	movw	r28, r22
    417e:	fc 01       	movw	r30, r24
    4180:	0e 94 d9 26 	call	0x4db2	; 0x4db2 <__muldi3_6>
    4184:	af 91       	pop	r26
    4186:	bf 91       	pop	r27
    4188:	2f 91       	pop	r18
    418a:	3f 91       	pop	r19
    418c:	0e 94 d9 26 	call	0x4db2	; 0x4db2 <__muldi3_6>
    4190:	be 01       	movw	r22, r28
    4192:	cf 01       	movw	r24, r30
    4194:	f9 01       	movw	r30, r18
    4196:	2f 91       	pop	r18
    4198:	3f 91       	pop	r19
    419a:	cf 91       	pop	r28
    419c:	df 91       	pop	r29
    419e:	08 95       	ret

Disassembly of section .text.libgcc.div:

00003f2e <__moddi3>:
    3f2e:	68 94       	set
    3f30:	01 c0       	rjmp	.+2      	; 0x3f34 <__divdi3_moddi3>

00003f32 <__divdi3>:
    3f32:	e8 94       	clt

00003f34 <__divdi3_moddi3>:
    3f34:	f9 2f       	mov	r31, r25
    3f36:	f1 2b       	or	r31, r17
    3f38:	12 f0       	brmi	.+4      	; 0x3f3e <__divdi3_moddi3+0xa>
    3f3a:	0c 94 4a 26 	jmp	0x4c94	; 0x4c94 <__udivdi3_umoddi3>
    3f3e:	a0 e0       	ldi	r26, 0x00	; 0
    3f40:	b0 e0       	ldi	r27, 0x00	; 0
    3f42:	e5 ea       	ldi	r30, 0xA5	; 165
    3f44:	ff e1       	ldi	r31, 0x1F	; 31
    3f46:	0c 94 ad 22 	jmp	0x455a	; 0x455a <__prologue_saves__+0xc>
    3f4a:	09 2e       	mov	r0, r25
    3f4c:	05 94       	asr	r0
    3f4e:	22 f4       	brpl	.+8      	; 0x3f58 <__divdi3_moddi3+0x24>
    3f50:	0e 94 19 26 	call	0x4c32	; 0x4c32 <__negdi2>
    3f54:	11 23       	and	r17, r17
    3f56:	92 f4       	brpl	.+36     	; 0x3f7c <__divdi3_moddi3+0x48>
    3f58:	f0 e8       	ldi	r31, 0x80	; 128
    3f5a:	0f 26       	eor	r0, r31
    3f5c:	ff ef       	ldi	r31, 0xFF	; 255
    3f5e:	e0 94       	com	r14
    3f60:	f0 94       	com	r15
    3f62:	00 95       	com	r16
    3f64:	10 95       	com	r17
    3f66:	b0 94       	com	r11
    3f68:	c0 94       	com	r12
    3f6a:	d0 94       	com	r13
    3f6c:	a1 94       	neg	r10
    3f6e:	bf 0a       	sbc	r11, r31
    3f70:	cf 0a       	sbc	r12, r31
    3f72:	df 0a       	sbc	r13, r31
    3f74:	ef 0a       	sbc	r14, r31
    3f76:	ff 0a       	sbc	r15, r31
    3f78:	0f 0b       	sbc	r16, r31
    3f7a:	1f 0b       	sbc	r17, r31
    3f7c:	0e 94 47 1a 	call	0x348e	; 0x348e <__udivmod64>
    3f80:	07 fc       	sbrc	r0, 7
    3f82:	0e 94 19 26 	call	0x4c32	; 0x4c32 <__negdi2>
    3f86:	cd b7       	in	r28, 0x3d	; 61
    3f88:	de b7       	in	r29, 0x3e	; 62
    3f8a:	ec e0       	ldi	r30, 0x0C	; 12
    3f8c:	0c 94 e4 22 	jmp	0x45c8	; 0x45c8 <__epilogue_restores__+0xc>

Disassembly of section .text.libgcc.div:

00004c8e <__umoddi3>:
    4c8e:	68 94       	set
    4c90:	01 c0       	rjmp	.+2      	; 0x4c94 <__udivdi3_umoddi3>

00004c92 <__udivdi3>:
    4c92:	e8 94       	clt

00004c94 <__udivdi3_umoddi3>:
    4c94:	8f 92       	push	r8
    4c96:	9f 92       	push	r9
    4c98:	cf 93       	push	r28
    4c9a:	df 93       	push	r29
    4c9c:	0e 94 47 1a 	call	0x348e	; 0x348e <__udivmod64>
    4ca0:	df 91       	pop	r29
    4ca2:	cf 91       	pop	r28
    4ca4:	9f 90       	pop	r9
    4ca6:	8f 90       	pop	r8
    4ca8:	08 95       	ret

Disassembly of section .text.libgcc.div:

0000348e <__udivmod64>:
    348e:	88 24       	eor	r8, r8
    3490:	99 24       	eor	r9, r9
    3492:	f4 01       	movw	r30, r8
    3494:	e4 01       	movw	r28, r8
    3496:	b0 e4       	ldi	r27, 0x40	; 64
    3498:	9f 93       	push	r25
    349a:	aa 27       	eor	r26, r26
    349c:	9a 15       	cp	r25, r10
    349e:	8b 04       	cpc	r8, r11
    34a0:	9c 04       	cpc	r9, r12
    34a2:	ed 05       	cpc	r30, r13
    34a4:	fe 05       	cpc	r31, r14
    34a6:	cf 05       	cpc	r28, r15
    34a8:	d0 07       	cpc	r29, r16
    34aa:	a1 07       	cpc	r26, r17
    34ac:	98 f4       	brcc	.+38     	; 0x34d4 <__udivmod64+0x46>
    34ae:	ad 2f       	mov	r26, r29
    34b0:	dc 2f       	mov	r29, r28
    34b2:	cf 2f       	mov	r28, r31
    34b4:	fe 2f       	mov	r31, r30
    34b6:	e9 2d       	mov	r30, r9
    34b8:	98 2c       	mov	r9, r8
    34ba:	89 2e       	mov	r8, r25
    34bc:	98 2f       	mov	r25, r24
    34be:	87 2f       	mov	r24, r23
    34c0:	76 2f       	mov	r23, r22
    34c2:	65 2f       	mov	r22, r21
    34c4:	54 2f       	mov	r21, r20
    34c6:	43 2f       	mov	r20, r19
    34c8:	32 2f       	mov	r19, r18
    34ca:	22 27       	eor	r18, r18
    34cc:	b8 50       	subi	r27, 0x08	; 8
    34ce:	31 f7       	brne	.-52     	; 0x349c <__udivmod64+0xe>
    34d0:	bf 91       	pop	r27
    34d2:	27 c0       	rjmp	.+78     	; 0x3522 <__udivmod64+0x94>
    34d4:	1b 2e       	mov	r1, r27
    34d6:	bf 91       	pop	r27
    34d8:	bb 27       	eor	r27, r27
    34da:	22 0f       	add	r18, r18
    34dc:	33 1f       	adc	r19, r19
    34de:	44 1f       	adc	r20, r20
    34e0:	55 1f       	adc	r21, r21
    34e2:	66 1f       	adc	r22, r22
    34e4:	77 1f       	adc	r23, r23
    34e6:	88 1f       	adc	r24, r24
    34e8:	99 1f       	adc	r25, r25
    34ea:	88 1c       	adc	r8, r8
    34ec:	99 1c       	adc	r9, r9
    34ee:	ee 1f       	adc	r30, r30
    34f0:	ff 1f       	adc	r31, r31
    34f2:	cc 1f       	adc	r28, r28
    34f4:	dd 1f       	adc	r29, r29
    34f6:	aa 1f       	adc	r26, r26
    34f8:	bb 1f       	adc	r27, r27
    34fa:	8a 14       	cp	r8, r10
    34fc:	9b 04       	cpc	r9, r11
    34fe:	ec 05       	cpc	r30, r12
    3500:	fd 05       	cpc	r31, r13
    3502:	ce 05       	cpc	r28, r14
    3504:	df 05       	cpc	r29, r15
    3506:	a0 07       	cpc	r26, r16
    3508:	b1 07       	cpc	r27, r17
    350a:	48 f0       	brcs	.+18     	; 0x351e <__udivmod64+0x90>
    350c:	8a 18       	sub	r8, r10
    350e:	9b 08       	sbc	r9, r11
    3510:	ec 09       	sbc	r30, r12
    3512:	fd 09       	sbc	r31, r13
    3514:	ce 09       	sbc	r28, r14
    3516:	df 09       	sbc	r29, r15
    3518:	a0 0b       	sbc	r26, r16
    351a:	b1 0b       	sbc	r27, r17
    351c:	21 60       	ori	r18, 0x01	; 1
    351e:	1a 94       	dec	r1
    3520:	e1 f6       	brne	.-72     	; 0x34da <__udivmod64+0x4c>
    3522:	2e f4       	brtc	.+10     	; 0x352e <__udivmod64+0xa0>
    3524:	94 01       	movw	r18, r8
    3526:	af 01       	movw	r20, r30
    3528:	be 01       	movw	r22, r28
    352a:	cd 01       	movw	r24, r26
    352c:	00 0c       	add	r0, r0
    352e:	08 95       	ret

Disassembly of section .text.libgcc:

00004c32 <__negdi2>:
    4c32:	60 95       	com	r22
    4c34:	70 95       	com	r23
    4c36:	80 95       	com	r24
    4c38:	90 95       	com	r25
    4c3a:	30 95       	com	r19
    4c3c:	40 95       	com	r20
    4c3e:	50 95       	com	r21
    4c40:	21 95       	neg	r18
    4c42:	3f 4f       	sbci	r19, 0xFF	; 255
    4c44:	4f 4f       	sbci	r20, 0xFF	; 255
    4c46:	5f 4f       	sbci	r21, 0xFF	; 255
    4c48:	6f 4f       	sbci	r22, 0xFF	; 255
    4c4a:	7f 4f       	sbci	r23, 0xFF	; 255
    4c4c:	8f 4f       	sbci	r24, 0xFF	; 255
    4c4e:	9f 4f       	sbci	r25, 0xFF	; 255
    4c50:	08 95       	ret

Disassembly of section .text.libgcc.prologue:

0000454e <__prologue_saves__>:
    454e:	2f 92       	push	r2
    4550:	3f 92       	push	r3
    4552:	4f 92       	push	r4
    4554:	5f 92       	push	r5
    4556:	6f 92       	push	r6
    4558:	7f 92       	push	r7
    455a:	8f 92       	push	r8
    455c:	9f 92       	push	r9
    455e:	af 92       	push	r10
    4560:	bf 92       	push	r11
    4562:	cf 92       	push	r12
    4564:	df 92       	push	r13
    4566:	ef 92       	push	r14
    4568:	ff 92       	push	r15
    456a:	0f 93       	push	r16
    456c:	1f 93       	push	r17
    456e:	cf 93       	push	r28
    4570:	df 93       	push	r29
    4572:	cd b7       	in	r28, 0x3d	; 61
    4574:	de b7       	in	r29, 0x3e	; 62
    4576:	ca 1b       	sub	r28, r26
    4578:	db 0b       	sbc	r29, r27
    457a:	0f b6       	in	r0, 0x3f	; 63
    457c:	f8 94       	cli
    457e:	de bf       	out	0x3e, r29	; 62
    4580:	0f be       	out	0x3f, r0	; 63
    4582:	cd bf       	out	0x3d, r28	; 61
    4584:	09 94       	ijmp

Disassembly of section .text.libgcc.prologue:

000045bc <__epilogue_restores__>:
    45bc:	2a 88       	ldd	r2, Y+18	; 0x12
    45be:	39 88       	ldd	r3, Y+17	; 0x11
    45c0:	48 88       	ldd	r4, Y+16	; 0x10
    45c2:	5f 84       	ldd	r5, Y+15	; 0x0f
    45c4:	6e 84       	ldd	r6, Y+14	; 0x0e
    45c6:	7d 84       	ldd	r7, Y+13	; 0x0d
    45c8:	8c 84       	ldd	r8, Y+12	; 0x0c
    45ca:	9b 84       	ldd	r9, Y+11	; 0x0b
    45cc:	aa 84       	ldd	r10, Y+10	; 0x0a
    45ce:	b9 84       	ldd	r11, Y+9	; 0x09
    45d0:	c8 84       	ldd	r12, Y+8	; 0x08
    45d2:	df 80       	ldd	r13, Y+7	; 0x07
    45d4:	ee 80       	ldd	r14, Y+6	; 0x06
    45d6:	fd 80       	ldd	r15, Y+5	; 0x05
    45d8:	0c 81       	ldd	r16, Y+4	; 0x04
    45da:	1b 81       	ldd	r17, Y+3	; 0x03
    45dc:	aa 81       	ldd	r26, Y+2	; 0x02
    45de:	b9 81       	ldd	r27, Y+1	; 0x01
    45e0:	ce 0f       	add	r28, r30
    45e2:	d1 1d       	adc	r29, r1
    45e4:	0f b6       	in	r0, 0x3f	; 63
    45e6:	f8 94       	cli
    45e8:	de bf       	out	0x3e, r29	; 62
    45ea:	0f be       	out	0x3f, r0	; 63
    45ec:	cd bf       	out	0x3d, r28	; 61
    45ee:	ed 01       	movw	r28, r26
    45f0:	08 95       	ret

Disassembly of section .text.libgcc:

00004dc4 <__adddi3>:
    4dc4:	2a 0d       	add	r18, r10
    4dc6:	3b 1d       	adc	r19, r11
    4dc8:	4c 1d       	adc	r20, r12
    4dca:	5d 1d       	adc	r21, r13
    4dcc:	6e 1d       	adc	r22, r14
    4dce:	7f 1d       	adc	r23, r15
    4dd0:	80 1f       	adc	r24, r16
    4dd2:	91 1f       	adc	r25, r17
    4dd4:	08 95       	ret

Disassembly of section .text.libgcc:

00004dd6 <__cmpdi2>:
    4dd6:	2a 15       	cp	r18, r10
    4dd8:	3b 05       	cpc	r19, r11
    4dda:	4c 05       	cpc	r20, r12
    4ddc:	5d 05       	cpc	r21, r13
    4dde:	6e 05       	cpc	r22, r14
    4de0:	7f 05       	cpc	r23, r15
    4de2:	80 07       	cpc	r24, r16
    4de4:	91 07       	cpc	r25, r17
    4de6:	08 95       	ret
