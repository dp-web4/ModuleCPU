
ModuleCPU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00004e4c  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000da  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00004e4c  2**0
                  ALLOC
  3 .noinit       0000022a  00800102  00800102  00004e4c  2**2
                  ALLOC
  4 .comment      0000002f  00000000  00000000  00004e4c  2**0
                  CONTENTS, READONLY
  5 .stack.descriptors.hdr 00000142  00000000  00000000  00004e7b  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000500  00000000  00000000  00004fbd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00008cf5  00000000  00000000  000054bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001aab  00000000  00000000  0000e1b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000037b2  00000000  00000000  0000fc5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001200  00000000  00000000  00013410  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000006e4  00000000  00000000  00014610  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000485b  00000000  00000000  00014cf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000004e0  00000000  00000000  0001954f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .text         00000004  00004d88  00004d88  00004e3c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00019a30  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .text.__vector_27 000000bc  00003104  00003104  000031b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.ADCSetPowerOn 0000000c  00004d42  00004d42  00004df6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.ADCStartConversion 0000002a  000046f8  000046f8  000047ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .progmemx.data 0000000b  00000341  00000341  000003f5  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 20 .text.ADCInit 0000013c  00002240  00002240  000022f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .progmemx.data.sg_sMuxSelectList 0000000f  0000031a  0000031a  000003ce  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 22 .bss.sg_eCurrentType 00000001  0080094f  0080094f  00004e4c  2**0
                  ALLOC
 23 .bss.sg_eState 00000001  00800962  00800962  00004e4c  2**0
                  ALLOC
 24 .text.CANLookupCommand 00000062  00003dc8  00003dc8  00003e7c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .progmemx.data 0000000b  0000034c  0000034c  00000400  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 26 .text.CANMOBSet 00000212  00001a00  00001a00  00001ab4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.CANSendMessageInternal 00000178  00001f62  00001f62  00002016  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.CANMOBInterrupt 00000192  00001dd0  00001dd0  00001e84  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.__vector_18 00000118  000024b0  000024b0  00002564  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.CANSendMessage 00000016  00004bda  00004bda  00004c8e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.CANSetRXCallback 0000000a  00004d5a  00004d5a  00004e0e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.CANInit 0000009c  00003466  00003466  0000351a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .progmemx.data.sg_sRXCommandList 00000021  000002d5  000002d5  00000389  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 34 .progmemx.data.sg_sMOBModuleRequestTime 00000008  00000357  00000357  0000040b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 35 .progmemx.data.sg_sMOBModuleHardwareDetail 00000008  0000035f  0000035f  00000413  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 36 .progmemx.data.sg_sMOBModuleCellDetail 00000008  00000367  00000367  0000041b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 37 .progmemx.data.sg_sMOBModuleCellCommStat2 00000008  0000036f  0000036f  00000423  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 38 .progmemx.data.sg_sMOBModuleCellCommStat1 00000008  00000377  00000377  0000042b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 39 .progmemx.data.sg_sMOBModuleStatus3 00000008  0000037f  0000037f  00000433  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 40 .progmemx.data.sg_sMOBModuleStatus2 00000008  00000387  00000387  0000043b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 41 .progmemx.data.sg_sMOBModuleStatus1 00000008  0000038f  0000038f  00000443  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 42 .progmemx.data.sg_sMOBModuleAnnouncement 00000008  00000397  00000397  0000044b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 43 .progmemx.data.sg_sMOBGenericReceive 00000008  0000039f  0000039f  00000453  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 44 .progmemx.data.sg_sMOBDisabled 00000008  000003a7  000003a7  0000045b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 45 .bss.sg_bInRetransmit 00000001  00800963  00800963  00004e4c  2**0
                  ALLOC
 46 .bss.sg_u8LastTXDataLen 00000001  00800964  00800964  00004e4c  2**0
                  ALLOC
 47 .bss.sg_u8LastTXData 00000008  0080093d  0080093d  00004e4c  2**0
                  ALLOC
 48 .bss.sg_eLastTXType 00000001  00800965  00800965  00004e4c  2**0
                  ALLOC
 49 .bss.sg_u8TransmitAttempts 00000001  00800966  00800966  00004e4c  2**0
                  ALLOC
 50 .bss.sg_pfRXCallback 00000002  0080094d  0080094d  00004e4c  2**0
                  ALLOC
 51 .bss.sg_bBusy 00000001  00800967  00800967  00004e4c  2**0
                  ALLOC
 52 .text.DebugOut 0000000e  00004d0a  00004d0a  00004dbe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 53 .text.EEPROMRead 00000012  00004c70  00004c70  00004d24  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 .text.I2CBitDelay 0000000e  00004d18  00004d18  00004dcc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.I2CStart 0000002c  00004648  00004648  000046fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.I2CStop 00000026  000047c2  000047c2  00004876  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .text.I2CUnstick 0000003c  00004398  00004398  0000444c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .text.I2CTxByte 0000006a  00003c8e  00003c8e  00003d42  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 .text.I2CRxByte 0000007a  00003ab4  00003ab4  00003b68  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 60 .text.I2CSetup 0000002c  00004674  00004674  00004728  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 61 .text.I2CStartTransaction 00000028  00004722  00004722  000047d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 62 .text.CellCountExpectedSet 000000c4  00002f7e  00002f7e  00003032  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 63 .text.SendModuleControllerStatus 00000010  00004cca  00004cca  00004d7e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 64 .text.ModuleControllerStateSet 0000000a  00004d64  00004d64  00004e18  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .text.ModuleControllerStateSetMax 00000016  00004bf0  00004bf0  00004ca4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 66 .text.Check5VLoss 00000018  00004b92  00004b92  00004c46  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 67 .text.CellDataConvertVoltage 0000005e  00003e8c  00003e8c  00003f40  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 68 .text.CellDataConvertTemperature 0000007a  00003b2e  00003b2e  00003be2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 69 .text.ModuleCurrentConvertReadings 00000104  000025c8  000025c8  0000267c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 70 .text.__vector_1 00000024  0000480e  0000480e  000048c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 71 .text.__vector_2 00000024  00004832  00004832  000048e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 72 .text.__vector_3 00000024  00004856  00004856  0000490a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 73 .text.__vector_4 00000024  0000487a  0000487a  0000492e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 74 .text.__vector_5 00000024  0000489e  0000489e  00004952  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 75 .text.__vector_6 00000024  000048c2  000048c2  00004976  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 76 .text.__vector_22 00000024  000048e6  000048e6  0000499a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 77 .text.__vector_9 00000024  0000490a  0000490a  000049be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 78 .text.__vector_11 00000024  0000492e  0000492e  000049e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 79 .text.__vector_13 00000024  00004952  00004952  00004a06  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 80 .text.__vector_14 00000024  00004976  00004976  00004a2a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 81 .text.__vector_17 00000024  0000499a  0000499a  00004a4e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 82 .text.__vector_19 00000024  000049be  000049be  00004a72  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 83 .text.__vector_21 00000024  000049e2  000049e2  00004a96  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 84 .text.__vector_25 00000024  00004a06  00004a06  00004aba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 85 .text.__vector_26 00000024  00004a2a  00004a2a  00004ade  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 86 .text.__vector_29 00000024  00004a4e  00004a4e  00004b02  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 87 .text.__vector_30 00000024  00004a72  00004a72  00004b26  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 88 .text.CurrentThresholdsGet 00000094  00003502  00003502  000035b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 89 .progmemx.data 000001a1  000000da  000000da  0000018e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 90 .text.CANReceiveCallback 00000292  000010d8  000010d8  0000118c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 91 .text.ControllerStatusMessagesSend 0000036a  00000810  00000810  000008c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 92 .text.CellStringProcess 000002aa  00000e2e  00000e2e  00000ee2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 93 .text.Delay   00000052  00004144  00004144  000041f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 94 .text.PlatformAssert 0000002c  000046a0  000046a0  00004754  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 95 .text.ModuleControllerStateHandle 0000021e  000017e2  000017e2  00001896  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 96 .text.PlatformGetRegistrationID 00000006  00004d82  00004d82  00004e36  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 97 .text.SetSysclock 0000000c  00004d4e  00004d4e  00004e02  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 98 .text.ModuleControllerGetUniqueID 0000007e  000038c0  000038c0  00003974  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 99 .text.TimerInit 00000052  00004196  00004196  0000424a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
100 .text.__vector_12 000000ba  000031c0  000031c0  00003274  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
101 .text.WatchdogReset 00000002  00004d90  00004d90  00004e44  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
102 .text.WatchdogOff 0000001a  00004b78  00004b78  00004c2c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
103 .text.__vector_28 00000052  000041e8  000041e8  0000429c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
104 .text.__vector_23 0000008a  00003596  00003596  0000364a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
105 .text.__vector_24 0000004c  0000423a  0000423a  000042ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
106 .text.vUARTRXStart 00000016  00004c06  00004c06  00004cba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
107 .text.vUARTRXEnd 00000024  00004a96  00004a96  00004b4a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
108 .text.vUARTRXData 0000007a  00003ba8  00003ba8  00003c5c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
109 .text.PlatformGetSendData 00000028  0000474a  0000474a  000047fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
110 .text.ADCCallback 00000026  000047e8  000047e8  0000489c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
111 .text.FrameInit 000000dc  00002a82  00002a82  00002b36  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
112 .text.CellStringPowerStateMachine 00000088  000036aa  000036aa  0000375e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
113 .text.main    000002b4  00000b7a  00000b7a  00000c2e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
114 .bss.sg_u8PCMSK1 00000001  00800968  00800968  00004e4c  2**0
                  ALLOC
115 .bss.sg_u8PCMSK0 00000001  00800969  00800969  00004e4c  2**0
                  ALLOC
116 .bss.sg_u8UnhandledInterruptVector 00000001  0080096a  0080096a  00004e4c  2**0
                  ALLOC
117 .bss.sg_u8Reason 00000001  0080096b  0080096b  00004e4c  2**0
                  ALLOC
118 .progmemx.data.sg_u8FractionalLookup 00000010  0000030a  0000030a  000003be  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
119 .bss.sg_u8ControllerStatusMsgCount 00000001  0080096c  0080096c  00004e4c  2**0
                  ALLOC
120 .bss.sg_u8CellReports 00000001  0080096d  0080096d  00004e4c  2**0
                  ALLOC
121 .bss.sg_u16BytesReceived 00000002  0080095c  0080095c  00004e4c  2**0
                  ALLOC
122 .bss.sg_u8CellBufferTemp 00000004  00800950  00800950  00004e4c  2**2
                  ALLOC
123 .bss.sg_u8CellBufferRX 00000001  0080096e  0080096e  00004e4c  2**0
                  ALLOC
124 .bss.sg_u8CellIndex 00000001  0080096f  0080096f  00004e4c  2**0
                  ALLOC
125 .bss.sg_u8TicksSinceLastPackControllerMessage 00000001  00800970  00800970  00004e4c  2**0
                  ALLOC
126 .bss.sg_u8CellStringPowerTimer 00000001  00800971  00800971  00004e4c  2**0
                  ALLOC
127 .bss.sg_bFrameStart 00000001  00800972  00800972  00004e4c  2**0
                  ALLOC
128 .bss.sg_u8CellFrameTimer 00000001  00800973  00800973  00004e4c  2**0
                  ALLOC
129 .bss.sg_bIgnoreStatusRequests 00000001  00800974  00800974  00004e4c  2**0
                  ALLOC
130 .bss.sg_u8AnnouncementDelayTicks 00000001  00800975  00800975  00004e4c  2**0
                  ALLOC
131 .bss.sg_bAnnouncementPending 00000001  00800976  00800976  00004e4c  2**0
                  ALLOC
132 .bss.sg_u8CurrentBufferIndex 00000001  00800977  00800977  00004e4c  2**0
                  ALLOC
133 .bss.sg_sCurrenBuffer 00000010  0080091d  0080091d  00004e4c  2**0
                  ALLOC
134 .text.IsLeapYear 00000034  000044b8  000044b8  0000456c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
135 .text.RTCStartTransaction 00000044  000042d2  000042d2  00004386  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
136 .text.StructTMToHW 00000054  0000409c  0000409c  00004150  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
137 .text.HWToStructTM 0000007c  000039bc  000039bc  00003a70  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
138 .text.__vector_10 00000086  00003732  00003732  000037e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
139 .progmemx.data 00000014  000002f6  000002f6  000003aa  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
140 .text.RTCReadRegisters 0000007e  0000393e  0000393e  000039f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
141 .text.RTCReadHW 000000e2  000028c2  000028c2  00002976  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
142 .text.RTCWriteRegisters 0000006a  00003cf8  00003cf8  00003dac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
143 .text.RTCWriteHW 000000fe  000026cc  000026cc  00002780  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
144 .text.RTCSetTime 000000c6  00002eb8  00002eb8  00002f6c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
145 .text.RTCInit 00000222  000015c0  000015c0  00001674  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
146 .progmemx.data.sg_u8DaysInMonths 0000000c  00000329  00000329  000003dd  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
147 .bss.sg_u64Time 00000008  00800945  00800945  00004e4c  2**0
                  ALLOC
148 .text.SDSetCS 00000014  00004c48  00004c48  00004cfc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
149 .text.SDPowerup 0000003a  00004410  00004410  000044c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
150 .text.SDCommand 000000aa  0000327a  0000327a  0000332e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
151 .text.SDGoIdle 00000022  00004ade  00004ade  00004b92  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
152 .text.SDSendOpCondition 00000034  000044ec  000044ec  000045a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
153 .text.SDSendOpConditionArg 00000056  00003f9a  00003f9a  0000404e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
154 .text.SDWaitResponse7 0000000e  00004d26  00004d26  00004dda  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
155 .text.SDSendInterfaceCondition 00000034  00004520  00004520  000045d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
156 .text.SDReadOCR 00000032  00004554  00004554  00004608  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
157 .text.SDReadCSD 0000007c  00003a38  00003a38  00003aec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
158 .text.SDReceiveDataBlock 0000008a  00003620  00003620  000036d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
159 .text.SDTransmitDataBlock 000000c2  00003042  00003042  000030f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
160 .text.SDInit  00000166  000020da  000020da  0000218e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
161 .text.SDRead  000000d8  00002d16  00002d16  00002dca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
162 .text.SDWrite 000000dc  00002b5e  00002b5e  00002c12  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
163 .bss.sg_u8CSD 00000010  0080092d  0080092d  00004e4c  2**0
                  ALLOC
164 .bss.sg_u16BlockSize 00000002  0080095e  0080095e  00004e4c  2**0
                  ALLOC
165 .bss.sg_u32SDSectorCount 00000004  00800954  00800954  00004e4c  2**0
                  ALLOC
166 .text.SPITransaction 00000058  00003eea  00003eea  00003f9e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
167 .text.SPISetBaudRate 000000ca  00002dee  00002dee  00002ea2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
168 .text.SPIInit 0000002c  000046cc  000046cc  00004780  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
169 .progmemx.data.sg_sSPIBaudRates 0000002a  000002ab  000002ab  0000035f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
170 .text.readGlobalState 0000003e  0000435a  0000435a  0000440e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
171 .text.writeGlobalState 00000032  00004586  00004586  0000463a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
172 .text.updateSessionMap 000000dc  00002c3a  00002c3a  00002cee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
173 .text.STORE_Init 00000082  0000383e  0000383e  000038f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
174 .text.STORE_WriteFrame 000000f8  000027ca  000027ca  0000287e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
175 .text.STORE_StartNewSession 00000054  000040f0  000040f0  000041a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
176 .text.STORE_EndSession 00000058  00003f42  00003f42  00003ff6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
177 .bss.frameBuffer 00000400  0080032c  0080032c  00004e4c  2**2
                  ALLOC
178 .bss.currentSector 00000004  00800958  00800958  00004e4c  2**0
                  ALLOC
179 .bss.gState   000001d8  0080072c  0080072c  00004e4c  2**2
                  ALLOC
180 .text.vUARTtxDataAvailable 00000024  00004aba  00004aba  00004b6e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
181 .text.vUARTtxDataGet 0000004c  00004286  00004286  0000433a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
182 .text.vUARTRXReset 0000000a  00004d6e  00004d6e  00004e22  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
183 .text.vUARTStarttx 00000056  00003ff0  00003ff0  000040a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
184 .text.__vector_8 00000066  00003d62  00003d62  00003e16  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
185 .text.__vector_16 000000de  000029a4  000029a4  00002a58  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
186 .text.__vector_15 00000134  0000237c  0000237c  00002430  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
187 .text.vUARTInit 00000030  000045ea  000045ea  0000469e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
188 .text.vUARTInitReceive 00000014  00004c5c  00004c5c  00004d10  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
189 .bss.sg_bState 00000001  00800978  00800978  00004e4c  2**0
                  ALLOC
190 .bss.sg_u8SendData 00000002  00800960  00800960  00004e4c  2**0
                  ALLOC
191 .bss.sg_u8SendIndex 00000001  00800979  00800979  00004e4c  2**0
                  ALLOC
192 .bss.sg_bMCTxNextBit 00000001  0080097a  0080097a  00004e4c  2**0
                  ALLOC
193 .bss.sg_bCellReportsReuested 00000001  0080097b  0080097b  00004e4c  2**0
                  ALLOC
194 .bss.sg_etxState 00000001  0080097c  0080097c  00004e4c  2**0
                  ALLOC
195 .bss.sg_btxMoreAvailable 00000001  0080097d  0080097d  00004e4c  2**0
                  ALLOC
196 .bss.sg_u8txDataByte 00000001  0080097e  0080097e  00004e4c  2**0
                  ALLOC
197 .bss.sg_u8txBitCount 00000001  0080097f  0080097f  00004e4c  2**0
                  ALLOC
198 .bss.sg_bCell_mc_rxMoreData 00000001  00800980  00800980  00004e4c  2**0
                  ALLOC
199 .bss.sg_bCell_mc_rxPriorState 00000001  00800981  00800981  00004e4c  2**0
                  ALLOC
200 .bss.sg_eCell_mc_rxState 00000001  00800982  00800982  00004e4c  2**0
                  ALLOC
201 .bss.sg_u8rxDataByte 00000001  00800983  00800983  00004e4c  2**0
                  ALLOC
202 .bss.sg_u8Cell_mc_rxBitCount 00000001  00800984  00800984  00004e4c  2**0
                  ALLOC
203 .text.libgcc.div 00000028  00004772  00004772  00004826  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
204 .text.libgcc.div 00000044  00004316  00004316  000043ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
205 .text.libgcc.div 0000002e  0000461a  0000461a  000046ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
206 .text.libgcc.div 00000010  00004cda  00004cda  00004d8e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
207 .text.libgcc.mul 0000001e  00004b20  00004b20  00004bd4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
208 .text.libgcc.mul 0000000e  00004d34  00004d34  00004de8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
209 .text.libgcc.mul 00000016  00004c1c  00004c1c  00004cd0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
210 .text.libgcc.mul 00000010  00004cea  00004cea  00004d9e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
211 .text.libgcc  00000010  00004cfa  00004cfa  00004dae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
212 .text.libgcc  00000018  00004baa  00004baa  00004c5e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
213 .text.libgcc  00000018  00004bc2  00004bc2  00004c76  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
214 .text.__dummy_fini 00000002  00004d92  00004d92  00004e46  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
215 .text.__dummy_funcs_on_exit 00000002  00004d94  00004d94  00004e48  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
216 .text.__dummy_simulator_exit 00000002  00004d96  00004d96  00004e4a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
217 .text.exit    00000016  00004c32  00004c32  00004ce6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
218 .text.memcpy  00000032  000045b8  000045b8  0000466c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
219 .text.memset  00000012  00004c82  00004c82  00004d36  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
220 .text.gmtime  0000000a  00004d78  00004d78  00004e2c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
221 .bss.tm.1240  00000019  00800904  00800904  00004e4c  2**0
                  ALLOC
222 .progmemx.data 00000004  000003af  000003af  00000463  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
223 .text.__gmtime_r 0000006c  00003c22  00003c22  00003cd6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
224 .progmemx.data 00000004  000003b3  000003b3  00000467  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
225 .text.mktime  00000086  000037b8  000037b8  0000386c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
226 .text._Exit   00000004  00004d8c  00004d8c  00004e40  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
227 .text.__tm_to_secs 000001be  00001c12  00001c12  00001cc6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
228 .text.__year_to_secs 00000256  0000136a  0000136a  0000141e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
229 .text.__month_to_secs 0000003c  000043d4  000043d4  00004488  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
230 .progmemx.data.secs_through_month.1090 00000030  0000027b  0000027b  0000032f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
231 .text.__secs_to_tm 00000458  000003b8  000003b8  0000046c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
232 .progmemx.data.days_in_month.1250 0000000c  00000335  00000335  000003e9  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
233 .text.libgcc.div 00000028  0000479a  0000479a  0000484e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
234 .text.libgcc.mul 000000a0  000033c6  000033c6  0000347a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
235 .text.libgcc.mul 00000012  00004c94  00004c94  00004d48  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
236 .text.libgcc.mul 0000001e  00004b3e  00004b3e  00004bf2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
237 .text.libgcc.mul 00000056  00004046  00004046  000040fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
238 .text.libgcc.div 00000062  00003e2a  00003e2a  00003ede  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
239 .text.libgcc.div 0000001c  00004b5c  00004b5c  00004c10  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
240 .text.libgcc.div 000000a2  00003324  00003324  000033d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
241 .text.libgcc  00000020  00004b00  00004b00  00004bb4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
242 .text.libgcc.prologue 00000038  0000444a  0000444a  000044fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
243 .text.libgcc.prologue 00000036  00004482  00004482  00004536  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
244 .text.libgcc  00000012  00004ca6  00004ca6  00004d5a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
245 .text.libgcc  00000012  00004cb8  00004cb8  00004d6c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 43 00 	jmp	0x86	; 0x86 <__ctors_end>
   4:	0c 94 07 24 	jmp	0x480e	; 0x480e <__vector_1>
   8:	0c 94 19 24 	jmp	0x4832	; 0x4832 <__vector_2>
   c:	0c 94 2b 24 	jmp	0x4856	; 0x4856 <__vector_3>
  10:	0c 94 3d 24 	jmp	0x487a	; 0x487a <__vector_4>
  14:	0c 94 4f 24 	jmp	0x489e	; 0x489e <__vector_5>
  18:	0c 94 61 24 	jmp	0x48c2	; 0x48c2 <__vector_6>
  1c:	0c 94 c4 26 	jmp	0x4d88	; 0x4d88 <__bad_interrupt>
  20:	0c 94 b1 1e 	jmp	0x3d62	; 0x3d62 <__vector_8>
  24:	0c 94 85 24 	jmp	0x490a	; 0x490a <__vector_9>
  28:	0c 94 99 1b 	jmp	0x3732	; 0x3732 <__vector_10>
  2c:	0c 94 97 24 	jmp	0x492e	; 0x492e <__vector_11>
  30:	0c 94 e0 18 	jmp	0x31c0	; 0x31c0 <__vector_12>
  34:	0c 94 a9 24 	jmp	0x4952	; 0x4952 <__vector_13>
  38:	0c 94 bb 24 	jmp	0x4976	; 0x4976 <__vector_14>
  3c:	0c 94 be 11 	jmp	0x237c	; 0x237c <__vector_15>
  40:	0c 94 d2 14 	jmp	0x29a4	; 0x29a4 <__vector_16>
  44:	0c 94 cd 24 	jmp	0x499a	; 0x499a <__vector_17>
  48:	0c 94 58 12 	jmp	0x24b0	; 0x24b0 <__vector_18>
  4c:	0c 94 df 24 	jmp	0x49be	; 0x49be <__vector_19>
  50:	0c 94 c4 26 	jmp	0x4d88	; 0x4d88 <__bad_interrupt>
  54:	0c 94 f1 24 	jmp	0x49e2	; 0x49e2 <__vector_21>
  58:	0c 94 73 24 	jmp	0x48e6	; 0x48e6 <__vector_22>
  5c:	0c 94 cb 1a 	jmp	0x3596	; 0x3596 <__vector_23>
  60:	0c 94 1d 21 	jmp	0x423a	; 0x423a <__vector_24>
  64:	0c 94 03 25 	jmp	0x4a06	; 0x4a06 <__vector_25>
  68:	0c 94 15 25 	jmp	0x4a2a	; 0x4a2a <__vector_26>
  6c:	0c 94 82 18 	jmp	0x3104	; 0x3104 <__vector_27>
  70:	0c 94 f4 20 	jmp	0x41e8	; 0x41e8 <__vector_28>
  74:	0c 94 27 25 	jmp	0x4a4e	; 0x4a4e <__vector_29>
  78:	0c 94 39 25 	jmp	0x4a72	; 0x4a72 <__vector_30>

0000007c <.dinit>:
  7c:	01 00       	.word	0x0001	; ????
  7e:	01 02       	muls	r16, r17
  80:	80 01       	movw	r16, r0
  82:	04 09       	sbc	r16, r4
  84:	85 80       	ldd	r8, Z+5	; 0x05

00000086 <__ctors_end>:
  86:	11 24       	eor	r1, r1
  88:	1f be       	out	0x3f, r1	; 63
  8a:	cf ef       	ldi	r28, 0xFF	; 255
  8c:	d0 e1       	ldi	r29, 0x10	; 16
  8e:	de bf       	out	0x3e, r29	; 62
  90:	cd bf       	out	0x3d, r28	; 61

00000092 <__do_copy_data>:
  92:	ec e7       	ldi	r30, 0x7C	; 124
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	40 e0       	ldi	r20, 0x00	; 0
  98:	17 c0       	rjmp	.+46     	; 0xc8 <__do_clear_bss+0x8>
  9a:	b5 91       	lpm	r27, Z+
  9c:	a5 91       	lpm	r26, Z+
  9e:	35 91       	lpm	r19, Z+
  a0:	25 91       	lpm	r18, Z+
  a2:	05 91       	lpm	r16, Z+
  a4:	07 fd       	sbrc	r16, 7
  a6:	0c c0       	rjmp	.+24     	; 0xc0 <__do_clear_bss>
  a8:	95 91       	lpm	r25, Z+
  aa:	85 91       	lpm	r24, Z+
  ac:	ef 01       	movw	r28, r30
  ae:	f9 2f       	mov	r31, r25
  b0:	e8 2f       	mov	r30, r24
  b2:	05 90       	lpm	r0, Z+
  b4:	0d 92       	st	X+, r0
  b6:	a2 17       	cp	r26, r18
  b8:	b3 07       	cpc	r27, r19
  ba:	d9 f7       	brne	.-10     	; 0xb2 <__do_copy_data+0x20>
  bc:	fe 01       	movw	r30, r28
  be:	04 c0       	rjmp	.+8      	; 0xc8 <__do_clear_bss+0x8>

000000c0 <__do_clear_bss>:
  c0:	1d 92       	st	X+, r1
  c2:	a2 17       	cp	r26, r18
  c4:	b3 07       	cpc	r27, r19
  c6:	e1 f7       	brne	.-8      	; 0xc0 <__do_clear_bss>
  c8:	e6 38       	cpi	r30, 0x86	; 134
  ca:	f4 07       	cpc	r31, r20
  cc:	31 f7       	brne	.-52     	; 0x9a <__do_copy_data+0x8>
  ce:	0e 94 bd 05 	call	0xb7a	; 0xb7a <main>
  d2:	0c 94 19 26 	jmp	0x4c32	; 0x4c32 <exit>

000000d6 <_exit>:
  d6:	f8 94       	cli

000000d8 <__stop_program>:
  d8:	ff cf       	rjmp	.-2      	; 0xd8 <__stop_program>

Disassembly of section .text:

00004d88 <__bad_interrupt>:
    4d88:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.__vector_27:

00003104 <__vector_27>:

	// Disable the conversion complete interrupt
	ADCSRA &= (uint8_t)~(1 << ADIE);

	// Clear any pending interrupt	
	ADCSRA |= (1 << ADIF);
    3104:	78 94       	sei
    3106:	1f 92       	push	r1
    3108:	0f 92       	push	r0
    310a:	0f b6       	in	r0, 0x3f	; 63
    310c:	0f 92       	push	r0
    310e:	11 24       	eor	r1, r1
    3110:	2f 93       	push	r18
    3112:	3f 93       	push	r19
    3114:	4f 93       	push	r20
    3116:	5f 93       	push	r21
    3118:	6f 93       	push	r22
    311a:	7f 93       	push	r23
    311c:	8f 93       	push	r24
    311e:	9f 93       	push	r25
    3120:	af 93       	push	r26
    3122:	bf 93       	push	r27
    3124:	ef 93       	push	r30
    3126:	ff 93       	push	r31
    3128:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f0078>
    312c:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f0079>
    3130:	80 91 4f 09 	lds	r24, 0x094F	; 0x80094f <sg_eCurrentType>
    3134:	91 e0       	ldi	r25, 0x01	; 1
    3136:	98 0f       	add	r25, r24
    3138:	90 93 4f 09 	sts	0x094F, r25	; 0x80094f <sg_eCurrentType>
    313c:	95 30       	cpi	r25, 0x05	; 5
    313e:	10 f0       	brcs	.+4      	; 0x3144 <__vector_27+0x40>
    3140:	10 92 4f 09 	sts	0x094F, r1	; 0x80094f <sg_eCurrentType>
    3144:	ac e7       	ldi	r26, 0x7C	; 124
    3146:	b0 e0       	ldi	r27, 0x00	; 0
    3148:	5c 91       	ld	r21, X
    314a:	20 91 4f 09 	lds	r18, 0x094F	; 0x80094f <sg_eCurrentType>
    314e:	30 e0       	ldi	r19, 0x00	; 0
    3150:	f9 01       	movw	r30, r18
    3152:	ee 0f       	add	r30, r30
    3154:	ff 1f       	adc	r31, r31
    3156:	2e 0f       	add	r18, r30
    3158:	3f 1f       	adc	r19, r31
    315a:	03 2e       	mov	r0, r19
    315c:	00 0c       	add	r0, r0
    315e:	44 0b       	sbc	r20, r20
    3160:	26 5e       	subi	r18, 0xE6	; 230
    3162:	3c 4f       	sbci	r19, 0xFC	; 252
    3164:	4f 4f       	sbci	r20, 0xFF	; 255
    3166:	f9 01       	movw	r30, r18
    3168:	94 91       	lpm	r25, Z
    316a:	47 fd       	sbrc	r20, 7
    316c:	90 81       	ld	r25, Z
    316e:	50 7e       	andi	r21, 0xE0	; 224
    3170:	95 2b       	or	r25, r21
    3172:	90 6c       	ori	r25, 0xC0	; 192
    3174:	9c 93       	st	X, r25
    3176:	0e 94 f4 23 	call	0x47e8	; 0x47e8 <ADCCallback>
    317a:	80 91 4f 09 	lds	r24, 0x094F	; 0x80094f <sg_eCurrentType>
    317e:	81 11       	cpse	r24, r1
    3180:	09 c0       	rjmp	.+18     	; 0x3194 <__vector_27+0x90>
    3182:	ea e7       	ldi	r30, 0x7A	; 122
    3184:	f0 e0       	ldi	r31, 0x00	; 0
    3186:	80 81       	ld	r24, Z
    3188:	87 7f       	andi	r24, 0xF7	; 247
    318a:	80 83       	st	Z, r24
    318c:	81 e0       	ldi	r24, 0x01	; 1
    318e:	80 93 62 09 	sts	0x0962, r24	; 0x800962 <sg_eState>
    3192:	05 c0       	rjmp	.+10     	; 0x319e <__vector_27+0x9a>
    3194:	ea e7       	ldi	r30, 0x7A	; 122
    3196:	f0 e0       	ldi	r31, 0x00	; 0
    3198:	80 81       	ld	r24, Z
    319a:	88 64       	ori	r24, 0x48	; 72
    319c:	80 83       	st	Z, r24
    319e:	ff 91       	pop	r31
    31a0:	ef 91       	pop	r30
    31a2:	bf 91       	pop	r27
    31a4:	af 91       	pop	r26
    31a6:	9f 91       	pop	r25
    31a8:	8f 91       	pop	r24
    31aa:	7f 91       	pop	r23
    31ac:	6f 91       	pop	r22
    31ae:	5f 91       	pop	r21
    31b0:	4f 91       	pop	r20
    31b2:	3f 91       	pop	r19
    31b4:	2f 91       	pop	r18
    31b6:	0f 90       	pop	r0
    31b8:	0f be       	out	0x3f, r0	; 63
    31ba:	0f 90       	pop	r0
    31bc:	1f 90       	pop	r1
    31be:	18 95       	reti

Disassembly of section .text.ADCSetPowerOn:

00004d42 <ADCSetPowerOn>:
}

// Enable ADC
void ADCSetPowerOn( void )
{
	ADCSRA |= (1 << ADEN);
    4d42:	ea e7       	ldi	r30, 0x7A	; 122
    4d44:	f0 e0       	ldi	r31, 0x00	; 0
    4d46:	80 81       	ld	r24, Z
    4d48:	80 68       	ori	r24, 0x80	; 128
    4d4a:	80 83       	st	Z, r24
    4d4c:	08 95       	ret

Disassembly of section .text.ADCStartConversion:

000046f8 <ADCStartConversion>:
}

void ADCStartConversion(void)
{
	// Don't start anything if we're not idle
	if (EADCSTATE_IDLE != sg_eState)
    46f8:	80 91 62 09 	lds	r24, 0x0962	; 0x800962 <sg_eState>
    46fc:	81 30       	cpi	r24, 0x01	; 1
    46fe:	81 f4       	brne	.+32     	; 0x4720 <ADCStartConversion+0x28>
	{
		return;
	}
	
	// Set back to the first channel
	sg_eCurrentType = EADCTYPE_FIRST;
    4700:	10 92 4f 09 	sts	0x094F, r1	; 0x80094f <sg_eCurrentType>
	
	// Set the MUX
	ADMUX = (ADMUX & MUX_MASK) | (sg_sMuxSelectList[sg_eCurrentType].u8MuxSelect) | MUX_AREF;
    4704:	ec e7       	ldi	r30, 0x7C	; 124
    4706:	f0 e0       	ldi	r31, 0x00	; 0
    4708:	80 81       	ld	r24, Z
    470a:	80 7e       	andi	r24, 0xE0	; 224
    470c:	89 6c       	ori	r24, 0xC9	; 201
    470e:	80 83       	st	Z, r24
		
	sg_eState = EADCSTATE_READING;
    4710:	82 e0       	ldi	r24, 0x02	; 2
    4712:	80 93 62 09 	sts	0x0962, r24	; 0x800962 <sg_eState>
	
	// Start a single conversion  - *dp run one at a time for now instead of continuous
	ADCSRA |= (1 << ADSC) | (1 << ADIE) | (1 << ADEN);  // turn power on if it isn't
    4716:	ea e7       	ldi	r30, 0x7A	; 122
    4718:	f0 e0       	ldi	r31, 0x00	; 0
    471a:	80 81       	ld	r24, Z
    471c:	88 6c       	ori	r24, 0xC8	; 200
    471e:	80 83       	st	Z, r24
    4720:	08 95       	ret

Disassembly of section .text.ADCInit:

00002240 <ADCInit>:

	// Disable the conversion complete interrupt
	ADCSRA &= (uint8_t)~(1 << ADIE);

	// Clear any pending interrupt	
	ADCSRA |= (1 << ADIF);
    2240:	cf 93       	push	r28
    2242:	82 e0       	ldi	r24, 0x02	; 2
    2244:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f007a>
    2248:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
    224c:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7f0094>
    2250:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7f0095>
    2254:	10 92 96 00 	sts	0x0096, r1	; 0x800096 <__TEXT_REGION_LENGTH__+0x7f0096>
    2258:	10 92 97 00 	sts	0x0097, r1	; 0x800097 <__TEXT_REGION_LENGTH__+0x7f0097>
    225c:	80 ea       	ldi	r24, 0xA0	; 160
    225e:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f007b>
    2262:	c0 e0       	ldi	r28, 0x00	; 0
    2264:	83 c0       	rjmp	.+262    	; 0x236c <ADCInit+0x12c>
    2266:	2c 2f       	mov	r18, r28
    2268:	30 e0       	ldi	r19, 0x00	; 0
    226a:	c9 01       	movw	r24, r18
    226c:	88 0f       	add	r24, r24
    226e:	99 1f       	adc	r25, r25
    2270:	82 0f       	add	r24, r18
    2272:	93 1f       	adc	r25, r19
    2274:	01 96       	adiw	r24, 0x01	; 1
    2276:	09 2e       	mov	r0, r25
    2278:	00 0c       	add	r0, r0
    227a:	aa 0b       	sbc	r26, r26
    227c:	86 5e       	subi	r24, 0xE6	; 230
    227e:	9c 4f       	sbci	r25, 0xFC	; 252
    2280:	af 4f       	sbci	r26, 0xFF	; 255
    2282:	fc 01       	movw	r30, r24
    2284:	84 91       	lpm	r24, Z
    2286:	a7 fd       	sbrc	r26, 7
    2288:	80 81       	ld	r24, Z
    228a:	81 30       	cpi	r24, 0x01	; 1
    228c:	41 f0       	breq	.+16     	; 0x229e <ADCInit+0x5e>
    228e:	08 f4       	brcc	.+2      	; 0x2292 <ADCInit+0x52>
    2290:	6c c0       	rjmp	.+216    	; 0x236a <ADCInit+0x12a>
    2292:	82 30       	cpi	r24, 0x02	; 2
    2294:	21 f1       	breq	.+72     	; 0x22de <ADCInit+0x9e>
    2296:	83 30       	cpi	r24, 0x03	; 3
    2298:	09 f4       	brne	.+2      	; 0x229c <ADCInit+0x5c>
    229a:	41 c0       	rjmp	.+130    	; 0x231e <ADCInit+0xde>
    229c:	5f c0       	rjmp	.+190    	; 0x235c <ADCInit+0x11c>
    229e:	54 b1       	in	r21, 0x04	; 4
    22a0:	c9 01       	movw	r24, r18
    22a2:	88 0f       	add	r24, r24
    22a4:	99 1f       	adc	r25, r25
    22a6:	28 0f       	add	r18, r24
    22a8:	39 1f       	adc	r19, r25
    22aa:	2e 5f       	subi	r18, 0xFE	; 254
    22ac:	3f 4f       	sbci	r19, 0xFF	; 255
    22ae:	03 2e       	mov	r0, r19
    22b0:	00 0c       	add	r0, r0
    22b2:	44 0b       	sbc	r20, r20
    22b4:	26 5e       	subi	r18, 0xE6	; 230
    22b6:	3c 4f       	sbci	r19, 0xFC	; 252
    22b8:	4f 4f       	sbci	r20, 0xFF	; 255
    22ba:	f9 01       	movw	r30, r18
    22bc:	24 91       	lpm	r18, Z
    22be:	47 fd       	sbrc	r20, 7
    22c0:	20 81       	ld	r18, Z
    22c2:	81 e0       	ldi	r24, 0x01	; 1
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	02 c0       	rjmp	.+4      	; 0x22cc <ADCInit+0x8c>
    22c8:	88 0f       	add	r24, r24
    22ca:	99 1f       	adc	r25, r25
    22cc:	2a 95       	dec	r18
    22ce:	e2 f7       	brpl	.-8      	; 0x22c8 <ADCInit+0x88>
    22d0:	80 95       	com	r24
    22d2:	58 23       	and	r21, r24
    22d4:	54 b9       	out	0x04, r21	; 4
    22d6:	95 b1       	in	r25, 0x05	; 5
    22d8:	89 23       	and	r24, r25
    22da:	85 b9       	out	0x05, r24	; 5
    22dc:	46 c0       	rjmp	.+140    	; 0x236a <ADCInit+0x12a>
    22de:	57 b1       	in	r21, 0x07	; 7
    22e0:	c9 01       	movw	r24, r18
    22e2:	88 0f       	add	r24, r24
    22e4:	99 1f       	adc	r25, r25
    22e6:	28 0f       	add	r18, r24
    22e8:	39 1f       	adc	r19, r25
    22ea:	2e 5f       	subi	r18, 0xFE	; 254
    22ec:	3f 4f       	sbci	r19, 0xFF	; 255
    22ee:	03 2e       	mov	r0, r19
    22f0:	00 0c       	add	r0, r0
    22f2:	44 0b       	sbc	r20, r20
    22f4:	26 5e       	subi	r18, 0xE6	; 230
    22f6:	3c 4f       	sbci	r19, 0xFC	; 252
    22f8:	4f 4f       	sbci	r20, 0xFF	; 255
    22fa:	f9 01       	movw	r30, r18
    22fc:	24 91       	lpm	r18, Z
    22fe:	47 fd       	sbrc	r20, 7
    2300:	20 81       	ld	r18, Z
    2302:	81 e0       	ldi	r24, 0x01	; 1
    2304:	90 e0       	ldi	r25, 0x00	; 0
    2306:	02 c0       	rjmp	.+4      	; 0x230c <ADCInit+0xcc>
    2308:	88 0f       	add	r24, r24
    230a:	99 1f       	adc	r25, r25
    230c:	2a 95       	dec	r18
    230e:	e2 f7       	brpl	.-8      	; 0x2308 <ADCInit+0xc8>
    2310:	80 95       	com	r24
    2312:	58 23       	and	r21, r24
    2314:	57 b9       	out	0x07, r21	; 7
    2316:	98 b1       	in	r25, 0x08	; 8
    2318:	89 23       	and	r24, r25
    231a:	88 b9       	out	0x08, r24	; 8
    231c:	26 c0       	rjmp	.+76     	; 0x236a <ADCInit+0x12a>
    231e:	4a b1       	in	r20, 0x0a	; 10
    2320:	c9 01       	movw	r24, r18
    2322:	88 0f       	add	r24, r24
    2324:	99 1f       	adc	r25, r25
    2326:	82 0f       	add	r24, r18
    2328:	93 1f       	adc	r25, r19
    232a:	02 96       	adiw	r24, 0x02	; 2
    232c:	09 2e       	mov	r0, r25
    232e:	00 0c       	add	r0, r0
    2330:	aa 0b       	sbc	r26, r26
    2332:	86 5e       	subi	r24, 0xE6	; 230
    2334:	9c 4f       	sbci	r25, 0xFC	; 252
    2336:	af 4f       	sbci	r26, 0xFF	; 255
    2338:	fc 01       	movw	r30, r24
    233a:	24 91       	lpm	r18, Z
    233c:	a7 fd       	sbrc	r26, 7
    233e:	20 81       	ld	r18, Z
    2340:	81 e0       	ldi	r24, 0x01	; 1
    2342:	90 e0       	ldi	r25, 0x00	; 0
    2344:	02 c0       	rjmp	.+4      	; 0x234a <ADCInit+0x10a>
    2346:	88 0f       	add	r24, r24
    2348:	99 1f       	adc	r25, r25
    234a:	2a 95       	dec	r18
    234c:	e2 f7       	brpl	.-8      	; 0x2346 <ADCInit+0x106>
    234e:	80 95       	com	r24
    2350:	48 23       	and	r20, r24
    2352:	4a b9       	out	0x0a, r20	; 10
    2354:	9b b1       	in	r25, 0x0b	; 11
    2356:	89 23       	and	r24, r25
    2358:	8b b9       	out	0x0b, r24	; 11
    235a:	07 c0       	rjmp	.+14     	; 0x236a <ADCInit+0x12a>
    235c:	45 eb       	ldi	r20, 0xB5	; 181
    235e:	50 e0       	ldi	r21, 0x00	; 0
    2360:	61 e4       	ldi	r22, 0x41	; 65
    2362:	73 e0       	ldi	r23, 0x03	; 3
    2364:	80 e0       	ldi	r24, 0x00	; 0
    2366:	0e 94 50 23 	call	0x46a0	; 0x46a0 <PlatformAssert>
    236a:	cf 5f       	subi	r28, 0xFF	; 255
    236c:	c5 30       	cpi	r28, 0x05	; 5
    236e:	08 f4       	brcc	.+2      	; 0x2372 <ADCInit+0x132>
    2370:	7a cf       	rjmp	.-268    	; 0x2266 <ADCInit+0x26>
    2372:	81 e0       	ldi	r24, 0x01	; 1
    2374:	80 93 62 09 	sts	0x0962, r24	; 0x800962 <sg_eState>
    2378:	cf 91       	pop	r28
    237a:	08 95       	ret

Disassembly of section .text.CANLookupCommand:

00003dc8 <CANLookupCommand>:
	{PKT_MODULE_SET_TIME,		ECANMessageType_SetTime},
	{PKT_MODULE_MAX_STATE,		ECANMessageType_MaxState}
};

static ECANMessageType CANLookupCommand( uint16_t u16ID )
{
    3dc8:	cf 93       	push	r28
    3dca:	df 93       	push	r29
    3dcc:	ec 01       	movw	r28, r24
	uint8_t u8Index = 0;
    3dce:	90 e0       	ldi	r25, 0x00	; 0
	
	while( u8Index < (sizeof(sg_sRXCommandList)/sizeof(sg_sRXCommandList[0])) )
    3dd0:	26 c0       	rjmp	.+76     	; 0x3e1e <CANLookupCommand+0x56>
	{
		if( sg_sRXCommandList[u8Index].u16ID == u16ID )
    3dd2:	a9 2f       	mov	r26, r25
    3dd4:	b0 e0       	ldi	r27, 0x00	; 0
    3dd6:	9d 01       	movw	r18, r26
    3dd8:	22 0f       	add	r18, r18
    3dda:	33 1f       	adc	r19, r19
    3ddc:	2a 0f       	add	r18, r26
    3dde:	3b 1f       	adc	r19, r27
    3de0:	03 2e       	mov	r0, r19
    3de2:	00 0c       	add	r0, r0
    3de4:	44 0b       	sbc	r20, r20
    3de6:	2b 52       	subi	r18, 0x2B	; 43
    3de8:	3d 4f       	sbci	r19, 0xFD	; 253
    3dea:	4f 4f       	sbci	r20, 0xFF	; 255
    3dec:	f9 01       	movw	r30, r18
    3dee:	54 2f       	mov	r21, r20
    3df0:	0e 94 7d 26 	call	0x4cfa	; 0x4cfa <__xload_2>
    3df4:	6c 17       	cp	r22, r28
    3df6:	7d 07       	cpc	r23, r29
    3df8:	89 f4       	brne	.+34     	; 0x3e1c <CANLookupCommand+0x54>
		{
			return( sg_sRXCommandList[u8Index].eType );
    3dfa:	cd 01       	movw	r24, r26
    3dfc:	88 0f       	add	r24, r24
    3dfe:	99 1f       	adc	r25, r25
    3e00:	8a 0f       	add	r24, r26
    3e02:	9b 1f       	adc	r25, r27
    3e04:	02 96       	adiw	r24, 0x02	; 2
    3e06:	09 2e       	mov	r0, r25
    3e08:	00 0c       	add	r0, r0
    3e0a:	aa 0b       	sbc	r26, r26
    3e0c:	8b 52       	subi	r24, 0x2B	; 43
    3e0e:	9d 4f       	sbci	r25, 0xFD	; 253
    3e10:	af 4f       	sbci	r26, 0xFF	; 255
    3e12:	fc 01       	movw	r30, r24
    3e14:	84 91       	lpm	r24, Z
    3e16:	a7 fd       	sbrc	r26, 7
    3e18:	80 81       	ld	r24, Z
    3e1a:	04 c0       	rjmp	.+8      	; 0x3e24 <CANLookupCommand+0x5c>
		}
		
		u8Index++;
    3e1c:	9f 5f       	subi	r25, 0xFF	; 255

static ECANMessageType CANLookupCommand( uint16_t u16ID )
{
	uint8_t u8Index = 0;
	
	while( u8Index < (sizeof(sg_sRXCommandList)/sizeof(sg_sRXCommandList[0])) )
    3e1e:	9b 30       	cpi	r25, 0x0B	; 11
    3e20:	c0 f2       	brcs	.-80     	; 0x3dd2 <CANLookupCommand+0xa>
		}
		
		u8Index++;
	}
	
	return( ECANMessageType_MAX );
    3e22:	83 e1       	ldi	r24, 0x13	; 19
}
    3e24:	df 91       	pop	r29
    3e26:	cf 91       	pop	r28
    3e28:	08 95       	ret

Disassembly of section .text.CANMOBSet:

00001a00 <CANMOBSet>:

static void CANMOBSet( uint8_t u8MOBIndex,
					   const SMOBDef* psDef,
					   uint8_t* pu8Data,
					   uint8_t u8DataLen )
{
    1a00:	6f 92       	push	r6
    1a02:	7f 92       	push	r7
    1a04:	8f 92       	push	r8
    1a06:	9f 92       	push	r9
    1a08:	bf 92       	push	r11
    1a0a:	cf 92       	push	r12
    1a0c:	df 92       	push	r13
    1a0e:	ef 92       	push	r14
    1a10:	ff 92       	push	r15
    1a12:	0f 93       	push	r16
    1a14:	1f 93       	push	r17
    1a16:	cf 93       	push	r28
    1a18:	df 93       	push	r29
    1a1a:	f8 2e       	mov	r15, r24
    1a1c:	6a 01       	movw	r12, r20
    1a1e:	e6 2e       	mov	r14, r22
    1a20:	e9 01       	movw	r28, r18
	uint8_t u8CANCDMOBValue;
	uint32_t u32MessageID;
	uint8_t savedCANGIE;
	
	MBASSERT( u8MOBIndex <= 5 );
    1a22:	0f 2e       	mov	r0, r31
    1a24:	f5 e0       	ldi	r31, 0x05	; 5
    1a26:	6f 2e       	mov	r6, r31
    1a28:	f0 2d       	mov	r31, r0
    1a2a:	68 16       	cp	r6, r24
    1a2c:	38 f4       	brcc	.+14     	; 0x1a3c <CANMOBSet+0x3c>
    1a2e:	40 ed       	ldi	r20, 0xD0	; 208
    1a30:	50 e0       	ldi	r21, 0x00	; 0
    1a32:	6c e4       	ldi	r22, 0x4C	; 76
    1a34:	73 e0       	ldi	r23, 0x03	; 3
    1a36:	80 e0       	ldi	r24, 0x00	; 0
    1a38:	0e 94 50 23 	call	0x46a0	; 0x46a0 <PlatformAssert>
	MBASSERT( u8DataLen <= 8 );
    1a3c:	09 30       	cpi	r16, 0x09	; 9
    1a3e:	38 f0       	brcs	.+14     	; 0x1a4e <CANMOBSet+0x4e>
    1a40:	41 ed       	ldi	r20, 0xD1	; 209
    1a42:	50 e0       	ldi	r21, 0x00	; 0
    1a44:	6c e4       	ldi	r22, 0x4C	; 76
    1a46:	73 e0       	ldi	r23, 0x03	; 3
    1a48:	80 e0       	ldi	r24, 0x00	; 0
    1a4a:	0e 94 50 23 	call	0x46a0	; 0x46a0 <PlatformAssert>
	
	// Disable CAN interrupts during MOB configuration to prevent corruption
	savedCANGIE = CANGIE;
    1a4e:	eb ed       	ldi	r30, 0xDB	; 219
    1a50:	f0 e0       	ldi	r31, 0x00	; 0
    1a52:	b0 80       	ld	r11, Z
	CANGIE &= ~(1 << ENIT);
    1a54:	80 81       	ld	r24, Z
    1a56:	8f 77       	andi	r24, 0x7F	; 127
    1a58:	80 83       	st	Z, r24
	
	// Set the MOB page, auto increment, and data index 0
	CANPAGE = u8MOBIndex << 4;
    1a5a:	8f 2d       	mov	r24, r15
    1a5c:	82 95       	swap	r24
    1a5e:	80 7f       	andi	r24, 0xF0	; 240
    1a60:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f00ed>
	
	// Clear the MOB status
	CANSTMOB = 0;
    1a64:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
	
	// Set the MOB registers for this page
	u8CANCDMOBValue = u8DataLen;
	u8CANCDMOBValue |= (psDef->u8Mode << CONMOB0);
    1a68:	f6 01       	movw	r30, r12
    1a6a:	84 91       	lpm	r24, Z
    1a6c:	e7 fc       	sbrc	r14, 7
    1a6e:	80 81       	ld	r24, Z
    1a70:	20 e4       	ldi	r18, 0x40	; 64
    1a72:	82 9f       	mul	r24, r18
    1a74:	c0 01       	movw	r24, r0
    1a76:	11 24       	eor	r1, r1
    1a78:	10 2f       	mov	r17, r16
    1a7a:	18 2b       	or	r17, r24
	if( psDef->bReplyValid )
    1a7c:	ae 2d       	mov	r26, r14
    1a7e:	c6 01       	movw	r24, r12
    1a80:	01 96       	adiw	r24, 0x01	; 1
    1a82:	a1 1d       	adc	r26, r1
    1a84:	fc 01       	movw	r30, r24
    1a86:	84 91       	lpm	r24, Z
    1a88:	a7 fd       	sbrc	r26, 7
    1a8a:	80 81       	ld	r24, Z
    1a8c:	81 11       	cpse	r24, r1
	{
		u8CANCDMOBValue |= (1 << RPLV);
    1a8e:	10 62       	ori	r17, 0x20	; 32
	}
	u8CANCDMOBValue |= (1 << IDE);
    1a90:	10 61       	ori	r17, 0x10	; 16
	// Extended frame address format
	//	Bits 0-7: Pack / Module registration ID of sender (if assigned, zero otherwise)
	//	Bits 8-17: Reserved, set to zero.
	//	Bits 18-28: Static message ID (eg. 0x500)
	
	u32MessageID = (uint32_t)PlatformGetRegistrationID();
    1a92:	0e 94 c1 26 	call	0x4d82	; 0x4d82 <PlatformGetRegistrationID>
	u32MessageID |= (((uint32_t)psDef->u16ID) & 0x7ff) << 18;
    1a96:	4e 2d       	mov	r20, r14
    1a98:	96 01       	movw	r18, r12
    1a9a:	2e 5f       	subi	r18, 0xFE	; 254
    1a9c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a9e:	4f 4f       	sbci	r20, 0xFF	; 255
    1aa0:	f9 01       	movw	r30, r18
    1aa2:	54 2f       	mov	r21, r20
    1aa4:	0e 94 7d 26 	call	0x4cfa	; 0x4cfa <__xload_2>
    1aa8:	ab 01       	movw	r20, r22
    1aaa:	57 70       	andi	r21, 0x07	; 7
    1aac:	60 e0       	ldi	r22, 0x00	; 0
    1aae:	70 e0       	ldi	r23, 0x00	; 0
    1ab0:	03 2e       	mov	r0, r19
    1ab2:	32 e1       	ldi	r19, 0x12	; 18
    1ab4:	44 0f       	add	r20, r20
    1ab6:	55 1f       	adc	r21, r21
    1ab8:	66 1f       	adc	r22, r22
    1aba:	77 1f       	adc	r23, r23
    1abc:	3a 95       	dec	r19
    1abe:	d1 f7       	brne	.-12     	; 0x1ab4 <CANMOBSet+0xb4>
    1ac0:	30 2d       	mov	r19, r0
    1ac2:	3a 01       	movw	r6, r20
    1ac4:	4b 01       	movw	r8, r22
    1ac6:	68 2a       	or	r6, r24
    1ac8:	d4 01       	movw	r26, r8
    1aca:	c3 01       	movw	r24, r6
	
	CANIDT4 = psDef->bRTRTag?(1 << RTRTAG):0;
    1acc:	4e 2d       	mov	r20, r14
    1ace:	96 01       	movw	r18, r12
    1ad0:	2a 5f       	subi	r18, 0xFA	; 250
    1ad2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ad4:	4f 4f       	sbci	r20, 0xFF	; 255
    1ad6:	f9 01       	movw	r30, r18
    1ad8:	24 91       	lpm	r18, Z
    1ada:	47 fd       	sbrc	r20, 7
    1adc:	20 81       	ld	r18, Z
    1ade:	22 23       	and	r18, r18
    1ae0:	11 f0       	breq	.+4      	; 0x1ae6 <CANMOBSet+0xe6>
    1ae2:	24 e0       	ldi	r18, 0x04	; 4
    1ae4:	01 c0       	rjmp	.+2      	; 0x1ae8 <CANMOBSet+0xe8>
    1ae6:	20 e0       	ldi	r18, 0x00	; 0
    1ae8:	e0 ef       	ldi	r30, 0xF0	; 240
    1aea:	f0 e0       	ldi	r31, 0x00	; 0
    1aec:	20 83       	st	Z, r18
	CANIDT4 |= u32MessageID << 3;
    1aee:	20 81       	ld	r18, Z
    1af0:	38 2f       	mov	r19, r24
    1af2:	33 0f       	add	r19, r19
    1af4:	33 0f       	add	r19, r19
    1af6:	33 0f       	add	r19, r19
    1af8:	23 2b       	or	r18, r19
    1afa:	20 83       	st	Z, r18
	CANIDT3 = u32MessageID >> 5;
    1afc:	ac 01       	movw	r20, r24
    1afe:	bd 01       	movw	r22, r26
    1b00:	68 94       	set
    1b02:	14 f8       	bld	r1, 4
    1b04:	76 95       	lsr	r23
    1b06:	67 95       	ror	r22
    1b08:	57 95       	ror	r21
    1b0a:	47 95       	ror	r20
    1b0c:	16 94       	lsr	r1
    1b0e:	d1 f7       	brne	.-12     	; 0x1b04 <CANMOBSet+0x104>
    1b10:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f00f1>
	CANIDT2 = u32MessageID >> 13;
    1b14:	ac 01       	movw	r20, r24
    1b16:	bd 01       	movw	r22, r26
    1b18:	03 2e       	mov	r0, r19
    1b1a:	3d e0       	ldi	r19, 0x0D	; 13
    1b1c:	76 95       	lsr	r23
    1b1e:	67 95       	ror	r22
    1b20:	57 95       	ror	r21
    1b22:	47 95       	ror	r20
    1b24:	3a 95       	dec	r19
    1b26:	d1 f7       	brne	.-12     	; 0x1b1c <CANMOBSet+0x11c>
    1b28:	30 2d       	mov	r19, r0
    1b2a:	40 93 f2 00 	sts	0x00F2, r20	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f00f2>
	CANIDT1 = u32MessageID >> 21;
    1b2e:	07 2e       	mov	r0, r23
    1b30:	75 e1       	ldi	r23, 0x15	; 21
    1b32:	b6 95       	lsr	r27
    1b34:	a7 95       	ror	r26
    1b36:	97 95       	ror	r25
    1b38:	87 95       	ror	r24
    1b3a:	7a 95       	dec	r23
    1b3c:	d1 f7       	brne	.-12     	; 0x1b32 <CANMOBSet+0x132>
    1b3e:	70 2d       	mov	r23, r0
    1b40:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f00f3>
	
	// Setup mask for the cmd (require matching ID extention bit)
	CANIDM4 = psDef->bRTRMask?(1 << RTRTAG):0;
    1b44:	ae 2d       	mov	r26, r14
    1b46:	c6 01       	movw	r24, r12
    1b48:	07 96       	adiw	r24, 0x07	; 7
    1b4a:	a1 1d       	adc	r26, r1
    1b4c:	fc 01       	movw	r30, r24
    1b4e:	84 91       	lpm	r24, Z
    1b50:	a7 fd       	sbrc	r26, 7
    1b52:	80 81       	ld	r24, Z
    1b54:	88 23       	and	r24, r24
    1b56:	11 f0       	breq	.+4      	; 0x1b5c <CANMOBSet+0x15c>
    1b58:	84 e0       	ldi	r24, 0x04	; 4
    1b5a:	01 c0       	rjmp	.+2      	; 0x1b5e <CANMOBSet+0x15e>
    1b5c:	80 e0       	ldi	r24, 0x00	; 0
    1b5e:	e4 ef       	ldi	r30, 0xF4	; 244
    1b60:	f0 e0       	ldi	r31, 0x00	; 0
    1b62:	80 83       	st	Z, r24
	CANIDM4 |= (1 << IDEMSK);
    1b64:	80 81       	ld	r24, Z
    1b66:	81 60       	ori	r24, 0x01	; 1
    1b68:	80 83       	st	Z, r24
	CANIDM3 = 0;
    1b6a:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7f00f5>
	CANIDM2 = psDef->u16IDMask << 5;
    1b6e:	ae 2d       	mov	r26, r14
    1b70:	c6 01       	movw	r24, r12
    1b72:	04 96       	adiw	r24, 0x04	; 4
    1b74:	a1 1d       	adc	r26, r1
    1b76:	fc 01       	movw	r30, r24
    1b78:	5a 2f       	mov	r21, r26
    1b7a:	0e 94 7d 26 	call	0x4cfa	; 0x4cfa <__xload_2>
    1b7e:	62 95       	swap	r22
    1b80:	66 0f       	add	r22, r22
    1b82:	60 7e       	andi	r22, 0xE0	; 224
    1b84:	60 93 f6 00 	sts	0x00F6, r22	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7f00f6>
	CANIDM1 = psDef->u16IDMask >> 3;
    1b88:	fc 01       	movw	r30, r24
    1b8a:	5a 2f       	mov	r21, r26
    1b8c:	0e 94 7d 26 	call	0x4cfa	; 0x4cfa <__xload_2>
    1b90:	76 95       	lsr	r23
    1b92:	67 95       	ror	r22
    1b94:	76 95       	lsr	r23
    1b96:	67 95       	ror	r22
    1b98:	76 95       	lsr	r23
    1b9a:	67 95       	ror	r22
    1b9c:	60 93 f7 00 	sts	0x00F7, r22	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7f00f7>
	
	// Set the data into the FIFO
	while( u8DataLen )
    1ba0:	04 c0       	rjmp	.+8      	; 0x1baa <CANMOBSet+0x1aa>
	{
		CANMSG = *pu8Data;
    1ba2:	89 91       	ld	r24, Y+
    1ba4:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
		
		pu8Data++;
		u8DataLen--;
    1ba8:	01 50       	subi	r16, 0x01	; 1
	CANIDM3 = 0;
	CANIDM2 = psDef->u16IDMask << 5;
	CANIDM1 = psDef->u16IDMask >> 3;
	
	// Set the data into the FIFO
	while( u8DataLen )
    1baa:	01 11       	cpse	r16, r1
    1bac:	fa cf       	rjmp	.-12     	; 0x1ba2 <CANMOBSet+0x1a2>
		pu8Data++;
		u8DataLen--;
	}
	
	// Send it now
	CANCDMOB = u8CANCDMOBValue;
    1bae:	10 93 ef 00 	sts	0x00EF, r17	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
	
	// Enable (activates the MOB) or disable the MOB interrupt
	if( psDef->u8Mode != CAN_DISABLED )
    1bb2:	f6 01       	movw	r30, r12
    1bb4:	84 91       	lpm	r24, Z
    1bb6:	e7 fc       	sbrc	r14, 7
    1bb8:	80 81       	ld	r24, Z
    1bba:	88 23       	and	r24, r24
    1bbc:	69 f0       	breq	.+26     	; 0x1bd8 <CANMOBSet+0x1d8>
	{
		CANIE2 |= (1 << u8MOBIndex);
    1bbe:	ee ed       	ldi	r30, 0xDE	; 222
    1bc0:	f0 e0       	ldi	r31, 0x00	; 0
    1bc2:	20 81       	ld	r18, Z
    1bc4:	81 e0       	ldi	r24, 0x01	; 1
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	02 c0       	rjmp	.+4      	; 0x1bce <CANMOBSet+0x1ce>
    1bca:	88 0f       	add	r24, r24
    1bcc:	99 1f       	adc	r25, r25
    1bce:	fa 94       	dec	r15
    1bd0:	e2 f7       	brpl	.-8      	; 0x1bca <CANMOBSet+0x1ca>
    1bd2:	82 2b       	or	r24, r18
    1bd4:	80 83       	st	Z, r24
    1bd6:	0d c0       	rjmp	.+26     	; 0x1bf2 <CANMOBSet+0x1f2>
	}
	else
	{
		CANIE2 &= (uint8_t)~(1 << u8MOBIndex);
    1bd8:	ee ed       	ldi	r30, 0xDE	; 222
    1bda:	f0 e0       	ldi	r31, 0x00	; 0
    1bdc:	20 81       	ld	r18, Z
    1bde:	81 e0       	ldi	r24, 0x01	; 1
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	02 c0       	rjmp	.+4      	; 0x1be8 <CANMOBSet+0x1e8>
    1be4:	88 0f       	add	r24, r24
    1be6:	99 1f       	adc	r25, r25
    1be8:	fa 94       	dec	r15
    1bea:	e2 f7       	brpl	.-8      	; 0x1be4 <CANMOBSet+0x1e4>
    1bec:	80 95       	com	r24
    1bee:	82 23       	and	r24, r18
    1bf0:	80 83       	st	Z, r24
	}
	
	// Restore CAN interrupts
	CANGIE = savedCANGIE;
    1bf2:	b0 92 db 00 	sts	0x00DB, r11	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f00db>
}
    1bf6:	df 91       	pop	r29
    1bf8:	cf 91       	pop	r28
    1bfa:	1f 91       	pop	r17
    1bfc:	0f 91       	pop	r16
    1bfe:	ff 90       	pop	r15
    1c00:	ef 90       	pop	r14
    1c02:	df 90       	pop	r13
    1c04:	cf 90       	pop	r12
    1c06:	bf 90       	pop	r11
    1c08:	9f 90       	pop	r9
    1c0a:	8f 90       	pop	r8
    1c0c:	7f 90       	pop	r7
    1c0e:	6f 90       	pop	r6
    1c10:	08 95       	ret

Disassembly of section .text.CANSendMessageInternal:

00001f62 <CANSendMessageInternal>:

static void CANSendMessageInternal( ECANMessageType eType,
									uint8_t* pu8Data,
									uint8_t u8DataLen,	
									bool bRetransmit )
{
    1f62:	6f 92       	push	r6
    1f64:	7f 92       	push	r7
    1f66:	8f 92       	push	r8
    1f68:	ef 92       	push	r14
    1f6a:	ff 92       	push	r15
    1f6c:	0f 93       	push	r16
    1f6e:	cf 93       	push	r28
    1f70:	df 93       	push	r29
    1f72:	c8 2f       	mov	r28, r24
    1f74:	7b 01       	movw	r14, r22
    1f76:	04 2f       	mov	r16, r20
    1f78:	d2 2f       	mov	r29, r18
	const SMOBDef* psDef = NULL;
	
	if( ECANMessageType_ModuleAnnouncement == eType )
    1f7a:	88 23       	and	r24, r24
    1f7c:	f9 f0       	breq	.+62     	; 0x1fbc <CANSendMessageInternal+0x5a>
	{
		psDef = &sg_sMOBModuleAnnouncement;
	}
	else if( ECANMessageType_ModuleStatus1 == eType )
    1f7e:	81 30       	cpi	r24, 0x01	; 1
    1f80:	31 f1       	breq	.+76     	; 0x1fce <CANSendMessageInternal+0x6c>
	{
		psDef = &sg_sMOBModuleStatus1;
	}
	else if( ECANMessageType_ModuleStatus2 == eType )
    1f82:	82 30       	cpi	r24, 0x02	; 2
    1f84:	69 f1       	breq	.+90     	; 0x1fe0 <CANSendMessageInternal+0x7e>
	{
		psDef = &sg_sMOBModuleStatus2;
	}
	else if( ECANMessageType_ModuleStatus3 == eType )
    1f86:	83 30       	cpi	r24, 0x03	; 3
    1f88:	a1 f1       	breq	.+104    	; 0x1ff2 <CANSendMessageInternal+0x90>
	{
		psDef = &sg_sMOBModuleStatus3;
	}
	else if( ECANMessageType_ModuleCellCommStat1 == eType )
    1f8a:	86 30       	cpi	r24, 0x06	; 6
    1f8c:	d9 f1       	breq	.+118    	; 0x2004 <CANSendMessageInternal+0xa2>
	{
		psDef = &sg_sMOBModuleCellCommStat1;
	}
	else if( ECANMessageType_ModuleCellCommStat2 == eType )
    1f8e:	87 30       	cpi	r24, 0x07	; 7
    1f90:	09 f4       	brne	.+2      	; 0x1f94 <CANSendMessageInternal+0x32>
    1f92:	41 c0       	rjmp	.+130    	; 0x2016 <CANSendMessageInternal+0xb4>
	{
		psDef = &sg_sMOBModuleCellCommStat2;
	}
	else if( ECANMessageType_ModuleHardwareDetail == eType )
    1f94:	85 30       	cpi	r24, 0x05	; 5
    1f96:	09 f4       	brne	.+2      	; 0x1f9a <CANSendMessageInternal+0x38>
    1f98:	47 c0       	rjmp	.+142    	; 0x2028 <CANSendMessageInternal+0xc6>
	{
		psDef = &sg_sMOBModuleHardwareDetail;
	}
	else if( ECANMessageType_ModuleCellDetail == eType )
    1f9a:	84 30       	cpi	r24, 0x04	; 4
    1f9c:	09 f4       	brne	.+2      	; 0x1fa0 <CANSendMessageInternal+0x3e>
    1f9e:	4d c0       	rjmp	.+154    	; 0x203a <CANSendMessageInternal+0xd8>
	{
		psDef = &sg_sMOBModuleCellDetail;
	}
	else if( ECANMessageType_ModuleRequestTime == eType )
    1fa0:	88 30       	cpi	r24, 0x08	; 8
    1fa2:	09 f4       	brne	.+2      	; 0x1fa6 <CANSendMessageInternal+0x44>
    1fa4:	53 c0       	rjmp	.+166    	; 0x204c <CANSendMessageInternal+0xea>
		psDef = &sg_sMOBModuleRequestTime;
	}
	else
	{
		// Invalid message type
		MBASSERT(0);
    1fa6:	43 e4       	ldi	r20, 0x43	; 67
    1fa8:	51 e0       	ldi	r21, 0x01	; 1
    1faa:	6c e4       	ldi	r22, 0x4C	; 76
    1fac:	73 e0       	ldi	r23, 0x03	; 3
    1fae:	80 e0       	ldi	r24, 0x00	; 0
    1fb0:	0e 94 50 23 	call	0x46a0	; 0x46a0 <PlatformAssert>
static void CANSendMessageInternal( ECANMessageType eType,
									uint8_t* pu8Data,
									uint8_t u8DataLen,	
									bool bRetransmit )
{
	const SMOBDef* psDef = NULL;
    1fb4:	61 2c       	mov	r6, r1
    1fb6:	71 2c       	mov	r7, r1
    1fb8:	81 2c       	mov	r8, r1
    1fba:	50 c0       	rjmp	.+160    	; 0x205c <CANSendMessageInternal+0xfa>
	
	if( ECANMessageType_ModuleAnnouncement == eType )
	{
		psDef = &sg_sMOBModuleAnnouncement;
    1fbc:	0f 2e       	mov	r0, r31
    1fbe:	f7 e9       	ldi	r31, 0x97	; 151
    1fc0:	6f 2e       	mov	r6, r31
    1fc2:	f3 e0       	ldi	r31, 0x03	; 3
    1fc4:	7f 2e       	mov	r7, r31
    1fc6:	f0 e0       	ldi	r31, 0x00	; 0
    1fc8:	8f 2e       	mov	r8, r31
    1fca:	f0 2d       	mov	r31, r0
    1fcc:	47 c0       	rjmp	.+142    	; 0x205c <CANSendMessageInternal+0xfa>
	}
	else if( ECANMessageType_ModuleStatus1 == eType )
	{
		psDef = &sg_sMOBModuleStatus1;
    1fce:	0f 2e       	mov	r0, r31
    1fd0:	ff e8       	ldi	r31, 0x8F	; 143
    1fd2:	6f 2e       	mov	r6, r31
    1fd4:	f3 e0       	ldi	r31, 0x03	; 3
    1fd6:	7f 2e       	mov	r7, r31
    1fd8:	f0 e0       	ldi	r31, 0x00	; 0
    1fda:	8f 2e       	mov	r8, r31
    1fdc:	f0 2d       	mov	r31, r0
    1fde:	3e c0       	rjmp	.+124    	; 0x205c <CANSendMessageInternal+0xfa>
	}
	else if( ECANMessageType_ModuleStatus2 == eType )
	{
		psDef = &sg_sMOBModuleStatus2;
    1fe0:	0f 2e       	mov	r0, r31
    1fe2:	f7 e8       	ldi	r31, 0x87	; 135
    1fe4:	6f 2e       	mov	r6, r31
    1fe6:	f3 e0       	ldi	r31, 0x03	; 3
    1fe8:	7f 2e       	mov	r7, r31
    1fea:	f0 e0       	ldi	r31, 0x00	; 0
    1fec:	8f 2e       	mov	r8, r31
    1fee:	f0 2d       	mov	r31, r0
    1ff0:	35 c0       	rjmp	.+106    	; 0x205c <CANSendMessageInternal+0xfa>
	}
	else if( ECANMessageType_ModuleStatus3 == eType )
	{
		psDef = &sg_sMOBModuleStatus3;
    1ff2:	0f 2e       	mov	r0, r31
    1ff4:	ff e7       	ldi	r31, 0x7F	; 127
    1ff6:	6f 2e       	mov	r6, r31
    1ff8:	f3 e0       	ldi	r31, 0x03	; 3
    1ffa:	7f 2e       	mov	r7, r31
    1ffc:	f0 e0       	ldi	r31, 0x00	; 0
    1ffe:	8f 2e       	mov	r8, r31
    2000:	f0 2d       	mov	r31, r0
    2002:	2c c0       	rjmp	.+88     	; 0x205c <CANSendMessageInternal+0xfa>
	}
	else if( ECANMessageType_ModuleCellCommStat1 == eType )
	{
		psDef = &sg_sMOBModuleCellCommStat1;
    2004:	0f 2e       	mov	r0, r31
    2006:	f7 e7       	ldi	r31, 0x77	; 119
    2008:	6f 2e       	mov	r6, r31
    200a:	f3 e0       	ldi	r31, 0x03	; 3
    200c:	7f 2e       	mov	r7, r31
    200e:	f0 e0       	ldi	r31, 0x00	; 0
    2010:	8f 2e       	mov	r8, r31
    2012:	f0 2d       	mov	r31, r0
    2014:	23 c0       	rjmp	.+70     	; 0x205c <CANSendMessageInternal+0xfa>
	}
	else if( ECANMessageType_ModuleCellCommStat2 == eType )
	{
		psDef = &sg_sMOBModuleCellCommStat2;
    2016:	0f 2e       	mov	r0, r31
    2018:	ff e6       	ldi	r31, 0x6F	; 111
    201a:	6f 2e       	mov	r6, r31
    201c:	f3 e0       	ldi	r31, 0x03	; 3
    201e:	7f 2e       	mov	r7, r31
    2020:	f0 e0       	ldi	r31, 0x00	; 0
    2022:	8f 2e       	mov	r8, r31
    2024:	f0 2d       	mov	r31, r0
    2026:	1a c0       	rjmp	.+52     	; 0x205c <CANSendMessageInternal+0xfa>
	}
	else if( ECANMessageType_ModuleHardwareDetail == eType )
	{
		psDef = &sg_sMOBModuleHardwareDetail;
    2028:	0f 2e       	mov	r0, r31
    202a:	ff e5       	ldi	r31, 0x5F	; 95
    202c:	6f 2e       	mov	r6, r31
    202e:	f3 e0       	ldi	r31, 0x03	; 3
    2030:	7f 2e       	mov	r7, r31
    2032:	f0 e0       	ldi	r31, 0x00	; 0
    2034:	8f 2e       	mov	r8, r31
    2036:	f0 2d       	mov	r31, r0
    2038:	11 c0       	rjmp	.+34     	; 0x205c <CANSendMessageInternal+0xfa>
	}
	else if( ECANMessageType_ModuleCellDetail == eType )
	{
		psDef = &sg_sMOBModuleCellDetail;
    203a:	0f 2e       	mov	r0, r31
    203c:	f7 e6       	ldi	r31, 0x67	; 103
    203e:	6f 2e       	mov	r6, r31
    2040:	f3 e0       	ldi	r31, 0x03	; 3
    2042:	7f 2e       	mov	r7, r31
    2044:	f0 e0       	ldi	r31, 0x00	; 0
    2046:	8f 2e       	mov	r8, r31
    2048:	f0 2d       	mov	r31, r0
    204a:	08 c0       	rjmp	.+16     	; 0x205c <CANSendMessageInternal+0xfa>
	}
	else if( ECANMessageType_ModuleRequestTime == eType )
	{
		psDef = &sg_sMOBModuleRequestTime;
    204c:	0f 2e       	mov	r0, r31
    204e:	f7 e5       	ldi	r31, 0x57	; 87
    2050:	6f 2e       	mov	r6, r31
    2052:	f3 e0       	ldi	r31, 0x03	; 3
    2054:	7f 2e       	mov	r7, r31
    2056:	f0 e0       	ldi	r31, 0x00	; 0
    2058:	8f 2e       	mov	r8, r31
    205a:	f0 2d       	mov	r31, r0
	{
		// Invalid message type
		MBASSERT(0);
	}
	
	if(bRetransmit && sg_bInRetransmit) {
    205c:	dd 23       	and	r29, r29
    205e:	21 f0       	breq	.+8      	; 0x2068 <CANSendMessageInternal+0x106>
    2060:	80 91 63 09 	lds	r24, 0x0963	; 0x800963 <sg_bInRetransmit>
    2064:	81 11       	cpse	r24, r1
    2066:	30 c0       	rjmp	.+96     	; 0x20c8 <CANSendMessageInternal+0x166>
		// Already in a retransmit, don't allow nested retries
		return;
	}
	if( bRetransmit || (false == sg_bBusy) )
    2068:	d1 11       	cpse	r29, r1
    206a:	04 c0       	rjmp	.+8      	; 0x2074 <CANSendMessageInternal+0x112>
    206c:	80 91 67 09 	lds	r24, 0x0967	; 0x800967 <sg_bBusy>
    2070:	81 11       	cpse	r24, r1
    2072:	2a c0       	rjmp	.+84     	; 0x20c8 <CANSendMessageInternal+0x166>
	{
		sg_bBusy = true;
    2074:	81 e0       	ldi	r24, 0x01	; 1
    2076:	80 93 67 09 	sts	0x0967, r24	; 0x800967 <sg_bBusy>
		
		// Save this message info for retransmit later if needed
		if( false == bRetransmit )
    207a:	d1 11       	cpse	r29, r1
    207c:	1a c0       	rjmp	.+52     	; 0x20b2 <CANSendMessageInternal+0x150>
		{
			sg_u8TransmitAttempts = 0;
    207e:	10 92 66 09 	sts	0x0966, r1	; 0x800966 <sg_u8TransmitAttempts>
			sg_eLastTXType = eType;
    2082:	c0 93 65 09 	sts	0x0965, r28	; 0x800965 <sg_eLastTXType>
			MBASSERT(u8DataLen <= CAN_MAX_MSG_SIZE);
    2086:	09 30       	cpi	r16, 0x09	; 9
    2088:	38 f0       	brcs	.+14     	; 0x2098 <CANSendMessageInternal+0x136>
    208a:	43 e5       	ldi	r20, 0x53	; 83
    208c:	51 e0       	ldi	r21, 0x01	; 1
    208e:	6c e4       	ldi	r22, 0x4C	; 76
    2090:	73 e0       	ldi	r23, 0x03	; 3
    2092:	80 e0       	ldi	r24, 0x00	; 0
    2094:	0e 94 50 23 	call	0x46a0	; 0x46a0 <PlatformAssert>
			memcpy(sg_u8LastTXData, pu8Data, u8DataLen);
    2098:	20 2f       	mov	r18, r16
    209a:	30 e0       	ldi	r19, 0x00	; 0
    209c:	c7 01       	movw	r24, r14
    209e:	a0 e8       	ldi	r26, 0x80	; 128
    20a0:	ac 01       	movw	r20, r24
    20a2:	6a 2f       	mov	r22, r26
    20a4:	8d e3       	ldi	r24, 0x3D	; 61
    20a6:	99 e0       	ldi	r25, 0x09	; 9
    20a8:	0e 94 dc 22 	call	0x45b8	; 0x45b8 <memcpy>
			sg_u8LastTXDataLen = u8DataLen;
    20ac:	00 93 64 09 	sts	0x0964, r16	; 0x800964 <sg_u8LastTXDataLen>
    20b0:	05 c0       	rjmp	.+10     	; 0x20bc <CANSendMessageInternal+0x15a>
		}
		else
		{
			sg_u8TransmitAttempts++;
    20b2:	80 91 66 09 	lds	r24, 0x0966	; 0x800966 <sg_u8TransmitAttempts>
    20b6:	8f 5f       	subi	r24, 0xFF	; 255
    20b8:	80 93 66 09 	sts	0x0966, r24	; 0x800966 <sg_u8TransmitAttempts>
		}
		
		// Send it now
		CANMOBSet( CANMOB_TX_IDX, psDef, pu8Data, u8DataLen );
    20bc:	97 01       	movw	r18, r14
    20be:	68 2d       	mov	r22, r8
    20c0:	a3 01       	movw	r20, r6
    20c2:	81 e0       	ldi	r24, 0x01	; 1
    20c4:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <CANMOBSet>
	}
}
    20c8:	df 91       	pop	r29
    20ca:	cf 91       	pop	r28
    20cc:	0f 91       	pop	r16
    20ce:	ff 90       	pop	r15
    20d0:	ef 90       	pop	r14
    20d2:	8f 90       	pop	r8
    20d4:	7f 90       	pop	r7
    20d6:	6f 90       	pop	r6
    20d8:	08 95       	ret

Disassembly of section .text.CANMOBInterrupt:

00001dd0 <CANMOBInterrupt>:

void CANMOBInterrupt( uint8_t u8MOBIndex )
{
    1dd0:	cf 92       	push	r12
    1dd2:	df 92       	push	r13
    1dd4:	ff 92       	push	r15
    1dd6:	0f 93       	push	r16
    1dd8:	1f 93       	push	r17
    1dda:	cf 93       	push	r28
    1ddc:	df 93       	push	r29
    1dde:	cd b7       	in	r28, 0x3d	; 61
    1de0:	de b7       	in	r29, 0x3e	; 62
    1de2:	28 97       	sbiw	r28, 0x08	; 8
    1de4:	0f b6       	in	r0, 0x3f	; 63
    1de6:	f8 94       	cli
    1de8:	de bf       	out	0x3e, r29	; 62
    1dea:	0f be       	out	0x3f, r0	; 63
    1dec:	cd bf       	out	0x3d, r28	; 61
	// Set the MOB page first (and zero the data index)
	CANPAGE = u8MOBIndex << 4;
    1dee:	98 2f       	mov	r25, r24
    1df0:	92 95       	swap	r25
    1df2:	90 7f       	andi	r25, 0xF0	; 240
    1df4:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f00ed>
	
	// Temporarily disable the MOB to examine and modify the registers
	CANIE2 &= (uint8_t)~(1 << u8MOBIndex);
    1df8:	ee ed       	ldi	r30, 0xDE	; 222
    1dfa:	f0 e0       	ldi	r31, 0x00	; 0
    1dfc:	20 81       	ld	r18, Z
    1dfe:	01 e0       	ldi	r16, 0x01	; 1
    1e00:	10 e0       	ldi	r17, 0x00	; 0
    1e02:	08 2e       	mov	r0, r24
    1e04:	02 c0       	rjmp	.+4      	; 0x1e0a <CANMOBInterrupt+0x3a>
    1e06:	00 0f       	add	r16, r16
    1e08:	11 1f       	adc	r17, r17
    1e0a:	0a 94       	dec	r0
    1e0c:	e2 f7       	brpl	.-8      	; 0x1e06 <CANMOBInterrupt+0x36>
    1e0e:	90 2f       	mov	r25, r16
    1e10:	90 95       	com	r25
    1e12:	92 23       	and	r25, r18
    1e14:	90 83       	st	Z, r25
	CANCDMOB &= (uint8_t)~((1 << CONMOB0) | (1 << CONMOB1));
    1e16:	ef ee       	ldi	r30, 0xEF	; 239
    1e18:	f0 e0       	ldi	r31, 0x00	; 0
    1e1a:	90 81       	ld	r25, Z
    1e1c:	9f 73       	andi	r25, 0x3F	; 63
    1e1e:	90 83       	st	Z, r25
	
	if( CANMOB_RX_IDX == u8MOBIndex )
    1e20:	81 11       	cpse	r24, r1
    1e22:	5d c0       	rjmp	.+186    	; 0x1ede <CANMOBInterrupt+0x10e>
	{
		// TX success?  Just clear it since this is the RX context
		if( CANSTMOB & (1 << TXOK) )
    1e24:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    1e28:	86 ff       	sbrs	r24, 6
    1e2a:	09 c0       	rjmp	.+18     	; 0x1e3e <CANMOBInterrupt+0x6e>
		{
			// Clear it
			CANSTMOB &= ~(1 << TXOK);
    1e2c:	ee ee       	ldi	r30, 0xEE	; 238
    1e2e:	f0 e0       	ldi	r31, 0x00	; 0
    1e30:	80 81       	ld	r24, Z
    1e32:	8f 7b       	andi	r24, 0xBF	; 191
    1e34:	80 83       	st	Z, r24
            sg_bBusy = false;
    1e36:	10 92 67 09 	sts	0x0967, r1	; 0x800967 <sg_bBusy>
            sg_bInRetransmit = false;  // Clear flag on success	
    1e3a:	10 92 63 09 	sts	0x0963, r1	; 0x800963 <sg_bInRetransmit>
		}
		// RX success?
		if( CANSTMOB & (1 << RXOK) )
    1e3e:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    1e42:	85 ff       	sbrs	r24, 5
    1e44:	38 c0       	rjmp	.+112    	; 0x1eb6 <CANMOBInterrupt+0xe6>
		{
			// Clear it
			CANSTMOB &= ~(1 << RXOK);
    1e46:	ee ee       	ldi	r30, 0xEE	; 238
    1e48:	f0 e0       	ldi	r31, 0x00	; 0
    1e4a:	80 81       	ld	r24, Z
    1e4c:	8f 7d       	andi	r24, 0xDF	; 223
    1e4e:	80 83       	st	Z, r24
		
			if( sg_pfRXCallback )
    1e50:	c0 90 4d 09 	lds	r12, 0x094D	; 0x80094d <sg_pfRXCallback>
    1e54:	d0 90 4e 09 	lds	r13, 0x094E	; 0x80094e <sg_pfRXCallback+0x1>
    1e58:	c1 14       	cp	r12, r1
    1e5a:	d1 04       	cpc	r13, r1
    1e5c:	61 f1       	breq	.+88     	; 0x1eb6 <CANMOBInterrupt+0xe6>
			{
				ECANMessageType eType;
				uint16_t u16ID = 0;
				uint8_t u8Data[8];
				uint8_t u8DataLen = CANCDMOB & 0x0f;
    1e5e:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    1e62:	8f 70       	andi	r24, 0x0F	; 15
    1e64:	f8 2e       	mov	r15, r24
				uint8_t u8Index = 0;
			
				// Grab the messageID from the identifier registers
				// TODO: This extraction may be wrong for extended frames
				// but it worked with the real Pack Controller somehow
				u16ID = ((uint16_t)CANIDT1) << 3;
    1e66:	40 91 f3 00 	lds	r20, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f00f3>
    1e6a:	50 e0       	ldi	r21, 0x00	; 0
    1e6c:	44 0f       	add	r20, r20
    1e6e:	55 1f       	adc	r21, r21
    1e70:	44 0f       	add	r20, r20
    1e72:	55 1f       	adc	r21, r21
    1e74:	44 0f       	add	r20, r20
    1e76:	55 1f       	adc	r21, r21
				u16ID |= CANIDT2 >> 5;
    1e78:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f00f2>
    1e7c:	82 95       	swap	r24
    1e7e:	86 95       	lsr	r24
    1e80:	87 70       	andi	r24, 0x07	; 7
    1e82:	48 2b       	or	r20, r24
			{
				ECANMessageType eType;
				uint16_t u16ID = 0;
				uint8_t u8Data[8];
				uint8_t u8DataLen = CANCDMOB & 0x0f;
				uint8_t u8Index = 0;
    1e84:	90 e0       	ldi	r25, 0x00	; 0
				// but it worked with the real Pack Controller somehow
				u16ID = ((uint16_t)CANIDT1) << 3;
				u16ID |= CANIDT2 >> 5;
			
				// Pull the data out into a temp buffer
				while( u8Index < u8DataLen )
    1e86:	0a c0       	rjmp	.+20     	; 0x1e9c <CANMOBInterrupt+0xcc>
				{
					u8Data[u8Index] = CANMSG;
    1e88:	20 91 fa 00 	lds	r18, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
    1e8c:	e1 e0       	ldi	r30, 0x01	; 1
    1e8e:	f0 e0       	ldi	r31, 0x00	; 0
    1e90:	ec 0f       	add	r30, r28
    1e92:	fd 1f       	adc	r31, r29
    1e94:	e9 0f       	add	r30, r25
    1e96:	f1 1d       	adc	r31, r1
    1e98:	20 83       	st	Z, r18
					u8Index++;
    1e9a:	9f 5f       	subi	r25, 0xFF	; 255
				// but it worked with the real Pack Controller somehow
				u16ID = ((uint16_t)CANIDT1) << 3;
				u16ID |= CANIDT2 >> 5;
			
				// Pull the data out into a temp buffer
				while( u8Index < u8DataLen )
    1e9c:	9f 15       	cp	r25, r15
    1e9e:	a0 f3       	brcs	.-24     	; 0x1e88 <CANMOBInterrupt+0xb8>
					u8Data[u8Index] = CANMSG;
					u8Index++;
				}
			
				// Lookup ID to see if it matches one of ours
				eType = CANLookupCommand( u16ID );
    1ea0:	ca 01       	movw	r24, r20
    1ea2:	0e 94 e4 1e 	call	0x3dc8	; 0x3dc8 <CANLookupCommand>
			
				if( eType != ECANMessageType_MAX )
    1ea6:	83 31       	cpi	r24, 0x13	; 19
    1ea8:	31 f0       	breq	.+12     	; 0x1eb6 <CANMOBInterrupt+0xe6>
				{
					// Call comamnd handler
					sg_pfRXCallback( eType, u8Data, u8DataLen );
    1eaa:	4f 2d       	mov	r20, r15
    1eac:	be 01       	movw	r22, r28
    1eae:	6f 5f       	subi	r22, 0xFF	; 255
    1eb0:	7f 4f       	sbci	r23, 0xFF	; 255
    1eb2:	f6 01       	movw	r30, r12
    1eb4:	09 95       	icall
				}
			}
		}
	
		// If receive error, clear the bits
		if( CANSTMOB & ((1 << SERR) | (1 << CERR) | (1 << FERR)) )
    1eb6:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    1eba:	8e 70       	andi	r24, 0x0E	; 14
    1ebc:	29 f0       	breq	.+10     	; 0x1ec8 <CANMOBInterrupt+0xf8>
		{
			// Clear it.  Just ignore
			CANSTMOB &= ~((1 << SERR) | (1 << CERR) | (1 << FERR));
    1ebe:	ee ee       	ldi	r30, 0xEE	; 238
    1ec0:	f0 e0       	ldi	r31, 0x00	; 0
    1ec2:	80 81       	ld	r24, Z
    1ec4:	81 7f       	andi	r24, 0xF1	; 241
    1ec6:	80 83       	st	Z, r24
		}
	
		// Re-enable RX now
		CANIE2 |= (1 << u8MOBIndex);
    1ec8:	ee ed       	ldi	r30, 0xDE	; 222
    1eca:	f0 e0       	ldi	r31, 0x00	; 0
    1ecc:	80 81       	ld	r24, Z
    1ece:	08 2b       	or	r16, r24
    1ed0:	00 83       	st	Z, r16
		CANCDMOB |= (1 << CONMOB1);
    1ed2:	ef ee       	ldi	r30, 0xEF	; 239
    1ed4:	f0 e0       	ldi	r31, 0x00	; 0
    1ed6:	80 81       	ld	r24, Z
    1ed8:	80 68       	ori	r24, 0x80	; 128
    1eda:	80 83       	st	Z, r24
    1edc:	34 c0       	rjmp	.+104    	; 0x1f46 <CANMOBInterrupt+0x176>
	}
	else if( CANMOB_TX_IDX == u8MOBIndex )
    1ede:	81 30       	cpi	r24, 0x01	; 1
    1ee0:	91 f5       	brne	.+100    	; 0x1f46 <CANMOBInterrupt+0x176>
	{
		if( CANSTMOB & (1 << TXOK) )
    1ee2:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    1ee6:	86 ff       	sbrs	r24, 6
    1ee8:	07 c0       	rjmp	.+14     	; 0x1ef8 <CANMOBInterrupt+0x128>
		{
			// Clear it
			CANSTMOB &= ~(1 << TXOK);
    1eea:	ee ee       	ldi	r30, 0xEE	; 238
    1eec:	f0 e0       	ldi	r31, 0x00	; 0
    1eee:	80 81       	ld	r24, Z
    1ef0:	8f 7b       	andi	r24, 0xBF	; 191
    1ef2:	80 83       	st	Z, r24
		
			sg_bBusy = false;
    1ef4:	10 92 67 09 	sts	0x0967, r1	; 0x800967 <sg_bBusy>
		}
		
		// RX success, just clear it since this is the TX context
		if( CANSTMOB & (1 << RXOK) )
    1ef8:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    1efc:	85 ff       	sbrs	r24, 5
    1efe:	05 c0       	rjmp	.+10     	; 0x1f0a <CANMOBInterrupt+0x13a>
		{
			// Clear it
			CANSTMOB &= ~(1 << RXOK);
    1f00:	ee ee       	ldi	r30, 0xEE	; 238
    1f02:	f0 e0       	ldi	r31, 0x00	; 0
    1f04:	80 81       	ld	r24, Z
    1f06:	8f 7d       	andi	r24, 0xDF	; 223
    1f08:	80 83       	st	Z, r24
		}

		// If TX Error on transmit (collision with another device)
		// -or- ACK error (nobody listening),
		// retry send
		if( CANSTMOB & ((1 << BERR) | (1 << AERR) | (1 << SERR)) )
    1f0a:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    1f0e:	89 71       	andi	r24, 0x19	; 25
    1f10:	d1 f0       	breq	.+52     	; 0x1f46 <CANMOBInterrupt+0x176>
		{
			// Clear it
			CANSTMOB &= ~((1 << BERR) | (1 << AERR) | (1 << SERR));
    1f12:	ee ee       	ldi	r30, 0xEE	; 238
    1f14:	f0 e0       	ldi	r31, 0x00	; 0
    1f16:	80 81       	ld	r24, Z
    1f18:	86 7e       	andi	r24, 0xE6	; 230
    1f1a:	80 83       	st	Z, r24

			if( sg_u8TransmitAttempts < 20 )
    1f1c:	80 91 66 09 	lds	r24, 0x0966	; 0x800966 <sg_u8TransmitAttempts>
    1f20:	84 31       	cpi	r24, 0x14	; 20
    1f22:	68 f4       	brcc	.+26     	; 0x1f3e <CANMOBInterrupt+0x16e>
			{
				// Retransmit now
               sg_bInRetransmit = true;  // Set flag before retry
    1f24:	81 e0       	ldi	r24, 0x01	; 1
    1f26:	80 93 63 09 	sts	0x0963, r24	; 0x800963 <sg_bInRetransmit>
               CANSendMessageInternal( sg_eLastTXType, sg_u8LastTXData, sg_u8LastTXDataLen, true );
    1f2a:	21 e0       	ldi	r18, 0x01	; 1
    1f2c:	40 91 64 09 	lds	r20, 0x0964	; 0x800964 <sg_u8LastTXDataLen>
    1f30:	6d e3       	ldi	r22, 0x3D	; 61
    1f32:	79 e0       	ldi	r23, 0x09	; 9
    1f34:	80 91 65 09 	lds	r24, 0x0965	; 0x800965 <sg_eLastTXType>
    1f38:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <CANSendMessageInternal>
    1f3c:	04 c0       	rjmp	.+8      	; 0x1f46 <CANMOBInterrupt+0x176>
			}
			else
			{
				// Retries exhausted.  Give up
				sg_bBusy = false;
    1f3e:	10 92 67 09 	sts	0x0967, r1	; 0x800967 <sg_bBusy>
                sg_bInRetransmit = false;
    1f42:	10 92 63 09 	sts	0x0963, r1	; 0x800963 <sg_bInRetransmit>
			}
		}
	}
}
    1f46:	28 96       	adiw	r28, 0x08	; 8
    1f48:	0f b6       	in	r0, 0x3f	; 63
    1f4a:	f8 94       	cli
    1f4c:	de bf       	out	0x3e, r29	; 62
    1f4e:	0f be       	out	0x3f, r0	; 63
    1f50:	cd bf       	out	0x3d, r28	; 61
    1f52:	df 91       	pop	r29
    1f54:	cf 91       	pop	r28
    1f56:	1f 91       	pop	r17
    1f58:	0f 91       	pop	r16
    1f5a:	ff 90       	pop	r15
    1f5c:	df 90       	pop	r13
    1f5e:	cf 90       	pop	r12
    1f60:	08 95       	ret

Disassembly of section .text.__vector_18:

000024b0 <__vector_18>:

// Generic CAN interrupt handler
// Check interrrupt sources and clear them (by servicing or explicit clearing)
ISR(CAN_INT_vect, ISR_BLOCK)
{
    24b0:	1f 92       	push	r1
    24b2:	0f 92       	push	r0
    24b4:	0f b6       	in	r0, 0x3f	; 63
    24b6:	0f 92       	push	r0
    24b8:	11 24       	eor	r1, r1
    24ba:	0f 93       	push	r16
    24bc:	1f 93       	push	r17
    24be:	2f 93       	push	r18
    24c0:	3f 93       	push	r19
    24c2:	4f 93       	push	r20
    24c4:	5f 93       	push	r21
    24c6:	6f 93       	push	r22
    24c8:	7f 93       	push	r23
    24ca:	8f 93       	push	r24
    24cc:	9f 93       	push	r25
    24ce:	af 93       	push	r26
    24d0:	bf 93       	push	r27
    24d2:	cf 93       	push	r28
    24d4:	df 93       	push	r29
    24d6:	ef 93       	push	r30
    24d8:	ff 93       	push	r31
	// Save state we'll need to restore
	uint8_t saved_cangie = CANGIE;
    24da:	eb ed       	ldi	r30, 0xDB	; 219
    24dc:	f0 e0       	ldi	r31, 0x00	; 0
    24de:	d0 81       	ld	r29, Z
	uint8_t saved_canie2 = CANIE2;	// Temporarily disable CAN interrupts to prevent reentry
    24e0:	10 91 de 00 	lds	r17, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7f00de>
	CANGIE &= (uint8_t)~(1 << ENIT);
    24e4:	80 81       	ld	r24, Z
    24e6:	8f 77       	andi	r24, 0x7F	; 127
    24e8:	80 83       	st	Z, r24

	// Do NOT re-enable global interrupts - this causes race conditions!
	
	 uint8_t sit = CANSIT2;
    24ea:	c0 91 e0 00 	lds	r28, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f00e0>
	 
	 // Most common interrupts first  *claude
	 if(sit & (1 << CANMOB_RX_IDX)) {
    24ee:	c0 ff       	sbrs	r28, 0
    24f0:	0c c0       	rjmp	.+24     	; 0x250a <__vector_18+0x5a>
		 CANMOBInterrupt(CANMOB_RX_IDX);
    24f2:	80 e0       	ldi	r24, 0x00	; 0
    24f4:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <CANMOBInterrupt>
		 CANMOBSet(CANMOB_RX_IDX, &sg_sMOBGenericReceive, NULL, 0);
    24f8:	00 e0       	ldi	r16, 0x00	; 0
    24fa:	20 e0       	ldi	r18, 0x00	; 0
    24fc:	30 e0       	ldi	r19, 0x00	; 0
    24fe:	4f e9       	ldi	r20, 0x9F	; 159
    2500:	53 e0       	ldi	r21, 0x03	; 3
    2502:	60 e0       	ldi	r22, 0x00	; 0
    2504:	80 e0       	ldi	r24, 0x00	; 0
    2506:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <CANMOBSet>
	 }
	 
	
	// Check TX MOB
	if( sit & (1 << CANMOB_TX_IDX) )
    250a:	c1 ff       	sbrs	r28, 1
    250c:	03 c0       	rjmp	.+6      	; 0x2514 <__vector_18+0x64>
	{
		CANMOBInterrupt( CANMOB_TX_IDX );
    250e:	81 e0       	ldi	r24, 0x01	; 1
    2510:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <CANMOBInterrupt>
	}
	
	// Now the generic, non-MOB interrupts (some of which may have already been handled by the MOB handler)
	
	// Bus Off interrupt
	if( CANGIT & (1 << BOFFIT) )
    2514:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    2518:	86 ff       	sbrs	r24, 6
    251a:	03 c0       	rjmp	.+6      	; 0x2522 <__vector_18+0x72>
	{
		// Just clear it for now
		CANGIT = (1 << BOFFIT);
    251c:	80 e4       	ldi	r24, 0x40	; 64
    251e:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
	}
	
	// Frame buffer receive (burst receive interrupt)
	// This should not be used
	if( CANGIT & (1 << BXOK) )
    2522:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    2526:	84 ff       	sbrs	r24, 4
    2528:	0a c0       	rjmp	.+20     	; 0x253e <__vector_18+0x8e>
	{
		MBASSERT(0);
    252a:	45 ef       	ldi	r20, 0xF5	; 245
    252c:	51 e0       	ldi	r21, 0x01	; 1
    252e:	6c e4       	ldi	r22, 0x4C	; 76
    2530:	73 e0       	ldi	r23, 0x03	; 3
    2532:	80 e0       	ldi	r24, 0x00	; 0
    2534:	0e 94 50 23 	call	0x46a0	; 0x46a0 <PlatformAssert>
		
		// TODO: Must write the CONMOB fields of the MOB that interrupted first?
		// Just clear it for now
		CANGIT = (1 << BXOK);
    2538:	80 e1       	ldi	r24, 0x10	; 16
    253a:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
	}
	
	// Bit stuffing error on receive
	if( CANGIT & (1 << SERG) )
    253e:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    2542:	83 ff       	sbrs	r24, 3
    2544:	03 c0       	rjmp	.+6      	; 0x254c <__vector_18+0x9c>
	{
		// Just clear it for now.  Ignored.
		CANGIT = (1 << SERG);
    2546:	88 e0       	ldi	r24, 0x08	; 8
    2548:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
	}
	
	// CRC error on receive
	if( CANGIT & (1 << CERG) )
    254c:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    2550:	82 ff       	sbrs	r24, 2
    2552:	03 c0       	rjmp	.+6      	; 0x255a <__vector_18+0xaa>
	{
		// Just clear it for now.  Ignored.
		CANGIT = (1 << CERG);
    2554:	84 e0       	ldi	r24, 0x04	; 4
    2556:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
	}
	
	// Form error
	if( CANGIT & (1 << FERG) )
    255a:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    255e:	81 ff       	sbrs	r24, 1
    2560:	03 c0       	rjmp	.+6      	; 0x2568 <__vector_18+0xb8>
	{
		// If detected form error on transmit, could be duplicate to MOB error interrupt (see 16.8.2 - Interrupt Behavior)
		// Ignore this one
		
		// Just clear it for now.  Ignored.
		CANGIT = (1 << FERG);
    2562:	82 e0       	ldi	r24, 0x02	; 2
    2564:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
	}
	
	// ACK missing on transmit (nobody's listening! (or failure on transmit???))
	if( CANGIT & (1 << AERG) )
    2568:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    256c:	80 ff       	sbrs	r24, 0
    256e:	13 c0       	rjmp	.+38     	; 0x2596 <__vector_18+0xe6>
	{
		// Clear the interrupt
		CANGIT = (1 << AERG);
    2570:	81 e0       	ldi	r24, 0x01	; 1
    2572:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
		
		if( sg_u8TransmitAttempts < 20 )
    2576:	80 91 66 09 	lds	r24, 0x0966	; 0x800966 <sg_u8TransmitAttempts>
    257a:	84 31       	cpi	r24, 0x14	; 20
    257c:	50 f4       	brcc	.+20     	; 0x2592 <__vector_18+0xe2>
		{
			// Retransmit now
			CANSendMessageInternal( sg_eLastTXType, sg_u8LastTXData, sg_u8LastTXDataLen, true );
    257e:	21 e0       	ldi	r18, 0x01	; 1
    2580:	40 91 64 09 	lds	r20, 0x0964	; 0x800964 <sg_u8LastTXDataLen>
    2584:	6d e3       	ldi	r22, 0x3D	; 61
    2586:	79 e0       	ldi	r23, 0x09	; 9
    2588:	80 91 65 09 	lds	r24, 0x0965	; 0x800965 <sg_eLastTXType>
    258c:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <CANSendMessageInternal>
    2590:	02 c0       	rjmp	.+4      	; 0x2596 <__vector_18+0xe6>
		}
		else
		{
			// Retries exhausted.  Give up
			sg_bBusy = false;
    2592:	10 92 67 09 	sts	0x0967, r1	; 0x800967 <sg_bBusy>
		}
	}

	// Reenable CAN general interrupt	
//	CANGIE |= (1 << ENIT);
    CANIE2 = saved_canie2;
    2596:	10 93 de 00 	sts	0x00DE, r17	; 0x8000de <__TEXT_REGION_LENGTH__+0x7f00de>
    CANGIE = saved_cangie;
    259a:	d0 93 db 00 	sts	0x00DB, r29	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f00db>
}
    259e:	ff 91       	pop	r31
    25a0:	ef 91       	pop	r30
    25a2:	df 91       	pop	r29
    25a4:	cf 91       	pop	r28
    25a6:	bf 91       	pop	r27
    25a8:	af 91       	pop	r26
    25aa:	9f 91       	pop	r25
    25ac:	8f 91       	pop	r24
    25ae:	7f 91       	pop	r23
    25b0:	6f 91       	pop	r22
    25b2:	5f 91       	pop	r21
    25b4:	4f 91       	pop	r20
    25b6:	3f 91       	pop	r19
    25b8:	2f 91       	pop	r18
    25ba:	1f 91       	pop	r17
    25bc:	0f 91       	pop	r16
    25be:	0f 90       	pop	r0
    25c0:	0f be       	out	0x3f, r0	; 63
    25c2:	0f 90       	pop	r0
    25c4:	1f 90       	pop	r1
    25c6:	18 95       	reti

Disassembly of section .text.CANSendMessage:

00004bda <CANSendMessage>:
					 uint8_t* pu8Data,
					 uint8_t u8DataLen )
{
	// If we're busy, kick it back so we're cooperatively multitasking
	// rather than spin locking
	if (sg_bBusy)
    4bda:	90 91 67 09 	lds	r25, 0x0967	; 0x800967 <sg_bBusy>
    4bde:	91 11       	cpse	r25, r1
    4be0:	05 c0       	rjmp	.+10     	; 0x4bec <CANSendMessage+0x12>
	{
		return(false);
	}

	CANSendMessageInternal( eType, pu8Data, u8DataLen, false );
    4be2:	20 e0       	ldi	r18, 0x00	; 0
    4be4:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <CANSendMessageInternal>
	return( true );
    4be8:	81 e0       	ldi	r24, 0x01	; 1
    4bea:	08 95       	ret
{
	// If we're busy, kick it back so we're cooperatively multitasking
	// rather than spin locking
	if (sg_bBusy)
	{
		return(false);
    4bec:	80 e0       	ldi	r24, 0x00	; 0
	}

	CANSendMessageInternal( eType, pu8Data, u8DataLen, false );
	return( true );
}
    4bee:	08 95       	ret

Disassembly of section .text.CANSetRXCallback:

00004d5a <CANSetRXCallback>:

void CANSetRXCallback( void (*pfCallback)(ECANMessageType eType, uint8_t* pu8Data, uint8_t u8DataLen) )
{
	sg_pfRXCallback = pfCallback;
    4d5a:	90 93 4e 09 	sts	0x094E, r25	; 0x80094e <sg_pfRXCallback+0x1>
    4d5e:	80 93 4d 09 	sts	0x094D, r24	; 0x80094d <sg_pfRXCallback>
    4d62:	08 95       	ret

Disassembly of section .text.CANInit:

00003466 <CANInit>:
}

void CANInit( void )
{
    3466:	0f 93       	push	r16
    3468:	cf 93       	push	r28
	// Init clock
	// See datasheet table 16-2.
	// For 8Mhz, set CAN rate to 500 Kbps
	CANBT1 = 0x02;
    346a:	c2 e0       	ldi	r28, 0x02	; 2
    346c:	c0 93 e2 00 	sts	0x00E2, r28	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f00e2>
	CANBT2 = 0x04;
    3470:	84 e0       	ldi	r24, 0x04	; 4
    3472:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f00e3>
	CANBT3 = 0x12;
    3476:	82 e1       	ldi	r24, 0x12	; 18
    3478:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7f00e4>
	
	// Init message objects (MOBs) since there are no defaults at reset
	CANMOBSet( 0, &sg_sMOBDisabled, NULL, 0 );
    347c:	00 e0       	ldi	r16, 0x00	; 0
    347e:	20 e0       	ldi	r18, 0x00	; 0
    3480:	30 e0       	ldi	r19, 0x00	; 0
    3482:	47 ea       	ldi	r20, 0xA7	; 167
    3484:	53 e0       	ldi	r21, 0x03	; 3
    3486:	60 e0       	ldi	r22, 0x00	; 0
    3488:	80 e0       	ldi	r24, 0x00	; 0
    348a:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <CANMOBSet>
	CANMOBSet( 1, &sg_sMOBDisabled, NULL, 0 );
    348e:	20 e0       	ldi	r18, 0x00	; 0
    3490:	30 e0       	ldi	r19, 0x00	; 0
    3492:	47 ea       	ldi	r20, 0xA7	; 167
    3494:	53 e0       	ldi	r21, 0x03	; 3
    3496:	60 e0       	ldi	r22, 0x00	; 0
    3498:	81 e0       	ldi	r24, 0x01	; 1
    349a:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <CANMOBSet>
	CANMOBSet( 2, &sg_sMOBDisabled, NULL, 0 );
    349e:	20 e0       	ldi	r18, 0x00	; 0
    34a0:	30 e0       	ldi	r19, 0x00	; 0
    34a2:	47 ea       	ldi	r20, 0xA7	; 167
    34a4:	53 e0       	ldi	r21, 0x03	; 3
    34a6:	60 e0       	ldi	r22, 0x00	; 0
    34a8:	82 e0       	ldi	r24, 0x02	; 2
    34aa:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <CANMOBSet>
	CANMOBSet( 3, &sg_sMOBDisabled, NULL, 0 );
    34ae:	20 e0       	ldi	r18, 0x00	; 0
    34b0:	30 e0       	ldi	r19, 0x00	; 0
    34b2:	47 ea       	ldi	r20, 0xA7	; 167
    34b4:	53 e0       	ldi	r21, 0x03	; 3
    34b6:	60 e0       	ldi	r22, 0x00	; 0
    34b8:	83 e0       	ldi	r24, 0x03	; 3
    34ba:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <CANMOBSet>
	CANMOBSet( 4, &sg_sMOBDisabled, NULL, 0 );
    34be:	20 e0       	ldi	r18, 0x00	; 0
    34c0:	30 e0       	ldi	r19, 0x00	; 0
    34c2:	47 ea       	ldi	r20, 0xA7	; 167
    34c4:	53 e0       	ldi	r21, 0x03	; 3
    34c6:	60 e0       	ldi	r22, 0x00	; 0
    34c8:	84 e0       	ldi	r24, 0x04	; 4
    34ca:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <CANMOBSet>
	CANMOBSet( 5, &sg_sMOBDisabled, NULL, 0 );
    34ce:	20 e0       	ldi	r18, 0x00	; 0
    34d0:	30 e0       	ldi	r19, 0x00	; 0
    34d2:	47 ea       	ldi	r20, 0xA7	; 167
    34d4:	53 e0       	ldi	r21, 0x03	; 3
    34d6:	60 e0       	ldi	r22, 0x00	; 0
    34d8:	85 e0       	ldi	r24, 0x05	; 5
    34da:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <CANMOBSet>
	
	// Setup generic RX
	CANMOBSet( CANMOB_RX_IDX, &sg_sMOBGenericReceive, NULL, 0 );
    34de:	20 e0       	ldi	r18, 0x00	; 0
    34e0:	30 e0       	ldi	r19, 0x00	; 0
    34e2:	4f e9       	ldi	r20, 0x9F	; 159
    34e4:	53 e0       	ldi	r21, 0x03	; 3
    34e6:	60 e0       	ldi	r22, 0x00	; 0
    34e8:	80 e0       	ldi	r24, 0x00	; 0
    34ea:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <CANMOBSet>
	
	// Enable general CAN interrupts
	CANGIE = (1 << ENIT) | (1 << ENRX) | (1 << ENTX) | (1 << ENERR) | (1 << ENBX) | (1 << ENERG);
    34ee:	8e eb       	ldi	r24, 0xBE	; 190
    34f0:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f00db>

//	CANGIE &= ~(1 << ENOVRT);  // Disable CAN timer overflow interrupt

	// Enable the bus
	CANGCON = (1 << ENASTB);
    34f4:	c0 93 d8 00 	sts	0x00D8, r28	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f00d8>
	sg_bBusy = false;
    34f8:	10 92 67 09 	sts	0x0967, r1	; 0x800967 <sg_bBusy>
}
    34fc:	cf 91       	pop	r28
    34fe:	0f 91       	pop	r16
    3500:	08 95       	ret

Disassembly of section .text.DebugOut:

00004d0a <DebugOut>:
}

#endif

void DebugOut( const char* peFormat, ... )
{
    4d0a:	cf 93       	push	r28
    4d0c:	df 93       	push	r29
    4d0e:	cd b7       	in	r28, 0x3d	; 61
    4d10:	de b7       	in	r29, 0x3e	; 62
	
	va_end( args );	 */
	
	//DebugSerialSend( (uint8_t*)u8Buffer, strlen(u8Buffer) );
#endif
}
    4d12:	df 91       	pop	r29
    4d14:	cf 91       	pop	r28
    4d16:	08 95       	ret

Disassembly of section .text.EEPROMRead:

00004c70 <EEPROMRead>:
}

uint8_t EEPROMRead(uint16_t u16Address)
{
	// Wait for any completion of writes, etc..
	while (EECR & (1 << EEWE));
    4c70:	f9 99       	sbic	0x1f, 1	; 31
    4c72:	fe cf       	rjmp	.-4      	; 0x4c70 <EEPROMRead>

	// Set address	
	EEAR = u16Address;
    4c74:	92 bd       	out	0x22, r25	; 34
    4c76:	81 bd       	out	0x21, r24	; 33
	
	// Start EEPROM read
	EECR |= (1 << EERE);
    4c78:	8f b3       	in	r24, 0x1f	; 31
    4c7a:	81 60       	ori	r24, 0x01	; 1
    4c7c:	8f bb       	out	0x1f, r24	; 31
	
	// Return the data
	return(EEDR);
    4c7e:	80 b5       	in	r24, 0x20	; 32
    4c80:	08 95       	ret

Disassembly of section .text.I2CBitDelay:

00004d18 <I2CBitDelay>:
#define SDA_SET_INPUT()			(I2C_PORT_DDR &= ((uint8_t) ~(1 << I2C_SDA_PIN))); SDA_HIGH()

// Delays for one I2C bit's worth of time
static void I2CBitDelay(void)
{
	Delay(10);
    4d18:	6a e0       	ldi	r22, 0x0A	; 10
    4d1a:	70 e0       	ldi	r23, 0x00	; 0
    4d1c:	80 e0       	ldi	r24, 0x00	; 0
    4d1e:	90 e0       	ldi	r25, 0x00	; 0
    4d20:	0e 94 a2 20 	call	0x4144	; 0x4144 <Delay>
    4d24:	08 95       	ret

Disassembly of section .text.I2CStart:

00004648 <I2CStart>:

// Send an I2C start sequence and quantize foreground code to the overflow
// timer
void I2CStart(void)
{
	SDA_SET_OUTPUT();
    4648:	8a b1       	in	r24, 0x0a	; 10
    464a:	82 60       	ori	r24, 0x02	; 2
    464c:	8a b9       	out	0x0a, r24	; 10
	SDA_HIGH();
    464e:	8b b1       	in	r24, 0x0b	; 11
    4650:	82 60       	ori	r24, 0x02	; 2
    4652:	8b b9       	out	0x0b, r24	; 11
	SCL_HIGH();
    4654:	8b b1       	in	r24, 0x0b	; 11
    4656:	81 60       	ori	r24, 0x01	; 1
    4658:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    465a:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <I2CBitDelay>
	SDA_LOW();
    465e:	8b b1       	in	r24, 0x0b	; 11
    4660:	8d 7f       	andi	r24, 0xFD	; 253
    4662:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    4664:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <I2CBitDelay>
	SCL_LOW();
    4668:	8b b1       	in	r24, 0x0b	; 11
    466a:	8e 7f       	andi	r24, 0xFE	; 254
    466c:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    466e:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <I2CBitDelay>
    4672:	08 95       	ret

Disassembly of section .text.I2CStop:

000047c2 <I2CStop>:
}

// Send an I2C stop sequence
void I2CStop(void)
{
	SDA_LOW();
    47c2:	8b b1       	in	r24, 0x0b	; 11
    47c4:	8d 7f       	andi	r24, 0xFD	; 253
    47c6:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    47c8:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <I2CBitDelay>
	SCL_HIGH();
    47cc:	8b b1       	in	r24, 0x0b	; 11
    47ce:	81 60       	ori	r24, 0x01	; 1
    47d0:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    47d2:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <I2CBitDelay>
	SDA_SET_INPUT();
    47d6:	8a b1       	in	r24, 0x0a	; 10
    47d8:	8d 7f       	andi	r24, 0xFD	; 253
    47da:	8a b9       	out	0x0a, r24	; 10
    47dc:	8b b1       	in	r24, 0x0b	; 11
    47de:	82 60       	ori	r24, 0x02	; 2
    47e0:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    47e2:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <I2CBitDelay>
    47e6:	08 95       	ret

Disassembly of section .text.I2CUnstick:

00004398 <I2CUnstick>:
}

// Unsticks an I2C bus
void I2CUnstick(void)
{
    4398:	cf 93       	push	r28
	uint8_t u8UnstickBits = 64;

	SCL_SET_OUTPUT();
    439a:	8a b1       	in	r24, 0x0a	; 10
    439c:	81 60       	ori	r24, 0x01	; 1
    439e:	8a b9       	out	0x0a, r24	; 10
	SDA_SET_OUTPUT();
    43a0:	8a b1       	in	r24, 0x0a	; 10
    43a2:	82 60       	ori	r24, 0x02	; 2
    43a4:	8a b9       	out	0x0a, r24	; 10
}

// Unsticks an I2C bus
void I2CUnstick(void)
{
	uint8_t u8UnstickBits = 64;
    43a6:	c0 e4       	ldi	r28, 0x40	; 64

	SCL_SET_OUTPUT();
	SDA_SET_OUTPUT();
	
	while (u8UnstickBits)
    43a8:	11 c0       	rjmp	.+34     	; 0x43cc <I2CUnstick+0x34>
	{
		SCL_LOW();
    43aa:	8b b1       	in	r24, 0x0b	; 11
    43ac:	8e 7f       	andi	r24, 0xFE	; 254
    43ae:	8b b9       	out	0x0b, r24	; 11
		SDA_LOW();
    43b0:	8b b1       	in	r24, 0x0b	; 11
    43b2:	8d 7f       	andi	r24, 0xFD	; 253
    43b4:	8b b9       	out	0x0b, r24	; 11
		I2CBitDelay();
    43b6:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <I2CBitDelay>
		SCL_HIGH();
    43ba:	8b b1       	in	r24, 0x0b	; 11
    43bc:	81 60       	ori	r24, 0x01	; 1
    43be:	8b b9       	out	0x0b, r24	; 11
		SDA_HIGH();
    43c0:	8b b1       	in	r24, 0x0b	; 11
    43c2:	82 60       	ori	r24, 0x02	; 2
    43c4:	8b b9       	out	0x0b, r24	; 11
		I2CBitDelay();
    43c6:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <I2CBitDelay>
		u8UnstickBits--;
    43ca:	c1 50       	subi	r28, 0x01	; 1
	uint8_t u8UnstickBits = 64;

	SCL_SET_OUTPUT();
	SDA_SET_OUTPUT();
	
	while (u8UnstickBits)
    43cc:	c1 11       	cpse	r28, r1
    43ce:	ed cf       	rjmp	.-38     	; 0x43aa <I2CUnstick+0x12>
		SCL_HIGH();
		SDA_HIGH();
		I2CBitDelay();
		u8UnstickBits--;
	}
}
    43d0:	cf 91       	pop	r28
    43d2:	08 95       	ret

Disassembly of section .text.I2CTxByte:

00003c8e <I2CTxByte>:

// Sends a single I2C byte. Returns false if the byte is not acked, or true if it is.
bool I2CTxByte(uint8_t u8Byte)
{
    3c8e:	cf 93       	push	r28
    3c90:	df 93       	push	r29
    3c92:	d8 2f       	mov	r29, r24
	uint8_t u8Length = 8;			// 8 Bits to send
	bool bAck = false;

	SDA_SET_OUTPUT();
    3c94:	8a b1       	in	r24, 0x0a	; 10
    3c96:	82 60       	ori	r24, 0x02	; 2
    3c98:	8a b9       	out	0x0a, r24	; 10
}

// Sends a single I2C byte. Returns false if the byte is not acked, or true if it is.
bool I2CTxByte(uint8_t u8Byte)
{
	uint8_t u8Length = 8;			// 8 Bits to send
    3c9a:	c8 e0       	ldi	r28, 0x08	; 8
	bool bAck = false;

	SDA_SET_OUTPUT();

	while (u8Length)
    3c9c:	15 c0       	rjmp	.+42     	; 0x3cc8 <I2CTxByte+0x3a>
	{
		if (u8Byte & 0x80)
    3c9e:	dd 23       	and	r29, r29
    3ca0:	24 f4       	brge	.+8      	; 0x3caa <I2CTxByte+0x1c>
		{
			SDA_HIGH();
    3ca2:	8b b1       	in	r24, 0x0b	; 11
    3ca4:	82 60       	ori	r24, 0x02	; 2
    3ca6:	8b b9       	out	0x0b, r24	; 11
    3ca8:	03 c0       	rjmp	.+6      	; 0x3cb0 <I2CTxByte+0x22>
		}
		else
		{
			SDA_LOW();
    3caa:	8b b1       	in	r24, 0x0b	; 11
    3cac:	8d 7f       	andi	r24, 0xFD	; 253
    3cae:	8b b9       	out	0x0b, r24	; 11
		}
		
		// Drive SCL high
		SCL_HIGH();
    3cb0:	8b b1       	in	r24, 0x0b	; 11
    3cb2:	81 60       	ori	r24, 0x01	; 1
    3cb4:	8b b9       	out	0x0b, r24	; 11
		
		I2CBitDelay();
    3cb6:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <I2CBitDelay>
		
		// Ensure SCL is low
		SCL_LOW();
    3cba:	8b b1       	in	r24, 0x0b	; 11
    3cbc:	8e 7f       	andi	r24, 0xFE	; 254
    3cbe:	8b b9       	out	0x0b, r24	; 11
	
		// SDA Is now set. Delay.
		I2CBitDelay();
    3cc0:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <I2CBitDelay>
		
		// Next bit
		u8Byte <<= 1;	
    3cc4:	dd 0f       	add	r29, r29
		u8Length--;
    3cc6:	c1 50       	subi	r28, 0x01	; 1
	uint8_t u8Length = 8;			// 8 Bits to send
	bool bAck = false;

	SDA_SET_OUTPUT();

	while (u8Length)
    3cc8:	c1 11       	cpse	r28, r1
    3cca:	e9 cf       	rjmp	.-46     	; 0x3c9e <I2CTxByte+0x10>
		// Next bit
		u8Byte <<= 1;	
		u8Length--;
	}
	
	SDA_SET_INPUT();
    3ccc:	8a b1       	in	r24, 0x0a	; 10
    3cce:	8d 7f       	andi	r24, 0xFD	; 253
    3cd0:	8a b9       	out	0x0a, r24	; 10
    3cd2:	8b b1       	in	r24, 0x0b	; 11
    3cd4:	82 60       	ori	r24, 0x02	; 2
    3cd6:	8b b9       	out	0x0b, r24	; 11
	SCL_HIGH();
    3cd8:	8b b1       	in	r24, 0x0b	; 11
    3cda:	81 60       	ori	r24, 0x01	; 1
    3cdc:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    3cde:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <I2CBitDelay>
	
	// See if the byte was acknowledged
	if (SDA_READ())
    3ce2:	49 9b       	sbis	0x09, 1	; 9
	{
		bAck = false;
	}
	else
	{
		bAck = true;
    3ce4:	c1 e0       	ldi	r28, 0x01	; 1
	}
	
	SCL_LOW();
    3ce6:	8b b1       	in	r24, 0x0b	; 11
    3ce8:	8e 7f       	andi	r24, 0xFE	; 254
    3cea:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    3cec:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <I2CBitDelay>
	return(bAck);
}
    3cf0:	8c 2f       	mov	r24, r28
    3cf2:	df 91       	pop	r29
    3cf4:	cf 91       	pop	r28
    3cf6:	08 95       	ret

Disassembly of section .text.I2CRxByte:

00003ab4 <I2CRxByte>:

// Receives a single I2C byte and will optionally generate an ack at the end
uint8_t I2CRxByte(bool bAck)
{
    3ab4:	1f 93       	push	r17
    3ab6:	cf 93       	push	r28
    3ab8:	df 93       	push	r29
    3aba:	18 2f       	mov	r17, r24
	uint8_t u8Data = 0;
	uint8_t u8Count = 8;
	
	SDA_SET_INPUT();
    3abc:	8a b1       	in	r24, 0x0a	; 10
    3abe:	8d 7f       	andi	r24, 0xFD	; 253
    3ac0:	8a b9       	out	0x0a, r24	; 10
    3ac2:	8b b1       	in	r24, 0x0b	; 11
    3ac4:	82 60       	ori	r24, 0x02	; 2
    3ac6:	8b b9       	out	0x0b, r24	; 11

// Receives a single I2C byte and will optionally generate an ack at the end
uint8_t I2CRxByte(bool bAck)
{
	uint8_t u8Data = 0;
	uint8_t u8Count = 8;
    3ac8:	c8 e0       	ldi	r28, 0x08	; 8
}

// Receives a single I2C byte and will optionally generate an ack at the end
uint8_t I2CRxByte(bool bAck)
{
	uint8_t u8Data = 0;
    3aca:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t u8Count = 8;
	
	SDA_SET_INPUT();
	
	// Consume all 8 data bits
	while (u8Count)
    3acc:	0e c0       	rjmp	.+28     	; 0x3aea <I2CRxByte+0x36>
	{
		u8Data <<= 1;
    3ace:	dd 0f       	add	r29, r29

		SCL_HIGH();
    3ad0:	8b b1       	in	r24, 0x0b	; 11
    3ad2:	81 60       	ori	r24, 0x01	; 1
    3ad4:	8b b9       	out	0x0b, r24	; 11
		I2CBitDelay();
    3ad6:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <I2CBitDelay>
			
		if (SDA_READ())
    3ada:	49 99       	sbic	0x09, 1	; 9
		{
			u8Data |= 1;
    3adc:	d1 60       	ori	r29, 0x01	; 1
		}
		
		SCL_LOW();
    3ade:	8b b1       	in	r24, 0x0b	; 11
    3ae0:	8e 7f       	andi	r24, 0xFE	; 254
    3ae2:	8b b9       	out	0x0b, r24	; 11
		I2CBitDelay();
    3ae4:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <I2CBitDelay>
		u8Count--;
    3ae8:	c1 50       	subi	r28, 0x01	; 1
	uint8_t u8Count = 8;
	
	SDA_SET_INPUT();
	
	// Consume all 8 data bits
	while (u8Count)
    3aea:	c1 11       	cpse	r28, r1
    3aec:	f0 cf       	rjmp	.-32     	; 0x3ace <I2CRxByte+0x1a>
		I2CBitDelay();
		u8Count--;
	}

	// See if we acknowledge this
	SDA_SET_OUTPUT();
    3aee:	8a b1       	in	r24, 0x0a	; 10
    3af0:	82 60       	ori	r24, 0x02	; 2
    3af2:	8a b9       	out	0x0a, r24	; 10
	if (bAck)
    3af4:	11 23       	and	r17, r17
    3af6:	21 f0       	breq	.+8      	; 0x3b00 <I2CRxByte+0x4c>
	{
		SDA_LOW();
    3af8:	8b b1       	in	r24, 0x0b	; 11
    3afa:	8d 7f       	andi	r24, 0xFD	; 253
    3afc:	8b b9       	out	0x0b, r24	; 11
    3afe:	03 c0       	rjmp	.+6      	; 0x3b06 <I2CRxByte+0x52>
	}
	else
	{
		SDA_HIGH();
    3b00:	8b b1       	in	r24, 0x0b	; 11
    3b02:	82 60       	ori	r24, 0x02	; 2
    3b04:	8b b9       	out	0x0b, r24	; 11
	}
	
	I2CBitDelay();
    3b06:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <I2CBitDelay>
	SCL_HIGH();
    3b0a:	8b b1       	in	r24, 0x0b	; 11
    3b0c:	81 60       	ori	r24, 0x01	; 1
    3b0e:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    3b10:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <I2CBitDelay>
	SCL_LOW();
    3b14:	8b b1       	in	r24, 0x0b	; 11
    3b16:	8e 7f       	andi	r24, 0xFE	; 254
    3b18:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    3b1a:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <I2CBitDelay>
	SDA_LOW();
    3b1e:	8b b1       	in	r24, 0x0b	; 11
    3b20:	8d 7f       	andi	r24, 0xFD	; 253
    3b22:	8b b9       	out	0x0b, r24	; 11

	return(u8Data);	
}
    3b24:	8d 2f       	mov	r24, r29
    3b26:	df 91       	pop	r29
    3b28:	cf 91       	pop	r28
    3b2a:	1f 91       	pop	r17
    3b2c:	08 95       	ret

Disassembly of section .text.I2CSetup:

00004674 <I2CSetup>:
// Prepares the SCL/SDA pins for I2C operation and returns when the CPU is
// quantized to the timer (for consistent bit alignment)
void I2CSetup(void)
{
	// Deassert SCL and SDA
	SCL_HIGH();
    4674:	8b b1       	in	r24, 0x0b	; 11
    4676:	81 60       	ori	r24, 0x01	; 1
    4678:	8b b9       	out	0x0b, r24	; 11
	SDA_HIGH();
    467a:	8b b1       	in	r24, 0x0b	; 11
    467c:	82 60       	ori	r24, 0x02	; 2
    467e:	8b b9       	out	0x0b, r24	; 11

	// Set SCL and SDA lines as push/pull output drives
	SCL_SET_OUTPUT();
    4680:	8a b1       	in	r24, 0x0a	; 10
    4682:	81 60       	ori	r24, 0x01	; 1
    4684:	8a b9       	out	0x0a, r24	; 10
	
	// Turn on SDA, set as an input
	SDA_SET_INPUT();
    4686:	8a b1       	in	r24, 0x0a	; 10
    4688:	8d 7f       	andi	r24, 0xFD	; 253
    468a:	8a b9       	out	0x0a, r24	; 10
    468c:	8b b1       	in	r24, 0x0b	; 11
    468e:	82 60       	ori	r24, 0x02	; 2
    4690:	8b b9       	out	0x0b, r24	; 11
	
	Delay(20);
    4692:	64 e1       	ldi	r22, 0x14	; 20
    4694:	70 e0       	ldi	r23, 0x00	; 0
    4696:	80 e0       	ldi	r24, 0x00	; 0
    4698:	90 e0       	ldi	r25, 0x00	; 0
    469a:	0e 94 a2 20 	call	0x4144	; 0x4144 <Delay>
    469e:	08 95       	ret

Disassembly of section .text.I2CStartTransaction:

00004722 <I2CStartTransaction>:

// Sets up the I2C pins, sends slave address/read/write byte, and waits for acknowledgment.
// Returns false if no device is responding.
bool I2CStartTransaction(uint8_t u8SlaveAddress,
						 bool bRead)
{
    4722:	cf 93       	push	r28
    4724:	df 93       	push	r29
    4726:	c8 2f       	mov	r28, r24
    4728:	d6 2f       	mov	r29, r22
	// Set up the pins for I2C operation
	I2CSetup();
    472a:	0e 94 3a 23 	call	0x4674	; 0x4674 <I2CSetup>
	
	// I2C Start condition
	I2CStart();
    472e:	0e 94 24 23 	call	0x4648	; 0x4648 <I2CStart>

	// If it's a read operation, clear the lower bit
	if (bRead)
    4732:	dd 23       	and	r29, r29
    4734:	19 f0       	breq	.+6      	; 0x473c <I2CStartTransaction+0x1a>
	{
		u8SlaveAddress |= 1;
    4736:	8c 2f       	mov	r24, r28
    4738:	81 60       	ori	r24, 0x01	; 1
    473a:	02 c0       	rjmp	.+4      	; 0x4740 <I2CStartTransaction+0x1e>
	}
	else
	{
		// Otherwise set it
		u8SlaveAddress &= (uint8_t) (~1);
    473c:	8c 2f       	mov	r24, r28
    473e:	8e 7f       	andi	r24, 0xFE	; 254
	}
	
	// Now send out the slave address + the read/write bit
	return(I2CTxByte(u8SlaveAddress));
    4740:	0e 94 47 1e 	call	0x3c8e	; 0x3c8e <I2CTxByte>
}
    4744:	df 91       	pop	r29
    4746:	cf 91       	pop	r28
    4748:	08 95       	ret

Disassembly of section .text.CellCountExpectedSet:

00002f7e <CellCountExpectedSet>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    2f7e:	cf 92       	push	r12
    2f80:	df 92       	push	r13
    2f82:	ef 92       	push	r14
    2f84:	ff 92       	push	r15
    2f86:	8f 35       	cpi	r24, 0x5F	; 95
    2f88:	08 f0       	brcs	.+2      	; 0x2f8c <CellCountExpectedSet+0xe>
    2f8a:	8e e5       	ldi	r24, 0x5E	; 94
    2f8c:	e0 e1       	ldi	r30, 0x10	; 16
    2f8e:	f1 e0       	ldi	r31, 0x01	; 1
    2f90:	85 8b       	std	Z+21, r24	; 0x15
    2f92:	c8 2e       	mov	r12, r24
    2f94:	d1 2c       	mov	r13, r1
    2f96:	e1 2c       	mov	r14, r1
    2f98:	f1 2c       	mov	r15, r1
    2f9a:	aa ec       	ldi	r26, 0xCA	; 202
    2f9c:	b8 e0       	ldi	r27, 0x08	; 8
    2f9e:	a7 01       	movw	r20, r14
    2fa0:	96 01       	movw	r18, r12
    2fa2:	0e 94 0e 26 	call	0x4c1c	; 0x4c1c <__muluhisi3>
    2fa6:	65 8f       	std	Z+29, r22	; 0x1d
    2fa8:	76 8f       	std	Z+30, r23	; 0x1e
    2faa:	87 8f       	std	Z+31, r24	; 0x1f
    2fac:	90 a3       	std	Z+32, r25	; 0x20
    2fae:	a4 e9       	ldi	r26, 0x94	; 148
    2fb0:	b1 e1       	ldi	r27, 0x11	; 17
    2fb2:	0e 94 0e 26 	call	0x4c1c	; 0x4c1c <__muluhisi3>
    2fb6:	61 a3       	std	Z+33, r22	; 0x21
    2fb8:	72 a3       	std	Z+34, r23	; 0x22
    2fba:	83 a3       	std	Z+35, r24	; 0x23
    2fbc:	94 a3       	std	Z+36, r25	; 0x24
    2fbe:	81 a1       	ldd	r24, Z+33	; 0x21
    2fc0:	92 a1       	ldd	r25, Z+34	; 0x22
    2fc2:	a3 a1       	ldd	r26, Z+35	; 0x23
    2fc4:	b4 a1       	ldd	r27, Z+36	; 0x24
    2fc6:	45 8d       	ldd	r20, Z+29	; 0x1d
    2fc8:	56 8d       	ldd	r21, Z+30	; 0x1e
    2fca:	67 8d       	ldd	r22, Z+31	; 0x1f
    2fcc:	70 a1       	ldd	r23, Z+32	; 0x20
    2fce:	84 1b       	sub	r24, r20
    2fd0:	95 0b       	sbc	r25, r21
    2fd2:	a6 0b       	sbc	r26, r22
    2fd4:	b7 0b       	sbc	r27, r23
    2fd6:	88 0f       	add	r24, r24
    2fd8:	99 1f       	adc	r25, r25
    2fda:	aa 1f       	adc	r26, r26
    2fdc:	bb 1f       	adc	r27, r27
    2fde:	88 0f       	add	r24, r24
    2fe0:	99 1f       	adc	r25, r25
    2fe2:	aa 1f       	adc	r26, r26
    2fe4:	bb 1f       	adc	r27, r27
    2fe6:	88 0f       	add	r24, r24
    2fe8:	99 1f       	adc	r25, r25
    2fea:	aa 1f       	adc	r26, r26
    2fec:	bb 1f       	adc	r27, r27
    2fee:	88 0f       	add	r24, r24
    2ff0:	99 1f       	adc	r25, r25
    2ff2:	aa 1f       	adc	r26, r26
    2ff4:	bb 1f       	adc	r27, r27
    2ff6:	88 0f       	add	r24, r24
    2ff8:	99 1f       	adc	r25, r25
    2ffa:	aa 1f       	adc	r26, r26
    2ffc:	bb 1f       	adc	r27, r27
    2ffe:	88 0f       	add	r24, r24
    3000:	99 1f       	adc	r25, r25
    3002:	aa 1f       	adc	r26, r26
    3004:	bb 1f       	adc	r27, r27
    3006:	88 0f       	add	r24, r24
    3008:	99 1f       	adc	r25, r25
    300a:	aa 1f       	adc	r26, r26
    300c:	bb 1f       	adc	r27, r27
    300e:	ac 01       	movw	r20, r24
    3010:	bd 01       	movw	r22, r26
    3012:	bb 23       	and	r27, r27
    3014:	24 f4       	brge	.+8      	; 0x301e <CellCountExpectedSet+0xa0>
    3016:	41 50       	subi	r20, 0x01	; 1
    3018:	5c 4f       	sbci	r21, 0xFC	; 252
    301a:	6f 4f       	sbci	r22, 0xFF	; 255
    301c:	7f 4f       	sbci	r23, 0xFF	; 255
    301e:	03 2e       	mov	r0, r19
    3020:	3a e0       	ldi	r19, 0x0A	; 10
    3022:	75 95       	asr	r23
    3024:	67 95       	ror	r22
    3026:	57 95       	ror	r21
    3028:	47 95       	ror	r20
    302a:	3a 95       	dec	r19
    302c:	d1 f7       	brne	.-12     	; 0x3022 <CellCountExpectedSet+0xa4>
    302e:	30 2d       	mov	r19, r0
    3030:	50 93 36 01 	sts	0x0136, r21	; 0x800136 <sg_sFrame+0x26>
    3034:	40 93 35 01 	sts	0x0135, r20	; 0x800135 <sg_sFrame+0x25>
    3038:	ff 90       	pop	r15
    303a:	ef 90       	pop	r14
    303c:	df 90       	pop	r13
    303e:	cf 90       	pop	r12
    3040:	08 95       	ret

Disassembly of section .text.SendModuleControllerStatus:

00004cca <SendModuleControllerStatus>:

static uint8_t sg_u8ControllerStatusMsgCount = 0;

static void SendModuleControllerStatus(void)
{
	sg_bSendModuleControllerStatus = true;
    4cca:	81 e0       	ldi	r24, 0x01	; 1
    4ccc:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <sg_bSendModuleControllerStatus>
	sg_u8ControllerStatusMsgCount = 0;
    4cd0:	10 92 6c 09 	sts	0x096C, r1	; 0x80096c <sg_u8ControllerStatusMsgCount>
	sg_bIgnoreStatusRequests = true;  // Start ignoring new requests
    4cd4:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <sg_bIgnoreStatusRequests>
    4cd8:	08 95       	ret

Disassembly of section .text.ModuleControllerStateSet:

00004d64 <ModuleControllerStateSet>:
	MBASSERT(0);
}

static void ModuleControllerStateSet( EModuleControllerState eNext )
{
	if(eNext < EMODSTATE_COUNT)
    4d64:	84 30       	cpi	r24, 0x04	; 4
    4d66:	10 f4       	brcc	.+4      	; 0x4d6c <ModuleControllerStateSet+0x8>
	{
		sg_eModuleControllerStateTarget = eNext;
    4d68:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <sg_eModuleControllerStateTarget>
    4d6c:	08 95       	ret

Disassembly of section .text.ModuleControllerStateSetMax:

00004bf0 <ModuleControllerStateSetMax>:



static void ModuleControllerStateSetMax( EModuleControllerState eNext )
{
	if(eNext < EMODSTATE_COUNT)
    4bf0:	84 30       	cpi	r24, 0x04	; 4
    4bf2:	40 f4       	brcc	.+16     	; 0x4c04 <ModuleControllerStateSetMax+0x14>
	{
		sg_eModuleControllerStateMax = eNext;
    4bf4:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <sg_eModuleControllerStateMax>
		if (sg_eModuleControllerStateCurrent > eNext) // we are in a higher state than allowed
    4bf8:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    4bfc:	89 17       	cp	r24, r25
    4bfe:	10 f4       	brcc	.+4      	; 0x4c04 <ModuleControllerStateSetMax+0x14>
		{
			sg_eModuleControllerStateTarget = eNext;
    4c00:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <sg_eModuleControllerStateTarget>
    4c04:	08 95       	ret

Disassembly of section .text.Check5VLoss:

00004b92 <Check5VLoss>:
}

// Checks for 5V loss
static void Check5VLoss(uint8_t u8NewState)
{
	if( u8NewState & (1 << PIN_5V_DET) )
    4b92:	86 fd       	sbrc	r24, 6
    4b94:	09 c0       	rjmp	.+18     	; 0x4ba8 <Check5VLoss+0x16>
		// Not asserted
	}
	else
	{
		// 5V detect is low
		FET_EN_DEASSERT();
    4b96:	88 b1       	in	r24, 0x08	; 8
    4b98:	8f 7e       	andi	r24, 0xEF	; 239
    4b9a:	88 b9       	out	0x08, r24	; 8
		RELAY_EN_DEASSERT();
    4b9c:	8e b1       	in	r24, 0x0e	; 14
    4b9e:	8d 7f       	andi	r24, 0xFD	; 253
    4ba0:	8e b9       	out	0x0e, r24	; 14
		ModuleControllerStateSet( EMODSTATE_OFF );
    4ba2:	80 e0       	ldi	r24, 0x00	; 0
    4ba4:	0e 94 b2 26 	call	0x4d64	; 0x4d64 <ModuleControllerStateSet>
    4ba8:	08 95       	ret

Disassembly of section .text.CellDataConvertVoltage:

00003e8c <CellDataConvertVoltage>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    3e8c:	fb 01       	movw	r30, r22
    3e8e:	dc 01       	movw	r26, r24
    3e90:	b3 70       	andi	r27, 0x03	; 3
    3e92:	2b ed       	ldi	r18, 0xDB	; 219
    3e94:	36 ea       	ldi	r19, 0xA6	; 166
    3e96:	43 e2       	ldi	r20, 0x23	; 35
    3e98:	50 e0       	ldi	r21, 0x00	; 0
    3e9a:	0e 94 0e 26 	call	0x4c1c	; 0x4c1c <__muluhisi3>
    3e9e:	dc 01       	movw	r26, r24
    3ea0:	cb 01       	movw	r24, r22
    3ea2:	07 2e       	mov	r0, r23
    3ea4:	7a e0       	ldi	r23, 0x0A	; 10
    3ea6:	b6 95       	lsr	r27
    3ea8:	a7 95       	ror	r26
    3eaa:	97 95       	ror	r25
    3eac:	87 95       	ror	r24
    3eae:	7a 95       	dec	r23
    3eb0:	d1 f7       	brne	.-12     	; 0x3ea6 <CellDataConvertVoltage+0x1a>
    3eb2:	70 2d       	mov	r23, r0
    3eb4:	9f 5f       	subi	r25, 0xFF	; 255
    3eb6:	af 4f       	sbci	r26, 0xFF	; 255
    3eb8:	bf 4f       	sbci	r27, 0xFF	; 255
    3eba:	07 2e       	mov	r0, r23
    3ebc:	79 e0       	ldi	r23, 0x09	; 9
    3ebe:	b6 95       	lsr	r27
    3ec0:	a7 95       	ror	r26
    3ec2:	97 95       	ror	r25
    3ec4:	87 95       	ror	r24
    3ec6:	7a 95       	dec	r23
    3ec8:	d1 f7       	brne	.-12     	; 0x3ebe <CellDataConvertVoltage+0x32>
    3eca:	70 2d       	mov	r23, r0
    3ecc:	9c 01       	movw	r18, r24
    3ece:	01 97       	sbiw	r24, 0x01	; 1
    3ed0:	8e 3f       	cpi	r24, 0xFE	; 254
    3ed2:	9f 4f       	sbci	r25, 0xFF	; 255
    3ed4:	10 f4       	brcc	.+4      	; 0x3eda <CellDataConvertVoltage+0x4e>
    3ed6:	81 e0       	ldi	r24, 0x01	; 1
    3ed8:	03 c0       	rjmp	.+6      	; 0x3ee0 <CellDataConvertVoltage+0x54>
    3eda:	80 e0       	ldi	r24, 0x00	; 0
    3edc:	20 e0       	ldi	r18, 0x00	; 0
    3ede:	30 e0       	ldi	r19, 0x00	; 0
    3ee0:	30 97       	sbiw	r30, 0x00	; 0
    3ee2:	11 f0       	breq	.+4      	; 0x3ee8 <CellDataConvertVoltage+0x5c>
    3ee4:	31 83       	std	Z+1, r19	; 0x01
    3ee6:	20 83       	st	Z, r18
    3ee8:	08 95       	ret

Disassembly of section .text.CellDataConvertTemperature:

00003b2e <CellDataConvertTemperature>:
    3b2e:	8f 3f       	cpi	r24, 0xFF	; 255
    3b30:	2f ef       	ldi	r18, 0xFF	; 255
    3b32:	92 07       	cpc	r25, r18
    3b34:	61 f1       	breq	.+88     	; 0x3b8e <CellDataConvertTemperature+0x60>
    3b36:	28 2f       	mov	r18, r24
    3b38:	2f 70       	andi	r18, 0x0F	; 15
    3b3a:	94 ff       	sbrs	r25, 4
    3b3c:	02 c0       	rjmp	.+4      	; 0x3b42 <CellDataConvertTemperature+0x14>
    3b3e:	90 6f       	ori	r25, 0xF0	; 240
    3b40:	01 c0       	rjmp	.+2      	; 0x3b44 <CellDataConvertTemperature+0x16>
    3b42:	9f 77       	andi	r25, 0x7F	; 127
    3b44:	95 95       	asr	r25
    3b46:	87 95       	ror	r24
    3b48:	95 95       	asr	r25
    3b4a:	87 95       	ror	r24
    3b4c:	95 95       	asr	r25
    3b4e:	87 95       	ror	r24
    3b50:	95 95       	asr	r25
    3b52:	87 95       	ror	r24
    3b54:	ac 01       	movw	r20, r24
    3b56:	4c 5e       	subi	r20, 0xEC	; 236
    3b58:	5f 4f       	sbci	r21, 0xFF	; 255
    3b5a:	4d 38       	cpi	r20, 0x8D	; 141
    3b5c:	51 05       	cpc	r21, r1
    3b5e:	c8 f4       	brcc	.+50     	; 0x3b92 <CellDataConvertTemperature+0x64>
    3b60:	34 e6       	ldi	r19, 0x64	; 100
    3b62:	38 9f       	mul	r19, r24
    3b64:	d0 01       	movw	r26, r0
    3b66:	39 9f       	mul	r19, r25
    3b68:	b0 0d       	add	r27, r0
    3b6a:	11 24       	eor	r1, r1
    3b6c:	30 e0       	ldi	r19, 0x00	; 0
    3b6e:	40 e0       	ldi	r20, 0x00	; 0
    3b70:	26 5f       	subi	r18, 0xF6	; 246
    3b72:	3c 4f       	sbci	r19, 0xFC	; 252
    3b74:	4f 4f       	sbci	r20, 0xFF	; 255
    3b76:	f9 01       	movw	r30, r18
    3b78:	84 91       	lpm	r24, Z
    3b7a:	47 fd       	sbrc	r20, 7
    3b7c:	80 81       	ld	r24, Z
    3b7e:	fd 01       	movw	r30, r26
    3b80:	e8 0f       	add	r30, r24
    3b82:	f1 1d       	adc	r31, r1
    3b84:	cf 01       	movw	r24, r30
    3b86:	81 56       	subi	r24, 0x61	; 97
    3b88:	9a 4e       	sbci	r25, 0xEA	; 234
    3b8a:	21 e0       	ldi	r18, 0x01	; 1
    3b8c:	05 c0       	rjmp	.+10     	; 0x3b98 <CellDataConvertTemperature+0x6a>
    3b8e:	20 e0       	ldi	r18, 0x00	; 0
    3b90:	03 c0       	rjmp	.+6      	; 0x3b98 <CellDataConvertTemperature+0x6a>
    3b92:	8f ef       	ldi	r24, 0xFF	; 255
    3b94:	9f ef       	ldi	r25, 0xFF	; 255
    3b96:	20 e0       	ldi	r18, 0x00	; 0
    3b98:	61 15       	cp	r22, r1
    3b9a:	71 05       	cpc	r23, r1
    3b9c:	19 f0       	breq	.+6      	; 0x3ba4 <CellDataConvertTemperature+0x76>
    3b9e:	fb 01       	movw	r30, r22
    3ba0:	91 83       	std	Z+1, r25	; 0x01
    3ba2:	80 83       	st	Z, r24
    3ba4:	82 2f       	mov	r24, r18
    3ba6:	08 95       	ret

Disassembly of section .text.ModuleCurrentConvertReadings:

000025c8 <ModuleCurrentConvertReadings>:
    25c8:	a0 91 59 01 	lds	r26, 0x0159	; 0x800159 <sg_sFrame+0x49>
    25cc:	b0 91 5a 01 	lds	r27, 0x015A	; 0x80015a <sg_sFrame+0x4a>
    25d0:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <sg_sFrame+0x4c>
    25d4:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <sg_sFrame+0x4d>
    25d8:	e0 91 77 09 	lds	r30, 0x0977	; 0x800977 <sg_u8CurrentBufferIndex>
    25dc:	ef 3f       	cpi	r30, 0xFF	; 255
    25de:	81 f4       	brne	.+32     	; 0x2600 <ModuleCurrentConvertReadings+0x38>
    25e0:	07 c0       	rjmp	.+14     	; 0x25f0 <ModuleCurrentConvertReadings+0x28>
    25e2:	f0 e0       	ldi	r31, 0x00	; 0
    25e4:	ee 0f       	add	r30, r30
    25e6:	ff 1f       	adc	r31, r31
    25e8:	e3 5e       	subi	r30, 0xE3	; 227
    25ea:	f6 4f       	sbci	r31, 0xF6	; 246
    25ec:	91 83       	std	Z+1, r25	; 0x01
    25ee:	80 83       	st	Z, r24
    25f0:	e0 91 77 09 	lds	r30, 0x0977	; 0x800977 <sg_u8CurrentBufferIndex>
    25f4:	ef 5f       	subi	r30, 0xFF	; 255
    25f6:	e0 93 77 09 	sts	0x0977, r30	; 0x800977 <sg_u8CurrentBufferIndex>
    25fa:	e8 30       	cpi	r30, 0x08	; 8
    25fc:	90 f3       	brcs	.-28     	; 0x25e2 <ModuleCurrentConvertReadings+0x1a>
    25fe:	0f c0       	rjmp	.+30     	; 0x261e <ModuleCurrentConvertReadings+0x56>
    2600:	21 e0       	ldi	r18, 0x01	; 1
    2602:	2e 0f       	add	r18, r30
    2604:	20 93 77 09 	sts	0x0977, r18	; 0x800977 <sg_u8CurrentBufferIndex>
    2608:	f0 e0       	ldi	r31, 0x00	; 0
    260a:	ee 0f       	add	r30, r30
    260c:	ff 1f       	adc	r31, r31
    260e:	e3 5e       	subi	r30, 0xE3	; 227
    2610:	f6 4f       	sbci	r31, 0xF6	; 246
    2612:	91 83       	std	Z+1, r25	; 0x01
    2614:	80 83       	st	Z, r24
    2616:	28 30       	cpi	r18, 0x08	; 8
    2618:	10 f0       	brcs	.+4      	; 0x261e <ModuleCurrentConvertReadings+0x56>
    261a:	10 92 77 09 	sts	0x0977, r1	; 0x800977 <sg_u8CurrentBufferIndex>
    261e:	80 e0       	ldi	r24, 0x00	; 0
    2620:	20 e0       	ldi	r18, 0x00	; 0
    2622:	30 e0       	ldi	r19, 0x00	; 0
    2624:	0b c0       	rjmp	.+22     	; 0x263c <ModuleCurrentConvertReadings+0x74>
    2626:	e8 2f       	mov	r30, r24
    2628:	f0 e0       	ldi	r31, 0x00	; 0
    262a:	ee 0f       	add	r30, r30
    262c:	ff 1f       	adc	r31, r31
    262e:	e3 5e       	subi	r30, 0xE3	; 227
    2630:	f6 4f       	sbci	r31, 0xF6	; 246
    2632:	40 81       	ld	r20, Z
    2634:	51 81       	ldd	r21, Z+1	; 0x01
    2636:	24 0f       	add	r18, r20
    2638:	35 1f       	adc	r19, r21
    263a:	8f 5f       	subi	r24, 0xFF	; 255
    263c:	88 30       	cpi	r24, 0x08	; 8
    263e:	98 f3       	brcs	.-26     	; 0x2626 <ModuleCurrentConvertReadings+0x5e>
    2640:	c9 01       	movw	r24, r18
    2642:	99 23       	and	r25, r25
    2644:	0c f4       	brge	.+2      	; 0x2648 <ModuleCurrentConvertReadings+0x80>
    2646:	07 96       	adiw	r24, 0x07	; 7
    2648:	95 95       	asr	r25
    264a:	87 95       	ror	r24
    264c:	95 95       	asr	r25
    264e:	87 95       	ror	r24
    2650:	95 95       	asr	r25
    2652:	87 95       	ror	r24
    2654:	a8 1b       	sub	r26, r24
    2656:	b9 0b       	sbc	r27, r25
    2658:	20 e8       	ldi	r18, 0x80	; 128
    265a:	3c e0       	ldi	r19, 0x0C	; 12
    265c:	0e 94 9a 26 	call	0x4d34	; 0x4d34 <__usmulhisi3>
    2660:	ab 01       	movw	r20, r22
    2662:	bc 01       	movw	r22, r24
    2664:	5f 5f       	subi	r21, 0xFF	; 255
    2666:	6f 4f       	sbci	r22, 0xFF	; 255
    2668:	7f 4f       	sbci	r23, 0xFF	; 255
    266a:	db 01       	movw	r26, r22
    266c:	ca 01       	movw	r24, r20
    266e:	77 23       	and	r23, r23
    2670:	24 f4       	brge	.+8      	; 0x267a <ModuleCurrentConvertReadings+0xb2>
    2672:	81 50       	subi	r24, 0x01	; 1
    2674:	9e 4f       	sbci	r25, 0xFE	; 254
    2676:	af 4f       	sbci	r26, 0xFF	; 255
    2678:	bf 4f       	sbci	r27, 0xFF	; 255
    267a:	07 2e       	mov	r0, r23
    267c:	79 e0       	ldi	r23, 0x09	; 9
    267e:	b5 95       	asr	r27
    2680:	a7 95       	ror	r26
    2682:	97 95       	ror	r25
    2684:	87 95       	ror	r24
    2686:	7a 95       	dec	r23
    2688:	d1 f7       	brne	.-12     	; 0x267e <ModuleCurrentConvertReadings+0xb6>
    268a:	70 2d       	mov	r23, r0
    268c:	90 58       	subi	r25, 0x80	; 128
    268e:	af 4f       	sbci	r26, 0xFF	; 255
    2690:	bf 4f       	sbci	r27, 0xFF	; 255
    2692:	e0 e1       	ldi	r30, 0x10	; 16
    2694:	f1 e0       	ldi	r31, 0x01	; 1
    2696:	90 ab       	std	Z+48, r25	; 0x30
    2698:	87 a7       	std	Z+47, r24	; 0x2f
    269a:	27 a5       	ldd	r18, Z+47	; 0x2f
    269c:	30 a9       	ldd	r19, Z+48	; 0x30
    269e:	86 89       	ldd	r24, Z+22	; 0x16
    26a0:	97 89       	ldd	r25, Z+23	; 0x17
    26a2:	82 17       	cp	r24, r18
    26a4:	93 07       	cpc	r25, r19
    26a6:	20 f4       	brcc	.+8      	; 0x26b0 <ModuleCurrentConvertReadings+0xe8>
    26a8:	87 a5       	ldd	r24, Z+47	; 0x2f
    26aa:	90 a9       	ldd	r25, Z+48	; 0x30
    26ac:	97 8b       	std	Z+23, r25	; 0x17
    26ae:	86 8b       	std	Z+22, r24	; 0x16
    26b0:	e0 e1       	ldi	r30, 0x10	; 16
    26b2:	f1 e0       	ldi	r31, 0x01	; 1
    26b4:	27 a5       	ldd	r18, Z+47	; 0x2f
    26b6:	30 a9       	ldd	r19, Z+48	; 0x30
    26b8:	80 8d       	ldd	r24, Z+24	; 0x18
    26ba:	91 8d       	ldd	r25, Z+25	; 0x19
    26bc:	28 17       	cp	r18, r24
    26be:	39 07       	cpc	r19, r25
    26c0:	20 f4       	brcc	.+8      	; 0x26ca <ModuleCurrentConvertReadings+0x102>
    26c2:	87 a5       	ldd	r24, Z+47	; 0x2f
    26c4:	90 a9       	ldd	r25, Z+48	; 0x30
    26c6:	91 8f       	std	Z+25, r25	; 0x19
    26c8:	80 8f       	std	Z+24, r24	; 0x18
    26ca:	08 95       	ret

Disassembly of section .text.__vector_1:

0000480e <__vector_1>:

// NOTE: If you're getting unexpected AVR resets, uncomment these unused handlers to see
// if another interrupt is being taken that doesn't have a handler. AVR Defaults to jumping
// to 0 when not vector is programmed.
ISR(ANACOMP0_vect, ISR_BLOCK)
{
    480e:	1f 92       	push	r1
    4810:	0f 92       	push	r0
    4812:	0f b6       	in	r0, 0x3f	; 63
    4814:	0f 92       	push	r0
    4816:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) ANACOMP0_vect;
    4818:	87 e0       	ldi	r24, 0x07	; 7
    481a:	94 e2       	ldi	r25, 0x24	; 36
    481c:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4820:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4824:	80 93 69 09 	sts	0x0969, r24	; 0x800969 <sg_u8PCMSK0>
    4828:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    482c:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <sg_u8PCMSK1>
    4830:	ff cf       	rjmp	.-2      	; 0x4830 <__vector_1+0x22>

Disassembly of section .text.__vector_2:

00004832 <__vector_2>:
	while (1);
}

ISR(ANACOMP1_vect, ISR_BLOCK)
{
    4832:	1f 92       	push	r1
    4834:	0f 92       	push	r0
    4836:	0f b6       	in	r0, 0x3f	; 63
    4838:	0f 92       	push	r0
    483a:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) ANACOMP1_vect;
    483c:	89 e1       	ldi	r24, 0x19	; 25
    483e:	94 e2       	ldi	r25, 0x24	; 36
    4840:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4844:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4848:	80 93 69 09 	sts	0x0969, r24	; 0x800969 <sg_u8PCMSK0>
    484c:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4850:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <sg_u8PCMSK1>
    4854:	ff cf       	rjmp	.-2      	; 0x4854 <__vector_2+0x22>

Disassembly of section .text.__vector_3:

00004856 <__vector_3>:
	while (1);
}

ISR(ANACOMP2_vect, ISR_BLOCK)
{
    4856:	1f 92       	push	r1
    4858:	0f 92       	push	r0
    485a:	0f b6       	in	r0, 0x3f	; 63
    485c:	0f 92       	push	r0
    485e:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) ANACOMP2_vect;
    4860:	8b e2       	ldi	r24, 0x2B	; 43
    4862:	94 e2       	ldi	r25, 0x24	; 36
    4864:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4868:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    486c:	80 93 69 09 	sts	0x0969, r24	; 0x800969 <sg_u8PCMSK0>
    4870:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4874:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <sg_u8PCMSK1>
    4878:	ff cf       	rjmp	.-2      	; 0x4878 <__vector_3+0x22>

Disassembly of section .text.__vector_4:

0000487a <__vector_4>:
	while (1);
}

ISR(ANACOMP3_vect, ISR_BLOCK)
{
    487a:	1f 92       	push	r1
    487c:	0f 92       	push	r0
    487e:	0f b6       	in	r0, 0x3f	; 63
    4880:	0f 92       	push	r0
    4882:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) ANACOMP3_vect;
    4884:	8d e3       	ldi	r24, 0x3D	; 61
    4886:	94 e2       	ldi	r25, 0x24	; 36
    4888:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    488c:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4890:	80 93 69 09 	sts	0x0969, r24	; 0x800969 <sg_u8PCMSK0>
    4894:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4898:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <sg_u8PCMSK1>
    489c:	ff cf       	rjmp	.-2      	; 0x489c <__vector_4+0x22>

Disassembly of section .text.__vector_5:

0000489e <__vector_5>:
	while (1);
}

ISR(PSC_FAULT_vect, ISR_BLOCK)
{
    489e:	1f 92       	push	r1
    48a0:	0f 92       	push	r0
    48a2:	0f b6       	in	r0, 0x3f	; 63
    48a4:	0f 92       	push	r0
    48a6:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) PSC_FAULT_vect;
    48a8:	8f e4       	ldi	r24, 0x4F	; 79
    48aa:	94 e2       	ldi	r25, 0x24	; 36
    48ac:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    48b0:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    48b4:	80 93 69 09 	sts	0x0969, r24	; 0x800969 <sg_u8PCMSK0>
    48b8:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    48bc:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <sg_u8PCMSK1>
    48c0:	ff cf       	rjmp	.-2      	; 0x48c0 <__vector_5+0x22>

Disassembly of section .text.__vector_6:

000048c2 <__vector_6>:
	while (1);
}

ISR(PSC_EC_vect, ISR_BLOCK)
{
    48c2:	1f 92       	push	r1
    48c4:	0f 92       	push	r0
    48c6:	0f b6       	in	r0, 0x3f	; 63
    48c8:	0f 92       	push	r0
    48ca:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) PSC_EC_vect;
    48cc:	81 e6       	ldi	r24, 0x61	; 97
    48ce:	94 e2       	ldi	r25, 0x24	; 36
    48d0:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    48d4:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    48d8:	80 93 69 09 	sts	0x0969, r24	; 0x800969 <sg_u8PCMSK0>
    48dc:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    48e0:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <sg_u8PCMSK1>
    48e4:	ff cf       	rjmp	.-2      	; 0x48e4 <__vector_6+0x22>

Disassembly of section .text.__vector_22:

000048e6 <__vector_22>:
	while (1);
}

ISR(PCINT0_vect, ISR_BLOCK)
{
    48e6:	1f 92       	push	r1
    48e8:	0f 92       	push	r0
    48ea:	0f b6       	in	r0, 0x3f	; 63
    48ec:	0f 92       	push	r0
    48ee:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) PCINT0_vect;
    48f0:	83 e7       	ldi	r24, 0x73	; 115
    48f2:	94 e2       	ldi	r25, 0x24	; 36
    48f4:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    48f8:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    48fc:	80 93 69 09 	sts	0x0969, r24	; 0x800969 <sg_u8PCMSK0>
    4900:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4904:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <sg_u8PCMSK1>
    4908:	ff cf       	rjmp	.-2      	; 0x4908 <__vector_22+0x22>

Disassembly of section .text.__vector_9:

0000490a <__vector_9>:
// 	while (1);
// }
*/

ISR(INT2_vect, ISR_BLOCK)
{
    490a:	1f 92       	push	r1
    490c:	0f 92       	push	r0
    490e:	0f b6       	in	r0, 0x3f	; 63
    4910:	0f 92       	push	r0
    4912:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) INT2_vect;
    4914:	85 e8       	ldi	r24, 0x85	; 133
    4916:	94 e2       	ldi	r25, 0x24	; 36
    4918:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    491c:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4920:	80 93 69 09 	sts	0x0969, r24	; 0x800969 <sg_u8PCMSK0>
    4924:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4928:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <sg_u8PCMSK1>
    492c:	ff cf       	rjmp	.-2      	; 0x492c <__vector_9+0x22>

Disassembly of section .text.__vector_11:

0000492e <__vector_11>:
// 	while (1);
// }


ISR(TIMER1_CAPT_vect, ISR_BLOCK)
{
    492e:	1f 92       	push	r1
    4930:	0f 92       	push	r0
    4932:	0f b6       	in	r0, 0x3f	; 63
    4934:	0f 92       	push	r0
    4936:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) TIMER1_CAPT_vect;
    4938:	87 e9       	ldi	r24, 0x97	; 151
    493a:	94 e2       	ldi	r25, 0x24	; 36
    493c:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4940:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4944:	80 93 69 09 	sts	0x0969, r24	; 0x800969 <sg_u8PCMSK0>
    4948:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    494c:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <sg_u8PCMSK1>
    4950:	ff cf       	rjmp	.-2      	; 0x4950 <__vector_11+0x22>

Disassembly of section .text.__vector_13:

00004952 <__vector_13>:
// }



ISR(TIMER1_COMPB_vect, ISR_BLOCK)
{
    4952:	1f 92       	push	r1
    4954:	0f 92       	push	r0
    4956:	0f b6       	in	r0, 0x3f	; 63
    4958:	0f 92       	push	r0
    495a:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) TIMER1_COMPB_vect;
    495c:	89 ea       	ldi	r24, 0xA9	; 169
    495e:	94 e2       	ldi	r25, 0x24	; 36
    4960:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4964:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4968:	80 93 69 09 	sts	0x0969, r24	; 0x800969 <sg_u8PCMSK0>
    496c:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4970:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <sg_u8PCMSK1>
    4974:	ff cf       	rjmp	.-2      	; 0x4974 <__vector_13+0x22>

Disassembly of section .text.__vector_14:

00004976 <__vector_14>:
	while (1);
}


ISR(TIMER1_OVF_vect, ISR_BLOCK)
{
    4976:	1f 92       	push	r1
    4978:	0f 92       	push	r0
    497a:	0f b6       	in	r0, 0x3f	; 63
    497c:	0f 92       	push	r0
    497e:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) TIMER1_OVF_vect;
    4980:	8b eb       	ldi	r24, 0xBB	; 187
    4982:	94 e2       	ldi	r25, 0x24	; 36
    4984:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4988:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    498c:	80 93 69 09 	sts	0x0969, r24	; 0x800969 <sg_u8PCMSK0>
    4990:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4994:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <sg_u8PCMSK1>
    4998:	ff cf       	rjmp	.-2      	; 0x4998 <__vector_14+0x22>

Disassembly of section .text.__vector_17:

0000499a <__vector_17>:
	while (1);
}

ISR(TIMER0_OVF_vect, ISR_BLOCK)
{
    499a:	1f 92       	push	r1
    499c:	0f 92       	push	r0
    499e:	0f b6       	in	r0, 0x3f	; 63
    49a0:	0f 92       	push	r0
    49a2:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) TIMER0_OVF_vect;
    49a4:	8d ec       	ldi	r24, 0xCD	; 205
    49a6:	94 e2       	ldi	r25, 0x24	; 36
    49a8:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    49ac:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    49b0:	80 93 69 09 	sts	0x0969, r24	; 0x800969 <sg_u8PCMSK0>
    49b4:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    49b8:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <sg_u8PCMSK1>
    49bc:	ff cf       	rjmp	.-2      	; 0x49bc <__vector_17+0x22>

Disassembly of section .text.__vector_19:

000049be <__vector_19>:
	while (1);
}

ISR(CAN_TOVF_vect, ISR_BLOCK)
{
    49be:	1f 92       	push	r1
    49c0:	0f 92       	push	r0
    49c2:	0f b6       	in	r0, 0x3f	; 63
    49c4:	0f 92       	push	r0
    49c6:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) CAN_TOVF_vect;
    49c8:	8f ed       	ldi	r24, 0xDF	; 223
    49ca:	94 e2       	ldi	r25, 0x24	; 36
    49cc:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    49d0:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    49d4:	80 93 69 09 	sts	0x0969, r24	; 0x800969 <sg_u8PCMSK0>
    49d8:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    49dc:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <sg_u8PCMSK1>
    49e0:	ff cf       	rjmp	.-2      	; 0x49e0 <__vector_19+0x22>

Disassembly of section .text.__vector_21:

000049e2 <__vector_21>:
	while (1);
}

ISR(LIN_ERR_vect, ISR_BLOCK)
{
    49e2:	1f 92       	push	r1
    49e4:	0f 92       	push	r0
    49e6:	0f b6       	in	r0, 0x3f	; 63
    49e8:	0f 92       	push	r0
    49ea:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) LIN_ERR_vect;
    49ec:	81 ef       	ldi	r24, 0xF1	; 241
    49ee:	94 e2       	ldi	r25, 0x24	; 36
    49f0:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    49f4:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    49f8:	80 93 69 09 	sts	0x0969, r24	; 0x800969 <sg_u8PCMSK0>
    49fc:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4a00:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <sg_u8PCMSK1>
    4a04:	ff cf       	rjmp	.-2      	; 0x4a04 <__vector_21+0x22>

Disassembly of section .text.__vector_25:

00004a06 <__vector_25>:
// 	while (1);
// }


ISR(PCINT3_vect, ISR_BLOCK)
{
    4a06:	1f 92       	push	r1
    4a08:	0f 92       	push	r0
    4a0a:	0f b6       	in	r0, 0x3f	; 63
    4a0c:	0f 92       	push	r0
    4a0e:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) PCINT3_vect;
    4a10:	83 e0       	ldi	r24, 0x03	; 3
    4a12:	95 e2       	ldi	r25, 0x25	; 37
    4a14:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4a18:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4a1c:	80 93 69 09 	sts	0x0969, r24	; 0x800969 <sg_u8PCMSK0>
    4a20:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4a24:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <sg_u8PCMSK1>
    4a28:	ff cf       	rjmp	.-2      	; 0x4a28 <__vector_25+0x22>

Disassembly of section .text.__vector_26:

00004a2a <__vector_26>:
	while (1);
}


ISR(SPI_STC_vect, ISR_BLOCK)
{
    4a2a:	1f 92       	push	r1
    4a2c:	0f 92       	push	r0
    4a2e:	0f b6       	in	r0, 0x3f	; 63
    4a30:	0f 92       	push	r0
    4a32:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) SPI_STC_vect;
    4a34:	85 e1       	ldi	r24, 0x15	; 21
    4a36:	95 e2       	ldi	r25, 0x25	; 37
    4a38:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4a3c:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4a40:	80 93 69 09 	sts	0x0969, r24	; 0x800969 <sg_u8PCMSK0>
    4a44:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4a48:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <sg_u8PCMSK1>
    4a4c:	ff cf       	rjmp	.-2      	; 0x4a4c <__vector_26+0x22>

Disassembly of section .text.__vector_29:

00004a4e <__vector_29>:
	while (1);
}

ISR(EE_READY_vect, ISR_BLOCK)
{
    4a4e:	1f 92       	push	r1
    4a50:	0f 92       	push	r0
    4a52:	0f b6       	in	r0, 0x3f	; 63
    4a54:	0f 92       	push	r0
    4a56:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) EE_READY_vect;
    4a58:	87 e2       	ldi	r24, 0x27	; 39
    4a5a:	95 e2       	ldi	r25, 0x25	; 37
    4a5c:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4a60:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4a64:	80 93 69 09 	sts	0x0969, r24	; 0x800969 <sg_u8PCMSK0>
    4a68:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4a6c:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <sg_u8PCMSK1>
    4a70:	ff cf       	rjmp	.-2      	; 0x4a70 <__vector_29+0x22>

Disassembly of section .text.__vector_30:

00004a72 <__vector_30>:
	while (1);
}

ISR(SPM_READY_vect, ISR_BLOCK)
{
    4a72:	1f 92       	push	r1
    4a74:	0f 92       	push	r0
    4a76:	0f b6       	in	r0, 0x3f	; 63
    4a78:	0f 92       	push	r0
    4a7a:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) SPM_READY_vect;
    4a7c:	89 e3       	ldi	r24, 0x39	; 57
    4a7e:	95 e2       	ldi	r25, 0x25	; 37
    4a80:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4a84:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4a88:	80 93 69 09 	sts	0x0969, r24	; 0x800969 <sg_u8PCMSK0>
    4a8c:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4a90:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <sg_u8PCMSK1>
    4a94:	ff cf       	rjmp	.-2      	; 0x4a94 <__vector_30+0x22>

Disassembly of section .text.CurrentThresholdsGet:

00003502 <CurrentThresholdsGet>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    3502:	0f 93       	push	r16
    3504:	1f 93       	push	r17
    3506:	cf 93       	push	r28
    3508:	df 93       	push	r29
    350a:	8c 01       	movw	r16, r24
    350c:	eb 01       	movw	r28, r22
    350e:	89 2b       	or	r24, r25
    3510:	f9 f0       	breq	.+62     	; 0x3550 <CurrentThresholdsGet+0x4e>
    3512:	87 e0       	ldi	r24, 0x07	; 7
    3514:	90 e0       	ldi	r25, 0x00	; 0
    3516:	0e 94 38 26 	call	0x4c70	; 0x4c70 <EEPROMRead>
    351a:	90 e0       	ldi	r25, 0x00	; 0
    351c:	f8 01       	movw	r30, r16
    351e:	91 83       	std	Z+1, r25	; 0x01
    3520:	80 83       	st	Z, r24
    3522:	88 e0       	ldi	r24, 0x08	; 8
    3524:	90 e0       	ldi	r25, 0x00	; 0
    3526:	0e 94 38 26 	call	0x4c70	; 0x4c70 <EEPROMRead>
    352a:	90 e0       	ldi	r25, 0x00	; 0
    352c:	98 2f       	mov	r25, r24
    352e:	88 27       	eor	r24, r24
    3530:	f8 01       	movw	r30, r16
    3532:	20 81       	ld	r18, Z
    3534:	31 81       	ldd	r19, Z+1	; 0x01
    3536:	82 2b       	or	r24, r18
    3538:	93 2b       	or	r25, r19
    353a:	91 83       	std	Z+1, r25	; 0x01
    353c:	80 83       	st	Z, r24
    353e:	01 97       	sbiw	r24, 0x01	; 1
    3540:	8e 3f       	cpi	r24, 0xFE	; 254
    3542:	9f 4f       	sbci	r25, 0xFF	; 255
    3544:	28 f0       	brcs	.+10     	; 0x3550 <CurrentThresholdsGet+0x4e>
    3546:	8c ec       	ldi	r24, 0xCC	; 204
    3548:	97 e7       	ldi	r25, 0x77	; 119
    354a:	f8 01       	movw	r30, r16
    354c:	91 83       	std	Z+1, r25	; 0x01
    354e:	80 83       	st	Z, r24
    3550:	20 97       	sbiw	r28, 0x00	; 0
    3552:	e1 f0       	breq	.+56     	; 0x358c <CurrentThresholdsGet+0x8a>
    3554:	85 e0       	ldi	r24, 0x05	; 5
    3556:	90 e0       	ldi	r25, 0x00	; 0
    3558:	0e 94 38 26 	call	0x4c70	; 0x4c70 <EEPROMRead>
    355c:	90 e0       	ldi	r25, 0x00	; 0
    355e:	99 83       	std	Y+1, r25	; 0x01
    3560:	88 83       	st	Y, r24
    3562:	86 e0       	ldi	r24, 0x06	; 6
    3564:	90 e0       	ldi	r25, 0x00	; 0
    3566:	0e 94 38 26 	call	0x4c70	; 0x4c70 <EEPROMRead>
    356a:	90 e0       	ldi	r25, 0x00	; 0
    356c:	98 2f       	mov	r25, r24
    356e:	88 27       	eor	r24, r24
    3570:	28 81       	ld	r18, Y
    3572:	39 81       	ldd	r19, Y+1	; 0x01
    3574:	82 2b       	or	r24, r18
    3576:	93 2b       	or	r25, r19
    3578:	99 83       	std	Y+1, r25	; 0x01
    357a:	88 83       	st	Y, r24
    357c:	01 97       	sbiw	r24, 0x01	; 1
    357e:	8e 3f       	cpi	r24, 0xFE	; 254
    3580:	9f 4f       	sbci	r25, 0xFF	; 255
    3582:	20 f0       	brcs	.+8      	; 0x358c <CurrentThresholdsGet+0x8a>
    3584:	84 ef       	ldi	r24, 0xF4	; 244
    3586:	91 e8       	ldi	r25, 0x81	; 129
    3588:	99 83       	std	Y+1, r25	; 0x01
    358a:	88 83       	st	Y, r24
    358c:	df 91       	pop	r29
    358e:	cf 91       	pop	r28
    3590:	1f 91       	pop	r17
    3592:	0f 91       	pop	r16
    3594:	08 95       	ret

Disassembly of section .text.CANReceiveCallback:

000010d8 <CANReceiveCallback>:
    10d8:	cf 92       	push	r12
    10da:	df 92       	push	r13
    10dc:	ef 92       	push	r14
    10de:	ff 92       	push	r15
    10e0:	cf 93       	push	r28
    10e2:	fb 01       	movw	r30, r22
    10e4:	90 91 21 03 	lds	r25, 0x0321	; 0x800321 <sg_bModuleRegistered>
    10e8:	10 92 70 09 	sts	0x0970, r1	; 0x800970 <sg_u8TicksSinceLastPackControllerMessage>
    10ec:	82 31       	cpi	r24, 0x12	; 18
    10ee:	29 f4       	brne	.+10     	; 0x10fa <CANReceiveCallback+0x22>
    10f0:	80 81       	ld	r24, Z
    10f2:	8f 70       	andi	r24, 0x0F	; 15
    10f4:	0e 94 f8 25 	call	0x4bf0	; 0x4bf0 <ModuleControllerStateSetMax>
    10f8:	32 c1       	rjmp	.+612    	; 0x135e <__stack+0x25f>
    10fa:	8f 30       	cpi	r24, 0x0F	; 15
    10fc:	a9 f4       	brne	.+42     	; 0x1128 <__stack+0x29>
    10fe:	8a ed       	ldi	r24, 0xDA	; 218
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	a0 e0       	ldi	r26, 0x00	; 0
    1104:	af 93       	push	r26
    1106:	9f 93       	push	r25
    1108:	8f 93       	push	r24
    110a:	0e 94 85 26 	call	0x4d0a	; 0x4d0a <DebugOut>
    110e:	10 92 27 03 	sts	0x0327, r1	; 0x800327 <sg_u8ModuleRegistrationID>
    1112:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <sg_bModuleRegistered>
    1116:	10 92 74 09 	sts	0x0974, r1	; 0x800974 <sg_bIgnoreStatusRequests>
    111a:	80 e0       	ldi	r24, 0x00	; 0
    111c:	0e 94 b2 26 	call	0x4d64	; 0x4d64 <ModuleControllerStateSet>
    1120:	0f 90       	pop	r0
    1122:	0f 90       	pop	r0
    1124:	0f 90       	pop	r0
    1126:	1b c1       	rjmp	.+566    	; 0x135e <__stack+0x25f>
    1128:	80 31       	cpi	r24, 0x10	; 16
    112a:	21 f4       	brne	.+8      	; 0x1134 <__stack+0x35>
    112c:	80 e0       	ldi	r24, 0x00	; 0
    112e:	0e 94 b2 26 	call	0x4d64	; 0x4d64 <ModuleControllerStateSet>
    1132:	15 c1       	rjmp	.+554    	; 0x135e <__stack+0x25f>
    1134:	81 31       	cpi	r24, 0x11	; 17
    1136:	59 f4       	brne	.+22     	; 0x114e <__stack+0x4f>
    1138:	20 81       	ld	r18, Z
    113a:	31 81       	ldd	r19, Z+1	; 0x01
    113c:	42 81       	ldd	r20, Z+2	; 0x02
    113e:	53 81       	ldd	r21, Z+3	; 0x03
    1140:	64 81       	ldd	r22, Z+4	; 0x04
    1142:	75 81       	ldd	r23, Z+5	; 0x05
    1144:	86 81       	ldd	r24, Z+6	; 0x06
    1146:	97 81       	ldd	r25, Z+7	; 0x07
    1148:	0e 94 5c 17 	call	0x2eb8	; 0x2eb8 <RTCSetTime>
    114c:	08 c1       	rjmp	.+528    	; 0x135e <__stack+0x25f>
    114e:	8d 30       	cpi	r24, 0x0D	; 13
    1150:	09 f0       	breq	.+2      	; 0x1154 <__stack+0x55>
    1152:	4f c0       	rjmp	.+158    	; 0x11f2 <__stack+0xf3>
    1154:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <sg_bModuleRegistered>
    1158:	81 11       	cpse	r24, r1
    115a:	2f c0       	rjmp	.+94     	; 0x11ba <__stack+0xbb>
    115c:	80 91 76 09 	lds	r24, 0x0976	; 0x800976 <sg_bAnnouncementPending>
    1160:	81 11       	cpse	r24, r1
    1162:	2b c0       	rjmp	.+86     	; 0x11ba <__stack+0xbb>
    1164:	c0 90 1e 01 	lds	r12, 0x011E	; 0x80011e <sg_sFrame+0xe>
    1168:	d0 90 1f 01 	lds	r13, 0x011F	; 0x80011f <sg_sFrame+0xf>
    116c:	e0 90 20 01 	lds	r14, 0x0120	; 0x800120 <sg_sFrame+0x10>
    1170:	f0 90 21 01 	lds	r15, 0x0121	; 0x800121 <sg_sFrame+0x11>
    1174:	1f 92       	push	r1
    1176:	cf 92       	push	r12
    1178:	85 e0       	ldi	r24, 0x05	; 5
    117a:	91 e0       	ldi	r25, 0x01	; 1
    117c:	a0 e0       	ldi	r26, 0x00	; 0
    117e:	af 93       	push	r26
    1180:	9f 93       	push	r25
    1182:	8f 93       	push	r24
    1184:	0e 94 85 26 	call	0x4d0a	; 0x4d0a <DebugOut>
    1188:	8d ec       	ldi	r24, 0xCD	; 205
    118a:	c8 9e       	mul	r12, r24
    118c:	c1 2c       	mov	r12, r1
    118e:	11 24       	eor	r1, r1
    1190:	c6 94       	lsr	r12
    1192:	c6 94       	lsr	r12
    1194:	c6 94       	lsr	r12
    1196:	c0 92 75 09 	sts	0x0975, r12	; 0x800975 <sg_u8AnnouncementDelayTicks>
    119a:	80 91 75 09 	lds	r24, 0x0975	; 0x800975 <sg_u8AnnouncementDelayTicks>
    119e:	0f 90       	pop	r0
    11a0:	0f 90       	pop	r0
    11a2:	0f 90       	pop	r0
    11a4:	0f 90       	pop	r0
    11a6:	0f 90       	pop	r0
    11a8:	81 11       	cpse	r24, r1
    11aa:	03 c0       	rjmp	.+6      	; 0x11b2 <__stack+0xb3>
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	80 93 75 09 	sts	0x0975, r24	; 0x800975 <sg_u8AnnouncementDelayTicks>
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	80 93 76 09 	sts	0x0976, r24	; 0x800976 <sg_bAnnouncementPending>
    11b8:	d2 c0       	rjmp	.+420    	; 0x135e <__stack+0x25f>
    11ba:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <sg_bModuleRegistered>
    11be:	88 23       	and	r24, r24
    11c0:	61 f0       	breq	.+24     	; 0x11da <__stack+0xdb>
    11c2:	88 e4       	ldi	r24, 0x48	; 72
    11c4:	91 e0       	ldi	r25, 0x01	; 1
    11c6:	a0 e0       	ldi	r26, 0x00	; 0
    11c8:	af 93       	push	r26
    11ca:	9f 93       	push	r25
    11cc:	8f 93       	push	r24
    11ce:	0e 94 85 26 	call	0x4d0a	; 0x4d0a <DebugOut>
    11d2:	0f 90       	pop	r0
    11d4:	0f 90       	pop	r0
    11d6:	0f 90       	pop	r0
    11d8:	c2 c0       	rjmp	.+388    	; 0x135e <__stack+0x25f>
    11da:	86 e7       	ldi	r24, 0x76	; 118
    11dc:	91 e0       	ldi	r25, 0x01	; 1
    11de:	a0 e0       	ldi	r26, 0x00	; 0
    11e0:	af 93       	push	r26
    11e2:	9f 93       	push	r25
    11e4:	8f 93       	push	r24
    11e6:	0e 94 85 26 	call	0x4d0a	; 0x4d0a <DebugOut>
    11ea:	0f 90       	pop	r0
    11ec:	0f 90       	pop	r0
    11ee:	0f 90       	pop	r0
    11f0:	b6 c0       	rjmp	.+364    	; 0x135e <__stack+0x25f>
    11f2:	89 30       	cpi	r24, 0x09	; 9
    11f4:	09 f0       	breq	.+2      	; 0x11f8 <__stack+0xf9>
    11f6:	3f c0       	rjmp	.+126    	; 0x1276 <__stack+0x177>
    11f8:	48 30       	cpi	r20, 0x08	; 8
    11fa:	09 f0       	breq	.+2      	; 0x11fe <__stack+0xff>
    11fc:	b0 c0       	rjmp	.+352    	; 0x135e <__stack+0x25f>
    11fe:	f0 80       	ld	r15, Z
    1200:	82 81       	ldd	r24, Z+2	; 0x02
    1202:	82 30       	cpi	r24, 0x02	; 2
    1204:	09 f0       	breq	.+2      	; 0x1208 <__stack+0x109>
    1206:	ab c0       	rjmp	.+342    	; 0x135e <__stack+0x25f>
    1208:	83 81       	ldd	r24, Z+3	; 0x03
    120a:	83 30       	cpi	r24, 0x03	; 3
    120c:	09 f0       	breq	.+2      	; 0x1210 <__stack+0x111>
    120e:	a7 c0       	rjmp	.+334    	; 0x135e <__stack+0x25f>
    1210:	40 91 1e 01 	lds	r20, 0x011E	; 0x80011e <sg_sFrame+0xe>
    1214:	50 91 1f 01 	lds	r21, 0x011F	; 0x80011f <sg_sFrame+0xf>
    1218:	60 91 20 01 	lds	r22, 0x0120	; 0x800120 <sg_sFrame+0x10>
    121c:	70 91 21 01 	lds	r23, 0x0121	; 0x800121 <sg_sFrame+0x11>
    1220:	84 81       	ldd	r24, Z+4	; 0x04
    1222:	95 81       	ldd	r25, Z+5	; 0x05
    1224:	a6 81       	ldd	r26, Z+6	; 0x06
    1226:	b7 81       	ldd	r27, Z+7	; 0x07
    1228:	48 17       	cp	r20, r24
    122a:	59 07       	cpc	r21, r25
    122c:	6a 07       	cpc	r22, r26
    122e:	7b 07       	cpc	r23, r27
    1230:	09 f0       	breq	.+2      	; 0x1234 <__stack+0x135>
    1232:	95 c0       	rjmp	.+298    	; 0x135e <__stack+0x25f>
    1234:	10 92 70 09 	sts	0x0970, r1	; 0x800970 <sg_u8TicksSinceLastPackControllerMessage>
    1238:	f0 92 27 03 	sts	0x0327, r15	; 0x800327 <sg_u8ModuleRegistrationID>
    123c:	0e 94 65 26 	call	0x4cca	; 0x4cca <SendModuleControllerStatus>
    1240:	c1 e0       	ldi	r28, 0x01	; 1
    1242:	c0 93 1c 03 	sts	0x031C, r28	; 0x80031c <sg_bSendHardwareDetail>
    1246:	c0 93 21 03 	sts	0x0321, r28	; 0x800321 <sg_bModuleRegistered>
    124a:	1f 92       	push	r1
    124c:	ff 92       	push	r15
    124e:	8e e9       	ldi	r24, 0x9E	; 158
    1250:	91 e0       	ldi	r25, 0x01	; 1
    1252:	a0 e0       	ldi	r26, 0x00	; 0
    1254:	af 93       	push	r26
    1256:	9f 93       	push	r25
    1258:	8f 93       	push	r24
    125a:	0e 94 85 26 	call	0x4d0a	; 0x4d0a <DebugOut>
    125e:	10 92 76 09 	sts	0x0976, r1	; 0x800976 <sg_bAnnouncementPending>
    1262:	10 92 75 09 	sts	0x0975, r1	; 0x800975 <sg_u8AnnouncementDelayTicks>
    1266:	c0 93 20 03 	sts	0x0320, r28	; 0x800320 <sg_bSendTimeRequest>
    126a:	0f 90       	pop	r0
    126c:	0f 90       	pop	r0
    126e:	0f 90       	pop	r0
    1270:	0f 90       	pop	r0
    1272:	0f 90       	pop	r0
    1274:	74 c0       	rjmp	.+232    	; 0x135e <__stack+0x25f>
    1276:	44 23       	and	r20, r20
    1278:	09 f4       	brne	.+2      	; 0x127c <__stack+0x17d>
    127a:	71 c0       	rjmp	.+226    	; 0x135e <__stack+0x25f>
    127c:	20 81       	ld	r18, Z
    127e:	91 11       	cpse	r25, r1
    1280:	08 c0       	rjmp	.+16     	; 0x1292 <__stack+0x193>
    1282:	8a 30       	cpi	r24, 0x0A	; 10
    1284:	09 f0       	breq	.+2      	; 0x1288 <__stack+0x189>
    1286:	6b c0       	rjmp	.+214    	; 0x135e <__stack+0x25f>
    1288:	90 91 21 03 	lds	r25, 0x0321	; 0x800321 <sg_bModuleRegistered>
    128c:	99 23       	and	r25, r25
    128e:	09 f4       	brne	.+2      	; 0x1292 <__stack+0x193>
    1290:	66 c0       	rjmp	.+204    	; 0x135e <__stack+0x25f>
    1292:	90 91 27 03 	lds	r25, 0x0327	; 0x800327 <sg_u8ModuleRegistrationID>
    1296:	29 13       	cpse	r18, r25
    1298:	62 c0       	rjmp	.+196    	; 0x135e <__stack+0x25f>
    129a:	8a 30       	cpi	r24, 0x0A	; 10
    129c:	a9 f4       	brne	.+42     	; 0x12c8 <__stack+0x1c9>
    129e:	41 30       	cpi	r20, 0x01	; 1
    12a0:	09 f0       	breq	.+2      	; 0x12a4 <__stack+0x1a5>
    12a2:	5d c0       	rjmp	.+186    	; 0x135e <__stack+0x25f>
    12a4:	80 91 74 09 	lds	r24, 0x0974	; 0x800974 <sg_bIgnoreStatusRequests>
    12a8:	81 11       	cpse	r24, r1
    12aa:	59 c0       	rjmp	.+178    	; 0x135e <__stack+0x25f>
    12ac:	89 ed       	ldi	r24, 0xD9	; 217
    12ae:	91 e0       	ldi	r25, 0x01	; 1
    12b0:	a0 e0       	ldi	r26, 0x00	; 0
    12b2:	af 93       	push	r26
    12b4:	9f 93       	push	r25
    12b6:	8f 93       	push	r24
    12b8:	0e 94 85 26 	call	0x4d0a	; 0x4d0a <DebugOut>
    12bc:	0e 94 65 26 	call	0x4cca	; 0x4cca <SendModuleControllerStatus>
    12c0:	0f 90       	pop	r0
    12c2:	0f 90       	pop	r0
    12c4:	0f 90       	pop	r0
    12c6:	4b c0       	rjmp	.+150    	; 0x135e <__stack+0x25f>
    12c8:	8b 30       	cpi	r24, 0x0B	; 11
    12ca:	f1 f4       	brne	.+60     	; 0x1308 <__stack+0x209>
    12cc:	43 30       	cpi	r20, 0x03	; 3
    12ce:	09 f0       	breq	.+2      	; 0x12d2 <__stack+0x1d3>
    12d0:	46 c0       	rjmp	.+140    	; 0x135e <__stack+0x25f>
    12d2:	80 91 1d 03 	lds	r24, 0x031D	; 0x80031d <sg_bSendCellStatus>
    12d6:	81 11       	cpse	r24, r1
    12d8:	42 c0       	rjmp	.+132    	; 0x135e <__stack+0x25f>
    12da:	81 81       	ldd	r24, Z+1	; 0x01
    12dc:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <sg_sFrame+0x15>
    12e0:	89 17       	cp	r24, r25
    12e2:	e8 f5       	brcc	.+122    	; 0x135e <__stack+0x25f>
    12e4:	80 93 23 03 	sts	0x0323, r24	; 0x800323 <sg_u8CellStatus>
    12e8:	90 91 23 03 	lds	r25, 0x0323	; 0x800323 <sg_u8CellStatus>
    12ec:	90 93 24 03 	sts	0x0324, r25	; 0x800324 <sg_u8CellStatusTarget>
    12f0:	8f 3f       	cpi	r24, 0xFF	; 255
    12f2:	31 f4       	brne	.+12     	; 0x1300 <__stack+0x201>
    12f4:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <sg_sFrame+0x15>
    12f8:	80 93 24 03 	sts	0x0324, r24	; 0x800324 <sg_u8CellStatusTarget>
    12fc:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <sg_u8CellStatus>
    1300:	81 e0       	ldi	r24, 0x01	; 1
    1302:	80 93 1d 03 	sts	0x031D, r24	; 0x80031d <sg_bSendCellStatus>
    1306:	2b c0       	rjmp	.+86     	; 0x135e <__stack+0x25f>
    1308:	8c 30       	cpi	r24, 0x0C	; 12
    130a:	49 f4       	brne	.+18     	; 0x131e <__stack+0x21f>
    130c:	10 92 70 09 	sts	0x0970, r1	; 0x800970 <sg_u8TicksSinceLastPackControllerMessage>
    1310:	42 30       	cpi	r20, 0x02	; 2
    1312:	29 f5       	brne	.+74     	; 0x135e <__stack+0x25f>
    1314:	81 81       	ldd	r24, Z+1	; 0x01
    1316:	8f 70       	andi	r24, 0x0F	; 15
    1318:	0e 94 b2 26 	call	0x4d64	; 0x4d64 <ModuleControllerStateSet>
    131c:	20 c0       	rjmp	.+64     	; 0x135e <__stack+0x25f>
    131e:	85 30       	cpi	r24, 0x05	; 5
    1320:	21 f4       	brne	.+8      	; 0x132a <__stack+0x22b>
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	80 93 1c 03 	sts	0x031C, r24	; 0x80031c <sg_bSendHardwareDetail>
    1328:	1a c0       	rjmp	.+52     	; 0x135e <__stack+0x25f>
    132a:	8e 30       	cpi	r24, 0x0E	; 14
    132c:	c1 f4       	brne	.+48     	; 0x135e <__stack+0x25f>
    132e:	1f 92       	push	r1
    1330:	2f 93       	push	r18
    1332:	8e ef       	ldi	r24, 0xFE	; 254
    1334:	91 e0       	ldi	r25, 0x01	; 1
    1336:	a0 e0       	ldi	r26, 0x00	; 0
    1338:	af 93       	push	r26
    133a:	9f 93       	push	r25
    133c:	8f 93       	push	r24
    133e:	0e 94 85 26 	call	0x4d0a	; 0x4d0a <DebugOut>
    1342:	10 92 27 03 	sts	0x0327, r1	; 0x800327 <sg_u8ModuleRegistrationID>
    1346:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <sg_bModuleRegistered>
    134a:	10 92 74 09 	sts	0x0974, r1	; 0x800974 <sg_bIgnoreStatusRequests>
    134e:	80 e0       	ldi	r24, 0x00	; 0
    1350:	0e 94 b2 26 	call	0x4d64	; 0x4d64 <ModuleControllerStateSet>
    1354:	0f 90       	pop	r0
    1356:	0f 90       	pop	r0
    1358:	0f 90       	pop	r0
    135a:	0f 90       	pop	r0
    135c:	0f 90       	pop	r0
    135e:	cf 91       	pop	r28
    1360:	ff 90       	pop	r15
    1362:	ef 90       	pop	r14
    1364:	df 90       	pop	r13
    1366:	cf 90       	pop	r12
    1368:	08 95       	ret

Disassembly of section .text.ControllerStatusMessagesSend:

00000810 <ControllerStatusMessagesSend>:
 810:	0f 93       	push	r16
 812:	1f 93       	push	r17
 814:	cf 93       	push	r28
 816:	df 93       	push	r29
 818:	ec 01       	movw	r28, r24
 81a:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <sg_bSendTimeRequest>
 81e:	88 23       	and	r24, r24
 820:	69 f0       	breq	.+26     	; 0x83c <ControllerStatusMessagesSend+0x2c>
 822:	88 e0       	ldi	r24, 0x08	; 8
 824:	de 01       	movw	r26, r28
 826:	1d 92       	st	X+, r1
 828:	8a 95       	dec	r24
 82a:	e9 f7       	brne	.-6      	; 0x826 <ControllerStatusMessagesSend+0x16>
 82c:	48 e0       	ldi	r20, 0x08	; 8
 82e:	be 01       	movw	r22, r28
 830:	88 e0       	ldi	r24, 0x08	; 8
 832:	0e 94 ed 25 	call	0x4bda	; 0x4bda <CANSendMessage>
 836:	81 11       	cpse	r24, r1
 838:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <sg_bSendTimeRequest>
 83c:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <sg_bSendModuleControllerStatus>
 840:	88 23       	and	r24, r24
 842:	09 f4       	brne	.+2      	; 0x846 <ControllerStatusMessagesSend+0x36>
 844:	e8 c0       	rjmp	.+464    	; 0xa16 <ControllerStatusMessagesSend+0x206>
 846:	80 91 6c 09 	lds	r24, 0x096C	; 0x80096c <sg_u8ControllerStatusMsgCount>
 84a:	81 11       	cpse	r24, r1
 84c:	7b c0       	rjmp	.+246    	; 0x944 <ControllerStatusMessagesSend+0x134>
 84e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
 852:	8f 70       	andi	r24, 0x0F	; 15
 854:	88 83       	st	Y, r24
 856:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <sg_u8SOC>
 85a:	89 83       	std	Y+1, r24	; 0x01
 85c:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <sg_u8SOH>
 860:	8a 83       	std	Y+2, r24	; 0x02
 862:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <sg_sFrame+0x15>
 866:	8b 83       	std	Y+3, r24	; 0x03
 868:	84 e0       	ldi	r24, 0x04	; 4
 86a:	fe 01       	movw	r30, r28
 86c:	34 96       	adiw	r30, 0x04	; 4
 86e:	df 01       	movw	r26, r30
 870:	1d 92       	st	X+, r1
 872:	8a 95       	dec	r24
 874:	e9 f7       	brne	.-6      	; 0x870 <ControllerStatusMessagesSend+0x60>
 876:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <sg_sFrame+0x48>
 87a:	88 23       	and	r24, r24
 87c:	79 f0       	breq	.+30     	; 0x89c <ControllerStatusMessagesSend+0x8c>
 87e:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <sg_sFrame+0x4b>
 882:	88 23       	and	r24, r24
 884:	71 f0       	breq	.+28     	; 0x8a2 <ControllerStatusMessagesSend+0x92>
 886:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
 88a:	83 30       	cpi	r24, 0x03	; 3
 88c:	69 f4       	brne	.+26     	; 0x8a8 <ControllerStatusMessagesSend+0x98>
 88e:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <ModuleCurrentConvertReadings>
 892:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <sg_sFrame+0x2f>
 896:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <sg_sFrame+0x30>
 89a:	08 c0       	rjmp	.+16     	; 0x8ac <ControllerStatusMessagesSend+0x9c>
 89c:	80 e0       	ldi	r24, 0x00	; 0
 89e:	90 e8       	ldi	r25, 0x80	; 128
 8a0:	05 c0       	rjmp	.+10     	; 0x8ac <ControllerStatusMessagesSend+0x9c>
 8a2:	80 e0       	ldi	r24, 0x00	; 0
 8a4:	90 e8       	ldi	r25, 0x80	; 128
 8a6:	02 c0       	rjmp	.+4      	; 0x8ac <ControllerStatusMessagesSend+0x9c>
 8a8:	80 e0       	ldi	r24, 0x00	; 0
 8aa:	90 e8       	ldi	r25, 0x80	; 128
 8ac:	8c 83       	std	Y+4, r24	; 0x04
 8ae:	9d 83       	std	Y+5, r25	; 0x05
 8b0:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <sg_sFrame+0x45>
 8b4:	88 23       	and	r24, r24
 8b6:	79 f0       	breq	.+30     	; 0x8d6 <ControllerStatusMessagesSend+0xc6>
 8b8:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <sg_sFrame+0x46>
 8bc:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <sg_sFrame+0x47>
 8c0:	4f ef       	ldi	r20, 0xFF	; 255
 8c2:	53 e0       	ldi	r21, 0x03	; 3
 8c4:	60 e0       	ldi	r22, 0x00	; 0
 8c6:	70 e0       	ldi	r23, 0x00	; 0
 8c8:	9a 01       	movw	r18, r20
 8ca:	ab 01       	movw	r20, r22
 8cc:	28 1b       	sub	r18, r24
 8ce:	39 0b       	sbc	r19, r25
 8d0:	41 09       	sbc	r20, r1
 8d2:	51 09       	sbc	r21, r1
 8d4:	03 c0       	rjmp	.+6      	; 0x8dc <ControllerStatusMessagesSend+0xcc>
 8d6:	20 e0       	ldi	r18, 0x00	; 0
 8d8:	30 e0       	ldi	r19, 0x00	; 0
 8da:	a9 01       	movw	r20, r18
 8dc:	e0 e1       	ldi	r30, 0x10	; 16
 8de:	f1 e0       	ldi	r31, 0x01	; 1
 8e0:	a5 a1       	ldd	r26, Z+37	; 0x25
 8e2:	b6 a1       	ldd	r27, Z+38	; 0x26
 8e4:	0e 94 75 26 	call	0x4cea	; 0x4cea <__mulshisi3>
 8e8:	dc 01       	movw	r26, r24
 8ea:	cb 01       	movw	r24, r22
 8ec:	68 94       	set
 8ee:	16 f8       	bld	r1, 6
 8f0:	b6 95       	lsr	r27
 8f2:	a7 95       	ror	r26
 8f4:	97 95       	ror	r25
 8f6:	87 95       	ror	r24
 8f8:	16 94       	lsr	r1
 8fa:	d1 f7       	brne	.-12     	; 0x8f0 <ControllerStatusMessagesSend+0xe0>
 8fc:	05 8d       	ldd	r16, Z+29	; 0x1d
 8fe:	16 8d       	ldd	r17, Z+30	; 0x1e
 900:	27 8d       	ldd	r18, Z+31	; 0x1f
 902:	30 a1       	ldd	r19, Z+32	; 0x20
 904:	bc 01       	movw	r22, r24
 906:	cd 01       	movw	r24, r26
 908:	60 0f       	add	r22, r16
 90a:	71 1f       	adc	r23, r17
 90c:	82 1f       	adc	r24, r18
 90e:	93 1f       	adc	r25, r19
 910:	2f e0       	ldi	r18, 0x0F	; 15
 912:	30 e0       	ldi	r19, 0x00	; 0
 914:	40 e0       	ldi	r20, 0x00	; 0
 916:	50 e0       	ldi	r21, 0x00	; 0
 918:	0e 94 8b 21 	call	0x4316	; 0x4316 <__udivmodsi4>
 91c:	20 93 51 01 	sts	0x0151, r18	; 0x800151 <sg_sFrame+0x41>
 920:	30 93 52 01 	sts	0x0152, r19	; 0x800152 <sg_sFrame+0x42>
 924:	40 93 53 01 	sts	0x0153, r20	; 0x800153 <sg_sFrame+0x43>
 928:	50 93 54 01 	sts	0x0154, r21	; 0x800154 <sg_sFrame+0x44>
 92c:	2e 83       	std	Y+6, r18	; 0x06
 92e:	3f 83       	std	Y+7, r19	; 0x07
 930:	48 e0       	ldi	r20, 0x08	; 8
 932:	be 01       	movw	r22, r28
 934:	81 e0       	ldi	r24, 0x01	; 1
 936:	0e 94 ed 25 	call	0x4bda	; 0x4bda <CANSendMessage>
 93a:	88 23       	and	r24, r24
 93c:	09 f4       	brne	.+2      	; 0x940 <ControllerStatusMessagesSend+0x130>
 93e:	52 c0       	rjmp	.+164    	; 0x9e4 <ControllerStatusMessagesSend+0x1d4>
 940:	81 e0       	ldi	r24, 0x01	; 1
 942:	57 c0       	rjmp	.+174    	; 0x9f2 <ControllerStatusMessagesSend+0x1e2>
 944:	81 30       	cpi	r24, 0x01	; 1
 946:	69 f5       	brne	.+90     	; 0x9a2 <ControllerStatusMessagesSend+0x192>
 948:	e0 e1       	ldi	r30, 0x10	; 16
 94a:	f1 e0       	ldi	r31, 0x01	; 1
 94c:	81 ad       	ldd	r24, Z+57	; 0x39
 94e:	92 ad       	ldd	r25, Z+58	; 0x3a
 950:	88 83       	st	Y, r24
 952:	81 ad       	ldd	r24, Z+57	; 0x39
 954:	92 ad       	ldd	r25, Z+58	; 0x3a
 956:	99 83       	std	Y+1, r25	; 0x01
 958:	87 a9       	ldd	r24, Z+55	; 0x37
 95a:	90 ad       	ldd	r25, Z+56	; 0x38
 95c:	8a 83       	std	Y+2, r24	; 0x02
 95e:	87 a9       	ldd	r24, Z+55	; 0x37
 960:	90 ad       	ldd	r25, Z+56	; 0x38
 962:	9b 83       	std	Y+3, r25	; 0x03
 964:	83 ad       	ldd	r24, Z+59	; 0x3b
 966:	94 ad       	ldd	r25, Z+60	; 0x3c
 968:	8c 83       	std	Y+4, r24	; 0x04
 96a:	83 ad       	ldd	r24, Z+59	; 0x3b
 96c:	94 ad       	ldd	r25, Z+60	; 0x3c
 96e:	9d 83       	std	Y+5, r25	; 0x05
 970:	60 91 4d 01 	lds	r22, 0x014D	; 0x80014d <sg_sFrame+0x3d>
 974:	70 91 4e 01 	lds	r23, 0x014E	; 0x80014e <sg_sFrame+0x3e>
 978:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <sg_sFrame+0x3f>
 97c:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <sg_sFrame+0x40>
 980:	2f e0       	ldi	r18, 0x0F	; 15
 982:	30 e0       	ldi	r19, 0x00	; 0
 984:	40 e0       	ldi	r20, 0x00	; 0
 986:	50 e0       	ldi	r21, 0x00	; 0
 988:	0e 94 8b 21 	call	0x4316	; 0x4316 <__udivmodsi4>
 98c:	2e 83       	std	Y+6, r18	; 0x06
 98e:	3f 83       	std	Y+7, r19	; 0x07
 990:	48 e0       	ldi	r20, 0x08	; 8
 992:	be 01       	movw	r22, r28
 994:	82 e0       	ldi	r24, 0x02	; 2
 996:	0e 94 ed 25 	call	0x4bda	; 0x4bda <CANSendMessage>
 99a:	88 23       	and	r24, r24
 99c:	29 f1       	breq	.+74     	; 0x9e8 <ControllerStatusMessagesSend+0x1d8>
 99e:	81 e0       	ldi	r24, 0x01	; 1
 9a0:	28 c0       	rjmp	.+80     	; 0x9f2 <ControllerStatusMessagesSend+0x1e2>
 9a2:	82 30       	cpi	r24, 0x02	; 2
 9a4:	19 f5       	brne	.+70     	; 0x9ec <ControllerStatusMessagesSend+0x1dc>
 9a6:	e0 e1       	ldi	r30, 0x10	; 16
 9a8:	f1 e0       	ldi	r31, 0x01	; 1
 9aa:	83 a9       	ldd	r24, Z+51	; 0x33
 9ac:	94 a9       	ldd	r25, Z+52	; 0x34
 9ae:	88 83       	st	Y, r24
 9b0:	83 a9       	ldd	r24, Z+51	; 0x33
 9b2:	94 a9       	ldd	r25, Z+52	; 0x34
 9b4:	99 83       	std	Y+1, r25	; 0x01
 9b6:	81 a9       	ldd	r24, Z+49	; 0x31
 9b8:	92 a9       	ldd	r25, Z+50	; 0x32
 9ba:	8a 83       	std	Y+2, r24	; 0x02
 9bc:	81 a9       	ldd	r24, Z+49	; 0x31
 9be:	92 a9       	ldd	r25, Z+50	; 0x32
 9c0:	9b 83       	std	Y+3, r25	; 0x03
 9c2:	85 a9       	ldd	r24, Z+53	; 0x35
 9c4:	96 a9       	ldd	r25, Z+54	; 0x36
 9c6:	8c 83       	std	Y+4, r24	; 0x04
 9c8:	85 a9       	ldd	r24, Z+53	; 0x35
 9ca:	96 a9       	ldd	r25, Z+54	; 0x36
 9cc:	9d 83       	std	Y+5, r25	; 0x05
 9ce:	1e 82       	std	Y+6, r1	; 0x06
 9d0:	1f 82       	std	Y+7, r1	; 0x07
 9d2:	48 e0       	ldi	r20, 0x08	; 8
 9d4:	be 01       	movw	r22, r28
 9d6:	83 e0       	ldi	r24, 0x03	; 3
 9d8:	0e 94 ed 25 	call	0x4bda	; 0x4bda <CANSendMessage>
 9dc:	88 23       	and	r24, r24
 9de:	41 f0       	breq	.+16     	; 0x9f0 <ControllerStatusMessagesSend+0x1e0>
 9e0:	81 e0       	ldi	r24, 0x01	; 1
 9e2:	07 c0       	rjmp	.+14     	; 0x9f2 <ControllerStatusMessagesSend+0x1e2>
 9e4:	80 e0       	ldi	r24, 0x00	; 0
 9e6:	05 c0       	rjmp	.+10     	; 0x9f2 <ControllerStatusMessagesSend+0x1e2>
 9e8:	80 e0       	ldi	r24, 0x00	; 0
 9ea:	03 c0       	rjmp	.+6      	; 0x9f2 <ControllerStatusMessagesSend+0x1e2>
 9ec:	81 e0       	ldi	r24, 0x01	; 1
 9ee:	01 c0       	rjmp	.+2      	; 0x9f2 <ControllerStatusMessagesSend+0x1e2>
 9f0:	80 e0       	ldi	r24, 0x00	; 0
 9f2:	88 23       	and	r24, r24
 9f4:	81 f0       	breq	.+32     	; 0xa16 <ControllerStatusMessagesSend+0x206>
 9f6:	80 91 6c 09 	lds	r24, 0x096C	; 0x80096c <sg_u8ControllerStatusMsgCount>
 9fa:	8f 5f       	subi	r24, 0xFF	; 255
 9fc:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <sg_u8ControllerStatusMsgCount>
 a00:	83 30       	cpi	r24, 0x03	; 3
 a02:	48 f0       	brcs	.+18     	; 0xa16 <ControllerStatusMessagesSend+0x206>
 a04:	10 92 6c 09 	sts	0x096C, r1	; 0x80096c <sg_u8ControllerStatusMsgCount>
 a08:	10 92 1e 03 	sts	0x031E, r1	; 0x80031e <sg_bSendModuleControllerStatus>
 a0c:	10 92 74 09 	sts	0x0974, r1	; 0x800974 <sg_bIgnoreStatusRequests>
 a10:	81 e0       	ldi	r24, 0x01	; 1
 a12:	80 93 1b 03 	sts	0x031B, r24	; 0x80031b <sg_bSendCellCommStatus>
 a16:	80 91 1d 03 	lds	r24, 0x031D	; 0x80031d <sg_bSendCellStatus>
 a1a:	88 23       	and	r24, r24
 a1c:	09 f4       	brne	.+2      	; 0xa20 <ControllerStatusMessagesSend+0x210>
 a1e:	6d c0       	rjmp	.+218    	; 0xafa <ControllerStatusMessagesSend+0x2ea>
 a20:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <sg_sFrame+0x2d>
 a24:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <sg_u8CellStatus>
 a28:	89 17       	cp	r24, r25
 a2a:	d0 f4       	brcc	.+52     	; 0xa60 <ControllerStatusMessagesSend+0x250>
 a2c:	e0 91 23 03 	lds	r30, 0x0323	; 0x800323 <sg_u8CellStatus>
 a30:	f0 e0       	ldi	r31, 0x00	; 0
 a32:	75 96       	adiw	r30, 0x15	; 21
 a34:	ee 0f       	add	r30, r30
 a36:	ff 1f       	adc	r31, r31
 a38:	ee 0f       	add	r30, r30
 a3a:	ff 1f       	adc	r31, r31
 a3c:	e0 5f       	subi	r30, 0xF0	; 240
 a3e:	fe 4f       	sbci	r31, 0xFE	; 254
 a40:	20 81       	ld	r18, Z
 a42:	31 81       	ldd	r19, Z+1	; 0x01
 a44:	e0 91 23 03 	lds	r30, 0x0323	; 0x800323 <sg_u8CellStatus>
 a48:	f0 e0       	ldi	r31, 0x00	; 0
 a4a:	75 96       	adiw	r30, 0x15	; 21
 a4c:	ee 0f       	add	r30, r30
 a4e:	ff 1f       	adc	r31, r31
 a50:	ee 0f       	add	r30, r30
 a52:	ff 1f       	adc	r31, r31
 a54:	e0 5f       	subi	r30, 0xF0	; 240
 a56:	fe 4f       	sbci	r31, 0xFE	; 254
 a58:	82 81       	ldd	r24, Z+2	; 0x02
 a5a:	93 81       	ldd	r25, Z+3	; 0x03
 a5c:	3f 77       	andi	r19, 0x7F	; 127
 a5e:	04 c0       	rjmp	.+8      	; 0xa68 <ControllerStatusMessagesSend+0x258>
 a60:	80 e0       	ldi	r24, 0x00	; 0
 a62:	90 e0       	ldi	r25, 0x00	; 0
 a64:	20 e0       	ldi	r18, 0x00	; 0
 a66:	30 e0       	ldi	r19, 0x00	; 0
 a68:	40 91 23 03 	lds	r20, 0x0323	; 0x800323 <sg_u8CellStatus>
 a6c:	48 83       	st	Y, r20
 a6e:	40 91 25 01 	lds	r20, 0x0125	; 0x800125 <sg_sFrame+0x15>
 a72:	49 83       	std	Y+1, r20	; 0x01
 a74:	8a 83       	std	Y+2, r24	; 0x02
 a76:	9b 83       	std	Y+3, r25	; 0x03
 a78:	2c 83       	std	Y+4, r18	; 0x04
 a7a:	3d 83       	std	Y+5, r19	; 0x05
 a7c:	21 15       	cp	r18, r1
 a7e:	31 05       	cpc	r19, r1
 a80:	59 f0       	breq	.+22     	; 0xa98 <ControllerStatusMessagesSend+0x288>
 a82:	c9 01       	movw	r24, r18
 a84:	64 e0       	ldi	r22, 0x04	; 4
 a86:	70 e1       	ldi	r23, 0x10	; 16
 a88:	0e 94 b9 23 	call	0x4772	; 0x4772 <__udivmodhi4>
 a8c:	84 e6       	ldi	r24, 0x64	; 100
 a8e:	68 9f       	mul	r22, r24
 a90:	60 2d       	mov	r22, r0
 a92:	11 24       	eor	r1, r1
 a94:	6e 83       	std	Y+6, r22	; 0x06
 a96:	01 c0       	rjmp	.+2      	; 0xa9a <ControllerStatusMessagesSend+0x28a>
 a98:	1e 82       	std	Y+6, r1	; 0x06
 a9a:	e0 e1       	ldi	r30, 0x10	; 16
 a9c:	f1 e0       	ldi	r31, 0x01	; 1
 a9e:	47 a9       	ldd	r20, Z+55	; 0x37
 aa0:	50 ad       	ldd	r21, Z+56	; 0x38
 aa2:	81 ad       	ldd	r24, Z+57	; 0x39
 aa4:	92 ad       	ldd	r25, Z+58	; 0x3a
 aa6:	84 17       	cp	r24, r20
 aa8:	95 07       	cpc	r25, r21
 aaa:	90 f4       	brcc	.+36     	; 0xad0 <ControllerStatusMessagesSend+0x2c0>
 aac:	21 15       	cp	r18, r1
 aae:	31 05       	cpc	r19, r1
 ab0:	79 f0       	breq	.+30     	; 0xad0 <ControllerStatusMessagesSend+0x2c0>
 ab2:	67 a9       	ldd	r22, Z+55	; 0x37
 ab4:	70 ad       	ldd	r23, Z+56	; 0x38
 ab6:	81 ad       	ldd	r24, Z+57	; 0x39
 ab8:	92 ad       	ldd	r25, Z+58	; 0x3a
 aba:	68 1b       	sub	r22, r24
 abc:	79 0b       	sbc	r23, r25
 abe:	c9 01       	movw	r24, r18
 ac0:	0e 94 b9 23 	call	0x4772	; 0x4772 <__udivmodhi4>
 ac4:	84 e6       	ldi	r24, 0x64	; 100
 ac6:	68 9f       	mul	r22, r24
 ac8:	60 2d       	mov	r22, r0
 aca:	11 24       	eor	r1, r1
 acc:	6f 83       	std	Y+7, r22	; 0x07
 ace:	01 c0       	rjmp	.+2      	; 0xad2 <ControllerStatusMessagesSend+0x2c2>
 ad0:	1f 82       	std	Y+7, r1	; 0x07
 ad2:	48 e0       	ldi	r20, 0x08	; 8
 ad4:	be 01       	movw	r22, r28
 ad6:	84 e0       	ldi	r24, 0x04	; 4
 ad8:	0e 94 ed 25 	call	0x4bda	; 0x4bda <CANSendMessage>
 adc:	88 23       	and	r24, r24
 ade:	69 f0       	breq	.+26     	; 0xafa <ControllerStatusMessagesSend+0x2ea>
 ae0:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <sg_u8CellStatus>
 ae4:	8f 5f       	subi	r24, 0xFF	; 255
 ae6:	80 93 23 03 	sts	0x0323, r24	; 0x800323 <sg_u8CellStatus>
 aea:	90 91 23 03 	lds	r25, 0x0323	; 0x800323 <sg_u8CellStatus>
 aee:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <sg_u8CellStatusTarget>
 af2:	98 17       	cp	r25, r24
 af4:	10 f0       	brcs	.+4      	; 0xafa <ControllerStatusMessagesSend+0x2ea>
 af6:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <sg_bSendCellStatus>
 afa:	80 91 1b 03 	lds	r24, 0x031B	; 0x80031b <sg_bSendCellCommStatus>
 afe:	88 23       	and	r24, r24
 b00:	11 f1       	breq	.+68     	; 0xb46 <ControllerStatusMessagesSend+0x336>
 b02:	e0 e1       	ldi	r30, 0x10	; 16
 b04:	f1 e0       	ldi	r31, 0x01	; 1
 b06:	83 89       	ldd	r24, Z+19	; 0x13
 b08:	88 83       	st	Y, r24
 b0a:	84 89       	ldd	r24, Z+20	; 0x14
 b0c:	89 83       	std	Y+1, r24	; 0x01
 b0e:	80 a5       	ldd	r24, Z+40	; 0x28
 b10:	91 a5       	ldd	r25, Z+41	; 0x29
 b12:	8a 83       	std	Y+2, r24	; 0x02
 b14:	80 a5       	ldd	r24, Z+40	; 0x28
 b16:	91 a5       	ldd	r25, Z+41	; 0x29
 b18:	9b 83       	std	Y+3, r25	; 0x03
 b1a:	86 a5       	ldd	r24, Z+46	; 0x2e
 b1c:	8c 83       	std	Y+4, r24	; 0x04
 b1e:	82 a5       	ldd	r24, Z+42	; 0x2a
 b20:	8f 3f       	cpi	r24, 0xFF	; 255
 b22:	29 f0       	breq	.+10     	; 0xb2e <ControllerStatusMessagesSend+0x31e>
 b24:	85 a5       	ldd	r24, Z+45	; 0x2d
 b26:	92 a5       	ldd	r25, Z+42	; 0x2a
 b28:	89 1b       	sub	r24, r25
 b2a:	8d 83       	std	Y+5, r24	; 0x05
 b2c:	02 c0       	rjmp	.+4      	; 0xb32 <ControllerStatusMessagesSend+0x322>
 b2e:	8f ef       	ldi	r24, 0xFF	; 255
 b30:	8d 83       	std	Y+5, r24	; 0x05
 b32:	1e 82       	std	Y+6, r1	; 0x06
 b34:	1f 82       	std	Y+7, r1	; 0x07
 b36:	48 e0       	ldi	r20, 0x08	; 8
 b38:	be 01       	movw	r22, r28
 b3a:	86 e0       	ldi	r24, 0x06	; 6
 b3c:	0e 94 ed 25 	call	0x4bda	; 0x4bda <CANSendMessage>
 b40:	81 11       	cpse	r24, r1
 b42:	10 92 1b 03 	sts	0x031B, r1	; 0x80031b <sg_bSendCellCommStatus>
 b46:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <sg_bSendHardwareDetail>
 b4a:	88 23       	and	r24, r24
 b4c:	89 f0       	breq	.+34     	; 0xb70 <ControllerStatusMessagesSend+0x360>
 b4e:	be 01       	movw	r22, r28
 b50:	ce 01       	movw	r24, r28
 b52:	02 96       	adiw	r24, 0x02	; 2
 b54:	0e 94 81 1a 	call	0x3502	; 0x3502 <CurrentThresholdsGet>
 b58:	1c 82       	std	Y+4, r1	; 0x04
 b5a:	1d 82       	std	Y+5, r1	; 0x05
 b5c:	1e 82       	std	Y+6, r1	; 0x06
 b5e:	1f 82       	std	Y+7, r1	; 0x07
 b60:	48 e0       	ldi	r20, 0x08	; 8
 b62:	be 01       	movw	r22, r28
 b64:	85 e0       	ldi	r24, 0x05	; 5
 b66:	0e 94 ed 25 	call	0x4bda	; 0x4bda <CANSendMessage>
 b6a:	81 11       	cpse	r24, r1
 b6c:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <sg_bSendHardwareDetail>
 b70:	df 91       	pop	r29
 b72:	cf 91       	pop	r28
 b74:	1f 91       	pop	r17
 b76:	0f 91       	pop	r16
 b78:	08 95       	ret

Disassembly of section .text.CellStringProcess:

00000e2e <CellStringProcess>:
     e2e:	3f 92       	push	r3
     e30:	4f 92       	push	r4
     e32:	5f 92       	push	r5
     e34:	6f 92       	push	r6
     e36:	7f 92       	push	r7
     e38:	8f 92       	push	r8
     e3a:	9f 92       	push	r9
     e3c:	af 92       	push	r10
     e3e:	bf 92       	push	r11
     e40:	cf 92       	push	r12
     e42:	df 92       	push	r13
     e44:	ef 92       	push	r14
     e46:	ff 92       	push	r15
     e48:	0f 93       	push	r16
     e4a:	1f 93       	push	r17
     e4c:	cf 93       	push	r28
     e4e:	df 93       	push	r29
     e50:	00 d0       	rcall	.+0      	; 0xe52 <CellStringProcess+0x24>
     e52:	00 d0       	rcall	.+0      	; 0xe54 <CellStringProcess+0x26>
     e54:	00 d0       	rcall	.+0      	; 0xe56 <CellStringProcess+0x28>
     e56:	cd b7       	in	r28, 0x3d	; 61
     e58:	de b7       	in	r29, 0x3e	; 62
     e5a:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <sg_sFrame+0x2b>
     e5e:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <sg_sFrame+0x2c>
     e62:	89 2b       	or	r24, r25
     e64:	09 f4       	brne	.+2      	; 0xe68 <CellStringProcess+0x3a>
     e66:	20 c1       	rjmp	.+576    	; 0x10a8 <__DATA_REGION_LENGTH__+0xa8>
     e68:	e0 e1       	ldi	r30, 0x10	; 16
     e6a:	f1 e0       	ldi	r31, 0x01	; 1
     e6c:	8f ef       	ldi	r24, 0xFF	; 255
     e6e:	82 a7       	std	Z+42, r24	; 0x2a
     e70:	93 89       	ldd	r25, Z+19	; 0x13
     e72:	85 a5       	ldd	r24, Z+45	; 0x2d
     e74:	89 17       	cp	r24, r25
     e76:	28 f4       	brcc	.+10     	; 0xe82 <CellStringProcess+0x54>
     e78:	85 a5       	ldd	r24, Z+45	; 0x2d
     e7a:	83 8b       	std	Z+19, r24	; 0x13
     e7c:	81 e0       	ldi	r24, 0x01	; 1
     e7e:	80 93 1b 03 	sts	0x031B, r24	; 0x80031b <sg_bSendCellCommStatus>
     e82:	e0 e1       	ldi	r30, 0x10	; 16
     e84:	f1 e0       	ldi	r31, 0x01	; 1
     e86:	94 89       	ldd	r25, Z+20	; 0x14
     e88:	85 a5       	ldd	r24, Z+45	; 0x2d
     e8a:	98 17       	cp	r25, r24
     e8c:	28 f4       	brcc	.+10     	; 0xe98 <CellStringProcess+0x6a>
     e8e:	85 a5       	ldd	r24, Z+45	; 0x2d
     e90:	84 8b       	std	Z+20, r24	; 0x14
     e92:	81 e0       	ldi	r24, 0x01	; 1
     e94:	80 93 1b 03 	sts	0x031B, r24	; 0x80031b <sg_bSendCellCommStatus>
     e98:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <sg_sFrame+0x2b>
     e9c:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <sg_sFrame+0x2c>
     ea0:	83 70       	andi	r24, 0x03	; 3
     ea2:	99 27       	eor	r25, r25
     ea4:	89 2b       	or	r24, r25
     ea6:	61 f0       	breq	.+24     	; 0xec0 <CellStringProcess+0x92>
     ea8:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <sg_sFrame+0x2e>
     eac:	8f 3f       	cpi	r24, 0xFF	; 255
     eae:	41 f0       	breq	.+16     	; 0xec0 <CellStringProcess+0x92>
     eb0:	e0 e1       	ldi	r30, 0x10	; 16
     eb2:	f1 e0       	ldi	r31, 0x01	; 1
     eb4:	86 a5       	ldd	r24, Z+46	; 0x2e
     eb6:	8f 5f       	subi	r24, 0xFF	; 255
     eb8:	86 a7       	std	Z+46, r24	; 0x2e
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	80 93 1b 03 	sts	0x031B, r24	; 0x80031b <sg_bSendCellCommStatus>
     ec0:	e0 e1       	ldi	r30, 0x10	; 16
     ec2:	f1 e0       	ldi	r31, 0x01	; 1
     ec4:	10 ae       	std	Z+56, r1	; 0x38
     ec6:	17 aa       	std	Z+55, r1	; 0x37
     ec8:	8f ef       	ldi	r24, 0xFF	; 255
     eca:	9f ef       	ldi	r25, 0xFF	; 255
     ecc:	92 af       	std	Z+58, r25	; 0x3a
     ece:	81 af       	std	Z+57, r24	; 0x39
     ed0:	14 ae       	std	Z+60, r1	; 0x3c
     ed2:	13 ae       	std	Z+59, r1	; 0x3b
     ed4:	80 e0       	ldi	r24, 0x00	; 0
     ed6:	90 e8       	ldi	r25, 0x80	; 128
     ed8:	92 ab       	std	Z+50, r25	; 0x32
     eda:	81 ab       	std	Z+49, r24	; 0x31
     edc:	8f ef       	ldi	r24, 0xFF	; 255
     ede:	9f e7       	ldi	r25, 0x7F	; 127
     ee0:	94 ab       	std	Z+52, r25	; 0x34
     ee2:	83 ab       	std	Z+51, r24	; 0x33
     ee4:	16 aa       	std	Z+54, r1	; 0x36
     ee6:	15 aa       	std	Z+53, r1	; 0x35
     ee8:	d1 2c       	mov	r13, r1
     eea:	31 2c       	mov	r3, r1
     eec:	c1 2c       	mov	r12, r1
     eee:	41 2c       	mov	r4, r1
     ef0:	51 2c       	mov	r5, r1
     ef2:	32 01       	movw	r6, r4
     ef4:	81 2c       	mov	r8, r1
     ef6:	91 2c       	mov	r9, r1
     ef8:	54 01       	movw	r10, r8
     efa:	2f ef       	ldi	r18, 0xFF	; 255
     efc:	3f e7       	ldi	r19, 0x7F	; 127
     efe:	3e 83       	std	Y+6, r19	; 0x06
     f00:	2d 83       	std	Y+5, r18	; 0x05
     f02:	80 e0       	ldi	r24, 0x00	; 0
     f04:	90 e8       	ldi	r25, 0x80	; 128
     f06:	9c 83       	std	Y+4, r25	; 0x04
     f08:	8b 83       	std	Y+3, r24	; 0x03
     f0a:	6b c0       	rjmp	.+214    	; 0xfe2 <CellStringProcess+0x1b4>
     f0c:	0d 2d       	mov	r16, r13
     f0e:	10 e0       	ldi	r17, 0x00	; 0
     f10:	f8 01       	movw	r30, r16
     f12:	75 96       	adiw	r30, 0x15	; 21
     f14:	ee 0f       	add	r30, r30
     f16:	ff 1f       	adc	r31, r31
     f18:	ee 0f       	add	r30, r30
     f1a:	ff 1f       	adc	r31, r31
     f1c:	e0 5f       	subi	r30, 0xF0	; 240
     f1e:	fe 4f       	sbci	r31, 0xFE	; 254
     f20:	80 81       	ld	r24, Z
     f22:	91 81       	ldd	r25, Z+1	; 0x01
     f24:	9a 83       	std	Y+2, r25	; 0x02
     f26:	89 83       	std	Y+1, r24	; 0x01
     f28:	e2 80       	ldd	r14, Z+2	; 0x02
     f2a:	f3 80       	ldd	r15, Z+3	; 0x03
     f2c:	60 e0       	ldi	r22, 0x00	; 0
     f2e:	70 e0       	ldi	r23, 0x00	; 0
     f30:	c7 01       	movw	r24, r14
     f32:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <CellDataConvertTemperature>
     f36:	88 23       	and	r24, r24
     f38:	f1 f0       	breq	.+60     	; 0xf76 <CellStringProcess+0x148>
     f3a:	f4 fe       	sbrs	r15, 4
     f3c:	03 c0       	rjmp	.+6      	; 0xf44 <CellStringProcess+0x116>
     f3e:	c7 01       	movw	r24, r14
     f40:	90 6f       	ori	r25, 0xF0	; 240
     f42:	02 c0       	rjmp	.+4      	; 0xf48 <CellStringProcess+0x11a>
     f44:	c7 01       	movw	r24, r14
     f46:	9f 77       	andi	r25, 0x7F	; 127
     f48:	2b 81       	ldd	r18, Y+3	; 0x03
     f4a:	3c 81       	ldd	r19, Y+4	; 0x04
     f4c:	28 17       	cp	r18, r24
     f4e:	39 07       	cpc	r19, r25
     f50:	14 f4       	brge	.+4      	; 0xf56 <CellStringProcess+0x128>
     f52:	9c 83       	std	Y+4, r25	; 0x04
     f54:	8b 83       	std	Y+3, r24	; 0x03
     f56:	2d 81       	ldd	r18, Y+5	; 0x05
     f58:	3e 81       	ldd	r19, Y+6	; 0x06
     f5a:	82 17       	cp	r24, r18
     f5c:	93 07       	cpc	r25, r19
     f5e:	14 f4       	brge	.+4      	; 0xf64 <CellStringProcess+0x136>
     f60:	9e 83       	std	Y+6, r25	; 0x06
     f62:	8d 83       	std	Y+5, r24	; 0x05
     f64:	09 2e       	mov	r0, r25
     f66:	00 0c       	add	r0, r0
     f68:	aa 0b       	sbc	r26, r26
     f6a:	bb 0b       	sbc	r27, r27
     f6c:	88 0e       	add	r8, r24
     f6e:	99 1e       	adc	r9, r25
     f70:	aa 1e       	adc	r10, r26
     f72:	bb 1e       	adc	r11, r27
     f74:	33 94       	inc	r3
     f76:	f8 01       	movw	r30, r16
     f78:	75 96       	adiw	r30, 0x15	; 21
     f7a:	ee 0f       	add	r30, r30
     f7c:	ff 1f       	adc	r31, r31
     f7e:	ee 0f       	add	r30, r30
     f80:	ff 1f       	adc	r31, r31
     f82:	e0 5f       	subi	r30, 0xF0	; 240
     f84:	fe 4f       	sbci	r31, 0xFE	; 254
     f86:	80 81       	ld	r24, Z
     f88:	91 81       	ldd	r25, Z+1	; 0x01
     f8a:	99 23       	and	r25, r25
     f8c:	1c f4       	brge	.+6      	; 0xf94 <CellStringProcess+0x166>
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <sg_sFrame+0x27>
     f94:	be 01       	movw	r22, r28
     f96:	6f 5f       	subi	r22, 0xFF	; 255
     f98:	7f 4f       	sbci	r23, 0xFF	; 255
     f9a:	89 81       	ldd	r24, Y+1	; 0x01
     f9c:	9a 81       	ldd	r25, Y+2	; 0x02
     f9e:	0e 94 46 1f 	call	0x3e8c	; 0x3e8c <CellDataConvertVoltage>
     fa2:	88 23       	and	r24, r24
     fa4:	e9 f0       	breq	.+58     	; 0xfe0 <CellStringProcess+0x1b2>
     fa6:	20 91 47 01 	lds	r18, 0x0147	; 0x800147 <sg_sFrame+0x37>
     faa:	30 91 48 01 	lds	r19, 0x0148	; 0x800148 <sg_sFrame+0x38>
     fae:	89 81       	ldd	r24, Y+1	; 0x01
     fb0:	9a 81       	ldd	r25, Y+2	; 0x02
     fb2:	28 17       	cp	r18, r24
     fb4:	39 07       	cpc	r19, r25
     fb6:	20 f4       	brcc	.+8      	; 0xfc0 <CellStringProcess+0x192>
     fb8:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <sg_sFrame+0x38>
     fbc:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <sg_sFrame+0x37>
     fc0:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <sg_sFrame+0x39>
     fc4:	30 91 4a 01 	lds	r19, 0x014A	; 0x80014a <sg_sFrame+0x3a>
     fc8:	82 17       	cp	r24, r18
     fca:	93 07       	cpc	r25, r19
     fcc:	20 f4       	brcc	.+8      	; 0xfd6 <CellStringProcess+0x1a8>
     fce:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <sg_sFrame+0x3a>
     fd2:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <sg_sFrame+0x39>
     fd6:	48 0e       	add	r4, r24
     fd8:	59 1e       	adc	r5, r25
     fda:	61 1c       	adc	r6, r1
     fdc:	71 1c       	adc	r7, r1
     fde:	c3 94       	inc	r12
     fe0:	d3 94       	inc	r13
     fe2:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <sg_sFrame+0x2d>
     fe6:	d8 16       	cp	r13, r24
     fe8:	08 f4       	brcc	.+2      	; 0xfec <CellStringProcess+0x1be>
     fea:	90 cf       	rjmp	.-224    	; 0xf0c <CellStringProcess+0xde>
     fec:	cc 20       	and	r12, r12
     fee:	89 f1       	breq	.+98     	; 0x1052 <__DATA_REGION_LENGTH__+0x52>
     ff0:	ed e4       	ldi	r30, 0x4D	; 77
     ff2:	f1 e0       	ldi	r31, 0x01	; 1
     ff4:	40 82       	st	Z, r4
     ff6:	51 82       	std	Z+1, r5	; 0x01
     ff8:	62 82       	std	Z+2, r6	; 0x02
     ffa:	73 82       	std	Z+3, r7	; 0x03
     ffc:	60 81       	ld	r22, Z
     ffe:	71 81       	ldd	r23, Z+1	; 0x01
    1000:	82 81       	ldd	r24, Z+2	; 0x02
    1002:	93 81       	ldd	r25, Z+3	; 0x03
    1004:	2c 2d       	mov	r18, r12
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	40 e0       	ldi	r20, 0x00	; 0
    100a:	50 e0       	ldi	r21, 0x00	; 0
    100c:	0e 94 8b 21 	call	0x4316	; 0x4316 <__udivmodsi4>
    1010:	30 93 4c 01 	sts	0x014C, r19	; 0x80014c <sg_sFrame+0x3c>
    1014:	20 93 4b 01 	sts	0x014B, r18	; 0x80014b <sg_sFrame+0x3b>
    1018:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    101c:	83 30       	cpi	r24, 0x03	; 3
    101e:	c9 f0       	breq	.+50     	; 0x1052 <__DATA_REGION_LENGTH__+0x52>
    1020:	80 91 19 03 	lds	r24, 0x0319	; 0x800319 <sg_bCellBalancedOnce>
    1024:	81 11       	cpse	r24, r1
    1026:	15 c0       	rjmp	.+42     	; 0x1052 <__DATA_REGION_LENGTH__+0x52>
    1028:	e0 e1       	ldi	r30, 0x10	; 16
    102a:	f1 e0       	ldi	r31, 0x01	; 1
    102c:	27 a9       	ldd	r18, Z+55	; 0x37
    102e:	30 ad       	ldd	r19, Z+56	; 0x38
    1030:	81 ad       	ldd	r24, Z+57	; 0x39
    1032:	92 ad       	ldd	r25, Z+58	; 0x3a
    1034:	28 17       	cp	r18, r24
    1036:	39 07       	cpc	r19, r25
    1038:	60 f0       	brcs	.+24     	; 0x1052 <__DATA_REGION_LENGTH__+0x52>
    103a:	87 a9       	ldd	r24, Z+55	; 0x37
    103c:	90 ad       	ldd	r25, Z+56	; 0x38
    103e:	21 ad       	ldd	r18, Z+57	; 0x39
    1040:	32 ad       	ldd	r19, Z+58	; 0x3a
    1042:	82 1b       	sub	r24, r18
    1044:	93 0b       	sbc	r25, r19
    1046:	80 34       	cpi	r24, 0x40	; 64
    1048:	91 05       	cpc	r25, r1
    104a:	18 f0       	brcs	.+6      	; 0x1052 <__DATA_REGION_LENGTH__+0x52>
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <sg_bCellBalanceReady>
    1052:	33 20       	and	r3, r3
    1054:	c9 f0       	breq	.+50     	; 0x1088 <__DATA_REGION_LENGTH__+0x88>
    1056:	23 2d       	mov	r18, r3
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	40 e0       	ldi	r20, 0x00	; 0
    105c:	50 e0       	ldi	r21, 0x00	; 0
    105e:	c5 01       	movw	r24, r10
    1060:	b4 01       	movw	r22, r8
    1062:	0e 94 0d 23 	call	0x461a	; 0x461a <__divmodsi4>
    1066:	65 e4       	ldi	r22, 0x45	; 69
    1068:	71 e0       	ldi	r23, 0x01	; 1
    106a:	c9 01       	movw	r24, r18
    106c:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <CellDataConvertTemperature>
    1070:	61 e4       	ldi	r22, 0x41	; 65
    1072:	71 e0       	ldi	r23, 0x01	; 1
    1074:	8b 81       	ldd	r24, Y+3	; 0x03
    1076:	9c 81       	ldd	r25, Y+4	; 0x04
    1078:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <CellDataConvertTemperature>
    107c:	63 e4       	ldi	r22, 0x43	; 67
    107e:	71 e0       	ldi	r23, 0x01	; 1
    1080:	8d 81       	ldd	r24, Y+5	; 0x05
    1082:	9e 81       	ldd	r25, Y+6	; 0x06
    1084:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <CellDataConvertTemperature>
    1088:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <sg_bSDCardReady>
    108c:	88 23       	and	r24, r24
    108e:	51 f0       	breq	.+20     	; 0x10a4 <__DATA_REGION_LENGTH__+0xa4>
    1090:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    1094:	88 23       	and	r24, r24
    1096:	31 f0       	breq	.+12     	; 0x10a4 <__DATA_REGION_LENGTH__+0xa4>
    1098:	80 e1       	ldi	r24, 0x10	; 16
    109a:	91 e0       	ldi	r25, 0x01	; 1
    109c:	0e 94 e5 13 	call	0x27ca	; 0x27ca <STORE_WriteFrame>
    10a0:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <sg_bSDCardReady>
    10a4:	0e 94 65 26 	call	0x4cca	; 0x4cca <SendModuleControllerStatus>
    10a8:	26 96       	adiw	r28, 0x06	; 6
    10aa:	0f b6       	in	r0, 0x3f	; 63
    10ac:	f8 94       	cli
    10ae:	de bf       	out	0x3e, r29	; 62
    10b0:	0f be       	out	0x3f, r0	; 63
    10b2:	cd bf       	out	0x3d, r28	; 61
    10b4:	df 91       	pop	r29
    10b6:	cf 91       	pop	r28
    10b8:	1f 91       	pop	r17
    10ba:	0f 91       	pop	r16
    10bc:	ff 90       	pop	r15
    10be:	ef 90       	pop	r14
    10c0:	df 90       	pop	r13
    10c2:	cf 90       	pop	r12
    10c4:	bf 90       	pop	r11
    10c6:	af 90       	pop	r10
    10c8:	9f 90       	pop	r9
    10ca:	8f 90       	pop	r8
    10cc:	7f 90       	pop	r7
    10ce:	6f 90       	pop	r6
    10d0:	5f 90       	pop	r5
    10d2:	4f 90       	pop	r4
    10d4:	3f 90       	pop	r3
    10d6:	08 95       	ret

Disassembly of section .text.Delay:

00004144 <Delay>:
    4144:	ab 01       	movw	r20, r22
    4146:	bc 01       	movw	r22, r24
    4148:	4f 5f       	subi	r20, 0xFF	; 255
    414a:	5f 4f       	sbci	r21, 0xFF	; 255
    414c:	6f 4f       	sbci	r22, 0xFF	; 255
    414e:	7f 4f       	sbci	r23, 0xFF	; 255
    4150:	76 95       	lsr	r23
    4152:	67 95       	ror	r22
    4154:	57 95       	ror	r21
    4156:	47 95       	ror	r20
    4158:	96 b5       	in	r25, 0x26	; 38
    415a:	17 c0       	rjmp	.+46     	; 0x418a <Delay+0x46>
    415c:	86 b5       	in	r24, 0x26	; 38
    415e:	98 17       	cp	r25, r24
    4160:	e9 f3       	breq	.-6      	; 0x415c <Delay+0x18>
    4162:	26 b5       	in	r18, 0x26	; 38
    4164:	82 2f       	mov	r24, r18
    4166:	89 1b       	sub	r24, r25
    4168:	90 e0       	ldi	r25, 0x00	; 0
    416a:	a0 e0       	ldi	r26, 0x00	; 0
    416c:	b0 e0       	ldi	r27, 0x00	; 0
    416e:	48 17       	cp	r20, r24
    4170:	59 07       	cpc	r21, r25
    4172:	6a 07       	cpc	r22, r26
    4174:	7b 07       	cpc	r23, r27
    4176:	28 f0       	brcs	.+10     	; 0x4182 <Delay+0x3e>
    4178:	48 1b       	sub	r20, r24
    417a:	59 0b       	sbc	r21, r25
    417c:	6a 0b       	sbc	r22, r26
    417e:	7b 0b       	sbc	r23, r27
    4180:	03 c0       	rjmp	.+6      	; 0x4188 <Delay+0x44>
    4182:	40 e0       	ldi	r20, 0x00	; 0
    4184:	50 e0       	ldi	r21, 0x00	; 0
    4186:	ba 01       	movw	r22, r20
    4188:	92 2f       	mov	r25, r18
    418a:	41 15       	cp	r20, r1
    418c:	51 05       	cpc	r21, r1
    418e:	61 05       	cpc	r22, r1
    4190:	71 05       	cpc	r23, r1
    4192:	21 f7       	brne	.-56     	; 0x415c <Delay+0x18>
    4194:	08 95       	ret

Disassembly of section .text.PlatformAssert:

000046a0 <PlatformAssert>:



void PlatformAssert( const char* peFilename, const int s32LineNumber )
{
	DebugOut("Assert %s: %d\n", peFilename, s32LineNumber);
    46a0:	5f 93       	push	r21
    46a2:	4f 93       	push	r20
    46a4:	8f 93       	push	r24
    46a6:	7f 93       	push	r23
    46a8:	6f 93       	push	r22
    46aa:	88 e3       	ldi	r24, 0x38	; 56
    46ac:	92 e0       	ldi	r25, 0x02	; 2
    46ae:	a0 e0       	ldi	r26, 0x00	; 0
    46b0:	af 93       	push	r26
    46b2:	9f 93       	push	r25
    46b4:	8f 93       	push	r24
    46b6:	0e 94 85 26 	call	0x4d0a	; 0x4d0a <DebugOut>
	
//	while(1);
}
    46ba:	8d b7       	in	r24, 0x3d	; 61
    46bc:	9e b7       	in	r25, 0x3e	; 62
    46be:	08 96       	adiw	r24, 0x08	; 8
    46c0:	0f b6       	in	r0, 0x3f	; 63
    46c2:	f8 94       	cli
    46c4:	9e bf       	out	0x3e, r25	; 62
    46c6:	0f be       	out	0x3f, r0	; 63
    46c8:	8d bf       	out	0x3d, r24	; 61
    46ca:	08 95       	ret

Disassembly of section .text.ModuleControllerStateHandle:

000017e2 <ModuleControllerStateHandle>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    17e2:	1f 93       	push	r17
    17e4:	cf 93       	push	r28
    17e6:	df 93       	push	r29
    17e8:	d0 91 06 01 	lds	r29, 0x0106	; 0x800106 <sg_eModuleControllerStateTarget>
    17ec:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <sg_eModuleControllerStateMax>
    17f0:	8d 17       	cp	r24, r29
    17f2:	30 f0       	brcs	.+12     	; 0x1800 <ModuleControllerStateHandle+0x1e>
    17f4:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    17f8:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <sg_eModuleControllerStateMax>
    17fc:	89 17       	cp	r24, r25
    17fe:	10 f4       	brcc	.+4      	; 0x1804 <ModuleControllerStateHandle+0x22>
    1800:	d0 91 05 01 	lds	r29, 0x0105	; 0x800105 <sg_eModuleControllerStateMax>
    1804:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    1808:	d8 17       	cp	r29, r24
    180a:	09 f4       	brne	.+2      	; 0x180e <ModuleControllerStateHandle+0x2c>
    180c:	f5 c0       	rjmp	.+490    	; 0x19f8 <ModuleControllerStateHandle+0x216>
    180e:	d2 30       	cpi	r29, 0x02	; 2
    1810:	09 f4       	brne	.+2      	; 0x1814 <ModuleControllerStateHandle+0x32>
    1812:	72 c0       	rjmp	.+228    	; 0x18f8 <ModuleControllerStateHandle+0x116>
    1814:	28 f4       	brcc	.+10     	; 0x1820 <ModuleControllerStateHandle+0x3e>
    1816:	dd 23       	and	r29, r29
    1818:	89 f0       	breq	.+34     	; 0x183c <ModuleControllerStateHandle+0x5a>
    181a:	d1 30       	cpi	r29, 0x01	; 1
    181c:	e1 f1       	breq	.+120    	; 0x1896 <ModuleControllerStateHandle+0xb4>
    181e:	e0 c0       	rjmp	.+448    	; 0x19e0 <ModuleControllerStateHandle+0x1fe>
    1820:	d3 30       	cpi	r29, 0x03	; 3
    1822:	09 f4       	brne	.+2      	; 0x1826 <ModuleControllerStateHandle+0x44>
    1824:	a9 c0       	rjmp	.+338    	; 0x1978 <ModuleControllerStateHandle+0x196>
    1826:	d5 30       	cpi	r29, 0x05	; 5
    1828:	09 f0       	breq	.+2      	; 0x182c <ModuleControllerStateHandle+0x4a>
    182a:	da c0       	rjmp	.+436    	; 0x19e0 <ModuleControllerStateHandle+0x1fe>
    182c:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <sg_eModuleControllerStateCurrent>
    1830:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <sg_eModuleControllerStateTarget>
    1834:	d0 91 07 01 	lds	r29, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    1838:	0e 94 a1 26 	call	0x4d42	; 0x4d42 <ADCSetPowerOn>
    183c:	88 b1       	in	r24, 0x08	; 8
    183e:	8f 7e       	andi	r24, 0xEF	; 239
    1840:	88 b9       	out	0x08, r24	; 8
    1842:	68 e8       	ldi	r22, 0x88	; 136
    1844:	73 e1       	ldi	r23, 0x13	; 19
    1846:	80 e0       	ldi	r24, 0x00	; 0
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	0e 94 a2 20 	call	0x4144	; 0x4144 <Delay>
    184e:	8e b1       	in	r24, 0x0e	; 14
    1850:	8d 7f       	andi	r24, 0xFD	; 253
    1852:	8e b9       	out	0x0e, r24	; 14
    1854:	68 e8       	ldi	r22, 0x88	; 136
    1856:	73 e1       	ldi	r23, 0x13	; 19
    1858:	80 e0       	ldi	r24, 0x00	; 0
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	0e 94 a2 20 	call	0x4144	; 0x4144 <Delay>
    1860:	eb e6       	ldi	r30, 0x6B	; 107
    1862:	f0 e0       	ldi	r31, 0x00	; 0
    1864:	80 81       	ld	r24, Z
    1866:	8d 7f       	andi	r24, 0xFD	; 253
    1868:	80 83       	st	Z, r24
    186a:	e8 e6       	ldi	r30, 0x68	; 104
    186c:	f0 e0       	ldi	r31, 0x00	; 0
    186e:	80 81       	ld	r24, Z
    1870:	8d 7f       	andi	r24, 0xFD	; 253
    1872:	80 83       	st	Z, r24
    1874:	81 e0       	ldi	r24, 0x01	; 1
    1876:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <sg_bCellBalanceReady>
    187a:	10 92 19 03 	sts	0x0319, r1	; 0x800319 <sg_bCellBalancedOnce>
    187e:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <sg_bStopDischarge>
    1882:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <sg_bSDCardReady>
    1886:	88 23       	and	r24, r24
    1888:	09 f4       	brne	.+2      	; 0x188c <ModuleControllerStateHandle+0xaa>
    188a:	b2 c0       	rjmp	.+356    	; 0x19f0 <ModuleControllerStateHandle+0x20e>
    188c:	0e 94 a1 1f 	call	0x3f42	; 0x3f42 <STORE_EndSession>
    1890:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <sg_bSDCardReady>
    1894:	ad c0       	rjmp	.+346    	; 0x19f0 <ModuleControllerStateHandle+0x20e>
    1896:	88 b1       	in	r24, 0x08	; 8
    1898:	8f 7e       	andi	r24, 0xEF	; 239
    189a:	88 b9       	out	0x08, r24	; 8
    189c:	68 e8       	ldi	r22, 0x88	; 136
    189e:	73 e1       	ldi	r23, 0x13	; 19
    18a0:	80 e0       	ldi	r24, 0x00	; 0
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	0e 94 a2 20 	call	0x4144	; 0x4144 <Delay>
    18a8:	eb e6       	ldi	r30, 0x6B	; 107
    18aa:	f0 e0       	ldi	r31, 0x00	; 0
    18ac:	80 81       	ld	r24, Z
    18ae:	8d 7f       	andi	r24, 0xFD	; 253
    18b0:	80 83       	st	Z, r24
    18b2:	e8 e6       	ldi	r30, 0x68	; 104
    18b4:	f0 e0       	ldi	r31, 0x00	; 0
    18b6:	80 81       	ld	r24, Z
    18b8:	8d 7f       	andi	r24, 0xFD	; 253
    18ba:	80 83       	st	Z, r24
    18bc:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <sg_bModuleRegistered>
    18c0:	88 23       	and	r24, r24
    18c2:	19 f0       	breq	.+6      	; 0x18ca <ModuleControllerStateHandle+0xe8>
    18c4:	8e b1       	in	r24, 0x0e	; 14
    18c6:	82 60       	ori	r24, 0x02	; 2
    18c8:	8e b9       	out	0x0e, r24	; 14
    18ca:	68 e8       	ldi	r22, 0x88	; 136
    18cc:	73 e1       	ldi	r23, 0x13	; 19
    18ce:	80 e0       	ldi	r24, 0x00	; 0
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	0e 94 a2 20 	call	0x4144	; 0x4144 <Delay>
    18d6:	81 e0       	ldi	r24, 0x01	; 1
    18d8:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <sg_bCellBalanceReady>
    18dc:	10 92 19 03 	sts	0x0319, r1	; 0x800319 <sg_bCellBalancedOnce>
    18e0:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <sg_bStopDischarge>
    18e4:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <sg_bSDCardReady>
    18e8:	88 23       	and	r24, r24
    18ea:	09 f4       	brne	.+2      	; 0x18ee <ModuleControllerStateHandle+0x10c>
    18ec:	81 c0       	rjmp	.+258    	; 0x19f0 <ModuleControllerStateHandle+0x20e>
    18ee:	0e 94 78 20 	call	0x40f0	; 0x40f0 <STORE_StartNewSession>
    18f2:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <sg_bSDCardReady>
    18f6:	7c c0       	rjmp	.+248    	; 0x19f0 <ModuleControllerStateHandle+0x20e>
    18f8:	61 99       	sbic	0x0c, 1	; 12
    18fa:	0d c0       	rjmp	.+26     	; 0x1916 <ModuleControllerStateHandle+0x134>
    18fc:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <sg_bModuleRegistered>
    1900:	88 23       	and	r24, r24
    1902:	19 f0       	breq	.+6      	; 0x190a <ModuleControllerStateHandle+0x128>
    1904:	8e b1       	in	r24, 0x0e	; 14
    1906:	82 60       	ori	r24, 0x02	; 2
    1908:	8e b9       	out	0x0e, r24	; 14
    190a:	68 e8       	ldi	r22, 0x88	; 136
    190c:	73 e1       	ldi	r23, 0x13	; 19
    190e:	80 e0       	ldi	r24, 0x00	; 0
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	0e 94 a2 20 	call	0x4144	; 0x4144 <Delay>
    1916:	cb e0       	ldi	r28, 0x0B	; 11
    1918:	2a c0       	rjmp	.+84     	; 0x196e <ModuleControllerStateHandle+0x18c>
    191a:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <sg_bModuleRegistered>
    191e:	88 23       	and	r24, r24
    1920:	49 f0       	breq	.+18     	; 0x1934 <ModuleControllerStateHandle+0x152>
    1922:	88 b1       	in	r24, 0x08	; 8
    1924:	80 61       	ori	r24, 0x10	; 16
    1926:	88 b9       	out	0x08, r24	; 8
    1928:	88 b1       	in	r24, 0x08	; 8
    192a:	8f 77       	andi	r24, 0x7F	; 127
    192c:	88 b9       	out	0x08, r24	; 8
    192e:	88 b1       	in	r24, 0x08	; 8
    1930:	80 68       	ori	r24, 0x80	; 128
    1932:	88 b9       	out	0x08, r24	; 8
    1934:	68 ee       	ldi	r22, 0xE8	; 232
    1936:	73 e0       	ldi	r23, 0x03	; 3
    1938:	80 e0       	ldi	r24, 0x00	; 0
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	0e 94 a2 20 	call	0x4144	; 0x4144 <Delay>
    1940:	88 b1       	in	r24, 0x08	; 8
    1942:	8f 7e       	andi	r24, 0xEF	; 239
    1944:	88 b9       	out	0x08, r24	; 8
    1946:	68 e8       	ldi	r22, 0x88	; 136
    1948:	73 e1       	ldi	r23, 0x13	; 19
    194a:	80 e0       	ldi	r24, 0x00	; 0
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	0e 94 a2 20 	call	0x4144	; 0x4144 <Delay>
    1952:	60 e5       	ldi	r22, 0x50	; 80
    1954:	73 ec       	ldi	r23, 0xC3	; 195
    1956:	80 e0       	ldi	r24, 0x00	; 0
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	0e 94 a2 20 	call	0x4144	; 0x4144 <Delay>
    195e:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <sg_bOvercurrentSignal>
    1962:	88 23       	and	r24, r24
    1964:	19 f0       	breq	.+6      	; 0x196c <ModuleControllerStateHandle+0x18a>
    1966:	10 92 17 03 	sts	0x0317, r1	; 0x800317 <sg_bOvercurrentSignal>
    196a:	01 c0       	rjmp	.+2      	; 0x196e <ModuleControllerStateHandle+0x18c>
    196c:	c1 2f       	mov	r28, r17
    196e:	1f ef       	ldi	r17, 0xFF	; 255
    1970:	1c 0f       	add	r17, r28
    1972:	c1 11       	cpse	r28, r1
    1974:	d2 cf       	rjmp	.-92     	; 0x191a <ModuleControllerStateHandle+0x138>
    1976:	3c c0       	rjmp	.+120    	; 0x19f0 <ModuleControllerStateHandle+0x20e>
    1978:	61 99       	sbic	0x0c, 1	; 12
    197a:	0d c0       	rjmp	.+26     	; 0x1996 <ModuleControllerStateHandle+0x1b4>
    197c:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <sg_bModuleRegistered>
    1980:	88 23       	and	r24, r24
    1982:	19 f0       	breq	.+6      	; 0x198a <ModuleControllerStateHandle+0x1a8>
    1984:	8e b1       	in	r24, 0x0e	; 14
    1986:	82 60       	ori	r24, 0x02	; 2
    1988:	8e b9       	out	0x0e, r24	; 14
    198a:	68 e8       	ldi	r22, 0x88	; 136
    198c:	73 e1       	ldi	r23, 0x13	; 19
    198e:	80 e0       	ldi	r24, 0x00	; 0
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	0e 94 a2 20 	call	0x4144	; 0x4144 <Delay>
    1996:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <sg_bModuleRegistered>
    199a:	88 23       	and	r24, r24
    199c:	49 f0       	breq	.+18     	; 0x19b0 <ModuleControllerStateHandle+0x1ce>
    199e:	88 b1       	in	r24, 0x08	; 8
    19a0:	80 61       	ori	r24, 0x10	; 16
    19a2:	88 b9       	out	0x08, r24	; 8
    19a4:	88 b1       	in	r24, 0x08	; 8
    19a6:	8f 77       	andi	r24, 0x7F	; 127
    19a8:	88 b9       	out	0x08, r24	; 8
    19aa:	88 b1       	in	r24, 0x08	; 8
    19ac:	80 68       	ori	r24, 0x80	; 128
    19ae:	88 b9       	out	0x08, r24	; 8
    19b0:	68 e8       	ldi	r22, 0x88	; 136
    19b2:	73 e1       	ldi	r23, 0x13	; 19
    19b4:	80 e0       	ldi	r24, 0x00	; 0
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	0e 94 a2 20 	call	0x4144	; 0x4144 <Delay>
    19bc:	10 92 1a 03 	sts	0x031A, r1	; 0x80031a <sg_bCellBalanceReady>
    19c0:	10 92 19 03 	sts	0x0319, r1	; 0x800319 <sg_bCellBalancedOnce>
    19c4:	81 e0       	ldi	r24, 0x01	; 1
    19c6:	80 93 18 03 	sts	0x0318, r24	; 0x800318 <sg_bStopDischarge>
    19ca:	eb e6       	ldi	r30, 0x6B	; 107
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	80 81       	ld	r24, Z
    19d0:	82 60       	ori	r24, 0x02	; 2
    19d2:	80 83       	st	Z, r24
    19d4:	e8 e6       	ldi	r30, 0x68	; 104
    19d6:	f0 e0       	ldi	r31, 0x00	; 0
    19d8:	80 81       	ld	r24, Z
    19da:	82 60       	ori	r24, 0x02	; 2
    19dc:	80 83       	st	Z, r24
    19de:	08 c0       	rjmp	.+16     	; 0x19f0 <ModuleControllerStateHandle+0x20e>
    19e0:	48 ef       	ldi	r20, 0xF8	; 248
    19e2:	53 e0       	ldi	r21, 0x03	; 3
    19e4:	67 e4       	ldi	r22, 0x47	; 71
    19e6:	72 e0       	ldi	r23, 0x02	; 2
    19e8:	80 e0       	ldi	r24, 0x00	; 0
    19ea:	0e 94 50 23 	call	0x46a0	; 0x46a0 <PlatformAssert>
    19ee:	d5 e0       	ldi	r29, 0x05	; 5
    19f0:	d0 93 07 01 	sts	0x0107, r29	; 0x800107 <sg_eModuleControllerStateCurrent>
    19f4:	0e 94 65 26 	call	0x4cca	; 0x4cca <SendModuleControllerStatus>
    19f8:	df 91       	pop	r29
    19fa:	cf 91       	pop	r28
    19fc:	1f 91       	pop	r17
    19fe:	08 95       	ret

Disassembly of section .text.PlatformGetRegistrationID:

00004d82 <PlatformGetRegistrationID>:
}

uint8_t PlatformGetRegistrationID( void )
{
	return(sg_u8ModuleRegistrationID);
}
    4d82:	80 91 27 03 	lds	r24, 0x0327	; 0x800327 <sg_u8ModuleRegistrationID>
    4d86:	08 95       	ret

Disassembly of section .text.SetSysclock:

00004d4e <SetSysclock>:

void SetSysclock( void )
{
	// First set the prescaler enable
	CLKPR = (1 << CLKPCE);
    4d4e:	e1 e6       	ldi	r30, 0x61	; 97
    4d50:	f0 e0       	ldi	r31, 0x00	; 0
    4d52:	80 e8       	ldi	r24, 0x80	; 128
    4d54:	80 83       	st	Z, r24
	
	// Now set the desired prescale value
	CLKPR = SYSCLOCK_PRESCALE;
    4d56:	10 82       	st	Z, r1
    4d58:	08 95       	ret

Disassembly of section .text.ModuleControllerGetUniqueID:

000038c0 <ModuleControllerGetUniqueID>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    38c0:	cf 92       	push	r12
    38c2:	df 92       	push	r13
    38c4:	ef 92       	push	r14
    38c6:	ff 92       	push	r15
    38c8:	80 e0       	ldi	r24, 0x00	; 0
    38ca:	90 e0       	ldi	r25, 0x00	; 0
    38cc:	0e 94 38 26 	call	0x4c70	; 0x4c70 <EEPROMRead>
    38d0:	c8 2e       	mov	r12, r24
    38d2:	d1 2c       	mov	r13, r1
    38d4:	e1 2c       	mov	r14, r1
    38d6:	f1 2c       	mov	r15, r1
    38d8:	81 e0       	ldi	r24, 0x01	; 1
    38da:	90 e0       	ldi	r25, 0x00	; 0
    38dc:	0e 94 38 26 	call	0x4c70	; 0x4c70 <EEPROMRead>
    38e0:	90 e0       	ldi	r25, 0x00	; 0
    38e2:	a0 e0       	ldi	r26, 0x00	; 0
    38e4:	b0 e0       	ldi	r27, 0x00	; 0
    38e6:	ba 2f       	mov	r27, r26
    38e8:	a9 2f       	mov	r26, r25
    38ea:	98 2f       	mov	r25, r24
    38ec:	88 27       	eor	r24, r24
    38ee:	c8 2a       	or	r12, r24
    38f0:	d9 2a       	or	r13, r25
    38f2:	ea 2a       	or	r14, r26
    38f4:	fb 2a       	or	r15, r27
    38f6:	82 e0       	ldi	r24, 0x02	; 2
    38f8:	90 e0       	ldi	r25, 0x00	; 0
    38fa:	0e 94 38 26 	call	0x4c70	; 0x4c70 <EEPROMRead>
    38fe:	90 e0       	ldi	r25, 0x00	; 0
    3900:	a0 e0       	ldi	r26, 0x00	; 0
    3902:	b0 e0       	ldi	r27, 0x00	; 0
    3904:	dc 01       	movw	r26, r24
    3906:	99 27       	eor	r25, r25
    3908:	88 27       	eor	r24, r24
    390a:	c8 2a       	or	r12, r24
    390c:	d9 2a       	or	r13, r25
    390e:	ea 2a       	or	r14, r26
    3910:	fb 2a       	or	r15, r27
    3912:	83 e0       	ldi	r24, 0x03	; 3
    3914:	90 e0       	ldi	r25, 0x00	; 0
    3916:	0e 94 38 26 	call	0x4c70	; 0x4c70 <EEPROMRead>
    391a:	90 e0       	ldi	r25, 0x00	; 0
    391c:	a0 e0       	ldi	r26, 0x00	; 0
    391e:	b0 e0       	ldi	r27, 0x00	; 0
    3920:	b8 2f       	mov	r27, r24
    3922:	aa 27       	eor	r26, r26
    3924:	99 27       	eor	r25, r25
    3926:	88 27       	eor	r24, r24
    3928:	bc 01       	movw	r22, r24
    392a:	cd 01       	movw	r24, r26
    392c:	6c 29       	or	r22, r12
    392e:	7d 29       	or	r23, r13
    3930:	8e 29       	or	r24, r14
    3932:	9f 29       	or	r25, r15
    3934:	ff 90       	pop	r15
    3936:	ef 90       	pop	r14
    3938:	df 90       	pop	r13
    393a:	cf 90       	pop	r12
    393c:	08 95       	ret

Disassembly of section .text.TimerInit:

00004196 <TimerInit>:
    4196:	14 bc       	out	0x24, r1	; 36
    4198:	92 e0       	ldi	r25, 0x02	; 2
    419a:	95 bd       	out	0x25, r25	; 37
    419c:	a4 e6       	ldi	r26, 0x64	; 100
    419e:	b0 e0       	ldi	r27, 0x00	; 0
    41a0:	8c 91       	ld	r24, X
    41a2:	87 7f       	andi	r24, 0xF7	; 247
    41a4:	8c 93       	st	X, r24
    41a6:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f0080>
    41aa:	84 e0       	ldi	r24, 0x04	; 4
    41ac:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f0081>
    41b0:	96 bb       	out	0x16, r25	; 22
    41b2:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f0084>
    41b6:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f0085>
    41ba:	8b 5c       	subi	r24, 0xCB	; 203
    41bc:	93 4f       	sbci	r25, 0xF3	; 243
    41be:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f0089>
    41c2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f0088>
    41c6:	ef e6       	ldi	r30, 0x6F	; 111
    41c8:	f0 e0       	ldi	r31, 0x00	; 0
    41ca:	80 81       	ld	r24, Z
    41cc:	82 60       	ori	r24, 0x02	; 2
    41ce:	80 83       	st	Z, r24
    41d0:	8c 91       	ld	r24, X
    41d2:	8f 7e       	andi	r24, 0xEF	; 239
    41d4:	8c 93       	st	X, r24
    41d6:	ae e6       	ldi	r26, 0x6E	; 110
    41d8:	b0 e0       	ldi	r27, 0x00	; 0
    41da:	8c 91       	ld	r24, X
    41dc:	8e 7f       	andi	r24, 0xFE	; 254
    41de:	8c 93       	st	X, r24
    41e0:	80 81       	ld	r24, Z
    41e2:	8e 7f       	andi	r24, 0xFE	; 254
    41e4:	80 83       	st	Z, r24
    41e6:	08 95       	ret

Disassembly of section .text.__vector_12:

000031c0 <__vector_12>:
    31c0:	78 94       	sei
    31c2:	1f 92       	push	r1
    31c4:	0f 92       	push	r0
    31c6:	0f b6       	in	r0, 0x3f	; 63
    31c8:	0f 92       	push	r0
    31ca:	11 24       	eor	r1, r1
    31cc:	8f 93       	push	r24
    31ce:	9f 93       	push	r25
    31d0:	ef 93       	push	r30
    31d2:	ff 93       	push	r31
    31d4:	82 e0       	ldi	r24, 0x02	; 2
    31d6:	86 bb       	out	0x16, r24	; 22
    31d8:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f0084>
    31dc:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f0085>
    31e0:	8b 5c       	subi	r24, 0xCB	; 203
    31e2:	93 4f       	sbci	r25, 0xF3	; 243
    31e4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f0089>
    31e8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f0088>
    31ec:	ef e6       	ldi	r30, 0x6F	; 111
    31ee:	f0 e0       	ldi	r31, 0x00	; 0
    31f0:	80 81       	ld	r24, Z
    31f2:	82 60       	ori	r24, 0x02	; 2
    31f4:	80 83       	st	Z, r24
    31f6:	81 e0       	ldi	r24, 0x01	; 1
    31f8:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <sg_bNewTick>
    31fc:	80 91 73 09 	lds	r24, 0x0973	; 0x800973 <sg_u8CellFrameTimer>
    3200:	8f 5f       	subi	r24, 0xFF	; 255
    3202:	80 93 73 09 	sts	0x0973, r24	; 0x800973 <sg_u8CellFrameTimer>
    3206:	80 91 73 09 	lds	r24, 0x0973	; 0x800973 <sg_u8CellFrameTimer>
    320a:	83 30       	cpi	r24, 0x03	; 3
    320c:	78 f0       	brcs	.+30     	; 0x322c <__vector_12+0x6c>
    320e:	10 92 73 09 	sts	0x0973, r1	; 0x800973 <sg_u8CellFrameTimer>
    3212:	81 e0       	ldi	r24, 0x01	; 1
    3214:	80 93 72 09 	sts	0x0972, r24	; 0x800972 <sg_bFrameStart>
    3218:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <sg_eFrameStatus>
    321c:	81 30       	cpi	r24, 0x01	; 1
    321e:	19 f4       	brne	.+6      	; 0x3226 <__vector_12+0x66>
    3220:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <sg_eFrameStatus>
    3224:	03 c0       	rjmp	.+6      	; 0x322c <__vector_12+0x6c>
    3226:	81 e0       	ldi	r24, 0x01	; 1
    3228:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <sg_eFrameStatus>
    322c:	80 91 70 09 	lds	r24, 0x0970	; 0x800970 <sg_u8TicksSinceLastPackControllerMessage>
    3230:	8f 3f       	cpi	r24, 0xFF	; 255
    3232:	29 f0       	breq	.+10     	; 0x323e <__vector_12+0x7e>
    3234:	80 91 70 09 	lds	r24, 0x0970	; 0x800970 <sg_u8TicksSinceLastPackControllerMessage>
    3238:	8f 5f       	subi	r24, 0xFF	; 255
    323a:	80 93 70 09 	sts	0x0970, r24	; 0x800970 <sg_u8TicksSinceLastPackControllerMessage>
    323e:	80 91 70 09 	lds	r24, 0x0970	; 0x800970 <sg_u8TicksSinceLastPackControllerMessage>
    3242:	8f 36       	cpi	r24, 0x6F	; 111
    3244:	40 f0       	brcs	.+16     	; 0x3256 <__vector_12+0x96>
    3246:	80 91 70 09 	lds	r24, 0x0970	; 0x800970 <sg_u8TicksSinceLastPackControllerMessage>
    324a:	8f 56       	subi	r24, 0x6F	; 111
    324c:	80 93 70 09 	sts	0x0970, r24	; 0x800970 <sg_u8TicksSinceLastPackControllerMessage>
    3250:	81 e0       	ldi	r24, 0x01	; 1
    3252:	80 93 1f 03 	sts	0x031F, r24	; 0x80031f <sg_bPackControllerTimeout>
    3256:	80 91 71 09 	lds	r24, 0x0971	; 0x800971 <sg_u8CellStringPowerTimer>
    325a:	88 23       	and	r24, r24
    325c:	29 f0       	breq	.+10     	; 0x3268 <__vector_12+0xa8>
    325e:	80 91 71 09 	lds	r24, 0x0971	; 0x800971 <sg_u8CellStringPowerTimer>
    3262:	81 50       	subi	r24, 0x01	; 1
    3264:	80 93 71 09 	sts	0x0971, r24	; 0x800971 <sg_u8CellStringPowerTimer>
    3268:	ff 91       	pop	r31
    326a:	ef 91       	pop	r30
    326c:	9f 91       	pop	r25
    326e:	8f 91       	pop	r24
    3270:	0f 90       	pop	r0
    3272:	0f be       	out	0x3f, r0	; 63
    3274:	0f 90       	pop	r0
    3276:	1f 90       	pop	r1
    3278:	18 95       	reti

Disassembly of section .text.WatchdogReset:

00004d90 <WatchdogReset>:
		sg_u8CellStringPowerTimer--;
	}
}

void WatchdogReset( void )
{
    4d90:	08 95       	ret

Disassembly of section .text.WatchdogOff:

00004b78 <WatchdogOff>:
// }

// Assume interrupts are disabled
void WatchdogOff( void )  // turn it off even when WDT_ENABLE is not defined
{
	wdt_reset();
    4b78:	a8 95       	wdr
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    4b7a:	0f b6       	in	r0, 0x3f	; 63
    4b7c:	f8 94       	cli
    4b7e:	a8 95       	wdr
    4b80:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f0060>
    4b84:	88 61       	ori	r24, 0x18	; 24
    4b86:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f0060>
    4b8a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f0060>
    4b8e:	0f be       	out	0x3f, r0	; 63
    4b90:	08 95       	ret

Disassembly of section .text.__vector_28:

000041e8 <__vector_28>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    41e8:	1f 92       	push	r1
    41ea:	0f 92       	push	r0
    41ec:	0f b6       	in	r0, 0x3f	; 63
    41ee:	0f 92       	push	r0
    41f0:	11 24       	eor	r1, r1
    41f2:	2f 93       	push	r18
    41f4:	3f 93       	push	r19
    41f6:	4f 93       	push	r20
    41f8:	5f 93       	push	r21
    41fa:	6f 93       	push	r22
    41fc:	7f 93       	push	r23
    41fe:	8f 93       	push	r24
    4200:	9f 93       	push	r25
    4202:	af 93       	push	r26
    4204:	bf 93       	push	r27
    4206:	ef 93       	push	r30
    4208:	ff 93       	push	r31
    420a:	44 e0       	ldi	r20, 0x04	; 4
    420c:	53 e0       	ldi	r21, 0x03	; 3
    420e:	67 e4       	ldi	r22, 0x47	; 71
    4210:	72 e0       	ldi	r23, 0x02	; 2
    4212:	80 e0       	ldi	r24, 0x00	; 0
    4214:	0e 94 50 23 	call	0x46a0	; 0x46a0 <PlatformAssert>
    4218:	ff 91       	pop	r31
    421a:	ef 91       	pop	r30
    421c:	bf 91       	pop	r27
    421e:	af 91       	pop	r26
    4220:	9f 91       	pop	r25
    4222:	8f 91       	pop	r24
    4224:	7f 91       	pop	r23
    4226:	6f 91       	pop	r22
    4228:	5f 91       	pop	r21
    422a:	4f 91       	pop	r20
    422c:	3f 91       	pop	r19
    422e:	2f 91       	pop	r18
    4230:	0f 90       	pop	r0
    4232:	0f be       	out	0x3f, r0	; 63
    4234:	0f 90       	pop	r0
    4236:	1f 90       	pop	r1
    4238:	18 95       	reti

Disassembly of section .text.__vector_23:

00003596 <__vector_23>:
    3596:	78 94       	sei
    3598:	1f 92       	push	r1
    359a:	0f 92       	push	r0
    359c:	0f b6       	in	r0, 0x3f	; 63
    359e:	0f 92       	push	r0
    35a0:	11 24       	eor	r1, r1
    35a2:	2f 93       	push	r18
    35a4:	3f 93       	push	r19
    35a6:	4f 93       	push	r20
    35a8:	5f 93       	push	r21
    35aa:	6f 93       	push	r22
    35ac:	7f 93       	push	r23
    35ae:	8f 93       	push	r24
    35b0:	9f 93       	push	r25
    35b2:	af 93       	push	r26
    35b4:	bf 93       	push	r27
    35b6:	ef 93       	push	r30
    35b8:	ff 93       	push	r31
    35ba:	96 b1       	in	r25, 0x06	; 6
    35bc:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    35c0:	83 30       	cpi	r24, 0x03	; 3
    35c2:	21 f0       	breq	.+8      	; 0x35cc <__vector_23+0x36>
    35c4:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    35c8:	82 30       	cpi	r24, 0x02	; 2
    35ca:	c9 f4       	brne	.+50     	; 0x35fe <__vector_23+0x68>
    35cc:	91 ff       	sbrs	r25, 1
    35ce:	17 c0       	rjmp	.+46     	; 0x35fe <__vector_23+0x68>
    35d0:	88 b1       	in	r24, 0x08	; 8
    35d2:	8f 7e       	andi	r24, 0xEF	; 239
    35d4:	88 b9       	out	0x08, r24	; 8
    35d6:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    35da:	83 30       	cpi	r24, 0x03	; 3
    35dc:	19 f4       	brne	.+6      	; 0x35e4 <__vector_23+0x4e>
    35de:	81 e0       	ldi	r24, 0x01	; 1
    35e0:	0e 94 b2 26 	call	0x4d64	; 0x4d64 <ModuleControllerStateSet>
    35e4:	eb e6       	ldi	r30, 0x6B	; 107
    35e6:	f0 e0       	ldi	r31, 0x00	; 0
    35e8:	80 81       	ld	r24, Z
    35ea:	8d 7f       	andi	r24, 0xFD	; 253
    35ec:	80 83       	st	Z, r24
    35ee:	e8 e6       	ldi	r30, 0x68	; 104
    35f0:	f0 e0       	ldi	r31, 0x00	; 0
    35f2:	80 81       	ld	r24, Z
    35f4:	8d 7f       	andi	r24, 0xFD	; 253
    35f6:	80 83       	st	Z, r24
    35f8:	81 e0       	ldi	r24, 0x01	; 1
    35fa:	80 93 17 03 	sts	0x0317, r24	; 0x800317 <sg_bOvercurrentSignal>
    35fe:	ff 91       	pop	r31
    3600:	ef 91       	pop	r30
    3602:	bf 91       	pop	r27
    3604:	af 91       	pop	r26
    3606:	9f 91       	pop	r25
    3608:	8f 91       	pop	r24
    360a:	7f 91       	pop	r23
    360c:	6f 91       	pop	r22
    360e:	5f 91       	pop	r21
    3610:	4f 91       	pop	r20
    3612:	3f 91       	pop	r19
    3614:	2f 91       	pop	r18
    3616:	0f 90       	pop	r0
    3618:	0f be       	out	0x3f, r0	; 63
    361a:	0f 90       	pop	r0
    361c:	1f 90       	pop	r1
    361e:	18 95       	reti

Disassembly of section .text.__vector_24:

0000423a <__vector_24>:
    423a:	78 94       	sei
    423c:	1f 92       	push	r1
    423e:	0f 92       	push	r0
    4240:	0f b6       	in	r0, 0x3f	; 63
    4242:	0f 92       	push	r0
    4244:	11 24       	eor	r1, r1
    4246:	2f 93       	push	r18
    4248:	3f 93       	push	r19
    424a:	4f 93       	push	r20
    424c:	5f 93       	push	r21
    424e:	6f 93       	push	r22
    4250:	7f 93       	push	r23
    4252:	8f 93       	push	r24
    4254:	9f 93       	push	r25
    4256:	af 93       	push	r26
    4258:	bf 93       	push	r27
    425a:	ef 93       	push	r30
    425c:	ff 93       	push	r31
    425e:	8b b1       	in	r24, 0x0b	; 11
    4260:	0e 94 c9 25 	call	0x4b92	; 0x4b92 <Check5VLoss>
    4264:	ff 91       	pop	r31
    4266:	ef 91       	pop	r30
    4268:	bf 91       	pop	r27
    426a:	af 91       	pop	r26
    426c:	9f 91       	pop	r25
    426e:	8f 91       	pop	r24
    4270:	7f 91       	pop	r23
    4272:	6f 91       	pop	r22
    4274:	5f 91       	pop	r21
    4276:	4f 91       	pop	r20
    4278:	3f 91       	pop	r19
    427a:	2f 91       	pop	r18
    427c:	0f 90       	pop	r0
    427e:	0f be       	out	0x3f, r0	; 63
    4280:	0f 90       	pop	r0
    4282:	1f 90       	pop	r1
    4284:	18 95       	reti

Disassembly of section .text.vUARTRXStart:

00004c06 <vUARTRXStart>:
}

// Called at the start of cell string data via MC RX
void vUARTRXStart(void)
{
	sg_u8CellBufferRX = 0;
    4c06:	10 92 6e 09 	sts	0x096E, r1	; 0x80096e <sg_u8CellBufferRX>
	sg_u8CellIndex = 0;
    4c0a:	10 92 6f 09 	sts	0x096F, r1	; 0x80096f <sg_u8CellIndex>
	sg_u16BytesReceived = 0;
    4c0e:	10 92 5d 09 	sts	0x095D, r1	; 0x80095d <sg_u16BytesReceived+0x1>
    4c12:	10 92 5c 09 	sts	0x095C, r1	; 0x80095c <sg_u16BytesReceived>
	sg_u8CellReports = 0;
    4c16:	10 92 6d 09 	sts	0x096D, r1	; 0x80096d <sg_u8CellReports>
    4c1a:	08 95       	ret

Disassembly of section .text.vUARTRXEnd:

00004a96 <vUARTRXEnd>:
	// disable the edge interrupt
//	VUART_RX_DISABLE();
	// disable bit timer interrupt, should already be off but just in case
//	TIMER_CHB_INT_DISABLE();
	// update bytes and cells received
	sg_sFrame.sg_u16BytesReceived = sg_u16BytesReceived;
    4a96:	80 91 5c 09 	lds	r24, 0x095C	; 0x80095c <sg_u16BytesReceived>
    4a9a:	90 91 5d 09 	lds	r25, 0x095D	; 0x80095d <sg_u16BytesReceived+0x1>
    4a9e:	e0 e1       	ldi	r30, 0x10	; 16
    4aa0:	f1 e0       	ldi	r31, 0x01	; 1
    4aa2:	94 a7       	std	Z+44, r25	; 0x2c
    4aa4:	83 a7       	std	Z+43, r24	; 0x2b
	sg_sFrame.sg_u8CellCPUCount = sg_u8CellReports;
    4aa6:	80 91 6d 09 	lds	r24, 0x096D	; 0x80096d <sg_u8CellReports>
    4aaa:	85 a7       	std	Z+45, r24	; 0x2d
	sg_u16BytesReceived = 0;
    4aac:	10 92 5d 09 	sts	0x095D, r1	; 0x80095d <sg_u16BytesReceived+0x1>
    4ab0:	10 92 5c 09 	sts	0x095C, r1	; 0x80095c <sg_u16BytesReceived>
	sg_u8CellReports = 0;
    4ab4:	10 92 6d 09 	sts	0x096D, r1	; 0x80096d <sg_u8CellReports>
    4ab8:	08 95       	ret

Disassembly of section .text.vUARTRXData:

00003ba8 <vUARTRXData>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    3ba8:	e0 91 6e 09 	lds	r30, 0x096E	; 0x80096e <sg_u8CellBufferRX>
    3bac:	21 e0       	ldi	r18, 0x01	; 1
    3bae:	2e 0f       	add	r18, r30
    3bb0:	20 93 6e 09 	sts	0x096E, r18	; 0x80096e <sg_u8CellBufferRX>
    3bb4:	f0 e0       	ldi	r31, 0x00	; 0
    3bb6:	e0 5b       	subi	r30, 0xB0	; 176
    3bb8:	f6 4f       	sbci	r31, 0xF6	; 246
    3bba:	80 83       	st	Z, r24
    3bbc:	80 91 5c 09 	lds	r24, 0x095C	; 0x80095c <sg_u16BytesReceived>
    3bc0:	90 91 5d 09 	lds	r25, 0x095D	; 0x80095d <sg_u16BytesReceived+0x1>
    3bc4:	01 96       	adiw	r24, 0x01	; 1
    3bc6:	90 93 5d 09 	sts	0x095D, r25	; 0x80095d <sg_u16BytesReceived+0x1>
    3bca:	80 93 5c 09 	sts	0x095C, r24	; 0x80095c <sg_u16BytesReceived>
    3bce:	24 30       	cpi	r18, 0x04	; 4
    3bd0:	38 f1       	brcs	.+78     	; 0x3c20 <vUARTRXData+0x78>
    3bd2:	10 92 6e 09 	sts	0x096E, r1	; 0x80096e <sg_u8CellBufferRX>
    3bd6:	80 91 6f 09 	lds	r24, 0x096F	; 0x80096f <sg_u8CellIndex>
    3bda:	8c 36       	cpi	r24, 0x6C	; 108
    3bdc:	08 f5       	brcc	.+66     	; 0x3c20 <vUARTRXData+0x78>
    3bde:	e8 2f       	mov	r30, r24
    3be0:	f0 e0       	ldi	r31, 0x00	; 0
    3be2:	75 96       	adiw	r30, 0x15	; 21
    3be4:	ee 0f       	add	r30, r30
    3be6:	ff 1f       	adc	r31, r31
    3be8:	ee 0f       	add	r30, r30
    3bea:	ff 1f       	adc	r31, r31
    3bec:	e0 5f       	subi	r30, 0xF0	; 240
    3bee:	fe 4f       	sbci	r31, 0xFE	; 254
    3bf0:	a0 e5       	ldi	r26, 0x50	; 80
    3bf2:	b9 e0       	ldi	r27, 0x09	; 9
    3bf4:	4d 91       	ld	r20, X+
    3bf6:	5d 91       	ld	r21, X+
    3bf8:	6d 91       	ld	r22, X+
    3bfa:	7c 91       	ld	r23, X
    3bfc:	13 97       	sbiw	r26, 0x03	; 3
    3bfe:	40 83       	st	Z, r20
    3c00:	51 83       	std	Z+1, r21	; 0x01
    3c02:	62 83       	std	Z+2, r22	; 0x02
    3c04:	73 83       	std	Z+3, r23	; 0x03
    3c06:	1d 92       	st	X+, r1
    3c08:	1d 92       	st	X+, r1
    3c0a:	1d 92       	st	X+, r1
    3c0c:	1c 92       	st	X, r1
    3c0e:	13 97       	sbiw	r26, 0x03	; 3
    3c10:	8f 5f       	subi	r24, 0xFF	; 255
    3c12:	80 93 6f 09 	sts	0x096F, r24	; 0x80096f <sg_u8CellIndex>
    3c16:	80 91 6d 09 	lds	r24, 0x096D	; 0x80096d <sg_u8CellReports>
    3c1a:	8f 5f       	subi	r24, 0xFF	; 255
    3c1c:	80 93 6d 09 	sts	0x096D, r24	; 0x80096d <sg_u8CellReports>
    3c20:	08 95       	ret

Disassembly of section .text.PlatformGetSendData:

0000474a <PlatformGetSendData>:
uint16_t PlatformGetSendData( bool bUpdateBalanceStatus )
{
	uint16_t u16SendValue = 0;
	
	
	if( sg_bStopDischarge )
    474a:	90 91 18 03 	lds	r25, 0x0318	; 0x800318 <sg_bStopDischarge>
    474e:	99 23       	and	r25, r25
    4750:	51 f0       	breq	.+20     	; 0x4766 <PlatformGetSendData+0x1c>
	{
		if (bUpdateBalanceStatus)	// don't update if ony an availability check
    4752:	88 23       	and	r24, r24
    4754:	59 f0       	breq	.+22     	; 0x476c <PlatformGetSendData+0x22>
		{
			sg_bStopDischarge = false;
    4756:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <sg_bStopDischarge>
			sg_bCellBalancedOnce = true;
    475a:	81 e0       	ldi	r24, 0x01	; 1
    475c:	80 93 19 03 	sts	0x0319, r24	; 0x800319 <sg_bCellBalancedOnce>
		}
		u16SendValue = 0x3ff;
    4760:	8f ef       	ldi	r24, 0xFF	; 255
    4762:	93 e0       	ldi	r25, 0x03	; 3
    4764:	08 95       	ret
			}
		}
		else
#endif
		{
			u16SendValue |= MSG_CELL_SEND_REPORT;
    4766:	80 e0       	ldi	r24, 0x00	; 0
    4768:	90 e8       	ldi	r25, 0x80	; 128
    476a:	08 95       	ret
		if (bUpdateBalanceStatus)	// don't update if ony an availability check
		{
			sg_bStopDischarge = false;
			sg_bCellBalancedOnce = true;
		}
		u16SendValue = 0x3ff;
    476c:	8f ef       	ldi	r24, 0xFF	; 255
    476e:	93 e0       	ldi	r25, 0x03	; 3
#endif
		}
	}
	
	return( u16SendValue );
}
    4770:	08 95       	ret

Disassembly of section .text.ADCCallback:

000047e8 <ADCCallback>:
// Called every time there's an ADC read since apparently ISR can't access global variables?  compiler fails
void ADCCallback(EADCType eType,
				 uint16_t u16Reading)
{
	// End of chain? Indicate it's time for an ADC update
	if ((EADCTYPE_COUNT-1) == eType)
    47e8:	84 30       	cpi	r24, 0x04	; 4
    47ea:	19 f4       	brne	.+6      	; 0x47f2 <ADCCallback+0xa>
	{
		sg_bADCUpdate = true;
    47ec:	91 e0       	ldi	r25, 0x01	; 1
    47ee:	90 93 16 03 	sts	0x0316, r25	; 0x800316 <sg_bADCUpdate>
	}
	sg_sFrame.ADCReadings[eType].u16Reading = u16Reading;
    47f2:	90 e0       	ldi	r25, 0x00	; 0
    47f4:	fc 01       	movw	r30, r24
    47f6:	ee 0f       	add	r30, r30
    47f8:	ff 1f       	adc	r31, r31
    47fa:	8e 0f       	add	r24, r30
    47fc:	9f 1f       	adc	r25, r31
    47fe:	fc 01       	movw	r30, r24
    4800:	eb 5a       	subi	r30, 0xAB	; 171
    4802:	fe 4f       	sbci	r31, 0xFE	; 254
    4804:	72 83       	std	Z+2, r23	; 0x02
    4806:	61 83       	std	Z+1, r22	; 0x01
	sg_sFrame.ADCReadings[eType].bValid = true;
    4808:	81 e0       	ldi	r24, 0x01	; 1
    480a:	80 83       	st	Z, r24
    480c:	08 95       	ret

Disassembly of section .text.FrameInit:

00002a82 <FrameInit>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    2a82:	cf 93       	push	r28
    2a84:	df 93       	push	r29
    2a86:	81 11       	cpse	r24, r1
    2a88:	0d c0       	rjmp	.+26     	; 0x2aa4 <FrameInit+0x22>
    2a8a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <sg_sFrame>
    2a8e:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <sg_sFrame+0x1>
    2a92:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <sg_sFrame+0x2>
    2a96:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <sg_sFrame+0x3>
    2a9a:	8a 37       	cpi	r24, 0x7A	; 122
    2a9c:	9a 4d       	sbci	r25, 0xDA	; 218
    2a9e:	a7 47       	sbci	r26, 0x77	; 119
    2aa0:	ba 4b       	sbci	r27, 0xBA	; 186
    2aa2:	19 f1       	breq	.+70     	; 0x2aea <FrameInit+0x68>
    2aa4:	c0 e1       	ldi	r28, 0x10	; 16
    2aa6:	d1 e0       	ldi	r29, 0x01	; 1
    2aa8:	84 e0       	ldi	r24, 0x04	; 4
    2aaa:	92 e0       	ldi	r25, 0x02	; 2
    2aac:	de 01       	movw	r26, r28
    2aae:	fc 01       	movw	r30, r24
    2ab0:	1d 92       	st	X+, r1
    2ab2:	31 97       	sbiw	r30, 0x01	; 1
    2ab4:	e9 f7       	brne	.-6      	; 0x2ab0 <FrameInit+0x2e>
    2ab6:	9d 83       	std	Y+5, r25	; 0x05
    2ab8:	8c 83       	std	Y+4, r24	; 0x04
    2aba:	8a e7       	ldi	r24, 0x7A	; 122
    2abc:	9a ed       	ldi	r25, 0xDA	; 218
    2abe:	a7 e7       	ldi	r26, 0x77	; 119
    2ac0:	ba eb       	ldi	r27, 0xBA	; 186
    2ac2:	88 83       	st	Y, r24
    2ac4:	99 83       	std	Y+1, r25	; 0x01
    2ac6:	aa 83       	std	Y+2, r26	; 0x02
    2ac8:	bb 83       	std	Y+3, r27	; 0x03
    2aca:	0e 94 60 1c 	call	0x38c0	; 0x38c0 <ModuleControllerGetUniqueID>
    2ace:	6e 87       	std	Y+14, r22	; 0x0e
    2ad0:	7f 87       	std	Y+15, r23	; 0x0f
    2ad2:	88 8b       	std	Y+16, r24	; 0x10
    2ad4:	99 8b       	std	Y+17, r25	; 0x11
    2ad6:	8f ef       	ldi	r24, 0xFF	; 255
    2ad8:	8a a7       	std	Y+42, r24	; 0x2a
    2ada:	8b 8b       	std	Y+19, r24	; 0x13
    2adc:	84 e0       	ldi	r24, 0x04	; 4
    2ade:	90 e0       	ldi	r25, 0x00	; 0
    2ae0:	0e 94 38 26 	call	0x4c70	; 0x4c70 <EEPROMRead>
    2ae4:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <CellCountExpectedSet>
    2ae8:	34 c0       	rjmp	.+104    	; 0x2b52 <FrameInit+0xd0>
    2aea:	80 eb       	ldi	r24, 0xB0	; 176
    2aec:	91 e0       	ldi	r25, 0x01	; 1
    2aee:	e4 e6       	ldi	r30, 0x64	; 100
    2af0:	f1 e0       	ldi	r31, 0x01	; 1
    2af2:	df 01       	movw	r26, r30
    2af4:	9c 01       	movw	r18, r24
    2af6:	1d 92       	st	X+, r1
    2af8:	21 50       	subi	r18, 0x01	; 1
    2afa:	30 40       	sbci	r19, 0x00	; 0
    2afc:	e1 f7       	brne	.-8      	; 0x2af6 <FrameInit+0x74>
    2afe:	e0 e1       	ldi	r30, 0x10	; 16
    2b00:	f1 e0       	ldi	r31, 0x01	; 1
    2b02:	17 a2       	std	Z+39, r1	; 0x27
    2b04:	11 a6       	std	Z+41, r1	; 0x29
    2b06:	10 a6       	std	Z+40, r1	; 0x28
    2b08:	12 a6       	std	Z+42, r1	; 0x2a
    2b0a:	15 a6       	std	Z+45, r1	; 0x2d
    2b0c:	16 a6       	std	Z+46, r1	; 0x2e
    2b0e:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <sg_sFrame+0x3d>
    2b12:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <sg_sFrame+0x3e>
    2b16:	a0 91 4f 01 	lds	r26, 0x014F	; 0x80014f <sg_sFrame+0x3f>
    2b1a:	b0 91 50 01 	lds	r27, 0x0150	; 0x800150 <sg_sFrame+0x40>
    2b1e:	89 2b       	or	r24, r25
    2b20:	8a 2b       	or	r24, r26
    2b22:	8b 2b       	or	r24, r27
    2b24:	b1 f4       	brne	.+44     	; 0x2b52 <FrameInit+0xd0>
    2b26:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <sg_sFrame+0x3d>
    2b2a:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <sg_sFrame+0x3e>
    2b2e:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <sg_sFrame+0x3f>
    2b32:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <sg_sFrame+0x40>
    2b36:	10 ae       	std	Z+56, r1	; 0x38
    2b38:	17 aa       	std	Z+55, r1	; 0x37
    2b3a:	12 ae       	std	Z+58, r1	; 0x3a
    2b3c:	11 ae       	std	Z+57, r1	; 0x39
    2b3e:	14 ae       	std	Z+60, r1	; 0x3c
    2b40:	13 ae       	std	Z+59, r1	; 0x3b
    2b42:	8f e9       	ldi	r24, 0x9F	; 159
    2b44:	95 e1       	ldi	r25, 0x15	; 21
    2b46:	92 ab       	std	Z+50, r25	; 0x32
    2b48:	81 ab       	std	Z+49, r24	; 0x31
    2b4a:	94 ab       	std	Z+52, r25	; 0x34
    2b4c:	83 ab       	std	Z+51, r24	; 0x33
    2b4e:	96 ab       	std	Z+54, r25	; 0x36
    2b50:	85 ab       	std	Z+53, r24	; 0x35
    2b52:	8f ef       	ldi	r24, 0xFF	; 255
    2b54:	80 93 77 09 	sts	0x0977, r24	; 0x800977 <sg_u8CurrentBufferIndex>
    2b58:	df 91       	pop	r29
    2b5a:	cf 91       	pop	r28
    2b5c:	08 95       	ret

Disassembly of section .text.CellStringPowerStateMachine:

000036aa <CellStringPowerStateMachine>:
    36aa:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <sg_eStringPowerState>
    36ae:	82 30       	cpi	r24, 0x02	; 2
    36b0:	49 f1       	breq	.+82     	; 0x3704 <CellStringPowerStateMachine+0x5a>
    36b2:	28 f4       	brcc	.+10     	; 0x36be <CellStringPowerStateMachine+0x14>
    36b4:	88 23       	and	r24, r24
    36b6:	41 f0       	breq	.+16     	; 0x36c8 <CellStringPowerStateMachine+0x1e>
    36b8:	81 30       	cpi	r24, 0x01	; 1
    36ba:	91 f0       	breq	.+36     	; 0x36e0 <CellStringPowerStateMachine+0x36>
    36bc:	32 c0       	rjmp	.+100    	; 0x3722 <CellStringPowerStateMachine+0x78>
    36be:	83 30       	cpi	r24, 0x03	; 3
    36c0:	61 f1       	breq	.+88     	; 0x371a <CellStringPowerStateMachine+0x70>
    36c2:	84 30       	cpi	r24, 0x04	; 4
    36c4:	a9 f1       	breq	.+106    	; 0x3730 <CellStringPowerStateMachine+0x86>
    36c6:	2d c0       	rjmp	.+90     	; 0x3722 <CellStringPowerStateMachine+0x78>
    36c8:	85 b1       	in	r24, 0x05	; 5
    36ca:	8f 7e       	andi	r24, 0xEF	; 239
    36cc:	85 b9       	out	0x05, r24	; 5
    36ce:	81 e0       	ldi	r24, 0x01	; 1
    36d0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <sg_eStringPowerState>
    36d4:	80 e0       	ldi	r24, 0x00	; 0
    36d6:	0e 94 41 15 	call	0x2a82	; 0x2a82 <FrameInit>
    36da:	0e 94 65 26 	call	0x4cca	; 0x4cca <SendModuleControllerStatus>
    36de:	08 95       	ret
    36e0:	85 b1       	in	r24, 0x05	; 5
    36e2:	8f 7e       	andi	r24, 0xEF	; 239
    36e4:	85 b9       	out	0x05, r24	; 5
    36e6:	80 e0       	ldi	r24, 0x00	; 0
    36e8:	0e 94 41 15 	call	0x2a82	; 0x2a82 <FrameInit>
    36ec:	82 e0       	ldi	r24, 0x02	; 2
    36ee:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <sg_eStringPowerState>
    36f2:	81 e0       	ldi	r24, 0x01	; 1
    36f4:	80 93 71 09 	sts	0x0971, r24	; 0x800971 <sg_u8CellStringPowerTimer>
    36f8:	e0 e1       	ldi	r30, 0x10	; 16
    36fa:	f1 e0       	ldi	r31, 0x01	; 1
    36fc:	8f ef       	ldi	r24, 0xFF	; 255
    36fe:	83 8b       	std	Z+19, r24	; 0x13
    3700:	14 8a       	std	Z+20, r1	; 0x14
    3702:	08 95       	ret
    3704:	80 91 71 09 	lds	r24, 0x0971	; 0x800971 <sg_u8CellStringPowerTimer>
    3708:	81 11       	cpse	r24, r1
    370a:	12 c0       	rjmp	.+36     	; 0x3730 <CellStringPowerStateMachine+0x86>
    370c:	85 b1       	in	r24, 0x05	; 5
    370e:	80 61       	ori	r24, 0x10	; 16
    3710:	85 b9       	out	0x05, r24	; 5
    3712:	83 e0       	ldi	r24, 0x03	; 3
    3714:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <sg_eStringPowerState>
    3718:	08 95       	ret
    371a:	84 e0       	ldi	r24, 0x04	; 4
    371c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <sg_eStringPowerState>
    3720:	08 95       	ret
    3722:	4b e6       	ldi	r20, 0x6B	; 107
    3724:	52 e0       	ldi	r21, 0x02	; 2
    3726:	67 e4       	ldi	r22, 0x47	; 71
    3728:	72 e0       	ldi	r23, 0x02	; 2
    372a:	80 e0       	ldi	r24, 0x00	; 0
    372c:	0e 94 50 23 	call	0x46a0	; 0x46a0 <PlatformAssert>
    3730:	08 95       	ret

Disassembly of section .text.main:

00000b7a <main>:
 b7a:	cf 93       	push	r28
 b7c:	df 93       	push	r29
 b7e:	cd b7       	in	r28, 0x3d	; 61
 b80:	de b7       	in	r29, 0x3e	; 62
 b82:	28 97       	sbiw	r28, 0x08	; 8
 b84:	0f b6       	in	r0, 0x3f	; 63
 b86:	f8 94       	cli
 b88:	de bf       	out	0x3e, r29	; 62
 b8a:	0f be       	out	0x3f, r0	; 63
 b8c:	cd bf       	out	0x3d, r28	; 61
 b8e:	0e 94 bc 25 	call	0x4b78	; 0x4b78 <WatchdogOff>
 b92:	88 b1       	in	r24, 0x08	; 8
 b94:	8f 7e       	andi	r24, 0xEF	; 239
 b96:	88 b9       	out	0x08, r24	; 8
 b98:	87 b1       	in	r24, 0x07	; 7
 b9a:	80 61       	ori	r24, 0x10	; 16
 b9c:	87 b9       	out	0x07, r24	; 7
 b9e:	87 b1       	in	r24, 0x07	; 7
 ba0:	8d 7f       	andi	r24, 0xFD	; 253
 ba2:	87 b9       	out	0x07, r24	; 7
 ba4:	87 b1       	in	r24, 0x07	; 7
 ba6:	80 68       	ori	r24, 0x80	; 128
 ba8:	87 b9       	out	0x07, r24	; 7
 baa:	88 b1       	in	r24, 0x08	; 8
 bac:	8f 7e       	andi	r24, 0xEF	; 239
 bae:	88 b9       	out	0x08, r24	; 8
 bb0:	8d b1       	in	r24, 0x0d	; 13
 bb2:	82 60       	ori	r24, 0x02	; 2
 bb4:	8d b9       	out	0x0d, r24	; 13
 bb6:	8e b1       	in	r24, 0x0e	; 14
 bb8:	8d 7f       	andi	r24, 0xFD	; 253
 bba:	8e b9       	out	0x0e, r24	; 14
 bbc:	84 b1       	in	r24, 0x04	; 4
 bbe:	80 61       	ori	r24, 0x10	; 16
 bc0:	84 b9       	out	0x04, r24	; 4
 bc2:	85 b1       	in	r24, 0x05	; 5
 bc4:	8f 7e       	andi	r24, 0xEF	; 239
 bc6:	85 b9       	out	0x05, r24	; 5
 bc8:	e0 e0       	ldi	r30, 0x00	; 0
 bca:	f8 e0       	ldi	r31, 0x08	; 8
 bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <main+0x58>
 bce:	8a ea       	ldi	r24, 0xAA	; 170
 bd0:	81 93       	st	Z+, r24
 bd2:	e1 15       	cp	r30, r1
 bd4:	80 e1       	ldi	r24, 0x10	; 16
 bd6:	f8 07       	cpc	r31, r24
 bd8:	d0 f3       	brcs	.-12     	; 0xbce <main+0x54>
 bda:	84 b7       	in	r24, 0x34	; 52
 bdc:	80 93 6b 09 	sts	0x096B, r24	; 0x80096b <sg_u8Reason>
 be0:	80 91 6b 09 	lds	r24, 0x096B	; 0x80096b <sg_u8Reason>
 be4:	83 ff       	sbrs	r24, 3
 be6:	0a c0       	rjmp	.+20     	; 0xbfc <main+0x82>
 be8:	80 91 28 03 	lds	r24, 0x0328	; 0x800328 <sg_eWDTCurrentStatus>
 bec:	e0 e1       	ldi	r30, 0x10	; 16
 bee:	f1 e0       	ldi	r31, 0x01	; 1
 bf0:	82 89       	ldd	r24, Z+18	; 0x12
 bf2:	8f 5f       	subi	r24, 0xFF	; 255
 bf4:	82 8b       	std	Z+18, r24	; 0x12
 bf6:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <ModuleControllerStateHandle>
 bfa:	47 c0       	rjmp	.+142    	; 0xc8a <main+0x110>
 bfc:	80 91 6b 09 	lds	r24, 0x096B	; 0x80096b <sg_u8Reason>
 c00:	80 91 6b 09 	lds	r24, 0x096B	; 0x80096b <sg_u8Reason>
 c04:	80 91 6b 09 	lds	r24, 0x096B	; 0x80096b <sg_u8Reason>
 c08:	f8 94       	cli
 c0a:	0e 94 a7 26 	call	0x4d4e	; 0x4d4e <SetSysclock>
 c0e:	0e 94 cb 20 	call	0x4196	; 0x4196 <TimerInit>
 c12:	0e 94 f5 22 	call	0x45ea	; 0x45ea <vUARTInit>
 c16:	0e 94 20 11 	call	0x2240	; 0x2240 <ADCInit>
 c1a:	0e 94 1f 1c 	call	0x383e	; 0x383e <STORE_Init>
 c1e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <sg_bSDCardReady>
 c22:	81 e0       	ldi	r24, 0x01	; 1
 c24:	0e 94 41 15 	call	0x2a82	; 0x2a82 <FrameInit>
 c28:	89 e0       	ldi	r24, 0x09	; 9
 c2a:	90 e0       	ldi	r25, 0x00	; 0
 c2c:	0e 94 38 26 	call	0x4c70	; 0x4c70 <EEPROMRead>
 c30:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <sg_u8SequentailCountMismatchThreshold>
 c34:	8a b1       	in	r24, 0x0a	; 10
 c36:	8f 7b       	andi	r24, 0xBF	; 191
 c38:	8a b9       	out	0x0a, r24	; 10
 c3a:	8b b1       	in	r24, 0x0b	; 11
 c3c:	80 64       	ori	r24, 0x40	; 64
 c3e:	8b b9       	out	0x0b, r24	; 11
 c40:	11 e0       	ldi	r17, 0x01	; 1
 c42:	1b bb       	out	0x1b, r17	; 27
 c44:	82 e0       	ldi	r24, 0x02	; 2
 c46:	8b bb       	out	0x1b, r24	; 27
 c48:	84 e0       	ldi	r24, 0x04	; 4
 c4a:	8b bb       	out	0x1b, r24	; 27
 c4c:	88 e0       	ldi	r24, 0x08	; 8
 c4e:	8b bb       	out	0x1b, r24	; 27
 c50:	ec e6       	ldi	r30, 0x6C	; 108
 c52:	f0 e0       	ldi	r31, 0x00	; 0
 c54:	80 81       	ld	r24, Z
 c56:	80 64       	ori	r24, 0x40	; 64
 c58:	80 83       	st	Z, r24
 c5a:	8b b3       	in	r24, 0x1b	; 27
 c5c:	84 60       	ori	r24, 0x04	; 4
 c5e:	8b bb       	out	0x1b, r24	; 27
 c60:	8c e6       	ldi	r24, 0x6C	; 108
 c62:	98 e0       	ldi	r25, 0x08	; 8
 c64:	0e 94 ad 26 	call	0x4d5a	; 0x4d5a <CANSetRXCallback>
 c68:	0e 94 33 1a 	call	0x3466	; 0x3466 <CANInit>
 c6c:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <RTCInit>
 c70:	85 e0       	ldi	r24, 0x05	; 5
 c72:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <sg_eModuleControllerStateCurrent>
 c76:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <sg_eModuleControllerStateTarget>
 c7a:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <sg_eModuleControllerStateMax>
 c7e:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <sg_bModuleRegistered>
 c82:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <sg_eStringPowerState>
 c86:	10 93 0c 01 	sts	0x010C, r17	; 0x80010c <sg_eFrameStatus>
 c8a:	78 94       	sei
 c8c:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <sg_bNewTick>
 c90:	88 23       	and	r24, r24
 c92:	e1 f3       	breq	.-8      	; 0xc8c <main+0x112>
 c94:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <sg_bNewTick>
 c98:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <sg_bModuleRegistered>
 c9c:	81 11       	cpse	r24, r1
 c9e:	22 c0       	rjmp	.+68     	; 0xce4 <main+0x16a>
 ca0:	80 91 76 09 	lds	r24, 0x0976	; 0x800976 <sg_bAnnouncementPending>
 ca4:	88 23       	and	r24, r24
 ca6:	11 f1       	breq	.+68     	; 0xcec <main+0x172>
 ca8:	80 91 75 09 	lds	r24, 0x0975	; 0x800975 <sg_u8AnnouncementDelayTicks>
 cac:	88 23       	and	r24, r24
 cae:	29 f0       	breq	.+10     	; 0xcba <main+0x140>
 cb0:	80 91 75 09 	lds	r24, 0x0975	; 0x800975 <sg_u8AnnouncementDelayTicks>
 cb4:	81 50       	subi	r24, 0x01	; 1
 cb6:	80 93 75 09 	sts	0x0975, r24	; 0x800975 <sg_u8AnnouncementDelayTicks>
 cba:	80 91 75 09 	lds	r24, 0x0975	; 0x800975 <sg_u8AnnouncementDelayTicks>
 cbe:	81 11       	cpse	r24, r1
 cc0:	15 c0       	rjmp	.+42     	; 0xcec <main+0x172>
 cc2:	81 e0       	ldi	r24, 0x01	; 1
 cc4:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <sg_bSendAnnouncement>
 cc8:	10 92 76 09 	sts	0x0976, r1	; 0x800976 <sg_bAnnouncementPending>
 ccc:	83 e5       	ldi	r24, 0x53	; 83
 cce:	92 e0       	ldi	r25, 0x02	; 2
 cd0:	a0 e0       	ldi	r26, 0x00	; 0
 cd2:	af 93       	push	r26
 cd4:	9f 93       	push	r25
 cd6:	8f 93       	push	r24
 cd8:	0e 94 85 26 	call	0x4d0a	; 0x4d0a <DebugOut>
 cdc:	0f 90       	pop	r0
 cde:	0f 90       	pop	r0
 ce0:	0f 90       	pop	r0
 ce2:	04 c0       	rjmp	.+8      	; 0xcec <main+0x172>
 ce4:	ce 01       	movw	r24, r28
 ce6:	01 96       	adiw	r24, 0x01	; 1
 ce8:	0e 94 08 04 	call	0x810	; 0x810 <ControllerStatusMessagesSend>
 cec:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <sg_bPackControllerTimeout>
 cf0:	88 23       	and	r24, r24
 cf2:	81 f0       	breq	.+32     	; 0xd14 <main+0x19a>
 cf4:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <sg_bPackControllerTimeout>
 cf8:	10 92 27 03 	sts	0x0327, r1	; 0x800327 <sg_u8ModuleRegistrationID>
 cfc:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <sg_bModuleRegistered>
 d00:	10 92 74 09 	sts	0x0974, r1	; 0x800974 <sg_bIgnoreStatusRequests>
 d04:	81 e0       	ldi	r24, 0x01	; 1
 d06:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <sg_bSendAnnouncement>
 d0a:	0e 94 65 26 	call	0x4cca	; 0x4cca <SendModuleControllerStatus>
 d0e:	80 e0       	ldi	r24, 0x00	; 0
 d10:	0e 94 b2 26 	call	0x4d64	; 0x4d64 <ModuleControllerStateSet>
 d14:	ef e6       	ldi	r30, 0x6F	; 111
 d16:	f0 e0       	ldi	r31, 0x00	; 0
 d18:	90 81       	ld	r25, Z
 d1a:	80 81       	ld	r24, Z
 d1c:	8d 7f       	andi	r24, 0xFD	; 253
 d1e:	80 83       	st	Z, r24
 d20:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <sg_eFrameStatus>
 d24:	20 91 72 09 	lds	r18, 0x0972	; 0x800972 <sg_bFrameStart>
 d28:	90 83       	st	Z, r25
 d2a:	81 30       	cpi	r24, 0x01	; 1
 d2c:	09 f0       	breq	.+2      	; 0xd30 <main+0x1b6>
 d2e:	61 c0       	rjmp	.+194    	; 0xdf2 <main+0x278>
 d30:	22 23       	and	r18, r18
 d32:	09 f4       	brne	.+2      	; 0xd36 <main+0x1bc>
 d34:	55 c0       	rjmp	.+170    	; 0xde0 <main+0x266>
 d36:	10 92 72 09 	sts	0x0972, r1	; 0x800972 <sg_bFrameStart>
 d3a:	0e 94 55 1b 	call	0x36aa	; 0x36aa <CellStringPowerStateMachine>
 d3e:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <vUARTRXEnd>
 d42:	ce 01       	movw	r24, r28
 d44:	01 96       	adiw	r24, 0x01	; 1
 d46:	0e 94 17 07 	call	0xe2e	; 0xe2e <CellStringProcess>
 d4a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <sg_eStringPowerState>
 d4e:	84 30       	cpi	r24, 0x04	; 4
 d50:	29 f5       	brne	.+74     	; 0xd9c <main+0x222>
 d52:	e0 e1       	ldi	r30, 0x10	; 16
 d54:	f1 e0       	ldi	r31, 0x01	; 1
 d56:	95 a5       	ldd	r25, Z+45	; 0x2d
 d58:	85 89       	ldd	r24, Z+21	; 0x15
 d5a:	98 17       	cp	r25, r24
 d5c:	e9 f0       	breq	.+58     	; 0xd98 <main+0x21e>
 d5e:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <sg_sFrame+0x15>
 d62:	88 23       	and	r24, r24
 d64:	c9 f0       	breq	.+50     	; 0xd98 <main+0x21e>
 d66:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <sg_u8SequentailCountMismatchThreshold>
 d6a:	88 23       	and	r24, r24
 d6c:	b9 f0       	breq	.+46     	; 0xd9c <main+0x222>
 d6e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <sg_u8SequentailCountMismatchThreshold>
 d72:	8f 3f       	cpi	r24, 0xFF	; 255
 d74:	99 f0       	breq	.+38     	; 0xd9c <main+0x222>
 d76:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <sg_u8SequentailCellCountMismatches>
 d7a:	8f 5f       	subi	r24, 0xFF	; 255
 d7c:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <sg_u8SequentailCellCountMismatches>
 d80:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <sg_u8SequentailCellCountMismatches>
 d84:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <sg_u8SequentailCountMismatchThreshold>
 d88:	98 17       	cp	r25, r24
 d8a:	40 f0       	brcs	.+16     	; 0xd9c <main+0x222>
 d8c:	81 e0       	ldi	r24, 0x01	; 1
 d8e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <sg_eStringPowerState>
 d92:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <sg_u8SequentailCellCountMismatches>
 d96:	02 c0       	rjmp	.+4      	; 0xd9c <main+0x222>
 d98:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <sg_u8SequentailCellCountMismatches>
 d9c:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <sg_bSendAnnouncement>
 da0:	88 23       	and	r24, r24
 da2:	f1 f0       	breq	.+60     	; 0xde0 <main+0x266>
 da4:	86 e5       	ldi	r24, 0x56	; 86
 da6:	89 83       	std	Y+1, r24	; 0x01
 da8:	80 e2       	ldi	r24, 0x20	; 32
 daa:	8a 83       	std	Y+2, r24	; 0x02
 dac:	82 e0       	ldi	r24, 0x02	; 2
 dae:	8b 83       	std	Y+3, r24	; 0x03
 db0:	83 e0       	ldi	r24, 0x03	; 3
 db2:	8c 83       	std	Y+4, r24	; 0x04
 db4:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <sg_sFrame+0xe>
 db8:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <sg_sFrame+0xf>
 dbc:	a0 91 20 01 	lds	r26, 0x0120	; 0x800120 <sg_sFrame+0x10>
 dc0:	b0 91 21 01 	lds	r27, 0x0121	; 0x800121 <sg_sFrame+0x11>
 dc4:	8d 83       	std	Y+5, r24	; 0x05
 dc6:	9e 83       	std	Y+6, r25	; 0x06
 dc8:	af 83       	std	Y+7, r26	; 0x07
 dca:	b8 87       	std	Y+8, r27	; 0x08
 dcc:	48 e0       	ldi	r20, 0x08	; 8
 dce:	be 01       	movw	r22, r28
 dd0:	6f 5f       	subi	r22, 0xFF	; 255
 dd2:	7f 4f       	sbci	r23, 0xFF	; 255
 dd4:	80 e0       	ldi	r24, 0x00	; 0
 dd6:	0e 94 ed 25 	call	0x4bda	; 0x4bda <CANSendMessage>
 dda:	81 11       	cpse	r24, r1
 ddc:	10 92 22 03 	sts	0x0322, r1	; 0x800322 <sg_bSendAnnouncement>
 de0:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <ModuleControllerStateHandle>
 de4:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <sg_bOvercurrentSignal>
 de8:	88 23       	and	r24, r24
 dea:	b1 f0       	breq	.+44     	; 0xe18 <main+0x29e>
 dec:	10 92 17 03 	sts	0x0317, r1	; 0x800317 <sg_bOvercurrentSignal>
 df0:	13 c0       	rjmp	.+38     	; 0xe18 <main+0x29e>
 df2:	22 23       	and	r18, r18
 df4:	89 f0       	breq	.+34     	; 0xe18 <main+0x29e>
 df6:	10 92 72 09 	sts	0x0972, r1	; 0x800972 <sg_bFrameStart>
 dfa:	0e 94 55 1b 	call	0x36aa	; 0x36aa <CellStringPowerStateMachine>
 dfe:	80 e0       	ldi	r24, 0x00	; 0
 e00:	0e 94 41 15 	call	0x2a82	; 0x2a82 <FrameInit>
 e04:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <sg_eStringPowerState>
 e08:	84 30       	cpi	r24, 0x04	; 4
 e0a:	31 f4       	brne	.+12     	; 0xe18 <main+0x29e>
 e0c:	0e 94 2e 26 	call	0x4c5c	; 0x4c5c <vUARTInitReceive>
 e10:	0e 94 b7 26 	call	0x4d6e	; 0x4d6e <vUARTRXReset>
 e14:	0e 94 f8 1f 	call	0x3ff0	; 0x3ff0 <vUARTStarttx>
 e18:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <sg_bADCUpdate>
 e1c:	88 23       	and	r24, r24
 e1e:	21 f0       	breq	.+8      	; 0xe28 <main+0x2ae>
 e20:	10 92 16 03 	sts	0x0316, r1	; 0x800316 <sg_bADCUpdate>
 e24:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <ModuleCurrentConvertReadings>
 e28:	0e 94 7c 23 	call	0x46f8	; 0x46f8 <ADCStartConversion>
 e2c:	2f cf       	rjmp	.-418    	; 0xc8c <main+0x112>

Disassembly of section .text.IsLeapYear:

000044b8 <IsLeapYear>:
	return( bResult );
}

// Returns true if u16Year is a leap year
static bool IsLeapYear(uint16_t u16Year)
{
    44b8:	9c 01       	movw	r18, r24
	bool bLeapYear = false;
	
	if ((u16Year % 400) == 0)
    44ba:	60 e9       	ldi	r22, 0x90	; 144
    44bc:	71 e0       	ldi	r23, 0x01	; 1
    44be:	0e 94 b9 23 	call	0x4772	; 0x4772 <__udivmodhi4>
    44c2:	89 2b       	or	r24, r25
    44c4:	69 f0       	breq	.+26     	; 0x44e0 <IsLeapYear+0x28>
	{
		bLeapYear = true;
	}
	else
	if ((u16Year % 100) == 0)
    44c6:	c9 01       	movw	r24, r18
    44c8:	64 e6       	ldi	r22, 0x64	; 100
    44ca:	70 e0       	ldi	r23, 0x00	; 0
    44cc:	0e 94 b9 23 	call	0x4772	; 0x4772 <__udivmodhi4>
    44d0:	89 2b       	or	r24, r25
    44d2:	41 f0       	breq	.+16     	; 0x44e4 <IsLeapYear+0x2c>
	{
		// Not a leap year if divisible by 100 but not by 400
	}
	else
	if ((u16Year % 4) == 0)
    44d4:	23 70       	andi	r18, 0x03	; 3
    44d6:	33 27       	eor	r19, r19
    44d8:	23 2b       	or	r18, r19
    44da:	31 f0       	breq	.+12     	; 0x44e8 <IsLeapYear+0x30>
}

// Returns true if u16Year is a leap year
static bool IsLeapYear(uint16_t u16Year)
{
	bool bLeapYear = false;
    44dc:	80 e0       	ldi	r24, 0x00	; 0
    44de:	08 95       	ret
	
	if ((u16Year % 400) == 0)
	{
		bLeapYear = true;
    44e0:	81 e0       	ldi	r24, 0x01	; 1
    44e2:	08 95       	ret
}

// Returns true if u16Year is a leap year
static bool IsLeapYear(uint16_t u16Year)
{
	bool bLeapYear = false;
    44e4:	80 e0       	ldi	r24, 0x00	; 0
    44e6:	08 95       	ret
		// Not a leap year if divisible by 100 but not by 400
	}
	else
	if ((u16Year % 4) == 0)
	{
		bLeapYear = true;
    44e8:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return(bLeapYear);
}
    44ea:	08 95       	ret

Disassembly of section .text.RTCStartTransaction:

000042d2 <RTCStartTransaction>:
}

static bool RTCStartTransaction( uint8_t u8Address, 
								 bool bRead, 
								 bool bAllowUnstick )
{
    42d2:	ff 92       	push	r15
    42d4:	0f 93       	push	r16
    42d6:	1f 93       	push	r17
    42d8:	cf 93       	push	r28
    42da:	df 93       	push	r29
    42dc:	f8 2e       	mov	r15, r24
    42de:	06 2f       	mov	r16, r22
    42e0:	14 2f       	mov	r17, r20
	bool bResult = false;
	uint8_t u8Tries = RTC_MAX_ADDRESS_TRIES;
    42e2:	d3 e0       	ldi	r29, 0x03	; 3

static bool RTCStartTransaction( uint8_t u8Address, 
								 bool bRead, 
								 bool bAllowUnstick )
{
	bool bResult = false;
    42e4:	c0 e0       	ldi	r28, 0x00	; 0
	uint8_t u8Tries = RTC_MAX_ADDRESS_TRIES;
	
	while( (false == bResult) && u8Tries )
    42e6:	0c c0       	rjmp	.+24     	; 0x4300 <RTCStartTransaction+0x2e>
	{
		u8Tries--;
    42e8:	d1 50       	subi	r29, 0x01	; 1
		
		bResult = I2CStartTransaction( u8Address, bRead );
    42ea:	60 2f       	mov	r22, r16
    42ec:	8f 2d       	mov	r24, r15
    42ee:	0e 94 91 23 	call	0x4722	; 0x4722 <I2CStartTransaction>
    42f2:	c8 2f       	mov	r28, r24
	
		if( false == bAllowUnstick )
    42f4:	11 23       	and	r17, r17
    42f6:	41 f0       	breq	.+16     	; 0x4308 <RTCStartTransaction+0x36>
		{
			break;
		}
		
		// Unstick and retry on failure
		if( false == bResult )
    42f8:	81 11       	cpse	r24, r1
    42fa:	02 c0       	rjmp	.+4      	; 0x4300 <RTCStartTransaction+0x2e>
		{
			I2CUnstick();
    42fc:	0e 94 cc 21 	call	0x4398	; 0x4398 <I2CUnstick>
								 bool bAllowUnstick )
{
	bool bResult = false;
	uint8_t u8Tries = RTC_MAX_ADDRESS_TRIES;
	
	while( (false == bResult) && u8Tries )
    4300:	c1 11       	cpse	r28, r1
    4302:	02 c0       	rjmp	.+4      	; 0x4308 <RTCStartTransaction+0x36>
    4304:	d1 11       	cpse	r29, r1
    4306:	f0 cf       	rjmp	.-32     	; 0x42e8 <RTCStartTransaction+0x16>
			I2CUnstick();
		}
	}
	
	return( bResult );
}
    4308:	8c 2f       	mov	r24, r28
    430a:	df 91       	pop	r29
    430c:	cf 91       	pop	r28
    430e:	1f 91       	pop	r17
    4310:	0f 91       	pop	r16
    4312:	ff 90       	pop	r15
    4314:	08 95       	ret

Disassembly of section .text.StructTMToHW:

0000409c <StructTMToHW>:
}

// Converts struct tm to SMCP7940NTime structure
static void StructTMToHW(struct tm *psTimeTM,
						 SMCP7940NTime *psTime)
{
    409c:	cf 93       	push	r28
    409e:	df 93       	push	r29
    40a0:	dc 01       	movw	r26, r24
    40a2:	fb 01       	movw	r30, r22
	memset((void *) psTime, 0, sizeof(*psTime));
    40a4:	87 e0       	ldi	r24, 0x07	; 7
    40a6:	eb 01       	movw	r28, r22
    40a8:	19 92       	st	Y+, r1
    40aa:	8a 95       	dec	r24
    40ac:	e9 f7       	brne	.-6      	; 0x40a8 <StructTMToHW+0xc>
	
	psTime->u8Seconds = psTimeTM->tm_sec;
    40ae:	8c 91       	ld	r24, X
    40b0:	80 83       	st	Z, r24
	psTime->u8Minutes = psTimeTM->tm_min;
    40b2:	12 96       	adiw	r26, 0x02	; 2
    40b4:	8c 91       	ld	r24, X
    40b6:	12 97       	sbiw	r26, 0x02	; 2
    40b8:	81 83       	std	Z+1, r24	; 0x01
	psTime->u8Hours = psTimeTM->tm_hour;
    40ba:	14 96       	adiw	r26, 0x04	; 4
    40bc:	8c 91       	ld	r24, X
    40be:	14 97       	sbiw	r26, 0x04	; 4
    40c0:	82 83       	std	Z+2, r24	; 0x02
	psTime->u8Day = psTimeTM->tm_mday;
    40c2:	16 96       	adiw	r26, 0x06	; 6
    40c4:	8c 91       	ld	r24, X
    40c6:	16 97       	sbiw	r26, 0x06	; 6
    40c8:	84 83       	std	Z+4, r24	; 0x04
	psTime->u8Month = psTimeTM->tm_mon;
    40ca:	18 96       	adiw	r26, 0x08	; 8
    40cc:	8c 91       	ld	r24, X
    40ce:	18 97       	sbiw	r26, 0x08	; 8
    40d0:	85 83       	std	Z+5, r24	; 0x05
	
	if (psTimeTM->tm_year > (2099-1900))
    40d2:	1a 96       	adiw	r26, 0x0a	; 10
    40d4:	8d 91       	ld	r24, X+
    40d6:	9c 91       	ld	r25, X
    40d8:	1b 97       	sbiw	r26, 0x0b	; 11
    40da:	88 3c       	cpi	r24, 0xC8	; 200
    40dc:	91 05       	cpc	r25, r1
    40de:	1c f0       	brlt	.+6      	; 0x40e6 <StructTMToHW+0x4a>
	{
		psTime->u8Year = psTimeTM->tm_year - 2100;
    40e0:	84 53       	subi	r24, 0x34	; 52
    40e2:	86 83       	std	Z+6, r24	; 0x06
    40e4:	02 c0       	rjmp	.+4      	; 0x40ea <StructTMToHW+0x4e>
	}
	else
	{
		psTime->u8Year = psTimeTM->tm_year - 2000;
    40e6:	80 5d       	subi	r24, 0xD0	; 208
    40e8:	86 83       	std	Z+6, r24	; 0x06
	}
	
}
    40ea:	df 91       	pop	r29
    40ec:	cf 91       	pop	r28
    40ee:	08 95       	ret

Disassembly of section .text.HWToStructTM:

000039bc <HWToStructTM>:
}

// Converts an SMCP7940NTime structure to struct tm
static void HWToStructTM(SMCP7940NTime *psTime,
						 struct tm *psTimeTM)
{
    39bc:	cf 93       	push	r28
    39be:	df 93       	push	r29
    39c0:	dc 01       	movw	r26, r24
    39c2:	fb 01       	movw	r30, r22
	// At this point, the time is in STime and we should
	// turn that in to time_t
	memset((void *) psTimeTM, 0, sizeof(*psTimeTM));
    39c4:	89 e1       	ldi	r24, 0x19	; 25
    39c6:	eb 01       	movw	r28, r22
    39c8:	19 92       	st	Y+, r1
    39ca:	8a 95       	dec	r24
    39cc:	e9 f7       	brne	.-6      	; 0x39c8 <HWToStructTM+0xc>
	
	psTimeTM->tm_sec = psTime->u8Seconds;
    39ce:	8c 91       	ld	r24, X
    39d0:	90 e0       	ldi	r25, 0x00	; 0
    39d2:	91 83       	std	Z+1, r25	; 0x01
    39d4:	80 83       	st	Z, r24
	psTimeTM->tm_min = psTime->u8Minutes;
    39d6:	11 96       	adiw	r26, 0x01	; 1
    39d8:	8c 91       	ld	r24, X
    39da:	11 97       	sbiw	r26, 0x01	; 1
    39dc:	90 e0       	ldi	r25, 0x00	; 0
    39de:	93 83       	std	Z+3, r25	; 0x03
    39e0:	82 83       	std	Z+2, r24	; 0x02
	psTimeTM->tm_hour = psTime->u8Hours;
    39e2:	12 96       	adiw	r26, 0x02	; 2
    39e4:	8c 91       	ld	r24, X
    39e6:	12 97       	sbiw	r26, 0x02	; 2
    39e8:	90 e0       	ldi	r25, 0x00	; 0
    39ea:	95 83       	std	Z+5, r25	; 0x05
    39ec:	84 83       	std	Z+4, r24	; 0x04
	psTimeTM->tm_mday = psTime->u8Day;
    39ee:	14 96       	adiw	r26, 0x04	; 4
    39f0:	8c 91       	ld	r24, X
    39f2:	14 97       	sbiw	r26, 0x04	; 4
    39f4:	90 e0       	ldi	r25, 0x00	; 0
    39f6:	97 83       	std	Z+7, r25	; 0x07
    39f8:	86 83       	std	Z+6, r24	; 0x06
	psTimeTM->tm_mon = psTime->u8Month - 1;
    39fa:	15 96       	adiw	r26, 0x05	; 5
    39fc:	8c 91       	ld	r24, X
    39fe:	15 97       	sbiw	r26, 0x05	; 5
    3a00:	90 e0       	ldi	r25, 0x00	; 0
    3a02:	01 97       	sbiw	r24, 0x01	; 1
    3a04:	91 87       	std	Z+9, r25	; 0x09
    3a06:	80 87       	std	Z+8, r24	; 0x08
	
	if (psTime->u8Year < YEAR_ROLLOVER_CUTOFF)
    3a08:	16 96       	adiw	r26, 0x06	; 6
    3a0a:	8c 91       	ld	r24, X
    3a0c:	84 31       	cpi	r24, 0x14	; 20
    3a0e:	30 f4       	brcc	.+12     	; 0x3a1c <HWToStructTM+0x60>
	{
		psTimeTM->tm_year = 2100 + psTime->u8Year;
    3a10:	90 e0       	ldi	r25, 0x00	; 0
    3a12:	8c 5c       	subi	r24, 0xCC	; 204
    3a14:	97 4f       	sbci	r25, 0xF7	; 247
    3a16:	93 87       	std	Z+11, r25	; 0x0b
    3a18:	82 87       	std	Z+10, r24	; 0x0a
    3a1a:	05 c0       	rjmp	.+10     	; 0x3a26 <HWToStructTM+0x6a>
	}
	else
	{
		psTimeTM->tm_year = 2000 + psTime->u8Year;
    3a1c:	90 e0       	ldi	r25, 0x00	; 0
    3a1e:	80 53       	subi	r24, 0x30	; 48
    3a20:	98 4f       	sbci	r25, 0xF8	; 248
    3a22:	93 87       	std	Z+11, r25	; 0x0b
    3a24:	82 87       	std	Z+10, r24	; 0x0a
	}	
	
	psTimeTM->tm_year -= 1900;
    3a26:	82 85       	ldd	r24, Z+10	; 0x0a
    3a28:	93 85       	ldd	r25, Z+11	; 0x0b
    3a2a:	8c 56       	subi	r24, 0x6C	; 108
    3a2c:	97 40       	sbci	r25, 0x07	; 7
    3a2e:	93 87       	std	Z+11, r25	; 0x0b
    3a30:	82 87       	std	Z+10, r24	; 0x0a
}
    3a32:	df 91       	pop	r29
    3a34:	cf 91       	pop	r28
    3a36:	08 95       	ret

Disassembly of section .text.__vector_10:

00003732 <__vector_10>:
// # Of seconds since January 1, 1970
static volatile uint64_t sg_u64Time;

// Called once per second on rev 1 and newer hardware
ISR(INT3_vect, ISR_NOBLOCK)
{
    3732:	78 94       	sei
    3734:	1f 92       	push	r1
    3736:	0f 92       	push	r0
    3738:	0f b6       	in	r0, 0x3f	; 63
    373a:	0f 92       	push	r0
    373c:	11 24       	eor	r1, r1
    373e:	2f 93       	push	r18
    3740:	3f 93       	push	r19
    3742:	4f 93       	push	r20
    3744:	5f 93       	push	r21
    3746:	6f 93       	push	r22
    3748:	7f 93       	push	r23
    374a:	8f 93       	push	r24
    374c:	9f 93       	push	r25
    374e:	af 93       	push	r26
	EIFR |= (1 << INTF3);
    3750:	8c b3       	in	r24, 0x1c	; 28
    3752:	88 60       	ori	r24, 0x08	; 8
    3754:	8c bb       	out	0x1c, r24	; 28
	sg_u64Time++;
    3756:	20 91 45 09 	lds	r18, 0x0945	; 0x800945 <sg_u64Time>
    375a:	30 91 46 09 	lds	r19, 0x0946	; 0x800946 <sg_u64Time+0x1>
    375e:	40 91 47 09 	lds	r20, 0x0947	; 0x800947 <sg_u64Time+0x2>
    3762:	50 91 48 09 	lds	r21, 0x0948	; 0x800948 <sg_u64Time+0x3>
    3766:	60 91 49 09 	lds	r22, 0x0949	; 0x800949 <sg_u64Time+0x4>
    376a:	70 91 4a 09 	lds	r23, 0x094A	; 0x80094a <sg_u64Time+0x5>
    376e:	80 91 4b 09 	lds	r24, 0x094B	; 0x80094b <sg_u64Time+0x6>
    3772:	90 91 4c 09 	lds	r25, 0x094C	; 0x80094c <sg_u64Time+0x7>
    3776:	a1 e0       	ldi	r26, 0x01	; 1
    3778:	0e 94 e1 25 	call	0x4bc2	; 0x4bc2 <__adddi3_s8>
    377c:	20 93 45 09 	sts	0x0945, r18	; 0x800945 <sg_u64Time>
    3780:	30 93 46 09 	sts	0x0946, r19	; 0x800946 <sg_u64Time+0x1>
    3784:	40 93 47 09 	sts	0x0947, r20	; 0x800947 <sg_u64Time+0x2>
    3788:	50 93 48 09 	sts	0x0948, r21	; 0x800948 <sg_u64Time+0x3>
    378c:	60 93 49 09 	sts	0x0949, r22	; 0x800949 <sg_u64Time+0x4>
    3790:	70 93 4a 09 	sts	0x094A, r23	; 0x80094a <sg_u64Time+0x5>
    3794:	80 93 4b 09 	sts	0x094B, r24	; 0x80094b <sg_u64Time+0x6>
    3798:	90 93 4c 09 	sts	0x094C, r25	; 0x80094c <sg_u64Time+0x7>
}
    379c:	af 91       	pop	r26
    379e:	9f 91       	pop	r25
    37a0:	8f 91       	pop	r24
    37a2:	7f 91       	pop	r23
    37a4:	6f 91       	pop	r22
    37a6:	5f 91       	pop	r21
    37a8:	4f 91       	pop	r20
    37aa:	3f 91       	pop	r19
    37ac:	2f 91       	pop	r18
    37ae:	0f 90       	pop	r0
    37b0:	0f be       	out	0x3f, r0	; 63
    37b2:	0f 90       	pop	r0
    37b4:	1f 90       	pop	r1
    37b6:	18 95       	reti

Disassembly of section .text.RTCReadRegisters:

0000393e <RTCReadRegisters>:
}

bool RTCReadRegisters( uint8_t u8RegisterAddr, 
					   uint8_t* pu8Data, 
					   uint8_t u8Length )
{
    393e:	ff 92       	push	r15
    3940:	0f 93       	push	r16
    3942:	1f 93       	push	r17
    3944:	cf 93       	push	r28
    3946:	df 93       	push	r29
    3948:	f8 2e       	mov	r15, r24
    394a:	8b 01       	movw	r16, r22
    394c:	c4 2f       	mov	r28, r20
	bool bResult;
	
	MBASSERT( u8Length >= 1 );
    394e:	41 11       	cpse	r20, r1
    3950:	07 c0       	rjmp	.+14     	; 0x3960 <RTCReadRegisters+0x22>
    3952:	4f e5       	ldi	r20, 0x5F	; 95
    3954:	50 e0       	ldi	r21, 0x00	; 0
    3956:	66 ef       	ldi	r22, 0xF6	; 246
    3958:	72 e0       	ldi	r23, 0x02	; 2
    395a:	80 e0       	ldi	r24, 0x00	; 0
    395c:	0e 94 50 23 	call	0x46a0	; 0x46a0 <PlatformAssert>
	
	// First send device address and write register address
	bResult = RTCStartTransaction( RTC_ADDRESS, false, true );
    3960:	41 e0       	ldi	r20, 0x01	; 1
    3962:	60 e0       	ldi	r22, 0x00	; 0
    3964:	8e ed       	ldi	r24, 0xDE	; 222
    3966:	0e 94 69 21 	call	0x42d2	; 0x42d2 <RTCStartTransaction>
    396a:	d8 2f       	mov	r29, r24
	
	// Couldn't get an ACK?  Give up now
	if( false == bResult )
    396c:	88 23       	and	r24, r24
    396e:	e9 f0       	breq	.+58     	; 0x39aa <RTCReadRegisters+0x6c>
	{
		goto errorExit;
	}
	
	// Send the register address
	bResult = I2CTxByte( u8RegisterAddr );
    3970:	8f 2d       	mov	r24, r15
    3972:	0e 94 47 1e 	call	0x3c8e	; 0x3c8e <I2CTxByte>
    3976:	d8 2f       	mov	r29, r24
	
	if( false == bResult )
    3978:	88 23       	and	r24, r24
    397a:	b9 f0       	breq	.+46     	; 0x39aa <RTCReadRegisters+0x6c>
	{
		goto errorExit;
	}
	
	// Send repeated start with read
	bResult = RTCStartTransaction( RTC_ADDRESS, true, false );
    397c:	40 e0       	ldi	r20, 0x00	; 0
    397e:	61 e0       	ldi	r22, 0x01	; 1
    3980:	8e ed       	ldi	r24, 0xDE	; 222
    3982:	0e 94 69 21 	call	0x42d2	; 0x42d2 <RTCStartTransaction>
    3986:	d8 2f       	mov	r29, r24
	
	// Couldn't get an ACK?  Give up now
	if( false == bResult )
    3988:	81 11       	cpse	r24, r1
    398a:	08 c0       	rjmp	.+16     	; 0x399c <RTCReadRegisters+0x5e>
    398c:	0e c0       	rjmp	.+28     	; 0x39aa <RTCReadRegisters+0x6c>
		goto errorExit;
	}
	
	while( u8Length >= 2 )
	{
		*pu8Data = I2CRxByte( true );
    398e:	81 e0       	ldi	r24, 0x01	; 1
    3990:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <I2CRxByte>
    3994:	f8 01       	movw	r30, r16
    3996:	81 93       	st	Z+, r24
    3998:	8f 01       	movw	r16, r30
		pu8Data++;
		u8Length--;
    399a:	c1 50       	subi	r28, 0x01	; 1
	if( false == bResult )
	{
		goto errorExit;
	}
	
	while( u8Length >= 2 )
    399c:	c2 30       	cpi	r28, 0x02	; 2
    399e:	b8 f7       	brcc	.-18     	; 0x398e <RTCReadRegisters+0x50>
		pu8Data++;
		u8Length--;
	}
	
	// Final read with NACK
	*pu8Data = I2CRxByte( false );
    39a0:	80 e0       	ldi	r24, 0x00	; 0
    39a2:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <I2CRxByte>
    39a6:	f8 01       	movw	r30, r16
    39a8:	80 83       	st	Z, r24
	
errorExit:

	I2CStop();
    39aa:	0e 94 e1 23 	call	0x47c2	; 0x47c2 <I2CStop>
	
	return(bResult);
}
    39ae:	8d 2f       	mov	r24, r29
    39b0:	df 91       	pop	r29
    39b2:	cf 91       	pop	r28
    39b4:	1f 91       	pop	r17
    39b6:	0f 91       	pop	r16
    39b8:	ff 90       	pop	r15
    39ba:	08 95       	ret

Disassembly of section .text.RTCReadHW:

000028c2 <RTCReadHW>:
	sei();
	
	psSrc = gmtime((const time_t *) &u64Time);
	memcpy((void *) psTime, (void *) psSrc, sizeof(*psTime));
	return(true);
}
    28c2:	cf 93       	push	r28
    28c4:	df 93       	push	r29
    28c6:	ec 01       	movw	r28, r24
    28c8:	47 e0       	ldi	r20, 0x07	; 7
    28ca:	bc 01       	movw	r22, r24
    28cc:	80 e0       	ldi	r24, 0x00	; 0
    28ce:	0e 94 9f 1c 	call	0x393e	; 0x393e <RTCReadRegisters>
    28d2:	88 23       	and	r24, r24
    28d4:	09 f4       	brne	.+2      	; 0x28d8 <RTCReadHW+0x16>
    28d6:	63 c0       	rjmp	.+198    	; 0x299e <RTCReadHW+0xdc>
    28d8:	98 81       	ld	r25, Y
    28da:	29 2f       	mov	r18, r25
    28dc:	22 95       	swap	r18
    28de:	2f 70       	andi	r18, 0x0F	; 15
    28e0:	27 70       	andi	r18, 0x07	; 7
    28e2:	22 0f       	add	r18, r18
    28e4:	32 2f       	mov	r19, r18
    28e6:	33 0f       	add	r19, r19
    28e8:	33 0f       	add	r19, r19
    28ea:	23 0f       	add	r18, r19
    28ec:	9f 70       	andi	r25, 0x0F	; 15
    28ee:	92 0f       	add	r25, r18
    28f0:	98 83       	st	Y, r25
    28f2:	99 81       	ldd	r25, Y+1	; 0x01
    28f4:	29 2f       	mov	r18, r25
    28f6:	22 95       	swap	r18
    28f8:	2f 70       	andi	r18, 0x0F	; 15
    28fa:	27 70       	andi	r18, 0x07	; 7
    28fc:	22 0f       	add	r18, r18
    28fe:	32 2f       	mov	r19, r18
    2900:	33 0f       	add	r19, r19
    2902:	33 0f       	add	r19, r19
    2904:	23 0f       	add	r18, r19
    2906:	9f 70       	andi	r25, 0x0F	; 15
    2908:	92 0f       	add	r25, r18
    290a:	99 83       	std	Y+1, r25	; 0x01
    290c:	9a 81       	ldd	r25, Y+2	; 0x02
    290e:	96 ff       	sbrs	r25, 6
    2910:	11 c0       	rjmp	.+34     	; 0x2934 <RTCReadHW+0x72>
    2912:	94 fb       	bst	r25, 4
    2914:	22 27       	eor	r18, r18
    2916:	20 f9       	bld	r18, 0
    2918:	22 0f       	add	r18, r18
    291a:	32 2f       	mov	r19, r18
    291c:	33 0f       	add	r19, r19
    291e:	33 0f       	add	r19, r19
    2920:	23 0f       	add	r18, r19
    2922:	39 2f       	mov	r19, r25
    2924:	3f 70       	andi	r19, 0x0F	; 15
    2926:	23 0f       	add	r18, r19
    2928:	2a 83       	std	Y+2, r18	; 0x02
    292a:	95 ff       	sbrs	r25, 5
    292c:	0f c0       	rjmp	.+30     	; 0x294c <RTCReadHW+0x8a>
    292e:	24 5f       	subi	r18, 0xF4	; 244
    2930:	2a 83       	std	Y+2, r18	; 0x02
    2932:	0c c0       	rjmp	.+24     	; 0x294c <RTCReadHW+0x8a>
    2934:	29 2f       	mov	r18, r25
    2936:	22 95       	swap	r18
    2938:	2f 70       	andi	r18, 0x0F	; 15
    293a:	23 70       	andi	r18, 0x03	; 3
    293c:	22 0f       	add	r18, r18
    293e:	32 2f       	mov	r19, r18
    2940:	33 0f       	add	r19, r19
    2942:	33 0f       	add	r19, r19
    2944:	23 0f       	add	r18, r19
    2946:	9f 70       	andi	r25, 0x0F	; 15
    2948:	92 0f       	add	r25, r18
    294a:	9a 83       	std	Y+2, r25	; 0x02
    294c:	9b 81       	ldd	r25, Y+3	; 0x03
    294e:	97 70       	andi	r25, 0x07	; 7
    2950:	9b 83       	std	Y+3, r25	; 0x03
    2952:	9c 81       	ldd	r25, Y+4	; 0x04
    2954:	29 2f       	mov	r18, r25
    2956:	22 95       	swap	r18
    2958:	2f 70       	andi	r18, 0x0F	; 15
    295a:	23 70       	andi	r18, 0x03	; 3
    295c:	22 0f       	add	r18, r18
    295e:	32 2f       	mov	r19, r18
    2960:	33 0f       	add	r19, r19
    2962:	33 0f       	add	r19, r19
    2964:	23 0f       	add	r18, r19
    2966:	9f 70       	andi	r25, 0x0F	; 15
    2968:	92 0f       	add	r25, r18
    296a:	9c 83       	std	Y+4, r25	; 0x04
    296c:	9d 81       	ldd	r25, Y+5	; 0x05
    296e:	94 fb       	bst	r25, 4
    2970:	22 27       	eor	r18, r18
    2972:	20 f9       	bld	r18, 0
    2974:	22 0f       	add	r18, r18
    2976:	32 2f       	mov	r19, r18
    2978:	33 0f       	add	r19, r19
    297a:	33 0f       	add	r19, r19
    297c:	23 0f       	add	r18, r19
    297e:	9f 70       	andi	r25, 0x0F	; 15
    2980:	92 0f       	add	r25, r18
    2982:	9d 83       	std	Y+5, r25	; 0x05
    2984:	9e 81       	ldd	r25, Y+6	; 0x06
    2986:	29 2f       	mov	r18, r25
    2988:	22 95       	swap	r18
    298a:	2f 70       	andi	r18, 0x0F	; 15
    298c:	22 0f       	add	r18, r18
    298e:	32 2f       	mov	r19, r18
    2990:	33 0f       	add	r19, r19
    2992:	33 0f       	add	r19, r19
    2994:	23 0f       	add	r18, r19
    2996:	9f 70       	andi	r25, 0x0F	; 15
    2998:	92 0f       	add	r25, r18
    299a:	9c 5e       	subi	r25, 0xEC	; 236
    299c:	9e 83       	std	Y+6, r25	; 0x06
    299e:	df 91       	pop	r29
    29a0:	cf 91       	pop	r28
    29a2:	08 95       	ret

Disassembly of section .text.RTCWriteRegisters:

00003cf8 <RTCWriteRegisters>:
}

bool RTCWriteRegisters( uint8_t u8RegisterAddr,
						uint8_t* pu8Data, 
						uint8_t u8Length )
{
    3cf8:	ff 92       	push	r15
    3cfa:	0f 93       	push	r16
    3cfc:	1f 93       	push	r17
    3cfe:	cf 93       	push	r28
    3d00:	df 93       	push	r29
    3d02:	f8 2e       	mov	r15, r24
    3d04:	8b 01       	movw	r16, r22
    3d06:	c4 2f       	mov	r28, r20
	bool bResult;
	
	MBASSERT( u8Length >= 1 );
    3d08:	41 11       	cpse	r20, r1
    3d0a:	07 c0       	rjmp	.+14     	; 0x3d1a <RTCWriteRegisters+0x22>
    3d0c:	42 e9       	ldi	r20, 0x92	; 146
    3d0e:	50 e0       	ldi	r21, 0x00	; 0
    3d10:	66 ef       	ldi	r22, 0xF6	; 246
    3d12:	72 e0       	ldi	r23, 0x02	; 2
    3d14:	80 e0       	ldi	r24, 0x00	; 0
    3d16:	0e 94 50 23 	call	0x46a0	; 0x46a0 <PlatformAssert>
	
	// First send device address and write register address
	bResult = RTCStartTransaction( RTC_ADDRESS, false, true );
    3d1a:	41 e0       	ldi	r20, 0x01	; 1
    3d1c:	60 e0       	ldi	r22, 0x00	; 0
    3d1e:	8e ed       	ldi	r24, 0xDE	; 222
    3d20:	0e 94 69 21 	call	0x42d2	; 0x42d2 <RTCStartTransaction>
    3d24:	d8 2f       	mov	r29, r24
	
	// Couldn't get an ACK?  Give up now
	if( false == bResult )
    3d26:	88 23       	and	r24, r24
    3d28:	99 f0       	breq	.+38     	; 0x3d50 <RTCWriteRegisters+0x58>
	{
		goto errorExit;
	}
	
	// Send the register address
	bResult = I2CTxByte( u8RegisterAddr );
    3d2a:	8f 2d       	mov	r24, r15
    3d2c:	0e 94 47 1e 	call	0x3c8e	; 0x3c8e <I2CTxByte>
    3d30:	d8 2f       	mov	r29, r24
	
	if( false == bResult )
    3d32:	81 11       	cpse	r24, r1
    3d34:	0b c0       	rjmp	.+22     	; 0x3d4c <RTCWriteRegisters+0x54>
    3d36:	0c c0       	rjmp	.+24     	; 0x3d50 <RTCWriteRegisters+0x58>
	}
	
	// Now immediately send the sequential data
	while( u8Length )
	{
		bResult = I2CTxByte( *pu8Data );
    3d38:	f8 01       	movw	r30, r16
    3d3a:	80 81       	ld	r24, Z
    3d3c:	0e 94 47 1e 	call	0x3c8e	; 0x3c8e <I2CTxByte>
    3d40:	d8 2f       	mov	r29, r24
		
		if( false == bResult )
    3d42:	88 23       	and	r24, r24
    3d44:	29 f0       	breq	.+10     	; 0x3d50 <RTCWriteRegisters+0x58>
		{
			goto errorExit;
		}
		
		pu8Data++;
    3d46:	0f 5f       	subi	r16, 0xFF	; 255
    3d48:	1f 4f       	sbci	r17, 0xFF	; 255
		u8Length--;
    3d4a:	c1 50       	subi	r28, 0x01	; 1
	{
		goto errorExit;
	}
	
	// Now immediately send the sequential data
	while( u8Length )
    3d4c:	c1 11       	cpse	r28, r1
    3d4e:	f4 cf       	rjmp	.-24     	; 0x3d38 <RTCWriteRegisters+0x40>
		u8Length--;
	}
	
errorExit:

	I2CStop();
    3d50:	0e 94 e1 23 	call	0x47c2	; 0x47c2 <I2CStop>
	
	return( bResult );
}
    3d54:	8d 2f       	mov	r24, r29
    3d56:	df 91       	pop	r29
    3d58:	cf 91       	pop	r28
    3d5a:	1f 91       	pop	r17
    3d5c:	0f 91       	pop	r16
    3d5e:	ff 90       	pop	r15
    3d60:	08 95       	ret

Disassembly of section .text.RTCWriteHW:

000026cc <RTCWriteHW>:
	sei();
	
	psSrc = gmtime((const time_t *) &u64Time);
	memcpy((void *) psTime, (void *) psSrc, sizeof(*psTime));
	return(true);
}
    26cc:	fc 01       	movw	r30, r24
    26ce:	20 81       	ld	r18, Z
    26d0:	8d ec       	ldi	r24, 0xCD	; 205
    26d2:	28 9f       	mul	r18, r24
    26d4:	91 2d       	mov	r25, r1
    26d6:	11 24       	eor	r1, r1
    26d8:	96 95       	lsr	r25
    26da:	96 95       	lsr	r25
    26dc:	96 95       	lsr	r25
    26de:	30 e1       	ldi	r19, 0x10	; 16
    26e0:	93 9f       	mul	r25, r19
    26e2:	a0 01       	movw	r20, r0
    26e4:	11 24       	eor	r1, r1
    26e6:	99 0f       	add	r25, r25
    26e8:	39 2f       	mov	r19, r25
    26ea:	33 0f       	add	r19, r19
    26ec:	33 0f       	add	r19, r19
    26ee:	93 0f       	add	r25, r19
    26f0:	29 1b       	sub	r18, r25
    26f2:	24 2b       	or	r18, r20
    26f4:	20 83       	st	Z, r18
    26f6:	21 81       	ldd	r18, Z+1	; 0x01
    26f8:	28 9f       	mul	r18, r24
    26fa:	91 2d       	mov	r25, r1
    26fc:	11 24       	eor	r1, r1
    26fe:	96 95       	lsr	r25
    2700:	96 95       	lsr	r25
    2702:	96 95       	lsr	r25
    2704:	30 e1       	ldi	r19, 0x10	; 16
    2706:	93 9f       	mul	r25, r19
    2708:	a0 01       	movw	r20, r0
    270a:	11 24       	eor	r1, r1
    270c:	99 0f       	add	r25, r25
    270e:	39 2f       	mov	r19, r25
    2710:	33 0f       	add	r19, r19
    2712:	33 0f       	add	r19, r19
    2714:	93 0f       	add	r25, r19
    2716:	29 1b       	sub	r18, r25
    2718:	24 2b       	or	r18, r20
    271a:	21 83       	std	Z+1, r18	; 0x01
    271c:	42 81       	ldd	r20, Z+2	; 0x02
    271e:	48 9f       	mul	r20, r24
    2720:	91 2d       	mov	r25, r1
    2722:	11 24       	eor	r1, r1
    2724:	96 95       	lsr	r25
    2726:	96 95       	lsr	r25
    2728:	96 95       	lsr	r25
    272a:	50 e1       	ldi	r21, 0x10	; 16
    272c:	95 9f       	mul	r25, r21
    272e:	90 01       	movw	r18, r0
    2730:	11 24       	eor	r1, r1
    2732:	99 0f       	add	r25, r25
    2734:	39 2f       	mov	r19, r25
    2736:	33 0f       	add	r19, r19
    2738:	33 0f       	add	r19, r19
    273a:	93 0f       	add	r25, r19
    273c:	49 1b       	sub	r20, r25
    273e:	24 2b       	or	r18, r20
    2740:	2f 7b       	andi	r18, 0xBF	; 191
    2742:	22 83       	std	Z+2, r18	; 0x02
    2744:	93 81       	ldd	r25, Z+3	; 0x03
    2746:	97 70       	andi	r25, 0x07	; 7
    2748:	98 60       	ori	r25, 0x08	; 8
    274a:	93 83       	std	Z+3, r25	; 0x03
    274c:	24 81       	ldd	r18, Z+4	; 0x04
    274e:	28 9f       	mul	r18, r24
    2750:	91 2d       	mov	r25, r1
    2752:	11 24       	eor	r1, r1
    2754:	96 95       	lsr	r25
    2756:	96 95       	lsr	r25
    2758:	96 95       	lsr	r25
    275a:	30 e1       	ldi	r19, 0x10	; 16
    275c:	93 9f       	mul	r25, r19
    275e:	a0 01       	movw	r20, r0
    2760:	11 24       	eor	r1, r1
    2762:	99 0f       	add	r25, r25
    2764:	39 2f       	mov	r19, r25
    2766:	33 0f       	add	r19, r19
    2768:	33 0f       	add	r19, r19
    276a:	93 0f       	add	r25, r19
    276c:	29 1b       	sub	r18, r25
    276e:	24 2b       	or	r18, r20
    2770:	24 83       	std	Z+4, r18	; 0x04
    2772:	25 81       	ldd	r18, Z+5	; 0x05
    2774:	28 9f       	mul	r18, r24
    2776:	91 2d       	mov	r25, r1
    2778:	11 24       	eor	r1, r1
    277a:	96 95       	lsr	r25
    277c:	96 95       	lsr	r25
    277e:	96 95       	lsr	r25
    2780:	30 e1       	ldi	r19, 0x10	; 16
    2782:	93 9f       	mul	r25, r19
    2784:	a0 01       	movw	r20, r0
    2786:	11 24       	eor	r1, r1
    2788:	99 0f       	add	r25, r25
    278a:	39 2f       	mov	r19, r25
    278c:	33 0f       	add	r19, r19
    278e:	33 0f       	add	r19, r19
    2790:	93 0f       	add	r25, r19
    2792:	29 1b       	sub	r18, r25
    2794:	24 2b       	or	r18, r20
    2796:	25 83       	std	Z+5, r18	; 0x05
    2798:	96 81       	ldd	r25, Z+6	; 0x06
    279a:	98 9f       	mul	r25, r24
    279c:	81 2d       	mov	r24, r1
    279e:	11 24       	eor	r1, r1
    27a0:	86 95       	lsr	r24
    27a2:	86 95       	lsr	r24
    27a4:	86 95       	lsr	r24
    27a6:	40 e1       	ldi	r20, 0x10	; 16
    27a8:	84 9f       	mul	r24, r20
    27aa:	90 01       	movw	r18, r0
    27ac:	11 24       	eor	r1, r1
    27ae:	88 0f       	add	r24, r24
    27b0:	38 2f       	mov	r19, r24
    27b2:	33 0f       	add	r19, r19
    27b4:	33 0f       	add	r19, r19
    27b6:	83 0f       	add	r24, r19
    27b8:	98 1b       	sub	r25, r24
    27ba:	92 2b       	or	r25, r18
    27bc:	96 83       	std	Z+6, r25	; 0x06
    27be:	47 e0       	ldi	r20, 0x07	; 7
    27c0:	bf 01       	movw	r22, r30
    27c2:	80 e0       	ldi	r24, 0x00	; 0
    27c4:	0e 94 7c 1e 	call	0x3cf8	; 0x3cf8 <RTCWriteRegisters>
    27c8:	08 95       	ret

Disassembly of section .text.RTCSetTime:

00002eb8 <RTCSetTime>:

// This sets the RTC to the specific time passed in. True is returned
// if it's 
bool RTCSetTime(uint64_t u64Timet)
{
    2eb8:	0f 93       	push	r16
    2eba:	1f 93       	push	r17
    2ebc:	cf 93       	push	r28
    2ebe:	df 93       	push	r29
    2ec0:	cd b7       	in	r28, 0x3d	; 61
    2ec2:	de b7       	in	r29, 0x3e	; 62
    2ec4:	a8 97       	sbiw	r28, 0x28	; 40
    2ec6:	0f b6       	in	r0, 0x3f	; 63
    2ec8:	f8 94       	cli
    2eca:	de bf       	out	0x3e, r29	; 62
    2ecc:	0f be       	out	0x3f, r0	; 63
    2ece:	cd bf       	out	0x3d, r28	; 61
    2ed0:	29 a3       	std	Y+33, r18	; 0x21
    2ed2:	3a a3       	std	Y+34, r19	; 0x22
    2ed4:	4b a3       	std	Y+35, r20	; 0x23
    2ed6:	5c a3       	std	Y+36, r21	; 0x24
    2ed8:	6d a3       	std	Y+37, r22	; 0x25
    2eda:	7e a3       	std	Y+38, r23	; 0x26
    2edc:	8f a3       	std	Y+39, r24	; 0x27
    2ede:	98 a7       	std	Y+40, r25	; 0x28
	struct tm sTime;
	struct tm *psTime;
	SMCP7940NTime sTimeHW;

	// Convert to GMTime
	memset((void *) &sTime, 0, sizeof(sTime));
    2ee0:	fe 01       	movw	r30, r28
    2ee2:	31 96       	adiw	r30, 0x01	; 1
    2ee4:	89 e1       	ldi	r24, 0x19	; 25
    2ee6:	df 01       	movw	r26, r30
    2ee8:	1d 92       	st	X+, r1
    2eea:	8a 95       	dec	r24
    2eec:	e9 f7       	brne	.-6      	; 0x2ee8 <RTCSetTime+0x30>
	psTime = gmtime((const time_t *) &u64Timet);
    2eee:	be 01       	movw	r22, r28
    2ef0:	6f 5d       	subi	r22, 0xDF	; 223
    2ef2:	7f 4f       	sbci	r23, 0xFF	; 255
    2ef4:	80 e8       	ldi	r24, 0x80	; 128
    2ef6:	0e 94 bc 26 	call	0x4d78	; 0x4d78 <gmtime>
    2efa:	8c 01       	movw	r16, r24
	MBASSERT(psTime);
    2efc:	89 2b       	or	r24, r25
    2efe:	39 f4       	brne	.+14     	; 0x2f0e <RTCSetTime+0x56>
    2f00:	42 e8       	ldi	r20, 0x82	; 130
    2f02:	51 e0       	ldi	r21, 0x01	; 1
    2f04:	66 ef       	ldi	r22, 0xF6	; 246
    2f06:	72 e0       	ldi	r23, 0x02	; 2
    2f08:	80 e0       	ldi	r24, 0x00	; 0
    2f0a:	0e 94 50 23 	call	0x46a0	; 0x46a0 <PlatformAssert>
	memcpy((void *) &sTime, (void *) psTime, sizeof(sTime));
    2f0e:	a8 01       	movw	r20, r16
    2f10:	60 e8       	ldi	r22, 0x80	; 128
    2f12:	29 e1       	ldi	r18, 0x19	; 25
    2f14:	30 e0       	ldi	r19, 0x00	; 0
    2f16:	ce 01       	movw	r24, r28
    2f18:	01 96       	adiw	r24, 0x01	; 1
    2f1a:	0e 94 dc 22 	call	0x45b8	; 0x45b8 <memcpy>
	
	// Now convert to hardware
	StructTMToHW(&sTime,
    2f1e:	be 01       	movw	r22, r28
    2f20:	66 5e       	subi	r22, 0xE6	; 230
    2f22:	7f 4f       	sbci	r23, 0xFF	; 255
    2f24:	ce 01       	movw	r24, r28
    2f26:	01 96       	adiw	r24, 0x01	; 1
    2f28:	0e 94 4e 20 	call	0x409c	; 0x409c <StructTMToHW>
				 &sTimeHW);
	
	// Set the time			 
	cli();
    2f2c:	f8 94       	cli
	sg_u64Time = u64Timet;
    2f2e:	79 a1       	ldd	r23, Y+33	; 0x21
    2f30:	6a a1       	ldd	r22, Y+34	; 0x22
    2f32:	5b a1       	ldd	r21, Y+35	; 0x23
    2f34:	4c a1       	ldd	r20, Y+36	; 0x24
    2f36:	3d a1       	ldd	r19, Y+37	; 0x25
    2f38:	2e a1       	ldd	r18, Y+38	; 0x26
    2f3a:	9f a1       	ldd	r25, Y+39	; 0x27
    2f3c:	88 a5       	ldd	r24, Y+40	; 0x28
    2f3e:	70 93 45 09 	sts	0x0945, r23	; 0x800945 <sg_u64Time>
    2f42:	60 93 46 09 	sts	0x0946, r22	; 0x800946 <sg_u64Time+0x1>
    2f46:	50 93 47 09 	sts	0x0947, r21	; 0x800947 <sg_u64Time+0x2>
    2f4a:	40 93 48 09 	sts	0x0948, r20	; 0x800948 <sg_u64Time+0x3>
    2f4e:	30 93 49 09 	sts	0x0949, r19	; 0x800949 <sg_u64Time+0x4>
    2f52:	20 93 4a 09 	sts	0x094A, r18	; 0x80094a <sg_u64Time+0x5>
    2f56:	90 93 4b 09 	sts	0x094B, r25	; 0x80094b <sg_u64Time+0x6>
    2f5a:	80 93 4c 09 	sts	0x094C, r24	; 0x80094c <sg_u64Time+0x7>
	sei();
    2f5e:	78 94       	sei
	
	// Now go tell the hardware about it
	return(RTCWriteHW(&sTimeHW));
    2f60:	ce 01       	movw	r24, r28
    2f62:	4a 96       	adiw	r24, 0x1a	; 26
    2f64:	0e 94 66 13 	call	0x26cc	; 0x26cc <RTCWriteHW>
}
    2f68:	a8 96       	adiw	r28, 0x28	; 40
    2f6a:	0f b6       	in	r0, 0x3f	; 63
    2f6c:	f8 94       	cli
    2f6e:	de bf       	out	0x3e, r29	; 62
    2f70:	0f be       	out	0x3f, r0	; 63
    2f72:	cd bf       	out	0x3d, r28	; 61
    2f74:	df 91       	pop	r29
    2f76:	cf 91       	pop	r28
    2f78:	1f 91       	pop	r17
    2f7a:	0f 91       	pop	r16
    2f7c:	08 95       	ret

Disassembly of section .text.RTCInit:

000015c0 <RTCInit>:
	sei();
	
	psSrc = gmtime((const time_t *) &u64Time);
	memcpy((void *) psTime, (void *) psSrc, sizeof(*psTime));
	return(true);
}
    15c0:	ff 92       	push	r15
    15c2:	0f 93       	push	r16
    15c4:	1f 93       	push	r17
    15c6:	cf 93       	push	r28
    15c8:	df 93       	push	r29
    15ca:	cd b7       	in	r28, 0x3d	; 61
    15cc:	de b7       	in	r29, 0x3e	; 62
    15ce:	a1 97       	sbiw	r28, 0x21	; 33
    15d0:	0f b6       	in	r0, 0x3f	; 63
    15d2:	f8 94       	cli
    15d4:	de bf       	out	0x3e, r29	; 62
    15d6:	0f be       	out	0x3f, r0	; 63
    15d8:	cd bf       	out	0x3d, r28	; 61
    15da:	19 82       	std	Y+1, r1	; 0x01
    15dc:	41 e0       	ldi	r20, 0x01	; 1
    15de:	be 01       	movw	r22, r28
    15e0:	6f 5f       	subi	r22, 0xFF	; 255
    15e2:	7f 4f       	sbci	r23, 0xFF	; 255
    15e4:	87 e0       	ldi	r24, 0x07	; 7
    15e6:	0e 94 7c 1e 	call	0x3cf8	; 0x3cf8 <RTCWriteRegisters>
    15ea:	18 2f       	mov	r17, r24
    15ec:	88 23       	and	r24, r24
    15ee:	09 f4       	brne	.+2      	; 0x15f2 <RTCInit+0x32>
    15f0:	eb c0       	rjmp	.+470    	; 0x17c8 <RTCInit+0x208>
    15f2:	80 e8       	ldi	r24, 0x80	; 128
    15f4:	89 83       	std	Y+1, r24	; 0x01
    15f6:	41 e0       	ldi	r20, 0x01	; 1
    15f8:	be 01       	movw	r22, r28
    15fa:	6f 5f       	subi	r22, 0xFF	; 255
    15fc:	7f 4f       	sbci	r23, 0xFF	; 255
    15fe:	80 e0       	ldi	r24, 0x00	; 0
    1600:	0e 94 7c 1e 	call	0x3cf8	; 0x3cf8 <RTCWriteRegisters>
    1604:	18 2f       	mov	r17, r24
    1606:	81 11       	cpse	r24, r1
    1608:	17 c0       	rjmp	.+46     	; 0x1638 <RTCInit+0x78>
    160a:	de c0       	rjmp	.+444    	; 0x17c8 <RTCInit+0x208>
    160c:	19 82       	std	Y+1, r1	; 0x01
    160e:	41 e0       	ldi	r20, 0x01	; 1
    1610:	be 01       	movw	r22, r28
    1612:	6f 5f       	subi	r22, 0xFF	; 255
    1614:	7f 4f       	sbci	r23, 0xFF	; 255
    1616:	83 e0       	ldi	r24, 0x03	; 3
    1618:	0e 94 9f 1c 	call	0x393e	; 0x393e <RTCReadRegisters>
    161c:	18 2f       	mov	r17, r24
    161e:	88 23       	and	r24, r24
    1620:	09 f4       	brne	.+2      	; 0x1624 <RTCInit+0x64>
    1622:	d2 c0       	rjmp	.+420    	; 0x17c8 <RTCInit+0x208>
    1624:	89 81       	ldd	r24, Y+1	; 0x01
    1626:	85 fd       	sbrc	r24, 5
    1628:	0a c0       	rjmp	.+20     	; 0x163e <RTCInit+0x7e>
    162a:	60 e0       	ldi	r22, 0x00	; 0
    162c:	70 e0       	ldi	r23, 0x00	; 0
    162e:	cb 01       	movw	r24, r22
    1630:	0e 94 a2 20 	call	0x4144	; 0x4144 <Delay>
    1634:	0f 5f       	subi	r16, 0xFF	; 255
    1636:	01 c0       	rjmp	.+2      	; 0x163a <RTCInit+0x7a>
    1638:	00 e0       	ldi	r16, 0x00	; 0
    163a:	08 3c       	cpi	r16, 0xC8	; 200
    163c:	38 f3       	brcs	.-50     	; 0x160c <RTCInit+0x4c>
    163e:	08 3c       	cpi	r16, 0xC8	; 200
    1640:	08 f0       	brcs	.+2      	; 0x1644 <RTCInit+0x84>
    1642:	c2 c0       	rjmp	.+388    	; 0x17c8 <RTCInit+0x208>
    1644:	89 81       	ldd	r24, Y+1	; 0x01
    1646:	88 60       	ori	r24, 0x08	; 8
    1648:	89 83       	std	Y+1, r24	; 0x01
    164a:	41 e0       	ldi	r20, 0x01	; 1
    164c:	be 01       	movw	r22, r28
    164e:	6f 5f       	subi	r22, 0xFF	; 255
    1650:	7f 4f       	sbci	r23, 0xFF	; 255
    1652:	83 e0       	ldi	r24, 0x03	; 3
    1654:	0e 94 7c 1e 	call	0x3cf8	; 0x3cf8 <RTCWriteRegisters>
    1658:	18 2f       	mov	r17, r24
    165a:	88 23       	and	r24, r24
    165c:	09 f4       	brne	.+2      	; 0x1660 <RTCInit+0xa0>
    165e:	b4 c0       	rjmp	.+360    	; 0x17c8 <RTCInit+0x208>
    1660:	41 e0       	ldi	r20, 0x01	; 1
    1662:	be 01       	movw	r22, r28
    1664:	6f 5f       	subi	r22, 0xFF	; 255
    1666:	7f 4f       	sbci	r23, 0xFF	; 255
    1668:	82 e0       	ldi	r24, 0x02	; 2
    166a:	0e 94 9f 1c 	call	0x393e	; 0x393e <RTCReadRegisters>
    166e:	18 2f       	mov	r17, r24
    1670:	88 23       	and	r24, r24
    1672:	09 f4       	brne	.+2      	; 0x1676 <RTCInit+0xb6>
    1674:	a9 c0       	rjmp	.+338    	; 0x17c8 <RTCInit+0x208>
    1676:	89 81       	ldd	r24, Y+1	; 0x01
    1678:	8f 7b       	andi	r24, 0xBF	; 191
    167a:	89 83       	std	Y+1, r24	; 0x01
    167c:	41 e0       	ldi	r20, 0x01	; 1
    167e:	be 01       	movw	r22, r28
    1680:	6f 5f       	subi	r22, 0xFF	; 255
    1682:	7f 4f       	sbci	r23, 0xFF	; 255
    1684:	82 e0       	ldi	r24, 0x02	; 2
    1686:	0e 94 7c 1e 	call	0x3cf8	; 0x3cf8 <RTCWriteRegisters>
    168a:	18 2f       	mov	r17, r24
    168c:	88 23       	and	r24, r24
    168e:	09 f4       	brne	.+2      	; 0x1692 <RTCInit+0xd2>
    1690:	9b c0       	rjmp	.+310    	; 0x17c8 <RTCInit+0x208>
    1692:	ce 01       	movw	r24, r28
    1694:	02 96       	adiw	r24, 0x02	; 2
    1696:	0e 94 61 14 	call	0x28c2	; 0x28c2 <RTCReadHW>
    169a:	18 2f       	mov	r17, r24
    169c:	88 23       	and	r24, r24
    169e:	09 f4       	brne	.+2      	; 0x16a2 <RTCInit+0xe2>
    16a0:	93 c0       	rjmp	.+294    	; 0x17c8 <RTCInit+0x208>
    16a2:	8a 81       	ldd	r24, Y+2	; 0x02
    16a4:	8c 33       	cpi	r24, 0x3C	; 60
    16a6:	10 f4       	brcc	.+4      	; 0x16ac <RTCInit+0xec>
    16a8:	10 e0       	ldi	r17, 0x00	; 0
    16aa:	01 c0       	rjmp	.+2      	; 0x16ae <RTCInit+0xee>
    16ac:	11 e0       	ldi	r17, 0x01	; 1
    16ae:	8b 81       	ldd	r24, Y+3	; 0x03
    16b0:	8c 33       	cpi	r24, 0x3C	; 60
    16b2:	08 f0       	brcs	.+2      	; 0x16b6 <RTCInit+0xf6>
    16b4:	11 e0       	ldi	r17, 0x01	; 1
    16b6:	8c 81       	ldd	r24, Y+4	; 0x04
    16b8:	8c 33       	cpi	r24, 0x3C	; 60
    16ba:	08 f0       	brcs	.+2      	; 0x16be <RTCInit+0xfe>
    16bc:	11 e0       	ldi	r17, 0x01	; 1
    16be:	8d 81       	ldd	r24, Y+5	; 0x05
    16c0:	81 50       	subi	r24, 0x01	; 1
    16c2:	87 30       	cpi	r24, 0x07	; 7
    16c4:	08 f0       	brcs	.+2      	; 0x16c8 <RTCInit+0x108>
    16c6:	11 e0       	ldi	r17, 0x01	; 1
    16c8:	2f 81       	ldd	r18, Y+7	; 0x07
    16ca:	8f ef       	ldi	r24, 0xFF	; 255
    16cc:	82 0f       	add	r24, r18
    16ce:	8c 30       	cpi	r24, 0x0C	; 12
    16d0:	18 f5       	brcc	.+70     	; 0x1718 <RTCInit+0x158>
    16d2:	0e 81       	ldd	r16, Y+6	; 0x06
    16d4:	00 23       	and	r16, r16
    16d6:	11 f1       	breq	.+68     	; 0x171c <RTCInit+0x15c>
    16d8:	82 2f       	mov	r24, r18
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	01 97       	sbiw	r24, 0x01	; 1
    16de:	09 2e       	mov	r0, r25
    16e0:	00 0c       	add	r0, r0
    16e2:	aa 0b       	sbc	r26, r26
    16e4:	87 5d       	subi	r24, 0xD7	; 215
    16e6:	9c 4f       	sbci	r25, 0xFC	; 252
    16e8:	af 4f       	sbci	r26, 0xFF	; 255
    16ea:	fc 01       	movw	r30, r24
    16ec:	f4 90       	lpm	r15, Z
    16ee:	a7 fd       	sbrc	r26, 7
    16f0:	f0 80       	ld	r15, Z
    16f2:	22 30       	cpi	r18, 0x02	; 2
    16f4:	71 f4       	brne	.+28     	; 0x1712 <RTCInit+0x152>
    16f6:	88 85       	ldd	r24, Y+8	; 0x08
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	84 31       	cpi	r24, 0x14	; 20
    16fc:	91 05       	cpc	r25, r1
    16fe:	18 f4       	brcc	.+6      	; 0x1706 <RTCInit+0x146>
    1700:	8c 5c       	subi	r24, 0xCC	; 204
    1702:	97 4f       	sbci	r25, 0xF7	; 247
    1704:	02 c0       	rjmp	.+4      	; 0x170a <RTCInit+0x14a>
    1706:	80 53       	subi	r24, 0x30	; 48
    1708:	98 4f       	sbci	r25, 0xF8	; 248
    170a:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <IsLeapYear>
    170e:	81 11       	cpse	r24, r1
    1710:	f3 94       	inc	r15
    1712:	f0 16       	cp	r15, r16
    1714:	28 f0       	brcs	.+10     	; 0x1720 <RTCInit+0x160>
    1716:	05 c0       	rjmp	.+10     	; 0x1722 <RTCInit+0x162>
    1718:	11 e0       	ldi	r17, 0x01	; 1
    171a:	03 c0       	rjmp	.+6      	; 0x1722 <RTCInit+0x162>
    171c:	11 e0       	ldi	r17, 0x01	; 1
    171e:	01 c0       	rjmp	.+2      	; 0x1722 <RTCInit+0x162>
    1720:	11 e0       	ldi	r17, 0x01	; 1
    1722:	11 23       	and	r17, r17
    1724:	b9 f0       	breq	.+46     	; 0x1754 <RTCInit+0x194>
    1726:	1a 82       	std	Y+2, r1	; 0x02
    1728:	1b 82       	std	Y+3, r1	; 0x03
    172a:	1c 82       	std	Y+4, r1	; 0x04
    172c:	81 e0       	ldi	r24, 0x01	; 1
    172e:	8e 83       	std	Y+6, r24	; 0x06
    1730:	8f 83       	std	Y+7, r24	; 0x07
    1732:	88 e1       	ldi	r24, 0x18	; 24
    1734:	88 87       	std	Y+8, r24	; 0x08
    1736:	ce 01       	movw	r24, r28
    1738:	02 96       	adiw	r24, 0x02	; 2
    173a:	0e 94 66 13 	call	0x26cc	; 0x26cc <RTCWriteHW>
    173e:	18 2f       	mov	r17, r24
    1740:	88 23       	and	r24, r24
    1742:	09 f4       	brne	.+2      	; 0x1746 <RTCInit+0x186>
    1744:	41 c0       	rjmp	.+130    	; 0x17c8 <RTCInit+0x208>
    1746:	ce 01       	movw	r24, r28
    1748:	02 96       	adiw	r24, 0x02	; 2
    174a:	0e 94 61 14 	call	0x28c2	; 0x28c2 <RTCReadHW>
    174e:	18 2f       	mov	r17, r24
    1750:	88 23       	and	r24, r24
    1752:	d1 f1       	breq	.+116    	; 0x17c8 <RTCInit+0x208>
    1754:	be 01       	movw	r22, r28
    1756:	67 5f       	subi	r22, 0xF7	; 247
    1758:	7f 4f       	sbci	r23, 0xFF	; 255
    175a:	ce 01       	movw	r24, r28
    175c:	02 96       	adiw	r24, 0x02	; 2
    175e:	0e 94 de 1c 	call	0x39bc	; 0x39bc <HWToStructTM>
    1762:	ce 01       	movw	r24, r28
    1764:	09 96       	adiw	r24, 0x09	; 9
    1766:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <mktime>
    176a:	8b 01       	movw	r16, r22
    176c:	9c 01       	movw	r18, r24
    176e:	f8 94       	cli
    1770:	00 93 45 09 	sts	0x0945, r16	; 0x800945 <sg_u64Time>
    1774:	10 93 46 09 	sts	0x0946, r17	; 0x800946 <sg_u64Time+0x1>
    1778:	20 93 47 09 	sts	0x0947, r18	; 0x800947 <sg_u64Time+0x2>
    177c:	30 93 48 09 	sts	0x0948, r19	; 0x800948 <sg_u64Time+0x3>
    1780:	10 92 49 09 	sts	0x0949, r1	; 0x800949 <sg_u64Time+0x4>
    1784:	10 92 4a 09 	sts	0x094A, r1	; 0x80094a <sg_u64Time+0x5>
    1788:	10 92 4b 09 	sts	0x094B, r1	; 0x80094b <sg_u64Time+0x6>
    178c:	10 92 4c 09 	sts	0x094C, r1	; 0x80094c <sg_u64Time+0x7>
    1790:	78 94       	sei
    1792:	87 b1       	in	r24, 0x07	; 7
    1794:	8e 7f       	andi	r24, 0xFE	; 254
    1796:	87 b9       	out	0x07, r24	; 7
    1798:	88 b1       	in	r24, 0x08	; 8
    179a:	81 60       	ori	r24, 0x01	; 1
    179c:	88 b9       	out	0x08, r24	; 8
    179e:	41 e0       	ldi	r20, 0x01	; 1
    17a0:	be 01       	movw	r22, r28
    17a2:	6f 5f       	subi	r22, 0xFF	; 255
    17a4:	7f 4f       	sbci	r23, 0xFF	; 255
    17a6:	87 e0       	ldi	r24, 0x07	; 7
    17a8:	0e 94 9f 1c 	call	0x393e	; 0x393e <RTCReadRegisters>
    17ac:	18 2f       	mov	r17, r24
    17ae:	88 23       	and	r24, r24
    17b0:	59 f0       	breq	.+22     	; 0x17c8 <RTCInit+0x208>
    17b2:	89 81       	ldd	r24, Y+1	; 0x01
    17b4:	80 64       	ori	r24, 0x40	; 64
    17b6:	89 83       	std	Y+1, r24	; 0x01
    17b8:	41 e0       	ldi	r20, 0x01	; 1
    17ba:	be 01       	movw	r22, r28
    17bc:	6f 5f       	subi	r22, 0xFF	; 255
    17be:	7f 4f       	sbci	r23, 0xFF	; 255
    17c0:	87 e0       	ldi	r24, 0x07	; 7
    17c2:	0e 94 7c 1e 	call	0x3cf8	; 0x3cf8 <RTCWriteRegisters>
    17c6:	18 2f       	mov	r17, r24
    17c8:	81 2f       	mov	r24, r17
    17ca:	a1 96       	adiw	r28, 0x21	; 33
    17cc:	0f b6       	in	r0, 0x3f	; 63
    17ce:	f8 94       	cli
    17d0:	de bf       	out	0x3e, r29	; 62
    17d2:	0f be       	out	0x3f, r0	; 63
    17d4:	cd bf       	out	0x3d, r28	; 61
    17d6:	df 91       	pop	r29
    17d8:	cf 91       	pop	r28
    17da:	1f 91       	pop	r17
    17dc:	0f 91       	pop	r16
    17de:	ff 90       	pop	r15
    17e0:	08 95       	ret

Disassembly of section .text.SDSetCS:

00004c48 <SDSetCS>:
static uint8_t sg_u8CSD[16];

// This will provide a !CS assertion or deassertion with pre/postamble clock
static void SDSetCS(bool bAsserted)
{
	if (bAsserted)
    4c48:	88 23       	and	r24, r24
    4c4a:	21 f0       	breq	.+8      	; 0x4c54 <SDSetCS+0xc>
	{
		SD_CS_ASSERT();
    4c4c:	88 b1       	in	r24, 0x08	; 8
    4c4e:	8f 7b       	andi	r24, 0xBF	; 191
    4c50:	88 b9       	out	0x08, r24	; 8
    4c52:	08 95       	ret
	}
	else
	{
		SD_CS_DEASSERT();
    4c54:	88 b1       	in	r24, 0x08	; 8
    4c56:	80 64       	ori	r24, 0x40	; 64
    4c58:	88 b9       	out	0x08, r24	; 8
    4c5a:	08 95       	ret

Disassembly of section .text.SDPowerup:

00004410 <SDPowerup>:

// Sends SD powerup sequence to card and attempts to initialize it
static void SDPowerup(void)
{
	// Set SPI baud rate to (SD_SPEED_SLOW, which is the max for the init sequence)
	(void) SPISetBaudRate(SD_SPEED_SLOW);
    4410:	60 e8       	ldi	r22, 0x80	; 128
    4412:	7a e1       	ldi	r23, 0x1A	; 26
    4414:	86 e0       	ldi	r24, 0x06	; 6
    4416:	90 e0       	ldi	r25, 0x00	; 0
    4418:	0e 94 f7 16 	call	0x2dee	; 0x2dee <SPISetBaudRate>
	
	// Deassert chip select
	SD_CS_DEASSERT();
    441c:	88 b1       	in	r24, 0x08	; 8
    441e:	80 64       	ori	r24, 0x40	; 64
    4420:	88 b9       	out	0x08, r24	; 8
	
	// Delay time after possible deassertion (2ms)
	Delay(2000);
    4422:	60 ed       	ldi	r22, 0xD0	; 208
    4424:	77 e0       	ldi	r23, 0x07	; 7
    4426:	80 e0       	ldi	r24, 0x00	; 0
    4428:	90 e0       	ldi	r25, 0x00	; 0
    442a:	0e 94 a2 20 	call	0x4144	; 0x4144 <Delay>
	
	// Send 74/80 bits of 0xff as a reset (80 bits required since we're byte-
	// sized transactions)
	SPIWritePattern(0xff,
    442e:	40 e1       	ldi	r20, 0x10	; 16
    4430:	50 e0       	ldi	r21, 0x00	; 0
    4432:	6f ef       	ldi	r22, 0xFF	; 255
    4434:	70 e0       	ldi	r23, 0x00	; 0
    4436:	82 e0       	ldi	r24, 0x02	; 2
    4438:	0e 94 75 1f 	call	0x3eea	; 0x3eea <SPITransaction>
				    128/8);

	// Delay time after write
	Delay(2000);
    443c:	60 ed       	ldi	r22, 0xD0	; 208
    443e:	77 e0       	ldi	r23, 0x07	; 7
    4440:	80 e0       	ldi	r24, 0x00	; 0
    4442:	90 e0       	ldi	r25, 0x00	; 0
    4444:	0e 94 a2 20 	call	0x4144	; 0x4144 <Delay>
    4448:	08 95       	ret

Disassembly of section .text.SDCommand:

0000327a <SDCommand>:
#define CMD8_CRC    0x87

// Sends a command to the SD card, including argument an CRC
static uint8_t SDCommand(uint8_t u8Cmd,
						 uint32_t u32Arg)
{
    327a:	df 92       	push	r13
    327c:	ef 92       	push	r14
    327e:	ff 92       	push	r15
    3280:	0f 93       	push	r16
    3282:	1f 93       	push	r17
    3284:	cf 93       	push	r28
    3286:	df 93       	push	r29
    3288:	cd b7       	in	r28, 0x3d	; 61
    328a:	de b7       	in	r29, 0x3e	; 62
    328c:	27 97       	sbiw	r28, 0x07	; 7
    328e:	0f b6       	in	r0, 0x3f	; 63
    3290:	f8 94       	cli
    3292:	de bf       	out	0x3e, r29	; 62
    3294:	0f be       	out	0x3f, r0	; 63
    3296:	cd bf       	out	0x3d, r28	; 61
    3298:	18 2f       	mov	r17, r24
    329a:	04 2f       	mov	r16, r20
    329c:	f5 2e       	mov	r15, r21
    329e:	e6 2e       	mov	r14, r22
    32a0:	d7 2e       	mov	r13, r23
	uint8_t u8Buffer[sizeof(u8Cmd) + sizeof(u32Arg) + sizeof(u8CRC)];
	uint8_t u8Response;
	uint8_t u8Count;
	
	// If this is an ACMD, prefix a CMD55
	if (u8Cmd & 0x80)
    32a2:	88 23       	and	r24, r24
    32a4:	4c f4       	brge	.+18     	; 0x32b8 <SDCommand+0x3e>
	{
		u8Response = SDCommand(CMD55,
    32a6:	40 e0       	ldi	r20, 0x00	; 0
    32a8:	50 e0       	ldi	r21, 0x00	; 0
    32aa:	ba 01       	movw	r22, r20
    32ac:	87 e3       	ldi	r24, 0x37	; 55
    32ae:	0e 94 3d 19 	call	0x327a	; 0x327a <SDCommand>
    32b2:	8f 83       	std	Y+7, r24	; 0x07
							   CMD55_ARG);
							   
		if (u8Response > 1)
    32b4:	82 30       	cpi	r24, 0x02	; 2
    32b6:	40 f5       	brcc	.+80     	; 0x3308 <SDCommand+0x8e>
			return(u8Response);
		}
	}
	
	// SD Command (OR in 0x40 so bit 47 is always a 1
	u8Buffer[0] = (u8Cmd & 0x7f) | 0x40;
    32b8:	81 2f       	mov	r24, r17
    32ba:	8f 73       	andi	r24, 0x3F	; 63
    32bc:	80 64       	ori	r24, 0x40	; 64
    32be:	89 83       	std	Y+1, r24	; 0x01
	
	// 32 Bits of argument
	u8Buffer[1] = (uint8_t) (u32Arg >> 24);
    32c0:	da 82       	std	Y+2, r13	; 0x02
	u8Buffer[2] = (uint8_t) (u32Arg >> 16);
    32c2:	eb 82       	std	Y+3, r14	; 0x03
	u8Buffer[3] = (uint8_t) (u32Arg >> 8);
    32c4:	fc 82       	std	Y+4, r15	; 0x04
	u8Buffer[4] = (uint8_t) (u32Arg >> 0);
    32c6:	0d 83       	std	Y+5, r16	; 0x05
	
	// Valid CRCs for specific commands
	u8CRC = 0;
	if (CMD0 == u8Cmd)
    32c8:	11 23       	and	r17, r17
    32ca:	11 f0       	breq	.+4      	; 0x32d0 <SDCommand+0x56>
	u8Buffer[2] = (uint8_t) (u32Arg >> 16);
	u8Buffer[3] = (uint8_t) (u32Arg >> 8);
	u8Buffer[4] = (uint8_t) (u32Arg >> 0);
	
	// Valid CRCs for specific commands
	u8CRC = 0;
    32cc:	80 e0       	ldi	r24, 0x00	; 0
    32ce:	01 c0       	rjmp	.+2      	; 0x32d2 <SDCommand+0x58>
	if (CMD0 == u8Cmd)
	{
		u8CRC = 0x95;
    32d0:	85 e9       	ldi	r24, 0x95	; 149
	}
	
	if (CMD8 == u8Cmd)
    32d2:	18 30       	cpi	r17, 0x08	; 8
    32d4:	09 f4       	brne	.+2      	; 0x32d8 <SDCommand+0x5e>
	{
		u8CRC = 0x87;
    32d6:	87 e8       	ldi	r24, 0x87	; 135
	}
	
	// Now the CRC - Bit 0 means "ignore CRC"
	u8Buffer[5] = (uint8_t) (u8CRC | 0x01);
    32d8:	81 60       	ori	r24, 0x01	; 1
    32da:	8e 83       	std	Y+6, r24	; 0x06
	
	// Send all bytes to the SD card
	SPIWrite(u8Buffer,
    32dc:	46 e0       	ldi	r20, 0x06	; 6
    32de:	50 e0       	ldi	r21, 0x00	; 0
    32e0:	be 01       	movw	r22, r28
    32e2:	6f 5f       	subi	r22, 0xFF	; 255
    32e4:	7f 4f       	sbci	r23, 0xFF	; 255
    32e6:	81 e0       	ldi	r24, 0x01	; 1
    32e8:	0e 94 75 1f 	call	0x3eea	; 0x3eea <SPITransaction>
			 sizeof(u8Buffer));
			 
	u8Count = 10;
    32ec:	1a e0       	ldi	r17, 0x0A	; 10
	
	do 
	{
		SPIRead(&u8Response,
    32ee:	41 e0       	ldi	r20, 0x01	; 1
    32f0:	50 e0       	ldi	r21, 0x00	; 0
    32f2:	be 01       	movw	r22, r28
    32f4:	69 5f       	subi	r22, 0xF9	; 249
    32f6:	7f 4f       	sbci	r23, 0xFF	; 255
    32f8:	83 e0       	ldi	r24, 0x03	; 3
    32fa:	0e 94 75 1f 	call	0x3eea	; 0x3eea <SPITransaction>
				sizeof(u8Response));
	} while ((u8Response & 0x80) && --u8Count);
    32fe:	8f 81       	ldd	r24, Y+7	; 0x07
    3300:	88 23       	and	r24, r24
    3302:	14 f4       	brge	.+4      	; 0x3308 <SDCommand+0x8e>
    3304:	11 50       	subi	r17, 0x01	; 1
    3306:	99 f7       	brne	.-26     	; 0x32ee <SDCommand+0x74>
	
	return(u8Response);
}
    3308:	27 96       	adiw	r28, 0x07	; 7
    330a:	0f b6       	in	r0, 0x3f	; 63
    330c:	f8 94       	cli
    330e:	de bf       	out	0x3e, r29	; 62
    3310:	0f be       	out	0x3f, r0	; 63
    3312:	cd bf       	out	0x3d, r28	; 61
    3314:	df 91       	pop	r29
    3316:	cf 91       	pop	r28
    3318:	1f 91       	pop	r17
    331a:	0f 91       	pop	r16
    331c:	ff 90       	pop	r15
    331e:	ef 90       	pop	r14
    3320:	df 90       	pop	r13
    3322:	08 95       	ret

Disassembly of section .text.SDGoIdle:

00004ade <SDGoIdle>:
			sizeof(uint32_t));
}

// SD - Go idle!
static uint8_t SDGoIdle(uint8_t *pu8Response)
{
    4ade:	cf 93       	push	r28
	uint8_t u8Response;
	
	SDSetCS(true);
    4ae0:	81 e0       	ldi	r24, 0x01	; 1
    4ae2:	0e 94 24 26 	call	0x4c48	; 0x4c48 <SDSetCS>
	
	// Send our CMD0 (go idle)
	u8Response = SDCommand(CMD0,
    4ae6:	40 e0       	ldi	r20, 0x00	; 0
    4ae8:	50 e0       	ldi	r21, 0x00	; 0
    4aea:	ba 01       	movw	r22, r20
    4aec:	80 e0       	ldi	r24, 0x00	; 0
    4aee:	0e 94 3d 19 	call	0x327a	; 0x327a <SDCommand>
    4af2:	c8 2f       	mov	r28, r24
						   CMD0_ARG);
						   
	SDSetCS(false);
    4af4:	80 e0       	ldi	r24, 0x00	; 0
    4af6:	0e 94 24 26 	call	0x4c48	; 0x4c48 <SDSetCS>

	return(u8Response);
}
    4afa:	8c 2f       	mov	r24, r28
    4afc:	cf 91       	pop	r28
    4afe:	08 95       	ret

Disassembly of section .text.SDSendOpCondition:

000044ec <SDSendOpCondition>:
#define ACMD41_CRC  0x00

// Send operation condition
static uint8_t SDSendOpCondition(uint8_t *pu8Response,
								 uint32_t u32Arg)
{
    44ec:	cf 92       	push	r12
    44ee:	df 92       	push	r13
    44f0:	ef 92       	push	r14
    44f2:	ff 92       	push	r15
    44f4:	cf 93       	push	r28
    44f6:	6a 01       	movw	r12, r20
    44f8:	7b 01       	movw	r14, r22
	uint8_t u8Response;
	
	// Assert chip select
	SDSetCS(true);
    44fa:	81 e0       	ldi	r24, 0x01	; 1
    44fc:	0e 94 24 26 	call	0x4c48	; 0x4c48 <SDSetCS>
	
	// Send the app command
	u8Response = SDCommand(ACMD41,
    4500:	b7 01       	movw	r22, r14
    4502:	a6 01       	movw	r20, r12
    4504:	89 ea       	ldi	r24, 0xA9	; 169
    4506:	0e 94 3d 19 	call	0x327a	; 0x327a <SDCommand>
    450a:	c8 2f       	mov	r28, r24
						   u32Arg);
	// Deassert chip select
	SDSetCS(false);
    450c:	80 e0       	ldi	r24, 0x00	; 0
    450e:	0e 94 24 26 	call	0x4c48	; 0x4c48 <SDSetCS>
	
	return(u8Response);
}
    4512:	8c 2f       	mov	r24, r28
    4514:	cf 91       	pop	r28
    4516:	ff 90       	pop	r15
    4518:	ef 90       	pop	r14
    451a:	df 90       	pop	r13
    451c:	cf 90       	pop	r12
    451e:	08 95       	ret

Disassembly of section .text.SDSendOpConditionArg:

00003f9a <SDSendOpConditionArg>:
	return(u8Response);
}

static uint8_t SDSendOpConditionArg(uint8_t *pu8Resp,
									uint32_t u32Arg)
{
    3f9a:	cf 92       	push	r12
    3f9c:	df 92       	push	r13
    3f9e:	ef 92       	push	r14
    3fa0:	ff 92       	push	r15
    3fa2:	0f 93       	push	r16
    3fa4:	1f 93       	push	r17
    3fa6:	cf 93       	push	r28
    3fa8:	df 93       	push	r29
    3faa:	8c 01       	movw	r16, r24
    3fac:	6a 01       	movw	r12, r20
    3fae:	7b 01       	movw	r14, r22
	uint8_t u8Attempts;
	uint8_t u8Response;
	
	u8Attempts = 0;
    3fb0:	c0 e0       	ldi	r28, 0x00	; 0
		
	// Loop until it comes alive - if it comes alive. Put the card in idle state.
	while (u8Attempts < SD_GO_IDLE_RETRIES)
    3fb2:	0f c0       	rjmp	.+30     	; 0x3fd2 <SDSendOpConditionArg+0x38>
	{
		u8Response = SDSendOpCondition(pu8Resp,
    3fb4:	b7 01       	movw	r22, r14
    3fb6:	a6 01       	movw	r20, r12
    3fb8:	c8 01       	movw	r24, r16
    3fba:	0e 94 76 22 	call	0x44ec	; 0x44ec <SDSendOpCondition>
    3fbe:	d8 2f       	mov	r29, r24
									   u32Arg);
		if (0 == u8Response)
    3fc0:	88 23       	and	r24, r24
    3fc2:	49 f0       	breq	.+18     	; 0x3fd6 <SDSendOpConditionArg+0x3c>
		{
			break;
		}
			
		// Give it a little time to settle
		Delay(10000);
    3fc4:	60 e1       	ldi	r22, 0x10	; 16
    3fc6:	77 e2       	ldi	r23, 0x27	; 39
    3fc8:	80 e0       	ldi	r24, 0x00	; 0
    3fca:	90 e0       	ldi	r25, 0x00	; 0
    3fcc:	0e 94 a2 20 	call	0x4144	; 0x4144 <Delay>
		u8Attempts++;
    3fd0:	cf 5f       	subi	r28, 0xFF	; 255
	uint8_t u8Response;
	
	u8Attempts = 0;
		
	// Loop until it comes alive - if it comes alive. Put the card in idle state.
	while (u8Attempts < SD_GO_IDLE_RETRIES)
    3fd2:	c4 36       	cpi	r28, 0x64	; 100
    3fd4:	78 f3       	brcs	.-34     	; 0x3fb4 <SDSendOpConditionArg+0x1a>
		Delay(10000);
		u8Attempts++;
	}

	// If we've retried too much, bail out. We're done.
	if (SD_GO_IDLE_RETRIES == u8Attempts)
    3fd6:	c4 36       	cpi	r28, 0x64	; 100
    3fd8:	09 f4       	brne	.+2      	; 0x3fdc <SDSendOpConditionArg+0x42>
	{
		u8Response = 0x80;
    3fda:	d0 e8       	ldi	r29, 0x80	; 128
	}
	
	return(u8Response);
}
    3fdc:	8d 2f       	mov	r24, r29
    3fde:	df 91       	pop	r29
    3fe0:	cf 91       	pop	r28
    3fe2:	1f 91       	pop	r17
    3fe4:	0f 91       	pop	r16
    3fe6:	ff 90       	pop	r15
    3fe8:	ef 90       	pop	r14
    3fea:	df 90       	pop	r13
    3fec:	cf 90       	pop	r12
    3fee:	08 95       	ret

Disassembly of section .text.SDWaitResponse7:

00004d26 <SDWaitResponse7>:

// This will return true if a response 7 was received, otherwise false
static void SDWaitResponse7(uint8_t *pu8ResponseByte)
{
	// Go read the remaining 4 bytes
	SPIRead(pu8ResponseByte,
    4d26:	44 e0       	ldi	r20, 0x04	; 4
    4d28:	50 e0       	ldi	r21, 0x00	; 0
    4d2a:	bc 01       	movw	r22, r24
    4d2c:	83 e0       	ldi	r24, 0x03	; 3
    4d2e:	0e 94 75 1f 	call	0x3eea	; 0x3eea <SPITransaction>
    4d32:	08 95       	ret

Disassembly of section .text.SDSendInterfaceCondition:

00004520 <SDSendInterfaceCondition>:
	return(u8Response);
}

// Send interface condition
static uint8_t SDSendInterfaceCondition(uint8_t *pu8Response)
{
    4520:	0f 93       	push	r16
    4522:	1f 93       	push	r17
    4524:	cf 93       	push	r28
    4526:	8c 01       	movw	r16, r24
	uint8_t u8Response;
	
	SDSetCS(true);
    4528:	81 e0       	ldi	r24, 0x01	; 1
    452a:	0e 94 24 26 	call	0x4c48	; 0x4c48 <SDSetCS>
	
	// Send our CMD8 Send interface condition
	u8Response = SDCommand(CMD8,
    452e:	4a ea       	ldi	r20, 0xAA	; 170
    4530:	51 e0       	ldi	r21, 0x01	; 1
    4532:	60 e0       	ldi	r22, 0x00	; 0
    4534:	70 e0       	ldi	r23, 0x00	; 0
    4536:	88 e0       	ldi	r24, 0x08	; 8
    4538:	0e 94 3d 19 	call	0x327a	; 0x327a <SDCommand>
    453c:	c8 2f       	mov	r28, r24
						   CMD8_ARG);
						   
	SDWaitResponse7(pu8Response);
    453e:	c8 01       	movw	r24, r16
    4540:	0e 94 93 26 	call	0x4d26	; 0x4d26 <SDWaitResponse7>
		
	SDSetCS(false);
    4544:	80 e0       	ldi	r24, 0x00	; 0
    4546:	0e 94 24 26 	call	0x4c48	; 0x4c48 <SDSetCS>

	return(u8Response);
}
    454a:	8c 2f       	mov	r24, r28
    454c:	cf 91       	pop	r28
    454e:	1f 91       	pop	r17
    4550:	0f 91       	pop	r16
    4552:	08 95       	ret

Disassembly of section .text.SDReadOCR:

00004554 <SDReadOCR>:
#define CMD58_ARG   0x00000000
#define CMD58_CRC   0x00

// Go read the OCR
static uint8_t SDReadOCR(uint8_t *pu8Response)
{
    4554:	0f 93       	push	r16
    4556:	1f 93       	push	r17
    4558:	cf 93       	push	r28
    455a:	8c 01       	movw	r16, r24
	uint8_t u8Response;
	
	// Assert chip select
	SDSetCS(true);
    455c:	81 e0       	ldi	r24, 0x01	; 1
    455e:	0e 94 24 26 	call	0x4c48	; 0x4c48 <SDSetCS>
	
	// Send the app command
	u8Response = SDCommand(CMD58,
    4562:	40 e0       	ldi	r20, 0x00	; 0
    4564:	50 e0       	ldi	r21, 0x00	; 0
    4566:	ba 01       	movw	r22, r20
    4568:	8a e3       	ldi	r24, 0x3A	; 58
    456a:	0e 94 3d 19 	call	0x327a	; 0x327a <SDCommand>
    456e:	c8 2f       	mov	r28, r24
						   CMD58_ARG);

	// Read response
	SDWaitResponse7(pu8Response);
    4570:	c8 01       	movw	r24, r16
    4572:	0e 94 93 26 	call	0x4d26	; 0x4d26 <SDWaitResponse7>

	// Deassert chip select
	SDSetCS(false);
    4576:	80 e0       	ldi	r24, 0x00	; 0
    4578:	0e 94 24 26 	call	0x4c48	; 0x4c48 <SDSetCS>
	
	return(u8Response);
}
    457c:	8c 2f       	mov	r24, r28
    457e:	cf 91       	pop	r28
    4580:	1f 91       	pop	r17
    4582:	0f 91       	pop	r16
    4584:	08 95       	ret

Disassembly of section .text.SDReadCSD:

00003a38 <SDReadCSD>:
#define CMD9_ARG    0x000000000
#define CMD9_CRC    0x00

// Read CSD (card specific data) - CSD is 128 bits - see the SD spec for details.
static uint8_t SDReadCSD(uint8_t *pu8CSD)
{
    3a38:	ef 92       	push	r14
    3a3a:	ff 92       	push	r15
    3a3c:	0f 93       	push	r16
    3a3e:	1f 93       	push	r17
    3a40:	cf 93       	push	r28
    3a42:	df 93       	push	r29
    3a44:	0f 92       	push	r0
    3a46:	cd b7       	in	r28, 0x3d	; 61
    3a48:	de b7       	in	r29, 0x3e	; 62
    3a4a:	7c 01       	movw	r14, r24
	uint8_t u8Response;
	uint8_t u8CmdResponse;
	uint8_t u8Count = 8;
	
	SDSetCS(true);
    3a4c:	81 e0       	ldi	r24, 0x01	; 1
    3a4e:	0e 94 24 26 	call	0x4c48	; 0x4c48 <SDSetCS>
	
	// Send our CMD9 (read CSD)
	u8CmdResponse = SDCommand(CMD9,
    3a52:	40 e0       	ldi	r20, 0x00	; 0
    3a54:	50 e0       	ldi	r21, 0x00	; 0
    3a56:	ba 01       	movw	r22, r20
    3a58:	89 e0       	ldi	r24, 0x09	; 9
    3a5a:	0e 94 3d 19 	call	0x327a	; 0x327a <SDCommand>
    3a5e:	08 2f       	mov	r16, r24
							  CMD9_ARG);
	
	// Success! Let's get a response
	if (u8CmdResponse)
    3a60:	81 11       	cpse	r24, r1
    3a62:	1c c0       	rjmp	.+56     	; 0x3a9c <SDReadCSD+0x64>
    3a64:	18 e0       	ldi	r17, 0x08	; 8
    3a66:	01 c0       	rjmp	.+2      	; 0x3a6a <SDReadCSD+0x32>
	do 
	{
		SPIRead(&u8Response,
			    sizeof(u8Response));
	} while ((u8Response != SD_START_TOKEN) &&
			 (u8Count--));
    3a68:	18 2f       	mov	r17, r24
	}
	
	// Wait until SD_START_TOKEN (start of data sector). We should easily see it in a few bytes.
	do 
	{
		SPIRead(&u8Response,
    3a6a:	41 e0       	ldi	r20, 0x01	; 1
    3a6c:	50 e0       	ldi	r21, 0x00	; 0
    3a6e:	be 01       	movw	r22, r28
    3a70:	6f 5f       	subi	r22, 0xFF	; 255
    3a72:	7f 4f       	sbci	r23, 0xFF	; 255
    3a74:	83 e0       	ldi	r24, 0x03	; 3
    3a76:	0e 94 75 1f 	call	0x3eea	; 0x3eea <SPITransaction>
			    sizeof(u8Response));
	} while ((u8Response != SD_START_TOKEN) &&
    3a7a:	89 81       	ldd	r24, Y+1	; 0x01
			 (u8Count--));
    3a7c:	8e 3f       	cpi	r24, 0xFE	; 254
    3a7e:	29 f0       	breq	.+10     	; 0x3a8a <SDReadCSD+0x52>
    3a80:	8f ef       	ldi	r24, 0xFF	; 255
    3a82:	81 0f       	add	r24, r17
	// Wait until SD_START_TOKEN (start of data sector). We should easily see it in a few bytes.
	do 
	{
		SPIRead(&u8Response,
			    sizeof(u8Response));
	} while ((u8Response != SD_START_TOKEN) &&
    3a84:	11 11       	cpse	r17, r1
    3a86:	f0 cf       	rjmp	.-32     	; 0x3a68 <SDReadCSD+0x30>
    3a88:	01 c0       	rjmp	.+2      	; 0x3a8c <SDReadCSD+0x54>
    3a8a:	81 2f       	mov	r24, r17
			 (u8Count--));
			 
	// If we haven't seen it in u8Count bytes, then error the call
	if (0 == u8Count)
    3a8c:	88 23       	and	r24, r24
    3a8e:	31 f0       	breq	.+12     	; 0x3a9c <SDReadCSD+0x64>
	{
		goto errorExit;
	}
	
	// Go read the remaining 16 bytes
	SPIRead(pu8CSD,
    3a90:	40 e1       	ldi	r20, 0x10	; 16
    3a92:	50 e0       	ldi	r21, 0x00	; 0
    3a94:	b7 01       	movw	r22, r14
    3a96:	83 e0       	ldi	r24, 0x03	; 3
    3a98:	0e 94 75 1f 	call	0x3eea	; 0x3eea <SPITransaction>
		    16);
	
errorExit:	
	SDSetCS(false);
    3a9c:	80 e0       	ldi	r24, 0x00	; 0
    3a9e:	0e 94 24 26 	call	0x4c48	; 0x4c48 <SDSetCS>
	return(u8CmdResponse);
	
}
    3aa2:	80 2f       	mov	r24, r16
    3aa4:	0f 90       	pop	r0
    3aa6:	df 91       	pop	r29
    3aa8:	cf 91       	pop	r28
    3aaa:	1f 91       	pop	r17
    3aac:	0f 91       	pop	r16
    3aae:	ff 90       	pop	r15
    3ab0:	ef 90       	pop	r14
    3ab2:	08 95       	ret

Disassembly of section .text.SDReceiveDataBlock:

00003620 <SDReceiveDataBlock>:
}

// Receives a datablock during the data phase which may take some time
static bool SDReceiveDataBlock(uint8_t *pu8Buffer,
							   uint16_t u16RXCount)
{
    3620:	cf 92       	push	r12
    3622:	df 92       	push	r13
    3624:	ef 92       	push	r14
    3626:	ff 92       	push	r15
    3628:	0f 93       	push	r16
    362a:	1f 93       	push	r17
    362c:	cf 93       	push	r28
    362e:	df 93       	push	r29
    3630:	0f 92       	push	r0
    3632:	cd b7       	in	r28, 0x3d	; 61
    3634:	de b7       	in	r29, 0x3e	; 62
    3636:	7c 01       	movw	r14, r24
    3638:	6b 01       	movw	r12, r22
	uint8_t u8Response;
	uint16_t u16Count = 4096;
    363a:	00 e0       	ldi	r16, 0x00	; 0
    363c:	10 e1       	ldi	r17, 0x10	; 16
    363e:	01 c0       	rjmp	.+2      	; 0x3642 <SDReceiveDataBlock+0x22>
	{
		SPIRead(&u8Response,
				sizeof(u8Response));
	} 
	while ((u8Response != SD_START_TOKEN) &&
		   (u16Count--));
    3640:	89 01       	movw	r16, r18
	uint16_t u16Count = 4096;
	
	// Wait for response token
	do 
	{
		SPIRead(&u8Response,
    3642:	41 e0       	ldi	r20, 0x01	; 1
    3644:	50 e0       	ldi	r21, 0x00	; 0
    3646:	be 01       	movw	r22, r28
    3648:	6f 5f       	subi	r22, 0xFF	; 255
    364a:	7f 4f       	sbci	r23, 0xFF	; 255
    364c:	83 e0       	ldi	r24, 0x03	; 3
    364e:	0e 94 75 1f 	call	0x3eea	; 0x3eea <SPITransaction>
				sizeof(u8Response));
	} 
	while ((u8Response != SD_START_TOKEN) &&
    3652:	89 81       	ldd	r24, Y+1	; 0x01
		   (u16Count--));
    3654:	8e 3f       	cpi	r24, 0xFE	; 254
    3656:	29 f0       	breq	.+10     	; 0x3662 <SDReceiveDataBlock+0x42>
    3658:	98 01       	movw	r18, r16
    365a:	21 50       	subi	r18, 0x01	; 1
    365c:	31 09       	sbc	r19, r1
	do 
	{
		SPIRead(&u8Response,
				sizeof(u8Response));
	} 
	while ((u8Response != SD_START_TOKEN) &&
    365e:	01 2b       	or	r16, r17
    3660:	79 f7       	brne	.-34     	; 0x3640 <SDReceiveDataBlock+0x20>
		   (u16Count--));
		   
	if (u8Response != SD_START_TOKEN)
    3662:	8e 3f       	cpi	r24, 0xFE	; 254
    3664:	b9 f4       	brne	.+46     	; 0x3694 <SDReceiveDataBlock+0x74>
	{
		return(false);
	}
	
	// Start of data. Pull it down.
	SPIRead(pu8Buffer,
    3666:	a6 01       	movw	r20, r12
    3668:	b7 01       	movw	r22, r14
    366a:	83 e0       	ldi	r24, 0x03	; 3
    366c:	0e 94 75 1f 	call	0x3eea	; 0x3eea <SPITransaction>
			u16RXCount);
			
	// Discard CRC
	SPIRead(&u8Response,
    3670:	41 e0       	ldi	r20, 0x01	; 1
    3672:	50 e0       	ldi	r21, 0x00	; 0
    3674:	be 01       	movw	r22, r28
    3676:	6f 5f       	subi	r22, 0xFF	; 255
    3678:	7f 4f       	sbci	r23, 0xFF	; 255
    367a:	83 e0       	ldi	r24, 0x03	; 3
    367c:	0e 94 75 1f 	call	0x3eea	; 0x3eea <SPITransaction>
			sizeof(u8Response));
	SPIRead(&u8Response,
    3680:	41 e0       	ldi	r20, 0x01	; 1
    3682:	50 e0       	ldi	r21, 0x00	; 0
    3684:	be 01       	movw	r22, r28
    3686:	6f 5f       	subi	r22, 0xFF	; 255
    3688:	7f 4f       	sbci	r23, 0xFF	; 255
    368a:	83 e0       	ldi	r24, 0x03	; 3
    368c:	0e 94 75 1f 	call	0x3eea	; 0x3eea <SPITransaction>
			sizeof(u8Response));
	return(true);			   
    3690:	81 e0       	ldi	r24, 0x01	; 1
    3692:	01 c0       	rjmp	.+2      	; 0x3696 <SDReceiveDataBlock+0x76>
	while ((u8Response != SD_START_TOKEN) &&
		   (u16Count--));
		   
	if (u8Response != SD_START_TOKEN)
	{
		return(false);
    3694:	80 e0       	ldi	r24, 0x00	; 0
	SPIRead(&u8Response,
			sizeof(u8Response));
	SPIRead(&u8Response,
			sizeof(u8Response));
	return(true);			   
}
    3696:	0f 90       	pop	r0
    3698:	df 91       	pop	r29
    369a:	cf 91       	pop	r28
    369c:	1f 91       	pop	r17
    369e:	0f 91       	pop	r16
    36a0:	ff 90       	pop	r15
    36a2:	ef 90       	pop	r14
    36a4:	df 90       	pop	r13
    36a6:	cf 90       	pop	r12
    36a8:	08 95       	ret

Disassembly of section .text.SDTransmitDataBlock:

00003042 <SDTransmitDataBlock>:

// Transmits a datablock during the data phase which may take some time
static bool SDTransmitDataBlock(uint8_t *pu8Buffer,
							    uint16_t u16TXCount,
								uint8_t u8DataPhaseToken)
{
    3042:	ef 92       	push	r14
    3044:	ff 92       	push	r15
    3046:	0f 93       	push	r16
    3048:	1f 93       	push	r17
    304a:	cf 93       	push	r28
    304c:	df 93       	push	r29
    304e:	00 d0       	rcall	.+0      	; 0x3050 <SDTransmitDataBlock+0xe>
    3050:	cd b7       	in	r28, 0x3d	; 61
    3052:	de b7       	in	r29, 0x3e	; 62
    3054:	8c 01       	movw	r16, r24
    3056:	7b 01       	movw	r14, r22
    3058:	4a 83       	std	Y+2, r20	; 0x02
	uint8_t u8Response;
	uint16_t u16Attempts;
	bool bResult = true;

	// Send the data phase token (whatever it is)
	SPIWrite(&u8DataPhaseToken,
    305a:	41 e0       	ldi	r20, 0x01	; 1
    305c:	50 e0       	ldi	r21, 0x00	; 0
    305e:	be 01       	movw	r22, r28
    3060:	6e 5f       	subi	r22, 0xFE	; 254
    3062:	7f 4f       	sbci	r23, 0xFF	; 255
    3064:	81 e0       	ldi	r24, 0x01	; 1
    3066:	0e 94 75 1f 	call	0x3eea	; 0x3eea <SPITransaction>
			 sizeof(u8DataPhaseToken));
	
	if (u8DataPhaseToken != SD_STOP_TRANSACTION)
    306a:	8a 81       	ldd	r24, Y+2	; 0x02
    306c:	8d 3f       	cpi	r24, 0xFD	; 253
    306e:	e1 f1       	breq	.+120    	; 0x30e8 <SDTransmitDataBlock+0xa6>
	{
		// As long as we're not stopping a transaction, we're writing data
		SPIWrite(pu8Buffer,
    3070:	a7 01       	movw	r20, r14
    3072:	b8 01       	movw	r22, r16
    3074:	81 e0       	ldi	r24, 0x01	; 1
    3076:	0e 94 75 1f 	call	0x3eea	; 0x3eea <SPITransaction>
				 u16TXCount);
				 
		// Wait for acceptance of the sector
		u16Attempts = 0;
    307a:	00 e0       	ldi	r16, 0x00	; 0
    307c:	10 e0       	ldi	r17, 0x00	; 0
		while (u16Attempts < SD_MAX_WRITE_ATTEMPTS)
    307e:	0d c0       	rjmp	.+26     	; 0x309a <SDTransmitDataBlock+0x58>
		{
			// Get some data
			SPIRead(&u8Response,
    3080:	41 e0       	ldi	r20, 0x01	; 1
    3082:	50 e0       	ldi	r21, 0x00	; 0
    3084:	be 01       	movw	r22, r28
    3086:	6f 5f       	subi	r22, 0xFF	; 255
    3088:	7f 4f       	sbci	r23, 0xFF	; 255
    308a:	83 e0       	ldi	r24, 0x03	; 3
    308c:	0e 94 75 1f 	call	0x3eea	; 0x3eea <SPITransaction>
					sizeof(u8Response));
			if (u8Response != 0xff)
    3090:	89 81       	ldd	r24, Y+1	; 0x01
    3092:	8f 3f       	cpi	r24, 0xFF	; 255
    3094:	31 f4       	brne	.+12     	; 0x30a2 <SDTransmitDataBlock+0x60>
			{
				break;
			}
				
			++u16Attempts;
    3096:	0f 5f       	subi	r16, 0xFF	; 255
    3098:	1f 4f       	sbci	r17, 0xFF	; 255
		SPIWrite(pu8Buffer,
				 u16TXCount);
				 
		// Wait for acceptance of the sector
		u16Attempts = 0;
		while (u16Attempts < SD_MAX_WRITE_ATTEMPTS)
    309a:	0e 39       	cpi	r16, 0x9E	; 158
    309c:	88 e9       	ldi	r24, 0x98	; 152
    309e:	18 07       	cpc	r17, r24
    30a0:	78 f3       	brcs	.-34     	; 0x3080 <SDTransmitDataBlock+0x3e>
				
			++u16Attempts;
		}
			
		// We've timed out or else the card is dead
		if (SD_MAX_WRITE_ATTEMPTS == u16Attempts)
    30a2:	0e 39       	cpi	r16, 0x9E	; 158
    30a4:	18 49       	sbci	r17, 0x98	; 152
    30a6:	11 f1       	breq	.+68     	; 0x30ec <SDTransmitDataBlock+0xaa>
			bResult = false;
			goto errorExit;
		}
			
		// See if the data was accepted
		u8Response &= 0x1f;
    30a8:	89 81       	ldd	r24, Y+1	; 0x01
    30aa:	8f 71       	andi	r24, 0x1F	; 31
    30ac:	89 83       	std	Y+1, r24	; 0x01
		if (0x05 == u8Response)
    30ae:	85 30       	cpi	r24, 0x05	; 5
    30b0:	81 f0       	breq	.+32     	; 0x30d2 <SDTransmitDataBlock+0x90>
			// Success!
		}
		else
		{
			// Sector not accepted
			bResult = false;
    30b2:	80 e0       	ldi	r24, 0x00	; 0
    30b4:	1e c0       	rjmp	.+60     	; 0x30f2 <SDTransmitDataBlock+0xb0>
			// Wait for the write to finish
			u16Attempts = 0;
			while (u16Attempts < SD_MAX_WRITE_ATTEMPTS)
			{
				// Wait for the card to accept writing the sector
				SPIRead(&u8Response,
    30b6:	41 e0       	ldi	r20, 0x01	; 1
    30b8:	50 e0       	ldi	r21, 0x00	; 0
    30ba:	be 01       	movw	r22, r28
    30bc:	6f 5f       	subi	r22, 0xFF	; 255
    30be:	7f 4f       	sbci	r23, 0xFF	; 255
    30c0:	83 e0       	ldi	r24, 0x03	; 3
    30c2:	0e 94 75 1f 	call	0x3eea	; 0x3eea <SPITransaction>
						sizeof(u8Response));
				if (u8Response)
    30c6:	89 81       	ldd	r24, Y+1	; 0x01
    30c8:	81 11       	cpse	r24, r1
    30ca:	09 c0       	rjmp	.+18     	; 0x30de <SDTransmitDataBlock+0x9c>
				{
					break;
				}
					
				++u16Attempts;
    30cc:	0f 5f       	subi	r16, 0xFF	; 255
    30ce:	1f 4f       	sbci	r17, 0xFF	; 255
    30d0:	02 c0       	rjmp	.+4      	; 0x30d6 <SDTransmitDataBlock+0x94>
    30d2:	00 e0       	ldi	r16, 0x00	; 0
    30d4:	10 e0       	ldi	r17, 0x00	; 0
		u8Response &= 0x1f;
		if (0x05 == u8Response)
		{
			// Wait for the write to finish
			u16Attempts = 0;
			while (u16Attempts < SD_MAX_WRITE_ATTEMPTS)
    30d6:	0e 39       	cpi	r16, 0x9E	; 158
    30d8:	88 e9       	ldi	r24, 0x98	; 152
    30da:	18 07       	cpc	r17, r24
    30dc:	60 f3       	brcs	.-40     	; 0x30b6 <SDTransmitDataBlock+0x74>
				}
					
				++u16Attempts;
			}
				
			if (SD_MAX_WRITE_ATTEMPTS == u16Attempts)
    30de:	0e 39       	cpi	r16, 0x9E	; 158
    30e0:	18 49       	sbci	r17, 0x98	; 152
    30e2:	31 f0       	breq	.+12     	; 0x30f0 <SDTransmitDataBlock+0xae>
							    uint16_t u16TXCount,
								uint8_t u8DataPhaseToken)
{
	uint8_t u8Response;
	uint16_t u16Attempts;
	bool bResult = true;
    30e4:	81 e0       	ldi	r24, 0x01	; 1
    30e6:	05 c0       	rjmp	.+10     	; 0x30f2 <SDTransmitDataBlock+0xb0>
    30e8:	81 e0       	ldi	r24, 0x01	; 1
    30ea:	03 c0       	rjmp	.+6      	; 0x30f2 <SDTransmitDataBlock+0xb0>
		}
			
		// We've timed out or else the card is dead
		if (SD_MAX_WRITE_ATTEMPTS == u16Attempts)
		{
			bResult = false;
    30ec:	80 e0       	ldi	r24, 0x00	; 0
    30ee:	01 c0       	rjmp	.+2      	; 0x30f2 <SDTransmitDataBlock+0xb0>
				++u16Attempts;
			}
				
			if (SD_MAX_WRITE_ATTEMPTS == u16Attempts)
			{
				bResult = false;
    30f0:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	
errorExit:
	return(bResult);
}
    30f2:	0f 90       	pop	r0
    30f4:	0f 90       	pop	r0
    30f6:	df 91       	pop	r29
    30f8:	cf 91       	pop	r28
    30fa:	1f 91       	pop	r17
    30fc:	0f 91       	pop	r16
    30fe:	ff 90       	pop	r15
    3100:	ef 90       	pop	r14
    3102:	08 95       	ret

Disassembly of section .text.SDInit:

000020da <SDInit>:

bool SDGetBlockSize(uint32_t *pu32BlockSize)
{
	*pu32BlockSize = sg_u16BlockSize;
	return(true);
}
    20da:	1f 93       	push	r17
    20dc:	cf 93       	push	r28
    20de:	df 93       	push	r29
    20e0:	00 d0       	rcall	.+0      	; 0x20e2 <SDInit+0x8>
    20e2:	00 d0       	rcall	.+0      	; 0x20e4 <SDInit+0xa>
    20e4:	0f 92       	push	r0
    20e6:	cd b7       	in	r28, 0x3d	; 61
    20e8:	de b7       	in	r29, 0x3e	; 62
    20ea:	87 b1       	in	r24, 0x07	; 7
    20ec:	80 64       	ori	r24, 0x40	; 64
    20ee:	87 b9       	out	0x07, r24	; 7
    20f0:	88 b1       	in	r24, 0x08	; 8
    20f2:	80 64       	ori	r24, 0x40	; 64
    20f4:	88 b9       	out	0x08, r24	; 8
    20f6:	88 b1       	in	r24, 0x08	; 8
    20f8:	80 64       	ori	r24, 0x40	; 64
    20fa:	88 b9       	out	0x08, r24	; 8
    20fc:	0e 94 66 23 	call	0x46cc	; 0x46cc <SPIInit>
    2100:	0e 94 08 22 	call	0x4410	; 0x4410 <SDPowerup>
    2104:	10 e0       	ldi	r17, 0x00	; 0
    2106:	0d c0       	rjmp	.+26     	; 0x2122 <SDInit+0x48>
    2108:	ce 01       	movw	r24, r28
    210a:	01 96       	adiw	r24, 0x01	; 1
    210c:	0e 94 6f 25 	call	0x4ade	; 0x4ade <SDGoIdle>
    2110:	81 30       	cpi	r24, 0x01	; 1
    2112:	49 f0       	breq	.+18     	; 0x2126 <SDInit+0x4c>
    2114:	60 e1       	ldi	r22, 0x10	; 16
    2116:	77 e2       	ldi	r23, 0x27	; 39
    2118:	80 e0       	ldi	r24, 0x00	; 0
    211a:	90 e0       	ldi	r25, 0x00	; 0
    211c:	0e 94 a2 20 	call	0x4144	; 0x4144 <Delay>
    2120:	1f 5f       	subi	r17, 0xFF	; 255
    2122:	14 36       	cpi	r17, 0x64	; 100
    2124:	88 f3       	brcs	.-30     	; 0x2108 <SDInit+0x2e>
    2126:	14 36       	cpi	r17, 0x64	; 100
    2128:	09 f4       	brne	.+2      	; 0x212c <SDInit+0x52>
    212a:	76 c0       	rjmp	.+236    	; 0x2218 <SDInit+0x13e>
    212c:	ce 01       	movw	r24, r28
    212e:	01 96       	adiw	r24, 0x01	; 1
    2130:	25 e0       	ldi	r18, 0x05	; 5
    2132:	fc 01       	movw	r30, r24
    2134:	11 92       	st	Z+, r1
    2136:	2a 95       	dec	r18
    2138:	e9 f7       	brne	.-6      	; 0x2134 <SDInit+0x5a>
    213a:	0e 94 90 22 	call	0x4520	; 0x4520 <SDSendInterfaceCondition>
    213e:	81 30       	cpi	r24, 0x01	; 1
    2140:	09 f0       	breq	.+2      	; 0x2144 <SDInit+0x6a>
    2142:	5e c0       	rjmp	.+188    	; 0x2200 <SDInit+0x126>
    2144:	8c 81       	ldd	r24, Y+4	; 0x04
    2146:	8a 3a       	cpi	r24, 0xAA	; 170
    2148:	09 f0       	breq	.+2      	; 0x214c <SDInit+0x72>
    214a:	68 c0       	rjmp	.+208    	; 0x221c <SDInit+0x142>
    214c:	40 e0       	ldi	r20, 0x00	; 0
    214e:	50 e0       	ldi	r21, 0x00	; 0
    2150:	60 e0       	ldi	r22, 0x00	; 0
    2152:	70 e4       	ldi	r23, 0x40	; 64
    2154:	ce 01       	movw	r24, r28
    2156:	01 96       	adiw	r24, 0x01	; 1
    2158:	0e 94 cd 1f 	call	0x3f9a	; 0x3f9a <SDSendOpConditionArg>
    215c:	81 11       	cpse	r24, r1
    215e:	60 c0       	rjmp	.+192    	; 0x2220 <SDInit+0x146>
    2160:	ce 01       	movw	r24, r28
    2162:	01 96       	adiw	r24, 0x01	; 1
    2164:	0e 94 aa 22 	call	0x4554	; 0x4554 <SDReadOCR>
    2168:	88 23       	and	r24, r24
    216a:	0c f4       	brge	.+2      	; 0x216e <SDInit+0x94>
    216c:	5b c0       	rjmp	.+182    	; 0x2224 <SDInit+0x14a>
    216e:	8d e2       	ldi	r24, 0x2D	; 45
    2170:	99 e0       	ldi	r25, 0x09	; 9
    2172:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <SDReadCSD>
    2176:	88 23       	and	r24, r24
    2178:	0c f4       	brge	.+2      	; 0x217c <SDInit+0xa2>
    217a:	56 c0       	rjmp	.+172    	; 0x2228 <SDInit+0x14e>
    217c:	ed e2       	ldi	r30, 0x2D	; 45
    217e:	f9 e0       	ldi	r31, 0x09	; 9
    2180:	87 81       	ldd	r24, Z+7	; 0x07
    2182:	8f 73       	andi	r24, 0x3F	; 63
    2184:	90 e0       	ldi	r25, 0x00	; 0
    2186:	a0 e0       	ldi	r26, 0x00	; 0
    2188:	b0 e0       	ldi	r27, 0x00	; 0
    218a:	bc 01       	movw	r22, r24
    218c:	55 27       	eor	r21, r21
    218e:	44 27       	eor	r20, r20
    2190:	90 85       	ldd	r25, Z+8	; 0x08
    2192:	89 2f       	mov	r24, r25
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	a0 e0       	ldi	r26, 0x00	; 0
    2198:	b0 e0       	ldi	r27, 0x00	; 0
    219a:	ba 2f       	mov	r27, r26
    219c:	a9 2f       	mov	r26, r25
    219e:	98 2f       	mov	r25, r24
    21a0:	88 27       	eor	r24, r24
    21a2:	84 2b       	or	r24, r20
    21a4:	95 2b       	or	r25, r21
    21a6:	a6 2b       	or	r26, r22
    21a8:	b7 2b       	or	r27, r23
    21aa:	21 85       	ldd	r18, Z+9	; 0x09
    21ac:	82 2b       	or	r24, r18
    21ae:	01 96       	adiw	r24, 0x01	; 1
    21b0:	a1 1d       	adc	r26, r1
    21b2:	b1 1d       	adc	r27, r1
    21b4:	07 2e       	mov	r0, r23
    21b6:	7a e0       	ldi	r23, 0x0A	; 10
    21b8:	88 0f       	add	r24, r24
    21ba:	99 1f       	adc	r25, r25
    21bc:	aa 1f       	adc	r26, r26
    21be:	bb 1f       	adc	r27, r27
    21c0:	7a 95       	dec	r23
    21c2:	d1 f7       	brne	.-12     	; 0x21b8 <SDInit+0xde>
    21c4:	70 2d       	mov	r23, r0
    21c6:	80 93 54 09 	sts	0x0954, r24	; 0x800954 <sg_u32SDSectorCount>
    21ca:	90 93 55 09 	sts	0x0955, r25	; 0x800955 <sg_u32SDSectorCount+0x1>
    21ce:	a0 93 56 09 	sts	0x0956, r26	; 0x800956 <sg_u32SDSectorCount+0x2>
    21d2:	b0 93 57 09 	sts	0x0957, r27	; 0x800957 <sg_u32SDSectorCount+0x3>
    21d6:	25 81       	ldd	r18, Z+5	; 0x05
    21d8:	2f 70       	andi	r18, 0x0F	; 15
    21da:	81 e0       	ldi	r24, 0x01	; 1
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	02 c0       	rjmp	.+4      	; 0x21e4 <SDInit+0x10a>
    21e0:	88 0f       	add	r24, r24
    21e2:	99 1f       	adc	r25, r25
    21e4:	2a 95       	dec	r18
    21e6:	e2 f7       	brpl	.-8      	; 0x21e0 <SDInit+0x106>
    21e8:	90 93 5f 09 	sts	0x095F, r25	; 0x80095f <sg_u16BlockSize+0x1>
    21ec:	80 93 5e 09 	sts	0x095E, r24	; 0x80095e <sg_u16BlockSize>
    21f0:	60 ec       	ldi	r22, 0xC0	; 192
    21f2:	78 ed       	ldi	r23, 0xD8	; 216
    21f4:	87 ea       	ldi	r24, 0xA7	; 167
    21f6:	90 e0       	ldi	r25, 0x00	; 0
    21f8:	0e 94 f7 16 	call	0x2dee	; 0x2dee <SPISetBaudRate>
    21fc:	81 e0       	ldi	r24, 0x01	; 1
    21fe:	17 c0       	rjmp	.+46     	; 0x222e <SDInit+0x154>
    2200:	40 e0       	ldi	r20, 0x00	; 0
    2202:	50 e0       	ldi	r21, 0x00	; 0
    2204:	60 e0       	ldi	r22, 0x00	; 0
    2206:	70 e4       	ldi	r23, 0x40	; 64
    2208:	ce 01       	movw	r24, r28
    220a:	01 96       	adiw	r24, 0x01	; 1
    220c:	0e 94 cd 1f 	call	0x3f9a	; 0x3f9a <SDSendOpConditionArg>
    2210:	81 11       	cpse	r24, r1
    2212:	0c c0       	rjmp	.+24     	; 0x222c <SDInit+0x152>
    2214:	81 e0       	ldi	r24, 0x01	; 1
    2216:	0b c0       	rjmp	.+22     	; 0x222e <SDInit+0x154>
    2218:	80 e0       	ldi	r24, 0x00	; 0
    221a:	09 c0       	rjmp	.+18     	; 0x222e <SDInit+0x154>
    221c:	80 e0       	ldi	r24, 0x00	; 0
    221e:	07 c0       	rjmp	.+14     	; 0x222e <SDInit+0x154>
    2220:	80 e0       	ldi	r24, 0x00	; 0
    2222:	05 c0       	rjmp	.+10     	; 0x222e <SDInit+0x154>
    2224:	80 e0       	ldi	r24, 0x00	; 0
    2226:	03 c0       	rjmp	.+6      	; 0x222e <SDInit+0x154>
    2228:	80 e0       	ldi	r24, 0x00	; 0
    222a:	01 c0       	rjmp	.+2      	; 0x222e <SDInit+0x154>
    222c:	80 e0       	ldi	r24, 0x00	; 0
    222e:	0f 90       	pop	r0
    2230:	0f 90       	pop	r0
    2232:	0f 90       	pop	r0
    2234:	0f 90       	pop	r0
    2236:	0f 90       	pop	r0
    2238:	df 91       	pop	r29
    223a:	cf 91       	pop	r28
    223c:	1f 91       	pop	r17
    223e:	08 95       	ret

Disassembly of section .text.SDRead:

00002d16 <SDRead>:

// Read one or more sectors from SD
bool SDRead(uint32_t u32Sector,
			uint8_t *pu8Buffer,
			uint32_t u32SectorCount)
{
    2d16:	8f 92       	push	r8
    2d18:	9f 92       	push	r9
    2d1a:	af 92       	push	r10
    2d1c:	bf 92       	push	r11
    2d1e:	cf 92       	push	r12
    2d20:	df 92       	push	r13
    2d22:	ef 92       	push	r14
    2d24:	ff 92       	push	r15
    2d26:	0f 93       	push	r16
    2d28:	1f 93       	push	r17
    2d2a:	cf 93       	push	r28
    2d2c:	df 93       	push	r29
    2d2e:	4b 01       	movw	r8, r22
    2d30:	5c 01       	movw	r10, r24
    2d32:	ea 01       	movw	r28, r20
    2d34:	68 01       	movw	r12, r16
    2d36:	79 01       	movw	r14, r18
	bool bResult = false;
	
	// Pet the watchdog
	WatchdogReset();
    2d38:	0e 94 c8 26 	call	0x4d90	; 0x4d90 <WatchdogReset>
		
	// Assert chip select
	SDSetCS(true);
    2d3c:	81 e0       	ldi	r24, 0x01	; 1
    2d3e:	0e 94 24 26 	call	0x4c48	; 0x4c48 <SDSetCS>

	if (1 == u32SectorCount)
    2d42:	81 e0       	ldi	r24, 0x01	; 1
    2d44:	c8 16       	cp	r12, r24
    2d46:	d1 04       	cpc	r13, r1
    2d48:	e1 04       	cpc	r14, r1
    2d4a:	f1 04       	cpc	r15, r1
    2d4c:	81 f4       	brne	.+32     	; 0x2d6e <SDRead+0x58>
	{
		if (0 == SDCommand(CMD17,
    2d4e:	b5 01       	movw	r22, r10
    2d50:	a4 01       	movw	r20, r8
    2d52:	81 e1       	ldi	r24, 0x11	; 17
    2d54:	0e 94 3d 19 	call	0x327a	; 0x327a <SDCommand>
    2d58:	81 11       	cpse	r24, r1
    2d5a:	35 c0       	rjmp	.+106    	; 0x2dc6 <SDRead+0xb0>
						   u32Sector))
		{
			bResult = SDReceiveDataBlock(pu8Buffer,
    2d5c:	60 91 5e 09 	lds	r22, 0x095E	; 0x80095e <sg_u16BlockSize>
    2d60:	70 91 5f 09 	lds	r23, 0x095F	; 0x80095f <sg_u16BlockSize+0x1>
    2d64:	ce 01       	movw	r24, r28
    2d66:	0e 94 10 1b 	call	0x3620	; 0x3620 <SDReceiveDataBlock>
    2d6a:	18 2f       	mov	r17, r24
    2d6c:	2f c0       	rjmp	.+94     	; 0x2dcc <SDRead+0xb6>
		}
	}
	else
	{
		// Multisector
		if (0 == SDCommand(CMD18,
    2d6e:	b5 01       	movw	r22, r10
    2d70:	a4 01       	movw	r20, r8
    2d72:	82 e1       	ldi	r24, 0x12	; 18
    2d74:	0e 94 3d 19 	call	0x327a	; 0x327a <SDCommand>
    2d78:	88 23       	and	r24, r24
    2d7a:	19 f0       	breq	.+6      	; 0x2d82 <SDRead+0x6c>
    2d7c:	26 c0       	rjmp	.+76     	; 0x2dca <SDRead+0xb4>
				WatchdogReset();
				
				pu8Buffer += sg_u16BlockSize;
			} 
			while ((bResult) &&
				   (u32SectorCount--));
    2d7e:	6c 01       	movw	r12, r24
    2d80:	7d 01       	movw	r14, r26
		if (0 == SDCommand(CMD18,
						   u32Sector))
		{
			do 
			{
				bResult = SDReceiveDataBlock(pu8Buffer,
    2d82:	60 91 5e 09 	lds	r22, 0x095E	; 0x80095e <sg_u16BlockSize>
    2d86:	70 91 5f 09 	lds	r23, 0x095F	; 0x80095f <sg_u16BlockSize+0x1>
    2d8a:	ce 01       	movw	r24, r28
    2d8c:	0e 94 10 1b 	call	0x3620	; 0x3620 <SDReceiveDataBlock>
    2d90:	18 2f       	mov	r17, r24
							 				 sg_u16BlockSize);
				// Pet the watchdog
				WatchdogReset();
    2d92:	0e 94 c8 26 	call	0x4d90	; 0x4d90 <WatchdogReset>
				
				pu8Buffer += sg_u16BlockSize;
    2d96:	80 91 5e 09 	lds	r24, 0x095E	; 0x80095e <sg_u16BlockSize>
    2d9a:	90 91 5f 09 	lds	r25, 0x095F	; 0x80095f <sg_u16BlockSize+0x1>
    2d9e:	c8 0f       	add	r28, r24
    2da0:	d9 1f       	adc	r29, r25
			} 
			while ((bResult) &&
				   (u32SectorCount--));
    2da2:	11 23       	and	r17, r17
    2da4:	49 f0       	breq	.+18     	; 0x2db8 <SDRead+0xa2>
    2da6:	d7 01       	movw	r26, r14
    2da8:	c6 01       	movw	r24, r12
    2daa:	01 97       	sbiw	r24, 0x01	; 1
    2dac:	a1 09       	sbc	r26, r1
    2dae:	b1 09       	sbc	r27, r1
				// Pet the watchdog
				WatchdogReset();
				
				pu8Buffer += sg_u16BlockSize;
			} 
			while ((bResult) &&
    2db0:	cd 28       	or	r12, r13
    2db2:	ce 28       	or	r12, r14
    2db4:	cf 28       	or	r12, r15
    2db6:	19 f7       	brne	.-58     	; 0x2d7e <SDRead+0x68>
				   (u32SectorCount--));
				   
			// Regardless, send a stop command
			(void) SDCommand(CMD12,
    2db8:	40 e0       	ldi	r20, 0x00	; 0
    2dba:	50 e0       	ldi	r21, 0x00	; 0
    2dbc:	ba 01       	movw	r22, r20
    2dbe:	8c e0       	ldi	r24, 0x0C	; 12
    2dc0:	0e 94 3d 19 	call	0x327a	; 0x327a <SDCommand>
    2dc4:	03 c0       	rjmp	.+6      	; 0x2dcc <SDRead+0xb6>
// Read one or more sectors from SD
bool SDRead(uint32_t u32Sector,
			uint8_t *pu8Buffer,
			uint32_t u32SectorCount)
{
	bool bResult = false;
    2dc6:	10 e0       	ldi	r17, 0x00	; 0
    2dc8:	01 c0       	rjmp	.+2      	; 0x2dcc <SDRead+0xb6>
    2dca:	10 e0       	ldi	r17, 0x00	; 0
		{
			// Failed
		}
	}
	
	SDSetCS(false);
    2dcc:	80 e0       	ldi	r24, 0x00	; 0
    2dce:	0e 94 24 26 	call	0x4c48	; 0x4c48 <SDSetCS>

	return(bResult);
}
    2dd2:	81 2f       	mov	r24, r17
    2dd4:	df 91       	pop	r29
    2dd6:	cf 91       	pop	r28
    2dd8:	1f 91       	pop	r17
    2dda:	0f 91       	pop	r16
    2ddc:	ff 90       	pop	r15
    2dde:	ef 90       	pop	r14
    2de0:	df 90       	pop	r13
    2de2:	cf 90       	pop	r12
    2de4:	bf 90       	pop	r11
    2de6:	af 90       	pop	r10
    2de8:	9f 90       	pop	r9
    2dea:	8f 90       	pop	r8
    2dec:	08 95       	ret

Disassembly of section .text.SDWrite:

00002b5e <SDWrite>:

bool SDGetBlockSize(uint32_t *pu32BlockSize)
{
	*pu32BlockSize = sg_u16BlockSize;
	return(true);
}
    2b5e:	8f 92       	push	r8
    2b60:	9f 92       	push	r9
    2b62:	af 92       	push	r10
    2b64:	bf 92       	push	r11
    2b66:	cf 92       	push	r12
    2b68:	df 92       	push	r13
    2b6a:	ef 92       	push	r14
    2b6c:	ff 92       	push	r15
    2b6e:	0f 93       	push	r16
    2b70:	1f 93       	push	r17
    2b72:	cf 93       	push	r28
    2b74:	df 93       	push	r29
    2b76:	4b 01       	movw	r8, r22
    2b78:	5c 01       	movw	r10, r24
    2b7a:	ea 01       	movw	r28, r20
    2b7c:	68 01       	movw	r12, r16
    2b7e:	79 01       	movw	r14, r18
    2b80:	0e 94 c8 26 	call	0x4d90	; 0x4d90 <WatchdogReset>
    2b84:	81 e0       	ldi	r24, 0x01	; 1
    2b86:	0e 94 24 26 	call	0x4c48	; 0x4c48 <SDSetCS>
    2b8a:	81 e0       	ldi	r24, 0x01	; 1
    2b8c:	c8 16       	cp	r12, r24
    2b8e:	d1 04       	cpc	r13, r1
    2b90:	e1 04       	cpc	r14, r1
    2b92:	f1 04       	cpc	r15, r1
    2b94:	89 f4       	brne	.+34     	; 0x2bb8 <SDWrite+0x5a>
    2b96:	b5 01       	movw	r22, r10
    2b98:	a4 01       	movw	r20, r8
    2b9a:	88 e1       	ldi	r24, 0x18	; 24
    2b9c:	0e 94 3d 19 	call	0x327a	; 0x327a <SDCommand>
    2ba0:	81 11       	cpse	r24, r1
    2ba2:	37 c0       	rjmp	.+110    	; 0x2c12 <SDWrite+0xb4>
    2ba4:	60 91 5e 09 	lds	r22, 0x095E	; 0x80095e <sg_u16BlockSize>
    2ba8:	70 91 5f 09 	lds	r23, 0x095F	; 0x80095f <sg_u16BlockSize+0x1>
    2bac:	4e ef       	ldi	r20, 0xFE	; 254
    2bae:	ce 01       	movw	r24, r28
    2bb0:	0e 94 21 18 	call	0x3042	; 0x3042 <SDTransmitDataBlock>
    2bb4:	18 2f       	mov	r17, r24
    2bb6:	30 c0       	rjmp	.+96     	; 0x2c18 <SDWrite+0xba>
    2bb8:	b5 01       	movw	r22, r10
    2bba:	a4 01       	movw	r20, r8
    2bbc:	89 e1       	ldi	r24, 0x19	; 25
    2bbe:	0e 94 3d 19 	call	0x327a	; 0x327a <SDCommand>
    2bc2:	88 23       	and	r24, r24
    2bc4:	19 f0       	breq	.+6      	; 0x2bcc <SDWrite+0x6e>
    2bc6:	27 c0       	rjmp	.+78     	; 0x2c16 <SDWrite+0xb8>
    2bc8:	6c 01       	movw	r12, r24
    2bca:	7d 01       	movw	r14, r26
    2bcc:	60 91 5e 09 	lds	r22, 0x095E	; 0x80095e <sg_u16BlockSize>
    2bd0:	70 91 5f 09 	lds	r23, 0x095F	; 0x80095f <sg_u16BlockSize+0x1>
    2bd4:	4c ef       	ldi	r20, 0xFC	; 252
    2bd6:	ce 01       	movw	r24, r28
    2bd8:	0e 94 21 18 	call	0x3042	; 0x3042 <SDTransmitDataBlock>
    2bdc:	18 2f       	mov	r17, r24
    2bde:	0e 94 c8 26 	call	0x4d90	; 0x4d90 <WatchdogReset>
    2be2:	80 91 5e 09 	lds	r24, 0x095E	; 0x80095e <sg_u16BlockSize>
    2be6:	90 91 5f 09 	lds	r25, 0x095F	; 0x80095f <sg_u16BlockSize+0x1>
    2bea:	c8 0f       	add	r28, r24
    2bec:	d9 1f       	adc	r29, r25
    2bee:	11 23       	and	r17, r17
    2bf0:	49 f0       	breq	.+18     	; 0x2c04 <SDWrite+0xa6>
    2bf2:	d7 01       	movw	r26, r14
    2bf4:	c6 01       	movw	r24, r12
    2bf6:	01 97       	sbiw	r24, 0x01	; 1
    2bf8:	a1 09       	sbc	r26, r1
    2bfa:	b1 09       	sbc	r27, r1
    2bfc:	cd 28       	or	r12, r13
    2bfe:	ce 28       	or	r12, r14
    2c00:	cf 28       	or	r12, r15
    2c02:	11 f7       	brne	.-60     	; 0x2bc8 <SDWrite+0x6a>
    2c04:	40 e0       	ldi	r20, 0x00	; 0
    2c06:	50 e0       	ldi	r21, 0x00	; 0
    2c08:	ba 01       	movw	r22, r20
    2c0a:	8c e0       	ldi	r24, 0x0C	; 12
    2c0c:	0e 94 3d 19 	call	0x327a	; 0x327a <SDCommand>
    2c10:	03 c0       	rjmp	.+6      	; 0x2c18 <SDWrite+0xba>
    2c12:	10 e0       	ldi	r17, 0x00	; 0
    2c14:	01 c0       	rjmp	.+2      	; 0x2c18 <SDWrite+0xba>
    2c16:	10 e0       	ldi	r17, 0x00	; 0
    2c18:	80 e0       	ldi	r24, 0x00	; 0
    2c1a:	0e 94 24 26 	call	0x4c48	; 0x4c48 <SDSetCS>
    2c1e:	81 2f       	mov	r24, r17
    2c20:	df 91       	pop	r29
    2c22:	cf 91       	pop	r28
    2c24:	1f 91       	pop	r17
    2c26:	0f 91       	pop	r16
    2c28:	ff 90       	pop	r15
    2c2a:	ef 90       	pop	r14
    2c2c:	df 90       	pop	r13
    2c2e:	cf 90       	pop	r12
    2c30:	bf 90       	pop	r11
    2c32:	af 90       	pop	r10
    2c34:	9f 90       	pop	r9
    2c36:	8f 90       	pop	r8
    2c38:	08 95       	ret

Disassembly of section .text.SPITransaction:

00003eea <SPITransaction>:

// Do a SPI transaction - read or write (or write pattern)
void SPITransaction(ESPIBusState eSPIBusState,
					uint8_t *pu8Buffer,
					uint16_t u16ByteCount)
{
    3eea:	fb 01       	movw	r30, r22
	// If we're transmitting, start the transaction
	if (ESTATE_RX_DATA == eSPIBusState)
    3eec:	83 30       	cpi	r24, 0x03	; 3
    3eee:	71 f4       	brne	.+28     	; 0x3f0c <SPITransaction+0x22>
    3ef0:	08 c0       	rjmp	.+16     	; 0x3f02 <SPITransaction+0x18>
	{
		while (u16ByteCount--)
		{
			// Clock out 0xff so we can receive the data
			SPDR = 0xff;
    3ef2:	2f ef       	ldi	r18, 0xFF	; 255
    3ef4:	2e bd       	out	0x2e, r18	; 46

			// Wait for data to be available
			while (0 == (SPSR & (1 << SPIF)));
    3ef6:	0d b4       	in	r0, 0x2d	; 45
    3ef8:	07 fe       	sbrs	r0, 7
    3efa:	fd cf       	rjmp	.-6      	; 0x3ef6 <SPITransaction+0xc>
			
			// Read the byte
			*pu8Buffer = SPDR;
    3efc:	2e b5       	in	r18, 0x2e	; 46
    3efe:	21 93       	st	Z+, r18
					uint16_t u16ByteCount)
{
	// If we're transmitting, start the transaction
	if (ESTATE_RX_DATA == eSPIBusState)
	{
		while (u16ByteCount--)
    3f00:	ac 01       	movw	r20, r24
    3f02:	ca 01       	movw	r24, r20
    3f04:	01 97       	sbiw	r24, 0x01	; 1
    3f06:	45 2b       	or	r20, r21
    3f08:	a1 f7       	brne	.-24     	; 0x3ef2 <SPITransaction+0x8>
    3f0a:	08 95       	ret
			*pu8Buffer = SPDR;
			++pu8Buffer;
		}
	}
	else
	if (ESTATE_TX_DATA == eSPIBusState)
    3f0c:	81 30       	cpi	r24, 0x01	; 1
    3f0e:	61 f4       	brne	.+24     	; 0x3f28 <SPITransaction+0x3e>
    3f10:	06 c0       	rjmp	.+12     	; 0x3f1e <SPITransaction+0x34>
	{
		// Clock out whatever our data is in our queue
		while (u16ByteCount--)
		{
			SPDR = *pu8Buffer;
    3f12:	21 91       	ld	r18, Z+
    3f14:	2e bd       	out	0x2e, r18	; 46
			++pu8Buffer;
			
			// Wait for the transmit to complete
			while (0 == (SPSR & (1 << SPIF)));
    3f16:	0d b4       	in	r0, 0x2d	; 45
    3f18:	07 fe       	sbrs	r0, 7
    3f1a:	fd cf       	rjmp	.-6      	; 0x3f16 <SPITransaction+0x2c>
	}
	else
	if (ESTATE_TX_DATA == eSPIBusState)
	{
		// Clock out whatever our data is in our queue
		while (u16ByteCount--)
    3f1c:	ac 01       	movw	r20, r24
    3f1e:	ca 01       	movw	r24, r20
    3f20:	01 97       	sbiw	r24, 0x01	; 1
    3f22:	45 2b       	or	r20, r21
    3f24:	b1 f7       	brne	.-20     	; 0x3f12 <SPITransaction+0x28>
    3f26:	08 95       	ret
			// Wait for the transmit to complete
			while (0 == (SPSR & (1 << SPIF)));
		}
	}
	else
	if (ESTATE_TX_PATTERN == eSPIBusState)
    3f28:	82 30       	cpi	r24, 0x02	; 2
    3f2a:	51 f4       	brne	.+20     	; 0x3f40 <SPITransaction+0x56>
    3f2c:	05 c0       	rjmp	.+10     	; 0x3f38 <SPITransaction+0x4e>
		// Clock out whatever our data is in our queue
		while (u16ByteCount--)
		{
			// This is OK - as the position where the pointer would normally
			// be is just the pattern (single byte)
			SPDR = (uint8_t) (pu8Buffer);
    3f2e:	ee bd       	out	0x2e, r30	; 46
		
			// Wait for the transmit to complete
			while (0 == (SPSR & (1 << SPIF)));
    3f30:	0d b4       	in	r0, 0x2d	; 45
    3f32:	07 fe       	sbrs	r0, 7
    3f34:	fd cf       	rjmp	.-6      	; 0x3f30 <SPITransaction+0x46>
	}
	else
	if (ESTATE_TX_PATTERN == eSPIBusState)
	{
		// Clock out whatever our data is in our queue
		while (u16ByteCount--)
    3f36:	ac 01       	movw	r20, r24
    3f38:	ca 01       	movw	r24, r20
    3f3a:	01 97       	sbiw	r24, 0x01	; 1
    3f3c:	45 2b       	or	r20, r21
    3f3e:	b9 f7       	brne	.-18     	; 0x3f2e <SPITransaction+0x44>
    3f40:	08 95       	ret

Disassembly of section .text.SPISetBaudRate:

00002dee <SPISetBaudRate>:
	{FCLKIO >> 7,	(1 << SPR1) | (0 << SPR0),	0},					// /128
};

// Sets the SPI baud rate and returns the actual baud rate selected
uint32_t SPISetBaudRate(uint32_t u32BaudRate)
{
    2dee:	cf 92       	push	r12
    2df0:	df 92       	push	r13
    2df2:	ef 92       	push	r14
    2df4:	ff 92       	push	r15
    2df6:	6b 01       	movw	r12, r22
    2df8:	7c 01       	movw	r14, r24
	uint8_t u8Loop;
	
	// Find the baud rate that's the closest
	for (u8Loop = 0; u8Loop < (sizeof(sg_sSPIBaudRates) / sizeof(sg_sSPIBaudRates[0])); u8Loop++)
    2dfa:	20 e0       	ldi	r18, 0x00	; 0
    2dfc:	19 c0       	rjmp	.+50     	; 0x2e30 <SPISetBaudRate+0x42>
	{
		if (u32BaudRate >= sg_sSPIBaudRates[u8Loop].u32BaudRate)
    2dfe:	82 2f       	mov	r24, r18
    2e00:	90 e0       	ldi	r25, 0x00	; 0
    2e02:	ac 01       	movw	r20, r24
    2e04:	44 0f       	add	r20, r20
    2e06:	55 1f       	adc	r21, r21
    2e08:	84 0f       	add	r24, r20
    2e0a:	95 1f       	adc	r25, r21
    2e0c:	88 0f       	add	r24, r24
    2e0e:	99 1f       	adc	r25, r25
    2e10:	09 2e       	mov	r0, r25
    2e12:	00 0c       	add	r0, r0
    2e14:	aa 0b       	sbc	r26, r26
    2e16:	85 55       	subi	r24, 0x55	; 85
    2e18:	9d 4f       	sbci	r25, 0xFD	; 253
    2e1a:	af 4f       	sbci	r26, 0xFF	; 255
    2e1c:	fc 01       	movw	r30, r24
    2e1e:	5a 2f       	mov	r21, r26
    2e20:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__xload_4>
    2e24:	c6 16       	cp	r12, r22
    2e26:	d7 06       	cpc	r13, r23
    2e28:	e8 06       	cpc	r14, r24
    2e2a:	f9 06       	cpc	r15, r25
    2e2c:	18 f4       	brcc	.+6      	; 0x2e34 <SPISetBaudRate+0x46>
uint32_t SPISetBaudRate(uint32_t u32BaudRate)
{
	uint8_t u8Loop;
	
	// Find the baud rate that's the closest
	for (u8Loop = 0; u8Loop < (sizeof(sg_sSPIBaudRates) / sizeof(sg_sSPIBaudRates[0])); u8Loop++)
    2e2e:	2f 5f       	subi	r18, 0xFF	; 255
    2e30:	27 30       	cpi	r18, 0x07	; 7
    2e32:	28 f3       	brcs	.-54     	; 0x2dfe <SPISetBaudRate+0x10>
			break;
		}
	}

	// If we've hit the end, use the slowest speed
	if ((sizeof(sg_sSPIBaudRates) / sizeof(sg_sSPIBaudRates[0])) == u8Loop)
    2e34:	27 30       	cpi	r18, 0x07	; 7
    2e36:	09 f4       	brne	.+2      	; 0x2e3a <SPISetBaudRate+0x4c>
	{
		u8Loop--;
    2e38:	21 50       	subi	r18, 0x01	; 1
	}

	// Found one!
	SPCR = (SPCR & (uint8_t) ~((1 << SPR1) | (1 << SPR0))) | sg_sSPIBaudRates[u8Loop].u8SPCR;
    2e3a:	6c b5       	in	r22, 0x2c	; 44
    2e3c:	30 e0       	ldi	r19, 0x00	; 0
    2e3e:	a9 01       	movw	r20, r18
    2e40:	44 0f       	add	r20, r20
    2e42:	55 1f       	adc	r21, r21
    2e44:	ca 01       	movw	r24, r20
    2e46:	82 0f       	add	r24, r18
    2e48:	93 1f       	adc	r25, r19
    2e4a:	88 0f       	add	r24, r24
    2e4c:	99 1f       	adc	r25, r25
    2e4e:	04 96       	adiw	r24, 0x04	; 4
    2e50:	09 2e       	mov	r0, r25
    2e52:	00 0c       	add	r0, r0
    2e54:	aa 0b       	sbc	r26, r26
    2e56:	85 55       	subi	r24, 0x55	; 85
    2e58:	9d 4f       	sbci	r25, 0xFD	; 253
    2e5a:	af 4f       	sbci	r26, 0xFF	; 255
    2e5c:	fc 01       	movw	r30, r24
    2e5e:	84 91       	lpm	r24, Z
    2e60:	a7 fd       	sbrc	r26, 7
    2e62:	80 81       	ld	r24, Z
    2e64:	6c 7f       	andi	r22, 0xFC	; 252
    2e66:	86 2b       	or	r24, r22
    2e68:	8c bd       	out	0x2c, r24	; 44
	SPSR = (SPSR & (uint8_t) ~(1 << SPI2X)) | sg_sSPIBaudRates[u8Loop].u8SPSR;
    2e6a:	6d b5       	in	r22, 0x2d	; 45
    2e6c:	ca 01       	movw	r24, r20
    2e6e:	82 0f       	add	r24, r18
    2e70:	93 1f       	adc	r25, r19
    2e72:	88 0f       	add	r24, r24
    2e74:	99 1f       	adc	r25, r25
    2e76:	05 96       	adiw	r24, 0x05	; 5
    2e78:	09 2e       	mov	r0, r25
    2e7a:	00 0c       	add	r0, r0
    2e7c:	aa 0b       	sbc	r26, r26
    2e7e:	85 55       	subi	r24, 0x55	; 85
    2e80:	9d 4f       	sbci	r25, 0xFD	; 253
    2e82:	af 4f       	sbci	r26, 0xFF	; 255
    2e84:	fc 01       	movw	r30, r24
    2e86:	84 91       	lpm	r24, Z
    2e88:	a7 fd       	sbrc	r26, 7
    2e8a:	80 81       	ld	r24, Z
    2e8c:	6e 7f       	andi	r22, 0xFE	; 254
    2e8e:	86 2b       	or	r24, r22
    2e90:	8d bd       	out	0x2d, r24	; 45
	return(sg_sSPIBaudRates[u8Loop].u32BaudRate);
    2e92:	24 0f       	add	r18, r20
    2e94:	35 1f       	adc	r19, r21
    2e96:	22 0f       	add	r18, r18
    2e98:	33 1f       	adc	r19, r19
    2e9a:	03 2e       	mov	r0, r19
    2e9c:	00 0c       	add	r0, r0
    2e9e:	44 0b       	sbc	r20, r20
    2ea0:	25 55       	subi	r18, 0x55	; 85
    2ea2:	3d 4f       	sbci	r19, 0xFD	; 253
    2ea4:	4f 4f       	sbci	r20, 0xFF	; 255
    2ea6:	f9 01       	movw	r30, r18
    2ea8:	54 2f       	mov	r21, r20
    2eaa:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__xload_4>
}
    2eae:	ff 90       	pop	r15
    2eb0:	ef 90       	pop	r14
    2eb2:	df 90       	pop	r13
    2eb4:	cf 90       	pop	r12
    2eb6:	08 95       	ret

Disassembly of section .text.SPIInit:

000046cc <SPIInit>:

void SPIInit(void)
{
	// Set MOSI and SCK to output
	DDR_SPI |= (1 << MOSI) | (1 << SCK);
    46cc:	84 b1       	in	r24, 0x04	; 4
    46ce:	82 68       	ori	r24, 0x82	; 130
    46d0:	84 b9       	out	0x04, r24	; 4
	DDR_SPI &= (uint8_t) ~(1 << MISO);
    46d2:	84 b1       	in	r24, 0x04	; 4
    46d4:	8e 7f       	andi	r24, 0xFE	; 254
    46d6:	84 b9       	out	0x04, r24	; 4
	
	// MISO As input (need our pullup)
	PORT_SPI |= (1 << MISO);
    46d8:	85 b1       	in	r24, 0x05	; 5
    46da:	81 60       	ori	r24, 0x01	; 1
    46dc:	85 b9       	out	0x05, r24	; 5
	
	// Enable SPI engine, master only, and clock to fosc/128 and SPI mode 0 (which is what SD wants)
	SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR1) | (1 << SPR0);
    46de:	83 e5       	ldi	r24, 0x53	; 83
    46e0:	8c bd       	out	0x2c, r24	; 44
	
	// Zero out SPSR (all zeroes)
	SPSR = 0;
    46e2:	1d bc       	out	0x2d, r1	; 45
	
	// Zero out SPIPS so the SPI IP is connected to MISO, MOSI, SCK, and SS
	MCUCR &= (uint8_t) ~(1 << SPIPS);
    46e4:	85 b7       	in	r24, 0x35	; 53
    46e6:	8f 77       	andi	r24, 0x7F	; 127
    46e8:	85 bf       	out	0x35, r24	; 53

	// Set to something slow/compatible
	(void) SPISetBaudRate(400000);
    46ea:	60 e8       	ldi	r22, 0x80	; 128
    46ec:	7a e1       	ldi	r23, 0x1A	; 26
    46ee:	86 e0       	ldi	r24, 0x06	; 6
    46f0:	90 e0       	ldi	r25, 0x00	; 0
    46f2:	0e 94 f7 16 	call	0x2dee	; 0x2dee <SPISetBaudRate>
    46f6:	08 95       	ret

Disassembly of section .text.readGlobalState:

0000435a <readGlobalState>:

static GlobalState gState;
static uint32_t currentSector;
static uint8_t __attribute__((aligned(4))) frameBuffer[FRAME_BUFFER_SIZE];  // Enlarged to handle full frame

static bool readGlobalState(void) {
    435a:	0f 93       	push	r16
    435c:	1f 93       	push	r17
    435e:	cf 93       	push	r28
	if (!SDRead(0, frameBuffer, 1)) {
    4360:	01 e0       	ldi	r16, 0x01	; 1
    4362:	10 e0       	ldi	r17, 0x00	; 0
    4364:	20 e0       	ldi	r18, 0x00	; 0
    4366:	30 e0       	ldi	r19, 0x00	; 0
    4368:	4c e2       	ldi	r20, 0x2C	; 44
    436a:	53 e0       	ldi	r21, 0x03	; 3
    436c:	60 e0       	ldi	r22, 0x00	; 0
    436e:	70 e0       	ldi	r23, 0x00	; 0
    4370:	cb 01       	movw	r24, r22
    4372:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <SDRead>
    4376:	c8 2f       	mov	r28, r24
    4378:	88 23       	and	r24, r24
    437a:	49 f0       	breq	.+18     	; 0x438e <readGlobalState+0x34>
		return false;
	}
	memcpy(&gState, frameBuffer, sizeof(GlobalState));
    437c:	4c e2       	ldi	r20, 0x2C	; 44
    437e:	53 e0       	ldi	r21, 0x03	; 3
    4380:	60 e8       	ldi	r22, 0x80	; 128
    4382:	28 ed       	ldi	r18, 0xD8	; 216
    4384:	31 e0       	ldi	r19, 0x01	; 1
    4386:	8c e2       	ldi	r24, 0x2C	; 44
    4388:	97 e0       	ldi	r25, 0x07	; 7
    438a:	0e 94 dc 22 	call	0x45b8	; 0x45b8 <memcpy>
	// TODO: Implement checksum verification
	return true;
}
    438e:	8c 2f       	mov	r24, r28
    4390:	cf 91       	pop	r28
    4392:	1f 91       	pop	r17
    4394:	0f 91       	pop	r16
    4396:	08 95       	ret

Disassembly of section .text.writeGlobalState:

00004586 <writeGlobalState>:

static bool writeGlobalState(void) {
    4586:	0f 93       	push	r16
    4588:	1f 93       	push	r17
	memcpy(frameBuffer, &gState, sizeof(GlobalState));
    458a:	4c e2       	ldi	r20, 0x2C	; 44
    458c:	57 e0       	ldi	r21, 0x07	; 7
    458e:	60 e8       	ldi	r22, 0x80	; 128
    4590:	28 ed       	ldi	r18, 0xD8	; 216
    4592:	31 e0       	ldi	r19, 0x01	; 1
    4594:	8c e2       	ldi	r24, 0x2C	; 44
    4596:	93 e0       	ldi	r25, 0x03	; 3
    4598:	0e 94 dc 22 	call	0x45b8	; 0x45b8 <memcpy>
	// TODO: Calculate and update checksum
	return SDWrite(0, frameBuffer, 1);
    459c:	01 e0       	ldi	r16, 0x01	; 1
    459e:	10 e0       	ldi	r17, 0x00	; 0
    45a0:	20 e0       	ldi	r18, 0x00	; 0
    45a2:	30 e0       	ldi	r19, 0x00	; 0
    45a4:	4c e2       	ldi	r20, 0x2C	; 44
    45a6:	53 e0       	ldi	r21, 0x03	; 3
    45a8:	60 e0       	ldi	r22, 0x00	; 0
    45aa:	70 e0       	ldi	r23, 0x00	; 0
    45ac:	cb 01       	movw	r24, r22
    45ae:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <SDWrite>
}
    45b2:	1f 91       	pop	r17
    45b4:	0f 91       	pop	r16
    45b6:	08 95       	ret

Disassembly of section .text.updateSessionMap:

00002c3a <updateSessionMap>:

static bool updateSessionMap(void) {
    2c3a:	8f 92       	push	r8
    2c3c:	9f 92       	push	r9
    2c3e:	af 92       	push	r10
    2c40:	bf 92       	push	r11
    2c42:	cf 92       	push	r12
    2c44:	df 92       	push	r13
    2c46:	ef 92       	push	r14
    2c48:	ff 92       	push	r15
    2c4a:	0f 93       	push	r16
    2c4c:	1f 93       	push	r17
	uint32_t mapSector = gState.activeSessionMapSector;
    2c4e:	ec e2       	ldi	r30, 0x2C	; 44
    2c50:	f7 e0       	ldi	r31, 0x07	; 7
    2c52:	c4 8c       	ldd	r12, Z+28	; 0x1c
    2c54:	d5 8c       	ldd	r13, Z+29	; 0x1d
    2c56:	e6 8c       	ldd	r14, Z+30	; 0x1e
    2c58:	f7 8c       	ldd	r15, Z+31	; 0x1f
	uint32_t mapOffset = gState.activeSessionMapOffset;
    2c5a:	80 a0       	ldd	r8, Z+32	; 0x20
    2c5c:	91 a0       	ldd	r9, Z+33	; 0x21
    2c5e:	a2 a0       	ldd	r10, Z+34	; 0x22
    2c60:	b3 a0       	ldd	r11, Z+35	; 0x23

	if (!SDRead(mapSector, frameBuffer, 1)) {
    2c62:	01 e0       	ldi	r16, 0x01	; 1
    2c64:	10 e0       	ldi	r17, 0x00	; 0
    2c66:	20 e0       	ldi	r18, 0x00	; 0
    2c68:	30 e0       	ldi	r19, 0x00	; 0
    2c6a:	4c e2       	ldi	r20, 0x2C	; 44
    2c6c:	53 e0       	ldi	r21, 0x03	; 3
    2c6e:	c7 01       	movw	r24, r14
    2c70:	b6 01       	movw	r22, r12
    2c72:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <SDRead>
    2c76:	88 23       	and	r24, r24
    2c78:	09 f4       	brne	.+2      	; 0x2c7c <updateSessionMap+0x42>
    2c7a:	42 c0       	rjmp	.+132    	; 0x2d00 <updateSessionMap+0xc6>
		return false;
	}

	// Update session map
	*(uint64_t*)(frameBuffer + mapOffset) = gState.newSessionSector;
    2c7c:	f4 01       	movw	r30, r8
    2c7e:	e4 5d       	subi	r30, 0xD4	; 212
    2c80:	fc 4f       	sbci	r31, 0xFC	; 252
    2c82:	00 91 44 07 	lds	r16, 0x0744	; 0x800744 <gState+0x18>
    2c86:	10 91 45 07 	lds	r17, 0x0745	; 0x800745 <gState+0x19>
    2c8a:	20 91 46 07 	lds	r18, 0x0746	; 0x800746 <gState+0x1a>
    2c8e:	30 91 47 07 	lds	r19, 0x0747	; 0x800747 <gState+0x1b>
    2c92:	00 83       	st	Z, r16
    2c94:	11 83       	std	Z+1, r17	; 0x01
    2c96:	22 83       	std	Z+2, r18	; 0x02
    2c98:	33 83       	std	Z+3, r19	; 0x03
    2c9a:	14 82       	std	Z+4, r1	; 0x04
    2c9c:	15 82       	std	Z+5, r1	; 0x05
    2c9e:	16 82       	std	Z+6, r1	; 0x06
    2ca0:	17 82       	std	Z+7, r1	; 0x07

	if (!SDWrite(mapSector, frameBuffer, 1)) {
    2ca2:	01 e0       	ldi	r16, 0x01	; 1
    2ca4:	10 e0       	ldi	r17, 0x00	; 0
    2ca6:	20 e0       	ldi	r18, 0x00	; 0
    2ca8:	30 e0       	ldi	r19, 0x00	; 0
    2caa:	4c e2       	ldi	r20, 0x2C	; 44
    2cac:	53 e0       	ldi	r21, 0x03	; 3
    2cae:	c7 01       	movw	r24, r14
    2cb0:	b6 01       	movw	r22, r12
    2cb2:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <SDWrite>
    2cb6:	88 23       	and	r24, r24
    2cb8:	19 f1       	breq	.+70     	; 0x2d00 <updateSessionMap+0xc6>
		return false;
	}

	// Update map pointers
	gState.activeSessionMapOffset += sizeof(uint64_t);
    2cba:	ec e2       	ldi	r30, 0x2C	; 44
    2cbc:	f7 e0       	ldi	r31, 0x07	; 7
    2cbe:	80 a1       	ldd	r24, Z+32	; 0x20
    2cc0:	91 a1       	ldd	r25, Z+33	; 0x21
    2cc2:	a2 a1       	ldd	r26, Z+34	; 0x22
    2cc4:	b3 a1       	ldd	r27, Z+35	; 0x23
    2cc6:	08 96       	adiw	r24, 0x08	; 8
    2cc8:	a1 1d       	adc	r26, r1
    2cca:	b1 1d       	adc	r27, r1
    2ccc:	80 a3       	std	Z+32, r24	; 0x20
    2cce:	91 a3       	std	Z+33, r25	; 0x21
    2cd0:	a2 a3       	std	Z+34, r26	; 0x22
    2cd2:	b3 a3       	std	Z+35, r27	; 0x23
	if (gState.activeSessionMapOffset >= SECTOR_SIZE) {
    2cd4:	81 15       	cp	r24, r1
    2cd6:	92 40       	sbci	r25, 0x02	; 2
    2cd8:	a1 05       	cpc	r26, r1
    2cda:	b1 05       	cpc	r27, r1
    2cdc:	78 f0       	brcs	.+30     	; 0x2cfc <updateSessionMap+0xc2>
		gState.activeSessionMapSector++;
    2cde:	84 8d       	ldd	r24, Z+28	; 0x1c
    2ce0:	95 8d       	ldd	r25, Z+29	; 0x1d
    2ce2:	a6 8d       	ldd	r26, Z+30	; 0x1e
    2ce4:	b7 8d       	ldd	r27, Z+31	; 0x1f
    2ce6:	01 96       	adiw	r24, 0x01	; 1
    2ce8:	a1 1d       	adc	r26, r1
    2cea:	b1 1d       	adc	r27, r1
    2cec:	84 8f       	std	Z+28, r24	; 0x1c
    2cee:	95 8f       	std	Z+29, r25	; 0x1d
    2cf0:	a6 8f       	std	Z+30, r26	; 0x1e
    2cf2:	b7 8f       	std	Z+31, r27	; 0x1f
		gState.activeSessionMapOffset = 0;
    2cf4:	10 a2       	std	Z+32, r1	; 0x20
    2cf6:	11 a2       	std	Z+33, r1	; 0x21
    2cf8:	12 a2       	std	Z+34, r1	; 0x22
    2cfa:	13 a2       	std	Z+35, r1	; 0x23
	}

	return writeGlobalState();
    2cfc:	0e 94 c3 22 	call	0x4586	; 0x4586 <writeGlobalState>
}
    2d00:	1f 91       	pop	r17
    2d02:	0f 91       	pop	r16
    2d04:	ff 90       	pop	r15
    2d06:	ef 90       	pop	r14
    2d08:	df 90       	pop	r13
    2d0a:	cf 90       	pop	r12
    2d0c:	bf 90       	pop	r11
    2d0e:	af 90       	pop	r10
    2d10:	9f 90       	pop	r9
    2d12:	8f 90       	pop	r8
    2d14:	08 95       	ret

Disassembly of section .text.STORE_Init:

0000383e <STORE_Init>:

bool STORE_Init(void) {
    383e:	cf 93       	push	r28
	if (!SDInit()) {
    3840:	0e 94 6d 10 	call	0x20da	; 0x20da <SDInit>
    3844:	c8 2f       	mov	r28, r24
    3846:	88 23       	and	r24, r24
    3848:	c1 f1       	breq	.+112    	; 0x38ba <STORE_Init+0x7c>
		return false;
	}

	if (!readGlobalState()) {
    384a:	0e 94 ad 21 	call	0x435a	; 0x435a <readGlobalState>
    384e:	81 11       	cpse	r24, r1
    3850:	22 c0       	rjmp	.+68     	; 0x3896 <STORE_Init+0x58>
		// Initialize global state if it doesn't exist
		memset(&gState, 0, sizeof(GlobalState));
    3852:	ec e2       	ldi	r30, 0x2C	; 44
    3854:	f7 e0       	ldi	r31, 0x07	; 7
    3856:	88 ed       	ldi	r24, 0xD8	; 216
    3858:	91 e0       	ldi	r25, 0x01	; 1
    385a:	df 01       	movw	r26, r30
    385c:	9c 01       	movw	r18, r24
    385e:	1d 92       	st	X+, r1
    3860:	21 50       	subi	r18, 0x01	; 1
    3862:	30 40       	sbci	r19, 0x00	; 0
    3864:	e1 f7       	brne	.-8      	; 0x385e <STORE_Init+0x20>
		gState.firstSessionSector = 1;
    3866:	81 e0       	ldi	r24, 0x01	; 1
    3868:	90 e0       	ldi	r25, 0x00	; 0
    386a:	a0 e0       	ldi	r26, 0x00	; 0
    386c:	b0 e0       	ldi	r27, 0x00	; 0
    386e:	84 87       	std	Z+12, r24	; 0x0c
    3870:	95 87       	std	Z+13, r25	; 0x0d
    3872:	a6 87       	std	Z+14, r26	; 0x0e
    3874:	b7 87       	std	Z+15, r27	; 0x0f
		gState.newSessionSector = 1;
    3876:	80 8f       	std	Z+24, r24	; 0x18
    3878:	91 8f       	std	Z+25, r25	; 0x19
    387a:	a2 8f       	std	Z+26, r26	; 0x1a
    387c:	b3 8f       	std	Z+27, r27	; 0x1b
		gState.activeSessionMapSector = 4;
    387e:	84 e0       	ldi	r24, 0x04	; 4
    3880:	90 e0       	ldi	r25, 0x00	; 0
    3882:	a0 e0       	ldi	r26, 0x00	; 0
    3884:	b0 e0       	ldi	r27, 0x00	; 0
    3886:	84 8f       	std	Z+28, r24	; 0x1c
    3888:	95 8f       	std	Z+29, r25	; 0x1d
    388a:	a6 8f       	std	Z+30, r26	; 0x1e
    388c:	b7 8f       	std	Z+31, r27	; 0x1f
		gState.activeSessionMapOffset = 0;
		// TODO: Initialize other fields as needed
		if (!writeGlobalState()) {
    388e:	0e 94 c3 22 	call	0x4586	; 0x4586 <writeGlobalState>
    3892:	88 23       	and	r24, r24
    3894:	89 f0       	breq	.+34     	; 0x38b8 <STORE_Init+0x7a>
			return false;
		}
	}

	currentSector = gState.newSessionSector;
    3896:	80 91 44 07 	lds	r24, 0x0744	; 0x800744 <gState+0x18>
    389a:	90 91 45 07 	lds	r25, 0x0745	; 0x800745 <gState+0x19>
    389e:	a0 91 46 07 	lds	r26, 0x0746	; 0x800746 <gState+0x1a>
    38a2:	b0 91 47 07 	lds	r27, 0x0747	; 0x800747 <gState+0x1b>
    38a6:	80 93 58 09 	sts	0x0958, r24	; 0x800958 <currentSector>
    38aa:	90 93 59 09 	sts	0x0959, r25	; 0x800959 <currentSector+0x1>
    38ae:	a0 93 5a 09 	sts	0x095A, r26	; 0x80095a <currentSector+0x2>
    38b2:	b0 93 5b 09 	sts	0x095B, r27	; 0x80095b <currentSector+0x3>
	return true;
    38b6:	01 c0       	rjmp	.+2      	; 0x38ba <STORE_Init+0x7c>
		gState.newSessionSector = 1;
		gState.activeSessionMapSector = 4;
		gState.activeSessionMapOffset = 0;
		// TODO: Initialize other fields as needed
		if (!writeGlobalState()) {
			return false;
    38b8:	c8 2f       	mov	r28, r24
		}
	}

	currentSector = gState.newSessionSector;
	return true;
}
    38ba:	8c 2f       	mov	r24, r28
    38bc:	cf 91       	pop	r28
    38be:	08 95       	ret

Disassembly of section .text.STORE_WriteFrame:

000027ca <STORE_WriteFrame>:

bool STORE_WriteFrame(volatile FrameData* frame) {
    27ca:	8f 92       	push	r8
    27cc:	9f 92       	push	r9
    27ce:	af 92       	push	r10
    27d0:	bf 92       	push	r11
    27d2:	cf 92       	push	r12
    27d4:	df 92       	push	r13
    27d6:	ef 92       	push	r14
    27d8:	ff 92       	push	r15
    27da:	0f 93       	push	r16
    27dc:	1f 93       	push	r17
    27de:	cf 93       	push	r28
    27e0:	df 93       	push	r29
	uint32_t bytesWritten = 0;
	uint32_t currentOffset = 0;
	uint32_t sectorsToWrite;
	
	// Verify frame size
	if(frame->frameBytes > FRAME_BUFFER_SIZE) {
    27e2:	fc 01       	movw	r30, r24
    27e4:	24 81       	ldd	r18, Z+4	; 0x04
    27e6:	35 81       	ldd	r19, Z+5	; 0x05
    27e8:	21 30       	cpi	r18, 0x01	; 1
    27ea:	34 40       	sbci	r19, 0x04	; 4
    27ec:	08 f0       	brcs	.+2      	; 0x27f0 <STORE_WriteFrame+0x26>
    27ee:	5b c0       	rjmp	.+182    	; 0x28a6 <STORE_WriteFrame+0xdc>
    27f0:	ec 01       	movw	r28, r24
		return false;
	}
	
	// Copy frame data to our buffer
	memcpy(frameBuffer, (const void*)frame, frame->frameBytes);
    27f2:	2c 81       	ldd	r18, Y+4	; 0x04
    27f4:	3d 81       	ldd	r19, Y+5	; 0x05
    27f6:	ac 01       	movw	r20, r24
    27f8:	60 e8       	ldi	r22, 0x80	; 128
    27fa:	8c e2       	ldi	r24, 0x2C	; 44
    27fc:	93 e0       	ldi	r25, 0x03	; 3
    27fe:	0e 94 dc 22 	call	0x45b8	; 0x45b8 <memcpy>
	
	// Zero out any remaining buffer space in last sector
	if(frame->frameBytes < FRAME_BUFFER_SIZE) {
    2802:	8c 81       	ldd	r24, Y+4	; 0x04
    2804:	9d 81       	ldd	r25, Y+5	; 0x05
    2806:	81 15       	cp	r24, r1
    2808:	94 40       	sbci	r25, 0x04	; 4
    280a:	70 f4       	brcc	.+28     	; 0x2828 <STORE_WriteFrame+0x5e>
		memset(frameBuffer + frame->frameBytes, 0, FRAME_BUFFER_SIZE - frame->frameBytes);
    280c:	2c 81       	ldd	r18, Y+4	; 0x04
    280e:	3d 81       	ldd	r19, Y+5	; 0x05
    2810:	8c 81       	ldd	r24, Y+4	; 0x04
    2812:	9d 81       	ldd	r25, Y+5	; 0x05
    2814:	40 e0       	ldi	r20, 0x00	; 0
    2816:	54 e0       	ldi	r21, 0x04	; 4
    2818:	42 1b       	sub	r20, r18
    281a:	53 0b       	sbc	r21, r19
    281c:	60 e0       	ldi	r22, 0x00	; 0
    281e:	70 e0       	ldi	r23, 0x00	; 0
    2820:	84 5d       	subi	r24, 0xD4	; 212
    2822:	9c 4f       	sbci	r25, 0xFC	; 252
    2824:	0e 94 41 26 	call	0x4c82	; 0x4c82 <memset>

	currentSector = gState.newSessionSector;
	return true;
}

bool STORE_WriteFrame(volatile FrameData* frame) {
    2828:	c1 2c       	mov	r12, r1
    282a:	d1 2c       	mov	r13, r1
    282c:	76 01       	movw	r14, r12
    282e:	68 94       	set
    2830:	c1 f8       	bld	r12, 1
    2832:	81 2c       	mov	r8, r1
    2834:	91 2c       	mov	r9, r1
    2836:	54 01       	movw	r10, r8
    2838:	2f c0       	rjmp	.+94     	; 0x2898 <STORE_WriteFrame+0xce>
	// Calculate how many complete sectors we need to write
	sectorsToWrite = SECTORS_PER_FRAME;
	
	// Write all sectors
	while(sectorsToWrite > 0) {
		if(!SDWrite(currentSector, frameBuffer + currentOffset, 1)) {
    283a:	60 91 58 09 	lds	r22, 0x0958	; 0x800958 <currentSector>
    283e:	70 91 59 09 	lds	r23, 0x0959	; 0x800959 <currentSector+0x1>
    2842:	80 91 5a 09 	lds	r24, 0x095A	; 0x80095a <currentSector+0x2>
    2846:	90 91 5b 09 	lds	r25, 0x095B	; 0x80095b <currentSector+0x3>
    284a:	01 e0       	ldi	r16, 0x01	; 1
    284c:	10 e0       	ldi	r17, 0x00	; 0
    284e:	20 e0       	ldi	r18, 0x00	; 0
    2850:	30 e0       	ldi	r19, 0x00	; 0
    2852:	a4 01       	movw	r20, r8
    2854:	44 5d       	subi	r20, 0xD4	; 212
    2856:	5c 4f       	sbci	r21, 0xFC	; 252
    2858:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <SDWrite>
    285c:	88 23       	and	r24, r24
    285e:	21 f1       	breq	.+72     	; 0x28a8 <STORE_WriteFrame+0xde>
			return false;
		}
		currentSector++;
    2860:	80 91 58 09 	lds	r24, 0x0958	; 0x800958 <currentSector>
    2864:	90 91 59 09 	lds	r25, 0x0959	; 0x800959 <currentSector+0x1>
    2868:	a0 91 5a 09 	lds	r26, 0x095A	; 0x80095a <currentSector+0x2>
    286c:	b0 91 5b 09 	lds	r27, 0x095B	; 0x80095b <currentSector+0x3>
    2870:	01 96       	adiw	r24, 0x01	; 1
    2872:	a1 1d       	adc	r26, r1
    2874:	b1 1d       	adc	r27, r1
    2876:	80 93 58 09 	sts	0x0958, r24	; 0x800958 <currentSector>
    287a:	90 93 59 09 	sts	0x0959, r25	; 0x800959 <currentSector+0x1>
    287e:	a0 93 5a 09 	sts	0x095A, r26	; 0x80095a <currentSector+0x2>
    2882:	b0 93 5b 09 	sts	0x095B, r27	; 0x80095b <currentSector+0x3>
		currentOffset += SECTOR_SIZE;
    2886:	42 e0       	ldi	r20, 0x02	; 2
    2888:	94 0e       	add	r9, r20
    288a:	a1 1c       	adc	r10, r1
    288c:	b1 1c       	adc	r11, r1
		sectorsToWrite--;
    288e:	81 e0       	ldi	r24, 0x01	; 1
    2890:	c8 1a       	sub	r12, r24
    2892:	d1 08       	sbc	r13, r1
    2894:	e1 08       	sbc	r14, r1
    2896:	f1 08       	sbc	r15, r1
	
	// Calculate how many complete sectors we need to write
	sectorsToWrite = SECTORS_PER_FRAME;
	
	// Write all sectors
	while(sectorsToWrite > 0) {
    2898:	c1 14       	cp	r12, r1
    289a:	d1 04       	cpc	r13, r1
    289c:	e1 04       	cpc	r14, r1
    289e:	f1 04       	cpc	r15, r1
    28a0:	61 f6       	brne	.-104    	; 0x283a <STORE_WriteFrame+0x70>
		currentSector++;
		currentOffset += SECTOR_SIZE;
		sectorsToWrite--;
	}
	
	return true;
    28a2:	81 e0       	ldi	r24, 0x01	; 1
    28a4:	01 c0       	rjmp	.+2      	; 0x28a8 <STORE_WriteFrame+0xde>
	uint32_t currentOffset = 0;
	uint32_t sectorsToWrite;
	
	// Verify frame size
	if(frame->frameBytes > FRAME_BUFFER_SIZE) {
		return false;
    28a6:	80 e0       	ldi	r24, 0x00	; 0
		currentOffset += SECTOR_SIZE;
		sectorsToWrite--;
	}
	
	return true;
}
    28a8:	df 91       	pop	r29
    28aa:	cf 91       	pop	r28
    28ac:	1f 91       	pop	r17
    28ae:	0f 91       	pop	r16
    28b0:	ff 90       	pop	r15
    28b2:	ef 90       	pop	r14
    28b4:	df 90       	pop	r13
    28b6:	cf 90       	pop	r12
    28b8:	bf 90       	pop	r11
    28ba:	af 90       	pop	r10
    28bc:	9f 90       	pop	r9
    28be:	8f 90       	pop	r8
    28c0:	08 95       	ret

Disassembly of section .text.STORE_StartNewSession:

000040f0 <STORE_StartNewSession>:

bool STORE_StartNewSession(void) {
	// Update session info
	gState.sessionCount++;
    40f0:	ec e2       	ldi	r30, 0x2C	; 44
    40f2:	f7 e0       	ldi	r31, 0x07	; 7
    40f4:	84 89       	ldd	r24, Z+20	; 0x14
    40f6:	95 89       	ldd	r25, Z+21	; 0x15
    40f8:	a6 89       	ldd	r26, Z+22	; 0x16
    40fa:	b7 89       	ldd	r27, Z+23	; 0x17
    40fc:	01 96       	adiw	r24, 0x01	; 1
    40fe:	a1 1d       	adc	r26, r1
    4100:	b1 1d       	adc	r27, r1
    4102:	84 8b       	std	Z+20, r24	; 0x14
    4104:	95 8b       	std	Z+21, r25	; 0x15
    4106:	a6 8b       	std	Z+22, r26	; 0x16
    4108:	b7 8b       	std	Z+23, r27	; 0x17
	gState.newSessionSector = currentSector;
    410a:	80 91 58 09 	lds	r24, 0x0958	; 0x800958 <currentSector>
    410e:	90 91 59 09 	lds	r25, 0x0959	; 0x800959 <currentSector+0x1>
    4112:	a0 91 5a 09 	lds	r26, 0x095A	; 0x80095a <currentSector+0x2>
    4116:	b0 91 5b 09 	lds	r27, 0x095B	; 0x80095b <currentSector+0x3>
    411a:	80 8f       	std	Z+24, r24	; 0x18
    411c:	91 8f       	std	Z+25, r25	; 0x19
    411e:	a2 8f       	std	Z+26, r26	; 0x1a
    4120:	b3 8f       	std	Z+27, r27	; 0x1b
	
	// Ensure sector alignment for new sessions
	if(currentSector % SECTORS_PER_FRAME != 0) {
    4122:	80 ff       	sbrs	r24, 0
    4124:	0c c0       	rjmp	.+24     	; 0x413e <STORE_StartNewSession+0x4e>
		currentSector += SECTORS_PER_FRAME - (currentSector % SECTORS_PER_FRAME);
    4126:	8e 7f       	andi	r24, 0xFE	; 254
    4128:	02 96       	adiw	r24, 0x02	; 2
    412a:	a1 1d       	adc	r26, r1
    412c:	b1 1d       	adc	r27, r1
    412e:	80 93 58 09 	sts	0x0958, r24	; 0x800958 <currentSector>
    4132:	90 93 59 09 	sts	0x0959, r25	; 0x800959 <currentSector+0x1>
    4136:	a0 93 5a 09 	sts	0x095A, r26	; 0x80095a <currentSector+0x2>
    413a:	b0 93 5b 09 	sts	0x095B, r27	; 0x80095b <currentSector+0x3>
	}
	
	return updateSessionMap();
    413e:	0e 94 1d 16 	call	0x2c3a	; 0x2c3a <updateSessionMap>
}
    4142:	08 95       	ret

Disassembly of section .text.STORE_EndSession:

00003f42 <STORE_EndSession>:

bool STORE_EndSession(void) {
	// Ensure we end on a frame boundary
	if(currentSector % SECTORS_PER_FRAME != 0) {
    3f42:	80 91 58 09 	lds	r24, 0x0958	; 0x800958 <currentSector>
    3f46:	90 91 59 09 	lds	r25, 0x0959	; 0x800959 <currentSector+0x1>
    3f4a:	a0 91 5a 09 	lds	r26, 0x095A	; 0x80095a <currentSector+0x2>
    3f4e:	b0 91 5b 09 	lds	r27, 0x095B	; 0x80095b <currentSector+0x3>
    3f52:	80 ff       	sbrs	r24, 0
    3f54:	0c c0       	rjmp	.+24     	; 0x3f6e <STORE_EndSession+0x2c>
		currentSector += SECTORS_PER_FRAME - (currentSector % SECTORS_PER_FRAME);
    3f56:	8e 7f       	andi	r24, 0xFE	; 254
    3f58:	02 96       	adiw	r24, 0x02	; 2
    3f5a:	a1 1d       	adc	r26, r1
    3f5c:	b1 1d       	adc	r27, r1
    3f5e:	80 93 58 09 	sts	0x0958, r24	; 0x800958 <currentSector>
    3f62:	90 93 59 09 	sts	0x0959, r25	; 0x800959 <currentSector+0x1>
    3f66:	a0 93 5a 09 	sts	0x095A, r26	; 0x80095a <currentSector+0x2>
    3f6a:	b0 93 5b 09 	sts	0x095B, r27	; 0x80095b <currentSector+0x3>
	}
	
	gState.lastSessionSector = currentSector - 1;
    3f6e:	80 91 58 09 	lds	r24, 0x0958	; 0x800958 <currentSector>
    3f72:	90 91 59 09 	lds	r25, 0x0959	; 0x800959 <currentSector+0x1>
    3f76:	a0 91 5a 09 	lds	r26, 0x095A	; 0x80095a <currentSector+0x2>
    3f7a:	b0 91 5b 09 	lds	r27, 0x095B	; 0x80095b <currentSector+0x3>
    3f7e:	01 97       	sbiw	r24, 0x01	; 1
    3f80:	a1 09       	sbc	r26, r1
    3f82:	b1 09       	sbc	r27, r1
    3f84:	80 93 3c 07 	sts	0x073C, r24	; 0x80073c <gState+0x10>
    3f88:	90 93 3d 07 	sts	0x073D, r25	; 0x80073d <gState+0x11>
    3f8c:	a0 93 3e 07 	sts	0x073E, r26	; 0x80073e <gState+0x12>
    3f90:	b0 93 3f 07 	sts	0x073F, r27	; 0x80073f <gState+0x13>
	return writeGlobalState();
    3f94:	0e 94 c3 22 	call	0x4586	; 0x4586 <writeGlobalState>
}
    3f98:	08 95       	ret

Disassembly of section .text.vUARTtxDataAvailable:

00004aba <vUARTtxDataAvailable>:
#endif

bool vUARTIsBusy(void) {
	return ((sg_etxState != ESTATE_IDLE) ||
		(sg_eCell_mc_rxState != ESTATE_IDLE));
}
    4aba:	80 91 79 09 	lds	r24, 0x0979	; 0x800979 <sg_u8SendIndex>
    4abe:	81 11       	cpse	r24, r1
    4ac0:	06 c0       	rjmp	.+12     	; 0x4ace <vUARTtxDataAvailable+0x14>
    4ac2:	0e 94 a5 23 	call	0x474a	; 0x474a <PlatformGetSendData>
    4ac6:	90 93 61 09 	sts	0x0961, r25	; 0x800961 <sg_u8SendData+0x1>
    4aca:	80 93 60 09 	sts	0x0960, r24	; 0x800960 <sg_u8SendData>
    4ace:	80 91 79 09 	lds	r24, 0x0979	; 0x800979 <sg_u8SendIndex>
    4ad2:	81 11       	cpse	r24, r1
    4ad4:	02 c0       	rjmp	.+4      	; 0x4ada <vUARTtxDataAvailable+0x20>
    4ad6:	81 e0       	ldi	r24, 0x01	; 1
    4ad8:	08 95       	ret
    4ada:	80 e0       	ldi	r24, 0x00	; 0
    4adc:	08 95       	ret

Disassembly of section .text.vUARTtxDataGet:

00004286 <vUARTtxDataGet>:
    4286:	80 91 79 09 	lds	r24, 0x0979	; 0x800979 <sg_u8SendIndex>
    428a:	81 11       	cpse	r24, r1
    428c:	10 c0       	rjmp	.+32     	; 0x42ae <vUARTtxDataGet+0x28>
    428e:	81 e0       	ldi	r24, 0x01	; 1
    4290:	0e 94 a5 23 	call	0x474a	; 0x474a <PlatformGetSendData>
    4294:	e0 e6       	ldi	r30, 0x60	; 96
    4296:	f9 e0       	ldi	r31, 0x09	; 9
    4298:	90 83       	st	Z, r25
    429a:	81 83       	std	Z+1, r24	; 0x01
    429c:	80 81       	ld	r24, Z
    429e:	88 23       	and	r24, r24
    42a0:	24 f4       	brge	.+8      	; 0x42aa <vUARTtxDataGet+0x24>
    42a2:	81 e0       	ldi	r24, 0x01	; 1
    42a4:	80 93 7b 09 	sts	0x097B, r24	; 0x80097b <sg_bCellReportsReuested>
    42a8:	02 c0       	rjmp	.+4      	; 0x42ae <vUARTtxDataGet+0x28>
    42aa:	10 92 7b 09 	sts	0x097B, r1	; 0x80097b <sg_bCellReportsReuested>
    42ae:	e0 91 79 09 	lds	r30, 0x0979	; 0x800979 <sg_u8SendIndex>
    42b2:	f0 e0       	ldi	r31, 0x00	; 0
    42b4:	e0 5a       	subi	r30, 0xA0	; 160
    42b6:	f6 4f       	sbci	r31, 0xF6	; 246
    42b8:	80 81       	ld	r24, Z
    42ba:	90 91 79 09 	lds	r25, 0x0979	; 0x800979 <sg_u8SendIndex>
    42be:	9f 5f       	subi	r25, 0xFF	; 255
    42c0:	90 93 79 09 	sts	0x0979, r25	; 0x800979 <sg_u8SendIndex>
    42c4:	90 91 79 09 	lds	r25, 0x0979	; 0x800979 <sg_u8SendIndex>
    42c8:	92 30       	cpi	r25, 0x02	; 2
    42ca:	10 f0       	brcs	.+4      	; 0x42d0 <vUARTtxDataGet+0x4a>
    42cc:	10 92 79 09 	sts	0x0979, r1	; 0x800979 <sg_u8SendIndex>
    42d0:	08 95       	ret

Disassembly of section .text.vUARTRXReset:

00004d6e <vUARTRXReset>:

// Called when we have a string timeout or need to reset the state machine
// for the MC RX side of things
void vUARTRXReset(void)
{
	sg_eCell_mc_rxState = ESTATE_IDLE;
    4d6e:	10 92 82 09 	sts	0x0982, r1	; 0x800982 <sg_eCell_mc_rxState>
	vUARTRXStart();
    4d72:	0e 94 03 26 	call	0x4c06	; 0x4c06 <vUARTRXStart>
    4d76:	08 95       	ret

Disassembly of section .text.vUARTStarttx:

00003ff0 <vUARTStarttx>:
#endif

bool vUARTIsBusy(void) {
	return ((sg_etxState != ESTATE_IDLE) ||
		(sg_eCell_mc_rxState != ESTATE_IDLE));
}
    3ff0:	80 91 7c 09 	lds	r24, 0x097C	; 0x80097c <sg_etxState>
    3ff4:	81 11       	cpse	r24, r1
    3ff6:	23 c0       	rjmp	.+70     	; 0x403e <vUARTStarttx+0x4e>
    3ff8:	80 91 82 09 	lds	r24, 0x0982	; 0x800982 <sg_eCell_mc_rxState>
    3ffc:	81 11       	cpse	r24, r1
    3ffe:	21 c0       	rjmp	.+66     	; 0x4042 <vUARTStarttx+0x52>
    4000:	82 e0       	ldi	r24, 0x02	; 2
    4002:	80 93 7c 09 	sts	0x097C, r24	; 0x80097c <sg_etxState>
    4006:	10 92 79 09 	sts	0x0979, r1	; 0x800979 <sg_u8SendIndex>
    400a:	10 92 7f 09 	sts	0x097F, r1	; 0x80097f <sg_u8txBitCount>
    400e:	81 e0       	ldi	r24, 0x01	; 1
    4010:	80 93 7a 09 	sts	0x097A, r24	; 0x80097a <sg_bMCTxNextBit>
    4014:	86 b5       	in	r24, 0x26	; 38
    4016:	8e 5c       	subi	r24, 0xCE	; 206
    4018:	87 bd       	out	0x27, r24	; 39
    401a:	85 b3       	in	r24, 0x15	; 21
    401c:	82 60       	ori	r24, 0x02	; 2
    401e:	85 bb       	out	0x15, r24	; 21
    4020:	ee e6       	ldi	r30, 0x6E	; 110
    4022:	f0 e0       	ldi	r31, 0x00	; 0
    4024:	80 81       	ld	r24, Z
    4026:	82 60       	ori	r24, 0x02	; 2
    4028:	80 83       	st	Z, r24
    402a:	0e 94 5d 25 	call	0x4aba	; 0x4aba <vUARTtxDataAvailable>
    402e:	80 93 7d 09 	sts	0x097D, r24	; 0x80097d <sg_btxMoreAvailable>
    4032:	0e 94 43 21 	call	0x4286	; 0x4286 <vUARTtxDataGet>
    4036:	80 93 7e 09 	sts	0x097E, r24	; 0x80097e <sg_u8txDataByte>
    403a:	81 e0       	ldi	r24, 0x01	; 1
    403c:	08 95       	ret
    403e:	80 e0       	ldi	r24, 0x00	; 0
    4040:	08 95       	ret
    4042:	80 e0       	ldi	r24, 0x00	; 0
    4044:	08 95       	ret

Disassembly of section .text.__vector_8:

00003d62 <__vector_8>:
    3d62:	1f 92       	push	r1
    3d64:	0f 92       	push	r0
    3d66:	0f b6       	in	r0, 0x3f	; 63
    3d68:	0f 92       	push	r0
    3d6a:	11 24       	eor	r1, r1
    3d6c:	8f 93       	push	r24
    3d6e:	ef 93       	push	r30
    3d70:	ff 93       	push	r31
    3d72:	86 b5       	in	r24, 0x26	; 38
    3d74:	85 5c       	subi	r24, 0xC5	; 197
    3d76:	88 bd       	out	0x28, r24	; 40
    3d78:	85 b3       	in	r24, 0x15	; 21
    3d7a:	84 60       	ori	r24, 0x04	; 4
    3d7c:	85 bb       	out	0x15, r24	; 21
    3d7e:	ee e6       	ldi	r30, 0x6E	; 110
    3d80:	f0 e0       	ldi	r31, 0x00	; 0
    3d82:	80 81       	ld	r24, Z
    3d84:	84 60       	ori	r24, 0x04	; 4
    3d86:	80 83       	st	Z, r24
    3d88:	8d b3       	in	r24, 0x1d	; 29
    3d8a:	8d 7f       	andi	r24, 0xFD	; 253
    3d8c:	8d bb       	out	0x1d, r24	; 29
    3d8e:	80 91 78 09 	lds	r24, 0x0978	; 0x800978 <sg_bState>
    3d92:	88 23       	and	r24, r24
    3d94:	31 f0       	breq	.+12     	; 0x3da2 <__vector_8+0x40>
    3d96:	88 b1       	in	r24, 0x08	; 8
    3d98:	80 68       	ori	r24, 0x80	; 128
    3d9a:	88 b9       	out	0x08, r24	; 8
    3d9c:	10 92 78 09 	sts	0x0978, r1	; 0x800978 <sg_bState>
    3da0:	06 c0       	rjmp	.+12     	; 0x3dae <__vector_8+0x4c>
    3da2:	88 b1       	in	r24, 0x08	; 8
    3da4:	8f 77       	andi	r24, 0x7F	; 127
    3da6:	88 b9       	out	0x08, r24	; 8
    3da8:	81 e0       	ldi	r24, 0x01	; 1
    3daa:	80 93 78 09 	sts	0x0978, r24	; 0x800978 <sg_bState>
    3dae:	81 e0       	ldi	r24, 0x01	; 1
    3db0:	80 93 82 09 	sts	0x0982, r24	; 0x800982 <sg_eCell_mc_rxState>
    3db4:	10 92 84 09 	sts	0x0984, r1	; 0x800984 <sg_u8Cell_mc_rxBitCount>
    3db8:	ff 91       	pop	r31
    3dba:	ef 91       	pop	r30
    3dbc:	8f 91       	pop	r24
    3dbe:	0f 90       	pop	r0
    3dc0:	0f be       	out	0x3f, r0	; 63
    3dc2:	0f 90       	pop	r0
    3dc4:	1f 90       	pop	r1
    3dc6:	18 95       	reti

Disassembly of section .text.__vector_16:

000029a4 <__vector_16>:
    29a4:	1f 92       	push	r1
    29a6:	0f 92       	push	r0
    29a8:	0f b6       	in	r0, 0x3f	; 63
    29aa:	0f 92       	push	r0
    29ac:	11 24       	eor	r1, r1
    29ae:	2f 93       	push	r18
    29b0:	3f 93       	push	r19
    29b2:	4f 93       	push	r20
    29b4:	5f 93       	push	r21
    29b6:	6f 93       	push	r22
    29b8:	7f 93       	push	r23
    29ba:	8f 93       	push	r24
    29bc:	9f 93       	push	r25
    29be:	af 93       	push	r26
    29c0:	bf 93       	push	r27
    29c2:	ef 93       	push	r30
    29c4:	ff 93       	push	r31
    29c6:	86 b5       	in	r24, 0x26	; 38
    29c8:	85 5d       	subi	r24, 0xD5	; 213
    29ca:	88 bd       	out	0x28, r24	; 40
    29cc:	85 b3       	in	r24, 0x15	; 21
    29ce:	84 60       	ori	r24, 0x04	; 4
    29d0:	85 bb       	out	0x15, r24	; 21
    29d2:	ee e6       	ldi	r30, 0x6E	; 110
    29d4:	f0 e0       	ldi	r31, 0x00	; 0
    29d6:	80 81       	ld	r24, Z
    29d8:	84 60       	ori	r24, 0x04	; 4
    29da:	80 83       	st	Z, r24
    29dc:	20 91 81 09 	lds	r18, 0x0981	; 0x800981 <sg_bCell_mc_rxPriorState>
    29e0:	83 b1       	in	r24, 0x03	; 3
    29e2:	82 fb       	bst	r24, 2
    29e4:	88 27       	eor	r24, r24
    29e6:	80 f9       	bld	r24, 0
    29e8:	80 93 81 09 	sts	0x0981, r24	; 0x800981 <sg_bCell_mc_rxPriorState>
    29ec:	90 91 78 09 	lds	r25, 0x0978	; 0x800978 <sg_bState>
    29f0:	99 23       	and	r25, r25
    29f2:	31 f0       	breq	.+12     	; 0x2a00 <__vector_16+0x5c>
    29f4:	98 b1       	in	r25, 0x08	; 8
    29f6:	90 68       	ori	r25, 0x80	; 128
    29f8:	98 b9       	out	0x08, r25	; 8
    29fa:	10 92 78 09 	sts	0x0978, r1	; 0x800978 <sg_bState>
    29fe:	06 c0       	rjmp	.+12     	; 0x2a0c <__vector_16+0x68>
    2a00:	98 b1       	in	r25, 0x08	; 8
    2a02:	9f 77       	andi	r25, 0x7F	; 127
    2a04:	98 b9       	out	0x08, r25	; 8
    2a06:	81 e0       	ldi	r24, 0x01	; 1
    2a08:	80 93 78 09 	sts	0x0978, r24	; 0x800978 <sg_bState>
    2a0c:	80 91 84 09 	lds	r24, 0x0984	; 0x800984 <sg_u8Cell_mc_rxBitCount>
    2a10:	8f 5f       	subi	r24, 0xFF	; 255
    2a12:	80 93 84 09 	sts	0x0984, r24	; 0x800984 <sg_u8Cell_mc_rxBitCount>
    2a16:	81 30       	cpi	r24, 0x01	; 1
    2a18:	19 f4       	brne	.+6      	; 0x2a20 <__vector_16+0x7c>
    2a1a:	10 92 83 09 	sts	0x0983, r1	; 0x800983 <sg_u8rxDataByte>
    2a1e:	20 c0       	rjmp	.+64     	; 0x2a60 <__vector_16+0xbc>
    2a20:	8a 30       	cpi	r24, 0x0A	; 10
    2a22:	38 f4       	brcc	.+14     	; 0x2a32 <__vector_16+0x8e>
    2a24:	80 91 83 09 	lds	r24, 0x0983	; 0x800983 <sg_u8rxDataByte>
    2a28:	88 0f       	add	r24, r24
    2a2a:	82 2b       	or	r24, r18
    2a2c:	80 93 83 09 	sts	0x0983, r24	; 0x800983 <sg_u8rxDataByte>
    2a30:	17 c0       	rjmp	.+46     	; 0x2a60 <__vector_16+0xbc>
    2a32:	20 93 80 09 	sts	0x0980, r18	; 0x800980 <sg_bCell_mc_rxMoreData>
    2a36:	8c e0       	ldi	r24, 0x0C	; 12
    2a38:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f0069>
    2a3c:	8c b3       	in	r24, 0x1c	; 28
    2a3e:	82 60       	ori	r24, 0x02	; 2
    2a40:	8c bb       	out	0x1c, r24	; 28
    2a42:	8d b3       	in	r24, 0x1d	; 29
    2a44:	82 60       	ori	r24, 0x02	; 2
    2a46:	8d bb       	out	0x1d, r24	; 29
    2a48:	ee e6       	ldi	r30, 0x6E	; 110
    2a4a:	f0 e0       	ldi	r31, 0x00	; 0
    2a4c:	80 81       	ld	r24, Z
    2a4e:	8b 7f       	andi	r24, 0xFB	; 251
    2a50:	80 83       	st	Z, r24
    2a52:	80 91 83 09 	lds	r24, 0x0983	; 0x800983 <sg_u8rxDataByte>
    2a56:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <vUARTRXData>
    2a5a:	83 e0       	ldi	r24, 0x03	; 3
    2a5c:	80 93 82 09 	sts	0x0982, r24	; 0x800982 <sg_eCell_mc_rxState>
    2a60:	ff 91       	pop	r31
    2a62:	ef 91       	pop	r30
    2a64:	bf 91       	pop	r27
    2a66:	af 91       	pop	r26
    2a68:	9f 91       	pop	r25
    2a6a:	8f 91       	pop	r24
    2a6c:	7f 91       	pop	r23
    2a6e:	6f 91       	pop	r22
    2a70:	5f 91       	pop	r21
    2a72:	4f 91       	pop	r20
    2a74:	3f 91       	pop	r19
    2a76:	2f 91       	pop	r18
    2a78:	0f 90       	pop	r0
    2a7a:	0f be       	out	0x3f, r0	; 63
    2a7c:	0f 90       	pop	r0
    2a7e:	1f 90       	pop	r1
    2a80:	18 95       	reti

Disassembly of section .text.__vector_15:

0000237c <__vector_15>:
    237c:	1f 92       	push	r1
    237e:	0f 92       	push	r0
    2380:	0f b6       	in	r0, 0x3f	; 63
    2382:	0f 92       	push	r0
    2384:	11 24       	eor	r1, r1
    2386:	2f 93       	push	r18
    2388:	3f 93       	push	r19
    238a:	4f 93       	push	r20
    238c:	5f 93       	push	r21
    238e:	6f 93       	push	r22
    2390:	7f 93       	push	r23
    2392:	8f 93       	push	r24
    2394:	9f 93       	push	r25
    2396:	af 93       	push	r26
    2398:	bf 93       	push	r27
    239a:	ef 93       	push	r30
    239c:	ff 93       	push	r31
    239e:	86 b5       	in	r24, 0x26	; 38
    23a0:	83 5d       	subi	r24, 0xD3	; 211
    23a2:	87 bd       	out	0x27, r24	; 39
    23a4:	85 b3       	in	r24, 0x15	; 21
    23a6:	82 60       	ori	r24, 0x02	; 2
    23a8:	85 bb       	out	0x15, r24	; 21
    23aa:	ee e6       	ldi	r30, 0x6E	; 110
    23ac:	f0 e0       	ldi	r31, 0x00	; 0
    23ae:	80 81       	ld	r24, Z
    23b0:	82 60       	ori	r24, 0x02	; 2
    23b2:	80 83       	st	Z, r24
    23b4:	80 91 7a 09 	lds	r24, 0x097A	; 0x80097a <sg_bMCTxNextBit>
    23b8:	88 23       	and	r24, r24
    23ba:	21 f0       	breq	.+8      	; 0x23c4 <__vector_15+0x48>
    23bc:	85 b1       	in	r24, 0x05	; 5
    23be:	88 60       	ori	r24, 0x08	; 8
    23c0:	85 b9       	out	0x05, r24	; 5
    23c2:	03 c0       	rjmp	.+6      	; 0x23ca <__vector_15+0x4e>
    23c4:	85 b1       	in	r24, 0x05	; 5
    23c6:	87 7f       	andi	r24, 0xF7	; 247
    23c8:	85 b9       	out	0x05, r24	; 5
    23ca:	80 91 7f 09 	lds	r24, 0x097F	; 0x80097f <sg_u8txBitCount>
    23ce:	8f 5f       	subi	r24, 0xFF	; 255
    23d0:	80 93 7f 09 	sts	0x097F, r24	; 0x80097f <sg_u8txBitCount>
    23d4:	80 91 7f 09 	lds	r24, 0x097F	; 0x80097f <sg_u8txBitCount>
    23d8:	83 30       	cpi	r24, 0x03	; 3
    23da:	61 f4       	brne	.+24     	; 0x23f4 <__vector_15+0x78>
    23dc:	80 91 7b 09 	lds	r24, 0x097B	; 0x80097b <sg_bCellReportsReuested>
    23e0:	88 23       	and	r24, r24
    23e2:	41 f0       	breq	.+16     	; 0x23f4 <__vector_15+0x78>
    23e4:	8b e0       	ldi	r24, 0x0B	; 11
    23e6:	80 93 7f 09 	sts	0x097F, r24	; 0x80097f <sg_u8txBitCount>
    23ea:	10 92 7a 09 	sts	0x097A, r1	; 0x80097a <sg_bMCTxNextBit>
    23ee:	10 92 7d 09 	sts	0x097D, r1	; 0x80097d <sg_btxMoreAvailable>
    23f2:	4d c0       	rjmp	.+154    	; 0x248e <__vector_15+0x112>
    23f4:	80 91 7f 09 	lds	r24, 0x097F	; 0x80097f <sg_u8txBitCount>
    23f8:	8a 30       	cpi	r24, 0x0A	; 10
    23fa:	80 f4       	brcc	.+32     	; 0x241c <__vector_15+0xa0>
    23fc:	80 91 7e 09 	lds	r24, 0x097E	; 0x80097e <sg_u8txDataByte>
    2400:	88 23       	and	r24, r24
    2402:	24 f4       	brge	.+8      	; 0x240c <__vector_15+0x90>
    2404:	81 e0       	ldi	r24, 0x01	; 1
    2406:	80 93 7a 09 	sts	0x097A, r24	; 0x80097a <sg_bMCTxNextBit>
    240a:	02 c0       	rjmp	.+4      	; 0x2410 <__vector_15+0x94>
    240c:	10 92 7a 09 	sts	0x097A, r1	; 0x80097a <sg_bMCTxNextBit>
    2410:	80 91 7e 09 	lds	r24, 0x097E	; 0x80097e <sg_u8txDataByte>
    2414:	88 0f       	add	r24, r24
    2416:	80 93 7e 09 	sts	0x097E, r24	; 0x80097e <sg_u8txDataByte>
    241a:	39 c0       	rjmp	.+114    	; 0x248e <__vector_15+0x112>
    241c:	80 91 7f 09 	lds	r24, 0x097F	; 0x80097f <sg_u8txBitCount>
    2420:	8a 30       	cpi	r24, 0x0A	; 10
    2422:	29 f4       	brne	.+10     	; 0x242e <__vector_15+0xb2>
    2424:	80 91 7d 09 	lds	r24, 0x097D	; 0x80097d <sg_btxMoreAvailable>
    2428:	80 93 7a 09 	sts	0x097A, r24	; 0x80097a <sg_bMCTxNextBit>
    242c:	30 c0       	rjmp	.+96     	; 0x248e <__vector_15+0x112>
    242e:	80 91 7f 09 	lds	r24, 0x097F	; 0x80097f <sg_u8txBitCount>
    2432:	8b 30       	cpi	r24, 0x0B	; 11
    2434:	19 f4       	brne	.+6      	; 0x243c <__vector_15+0xc0>
    2436:	10 92 7a 09 	sts	0x097A, r1	; 0x80097a <sg_bMCTxNextBit>
    243a:	29 c0       	rjmp	.+82     	; 0x248e <__vector_15+0x112>
    243c:	80 91 7f 09 	lds	r24, 0x097F	; 0x80097f <sg_u8txBitCount>
    2440:	8c 30       	cpi	r24, 0x0C	; 12
    2442:	29 f5       	brne	.+74     	; 0x248e <__vector_15+0x112>
    2444:	80 91 7d 09 	lds	r24, 0x097D	; 0x80097d <sg_btxMoreAvailable>
    2448:	80 93 7a 09 	sts	0x097A, r24	; 0x80097a <sg_bMCTxNextBit>
    244c:	10 92 7f 09 	sts	0x097F, r1	; 0x80097f <sg_u8txBitCount>
    2450:	80 91 7d 09 	lds	r24, 0x097D	; 0x80097d <sg_btxMoreAvailable>
    2454:	81 11       	cpse	r24, r1
    2456:	08 c0       	rjmp	.+16     	; 0x2468 <__vector_15+0xec>
    2458:	10 92 7c 09 	sts	0x097C, r1	; 0x80097c <sg_etxState>
    245c:	ee e6       	ldi	r30, 0x6E	; 110
    245e:	f0 e0       	ldi	r31, 0x00	; 0
    2460:	80 81       	ld	r24, Z
    2462:	8d 7f       	andi	r24, 0xFD	; 253
    2464:	80 83       	st	Z, r24
    2466:	13 c0       	rjmp	.+38     	; 0x248e <__vector_15+0x112>
    2468:	0e 94 5d 25 	call	0x4aba	; 0x4aba <vUARTtxDataAvailable>
    246c:	80 93 7d 09 	sts	0x097D, r24	; 0x80097d <sg_btxMoreAvailable>
    2470:	0e 94 43 21 	call	0x4286	; 0x4286 <vUARTtxDataGet>
    2474:	80 93 7e 09 	sts	0x097E, r24	; 0x80097e <sg_u8txDataByte>
    2478:	86 b5       	in	r24, 0x26	; 38
    247a:	88 53       	subi	r24, 0x38	; 56
    247c:	87 bd       	out	0x27, r24	; 39
    247e:	85 b3       	in	r24, 0x15	; 21
    2480:	82 60       	ori	r24, 0x02	; 2
    2482:	85 bb       	out	0x15, r24	; 21
    2484:	ee e6       	ldi	r30, 0x6E	; 110
    2486:	f0 e0       	ldi	r31, 0x00	; 0
    2488:	80 81       	ld	r24, Z
    248a:	82 60       	ori	r24, 0x02	; 2
    248c:	80 83       	st	Z, r24
    248e:	ff 91       	pop	r31
    2490:	ef 91       	pop	r30
    2492:	bf 91       	pop	r27
    2494:	af 91       	pop	r26
    2496:	9f 91       	pop	r25
    2498:	8f 91       	pop	r24
    249a:	7f 91       	pop	r23
    249c:	6f 91       	pop	r22
    249e:	5f 91       	pop	r21
    24a0:	4f 91       	pop	r20
    24a2:	3f 91       	pop	r19
    24a4:	2f 91       	pop	r18
    24a6:	0f 90       	pop	r0
    24a8:	0f be       	out	0x3f, r0	; 63
    24aa:	0f 90       	pop	r0
    24ac:	1f 90       	pop	r1
    24ae:	18 95       	reti

Disassembly of section .text.vUARTInit:

000045ea <vUARTInit>:
    45ea:	85 b7       	in	r24, 0x35	; 53
    45ec:	8f 7e       	andi	r24, 0xEF	; 239
    45ee:	85 bf       	out	0x35, r24	; 53
    45f0:	84 b1       	in	r24, 0x04	; 4
    45f2:	88 60       	ori	r24, 0x08	; 8
    45f4:	84 b9       	out	0x04, r24	; 4
    45f6:	84 b1       	in	r24, 0x04	; 4
    45f8:	8b 7f       	andi	r24, 0xFB	; 251
    45fa:	84 b9       	out	0x04, r24	; 4
    45fc:	85 b1       	in	r24, 0x05	; 5
    45fe:	8b 7f       	andi	r24, 0xFB	; 251
    4600:	85 b9       	out	0x05, r24	; 5
    4602:	87 b1       	in	r24, 0x07	; 7
    4604:	80 68       	ori	r24, 0x80	; 128
    4606:	87 b9       	out	0x07, r24	; 7
    4608:	8d b3       	in	r24, 0x1d	; 29
    460a:	8d 7f       	andi	r24, 0xFD	; 253
    460c:	8d bb       	out	0x1d, r24	; 29
    460e:	10 92 7c 09 	sts	0x097C, r1	; 0x80097c <sg_etxState>
    4612:	85 b1       	in	r24, 0x05	; 5
    4614:	87 7f       	andi	r24, 0xF7	; 247
    4616:	85 b9       	out	0x05, r24	; 5
    4618:	08 95       	ret

Disassembly of section .text.vUARTInitReceive:

00004c5c <vUARTInitReceive>:
    4c5c:	8c e0       	ldi	r24, 0x0C	; 12
    4c5e:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f0069>
    4c62:	8c b3       	in	r24, 0x1c	; 28
    4c64:	82 60       	ori	r24, 0x02	; 2
    4c66:	8c bb       	out	0x1c, r24	; 28
    4c68:	8d b3       	in	r24, 0x1d	; 29
    4c6a:	82 60       	ori	r24, 0x02	; 2
    4c6c:	8d bb       	out	0x1d, r24	; 29
    4c6e:	08 95       	ret

Disassembly of section .text.libgcc.div:

00004772 <__udivmodhi4>:
    4772:	aa 1b       	sub	r26, r26
    4774:	bb 1b       	sub	r27, r27
    4776:	51 e1       	ldi	r21, 0x11	; 17
    4778:	07 c0       	rjmp	.+14     	; 0x4788 <__udivmodhi4_ep>

0000477a <__udivmodhi4_loop>:
    477a:	aa 1f       	adc	r26, r26
    477c:	bb 1f       	adc	r27, r27
    477e:	a6 17       	cp	r26, r22
    4780:	b7 07       	cpc	r27, r23
    4782:	10 f0       	brcs	.+4      	; 0x4788 <__udivmodhi4_ep>
    4784:	a6 1b       	sub	r26, r22
    4786:	b7 0b       	sbc	r27, r23

00004788 <__udivmodhi4_ep>:
    4788:	88 1f       	adc	r24, r24
    478a:	99 1f       	adc	r25, r25
    478c:	5a 95       	dec	r21
    478e:	a9 f7       	brne	.-22     	; 0x477a <__udivmodhi4_loop>
    4790:	80 95       	com	r24
    4792:	90 95       	com	r25
    4794:	bc 01       	movw	r22, r24
    4796:	cd 01       	movw	r24, r26
    4798:	08 95       	ret

Disassembly of section .text.libgcc.div:

00004316 <__udivmodsi4>:
    4316:	a1 e2       	ldi	r26, 0x21	; 33
    4318:	1a 2e       	mov	r1, r26
    431a:	aa 1b       	sub	r26, r26
    431c:	bb 1b       	sub	r27, r27
    431e:	fd 01       	movw	r30, r26
    4320:	0d c0       	rjmp	.+26     	; 0x433c <__udivmodsi4_ep>

00004322 <__udivmodsi4_loop>:
    4322:	aa 1f       	adc	r26, r26
    4324:	bb 1f       	adc	r27, r27
    4326:	ee 1f       	adc	r30, r30
    4328:	ff 1f       	adc	r31, r31
    432a:	a2 17       	cp	r26, r18
    432c:	b3 07       	cpc	r27, r19
    432e:	e4 07       	cpc	r30, r20
    4330:	f5 07       	cpc	r31, r21
    4332:	20 f0       	brcs	.+8      	; 0x433c <__udivmodsi4_ep>
    4334:	a2 1b       	sub	r26, r18
    4336:	b3 0b       	sbc	r27, r19
    4338:	e4 0b       	sbc	r30, r20
    433a:	f5 0b       	sbc	r31, r21

0000433c <__udivmodsi4_ep>:
    433c:	66 1f       	adc	r22, r22
    433e:	77 1f       	adc	r23, r23
    4340:	88 1f       	adc	r24, r24
    4342:	99 1f       	adc	r25, r25
    4344:	1a 94       	dec	r1
    4346:	69 f7       	brne	.-38     	; 0x4322 <__udivmodsi4_loop>
    4348:	60 95       	com	r22
    434a:	70 95       	com	r23
    434c:	80 95       	com	r24
    434e:	90 95       	com	r25
    4350:	9b 01       	movw	r18, r22
    4352:	ac 01       	movw	r20, r24
    4354:	bd 01       	movw	r22, r26
    4356:	cf 01       	movw	r24, r30
    4358:	08 95       	ret

Disassembly of section .text.libgcc.div:

0000461a <__divmodsi4>:
    461a:	05 2e       	mov	r0, r21
    461c:	97 fb       	bst	r25, 7
    461e:	1e f4       	brtc	.+6      	; 0x4626 <__divmodsi4+0xc>
    4620:	00 94       	com	r0
    4622:	0e 94 6d 26 	call	0x4cda	; 0x4cda <__negsi2>
    4626:	57 fd       	sbrc	r21, 7
    4628:	07 d0       	rcall	.+14     	; 0x4638 <__divmodsi4_neg2>
    462a:	0e 94 8b 21 	call	0x4316	; 0x4316 <__udivmodsi4>
    462e:	07 fc       	sbrc	r0, 7
    4630:	03 d0       	rcall	.+6      	; 0x4638 <__divmodsi4_neg2>
    4632:	4e f4       	brtc	.+18     	; 0x4646 <__divmodsi4_exit>
    4634:	0c 94 6d 26 	jmp	0x4cda	; 0x4cda <__negsi2>

00004638 <__divmodsi4_neg2>:
    4638:	50 95       	com	r21
    463a:	40 95       	com	r20
    463c:	30 95       	com	r19
    463e:	21 95       	neg	r18
    4640:	3f 4f       	sbci	r19, 0xFF	; 255
    4642:	4f 4f       	sbci	r20, 0xFF	; 255
    4644:	5f 4f       	sbci	r21, 0xFF	; 255

00004646 <__divmodsi4_exit>:
    4646:	08 95       	ret

Disassembly of section .text.libgcc.div:

00004cda <__negsi2>:
    4cda:	90 95       	com	r25
    4cdc:	80 95       	com	r24
    4cde:	70 95       	com	r23
    4ce0:	61 95       	neg	r22
    4ce2:	7f 4f       	sbci	r23, 0xFF	; 255
    4ce4:	8f 4f       	sbci	r24, 0xFF	; 255
    4ce6:	9f 4f       	sbci	r25, 0xFF	; 255
    4ce8:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00004b20 <__umulhisi3>:
    4b20:	a2 9f       	mul	r26, r18
    4b22:	b0 01       	movw	r22, r0
    4b24:	b3 9f       	mul	r27, r19
    4b26:	c0 01       	movw	r24, r0
    4b28:	a3 9f       	mul	r26, r19
    4b2a:	70 0d       	add	r23, r0
    4b2c:	81 1d       	adc	r24, r1
    4b2e:	11 24       	eor	r1, r1
    4b30:	91 1d       	adc	r25, r1
    4b32:	b2 9f       	mul	r27, r18
    4b34:	70 0d       	add	r23, r0
    4b36:	81 1d       	adc	r24, r1
    4b38:	11 24       	eor	r1, r1
    4b3a:	91 1d       	adc	r25, r1
    4b3c:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00004d34 <__usmulhisi3>:
    4d34:	0e 94 90 25 	call	0x4b20	; 0x4b20 <__umulhisi3>

00004d38 <__usmulhisi3_tail>:
    4d38:	b7 ff       	sbrs	r27, 7
    4d3a:	08 95       	ret
    4d3c:	82 1b       	sub	r24, r18
    4d3e:	93 0b       	sbc	r25, r19
    4d40:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00004c1c <__muluhisi3>:
    4c1c:	0e 94 90 25 	call	0x4b20	; 0x4b20 <__umulhisi3>
    4c20:	a5 9f       	mul	r26, r21
    4c22:	90 0d       	add	r25, r0
    4c24:	b4 9f       	mul	r27, r20
    4c26:	90 0d       	add	r25, r0
    4c28:	a4 9f       	mul	r26, r20
    4c2a:	80 0d       	add	r24, r0
    4c2c:	91 1d       	adc	r25, r1
    4c2e:	11 24       	eor	r1, r1
    4c30:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00004cea <__mulshisi3>:
    4cea:	b7 ff       	sbrs	r27, 7
    4cec:	0c 94 0e 26 	jmp	0x4c1c	; 0x4c1c <__muluhisi3>

00004cf0 <__mulohisi3>:
    4cf0:	0e 94 0e 26 	call	0x4c1c	; 0x4c1c <__muluhisi3>
    4cf4:	82 1b       	sub	r24, r18
    4cf6:	93 0b       	sbc	r25, r19
    4cf8:	08 95       	ret

Disassembly of section .text.libgcc:

00004cfa <__xload_2>:
    4cfa:	57 fd       	sbrc	r21, 7
    4cfc:	03 c0       	rjmp	.+6      	; 0x4d04 <__xload_2+0xa>
    4cfe:	65 91       	lpm	r22, Z+
    4d00:	75 91       	lpm	r23, Z+
    4d02:	08 95       	ret
    4d04:	61 91       	ld	r22, Z+
    4d06:	71 91       	ld	r23, Z+
    4d08:	08 95       	ret

Disassembly of section .text.libgcc:

00004baa <__xload_4>:
    4baa:	57 fd       	sbrc	r21, 7
    4bac:	05 c0       	rjmp	.+10     	; 0x4bb8 <__xload_4+0xe>
    4bae:	65 91       	lpm	r22, Z+
    4bb0:	75 91       	lpm	r23, Z+
    4bb2:	85 91       	lpm	r24, Z+
    4bb4:	95 91       	lpm	r25, Z+
    4bb6:	08 95       	ret
    4bb8:	61 91       	ld	r22, Z+
    4bba:	71 91       	ld	r23, Z+
    4bbc:	81 91       	ld	r24, Z+
    4bbe:	91 91       	ld	r25, Z+
    4bc0:	08 95       	ret

Disassembly of section .text.libgcc:

00004bc2 <__adddi3_s8>:
    4bc2:	00 24       	eor	r0, r0
    4bc4:	a7 fd       	sbrc	r26, 7
    4bc6:	00 94       	com	r0
    4bc8:	2a 0f       	add	r18, r26
    4bca:	30 1d       	adc	r19, r0
    4bcc:	40 1d       	adc	r20, r0
    4bce:	50 1d       	adc	r21, r0
    4bd0:	60 1d       	adc	r22, r0
    4bd2:	70 1d       	adc	r23, r0
    4bd4:	80 1d       	adc	r24, r0
    4bd6:	90 1d       	adc	r25, r0
    4bd8:	08 95       	ret

Disassembly of section .text.__dummy_fini:

00004d92 <_fini>:
    4d92:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00004d94 <__funcs_on_exit>:
    4d94:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00004d96 <__simulator_exit>:
    4d96:	08 95       	ret

Disassembly of section .text.exit:

00004c32 <exit>:
    4c32:	ec 01       	movw	r28, r24
    4c34:	0e 94 ca 26 	call	0x4d94	; 0x4d94 <__funcs_on_exit>
    4c38:	0e 94 c9 26 	call	0x4d92	; 0x4d92 <_fini>
    4c3c:	ce 01       	movw	r24, r28
    4c3e:	0e 94 cb 26 	call	0x4d96	; 0x4d96 <__simulator_exit>
    4c42:	ce 01       	movw	r24, r28
    4c44:	0e 94 c6 26 	call	0x4d8c	; 0x4d8c <_Exit>

Disassembly of section .text.memcpy:

000045b8 <memcpy>:
    45b8:	cf 92       	push	r12
    45ba:	df 92       	push	r13
    45bc:	ef 92       	push	r14
    45be:	6a 01       	movw	r12, r20
    45c0:	e6 2e       	mov	r14, r22
    45c2:	dc 01       	movw	r26, r24
    45c4:	28 0f       	add	r18, r24
    45c6:	39 1f       	adc	r19, r25
    45c8:	a2 17       	cp	r26, r18
    45ca:	b3 07       	cpc	r27, r19
    45cc:	51 f0       	breq	.+20     	; 0x45e2 <memcpy+0x2a>
    45ce:	f6 01       	movw	r30, r12
    45d0:	44 91       	lpm	r20, Z
    45d2:	e7 fc       	sbrc	r14, 7
    45d4:	40 81       	ld	r20, Z
    45d6:	4d 93       	st	X+, r20
    45d8:	4f ef       	ldi	r20, 0xFF	; 255
    45da:	c4 1a       	sub	r12, r20
    45dc:	d4 0a       	sbc	r13, r20
    45de:	e4 0a       	sbc	r14, r20
    45e0:	f3 cf       	rjmp	.-26     	; 0x45c8 <memcpy+0x10>
    45e2:	ef 90       	pop	r14
    45e4:	df 90       	pop	r13
    45e6:	cf 90       	pop	r12
    45e8:	08 95       	ret

Disassembly of section .text.memset:

00004c82 <memset>:
    4c82:	fc 01       	movw	r30, r24
    4c84:	48 0f       	add	r20, r24
    4c86:	59 1f       	adc	r21, r25
    4c88:	e4 17       	cp	r30, r20
    4c8a:	f5 07       	cpc	r31, r21
    4c8c:	11 f0       	breq	.+4      	; 0x4c92 <memset+0x10>
    4c8e:	61 93       	st	Z+, r22
    4c90:	fb cf       	rjmp	.-10     	; 0x4c88 <memset+0x6>
    4c92:	08 95       	ret

Disassembly of section .text.gmtime:

00004d78 <gmtime>:
    4d78:	44 e0       	ldi	r20, 0x04	; 4
    4d7a:	59 e0       	ldi	r21, 0x09	; 9
    4d7c:	0e 94 11 1e 	call	0x3c22	; 0x3c22 <__gmtime_r>
    4d80:	08 95       	ret

Disassembly of section .text.__gmtime_r:

00003c22 <__gmtime_r>:
    3c22:	a0 e0       	ldi	r26, 0x00	; 0
    3c24:	b0 e0       	ldi	r27, 0x00	; 0
    3c26:	e7 e1       	ldi	r30, 0x17	; 23
    3c28:	fe e1       	ldi	r31, 0x1E	; 30
    3c2a:	0c 94 2b 22 	jmp	0x4456	; 0x4456 <__prologue_saves__+0xc>
    3c2e:	ea 01       	movw	r28, r20
    3c30:	fb 01       	movw	r30, r22
    3c32:	58 2f       	mov	r21, r24
    3c34:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__xload_4>
    3c38:	4b 01       	movw	r8, r22
    3c3a:	5c 01       	movw	r10, r24
    3c3c:	c1 2c       	mov	r12, r1
    3c3e:	d1 2c       	mov	r13, r1
    3c40:	76 01       	movw	r14, r12
    3c42:	8e 01       	movw	r16, r28
    3c44:	9b 01       	movw	r18, r22
    3c46:	a5 01       	movw	r20, r10
    3c48:	60 e0       	ldi	r22, 0x00	; 0
    3c4a:	70 e0       	ldi	r23, 0x00	; 0
    3c4c:	80 e0       	ldi	r24, 0x00	; 0
    3c4e:	90 e0       	ldi	r25, 0x00	; 0
    3c50:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <__secs_to_tm>
    3c54:	97 ff       	sbrs	r25, 7
    3c56:	09 c0       	rjmp	.+18     	; 0x3c6a <__gmtime_r+0x48>
    3c58:	8f e4       	ldi	r24, 0x4F	; 79
    3c5a:	90 e0       	ldi	r25, 0x00	; 0
    3c5c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    3c60:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    3c64:	80 e0       	ldi	r24, 0x00	; 0
    3c66:	90 e0       	ldi	r25, 0x00	; 0
    3c68:	0d c0       	rjmp	.+26     	; 0x3c84 <__gmtime_r+0x62>
    3c6a:	19 8a       	std	Y+17, r1	; 0x11
    3c6c:	18 8a       	std	Y+16, r1	; 0x10
    3c6e:	1a 8a       	std	Y+18, r1	; 0x12
    3c70:	1b 8a       	std	Y+19, r1	; 0x13
    3c72:	1c 8a       	std	Y+20, r1	; 0x14
    3c74:	1d 8a       	std	Y+21, r1	; 0x15
    3c76:	8f ea       	ldi	r24, 0xAF	; 175
    3c78:	93 e0       	ldi	r25, 0x03	; 3
    3c7a:	a0 e0       	ldi	r26, 0x00	; 0
    3c7c:	8e 8b       	std	Y+22, r24	; 0x16
    3c7e:	9f 8b       	std	Y+23, r25	; 0x17
    3c80:	a8 8f       	std	Y+24, r26	; 0x18
    3c82:	ce 01       	movw	r24, r28
    3c84:	cd b7       	in	r28, 0x3d	; 61
    3c86:	de b7       	in	r29, 0x3e	; 62
    3c88:	ec e0       	ldi	r30, 0x0C	; 12
    3c8a:	0c 94 47 22 	jmp	0x448e	; 0x448e <__epilogue_restores__+0xc>

Disassembly of section .text.mktime:

000037b8 <mktime>:
    37b8:	a9 e1       	ldi	r26, 0x19	; 25
    37ba:	b0 e0       	ldi	r27, 0x00	; 0
    37bc:	e2 ee       	ldi	r30, 0xE2	; 226
    37be:	fb e1       	ldi	r31, 0x1B	; 27
    37c0:	0c 94 27 22 	jmp	0x444e	; 0x444e <__prologue_saves__+0x4>
    37c4:	2c 01       	movw	r4, r24
    37c6:	bc 01       	movw	r22, r24
    37c8:	80 e8       	ldi	r24, 0x80	; 128
    37ca:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <__tm_to_secs>
    37ce:	39 01       	movw	r6, r18
    37d0:	4a 01       	movw	r8, r20
    37d2:	59 01       	movw	r10, r18
    37d4:	6a 01       	movw	r12, r20
    37d6:	e1 2c       	mov	r14, r1
    37d8:	f1 2c       	mov	r15, r1
    37da:	00 e0       	ldi	r16, 0x00	; 0
    37dc:	10 e0       	ldi	r17, 0x00	; 0
    37de:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <__cmpdi2>
    37e2:	f9 f4       	brne	.+62     	; 0x3822 <mktime+0x6a>
    37e4:	1a 8a       	std	Y+18, r1	; 0x12
    37e6:	19 8a       	std	Y+17, r1	; 0x11
    37e8:	1b 8a       	std	Y+19, r1	; 0x13
    37ea:	1c 8a       	std	Y+20, r1	; 0x14
    37ec:	1d 8a       	std	Y+21, r1	; 0x15
    37ee:	1e 8a       	std	Y+22, r1	; 0x16
    37f0:	23 eb       	ldi	r18, 0xB3	; 179
    37f2:	33 e0       	ldi	r19, 0x03	; 3
    37f4:	40 e0       	ldi	r20, 0x00	; 0
    37f6:	2f 8b       	std	Y+23, r18	; 0x17
    37f8:	38 8f       	std	Y+24, r19	; 0x18
    37fa:	49 8f       	std	Y+25, r20	; 0x19
    37fc:	8e 01       	movw	r16, r28
    37fe:	0f 5f       	subi	r16, 0xFF	; 255
    3800:	1f 4f       	sbci	r17, 0xFF	; 255
    3802:	93 01       	movw	r18, r6
    3804:	48 2d       	mov	r20, r8
    3806:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <__secs_to_tm>
    380a:	97 fd       	sbrc	r25, 7
    380c:	0a c0       	rjmp	.+20     	; 0x3822 <mktime+0x6a>
    380e:	89 e1       	ldi	r24, 0x19	; 25
    3810:	f8 01       	movw	r30, r16
    3812:	d2 01       	movw	r26, r4
    3814:	01 90       	ld	r0, Z+
    3816:	0d 92       	st	X+, r0
    3818:	8a 95       	dec	r24
    381a:	e1 f7       	brne	.-8      	; 0x3814 <mktime+0x5c>
    381c:	b3 01       	movw	r22, r6
    381e:	c4 01       	movw	r24, r8
    3820:	0a c0       	rjmp	.+20     	; 0x3836 <mktime+0x7e>
    3822:	8f e4       	ldi	r24, 0x4F	; 79
    3824:	90 e0       	ldi	r25, 0x00	; 0
    3826:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    382a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    382e:	6f ef       	ldi	r22, 0xFF	; 255
    3830:	7f ef       	ldi	r23, 0xFF	; 255
    3832:	8f ef       	ldi	r24, 0xFF	; 255
    3834:	9f ef       	ldi	r25, 0xFF	; 255
    3836:	69 96       	adiw	r28, 0x19	; 25
    3838:	e0 e1       	ldi	r30, 0x10	; 16
    383a:	0c 94 43 22 	jmp	0x4486	; 0x4486 <__epilogue_restores__+0x4>

Disassembly of section .text._Exit:

00004d8c <_Exit>:
    4d8c:	0e 94 6b 00 	call	0xd6	; 0xd6 <_exit>

Disassembly of section .text.__tm_to_secs:

00001c12 <__tm_to_secs>:
    1c12:	a5 e0       	ldi	r26, 0x05	; 5
    1c14:	b0 e0       	ldi	r27, 0x00	; 0
    1c16:	ef e0       	ldi	r30, 0x0F	; 15
    1c18:	fe e0       	ldi	r31, 0x0E	; 14
    1c1a:	0c 94 25 22 	jmp	0x444a	; 0x444a <__prologue_saves__>
    1c1e:	3b 01       	movw	r6, r22
    1c20:	88 2e       	mov	r8, r24
    1c22:	a8 2f       	mov	r26, r24
    1c24:	cb 01       	movw	r24, r22
    1c26:	0a 96       	adiw	r24, 0x0a	; 10
    1c28:	a1 1d       	adc	r26, r1
    1c2a:	fc 01       	movw	r30, r24
    1c2c:	5a 2f       	mov	r21, r26
    1c2e:	0e 94 7d 26 	call	0x4cfa	; 0x4cfa <__xload_2>
    1c32:	5b 01       	movw	r10, r22
    1c34:	9b 01       	movw	r18, r22
    1c36:	9b 2c       	mov	r9, r11
    1c38:	99 0c       	add	r9, r9
    1c3a:	99 08       	sbc	r9, r9
    1c3c:	f9 2c       	mov	r15, r9
    1c3e:	b9 2d       	mov	r27, r9
    1c40:	a9 2d       	mov	r26, r9
    1c42:	89 2d       	mov	r24, r9
    1c44:	99 2d       	mov	r25, r9
    1c46:	e8 2c       	mov	r14, r8
    1c48:	63 01       	movw	r12, r6
    1c4a:	48 e0       	ldi	r20, 0x08	; 8
    1c4c:	c4 0e       	add	r12, r20
    1c4e:	d1 1c       	adc	r13, r1
    1c50:	e1 1c       	adc	r14, r1
    1c52:	f6 01       	movw	r30, r12
    1c54:	5e 2d       	mov	r21, r14
    1c56:	0e 94 7d 26 	call	0x4cfa	; 0x4cfa <__xload_2>
    1c5a:	2b 01       	movw	r4, r22
    1c5c:	6c 30       	cpi	r22, 0x0C	; 12
    1c5e:	71 05       	cpc	r23, r1
    1c60:	10 f1       	brcs	.+68     	; 0x1ca6 <__tm_to_secs+0x94>
    1c62:	cb 01       	movw	r24, r22
    1c64:	6c e0       	ldi	r22, 0x0C	; 12
    1c66:	70 e0       	ldi	r23, 0x00	; 0
    1c68:	0e 94 cd 23 	call	0x479a	; 0x479a <__divmodhi4>
    1c6c:	2c 01       	movw	r4, r24
    1c6e:	97 ff       	sbrs	r25, 7
    1c70:	05 c0       	rjmp	.+10     	; 0x1c7c <__tm_to_secs+0x6a>
    1c72:	61 50       	subi	r22, 0x01	; 1
    1c74:	71 09       	sbc	r23, r1
    1c76:	8c e0       	ldi	r24, 0x0C	; 12
    1c78:	48 0e       	add	r4, r24
    1c7a:	51 1c       	adc	r5, r1
    1c7c:	97 2f       	mov	r25, r23
    1c7e:	99 0f       	add	r25, r25
    1c80:	99 0b       	sbc	r25, r25
    1c82:	9b 01       	movw	r18, r22
    1c84:	49 2f       	mov	r20, r25
    1c86:	59 2f       	mov	r21, r25
    1c88:	69 2f       	mov	r22, r25
    1c8a:	79 2f       	mov	r23, r25
    1c8c:	89 2f       	mov	r24, r25
    1c8e:	c9 2c       	mov	r12, r9
    1c90:	d9 2c       	mov	r13, r9
    1c92:	e9 2c       	mov	r14, r9
    1c94:	f9 2c       	mov	r15, r9
    1c96:	09 2d       	mov	r16, r9
    1c98:	19 2d       	mov	r17, r9
    1c9a:	0e 94 53 26 	call	0x4ca6	; 0x4ca6 <__adddi3>
    1c9e:	94 2e       	mov	r9, r20
    1ca0:	f5 2e       	mov	r15, r21
    1ca2:	b6 2f       	mov	r27, r22
    1ca4:	a7 2f       	mov	r26, r23
    1ca6:	8e 01       	movw	r16, r28
    1ca8:	0f 5f       	subi	r16, 0xFF	; 255
    1caa:	1f 4f       	sbci	r17, 0xFF	; 255
    1cac:	49 2d       	mov	r20, r9
    1cae:	5f 2d       	mov	r21, r15
    1cb0:	6b 2f       	mov	r22, r27
    1cb2:	7a 2f       	mov	r23, r26
    1cb4:	0e 94 b5 09 	call	0x136a	; 0x136a <__year_to_secs>
    1cb8:	59 01       	movw	r10, r18
    1cba:	6a 01       	movw	r12, r20
    1cbc:	7b 01       	movw	r14, r22
    1cbe:	8c 01       	movw	r16, r24
    1cc0:	69 81       	ldd	r22, Y+1	; 0x01
    1cc2:	7a 81       	ldd	r23, Y+2	; 0x02
    1cc4:	c2 01       	movw	r24, r4
    1cc6:	0e 94 ea 21 	call	0x43d4	; 0x43d4 <__month_to_secs>
    1cca:	1b 01       	movw	r2, r22
    1ccc:	2c 01       	movw	r4, r24
    1cce:	55 0c       	add	r5, r5
    1cd0:	22 08       	sbc	r2, r2
    1cd2:	32 2c       	mov	r3, r2
    1cd4:	21 01       	movw	r4, r2
    1cd6:	9b 01       	movw	r18, r22
    1cd8:	ac 01       	movw	r20, r24
    1cda:	62 2d       	mov	r22, r2
    1cdc:	72 2d       	mov	r23, r2
    1cde:	82 2d       	mov	r24, r2
    1ce0:	92 2d       	mov	r25, r2
    1ce2:	0e 94 53 26 	call	0x4ca6	; 0x4ca6 <__adddi3>
    1ce6:	19 01       	movw	r2, r18
    1ce8:	2a 01       	movw	r4, r20
    1cea:	96 2e       	mov	r9, r22
    1cec:	7b 83       	std	Y+3, r23	; 0x03
    1cee:	8c 83       	std	Y+4, r24	; 0x04
    1cf0:	9d 83       	std	Y+5, r25	; 0x05
    1cf2:	a8 2d       	mov	r26, r8
    1cf4:	c3 01       	movw	r24, r6
    1cf6:	06 96       	adiw	r24, 0x06	; 6
    1cf8:	a1 1d       	adc	r26, r1
    1cfa:	fc 01       	movw	r30, r24
    1cfc:	5a 2f       	mov	r21, r26
    1cfe:	0e 94 7d 26 	call	0x4cfa	; 0x4cfa <__xload_2>
    1d02:	61 50       	subi	r22, 0x01	; 1
    1d04:	71 09       	sbc	r23, r1
    1d06:	97 2f       	mov	r25, r23
    1d08:	99 0f       	add	r25, r25
    1d0a:	99 0b       	sbc	r25, r25
    1d0c:	30 e8       	ldi	r19, 0x80	; 128
    1d0e:	a3 2e       	mov	r10, r19
    1d10:	41 e5       	ldi	r20, 0x51	; 81
    1d12:	b4 2e       	mov	r11, r20
    1d14:	cc 24       	eor	r12, r12
    1d16:	c3 94       	inc	r12
    1d18:	d1 2c       	mov	r13, r1
    1d1a:	e1 2c       	mov	r14, r1
    1d1c:	f1 2c       	mov	r15, r1
    1d1e:	00 e0       	ldi	r16, 0x00	; 0
    1d20:	10 e0       	ldi	r17, 0x00	; 0
    1d22:	9b 01       	movw	r18, r22
    1d24:	49 2f       	mov	r20, r25
    1d26:	59 2f       	mov	r21, r25
    1d28:	69 2f       	mov	r22, r25
    1d2a:	79 2f       	mov	r23, r25
    1d2c:	89 2f       	mov	r24, r25
    1d2e:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <__muldi3>
    1d32:	51 01       	movw	r10, r2
    1d34:	62 01       	movw	r12, r4
    1d36:	e9 2c       	mov	r14, r9
    1d38:	fb 80       	ldd	r15, Y+3	; 0x03
    1d3a:	0c 81       	ldd	r16, Y+4	; 0x04
    1d3c:	1d 81       	ldd	r17, Y+5	; 0x05
    1d3e:	0e 94 53 26 	call	0x4ca6	; 0x4ca6 <__adddi3>
    1d42:	59 01       	movw	r10, r18
    1d44:	6a 01       	movw	r12, r20
    1d46:	7b 01       	movw	r14, r22
    1d48:	8c 01       	movw	r16, r24
    1d4a:	a8 2d       	mov	r26, r8
    1d4c:	c3 01       	movw	r24, r6
    1d4e:	04 96       	adiw	r24, 0x04	; 4
    1d50:	a1 1d       	adc	r26, r1
    1d52:	fc 01       	movw	r30, r24
    1d54:	5a 2f       	mov	r21, r26
    1d56:	0e 94 7d 26 	call	0x4cfa	; 0x4cfa <__xload_2>
    1d5a:	07 2e       	mov	r0, r23
    1d5c:	00 0c       	add	r0, r0
    1d5e:	88 0b       	sbc	r24, r24
    1d60:	99 0b       	sbc	r25, r25
    1d62:	20 e1       	ldi	r18, 0x10	; 16
    1d64:	3e e0       	ldi	r19, 0x0E	; 14
    1d66:	40 e0       	ldi	r20, 0x00	; 0
    1d68:	50 e0       	ldi	r21, 0x00	; 0
    1d6a:	0e 94 9f 25 	call	0x4b3e	; 0x4b3e <__mulsidi3>
    1d6e:	0e 94 53 26 	call	0x4ca6	; 0x4ca6 <__adddi3>
    1d72:	59 01       	movw	r10, r18
    1d74:	6a 01       	movw	r12, r20
    1d76:	7b 01       	movw	r14, r22
    1d78:	8c 01       	movw	r16, r24
    1d7a:	a8 2d       	mov	r26, r8
    1d7c:	c3 01       	movw	r24, r6
    1d7e:	02 96       	adiw	r24, 0x02	; 2
    1d80:	a1 1d       	adc	r26, r1
    1d82:	fc 01       	movw	r30, r24
    1d84:	5a 2f       	mov	r21, r26
    1d86:	0e 94 7d 26 	call	0x4cfa	; 0x4cfa <__xload_2>
    1d8a:	07 2e       	mov	r0, r23
    1d8c:	00 0c       	add	r0, r0
    1d8e:	88 0b       	sbc	r24, r24
    1d90:	99 0b       	sbc	r25, r25
    1d92:	2c e3       	ldi	r18, 0x3C	; 60
    1d94:	30 e0       	ldi	r19, 0x00	; 0
    1d96:	40 e0       	ldi	r20, 0x00	; 0
    1d98:	50 e0       	ldi	r21, 0x00	; 0
    1d9a:	0e 94 9f 25 	call	0x4b3e	; 0x4b3e <__mulsidi3>
    1d9e:	0e 94 53 26 	call	0x4ca6	; 0x4ca6 <__adddi3>
    1da2:	59 01       	movw	r10, r18
    1da4:	6a 01       	movw	r12, r20
    1da6:	7b 01       	movw	r14, r22
    1da8:	8c 01       	movw	r16, r24
    1daa:	f3 01       	movw	r30, r6
    1dac:	58 2d       	mov	r21, r8
    1dae:	0e 94 7d 26 	call	0x4cfa	; 0x4cfa <__xload_2>
    1db2:	9b 01       	movw	r18, r22
    1db4:	93 2f       	mov	r25, r19
    1db6:	99 0f       	add	r25, r25
    1db8:	99 0b       	sbc	r25, r25
    1dba:	49 2f       	mov	r20, r25
    1dbc:	59 2f       	mov	r21, r25
    1dbe:	69 2f       	mov	r22, r25
    1dc0:	79 2f       	mov	r23, r25
    1dc2:	89 2f       	mov	r24, r25
    1dc4:	0e 94 53 26 	call	0x4ca6	; 0x4ca6 <__adddi3>
    1dc8:	25 96       	adiw	r28, 0x05	; 5
    1dca:	e2 e1       	ldi	r30, 0x12	; 18
    1dcc:	0c 94 41 22 	jmp	0x4482	; 0x4482 <__epilogue_restores__>

Disassembly of section .text.__year_to_secs:

0000136a <__year_to_secs>:
    136a:	ac e0       	ldi	r26, 0x0C	; 12
    136c:	b0 e0       	ldi	r27, 0x00	; 0
    136e:	eb eb       	ldi	r30, 0xBB	; 187
    1370:	f9 e0       	ldi	r31, 0x09	; 9
    1372:	0c 94 25 22 	jmp	0x444a	; 0x444a <__prologue_saves__>
    1376:	49 01       	movw	r8, r18
    1378:	5a 01       	movw	r10, r20
    137a:	6b 01       	movw	r12, r22
    137c:	7c 01       	movw	r14, r24
    137e:	1c 83       	std	Y+4, r17	; 0x04
    1380:	0b 83       	std	Y+3, r16	; 0x03
    1382:	2a 38       	cpi	r18, 0x8A	; 138
    1384:	31 05       	cpc	r19, r1
    1386:	41 05       	cpc	r20, r1
    1388:	51 05       	cpc	r21, r1
    138a:	61 05       	cpc	r22, r1
    138c:	71 05       	cpc	r23, r1
    138e:	81 05       	cpc	r24, r1
    1390:	91 05       	cpc	r25, r1
    1392:	11 f0       	breq	.+4      	; 0x1398 <__year_to_secs+0x2e>
    1394:	0c f0       	brlt	.+2      	; 0x1398 <__year_to_secs+0x2e>
    1396:	42 c0       	rjmp	.+132    	; 0x141c <__year_to_secs+0xb2>
    1398:	f9 01       	movw	r30, r18
    139a:	e4 54       	subi	r30, 0x44	; 68
    139c:	f1 09       	sbc	r31, r1
    139e:	f5 95       	asr	r31
    13a0:	e7 95       	ror	r30
    13a2:	f5 95       	asr	r31
    13a4:	e7 95       	ror	r30
    13a6:	c9 01       	movw	r24, r18
    13a8:	83 70       	andi	r24, 0x03	; 3
    13aa:	99 27       	eor	r25, r25
    13ac:	89 2b       	or	r24, r25
    13ae:	51 f4       	brne	.+20     	; 0x13c4 <__year_to_secs+0x5a>
    13b0:	31 97       	sbiw	r30, 0x01	; 1
    13b2:	01 15       	cp	r16, r1
    13b4:	11 05       	cpc	r17, r1
    13b6:	69 f0       	breq	.+26     	; 0x13d2 <__year_to_secs+0x68>
    13b8:	81 e0       	ldi	r24, 0x01	; 1
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	d8 01       	movw	r26, r16
    13be:	8d 93       	st	X+, r24
    13c0:	9c 93       	st	X, r25
    13c2:	07 c0       	rjmp	.+14     	; 0x13d2 <__year_to_secs+0x68>
    13c4:	8b 81       	ldd	r24, Y+3	; 0x03
    13c6:	9c 81       	ldd	r25, Y+4	; 0x04
    13c8:	00 97       	sbiw	r24, 0x00	; 0
    13ca:	19 f0       	breq	.+6      	; 0x13d2 <__year_to_secs+0x68>
    13cc:	dc 01       	movw	r26, r24
    13ce:	1d 92       	st	X+, r1
    13d0:	1c 92       	st	X, r1
    13d2:	d9 01       	movw	r26, r18
    13d4:	a6 54       	subi	r26, 0x46	; 70
    13d6:	b1 09       	sbc	r27, r1
    13d8:	20 e8       	ldi	r18, 0x80	; 128
    13da:	33 e3       	ldi	r19, 0x33	; 51
    13dc:	41 ee       	ldi	r20, 0xE1	; 225
    13de:	51 e0       	ldi	r21, 0x01	; 1
    13e0:	0e 94 75 26 	call	0x4cea	; 0x4cea <__mulshisi3>
    13e4:	6b 01       	movw	r12, r22
    13e6:	7c 01       	movw	r14, r24
    13e8:	df 01       	movw	r26, r30
    13ea:	20 e8       	ldi	r18, 0x80	; 128
    13ec:	31 e5       	ldi	r19, 0x51	; 81
    13ee:	41 e0       	ldi	r20, 0x01	; 1
    13f0:	50 e0       	ldi	r21, 0x00	; 0
    13f2:	0e 94 75 26 	call	0x4cea	; 0x4cea <__mulshisi3>
    13f6:	dc 01       	movw	r26, r24
    13f8:	cb 01       	movw	r24, r22
    13fa:	8c 0d       	add	r24, r12
    13fc:	9d 1d       	adc	r25, r13
    13fe:	ae 1d       	adc	r26, r14
    1400:	bf 1d       	adc	r27, r15
    1402:	9c 01       	movw	r18, r24
    1404:	ad 01       	movw	r20, r26
    1406:	6c 01       	movw	r12, r24
    1408:	7d 01       	movw	r14, r26
    140a:	ff 0c       	add	r15, r15
    140c:	cc 08       	sbc	r12, r12
    140e:	dc 2c       	mov	r13, r12
    1410:	76 01       	movw	r14, r12
    1412:	ac 2d       	mov	r26, r12
    1414:	fc 2d       	mov	r31, r12
    1416:	ec 2d       	mov	r30, r12
    1418:	9c 2d       	mov	r25, r12
    141a:	cb c0       	rjmp	.+406    	; 0x15b2 <__year_to_secs+0x248>
    141c:	eb 81       	ldd	r30, Y+3	; 0x03
    141e:	fc 81       	ldd	r31, Y+4	; 0x04
    1420:	ef 2b       	or	r30, r31
    1422:	31 f4       	brne	.+12     	; 0x1430 <__year_to_secs+0xc6>
    1424:	1a 82       	std	Y+2, r1	; 0x02
    1426:	19 82       	std	Y+1, r1	; 0x01
    1428:	ce 01       	movw	r24, r28
    142a:	01 96       	adiw	r24, 0x01	; 1
    142c:	9c 83       	std	Y+4, r25	; 0x04
    142e:	8b 83       	std	Y+3, r24	; 0x03
    1430:	c4 01       	movw	r24, r8
    1432:	84 56       	subi	r24, 0x64	; 100
    1434:	91 09       	sbc	r25, r1
    1436:	60 e9       	ldi	r22, 0x90	; 144
    1438:	71 e0       	ldi	r23, 0x01	; 1
    143a:	0e 94 cd 23 	call	0x479a	; 0x479a <__divmodhi4>
    143e:	7e 83       	std	Y+6, r23	; 0x06
    1440:	6d 83       	std	Y+5, r22	; 0x05
    1442:	94 01       	movw	r18, r8
    1444:	a5 01       	movw	r20, r10
    1446:	b6 01       	movw	r22, r12
    1448:	c7 01       	movw	r24, r14
    144a:	ac e9       	ldi	r26, 0x9C	; 156
    144c:	0e 94 e1 25 	call	0x4bc2	; 0x4bc2 <__adddi3_s8>
    1450:	19 01       	movw	r2, r18
    1452:	2a 01       	movw	r4, r20
    1454:	3b 01       	movw	r6, r22
    1456:	8f 83       	std	Y+7, r24	; 0x07
    1458:	98 87       	std	Y+8, r25	; 0x08
    145a:	70 e9       	ldi	r23, 0x90	; 144
    145c:	a7 2e       	mov	r10, r23
    145e:	bb 24       	eor	r11, r11
    1460:	b3 94       	inc	r11
    1462:	c1 2c       	mov	r12, r1
    1464:	d1 2c       	mov	r13, r1
    1466:	e1 2c       	mov	r14, r1
    1468:	f1 2c       	mov	r15, r1
    146a:	00 e0       	ldi	r16, 0x00	; 0
    146c:	10 e0       	ldi	r17, 0x00	; 0
    146e:	91 01       	movw	r18, r2
    1470:	a2 01       	movw	r20, r4
    1472:	b3 01       	movw	r22, r6
    1474:	0e 94 15 1f 	call	0x3e2a	; 0x3e2a <__moddi3>
    1478:	c9 01       	movw	r24, r18
    147a:	00 97       	sbiw	r24, 0x00	; 0
    147c:	59 f4       	brne	.+22     	; 0x1494 <__year_to_secs+0x12a>
    147e:	81 e0       	ldi	r24, 0x01	; 1
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	ab 81       	ldd	r26, Y+3	; 0x03
    1484:	bc 81       	ldd	r27, Y+4	; 0x04
    1486:	8d 93       	st	X+, r24
    1488:	9c 93       	st	X, r25
    148a:	20 e0       	ldi	r18, 0x00	; 0
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	40 e0       	ldi	r20, 0x00	; 0
    1490:	50 e0       	ldi	r21, 0x00	; 0
    1492:	33 c0       	rjmp	.+102    	; 0x14fa <__year_to_secs+0x190>
    1494:	28 3c       	cpi	r18, 0xC8	; 200
    1496:	31 05       	cpc	r19, r1
    1498:	6c f0       	brlt	.+26     	; 0x14b4 <__year_to_secs+0x14a>
    149a:	2c 32       	cpi	r18, 0x2C	; 44
    149c:	31 40       	sbci	r19, 0x01	; 1
    149e:	2c f0       	brlt	.+10     	; 0x14aa <__year_to_secs+0x140>
    14a0:	8c 52       	subi	r24, 0x2C	; 44
    14a2:	91 40       	sbci	r25, 0x01	; 1
    14a4:	43 e0       	ldi	r20, 0x03	; 3
    14a6:	50 e0       	ldi	r21, 0x00	; 0
    14a8:	0c c0       	rjmp	.+24     	; 0x14c2 <__year_to_secs+0x158>
    14aa:	88 5c       	subi	r24, 0xC8	; 200
    14ac:	91 09       	sbc	r25, r1
    14ae:	42 e0       	ldi	r20, 0x02	; 2
    14b0:	50 e0       	ldi	r21, 0x00	; 0
    14b2:	07 c0       	rjmp	.+14     	; 0x14c2 <__year_to_secs+0x158>
    14b4:	24 36       	cpi	r18, 0x64	; 100
    14b6:	31 05       	cpc	r19, r1
    14b8:	6c f0       	brlt	.+26     	; 0x14d4 <__year_to_secs+0x16a>
    14ba:	84 56       	subi	r24, 0x64	; 100
    14bc:	91 09       	sbc	r25, r1
    14be:	41 e0       	ldi	r20, 0x01	; 1
    14c0:	50 e0       	ldi	r21, 0x00	; 0
    14c2:	00 97       	sbiw	r24, 0x00	; 0
    14c4:	49 f4       	brne	.+18     	; 0x14d8 <__year_to_secs+0x16e>
    14c6:	eb 81       	ldd	r30, Y+3	; 0x03
    14c8:	fc 81       	ldd	r31, Y+4	; 0x04
    14ca:	11 82       	std	Z+1, r1	; 0x01
    14cc:	10 82       	st	Z, r1
    14ce:	20 e0       	ldi	r18, 0x00	; 0
    14d0:	30 e0       	ldi	r19, 0x00	; 0
    14d2:	13 c0       	rjmp	.+38     	; 0x14fa <__year_to_secs+0x190>
    14d4:	40 e0       	ldi	r20, 0x00	; 0
    14d6:	50 e0       	ldi	r21, 0x00	; 0
    14d8:	9c 01       	movw	r18, r24
    14da:	36 95       	lsr	r19
    14dc:	27 95       	ror	r18
    14de:	36 95       	lsr	r19
    14e0:	27 95       	ror	r18
    14e2:	83 70       	andi	r24, 0x03	; 3
    14e4:	99 27       	eor	r25, r25
    14e6:	61 e0       	ldi	r22, 0x01	; 1
    14e8:	70 e0       	ldi	r23, 0x00	; 0
    14ea:	89 2b       	or	r24, r25
    14ec:	11 f0       	breq	.+4      	; 0x14f2 <__year_to_secs+0x188>
    14ee:	60 e0       	ldi	r22, 0x00	; 0
    14f0:	70 e0       	ldi	r23, 0x00	; 0
    14f2:	ab 81       	ldd	r26, Y+3	; 0x03
    14f4:	bc 81       	ldd	r27, Y+4	; 0x04
    14f6:	6d 93       	st	X+, r22
    14f8:	7c 93       	st	X, r23
    14fa:	81 e6       	ldi	r24, 0x61	; 97
    14fc:	ed 81       	ldd	r30, Y+5	; 0x05
    14fe:	fe 81       	ldd	r31, Y+6	; 0x06
    1500:	8e 9f       	mul	r24, r30
    1502:	b0 01       	movw	r22, r0
    1504:	8f 9f       	mul	r24, r31
    1506:	70 0d       	add	r23, r0
    1508:	11 24       	eor	r1, r1
    150a:	e8 e1       	ldi	r30, 0x18	; 24
    150c:	e4 9f       	mul	r30, r20
    150e:	c0 01       	movw	r24, r0
    1510:	e5 9f       	mul	r30, r21
    1512:	90 0d       	add	r25, r0
    1514:	11 24       	eor	r1, r1
    1516:	86 0f       	add	r24, r22
    1518:	97 1f       	adc	r25, r23
    151a:	ab 81       	ldd	r26, Y+3	; 0x03
    151c:	bc 81       	ldd	r27, Y+4	; 0x04
    151e:	4d 91       	ld	r20, X+
    1520:	5c 91       	ld	r21, X
    1522:	84 1b       	sub	r24, r20
    1524:	95 0b       	sbc	r25, r21
    1526:	82 0f       	add	r24, r18
    1528:	93 1f       	adc	r25, r19
    152a:	e9 2f       	mov	r30, r25
    152c:	ee 0f       	add	r30, r30
    152e:	ee 0b       	sbc	r30, r30
    1530:	20 e8       	ldi	r18, 0x80	; 128
    1532:	a2 2e       	mov	r10, r18
    1534:	31 e5       	ldi	r19, 0x51	; 81
    1536:	b3 2e       	mov	r11, r19
    1538:	cc 24       	eor	r12, r12
    153a:	c3 94       	inc	r12
    153c:	d1 2c       	mov	r13, r1
    153e:	e1 2c       	mov	r14, r1
    1540:	f1 2c       	mov	r15, r1
    1542:	00 e0       	ldi	r16, 0x00	; 0
    1544:	10 e0       	ldi	r17, 0x00	; 0
    1546:	9c 01       	movw	r18, r24
    1548:	4e 2f       	mov	r20, r30
    154a:	5e 2f       	mov	r21, r30
    154c:	6e 2f       	mov	r22, r30
    154e:	7e 2f       	mov	r23, r30
    1550:	8e 2f       	mov	r24, r30
    1552:	9e 2f       	mov	r25, r30
    1554:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <__muldi3>
    1558:	92 2e       	mov	r9, r18
    155a:	83 2e       	mov	r8, r19
    155c:	4b 83       	std	Y+3, r20	; 0x03
    155e:	5d 83       	std	Y+5, r21	; 0x05
    1560:	69 87       	std	Y+9, r22	; 0x09
    1562:	7a 87       	std	Y+10, r23	; 0x0a
    1564:	8b 87       	std	Y+11, r24	; 0x0b
    1566:	9c 87       	std	Y+12, r25	; 0x0c
    1568:	43 e3       	ldi	r20, 0x33	; 51
    156a:	b4 2e       	mov	r11, r20
    156c:	51 ee       	ldi	r21, 0xE1	; 225
    156e:	c5 2e       	mov	r12, r21
    1570:	dd 24       	eor	r13, r13
    1572:	d3 94       	inc	r13
    1574:	91 01       	movw	r18, r2
    1576:	a2 01       	movw	r20, r4
    1578:	b3 01       	movw	r22, r6
    157a:	8f 81       	ldd	r24, Y+7	; 0x07
    157c:	98 85       	ldd	r25, Y+8	; 0x08
    157e:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <__muldi3>
    1582:	59 01       	movw	r10, r18
    1584:	6a 01       	movw	r12, r20
    1586:	7b 01       	movw	r14, r22
    1588:	8c 01       	movw	r16, r24
    158a:	29 2d       	mov	r18, r9
    158c:	38 2d       	mov	r19, r8
    158e:	4b 81       	ldd	r20, Y+3	; 0x03
    1590:	5d 81       	ldd	r21, Y+5	; 0x05
    1592:	69 85       	ldd	r22, Y+9	; 0x09
    1594:	7a 85       	ldd	r23, Y+10	; 0x0a
    1596:	8b 85       	ldd	r24, Y+11	; 0x0b
    1598:	9c 85       	ldd	r25, Y+12	; 0x0c
    159a:	0e 94 53 26 	call	0x4ca6	; 0x4ca6 <__adddi3>
    159e:	3b 56       	subi	r19, 0x6B	; 107
    15a0:	41 49       	sbci	r20, 0x91	; 145
    15a2:	57 4c       	sbci	r21, 0xC7	; 199
    15a4:	6f 4f       	sbci	r22, 0xFF	; 255
    15a6:	7f 4f       	sbci	r23, 0xFF	; 255
    15a8:	8f 4f       	sbci	r24, 0xFF	; 255
    15aa:	9f 4f       	sbci	r25, 0xFF	; 255
    15ac:	a6 2f       	mov	r26, r22
    15ae:	f7 2f       	mov	r31, r23
    15b0:	e8 2f       	mov	r30, r24
    15b2:	6a 2f       	mov	r22, r26
    15b4:	7f 2f       	mov	r23, r31
    15b6:	8e 2f       	mov	r24, r30
    15b8:	2c 96       	adiw	r28, 0x0c	; 12
    15ba:	e2 e1       	ldi	r30, 0x12	; 18
    15bc:	0c 94 41 22 	jmp	0x4482	; 0x4482 <__epilogue_restores__>

Disassembly of section .text.__month_to_secs:

000043d4 <__month_to_secs>:
    43d4:	cf 93       	push	r28
    43d6:	df 93       	push	r29
    43d8:	9c 01       	movw	r18, r24
    43da:	eb 01       	movw	r28, r22
    43dc:	88 0f       	add	r24, r24
    43de:	99 1f       	adc	r25, r25
    43e0:	88 0f       	add	r24, r24
    43e2:	99 1f       	adc	r25, r25
    43e4:	09 2e       	mov	r0, r25
    43e6:	00 0c       	add	r0, r0
    43e8:	aa 0b       	sbc	r26, r26
    43ea:	85 58       	subi	r24, 0x85	; 133
    43ec:	9d 4f       	sbci	r25, 0xFD	; 253
    43ee:	af 4f       	sbci	r26, 0xFF	; 255
    43f0:	fc 01       	movw	r30, r24
    43f2:	5a 2f       	mov	r21, r26
    43f4:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__xload_4>
    43f8:	cd 2b       	or	r28, r29
    43fa:	39 f0       	breq	.+14     	; 0x440a <__month_to_secs+0x36>
    43fc:	22 30       	cpi	r18, 0x02	; 2
    43fe:	31 05       	cpc	r19, r1
    4400:	24 f0       	brlt	.+8      	; 0x440a <__month_to_secs+0x36>
    4402:	60 58       	subi	r22, 0x80	; 128
    4404:	7e 4a       	sbci	r23, 0xAE	; 174
    4406:	8e 4f       	sbci	r24, 0xFE	; 254
    4408:	9f 4f       	sbci	r25, 0xFF	; 255
    440a:	df 91       	pop	r29
    440c:	cf 91       	pop	r28
    440e:	08 95       	ret

Disassembly of section .text.__secs_to_tm:

000003b8 <__secs_to_tm>:
 3b8:	a6 e1       	ldi	r26, 0x16	; 22
 3ba:	b0 e0       	ldi	r27, 0x00	; 0
 3bc:	e2 ee       	ldi	r30, 0xE2	; 226
 3be:	f1 e0       	ldi	r31, 0x01	; 1
 3c0:	0c 94 25 22 	jmp	0x444a	; 0x444a <__prologue_saves__>
 3c4:	79 01       	movw	r14, r18
 3c6:	d4 2e       	mov	r13, r20
 3c8:	c5 2e       	mov	r12, r21
 3ca:	b6 2f       	mov	r27, r22
 3cc:	a7 2f       	mov	r26, r23
 3ce:	f8 2f       	mov	r31, r24
 3d0:	b9 2e       	mov	r11, r25
 3d2:	40 58       	subi	r20, 0x80	; 128
 3d4:	5d 4b       	sbci	r21, 0xBD	; 189
 3d6:	6e 40       	sbci	r22, 0x0E	; 14
 3d8:	7f 4f       	sbci	r23, 0xFF	; 255
 3da:	8f 4f       	sbci	r24, 0xFF	; 255
 3dc:	9f 4f       	sbci	r25, 0xFF	; 255
 3de:	21 15       	cp	r18, r1
 3e0:	3b 47       	sbci	r19, 0x7B	; 123
 3e2:	4d 41       	sbci	r20, 0x1D	; 29
 3e4:	53 48       	sbci	r21, 0x83	; 131
 3e6:	62 4e       	sbci	r22, 0xE2	; 226
 3e8:	71 40       	sbci	r23, 0x01	; 1
 3ea:	81 05       	cpc	r24, r1
 3ec:	91 05       	cpc	r25, r1
 3ee:	11 f0       	breq	.+4      	; 0x3f4 <__secs_to_tm+0x3c>
 3f0:	08 f0       	brcs	.+2      	; 0x3f4 <__secs_to_tm+0x3c>
 3f2:	08 c2       	rjmp	.+1040   	; 0x804 <__EEPROM_REGION_LENGTH__+0x4>
 3f4:	18 8b       	std	Y+16, r17	; 0x10
 3f6:	0f 87       	std	Y+15, r16	; 0x0f
 3f8:	9b 2d       	mov	r25, r11
 3fa:	8f 2f       	mov	r24, r31
 3fc:	7a 2f       	mov	r23, r26
 3fe:	6b 2f       	mov	r22, r27
 400:	5c 2d       	mov	r21, r12
 402:	4d 2d       	mov	r20, r13
 404:	97 01       	movw	r18, r14
 406:	20 58       	subi	r18, 0x80	; 128
 408:	3d 45       	sbci	r19, 0x5D	; 93
 40a:	4c 4b       	sbci	r20, 0xBC	; 188
 40c:	58 43       	sbci	r21, 0x38	; 56
 40e:	61 09       	sbc	r22, r1
 410:	71 09       	sbc	r23, r1
 412:	81 09       	sbc	r24, r1
 414:	91 09       	sbc	r25, r1
 416:	19 01       	movw	r2, r18
 418:	4d 83       	std	Y+5, r20	; 0x05
 41a:	59 87       	std	Y+9, r21	; 0x09
 41c:	6d 87       	std	Y+13, r22	; 0x0d
 41e:	79 83       	std	Y+1, r23	; 0x01
 420:	89 8b       	std	Y+17, r24	; 0x11
 422:	9a 8b       	std	Y+18, r25	; 0x12
 424:	f0 e8       	ldi	r31, 0x80	; 128
 426:	af 2e       	mov	r10, r31
 428:	a1 e5       	ldi	r26, 0x51	; 81
 42a:	ba 2e       	mov	r11, r26
 42c:	cc 24       	eor	r12, r12
 42e:	c3 94       	inc	r12
 430:	d1 2c       	mov	r13, r1
 432:	e1 2c       	mov	r14, r1
 434:	f1 2c       	mov	r15, r1
 436:	00 e0       	ldi	r16, 0x00	; 0
 438:	10 e0       	ldi	r17, 0x00	; 0
 43a:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <__divdi3>
 43e:	29 01       	movw	r4, r18
 440:	3a 01       	movw	r6, r20
 442:	4b 01       	movw	r8, r22
 444:	8e 8b       	std	Y+22, r24	; 0x16
 446:	9b 8b       	std	Y+19, r25	; 0x13
 448:	91 01       	movw	r18, r2
 44a:	4d 81       	ldd	r20, Y+5	; 0x05
 44c:	59 85       	ldd	r21, Y+9	; 0x09
 44e:	6d 85       	ldd	r22, Y+13	; 0x0d
 450:	79 81       	ldd	r23, Y+1	; 0x01
 452:	89 89       	ldd	r24, Y+17	; 0x11
 454:	9a 89       	ldd	r25, Y+18	; 0x12
 456:	0e 94 15 1f 	call	0x3e2a	; 0x3e2a <__moddi3>
 45a:	2d 83       	std	Y+5, r18	; 0x05
 45c:	3e 83       	std	Y+6, r19	; 0x06
 45e:	4f 83       	std	Y+7, r20	; 0x07
 460:	58 87       	std	Y+8, r21	; 0x08
 462:	8d 81       	ldd	r24, Y+5	; 0x05
 464:	9e 81       	ldd	r25, Y+6	; 0x06
 466:	af 81       	ldd	r26, Y+7	; 0x07
 468:	b8 85       	ldd	r27, Y+8	; 0x08
 46a:	b7 ff       	sbrs	r27, 7
 46c:	15 c0       	rjmp	.+42     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
 46e:	80 58       	subi	r24, 0x80	; 128
 470:	9e 4a       	sbci	r25, 0xAE	; 174
 472:	ae 4f       	sbci	r26, 0xFE	; 254
 474:	bf 4f       	sbci	r27, 0xFF	; 255
 476:	8d 83       	std	Y+5, r24	; 0x05
 478:	9e 83       	std	Y+6, r25	; 0x06
 47a:	af 83       	std	Y+7, r26	; 0x07
 47c:	b8 87       	std	Y+8, r27	; 0x08
 47e:	92 01       	movw	r18, r4
 480:	a3 01       	movw	r20, r6
 482:	b4 01       	movw	r22, r8
 484:	8e 89       	ldd	r24, Y+22	; 0x16
 486:	9b 89       	ldd	r25, Y+19	; 0x13
 488:	af ef       	ldi	r26, 0xFF	; 255
 48a:	0e 94 e1 25 	call	0x4bc2	; 0x4bc2 <__adddi3_s8>
 48e:	29 01       	movw	r4, r18
 490:	3a 01       	movw	r6, r20
 492:	4b 01       	movw	r8, r22
 494:	8e 8b       	std	Y+22, r24	; 0x16
 496:	9b 8b       	std	Y+19, r25	; 0x13
 498:	92 01       	movw	r18, r4
 49a:	a3 01       	movw	r20, r6
 49c:	b4 01       	movw	r22, r8
 49e:	8e 89       	ldd	r24, Y+22	; 0x16
 4a0:	9b 89       	ldd	r25, Y+19	; 0x13
 4a2:	a3 e0       	ldi	r26, 0x03	; 3
 4a4:	0e 94 e1 25 	call	0x4bc2	; 0x4bc2 <__adddi3_s8>
 4a8:	e7 e0       	ldi	r30, 0x07	; 7
 4aa:	ae 2e       	mov	r10, r30
 4ac:	b1 2c       	mov	r11, r1
 4ae:	c1 2c       	mov	r12, r1
 4b0:	d1 2c       	mov	r13, r1
 4b2:	e1 2c       	mov	r14, r1
 4b4:	f1 2c       	mov	r15, r1
 4b6:	00 e0       	ldi	r16, 0x00	; 0
 4b8:	10 e0       	ldi	r17, 0x00	; 0
 4ba:	0e 94 15 1f 	call	0x3e2a	; 0x3e2a <__moddi3>
 4be:	2d 87       	std	Y+13, r18	; 0x0d
 4c0:	3e 87       	std	Y+14, r19	; 0x0e
 4c2:	ad 85       	ldd	r26, Y+13	; 0x0d
 4c4:	be 85       	ldd	r27, Y+14	; 0x0e
 4c6:	b7 ff       	sbrs	r27, 7
 4c8:	03 c0       	rjmp	.+6      	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
 4ca:	17 96       	adiw	r26, 0x07	; 7
 4cc:	be 87       	std	Y+14, r27	; 0x0e
 4ce:	ad 87       	std	Y+13, r26	; 0x0d
 4d0:	51 eb       	ldi	r21, 0xB1	; 177
 4d2:	a5 2e       	mov	r10, r21
 4d4:	6a e3       	ldi	r22, 0x3A	; 58
 4d6:	b6 2e       	mov	r11, r22
 4d8:	72 e0       	ldi	r23, 0x02	; 2
 4da:	c7 2e       	mov	r12, r23
 4dc:	d1 2c       	mov	r13, r1
 4de:	e1 2c       	mov	r14, r1
 4e0:	f1 2c       	mov	r15, r1
 4e2:	00 e0       	ldi	r16, 0x00	; 0
 4e4:	10 e0       	ldi	r17, 0x00	; 0
 4e6:	92 01       	movw	r18, r4
 4e8:	a3 01       	movw	r20, r6
 4ea:	b4 01       	movw	r22, r8
 4ec:	8e 89       	ldd	r24, Y+22	; 0x16
 4ee:	9b 89       	ldd	r25, Y+19	; 0x13
 4f0:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <__divdi3>
 4f4:	29 87       	std	Y+9, r18	; 0x09
 4f6:	3a 87       	std	Y+10, r19	; 0x0a
 4f8:	4b 87       	std	Y+11, r20	; 0x0b
 4fa:	5c 87       	std	Y+12, r21	; 0x0c
 4fc:	92 01       	movw	r18, r4
 4fe:	a3 01       	movw	r20, r6
 500:	b4 01       	movw	r22, r8
 502:	8e 89       	ldd	r24, Y+22	; 0x16
 504:	9b 89       	ldd	r25, Y+19	; 0x13
 506:	0e 94 15 1f 	call	0x3e2a	; 0x3e2a <__moddi3>
 50a:	82 2e       	mov	r8, r18
 50c:	93 2e       	mov	r9, r19
 50e:	a4 2e       	mov	r10, r20
 510:	b5 2e       	mov	r11, r21
 512:	b7 fe       	sbrs	r11, 7
 514:	12 c0       	rjmp	.+36     	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
 516:	b1 eb       	ldi	r27, 0xB1	; 177
 518:	8b 0e       	add	r8, r27
 51a:	ba e3       	ldi	r27, 0x3A	; 58
 51c:	9b 1e       	adc	r9, r27
 51e:	b2 e0       	ldi	r27, 0x02	; 2
 520:	ab 1e       	adc	r10, r27
 522:	b1 1c       	adc	r11, r1
 524:	89 85       	ldd	r24, Y+9	; 0x09
 526:	9a 85       	ldd	r25, Y+10	; 0x0a
 528:	ab 85       	ldd	r26, Y+11	; 0x0b
 52a:	bc 85       	ldd	r27, Y+12	; 0x0c
 52c:	01 97       	sbiw	r24, 0x01	; 1
 52e:	a1 09       	sbc	r26, r1
 530:	b1 09       	sbc	r27, r1
 532:	89 87       	std	Y+9, r24	; 0x09
 534:	9a 87       	std	Y+10, r25	; 0x0a
 536:	ab 87       	std	Y+11, r26	; 0x0b
 538:	bc 87       	std	Y+12, r27	; 0x0c
 53a:	c5 01       	movw	r24, r10
 53c:	b4 01       	movw	r22, r8
 53e:	2c ea       	ldi	r18, 0xAC	; 172
 540:	3e e8       	ldi	r19, 0x8E	; 142
 542:	40 e0       	ldi	r20, 0x00	; 0
 544:	50 e0       	ldi	r21, 0x00	; 0
 546:	0e 94 0d 23 	call	0x461a	; 0x461a <__divmodsi4>
 54a:	69 01       	movw	r12, r18
 54c:	7a 01       	movw	r14, r20
 54e:	24 30       	cpi	r18, 0x04	; 4
 550:	31 05       	cpc	r19, r1
 552:	41 05       	cpc	r20, r1
 554:	51 05       	cpc	r21, r1
 556:	29 f4       	brne	.+10     	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
 558:	43 e0       	ldi	r20, 0x03	; 3
 55a:	c4 2e       	mov	r12, r20
 55c:	d1 2c       	mov	r13, r1
 55e:	e1 2c       	mov	r14, r1
 560:	f1 2c       	mov	r15, r1
 562:	a4 e5       	ldi	r26, 0x54	; 84
 564:	b1 e7       	ldi	r27, 0x71	; 113
 566:	a7 01       	movw	r20, r14
 568:	96 01       	movw	r18, r12
 56a:	0e 94 78 26 	call	0x4cf0	; 0x4cf0 <__mulohisi3>
 56e:	2b 01       	movw	r4, r22
 570:	3c 01       	movw	r6, r24
 572:	48 0c       	add	r4, r8
 574:	59 1c       	adc	r5, r9
 576:	6a 1c       	adc	r6, r10
 578:	7b 1c       	adc	r7, r11
 57a:	c3 01       	movw	r24, r6
 57c:	b2 01       	movw	r22, r4
 57e:	25 eb       	ldi	r18, 0xB5	; 181
 580:	35 e0       	ldi	r19, 0x05	; 5
 582:	40 e0       	ldi	r20, 0x00	; 0
 584:	50 e0       	ldi	r21, 0x00	; 0
 586:	0e 94 0d 23 	call	0x461a	; 0x461a <__divmodsi4>
 58a:	49 01       	movw	r8, r18
 58c:	5a 01       	movw	r10, r20
 58e:	29 31       	cpi	r18, 0x19	; 25
 590:	31 05       	cpc	r19, r1
 592:	41 05       	cpc	r20, r1
 594:	51 05       	cpc	r21, r1
 596:	29 f4       	brne	.+10     	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
 598:	38 e1       	ldi	r19, 0x18	; 24
 59a:	83 2e       	mov	r8, r19
 59c:	91 2c       	mov	r9, r1
 59e:	a1 2c       	mov	r10, r1
 5a0:	b1 2c       	mov	r11, r1
 5a2:	ab e4       	ldi	r26, 0x4B	; 75
 5a4:	ba ef       	ldi	r27, 0xFA	; 250
 5a6:	a5 01       	movw	r20, r10
 5a8:	94 01       	movw	r18, r8
 5aa:	0e 94 78 26 	call	0x4cf0	; 0x4cf0 <__mulohisi3>
 5ae:	46 0e       	add	r4, r22
 5b0:	57 1e       	adc	r5, r23
 5b2:	68 1e       	adc	r6, r24
 5b4:	79 1e       	adc	r7, r25
 5b6:	c3 01       	movw	r24, r6
 5b8:	b2 01       	movw	r22, r4
 5ba:	2d e6       	ldi	r18, 0x6D	; 109
 5bc:	31 e0       	ldi	r19, 0x01	; 1
 5be:	40 e0       	ldi	r20, 0x00	; 0
 5c0:	50 e0       	ldi	r21, 0x00	; 0
 5c2:	0e 94 0d 23 	call	0x461a	; 0x461a <__divmodsi4>
 5c6:	29 83       	std	Y+1, r18	; 0x01
 5c8:	3a 83       	std	Y+2, r19	; 0x02
 5ca:	4b 83       	std	Y+3, r20	; 0x03
 5cc:	5c 83       	std	Y+4, r21	; 0x04
 5ce:	24 30       	cpi	r18, 0x04	; 4
 5d0:	31 05       	cpc	r19, r1
 5d2:	41 05       	cpc	r20, r1
 5d4:	51 05       	cpc	r21, r1
 5d6:	41 f4       	brne	.+16     	; 0x5e8 <__LOCK_REGION_LENGTH__+0x1e8>
 5d8:	83 e0       	ldi	r24, 0x03	; 3
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	a0 e0       	ldi	r26, 0x00	; 0
 5de:	b0 e0       	ldi	r27, 0x00	; 0
 5e0:	89 83       	std	Y+1, r24	; 0x01
 5e2:	9a 83       	std	Y+2, r25	; 0x02
 5e4:	ab 83       	std	Y+3, r26	; 0x03
 5e6:	bc 83       	std	Y+4, r27	; 0x04
 5e8:	a3 e9       	ldi	r26, 0x93	; 147
 5ea:	be ef       	ldi	r27, 0xFE	; 254
 5ec:	29 81       	ldd	r18, Y+1	; 0x01
 5ee:	3a 81       	ldd	r19, Y+2	; 0x02
 5f0:	4b 81       	ldd	r20, Y+3	; 0x03
 5f2:	5c 81       	ldd	r21, Y+4	; 0x04
 5f4:	0e 94 78 26 	call	0x4cf0	; 0x4cf0 <__mulohisi3>
 5f8:	46 0e       	add	r4, r22
 5fa:	57 1e       	adc	r5, r23
 5fc:	68 1e       	adc	r6, r24
 5fe:	79 1e       	adc	r7, r25
 600:	23 2b       	or	r18, r19
 602:	24 2b       	or	r18, r20
 604:	25 2b       	or	r18, r21
 606:	81 f4       	brne	.+32     	; 0x628 <__LOCK_REGION_LENGTH__+0x228>
 608:	81 14       	cp	r8, r1
 60a:	91 04       	cpc	r9, r1
 60c:	a1 04       	cpc	r10, r1
 60e:	b1 04       	cpc	r11, r1
 610:	71 f4       	brne	.+28     	; 0x62e <__LOCK_REGION_LENGTH__+0x22e>
 612:	31 e0       	ldi	r19, 0x01	; 1
 614:	20 e0       	ldi	r18, 0x00	; 0
 616:	c1 14       	cp	r12, r1
 618:	d1 04       	cpc	r13, r1
 61a:	e1 04       	cpc	r14, r1
 61c:	f1 04       	cpc	r15, r1
 61e:	09 f0       	breq	.+2      	; 0x622 <__LOCK_REGION_LENGTH__+0x222>
 620:	30 e0       	ldi	r19, 0x00	; 0
 622:	83 2f       	mov	r24, r19
 624:	92 2f       	mov	r25, r18
 626:	05 c0       	rjmp	.+10     	; 0x632 <__LOCK_REGION_LENGTH__+0x232>
 628:	80 e0       	ldi	r24, 0x00	; 0
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	02 c0       	rjmp	.+4      	; 0x632 <__LOCK_REGION_LENGTH__+0x232>
 62e:	81 e0       	ldi	r24, 0x01	; 1
 630:	90 e0       	ldi	r25, 0x00	; 0
 632:	12 01       	movw	r2, r4
 634:	ab e3       	ldi	r26, 0x3B	; 59
 636:	2a 0e       	add	r2, r26
 638:	31 1c       	adc	r3, r1
 63a:	28 0e       	add	r2, r24
 63c:	39 1e       	adc	r3, r25
 63e:	9c 01       	movw	r18, r24
 640:	24 59       	subi	r18, 0x94	; 148
 642:	3e 4f       	sbci	r19, 0xFE	; 254
 644:	22 15       	cp	r18, r2
 646:	33 05       	cpc	r19, r3
 648:	24 f4       	brge	.+8      	; 0x652 <__LOCK_REGION_LENGTH__+0x252>
 64a:	83 59       	subi	r24, 0x93	; 147
 64c:	9e 4f       	sbci	r25, 0xFE	; 254
 64e:	28 1a       	sub	r2, r24
 650:	39 0a       	sbc	r3, r25
 652:	92 e0       	ldi	r25, 0x02	; 2
 654:	88 0c       	add	r8, r8
 656:	99 1c       	adc	r9, r9
 658:	aa 1c       	adc	r10, r10
 65a:	bb 1c       	adc	r11, r11
 65c:	9a 95       	dec	r25
 65e:	d1 f7       	brne	.-12     	; 0x654 <__LOCK_REGION_LENGTH__+0x254>
 660:	89 81       	ldd	r24, Y+1	; 0x01
 662:	9a 81       	ldd	r25, Y+2	; 0x02
 664:	ab 81       	ldd	r26, Y+3	; 0x03
 666:	bc 81       	ldd	r27, Y+4	; 0x04
 668:	88 0e       	add	r8, r24
 66a:	99 1e       	adc	r9, r25
 66c:	aa 1e       	adc	r10, r26
 66e:	bb 1e       	adc	r11, r27
 670:	a4 e6       	ldi	r26, 0x64	; 100
 672:	b0 e0       	ldi	r27, 0x00	; 0
 674:	a7 01       	movw	r20, r14
 676:	96 01       	movw	r18, r12
 678:	0e 94 0e 26 	call	0x4c1c	; 0x4c1c <__muluhisi3>
 67c:	86 0e       	add	r8, r22
 67e:	97 1e       	adc	r9, r23
 680:	a8 1e       	adc	r10, r24
 682:	b9 1e       	adc	r11, r25
 684:	d5 01       	movw	r26, r10
 686:	c4 01       	movw	r24, r8
 688:	bb 0f       	add	r27, r27
 68a:	88 0b       	sbc	r24, r24
 68c:	98 2f       	mov	r25, r24
 68e:	dc 01       	movw	r26, r24
 690:	89 83       	std	Y+1, r24	; 0x01
 692:	9a 83       	std	Y+2, r25	; 0x02
 694:	ab 83       	std	Y+3, r26	; 0x03
 696:	bc 83       	std	Y+4, r27	; 0x04
 698:	69 85       	ldd	r22, Y+9	; 0x09
 69a:	7a 85       	ldd	r23, Y+10	; 0x0a
 69c:	8b 85       	ldd	r24, Y+11	; 0x0b
 69e:	9c 85       	ldd	r25, Y+12	; 0x0c
 6a0:	20 e9       	ldi	r18, 0x90	; 144
 6a2:	31 e0       	ldi	r19, 0x01	; 1
 6a4:	40 e0       	ldi	r20, 0x00	; 0
 6a6:	50 e0       	ldi	r21, 0x00	; 0
 6a8:	0e 94 9f 25 	call	0x4b3e	; 0x4b3e <__mulsidi3>
 6ac:	f2 2f       	mov	r31, r18
 6ae:	e3 2f       	mov	r30, r19
 6b0:	6a 01       	movw	r12, r20
 6b2:	7b 01       	movw	r14, r22
 6b4:	8c 01       	movw	r16, r24
 6b6:	94 01       	movw	r18, r8
 6b8:	a5 01       	movw	r20, r10
 6ba:	69 81       	ldd	r22, Y+1	; 0x01
 6bc:	76 2f       	mov	r23, r22
 6be:	86 2f       	mov	r24, r22
 6c0:	96 2f       	mov	r25, r22
 6c2:	af 2e       	mov	r10, r31
 6c4:	be 2e       	mov	r11, r30
 6c6:	0e 94 53 26 	call	0x4ca6	; 0x4ca6 <__adddi3>
 6ca:	49 01       	movw	r8, r18
 6cc:	5a 01       	movw	r10, r20
 6ce:	6b 01       	movw	r12, r22
 6d0:	7c 01       	movw	r14, r24
 6d2:	25 e3       	ldi	r18, 0x35	; 53
 6d4:	33 e0       	ldi	r19, 0x03	; 3
 6d6:	40 e0       	ldi	r20, 0x00	; 0
 6d8:	1a 82       	std	Y+2, r1	; 0x02
 6da:	19 82       	std	Y+1, r1	; 0x01
 6dc:	f9 01       	movw	r30, r18
 6de:	84 91       	lpm	r24, Z
 6e0:	47 fd       	sbrc	r20, 7
 6e2:	80 81       	ld	r24, Z
 6e4:	08 2e       	mov	r0, r24
 6e6:	00 0c       	add	r0, r0
 6e8:	99 0b       	sbc	r25, r25
 6ea:	aa 0b       	sbc	r26, r26
 6ec:	bb 0b       	sbc	r27, r27
 6ee:	2f 5f       	subi	r18, 0xFF	; 255
 6f0:	3f 4f       	sbci	r19, 0xFF	; 255
 6f2:	4f 4f       	sbci	r20, 0xFF	; 255
 6f4:	48 16       	cp	r4, r24
 6f6:	59 06       	cpc	r5, r25
 6f8:	6a 06       	cpc	r6, r26
 6fa:	7b 06       	cpc	r7, r27
 6fc:	54 f0       	brlt	.+20     	; 0x712 <__LOCK_REGION_LENGTH__+0x312>
 6fe:	48 1a       	sub	r4, r24
 700:	59 0a       	sbc	r5, r25
 702:	6a 0a       	sbc	r6, r26
 704:	7b 0a       	sbc	r7, r27
 706:	a9 81       	ldd	r26, Y+1	; 0x01
 708:	ba 81       	ldd	r27, Y+2	; 0x02
 70a:	11 96       	adiw	r26, 0x01	; 1
 70c:	ba 83       	std	Y+2, r27	; 0x02
 70e:	a9 83       	std	Y+1, r26	; 0x01
 710:	e5 cf       	rjmp	.-54     	; 0x6dc <__LOCK_REGION_LENGTH__+0x2dc>
 712:	e9 81       	ldd	r30, Y+1	; 0x01
 714:	fa 81       	ldd	r31, Y+2	; 0x02
 716:	ea 30       	cpi	r30, 0x0A	; 10
 718:	f1 05       	cpc	r31, r1
 71a:	74 f0       	brlt	.+28     	; 0x738 <__LOCK_REGION_LENGTH__+0x338>
 71c:	3c 97       	sbiw	r30, 0x0c	; 12
 71e:	fa 83       	std	Y+2, r31	; 0x02
 720:	e9 83       	std	Y+1, r30	; 0x01
 722:	94 01       	movw	r18, r8
 724:	a5 01       	movw	r20, r10
 726:	b6 01       	movw	r22, r12
 728:	c7 01       	movw	r24, r14
 72a:	a1 e0       	ldi	r26, 0x01	; 1
 72c:	0e 94 e1 25 	call	0x4bc2	; 0x4bc2 <__adddi3_s8>
 730:	49 01       	movw	r8, r18
 732:	5a 01       	movw	r10, r20
 734:	6b 01       	movw	r12, r22
 736:	7c 01       	movw	r14, r24
 738:	94 01       	movw	r18, r8
 73a:	a5 01       	movw	r20, r10
 73c:	b6 01       	movw	r22, r12
 73e:	c7 01       	movw	r24, r14
 740:	2c 59       	subi	r18, 0x9C	; 156
 742:	3f 47       	sbci	r19, 0x7F	; 127
 744:	4f 4f       	sbci	r20, 0xFF	; 255
 746:	5f 4f       	sbci	r21, 0xFF	; 255
 748:	6f 4f       	sbci	r22, 0xFF	; 255
 74a:	7f 4f       	sbci	r23, 0xFF	; 255
 74c:	8f 4f       	sbci	r24, 0xFF	; 255
 74e:	9f 4f       	sbci	r25, 0xFF	; 255
 750:	2f 3f       	cpi	r18, 0xFF	; 255
 752:	3f 4f       	sbci	r19, 0xFF	; 255
 754:	41 05       	cpc	r20, r1
 756:	51 05       	cpc	r21, r1
 758:	61 05       	cpc	r22, r1
 75a:	71 05       	cpc	r23, r1
 75c:	81 05       	cpc	r24, r1
 75e:	91 05       	cpc	r25, r1
 760:	11 f0       	breq	.+4      	; 0x766 <__LOCK_REGION_LENGTH__+0x366>
 762:	08 f0       	brcs	.+2      	; 0x766 <__LOCK_REGION_LENGTH__+0x366>
 764:	4f c0       	rjmp	.+158    	; 0x804 <__EEPROM_REGION_LENGTH__+0x4>
 766:	24 e6       	ldi	r18, 0x64	; 100
 768:	82 0e       	add	r8, r18
 76a:	91 1c       	adc	r9, r1
 76c:	af 85       	ldd	r26, Y+15	; 0x0f
 76e:	b8 89       	ldd	r27, Y+16	; 0x10
 770:	1b 96       	adiw	r26, 0x0b	; 11
 772:	9c 92       	st	X, r9
 774:	8e 92       	st	-X, r8
 776:	1a 97       	sbiw	r26, 0x0a	; 10
 778:	e9 81       	ldd	r30, Y+1	; 0x01
 77a:	fa 81       	ldd	r31, Y+2	; 0x02
 77c:	32 96       	adiw	r30, 0x02	; 2
 77e:	19 96       	adiw	r26, 0x09	; 9
 780:	fc 93       	st	X, r31
 782:	ee 93       	st	-X, r30
 784:	18 97       	sbiw	r26, 0x08	; 8
 786:	ff ef       	ldi	r31, 0xFF	; 255
 788:	4f 1a       	sub	r4, r31
 78a:	5f 0a       	sbc	r5, r31
 78c:	17 96       	adiw	r26, 0x07	; 7
 78e:	5c 92       	st	X, r5
 790:	4e 92       	st	-X, r4
 792:	16 97       	sbiw	r26, 0x06	; 6
 794:	8d 85       	ldd	r24, Y+13	; 0x0d
 796:	9e 85       	ldd	r25, Y+14	; 0x0e
 798:	1d 96       	adiw	r26, 0x0d	; 13
 79a:	9c 93       	st	X, r25
 79c:	8e 93       	st	-X, r24
 79e:	1c 97       	sbiw	r26, 0x0c	; 12
 7a0:	1f 96       	adiw	r26, 0x0f	; 15
 7a2:	3c 92       	st	X, r3
 7a4:	2e 92       	st	-X, r2
 7a6:	1e 97       	sbiw	r26, 0x0e	; 14
 7a8:	6d 81       	ldd	r22, Y+5	; 0x05
 7aa:	7e 81       	ldd	r23, Y+6	; 0x06
 7ac:	8f 81       	ldd	r24, Y+7	; 0x07
 7ae:	98 85       	ldd	r25, Y+8	; 0x08
 7b0:	20 e1       	ldi	r18, 0x10	; 16
 7b2:	3e e0       	ldi	r19, 0x0E	; 14
 7b4:	40 e0       	ldi	r20, 0x00	; 0
 7b6:	50 e0       	ldi	r21, 0x00	; 0
 7b8:	0e 94 0d 23 	call	0x461a	; 0x461a <__divmodsi4>
 7bc:	af 85       	ldd	r26, Y+15	; 0x0f
 7be:	b8 89       	ldd	r27, Y+16	; 0x10
 7c0:	15 96       	adiw	r26, 0x05	; 5
 7c2:	3c 93       	st	X, r19
 7c4:	2e 93       	st	-X, r18
 7c6:	14 97       	sbiw	r26, 0x04	; 4
 7c8:	8c e3       	ldi	r24, 0x3C	; 60
 7ca:	c8 2e       	mov	r12, r24
 7cc:	d1 2c       	mov	r13, r1
 7ce:	e1 2c       	mov	r14, r1
 7d0:	f1 2c       	mov	r15, r1
 7d2:	6d 81       	ldd	r22, Y+5	; 0x05
 7d4:	7e 81       	ldd	r23, Y+6	; 0x06
 7d6:	8f 81       	ldd	r24, Y+7	; 0x07
 7d8:	98 85       	ldd	r25, Y+8	; 0x08
 7da:	a7 01       	movw	r20, r14
 7dc:	96 01       	movw	r18, r12
 7de:	0e 94 0d 23 	call	0x461a	; 0x461a <__divmodsi4>
 7e2:	4b 01       	movw	r8, r22
 7e4:	5c 01       	movw	r10, r24
 7e6:	ca 01       	movw	r24, r20
 7e8:	b9 01       	movw	r22, r18
 7ea:	a7 01       	movw	r20, r14
 7ec:	96 01       	movw	r18, r12
 7ee:	0e 94 0d 23 	call	0x461a	; 0x461a <__divmodsi4>
 7f2:	ef 85       	ldd	r30, Y+15	; 0x0f
 7f4:	f8 89       	ldd	r31, Y+16	; 0x10
 7f6:	73 83       	std	Z+3, r23	; 0x03
 7f8:	62 83       	std	Z+2, r22	; 0x02
 7fa:	91 82       	std	Z+1, r9	; 0x01
 7fc:	80 82       	st	Z, r8
 7fe:	80 e0       	ldi	r24, 0x00	; 0
 800:	90 e0       	ldi	r25, 0x00	; 0
 802:	02 c0       	rjmp	.+4      	; 0x808 <__EEPROM_REGION_LENGTH__+0x8>
 804:	8f ef       	ldi	r24, 0xFF	; 255
 806:	9f ef       	ldi	r25, 0xFF	; 255
 808:	66 96       	adiw	r28, 0x16	; 22
 80a:	e2 e1       	ldi	r30, 0x12	; 18
 80c:	0c 94 41 22 	jmp	0x4482	; 0x4482 <__epilogue_restores__>

Disassembly of section .text.libgcc.div:

0000479a <__divmodhi4>:
    479a:	97 fb       	bst	r25, 7
    479c:	07 2e       	mov	r0, r23
    479e:	16 f4       	brtc	.+4      	; 0x47a4 <__divmodhi4+0xa>
    47a0:	00 94       	com	r0
    47a2:	07 d0       	rcall	.+14     	; 0x47b2 <__divmodhi4_neg1>
    47a4:	77 fd       	sbrc	r23, 7
    47a6:	09 d0       	rcall	.+18     	; 0x47ba <__divmodhi4_neg2>
    47a8:	0e 94 b9 23 	call	0x4772	; 0x4772 <__udivmodhi4>
    47ac:	07 fc       	sbrc	r0, 7
    47ae:	05 d0       	rcall	.+10     	; 0x47ba <__divmodhi4_neg2>
    47b0:	3e f4       	brtc	.+14     	; 0x47c0 <__divmodhi4_exit>

000047b2 <__divmodhi4_neg1>:
    47b2:	90 95       	com	r25
    47b4:	81 95       	neg	r24
    47b6:	9f 4f       	sbci	r25, 0xFF	; 255
    47b8:	08 95       	ret

000047ba <__divmodhi4_neg2>:
    47ba:	70 95       	com	r23
    47bc:	61 95       	neg	r22
    47be:	7f 4f       	sbci	r23, 0xFF	; 255

000047c0 <__divmodhi4_exit>:
    47c0:	08 95       	ret

Disassembly of section .text.libgcc.mul:

000033c6 <__muldi3>:
    33c6:	df 93       	push	r29
    33c8:	cf 93       	push	r28
    33ca:	1f 93       	push	r17
    33cc:	0f 93       	push	r16
    33ce:	9a 9d       	mul	r25, r10
    33d0:	f0 2d       	mov	r31, r0
    33d2:	21 9f       	mul	r18, r17
    33d4:	f0 0d       	add	r31, r0
    33d6:	8b 9d       	mul	r24, r11
    33d8:	f0 0d       	add	r31, r0
    33da:	8a 9d       	mul	r24, r10
    33dc:	e0 2d       	mov	r30, r0
    33de:	f1 0d       	add	r31, r1
    33e0:	03 9f       	mul	r16, r19
    33e2:	f0 0d       	add	r31, r0
    33e4:	02 9f       	mul	r16, r18
    33e6:	e0 0d       	add	r30, r0
    33e8:	f1 1d       	adc	r31, r1
    33ea:	4e 9d       	mul	r20, r14
    33ec:	e0 0d       	add	r30, r0
    33ee:	f1 1d       	adc	r31, r1
    33f0:	5e 9d       	mul	r21, r14
    33f2:	f0 0d       	add	r31, r0
    33f4:	4f 9d       	mul	r20, r15
    33f6:	f0 0d       	add	r31, r0
    33f8:	7f 93       	push	r23
    33fa:	6f 93       	push	r22
    33fc:	bf 92       	push	r11
    33fe:	af 92       	push	r10
    3400:	5f 93       	push	r21
    3402:	4f 93       	push	r20
    3404:	d5 01       	movw	r26, r10
    3406:	0e 94 90 25 	call	0x4b20	; 0x4b20 <__umulhisi3>
    340a:	8b 01       	movw	r16, r22
    340c:	ac 01       	movw	r20, r24
    340e:	d7 01       	movw	r26, r14
    3410:	0e 94 90 25 	call	0x4b20	; 0x4b20 <__umulhisi3>
    3414:	eb 01       	movw	r28, r22
    3416:	e8 0f       	add	r30, r24
    3418:	f9 1f       	adc	r31, r25
    341a:	d6 01       	movw	r26, r12
    341c:	0e 94 4a 26 	call	0x4c94	; 0x4c94 <__muldi3_6>
    3420:	2f 91       	pop	r18
    3422:	3f 91       	pop	r19
    3424:	d6 01       	movw	r26, r12
    3426:	0e 94 90 25 	call	0x4b20	; 0x4b20 <__umulhisi3>
    342a:	c6 0f       	add	r28, r22
    342c:	d7 1f       	adc	r29, r23
    342e:	e8 1f       	adc	r30, r24
    3430:	f9 1f       	adc	r31, r25
    3432:	af 91       	pop	r26
    3434:	bf 91       	pop	r27
    3436:	0e 94 4a 26 	call	0x4c94	; 0x4c94 <__muldi3_6>
    343a:	2f 91       	pop	r18
    343c:	3f 91       	pop	r19
    343e:	0e 94 90 25 	call	0x4b20	; 0x4b20 <__umulhisi3>
    3442:	c6 0f       	add	r28, r22
    3444:	d7 1f       	adc	r29, r23
    3446:	e8 1f       	adc	r30, r24
    3448:	f9 1f       	adc	r31, r25
    344a:	d6 01       	movw	r26, r12
    344c:	0e 94 90 25 	call	0x4b20	; 0x4b20 <__umulhisi3>
    3450:	e6 0f       	add	r30, r22
    3452:	f7 1f       	adc	r31, r23
    3454:	98 01       	movw	r18, r16
    3456:	be 01       	movw	r22, r28
    3458:	cf 01       	movw	r24, r30
    345a:	11 24       	eor	r1, r1
    345c:	0f 91       	pop	r16
    345e:	1f 91       	pop	r17
    3460:	cf 91       	pop	r28
    3462:	df 91       	pop	r29
    3464:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00004c94 <__muldi3_6>:
    4c94:	0e 94 90 25 	call	0x4b20	; 0x4b20 <__umulhisi3>
    4c98:	46 0f       	add	r20, r22
    4c9a:	57 1f       	adc	r21, r23
    4c9c:	c8 1f       	adc	r28, r24
    4c9e:	d9 1f       	adc	r29, r25
    4ca0:	08 f4       	brcc	.+2      	; 0x4ca4 <__muldi3_6+0x10>
    4ca2:	31 96       	adiw	r30, 0x01	; 1
    4ca4:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00004b3e <__mulsidi3>:
    4b3e:	97 fb       	bst	r25, 7
    4b40:	57 ff       	sbrs	r21, 7
    4b42:	0c 94 24 20 	jmp	0x4048	; 0x4048 <__umulsidi3_helper>
    4b46:	9f 93       	push	r25
    4b48:	8f 93       	push	r24
    4b4a:	0e 94 24 20 	call	0x4048	; 0x4048 <__umulsidi3_helper>
    4b4e:	6e 1b       	sub	r22, r30
    4b50:	7f 0b       	sbc	r23, r31
    4b52:	af 91       	pop	r26
    4b54:	bf 91       	pop	r27
    4b56:	8a 0b       	sbc	r24, r26
    4b58:	9b 0b       	sbc	r25, r27
    4b5a:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00004046 <__umulsidi3>:
    4046:	e8 94       	clt

00004048 <__umulsidi3_helper>:
    4048:	df 93       	push	r29
    404a:	cf 93       	push	r28
    404c:	fc 01       	movw	r30, r24
    404e:	db 01       	movw	r26, r22
    4050:	0e 94 90 25 	call	0x4b20	; 0x4b20 <__umulhisi3>
    4054:	7f 93       	push	r23
    4056:	6f 93       	push	r22
    4058:	e9 01       	movw	r28, r18
    405a:	9a 01       	movw	r18, r20
    405c:	ac 01       	movw	r20, r24
    405e:	bf 93       	push	r27
    4060:	af 93       	push	r26
    4062:	3f 93       	push	r19
    4064:	2f 93       	push	r18
    4066:	df 01       	movw	r26, r30
    4068:	0e 94 90 25 	call	0x4b20	; 0x4b20 <__umulhisi3>
    406c:	26 f4       	brtc	.+8      	; 0x4076 <__umulsidi3_helper+0x2e>
    406e:	6c 1b       	sub	r22, r28
    4070:	7d 0b       	sbc	r23, r29
    4072:	82 0b       	sbc	r24, r18
    4074:	93 0b       	sbc	r25, r19
    4076:	9e 01       	movw	r18, r28
    4078:	eb 01       	movw	r28, r22
    407a:	fc 01       	movw	r30, r24
    407c:	0e 94 4a 26 	call	0x4c94	; 0x4c94 <__muldi3_6>
    4080:	af 91       	pop	r26
    4082:	bf 91       	pop	r27
    4084:	2f 91       	pop	r18
    4086:	3f 91       	pop	r19
    4088:	0e 94 4a 26 	call	0x4c94	; 0x4c94 <__muldi3_6>
    408c:	be 01       	movw	r22, r28
    408e:	cf 01       	movw	r24, r30
    4090:	f9 01       	movw	r30, r18
    4092:	2f 91       	pop	r18
    4094:	3f 91       	pop	r19
    4096:	cf 91       	pop	r28
    4098:	df 91       	pop	r29
    409a:	08 95       	ret

Disassembly of section .text.libgcc.div:

00003e2a <__moddi3>:
    3e2a:	68 94       	set
    3e2c:	01 c0       	rjmp	.+2      	; 0x3e30 <__divdi3_moddi3>

00003e2e <__divdi3>:
    3e2e:	e8 94       	clt

00003e30 <__divdi3_moddi3>:
    3e30:	f9 2f       	mov	r31, r25
    3e32:	f1 2b       	or	r31, r17
    3e34:	12 f0       	brmi	.+4      	; 0x3e3a <__divdi3_moddi3+0xa>
    3e36:	0c 94 b1 25 	jmp	0x4b62	; 0x4b62 <__udivdi3_umoddi3>
    3e3a:	a0 e0       	ldi	r26, 0x00	; 0
    3e3c:	b0 e0       	ldi	r27, 0x00	; 0
    3e3e:	e3 e2       	ldi	r30, 0x23	; 35
    3e40:	ff e1       	ldi	r31, 0x1F	; 31
    3e42:	0c 94 2b 22 	jmp	0x4456	; 0x4456 <__prologue_saves__+0xc>
    3e46:	09 2e       	mov	r0, r25
    3e48:	05 94       	asr	r0
    3e4a:	22 f4       	brpl	.+8      	; 0x3e54 <__divdi3_moddi3+0x24>
    3e4c:	0e 94 80 25 	call	0x4b00	; 0x4b00 <__negdi2>
    3e50:	11 23       	and	r17, r17
    3e52:	92 f4       	brpl	.+36     	; 0x3e78 <__divdi3_moddi3+0x48>
    3e54:	f0 e8       	ldi	r31, 0x80	; 128
    3e56:	0f 26       	eor	r0, r31
    3e58:	ff ef       	ldi	r31, 0xFF	; 255
    3e5a:	e0 94       	com	r14
    3e5c:	f0 94       	com	r15
    3e5e:	00 95       	com	r16
    3e60:	10 95       	com	r17
    3e62:	b0 94       	com	r11
    3e64:	c0 94       	com	r12
    3e66:	d0 94       	com	r13
    3e68:	a1 94       	neg	r10
    3e6a:	bf 0a       	sbc	r11, r31
    3e6c:	cf 0a       	sbc	r12, r31
    3e6e:	df 0a       	sbc	r13, r31
    3e70:	ef 0a       	sbc	r14, r31
    3e72:	ff 0a       	sbc	r15, r31
    3e74:	0f 0b       	sbc	r16, r31
    3e76:	1f 0b       	sbc	r17, r31
    3e78:	0e 94 92 19 	call	0x3324	; 0x3324 <__udivmod64>
    3e7c:	07 fc       	sbrc	r0, 7
    3e7e:	0e 94 80 25 	call	0x4b00	; 0x4b00 <__negdi2>
    3e82:	cd b7       	in	r28, 0x3d	; 61
    3e84:	de b7       	in	r29, 0x3e	; 62
    3e86:	ec e0       	ldi	r30, 0x0C	; 12
    3e88:	0c 94 47 22 	jmp	0x448e	; 0x448e <__epilogue_restores__+0xc>

Disassembly of section .text.libgcc.div:

00004b5c <__umoddi3>:
    4b5c:	68 94       	set
    4b5e:	01 c0       	rjmp	.+2      	; 0x4b62 <__udivdi3_umoddi3>

00004b60 <__udivdi3>:
    4b60:	e8 94       	clt

00004b62 <__udivdi3_umoddi3>:
    4b62:	8f 92       	push	r8
    4b64:	9f 92       	push	r9
    4b66:	cf 93       	push	r28
    4b68:	df 93       	push	r29
    4b6a:	0e 94 92 19 	call	0x3324	; 0x3324 <__udivmod64>
    4b6e:	df 91       	pop	r29
    4b70:	cf 91       	pop	r28
    4b72:	9f 90       	pop	r9
    4b74:	8f 90       	pop	r8
    4b76:	08 95       	ret

Disassembly of section .text.libgcc.div:

00003324 <__udivmod64>:
    3324:	88 24       	eor	r8, r8
    3326:	99 24       	eor	r9, r9
    3328:	f4 01       	movw	r30, r8
    332a:	e4 01       	movw	r28, r8
    332c:	b0 e4       	ldi	r27, 0x40	; 64
    332e:	9f 93       	push	r25
    3330:	aa 27       	eor	r26, r26
    3332:	9a 15       	cp	r25, r10
    3334:	8b 04       	cpc	r8, r11
    3336:	9c 04       	cpc	r9, r12
    3338:	ed 05       	cpc	r30, r13
    333a:	fe 05       	cpc	r31, r14
    333c:	cf 05       	cpc	r28, r15
    333e:	d0 07       	cpc	r29, r16
    3340:	a1 07       	cpc	r26, r17
    3342:	98 f4       	brcc	.+38     	; 0x336a <__udivmod64+0x46>
    3344:	ad 2f       	mov	r26, r29
    3346:	dc 2f       	mov	r29, r28
    3348:	cf 2f       	mov	r28, r31
    334a:	fe 2f       	mov	r31, r30
    334c:	e9 2d       	mov	r30, r9
    334e:	98 2c       	mov	r9, r8
    3350:	89 2e       	mov	r8, r25
    3352:	98 2f       	mov	r25, r24
    3354:	87 2f       	mov	r24, r23
    3356:	76 2f       	mov	r23, r22
    3358:	65 2f       	mov	r22, r21
    335a:	54 2f       	mov	r21, r20
    335c:	43 2f       	mov	r20, r19
    335e:	32 2f       	mov	r19, r18
    3360:	22 27       	eor	r18, r18
    3362:	b8 50       	subi	r27, 0x08	; 8
    3364:	31 f7       	brne	.-52     	; 0x3332 <__udivmod64+0xe>
    3366:	bf 91       	pop	r27
    3368:	27 c0       	rjmp	.+78     	; 0x33b8 <__udivmod64+0x94>
    336a:	1b 2e       	mov	r1, r27
    336c:	bf 91       	pop	r27
    336e:	bb 27       	eor	r27, r27
    3370:	22 0f       	add	r18, r18
    3372:	33 1f       	adc	r19, r19
    3374:	44 1f       	adc	r20, r20
    3376:	55 1f       	adc	r21, r21
    3378:	66 1f       	adc	r22, r22
    337a:	77 1f       	adc	r23, r23
    337c:	88 1f       	adc	r24, r24
    337e:	99 1f       	adc	r25, r25
    3380:	88 1c       	adc	r8, r8
    3382:	99 1c       	adc	r9, r9
    3384:	ee 1f       	adc	r30, r30
    3386:	ff 1f       	adc	r31, r31
    3388:	cc 1f       	adc	r28, r28
    338a:	dd 1f       	adc	r29, r29
    338c:	aa 1f       	adc	r26, r26
    338e:	bb 1f       	adc	r27, r27
    3390:	8a 14       	cp	r8, r10
    3392:	9b 04       	cpc	r9, r11
    3394:	ec 05       	cpc	r30, r12
    3396:	fd 05       	cpc	r31, r13
    3398:	ce 05       	cpc	r28, r14
    339a:	df 05       	cpc	r29, r15
    339c:	a0 07       	cpc	r26, r16
    339e:	b1 07       	cpc	r27, r17
    33a0:	48 f0       	brcs	.+18     	; 0x33b4 <__udivmod64+0x90>
    33a2:	8a 18       	sub	r8, r10
    33a4:	9b 08       	sbc	r9, r11
    33a6:	ec 09       	sbc	r30, r12
    33a8:	fd 09       	sbc	r31, r13
    33aa:	ce 09       	sbc	r28, r14
    33ac:	df 09       	sbc	r29, r15
    33ae:	a0 0b       	sbc	r26, r16
    33b0:	b1 0b       	sbc	r27, r17
    33b2:	21 60       	ori	r18, 0x01	; 1
    33b4:	1a 94       	dec	r1
    33b6:	e1 f6       	brne	.-72     	; 0x3370 <__udivmod64+0x4c>
    33b8:	2e f4       	brtc	.+10     	; 0x33c4 <__udivmod64+0xa0>
    33ba:	94 01       	movw	r18, r8
    33bc:	af 01       	movw	r20, r30
    33be:	be 01       	movw	r22, r28
    33c0:	cd 01       	movw	r24, r26
    33c2:	00 0c       	add	r0, r0
    33c4:	08 95       	ret

Disassembly of section .text.libgcc:

00004b00 <__negdi2>:
    4b00:	60 95       	com	r22
    4b02:	70 95       	com	r23
    4b04:	80 95       	com	r24
    4b06:	90 95       	com	r25
    4b08:	30 95       	com	r19
    4b0a:	40 95       	com	r20
    4b0c:	50 95       	com	r21
    4b0e:	21 95       	neg	r18
    4b10:	3f 4f       	sbci	r19, 0xFF	; 255
    4b12:	4f 4f       	sbci	r20, 0xFF	; 255
    4b14:	5f 4f       	sbci	r21, 0xFF	; 255
    4b16:	6f 4f       	sbci	r22, 0xFF	; 255
    4b18:	7f 4f       	sbci	r23, 0xFF	; 255
    4b1a:	8f 4f       	sbci	r24, 0xFF	; 255
    4b1c:	9f 4f       	sbci	r25, 0xFF	; 255
    4b1e:	08 95       	ret

Disassembly of section .text.libgcc.prologue:

0000444a <__prologue_saves__>:
    444a:	2f 92       	push	r2
    444c:	3f 92       	push	r3
    444e:	4f 92       	push	r4
    4450:	5f 92       	push	r5
    4452:	6f 92       	push	r6
    4454:	7f 92       	push	r7
    4456:	8f 92       	push	r8
    4458:	9f 92       	push	r9
    445a:	af 92       	push	r10
    445c:	bf 92       	push	r11
    445e:	cf 92       	push	r12
    4460:	df 92       	push	r13
    4462:	ef 92       	push	r14
    4464:	ff 92       	push	r15
    4466:	0f 93       	push	r16
    4468:	1f 93       	push	r17
    446a:	cf 93       	push	r28
    446c:	df 93       	push	r29
    446e:	cd b7       	in	r28, 0x3d	; 61
    4470:	de b7       	in	r29, 0x3e	; 62
    4472:	ca 1b       	sub	r28, r26
    4474:	db 0b       	sbc	r29, r27
    4476:	0f b6       	in	r0, 0x3f	; 63
    4478:	f8 94       	cli
    447a:	de bf       	out	0x3e, r29	; 62
    447c:	0f be       	out	0x3f, r0	; 63
    447e:	cd bf       	out	0x3d, r28	; 61
    4480:	09 94       	ijmp

Disassembly of section .text.libgcc.prologue:

00004482 <__epilogue_restores__>:
    4482:	2a 88       	ldd	r2, Y+18	; 0x12
    4484:	39 88       	ldd	r3, Y+17	; 0x11
    4486:	48 88       	ldd	r4, Y+16	; 0x10
    4488:	5f 84       	ldd	r5, Y+15	; 0x0f
    448a:	6e 84       	ldd	r6, Y+14	; 0x0e
    448c:	7d 84       	ldd	r7, Y+13	; 0x0d
    448e:	8c 84       	ldd	r8, Y+12	; 0x0c
    4490:	9b 84       	ldd	r9, Y+11	; 0x0b
    4492:	aa 84       	ldd	r10, Y+10	; 0x0a
    4494:	b9 84       	ldd	r11, Y+9	; 0x09
    4496:	c8 84       	ldd	r12, Y+8	; 0x08
    4498:	df 80       	ldd	r13, Y+7	; 0x07
    449a:	ee 80       	ldd	r14, Y+6	; 0x06
    449c:	fd 80       	ldd	r15, Y+5	; 0x05
    449e:	0c 81       	ldd	r16, Y+4	; 0x04
    44a0:	1b 81       	ldd	r17, Y+3	; 0x03
    44a2:	aa 81       	ldd	r26, Y+2	; 0x02
    44a4:	b9 81       	ldd	r27, Y+1	; 0x01
    44a6:	ce 0f       	add	r28, r30
    44a8:	d1 1d       	adc	r29, r1
    44aa:	0f b6       	in	r0, 0x3f	; 63
    44ac:	f8 94       	cli
    44ae:	de bf       	out	0x3e, r29	; 62
    44b0:	0f be       	out	0x3f, r0	; 63
    44b2:	cd bf       	out	0x3d, r28	; 61
    44b4:	ed 01       	movw	r28, r26
    44b6:	08 95       	ret

Disassembly of section .text.libgcc:

00004ca6 <__adddi3>:
    4ca6:	2a 0d       	add	r18, r10
    4ca8:	3b 1d       	adc	r19, r11
    4caa:	4c 1d       	adc	r20, r12
    4cac:	5d 1d       	adc	r21, r13
    4cae:	6e 1d       	adc	r22, r14
    4cb0:	7f 1d       	adc	r23, r15
    4cb2:	80 1f       	adc	r24, r16
    4cb4:	91 1f       	adc	r25, r17
    4cb6:	08 95       	ret

Disassembly of section .text.libgcc:

00004cb8 <__cmpdi2>:
    4cb8:	2a 15       	cp	r18, r10
    4cba:	3b 05       	cpc	r19, r11
    4cbc:	4c 05       	cpc	r20, r12
    4cbe:	5d 05       	cpc	r21, r13
    4cc0:	6e 05       	cpc	r22, r14
    4cc2:	7f 05       	cpc	r23, r15
    4cc4:	80 07       	cpc	r24, r16
    4cc6:	91 07       	cpc	r25, r17
    4cc8:	08 95       	ret
