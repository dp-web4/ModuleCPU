
ModuleCPU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00004bf4  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00004bf4  2**0
                  ALLOC
  3 .noinit       00000226  00800102  00800102  00004bf4  2**2
                  ALLOC
  4 .comment      0000002f  00000000  00000000  00004bf4  2**0
                  CONTENTS, READONLY
  5 .stack.descriptors.hdr 00000142  00000000  00000000  00004c23  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000508  00000000  00000000  00004d65  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00008d27  00000000  00000000  0000526d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001aa4  00000000  00000000  0000df94  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003681  00000000  00000000  0000fa38  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000011f4  00000000  00000000  000130bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000700  00000000  00000000  000142b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00004483  00000000  00000000  000149b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000004d0  00000000  00000000  00018e33  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .text         00000004  00004b50  00004b50  00004be4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00019304  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .text.__vector_27 000000bc  00002e38  00002e38  00002ecc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.ADCSetPowerOn 0000000c  00004afe  00004afe  00004b92  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.ADCStartConversion 0000002a  0000449c  0000449c  00004530  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .progmemx.data 0000000b  000001ee  000001ee  00000282  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 20 .text.ADCInit 0000013c  00002052  00002052  000020e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .progmemx.data.sg_sMuxSelectList 0000000f  000001c7  000001c7  0000025b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 22 .bss.sg_eCurrentType 00000001  0080074b  0080074b  00004bf4  2**0
                  ALLOC
 23 .bss.sg_eState 00000001  0080075e  0080075e  00004bf4  2**0
                  ALLOC
 24 .text.CANLookupCommand 00000062  00003bb0  00003bb0  00003c44  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .progmemx.data 0000000b  000001f9  000001f9  0000028d  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 26 .text.CANMOBSet 00000212  00001432  00001432  000014c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.CANSendMessageInternal 00000178  00001d74  00001d74  00001e08  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.CANMOBInterrupt 00000192  00001be2  00001be2  00001c76  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.__vector_18 00000118  000022c2  000022c2  00002356  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.CANSendMessage 00000016  000049a6  000049a6  00004a3a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.CANSetRXCallback 0000000a  00004b22  00004b22  00004bb6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.CANInit 0000009c  0000324e  0000324e  000032e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .progmemx.data.sg_sRXCommandList 0000001e  00000185  00000185  00000219  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 34 .progmemx.data.sg_sMOBModuleRequestTime 00000008  00000204  00000204  00000298  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 35 .progmemx.data.sg_sMOBModuleHardwareDetail 00000008  0000020c  0000020c  000002a0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 36 .progmemx.data.sg_sMOBModuleCellDetail 00000008  00000214  00000214  000002a8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 37 .progmemx.data.sg_sMOBModuleCellCommStat2 00000008  0000021c  0000021c  000002b0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 38 .progmemx.data.sg_sMOBModuleCellCommStat1 00000008  00000224  00000224  000002b8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 39 .progmemx.data.sg_sMOBModuleStatus3 00000008  0000022c  0000022c  000002c0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 40 .progmemx.data.sg_sMOBModuleStatus2 00000008  00000234  00000234  000002c8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 41 .progmemx.data.sg_sMOBModuleStatus1 00000008  0000023c  0000023c  000002d0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 42 .progmemx.data.sg_sMOBModuleAnnouncement 00000008  00000244  00000244  000002d8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 43 .progmemx.data.sg_sMOBGenericReceive 00000008  0000024c  0000024c  000002e0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 44 .progmemx.data.sg_sMOBDisabled 00000008  00000254  00000254  000002e8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 45 .bss.sg_bInRetransmit 00000001  0080075f  0080075f  00004bf4  2**0
                  ALLOC
 46 .bss.sg_u8LastTXDataLen 00000001  00800760  00800760  00004bf4  2**0
                  ALLOC
 47 .bss.sg_u8LastTXData 00000008  00800739  00800739  00004bf4  2**0
                  ALLOC
 48 .bss.sg_eLastTXType 00000001  00800761  00800761  00004bf4  2**0
                  ALLOC
 49 .bss.sg_u8TransmitAttempts 00000001  00800762  00800762  00004bf4  2**0
                  ALLOC
 50 .bss.sg_pfRXCallback 00000002  00800749  00800749  00004bf4  2**0
                  ALLOC
 51 .bss.sg_bBusy 00000001  00800763  00800763  00004bf4  2**0
                  ALLOC
 52 .text.DebugOut 0000000e  00004ac6  00004ac6  00004b5a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 53 .text.EEPROMRead 00000012  00004a3c  00004a3c  00004ad0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 .text.I2CBitDelay 0000000e  00004ad4  00004ad4  00004b68  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.I2CStart 0000002c  000043c0  000043c0  00004454  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.I2CStop 00000026  0000458e  0000458e  00004622  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .text.I2CUnstick 0000003c  000040d8  000040d8  0000416c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .text.I2CTxByte 0000006a  00003a76  00003a76  00003b0a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 .text.I2CRxByte 0000007a  0000389c  0000389c  00003930  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 60 .text.I2CSetup 0000002c  000043ec  000043ec  00004480  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 61 .text.I2CStartTransaction 00000028  000044c6  000044c6  0000455a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 62 .text.CellCountExpectedSet 000000c4  00002cb2  00002cb2  00002d46  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 63 .text.SendModuleControllerStatus 0000000c  00004b0a  00004b0a  00004b9e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 64 .text.ModuleControllerStateSet 0000000a  00004b2c  00004b2c  00004bc0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .text.ModuleControllerStateSetMax 00000016  000049bc  000049bc  00004a50  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 66 .text.Check5VLoss 00000018  0000495e  0000495e  000049f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 67 .text.CellDataConvertVoltage 00000062  00003c12  00003c12  00003ca6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 68 .text.CellDataConvertTemperature 0000007a  00003916  00003916  000039aa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 69 .text.CellDataConvert 00000028  000044ee  000044ee  00004582  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 70 .text.ModuleCurrentConvertReadings 00000104  000023da  000023da  0000246e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 71 .text.__vector_1 00000024  000045da  000045da  0000466e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 72 .text.__vector_2 00000024  000045fe  000045fe  00004692  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 73 .text.__vector_3 00000024  00004622  00004622  000046b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 74 .text.__vector_4 00000024  00004646  00004646  000046da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 75 .text.__vector_5 00000024  0000466a  0000466a  000046fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 76 .text.__vector_6 00000024  0000468e  0000468e  00004722  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 77 .text.__vector_22 00000024  000046b2  000046b2  00004746  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 78 .text.__vector_9 00000024  000046d6  000046d6  0000476a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 79 .text.__vector_11 00000024  000046fa  000046fa  0000478e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 80 .text.__vector_13 00000024  0000471e  0000471e  000047b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 81 .text.__vector_14 00000024  00004742  00004742  000047d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 82 .text.__vector_17 00000024  00004766  00004766  000047fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 83 .text.__vector_19 00000024  0000478a  0000478a  0000481e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 84 .text.__vector_21 00000024  000047ae  000047ae  00004842  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 85 .text.__vector_25 00000024  000047d2  000047d2  00004866  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 86 .text.__vector_26 00000024  000047f6  000047f6  0000488a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 87 .text.__vector_29 00000024  0000481a  0000481a  000048ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 88 .text.__vector_30 00000024  0000483e  0000483e  000048d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 89 .text.CurrentThresholdsGet 00000094  000032ea  000032ea  0000337e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 90 .text.ControllerStatusMessagesSend 000003dc  000006bc  000006bc  00000750  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 91 .text.CellStringProcess 000002a6  00000a98  00000a98  00000b2c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 92 .text.Delay   00000052  00003e84  00003e84  00003f18  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 93 .progmemx.data 00000051  000000da  000000da  0000016e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 94 .text.CANReceiveCallback 000001ea  0000183a  0000183a  000018ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 95 .text.PlatformAssert 0000002c  00004418  00004418  000044ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 96 .text.ModuleControllerStateHandle 000001f6  00001644  00001644  000016d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 97 .text.PlatformGetRegistrationID 00000006  00004b4a  00004b4a  00004bde  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 98 .text.SetSysclock 0000000c  00004b16  00004b16  00004baa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 99 .text.ModuleControllerGetUniqueID 0000007e  000036a8  000036a8  0000373c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
100 .text.TimerInit 00000052  00003ed6  00003ed6  00003f6a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
101 .text.__vector_12 000000ba  00002ef4  00002ef4  00002f88  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
102 .text.WatchdogReset 00000002  00004b58  00004b58  00004bec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
103 .text.WatchdogOff 0000001a  00004944  00004944  000049d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
104 .text.__vector_28 00000052  00003f28  00003f28  00003fbc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
105 .text.__vector_23 0000008a  0000337e  0000337e  00003412  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
106 .text.__vector_24 0000004c  00003f7a  00003f7a  0000400e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
107 .text.vUARTRXStart 00000016  000049d2  000049d2  00004a66  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
108 .text.vUARTRXEnd 00000024  00004862  00004862  000048f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
109 .text.vUARTRXData 0000007a  00003990  00003990  00003a24  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
110 .text.PlatformGetSendData 00000028  00004516  00004516  000045aa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
111 .text.ADCCallback 00000026  000045b4  000045b4  00004648  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
112 .text.FrameInit 000000b4  00002fae  00002fae  00003042  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
113 .text.CellStringPowerStateMachine 00000088  00003492  00003492  00003526  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
114 .text.main    0000027c  00000d3e  00000d3e  00000dd2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
115 .bss.sg_u8PCMSK1 00000001  00800764  00800764  00004bf4  2**0
                  ALLOC
116 .bss.sg_u8PCMSK0 00000001  00800765  00800765  00004bf4  2**0
                  ALLOC
117 .bss.sg_u8UnhandledInterruptVector 00000001  00800766  00800766  00004bf4  2**0
                  ALLOC
118 .bss.sg_u8Reason 00000001  00800767  00800767  00004bf4  2**0
                  ALLOC
119 .progmemx.data.sg_u8FractionalLookup 00000010  000001b7  000001b7  0000024b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
120 .bss.sg_eStringPowerState 00000001  00800768  00800768  00004bf4  2**0
                  ALLOC
121 .bss.sg_u8ControllerStatusMsgCount 00000001  00800769  00800769  00004bf4  2**0
                  ALLOC
122 .bss.sg_u8CellReports 00000001  0080076a  0080076a  00004bf4  2**0
                  ALLOC
123 .bss.sg_u16BytesReceived 00000002  00800758  00800758  00004bf4  2**0
                  ALLOC
124 .bss.sg_u8CellBufferTemp 00000004  0080074c  0080074c  00004bf4  2**2
                  ALLOC
125 .bss.sg_u8CellBufferRX 00000001  0080076b  0080076b  00004bf4  2**0
                  ALLOC
126 .bss.sg_u8CellIndex 00000001  0080076c  0080076c  00004bf4  2**0
                  ALLOC
127 .bss.sg_u8TicksSinceLastPackControllerMessage 00000001  0080076d  0080076d  00004bf4  2**0
                  ALLOC
128 .bss.sg_u8CellStringPowerTimer 00000001  0080076e  0080076e  00004bf4  2**0
                  ALLOC
129 .bss.sg_bFrameStart 00000001  0080076f  0080076f  00004bf4  2**0
                  ALLOC
130 .bss.sg_u8CellFrameTimer 00000001  00800770  00800770  00004bf4  2**0
                  ALLOC
131 .bss.sg_u8CurrentBufferIndex 00000001  00800771  00800771  00004bf4  2**0
                  ALLOC
132 .bss.sg_sCurrenBuffer 00000010  00800719  00800719  00004bf4  2**0
                  ALLOC
133 .text.IsLeapYear 00000034  00004230  00004230  000042c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
134 .text.RTCStartTransaction 00000044  00004012  00004012  000040a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
135 .text.StructTMToHW 00000054  00003e30  00003e30  00003ec4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
136 .text.HWToStructTM 0000007c  000037a4  000037a4  00003838  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
137 .text.__vector_10 00000086  0000351a  0000351a  000035ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
138 .progmemx.data 00000014  000001a3  000001a3  00000237  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
139 .text.RTCReadRegisters 0000007e  00003726  00003726  000037ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
140 .text.RTCReadHW 000000e2  000026d2  000026d2  00002766  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
141 .text.RTCWriteRegisters 0000006a  00003ae0  00003ae0  00003b74  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
142 .text.RTCWriteHW 000000fe  000024de  000024de  00002572  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
143 .text.RTCSetTime 000000c6  00002bec  00002bec  00002c80  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
144 .text.RTCInit 00000222  00001210  00001210  000012a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
145 .progmemx.data.sg_u8DaysInMonths 0000000c  000001d6  000001d6  0000026a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
146 .bss.sg_u64Time 00000008  00800741  00800741  00004bf4  2**0
                  ALLOC
147 .text.SDSetCS 00000014  00004a14  00004a14  00004aa8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
148 .text.SDPowerup 0000003a  00004150  00004150  000041e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
149 .text.SDCommand 000000aa  00003062  00003062  000030f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
150 .text.SDGoIdle 00000022  000048aa  000048aa  0000493e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
151 .text.SDSendOpCondition 00000034  00004264  00004264  000042f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
152 .text.SDSendOpConditionArg 00000056  00003d2e  00003d2e  00003dc2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
153 .text.SDWaitResponse7 0000000e  00004ae2  00004ae2  00004b76  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
154 .text.SDSendInterfaceCondition 00000034  00004298  00004298  0000432c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
155 .text.SDReadOCR 00000032  000042cc  000042cc  00004360  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
156 .text.SDReadCSD 0000007c  00003820  00003820  000038b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
157 .text.SDReceiveDataBlock 0000008a  00003408  00003408  0000349c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
158 .text.SDTransmitDataBlock 000000c2  00002d76  00002d76  00002e0a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
159 .text.SDInit  00000166  00001eec  00001eec  00001f80  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
160 .text.SDRead  000000d8  00002a4a  00002a4a  00002ade  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
161 .text.SDWrite 000000dc  00002892  00002892  00002926  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
162 .bss.sg_u8CSD 00000010  00800729  00800729  00004bf4  2**0
                  ALLOC
163 .bss.sg_u16BlockSize 00000002  0080075a  0080075a  00004bf4  2**0
                  ALLOC
164 .bss.sg_u32SDSectorCount 00000004  00800750  00800750  00004bf4  2**0
                  ALLOC
165 .text.SPITransaction 00000058  00003cd6  00003cd6  00003d6a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
166 .text.SPISetBaudRate 000000ca  00002b22  00002b22  00002bb6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
167 .text.SPIInit 0000002c  00004444  00004444  000044d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
168 .progmemx.data.sg_sSPIBaudRates 0000002a  0000015b  0000015b  000001ef  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
169 .text.readGlobalState 0000003e  0000409a  0000409a  0000412e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
170 .text.writeGlobalState 00000032  000042fe  000042fe  00004392  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
171 .text.updateSessionMap 000000dc  0000296e  0000296e  00002a02  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
172 .text.STORE_Init 00000082  00003626  00003626  000036ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
173 .text.STORE_WriteFrame 000000f6  000025dc  000025dc  00002670  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
174 .text.STORE_StartNewSession 00000038  0000418a  0000418a  0000421e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
175 .text.STORE_EndSession 0000002c  00004470  00004470  00004504  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
176 .bss.frameBuffer 00000200  00800328  00800328  00004bf4  2**2
                  ALLOC
177 .bss.currentSector 00000004  00800754  00800754  00004bf4  2**0
                  ALLOC
178 .bss.gState   000001d8  00800528  00800528  00004bf4  2**2
                  ALLOC
179 .text.vUARTtxDataAvailable 00000024  00004886  00004886  0000491a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
180 .text.vUARTtxDataGet 0000004c  00003fc6  00003fc6  0000405a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
181 .text.vUARTRXReset 0000000a  00004b36  00004b36  00004bca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
182 .text.vUARTStarttx 00000056  00003d84  00003d84  00003e18  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
183 .text.__vector_8 00000066  00003b4a  00003b4a  00003bde  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
184 .text.__vector_16 000000de  000027b4  000027b4  00002848  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
185 .text.__vector_15 00000134  0000218e  0000218e  00002222  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
186 .text.vUARTInit 00000030  00004362  00004362  000043f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
187 .text.vUARTInitReceive 00000014  00004a28  00004a28  00004abc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
188 .bss.sg_bState 00000001  00800772  00800772  00004bf4  2**0
                  ALLOC
189 .bss.sg_u8SendData 00000002  0080075c  0080075c  00004bf4  2**0
                  ALLOC
190 .bss.sg_u8SendIndex 00000001  00800773  00800773  00004bf4  2**0
                  ALLOC
191 .bss.sg_bMCTxNextBit 00000001  00800774  00800774  00004bf4  2**0
                  ALLOC
192 .bss.sg_bCellReportsReuested 00000001  00800775  00800775  00004bf4  2**0
                  ALLOC
193 .bss.sg_etxState 00000001  00800776  00800776  00004bf4  2**0
                  ALLOC
194 .bss.sg_btxMoreAvailable 00000001  00800777  00800777  00004bf4  2**0
                  ALLOC
195 .bss.sg_u8txDataByte 00000001  00800778  00800778  00004bf4  2**0
                  ALLOC
196 .bss.sg_u8txBitCount 00000001  00800779  00800779  00004bf4  2**0
                  ALLOC
197 .bss.sg_bCell_mc_rxMoreData 00000001  0080077a  0080077a  00004bf4  2**0
                  ALLOC
198 .bss.sg_bCell_mc_rxPriorState 00000001  0080077b  0080077b  00004bf4  2**0
                  ALLOC
199 .bss.sg_eCell_mc_rxState 00000001  0080077c  0080077c  00004bf4  2**0
                  ALLOC
200 .bss.sg_u8rxDataByte 00000001  0080077d  0080077d  00004bf4  2**0
                  ALLOC
201 .bss.sg_u8Cell_mc_rxBitCount 00000001  0080077e  0080077e  00004bf4  2**0
                  ALLOC
202 .text.libgcc.div 00000028  0000453e  0000453e  000045d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
203 .text.libgcc.div 00000044  00004056  00004056  000040ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
204 .text.libgcc.div 0000002e  00004392  00004392  00004426  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
205 .text.libgcc.div 00000010  00004a96  00004a96  00004b2a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
206 .text.libgcc.mul 0000001e  000048ec  000048ec  00004980  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
207 .text.libgcc.mul 0000000e  00004af0  00004af0  00004b84  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
208 .text.libgcc.mul 00000016  000049e8  000049e8  00004a7c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
209 .text.libgcc.mul 00000010  00004aa6  00004aa6  00004b3a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
210 .text.libgcc  00000010  00004ab6  00004ab6  00004b4a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
211 .text.libgcc  00000018  00004976  00004976  00004a0a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
212 .text.libgcc  00000018  0000498e  0000498e  00004a22  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
213 .text.__dummy_fini 00000002  00004b5a  00004b5a  00004bee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
214 .text.__dummy_funcs_on_exit 00000002  00004b5c  00004b5c  00004bf0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
215 .text.__dummy_simulator_exit 00000002  00004b5e  00004b5e  00004bf2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
216 .text.exit    00000016  000049fe  000049fe  00004a92  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
217 .text.memcpy  00000032  00004330  00004330  000043c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
218 .text.memset  00000012  00004a4e  00004a4e  00004ae2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
219 .text.gmtime  0000000a  00004b40  00004b40  00004bd4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
220 .bss.tm.1240  00000019  00800700  00800700  00004bf4  2**0
                  ALLOC
221 .progmemx.data 00000004  0000025c  0000025c  000002f0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
222 .text.__gmtime_r 0000006c  00003a0a  00003a0a  00003a9e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
223 .progmemx.data 00000004  00000260  00000260  000002f4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
224 .text.mktime  00000086  000035a0  000035a0  00003634  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
225 .text._Exit   00000004  00004b54  00004b54  00004be8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
226 .text.__tm_to_secs 000001be  00001a24  00001a24  00001ab8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
227 .text.__year_to_secs 00000256  00000fba  00000fba  0000104e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
228 .text.__month_to_secs 0000003c  00004114  00004114  000041a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
229 .progmemx.data.secs_through_month.1090 00000030  0000012b  0000012b  000001bf  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
230 .text.__secs_to_tm 00000458  00000264  00000264  000002f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
231 .progmemx.data.days_in_month.1250 0000000c  000001e2  000001e2  00000276  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
232 .text.libgcc.div 00000028  00004566  00004566  000045fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
233 .text.libgcc.mul 000000a0  000031ae  000031ae  00003242  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
234 .text.libgcc.mul 00000012  00004a60  00004a60  00004af4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
235 .text.libgcc.mul 0000001e  0000490a  0000490a  0000499e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
236 .text.libgcc.mul 00000056  00003dda  00003dda  00003e6e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
237 .text.libgcc.div 00000062  00003c74  00003c74  00003d08  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
238 .text.libgcc.div 0000001c  00004928  00004928  000049bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
239 .text.libgcc.div 000000a2  0000310c  0000310c  000031a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
240 .text.libgcc  00000020  000048cc  000048cc  00004960  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
241 .text.libgcc.prologue 00000038  000041c2  000041c2  00004256  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
242 .text.libgcc.prologue 00000036  000041fa  000041fa  0000428e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
243 .text.libgcc  00000012  00004a72  00004a72  00004b06  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
244 .text.libgcc  00000012  00004a84  00004a84  00004b18  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 43 00 	jmp	0x86	; 0x86 <__ctors_end>
   4:	0c 94 ed 22 	jmp	0x45da	; 0x45da <__vector_1>
   8:	0c 94 ff 22 	jmp	0x45fe	; 0x45fe <__vector_2>
   c:	0c 94 11 23 	jmp	0x4622	; 0x4622 <__vector_3>
  10:	0c 94 23 23 	jmp	0x4646	; 0x4646 <__vector_4>
  14:	0c 94 35 23 	jmp	0x466a	; 0x466a <__vector_5>
  18:	0c 94 47 23 	jmp	0x468e	; 0x468e <__vector_6>
  1c:	0c 94 a8 25 	jmp	0x4b50	; 0x4b50 <__bad_interrupt>
  20:	0c 94 a5 1d 	jmp	0x3b4a	; 0x3b4a <__vector_8>
  24:	0c 94 6b 23 	jmp	0x46d6	; 0x46d6 <__vector_9>
  28:	0c 94 8d 1a 	jmp	0x351a	; 0x351a <__vector_10>
  2c:	0c 94 7d 23 	jmp	0x46fa	; 0x46fa <__vector_11>
  30:	0c 94 7a 17 	jmp	0x2ef4	; 0x2ef4 <__vector_12>
  34:	0c 94 8f 23 	jmp	0x471e	; 0x471e <__vector_13>
  38:	0c 94 a1 23 	jmp	0x4742	; 0x4742 <__vector_14>
  3c:	0c 94 c7 10 	jmp	0x218e	; 0x218e <__vector_15>
  40:	0c 94 da 13 	jmp	0x27b4	; 0x27b4 <__vector_16>
  44:	0c 94 b3 23 	jmp	0x4766	; 0x4766 <__vector_17>
  48:	0c 94 61 11 	jmp	0x22c2	; 0x22c2 <__vector_18>
  4c:	0c 94 c5 23 	jmp	0x478a	; 0x478a <__vector_19>
  50:	0c 94 a8 25 	jmp	0x4b50	; 0x4b50 <__bad_interrupt>
  54:	0c 94 d7 23 	jmp	0x47ae	; 0x47ae <__vector_21>
  58:	0c 94 59 23 	jmp	0x46b2	; 0x46b2 <__vector_22>
  5c:	0c 94 bf 19 	jmp	0x337e	; 0x337e <__vector_23>
  60:	0c 94 bd 1f 	jmp	0x3f7a	; 0x3f7a <__vector_24>
  64:	0c 94 e9 23 	jmp	0x47d2	; 0x47d2 <__vector_25>
  68:	0c 94 fb 23 	jmp	0x47f6	; 0x47f6 <__vector_26>
  6c:	0c 94 1c 17 	jmp	0x2e38	; 0x2e38 <__vector_27>
  70:	0c 94 94 1f 	jmp	0x3f28	; 0x3f28 <__vector_28>
  74:	0c 94 0d 24 	jmp	0x481a	; 0x481a <__vector_29>
  78:	0c 94 1f 24 	jmp	0x483e	; 0x483e <__vector_30>

0000007c <.dinit>:
  7c:	01 00       	.word	0x0001	; ????
  7e:	01 02       	muls	r16, r17
  80:	80 01       	movw	r16, r0
  82:	04 07       	cpc	r16, r20
  84:	7f 80       	ldd	r7, Y+7	; 0x07

00000086 <__ctors_end>:
  86:	11 24       	eor	r1, r1
  88:	1f be       	out	0x3f, r1	; 63
  8a:	cf ef       	ldi	r28, 0xFF	; 255
  8c:	d0 e1       	ldi	r29, 0x10	; 16
  8e:	de bf       	out	0x3e, r29	; 62
  90:	cd bf       	out	0x3d, r28	; 61

00000092 <__do_copy_data>:
  92:	ec e7       	ldi	r30, 0x7C	; 124
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	40 e0       	ldi	r20, 0x00	; 0
  98:	17 c0       	rjmp	.+46     	; 0xc8 <__do_clear_bss+0x8>
  9a:	b5 91       	lpm	r27, Z+
  9c:	a5 91       	lpm	r26, Z+
  9e:	35 91       	lpm	r19, Z+
  a0:	25 91       	lpm	r18, Z+
  a2:	05 91       	lpm	r16, Z+
  a4:	07 fd       	sbrc	r16, 7
  a6:	0c c0       	rjmp	.+24     	; 0xc0 <__do_clear_bss>
  a8:	95 91       	lpm	r25, Z+
  aa:	85 91       	lpm	r24, Z+
  ac:	ef 01       	movw	r28, r30
  ae:	f9 2f       	mov	r31, r25
  b0:	e8 2f       	mov	r30, r24
  b2:	05 90       	lpm	r0, Z+
  b4:	0d 92       	st	X+, r0
  b6:	a2 17       	cp	r26, r18
  b8:	b3 07       	cpc	r27, r19
  ba:	d9 f7       	brne	.-10     	; 0xb2 <__do_copy_data+0x20>
  bc:	fe 01       	movw	r30, r28
  be:	04 c0       	rjmp	.+8      	; 0xc8 <__do_clear_bss+0x8>

000000c0 <__do_clear_bss>:
  c0:	1d 92       	st	X+, r1
  c2:	a2 17       	cp	r26, r18
  c4:	b3 07       	cpc	r27, r19
  c6:	e1 f7       	brne	.-8      	; 0xc0 <__do_clear_bss>
  c8:	e6 38       	cpi	r30, 0x86	; 134
  ca:	f4 07       	cpc	r31, r20
  cc:	31 f7       	brne	.-52     	; 0x9a <__do_copy_data+0x8>
  ce:	0e 94 9f 06 	call	0xd3e	; 0xd3e <main>
  d2:	0c 94 ff 24 	jmp	0x49fe	; 0x49fe <exit>

000000d6 <_exit>:
  d6:	f8 94       	cli

000000d8 <__stop_program>:
  d8:	ff cf       	rjmp	.-2      	; 0xd8 <__stop_program>

Disassembly of section .text:

00004b50 <__bad_interrupt>:
    4b50:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.__vector_27:

00002e38 <__vector_27>:

	// Disable the conversion complete interrupt
	ADCSRA &= (uint8_t)~(1 << ADIE);

	// Clear any pending interrupt	
	ADCSRA |= (1 << ADIF);
    2e38:	78 94       	sei
    2e3a:	1f 92       	push	r1
    2e3c:	0f 92       	push	r0
    2e3e:	0f b6       	in	r0, 0x3f	; 63
    2e40:	0f 92       	push	r0
    2e42:	11 24       	eor	r1, r1
    2e44:	2f 93       	push	r18
    2e46:	3f 93       	push	r19
    2e48:	4f 93       	push	r20
    2e4a:	5f 93       	push	r21
    2e4c:	6f 93       	push	r22
    2e4e:	7f 93       	push	r23
    2e50:	8f 93       	push	r24
    2e52:	9f 93       	push	r25
    2e54:	af 93       	push	r26
    2e56:	bf 93       	push	r27
    2e58:	ef 93       	push	r30
    2e5a:	ff 93       	push	r31
    2e5c:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f0078>
    2e60:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f0079>
    2e64:	80 91 4b 07 	lds	r24, 0x074B	; 0x80074b <sg_eCurrentType>
    2e68:	91 e0       	ldi	r25, 0x01	; 1
    2e6a:	98 0f       	add	r25, r24
    2e6c:	90 93 4b 07 	sts	0x074B, r25	; 0x80074b <sg_eCurrentType>
    2e70:	95 30       	cpi	r25, 0x05	; 5
    2e72:	10 f0       	brcs	.+4      	; 0x2e78 <__vector_27+0x40>
    2e74:	10 92 4b 07 	sts	0x074B, r1	; 0x80074b <sg_eCurrentType>
    2e78:	ac e7       	ldi	r26, 0x7C	; 124
    2e7a:	b0 e0       	ldi	r27, 0x00	; 0
    2e7c:	5c 91       	ld	r21, X
    2e7e:	20 91 4b 07 	lds	r18, 0x074B	; 0x80074b <sg_eCurrentType>
    2e82:	30 e0       	ldi	r19, 0x00	; 0
    2e84:	f9 01       	movw	r30, r18
    2e86:	ee 0f       	add	r30, r30
    2e88:	ff 1f       	adc	r31, r31
    2e8a:	2e 0f       	add	r18, r30
    2e8c:	3f 1f       	adc	r19, r31
    2e8e:	03 2e       	mov	r0, r19
    2e90:	00 0c       	add	r0, r0
    2e92:	44 0b       	sbc	r20, r20
    2e94:	29 53       	subi	r18, 0x39	; 57
    2e96:	3e 4f       	sbci	r19, 0xFE	; 254
    2e98:	4f 4f       	sbci	r20, 0xFF	; 255
    2e9a:	f9 01       	movw	r30, r18
    2e9c:	94 91       	lpm	r25, Z
    2e9e:	47 fd       	sbrc	r20, 7
    2ea0:	90 81       	ld	r25, Z
    2ea2:	50 7e       	andi	r21, 0xE0	; 224
    2ea4:	95 2b       	or	r25, r21
    2ea6:	90 6c       	ori	r25, 0xC0	; 192
    2ea8:	9c 93       	st	X, r25
    2eaa:	0e 94 da 22 	call	0x45b4	; 0x45b4 <ADCCallback>
    2eae:	80 91 4b 07 	lds	r24, 0x074B	; 0x80074b <sg_eCurrentType>
    2eb2:	81 11       	cpse	r24, r1
    2eb4:	09 c0       	rjmp	.+18     	; 0x2ec8 <__vector_27+0x90>
    2eb6:	ea e7       	ldi	r30, 0x7A	; 122
    2eb8:	f0 e0       	ldi	r31, 0x00	; 0
    2eba:	80 81       	ld	r24, Z
    2ebc:	87 7f       	andi	r24, 0xF7	; 247
    2ebe:	80 83       	st	Z, r24
    2ec0:	81 e0       	ldi	r24, 0x01	; 1
    2ec2:	80 93 5e 07 	sts	0x075E, r24	; 0x80075e <sg_eState>
    2ec6:	05 c0       	rjmp	.+10     	; 0x2ed2 <__vector_27+0x9a>
    2ec8:	ea e7       	ldi	r30, 0x7A	; 122
    2eca:	f0 e0       	ldi	r31, 0x00	; 0
    2ecc:	80 81       	ld	r24, Z
    2ece:	88 64       	ori	r24, 0x48	; 72
    2ed0:	80 83       	st	Z, r24
    2ed2:	ff 91       	pop	r31
    2ed4:	ef 91       	pop	r30
    2ed6:	bf 91       	pop	r27
    2ed8:	af 91       	pop	r26
    2eda:	9f 91       	pop	r25
    2edc:	8f 91       	pop	r24
    2ede:	7f 91       	pop	r23
    2ee0:	6f 91       	pop	r22
    2ee2:	5f 91       	pop	r21
    2ee4:	4f 91       	pop	r20
    2ee6:	3f 91       	pop	r19
    2ee8:	2f 91       	pop	r18
    2eea:	0f 90       	pop	r0
    2eec:	0f be       	out	0x3f, r0	; 63
    2eee:	0f 90       	pop	r0
    2ef0:	1f 90       	pop	r1
    2ef2:	18 95       	reti

Disassembly of section .text.ADCSetPowerOn:

00004afe <ADCSetPowerOn>:
}

// Enable ADC
void ADCSetPowerOn( void )
{
	ADCSRA |= (1 << ADEN);
    4afe:	ea e7       	ldi	r30, 0x7A	; 122
    4b00:	f0 e0       	ldi	r31, 0x00	; 0
    4b02:	80 81       	ld	r24, Z
    4b04:	80 68       	ori	r24, 0x80	; 128
    4b06:	80 83       	st	Z, r24
    4b08:	08 95       	ret

Disassembly of section .text.ADCStartConversion:

0000449c <ADCStartConversion>:
}

void ADCStartConversion(void)
{
	// Don't start anything if we're not idle
	if (EADCSTATE_IDLE != sg_eState)
    449c:	80 91 5e 07 	lds	r24, 0x075E	; 0x80075e <sg_eState>
    44a0:	81 30       	cpi	r24, 0x01	; 1
    44a2:	81 f4       	brne	.+32     	; 0x44c4 <ADCStartConversion+0x28>
	{
		return;
	}
	
	// Set back to the first channel
	sg_eCurrentType = EADCTYPE_FIRST;
    44a4:	10 92 4b 07 	sts	0x074B, r1	; 0x80074b <sg_eCurrentType>
	
	// Set the MUX
	ADMUX = (ADMUX & MUX_MASK) | (sg_sMuxSelectList[sg_eCurrentType].u8MuxSelect) | MUX_AREF;
    44a8:	ec e7       	ldi	r30, 0x7C	; 124
    44aa:	f0 e0       	ldi	r31, 0x00	; 0
    44ac:	80 81       	ld	r24, Z
    44ae:	80 7e       	andi	r24, 0xE0	; 224
    44b0:	89 6c       	ori	r24, 0xC9	; 201
    44b2:	80 83       	st	Z, r24
		
	sg_eState = EADCSTATE_READING;
    44b4:	82 e0       	ldi	r24, 0x02	; 2
    44b6:	80 93 5e 07 	sts	0x075E, r24	; 0x80075e <sg_eState>
	
	// Start a single conversion  - *dp run one at a time for now instead of continuous
	ADCSRA |= (1 << ADSC) | (1 << ADIE) | (1 << ADEN);  // turn power on if it isn't
    44ba:	ea e7       	ldi	r30, 0x7A	; 122
    44bc:	f0 e0       	ldi	r31, 0x00	; 0
    44be:	80 81       	ld	r24, Z
    44c0:	88 6c       	ori	r24, 0xC8	; 200
    44c2:	80 83       	st	Z, r24
    44c4:	08 95       	ret

Disassembly of section .text.ADCInit:

00002052 <ADCInit>:

	// Disable the conversion complete interrupt
	ADCSRA &= (uint8_t)~(1 << ADIE);

	// Clear any pending interrupt	
	ADCSRA |= (1 << ADIF);
    2052:	cf 93       	push	r28
    2054:	82 e0       	ldi	r24, 0x02	; 2
    2056:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f007a>
    205a:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
    205e:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7f0094>
    2062:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7f0095>
    2066:	10 92 96 00 	sts	0x0096, r1	; 0x800096 <__TEXT_REGION_LENGTH__+0x7f0096>
    206a:	10 92 97 00 	sts	0x0097, r1	; 0x800097 <__TEXT_REGION_LENGTH__+0x7f0097>
    206e:	80 ea       	ldi	r24, 0xA0	; 160
    2070:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f007b>
    2074:	c0 e0       	ldi	r28, 0x00	; 0
    2076:	83 c0       	rjmp	.+262    	; 0x217e <ADCInit+0x12c>
    2078:	2c 2f       	mov	r18, r28
    207a:	30 e0       	ldi	r19, 0x00	; 0
    207c:	c9 01       	movw	r24, r18
    207e:	88 0f       	add	r24, r24
    2080:	99 1f       	adc	r25, r25
    2082:	82 0f       	add	r24, r18
    2084:	93 1f       	adc	r25, r19
    2086:	01 96       	adiw	r24, 0x01	; 1
    2088:	09 2e       	mov	r0, r25
    208a:	00 0c       	add	r0, r0
    208c:	aa 0b       	sbc	r26, r26
    208e:	89 53       	subi	r24, 0x39	; 57
    2090:	9e 4f       	sbci	r25, 0xFE	; 254
    2092:	af 4f       	sbci	r26, 0xFF	; 255
    2094:	fc 01       	movw	r30, r24
    2096:	84 91       	lpm	r24, Z
    2098:	a7 fd       	sbrc	r26, 7
    209a:	80 81       	ld	r24, Z
    209c:	81 30       	cpi	r24, 0x01	; 1
    209e:	41 f0       	breq	.+16     	; 0x20b0 <ADCInit+0x5e>
    20a0:	08 f4       	brcc	.+2      	; 0x20a4 <ADCInit+0x52>
    20a2:	6c c0       	rjmp	.+216    	; 0x217c <ADCInit+0x12a>
    20a4:	82 30       	cpi	r24, 0x02	; 2
    20a6:	21 f1       	breq	.+72     	; 0x20f0 <ADCInit+0x9e>
    20a8:	83 30       	cpi	r24, 0x03	; 3
    20aa:	09 f4       	brne	.+2      	; 0x20ae <ADCInit+0x5c>
    20ac:	41 c0       	rjmp	.+130    	; 0x2130 <ADCInit+0xde>
    20ae:	5f c0       	rjmp	.+190    	; 0x216e <ADCInit+0x11c>
    20b0:	54 b1       	in	r21, 0x04	; 4
    20b2:	c9 01       	movw	r24, r18
    20b4:	88 0f       	add	r24, r24
    20b6:	99 1f       	adc	r25, r25
    20b8:	28 0f       	add	r18, r24
    20ba:	39 1f       	adc	r19, r25
    20bc:	2e 5f       	subi	r18, 0xFE	; 254
    20be:	3f 4f       	sbci	r19, 0xFF	; 255
    20c0:	03 2e       	mov	r0, r19
    20c2:	00 0c       	add	r0, r0
    20c4:	44 0b       	sbc	r20, r20
    20c6:	29 53       	subi	r18, 0x39	; 57
    20c8:	3e 4f       	sbci	r19, 0xFE	; 254
    20ca:	4f 4f       	sbci	r20, 0xFF	; 255
    20cc:	f9 01       	movw	r30, r18
    20ce:	24 91       	lpm	r18, Z
    20d0:	47 fd       	sbrc	r20, 7
    20d2:	20 81       	ld	r18, Z
    20d4:	81 e0       	ldi	r24, 0x01	; 1
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	02 c0       	rjmp	.+4      	; 0x20de <ADCInit+0x8c>
    20da:	88 0f       	add	r24, r24
    20dc:	99 1f       	adc	r25, r25
    20de:	2a 95       	dec	r18
    20e0:	e2 f7       	brpl	.-8      	; 0x20da <ADCInit+0x88>
    20e2:	80 95       	com	r24
    20e4:	58 23       	and	r21, r24
    20e6:	54 b9       	out	0x04, r21	; 4
    20e8:	95 b1       	in	r25, 0x05	; 5
    20ea:	89 23       	and	r24, r25
    20ec:	85 b9       	out	0x05, r24	; 5
    20ee:	46 c0       	rjmp	.+140    	; 0x217c <ADCInit+0x12a>
    20f0:	57 b1       	in	r21, 0x07	; 7
    20f2:	c9 01       	movw	r24, r18
    20f4:	88 0f       	add	r24, r24
    20f6:	99 1f       	adc	r25, r25
    20f8:	28 0f       	add	r18, r24
    20fa:	39 1f       	adc	r19, r25
    20fc:	2e 5f       	subi	r18, 0xFE	; 254
    20fe:	3f 4f       	sbci	r19, 0xFF	; 255
    2100:	03 2e       	mov	r0, r19
    2102:	00 0c       	add	r0, r0
    2104:	44 0b       	sbc	r20, r20
    2106:	29 53       	subi	r18, 0x39	; 57
    2108:	3e 4f       	sbci	r19, 0xFE	; 254
    210a:	4f 4f       	sbci	r20, 0xFF	; 255
    210c:	f9 01       	movw	r30, r18
    210e:	24 91       	lpm	r18, Z
    2110:	47 fd       	sbrc	r20, 7
    2112:	20 81       	ld	r18, Z
    2114:	81 e0       	ldi	r24, 0x01	; 1
    2116:	90 e0       	ldi	r25, 0x00	; 0
    2118:	02 c0       	rjmp	.+4      	; 0x211e <ADCInit+0xcc>
    211a:	88 0f       	add	r24, r24
    211c:	99 1f       	adc	r25, r25
    211e:	2a 95       	dec	r18
    2120:	e2 f7       	brpl	.-8      	; 0x211a <ADCInit+0xc8>
    2122:	80 95       	com	r24
    2124:	58 23       	and	r21, r24
    2126:	57 b9       	out	0x07, r21	; 7
    2128:	98 b1       	in	r25, 0x08	; 8
    212a:	89 23       	and	r24, r25
    212c:	88 b9       	out	0x08, r24	; 8
    212e:	26 c0       	rjmp	.+76     	; 0x217c <ADCInit+0x12a>
    2130:	4a b1       	in	r20, 0x0a	; 10
    2132:	c9 01       	movw	r24, r18
    2134:	88 0f       	add	r24, r24
    2136:	99 1f       	adc	r25, r25
    2138:	82 0f       	add	r24, r18
    213a:	93 1f       	adc	r25, r19
    213c:	02 96       	adiw	r24, 0x02	; 2
    213e:	09 2e       	mov	r0, r25
    2140:	00 0c       	add	r0, r0
    2142:	aa 0b       	sbc	r26, r26
    2144:	89 53       	subi	r24, 0x39	; 57
    2146:	9e 4f       	sbci	r25, 0xFE	; 254
    2148:	af 4f       	sbci	r26, 0xFF	; 255
    214a:	fc 01       	movw	r30, r24
    214c:	24 91       	lpm	r18, Z
    214e:	a7 fd       	sbrc	r26, 7
    2150:	20 81       	ld	r18, Z
    2152:	81 e0       	ldi	r24, 0x01	; 1
    2154:	90 e0       	ldi	r25, 0x00	; 0
    2156:	02 c0       	rjmp	.+4      	; 0x215c <ADCInit+0x10a>
    2158:	88 0f       	add	r24, r24
    215a:	99 1f       	adc	r25, r25
    215c:	2a 95       	dec	r18
    215e:	e2 f7       	brpl	.-8      	; 0x2158 <ADCInit+0x106>
    2160:	80 95       	com	r24
    2162:	48 23       	and	r20, r24
    2164:	4a b9       	out	0x0a, r20	; 10
    2166:	9b b1       	in	r25, 0x0b	; 11
    2168:	89 23       	and	r24, r25
    216a:	8b b9       	out	0x0b, r24	; 11
    216c:	07 c0       	rjmp	.+14     	; 0x217c <ADCInit+0x12a>
    216e:	45 eb       	ldi	r20, 0xB5	; 181
    2170:	50 e0       	ldi	r21, 0x00	; 0
    2172:	6e ee       	ldi	r22, 0xEE	; 238
    2174:	71 e0       	ldi	r23, 0x01	; 1
    2176:	80 e0       	ldi	r24, 0x00	; 0
    2178:	0e 94 0c 22 	call	0x4418	; 0x4418 <PlatformAssert>
    217c:	cf 5f       	subi	r28, 0xFF	; 255
    217e:	c5 30       	cpi	r28, 0x05	; 5
    2180:	08 f4       	brcc	.+2      	; 0x2184 <ADCInit+0x132>
    2182:	7a cf       	rjmp	.-268    	; 0x2078 <ADCInit+0x26>
    2184:	81 e0       	ldi	r24, 0x01	; 1
    2186:	80 93 5e 07 	sts	0x075E, r24	; 0x80075e <sg_eState>
    218a:	cf 91       	pop	r28
    218c:	08 95       	ret

Disassembly of section .text.CANLookupCommand:

00003bb0 <CANLookupCommand>:
	{PKT_MODULE_SET_TIME,		ECANMessageType_SetTime},
	{PKT_MODULE_MAX_STATE,		ECANMessageType_MaxState}
};

static ECANMessageType CANLookupCommand( uint16_t u16ID )
{
    3bb0:	cf 93       	push	r28
    3bb2:	df 93       	push	r29
    3bb4:	ec 01       	movw	r28, r24
	uint8_t u8Index = 0;
    3bb6:	90 e0       	ldi	r25, 0x00	; 0
	
	while( u8Index < (sizeof(sg_sRXCommandList)/sizeof(sg_sRXCommandList[0])) )
    3bb8:	26 c0       	rjmp	.+76     	; 0x3c06 <CANLookupCommand+0x56>
	{
		if( sg_sRXCommandList[u8Index].u16ID == u16ID )
    3bba:	a9 2f       	mov	r26, r25
    3bbc:	b0 e0       	ldi	r27, 0x00	; 0
    3bbe:	9d 01       	movw	r18, r26
    3bc0:	22 0f       	add	r18, r18
    3bc2:	33 1f       	adc	r19, r19
    3bc4:	2a 0f       	add	r18, r26
    3bc6:	3b 1f       	adc	r19, r27
    3bc8:	03 2e       	mov	r0, r19
    3bca:	00 0c       	add	r0, r0
    3bcc:	44 0b       	sbc	r20, r20
    3bce:	2b 57       	subi	r18, 0x7B	; 123
    3bd0:	3e 4f       	sbci	r19, 0xFE	; 254
    3bd2:	4f 4f       	sbci	r20, 0xFF	; 255
    3bd4:	f9 01       	movw	r30, r18
    3bd6:	54 2f       	mov	r21, r20
    3bd8:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <__xload_2>
    3bdc:	6c 17       	cp	r22, r28
    3bde:	7d 07       	cpc	r23, r29
    3be0:	89 f4       	brne	.+34     	; 0x3c04 <CANLookupCommand+0x54>
		{
			return( sg_sRXCommandList[u8Index].eType );
    3be2:	cd 01       	movw	r24, r26
    3be4:	88 0f       	add	r24, r24
    3be6:	99 1f       	adc	r25, r25
    3be8:	8a 0f       	add	r24, r26
    3bea:	9b 1f       	adc	r25, r27
    3bec:	02 96       	adiw	r24, 0x02	; 2
    3bee:	09 2e       	mov	r0, r25
    3bf0:	00 0c       	add	r0, r0
    3bf2:	aa 0b       	sbc	r26, r26
    3bf4:	8b 57       	subi	r24, 0x7B	; 123
    3bf6:	9e 4f       	sbci	r25, 0xFE	; 254
    3bf8:	af 4f       	sbci	r26, 0xFF	; 255
    3bfa:	fc 01       	movw	r30, r24
    3bfc:	84 91       	lpm	r24, Z
    3bfe:	a7 fd       	sbrc	r26, 7
    3c00:	80 81       	ld	r24, Z
    3c02:	04 c0       	rjmp	.+8      	; 0x3c0c <CANLookupCommand+0x5c>
		}
		
		u8Index++;
    3c04:	9f 5f       	subi	r25, 0xFF	; 255

static ECANMessageType CANLookupCommand( uint16_t u16ID )
{
	uint8_t u8Index = 0;
	
	while( u8Index < (sizeof(sg_sRXCommandList)/sizeof(sg_sRXCommandList[0])) )
    3c06:	9a 30       	cpi	r25, 0x0A	; 10
    3c08:	c0 f2       	brcs	.-80     	; 0x3bba <CANLookupCommand+0xa>
		}
		
		u8Index++;
	}
	
	return( ECANMessageType_MAX );
    3c0a:	82 e1       	ldi	r24, 0x12	; 18
}
    3c0c:	df 91       	pop	r29
    3c0e:	cf 91       	pop	r28
    3c10:	08 95       	ret

Disassembly of section .text.CANMOBSet:

00001432 <CANMOBSet>:

static void CANMOBSet( uint8_t u8MOBIndex,
					   const SMOBDef* psDef,
					   uint8_t* pu8Data,
					   uint8_t u8DataLen )
{
    1432:	6f 92       	push	r6
    1434:	7f 92       	push	r7
    1436:	8f 92       	push	r8
    1438:	9f 92       	push	r9
    143a:	bf 92       	push	r11
    143c:	cf 92       	push	r12
    143e:	df 92       	push	r13
    1440:	ef 92       	push	r14
    1442:	ff 92       	push	r15
    1444:	0f 93       	push	r16
    1446:	1f 93       	push	r17
    1448:	cf 93       	push	r28
    144a:	df 93       	push	r29
    144c:	f8 2e       	mov	r15, r24
    144e:	6a 01       	movw	r12, r20
    1450:	e6 2e       	mov	r14, r22
    1452:	e9 01       	movw	r28, r18
	uint8_t u8CANCDMOBValue;
	uint32_t u32MessageID;
	uint8_t savedCANGIE;
	
	MBASSERT( u8MOBIndex <= 5 );
    1454:	0f 2e       	mov	r0, r31
    1456:	f5 e0       	ldi	r31, 0x05	; 5
    1458:	6f 2e       	mov	r6, r31
    145a:	f0 2d       	mov	r31, r0
    145c:	68 16       	cp	r6, r24
    145e:	38 f4       	brcc	.+14     	; 0x146e <CANMOBSet+0x3c>
    1460:	4f ec       	ldi	r20, 0xCF	; 207
    1462:	50 e0       	ldi	r21, 0x00	; 0
    1464:	69 ef       	ldi	r22, 0xF9	; 249
    1466:	71 e0       	ldi	r23, 0x01	; 1
    1468:	80 e0       	ldi	r24, 0x00	; 0
    146a:	0e 94 0c 22 	call	0x4418	; 0x4418 <PlatformAssert>
	MBASSERT( u8DataLen <= 8 );
    146e:	09 30       	cpi	r16, 0x09	; 9
    1470:	38 f0       	brcs	.+14     	; 0x1480 <CANMOBSet+0x4e>
    1472:	40 ed       	ldi	r20, 0xD0	; 208
    1474:	50 e0       	ldi	r21, 0x00	; 0
    1476:	69 ef       	ldi	r22, 0xF9	; 249
    1478:	71 e0       	ldi	r23, 0x01	; 1
    147a:	80 e0       	ldi	r24, 0x00	; 0
    147c:	0e 94 0c 22 	call	0x4418	; 0x4418 <PlatformAssert>
	
	// Disable CAN interrupts during MOB configuration to prevent corruption
	savedCANGIE = CANGIE;
    1480:	eb ed       	ldi	r30, 0xDB	; 219
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	b0 80       	ld	r11, Z
	CANGIE &= ~(1 << ENIT);
    1486:	80 81       	ld	r24, Z
    1488:	8f 77       	andi	r24, 0x7F	; 127
    148a:	80 83       	st	Z, r24
	
	// Set the MOB page, auto increment, and data index 0
	CANPAGE = u8MOBIndex << 4;
    148c:	8f 2d       	mov	r24, r15
    148e:	82 95       	swap	r24
    1490:	80 7f       	andi	r24, 0xF0	; 240
    1492:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f00ed>
	
	// Clear the MOB status
	CANSTMOB = 0;
    1496:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
	
	// Set the MOB registers for this page
	u8CANCDMOBValue = u8DataLen;
	u8CANCDMOBValue |= (psDef->u8Mode << CONMOB0);
    149a:	f6 01       	movw	r30, r12
    149c:	84 91       	lpm	r24, Z
    149e:	e7 fc       	sbrc	r14, 7
    14a0:	80 81       	ld	r24, Z
    14a2:	20 e4       	ldi	r18, 0x40	; 64
    14a4:	82 9f       	mul	r24, r18
    14a6:	c0 01       	movw	r24, r0
    14a8:	11 24       	eor	r1, r1
    14aa:	10 2f       	mov	r17, r16
    14ac:	18 2b       	or	r17, r24
	if( psDef->bReplyValid )
    14ae:	ae 2d       	mov	r26, r14
    14b0:	c6 01       	movw	r24, r12
    14b2:	01 96       	adiw	r24, 0x01	; 1
    14b4:	a1 1d       	adc	r26, r1
    14b6:	fc 01       	movw	r30, r24
    14b8:	84 91       	lpm	r24, Z
    14ba:	a7 fd       	sbrc	r26, 7
    14bc:	80 81       	ld	r24, Z
    14be:	81 11       	cpse	r24, r1
	{
		u8CANCDMOBValue |= (1 << RPLV);
    14c0:	10 62       	ori	r17, 0x20	; 32
	}
	u8CANCDMOBValue |= (1 << IDE);
    14c2:	10 61       	ori	r17, 0x10	; 16
	// Extended frame address format
	//	Bits 0-7: Pack / Module registration ID of sender (if assigned, zero otherwise)
	//	Bits 8-17: Reserved, set to zero.
	//	Bits 18-28: Static message ID (eg. 0x500)
	
	u32MessageID = (uint32_t)PlatformGetRegistrationID();
    14c4:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <PlatformGetRegistrationID>
	u32MessageID |= (((uint32_t)psDef->u16ID) & 0x7ff) << 18;
    14c8:	4e 2d       	mov	r20, r14
    14ca:	96 01       	movw	r18, r12
    14cc:	2e 5f       	subi	r18, 0xFE	; 254
    14ce:	3f 4f       	sbci	r19, 0xFF	; 255
    14d0:	4f 4f       	sbci	r20, 0xFF	; 255
    14d2:	f9 01       	movw	r30, r18
    14d4:	54 2f       	mov	r21, r20
    14d6:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <__xload_2>
    14da:	ab 01       	movw	r20, r22
    14dc:	57 70       	andi	r21, 0x07	; 7
    14de:	60 e0       	ldi	r22, 0x00	; 0
    14e0:	70 e0       	ldi	r23, 0x00	; 0
    14e2:	03 2e       	mov	r0, r19
    14e4:	32 e1       	ldi	r19, 0x12	; 18
    14e6:	44 0f       	add	r20, r20
    14e8:	55 1f       	adc	r21, r21
    14ea:	66 1f       	adc	r22, r22
    14ec:	77 1f       	adc	r23, r23
    14ee:	3a 95       	dec	r19
    14f0:	d1 f7       	brne	.-12     	; 0x14e6 <CANMOBSet+0xb4>
    14f2:	30 2d       	mov	r19, r0
    14f4:	3a 01       	movw	r6, r20
    14f6:	4b 01       	movw	r8, r22
    14f8:	68 2a       	or	r6, r24
    14fa:	d4 01       	movw	r26, r8
    14fc:	c3 01       	movw	r24, r6
	
	CANIDT4 = psDef->bRTRTag?(1 << RTRTAG):0;
    14fe:	4e 2d       	mov	r20, r14
    1500:	96 01       	movw	r18, r12
    1502:	2a 5f       	subi	r18, 0xFA	; 250
    1504:	3f 4f       	sbci	r19, 0xFF	; 255
    1506:	4f 4f       	sbci	r20, 0xFF	; 255
    1508:	f9 01       	movw	r30, r18
    150a:	24 91       	lpm	r18, Z
    150c:	47 fd       	sbrc	r20, 7
    150e:	20 81       	ld	r18, Z
    1510:	22 23       	and	r18, r18
    1512:	11 f0       	breq	.+4      	; 0x1518 <CANMOBSet+0xe6>
    1514:	24 e0       	ldi	r18, 0x04	; 4
    1516:	01 c0       	rjmp	.+2      	; 0x151a <CANMOBSet+0xe8>
    1518:	20 e0       	ldi	r18, 0x00	; 0
    151a:	e0 ef       	ldi	r30, 0xF0	; 240
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	20 83       	st	Z, r18
	CANIDT4 |= u32MessageID << 3;
    1520:	20 81       	ld	r18, Z
    1522:	38 2f       	mov	r19, r24
    1524:	33 0f       	add	r19, r19
    1526:	33 0f       	add	r19, r19
    1528:	33 0f       	add	r19, r19
    152a:	23 2b       	or	r18, r19
    152c:	20 83       	st	Z, r18
	CANIDT3 = u32MessageID >> 5;
    152e:	ac 01       	movw	r20, r24
    1530:	bd 01       	movw	r22, r26
    1532:	68 94       	set
    1534:	14 f8       	bld	r1, 4
    1536:	76 95       	lsr	r23
    1538:	67 95       	ror	r22
    153a:	57 95       	ror	r21
    153c:	47 95       	ror	r20
    153e:	16 94       	lsr	r1
    1540:	d1 f7       	brne	.-12     	; 0x1536 <CANMOBSet+0x104>
    1542:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f00f1>
	CANIDT2 = u32MessageID >> 13;
    1546:	ac 01       	movw	r20, r24
    1548:	bd 01       	movw	r22, r26
    154a:	03 2e       	mov	r0, r19
    154c:	3d e0       	ldi	r19, 0x0D	; 13
    154e:	76 95       	lsr	r23
    1550:	67 95       	ror	r22
    1552:	57 95       	ror	r21
    1554:	47 95       	ror	r20
    1556:	3a 95       	dec	r19
    1558:	d1 f7       	brne	.-12     	; 0x154e <CANMOBSet+0x11c>
    155a:	30 2d       	mov	r19, r0
    155c:	40 93 f2 00 	sts	0x00F2, r20	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f00f2>
	CANIDT1 = u32MessageID >> 21;
    1560:	07 2e       	mov	r0, r23
    1562:	75 e1       	ldi	r23, 0x15	; 21
    1564:	b6 95       	lsr	r27
    1566:	a7 95       	ror	r26
    1568:	97 95       	ror	r25
    156a:	87 95       	ror	r24
    156c:	7a 95       	dec	r23
    156e:	d1 f7       	brne	.-12     	; 0x1564 <CANMOBSet+0x132>
    1570:	70 2d       	mov	r23, r0
    1572:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f00f3>
	
	// Setup mask for the cmd (require matching ID extention bit)
	CANIDM4 = psDef->bRTRMask?(1 << RTRTAG):0;
    1576:	ae 2d       	mov	r26, r14
    1578:	c6 01       	movw	r24, r12
    157a:	07 96       	adiw	r24, 0x07	; 7
    157c:	a1 1d       	adc	r26, r1
    157e:	fc 01       	movw	r30, r24
    1580:	84 91       	lpm	r24, Z
    1582:	a7 fd       	sbrc	r26, 7
    1584:	80 81       	ld	r24, Z
    1586:	88 23       	and	r24, r24
    1588:	11 f0       	breq	.+4      	; 0x158e <CANMOBSet+0x15c>
    158a:	84 e0       	ldi	r24, 0x04	; 4
    158c:	01 c0       	rjmp	.+2      	; 0x1590 <CANMOBSet+0x15e>
    158e:	80 e0       	ldi	r24, 0x00	; 0
    1590:	e4 ef       	ldi	r30, 0xF4	; 244
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	80 83       	st	Z, r24
	CANIDM4 |= (1 << IDEMSK);
    1596:	80 81       	ld	r24, Z
    1598:	81 60       	ori	r24, 0x01	; 1
    159a:	80 83       	st	Z, r24
	CANIDM3 = 0;
    159c:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7f00f5>
	CANIDM2 = psDef->u16IDMask << 5;
    15a0:	ae 2d       	mov	r26, r14
    15a2:	c6 01       	movw	r24, r12
    15a4:	04 96       	adiw	r24, 0x04	; 4
    15a6:	a1 1d       	adc	r26, r1
    15a8:	fc 01       	movw	r30, r24
    15aa:	5a 2f       	mov	r21, r26
    15ac:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <__xload_2>
    15b0:	62 95       	swap	r22
    15b2:	66 0f       	add	r22, r22
    15b4:	60 7e       	andi	r22, 0xE0	; 224
    15b6:	60 93 f6 00 	sts	0x00F6, r22	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7f00f6>
	CANIDM1 = psDef->u16IDMask >> 3;
    15ba:	fc 01       	movw	r30, r24
    15bc:	5a 2f       	mov	r21, r26
    15be:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <__xload_2>
    15c2:	76 95       	lsr	r23
    15c4:	67 95       	ror	r22
    15c6:	76 95       	lsr	r23
    15c8:	67 95       	ror	r22
    15ca:	76 95       	lsr	r23
    15cc:	67 95       	ror	r22
    15ce:	60 93 f7 00 	sts	0x00F7, r22	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7f00f7>
	
	// Set the data into the FIFO
	while( u8DataLen )
    15d2:	04 c0       	rjmp	.+8      	; 0x15dc <CANMOBSet+0x1aa>
	{
		CANMSG = *pu8Data;
    15d4:	89 91       	ld	r24, Y+
    15d6:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
		
		pu8Data++;
		u8DataLen--;
    15da:	01 50       	subi	r16, 0x01	; 1
	CANIDM3 = 0;
	CANIDM2 = psDef->u16IDMask << 5;
	CANIDM1 = psDef->u16IDMask >> 3;
	
	// Set the data into the FIFO
	while( u8DataLen )
    15dc:	01 11       	cpse	r16, r1
    15de:	fa cf       	rjmp	.-12     	; 0x15d4 <CANMOBSet+0x1a2>
		pu8Data++;
		u8DataLen--;
	}
	
	// Send it now
	CANCDMOB = u8CANCDMOBValue;
    15e0:	10 93 ef 00 	sts	0x00EF, r17	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
	
	// Enable (activates the MOB) or disable the MOB interrupt
	if( psDef->u8Mode != CAN_DISABLED )
    15e4:	f6 01       	movw	r30, r12
    15e6:	84 91       	lpm	r24, Z
    15e8:	e7 fc       	sbrc	r14, 7
    15ea:	80 81       	ld	r24, Z
    15ec:	88 23       	and	r24, r24
    15ee:	69 f0       	breq	.+26     	; 0x160a <CANMOBSet+0x1d8>
	{
		CANIE2 |= (1 << u8MOBIndex);
    15f0:	ee ed       	ldi	r30, 0xDE	; 222
    15f2:	f0 e0       	ldi	r31, 0x00	; 0
    15f4:	20 81       	ld	r18, Z
    15f6:	81 e0       	ldi	r24, 0x01	; 1
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	02 c0       	rjmp	.+4      	; 0x1600 <CANMOBSet+0x1ce>
    15fc:	88 0f       	add	r24, r24
    15fe:	99 1f       	adc	r25, r25
    1600:	fa 94       	dec	r15
    1602:	e2 f7       	brpl	.-8      	; 0x15fc <CANMOBSet+0x1ca>
    1604:	82 2b       	or	r24, r18
    1606:	80 83       	st	Z, r24
    1608:	0d c0       	rjmp	.+26     	; 0x1624 <CANMOBSet+0x1f2>
	}
	else
	{
		CANIE2 &= (uint8_t)~(1 << u8MOBIndex);
    160a:	ee ed       	ldi	r30, 0xDE	; 222
    160c:	f0 e0       	ldi	r31, 0x00	; 0
    160e:	20 81       	ld	r18, Z
    1610:	81 e0       	ldi	r24, 0x01	; 1
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	02 c0       	rjmp	.+4      	; 0x161a <CANMOBSet+0x1e8>
    1616:	88 0f       	add	r24, r24
    1618:	99 1f       	adc	r25, r25
    161a:	fa 94       	dec	r15
    161c:	e2 f7       	brpl	.-8      	; 0x1616 <CANMOBSet+0x1e4>
    161e:	80 95       	com	r24
    1620:	82 23       	and	r24, r18
    1622:	80 83       	st	Z, r24
	}
	
	// Restore CAN interrupts
	CANGIE = savedCANGIE;
    1624:	b0 92 db 00 	sts	0x00DB, r11	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f00db>
}
    1628:	df 91       	pop	r29
    162a:	cf 91       	pop	r28
    162c:	1f 91       	pop	r17
    162e:	0f 91       	pop	r16
    1630:	ff 90       	pop	r15
    1632:	ef 90       	pop	r14
    1634:	df 90       	pop	r13
    1636:	cf 90       	pop	r12
    1638:	bf 90       	pop	r11
    163a:	9f 90       	pop	r9
    163c:	8f 90       	pop	r8
    163e:	7f 90       	pop	r7
    1640:	6f 90       	pop	r6
    1642:	08 95       	ret

Disassembly of section .text.CANSendMessageInternal:

00001d74 <CANSendMessageInternal>:

static void CANSendMessageInternal( ECANMessageType eType,
									uint8_t* pu8Data,
									uint8_t u8DataLen,	
									bool bRetransmit )
{
    1d74:	6f 92       	push	r6
    1d76:	7f 92       	push	r7
    1d78:	8f 92       	push	r8
    1d7a:	ef 92       	push	r14
    1d7c:	ff 92       	push	r15
    1d7e:	0f 93       	push	r16
    1d80:	cf 93       	push	r28
    1d82:	df 93       	push	r29
    1d84:	c8 2f       	mov	r28, r24
    1d86:	7b 01       	movw	r14, r22
    1d88:	04 2f       	mov	r16, r20
    1d8a:	d2 2f       	mov	r29, r18
	const SMOBDef* psDef = NULL;
	
	if( ECANMessageType_ModuleAnnouncement == eType )
    1d8c:	88 23       	and	r24, r24
    1d8e:	f9 f0       	breq	.+62     	; 0x1dce <CANSendMessageInternal+0x5a>
	{
		psDef = &sg_sMOBModuleAnnouncement;
	}
	else if( ECANMessageType_ModuleStatus1 == eType )
    1d90:	81 30       	cpi	r24, 0x01	; 1
    1d92:	31 f1       	breq	.+76     	; 0x1de0 <CANSendMessageInternal+0x6c>
	{
		psDef = &sg_sMOBModuleStatus1;
	}
	else if( ECANMessageType_ModuleStatus2 == eType )
    1d94:	82 30       	cpi	r24, 0x02	; 2
    1d96:	69 f1       	breq	.+90     	; 0x1df2 <CANSendMessageInternal+0x7e>
	{
		psDef = &sg_sMOBModuleStatus2;
	}
	else if( ECANMessageType_ModuleStatus3 == eType )
    1d98:	83 30       	cpi	r24, 0x03	; 3
    1d9a:	a1 f1       	breq	.+104    	; 0x1e04 <CANSendMessageInternal+0x90>
	{
		psDef = &sg_sMOBModuleStatus3;
	}
	else if( ECANMessageType_ModuleCellCommStat1 == eType )
    1d9c:	86 30       	cpi	r24, 0x06	; 6
    1d9e:	d9 f1       	breq	.+118    	; 0x1e16 <CANSendMessageInternal+0xa2>
	{
		psDef = &sg_sMOBModuleCellCommStat1;
	}
	else if( ECANMessageType_ModuleCellCommStat2 == eType )
    1da0:	87 30       	cpi	r24, 0x07	; 7
    1da2:	09 f4       	brne	.+2      	; 0x1da6 <CANSendMessageInternal+0x32>
    1da4:	41 c0       	rjmp	.+130    	; 0x1e28 <CANSendMessageInternal+0xb4>
	{
		psDef = &sg_sMOBModuleCellCommStat2;
	}
	else if( ECANMessageType_ModuleHardwareDetail == eType )
    1da6:	85 30       	cpi	r24, 0x05	; 5
    1da8:	09 f4       	brne	.+2      	; 0x1dac <CANSendMessageInternal+0x38>
    1daa:	47 c0       	rjmp	.+142    	; 0x1e3a <CANSendMessageInternal+0xc6>
	{
		psDef = &sg_sMOBModuleHardwareDetail;
	}
	else if( ECANMessageType_ModuleCellDetail == eType )
    1dac:	84 30       	cpi	r24, 0x04	; 4
    1dae:	09 f4       	brne	.+2      	; 0x1db2 <CANSendMessageInternal+0x3e>
    1db0:	4d c0       	rjmp	.+154    	; 0x1e4c <CANSendMessageInternal+0xd8>
	{
		psDef = &sg_sMOBModuleCellDetail;
	}
	else if( ECANMessageType_ModuleRequestTime == eType )
    1db2:	88 30       	cpi	r24, 0x08	; 8
    1db4:	09 f4       	brne	.+2      	; 0x1db8 <CANSendMessageInternal+0x44>
    1db6:	53 c0       	rjmp	.+166    	; 0x1e5e <CANSendMessageInternal+0xea>
		psDef = &sg_sMOBModuleRequestTime;
	}
	else
	{
		// Invalid message type
		MBASSERT(0);
    1db8:	42 e4       	ldi	r20, 0x42	; 66
    1dba:	51 e0       	ldi	r21, 0x01	; 1
    1dbc:	69 ef       	ldi	r22, 0xF9	; 249
    1dbe:	71 e0       	ldi	r23, 0x01	; 1
    1dc0:	80 e0       	ldi	r24, 0x00	; 0
    1dc2:	0e 94 0c 22 	call	0x4418	; 0x4418 <PlatformAssert>
static void CANSendMessageInternal( ECANMessageType eType,
									uint8_t* pu8Data,
									uint8_t u8DataLen,	
									bool bRetransmit )
{
	const SMOBDef* psDef = NULL;
    1dc6:	61 2c       	mov	r6, r1
    1dc8:	71 2c       	mov	r7, r1
    1dca:	81 2c       	mov	r8, r1
    1dcc:	50 c0       	rjmp	.+160    	; 0x1e6e <CANSendMessageInternal+0xfa>
	
	if( ECANMessageType_ModuleAnnouncement == eType )
	{
		psDef = &sg_sMOBModuleAnnouncement;
    1dce:	0f 2e       	mov	r0, r31
    1dd0:	f4 e4       	ldi	r31, 0x44	; 68
    1dd2:	6f 2e       	mov	r6, r31
    1dd4:	f2 e0       	ldi	r31, 0x02	; 2
    1dd6:	7f 2e       	mov	r7, r31
    1dd8:	f0 e0       	ldi	r31, 0x00	; 0
    1dda:	8f 2e       	mov	r8, r31
    1ddc:	f0 2d       	mov	r31, r0
    1dde:	47 c0       	rjmp	.+142    	; 0x1e6e <CANSendMessageInternal+0xfa>
	}
	else if( ECANMessageType_ModuleStatus1 == eType )
	{
		psDef = &sg_sMOBModuleStatus1;
    1de0:	0f 2e       	mov	r0, r31
    1de2:	fc e3       	ldi	r31, 0x3C	; 60
    1de4:	6f 2e       	mov	r6, r31
    1de6:	f2 e0       	ldi	r31, 0x02	; 2
    1de8:	7f 2e       	mov	r7, r31
    1dea:	f0 e0       	ldi	r31, 0x00	; 0
    1dec:	8f 2e       	mov	r8, r31
    1dee:	f0 2d       	mov	r31, r0
    1df0:	3e c0       	rjmp	.+124    	; 0x1e6e <CANSendMessageInternal+0xfa>
	}
	else if( ECANMessageType_ModuleStatus2 == eType )
	{
		psDef = &sg_sMOBModuleStatus2;
    1df2:	0f 2e       	mov	r0, r31
    1df4:	f4 e3       	ldi	r31, 0x34	; 52
    1df6:	6f 2e       	mov	r6, r31
    1df8:	f2 e0       	ldi	r31, 0x02	; 2
    1dfa:	7f 2e       	mov	r7, r31
    1dfc:	f0 e0       	ldi	r31, 0x00	; 0
    1dfe:	8f 2e       	mov	r8, r31
    1e00:	f0 2d       	mov	r31, r0
    1e02:	35 c0       	rjmp	.+106    	; 0x1e6e <CANSendMessageInternal+0xfa>
	}
	else if( ECANMessageType_ModuleStatus3 == eType )
	{
		psDef = &sg_sMOBModuleStatus3;
    1e04:	0f 2e       	mov	r0, r31
    1e06:	fc e2       	ldi	r31, 0x2C	; 44
    1e08:	6f 2e       	mov	r6, r31
    1e0a:	f2 e0       	ldi	r31, 0x02	; 2
    1e0c:	7f 2e       	mov	r7, r31
    1e0e:	f0 e0       	ldi	r31, 0x00	; 0
    1e10:	8f 2e       	mov	r8, r31
    1e12:	f0 2d       	mov	r31, r0
    1e14:	2c c0       	rjmp	.+88     	; 0x1e6e <CANSendMessageInternal+0xfa>
	}
	else if( ECANMessageType_ModuleCellCommStat1 == eType )
	{
		psDef = &sg_sMOBModuleCellCommStat1;
    1e16:	0f 2e       	mov	r0, r31
    1e18:	f4 e2       	ldi	r31, 0x24	; 36
    1e1a:	6f 2e       	mov	r6, r31
    1e1c:	f2 e0       	ldi	r31, 0x02	; 2
    1e1e:	7f 2e       	mov	r7, r31
    1e20:	f0 e0       	ldi	r31, 0x00	; 0
    1e22:	8f 2e       	mov	r8, r31
    1e24:	f0 2d       	mov	r31, r0
    1e26:	23 c0       	rjmp	.+70     	; 0x1e6e <CANSendMessageInternal+0xfa>
	}
	else if( ECANMessageType_ModuleCellCommStat2 == eType )
	{
		psDef = &sg_sMOBModuleCellCommStat2;
    1e28:	0f 2e       	mov	r0, r31
    1e2a:	fc e1       	ldi	r31, 0x1C	; 28
    1e2c:	6f 2e       	mov	r6, r31
    1e2e:	f2 e0       	ldi	r31, 0x02	; 2
    1e30:	7f 2e       	mov	r7, r31
    1e32:	f0 e0       	ldi	r31, 0x00	; 0
    1e34:	8f 2e       	mov	r8, r31
    1e36:	f0 2d       	mov	r31, r0
    1e38:	1a c0       	rjmp	.+52     	; 0x1e6e <CANSendMessageInternal+0xfa>
	}
	else if( ECANMessageType_ModuleHardwareDetail == eType )
	{
		psDef = &sg_sMOBModuleHardwareDetail;
    1e3a:	0f 2e       	mov	r0, r31
    1e3c:	fc e0       	ldi	r31, 0x0C	; 12
    1e3e:	6f 2e       	mov	r6, r31
    1e40:	f2 e0       	ldi	r31, 0x02	; 2
    1e42:	7f 2e       	mov	r7, r31
    1e44:	f0 e0       	ldi	r31, 0x00	; 0
    1e46:	8f 2e       	mov	r8, r31
    1e48:	f0 2d       	mov	r31, r0
    1e4a:	11 c0       	rjmp	.+34     	; 0x1e6e <CANSendMessageInternal+0xfa>
	}
	else if( ECANMessageType_ModuleCellDetail == eType )
	{
		psDef = &sg_sMOBModuleCellDetail;
    1e4c:	0f 2e       	mov	r0, r31
    1e4e:	f4 e1       	ldi	r31, 0x14	; 20
    1e50:	6f 2e       	mov	r6, r31
    1e52:	f2 e0       	ldi	r31, 0x02	; 2
    1e54:	7f 2e       	mov	r7, r31
    1e56:	f0 e0       	ldi	r31, 0x00	; 0
    1e58:	8f 2e       	mov	r8, r31
    1e5a:	f0 2d       	mov	r31, r0
    1e5c:	08 c0       	rjmp	.+16     	; 0x1e6e <CANSendMessageInternal+0xfa>
	}
	else if( ECANMessageType_ModuleRequestTime == eType )
	{
		psDef = &sg_sMOBModuleRequestTime;
    1e5e:	0f 2e       	mov	r0, r31
    1e60:	f4 e0       	ldi	r31, 0x04	; 4
    1e62:	6f 2e       	mov	r6, r31
    1e64:	f2 e0       	ldi	r31, 0x02	; 2
    1e66:	7f 2e       	mov	r7, r31
    1e68:	f0 e0       	ldi	r31, 0x00	; 0
    1e6a:	8f 2e       	mov	r8, r31
    1e6c:	f0 2d       	mov	r31, r0
	{
		// Invalid message type
		MBASSERT(0);
	}
	
	if(bRetransmit && sg_bInRetransmit) {
    1e6e:	dd 23       	and	r29, r29
    1e70:	21 f0       	breq	.+8      	; 0x1e7a <CANSendMessageInternal+0x106>
    1e72:	80 91 5f 07 	lds	r24, 0x075F	; 0x80075f <sg_bInRetransmit>
    1e76:	81 11       	cpse	r24, r1
    1e78:	30 c0       	rjmp	.+96     	; 0x1eda <CANSendMessageInternal+0x166>
		// Already in a retransmit, don't allow nested retries
		return;
	}
	if( bRetransmit || (false == sg_bBusy) )
    1e7a:	d1 11       	cpse	r29, r1
    1e7c:	04 c0       	rjmp	.+8      	; 0x1e86 <CANSendMessageInternal+0x112>
    1e7e:	80 91 63 07 	lds	r24, 0x0763	; 0x800763 <sg_bBusy>
    1e82:	81 11       	cpse	r24, r1
    1e84:	2a c0       	rjmp	.+84     	; 0x1eda <CANSendMessageInternal+0x166>
	{
		sg_bBusy = true;
    1e86:	81 e0       	ldi	r24, 0x01	; 1
    1e88:	80 93 63 07 	sts	0x0763, r24	; 0x800763 <sg_bBusy>
		
		// Save this message info for retransmit later if needed
		if( false == bRetransmit )
    1e8c:	d1 11       	cpse	r29, r1
    1e8e:	1a c0       	rjmp	.+52     	; 0x1ec4 <CANSendMessageInternal+0x150>
		{
			sg_u8TransmitAttempts = 0;
    1e90:	10 92 62 07 	sts	0x0762, r1	; 0x800762 <sg_u8TransmitAttempts>
			sg_eLastTXType = eType;
    1e94:	c0 93 61 07 	sts	0x0761, r28	; 0x800761 <sg_eLastTXType>
			MBASSERT(u8DataLen <= CAN_MAX_MSG_SIZE);
    1e98:	09 30       	cpi	r16, 0x09	; 9
    1e9a:	38 f0       	brcs	.+14     	; 0x1eaa <CANSendMessageInternal+0x136>
    1e9c:	42 e5       	ldi	r20, 0x52	; 82
    1e9e:	51 e0       	ldi	r21, 0x01	; 1
    1ea0:	69 ef       	ldi	r22, 0xF9	; 249
    1ea2:	71 e0       	ldi	r23, 0x01	; 1
    1ea4:	80 e0       	ldi	r24, 0x00	; 0
    1ea6:	0e 94 0c 22 	call	0x4418	; 0x4418 <PlatformAssert>
			memcpy(sg_u8LastTXData, pu8Data, u8DataLen);
    1eaa:	20 2f       	mov	r18, r16
    1eac:	30 e0       	ldi	r19, 0x00	; 0
    1eae:	c7 01       	movw	r24, r14
    1eb0:	a0 e8       	ldi	r26, 0x80	; 128
    1eb2:	ac 01       	movw	r20, r24
    1eb4:	6a 2f       	mov	r22, r26
    1eb6:	89 e3       	ldi	r24, 0x39	; 57
    1eb8:	97 e0       	ldi	r25, 0x07	; 7
    1eba:	0e 94 98 21 	call	0x4330	; 0x4330 <memcpy>
			sg_u8LastTXDataLen = u8DataLen;
    1ebe:	00 93 60 07 	sts	0x0760, r16	; 0x800760 <sg_u8LastTXDataLen>
    1ec2:	05 c0       	rjmp	.+10     	; 0x1ece <CANSendMessageInternal+0x15a>
		}
		else
		{
			sg_u8TransmitAttempts++;
    1ec4:	80 91 62 07 	lds	r24, 0x0762	; 0x800762 <sg_u8TransmitAttempts>
    1ec8:	8f 5f       	subi	r24, 0xFF	; 255
    1eca:	80 93 62 07 	sts	0x0762, r24	; 0x800762 <sg_u8TransmitAttempts>
		}
		
		// Send it now
		CANMOBSet( CANMOB_TX_IDX, psDef, pu8Data, u8DataLen );
    1ece:	97 01       	movw	r18, r14
    1ed0:	68 2d       	mov	r22, r8
    1ed2:	a3 01       	movw	r20, r6
    1ed4:	81 e0       	ldi	r24, 0x01	; 1
    1ed6:	0e 94 19 0a 	call	0x1432	; 0x1432 <CANMOBSet>
	}
}
    1eda:	df 91       	pop	r29
    1edc:	cf 91       	pop	r28
    1ede:	0f 91       	pop	r16
    1ee0:	ff 90       	pop	r15
    1ee2:	ef 90       	pop	r14
    1ee4:	8f 90       	pop	r8
    1ee6:	7f 90       	pop	r7
    1ee8:	6f 90       	pop	r6
    1eea:	08 95       	ret

Disassembly of section .text.CANMOBInterrupt:

00001be2 <CANMOBInterrupt>:

void CANMOBInterrupt( uint8_t u8MOBIndex )
{
    1be2:	cf 92       	push	r12
    1be4:	df 92       	push	r13
    1be6:	ff 92       	push	r15
    1be8:	0f 93       	push	r16
    1bea:	1f 93       	push	r17
    1bec:	cf 93       	push	r28
    1bee:	df 93       	push	r29
    1bf0:	cd b7       	in	r28, 0x3d	; 61
    1bf2:	de b7       	in	r29, 0x3e	; 62
    1bf4:	28 97       	sbiw	r28, 0x08	; 8
    1bf6:	0f b6       	in	r0, 0x3f	; 63
    1bf8:	f8 94       	cli
    1bfa:	de bf       	out	0x3e, r29	; 62
    1bfc:	0f be       	out	0x3f, r0	; 63
    1bfe:	cd bf       	out	0x3d, r28	; 61
	// Set the MOB page first (and zero the data index)
	CANPAGE = u8MOBIndex << 4;
    1c00:	98 2f       	mov	r25, r24
    1c02:	92 95       	swap	r25
    1c04:	90 7f       	andi	r25, 0xF0	; 240
    1c06:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f00ed>
	
	// Temporarily disable the MOB to examine and modify the registers
	CANIE2 &= (uint8_t)~(1 << u8MOBIndex);
    1c0a:	ee ed       	ldi	r30, 0xDE	; 222
    1c0c:	f0 e0       	ldi	r31, 0x00	; 0
    1c0e:	20 81       	ld	r18, Z
    1c10:	01 e0       	ldi	r16, 0x01	; 1
    1c12:	10 e0       	ldi	r17, 0x00	; 0
    1c14:	08 2e       	mov	r0, r24
    1c16:	02 c0       	rjmp	.+4      	; 0x1c1c <CANMOBInterrupt+0x3a>
    1c18:	00 0f       	add	r16, r16
    1c1a:	11 1f       	adc	r17, r17
    1c1c:	0a 94       	dec	r0
    1c1e:	e2 f7       	brpl	.-8      	; 0x1c18 <CANMOBInterrupt+0x36>
    1c20:	90 2f       	mov	r25, r16
    1c22:	90 95       	com	r25
    1c24:	92 23       	and	r25, r18
    1c26:	90 83       	st	Z, r25
	CANCDMOB &= (uint8_t)~((1 << CONMOB0) | (1 << CONMOB1));
    1c28:	ef ee       	ldi	r30, 0xEF	; 239
    1c2a:	f0 e0       	ldi	r31, 0x00	; 0
    1c2c:	90 81       	ld	r25, Z
    1c2e:	9f 73       	andi	r25, 0x3F	; 63
    1c30:	90 83       	st	Z, r25
	
	if( CANMOB_RX_IDX == u8MOBIndex )
    1c32:	81 11       	cpse	r24, r1
    1c34:	5d c0       	rjmp	.+186    	; 0x1cf0 <CANMOBInterrupt+0x10e>
	{
		// TX success?  Just clear it since this is the RX context
		if( CANSTMOB & (1 << TXOK) )
    1c36:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    1c3a:	86 ff       	sbrs	r24, 6
    1c3c:	09 c0       	rjmp	.+18     	; 0x1c50 <CANMOBInterrupt+0x6e>
		{
			// Clear it
			CANSTMOB &= ~(1 << TXOK);
    1c3e:	ee ee       	ldi	r30, 0xEE	; 238
    1c40:	f0 e0       	ldi	r31, 0x00	; 0
    1c42:	80 81       	ld	r24, Z
    1c44:	8f 7b       	andi	r24, 0xBF	; 191
    1c46:	80 83       	st	Z, r24
            sg_bBusy = false;
    1c48:	10 92 63 07 	sts	0x0763, r1	; 0x800763 <sg_bBusy>
            sg_bInRetransmit = false;  // Clear flag on success	
    1c4c:	10 92 5f 07 	sts	0x075F, r1	; 0x80075f <sg_bInRetransmit>
		}
		// RX success?
		if( CANSTMOB & (1 << RXOK) )
    1c50:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    1c54:	85 ff       	sbrs	r24, 5
    1c56:	38 c0       	rjmp	.+112    	; 0x1cc8 <CANMOBInterrupt+0xe6>
		{
			// Clear it
			CANSTMOB &= ~(1 << RXOK);
    1c58:	ee ee       	ldi	r30, 0xEE	; 238
    1c5a:	f0 e0       	ldi	r31, 0x00	; 0
    1c5c:	80 81       	ld	r24, Z
    1c5e:	8f 7d       	andi	r24, 0xDF	; 223
    1c60:	80 83       	st	Z, r24
		
			if( sg_pfRXCallback )
    1c62:	c0 90 49 07 	lds	r12, 0x0749	; 0x800749 <sg_pfRXCallback>
    1c66:	d0 90 4a 07 	lds	r13, 0x074A	; 0x80074a <sg_pfRXCallback+0x1>
    1c6a:	c1 14       	cp	r12, r1
    1c6c:	d1 04       	cpc	r13, r1
    1c6e:	61 f1       	breq	.+88     	; 0x1cc8 <CANMOBInterrupt+0xe6>
			{
				ECANMessageType eType;
				uint16_t u16ID = 0;
				uint8_t u8Data[8];
				uint8_t u8DataLen = CANCDMOB & 0x0f;
    1c70:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    1c74:	8f 70       	andi	r24, 0x0F	; 15
    1c76:	f8 2e       	mov	r15, r24
				uint8_t u8Index = 0;
			
				// Grab the messageID from the identifier registers
				u16ID = ((uint16_t)CANIDT1) << 3;
    1c78:	40 91 f3 00 	lds	r20, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f00f3>
    1c7c:	50 e0       	ldi	r21, 0x00	; 0
    1c7e:	44 0f       	add	r20, r20
    1c80:	55 1f       	adc	r21, r21
    1c82:	44 0f       	add	r20, r20
    1c84:	55 1f       	adc	r21, r21
    1c86:	44 0f       	add	r20, r20
    1c88:	55 1f       	adc	r21, r21
				u16ID |= CANIDT2 >> 5;
    1c8a:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f00f2>
    1c8e:	82 95       	swap	r24
    1c90:	86 95       	lsr	r24
    1c92:	87 70       	andi	r24, 0x07	; 7
    1c94:	48 2b       	or	r20, r24
			{
				ECANMessageType eType;
				uint16_t u16ID = 0;
				uint8_t u8Data[8];
				uint8_t u8DataLen = CANCDMOB & 0x0f;
				uint8_t u8Index = 0;
    1c96:	90 e0       	ldi	r25, 0x00	; 0
				// Grab the messageID from the identifier registers
				u16ID = ((uint16_t)CANIDT1) << 3;
				u16ID |= CANIDT2 >> 5;
			
				// Pull the data out into a temp buffer
				while( u8Index < u8DataLen )
    1c98:	0a c0       	rjmp	.+20     	; 0x1cae <CANMOBInterrupt+0xcc>
				{
					u8Data[u8Index] = CANMSG;
    1c9a:	20 91 fa 00 	lds	r18, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
    1c9e:	e1 e0       	ldi	r30, 0x01	; 1
    1ca0:	f0 e0       	ldi	r31, 0x00	; 0
    1ca2:	ec 0f       	add	r30, r28
    1ca4:	fd 1f       	adc	r31, r29
    1ca6:	e9 0f       	add	r30, r25
    1ca8:	f1 1d       	adc	r31, r1
    1caa:	20 83       	st	Z, r18
					u8Index++;
    1cac:	9f 5f       	subi	r25, 0xFF	; 255
				// Grab the messageID from the identifier registers
				u16ID = ((uint16_t)CANIDT1) << 3;
				u16ID |= CANIDT2 >> 5;
			
				// Pull the data out into a temp buffer
				while( u8Index < u8DataLen )
    1cae:	9f 15       	cp	r25, r15
    1cb0:	a0 f3       	brcs	.-24     	; 0x1c9a <CANMOBInterrupt+0xb8>
					u8Data[u8Index] = CANMSG;
					u8Index++;
				}
			
				// Lookup ID to see if it matches one of ours
				eType = CANLookupCommand( u16ID );
    1cb2:	ca 01       	movw	r24, r20
    1cb4:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <CANLookupCommand>
			
				if( eType != ECANMessageType_MAX )
    1cb8:	82 31       	cpi	r24, 0x12	; 18
    1cba:	31 f0       	breq	.+12     	; 0x1cc8 <CANMOBInterrupt+0xe6>
				{
					// Call comamnd handler
					sg_pfRXCallback( eType, u8Data, u8DataLen );
    1cbc:	4f 2d       	mov	r20, r15
    1cbe:	be 01       	movw	r22, r28
    1cc0:	6f 5f       	subi	r22, 0xFF	; 255
    1cc2:	7f 4f       	sbci	r23, 0xFF	; 255
    1cc4:	f6 01       	movw	r30, r12
    1cc6:	09 95       	icall
				}
			}
		}
	
		// If receive error, clear the bits
		if( CANSTMOB & ((1 << SERR) | (1 << CERR) | (1 << FERR)) )
    1cc8:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    1ccc:	8e 70       	andi	r24, 0x0E	; 14
    1cce:	29 f0       	breq	.+10     	; 0x1cda <CANMOBInterrupt+0xf8>
		{
			// Clear it.  Just ignore
			CANSTMOB &= ~((1 << SERR) | (1 << CERR) | (1 << FERR));
    1cd0:	ee ee       	ldi	r30, 0xEE	; 238
    1cd2:	f0 e0       	ldi	r31, 0x00	; 0
    1cd4:	80 81       	ld	r24, Z
    1cd6:	81 7f       	andi	r24, 0xF1	; 241
    1cd8:	80 83       	st	Z, r24
		}
	
		// Re-enable RX now
		CANIE2 |= (1 << u8MOBIndex);
    1cda:	ee ed       	ldi	r30, 0xDE	; 222
    1cdc:	f0 e0       	ldi	r31, 0x00	; 0
    1cde:	80 81       	ld	r24, Z
    1ce0:	08 2b       	or	r16, r24
    1ce2:	00 83       	st	Z, r16
		CANCDMOB |= (1 << CONMOB1);
    1ce4:	ef ee       	ldi	r30, 0xEF	; 239
    1ce6:	f0 e0       	ldi	r31, 0x00	; 0
    1ce8:	80 81       	ld	r24, Z
    1cea:	80 68       	ori	r24, 0x80	; 128
    1cec:	80 83       	st	Z, r24
    1cee:	34 c0       	rjmp	.+104    	; 0x1d58 <CANMOBInterrupt+0x176>
	}
	else if( CANMOB_TX_IDX == u8MOBIndex )
    1cf0:	81 30       	cpi	r24, 0x01	; 1
    1cf2:	91 f5       	brne	.+100    	; 0x1d58 <CANMOBInterrupt+0x176>
	{
		if( CANSTMOB & (1 << TXOK) )
    1cf4:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    1cf8:	86 ff       	sbrs	r24, 6
    1cfa:	07 c0       	rjmp	.+14     	; 0x1d0a <CANMOBInterrupt+0x128>
		{
			// Clear it
			CANSTMOB &= ~(1 << TXOK);
    1cfc:	ee ee       	ldi	r30, 0xEE	; 238
    1cfe:	f0 e0       	ldi	r31, 0x00	; 0
    1d00:	80 81       	ld	r24, Z
    1d02:	8f 7b       	andi	r24, 0xBF	; 191
    1d04:	80 83       	st	Z, r24
		
			sg_bBusy = false;
    1d06:	10 92 63 07 	sts	0x0763, r1	; 0x800763 <sg_bBusy>
		}
		
		// RX success, just clear it since this is the TX context
		if( CANSTMOB & (1 << RXOK) )
    1d0a:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    1d0e:	85 ff       	sbrs	r24, 5
    1d10:	05 c0       	rjmp	.+10     	; 0x1d1c <CANMOBInterrupt+0x13a>
		{
			// Clear it
			CANSTMOB &= ~(1 << RXOK);
    1d12:	ee ee       	ldi	r30, 0xEE	; 238
    1d14:	f0 e0       	ldi	r31, 0x00	; 0
    1d16:	80 81       	ld	r24, Z
    1d18:	8f 7d       	andi	r24, 0xDF	; 223
    1d1a:	80 83       	st	Z, r24
		}

		// If TX Error on transmit (collision with another device)
		// -or- ACK error (nobody listening),
		// retry send
		if( CANSTMOB & ((1 << BERR) | (1 << AERR) | (1 << SERR)) )
    1d1c:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    1d20:	89 71       	andi	r24, 0x19	; 25
    1d22:	d1 f0       	breq	.+52     	; 0x1d58 <CANMOBInterrupt+0x176>
		{
			// Clear it
			CANSTMOB &= ~((1 << BERR) | (1 << AERR) | (1 << SERR));
    1d24:	ee ee       	ldi	r30, 0xEE	; 238
    1d26:	f0 e0       	ldi	r31, 0x00	; 0
    1d28:	80 81       	ld	r24, Z
    1d2a:	86 7e       	andi	r24, 0xE6	; 230
    1d2c:	80 83       	st	Z, r24

			if( sg_u8TransmitAttempts < 20 )
    1d2e:	80 91 62 07 	lds	r24, 0x0762	; 0x800762 <sg_u8TransmitAttempts>
    1d32:	84 31       	cpi	r24, 0x14	; 20
    1d34:	68 f4       	brcc	.+26     	; 0x1d50 <CANMOBInterrupt+0x16e>
			{
				// Retransmit now
               sg_bInRetransmit = true;  // Set flag before retry
    1d36:	81 e0       	ldi	r24, 0x01	; 1
    1d38:	80 93 5f 07 	sts	0x075F, r24	; 0x80075f <sg_bInRetransmit>
               CANSendMessageInternal( sg_eLastTXType, sg_u8LastTXData, sg_u8LastTXDataLen, true );
    1d3c:	21 e0       	ldi	r18, 0x01	; 1
    1d3e:	40 91 60 07 	lds	r20, 0x0760	; 0x800760 <sg_u8LastTXDataLen>
    1d42:	69 e3       	ldi	r22, 0x39	; 57
    1d44:	77 e0       	ldi	r23, 0x07	; 7
    1d46:	80 91 61 07 	lds	r24, 0x0761	; 0x800761 <sg_eLastTXType>
    1d4a:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <CANSendMessageInternal>
    1d4e:	04 c0       	rjmp	.+8      	; 0x1d58 <CANMOBInterrupt+0x176>
			}
			else
			{
				// Retries exhausted.  Give up
				sg_bBusy = false;
    1d50:	10 92 63 07 	sts	0x0763, r1	; 0x800763 <sg_bBusy>
                sg_bInRetransmit = false;
    1d54:	10 92 5f 07 	sts	0x075F, r1	; 0x80075f <sg_bInRetransmit>
			}
		}
	}
}
    1d58:	28 96       	adiw	r28, 0x08	; 8
    1d5a:	0f b6       	in	r0, 0x3f	; 63
    1d5c:	f8 94       	cli
    1d5e:	de bf       	out	0x3e, r29	; 62
    1d60:	0f be       	out	0x3f, r0	; 63
    1d62:	cd bf       	out	0x3d, r28	; 61
    1d64:	df 91       	pop	r29
    1d66:	cf 91       	pop	r28
    1d68:	1f 91       	pop	r17
    1d6a:	0f 91       	pop	r16
    1d6c:	ff 90       	pop	r15
    1d6e:	df 90       	pop	r13
    1d70:	cf 90       	pop	r12
    1d72:	08 95       	ret

Disassembly of section .text.__vector_18:

000022c2 <__vector_18>:

// Generic CAN interrupt handler
// Check interrrupt sources and clear them (by servicing or explicit clearing)
ISR(CAN_INT_vect, ISR_BLOCK)
{
    22c2:	1f 92       	push	r1
    22c4:	0f 92       	push	r0
    22c6:	0f b6       	in	r0, 0x3f	; 63
    22c8:	0f 92       	push	r0
    22ca:	11 24       	eor	r1, r1
    22cc:	0f 93       	push	r16
    22ce:	1f 93       	push	r17
    22d0:	2f 93       	push	r18
    22d2:	3f 93       	push	r19
    22d4:	4f 93       	push	r20
    22d6:	5f 93       	push	r21
    22d8:	6f 93       	push	r22
    22da:	7f 93       	push	r23
    22dc:	8f 93       	push	r24
    22de:	9f 93       	push	r25
    22e0:	af 93       	push	r26
    22e2:	bf 93       	push	r27
    22e4:	cf 93       	push	r28
    22e6:	df 93       	push	r29
    22e8:	ef 93       	push	r30
    22ea:	ff 93       	push	r31
	// Save state we'll need to restore
	uint8_t saved_cangie = CANGIE;
    22ec:	eb ed       	ldi	r30, 0xDB	; 219
    22ee:	f0 e0       	ldi	r31, 0x00	; 0
    22f0:	d0 81       	ld	r29, Z
	uint8_t saved_canie2 = CANIE2;	// Temporarily disable CAN interrupts to prevent reentry
    22f2:	10 91 de 00 	lds	r17, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7f00de>
	CANGIE &= (uint8_t)~(1 << ENIT);
    22f6:	80 81       	ld	r24, Z
    22f8:	8f 77       	andi	r24, 0x7F	; 127
    22fa:	80 83       	st	Z, r24

	// Do NOT re-enable global interrupts - this causes race conditions!
	
	 uint8_t sit = CANSIT2;
    22fc:	c0 91 e0 00 	lds	r28, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f00e0>
	 
	 // Most common interrupts first  *claude
	 if(sit & (1 << CANMOB_RX_IDX)) {
    2300:	c0 ff       	sbrs	r28, 0
    2302:	0c c0       	rjmp	.+24     	; 0x231c <__vector_18+0x5a>
		 CANMOBInterrupt(CANMOB_RX_IDX);
    2304:	80 e0       	ldi	r24, 0x00	; 0
    2306:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <CANMOBInterrupt>
		 CANMOBSet(CANMOB_RX_IDX, &sg_sMOBGenericReceive, NULL, 0);
    230a:	00 e0       	ldi	r16, 0x00	; 0
    230c:	20 e0       	ldi	r18, 0x00	; 0
    230e:	30 e0       	ldi	r19, 0x00	; 0
    2310:	4c e4       	ldi	r20, 0x4C	; 76
    2312:	52 e0       	ldi	r21, 0x02	; 2
    2314:	60 e0       	ldi	r22, 0x00	; 0
    2316:	80 e0       	ldi	r24, 0x00	; 0
    2318:	0e 94 19 0a 	call	0x1432	; 0x1432 <CANMOBSet>
	 }
	 
	
	// Check TX MOB
	if( sit & (1 << CANMOB_TX_IDX) )
    231c:	c1 ff       	sbrs	r28, 1
    231e:	03 c0       	rjmp	.+6      	; 0x2326 <__vector_18+0x64>
	{
		CANMOBInterrupt( CANMOB_TX_IDX );
    2320:	81 e0       	ldi	r24, 0x01	; 1
    2322:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <CANMOBInterrupt>
	}
	
	// Now the generic, non-MOB interrupts (some of which may have already been handled by the MOB handler)
	
	// Bus Off interrupt
	if( CANGIT & (1 << BOFFIT) )
    2326:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    232a:	86 ff       	sbrs	r24, 6
    232c:	03 c0       	rjmp	.+6      	; 0x2334 <__vector_18+0x72>
	{
		// Just clear it for now
		CANGIT = (1 << BOFFIT);
    232e:	80 e4       	ldi	r24, 0x40	; 64
    2330:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
	}
	
	// Frame buffer receive (burst receive interrupt)
	// This should not be used
	if( CANGIT & (1 << BXOK) )
    2334:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    2338:	84 ff       	sbrs	r24, 4
    233a:	0a c0       	rjmp	.+20     	; 0x2350 <__vector_18+0x8e>
	{
		MBASSERT(0);
    233c:	42 ef       	ldi	r20, 0xF2	; 242
    233e:	51 e0       	ldi	r21, 0x01	; 1
    2340:	69 ef       	ldi	r22, 0xF9	; 249
    2342:	71 e0       	ldi	r23, 0x01	; 1
    2344:	80 e0       	ldi	r24, 0x00	; 0
    2346:	0e 94 0c 22 	call	0x4418	; 0x4418 <PlatformAssert>
		
		// TODO: Must write the CONMOB fields of the MOB that interrupted first?
		// Just clear it for now
		CANGIT = (1 << BXOK);
    234a:	80 e1       	ldi	r24, 0x10	; 16
    234c:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
	}
	
	// Bit stuffing error on receive
	if( CANGIT & (1 << SERG) )
    2350:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    2354:	83 ff       	sbrs	r24, 3
    2356:	03 c0       	rjmp	.+6      	; 0x235e <__vector_18+0x9c>
	{
		// Just clear it for now.  Ignored.
		CANGIT = (1 << SERG);
    2358:	88 e0       	ldi	r24, 0x08	; 8
    235a:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
	}
	
	// CRC error on receive
	if( CANGIT & (1 << CERG) )
    235e:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    2362:	82 ff       	sbrs	r24, 2
    2364:	03 c0       	rjmp	.+6      	; 0x236c <__vector_18+0xaa>
	{
		// Just clear it for now.  Ignored.
		CANGIT = (1 << CERG);
    2366:	84 e0       	ldi	r24, 0x04	; 4
    2368:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
	}
	
	// Form error
	if( CANGIT & (1 << FERG) )
    236c:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    2370:	81 ff       	sbrs	r24, 1
    2372:	03 c0       	rjmp	.+6      	; 0x237a <__vector_18+0xb8>
	{
		// If detected form error on transmit, could be duplicate to MOB error interrupt (see 16.8.2 - Interrupt Behavior)
		// Ignore this one
		
		// Just clear it for now.  Ignored.
		CANGIT = (1 << FERG);
    2374:	82 e0       	ldi	r24, 0x02	; 2
    2376:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
	}
	
	// ACK missing on transmit (nobody's listening! (or failure on transmit???))
	if( CANGIT & (1 << AERG) )
    237a:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    237e:	80 ff       	sbrs	r24, 0
    2380:	13 c0       	rjmp	.+38     	; 0x23a8 <__vector_18+0xe6>
	{
		// Clear the interrupt
		CANGIT = (1 << AERG);
    2382:	81 e0       	ldi	r24, 0x01	; 1
    2384:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
		
		if( sg_u8TransmitAttempts < 20 )
    2388:	80 91 62 07 	lds	r24, 0x0762	; 0x800762 <sg_u8TransmitAttempts>
    238c:	84 31       	cpi	r24, 0x14	; 20
    238e:	50 f4       	brcc	.+20     	; 0x23a4 <__vector_18+0xe2>
		{
			// Retransmit now
			CANSendMessageInternal( sg_eLastTXType, sg_u8LastTXData, sg_u8LastTXDataLen, true );
    2390:	21 e0       	ldi	r18, 0x01	; 1
    2392:	40 91 60 07 	lds	r20, 0x0760	; 0x800760 <sg_u8LastTXDataLen>
    2396:	69 e3       	ldi	r22, 0x39	; 57
    2398:	77 e0       	ldi	r23, 0x07	; 7
    239a:	80 91 61 07 	lds	r24, 0x0761	; 0x800761 <sg_eLastTXType>
    239e:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <CANSendMessageInternal>
    23a2:	02 c0       	rjmp	.+4      	; 0x23a8 <__vector_18+0xe6>
		}
		else
		{
			// Retries exhausted.  Give up
			sg_bBusy = false;
    23a4:	10 92 63 07 	sts	0x0763, r1	; 0x800763 <sg_bBusy>
		}
	}

	// Reenable CAN general interrupt	
//	CANGIE |= (1 << ENIT);
    CANIE2 = saved_canie2;
    23a8:	10 93 de 00 	sts	0x00DE, r17	; 0x8000de <__TEXT_REGION_LENGTH__+0x7f00de>
    CANGIE = saved_cangie;
    23ac:	d0 93 db 00 	sts	0x00DB, r29	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f00db>
}
    23b0:	ff 91       	pop	r31
    23b2:	ef 91       	pop	r30
    23b4:	df 91       	pop	r29
    23b6:	cf 91       	pop	r28
    23b8:	bf 91       	pop	r27
    23ba:	af 91       	pop	r26
    23bc:	9f 91       	pop	r25
    23be:	8f 91       	pop	r24
    23c0:	7f 91       	pop	r23
    23c2:	6f 91       	pop	r22
    23c4:	5f 91       	pop	r21
    23c6:	4f 91       	pop	r20
    23c8:	3f 91       	pop	r19
    23ca:	2f 91       	pop	r18
    23cc:	1f 91       	pop	r17
    23ce:	0f 91       	pop	r16
    23d0:	0f 90       	pop	r0
    23d2:	0f be       	out	0x3f, r0	; 63
    23d4:	0f 90       	pop	r0
    23d6:	1f 90       	pop	r1
    23d8:	18 95       	reti

Disassembly of section .text.CANSendMessage:

000049a6 <CANSendMessage>:
					 uint8_t* pu8Data,
					 uint8_t u8DataLen )
{
	// If we're busy, kick it back so we're cooperatively multitasking
	// rather than spin locking
	if (sg_bBusy)
    49a6:	90 91 63 07 	lds	r25, 0x0763	; 0x800763 <sg_bBusy>
    49aa:	91 11       	cpse	r25, r1
    49ac:	05 c0       	rjmp	.+10     	; 0x49b8 <CANSendMessage+0x12>
	{
		return(false);
	}

	CANSendMessageInternal( eType, pu8Data, u8DataLen, false );
    49ae:	20 e0       	ldi	r18, 0x00	; 0
    49b0:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <CANSendMessageInternal>
	return( true );
    49b4:	81 e0       	ldi	r24, 0x01	; 1
    49b6:	08 95       	ret
{
	// If we're busy, kick it back so we're cooperatively multitasking
	// rather than spin locking
	if (sg_bBusy)
	{
		return(false);
    49b8:	80 e0       	ldi	r24, 0x00	; 0
	}

	CANSendMessageInternal( eType, pu8Data, u8DataLen, false );
	return( true );
}
    49ba:	08 95       	ret

Disassembly of section .text.CANSetRXCallback:

00004b22 <CANSetRXCallback>:

void CANSetRXCallback( void (*pfCallback)(ECANMessageType eType, uint8_t* pu8Data, uint8_t u8DataLen) )
{
	sg_pfRXCallback = pfCallback;
    4b22:	90 93 4a 07 	sts	0x074A, r25	; 0x80074a <sg_pfRXCallback+0x1>
    4b26:	80 93 49 07 	sts	0x0749, r24	; 0x800749 <sg_pfRXCallback>
    4b2a:	08 95       	ret

Disassembly of section .text.CANInit:

0000324e <CANInit>:
}

void CANInit( void )
{
    324e:	0f 93       	push	r16
    3250:	cf 93       	push	r28
	// Init clock
	// See datasheet table 16-2.
	// For 8Mhz, set CAN rate to 500 Kbps
	CANBT1 = 0x02;
    3252:	c2 e0       	ldi	r28, 0x02	; 2
    3254:	c0 93 e2 00 	sts	0x00E2, r28	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f00e2>
	CANBT2 = 0x04;
    3258:	84 e0       	ldi	r24, 0x04	; 4
    325a:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f00e3>
	CANBT3 = 0x12;
    325e:	82 e1       	ldi	r24, 0x12	; 18
    3260:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7f00e4>
	
	// Init message objects (MOBs) since there are no defaults at reset
	CANMOBSet( 0, &sg_sMOBDisabled, NULL, 0 );
    3264:	00 e0       	ldi	r16, 0x00	; 0
    3266:	20 e0       	ldi	r18, 0x00	; 0
    3268:	30 e0       	ldi	r19, 0x00	; 0
    326a:	44 e5       	ldi	r20, 0x54	; 84
    326c:	52 e0       	ldi	r21, 0x02	; 2
    326e:	60 e0       	ldi	r22, 0x00	; 0
    3270:	80 e0       	ldi	r24, 0x00	; 0
    3272:	0e 94 19 0a 	call	0x1432	; 0x1432 <CANMOBSet>
	CANMOBSet( 1, &sg_sMOBDisabled, NULL, 0 );
    3276:	20 e0       	ldi	r18, 0x00	; 0
    3278:	30 e0       	ldi	r19, 0x00	; 0
    327a:	44 e5       	ldi	r20, 0x54	; 84
    327c:	52 e0       	ldi	r21, 0x02	; 2
    327e:	60 e0       	ldi	r22, 0x00	; 0
    3280:	81 e0       	ldi	r24, 0x01	; 1
    3282:	0e 94 19 0a 	call	0x1432	; 0x1432 <CANMOBSet>
	CANMOBSet( 2, &sg_sMOBDisabled, NULL, 0 );
    3286:	20 e0       	ldi	r18, 0x00	; 0
    3288:	30 e0       	ldi	r19, 0x00	; 0
    328a:	44 e5       	ldi	r20, 0x54	; 84
    328c:	52 e0       	ldi	r21, 0x02	; 2
    328e:	60 e0       	ldi	r22, 0x00	; 0
    3290:	82 e0       	ldi	r24, 0x02	; 2
    3292:	0e 94 19 0a 	call	0x1432	; 0x1432 <CANMOBSet>
	CANMOBSet( 3, &sg_sMOBDisabled, NULL, 0 );
    3296:	20 e0       	ldi	r18, 0x00	; 0
    3298:	30 e0       	ldi	r19, 0x00	; 0
    329a:	44 e5       	ldi	r20, 0x54	; 84
    329c:	52 e0       	ldi	r21, 0x02	; 2
    329e:	60 e0       	ldi	r22, 0x00	; 0
    32a0:	83 e0       	ldi	r24, 0x03	; 3
    32a2:	0e 94 19 0a 	call	0x1432	; 0x1432 <CANMOBSet>
	CANMOBSet( 4, &sg_sMOBDisabled, NULL, 0 );
    32a6:	20 e0       	ldi	r18, 0x00	; 0
    32a8:	30 e0       	ldi	r19, 0x00	; 0
    32aa:	44 e5       	ldi	r20, 0x54	; 84
    32ac:	52 e0       	ldi	r21, 0x02	; 2
    32ae:	60 e0       	ldi	r22, 0x00	; 0
    32b0:	84 e0       	ldi	r24, 0x04	; 4
    32b2:	0e 94 19 0a 	call	0x1432	; 0x1432 <CANMOBSet>
	CANMOBSet( 5, &sg_sMOBDisabled, NULL, 0 );
    32b6:	20 e0       	ldi	r18, 0x00	; 0
    32b8:	30 e0       	ldi	r19, 0x00	; 0
    32ba:	44 e5       	ldi	r20, 0x54	; 84
    32bc:	52 e0       	ldi	r21, 0x02	; 2
    32be:	60 e0       	ldi	r22, 0x00	; 0
    32c0:	85 e0       	ldi	r24, 0x05	; 5
    32c2:	0e 94 19 0a 	call	0x1432	; 0x1432 <CANMOBSet>
	
	// Setup generic RX
	CANMOBSet( CANMOB_RX_IDX, &sg_sMOBGenericReceive, NULL, 0 );
    32c6:	20 e0       	ldi	r18, 0x00	; 0
    32c8:	30 e0       	ldi	r19, 0x00	; 0
    32ca:	4c e4       	ldi	r20, 0x4C	; 76
    32cc:	52 e0       	ldi	r21, 0x02	; 2
    32ce:	60 e0       	ldi	r22, 0x00	; 0
    32d0:	80 e0       	ldi	r24, 0x00	; 0
    32d2:	0e 94 19 0a 	call	0x1432	; 0x1432 <CANMOBSet>
	
	// Enable general CAN interrupts
	CANGIE = (1 << ENIT) | (1 << ENRX) | (1 << ENTX) | (1 << ENERR) | (1 << ENBX) | (1 << ENERG);
    32d6:	8e eb       	ldi	r24, 0xBE	; 190
    32d8:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f00db>

//	CANGIE &= ~(1 << ENOVRT);  // Disable CAN timer overflow interrupt

	// Enable the bus
	CANGCON = (1 << ENASTB);
    32dc:	c0 93 d8 00 	sts	0x00D8, r28	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f00d8>
	sg_bBusy = false;
    32e0:	10 92 63 07 	sts	0x0763, r1	; 0x800763 <sg_bBusy>
}
    32e4:	cf 91       	pop	r28
    32e6:	0f 91       	pop	r16
    32e8:	08 95       	ret

Disassembly of section .text.DebugOut:

00004ac6 <DebugOut>:
}

#endif

void DebugOut( const char* peFormat, ... )
{
    4ac6:	cf 93       	push	r28
    4ac8:	df 93       	push	r29
    4aca:	cd b7       	in	r28, 0x3d	; 61
    4acc:	de b7       	in	r29, 0x3e	; 62
	
	va_end( args );	 */
	
	//DebugSerialSend( (uint8_t*)u8Buffer, strlen(u8Buffer) );
#endif
}
    4ace:	df 91       	pop	r29
    4ad0:	cf 91       	pop	r28
    4ad2:	08 95       	ret

Disassembly of section .text.EEPROMRead:

00004a3c <EEPROMRead>:
}

uint8_t EEPROMRead(uint16_t u16Address)
{
	// Wait for any completion of writes, etc..
	while (EECR & (1 << EEWE));
    4a3c:	f9 99       	sbic	0x1f, 1	; 31
    4a3e:	fe cf       	rjmp	.-4      	; 0x4a3c <EEPROMRead>

	// Set address	
	EEAR = u16Address;
    4a40:	92 bd       	out	0x22, r25	; 34
    4a42:	81 bd       	out	0x21, r24	; 33
	
	// Start EEPROM read
	EECR |= (1 << EERE);
    4a44:	8f b3       	in	r24, 0x1f	; 31
    4a46:	81 60       	ori	r24, 0x01	; 1
    4a48:	8f bb       	out	0x1f, r24	; 31
	
	// Return the data
	return(EEDR);
    4a4a:	80 b5       	in	r24, 0x20	; 32
    4a4c:	08 95       	ret

Disassembly of section .text.I2CBitDelay:

00004ad4 <I2CBitDelay>:
#define SDA_SET_INPUT()			(I2C_PORT_DDR &= ((uint8_t) ~(1 << I2C_SDA_PIN))); SDA_HIGH()

// Delays for one I2C bit's worth of time
static void I2CBitDelay(void)
{
	Delay(10);
    4ad4:	6a e0       	ldi	r22, 0x0A	; 10
    4ad6:	70 e0       	ldi	r23, 0x00	; 0
    4ad8:	80 e0       	ldi	r24, 0x00	; 0
    4ada:	90 e0       	ldi	r25, 0x00	; 0
    4adc:	0e 94 42 1f 	call	0x3e84	; 0x3e84 <Delay>
    4ae0:	08 95       	ret

Disassembly of section .text.I2CStart:

000043c0 <I2CStart>:

// Send an I2C start sequence and quantize foreground code to the overflow
// timer
void I2CStart(void)
{
	SDA_SET_OUTPUT();
    43c0:	8a b1       	in	r24, 0x0a	; 10
    43c2:	82 60       	ori	r24, 0x02	; 2
    43c4:	8a b9       	out	0x0a, r24	; 10
	SDA_HIGH();
    43c6:	8b b1       	in	r24, 0x0b	; 11
    43c8:	82 60       	ori	r24, 0x02	; 2
    43ca:	8b b9       	out	0x0b, r24	; 11
	SCL_HIGH();
    43cc:	8b b1       	in	r24, 0x0b	; 11
    43ce:	81 60       	ori	r24, 0x01	; 1
    43d0:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    43d2:	0e 94 6a 25 	call	0x4ad4	; 0x4ad4 <I2CBitDelay>
	SDA_LOW();
    43d6:	8b b1       	in	r24, 0x0b	; 11
    43d8:	8d 7f       	andi	r24, 0xFD	; 253
    43da:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    43dc:	0e 94 6a 25 	call	0x4ad4	; 0x4ad4 <I2CBitDelay>
	SCL_LOW();
    43e0:	8b b1       	in	r24, 0x0b	; 11
    43e2:	8e 7f       	andi	r24, 0xFE	; 254
    43e4:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    43e6:	0e 94 6a 25 	call	0x4ad4	; 0x4ad4 <I2CBitDelay>
    43ea:	08 95       	ret

Disassembly of section .text.I2CStop:

0000458e <I2CStop>:
}

// Send an I2C stop sequence
void I2CStop(void)
{
	SDA_LOW();
    458e:	8b b1       	in	r24, 0x0b	; 11
    4590:	8d 7f       	andi	r24, 0xFD	; 253
    4592:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    4594:	0e 94 6a 25 	call	0x4ad4	; 0x4ad4 <I2CBitDelay>
	SCL_HIGH();
    4598:	8b b1       	in	r24, 0x0b	; 11
    459a:	81 60       	ori	r24, 0x01	; 1
    459c:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    459e:	0e 94 6a 25 	call	0x4ad4	; 0x4ad4 <I2CBitDelay>
	SDA_SET_INPUT();
    45a2:	8a b1       	in	r24, 0x0a	; 10
    45a4:	8d 7f       	andi	r24, 0xFD	; 253
    45a6:	8a b9       	out	0x0a, r24	; 10
    45a8:	8b b1       	in	r24, 0x0b	; 11
    45aa:	82 60       	ori	r24, 0x02	; 2
    45ac:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    45ae:	0e 94 6a 25 	call	0x4ad4	; 0x4ad4 <I2CBitDelay>
    45b2:	08 95       	ret

Disassembly of section .text.I2CUnstick:

000040d8 <I2CUnstick>:
}

// Unsticks an I2C bus
void I2CUnstick(void)
{
    40d8:	cf 93       	push	r28
	uint8_t u8UnstickBits = 64;

	SCL_SET_OUTPUT();
    40da:	8a b1       	in	r24, 0x0a	; 10
    40dc:	81 60       	ori	r24, 0x01	; 1
    40de:	8a b9       	out	0x0a, r24	; 10
	SDA_SET_OUTPUT();
    40e0:	8a b1       	in	r24, 0x0a	; 10
    40e2:	82 60       	ori	r24, 0x02	; 2
    40e4:	8a b9       	out	0x0a, r24	; 10
}

// Unsticks an I2C bus
void I2CUnstick(void)
{
	uint8_t u8UnstickBits = 64;
    40e6:	c0 e4       	ldi	r28, 0x40	; 64

	SCL_SET_OUTPUT();
	SDA_SET_OUTPUT();
	
	while (u8UnstickBits)
    40e8:	11 c0       	rjmp	.+34     	; 0x410c <I2CUnstick+0x34>
	{
		SCL_LOW();
    40ea:	8b b1       	in	r24, 0x0b	; 11
    40ec:	8e 7f       	andi	r24, 0xFE	; 254
    40ee:	8b b9       	out	0x0b, r24	; 11
		SDA_LOW();
    40f0:	8b b1       	in	r24, 0x0b	; 11
    40f2:	8d 7f       	andi	r24, 0xFD	; 253
    40f4:	8b b9       	out	0x0b, r24	; 11
		I2CBitDelay();
    40f6:	0e 94 6a 25 	call	0x4ad4	; 0x4ad4 <I2CBitDelay>
		SCL_HIGH();
    40fa:	8b b1       	in	r24, 0x0b	; 11
    40fc:	81 60       	ori	r24, 0x01	; 1
    40fe:	8b b9       	out	0x0b, r24	; 11
		SDA_HIGH();
    4100:	8b b1       	in	r24, 0x0b	; 11
    4102:	82 60       	ori	r24, 0x02	; 2
    4104:	8b b9       	out	0x0b, r24	; 11
		I2CBitDelay();
    4106:	0e 94 6a 25 	call	0x4ad4	; 0x4ad4 <I2CBitDelay>
		u8UnstickBits--;
    410a:	c1 50       	subi	r28, 0x01	; 1
	uint8_t u8UnstickBits = 64;

	SCL_SET_OUTPUT();
	SDA_SET_OUTPUT();
	
	while (u8UnstickBits)
    410c:	c1 11       	cpse	r28, r1
    410e:	ed cf       	rjmp	.-38     	; 0x40ea <I2CUnstick+0x12>
		SCL_HIGH();
		SDA_HIGH();
		I2CBitDelay();
		u8UnstickBits--;
	}
}
    4110:	cf 91       	pop	r28
    4112:	08 95       	ret

Disassembly of section .text.I2CTxByte:

00003a76 <I2CTxByte>:

// Sends a single I2C byte. Returns false if the byte is not acked, or true if it is.
bool I2CTxByte(uint8_t u8Byte)
{
    3a76:	cf 93       	push	r28
    3a78:	df 93       	push	r29
    3a7a:	d8 2f       	mov	r29, r24
	uint8_t u8Length = 8;			// 8 Bits to send
	bool bAck = false;

	SDA_SET_OUTPUT();
    3a7c:	8a b1       	in	r24, 0x0a	; 10
    3a7e:	82 60       	ori	r24, 0x02	; 2
    3a80:	8a b9       	out	0x0a, r24	; 10
}

// Sends a single I2C byte. Returns false if the byte is not acked, or true if it is.
bool I2CTxByte(uint8_t u8Byte)
{
	uint8_t u8Length = 8;			// 8 Bits to send
    3a82:	c8 e0       	ldi	r28, 0x08	; 8
	bool bAck = false;

	SDA_SET_OUTPUT();

	while (u8Length)
    3a84:	15 c0       	rjmp	.+42     	; 0x3ab0 <I2CTxByte+0x3a>
	{
		if (u8Byte & 0x80)
    3a86:	dd 23       	and	r29, r29
    3a88:	24 f4       	brge	.+8      	; 0x3a92 <I2CTxByte+0x1c>
		{
			SDA_HIGH();
    3a8a:	8b b1       	in	r24, 0x0b	; 11
    3a8c:	82 60       	ori	r24, 0x02	; 2
    3a8e:	8b b9       	out	0x0b, r24	; 11
    3a90:	03 c0       	rjmp	.+6      	; 0x3a98 <I2CTxByte+0x22>
		}
		else
		{
			SDA_LOW();
    3a92:	8b b1       	in	r24, 0x0b	; 11
    3a94:	8d 7f       	andi	r24, 0xFD	; 253
    3a96:	8b b9       	out	0x0b, r24	; 11
		}
		
		// Drive SCL high
		SCL_HIGH();
    3a98:	8b b1       	in	r24, 0x0b	; 11
    3a9a:	81 60       	ori	r24, 0x01	; 1
    3a9c:	8b b9       	out	0x0b, r24	; 11
		
		I2CBitDelay();
    3a9e:	0e 94 6a 25 	call	0x4ad4	; 0x4ad4 <I2CBitDelay>
		
		// Ensure SCL is low
		SCL_LOW();
    3aa2:	8b b1       	in	r24, 0x0b	; 11
    3aa4:	8e 7f       	andi	r24, 0xFE	; 254
    3aa6:	8b b9       	out	0x0b, r24	; 11
	
		// SDA Is now set. Delay.
		I2CBitDelay();
    3aa8:	0e 94 6a 25 	call	0x4ad4	; 0x4ad4 <I2CBitDelay>
		
		// Next bit
		u8Byte <<= 1;	
    3aac:	dd 0f       	add	r29, r29
		u8Length--;
    3aae:	c1 50       	subi	r28, 0x01	; 1
	uint8_t u8Length = 8;			// 8 Bits to send
	bool bAck = false;

	SDA_SET_OUTPUT();

	while (u8Length)
    3ab0:	c1 11       	cpse	r28, r1
    3ab2:	e9 cf       	rjmp	.-46     	; 0x3a86 <I2CTxByte+0x10>
		// Next bit
		u8Byte <<= 1;	
		u8Length--;
	}
	
	SDA_SET_INPUT();
    3ab4:	8a b1       	in	r24, 0x0a	; 10
    3ab6:	8d 7f       	andi	r24, 0xFD	; 253
    3ab8:	8a b9       	out	0x0a, r24	; 10
    3aba:	8b b1       	in	r24, 0x0b	; 11
    3abc:	82 60       	ori	r24, 0x02	; 2
    3abe:	8b b9       	out	0x0b, r24	; 11
	SCL_HIGH();
    3ac0:	8b b1       	in	r24, 0x0b	; 11
    3ac2:	81 60       	ori	r24, 0x01	; 1
    3ac4:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    3ac6:	0e 94 6a 25 	call	0x4ad4	; 0x4ad4 <I2CBitDelay>
	
	// See if the byte was acknowledged
	if (SDA_READ())
    3aca:	49 9b       	sbis	0x09, 1	; 9
	{
		bAck = false;
	}
	else
	{
		bAck = true;
    3acc:	c1 e0       	ldi	r28, 0x01	; 1
	}
	
	SCL_LOW();
    3ace:	8b b1       	in	r24, 0x0b	; 11
    3ad0:	8e 7f       	andi	r24, 0xFE	; 254
    3ad2:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    3ad4:	0e 94 6a 25 	call	0x4ad4	; 0x4ad4 <I2CBitDelay>
	return(bAck);
}
    3ad8:	8c 2f       	mov	r24, r28
    3ada:	df 91       	pop	r29
    3adc:	cf 91       	pop	r28
    3ade:	08 95       	ret

Disassembly of section .text.I2CRxByte:

0000389c <I2CRxByte>:

// Receives a single I2C byte and will optionally generate an ack at the end
uint8_t I2CRxByte(bool bAck)
{
    389c:	1f 93       	push	r17
    389e:	cf 93       	push	r28
    38a0:	df 93       	push	r29
    38a2:	18 2f       	mov	r17, r24
	uint8_t u8Data = 0;
	uint8_t u8Count = 8;
	
	SDA_SET_INPUT();
    38a4:	8a b1       	in	r24, 0x0a	; 10
    38a6:	8d 7f       	andi	r24, 0xFD	; 253
    38a8:	8a b9       	out	0x0a, r24	; 10
    38aa:	8b b1       	in	r24, 0x0b	; 11
    38ac:	82 60       	ori	r24, 0x02	; 2
    38ae:	8b b9       	out	0x0b, r24	; 11

// Receives a single I2C byte and will optionally generate an ack at the end
uint8_t I2CRxByte(bool bAck)
{
	uint8_t u8Data = 0;
	uint8_t u8Count = 8;
    38b0:	c8 e0       	ldi	r28, 0x08	; 8
}

// Receives a single I2C byte and will optionally generate an ack at the end
uint8_t I2CRxByte(bool bAck)
{
	uint8_t u8Data = 0;
    38b2:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t u8Count = 8;
	
	SDA_SET_INPUT();
	
	// Consume all 8 data bits
	while (u8Count)
    38b4:	0e c0       	rjmp	.+28     	; 0x38d2 <I2CRxByte+0x36>
	{
		u8Data <<= 1;
    38b6:	dd 0f       	add	r29, r29

		SCL_HIGH();
    38b8:	8b b1       	in	r24, 0x0b	; 11
    38ba:	81 60       	ori	r24, 0x01	; 1
    38bc:	8b b9       	out	0x0b, r24	; 11
		I2CBitDelay();
    38be:	0e 94 6a 25 	call	0x4ad4	; 0x4ad4 <I2CBitDelay>
			
		if (SDA_READ())
    38c2:	49 99       	sbic	0x09, 1	; 9
		{
			u8Data |= 1;
    38c4:	d1 60       	ori	r29, 0x01	; 1
		}
		
		SCL_LOW();
    38c6:	8b b1       	in	r24, 0x0b	; 11
    38c8:	8e 7f       	andi	r24, 0xFE	; 254
    38ca:	8b b9       	out	0x0b, r24	; 11
		I2CBitDelay();
    38cc:	0e 94 6a 25 	call	0x4ad4	; 0x4ad4 <I2CBitDelay>
		u8Count--;
    38d0:	c1 50       	subi	r28, 0x01	; 1
	uint8_t u8Count = 8;
	
	SDA_SET_INPUT();
	
	// Consume all 8 data bits
	while (u8Count)
    38d2:	c1 11       	cpse	r28, r1
    38d4:	f0 cf       	rjmp	.-32     	; 0x38b6 <I2CRxByte+0x1a>
		I2CBitDelay();
		u8Count--;
	}

	// See if we acknowledge this
	SDA_SET_OUTPUT();
    38d6:	8a b1       	in	r24, 0x0a	; 10
    38d8:	82 60       	ori	r24, 0x02	; 2
    38da:	8a b9       	out	0x0a, r24	; 10
	if (bAck)
    38dc:	11 23       	and	r17, r17
    38de:	21 f0       	breq	.+8      	; 0x38e8 <I2CRxByte+0x4c>
	{
		SDA_LOW();
    38e0:	8b b1       	in	r24, 0x0b	; 11
    38e2:	8d 7f       	andi	r24, 0xFD	; 253
    38e4:	8b b9       	out	0x0b, r24	; 11
    38e6:	03 c0       	rjmp	.+6      	; 0x38ee <I2CRxByte+0x52>
	}
	else
	{
		SDA_HIGH();
    38e8:	8b b1       	in	r24, 0x0b	; 11
    38ea:	82 60       	ori	r24, 0x02	; 2
    38ec:	8b b9       	out	0x0b, r24	; 11
	}
	
	I2CBitDelay();
    38ee:	0e 94 6a 25 	call	0x4ad4	; 0x4ad4 <I2CBitDelay>
	SCL_HIGH();
    38f2:	8b b1       	in	r24, 0x0b	; 11
    38f4:	81 60       	ori	r24, 0x01	; 1
    38f6:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    38f8:	0e 94 6a 25 	call	0x4ad4	; 0x4ad4 <I2CBitDelay>
	SCL_LOW();
    38fc:	8b b1       	in	r24, 0x0b	; 11
    38fe:	8e 7f       	andi	r24, 0xFE	; 254
    3900:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    3902:	0e 94 6a 25 	call	0x4ad4	; 0x4ad4 <I2CBitDelay>
	SDA_LOW();
    3906:	8b b1       	in	r24, 0x0b	; 11
    3908:	8d 7f       	andi	r24, 0xFD	; 253
    390a:	8b b9       	out	0x0b, r24	; 11

	return(u8Data);	
}
    390c:	8d 2f       	mov	r24, r29
    390e:	df 91       	pop	r29
    3910:	cf 91       	pop	r28
    3912:	1f 91       	pop	r17
    3914:	08 95       	ret

Disassembly of section .text.I2CSetup:

000043ec <I2CSetup>:
// Prepares the SCL/SDA pins for I2C operation and returns when the CPU is
// quantized to the timer (for consistent bit alignment)
void I2CSetup(void)
{
	// Deassert SCL and SDA
	SCL_HIGH();
    43ec:	8b b1       	in	r24, 0x0b	; 11
    43ee:	81 60       	ori	r24, 0x01	; 1
    43f0:	8b b9       	out	0x0b, r24	; 11
	SDA_HIGH();
    43f2:	8b b1       	in	r24, 0x0b	; 11
    43f4:	82 60       	ori	r24, 0x02	; 2
    43f6:	8b b9       	out	0x0b, r24	; 11

	// Set SCL and SDA lines as push/pull output drives
	SCL_SET_OUTPUT();
    43f8:	8a b1       	in	r24, 0x0a	; 10
    43fa:	81 60       	ori	r24, 0x01	; 1
    43fc:	8a b9       	out	0x0a, r24	; 10
	
	// Turn on SDA, set as an input
	SDA_SET_INPUT();
    43fe:	8a b1       	in	r24, 0x0a	; 10
    4400:	8d 7f       	andi	r24, 0xFD	; 253
    4402:	8a b9       	out	0x0a, r24	; 10
    4404:	8b b1       	in	r24, 0x0b	; 11
    4406:	82 60       	ori	r24, 0x02	; 2
    4408:	8b b9       	out	0x0b, r24	; 11
	
	Delay(20);
    440a:	64 e1       	ldi	r22, 0x14	; 20
    440c:	70 e0       	ldi	r23, 0x00	; 0
    440e:	80 e0       	ldi	r24, 0x00	; 0
    4410:	90 e0       	ldi	r25, 0x00	; 0
    4412:	0e 94 42 1f 	call	0x3e84	; 0x3e84 <Delay>
    4416:	08 95       	ret

Disassembly of section .text.I2CStartTransaction:

000044c6 <I2CStartTransaction>:

// Sets up the I2C pins, sends slave address/read/write byte, and waits for acknowledgment.
// Returns false if no device is responding.
bool I2CStartTransaction(uint8_t u8SlaveAddress,
						 bool bRead)
{
    44c6:	cf 93       	push	r28
    44c8:	df 93       	push	r29
    44ca:	c8 2f       	mov	r28, r24
    44cc:	d6 2f       	mov	r29, r22
	// Set up the pins for I2C operation
	I2CSetup();
    44ce:	0e 94 f6 21 	call	0x43ec	; 0x43ec <I2CSetup>
	
	// I2C Start condition
	I2CStart();
    44d2:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <I2CStart>

	// If it's a read operation, clear the lower bit
	if (bRead)
    44d6:	dd 23       	and	r29, r29
    44d8:	19 f0       	breq	.+6      	; 0x44e0 <I2CStartTransaction+0x1a>
	{
		u8SlaveAddress |= 1;
    44da:	8c 2f       	mov	r24, r28
    44dc:	81 60       	ori	r24, 0x01	; 1
    44de:	02 c0       	rjmp	.+4      	; 0x44e4 <I2CStartTransaction+0x1e>
	}
	else
	{
		// Otherwise set it
		u8SlaveAddress &= (uint8_t) (~1);
    44e0:	8c 2f       	mov	r24, r28
    44e2:	8e 7f       	andi	r24, 0xFE	; 254
	}
	
	// Now send out the slave address + the read/write bit
	return(I2CTxByte(u8SlaveAddress));
    44e4:	0e 94 3b 1d 	call	0x3a76	; 0x3a76 <I2CTxByte>
}
    44e8:	df 91       	pop	r29
    44ea:	cf 91       	pop	r28
    44ec:	08 95       	ret

Disassembly of section .text.CellCountExpectedSet:

00002cb2 <CellCountExpectedSet>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    2cb2:	cf 92       	push	r12
    2cb4:	df 92       	push	r13
    2cb6:	ef 92       	push	r14
    2cb8:	ff 92       	push	r15
    2cba:	8f 35       	cpi	r24, 0x5F	; 95
    2cbc:	08 f0       	brcs	.+2      	; 0x2cc0 <CellCountExpectedSet+0xe>
    2cbe:	8e e5       	ldi	r24, 0x5E	; 94
    2cc0:	ec e0       	ldi	r30, 0x0C	; 12
    2cc2:	f1 e0       	ldi	r31, 0x01	; 1
    2cc4:	81 8b       	std	Z+17, r24	; 0x11
    2cc6:	c8 2e       	mov	r12, r24
    2cc8:	d1 2c       	mov	r13, r1
    2cca:	e1 2c       	mov	r14, r1
    2ccc:	f1 2c       	mov	r15, r1
    2cce:	aa ec       	ldi	r26, 0xCA	; 202
    2cd0:	b8 e0       	ldi	r27, 0x08	; 8
    2cd2:	a7 01       	movw	r20, r14
    2cd4:	96 01       	movw	r18, r12
    2cd6:	0e 94 f4 24 	call	0x49e8	; 0x49e8 <__muluhisi3>
    2cda:	61 8f       	std	Z+25, r22	; 0x19
    2cdc:	72 8f       	std	Z+26, r23	; 0x1a
    2cde:	83 8f       	std	Z+27, r24	; 0x1b
    2ce0:	94 8f       	std	Z+28, r25	; 0x1c
    2ce2:	a4 e9       	ldi	r26, 0x94	; 148
    2ce4:	b1 e1       	ldi	r27, 0x11	; 17
    2ce6:	0e 94 f4 24 	call	0x49e8	; 0x49e8 <__muluhisi3>
    2cea:	65 8f       	std	Z+29, r22	; 0x1d
    2cec:	76 8f       	std	Z+30, r23	; 0x1e
    2cee:	87 8f       	std	Z+31, r24	; 0x1f
    2cf0:	90 a3       	std	Z+32, r25	; 0x20
    2cf2:	85 8d       	ldd	r24, Z+29	; 0x1d
    2cf4:	96 8d       	ldd	r25, Z+30	; 0x1e
    2cf6:	a7 8d       	ldd	r26, Z+31	; 0x1f
    2cf8:	b0 a1       	ldd	r27, Z+32	; 0x20
    2cfa:	41 8d       	ldd	r20, Z+25	; 0x19
    2cfc:	52 8d       	ldd	r21, Z+26	; 0x1a
    2cfe:	63 8d       	ldd	r22, Z+27	; 0x1b
    2d00:	74 8d       	ldd	r23, Z+28	; 0x1c
    2d02:	84 1b       	sub	r24, r20
    2d04:	95 0b       	sbc	r25, r21
    2d06:	a6 0b       	sbc	r26, r22
    2d08:	b7 0b       	sbc	r27, r23
    2d0a:	88 0f       	add	r24, r24
    2d0c:	99 1f       	adc	r25, r25
    2d0e:	aa 1f       	adc	r26, r26
    2d10:	bb 1f       	adc	r27, r27
    2d12:	88 0f       	add	r24, r24
    2d14:	99 1f       	adc	r25, r25
    2d16:	aa 1f       	adc	r26, r26
    2d18:	bb 1f       	adc	r27, r27
    2d1a:	88 0f       	add	r24, r24
    2d1c:	99 1f       	adc	r25, r25
    2d1e:	aa 1f       	adc	r26, r26
    2d20:	bb 1f       	adc	r27, r27
    2d22:	88 0f       	add	r24, r24
    2d24:	99 1f       	adc	r25, r25
    2d26:	aa 1f       	adc	r26, r26
    2d28:	bb 1f       	adc	r27, r27
    2d2a:	88 0f       	add	r24, r24
    2d2c:	99 1f       	adc	r25, r25
    2d2e:	aa 1f       	adc	r26, r26
    2d30:	bb 1f       	adc	r27, r27
    2d32:	88 0f       	add	r24, r24
    2d34:	99 1f       	adc	r25, r25
    2d36:	aa 1f       	adc	r26, r26
    2d38:	bb 1f       	adc	r27, r27
    2d3a:	88 0f       	add	r24, r24
    2d3c:	99 1f       	adc	r25, r25
    2d3e:	aa 1f       	adc	r26, r26
    2d40:	bb 1f       	adc	r27, r27
    2d42:	ac 01       	movw	r20, r24
    2d44:	bd 01       	movw	r22, r26
    2d46:	bb 23       	and	r27, r27
    2d48:	24 f4       	brge	.+8      	; 0x2d52 <CellCountExpectedSet+0xa0>
    2d4a:	41 50       	subi	r20, 0x01	; 1
    2d4c:	5c 4f       	sbci	r21, 0xFC	; 252
    2d4e:	6f 4f       	sbci	r22, 0xFF	; 255
    2d50:	7f 4f       	sbci	r23, 0xFF	; 255
    2d52:	03 2e       	mov	r0, r19
    2d54:	3a e0       	ldi	r19, 0x0A	; 10
    2d56:	75 95       	asr	r23
    2d58:	67 95       	ror	r22
    2d5a:	57 95       	ror	r21
    2d5c:	47 95       	ror	r20
    2d5e:	3a 95       	dec	r19
    2d60:	d1 f7       	brne	.-12     	; 0x2d56 <CellCountExpectedSet+0xa4>
    2d62:	30 2d       	mov	r19, r0
    2d64:	50 93 2e 01 	sts	0x012E, r21	; 0x80012e <sg_sFrame+0x22>
    2d68:	40 93 2d 01 	sts	0x012D, r20	; 0x80012d <sg_sFrame+0x21>
    2d6c:	ff 90       	pop	r15
    2d6e:	ef 90       	pop	r14
    2d70:	df 90       	pop	r13
    2d72:	cf 90       	pop	r12
    2d74:	08 95       	ret

Disassembly of section .text.SendModuleControllerStatus:

00004b0a <SendModuleControllerStatus>:

static uint8_t sg_u8ControllerStatusMsgCount = 0;

static void SendModuleControllerStatus(void)
{
	sg_bSendModuleControllerStatus = true;
    4b0a:	81 e0       	ldi	r24, 0x01	; 1
    4b0c:	80 93 16 03 	sts	0x0316, r24	; 0x800316 <sg_bSendModuleControllerStatus>
	sg_u8ControllerStatusMsgCount = 0;
    4b10:	10 92 69 07 	sts	0x0769, r1	; 0x800769 <sg_u8ControllerStatusMsgCount>
    4b14:	08 95       	ret

Disassembly of section .text.ModuleControllerStateSet:

00004b2c <ModuleControllerStateSet>:
	MBASSERT(0);
}

static void ModuleControllerStateSet( EModuleControllerState eNext )
{
	if(eNext < EMODSTATE_COUNT)
    4b2c:	84 30       	cpi	r24, 0x04	; 4
    4b2e:	10 f4       	brcc	.+4      	; 0x4b34 <ModuleControllerStateSet+0x8>
	{
		sg_eModuleControllerStateTarget = eNext;
    4b30:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <sg_eModuleControllerStateTarget>
    4b34:	08 95       	ret

Disassembly of section .text.ModuleControllerStateSetMax:

000049bc <ModuleControllerStateSetMax>:



static void ModuleControllerStateSetMax( EModuleControllerState eNext )
{
	if(eNext < EMODSTATE_COUNT)
    49bc:	84 30       	cpi	r24, 0x04	; 4
    49be:	40 f4       	brcc	.+16     	; 0x49d0 <ModuleControllerStateSetMax+0x14>
	{
		sg_eModuleControllerStateMax = eNext;
    49c0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <sg_eModuleControllerStateMax>
		if (sg_eModuleControllerStateCurrent > eNext) // we are in a higher state than allowed
    49c4:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <sg_eModuleControllerStateCurrent>
    49c8:	89 17       	cp	r24, r25
    49ca:	10 f4       	brcc	.+4      	; 0x49d0 <ModuleControllerStateSetMax+0x14>
		{
			sg_eModuleControllerStateTarget = eNext;
    49cc:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <sg_eModuleControllerStateTarget>
    49d0:	08 95       	ret

Disassembly of section .text.Check5VLoss:

0000495e <Check5VLoss>:
}

// Checks for 5V loss
static void Check5VLoss(uint8_t u8NewState)
{
	if( u8NewState & (1 << PIN_5V_DET) )
    495e:	86 fd       	sbrc	r24, 6
    4960:	09 c0       	rjmp	.+18     	; 0x4974 <Check5VLoss+0x16>
		// Not asserted
	}
	else
	{
		// 5V detect is low
		FET_EN_DEASSERT();
    4962:	88 b1       	in	r24, 0x08	; 8
    4964:	8f 7e       	andi	r24, 0xEF	; 239
    4966:	88 b9       	out	0x08, r24	; 8
		RELAY_EN_DEASSERT();
    4968:	8e b1       	in	r24, 0x0e	; 14
    496a:	8d 7f       	andi	r24, 0xFD	; 253
    496c:	8e b9       	out	0x0e, r24	; 14
		ModuleControllerStateSet( EMODSTATE_OFF );
    496e:	80 e0       	ldi	r24, 0x00	; 0
    4970:	0e 94 96 25 	call	0x4b2c	; 0x4b2c <ModuleControllerStateSet>
    4974:	08 95       	ret

Disassembly of section .text.CellDataConvertVoltage:

00003c12 <CellDataConvertVoltage>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    3c12:	fb 01       	movw	r30, r22
    3c14:	93 70       	andi	r25, 0x03	; 3
    3c16:	9c 01       	movw	r18, r24
    3c18:	20 5f       	subi	r18, 0xF0	; 240
    3c1a:	31 40       	sbci	r19, 0x01	; 1
    3c1c:	21 31       	cpi	r18, 0x11	; 17
    3c1e:	32 40       	sbci	r19, 0x02	; 2
    3c20:	00 f5       	brcc	.+64     	; 0x3c62 <CellDataConvertVoltage+0x50>
    3c22:	dc 01       	movw	r26, r24
    3c24:	2b ed       	ldi	r18, 0xDB	; 219
    3c26:	36 ea       	ldi	r19, 0xA6	; 166
    3c28:	43 e2       	ldi	r20, 0x23	; 35
    3c2a:	50 e0       	ldi	r21, 0x00	; 0
    3c2c:	0e 94 f4 24 	call	0x49e8	; 0x49e8 <__muluhisi3>
    3c30:	dc 01       	movw	r26, r24
    3c32:	cb 01       	movw	r24, r22
    3c34:	07 2e       	mov	r0, r23
    3c36:	7a e0       	ldi	r23, 0x0A	; 10
    3c38:	b6 95       	lsr	r27
    3c3a:	a7 95       	ror	r26
    3c3c:	97 95       	ror	r25
    3c3e:	87 95       	ror	r24
    3c40:	7a 95       	dec	r23
    3c42:	d1 f7       	brne	.-12     	; 0x3c38 <CellDataConvertVoltage+0x26>
    3c44:	70 2d       	mov	r23, r0
    3c46:	9f 5f       	subi	r25, 0xFF	; 255
    3c48:	af 4f       	sbci	r26, 0xFF	; 255
    3c4a:	bf 4f       	sbci	r27, 0xFF	; 255
    3c4c:	07 2e       	mov	r0, r23
    3c4e:	79 e0       	ldi	r23, 0x09	; 9
    3c50:	b6 95       	lsr	r27
    3c52:	a7 95       	ror	r26
    3c54:	97 95       	ror	r25
    3c56:	87 95       	ror	r24
    3c58:	7a 95       	dec	r23
    3c5a:	d1 f7       	brne	.-12     	; 0x3c50 <CellDataConvertVoltage+0x3e>
    3c5c:	70 2d       	mov	r23, r0
    3c5e:	21 e0       	ldi	r18, 0x01	; 1
    3c60:	03 c0       	rjmp	.+6      	; 0x3c68 <CellDataConvertVoltage+0x56>
    3c62:	20 e0       	ldi	r18, 0x00	; 0
    3c64:	80 e0       	ldi	r24, 0x00	; 0
    3c66:	90 e0       	ldi	r25, 0x00	; 0
    3c68:	30 97       	sbiw	r30, 0x00	; 0
    3c6a:	11 f0       	breq	.+4      	; 0x3c70 <CellDataConvertVoltage+0x5e>
    3c6c:	91 83       	std	Z+1, r25	; 0x01
    3c6e:	80 83       	st	Z, r24
    3c70:	82 2f       	mov	r24, r18
    3c72:	08 95       	ret

Disassembly of section .text.CellDataConvertTemperature:

00003916 <CellDataConvertTemperature>:
    3916:	8f 3f       	cpi	r24, 0xFF	; 255
    3918:	2f ef       	ldi	r18, 0xFF	; 255
    391a:	92 07       	cpc	r25, r18
    391c:	61 f1       	breq	.+88     	; 0x3976 <CellDataConvertTemperature+0x60>
    391e:	28 2f       	mov	r18, r24
    3920:	2f 70       	andi	r18, 0x0F	; 15
    3922:	94 ff       	sbrs	r25, 4
    3924:	02 c0       	rjmp	.+4      	; 0x392a <CellDataConvertTemperature+0x14>
    3926:	90 6f       	ori	r25, 0xF0	; 240
    3928:	01 c0       	rjmp	.+2      	; 0x392c <CellDataConvertTemperature+0x16>
    392a:	9f 77       	andi	r25, 0x7F	; 127
    392c:	95 95       	asr	r25
    392e:	87 95       	ror	r24
    3930:	95 95       	asr	r25
    3932:	87 95       	ror	r24
    3934:	95 95       	asr	r25
    3936:	87 95       	ror	r24
    3938:	95 95       	asr	r25
    393a:	87 95       	ror	r24
    393c:	ac 01       	movw	r20, r24
    393e:	4c 5e       	subi	r20, 0xEC	; 236
    3940:	5f 4f       	sbci	r21, 0xFF	; 255
    3942:	4d 38       	cpi	r20, 0x8D	; 141
    3944:	51 05       	cpc	r21, r1
    3946:	c8 f4       	brcc	.+50     	; 0x397a <CellDataConvertTemperature+0x64>
    3948:	34 e6       	ldi	r19, 0x64	; 100
    394a:	38 9f       	mul	r19, r24
    394c:	d0 01       	movw	r26, r0
    394e:	39 9f       	mul	r19, r25
    3950:	b0 0d       	add	r27, r0
    3952:	11 24       	eor	r1, r1
    3954:	30 e0       	ldi	r19, 0x00	; 0
    3956:	40 e0       	ldi	r20, 0x00	; 0
    3958:	29 54       	subi	r18, 0x49	; 73
    395a:	3e 4f       	sbci	r19, 0xFE	; 254
    395c:	4f 4f       	sbci	r20, 0xFF	; 255
    395e:	f9 01       	movw	r30, r18
    3960:	84 91       	lpm	r24, Z
    3962:	47 fd       	sbrc	r20, 7
    3964:	80 81       	ld	r24, Z
    3966:	fd 01       	movw	r30, r26
    3968:	e8 0f       	add	r30, r24
    396a:	f1 1d       	adc	r31, r1
    396c:	cf 01       	movw	r24, r30
    396e:	81 56       	subi	r24, 0x61	; 97
    3970:	9a 4e       	sbci	r25, 0xEA	; 234
    3972:	21 e0       	ldi	r18, 0x01	; 1
    3974:	05 c0       	rjmp	.+10     	; 0x3980 <CellDataConvertTemperature+0x6a>
    3976:	20 e0       	ldi	r18, 0x00	; 0
    3978:	03 c0       	rjmp	.+6      	; 0x3980 <CellDataConvertTemperature+0x6a>
    397a:	8f ef       	ldi	r24, 0xFF	; 255
    397c:	9f ef       	ldi	r25, 0xFF	; 255
    397e:	20 e0       	ldi	r18, 0x00	; 0
    3980:	61 15       	cp	r22, r1
    3982:	71 05       	cpc	r23, r1
    3984:	19 f0       	breq	.+6      	; 0x398c <CellDataConvertTemperature+0x76>
    3986:	fb 01       	movw	r30, r22
    3988:	91 83       	std	Z+1, r25	; 0x01
    398a:	80 83       	st	Z, r24
    398c:	82 2f       	mov	r24, r18
    398e:	08 95       	ret

Disassembly of section .text.CellDataConvert:

000044ee <CellDataConvert>:

static void CellDataConvert( CellData* pCellData,
							uint16_t* pu16Voltage,
							int16_t* ps16Temperature
							)
{
    44ee:	0f 93       	push	r16
    44f0:	1f 93       	push	r17
    44f2:	cf 93       	push	r28
    44f4:	df 93       	push	r29
    44f6:	ec 01       	movw	r28, r24
    44f8:	8a 01       	movw	r16, r20
	if (!CellDataConvertVoltage((*pCellData).voltage, pu16Voltage))
    44fa:	88 81       	ld	r24, Y
    44fc:	99 81       	ldd	r25, Y+1	; 0x01
    44fe:	0e 94 09 1e 	call	0x3c12	; 0x3c12 <CellDataConvertVoltage>
	{
		// add error handling here if needed
	}
	if (!CellDataConvertTemperature((*pCellData).temperature, ps16Temperature))
    4502:	b8 01       	movw	r22, r16
    4504:	8a 81       	ldd	r24, Y+2	; 0x02
    4506:	9b 81       	ldd	r25, Y+3	; 0x03
    4508:	0e 94 8b 1c 	call	0x3916	; 0x3916 <CellDataConvertTemperature>
	{
		// add error handling here if needed
	}
	
}
    450c:	df 91       	pop	r29
    450e:	cf 91       	pop	r28
    4510:	1f 91       	pop	r17
    4512:	0f 91       	pop	r16
    4514:	08 95       	ret

Disassembly of section .text.ModuleCurrentConvertReadings:

000023da <ModuleCurrentConvertReadings>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    23da:	a0 91 51 01 	lds	r26, 0x0151	; 0x800151 <sg_sFrame+0x45>
    23de:	b0 91 52 01 	lds	r27, 0x0152	; 0x800152 <sg_sFrame+0x46>
    23e2:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <sg_sFrame+0x48>
    23e6:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <sg_sFrame+0x49>
    23ea:	e0 91 71 07 	lds	r30, 0x0771	; 0x800771 <sg_u8CurrentBufferIndex>
    23ee:	ef 3f       	cpi	r30, 0xFF	; 255
    23f0:	81 f4       	brne	.+32     	; 0x2412 <ModuleCurrentConvertReadings+0x38>
    23f2:	07 c0       	rjmp	.+14     	; 0x2402 <ModuleCurrentConvertReadings+0x28>
    23f4:	f0 e0       	ldi	r31, 0x00	; 0
    23f6:	ee 0f       	add	r30, r30
    23f8:	ff 1f       	adc	r31, r31
    23fa:	e7 5e       	subi	r30, 0xE7	; 231
    23fc:	f8 4f       	sbci	r31, 0xF8	; 248
    23fe:	91 83       	std	Z+1, r25	; 0x01
    2400:	80 83       	st	Z, r24
    2402:	e0 91 71 07 	lds	r30, 0x0771	; 0x800771 <sg_u8CurrentBufferIndex>
    2406:	ef 5f       	subi	r30, 0xFF	; 255
    2408:	e0 93 71 07 	sts	0x0771, r30	; 0x800771 <sg_u8CurrentBufferIndex>
    240c:	e8 30       	cpi	r30, 0x08	; 8
    240e:	90 f3       	brcs	.-28     	; 0x23f4 <ModuleCurrentConvertReadings+0x1a>
    2410:	0f c0       	rjmp	.+30     	; 0x2430 <ModuleCurrentConvertReadings+0x56>
    2412:	21 e0       	ldi	r18, 0x01	; 1
    2414:	2e 0f       	add	r18, r30
    2416:	20 93 71 07 	sts	0x0771, r18	; 0x800771 <sg_u8CurrentBufferIndex>
    241a:	f0 e0       	ldi	r31, 0x00	; 0
    241c:	ee 0f       	add	r30, r30
    241e:	ff 1f       	adc	r31, r31
    2420:	e7 5e       	subi	r30, 0xE7	; 231
    2422:	f8 4f       	sbci	r31, 0xF8	; 248
    2424:	91 83       	std	Z+1, r25	; 0x01
    2426:	80 83       	st	Z, r24
    2428:	28 30       	cpi	r18, 0x08	; 8
    242a:	10 f0       	brcs	.+4      	; 0x2430 <ModuleCurrentConvertReadings+0x56>
    242c:	10 92 71 07 	sts	0x0771, r1	; 0x800771 <sg_u8CurrentBufferIndex>
    2430:	80 e0       	ldi	r24, 0x00	; 0
    2432:	20 e0       	ldi	r18, 0x00	; 0
    2434:	30 e0       	ldi	r19, 0x00	; 0
    2436:	0b c0       	rjmp	.+22     	; 0x244e <ModuleCurrentConvertReadings+0x74>
    2438:	e8 2f       	mov	r30, r24
    243a:	f0 e0       	ldi	r31, 0x00	; 0
    243c:	ee 0f       	add	r30, r30
    243e:	ff 1f       	adc	r31, r31
    2440:	e7 5e       	subi	r30, 0xE7	; 231
    2442:	f8 4f       	sbci	r31, 0xF8	; 248
    2444:	40 81       	ld	r20, Z
    2446:	51 81       	ldd	r21, Z+1	; 0x01
    2448:	24 0f       	add	r18, r20
    244a:	35 1f       	adc	r19, r21
    244c:	8f 5f       	subi	r24, 0xFF	; 255
    244e:	88 30       	cpi	r24, 0x08	; 8
    2450:	98 f3       	brcs	.-26     	; 0x2438 <ModuleCurrentConvertReadings+0x5e>
    2452:	c9 01       	movw	r24, r18
    2454:	99 23       	and	r25, r25
    2456:	0c f4       	brge	.+2      	; 0x245a <ModuleCurrentConvertReadings+0x80>
    2458:	07 96       	adiw	r24, 0x07	; 7
    245a:	95 95       	asr	r25
    245c:	87 95       	ror	r24
    245e:	95 95       	asr	r25
    2460:	87 95       	ror	r24
    2462:	95 95       	asr	r25
    2464:	87 95       	ror	r24
    2466:	a8 1b       	sub	r26, r24
    2468:	b9 0b       	sbc	r27, r25
    246a:	20 e8       	ldi	r18, 0x80	; 128
    246c:	3c e0       	ldi	r19, 0x0C	; 12
    246e:	0e 94 78 25 	call	0x4af0	; 0x4af0 <__usmulhisi3>
    2472:	ab 01       	movw	r20, r22
    2474:	bc 01       	movw	r22, r24
    2476:	5f 5f       	subi	r21, 0xFF	; 255
    2478:	6f 4f       	sbci	r22, 0xFF	; 255
    247a:	7f 4f       	sbci	r23, 0xFF	; 255
    247c:	db 01       	movw	r26, r22
    247e:	ca 01       	movw	r24, r20
    2480:	77 23       	and	r23, r23
    2482:	24 f4       	brge	.+8      	; 0x248c <ModuleCurrentConvertReadings+0xb2>
    2484:	81 50       	subi	r24, 0x01	; 1
    2486:	9e 4f       	sbci	r25, 0xFE	; 254
    2488:	af 4f       	sbci	r26, 0xFF	; 255
    248a:	bf 4f       	sbci	r27, 0xFF	; 255
    248c:	07 2e       	mov	r0, r23
    248e:	79 e0       	ldi	r23, 0x09	; 9
    2490:	b5 95       	asr	r27
    2492:	a7 95       	ror	r26
    2494:	97 95       	ror	r25
    2496:	87 95       	ror	r24
    2498:	7a 95       	dec	r23
    249a:	d1 f7       	brne	.-12     	; 0x2490 <ModuleCurrentConvertReadings+0xb6>
    249c:	70 2d       	mov	r23, r0
    249e:	90 58       	subi	r25, 0x80	; 128
    24a0:	af 4f       	sbci	r26, 0xFF	; 255
    24a2:	bf 4f       	sbci	r27, 0xFF	; 255
    24a4:	ec e0       	ldi	r30, 0x0C	; 12
    24a6:	f1 e0       	ldi	r31, 0x01	; 1
    24a8:	94 a7       	std	Z+44, r25	; 0x2c
    24aa:	83 a7       	std	Z+43, r24	; 0x2b
    24ac:	23 a5       	ldd	r18, Z+43	; 0x2b
    24ae:	34 a5       	ldd	r19, Z+44	; 0x2c
    24b0:	82 89       	ldd	r24, Z+18	; 0x12
    24b2:	93 89       	ldd	r25, Z+19	; 0x13
    24b4:	82 17       	cp	r24, r18
    24b6:	93 07       	cpc	r25, r19
    24b8:	20 f4       	brcc	.+8      	; 0x24c2 <ModuleCurrentConvertReadings+0xe8>
    24ba:	83 a5       	ldd	r24, Z+43	; 0x2b
    24bc:	94 a5       	ldd	r25, Z+44	; 0x2c
    24be:	93 8b       	std	Z+19, r25	; 0x13
    24c0:	82 8b       	std	Z+18, r24	; 0x12
    24c2:	ec e0       	ldi	r30, 0x0C	; 12
    24c4:	f1 e0       	ldi	r31, 0x01	; 1
    24c6:	23 a5       	ldd	r18, Z+43	; 0x2b
    24c8:	34 a5       	ldd	r19, Z+44	; 0x2c
    24ca:	84 89       	ldd	r24, Z+20	; 0x14
    24cc:	95 89       	ldd	r25, Z+21	; 0x15
    24ce:	28 17       	cp	r18, r24
    24d0:	39 07       	cpc	r19, r25
    24d2:	20 f4       	brcc	.+8      	; 0x24dc <ModuleCurrentConvertReadings+0x102>
    24d4:	83 a5       	ldd	r24, Z+43	; 0x2b
    24d6:	94 a5       	ldd	r25, Z+44	; 0x2c
    24d8:	95 8b       	std	Z+21, r25	; 0x15
    24da:	84 8b       	std	Z+20, r24	; 0x14
    24dc:	08 95       	ret

Disassembly of section .text.__vector_1:

000045da <__vector_1>:

// NOTE: If you're getting unexpected AVR resets, uncomment these unused handlers to see
// if another interrupt is being taken that doesn't have a handler. AVR Defaults to jumping
// to 0 when not vector is programmed.
ISR(ANACOMP0_vect, ISR_BLOCK)
{
    45da:	1f 92       	push	r1
    45dc:	0f 92       	push	r0
    45de:	0f b6       	in	r0, 0x3f	; 63
    45e0:	0f 92       	push	r0
    45e2:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) ANACOMP0_vect;
    45e4:	8d ee       	ldi	r24, 0xED	; 237
    45e6:	92 e2       	ldi	r25, 0x22	; 34
    45e8:	80 93 66 07 	sts	0x0766, r24	; 0x800766 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    45ec:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    45f0:	80 93 65 07 	sts	0x0765, r24	; 0x800765 <sg_u8PCMSK0>
    45f4:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    45f8:	80 93 64 07 	sts	0x0764, r24	; 0x800764 <sg_u8PCMSK1>
    45fc:	ff cf       	rjmp	.-2      	; 0x45fc <__vector_1+0x22>

Disassembly of section .text.__vector_2:

000045fe <__vector_2>:
	while (1);
}

ISR(ANACOMP1_vect, ISR_BLOCK)
{
    45fe:	1f 92       	push	r1
    4600:	0f 92       	push	r0
    4602:	0f b6       	in	r0, 0x3f	; 63
    4604:	0f 92       	push	r0
    4606:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) ANACOMP1_vect;
    4608:	8f ef       	ldi	r24, 0xFF	; 255
    460a:	92 e2       	ldi	r25, 0x22	; 34
    460c:	80 93 66 07 	sts	0x0766, r24	; 0x800766 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4610:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4614:	80 93 65 07 	sts	0x0765, r24	; 0x800765 <sg_u8PCMSK0>
    4618:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    461c:	80 93 64 07 	sts	0x0764, r24	; 0x800764 <sg_u8PCMSK1>
    4620:	ff cf       	rjmp	.-2      	; 0x4620 <__vector_2+0x22>

Disassembly of section .text.__vector_3:

00004622 <__vector_3>:
	while (1);
}

ISR(ANACOMP2_vect, ISR_BLOCK)
{
    4622:	1f 92       	push	r1
    4624:	0f 92       	push	r0
    4626:	0f b6       	in	r0, 0x3f	; 63
    4628:	0f 92       	push	r0
    462a:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) ANACOMP2_vect;
    462c:	81 e1       	ldi	r24, 0x11	; 17
    462e:	93 e2       	ldi	r25, 0x23	; 35
    4630:	80 93 66 07 	sts	0x0766, r24	; 0x800766 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4634:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4638:	80 93 65 07 	sts	0x0765, r24	; 0x800765 <sg_u8PCMSK0>
    463c:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4640:	80 93 64 07 	sts	0x0764, r24	; 0x800764 <sg_u8PCMSK1>
    4644:	ff cf       	rjmp	.-2      	; 0x4644 <__vector_3+0x22>

Disassembly of section .text.__vector_4:

00004646 <__vector_4>:
	while (1);
}

ISR(ANACOMP3_vect, ISR_BLOCK)
{
    4646:	1f 92       	push	r1
    4648:	0f 92       	push	r0
    464a:	0f b6       	in	r0, 0x3f	; 63
    464c:	0f 92       	push	r0
    464e:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) ANACOMP3_vect;
    4650:	83 e2       	ldi	r24, 0x23	; 35
    4652:	93 e2       	ldi	r25, 0x23	; 35
    4654:	80 93 66 07 	sts	0x0766, r24	; 0x800766 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4658:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    465c:	80 93 65 07 	sts	0x0765, r24	; 0x800765 <sg_u8PCMSK0>
    4660:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4664:	80 93 64 07 	sts	0x0764, r24	; 0x800764 <sg_u8PCMSK1>
    4668:	ff cf       	rjmp	.-2      	; 0x4668 <__vector_4+0x22>

Disassembly of section .text.__vector_5:

0000466a <__vector_5>:
	while (1);
}

ISR(PSC_FAULT_vect, ISR_BLOCK)
{
    466a:	1f 92       	push	r1
    466c:	0f 92       	push	r0
    466e:	0f b6       	in	r0, 0x3f	; 63
    4670:	0f 92       	push	r0
    4672:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) PSC_FAULT_vect;
    4674:	85 e3       	ldi	r24, 0x35	; 53
    4676:	93 e2       	ldi	r25, 0x23	; 35
    4678:	80 93 66 07 	sts	0x0766, r24	; 0x800766 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    467c:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4680:	80 93 65 07 	sts	0x0765, r24	; 0x800765 <sg_u8PCMSK0>
    4684:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4688:	80 93 64 07 	sts	0x0764, r24	; 0x800764 <sg_u8PCMSK1>
    468c:	ff cf       	rjmp	.-2      	; 0x468c <__vector_5+0x22>

Disassembly of section .text.__vector_6:

0000468e <__vector_6>:
	while (1);
}

ISR(PSC_EC_vect, ISR_BLOCK)
{
    468e:	1f 92       	push	r1
    4690:	0f 92       	push	r0
    4692:	0f b6       	in	r0, 0x3f	; 63
    4694:	0f 92       	push	r0
    4696:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) PSC_EC_vect;
    4698:	87 e4       	ldi	r24, 0x47	; 71
    469a:	93 e2       	ldi	r25, 0x23	; 35
    469c:	80 93 66 07 	sts	0x0766, r24	; 0x800766 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    46a0:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    46a4:	80 93 65 07 	sts	0x0765, r24	; 0x800765 <sg_u8PCMSK0>
    46a8:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    46ac:	80 93 64 07 	sts	0x0764, r24	; 0x800764 <sg_u8PCMSK1>
    46b0:	ff cf       	rjmp	.-2      	; 0x46b0 <__vector_6+0x22>

Disassembly of section .text.__vector_22:

000046b2 <__vector_22>:
	while (1);
}

ISR(PCINT0_vect, ISR_BLOCK)
{
    46b2:	1f 92       	push	r1
    46b4:	0f 92       	push	r0
    46b6:	0f b6       	in	r0, 0x3f	; 63
    46b8:	0f 92       	push	r0
    46ba:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) PCINT0_vect;
    46bc:	89 e5       	ldi	r24, 0x59	; 89
    46be:	93 e2       	ldi	r25, 0x23	; 35
    46c0:	80 93 66 07 	sts	0x0766, r24	; 0x800766 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    46c4:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    46c8:	80 93 65 07 	sts	0x0765, r24	; 0x800765 <sg_u8PCMSK0>
    46cc:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    46d0:	80 93 64 07 	sts	0x0764, r24	; 0x800764 <sg_u8PCMSK1>
    46d4:	ff cf       	rjmp	.-2      	; 0x46d4 <__vector_22+0x22>

Disassembly of section .text.__vector_9:

000046d6 <__vector_9>:
// 	while (1);
// }
*/

ISR(INT2_vect, ISR_BLOCK)
{
    46d6:	1f 92       	push	r1
    46d8:	0f 92       	push	r0
    46da:	0f b6       	in	r0, 0x3f	; 63
    46dc:	0f 92       	push	r0
    46de:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) INT2_vect;
    46e0:	8b e6       	ldi	r24, 0x6B	; 107
    46e2:	93 e2       	ldi	r25, 0x23	; 35
    46e4:	80 93 66 07 	sts	0x0766, r24	; 0x800766 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    46e8:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    46ec:	80 93 65 07 	sts	0x0765, r24	; 0x800765 <sg_u8PCMSK0>
    46f0:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    46f4:	80 93 64 07 	sts	0x0764, r24	; 0x800764 <sg_u8PCMSK1>
    46f8:	ff cf       	rjmp	.-2      	; 0x46f8 <__vector_9+0x22>

Disassembly of section .text.__vector_11:

000046fa <__vector_11>:
// 	while (1);
// }


ISR(TIMER1_CAPT_vect, ISR_BLOCK)
{
    46fa:	1f 92       	push	r1
    46fc:	0f 92       	push	r0
    46fe:	0f b6       	in	r0, 0x3f	; 63
    4700:	0f 92       	push	r0
    4702:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) TIMER1_CAPT_vect;
    4704:	8d e7       	ldi	r24, 0x7D	; 125
    4706:	93 e2       	ldi	r25, 0x23	; 35
    4708:	80 93 66 07 	sts	0x0766, r24	; 0x800766 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    470c:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4710:	80 93 65 07 	sts	0x0765, r24	; 0x800765 <sg_u8PCMSK0>
    4714:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4718:	80 93 64 07 	sts	0x0764, r24	; 0x800764 <sg_u8PCMSK1>
    471c:	ff cf       	rjmp	.-2      	; 0x471c <__vector_11+0x22>

Disassembly of section .text.__vector_13:

0000471e <__vector_13>:
// }



ISR(TIMER1_COMPB_vect, ISR_BLOCK)
{
    471e:	1f 92       	push	r1
    4720:	0f 92       	push	r0
    4722:	0f b6       	in	r0, 0x3f	; 63
    4724:	0f 92       	push	r0
    4726:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) TIMER1_COMPB_vect;
    4728:	8f e8       	ldi	r24, 0x8F	; 143
    472a:	93 e2       	ldi	r25, 0x23	; 35
    472c:	80 93 66 07 	sts	0x0766, r24	; 0x800766 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4730:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4734:	80 93 65 07 	sts	0x0765, r24	; 0x800765 <sg_u8PCMSK0>
    4738:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    473c:	80 93 64 07 	sts	0x0764, r24	; 0x800764 <sg_u8PCMSK1>
    4740:	ff cf       	rjmp	.-2      	; 0x4740 <__vector_13+0x22>

Disassembly of section .text.__vector_14:

00004742 <__vector_14>:
	while (1);
}


ISR(TIMER1_OVF_vect, ISR_BLOCK)
{
    4742:	1f 92       	push	r1
    4744:	0f 92       	push	r0
    4746:	0f b6       	in	r0, 0x3f	; 63
    4748:	0f 92       	push	r0
    474a:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) TIMER1_OVF_vect;
    474c:	81 ea       	ldi	r24, 0xA1	; 161
    474e:	93 e2       	ldi	r25, 0x23	; 35
    4750:	80 93 66 07 	sts	0x0766, r24	; 0x800766 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4754:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4758:	80 93 65 07 	sts	0x0765, r24	; 0x800765 <sg_u8PCMSK0>
    475c:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4760:	80 93 64 07 	sts	0x0764, r24	; 0x800764 <sg_u8PCMSK1>
    4764:	ff cf       	rjmp	.-2      	; 0x4764 <__vector_14+0x22>

Disassembly of section .text.__vector_17:

00004766 <__vector_17>:
	while (1);
}

ISR(TIMER0_OVF_vect, ISR_BLOCK)
{
    4766:	1f 92       	push	r1
    4768:	0f 92       	push	r0
    476a:	0f b6       	in	r0, 0x3f	; 63
    476c:	0f 92       	push	r0
    476e:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) TIMER0_OVF_vect;
    4770:	83 eb       	ldi	r24, 0xB3	; 179
    4772:	93 e2       	ldi	r25, 0x23	; 35
    4774:	80 93 66 07 	sts	0x0766, r24	; 0x800766 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4778:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    477c:	80 93 65 07 	sts	0x0765, r24	; 0x800765 <sg_u8PCMSK0>
    4780:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4784:	80 93 64 07 	sts	0x0764, r24	; 0x800764 <sg_u8PCMSK1>
    4788:	ff cf       	rjmp	.-2      	; 0x4788 <__vector_17+0x22>

Disassembly of section .text.__vector_19:

0000478a <__vector_19>:
	while (1);
}

ISR(CAN_TOVF_vect, ISR_BLOCK)
{
    478a:	1f 92       	push	r1
    478c:	0f 92       	push	r0
    478e:	0f b6       	in	r0, 0x3f	; 63
    4790:	0f 92       	push	r0
    4792:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) CAN_TOVF_vect;
    4794:	85 ec       	ldi	r24, 0xC5	; 197
    4796:	93 e2       	ldi	r25, 0x23	; 35
    4798:	80 93 66 07 	sts	0x0766, r24	; 0x800766 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    479c:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    47a0:	80 93 65 07 	sts	0x0765, r24	; 0x800765 <sg_u8PCMSK0>
    47a4:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    47a8:	80 93 64 07 	sts	0x0764, r24	; 0x800764 <sg_u8PCMSK1>
    47ac:	ff cf       	rjmp	.-2      	; 0x47ac <__vector_19+0x22>

Disassembly of section .text.__vector_21:

000047ae <__vector_21>:
	while (1);
}

ISR(LIN_ERR_vect, ISR_BLOCK)
{
    47ae:	1f 92       	push	r1
    47b0:	0f 92       	push	r0
    47b2:	0f b6       	in	r0, 0x3f	; 63
    47b4:	0f 92       	push	r0
    47b6:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) LIN_ERR_vect;
    47b8:	87 ed       	ldi	r24, 0xD7	; 215
    47ba:	93 e2       	ldi	r25, 0x23	; 35
    47bc:	80 93 66 07 	sts	0x0766, r24	; 0x800766 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    47c0:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    47c4:	80 93 65 07 	sts	0x0765, r24	; 0x800765 <sg_u8PCMSK0>
    47c8:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    47cc:	80 93 64 07 	sts	0x0764, r24	; 0x800764 <sg_u8PCMSK1>
    47d0:	ff cf       	rjmp	.-2      	; 0x47d0 <__vector_21+0x22>

Disassembly of section .text.__vector_25:

000047d2 <__vector_25>:
// 	while (1);
// }


ISR(PCINT3_vect, ISR_BLOCK)
{
    47d2:	1f 92       	push	r1
    47d4:	0f 92       	push	r0
    47d6:	0f b6       	in	r0, 0x3f	; 63
    47d8:	0f 92       	push	r0
    47da:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) PCINT3_vect;
    47dc:	89 ee       	ldi	r24, 0xE9	; 233
    47de:	93 e2       	ldi	r25, 0x23	; 35
    47e0:	80 93 66 07 	sts	0x0766, r24	; 0x800766 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    47e4:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    47e8:	80 93 65 07 	sts	0x0765, r24	; 0x800765 <sg_u8PCMSK0>
    47ec:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    47f0:	80 93 64 07 	sts	0x0764, r24	; 0x800764 <sg_u8PCMSK1>
    47f4:	ff cf       	rjmp	.-2      	; 0x47f4 <__vector_25+0x22>

Disassembly of section .text.__vector_26:

000047f6 <__vector_26>:
	while (1);
}


ISR(SPI_STC_vect, ISR_BLOCK)
{
    47f6:	1f 92       	push	r1
    47f8:	0f 92       	push	r0
    47fa:	0f b6       	in	r0, 0x3f	; 63
    47fc:	0f 92       	push	r0
    47fe:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) SPI_STC_vect;
    4800:	8b ef       	ldi	r24, 0xFB	; 251
    4802:	93 e2       	ldi	r25, 0x23	; 35
    4804:	80 93 66 07 	sts	0x0766, r24	; 0x800766 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4808:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    480c:	80 93 65 07 	sts	0x0765, r24	; 0x800765 <sg_u8PCMSK0>
    4810:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4814:	80 93 64 07 	sts	0x0764, r24	; 0x800764 <sg_u8PCMSK1>
    4818:	ff cf       	rjmp	.-2      	; 0x4818 <__vector_26+0x22>

Disassembly of section .text.__vector_29:

0000481a <__vector_29>:
	while (1);
}

ISR(EE_READY_vect, ISR_BLOCK)
{
    481a:	1f 92       	push	r1
    481c:	0f 92       	push	r0
    481e:	0f b6       	in	r0, 0x3f	; 63
    4820:	0f 92       	push	r0
    4822:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) EE_READY_vect;
    4824:	8d e0       	ldi	r24, 0x0D	; 13
    4826:	94 e2       	ldi	r25, 0x24	; 36
    4828:	80 93 66 07 	sts	0x0766, r24	; 0x800766 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    482c:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4830:	80 93 65 07 	sts	0x0765, r24	; 0x800765 <sg_u8PCMSK0>
    4834:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4838:	80 93 64 07 	sts	0x0764, r24	; 0x800764 <sg_u8PCMSK1>
    483c:	ff cf       	rjmp	.-2      	; 0x483c <__vector_29+0x22>

Disassembly of section .text.__vector_30:

0000483e <__vector_30>:
	while (1);
}

ISR(SPM_READY_vect, ISR_BLOCK)
{
    483e:	1f 92       	push	r1
    4840:	0f 92       	push	r0
    4842:	0f b6       	in	r0, 0x3f	; 63
    4844:	0f 92       	push	r0
    4846:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) SPM_READY_vect;
    4848:	8f e1       	ldi	r24, 0x1F	; 31
    484a:	94 e2       	ldi	r25, 0x24	; 36
    484c:	80 93 66 07 	sts	0x0766, r24	; 0x800766 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4850:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4854:	80 93 65 07 	sts	0x0765, r24	; 0x800765 <sg_u8PCMSK0>
    4858:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    485c:	80 93 64 07 	sts	0x0764, r24	; 0x800764 <sg_u8PCMSK1>
    4860:	ff cf       	rjmp	.-2      	; 0x4860 <__vector_30+0x22>

Disassembly of section .text.CurrentThresholdsGet:

000032ea <CurrentThresholdsGet>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    32ea:	0f 93       	push	r16
    32ec:	1f 93       	push	r17
    32ee:	cf 93       	push	r28
    32f0:	df 93       	push	r29
    32f2:	8c 01       	movw	r16, r24
    32f4:	eb 01       	movw	r28, r22
    32f6:	89 2b       	or	r24, r25
    32f8:	f9 f0       	breq	.+62     	; 0x3338 <CurrentThresholdsGet+0x4e>
    32fa:	87 e0       	ldi	r24, 0x07	; 7
    32fc:	90 e0       	ldi	r25, 0x00	; 0
    32fe:	0e 94 1e 25 	call	0x4a3c	; 0x4a3c <EEPROMRead>
    3302:	90 e0       	ldi	r25, 0x00	; 0
    3304:	f8 01       	movw	r30, r16
    3306:	91 83       	std	Z+1, r25	; 0x01
    3308:	80 83       	st	Z, r24
    330a:	88 e0       	ldi	r24, 0x08	; 8
    330c:	90 e0       	ldi	r25, 0x00	; 0
    330e:	0e 94 1e 25 	call	0x4a3c	; 0x4a3c <EEPROMRead>
    3312:	90 e0       	ldi	r25, 0x00	; 0
    3314:	98 2f       	mov	r25, r24
    3316:	88 27       	eor	r24, r24
    3318:	f8 01       	movw	r30, r16
    331a:	20 81       	ld	r18, Z
    331c:	31 81       	ldd	r19, Z+1	; 0x01
    331e:	82 2b       	or	r24, r18
    3320:	93 2b       	or	r25, r19
    3322:	91 83       	std	Z+1, r25	; 0x01
    3324:	80 83       	st	Z, r24
    3326:	01 97       	sbiw	r24, 0x01	; 1
    3328:	8e 3f       	cpi	r24, 0xFE	; 254
    332a:	9f 4f       	sbci	r25, 0xFF	; 255
    332c:	28 f0       	brcs	.+10     	; 0x3338 <CurrentThresholdsGet+0x4e>
    332e:	8c ec       	ldi	r24, 0xCC	; 204
    3330:	97 e7       	ldi	r25, 0x77	; 119
    3332:	f8 01       	movw	r30, r16
    3334:	91 83       	std	Z+1, r25	; 0x01
    3336:	80 83       	st	Z, r24
    3338:	20 97       	sbiw	r28, 0x00	; 0
    333a:	e1 f0       	breq	.+56     	; 0x3374 <CurrentThresholdsGet+0x8a>
    333c:	85 e0       	ldi	r24, 0x05	; 5
    333e:	90 e0       	ldi	r25, 0x00	; 0
    3340:	0e 94 1e 25 	call	0x4a3c	; 0x4a3c <EEPROMRead>
    3344:	90 e0       	ldi	r25, 0x00	; 0
    3346:	99 83       	std	Y+1, r25	; 0x01
    3348:	88 83       	st	Y, r24
    334a:	86 e0       	ldi	r24, 0x06	; 6
    334c:	90 e0       	ldi	r25, 0x00	; 0
    334e:	0e 94 1e 25 	call	0x4a3c	; 0x4a3c <EEPROMRead>
    3352:	90 e0       	ldi	r25, 0x00	; 0
    3354:	98 2f       	mov	r25, r24
    3356:	88 27       	eor	r24, r24
    3358:	28 81       	ld	r18, Y
    335a:	39 81       	ldd	r19, Y+1	; 0x01
    335c:	82 2b       	or	r24, r18
    335e:	93 2b       	or	r25, r19
    3360:	99 83       	std	Y+1, r25	; 0x01
    3362:	88 83       	st	Y, r24
    3364:	01 97       	sbiw	r24, 0x01	; 1
    3366:	8e 3f       	cpi	r24, 0xFE	; 254
    3368:	9f 4f       	sbci	r25, 0xFF	; 255
    336a:	20 f0       	brcs	.+8      	; 0x3374 <CurrentThresholdsGet+0x8a>
    336c:	84 ef       	ldi	r24, 0xF4	; 244
    336e:	91 e8       	ldi	r25, 0x81	; 129
    3370:	99 83       	std	Y+1, r25	; 0x01
    3372:	88 83       	st	Y, r24
    3374:	df 91       	pop	r29
    3376:	cf 91       	pop	r28
    3378:	1f 91       	pop	r17
    337a:	0f 91       	pop	r16
    337c:	08 95       	ret

Disassembly of section .text.ControllerStatusMessagesSend:

000006bc <ControllerStatusMessagesSend>:
 6bc:	cf 92       	push	r12
 6be:	df 92       	push	r13
 6c0:	ef 92       	push	r14
 6c2:	ff 92       	push	r15
 6c4:	0f 93       	push	r16
 6c6:	1f 93       	push	r17
 6c8:	cf 93       	push	r28
 6ca:	df 93       	push	r29
 6cc:	00 d0       	rcall	.+0      	; 0x6ce <ControllerStatusMessagesSend+0x12>
 6ce:	00 d0       	rcall	.+0      	; 0x6d0 <ControllerStatusMessagesSend+0x14>
 6d0:	cd b7       	in	r28, 0x3d	; 61
 6d2:	de b7       	in	r29, 0x3e	; 62
 6d4:	8c 01       	movw	r16, r24
 6d6:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <sg_bSendTimeRequest>
 6da:	88 23       	and	r24, r24
 6dc:	69 f0       	breq	.+26     	; 0x6f8 <ControllerStatusMessagesSend+0x3c>
 6de:	88 e0       	ldi	r24, 0x08	; 8
 6e0:	d8 01       	movw	r26, r16
 6e2:	1d 92       	st	X+, r1
 6e4:	8a 95       	dec	r24
 6e6:	e9 f7       	brne	.-6      	; 0x6e2 <ControllerStatusMessagesSend+0x26>
 6e8:	48 e0       	ldi	r20, 0x08	; 8
 6ea:	b8 01       	movw	r22, r16
 6ec:	88 e0       	ldi	r24, 0x08	; 8
 6ee:	0e 94 d3 24 	call	0x49a6	; 0x49a6 <CANSendMessage>
 6f2:	81 11       	cpse	r24, r1
 6f4:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <sg_bSendTimeRequest>
 6f8:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <sg_bSendModuleControllerStatus>
 6fc:	88 23       	and	r24, r24
 6fe:	09 f4       	brne	.+2      	; 0x702 <ControllerStatusMessagesSend+0x46>
 700:	00 c1       	rjmp	.+512    	; 0x902 <__EEPROM_REGION_LENGTH__+0x102>
 702:	80 91 69 07 	lds	r24, 0x0769	; 0x800769 <sg_u8ControllerStatusMsgCount>
 706:	81 11       	cpse	r24, r1
 708:	80 c0       	rjmp	.+256    	; 0x80a <__EEPROM_REGION_LENGTH__+0xa>
 70a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <sg_eModuleControllerStateCurrent>
 70e:	8f 70       	andi	r24, 0x0F	; 15
 710:	f8 01       	movw	r30, r16
 712:	80 83       	st	Z, r24
 714:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <sg_u8SOC>
 718:	81 83       	std	Z+1, r24	; 0x01
 71a:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <sg_u8SOH>
 71e:	82 83       	std	Z+2, r24	; 0x02
 720:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <sg_sFrame+0x11>
 724:	83 83       	std	Z+3, r24	; 0x03
 726:	84 e0       	ldi	r24, 0x04	; 4
 728:	34 96       	adiw	r30, 0x04	; 4
 72a:	df 01       	movw	r26, r30
 72c:	1d 92       	st	X+, r1
 72e:	8a 95       	dec	r24
 730:	e9 f7       	brne	.-6      	; 0x72c <ControllerStatusMessagesSend+0x70>
 732:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <sg_sFrame+0x44>
 736:	88 23       	and	r24, r24
 738:	79 f0       	breq	.+30     	; 0x758 <ControllerStatusMessagesSend+0x9c>
 73a:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <sg_sFrame+0x47>
 73e:	88 23       	and	r24, r24
 740:	71 f0       	breq	.+28     	; 0x75e <ControllerStatusMessagesSend+0xa2>
 742:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <sg_eModuleControllerStateCurrent>
 746:	83 30       	cpi	r24, 0x03	; 3
 748:	69 f4       	brne	.+26     	; 0x764 <ControllerStatusMessagesSend+0xa8>
 74a:	0e 94 ed 11 	call	0x23da	; 0x23da <ModuleCurrentConvertReadings>
 74e:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <sg_sFrame+0x2b>
 752:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <sg_sFrame+0x2c>
 756:	08 c0       	rjmp	.+16     	; 0x768 <ControllerStatusMessagesSend+0xac>
 758:	80 e0       	ldi	r24, 0x00	; 0
 75a:	90 e8       	ldi	r25, 0x80	; 128
 75c:	05 c0       	rjmp	.+10     	; 0x768 <ControllerStatusMessagesSend+0xac>
 75e:	80 e0       	ldi	r24, 0x00	; 0
 760:	90 e8       	ldi	r25, 0x80	; 128
 762:	02 c0       	rjmp	.+4      	; 0x768 <ControllerStatusMessagesSend+0xac>
 764:	80 e0       	ldi	r24, 0x00	; 0
 766:	90 e8       	ldi	r25, 0x80	; 128
 768:	f8 01       	movw	r30, r16
 76a:	84 83       	std	Z+4, r24	; 0x04
 76c:	95 83       	std	Z+5, r25	; 0x05
 76e:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <sg_sFrame+0x41>
 772:	88 23       	and	r24, r24
 774:	79 f0       	breq	.+30     	; 0x794 <ControllerStatusMessagesSend+0xd8>
 776:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <sg_sFrame+0x42>
 77a:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <sg_sFrame+0x43>
 77e:	4f ef       	ldi	r20, 0xFF	; 255
 780:	53 e0       	ldi	r21, 0x03	; 3
 782:	60 e0       	ldi	r22, 0x00	; 0
 784:	70 e0       	ldi	r23, 0x00	; 0
 786:	9a 01       	movw	r18, r20
 788:	ab 01       	movw	r20, r22
 78a:	28 1b       	sub	r18, r24
 78c:	39 0b       	sbc	r19, r25
 78e:	41 09       	sbc	r20, r1
 790:	51 09       	sbc	r21, r1
 792:	03 c0       	rjmp	.+6      	; 0x79a <ControllerStatusMessagesSend+0xde>
 794:	20 e0       	ldi	r18, 0x00	; 0
 796:	30 e0       	ldi	r19, 0x00	; 0
 798:	a9 01       	movw	r20, r18
 79a:	ec e0       	ldi	r30, 0x0C	; 12
 79c:	f1 e0       	ldi	r31, 0x01	; 1
 79e:	a1 a1       	ldd	r26, Z+33	; 0x21
 7a0:	b2 a1       	ldd	r27, Z+34	; 0x22
 7a2:	0e 94 53 25 	call	0x4aa6	; 0x4aa6 <__mulshisi3>
 7a6:	dc 01       	movw	r26, r24
 7a8:	cb 01       	movw	r24, r22
 7aa:	68 94       	set
 7ac:	16 f8       	bld	r1, 6
 7ae:	b6 95       	lsr	r27
 7b0:	a7 95       	ror	r26
 7b2:	97 95       	ror	r25
 7b4:	87 95       	ror	r24
 7b6:	16 94       	lsr	r1
 7b8:	d1 f7       	brne	.-12     	; 0x7ae <ControllerStatusMessagesSend+0xf2>
 7ba:	c1 8c       	ldd	r12, Z+25	; 0x19
 7bc:	d2 8c       	ldd	r13, Z+26	; 0x1a
 7be:	e3 8c       	ldd	r14, Z+27	; 0x1b
 7c0:	f4 8c       	ldd	r15, Z+28	; 0x1c
 7c2:	bc 01       	movw	r22, r24
 7c4:	cd 01       	movw	r24, r26
 7c6:	6c 0d       	add	r22, r12
 7c8:	7d 1d       	adc	r23, r13
 7ca:	8e 1d       	adc	r24, r14
 7cc:	9f 1d       	adc	r25, r15
 7ce:	2f e0       	ldi	r18, 0x0F	; 15
 7d0:	30 e0       	ldi	r19, 0x00	; 0
 7d2:	40 e0       	ldi	r20, 0x00	; 0
 7d4:	50 e0       	ldi	r21, 0x00	; 0
 7d6:	0e 94 2b 20 	call	0x4056	; 0x4056 <__udivmodsi4>
 7da:	20 93 49 01 	sts	0x0149, r18	; 0x800149 <sg_sFrame+0x3d>
 7de:	30 93 4a 01 	sts	0x014A, r19	; 0x80014a <sg_sFrame+0x3e>
 7e2:	40 93 4b 01 	sts	0x014B, r20	; 0x80014b <sg_sFrame+0x3f>
 7e6:	50 93 4c 01 	sts	0x014C, r21	; 0x80014c <sg_sFrame+0x40>
 7ea:	d8 01       	movw	r26, r16
 7ec:	16 96       	adiw	r26, 0x06	; 6
 7ee:	2c 93       	st	X, r18
 7f0:	16 97       	sbiw	r26, 0x06	; 6
 7f2:	17 96       	adiw	r26, 0x07	; 7
 7f4:	3c 93       	st	X, r19
 7f6:	48 e0       	ldi	r20, 0x08	; 8
 7f8:	b8 01       	movw	r22, r16
 7fa:	81 e0       	ldi	r24, 0x01	; 1
 7fc:	0e 94 d3 24 	call	0x49a6	; 0x49a6 <CANSendMessage>
 800:	88 23       	and	r24, r24
 802:	09 f4       	brne	.+2      	; 0x806 <__EEPROM_REGION_LENGTH__+0x6>
 804:	67 c0       	rjmp	.+206    	; 0x8d4 <__EEPROM_REGION_LENGTH__+0xd4>
 806:	81 e0       	ldi	r24, 0x01	; 1
 808:	6c c0       	rjmp	.+216    	; 0x8e2 <__EEPROM_REGION_LENGTH__+0xe2>
 80a:	81 30       	cpi	r24, 0x01	; 1
 80c:	a1 f5       	brne	.+104    	; 0x876 <__EEPROM_REGION_LENGTH__+0x76>
 80e:	ec e0       	ldi	r30, 0x0C	; 12
 810:	f1 e0       	ldi	r31, 0x01	; 1
 812:	85 a9       	ldd	r24, Z+53	; 0x35
 814:	96 a9       	ldd	r25, Z+54	; 0x36
 816:	d8 01       	movw	r26, r16
 818:	8c 93       	st	X, r24
 81a:	85 a9       	ldd	r24, Z+53	; 0x35
 81c:	96 a9       	ldd	r25, Z+54	; 0x36
 81e:	11 96       	adiw	r26, 0x01	; 1
 820:	9c 93       	st	X, r25
 822:	11 97       	sbiw	r26, 0x01	; 1
 824:	83 a9       	ldd	r24, Z+51	; 0x33
 826:	94 a9       	ldd	r25, Z+52	; 0x34
 828:	12 96       	adiw	r26, 0x02	; 2
 82a:	8c 93       	st	X, r24
 82c:	12 97       	sbiw	r26, 0x02	; 2
 82e:	83 a9       	ldd	r24, Z+51	; 0x33
 830:	94 a9       	ldd	r25, Z+52	; 0x34
 832:	13 96       	adiw	r26, 0x03	; 3
 834:	9c 93       	st	X, r25
 836:	13 97       	sbiw	r26, 0x03	; 3
 838:	87 a9       	ldd	r24, Z+55	; 0x37
 83a:	90 ad       	ldd	r25, Z+56	; 0x38
 83c:	14 96       	adiw	r26, 0x04	; 4
 83e:	8c 93       	st	X, r24
 840:	14 97       	sbiw	r26, 0x04	; 4
 842:	87 a9       	ldd	r24, Z+55	; 0x37
 844:	90 ad       	ldd	r25, Z+56	; 0x38
 846:	15 96       	adiw	r26, 0x05	; 5
 848:	9c 93       	st	X, r25
 84a:	61 ad       	ldd	r22, Z+57	; 0x39
 84c:	72 ad       	ldd	r23, Z+58	; 0x3a
 84e:	83 ad       	ldd	r24, Z+59	; 0x3b
 850:	94 ad       	ldd	r25, Z+60	; 0x3c
 852:	2f e0       	ldi	r18, 0x0F	; 15
 854:	30 e0       	ldi	r19, 0x00	; 0
 856:	40 e0       	ldi	r20, 0x00	; 0
 858:	50 e0       	ldi	r21, 0x00	; 0
 85a:	0e 94 2b 20 	call	0x4056	; 0x4056 <__udivmodsi4>
 85e:	f8 01       	movw	r30, r16
 860:	26 83       	std	Z+6, r18	; 0x06
 862:	37 83       	std	Z+7, r19	; 0x07
 864:	48 e0       	ldi	r20, 0x08	; 8
 866:	b8 01       	movw	r22, r16
 868:	82 e0       	ldi	r24, 0x02	; 2
 86a:	0e 94 d3 24 	call	0x49a6	; 0x49a6 <CANSendMessage>
 86e:	88 23       	and	r24, r24
 870:	99 f1       	breq	.+102    	; 0x8d8 <__EEPROM_REGION_LENGTH__+0xd8>
 872:	81 e0       	ldi	r24, 0x01	; 1
 874:	36 c0       	rjmp	.+108    	; 0x8e2 <__EEPROM_REGION_LENGTH__+0xe2>
 876:	82 30       	cpi	r24, 0x02	; 2
 878:	89 f5       	brne	.+98     	; 0x8dc <__EEPROM_REGION_LENGTH__+0xdc>
 87a:	ec e0       	ldi	r30, 0x0C	; 12
 87c:	f1 e0       	ldi	r31, 0x01	; 1
 87e:	87 a5       	ldd	r24, Z+47	; 0x2f
 880:	90 a9       	ldd	r25, Z+48	; 0x30
 882:	d8 01       	movw	r26, r16
 884:	8c 93       	st	X, r24
 886:	87 a5       	ldd	r24, Z+47	; 0x2f
 888:	90 a9       	ldd	r25, Z+48	; 0x30
 88a:	11 96       	adiw	r26, 0x01	; 1
 88c:	9c 93       	st	X, r25
 88e:	11 97       	sbiw	r26, 0x01	; 1
 890:	85 a5       	ldd	r24, Z+45	; 0x2d
 892:	96 a5       	ldd	r25, Z+46	; 0x2e
 894:	12 96       	adiw	r26, 0x02	; 2
 896:	8c 93       	st	X, r24
 898:	12 97       	sbiw	r26, 0x02	; 2
 89a:	85 a5       	ldd	r24, Z+45	; 0x2d
 89c:	96 a5       	ldd	r25, Z+46	; 0x2e
 89e:	13 96       	adiw	r26, 0x03	; 3
 8a0:	9c 93       	st	X, r25
 8a2:	13 97       	sbiw	r26, 0x03	; 3
 8a4:	81 a9       	ldd	r24, Z+49	; 0x31
 8a6:	92 a9       	ldd	r25, Z+50	; 0x32
 8a8:	14 96       	adiw	r26, 0x04	; 4
 8aa:	8c 93       	st	X, r24
 8ac:	14 97       	sbiw	r26, 0x04	; 4
 8ae:	81 a9       	ldd	r24, Z+49	; 0x31
 8b0:	92 a9       	ldd	r25, Z+50	; 0x32
 8b2:	15 96       	adiw	r26, 0x05	; 5
 8b4:	9c 93       	st	X, r25
 8b6:	15 97       	sbiw	r26, 0x05	; 5
 8b8:	16 96       	adiw	r26, 0x06	; 6
 8ba:	1c 92       	st	X, r1
 8bc:	16 97       	sbiw	r26, 0x06	; 6
 8be:	17 96       	adiw	r26, 0x07	; 7
 8c0:	1c 92       	st	X, r1
 8c2:	48 e0       	ldi	r20, 0x08	; 8
 8c4:	b8 01       	movw	r22, r16
 8c6:	83 e0       	ldi	r24, 0x03	; 3
 8c8:	0e 94 d3 24 	call	0x49a6	; 0x49a6 <CANSendMessage>
 8cc:	88 23       	and	r24, r24
 8ce:	41 f0       	breq	.+16     	; 0x8e0 <__EEPROM_REGION_LENGTH__+0xe0>
 8d0:	81 e0       	ldi	r24, 0x01	; 1
 8d2:	07 c0       	rjmp	.+14     	; 0x8e2 <__EEPROM_REGION_LENGTH__+0xe2>
 8d4:	80 e0       	ldi	r24, 0x00	; 0
 8d6:	05 c0       	rjmp	.+10     	; 0x8e2 <__EEPROM_REGION_LENGTH__+0xe2>
 8d8:	80 e0       	ldi	r24, 0x00	; 0
 8da:	03 c0       	rjmp	.+6      	; 0x8e2 <__EEPROM_REGION_LENGTH__+0xe2>
 8dc:	81 e0       	ldi	r24, 0x01	; 1
 8de:	01 c0       	rjmp	.+2      	; 0x8e2 <__EEPROM_REGION_LENGTH__+0xe2>
 8e0:	80 e0       	ldi	r24, 0x00	; 0
 8e2:	88 23       	and	r24, r24
 8e4:	71 f0       	breq	.+28     	; 0x902 <__EEPROM_REGION_LENGTH__+0x102>
 8e6:	80 91 69 07 	lds	r24, 0x0769	; 0x800769 <sg_u8ControllerStatusMsgCount>
 8ea:	8f 5f       	subi	r24, 0xFF	; 255
 8ec:	80 93 69 07 	sts	0x0769, r24	; 0x800769 <sg_u8ControllerStatusMsgCount>
 8f0:	83 30       	cpi	r24, 0x03	; 3
 8f2:	38 f0       	brcs	.+14     	; 0x902 <__EEPROM_REGION_LENGTH__+0x102>
 8f4:	10 92 69 07 	sts	0x0769, r1	; 0x800769 <sg_u8ControllerStatusMsgCount>
 8f8:	10 92 16 03 	sts	0x0316, r1	; 0x800316 <sg_bSendModuleControllerStatus>
 8fc:	81 e0       	ldi	r24, 0x01	; 1
 8fe:	80 93 13 03 	sts	0x0313, r24	; 0x800313 <sg_bSendCellCommStatus>
 902:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <sg_bSendCellStatus>
 906:	88 23       	and	r24, r24
 908:	09 f4       	brne	.+2      	; 0x90c <__EEPROM_REGION_LENGTH__+0x10c>
 90a:	6e c0       	rjmp	.+220    	; 0x9e8 <__EEPROM_REGION_LENGTH__+0x1e8>
 90c:	1c 82       	std	Y+4, r1	; 0x04
 90e:	1b 82       	std	Y+3, r1	; 0x03
 910:	1a 82       	std	Y+2, r1	; 0x02
 912:	19 82       	std	Y+1, r1	; 0x01
 914:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <sg_sFrame+0x29>
 918:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <sg_u8CellStatus>
 91c:	89 17       	cp	r24, r25
 91e:	08 f0       	brcs	.+2      	; 0x922 <__EEPROM_REGION_LENGTH__+0x122>
 920:	5d c0       	rjmp	.+186    	; 0x9dc <__EEPROM_REGION_LENGTH__+0x1dc>
 922:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <sg_u8CellStatus>
 926:	90 e0       	ldi	r25, 0x00	; 0
 928:	44 96       	adiw	r24, 0x14	; 20
 92a:	88 0f       	add	r24, r24
 92c:	99 1f       	adc	r25, r25
 92e:	88 0f       	add	r24, r24
 930:	99 1f       	adc	r25, r25
 932:	ae 01       	movw	r20, r28
 934:	4f 5f       	subi	r20, 0xFF	; 255
 936:	5f 4f       	sbci	r21, 0xFF	; 255
 938:	be 01       	movw	r22, r28
 93a:	6d 5f       	subi	r22, 0xFD	; 253
 93c:	7f 4f       	sbci	r23, 0xFF	; 255
 93e:	84 5f       	subi	r24, 0xF4	; 244
 940:	9e 4f       	sbci	r25, 0xFE	; 254
 942:	0e 94 77 22 	call	0x44ee	; 0x44ee <CellDataConvert>
 946:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <sg_u8CellStatus>
 94a:	f8 01       	movw	r30, r16
 94c:	80 83       	st	Z, r24
 94e:	ec e0       	ldi	r30, 0x0C	; 12
 950:	f1 e0       	ldi	r31, 0x01	; 1
 952:	81 89       	ldd	r24, Z+17	; 0x11
 954:	d8 01       	movw	r26, r16
 956:	11 96       	adiw	r26, 0x01	; 1
 958:	8c 93       	st	X, r24
 95a:	11 97       	sbiw	r26, 0x01	; 1
 95c:	99 81       	ldd	r25, Y+1	; 0x01
 95e:	8a 81       	ldd	r24, Y+2	; 0x02
 960:	12 96       	adiw	r26, 0x02	; 2
 962:	9c 93       	st	X, r25
 964:	12 97       	sbiw	r26, 0x02	; 2
 966:	13 96       	adiw	r26, 0x03	; 3
 968:	8c 93       	st	X, r24
 96a:	13 97       	sbiw	r26, 0x03	; 3
 96c:	3b 81       	ldd	r19, Y+3	; 0x03
 96e:	2c 81       	ldd	r18, Y+4	; 0x04
 970:	14 96       	adiw	r26, 0x04	; 4
 972:	3c 93       	st	X, r19
 974:	14 97       	sbiw	r26, 0x04	; 4
 976:	15 96       	adiw	r26, 0x05	; 5
 978:	2c 93       	st	X, r18
 97a:	83 2f       	mov	r24, r19
 97c:	92 2f       	mov	r25, r18
 97e:	64 e0       	ldi	r22, 0x04	; 4
 980:	70 e1       	ldi	r23, 0x10	; 16
 982:	0e 94 9f 22 	call	0x453e	; 0x453e <__udivmodhi4>
 986:	44 e6       	ldi	r20, 0x64	; 100
 988:	64 9f       	mul	r22, r20
 98a:	60 2d       	mov	r22, r0
 98c:	11 24       	eor	r1, r1
 98e:	d8 01       	movw	r26, r16
 990:	16 96       	adiw	r26, 0x06	; 6
 992:	6c 93       	st	X, r22
 994:	63 a9       	ldd	r22, Z+51	; 0x33
 996:	74 a9       	ldd	r23, Z+52	; 0x34
 998:	85 a9       	ldd	r24, Z+53	; 0x35
 99a:	96 a9       	ldd	r25, Z+54	; 0x36
 99c:	68 1b       	sub	r22, r24
 99e:	79 0b       	sbc	r23, r25
 9a0:	83 2f       	mov	r24, r19
 9a2:	92 2f       	mov	r25, r18
 9a4:	0e 94 9f 22 	call	0x453e	; 0x453e <__udivmodhi4>
 9a8:	64 9f       	mul	r22, r20
 9aa:	60 2d       	mov	r22, r0
 9ac:	11 24       	eor	r1, r1
 9ae:	f8 01       	movw	r30, r16
 9b0:	67 83       	std	Z+7, r22	; 0x07
 9b2:	48 e0       	ldi	r20, 0x08	; 8
 9b4:	b8 01       	movw	r22, r16
 9b6:	84 e0       	ldi	r24, 0x04	; 4
 9b8:	0e 94 d3 24 	call	0x49a6	; 0x49a6 <CANSendMessage>
 9bc:	88 23       	and	r24, r24
 9be:	a1 f0       	breq	.+40     	; 0x9e8 <__EEPROM_REGION_LENGTH__+0x1e8>
 9c0:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <sg_u8CellStatus>
 9c4:	8f 5f       	subi	r24, 0xFF	; 255
 9c6:	80 93 1f 03 	sts	0x031F, r24	; 0x80031f <sg_u8CellStatus>
 9ca:	90 91 1f 03 	lds	r25, 0x031F	; 0x80031f <sg_u8CellStatus>
 9ce:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <sg_u8CellStatusTarget>
 9d2:	98 17       	cp	r25, r24
 9d4:	48 f0       	brcs	.+18     	; 0x9e8 <__EEPROM_REGION_LENGTH__+0x1e8>
 9d6:	10 92 15 03 	sts	0x0315, r1	; 0x800315 <sg_bSendCellStatus>
 9da:	06 c0       	rjmp	.+12     	; 0x9e8 <__EEPROM_REGION_LENGTH__+0x1e8>
 9dc:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <sg_u8CellStatusTarget>
 9e0:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <sg_u8CellStatus>
 9e4:	10 92 15 03 	sts	0x0315, r1	; 0x800315 <sg_bSendCellStatus>
 9e8:	80 91 13 03 	lds	r24, 0x0313	; 0x800313 <sg_bSendCellCommStatus>
 9ec:	88 23       	and	r24, r24
 9ee:	89 f1       	breq	.+98     	; 0xa52 <__EEPROM_REGION_LENGTH__+0x252>
 9f0:	ec e0       	ldi	r30, 0x0C	; 12
 9f2:	f1 e0       	ldi	r31, 0x01	; 1
 9f4:	87 85       	ldd	r24, Z+15	; 0x0f
 9f6:	d8 01       	movw	r26, r16
 9f8:	8c 93       	st	X, r24
 9fa:	80 89       	ldd	r24, Z+16	; 0x10
 9fc:	11 96       	adiw	r26, 0x01	; 1
 9fe:	8c 93       	st	X, r24
 a00:	11 97       	sbiw	r26, 0x01	; 1
 a02:	84 a1       	ldd	r24, Z+36	; 0x24
 a04:	95 a1       	ldd	r25, Z+37	; 0x25
 a06:	12 96       	adiw	r26, 0x02	; 2
 a08:	8c 93       	st	X, r24
 a0a:	12 97       	sbiw	r26, 0x02	; 2
 a0c:	84 a1       	ldd	r24, Z+36	; 0x24
 a0e:	95 a1       	ldd	r25, Z+37	; 0x25
 a10:	13 96       	adiw	r26, 0x03	; 3
 a12:	9c 93       	st	X, r25
 a14:	13 97       	sbiw	r26, 0x03	; 3
 a16:	82 a5       	ldd	r24, Z+42	; 0x2a
 a18:	14 96       	adiw	r26, 0x04	; 4
 a1a:	8c 93       	st	X, r24
 a1c:	14 97       	sbiw	r26, 0x04	; 4
 a1e:	86 a1       	ldd	r24, Z+38	; 0x26
 a20:	8f 3f       	cpi	r24, 0xFF	; 255
 a22:	31 f0       	breq	.+12     	; 0xa30 <__EEPROM_REGION_LENGTH__+0x230>
 a24:	81 a5       	ldd	r24, Z+41	; 0x29
 a26:	96 a1       	ldd	r25, Z+38	; 0x26
 a28:	89 1b       	sub	r24, r25
 a2a:	15 96       	adiw	r26, 0x05	; 5
 a2c:	8c 93       	st	X, r24
 a2e:	03 c0       	rjmp	.+6      	; 0xa36 <__EEPROM_REGION_LENGTH__+0x236>
 a30:	8f ef       	ldi	r24, 0xFF	; 255
 a32:	f8 01       	movw	r30, r16
 a34:	85 83       	std	Z+5, r24	; 0x05
 a36:	d8 01       	movw	r26, r16
 a38:	16 96       	adiw	r26, 0x06	; 6
 a3a:	1c 92       	st	X, r1
 a3c:	16 97       	sbiw	r26, 0x06	; 6
 a3e:	17 96       	adiw	r26, 0x07	; 7
 a40:	1c 92       	st	X, r1
 a42:	48 e0       	ldi	r20, 0x08	; 8
 a44:	b8 01       	movw	r22, r16
 a46:	86 e0       	ldi	r24, 0x06	; 6
 a48:	0e 94 d3 24 	call	0x49a6	; 0x49a6 <CANSendMessage>
 a4c:	81 11       	cpse	r24, r1
 a4e:	10 92 13 03 	sts	0x0313, r1	; 0x800313 <sg_bSendCellCommStatus>
 a52:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <sg_bSendHardwareDetail>
 a56:	88 23       	and	r24, r24
 a58:	91 f0       	breq	.+36     	; 0xa7e <__EEPROM_REGION_LENGTH__+0x27e>
 a5a:	b8 01       	movw	r22, r16
 a5c:	c8 01       	movw	r24, r16
 a5e:	02 96       	adiw	r24, 0x02	; 2
 a60:	0e 94 75 19 	call	0x32ea	; 0x32ea <CurrentThresholdsGet>
 a64:	f8 01       	movw	r30, r16
 a66:	14 82       	std	Z+4, r1	; 0x04
 a68:	15 82       	std	Z+5, r1	; 0x05
 a6a:	16 82       	std	Z+6, r1	; 0x06
 a6c:	17 82       	std	Z+7, r1	; 0x07
 a6e:	48 e0       	ldi	r20, 0x08	; 8
 a70:	b8 01       	movw	r22, r16
 a72:	85 e0       	ldi	r24, 0x05	; 5
 a74:	0e 94 d3 24 	call	0x49a6	; 0x49a6 <CANSendMessage>
 a78:	81 11       	cpse	r24, r1
 a7a:	10 92 14 03 	sts	0x0314, r1	; 0x800314 <sg_bSendHardwareDetail>
 a7e:	0f 90       	pop	r0
 a80:	0f 90       	pop	r0
 a82:	0f 90       	pop	r0
 a84:	0f 90       	pop	r0
 a86:	df 91       	pop	r29
 a88:	cf 91       	pop	r28
 a8a:	1f 91       	pop	r17
 a8c:	0f 91       	pop	r16
 a8e:	ff 90       	pop	r15
 a90:	ef 90       	pop	r14
 a92:	df 90       	pop	r13
 a94:	cf 90       	pop	r12
 a96:	08 95       	ret

Disassembly of section .text.CellStringProcess:

00000a98 <CellStringProcess>:
 a98:	3f 92       	push	r3
 a9a:	4f 92       	push	r4
 a9c:	5f 92       	push	r5
 a9e:	6f 92       	push	r6
 aa0:	7f 92       	push	r7
 aa2:	8f 92       	push	r8
 aa4:	9f 92       	push	r9
 aa6:	af 92       	push	r10
 aa8:	bf 92       	push	r11
 aaa:	cf 92       	push	r12
 aac:	df 92       	push	r13
 aae:	ef 92       	push	r14
 ab0:	ff 92       	push	r15
 ab2:	0f 93       	push	r16
 ab4:	1f 93       	push	r17
 ab6:	cf 93       	push	r28
 ab8:	df 93       	push	r29
 aba:	00 d0       	rcall	.+0      	; 0xabc <CellStringProcess+0x24>
 abc:	00 d0       	rcall	.+0      	; 0xabe <CellStringProcess+0x26>
 abe:	00 d0       	rcall	.+0      	; 0xac0 <CellStringProcess+0x28>
 ac0:	cd b7       	in	r28, 0x3d	; 61
 ac2:	de b7       	in	r29, 0x3e	; 62
 ac4:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <sg_sFrame+0x27>
 ac8:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <sg_sFrame+0x28>
 acc:	89 2b       	or	r24, r25
 ace:	09 f4       	brne	.+2      	; 0xad2 <CellStringProcess+0x3a>
 ad0:	1e c1       	rjmp	.+572    	; 0xd0e <CellStringProcess+0x276>
 ad2:	ec e0       	ldi	r30, 0x0C	; 12
 ad4:	f1 e0       	ldi	r31, 0x01	; 1
 ad6:	8f ef       	ldi	r24, 0xFF	; 255
 ad8:	86 a3       	std	Z+38, r24	; 0x26
 ada:	97 85       	ldd	r25, Z+15	; 0x0f
 adc:	81 a5       	ldd	r24, Z+41	; 0x29
 ade:	89 17       	cp	r24, r25
 ae0:	28 f4       	brcc	.+10     	; 0xaec <CellStringProcess+0x54>
 ae2:	81 a5       	ldd	r24, Z+41	; 0x29
 ae4:	87 87       	std	Z+15, r24	; 0x0f
 ae6:	81 e0       	ldi	r24, 0x01	; 1
 ae8:	80 93 13 03 	sts	0x0313, r24	; 0x800313 <sg_bSendCellCommStatus>
 aec:	ec e0       	ldi	r30, 0x0C	; 12
 aee:	f1 e0       	ldi	r31, 0x01	; 1
 af0:	90 89       	ldd	r25, Z+16	; 0x10
 af2:	81 a5       	ldd	r24, Z+41	; 0x29
 af4:	98 17       	cp	r25, r24
 af6:	28 f4       	brcc	.+10     	; 0xb02 <CellStringProcess+0x6a>
 af8:	81 a5       	ldd	r24, Z+41	; 0x29
 afa:	80 8b       	std	Z+16, r24	; 0x10
 afc:	81 e0       	ldi	r24, 0x01	; 1
 afe:	80 93 13 03 	sts	0x0313, r24	; 0x800313 <sg_bSendCellCommStatus>
 b02:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <sg_sFrame+0x27>
 b06:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <sg_sFrame+0x28>
 b0a:	83 70       	andi	r24, 0x03	; 3
 b0c:	99 27       	eor	r25, r25
 b0e:	89 2b       	or	r24, r25
 b10:	61 f0       	breq	.+24     	; 0xb2a <CellStringProcess+0x92>
 b12:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <sg_sFrame+0x2a>
 b16:	8f 3f       	cpi	r24, 0xFF	; 255
 b18:	41 f0       	breq	.+16     	; 0xb2a <CellStringProcess+0x92>
 b1a:	ec e0       	ldi	r30, 0x0C	; 12
 b1c:	f1 e0       	ldi	r31, 0x01	; 1
 b1e:	82 a5       	ldd	r24, Z+42	; 0x2a
 b20:	8f 5f       	subi	r24, 0xFF	; 255
 b22:	82 a7       	std	Z+42, r24	; 0x2a
 b24:	81 e0       	ldi	r24, 0x01	; 1
 b26:	80 93 13 03 	sts	0x0313, r24	; 0x800313 <sg_bSendCellCommStatus>
 b2a:	ec e0       	ldi	r30, 0x0C	; 12
 b2c:	f1 e0       	ldi	r31, 0x01	; 1
 b2e:	14 aa       	std	Z+52, r1	; 0x34
 b30:	13 aa       	std	Z+51, r1	; 0x33
 b32:	8f ef       	ldi	r24, 0xFF	; 255
 b34:	9f ef       	ldi	r25, 0xFF	; 255
 b36:	96 ab       	std	Z+54, r25	; 0x36
 b38:	85 ab       	std	Z+53, r24	; 0x35
 b3a:	10 ae       	std	Z+56, r1	; 0x38
 b3c:	17 aa       	std	Z+55, r1	; 0x37
 b3e:	80 e0       	ldi	r24, 0x00	; 0
 b40:	90 e8       	ldi	r25, 0x80	; 128
 b42:	96 a7       	std	Z+46, r25	; 0x2e
 b44:	85 a7       	std	Z+45, r24	; 0x2d
 b46:	8f ef       	ldi	r24, 0xFF	; 255
 b48:	9f e7       	ldi	r25, 0x7F	; 127
 b4a:	90 ab       	std	Z+48, r25	; 0x30
 b4c:	87 a7       	std	Z+47, r24	; 0x2f
 b4e:	12 aa       	std	Z+50, r1	; 0x32
 b50:	11 aa       	std	Z+49, r1	; 0x31
 b52:	d1 2c       	mov	r13, r1
 b54:	31 2c       	mov	r3, r1
 b56:	c1 2c       	mov	r12, r1
 b58:	41 2c       	mov	r4, r1
 b5a:	51 2c       	mov	r5, r1
 b5c:	32 01       	movw	r6, r4
 b5e:	81 2c       	mov	r8, r1
 b60:	91 2c       	mov	r9, r1
 b62:	54 01       	movw	r10, r8
 b64:	2f ef       	ldi	r18, 0xFF	; 255
 b66:	3f e7       	ldi	r19, 0x7F	; 127
 b68:	3e 83       	std	Y+6, r19	; 0x06
 b6a:	2d 83       	std	Y+5, r18	; 0x05
 b6c:	80 e0       	ldi	r24, 0x00	; 0
 b6e:	90 e8       	ldi	r25, 0x80	; 128
 b70:	9c 83       	std	Y+4, r25	; 0x04
 b72:	8b 83       	std	Y+3, r24	; 0x03
 b74:	6b c0       	rjmp	.+214    	; 0xc4c <CellStringProcess+0x1b4>
 b76:	0d 2d       	mov	r16, r13
 b78:	10 e0       	ldi	r17, 0x00	; 0
 b7a:	f8 01       	movw	r30, r16
 b7c:	74 96       	adiw	r30, 0x14	; 20
 b7e:	ee 0f       	add	r30, r30
 b80:	ff 1f       	adc	r31, r31
 b82:	ee 0f       	add	r30, r30
 b84:	ff 1f       	adc	r31, r31
 b86:	e4 5f       	subi	r30, 0xF4	; 244
 b88:	fe 4f       	sbci	r31, 0xFE	; 254
 b8a:	80 81       	ld	r24, Z
 b8c:	91 81       	ldd	r25, Z+1	; 0x01
 b8e:	9a 83       	std	Y+2, r25	; 0x02
 b90:	89 83       	std	Y+1, r24	; 0x01
 b92:	e2 80       	ldd	r14, Z+2	; 0x02
 b94:	f3 80       	ldd	r15, Z+3	; 0x03
 b96:	60 e0       	ldi	r22, 0x00	; 0
 b98:	70 e0       	ldi	r23, 0x00	; 0
 b9a:	c7 01       	movw	r24, r14
 b9c:	0e 94 8b 1c 	call	0x3916	; 0x3916 <CellDataConvertTemperature>
 ba0:	88 23       	and	r24, r24
 ba2:	f1 f0       	breq	.+60     	; 0xbe0 <CellStringProcess+0x148>
 ba4:	f4 fe       	sbrs	r15, 4
 ba6:	03 c0       	rjmp	.+6      	; 0xbae <CellStringProcess+0x116>
 ba8:	c7 01       	movw	r24, r14
 baa:	90 6f       	ori	r25, 0xF0	; 240
 bac:	02 c0       	rjmp	.+4      	; 0xbb2 <CellStringProcess+0x11a>
 bae:	c7 01       	movw	r24, r14
 bb0:	9f 77       	andi	r25, 0x7F	; 127
 bb2:	eb 81       	ldd	r30, Y+3	; 0x03
 bb4:	fc 81       	ldd	r31, Y+4	; 0x04
 bb6:	e8 17       	cp	r30, r24
 bb8:	f9 07       	cpc	r31, r25
 bba:	14 f4       	brge	.+4      	; 0xbc0 <CellStringProcess+0x128>
 bbc:	9c 83       	std	Y+4, r25	; 0x04
 bbe:	8b 83       	std	Y+3, r24	; 0x03
 bc0:	2d 81       	ldd	r18, Y+5	; 0x05
 bc2:	3e 81       	ldd	r19, Y+6	; 0x06
 bc4:	82 17       	cp	r24, r18
 bc6:	93 07       	cpc	r25, r19
 bc8:	14 f4       	brge	.+4      	; 0xbce <CellStringProcess+0x136>
 bca:	9e 83       	std	Y+6, r25	; 0x06
 bcc:	8d 83       	std	Y+5, r24	; 0x05
 bce:	09 2e       	mov	r0, r25
 bd0:	00 0c       	add	r0, r0
 bd2:	aa 0b       	sbc	r26, r26
 bd4:	bb 0b       	sbc	r27, r27
 bd6:	88 0e       	add	r8, r24
 bd8:	99 1e       	adc	r9, r25
 bda:	aa 1e       	adc	r10, r26
 bdc:	bb 1e       	adc	r11, r27
 bde:	33 94       	inc	r3
 be0:	f8 01       	movw	r30, r16
 be2:	74 96       	adiw	r30, 0x14	; 20
 be4:	ee 0f       	add	r30, r30
 be6:	ff 1f       	adc	r31, r31
 be8:	ee 0f       	add	r30, r30
 bea:	ff 1f       	adc	r31, r31
 bec:	e4 5f       	subi	r30, 0xF4	; 244
 bee:	fe 4f       	sbci	r31, 0xFE	; 254
 bf0:	80 81       	ld	r24, Z
 bf2:	91 81       	ldd	r25, Z+1	; 0x01
 bf4:	99 23       	and	r25, r25
 bf6:	1c f4       	brge	.+6      	; 0xbfe <CellStringProcess+0x166>
 bf8:	81 e0       	ldi	r24, 0x01	; 1
 bfa:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <sg_sFrame+0x23>
 bfe:	be 01       	movw	r22, r28
 c00:	6f 5f       	subi	r22, 0xFF	; 255
 c02:	7f 4f       	sbci	r23, 0xFF	; 255
 c04:	89 81       	ldd	r24, Y+1	; 0x01
 c06:	9a 81       	ldd	r25, Y+2	; 0x02
 c08:	0e 94 09 1e 	call	0x3c12	; 0x3c12 <CellDataConvertVoltage>
 c0c:	88 23       	and	r24, r24
 c0e:	e9 f0       	breq	.+58     	; 0xc4a <CellStringProcess+0x1b2>
 c10:	20 91 3f 01 	lds	r18, 0x013F	; 0x80013f <sg_sFrame+0x33>
 c14:	30 91 40 01 	lds	r19, 0x0140	; 0x800140 <sg_sFrame+0x34>
 c18:	89 81       	ldd	r24, Y+1	; 0x01
 c1a:	9a 81       	ldd	r25, Y+2	; 0x02
 c1c:	28 17       	cp	r18, r24
 c1e:	39 07       	cpc	r19, r25
 c20:	20 f4       	brcc	.+8      	; 0xc2a <CellStringProcess+0x192>
 c22:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <sg_sFrame+0x34>
 c26:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <sg_sFrame+0x33>
 c2a:	20 91 41 01 	lds	r18, 0x0141	; 0x800141 <sg_sFrame+0x35>
 c2e:	30 91 42 01 	lds	r19, 0x0142	; 0x800142 <sg_sFrame+0x36>
 c32:	82 17       	cp	r24, r18
 c34:	93 07       	cpc	r25, r19
 c36:	20 f4       	brcc	.+8      	; 0xc40 <CellStringProcess+0x1a8>
 c38:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <sg_sFrame+0x36>
 c3c:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <sg_sFrame+0x35>
 c40:	48 0e       	add	r4, r24
 c42:	59 1e       	adc	r5, r25
 c44:	61 1c       	adc	r6, r1
 c46:	71 1c       	adc	r7, r1
 c48:	c3 94       	inc	r12
 c4a:	d3 94       	inc	r13
 c4c:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <sg_sFrame+0x29>
 c50:	d8 16       	cp	r13, r24
 c52:	08 f4       	brcc	.+2      	; 0xc56 <CellStringProcess+0x1be>
 c54:	90 cf       	rjmp	.-224    	; 0xb76 <CellStringProcess+0xde>
 c56:	cc 20       	and	r12, r12
 c58:	79 f1       	breq	.+94     	; 0xcb8 <CellStringProcess+0x220>
 c5a:	0c e0       	ldi	r16, 0x0C	; 12
 c5c:	11 e0       	ldi	r17, 0x01	; 1
 c5e:	f8 01       	movw	r30, r16
 c60:	41 ae       	std	Z+57, r4	; 0x39
 c62:	52 ae       	std	Z+58, r5	; 0x3a
 c64:	63 ae       	std	Z+59, r6	; 0x3b
 c66:	74 ae       	std	Z+60, r7	; 0x3c
 c68:	61 ad       	ldd	r22, Z+57	; 0x39
 c6a:	72 ad       	ldd	r23, Z+58	; 0x3a
 c6c:	83 ad       	ldd	r24, Z+59	; 0x3b
 c6e:	94 ad       	ldd	r25, Z+60	; 0x3c
 c70:	2c 2d       	mov	r18, r12
 c72:	30 e0       	ldi	r19, 0x00	; 0
 c74:	40 e0       	ldi	r20, 0x00	; 0
 c76:	50 e0       	ldi	r21, 0x00	; 0
 c78:	0e 94 2b 20 	call	0x4056	; 0x4056 <__udivmodsi4>
 c7c:	f8 01       	movw	r30, r16
 c7e:	30 af       	std	Z+56, r19	; 0x38
 c80:	27 ab       	std	Z+55, r18	; 0x37
 c82:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <sg_eModuleControllerStateCurrent>
 c86:	83 30       	cpi	r24, 0x03	; 3
 c88:	b9 f0       	breq	.+46     	; 0xcb8 <CellStringProcess+0x220>
 c8a:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <sg_bCellBalancedOnce>
 c8e:	81 11       	cpse	r24, r1
 c90:	13 c0       	rjmp	.+38     	; 0xcb8 <CellStringProcess+0x220>
 c92:	23 a9       	ldd	r18, Z+51	; 0x33
 c94:	34 a9       	ldd	r19, Z+52	; 0x34
 c96:	85 a9       	ldd	r24, Z+53	; 0x35
 c98:	96 a9       	ldd	r25, Z+54	; 0x36
 c9a:	28 17       	cp	r18, r24
 c9c:	39 07       	cpc	r19, r25
 c9e:	60 f0       	brcs	.+24     	; 0xcb8 <CellStringProcess+0x220>
 ca0:	83 a9       	ldd	r24, Z+51	; 0x33
 ca2:	94 a9       	ldd	r25, Z+52	; 0x34
 ca4:	25 a9       	ldd	r18, Z+53	; 0x35
 ca6:	36 a9       	ldd	r19, Z+54	; 0x36
 ca8:	82 1b       	sub	r24, r18
 caa:	93 0b       	sbc	r25, r19
 cac:	80 34       	cpi	r24, 0x40	; 64
 cae:	91 05       	cpc	r25, r1
 cb0:	18 f0       	brcs	.+6      	; 0xcb8 <CellStringProcess+0x220>
 cb2:	81 e0       	ldi	r24, 0x01	; 1
 cb4:	80 93 12 03 	sts	0x0312, r24	; 0x800312 <sg_bCellBalanceReady>
 cb8:	33 20       	and	r3, r3
 cba:	c9 f0       	breq	.+50     	; 0xcee <CellStringProcess+0x256>
 cbc:	23 2d       	mov	r18, r3
 cbe:	30 e0       	ldi	r19, 0x00	; 0
 cc0:	40 e0       	ldi	r20, 0x00	; 0
 cc2:	50 e0       	ldi	r21, 0x00	; 0
 cc4:	c5 01       	movw	r24, r10
 cc6:	b4 01       	movw	r22, r8
 cc8:	0e 94 c9 21 	call	0x4392	; 0x4392 <__divmodsi4>
 ccc:	6d e3       	ldi	r22, 0x3D	; 61
 cce:	71 e0       	ldi	r23, 0x01	; 1
 cd0:	c9 01       	movw	r24, r18
 cd2:	0e 94 8b 1c 	call	0x3916	; 0x3916 <CellDataConvertTemperature>
 cd6:	69 e3       	ldi	r22, 0x39	; 57
 cd8:	71 e0       	ldi	r23, 0x01	; 1
 cda:	8b 81       	ldd	r24, Y+3	; 0x03
 cdc:	9c 81       	ldd	r25, Y+4	; 0x04
 cde:	0e 94 8b 1c 	call	0x3916	; 0x3916 <CellDataConvertTemperature>
 ce2:	6b e3       	ldi	r22, 0x3B	; 59
 ce4:	71 e0       	ldi	r23, 0x01	; 1
 ce6:	8d 81       	ldd	r24, Y+5	; 0x05
 ce8:	9e 81       	ldd	r25, Y+6	; 0x06
 cea:	0e 94 8b 1c 	call	0x3916	; 0x3916 <CellDataConvertTemperature>
 cee:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_bSDCardReady>
 cf2:	88 23       	and	r24, r24
 cf4:	51 f0       	breq	.+20     	; 0xd0a <CellStringProcess+0x272>
 cf6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <sg_eModuleControllerStateCurrent>
 cfa:	88 23       	and	r24, r24
 cfc:	31 f0       	breq	.+12     	; 0xd0a <CellStringProcess+0x272>
 cfe:	8c e0       	ldi	r24, 0x0C	; 12
 d00:	91 e0       	ldi	r25, 0x01	; 1
 d02:	0e 94 ee 12 	call	0x25dc	; 0x25dc <STORE_WriteFrame>
 d06:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <sg_bSDCardReady>
 d0a:	0e 94 85 25 	call	0x4b0a	; 0x4b0a <SendModuleControllerStatus>
 d0e:	26 96       	adiw	r28, 0x06	; 6
 d10:	0f b6       	in	r0, 0x3f	; 63
 d12:	f8 94       	cli
 d14:	de bf       	out	0x3e, r29	; 62
 d16:	0f be       	out	0x3f, r0	; 63
 d18:	cd bf       	out	0x3d, r28	; 61
 d1a:	df 91       	pop	r29
 d1c:	cf 91       	pop	r28
 d1e:	1f 91       	pop	r17
 d20:	0f 91       	pop	r16
 d22:	ff 90       	pop	r15
 d24:	ef 90       	pop	r14
 d26:	df 90       	pop	r13
 d28:	cf 90       	pop	r12
 d2a:	bf 90       	pop	r11
 d2c:	af 90       	pop	r10
 d2e:	9f 90       	pop	r9
 d30:	8f 90       	pop	r8
 d32:	7f 90       	pop	r7
 d34:	6f 90       	pop	r6
 d36:	5f 90       	pop	r5
 d38:	4f 90       	pop	r4
 d3a:	3f 90       	pop	r3
 d3c:	08 95       	ret

Disassembly of section .text.Delay:

00003e84 <Delay>:
    3e84:	ab 01       	movw	r20, r22
    3e86:	bc 01       	movw	r22, r24
    3e88:	4f 5f       	subi	r20, 0xFF	; 255
    3e8a:	5f 4f       	sbci	r21, 0xFF	; 255
    3e8c:	6f 4f       	sbci	r22, 0xFF	; 255
    3e8e:	7f 4f       	sbci	r23, 0xFF	; 255
    3e90:	76 95       	lsr	r23
    3e92:	67 95       	ror	r22
    3e94:	57 95       	ror	r21
    3e96:	47 95       	ror	r20
    3e98:	96 b5       	in	r25, 0x26	; 38
    3e9a:	17 c0       	rjmp	.+46     	; 0x3eca <Delay+0x46>
    3e9c:	86 b5       	in	r24, 0x26	; 38
    3e9e:	98 17       	cp	r25, r24
    3ea0:	e9 f3       	breq	.-6      	; 0x3e9c <Delay+0x18>
    3ea2:	26 b5       	in	r18, 0x26	; 38
    3ea4:	82 2f       	mov	r24, r18
    3ea6:	89 1b       	sub	r24, r25
    3ea8:	90 e0       	ldi	r25, 0x00	; 0
    3eaa:	a0 e0       	ldi	r26, 0x00	; 0
    3eac:	b0 e0       	ldi	r27, 0x00	; 0
    3eae:	48 17       	cp	r20, r24
    3eb0:	59 07       	cpc	r21, r25
    3eb2:	6a 07       	cpc	r22, r26
    3eb4:	7b 07       	cpc	r23, r27
    3eb6:	28 f0       	brcs	.+10     	; 0x3ec2 <Delay+0x3e>
    3eb8:	48 1b       	sub	r20, r24
    3eba:	59 0b       	sbc	r21, r25
    3ebc:	6a 0b       	sbc	r22, r26
    3ebe:	7b 0b       	sbc	r23, r27
    3ec0:	03 c0       	rjmp	.+6      	; 0x3ec8 <Delay+0x44>
    3ec2:	40 e0       	ldi	r20, 0x00	; 0
    3ec4:	50 e0       	ldi	r21, 0x00	; 0
    3ec6:	ba 01       	movw	r22, r20
    3ec8:	92 2f       	mov	r25, r18
    3eca:	41 15       	cp	r20, r1
    3ecc:	51 05       	cpc	r21, r1
    3ece:	61 05       	cpc	r22, r1
    3ed0:	71 05       	cpc	r23, r1
    3ed2:	21 f7       	brne	.-56     	; 0x3e9c <Delay+0x18>
    3ed4:	08 95       	ret

Disassembly of section .text.CANReceiveCallback:

0000183a <CANReceiveCallback>:
    183a:	ef 92       	push	r14
    183c:	ff 92       	push	r15
    183e:	0f 93       	push	r16
    1840:	1f 93       	push	r17
    1842:	cf 93       	push	r28
    1844:	df 93       	push	r29
    1846:	c8 2f       	mov	r28, r24
    1848:	8b 01       	movw	r16, r22
    184a:	d4 2f       	mov	r29, r20
    184c:	f0 90 1d 03 	lds	r15, 0x031D	; 0x80031d <sg_bModuleRegistered>
    1850:	89 30       	cpi	r24, 0x09	; 9
    1852:	69 f5       	brne	.+90     	; 0x18ae <CANReceiveCallback+0x74>
    1854:	48 30       	cpi	r20, 0x08	; 8
    1856:	09 f0       	breq	.+2      	; 0x185a <CANReceiveCallback+0x20>
    1858:	de c0       	rjmp	.+444    	; 0x1a16 <CANReceiveCallback+0x1dc>
    185a:	fb 01       	movw	r30, r22
    185c:	90 81       	ld	r25, Z
    185e:	82 81       	ldd	r24, Z+2	; 0x02
    1860:	82 30       	cpi	r24, 0x02	; 2
    1862:	09 f0       	breq	.+2      	; 0x1866 <CANReceiveCallback+0x2c>
    1864:	d8 c0       	rjmp	.+432    	; 0x1a16 <CANReceiveCallback+0x1dc>
    1866:	83 81       	ldd	r24, Z+3	; 0x03
    1868:	83 30       	cpi	r24, 0x03	; 3
    186a:	09 f0       	breq	.+2      	; 0x186e <CANReceiveCallback+0x34>
    186c:	d4 c0       	rjmp	.+424    	; 0x1a16 <CANReceiveCallback+0x1dc>
    186e:	04 81       	ldd	r16, Z+4	; 0x04
    1870:	15 81       	ldd	r17, Z+5	; 0x05
    1872:	26 81       	ldd	r18, Z+6	; 0x06
    1874:	37 81       	ldd	r19, Z+7	; 0x07
    1876:	40 91 17 03 	lds	r20, 0x0317	; 0x800317 <sg_u32ModuleUniqueID>
    187a:	50 91 18 03 	lds	r21, 0x0318	; 0x800318 <sg_u32ModuleUniqueID+0x1>
    187e:	60 91 19 03 	lds	r22, 0x0319	; 0x800319 <sg_u32ModuleUniqueID+0x2>
    1882:	70 91 1a 03 	lds	r23, 0x031A	; 0x80031a <sg_u32ModuleUniqueID+0x3>
    1886:	04 17       	cp	r16, r20
    1888:	15 07       	cpc	r17, r21
    188a:	26 07       	cpc	r18, r22
    188c:	37 07       	cpc	r19, r23
    188e:	09 f0       	breq	.+2      	; 0x1892 <CANReceiveCallback+0x58>
    1890:	c2 c0       	rjmp	.+388    	; 0x1a16 <CANReceiveCallback+0x1dc>
    1892:	10 92 6d 07 	sts	0x076D, r1	; 0x80076d <sg_u8TicksSinceLastPackControllerMessage>
    1896:	90 93 23 03 	sts	0x0323, r25	; 0x800323 <sg_u8ModuleRegistrationID>
    189a:	0e 94 85 25 	call	0x4b0a	; 0x4b0a <SendModuleControllerStatus>
    189e:	81 e0       	ldi	r24, 0x01	; 1
    18a0:	80 93 14 03 	sts	0x0314, r24	; 0x800314 <sg_bSendHardwareDetail>
    18a4:	80 93 1d 03 	sts	0x031D, r24	; 0x80031d <sg_bModuleRegistered>
    18a8:	80 93 1c 03 	sts	0x031C, r24	; 0x80031c <sg_bSendTimeRequest>
    18ac:	b4 c0       	rjmp	.+360    	; 0x1a16 <CANReceiveCallback+0x1dc>
    18ae:	fb 01       	movw	r30, r22
    18b0:	e0 80       	ld	r14, Z
    18b2:	44 23       	and	r20, r20
    18b4:	09 f4       	brne	.+2      	; 0x18b8 <CANReceiveCallback+0x7e>
    18b6:	af c0       	rjmp	.+350    	; 0x1a16 <CANReceiveCallback+0x1dc>
    18b8:	10 92 6d 07 	sts	0x076D, r1	; 0x80076d <sg_u8TicksSinceLastPackControllerMessage>
    18bc:	81 31       	cpi	r24, 0x11	; 17
    18be:	21 f4       	brne	.+8      	; 0x18c8 <CANReceiveCallback+0x8e>
    18c0:	81 81       	ldd	r24, Z+1	; 0x01
    18c2:	8f 70       	andi	r24, 0x0F	; 15
    18c4:	0e 94 de 24 	call	0x49bc	; 0x49bc <ModuleControllerStateSetMax>
    18c8:	ff 20       	and	r15, r15
    18ca:	e1 f1       	breq	.+120    	; 0x1944 <CANReceiveCallback+0x10a>
    18cc:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <sg_u8ModuleRegistrationID>
    18d0:	e8 12       	cpse	r14, r24
    18d2:	38 c0       	rjmp	.+112    	; 0x1944 <CANReceiveCallback+0x10a>
    18d4:	ca 30       	cpi	r28, 0x0A	; 10
    18d6:	29 f4       	brne	.+10     	; 0x18e2 <CANReceiveCallback+0xa8>
    18d8:	d1 30       	cpi	r29, 0x01	; 1
    18da:	a1 f5       	brne	.+104    	; 0x1944 <CANReceiveCallback+0x10a>
    18dc:	0e 94 85 25 	call	0x4b0a	; 0x4b0a <SendModuleControllerStatus>
    18e0:	31 c0       	rjmp	.+98     	; 0x1944 <CANReceiveCallback+0x10a>
    18e2:	cb 30       	cpi	r28, 0x0B	; 11
    18e4:	f1 f4       	brne	.+60     	; 0x1922 <CANReceiveCallback+0xe8>
    18e6:	d3 30       	cpi	r29, 0x03	; 3
    18e8:	69 f5       	brne	.+90     	; 0x1944 <CANReceiveCallback+0x10a>
    18ea:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <sg_bSendCellStatus>
    18ee:	81 11       	cpse	r24, r1
    18f0:	29 c0       	rjmp	.+82     	; 0x1944 <CANReceiveCallback+0x10a>
    18f2:	f8 01       	movw	r30, r16
    18f4:	81 81       	ldd	r24, Z+1	; 0x01
    18f6:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <sg_sFrame+0x11>
    18fa:	89 17       	cp	r24, r25
    18fc:	18 f5       	brcc	.+70     	; 0x1944 <CANReceiveCallback+0x10a>
    18fe:	80 93 1f 03 	sts	0x031F, r24	; 0x80031f <sg_u8CellStatus>
    1902:	90 91 1f 03 	lds	r25, 0x031F	; 0x80031f <sg_u8CellStatus>
    1906:	90 93 20 03 	sts	0x0320, r25	; 0x800320 <sg_u8CellStatusTarget>
    190a:	8f 3f       	cpi	r24, 0xFF	; 255
    190c:	31 f4       	brne	.+12     	; 0x191a <CANReceiveCallback+0xe0>
    190e:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <sg_sFrame+0x11>
    1912:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <sg_u8CellStatusTarget>
    1916:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <sg_u8CellStatus>
    191a:	81 e0       	ldi	r24, 0x01	; 1
    191c:	80 93 15 03 	sts	0x0315, r24	; 0x800315 <sg_bSendCellStatus>
    1920:	11 c0       	rjmp	.+34     	; 0x1944 <CANReceiveCallback+0x10a>
    1922:	cc 30       	cpi	r28, 0x0C	; 12
    1924:	51 f4       	brne	.+20     	; 0x193a <CANReceiveCallback+0x100>
    1926:	10 92 6d 07 	sts	0x076D, r1	; 0x80076d <sg_u8TicksSinceLastPackControllerMessage>
    192a:	d2 30       	cpi	r29, 0x02	; 2
    192c:	59 f4       	brne	.+22     	; 0x1944 <CANReceiveCallback+0x10a>
    192e:	f8 01       	movw	r30, r16
    1930:	81 81       	ldd	r24, Z+1	; 0x01
    1932:	8f 70       	andi	r24, 0x0F	; 15
    1934:	0e 94 96 25 	call	0x4b2c	; 0x4b2c <ModuleControllerStateSet>
    1938:	05 c0       	rjmp	.+10     	; 0x1944 <CANReceiveCallback+0x10a>
    193a:	c5 30       	cpi	r28, 0x05	; 5
    193c:	19 f4       	brne	.+6      	; 0x1944 <CANReceiveCallback+0x10a>
    193e:	81 e0       	ldi	r24, 0x01	; 1
    1940:	80 93 14 03 	sts	0x0314, r24	; 0x800314 <sg_bSendHardwareDetail>
    1944:	ce 30       	cpi	r28, 0x0E	; 14
    1946:	41 f4       	brne	.+16     	; 0x1958 <CANReceiveCallback+0x11e>
    1948:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <sg_u8ModuleRegistrationID>
    194c:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <sg_bModuleRegistered>
    1950:	80 e0       	ldi	r24, 0x00	; 0
    1952:	0e 94 96 25 	call	0x4b2c	; 0x4b2c <ModuleControllerStateSet>
    1956:	5f c0       	rjmp	.+190    	; 0x1a16 <CANReceiveCallback+0x1dc>
    1958:	cf 30       	cpi	r28, 0x0F	; 15
    195a:	21 f4       	brne	.+8      	; 0x1964 <CANReceiveCallback+0x12a>
    195c:	80 e0       	ldi	r24, 0x00	; 0
    195e:	0e 94 96 25 	call	0x4b2c	; 0x4b2c <ModuleControllerStateSet>
    1962:	59 c0       	rjmp	.+178    	; 0x1a16 <CANReceiveCallback+0x1dc>
    1964:	c0 31       	cpi	r28, 0x10	; 16
    1966:	61 f4       	brne	.+24     	; 0x1980 <CANReceiveCallback+0x146>
    1968:	f8 01       	movw	r30, r16
    196a:	20 81       	ld	r18, Z
    196c:	31 81       	ldd	r19, Z+1	; 0x01
    196e:	42 81       	ldd	r20, Z+2	; 0x02
    1970:	53 81       	ldd	r21, Z+3	; 0x03
    1972:	64 81       	ldd	r22, Z+4	; 0x04
    1974:	75 81       	ldd	r23, Z+5	; 0x05
    1976:	86 81       	ldd	r24, Z+6	; 0x06
    1978:	97 81       	ldd	r25, Z+7	; 0x07
    197a:	0e 94 f6 15 	call	0x2bec	; 0x2bec <RTCSetTime>
    197e:	4b c0       	rjmp	.+150    	; 0x1a16 <CANReceiveCallback+0x1dc>
    1980:	cd 30       	cpi	r28, 0x0D	; 13
    1982:	09 f0       	breq	.+2      	; 0x1986 <CANReceiveCallback+0x14c>
    1984:	48 c0       	rjmp	.+144    	; 0x1a16 <CANReceiveCallback+0x1dc>
    1986:	80 91 1d 03 	lds	r24, 0x031D	; 0x80031d <sg_bModuleRegistered>
    198a:	81 11       	cpse	r24, r1
    198c:	44 c0       	rjmp	.+136    	; 0x1a16 <CANReceiveCallback+0x1dc>
    198e:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <sg_u32ModuleUniqueID>
    1992:	90 91 18 03 	lds	r25, 0x0318	; 0x800318 <sg_u32ModuleUniqueID+0x1>
    1996:	a0 91 19 03 	lds	r26, 0x0319	; 0x800319 <sg_u32ModuleUniqueID+0x2>
    199a:	b0 91 1a 03 	lds	r27, 0x031A	; 0x80031a <sg_u32ModuleUniqueID+0x3>
    199e:	49 2f       	mov	r20, r25
    19a0:	5a 2f       	mov	r21, r26
    19a2:	6b 2f       	mov	r22, r27
    19a4:	77 27       	eor	r23, r23
    19a6:	48 27       	eor	r20, r24
    19a8:	59 27       	eor	r21, r25
    19aa:	6a 27       	eor	r22, r26
    19ac:	7b 27       	eor	r23, r27
    19ae:	8d 01       	movw	r16, r26
    19b0:	22 27       	eor	r18, r18
    19b2:	33 27       	eor	r19, r19
    19b4:	40 27       	eor	r20, r16
    19b6:	51 27       	eor	r21, r17
    19b8:	62 27       	eor	r22, r18
    19ba:	73 27       	eor	r23, r19
    19bc:	8b 2f       	mov	r24, r27
    19be:	99 27       	eor	r25, r25
    19c0:	aa 27       	eor	r26, r26
    19c2:	bb 27       	eor	r27, r27
    19c4:	8a 01       	movw	r16, r20
    19c6:	9b 01       	movw	r18, r22
    19c8:	08 27       	eor	r16, r24
    19ca:	19 27       	eor	r17, r25
    19cc:	2a 27       	eor	r18, r26
    19ce:	3b 27       	eor	r19, r27
    19d0:	c9 01       	movw	r24, r18
    19d2:	b8 01       	movw	r22, r16
    19d4:	24 e6       	ldi	r18, 0x64	; 100
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	40 e0       	ldi	r20, 0x00	; 0
    19da:	50 e0       	ldi	r21, 0x00	; 0
    19dc:	0e 94 2b 20 	call	0x4056	; 0x4056 <__udivmodsi4>
    19e0:	c6 2f       	mov	r28, r22
    19e2:	1f 92       	push	r1
    19e4:	6f 93       	push	r22
    19e6:	8a ed       	ldi	r24, 0xDA	; 218
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	a0 e0       	ldi	r26, 0x00	; 0
    19ec:	af 93       	push	r26
    19ee:	9f 93       	push	r25
    19f0:	8f 93       	push	r24
    19f2:	0e 94 63 25 	call	0x4ac6	; 0x4ac6 <DebugOut>
    19f6:	2c 2f       	mov	r18, r28
    19f8:	30 e0       	ldi	r19, 0x00	; 0
    19fa:	a8 ee       	ldi	r26, 0xE8	; 232
    19fc:	b3 e0       	ldi	r27, 0x03	; 3
    19fe:	0e 94 76 24 	call	0x48ec	; 0x48ec <__umulhisi3>
    1a02:	0e 94 42 1f 	call	0x3e84	; 0x3e84 <Delay>
    1a06:	81 e0       	ldi	r24, 0x01	; 1
    1a08:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <sg_bSendAnnouncement>
    1a0c:	0f 90       	pop	r0
    1a0e:	0f 90       	pop	r0
    1a10:	0f 90       	pop	r0
    1a12:	0f 90       	pop	r0
    1a14:	0f 90       	pop	r0
    1a16:	df 91       	pop	r29
    1a18:	cf 91       	pop	r28
    1a1a:	1f 91       	pop	r17
    1a1c:	0f 91       	pop	r16
    1a1e:	ff 90       	pop	r15
    1a20:	ef 90       	pop	r14
    1a22:	08 95       	ret

Disassembly of section .text.PlatformAssert:

00004418 <PlatformAssert>:



void PlatformAssert( const char* peFilename, const int s32LineNumber )
{
	DebugOut("Assert %s: %d\n", peFilename, s32LineNumber);
    4418:	5f 93       	push	r21
    441a:	4f 93       	push	r20
    441c:	8f 93       	push	r24
    441e:	7f 93       	push	r23
    4420:	6f 93       	push	r22
    4422:	80 e1       	ldi	r24, 0x10	; 16
    4424:	91 e0       	ldi	r25, 0x01	; 1
    4426:	a0 e0       	ldi	r26, 0x00	; 0
    4428:	af 93       	push	r26
    442a:	9f 93       	push	r25
    442c:	8f 93       	push	r24
    442e:	0e 94 63 25 	call	0x4ac6	; 0x4ac6 <DebugOut>
	
//	while(1);
}
    4432:	8d b7       	in	r24, 0x3d	; 61
    4434:	9e b7       	in	r25, 0x3e	; 62
    4436:	08 96       	adiw	r24, 0x08	; 8
    4438:	0f b6       	in	r0, 0x3f	; 63
    443a:	f8 94       	cli
    443c:	9e bf       	out	0x3e, r25	; 62
    443e:	0f be       	out	0x3f, r0	; 63
    4440:	8d bf       	out	0x3d, r24	; 61
    4442:	08 95       	ret

Disassembly of section .text.ModuleControllerStateHandle:

00001644 <ModuleControllerStateHandle>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    1644:	1f 93       	push	r17
    1646:	cf 93       	push	r28
    1648:	df 93       	push	r29
    164a:	d0 91 05 01 	lds	r29, 0x0105	; 0x800105 <sg_eModuleControllerStateTarget>
    164e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <sg_eModuleControllerStateMax>
    1652:	8d 17       	cp	r24, r29
    1654:	30 f0       	brcs	.+12     	; 0x1662 <ModuleControllerStateHandle+0x1e>
    1656:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <sg_eModuleControllerStateCurrent>
    165a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <sg_eModuleControllerStateMax>
    165e:	89 17       	cp	r24, r25
    1660:	10 f4       	brcc	.+4      	; 0x1666 <ModuleControllerStateHandle+0x22>
    1662:	d0 91 04 01 	lds	r29, 0x0104	; 0x800104 <sg_eModuleControllerStateMax>
    1666:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <sg_eModuleControllerStateCurrent>
    166a:	d8 17       	cp	r29, r24
    166c:	09 f4       	brne	.+2      	; 0x1670 <ModuleControllerStateHandle+0x2c>
    166e:	e1 c0       	rjmp	.+450    	; 0x1832 <ModuleControllerStateHandle+0x1ee>
    1670:	d2 30       	cpi	r29, 0x02	; 2
    1672:	09 f4       	brne	.+2      	; 0x1676 <ModuleControllerStateHandle+0x32>
    1674:	6e c0       	rjmp	.+220    	; 0x1752 <ModuleControllerStateHandle+0x10e>
    1676:	28 f4       	brcc	.+10     	; 0x1682 <ModuleControllerStateHandle+0x3e>
    1678:	dd 23       	and	r29, r29
    167a:	89 f0       	breq	.+34     	; 0x169e <ModuleControllerStateHandle+0x5a>
    167c:	d1 30       	cpi	r29, 0x01	; 1
    167e:	e1 f1       	breq	.+120    	; 0x16f8 <ModuleControllerStateHandle+0xb4>
    1680:	cc c0       	rjmp	.+408    	; 0x181a <ModuleControllerStateHandle+0x1d6>
    1682:	d3 30       	cpi	r29, 0x03	; 3
    1684:	09 f4       	brne	.+2      	; 0x1688 <ModuleControllerStateHandle+0x44>
    1686:	9d c0       	rjmp	.+314    	; 0x17c2 <ModuleControllerStateHandle+0x17e>
    1688:	d5 30       	cpi	r29, 0x05	; 5
    168a:	09 f0       	breq	.+2      	; 0x168e <ModuleControllerStateHandle+0x4a>
    168c:	c6 c0       	rjmp	.+396    	; 0x181a <ModuleControllerStateHandle+0x1d6>
    168e:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <sg_eModuleControllerStateCurrent>
    1692:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <sg_eModuleControllerStateTarget>
    1696:	d0 91 06 01 	lds	r29, 0x0106	; 0x800106 <sg_eModuleControllerStateCurrent>
    169a:	0e 94 7f 25 	call	0x4afe	; 0x4afe <ADCSetPowerOn>
    169e:	88 b1       	in	r24, 0x08	; 8
    16a0:	8f 7e       	andi	r24, 0xEF	; 239
    16a2:	88 b9       	out	0x08, r24	; 8
    16a4:	68 e8       	ldi	r22, 0x88	; 136
    16a6:	73 e1       	ldi	r23, 0x13	; 19
    16a8:	80 e0       	ldi	r24, 0x00	; 0
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	0e 94 42 1f 	call	0x3e84	; 0x3e84 <Delay>
    16b0:	8e b1       	in	r24, 0x0e	; 14
    16b2:	8d 7f       	andi	r24, 0xFD	; 253
    16b4:	8e b9       	out	0x0e, r24	; 14
    16b6:	68 e8       	ldi	r22, 0x88	; 136
    16b8:	73 e1       	ldi	r23, 0x13	; 19
    16ba:	80 e0       	ldi	r24, 0x00	; 0
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	0e 94 42 1f 	call	0x3e84	; 0x3e84 <Delay>
    16c2:	eb e6       	ldi	r30, 0x6B	; 107
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	80 81       	ld	r24, Z
    16c8:	8d 7f       	andi	r24, 0xFD	; 253
    16ca:	80 83       	st	Z, r24
    16cc:	e8 e6       	ldi	r30, 0x68	; 104
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	80 81       	ld	r24, Z
    16d2:	8d 7f       	andi	r24, 0xFD	; 253
    16d4:	80 83       	st	Z, r24
    16d6:	81 e0       	ldi	r24, 0x01	; 1
    16d8:	80 93 12 03 	sts	0x0312, r24	; 0x800312 <sg_bCellBalanceReady>
    16dc:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <sg_bCellBalancedOnce>
    16e0:	10 92 10 03 	sts	0x0310, r1	; 0x800310 <sg_bStopDischarge>
    16e4:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_bSDCardReady>
    16e8:	88 23       	and	r24, r24
    16ea:	09 f4       	brne	.+2      	; 0x16ee <ModuleControllerStateHandle+0xaa>
    16ec:	9e c0       	rjmp	.+316    	; 0x182a <ModuleControllerStateHandle+0x1e6>
    16ee:	0e 94 38 22 	call	0x4470	; 0x4470 <STORE_EndSession>
    16f2:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <sg_bSDCardReady>
    16f6:	99 c0       	rjmp	.+306    	; 0x182a <ModuleControllerStateHandle+0x1e6>
    16f8:	88 b1       	in	r24, 0x08	; 8
    16fa:	8f 7e       	andi	r24, 0xEF	; 239
    16fc:	88 b9       	out	0x08, r24	; 8
    16fe:	68 e8       	ldi	r22, 0x88	; 136
    1700:	73 e1       	ldi	r23, 0x13	; 19
    1702:	80 e0       	ldi	r24, 0x00	; 0
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	0e 94 42 1f 	call	0x3e84	; 0x3e84 <Delay>
    170a:	eb e6       	ldi	r30, 0x6B	; 107
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	80 81       	ld	r24, Z
    1710:	8d 7f       	andi	r24, 0xFD	; 253
    1712:	80 83       	st	Z, r24
    1714:	e8 e6       	ldi	r30, 0x68	; 104
    1716:	f0 e0       	ldi	r31, 0x00	; 0
    1718:	80 81       	ld	r24, Z
    171a:	8d 7f       	andi	r24, 0xFD	; 253
    171c:	80 83       	st	Z, r24
    171e:	8e b1       	in	r24, 0x0e	; 14
    1720:	82 60       	ori	r24, 0x02	; 2
    1722:	8e b9       	out	0x0e, r24	; 14
    1724:	68 e8       	ldi	r22, 0x88	; 136
    1726:	73 e1       	ldi	r23, 0x13	; 19
    1728:	80 e0       	ldi	r24, 0x00	; 0
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	0e 94 42 1f 	call	0x3e84	; 0x3e84 <Delay>
    1730:	81 e0       	ldi	r24, 0x01	; 1
    1732:	80 93 12 03 	sts	0x0312, r24	; 0x800312 <sg_bCellBalanceReady>
    1736:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <sg_bCellBalancedOnce>
    173a:	10 92 10 03 	sts	0x0310, r1	; 0x800310 <sg_bStopDischarge>
    173e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_bSDCardReady>
    1742:	88 23       	and	r24, r24
    1744:	09 f4       	brne	.+2      	; 0x1748 <ModuleControllerStateHandle+0x104>
    1746:	71 c0       	rjmp	.+226    	; 0x182a <ModuleControllerStateHandle+0x1e6>
    1748:	0e 94 c5 20 	call	0x418a	; 0x418a <STORE_StartNewSession>
    174c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <sg_bSDCardReady>
    1750:	6c c0       	rjmp	.+216    	; 0x182a <ModuleControllerStateHandle+0x1e6>
    1752:	61 99       	sbic	0x0c, 1	; 12
    1754:	09 c0       	rjmp	.+18     	; 0x1768 <ModuleControllerStateHandle+0x124>
    1756:	8e b1       	in	r24, 0x0e	; 14
    1758:	82 60       	ori	r24, 0x02	; 2
    175a:	8e b9       	out	0x0e, r24	; 14
    175c:	68 e8       	ldi	r22, 0x88	; 136
    175e:	73 e1       	ldi	r23, 0x13	; 19
    1760:	80 e0       	ldi	r24, 0x00	; 0
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	0e 94 42 1f 	call	0x3e84	; 0x3e84 <Delay>
    1768:	cb e0       	ldi	r28, 0x0B	; 11
    176a:	26 c0       	rjmp	.+76     	; 0x17b8 <ModuleControllerStateHandle+0x174>
    176c:	88 b1       	in	r24, 0x08	; 8
    176e:	80 61       	ori	r24, 0x10	; 16
    1770:	88 b9       	out	0x08, r24	; 8
    1772:	88 b1       	in	r24, 0x08	; 8
    1774:	8f 77       	andi	r24, 0x7F	; 127
    1776:	88 b9       	out	0x08, r24	; 8
    1778:	88 b1       	in	r24, 0x08	; 8
    177a:	80 68       	ori	r24, 0x80	; 128
    177c:	88 b9       	out	0x08, r24	; 8
    177e:	68 ee       	ldi	r22, 0xE8	; 232
    1780:	73 e0       	ldi	r23, 0x03	; 3
    1782:	80 e0       	ldi	r24, 0x00	; 0
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	0e 94 42 1f 	call	0x3e84	; 0x3e84 <Delay>
    178a:	88 b1       	in	r24, 0x08	; 8
    178c:	8f 7e       	andi	r24, 0xEF	; 239
    178e:	88 b9       	out	0x08, r24	; 8
    1790:	68 e8       	ldi	r22, 0x88	; 136
    1792:	73 e1       	ldi	r23, 0x13	; 19
    1794:	80 e0       	ldi	r24, 0x00	; 0
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	0e 94 42 1f 	call	0x3e84	; 0x3e84 <Delay>
    179c:	60 e5       	ldi	r22, 0x50	; 80
    179e:	73 ec       	ldi	r23, 0xC3	; 195
    17a0:	80 e0       	ldi	r24, 0x00	; 0
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	0e 94 42 1f 	call	0x3e84	; 0x3e84 <Delay>
    17a8:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <sg_bOvercurrentSignal>
    17ac:	88 23       	and	r24, r24
    17ae:	19 f0       	breq	.+6      	; 0x17b6 <ModuleControllerStateHandle+0x172>
    17b0:	10 92 0f 03 	sts	0x030F, r1	; 0x80030f <sg_bOvercurrentSignal>
    17b4:	01 c0       	rjmp	.+2      	; 0x17b8 <ModuleControllerStateHandle+0x174>
    17b6:	c1 2f       	mov	r28, r17
    17b8:	1f ef       	ldi	r17, 0xFF	; 255
    17ba:	1c 0f       	add	r17, r28
    17bc:	c1 11       	cpse	r28, r1
    17be:	d6 cf       	rjmp	.-84     	; 0x176c <ModuleControllerStateHandle+0x128>
    17c0:	34 c0       	rjmp	.+104    	; 0x182a <ModuleControllerStateHandle+0x1e6>
    17c2:	61 99       	sbic	0x0c, 1	; 12
    17c4:	09 c0       	rjmp	.+18     	; 0x17d8 <ModuleControllerStateHandle+0x194>
    17c6:	8e b1       	in	r24, 0x0e	; 14
    17c8:	82 60       	ori	r24, 0x02	; 2
    17ca:	8e b9       	out	0x0e, r24	; 14
    17cc:	68 e8       	ldi	r22, 0x88	; 136
    17ce:	73 e1       	ldi	r23, 0x13	; 19
    17d0:	80 e0       	ldi	r24, 0x00	; 0
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	0e 94 42 1f 	call	0x3e84	; 0x3e84 <Delay>
    17d8:	88 b1       	in	r24, 0x08	; 8
    17da:	80 61       	ori	r24, 0x10	; 16
    17dc:	88 b9       	out	0x08, r24	; 8
    17de:	88 b1       	in	r24, 0x08	; 8
    17e0:	8f 77       	andi	r24, 0x7F	; 127
    17e2:	88 b9       	out	0x08, r24	; 8
    17e4:	88 b1       	in	r24, 0x08	; 8
    17e6:	80 68       	ori	r24, 0x80	; 128
    17e8:	88 b9       	out	0x08, r24	; 8
    17ea:	68 e8       	ldi	r22, 0x88	; 136
    17ec:	73 e1       	ldi	r23, 0x13	; 19
    17ee:	80 e0       	ldi	r24, 0x00	; 0
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	0e 94 42 1f 	call	0x3e84	; 0x3e84 <Delay>
    17f6:	10 92 12 03 	sts	0x0312, r1	; 0x800312 <sg_bCellBalanceReady>
    17fa:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <sg_bCellBalancedOnce>
    17fe:	81 e0       	ldi	r24, 0x01	; 1
    1800:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <sg_bStopDischarge>
    1804:	eb e6       	ldi	r30, 0x6B	; 107
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	80 81       	ld	r24, Z
    180a:	82 60       	ori	r24, 0x02	; 2
    180c:	80 83       	st	Z, r24
    180e:	e8 e6       	ldi	r30, 0x68	; 104
    1810:	f0 e0       	ldi	r31, 0x00	; 0
    1812:	80 81       	ld	r24, Z
    1814:	82 60       	ori	r24, 0x02	; 2
    1816:	80 83       	st	Z, r24
    1818:	08 c0       	rjmp	.+16     	; 0x182a <ModuleControllerStateHandle+0x1e6>
    181a:	4e ec       	ldi	r20, 0xCE	; 206
    181c:	53 e0       	ldi	r21, 0x03	; 3
    181e:	6f e1       	ldi	r22, 0x1F	; 31
    1820:	71 e0       	ldi	r23, 0x01	; 1
    1822:	80 e0       	ldi	r24, 0x00	; 0
    1824:	0e 94 0c 22 	call	0x4418	; 0x4418 <PlatformAssert>
    1828:	d5 e0       	ldi	r29, 0x05	; 5
    182a:	d0 93 06 01 	sts	0x0106, r29	; 0x800106 <sg_eModuleControllerStateCurrent>
    182e:	0e 94 85 25 	call	0x4b0a	; 0x4b0a <SendModuleControllerStatus>
    1832:	df 91       	pop	r29
    1834:	cf 91       	pop	r28
    1836:	1f 91       	pop	r17
    1838:	08 95       	ret

Disassembly of section .text.PlatformGetRegistrationID:

00004b4a <PlatformGetRegistrationID>:
}

uint8_t PlatformGetRegistrationID( void )
{
	return(sg_u8ModuleRegistrationID);
}
    4b4a:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <sg_u8ModuleRegistrationID>
    4b4e:	08 95       	ret

Disassembly of section .text.SetSysclock:

00004b16 <SetSysclock>:

void SetSysclock( void )
{
	// First set the prescaler enable
	CLKPR = (1 << CLKPCE);
    4b16:	e1 e6       	ldi	r30, 0x61	; 97
    4b18:	f0 e0       	ldi	r31, 0x00	; 0
    4b1a:	80 e8       	ldi	r24, 0x80	; 128
    4b1c:	80 83       	st	Z, r24
	
	// Now set the desired prescale value
	CLKPR = SYSCLOCK_PRESCALE;
    4b1e:	10 82       	st	Z, r1
    4b20:	08 95       	ret

Disassembly of section .text.ModuleControllerGetUniqueID:

000036a8 <ModuleControllerGetUniqueID>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    36a8:	cf 92       	push	r12
    36aa:	df 92       	push	r13
    36ac:	ef 92       	push	r14
    36ae:	ff 92       	push	r15
    36b0:	80 e0       	ldi	r24, 0x00	; 0
    36b2:	90 e0       	ldi	r25, 0x00	; 0
    36b4:	0e 94 1e 25 	call	0x4a3c	; 0x4a3c <EEPROMRead>
    36b8:	c8 2e       	mov	r12, r24
    36ba:	d1 2c       	mov	r13, r1
    36bc:	e1 2c       	mov	r14, r1
    36be:	f1 2c       	mov	r15, r1
    36c0:	81 e0       	ldi	r24, 0x01	; 1
    36c2:	90 e0       	ldi	r25, 0x00	; 0
    36c4:	0e 94 1e 25 	call	0x4a3c	; 0x4a3c <EEPROMRead>
    36c8:	90 e0       	ldi	r25, 0x00	; 0
    36ca:	a0 e0       	ldi	r26, 0x00	; 0
    36cc:	b0 e0       	ldi	r27, 0x00	; 0
    36ce:	ba 2f       	mov	r27, r26
    36d0:	a9 2f       	mov	r26, r25
    36d2:	98 2f       	mov	r25, r24
    36d4:	88 27       	eor	r24, r24
    36d6:	c8 2a       	or	r12, r24
    36d8:	d9 2a       	or	r13, r25
    36da:	ea 2a       	or	r14, r26
    36dc:	fb 2a       	or	r15, r27
    36de:	82 e0       	ldi	r24, 0x02	; 2
    36e0:	90 e0       	ldi	r25, 0x00	; 0
    36e2:	0e 94 1e 25 	call	0x4a3c	; 0x4a3c <EEPROMRead>
    36e6:	90 e0       	ldi	r25, 0x00	; 0
    36e8:	a0 e0       	ldi	r26, 0x00	; 0
    36ea:	b0 e0       	ldi	r27, 0x00	; 0
    36ec:	dc 01       	movw	r26, r24
    36ee:	99 27       	eor	r25, r25
    36f0:	88 27       	eor	r24, r24
    36f2:	c8 2a       	or	r12, r24
    36f4:	d9 2a       	or	r13, r25
    36f6:	ea 2a       	or	r14, r26
    36f8:	fb 2a       	or	r15, r27
    36fa:	83 e0       	ldi	r24, 0x03	; 3
    36fc:	90 e0       	ldi	r25, 0x00	; 0
    36fe:	0e 94 1e 25 	call	0x4a3c	; 0x4a3c <EEPROMRead>
    3702:	90 e0       	ldi	r25, 0x00	; 0
    3704:	a0 e0       	ldi	r26, 0x00	; 0
    3706:	b0 e0       	ldi	r27, 0x00	; 0
    3708:	b8 2f       	mov	r27, r24
    370a:	aa 27       	eor	r26, r26
    370c:	99 27       	eor	r25, r25
    370e:	88 27       	eor	r24, r24
    3710:	bc 01       	movw	r22, r24
    3712:	cd 01       	movw	r24, r26
    3714:	6c 29       	or	r22, r12
    3716:	7d 29       	or	r23, r13
    3718:	8e 29       	or	r24, r14
    371a:	9f 29       	or	r25, r15
    371c:	ff 90       	pop	r15
    371e:	ef 90       	pop	r14
    3720:	df 90       	pop	r13
    3722:	cf 90       	pop	r12
    3724:	08 95       	ret

Disassembly of section .text.TimerInit:

00003ed6 <TimerInit>:
    3ed6:	14 bc       	out	0x24, r1	; 36
    3ed8:	92 e0       	ldi	r25, 0x02	; 2
    3eda:	95 bd       	out	0x25, r25	; 37
    3edc:	a4 e6       	ldi	r26, 0x64	; 100
    3ede:	b0 e0       	ldi	r27, 0x00	; 0
    3ee0:	8c 91       	ld	r24, X
    3ee2:	87 7f       	andi	r24, 0xF7	; 247
    3ee4:	8c 93       	st	X, r24
    3ee6:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f0080>
    3eea:	84 e0       	ldi	r24, 0x04	; 4
    3eec:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f0081>
    3ef0:	96 bb       	out	0x16, r25	; 22
    3ef2:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f0084>
    3ef6:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f0085>
    3efa:	8b 5c       	subi	r24, 0xCB	; 203
    3efc:	93 4f       	sbci	r25, 0xF3	; 243
    3efe:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f0089>
    3f02:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f0088>
    3f06:	ef e6       	ldi	r30, 0x6F	; 111
    3f08:	f0 e0       	ldi	r31, 0x00	; 0
    3f0a:	80 81       	ld	r24, Z
    3f0c:	82 60       	ori	r24, 0x02	; 2
    3f0e:	80 83       	st	Z, r24
    3f10:	8c 91       	ld	r24, X
    3f12:	8f 7e       	andi	r24, 0xEF	; 239
    3f14:	8c 93       	st	X, r24
    3f16:	ae e6       	ldi	r26, 0x6E	; 110
    3f18:	b0 e0       	ldi	r27, 0x00	; 0
    3f1a:	8c 91       	ld	r24, X
    3f1c:	8e 7f       	andi	r24, 0xFE	; 254
    3f1e:	8c 93       	st	X, r24
    3f20:	80 81       	ld	r24, Z
    3f22:	8e 7f       	andi	r24, 0xFE	; 254
    3f24:	80 83       	st	Z, r24
    3f26:	08 95       	ret

Disassembly of section .text.__vector_12:

00002ef4 <__vector_12>:
    2ef4:	78 94       	sei
    2ef6:	1f 92       	push	r1
    2ef8:	0f 92       	push	r0
    2efa:	0f b6       	in	r0, 0x3f	; 63
    2efc:	0f 92       	push	r0
    2efe:	11 24       	eor	r1, r1
    2f00:	8f 93       	push	r24
    2f02:	9f 93       	push	r25
    2f04:	ef 93       	push	r30
    2f06:	ff 93       	push	r31
    2f08:	82 e0       	ldi	r24, 0x02	; 2
    2f0a:	86 bb       	out	0x16, r24	; 22
    2f0c:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f0084>
    2f10:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f0085>
    2f14:	8b 5c       	subi	r24, 0xCB	; 203
    2f16:	93 4f       	sbci	r25, 0xF3	; 243
    2f18:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f0089>
    2f1c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f0088>
    2f20:	ef e6       	ldi	r30, 0x6F	; 111
    2f22:	f0 e0       	ldi	r31, 0x00	; 0
    2f24:	80 81       	ld	r24, Z
    2f26:	82 60       	ori	r24, 0x02	; 2
    2f28:	80 83       	st	Z, r24
    2f2a:	81 e0       	ldi	r24, 0x01	; 1
    2f2c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <sg_bNewTick>
    2f30:	80 91 70 07 	lds	r24, 0x0770	; 0x800770 <sg_u8CellFrameTimer>
    2f34:	8f 5f       	subi	r24, 0xFF	; 255
    2f36:	80 93 70 07 	sts	0x0770, r24	; 0x800770 <sg_u8CellFrameTimer>
    2f3a:	80 91 70 07 	lds	r24, 0x0770	; 0x800770 <sg_u8CellFrameTimer>
    2f3e:	83 30       	cpi	r24, 0x03	; 3
    2f40:	78 f0       	brcs	.+30     	; 0x2f60 <__vector_12+0x6c>
    2f42:	10 92 70 07 	sts	0x0770, r1	; 0x800770 <sg_u8CellFrameTimer>
    2f46:	81 e0       	ldi	r24, 0x01	; 1
    2f48:	80 93 6f 07 	sts	0x076F, r24	; 0x80076f <sg_bFrameStart>
    2f4c:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <sg_eFrameStatus>
    2f50:	81 30       	cpi	r24, 0x01	; 1
    2f52:	19 f4       	brne	.+6      	; 0x2f5a <__vector_12+0x66>
    2f54:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <sg_eFrameStatus>
    2f58:	03 c0       	rjmp	.+6      	; 0x2f60 <__vector_12+0x6c>
    2f5a:	81 e0       	ldi	r24, 0x01	; 1
    2f5c:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <sg_eFrameStatus>
    2f60:	80 91 6d 07 	lds	r24, 0x076D	; 0x80076d <sg_u8TicksSinceLastPackControllerMessage>
    2f64:	8f 3f       	cpi	r24, 0xFF	; 255
    2f66:	29 f0       	breq	.+10     	; 0x2f72 <__vector_12+0x7e>
    2f68:	80 91 6d 07 	lds	r24, 0x076D	; 0x80076d <sg_u8TicksSinceLastPackControllerMessage>
    2f6c:	8f 5f       	subi	r24, 0xFF	; 255
    2f6e:	80 93 6d 07 	sts	0x076D, r24	; 0x80076d <sg_u8TicksSinceLastPackControllerMessage>
    2f72:	80 91 6d 07 	lds	r24, 0x076D	; 0x80076d <sg_u8TicksSinceLastPackControllerMessage>
    2f76:	8f 36       	cpi	r24, 0x6F	; 111
    2f78:	40 f0       	brcs	.+16     	; 0x2f8a <__vector_12+0x96>
    2f7a:	80 91 6d 07 	lds	r24, 0x076D	; 0x80076d <sg_u8TicksSinceLastPackControllerMessage>
    2f7e:	8f 56       	subi	r24, 0x6F	; 111
    2f80:	80 93 6d 07 	sts	0x076D, r24	; 0x80076d <sg_u8TicksSinceLastPackControllerMessage>
    2f84:	81 e0       	ldi	r24, 0x01	; 1
    2f86:	80 93 1b 03 	sts	0x031B, r24	; 0x80031b <sg_bPackControllerTimeout>
    2f8a:	80 91 6e 07 	lds	r24, 0x076E	; 0x80076e <sg_u8CellStringPowerTimer>
    2f8e:	88 23       	and	r24, r24
    2f90:	29 f0       	breq	.+10     	; 0x2f9c <__vector_12+0xa8>
    2f92:	80 91 6e 07 	lds	r24, 0x076E	; 0x80076e <sg_u8CellStringPowerTimer>
    2f96:	81 50       	subi	r24, 0x01	; 1
    2f98:	80 93 6e 07 	sts	0x076E, r24	; 0x80076e <sg_u8CellStringPowerTimer>
    2f9c:	ff 91       	pop	r31
    2f9e:	ef 91       	pop	r30
    2fa0:	9f 91       	pop	r25
    2fa2:	8f 91       	pop	r24
    2fa4:	0f 90       	pop	r0
    2fa6:	0f be       	out	0x3f, r0	; 63
    2fa8:	0f 90       	pop	r0
    2faa:	1f 90       	pop	r1
    2fac:	18 95       	reti

Disassembly of section .text.WatchdogReset:

00004b58 <WatchdogReset>:
		sg_u8CellStringPowerTimer--;
	}
}

void WatchdogReset( void )
{
    4b58:	08 95       	ret

Disassembly of section .text.WatchdogOff:

00004944 <WatchdogOff>:
// }

// Assume interrupts are disabled
void WatchdogOff( void )  // turn it off even when WDT_ENABLE is not defined
{
	wdt_reset();
    4944:	a8 95       	wdr
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    4946:	0f b6       	in	r0, 0x3f	; 63
    4948:	f8 94       	cli
    494a:	a8 95       	wdr
    494c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f0060>
    4950:	88 61       	ori	r24, 0x18	; 24
    4952:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f0060>
    4956:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f0060>
    495a:	0f be       	out	0x3f, r0	; 63
    495c:	08 95       	ret

Disassembly of section .text.__vector_28:

00003f28 <__vector_28>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    3f28:	1f 92       	push	r1
    3f2a:	0f 92       	push	r0
    3f2c:	0f b6       	in	r0, 0x3f	; 63
    3f2e:	0f 92       	push	r0
    3f30:	11 24       	eor	r1, r1
    3f32:	2f 93       	push	r18
    3f34:	3f 93       	push	r19
    3f36:	4f 93       	push	r20
    3f38:	5f 93       	push	r21
    3f3a:	6f 93       	push	r22
    3f3c:	7f 93       	push	r23
    3f3e:	8f 93       	push	r24
    3f40:	9f 93       	push	r25
    3f42:	af 93       	push	r26
    3f44:	bf 93       	push	r27
    3f46:	ef 93       	push	r30
    3f48:	ff 93       	push	r31
    3f4a:	4d ef       	ldi	r20, 0xFD	; 253
    3f4c:	52 e0       	ldi	r21, 0x02	; 2
    3f4e:	6f e1       	ldi	r22, 0x1F	; 31
    3f50:	71 e0       	ldi	r23, 0x01	; 1
    3f52:	80 e0       	ldi	r24, 0x00	; 0
    3f54:	0e 94 0c 22 	call	0x4418	; 0x4418 <PlatformAssert>
    3f58:	ff 91       	pop	r31
    3f5a:	ef 91       	pop	r30
    3f5c:	bf 91       	pop	r27
    3f5e:	af 91       	pop	r26
    3f60:	9f 91       	pop	r25
    3f62:	8f 91       	pop	r24
    3f64:	7f 91       	pop	r23
    3f66:	6f 91       	pop	r22
    3f68:	5f 91       	pop	r21
    3f6a:	4f 91       	pop	r20
    3f6c:	3f 91       	pop	r19
    3f6e:	2f 91       	pop	r18
    3f70:	0f 90       	pop	r0
    3f72:	0f be       	out	0x3f, r0	; 63
    3f74:	0f 90       	pop	r0
    3f76:	1f 90       	pop	r1
    3f78:	18 95       	reti

Disassembly of section .text.__vector_23:

0000337e <__vector_23>:
    337e:	78 94       	sei
    3380:	1f 92       	push	r1
    3382:	0f 92       	push	r0
    3384:	0f b6       	in	r0, 0x3f	; 63
    3386:	0f 92       	push	r0
    3388:	11 24       	eor	r1, r1
    338a:	2f 93       	push	r18
    338c:	3f 93       	push	r19
    338e:	4f 93       	push	r20
    3390:	5f 93       	push	r21
    3392:	6f 93       	push	r22
    3394:	7f 93       	push	r23
    3396:	8f 93       	push	r24
    3398:	9f 93       	push	r25
    339a:	af 93       	push	r26
    339c:	bf 93       	push	r27
    339e:	ef 93       	push	r30
    33a0:	ff 93       	push	r31
    33a2:	96 b1       	in	r25, 0x06	; 6
    33a4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <sg_eModuleControllerStateCurrent>
    33a8:	83 30       	cpi	r24, 0x03	; 3
    33aa:	21 f0       	breq	.+8      	; 0x33b4 <__vector_23+0x36>
    33ac:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <sg_eModuleControllerStateCurrent>
    33b0:	82 30       	cpi	r24, 0x02	; 2
    33b2:	c9 f4       	brne	.+50     	; 0x33e6 <__vector_23+0x68>
    33b4:	91 ff       	sbrs	r25, 1
    33b6:	17 c0       	rjmp	.+46     	; 0x33e6 <__vector_23+0x68>
    33b8:	88 b1       	in	r24, 0x08	; 8
    33ba:	8f 7e       	andi	r24, 0xEF	; 239
    33bc:	88 b9       	out	0x08, r24	; 8
    33be:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <sg_eModuleControllerStateCurrent>
    33c2:	83 30       	cpi	r24, 0x03	; 3
    33c4:	19 f4       	brne	.+6      	; 0x33cc <__vector_23+0x4e>
    33c6:	81 e0       	ldi	r24, 0x01	; 1
    33c8:	0e 94 96 25 	call	0x4b2c	; 0x4b2c <ModuleControllerStateSet>
    33cc:	eb e6       	ldi	r30, 0x6B	; 107
    33ce:	f0 e0       	ldi	r31, 0x00	; 0
    33d0:	80 81       	ld	r24, Z
    33d2:	8d 7f       	andi	r24, 0xFD	; 253
    33d4:	80 83       	st	Z, r24
    33d6:	e8 e6       	ldi	r30, 0x68	; 104
    33d8:	f0 e0       	ldi	r31, 0x00	; 0
    33da:	80 81       	ld	r24, Z
    33dc:	8d 7f       	andi	r24, 0xFD	; 253
    33de:	80 83       	st	Z, r24
    33e0:	81 e0       	ldi	r24, 0x01	; 1
    33e2:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <sg_bOvercurrentSignal>
    33e6:	ff 91       	pop	r31
    33e8:	ef 91       	pop	r30
    33ea:	bf 91       	pop	r27
    33ec:	af 91       	pop	r26
    33ee:	9f 91       	pop	r25
    33f0:	8f 91       	pop	r24
    33f2:	7f 91       	pop	r23
    33f4:	6f 91       	pop	r22
    33f6:	5f 91       	pop	r21
    33f8:	4f 91       	pop	r20
    33fa:	3f 91       	pop	r19
    33fc:	2f 91       	pop	r18
    33fe:	0f 90       	pop	r0
    3400:	0f be       	out	0x3f, r0	; 63
    3402:	0f 90       	pop	r0
    3404:	1f 90       	pop	r1
    3406:	18 95       	reti

Disassembly of section .text.__vector_24:

00003f7a <__vector_24>:
    3f7a:	78 94       	sei
    3f7c:	1f 92       	push	r1
    3f7e:	0f 92       	push	r0
    3f80:	0f b6       	in	r0, 0x3f	; 63
    3f82:	0f 92       	push	r0
    3f84:	11 24       	eor	r1, r1
    3f86:	2f 93       	push	r18
    3f88:	3f 93       	push	r19
    3f8a:	4f 93       	push	r20
    3f8c:	5f 93       	push	r21
    3f8e:	6f 93       	push	r22
    3f90:	7f 93       	push	r23
    3f92:	8f 93       	push	r24
    3f94:	9f 93       	push	r25
    3f96:	af 93       	push	r26
    3f98:	bf 93       	push	r27
    3f9a:	ef 93       	push	r30
    3f9c:	ff 93       	push	r31
    3f9e:	8b b1       	in	r24, 0x0b	; 11
    3fa0:	0e 94 af 24 	call	0x495e	; 0x495e <Check5VLoss>
    3fa4:	ff 91       	pop	r31
    3fa6:	ef 91       	pop	r30
    3fa8:	bf 91       	pop	r27
    3faa:	af 91       	pop	r26
    3fac:	9f 91       	pop	r25
    3fae:	8f 91       	pop	r24
    3fb0:	7f 91       	pop	r23
    3fb2:	6f 91       	pop	r22
    3fb4:	5f 91       	pop	r21
    3fb6:	4f 91       	pop	r20
    3fb8:	3f 91       	pop	r19
    3fba:	2f 91       	pop	r18
    3fbc:	0f 90       	pop	r0
    3fbe:	0f be       	out	0x3f, r0	; 63
    3fc0:	0f 90       	pop	r0
    3fc2:	1f 90       	pop	r1
    3fc4:	18 95       	reti

Disassembly of section .text.vUARTRXStart:

000049d2 <vUARTRXStart>:
}

// Called at the start of cell string data via MC RX
void vUARTRXStart(void)
{
	sg_u8CellBufferRX = 0;
    49d2:	10 92 6b 07 	sts	0x076B, r1	; 0x80076b <sg_u8CellBufferRX>
	sg_u8CellIndex = 0;
    49d6:	10 92 6c 07 	sts	0x076C, r1	; 0x80076c <sg_u8CellIndex>
	sg_u16BytesReceived = 0;
    49da:	10 92 59 07 	sts	0x0759, r1	; 0x800759 <sg_u16BytesReceived+0x1>
    49de:	10 92 58 07 	sts	0x0758, r1	; 0x800758 <sg_u16BytesReceived>
	sg_u8CellReports = 0;
    49e2:	10 92 6a 07 	sts	0x076A, r1	; 0x80076a <sg_u8CellReports>
    49e6:	08 95       	ret

Disassembly of section .text.vUARTRXEnd:

00004862 <vUARTRXEnd>:
	// disable the edge interrupt
//	VUART_RX_DISABLE();
	// disable bit timer interrupt, should already be off but just in case
//	TIMER_CHB_INT_DISABLE();
	// update bytes and cells received
	sg_sFrame.sg_u16BytesReceived = sg_u16BytesReceived;
    4862:	80 91 58 07 	lds	r24, 0x0758	; 0x800758 <sg_u16BytesReceived>
    4866:	90 91 59 07 	lds	r25, 0x0759	; 0x800759 <sg_u16BytesReceived+0x1>
    486a:	ec e0       	ldi	r30, 0x0C	; 12
    486c:	f1 e0       	ldi	r31, 0x01	; 1
    486e:	90 a7       	std	Z+40, r25	; 0x28
    4870:	87 a3       	std	Z+39, r24	; 0x27
	sg_sFrame.sg_u8CellCPUCount = sg_u8CellReports;
    4872:	80 91 6a 07 	lds	r24, 0x076A	; 0x80076a <sg_u8CellReports>
    4876:	81 a7       	std	Z+41, r24	; 0x29
	sg_u16BytesReceived = 0;
    4878:	10 92 59 07 	sts	0x0759, r1	; 0x800759 <sg_u16BytesReceived+0x1>
    487c:	10 92 58 07 	sts	0x0758, r1	; 0x800758 <sg_u16BytesReceived>
	sg_u8CellReports = 0;
    4880:	10 92 6a 07 	sts	0x076A, r1	; 0x80076a <sg_u8CellReports>
    4884:	08 95       	ret

Disassembly of section .text.vUARTRXData:

00003990 <vUARTRXData>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    3990:	e0 91 6b 07 	lds	r30, 0x076B	; 0x80076b <sg_u8CellBufferRX>
    3994:	21 e0       	ldi	r18, 0x01	; 1
    3996:	2e 0f       	add	r18, r30
    3998:	20 93 6b 07 	sts	0x076B, r18	; 0x80076b <sg_u8CellBufferRX>
    399c:	f0 e0       	ldi	r31, 0x00	; 0
    399e:	e4 5b       	subi	r30, 0xB4	; 180
    39a0:	f8 4f       	sbci	r31, 0xF8	; 248
    39a2:	80 83       	st	Z, r24
    39a4:	80 91 58 07 	lds	r24, 0x0758	; 0x800758 <sg_u16BytesReceived>
    39a8:	90 91 59 07 	lds	r25, 0x0759	; 0x800759 <sg_u16BytesReceived+0x1>
    39ac:	01 96       	adiw	r24, 0x01	; 1
    39ae:	90 93 59 07 	sts	0x0759, r25	; 0x800759 <sg_u16BytesReceived+0x1>
    39b2:	80 93 58 07 	sts	0x0758, r24	; 0x800758 <sg_u16BytesReceived>
    39b6:	24 30       	cpi	r18, 0x04	; 4
    39b8:	38 f1       	brcs	.+78     	; 0x3a08 <vUARTRXData+0x78>
    39ba:	10 92 6b 07 	sts	0x076B, r1	; 0x80076b <sg_u8CellBufferRX>
    39be:	80 91 6c 07 	lds	r24, 0x076C	; 0x80076c <sg_u8CellIndex>
    39c2:	8c 36       	cpi	r24, 0x6C	; 108
    39c4:	08 f5       	brcc	.+66     	; 0x3a08 <vUARTRXData+0x78>
    39c6:	e8 2f       	mov	r30, r24
    39c8:	f0 e0       	ldi	r31, 0x00	; 0
    39ca:	74 96       	adiw	r30, 0x14	; 20
    39cc:	ee 0f       	add	r30, r30
    39ce:	ff 1f       	adc	r31, r31
    39d0:	ee 0f       	add	r30, r30
    39d2:	ff 1f       	adc	r31, r31
    39d4:	e4 5f       	subi	r30, 0xF4	; 244
    39d6:	fe 4f       	sbci	r31, 0xFE	; 254
    39d8:	ac e4       	ldi	r26, 0x4C	; 76
    39da:	b7 e0       	ldi	r27, 0x07	; 7
    39dc:	4d 91       	ld	r20, X+
    39de:	5d 91       	ld	r21, X+
    39e0:	6d 91       	ld	r22, X+
    39e2:	7c 91       	ld	r23, X
    39e4:	13 97       	sbiw	r26, 0x03	; 3
    39e6:	40 83       	st	Z, r20
    39e8:	51 83       	std	Z+1, r21	; 0x01
    39ea:	62 83       	std	Z+2, r22	; 0x02
    39ec:	73 83       	std	Z+3, r23	; 0x03
    39ee:	1d 92       	st	X+, r1
    39f0:	1d 92       	st	X+, r1
    39f2:	1d 92       	st	X+, r1
    39f4:	1c 92       	st	X, r1
    39f6:	13 97       	sbiw	r26, 0x03	; 3
    39f8:	8f 5f       	subi	r24, 0xFF	; 255
    39fa:	80 93 6c 07 	sts	0x076C, r24	; 0x80076c <sg_u8CellIndex>
    39fe:	80 91 6a 07 	lds	r24, 0x076A	; 0x80076a <sg_u8CellReports>
    3a02:	8f 5f       	subi	r24, 0xFF	; 255
    3a04:	80 93 6a 07 	sts	0x076A, r24	; 0x80076a <sg_u8CellReports>
    3a08:	08 95       	ret

Disassembly of section .text.PlatformGetSendData:

00004516 <PlatformGetSendData>:
uint16_t PlatformGetSendData( bool bUpdateBalanceStatus )
{
	uint16_t u16SendValue = 0;
	
	
	if( sg_bStopDischarge )
    4516:	90 91 10 03 	lds	r25, 0x0310	; 0x800310 <sg_bStopDischarge>
    451a:	99 23       	and	r25, r25
    451c:	51 f0       	breq	.+20     	; 0x4532 <PlatformGetSendData+0x1c>
	{
		if (bUpdateBalanceStatus)	// don't update if ony an availability check
    451e:	88 23       	and	r24, r24
    4520:	59 f0       	breq	.+22     	; 0x4538 <PlatformGetSendData+0x22>
		{
			sg_bStopDischarge = false;
    4522:	10 92 10 03 	sts	0x0310, r1	; 0x800310 <sg_bStopDischarge>
			sg_bCellBalancedOnce = true;
    4526:	81 e0       	ldi	r24, 0x01	; 1
    4528:	80 93 11 03 	sts	0x0311, r24	; 0x800311 <sg_bCellBalancedOnce>
		}
		u16SendValue = 0x3ff;
    452c:	8f ef       	ldi	r24, 0xFF	; 255
    452e:	93 e0       	ldi	r25, 0x03	; 3
    4530:	08 95       	ret
			}
		}
		else
#endif
		{
			u16SendValue |= MSG_CELL_SEND_REPORT;
    4532:	80 e0       	ldi	r24, 0x00	; 0
    4534:	90 e8       	ldi	r25, 0x80	; 128
    4536:	08 95       	ret
		if (bUpdateBalanceStatus)	// don't update if ony an availability check
		{
			sg_bStopDischarge = false;
			sg_bCellBalancedOnce = true;
		}
		u16SendValue = 0x3ff;
    4538:	8f ef       	ldi	r24, 0xFF	; 255
    453a:	93 e0       	ldi	r25, 0x03	; 3
#endif
		}
	}
	
	return( u16SendValue );
}
    453c:	08 95       	ret

Disassembly of section .text.ADCCallback:

000045b4 <ADCCallback>:
// Called every time there's an ADC read since apparently ISR can't access global variables?  compiler fails
void ADCCallback(EADCType eType,
				 uint16_t u16Reading)
{
	// End of chain? Indicate it's time for an ADC update
	if ((EADCTYPE_COUNT-1) == eType)
    45b4:	84 30       	cpi	r24, 0x04	; 4
    45b6:	19 f4       	brne	.+6      	; 0x45be <ADCCallback+0xa>
	{
		sg_bADCUpdate = true;
    45b8:	91 e0       	ldi	r25, 0x01	; 1
    45ba:	90 93 0e 03 	sts	0x030E, r25	; 0x80030e <sg_bADCUpdate>
	}
	sg_sFrame.ADCReadings[eType].u16Reading = u16Reading;
    45be:	90 e0       	ldi	r25, 0x00	; 0
    45c0:	fc 01       	movw	r30, r24
    45c2:	ee 0f       	add	r30, r30
    45c4:	ff 1f       	adc	r31, r31
    45c6:	8e 0f       	add	r24, r30
    45c8:	9f 1f       	adc	r25, r31
    45ca:	fc 01       	movw	r30, r24
    45cc:	e3 5b       	subi	r30, 0xB3	; 179
    45ce:	fe 4f       	sbci	r31, 0xFE	; 254
    45d0:	72 83       	std	Z+2, r23	; 0x02
    45d2:	61 83       	std	Z+1, r22	; 0x01
	sg_sFrame.ADCReadings[eType].bValid = true;
    45d4:	81 e0       	ldi	r24, 0x01	; 1
    45d6:	80 83       	st	Z, r24
    45d8:	08 95       	ret

Disassembly of section .text.FrameInit:

00002fae <FrameInit>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    2fae:	cf 93       	push	r28
    2fb0:	df 93       	push	r29
    2fb2:	81 11       	cpse	r24, r1
    2fb4:	0d c0       	rjmp	.+26     	; 0x2fd0 <FrameInit+0x22>
    2fb6:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <sg_sFrame>
    2fba:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <sg_sFrame+0x1>
    2fbe:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <sg_sFrame+0x2>
    2fc2:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <sg_sFrame+0x3>
    2fc6:	8a 37       	cpi	r24, 0x7A	; 122
    2fc8:	9a 4d       	sbci	r25, 0xDA	; 218
    2fca:	a7 47       	sbci	r26, 0x77	; 119
    2fcc:	ba 4b       	sbci	r27, 0xBA	; 186
    2fce:	e9 f0       	breq	.+58     	; 0x300a <FrameInit+0x5c>
    2fd0:	ec e0       	ldi	r30, 0x0C	; 12
    2fd2:	f1 e0       	ldi	r31, 0x01	; 1
    2fd4:	80 e0       	ldi	r24, 0x00	; 0
    2fd6:	92 e0       	ldi	r25, 0x02	; 2
    2fd8:	df 01       	movw	r26, r30
    2fda:	ec 01       	movw	r28, r24
    2fdc:	1d 92       	st	X+, r1
    2fde:	21 97       	sbiw	r28, 0x01	; 1
    2fe0:	e9 f7       	brne	.-6      	; 0x2fdc <FrameInit+0x2e>
    2fe2:	95 83       	std	Z+5, r25	; 0x05
    2fe4:	84 83       	std	Z+4, r24	; 0x04
    2fe6:	8a e7       	ldi	r24, 0x7A	; 122
    2fe8:	9a ed       	ldi	r25, 0xDA	; 218
    2fea:	a7 e7       	ldi	r26, 0x77	; 119
    2fec:	ba eb       	ldi	r27, 0xBA	; 186
    2fee:	80 83       	st	Z, r24
    2ff0:	91 83       	std	Z+1, r25	; 0x01
    2ff2:	a2 83       	std	Z+2, r26	; 0x02
    2ff4:	b3 83       	std	Z+3, r27	; 0x03
    2ff6:	8f ef       	ldi	r24, 0xFF	; 255
    2ff8:	86 a3       	std	Z+38, r24	; 0x26
    2ffa:	87 87       	std	Z+15, r24	; 0x0f
    2ffc:	84 e0       	ldi	r24, 0x04	; 4
    2ffe:	90 e0       	ldi	r25, 0x00	; 0
    3000:	0e 94 1e 25 	call	0x4a3c	; 0x4a3c <EEPROMRead>
    3004:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <CellCountExpectedSet>
    3008:	1c c0       	rjmp	.+56     	; 0x3042 <FrameInit+0x94>
    300a:	ec e0       	ldi	r30, 0x0C	; 12
    300c:	f1 e0       	ldi	r31, 0x01	; 1
    300e:	11 ae       	std	Z+57, r1	; 0x39
    3010:	12 ae       	std	Z+58, r1	; 0x3a
    3012:	13 ae       	std	Z+59, r1	; 0x3b
    3014:	14 ae       	std	Z+60, r1	; 0x3c
    3016:	14 aa       	std	Z+52, r1	; 0x34
    3018:	13 aa       	std	Z+51, r1	; 0x33
    301a:	16 aa       	std	Z+54, r1	; 0x36
    301c:	15 aa       	std	Z+53, r1	; 0x35
    301e:	10 ae       	std	Z+56, r1	; 0x38
    3020:	17 aa       	std	Z+55, r1	; 0x37
    3022:	80 eb       	ldi	r24, 0xB0	; 176
    3024:	91 e0       	ldi	r25, 0x01	; 1
    3026:	ac e5       	ldi	r26, 0x5C	; 92
    3028:	b1 e0       	ldi	r27, 0x01	; 1
    302a:	ed 01       	movw	r28, r26
    302c:	9c 01       	movw	r18, r24
    302e:	19 92       	st	Y+, r1
    3030:	21 50       	subi	r18, 0x01	; 1
    3032:	30 40       	sbci	r19, 0x00	; 0
    3034:	e1 f7       	brne	.-8      	; 0x302e <FrameInit+0x80>
    3036:	13 a2       	std	Z+35, r1	; 0x23
    3038:	15 a2       	std	Z+37, r1	; 0x25
    303a:	14 a2       	std	Z+36, r1	; 0x24
    303c:	16 a2       	std	Z+38, r1	; 0x26
    303e:	11 a6       	std	Z+41, r1	; 0x29
    3040:	12 a6       	std	Z+42, r1	; 0x2a
    3042:	ec e0       	ldi	r30, 0x0C	; 12
    3044:	f1 e0       	ldi	r31, 0x01	; 1
    3046:	8f e9       	ldi	r24, 0x9F	; 159
    3048:	95 e1       	ldi	r25, 0x15	; 21
    304a:	96 a7       	std	Z+46, r25	; 0x2e
    304c:	85 a7       	std	Z+45, r24	; 0x2d
    304e:	90 ab       	std	Z+48, r25	; 0x30
    3050:	87 a7       	std	Z+47, r24	; 0x2f
    3052:	92 ab       	std	Z+50, r25	; 0x32
    3054:	81 ab       	std	Z+49, r24	; 0x31
    3056:	8f ef       	ldi	r24, 0xFF	; 255
    3058:	80 93 71 07 	sts	0x0771, r24	; 0x800771 <sg_u8CurrentBufferIndex>
    305c:	df 91       	pop	r29
    305e:	cf 91       	pop	r28
    3060:	08 95       	ret

Disassembly of section .text.CellStringPowerStateMachine:

00003492 <CellStringPowerStateMachine>:
    3492:	80 91 68 07 	lds	r24, 0x0768	; 0x800768 <sg_eStringPowerState>
    3496:	82 30       	cpi	r24, 0x02	; 2
    3498:	49 f1       	breq	.+82     	; 0x34ec <CellStringPowerStateMachine+0x5a>
    349a:	28 f4       	brcc	.+10     	; 0x34a6 <CellStringPowerStateMachine+0x14>
    349c:	88 23       	and	r24, r24
    349e:	41 f0       	breq	.+16     	; 0x34b0 <CellStringPowerStateMachine+0x1e>
    34a0:	81 30       	cpi	r24, 0x01	; 1
    34a2:	91 f0       	breq	.+36     	; 0x34c8 <CellStringPowerStateMachine+0x36>
    34a4:	32 c0       	rjmp	.+100    	; 0x350a <CellStringPowerStateMachine+0x78>
    34a6:	83 30       	cpi	r24, 0x03	; 3
    34a8:	61 f1       	breq	.+88     	; 0x3502 <CellStringPowerStateMachine+0x70>
    34aa:	84 30       	cpi	r24, 0x04	; 4
    34ac:	a9 f1       	breq	.+106    	; 0x3518 <CellStringPowerStateMachine+0x86>
    34ae:	2d c0       	rjmp	.+90     	; 0x350a <CellStringPowerStateMachine+0x78>
    34b0:	85 b1       	in	r24, 0x05	; 5
    34b2:	8f 7e       	andi	r24, 0xEF	; 239
    34b4:	85 b9       	out	0x05, r24	; 5
    34b6:	81 e0       	ldi	r24, 0x01	; 1
    34b8:	80 93 68 07 	sts	0x0768, r24	; 0x800768 <sg_eStringPowerState>
    34bc:	80 e0       	ldi	r24, 0x00	; 0
    34be:	0e 94 d7 17 	call	0x2fae	; 0x2fae <FrameInit>
    34c2:	0e 94 85 25 	call	0x4b0a	; 0x4b0a <SendModuleControllerStatus>
    34c6:	08 95       	ret
    34c8:	85 b1       	in	r24, 0x05	; 5
    34ca:	8f 7e       	andi	r24, 0xEF	; 239
    34cc:	85 b9       	out	0x05, r24	; 5
    34ce:	80 e0       	ldi	r24, 0x00	; 0
    34d0:	0e 94 d7 17 	call	0x2fae	; 0x2fae <FrameInit>
    34d4:	82 e0       	ldi	r24, 0x02	; 2
    34d6:	80 93 68 07 	sts	0x0768, r24	; 0x800768 <sg_eStringPowerState>
    34da:	81 e0       	ldi	r24, 0x01	; 1
    34dc:	80 93 6e 07 	sts	0x076E, r24	; 0x80076e <sg_u8CellStringPowerTimer>
    34e0:	ec e0       	ldi	r30, 0x0C	; 12
    34e2:	f1 e0       	ldi	r31, 0x01	; 1
    34e4:	8f ef       	ldi	r24, 0xFF	; 255
    34e6:	87 87       	std	Z+15, r24	; 0x0f
    34e8:	10 8a       	std	Z+16, r1	; 0x10
    34ea:	08 95       	ret
    34ec:	80 91 6e 07 	lds	r24, 0x076E	; 0x80076e <sg_u8CellStringPowerTimer>
    34f0:	81 11       	cpse	r24, r1
    34f2:	12 c0       	rjmp	.+36     	; 0x3518 <CellStringPowerStateMachine+0x86>
    34f4:	85 b1       	in	r24, 0x05	; 5
    34f6:	80 61       	ori	r24, 0x10	; 16
    34f8:	85 b9       	out	0x05, r24	; 5
    34fa:	83 e0       	ldi	r24, 0x03	; 3
    34fc:	80 93 68 07 	sts	0x0768, r24	; 0x800768 <sg_eStringPowerState>
    3500:	08 95       	ret
    3502:	84 e0       	ldi	r24, 0x04	; 4
    3504:	80 93 68 07 	sts	0x0768, r24	; 0x800768 <sg_eStringPowerState>
    3508:	08 95       	ret
    350a:	44 e6       	ldi	r20, 0x64	; 100
    350c:	52 e0       	ldi	r21, 0x02	; 2
    350e:	6f e1       	ldi	r22, 0x1F	; 31
    3510:	71 e0       	ldi	r23, 0x01	; 1
    3512:	80 e0       	ldi	r24, 0x00	; 0
    3514:	0e 94 0c 22 	call	0x4418	; 0x4418 <PlatformAssert>
    3518:	08 95       	ret

Disassembly of section .text.main:

00000d3e <main>:
 d3e:	cf 93       	push	r28
 d40:	df 93       	push	r29
 d42:	cd b7       	in	r28, 0x3d	; 61
 d44:	de b7       	in	r29, 0x3e	; 62
 d46:	28 97       	sbiw	r28, 0x08	; 8
 d48:	0f b6       	in	r0, 0x3f	; 63
 d4a:	f8 94       	cli
 d4c:	de bf       	out	0x3e, r29	; 62
 d4e:	0f be       	out	0x3f, r0	; 63
 d50:	cd bf       	out	0x3d, r28	; 61
 d52:	0e 94 a2 24 	call	0x4944	; 0x4944 <WatchdogOff>
 d56:	88 b1       	in	r24, 0x08	; 8
 d58:	8f 7e       	andi	r24, 0xEF	; 239
 d5a:	88 b9       	out	0x08, r24	; 8
 d5c:	87 b1       	in	r24, 0x07	; 7
 d5e:	80 61       	ori	r24, 0x10	; 16
 d60:	87 b9       	out	0x07, r24	; 7
 d62:	87 b1       	in	r24, 0x07	; 7
 d64:	8d 7f       	andi	r24, 0xFD	; 253
 d66:	87 b9       	out	0x07, r24	; 7
 d68:	87 b1       	in	r24, 0x07	; 7
 d6a:	80 68       	ori	r24, 0x80	; 128
 d6c:	87 b9       	out	0x07, r24	; 7
 d6e:	88 b1       	in	r24, 0x08	; 8
 d70:	8f 7e       	andi	r24, 0xEF	; 239
 d72:	88 b9       	out	0x08, r24	; 8
 d74:	8d b1       	in	r24, 0x0d	; 13
 d76:	82 60       	ori	r24, 0x02	; 2
 d78:	8d b9       	out	0x0d, r24	; 13
 d7a:	8e b1       	in	r24, 0x0e	; 14
 d7c:	8d 7f       	andi	r24, 0xFD	; 253
 d7e:	8e b9       	out	0x0e, r24	; 14
 d80:	84 b1       	in	r24, 0x04	; 4
 d82:	80 61       	ori	r24, 0x10	; 16
 d84:	84 b9       	out	0x04, r24	; 4
 d86:	85 b1       	in	r24, 0x05	; 5
 d88:	8f 7e       	andi	r24, 0xEF	; 239
 d8a:	85 b9       	out	0x05, r24	; 5
 d8c:	e0 e0       	ldi	r30, 0x00	; 0
 d8e:	f8 e0       	ldi	r31, 0x08	; 8
 d90:	02 c0       	rjmp	.+4      	; 0xd96 <main+0x58>
 d92:	8a ea       	ldi	r24, 0xAA	; 170
 d94:	81 93       	st	Z+, r24
 d96:	e1 15       	cp	r30, r1
 d98:	80 e1       	ldi	r24, 0x10	; 16
 d9a:	f8 07       	cpc	r31, r24
 d9c:	d0 f3       	brcs	.-12     	; 0xd92 <main+0x54>
 d9e:	84 b7       	in	r24, 0x34	; 52
 da0:	80 93 67 07 	sts	0x0767, r24	; 0x800767 <sg_u8Reason>
 da4:	80 91 67 07 	lds	r24, 0x0767	; 0x800767 <sg_u8Reason>
 da8:	83 ff       	sbrs	r24, 3
 daa:	0a c0       	rjmp	.+20     	; 0xdc0 <main+0x82>
 dac:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <sg_eWDTCurrentStatus>
 db0:	ec e0       	ldi	r30, 0x0C	; 12
 db2:	f1 e0       	ldi	r31, 0x01	; 1
 db4:	86 85       	ldd	r24, Z+14	; 0x0e
 db6:	8f 5f       	subi	r24, 0xFF	; 255
 db8:	86 87       	std	Z+14, r24	; 0x0e
 dba:	0e 94 22 0b 	call	0x1644	; 0x1644 <ModuleControllerStateHandle>
 dbe:	4b c0       	rjmp	.+150    	; 0xe56 <main+0x118>
 dc0:	80 91 67 07 	lds	r24, 0x0767	; 0x800767 <sg_u8Reason>
 dc4:	80 91 67 07 	lds	r24, 0x0767	; 0x800767 <sg_u8Reason>
 dc8:	80 91 67 07 	lds	r24, 0x0767	; 0x800767 <sg_u8Reason>
 dcc:	f8 94       	cli
 dce:	0e 94 8b 25 	call	0x4b16	; 0x4b16 <SetSysclock>
 dd2:	0e 94 6b 1f 	call	0x3ed6	; 0x3ed6 <TimerInit>
 dd6:	0e 94 b1 21 	call	0x4362	; 0x4362 <vUARTInit>
 dda:	0e 94 29 10 	call	0x2052	; 0x2052 <ADCInit>
 dde:	0e 94 13 1b 	call	0x3626	; 0x3626 <STORE_Init>
 de2:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <sg_bSDCardReady>
 de6:	81 e0       	ldi	r24, 0x01	; 1
 de8:	0e 94 d7 17 	call	0x2fae	; 0x2fae <FrameInit>
 dec:	89 e0       	ldi	r24, 0x09	; 9
 dee:	90 e0       	ldi	r25, 0x00	; 0
 df0:	0e 94 1e 25 	call	0x4a3c	; 0x4a3c <EEPROMRead>
 df4:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <sg_u8SequentailCountMismatchThreshold>
 df8:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <ModuleControllerGetUniqueID>
 dfc:	60 93 17 03 	sts	0x0317, r22	; 0x800317 <sg_u32ModuleUniqueID>
 e00:	70 93 18 03 	sts	0x0318, r23	; 0x800318 <sg_u32ModuleUniqueID+0x1>
 e04:	80 93 19 03 	sts	0x0319, r24	; 0x800319 <sg_u32ModuleUniqueID+0x2>
 e08:	90 93 1a 03 	sts	0x031A, r25	; 0x80031a <sg_u32ModuleUniqueID+0x3>
 e0c:	8a b1       	in	r24, 0x0a	; 10
 e0e:	8f 7b       	andi	r24, 0xBF	; 191
 e10:	8a b9       	out	0x0a, r24	; 10
 e12:	8b b1       	in	r24, 0x0b	; 11
 e14:	80 64       	ori	r24, 0x40	; 64
 e16:	8b b9       	out	0x0b, r24	; 11
 e18:	11 e0       	ldi	r17, 0x01	; 1
 e1a:	1b bb       	out	0x1b, r17	; 27
 e1c:	82 e0       	ldi	r24, 0x02	; 2
 e1e:	8b bb       	out	0x1b, r24	; 27
 e20:	84 e0       	ldi	r24, 0x04	; 4
 e22:	8b bb       	out	0x1b, r24	; 27
 e24:	88 e0       	ldi	r24, 0x08	; 8
 e26:	8b bb       	out	0x1b, r24	; 27
 e28:	ec e6       	ldi	r30, 0x6C	; 108
 e2a:	f0 e0       	ldi	r31, 0x00	; 0
 e2c:	80 81       	ld	r24, Z
 e2e:	80 64       	ori	r24, 0x40	; 64
 e30:	80 83       	st	Z, r24
 e32:	8b b3       	in	r24, 0x1b	; 27
 e34:	84 60       	ori	r24, 0x04	; 4
 e36:	8b bb       	out	0x1b, r24	; 27
 e38:	8d e1       	ldi	r24, 0x1D	; 29
 e3a:	9c e0       	ldi	r25, 0x0C	; 12
 e3c:	0e 94 91 25 	call	0x4b22	; 0x4b22 <CANSetRXCallback>
 e40:	0e 94 27 19 	call	0x324e	; 0x324e <CANInit>
 e44:	0e 94 08 09 	call	0x1210	; 0x1210 <RTCInit>
 e48:	85 e0       	ldi	r24, 0x05	; 5
 e4a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <sg_eModuleControllerStateCurrent>
 e4e:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <sg_eModuleControllerStateTarget>
 e52:	10 93 0b 01 	sts	0x010B, r17	; 0x80010b <sg_eFrameStatus>
 e56:	78 94       	sei
 e58:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <sg_bNewTick>
 e5c:	88 23       	and	r24, r24
 e5e:	e1 f3       	breq	.-8      	; 0xe58 <main+0x11a>
 e60:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <sg_bNewTick>
 e64:	80 91 1d 03 	lds	r24, 0x031D	; 0x80031d <sg_bModuleRegistered>
 e68:	88 23       	and	r24, r24
 e6a:	29 f0       	breq	.+10     	; 0xe76 <main+0x138>
 e6c:	ce 01       	movw	r24, r28
 e6e:	01 96       	adiw	r24, 0x01	; 1
 e70:	0e 94 5e 03 	call	0x6bc	; 0x6bc <ControllerStatusMessagesSend>
 e74:	03 c0       	rjmp	.+6      	; 0xe7c <main+0x13e>
 e76:	81 e0       	ldi	r24, 0x01	; 1
 e78:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <sg_bSendAnnouncement>
 e7c:	80 91 1b 03 	lds	r24, 0x031B	; 0x80031b <sg_bPackControllerTimeout>
 e80:	88 23       	and	r24, r24
 e82:	71 f0       	breq	.+28     	; 0xea0 <main+0x162>
 e84:	10 92 1b 03 	sts	0x031B, r1	; 0x80031b <sg_bPackControllerTimeout>
 e88:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <sg_u8ModuleRegistrationID>
 e8c:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <sg_bModuleRegistered>
 e90:	81 e0       	ldi	r24, 0x01	; 1
 e92:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <sg_bSendAnnouncement>
 e96:	0e 94 85 25 	call	0x4b0a	; 0x4b0a <SendModuleControllerStatus>
 e9a:	80 e0       	ldi	r24, 0x00	; 0
 e9c:	0e 94 96 25 	call	0x4b2c	; 0x4b2c <ModuleControllerStateSet>
 ea0:	ef e6       	ldi	r30, 0x6F	; 111
 ea2:	f0 e0       	ldi	r31, 0x00	; 0
 ea4:	90 81       	ld	r25, Z
 ea6:	80 81       	ld	r24, Z
 ea8:	8d 7f       	andi	r24, 0xFD	; 253
 eaa:	80 83       	st	Z, r24
 eac:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <sg_eFrameStatus>
 eb0:	20 91 6f 07 	lds	r18, 0x076F	; 0x80076f <sg_bFrameStart>
 eb4:	90 83       	st	Z, r25
 eb6:	81 30       	cpi	r24, 0x01	; 1
 eb8:	09 f0       	breq	.+2      	; 0xebc <main+0x17e>
 eba:	61 c0       	rjmp	.+194    	; 0xf7e <main+0x240>
 ebc:	22 23       	and	r18, r18
 ebe:	09 f4       	brne	.+2      	; 0xec2 <main+0x184>
 ec0:	55 c0       	rjmp	.+170    	; 0xf6c <main+0x22e>
 ec2:	10 92 6f 07 	sts	0x076F, r1	; 0x80076f <sg_bFrameStart>
 ec6:	0e 94 49 1a 	call	0x3492	; 0x3492 <CellStringPowerStateMachine>
 eca:	0e 94 31 24 	call	0x4862	; 0x4862 <vUARTRXEnd>
 ece:	ce 01       	movw	r24, r28
 ed0:	01 96       	adiw	r24, 0x01	; 1
 ed2:	0e 94 4c 05 	call	0xa98	; 0xa98 <CellStringProcess>
 ed6:	80 91 68 07 	lds	r24, 0x0768	; 0x800768 <sg_eStringPowerState>
 eda:	84 30       	cpi	r24, 0x04	; 4
 edc:	29 f5       	brne	.+74     	; 0xf28 <main+0x1ea>
 ede:	ec e0       	ldi	r30, 0x0C	; 12
 ee0:	f1 e0       	ldi	r31, 0x01	; 1
 ee2:	91 a5       	ldd	r25, Z+41	; 0x29
 ee4:	81 89       	ldd	r24, Z+17	; 0x11
 ee6:	98 17       	cp	r25, r24
 ee8:	e9 f0       	breq	.+58     	; 0xf24 <main+0x1e6>
 eea:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <sg_sFrame+0x11>
 eee:	88 23       	and	r24, r24
 ef0:	c9 f0       	breq	.+50     	; 0xf24 <main+0x1e6>
 ef2:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <sg_u8SequentailCountMismatchThreshold>
 ef6:	88 23       	and	r24, r24
 ef8:	b9 f0       	breq	.+46     	; 0xf28 <main+0x1ea>
 efa:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <sg_u8SequentailCountMismatchThreshold>
 efe:	8f 3f       	cpi	r24, 0xFF	; 255
 f00:	99 f0       	breq	.+38     	; 0xf28 <main+0x1ea>
 f02:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <sg_u8SequentailCellCountMismatches>
 f06:	8f 5f       	subi	r24, 0xFF	; 255
 f08:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <sg_u8SequentailCellCountMismatches>
 f0c:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <sg_u8SequentailCellCountMismatches>
 f10:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <sg_u8SequentailCountMismatchThreshold>
 f14:	98 17       	cp	r25, r24
 f16:	40 f0       	brcs	.+16     	; 0xf28 <main+0x1ea>
 f18:	81 e0       	ldi	r24, 0x01	; 1
 f1a:	80 93 68 07 	sts	0x0768, r24	; 0x800768 <sg_eStringPowerState>
 f1e:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <sg_u8SequentailCellCountMismatches>
 f22:	02 c0       	rjmp	.+4      	; 0xf28 <main+0x1ea>
 f24:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <sg_u8SequentailCellCountMismatches>
 f28:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <sg_bSendAnnouncement>
 f2c:	88 23       	and	r24, r24
 f2e:	f1 f0       	breq	.+60     	; 0xf6c <main+0x22e>
 f30:	86 e5       	ldi	r24, 0x56	; 86
 f32:	89 83       	std	Y+1, r24	; 0x01
 f34:	80 e2       	ldi	r24, 0x20	; 32
 f36:	8a 83       	std	Y+2, r24	; 0x02
 f38:	82 e0       	ldi	r24, 0x02	; 2
 f3a:	8b 83       	std	Y+3, r24	; 0x03
 f3c:	83 e0       	ldi	r24, 0x03	; 3
 f3e:	8c 83       	std	Y+4, r24	; 0x04
 f40:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <sg_u32ModuleUniqueID>
 f44:	90 91 18 03 	lds	r25, 0x0318	; 0x800318 <sg_u32ModuleUniqueID+0x1>
 f48:	a0 91 19 03 	lds	r26, 0x0319	; 0x800319 <sg_u32ModuleUniqueID+0x2>
 f4c:	b0 91 1a 03 	lds	r27, 0x031A	; 0x80031a <sg_u32ModuleUniqueID+0x3>
 f50:	8d 83       	std	Y+5, r24	; 0x05
 f52:	9e 83       	std	Y+6, r25	; 0x06
 f54:	af 83       	std	Y+7, r26	; 0x07
 f56:	b8 87       	std	Y+8, r27	; 0x08
 f58:	48 e0       	ldi	r20, 0x08	; 8
 f5a:	be 01       	movw	r22, r28
 f5c:	6f 5f       	subi	r22, 0xFF	; 255
 f5e:	7f 4f       	sbci	r23, 0xFF	; 255
 f60:	80 e0       	ldi	r24, 0x00	; 0
 f62:	0e 94 d3 24 	call	0x49a6	; 0x49a6 <CANSendMessage>
 f66:	81 11       	cpse	r24, r1
 f68:	10 92 1e 03 	sts	0x031E, r1	; 0x80031e <sg_bSendAnnouncement>
 f6c:	0e 94 22 0b 	call	0x1644	; 0x1644 <ModuleControllerStateHandle>
 f70:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <sg_bOvercurrentSignal>
 f74:	88 23       	and	r24, r24
 f76:	b1 f0       	breq	.+44     	; 0xfa4 <main+0x266>
 f78:	10 92 0f 03 	sts	0x030F, r1	; 0x80030f <sg_bOvercurrentSignal>
 f7c:	13 c0       	rjmp	.+38     	; 0xfa4 <main+0x266>
 f7e:	22 23       	and	r18, r18
 f80:	89 f0       	breq	.+34     	; 0xfa4 <main+0x266>
 f82:	10 92 6f 07 	sts	0x076F, r1	; 0x80076f <sg_bFrameStart>
 f86:	0e 94 49 1a 	call	0x3492	; 0x3492 <CellStringPowerStateMachine>
 f8a:	80 e0       	ldi	r24, 0x00	; 0
 f8c:	0e 94 d7 17 	call	0x2fae	; 0x2fae <FrameInit>
 f90:	80 91 68 07 	lds	r24, 0x0768	; 0x800768 <sg_eStringPowerState>
 f94:	84 30       	cpi	r24, 0x04	; 4
 f96:	31 f4       	brne	.+12     	; 0xfa4 <main+0x266>
 f98:	0e 94 14 25 	call	0x4a28	; 0x4a28 <vUARTInitReceive>
 f9c:	0e 94 9b 25 	call	0x4b36	; 0x4b36 <vUARTRXReset>
 fa0:	0e 94 c2 1e 	call	0x3d84	; 0x3d84 <vUARTStarttx>
 fa4:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <sg_bADCUpdate>
 fa8:	88 23       	and	r24, r24
 faa:	21 f0       	breq	.+8      	; 0xfb4 <main+0x276>
 fac:	10 92 0e 03 	sts	0x030E, r1	; 0x80030e <sg_bADCUpdate>
 fb0:	0e 94 ed 11 	call	0x23da	; 0x23da <ModuleCurrentConvertReadings>
 fb4:	0e 94 4e 22 	call	0x449c	; 0x449c <ADCStartConversion>
 fb8:	4f cf       	rjmp	.-354    	; 0xe58 <main+0x11a>

Disassembly of section .text.IsLeapYear:

00004230 <IsLeapYear>:
	return( bResult );
}

// Returns true if u16Year is a leap year
static bool IsLeapYear(uint16_t u16Year)
{
    4230:	9c 01       	movw	r18, r24
	bool bLeapYear = false;
	
	if ((u16Year % 400) == 0)
    4232:	60 e9       	ldi	r22, 0x90	; 144
    4234:	71 e0       	ldi	r23, 0x01	; 1
    4236:	0e 94 9f 22 	call	0x453e	; 0x453e <__udivmodhi4>
    423a:	89 2b       	or	r24, r25
    423c:	69 f0       	breq	.+26     	; 0x4258 <IsLeapYear+0x28>
	{
		bLeapYear = true;
	}
	else
	if ((u16Year % 100) == 0)
    423e:	c9 01       	movw	r24, r18
    4240:	64 e6       	ldi	r22, 0x64	; 100
    4242:	70 e0       	ldi	r23, 0x00	; 0
    4244:	0e 94 9f 22 	call	0x453e	; 0x453e <__udivmodhi4>
    4248:	89 2b       	or	r24, r25
    424a:	41 f0       	breq	.+16     	; 0x425c <IsLeapYear+0x2c>
	{
		// Not a leap year if divisible by 100 but not by 400
	}
	else
	if ((u16Year % 4) == 0)
    424c:	23 70       	andi	r18, 0x03	; 3
    424e:	33 27       	eor	r19, r19
    4250:	23 2b       	or	r18, r19
    4252:	31 f0       	breq	.+12     	; 0x4260 <IsLeapYear+0x30>
}

// Returns true if u16Year is a leap year
static bool IsLeapYear(uint16_t u16Year)
{
	bool bLeapYear = false;
    4254:	80 e0       	ldi	r24, 0x00	; 0
    4256:	08 95       	ret
	
	if ((u16Year % 400) == 0)
	{
		bLeapYear = true;
    4258:	81 e0       	ldi	r24, 0x01	; 1
    425a:	08 95       	ret
}

// Returns true if u16Year is a leap year
static bool IsLeapYear(uint16_t u16Year)
{
	bool bLeapYear = false;
    425c:	80 e0       	ldi	r24, 0x00	; 0
    425e:	08 95       	ret
		// Not a leap year if divisible by 100 but not by 400
	}
	else
	if ((u16Year % 4) == 0)
	{
		bLeapYear = true;
    4260:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return(bLeapYear);
}
    4262:	08 95       	ret

Disassembly of section .text.RTCStartTransaction:

00004012 <RTCStartTransaction>:
}

static bool RTCStartTransaction( uint8_t u8Address, 
								 bool bRead, 
								 bool bAllowUnstick )
{
    4012:	ff 92       	push	r15
    4014:	0f 93       	push	r16
    4016:	1f 93       	push	r17
    4018:	cf 93       	push	r28
    401a:	df 93       	push	r29
    401c:	f8 2e       	mov	r15, r24
    401e:	06 2f       	mov	r16, r22
    4020:	14 2f       	mov	r17, r20
	bool bResult = false;
	uint8_t u8Tries = RTC_MAX_ADDRESS_TRIES;
    4022:	d3 e0       	ldi	r29, 0x03	; 3

static bool RTCStartTransaction( uint8_t u8Address, 
								 bool bRead, 
								 bool bAllowUnstick )
{
	bool bResult = false;
    4024:	c0 e0       	ldi	r28, 0x00	; 0
	uint8_t u8Tries = RTC_MAX_ADDRESS_TRIES;
	
	while( (false == bResult) && u8Tries )
    4026:	0c c0       	rjmp	.+24     	; 0x4040 <RTCStartTransaction+0x2e>
	{
		u8Tries--;
    4028:	d1 50       	subi	r29, 0x01	; 1
		
		bResult = I2CStartTransaction( u8Address, bRead );
    402a:	60 2f       	mov	r22, r16
    402c:	8f 2d       	mov	r24, r15
    402e:	0e 94 63 22 	call	0x44c6	; 0x44c6 <I2CStartTransaction>
    4032:	c8 2f       	mov	r28, r24
	
		if( false == bAllowUnstick )
    4034:	11 23       	and	r17, r17
    4036:	41 f0       	breq	.+16     	; 0x4048 <RTCStartTransaction+0x36>
		{
			break;
		}
		
		// Unstick and retry on failure
		if( false == bResult )
    4038:	81 11       	cpse	r24, r1
    403a:	02 c0       	rjmp	.+4      	; 0x4040 <RTCStartTransaction+0x2e>
		{
			I2CUnstick();
    403c:	0e 94 6c 20 	call	0x40d8	; 0x40d8 <I2CUnstick>
								 bool bAllowUnstick )
{
	bool bResult = false;
	uint8_t u8Tries = RTC_MAX_ADDRESS_TRIES;
	
	while( (false == bResult) && u8Tries )
    4040:	c1 11       	cpse	r28, r1
    4042:	02 c0       	rjmp	.+4      	; 0x4048 <RTCStartTransaction+0x36>
    4044:	d1 11       	cpse	r29, r1
    4046:	f0 cf       	rjmp	.-32     	; 0x4028 <RTCStartTransaction+0x16>
			I2CUnstick();
		}
	}
	
	return( bResult );
}
    4048:	8c 2f       	mov	r24, r28
    404a:	df 91       	pop	r29
    404c:	cf 91       	pop	r28
    404e:	1f 91       	pop	r17
    4050:	0f 91       	pop	r16
    4052:	ff 90       	pop	r15
    4054:	08 95       	ret

Disassembly of section .text.StructTMToHW:

00003e30 <StructTMToHW>:
}

// Converts struct tm to SMCP7940NTime structure
static void StructTMToHW(struct tm *psTimeTM,
						 SMCP7940NTime *psTime)
{
    3e30:	cf 93       	push	r28
    3e32:	df 93       	push	r29
    3e34:	dc 01       	movw	r26, r24
    3e36:	fb 01       	movw	r30, r22
	memset((void *) psTime, 0, sizeof(*psTime));
    3e38:	87 e0       	ldi	r24, 0x07	; 7
    3e3a:	eb 01       	movw	r28, r22
    3e3c:	19 92       	st	Y+, r1
    3e3e:	8a 95       	dec	r24
    3e40:	e9 f7       	brne	.-6      	; 0x3e3c <StructTMToHW+0xc>
	
	psTime->u8Seconds = psTimeTM->tm_sec;
    3e42:	8c 91       	ld	r24, X
    3e44:	80 83       	st	Z, r24
	psTime->u8Minutes = psTimeTM->tm_min;
    3e46:	12 96       	adiw	r26, 0x02	; 2
    3e48:	8c 91       	ld	r24, X
    3e4a:	12 97       	sbiw	r26, 0x02	; 2
    3e4c:	81 83       	std	Z+1, r24	; 0x01
	psTime->u8Hours = psTimeTM->tm_hour;
    3e4e:	14 96       	adiw	r26, 0x04	; 4
    3e50:	8c 91       	ld	r24, X
    3e52:	14 97       	sbiw	r26, 0x04	; 4
    3e54:	82 83       	std	Z+2, r24	; 0x02
	psTime->u8Day = psTimeTM->tm_mday;
    3e56:	16 96       	adiw	r26, 0x06	; 6
    3e58:	8c 91       	ld	r24, X
    3e5a:	16 97       	sbiw	r26, 0x06	; 6
    3e5c:	84 83       	std	Z+4, r24	; 0x04
	psTime->u8Month = psTimeTM->tm_mon;
    3e5e:	18 96       	adiw	r26, 0x08	; 8
    3e60:	8c 91       	ld	r24, X
    3e62:	18 97       	sbiw	r26, 0x08	; 8
    3e64:	85 83       	std	Z+5, r24	; 0x05
	
	if (psTimeTM->tm_year > (2099-1900))
    3e66:	1a 96       	adiw	r26, 0x0a	; 10
    3e68:	8d 91       	ld	r24, X+
    3e6a:	9c 91       	ld	r25, X
    3e6c:	1b 97       	sbiw	r26, 0x0b	; 11
    3e6e:	88 3c       	cpi	r24, 0xC8	; 200
    3e70:	91 05       	cpc	r25, r1
    3e72:	1c f0       	brlt	.+6      	; 0x3e7a <StructTMToHW+0x4a>
	{
		psTime->u8Year = psTimeTM->tm_year - 2100;
    3e74:	84 53       	subi	r24, 0x34	; 52
    3e76:	86 83       	std	Z+6, r24	; 0x06
    3e78:	02 c0       	rjmp	.+4      	; 0x3e7e <StructTMToHW+0x4e>
	}
	else
	{
		psTime->u8Year = psTimeTM->tm_year - 2000;
    3e7a:	80 5d       	subi	r24, 0xD0	; 208
    3e7c:	86 83       	std	Z+6, r24	; 0x06
	}
	
}
    3e7e:	df 91       	pop	r29
    3e80:	cf 91       	pop	r28
    3e82:	08 95       	ret

Disassembly of section .text.HWToStructTM:

000037a4 <HWToStructTM>:
}

// Converts an SMCP7940NTime structure to struct tm
static void HWToStructTM(SMCP7940NTime *psTime,
						 struct tm *psTimeTM)
{
    37a4:	cf 93       	push	r28
    37a6:	df 93       	push	r29
    37a8:	dc 01       	movw	r26, r24
    37aa:	fb 01       	movw	r30, r22
	// At this point, the time is in STime and we should
	// turn that in to time_t
	memset((void *) psTimeTM, 0, sizeof(*psTimeTM));
    37ac:	89 e1       	ldi	r24, 0x19	; 25
    37ae:	eb 01       	movw	r28, r22
    37b0:	19 92       	st	Y+, r1
    37b2:	8a 95       	dec	r24
    37b4:	e9 f7       	brne	.-6      	; 0x37b0 <HWToStructTM+0xc>
	
	psTimeTM->tm_sec = psTime->u8Seconds;
    37b6:	8c 91       	ld	r24, X
    37b8:	90 e0       	ldi	r25, 0x00	; 0
    37ba:	91 83       	std	Z+1, r25	; 0x01
    37bc:	80 83       	st	Z, r24
	psTimeTM->tm_min = psTime->u8Minutes;
    37be:	11 96       	adiw	r26, 0x01	; 1
    37c0:	8c 91       	ld	r24, X
    37c2:	11 97       	sbiw	r26, 0x01	; 1
    37c4:	90 e0       	ldi	r25, 0x00	; 0
    37c6:	93 83       	std	Z+3, r25	; 0x03
    37c8:	82 83       	std	Z+2, r24	; 0x02
	psTimeTM->tm_hour = psTime->u8Hours;
    37ca:	12 96       	adiw	r26, 0x02	; 2
    37cc:	8c 91       	ld	r24, X
    37ce:	12 97       	sbiw	r26, 0x02	; 2
    37d0:	90 e0       	ldi	r25, 0x00	; 0
    37d2:	95 83       	std	Z+5, r25	; 0x05
    37d4:	84 83       	std	Z+4, r24	; 0x04
	psTimeTM->tm_mday = psTime->u8Day;
    37d6:	14 96       	adiw	r26, 0x04	; 4
    37d8:	8c 91       	ld	r24, X
    37da:	14 97       	sbiw	r26, 0x04	; 4
    37dc:	90 e0       	ldi	r25, 0x00	; 0
    37de:	97 83       	std	Z+7, r25	; 0x07
    37e0:	86 83       	std	Z+6, r24	; 0x06
	psTimeTM->tm_mon = psTime->u8Month - 1;
    37e2:	15 96       	adiw	r26, 0x05	; 5
    37e4:	8c 91       	ld	r24, X
    37e6:	15 97       	sbiw	r26, 0x05	; 5
    37e8:	90 e0       	ldi	r25, 0x00	; 0
    37ea:	01 97       	sbiw	r24, 0x01	; 1
    37ec:	91 87       	std	Z+9, r25	; 0x09
    37ee:	80 87       	std	Z+8, r24	; 0x08
	
	if (psTime->u8Year < YEAR_ROLLOVER_CUTOFF)
    37f0:	16 96       	adiw	r26, 0x06	; 6
    37f2:	8c 91       	ld	r24, X
    37f4:	84 31       	cpi	r24, 0x14	; 20
    37f6:	30 f4       	brcc	.+12     	; 0x3804 <HWToStructTM+0x60>
	{
		psTimeTM->tm_year = 2100 + psTime->u8Year;
    37f8:	90 e0       	ldi	r25, 0x00	; 0
    37fa:	8c 5c       	subi	r24, 0xCC	; 204
    37fc:	97 4f       	sbci	r25, 0xF7	; 247
    37fe:	93 87       	std	Z+11, r25	; 0x0b
    3800:	82 87       	std	Z+10, r24	; 0x0a
    3802:	05 c0       	rjmp	.+10     	; 0x380e <HWToStructTM+0x6a>
	}
	else
	{
		psTimeTM->tm_year = 2000 + psTime->u8Year;
    3804:	90 e0       	ldi	r25, 0x00	; 0
    3806:	80 53       	subi	r24, 0x30	; 48
    3808:	98 4f       	sbci	r25, 0xF8	; 248
    380a:	93 87       	std	Z+11, r25	; 0x0b
    380c:	82 87       	std	Z+10, r24	; 0x0a
	}	
	
	psTimeTM->tm_year -= 1900;
    380e:	82 85       	ldd	r24, Z+10	; 0x0a
    3810:	93 85       	ldd	r25, Z+11	; 0x0b
    3812:	8c 56       	subi	r24, 0x6C	; 108
    3814:	97 40       	sbci	r25, 0x07	; 7
    3816:	93 87       	std	Z+11, r25	; 0x0b
    3818:	82 87       	std	Z+10, r24	; 0x0a
}
    381a:	df 91       	pop	r29
    381c:	cf 91       	pop	r28
    381e:	08 95       	ret

Disassembly of section .text.__vector_10:

0000351a <__vector_10>:
// # Of seconds since January 1, 1970
static volatile uint64_t sg_u64Time;

// Called once per second on rev 1 and newer hardware
ISR(INT3_vect, ISR_NOBLOCK)
{
    351a:	78 94       	sei
    351c:	1f 92       	push	r1
    351e:	0f 92       	push	r0
    3520:	0f b6       	in	r0, 0x3f	; 63
    3522:	0f 92       	push	r0
    3524:	11 24       	eor	r1, r1
    3526:	2f 93       	push	r18
    3528:	3f 93       	push	r19
    352a:	4f 93       	push	r20
    352c:	5f 93       	push	r21
    352e:	6f 93       	push	r22
    3530:	7f 93       	push	r23
    3532:	8f 93       	push	r24
    3534:	9f 93       	push	r25
    3536:	af 93       	push	r26
	EIFR |= (1 << INTF3);
    3538:	8c b3       	in	r24, 0x1c	; 28
    353a:	88 60       	ori	r24, 0x08	; 8
    353c:	8c bb       	out	0x1c, r24	; 28
	sg_u64Time++;
    353e:	20 91 41 07 	lds	r18, 0x0741	; 0x800741 <sg_u64Time>
    3542:	30 91 42 07 	lds	r19, 0x0742	; 0x800742 <sg_u64Time+0x1>
    3546:	40 91 43 07 	lds	r20, 0x0743	; 0x800743 <sg_u64Time+0x2>
    354a:	50 91 44 07 	lds	r21, 0x0744	; 0x800744 <sg_u64Time+0x3>
    354e:	60 91 45 07 	lds	r22, 0x0745	; 0x800745 <sg_u64Time+0x4>
    3552:	70 91 46 07 	lds	r23, 0x0746	; 0x800746 <sg_u64Time+0x5>
    3556:	80 91 47 07 	lds	r24, 0x0747	; 0x800747 <sg_u64Time+0x6>
    355a:	90 91 48 07 	lds	r25, 0x0748	; 0x800748 <sg_u64Time+0x7>
    355e:	a1 e0       	ldi	r26, 0x01	; 1
    3560:	0e 94 c7 24 	call	0x498e	; 0x498e <__adddi3_s8>
    3564:	20 93 41 07 	sts	0x0741, r18	; 0x800741 <sg_u64Time>
    3568:	30 93 42 07 	sts	0x0742, r19	; 0x800742 <sg_u64Time+0x1>
    356c:	40 93 43 07 	sts	0x0743, r20	; 0x800743 <sg_u64Time+0x2>
    3570:	50 93 44 07 	sts	0x0744, r21	; 0x800744 <sg_u64Time+0x3>
    3574:	60 93 45 07 	sts	0x0745, r22	; 0x800745 <sg_u64Time+0x4>
    3578:	70 93 46 07 	sts	0x0746, r23	; 0x800746 <sg_u64Time+0x5>
    357c:	80 93 47 07 	sts	0x0747, r24	; 0x800747 <sg_u64Time+0x6>
    3580:	90 93 48 07 	sts	0x0748, r25	; 0x800748 <sg_u64Time+0x7>
}
    3584:	af 91       	pop	r26
    3586:	9f 91       	pop	r25
    3588:	8f 91       	pop	r24
    358a:	7f 91       	pop	r23
    358c:	6f 91       	pop	r22
    358e:	5f 91       	pop	r21
    3590:	4f 91       	pop	r20
    3592:	3f 91       	pop	r19
    3594:	2f 91       	pop	r18
    3596:	0f 90       	pop	r0
    3598:	0f be       	out	0x3f, r0	; 63
    359a:	0f 90       	pop	r0
    359c:	1f 90       	pop	r1
    359e:	18 95       	reti

Disassembly of section .text.RTCReadRegisters:

00003726 <RTCReadRegisters>:
}

bool RTCReadRegisters( uint8_t u8RegisterAddr, 
					   uint8_t* pu8Data, 
					   uint8_t u8Length )
{
    3726:	ff 92       	push	r15
    3728:	0f 93       	push	r16
    372a:	1f 93       	push	r17
    372c:	cf 93       	push	r28
    372e:	df 93       	push	r29
    3730:	f8 2e       	mov	r15, r24
    3732:	8b 01       	movw	r16, r22
    3734:	c4 2f       	mov	r28, r20
	bool bResult;
	
	MBASSERT( u8Length >= 1 );
    3736:	41 11       	cpse	r20, r1
    3738:	07 c0       	rjmp	.+14     	; 0x3748 <RTCReadRegisters+0x22>
    373a:	4f e5       	ldi	r20, 0x5F	; 95
    373c:	50 e0       	ldi	r21, 0x00	; 0
    373e:	63 ea       	ldi	r22, 0xA3	; 163
    3740:	71 e0       	ldi	r23, 0x01	; 1
    3742:	80 e0       	ldi	r24, 0x00	; 0
    3744:	0e 94 0c 22 	call	0x4418	; 0x4418 <PlatformAssert>
	
	// First send device address and write register address
	bResult = RTCStartTransaction( RTC_ADDRESS, false, true );
    3748:	41 e0       	ldi	r20, 0x01	; 1
    374a:	60 e0       	ldi	r22, 0x00	; 0
    374c:	8e ed       	ldi	r24, 0xDE	; 222
    374e:	0e 94 09 20 	call	0x4012	; 0x4012 <RTCStartTransaction>
    3752:	d8 2f       	mov	r29, r24
	
	// Couldn't get an ACK?  Give up now
	if( false == bResult )
    3754:	88 23       	and	r24, r24
    3756:	e9 f0       	breq	.+58     	; 0x3792 <RTCReadRegisters+0x6c>
	{
		goto errorExit;
	}
	
	// Send the register address
	bResult = I2CTxByte( u8RegisterAddr );
    3758:	8f 2d       	mov	r24, r15
    375a:	0e 94 3b 1d 	call	0x3a76	; 0x3a76 <I2CTxByte>
    375e:	d8 2f       	mov	r29, r24
	
	if( false == bResult )
    3760:	88 23       	and	r24, r24
    3762:	b9 f0       	breq	.+46     	; 0x3792 <RTCReadRegisters+0x6c>
	{
		goto errorExit;
	}
	
	// Send repeated start with read
	bResult = RTCStartTransaction( RTC_ADDRESS, true, false );
    3764:	40 e0       	ldi	r20, 0x00	; 0
    3766:	61 e0       	ldi	r22, 0x01	; 1
    3768:	8e ed       	ldi	r24, 0xDE	; 222
    376a:	0e 94 09 20 	call	0x4012	; 0x4012 <RTCStartTransaction>
    376e:	d8 2f       	mov	r29, r24
	
	// Couldn't get an ACK?  Give up now
	if( false == bResult )
    3770:	81 11       	cpse	r24, r1
    3772:	08 c0       	rjmp	.+16     	; 0x3784 <RTCReadRegisters+0x5e>
    3774:	0e c0       	rjmp	.+28     	; 0x3792 <RTCReadRegisters+0x6c>
		goto errorExit;
	}
	
	while( u8Length >= 2 )
	{
		*pu8Data = I2CRxByte( true );
    3776:	81 e0       	ldi	r24, 0x01	; 1
    3778:	0e 94 4e 1c 	call	0x389c	; 0x389c <I2CRxByte>
    377c:	f8 01       	movw	r30, r16
    377e:	81 93       	st	Z+, r24
    3780:	8f 01       	movw	r16, r30
		pu8Data++;
		u8Length--;
    3782:	c1 50       	subi	r28, 0x01	; 1
	if( false == bResult )
	{
		goto errorExit;
	}
	
	while( u8Length >= 2 )
    3784:	c2 30       	cpi	r28, 0x02	; 2
    3786:	b8 f7       	brcc	.-18     	; 0x3776 <RTCReadRegisters+0x50>
		pu8Data++;
		u8Length--;
	}
	
	// Final read with NACK
	*pu8Data = I2CRxByte( false );
    3788:	80 e0       	ldi	r24, 0x00	; 0
    378a:	0e 94 4e 1c 	call	0x389c	; 0x389c <I2CRxByte>
    378e:	f8 01       	movw	r30, r16
    3790:	80 83       	st	Z, r24
	
errorExit:

	I2CStop();
    3792:	0e 94 c7 22 	call	0x458e	; 0x458e <I2CStop>
	
	return(bResult);
}
    3796:	8d 2f       	mov	r24, r29
    3798:	df 91       	pop	r29
    379a:	cf 91       	pop	r28
    379c:	1f 91       	pop	r17
    379e:	0f 91       	pop	r16
    37a0:	ff 90       	pop	r15
    37a2:	08 95       	ret

Disassembly of section .text.RTCReadHW:

000026d2 <RTCReadHW>:
	sei();
	
	psSrc = gmtime((const time_t *) &u64Time);
	memcpy((void *) psTime, (void *) psSrc, sizeof(*psTime));
	return(true);
}
    26d2:	cf 93       	push	r28
    26d4:	df 93       	push	r29
    26d6:	ec 01       	movw	r28, r24
    26d8:	47 e0       	ldi	r20, 0x07	; 7
    26da:	bc 01       	movw	r22, r24
    26dc:	80 e0       	ldi	r24, 0x00	; 0
    26de:	0e 94 93 1b 	call	0x3726	; 0x3726 <RTCReadRegisters>
    26e2:	88 23       	and	r24, r24
    26e4:	09 f4       	brne	.+2      	; 0x26e8 <RTCReadHW+0x16>
    26e6:	63 c0       	rjmp	.+198    	; 0x27ae <RTCReadHW+0xdc>
    26e8:	98 81       	ld	r25, Y
    26ea:	29 2f       	mov	r18, r25
    26ec:	22 95       	swap	r18
    26ee:	2f 70       	andi	r18, 0x0F	; 15
    26f0:	27 70       	andi	r18, 0x07	; 7
    26f2:	22 0f       	add	r18, r18
    26f4:	32 2f       	mov	r19, r18
    26f6:	33 0f       	add	r19, r19
    26f8:	33 0f       	add	r19, r19
    26fa:	23 0f       	add	r18, r19
    26fc:	9f 70       	andi	r25, 0x0F	; 15
    26fe:	92 0f       	add	r25, r18
    2700:	98 83       	st	Y, r25
    2702:	99 81       	ldd	r25, Y+1	; 0x01
    2704:	29 2f       	mov	r18, r25
    2706:	22 95       	swap	r18
    2708:	2f 70       	andi	r18, 0x0F	; 15
    270a:	27 70       	andi	r18, 0x07	; 7
    270c:	22 0f       	add	r18, r18
    270e:	32 2f       	mov	r19, r18
    2710:	33 0f       	add	r19, r19
    2712:	33 0f       	add	r19, r19
    2714:	23 0f       	add	r18, r19
    2716:	9f 70       	andi	r25, 0x0F	; 15
    2718:	92 0f       	add	r25, r18
    271a:	99 83       	std	Y+1, r25	; 0x01
    271c:	9a 81       	ldd	r25, Y+2	; 0x02
    271e:	96 ff       	sbrs	r25, 6
    2720:	11 c0       	rjmp	.+34     	; 0x2744 <RTCReadHW+0x72>
    2722:	94 fb       	bst	r25, 4
    2724:	22 27       	eor	r18, r18
    2726:	20 f9       	bld	r18, 0
    2728:	22 0f       	add	r18, r18
    272a:	32 2f       	mov	r19, r18
    272c:	33 0f       	add	r19, r19
    272e:	33 0f       	add	r19, r19
    2730:	23 0f       	add	r18, r19
    2732:	39 2f       	mov	r19, r25
    2734:	3f 70       	andi	r19, 0x0F	; 15
    2736:	23 0f       	add	r18, r19
    2738:	2a 83       	std	Y+2, r18	; 0x02
    273a:	95 ff       	sbrs	r25, 5
    273c:	0f c0       	rjmp	.+30     	; 0x275c <RTCReadHW+0x8a>
    273e:	24 5f       	subi	r18, 0xF4	; 244
    2740:	2a 83       	std	Y+2, r18	; 0x02
    2742:	0c c0       	rjmp	.+24     	; 0x275c <RTCReadHW+0x8a>
    2744:	29 2f       	mov	r18, r25
    2746:	22 95       	swap	r18
    2748:	2f 70       	andi	r18, 0x0F	; 15
    274a:	23 70       	andi	r18, 0x03	; 3
    274c:	22 0f       	add	r18, r18
    274e:	32 2f       	mov	r19, r18
    2750:	33 0f       	add	r19, r19
    2752:	33 0f       	add	r19, r19
    2754:	23 0f       	add	r18, r19
    2756:	9f 70       	andi	r25, 0x0F	; 15
    2758:	92 0f       	add	r25, r18
    275a:	9a 83       	std	Y+2, r25	; 0x02
    275c:	9b 81       	ldd	r25, Y+3	; 0x03
    275e:	97 70       	andi	r25, 0x07	; 7
    2760:	9b 83       	std	Y+3, r25	; 0x03
    2762:	9c 81       	ldd	r25, Y+4	; 0x04
    2764:	29 2f       	mov	r18, r25
    2766:	22 95       	swap	r18
    2768:	2f 70       	andi	r18, 0x0F	; 15
    276a:	23 70       	andi	r18, 0x03	; 3
    276c:	22 0f       	add	r18, r18
    276e:	32 2f       	mov	r19, r18
    2770:	33 0f       	add	r19, r19
    2772:	33 0f       	add	r19, r19
    2774:	23 0f       	add	r18, r19
    2776:	9f 70       	andi	r25, 0x0F	; 15
    2778:	92 0f       	add	r25, r18
    277a:	9c 83       	std	Y+4, r25	; 0x04
    277c:	9d 81       	ldd	r25, Y+5	; 0x05
    277e:	94 fb       	bst	r25, 4
    2780:	22 27       	eor	r18, r18
    2782:	20 f9       	bld	r18, 0
    2784:	22 0f       	add	r18, r18
    2786:	32 2f       	mov	r19, r18
    2788:	33 0f       	add	r19, r19
    278a:	33 0f       	add	r19, r19
    278c:	23 0f       	add	r18, r19
    278e:	9f 70       	andi	r25, 0x0F	; 15
    2790:	92 0f       	add	r25, r18
    2792:	9d 83       	std	Y+5, r25	; 0x05
    2794:	9e 81       	ldd	r25, Y+6	; 0x06
    2796:	29 2f       	mov	r18, r25
    2798:	22 95       	swap	r18
    279a:	2f 70       	andi	r18, 0x0F	; 15
    279c:	22 0f       	add	r18, r18
    279e:	32 2f       	mov	r19, r18
    27a0:	33 0f       	add	r19, r19
    27a2:	33 0f       	add	r19, r19
    27a4:	23 0f       	add	r18, r19
    27a6:	9f 70       	andi	r25, 0x0F	; 15
    27a8:	92 0f       	add	r25, r18
    27aa:	9c 5e       	subi	r25, 0xEC	; 236
    27ac:	9e 83       	std	Y+6, r25	; 0x06
    27ae:	df 91       	pop	r29
    27b0:	cf 91       	pop	r28
    27b2:	08 95       	ret

Disassembly of section .text.RTCWriteRegisters:

00003ae0 <RTCWriteRegisters>:
}

bool RTCWriteRegisters( uint8_t u8RegisterAddr,
						uint8_t* pu8Data, 
						uint8_t u8Length )
{
    3ae0:	ff 92       	push	r15
    3ae2:	0f 93       	push	r16
    3ae4:	1f 93       	push	r17
    3ae6:	cf 93       	push	r28
    3ae8:	df 93       	push	r29
    3aea:	f8 2e       	mov	r15, r24
    3aec:	8b 01       	movw	r16, r22
    3aee:	c4 2f       	mov	r28, r20
	bool bResult;
	
	MBASSERT( u8Length >= 1 );
    3af0:	41 11       	cpse	r20, r1
    3af2:	07 c0       	rjmp	.+14     	; 0x3b02 <RTCWriteRegisters+0x22>
    3af4:	42 e9       	ldi	r20, 0x92	; 146
    3af6:	50 e0       	ldi	r21, 0x00	; 0
    3af8:	63 ea       	ldi	r22, 0xA3	; 163
    3afa:	71 e0       	ldi	r23, 0x01	; 1
    3afc:	80 e0       	ldi	r24, 0x00	; 0
    3afe:	0e 94 0c 22 	call	0x4418	; 0x4418 <PlatformAssert>
	
	// First send device address and write register address
	bResult = RTCStartTransaction( RTC_ADDRESS, false, true );
    3b02:	41 e0       	ldi	r20, 0x01	; 1
    3b04:	60 e0       	ldi	r22, 0x00	; 0
    3b06:	8e ed       	ldi	r24, 0xDE	; 222
    3b08:	0e 94 09 20 	call	0x4012	; 0x4012 <RTCStartTransaction>
    3b0c:	d8 2f       	mov	r29, r24
	
	// Couldn't get an ACK?  Give up now
	if( false == bResult )
    3b0e:	88 23       	and	r24, r24
    3b10:	99 f0       	breq	.+38     	; 0x3b38 <RTCWriteRegisters+0x58>
	{
		goto errorExit;
	}
	
	// Send the register address
	bResult = I2CTxByte( u8RegisterAddr );
    3b12:	8f 2d       	mov	r24, r15
    3b14:	0e 94 3b 1d 	call	0x3a76	; 0x3a76 <I2CTxByte>
    3b18:	d8 2f       	mov	r29, r24
	
	if( false == bResult )
    3b1a:	81 11       	cpse	r24, r1
    3b1c:	0b c0       	rjmp	.+22     	; 0x3b34 <RTCWriteRegisters+0x54>
    3b1e:	0c c0       	rjmp	.+24     	; 0x3b38 <RTCWriteRegisters+0x58>
	}
	
	// Now immediately send the sequential data
	while( u8Length )
	{
		bResult = I2CTxByte( *pu8Data );
    3b20:	f8 01       	movw	r30, r16
    3b22:	80 81       	ld	r24, Z
    3b24:	0e 94 3b 1d 	call	0x3a76	; 0x3a76 <I2CTxByte>
    3b28:	d8 2f       	mov	r29, r24
		
		if( false == bResult )
    3b2a:	88 23       	and	r24, r24
    3b2c:	29 f0       	breq	.+10     	; 0x3b38 <RTCWriteRegisters+0x58>
		{
			goto errorExit;
		}
		
		pu8Data++;
    3b2e:	0f 5f       	subi	r16, 0xFF	; 255
    3b30:	1f 4f       	sbci	r17, 0xFF	; 255
		u8Length--;
    3b32:	c1 50       	subi	r28, 0x01	; 1
	{
		goto errorExit;
	}
	
	// Now immediately send the sequential data
	while( u8Length )
    3b34:	c1 11       	cpse	r28, r1
    3b36:	f4 cf       	rjmp	.-24     	; 0x3b20 <RTCWriteRegisters+0x40>
		u8Length--;
	}
	
errorExit:

	I2CStop();
    3b38:	0e 94 c7 22 	call	0x458e	; 0x458e <I2CStop>
	
	return( bResult );
}
    3b3c:	8d 2f       	mov	r24, r29
    3b3e:	df 91       	pop	r29
    3b40:	cf 91       	pop	r28
    3b42:	1f 91       	pop	r17
    3b44:	0f 91       	pop	r16
    3b46:	ff 90       	pop	r15
    3b48:	08 95       	ret

Disassembly of section .text.RTCWriteHW:

000024de <RTCWriteHW>:
	sei();
	
	psSrc = gmtime((const time_t *) &u64Time);
	memcpy((void *) psTime, (void *) psSrc, sizeof(*psTime));
	return(true);
}
    24de:	fc 01       	movw	r30, r24
    24e0:	20 81       	ld	r18, Z
    24e2:	8d ec       	ldi	r24, 0xCD	; 205
    24e4:	28 9f       	mul	r18, r24
    24e6:	91 2d       	mov	r25, r1
    24e8:	11 24       	eor	r1, r1
    24ea:	96 95       	lsr	r25
    24ec:	96 95       	lsr	r25
    24ee:	96 95       	lsr	r25
    24f0:	30 e1       	ldi	r19, 0x10	; 16
    24f2:	93 9f       	mul	r25, r19
    24f4:	a0 01       	movw	r20, r0
    24f6:	11 24       	eor	r1, r1
    24f8:	99 0f       	add	r25, r25
    24fa:	39 2f       	mov	r19, r25
    24fc:	33 0f       	add	r19, r19
    24fe:	33 0f       	add	r19, r19
    2500:	93 0f       	add	r25, r19
    2502:	29 1b       	sub	r18, r25
    2504:	24 2b       	or	r18, r20
    2506:	20 83       	st	Z, r18
    2508:	21 81       	ldd	r18, Z+1	; 0x01
    250a:	28 9f       	mul	r18, r24
    250c:	91 2d       	mov	r25, r1
    250e:	11 24       	eor	r1, r1
    2510:	96 95       	lsr	r25
    2512:	96 95       	lsr	r25
    2514:	96 95       	lsr	r25
    2516:	30 e1       	ldi	r19, 0x10	; 16
    2518:	93 9f       	mul	r25, r19
    251a:	a0 01       	movw	r20, r0
    251c:	11 24       	eor	r1, r1
    251e:	99 0f       	add	r25, r25
    2520:	39 2f       	mov	r19, r25
    2522:	33 0f       	add	r19, r19
    2524:	33 0f       	add	r19, r19
    2526:	93 0f       	add	r25, r19
    2528:	29 1b       	sub	r18, r25
    252a:	24 2b       	or	r18, r20
    252c:	21 83       	std	Z+1, r18	; 0x01
    252e:	42 81       	ldd	r20, Z+2	; 0x02
    2530:	48 9f       	mul	r20, r24
    2532:	91 2d       	mov	r25, r1
    2534:	11 24       	eor	r1, r1
    2536:	96 95       	lsr	r25
    2538:	96 95       	lsr	r25
    253a:	96 95       	lsr	r25
    253c:	50 e1       	ldi	r21, 0x10	; 16
    253e:	95 9f       	mul	r25, r21
    2540:	90 01       	movw	r18, r0
    2542:	11 24       	eor	r1, r1
    2544:	99 0f       	add	r25, r25
    2546:	39 2f       	mov	r19, r25
    2548:	33 0f       	add	r19, r19
    254a:	33 0f       	add	r19, r19
    254c:	93 0f       	add	r25, r19
    254e:	49 1b       	sub	r20, r25
    2550:	24 2b       	or	r18, r20
    2552:	2f 7b       	andi	r18, 0xBF	; 191
    2554:	22 83       	std	Z+2, r18	; 0x02
    2556:	93 81       	ldd	r25, Z+3	; 0x03
    2558:	97 70       	andi	r25, 0x07	; 7
    255a:	98 60       	ori	r25, 0x08	; 8
    255c:	93 83       	std	Z+3, r25	; 0x03
    255e:	24 81       	ldd	r18, Z+4	; 0x04
    2560:	28 9f       	mul	r18, r24
    2562:	91 2d       	mov	r25, r1
    2564:	11 24       	eor	r1, r1
    2566:	96 95       	lsr	r25
    2568:	96 95       	lsr	r25
    256a:	96 95       	lsr	r25
    256c:	30 e1       	ldi	r19, 0x10	; 16
    256e:	93 9f       	mul	r25, r19
    2570:	a0 01       	movw	r20, r0
    2572:	11 24       	eor	r1, r1
    2574:	99 0f       	add	r25, r25
    2576:	39 2f       	mov	r19, r25
    2578:	33 0f       	add	r19, r19
    257a:	33 0f       	add	r19, r19
    257c:	93 0f       	add	r25, r19
    257e:	29 1b       	sub	r18, r25
    2580:	24 2b       	or	r18, r20
    2582:	24 83       	std	Z+4, r18	; 0x04
    2584:	25 81       	ldd	r18, Z+5	; 0x05
    2586:	28 9f       	mul	r18, r24
    2588:	91 2d       	mov	r25, r1
    258a:	11 24       	eor	r1, r1
    258c:	96 95       	lsr	r25
    258e:	96 95       	lsr	r25
    2590:	96 95       	lsr	r25
    2592:	30 e1       	ldi	r19, 0x10	; 16
    2594:	93 9f       	mul	r25, r19
    2596:	a0 01       	movw	r20, r0
    2598:	11 24       	eor	r1, r1
    259a:	99 0f       	add	r25, r25
    259c:	39 2f       	mov	r19, r25
    259e:	33 0f       	add	r19, r19
    25a0:	33 0f       	add	r19, r19
    25a2:	93 0f       	add	r25, r19
    25a4:	29 1b       	sub	r18, r25
    25a6:	24 2b       	or	r18, r20
    25a8:	25 83       	std	Z+5, r18	; 0x05
    25aa:	96 81       	ldd	r25, Z+6	; 0x06
    25ac:	98 9f       	mul	r25, r24
    25ae:	81 2d       	mov	r24, r1
    25b0:	11 24       	eor	r1, r1
    25b2:	86 95       	lsr	r24
    25b4:	86 95       	lsr	r24
    25b6:	86 95       	lsr	r24
    25b8:	40 e1       	ldi	r20, 0x10	; 16
    25ba:	84 9f       	mul	r24, r20
    25bc:	90 01       	movw	r18, r0
    25be:	11 24       	eor	r1, r1
    25c0:	88 0f       	add	r24, r24
    25c2:	38 2f       	mov	r19, r24
    25c4:	33 0f       	add	r19, r19
    25c6:	33 0f       	add	r19, r19
    25c8:	83 0f       	add	r24, r19
    25ca:	98 1b       	sub	r25, r24
    25cc:	92 2b       	or	r25, r18
    25ce:	96 83       	std	Z+6, r25	; 0x06
    25d0:	47 e0       	ldi	r20, 0x07	; 7
    25d2:	bf 01       	movw	r22, r30
    25d4:	80 e0       	ldi	r24, 0x00	; 0
    25d6:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <RTCWriteRegisters>
    25da:	08 95       	ret

Disassembly of section .text.RTCSetTime:

00002bec <RTCSetTime>:

// This sets the RTC to the specific time passed in. True is returned
// if it's 
bool RTCSetTime(uint64_t u64Timet)
{
    2bec:	0f 93       	push	r16
    2bee:	1f 93       	push	r17
    2bf0:	cf 93       	push	r28
    2bf2:	df 93       	push	r29
    2bf4:	cd b7       	in	r28, 0x3d	; 61
    2bf6:	de b7       	in	r29, 0x3e	; 62
    2bf8:	a8 97       	sbiw	r28, 0x28	; 40
    2bfa:	0f b6       	in	r0, 0x3f	; 63
    2bfc:	f8 94       	cli
    2bfe:	de bf       	out	0x3e, r29	; 62
    2c00:	0f be       	out	0x3f, r0	; 63
    2c02:	cd bf       	out	0x3d, r28	; 61
    2c04:	29 a3       	std	Y+33, r18	; 0x21
    2c06:	3a a3       	std	Y+34, r19	; 0x22
    2c08:	4b a3       	std	Y+35, r20	; 0x23
    2c0a:	5c a3       	std	Y+36, r21	; 0x24
    2c0c:	6d a3       	std	Y+37, r22	; 0x25
    2c0e:	7e a3       	std	Y+38, r23	; 0x26
    2c10:	8f a3       	std	Y+39, r24	; 0x27
    2c12:	98 a7       	std	Y+40, r25	; 0x28
	struct tm sTime;
	struct tm *psTime;
	SMCP7940NTime sTimeHW;

	// Convert to GMTime
	memset((void *) &sTime, 0, sizeof(sTime));
    2c14:	fe 01       	movw	r30, r28
    2c16:	31 96       	adiw	r30, 0x01	; 1
    2c18:	89 e1       	ldi	r24, 0x19	; 25
    2c1a:	df 01       	movw	r26, r30
    2c1c:	1d 92       	st	X+, r1
    2c1e:	8a 95       	dec	r24
    2c20:	e9 f7       	brne	.-6      	; 0x2c1c <RTCSetTime+0x30>
	psTime = gmtime((const time_t *) &u64Timet);
    2c22:	be 01       	movw	r22, r28
    2c24:	6f 5d       	subi	r22, 0xDF	; 223
    2c26:	7f 4f       	sbci	r23, 0xFF	; 255
    2c28:	80 e8       	ldi	r24, 0x80	; 128
    2c2a:	0e 94 a0 25 	call	0x4b40	; 0x4b40 <gmtime>
    2c2e:	8c 01       	movw	r16, r24
	MBASSERT(psTime);
    2c30:	89 2b       	or	r24, r25
    2c32:	39 f4       	brne	.+14     	; 0x2c42 <RTCSetTime+0x56>
    2c34:	42 e8       	ldi	r20, 0x82	; 130
    2c36:	51 e0       	ldi	r21, 0x01	; 1
    2c38:	63 ea       	ldi	r22, 0xA3	; 163
    2c3a:	71 e0       	ldi	r23, 0x01	; 1
    2c3c:	80 e0       	ldi	r24, 0x00	; 0
    2c3e:	0e 94 0c 22 	call	0x4418	; 0x4418 <PlatformAssert>
	memcpy((void *) &sTime, (void *) psTime, sizeof(sTime));
    2c42:	a8 01       	movw	r20, r16
    2c44:	60 e8       	ldi	r22, 0x80	; 128
    2c46:	29 e1       	ldi	r18, 0x19	; 25
    2c48:	30 e0       	ldi	r19, 0x00	; 0
    2c4a:	ce 01       	movw	r24, r28
    2c4c:	01 96       	adiw	r24, 0x01	; 1
    2c4e:	0e 94 98 21 	call	0x4330	; 0x4330 <memcpy>
	
	// Now convert to hardware
	StructTMToHW(&sTime,
    2c52:	be 01       	movw	r22, r28
    2c54:	66 5e       	subi	r22, 0xE6	; 230
    2c56:	7f 4f       	sbci	r23, 0xFF	; 255
    2c58:	ce 01       	movw	r24, r28
    2c5a:	01 96       	adiw	r24, 0x01	; 1
    2c5c:	0e 94 18 1f 	call	0x3e30	; 0x3e30 <StructTMToHW>
				 &sTimeHW);
	
	// Set the time			 
	cli();
    2c60:	f8 94       	cli
	sg_u64Time = u64Timet;
    2c62:	79 a1       	ldd	r23, Y+33	; 0x21
    2c64:	6a a1       	ldd	r22, Y+34	; 0x22
    2c66:	5b a1       	ldd	r21, Y+35	; 0x23
    2c68:	4c a1       	ldd	r20, Y+36	; 0x24
    2c6a:	3d a1       	ldd	r19, Y+37	; 0x25
    2c6c:	2e a1       	ldd	r18, Y+38	; 0x26
    2c6e:	9f a1       	ldd	r25, Y+39	; 0x27
    2c70:	88 a5       	ldd	r24, Y+40	; 0x28
    2c72:	70 93 41 07 	sts	0x0741, r23	; 0x800741 <sg_u64Time>
    2c76:	60 93 42 07 	sts	0x0742, r22	; 0x800742 <sg_u64Time+0x1>
    2c7a:	50 93 43 07 	sts	0x0743, r21	; 0x800743 <sg_u64Time+0x2>
    2c7e:	40 93 44 07 	sts	0x0744, r20	; 0x800744 <sg_u64Time+0x3>
    2c82:	30 93 45 07 	sts	0x0745, r19	; 0x800745 <sg_u64Time+0x4>
    2c86:	20 93 46 07 	sts	0x0746, r18	; 0x800746 <sg_u64Time+0x5>
    2c8a:	90 93 47 07 	sts	0x0747, r25	; 0x800747 <sg_u64Time+0x6>
    2c8e:	80 93 48 07 	sts	0x0748, r24	; 0x800748 <sg_u64Time+0x7>
	sei();
    2c92:	78 94       	sei
	
	// Now go tell the hardware about it
	return(RTCWriteHW(&sTimeHW));
    2c94:	ce 01       	movw	r24, r28
    2c96:	4a 96       	adiw	r24, 0x1a	; 26
    2c98:	0e 94 6f 12 	call	0x24de	; 0x24de <RTCWriteHW>
}
    2c9c:	a8 96       	adiw	r28, 0x28	; 40
    2c9e:	0f b6       	in	r0, 0x3f	; 63
    2ca0:	f8 94       	cli
    2ca2:	de bf       	out	0x3e, r29	; 62
    2ca4:	0f be       	out	0x3f, r0	; 63
    2ca6:	cd bf       	out	0x3d, r28	; 61
    2ca8:	df 91       	pop	r29
    2caa:	cf 91       	pop	r28
    2cac:	1f 91       	pop	r17
    2cae:	0f 91       	pop	r16
    2cb0:	08 95       	ret

Disassembly of section .text.RTCInit:

00001210 <RTCInit>:
	sei();
	
	psSrc = gmtime((const time_t *) &u64Time);
	memcpy((void *) psTime, (void *) psSrc, sizeof(*psTime));
	return(true);
}
    1210:	ff 92       	push	r15
    1212:	0f 93       	push	r16
    1214:	1f 93       	push	r17
    1216:	cf 93       	push	r28
    1218:	df 93       	push	r29
    121a:	cd b7       	in	r28, 0x3d	; 61
    121c:	de b7       	in	r29, 0x3e	; 62
    121e:	a1 97       	sbiw	r28, 0x21	; 33
    1220:	0f b6       	in	r0, 0x3f	; 63
    1222:	f8 94       	cli
    1224:	de bf       	out	0x3e, r29	; 62
    1226:	0f be       	out	0x3f, r0	; 63
    1228:	cd bf       	out	0x3d, r28	; 61
    122a:	19 82       	std	Y+1, r1	; 0x01
    122c:	41 e0       	ldi	r20, 0x01	; 1
    122e:	be 01       	movw	r22, r28
    1230:	6f 5f       	subi	r22, 0xFF	; 255
    1232:	7f 4f       	sbci	r23, 0xFF	; 255
    1234:	87 e0       	ldi	r24, 0x07	; 7
    1236:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <RTCWriteRegisters>
    123a:	18 2f       	mov	r17, r24
    123c:	88 23       	and	r24, r24
    123e:	09 f4       	brne	.+2      	; 0x1242 <RTCInit+0x32>
    1240:	eb c0       	rjmp	.+470    	; 0x1418 <RTCInit+0x208>
    1242:	80 e8       	ldi	r24, 0x80	; 128
    1244:	89 83       	std	Y+1, r24	; 0x01
    1246:	41 e0       	ldi	r20, 0x01	; 1
    1248:	be 01       	movw	r22, r28
    124a:	6f 5f       	subi	r22, 0xFF	; 255
    124c:	7f 4f       	sbci	r23, 0xFF	; 255
    124e:	80 e0       	ldi	r24, 0x00	; 0
    1250:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <RTCWriteRegisters>
    1254:	18 2f       	mov	r17, r24
    1256:	81 11       	cpse	r24, r1
    1258:	17 c0       	rjmp	.+46     	; 0x1288 <RTCInit+0x78>
    125a:	de c0       	rjmp	.+444    	; 0x1418 <RTCInit+0x208>
    125c:	19 82       	std	Y+1, r1	; 0x01
    125e:	41 e0       	ldi	r20, 0x01	; 1
    1260:	be 01       	movw	r22, r28
    1262:	6f 5f       	subi	r22, 0xFF	; 255
    1264:	7f 4f       	sbci	r23, 0xFF	; 255
    1266:	83 e0       	ldi	r24, 0x03	; 3
    1268:	0e 94 93 1b 	call	0x3726	; 0x3726 <RTCReadRegisters>
    126c:	18 2f       	mov	r17, r24
    126e:	88 23       	and	r24, r24
    1270:	09 f4       	brne	.+2      	; 0x1274 <RTCInit+0x64>
    1272:	d2 c0       	rjmp	.+420    	; 0x1418 <RTCInit+0x208>
    1274:	89 81       	ldd	r24, Y+1	; 0x01
    1276:	85 fd       	sbrc	r24, 5
    1278:	0a c0       	rjmp	.+20     	; 0x128e <RTCInit+0x7e>
    127a:	60 e0       	ldi	r22, 0x00	; 0
    127c:	70 e0       	ldi	r23, 0x00	; 0
    127e:	cb 01       	movw	r24, r22
    1280:	0e 94 42 1f 	call	0x3e84	; 0x3e84 <Delay>
    1284:	0f 5f       	subi	r16, 0xFF	; 255
    1286:	01 c0       	rjmp	.+2      	; 0x128a <RTCInit+0x7a>
    1288:	00 e0       	ldi	r16, 0x00	; 0
    128a:	08 3c       	cpi	r16, 0xC8	; 200
    128c:	38 f3       	brcs	.-50     	; 0x125c <RTCInit+0x4c>
    128e:	08 3c       	cpi	r16, 0xC8	; 200
    1290:	08 f0       	brcs	.+2      	; 0x1294 <RTCInit+0x84>
    1292:	c2 c0       	rjmp	.+388    	; 0x1418 <RTCInit+0x208>
    1294:	89 81       	ldd	r24, Y+1	; 0x01
    1296:	88 60       	ori	r24, 0x08	; 8
    1298:	89 83       	std	Y+1, r24	; 0x01
    129a:	41 e0       	ldi	r20, 0x01	; 1
    129c:	be 01       	movw	r22, r28
    129e:	6f 5f       	subi	r22, 0xFF	; 255
    12a0:	7f 4f       	sbci	r23, 0xFF	; 255
    12a2:	83 e0       	ldi	r24, 0x03	; 3
    12a4:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <RTCWriteRegisters>
    12a8:	18 2f       	mov	r17, r24
    12aa:	88 23       	and	r24, r24
    12ac:	09 f4       	brne	.+2      	; 0x12b0 <RTCInit+0xa0>
    12ae:	b4 c0       	rjmp	.+360    	; 0x1418 <RTCInit+0x208>
    12b0:	41 e0       	ldi	r20, 0x01	; 1
    12b2:	be 01       	movw	r22, r28
    12b4:	6f 5f       	subi	r22, 0xFF	; 255
    12b6:	7f 4f       	sbci	r23, 0xFF	; 255
    12b8:	82 e0       	ldi	r24, 0x02	; 2
    12ba:	0e 94 93 1b 	call	0x3726	; 0x3726 <RTCReadRegisters>
    12be:	18 2f       	mov	r17, r24
    12c0:	88 23       	and	r24, r24
    12c2:	09 f4       	brne	.+2      	; 0x12c6 <RTCInit+0xb6>
    12c4:	a9 c0       	rjmp	.+338    	; 0x1418 <RTCInit+0x208>
    12c6:	89 81       	ldd	r24, Y+1	; 0x01
    12c8:	8f 7b       	andi	r24, 0xBF	; 191
    12ca:	89 83       	std	Y+1, r24	; 0x01
    12cc:	41 e0       	ldi	r20, 0x01	; 1
    12ce:	be 01       	movw	r22, r28
    12d0:	6f 5f       	subi	r22, 0xFF	; 255
    12d2:	7f 4f       	sbci	r23, 0xFF	; 255
    12d4:	82 e0       	ldi	r24, 0x02	; 2
    12d6:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <RTCWriteRegisters>
    12da:	18 2f       	mov	r17, r24
    12dc:	88 23       	and	r24, r24
    12de:	09 f4       	brne	.+2      	; 0x12e2 <RTCInit+0xd2>
    12e0:	9b c0       	rjmp	.+310    	; 0x1418 <RTCInit+0x208>
    12e2:	ce 01       	movw	r24, r28
    12e4:	02 96       	adiw	r24, 0x02	; 2
    12e6:	0e 94 69 13 	call	0x26d2	; 0x26d2 <RTCReadHW>
    12ea:	18 2f       	mov	r17, r24
    12ec:	88 23       	and	r24, r24
    12ee:	09 f4       	brne	.+2      	; 0x12f2 <RTCInit+0xe2>
    12f0:	93 c0       	rjmp	.+294    	; 0x1418 <RTCInit+0x208>
    12f2:	8a 81       	ldd	r24, Y+2	; 0x02
    12f4:	8c 33       	cpi	r24, 0x3C	; 60
    12f6:	10 f4       	brcc	.+4      	; 0x12fc <RTCInit+0xec>
    12f8:	10 e0       	ldi	r17, 0x00	; 0
    12fa:	01 c0       	rjmp	.+2      	; 0x12fe <RTCInit+0xee>
    12fc:	11 e0       	ldi	r17, 0x01	; 1
    12fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1300:	8c 33       	cpi	r24, 0x3C	; 60
    1302:	08 f0       	brcs	.+2      	; 0x1306 <RTCInit+0xf6>
    1304:	11 e0       	ldi	r17, 0x01	; 1
    1306:	8c 81       	ldd	r24, Y+4	; 0x04
    1308:	8c 33       	cpi	r24, 0x3C	; 60
    130a:	08 f0       	brcs	.+2      	; 0x130e <RTCInit+0xfe>
    130c:	11 e0       	ldi	r17, 0x01	; 1
    130e:	8d 81       	ldd	r24, Y+5	; 0x05
    1310:	81 50       	subi	r24, 0x01	; 1
    1312:	87 30       	cpi	r24, 0x07	; 7
    1314:	08 f0       	brcs	.+2      	; 0x1318 <RTCInit+0x108>
    1316:	11 e0       	ldi	r17, 0x01	; 1
    1318:	2f 81       	ldd	r18, Y+7	; 0x07
    131a:	8f ef       	ldi	r24, 0xFF	; 255
    131c:	82 0f       	add	r24, r18
    131e:	8c 30       	cpi	r24, 0x0C	; 12
    1320:	18 f5       	brcc	.+70     	; 0x1368 <RTCInit+0x158>
    1322:	0e 81       	ldd	r16, Y+6	; 0x06
    1324:	00 23       	and	r16, r16
    1326:	11 f1       	breq	.+68     	; 0x136c <RTCInit+0x15c>
    1328:	82 2f       	mov	r24, r18
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	01 97       	sbiw	r24, 0x01	; 1
    132e:	09 2e       	mov	r0, r25
    1330:	00 0c       	add	r0, r0
    1332:	aa 0b       	sbc	r26, r26
    1334:	8a 52       	subi	r24, 0x2A	; 42
    1336:	9e 4f       	sbci	r25, 0xFE	; 254
    1338:	af 4f       	sbci	r26, 0xFF	; 255
    133a:	fc 01       	movw	r30, r24
    133c:	f4 90       	lpm	r15, Z
    133e:	a7 fd       	sbrc	r26, 7
    1340:	f0 80       	ld	r15, Z
    1342:	22 30       	cpi	r18, 0x02	; 2
    1344:	71 f4       	brne	.+28     	; 0x1362 <RTCInit+0x152>
    1346:	88 85       	ldd	r24, Y+8	; 0x08
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	84 31       	cpi	r24, 0x14	; 20
    134c:	91 05       	cpc	r25, r1
    134e:	18 f4       	brcc	.+6      	; 0x1356 <RTCInit+0x146>
    1350:	8c 5c       	subi	r24, 0xCC	; 204
    1352:	97 4f       	sbci	r25, 0xF7	; 247
    1354:	02 c0       	rjmp	.+4      	; 0x135a <RTCInit+0x14a>
    1356:	80 53       	subi	r24, 0x30	; 48
    1358:	98 4f       	sbci	r25, 0xF8	; 248
    135a:	0e 94 18 21 	call	0x4230	; 0x4230 <IsLeapYear>
    135e:	81 11       	cpse	r24, r1
    1360:	f3 94       	inc	r15
    1362:	f0 16       	cp	r15, r16
    1364:	28 f0       	brcs	.+10     	; 0x1370 <RTCInit+0x160>
    1366:	05 c0       	rjmp	.+10     	; 0x1372 <RTCInit+0x162>
    1368:	11 e0       	ldi	r17, 0x01	; 1
    136a:	03 c0       	rjmp	.+6      	; 0x1372 <RTCInit+0x162>
    136c:	11 e0       	ldi	r17, 0x01	; 1
    136e:	01 c0       	rjmp	.+2      	; 0x1372 <RTCInit+0x162>
    1370:	11 e0       	ldi	r17, 0x01	; 1
    1372:	11 23       	and	r17, r17
    1374:	b9 f0       	breq	.+46     	; 0x13a4 <RTCInit+0x194>
    1376:	1a 82       	std	Y+2, r1	; 0x02
    1378:	1b 82       	std	Y+3, r1	; 0x03
    137a:	1c 82       	std	Y+4, r1	; 0x04
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	8e 83       	std	Y+6, r24	; 0x06
    1380:	8f 83       	std	Y+7, r24	; 0x07
    1382:	88 e1       	ldi	r24, 0x18	; 24
    1384:	88 87       	std	Y+8, r24	; 0x08
    1386:	ce 01       	movw	r24, r28
    1388:	02 96       	adiw	r24, 0x02	; 2
    138a:	0e 94 6f 12 	call	0x24de	; 0x24de <RTCWriteHW>
    138e:	18 2f       	mov	r17, r24
    1390:	88 23       	and	r24, r24
    1392:	09 f4       	brne	.+2      	; 0x1396 <RTCInit+0x186>
    1394:	41 c0       	rjmp	.+130    	; 0x1418 <RTCInit+0x208>
    1396:	ce 01       	movw	r24, r28
    1398:	02 96       	adiw	r24, 0x02	; 2
    139a:	0e 94 69 13 	call	0x26d2	; 0x26d2 <RTCReadHW>
    139e:	18 2f       	mov	r17, r24
    13a0:	88 23       	and	r24, r24
    13a2:	d1 f1       	breq	.+116    	; 0x1418 <RTCInit+0x208>
    13a4:	be 01       	movw	r22, r28
    13a6:	67 5f       	subi	r22, 0xF7	; 247
    13a8:	7f 4f       	sbci	r23, 0xFF	; 255
    13aa:	ce 01       	movw	r24, r28
    13ac:	02 96       	adiw	r24, 0x02	; 2
    13ae:	0e 94 d2 1b 	call	0x37a4	; 0x37a4 <HWToStructTM>
    13b2:	ce 01       	movw	r24, r28
    13b4:	09 96       	adiw	r24, 0x09	; 9
    13b6:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <mktime>
    13ba:	8b 01       	movw	r16, r22
    13bc:	9c 01       	movw	r18, r24
    13be:	f8 94       	cli
    13c0:	00 93 41 07 	sts	0x0741, r16	; 0x800741 <sg_u64Time>
    13c4:	10 93 42 07 	sts	0x0742, r17	; 0x800742 <sg_u64Time+0x1>
    13c8:	20 93 43 07 	sts	0x0743, r18	; 0x800743 <sg_u64Time+0x2>
    13cc:	30 93 44 07 	sts	0x0744, r19	; 0x800744 <sg_u64Time+0x3>
    13d0:	10 92 45 07 	sts	0x0745, r1	; 0x800745 <sg_u64Time+0x4>
    13d4:	10 92 46 07 	sts	0x0746, r1	; 0x800746 <sg_u64Time+0x5>
    13d8:	10 92 47 07 	sts	0x0747, r1	; 0x800747 <sg_u64Time+0x6>
    13dc:	10 92 48 07 	sts	0x0748, r1	; 0x800748 <sg_u64Time+0x7>
    13e0:	78 94       	sei
    13e2:	87 b1       	in	r24, 0x07	; 7
    13e4:	8e 7f       	andi	r24, 0xFE	; 254
    13e6:	87 b9       	out	0x07, r24	; 7
    13e8:	88 b1       	in	r24, 0x08	; 8
    13ea:	81 60       	ori	r24, 0x01	; 1
    13ec:	88 b9       	out	0x08, r24	; 8
    13ee:	41 e0       	ldi	r20, 0x01	; 1
    13f0:	be 01       	movw	r22, r28
    13f2:	6f 5f       	subi	r22, 0xFF	; 255
    13f4:	7f 4f       	sbci	r23, 0xFF	; 255
    13f6:	87 e0       	ldi	r24, 0x07	; 7
    13f8:	0e 94 93 1b 	call	0x3726	; 0x3726 <RTCReadRegisters>
    13fc:	18 2f       	mov	r17, r24
    13fe:	88 23       	and	r24, r24
    1400:	59 f0       	breq	.+22     	; 0x1418 <RTCInit+0x208>
    1402:	89 81       	ldd	r24, Y+1	; 0x01
    1404:	80 64       	ori	r24, 0x40	; 64
    1406:	89 83       	std	Y+1, r24	; 0x01
    1408:	41 e0       	ldi	r20, 0x01	; 1
    140a:	be 01       	movw	r22, r28
    140c:	6f 5f       	subi	r22, 0xFF	; 255
    140e:	7f 4f       	sbci	r23, 0xFF	; 255
    1410:	87 e0       	ldi	r24, 0x07	; 7
    1412:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <RTCWriteRegisters>
    1416:	18 2f       	mov	r17, r24
    1418:	81 2f       	mov	r24, r17
    141a:	a1 96       	adiw	r28, 0x21	; 33
    141c:	0f b6       	in	r0, 0x3f	; 63
    141e:	f8 94       	cli
    1420:	de bf       	out	0x3e, r29	; 62
    1422:	0f be       	out	0x3f, r0	; 63
    1424:	cd bf       	out	0x3d, r28	; 61
    1426:	df 91       	pop	r29
    1428:	cf 91       	pop	r28
    142a:	1f 91       	pop	r17
    142c:	0f 91       	pop	r16
    142e:	ff 90       	pop	r15
    1430:	08 95       	ret

Disassembly of section .text.SDSetCS:

00004a14 <SDSetCS>:
static uint8_t sg_u8CSD[16];

// This will provide a !CS assertion or deassertion with pre/postamble clock
static void SDSetCS(bool bAsserted)
{
	if (bAsserted)
    4a14:	88 23       	and	r24, r24
    4a16:	21 f0       	breq	.+8      	; 0x4a20 <SDSetCS+0xc>
	{
		SD_CS_ASSERT();
    4a18:	88 b1       	in	r24, 0x08	; 8
    4a1a:	8f 7b       	andi	r24, 0xBF	; 191
    4a1c:	88 b9       	out	0x08, r24	; 8
    4a1e:	08 95       	ret
	}
	else
	{
		SD_CS_DEASSERT();
    4a20:	88 b1       	in	r24, 0x08	; 8
    4a22:	80 64       	ori	r24, 0x40	; 64
    4a24:	88 b9       	out	0x08, r24	; 8
    4a26:	08 95       	ret

Disassembly of section .text.SDPowerup:

00004150 <SDPowerup>:

// Sends SD powerup sequence to card and attempts to initialize it
static void SDPowerup(void)
{
	// Set SPI baud rate to (SD_SPEED_SLOW, which is the max for the init sequence)
	(void) SPISetBaudRate(SD_SPEED_SLOW);
    4150:	60 e8       	ldi	r22, 0x80	; 128
    4152:	7a e1       	ldi	r23, 0x1A	; 26
    4154:	86 e0       	ldi	r24, 0x06	; 6
    4156:	90 e0       	ldi	r25, 0x00	; 0
    4158:	0e 94 91 15 	call	0x2b22	; 0x2b22 <SPISetBaudRate>
	
	// Deassert chip select
	SD_CS_DEASSERT();
    415c:	88 b1       	in	r24, 0x08	; 8
    415e:	80 64       	ori	r24, 0x40	; 64
    4160:	88 b9       	out	0x08, r24	; 8
	
	// Delay time after possible deassertion (2ms)
	Delay(2000);
    4162:	60 ed       	ldi	r22, 0xD0	; 208
    4164:	77 e0       	ldi	r23, 0x07	; 7
    4166:	80 e0       	ldi	r24, 0x00	; 0
    4168:	90 e0       	ldi	r25, 0x00	; 0
    416a:	0e 94 42 1f 	call	0x3e84	; 0x3e84 <Delay>
	
	// Send 74/80 bits of 0xff as a reset (80 bits required since we're byte-
	// sized transactions)
	SPIWritePattern(0xff,
    416e:	40 e1       	ldi	r20, 0x10	; 16
    4170:	50 e0       	ldi	r21, 0x00	; 0
    4172:	6f ef       	ldi	r22, 0xFF	; 255
    4174:	70 e0       	ldi	r23, 0x00	; 0
    4176:	82 e0       	ldi	r24, 0x02	; 2
    4178:	0e 94 6b 1e 	call	0x3cd6	; 0x3cd6 <SPITransaction>
				    128/8);

	// Delay time after write
	Delay(2000);
    417c:	60 ed       	ldi	r22, 0xD0	; 208
    417e:	77 e0       	ldi	r23, 0x07	; 7
    4180:	80 e0       	ldi	r24, 0x00	; 0
    4182:	90 e0       	ldi	r25, 0x00	; 0
    4184:	0e 94 42 1f 	call	0x3e84	; 0x3e84 <Delay>
    4188:	08 95       	ret

Disassembly of section .text.SDCommand:

00003062 <SDCommand>:
#define CMD8_CRC    0x87

// Sends a command to the SD card, including argument an CRC
static uint8_t SDCommand(uint8_t u8Cmd,
						 uint32_t u32Arg)
{
    3062:	df 92       	push	r13
    3064:	ef 92       	push	r14
    3066:	ff 92       	push	r15
    3068:	0f 93       	push	r16
    306a:	1f 93       	push	r17
    306c:	cf 93       	push	r28
    306e:	df 93       	push	r29
    3070:	cd b7       	in	r28, 0x3d	; 61
    3072:	de b7       	in	r29, 0x3e	; 62
    3074:	27 97       	sbiw	r28, 0x07	; 7
    3076:	0f b6       	in	r0, 0x3f	; 63
    3078:	f8 94       	cli
    307a:	de bf       	out	0x3e, r29	; 62
    307c:	0f be       	out	0x3f, r0	; 63
    307e:	cd bf       	out	0x3d, r28	; 61
    3080:	18 2f       	mov	r17, r24
    3082:	04 2f       	mov	r16, r20
    3084:	f5 2e       	mov	r15, r21
    3086:	e6 2e       	mov	r14, r22
    3088:	d7 2e       	mov	r13, r23
	uint8_t u8Buffer[sizeof(u8Cmd) + sizeof(u32Arg) + sizeof(u8CRC)];
	uint8_t u8Response;
	uint8_t u8Count;
	
	// If this is an ACMD, prefix a CMD55
	if (u8Cmd & 0x80)
    308a:	88 23       	and	r24, r24
    308c:	4c f4       	brge	.+18     	; 0x30a0 <SDCommand+0x3e>
	{
		u8Response = SDCommand(CMD55,
    308e:	40 e0       	ldi	r20, 0x00	; 0
    3090:	50 e0       	ldi	r21, 0x00	; 0
    3092:	ba 01       	movw	r22, r20
    3094:	87 e3       	ldi	r24, 0x37	; 55
    3096:	0e 94 31 18 	call	0x3062	; 0x3062 <SDCommand>
    309a:	8f 83       	std	Y+7, r24	; 0x07
							   CMD55_ARG);
							   
		if (u8Response > 1)
    309c:	82 30       	cpi	r24, 0x02	; 2
    309e:	40 f5       	brcc	.+80     	; 0x30f0 <SDCommand+0x8e>
			return(u8Response);
		}
	}
	
	// SD Command (OR in 0x40 so bit 47 is always a 1
	u8Buffer[0] = (u8Cmd & 0x7f) | 0x40;
    30a0:	81 2f       	mov	r24, r17
    30a2:	8f 73       	andi	r24, 0x3F	; 63
    30a4:	80 64       	ori	r24, 0x40	; 64
    30a6:	89 83       	std	Y+1, r24	; 0x01
	
	// 32 Bits of argument
	u8Buffer[1] = (uint8_t) (u32Arg >> 24);
    30a8:	da 82       	std	Y+2, r13	; 0x02
	u8Buffer[2] = (uint8_t) (u32Arg >> 16);
    30aa:	eb 82       	std	Y+3, r14	; 0x03
	u8Buffer[3] = (uint8_t) (u32Arg >> 8);
    30ac:	fc 82       	std	Y+4, r15	; 0x04
	u8Buffer[4] = (uint8_t) (u32Arg >> 0);
    30ae:	0d 83       	std	Y+5, r16	; 0x05
	
	// Valid CRCs for specific commands
	u8CRC = 0;
	if (CMD0 == u8Cmd)
    30b0:	11 23       	and	r17, r17
    30b2:	11 f0       	breq	.+4      	; 0x30b8 <SDCommand+0x56>
	u8Buffer[2] = (uint8_t) (u32Arg >> 16);
	u8Buffer[3] = (uint8_t) (u32Arg >> 8);
	u8Buffer[4] = (uint8_t) (u32Arg >> 0);
	
	// Valid CRCs for specific commands
	u8CRC = 0;
    30b4:	80 e0       	ldi	r24, 0x00	; 0
    30b6:	01 c0       	rjmp	.+2      	; 0x30ba <SDCommand+0x58>
	if (CMD0 == u8Cmd)
	{
		u8CRC = 0x95;
    30b8:	85 e9       	ldi	r24, 0x95	; 149
	}
	
	if (CMD8 == u8Cmd)
    30ba:	18 30       	cpi	r17, 0x08	; 8
    30bc:	09 f4       	brne	.+2      	; 0x30c0 <SDCommand+0x5e>
	{
		u8CRC = 0x87;
    30be:	87 e8       	ldi	r24, 0x87	; 135
	}
	
	// Now the CRC - Bit 0 means "ignore CRC"
	u8Buffer[5] = (uint8_t) (u8CRC | 0x01);
    30c0:	81 60       	ori	r24, 0x01	; 1
    30c2:	8e 83       	std	Y+6, r24	; 0x06
	
	// Send all bytes to the SD card
	SPIWrite(u8Buffer,
    30c4:	46 e0       	ldi	r20, 0x06	; 6
    30c6:	50 e0       	ldi	r21, 0x00	; 0
    30c8:	be 01       	movw	r22, r28
    30ca:	6f 5f       	subi	r22, 0xFF	; 255
    30cc:	7f 4f       	sbci	r23, 0xFF	; 255
    30ce:	81 e0       	ldi	r24, 0x01	; 1
    30d0:	0e 94 6b 1e 	call	0x3cd6	; 0x3cd6 <SPITransaction>
			 sizeof(u8Buffer));
			 
	u8Count = 10;
    30d4:	1a e0       	ldi	r17, 0x0A	; 10
	
	do 
	{
		SPIRead(&u8Response,
    30d6:	41 e0       	ldi	r20, 0x01	; 1
    30d8:	50 e0       	ldi	r21, 0x00	; 0
    30da:	be 01       	movw	r22, r28
    30dc:	69 5f       	subi	r22, 0xF9	; 249
    30de:	7f 4f       	sbci	r23, 0xFF	; 255
    30e0:	83 e0       	ldi	r24, 0x03	; 3
    30e2:	0e 94 6b 1e 	call	0x3cd6	; 0x3cd6 <SPITransaction>
				sizeof(u8Response));
	} while ((u8Response & 0x80) && --u8Count);
    30e6:	8f 81       	ldd	r24, Y+7	; 0x07
    30e8:	88 23       	and	r24, r24
    30ea:	14 f4       	brge	.+4      	; 0x30f0 <SDCommand+0x8e>
    30ec:	11 50       	subi	r17, 0x01	; 1
    30ee:	99 f7       	brne	.-26     	; 0x30d6 <SDCommand+0x74>
	
	return(u8Response);
}
    30f0:	27 96       	adiw	r28, 0x07	; 7
    30f2:	0f b6       	in	r0, 0x3f	; 63
    30f4:	f8 94       	cli
    30f6:	de bf       	out	0x3e, r29	; 62
    30f8:	0f be       	out	0x3f, r0	; 63
    30fa:	cd bf       	out	0x3d, r28	; 61
    30fc:	df 91       	pop	r29
    30fe:	cf 91       	pop	r28
    3100:	1f 91       	pop	r17
    3102:	0f 91       	pop	r16
    3104:	ff 90       	pop	r15
    3106:	ef 90       	pop	r14
    3108:	df 90       	pop	r13
    310a:	08 95       	ret

Disassembly of section .text.SDGoIdle:

000048aa <SDGoIdle>:
			sizeof(uint32_t));
}

// SD - Go idle!
static uint8_t SDGoIdle(uint8_t *pu8Response)
{
    48aa:	cf 93       	push	r28
	uint8_t u8Response;
	
	SDSetCS(true);
    48ac:	81 e0       	ldi	r24, 0x01	; 1
    48ae:	0e 94 0a 25 	call	0x4a14	; 0x4a14 <SDSetCS>
	
	// Send our CMD0 (go idle)
	u8Response = SDCommand(CMD0,
    48b2:	40 e0       	ldi	r20, 0x00	; 0
    48b4:	50 e0       	ldi	r21, 0x00	; 0
    48b6:	ba 01       	movw	r22, r20
    48b8:	80 e0       	ldi	r24, 0x00	; 0
    48ba:	0e 94 31 18 	call	0x3062	; 0x3062 <SDCommand>
    48be:	c8 2f       	mov	r28, r24
						   CMD0_ARG);
						   
	SDSetCS(false);
    48c0:	80 e0       	ldi	r24, 0x00	; 0
    48c2:	0e 94 0a 25 	call	0x4a14	; 0x4a14 <SDSetCS>

	return(u8Response);
}
    48c6:	8c 2f       	mov	r24, r28
    48c8:	cf 91       	pop	r28
    48ca:	08 95       	ret

Disassembly of section .text.SDSendOpCondition:

00004264 <SDSendOpCondition>:
#define ACMD41_CRC  0x00

// Send operation condition
static uint8_t SDSendOpCondition(uint8_t *pu8Response,
								 uint32_t u32Arg)
{
    4264:	cf 92       	push	r12
    4266:	df 92       	push	r13
    4268:	ef 92       	push	r14
    426a:	ff 92       	push	r15
    426c:	cf 93       	push	r28
    426e:	6a 01       	movw	r12, r20
    4270:	7b 01       	movw	r14, r22
	uint8_t u8Response;
	
	// Assert chip select
	SDSetCS(true);
    4272:	81 e0       	ldi	r24, 0x01	; 1
    4274:	0e 94 0a 25 	call	0x4a14	; 0x4a14 <SDSetCS>
	
	// Send the app command
	u8Response = SDCommand(ACMD41,
    4278:	b7 01       	movw	r22, r14
    427a:	a6 01       	movw	r20, r12
    427c:	89 ea       	ldi	r24, 0xA9	; 169
    427e:	0e 94 31 18 	call	0x3062	; 0x3062 <SDCommand>
    4282:	c8 2f       	mov	r28, r24
						   u32Arg);
	// Deassert chip select
	SDSetCS(false);
    4284:	80 e0       	ldi	r24, 0x00	; 0
    4286:	0e 94 0a 25 	call	0x4a14	; 0x4a14 <SDSetCS>
	
	return(u8Response);
}
    428a:	8c 2f       	mov	r24, r28
    428c:	cf 91       	pop	r28
    428e:	ff 90       	pop	r15
    4290:	ef 90       	pop	r14
    4292:	df 90       	pop	r13
    4294:	cf 90       	pop	r12
    4296:	08 95       	ret

Disassembly of section .text.SDSendOpConditionArg:

00003d2e <SDSendOpConditionArg>:
	return(u8Response);
}

static uint8_t SDSendOpConditionArg(uint8_t *pu8Resp,
									uint32_t u32Arg)
{
    3d2e:	cf 92       	push	r12
    3d30:	df 92       	push	r13
    3d32:	ef 92       	push	r14
    3d34:	ff 92       	push	r15
    3d36:	0f 93       	push	r16
    3d38:	1f 93       	push	r17
    3d3a:	cf 93       	push	r28
    3d3c:	df 93       	push	r29
    3d3e:	8c 01       	movw	r16, r24
    3d40:	6a 01       	movw	r12, r20
    3d42:	7b 01       	movw	r14, r22
	uint8_t u8Attempts;
	uint8_t u8Response;
	
	u8Attempts = 0;
    3d44:	c0 e0       	ldi	r28, 0x00	; 0
		
	// Loop until it comes alive - if it comes alive. Put the card in idle state.
	while (u8Attempts < SD_GO_IDLE_RETRIES)
    3d46:	0f c0       	rjmp	.+30     	; 0x3d66 <SDSendOpConditionArg+0x38>
	{
		u8Response = SDSendOpCondition(pu8Resp,
    3d48:	b7 01       	movw	r22, r14
    3d4a:	a6 01       	movw	r20, r12
    3d4c:	c8 01       	movw	r24, r16
    3d4e:	0e 94 32 21 	call	0x4264	; 0x4264 <SDSendOpCondition>
    3d52:	d8 2f       	mov	r29, r24
									   u32Arg);
		if (0 == u8Response)
    3d54:	88 23       	and	r24, r24
    3d56:	49 f0       	breq	.+18     	; 0x3d6a <SDSendOpConditionArg+0x3c>
		{
			break;
		}
			
		// Give it a little time to settle
		Delay(10000);
    3d58:	60 e1       	ldi	r22, 0x10	; 16
    3d5a:	77 e2       	ldi	r23, 0x27	; 39
    3d5c:	80 e0       	ldi	r24, 0x00	; 0
    3d5e:	90 e0       	ldi	r25, 0x00	; 0
    3d60:	0e 94 42 1f 	call	0x3e84	; 0x3e84 <Delay>
		u8Attempts++;
    3d64:	cf 5f       	subi	r28, 0xFF	; 255
	uint8_t u8Response;
	
	u8Attempts = 0;
		
	// Loop until it comes alive - if it comes alive. Put the card in idle state.
	while (u8Attempts < SD_GO_IDLE_RETRIES)
    3d66:	c4 36       	cpi	r28, 0x64	; 100
    3d68:	78 f3       	brcs	.-34     	; 0x3d48 <SDSendOpConditionArg+0x1a>
		Delay(10000);
		u8Attempts++;
	}

	// If we've retried too much, bail out. We're done.
	if (SD_GO_IDLE_RETRIES == u8Attempts)
    3d6a:	c4 36       	cpi	r28, 0x64	; 100
    3d6c:	09 f4       	brne	.+2      	; 0x3d70 <SDSendOpConditionArg+0x42>
	{
		u8Response = 0x80;
    3d6e:	d0 e8       	ldi	r29, 0x80	; 128
	}
	
	return(u8Response);
}
    3d70:	8d 2f       	mov	r24, r29
    3d72:	df 91       	pop	r29
    3d74:	cf 91       	pop	r28
    3d76:	1f 91       	pop	r17
    3d78:	0f 91       	pop	r16
    3d7a:	ff 90       	pop	r15
    3d7c:	ef 90       	pop	r14
    3d7e:	df 90       	pop	r13
    3d80:	cf 90       	pop	r12
    3d82:	08 95       	ret

Disassembly of section .text.SDWaitResponse7:

00004ae2 <SDWaitResponse7>:

// This will return true if a response 7 was received, otherwise false
static void SDWaitResponse7(uint8_t *pu8ResponseByte)
{
	// Go read the remaining 4 bytes
	SPIRead(pu8ResponseByte,
    4ae2:	44 e0       	ldi	r20, 0x04	; 4
    4ae4:	50 e0       	ldi	r21, 0x00	; 0
    4ae6:	bc 01       	movw	r22, r24
    4ae8:	83 e0       	ldi	r24, 0x03	; 3
    4aea:	0e 94 6b 1e 	call	0x3cd6	; 0x3cd6 <SPITransaction>
    4aee:	08 95       	ret

Disassembly of section .text.SDSendInterfaceCondition:

00004298 <SDSendInterfaceCondition>:
	return(u8Response);
}

// Send interface condition
static uint8_t SDSendInterfaceCondition(uint8_t *pu8Response)
{
    4298:	0f 93       	push	r16
    429a:	1f 93       	push	r17
    429c:	cf 93       	push	r28
    429e:	8c 01       	movw	r16, r24
	uint8_t u8Response;
	
	SDSetCS(true);
    42a0:	81 e0       	ldi	r24, 0x01	; 1
    42a2:	0e 94 0a 25 	call	0x4a14	; 0x4a14 <SDSetCS>
	
	// Send our CMD8 Send interface condition
	u8Response = SDCommand(CMD8,
    42a6:	4a ea       	ldi	r20, 0xAA	; 170
    42a8:	51 e0       	ldi	r21, 0x01	; 1
    42aa:	60 e0       	ldi	r22, 0x00	; 0
    42ac:	70 e0       	ldi	r23, 0x00	; 0
    42ae:	88 e0       	ldi	r24, 0x08	; 8
    42b0:	0e 94 31 18 	call	0x3062	; 0x3062 <SDCommand>
    42b4:	c8 2f       	mov	r28, r24
						   CMD8_ARG);
						   
	SDWaitResponse7(pu8Response);
    42b6:	c8 01       	movw	r24, r16
    42b8:	0e 94 71 25 	call	0x4ae2	; 0x4ae2 <SDWaitResponse7>
		
	SDSetCS(false);
    42bc:	80 e0       	ldi	r24, 0x00	; 0
    42be:	0e 94 0a 25 	call	0x4a14	; 0x4a14 <SDSetCS>

	return(u8Response);
}
    42c2:	8c 2f       	mov	r24, r28
    42c4:	cf 91       	pop	r28
    42c6:	1f 91       	pop	r17
    42c8:	0f 91       	pop	r16
    42ca:	08 95       	ret

Disassembly of section .text.SDReadOCR:

000042cc <SDReadOCR>:
#define CMD58_ARG   0x00000000
#define CMD58_CRC   0x00

// Go read the OCR
static uint8_t SDReadOCR(uint8_t *pu8Response)
{
    42cc:	0f 93       	push	r16
    42ce:	1f 93       	push	r17
    42d0:	cf 93       	push	r28
    42d2:	8c 01       	movw	r16, r24
	uint8_t u8Response;
	
	// Assert chip select
	SDSetCS(true);
    42d4:	81 e0       	ldi	r24, 0x01	; 1
    42d6:	0e 94 0a 25 	call	0x4a14	; 0x4a14 <SDSetCS>
	
	// Send the app command
	u8Response = SDCommand(CMD58,
    42da:	40 e0       	ldi	r20, 0x00	; 0
    42dc:	50 e0       	ldi	r21, 0x00	; 0
    42de:	ba 01       	movw	r22, r20
    42e0:	8a e3       	ldi	r24, 0x3A	; 58
    42e2:	0e 94 31 18 	call	0x3062	; 0x3062 <SDCommand>
    42e6:	c8 2f       	mov	r28, r24
						   CMD58_ARG);

	// Read response
	SDWaitResponse7(pu8Response);
    42e8:	c8 01       	movw	r24, r16
    42ea:	0e 94 71 25 	call	0x4ae2	; 0x4ae2 <SDWaitResponse7>

	// Deassert chip select
	SDSetCS(false);
    42ee:	80 e0       	ldi	r24, 0x00	; 0
    42f0:	0e 94 0a 25 	call	0x4a14	; 0x4a14 <SDSetCS>
	
	return(u8Response);
}
    42f4:	8c 2f       	mov	r24, r28
    42f6:	cf 91       	pop	r28
    42f8:	1f 91       	pop	r17
    42fa:	0f 91       	pop	r16
    42fc:	08 95       	ret

Disassembly of section .text.SDReadCSD:

00003820 <SDReadCSD>:
#define CMD9_ARG    0x000000000
#define CMD9_CRC    0x00

// Read CSD (card specific data) - CSD is 128 bits - see the SD spec for details.
static uint8_t SDReadCSD(uint8_t *pu8CSD)
{
    3820:	ef 92       	push	r14
    3822:	ff 92       	push	r15
    3824:	0f 93       	push	r16
    3826:	1f 93       	push	r17
    3828:	cf 93       	push	r28
    382a:	df 93       	push	r29
    382c:	0f 92       	push	r0
    382e:	cd b7       	in	r28, 0x3d	; 61
    3830:	de b7       	in	r29, 0x3e	; 62
    3832:	7c 01       	movw	r14, r24
	uint8_t u8Response;
	uint8_t u8CmdResponse;
	uint8_t u8Count = 8;
	
	SDSetCS(true);
    3834:	81 e0       	ldi	r24, 0x01	; 1
    3836:	0e 94 0a 25 	call	0x4a14	; 0x4a14 <SDSetCS>
	
	// Send our CMD9 (read CSD)
	u8CmdResponse = SDCommand(CMD9,
    383a:	40 e0       	ldi	r20, 0x00	; 0
    383c:	50 e0       	ldi	r21, 0x00	; 0
    383e:	ba 01       	movw	r22, r20
    3840:	89 e0       	ldi	r24, 0x09	; 9
    3842:	0e 94 31 18 	call	0x3062	; 0x3062 <SDCommand>
    3846:	08 2f       	mov	r16, r24
							  CMD9_ARG);
	
	// Success! Let's get a response
	if (u8CmdResponse)
    3848:	81 11       	cpse	r24, r1
    384a:	1c c0       	rjmp	.+56     	; 0x3884 <SDReadCSD+0x64>
    384c:	18 e0       	ldi	r17, 0x08	; 8
    384e:	01 c0       	rjmp	.+2      	; 0x3852 <SDReadCSD+0x32>
	do 
	{
		SPIRead(&u8Response,
			    sizeof(u8Response));
	} while ((u8Response != SD_START_TOKEN) &&
			 (u8Count--));
    3850:	18 2f       	mov	r17, r24
	}
	
	// Wait until SD_START_TOKEN (start of data sector). We should easily see it in a few bytes.
	do 
	{
		SPIRead(&u8Response,
    3852:	41 e0       	ldi	r20, 0x01	; 1
    3854:	50 e0       	ldi	r21, 0x00	; 0
    3856:	be 01       	movw	r22, r28
    3858:	6f 5f       	subi	r22, 0xFF	; 255
    385a:	7f 4f       	sbci	r23, 0xFF	; 255
    385c:	83 e0       	ldi	r24, 0x03	; 3
    385e:	0e 94 6b 1e 	call	0x3cd6	; 0x3cd6 <SPITransaction>
			    sizeof(u8Response));
	} while ((u8Response != SD_START_TOKEN) &&
    3862:	89 81       	ldd	r24, Y+1	; 0x01
			 (u8Count--));
    3864:	8e 3f       	cpi	r24, 0xFE	; 254
    3866:	29 f0       	breq	.+10     	; 0x3872 <SDReadCSD+0x52>
    3868:	8f ef       	ldi	r24, 0xFF	; 255
    386a:	81 0f       	add	r24, r17
	// Wait until SD_START_TOKEN (start of data sector). We should easily see it in a few bytes.
	do 
	{
		SPIRead(&u8Response,
			    sizeof(u8Response));
	} while ((u8Response != SD_START_TOKEN) &&
    386c:	11 11       	cpse	r17, r1
    386e:	f0 cf       	rjmp	.-32     	; 0x3850 <SDReadCSD+0x30>
    3870:	01 c0       	rjmp	.+2      	; 0x3874 <SDReadCSD+0x54>
    3872:	81 2f       	mov	r24, r17
			 (u8Count--));
			 
	// If we haven't seen it in u8Count bytes, then error the call
	if (0 == u8Count)
    3874:	88 23       	and	r24, r24
    3876:	31 f0       	breq	.+12     	; 0x3884 <SDReadCSD+0x64>
	{
		goto errorExit;
	}
	
	// Go read the remaining 16 bytes
	SPIRead(pu8CSD,
    3878:	40 e1       	ldi	r20, 0x10	; 16
    387a:	50 e0       	ldi	r21, 0x00	; 0
    387c:	b7 01       	movw	r22, r14
    387e:	83 e0       	ldi	r24, 0x03	; 3
    3880:	0e 94 6b 1e 	call	0x3cd6	; 0x3cd6 <SPITransaction>
		    16);
	
errorExit:	
	SDSetCS(false);
    3884:	80 e0       	ldi	r24, 0x00	; 0
    3886:	0e 94 0a 25 	call	0x4a14	; 0x4a14 <SDSetCS>
	return(u8CmdResponse);
	
}
    388a:	80 2f       	mov	r24, r16
    388c:	0f 90       	pop	r0
    388e:	df 91       	pop	r29
    3890:	cf 91       	pop	r28
    3892:	1f 91       	pop	r17
    3894:	0f 91       	pop	r16
    3896:	ff 90       	pop	r15
    3898:	ef 90       	pop	r14
    389a:	08 95       	ret

Disassembly of section .text.SDReceiveDataBlock:

00003408 <SDReceiveDataBlock>:
}

// Receives a datablock during the data phase which may take some time
static bool SDReceiveDataBlock(uint8_t *pu8Buffer,
							   uint16_t u16RXCount)
{
    3408:	cf 92       	push	r12
    340a:	df 92       	push	r13
    340c:	ef 92       	push	r14
    340e:	ff 92       	push	r15
    3410:	0f 93       	push	r16
    3412:	1f 93       	push	r17
    3414:	cf 93       	push	r28
    3416:	df 93       	push	r29
    3418:	0f 92       	push	r0
    341a:	cd b7       	in	r28, 0x3d	; 61
    341c:	de b7       	in	r29, 0x3e	; 62
    341e:	7c 01       	movw	r14, r24
    3420:	6b 01       	movw	r12, r22
	uint8_t u8Response;
	uint16_t u16Count = 4096;
    3422:	00 e0       	ldi	r16, 0x00	; 0
    3424:	10 e1       	ldi	r17, 0x10	; 16
    3426:	01 c0       	rjmp	.+2      	; 0x342a <SDReceiveDataBlock+0x22>
	{
		SPIRead(&u8Response,
				sizeof(u8Response));
	} 
	while ((u8Response != SD_START_TOKEN) &&
		   (u16Count--));
    3428:	89 01       	movw	r16, r18
	uint16_t u16Count = 4096;
	
	// Wait for response token
	do 
	{
		SPIRead(&u8Response,
    342a:	41 e0       	ldi	r20, 0x01	; 1
    342c:	50 e0       	ldi	r21, 0x00	; 0
    342e:	be 01       	movw	r22, r28
    3430:	6f 5f       	subi	r22, 0xFF	; 255
    3432:	7f 4f       	sbci	r23, 0xFF	; 255
    3434:	83 e0       	ldi	r24, 0x03	; 3
    3436:	0e 94 6b 1e 	call	0x3cd6	; 0x3cd6 <SPITransaction>
				sizeof(u8Response));
	} 
	while ((u8Response != SD_START_TOKEN) &&
    343a:	89 81       	ldd	r24, Y+1	; 0x01
		   (u16Count--));
    343c:	8e 3f       	cpi	r24, 0xFE	; 254
    343e:	29 f0       	breq	.+10     	; 0x344a <SDReceiveDataBlock+0x42>
    3440:	98 01       	movw	r18, r16
    3442:	21 50       	subi	r18, 0x01	; 1
    3444:	31 09       	sbc	r19, r1
	do 
	{
		SPIRead(&u8Response,
				sizeof(u8Response));
	} 
	while ((u8Response != SD_START_TOKEN) &&
    3446:	01 2b       	or	r16, r17
    3448:	79 f7       	brne	.-34     	; 0x3428 <SDReceiveDataBlock+0x20>
		   (u16Count--));
		   
	if (u8Response != SD_START_TOKEN)
    344a:	8e 3f       	cpi	r24, 0xFE	; 254
    344c:	b9 f4       	brne	.+46     	; 0x347c <SDReceiveDataBlock+0x74>
	{
		return(false);
	}
	
	// Start of data. Pull it down.
	SPIRead(pu8Buffer,
    344e:	a6 01       	movw	r20, r12
    3450:	b7 01       	movw	r22, r14
    3452:	83 e0       	ldi	r24, 0x03	; 3
    3454:	0e 94 6b 1e 	call	0x3cd6	; 0x3cd6 <SPITransaction>
			u16RXCount);
			
	// Discard CRC
	SPIRead(&u8Response,
    3458:	41 e0       	ldi	r20, 0x01	; 1
    345a:	50 e0       	ldi	r21, 0x00	; 0
    345c:	be 01       	movw	r22, r28
    345e:	6f 5f       	subi	r22, 0xFF	; 255
    3460:	7f 4f       	sbci	r23, 0xFF	; 255
    3462:	83 e0       	ldi	r24, 0x03	; 3
    3464:	0e 94 6b 1e 	call	0x3cd6	; 0x3cd6 <SPITransaction>
			sizeof(u8Response));
	SPIRead(&u8Response,
    3468:	41 e0       	ldi	r20, 0x01	; 1
    346a:	50 e0       	ldi	r21, 0x00	; 0
    346c:	be 01       	movw	r22, r28
    346e:	6f 5f       	subi	r22, 0xFF	; 255
    3470:	7f 4f       	sbci	r23, 0xFF	; 255
    3472:	83 e0       	ldi	r24, 0x03	; 3
    3474:	0e 94 6b 1e 	call	0x3cd6	; 0x3cd6 <SPITransaction>
			sizeof(u8Response));
	return(true);			   
    3478:	81 e0       	ldi	r24, 0x01	; 1
    347a:	01 c0       	rjmp	.+2      	; 0x347e <SDReceiveDataBlock+0x76>
	while ((u8Response != SD_START_TOKEN) &&
		   (u16Count--));
		   
	if (u8Response != SD_START_TOKEN)
	{
		return(false);
    347c:	80 e0       	ldi	r24, 0x00	; 0
	SPIRead(&u8Response,
			sizeof(u8Response));
	SPIRead(&u8Response,
			sizeof(u8Response));
	return(true);			   
}
    347e:	0f 90       	pop	r0
    3480:	df 91       	pop	r29
    3482:	cf 91       	pop	r28
    3484:	1f 91       	pop	r17
    3486:	0f 91       	pop	r16
    3488:	ff 90       	pop	r15
    348a:	ef 90       	pop	r14
    348c:	df 90       	pop	r13
    348e:	cf 90       	pop	r12
    3490:	08 95       	ret

Disassembly of section .text.SDTransmitDataBlock:

00002d76 <SDTransmitDataBlock>:

// Transmits a datablock during the data phase which may take some time
static bool SDTransmitDataBlock(uint8_t *pu8Buffer,
							    uint16_t u16TXCount,
								uint8_t u8DataPhaseToken)
{
    2d76:	ef 92       	push	r14
    2d78:	ff 92       	push	r15
    2d7a:	0f 93       	push	r16
    2d7c:	1f 93       	push	r17
    2d7e:	cf 93       	push	r28
    2d80:	df 93       	push	r29
    2d82:	00 d0       	rcall	.+0      	; 0x2d84 <SDTransmitDataBlock+0xe>
    2d84:	cd b7       	in	r28, 0x3d	; 61
    2d86:	de b7       	in	r29, 0x3e	; 62
    2d88:	8c 01       	movw	r16, r24
    2d8a:	7b 01       	movw	r14, r22
    2d8c:	4a 83       	std	Y+2, r20	; 0x02
	uint8_t u8Response;
	uint16_t u16Attempts;
	bool bResult = true;

	// Send the data phase token (whatever it is)
	SPIWrite(&u8DataPhaseToken,
    2d8e:	41 e0       	ldi	r20, 0x01	; 1
    2d90:	50 e0       	ldi	r21, 0x00	; 0
    2d92:	be 01       	movw	r22, r28
    2d94:	6e 5f       	subi	r22, 0xFE	; 254
    2d96:	7f 4f       	sbci	r23, 0xFF	; 255
    2d98:	81 e0       	ldi	r24, 0x01	; 1
    2d9a:	0e 94 6b 1e 	call	0x3cd6	; 0x3cd6 <SPITransaction>
			 sizeof(u8DataPhaseToken));
	
	if (u8DataPhaseToken != SD_STOP_TRANSACTION)
    2d9e:	8a 81       	ldd	r24, Y+2	; 0x02
    2da0:	8d 3f       	cpi	r24, 0xFD	; 253
    2da2:	e1 f1       	breq	.+120    	; 0x2e1c <SDTransmitDataBlock+0xa6>
	{
		// As long as we're not stopping a transaction, we're writing data
		SPIWrite(pu8Buffer,
    2da4:	a7 01       	movw	r20, r14
    2da6:	b8 01       	movw	r22, r16
    2da8:	81 e0       	ldi	r24, 0x01	; 1
    2daa:	0e 94 6b 1e 	call	0x3cd6	; 0x3cd6 <SPITransaction>
				 u16TXCount);
				 
		// Wait for acceptance of the sector
		u16Attempts = 0;
    2dae:	00 e0       	ldi	r16, 0x00	; 0
    2db0:	10 e0       	ldi	r17, 0x00	; 0
		while (u16Attempts < SD_MAX_WRITE_ATTEMPTS)
    2db2:	0d c0       	rjmp	.+26     	; 0x2dce <SDTransmitDataBlock+0x58>
		{
			// Get some data
			SPIRead(&u8Response,
    2db4:	41 e0       	ldi	r20, 0x01	; 1
    2db6:	50 e0       	ldi	r21, 0x00	; 0
    2db8:	be 01       	movw	r22, r28
    2dba:	6f 5f       	subi	r22, 0xFF	; 255
    2dbc:	7f 4f       	sbci	r23, 0xFF	; 255
    2dbe:	83 e0       	ldi	r24, 0x03	; 3
    2dc0:	0e 94 6b 1e 	call	0x3cd6	; 0x3cd6 <SPITransaction>
					sizeof(u8Response));
			if (u8Response != 0xff)
    2dc4:	89 81       	ldd	r24, Y+1	; 0x01
    2dc6:	8f 3f       	cpi	r24, 0xFF	; 255
    2dc8:	31 f4       	brne	.+12     	; 0x2dd6 <SDTransmitDataBlock+0x60>
			{
				break;
			}
				
			++u16Attempts;
    2dca:	0f 5f       	subi	r16, 0xFF	; 255
    2dcc:	1f 4f       	sbci	r17, 0xFF	; 255
		SPIWrite(pu8Buffer,
				 u16TXCount);
				 
		// Wait for acceptance of the sector
		u16Attempts = 0;
		while (u16Attempts < SD_MAX_WRITE_ATTEMPTS)
    2dce:	0e 39       	cpi	r16, 0x9E	; 158
    2dd0:	88 e9       	ldi	r24, 0x98	; 152
    2dd2:	18 07       	cpc	r17, r24
    2dd4:	78 f3       	brcs	.-34     	; 0x2db4 <SDTransmitDataBlock+0x3e>
				
			++u16Attempts;
		}
			
		// We've timed out or else the card is dead
		if (SD_MAX_WRITE_ATTEMPTS == u16Attempts)
    2dd6:	0e 39       	cpi	r16, 0x9E	; 158
    2dd8:	18 49       	sbci	r17, 0x98	; 152
    2dda:	11 f1       	breq	.+68     	; 0x2e20 <SDTransmitDataBlock+0xaa>
			bResult = false;
			goto errorExit;
		}
			
		// See if the data was accepted
		u8Response &= 0x1f;
    2ddc:	89 81       	ldd	r24, Y+1	; 0x01
    2dde:	8f 71       	andi	r24, 0x1F	; 31
    2de0:	89 83       	std	Y+1, r24	; 0x01
		if (0x05 == u8Response)
    2de2:	85 30       	cpi	r24, 0x05	; 5
    2de4:	81 f0       	breq	.+32     	; 0x2e06 <SDTransmitDataBlock+0x90>
			// Success!
		}
		else
		{
			// Sector not accepted
			bResult = false;
    2de6:	80 e0       	ldi	r24, 0x00	; 0
    2de8:	1e c0       	rjmp	.+60     	; 0x2e26 <SDTransmitDataBlock+0xb0>
			// Wait for the write to finish
			u16Attempts = 0;
			while (u16Attempts < SD_MAX_WRITE_ATTEMPTS)
			{
				// Wait for the card to accept writing the sector
				SPIRead(&u8Response,
    2dea:	41 e0       	ldi	r20, 0x01	; 1
    2dec:	50 e0       	ldi	r21, 0x00	; 0
    2dee:	be 01       	movw	r22, r28
    2df0:	6f 5f       	subi	r22, 0xFF	; 255
    2df2:	7f 4f       	sbci	r23, 0xFF	; 255
    2df4:	83 e0       	ldi	r24, 0x03	; 3
    2df6:	0e 94 6b 1e 	call	0x3cd6	; 0x3cd6 <SPITransaction>
						sizeof(u8Response));
				if (u8Response)
    2dfa:	89 81       	ldd	r24, Y+1	; 0x01
    2dfc:	81 11       	cpse	r24, r1
    2dfe:	09 c0       	rjmp	.+18     	; 0x2e12 <SDTransmitDataBlock+0x9c>
				{
					break;
				}
					
				++u16Attempts;
    2e00:	0f 5f       	subi	r16, 0xFF	; 255
    2e02:	1f 4f       	sbci	r17, 0xFF	; 255
    2e04:	02 c0       	rjmp	.+4      	; 0x2e0a <SDTransmitDataBlock+0x94>
    2e06:	00 e0       	ldi	r16, 0x00	; 0
    2e08:	10 e0       	ldi	r17, 0x00	; 0
		u8Response &= 0x1f;
		if (0x05 == u8Response)
		{
			// Wait for the write to finish
			u16Attempts = 0;
			while (u16Attempts < SD_MAX_WRITE_ATTEMPTS)
    2e0a:	0e 39       	cpi	r16, 0x9E	; 158
    2e0c:	88 e9       	ldi	r24, 0x98	; 152
    2e0e:	18 07       	cpc	r17, r24
    2e10:	60 f3       	brcs	.-40     	; 0x2dea <SDTransmitDataBlock+0x74>
				}
					
				++u16Attempts;
			}
				
			if (SD_MAX_WRITE_ATTEMPTS == u16Attempts)
    2e12:	0e 39       	cpi	r16, 0x9E	; 158
    2e14:	18 49       	sbci	r17, 0x98	; 152
    2e16:	31 f0       	breq	.+12     	; 0x2e24 <SDTransmitDataBlock+0xae>
							    uint16_t u16TXCount,
								uint8_t u8DataPhaseToken)
{
	uint8_t u8Response;
	uint16_t u16Attempts;
	bool bResult = true;
    2e18:	81 e0       	ldi	r24, 0x01	; 1
    2e1a:	05 c0       	rjmp	.+10     	; 0x2e26 <SDTransmitDataBlock+0xb0>
    2e1c:	81 e0       	ldi	r24, 0x01	; 1
    2e1e:	03 c0       	rjmp	.+6      	; 0x2e26 <SDTransmitDataBlock+0xb0>
		}
			
		// We've timed out or else the card is dead
		if (SD_MAX_WRITE_ATTEMPTS == u16Attempts)
		{
			bResult = false;
    2e20:	80 e0       	ldi	r24, 0x00	; 0
    2e22:	01 c0       	rjmp	.+2      	; 0x2e26 <SDTransmitDataBlock+0xb0>
				++u16Attempts;
			}
				
			if (SD_MAX_WRITE_ATTEMPTS == u16Attempts)
			{
				bResult = false;
    2e24:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	
errorExit:
	return(bResult);
}
    2e26:	0f 90       	pop	r0
    2e28:	0f 90       	pop	r0
    2e2a:	df 91       	pop	r29
    2e2c:	cf 91       	pop	r28
    2e2e:	1f 91       	pop	r17
    2e30:	0f 91       	pop	r16
    2e32:	ff 90       	pop	r15
    2e34:	ef 90       	pop	r14
    2e36:	08 95       	ret

Disassembly of section .text.SDInit:

00001eec <SDInit>:

bool SDGetBlockSize(uint32_t *pu32BlockSize)
{
	*pu32BlockSize = sg_u16BlockSize;
	return(true);
}
    1eec:	1f 93       	push	r17
    1eee:	cf 93       	push	r28
    1ef0:	df 93       	push	r29
    1ef2:	00 d0       	rcall	.+0      	; 0x1ef4 <SDInit+0x8>
    1ef4:	00 d0       	rcall	.+0      	; 0x1ef6 <SDInit+0xa>
    1ef6:	0f 92       	push	r0
    1ef8:	cd b7       	in	r28, 0x3d	; 61
    1efa:	de b7       	in	r29, 0x3e	; 62
    1efc:	87 b1       	in	r24, 0x07	; 7
    1efe:	80 64       	ori	r24, 0x40	; 64
    1f00:	87 b9       	out	0x07, r24	; 7
    1f02:	88 b1       	in	r24, 0x08	; 8
    1f04:	80 64       	ori	r24, 0x40	; 64
    1f06:	88 b9       	out	0x08, r24	; 8
    1f08:	88 b1       	in	r24, 0x08	; 8
    1f0a:	80 64       	ori	r24, 0x40	; 64
    1f0c:	88 b9       	out	0x08, r24	; 8
    1f0e:	0e 94 22 22 	call	0x4444	; 0x4444 <SPIInit>
    1f12:	0e 94 a8 20 	call	0x4150	; 0x4150 <SDPowerup>
    1f16:	10 e0       	ldi	r17, 0x00	; 0
    1f18:	0d c0       	rjmp	.+26     	; 0x1f34 <SDInit+0x48>
    1f1a:	ce 01       	movw	r24, r28
    1f1c:	01 96       	adiw	r24, 0x01	; 1
    1f1e:	0e 94 55 24 	call	0x48aa	; 0x48aa <SDGoIdle>
    1f22:	81 30       	cpi	r24, 0x01	; 1
    1f24:	49 f0       	breq	.+18     	; 0x1f38 <SDInit+0x4c>
    1f26:	60 e1       	ldi	r22, 0x10	; 16
    1f28:	77 e2       	ldi	r23, 0x27	; 39
    1f2a:	80 e0       	ldi	r24, 0x00	; 0
    1f2c:	90 e0       	ldi	r25, 0x00	; 0
    1f2e:	0e 94 42 1f 	call	0x3e84	; 0x3e84 <Delay>
    1f32:	1f 5f       	subi	r17, 0xFF	; 255
    1f34:	14 36       	cpi	r17, 0x64	; 100
    1f36:	88 f3       	brcs	.-30     	; 0x1f1a <SDInit+0x2e>
    1f38:	14 36       	cpi	r17, 0x64	; 100
    1f3a:	09 f4       	brne	.+2      	; 0x1f3e <SDInit+0x52>
    1f3c:	76 c0       	rjmp	.+236    	; 0x202a <SDInit+0x13e>
    1f3e:	ce 01       	movw	r24, r28
    1f40:	01 96       	adiw	r24, 0x01	; 1
    1f42:	25 e0       	ldi	r18, 0x05	; 5
    1f44:	fc 01       	movw	r30, r24
    1f46:	11 92       	st	Z+, r1
    1f48:	2a 95       	dec	r18
    1f4a:	e9 f7       	brne	.-6      	; 0x1f46 <SDInit+0x5a>
    1f4c:	0e 94 4c 21 	call	0x4298	; 0x4298 <SDSendInterfaceCondition>
    1f50:	81 30       	cpi	r24, 0x01	; 1
    1f52:	09 f0       	breq	.+2      	; 0x1f56 <SDInit+0x6a>
    1f54:	5e c0       	rjmp	.+188    	; 0x2012 <SDInit+0x126>
    1f56:	8c 81       	ldd	r24, Y+4	; 0x04
    1f58:	8a 3a       	cpi	r24, 0xAA	; 170
    1f5a:	09 f0       	breq	.+2      	; 0x1f5e <SDInit+0x72>
    1f5c:	68 c0       	rjmp	.+208    	; 0x202e <SDInit+0x142>
    1f5e:	40 e0       	ldi	r20, 0x00	; 0
    1f60:	50 e0       	ldi	r21, 0x00	; 0
    1f62:	60 e0       	ldi	r22, 0x00	; 0
    1f64:	70 e4       	ldi	r23, 0x40	; 64
    1f66:	ce 01       	movw	r24, r28
    1f68:	01 96       	adiw	r24, 0x01	; 1
    1f6a:	0e 94 97 1e 	call	0x3d2e	; 0x3d2e <SDSendOpConditionArg>
    1f6e:	81 11       	cpse	r24, r1
    1f70:	60 c0       	rjmp	.+192    	; 0x2032 <SDInit+0x146>
    1f72:	ce 01       	movw	r24, r28
    1f74:	01 96       	adiw	r24, 0x01	; 1
    1f76:	0e 94 66 21 	call	0x42cc	; 0x42cc <SDReadOCR>
    1f7a:	88 23       	and	r24, r24
    1f7c:	0c f4       	brge	.+2      	; 0x1f80 <SDInit+0x94>
    1f7e:	5b c0       	rjmp	.+182    	; 0x2036 <SDInit+0x14a>
    1f80:	89 e2       	ldi	r24, 0x29	; 41
    1f82:	97 e0       	ldi	r25, 0x07	; 7
    1f84:	0e 94 10 1c 	call	0x3820	; 0x3820 <SDReadCSD>
    1f88:	88 23       	and	r24, r24
    1f8a:	0c f4       	brge	.+2      	; 0x1f8e <SDInit+0xa2>
    1f8c:	56 c0       	rjmp	.+172    	; 0x203a <SDInit+0x14e>
    1f8e:	e9 e2       	ldi	r30, 0x29	; 41
    1f90:	f7 e0       	ldi	r31, 0x07	; 7
    1f92:	87 81       	ldd	r24, Z+7	; 0x07
    1f94:	8f 73       	andi	r24, 0x3F	; 63
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	a0 e0       	ldi	r26, 0x00	; 0
    1f9a:	b0 e0       	ldi	r27, 0x00	; 0
    1f9c:	bc 01       	movw	r22, r24
    1f9e:	55 27       	eor	r21, r21
    1fa0:	44 27       	eor	r20, r20
    1fa2:	90 85       	ldd	r25, Z+8	; 0x08
    1fa4:	89 2f       	mov	r24, r25
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	a0 e0       	ldi	r26, 0x00	; 0
    1faa:	b0 e0       	ldi	r27, 0x00	; 0
    1fac:	ba 2f       	mov	r27, r26
    1fae:	a9 2f       	mov	r26, r25
    1fb0:	98 2f       	mov	r25, r24
    1fb2:	88 27       	eor	r24, r24
    1fb4:	84 2b       	or	r24, r20
    1fb6:	95 2b       	or	r25, r21
    1fb8:	a6 2b       	or	r26, r22
    1fba:	b7 2b       	or	r27, r23
    1fbc:	21 85       	ldd	r18, Z+9	; 0x09
    1fbe:	82 2b       	or	r24, r18
    1fc0:	01 96       	adiw	r24, 0x01	; 1
    1fc2:	a1 1d       	adc	r26, r1
    1fc4:	b1 1d       	adc	r27, r1
    1fc6:	07 2e       	mov	r0, r23
    1fc8:	7a e0       	ldi	r23, 0x0A	; 10
    1fca:	88 0f       	add	r24, r24
    1fcc:	99 1f       	adc	r25, r25
    1fce:	aa 1f       	adc	r26, r26
    1fd0:	bb 1f       	adc	r27, r27
    1fd2:	7a 95       	dec	r23
    1fd4:	d1 f7       	brne	.-12     	; 0x1fca <SDInit+0xde>
    1fd6:	70 2d       	mov	r23, r0
    1fd8:	80 93 50 07 	sts	0x0750, r24	; 0x800750 <sg_u32SDSectorCount>
    1fdc:	90 93 51 07 	sts	0x0751, r25	; 0x800751 <sg_u32SDSectorCount+0x1>
    1fe0:	a0 93 52 07 	sts	0x0752, r26	; 0x800752 <sg_u32SDSectorCount+0x2>
    1fe4:	b0 93 53 07 	sts	0x0753, r27	; 0x800753 <sg_u32SDSectorCount+0x3>
    1fe8:	25 81       	ldd	r18, Z+5	; 0x05
    1fea:	2f 70       	andi	r18, 0x0F	; 15
    1fec:	81 e0       	ldi	r24, 0x01	; 1
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	02 c0       	rjmp	.+4      	; 0x1ff6 <SDInit+0x10a>
    1ff2:	88 0f       	add	r24, r24
    1ff4:	99 1f       	adc	r25, r25
    1ff6:	2a 95       	dec	r18
    1ff8:	e2 f7       	brpl	.-8      	; 0x1ff2 <SDInit+0x106>
    1ffa:	90 93 5b 07 	sts	0x075B, r25	; 0x80075b <sg_u16BlockSize+0x1>
    1ffe:	80 93 5a 07 	sts	0x075A, r24	; 0x80075a <sg_u16BlockSize>
    2002:	60 ec       	ldi	r22, 0xC0	; 192
    2004:	78 ed       	ldi	r23, 0xD8	; 216
    2006:	87 ea       	ldi	r24, 0xA7	; 167
    2008:	90 e0       	ldi	r25, 0x00	; 0
    200a:	0e 94 91 15 	call	0x2b22	; 0x2b22 <SPISetBaudRate>
    200e:	81 e0       	ldi	r24, 0x01	; 1
    2010:	17 c0       	rjmp	.+46     	; 0x2040 <SDInit+0x154>
    2012:	40 e0       	ldi	r20, 0x00	; 0
    2014:	50 e0       	ldi	r21, 0x00	; 0
    2016:	60 e0       	ldi	r22, 0x00	; 0
    2018:	70 e4       	ldi	r23, 0x40	; 64
    201a:	ce 01       	movw	r24, r28
    201c:	01 96       	adiw	r24, 0x01	; 1
    201e:	0e 94 97 1e 	call	0x3d2e	; 0x3d2e <SDSendOpConditionArg>
    2022:	81 11       	cpse	r24, r1
    2024:	0c c0       	rjmp	.+24     	; 0x203e <SDInit+0x152>
    2026:	81 e0       	ldi	r24, 0x01	; 1
    2028:	0b c0       	rjmp	.+22     	; 0x2040 <SDInit+0x154>
    202a:	80 e0       	ldi	r24, 0x00	; 0
    202c:	09 c0       	rjmp	.+18     	; 0x2040 <SDInit+0x154>
    202e:	80 e0       	ldi	r24, 0x00	; 0
    2030:	07 c0       	rjmp	.+14     	; 0x2040 <SDInit+0x154>
    2032:	80 e0       	ldi	r24, 0x00	; 0
    2034:	05 c0       	rjmp	.+10     	; 0x2040 <SDInit+0x154>
    2036:	80 e0       	ldi	r24, 0x00	; 0
    2038:	03 c0       	rjmp	.+6      	; 0x2040 <SDInit+0x154>
    203a:	80 e0       	ldi	r24, 0x00	; 0
    203c:	01 c0       	rjmp	.+2      	; 0x2040 <SDInit+0x154>
    203e:	80 e0       	ldi	r24, 0x00	; 0
    2040:	0f 90       	pop	r0
    2042:	0f 90       	pop	r0
    2044:	0f 90       	pop	r0
    2046:	0f 90       	pop	r0
    2048:	0f 90       	pop	r0
    204a:	df 91       	pop	r29
    204c:	cf 91       	pop	r28
    204e:	1f 91       	pop	r17
    2050:	08 95       	ret

Disassembly of section .text.SDRead:

00002a4a <SDRead>:

// Read one or more sectors from SD
bool SDRead(uint32_t u32Sector,
			uint8_t *pu8Buffer,
			uint32_t u32SectorCount)
{
    2a4a:	8f 92       	push	r8
    2a4c:	9f 92       	push	r9
    2a4e:	af 92       	push	r10
    2a50:	bf 92       	push	r11
    2a52:	cf 92       	push	r12
    2a54:	df 92       	push	r13
    2a56:	ef 92       	push	r14
    2a58:	ff 92       	push	r15
    2a5a:	0f 93       	push	r16
    2a5c:	1f 93       	push	r17
    2a5e:	cf 93       	push	r28
    2a60:	df 93       	push	r29
    2a62:	4b 01       	movw	r8, r22
    2a64:	5c 01       	movw	r10, r24
    2a66:	ea 01       	movw	r28, r20
    2a68:	68 01       	movw	r12, r16
    2a6a:	79 01       	movw	r14, r18
	bool bResult = false;
	
	// Pet the watchdog
	WatchdogReset();
    2a6c:	0e 94 ac 25 	call	0x4b58	; 0x4b58 <WatchdogReset>
		
	// Assert chip select
	SDSetCS(true);
    2a70:	81 e0       	ldi	r24, 0x01	; 1
    2a72:	0e 94 0a 25 	call	0x4a14	; 0x4a14 <SDSetCS>

	if (1 == u32SectorCount)
    2a76:	81 e0       	ldi	r24, 0x01	; 1
    2a78:	c8 16       	cp	r12, r24
    2a7a:	d1 04       	cpc	r13, r1
    2a7c:	e1 04       	cpc	r14, r1
    2a7e:	f1 04       	cpc	r15, r1
    2a80:	81 f4       	brne	.+32     	; 0x2aa2 <SDRead+0x58>
	{
		if (0 == SDCommand(CMD17,
    2a82:	b5 01       	movw	r22, r10
    2a84:	a4 01       	movw	r20, r8
    2a86:	81 e1       	ldi	r24, 0x11	; 17
    2a88:	0e 94 31 18 	call	0x3062	; 0x3062 <SDCommand>
    2a8c:	81 11       	cpse	r24, r1
    2a8e:	35 c0       	rjmp	.+106    	; 0x2afa <SDRead+0xb0>
						   u32Sector))
		{
			bResult = SDReceiveDataBlock(pu8Buffer,
    2a90:	60 91 5a 07 	lds	r22, 0x075A	; 0x80075a <sg_u16BlockSize>
    2a94:	70 91 5b 07 	lds	r23, 0x075B	; 0x80075b <sg_u16BlockSize+0x1>
    2a98:	ce 01       	movw	r24, r28
    2a9a:	0e 94 04 1a 	call	0x3408	; 0x3408 <SDReceiveDataBlock>
    2a9e:	18 2f       	mov	r17, r24
    2aa0:	2f c0       	rjmp	.+94     	; 0x2b00 <SDRead+0xb6>
		}
	}
	else
	{
		// Multisector
		if (0 == SDCommand(CMD18,
    2aa2:	b5 01       	movw	r22, r10
    2aa4:	a4 01       	movw	r20, r8
    2aa6:	82 e1       	ldi	r24, 0x12	; 18
    2aa8:	0e 94 31 18 	call	0x3062	; 0x3062 <SDCommand>
    2aac:	88 23       	and	r24, r24
    2aae:	19 f0       	breq	.+6      	; 0x2ab6 <SDRead+0x6c>
    2ab0:	26 c0       	rjmp	.+76     	; 0x2afe <SDRead+0xb4>
				WatchdogReset();
				
				pu8Buffer += sg_u16BlockSize;
			} 
			while ((bResult) &&
				   (u32SectorCount--));
    2ab2:	6c 01       	movw	r12, r24
    2ab4:	7d 01       	movw	r14, r26
		if (0 == SDCommand(CMD18,
						   u32Sector))
		{
			do 
			{
				bResult = SDReceiveDataBlock(pu8Buffer,
    2ab6:	60 91 5a 07 	lds	r22, 0x075A	; 0x80075a <sg_u16BlockSize>
    2aba:	70 91 5b 07 	lds	r23, 0x075B	; 0x80075b <sg_u16BlockSize+0x1>
    2abe:	ce 01       	movw	r24, r28
    2ac0:	0e 94 04 1a 	call	0x3408	; 0x3408 <SDReceiveDataBlock>
    2ac4:	18 2f       	mov	r17, r24
							 				 sg_u16BlockSize);
				// Pet the watchdog
				WatchdogReset();
    2ac6:	0e 94 ac 25 	call	0x4b58	; 0x4b58 <WatchdogReset>
				
				pu8Buffer += sg_u16BlockSize;
    2aca:	80 91 5a 07 	lds	r24, 0x075A	; 0x80075a <sg_u16BlockSize>
    2ace:	90 91 5b 07 	lds	r25, 0x075B	; 0x80075b <sg_u16BlockSize+0x1>
    2ad2:	c8 0f       	add	r28, r24
    2ad4:	d9 1f       	adc	r29, r25
			} 
			while ((bResult) &&
				   (u32SectorCount--));
    2ad6:	11 23       	and	r17, r17
    2ad8:	49 f0       	breq	.+18     	; 0x2aec <SDRead+0xa2>
    2ada:	d7 01       	movw	r26, r14
    2adc:	c6 01       	movw	r24, r12
    2ade:	01 97       	sbiw	r24, 0x01	; 1
    2ae0:	a1 09       	sbc	r26, r1
    2ae2:	b1 09       	sbc	r27, r1
				// Pet the watchdog
				WatchdogReset();
				
				pu8Buffer += sg_u16BlockSize;
			} 
			while ((bResult) &&
    2ae4:	cd 28       	or	r12, r13
    2ae6:	ce 28       	or	r12, r14
    2ae8:	cf 28       	or	r12, r15
    2aea:	19 f7       	brne	.-58     	; 0x2ab2 <SDRead+0x68>
				   (u32SectorCount--));
				   
			// Regardless, send a stop command
			(void) SDCommand(CMD12,
    2aec:	40 e0       	ldi	r20, 0x00	; 0
    2aee:	50 e0       	ldi	r21, 0x00	; 0
    2af0:	ba 01       	movw	r22, r20
    2af2:	8c e0       	ldi	r24, 0x0C	; 12
    2af4:	0e 94 31 18 	call	0x3062	; 0x3062 <SDCommand>
    2af8:	03 c0       	rjmp	.+6      	; 0x2b00 <SDRead+0xb6>
// Read one or more sectors from SD
bool SDRead(uint32_t u32Sector,
			uint8_t *pu8Buffer,
			uint32_t u32SectorCount)
{
	bool bResult = false;
    2afa:	10 e0       	ldi	r17, 0x00	; 0
    2afc:	01 c0       	rjmp	.+2      	; 0x2b00 <SDRead+0xb6>
    2afe:	10 e0       	ldi	r17, 0x00	; 0
		{
			// Failed
		}
	}
	
	SDSetCS(false);
    2b00:	80 e0       	ldi	r24, 0x00	; 0
    2b02:	0e 94 0a 25 	call	0x4a14	; 0x4a14 <SDSetCS>

	return(bResult);
}
    2b06:	81 2f       	mov	r24, r17
    2b08:	df 91       	pop	r29
    2b0a:	cf 91       	pop	r28
    2b0c:	1f 91       	pop	r17
    2b0e:	0f 91       	pop	r16
    2b10:	ff 90       	pop	r15
    2b12:	ef 90       	pop	r14
    2b14:	df 90       	pop	r13
    2b16:	cf 90       	pop	r12
    2b18:	bf 90       	pop	r11
    2b1a:	af 90       	pop	r10
    2b1c:	9f 90       	pop	r9
    2b1e:	8f 90       	pop	r8
    2b20:	08 95       	ret

Disassembly of section .text.SDWrite:

00002892 <SDWrite>:

bool SDGetBlockSize(uint32_t *pu32BlockSize)
{
	*pu32BlockSize = sg_u16BlockSize;
	return(true);
}
    2892:	8f 92       	push	r8
    2894:	9f 92       	push	r9
    2896:	af 92       	push	r10
    2898:	bf 92       	push	r11
    289a:	cf 92       	push	r12
    289c:	df 92       	push	r13
    289e:	ef 92       	push	r14
    28a0:	ff 92       	push	r15
    28a2:	0f 93       	push	r16
    28a4:	1f 93       	push	r17
    28a6:	cf 93       	push	r28
    28a8:	df 93       	push	r29
    28aa:	4b 01       	movw	r8, r22
    28ac:	5c 01       	movw	r10, r24
    28ae:	ea 01       	movw	r28, r20
    28b0:	68 01       	movw	r12, r16
    28b2:	79 01       	movw	r14, r18
    28b4:	0e 94 ac 25 	call	0x4b58	; 0x4b58 <WatchdogReset>
    28b8:	81 e0       	ldi	r24, 0x01	; 1
    28ba:	0e 94 0a 25 	call	0x4a14	; 0x4a14 <SDSetCS>
    28be:	81 e0       	ldi	r24, 0x01	; 1
    28c0:	c8 16       	cp	r12, r24
    28c2:	d1 04       	cpc	r13, r1
    28c4:	e1 04       	cpc	r14, r1
    28c6:	f1 04       	cpc	r15, r1
    28c8:	89 f4       	brne	.+34     	; 0x28ec <SDWrite+0x5a>
    28ca:	b5 01       	movw	r22, r10
    28cc:	a4 01       	movw	r20, r8
    28ce:	88 e1       	ldi	r24, 0x18	; 24
    28d0:	0e 94 31 18 	call	0x3062	; 0x3062 <SDCommand>
    28d4:	81 11       	cpse	r24, r1
    28d6:	37 c0       	rjmp	.+110    	; 0x2946 <SDWrite+0xb4>
    28d8:	60 91 5a 07 	lds	r22, 0x075A	; 0x80075a <sg_u16BlockSize>
    28dc:	70 91 5b 07 	lds	r23, 0x075B	; 0x80075b <sg_u16BlockSize+0x1>
    28e0:	4e ef       	ldi	r20, 0xFE	; 254
    28e2:	ce 01       	movw	r24, r28
    28e4:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <SDTransmitDataBlock>
    28e8:	18 2f       	mov	r17, r24
    28ea:	30 c0       	rjmp	.+96     	; 0x294c <SDWrite+0xba>
    28ec:	b5 01       	movw	r22, r10
    28ee:	a4 01       	movw	r20, r8
    28f0:	89 e1       	ldi	r24, 0x19	; 25
    28f2:	0e 94 31 18 	call	0x3062	; 0x3062 <SDCommand>
    28f6:	88 23       	and	r24, r24
    28f8:	19 f0       	breq	.+6      	; 0x2900 <SDWrite+0x6e>
    28fa:	27 c0       	rjmp	.+78     	; 0x294a <SDWrite+0xb8>
    28fc:	6c 01       	movw	r12, r24
    28fe:	7d 01       	movw	r14, r26
    2900:	60 91 5a 07 	lds	r22, 0x075A	; 0x80075a <sg_u16BlockSize>
    2904:	70 91 5b 07 	lds	r23, 0x075B	; 0x80075b <sg_u16BlockSize+0x1>
    2908:	4c ef       	ldi	r20, 0xFC	; 252
    290a:	ce 01       	movw	r24, r28
    290c:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <SDTransmitDataBlock>
    2910:	18 2f       	mov	r17, r24
    2912:	0e 94 ac 25 	call	0x4b58	; 0x4b58 <WatchdogReset>
    2916:	80 91 5a 07 	lds	r24, 0x075A	; 0x80075a <sg_u16BlockSize>
    291a:	90 91 5b 07 	lds	r25, 0x075B	; 0x80075b <sg_u16BlockSize+0x1>
    291e:	c8 0f       	add	r28, r24
    2920:	d9 1f       	adc	r29, r25
    2922:	11 23       	and	r17, r17
    2924:	49 f0       	breq	.+18     	; 0x2938 <SDWrite+0xa6>
    2926:	d7 01       	movw	r26, r14
    2928:	c6 01       	movw	r24, r12
    292a:	01 97       	sbiw	r24, 0x01	; 1
    292c:	a1 09       	sbc	r26, r1
    292e:	b1 09       	sbc	r27, r1
    2930:	cd 28       	or	r12, r13
    2932:	ce 28       	or	r12, r14
    2934:	cf 28       	or	r12, r15
    2936:	11 f7       	brne	.-60     	; 0x28fc <SDWrite+0x6a>
    2938:	40 e0       	ldi	r20, 0x00	; 0
    293a:	50 e0       	ldi	r21, 0x00	; 0
    293c:	ba 01       	movw	r22, r20
    293e:	8c e0       	ldi	r24, 0x0C	; 12
    2940:	0e 94 31 18 	call	0x3062	; 0x3062 <SDCommand>
    2944:	03 c0       	rjmp	.+6      	; 0x294c <SDWrite+0xba>
    2946:	10 e0       	ldi	r17, 0x00	; 0
    2948:	01 c0       	rjmp	.+2      	; 0x294c <SDWrite+0xba>
    294a:	10 e0       	ldi	r17, 0x00	; 0
    294c:	80 e0       	ldi	r24, 0x00	; 0
    294e:	0e 94 0a 25 	call	0x4a14	; 0x4a14 <SDSetCS>
    2952:	81 2f       	mov	r24, r17
    2954:	df 91       	pop	r29
    2956:	cf 91       	pop	r28
    2958:	1f 91       	pop	r17
    295a:	0f 91       	pop	r16
    295c:	ff 90       	pop	r15
    295e:	ef 90       	pop	r14
    2960:	df 90       	pop	r13
    2962:	cf 90       	pop	r12
    2964:	bf 90       	pop	r11
    2966:	af 90       	pop	r10
    2968:	9f 90       	pop	r9
    296a:	8f 90       	pop	r8
    296c:	08 95       	ret

Disassembly of section .text.SPITransaction:

00003cd6 <SPITransaction>:

// Do a SPI transaction - read or write (or write pattern)
void SPITransaction(ESPIBusState eSPIBusState,
					uint8_t *pu8Buffer,
					uint16_t u16ByteCount)
{
    3cd6:	fb 01       	movw	r30, r22
	// If we're transmitting, start the transaction
	if (ESTATE_RX_DATA == eSPIBusState)
    3cd8:	83 30       	cpi	r24, 0x03	; 3
    3cda:	71 f4       	brne	.+28     	; 0x3cf8 <SPITransaction+0x22>
    3cdc:	08 c0       	rjmp	.+16     	; 0x3cee <SPITransaction+0x18>
	{
		while (u16ByteCount--)
		{
			// Clock out 0xff so we can receive the data
			SPDR = 0xff;
    3cde:	2f ef       	ldi	r18, 0xFF	; 255
    3ce0:	2e bd       	out	0x2e, r18	; 46

			// Wait for data to be available
			while (0 == (SPSR & (1 << SPIF)));
    3ce2:	0d b4       	in	r0, 0x2d	; 45
    3ce4:	07 fe       	sbrs	r0, 7
    3ce6:	fd cf       	rjmp	.-6      	; 0x3ce2 <SPITransaction+0xc>
			
			// Read the byte
			*pu8Buffer = SPDR;
    3ce8:	2e b5       	in	r18, 0x2e	; 46
    3cea:	21 93       	st	Z+, r18
					uint16_t u16ByteCount)
{
	// If we're transmitting, start the transaction
	if (ESTATE_RX_DATA == eSPIBusState)
	{
		while (u16ByteCount--)
    3cec:	ac 01       	movw	r20, r24
    3cee:	ca 01       	movw	r24, r20
    3cf0:	01 97       	sbiw	r24, 0x01	; 1
    3cf2:	45 2b       	or	r20, r21
    3cf4:	a1 f7       	brne	.-24     	; 0x3cde <SPITransaction+0x8>
    3cf6:	08 95       	ret
			*pu8Buffer = SPDR;
			++pu8Buffer;
		}
	}
	else
	if (ESTATE_TX_DATA == eSPIBusState)
    3cf8:	81 30       	cpi	r24, 0x01	; 1
    3cfa:	61 f4       	brne	.+24     	; 0x3d14 <SPITransaction+0x3e>
    3cfc:	06 c0       	rjmp	.+12     	; 0x3d0a <SPITransaction+0x34>
	{
		// Clock out whatever our data is in our queue
		while (u16ByteCount--)
		{
			SPDR = *pu8Buffer;
    3cfe:	21 91       	ld	r18, Z+
    3d00:	2e bd       	out	0x2e, r18	; 46
			++pu8Buffer;
			
			// Wait for the transmit to complete
			while (0 == (SPSR & (1 << SPIF)));
    3d02:	0d b4       	in	r0, 0x2d	; 45
    3d04:	07 fe       	sbrs	r0, 7
    3d06:	fd cf       	rjmp	.-6      	; 0x3d02 <SPITransaction+0x2c>
	}
	else
	if (ESTATE_TX_DATA == eSPIBusState)
	{
		// Clock out whatever our data is in our queue
		while (u16ByteCount--)
    3d08:	ac 01       	movw	r20, r24
    3d0a:	ca 01       	movw	r24, r20
    3d0c:	01 97       	sbiw	r24, 0x01	; 1
    3d0e:	45 2b       	or	r20, r21
    3d10:	b1 f7       	brne	.-20     	; 0x3cfe <SPITransaction+0x28>
    3d12:	08 95       	ret
			// Wait for the transmit to complete
			while (0 == (SPSR & (1 << SPIF)));
		}
	}
	else
	if (ESTATE_TX_PATTERN == eSPIBusState)
    3d14:	82 30       	cpi	r24, 0x02	; 2
    3d16:	51 f4       	brne	.+20     	; 0x3d2c <SPITransaction+0x56>
    3d18:	05 c0       	rjmp	.+10     	; 0x3d24 <SPITransaction+0x4e>
		// Clock out whatever our data is in our queue
		while (u16ByteCount--)
		{
			// This is OK - as the position where the pointer would normally
			// be is just the pattern (single byte)
			SPDR = (uint8_t) (pu8Buffer);
    3d1a:	ee bd       	out	0x2e, r30	; 46
		
			// Wait for the transmit to complete
			while (0 == (SPSR & (1 << SPIF)));
    3d1c:	0d b4       	in	r0, 0x2d	; 45
    3d1e:	07 fe       	sbrs	r0, 7
    3d20:	fd cf       	rjmp	.-6      	; 0x3d1c <SPITransaction+0x46>
	}
	else
	if (ESTATE_TX_PATTERN == eSPIBusState)
	{
		// Clock out whatever our data is in our queue
		while (u16ByteCount--)
    3d22:	ac 01       	movw	r20, r24
    3d24:	ca 01       	movw	r24, r20
    3d26:	01 97       	sbiw	r24, 0x01	; 1
    3d28:	45 2b       	or	r20, r21
    3d2a:	b9 f7       	brne	.-18     	; 0x3d1a <SPITransaction+0x44>
    3d2c:	08 95       	ret

Disassembly of section .text.SPISetBaudRate:

00002b22 <SPISetBaudRate>:
	{FCLKIO >> 7,	(1 << SPR1) | (0 << SPR0),	0},					// /128
};

// Sets the SPI baud rate and returns the actual baud rate selected
uint32_t SPISetBaudRate(uint32_t u32BaudRate)
{
    2b22:	cf 92       	push	r12
    2b24:	df 92       	push	r13
    2b26:	ef 92       	push	r14
    2b28:	ff 92       	push	r15
    2b2a:	6b 01       	movw	r12, r22
    2b2c:	7c 01       	movw	r14, r24
	uint8_t u8Loop;
	
	// Find the baud rate that's the closest
	for (u8Loop = 0; u8Loop < (sizeof(sg_sSPIBaudRates) / sizeof(sg_sSPIBaudRates[0])); u8Loop++)
    2b2e:	20 e0       	ldi	r18, 0x00	; 0
    2b30:	19 c0       	rjmp	.+50     	; 0x2b64 <SPISetBaudRate+0x42>
	{
		if (u32BaudRate >= sg_sSPIBaudRates[u8Loop].u32BaudRate)
    2b32:	82 2f       	mov	r24, r18
    2b34:	90 e0       	ldi	r25, 0x00	; 0
    2b36:	ac 01       	movw	r20, r24
    2b38:	44 0f       	add	r20, r20
    2b3a:	55 1f       	adc	r21, r21
    2b3c:	84 0f       	add	r24, r20
    2b3e:	95 1f       	adc	r25, r21
    2b40:	88 0f       	add	r24, r24
    2b42:	99 1f       	adc	r25, r25
    2b44:	09 2e       	mov	r0, r25
    2b46:	00 0c       	add	r0, r0
    2b48:	aa 0b       	sbc	r26, r26
    2b4a:	85 5a       	subi	r24, 0xA5	; 165
    2b4c:	9e 4f       	sbci	r25, 0xFE	; 254
    2b4e:	af 4f       	sbci	r26, 0xFF	; 255
    2b50:	fc 01       	movw	r30, r24
    2b52:	5a 2f       	mov	r21, r26
    2b54:	0e 94 bb 24 	call	0x4976	; 0x4976 <__xload_4>
    2b58:	c6 16       	cp	r12, r22
    2b5a:	d7 06       	cpc	r13, r23
    2b5c:	e8 06       	cpc	r14, r24
    2b5e:	f9 06       	cpc	r15, r25
    2b60:	18 f4       	brcc	.+6      	; 0x2b68 <SPISetBaudRate+0x46>
uint32_t SPISetBaudRate(uint32_t u32BaudRate)
{
	uint8_t u8Loop;
	
	// Find the baud rate that's the closest
	for (u8Loop = 0; u8Loop < (sizeof(sg_sSPIBaudRates) / sizeof(sg_sSPIBaudRates[0])); u8Loop++)
    2b62:	2f 5f       	subi	r18, 0xFF	; 255
    2b64:	27 30       	cpi	r18, 0x07	; 7
    2b66:	28 f3       	brcs	.-54     	; 0x2b32 <SPISetBaudRate+0x10>
			break;
		}
	}

	// If we've hit the end, use the slowest speed
	if ((sizeof(sg_sSPIBaudRates) / sizeof(sg_sSPIBaudRates[0])) == u8Loop)
    2b68:	27 30       	cpi	r18, 0x07	; 7
    2b6a:	09 f4       	brne	.+2      	; 0x2b6e <SPISetBaudRate+0x4c>
	{
		u8Loop--;
    2b6c:	21 50       	subi	r18, 0x01	; 1
	}

	// Found one!
	SPCR = (SPCR & (uint8_t) ~((1 << SPR1) | (1 << SPR0))) | sg_sSPIBaudRates[u8Loop].u8SPCR;
    2b6e:	6c b5       	in	r22, 0x2c	; 44
    2b70:	30 e0       	ldi	r19, 0x00	; 0
    2b72:	a9 01       	movw	r20, r18
    2b74:	44 0f       	add	r20, r20
    2b76:	55 1f       	adc	r21, r21
    2b78:	ca 01       	movw	r24, r20
    2b7a:	82 0f       	add	r24, r18
    2b7c:	93 1f       	adc	r25, r19
    2b7e:	88 0f       	add	r24, r24
    2b80:	99 1f       	adc	r25, r25
    2b82:	04 96       	adiw	r24, 0x04	; 4
    2b84:	09 2e       	mov	r0, r25
    2b86:	00 0c       	add	r0, r0
    2b88:	aa 0b       	sbc	r26, r26
    2b8a:	85 5a       	subi	r24, 0xA5	; 165
    2b8c:	9e 4f       	sbci	r25, 0xFE	; 254
    2b8e:	af 4f       	sbci	r26, 0xFF	; 255
    2b90:	fc 01       	movw	r30, r24
    2b92:	84 91       	lpm	r24, Z
    2b94:	a7 fd       	sbrc	r26, 7
    2b96:	80 81       	ld	r24, Z
    2b98:	6c 7f       	andi	r22, 0xFC	; 252
    2b9a:	86 2b       	or	r24, r22
    2b9c:	8c bd       	out	0x2c, r24	; 44
	SPSR = (SPSR & (uint8_t) ~(1 << SPI2X)) | sg_sSPIBaudRates[u8Loop].u8SPSR;
    2b9e:	6d b5       	in	r22, 0x2d	; 45
    2ba0:	ca 01       	movw	r24, r20
    2ba2:	82 0f       	add	r24, r18
    2ba4:	93 1f       	adc	r25, r19
    2ba6:	88 0f       	add	r24, r24
    2ba8:	99 1f       	adc	r25, r25
    2baa:	05 96       	adiw	r24, 0x05	; 5
    2bac:	09 2e       	mov	r0, r25
    2bae:	00 0c       	add	r0, r0
    2bb0:	aa 0b       	sbc	r26, r26
    2bb2:	85 5a       	subi	r24, 0xA5	; 165
    2bb4:	9e 4f       	sbci	r25, 0xFE	; 254
    2bb6:	af 4f       	sbci	r26, 0xFF	; 255
    2bb8:	fc 01       	movw	r30, r24
    2bba:	84 91       	lpm	r24, Z
    2bbc:	a7 fd       	sbrc	r26, 7
    2bbe:	80 81       	ld	r24, Z
    2bc0:	6e 7f       	andi	r22, 0xFE	; 254
    2bc2:	86 2b       	or	r24, r22
    2bc4:	8d bd       	out	0x2d, r24	; 45
	return(sg_sSPIBaudRates[u8Loop].u32BaudRate);
    2bc6:	24 0f       	add	r18, r20
    2bc8:	35 1f       	adc	r19, r21
    2bca:	22 0f       	add	r18, r18
    2bcc:	33 1f       	adc	r19, r19
    2bce:	03 2e       	mov	r0, r19
    2bd0:	00 0c       	add	r0, r0
    2bd2:	44 0b       	sbc	r20, r20
    2bd4:	25 5a       	subi	r18, 0xA5	; 165
    2bd6:	3e 4f       	sbci	r19, 0xFE	; 254
    2bd8:	4f 4f       	sbci	r20, 0xFF	; 255
    2bda:	f9 01       	movw	r30, r18
    2bdc:	54 2f       	mov	r21, r20
    2bde:	0e 94 bb 24 	call	0x4976	; 0x4976 <__xload_4>
}
    2be2:	ff 90       	pop	r15
    2be4:	ef 90       	pop	r14
    2be6:	df 90       	pop	r13
    2be8:	cf 90       	pop	r12
    2bea:	08 95       	ret

Disassembly of section .text.SPIInit:

00004444 <SPIInit>:

void SPIInit(void)
{
	// Set MOSI and SCK to output
	DDR_SPI |= (1 << MOSI) | (1 << SCK);
    4444:	84 b1       	in	r24, 0x04	; 4
    4446:	82 68       	ori	r24, 0x82	; 130
    4448:	84 b9       	out	0x04, r24	; 4
	DDR_SPI &= (uint8_t) ~(1 << MISO);
    444a:	84 b1       	in	r24, 0x04	; 4
    444c:	8e 7f       	andi	r24, 0xFE	; 254
    444e:	84 b9       	out	0x04, r24	; 4
	
	// MISO As input (need our pullup)
	PORT_SPI |= (1 << MISO);
    4450:	85 b1       	in	r24, 0x05	; 5
    4452:	81 60       	ori	r24, 0x01	; 1
    4454:	85 b9       	out	0x05, r24	; 5
	
	// Enable SPI engine, master only, and clock to fosc/128 and SPI mode 0 (which is what SD wants)
	SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR1) | (1 << SPR0);
    4456:	83 e5       	ldi	r24, 0x53	; 83
    4458:	8c bd       	out	0x2c, r24	; 44
	
	// Zero out SPSR (all zeroes)
	SPSR = 0;
    445a:	1d bc       	out	0x2d, r1	; 45
	
	// Zero out SPIPS so the SPI IP is connected to MISO, MOSI, SCK, and SS
	MCUCR &= (uint8_t) ~(1 << SPIPS);
    445c:	85 b7       	in	r24, 0x35	; 53
    445e:	8f 77       	andi	r24, 0x7F	; 127
    4460:	85 bf       	out	0x35, r24	; 53

	// Set to something slow/compatible
	(void) SPISetBaudRate(400000);
    4462:	60 e8       	ldi	r22, 0x80	; 128
    4464:	7a e1       	ldi	r23, 0x1A	; 26
    4466:	86 e0       	ldi	r24, 0x06	; 6
    4468:	90 e0       	ldi	r25, 0x00	; 0
    446a:	0e 94 91 15 	call	0x2b22	; 0x2b22 <SPISetBaudRate>
    446e:	08 95       	ret

Disassembly of section .text.readGlobalState:

0000409a <readGlobalState>:

static GlobalState gState;
static uint32_t currentSector;
static uint8_t __attribute__((aligned(4))) frameBuffer[FRAME_BUFFER_SIZE];  // Enlarged to handle full frame

static bool readGlobalState(void) {
    409a:	0f 93       	push	r16
    409c:	1f 93       	push	r17
    409e:	cf 93       	push	r28
	if (!SDRead(0, frameBuffer, 1)) {
    40a0:	01 e0       	ldi	r16, 0x01	; 1
    40a2:	10 e0       	ldi	r17, 0x00	; 0
    40a4:	20 e0       	ldi	r18, 0x00	; 0
    40a6:	30 e0       	ldi	r19, 0x00	; 0
    40a8:	48 e2       	ldi	r20, 0x28	; 40
    40aa:	53 e0       	ldi	r21, 0x03	; 3
    40ac:	60 e0       	ldi	r22, 0x00	; 0
    40ae:	70 e0       	ldi	r23, 0x00	; 0
    40b0:	cb 01       	movw	r24, r22
    40b2:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <SDRead>
    40b6:	c8 2f       	mov	r28, r24
    40b8:	88 23       	and	r24, r24
    40ba:	49 f0       	breq	.+18     	; 0x40ce <readGlobalState+0x34>
		return false;
	}
	memcpy(&gState, frameBuffer, sizeof(GlobalState));
    40bc:	48 e2       	ldi	r20, 0x28	; 40
    40be:	53 e0       	ldi	r21, 0x03	; 3
    40c0:	60 e8       	ldi	r22, 0x80	; 128
    40c2:	28 ed       	ldi	r18, 0xD8	; 216
    40c4:	31 e0       	ldi	r19, 0x01	; 1
    40c6:	88 e2       	ldi	r24, 0x28	; 40
    40c8:	95 e0       	ldi	r25, 0x05	; 5
    40ca:	0e 94 98 21 	call	0x4330	; 0x4330 <memcpy>
	// TODO: Implement checksum verification
	return true;
}
    40ce:	8c 2f       	mov	r24, r28
    40d0:	cf 91       	pop	r28
    40d2:	1f 91       	pop	r17
    40d4:	0f 91       	pop	r16
    40d6:	08 95       	ret

Disassembly of section .text.writeGlobalState:

000042fe <writeGlobalState>:

static bool writeGlobalState(void) {
    42fe:	0f 93       	push	r16
    4300:	1f 93       	push	r17
	memcpy(frameBuffer, &gState, sizeof(GlobalState));
    4302:	48 e2       	ldi	r20, 0x28	; 40
    4304:	55 e0       	ldi	r21, 0x05	; 5
    4306:	60 e8       	ldi	r22, 0x80	; 128
    4308:	28 ed       	ldi	r18, 0xD8	; 216
    430a:	31 e0       	ldi	r19, 0x01	; 1
    430c:	88 e2       	ldi	r24, 0x28	; 40
    430e:	93 e0       	ldi	r25, 0x03	; 3
    4310:	0e 94 98 21 	call	0x4330	; 0x4330 <memcpy>
	// TODO: Calculate and update checksum
	return SDWrite(0, frameBuffer, 1);
    4314:	01 e0       	ldi	r16, 0x01	; 1
    4316:	10 e0       	ldi	r17, 0x00	; 0
    4318:	20 e0       	ldi	r18, 0x00	; 0
    431a:	30 e0       	ldi	r19, 0x00	; 0
    431c:	48 e2       	ldi	r20, 0x28	; 40
    431e:	53 e0       	ldi	r21, 0x03	; 3
    4320:	60 e0       	ldi	r22, 0x00	; 0
    4322:	70 e0       	ldi	r23, 0x00	; 0
    4324:	cb 01       	movw	r24, r22
    4326:	0e 94 49 14 	call	0x2892	; 0x2892 <SDWrite>
}
    432a:	1f 91       	pop	r17
    432c:	0f 91       	pop	r16
    432e:	08 95       	ret

Disassembly of section .text.updateSessionMap:

0000296e <updateSessionMap>:

static bool updateSessionMap(void) {
    296e:	8f 92       	push	r8
    2970:	9f 92       	push	r9
    2972:	af 92       	push	r10
    2974:	bf 92       	push	r11
    2976:	cf 92       	push	r12
    2978:	df 92       	push	r13
    297a:	ef 92       	push	r14
    297c:	ff 92       	push	r15
    297e:	0f 93       	push	r16
    2980:	1f 93       	push	r17
	uint32_t mapSector = gState.activeSessionMapSector;
    2982:	e8 e2       	ldi	r30, 0x28	; 40
    2984:	f5 e0       	ldi	r31, 0x05	; 5
    2986:	c4 8c       	ldd	r12, Z+28	; 0x1c
    2988:	d5 8c       	ldd	r13, Z+29	; 0x1d
    298a:	e6 8c       	ldd	r14, Z+30	; 0x1e
    298c:	f7 8c       	ldd	r15, Z+31	; 0x1f
	uint32_t mapOffset = gState.activeSessionMapOffset;
    298e:	80 a0       	ldd	r8, Z+32	; 0x20
    2990:	91 a0       	ldd	r9, Z+33	; 0x21
    2992:	a2 a0       	ldd	r10, Z+34	; 0x22
    2994:	b3 a0       	ldd	r11, Z+35	; 0x23

	if (!SDRead(mapSector, frameBuffer, 1)) {
    2996:	01 e0       	ldi	r16, 0x01	; 1
    2998:	10 e0       	ldi	r17, 0x00	; 0
    299a:	20 e0       	ldi	r18, 0x00	; 0
    299c:	30 e0       	ldi	r19, 0x00	; 0
    299e:	48 e2       	ldi	r20, 0x28	; 40
    29a0:	53 e0       	ldi	r21, 0x03	; 3
    29a2:	c7 01       	movw	r24, r14
    29a4:	b6 01       	movw	r22, r12
    29a6:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <SDRead>
    29aa:	88 23       	and	r24, r24
    29ac:	09 f4       	brne	.+2      	; 0x29b0 <updateSessionMap+0x42>
    29ae:	42 c0       	rjmp	.+132    	; 0x2a34 <updateSessionMap+0xc6>
		return false;
	}

	// Update session map
	*(uint64_t*)(frameBuffer + mapOffset) = gState.newSessionSector;
    29b0:	f4 01       	movw	r30, r8
    29b2:	e8 5d       	subi	r30, 0xD8	; 216
    29b4:	fc 4f       	sbci	r31, 0xFC	; 252
    29b6:	00 91 40 05 	lds	r16, 0x0540	; 0x800540 <gState+0x18>
    29ba:	10 91 41 05 	lds	r17, 0x0541	; 0x800541 <gState+0x19>
    29be:	20 91 42 05 	lds	r18, 0x0542	; 0x800542 <gState+0x1a>
    29c2:	30 91 43 05 	lds	r19, 0x0543	; 0x800543 <gState+0x1b>
    29c6:	00 83       	st	Z, r16
    29c8:	11 83       	std	Z+1, r17	; 0x01
    29ca:	22 83       	std	Z+2, r18	; 0x02
    29cc:	33 83       	std	Z+3, r19	; 0x03
    29ce:	14 82       	std	Z+4, r1	; 0x04
    29d0:	15 82       	std	Z+5, r1	; 0x05
    29d2:	16 82       	std	Z+6, r1	; 0x06
    29d4:	17 82       	std	Z+7, r1	; 0x07

	if (!SDWrite(mapSector, frameBuffer, 1)) {
    29d6:	01 e0       	ldi	r16, 0x01	; 1
    29d8:	10 e0       	ldi	r17, 0x00	; 0
    29da:	20 e0       	ldi	r18, 0x00	; 0
    29dc:	30 e0       	ldi	r19, 0x00	; 0
    29de:	48 e2       	ldi	r20, 0x28	; 40
    29e0:	53 e0       	ldi	r21, 0x03	; 3
    29e2:	c7 01       	movw	r24, r14
    29e4:	b6 01       	movw	r22, r12
    29e6:	0e 94 49 14 	call	0x2892	; 0x2892 <SDWrite>
    29ea:	88 23       	and	r24, r24
    29ec:	19 f1       	breq	.+70     	; 0x2a34 <updateSessionMap+0xc6>
		return false;
	}

	// Update map pointers
	gState.activeSessionMapOffset += sizeof(uint64_t);
    29ee:	e8 e2       	ldi	r30, 0x28	; 40
    29f0:	f5 e0       	ldi	r31, 0x05	; 5
    29f2:	80 a1       	ldd	r24, Z+32	; 0x20
    29f4:	91 a1       	ldd	r25, Z+33	; 0x21
    29f6:	a2 a1       	ldd	r26, Z+34	; 0x22
    29f8:	b3 a1       	ldd	r27, Z+35	; 0x23
    29fa:	08 96       	adiw	r24, 0x08	; 8
    29fc:	a1 1d       	adc	r26, r1
    29fe:	b1 1d       	adc	r27, r1
    2a00:	80 a3       	std	Z+32, r24	; 0x20
    2a02:	91 a3       	std	Z+33, r25	; 0x21
    2a04:	a2 a3       	std	Z+34, r26	; 0x22
    2a06:	b3 a3       	std	Z+35, r27	; 0x23
	if (gState.activeSessionMapOffset >= SECTOR_SIZE) {
    2a08:	81 15       	cp	r24, r1
    2a0a:	92 40       	sbci	r25, 0x02	; 2
    2a0c:	a1 05       	cpc	r26, r1
    2a0e:	b1 05       	cpc	r27, r1
    2a10:	78 f0       	brcs	.+30     	; 0x2a30 <updateSessionMap+0xc2>
		gState.activeSessionMapSector++;
    2a12:	84 8d       	ldd	r24, Z+28	; 0x1c
    2a14:	95 8d       	ldd	r25, Z+29	; 0x1d
    2a16:	a6 8d       	ldd	r26, Z+30	; 0x1e
    2a18:	b7 8d       	ldd	r27, Z+31	; 0x1f
    2a1a:	01 96       	adiw	r24, 0x01	; 1
    2a1c:	a1 1d       	adc	r26, r1
    2a1e:	b1 1d       	adc	r27, r1
    2a20:	84 8f       	std	Z+28, r24	; 0x1c
    2a22:	95 8f       	std	Z+29, r25	; 0x1d
    2a24:	a6 8f       	std	Z+30, r26	; 0x1e
    2a26:	b7 8f       	std	Z+31, r27	; 0x1f
		gState.activeSessionMapOffset = 0;
    2a28:	10 a2       	std	Z+32, r1	; 0x20
    2a2a:	11 a2       	std	Z+33, r1	; 0x21
    2a2c:	12 a2       	std	Z+34, r1	; 0x22
    2a2e:	13 a2       	std	Z+35, r1	; 0x23
	}

	return writeGlobalState();
    2a30:	0e 94 7f 21 	call	0x42fe	; 0x42fe <writeGlobalState>
}
    2a34:	1f 91       	pop	r17
    2a36:	0f 91       	pop	r16
    2a38:	ff 90       	pop	r15
    2a3a:	ef 90       	pop	r14
    2a3c:	df 90       	pop	r13
    2a3e:	cf 90       	pop	r12
    2a40:	bf 90       	pop	r11
    2a42:	af 90       	pop	r10
    2a44:	9f 90       	pop	r9
    2a46:	8f 90       	pop	r8
    2a48:	08 95       	ret

Disassembly of section .text.STORE_Init:

00003626 <STORE_Init>:

bool STORE_Init(void) {
    3626:	cf 93       	push	r28
	if (!SDInit()) {
    3628:	0e 94 76 0f 	call	0x1eec	; 0x1eec <SDInit>
    362c:	c8 2f       	mov	r28, r24
    362e:	88 23       	and	r24, r24
    3630:	c1 f1       	breq	.+112    	; 0x36a2 <STORE_Init+0x7c>
		return false;
	}

	if (!readGlobalState()) {
    3632:	0e 94 4d 20 	call	0x409a	; 0x409a <readGlobalState>
    3636:	81 11       	cpse	r24, r1
    3638:	22 c0       	rjmp	.+68     	; 0x367e <STORE_Init+0x58>
		// Initialize global state if it doesn't exist
		memset(&gState, 0, sizeof(GlobalState));
    363a:	e8 e2       	ldi	r30, 0x28	; 40
    363c:	f5 e0       	ldi	r31, 0x05	; 5
    363e:	88 ed       	ldi	r24, 0xD8	; 216
    3640:	91 e0       	ldi	r25, 0x01	; 1
    3642:	df 01       	movw	r26, r30
    3644:	9c 01       	movw	r18, r24
    3646:	1d 92       	st	X+, r1
    3648:	21 50       	subi	r18, 0x01	; 1
    364a:	30 40       	sbci	r19, 0x00	; 0
    364c:	e1 f7       	brne	.-8      	; 0x3646 <STORE_Init+0x20>
		gState.firstSessionSector = 1;
    364e:	81 e0       	ldi	r24, 0x01	; 1
    3650:	90 e0       	ldi	r25, 0x00	; 0
    3652:	a0 e0       	ldi	r26, 0x00	; 0
    3654:	b0 e0       	ldi	r27, 0x00	; 0
    3656:	84 87       	std	Z+12, r24	; 0x0c
    3658:	95 87       	std	Z+13, r25	; 0x0d
    365a:	a6 87       	std	Z+14, r26	; 0x0e
    365c:	b7 87       	std	Z+15, r27	; 0x0f
		gState.newSessionSector = 1;
    365e:	80 8f       	std	Z+24, r24	; 0x18
    3660:	91 8f       	std	Z+25, r25	; 0x19
    3662:	a2 8f       	std	Z+26, r26	; 0x1a
    3664:	b3 8f       	std	Z+27, r27	; 0x1b
		gState.activeSessionMapSector = 4;
    3666:	84 e0       	ldi	r24, 0x04	; 4
    3668:	90 e0       	ldi	r25, 0x00	; 0
    366a:	a0 e0       	ldi	r26, 0x00	; 0
    366c:	b0 e0       	ldi	r27, 0x00	; 0
    366e:	84 8f       	std	Z+28, r24	; 0x1c
    3670:	95 8f       	std	Z+29, r25	; 0x1d
    3672:	a6 8f       	std	Z+30, r26	; 0x1e
    3674:	b7 8f       	std	Z+31, r27	; 0x1f
		gState.activeSessionMapOffset = 0;
		// TODO: Initialize other fields as needed
		if (!writeGlobalState()) {
    3676:	0e 94 7f 21 	call	0x42fe	; 0x42fe <writeGlobalState>
    367a:	88 23       	and	r24, r24
    367c:	89 f0       	breq	.+34     	; 0x36a0 <STORE_Init+0x7a>
			return false;
		}
	}

	currentSector = gState.newSessionSector;
    367e:	80 91 40 05 	lds	r24, 0x0540	; 0x800540 <gState+0x18>
    3682:	90 91 41 05 	lds	r25, 0x0541	; 0x800541 <gState+0x19>
    3686:	a0 91 42 05 	lds	r26, 0x0542	; 0x800542 <gState+0x1a>
    368a:	b0 91 43 05 	lds	r27, 0x0543	; 0x800543 <gState+0x1b>
    368e:	80 93 54 07 	sts	0x0754, r24	; 0x800754 <currentSector>
    3692:	90 93 55 07 	sts	0x0755, r25	; 0x800755 <currentSector+0x1>
    3696:	a0 93 56 07 	sts	0x0756, r26	; 0x800756 <currentSector+0x2>
    369a:	b0 93 57 07 	sts	0x0757, r27	; 0x800757 <currentSector+0x3>
	return true;
    369e:	01 c0       	rjmp	.+2      	; 0x36a2 <STORE_Init+0x7c>
		gState.newSessionSector = 1;
		gState.activeSessionMapSector = 4;
		gState.activeSessionMapOffset = 0;
		// TODO: Initialize other fields as needed
		if (!writeGlobalState()) {
			return false;
    36a0:	c8 2f       	mov	r28, r24
		}
	}

	currentSector = gState.newSessionSector;
	return true;
}
    36a2:	8c 2f       	mov	r24, r28
    36a4:	cf 91       	pop	r28
    36a6:	08 95       	ret

Disassembly of section .text.STORE_WriteFrame:

000025dc <STORE_WriteFrame>:

bool STORE_WriteFrame(volatile FrameData* frame) {
    25dc:	8f 92       	push	r8
    25de:	9f 92       	push	r9
    25e0:	af 92       	push	r10
    25e2:	bf 92       	push	r11
    25e4:	cf 92       	push	r12
    25e6:	df 92       	push	r13
    25e8:	ef 92       	push	r14
    25ea:	ff 92       	push	r15
    25ec:	0f 93       	push	r16
    25ee:	1f 93       	push	r17
    25f0:	cf 93       	push	r28
    25f2:	df 93       	push	r29
	uint32_t bytesWritten = 0;
	uint32_t currentOffset = 0;
	uint32_t sectorsToWrite;
	
	// Verify frame size
	if(frame->frameBytes > FRAME_BUFFER_SIZE) {
    25f4:	fc 01       	movw	r30, r24
    25f6:	24 81       	ldd	r18, Z+4	; 0x04
    25f8:	35 81       	ldd	r19, Z+5	; 0x05
    25fa:	21 30       	cpi	r18, 0x01	; 1
    25fc:	32 40       	sbci	r19, 0x02	; 2
    25fe:	08 f0       	brcs	.+2      	; 0x2602 <STORE_WriteFrame+0x26>
    2600:	5a c0       	rjmp	.+180    	; 0x26b6 <STORE_WriteFrame+0xda>
    2602:	ec 01       	movw	r28, r24
		return false;
	}
	
	// Copy frame data to our buffer
	memcpy(frameBuffer, (const void*)frame, frame->frameBytes);
    2604:	2c 81       	ldd	r18, Y+4	; 0x04
    2606:	3d 81       	ldd	r19, Y+5	; 0x05
    2608:	ac 01       	movw	r20, r24
    260a:	60 e8       	ldi	r22, 0x80	; 128
    260c:	88 e2       	ldi	r24, 0x28	; 40
    260e:	93 e0       	ldi	r25, 0x03	; 3
    2610:	0e 94 98 21 	call	0x4330	; 0x4330 <memcpy>
	
	// Zero out any remaining buffer space in last sector
	if(frame->frameBytes < FRAME_BUFFER_SIZE) {
    2614:	8c 81       	ldd	r24, Y+4	; 0x04
    2616:	9d 81       	ldd	r25, Y+5	; 0x05
    2618:	81 15       	cp	r24, r1
    261a:	92 40       	sbci	r25, 0x02	; 2
    261c:	70 f4       	brcc	.+28     	; 0x263a <STORE_WriteFrame+0x5e>
		memset(frameBuffer + frame->frameBytes, 0, FRAME_BUFFER_SIZE - frame->frameBytes);
    261e:	2c 81       	ldd	r18, Y+4	; 0x04
    2620:	3d 81       	ldd	r19, Y+5	; 0x05
    2622:	8c 81       	ldd	r24, Y+4	; 0x04
    2624:	9d 81       	ldd	r25, Y+5	; 0x05
    2626:	40 e0       	ldi	r20, 0x00	; 0
    2628:	52 e0       	ldi	r21, 0x02	; 2
    262a:	42 1b       	sub	r20, r18
    262c:	53 0b       	sbc	r21, r19
    262e:	60 e0       	ldi	r22, 0x00	; 0
    2630:	70 e0       	ldi	r23, 0x00	; 0
    2632:	88 5d       	subi	r24, 0xD8	; 216
    2634:	9c 4f       	sbci	r25, 0xFC	; 252
    2636:	0e 94 27 25 	call	0x4a4e	; 0x4a4e <memset>

	currentSector = gState.newSessionSector;
	return true;
}

bool STORE_WriteFrame(volatile FrameData* frame) {
    263a:	c1 2c       	mov	r12, r1
    263c:	d1 2c       	mov	r13, r1
    263e:	76 01       	movw	r14, r12
    2640:	c3 94       	inc	r12
    2642:	81 2c       	mov	r8, r1
    2644:	91 2c       	mov	r9, r1
    2646:	54 01       	movw	r10, r8
    2648:	2f c0       	rjmp	.+94     	; 0x26a8 <STORE_WriteFrame+0xcc>
	// Calculate how many complete sectors we need to write
	sectorsToWrite = SECTORS_PER_FRAME;
	
	// Write all sectors
	while(sectorsToWrite > 0) {
		if(!SDWrite(currentSector, frameBuffer + currentOffset, 1)) {
    264a:	60 91 54 07 	lds	r22, 0x0754	; 0x800754 <currentSector>
    264e:	70 91 55 07 	lds	r23, 0x0755	; 0x800755 <currentSector+0x1>
    2652:	80 91 56 07 	lds	r24, 0x0756	; 0x800756 <currentSector+0x2>
    2656:	90 91 57 07 	lds	r25, 0x0757	; 0x800757 <currentSector+0x3>
    265a:	01 e0       	ldi	r16, 0x01	; 1
    265c:	10 e0       	ldi	r17, 0x00	; 0
    265e:	20 e0       	ldi	r18, 0x00	; 0
    2660:	30 e0       	ldi	r19, 0x00	; 0
    2662:	a4 01       	movw	r20, r8
    2664:	48 5d       	subi	r20, 0xD8	; 216
    2666:	5c 4f       	sbci	r21, 0xFC	; 252
    2668:	0e 94 49 14 	call	0x2892	; 0x2892 <SDWrite>
    266c:	88 23       	and	r24, r24
    266e:	21 f1       	breq	.+72     	; 0x26b8 <STORE_WriteFrame+0xdc>
			return false;
		}
		currentSector++;
    2670:	80 91 54 07 	lds	r24, 0x0754	; 0x800754 <currentSector>
    2674:	90 91 55 07 	lds	r25, 0x0755	; 0x800755 <currentSector+0x1>
    2678:	a0 91 56 07 	lds	r26, 0x0756	; 0x800756 <currentSector+0x2>
    267c:	b0 91 57 07 	lds	r27, 0x0757	; 0x800757 <currentSector+0x3>
    2680:	01 96       	adiw	r24, 0x01	; 1
    2682:	a1 1d       	adc	r26, r1
    2684:	b1 1d       	adc	r27, r1
    2686:	80 93 54 07 	sts	0x0754, r24	; 0x800754 <currentSector>
    268a:	90 93 55 07 	sts	0x0755, r25	; 0x800755 <currentSector+0x1>
    268e:	a0 93 56 07 	sts	0x0756, r26	; 0x800756 <currentSector+0x2>
    2692:	b0 93 57 07 	sts	0x0757, r27	; 0x800757 <currentSector+0x3>
		currentOffset += SECTOR_SIZE;
    2696:	42 e0       	ldi	r20, 0x02	; 2
    2698:	94 0e       	add	r9, r20
    269a:	a1 1c       	adc	r10, r1
    269c:	b1 1c       	adc	r11, r1
		sectorsToWrite--;
    269e:	81 e0       	ldi	r24, 0x01	; 1
    26a0:	c8 1a       	sub	r12, r24
    26a2:	d1 08       	sbc	r13, r1
    26a4:	e1 08       	sbc	r14, r1
    26a6:	f1 08       	sbc	r15, r1
	
	// Calculate how many complete sectors we need to write
	sectorsToWrite = SECTORS_PER_FRAME;
	
	// Write all sectors
	while(sectorsToWrite > 0) {
    26a8:	c1 14       	cp	r12, r1
    26aa:	d1 04       	cpc	r13, r1
    26ac:	e1 04       	cpc	r14, r1
    26ae:	f1 04       	cpc	r15, r1
    26b0:	61 f6       	brne	.-104    	; 0x264a <STORE_WriteFrame+0x6e>
		currentSector++;
		currentOffset += SECTOR_SIZE;
		sectorsToWrite--;
	}
	
	return true;
    26b2:	81 e0       	ldi	r24, 0x01	; 1
    26b4:	01 c0       	rjmp	.+2      	; 0x26b8 <STORE_WriteFrame+0xdc>
	uint32_t currentOffset = 0;
	uint32_t sectorsToWrite;
	
	// Verify frame size
	if(frame->frameBytes > FRAME_BUFFER_SIZE) {
		return false;
    26b6:	80 e0       	ldi	r24, 0x00	; 0
		currentOffset += SECTOR_SIZE;
		sectorsToWrite--;
	}
	
	return true;
}
    26b8:	df 91       	pop	r29
    26ba:	cf 91       	pop	r28
    26bc:	1f 91       	pop	r17
    26be:	0f 91       	pop	r16
    26c0:	ff 90       	pop	r15
    26c2:	ef 90       	pop	r14
    26c4:	df 90       	pop	r13
    26c6:	cf 90       	pop	r12
    26c8:	bf 90       	pop	r11
    26ca:	af 90       	pop	r10
    26cc:	9f 90       	pop	r9
    26ce:	8f 90       	pop	r8
    26d0:	08 95       	ret

Disassembly of section .text.STORE_StartNewSession:

0000418a <STORE_StartNewSession>:

bool STORE_StartNewSession(void) {
	// Update session info
	gState.sessionCount++;
    418a:	e8 e2       	ldi	r30, 0x28	; 40
    418c:	f5 e0       	ldi	r31, 0x05	; 5
    418e:	84 89       	ldd	r24, Z+20	; 0x14
    4190:	95 89       	ldd	r25, Z+21	; 0x15
    4192:	a6 89       	ldd	r26, Z+22	; 0x16
    4194:	b7 89       	ldd	r27, Z+23	; 0x17
    4196:	01 96       	adiw	r24, 0x01	; 1
    4198:	a1 1d       	adc	r26, r1
    419a:	b1 1d       	adc	r27, r1
    419c:	84 8b       	std	Z+20, r24	; 0x14
    419e:	95 8b       	std	Z+21, r25	; 0x15
    41a0:	a6 8b       	std	Z+22, r26	; 0x16
    41a2:	b7 8b       	std	Z+23, r27	; 0x17
	gState.newSessionSector = currentSector;
    41a4:	80 91 54 07 	lds	r24, 0x0754	; 0x800754 <currentSector>
    41a8:	90 91 55 07 	lds	r25, 0x0755	; 0x800755 <currentSector+0x1>
    41ac:	a0 91 56 07 	lds	r26, 0x0756	; 0x800756 <currentSector+0x2>
    41b0:	b0 91 57 07 	lds	r27, 0x0757	; 0x800757 <currentSector+0x3>
    41b4:	80 8f       	std	Z+24, r24	; 0x18
    41b6:	91 8f       	std	Z+25, r25	; 0x19
    41b8:	a2 8f       	std	Z+26, r26	; 0x1a
    41ba:	b3 8f       	std	Z+27, r27	; 0x1b
	// Ensure sector alignment for new sessions
	if(currentSector % SECTORS_PER_FRAME != 0) {
		currentSector += SECTORS_PER_FRAME - (currentSector % SECTORS_PER_FRAME);
	}
	
	return updateSessionMap();
    41bc:	0e 94 b7 14 	call	0x296e	; 0x296e <updateSessionMap>
}
    41c0:	08 95       	ret

Disassembly of section .text.STORE_EndSession:

00004470 <STORE_EndSession>:
	// Ensure we end on a frame boundary
	if(currentSector % SECTORS_PER_FRAME != 0) {
		currentSector += SECTORS_PER_FRAME - (currentSector % SECTORS_PER_FRAME);
	}
	
	gState.lastSessionSector = currentSector - 1;
    4470:	80 91 54 07 	lds	r24, 0x0754	; 0x800754 <currentSector>
    4474:	90 91 55 07 	lds	r25, 0x0755	; 0x800755 <currentSector+0x1>
    4478:	a0 91 56 07 	lds	r26, 0x0756	; 0x800756 <currentSector+0x2>
    447c:	b0 91 57 07 	lds	r27, 0x0757	; 0x800757 <currentSector+0x3>
    4480:	01 97       	sbiw	r24, 0x01	; 1
    4482:	a1 09       	sbc	r26, r1
    4484:	b1 09       	sbc	r27, r1
    4486:	80 93 38 05 	sts	0x0538, r24	; 0x800538 <gState+0x10>
    448a:	90 93 39 05 	sts	0x0539, r25	; 0x800539 <gState+0x11>
    448e:	a0 93 3a 05 	sts	0x053A, r26	; 0x80053a <gState+0x12>
    4492:	b0 93 3b 05 	sts	0x053B, r27	; 0x80053b <gState+0x13>
	return writeGlobalState();
    4496:	0e 94 7f 21 	call	0x42fe	; 0x42fe <writeGlobalState>
}
    449a:	08 95       	ret

Disassembly of section .text.vUARTtxDataAvailable:

00004886 <vUARTtxDataAvailable>:
#endif

bool vUARTIsBusy(void) {
	return ((sg_etxState != ESTATE_IDLE) ||
		(sg_eCell_mc_rxState != ESTATE_IDLE));
}
    4886:	80 91 73 07 	lds	r24, 0x0773	; 0x800773 <sg_u8SendIndex>
    488a:	81 11       	cpse	r24, r1
    488c:	06 c0       	rjmp	.+12     	; 0x489a <vUARTtxDataAvailable+0x14>
    488e:	0e 94 8b 22 	call	0x4516	; 0x4516 <PlatformGetSendData>
    4892:	90 93 5d 07 	sts	0x075D, r25	; 0x80075d <sg_u8SendData+0x1>
    4896:	80 93 5c 07 	sts	0x075C, r24	; 0x80075c <sg_u8SendData>
    489a:	80 91 73 07 	lds	r24, 0x0773	; 0x800773 <sg_u8SendIndex>
    489e:	81 11       	cpse	r24, r1
    48a0:	02 c0       	rjmp	.+4      	; 0x48a6 <vUARTtxDataAvailable+0x20>
    48a2:	81 e0       	ldi	r24, 0x01	; 1
    48a4:	08 95       	ret
    48a6:	80 e0       	ldi	r24, 0x00	; 0
    48a8:	08 95       	ret

Disassembly of section .text.vUARTtxDataGet:

00003fc6 <vUARTtxDataGet>:
    3fc6:	80 91 73 07 	lds	r24, 0x0773	; 0x800773 <sg_u8SendIndex>
    3fca:	81 11       	cpse	r24, r1
    3fcc:	10 c0       	rjmp	.+32     	; 0x3fee <vUARTtxDataGet+0x28>
    3fce:	81 e0       	ldi	r24, 0x01	; 1
    3fd0:	0e 94 8b 22 	call	0x4516	; 0x4516 <PlatformGetSendData>
    3fd4:	ec e5       	ldi	r30, 0x5C	; 92
    3fd6:	f7 e0       	ldi	r31, 0x07	; 7
    3fd8:	90 83       	st	Z, r25
    3fda:	81 83       	std	Z+1, r24	; 0x01
    3fdc:	80 81       	ld	r24, Z
    3fde:	88 23       	and	r24, r24
    3fe0:	24 f4       	brge	.+8      	; 0x3fea <vUARTtxDataGet+0x24>
    3fe2:	81 e0       	ldi	r24, 0x01	; 1
    3fe4:	80 93 75 07 	sts	0x0775, r24	; 0x800775 <sg_bCellReportsReuested>
    3fe8:	02 c0       	rjmp	.+4      	; 0x3fee <vUARTtxDataGet+0x28>
    3fea:	10 92 75 07 	sts	0x0775, r1	; 0x800775 <sg_bCellReportsReuested>
    3fee:	e0 91 73 07 	lds	r30, 0x0773	; 0x800773 <sg_u8SendIndex>
    3ff2:	f0 e0       	ldi	r31, 0x00	; 0
    3ff4:	e4 5a       	subi	r30, 0xA4	; 164
    3ff6:	f8 4f       	sbci	r31, 0xF8	; 248
    3ff8:	80 81       	ld	r24, Z
    3ffa:	90 91 73 07 	lds	r25, 0x0773	; 0x800773 <sg_u8SendIndex>
    3ffe:	9f 5f       	subi	r25, 0xFF	; 255
    4000:	90 93 73 07 	sts	0x0773, r25	; 0x800773 <sg_u8SendIndex>
    4004:	90 91 73 07 	lds	r25, 0x0773	; 0x800773 <sg_u8SendIndex>
    4008:	92 30       	cpi	r25, 0x02	; 2
    400a:	10 f0       	brcs	.+4      	; 0x4010 <vUARTtxDataGet+0x4a>
    400c:	10 92 73 07 	sts	0x0773, r1	; 0x800773 <sg_u8SendIndex>
    4010:	08 95       	ret

Disassembly of section .text.vUARTRXReset:

00004b36 <vUARTRXReset>:

// Called when we have a string timeout or need to reset the state machine
// for the MC RX side of things
void vUARTRXReset(void)
{
	sg_eCell_mc_rxState = ESTATE_IDLE;
    4b36:	10 92 7c 07 	sts	0x077C, r1	; 0x80077c <sg_eCell_mc_rxState>
	vUARTRXStart();
    4b3a:	0e 94 e9 24 	call	0x49d2	; 0x49d2 <vUARTRXStart>
    4b3e:	08 95       	ret

Disassembly of section .text.vUARTStarttx:

00003d84 <vUARTStarttx>:
#endif

bool vUARTIsBusy(void) {
	return ((sg_etxState != ESTATE_IDLE) ||
		(sg_eCell_mc_rxState != ESTATE_IDLE));
}
    3d84:	80 91 76 07 	lds	r24, 0x0776	; 0x800776 <sg_etxState>
    3d88:	81 11       	cpse	r24, r1
    3d8a:	23 c0       	rjmp	.+70     	; 0x3dd2 <vUARTStarttx+0x4e>
    3d8c:	80 91 7c 07 	lds	r24, 0x077C	; 0x80077c <sg_eCell_mc_rxState>
    3d90:	81 11       	cpse	r24, r1
    3d92:	21 c0       	rjmp	.+66     	; 0x3dd6 <vUARTStarttx+0x52>
    3d94:	82 e0       	ldi	r24, 0x02	; 2
    3d96:	80 93 76 07 	sts	0x0776, r24	; 0x800776 <sg_etxState>
    3d9a:	10 92 73 07 	sts	0x0773, r1	; 0x800773 <sg_u8SendIndex>
    3d9e:	10 92 79 07 	sts	0x0779, r1	; 0x800779 <sg_u8txBitCount>
    3da2:	81 e0       	ldi	r24, 0x01	; 1
    3da4:	80 93 74 07 	sts	0x0774, r24	; 0x800774 <sg_bMCTxNextBit>
    3da8:	86 b5       	in	r24, 0x26	; 38
    3daa:	8e 5c       	subi	r24, 0xCE	; 206
    3dac:	87 bd       	out	0x27, r24	; 39
    3dae:	85 b3       	in	r24, 0x15	; 21
    3db0:	82 60       	ori	r24, 0x02	; 2
    3db2:	85 bb       	out	0x15, r24	; 21
    3db4:	ee e6       	ldi	r30, 0x6E	; 110
    3db6:	f0 e0       	ldi	r31, 0x00	; 0
    3db8:	80 81       	ld	r24, Z
    3dba:	82 60       	ori	r24, 0x02	; 2
    3dbc:	80 83       	st	Z, r24
    3dbe:	0e 94 43 24 	call	0x4886	; 0x4886 <vUARTtxDataAvailable>
    3dc2:	80 93 77 07 	sts	0x0777, r24	; 0x800777 <sg_btxMoreAvailable>
    3dc6:	0e 94 e3 1f 	call	0x3fc6	; 0x3fc6 <vUARTtxDataGet>
    3dca:	80 93 78 07 	sts	0x0778, r24	; 0x800778 <sg_u8txDataByte>
    3dce:	81 e0       	ldi	r24, 0x01	; 1
    3dd0:	08 95       	ret
    3dd2:	80 e0       	ldi	r24, 0x00	; 0
    3dd4:	08 95       	ret
    3dd6:	80 e0       	ldi	r24, 0x00	; 0
    3dd8:	08 95       	ret

Disassembly of section .text.__vector_8:

00003b4a <__vector_8>:
    3b4a:	1f 92       	push	r1
    3b4c:	0f 92       	push	r0
    3b4e:	0f b6       	in	r0, 0x3f	; 63
    3b50:	0f 92       	push	r0
    3b52:	11 24       	eor	r1, r1
    3b54:	8f 93       	push	r24
    3b56:	ef 93       	push	r30
    3b58:	ff 93       	push	r31
    3b5a:	86 b5       	in	r24, 0x26	; 38
    3b5c:	85 5c       	subi	r24, 0xC5	; 197
    3b5e:	88 bd       	out	0x28, r24	; 40
    3b60:	85 b3       	in	r24, 0x15	; 21
    3b62:	84 60       	ori	r24, 0x04	; 4
    3b64:	85 bb       	out	0x15, r24	; 21
    3b66:	ee e6       	ldi	r30, 0x6E	; 110
    3b68:	f0 e0       	ldi	r31, 0x00	; 0
    3b6a:	80 81       	ld	r24, Z
    3b6c:	84 60       	ori	r24, 0x04	; 4
    3b6e:	80 83       	st	Z, r24
    3b70:	8d b3       	in	r24, 0x1d	; 29
    3b72:	8d 7f       	andi	r24, 0xFD	; 253
    3b74:	8d bb       	out	0x1d, r24	; 29
    3b76:	80 91 72 07 	lds	r24, 0x0772	; 0x800772 <sg_bState>
    3b7a:	88 23       	and	r24, r24
    3b7c:	31 f0       	breq	.+12     	; 0x3b8a <__vector_8+0x40>
    3b7e:	88 b1       	in	r24, 0x08	; 8
    3b80:	80 68       	ori	r24, 0x80	; 128
    3b82:	88 b9       	out	0x08, r24	; 8
    3b84:	10 92 72 07 	sts	0x0772, r1	; 0x800772 <sg_bState>
    3b88:	06 c0       	rjmp	.+12     	; 0x3b96 <__vector_8+0x4c>
    3b8a:	88 b1       	in	r24, 0x08	; 8
    3b8c:	8f 77       	andi	r24, 0x7F	; 127
    3b8e:	88 b9       	out	0x08, r24	; 8
    3b90:	81 e0       	ldi	r24, 0x01	; 1
    3b92:	80 93 72 07 	sts	0x0772, r24	; 0x800772 <sg_bState>
    3b96:	81 e0       	ldi	r24, 0x01	; 1
    3b98:	80 93 7c 07 	sts	0x077C, r24	; 0x80077c <sg_eCell_mc_rxState>
    3b9c:	10 92 7e 07 	sts	0x077E, r1	; 0x80077e <sg_u8Cell_mc_rxBitCount>
    3ba0:	ff 91       	pop	r31
    3ba2:	ef 91       	pop	r30
    3ba4:	8f 91       	pop	r24
    3ba6:	0f 90       	pop	r0
    3ba8:	0f be       	out	0x3f, r0	; 63
    3baa:	0f 90       	pop	r0
    3bac:	1f 90       	pop	r1
    3bae:	18 95       	reti

Disassembly of section .text.__vector_16:

000027b4 <__vector_16>:
    27b4:	1f 92       	push	r1
    27b6:	0f 92       	push	r0
    27b8:	0f b6       	in	r0, 0x3f	; 63
    27ba:	0f 92       	push	r0
    27bc:	11 24       	eor	r1, r1
    27be:	2f 93       	push	r18
    27c0:	3f 93       	push	r19
    27c2:	4f 93       	push	r20
    27c4:	5f 93       	push	r21
    27c6:	6f 93       	push	r22
    27c8:	7f 93       	push	r23
    27ca:	8f 93       	push	r24
    27cc:	9f 93       	push	r25
    27ce:	af 93       	push	r26
    27d0:	bf 93       	push	r27
    27d2:	ef 93       	push	r30
    27d4:	ff 93       	push	r31
    27d6:	86 b5       	in	r24, 0x26	; 38
    27d8:	85 5d       	subi	r24, 0xD5	; 213
    27da:	88 bd       	out	0x28, r24	; 40
    27dc:	85 b3       	in	r24, 0x15	; 21
    27de:	84 60       	ori	r24, 0x04	; 4
    27e0:	85 bb       	out	0x15, r24	; 21
    27e2:	ee e6       	ldi	r30, 0x6E	; 110
    27e4:	f0 e0       	ldi	r31, 0x00	; 0
    27e6:	80 81       	ld	r24, Z
    27e8:	84 60       	ori	r24, 0x04	; 4
    27ea:	80 83       	st	Z, r24
    27ec:	20 91 7b 07 	lds	r18, 0x077B	; 0x80077b <sg_bCell_mc_rxPriorState>
    27f0:	83 b1       	in	r24, 0x03	; 3
    27f2:	82 fb       	bst	r24, 2
    27f4:	88 27       	eor	r24, r24
    27f6:	80 f9       	bld	r24, 0
    27f8:	80 93 7b 07 	sts	0x077B, r24	; 0x80077b <sg_bCell_mc_rxPriorState>
    27fc:	90 91 72 07 	lds	r25, 0x0772	; 0x800772 <sg_bState>
    2800:	99 23       	and	r25, r25
    2802:	31 f0       	breq	.+12     	; 0x2810 <__vector_16+0x5c>
    2804:	98 b1       	in	r25, 0x08	; 8
    2806:	90 68       	ori	r25, 0x80	; 128
    2808:	98 b9       	out	0x08, r25	; 8
    280a:	10 92 72 07 	sts	0x0772, r1	; 0x800772 <sg_bState>
    280e:	06 c0       	rjmp	.+12     	; 0x281c <__vector_16+0x68>
    2810:	98 b1       	in	r25, 0x08	; 8
    2812:	9f 77       	andi	r25, 0x7F	; 127
    2814:	98 b9       	out	0x08, r25	; 8
    2816:	81 e0       	ldi	r24, 0x01	; 1
    2818:	80 93 72 07 	sts	0x0772, r24	; 0x800772 <sg_bState>
    281c:	80 91 7e 07 	lds	r24, 0x077E	; 0x80077e <sg_u8Cell_mc_rxBitCount>
    2820:	8f 5f       	subi	r24, 0xFF	; 255
    2822:	80 93 7e 07 	sts	0x077E, r24	; 0x80077e <sg_u8Cell_mc_rxBitCount>
    2826:	81 30       	cpi	r24, 0x01	; 1
    2828:	19 f4       	brne	.+6      	; 0x2830 <__vector_16+0x7c>
    282a:	10 92 7d 07 	sts	0x077D, r1	; 0x80077d <sg_u8rxDataByte>
    282e:	20 c0       	rjmp	.+64     	; 0x2870 <__vector_16+0xbc>
    2830:	8a 30       	cpi	r24, 0x0A	; 10
    2832:	38 f4       	brcc	.+14     	; 0x2842 <__vector_16+0x8e>
    2834:	80 91 7d 07 	lds	r24, 0x077D	; 0x80077d <sg_u8rxDataByte>
    2838:	88 0f       	add	r24, r24
    283a:	82 2b       	or	r24, r18
    283c:	80 93 7d 07 	sts	0x077D, r24	; 0x80077d <sg_u8rxDataByte>
    2840:	17 c0       	rjmp	.+46     	; 0x2870 <__vector_16+0xbc>
    2842:	20 93 7a 07 	sts	0x077A, r18	; 0x80077a <sg_bCell_mc_rxMoreData>
    2846:	8c e0       	ldi	r24, 0x0C	; 12
    2848:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f0069>
    284c:	8c b3       	in	r24, 0x1c	; 28
    284e:	82 60       	ori	r24, 0x02	; 2
    2850:	8c bb       	out	0x1c, r24	; 28
    2852:	8d b3       	in	r24, 0x1d	; 29
    2854:	82 60       	ori	r24, 0x02	; 2
    2856:	8d bb       	out	0x1d, r24	; 29
    2858:	ee e6       	ldi	r30, 0x6E	; 110
    285a:	f0 e0       	ldi	r31, 0x00	; 0
    285c:	80 81       	ld	r24, Z
    285e:	8b 7f       	andi	r24, 0xFB	; 251
    2860:	80 83       	st	Z, r24
    2862:	80 91 7d 07 	lds	r24, 0x077D	; 0x80077d <sg_u8rxDataByte>
    2866:	0e 94 c8 1c 	call	0x3990	; 0x3990 <vUARTRXData>
    286a:	83 e0       	ldi	r24, 0x03	; 3
    286c:	80 93 7c 07 	sts	0x077C, r24	; 0x80077c <sg_eCell_mc_rxState>
    2870:	ff 91       	pop	r31
    2872:	ef 91       	pop	r30
    2874:	bf 91       	pop	r27
    2876:	af 91       	pop	r26
    2878:	9f 91       	pop	r25
    287a:	8f 91       	pop	r24
    287c:	7f 91       	pop	r23
    287e:	6f 91       	pop	r22
    2880:	5f 91       	pop	r21
    2882:	4f 91       	pop	r20
    2884:	3f 91       	pop	r19
    2886:	2f 91       	pop	r18
    2888:	0f 90       	pop	r0
    288a:	0f be       	out	0x3f, r0	; 63
    288c:	0f 90       	pop	r0
    288e:	1f 90       	pop	r1
    2890:	18 95       	reti

Disassembly of section .text.__vector_15:

0000218e <__vector_15>:
    218e:	1f 92       	push	r1
    2190:	0f 92       	push	r0
    2192:	0f b6       	in	r0, 0x3f	; 63
    2194:	0f 92       	push	r0
    2196:	11 24       	eor	r1, r1
    2198:	2f 93       	push	r18
    219a:	3f 93       	push	r19
    219c:	4f 93       	push	r20
    219e:	5f 93       	push	r21
    21a0:	6f 93       	push	r22
    21a2:	7f 93       	push	r23
    21a4:	8f 93       	push	r24
    21a6:	9f 93       	push	r25
    21a8:	af 93       	push	r26
    21aa:	bf 93       	push	r27
    21ac:	ef 93       	push	r30
    21ae:	ff 93       	push	r31
    21b0:	86 b5       	in	r24, 0x26	; 38
    21b2:	83 5d       	subi	r24, 0xD3	; 211
    21b4:	87 bd       	out	0x27, r24	; 39
    21b6:	85 b3       	in	r24, 0x15	; 21
    21b8:	82 60       	ori	r24, 0x02	; 2
    21ba:	85 bb       	out	0x15, r24	; 21
    21bc:	ee e6       	ldi	r30, 0x6E	; 110
    21be:	f0 e0       	ldi	r31, 0x00	; 0
    21c0:	80 81       	ld	r24, Z
    21c2:	82 60       	ori	r24, 0x02	; 2
    21c4:	80 83       	st	Z, r24
    21c6:	80 91 74 07 	lds	r24, 0x0774	; 0x800774 <sg_bMCTxNextBit>
    21ca:	88 23       	and	r24, r24
    21cc:	21 f0       	breq	.+8      	; 0x21d6 <__vector_15+0x48>
    21ce:	85 b1       	in	r24, 0x05	; 5
    21d0:	88 60       	ori	r24, 0x08	; 8
    21d2:	85 b9       	out	0x05, r24	; 5
    21d4:	03 c0       	rjmp	.+6      	; 0x21dc <__vector_15+0x4e>
    21d6:	85 b1       	in	r24, 0x05	; 5
    21d8:	87 7f       	andi	r24, 0xF7	; 247
    21da:	85 b9       	out	0x05, r24	; 5
    21dc:	80 91 79 07 	lds	r24, 0x0779	; 0x800779 <sg_u8txBitCount>
    21e0:	8f 5f       	subi	r24, 0xFF	; 255
    21e2:	80 93 79 07 	sts	0x0779, r24	; 0x800779 <sg_u8txBitCount>
    21e6:	80 91 79 07 	lds	r24, 0x0779	; 0x800779 <sg_u8txBitCount>
    21ea:	83 30       	cpi	r24, 0x03	; 3
    21ec:	61 f4       	brne	.+24     	; 0x2206 <__vector_15+0x78>
    21ee:	80 91 75 07 	lds	r24, 0x0775	; 0x800775 <sg_bCellReportsReuested>
    21f2:	88 23       	and	r24, r24
    21f4:	41 f0       	breq	.+16     	; 0x2206 <__vector_15+0x78>
    21f6:	8b e0       	ldi	r24, 0x0B	; 11
    21f8:	80 93 79 07 	sts	0x0779, r24	; 0x800779 <sg_u8txBitCount>
    21fc:	10 92 74 07 	sts	0x0774, r1	; 0x800774 <sg_bMCTxNextBit>
    2200:	10 92 77 07 	sts	0x0777, r1	; 0x800777 <sg_btxMoreAvailable>
    2204:	4d c0       	rjmp	.+154    	; 0x22a0 <__vector_15+0x112>
    2206:	80 91 79 07 	lds	r24, 0x0779	; 0x800779 <sg_u8txBitCount>
    220a:	8a 30       	cpi	r24, 0x0A	; 10
    220c:	80 f4       	brcc	.+32     	; 0x222e <__vector_15+0xa0>
    220e:	80 91 78 07 	lds	r24, 0x0778	; 0x800778 <sg_u8txDataByte>
    2212:	88 23       	and	r24, r24
    2214:	24 f4       	brge	.+8      	; 0x221e <__vector_15+0x90>
    2216:	81 e0       	ldi	r24, 0x01	; 1
    2218:	80 93 74 07 	sts	0x0774, r24	; 0x800774 <sg_bMCTxNextBit>
    221c:	02 c0       	rjmp	.+4      	; 0x2222 <__vector_15+0x94>
    221e:	10 92 74 07 	sts	0x0774, r1	; 0x800774 <sg_bMCTxNextBit>
    2222:	80 91 78 07 	lds	r24, 0x0778	; 0x800778 <sg_u8txDataByte>
    2226:	88 0f       	add	r24, r24
    2228:	80 93 78 07 	sts	0x0778, r24	; 0x800778 <sg_u8txDataByte>
    222c:	39 c0       	rjmp	.+114    	; 0x22a0 <__vector_15+0x112>
    222e:	80 91 79 07 	lds	r24, 0x0779	; 0x800779 <sg_u8txBitCount>
    2232:	8a 30       	cpi	r24, 0x0A	; 10
    2234:	29 f4       	brne	.+10     	; 0x2240 <__vector_15+0xb2>
    2236:	80 91 77 07 	lds	r24, 0x0777	; 0x800777 <sg_btxMoreAvailable>
    223a:	80 93 74 07 	sts	0x0774, r24	; 0x800774 <sg_bMCTxNextBit>
    223e:	30 c0       	rjmp	.+96     	; 0x22a0 <__vector_15+0x112>
    2240:	80 91 79 07 	lds	r24, 0x0779	; 0x800779 <sg_u8txBitCount>
    2244:	8b 30       	cpi	r24, 0x0B	; 11
    2246:	19 f4       	brne	.+6      	; 0x224e <__vector_15+0xc0>
    2248:	10 92 74 07 	sts	0x0774, r1	; 0x800774 <sg_bMCTxNextBit>
    224c:	29 c0       	rjmp	.+82     	; 0x22a0 <__vector_15+0x112>
    224e:	80 91 79 07 	lds	r24, 0x0779	; 0x800779 <sg_u8txBitCount>
    2252:	8c 30       	cpi	r24, 0x0C	; 12
    2254:	29 f5       	brne	.+74     	; 0x22a0 <__vector_15+0x112>
    2256:	80 91 77 07 	lds	r24, 0x0777	; 0x800777 <sg_btxMoreAvailable>
    225a:	80 93 74 07 	sts	0x0774, r24	; 0x800774 <sg_bMCTxNextBit>
    225e:	10 92 79 07 	sts	0x0779, r1	; 0x800779 <sg_u8txBitCount>
    2262:	80 91 77 07 	lds	r24, 0x0777	; 0x800777 <sg_btxMoreAvailable>
    2266:	81 11       	cpse	r24, r1
    2268:	08 c0       	rjmp	.+16     	; 0x227a <__vector_15+0xec>
    226a:	10 92 76 07 	sts	0x0776, r1	; 0x800776 <sg_etxState>
    226e:	ee e6       	ldi	r30, 0x6E	; 110
    2270:	f0 e0       	ldi	r31, 0x00	; 0
    2272:	80 81       	ld	r24, Z
    2274:	8d 7f       	andi	r24, 0xFD	; 253
    2276:	80 83       	st	Z, r24
    2278:	13 c0       	rjmp	.+38     	; 0x22a0 <__vector_15+0x112>
    227a:	0e 94 43 24 	call	0x4886	; 0x4886 <vUARTtxDataAvailable>
    227e:	80 93 77 07 	sts	0x0777, r24	; 0x800777 <sg_btxMoreAvailable>
    2282:	0e 94 e3 1f 	call	0x3fc6	; 0x3fc6 <vUARTtxDataGet>
    2286:	80 93 78 07 	sts	0x0778, r24	; 0x800778 <sg_u8txDataByte>
    228a:	86 b5       	in	r24, 0x26	; 38
    228c:	88 53       	subi	r24, 0x38	; 56
    228e:	87 bd       	out	0x27, r24	; 39
    2290:	85 b3       	in	r24, 0x15	; 21
    2292:	82 60       	ori	r24, 0x02	; 2
    2294:	85 bb       	out	0x15, r24	; 21
    2296:	ee e6       	ldi	r30, 0x6E	; 110
    2298:	f0 e0       	ldi	r31, 0x00	; 0
    229a:	80 81       	ld	r24, Z
    229c:	82 60       	ori	r24, 0x02	; 2
    229e:	80 83       	st	Z, r24
    22a0:	ff 91       	pop	r31
    22a2:	ef 91       	pop	r30
    22a4:	bf 91       	pop	r27
    22a6:	af 91       	pop	r26
    22a8:	9f 91       	pop	r25
    22aa:	8f 91       	pop	r24
    22ac:	7f 91       	pop	r23
    22ae:	6f 91       	pop	r22
    22b0:	5f 91       	pop	r21
    22b2:	4f 91       	pop	r20
    22b4:	3f 91       	pop	r19
    22b6:	2f 91       	pop	r18
    22b8:	0f 90       	pop	r0
    22ba:	0f be       	out	0x3f, r0	; 63
    22bc:	0f 90       	pop	r0
    22be:	1f 90       	pop	r1
    22c0:	18 95       	reti

Disassembly of section .text.vUARTInit:

00004362 <vUARTInit>:
    4362:	85 b7       	in	r24, 0x35	; 53
    4364:	8f 7e       	andi	r24, 0xEF	; 239
    4366:	85 bf       	out	0x35, r24	; 53
    4368:	84 b1       	in	r24, 0x04	; 4
    436a:	88 60       	ori	r24, 0x08	; 8
    436c:	84 b9       	out	0x04, r24	; 4
    436e:	84 b1       	in	r24, 0x04	; 4
    4370:	8b 7f       	andi	r24, 0xFB	; 251
    4372:	84 b9       	out	0x04, r24	; 4
    4374:	85 b1       	in	r24, 0x05	; 5
    4376:	8b 7f       	andi	r24, 0xFB	; 251
    4378:	85 b9       	out	0x05, r24	; 5
    437a:	87 b1       	in	r24, 0x07	; 7
    437c:	80 68       	ori	r24, 0x80	; 128
    437e:	87 b9       	out	0x07, r24	; 7
    4380:	8d b3       	in	r24, 0x1d	; 29
    4382:	8d 7f       	andi	r24, 0xFD	; 253
    4384:	8d bb       	out	0x1d, r24	; 29
    4386:	10 92 76 07 	sts	0x0776, r1	; 0x800776 <sg_etxState>
    438a:	85 b1       	in	r24, 0x05	; 5
    438c:	87 7f       	andi	r24, 0xF7	; 247
    438e:	85 b9       	out	0x05, r24	; 5
    4390:	08 95       	ret

Disassembly of section .text.vUARTInitReceive:

00004a28 <vUARTInitReceive>:
    4a28:	8c e0       	ldi	r24, 0x0C	; 12
    4a2a:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f0069>
    4a2e:	8c b3       	in	r24, 0x1c	; 28
    4a30:	82 60       	ori	r24, 0x02	; 2
    4a32:	8c bb       	out	0x1c, r24	; 28
    4a34:	8d b3       	in	r24, 0x1d	; 29
    4a36:	82 60       	ori	r24, 0x02	; 2
    4a38:	8d bb       	out	0x1d, r24	; 29
    4a3a:	08 95       	ret

Disassembly of section .text.libgcc.div:

0000453e <__udivmodhi4>:
    453e:	aa 1b       	sub	r26, r26
    4540:	bb 1b       	sub	r27, r27
    4542:	51 e1       	ldi	r21, 0x11	; 17
    4544:	07 c0       	rjmp	.+14     	; 0x4554 <__udivmodhi4_ep>

00004546 <__udivmodhi4_loop>:
    4546:	aa 1f       	adc	r26, r26
    4548:	bb 1f       	adc	r27, r27
    454a:	a6 17       	cp	r26, r22
    454c:	b7 07       	cpc	r27, r23
    454e:	10 f0       	brcs	.+4      	; 0x4554 <__udivmodhi4_ep>
    4550:	a6 1b       	sub	r26, r22
    4552:	b7 0b       	sbc	r27, r23

00004554 <__udivmodhi4_ep>:
    4554:	88 1f       	adc	r24, r24
    4556:	99 1f       	adc	r25, r25
    4558:	5a 95       	dec	r21
    455a:	a9 f7       	brne	.-22     	; 0x4546 <__udivmodhi4_loop>
    455c:	80 95       	com	r24
    455e:	90 95       	com	r25
    4560:	bc 01       	movw	r22, r24
    4562:	cd 01       	movw	r24, r26
    4564:	08 95       	ret

Disassembly of section .text.libgcc.div:

00004056 <__udivmodsi4>:
    4056:	a1 e2       	ldi	r26, 0x21	; 33
    4058:	1a 2e       	mov	r1, r26
    405a:	aa 1b       	sub	r26, r26
    405c:	bb 1b       	sub	r27, r27
    405e:	fd 01       	movw	r30, r26
    4060:	0d c0       	rjmp	.+26     	; 0x407c <__udivmodsi4_ep>

00004062 <__udivmodsi4_loop>:
    4062:	aa 1f       	adc	r26, r26
    4064:	bb 1f       	adc	r27, r27
    4066:	ee 1f       	adc	r30, r30
    4068:	ff 1f       	adc	r31, r31
    406a:	a2 17       	cp	r26, r18
    406c:	b3 07       	cpc	r27, r19
    406e:	e4 07       	cpc	r30, r20
    4070:	f5 07       	cpc	r31, r21
    4072:	20 f0       	brcs	.+8      	; 0x407c <__udivmodsi4_ep>
    4074:	a2 1b       	sub	r26, r18
    4076:	b3 0b       	sbc	r27, r19
    4078:	e4 0b       	sbc	r30, r20
    407a:	f5 0b       	sbc	r31, r21

0000407c <__udivmodsi4_ep>:
    407c:	66 1f       	adc	r22, r22
    407e:	77 1f       	adc	r23, r23
    4080:	88 1f       	adc	r24, r24
    4082:	99 1f       	adc	r25, r25
    4084:	1a 94       	dec	r1
    4086:	69 f7       	brne	.-38     	; 0x4062 <__udivmodsi4_loop>
    4088:	60 95       	com	r22
    408a:	70 95       	com	r23
    408c:	80 95       	com	r24
    408e:	90 95       	com	r25
    4090:	9b 01       	movw	r18, r22
    4092:	ac 01       	movw	r20, r24
    4094:	bd 01       	movw	r22, r26
    4096:	cf 01       	movw	r24, r30
    4098:	08 95       	ret

Disassembly of section .text.libgcc.div:

00004392 <__divmodsi4>:
    4392:	05 2e       	mov	r0, r21
    4394:	97 fb       	bst	r25, 7
    4396:	1e f4       	brtc	.+6      	; 0x439e <__divmodsi4+0xc>
    4398:	00 94       	com	r0
    439a:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <__negsi2>
    439e:	57 fd       	sbrc	r21, 7
    43a0:	07 d0       	rcall	.+14     	; 0x43b0 <__divmodsi4_neg2>
    43a2:	0e 94 2b 20 	call	0x4056	; 0x4056 <__udivmodsi4>
    43a6:	07 fc       	sbrc	r0, 7
    43a8:	03 d0       	rcall	.+6      	; 0x43b0 <__divmodsi4_neg2>
    43aa:	4e f4       	brtc	.+18     	; 0x43be <__divmodsi4_exit>
    43ac:	0c 94 4b 25 	jmp	0x4a96	; 0x4a96 <__negsi2>

000043b0 <__divmodsi4_neg2>:
    43b0:	50 95       	com	r21
    43b2:	40 95       	com	r20
    43b4:	30 95       	com	r19
    43b6:	21 95       	neg	r18
    43b8:	3f 4f       	sbci	r19, 0xFF	; 255
    43ba:	4f 4f       	sbci	r20, 0xFF	; 255
    43bc:	5f 4f       	sbci	r21, 0xFF	; 255

000043be <__divmodsi4_exit>:
    43be:	08 95       	ret

Disassembly of section .text.libgcc.div:

00004a96 <__negsi2>:
    4a96:	90 95       	com	r25
    4a98:	80 95       	com	r24
    4a9a:	70 95       	com	r23
    4a9c:	61 95       	neg	r22
    4a9e:	7f 4f       	sbci	r23, 0xFF	; 255
    4aa0:	8f 4f       	sbci	r24, 0xFF	; 255
    4aa2:	9f 4f       	sbci	r25, 0xFF	; 255
    4aa4:	08 95       	ret

Disassembly of section .text.libgcc.mul:

000048ec <__umulhisi3>:
    48ec:	a2 9f       	mul	r26, r18
    48ee:	b0 01       	movw	r22, r0
    48f0:	b3 9f       	mul	r27, r19
    48f2:	c0 01       	movw	r24, r0
    48f4:	a3 9f       	mul	r26, r19
    48f6:	70 0d       	add	r23, r0
    48f8:	81 1d       	adc	r24, r1
    48fa:	11 24       	eor	r1, r1
    48fc:	91 1d       	adc	r25, r1
    48fe:	b2 9f       	mul	r27, r18
    4900:	70 0d       	add	r23, r0
    4902:	81 1d       	adc	r24, r1
    4904:	11 24       	eor	r1, r1
    4906:	91 1d       	adc	r25, r1
    4908:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00004af0 <__usmulhisi3>:
    4af0:	0e 94 76 24 	call	0x48ec	; 0x48ec <__umulhisi3>

00004af4 <__usmulhisi3_tail>:
    4af4:	b7 ff       	sbrs	r27, 7
    4af6:	08 95       	ret
    4af8:	82 1b       	sub	r24, r18
    4afa:	93 0b       	sbc	r25, r19
    4afc:	08 95       	ret

Disassembly of section .text.libgcc.mul:

000049e8 <__muluhisi3>:
    49e8:	0e 94 76 24 	call	0x48ec	; 0x48ec <__umulhisi3>
    49ec:	a5 9f       	mul	r26, r21
    49ee:	90 0d       	add	r25, r0
    49f0:	b4 9f       	mul	r27, r20
    49f2:	90 0d       	add	r25, r0
    49f4:	a4 9f       	mul	r26, r20
    49f6:	80 0d       	add	r24, r0
    49f8:	91 1d       	adc	r25, r1
    49fa:	11 24       	eor	r1, r1
    49fc:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00004aa6 <__mulshisi3>:
    4aa6:	b7 ff       	sbrs	r27, 7
    4aa8:	0c 94 f4 24 	jmp	0x49e8	; 0x49e8 <__muluhisi3>

00004aac <__mulohisi3>:
    4aac:	0e 94 f4 24 	call	0x49e8	; 0x49e8 <__muluhisi3>
    4ab0:	82 1b       	sub	r24, r18
    4ab2:	93 0b       	sbc	r25, r19
    4ab4:	08 95       	ret

Disassembly of section .text.libgcc:

00004ab6 <__xload_2>:
    4ab6:	57 fd       	sbrc	r21, 7
    4ab8:	03 c0       	rjmp	.+6      	; 0x4ac0 <__xload_2+0xa>
    4aba:	65 91       	lpm	r22, Z+
    4abc:	75 91       	lpm	r23, Z+
    4abe:	08 95       	ret
    4ac0:	61 91       	ld	r22, Z+
    4ac2:	71 91       	ld	r23, Z+
    4ac4:	08 95       	ret

Disassembly of section .text.libgcc:

00004976 <__xload_4>:
    4976:	57 fd       	sbrc	r21, 7
    4978:	05 c0       	rjmp	.+10     	; 0x4984 <__xload_4+0xe>
    497a:	65 91       	lpm	r22, Z+
    497c:	75 91       	lpm	r23, Z+
    497e:	85 91       	lpm	r24, Z+
    4980:	95 91       	lpm	r25, Z+
    4982:	08 95       	ret
    4984:	61 91       	ld	r22, Z+
    4986:	71 91       	ld	r23, Z+
    4988:	81 91       	ld	r24, Z+
    498a:	91 91       	ld	r25, Z+
    498c:	08 95       	ret

Disassembly of section .text.libgcc:

0000498e <__adddi3_s8>:
    498e:	00 24       	eor	r0, r0
    4990:	a7 fd       	sbrc	r26, 7
    4992:	00 94       	com	r0
    4994:	2a 0f       	add	r18, r26
    4996:	30 1d       	adc	r19, r0
    4998:	40 1d       	adc	r20, r0
    499a:	50 1d       	adc	r21, r0
    499c:	60 1d       	adc	r22, r0
    499e:	70 1d       	adc	r23, r0
    49a0:	80 1d       	adc	r24, r0
    49a2:	90 1d       	adc	r25, r0
    49a4:	08 95       	ret

Disassembly of section .text.__dummy_fini:

00004b5a <_fini>:
    4b5a:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00004b5c <__funcs_on_exit>:
    4b5c:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00004b5e <__simulator_exit>:
    4b5e:	08 95       	ret

Disassembly of section .text.exit:

000049fe <exit>:
    49fe:	ec 01       	movw	r28, r24
    4a00:	0e 94 ae 25 	call	0x4b5c	; 0x4b5c <__funcs_on_exit>
    4a04:	0e 94 ad 25 	call	0x4b5a	; 0x4b5a <_fini>
    4a08:	ce 01       	movw	r24, r28
    4a0a:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <__simulator_exit>
    4a0e:	ce 01       	movw	r24, r28
    4a10:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <_Exit>

Disassembly of section .text.memcpy:

00004330 <memcpy>:
    4330:	cf 92       	push	r12
    4332:	df 92       	push	r13
    4334:	ef 92       	push	r14
    4336:	6a 01       	movw	r12, r20
    4338:	e6 2e       	mov	r14, r22
    433a:	dc 01       	movw	r26, r24
    433c:	28 0f       	add	r18, r24
    433e:	39 1f       	adc	r19, r25
    4340:	a2 17       	cp	r26, r18
    4342:	b3 07       	cpc	r27, r19
    4344:	51 f0       	breq	.+20     	; 0x435a <memcpy+0x2a>
    4346:	f6 01       	movw	r30, r12
    4348:	44 91       	lpm	r20, Z
    434a:	e7 fc       	sbrc	r14, 7
    434c:	40 81       	ld	r20, Z
    434e:	4d 93       	st	X+, r20
    4350:	4f ef       	ldi	r20, 0xFF	; 255
    4352:	c4 1a       	sub	r12, r20
    4354:	d4 0a       	sbc	r13, r20
    4356:	e4 0a       	sbc	r14, r20
    4358:	f3 cf       	rjmp	.-26     	; 0x4340 <memcpy+0x10>
    435a:	ef 90       	pop	r14
    435c:	df 90       	pop	r13
    435e:	cf 90       	pop	r12
    4360:	08 95       	ret

Disassembly of section .text.memset:

00004a4e <memset>:
    4a4e:	fc 01       	movw	r30, r24
    4a50:	48 0f       	add	r20, r24
    4a52:	59 1f       	adc	r21, r25
    4a54:	e4 17       	cp	r30, r20
    4a56:	f5 07       	cpc	r31, r21
    4a58:	11 f0       	breq	.+4      	; 0x4a5e <memset+0x10>
    4a5a:	61 93       	st	Z+, r22
    4a5c:	fb cf       	rjmp	.-10     	; 0x4a54 <memset+0x6>
    4a5e:	08 95       	ret

Disassembly of section .text.gmtime:

00004b40 <gmtime>:
    4b40:	40 e0       	ldi	r20, 0x00	; 0
    4b42:	57 e0       	ldi	r21, 0x07	; 7
    4b44:	0e 94 05 1d 	call	0x3a0a	; 0x3a0a <__gmtime_r>
    4b48:	08 95       	ret

Disassembly of section .text.__gmtime_r:

00003a0a <__gmtime_r>:
    3a0a:	a0 e0       	ldi	r26, 0x00	; 0
    3a0c:	b0 e0       	ldi	r27, 0x00	; 0
    3a0e:	eb e0       	ldi	r30, 0x0B	; 11
    3a10:	fd e1       	ldi	r31, 0x1D	; 29
    3a12:	0c 94 e7 20 	jmp	0x41ce	; 0x41ce <__prologue_saves__+0xc>
    3a16:	ea 01       	movw	r28, r20
    3a18:	fb 01       	movw	r30, r22
    3a1a:	58 2f       	mov	r21, r24
    3a1c:	0e 94 bb 24 	call	0x4976	; 0x4976 <__xload_4>
    3a20:	4b 01       	movw	r8, r22
    3a22:	5c 01       	movw	r10, r24
    3a24:	c1 2c       	mov	r12, r1
    3a26:	d1 2c       	mov	r13, r1
    3a28:	76 01       	movw	r14, r12
    3a2a:	8e 01       	movw	r16, r28
    3a2c:	9b 01       	movw	r18, r22
    3a2e:	a5 01       	movw	r20, r10
    3a30:	60 e0       	ldi	r22, 0x00	; 0
    3a32:	70 e0       	ldi	r23, 0x00	; 0
    3a34:	80 e0       	ldi	r24, 0x00	; 0
    3a36:	90 e0       	ldi	r25, 0x00	; 0
    3a38:	0e 94 32 01 	call	0x264	; 0x264 <__secs_to_tm>
    3a3c:	97 ff       	sbrs	r25, 7
    3a3e:	09 c0       	rjmp	.+18     	; 0x3a52 <__gmtime_r+0x48>
    3a40:	8f e4       	ldi	r24, 0x4F	; 79
    3a42:	90 e0       	ldi	r25, 0x00	; 0
    3a44:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    3a48:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    3a4c:	80 e0       	ldi	r24, 0x00	; 0
    3a4e:	90 e0       	ldi	r25, 0x00	; 0
    3a50:	0d c0       	rjmp	.+26     	; 0x3a6c <__gmtime_r+0x62>
    3a52:	19 8a       	std	Y+17, r1	; 0x11
    3a54:	18 8a       	std	Y+16, r1	; 0x10
    3a56:	1a 8a       	std	Y+18, r1	; 0x12
    3a58:	1b 8a       	std	Y+19, r1	; 0x13
    3a5a:	1c 8a       	std	Y+20, r1	; 0x14
    3a5c:	1d 8a       	std	Y+21, r1	; 0x15
    3a5e:	8c e5       	ldi	r24, 0x5C	; 92
    3a60:	92 e0       	ldi	r25, 0x02	; 2
    3a62:	a0 e0       	ldi	r26, 0x00	; 0
    3a64:	8e 8b       	std	Y+22, r24	; 0x16
    3a66:	9f 8b       	std	Y+23, r25	; 0x17
    3a68:	a8 8f       	std	Y+24, r26	; 0x18
    3a6a:	ce 01       	movw	r24, r28
    3a6c:	cd b7       	in	r28, 0x3d	; 61
    3a6e:	de b7       	in	r29, 0x3e	; 62
    3a70:	ec e0       	ldi	r30, 0x0C	; 12
    3a72:	0c 94 03 21 	jmp	0x4206	; 0x4206 <__epilogue_restores__+0xc>

Disassembly of section .text.mktime:

000035a0 <mktime>:
    35a0:	a9 e1       	ldi	r26, 0x19	; 25
    35a2:	b0 e0       	ldi	r27, 0x00	; 0
    35a4:	e6 ed       	ldi	r30, 0xD6	; 214
    35a6:	fa e1       	ldi	r31, 0x1A	; 26
    35a8:	0c 94 e3 20 	jmp	0x41c6	; 0x41c6 <__prologue_saves__+0x4>
    35ac:	2c 01       	movw	r4, r24
    35ae:	bc 01       	movw	r22, r24
    35b0:	80 e8       	ldi	r24, 0x80	; 128
    35b2:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <__tm_to_secs>
    35b6:	39 01       	movw	r6, r18
    35b8:	4a 01       	movw	r8, r20
    35ba:	59 01       	movw	r10, r18
    35bc:	6a 01       	movw	r12, r20
    35be:	e1 2c       	mov	r14, r1
    35c0:	f1 2c       	mov	r15, r1
    35c2:	00 e0       	ldi	r16, 0x00	; 0
    35c4:	10 e0       	ldi	r17, 0x00	; 0
    35c6:	0e 94 42 25 	call	0x4a84	; 0x4a84 <__cmpdi2>
    35ca:	f9 f4       	brne	.+62     	; 0x360a <mktime+0x6a>
    35cc:	1a 8a       	std	Y+18, r1	; 0x12
    35ce:	19 8a       	std	Y+17, r1	; 0x11
    35d0:	1b 8a       	std	Y+19, r1	; 0x13
    35d2:	1c 8a       	std	Y+20, r1	; 0x14
    35d4:	1d 8a       	std	Y+21, r1	; 0x15
    35d6:	1e 8a       	std	Y+22, r1	; 0x16
    35d8:	20 e6       	ldi	r18, 0x60	; 96
    35da:	32 e0       	ldi	r19, 0x02	; 2
    35dc:	40 e0       	ldi	r20, 0x00	; 0
    35de:	2f 8b       	std	Y+23, r18	; 0x17
    35e0:	38 8f       	std	Y+24, r19	; 0x18
    35e2:	49 8f       	std	Y+25, r20	; 0x19
    35e4:	8e 01       	movw	r16, r28
    35e6:	0f 5f       	subi	r16, 0xFF	; 255
    35e8:	1f 4f       	sbci	r17, 0xFF	; 255
    35ea:	93 01       	movw	r18, r6
    35ec:	48 2d       	mov	r20, r8
    35ee:	0e 94 32 01 	call	0x264	; 0x264 <__secs_to_tm>
    35f2:	97 fd       	sbrc	r25, 7
    35f4:	0a c0       	rjmp	.+20     	; 0x360a <mktime+0x6a>
    35f6:	89 e1       	ldi	r24, 0x19	; 25
    35f8:	f8 01       	movw	r30, r16
    35fa:	d2 01       	movw	r26, r4
    35fc:	01 90       	ld	r0, Z+
    35fe:	0d 92       	st	X+, r0
    3600:	8a 95       	dec	r24
    3602:	e1 f7       	brne	.-8      	; 0x35fc <mktime+0x5c>
    3604:	b3 01       	movw	r22, r6
    3606:	c4 01       	movw	r24, r8
    3608:	0a c0       	rjmp	.+20     	; 0x361e <mktime+0x7e>
    360a:	8f e4       	ldi	r24, 0x4F	; 79
    360c:	90 e0       	ldi	r25, 0x00	; 0
    360e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    3612:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    3616:	6f ef       	ldi	r22, 0xFF	; 255
    3618:	7f ef       	ldi	r23, 0xFF	; 255
    361a:	8f ef       	ldi	r24, 0xFF	; 255
    361c:	9f ef       	ldi	r25, 0xFF	; 255
    361e:	69 96       	adiw	r28, 0x19	; 25
    3620:	e0 e1       	ldi	r30, 0x10	; 16
    3622:	0c 94 ff 20 	jmp	0x41fe	; 0x41fe <__epilogue_restores__+0x4>

Disassembly of section .text._Exit:

00004b54 <_Exit>:
    4b54:	0e 94 6b 00 	call	0xd6	; 0xd6 <_exit>

Disassembly of section .text.__tm_to_secs:

00001a24 <__tm_to_secs>:
    1a24:	a5 e0       	ldi	r26, 0x05	; 5
    1a26:	b0 e0       	ldi	r27, 0x00	; 0
    1a28:	e8 e1       	ldi	r30, 0x18	; 24
    1a2a:	fd e0       	ldi	r31, 0x0D	; 13
    1a2c:	0c 94 e1 20 	jmp	0x41c2	; 0x41c2 <__prologue_saves__>
    1a30:	3b 01       	movw	r6, r22
    1a32:	88 2e       	mov	r8, r24
    1a34:	a8 2f       	mov	r26, r24
    1a36:	cb 01       	movw	r24, r22
    1a38:	0a 96       	adiw	r24, 0x0a	; 10
    1a3a:	a1 1d       	adc	r26, r1
    1a3c:	fc 01       	movw	r30, r24
    1a3e:	5a 2f       	mov	r21, r26
    1a40:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <__xload_2>
    1a44:	5b 01       	movw	r10, r22
    1a46:	9b 01       	movw	r18, r22
    1a48:	9b 2c       	mov	r9, r11
    1a4a:	99 0c       	add	r9, r9
    1a4c:	99 08       	sbc	r9, r9
    1a4e:	f9 2c       	mov	r15, r9
    1a50:	b9 2d       	mov	r27, r9
    1a52:	a9 2d       	mov	r26, r9
    1a54:	89 2d       	mov	r24, r9
    1a56:	99 2d       	mov	r25, r9
    1a58:	e8 2c       	mov	r14, r8
    1a5a:	63 01       	movw	r12, r6
    1a5c:	48 e0       	ldi	r20, 0x08	; 8
    1a5e:	c4 0e       	add	r12, r20
    1a60:	d1 1c       	adc	r13, r1
    1a62:	e1 1c       	adc	r14, r1
    1a64:	f6 01       	movw	r30, r12
    1a66:	5e 2d       	mov	r21, r14
    1a68:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <__xload_2>
    1a6c:	2b 01       	movw	r4, r22
    1a6e:	6c 30       	cpi	r22, 0x0C	; 12
    1a70:	71 05       	cpc	r23, r1
    1a72:	10 f1       	brcs	.+68     	; 0x1ab8 <__tm_to_secs+0x94>
    1a74:	cb 01       	movw	r24, r22
    1a76:	6c e0       	ldi	r22, 0x0C	; 12
    1a78:	70 e0       	ldi	r23, 0x00	; 0
    1a7a:	0e 94 b3 22 	call	0x4566	; 0x4566 <__divmodhi4>
    1a7e:	2c 01       	movw	r4, r24
    1a80:	97 ff       	sbrs	r25, 7
    1a82:	05 c0       	rjmp	.+10     	; 0x1a8e <__tm_to_secs+0x6a>
    1a84:	61 50       	subi	r22, 0x01	; 1
    1a86:	71 09       	sbc	r23, r1
    1a88:	8c e0       	ldi	r24, 0x0C	; 12
    1a8a:	48 0e       	add	r4, r24
    1a8c:	51 1c       	adc	r5, r1
    1a8e:	97 2f       	mov	r25, r23
    1a90:	99 0f       	add	r25, r25
    1a92:	99 0b       	sbc	r25, r25
    1a94:	9b 01       	movw	r18, r22
    1a96:	49 2f       	mov	r20, r25
    1a98:	59 2f       	mov	r21, r25
    1a9a:	69 2f       	mov	r22, r25
    1a9c:	79 2f       	mov	r23, r25
    1a9e:	89 2f       	mov	r24, r25
    1aa0:	c9 2c       	mov	r12, r9
    1aa2:	d9 2c       	mov	r13, r9
    1aa4:	e9 2c       	mov	r14, r9
    1aa6:	f9 2c       	mov	r15, r9
    1aa8:	09 2d       	mov	r16, r9
    1aaa:	19 2d       	mov	r17, r9
    1aac:	0e 94 39 25 	call	0x4a72	; 0x4a72 <__adddi3>
    1ab0:	94 2e       	mov	r9, r20
    1ab2:	f5 2e       	mov	r15, r21
    1ab4:	b6 2f       	mov	r27, r22
    1ab6:	a7 2f       	mov	r26, r23
    1ab8:	8e 01       	movw	r16, r28
    1aba:	0f 5f       	subi	r16, 0xFF	; 255
    1abc:	1f 4f       	sbci	r17, 0xFF	; 255
    1abe:	49 2d       	mov	r20, r9
    1ac0:	5f 2d       	mov	r21, r15
    1ac2:	6b 2f       	mov	r22, r27
    1ac4:	7a 2f       	mov	r23, r26
    1ac6:	0e 94 dd 07 	call	0xfba	; 0xfba <__year_to_secs>
    1aca:	59 01       	movw	r10, r18
    1acc:	6a 01       	movw	r12, r20
    1ace:	7b 01       	movw	r14, r22
    1ad0:	8c 01       	movw	r16, r24
    1ad2:	69 81       	ldd	r22, Y+1	; 0x01
    1ad4:	7a 81       	ldd	r23, Y+2	; 0x02
    1ad6:	c2 01       	movw	r24, r4
    1ad8:	0e 94 8a 20 	call	0x4114	; 0x4114 <__month_to_secs>
    1adc:	1b 01       	movw	r2, r22
    1ade:	2c 01       	movw	r4, r24
    1ae0:	55 0c       	add	r5, r5
    1ae2:	22 08       	sbc	r2, r2
    1ae4:	32 2c       	mov	r3, r2
    1ae6:	21 01       	movw	r4, r2
    1ae8:	9b 01       	movw	r18, r22
    1aea:	ac 01       	movw	r20, r24
    1aec:	62 2d       	mov	r22, r2
    1aee:	72 2d       	mov	r23, r2
    1af0:	82 2d       	mov	r24, r2
    1af2:	92 2d       	mov	r25, r2
    1af4:	0e 94 39 25 	call	0x4a72	; 0x4a72 <__adddi3>
    1af8:	19 01       	movw	r2, r18
    1afa:	2a 01       	movw	r4, r20
    1afc:	96 2e       	mov	r9, r22
    1afe:	7b 83       	std	Y+3, r23	; 0x03
    1b00:	8c 83       	std	Y+4, r24	; 0x04
    1b02:	9d 83       	std	Y+5, r25	; 0x05
    1b04:	a8 2d       	mov	r26, r8
    1b06:	c3 01       	movw	r24, r6
    1b08:	06 96       	adiw	r24, 0x06	; 6
    1b0a:	a1 1d       	adc	r26, r1
    1b0c:	fc 01       	movw	r30, r24
    1b0e:	5a 2f       	mov	r21, r26
    1b10:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <__xload_2>
    1b14:	61 50       	subi	r22, 0x01	; 1
    1b16:	71 09       	sbc	r23, r1
    1b18:	97 2f       	mov	r25, r23
    1b1a:	99 0f       	add	r25, r25
    1b1c:	99 0b       	sbc	r25, r25
    1b1e:	30 e8       	ldi	r19, 0x80	; 128
    1b20:	a3 2e       	mov	r10, r19
    1b22:	41 e5       	ldi	r20, 0x51	; 81
    1b24:	b4 2e       	mov	r11, r20
    1b26:	cc 24       	eor	r12, r12
    1b28:	c3 94       	inc	r12
    1b2a:	d1 2c       	mov	r13, r1
    1b2c:	e1 2c       	mov	r14, r1
    1b2e:	f1 2c       	mov	r15, r1
    1b30:	00 e0       	ldi	r16, 0x00	; 0
    1b32:	10 e0       	ldi	r17, 0x00	; 0
    1b34:	9b 01       	movw	r18, r22
    1b36:	49 2f       	mov	r20, r25
    1b38:	59 2f       	mov	r21, r25
    1b3a:	69 2f       	mov	r22, r25
    1b3c:	79 2f       	mov	r23, r25
    1b3e:	89 2f       	mov	r24, r25
    1b40:	0e 94 d7 18 	call	0x31ae	; 0x31ae <__muldi3>
    1b44:	51 01       	movw	r10, r2
    1b46:	62 01       	movw	r12, r4
    1b48:	e9 2c       	mov	r14, r9
    1b4a:	fb 80       	ldd	r15, Y+3	; 0x03
    1b4c:	0c 81       	ldd	r16, Y+4	; 0x04
    1b4e:	1d 81       	ldd	r17, Y+5	; 0x05
    1b50:	0e 94 39 25 	call	0x4a72	; 0x4a72 <__adddi3>
    1b54:	59 01       	movw	r10, r18
    1b56:	6a 01       	movw	r12, r20
    1b58:	7b 01       	movw	r14, r22
    1b5a:	8c 01       	movw	r16, r24
    1b5c:	a8 2d       	mov	r26, r8
    1b5e:	c3 01       	movw	r24, r6
    1b60:	04 96       	adiw	r24, 0x04	; 4
    1b62:	a1 1d       	adc	r26, r1
    1b64:	fc 01       	movw	r30, r24
    1b66:	5a 2f       	mov	r21, r26
    1b68:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <__xload_2>
    1b6c:	07 2e       	mov	r0, r23
    1b6e:	00 0c       	add	r0, r0
    1b70:	88 0b       	sbc	r24, r24
    1b72:	99 0b       	sbc	r25, r25
    1b74:	20 e1       	ldi	r18, 0x10	; 16
    1b76:	3e e0       	ldi	r19, 0x0E	; 14
    1b78:	40 e0       	ldi	r20, 0x00	; 0
    1b7a:	50 e0       	ldi	r21, 0x00	; 0
    1b7c:	0e 94 85 24 	call	0x490a	; 0x490a <__mulsidi3>
    1b80:	0e 94 39 25 	call	0x4a72	; 0x4a72 <__adddi3>
    1b84:	59 01       	movw	r10, r18
    1b86:	6a 01       	movw	r12, r20
    1b88:	7b 01       	movw	r14, r22
    1b8a:	8c 01       	movw	r16, r24
    1b8c:	a8 2d       	mov	r26, r8
    1b8e:	c3 01       	movw	r24, r6
    1b90:	02 96       	adiw	r24, 0x02	; 2
    1b92:	a1 1d       	adc	r26, r1
    1b94:	fc 01       	movw	r30, r24
    1b96:	5a 2f       	mov	r21, r26
    1b98:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <__xload_2>
    1b9c:	07 2e       	mov	r0, r23
    1b9e:	00 0c       	add	r0, r0
    1ba0:	88 0b       	sbc	r24, r24
    1ba2:	99 0b       	sbc	r25, r25
    1ba4:	2c e3       	ldi	r18, 0x3C	; 60
    1ba6:	30 e0       	ldi	r19, 0x00	; 0
    1ba8:	40 e0       	ldi	r20, 0x00	; 0
    1baa:	50 e0       	ldi	r21, 0x00	; 0
    1bac:	0e 94 85 24 	call	0x490a	; 0x490a <__mulsidi3>
    1bb0:	0e 94 39 25 	call	0x4a72	; 0x4a72 <__adddi3>
    1bb4:	59 01       	movw	r10, r18
    1bb6:	6a 01       	movw	r12, r20
    1bb8:	7b 01       	movw	r14, r22
    1bba:	8c 01       	movw	r16, r24
    1bbc:	f3 01       	movw	r30, r6
    1bbe:	58 2d       	mov	r21, r8
    1bc0:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <__xload_2>
    1bc4:	9b 01       	movw	r18, r22
    1bc6:	93 2f       	mov	r25, r19
    1bc8:	99 0f       	add	r25, r25
    1bca:	99 0b       	sbc	r25, r25
    1bcc:	49 2f       	mov	r20, r25
    1bce:	59 2f       	mov	r21, r25
    1bd0:	69 2f       	mov	r22, r25
    1bd2:	79 2f       	mov	r23, r25
    1bd4:	89 2f       	mov	r24, r25
    1bd6:	0e 94 39 25 	call	0x4a72	; 0x4a72 <__adddi3>
    1bda:	25 96       	adiw	r28, 0x05	; 5
    1bdc:	e2 e1       	ldi	r30, 0x12	; 18
    1bde:	0c 94 fd 20 	jmp	0x41fa	; 0x41fa <__epilogue_restores__>

Disassembly of section .text.__year_to_secs:

00000fba <__year_to_secs>:
     fba:	ac e0       	ldi	r26, 0x0C	; 12
     fbc:	b0 e0       	ldi	r27, 0x00	; 0
     fbe:	e3 ee       	ldi	r30, 0xE3	; 227
     fc0:	f7 e0       	ldi	r31, 0x07	; 7
     fc2:	0c 94 e1 20 	jmp	0x41c2	; 0x41c2 <__prologue_saves__>
     fc6:	49 01       	movw	r8, r18
     fc8:	5a 01       	movw	r10, r20
     fca:	6b 01       	movw	r12, r22
     fcc:	7c 01       	movw	r14, r24
     fce:	1c 83       	std	Y+4, r17	; 0x04
     fd0:	0b 83       	std	Y+3, r16	; 0x03
     fd2:	2a 38       	cpi	r18, 0x8A	; 138
     fd4:	31 05       	cpc	r19, r1
     fd6:	41 05       	cpc	r20, r1
     fd8:	51 05       	cpc	r21, r1
     fda:	61 05       	cpc	r22, r1
     fdc:	71 05       	cpc	r23, r1
     fde:	81 05       	cpc	r24, r1
     fe0:	91 05       	cpc	r25, r1
     fe2:	11 f0       	breq	.+4      	; 0xfe8 <__year_to_secs+0x2e>
     fe4:	0c f0       	brlt	.+2      	; 0xfe8 <__year_to_secs+0x2e>
     fe6:	42 c0       	rjmp	.+132    	; 0x106c <__DATA_REGION_LENGTH__+0x6c>
     fe8:	f9 01       	movw	r30, r18
     fea:	e4 54       	subi	r30, 0x44	; 68
     fec:	f1 09       	sbc	r31, r1
     fee:	f5 95       	asr	r31
     ff0:	e7 95       	ror	r30
     ff2:	f5 95       	asr	r31
     ff4:	e7 95       	ror	r30
     ff6:	c9 01       	movw	r24, r18
     ff8:	83 70       	andi	r24, 0x03	; 3
     ffa:	99 27       	eor	r25, r25
     ffc:	89 2b       	or	r24, r25
     ffe:	51 f4       	brne	.+20     	; 0x1014 <__DATA_REGION_LENGTH__+0x14>
    1000:	31 97       	sbiw	r30, 0x01	; 1
    1002:	01 15       	cp	r16, r1
    1004:	11 05       	cpc	r17, r1
    1006:	69 f0       	breq	.+26     	; 0x1022 <__DATA_REGION_LENGTH__+0x22>
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	d8 01       	movw	r26, r16
    100e:	8d 93       	st	X+, r24
    1010:	9c 93       	st	X, r25
    1012:	07 c0       	rjmp	.+14     	; 0x1022 <__DATA_REGION_LENGTH__+0x22>
    1014:	8b 81       	ldd	r24, Y+3	; 0x03
    1016:	9c 81       	ldd	r25, Y+4	; 0x04
    1018:	00 97       	sbiw	r24, 0x00	; 0
    101a:	19 f0       	breq	.+6      	; 0x1022 <__DATA_REGION_LENGTH__+0x22>
    101c:	dc 01       	movw	r26, r24
    101e:	1d 92       	st	X+, r1
    1020:	1c 92       	st	X, r1
    1022:	d9 01       	movw	r26, r18
    1024:	a6 54       	subi	r26, 0x46	; 70
    1026:	b1 09       	sbc	r27, r1
    1028:	20 e8       	ldi	r18, 0x80	; 128
    102a:	33 e3       	ldi	r19, 0x33	; 51
    102c:	41 ee       	ldi	r20, 0xE1	; 225
    102e:	51 e0       	ldi	r21, 0x01	; 1
    1030:	0e 94 53 25 	call	0x4aa6	; 0x4aa6 <__mulshisi3>
    1034:	6b 01       	movw	r12, r22
    1036:	7c 01       	movw	r14, r24
    1038:	df 01       	movw	r26, r30
    103a:	20 e8       	ldi	r18, 0x80	; 128
    103c:	31 e5       	ldi	r19, 0x51	; 81
    103e:	41 e0       	ldi	r20, 0x01	; 1
    1040:	50 e0       	ldi	r21, 0x00	; 0
    1042:	0e 94 53 25 	call	0x4aa6	; 0x4aa6 <__mulshisi3>
    1046:	dc 01       	movw	r26, r24
    1048:	cb 01       	movw	r24, r22
    104a:	8c 0d       	add	r24, r12
    104c:	9d 1d       	adc	r25, r13
    104e:	ae 1d       	adc	r26, r14
    1050:	bf 1d       	adc	r27, r15
    1052:	9c 01       	movw	r18, r24
    1054:	ad 01       	movw	r20, r26
    1056:	6c 01       	movw	r12, r24
    1058:	7d 01       	movw	r14, r26
    105a:	ff 0c       	add	r15, r15
    105c:	cc 08       	sbc	r12, r12
    105e:	dc 2c       	mov	r13, r12
    1060:	76 01       	movw	r14, r12
    1062:	ac 2d       	mov	r26, r12
    1064:	fc 2d       	mov	r31, r12
    1066:	ec 2d       	mov	r30, r12
    1068:	9c 2d       	mov	r25, r12
    106a:	cb c0       	rjmp	.+406    	; 0x1202 <__stack+0x103>
    106c:	eb 81       	ldd	r30, Y+3	; 0x03
    106e:	fc 81       	ldd	r31, Y+4	; 0x04
    1070:	ef 2b       	or	r30, r31
    1072:	31 f4       	brne	.+12     	; 0x1080 <__DATA_REGION_LENGTH__+0x80>
    1074:	1a 82       	std	Y+2, r1	; 0x02
    1076:	19 82       	std	Y+1, r1	; 0x01
    1078:	ce 01       	movw	r24, r28
    107a:	01 96       	adiw	r24, 0x01	; 1
    107c:	9c 83       	std	Y+4, r25	; 0x04
    107e:	8b 83       	std	Y+3, r24	; 0x03
    1080:	c4 01       	movw	r24, r8
    1082:	84 56       	subi	r24, 0x64	; 100
    1084:	91 09       	sbc	r25, r1
    1086:	60 e9       	ldi	r22, 0x90	; 144
    1088:	71 e0       	ldi	r23, 0x01	; 1
    108a:	0e 94 b3 22 	call	0x4566	; 0x4566 <__divmodhi4>
    108e:	7e 83       	std	Y+6, r23	; 0x06
    1090:	6d 83       	std	Y+5, r22	; 0x05
    1092:	94 01       	movw	r18, r8
    1094:	a5 01       	movw	r20, r10
    1096:	b6 01       	movw	r22, r12
    1098:	c7 01       	movw	r24, r14
    109a:	ac e9       	ldi	r26, 0x9C	; 156
    109c:	0e 94 c7 24 	call	0x498e	; 0x498e <__adddi3_s8>
    10a0:	19 01       	movw	r2, r18
    10a2:	2a 01       	movw	r4, r20
    10a4:	3b 01       	movw	r6, r22
    10a6:	8f 83       	std	Y+7, r24	; 0x07
    10a8:	98 87       	std	Y+8, r25	; 0x08
    10aa:	70 e9       	ldi	r23, 0x90	; 144
    10ac:	a7 2e       	mov	r10, r23
    10ae:	bb 24       	eor	r11, r11
    10b0:	b3 94       	inc	r11
    10b2:	c1 2c       	mov	r12, r1
    10b4:	d1 2c       	mov	r13, r1
    10b6:	e1 2c       	mov	r14, r1
    10b8:	f1 2c       	mov	r15, r1
    10ba:	00 e0       	ldi	r16, 0x00	; 0
    10bc:	10 e0       	ldi	r17, 0x00	; 0
    10be:	91 01       	movw	r18, r2
    10c0:	a2 01       	movw	r20, r4
    10c2:	b3 01       	movw	r22, r6
    10c4:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <__moddi3>
    10c8:	c9 01       	movw	r24, r18
    10ca:	00 97       	sbiw	r24, 0x00	; 0
    10cc:	59 f4       	brne	.+22     	; 0x10e4 <__DATA_REGION_LENGTH__+0xe4>
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	ab 81       	ldd	r26, Y+3	; 0x03
    10d4:	bc 81       	ldd	r27, Y+4	; 0x04
    10d6:	8d 93       	st	X+, r24
    10d8:	9c 93       	st	X, r25
    10da:	20 e0       	ldi	r18, 0x00	; 0
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	40 e0       	ldi	r20, 0x00	; 0
    10e0:	50 e0       	ldi	r21, 0x00	; 0
    10e2:	33 c0       	rjmp	.+102    	; 0x114a <__stack+0x4b>
    10e4:	28 3c       	cpi	r18, 0xC8	; 200
    10e6:	31 05       	cpc	r19, r1
    10e8:	6c f0       	brlt	.+26     	; 0x1104 <__stack+0x5>
    10ea:	2c 32       	cpi	r18, 0x2C	; 44
    10ec:	31 40       	sbci	r19, 0x01	; 1
    10ee:	2c f0       	brlt	.+10     	; 0x10fa <__DATA_REGION_LENGTH__+0xfa>
    10f0:	8c 52       	subi	r24, 0x2C	; 44
    10f2:	91 40       	sbci	r25, 0x01	; 1
    10f4:	43 e0       	ldi	r20, 0x03	; 3
    10f6:	50 e0       	ldi	r21, 0x00	; 0
    10f8:	0c c0       	rjmp	.+24     	; 0x1112 <__stack+0x13>
    10fa:	88 5c       	subi	r24, 0xC8	; 200
    10fc:	91 09       	sbc	r25, r1
    10fe:	42 e0       	ldi	r20, 0x02	; 2
    1100:	50 e0       	ldi	r21, 0x00	; 0
    1102:	07 c0       	rjmp	.+14     	; 0x1112 <__stack+0x13>
    1104:	24 36       	cpi	r18, 0x64	; 100
    1106:	31 05       	cpc	r19, r1
    1108:	6c f0       	brlt	.+26     	; 0x1124 <__stack+0x25>
    110a:	84 56       	subi	r24, 0x64	; 100
    110c:	91 09       	sbc	r25, r1
    110e:	41 e0       	ldi	r20, 0x01	; 1
    1110:	50 e0       	ldi	r21, 0x00	; 0
    1112:	00 97       	sbiw	r24, 0x00	; 0
    1114:	49 f4       	brne	.+18     	; 0x1128 <__stack+0x29>
    1116:	eb 81       	ldd	r30, Y+3	; 0x03
    1118:	fc 81       	ldd	r31, Y+4	; 0x04
    111a:	11 82       	std	Z+1, r1	; 0x01
    111c:	10 82       	st	Z, r1
    111e:	20 e0       	ldi	r18, 0x00	; 0
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	13 c0       	rjmp	.+38     	; 0x114a <__stack+0x4b>
    1124:	40 e0       	ldi	r20, 0x00	; 0
    1126:	50 e0       	ldi	r21, 0x00	; 0
    1128:	9c 01       	movw	r18, r24
    112a:	36 95       	lsr	r19
    112c:	27 95       	ror	r18
    112e:	36 95       	lsr	r19
    1130:	27 95       	ror	r18
    1132:	83 70       	andi	r24, 0x03	; 3
    1134:	99 27       	eor	r25, r25
    1136:	61 e0       	ldi	r22, 0x01	; 1
    1138:	70 e0       	ldi	r23, 0x00	; 0
    113a:	89 2b       	or	r24, r25
    113c:	11 f0       	breq	.+4      	; 0x1142 <__stack+0x43>
    113e:	60 e0       	ldi	r22, 0x00	; 0
    1140:	70 e0       	ldi	r23, 0x00	; 0
    1142:	ab 81       	ldd	r26, Y+3	; 0x03
    1144:	bc 81       	ldd	r27, Y+4	; 0x04
    1146:	6d 93       	st	X+, r22
    1148:	7c 93       	st	X, r23
    114a:	81 e6       	ldi	r24, 0x61	; 97
    114c:	ed 81       	ldd	r30, Y+5	; 0x05
    114e:	fe 81       	ldd	r31, Y+6	; 0x06
    1150:	8e 9f       	mul	r24, r30
    1152:	b0 01       	movw	r22, r0
    1154:	8f 9f       	mul	r24, r31
    1156:	70 0d       	add	r23, r0
    1158:	11 24       	eor	r1, r1
    115a:	e8 e1       	ldi	r30, 0x18	; 24
    115c:	e4 9f       	mul	r30, r20
    115e:	c0 01       	movw	r24, r0
    1160:	e5 9f       	mul	r30, r21
    1162:	90 0d       	add	r25, r0
    1164:	11 24       	eor	r1, r1
    1166:	86 0f       	add	r24, r22
    1168:	97 1f       	adc	r25, r23
    116a:	ab 81       	ldd	r26, Y+3	; 0x03
    116c:	bc 81       	ldd	r27, Y+4	; 0x04
    116e:	4d 91       	ld	r20, X+
    1170:	5c 91       	ld	r21, X
    1172:	84 1b       	sub	r24, r20
    1174:	95 0b       	sbc	r25, r21
    1176:	82 0f       	add	r24, r18
    1178:	93 1f       	adc	r25, r19
    117a:	e9 2f       	mov	r30, r25
    117c:	ee 0f       	add	r30, r30
    117e:	ee 0b       	sbc	r30, r30
    1180:	20 e8       	ldi	r18, 0x80	; 128
    1182:	a2 2e       	mov	r10, r18
    1184:	31 e5       	ldi	r19, 0x51	; 81
    1186:	b3 2e       	mov	r11, r19
    1188:	cc 24       	eor	r12, r12
    118a:	c3 94       	inc	r12
    118c:	d1 2c       	mov	r13, r1
    118e:	e1 2c       	mov	r14, r1
    1190:	f1 2c       	mov	r15, r1
    1192:	00 e0       	ldi	r16, 0x00	; 0
    1194:	10 e0       	ldi	r17, 0x00	; 0
    1196:	9c 01       	movw	r18, r24
    1198:	4e 2f       	mov	r20, r30
    119a:	5e 2f       	mov	r21, r30
    119c:	6e 2f       	mov	r22, r30
    119e:	7e 2f       	mov	r23, r30
    11a0:	8e 2f       	mov	r24, r30
    11a2:	9e 2f       	mov	r25, r30
    11a4:	0e 94 d7 18 	call	0x31ae	; 0x31ae <__muldi3>
    11a8:	92 2e       	mov	r9, r18
    11aa:	83 2e       	mov	r8, r19
    11ac:	4b 83       	std	Y+3, r20	; 0x03
    11ae:	5d 83       	std	Y+5, r21	; 0x05
    11b0:	69 87       	std	Y+9, r22	; 0x09
    11b2:	7a 87       	std	Y+10, r23	; 0x0a
    11b4:	8b 87       	std	Y+11, r24	; 0x0b
    11b6:	9c 87       	std	Y+12, r25	; 0x0c
    11b8:	43 e3       	ldi	r20, 0x33	; 51
    11ba:	b4 2e       	mov	r11, r20
    11bc:	51 ee       	ldi	r21, 0xE1	; 225
    11be:	c5 2e       	mov	r12, r21
    11c0:	dd 24       	eor	r13, r13
    11c2:	d3 94       	inc	r13
    11c4:	91 01       	movw	r18, r2
    11c6:	a2 01       	movw	r20, r4
    11c8:	b3 01       	movw	r22, r6
    11ca:	8f 81       	ldd	r24, Y+7	; 0x07
    11cc:	98 85       	ldd	r25, Y+8	; 0x08
    11ce:	0e 94 d7 18 	call	0x31ae	; 0x31ae <__muldi3>
    11d2:	59 01       	movw	r10, r18
    11d4:	6a 01       	movw	r12, r20
    11d6:	7b 01       	movw	r14, r22
    11d8:	8c 01       	movw	r16, r24
    11da:	29 2d       	mov	r18, r9
    11dc:	38 2d       	mov	r19, r8
    11de:	4b 81       	ldd	r20, Y+3	; 0x03
    11e0:	5d 81       	ldd	r21, Y+5	; 0x05
    11e2:	69 85       	ldd	r22, Y+9	; 0x09
    11e4:	7a 85       	ldd	r23, Y+10	; 0x0a
    11e6:	8b 85       	ldd	r24, Y+11	; 0x0b
    11e8:	9c 85       	ldd	r25, Y+12	; 0x0c
    11ea:	0e 94 39 25 	call	0x4a72	; 0x4a72 <__adddi3>
    11ee:	3b 56       	subi	r19, 0x6B	; 107
    11f0:	41 49       	sbci	r20, 0x91	; 145
    11f2:	57 4c       	sbci	r21, 0xC7	; 199
    11f4:	6f 4f       	sbci	r22, 0xFF	; 255
    11f6:	7f 4f       	sbci	r23, 0xFF	; 255
    11f8:	8f 4f       	sbci	r24, 0xFF	; 255
    11fa:	9f 4f       	sbci	r25, 0xFF	; 255
    11fc:	a6 2f       	mov	r26, r22
    11fe:	f7 2f       	mov	r31, r23
    1200:	e8 2f       	mov	r30, r24
    1202:	6a 2f       	mov	r22, r26
    1204:	7f 2f       	mov	r23, r31
    1206:	8e 2f       	mov	r24, r30
    1208:	2c 96       	adiw	r28, 0x0c	; 12
    120a:	e2 e1       	ldi	r30, 0x12	; 18
    120c:	0c 94 fd 20 	jmp	0x41fa	; 0x41fa <__epilogue_restores__>

Disassembly of section .text.__month_to_secs:

00004114 <__month_to_secs>:
    4114:	cf 93       	push	r28
    4116:	df 93       	push	r29
    4118:	9c 01       	movw	r18, r24
    411a:	eb 01       	movw	r28, r22
    411c:	88 0f       	add	r24, r24
    411e:	99 1f       	adc	r25, r25
    4120:	88 0f       	add	r24, r24
    4122:	99 1f       	adc	r25, r25
    4124:	09 2e       	mov	r0, r25
    4126:	00 0c       	add	r0, r0
    4128:	aa 0b       	sbc	r26, r26
    412a:	85 5d       	subi	r24, 0xD5	; 213
    412c:	9e 4f       	sbci	r25, 0xFE	; 254
    412e:	af 4f       	sbci	r26, 0xFF	; 255
    4130:	fc 01       	movw	r30, r24
    4132:	5a 2f       	mov	r21, r26
    4134:	0e 94 bb 24 	call	0x4976	; 0x4976 <__xload_4>
    4138:	cd 2b       	or	r28, r29
    413a:	39 f0       	breq	.+14     	; 0x414a <__month_to_secs+0x36>
    413c:	22 30       	cpi	r18, 0x02	; 2
    413e:	31 05       	cpc	r19, r1
    4140:	24 f0       	brlt	.+8      	; 0x414a <__month_to_secs+0x36>
    4142:	60 58       	subi	r22, 0x80	; 128
    4144:	7e 4a       	sbci	r23, 0xAE	; 174
    4146:	8e 4f       	sbci	r24, 0xFE	; 254
    4148:	9f 4f       	sbci	r25, 0xFF	; 255
    414a:	df 91       	pop	r29
    414c:	cf 91       	pop	r28
    414e:	08 95       	ret

Disassembly of section .text.__secs_to_tm:

00000264 <__secs_to_tm>:
 264:	a6 e1       	ldi	r26, 0x16	; 22
 266:	b0 e0       	ldi	r27, 0x00	; 0
 268:	e8 e3       	ldi	r30, 0x38	; 56
 26a:	f1 e0       	ldi	r31, 0x01	; 1
 26c:	0c 94 e1 20 	jmp	0x41c2	; 0x41c2 <__prologue_saves__>
 270:	79 01       	movw	r14, r18
 272:	d4 2e       	mov	r13, r20
 274:	c5 2e       	mov	r12, r21
 276:	b6 2f       	mov	r27, r22
 278:	a7 2f       	mov	r26, r23
 27a:	f8 2f       	mov	r31, r24
 27c:	b9 2e       	mov	r11, r25
 27e:	40 58       	subi	r20, 0x80	; 128
 280:	5d 4b       	sbci	r21, 0xBD	; 189
 282:	6e 40       	sbci	r22, 0x0E	; 14
 284:	7f 4f       	sbci	r23, 0xFF	; 255
 286:	8f 4f       	sbci	r24, 0xFF	; 255
 288:	9f 4f       	sbci	r25, 0xFF	; 255
 28a:	21 15       	cp	r18, r1
 28c:	3b 47       	sbci	r19, 0x7B	; 123
 28e:	4d 41       	sbci	r20, 0x1D	; 29
 290:	53 48       	sbci	r21, 0x83	; 131
 292:	62 4e       	sbci	r22, 0xE2	; 226
 294:	71 40       	sbci	r23, 0x01	; 1
 296:	81 05       	cpc	r24, r1
 298:	91 05       	cpc	r25, r1
 29a:	11 f0       	breq	.+4      	; 0x2a0 <__secs_to_tm+0x3c>
 29c:	08 f0       	brcs	.+2      	; 0x2a0 <__secs_to_tm+0x3c>
 29e:	08 c2       	rjmp	.+1040   	; 0x6b0 <__LOCK_REGION_LENGTH__+0x2b0>
 2a0:	18 8b       	std	Y+16, r17	; 0x10
 2a2:	0f 87       	std	Y+15, r16	; 0x0f
 2a4:	9b 2d       	mov	r25, r11
 2a6:	8f 2f       	mov	r24, r31
 2a8:	7a 2f       	mov	r23, r26
 2aa:	6b 2f       	mov	r22, r27
 2ac:	5c 2d       	mov	r21, r12
 2ae:	4d 2d       	mov	r20, r13
 2b0:	97 01       	movw	r18, r14
 2b2:	20 58       	subi	r18, 0x80	; 128
 2b4:	3d 45       	sbci	r19, 0x5D	; 93
 2b6:	4c 4b       	sbci	r20, 0xBC	; 188
 2b8:	58 43       	sbci	r21, 0x38	; 56
 2ba:	61 09       	sbc	r22, r1
 2bc:	71 09       	sbc	r23, r1
 2be:	81 09       	sbc	r24, r1
 2c0:	91 09       	sbc	r25, r1
 2c2:	19 01       	movw	r2, r18
 2c4:	4d 83       	std	Y+5, r20	; 0x05
 2c6:	59 87       	std	Y+9, r21	; 0x09
 2c8:	6d 87       	std	Y+13, r22	; 0x0d
 2ca:	79 83       	std	Y+1, r23	; 0x01
 2cc:	89 8b       	std	Y+17, r24	; 0x11
 2ce:	9a 8b       	std	Y+18, r25	; 0x12
 2d0:	f0 e8       	ldi	r31, 0x80	; 128
 2d2:	af 2e       	mov	r10, r31
 2d4:	a1 e5       	ldi	r26, 0x51	; 81
 2d6:	ba 2e       	mov	r11, r26
 2d8:	cc 24       	eor	r12, r12
 2da:	c3 94       	inc	r12
 2dc:	d1 2c       	mov	r13, r1
 2de:	e1 2c       	mov	r14, r1
 2e0:	f1 2c       	mov	r15, r1
 2e2:	00 e0       	ldi	r16, 0x00	; 0
 2e4:	10 e0       	ldi	r17, 0x00	; 0
 2e6:	0e 94 3c 1e 	call	0x3c78	; 0x3c78 <__divdi3>
 2ea:	29 01       	movw	r4, r18
 2ec:	3a 01       	movw	r6, r20
 2ee:	4b 01       	movw	r8, r22
 2f0:	8e 8b       	std	Y+22, r24	; 0x16
 2f2:	9b 8b       	std	Y+19, r25	; 0x13
 2f4:	91 01       	movw	r18, r2
 2f6:	4d 81       	ldd	r20, Y+5	; 0x05
 2f8:	59 85       	ldd	r21, Y+9	; 0x09
 2fa:	6d 85       	ldd	r22, Y+13	; 0x0d
 2fc:	79 81       	ldd	r23, Y+1	; 0x01
 2fe:	89 89       	ldd	r24, Y+17	; 0x11
 300:	9a 89       	ldd	r25, Y+18	; 0x12
 302:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <__moddi3>
 306:	2d 83       	std	Y+5, r18	; 0x05
 308:	3e 83       	std	Y+6, r19	; 0x06
 30a:	4f 83       	std	Y+7, r20	; 0x07
 30c:	58 87       	std	Y+8, r21	; 0x08
 30e:	8d 81       	ldd	r24, Y+5	; 0x05
 310:	9e 81       	ldd	r25, Y+6	; 0x06
 312:	af 81       	ldd	r26, Y+7	; 0x07
 314:	b8 85       	ldd	r27, Y+8	; 0x08
 316:	b7 ff       	sbrs	r27, 7
 318:	15 c0       	rjmp	.+42     	; 0x344 <__secs_to_tm+0xe0>
 31a:	80 58       	subi	r24, 0x80	; 128
 31c:	9e 4a       	sbci	r25, 0xAE	; 174
 31e:	ae 4f       	sbci	r26, 0xFE	; 254
 320:	bf 4f       	sbci	r27, 0xFF	; 255
 322:	8d 83       	std	Y+5, r24	; 0x05
 324:	9e 83       	std	Y+6, r25	; 0x06
 326:	af 83       	std	Y+7, r26	; 0x07
 328:	b8 87       	std	Y+8, r27	; 0x08
 32a:	92 01       	movw	r18, r4
 32c:	a3 01       	movw	r20, r6
 32e:	b4 01       	movw	r22, r8
 330:	8e 89       	ldd	r24, Y+22	; 0x16
 332:	9b 89       	ldd	r25, Y+19	; 0x13
 334:	af ef       	ldi	r26, 0xFF	; 255
 336:	0e 94 c7 24 	call	0x498e	; 0x498e <__adddi3_s8>
 33a:	29 01       	movw	r4, r18
 33c:	3a 01       	movw	r6, r20
 33e:	4b 01       	movw	r8, r22
 340:	8e 8b       	std	Y+22, r24	; 0x16
 342:	9b 8b       	std	Y+19, r25	; 0x13
 344:	92 01       	movw	r18, r4
 346:	a3 01       	movw	r20, r6
 348:	b4 01       	movw	r22, r8
 34a:	8e 89       	ldd	r24, Y+22	; 0x16
 34c:	9b 89       	ldd	r25, Y+19	; 0x13
 34e:	a3 e0       	ldi	r26, 0x03	; 3
 350:	0e 94 c7 24 	call	0x498e	; 0x498e <__adddi3_s8>
 354:	e7 e0       	ldi	r30, 0x07	; 7
 356:	ae 2e       	mov	r10, r30
 358:	b1 2c       	mov	r11, r1
 35a:	c1 2c       	mov	r12, r1
 35c:	d1 2c       	mov	r13, r1
 35e:	e1 2c       	mov	r14, r1
 360:	f1 2c       	mov	r15, r1
 362:	00 e0       	ldi	r16, 0x00	; 0
 364:	10 e0       	ldi	r17, 0x00	; 0
 366:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <__moddi3>
 36a:	2d 87       	std	Y+13, r18	; 0x0d
 36c:	3e 87       	std	Y+14, r19	; 0x0e
 36e:	ad 85       	ldd	r26, Y+13	; 0x0d
 370:	be 85       	ldd	r27, Y+14	; 0x0e
 372:	b7 ff       	sbrs	r27, 7
 374:	03 c0       	rjmp	.+6      	; 0x37c <__secs_to_tm+0x118>
 376:	17 96       	adiw	r26, 0x07	; 7
 378:	be 87       	std	Y+14, r27	; 0x0e
 37a:	ad 87       	std	Y+13, r26	; 0x0d
 37c:	51 eb       	ldi	r21, 0xB1	; 177
 37e:	a5 2e       	mov	r10, r21
 380:	6a e3       	ldi	r22, 0x3A	; 58
 382:	b6 2e       	mov	r11, r22
 384:	72 e0       	ldi	r23, 0x02	; 2
 386:	c7 2e       	mov	r12, r23
 388:	d1 2c       	mov	r13, r1
 38a:	e1 2c       	mov	r14, r1
 38c:	f1 2c       	mov	r15, r1
 38e:	00 e0       	ldi	r16, 0x00	; 0
 390:	10 e0       	ldi	r17, 0x00	; 0
 392:	92 01       	movw	r18, r4
 394:	a3 01       	movw	r20, r6
 396:	b4 01       	movw	r22, r8
 398:	8e 89       	ldd	r24, Y+22	; 0x16
 39a:	9b 89       	ldd	r25, Y+19	; 0x13
 39c:	0e 94 3c 1e 	call	0x3c78	; 0x3c78 <__divdi3>
 3a0:	29 87       	std	Y+9, r18	; 0x09
 3a2:	3a 87       	std	Y+10, r19	; 0x0a
 3a4:	4b 87       	std	Y+11, r20	; 0x0b
 3a6:	5c 87       	std	Y+12, r21	; 0x0c
 3a8:	92 01       	movw	r18, r4
 3aa:	a3 01       	movw	r20, r6
 3ac:	b4 01       	movw	r22, r8
 3ae:	8e 89       	ldd	r24, Y+22	; 0x16
 3b0:	9b 89       	ldd	r25, Y+19	; 0x13
 3b2:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <__moddi3>
 3b6:	82 2e       	mov	r8, r18
 3b8:	93 2e       	mov	r9, r19
 3ba:	a4 2e       	mov	r10, r20
 3bc:	b5 2e       	mov	r11, r21
 3be:	b7 fe       	sbrs	r11, 7
 3c0:	12 c0       	rjmp	.+36     	; 0x3e6 <__secs_to_tm+0x182>
 3c2:	b1 eb       	ldi	r27, 0xB1	; 177
 3c4:	8b 0e       	add	r8, r27
 3c6:	ba e3       	ldi	r27, 0x3A	; 58
 3c8:	9b 1e       	adc	r9, r27
 3ca:	b2 e0       	ldi	r27, 0x02	; 2
 3cc:	ab 1e       	adc	r10, r27
 3ce:	b1 1c       	adc	r11, r1
 3d0:	89 85       	ldd	r24, Y+9	; 0x09
 3d2:	9a 85       	ldd	r25, Y+10	; 0x0a
 3d4:	ab 85       	ldd	r26, Y+11	; 0x0b
 3d6:	bc 85       	ldd	r27, Y+12	; 0x0c
 3d8:	01 97       	sbiw	r24, 0x01	; 1
 3da:	a1 09       	sbc	r26, r1
 3dc:	b1 09       	sbc	r27, r1
 3de:	89 87       	std	Y+9, r24	; 0x09
 3e0:	9a 87       	std	Y+10, r25	; 0x0a
 3e2:	ab 87       	std	Y+11, r26	; 0x0b
 3e4:	bc 87       	std	Y+12, r27	; 0x0c
 3e6:	c5 01       	movw	r24, r10
 3e8:	b4 01       	movw	r22, r8
 3ea:	2c ea       	ldi	r18, 0xAC	; 172
 3ec:	3e e8       	ldi	r19, 0x8E	; 142
 3ee:	40 e0       	ldi	r20, 0x00	; 0
 3f0:	50 e0       	ldi	r21, 0x00	; 0
 3f2:	0e 94 c9 21 	call	0x4392	; 0x4392 <__divmodsi4>
 3f6:	69 01       	movw	r12, r18
 3f8:	7a 01       	movw	r14, r20
 3fa:	24 30       	cpi	r18, 0x04	; 4
 3fc:	31 05       	cpc	r19, r1
 3fe:	41 05       	cpc	r20, r1
 400:	51 05       	cpc	r21, r1
 402:	29 f4       	brne	.+10     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 404:	43 e0       	ldi	r20, 0x03	; 3
 406:	c4 2e       	mov	r12, r20
 408:	d1 2c       	mov	r13, r1
 40a:	e1 2c       	mov	r14, r1
 40c:	f1 2c       	mov	r15, r1
 40e:	a4 e5       	ldi	r26, 0x54	; 84
 410:	b1 e7       	ldi	r27, 0x71	; 113
 412:	a7 01       	movw	r20, r14
 414:	96 01       	movw	r18, r12
 416:	0e 94 56 25 	call	0x4aac	; 0x4aac <__mulohisi3>
 41a:	2b 01       	movw	r4, r22
 41c:	3c 01       	movw	r6, r24
 41e:	48 0c       	add	r4, r8
 420:	59 1c       	adc	r5, r9
 422:	6a 1c       	adc	r6, r10
 424:	7b 1c       	adc	r7, r11
 426:	c3 01       	movw	r24, r6
 428:	b2 01       	movw	r22, r4
 42a:	25 eb       	ldi	r18, 0xB5	; 181
 42c:	35 e0       	ldi	r19, 0x05	; 5
 42e:	40 e0       	ldi	r20, 0x00	; 0
 430:	50 e0       	ldi	r21, 0x00	; 0
 432:	0e 94 c9 21 	call	0x4392	; 0x4392 <__divmodsi4>
 436:	49 01       	movw	r8, r18
 438:	5a 01       	movw	r10, r20
 43a:	29 31       	cpi	r18, 0x19	; 25
 43c:	31 05       	cpc	r19, r1
 43e:	41 05       	cpc	r20, r1
 440:	51 05       	cpc	r21, r1
 442:	29 f4       	brne	.+10     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 444:	38 e1       	ldi	r19, 0x18	; 24
 446:	83 2e       	mov	r8, r19
 448:	91 2c       	mov	r9, r1
 44a:	a1 2c       	mov	r10, r1
 44c:	b1 2c       	mov	r11, r1
 44e:	ab e4       	ldi	r26, 0x4B	; 75
 450:	ba ef       	ldi	r27, 0xFA	; 250
 452:	a5 01       	movw	r20, r10
 454:	94 01       	movw	r18, r8
 456:	0e 94 56 25 	call	0x4aac	; 0x4aac <__mulohisi3>
 45a:	46 0e       	add	r4, r22
 45c:	57 1e       	adc	r5, r23
 45e:	68 1e       	adc	r6, r24
 460:	79 1e       	adc	r7, r25
 462:	c3 01       	movw	r24, r6
 464:	b2 01       	movw	r22, r4
 466:	2d e6       	ldi	r18, 0x6D	; 109
 468:	31 e0       	ldi	r19, 0x01	; 1
 46a:	40 e0       	ldi	r20, 0x00	; 0
 46c:	50 e0       	ldi	r21, 0x00	; 0
 46e:	0e 94 c9 21 	call	0x4392	; 0x4392 <__divmodsi4>
 472:	29 83       	std	Y+1, r18	; 0x01
 474:	3a 83       	std	Y+2, r19	; 0x02
 476:	4b 83       	std	Y+3, r20	; 0x03
 478:	5c 83       	std	Y+4, r21	; 0x04
 47a:	24 30       	cpi	r18, 0x04	; 4
 47c:	31 05       	cpc	r19, r1
 47e:	41 05       	cpc	r20, r1
 480:	51 05       	cpc	r21, r1
 482:	41 f4       	brne	.+16     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
 484:	83 e0       	ldi	r24, 0x03	; 3
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	a0 e0       	ldi	r26, 0x00	; 0
 48a:	b0 e0       	ldi	r27, 0x00	; 0
 48c:	89 83       	std	Y+1, r24	; 0x01
 48e:	9a 83       	std	Y+2, r25	; 0x02
 490:	ab 83       	std	Y+3, r26	; 0x03
 492:	bc 83       	std	Y+4, r27	; 0x04
 494:	a3 e9       	ldi	r26, 0x93	; 147
 496:	be ef       	ldi	r27, 0xFE	; 254
 498:	29 81       	ldd	r18, Y+1	; 0x01
 49a:	3a 81       	ldd	r19, Y+2	; 0x02
 49c:	4b 81       	ldd	r20, Y+3	; 0x03
 49e:	5c 81       	ldd	r21, Y+4	; 0x04
 4a0:	0e 94 56 25 	call	0x4aac	; 0x4aac <__mulohisi3>
 4a4:	46 0e       	add	r4, r22
 4a6:	57 1e       	adc	r5, r23
 4a8:	68 1e       	adc	r6, r24
 4aa:	79 1e       	adc	r7, r25
 4ac:	23 2b       	or	r18, r19
 4ae:	24 2b       	or	r18, r20
 4b0:	25 2b       	or	r18, r21
 4b2:	81 f4       	brne	.+32     	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
 4b4:	81 14       	cp	r8, r1
 4b6:	91 04       	cpc	r9, r1
 4b8:	a1 04       	cpc	r10, r1
 4ba:	b1 04       	cpc	r11, r1
 4bc:	71 f4       	brne	.+28     	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
 4be:	31 e0       	ldi	r19, 0x01	; 1
 4c0:	20 e0       	ldi	r18, 0x00	; 0
 4c2:	c1 14       	cp	r12, r1
 4c4:	d1 04       	cpc	r13, r1
 4c6:	e1 04       	cpc	r14, r1
 4c8:	f1 04       	cpc	r15, r1
 4ca:	09 f0       	breq	.+2      	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
 4cc:	30 e0       	ldi	r19, 0x00	; 0
 4ce:	83 2f       	mov	r24, r19
 4d0:	92 2f       	mov	r25, r18
 4d2:	05 c0       	rjmp	.+10     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
 4d4:	80 e0       	ldi	r24, 0x00	; 0
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	02 c0       	rjmp	.+4      	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
 4da:	81 e0       	ldi	r24, 0x01	; 1
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	12 01       	movw	r2, r4
 4e0:	ab e3       	ldi	r26, 0x3B	; 59
 4e2:	2a 0e       	add	r2, r26
 4e4:	31 1c       	adc	r3, r1
 4e6:	28 0e       	add	r2, r24
 4e8:	39 1e       	adc	r3, r25
 4ea:	9c 01       	movw	r18, r24
 4ec:	24 59       	subi	r18, 0x94	; 148
 4ee:	3e 4f       	sbci	r19, 0xFE	; 254
 4f0:	22 15       	cp	r18, r2
 4f2:	33 05       	cpc	r19, r3
 4f4:	24 f4       	brge	.+8      	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
 4f6:	83 59       	subi	r24, 0x93	; 147
 4f8:	9e 4f       	sbci	r25, 0xFE	; 254
 4fa:	28 1a       	sub	r2, r24
 4fc:	39 0a       	sbc	r3, r25
 4fe:	92 e0       	ldi	r25, 0x02	; 2
 500:	88 0c       	add	r8, r8
 502:	99 1c       	adc	r9, r9
 504:	aa 1c       	adc	r10, r10
 506:	bb 1c       	adc	r11, r11
 508:	9a 95       	dec	r25
 50a:	d1 f7       	brne	.-12     	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
 50c:	89 81       	ldd	r24, Y+1	; 0x01
 50e:	9a 81       	ldd	r25, Y+2	; 0x02
 510:	ab 81       	ldd	r26, Y+3	; 0x03
 512:	bc 81       	ldd	r27, Y+4	; 0x04
 514:	88 0e       	add	r8, r24
 516:	99 1e       	adc	r9, r25
 518:	aa 1e       	adc	r10, r26
 51a:	bb 1e       	adc	r11, r27
 51c:	a4 e6       	ldi	r26, 0x64	; 100
 51e:	b0 e0       	ldi	r27, 0x00	; 0
 520:	a7 01       	movw	r20, r14
 522:	96 01       	movw	r18, r12
 524:	0e 94 f4 24 	call	0x49e8	; 0x49e8 <__muluhisi3>
 528:	86 0e       	add	r8, r22
 52a:	97 1e       	adc	r9, r23
 52c:	a8 1e       	adc	r10, r24
 52e:	b9 1e       	adc	r11, r25
 530:	d5 01       	movw	r26, r10
 532:	c4 01       	movw	r24, r8
 534:	bb 0f       	add	r27, r27
 536:	88 0b       	sbc	r24, r24
 538:	98 2f       	mov	r25, r24
 53a:	dc 01       	movw	r26, r24
 53c:	89 83       	std	Y+1, r24	; 0x01
 53e:	9a 83       	std	Y+2, r25	; 0x02
 540:	ab 83       	std	Y+3, r26	; 0x03
 542:	bc 83       	std	Y+4, r27	; 0x04
 544:	69 85       	ldd	r22, Y+9	; 0x09
 546:	7a 85       	ldd	r23, Y+10	; 0x0a
 548:	8b 85       	ldd	r24, Y+11	; 0x0b
 54a:	9c 85       	ldd	r25, Y+12	; 0x0c
 54c:	20 e9       	ldi	r18, 0x90	; 144
 54e:	31 e0       	ldi	r19, 0x01	; 1
 550:	40 e0       	ldi	r20, 0x00	; 0
 552:	50 e0       	ldi	r21, 0x00	; 0
 554:	0e 94 85 24 	call	0x490a	; 0x490a <__mulsidi3>
 558:	f2 2f       	mov	r31, r18
 55a:	e3 2f       	mov	r30, r19
 55c:	6a 01       	movw	r12, r20
 55e:	7b 01       	movw	r14, r22
 560:	8c 01       	movw	r16, r24
 562:	94 01       	movw	r18, r8
 564:	a5 01       	movw	r20, r10
 566:	69 81       	ldd	r22, Y+1	; 0x01
 568:	76 2f       	mov	r23, r22
 56a:	86 2f       	mov	r24, r22
 56c:	96 2f       	mov	r25, r22
 56e:	af 2e       	mov	r10, r31
 570:	be 2e       	mov	r11, r30
 572:	0e 94 39 25 	call	0x4a72	; 0x4a72 <__adddi3>
 576:	49 01       	movw	r8, r18
 578:	5a 01       	movw	r10, r20
 57a:	6b 01       	movw	r12, r22
 57c:	7c 01       	movw	r14, r24
 57e:	22 ee       	ldi	r18, 0xE2	; 226
 580:	31 e0       	ldi	r19, 0x01	; 1
 582:	40 e0       	ldi	r20, 0x00	; 0
 584:	1a 82       	std	Y+2, r1	; 0x02
 586:	19 82       	std	Y+1, r1	; 0x01
 588:	f9 01       	movw	r30, r18
 58a:	84 91       	lpm	r24, Z
 58c:	47 fd       	sbrc	r20, 7
 58e:	80 81       	ld	r24, Z
 590:	08 2e       	mov	r0, r24
 592:	00 0c       	add	r0, r0
 594:	99 0b       	sbc	r25, r25
 596:	aa 0b       	sbc	r26, r26
 598:	bb 0b       	sbc	r27, r27
 59a:	2f 5f       	subi	r18, 0xFF	; 255
 59c:	3f 4f       	sbci	r19, 0xFF	; 255
 59e:	4f 4f       	sbci	r20, 0xFF	; 255
 5a0:	48 16       	cp	r4, r24
 5a2:	59 06       	cpc	r5, r25
 5a4:	6a 06       	cpc	r6, r26
 5a6:	7b 06       	cpc	r7, r27
 5a8:	54 f0       	brlt	.+20     	; 0x5be <__LOCK_REGION_LENGTH__+0x1be>
 5aa:	48 1a       	sub	r4, r24
 5ac:	59 0a       	sbc	r5, r25
 5ae:	6a 0a       	sbc	r6, r26
 5b0:	7b 0a       	sbc	r7, r27
 5b2:	a9 81       	ldd	r26, Y+1	; 0x01
 5b4:	ba 81       	ldd	r27, Y+2	; 0x02
 5b6:	11 96       	adiw	r26, 0x01	; 1
 5b8:	ba 83       	std	Y+2, r27	; 0x02
 5ba:	a9 83       	std	Y+1, r26	; 0x01
 5bc:	e5 cf       	rjmp	.-54     	; 0x588 <__LOCK_REGION_LENGTH__+0x188>
 5be:	e9 81       	ldd	r30, Y+1	; 0x01
 5c0:	fa 81       	ldd	r31, Y+2	; 0x02
 5c2:	ea 30       	cpi	r30, 0x0A	; 10
 5c4:	f1 05       	cpc	r31, r1
 5c6:	74 f0       	brlt	.+28     	; 0x5e4 <__LOCK_REGION_LENGTH__+0x1e4>
 5c8:	3c 97       	sbiw	r30, 0x0c	; 12
 5ca:	fa 83       	std	Y+2, r31	; 0x02
 5cc:	e9 83       	std	Y+1, r30	; 0x01
 5ce:	94 01       	movw	r18, r8
 5d0:	a5 01       	movw	r20, r10
 5d2:	b6 01       	movw	r22, r12
 5d4:	c7 01       	movw	r24, r14
 5d6:	a1 e0       	ldi	r26, 0x01	; 1
 5d8:	0e 94 c7 24 	call	0x498e	; 0x498e <__adddi3_s8>
 5dc:	49 01       	movw	r8, r18
 5de:	5a 01       	movw	r10, r20
 5e0:	6b 01       	movw	r12, r22
 5e2:	7c 01       	movw	r14, r24
 5e4:	94 01       	movw	r18, r8
 5e6:	a5 01       	movw	r20, r10
 5e8:	b6 01       	movw	r22, r12
 5ea:	c7 01       	movw	r24, r14
 5ec:	2c 59       	subi	r18, 0x9C	; 156
 5ee:	3f 47       	sbci	r19, 0x7F	; 127
 5f0:	4f 4f       	sbci	r20, 0xFF	; 255
 5f2:	5f 4f       	sbci	r21, 0xFF	; 255
 5f4:	6f 4f       	sbci	r22, 0xFF	; 255
 5f6:	7f 4f       	sbci	r23, 0xFF	; 255
 5f8:	8f 4f       	sbci	r24, 0xFF	; 255
 5fa:	9f 4f       	sbci	r25, 0xFF	; 255
 5fc:	2f 3f       	cpi	r18, 0xFF	; 255
 5fe:	3f 4f       	sbci	r19, 0xFF	; 255
 600:	41 05       	cpc	r20, r1
 602:	51 05       	cpc	r21, r1
 604:	61 05       	cpc	r22, r1
 606:	71 05       	cpc	r23, r1
 608:	81 05       	cpc	r24, r1
 60a:	91 05       	cpc	r25, r1
 60c:	11 f0       	breq	.+4      	; 0x612 <__LOCK_REGION_LENGTH__+0x212>
 60e:	08 f0       	brcs	.+2      	; 0x612 <__LOCK_REGION_LENGTH__+0x212>
 610:	4f c0       	rjmp	.+158    	; 0x6b0 <__LOCK_REGION_LENGTH__+0x2b0>
 612:	24 e6       	ldi	r18, 0x64	; 100
 614:	82 0e       	add	r8, r18
 616:	91 1c       	adc	r9, r1
 618:	af 85       	ldd	r26, Y+15	; 0x0f
 61a:	b8 89       	ldd	r27, Y+16	; 0x10
 61c:	1b 96       	adiw	r26, 0x0b	; 11
 61e:	9c 92       	st	X, r9
 620:	8e 92       	st	-X, r8
 622:	1a 97       	sbiw	r26, 0x0a	; 10
 624:	e9 81       	ldd	r30, Y+1	; 0x01
 626:	fa 81       	ldd	r31, Y+2	; 0x02
 628:	32 96       	adiw	r30, 0x02	; 2
 62a:	19 96       	adiw	r26, 0x09	; 9
 62c:	fc 93       	st	X, r31
 62e:	ee 93       	st	-X, r30
 630:	18 97       	sbiw	r26, 0x08	; 8
 632:	ff ef       	ldi	r31, 0xFF	; 255
 634:	4f 1a       	sub	r4, r31
 636:	5f 0a       	sbc	r5, r31
 638:	17 96       	adiw	r26, 0x07	; 7
 63a:	5c 92       	st	X, r5
 63c:	4e 92       	st	-X, r4
 63e:	16 97       	sbiw	r26, 0x06	; 6
 640:	8d 85       	ldd	r24, Y+13	; 0x0d
 642:	9e 85       	ldd	r25, Y+14	; 0x0e
 644:	1d 96       	adiw	r26, 0x0d	; 13
 646:	9c 93       	st	X, r25
 648:	8e 93       	st	-X, r24
 64a:	1c 97       	sbiw	r26, 0x0c	; 12
 64c:	1f 96       	adiw	r26, 0x0f	; 15
 64e:	3c 92       	st	X, r3
 650:	2e 92       	st	-X, r2
 652:	1e 97       	sbiw	r26, 0x0e	; 14
 654:	6d 81       	ldd	r22, Y+5	; 0x05
 656:	7e 81       	ldd	r23, Y+6	; 0x06
 658:	8f 81       	ldd	r24, Y+7	; 0x07
 65a:	98 85       	ldd	r25, Y+8	; 0x08
 65c:	20 e1       	ldi	r18, 0x10	; 16
 65e:	3e e0       	ldi	r19, 0x0E	; 14
 660:	40 e0       	ldi	r20, 0x00	; 0
 662:	50 e0       	ldi	r21, 0x00	; 0
 664:	0e 94 c9 21 	call	0x4392	; 0x4392 <__divmodsi4>
 668:	af 85       	ldd	r26, Y+15	; 0x0f
 66a:	b8 89       	ldd	r27, Y+16	; 0x10
 66c:	15 96       	adiw	r26, 0x05	; 5
 66e:	3c 93       	st	X, r19
 670:	2e 93       	st	-X, r18
 672:	14 97       	sbiw	r26, 0x04	; 4
 674:	8c e3       	ldi	r24, 0x3C	; 60
 676:	c8 2e       	mov	r12, r24
 678:	d1 2c       	mov	r13, r1
 67a:	e1 2c       	mov	r14, r1
 67c:	f1 2c       	mov	r15, r1
 67e:	6d 81       	ldd	r22, Y+5	; 0x05
 680:	7e 81       	ldd	r23, Y+6	; 0x06
 682:	8f 81       	ldd	r24, Y+7	; 0x07
 684:	98 85       	ldd	r25, Y+8	; 0x08
 686:	a7 01       	movw	r20, r14
 688:	96 01       	movw	r18, r12
 68a:	0e 94 c9 21 	call	0x4392	; 0x4392 <__divmodsi4>
 68e:	4b 01       	movw	r8, r22
 690:	5c 01       	movw	r10, r24
 692:	ca 01       	movw	r24, r20
 694:	b9 01       	movw	r22, r18
 696:	a7 01       	movw	r20, r14
 698:	96 01       	movw	r18, r12
 69a:	0e 94 c9 21 	call	0x4392	; 0x4392 <__divmodsi4>
 69e:	ef 85       	ldd	r30, Y+15	; 0x0f
 6a0:	f8 89       	ldd	r31, Y+16	; 0x10
 6a2:	73 83       	std	Z+3, r23	; 0x03
 6a4:	62 83       	std	Z+2, r22	; 0x02
 6a6:	91 82       	std	Z+1, r9	; 0x01
 6a8:	80 82       	st	Z, r8
 6aa:	80 e0       	ldi	r24, 0x00	; 0
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	02 c0       	rjmp	.+4      	; 0x6b4 <__LOCK_REGION_LENGTH__+0x2b4>
 6b0:	8f ef       	ldi	r24, 0xFF	; 255
 6b2:	9f ef       	ldi	r25, 0xFF	; 255
 6b4:	66 96       	adiw	r28, 0x16	; 22
 6b6:	e2 e1       	ldi	r30, 0x12	; 18
 6b8:	0c 94 fd 20 	jmp	0x41fa	; 0x41fa <__epilogue_restores__>

Disassembly of section .text.libgcc.div:

00004566 <__divmodhi4>:
    4566:	97 fb       	bst	r25, 7
    4568:	07 2e       	mov	r0, r23
    456a:	16 f4       	brtc	.+4      	; 0x4570 <__divmodhi4+0xa>
    456c:	00 94       	com	r0
    456e:	07 d0       	rcall	.+14     	; 0x457e <__divmodhi4_neg1>
    4570:	77 fd       	sbrc	r23, 7
    4572:	09 d0       	rcall	.+18     	; 0x4586 <__divmodhi4_neg2>
    4574:	0e 94 9f 22 	call	0x453e	; 0x453e <__udivmodhi4>
    4578:	07 fc       	sbrc	r0, 7
    457a:	05 d0       	rcall	.+10     	; 0x4586 <__divmodhi4_neg2>
    457c:	3e f4       	brtc	.+14     	; 0x458c <__divmodhi4_exit>

0000457e <__divmodhi4_neg1>:
    457e:	90 95       	com	r25
    4580:	81 95       	neg	r24
    4582:	9f 4f       	sbci	r25, 0xFF	; 255
    4584:	08 95       	ret

00004586 <__divmodhi4_neg2>:
    4586:	70 95       	com	r23
    4588:	61 95       	neg	r22
    458a:	7f 4f       	sbci	r23, 0xFF	; 255

0000458c <__divmodhi4_exit>:
    458c:	08 95       	ret

Disassembly of section .text.libgcc.mul:

000031ae <__muldi3>:
    31ae:	df 93       	push	r29
    31b0:	cf 93       	push	r28
    31b2:	1f 93       	push	r17
    31b4:	0f 93       	push	r16
    31b6:	9a 9d       	mul	r25, r10
    31b8:	f0 2d       	mov	r31, r0
    31ba:	21 9f       	mul	r18, r17
    31bc:	f0 0d       	add	r31, r0
    31be:	8b 9d       	mul	r24, r11
    31c0:	f0 0d       	add	r31, r0
    31c2:	8a 9d       	mul	r24, r10
    31c4:	e0 2d       	mov	r30, r0
    31c6:	f1 0d       	add	r31, r1
    31c8:	03 9f       	mul	r16, r19
    31ca:	f0 0d       	add	r31, r0
    31cc:	02 9f       	mul	r16, r18
    31ce:	e0 0d       	add	r30, r0
    31d0:	f1 1d       	adc	r31, r1
    31d2:	4e 9d       	mul	r20, r14
    31d4:	e0 0d       	add	r30, r0
    31d6:	f1 1d       	adc	r31, r1
    31d8:	5e 9d       	mul	r21, r14
    31da:	f0 0d       	add	r31, r0
    31dc:	4f 9d       	mul	r20, r15
    31de:	f0 0d       	add	r31, r0
    31e0:	7f 93       	push	r23
    31e2:	6f 93       	push	r22
    31e4:	bf 92       	push	r11
    31e6:	af 92       	push	r10
    31e8:	5f 93       	push	r21
    31ea:	4f 93       	push	r20
    31ec:	d5 01       	movw	r26, r10
    31ee:	0e 94 76 24 	call	0x48ec	; 0x48ec <__umulhisi3>
    31f2:	8b 01       	movw	r16, r22
    31f4:	ac 01       	movw	r20, r24
    31f6:	d7 01       	movw	r26, r14
    31f8:	0e 94 76 24 	call	0x48ec	; 0x48ec <__umulhisi3>
    31fc:	eb 01       	movw	r28, r22
    31fe:	e8 0f       	add	r30, r24
    3200:	f9 1f       	adc	r31, r25
    3202:	d6 01       	movw	r26, r12
    3204:	0e 94 30 25 	call	0x4a60	; 0x4a60 <__muldi3_6>
    3208:	2f 91       	pop	r18
    320a:	3f 91       	pop	r19
    320c:	d6 01       	movw	r26, r12
    320e:	0e 94 76 24 	call	0x48ec	; 0x48ec <__umulhisi3>
    3212:	c6 0f       	add	r28, r22
    3214:	d7 1f       	adc	r29, r23
    3216:	e8 1f       	adc	r30, r24
    3218:	f9 1f       	adc	r31, r25
    321a:	af 91       	pop	r26
    321c:	bf 91       	pop	r27
    321e:	0e 94 30 25 	call	0x4a60	; 0x4a60 <__muldi3_6>
    3222:	2f 91       	pop	r18
    3224:	3f 91       	pop	r19
    3226:	0e 94 76 24 	call	0x48ec	; 0x48ec <__umulhisi3>
    322a:	c6 0f       	add	r28, r22
    322c:	d7 1f       	adc	r29, r23
    322e:	e8 1f       	adc	r30, r24
    3230:	f9 1f       	adc	r31, r25
    3232:	d6 01       	movw	r26, r12
    3234:	0e 94 76 24 	call	0x48ec	; 0x48ec <__umulhisi3>
    3238:	e6 0f       	add	r30, r22
    323a:	f7 1f       	adc	r31, r23
    323c:	98 01       	movw	r18, r16
    323e:	be 01       	movw	r22, r28
    3240:	cf 01       	movw	r24, r30
    3242:	11 24       	eor	r1, r1
    3244:	0f 91       	pop	r16
    3246:	1f 91       	pop	r17
    3248:	cf 91       	pop	r28
    324a:	df 91       	pop	r29
    324c:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00004a60 <__muldi3_6>:
    4a60:	0e 94 76 24 	call	0x48ec	; 0x48ec <__umulhisi3>
    4a64:	46 0f       	add	r20, r22
    4a66:	57 1f       	adc	r21, r23
    4a68:	c8 1f       	adc	r28, r24
    4a6a:	d9 1f       	adc	r29, r25
    4a6c:	08 f4       	brcc	.+2      	; 0x4a70 <__muldi3_6+0x10>
    4a6e:	31 96       	adiw	r30, 0x01	; 1
    4a70:	08 95       	ret

Disassembly of section .text.libgcc.mul:

0000490a <__mulsidi3>:
    490a:	97 fb       	bst	r25, 7
    490c:	57 ff       	sbrs	r21, 7
    490e:	0c 94 ee 1e 	jmp	0x3ddc	; 0x3ddc <__umulsidi3_helper>
    4912:	9f 93       	push	r25
    4914:	8f 93       	push	r24
    4916:	0e 94 ee 1e 	call	0x3ddc	; 0x3ddc <__umulsidi3_helper>
    491a:	6e 1b       	sub	r22, r30
    491c:	7f 0b       	sbc	r23, r31
    491e:	af 91       	pop	r26
    4920:	bf 91       	pop	r27
    4922:	8a 0b       	sbc	r24, r26
    4924:	9b 0b       	sbc	r25, r27
    4926:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00003dda <__umulsidi3>:
    3dda:	e8 94       	clt

00003ddc <__umulsidi3_helper>:
    3ddc:	df 93       	push	r29
    3dde:	cf 93       	push	r28
    3de0:	fc 01       	movw	r30, r24
    3de2:	db 01       	movw	r26, r22
    3de4:	0e 94 76 24 	call	0x48ec	; 0x48ec <__umulhisi3>
    3de8:	7f 93       	push	r23
    3dea:	6f 93       	push	r22
    3dec:	e9 01       	movw	r28, r18
    3dee:	9a 01       	movw	r18, r20
    3df0:	ac 01       	movw	r20, r24
    3df2:	bf 93       	push	r27
    3df4:	af 93       	push	r26
    3df6:	3f 93       	push	r19
    3df8:	2f 93       	push	r18
    3dfa:	df 01       	movw	r26, r30
    3dfc:	0e 94 76 24 	call	0x48ec	; 0x48ec <__umulhisi3>
    3e00:	26 f4       	brtc	.+8      	; 0x3e0a <__umulsidi3_helper+0x2e>
    3e02:	6c 1b       	sub	r22, r28
    3e04:	7d 0b       	sbc	r23, r29
    3e06:	82 0b       	sbc	r24, r18
    3e08:	93 0b       	sbc	r25, r19
    3e0a:	9e 01       	movw	r18, r28
    3e0c:	eb 01       	movw	r28, r22
    3e0e:	fc 01       	movw	r30, r24
    3e10:	0e 94 30 25 	call	0x4a60	; 0x4a60 <__muldi3_6>
    3e14:	af 91       	pop	r26
    3e16:	bf 91       	pop	r27
    3e18:	2f 91       	pop	r18
    3e1a:	3f 91       	pop	r19
    3e1c:	0e 94 30 25 	call	0x4a60	; 0x4a60 <__muldi3_6>
    3e20:	be 01       	movw	r22, r28
    3e22:	cf 01       	movw	r24, r30
    3e24:	f9 01       	movw	r30, r18
    3e26:	2f 91       	pop	r18
    3e28:	3f 91       	pop	r19
    3e2a:	cf 91       	pop	r28
    3e2c:	df 91       	pop	r29
    3e2e:	08 95       	ret

Disassembly of section .text.libgcc.div:

00003c74 <__moddi3>:
    3c74:	68 94       	set
    3c76:	01 c0       	rjmp	.+2      	; 0x3c7a <__divdi3_moddi3>

00003c78 <__divdi3>:
    3c78:	e8 94       	clt

00003c7a <__divdi3_moddi3>:
    3c7a:	f9 2f       	mov	r31, r25
    3c7c:	f1 2b       	or	r31, r17
    3c7e:	12 f0       	brmi	.+4      	; 0x3c84 <__divdi3_moddi3+0xa>
    3c80:	0c 94 97 24 	jmp	0x492e	; 0x492e <__udivdi3_umoddi3>
    3c84:	a0 e0       	ldi	r26, 0x00	; 0
    3c86:	b0 e0       	ldi	r27, 0x00	; 0
    3c88:	e8 e4       	ldi	r30, 0x48	; 72
    3c8a:	fe e1       	ldi	r31, 0x1E	; 30
    3c8c:	0c 94 e7 20 	jmp	0x41ce	; 0x41ce <__prologue_saves__+0xc>
    3c90:	09 2e       	mov	r0, r25
    3c92:	05 94       	asr	r0
    3c94:	22 f4       	brpl	.+8      	; 0x3c9e <__divdi3_moddi3+0x24>
    3c96:	0e 94 66 24 	call	0x48cc	; 0x48cc <__negdi2>
    3c9a:	11 23       	and	r17, r17
    3c9c:	92 f4       	brpl	.+36     	; 0x3cc2 <__divdi3_moddi3+0x48>
    3c9e:	f0 e8       	ldi	r31, 0x80	; 128
    3ca0:	0f 26       	eor	r0, r31
    3ca2:	ff ef       	ldi	r31, 0xFF	; 255
    3ca4:	e0 94       	com	r14
    3ca6:	f0 94       	com	r15
    3ca8:	00 95       	com	r16
    3caa:	10 95       	com	r17
    3cac:	b0 94       	com	r11
    3cae:	c0 94       	com	r12
    3cb0:	d0 94       	com	r13
    3cb2:	a1 94       	neg	r10
    3cb4:	bf 0a       	sbc	r11, r31
    3cb6:	cf 0a       	sbc	r12, r31
    3cb8:	df 0a       	sbc	r13, r31
    3cba:	ef 0a       	sbc	r14, r31
    3cbc:	ff 0a       	sbc	r15, r31
    3cbe:	0f 0b       	sbc	r16, r31
    3cc0:	1f 0b       	sbc	r17, r31
    3cc2:	0e 94 86 18 	call	0x310c	; 0x310c <__udivmod64>
    3cc6:	07 fc       	sbrc	r0, 7
    3cc8:	0e 94 66 24 	call	0x48cc	; 0x48cc <__negdi2>
    3ccc:	cd b7       	in	r28, 0x3d	; 61
    3cce:	de b7       	in	r29, 0x3e	; 62
    3cd0:	ec e0       	ldi	r30, 0x0C	; 12
    3cd2:	0c 94 03 21 	jmp	0x4206	; 0x4206 <__epilogue_restores__+0xc>

Disassembly of section .text.libgcc.div:

00004928 <__umoddi3>:
    4928:	68 94       	set
    492a:	01 c0       	rjmp	.+2      	; 0x492e <__udivdi3_umoddi3>

0000492c <__udivdi3>:
    492c:	e8 94       	clt

0000492e <__udivdi3_umoddi3>:
    492e:	8f 92       	push	r8
    4930:	9f 92       	push	r9
    4932:	cf 93       	push	r28
    4934:	df 93       	push	r29
    4936:	0e 94 86 18 	call	0x310c	; 0x310c <__udivmod64>
    493a:	df 91       	pop	r29
    493c:	cf 91       	pop	r28
    493e:	9f 90       	pop	r9
    4940:	8f 90       	pop	r8
    4942:	08 95       	ret

Disassembly of section .text.libgcc.div:

0000310c <__udivmod64>:
    310c:	88 24       	eor	r8, r8
    310e:	99 24       	eor	r9, r9
    3110:	f4 01       	movw	r30, r8
    3112:	e4 01       	movw	r28, r8
    3114:	b0 e4       	ldi	r27, 0x40	; 64
    3116:	9f 93       	push	r25
    3118:	aa 27       	eor	r26, r26
    311a:	9a 15       	cp	r25, r10
    311c:	8b 04       	cpc	r8, r11
    311e:	9c 04       	cpc	r9, r12
    3120:	ed 05       	cpc	r30, r13
    3122:	fe 05       	cpc	r31, r14
    3124:	cf 05       	cpc	r28, r15
    3126:	d0 07       	cpc	r29, r16
    3128:	a1 07       	cpc	r26, r17
    312a:	98 f4       	brcc	.+38     	; 0x3152 <__udivmod64+0x46>
    312c:	ad 2f       	mov	r26, r29
    312e:	dc 2f       	mov	r29, r28
    3130:	cf 2f       	mov	r28, r31
    3132:	fe 2f       	mov	r31, r30
    3134:	e9 2d       	mov	r30, r9
    3136:	98 2c       	mov	r9, r8
    3138:	89 2e       	mov	r8, r25
    313a:	98 2f       	mov	r25, r24
    313c:	87 2f       	mov	r24, r23
    313e:	76 2f       	mov	r23, r22
    3140:	65 2f       	mov	r22, r21
    3142:	54 2f       	mov	r21, r20
    3144:	43 2f       	mov	r20, r19
    3146:	32 2f       	mov	r19, r18
    3148:	22 27       	eor	r18, r18
    314a:	b8 50       	subi	r27, 0x08	; 8
    314c:	31 f7       	brne	.-52     	; 0x311a <__udivmod64+0xe>
    314e:	bf 91       	pop	r27
    3150:	27 c0       	rjmp	.+78     	; 0x31a0 <__udivmod64+0x94>
    3152:	1b 2e       	mov	r1, r27
    3154:	bf 91       	pop	r27
    3156:	bb 27       	eor	r27, r27
    3158:	22 0f       	add	r18, r18
    315a:	33 1f       	adc	r19, r19
    315c:	44 1f       	adc	r20, r20
    315e:	55 1f       	adc	r21, r21
    3160:	66 1f       	adc	r22, r22
    3162:	77 1f       	adc	r23, r23
    3164:	88 1f       	adc	r24, r24
    3166:	99 1f       	adc	r25, r25
    3168:	88 1c       	adc	r8, r8
    316a:	99 1c       	adc	r9, r9
    316c:	ee 1f       	adc	r30, r30
    316e:	ff 1f       	adc	r31, r31
    3170:	cc 1f       	adc	r28, r28
    3172:	dd 1f       	adc	r29, r29
    3174:	aa 1f       	adc	r26, r26
    3176:	bb 1f       	adc	r27, r27
    3178:	8a 14       	cp	r8, r10
    317a:	9b 04       	cpc	r9, r11
    317c:	ec 05       	cpc	r30, r12
    317e:	fd 05       	cpc	r31, r13
    3180:	ce 05       	cpc	r28, r14
    3182:	df 05       	cpc	r29, r15
    3184:	a0 07       	cpc	r26, r16
    3186:	b1 07       	cpc	r27, r17
    3188:	48 f0       	brcs	.+18     	; 0x319c <__udivmod64+0x90>
    318a:	8a 18       	sub	r8, r10
    318c:	9b 08       	sbc	r9, r11
    318e:	ec 09       	sbc	r30, r12
    3190:	fd 09       	sbc	r31, r13
    3192:	ce 09       	sbc	r28, r14
    3194:	df 09       	sbc	r29, r15
    3196:	a0 0b       	sbc	r26, r16
    3198:	b1 0b       	sbc	r27, r17
    319a:	21 60       	ori	r18, 0x01	; 1
    319c:	1a 94       	dec	r1
    319e:	e1 f6       	brne	.-72     	; 0x3158 <__udivmod64+0x4c>
    31a0:	2e f4       	brtc	.+10     	; 0x31ac <__udivmod64+0xa0>
    31a2:	94 01       	movw	r18, r8
    31a4:	af 01       	movw	r20, r30
    31a6:	be 01       	movw	r22, r28
    31a8:	cd 01       	movw	r24, r26
    31aa:	00 0c       	add	r0, r0
    31ac:	08 95       	ret

Disassembly of section .text.libgcc:

000048cc <__negdi2>:
    48cc:	60 95       	com	r22
    48ce:	70 95       	com	r23
    48d0:	80 95       	com	r24
    48d2:	90 95       	com	r25
    48d4:	30 95       	com	r19
    48d6:	40 95       	com	r20
    48d8:	50 95       	com	r21
    48da:	21 95       	neg	r18
    48dc:	3f 4f       	sbci	r19, 0xFF	; 255
    48de:	4f 4f       	sbci	r20, 0xFF	; 255
    48e0:	5f 4f       	sbci	r21, 0xFF	; 255
    48e2:	6f 4f       	sbci	r22, 0xFF	; 255
    48e4:	7f 4f       	sbci	r23, 0xFF	; 255
    48e6:	8f 4f       	sbci	r24, 0xFF	; 255
    48e8:	9f 4f       	sbci	r25, 0xFF	; 255
    48ea:	08 95       	ret

Disassembly of section .text.libgcc.prologue:

000041c2 <__prologue_saves__>:
    41c2:	2f 92       	push	r2
    41c4:	3f 92       	push	r3
    41c6:	4f 92       	push	r4
    41c8:	5f 92       	push	r5
    41ca:	6f 92       	push	r6
    41cc:	7f 92       	push	r7
    41ce:	8f 92       	push	r8
    41d0:	9f 92       	push	r9
    41d2:	af 92       	push	r10
    41d4:	bf 92       	push	r11
    41d6:	cf 92       	push	r12
    41d8:	df 92       	push	r13
    41da:	ef 92       	push	r14
    41dc:	ff 92       	push	r15
    41de:	0f 93       	push	r16
    41e0:	1f 93       	push	r17
    41e2:	cf 93       	push	r28
    41e4:	df 93       	push	r29
    41e6:	cd b7       	in	r28, 0x3d	; 61
    41e8:	de b7       	in	r29, 0x3e	; 62
    41ea:	ca 1b       	sub	r28, r26
    41ec:	db 0b       	sbc	r29, r27
    41ee:	0f b6       	in	r0, 0x3f	; 63
    41f0:	f8 94       	cli
    41f2:	de bf       	out	0x3e, r29	; 62
    41f4:	0f be       	out	0x3f, r0	; 63
    41f6:	cd bf       	out	0x3d, r28	; 61
    41f8:	09 94       	ijmp

Disassembly of section .text.libgcc.prologue:

000041fa <__epilogue_restores__>:
    41fa:	2a 88       	ldd	r2, Y+18	; 0x12
    41fc:	39 88       	ldd	r3, Y+17	; 0x11
    41fe:	48 88       	ldd	r4, Y+16	; 0x10
    4200:	5f 84       	ldd	r5, Y+15	; 0x0f
    4202:	6e 84       	ldd	r6, Y+14	; 0x0e
    4204:	7d 84       	ldd	r7, Y+13	; 0x0d
    4206:	8c 84       	ldd	r8, Y+12	; 0x0c
    4208:	9b 84       	ldd	r9, Y+11	; 0x0b
    420a:	aa 84       	ldd	r10, Y+10	; 0x0a
    420c:	b9 84       	ldd	r11, Y+9	; 0x09
    420e:	c8 84       	ldd	r12, Y+8	; 0x08
    4210:	df 80       	ldd	r13, Y+7	; 0x07
    4212:	ee 80       	ldd	r14, Y+6	; 0x06
    4214:	fd 80       	ldd	r15, Y+5	; 0x05
    4216:	0c 81       	ldd	r16, Y+4	; 0x04
    4218:	1b 81       	ldd	r17, Y+3	; 0x03
    421a:	aa 81       	ldd	r26, Y+2	; 0x02
    421c:	b9 81       	ldd	r27, Y+1	; 0x01
    421e:	ce 0f       	add	r28, r30
    4220:	d1 1d       	adc	r29, r1
    4222:	0f b6       	in	r0, 0x3f	; 63
    4224:	f8 94       	cli
    4226:	de bf       	out	0x3e, r29	; 62
    4228:	0f be       	out	0x3f, r0	; 63
    422a:	cd bf       	out	0x3d, r28	; 61
    422c:	ed 01       	movw	r28, r26
    422e:	08 95       	ret

Disassembly of section .text.libgcc:

00004a72 <__adddi3>:
    4a72:	2a 0d       	add	r18, r10
    4a74:	3b 1d       	adc	r19, r11
    4a76:	4c 1d       	adc	r20, r12
    4a78:	5d 1d       	adc	r21, r13
    4a7a:	6e 1d       	adc	r22, r14
    4a7c:	7f 1d       	adc	r23, r15
    4a7e:	80 1f       	adc	r24, r16
    4a80:	91 1f       	adc	r25, r17
    4a82:	08 95       	ret

Disassembly of section .text.libgcc:

00004a84 <__cmpdi2>:
    4a84:	2a 15       	cp	r18, r10
    4a86:	3b 05       	cpc	r19, r11
    4a88:	4c 05       	cpc	r20, r12
    4a8a:	5d 05       	cpc	r21, r13
    4a8c:	6e 05       	cpc	r22, r14
    4a8e:	7f 05       	cpc	r23, r15
    4a90:	80 07       	cpc	r24, r16
    4a92:	91 07       	cpc	r25, r17
    4a94:	08 95       	ret
