
ModuleCPU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00004fc0  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000da  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00004fc0  2**0
                  ALLOC
  3 .noinit       0000022a  00800102  00800102  00004fc0  2**2
                  ALLOC
  4 .comment      0000002f  00000000  00000000  00004fc0  2**0
                  CONTENTS, READONLY
  5 .stack.descriptors.hdr 00000142  00000000  00000000  00004fef  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000508  00000000  00000000  00005131  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00008eba  00000000  00000000  00005639  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001abf  00000000  00000000  0000e4f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000038c7  00000000  00000000  0000ffb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001230  00000000  00000000  0001387c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000006f5  00000000  00000000  00014aac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00004840  00000000  00000000  000151a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000004e8  00000000  00000000  000199e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .text         00000004  00004efc  00004efc  00004fb0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00019ecc  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .text.__vector_27 000000bc  000031cc  000031cc  00003280  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.ADCSetPowerOn 0000000c  00004eb6  00004eb6  00004f6a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.ADCStartConversion 0000002a  00004858  00004858  0000490c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .progmemx.data 0000000b  00000341  00000341  000003f5  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 20 .text.ADCInit 0000013c  00002312  00002312  000023c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .progmemx.data.sg_sMuxSelectList 0000000f  0000031a  0000031a  000003ce  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 22 .bss.sg_eCurrentType 00000001  0080094f  0080094f  00004fc0  2**0
                  ALLOC
 23 .bss.sg_eState 00000001  00800964  00800964  00004fc0  2**0
                  ALLOC
 24 .text.CANLookupCommand 00000062  00003ec6  00003ec6  00003f7a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .progmemx.data 0000000b  0000034c  0000034c  00000400  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 26 .text.CANMOBSet 00000212  00001afe  00001afe  00001bb2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.CANSendMessageInternal 00000178  00001ece  00001ece  00001f82  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.CANMOBInterrupt 00000166  00002046  00002046  000020fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.__vector_18 00000118  00002582  00002582  00002636  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.CANSendMessage 00000016  00004d62  00004d62  00004e16  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.CANSetRXCallback 0000000a  00004ece  00004ece  00004f82  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.CANInit 0000009c  000035e0  000035e0  00003694  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.CANCheckTxStatus 0000005c  00003fe8  00003fe8  0000409c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .progmemx.data.sg_sRXCommandList 00000021  000002d5  000002d5  00000389  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 35 .progmemx.data.sg_sMOBModuleRequestTime 00000008  00000357  00000357  0000040b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 36 .progmemx.data.sg_sMOBModuleHardwareDetail 00000008  0000035f  0000035f  00000413  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 37 .progmemx.data.sg_sMOBModuleCellDetail 00000008  00000367  00000367  0000041b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 38 .progmemx.data.sg_sMOBModuleCellCommStat2 00000008  0000036f  0000036f  00000423  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 39 .progmemx.data.sg_sMOBModuleCellCommStat1 00000008  00000377  00000377  0000042b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 40 .progmemx.data.sg_sMOBModuleStatus3 00000008  0000037f  0000037f  00000433  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 41 .progmemx.data.sg_sMOBModuleStatus2 00000008  00000387  00000387  0000043b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 42 .progmemx.data.sg_sMOBModuleStatus1 00000008  0000038f  0000038f  00000443  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 43 .progmemx.data.sg_sMOBModuleAnnouncement 00000008  00000397  00000397  0000044b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 44 .progmemx.data.sg_sMOBGenericReceive 00000008  0000039f  0000039f  00000453  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 45 .progmemx.data.sg_sMOBDisabled 00000008  000003a7  000003a7  0000045b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 46 .bss.sg_bInRetransmit 00000001  00800965  00800965  00004fc0  2**0
                  ALLOC
 47 .bss.sg_u8LastTXDataLen 00000001  00800966  00800966  00004fc0  2**0
                  ALLOC
 48 .bss.sg_u8LastTXData 00000008  0080093d  0080093d  00004fc0  2**0
                  ALLOC
 49 .bss.sg_eLastTXType 00000001  00800967  00800967  00004fc0  2**0
                  ALLOC
 50 .bss.sg_u8TransmitAttempts 00000001  00800968  00800968  00004fc0  2**0
                  ALLOC
 51 .bss.sg_pfRXCallback 00000002  0080094d  0080094d  00004fc0  2**0
                  ALLOC
 52 .bss.sg_u8Busy 00000001  00800969  00800969  00004fc0  2**0
                  ALLOC
 53 .text.DebugOut 0000000e  00004e7e  00004e7e  00004f32  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 .text.EEPROMRead 00000012  00004de4  00004de4  00004e98  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.I2CBitDelay 0000000e  00004e8c  00004e8c  00004f40  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.I2CStart 0000002c  000047a8  000047a8  0000485c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .text.I2CStop 00000026  0000494a  0000494a  000049fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .text.I2CUnstick 0000003c  000044f2  000044f2  000045a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 .text.I2CTxByte 0000006a  00003d8e  00003d8e  00003e42  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 60 .text.I2CRxByte 0000007a  00003c2e  00003c2e  00003ce2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 61 .text.I2CSetup 0000002c  000047d4  000047d4  00004888  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 62 .text.I2CStartTransaction 00000028  00004882  00004882  00004936  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 63 .text.CellCountExpectedSet 000000c4  00003046  00003046  000030fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 64 .text.SendModuleControllerStatus 00000010  00004e3e  00004e3e  00004ef2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .text.ModuleControllerStateSet 0000000a  00004ed8  00004ed8  00004f8c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 66 .text.ModuleControllerStateSetMax 00000016  00004d78  00004d78  00004e2c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 67 .text.Check5VLoss 00000018  00004d1a  00004d1a  00004dce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 68 .text.CellDataConvertVoltage 0000005e  00003f8a  00003f8a  0000403e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 69 .text.CellDataConvertTemperature 00000064  00003e62  00003e62  00003f16  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 70 .text.ModuleCurrentConvertReadings 00000104  0000269a  0000269a  0000274e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 71 .text.__vector_1 00000024  00004996  00004996  00004a4a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 72 .text.__vector_2 00000024  000049ba  000049ba  00004a6e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 73 .text.__vector_3 00000024  000049de  000049de  00004a92  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 74 .text.__vector_4 00000024  00004a02  00004a02  00004ab6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 75 .text.__vector_5 00000024  00004a26  00004a26  00004ada  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 76 .text.__vector_6 00000024  00004a4a  00004a4a  00004afe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 77 .text.__vector_22 00000024  00004a6e  00004a6e  00004b22  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 78 .text.__vector_9 00000024  00004a92  00004a92  00004b46  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 79 .text.__vector_11 00000024  00004ab6  00004ab6  00004b6a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 80 .text.__vector_13 00000024  00004ada  00004ada  00004b8e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 81 .text.__vector_14 00000024  00004afe  00004afe  00004bb2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 82 .text.__vector_17 00000024  00004b22  00004b22  00004bd6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 83 .text.__vector_19 00000024  00004b46  00004b46  00004bfa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 84 .text.__vector_21 00000024  00004b6a  00004b6a  00004c1e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 85 .text.__vector_25 00000024  00004b8e  00004b8e  00004c42  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 86 .text.__vector_26 00000024  00004bb2  00004bb2  00004c66  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 87 .text.__vector_29 00000024  00004bd6  00004bd6  00004c8a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 88 .text.__vector_30 00000024  00004bfa  00004bfa  00004cae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 89 .text.CurrentThresholdsGet 00000094  0000367c  0000367c  00003730  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 90 .progmemx.data 000001a1  000000da  000000da  0000018e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 91 .text.CANReceiveCallback 00000298  000011d0  000011d0  00001284  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 92 .text.ControllerStatusMessagesSend 00000422  00000810  00000810  000008c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 93 .text.CellStringProcess 000002a6  00000f2a  00000f2a  00000fde  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 94 .text.Delay   00000052  0000429e  0000429e  00004352  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 95 .text.PlatformAssert 0000002c  00004800  00004800  000048b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 96 .text.ModuleControllerStateHandle 0000021e  000018e0  000018e0  00001994  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 97 .text.PlatformGetRegistrationID 00000006  00004ef6  00004ef6  00004faa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 98 .text.SetSysclock 0000000c  00004ec2  00004ec2  00004f76  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 99 .text.ModuleControllerGetUniqueID 0000007e  00003a3a  00003a3a  00003aee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
100 .text.TimerInit 00000052  000042f0  000042f0  000043a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
101 .text.__vector_12 000000ba  00003288  00003288  0000333c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
102 .text.WatchdogReset 00000002  00004f04  00004f04  00004fb8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
103 .text.WatchdogOff 0000001a  00004d00  00004d00  00004db4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
104 .text.__vector_28 00000052  00004342  00004342  000043f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
105 .text.__vector_23 0000008a  00003710  00003710  000037c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
106 .text.__vector_24 0000004c  00004394  00004394  00004448  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
107 .text.vUARTRXStart 00000016  00004d8e  00004d8e  00004e42  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
108 .text.vUARTRXEnd 00000024  00004c1e  00004c1e  00004cd2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
109 .text.vUARTRXData 0000007a  00003ca8  00003ca8  00003d5c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
110 .text.PlatformGetSendData 00000028  000048aa  000048aa  0000495e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
111 .text.ADCCallback 00000026  00004970  00004970  00004a24  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
112 .text.FrameInit 000000cc  00002dea  00002dea  00002e9e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
113 .text.CellStringPowerStateMachine 00000088  00003824  00003824  000038d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
114 .text.main    000002f8  00000c32  00000c32  00000ce6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
115 .bss.sg_u8PCMSK1 00000001  0080096a  0080096a  00004fc0  2**0
                  ALLOC
116 .bss.sg_u8PCMSK0 00000001  0080096b  0080096b  00004fc0  2**0
                  ALLOC
117 .bss.sg_u8UnhandledInterruptVector 00000001  0080096c  0080096c  00004fc0  2**0
                  ALLOC
118 .bss.sg_u8Reason 00000001  0080096d  0080096d  00004fc0  2**0
                  ALLOC
119 .progmemx.data.sg_u8FractionalLookup 00000010  0000030a  0000030a  000003be  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
120 .bss.sg_u8ControllerStatusMsgCount 00000001  0080096e  0080096e  00004fc0  2**0
                  ALLOC
121 .bss.sg_u8CellReports 00000001  0080096f  0080096f  00004fc0  2**0
                  ALLOC
122 .bss.sg_u16BytesReceived 00000002  0080095c  0080095c  00004fc0  2**0
                  ALLOC
123 .bss.sg_u8CellBufferTemp 00000004  00800950  00800950  00004fc0  2**2
                  ALLOC
124 .bss.sg_u8CellBufferRX 00000001  00800970  00800970  00004fc0  2**0
                  ALLOC
125 .bss.sg_u8CellIndex 00000001  00800971  00800971  00004fc0  2**0
                  ALLOC
126 .bss.sg_u8TicksSinceLastPackControllerMessage 00000001  00800972  00800972  00004fc0  2**0
                  ALLOC
127 .bss.sg_u8CellStringPowerTimer 00000001  00800973  00800973  00004fc0  2**0
                  ALLOC
128 .bss.sg_bFrameStart 00000001  00800974  00800974  00004fc0  2**0
                  ALLOC
129 .bss.sg_u8CellFrameTimer 00000001  00800975  00800975  00004fc0  2**0
                  ALLOC
130 .bss.sg_bIgnoreStatusRequests 00000001  00800976  00800976  00004fc0  2**0
                  ALLOC
131 .bss.sg_u8AnnouncementDelayTicks 00000001  00800977  00800977  00004fc0  2**0
                  ALLOC
132 .bss.sg_bAnnouncementPending 00000001  00800978  00800978  00004fc0  2**0
                  ALLOC
133 .bss.sg_u8CurrentBufferIndex 00000001  00800979  00800979  00004fc0  2**0
                  ALLOC
134 .bss.sg_sCurrenBuffer 00000010  0080091d  0080091d  00004fc0  2**0
                  ALLOC
135 .text.IsLeapYear 00000034  00004648  00004648  000046fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
136 .text.RTCStartTransaction 00000044  0000442c  0000442c  000044e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
137 .text.StructTMToHW 00000054  000041f6  000041f6  000042aa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
138 .text.HWToStructTM 0000007c  00003b36  00003b36  00003bea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
139 .text.__vector_10 00000086  000038ac  000038ac  00003960  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
140 .progmemx.data 00000014  000002f6  000002f6  000003aa  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
141 .text.RTCReadRegisters 0000007e  00003ab8  00003ab8  00003b6c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
142 .text.RTCReadHW 000000e2  00002a78  00002a78  00002b2c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
143 .text.RTCWriteRegisters 0000006a  00003df8  00003df8  00003eac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
144 .text.RTCWriteHW 000000fe  0000279e  0000279e  00002852  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
145 .text.RTCSetTime 000000c6  00002f80  00002f80  00003034  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
146 .text.RTCInit 00000222  000016be  000016be  00001772  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
147 .progmemx.data.sg_u8DaysInMonths 0000000c  00000329  00000329  000003dd  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
148 .bss.sg_u64Time 00000008  00800945  00800945  00004fc0  2**0
                  ALLOC
149 .text.SDSetCS 00000014  00004dd0  00004dd0  00004e84  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
150 .text.SDPowerup 0000003a  0000456a  0000456a  0000461e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
151 .text.SDCommand 000000aa  000033f4  000033f4  000034a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
152 .text.SDGoIdle 00000022  00004c66  00004c66  00004d1a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
153 .text.SDSendOpCondition 00000034  0000467c  0000467c  00004730  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
154 .text.SDSendOpConditionArg 00000056  000040f4  000040f4  000041a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
155 .text.SDWaitResponse7 0000000e  00004e9a  00004e9a  00004f4e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
156 .text.SDSendInterfaceCondition 00000034  000046b0  000046b0  00004764  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
157 .text.SDReadOCR 00000032  000046e4  000046e4  00004798  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
158 .text.SDReadCSD 0000007c  00003bb2  00003bb2  00003c66  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
159 .text.SDReceiveDataBlock 0000008a  0000379a  0000379a  0000384e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
160 .text.SDTransmitDataBlock 000000c2  0000310a  0000310a  000031be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
161 .text.SDInit  00000166  000021ac  000021ac  00002260  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
162 .text.SDRead  000000d8  00002d12  00002d12  00002dc6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
163 .text.SDWrite 000000dc  00002b5a  00002b5a  00002c0e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
164 .bss.sg_u8CSD 00000010  0080092d  0080092d  00004fc0  2**0
                  ALLOC
165 .bss.sg_u16BlockSize 00000002  0080095e  0080095e  00004fc0  2**0
                  ALLOC
166 .bss.sg_u32SDSectorCount 00000004  00800954  00800954  00004fc0  2**0
                  ALLOC
167 .text.SPITransaction 00000058  00004044  00004044  000040f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
168 .text.SPISetBaudRate 000000ca  00002eb6  00002eb6  00002f6a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
169 .text.SPIInit 0000002c  0000482c  0000482c  000048e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
170 .progmemx.data.sg_sSPIBaudRates 0000002a  000002ab  000002ab  0000035f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
171 .text.readGlobalState 0000003e  000044b4  000044b4  00004568  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
172 .text.writeGlobalState 00000032  00004716  00004716  000047ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
173 .text.updateSessionMap 000000dc  00002c36  00002c36  00002cea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
174 .text.STORE_Init 00000082  000039b8  000039b8  00003a6c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
175 .text.STORE_WriteFrame 000000f8  0000289c  0000289c  00002950  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
176 .text.STORE_StartNewSession 00000054  0000424a  0000424a  000042fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
177 .text.STORE_EndSession 00000058  0000409c  0000409c  00004150  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
178 .bss.frameBuffer 00000400  0080032c  0080032c  00004fc0  2**2
                  ALLOC
179 .bss.currentSector 00000004  00800958  00800958  00004fc0  2**0
                  ALLOC
180 .bss.gState   000001d8  0080072c  0080072c  00004fc0  2**2
                  ALLOC
181 .text.vUARTtxDataAvailable 00000024  00004c42  00004c42  00004cf6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
182 .text.vUARTtxDataGet 0000004c  000043e0  000043e0  00004494  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
183 .text.vUARTRXReset 0000000a  00004ee2  00004ee2  00004f96  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
184 .text.vUARTStarttx 00000056  0000414a  0000414a  000041fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
185 .text.__vector_8 000000b2  00003342  00003342  000033f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
186 .text.__vector_16 000000e4  00002994  00002994  00002a48  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
187 .text.__vector_15 00000134  0000244e  0000244e  00002502  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
188 .text.vUARTInit 00000036  000045dc  000045dc  00004690  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
189 .text.vUARTInitReceive 00000028  000048d2  000048d2  00004986  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
190 .bss.sg_bState 00000001  0080097a  0080097a  00004fc0  2**0
                  ALLOC
191 .bss.sg_u8SendData 00000002  00800960  00800960  00004fc0  2**0
                  ALLOC
192 .bss.sg_u8SendIndex 00000001  0080097b  0080097b  00004fc0  2**0
                  ALLOC
193 .bss.sg_edgeCorrections 00000002  00800962  00800962  00004fc0  2**0
                  ALLOC
194 .bss.sg_maxTimingError 00000001  0080097c  0080097c  00004fc0  2**0
                  ALLOC
195 .bss.sg_minTimingError 00000001  0080097d  0080097d  00004fc0  2**0
                  ALLOC
196 .bss.sg_bMCTxNextBit 00000001  0080097e  0080097e  00004fc0  2**0
                  ALLOC
197 .bss.sg_bCellReportsReuested 00000001  0080097f  0080097f  00004fc0  2**0
                  ALLOC
198 .bss.sg_etxState 00000001  00800980  00800980  00004fc0  2**0
                  ALLOC
199 .bss.sg_btxMoreAvailable 00000001  00800981  00800981  00004fc0  2**0
                  ALLOC
200 .bss.sg_u8txDataByte 00000001  00800982  00800982  00004fc0  2**0
                  ALLOC
201 .bss.sg_u8txBitCount 00000001  00800983  00800983  00004fc0  2**0
                  ALLOC
202 .bss.sg_bCell_mc_rxMoreData 00000001  00800984  00800984  00004fc0  2**0
                  ALLOC
203 .bss.sg_bCell_mc_rxPriorState 00000001  00800985  00800985  00004fc0  2**0
                  ALLOC
204 .bss.sg_eCell_mc_rxState 00000001  00800986  00800986  00004fc0  2**0
                  ALLOC
205 .bss.sg_u8rxDataByte 00000001  00800987  00800987  00004fc0  2**0
                  ALLOC
206 .bss.sg_u8Cell_mc_rxBitCount 00000001  00800988  00800988  00004fc0  2**0
                  ALLOC
207 .text.libgcc.div 00000028  000048fa  000048fa  000049ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
208 .text.libgcc.div 00000044  00004470  00004470  00004524  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
209 .text.libgcc.div 0000002e  0000477a  0000477a  0000482e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
210 .text.libgcc.div 00000010  00004e4e  00004e4e  00004f02  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
211 .text.libgcc.mul 0000001e  00004ca8  00004ca8  00004d5c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
212 .text.libgcc.mul 0000000e  00004ea8  00004ea8  00004f5c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
213 .text.libgcc.mul 00000016  00004da4  00004da4  00004e58  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
214 .text.libgcc.mul 00000010  00004e5e  00004e5e  00004f12  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
215 .text.libgcc  00000010  00004e6e  00004e6e  00004f22  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
216 .text.libgcc  00000018  00004d32  00004d32  00004de6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
217 .text.libgcc  00000018  00004d4a  00004d4a  00004dfe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
218 .text.__dummy_fini 00000002  00004f06  00004f06  00004fba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
219 .text.__dummy_funcs_on_exit 00000002  00004f08  00004f08  00004fbc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
220 .text.__dummy_simulator_exit 00000002  00004f0a  00004f0a  00004fbe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
221 .text.exit    00000016  00004dba  00004dba  00004e6e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
222 .text.memcpy  00000032  00004748  00004748  000047fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
223 .text.memset  00000012  00004df6  00004df6  00004eaa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
224 .text.gmtime  0000000a  00004eec  00004eec  00004fa0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
225 .bss.tm.1240  00000019  00800904  00800904  00004fc0  2**0
                  ALLOC
226 .progmemx.data 00000004  000003af  000003af  00000463  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
227 .text.__gmtime_r 0000006c  00003d22  00003d22  00003dd6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
228 .progmemx.data 00000004  000003b3  000003b3  00000467  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
229 .text.mktime  00000086  00003932  00003932  000039e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
230 .text._Exit   00000004  00004f00  00004f00  00004fb4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
231 .text.__tm_to_secs 000001be  00001d10  00001d10  00001dc4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
232 .text.__year_to_secs 00000256  00001468  00001468  0000151c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
233 .text.__month_to_secs 0000003c  0000452e  0000452e  000045e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
234 .progmemx.data.secs_through_month.1090 00000030  0000027b  0000027b  0000032f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
235 .text.__secs_to_tm 00000458  000003b8  000003b8  0000046c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
236 .progmemx.data.days_in_month.1250 0000000c  00000335  00000335  000003e9  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
237 .text.libgcc.div 00000028  00004922  00004922  000049d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
238 .text.libgcc.mul 000000a0  00003540  00003540  000035f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
239 .text.libgcc.mul 00000012  00004e08  00004e08  00004ebc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
240 .text.libgcc.mul 0000001e  00004cc6  00004cc6  00004d7a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
241 .text.libgcc.mul 00000056  000041a0  000041a0  00004254  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
242 .text.libgcc.div 00000062  00003f28  00003f28  00003fdc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
243 .text.libgcc.div 0000001c  00004ce4  00004ce4  00004d98  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
244 .text.libgcc.div 000000a2  0000349e  0000349e  00003552  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
245 .text.libgcc  00000020  00004c88  00004c88  00004d3c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
246 .text.libgcc.prologue 00000038  000045a4  000045a4  00004658  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
247 .text.libgcc.prologue 00000036  00004612  00004612  000046c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
248 .text.libgcc  00000012  00004e1a  00004e1a  00004ece  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
249 .text.libgcc  00000012  00004e2c  00004e2c  00004ee0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 43 00 	jmp	0x86	; 0x86 <__ctors_end>
   4:	0c 94 cb 24 	jmp	0x4996	; 0x4996 <__vector_1>
   8:	0c 94 dd 24 	jmp	0x49ba	; 0x49ba <__vector_2>
   c:	0c 94 ef 24 	jmp	0x49de	; 0x49de <__vector_3>
  10:	0c 94 01 25 	jmp	0x4a02	; 0x4a02 <__vector_4>
  14:	0c 94 13 25 	jmp	0x4a26	; 0x4a26 <__vector_5>
  18:	0c 94 25 25 	jmp	0x4a4a	; 0x4a4a <__vector_6>
  1c:	0c 94 7e 27 	jmp	0x4efc	; 0x4efc <__bad_interrupt>
  20:	0c 94 a1 19 	jmp	0x3342	; 0x3342 <__vector_8>
  24:	0c 94 49 25 	jmp	0x4a92	; 0x4a92 <__vector_9>
  28:	0c 94 56 1c 	jmp	0x38ac	; 0x38ac <__vector_10>
  2c:	0c 94 5b 25 	jmp	0x4ab6	; 0x4ab6 <__vector_11>
  30:	0c 94 44 19 	jmp	0x3288	; 0x3288 <__vector_12>
  34:	0c 94 6d 25 	jmp	0x4ada	; 0x4ada <__vector_13>
  38:	0c 94 7f 25 	jmp	0x4afe	; 0x4afe <__vector_14>
  3c:	0c 94 27 12 	jmp	0x244e	; 0x244e <__vector_15>
  40:	0c 94 ca 14 	jmp	0x2994	; 0x2994 <__vector_16>
  44:	0c 94 91 25 	jmp	0x4b22	; 0x4b22 <__vector_17>
  48:	0c 94 c1 12 	jmp	0x2582	; 0x2582 <__vector_18>
  4c:	0c 94 a3 25 	jmp	0x4b46	; 0x4b46 <__vector_19>
  50:	0c 94 7e 27 	jmp	0x4efc	; 0x4efc <__bad_interrupt>
  54:	0c 94 b5 25 	jmp	0x4b6a	; 0x4b6a <__vector_21>
  58:	0c 94 37 25 	jmp	0x4a6e	; 0x4a6e <__vector_22>
  5c:	0c 94 88 1b 	jmp	0x3710	; 0x3710 <__vector_23>
  60:	0c 94 ca 21 	jmp	0x4394	; 0x4394 <__vector_24>
  64:	0c 94 c7 25 	jmp	0x4b8e	; 0x4b8e <__vector_25>
  68:	0c 94 d9 25 	jmp	0x4bb2	; 0x4bb2 <__vector_26>
  6c:	0c 94 e6 18 	jmp	0x31cc	; 0x31cc <__vector_27>
  70:	0c 94 a1 21 	jmp	0x4342	; 0x4342 <__vector_28>
  74:	0c 94 eb 25 	jmp	0x4bd6	; 0x4bd6 <__vector_29>
  78:	0c 94 fd 25 	jmp	0x4bfa	; 0x4bfa <__vector_30>

0000007c <.dinit>:
  7c:	01 00       	.word	0x0001	; ????
  7e:	01 02       	muls	r16, r17
  80:	80 01       	movw	r16, r0
  82:	04 09       	sbc	r16, r4
  84:	89 80       	ldd	r8, Y+1	; 0x01

00000086 <__ctors_end>:
  86:	11 24       	eor	r1, r1
  88:	1f be       	out	0x3f, r1	; 63
  8a:	cf ef       	ldi	r28, 0xFF	; 255
  8c:	d0 e1       	ldi	r29, 0x10	; 16
  8e:	de bf       	out	0x3e, r29	; 62
  90:	cd bf       	out	0x3d, r28	; 61

00000092 <__do_copy_data>:
  92:	ec e7       	ldi	r30, 0x7C	; 124
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	40 e0       	ldi	r20, 0x00	; 0
  98:	17 c0       	rjmp	.+46     	; 0xc8 <__do_clear_bss+0x8>
  9a:	b5 91       	lpm	r27, Z+
  9c:	a5 91       	lpm	r26, Z+
  9e:	35 91       	lpm	r19, Z+
  a0:	25 91       	lpm	r18, Z+
  a2:	05 91       	lpm	r16, Z+
  a4:	07 fd       	sbrc	r16, 7
  a6:	0c c0       	rjmp	.+24     	; 0xc0 <__do_clear_bss>
  a8:	95 91       	lpm	r25, Z+
  aa:	85 91       	lpm	r24, Z+
  ac:	ef 01       	movw	r28, r30
  ae:	f9 2f       	mov	r31, r25
  b0:	e8 2f       	mov	r30, r24
  b2:	05 90       	lpm	r0, Z+
  b4:	0d 92       	st	X+, r0
  b6:	a2 17       	cp	r26, r18
  b8:	b3 07       	cpc	r27, r19
  ba:	d9 f7       	brne	.-10     	; 0xb2 <__do_copy_data+0x20>
  bc:	fe 01       	movw	r30, r28
  be:	04 c0       	rjmp	.+8      	; 0xc8 <__do_clear_bss+0x8>

000000c0 <__do_clear_bss>:
  c0:	1d 92       	st	X+, r1
  c2:	a2 17       	cp	r26, r18
  c4:	b3 07       	cpc	r27, r19
  c6:	e1 f7       	brne	.-8      	; 0xc0 <__do_clear_bss>
  c8:	e6 38       	cpi	r30, 0x86	; 134
  ca:	f4 07       	cpc	r31, r20
  cc:	31 f7       	brne	.-52     	; 0x9a <__do_copy_data+0x8>
  ce:	0e 94 19 06 	call	0xc32	; 0xc32 <main>
  d2:	0c 94 dd 26 	jmp	0x4dba	; 0x4dba <exit>

000000d6 <_exit>:
  d6:	f8 94       	cli

000000d8 <__stop_program>:
  d8:	ff cf       	rjmp	.-2      	; 0xd8 <__stop_program>

Disassembly of section .text:

00004efc <__bad_interrupt>:
    4efc:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.__vector_27:

000031cc <__vector_27>:

	// Disable the conversion complete interrupt
	ADCSRA &= (uint8_t)~(1 << ADIE);

	// Clear any pending interrupt	
	ADCSRA |= (1 << ADIF);
    31cc:	78 94       	sei
    31ce:	1f 92       	push	r1
    31d0:	0f 92       	push	r0
    31d2:	0f b6       	in	r0, 0x3f	; 63
    31d4:	0f 92       	push	r0
    31d6:	11 24       	eor	r1, r1
    31d8:	2f 93       	push	r18
    31da:	3f 93       	push	r19
    31dc:	4f 93       	push	r20
    31de:	5f 93       	push	r21
    31e0:	6f 93       	push	r22
    31e2:	7f 93       	push	r23
    31e4:	8f 93       	push	r24
    31e6:	9f 93       	push	r25
    31e8:	af 93       	push	r26
    31ea:	bf 93       	push	r27
    31ec:	ef 93       	push	r30
    31ee:	ff 93       	push	r31
    31f0:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f0078>
    31f4:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f0079>
    31f8:	80 91 4f 09 	lds	r24, 0x094F	; 0x80094f <sg_eCurrentType>
    31fc:	91 e0       	ldi	r25, 0x01	; 1
    31fe:	98 0f       	add	r25, r24
    3200:	90 93 4f 09 	sts	0x094F, r25	; 0x80094f <sg_eCurrentType>
    3204:	95 30       	cpi	r25, 0x05	; 5
    3206:	10 f0       	brcs	.+4      	; 0x320c <__vector_27+0x40>
    3208:	10 92 4f 09 	sts	0x094F, r1	; 0x80094f <sg_eCurrentType>
    320c:	ac e7       	ldi	r26, 0x7C	; 124
    320e:	b0 e0       	ldi	r27, 0x00	; 0
    3210:	5c 91       	ld	r21, X
    3212:	20 91 4f 09 	lds	r18, 0x094F	; 0x80094f <sg_eCurrentType>
    3216:	30 e0       	ldi	r19, 0x00	; 0
    3218:	f9 01       	movw	r30, r18
    321a:	ee 0f       	add	r30, r30
    321c:	ff 1f       	adc	r31, r31
    321e:	2e 0f       	add	r18, r30
    3220:	3f 1f       	adc	r19, r31
    3222:	03 2e       	mov	r0, r19
    3224:	00 0c       	add	r0, r0
    3226:	44 0b       	sbc	r20, r20
    3228:	26 5e       	subi	r18, 0xE6	; 230
    322a:	3c 4f       	sbci	r19, 0xFC	; 252
    322c:	4f 4f       	sbci	r20, 0xFF	; 255
    322e:	f9 01       	movw	r30, r18
    3230:	94 91       	lpm	r25, Z
    3232:	47 fd       	sbrc	r20, 7
    3234:	90 81       	ld	r25, Z
    3236:	50 7e       	andi	r21, 0xE0	; 224
    3238:	95 2b       	or	r25, r21
    323a:	90 6c       	ori	r25, 0xC0	; 192
    323c:	9c 93       	st	X, r25
    323e:	0e 94 b8 24 	call	0x4970	; 0x4970 <ADCCallback>
    3242:	80 91 4f 09 	lds	r24, 0x094F	; 0x80094f <sg_eCurrentType>
    3246:	81 11       	cpse	r24, r1
    3248:	09 c0       	rjmp	.+18     	; 0x325c <__vector_27+0x90>
    324a:	ea e7       	ldi	r30, 0x7A	; 122
    324c:	f0 e0       	ldi	r31, 0x00	; 0
    324e:	80 81       	ld	r24, Z
    3250:	87 7f       	andi	r24, 0xF7	; 247
    3252:	80 83       	st	Z, r24
    3254:	81 e0       	ldi	r24, 0x01	; 1
    3256:	80 93 64 09 	sts	0x0964, r24	; 0x800964 <sg_eState>
    325a:	05 c0       	rjmp	.+10     	; 0x3266 <__vector_27+0x9a>
    325c:	ea e7       	ldi	r30, 0x7A	; 122
    325e:	f0 e0       	ldi	r31, 0x00	; 0
    3260:	80 81       	ld	r24, Z
    3262:	88 64       	ori	r24, 0x48	; 72
    3264:	80 83       	st	Z, r24
    3266:	ff 91       	pop	r31
    3268:	ef 91       	pop	r30
    326a:	bf 91       	pop	r27
    326c:	af 91       	pop	r26
    326e:	9f 91       	pop	r25
    3270:	8f 91       	pop	r24
    3272:	7f 91       	pop	r23
    3274:	6f 91       	pop	r22
    3276:	5f 91       	pop	r21
    3278:	4f 91       	pop	r20
    327a:	3f 91       	pop	r19
    327c:	2f 91       	pop	r18
    327e:	0f 90       	pop	r0
    3280:	0f be       	out	0x3f, r0	; 63
    3282:	0f 90       	pop	r0
    3284:	1f 90       	pop	r1
    3286:	18 95       	reti

Disassembly of section .text.ADCSetPowerOn:

00004eb6 <ADCSetPowerOn>:
}

// Enable ADC
void ADCSetPowerOn( void )
{
	ADCSRA |= (1 << ADEN);
    4eb6:	ea e7       	ldi	r30, 0x7A	; 122
    4eb8:	f0 e0       	ldi	r31, 0x00	; 0
    4eba:	80 81       	ld	r24, Z
    4ebc:	80 68       	ori	r24, 0x80	; 128
    4ebe:	80 83       	st	Z, r24
    4ec0:	08 95       	ret

Disassembly of section .text.ADCStartConversion:

00004858 <ADCStartConversion>:
}

void ADCStartConversion(void)
{
	// Don't start anything if we're not idle
	if (EADCSTATE_IDLE != sg_eState)
    4858:	80 91 64 09 	lds	r24, 0x0964	; 0x800964 <sg_eState>
    485c:	81 30       	cpi	r24, 0x01	; 1
    485e:	81 f4       	brne	.+32     	; 0x4880 <ADCStartConversion+0x28>
	{
		return;
	}
	
	// Set back to the first channel
	sg_eCurrentType = EADCTYPE_FIRST;
    4860:	10 92 4f 09 	sts	0x094F, r1	; 0x80094f <sg_eCurrentType>
	
	// Set the MUX
	ADMUX = (ADMUX & MUX_MASK) | (sg_sMuxSelectList[sg_eCurrentType].u8MuxSelect) | MUX_AREF;
    4864:	ec e7       	ldi	r30, 0x7C	; 124
    4866:	f0 e0       	ldi	r31, 0x00	; 0
    4868:	80 81       	ld	r24, Z
    486a:	80 7e       	andi	r24, 0xE0	; 224
    486c:	89 6c       	ori	r24, 0xC9	; 201
    486e:	80 83       	st	Z, r24
		
	sg_eState = EADCSTATE_READING;
    4870:	82 e0       	ldi	r24, 0x02	; 2
    4872:	80 93 64 09 	sts	0x0964, r24	; 0x800964 <sg_eState>
	
	// Start a single conversion  - *dp run one at a time for now instead of continuous
	ADCSRA |= (1 << ADSC) | (1 << ADIE) | (1 << ADEN);  // turn power on if it isn't
    4876:	ea e7       	ldi	r30, 0x7A	; 122
    4878:	f0 e0       	ldi	r31, 0x00	; 0
    487a:	80 81       	ld	r24, Z
    487c:	88 6c       	ori	r24, 0xC8	; 200
    487e:	80 83       	st	Z, r24
    4880:	08 95       	ret

Disassembly of section .text.ADCInit:

00002312 <ADCInit>:

	// Disable the conversion complete interrupt
	ADCSRA &= (uint8_t)~(1 << ADIE);

	// Clear any pending interrupt	
	ADCSRA |= (1 << ADIF);
    2312:	cf 93       	push	r28
    2314:	82 e0       	ldi	r24, 0x02	; 2
    2316:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f007a>
    231a:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
    231e:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7f0094>
    2322:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7f0095>
    2326:	10 92 96 00 	sts	0x0096, r1	; 0x800096 <__TEXT_REGION_LENGTH__+0x7f0096>
    232a:	10 92 97 00 	sts	0x0097, r1	; 0x800097 <__TEXT_REGION_LENGTH__+0x7f0097>
    232e:	80 ea       	ldi	r24, 0xA0	; 160
    2330:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f007b>
    2334:	c0 e0       	ldi	r28, 0x00	; 0
    2336:	83 c0       	rjmp	.+262    	; 0x243e <ADCInit+0x12c>
    2338:	2c 2f       	mov	r18, r28
    233a:	30 e0       	ldi	r19, 0x00	; 0
    233c:	c9 01       	movw	r24, r18
    233e:	88 0f       	add	r24, r24
    2340:	99 1f       	adc	r25, r25
    2342:	82 0f       	add	r24, r18
    2344:	93 1f       	adc	r25, r19
    2346:	01 96       	adiw	r24, 0x01	; 1
    2348:	09 2e       	mov	r0, r25
    234a:	00 0c       	add	r0, r0
    234c:	aa 0b       	sbc	r26, r26
    234e:	86 5e       	subi	r24, 0xE6	; 230
    2350:	9c 4f       	sbci	r25, 0xFC	; 252
    2352:	af 4f       	sbci	r26, 0xFF	; 255
    2354:	fc 01       	movw	r30, r24
    2356:	84 91       	lpm	r24, Z
    2358:	a7 fd       	sbrc	r26, 7
    235a:	80 81       	ld	r24, Z
    235c:	81 30       	cpi	r24, 0x01	; 1
    235e:	41 f0       	breq	.+16     	; 0x2370 <ADCInit+0x5e>
    2360:	08 f4       	brcc	.+2      	; 0x2364 <ADCInit+0x52>
    2362:	6c c0       	rjmp	.+216    	; 0x243c <ADCInit+0x12a>
    2364:	82 30       	cpi	r24, 0x02	; 2
    2366:	21 f1       	breq	.+72     	; 0x23b0 <ADCInit+0x9e>
    2368:	83 30       	cpi	r24, 0x03	; 3
    236a:	09 f4       	brne	.+2      	; 0x236e <ADCInit+0x5c>
    236c:	41 c0       	rjmp	.+130    	; 0x23f0 <ADCInit+0xde>
    236e:	5f c0       	rjmp	.+190    	; 0x242e <ADCInit+0x11c>
    2370:	54 b1       	in	r21, 0x04	; 4
    2372:	c9 01       	movw	r24, r18
    2374:	88 0f       	add	r24, r24
    2376:	99 1f       	adc	r25, r25
    2378:	28 0f       	add	r18, r24
    237a:	39 1f       	adc	r19, r25
    237c:	2e 5f       	subi	r18, 0xFE	; 254
    237e:	3f 4f       	sbci	r19, 0xFF	; 255
    2380:	03 2e       	mov	r0, r19
    2382:	00 0c       	add	r0, r0
    2384:	44 0b       	sbc	r20, r20
    2386:	26 5e       	subi	r18, 0xE6	; 230
    2388:	3c 4f       	sbci	r19, 0xFC	; 252
    238a:	4f 4f       	sbci	r20, 0xFF	; 255
    238c:	f9 01       	movw	r30, r18
    238e:	24 91       	lpm	r18, Z
    2390:	47 fd       	sbrc	r20, 7
    2392:	20 81       	ld	r18, Z
    2394:	81 e0       	ldi	r24, 0x01	; 1
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	02 c0       	rjmp	.+4      	; 0x239e <ADCInit+0x8c>
    239a:	88 0f       	add	r24, r24
    239c:	99 1f       	adc	r25, r25
    239e:	2a 95       	dec	r18
    23a0:	e2 f7       	brpl	.-8      	; 0x239a <ADCInit+0x88>
    23a2:	80 95       	com	r24
    23a4:	58 23       	and	r21, r24
    23a6:	54 b9       	out	0x04, r21	; 4
    23a8:	95 b1       	in	r25, 0x05	; 5
    23aa:	89 23       	and	r24, r25
    23ac:	85 b9       	out	0x05, r24	; 5
    23ae:	46 c0       	rjmp	.+140    	; 0x243c <ADCInit+0x12a>
    23b0:	57 b1       	in	r21, 0x07	; 7
    23b2:	c9 01       	movw	r24, r18
    23b4:	88 0f       	add	r24, r24
    23b6:	99 1f       	adc	r25, r25
    23b8:	28 0f       	add	r18, r24
    23ba:	39 1f       	adc	r19, r25
    23bc:	2e 5f       	subi	r18, 0xFE	; 254
    23be:	3f 4f       	sbci	r19, 0xFF	; 255
    23c0:	03 2e       	mov	r0, r19
    23c2:	00 0c       	add	r0, r0
    23c4:	44 0b       	sbc	r20, r20
    23c6:	26 5e       	subi	r18, 0xE6	; 230
    23c8:	3c 4f       	sbci	r19, 0xFC	; 252
    23ca:	4f 4f       	sbci	r20, 0xFF	; 255
    23cc:	f9 01       	movw	r30, r18
    23ce:	24 91       	lpm	r18, Z
    23d0:	47 fd       	sbrc	r20, 7
    23d2:	20 81       	ld	r18, Z
    23d4:	81 e0       	ldi	r24, 0x01	; 1
    23d6:	90 e0       	ldi	r25, 0x00	; 0
    23d8:	02 c0       	rjmp	.+4      	; 0x23de <ADCInit+0xcc>
    23da:	88 0f       	add	r24, r24
    23dc:	99 1f       	adc	r25, r25
    23de:	2a 95       	dec	r18
    23e0:	e2 f7       	brpl	.-8      	; 0x23da <ADCInit+0xc8>
    23e2:	80 95       	com	r24
    23e4:	58 23       	and	r21, r24
    23e6:	57 b9       	out	0x07, r21	; 7
    23e8:	98 b1       	in	r25, 0x08	; 8
    23ea:	89 23       	and	r24, r25
    23ec:	88 b9       	out	0x08, r24	; 8
    23ee:	26 c0       	rjmp	.+76     	; 0x243c <ADCInit+0x12a>
    23f0:	4a b1       	in	r20, 0x0a	; 10
    23f2:	c9 01       	movw	r24, r18
    23f4:	88 0f       	add	r24, r24
    23f6:	99 1f       	adc	r25, r25
    23f8:	82 0f       	add	r24, r18
    23fa:	93 1f       	adc	r25, r19
    23fc:	02 96       	adiw	r24, 0x02	; 2
    23fe:	09 2e       	mov	r0, r25
    2400:	00 0c       	add	r0, r0
    2402:	aa 0b       	sbc	r26, r26
    2404:	86 5e       	subi	r24, 0xE6	; 230
    2406:	9c 4f       	sbci	r25, 0xFC	; 252
    2408:	af 4f       	sbci	r26, 0xFF	; 255
    240a:	fc 01       	movw	r30, r24
    240c:	24 91       	lpm	r18, Z
    240e:	a7 fd       	sbrc	r26, 7
    2410:	20 81       	ld	r18, Z
    2412:	81 e0       	ldi	r24, 0x01	; 1
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	02 c0       	rjmp	.+4      	; 0x241c <ADCInit+0x10a>
    2418:	88 0f       	add	r24, r24
    241a:	99 1f       	adc	r25, r25
    241c:	2a 95       	dec	r18
    241e:	e2 f7       	brpl	.-8      	; 0x2418 <ADCInit+0x106>
    2420:	80 95       	com	r24
    2422:	48 23       	and	r20, r24
    2424:	4a b9       	out	0x0a, r20	; 10
    2426:	9b b1       	in	r25, 0x0b	; 11
    2428:	89 23       	and	r24, r25
    242a:	8b b9       	out	0x0b, r24	; 11
    242c:	07 c0       	rjmp	.+14     	; 0x243c <ADCInit+0x12a>
    242e:	45 eb       	ldi	r20, 0xB5	; 181
    2430:	50 e0       	ldi	r21, 0x00	; 0
    2432:	61 e4       	ldi	r22, 0x41	; 65
    2434:	73 e0       	ldi	r23, 0x03	; 3
    2436:	80 e0       	ldi	r24, 0x00	; 0
    2438:	0e 94 00 24 	call	0x4800	; 0x4800 <PlatformAssert>
    243c:	cf 5f       	subi	r28, 0xFF	; 255
    243e:	c5 30       	cpi	r28, 0x05	; 5
    2440:	08 f4       	brcc	.+2      	; 0x2444 <ADCInit+0x132>
    2442:	7a cf       	rjmp	.-268    	; 0x2338 <ADCInit+0x26>
    2444:	81 e0       	ldi	r24, 0x01	; 1
    2446:	80 93 64 09 	sts	0x0964, r24	; 0x800964 <sg_eState>
    244a:	cf 91       	pop	r28
    244c:	08 95       	ret

Disassembly of section .text.CANLookupCommand:

00003ec6 <CANLookupCommand>:
	{PKT_MODULE_SET_TIME,		ECANMessageType_SetTime},
	{PKT_MODULE_MAX_STATE,		ECANMessageType_MaxState}
};

static ECANMessageType CANLookupCommand( uint16_t u16ID )
{
    3ec6:	cf 93       	push	r28
    3ec8:	df 93       	push	r29
    3eca:	ec 01       	movw	r28, r24
	uint8_t u8Index = 0;
    3ecc:	90 e0       	ldi	r25, 0x00	; 0
	
	while( u8Index < (sizeof(sg_sRXCommandList)/sizeof(sg_sRXCommandList[0])) )
    3ece:	26 c0       	rjmp	.+76     	; 0x3f1c <CANLookupCommand+0x56>
	{
		if( sg_sRXCommandList[u8Index].u16ID == u16ID )
    3ed0:	a9 2f       	mov	r26, r25
    3ed2:	b0 e0       	ldi	r27, 0x00	; 0
    3ed4:	9d 01       	movw	r18, r26
    3ed6:	22 0f       	add	r18, r18
    3ed8:	33 1f       	adc	r19, r19
    3eda:	2a 0f       	add	r18, r26
    3edc:	3b 1f       	adc	r19, r27
    3ede:	03 2e       	mov	r0, r19
    3ee0:	00 0c       	add	r0, r0
    3ee2:	44 0b       	sbc	r20, r20
    3ee4:	2b 52       	subi	r18, 0x2B	; 43
    3ee6:	3d 4f       	sbci	r19, 0xFD	; 253
    3ee8:	4f 4f       	sbci	r20, 0xFF	; 255
    3eea:	f9 01       	movw	r30, r18
    3eec:	54 2f       	mov	r21, r20
    3eee:	0e 94 37 27 	call	0x4e6e	; 0x4e6e <__xload_2>
    3ef2:	6c 17       	cp	r22, r28
    3ef4:	7d 07       	cpc	r23, r29
    3ef6:	89 f4       	brne	.+34     	; 0x3f1a <CANLookupCommand+0x54>
		{
			return( sg_sRXCommandList[u8Index].eType );
    3ef8:	cd 01       	movw	r24, r26
    3efa:	88 0f       	add	r24, r24
    3efc:	99 1f       	adc	r25, r25
    3efe:	8a 0f       	add	r24, r26
    3f00:	9b 1f       	adc	r25, r27
    3f02:	02 96       	adiw	r24, 0x02	; 2
    3f04:	09 2e       	mov	r0, r25
    3f06:	00 0c       	add	r0, r0
    3f08:	aa 0b       	sbc	r26, r26
    3f0a:	8b 52       	subi	r24, 0x2B	; 43
    3f0c:	9d 4f       	sbci	r25, 0xFD	; 253
    3f0e:	af 4f       	sbci	r26, 0xFF	; 255
    3f10:	fc 01       	movw	r30, r24
    3f12:	84 91       	lpm	r24, Z
    3f14:	a7 fd       	sbrc	r26, 7
    3f16:	80 81       	ld	r24, Z
    3f18:	04 c0       	rjmp	.+8      	; 0x3f22 <CANLookupCommand+0x5c>
		}
		
		u8Index++;
    3f1a:	9f 5f       	subi	r25, 0xFF	; 255

static ECANMessageType CANLookupCommand( uint16_t u16ID )
{
	uint8_t u8Index = 0;
	
	while( u8Index < (sizeof(sg_sRXCommandList)/sizeof(sg_sRXCommandList[0])) )
    3f1c:	9b 30       	cpi	r25, 0x0B	; 11
    3f1e:	c0 f2       	brcs	.-80     	; 0x3ed0 <CANLookupCommand+0xa>
		}
		
		u8Index++;
	}
	
	return( ECANMessageType_MAX );
    3f20:	83 e1       	ldi	r24, 0x13	; 19
}
    3f22:	df 91       	pop	r29
    3f24:	cf 91       	pop	r28
    3f26:	08 95       	ret

Disassembly of section .text.CANMOBSet:

00001afe <CANMOBSet>:

static void CANMOBSet( uint8_t u8MOBIndex,
					   const SMOBDef* psDef,
					   uint8_t* pu8Data,
					   uint8_t u8DataLen )
{
    1afe:	6f 92       	push	r6
    1b00:	7f 92       	push	r7
    1b02:	8f 92       	push	r8
    1b04:	9f 92       	push	r9
    1b06:	bf 92       	push	r11
    1b08:	cf 92       	push	r12
    1b0a:	df 92       	push	r13
    1b0c:	ef 92       	push	r14
    1b0e:	ff 92       	push	r15
    1b10:	0f 93       	push	r16
    1b12:	1f 93       	push	r17
    1b14:	cf 93       	push	r28
    1b16:	df 93       	push	r29
    1b18:	f8 2e       	mov	r15, r24
    1b1a:	6a 01       	movw	r12, r20
    1b1c:	e6 2e       	mov	r14, r22
    1b1e:	e9 01       	movw	r28, r18
	uint8_t u8CANCDMOBValue;
	uint32_t u32MessageID;
	uint8_t savedCANGIE;
	
	MBASSERT( u8MOBIndex <= 5 );
    1b20:	0f 2e       	mov	r0, r31
    1b22:	f5 e0       	ldi	r31, 0x05	; 5
    1b24:	6f 2e       	mov	r6, r31
    1b26:	f0 2d       	mov	r31, r0
    1b28:	68 16       	cp	r6, r24
    1b2a:	38 f4       	brcc	.+14     	; 0x1b3a <CANMOBSet+0x3c>
    1b2c:	43 ed       	ldi	r20, 0xD3	; 211
    1b2e:	50 e0       	ldi	r21, 0x00	; 0
    1b30:	6c e4       	ldi	r22, 0x4C	; 76
    1b32:	73 e0       	ldi	r23, 0x03	; 3
    1b34:	80 e0       	ldi	r24, 0x00	; 0
    1b36:	0e 94 00 24 	call	0x4800	; 0x4800 <PlatformAssert>
	MBASSERT( u8DataLen <= 8 );
    1b3a:	09 30       	cpi	r16, 0x09	; 9
    1b3c:	38 f0       	brcs	.+14     	; 0x1b4c <CANMOBSet+0x4e>
    1b3e:	44 ed       	ldi	r20, 0xD4	; 212
    1b40:	50 e0       	ldi	r21, 0x00	; 0
    1b42:	6c e4       	ldi	r22, 0x4C	; 76
    1b44:	73 e0       	ldi	r23, 0x03	; 3
    1b46:	80 e0       	ldi	r24, 0x00	; 0
    1b48:	0e 94 00 24 	call	0x4800	; 0x4800 <PlatformAssert>
	
	// Disable CAN interrupts during MOB configuration to prevent corruption
	savedCANGIE = CANGIE;
    1b4c:	eb ed       	ldi	r30, 0xDB	; 219
    1b4e:	f0 e0       	ldi	r31, 0x00	; 0
    1b50:	b0 80       	ld	r11, Z
	CANGIE &= ~(1 << ENIT);
    1b52:	80 81       	ld	r24, Z
    1b54:	8f 77       	andi	r24, 0x7F	; 127
    1b56:	80 83       	st	Z, r24
	
	// Set the MOB page, auto increment, and data index 0
	CANPAGE = u8MOBIndex << 4;
    1b58:	8f 2d       	mov	r24, r15
    1b5a:	82 95       	swap	r24
    1b5c:	80 7f       	andi	r24, 0xF0	; 240
    1b5e:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f00ed>
	
	// Clear the MOB status
	CANSTMOB = 0;
    1b62:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
	
	// Set the MOB registers for this page
	u8CANCDMOBValue = u8DataLen;
	u8CANCDMOBValue |= (psDef->u8Mode << CONMOB0);
    1b66:	f6 01       	movw	r30, r12
    1b68:	84 91       	lpm	r24, Z
    1b6a:	e7 fc       	sbrc	r14, 7
    1b6c:	80 81       	ld	r24, Z
    1b6e:	20 e4       	ldi	r18, 0x40	; 64
    1b70:	82 9f       	mul	r24, r18
    1b72:	c0 01       	movw	r24, r0
    1b74:	11 24       	eor	r1, r1
    1b76:	10 2f       	mov	r17, r16
    1b78:	18 2b       	or	r17, r24
	if( psDef->bReplyValid )
    1b7a:	ae 2d       	mov	r26, r14
    1b7c:	c6 01       	movw	r24, r12
    1b7e:	01 96       	adiw	r24, 0x01	; 1
    1b80:	a1 1d       	adc	r26, r1
    1b82:	fc 01       	movw	r30, r24
    1b84:	84 91       	lpm	r24, Z
    1b86:	a7 fd       	sbrc	r26, 7
    1b88:	80 81       	ld	r24, Z
    1b8a:	81 11       	cpse	r24, r1
	{
		u8CANCDMOBValue |= (1 << RPLV);
    1b8c:	10 62       	ori	r17, 0x20	; 32
	}
	u8CANCDMOBValue |= (1 << IDE);
    1b8e:	10 61       	ori	r17, 0x10	; 16
	// Extended frame address format
	//	Bits 0-7: Pack / Module registration ID of sender (if assigned, zero otherwise)
	//	Bits 8-17: Reserved, set to zero.
	//	Bits 18-28: Static message ID (eg. 0x500)
	
	u32MessageID = (uint32_t)PlatformGetRegistrationID();
    1b90:	0e 94 7b 27 	call	0x4ef6	; 0x4ef6 <PlatformGetRegistrationID>
	u32MessageID |= (((uint32_t)psDef->u16ID) & 0x7ff) << 18;
    1b94:	4e 2d       	mov	r20, r14
    1b96:	96 01       	movw	r18, r12
    1b98:	2e 5f       	subi	r18, 0xFE	; 254
    1b9a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b9c:	4f 4f       	sbci	r20, 0xFF	; 255
    1b9e:	f9 01       	movw	r30, r18
    1ba0:	54 2f       	mov	r21, r20
    1ba2:	0e 94 37 27 	call	0x4e6e	; 0x4e6e <__xload_2>
    1ba6:	ab 01       	movw	r20, r22
    1ba8:	57 70       	andi	r21, 0x07	; 7
    1baa:	60 e0       	ldi	r22, 0x00	; 0
    1bac:	70 e0       	ldi	r23, 0x00	; 0
    1bae:	03 2e       	mov	r0, r19
    1bb0:	32 e1       	ldi	r19, 0x12	; 18
    1bb2:	44 0f       	add	r20, r20
    1bb4:	55 1f       	adc	r21, r21
    1bb6:	66 1f       	adc	r22, r22
    1bb8:	77 1f       	adc	r23, r23
    1bba:	3a 95       	dec	r19
    1bbc:	d1 f7       	brne	.-12     	; 0x1bb2 <CANMOBSet+0xb4>
    1bbe:	30 2d       	mov	r19, r0
    1bc0:	3a 01       	movw	r6, r20
    1bc2:	4b 01       	movw	r8, r22
    1bc4:	68 2a       	or	r6, r24
    1bc6:	d4 01       	movw	r26, r8
    1bc8:	c3 01       	movw	r24, r6
	
	CANIDT4 = psDef->bRTRTag?(1 << RTRTAG):0;
    1bca:	4e 2d       	mov	r20, r14
    1bcc:	96 01       	movw	r18, r12
    1bce:	2a 5f       	subi	r18, 0xFA	; 250
    1bd0:	3f 4f       	sbci	r19, 0xFF	; 255
    1bd2:	4f 4f       	sbci	r20, 0xFF	; 255
    1bd4:	f9 01       	movw	r30, r18
    1bd6:	24 91       	lpm	r18, Z
    1bd8:	47 fd       	sbrc	r20, 7
    1bda:	20 81       	ld	r18, Z
    1bdc:	22 23       	and	r18, r18
    1bde:	11 f0       	breq	.+4      	; 0x1be4 <CANMOBSet+0xe6>
    1be0:	24 e0       	ldi	r18, 0x04	; 4
    1be2:	01 c0       	rjmp	.+2      	; 0x1be6 <CANMOBSet+0xe8>
    1be4:	20 e0       	ldi	r18, 0x00	; 0
    1be6:	e0 ef       	ldi	r30, 0xF0	; 240
    1be8:	f0 e0       	ldi	r31, 0x00	; 0
    1bea:	20 83       	st	Z, r18
	CANIDT4 |= u32MessageID << 3;
    1bec:	20 81       	ld	r18, Z
    1bee:	38 2f       	mov	r19, r24
    1bf0:	33 0f       	add	r19, r19
    1bf2:	33 0f       	add	r19, r19
    1bf4:	33 0f       	add	r19, r19
    1bf6:	23 2b       	or	r18, r19
    1bf8:	20 83       	st	Z, r18
	CANIDT3 = u32MessageID >> 5;
    1bfa:	ac 01       	movw	r20, r24
    1bfc:	bd 01       	movw	r22, r26
    1bfe:	68 94       	set
    1c00:	14 f8       	bld	r1, 4
    1c02:	76 95       	lsr	r23
    1c04:	67 95       	ror	r22
    1c06:	57 95       	ror	r21
    1c08:	47 95       	ror	r20
    1c0a:	16 94       	lsr	r1
    1c0c:	d1 f7       	brne	.-12     	; 0x1c02 <CANMOBSet+0x104>
    1c0e:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f00f1>
	CANIDT2 = u32MessageID >> 13;
    1c12:	ac 01       	movw	r20, r24
    1c14:	bd 01       	movw	r22, r26
    1c16:	03 2e       	mov	r0, r19
    1c18:	3d e0       	ldi	r19, 0x0D	; 13
    1c1a:	76 95       	lsr	r23
    1c1c:	67 95       	ror	r22
    1c1e:	57 95       	ror	r21
    1c20:	47 95       	ror	r20
    1c22:	3a 95       	dec	r19
    1c24:	d1 f7       	brne	.-12     	; 0x1c1a <CANMOBSet+0x11c>
    1c26:	30 2d       	mov	r19, r0
    1c28:	40 93 f2 00 	sts	0x00F2, r20	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f00f2>
	CANIDT1 = u32MessageID >> 21;
    1c2c:	07 2e       	mov	r0, r23
    1c2e:	75 e1       	ldi	r23, 0x15	; 21
    1c30:	b6 95       	lsr	r27
    1c32:	a7 95       	ror	r26
    1c34:	97 95       	ror	r25
    1c36:	87 95       	ror	r24
    1c38:	7a 95       	dec	r23
    1c3a:	d1 f7       	brne	.-12     	; 0x1c30 <CANMOBSet+0x132>
    1c3c:	70 2d       	mov	r23, r0
    1c3e:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f00f3>
	
	// Setup mask for the cmd (require matching ID extention bit)
	CANIDM4 = psDef->bRTRMask?(1 << RTRTAG):0;
    1c42:	ae 2d       	mov	r26, r14
    1c44:	c6 01       	movw	r24, r12
    1c46:	07 96       	adiw	r24, 0x07	; 7
    1c48:	a1 1d       	adc	r26, r1
    1c4a:	fc 01       	movw	r30, r24
    1c4c:	84 91       	lpm	r24, Z
    1c4e:	a7 fd       	sbrc	r26, 7
    1c50:	80 81       	ld	r24, Z
    1c52:	88 23       	and	r24, r24
    1c54:	11 f0       	breq	.+4      	; 0x1c5a <CANMOBSet+0x15c>
    1c56:	84 e0       	ldi	r24, 0x04	; 4
    1c58:	01 c0       	rjmp	.+2      	; 0x1c5c <CANMOBSet+0x15e>
    1c5a:	80 e0       	ldi	r24, 0x00	; 0
    1c5c:	e4 ef       	ldi	r30, 0xF4	; 244
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	80 83       	st	Z, r24
	CANIDM4 |= (1 << IDEMSK);
    1c62:	80 81       	ld	r24, Z
    1c64:	81 60       	ori	r24, 0x01	; 1
    1c66:	80 83       	st	Z, r24
	CANIDM3 = 0;
    1c68:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7f00f5>
	CANIDM2 = psDef->u16IDMask << 5;
    1c6c:	ae 2d       	mov	r26, r14
    1c6e:	c6 01       	movw	r24, r12
    1c70:	04 96       	adiw	r24, 0x04	; 4
    1c72:	a1 1d       	adc	r26, r1
    1c74:	fc 01       	movw	r30, r24
    1c76:	5a 2f       	mov	r21, r26
    1c78:	0e 94 37 27 	call	0x4e6e	; 0x4e6e <__xload_2>
    1c7c:	62 95       	swap	r22
    1c7e:	66 0f       	add	r22, r22
    1c80:	60 7e       	andi	r22, 0xE0	; 224
    1c82:	60 93 f6 00 	sts	0x00F6, r22	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7f00f6>
	CANIDM1 = psDef->u16IDMask >> 3;
    1c86:	fc 01       	movw	r30, r24
    1c88:	5a 2f       	mov	r21, r26
    1c8a:	0e 94 37 27 	call	0x4e6e	; 0x4e6e <__xload_2>
    1c8e:	76 95       	lsr	r23
    1c90:	67 95       	ror	r22
    1c92:	76 95       	lsr	r23
    1c94:	67 95       	ror	r22
    1c96:	76 95       	lsr	r23
    1c98:	67 95       	ror	r22
    1c9a:	60 93 f7 00 	sts	0x00F7, r22	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7f00f7>
	
	// Set the data into the FIFO
	while( u8DataLen )
    1c9e:	04 c0       	rjmp	.+8      	; 0x1ca8 <CANMOBSet+0x1aa>
	{
		CANMSG = *pu8Data;
    1ca0:	89 91       	ld	r24, Y+
    1ca2:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
		
		pu8Data++;
		u8DataLen--;
    1ca6:	01 50       	subi	r16, 0x01	; 1
	CANIDM3 = 0;
	CANIDM2 = psDef->u16IDMask << 5;
	CANIDM1 = psDef->u16IDMask >> 3;
	
	// Set the data into the FIFO
	while( u8DataLen )
    1ca8:	01 11       	cpse	r16, r1
    1caa:	fa cf       	rjmp	.-12     	; 0x1ca0 <CANMOBSet+0x1a2>
		pu8Data++;
		u8DataLen--;
	}
	
	// Send it now
	CANCDMOB = u8CANCDMOBValue;
    1cac:	10 93 ef 00 	sts	0x00EF, r17	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
	
	// Enable (activates the MOB) or disable the MOB interrupt
	if( psDef->u8Mode != CAN_DISABLED )
    1cb0:	f6 01       	movw	r30, r12
    1cb2:	84 91       	lpm	r24, Z
    1cb4:	e7 fc       	sbrc	r14, 7
    1cb6:	80 81       	ld	r24, Z
    1cb8:	88 23       	and	r24, r24
    1cba:	69 f0       	breq	.+26     	; 0x1cd6 <CANMOBSet+0x1d8>
	{
		CANIE2 |= (1 << u8MOBIndex);
    1cbc:	ee ed       	ldi	r30, 0xDE	; 222
    1cbe:	f0 e0       	ldi	r31, 0x00	; 0
    1cc0:	20 81       	ld	r18, Z
    1cc2:	81 e0       	ldi	r24, 0x01	; 1
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	02 c0       	rjmp	.+4      	; 0x1ccc <CANMOBSet+0x1ce>
    1cc8:	88 0f       	add	r24, r24
    1cca:	99 1f       	adc	r25, r25
    1ccc:	fa 94       	dec	r15
    1cce:	e2 f7       	brpl	.-8      	; 0x1cc8 <CANMOBSet+0x1ca>
    1cd0:	82 2b       	or	r24, r18
    1cd2:	80 83       	st	Z, r24
    1cd4:	0d c0       	rjmp	.+26     	; 0x1cf0 <CANMOBSet+0x1f2>
	}
	else
	{
		CANIE2 &= (uint8_t)~(1 << u8MOBIndex);
    1cd6:	ee ed       	ldi	r30, 0xDE	; 222
    1cd8:	f0 e0       	ldi	r31, 0x00	; 0
    1cda:	20 81       	ld	r18, Z
    1cdc:	81 e0       	ldi	r24, 0x01	; 1
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	02 c0       	rjmp	.+4      	; 0x1ce6 <CANMOBSet+0x1e8>
    1ce2:	88 0f       	add	r24, r24
    1ce4:	99 1f       	adc	r25, r25
    1ce6:	fa 94       	dec	r15
    1ce8:	e2 f7       	brpl	.-8      	; 0x1ce2 <CANMOBSet+0x1e4>
    1cea:	80 95       	com	r24
    1cec:	82 23       	and	r24, r18
    1cee:	80 83       	st	Z, r24
	}
	
	// Restore CAN interrupts
	CANGIE = savedCANGIE;
    1cf0:	b0 92 db 00 	sts	0x00DB, r11	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f00db>
}
    1cf4:	df 91       	pop	r29
    1cf6:	cf 91       	pop	r28
    1cf8:	1f 91       	pop	r17
    1cfa:	0f 91       	pop	r16
    1cfc:	ff 90       	pop	r15
    1cfe:	ef 90       	pop	r14
    1d00:	df 90       	pop	r13
    1d02:	cf 90       	pop	r12
    1d04:	bf 90       	pop	r11
    1d06:	9f 90       	pop	r9
    1d08:	8f 90       	pop	r8
    1d0a:	7f 90       	pop	r7
    1d0c:	6f 90       	pop	r6
    1d0e:	08 95       	ret

Disassembly of section .text.CANSendMessageInternal:

00001ece <CANSendMessageInternal>:

static void CANSendMessageInternal( ECANMessageType eType,
									uint8_t* pu8Data,
									uint8_t u8DataLen,	
									bool bRetransmit )
{
    1ece:	6f 92       	push	r6
    1ed0:	7f 92       	push	r7
    1ed2:	8f 92       	push	r8
    1ed4:	ef 92       	push	r14
    1ed6:	ff 92       	push	r15
    1ed8:	0f 93       	push	r16
    1eda:	cf 93       	push	r28
    1edc:	df 93       	push	r29
    1ede:	c8 2f       	mov	r28, r24
    1ee0:	7b 01       	movw	r14, r22
    1ee2:	04 2f       	mov	r16, r20
    1ee4:	d2 2f       	mov	r29, r18
	const SMOBDef* psDef = NULL;
	
	if( ECANMessageType_ModuleAnnouncement == eType )
    1ee6:	88 23       	and	r24, r24
    1ee8:	f9 f0       	breq	.+62     	; 0x1f28 <CANSendMessageInternal+0x5a>
	{
		psDef = &sg_sMOBModuleAnnouncement;
	}
	else if( ECANMessageType_ModuleStatus1 == eType )
    1eea:	81 30       	cpi	r24, 0x01	; 1
    1eec:	31 f1       	breq	.+76     	; 0x1f3a <CANSendMessageInternal+0x6c>
	{
		psDef = &sg_sMOBModuleStatus1;
	}
	else if( ECANMessageType_ModuleStatus2 == eType )
    1eee:	82 30       	cpi	r24, 0x02	; 2
    1ef0:	69 f1       	breq	.+90     	; 0x1f4c <CANSendMessageInternal+0x7e>
	{
		psDef = &sg_sMOBModuleStatus2;
	}
	else if( ECANMessageType_ModuleStatus3 == eType )
    1ef2:	83 30       	cpi	r24, 0x03	; 3
    1ef4:	a1 f1       	breq	.+104    	; 0x1f5e <CANSendMessageInternal+0x90>
	{
		psDef = &sg_sMOBModuleStatus3;
	}
	else if( ECANMessageType_ModuleCellCommStat1 == eType )
    1ef6:	86 30       	cpi	r24, 0x06	; 6
    1ef8:	d9 f1       	breq	.+118    	; 0x1f70 <CANSendMessageInternal+0xa2>
	{
		psDef = &sg_sMOBModuleCellCommStat1;
	}
	else if( ECANMessageType_ModuleCellCommStat2 == eType )
    1efa:	87 30       	cpi	r24, 0x07	; 7
    1efc:	09 f4       	brne	.+2      	; 0x1f00 <CANSendMessageInternal+0x32>
    1efe:	41 c0       	rjmp	.+130    	; 0x1f82 <CANSendMessageInternal+0xb4>
	{
		psDef = &sg_sMOBModuleCellCommStat2;
	}
	else if( ECANMessageType_ModuleHardwareDetail == eType )
    1f00:	85 30       	cpi	r24, 0x05	; 5
    1f02:	09 f4       	brne	.+2      	; 0x1f06 <CANSendMessageInternal+0x38>
    1f04:	47 c0       	rjmp	.+142    	; 0x1f94 <CANSendMessageInternal+0xc6>
	{
		psDef = &sg_sMOBModuleHardwareDetail;
	}
	else if( ECANMessageType_ModuleCellDetail == eType )
    1f06:	84 30       	cpi	r24, 0x04	; 4
    1f08:	09 f4       	brne	.+2      	; 0x1f0c <CANSendMessageInternal+0x3e>
    1f0a:	4d c0       	rjmp	.+154    	; 0x1fa6 <CANSendMessageInternal+0xd8>
	{
		psDef = &sg_sMOBModuleCellDetail;
	}
	else if( ECANMessageType_ModuleRequestTime == eType )
    1f0c:	88 30       	cpi	r24, 0x08	; 8
    1f0e:	09 f4       	brne	.+2      	; 0x1f12 <CANSendMessageInternal+0x44>
    1f10:	53 c0       	rjmp	.+166    	; 0x1fb8 <CANSendMessageInternal+0xea>
		psDef = &sg_sMOBModuleRequestTime;
	}
	else
	{
		// Invalid message type
		MBASSERT(0);
    1f12:	46 e4       	ldi	r20, 0x46	; 70
    1f14:	51 e0       	ldi	r21, 0x01	; 1
    1f16:	6c e4       	ldi	r22, 0x4C	; 76
    1f18:	73 e0       	ldi	r23, 0x03	; 3
    1f1a:	80 e0       	ldi	r24, 0x00	; 0
    1f1c:	0e 94 00 24 	call	0x4800	; 0x4800 <PlatformAssert>
static void CANSendMessageInternal( ECANMessageType eType,
									uint8_t* pu8Data,
									uint8_t u8DataLen,	
									bool bRetransmit )
{
	const SMOBDef* psDef = NULL;
    1f20:	61 2c       	mov	r6, r1
    1f22:	71 2c       	mov	r7, r1
    1f24:	81 2c       	mov	r8, r1
    1f26:	50 c0       	rjmp	.+160    	; 0x1fc8 <CANSendMessageInternal+0xfa>
	
	if( ECANMessageType_ModuleAnnouncement == eType )
	{
		psDef = &sg_sMOBModuleAnnouncement;
    1f28:	0f 2e       	mov	r0, r31
    1f2a:	f7 e9       	ldi	r31, 0x97	; 151
    1f2c:	6f 2e       	mov	r6, r31
    1f2e:	f3 e0       	ldi	r31, 0x03	; 3
    1f30:	7f 2e       	mov	r7, r31
    1f32:	f0 e0       	ldi	r31, 0x00	; 0
    1f34:	8f 2e       	mov	r8, r31
    1f36:	f0 2d       	mov	r31, r0
    1f38:	47 c0       	rjmp	.+142    	; 0x1fc8 <CANSendMessageInternal+0xfa>
	}
	else if( ECANMessageType_ModuleStatus1 == eType )
	{
		psDef = &sg_sMOBModuleStatus1;
    1f3a:	0f 2e       	mov	r0, r31
    1f3c:	ff e8       	ldi	r31, 0x8F	; 143
    1f3e:	6f 2e       	mov	r6, r31
    1f40:	f3 e0       	ldi	r31, 0x03	; 3
    1f42:	7f 2e       	mov	r7, r31
    1f44:	f0 e0       	ldi	r31, 0x00	; 0
    1f46:	8f 2e       	mov	r8, r31
    1f48:	f0 2d       	mov	r31, r0
    1f4a:	3e c0       	rjmp	.+124    	; 0x1fc8 <CANSendMessageInternal+0xfa>
	}
	else if( ECANMessageType_ModuleStatus2 == eType )
	{
		psDef = &sg_sMOBModuleStatus2;
    1f4c:	0f 2e       	mov	r0, r31
    1f4e:	f7 e8       	ldi	r31, 0x87	; 135
    1f50:	6f 2e       	mov	r6, r31
    1f52:	f3 e0       	ldi	r31, 0x03	; 3
    1f54:	7f 2e       	mov	r7, r31
    1f56:	f0 e0       	ldi	r31, 0x00	; 0
    1f58:	8f 2e       	mov	r8, r31
    1f5a:	f0 2d       	mov	r31, r0
    1f5c:	35 c0       	rjmp	.+106    	; 0x1fc8 <CANSendMessageInternal+0xfa>
	}
	else if( ECANMessageType_ModuleStatus3 == eType )
	{
		psDef = &sg_sMOBModuleStatus3;
    1f5e:	0f 2e       	mov	r0, r31
    1f60:	ff e7       	ldi	r31, 0x7F	; 127
    1f62:	6f 2e       	mov	r6, r31
    1f64:	f3 e0       	ldi	r31, 0x03	; 3
    1f66:	7f 2e       	mov	r7, r31
    1f68:	f0 e0       	ldi	r31, 0x00	; 0
    1f6a:	8f 2e       	mov	r8, r31
    1f6c:	f0 2d       	mov	r31, r0
    1f6e:	2c c0       	rjmp	.+88     	; 0x1fc8 <CANSendMessageInternal+0xfa>
	}
	else if( ECANMessageType_ModuleCellCommStat1 == eType )
	{
		psDef = &sg_sMOBModuleCellCommStat1;
    1f70:	0f 2e       	mov	r0, r31
    1f72:	f7 e7       	ldi	r31, 0x77	; 119
    1f74:	6f 2e       	mov	r6, r31
    1f76:	f3 e0       	ldi	r31, 0x03	; 3
    1f78:	7f 2e       	mov	r7, r31
    1f7a:	f0 e0       	ldi	r31, 0x00	; 0
    1f7c:	8f 2e       	mov	r8, r31
    1f7e:	f0 2d       	mov	r31, r0
    1f80:	23 c0       	rjmp	.+70     	; 0x1fc8 <CANSendMessageInternal+0xfa>
	}
	else if( ECANMessageType_ModuleCellCommStat2 == eType )
	{
		psDef = &sg_sMOBModuleCellCommStat2;
    1f82:	0f 2e       	mov	r0, r31
    1f84:	ff e6       	ldi	r31, 0x6F	; 111
    1f86:	6f 2e       	mov	r6, r31
    1f88:	f3 e0       	ldi	r31, 0x03	; 3
    1f8a:	7f 2e       	mov	r7, r31
    1f8c:	f0 e0       	ldi	r31, 0x00	; 0
    1f8e:	8f 2e       	mov	r8, r31
    1f90:	f0 2d       	mov	r31, r0
    1f92:	1a c0       	rjmp	.+52     	; 0x1fc8 <CANSendMessageInternal+0xfa>
	}
	else if( ECANMessageType_ModuleHardwareDetail == eType )
	{
		psDef = &sg_sMOBModuleHardwareDetail;
    1f94:	0f 2e       	mov	r0, r31
    1f96:	ff e5       	ldi	r31, 0x5F	; 95
    1f98:	6f 2e       	mov	r6, r31
    1f9a:	f3 e0       	ldi	r31, 0x03	; 3
    1f9c:	7f 2e       	mov	r7, r31
    1f9e:	f0 e0       	ldi	r31, 0x00	; 0
    1fa0:	8f 2e       	mov	r8, r31
    1fa2:	f0 2d       	mov	r31, r0
    1fa4:	11 c0       	rjmp	.+34     	; 0x1fc8 <CANSendMessageInternal+0xfa>
	}
	else if( ECANMessageType_ModuleCellDetail == eType )
	{
		psDef = &sg_sMOBModuleCellDetail;
    1fa6:	0f 2e       	mov	r0, r31
    1fa8:	f7 e6       	ldi	r31, 0x67	; 103
    1faa:	6f 2e       	mov	r6, r31
    1fac:	f3 e0       	ldi	r31, 0x03	; 3
    1fae:	7f 2e       	mov	r7, r31
    1fb0:	f0 e0       	ldi	r31, 0x00	; 0
    1fb2:	8f 2e       	mov	r8, r31
    1fb4:	f0 2d       	mov	r31, r0
    1fb6:	08 c0       	rjmp	.+16     	; 0x1fc8 <CANSendMessageInternal+0xfa>
	}
	else if( ECANMessageType_ModuleRequestTime == eType )
	{
		psDef = &sg_sMOBModuleRequestTime;
    1fb8:	0f 2e       	mov	r0, r31
    1fba:	f7 e5       	ldi	r31, 0x57	; 87
    1fbc:	6f 2e       	mov	r6, r31
    1fbe:	f3 e0       	ldi	r31, 0x03	; 3
    1fc0:	7f 2e       	mov	r7, r31
    1fc2:	f0 e0       	ldi	r31, 0x00	; 0
    1fc4:	8f 2e       	mov	r8, r31
    1fc6:	f0 2d       	mov	r31, r0
	{
		// Invalid message type
		MBASSERT(0);
	}
	
	if(bRetransmit && sg_bInRetransmit) {
    1fc8:	dd 23       	and	r29, r29
    1fca:	21 f0       	breq	.+8      	; 0x1fd4 <CANSendMessageInternal+0x106>
    1fcc:	80 91 65 09 	lds	r24, 0x0965	; 0x800965 <sg_bInRetransmit>
    1fd0:	81 11       	cpse	r24, r1
    1fd2:	30 c0       	rjmp	.+96     	; 0x2034 <CANSendMessageInternal+0x166>
		// Already in a retransmit, don't allow nested retries
		return;
	}
	if( bRetransmit || (0 == sg_u8Busy) )
    1fd4:	d1 11       	cpse	r29, r1
    1fd6:	04 c0       	rjmp	.+8      	; 0x1fe0 <CANSendMessageInternal+0x112>
    1fd8:	80 91 69 09 	lds	r24, 0x0969	; 0x800969 <sg_u8Busy>
    1fdc:	81 11       	cpse	r24, r1
    1fde:	2a c0       	rjmp	.+84     	; 0x2034 <CANSendMessageInternal+0x166>
	{
		sg_u8Busy = CAN_TX_TIMEOUT_TICKS;
    1fe0:	82 e0       	ldi	r24, 0x02	; 2
    1fe2:	80 93 69 09 	sts	0x0969, r24	; 0x800969 <sg_u8Busy>
		
		// Save this message info for retransmit later if needed
		if( false == bRetransmit )
    1fe6:	d1 11       	cpse	r29, r1
    1fe8:	1a c0       	rjmp	.+52     	; 0x201e <CANSendMessageInternal+0x150>
		{
			sg_u8TransmitAttempts = 0;
    1fea:	10 92 68 09 	sts	0x0968, r1	; 0x800968 <sg_u8TransmitAttempts>
			sg_eLastTXType = eType;
    1fee:	c0 93 67 09 	sts	0x0967, r28	; 0x800967 <sg_eLastTXType>
			MBASSERT(u8DataLen <= CAN_MAX_MSG_SIZE);
    1ff2:	09 30       	cpi	r16, 0x09	; 9
    1ff4:	38 f0       	brcs	.+14     	; 0x2004 <CANSendMessageInternal+0x136>
    1ff6:	46 e5       	ldi	r20, 0x56	; 86
    1ff8:	51 e0       	ldi	r21, 0x01	; 1
    1ffa:	6c e4       	ldi	r22, 0x4C	; 76
    1ffc:	73 e0       	ldi	r23, 0x03	; 3
    1ffe:	80 e0       	ldi	r24, 0x00	; 0
    2000:	0e 94 00 24 	call	0x4800	; 0x4800 <PlatformAssert>
			memcpy(sg_u8LastTXData, pu8Data, u8DataLen);
    2004:	20 2f       	mov	r18, r16
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	c7 01       	movw	r24, r14
    200a:	a0 e8       	ldi	r26, 0x80	; 128
    200c:	ac 01       	movw	r20, r24
    200e:	6a 2f       	mov	r22, r26
    2010:	8d e3       	ldi	r24, 0x3D	; 61
    2012:	99 e0       	ldi	r25, 0x09	; 9
    2014:	0e 94 a4 23 	call	0x4748	; 0x4748 <memcpy>
			sg_u8LastTXDataLen = u8DataLen;
    2018:	00 93 66 09 	sts	0x0966, r16	; 0x800966 <sg_u8LastTXDataLen>
    201c:	05 c0       	rjmp	.+10     	; 0x2028 <CANSendMessageInternal+0x15a>
		}
		else
		{
			sg_u8TransmitAttempts++;
    201e:	80 91 68 09 	lds	r24, 0x0968	; 0x800968 <sg_u8TransmitAttempts>
    2022:	8f 5f       	subi	r24, 0xFF	; 255
    2024:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <sg_u8TransmitAttempts>
		}
		
		// Send it now
		CANMOBSet( CANMOB_TX_IDX, psDef, pu8Data, u8DataLen );
    2028:	97 01       	movw	r18, r14
    202a:	68 2d       	mov	r22, r8
    202c:	a3 01       	movw	r20, r6
    202e:	81 e0       	ldi	r24, 0x01	; 1
    2030:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <CANMOBSet>
	}
}
    2034:	df 91       	pop	r29
    2036:	cf 91       	pop	r28
    2038:	0f 91       	pop	r16
    203a:	ff 90       	pop	r15
    203c:	ef 90       	pop	r14
    203e:	8f 90       	pop	r8
    2040:	7f 90       	pop	r7
    2042:	6f 90       	pop	r6
    2044:	08 95       	ret

Disassembly of section .text.CANMOBInterrupt:

00002046 <CANMOBInterrupt>:
 * - RX MOB is continuous, gets re-enabled immediately after processing
 * - System works because CANMOBSet() always re-enables on next TX
 * - Potential issue: TX MOB stays disabled after last transmission
 */
void CANMOBInterrupt( uint8_t u8MOBIndex )
{
    2046:	cf 92       	push	r12
    2048:	df 92       	push	r13
    204a:	ff 92       	push	r15
    204c:	0f 93       	push	r16
    204e:	1f 93       	push	r17
    2050:	cf 93       	push	r28
    2052:	df 93       	push	r29
    2054:	cd b7       	in	r28, 0x3d	; 61
    2056:	de b7       	in	r29, 0x3e	; 62
    2058:	28 97       	sbiw	r28, 0x08	; 8
    205a:	0f b6       	in	r0, 0x3f	; 63
    205c:	f8 94       	cli
    205e:	de bf       	out	0x3e, r29	; 62
    2060:	0f be       	out	0x3f, r0	; 63
    2062:	cd bf       	out	0x3d, r28	; 61
	// Set the MOB page first (and zero the data index)
	CANPAGE = u8MOBIndex << 4;
    2064:	98 2f       	mov	r25, r24
    2066:	92 95       	swap	r25
    2068:	90 7f       	andi	r25, 0xF0	; 240
    206a:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f00ed>
	
	// Temporarily disable the MOB to examine and modify the registers
	CANIE2 &= (uint8_t)~(1 << u8MOBIndex);
    206e:	ee ed       	ldi	r30, 0xDE	; 222
    2070:	f0 e0       	ldi	r31, 0x00	; 0
    2072:	20 81       	ld	r18, Z
    2074:	01 e0       	ldi	r16, 0x01	; 1
    2076:	10 e0       	ldi	r17, 0x00	; 0
    2078:	08 2e       	mov	r0, r24
    207a:	02 c0       	rjmp	.+4      	; 0x2080 <CANMOBInterrupt+0x3a>
    207c:	00 0f       	add	r16, r16
    207e:	11 1f       	adc	r17, r17
    2080:	0a 94       	dec	r0
    2082:	e2 f7       	brpl	.-8      	; 0x207c <CANMOBInterrupt+0x36>
    2084:	90 2f       	mov	r25, r16
    2086:	90 95       	com	r25
    2088:	92 23       	and	r25, r18
    208a:	90 83       	st	Z, r25
	CANCDMOB &= (uint8_t)~((1 << CONMOB0) | (1 << CONMOB1));
    208c:	ef ee       	ldi	r30, 0xEF	; 239
    208e:	f0 e0       	ldi	r31, 0x00	; 0
    2090:	90 81       	ld	r25, Z
    2092:	9f 73       	andi	r25, 0x3F	; 63
    2094:	90 83       	st	Z, r25
	
	if( CANMOB_RX_IDX == u8MOBIndex )
    2096:	81 11       	cpse	r24, r1
    2098:	50 c0       	rjmp	.+160    	; 0x213a <CANMOBInterrupt+0xf4>
			// sg_bBusy = false;  // WRONG - commented out to fix CAN reliability issues
			// sg_bInRetransmit = false;  // WRONG - also should not be cleared here
		}
		*/
		// RX success?
		if( CANSTMOB & (1 << RXOK) )
    209a:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    209e:	85 ff       	sbrs	r24, 5
    20a0:	38 c0       	rjmp	.+112    	; 0x2112 <CANMOBInterrupt+0xcc>
		{
			// Clear it
			CANSTMOB &= ~(1 << RXOK);
    20a2:	ee ee       	ldi	r30, 0xEE	; 238
    20a4:	f0 e0       	ldi	r31, 0x00	; 0
    20a6:	80 81       	ld	r24, Z
    20a8:	8f 7d       	andi	r24, 0xDF	; 223
    20aa:	80 83       	st	Z, r24
		
			if( sg_pfRXCallback )
    20ac:	c0 90 4d 09 	lds	r12, 0x094D	; 0x80094d <sg_pfRXCallback>
    20b0:	d0 90 4e 09 	lds	r13, 0x094E	; 0x80094e <sg_pfRXCallback+0x1>
    20b4:	c1 14       	cp	r12, r1
    20b6:	d1 04       	cpc	r13, r1
    20b8:	61 f1       	breq	.+88     	; 0x2112 <CANMOBInterrupt+0xcc>
			{
				ECANMessageType eType;
				uint16_t u16ID = 0;
				uint8_t u8Data[8];
				uint8_t u8DataLen = CANCDMOB & 0x0f;
    20ba:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    20be:	8f 70       	andi	r24, 0x0F	; 15
    20c0:	f8 2e       	mov	r15, r24
				uint8_t u8Index = 0;
			
				// Grab the messageID from the identifier registers
				// TODO: This extraction may be wrong for extended frames
				// but it worked with the real Pack Controller somehow
				u16ID = ((uint16_t)CANIDT1) << 3;
    20c2:	40 91 f3 00 	lds	r20, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f00f3>
    20c6:	50 e0       	ldi	r21, 0x00	; 0
    20c8:	44 0f       	add	r20, r20
    20ca:	55 1f       	adc	r21, r21
    20cc:	44 0f       	add	r20, r20
    20ce:	55 1f       	adc	r21, r21
    20d0:	44 0f       	add	r20, r20
    20d2:	55 1f       	adc	r21, r21
				u16ID |= CANIDT2 >> 5;
    20d4:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f00f2>
    20d8:	82 95       	swap	r24
    20da:	86 95       	lsr	r24
    20dc:	87 70       	andi	r24, 0x07	; 7
    20de:	48 2b       	or	r20, r24
			{
				ECANMessageType eType;
				uint16_t u16ID = 0;
				uint8_t u8Data[8];
				uint8_t u8DataLen = CANCDMOB & 0x0f;
				uint8_t u8Index = 0;
    20e0:	90 e0       	ldi	r25, 0x00	; 0
				// but it worked with the real Pack Controller somehow
				u16ID = ((uint16_t)CANIDT1) << 3;
				u16ID |= CANIDT2 >> 5;
			
				// Pull the data out into a temp buffer
				while( u8Index < u8DataLen )
    20e2:	0a c0       	rjmp	.+20     	; 0x20f8 <CANMOBInterrupt+0xb2>
				{
					u8Data[u8Index] = CANMSG;
    20e4:	20 91 fa 00 	lds	r18, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
    20e8:	e1 e0       	ldi	r30, 0x01	; 1
    20ea:	f0 e0       	ldi	r31, 0x00	; 0
    20ec:	ec 0f       	add	r30, r28
    20ee:	fd 1f       	adc	r31, r29
    20f0:	e9 0f       	add	r30, r25
    20f2:	f1 1d       	adc	r31, r1
    20f4:	20 83       	st	Z, r18
					u8Index++;
    20f6:	9f 5f       	subi	r25, 0xFF	; 255
				// but it worked with the real Pack Controller somehow
				u16ID = ((uint16_t)CANIDT1) << 3;
				u16ID |= CANIDT2 >> 5;
			
				// Pull the data out into a temp buffer
				while( u8Index < u8DataLen )
    20f8:	9f 15       	cp	r25, r15
    20fa:	a0 f3       	brcs	.-24     	; 0x20e4 <CANMOBInterrupt+0x9e>
					u8Data[u8Index] = CANMSG;
					u8Index++;
				}
			
				// Lookup ID to see if it matches one of ours
				eType = CANLookupCommand( u16ID );
    20fc:	ca 01       	movw	r24, r20
    20fe:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <CANLookupCommand>
			
				if( eType != ECANMessageType_MAX )
    2102:	83 31       	cpi	r24, 0x13	; 19
    2104:	31 f0       	breq	.+12     	; 0x2112 <CANMOBInterrupt+0xcc>
				{
					// Call comamnd handler
					sg_pfRXCallback( eType, u8Data, u8DataLen );
    2106:	4f 2d       	mov	r20, r15
    2108:	be 01       	movw	r22, r28
    210a:	6f 5f       	subi	r22, 0xFF	; 255
    210c:	7f 4f       	sbci	r23, 0xFF	; 255
    210e:	f6 01       	movw	r30, r12
    2110:	09 95       	icall
				}
			}
		}
	
		// If receive error, clear the bits
		if( CANSTMOB & ((1 << SERR) | (1 << CERR) | (1 << FERR)) )
    2112:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    2116:	8e 70       	andi	r24, 0x0E	; 14
    2118:	29 f0       	breq	.+10     	; 0x2124 <CANMOBInterrupt+0xde>
		{
			// Clear it.  Just ignore
			CANSTMOB &= ~((1 << SERR) | (1 << CERR) | (1 << FERR));
    211a:	ee ee       	ldi	r30, 0xEE	; 238
    211c:	f0 e0       	ldi	r31, 0x00	; 0
    211e:	80 81       	ld	r24, Z
    2120:	81 7f       	andi	r24, 0xF1	; 241
    2122:	80 83       	st	Z, r24
		}
	
		// Re-enable RX now
		CANIE2 |= (1 << u8MOBIndex);
    2124:	ee ed       	ldi	r30, 0xDE	; 222
    2126:	f0 e0       	ldi	r31, 0x00	; 0
    2128:	80 81       	ld	r24, Z
    212a:	08 2b       	or	r16, r24
    212c:	00 83       	st	Z, r16
		CANCDMOB |= (1 << CONMOB1);
    212e:	ef ee       	ldi	r30, 0xEF	; 239
    2130:	f0 e0       	ldi	r31, 0x00	; 0
    2132:	80 81       	ld	r24, Z
    2134:	80 68       	ori	r24, 0x80	; 128
    2136:	80 83       	st	Z, r24
    2138:	2b c0       	rjmp	.+86     	; 0x2190 <CANMOBInterrupt+0x14a>
	}
	else if( CANMOB_TX_IDX == u8MOBIndex )
    213a:	81 30       	cpi	r24, 0x01	; 1
    213c:	49 f5       	brne	.+82     	; 0x2190 <CANMOBInterrupt+0x14a>
	{
		if( CANSTMOB & (1 << TXOK) )
    213e:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    2142:	86 ff       	sbrs	r24, 6
    2144:	07 c0       	rjmp	.+14     	; 0x2154 <CANMOBInterrupt+0x10e>
		{
			// Clear it
			CANSTMOB &= ~(1 << TXOK);
    2146:	ee ee       	ldi	r30, 0xEE	; 238
    2148:	f0 e0       	ldi	r31, 0x00	; 0
    214a:	80 81       	ld	r24, Z
    214c:	8f 7b       	andi	r24, 0xBF	; 191
    214e:	80 83       	st	Z, r24

			sg_u8Busy = 0;
    2150:	10 92 69 09 	sts	0x0969, r1	; 0x800969 <sg_u8Busy>
//		}

		// If TX Error on transmit (collision with another device)
		// -or- ACK error (nobody listening),
		// retry send
		if( CANSTMOB & ((1 << BERR) | (1 << AERR) | (1 << SERR)) )
    2154:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    2158:	89 71       	andi	r24, 0x19	; 25
    215a:	d1 f0       	breq	.+52     	; 0x2190 <CANMOBInterrupt+0x14a>
		{
			// Clear it
			CANSTMOB &= ~((1 << BERR) | (1 << AERR) | (1 << SERR));
    215c:	ee ee       	ldi	r30, 0xEE	; 238
    215e:	f0 e0       	ldi	r31, 0x00	; 0
    2160:	80 81       	ld	r24, Z
    2162:	86 7e       	andi	r24, 0xE6	; 230
    2164:	80 83       	st	Z, r24

			if( sg_u8TransmitAttempts < 20 )
    2166:	80 91 68 09 	lds	r24, 0x0968	; 0x800968 <sg_u8TransmitAttempts>
    216a:	84 31       	cpi	r24, 0x14	; 20
    216c:	68 f4       	brcc	.+26     	; 0x2188 <CANMOBInterrupt+0x142>
			{
				// Retransmit now
               sg_bInRetransmit = true;  // Set flag before retry
    216e:	81 e0       	ldi	r24, 0x01	; 1
    2170:	80 93 65 09 	sts	0x0965, r24	; 0x800965 <sg_bInRetransmit>
               CANSendMessageInternal( sg_eLastTXType, sg_u8LastTXData, sg_u8LastTXDataLen, true );
    2174:	21 e0       	ldi	r18, 0x01	; 1
    2176:	40 91 66 09 	lds	r20, 0x0966	; 0x800966 <sg_u8LastTXDataLen>
    217a:	6d e3       	ldi	r22, 0x3D	; 61
    217c:	79 e0       	ldi	r23, 0x09	; 9
    217e:	80 91 67 09 	lds	r24, 0x0967	; 0x800967 <sg_eLastTXType>
    2182:	0e 94 67 0f 	call	0x1ece	; 0x1ece <CANSendMessageInternal>
    2186:	04 c0       	rjmp	.+8      	; 0x2190 <CANMOBInterrupt+0x14a>
			}
			else
			{
				// Retries exhausted.  Give up
				sg_u8Busy = 0;
    2188:	10 92 69 09 	sts	0x0969, r1	; 0x800969 <sg_u8Busy>
                sg_bInRetransmit = false;
    218c:	10 92 65 09 	sts	0x0965, r1	; 0x800965 <sg_bInRetransmit>
			}
		}
	}
}
    2190:	28 96       	adiw	r28, 0x08	; 8
    2192:	0f b6       	in	r0, 0x3f	; 63
    2194:	f8 94       	cli
    2196:	de bf       	out	0x3e, r29	; 62
    2198:	0f be       	out	0x3f, r0	; 63
    219a:	cd bf       	out	0x3d, r28	; 61
    219c:	df 91       	pop	r29
    219e:	cf 91       	pop	r28
    21a0:	1f 91       	pop	r17
    21a2:	0f 91       	pop	r16
    21a4:	ff 90       	pop	r15
    21a6:	df 90       	pop	r13
    21a8:	cf 90       	pop	r12
    21aa:	08 95       	ret

Disassembly of section .text.__vector_18:

00002582 <__vector_18>:

// Generic CAN interrupt handler
// Check interrrupt sources and clear them (by servicing or explicit clearing)
ISR(CAN_INT_vect, ISR_BLOCK)
{
    2582:	1f 92       	push	r1
    2584:	0f 92       	push	r0
    2586:	0f b6       	in	r0, 0x3f	; 63
    2588:	0f 92       	push	r0
    258a:	11 24       	eor	r1, r1
    258c:	0f 93       	push	r16
    258e:	1f 93       	push	r17
    2590:	2f 93       	push	r18
    2592:	3f 93       	push	r19
    2594:	4f 93       	push	r20
    2596:	5f 93       	push	r21
    2598:	6f 93       	push	r22
    259a:	7f 93       	push	r23
    259c:	8f 93       	push	r24
    259e:	9f 93       	push	r25
    25a0:	af 93       	push	r26
    25a2:	bf 93       	push	r27
    25a4:	cf 93       	push	r28
    25a6:	df 93       	push	r29
    25a8:	ef 93       	push	r30
    25aa:	ff 93       	push	r31
	// Save state we'll need to restore
	uint8_t saved_cangie = CANGIE;
    25ac:	eb ed       	ldi	r30, 0xDB	; 219
    25ae:	f0 e0       	ldi	r31, 0x00	; 0
    25b0:	d0 81       	ld	r29, Z
	uint8_t saved_canie2 = CANIE2;	// Temporarily disable CAN interrupts to prevent reentry
    25b2:	10 91 de 00 	lds	r17, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7f00de>
	CANGIE &= (uint8_t)~(1 << ENIT);
    25b6:	80 81       	ld	r24, Z
    25b8:	8f 77       	andi	r24, 0x7F	; 127
    25ba:	80 83       	st	Z, r24

	// Do NOT re-enable global interrupts - this causes race conditions!
	
	 uint8_t sit = CANSIT2;
    25bc:	c0 91 e0 00 	lds	r28, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f00e0>
	 
	 // Most common interrupts first  *claude
	 if(sit & (1 << CANMOB_RX_IDX)) {
    25c0:	c0 ff       	sbrs	r28, 0
    25c2:	0c c0       	rjmp	.+24     	; 0x25dc <__vector_18+0x5a>
		 CANMOBInterrupt(CANMOB_RX_IDX);
    25c4:	80 e0       	ldi	r24, 0x00	; 0
    25c6:	0e 94 23 10 	call	0x2046	; 0x2046 <CANMOBInterrupt>
		 CANMOBSet(CANMOB_RX_IDX, &sg_sMOBGenericReceive, NULL, 0);
    25ca:	00 e0       	ldi	r16, 0x00	; 0
    25cc:	20 e0       	ldi	r18, 0x00	; 0
    25ce:	30 e0       	ldi	r19, 0x00	; 0
    25d0:	4f e9       	ldi	r20, 0x9F	; 159
    25d2:	53 e0       	ldi	r21, 0x03	; 3
    25d4:	60 e0       	ldi	r22, 0x00	; 0
    25d6:	80 e0       	ldi	r24, 0x00	; 0
    25d8:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <CANMOBSet>
	 }
	 
	
	// Check TX MOB
	if( sit & (1 << CANMOB_TX_IDX) )
    25dc:	c1 ff       	sbrs	r28, 1
    25de:	03 c0       	rjmp	.+6      	; 0x25e6 <__vector_18+0x64>
	{
		CANMOBInterrupt( CANMOB_TX_IDX );
    25e0:	81 e0       	ldi	r24, 0x01	; 1
    25e2:	0e 94 23 10 	call	0x2046	; 0x2046 <CANMOBInterrupt>
	}
	
	// Now the generic, non-MOB interrupts (some of which may have already been handled by the MOB handler)
	
	// Bus Off interrupt
	if( CANGIT & (1 << BOFFIT) )
    25e6:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    25ea:	86 ff       	sbrs	r24, 6
    25ec:	03 c0       	rjmp	.+6      	; 0x25f4 <__vector_18+0x72>
	{
		// Just clear it for now
		CANGIT = (1 << BOFFIT);
    25ee:	80 e4       	ldi	r24, 0x40	; 64
    25f0:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
	}
	
	// Frame buffer receive (burst receive interrupt)
	// This should not be used
	if( CANGIT & (1 << BXOK) )
    25f4:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    25f8:	84 ff       	sbrs	r24, 4
    25fa:	0a c0       	rjmp	.+20     	; 0x2610 <__vector_18+0x8e>
	{
		MBASSERT(0);
    25fc:	46 e2       	ldi	r20, 0x26	; 38
    25fe:	52 e0       	ldi	r21, 0x02	; 2
    2600:	6c e4       	ldi	r22, 0x4C	; 76
    2602:	73 e0       	ldi	r23, 0x03	; 3
    2604:	80 e0       	ldi	r24, 0x00	; 0
    2606:	0e 94 00 24 	call	0x4800	; 0x4800 <PlatformAssert>
		
		// TODO: Must write the CONMOB fields of the MOB that interrupted first?
		// Just clear it for now
		CANGIT = (1 << BXOK);
    260a:	80 e1       	ldi	r24, 0x10	; 16
    260c:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
	}
	
	// Bit stuffing error on receive
	if( CANGIT & (1 << SERG) )
    2610:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    2614:	83 ff       	sbrs	r24, 3
    2616:	03 c0       	rjmp	.+6      	; 0x261e <__vector_18+0x9c>
	{
		// Just clear it for now.  Ignored.
		CANGIT = (1 << SERG);
    2618:	88 e0       	ldi	r24, 0x08	; 8
    261a:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
	}
	
	// CRC error on receive
	if( CANGIT & (1 << CERG) )
    261e:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    2622:	82 ff       	sbrs	r24, 2
    2624:	03 c0       	rjmp	.+6      	; 0x262c <__vector_18+0xaa>
	{
		// Just clear it for now.  Ignored.
		CANGIT = (1 << CERG);
    2626:	84 e0       	ldi	r24, 0x04	; 4
    2628:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
	}
	
	// Form error
	if( CANGIT & (1 << FERG) )
    262c:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    2630:	81 ff       	sbrs	r24, 1
    2632:	03 c0       	rjmp	.+6      	; 0x263a <__vector_18+0xb8>
	{
		// If detected form error on transmit, could be duplicate to MOB error interrupt (see 16.8.2 - Interrupt Behavior)
		// Ignore this one
		
		// Just clear it for now.  Ignored.
		CANGIT = (1 << FERG);
    2634:	82 e0       	ldi	r24, 0x02	; 2
    2636:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
	}
	
	// ACK missing on transmit (nobody's listening! (or failure on transmit???))
	if( CANGIT & (1 << AERG) )
    263a:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    263e:	80 ff       	sbrs	r24, 0
    2640:	13 c0       	rjmp	.+38     	; 0x2668 <__vector_18+0xe6>
	{
		// Clear the interrupt
		CANGIT = (1 << AERG);
    2642:	81 e0       	ldi	r24, 0x01	; 1
    2644:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
		
		if( sg_u8TransmitAttempts < 20 )
    2648:	80 91 68 09 	lds	r24, 0x0968	; 0x800968 <sg_u8TransmitAttempts>
    264c:	84 31       	cpi	r24, 0x14	; 20
    264e:	50 f4       	brcc	.+20     	; 0x2664 <__vector_18+0xe2>
		{
			// Retransmit now
			CANSendMessageInternal( sg_eLastTXType, sg_u8LastTXData, sg_u8LastTXDataLen, true );
    2650:	21 e0       	ldi	r18, 0x01	; 1
    2652:	40 91 66 09 	lds	r20, 0x0966	; 0x800966 <sg_u8LastTXDataLen>
    2656:	6d e3       	ldi	r22, 0x3D	; 61
    2658:	79 e0       	ldi	r23, 0x09	; 9
    265a:	80 91 67 09 	lds	r24, 0x0967	; 0x800967 <sg_eLastTXType>
    265e:	0e 94 67 0f 	call	0x1ece	; 0x1ece <CANSendMessageInternal>
    2662:	02 c0       	rjmp	.+4      	; 0x2668 <__vector_18+0xe6>
		}
		else
		{
			// Retries exhausted.  Give up
			sg_u8Busy = 0;
    2664:	10 92 69 09 	sts	0x0969, r1	; 0x800969 <sg_u8Busy>
		}
	}

	// Reenable CAN general interrupt	
//	CANGIE |= (1 << ENIT);
    CANIE2 = saved_canie2;
    2668:	10 93 de 00 	sts	0x00DE, r17	; 0x8000de <__TEXT_REGION_LENGTH__+0x7f00de>
    CANGIE = saved_cangie;
    266c:	d0 93 db 00 	sts	0x00DB, r29	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f00db>
}
    2670:	ff 91       	pop	r31
    2672:	ef 91       	pop	r30
    2674:	df 91       	pop	r29
    2676:	cf 91       	pop	r28
    2678:	bf 91       	pop	r27
    267a:	af 91       	pop	r26
    267c:	9f 91       	pop	r25
    267e:	8f 91       	pop	r24
    2680:	7f 91       	pop	r23
    2682:	6f 91       	pop	r22
    2684:	5f 91       	pop	r21
    2686:	4f 91       	pop	r20
    2688:	3f 91       	pop	r19
    268a:	2f 91       	pop	r18
    268c:	1f 91       	pop	r17
    268e:	0f 91       	pop	r16
    2690:	0f 90       	pop	r0
    2692:	0f be       	out	0x3f, r0	; 63
    2694:	0f 90       	pop	r0
    2696:	1f 90       	pop	r1
    2698:	18 95       	reti

Disassembly of section .text.CANSendMessage:

00004d62 <CANSendMessage>:
					 uint8_t* pu8Data,
					 uint8_t u8DataLen )
{
	// If we're busy, kick it back so we're cooperatively multitasking
	// rather than spin locking
	if (sg_u8Busy)
    4d62:	90 91 69 09 	lds	r25, 0x0969	; 0x800969 <sg_u8Busy>
    4d66:	91 11       	cpse	r25, r1
    4d68:	05 c0       	rjmp	.+10     	; 0x4d74 <CANSendMessage+0x12>
	{
		return(false);
	}

	CANSendMessageInternal( eType, pu8Data, u8DataLen, false );
    4d6a:	20 e0       	ldi	r18, 0x00	; 0
    4d6c:	0e 94 67 0f 	call	0x1ece	; 0x1ece <CANSendMessageInternal>
	return( true );
    4d70:	81 e0       	ldi	r24, 0x01	; 1
    4d72:	08 95       	ret
{
	// If we're busy, kick it back so we're cooperatively multitasking
	// rather than spin locking
	if (sg_u8Busy)
	{
		return(false);
    4d74:	80 e0       	ldi	r24, 0x00	; 0
	}

	CANSendMessageInternal( eType, pu8Data, u8DataLen, false );
	return( true );
}
    4d76:	08 95       	ret

Disassembly of section .text.CANSetRXCallback:

00004ece <CANSetRXCallback>:

void CANSetRXCallback( void (*pfCallback)(ECANMessageType eType, uint8_t* pu8Data, uint8_t u8DataLen) )
{
	sg_pfRXCallback = pfCallback;
    4ece:	90 93 4e 09 	sts	0x094E, r25	; 0x80094e <sg_pfRXCallback+0x1>
    4ed2:	80 93 4d 09 	sts	0x094D, r24	; 0x80094d <sg_pfRXCallback>
    4ed6:	08 95       	ret

Disassembly of section .text.CANInit:

000035e0 <CANInit>:
}

void CANInit( void )
{
    35e0:	0f 93       	push	r16
    35e2:	cf 93       	push	r28
	// Init clock
	// See datasheet table 16-2.
	// For 8Mhz, set CAN rate to 500 Kbps
	CANBT1 = 0x02;
    35e4:	c2 e0       	ldi	r28, 0x02	; 2
    35e6:	c0 93 e2 00 	sts	0x00E2, r28	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f00e2>
	CANBT2 = 0x04;
    35ea:	84 e0       	ldi	r24, 0x04	; 4
    35ec:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f00e3>
	CANBT3 = 0x12;
    35f0:	82 e1       	ldi	r24, 0x12	; 18
    35f2:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7f00e4>
	
	// Init message objects (MOBs) since there are no defaults at reset
	CANMOBSet( 0, &sg_sMOBDisabled, NULL, 0 );
    35f6:	00 e0       	ldi	r16, 0x00	; 0
    35f8:	20 e0       	ldi	r18, 0x00	; 0
    35fa:	30 e0       	ldi	r19, 0x00	; 0
    35fc:	47 ea       	ldi	r20, 0xA7	; 167
    35fe:	53 e0       	ldi	r21, 0x03	; 3
    3600:	60 e0       	ldi	r22, 0x00	; 0
    3602:	80 e0       	ldi	r24, 0x00	; 0
    3604:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <CANMOBSet>
	CANMOBSet( 1, &sg_sMOBDisabled, NULL, 0 );
    3608:	20 e0       	ldi	r18, 0x00	; 0
    360a:	30 e0       	ldi	r19, 0x00	; 0
    360c:	47 ea       	ldi	r20, 0xA7	; 167
    360e:	53 e0       	ldi	r21, 0x03	; 3
    3610:	60 e0       	ldi	r22, 0x00	; 0
    3612:	81 e0       	ldi	r24, 0x01	; 1
    3614:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <CANMOBSet>
	CANMOBSet( 2, &sg_sMOBDisabled, NULL, 0 );
    3618:	20 e0       	ldi	r18, 0x00	; 0
    361a:	30 e0       	ldi	r19, 0x00	; 0
    361c:	47 ea       	ldi	r20, 0xA7	; 167
    361e:	53 e0       	ldi	r21, 0x03	; 3
    3620:	60 e0       	ldi	r22, 0x00	; 0
    3622:	82 e0       	ldi	r24, 0x02	; 2
    3624:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <CANMOBSet>
	CANMOBSet( 3, &sg_sMOBDisabled, NULL, 0 );
    3628:	20 e0       	ldi	r18, 0x00	; 0
    362a:	30 e0       	ldi	r19, 0x00	; 0
    362c:	47 ea       	ldi	r20, 0xA7	; 167
    362e:	53 e0       	ldi	r21, 0x03	; 3
    3630:	60 e0       	ldi	r22, 0x00	; 0
    3632:	83 e0       	ldi	r24, 0x03	; 3
    3634:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <CANMOBSet>
	CANMOBSet( 4, &sg_sMOBDisabled, NULL, 0 );
    3638:	20 e0       	ldi	r18, 0x00	; 0
    363a:	30 e0       	ldi	r19, 0x00	; 0
    363c:	47 ea       	ldi	r20, 0xA7	; 167
    363e:	53 e0       	ldi	r21, 0x03	; 3
    3640:	60 e0       	ldi	r22, 0x00	; 0
    3642:	84 e0       	ldi	r24, 0x04	; 4
    3644:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <CANMOBSet>
	CANMOBSet( 5, &sg_sMOBDisabled, NULL, 0 );
    3648:	20 e0       	ldi	r18, 0x00	; 0
    364a:	30 e0       	ldi	r19, 0x00	; 0
    364c:	47 ea       	ldi	r20, 0xA7	; 167
    364e:	53 e0       	ldi	r21, 0x03	; 3
    3650:	60 e0       	ldi	r22, 0x00	; 0
    3652:	85 e0       	ldi	r24, 0x05	; 5
    3654:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <CANMOBSet>
	
	// Setup generic RX
	CANMOBSet( CANMOB_RX_IDX, &sg_sMOBGenericReceive, NULL, 0 );
    3658:	20 e0       	ldi	r18, 0x00	; 0
    365a:	30 e0       	ldi	r19, 0x00	; 0
    365c:	4f e9       	ldi	r20, 0x9F	; 159
    365e:	53 e0       	ldi	r21, 0x03	; 3
    3660:	60 e0       	ldi	r22, 0x00	; 0
    3662:	80 e0       	ldi	r24, 0x00	; 0
    3664:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <CANMOBSet>
	
	// Enable general CAN interrupts
	CANGIE = (1 << ENIT) | (1 << ENRX) | (1 << ENTX) | (1 << ENERR) | (1 << ENBX) | (1 << ENERG);
    3668:	8e eb       	ldi	r24, 0xBE	; 190
    366a:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f00db>

//	CANGIE &= ~(1 << ENOVRT);  // Disable CAN timer overflow interrupt

	// Enable the bus
	CANGCON = (1 << ENASTB);
    366e:	c0 93 d8 00 	sts	0x00D8, r28	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f00d8>
	sg_u8Busy = 0;
    3672:	10 92 69 09 	sts	0x0969, r1	; 0x800969 <sg_u8Busy>
}
    3676:	cf 91       	pop	r28
    3678:	0f 91       	pop	r16
    367a:	08 95       	ret

Disassembly of section .text.CANCheckTxStatus:

00003fe8 <CANCheckTxStatus>:

void CANCheckTxStatus(void)
{
	// Only check if we think we're busy
	if (sg_u8Busy > 0)
    3fe8:	80 91 69 09 	lds	r24, 0x0969	; 0x800969 <sg_u8Busy>
    3fec:	88 23       	and	r24, r24
    3fee:	49 f1       	breq	.+82     	; 0x4042 <CANCheckTxStatus+0x5a>
	{
		// Save current MOB and switch to TX MOB
		uint8_t savedMOB = CANPAGE;
    3ff0:	ed ee       	ldi	r30, 0xED	; 237
    3ff2:	f0 e0       	ldi	r31, 0x00	; 0
    3ff4:	80 81       	ld	r24, Z
		CANPAGE = CANMOB_TX_IDX << MOBNB0;
    3ff6:	90 e1       	ldi	r25, 0x10	; 16
    3ff8:	90 83       	st	Z, r25

		// Check if transmission completed successfully
		if (CANSTMOB & (1 << TXOK))
    3ffa:	90 91 ee 00 	lds	r25, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    3ffe:	96 ff       	sbrs	r25, 6
    4000:	08 c0       	rjmp	.+16     	; 0x4012 <CANCheckTxStatus+0x2a>
		{
			// Clear the flag
			CANSTMOB &= ~(1 << TXOK);
    4002:	ee ee       	ldi	r30, 0xEE	; 238
    4004:	f0 e0       	ldi	r31, 0x00	; 0
    4006:	90 81       	ld	r25, Z
    4008:	9f 7b       	andi	r25, 0xBF	; 191
    400a:	90 83       	st	Z, r25
			sg_u8Busy = 0;
    400c:	10 92 69 09 	sts	0x0969, r1	; 0x800969 <sg_u8Busy>
    4010:	16 c0       	rjmp	.+44     	; 0x403e <CANCheckTxStatus+0x56>
		}
		// Check for transmission errors
		else if (CANSTMOB & ((1 << BERR) | (1 << SERR) | (1 << CERR) | (1 << FERR) | (1 << AERR)))
    4012:	90 91 ee 00 	lds	r25, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    4016:	9f 71       	andi	r25, 0x1F	; 31
    4018:	29 f0       	breq	.+10     	; 0x4024 <CANCheckTxStatus+0x3c>
		{
			// Clear all error flags and reset busy flag
			CANSTMOB = 0x00;
    401a:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
			sg_u8Busy = 0;
    401e:	10 92 69 09 	sts	0x0969, r1	; 0x800969 <sg_u8Busy>
    4022:	0d c0       	rjmp	.+26     	; 0x403e <CANCheckTxStatus+0x56>
			// This is just a recovery mechanism if things get stuck
		}
		else
		{
			// No completion or error yet, decrement timeout counter
			sg_u8Busy--;
    4024:	90 91 69 09 	lds	r25, 0x0969	; 0x800969 <sg_u8Busy>
    4028:	91 50       	subi	r25, 0x01	; 1
    402a:	90 93 69 09 	sts	0x0969, r25	; 0x800969 <sg_u8Busy>

			// If timeout expired, force clear
			if (sg_u8Busy == 0)
    402e:	90 91 69 09 	lds	r25, 0x0969	; 0x800969 <sg_u8Busy>
    4032:	91 11       	cpse	r25, r1
    4034:	04 c0       	rjmp	.+8      	; 0x403e <CANCheckTxStatus+0x56>
			{
				// Clear any pending status and reset the MOB
				CANSTMOB = 0x00;
    4036:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
				CANCDMOB = 0x00;
    403a:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
				// Could optionally count timeout events here for diagnostics
			}
		}

		// Restore MOB
		CANPAGE = savedMOB;
    403e:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f00ed>
    4042:	08 95       	ret

Disassembly of section .text.DebugOut:

00004e7e <DebugOut>:
}

#endif

void DebugOut( const char* peFormat, ... )
{
    4e7e:	cf 93       	push	r28
    4e80:	df 93       	push	r29
    4e82:	cd b7       	in	r28, 0x3d	; 61
    4e84:	de b7       	in	r29, 0x3e	; 62
	
	va_end( args );	 */
	
	//DebugSerialSend( (uint8_t*)u8Buffer, strlen(u8Buffer) );
#endif
}
    4e86:	df 91       	pop	r29
    4e88:	cf 91       	pop	r28
    4e8a:	08 95       	ret

Disassembly of section .text.EEPROMRead:

00004de4 <EEPROMRead>:
}

uint8_t EEPROMRead(uint16_t u16Address)
{
	// Wait for any completion of writes, etc..
	while (EECR & (1 << EEWE));
    4de4:	f9 99       	sbic	0x1f, 1	; 31
    4de6:	fe cf       	rjmp	.-4      	; 0x4de4 <EEPROMRead>

	// Set address	
	EEAR = u16Address;
    4de8:	92 bd       	out	0x22, r25	; 34
    4dea:	81 bd       	out	0x21, r24	; 33
	
	// Start EEPROM read
	EECR |= (1 << EERE);
    4dec:	8f b3       	in	r24, 0x1f	; 31
    4dee:	81 60       	ori	r24, 0x01	; 1
    4df0:	8f bb       	out	0x1f, r24	; 31
	
	// Return the data
	return(EEDR);
    4df2:	80 b5       	in	r24, 0x20	; 32
    4df4:	08 95       	ret

Disassembly of section .text.I2CBitDelay:

00004e8c <I2CBitDelay>:
#define SDA_SET_INPUT()			(I2C_PORT_DDR &= ((uint8_t) ~(1 << I2C_SDA_PIN))); SDA_HIGH()

// Delays for one I2C bit's worth of time
static void I2CBitDelay(void)
{
	Delay(10);
    4e8c:	6a e0       	ldi	r22, 0x0A	; 10
    4e8e:	70 e0       	ldi	r23, 0x00	; 0
    4e90:	80 e0       	ldi	r24, 0x00	; 0
    4e92:	90 e0       	ldi	r25, 0x00	; 0
    4e94:	0e 94 4f 21 	call	0x429e	; 0x429e <Delay>
    4e98:	08 95       	ret

Disassembly of section .text.I2CStart:

000047a8 <I2CStart>:

// Send an I2C start sequence and quantize foreground code to the overflow
// timer
void I2CStart(void)
{
	SDA_SET_OUTPUT();
    47a8:	8a b1       	in	r24, 0x0a	; 10
    47aa:	82 60       	ori	r24, 0x02	; 2
    47ac:	8a b9       	out	0x0a, r24	; 10
	SDA_HIGH();
    47ae:	8b b1       	in	r24, 0x0b	; 11
    47b0:	82 60       	ori	r24, 0x02	; 2
    47b2:	8b b9       	out	0x0b, r24	; 11
	SCL_HIGH();
    47b4:	8b b1       	in	r24, 0x0b	; 11
    47b6:	81 60       	ori	r24, 0x01	; 1
    47b8:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    47ba:	0e 94 46 27 	call	0x4e8c	; 0x4e8c <I2CBitDelay>
	SDA_LOW();
    47be:	8b b1       	in	r24, 0x0b	; 11
    47c0:	8d 7f       	andi	r24, 0xFD	; 253
    47c2:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    47c4:	0e 94 46 27 	call	0x4e8c	; 0x4e8c <I2CBitDelay>
	SCL_LOW();
    47c8:	8b b1       	in	r24, 0x0b	; 11
    47ca:	8e 7f       	andi	r24, 0xFE	; 254
    47cc:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    47ce:	0e 94 46 27 	call	0x4e8c	; 0x4e8c <I2CBitDelay>
    47d2:	08 95       	ret

Disassembly of section .text.I2CStop:

0000494a <I2CStop>:
}

// Send an I2C stop sequence
void I2CStop(void)
{
	SDA_LOW();
    494a:	8b b1       	in	r24, 0x0b	; 11
    494c:	8d 7f       	andi	r24, 0xFD	; 253
    494e:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    4950:	0e 94 46 27 	call	0x4e8c	; 0x4e8c <I2CBitDelay>
	SCL_HIGH();
    4954:	8b b1       	in	r24, 0x0b	; 11
    4956:	81 60       	ori	r24, 0x01	; 1
    4958:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    495a:	0e 94 46 27 	call	0x4e8c	; 0x4e8c <I2CBitDelay>
	SDA_SET_INPUT();
    495e:	8a b1       	in	r24, 0x0a	; 10
    4960:	8d 7f       	andi	r24, 0xFD	; 253
    4962:	8a b9       	out	0x0a, r24	; 10
    4964:	8b b1       	in	r24, 0x0b	; 11
    4966:	82 60       	ori	r24, 0x02	; 2
    4968:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    496a:	0e 94 46 27 	call	0x4e8c	; 0x4e8c <I2CBitDelay>
    496e:	08 95       	ret

Disassembly of section .text.I2CUnstick:

000044f2 <I2CUnstick>:
}

// Unsticks an I2C bus
void I2CUnstick(void)
{
    44f2:	cf 93       	push	r28
	uint8_t u8UnstickBits = 64;

	SCL_SET_OUTPUT();
    44f4:	8a b1       	in	r24, 0x0a	; 10
    44f6:	81 60       	ori	r24, 0x01	; 1
    44f8:	8a b9       	out	0x0a, r24	; 10
	SDA_SET_OUTPUT();
    44fa:	8a b1       	in	r24, 0x0a	; 10
    44fc:	82 60       	ori	r24, 0x02	; 2
    44fe:	8a b9       	out	0x0a, r24	; 10
}

// Unsticks an I2C bus
void I2CUnstick(void)
{
	uint8_t u8UnstickBits = 64;
    4500:	c0 e4       	ldi	r28, 0x40	; 64

	SCL_SET_OUTPUT();
	SDA_SET_OUTPUT();
	
	while (u8UnstickBits)
    4502:	11 c0       	rjmp	.+34     	; 0x4526 <I2CUnstick+0x34>
	{
		SCL_LOW();
    4504:	8b b1       	in	r24, 0x0b	; 11
    4506:	8e 7f       	andi	r24, 0xFE	; 254
    4508:	8b b9       	out	0x0b, r24	; 11
		SDA_LOW();
    450a:	8b b1       	in	r24, 0x0b	; 11
    450c:	8d 7f       	andi	r24, 0xFD	; 253
    450e:	8b b9       	out	0x0b, r24	; 11
		I2CBitDelay();
    4510:	0e 94 46 27 	call	0x4e8c	; 0x4e8c <I2CBitDelay>
		SCL_HIGH();
    4514:	8b b1       	in	r24, 0x0b	; 11
    4516:	81 60       	ori	r24, 0x01	; 1
    4518:	8b b9       	out	0x0b, r24	; 11
		SDA_HIGH();
    451a:	8b b1       	in	r24, 0x0b	; 11
    451c:	82 60       	ori	r24, 0x02	; 2
    451e:	8b b9       	out	0x0b, r24	; 11
		I2CBitDelay();
    4520:	0e 94 46 27 	call	0x4e8c	; 0x4e8c <I2CBitDelay>
		u8UnstickBits--;
    4524:	c1 50       	subi	r28, 0x01	; 1
	uint8_t u8UnstickBits = 64;

	SCL_SET_OUTPUT();
	SDA_SET_OUTPUT();
	
	while (u8UnstickBits)
    4526:	c1 11       	cpse	r28, r1
    4528:	ed cf       	rjmp	.-38     	; 0x4504 <I2CUnstick+0x12>
		SCL_HIGH();
		SDA_HIGH();
		I2CBitDelay();
		u8UnstickBits--;
	}
}
    452a:	cf 91       	pop	r28
    452c:	08 95       	ret

Disassembly of section .text.I2CTxByte:

00003d8e <I2CTxByte>:

// Sends a single I2C byte. Returns false if the byte is not acked, or true if it is.
bool I2CTxByte(uint8_t u8Byte)
{
    3d8e:	cf 93       	push	r28
    3d90:	df 93       	push	r29
    3d92:	d8 2f       	mov	r29, r24
	uint8_t u8Length = 8;			// 8 Bits to send
	bool bAck = false;

	SDA_SET_OUTPUT();
    3d94:	8a b1       	in	r24, 0x0a	; 10
    3d96:	82 60       	ori	r24, 0x02	; 2
    3d98:	8a b9       	out	0x0a, r24	; 10
}

// Sends a single I2C byte. Returns false if the byte is not acked, or true if it is.
bool I2CTxByte(uint8_t u8Byte)
{
	uint8_t u8Length = 8;			// 8 Bits to send
    3d9a:	c8 e0       	ldi	r28, 0x08	; 8
	bool bAck = false;

	SDA_SET_OUTPUT();

	while (u8Length)
    3d9c:	15 c0       	rjmp	.+42     	; 0x3dc8 <I2CTxByte+0x3a>
	{
		if (u8Byte & 0x80)
    3d9e:	dd 23       	and	r29, r29
    3da0:	24 f4       	brge	.+8      	; 0x3daa <I2CTxByte+0x1c>
		{
			SDA_HIGH();
    3da2:	8b b1       	in	r24, 0x0b	; 11
    3da4:	82 60       	ori	r24, 0x02	; 2
    3da6:	8b b9       	out	0x0b, r24	; 11
    3da8:	03 c0       	rjmp	.+6      	; 0x3db0 <I2CTxByte+0x22>
		}
		else
		{
			SDA_LOW();
    3daa:	8b b1       	in	r24, 0x0b	; 11
    3dac:	8d 7f       	andi	r24, 0xFD	; 253
    3dae:	8b b9       	out	0x0b, r24	; 11
		}
		
		// Drive SCL high
		SCL_HIGH();
    3db0:	8b b1       	in	r24, 0x0b	; 11
    3db2:	81 60       	ori	r24, 0x01	; 1
    3db4:	8b b9       	out	0x0b, r24	; 11
		
		I2CBitDelay();
    3db6:	0e 94 46 27 	call	0x4e8c	; 0x4e8c <I2CBitDelay>
		
		// Ensure SCL is low
		SCL_LOW();
    3dba:	8b b1       	in	r24, 0x0b	; 11
    3dbc:	8e 7f       	andi	r24, 0xFE	; 254
    3dbe:	8b b9       	out	0x0b, r24	; 11
	
		// SDA Is now set. Delay.
		I2CBitDelay();
    3dc0:	0e 94 46 27 	call	0x4e8c	; 0x4e8c <I2CBitDelay>
		
		// Next bit
		u8Byte <<= 1;	
    3dc4:	dd 0f       	add	r29, r29
		u8Length--;
    3dc6:	c1 50       	subi	r28, 0x01	; 1
	uint8_t u8Length = 8;			// 8 Bits to send
	bool bAck = false;

	SDA_SET_OUTPUT();

	while (u8Length)
    3dc8:	c1 11       	cpse	r28, r1
    3dca:	e9 cf       	rjmp	.-46     	; 0x3d9e <I2CTxByte+0x10>
		// Next bit
		u8Byte <<= 1;	
		u8Length--;
	}
	
	SDA_SET_INPUT();
    3dcc:	8a b1       	in	r24, 0x0a	; 10
    3dce:	8d 7f       	andi	r24, 0xFD	; 253
    3dd0:	8a b9       	out	0x0a, r24	; 10
    3dd2:	8b b1       	in	r24, 0x0b	; 11
    3dd4:	82 60       	ori	r24, 0x02	; 2
    3dd6:	8b b9       	out	0x0b, r24	; 11
	SCL_HIGH();
    3dd8:	8b b1       	in	r24, 0x0b	; 11
    3dda:	81 60       	ori	r24, 0x01	; 1
    3ddc:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    3dde:	0e 94 46 27 	call	0x4e8c	; 0x4e8c <I2CBitDelay>
	
	// See if the byte was acknowledged
	if (SDA_READ())
    3de2:	49 9b       	sbis	0x09, 1	; 9
	{
		bAck = false;
	}
	else
	{
		bAck = true;
    3de4:	c1 e0       	ldi	r28, 0x01	; 1
	}
	
	SCL_LOW();
    3de6:	8b b1       	in	r24, 0x0b	; 11
    3de8:	8e 7f       	andi	r24, 0xFE	; 254
    3dea:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    3dec:	0e 94 46 27 	call	0x4e8c	; 0x4e8c <I2CBitDelay>
	return(bAck);
}
    3df0:	8c 2f       	mov	r24, r28
    3df2:	df 91       	pop	r29
    3df4:	cf 91       	pop	r28
    3df6:	08 95       	ret

Disassembly of section .text.I2CRxByte:

00003c2e <I2CRxByte>:

// Receives a single I2C byte and will optionally generate an ack at the end
uint8_t I2CRxByte(bool bAck)
{
    3c2e:	1f 93       	push	r17
    3c30:	cf 93       	push	r28
    3c32:	df 93       	push	r29
    3c34:	18 2f       	mov	r17, r24
	uint8_t u8Data = 0;
	uint8_t u8Count = 8;
	
	SDA_SET_INPUT();
    3c36:	8a b1       	in	r24, 0x0a	; 10
    3c38:	8d 7f       	andi	r24, 0xFD	; 253
    3c3a:	8a b9       	out	0x0a, r24	; 10
    3c3c:	8b b1       	in	r24, 0x0b	; 11
    3c3e:	82 60       	ori	r24, 0x02	; 2
    3c40:	8b b9       	out	0x0b, r24	; 11

// Receives a single I2C byte and will optionally generate an ack at the end
uint8_t I2CRxByte(bool bAck)
{
	uint8_t u8Data = 0;
	uint8_t u8Count = 8;
    3c42:	c8 e0       	ldi	r28, 0x08	; 8
}

// Receives a single I2C byte and will optionally generate an ack at the end
uint8_t I2CRxByte(bool bAck)
{
	uint8_t u8Data = 0;
    3c44:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t u8Count = 8;
	
	SDA_SET_INPUT();
	
	// Consume all 8 data bits
	while (u8Count)
    3c46:	0e c0       	rjmp	.+28     	; 0x3c64 <I2CRxByte+0x36>
	{
		u8Data <<= 1;
    3c48:	dd 0f       	add	r29, r29

		SCL_HIGH();
    3c4a:	8b b1       	in	r24, 0x0b	; 11
    3c4c:	81 60       	ori	r24, 0x01	; 1
    3c4e:	8b b9       	out	0x0b, r24	; 11
		I2CBitDelay();
    3c50:	0e 94 46 27 	call	0x4e8c	; 0x4e8c <I2CBitDelay>
			
		if (SDA_READ())
    3c54:	49 99       	sbic	0x09, 1	; 9
		{
			u8Data |= 1;
    3c56:	d1 60       	ori	r29, 0x01	; 1
		}
		
		SCL_LOW();
    3c58:	8b b1       	in	r24, 0x0b	; 11
    3c5a:	8e 7f       	andi	r24, 0xFE	; 254
    3c5c:	8b b9       	out	0x0b, r24	; 11
		I2CBitDelay();
    3c5e:	0e 94 46 27 	call	0x4e8c	; 0x4e8c <I2CBitDelay>
		u8Count--;
    3c62:	c1 50       	subi	r28, 0x01	; 1
	uint8_t u8Count = 8;
	
	SDA_SET_INPUT();
	
	// Consume all 8 data bits
	while (u8Count)
    3c64:	c1 11       	cpse	r28, r1
    3c66:	f0 cf       	rjmp	.-32     	; 0x3c48 <I2CRxByte+0x1a>
		I2CBitDelay();
		u8Count--;
	}

	// See if we acknowledge this
	SDA_SET_OUTPUT();
    3c68:	8a b1       	in	r24, 0x0a	; 10
    3c6a:	82 60       	ori	r24, 0x02	; 2
    3c6c:	8a b9       	out	0x0a, r24	; 10
	if (bAck)
    3c6e:	11 23       	and	r17, r17
    3c70:	21 f0       	breq	.+8      	; 0x3c7a <I2CRxByte+0x4c>
	{
		SDA_LOW();
    3c72:	8b b1       	in	r24, 0x0b	; 11
    3c74:	8d 7f       	andi	r24, 0xFD	; 253
    3c76:	8b b9       	out	0x0b, r24	; 11
    3c78:	03 c0       	rjmp	.+6      	; 0x3c80 <I2CRxByte+0x52>
	}
	else
	{
		SDA_HIGH();
    3c7a:	8b b1       	in	r24, 0x0b	; 11
    3c7c:	82 60       	ori	r24, 0x02	; 2
    3c7e:	8b b9       	out	0x0b, r24	; 11
	}
	
	I2CBitDelay();
    3c80:	0e 94 46 27 	call	0x4e8c	; 0x4e8c <I2CBitDelay>
	SCL_HIGH();
    3c84:	8b b1       	in	r24, 0x0b	; 11
    3c86:	81 60       	ori	r24, 0x01	; 1
    3c88:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    3c8a:	0e 94 46 27 	call	0x4e8c	; 0x4e8c <I2CBitDelay>
	SCL_LOW();
    3c8e:	8b b1       	in	r24, 0x0b	; 11
    3c90:	8e 7f       	andi	r24, 0xFE	; 254
    3c92:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    3c94:	0e 94 46 27 	call	0x4e8c	; 0x4e8c <I2CBitDelay>
	SDA_LOW();
    3c98:	8b b1       	in	r24, 0x0b	; 11
    3c9a:	8d 7f       	andi	r24, 0xFD	; 253
    3c9c:	8b b9       	out	0x0b, r24	; 11

	return(u8Data);	
}
    3c9e:	8d 2f       	mov	r24, r29
    3ca0:	df 91       	pop	r29
    3ca2:	cf 91       	pop	r28
    3ca4:	1f 91       	pop	r17
    3ca6:	08 95       	ret

Disassembly of section .text.I2CSetup:

000047d4 <I2CSetup>:
// Prepares the SCL/SDA pins for I2C operation and returns when the CPU is
// quantized to the timer (for consistent bit alignment)
void I2CSetup(void)
{
	// Deassert SCL and SDA
	SCL_HIGH();
    47d4:	8b b1       	in	r24, 0x0b	; 11
    47d6:	81 60       	ori	r24, 0x01	; 1
    47d8:	8b b9       	out	0x0b, r24	; 11
	SDA_HIGH();
    47da:	8b b1       	in	r24, 0x0b	; 11
    47dc:	82 60       	ori	r24, 0x02	; 2
    47de:	8b b9       	out	0x0b, r24	; 11

	// Set SCL and SDA lines as push/pull output drives
	SCL_SET_OUTPUT();
    47e0:	8a b1       	in	r24, 0x0a	; 10
    47e2:	81 60       	ori	r24, 0x01	; 1
    47e4:	8a b9       	out	0x0a, r24	; 10
	
	// Turn on SDA, set as an input
	SDA_SET_INPUT();
    47e6:	8a b1       	in	r24, 0x0a	; 10
    47e8:	8d 7f       	andi	r24, 0xFD	; 253
    47ea:	8a b9       	out	0x0a, r24	; 10
    47ec:	8b b1       	in	r24, 0x0b	; 11
    47ee:	82 60       	ori	r24, 0x02	; 2
    47f0:	8b b9       	out	0x0b, r24	; 11
	
	Delay(20);
    47f2:	64 e1       	ldi	r22, 0x14	; 20
    47f4:	70 e0       	ldi	r23, 0x00	; 0
    47f6:	80 e0       	ldi	r24, 0x00	; 0
    47f8:	90 e0       	ldi	r25, 0x00	; 0
    47fa:	0e 94 4f 21 	call	0x429e	; 0x429e <Delay>
    47fe:	08 95       	ret

Disassembly of section .text.I2CStartTransaction:

00004882 <I2CStartTransaction>:

// Sets up the I2C pins, sends slave address/read/write byte, and waits for acknowledgment.
// Returns false if no device is responding.
bool I2CStartTransaction(uint8_t u8SlaveAddress,
						 bool bRead)
{
    4882:	cf 93       	push	r28
    4884:	df 93       	push	r29
    4886:	c8 2f       	mov	r28, r24
    4888:	d6 2f       	mov	r29, r22
	// Set up the pins for I2C operation
	I2CSetup();
    488a:	0e 94 ea 23 	call	0x47d4	; 0x47d4 <I2CSetup>
	
	// I2C Start condition
	I2CStart();
    488e:	0e 94 d4 23 	call	0x47a8	; 0x47a8 <I2CStart>

	// If it's a read operation, clear the lower bit
	if (bRead)
    4892:	dd 23       	and	r29, r29
    4894:	19 f0       	breq	.+6      	; 0x489c <I2CStartTransaction+0x1a>
	{
		u8SlaveAddress |= 1;
    4896:	8c 2f       	mov	r24, r28
    4898:	81 60       	ori	r24, 0x01	; 1
    489a:	02 c0       	rjmp	.+4      	; 0x48a0 <I2CStartTransaction+0x1e>
	}
	else
	{
		// Otherwise set it
		u8SlaveAddress &= (uint8_t) (~1);
    489c:	8c 2f       	mov	r24, r28
    489e:	8e 7f       	andi	r24, 0xFE	; 254
	}
	
	// Now send out the slave address + the read/write bit
	return(I2CTxByte(u8SlaveAddress));
    48a0:	0e 94 c7 1e 	call	0x3d8e	; 0x3d8e <I2CTxByte>
}
    48a4:	df 91       	pop	r29
    48a6:	cf 91       	pop	r28
    48a8:	08 95       	ret

Disassembly of section .text.CellCountExpectedSet:

00003046 <CellCountExpectedSet>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    3046:	cf 92       	push	r12
    3048:	df 92       	push	r13
    304a:	ef 92       	push	r14
    304c:	ff 92       	push	r15
    304e:	8f 35       	cpi	r24, 0x5F	; 95
    3050:	08 f0       	brcs	.+2      	; 0x3054 <CellCountExpectedSet+0xe>
    3052:	8e e5       	ldi	r24, 0x5E	; 94
    3054:	e0 e1       	ldi	r30, 0x10	; 16
    3056:	f1 e0       	ldi	r31, 0x01	; 1
    3058:	85 8b       	std	Z+21, r24	; 0x15
    305a:	c8 2e       	mov	r12, r24
    305c:	d1 2c       	mov	r13, r1
    305e:	e1 2c       	mov	r14, r1
    3060:	f1 2c       	mov	r15, r1
    3062:	aa ec       	ldi	r26, 0xCA	; 202
    3064:	b8 e0       	ldi	r27, 0x08	; 8
    3066:	a7 01       	movw	r20, r14
    3068:	96 01       	movw	r18, r12
    306a:	0e 94 d2 26 	call	0x4da4	; 0x4da4 <__muluhisi3>
    306e:	65 8f       	std	Z+29, r22	; 0x1d
    3070:	76 8f       	std	Z+30, r23	; 0x1e
    3072:	87 8f       	std	Z+31, r24	; 0x1f
    3074:	90 a3       	std	Z+32, r25	; 0x20
    3076:	a4 e9       	ldi	r26, 0x94	; 148
    3078:	b1 e1       	ldi	r27, 0x11	; 17
    307a:	0e 94 d2 26 	call	0x4da4	; 0x4da4 <__muluhisi3>
    307e:	61 a3       	std	Z+33, r22	; 0x21
    3080:	72 a3       	std	Z+34, r23	; 0x22
    3082:	83 a3       	std	Z+35, r24	; 0x23
    3084:	94 a3       	std	Z+36, r25	; 0x24
    3086:	81 a1       	ldd	r24, Z+33	; 0x21
    3088:	92 a1       	ldd	r25, Z+34	; 0x22
    308a:	a3 a1       	ldd	r26, Z+35	; 0x23
    308c:	b4 a1       	ldd	r27, Z+36	; 0x24
    308e:	45 8d       	ldd	r20, Z+29	; 0x1d
    3090:	56 8d       	ldd	r21, Z+30	; 0x1e
    3092:	67 8d       	ldd	r22, Z+31	; 0x1f
    3094:	70 a1       	ldd	r23, Z+32	; 0x20
    3096:	84 1b       	sub	r24, r20
    3098:	95 0b       	sbc	r25, r21
    309a:	a6 0b       	sbc	r26, r22
    309c:	b7 0b       	sbc	r27, r23
    309e:	88 0f       	add	r24, r24
    30a0:	99 1f       	adc	r25, r25
    30a2:	aa 1f       	adc	r26, r26
    30a4:	bb 1f       	adc	r27, r27
    30a6:	88 0f       	add	r24, r24
    30a8:	99 1f       	adc	r25, r25
    30aa:	aa 1f       	adc	r26, r26
    30ac:	bb 1f       	adc	r27, r27
    30ae:	88 0f       	add	r24, r24
    30b0:	99 1f       	adc	r25, r25
    30b2:	aa 1f       	adc	r26, r26
    30b4:	bb 1f       	adc	r27, r27
    30b6:	88 0f       	add	r24, r24
    30b8:	99 1f       	adc	r25, r25
    30ba:	aa 1f       	adc	r26, r26
    30bc:	bb 1f       	adc	r27, r27
    30be:	88 0f       	add	r24, r24
    30c0:	99 1f       	adc	r25, r25
    30c2:	aa 1f       	adc	r26, r26
    30c4:	bb 1f       	adc	r27, r27
    30c6:	88 0f       	add	r24, r24
    30c8:	99 1f       	adc	r25, r25
    30ca:	aa 1f       	adc	r26, r26
    30cc:	bb 1f       	adc	r27, r27
    30ce:	88 0f       	add	r24, r24
    30d0:	99 1f       	adc	r25, r25
    30d2:	aa 1f       	adc	r26, r26
    30d4:	bb 1f       	adc	r27, r27
    30d6:	ac 01       	movw	r20, r24
    30d8:	bd 01       	movw	r22, r26
    30da:	bb 23       	and	r27, r27
    30dc:	24 f4       	brge	.+8      	; 0x30e6 <CellCountExpectedSet+0xa0>
    30de:	41 50       	subi	r20, 0x01	; 1
    30e0:	5c 4f       	sbci	r21, 0xFC	; 252
    30e2:	6f 4f       	sbci	r22, 0xFF	; 255
    30e4:	7f 4f       	sbci	r23, 0xFF	; 255
    30e6:	03 2e       	mov	r0, r19
    30e8:	3a e0       	ldi	r19, 0x0A	; 10
    30ea:	75 95       	asr	r23
    30ec:	67 95       	ror	r22
    30ee:	57 95       	ror	r21
    30f0:	47 95       	ror	r20
    30f2:	3a 95       	dec	r19
    30f4:	d1 f7       	brne	.-12     	; 0x30ea <CellCountExpectedSet+0xa4>
    30f6:	30 2d       	mov	r19, r0
    30f8:	50 93 36 01 	sts	0x0136, r21	; 0x800136 <sg_sFrame+0x26>
    30fc:	40 93 35 01 	sts	0x0135, r20	; 0x800135 <sg_sFrame+0x25>
    3100:	ff 90       	pop	r15
    3102:	ef 90       	pop	r14
    3104:	df 90       	pop	r13
    3106:	cf 90       	pop	r12
    3108:	08 95       	ret

Disassembly of section .text.SendModuleControllerStatus:

00004e3e <SendModuleControllerStatus>:

static uint8_t sg_u8ControllerStatusMsgCount = 0;

static void SendModuleControllerStatus(void)
{
	sg_bSendModuleControllerStatus = true;
    4e3e:	81 e0       	ldi	r24, 0x01	; 1
    4e40:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <sg_bSendModuleControllerStatus>
	sg_u8ControllerStatusMsgCount = 0;
    4e44:	10 92 6e 09 	sts	0x096E, r1	; 0x80096e <sg_u8ControllerStatusMsgCount>
	sg_bIgnoreStatusRequests = true;  // Start ignoring new requests
    4e48:	80 93 76 09 	sts	0x0976, r24	; 0x800976 <sg_bIgnoreStatusRequests>
    4e4c:	08 95       	ret

Disassembly of section .text.ModuleControllerStateSet:

00004ed8 <ModuleControllerStateSet>:
	MBASSERT(0);
}

static void ModuleControllerStateSet( EModuleControllerState eNext )
{
	if(eNext < EMODSTATE_COUNT)
    4ed8:	84 30       	cpi	r24, 0x04	; 4
    4eda:	10 f4       	brcc	.+4      	; 0x4ee0 <ModuleControllerStateSet+0x8>
	{
		sg_eModuleControllerStateTarget = eNext;
    4edc:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <sg_eModuleControllerStateTarget>
    4ee0:	08 95       	ret

Disassembly of section .text.ModuleControllerStateSetMax:

00004d78 <ModuleControllerStateSetMax>:



static void ModuleControllerStateSetMax( EModuleControllerState eNext )
{
	if(eNext < EMODSTATE_COUNT)
    4d78:	84 30       	cpi	r24, 0x04	; 4
    4d7a:	40 f4       	brcc	.+16     	; 0x4d8c <ModuleControllerStateSetMax+0x14>
	{
		sg_eModuleControllerStateMax = eNext;
    4d7c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <sg_eModuleControllerStateMax>
		if (sg_eModuleControllerStateCurrent > eNext) // we are in a higher state than allowed
    4d80:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    4d84:	89 17       	cp	r24, r25
    4d86:	10 f4       	brcc	.+4      	; 0x4d8c <ModuleControllerStateSetMax+0x14>
		{
			sg_eModuleControllerStateTarget = eNext;
    4d88:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <sg_eModuleControllerStateTarget>
    4d8c:	08 95       	ret

Disassembly of section .text.Check5VLoss:

00004d1a <Check5VLoss>:
}

// Checks for 5V loss
static void Check5VLoss(uint8_t u8NewState)
{
	if( u8NewState & (1 << PIN_5V_DET) )
    4d1a:	86 fd       	sbrc	r24, 6
    4d1c:	09 c0       	rjmp	.+18     	; 0x4d30 <Check5VLoss+0x16>
		// Not asserted
	}
	else
	{
		// 5V detect is low
		FET_EN_DEASSERT();
    4d1e:	88 b1       	in	r24, 0x08	; 8
    4d20:	8f 7e       	andi	r24, 0xEF	; 239
    4d22:	88 b9       	out	0x08, r24	; 8
		RELAY_EN_DEASSERT();
    4d24:	8e b1       	in	r24, 0x0e	; 14
    4d26:	8d 7f       	andi	r24, 0xFD	; 253
    4d28:	8e b9       	out	0x0e, r24	; 14
		ModuleControllerStateSet( EMODSTATE_OFF );
    4d2a:	80 e0       	ldi	r24, 0x00	; 0
    4d2c:	0e 94 6c 27 	call	0x4ed8	; 0x4ed8 <ModuleControllerStateSet>
    4d30:	08 95       	ret

Disassembly of section .text.CellDataConvertVoltage:

00003f8a <CellDataConvertVoltage>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    3f8a:	fb 01       	movw	r30, r22
    3f8c:	dc 01       	movw	r26, r24
    3f8e:	b3 70       	andi	r27, 0x03	; 3
    3f90:	2b ed       	ldi	r18, 0xDB	; 219
    3f92:	36 ea       	ldi	r19, 0xA6	; 166
    3f94:	43 e2       	ldi	r20, 0x23	; 35
    3f96:	50 e0       	ldi	r21, 0x00	; 0
    3f98:	0e 94 d2 26 	call	0x4da4	; 0x4da4 <__muluhisi3>
    3f9c:	dc 01       	movw	r26, r24
    3f9e:	cb 01       	movw	r24, r22
    3fa0:	07 2e       	mov	r0, r23
    3fa2:	7a e0       	ldi	r23, 0x0A	; 10
    3fa4:	b6 95       	lsr	r27
    3fa6:	a7 95       	ror	r26
    3fa8:	97 95       	ror	r25
    3faa:	87 95       	ror	r24
    3fac:	7a 95       	dec	r23
    3fae:	d1 f7       	brne	.-12     	; 0x3fa4 <CellDataConvertVoltage+0x1a>
    3fb0:	70 2d       	mov	r23, r0
    3fb2:	9f 5f       	subi	r25, 0xFF	; 255
    3fb4:	af 4f       	sbci	r26, 0xFF	; 255
    3fb6:	bf 4f       	sbci	r27, 0xFF	; 255
    3fb8:	07 2e       	mov	r0, r23
    3fba:	79 e0       	ldi	r23, 0x09	; 9
    3fbc:	b6 95       	lsr	r27
    3fbe:	a7 95       	ror	r26
    3fc0:	97 95       	ror	r25
    3fc2:	87 95       	ror	r24
    3fc4:	7a 95       	dec	r23
    3fc6:	d1 f7       	brne	.-12     	; 0x3fbc <CellDataConvertVoltage+0x32>
    3fc8:	70 2d       	mov	r23, r0
    3fca:	9c 01       	movw	r18, r24
    3fcc:	01 97       	sbiw	r24, 0x01	; 1
    3fce:	8e 3f       	cpi	r24, 0xFE	; 254
    3fd0:	9f 4f       	sbci	r25, 0xFF	; 255
    3fd2:	10 f4       	brcc	.+4      	; 0x3fd8 <CellDataConvertVoltage+0x4e>
    3fd4:	81 e0       	ldi	r24, 0x01	; 1
    3fd6:	03 c0       	rjmp	.+6      	; 0x3fde <CellDataConvertVoltage+0x54>
    3fd8:	80 e0       	ldi	r24, 0x00	; 0
    3fda:	20 e0       	ldi	r18, 0x00	; 0
    3fdc:	30 e0       	ldi	r19, 0x00	; 0
    3fde:	30 97       	sbiw	r30, 0x00	; 0
    3fe0:	11 f0       	breq	.+4      	; 0x3fe6 <CellDataConvertVoltage+0x5c>
    3fe2:	31 83       	std	Z+1, r19	; 0x01
    3fe4:	20 83       	st	Z, r18
    3fe6:	08 95       	ret

Disassembly of section .text.CellDataConvertTemperature:

00003e62 <CellDataConvertTemperature>:
    3e62:	8f 3f       	cpi	r24, 0xFF	; 255
    3e64:	2f ef       	ldi	r18, 0xFF	; 255
    3e66:	92 07       	cpc	r25, r18
    3e68:	29 f1       	breq	.+74     	; 0x3eb4 <CellDataConvertTemperature+0x52>
    3e6a:	28 2f       	mov	r18, r24
    3e6c:	2f 70       	andi	r18, 0x0F	; 15
    3e6e:	94 ff       	sbrs	r25, 4
    3e70:	02 c0       	rjmp	.+4      	; 0x3e76 <CellDataConvertTemperature+0x14>
    3e72:	90 6f       	ori	r25, 0xF0	; 240
    3e74:	01 c0       	rjmp	.+2      	; 0x3e78 <CellDataConvertTemperature+0x16>
    3e76:	9f 77       	andi	r25, 0x7F	; 127
    3e78:	ac 01       	movw	r20, r24
    3e7a:	55 95       	asr	r21
    3e7c:	47 95       	ror	r20
    3e7e:	55 95       	asr	r21
    3e80:	47 95       	ror	r20
    3e82:	55 95       	asr	r21
    3e84:	47 95       	ror	r20
    3e86:	55 95       	asr	r21
    3e88:	47 95       	ror	r20
    3e8a:	34 e6       	ldi	r19, 0x64	; 100
    3e8c:	34 9f       	mul	r19, r20
    3e8e:	c0 01       	movw	r24, r0
    3e90:	35 9f       	mul	r19, r21
    3e92:	90 0d       	add	r25, r0
    3e94:	11 24       	eor	r1, r1
    3e96:	30 e0       	ldi	r19, 0x00	; 0
    3e98:	40 e0       	ldi	r20, 0x00	; 0
    3e9a:	26 5f       	subi	r18, 0xF6	; 246
    3e9c:	3c 4f       	sbci	r19, 0xFC	; 252
    3e9e:	4f 4f       	sbci	r20, 0xFF	; 255
    3ea0:	f9 01       	movw	r30, r18
    3ea2:	24 91       	lpm	r18, Z
    3ea4:	47 fd       	sbrc	r20, 7
    3ea6:	20 81       	ld	r18, Z
    3ea8:	82 0f       	add	r24, r18
    3eaa:	91 1d       	adc	r25, r1
    3eac:	81 56       	subi	r24, 0x61	; 97
    3eae:	9a 4e       	sbci	r25, 0xEA	; 234
    3eb0:	21 e0       	ldi	r18, 0x01	; 1
    3eb2:	01 c0       	rjmp	.+2      	; 0x3eb6 <CellDataConvertTemperature+0x54>
    3eb4:	20 e0       	ldi	r18, 0x00	; 0
    3eb6:	61 15       	cp	r22, r1
    3eb8:	71 05       	cpc	r23, r1
    3eba:	19 f0       	breq	.+6      	; 0x3ec2 <CellDataConvertTemperature+0x60>
    3ebc:	fb 01       	movw	r30, r22
    3ebe:	91 83       	std	Z+1, r25	; 0x01
    3ec0:	80 83       	st	Z, r24
    3ec2:	82 2f       	mov	r24, r18
    3ec4:	08 95       	ret

Disassembly of section .text.ModuleCurrentConvertReadings:

0000269a <ModuleCurrentConvertReadings>:
    269a:	a0 91 59 01 	lds	r26, 0x0159	; 0x800159 <sg_sFrame+0x49>
    269e:	b0 91 5a 01 	lds	r27, 0x015A	; 0x80015a <sg_sFrame+0x4a>
    26a2:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <sg_sFrame+0x4c>
    26a6:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <sg_sFrame+0x4d>
    26aa:	e0 91 79 09 	lds	r30, 0x0979	; 0x800979 <sg_u8CurrentBufferIndex>
    26ae:	ef 3f       	cpi	r30, 0xFF	; 255
    26b0:	81 f4       	brne	.+32     	; 0x26d2 <ModuleCurrentConvertReadings+0x38>
    26b2:	07 c0       	rjmp	.+14     	; 0x26c2 <ModuleCurrentConvertReadings+0x28>
    26b4:	f0 e0       	ldi	r31, 0x00	; 0
    26b6:	ee 0f       	add	r30, r30
    26b8:	ff 1f       	adc	r31, r31
    26ba:	e3 5e       	subi	r30, 0xE3	; 227
    26bc:	f6 4f       	sbci	r31, 0xF6	; 246
    26be:	91 83       	std	Z+1, r25	; 0x01
    26c0:	80 83       	st	Z, r24
    26c2:	e0 91 79 09 	lds	r30, 0x0979	; 0x800979 <sg_u8CurrentBufferIndex>
    26c6:	ef 5f       	subi	r30, 0xFF	; 255
    26c8:	e0 93 79 09 	sts	0x0979, r30	; 0x800979 <sg_u8CurrentBufferIndex>
    26cc:	e8 30       	cpi	r30, 0x08	; 8
    26ce:	90 f3       	brcs	.-28     	; 0x26b4 <ModuleCurrentConvertReadings+0x1a>
    26d0:	0f c0       	rjmp	.+30     	; 0x26f0 <ModuleCurrentConvertReadings+0x56>
    26d2:	21 e0       	ldi	r18, 0x01	; 1
    26d4:	2e 0f       	add	r18, r30
    26d6:	20 93 79 09 	sts	0x0979, r18	; 0x800979 <sg_u8CurrentBufferIndex>
    26da:	f0 e0       	ldi	r31, 0x00	; 0
    26dc:	ee 0f       	add	r30, r30
    26de:	ff 1f       	adc	r31, r31
    26e0:	e3 5e       	subi	r30, 0xE3	; 227
    26e2:	f6 4f       	sbci	r31, 0xF6	; 246
    26e4:	91 83       	std	Z+1, r25	; 0x01
    26e6:	80 83       	st	Z, r24
    26e8:	28 30       	cpi	r18, 0x08	; 8
    26ea:	10 f0       	brcs	.+4      	; 0x26f0 <ModuleCurrentConvertReadings+0x56>
    26ec:	10 92 79 09 	sts	0x0979, r1	; 0x800979 <sg_u8CurrentBufferIndex>
    26f0:	80 e0       	ldi	r24, 0x00	; 0
    26f2:	20 e0       	ldi	r18, 0x00	; 0
    26f4:	30 e0       	ldi	r19, 0x00	; 0
    26f6:	0b c0       	rjmp	.+22     	; 0x270e <ModuleCurrentConvertReadings+0x74>
    26f8:	e8 2f       	mov	r30, r24
    26fa:	f0 e0       	ldi	r31, 0x00	; 0
    26fc:	ee 0f       	add	r30, r30
    26fe:	ff 1f       	adc	r31, r31
    2700:	e3 5e       	subi	r30, 0xE3	; 227
    2702:	f6 4f       	sbci	r31, 0xF6	; 246
    2704:	40 81       	ld	r20, Z
    2706:	51 81       	ldd	r21, Z+1	; 0x01
    2708:	24 0f       	add	r18, r20
    270a:	35 1f       	adc	r19, r21
    270c:	8f 5f       	subi	r24, 0xFF	; 255
    270e:	88 30       	cpi	r24, 0x08	; 8
    2710:	98 f3       	brcs	.-26     	; 0x26f8 <ModuleCurrentConvertReadings+0x5e>
    2712:	c9 01       	movw	r24, r18
    2714:	99 23       	and	r25, r25
    2716:	0c f4       	brge	.+2      	; 0x271a <ModuleCurrentConvertReadings+0x80>
    2718:	07 96       	adiw	r24, 0x07	; 7
    271a:	95 95       	asr	r25
    271c:	87 95       	ror	r24
    271e:	95 95       	asr	r25
    2720:	87 95       	ror	r24
    2722:	95 95       	asr	r25
    2724:	87 95       	ror	r24
    2726:	a8 1b       	sub	r26, r24
    2728:	b9 0b       	sbc	r27, r25
    272a:	20 e8       	ldi	r18, 0x80	; 128
    272c:	3c e0       	ldi	r19, 0x0C	; 12
    272e:	0e 94 54 27 	call	0x4ea8	; 0x4ea8 <__usmulhisi3>
    2732:	ab 01       	movw	r20, r22
    2734:	bc 01       	movw	r22, r24
    2736:	5f 5f       	subi	r21, 0xFF	; 255
    2738:	6f 4f       	sbci	r22, 0xFF	; 255
    273a:	7f 4f       	sbci	r23, 0xFF	; 255
    273c:	db 01       	movw	r26, r22
    273e:	ca 01       	movw	r24, r20
    2740:	77 23       	and	r23, r23
    2742:	24 f4       	brge	.+8      	; 0x274c <ModuleCurrentConvertReadings+0xb2>
    2744:	81 50       	subi	r24, 0x01	; 1
    2746:	9e 4f       	sbci	r25, 0xFE	; 254
    2748:	af 4f       	sbci	r26, 0xFF	; 255
    274a:	bf 4f       	sbci	r27, 0xFF	; 255
    274c:	07 2e       	mov	r0, r23
    274e:	79 e0       	ldi	r23, 0x09	; 9
    2750:	b5 95       	asr	r27
    2752:	a7 95       	ror	r26
    2754:	97 95       	ror	r25
    2756:	87 95       	ror	r24
    2758:	7a 95       	dec	r23
    275a:	d1 f7       	brne	.-12     	; 0x2750 <ModuleCurrentConvertReadings+0xb6>
    275c:	70 2d       	mov	r23, r0
    275e:	90 58       	subi	r25, 0x80	; 128
    2760:	af 4f       	sbci	r26, 0xFF	; 255
    2762:	bf 4f       	sbci	r27, 0xFF	; 255
    2764:	e0 e1       	ldi	r30, 0x10	; 16
    2766:	f1 e0       	ldi	r31, 0x01	; 1
    2768:	90 ab       	std	Z+48, r25	; 0x30
    276a:	87 a7       	std	Z+47, r24	; 0x2f
    276c:	27 a5       	ldd	r18, Z+47	; 0x2f
    276e:	30 a9       	ldd	r19, Z+48	; 0x30
    2770:	86 89       	ldd	r24, Z+22	; 0x16
    2772:	97 89       	ldd	r25, Z+23	; 0x17
    2774:	82 17       	cp	r24, r18
    2776:	93 07       	cpc	r25, r19
    2778:	20 f4       	brcc	.+8      	; 0x2782 <ModuleCurrentConvertReadings+0xe8>
    277a:	87 a5       	ldd	r24, Z+47	; 0x2f
    277c:	90 a9       	ldd	r25, Z+48	; 0x30
    277e:	97 8b       	std	Z+23, r25	; 0x17
    2780:	86 8b       	std	Z+22, r24	; 0x16
    2782:	e0 e1       	ldi	r30, 0x10	; 16
    2784:	f1 e0       	ldi	r31, 0x01	; 1
    2786:	27 a5       	ldd	r18, Z+47	; 0x2f
    2788:	30 a9       	ldd	r19, Z+48	; 0x30
    278a:	80 8d       	ldd	r24, Z+24	; 0x18
    278c:	91 8d       	ldd	r25, Z+25	; 0x19
    278e:	28 17       	cp	r18, r24
    2790:	39 07       	cpc	r19, r25
    2792:	20 f4       	brcc	.+8      	; 0x279c <ModuleCurrentConvertReadings+0x102>
    2794:	87 a5       	ldd	r24, Z+47	; 0x2f
    2796:	90 a9       	ldd	r25, Z+48	; 0x30
    2798:	91 8f       	std	Z+25, r25	; 0x19
    279a:	80 8f       	std	Z+24, r24	; 0x18
    279c:	08 95       	ret

Disassembly of section .text.__vector_1:

00004996 <__vector_1>:

// NOTE: If you're getting unexpected AVR resets, uncomment these unused handlers to see
// if another interrupt is being taken that doesn't have a handler. AVR Defaults to jumping
// to 0 when not vector is programmed.
ISR(ANACOMP0_vect, ISR_BLOCK)
{
    4996:	1f 92       	push	r1
    4998:	0f 92       	push	r0
    499a:	0f b6       	in	r0, 0x3f	; 63
    499c:	0f 92       	push	r0
    499e:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) ANACOMP0_vect;
    49a0:	8b ec       	ldi	r24, 0xCB	; 203
    49a2:	94 e2       	ldi	r25, 0x24	; 36
    49a4:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    49a8:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    49ac:	80 93 6b 09 	sts	0x096B, r24	; 0x80096b <sg_u8PCMSK0>
    49b0:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    49b4:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8PCMSK1>
    49b8:	ff cf       	rjmp	.-2      	; 0x49b8 <__vector_1+0x22>

Disassembly of section .text.__vector_2:

000049ba <__vector_2>:
	while (1);
}

ISR(ANACOMP1_vect, ISR_BLOCK)
{
    49ba:	1f 92       	push	r1
    49bc:	0f 92       	push	r0
    49be:	0f b6       	in	r0, 0x3f	; 63
    49c0:	0f 92       	push	r0
    49c2:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) ANACOMP1_vect;
    49c4:	8d ed       	ldi	r24, 0xDD	; 221
    49c6:	94 e2       	ldi	r25, 0x24	; 36
    49c8:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    49cc:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    49d0:	80 93 6b 09 	sts	0x096B, r24	; 0x80096b <sg_u8PCMSK0>
    49d4:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    49d8:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8PCMSK1>
    49dc:	ff cf       	rjmp	.-2      	; 0x49dc <__vector_2+0x22>

Disassembly of section .text.__vector_3:

000049de <__vector_3>:
	while (1);
}

ISR(ANACOMP2_vect, ISR_BLOCK)
{
    49de:	1f 92       	push	r1
    49e0:	0f 92       	push	r0
    49e2:	0f b6       	in	r0, 0x3f	; 63
    49e4:	0f 92       	push	r0
    49e6:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) ANACOMP2_vect;
    49e8:	8f ee       	ldi	r24, 0xEF	; 239
    49ea:	94 e2       	ldi	r25, 0x24	; 36
    49ec:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    49f0:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    49f4:	80 93 6b 09 	sts	0x096B, r24	; 0x80096b <sg_u8PCMSK0>
    49f8:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    49fc:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8PCMSK1>
    4a00:	ff cf       	rjmp	.-2      	; 0x4a00 <__vector_3+0x22>

Disassembly of section .text.__vector_4:

00004a02 <__vector_4>:
	while (1);
}

ISR(ANACOMP3_vect, ISR_BLOCK)
{
    4a02:	1f 92       	push	r1
    4a04:	0f 92       	push	r0
    4a06:	0f b6       	in	r0, 0x3f	; 63
    4a08:	0f 92       	push	r0
    4a0a:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) ANACOMP3_vect;
    4a0c:	81 e0       	ldi	r24, 0x01	; 1
    4a0e:	95 e2       	ldi	r25, 0x25	; 37
    4a10:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4a14:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4a18:	80 93 6b 09 	sts	0x096B, r24	; 0x80096b <sg_u8PCMSK0>
    4a1c:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4a20:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8PCMSK1>
    4a24:	ff cf       	rjmp	.-2      	; 0x4a24 <__vector_4+0x22>

Disassembly of section .text.__vector_5:

00004a26 <__vector_5>:
	while (1);
}

ISR(PSC_FAULT_vect, ISR_BLOCK)
{
    4a26:	1f 92       	push	r1
    4a28:	0f 92       	push	r0
    4a2a:	0f b6       	in	r0, 0x3f	; 63
    4a2c:	0f 92       	push	r0
    4a2e:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) PSC_FAULT_vect;
    4a30:	83 e1       	ldi	r24, 0x13	; 19
    4a32:	95 e2       	ldi	r25, 0x25	; 37
    4a34:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4a38:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4a3c:	80 93 6b 09 	sts	0x096B, r24	; 0x80096b <sg_u8PCMSK0>
    4a40:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4a44:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8PCMSK1>
    4a48:	ff cf       	rjmp	.-2      	; 0x4a48 <__vector_5+0x22>

Disassembly of section .text.__vector_6:

00004a4a <__vector_6>:
	while (1);
}

ISR(PSC_EC_vect, ISR_BLOCK)
{
    4a4a:	1f 92       	push	r1
    4a4c:	0f 92       	push	r0
    4a4e:	0f b6       	in	r0, 0x3f	; 63
    4a50:	0f 92       	push	r0
    4a52:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) PSC_EC_vect;
    4a54:	85 e2       	ldi	r24, 0x25	; 37
    4a56:	95 e2       	ldi	r25, 0x25	; 37
    4a58:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4a5c:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4a60:	80 93 6b 09 	sts	0x096B, r24	; 0x80096b <sg_u8PCMSK0>
    4a64:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4a68:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8PCMSK1>
    4a6c:	ff cf       	rjmp	.-2      	; 0x4a6c <__vector_6+0x22>

Disassembly of section .text.__vector_22:

00004a6e <__vector_22>:
	while (1);
}

ISR(PCINT0_vect, ISR_BLOCK)
{
    4a6e:	1f 92       	push	r1
    4a70:	0f 92       	push	r0
    4a72:	0f b6       	in	r0, 0x3f	; 63
    4a74:	0f 92       	push	r0
    4a76:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) PCINT0_vect;
    4a78:	87 e3       	ldi	r24, 0x37	; 55
    4a7a:	95 e2       	ldi	r25, 0x25	; 37
    4a7c:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4a80:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4a84:	80 93 6b 09 	sts	0x096B, r24	; 0x80096b <sg_u8PCMSK0>
    4a88:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4a8c:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8PCMSK1>
    4a90:	ff cf       	rjmp	.-2      	; 0x4a90 <__vector_22+0x22>

Disassembly of section .text.__vector_9:

00004a92 <__vector_9>:
// 	while (1);
// }
*/

ISR(INT2_vect, ISR_BLOCK)
{
    4a92:	1f 92       	push	r1
    4a94:	0f 92       	push	r0
    4a96:	0f b6       	in	r0, 0x3f	; 63
    4a98:	0f 92       	push	r0
    4a9a:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) INT2_vect;
    4a9c:	89 e4       	ldi	r24, 0x49	; 73
    4a9e:	95 e2       	ldi	r25, 0x25	; 37
    4aa0:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4aa4:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4aa8:	80 93 6b 09 	sts	0x096B, r24	; 0x80096b <sg_u8PCMSK0>
    4aac:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4ab0:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8PCMSK1>
    4ab4:	ff cf       	rjmp	.-2      	; 0x4ab4 <__vector_9+0x22>

Disassembly of section .text.__vector_11:

00004ab6 <__vector_11>:
// 	while (1);
// }


ISR(TIMER1_CAPT_vect, ISR_BLOCK)
{
    4ab6:	1f 92       	push	r1
    4ab8:	0f 92       	push	r0
    4aba:	0f b6       	in	r0, 0x3f	; 63
    4abc:	0f 92       	push	r0
    4abe:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) TIMER1_CAPT_vect;
    4ac0:	8b e5       	ldi	r24, 0x5B	; 91
    4ac2:	95 e2       	ldi	r25, 0x25	; 37
    4ac4:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4ac8:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4acc:	80 93 6b 09 	sts	0x096B, r24	; 0x80096b <sg_u8PCMSK0>
    4ad0:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4ad4:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8PCMSK1>
    4ad8:	ff cf       	rjmp	.-2      	; 0x4ad8 <__vector_11+0x22>

Disassembly of section .text.__vector_13:

00004ada <__vector_13>:
// }



ISR(TIMER1_COMPB_vect, ISR_BLOCK)
{
    4ada:	1f 92       	push	r1
    4adc:	0f 92       	push	r0
    4ade:	0f b6       	in	r0, 0x3f	; 63
    4ae0:	0f 92       	push	r0
    4ae2:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) TIMER1_COMPB_vect;
    4ae4:	8d e6       	ldi	r24, 0x6D	; 109
    4ae6:	95 e2       	ldi	r25, 0x25	; 37
    4ae8:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4aec:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4af0:	80 93 6b 09 	sts	0x096B, r24	; 0x80096b <sg_u8PCMSK0>
    4af4:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4af8:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8PCMSK1>
    4afc:	ff cf       	rjmp	.-2      	; 0x4afc <__vector_13+0x22>

Disassembly of section .text.__vector_14:

00004afe <__vector_14>:
	while (1);
}


ISR(TIMER1_OVF_vect, ISR_BLOCK)
{
    4afe:	1f 92       	push	r1
    4b00:	0f 92       	push	r0
    4b02:	0f b6       	in	r0, 0x3f	; 63
    4b04:	0f 92       	push	r0
    4b06:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) TIMER1_OVF_vect;
    4b08:	8f e7       	ldi	r24, 0x7F	; 127
    4b0a:	95 e2       	ldi	r25, 0x25	; 37
    4b0c:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4b10:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4b14:	80 93 6b 09 	sts	0x096B, r24	; 0x80096b <sg_u8PCMSK0>
    4b18:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4b1c:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8PCMSK1>
    4b20:	ff cf       	rjmp	.-2      	; 0x4b20 <__vector_14+0x22>

Disassembly of section .text.__vector_17:

00004b22 <__vector_17>:
	while (1);
}

ISR(TIMER0_OVF_vect, ISR_BLOCK)
{
    4b22:	1f 92       	push	r1
    4b24:	0f 92       	push	r0
    4b26:	0f b6       	in	r0, 0x3f	; 63
    4b28:	0f 92       	push	r0
    4b2a:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) TIMER0_OVF_vect;
    4b2c:	81 e9       	ldi	r24, 0x91	; 145
    4b2e:	95 e2       	ldi	r25, 0x25	; 37
    4b30:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4b34:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4b38:	80 93 6b 09 	sts	0x096B, r24	; 0x80096b <sg_u8PCMSK0>
    4b3c:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4b40:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8PCMSK1>
    4b44:	ff cf       	rjmp	.-2      	; 0x4b44 <__vector_17+0x22>

Disassembly of section .text.__vector_19:

00004b46 <__vector_19>:
	while (1);
}

ISR(CAN_TOVF_vect, ISR_BLOCK)
{
    4b46:	1f 92       	push	r1
    4b48:	0f 92       	push	r0
    4b4a:	0f b6       	in	r0, 0x3f	; 63
    4b4c:	0f 92       	push	r0
    4b4e:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) CAN_TOVF_vect;
    4b50:	83 ea       	ldi	r24, 0xA3	; 163
    4b52:	95 e2       	ldi	r25, 0x25	; 37
    4b54:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4b58:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4b5c:	80 93 6b 09 	sts	0x096B, r24	; 0x80096b <sg_u8PCMSK0>
    4b60:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4b64:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8PCMSK1>
    4b68:	ff cf       	rjmp	.-2      	; 0x4b68 <__vector_19+0x22>

Disassembly of section .text.__vector_21:

00004b6a <__vector_21>:
	while (1);
}

ISR(LIN_ERR_vect, ISR_BLOCK)
{
    4b6a:	1f 92       	push	r1
    4b6c:	0f 92       	push	r0
    4b6e:	0f b6       	in	r0, 0x3f	; 63
    4b70:	0f 92       	push	r0
    4b72:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) LIN_ERR_vect;
    4b74:	85 eb       	ldi	r24, 0xB5	; 181
    4b76:	95 e2       	ldi	r25, 0x25	; 37
    4b78:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4b7c:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4b80:	80 93 6b 09 	sts	0x096B, r24	; 0x80096b <sg_u8PCMSK0>
    4b84:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4b88:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8PCMSK1>
    4b8c:	ff cf       	rjmp	.-2      	; 0x4b8c <__vector_21+0x22>

Disassembly of section .text.__vector_25:

00004b8e <__vector_25>:
// 	while (1);
// }


ISR(PCINT3_vect, ISR_BLOCK)
{
    4b8e:	1f 92       	push	r1
    4b90:	0f 92       	push	r0
    4b92:	0f b6       	in	r0, 0x3f	; 63
    4b94:	0f 92       	push	r0
    4b96:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) PCINT3_vect;
    4b98:	87 ec       	ldi	r24, 0xC7	; 199
    4b9a:	95 e2       	ldi	r25, 0x25	; 37
    4b9c:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4ba0:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4ba4:	80 93 6b 09 	sts	0x096B, r24	; 0x80096b <sg_u8PCMSK0>
    4ba8:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4bac:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8PCMSK1>
    4bb0:	ff cf       	rjmp	.-2      	; 0x4bb0 <__vector_25+0x22>

Disassembly of section .text.__vector_26:

00004bb2 <__vector_26>:
	while (1);
}


ISR(SPI_STC_vect, ISR_BLOCK)
{
    4bb2:	1f 92       	push	r1
    4bb4:	0f 92       	push	r0
    4bb6:	0f b6       	in	r0, 0x3f	; 63
    4bb8:	0f 92       	push	r0
    4bba:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) SPI_STC_vect;
    4bbc:	89 ed       	ldi	r24, 0xD9	; 217
    4bbe:	95 e2       	ldi	r25, 0x25	; 37
    4bc0:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4bc4:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4bc8:	80 93 6b 09 	sts	0x096B, r24	; 0x80096b <sg_u8PCMSK0>
    4bcc:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4bd0:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8PCMSK1>
    4bd4:	ff cf       	rjmp	.-2      	; 0x4bd4 <__vector_26+0x22>

Disassembly of section .text.__vector_29:

00004bd6 <__vector_29>:
	while (1);
}

ISR(EE_READY_vect, ISR_BLOCK)
{
    4bd6:	1f 92       	push	r1
    4bd8:	0f 92       	push	r0
    4bda:	0f b6       	in	r0, 0x3f	; 63
    4bdc:	0f 92       	push	r0
    4bde:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) EE_READY_vect;
    4be0:	8b ee       	ldi	r24, 0xEB	; 235
    4be2:	95 e2       	ldi	r25, 0x25	; 37
    4be4:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4be8:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4bec:	80 93 6b 09 	sts	0x096B, r24	; 0x80096b <sg_u8PCMSK0>
    4bf0:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4bf4:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8PCMSK1>
    4bf8:	ff cf       	rjmp	.-2      	; 0x4bf8 <__vector_29+0x22>

Disassembly of section .text.__vector_30:

00004bfa <__vector_30>:
	while (1);
}

ISR(SPM_READY_vect, ISR_BLOCK)
{
    4bfa:	1f 92       	push	r1
    4bfc:	0f 92       	push	r0
    4bfe:	0f b6       	in	r0, 0x3f	; 63
    4c00:	0f 92       	push	r0
    4c02:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) SPM_READY_vect;
    4c04:	8d ef       	ldi	r24, 0xFD	; 253
    4c06:	95 e2       	ldi	r25, 0x25	; 37
    4c08:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4c0c:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4c10:	80 93 6b 09 	sts	0x096B, r24	; 0x80096b <sg_u8PCMSK0>
    4c14:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4c18:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8PCMSK1>
    4c1c:	ff cf       	rjmp	.-2      	; 0x4c1c <__vector_30+0x22>

Disassembly of section .text.CurrentThresholdsGet:

0000367c <CurrentThresholdsGet>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    367c:	0f 93       	push	r16
    367e:	1f 93       	push	r17
    3680:	cf 93       	push	r28
    3682:	df 93       	push	r29
    3684:	8c 01       	movw	r16, r24
    3686:	eb 01       	movw	r28, r22
    3688:	89 2b       	or	r24, r25
    368a:	f9 f0       	breq	.+62     	; 0x36ca <CurrentThresholdsGet+0x4e>
    368c:	87 e0       	ldi	r24, 0x07	; 7
    368e:	90 e0       	ldi	r25, 0x00	; 0
    3690:	0e 94 f2 26 	call	0x4de4	; 0x4de4 <EEPROMRead>
    3694:	90 e0       	ldi	r25, 0x00	; 0
    3696:	f8 01       	movw	r30, r16
    3698:	91 83       	std	Z+1, r25	; 0x01
    369a:	80 83       	st	Z, r24
    369c:	88 e0       	ldi	r24, 0x08	; 8
    369e:	90 e0       	ldi	r25, 0x00	; 0
    36a0:	0e 94 f2 26 	call	0x4de4	; 0x4de4 <EEPROMRead>
    36a4:	90 e0       	ldi	r25, 0x00	; 0
    36a6:	98 2f       	mov	r25, r24
    36a8:	88 27       	eor	r24, r24
    36aa:	f8 01       	movw	r30, r16
    36ac:	20 81       	ld	r18, Z
    36ae:	31 81       	ldd	r19, Z+1	; 0x01
    36b0:	82 2b       	or	r24, r18
    36b2:	93 2b       	or	r25, r19
    36b4:	91 83       	std	Z+1, r25	; 0x01
    36b6:	80 83       	st	Z, r24
    36b8:	01 97       	sbiw	r24, 0x01	; 1
    36ba:	8e 3f       	cpi	r24, 0xFE	; 254
    36bc:	9f 4f       	sbci	r25, 0xFF	; 255
    36be:	28 f0       	brcs	.+10     	; 0x36ca <CurrentThresholdsGet+0x4e>
    36c0:	8c ec       	ldi	r24, 0xCC	; 204
    36c2:	97 e7       	ldi	r25, 0x77	; 119
    36c4:	f8 01       	movw	r30, r16
    36c6:	91 83       	std	Z+1, r25	; 0x01
    36c8:	80 83       	st	Z, r24
    36ca:	20 97       	sbiw	r28, 0x00	; 0
    36cc:	e1 f0       	breq	.+56     	; 0x3706 <CurrentThresholdsGet+0x8a>
    36ce:	85 e0       	ldi	r24, 0x05	; 5
    36d0:	90 e0       	ldi	r25, 0x00	; 0
    36d2:	0e 94 f2 26 	call	0x4de4	; 0x4de4 <EEPROMRead>
    36d6:	90 e0       	ldi	r25, 0x00	; 0
    36d8:	99 83       	std	Y+1, r25	; 0x01
    36da:	88 83       	st	Y, r24
    36dc:	86 e0       	ldi	r24, 0x06	; 6
    36de:	90 e0       	ldi	r25, 0x00	; 0
    36e0:	0e 94 f2 26 	call	0x4de4	; 0x4de4 <EEPROMRead>
    36e4:	90 e0       	ldi	r25, 0x00	; 0
    36e6:	98 2f       	mov	r25, r24
    36e8:	88 27       	eor	r24, r24
    36ea:	28 81       	ld	r18, Y
    36ec:	39 81       	ldd	r19, Y+1	; 0x01
    36ee:	82 2b       	or	r24, r18
    36f0:	93 2b       	or	r25, r19
    36f2:	99 83       	std	Y+1, r25	; 0x01
    36f4:	88 83       	st	Y, r24
    36f6:	01 97       	sbiw	r24, 0x01	; 1
    36f8:	8e 3f       	cpi	r24, 0xFE	; 254
    36fa:	9f 4f       	sbci	r25, 0xFF	; 255
    36fc:	20 f0       	brcs	.+8      	; 0x3706 <CurrentThresholdsGet+0x8a>
    36fe:	84 ef       	ldi	r24, 0xF4	; 244
    3700:	91 e8       	ldi	r25, 0x81	; 129
    3702:	99 83       	std	Y+1, r25	; 0x01
    3704:	88 83       	st	Y, r24
    3706:	df 91       	pop	r29
    3708:	cf 91       	pop	r28
    370a:	1f 91       	pop	r17
    370c:	0f 91       	pop	r16
    370e:	08 95       	ret

Disassembly of section .text.CANReceiveCallback:

000011d0 <CANReceiveCallback>:
    11d0:	cf 92       	push	r12
    11d2:	df 92       	push	r13
    11d4:	ef 92       	push	r14
    11d6:	ff 92       	push	r15
    11d8:	cf 93       	push	r28
    11da:	fb 01       	movw	r30, r22
    11dc:	90 91 21 03 	lds	r25, 0x0321	; 0x800321 <sg_bModuleRegistered>
    11e0:	10 92 72 09 	sts	0x0972, r1	; 0x800972 <sg_u8TicksSinceLastPackControllerMessage>
    11e4:	82 31       	cpi	r24, 0x12	; 18
    11e6:	29 f4       	brne	.+10     	; 0x11f2 <CANReceiveCallback+0x22>
    11e8:	80 81       	ld	r24, Z
    11ea:	8f 70       	andi	r24, 0x0F	; 15
    11ec:	0e 94 bc 26 	call	0x4d78	; 0x4d78 <ModuleControllerStateSetMax>
    11f0:	35 c1       	rjmp	.+618    	; 0x145c <CANReceiveCallback+0x28c>
    11f2:	8f 30       	cpi	r24, 0x0F	; 15
    11f4:	a9 f4       	brne	.+42     	; 0x1220 <CANReceiveCallback+0x50>
    11f6:	8a ed       	ldi	r24, 0xDA	; 218
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	a0 e0       	ldi	r26, 0x00	; 0
    11fc:	af 93       	push	r26
    11fe:	9f 93       	push	r25
    1200:	8f 93       	push	r24
    1202:	0e 94 3f 27 	call	0x4e7e	; 0x4e7e <DebugOut>
    1206:	10 92 27 03 	sts	0x0327, r1	; 0x800327 <sg_u8ModuleRegistrationID>
    120a:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <sg_bModuleRegistered>
    120e:	10 92 76 09 	sts	0x0976, r1	; 0x800976 <sg_bIgnoreStatusRequests>
    1212:	80 e0       	ldi	r24, 0x00	; 0
    1214:	0e 94 6c 27 	call	0x4ed8	; 0x4ed8 <ModuleControllerStateSet>
    1218:	0f 90       	pop	r0
    121a:	0f 90       	pop	r0
    121c:	0f 90       	pop	r0
    121e:	1e c1       	rjmp	.+572    	; 0x145c <CANReceiveCallback+0x28c>
    1220:	80 31       	cpi	r24, 0x10	; 16
    1222:	21 f4       	brne	.+8      	; 0x122c <CANReceiveCallback+0x5c>
    1224:	80 e0       	ldi	r24, 0x00	; 0
    1226:	0e 94 6c 27 	call	0x4ed8	; 0x4ed8 <ModuleControllerStateSet>
    122a:	18 c1       	rjmp	.+560    	; 0x145c <CANReceiveCallback+0x28c>
    122c:	81 31       	cpi	r24, 0x11	; 17
    122e:	59 f4       	brne	.+22     	; 0x1246 <CANReceiveCallback+0x76>
    1230:	20 81       	ld	r18, Z
    1232:	31 81       	ldd	r19, Z+1	; 0x01
    1234:	42 81       	ldd	r20, Z+2	; 0x02
    1236:	53 81       	ldd	r21, Z+3	; 0x03
    1238:	64 81       	ldd	r22, Z+4	; 0x04
    123a:	75 81       	ldd	r23, Z+5	; 0x05
    123c:	86 81       	ldd	r24, Z+6	; 0x06
    123e:	97 81       	ldd	r25, Z+7	; 0x07
    1240:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <RTCSetTime>
    1244:	0b c1       	rjmp	.+534    	; 0x145c <CANReceiveCallback+0x28c>
    1246:	8d 30       	cpi	r24, 0x0D	; 13
    1248:	09 f0       	breq	.+2      	; 0x124c <CANReceiveCallback+0x7c>
    124a:	4f c0       	rjmp	.+158    	; 0x12ea <CANReceiveCallback+0x11a>
    124c:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <sg_bModuleRegistered>
    1250:	81 11       	cpse	r24, r1
    1252:	2f c0       	rjmp	.+94     	; 0x12b2 <CANReceiveCallback+0xe2>
    1254:	80 91 78 09 	lds	r24, 0x0978	; 0x800978 <sg_bAnnouncementPending>
    1258:	81 11       	cpse	r24, r1
    125a:	2b c0       	rjmp	.+86     	; 0x12b2 <CANReceiveCallback+0xe2>
    125c:	c0 90 1e 01 	lds	r12, 0x011E	; 0x80011e <sg_sFrame+0xe>
    1260:	d0 90 1f 01 	lds	r13, 0x011F	; 0x80011f <sg_sFrame+0xf>
    1264:	e0 90 20 01 	lds	r14, 0x0120	; 0x800120 <sg_sFrame+0x10>
    1268:	f0 90 21 01 	lds	r15, 0x0121	; 0x800121 <sg_sFrame+0x11>
    126c:	1f 92       	push	r1
    126e:	cf 92       	push	r12
    1270:	85 e0       	ldi	r24, 0x05	; 5
    1272:	91 e0       	ldi	r25, 0x01	; 1
    1274:	a0 e0       	ldi	r26, 0x00	; 0
    1276:	af 93       	push	r26
    1278:	9f 93       	push	r25
    127a:	8f 93       	push	r24
    127c:	0e 94 3f 27 	call	0x4e7e	; 0x4e7e <DebugOut>
    1280:	8d ec       	ldi	r24, 0xCD	; 205
    1282:	c8 9e       	mul	r12, r24
    1284:	c1 2c       	mov	r12, r1
    1286:	11 24       	eor	r1, r1
    1288:	c6 94       	lsr	r12
    128a:	c6 94       	lsr	r12
    128c:	c6 94       	lsr	r12
    128e:	c0 92 77 09 	sts	0x0977, r12	; 0x800977 <sg_u8AnnouncementDelayTicks>
    1292:	80 91 77 09 	lds	r24, 0x0977	; 0x800977 <sg_u8AnnouncementDelayTicks>
    1296:	0f 90       	pop	r0
    1298:	0f 90       	pop	r0
    129a:	0f 90       	pop	r0
    129c:	0f 90       	pop	r0
    129e:	0f 90       	pop	r0
    12a0:	81 11       	cpse	r24, r1
    12a2:	03 c0       	rjmp	.+6      	; 0x12aa <CANReceiveCallback+0xda>
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	80 93 77 09 	sts	0x0977, r24	; 0x800977 <sg_u8AnnouncementDelayTicks>
    12aa:	81 e0       	ldi	r24, 0x01	; 1
    12ac:	80 93 78 09 	sts	0x0978, r24	; 0x800978 <sg_bAnnouncementPending>
    12b0:	d5 c0       	rjmp	.+426    	; 0x145c <CANReceiveCallback+0x28c>
    12b2:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <sg_bModuleRegistered>
    12b6:	88 23       	and	r24, r24
    12b8:	61 f0       	breq	.+24     	; 0x12d2 <CANReceiveCallback+0x102>
    12ba:	88 e4       	ldi	r24, 0x48	; 72
    12bc:	91 e0       	ldi	r25, 0x01	; 1
    12be:	a0 e0       	ldi	r26, 0x00	; 0
    12c0:	af 93       	push	r26
    12c2:	9f 93       	push	r25
    12c4:	8f 93       	push	r24
    12c6:	0e 94 3f 27 	call	0x4e7e	; 0x4e7e <DebugOut>
    12ca:	0f 90       	pop	r0
    12cc:	0f 90       	pop	r0
    12ce:	0f 90       	pop	r0
    12d0:	c5 c0       	rjmp	.+394    	; 0x145c <CANReceiveCallback+0x28c>
    12d2:	86 e7       	ldi	r24, 0x76	; 118
    12d4:	91 e0       	ldi	r25, 0x01	; 1
    12d6:	a0 e0       	ldi	r26, 0x00	; 0
    12d8:	af 93       	push	r26
    12da:	9f 93       	push	r25
    12dc:	8f 93       	push	r24
    12de:	0e 94 3f 27 	call	0x4e7e	; 0x4e7e <DebugOut>
    12e2:	0f 90       	pop	r0
    12e4:	0f 90       	pop	r0
    12e6:	0f 90       	pop	r0
    12e8:	b9 c0       	rjmp	.+370    	; 0x145c <CANReceiveCallback+0x28c>
    12ea:	89 30       	cpi	r24, 0x09	; 9
    12ec:	09 f0       	breq	.+2      	; 0x12f0 <CANReceiveCallback+0x120>
    12ee:	41 c0       	rjmp	.+130    	; 0x1372 <CANReceiveCallback+0x1a2>
    12f0:	48 30       	cpi	r20, 0x08	; 8
    12f2:	09 f0       	breq	.+2      	; 0x12f6 <CANReceiveCallback+0x126>
    12f4:	b3 c0       	rjmp	.+358    	; 0x145c <CANReceiveCallback+0x28c>
    12f6:	f0 80       	ld	r15, Z
    12f8:	82 81       	ldd	r24, Z+2	; 0x02
    12fa:	82 30       	cpi	r24, 0x02	; 2
    12fc:	09 f0       	breq	.+2      	; 0x1300 <CANReceiveCallback+0x130>
    12fe:	ae c0       	rjmp	.+348    	; 0x145c <CANReceiveCallback+0x28c>
    1300:	83 81       	ldd	r24, Z+3	; 0x03
    1302:	83 30       	cpi	r24, 0x03	; 3
    1304:	09 f0       	breq	.+2      	; 0x1308 <CANReceiveCallback+0x138>
    1306:	aa c0       	rjmp	.+340    	; 0x145c <CANReceiveCallback+0x28c>
    1308:	40 91 1e 01 	lds	r20, 0x011E	; 0x80011e <sg_sFrame+0xe>
    130c:	50 91 1f 01 	lds	r21, 0x011F	; 0x80011f <sg_sFrame+0xf>
    1310:	60 91 20 01 	lds	r22, 0x0120	; 0x800120 <sg_sFrame+0x10>
    1314:	70 91 21 01 	lds	r23, 0x0121	; 0x800121 <sg_sFrame+0x11>
    1318:	84 81       	ldd	r24, Z+4	; 0x04
    131a:	95 81       	ldd	r25, Z+5	; 0x05
    131c:	a6 81       	ldd	r26, Z+6	; 0x06
    131e:	b7 81       	ldd	r27, Z+7	; 0x07
    1320:	48 17       	cp	r20, r24
    1322:	59 07       	cpc	r21, r25
    1324:	6a 07       	cpc	r22, r26
    1326:	7b 07       	cpc	r23, r27
    1328:	09 f0       	breq	.+2      	; 0x132c <CANReceiveCallback+0x15c>
    132a:	98 c0       	rjmp	.+304    	; 0x145c <CANReceiveCallback+0x28c>
    132c:	10 92 72 09 	sts	0x0972, r1	; 0x800972 <sg_u8TicksSinceLastPackControllerMessage>
    1330:	f0 92 27 03 	sts	0x0327, r15	; 0x800327 <sg_u8ModuleRegistrationID>
    1334:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <SendModuleControllerStatus>
    1338:	c1 e0       	ldi	r28, 0x01	; 1
    133a:	c0 93 1c 03 	sts	0x031C, r28	; 0x80031c <sg_bSendHardwareDetail>
    133e:	c0 93 21 03 	sts	0x0321, r28	; 0x800321 <sg_bModuleRegistered>
    1342:	10 92 76 09 	sts	0x0976, r1	; 0x800976 <sg_bIgnoreStatusRequests>
    1346:	1f 92       	push	r1
    1348:	ff 92       	push	r15
    134a:	8e e9       	ldi	r24, 0x9E	; 158
    134c:	91 e0       	ldi	r25, 0x01	; 1
    134e:	a0 e0       	ldi	r26, 0x00	; 0
    1350:	af 93       	push	r26
    1352:	9f 93       	push	r25
    1354:	8f 93       	push	r24
    1356:	0e 94 3f 27 	call	0x4e7e	; 0x4e7e <DebugOut>
    135a:	10 92 78 09 	sts	0x0978, r1	; 0x800978 <sg_bAnnouncementPending>
    135e:	10 92 77 09 	sts	0x0977, r1	; 0x800977 <sg_u8AnnouncementDelayTicks>
    1362:	c0 93 20 03 	sts	0x0320, r28	; 0x800320 <sg_bSendTimeRequest>
    1366:	0f 90       	pop	r0
    1368:	0f 90       	pop	r0
    136a:	0f 90       	pop	r0
    136c:	0f 90       	pop	r0
    136e:	0f 90       	pop	r0
    1370:	75 c0       	rjmp	.+234    	; 0x145c <CANReceiveCallback+0x28c>
    1372:	44 23       	and	r20, r20
    1374:	09 f4       	brne	.+2      	; 0x1378 <CANReceiveCallback+0x1a8>
    1376:	72 c0       	rjmp	.+228    	; 0x145c <CANReceiveCallback+0x28c>
    1378:	20 81       	ld	r18, Z
    137a:	91 11       	cpse	r25, r1
    137c:	08 c0       	rjmp	.+16     	; 0x138e <CANReceiveCallback+0x1be>
    137e:	8a 30       	cpi	r24, 0x0A	; 10
    1380:	09 f0       	breq	.+2      	; 0x1384 <CANReceiveCallback+0x1b4>
    1382:	6c c0       	rjmp	.+216    	; 0x145c <CANReceiveCallback+0x28c>
    1384:	90 91 21 03 	lds	r25, 0x0321	; 0x800321 <sg_bModuleRegistered>
    1388:	99 23       	and	r25, r25
    138a:	09 f4       	brne	.+2      	; 0x138e <CANReceiveCallback+0x1be>
    138c:	67 c0       	rjmp	.+206    	; 0x145c <CANReceiveCallback+0x28c>
    138e:	90 91 27 03 	lds	r25, 0x0327	; 0x800327 <sg_u8ModuleRegistrationID>
    1392:	29 13       	cpse	r18, r25
    1394:	63 c0       	rjmp	.+198    	; 0x145c <CANReceiveCallback+0x28c>
    1396:	8a 30       	cpi	r24, 0x0A	; 10
    1398:	a9 f4       	brne	.+42     	; 0x13c4 <CANReceiveCallback+0x1f4>
    139a:	41 30       	cpi	r20, 0x01	; 1
    139c:	09 f0       	breq	.+2      	; 0x13a0 <CANReceiveCallback+0x1d0>
    139e:	5e c0       	rjmp	.+188    	; 0x145c <CANReceiveCallback+0x28c>
    13a0:	80 91 76 09 	lds	r24, 0x0976	; 0x800976 <sg_bIgnoreStatusRequests>
    13a4:	81 11       	cpse	r24, r1
    13a6:	5a c0       	rjmp	.+180    	; 0x145c <CANReceiveCallback+0x28c>
    13a8:	89 ed       	ldi	r24, 0xD9	; 217
    13aa:	91 e0       	ldi	r25, 0x01	; 1
    13ac:	a0 e0       	ldi	r26, 0x00	; 0
    13ae:	af 93       	push	r26
    13b0:	9f 93       	push	r25
    13b2:	8f 93       	push	r24
    13b4:	0e 94 3f 27 	call	0x4e7e	; 0x4e7e <DebugOut>
    13b8:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <SendModuleControllerStatus>
    13bc:	0f 90       	pop	r0
    13be:	0f 90       	pop	r0
    13c0:	0f 90       	pop	r0
    13c2:	4c c0       	rjmp	.+152    	; 0x145c <CANReceiveCallback+0x28c>
    13c4:	8b 30       	cpi	r24, 0x0B	; 11
    13c6:	f9 f4       	brne	.+62     	; 0x1406 <CANReceiveCallback+0x236>
    13c8:	43 30       	cpi	r20, 0x03	; 3
    13ca:	09 f0       	breq	.+2      	; 0x13ce <CANReceiveCallback+0x1fe>
    13cc:	47 c0       	rjmp	.+142    	; 0x145c <CANReceiveCallback+0x28c>
    13ce:	80 91 1d 03 	lds	r24, 0x031D	; 0x80031d <sg_bSendCellStatus>
    13d2:	81 11       	cpse	r24, r1
    13d4:	43 c0       	rjmp	.+134    	; 0x145c <CANReceiveCallback+0x28c>
    13d6:	81 81       	ldd	r24, Z+1	; 0x01
    13d8:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <sg_sFrame+0x15>
    13dc:	89 17       	cp	r24, r25
    13de:	f0 f5       	brcc	.+124    	; 0x145c <CANReceiveCallback+0x28c>
    13e0:	80 93 23 03 	sts	0x0323, r24	; 0x800323 <sg_u8CellStatus>
    13e4:	90 91 23 03 	lds	r25, 0x0323	; 0x800323 <sg_u8CellStatus>
    13e8:	9f 5f       	subi	r25, 0xFF	; 255
    13ea:	90 93 24 03 	sts	0x0324, r25	; 0x800324 <sg_u8CellStatusTarget>
    13ee:	8f 3f       	cpi	r24, 0xFF	; 255
    13f0:	31 f4       	brne	.+12     	; 0x13fe <CANReceiveCallback+0x22e>
    13f2:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <sg_sFrame+0x15>
    13f6:	80 93 24 03 	sts	0x0324, r24	; 0x800324 <sg_u8CellStatusTarget>
    13fa:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <sg_u8CellStatus>
    13fe:	81 e0       	ldi	r24, 0x01	; 1
    1400:	80 93 1d 03 	sts	0x031D, r24	; 0x80031d <sg_bSendCellStatus>
    1404:	2b c0       	rjmp	.+86     	; 0x145c <CANReceiveCallback+0x28c>
    1406:	8c 30       	cpi	r24, 0x0C	; 12
    1408:	49 f4       	brne	.+18     	; 0x141c <CANReceiveCallback+0x24c>
    140a:	10 92 72 09 	sts	0x0972, r1	; 0x800972 <sg_u8TicksSinceLastPackControllerMessage>
    140e:	42 30       	cpi	r20, 0x02	; 2
    1410:	29 f5       	brne	.+74     	; 0x145c <CANReceiveCallback+0x28c>
    1412:	81 81       	ldd	r24, Z+1	; 0x01
    1414:	8f 70       	andi	r24, 0x0F	; 15
    1416:	0e 94 6c 27 	call	0x4ed8	; 0x4ed8 <ModuleControllerStateSet>
    141a:	20 c0       	rjmp	.+64     	; 0x145c <CANReceiveCallback+0x28c>
    141c:	85 30       	cpi	r24, 0x05	; 5
    141e:	21 f4       	brne	.+8      	; 0x1428 <CANReceiveCallback+0x258>
    1420:	81 e0       	ldi	r24, 0x01	; 1
    1422:	80 93 1c 03 	sts	0x031C, r24	; 0x80031c <sg_bSendHardwareDetail>
    1426:	1a c0       	rjmp	.+52     	; 0x145c <CANReceiveCallback+0x28c>
    1428:	8e 30       	cpi	r24, 0x0E	; 14
    142a:	c1 f4       	brne	.+48     	; 0x145c <CANReceiveCallback+0x28c>
    142c:	1f 92       	push	r1
    142e:	2f 93       	push	r18
    1430:	8e ef       	ldi	r24, 0xFE	; 254
    1432:	91 e0       	ldi	r25, 0x01	; 1
    1434:	a0 e0       	ldi	r26, 0x00	; 0
    1436:	af 93       	push	r26
    1438:	9f 93       	push	r25
    143a:	8f 93       	push	r24
    143c:	0e 94 3f 27 	call	0x4e7e	; 0x4e7e <DebugOut>
    1440:	10 92 27 03 	sts	0x0327, r1	; 0x800327 <sg_u8ModuleRegistrationID>
    1444:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <sg_bModuleRegistered>
    1448:	10 92 76 09 	sts	0x0976, r1	; 0x800976 <sg_bIgnoreStatusRequests>
    144c:	80 e0       	ldi	r24, 0x00	; 0
    144e:	0e 94 6c 27 	call	0x4ed8	; 0x4ed8 <ModuleControllerStateSet>
    1452:	0f 90       	pop	r0
    1454:	0f 90       	pop	r0
    1456:	0f 90       	pop	r0
    1458:	0f 90       	pop	r0
    145a:	0f 90       	pop	r0
    145c:	cf 91       	pop	r28
    145e:	ff 90       	pop	r15
    1460:	ef 90       	pop	r14
    1462:	df 90       	pop	r13
    1464:	cf 90       	pop	r12
    1466:	08 95       	ret

Disassembly of section .text.ControllerStatusMessagesSend:

00000810 <ControllerStatusMessagesSend>:
 810:	cf 92       	push	r12
 812:	df 92       	push	r13
 814:	ef 92       	push	r14
 816:	ff 92       	push	r15
 818:	0f 93       	push	r16
 81a:	1f 93       	push	r17
 81c:	cf 93       	push	r28
 81e:	df 93       	push	r29
 820:	00 d0       	rcall	.+0      	; 0x822 <ControllerStatusMessagesSend+0x12>
 822:	00 d0       	rcall	.+0      	; 0x824 <ControllerStatusMessagesSend+0x14>
 824:	cd b7       	in	r28, 0x3d	; 61
 826:	de b7       	in	r29, 0x3e	; 62
 828:	8c 01       	movw	r16, r24
 82a:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <sg_bSendTimeRequest>
 82e:	88 23       	and	r24, r24
 830:	69 f0       	breq	.+26     	; 0x84c <ControllerStatusMessagesSend+0x3c>
 832:	88 e0       	ldi	r24, 0x08	; 8
 834:	d8 01       	movw	r26, r16
 836:	1d 92       	st	X+, r1
 838:	8a 95       	dec	r24
 83a:	e9 f7       	brne	.-6      	; 0x836 <ControllerStatusMessagesSend+0x26>
 83c:	48 e0       	ldi	r20, 0x08	; 8
 83e:	b8 01       	movw	r22, r16
 840:	88 e0       	ldi	r24, 0x08	; 8
 842:	0e 94 b1 26 	call	0x4d62	; 0x4d62 <CANSendMessage>
 846:	81 11       	cpse	r24, r1
 848:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <sg_bSendTimeRequest>
 84c:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <sg_bSendModuleControllerStatus>
 850:	88 23       	and	r24, r24
 852:	09 f4       	brne	.+2      	; 0x856 <ControllerStatusMessagesSend+0x46>
 854:	06 c1       	rjmp	.+524    	; 0xa62 <ControllerStatusMessagesSend+0x252>
 856:	80 91 6e 09 	lds	r24, 0x096E	; 0x80096e <sg_u8ControllerStatusMsgCount>
 85a:	81 11       	cpse	r24, r1
 85c:	80 c0       	rjmp	.+256    	; 0x95e <ControllerStatusMessagesSend+0x14e>
 85e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
 862:	8f 70       	andi	r24, 0x0F	; 15
 864:	f8 01       	movw	r30, r16
 866:	80 83       	st	Z, r24
 868:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <sg_u8SOC>
 86c:	81 83       	std	Z+1, r24	; 0x01
 86e:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <sg_u8SOH>
 872:	82 83       	std	Z+2, r24	; 0x02
 874:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <sg_sFrame+0x15>
 878:	83 83       	std	Z+3, r24	; 0x03
 87a:	84 e0       	ldi	r24, 0x04	; 4
 87c:	34 96       	adiw	r30, 0x04	; 4
 87e:	df 01       	movw	r26, r30
 880:	1d 92       	st	X+, r1
 882:	8a 95       	dec	r24
 884:	e9 f7       	brne	.-6      	; 0x880 <ControllerStatusMessagesSend+0x70>
 886:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <sg_sFrame+0x48>
 88a:	88 23       	and	r24, r24
 88c:	79 f0       	breq	.+30     	; 0x8ac <ControllerStatusMessagesSend+0x9c>
 88e:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <sg_sFrame+0x4b>
 892:	88 23       	and	r24, r24
 894:	71 f0       	breq	.+28     	; 0x8b2 <ControllerStatusMessagesSend+0xa2>
 896:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
 89a:	83 30       	cpi	r24, 0x03	; 3
 89c:	69 f4       	brne	.+26     	; 0x8b8 <ControllerStatusMessagesSend+0xa8>
 89e:	0e 94 4d 13 	call	0x269a	; 0x269a <ModuleCurrentConvertReadings>
 8a2:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <sg_sFrame+0x2f>
 8a6:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <sg_sFrame+0x30>
 8aa:	08 c0       	rjmp	.+16     	; 0x8bc <ControllerStatusMessagesSend+0xac>
 8ac:	80 e0       	ldi	r24, 0x00	; 0
 8ae:	90 e8       	ldi	r25, 0x80	; 128
 8b0:	05 c0       	rjmp	.+10     	; 0x8bc <ControllerStatusMessagesSend+0xac>
 8b2:	80 e0       	ldi	r24, 0x00	; 0
 8b4:	90 e8       	ldi	r25, 0x80	; 128
 8b6:	02 c0       	rjmp	.+4      	; 0x8bc <ControllerStatusMessagesSend+0xac>
 8b8:	80 e0       	ldi	r24, 0x00	; 0
 8ba:	90 e8       	ldi	r25, 0x80	; 128
 8bc:	f8 01       	movw	r30, r16
 8be:	84 83       	std	Z+4, r24	; 0x04
 8c0:	95 83       	std	Z+5, r25	; 0x05
 8c2:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <sg_sFrame+0x45>
 8c6:	88 23       	and	r24, r24
 8c8:	79 f0       	breq	.+30     	; 0x8e8 <ControllerStatusMessagesSend+0xd8>
 8ca:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <sg_sFrame+0x46>
 8ce:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <sg_sFrame+0x47>
 8d2:	4f ef       	ldi	r20, 0xFF	; 255
 8d4:	53 e0       	ldi	r21, 0x03	; 3
 8d6:	60 e0       	ldi	r22, 0x00	; 0
 8d8:	70 e0       	ldi	r23, 0x00	; 0
 8da:	9a 01       	movw	r18, r20
 8dc:	ab 01       	movw	r20, r22
 8de:	28 1b       	sub	r18, r24
 8e0:	39 0b       	sbc	r19, r25
 8e2:	41 09       	sbc	r20, r1
 8e4:	51 09       	sbc	r21, r1
 8e6:	03 c0       	rjmp	.+6      	; 0x8ee <ControllerStatusMessagesSend+0xde>
 8e8:	20 e0       	ldi	r18, 0x00	; 0
 8ea:	30 e0       	ldi	r19, 0x00	; 0
 8ec:	a9 01       	movw	r20, r18
 8ee:	e0 e1       	ldi	r30, 0x10	; 16
 8f0:	f1 e0       	ldi	r31, 0x01	; 1
 8f2:	a5 a1       	ldd	r26, Z+37	; 0x25
 8f4:	b6 a1       	ldd	r27, Z+38	; 0x26
 8f6:	0e 94 2f 27 	call	0x4e5e	; 0x4e5e <__mulshisi3>
 8fa:	dc 01       	movw	r26, r24
 8fc:	cb 01       	movw	r24, r22
 8fe:	68 94       	set
 900:	16 f8       	bld	r1, 6
 902:	b6 95       	lsr	r27
 904:	a7 95       	ror	r26
 906:	97 95       	ror	r25
 908:	87 95       	ror	r24
 90a:	16 94       	lsr	r1
 90c:	d1 f7       	brne	.-12     	; 0x902 <ControllerStatusMessagesSend+0xf2>
 90e:	c5 8c       	ldd	r12, Z+29	; 0x1d
 910:	d6 8c       	ldd	r13, Z+30	; 0x1e
 912:	e7 8c       	ldd	r14, Z+31	; 0x1f
 914:	f0 a0       	ldd	r15, Z+32	; 0x20
 916:	bc 01       	movw	r22, r24
 918:	cd 01       	movw	r24, r26
 91a:	6c 0d       	add	r22, r12
 91c:	7d 1d       	adc	r23, r13
 91e:	8e 1d       	adc	r24, r14
 920:	9f 1d       	adc	r25, r15
 922:	2f e0       	ldi	r18, 0x0F	; 15
 924:	30 e0       	ldi	r19, 0x00	; 0
 926:	40 e0       	ldi	r20, 0x00	; 0
 928:	50 e0       	ldi	r21, 0x00	; 0
 92a:	0e 94 38 22 	call	0x4470	; 0x4470 <__udivmodsi4>
 92e:	20 93 51 01 	sts	0x0151, r18	; 0x800151 <sg_sFrame+0x41>
 932:	30 93 52 01 	sts	0x0152, r19	; 0x800152 <sg_sFrame+0x42>
 936:	40 93 53 01 	sts	0x0153, r20	; 0x800153 <sg_sFrame+0x43>
 93a:	50 93 54 01 	sts	0x0154, r21	; 0x800154 <sg_sFrame+0x44>
 93e:	d8 01       	movw	r26, r16
 940:	16 96       	adiw	r26, 0x06	; 6
 942:	2c 93       	st	X, r18
 944:	16 97       	sbiw	r26, 0x06	; 6
 946:	17 96       	adiw	r26, 0x07	; 7
 948:	3c 93       	st	X, r19
 94a:	48 e0       	ldi	r20, 0x08	; 8
 94c:	b8 01       	movw	r22, r16
 94e:	81 e0       	ldi	r24, 0x01	; 1
 950:	0e 94 b1 26 	call	0x4d62	; 0x4d62 <CANSendMessage>
 954:	88 23       	and	r24, r24
 956:	09 f4       	brne	.+2      	; 0x95a <ControllerStatusMessagesSend+0x14a>
 958:	6b c0       	rjmp	.+214    	; 0xa30 <ControllerStatusMessagesSend+0x220>
 95a:	81 e0       	ldi	r24, 0x01	; 1
 95c:	70 c0       	rjmp	.+224    	; 0xa3e <ControllerStatusMessagesSend+0x22e>
 95e:	81 30       	cpi	r24, 0x01	; 1
 960:	c1 f5       	brne	.+112    	; 0x9d2 <ControllerStatusMessagesSend+0x1c2>
 962:	e0 e1       	ldi	r30, 0x10	; 16
 964:	f1 e0       	ldi	r31, 0x01	; 1
 966:	81 ad       	ldd	r24, Z+57	; 0x39
 968:	92 ad       	ldd	r25, Z+58	; 0x3a
 96a:	d8 01       	movw	r26, r16
 96c:	8c 93       	st	X, r24
 96e:	81 ad       	ldd	r24, Z+57	; 0x39
 970:	92 ad       	ldd	r25, Z+58	; 0x3a
 972:	11 96       	adiw	r26, 0x01	; 1
 974:	9c 93       	st	X, r25
 976:	11 97       	sbiw	r26, 0x01	; 1
 978:	87 a9       	ldd	r24, Z+55	; 0x37
 97a:	90 ad       	ldd	r25, Z+56	; 0x38
 97c:	12 96       	adiw	r26, 0x02	; 2
 97e:	8c 93       	st	X, r24
 980:	12 97       	sbiw	r26, 0x02	; 2
 982:	87 a9       	ldd	r24, Z+55	; 0x37
 984:	90 ad       	ldd	r25, Z+56	; 0x38
 986:	13 96       	adiw	r26, 0x03	; 3
 988:	9c 93       	st	X, r25
 98a:	13 97       	sbiw	r26, 0x03	; 3
 98c:	83 ad       	ldd	r24, Z+59	; 0x3b
 98e:	94 ad       	ldd	r25, Z+60	; 0x3c
 990:	14 96       	adiw	r26, 0x04	; 4
 992:	8c 93       	st	X, r24
 994:	14 97       	sbiw	r26, 0x04	; 4
 996:	83 ad       	ldd	r24, Z+59	; 0x3b
 998:	94 ad       	ldd	r25, Z+60	; 0x3c
 99a:	15 96       	adiw	r26, 0x05	; 5
 99c:	9c 93       	st	X, r25
 99e:	60 91 4d 01 	lds	r22, 0x014D	; 0x80014d <sg_sFrame+0x3d>
 9a2:	70 91 4e 01 	lds	r23, 0x014E	; 0x80014e <sg_sFrame+0x3e>
 9a6:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <sg_sFrame+0x3f>
 9aa:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <sg_sFrame+0x40>
 9ae:	2f e0       	ldi	r18, 0x0F	; 15
 9b0:	30 e0       	ldi	r19, 0x00	; 0
 9b2:	40 e0       	ldi	r20, 0x00	; 0
 9b4:	50 e0       	ldi	r21, 0x00	; 0
 9b6:	0e 94 38 22 	call	0x4470	; 0x4470 <__udivmodsi4>
 9ba:	f8 01       	movw	r30, r16
 9bc:	26 83       	std	Z+6, r18	; 0x06
 9be:	37 83       	std	Z+7, r19	; 0x07
 9c0:	48 e0       	ldi	r20, 0x08	; 8
 9c2:	b8 01       	movw	r22, r16
 9c4:	82 e0       	ldi	r24, 0x02	; 2
 9c6:	0e 94 b1 26 	call	0x4d62	; 0x4d62 <CANSendMessage>
 9ca:	88 23       	and	r24, r24
 9cc:	99 f1       	breq	.+102    	; 0xa34 <ControllerStatusMessagesSend+0x224>
 9ce:	81 e0       	ldi	r24, 0x01	; 1
 9d0:	36 c0       	rjmp	.+108    	; 0xa3e <ControllerStatusMessagesSend+0x22e>
 9d2:	82 30       	cpi	r24, 0x02	; 2
 9d4:	89 f5       	brne	.+98     	; 0xa38 <ControllerStatusMessagesSend+0x228>
 9d6:	e0 e1       	ldi	r30, 0x10	; 16
 9d8:	f1 e0       	ldi	r31, 0x01	; 1
 9da:	83 a9       	ldd	r24, Z+51	; 0x33
 9dc:	94 a9       	ldd	r25, Z+52	; 0x34
 9de:	d8 01       	movw	r26, r16
 9e0:	8c 93       	st	X, r24
 9e2:	83 a9       	ldd	r24, Z+51	; 0x33
 9e4:	94 a9       	ldd	r25, Z+52	; 0x34
 9e6:	11 96       	adiw	r26, 0x01	; 1
 9e8:	9c 93       	st	X, r25
 9ea:	11 97       	sbiw	r26, 0x01	; 1
 9ec:	81 a9       	ldd	r24, Z+49	; 0x31
 9ee:	92 a9       	ldd	r25, Z+50	; 0x32
 9f0:	12 96       	adiw	r26, 0x02	; 2
 9f2:	8c 93       	st	X, r24
 9f4:	12 97       	sbiw	r26, 0x02	; 2
 9f6:	81 a9       	ldd	r24, Z+49	; 0x31
 9f8:	92 a9       	ldd	r25, Z+50	; 0x32
 9fa:	13 96       	adiw	r26, 0x03	; 3
 9fc:	9c 93       	st	X, r25
 9fe:	13 97       	sbiw	r26, 0x03	; 3
 a00:	85 a9       	ldd	r24, Z+53	; 0x35
 a02:	96 a9       	ldd	r25, Z+54	; 0x36
 a04:	14 96       	adiw	r26, 0x04	; 4
 a06:	8c 93       	st	X, r24
 a08:	14 97       	sbiw	r26, 0x04	; 4
 a0a:	85 a9       	ldd	r24, Z+53	; 0x35
 a0c:	96 a9       	ldd	r25, Z+54	; 0x36
 a0e:	15 96       	adiw	r26, 0x05	; 5
 a10:	9c 93       	st	X, r25
 a12:	15 97       	sbiw	r26, 0x05	; 5
 a14:	16 96       	adiw	r26, 0x06	; 6
 a16:	1c 92       	st	X, r1
 a18:	16 97       	sbiw	r26, 0x06	; 6
 a1a:	17 96       	adiw	r26, 0x07	; 7
 a1c:	1c 92       	st	X, r1
 a1e:	48 e0       	ldi	r20, 0x08	; 8
 a20:	b8 01       	movw	r22, r16
 a22:	83 e0       	ldi	r24, 0x03	; 3
 a24:	0e 94 b1 26 	call	0x4d62	; 0x4d62 <CANSendMessage>
 a28:	88 23       	and	r24, r24
 a2a:	41 f0       	breq	.+16     	; 0xa3c <ControllerStatusMessagesSend+0x22c>
 a2c:	81 e0       	ldi	r24, 0x01	; 1
 a2e:	07 c0       	rjmp	.+14     	; 0xa3e <ControllerStatusMessagesSend+0x22e>
 a30:	80 e0       	ldi	r24, 0x00	; 0
 a32:	05 c0       	rjmp	.+10     	; 0xa3e <ControllerStatusMessagesSend+0x22e>
 a34:	80 e0       	ldi	r24, 0x00	; 0
 a36:	03 c0       	rjmp	.+6      	; 0xa3e <ControllerStatusMessagesSend+0x22e>
 a38:	81 e0       	ldi	r24, 0x01	; 1
 a3a:	01 c0       	rjmp	.+2      	; 0xa3e <ControllerStatusMessagesSend+0x22e>
 a3c:	80 e0       	ldi	r24, 0x00	; 0
 a3e:	88 23       	and	r24, r24
 a40:	81 f0       	breq	.+32     	; 0xa62 <ControllerStatusMessagesSend+0x252>
 a42:	80 91 6e 09 	lds	r24, 0x096E	; 0x80096e <sg_u8ControllerStatusMsgCount>
 a46:	8f 5f       	subi	r24, 0xFF	; 255
 a48:	80 93 6e 09 	sts	0x096E, r24	; 0x80096e <sg_u8ControllerStatusMsgCount>
 a4c:	83 30       	cpi	r24, 0x03	; 3
 a4e:	48 f0       	brcs	.+18     	; 0xa62 <ControllerStatusMessagesSend+0x252>
 a50:	10 92 6e 09 	sts	0x096E, r1	; 0x80096e <sg_u8ControllerStatusMsgCount>
 a54:	10 92 1e 03 	sts	0x031E, r1	; 0x80031e <sg_bSendModuleControllerStatus>
 a58:	10 92 76 09 	sts	0x0976, r1	; 0x800976 <sg_bIgnoreStatusRequests>
 a5c:	81 e0       	ldi	r24, 0x01	; 1
 a5e:	80 93 1b 03 	sts	0x031B, r24	; 0x80031b <sg_bSendCellCommStatus>
 a62:	80 91 1d 03 	lds	r24, 0x031D	; 0x80031d <sg_bSendCellStatus>
 a66:	88 23       	and	r24, r24
 a68:	09 f4       	brne	.+2      	; 0xa6c <ControllerStatusMessagesSend+0x25c>
 a6a:	8c c0       	rjmp	.+280    	; 0xb84 <ControllerStatusMessagesSend+0x374>
 a6c:	1c 82       	std	Y+4, r1	; 0x04
 a6e:	1b 82       	std	Y+3, r1	; 0x03
 a70:	1a 82       	std	Y+2, r1	; 0x02
 a72:	19 82       	std	Y+1, r1	; 0x01
 a74:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <sg_sFrame+0x15>
 a78:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <sg_u8CellStatus>
 a7c:	89 17       	cp	r24, r25
 a7e:	88 f5       	brcc	.+98     	; 0xae2 <ControllerStatusMessagesSend+0x2d2>
 a80:	e0 91 23 03 	lds	r30, 0x0323	; 0x800323 <sg_u8CellStatus>
 a84:	f0 e0       	ldi	r31, 0x00	; 0
 a86:	75 96       	adiw	r30, 0x15	; 21
 a88:	ee 0f       	add	r30, r30
 a8a:	ff 1f       	adc	r31, r31
 a8c:	ee 0f       	add	r30, r30
 a8e:	ff 1f       	adc	r31, r31
 a90:	e0 5f       	subi	r30, 0xF0	; 240
 a92:	fe 4f       	sbci	r31, 0xFE	; 254
 a94:	80 81       	ld	r24, Z
 a96:	91 81       	ldd	r25, Z+1	; 0x01
 a98:	e0 91 23 03 	lds	r30, 0x0323	; 0x800323 <sg_u8CellStatus>
 a9c:	f0 e0       	ldi	r31, 0x00	; 0
 a9e:	75 96       	adiw	r30, 0x15	; 21
 aa0:	ee 0f       	add	r30, r30
 aa2:	ff 1f       	adc	r31, r31
 aa4:	ee 0f       	add	r30, r30
 aa6:	ff 1f       	adc	r31, r31
 aa8:	e0 5f       	subi	r30, 0xF0	; 240
 aaa:	fe 4f       	sbci	r31, 0xFE	; 254
 aac:	e2 80       	ldd	r14, Z+2	; 0x02
 aae:	f3 80       	ldd	r15, Z+3	; 0x03
 ab0:	be 01       	movw	r22, r28
 ab2:	6d 5f       	subi	r22, 0xFD	; 253
 ab4:	7f 4f       	sbci	r23, 0xFF	; 255
 ab6:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <CellDataConvertVoltage>
 aba:	81 11       	cpse	r24, r1
 abc:	02 c0       	rjmp	.+4      	; 0xac2 <ControllerStatusMessagesSend+0x2b2>
 abe:	1c 82       	std	Y+4, r1	; 0x04
 ac0:	1b 82       	std	Y+3, r1	; 0x03
 ac2:	60 e0       	ldi	r22, 0x00	; 0
 ac4:	70 e0       	ldi	r23, 0x00	; 0
 ac6:	c7 01       	movw	r24, r14
 ac8:	0e 94 31 1f 	call	0x3e62	; 0x3e62 <CellDataConvertTemperature>
 acc:	88 23       	and	r24, r24
 ace:	39 f0       	breq	.+14     	; 0xade <ControllerStatusMessagesSend+0x2ce>
 ad0:	be 01       	movw	r22, r28
 ad2:	6f 5f       	subi	r22, 0xFF	; 255
 ad4:	7f 4f       	sbci	r23, 0xFF	; 255
 ad6:	c7 01       	movw	r24, r14
 ad8:	0e 94 31 1f 	call	0x3e62	; 0x3e62 <CellDataConvertTemperature>
 adc:	02 c0       	rjmp	.+4      	; 0xae2 <ControllerStatusMessagesSend+0x2d2>
 ade:	1a 82       	std	Y+2, r1	; 0x02
 ae0:	19 82       	std	Y+1, r1	; 0x01
 ae2:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <sg_u8CellStatus>
 ae6:	f8 01       	movw	r30, r16
 ae8:	80 83       	st	Z, r24
 aea:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <sg_sFrame+0x15>
 aee:	81 83       	std	Z+1, r24	; 0x01
 af0:	99 81       	ldd	r25, Y+1	; 0x01
 af2:	8a 81       	ldd	r24, Y+2	; 0x02
 af4:	92 83       	std	Z+2, r25	; 0x02
 af6:	83 83       	std	Z+3, r24	; 0x03
 af8:	2b 81       	ldd	r18, Y+3	; 0x03
 afa:	3c 81       	ldd	r19, Y+4	; 0x04
 afc:	24 83       	std	Z+4, r18	; 0x04
 afe:	35 83       	std	Z+5, r19	; 0x05
 b00:	21 15       	cp	r18, r1
 b02:	31 05       	cpc	r19, r1
 b04:	59 f0       	breq	.+22     	; 0xb1c <ControllerStatusMessagesSend+0x30c>
 b06:	c9 01       	movw	r24, r18
 b08:	64 e0       	ldi	r22, 0x04	; 4
 b0a:	70 e1       	ldi	r23, 0x10	; 16
 b0c:	0e 94 7d 24 	call	0x48fa	; 0x48fa <__udivmodhi4>
 b10:	84 e6       	ldi	r24, 0x64	; 100
 b12:	68 9f       	mul	r22, r24
 b14:	60 2d       	mov	r22, r0
 b16:	11 24       	eor	r1, r1
 b18:	66 83       	std	Z+6, r22	; 0x06
 b1a:	01 c0       	rjmp	.+2      	; 0xb1e <ControllerStatusMessagesSend+0x30e>
 b1c:	16 82       	std	Z+6, r1	; 0x06
 b1e:	e0 e1       	ldi	r30, 0x10	; 16
 b20:	f1 e0       	ldi	r31, 0x01	; 1
 b22:	47 a9       	ldd	r20, Z+55	; 0x37
 b24:	50 ad       	ldd	r21, Z+56	; 0x38
 b26:	81 ad       	ldd	r24, Z+57	; 0x39
 b28:	92 ad       	ldd	r25, Z+58	; 0x3a
 b2a:	84 17       	cp	r24, r20
 b2c:	95 07       	cpc	r25, r21
 b2e:	98 f4       	brcc	.+38     	; 0xb56 <ControllerStatusMessagesSend+0x346>
 b30:	21 15       	cp	r18, r1
 b32:	31 05       	cpc	r19, r1
 b34:	81 f0       	breq	.+32     	; 0xb56 <ControllerStatusMessagesSend+0x346>
 b36:	67 a9       	ldd	r22, Z+55	; 0x37
 b38:	70 ad       	ldd	r23, Z+56	; 0x38
 b3a:	81 ad       	ldd	r24, Z+57	; 0x39
 b3c:	92 ad       	ldd	r25, Z+58	; 0x3a
 b3e:	68 1b       	sub	r22, r24
 b40:	79 0b       	sbc	r23, r25
 b42:	c9 01       	movw	r24, r18
 b44:	0e 94 7d 24 	call	0x48fa	; 0x48fa <__udivmodhi4>
 b48:	84 e6       	ldi	r24, 0x64	; 100
 b4a:	68 9f       	mul	r22, r24
 b4c:	60 2d       	mov	r22, r0
 b4e:	11 24       	eor	r1, r1
 b50:	f8 01       	movw	r30, r16
 b52:	67 83       	std	Z+7, r22	; 0x07
 b54:	03 c0       	rjmp	.+6      	; 0xb5c <ControllerStatusMessagesSend+0x34c>
 b56:	d8 01       	movw	r26, r16
 b58:	17 96       	adiw	r26, 0x07	; 7
 b5a:	1c 92       	st	X, r1
 b5c:	48 e0       	ldi	r20, 0x08	; 8
 b5e:	b8 01       	movw	r22, r16
 b60:	84 e0       	ldi	r24, 0x04	; 4
 b62:	0e 94 b1 26 	call	0x4d62	; 0x4d62 <CANSendMessage>
 b66:	88 23       	and	r24, r24
 b68:	69 f0       	breq	.+26     	; 0xb84 <ControllerStatusMessagesSend+0x374>
 b6a:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <sg_u8CellStatus>
 b6e:	8f 5f       	subi	r24, 0xFF	; 255
 b70:	80 93 23 03 	sts	0x0323, r24	; 0x800323 <sg_u8CellStatus>
 b74:	90 91 23 03 	lds	r25, 0x0323	; 0x800323 <sg_u8CellStatus>
 b78:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <sg_u8CellStatusTarget>
 b7c:	98 17       	cp	r25, r24
 b7e:	10 f0       	brcs	.+4      	; 0xb84 <ControllerStatusMessagesSend+0x374>
 b80:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <sg_bSendCellStatus>
 b84:	80 91 1b 03 	lds	r24, 0x031B	; 0x80031b <sg_bSendCellCommStatus>
 b88:	88 23       	and	r24, r24
 b8a:	89 f1       	breq	.+98     	; 0xbee <ControllerStatusMessagesSend+0x3de>
 b8c:	e0 e1       	ldi	r30, 0x10	; 16
 b8e:	f1 e0       	ldi	r31, 0x01	; 1
 b90:	83 89       	ldd	r24, Z+19	; 0x13
 b92:	d8 01       	movw	r26, r16
 b94:	8c 93       	st	X, r24
 b96:	84 89       	ldd	r24, Z+20	; 0x14
 b98:	11 96       	adiw	r26, 0x01	; 1
 b9a:	8c 93       	st	X, r24
 b9c:	11 97       	sbiw	r26, 0x01	; 1
 b9e:	80 a5       	ldd	r24, Z+40	; 0x28
 ba0:	91 a5       	ldd	r25, Z+41	; 0x29
 ba2:	12 96       	adiw	r26, 0x02	; 2
 ba4:	8c 93       	st	X, r24
 ba6:	12 97       	sbiw	r26, 0x02	; 2
 ba8:	80 a5       	ldd	r24, Z+40	; 0x28
 baa:	91 a5       	ldd	r25, Z+41	; 0x29
 bac:	13 96       	adiw	r26, 0x03	; 3
 bae:	9c 93       	st	X, r25
 bb0:	13 97       	sbiw	r26, 0x03	; 3
 bb2:	86 a5       	ldd	r24, Z+46	; 0x2e
 bb4:	14 96       	adiw	r26, 0x04	; 4
 bb6:	8c 93       	st	X, r24
 bb8:	14 97       	sbiw	r26, 0x04	; 4
 bba:	82 a5       	ldd	r24, Z+42	; 0x2a
 bbc:	8f 3f       	cpi	r24, 0xFF	; 255
 bbe:	31 f0       	breq	.+12     	; 0xbcc <ControllerStatusMessagesSend+0x3bc>
 bc0:	85 a5       	ldd	r24, Z+45	; 0x2d
 bc2:	92 a5       	ldd	r25, Z+42	; 0x2a
 bc4:	89 1b       	sub	r24, r25
 bc6:	15 96       	adiw	r26, 0x05	; 5
 bc8:	8c 93       	st	X, r24
 bca:	03 c0       	rjmp	.+6      	; 0xbd2 <ControllerStatusMessagesSend+0x3c2>
 bcc:	8f ef       	ldi	r24, 0xFF	; 255
 bce:	f8 01       	movw	r30, r16
 bd0:	85 83       	std	Z+5, r24	; 0x05
 bd2:	d8 01       	movw	r26, r16
 bd4:	16 96       	adiw	r26, 0x06	; 6
 bd6:	1c 92       	st	X, r1
 bd8:	16 97       	sbiw	r26, 0x06	; 6
 bda:	17 96       	adiw	r26, 0x07	; 7
 bdc:	1c 92       	st	X, r1
 bde:	48 e0       	ldi	r20, 0x08	; 8
 be0:	b8 01       	movw	r22, r16
 be2:	86 e0       	ldi	r24, 0x06	; 6
 be4:	0e 94 b1 26 	call	0x4d62	; 0x4d62 <CANSendMessage>
 be8:	81 11       	cpse	r24, r1
 bea:	10 92 1b 03 	sts	0x031B, r1	; 0x80031b <sg_bSendCellCommStatus>
 bee:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <sg_bSendHardwareDetail>
 bf2:	88 23       	and	r24, r24
 bf4:	89 f0       	breq	.+34     	; 0xc18 <ControllerStatusMessagesSend+0x408>
 bf6:	b8 01       	movw	r22, r16
 bf8:	c8 01       	movw	r24, r16
 bfa:	02 96       	adiw	r24, 0x02	; 2
 bfc:	0e 94 3e 1b 	call	0x367c	; 0x367c <CurrentThresholdsGet>
 c00:	f8 01       	movw	r30, r16
 c02:	14 82       	std	Z+4, r1	; 0x04
 c04:	15 82       	std	Z+5, r1	; 0x05
 c06:	16 82       	std	Z+6, r1	; 0x06
 c08:	17 82       	std	Z+7, r1	; 0x07
 c0a:	48 e0       	ldi	r20, 0x08	; 8
 c0c:	b8 01       	movw	r22, r16
 c0e:	85 e0       	ldi	r24, 0x05	; 5
 c10:	0e 94 b1 26 	call	0x4d62	; 0x4d62 <CANSendMessage>
 c14:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <sg_bSendHardwareDetail>
 c18:	0f 90       	pop	r0
 c1a:	0f 90       	pop	r0
 c1c:	0f 90       	pop	r0
 c1e:	0f 90       	pop	r0
 c20:	df 91       	pop	r29
 c22:	cf 91       	pop	r28
 c24:	1f 91       	pop	r17
 c26:	0f 91       	pop	r16
 c28:	ff 90       	pop	r15
 c2a:	ef 90       	pop	r14
 c2c:	df 90       	pop	r13
 c2e:	cf 90       	pop	r12
 c30:	08 95       	ret

Disassembly of section .text.CellStringProcess:

00000f2a <CellStringProcess>:
     f2a:	3f 92       	push	r3
     f2c:	4f 92       	push	r4
     f2e:	5f 92       	push	r5
     f30:	6f 92       	push	r6
     f32:	7f 92       	push	r7
     f34:	8f 92       	push	r8
     f36:	9f 92       	push	r9
     f38:	af 92       	push	r10
     f3a:	bf 92       	push	r11
     f3c:	cf 92       	push	r12
     f3e:	df 92       	push	r13
     f40:	ef 92       	push	r14
     f42:	ff 92       	push	r15
     f44:	0f 93       	push	r16
     f46:	1f 93       	push	r17
     f48:	cf 93       	push	r28
     f4a:	df 93       	push	r29
     f4c:	00 d0       	rcall	.+0      	; 0xf4e <CellStringProcess+0x24>
     f4e:	00 d0       	rcall	.+0      	; 0xf50 <CellStringProcess+0x26>
     f50:	00 d0       	rcall	.+0      	; 0xf52 <CellStringProcess+0x28>
     f52:	cd b7       	in	r28, 0x3d	; 61
     f54:	de b7       	in	r29, 0x3e	; 62
     f56:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <sg_sFrame+0x2b>
     f5a:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <sg_sFrame+0x2c>
     f5e:	89 2b       	or	r24, r25
     f60:	09 f4       	brne	.+2      	; 0xf64 <CellStringProcess+0x3a>
     f62:	1e c1       	rjmp	.+572    	; 0x11a0 <__stack+0xa1>
     f64:	e0 e1       	ldi	r30, 0x10	; 16
     f66:	f1 e0       	ldi	r31, 0x01	; 1
     f68:	8f ef       	ldi	r24, 0xFF	; 255
     f6a:	82 a7       	std	Z+42, r24	; 0x2a
     f6c:	93 89       	ldd	r25, Z+19	; 0x13
     f6e:	85 a5       	ldd	r24, Z+45	; 0x2d
     f70:	89 17       	cp	r24, r25
     f72:	28 f4       	brcc	.+10     	; 0xf7e <CellStringProcess+0x54>
     f74:	85 a5       	ldd	r24, Z+45	; 0x2d
     f76:	83 8b       	std	Z+19, r24	; 0x13
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	80 93 1b 03 	sts	0x031B, r24	; 0x80031b <sg_bSendCellCommStatus>
     f7e:	e0 e1       	ldi	r30, 0x10	; 16
     f80:	f1 e0       	ldi	r31, 0x01	; 1
     f82:	94 89       	ldd	r25, Z+20	; 0x14
     f84:	85 a5       	ldd	r24, Z+45	; 0x2d
     f86:	98 17       	cp	r25, r24
     f88:	28 f4       	brcc	.+10     	; 0xf94 <CellStringProcess+0x6a>
     f8a:	85 a5       	ldd	r24, Z+45	; 0x2d
     f8c:	84 8b       	std	Z+20, r24	; 0x14
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	80 93 1b 03 	sts	0x031B, r24	; 0x80031b <sg_bSendCellCommStatus>
     f94:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <sg_sFrame+0x2b>
     f98:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <sg_sFrame+0x2c>
     f9c:	83 70       	andi	r24, 0x03	; 3
     f9e:	99 27       	eor	r25, r25
     fa0:	89 2b       	or	r24, r25
     fa2:	61 f0       	breq	.+24     	; 0xfbc <CellStringProcess+0x92>
     fa4:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <sg_sFrame+0x2e>
     fa8:	8f 3f       	cpi	r24, 0xFF	; 255
     faa:	41 f0       	breq	.+16     	; 0xfbc <CellStringProcess+0x92>
     fac:	e0 e1       	ldi	r30, 0x10	; 16
     fae:	f1 e0       	ldi	r31, 0x01	; 1
     fb0:	86 a5       	ldd	r24, Z+46	; 0x2e
     fb2:	8f 5f       	subi	r24, 0xFF	; 255
     fb4:	86 a7       	std	Z+46, r24	; 0x2e
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	80 93 1b 03 	sts	0x031B, r24	; 0x80031b <sg_bSendCellCommStatus>
     fbc:	e0 e1       	ldi	r30, 0x10	; 16
     fbe:	f1 e0       	ldi	r31, 0x01	; 1
     fc0:	10 ae       	std	Z+56, r1	; 0x38
     fc2:	17 aa       	std	Z+55, r1	; 0x37
     fc4:	8f ef       	ldi	r24, 0xFF	; 255
     fc6:	9f ef       	ldi	r25, 0xFF	; 255
     fc8:	92 af       	std	Z+58, r25	; 0x3a
     fca:	81 af       	std	Z+57, r24	; 0x39
     fcc:	14 ae       	std	Z+60, r1	; 0x3c
     fce:	13 ae       	std	Z+59, r1	; 0x3b
     fd0:	80 e0       	ldi	r24, 0x00	; 0
     fd2:	90 e8       	ldi	r25, 0x80	; 128
     fd4:	92 ab       	std	Z+50, r25	; 0x32
     fd6:	81 ab       	std	Z+49, r24	; 0x31
     fd8:	8f ef       	ldi	r24, 0xFF	; 255
     fda:	9f e7       	ldi	r25, 0x7F	; 127
     fdc:	94 ab       	std	Z+52, r25	; 0x34
     fde:	83 ab       	std	Z+51, r24	; 0x33
     fe0:	16 aa       	std	Z+54, r1	; 0x36
     fe2:	15 aa       	std	Z+53, r1	; 0x35
     fe4:	d1 2c       	mov	r13, r1
     fe6:	31 2c       	mov	r3, r1
     fe8:	c1 2c       	mov	r12, r1
     fea:	41 2c       	mov	r4, r1
     fec:	51 2c       	mov	r5, r1
     fee:	32 01       	movw	r6, r4
     ff0:	81 2c       	mov	r8, r1
     ff2:	91 2c       	mov	r9, r1
     ff4:	54 01       	movw	r10, r8
     ff6:	2f ef       	ldi	r18, 0xFF	; 255
     ff8:	3f e7       	ldi	r19, 0x7F	; 127
     ffa:	3e 83       	std	Y+6, r19	; 0x06
     ffc:	2d 83       	std	Y+5, r18	; 0x05
     ffe:	80 e0       	ldi	r24, 0x00	; 0
    1000:	90 e8       	ldi	r25, 0x80	; 128
    1002:	9c 83       	std	Y+4, r25	; 0x04
    1004:	8b 83       	std	Y+3, r24	; 0x03
    1006:	6b c0       	rjmp	.+214    	; 0x10de <__DATA_REGION_LENGTH__+0xde>
    1008:	0d 2d       	mov	r16, r13
    100a:	10 e0       	ldi	r17, 0x00	; 0
    100c:	f8 01       	movw	r30, r16
    100e:	75 96       	adiw	r30, 0x15	; 21
    1010:	ee 0f       	add	r30, r30
    1012:	ff 1f       	adc	r31, r31
    1014:	ee 0f       	add	r30, r30
    1016:	ff 1f       	adc	r31, r31
    1018:	e0 5f       	subi	r30, 0xF0	; 240
    101a:	fe 4f       	sbci	r31, 0xFE	; 254
    101c:	80 81       	ld	r24, Z
    101e:	91 81       	ldd	r25, Z+1	; 0x01
    1020:	9a 83       	std	Y+2, r25	; 0x02
    1022:	89 83       	std	Y+1, r24	; 0x01
    1024:	e2 80       	ldd	r14, Z+2	; 0x02
    1026:	f3 80       	ldd	r15, Z+3	; 0x03
    1028:	60 e0       	ldi	r22, 0x00	; 0
    102a:	70 e0       	ldi	r23, 0x00	; 0
    102c:	c7 01       	movw	r24, r14
    102e:	0e 94 31 1f 	call	0x3e62	; 0x3e62 <CellDataConvertTemperature>
    1032:	88 23       	and	r24, r24
    1034:	f1 f0       	breq	.+60     	; 0x1072 <__DATA_REGION_LENGTH__+0x72>
    1036:	f4 fe       	sbrs	r15, 4
    1038:	03 c0       	rjmp	.+6      	; 0x1040 <__DATA_REGION_LENGTH__+0x40>
    103a:	c7 01       	movw	r24, r14
    103c:	90 6f       	ori	r25, 0xF0	; 240
    103e:	02 c0       	rjmp	.+4      	; 0x1044 <__DATA_REGION_LENGTH__+0x44>
    1040:	c7 01       	movw	r24, r14
    1042:	9f 77       	andi	r25, 0x7F	; 127
    1044:	2b 81       	ldd	r18, Y+3	; 0x03
    1046:	3c 81       	ldd	r19, Y+4	; 0x04
    1048:	28 17       	cp	r18, r24
    104a:	39 07       	cpc	r19, r25
    104c:	14 f4       	brge	.+4      	; 0x1052 <__DATA_REGION_LENGTH__+0x52>
    104e:	9c 83       	std	Y+4, r25	; 0x04
    1050:	8b 83       	std	Y+3, r24	; 0x03
    1052:	2d 81       	ldd	r18, Y+5	; 0x05
    1054:	3e 81       	ldd	r19, Y+6	; 0x06
    1056:	82 17       	cp	r24, r18
    1058:	93 07       	cpc	r25, r19
    105a:	14 f4       	brge	.+4      	; 0x1060 <__DATA_REGION_LENGTH__+0x60>
    105c:	9e 83       	std	Y+6, r25	; 0x06
    105e:	8d 83       	std	Y+5, r24	; 0x05
    1060:	09 2e       	mov	r0, r25
    1062:	00 0c       	add	r0, r0
    1064:	aa 0b       	sbc	r26, r26
    1066:	bb 0b       	sbc	r27, r27
    1068:	88 0e       	add	r8, r24
    106a:	99 1e       	adc	r9, r25
    106c:	aa 1e       	adc	r10, r26
    106e:	bb 1e       	adc	r11, r27
    1070:	33 94       	inc	r3
    1072:	f8 01       	movw	r30, r16
    1074:	75 96       	adiw	r30, 0x15	; 21
    1076:	ee 0f       	add	r30, r30
    1078:	ff 1f       	adc	r31, r31
    107a:	ee 0f       	add	r30, r30
    107c:	ff 1f       	adc	r31, r31
    107e:	e0 5f       	subi	r30, 0xF0	; 240
    1080:	fe 4f       	sbci	r31, 0xFE	; 254
    1082:	80 81       	ld	r24, Z
    1084:	91 81       	ldd	r25, Z+1	; 0x01
    1086:	99 23       	and	r25, r25
    1088:	1c f4       	brge	.+6      	; 0x1090 <__DATA_REGION_LENGTH__+0x90>
    108a:	81 e0       	ldi	r24, 0x01	; 1
    108c:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <sg_sFrame+0x27>
    1090:	be 01       	movw	r22, r28
    1092:	6f 5f       	subi	r22, 0xFF	; 255
    1094:	7f 4f       	sbci	r23, 0xFF	; 255
    1096:	89 81       	ldd	r24, Y+1	; 0x01
    1098:	9a 81       	ldd	r25, Y+2	; 0x02
    109a:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <CellDataConvertVoltage>
    109e:	88 23       	and	r24, r24
    10a0:	e9 f0       	breq	.+58     	; 0x10dc <__DATA_REGION_LENGTH__+0xdc>
    10a2:	20 91 47 01 	lds	r18, 0x0147	; 0x800147 <sg_sFrame+0x37>
    10a6:	30 91 48 01 	lds	r19, 0x0148	; 0x800148 <sg_sFrame+0x38>
    10aa:	89 81       	ldd	r24, Y+1	; 0x01
    10ac:	9a 81       	ldd	r25, Y+2	; 0x02
    10ae:	28 17       	cp	r18, r24
    10b0:	39 07       	cpc	r19, r25
    10b2:	20 f4       	brcc	.+8      	; 0x10bc <__DATA_REGION_LENGTH__+0xbc>
    10b4:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <sg_sFrame+0x38>
    10b8:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <sg_sFrame+0x37>
    10bc:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <sg_sFrame+0x39>
    10c0:	30 91 4a 01 	lds	r19, 0x014A	; 0x80014a <sg_sFrame+0x3a>
    10c4:	82 17       	cp	r24, r18
    10c6:	93 07       	cpc	r25, r19
    10c8:	20 f4       	brcc	.+8      	; 0x10d2 <__DATA_REGION_LENGTH__+0xd2>
    10ca:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <sg_sFrame+0x3a>
    10ce:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <sg_sFrame+0x39>
    10d2:	48 0e       	add	r4, r24
    10d4:	59 1e       	adc	r5, r25
    10d6:	61 1c       	adc	r6, r1
    10d8:	71 1c       	adc	r7, r1
    10da:	c3 94       	inc	r12
    10dc:	d3 94       	inc	r13
    10de:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <sg_sFrame+0x2d>
    10e2:	d8 16       	cp	r13, r24
    10e4:	08 f4       	brcc	.+2      	; 0x10e8 <__DATA_REGION_LENGTH__+0xe8>
    10e6:	90 cf       	rjmp	.-224    	; 0x1008 <__DATA_REGION_LENGTH__+0x8>
    10e8:	cc 20       	and	r12, r12
    10ea:	89 f1       	breq	.+98     	; 0x114e <__stack+0x4f>
    10ec:	ed e4       	ldi	r30, 0x4D	; 77
    10ee:	f1 e0       	ldi	r31, 0x01	; 1
    10f0:	40 82       	st	Z, r4
    10f2:	51 82       	std	Z+1, r5	; 0x01
    10f4:	62 82       	std	Z+2, r6	; 0x02
    10f6:	73 82       	std	Z+3, r7	; 0x03
    10f8:	60 81       	ld	r22, Z
    10fa:	71 81       	ldd	r23, Z+1	; 0x01
    10fc:	82 81       	ldd	r24, Z+2	; 0x02
    10fe:	93 81       	ldd	r25, Z+3	; 0x03
    1100:	2c 2d       	mov	r18, r12
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	40 e0       	ldi	r20, 0x00	; 0
    1106:	50 e0       	ldi	r21, 0x00	; 0
    1108:	0e 94 38 22 	call	0x4470	; 0x4470 <__udivmodsi4>
    110c:	30 93 4c 01 	sts	0x014C, r19	; 0x80014c <sg_sFrame+0x3c>
    1110:	20 93 4b 01 	sts	0x014B, r18	; 0x80014b <sg_sFrame+0x3b>
    1114:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    1118:	83 30       	cpi	r24, 0x03	; 3
    111a:	c9 f0       	breq	.+50     	; 0x114e <__stack+0x4f>
    111c:	80 91 19 03 	lds	r24, 0x0319	; 0x800319 <sg_bCellBalancedOnce>
    1120:	81 11       	cpse	r24, r1
    1122:	15 c0       	rjmp	.+42     	; 0x114e <__stack+0x4f>
    1124:	e0 e1       	ldi	r30, 0x10	; 16
    1126:	f1 e0       	ldi	r31, 0x01	; 1
    1128:	27 a9       	ldd	r18, Z+55	; 0x37
    112a:	30 ad       	ldd	r19, Z+56	; 0x38
    112c:	81 ad       	ldd	r24, Z+57	; 0x39
    112e:	92 ad       	ldd	r25, Z+58	; 0x3a
    1130:	28 17       	cp	r18, r24
    1132:	39 07       	cpc	r19, r25
    1134:	60 f0       	brcs	.+24     	; 0x114e <__stack+0x4f>
    1136:	87 a9       	ldd	r24, Z+55	; 0x37
    1138:	90 ad       	ldd	r25, Z+56	; 0x38
    113a:	21 ad       	ldd	r18, Z+57	; 0x39
    113c:	32 ad       	ldd	r19, Z+58	; 0x3a
    113e:	82 1b       	sub	r24, r18
    1140:	93 0b       	sbc	r25, r19
    1142:	80 34       	cpi	r24, 0x40	; 64
    1144:	91 05       	cpc	r25, r1
    1146:	18 f0       	brcs	.+6      	; 0x114e <__stack+0x4f>
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <sg_bCellBalanceReady>
    114e:	33 20       	and	r3, r3
    1150:	c9 f0       	breq	.+50     	; 0x1184 <__stack+0x85>
    1152:	23 2d       	mov	r18, r3
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	40 e0       	ldi	r20, 0x00	; 0
    1158:	50 e0       	ldi	r21, 0x00	; 0
    115a:	c5 01       	movw	r24, r10
    115c:	b4 01       	movw	r22, r8
    115e:	0e 94 bd 23 	call	0x477a	; 0x477a <__divmodsi4>
    1162:	65 e4       	ldi	r22, 0x45	; 69
    1164:	71 e0       	ldi	r23, 0x01	; 1
    1166:	c9 01       	movw	r24, r18
    1168:	0e 94 31 1f 	call	0x3e62	; 0x3e62 <CellDataConvertTemperature>
    116c:	61 e4       	ldi	r22, 0x41	; 65
    116e:	71 e0       	ldi	r23, 0x01	; 1
    1170:	8b 81       	ldd	r24, Y+3	; 0x03
    1172:	9c 81       	ldd	r25, Y+4	; 0x04
    1174:	0e 94 31 1f 	call	0x3e62	; 0x3e62 <CellDataConvertTemperature>
    1178:	63 e4       	ldi	r22, 0x43	; 67
    117a:	71 e0       	ldi	r23, 0x01	; 1
    117c:	8d 81       	ldd	r24, Y+5	; 0x05
    117e:	9e 81       	ldd	r25, Y+6	; 0x06
    1180:	0e 94 31 1f 	call	0x3e62	; 0x3e62 <CellDataConvertTemperature>
    1184:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <sg_bSDCardReady>
    1188:	88 23       	and	r24, r24
    118a:	51 f0       	breq	.+20     	; 0x11a0 <__stack+0xa1>
    118c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    1190:	88 23       	and	r24, r24
    1192:	31 f0       	breq	.+12     	; 0x11a0 <__stack+0xa1>
    1194:	80 e1       	ldi	r24, 0x10	; 16
    1196:	91 e0       	ldi	r25, 0x01	; 1
    1198:	0e 94 4e 14 	call	0x289c	; 0x289c <STORE_WriteFrame>
    119c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <sg_bSDCardReady>
    11a0:	26 96       	adiw	r28, 0x06	; 6
    11a2:	0f b6       	in	r0, 0x3f	; 63
    11a4:	f8 94       	cli
    11a6:	de bf       	out	0x3e, r29	; 62
    11a8:	0f be       	out	0x3f, r0	; 63
    11aa:	cd bf       	out	0x3d, r28	; 61
    11ac:	df 91       	pop	r29
    11ae:	cf 91       	pop	r28
    11b0:	1f 91       	pop	r17
    11b2:	0f 91       	pop	r16
    11b4:	ff 90       	pop	r15
    11b6:	ef 90       	pop	r14
    11b8:	df 90       	pop	r13
    11ba:	cf 90       	pop	r12
    11bc:	bf 90       	pop	r11
    11be:	af 90       	pop	r10
    11c0:	9f 90       	pop	r9
    11c2:	8f 90       	pop	r8
    11c4:	7f 90       	pop	r7
    11c6:	6f 90       	pop	r6
    11c8:	5f 90       	pop	r5
    11ca:	4f 90       	pop	r4
    11cc:	3f 90       	pop	r3
    11ce:	08 95       	ret

Disassembly of section .text.Delay:

0000429e <Delay>:
    429e:	ab 01       	movw	r20, r22
    42a0:	bc 01       	movw	r22, r24
    42a2:	4f 5f       	subi	r20, 0xFF	; 255
    42a4:	5f 4f       	sbci	r21, 0xFF	; 255
    42a6:	6f 4f       	sbci	r22, 0xFF	; 255
    42a8:	7f 4f       	sbci	r23, 0xFF	; 255
    42aa:	76 95       	lsr	r23
    42ac:	67 95       	ror	r22
    42ae:	57 95       	ror	r21
    42b0:	47 95       	ror	r20
    42b2:	96 b5       	in	r25, 0x26	; 38
    42b4:	17 c0       	rjmp	.+46     	; 0x42e4 <Delay+0x46>
    42b6:	86 b5       	in	r24, 0x26	; 38
    42b8:	98 17       	cp	r25, r24
    42ba:	e9 f3       	breq	.-6      	; 0x42b6 <Delay+0x18>
    42bc:	26 b5       	in	r18, 0x26	; 38
    42be:	82 2f       	mov	r24, r18
    42c0:	89 1b       	sub	r24, r25
    42c2:	90 e0       	ldi	r25, 0x00	; 0
    42c4:	a0 e0       	ldi	r26, 0x00	; 0
    42c6:	b0 e0       	ldi	r27, 0x00	; 0
    42c8:	48 17       	cp	r20, r24
    42ca:	59 07       	cpc	r21, r25
    42cc:	6a 07       	cpc	r22, r26
    42ce:	7b 07       	cpc	r23, r27
    42d0:	28 f0       	brcs	.+10     	; 0x42dc <Delay+0x3e>
    42d2:	48 1b       	sub	r20, r24
    42d4:	59 0b       	sbc	r21, r25
    42d6:	6a 0b       	sbc	r22, r26
    42d8:	7b 0b       	sbc	r23, r27
    42da:	03 c0       	rjmp	.+6      	; 0x42e2 <Delay+0x44>
    42dc:	40 e0       	ldi	r20, 0x00	; 0
    42de:	50 e0       	ldi	r21, 0x00	; 0
    42e0:	ba 01       	movw	r22, r20
    42e2:	92 2f       	mov	r25, r18
    42e4:	41 15       	cp	r20, r1
    42e6:	51 05       	cpc	r21, r1
    42e8:	61 05       	cpc	r22, r1
    42ea:	71 05       	cpc	r23, r1
    42ec:	21 f7       	brne	.-56     	; 0x42b6 <Delay+0x18>
    42ee:	08 95       	ret

Disassembly of section .text.PlatformAssert:

00004800 <PlatformAssert>:



void PlatformAssert( const char* peFilename, const int s32LineNumber )
{
	DebugOut("Assert %s: %d\n", peFilename, s32LineNumber);
    4800:	5f 93       	push	r21
    4802:	4f 93       	push	r20
    4804:	8f 93       	push	r24
    4806:	7f 93       	push	r23
    4808:	6f 93       	push	r22
    480a:	88 e3       	ldi	r24, 0x38	; 56
    480c:	92 e0       	ldi	r25, 0x02	; 2
    480e:	a0 e0       	ldi	r26, 0x00	; 0
    4810:	af 93       	push	r26
    4812:	9f 93       	push	r25
    4814:	8f 93       	push	r24
    4816:	0e 94 3f 27 	call	0x4e7e	; 0x4e7e <DebugOut>
	
//	while(1);
}
    481a:	8d b7       	in	r24, 0x3d	; 61
    481c:	9e b7       	in	r25, 0x3e	; 62
    481e:	08 96       	adiw	r24, 0x08	; 8
    4820:	0f b6       	in	r0, 0x3f	; 63
    4822:	f8 94       	cli
    4824:	9e bf       	out	0x3e, r25	; 62
    4826:	0f be       	out	0x3f, r0	; 63
    4828:	8d bf       	out	0x3d, r24	; 61
    482a:	08 95       	ret

Disassembly of section .text.ModuleControllerStateHandle:

000018e0 <ModuleControllerStateHandle>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    18e0:	1f 93       	push	r17
    18e2:	cf 93       	push	r28
    18e4:	df 93       	push	r29
    18e6:	d0 91 06 01 	lds	r29, 0x0106	; 0x800106 <sg_eModuleControllerStateTarget>
    18ea:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <sg_eModuleControllerStateMax>
    18ee:	8d 17       	cp	r24, r29
    18f0:	30 f0       	brcs	.+12     	; 0x18fe <ModuleControllerStateHandle+0x1e>
    18f2:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    18f6:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <sg_eModuleControllerStateMax>
    18fa:	89 17       	cp	r24, r25
    18fc:	10 f4       	brcc	.+4      	; 0x1902 <ModuleControllerStateHandle+0x22>
    18fe:	d0 91 05 01 	lds	r29, 0x0105	; 0x800105 <sg_eModuleControllerStateMax>
    1902:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    1906:	d8 17       	cp	r29, r24
    1908:	09 f4       	brne	.+2      	; 0x190c <ModuleControllerStateHandle+0x2c>
    190a:	f5 c0       	rjmp	.+490    	; 0x1af6 <ModuleControllerStateHandle+0x216>
    190c:	d2 30       	cpi	r29, 0x02	; 2
    190e:	09 f4       	brne	.+2      	; 0x1912 <ModuleControllerStateHandle+0x32>
    1910:	72 c0       	rjmp	.+228    	; 0x19f6 <ModuleControllerStateHandle+0x116>
    1912:	28 f4       	brcc	.+10     	; 0x191e <ModuleControllerStateHandle+0x3e>
    1914:	dd 23       	and	r29, r29
    1916:	89 f0       	breq	.+34     	; 0x193a <ModuleControllerStateHandle+0x5a>
    1918:	d1 30       	cpi	r29, 0x01	; 1
    191a:	e1 f1       	breq	.+120    	; 0x1994 <ModuleControllerStateHandle+0xb4>
    191c:	e0 c0       	rjmp	.+448    	; 0x1ade <ModuleControllerStateHandle+0x1fe>
    191e:	d3 30       	cpi	r29, 0x03	; 3
    1920:	09 f4       	brne	.+2      	; 0x1924 <ModuleControllerStateHandle+0x44>
    1922:	a9 c0       	rjmp	.+338    	; 0x1a76 <ModuleControllerStateHandle+0x196>
    1924:	d5 30       	cpi	r29, 0x05	; 5
    1926:	09 f0       	breq	.+2      	; 0x192a <ModuleControllerStateHandle+0x4a>
    1928:	da c0       	rjmp	.+436    	; 0x1ade <ModuleControllerStateHandle+0x1fe>
    192a:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <sg_eModuleControllerStateCurrent>
    192e:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <sg_eModuleControllerStateTarget>
    1932:	d0 91 07 01 	lds	r29, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    1936:	0e 94 5b 27 	call	0x4eb6	; 0x4eb6 <ADCSetPowerOn>
    193a:	88 b1       	in	r24, 0x08	; 8
    193c:	8f 7e       	andi	r24, 0xEF	; 239
    193e:	88 b9       	out	0x08, r24	; 8
    1940:	68 e8       	ldi	r22, 0x88	; 136
    1942:	73 e1       	ldi	r23, 0x13	; 19
    1944:	80 e0       	ldi	r24, 0x00	; 0
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	0e 94 4f 21 	call	0x429e	; 0x429e <Delay>
    194c:	8e b1       	in	r24, 0x0e	; 14
    194e:	8d 7f       	andi	r24, 0xFD	; 253
    1950:	8e b9       	out	0x0e, r24	; 14
    1952:	68 e8       	ldi	r22, 0x88	; 136
    1954:	73 e1       	ldi	r23, 0x13	; 19
    1956:	80 e0       	ldi	r24, 0x00	; 0
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	0e 94 4f 21 	call	0x429e	; 0x429e <Delay>
    195e:	eb e6       	ldi	r30, 0x6B	; 107
    1960:	f0 e0       	ldi	r31, 0x00	; 0
    1962:	80 81       	ld	r24, Z
    1964:	8d 7f       	andi	r24, 0xFD	; 253
    1966:	80 83       	st	Z, r24
    1968:	e8 e6       	ldi	r30, 0x68	; 104
    196a:	f0 e0       	ldi	r31, 0x00	; 0
    196c:	80 81       	ld	r24, Z
    196e:	8d 7f       	andi	r24, 0xFD	; 253
    1970:	80 83       	st	Z, r24
    1972:	81 e0       	ldi	r24, 0x01	; 1
    1974:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <sg_bCellBalanceReady>
    1978:	10 92 19 03 	sts	0x0319, r1	; 0x800319 <sg_bCellBalancedOnce>
    197c:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <sg_bStopDischarge>
    1980:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <sg_bSDCardReady>
    1984:	88 23       	and	r24, r24
    1986:	09 f4       	brne	.+2      	; 0x198a <ModuleControllerStateHandle+0xaa>
    1988:	b2 c0       	rjmp	.+356    	; 0x1aee <ModuleControllerStateHandle+0x20e>
    198a:	0e 94 4e 20 	call	0x409c	; 0x409c <STORE_EndSession>
    198e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <sg_bSDCardReady>
    1992:	ad c0       	rjmp	.+346    	; 0x1aee <ModuleControllerStateHandle+0x20e>
    1994:	88 b1       	in	r24, 0x08	; 8
    1996:	8f 7e       	andi	r24, 0xEF	; 239
    1998:	88 b9       	out	0x08, r24	; 8
    199a:	68 e8       	ldi	r22, 0x88	; 136
    199c:	73 e1       	ldi	r23, 0x13	; 19
    199e:	80 e0       	ldi	r24, 0x00	; 0
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	0e 94 4f 21 	call	0x429e	; 0x429e <Delay>
    19a6:	eb e6       	ldi	r30, 0x6B	; 107
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	80 81       	ld	r24, Z
    19ac:	8d 7f       	andi	r24, 0xFD	; 253
    19ae:	80 83       	st	Z, r24
    19b0:	e8 e6       	ldi	r30, 0x68	; 104
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	80 81       	ld	r24, Z
    19b6:	8d 7f       	andi	r24, 0xFD	; 253
    19b8:	80 83       	st	Z, r24
    19ba:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <sg_bModuleRegistered>
    19be:	88 23       	and	r24, r24
    19c0:	19 f0       	breq	.+6      	; 0x19c8 <ModuleControllerStateHandle+0xe8>
    19c2:	8e b1       	in	r24, 0x0e	; 14
    19c4:	82 60       	ori	r24, 0x02	; 2
    19c6:	8e b9       	out	0x0e, r24	; 14
    19c8:	68 e8       	ldi	r22, 0x88	; 136
    19ca:	73 e1       	ldi	r23, 0x13	; 19
    19cc:	80 e0       	ldi	r24, 0x00	; 0
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	0e 94 4f 21 	call	0x429e	; 0x429e <Delay>
    19d4:	81 e0       	ldi	r24, 0x01	; 1
    19d6:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <sg_bCellBalanceReady>
    19da:	10 92 19 03 	sts	0x0319, r1	; 0x800319 <sg_bCellBalancedOnce>
    19de:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <sg_bStopDischarge>
    19e2:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <sg_bSDCardReady>
    19e6:	88 23       	and	r24, r24
    19e8:	09 f4       	brne	.+2      	; 0x19ec <ModuleControllerStateHandle+0x10c>
    19ea:	81 c0       	rjmp	.+258    	; 0x1aee <ModuleControllerStateHandle+0x20e>
    19ec:	0e 94 25 21 	call	0x424a	; 0x424a <STORE_StartNewSession>
    19f0:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <sg_bSDCardReady>
    19f4:	7c c0       	rjmp	.+248    	; 0x1aee <ModuleControllerStateHandle+0x20e>
    19f6:	61 99       	sbic	0x0c, 1	; 12
    19f8:	0d c0       	rjmp	.+26     	; 0x1a14 <ModuleControllerStateHandle+0x134>
    19fa:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <sg_bModuleRegistered>
    19fe:	88 23       	and	r24, r24
    1a00:	19 f0       	breq	.+6      	; 0x1a08 <ModuleControllerStateHandle+0x128>
    1a02:	8e b1       	in	r24, 0x0e	; 14
    1a04:	82 60       	ori	r24, 0x02	; 2
    1a06:	8e b9       	out	0x0e, r24	; 14
    1a08:	68 e8       	ldi	r22, 0x88	; 136
    1a0a:	73 e1       	ldi	r23, 0x13	; 19
    1a0c:	80 e0       	ldi	r24, 0x00	; 0
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	0e 94 4f 21 	call	0x429e	; 0x429e <Delay>
    1a14:	cb e0       	ldi	r28, 0x0B	; 11
    1a16:	2a c0       	rjmp	.+84     	; 0x1a6c <ModuleControllerStateHandle+0x18c>
    1a18:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <sg_bModuleRegistered>
    1a1c:	88 23       	and	r24, r24
    1a1e:	49 f0       	breq	.+18     	; 0x1a32 <ModuleControllerStateHandle+0x152>
    1a20:	88 b1       	in	r24, 0x08	; 8
    1a22:	80 61       	ori	r24, 0x10	; 16
    1a24:	88 b9       	out	0x08, r24	; 8
    1a26:	88 b1       	in	r24, 0x08	; 8
    1a28:	8f 77       	andi	r24, 0x7F	; 127
    1a2a:	88 b9       	out	0x08, r24	; 8
    1a2c:	88 b1       	in	r24, 0x08	; 8
    1a2e:	80 68       	ori	r24, 0x80	; 128
    1a30:	88 b9       	out	0x08, r24	; 8
    1a32:	68 ee       	ldi	r22, 0xE8	; 232
    1a34:	73 e0       	ldi	r23, 0x03	; 3
    1a36:	80 e0       	ldi	r24, 0x00	; 0
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	0e 94 4f 21 	call	0x429e	; 0x429e <Delay>
    1a3e:	88 b1       	in	r24, 0x08	; 8
    1a40:	8f 7e       	andi	r24, 0xEF	; 239
    1a42:	88 b9       	out	0x08, r24	; 8
    1a44:	68 e8       	ldi	r22, 0x88	; 136
    1a46:	73 e1       	ldi	r23, 0x13	; 19
    1a48:	80 e0       	ldi	r24, 0x00	; 0
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	0e 94 4f 21 	call	0x429e	; 0x429e <Delay>
    1a50:	60 e5       	ldi	r22, 0x50	; 80
    1a52:	73 ec       	ldi	r23, 0xC3	; 195
    1a54:	80 e0       	ldi	r24, 0x00	; 0
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	0e 94 4f 21 	call	0x429e	; 0x429e <Delay>
    1a5c:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <sg_bOvercurrentSignal>
    1a60:	88 23       	and	r24, r24
    1a62:	19 f0       	breq	.+6      	; 0x1a6a <ModuleControllerStateHandle+0x18a>
    1a64:	10 92 17 03 	sts	0x0317, r1	; 0x800317 <sg_bOvercurrentSignal>
    1a68:	01 c0       	rjmp	.+2      	; 0x1a6c <ModuleControllerStateHandle+0x18c>
    1a6a:	c1 2f       	mov	r28, r17
    1a6c:	1f ef       	ldi	r17, 0xFF	; 255
    1a6e:	1c 0f       	add	r17, r28
    1a70:	c1 11       	cpse	r28, r1
    1a72:	d2 cf       	rjmp	.-92     	; 0x1a18 <ModuleControllerStateHandle+0x138>
    1a74:	3c c0       	rjmp	.+120    	; 0x1aee <ModuleControllerStateHandle+0x20e>
    1a76:	61 99       	sbic	0x0c, 1	; 12
    1a78:	0d c0       	rjmp	.+26     	; 0x1a94 <ModuleControllerStateHandle+0x1b4>
    1a7a:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <sg_bModuleRegistered>
    1a7e:	88 23       	and	r24, r24
    1a80:	19 f0       	breq	.+6      	; 0x1a88 <ModuleControllerStateHandle+0x1a8>
    1a82:	8e b1       	in	r24, 0x0e	; 14
    1a84:	82 60       	ori	r24, 0x02	; 2
    1a86:	8e b9       	out	0x0e, r24	; 14
    1a88:	68 e8       	ldi	r22, 0x88	; 136
    1a8a:	73 e1       	ldi	r23, 0x13	; 19
    1a8c:	80 e0       	ldi	r24, 0x00	; 0
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	0e 94 4f 21 	call	0x429e	; 0x429e <Delay>
    1a94:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <sg_bModuleRegistered>
    1a98:	88 23       	and	r24, r24
    1a9a:	49 f0       	breq	.+18     	; 0x1aae <ModuleControllerStateHandle+0x1ce>
    1a9c:	88 b1       	in	r24, 0x08	; 8
    1a9e:	80 61       	ori	r24, 0x10	; 16
    1aa0:	88 b9       	out	0x08, r24	; 8
    1aa2:	88 b1       	in	r24, 0x08	; 8
    1aa4:	8f 77       	andi	r24, 0x7F	; 127
    1aa6:	88 b9       	out	0x08, r24	; 8
    1aa8:	88 b1       	in	r24, 0x08	; 8
    1aaa:	80 68       	ori	r24, 0x80	; 128
    1aac:	88 b9       	out	0x08, r24	; 8
    1aae:	68 e8       	ldi	r22, 0x88	; 136
    1ab0:	73 e1       	ldi	r23, 0x13	; 19
    1ab2:	80 e0       	ldi	r24, 0x00	; 0
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	0e 94 4f 21 	call	0x429e	; 0x429e <Delay>
    1aba:	10 92 1a 03 	sts	0x031A, r1	; 0x80031a <sg_bCellBalanceReady>
    1abe:	10 92 19 03 	sts	0x0319, r1	; 0x800319 <sg_bCellBalancedOnce>
    1ac2:	81 e0       	ldi	r24, 0x01	; 1
    1ac4:	80 93 18 03 	sts	0x0318, r24	; 0x800318 <sg_bStopDischarge>
    1ac8:	eb e6       	ldi	r30, 0x6B	; 107
    1aca:	f0 e0       	ldi	r31, 0x00	; 0
    1acc:	80 81       	ld	r24, Z
    1ace:	82 60       	ori	r24, 0x02	; 2
    1ad0:	80 83       	st	Z, r24
    1ad2:	e8 e6       	ldi	r30, 0x68	; 104
    1ad4:	f0 e0       	ldi	r31, 0x00	; 0
    1ad6:	80 81       	ld	r24, Z
    1ad8:	82 60       	ori	r24, 0x02	; 2
    1ada:	80 83       	st	Z, r24
    1adc:	08 c0       	rjmp	.+16     	; 0x1aee <ModuleControllerStateHandle+0x20e>
    1ade:	4a ef       	ldi	r20, 0xFA	; 250
    1ae0:	53 e0       	ldi	r21, 0x03	; 3
    1ae2:	67 e4       	ldi	r22, 0x47	; 71
    1ae4:	72 e0       	ldi	r23, 0x02	; 2
    1ae6:	80 e0       	ldi	r24, 0x00	; 0
    1ae8:	0e 94 00 24 	call	0x4800	; 0x4800 <PlatformAssert>
    1aec:	d5 e0       	ldi	r29, 0x05	; 5
    1aee:	d0 93 07 01 	sts	0x0107, r29	; 0x800107 <sg_eModuleControllerStateCurrent>
    1af2:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <SendModuleControllerStatus>
    1af6:	df 91       	pop	r29
    1af8:	cf 91       	pop	r28
    1afa:	1f 91       	pop	r17
    1afc:	08 95       	ret

Disassembly of section .text.PlatformGetRegistrationID:

00004ef6 <PlatformGetRegistrationID>:
}

uint8_t PlatformGetRegistrationID( void )
{
	return(sg_u8ModuleRegistrationID);
}
    4ef6:	80 91 27 03 	lds	r24, 0x0327	; 0x800327 <sg_u8ModuleRegistrationID>
    4efa:	08 95       	ret

Disassembly of section .text.SetSysclock:

00004ec2 <SetSysclock>:

void SetSysclock( void )
{
	// First set the prescaler enable
	CLKPR = (1 << CLKPCE);
    4ec2:	e1 e6       	ldi	r30, 0x61	; 97
    4ec4:	f0 e0       	ldi	r31, 0x00	; 0
    4ec6:	80 e8       	ldi	r24, 0x80	; 128
    4ec8:	80 83       	st	Z, r24
	
	// Now set the desired prescale value
	CLKPR = SYSCLOCK_PRESCALE;
    4eca:	10 82       	st	Z, r1
    4ecc:	08 95       	ret

Disassembly of section .text.ModuleControllerGetUniqueID:

00003a3a <ModuleControllerGetUniqueID>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    3a3a:	cf 92       	push	r12
    3a3c:	df 92       	push	r13
    3a3e:	ef 92       	push	r14
    3a40:	ff 92       	push	r15
    3a42:	80 e0       	ldi	r24, 0x00	; 0
    3a44:	90 e0       	ldi	r25, 0x00	; 0
    3a46:	0e 94 f2 26 	call	0x4de4	; 0x4de4 <EEPROMRead>
    3a4a:	c8 2e       	mov	r12, r24
    3a4c:	d1 2c       	mov	r13, r1
    3a4e:	e1 2c       	mov	r14, r1
    3a50:	f1 2c       	mov	r15, r1
    3a52:	81 e0       	ldi	r24, 0x01	; 1
    3a54:	90 e0       	ldi	r25, 0x00	; 0
    3a56:	0e 94 f2 26 	call	0x4de4	; 0x4de4 <EEPROMRead>
    3a5a:	90 e0       	ldi	r25, 0x00	; 0
    3a5c:	a0 e0       	ldi	r26, 0x00	; 0
    3a5e:	b0 e0       	ldi	r27, 0x00	; 0
    3a60:	ba 2f       	mov	r27, r26
    3a62:	a9 2f       	mov	r26, r25
    3a64:	98 2f       	mov	r25, r24
    3a66:	88 27       	eor	r24, r24
    3a68:	c8 2a       	or	r12, r24
    3a6a:	d9 2a       	or	r13, r25
    3a6c:	ea 2a       	or	r14, r26
    3a6e:	fb 2a       	or	r15, r27
    3a70:	82 e0       	ldi	r24, 0x02	; 2
    3a72:	90 e0       	ldi	r25, 0x00	; 0
    3a74:	0e 94 f2 26 	call	0x4de4	; 0x4de4 <EEPROMRead>
    3a78:	90 e0       	ldi	r25, 0x00	; 0
    3a7a:	a0 e0       	ldi	r26, 0x00	; 0
    3a7c:	b0 e0       	ldi	r27, 0x00	; 0
    3a7e:	dc 01       	movw	r26, r24
    3a80:	99 27       	eor	r25, r25
    3a82:	88 27       	eor	r24, r24
    3a84:	c8 2a       	or	r12, r24
    3a86:	d9 2a       	or	r13, r25
    3a88:	ea 2a       	or	r14, r26
    3a8a:	fb 2a       	or	r15, r27
    3a8c:	83 e0       	ldi	r24, 0x03	; 3
    3a8e:	90 e0       	ldi	r25, 0x00	; 0
    3a90:	0e 94 f2 26 	call	0x4de4	; 0x4de4 <EEPROMRead>
    3a94:	90 e0       	ldi	r25, 0x00	; 0
    3a96:	a0 e0       	ldi	r26, 0x00	; 0
    3a98:	b0 e0       	ldi	r27, 0x00	; 0
    3a9a:	b8 2f       	mov	r27, r24
    3a9c:	aa 27       	eor	r26, r26
    3a9e:	99 27       	eor	r25, r25
    3aa0:	88 27       	eor	r24, r24
    3aa2:	bc 01       	movw	r22, r24
    3aa4:	cd 01       	movw	r24, r26
    3aa6:	6c 29       	or	r22, r12
    3aa8:	7d 29       	or	r23, r13
    3aaa:	8e 29       	or	r24, r14
    3aac:	9f 29       	or	r25, r15
    3aae:	ff 90       	pop	r15
    3ab0:	ef 90       	pop	r14
    3ab2:	df 90       	pop	r13
    3ab4:	cf 90       	pop	r12
    3ab6:	08 95       	ret

Disassembly of section .text.TimerInit:

000042f0 <TimerInit>:
    42f0:	14 bc       	out	0x24, r1	; 36
    42f2:	92 e0       	ldi	r25, 0x02	; 2
    42f4:	95 bd       	out	0x25, r25	; 37
    42f6:	a4 e6       	ldi	r26, 0x64	; 100
    42f8:	b0 e0       	ldi	r27, 0x00	; 0
    42fa:	8c 91       	ld	r24, X
    42fc:	87 7f       	andi	r24, 0xF7	; 247
    42fe:	8c 93       	st	X, r24
    4300:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f0080>
    4304:	84 e0       	ldi	r24, 0x04	; 4
    4306:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f0081>
    430a:	96 bb       	out	0x16, r25	; 22
    430c:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f0084>
    4310:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f0085>
    4314:	8b 5c       	subi	r24, 0xCB	; 203
    4316:	93 4f       	sbci	r25, 0xF3	; 243
    4318:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f0089>
    431c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f0088>
    4320:	ef e6       	ldi	r30, 0x6F	; 111
    4322:	f0 e0       	ldi	r31, 0x00	; 0
    4324:	80 81       	ld	r24, Z
    4326:	82 60       	ori	r24, 0x02	; 2
    4328:	80 83       	st	Z, r24
    432a:	8c 91       	ld	r24, X
    432c:	8f 7e       	andi	r24, 0xEF	; 239
    432e:	8c 93       	st	X, r24
    4330:	ae e6       	ldi	r26, 0x6E	; 110
    4332:	b0 e0       	ldi	r27, 0x00	; 0
    4334:	8c 91       	ld	r24, X
    4336:	8e 7f       	andi	r24, 0xFE	; 254
    4338:	8c 93       	st	X, r24
    433a:	80 81       	ld	r24, Z
    433c:	8e 7f       	andi	r24, 0xFE	; 254
    433e:	80 83       	st	Z, r24
    4340:	08 95       	ret

Disassembly of section .text.__vector_12:

00003288 <__vector_12>:
    3288:	78 94       	sei
    328a:	1f 92       	push	r1
    328c:	0f 92       	push	r0
    328e:	0f b6       	in	r0, 0x3f	; 63
    3290:	0f 92       	push	r0
    3292:	11 24       	eor	r1, r1
    3294:	8f 93       	push	r24
    3296:	9f 93       	push	r25
    3298:	ef 93       	push	r30
    329a:	ff 93       	push	r31
    329c:	82 e0       	ldi	r24, 0x02	; 2
    329e:	86 bb       	out	0x16, r24	; 22
    32a0:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f0084>
    32a4:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f0085>
    32a8:	8b 5c       	subi	r24, 0xCB	; 203
    32aa:	93 4f       	sbci	r25, 0xF3	; 243
    32ac:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f0089>
    32b0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f0088>
    32b4:	ef e6       	ldi	r30, 0x6F	; 111
    32b6:	f0 e0       	ldi	r31, 0x00	; 0
    32b8:	80 81       	ld	r24, Z
    32ba:	82 60       	ori	r24, 0x02	; 2
    32bc:	80 83       	st	Z, r24
    32be:	81 e0       	ldi	r24, 0x01	; 1
    32c0:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <sg_bNewTick>
    32c4:	80 91 75 09 	lds	r24, 0x0975	; 0x800975 <sg_u8CellFrameTimer>
    32c8:	8f 5f       	subi	r24, 0xFF	; 255
    32ca:	80 93 75 09 	sts	0x0975, r24	; 0x800975 <sg_u8CellFrameTimer>
    32ce:	80 91 75 09 	lds	r24, 0x0975	; 0x800975 <sg_u8CellFrameTimer>
    32d2:	83 30       	cpi	r24, 0x03	; 3
    32d4:	78 f0       	brcs	.+30     	; 0x32f4 <__vector_12+0x6c>
    32d6:	10 92 75 09 	sts	0x0975, r1	; 0x800975 <sg_u8CellFrameTimer>
    32da:	81 e0       	ldi	r24, 0x01	; 1
    32dc:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <sg_bFrameStart>
    32e0:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <sg_eFrameStatus>
    32e4:	81 30       	cpi	r24, 0x01	; 1
    32e6:	19 f4       	brne	.+6      	; 0x32ee <__vector_12+0x66>
    32e8:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <sg_eFrameStatus>
    32ec:	03 c0       	rjmp	.+6      	; 0x32f4 <__vector_12+0x6c>
    32ee:	81 e0       	ldi	r24, 0x01	; 1
    32f0:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <sg_eFrameStatus>
    32f4:	80 91 72 09 	lds	r24, 0x0972	; 0x800972 <sg_u8TicksSinceLastPackControllerMessage>
    32f8:	8f 3f       	cpi	r24, 0xFF	; 255
    32fa:	29 f0       	breq	.+10     	; 0x3306 <__vector_12+0x7e>
    32fc:	80 91 72 09 	lds	r24, 0x0972	; 0x800972 <sg_u8TicksSinceLastPackControllerMessage>
    3300:	8f 5f       	subi	r24, 0xFF	; 255
    3302:	80 93 72 09 	sts	0x0972, r24	; 0x800972 <sg_u8TicksSinceLastPackControllerMessage>
    3306:	80 91 72 09 	lds	r24, 0x0972	; 0x800972 <sg_u8TicksSinceLastPackControllerMessage>
    330a:	8f 36       	cpi	r24, 0x6F	; 111
    330c:	40 f0       	brcs	.+16     	; 0x331e <__vector_12+0x96>
    330e:	80 91 72 09 	lds	r24, 0x0972	; 0x800972 <sg_u8TicksSinceLastPackControllerMessage>
    3312:	8f 56       	subi	r24, 0x6F	; 111
    3314:	80 93 72 09 	sts	0x0972, r24	; 0x800972 <sg_u8TicksSinceLastPackControllerMessage>
    3318:	81 e0       	ldi	r24, 0x01	; 1
    331a:	80 93 1f 03 	sts	0x031F, r24	; 0x80031f <sg_bPackControllerTimeout>
    331e:	80 91 73 09 	lds	r24, 0x0973	; 0x800973 <sg_u8CellStringPowerTimer>
    3322:	88 23       	and	r24, r24
    3324:	29 f0       	breq	.+10     	; 0x3330 <__vector_12+0xa8>
    3326:	80 91 73 09 	lds	r24, 0x0973	; 0x800973 <sg_u8CellStringPowerTimer>
    332a:	81 50       	subi	r24, 0x01	; 1
    332c:	80 93 73 09 	sts	0x0973, r24	; 0x800973 <sg_u8CellStringPowerTimer>
    3330:	ff 91       	pop	r31
    3332:	ef 91       	pop	r30
    3334:	9f 91       	pop	r25
    3336:	8f 91       	pop	r24
    3338:	0f 90       	pop	r0
    333a:	0f be       	out	0x3f, r0	; 63
    333c:	0f 90       	pop	r0
    333e:	1f 90       	pop	r1
    3340:	18 95       	reti

Disassembly of section .text.WatchdogReset:

00004f04 <WatchdogReset>:
		sg_u8CellStringPowerTimer--;
	}
}

void WatchdogReset( void )
{
    4f04:	08 95       	ret

Disassembly of section .text.WatchdogOff:

00004d00 <WatchdogOff>:
// }

// Assume interrupts are disabled
void WatchdogOff( void )  // turn it off even when WDT_ENABLE is not defined
{
	wdt_reset();
    4d00:	a8 95       	wdr
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    4d02:	0f b6       	in	r0, 0x3f	; 63
    4d04:	f8 94       	cli
    4d06:	a8 95       	wdr
    4d08:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f0060>
    4d0c:	88 61       	ori	r24, 0x18	; 24
    4d0e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f0060>
    4d12:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f0060>
    4d16:	0f be       	out	0x3f, r0	; 63
    4d18:	08 95       	ret

Disassembly of section .text.__vector_28:

00004342 <__vector_28>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    4342:	1f 92       	push	r1
    4344:	0f 92       	push	r0
    4346:	0f b6       	in	r0, 0x3f	; 63
    4348:	0f 92       	push	r0
    434a:	11 24       	eor	r1, r1
    434c:	2f 93       	push	r18
    434e:	3f 93       	push	r19
    4350:	4f 93       	push	r20
    4352:	5f 93       	push	r21
    4354:	6f 93       	push	r22
    4356:	7f 93       	push	r23
    4358:	8f 93       	push	r24
    435a:	9f 93       	push	r25
    435c:	af 93       	push	r26
    435e:	bf 93       	push	r27
    4360:	ef 93       	push	r30
    4362:	ff 93       	push	r31
    4364:	46 e0       	ldi	r20, 0x06	; 6
    4366:	53 e0       	ldi	r21, 0x03	; 3
    4368:	67 e4       	ldi	r22, 0x47	; 71
    436a:	72 e0       	ldi	r23, 0x02	; 2
    436c:	80 e0       	ldi	r24, 0x00	; 0
    436e:	0e 94 00 24 	call	0x4800	; 0x4800 <PlatformAssert>
    4372:	ff 91       	pop	r31
    4374:	ef 91       	pop	r30
    4376:	bf 91       	pop	r27
    4378:	af 91       	pop	r26
    437a:	9f 91       	pop	r25
    437c:	8f 91       	pop	r24
    437e:	7f 91       	pop	r23
    4380:	6f 91       	pop	r22
    4382:	5f 91       	pop	r21
    4384:	4f 91       	pop	r20
    4386:	3f 91       	pop	r19
    4388:	2f 91       	pop	r18
    438a:	0f 90       	pop	r0
    438c:	0f be       	out	0x3f, r0	; 63
    438e:	0f 90       	pop	r0
    4390:	1f 90       	pop	r1
    4392:	18 95       	reti

Disassembly of section .text.__vector_23:

00003710 <__vector_23>:
    3710:	78 94       	sei
    3712:	1f 92       	push	r1
    3714:	0f 92       	push	r0
    3716:	0f b6       	in	r0, 0x3f	; 63
    3718:	0f 92       	push	r0
    371a:	11 24       	eor	r1, r1
    371c:	2f 93       	push	r18
    371e:	3f 93       	push	r19
    3720:	4f 93       	push	r20
    3722:	5f 93       	push	r21
    3724:	6f 93       	push	r22
    3726:	7f 93       	push	r23
    3728:	8f 93       	push	r24
    372a:	9f 93       	push	r25
    372c:	af 93       	push	r26
    372e:	bf 93       	push	r27
    3730:	ef 93       	push	r30
    3732:	ff 93       	push	r31
    3734:	96 b1       	in	r25, 0x06	; 6
    3736:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    373a:	83 30       	cpi	r24, 0x03	; 3
    373c:	21 f0       	breq	.+8      	; 0x3746 <__vector_23+0x36>
    373e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    3742:	82 30       	cpi	r24, 0x02	; 2
    3744:	c9 f4       	brne	.+50     	; 0x3778 <__vector_23+0x68>
    3746:	91 ff       	sbrs	r25, 1
    3748:	17 c0       	rjmp	.+46     	; 0x3778 <__vector_23+0x68>
    374a:	88 b1       	in	r24, 0x08	; 8
    374c:	8f 7e       	andi	r24, 0xEF	; 239
    374e:	88 b9       	out	0x08, r24	; 8
    3750:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    3754:	83 30       	cpi	r24, 0x03	; 3
    3756:	19 f4       	brne	.+6      	; 0x375e <__vector_23+0x4e>
    3758:	81 e0       	ldi	r24, 0x01	; 1
    375a:	0e 94 6c 27 	call	0x4ed8	; 0x4ed8 <ModuleControllerStateSet>
    375e:	eb e6       	ldi	r30, 0x6B	; 107
    3760:	f0 e0       	ldi	r31, 0x00	; 0
    3762:	80 81       	ld	r24, Z
    3764:	8d 7f       	andi	r24, 0xFD	; 253
    3766:	80 83       	st	Z, r24
    3768:	e8 e6       	ldi	r30, 0x68	; 104
    376a:	f0 e0       	ldi	r31, 0x00	; 0
    376c:	80 81       	ld	r24, Z
    376e:	8d 7f       	andi	r24, 0xFD	; 253
    3770:	80 83       	st	Z, r24
    3772:	81 e0       	ldi	r24, 0x01	; 1
    3774:	80 93 17 03 	sts	0x0317, r24	; 0x800317 <sg_bOvercurrentSignal>
    3778:	ff 91       	pop	r31
    377a:	ef 91       	pop	r30
    377c:	bf 91       	pop	r27
    377e:	af 91       	pop	r26
    3780:	9f 91       	pop	r25
    3782:	8f 91       	pop	r24
    3784:	7f 91       	pop	r23
    3786:	6f 91       	pop	r22
    3788:	5f 91       	pop	r21
    378a:	4f 91       	pop	r20
    378c:	3f 91       	pop	r19
    378e:	2f 91       	pop	r18
    3790:	0f 90       	pop	r0
    3792:	0f be       	out	0x3f, r0	; 63
    3794:	0f 90       	pop	r0
    3796:	1f 90       	pop	r1
    3798:	18 95       	reti

Disassembly of section .text.__vector_24:

00004394 <__vector_24>:
    4394:	78 94       	sei
    4396:	1f 92       	push	r1
    4398:	0f 92       	push	r0
    439a:	0f b6       	in	r0, 0x3f	; 63
    439c:	0f 92       	push	r0
    439e:	11 24       	eor	r1, r1
    43a0:	2f 93       	push	r18
    43a2:	3f 93       	push	r19
    43a4:	4f 93       	push	r20
    43a6:	5f 93       	push	r21
    43a8:	6f 93       	push	r22
    43aa:	7f 93       	push	r23
    43ac:	8f 93       	push	r24
    43ae:	9f 93       	push	r25
    43b0:	af 93       	push	r26
    43b2:	bf 93       	push	r27
    43b4:	ef 93       	push	r30
    43b6:	ff 93       	push	r31
    43b8:	8b b1       	in	r24, 0x0b	; 11
    43ba:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <Check5VLoss>
    43be:	ff 91       	pop	r31
    43c0:	ef 91       	pop	r30
    43c2:	bf 91       	pop	r27
    43c4:	af 91       	pop	r26
    43c6:	9f 91       	pop	r25
    43c8:	8f 91       	pop	r24
    43ca:	7f 91       	pop	r23
    43cc:	6f 91       	pop	r22
    43ce:	5f 91       	pop	r21
    43d0:	4f 91       	pop	r20
    43d2:	3f 91       	pop	r19
    43d4:	2f 91       	pop	r18
    43d6:	0f 90       	pop	r0
    43d8:	0f be       	out	0x3f, r0	; 63
    43da:	0f 90       	pop	r0
    43dc:	1f 90       	pop	r1
    43de:	18 95       	reti

Disassembly of section .text.vUARTRXStart:

00004d8e <vUARTRXStart>:
}

// Called at the start of cell string data via MC RX
void vUARTRXStart(void)
{
	sg_u8CellBufferRX = 0;
    4d8e:	10 92 70 09 	sts	0x0970, r1	; 0x800970 <sg_u8CellBufferRX>
	sg_u8CellIndex = 0;
    4d92:	10 92 71 09 	sts	0x0971, r1	; 0x800971 <sg_u8CellIndex>
	sg_u16BytesReceived = 0;
    4d96:	10 92 5d 09 	sts	0x095D, r1	; 0x80095d <sg_u16BytesReceived+0x1>
    4d9a:	10 92 5c 09 	sts	0x095C, r1	; 0x80095c <sg_u16BytesReceived>
	sg_u8CellReports = 0;
    4d9e:	10 92 6f 09 	sts	0x096F, r1	; 0x80096f <sg_u8CellReports>
    4da2:	08 95       	ret

Disassembly of section .text.vUARTRXEnd:

00004c1e <vUARTRXEnd>:
	// disable the edge interrupt
//	VUART_RX_DISABLE();
	// disable bit timer interrupt, should already be off but just in case
//	TIMER_CHB_INT_DISABLE();
	// update bytes and cells received
	sg_sFrame.sg_u16BytesReceived = sg_u16BytesReceived;
    4c1e:	80 91 5c 09 	lds	r24, 0x095C	; 0x80095c <sg_u16BytesReceived>
    4c22:	90 91 5d 09 	lds	r25, 0x095D	; 0x80095d <sg_u16BytesReceived+0x1>
    4c26:	e0 e1       	ldi	r30, 0x10	; 16
    4c28:	f1 e0       	ldi	r31, 0x01	; 1
    4c2a:	94 a7       	std	Z+44, r25	; 0x2c
    4c2c:	83 a7       	std	Z+43, r24	; 0x2b
	sg_sFrame.sg_u8CellCPUCount = sg_u8CellReports;
    4c2e:	80 91 6f 09 	lds	r24, 0x096F	; 0x80096f <sg_u8CellReports>
    4c32:	85 a7       	std	Z+45, r24	; 0x2d
	sg_u16BytesReceived = 0;
    4c34:	10 92 5d 09 	sts	0x095D, r1	; 0x80095d <sg_u16BytesReceived+0x1>
    4c38:	10 92 5c 09 	sts	0x095C, r1	; 0x80095c <sg_u16BytesReceived>
	sg_u8CellReports = 0;
    4c3c:	10 92 6f 09 	sts	0x096F, r1	; 0x80096f <sg_u8CellReports>
    4c40:	08 95       	ret

Disassembly of section .text.vUARTRXData:

00003ca8 <vUARTRXData>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    3ca8:	e0 91 70 09 	lds	r30, 0x0970	; 0x800970 <sg_u8CellBufferRX>
    3cac:	21 e0       	ldi	r18, 0x01	; 1
    3cae:	2e 0f       	add	r18, r30
    3cb0:	20 93 70 09 	sts	0x0970, r18	; 0x800970 <sg_u8CellBufferRX>
    3cb4:	f0 e0       	ldi	r31, 0x00	; 0
    3cb6:	e0 5b       	subi	r30, 0xB0	; 176
    3cb8:	f6 4f       	sbci	r31, 0xF6	; 246
    3cba:	80 83       	st	Z, r24
    3cbc:	80 91 5c 09 	lds	r24, 0x095C	; 0x80095c <sg_u16BytesReceived>
    3cc0:	90 91 5d 09 	lds	r25, 0x095D	; 0x80095d <sg_u16BytesReceived+0x1>
    3cc4:	01 96       	adiw	r24, 0x01	; 1
    3cc6:	90 93 5d 09 	sts	0x095D, r25	; 0x80095d <sg_u16BytesReceived+0x1>
    3cca:	80 93 5c 09 	sts	0x095C, r24	; 0x80095c <sg_u16BytesReceived>
    3cce:	24 30       	cpi	r18, 0x04	; 4
    3cd0:	38 f1       	brcs	.+78     	; 0x3d20 <vUARTRXData+0x78>
    3cd2:	10 92 70 09 	sts	0x0970, r1	; 0x800970 <sg_u8CellBufferRX>
    3cd6:	80 91 71 09 	lds	r24, 0x0971	; 0x800971 <sg_u8CellIndex>
    3cda:	8c 36       	cpi	r24, 0x6C	; 108
    3cdc:	08 f5       	brcc	.+66     	; 0x3d20 <vUARTRXData+0x78>
    3cde:	e8 2f       	mov	r30, r24
    3ce0:	f0 e0       	ldi	r31, 0x00	; 0
    3ce2:	75 96       	adiw	r30, 0x15	; 21
    3ce4:	ee 0f       	add	r30, r30
    3ce6:	ff 1f       	adc	r31, r31
    3ce8:	ee 0f       	add	r30, r30
    3cea:	ff 1f       	adc	r31, r31
    3cec:	e0 5f       	subi	r30, 0xF0	; 240
    3cee:	fe 4f       	sbci	r31, 0xFE	; 254
    3cf0:	a0 e5       	ldi	r26, 0x50	; 80
    3cf2:	b9 e0       	ldi	r27, 0x09	; 9
    3cf4:	4d 91       	ld	r20, X+
    3cf6:	5d 91       	ld	r21, X+
    3cf8:	6d 91       	ld	r22, X+
    3cfa:	7c 91       	ld	r23, X
    3cfc:	13 97       	sbiw	r26, 0x03	; 3
    3cfe:	40 83       	st	Z, r20
    3d00:	51 83       	std	Z+1, r21	; 0x01
    3d02:	62 83       	std	Z+2, r22	; 0x02
    3d04:	73 83       	std	Z+3, r23	; 0x03
    3d06:	1d 92       	st	X+, r1
    3d08:	1d 92       	st	X+, r1
    3d0a:	1d 92       	st	X+, r1
    3d0c:	1c 92       	st	X, r1
    3d0e:	13 97       	sbiw	r26, 0x03	; 3
    3d10:	8f 5f       	subi	r24, 0xFF	; 255
    3d12:	80 93 71 09 	sts	0x0971, r24	; 0x800971 <sg_u8CellIndex>
    3d16:	80 91 6f 09 	lds	r24, 0x096F	; 0x80096f <sg_u8CellReports>
    3d1a:	8f 5f       	subi	r24, 0xFF	; 255
    3d1c:	80 93 6f 09 	sts	0x096F, r24	; 0x80096f <sg_u8CellReports>
    3d20:	08 95       	ret

Disassembly of section .text.PlatformGetSendData:

000048aa <PlatformGetSendData>:
uint16_t PlatformGetSendData( bool bUpdateBalanceStatus )
{
	uint16_t u16SendValue = 0;
	
	
	if( sg_bStopDischarge )
    48aa:	90 91 18 03 	lds	r25, 0x0318	; 0x800318 <sg_bStopDischarge>
    48ae:	99 23       	and	r25, r25
    48b0:	51 f0       	breq	.+20     	; 0x48c6 <PlatformGetSendData+0x1c>
	{
		if (bUpdateBalanceStatus)	// don't update if ony an availability check
    48b2:	88 23       	and	r24, r24
    48b4:	59 f0       	breq	.+22     	; 0x48cc <PlatformGetSendData+0x22>
		{
			sg_bStopDischarge = false;
    48b6:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <sg_bStopDischarge>
			sg_bCellBalancedOnce = true;
    48ba:	81 e0       	ldi	r24, 0x01	; 1
    48bc:	80 93 19 03 	sts	0x0319, r24	; 0x800319 <sg_bCellBalancedOnce>
		}
		u16SendValue = 0x3ff;
    48c0:	8f ef       	ldi	r24, 0xFF	; 255
    48c2:	93 e0       	ldi	r25, 0x03	; 3
    48c4:	08 95       	ret
			}
		}
		else
#endif
		{
			u16SendValue |= MSG_CELL_SEND_REPORT;
    48c6:	80 e0       	ldi	r24, 0x00	; 0
    48c8:	90 e8       	ldi	r25, 0x80	; 128
    48ca:	08 95       	ret
		if (bUpdateBalanceStatus)	// don't update if ony an availability check
		{
			sg_bStopDischarge = false;
			sg_bCellBalancedOnce = true;
		}
		u16SendValue = 0x3ff;
    48cc:	8f ef       	ldi	r24, 0xFF	; 255
    48ce:	93 e0       	ldi	r25, 0x03	; 3
#endif
		}
	}
	
	return( u16SendValue );
}
    48d0:	08 95       	ret

Disassembly of section .text.ADCCallback:

00004970 <ADCCallback>:
// Called every time there's an ADC read since apparently ISR can't access global variables?  compiler fails
void ADCCallback(EADCType eType,
				 uint16_t u16Reading)
{
	// End of chain? Indicate it's time for an ADC update
	if ((EADCTYPE_COUNT-1) == eType)
    4970:	84 30       	cpi	r24, 0x04	; 4
    4972:	19 f4       	brne	.+6      	; 0x497a <ADCCallback+0xa>
	{
		sg_bADCUpdate = true;
    4974:	91 e0       	ldi	r25, 0x01	; 1
    4976:	90 93 16 03 	sts	0x0316, r25	; 0x800316 <sg_bADCUpdate>
	}
	sg_sFrame.ADCReadings[eType].u16Reading = u16Reading;
    497a:	90 e0       	ldi	r25, 0x00	; 0
    497c:	fc 01       	movw	r30, r24
    497e:	ee 0f       	add	r30, r30
    4980:	ff 1f       	adc	r31, r31
    4982:	8e 0f       	add	r24, r30
    4984:	9f 1f       	adc	r25, r31
    4986:	fc 01       	movw	r30, r24
    4988:	eb 5a       	subi	r30, 0xAB	; 171
    498a:	fe 4f       	sbci	r31, 0xFE	; 254
    498c:	72 83       	std	Z+2, r23	; 0x02
    498e:	61 83       	std	Z+1, r22	; 0x01
	sg_sFrame.ADCReadings[eType].bValid = true;
    4990:	81 e0       	ldi	r24, 0x01	; 1
    4992:	80 83       	st	Z, r24
    4994:	08 95       	ret

Disassembly of section .text.FrameInit:

00002dea <FrameInit>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    2dea:	cf 93       	push	r28
    2dec:	df 93       	push	r29
    2dee:	81 11       	cpse	r24, r1
    2df0:	0d c0       	rjmp	.+26     	; 0x2e0c <FrameInit+0x22>
    2df2:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <sg_sFrame>
    2df6:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <sg_sFrame+0x1>
    2dfa:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <sg_sFrame+0x2>
    2dfe:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <sg_sFrame+0x3>
    2e02:	8a 37       	cpi	r24, 0x7A	; 122
    2e04:	9a 4d       	sbci	r25, 0xDA	; 218
    2e06:	a7 47       	sbci	r26, 0x77	; 119
    2e08:	ba 4b       	sbci	r27, 0xBA	; 186
    2e0a:	29 f1       	breq	.+74     	; 0x2e56 <FrameInit+0x6c>
    2e0c:	c0 e1       	ldi	r28, 0x10	; 16
    2e0e:	d1 e0       	ldi	r29, 0x01	; 1
    2e10:	84 e0       	ldi	r24, 0x04	; 4
    2e12:	92 e0       	ldi	r25, 0x02	; 2
    2e14:	fe 01       	movw	r30, r28
    2e16:	9c 01       	movw	r18, r24
    2e18:	11 92       	st	Z+, r1
    2e1a:	21 50       	subi	r18, 0x01	; 1
    2e1c:	30 40       	sbci	r19, 0x00	; 0
    2e1e:	e1 f7       	brne	.-8      	; 0x2e18 <FrameInit+0x2e>
    2e20:	9d 83       	std	Y+5, r25	; 0x05
    2e22:	8c 83       	std	Y+4, r24	; 0x04
    2e24:	8a e7       	ldi	r24, 0x7A	; 122
    2e26:	9a ed       	ldi	r25, 0xDA	; 218
    2e28:	a7 e7       	ldi	r26, 0x77	; 119
    2e2a:	ba eb       	ldi	r27, 0xBA	; 186
    2e2c:	88 83       	st	Y, r24
    2e2e:	99 83       	std	Y+1, r25	; 0x01
    2e30:	aa 83       	std	Y+2, r26	; 0x02
    2e32:	bb 83       	std	Y+3, r27	; 0x03
    2e34:	0e 94 1d 1d 	call	0x3a3a	; 0x3a3a <ModuleControllerGetUniqueID>
    2e38:	6e 87       	std	Y+14, r22	; 0x0e
    2e3a:	7f 87       	std	Y+15, r23	; 0x0f
    2e3c:	88 8b       	std	Y+16, r24	; 0x10
    2e3e:	99 8b       	std	Y+17, r25	; 0x11
    2e40:	8f ef       	ldi	r24, 0xFF	; 255
    2e42:	8a a7       	std	Y+42, r24	; 0x2a
    2e44:	8b 8b       	std	Y+19, r24	; 0x13
    2e46:	1c 8a       	std	Y+20, r1	; 0x14
    2e48:	84 e0       	ldi	r24, 0x04	; 4
    2e4a:	90 e0       	ldi	r25, 0x00	; 0
    2e4c:	0e 94 f2 26 	call	0x4de4	; 0x4de4 <EEPROMRead>
    2e50:	0e 94 23 18 	call	0x3046	; 0x3046 <CellCountExpectedSet>
    2e54:	2a c0       	rjmp	.+84     	; 0x2eaa <FrameInit+0xc0>
    2e56:	e0 e1       	ldi	r30, 0x10	; 16
    2e58:	f1 e0       	ldi	r31, 0x01	; 1
    2e5a:	17 a2       	std	Z+39, r1	; 0x27
    2e5c:	11 a6       	std	Z+41, r1	; 0x29
    2e5e:	10 a6       	std	Z+40, r1	; 0x28
    2e60:	12 a6       	std	Z+42, r1	; 0x2a
    2e62:	15 a6       	std	Z+45, r1	; 0x2d
    2e64:	16 a6       	std	Z+46, r1	; 0x2e
    2e66:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <sg_sFrame+0x3d>
    2e6a:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <sg_sFrame+0x3e>
    2e6e:	a0 91 4f 01 	lds	r26, 0x014F	; 0x80014f <sg_sFrame+0x3f>
    2e72:	b0 91 50 01 	lds	r27, 0x0150	; 0x800150 <sg_sFrame+0x40>
    2e76:	89 2b       	or	r24, r25
    2e78:	8a 2b       	or	r24, r26
    2e7a:	8b 2b       	or	r24, r27
    2e7c:	b1 f4       	brne	.+44     	; 0x2eaa <FrameInit+0xc0>
    2e7e:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <sg_sFrame+0x3d>
    2e82:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <sg_sFrame+0x3e>
    2e86:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <sg_sFrame+0x3f>
    2e8a:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <sg_sFrame+0x40>
    2e8e:	10 ae       	std	Z+56, r1	; 0x38
    2e90:	17 aa       	std	Z+55, r1	; 0x37
    2e92:	12 ae       	std	Z+58, r1	; 0x3a
    2e94:	11 ae       	std	Z+57, r1	; 0x39
    2e96:	14 ae       	std	Z+60, r1	; 0x3c
    2e98:	13 ae       	std	Z+59, r1	; 0x3b
    2e9a:	8f e9       	ldi	r24, 0x9F	; 159
    2e9c:	95 e1       	ldi	r25, 0x15	; 21
    2e9e:	92 ab       	std	Z+50, r25	; 0x32
    2ea0:	81 ab       	std	Z+49, r24	; 0x31
    2ea2:	94 ab       	std	Z+52, r25	; 0x34
    2ea4:	83 ab       	std	Z+51, r24	; 0x33
    2ea6:	96 ab       	std	Z+54, r25	; 0x36
    2ea8:	85 ab       	std	Z+53, r24	; 0x35
    2eaa:	8f ef       	ldi	r24, 0xFF	; 255
    2eac:	80 93 79 09 	sts	0x0979, r24	; 0x800979 <sg_u8CurrentBufferIndex>
    2eb0:	df 91       	pop	r29
    2eb2:	cf 91       	pop	r28
    2eb4:	08 95       	ret

Disassembly of section .text.CellStringPowerStateMachine:

00003824 <CellStringPowerStateMachine>:
    3824:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <sg_eStringPowerState>
    3828:	82 30       	cpi	r24, 0x02	; 2
    382a:	49 f1       	breq	.+82     	; 0x387e <CellStringPowerStateMachine+0x5a>
    382c:	28 f4       	brcc	.+10     	; 0x3838 <CellStringPowerStateMachine+0x14>
    382e:	88 23       	and	r24, r24
    3830:	41 f0       	breq	.+16     	; 0x3842 <CellStringPowerStateMachine+0x1e>
    3832:	81 30       	cpi	r24, 0x01	; 1
    3834:	91 f0       	breq	.+36     	; 0x385a <CellStringPowerStateMachine+0x36>
    3836:	32 c0       	rjmp	.+100    	; 0x389c <CellStringPowerStateMachine+0x78>
    3838:	83 30       	cpi	r24, 0x03	; 3
    383a:	61 f1       	breq	.+88     	; 0x3894 <CellStringPowerStateMachine+0x70>
    383c:	84 30       	cpi	r24, 0x04	; 4
    383e:	a9 f1       	breq	.+106    	; 0x38aa <CellStringPowerStateMachine+0x86>
    3840:	2d c0       	rjmp	.+90     	; 0x389c <CellStringPowerStateMachine+0x78>
    3842:	85 b1       	in	r24, 0x05	; 5
    3844:	8f 7e       	andi	r24, 0xEF	; 239
    3846:	85 b9       	out	0x05, r24	; 5
    3848:	81 e0       	ldi	r24, 0x01	; 1
    384a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <sg_eStringPowerState>
    384e:	80 e0       	ldi	r24, 0x00	; 0
    3850:	0e 94 f5 16 	call	0x2dea	; 0x2dea <FrameInit>
    3854:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <SendModuleControllerStatus>
    3858:	08 95       	ret
    385a:	85 b1       	in	r24, 0x05	; 5
    385c:	8f 7e       	andi	r24, 0xEF	; 239
    385e:	85 b9       	out	0x05, r24	; 5
    3860:	80 e0       	ldi	r24, 0x00	; 0
    3862:	0e 94 f5 16 	call	0x2dea	; 0x2dea <FrameInit>
    3866:	82 e0       	ldi	r24, 0x02	; 2
    3868:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <sg_eStringPowerState>
    386c:	81 e0       	ldi	r24, 0x01	; 1
    386e:	80 93 73 09 	sts	0x0973, r24	; 0x800973 <sg_u8CellStringPowerTimer>
    3872:	e0 e1       	ldi	r30, 0x10	; 16
    3874:	f1 e0       	ldi	r31, 0x01	; 1
    3876:	8f ef       	ldi	r24, 0xFF	; 255
    3878:	83 8b       	std	Z+19, r24	; 0x13
    387a:	14 8a       	std	Z+20, r1	; 0x14
    387c:	08 95       	ret
    387e:	80 91 73 09 	lds	r24, 0x0973	; 0x800973 <sg_u8CellStringPowerTimer>
    3882:	81 11       	cpse	r24, r1
    3884:	12 c0       	rjmp	.+36     	; 0x38aa <CellStringPowerStateMachine+0x86>
    3886:	85 b1       	in	r24, 0x05	; 5
    3888:	80 61       	ori	r24, 0x10	; 16
    388a:	85 b9       	out	0x05, r24	; 5
    388c:	83 e0       	ldi	r24, 0x03	; 3
    388e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <sg_eStringPowerState>
    3892:	08 95       	ret
    3894:	84 e0       	ldi	r24, 0x04	; 4
    3896:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <sg_eStringPowerState>
    389a:	08 95       	ret
    389c:	4d e6       	ldi	r20, 0x6D	; 109
    389e:	52 e0       	ldi	r21, 0x02	; 2
    38a0:	67 e4       	ldi	r22, 0x47	; 71
    38a2:	72 e0       	ldi	r23, 0x02	; 2
    38a4:	80 e0       	ldi	r24, 0x00	; 0
    38a6:	0e 94 00 24 	call	0x4800	; 0x4800 <PlatformAssert>
    38aa:	08 95       	ret

Disassembly of section .text.main:

00000c32 <main>:
 c32:	cf 93       	push	r28
 c34:	df 93       	push	r29
 c36:	cd b7       	in	r28, 0x3d	; 61
 c38:	de b7       	in	r29, 0x3e	; 62
 c3a:	28 97       	sbiw	r28, 0x08	; 8
 c3c:	0f b6       	in	r0, 0x3f	; 63
 c3e:	f8 94       	cli
 c40:	de bf       	out	0x3e, r29	; 62
 c42:	0f be       	out	0x3f, r0	; 63
 c44:	cd bf       	out	0x3d, r28	; 61
 c46:	0e 94 80 26 	call	0x4d00	; 0x4d00 <WatchdogOff>
 c4a:	88 b1       	in	r24, 0x08	; 8
 c4c:	8f 7e       	andi	r24, 0xEF	; 239
 c4e:	88 b9       	out	0x08, r24	; 8
 c50:	87 b1       	in	r24, 0x07	; 7
 c52:	80 61       	ori	r24, 0x10	; 16
 c54:	87 b9       	out	0x07, r24	; 7
 c56:	87 b1       	in	r24, 0x07	; 7
 c58:	8d 7f       	andi	r24, 0xFD	; 253
 c5a:	87 b9       	out	0x07, r24	; 7
 c5c:	87 b1       	in	r24, 0x07	; 7
 c5e:	80 68       	ori	r24, 0x80	; 128
 c60:	87 b9       	out	0x07, r24	; 7
 c62:	88 b1       	in	r24, 0x08	; 8
 c64:	8f 7e       	andi	r24, 0xEF	; 239
 c66:	88 b9       	out	0x08, r24	; 8
 c68:	8d b1       	in	r24, 0x0d	; 13
 c6a:	82 60       	ori	r24, 0x02	; 2
 c6c:	8d b9       	out	0x0d, r24	; 13
 c6e:	8e b1       	in	r24, 0x0e	; 14
 c70:	8d 7f       	andi	r24, 0xFD	; 253
 c72:	8e b9       	out	0x0e, r24	; 14
 c74:	84 b1       	in	r24, 0x04	; 4
 c76:	80 61       	ori	r24, 0x10	; 16
 c78:	84 b9       	out	0x04, r24	; 4
 c7a:	85 b1       	in	r24, 0x05	; 5
 c7c:	8f 7e       	andi	r24, 0xEF	; 239
 c7e:	85 b9       	out	0x05, r24	; 5
 c80:	84 b7       	in	r24, 0x34	; 52
 c82:	80 93 6d 09 	sts	0x096D, r24	; 0x80096d <sg_u8Reason>
 c86:	80 91 6d 09 	lds	r24, 0x096D	; 0x80096d <sg_u8Reason>
 c8a:	83 ff       	sbrs	r24, 3
 c8c:	0a c0       	rjmp	.+20     	; 0xca2 <main+0x70>
 c8e:	80 91 28 03 	lds	r24, 0x0328	; 0x800328 <sg_eWDTCurrentStatus>
 c92:	e0 e1       	ldi	r30, 0x10	; 16
 c94:	f1 e0       	ldi	r31, 0x01	; 1
 c96:	82 89       	ldd	r24, Z+18	; 0x12
 c98:	8f 5f       	subi	r24, 0xFF	; 255
 c9a:	82 8b       	std	Z+18, r24	; 0x12
 c9c:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <ModuleControllerStateHandle>
 ca0:	70 c0       	rjmp	.+224    	; 0xd82 <main+0x150>
 ca2:	80 91 6d 09 	lds	r24, 0x096D	; 0x80096d <sg_u8Reason>
 ca6:	80 91 6d 09 	lds	r24, 0x096D	; 0x80096d <sg_u8Reason>
 caa:	80 91 6d 09 	lds	r24, 0x096D	; 0x80096d <sg_u8Reason>
 cae:	f8 94       	cli
 cb0:	0e 94 61 27 	call	0x4ec2	; 0x4ec2 <SetSysclock>
 cb4:	0e 94 78 21 	call	0x42f0	; 0x42f0 <TimerInit>
 cb8:	0e 94 ee 22 	call	0x45dc	; 0x45dc <vUARTInit>
 cbc:	0e 94 89 11 	call	0x2312	; 0x2312 <ADCInit>
 cc0:	0e 94 dc 1c 	call	0x39b8	; 0x39b8 <STORE_Init>
 cc4:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <sg_bSDCardReady>
 cc8:	81 e0       	ldi	r24, 0x01	; 1
 cca:	0e 94 f5 16 	call	0x2dea	; 0x2dea <FrameInit>
 cce:	89 e0       	ldi	r24, 0x09	; 9
 cd0:	90 e0       	ldi	r25, 0x00	; 0
 cd2:	0e 94 f2 26 	call	0x4de4	; 0x4de4 <EEPROMRead>
 cd6:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <sg_u8SequentailCountMismatchThreshold>
 cda:	8a b1       	in	r24, 0x0a	; 10
 cdc:	8f 7b       	andi	r24, 0xBF	; 191
 cde:	8a b9       	out	0x0a, r24	; 10
 ce0:	8b b1       	in	r24, 0x0b	; 11
 ce2:	80 64       	ori	r24, 0x40	; 64
 ce4:	8b b9       	out	0x0b, r24	; 11
 ce6:	11 e0       	ldi	r17, 0x01	; 1
 ce8:	1b bb       	out	0x1b, r17	; 27
 cea:	82 e0       	ldi	r24, 0x02	; 2
 cec:	8b bb       	out	0x1b, r24	; 27
 cee:	84 e0       	ldi	r24, 0x04	; 4
 cf0:	8b bb       	out	0x1b, r24	; 27
 cf2:	88 e0       	ldi	r24, 0x08	; 8
 cf4:	8b bb       	out	0x1b, r24	; 27
 cf6:	ec e6       	ldi	r30, 0x6C	; 108
 cf8:	f0 e0       	ldi	r31, 0x00	; 0
 cfa:	80 81       	ld	r24, Z
 cfc:	80 64       	ori	r24, 0x40	; 64
 cfe:	80 83       	st	Z, r24
 d00:	8b b3       	in	r24, 0x1b	; 27
 d02:	84 60       	ori	r24, 0x04	; 4
 d04:	8b bb       	out	0x1b, r24	; 27
 d06:	88 ee       	ldi	r24, 0xE8	; 232
 d08:	98 e0       	ldi	r25, 0x08	; 8
 d0a:	0e 94 67 27 	call	0x4ece	; 0x4ece <CANSetRXCallback>
 d0e:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <CANInit>
 d12:	10 92 27 03 	sts	0x0327, r1	; 0x800327 <sg_u8ModuleRegistrationID>
 d16:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <sg_bModuleRegistered>
 d1a:	10 92 76 09 	sts	0x0976, r1	; 0x800976 <sg_bIgnoreStatusRequests>
 d1e:	80 e0       	ldi	r24, 0x00	; 0
 d20:	0e 94 6c 27 	call	0x4ed8	; 0x4ed8 <ModuleControllerStateSet>
 d24:	10 93 22 03 	sts	0x0322, r17	; 0x800322 <sg_bSendAnnouncement>
 d28:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <sg_bPackControllerTimeout>
 d2c:	10 92 1e 03 	sts	0x031E, r1	; 0x80031e <sg_bSendModuleControllerStatus>
 d30:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <sg_bSendCellStatus>
 d34:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <sg_bSendHardwareDetail>
 d38:	10 92 1b 03 	sts	0x031B, r1	; 0x80031b <sg_bSendCellCommStatus>
 d3c:	10 92 1a 03 	sts	0x031A, r1	; 0x80031a <sg_bCellBalanceReady>
 d40:	10 92 19 03 	sts	0x0319, r1	; 0x800319 <sg_bCellBalancedOnce>
 d44:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <sg_bStopDischarge>
 d48:	10 92 17 03 	sts	0x0317, r1	; 0x800317 <sg_bOvercurrentSignal>
 d4c:	10 92 24 03 	sts	0x0324, r1	; 0x800324 <sg_u8CellStatusTarget>
 d50:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <sg_u8CellStatus>
 d54:	10 92 26 03 	sts	0x0326, r1	; 0x800326 <sg_u8SOC>
 d58:	10 92 25 03 	sts	0x0325, r1	; 0x800325 <sg_u8SOH>
 d5c:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <sg_u8SequentailCountMismatchThreshold>
 d60:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <sg_u8SequentailCellCountMismatches>
 d64:	0e 94 5f 0b 	call	0x16be	; 0x16be <RTCInit>
 d68:	85 e0       	ldi	r24, 0x05	; 5
 d6a:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <sg_eModuleControllerStateCurrent>
 d6e:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <sg_eModuleControllerStateTarget>
 d72:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <sg_eModuleControllerStateMax>
 d76:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <sg_bModuleRegistered>
 d7a:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <sg_eStringPowerState>
 d7e:	10 93 0c 01 	sts	0x010C, r17	; 0x80010c <sg_eFrameStatus>
 d82:	78 94       	sei
 d84:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <sg_bNewTick>
 d88:	88 23       	and	r24, r24
 d8a:	e1 f3       	breq	.-8      	; 0xd84 <main+0x152>
 d8c:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <sg_bNewTick>
 d90:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <CANCheckTxStatus>
 d94:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <sg_bModuleRegistered>
 d98:	81 11       	cpse	r24, r1
 d9a:	22 c0       	rjmp	.+68     	; 0xde0 <main+0x1ae>
 d9c:	80 91 78 09 	lds	r24, 0x0978	; 0x800978 <sg_bAnnouncementPending>
 da0:	88 23       	and	r24, r24
 da2:	11 f1       	breq	.+68     	; 0xde8 <main+0x1b6>
 da4:	80 91 77 09 	lds	r24, 0x0977	; 0x800977 <sg_u8AnnouncementDelayTicks>
 da8:	88 23       	and	r24, r24
 daa:	29 f0       	breq	.+10     	; 0xdb6 <main+0x184>
 dac:	80 91 77 09 	lds	r24, 0x0977	; 0x800977 <sg_u8AnnouncementDelayTicks>
 db0:	81 50       	subi	r24, 0x01	; 1
 db2:	80 93 77 09 	sts	0x0977, r24	; 0x800977 <sg_u8AnnouncementDelayTicks>
 db6:	80 91 77 09 	lds	r24, 0x0977	; 0x800977 <sg_u8AnnouncementDelayTicks>
 dba:	81 11       	cpse	r24, r1
 dbc:	15 c0       	rjmp	.+42     	; 0xde8 <main+0x1b6>
 dbe:	81 e0       	ldi	r24, 0x01	; 1
 dc0:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <sg_bSendAnnouncement>
 dc4:	10 92 78 09 	sts	0x0978, r1	; 0x800978 <sg_bAnnouncementPending>
 dc8:	83 e5       	ldi	r24, 0x53	; 83
 dca:	92 e0       	ldi	r25, 0x02	; 2
 dcc:	a0 e0       	ldi	r26, 0x00	; 0
 dce:	af 93       	push	r26
 dd0:	9f 93       	push	r25
 dd2:	8f 93       	push	r24
 dd4:	0e 94 3f 27 	call	0x4e7e	; 0x4e7e <DebugOut>
 dd8:	0f 90       	pop	r0
 dda:	0f 90       	pop	r0
 ddc:	0f 90       	pop	r0
 dde:	04 c0       	rjmp	.+8      	; 0xde8 <main+0x1b6>
 de0:	ce 01       	movw	r24, r28
 de2:	01 96       	adiw	r24, 0x01	; 1
 de4:	0e 94 08 04 	call	0x810	; 0x810 <ControllerStatusMessagesSend>
 de8:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <sg_bPackControllerTimeout>
 dec:	88 23       	and	r24, r24
 dee:	81 f0       	breq	.+32     	; 0xe10 <main+0x1de>
 df0:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <sg_bPackControllerTimeout>
 df4:	10 92 27 03 	sts	0x0327, r1	; 0x800327 <sg_u8ModuleRegistrationID>
 df8:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <sg_bModuleRegistered>
 dfc:	10 92 76 09 	sts	0x0976, r1	; 0x800976 <sg_bIgnoreStatusRequests>
 e00:	81 e0       	ldi	r24, 0x01	; 1
 e02:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <sg_bSendAnnouncement>
 e06:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <SendModuleControllerStatus>
 e0a:	80 e0       	ldi	r24, 0x00	; 0
 e0c:	0e 94 6c 27 	call	0x4ed8	; 0x4ed8 <ModuleControllerStateSet>
 e10:	ef e6       	ldi	r30, 0x6F	; 111
 e12:	f0 e0       	ldi	r31, 0x00	; 0
 e14:	90 81       	ld	r25, Z
 e16:	80 81       	ld	r24, Z
 e18:	8d 7f       	andi	r24, 0xFD	; 253
 e1a:	80 83       	st	Z, r24
 e1c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <sg_eFrameStatus>
 e20:	20 91 74 09 	lds	r18, 0x0974	; 0x800974 <sg_bFrameStart>
 e24:	90 83       	st	Z, r25
 e26:	81 30       	cpi	r24, 0x01	; 1
 e28:	09 f0       	breq	.+2      	; 0xe2c <main+0x1fa>
 e2a:	61 c0       	rjmp	.+194    	; 0xeee <main+0x2bc>
 e2c:	22 23       	and	r18, r18
 e2e:	09 f4       	brne	.+2      	; 0xe32 <main+0x200>
 e30:	55 c0       	rjmp	.+170    	; 0xedc <main+0x2aa>
 e32:	10 92 74 09 	sts	0x0974, r1	; 0x800974 <sg_bFrameStart>
 e36:	0e 94 12 1c 	call	0x3824	; 0x3824 <CellStringPowerStateMachine>
 e3a:	0e 94 0f 26 	call	0x4c1e	; 0x4c1e <vUARTRXEnd>
 e3e:	ce 01       	movw	r24, r28
 e40:	01 96       	adiw	r24, 0x01	; 1
 e42:	0e 94 95 07 	call	0xf2a	; 0xf2a <CellStringProcess>
 e46:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <sg_eStringPowerState>
 e4a:	84 30       	cpi	r24, 0x04	; 4
 e4c:	29 f5       	brne	.+74     	; 0xe98 <main+0x266>
 e4e:	e0 e1       	ldi	r30, 0x10	; 16
 e50:	f1 e0       	ldi	r31, 0x01	; 1
 e52:	95 a5       	ldd	r25, Z+45	; 0x2d
 e54:	85 89       	ldd	r24, Z+21	; 0x15
 e56:	98 17       	cp	r25, r24
 e58:	e9 f0       	breq	.+58     	; 0xe94 <main+0x262>
 e5a:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <sg_sFrame+0x15>
 e5e:	88 23       	and	r24, r24
 e60:	c9 f0       	breq	.+50     	; 0xe94 <main+0x262>
 e62:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <sg_u8SequentailCountMismatchThreshold>
 e66:	88 23       	and	r24, r24
 e68:	b9 f0       	breq	.+46     	; 0xe98 <main+0x266>
 e6a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <sg_u8SequentailCountMismatchThreshold>
 e6e:	8f 3f       	cpi	r24, 0xFF	; 255
 e70:	99 f0       	breq	.+38     	; 0xe98 <main+0x266>
 e72:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <sg_u8SequentailCellCountMismatches>
 e76:	8f 5f       	subi	r24, 0xFF	; 255
 e78:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <sg_u8SequentailCellCountMismatches>
 e7c:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <sg_u8SequentailCellCountMismatches>
 e80:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <sg_u8SequentailCountMismatchThreshold>
 e84:	98 17       	cp	r25, r24
 e86:	40 f0       	brcs	.+16     	; 0xe98 <main+0x266>
 e88:	81 e0       	ldi	r24, 0x01	; 1
 e8a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <sg_eStringPowerState>
 e8e:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <sg_u8SequentailCellCountMismatches>
 e92:	02 c0       	rjmp	.+4      	; 0xe98 <main+0x266>
 e94:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <sg_u8SequentailCellCountMismatches>
 e98:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <sg_bSendAnnouncement>
 e9c:	88 23       	and	r24, r24
 e9e:	f1 f0       	breq	.+60     	; 0xedc <main+0x2aa>
 ea0:	86 e5       	ldi	r24, 0x56	; 86
 ea2:	89 83       	std	Y+1, r24	; 0x01
 ea4:	80 e2       	ldi	r24, 0x20	; 32
 ea6:	8a 83       	std	Y+2, r24	; 0x02
 ea8:	82 e0       	ldi	r24, 0x02	; 2
 eaa:	8b 83       	std	Y+3, r24	; 0x03
 eac:	83 e0       	ldi	r24, 0x03	; 3
 eae:	8c 83       	std	Y+4, r24	; 0x04
 eb0:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <sg_sFrame+0xe>
 eb4:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <sg_sFrame+0xf>
 eb8:	a0 91 20 01 	lds	r26, 0x0120	; 0x800120 <sg_sFrame+0x10>
 ebc:	b0 91 21 01 	lds	r27, 0x0121	; 0x800121 <sg_sFrame+0x11>
 ec0:	8d 83       	std	Y+5, r24	; 0x05
 ec2:	9e 83       	std	Y+6, r25	; 0x06
 ec4:	af 83       	std	Y+7, r26	; 0x07
 ec6:	b8 87       	std	Y+8, r27	; 0x08
 ec8:	48 e0       	ldi	r20, 0x08	; 8
 eca:	be 01       	movw	r22, r28
 ecc:	6f 5f       	subi	r22, 0xFF	; 255
 ece:	7f 4f       	sbci	r23, 0xFF	; 255
 ed0:	80 e0       	ldi	r24, 0x00	; 0
 ed2:	0e 94 b1 26 	call	0x4d62	; 0x4d62 <CANSendMessage>
 ed6:	81 11       	cpse	r24, r1
 ed8:	10 92 22 03 	sts	0x0322, r1	; 0x800322 <sg_bSendAnnouncement>
 edc:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <ModuleControllerStateHandle>
 ee0:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <sg_bOvercurrentSignal>
 ee4:	88 23       	and	r24, r24
 ee6:	b1 f0       	breq	.+44     	; 0xf14 <main+0x2e2>
 ee8:	10 92 17 03 	sts	0x0317, r1	; 0x800317 <sg_bOvercurrentSignal>
 eec:	13 c0       	rjmp	.+38     	; 0xf14 <main+0x2e2>
 eee:	22 23       	and	r18, r18
 ef0:	89 f0       	breq	.+34     	; 0xf14 <main+0x2e2>
 ef2:	10 92 74 09 	sts	0x0974, r1	; 0x800974 <sg_bFrameStart>
 ef6:	0e 94 12 1c 	call	0x3824	; 0x3824 <CellStringPowerStateMachine>
 efa:	80 e0       	ldi	r24, 0x00	; 0
 efc:	0e 94 f5 16 	call	0x2dea	; 0x2dea <FrameInit>
 f00:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <sg_eStringPowerState>
 f04:	84 30       	cpi	r24, 0x04	; 4
 f06:	31 f4       	brne	.+12     	; 0xf14 <main+0x2e2>
 f08:	0e 94 69 24 	call	0x48d2	; 0x48d2 <vUARTInitReceive>
 f0c:	0e 94 71 27 	call	0x4ee2	; 0x4ee2 <vUARTRXReset>
 f10:	0e 94 a5 20 	call	0x414a	; 0x414a <vUARTStarttx>
 f14:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <sg_bADCUpdate>
 f18:	88 23       	and	r24, r24
 f1a:	21 f0       	breq	.+8      	; 0xf24 <main+0x2f2>
 f1c:	10 92 16 03 	sts	0x0316, r1	; 0x800316 <sg_bADCUpdate>
 f20:	0e 94 4d 13 	call	0x269a	; 0x269a <ModuleCurrentConvertReadings>
 f24:	0e 94 2c 24 	call	0x4858	; 0x4858 <ADCStartConversion>
 f28:	2d cf       	rjmp	.-422    	; 0xd84 <main+0x152>

Disassembly of section .text.IsLeapYear:

00004648 <IsLeapYear>:
	return( bResult );
}

// Returns true if u16Year is a leap year
static bool IsLeapYear(uint16_t u16Year)
{
    4648:	9c 01       	movw	r18, r24
	bool bLeapYear = false;
	
	if ((u16Year % 400) == 0)
    464a:	60 e9       	ldi	r22, 0x90	; 144
    464c:	71 e0       	ldi	r23, 0x01	; 1
    464e:	0e 94 7d 24 	call	0x48fa	; 0x48fa <__udivmodhi4>
    4652:	89 2b       	or	r24, r25
    4654:	69 f0       	breq	.+26     	; 0x4670 <IsLeapYear+0x28>
	{
		bLeapYear = true;
	}
	else
	if ((u16Year % 100) == 0)
    4656:	c9 01       	movw	r24, r18
    4658:	64 e6       	ldi	r22, 0x64	; 100
    465a:	70 e0       	ldi	r23, 0x00	; 0
    465c:	0e 94 7d 24 	call	0x48fa	; 0x48fa <__udivmodhi4>
    4660:	89 2b       	or	r24, r25
    4662:	41 f0       	breq	.+16     	; 0x4674 <IsLeapYear+0x2c>
	{
		// Not a leap year if divisible by 100 but not by 400
	}
	else
	if ((u16Year % 4) == 0)
    4664:	23 70       	andi	r18, 0x03	; 3
    4666:	33 27       	eor	r19, r19
    4668:	23 2b       	or	r18, r19
    466a:	31 f0       	breq	.+12     	; 0x4678 <IsLeapYear+0x30>
}

// Returns true if u16Year is a leap year
static bool IsLeapYear(uint16_t u16Year)
{
	bool bLeapYear = false;
    466c:	80 e0       	ldi	r24, 0x00	; 0
    466e:	08 95       	ret
	
	if ((u16Year % 400) == 0)
	{
		bLeapYear = true;
    4670:	81 e0       	ldi	r24, 0x01	; 1
    4672:	08 95       	ret
}

// Returns true if u16Year is a leap year
static bool IsLeapYear(uint16_t u16Year)
{
	bool bLeapYear = false;
    4674:	80 e0       	ldi	r24, 0x00	; 0
    4676:	08 95       	ret
		// Not a leap year if divisible by 100 but not by 400
	}
	else
	if ((u16Year % 4) == 0)
	{
		bLeapYear = true;
    4678:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return(bLeapYear);
}
    467a:	08 95       	ret

Disassembly of section .text.RTCStartTransaction:

0000442c <RTCStartTransaction>:
}

static bool RTCStartTransaction( uint8_t u8Address, 
								 bool bRead, 
								 bool bAllowUnstick )
{
    442c:	ff 92       	push	r15
    442e:	0f 93       	push	r16
    4430:	1f 93       	push	r17
    4432:	cf 93       	push	r28
    4434:	df 93       	push	r29
    4436:	f8 2e       	mov	r15, r24
    4438:	06 2f       	mov	r16, r22
    443a:	14 2f       	mov	r17, r20
	bool bResult = false;
	uint8_t u8Tries = RTC_MAX_ADDRESS_TRIES;
    443c:	d3 e0       	ldi	r29, 0x03	; 3

static bool RTCStartTransaction( uint8_t u8Address, 
								 bool bRead, 
								 bool bAllowUnstick )
{
	bool bResult = false;
    443e:	c0 e0       	ldi	r28, 0x00	; 0
	uint8_t u8Tries = RTC_MAX_ADDRESS_TRIES;
	
	while( (false == bResult) && u8Tries )
    4440:	0c c0       	rjmp	.+24     	; 0x445a <RTCStartTransaction+0x2e>
	{
		u8Tries--;
    4442:	d1 50       	subi	r29, 0x01	; 1
		
		bResult = I2CStartTransaction( u8Address, bRead );
    4444:	60 2f       	mov	r22, r16
    4446:	8f 2d       	mov	r24, r15
    4448:	0e 94 41 24 	call	0x4882	; 0x4882 <I2CStartTransaction>
    444c:	c8 2f       	mov	r28, r24
	
		if( false == bAllowUnstick )
    444e:	11 23       	and	r17, r17
    4450:	41 f0       	breq	.+16     	; 0x4462 <RTCStartTransaction+0x36>
		{
			break;
		}
		
		// Unstick and retry on failure
		if( false == bResult )
    4452:	81 11       	cpse	r24, r1
    4454:	02 c0       	rjmp	.+4      	; 0x445a <RTCStartTransaction+0x2e>
		{
			I2CUnstick();
    4456:	0e 94 79 22 	call	0x44f2	; 0x44f2 <I2CUnstick>
								 bool bAllowUnstick )
{
	bool bResult = false;
	uint8_t u8Tries = RTC_MAX_ADDRESS_TRIES;
	
	while( (false == bResult) && u8Tries )
    445a:	c1 11       	cpse	r28, r1
    445c:	02 c0       	rjmp	.+4      	; 0x4462 <RTCStartTransaction+0x36>
    445e:	d1 11       	cpse	r29, r1
    4460:	f0 cf       	rjmp	.-32     	; 0x4442 <RTCStartTransaction+0x16>
			I2CUnstick();
		}
	}
	
	return( bResult );
}
    4462:	8c 2f       	mov	r24, r28
    4464:	df 91       	pop	r29
    4466:	cf 91       	pop	r28
    4468:	1f 91       	pop	r17
    446a:	0f 91       	pop	r16
    446c:	ff 90       	pop	r15
    446e:	08 95       	ret

Disassembly of section .text.StructTMToHW:

000041f6 <StructTMToHW>:
}

// Converts struct tm to SMCP7940NTime structure
static void StructTMToHW(struct tm *psTimeTM,
						 SMCP7940NTime *psTime)
{
    41f6:	cf 93       	push	r28
    41f8:	df 93       	push	r29
    41fa:	dc 01       	movw	r26, r24
    41fc:	fb 01       	movw	r30, r22
	memset((void *) psTime, 0, sizeof(*psTime));
    41fe:	87 e0       	ldi	r24, 0x07	; 7
    4200:	eb 01       	movw	r28, r22
    4202:	19 92       	st	Y+, r1
    4204:	8a 95       	dec	r24
    4206:	e9 f7       	brne	.-6      	; 0x4202 <StructTMToHW+0xc>
	
	psTime->u8Seconds = psTimeTM->tm_sec;
    4208:	8c 91       	ld	r24, X
    420a:	80 83       	st	Z, r24
	psTime->u8Minutes = psTimeTM->tm_min;
    420c:	12 96       	adiw	r26, 0x02	; 2
    420e:	8c 91       	ld	r24, X
    4210:	12 97       	sbiw	r26, 0x02	; 2
    4212:	81 83       	std	Z+1, r24	; 0x01
	psTime->u8Hours = psTimeTM->tm_hour;
    4214:	14 96       	adiw	r26, 0x04	; 4
    4216:	8c 91       	ld	r24, X
    4218:	14 97       	sbiw	r26, 0x04	; 4
    421a:	82 83       	std	Z+2, r24	; 0x02
	psTime->u8Day = psTimeTM->tm_mday;
    421c:	16 96       	adiw	r26, 0x06	; 6
    421e:	8c 91       	ld	r24, X
    4220:	16 97       	sbiw	r26, 0x06	; 6
    4222:	84 83       	std	Z+4, r24	; 0x04
	psTime->u8Month = psTimeTM->tm_mon;
    4224:	18 96       	adiw	r26, 0x08	; 8
    4226:	8c 91       	ld	r24, X
    4228:	18 97       	sbiw	r26, 0x08	; 8
    422a:	85 83       	std	Z+5, r24	; 0x05
	
	if (psTimeTM->tm_year > (2099-1900))
    422c:	1a 96       	adiw	r26, 0x0a	; 10
    422e:	8d 91       	ld	r24, X+
    4230:	9c 91       	ld	r25, X
    4232:	1b 97       	sbiw	r26, 0x0b	; 11
    4234:	88 3c       	cpi	r24, 0xC8	; 200
    4236:	91 05       	cpc	r25, r1
    4238:	1c f0       	brlt	.+6      	; 0x4240 <StructTMToHW+0x4a>
	{
		psTime->u8Year = psTimeTM->tm_year - 2100;
    423a:	84 53       	subi	r24, 0x34	; 52
    423c:	86 83       	std	Z+6, r24	; 0x06
    423e:	02 c0       	rjmp	.+4      	; 0x4244 <StructTMToHW+0x4e>
	}
	else
	{
		psTime->u8Year = psTimeTM->tm_year - 2000;
    4240:	80 5d       	subi	r24, 0xD0	; 208
    4242:	86 83       	std	Z+6, r24	; 0x06
	}
	
}
    4244:	df 91       	pop	r29
    4246:	cf 91       	pop	r28
    4248:	08 95       	ret

Disassembly of section .text.HWToStructTM:

00003b36 <HWToStructTM>:
}

// Converts an SMCP7940NTime structure to struct tm
static void HWToStructTM(SMCP7940NTime *psTime,
						 struct tm *psTimeTM)
{
    3b36:	cf 93       	push	r28
    3b38:	df 93       	push	r29
    3b3a:	dc 01       	movw	r26, r24
    3b3c:	fb 01       	movw	r30, r22
	// At this point, the time is in STime and we should
	// turn that in to time_t
	memset((void *) psTimeTM, 0, sizeof(*psTimeTM));
    3b3e:	89 e1       	ldi	r24, 0x19	; 25
    3b40:	eb 01       	movw	r28, r22
    3b42:	19 92       	st	Y+, r1
    3b44:	8a 95       	dec	r24
    3b46:	e9 f7       	brne	.-6      	; 0x3b42 <HWToStructTM+0xc>
	
	psTimeTM->tm_sec = psTime->u8Seconds;
    3b48:	8c 91       	ld	r24, X
    3b4a:	90 e0       	ldi	r25, 0x00	; 0
    3b4c:	91 83       	std	Z+1, r25	; 0x01
    3b4e:	80 83       	st	Z, r24
	psTimeTM->tm_min = psTime->u8Minutes;
    3b50:	11 96       	adiw	r26, 0x01	; 1
    3b52:	8c 91       	ld	r24, X
    3b54:	11 97       	sbiw	r26, 0x01	; 1
    3b56:	90 e0       	ldi	r25, 0x00	; 0
    3b58:	93 83       	std	Z+3, r25	; 0x03
    3b5a:	82 83       	std	Z+2, r24	; 0x02
	psTimeTM->tm_hour = psTime->u8Hours;
    3b5c:	12 96       	adiw	r26, 0x02	; 2
    3b5e:	8c 91       	ld	r24, X
    3b60:	12 97       	sbiw	r26, 0x02	; 2
    3b62:	90 e0       	ldi	r25, 0x00	; 0
    3b64:	95 83       	std	Z+5, r25	; 0x05
    3b66:	84 83       	std	Z+4, r24	; 0x04
	psTimeTM->tm_mday = psTime->u8Day;
    3b68:	14 96       	adiw	r26, 0x04	; 4
    3b6a:	8c 91       	ld	r24, X
    3b6c:	14 97       	sbiw	r26, 0x04	; 4
    3b6e:	90 e0       	ldi	r25, 0x00	; 0
    3b70:	97 83       	std	Z+7, r25	; 0x07
    3b72:	86 83       	std	Z+6, r24	; 0x06
	psTimeTM->tm_mon = psTime->u8Month - 1;
    3b74:	15 96       	adiw	r26, 0x05	; 5
    3b76:	8c 91       	ld	r24, X
    3b78:	15 97       	sbiw	r26, 0x05	; 5
    3b7a:	90 e0       	ldi	r25, 0x00	; 0
    3b7c:	01 97       	sbiw	r24, 0x01	; 1
    3b7e:	91 87       	std	Z+9, r25	; 0x09
    3b80:	80 87       	std	Z+8, r24	; 0x08
	
	if (psTime->u8Year < YEAR_ROLLOVER_CUTOFF)
    3b82:	16 96       	adiw	r26, 0x06	; 6
    3b84:	8c 91       	ld	r24, X
    3b86:	84 31       	cpi	r24, 0x14	; 20
    3b88:	30 f4       	brcc	.+12     	; 0x3b96 <HWToStructTM+0x60>
	{
		psTimeTM->tm_year = 2100 + psTime->u8Year;
    3b8a:	90 e0       	ldi	r25, 0x00	; 0
    3b8c:	8c 5c       	subi	r24, 0xCC	; 204
    3b8e:	97 4f       	sbci	r25, 0xF7	; 247
    3b90:	93 87       	std	Z+11, r25	; 0x0b
    3b92:	82 87       	std	Z+10, r24	; 0x0a
    3b94:	05 c0       	rjmp	.+10     	; 0x3ba0 <HWToStructTM+0x6a>
	}
	else
	{
		psTimeTM->tm_year = 2000 + psTime->u8Year;
    3b96:	90 e0       	ldi	r25, 0x00	; 0
    3b98:	80 53       	subi	r24, 0x30	; 48
    3b9a:	98 4f       	sbci	r25, 0xF8	; 248
    3b9c:	93 87       	std	Z+11, r25	; 0x0b
    3b9e:	82 87       	std	Z+10, r24	; 0x0a
	}	
	
	psTimeTM->tm_year -= 1900;
    3ba0:	82 85       	ldd	r24, Z+10	; 0x0a
    3ba2:	93 85       	ldd	r25, Z+11	; 0x0b
    3ba4:	8c 56       	subi	r24, 0x6C	; 108
    3ba6:	97 40       	sbci	r25, 0x07	; 7
    3ba8:	93 87       	std	Z+11, r25	; 0x0b
    3baa:	82 87       	std	Z+10, r24	; 0x0a
}
    3bac:	df 91       	pop	r29
    3bae:	cf 91       	pop	r28
    3bb0:	08 95       	ret

Disassembly of section .text.__vector_10:

000038ac <__vector_10>:
// # Of seconds since January 1, 1970
static volatile uint64_t sg_u64Time;

// Called once per second on rev 1 and newer hardware
ISR(INT3_vect, ISR_NOBLOCK)
{
    38ac:	78 94       	sei
    38ae:	1f 92       	push	r1
    38b0:	0f 92       	push	r0
    38b2:	0f b6       	in	r0, 0x3f	; 63
    38b4:	0f 92       	push	r0
    38b6:	11 24       	eor	r1, r1
    38b8:	2f 93       	push	r18
    38ba:	3f 93       	push	r19
    38bc:	4f 93       	push	r20
    38be:	5f 93       	push	r21
    38c0:	6f 93       	push	r22
    38c2:	7f 93       	push	r23
    38c4:	8f 93       	push	r24
    38c6:	9f 93       	push	r25
    38c8:	af 93       	push	r26
	EIFR |= (1 << INTF3);
    38ca:	8c b3       	in	r24, 0x1c	; 28
    38cc:	88 60       	ori	r24, 0x08	; 8
    38ce:	8c bb       	out	0x1c, r24	; 28
	sg_u64Time++;
    38d0:	20 91 45 09 	lds	r18, 0x0945	; 0x800945 <sg_u64Time>
    38d4:	30 91 46 09 	lds	r19, 0x0946	; 0x800946 <sg_u64Time+0x1>
    38d8:	40 91 47 09 	lds	r20, 0x0947	; 0x800947 <sg_u64Time+0x2>
    38dc:	50 91 48 09 	lds	r21, 0x0948	; 0x800948 <sg_u64Time+0x3>
    38e0:	60 91 49 09 	lds	r22, 0x0949	; 0x800949 <sg_u64Time+0x4>
    38e4:	70 91 4a 09 	lds	r23, 0x094A	; 0x80094a <sg_u64Time+0x5>
    38e8:	80 91 4b 09 	lds	r24, 0x094B	; 0x80094b <sg_u64Time+0x6>
    38ec:	90 91 4c 09 	lds	r25, 0x094C	; 0x80094c <sg_u64Time+0x7>
    38f0:	a1 e0       	ldi	r26, 0x01	; 1
    38f2:	0e 94 a5 26 	call	0x4d4a	; 0x4d4a <__adddi3_s8>
    38f6:	20 93 45 09 	sts	0x0945, r18	; 0x800945 <sg_u64Time>
    38fa:	30 93 46 09 	sts	0x0946, r19	; 0x800946 <sg_u64Time+0x1>
    38fe:	40 93 47 09 	sts	0x0947, r20	; 0x800947 <sg_u64Time+0x2>
    3902:	50 93 48 09 	sts	0x0948, r21	; 0x800948 <sg_u64Time+0x3>
    3906:	60 93 49 09 	sts	0x0949, r22	; 0x800949 <sg_u64Time+0x4>
    390a:	70 93 4a 09 	sts	0x094A, r23	; 0x80094a <sg_u64Time+0x5>
    390e:	80 93 4b 09 	sts	0x094B, r24	; 0x80094b <sg_u64Time+0x6>
    3912:	90 93 4c 09 	sts	0x094C, r25	; 0x80094c <sg_u64Time+0x7>
}
    3916:	af 91       	pop	r26
    3918:	9f 91       	pop	r25
    391a:	8f 91       	pop	r24
    391c:	7f 91       	pop	r23
    391e:	6f 91       	pop	r22
    3920:	5f 91       	pop	r21
    3922:	4f 91       	pop	r20
    3924:	3f 91       	pop	r19
    3926:	2f 91       	pop	r18
    3928:	0f 90       	pop	r0
    392a:	0f be       	out	0x3f, r0	; 63
    392c:	0f 90       	pop	r0
    392e:	1f 90       	pop	r1
    3930:	18 95       	reti

Disassembly of section .text.RTCReadRegisters:

00003ab8 <RTCReadRegisters>:
}

bool RTCReadRegisters( uint8_t u8RegisterAddr, 
					   uint8_t* pu8Data, 
					   uint8_t u8Length )
{
    3ab8:	ff 92       	push	r15
    3aba:	0f 93       	push	r16
    3abc:	1f 93       	push	r17
    3abe:	cf 93       	push	r28
    3ac0:	df 93       	push	r29
    3ac2:	f8 2e       	mov	r15, r24
    3ac4:	8b 01       	movw	r16, r22
    3ac6:	c4 2f       	mov	r28, r20
	bool bResult;
	
	MBASSERT( u8Length >= 1 );
    3ac8:	41 11       	cpse	r20, r1
    3aca:	07 c0       	rjmp	.+14     	; 0x3ada <RTCReadRegisters+0x22>
    3acc:	4f e5       	ldi	r20, 0x5F	; 95
    3ace:	50 e0       	ldi	r21, 0x00	; 0
    3ad0:	66 ef       	ldi	r22, 0xF6	; 246
    3ad2:	72 e0       	ldi	r23, 0x02	; 2
    3ad4:	80 e0       	ldi	r24, 0x00	; 0
    3ad6:	0e 94 00 24 	call	0x4800	; 0x4800 <PlatformAssert>
	
	// First send device address and write register address
	bResult = RTCStartTransaction( RTC_ADDRESS, false, true );
    3ada:	41 e0       	ldi	r20, 0x01	; 1
    3adc:	60 e0       	ldi	r22, 0x00	; 0
    3ade:	8e ed       	ldi	r24, 0xDE	; 222
    3ae0:	0e 94 16 22 	call	0x442c	; 0x442c <RTCStartTransaction>
    3ae4:	d8 2f       	mov	r29, r24
	
	// Couldn't get an ACK?  Give up now
	if( false == bResult )
    3ae6:	88 23       	and	r24, r24
    3ae8:	e9 f0       	breq	.+58     	; 0x3b24 <RTCReadRegisters+0x6c>
	{
		goto errorExit;
	}
	
	// Send the register address
	bResult = I2CTxByte( u8RegisterAddr );
    3aea:	8f 2d       	mov	r24, r15
    3aec:	0e 94 c7 1e 	call	0x3d8e	; 0x3d8e <I2CTxByte>
    3af0:	d8 2f       	mov	r29, r24
	
	if( false == bResult )
    3af2:	88 23       	and	r24, r24
    3af4:	b9 f0       	breq	.+46     	; 0x3b24 <RTCReadRegisters+0x6c>
	{
		goto errorExit;
	}
	
	// Send repeated start with read
	bResult = RTCStartTransaction( RTC_ADDRESS, true, false );
    3af6:	40 e0       	ldi	r20, 0x00	; 0
    3af8:	61 e0       	ldi	r22, 0x01	; 1
    3afa:	8e ed       	ldi	r24, 0xDE	; 222
    3afc:	0e 94 16 22 	call	0x442c	; 0x442c <RTCStartTransaction>
    3b00:	d8 2f       	mov	r29, r24
	
	// Couldn't get an ACK?  Give up now
	if( false == bResult )
    3b02:	81 11       	cpse	r24, r1
    3b04:	08 c0       	rjmp	.+16     	; 0x3b16 <RTCReadRegisters+0x5e>
    3b06:	0e c0       	rjmp	.+28     	; 0x3b24 <RTCReadRegisters+0x6c>
		goto errorExit;
	}
	
	while( u8Length >= 2 )
	{
		*pu8Data = I2CRxByte( true );
    3b08:	81 e0       	ldi	r24, 0x01	; 1
    3b0a:	0e 94 17 1e 	call	0x3c2e	; 0x3c2e <I2CRxByte>
    3b0e:	f8 01       	movw	r30, r16
    3b10:	81 93       	st	Z+, r24
    3b12:	8f 01       	movw	r16, r30
		pu8Data++;
		u8Length--;
    3b14:	c1 50       	subi	r28, 0x01	; 1
	if( false == bResult )
	{
		goto errorExit;
	}
	
	while( u8Length >= 2 )
    3b16:	c2 30       	cpi	r28, 0x02	; 2
    3b18:	b8 f7       	brcc	.-18     	; 0x3b08 <RTCReadRegisters+0x50>
		pu8Data++;
		u8Length--;
	}
	
	// Final read with NACK
	*pu8Data = I2CRxByte( false );
    3b1a:	80 e0       	ldi	r24, 0x00	; 0
    3b1c:	0e 94 17 1e 	call	0x3c2e	; 0x3c2e <I2CRxByte>
    3b20:	f8 01       	movw	r30, r16
    3b22:	80 83       	st	Z, r24
	
errorExit:

	I2CStop();
    3b24:	0e 94 a5 24 	call	0x494a	; 0x494a <I2CStop>
	
	return(bResult);
}
    3b28:	8d 2f       	mov	r24, r29
    3b2a:	df 91       	pop	r29
    3b2c:	cf 91       	pop	r28
    3b2e:	1f 91       	pop	r17
    3b30:	0f 91       	pop	r16
    3b32:	ff 90       	pop	r15
    3b34:	08 95       	ret

Disassembly of section .text.RTCReadHW:

00002a78 <RTCReadHW>:
	sei();
	
	psSrc = gmtime((const time_t *) &u64Time);
	memcpy((void *) psTime, (void *) psSrc, sizeof(*psTime));
	return(true);
}
    2a78:	cf 93       	push	r28
    2a7a:	df 93       	push	r29
    2a7c:	ec 01       	movw	r28, r24
    2a7e:	47 e0       	ldi	r20, 0x07	; 7
    2a80:	bc 01       	movw	r22, r24
    2a82:	80 e0       	ldi	r24, 0x00	; 0
    2a84:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <RTCReadRegisters>
    2a88:	88 23       	and	r24, r24
    2a8a:	09 f4       	brne	.+2      	; 0x2a8e <RTCReadHW+0x16>
    2a8c:	63 c0       	rjmp	.+198    	; 0x2b54 <RTCReadHW+0xdc>
    2a8e:	98 81       	ld	r25, Y
    2a90:	29 2f       	mov	r18, r25
    2a92:	22 95       	swap	r18
    2a94:	2f 70       	andi	r18, 0x0F	; 15
    2a96:	27 70       	andi	r18, 0x07	; 7
    2a98:	22 0f       	add	r18, r18
    2a9a:	32 2f       	mov	r19, r18
    2a9c:	33 0f       	add	r19, r19
    2a9e:	33 0f       	add	r19, r19
    2aa0:	23 0f       	add	r18, r19
    2aa2:	9f 70       	andi	r25, 0x0F	; 15
    2aa4:	92 0f       	add	r25, r18
    2aa6:	98 83       	st	Y, r25
    2aa8:	99 81       	ldd	r25, Y+1	; 0x01
    2aaa:	29 2f       	mov	r18, r25
    2aac:	22 95       	swap	r18
    2aae:	2f 70       	andi	r18, 0x0F	; 15
    2ab0:	27 70       	andi	r18, 0x07	; 7
    2ab2:	22 0f       	add	r18, r18
    2ab4:	32 2f       	mov	r19, r18
    2ab6:	33 0f       	add	r19, r19
    2ab8:	33 0f       	add	r19, r19
    2aba:	23 0f       	add	r18, r19
    2abc:	9f 70       	andi	r25, 0x0F	; 15
    2abe:	92 0f       	add	r25, r18
    2ac0:	99 83       	std	Y+1, r25	; 0x01
    2ac2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ac4:	96 ff       	sbrs	r25, 6
    2ac6:	11 c0       	rjmp	.+34     	; 0x2aea <RTCReadHW+0x72>
    2ac8:	94 fb       	bst	r25, 4
    2aca:	22 27       	eor	r18, r18
    2acc:	20 f9       	bld	r18, 0
    2ace:	22 0f       	add	r18, r18
    2ad0:	32 2f       	mov	r19, r18
    2ad2:	33 0f       	add	r19, r19
    2ad4:	33 0f       	add	r19, r19
    2ad6:	23 0f       	add	r18, r19
    2ad8:	39 2f       	mov	r19, r25
    2ada:	3f 70       	andi	r19, 0x0F	; 15
    2adc:	23 0f       	add	r18, r19
    2ade:	2a 83       	std	Y+2, r18	; 0x02
    2ae0:	95 ff       	sbrs	r25, 5
    2ae2:	0f c0       	rjmp	.+30     	; 0x2b02 <RTCReadHW+0x8a>
    2ae4:	24 5f       	subi	r18, 0xF4	; 244
    2ae6:	2a 83       	std	Y+2, r18	; 0x02
    2ae8:	0c c0       	rjmp	.+24     	; 0x2b02 <RTCReadHW+0x8a>
    2aea:	29 2f       	mov	r18, r25
    2aec:	22 95       	swap	r18
    2aee:	2f 70       	andi	r18, 0x0F	; 15
    2af0:	23 70       	andi	r18, 0x03	; 3
    2af2:	22 0f       	add	r18, r18
    2af4:	32 2f       	mov	r19, r18
    2af6:	33 0f       	add	r19, r19
    2af8:	33 0f       	add	r19, r19
    2afa:	23 0f       	add	r18, r19
    2afc:	9f 70       	andi	r25, 0x0F	; 15
    2afe:	92 0f       	add	r25, r18
    2b00:	9a 83       	std	Y+2, r25	; 0x02
    2b02:	9b 81       	ldd	r25, Y+3	; 0x03
    2b04:	97 70       	andi	r25, 0x07	; 7
    2b06:	9b 83       	std	Y+3, r25	; 0x03
    2b08:	9c 81       	ldd	r25, Y+4	; 0x04
    2b0a:	29 2f       	mov	r18, r25
    2b0c:	22 95       	swap	r18
    2b0e:	2f 70       	andi	r18, 0x0F	; 15
    2b10:	23 70       	andi	r18, 0x03	; 3
    2b12:	22 0f       	add	r18, r18
    2b14:	32 2f       	mov	r19, r18
    2b16:	33 0f       	add	r19, r19
    2b18:	33 0f       	add	r19, r19
    2b1a:	23 0f       	add	r18, r19
    2b1c:	9f 70       	andi	r25, 0x0F	; 15
    2b1e:	92 0f       	add	r25, r18
    2b20:	9c 83       	std	Y+4, r25	; 0x04
    2b22:	9d 81       	ldd	r25, Y+5	; 0x05
    2b24:	94 fb       	bst	r25, 4
    2b26:	22 27       	eor	r18, r18
    2b28:	20 f9       	bld	r18, 0
    2b2a:	22 0f       	add	r18, r18
    2b2c:	32 2f       	mov	r19, r18
    2b2e:	33 0f       	add	r19, r19
    2b30:	33 0f       	add	r19, r19
    2b32:	23 0f       	add	r18, r19
    2b34:	9f 70       	andi	r25, 0x0F	; 15
    2b36:	92 0f       	add	r25, r18
    2b38:	9d 83       	std	Y+5, r25	; 0x05
    2b3a:	9e 81       	ldd	r25, Y+6	; 0x06
    2b3c:	29 2f       	mov	r18, r25
    2b3e:	22 95       	swap	r18
    2b40:	2f 70       	andi	r18, 0x0F	; 15
    2b42:	22 0f       	add	r18, r18
    2b44:	32 2f       	mov	r19, r18
    2b46:	33 0f       	add	r19, r19
    2b48:	33 0f       	add	r19, r19
    2b4a:	23 0f       	add	r18, r19
    2b4c:	9f 70       	andi	r25, 0x0F	; 15
    2b4e:	92 0f       	add	r25, r18
    2b50:	9c 5e       	subi	r25, 0xEC	; 236
    2b52:	9e 83       	std	Y+6, r25	; 0x06
    2b54:	df 91       	pop	r29
    2b56:	cf 91       	pop	r28
    2b58:	08 95       	ret

Disassembly of section .text.RTCWriteRegisters:

00003df8 <RTCWriteRegisters>:
}

bool RTCWriteRegisters( uint8_t u8RegisterAddr,
						uint8_t* pu8Data, 
						uint8_t u8Length )
{
    3df8:	ff 92       	push	r15
    3dfa:	0f 93       	push	r16
    3dfc:	1f 93       	push	r17
    3dfe:	cf 93       	push	r28
    3e00:	df 93       	push	r29
    3e02:	f8 2e       	mov	r15, r24
    3e04:	8b 01       	movw	r16, r22
    3e06:	c4 2f       	mov	r28, r20
	bool bResult;
	
	MBASSERT( u8Length >= 1 );
    3e08:	41 11       	cpse	r20, r1
    3e0a:	07 c0       	rjmp	.+14     	; 0x3e1a <RTCWriteRegisters+0x22>
    3e0c:	42 e9       	ldi	r20, 0x92	; 146
    3e0e:	50 e0       	ldi	r21, 0x00	; 0
    3e10:	66 ef       	ldi	r22, 0xF6	; 246
    3e12:	72 e0       	ldi	r23, 0x02	; 2
    3e14:	80 e0       	ldi	r24, 0x00	; 0
    3e16:	0e 94 00 24 	call	0x4800	; 0x4800 <PlatformAssert>
	
	// First send device address and write register address
	bResult = RTCStartTransaction( RTC_ADDRESS, false, true );
    3e1a:	41 e0       	ldi	r20, 0x01	; 1
    3e1c:	60 e0       	ldi	r22, 0x00	; 0
    3e1e:	8e ed       	ldi	r24, 0xDE	; 222
    3e20:	0e 94 16 22 	call	0x442c	; 0x442c <RTCStartTransaction>
    3e24:	d8 2f       	mov	r29, r24
	
	// Couldn't get an ACK?  Give up now
	if( false == bResult )
    3e26:	88 23       	and	r24, r24
    3e28:	99 f0       	breq	.+38     	; 0x3e50 <RTCWriteRegisters+0x58>
	{
		goto errorExit;
	}
	
	// Send the register address
	bResult = I2CTxByte( u8RegisterAddr );
    3e2a:	8f 2d       	mov	r24, r15
    3e2c:	0e 94 c7 1e 	call	0x3d8e	; 0x3d8e <I2CTxByte>
    3e30:	d8 2f       	mov	r29, r24
	
	if( false == bResult )
    3e32:	81 11       	cpse	r24, r1
    3e34:	0b c0       	rjmp	.+22     	; 0x3e4c <RTCWriteRegisters+0x54>
    3e36:	0c c0       	rjmp	.+24     	; 0x3e50 <RTCWriteRegisters+0x58>
	}
	
	// Now immediately send the sequential data
	while( u8Length )
	{
		bResult = I2CTxByte( *pu8Data );
    3e38:	f8 01       	movw	r30, r16
    3e3a:	80 81       	ld	r24, Z
    3e3c:	0e 94 c7 1e 	call	0x3d8e	; 0x3d8e <I2CTxByte>
    3e40:	d8 2f       	mov	r29, r24
		
		if( false == bResult )
    3e42:	88 23       	and	r24, r24
    3e44:	29 f0       	breq	.+10     	; 0x3e50 <RTCWriteRegisters+0x58>
		{
			goto errorExit;
		}
		
		pu8Data++;
    3e46:	0f 5f       	subi	r16, 0xFF	; 255
    3e48:	1f 4f       	sbci	r17, 0xFF	; 255
		u8Length--;
    3e4a:	c1 50       	subi	r28, 0x01	; 1
	{
		goto errorExit;
	}
	
	// Now immediately send the sequential data
	while( u8Length )
    3e4c:	c1 11       	cpse	r28, r1
    3e4e:	f4 cf       	rjmp	.-24     	; 0x3e38 <RTCWriteRegisters+0x40>
		u8Length--;
	}
	
errorExit:

	I2CStop();
    3e50:	0e 94 a5 24 	call	0x494a	; 0x494a <I2CStop>
	
	return( bResult );
}
    3e54:	8d 2f       	mov	r24, r29
    3e56:	df 91       	pop	r29
    3e58:	cf 91       	pop	r28
    3e5a:	1f 91       	pop	r17
    3e5c:	0f 91       	pop	r16
    3e5e:	ff 90       	pop	r15
    3e60:	08 95       	ret

Disassembly of section .text.RTCWriteHW:

0000279e <RTCWriteHW>:
	sei();
	
	psSrc = gmtime((const time_t *) &u64Time);
	memcpy((void *) psTime, (void *) psSrc, sizeof(*psTime));
	return(true);
}
    279e:	fc 01       	movw	r30, r24
    27a0:	20 81       	ld	r18, Z
    27a2:	8d ec       	ldi	r24, 0xCD	; 205
    27a4:	28 9f       	mul	r18, r24
    27a6:	91 2d       	mov	r25, r1
    27a8:	11 24       	eor	r1, r1
    27aa:	96 95       	lsr	r25
    27ac:	96 95       	lsr	r25
    27ae:	96 95       	lsr	r25
    27b0:	30 e1       	ldi	r19, 0x10	; 16
    27b2:	93 9f       	mul	r25, r19
    27b4:	a0 01       	movw	r20, r0
    27b6:	11 24       	eor	r1, r1
    27b8:	99 0f       	add	r25, r25
    27ba:	39 2f       	mov	r19, r25
    27bc:	33 0f       	add	r19, r19
    27be:	33 0f       	add	r19, r19
    27c0:	93 0f       	add	r25, r19
    27c2:	29 1b       	sub	r18, r25
    27c4:	24 2b       	or	r18, r20
    27c6:	20 83       	st	Z, r18
    27c8:	21 81       	ldd	r18, Z+1	; 0x01
    27ca:	28 9f       	mul	r18, r24
    27cc:	91 2d       	mov	r25, r1
    27ce:	11 24       	eor	r1, r1
    27d0:	96 95       	lsr	r25
    27d2:	96 95       	lsr	r25
    27d4:	96 95       	lsr	r25
    27d6:	30 e1       	ldi	r19, 0x10	; 16
    27d8:	93 9f       	mul	r25, r19
    27da:	a0 01       	movw	r20, r0
    27dc:	11 24       	eor	r1, r1
    27de:	99 0f       	add	r25, r25
    27e0:	39 2f       	mov	r19, r25
    27e2:	33 0f       	add	r19, r19
    27e4:	33 0f       	add	r19, r19
    27e6:	93 0f       	add	r25, r19
    27e8:	29 1b       	sub	r18, r25
    27ea:	24 2b       	or	r18, r20
    27ec:	21 83       	std	Z+1, r18	; 0x01
    27ee:	42 81       	ldd	r20, Z+2	; 0x02
    27f0:	48 9f       	mul	r20, r24
    27f2:	91 2d       	mov	r25, r1
    27f4:	11 24       	eor	r1, r1
    27f6:	96 95       	lsr	r25
    27f8:	96 95       	lsr	r25
    27fa:	96 95       	lsr	r25
    27fc:	50 e1       	ldi	r21, 0x10	; 16
    27fe:	95 9f       	mul	r25, r21
    2800:	90 01       	movw	r18, r0
    2802:	11 24       	eor	r1, r1
    2804:	99 0f       	add	r25, r25
    2806:	39 2f       	mov	r19, r25
    2808:	33 0f       	add	r19, r19
    280a:	33 0f       	add	r19, r19
    280c:	93 0f       	add	r25, r19
    280e:	49 1b       	sub	r20, r25
    2810:	24 2b       	or	r18, r20
    2812:	2f 7b       	andi	r18, 0xBF	; 191
    2814:	22 83       	std	Z+2, r18	; 0x02
    2816:	93 81       	ldd	r25, Z+3	; 0x03
    2818:	97 70       	andi	r25, 0x07	; 7
    281a:	98 60       	ori	r25, 0x08	; 8
    281c:	93 83       	std	Z+3, r25	; 0x03
    281e:	24 81       	ldd	r18, Z+4	; 0x04
    2820:	28 9f       	mul	r18, r24
    2822:	91 2d       	mov	r25, r1
    2824:	11 24       	eor	r1, r1
    2826:	96 95       	lsr	r25
    2828:	96 95       	lsr	r25
    282a:	96 95       	lsr	r25
    282c:	30 e1       	ldi	r19, 0x10	; 16
    282e:	93 9f       	mul	r25, r19
    2830:	a0 01       	movw	r20, r0
    2832:	11 24       	eor	r1, r1
    2834:	99 0f       	add	r25, r25
    2836:	39 2f       	mov	r19, r25
    2838:	33 0f       	add	r19, r19
    283a:	33 0f       	add	r19, r19
    283c:	93 0f       	add	r25, r19
    283e:	29 1b       	sub	r18, r25
    2840:	24 2b       	or	r18, r20
    2842:	24 83       	std	Z+4, r18	; 0x04
    2844:	25 81       	ldd	r18, Z+5	; 0x05
    2846:	28 9f       	mul	r18, r24
    2848:	91 2d       	mov	r25, r1
    284a:	11 24       	eor	r1, r1
    284c:	96 95       	lsr	r25
    284e:	96 95       	lsr	r25
    2850:	96 95       	lsr	r25
    2852:	30 e1       	ldi	r19, 0x10	; 16
    2854:	93 9f       	mul	r25, r19
    2856:	a0 01       	movw	r20, r0
    2858:	11 24       	eor	r1, r1
    285a:	99 0f       	add	r25, r25
    285c:	39 2f       	mov	r19, r25
    285e:	33 0f       	add	r19, r19
    2860:	33 0f       	add	r19, r19
    2862:	93 0f       	add	r25, r19
    2864:	29 1b       	sub	r18, r25
    2866:	24 2b       	or	r18, r20
    2868:	25 83       	std	Z+5, r18	; 0x05
    286a:	96 81       	ldd	r25, Z+6	; 0x06
    286c:	98 9f       	mul	r25, r24
    286e:	81 2d       	mov	r24, r1
    2870:	11 24       	eor	r1, r1
    2872:	86 95       	lsr	r24
    2874:	86 95       	lsr	r24
    2876:	86 95       	lsr	r24
    2878:	40 e1       	ldi	r20, 0x10	; 16
    287a:	84 9f       	mul	r24, r20
    287c:	90 01       	movw	r18, r0
    287e:	11 24       	eor	r1, r1
    2880:	88 0f       	add	r24, r24
    2882:	38 2f       	mov	r19, r24
    2884:	33 0f       	add	r19, r19
    2886:	33 0f       	add	r19, r19
    2888:	83 0f       	add	r24, r19
    288a:	98 1b       	sub	r25, r24
    288c:	92 2b       	or	r25, r18
    288e:	96 83       	std	Z+6, r25	; 0x06
    2890:	47 e0       	ldi	r20, 0x07	; 7
    2892:	bf 01       	movw	r22, r30
    2894:	80 e0       	ldi	r24, 0x00	; 0
    2896:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <RTCWriteRegisters>
    289a:	08 95       	ret

Disassembly of section .text.RTCSetTime:

00002f80 <RTCSetTime>:

// This sets the RTC to the specific time passed in. True is returned
// if it's 
bool RTCSetTime(uint64_t u64Timet)
{
    2f80:	0f 93       	push	r16
    2f82:	1f 93       	push	r17
    2f84:	cf 93       	push	r28
    2f86:	df 93       	push	r29
    2f88:	cd b7       	in	r28, 0x3d	; 61
    2f8a:	de b7       	in	r29, 0x3e	; 62
    2f8c:	a8 97       	sbiw	r28, 0x28	; 40
    2f8e:	0f b6       	in	r0, 0x3f	; 63
    2f90:	f8 94       	cli
    2f92:	de bf       	out	0x3e, r29	; 62
    2f94:	0f be       	out	0x3f, r0	; 63
    2f96:	cd bf       	out	0x3d, r28	; 61
    2f98:	29 a3       	std	Y+33, r18	; 0x21
    2f9a:	3a a3       	std	Y+34, r19	; 0x22
    2f9c:	4b a3       	std	Y+35, r20	; 0x23
    2f9e:	5c a3       	std	Y+36, r21	; 0x24
    2fa0:	6d a3       	std	Y+37, r22	; 0x25
    2fa2:	7e a3       	std	Y+38, r23	; 0x26
    2fa4:	8f a3       	std	Y+39, r24	; 0x27
    2fa6:	98 a7       	std	Y+40, r25	; 0x28
	struct tm sTime;
	struct tm *psTime;
	SMCP7940NTime sTimeHW;

	// Convert to GMTime
	memset((void *) &sTime, 0, sizeof(sTime));
    2fa8:	fe 01       	movw	r30, r28
    2faa:	31 96       	adiw	r30, 0x01	; 1
    2fac:	89 e1       	ldi	r24, 0x19	; 25
    2fae:	df 01       	movw	r26, r30
    2fb0:	1d 92       	st	X+, r1
    2fb2:	8a 95       	dec	r24
    2fb4:	e9 f7       	brne	.-6      	; 0x2fb0 <RTCSetTime+0x30>
	psTime = gmtime((const time_t *) &u64Timet);
    2fb6:	be 01       	movw	r22, r28
    2fb8:	6f 5d       	subi	r22, 0xDF	; 223
    2fba:	7f 4f       	sbci	r23, 0xFF	; 255
    2fbc:	80 e8       	ldi	r24, 0x80	; 128
    2fbe:	0e 94 76 27 	call	0x4eec	; 0x4eec <gmtime>
    2fc2:	8c 01       	movw	r16, r24
	MBASSERT(psTime);
    2fc4:	89 2b       	or	r24, r25
    2fc6:	39 f4       	brne	.+14     	; 0x2fd6 <RTCSetTime+0x56>
    2fc8:	42 e8       	ldi	r20, 0x82	; 130
    2fca:	51 e0       	ldi	r21, 0x01	; 1
    2fcc:	66 ef       	ldi	r22, 0xF6	; 246
    2fce:	72 e0       	ldi	r23, 0x02	; 2
    2fd0:	80 e0       	ldi	r24, 0x00	; 0
    2fd2:	0e 94 00 24 	call	0x4800	; 0x4800 <PlatformAssert>
	memcpy((void *) &sTime, (void *) psTime, sizeof(sTime));
    2fd6:	a8 01       	movw	r20, r16
    2fd8:	60 e8       	ldi	r22, 0x80	; 128
    2fda:	29 e1       	ldi	r18, 0x19	; 25
    2fdc:	30 e0       	ldi	r19, 0x00	; 0
    2fde:	ce 01       	movw	r24, r28
    2fe0:	01 96       	adiw	r24, 0x01	; 1
    2fe2:	0e 94 a4 23 	call	0x4748	; 0x4748 <memcpy>
	
	// Now convert to hardware
	StructTMToHW(&sTime,
    2fe6:	be 01       	movw	r22, r28
    2fe8:	66 5e       	subi	r22, 0xE6	; 230
    2fea:	7f 4f       	sbci	r23, 0xFF	; 255
    2fec:	ce 01       	movw	r24, r28
    2fee:	01 96       	adiw	r24, 0x01	; 1
    2ff0:	0e 94 fb 20 	call	0x41f6	; 0x41f6 <StructTMToHW>
				 &sTimeHW);
	
	// Set the time			 
	cli();
    2ff4:	f8 94       	cli
	sg_u64Time = u64Timet;
    2ff6:	79 a1       	ldd	r23, Y+33	; 0x21
    2ff8:	6a a1       	ldd	r22, Y+34	; 0x22
    2ffa:	5b a1       	ldd	r21, Y+35	; 0x23
    2ffc:	4c a1       	ldd	r20, Y+36	; 0x24
    2ffe:	3d a1       	ldd	r19, Y+37	; 0x25
    3000:	2e a1       	ldd	r18, Y+38	; 0x26
    3002:	9f a1       	ldd	r25, Y+39	; 0x27
    3004:	88 a5       	ldd	r24, Y+40	; 0x28
    3006:	70 93 45 09 	sts	0x0945, r23	; 0x800945 <sg_u64Time>
    300a:	60 93 46 09 	sts	0x0946, r22	; 0x800946 <sg_u64Time+0x1>
    300e:	50 93 47 09 	sts	0x0947, r21	; 0x800947 <sg_u64Time+0x2>
    3012:	40 93 48 09 	sts	0x0948, r20	; 0x800948 <sg_u64Time+0x3>
    3016:	30 93 49 09 	sts	0x0949, r19	; 0x800949 <sg_u64Time+0x4>
    301a:	20 93 4a 09 	sts	0x094A, r18	; 0x80094a <sg_u64Time+0x5>
    301e:	90 93 4b 09 	sts	0x094B, r25	; 0x80094b <sg_u64Time+0x6>
    3022:	80 93 4c 09 	sts	0x094C, r24	; 0x80094c <sg_u64Time+0x7>
	sei();
    3026:	78 94       	sei
	
	// Now go tell the hardware about it
	return(RTCWriteHW(&sTimeHW));
    3028:	ce 01       	movw	r24, r28
    302a:	4a 96       	adiw	r24, 0x1a	; 26
    302c:	0e 94 cf 13 	call	0x279e	; 0x279e <RTCWriteHW>
}
    3030:	a8 96       	adiw	r28, 0x28	; 40
    3032:	0f b6       	in	r0, 0x3f	; 63
    3034:	f8 94       	cli
    3036:	de bf       	out	0x3e, r29	; 62
    3038:	0f be       	out	0x3f, r0	; 63
    303a:	cd bf       	out	0x3d, r28	; 61
    303c:	df 91       	pop	r29
    303e:	cf 91       	pop	r28
    3040:	1f 91       	pop	r17
    3042:	0f 91       	pop	r16
    3044:	08 95       	ret

Disassembly of section .text.RTCInit:

000016be <RTCInit>:
	sei();
	
	psSrc = gmtime((const time_t *) &u64Time);
	memcpy((void *) psTime, (void *) psSrc, sizeof(*psTime));
	return(true);
}
    16be:	ff 92       	push	r15
    16c0:	0f 93       	push	r16
    16c2:	1f 93       	push	r17
    16c4:	cf 93       	push	r28
    16c6:	df 93       	push	r29
    16c8:	cd b7       	in	r28, 0x3d	; 61
    16ca:	de b7       	in	r29, 0x3e	; 62
    16cc:	a1 97       	sbiw	r28, 0x21	; 33
    16ce:	0f b6       	in	r0, 0x3f	; 63
    16d0:	f8 94       	cli
    16d2:	de bf       	out	0x3e, r29	; 62
    16d4:	0f be       	out	0x3f, r0	; 63
    16d6:	cd bf       	out	0x3d, r28	; 61
    16d8:	19 82       	std	Y+1, r1	; 0x01
    16da:	41 e0       	ldi	r20, 0x01	; 1
    16dc:	be 01       	movw	r22, r28
    16de:	6f 5f       	subi	r22, 0xFF	; 255
    16e0:	7f 4f       	sbci	r23, 0xFF	; 255
    16e2:	87 e0       	ldi	r24, 0x07	; 7
    16e4:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <RTCWriteRegisters>
    16e8:	18 2f       	mov	r17, r24
    16ea:	88 23       	and	r24, r24
    16ec:	09 f4       	brne	.+2      	; 0x16f0 <RTCInit+0x32>
    16ee:	eb c0       	rjmp	.+470    	; 0x18c6 <RTCInit+0x208>
    16f0:	80 e8       	ldi	r24, 0x80	; 128
    16f2:	89 83       	std	Y+1, r24	; 0x01
    16f4:	41 e0       	ldi	r20, 0x01	; 1
    16f6:	be 01       	movw	r22, r28
    16f8:	6f 5f       	subi	r22, 0xFF	; 255
    16fa:	7f 4f       	sbci	r23, 0xFF	; 255
    16fc:	80 e0       	ldi	r24, 0x00	; 0
    16fe:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <RTCWriteRegisters>
    1702:	18 2f       	mov	r17, r24
    1704:	81 11       	cpse	r24, r1
    1706:	17 c0       	rjmp	.+46     	; 0x1736 <RTCInit+0x78>
    1708:	de c0       	rjmp	.+444    	; 0x18c6 <RTCInit+0x208>
    170a:	19 82       	std	Y+1, r1	; 0x01
    170c:	41 e0       	ldi	r20, 0x01	; 1
    170e:	be 01       	movw	r22, r28
    1710:	6f 5f       	subi	r22, 0xFF	; 255
    1712:	7f 4f       	sbci	r23, 0xFF	; 255
    1714:	83 e0       	ldi	r24, 0x03	; 3
    1716:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <RTCReadRegisters>
    171a:	18 2f       	mov	r17, r24
    171c:	88 23       	and	r24, r24
    171e:	09 f4       	brne	.+2      	; 0x1722 <RTCInit+0x64>
    1720:	d2 c0       	rjmp	.+420    	; 0x18c6 <RTCInit+0x208>
    1722:	89 81       	ldd	r24, Y+1	; 0x01
    1724:	85 fd       	sbrc	r24, 5
    1726:	0a c0       	rjmp	.+20     	; 0x173c <RTCInit+0x7e>
    1728:	60 e0       	ldi	r22, 0x00	; 0
    172a:	70 e0       	ldi	r23, 0x00	; 0
    172c:	cb 01       	movw	r24, r22
    172e:	0e 94 4f 21 	call	0x429e	; 0x429e <Delay>
    1732:	0f 5f       	subi	r16, 0xFF	; 255
    1734:	01 c0       	rjmp	.+2      	; 0x1738 <RTCInit+0x7a>
    1736:	00 e0       	ldi	r16, 0x00	; 0
    1738:	08 3c       	cpi	r16, 0xC8	; 200
    173a:	38 f3       	brcs	.-50     	; 0x170a <RTCInit+0x4c>
    173c:	08 3c       	cpi	r16, 0xC8	; 200
    173e:	08 f0       	brcs	.+2      	; 0x1742 <RTCInit+0x84>
    1740:	c2 c0       	rjmp	.+388    	; 0x18c6 <RTCInit+0x208>
    1742:	89 81       	ldd	r24, Y+1	; 0x01
    1744:	88 60       	ori	r24, 0x08	; 8
    1746:	89 83       	std	Y+1, r24	; 0x01
    1748:	41 e0       	ldi	r20, 0x01	; 1
    174a:	be 01       	movw	r22, r28
    174c:	6f 5f       	subi	r22, 0xFF	; 255
    174e:	7f 4f       	sbci	r23, 0xFF	; 255
    1750:	83 e0       	ldi	r24, 0x03	; 3
    1752:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <RTCWriteRegisters>
    1756:	18 2f       	mov	r17, r24
    1758:	88 23       	and	r24, r24
    175a:	09 f4       	brne	.+2      	; 0x175e <RTCInit+0xa0>
    175c:	b4 c0       	rjmp	.+360    	; 0x18c6 <RTCInit+0x208>
    175e:	41 e0       	ldi	r20, 0x01	; 1
    1760:	be 01       	movw	r22, r28
    1762:	6f 5f       	subi	r22, 0xFF	; 255
    1764:	7f 4f       	sbci	r23, 0xFF	; 255
    1766:	82 e0       	ldi	r24, 0x02	; 2
    1768:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <RTCReadRegisters>
    176c:	18 2f       	mov	r17, r24
    176e:	88 23       	and	r24, r24
    1770:	09 f4       	brne	.+2      	; 0x1774 <RTCInit+0xb6>
    1772:	a9 c0       	rjmp	.+338    	; 0x18c6 <RTCInit+0x208>
    1774:	89 81       	ldd	r24, Y+1	; 0x01
    1776:	8f 7b       	andi	r24, 0xBF	; 191
    1778:	89 83       	std	Y+1, r24	; 0x01
    177a:	41 e0       	ldi	r20, 0x01	; 1
    177c:	be 01       	movw	r22, r28
    177e:	6f 5f       	subi	r22, 0xFF	; 255
    1780:	7f 4f       	sbci	r23, 0xFF	; 255
    1782:	82 e0       	ldi	r24, 0x02	; 2
    1784:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <RTCWriteRegisters>
    1788:	18 2f       	mov	r17, r24
    178a:	88 23       	and	r24, r24
    178c:	09 f4       	brne	.+2      	; 0x1790 <RTCInit+0xd2>
    178e:	9b c0       	rjmp	.+310    	; 0x18c6 <RTCInit+0x208>
    1790:	ce 01       	movw	r24, r28
    1792:	02 96       	adiw	r24, 0x02	; 2
    1794:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <RTCReadHW>
    1798:	18 2f       	mov	r17, r24
    179a:	88 23       	and	r24, r24
    179c:	09 f4       	brne	.+2      	; 0x17a0 <RTCInit+0xe2>
    179e:	93 c0       	rjmp	.+294    	; 0x18c6 <RTCInit+0x208>
    17a0:	8a 81       	ldd	r24, Y+2	; 0x02
    17a2:	8c 33       	cpi	r24, 0x3C	; 60
    17a4:	10 f4       	brcc	.+4      	; 0x17aa <RTCInit+0xec>
    17a6:	10 e0       	ldi	r17, 0x00	; 0
    17a8:	01 c0       	rjmp	.+2      	; 0x17ac <RTCInit+0xee>
    17aa:	11 e0       	ldi	r17, 0x01	; 1
    17ac:	8b 81       	ldd	r24, Y+3	; 0x03
    17ae:	8c 33       	cpi	r24, 0x3C	; 60
    17b0:	08 f0       	brcs	.+2      	; 0x17b4 <RTCInit+0xf6>
    17b2:	11 e0       	ldi	r17, 0x01	; 1
    17b4:	8c 81       	ldd	r24, Y+4	; 0x04
    17b6:	8c 33       	cpi	r24, 0x3C	; 60
    17b8:	08 f0       	brcs	.+2      	; 0x17bc <RTCInit+0xfe>
    17ba:	11 e0       	ldi	r17, 0x01	; 1
    17bc:	8d 81       	ldd	r24, Y+5	; 0x05
    17be:	81 50       	subi	r24, 0x01	; 1
    17c0:	87 30       	cpi	r24, 0x07	; 7
    17c2:	08 f0       	brcs	.+2      	; 0x17c6 <RTCInit+0x108>
    17c4:	11 e0       	ldi	r17, 0x01	; 1
    17c6:	2f 81       	ldd	r18, Y+7	; 0x07
    17c8:	8f ef       	ldi	r24, 0xFF	; 255
    17ca:	82 0f       	add	r24, r18
    17cc:	8c 30       	cpi	r24, 0x0C	; 12
    17ce:	18 f5       	brcc	.+70     	; 0x1816 <RTCInit+0x158>
    17d0:	0e 81       	ldd	r16, Y+6	; 0x06
    17d2:	00 23       	and	r16, r16
    17d4:	11 f1       	breq	.+68     	; 0x181a <RTCInit+0x15c>
    17d6:	82 2f       	mov	r24, r18
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	01 97       	sbiw	r24, 0x01	; 1
    17dc:	09 2e       	mov	r0, r25
    17de:	00 0c       	add	r0, r0
    17e0:	aa 0b       	sbc	r26, r26
    17e2:	87 5d       	subi	r24, 0xD7	; 215
    17e4:	9c 4f       	sbci	r25, 0xFC	; 252
    17e6:	af 4f       	sbci	r26, 0xFF	; 255
    17e8:	fc 01       	movw	r30, r24
    17ea:	f4 90       	lpm	r15, Z
    17ec:	a7 fd       	sbrc	r26, 7
    17ee:	f0 80       	ld	r15, Z
    17f0:	22 30       	cpi	r18, 0x02	; 2
    17f2:	71 f4       	brne	.+28     	; 0x1810 <RTCInit+0x152>
    17f4:	88 85       	ldd	r24, Y+8	; 0x08
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	84 31       	cpi	r24, 0x14	; 20
    17fa:	91 05       	cpc	r25, r1
    17fc:	18 f4       	brcc	.+6      	; 0x1804 <RTCInit+0x146>
    17fe:	8c 5c       	subi	r24, 0xCC	; 204
    1800:	97 4f       	sbci	r25, 0xF7	; 247
    1802:	02 c0       	rjmp	.+4      	; 0x1808 <RTCInit+0x14a>
    1804:	80 53       	subi	r24, 0x30	; 48
    1806:	98 4f       	sbci	r25, 0xF8	; 248
    1808:	0e 94 24 23 	call	0x4648	; 0x4648 <IsLeapYear>
    180c:	81 11       	cpse	r24, r1
    180e:	f3 94       	inc	r15
    1810:	f0 16       	cp	r15, r16
    1812:	28 f0       	brcs	.+10     	; 0x181e <RTCInit+0x160>
    1814:	05 c0       	rjmp	.+10     	; 0x1820 <RTCInit+0x162>
    1816:	11 e0       	ldi	r17, 0x01	; 1
    1818:	03 c0       	rjmp	.+6      	; 0x1820 <RTCInit+0x162>
    181a:	11 e0       	ldi	r17, 0x01	; 1
    181c:	01 c0       	rjmp	.+2      	; 0x1820 <RTCInit+0x162>
    181e:	11 e0       	ldi	r17, 0x01	; 1
    1820:	11 23       	and	r17, r17
    1822:	b9 f0       	breq	.+46     	; 0x1852 <RTCInit+0x194>
    1824:	1a 82       	std	Y+2, r1	; 0x02
    1826:	1b 82       	std	Y+3, r1	; 0x03
    1828:	1c 82       	std	Y+4, r1	; 0x04
    182a:	81 e0       	ldi	r24, 0x01	; 1
    182c:	8e 83       	std	Y+6, r24	; 0x06
    182e:	8f 83       	std	Y+7, r24	; 0x07
    1830:	88 e1       	ldi	r24, 0x18	; 24
    1832:	88 87       	std	Y+8, r24	; 0x08
    1834:	ce 01       	movw	r24, r28
    1836:	02 96       	adiw	r24, 0x02	; 2
    1838:	0e 94 cf 13 	call	0x279e	; 0x279e <RTCWriteHW>
    183c:	18 2f       	mov	r17, r24
    183e:	88 23       	and	r24, r24
    1840:	09 f4       	brne	.+2      	; 0x1844 <RTCInit+0x186>
    1842:	41 c0       	rjmp	.+130    	; 0x18c6 <RTCInit+0x208>
    1844:	ce 01       	movw	r24, r28
    1846:	02 96       	adiw	r24, 0x02	; 2
    1848:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <RTCReadHW>
    184c:	18 2f       	mov	r17, r24
    184e:	88 23       	and	r24, r24
    1850:	d1 f1       	breq	.+116    	; 0x18c6 <RTCInit+0x208>
    1852:	be 01       	movw	r22, r28
    1854:	67 5f       	subi	r22, 0xF7	; 247
    1856:	7f 4f       	sbci	r23, 0xFF	; 255
    1858:	ce 01       	movw	r24, r28
    185a:	02 96       	adiw	r24, 0x02	; 2
    185c:	0e 94 9b 1d 	call	0x3b36	; 0x3b36 <HWToStructTM>
    1860:	ce 01       	movw	r24, r28
    1862:	09 96       	adiw	r24, 0x09	; 9
    1864:	0e 94 99 1c 	call	0x3932	; 0x3932 <mktime>
    1868:	8b 01       	movw	r16, r22
    186a:	9c 01       	movw	r18, r24
    186c:	f8 94       	cli
    186e:	00 93 45 09 	sts	0x0945, r16	; 0x800945 <sg_u64Time>
    1872:	10 93 46 09 	sts	0x0946, r17	; 0x800946 <sg_u64Time+0x1>
    1876:	20 93 47 09 	sts	0x0947, r18	; 0x800947 <sg_u64Time+0x2>
    187a:	30 93 48 09 	sts	0x0948, r19	; 0x800948 <sg_u64Time+0x3>
    187e:	10 92 49 09 	sts	0x0949, r1	; 0x800949 <sg_u64Time+0x4>
    1882:	10 92 4a 09 	sts	0x094A, r1	; 0x80094a <sg_u64Time+0x5>
    1886:	10 92 4b 09 	sts	0x094B, r1	; 0x80094b <sg_u64Time+0x6>
    188a:	10 92 4c 09 	sts	0x094C, r1	; 0x80094c <sg_u64Time+0x7>
    188e:	78 94       	sei
    1890:	87 b1       	in	r24, 0x07	; 7
    1892:	8e 7f       	andi	r24, 0xFE	; 254
    1894:	87 b9       	out	0x07, r24	; 7
    1896:	88 b1       	in	r24, 0x08	; 8
    1898:	81 60       	ori	r24, 0x01	; 1
    189a:	88 b9       	out	0x08, r24	; 8
    189c:	41 e0       	ldi	r20, 0x01	; 1
    189e:	be 01       	movw	r22, r28
    18a0:	6f 5f       	subi	r22, 0xFF	; 255
    18a2:	7f 4f       	sbci	r23, 0xFF	; 255
    18a4:	87 e0       	ldi	r24, 0x07	; 7
    18a6:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <RTCReadRegisters>
    18aa:	18 2f       	mov	r17, r24
    18ac:	88 23       	and	r24, r24
    18ae:	59 f0       	breq	.+22     	; 0x18c6 <RTCInit+0x208>
    18b0:	89 81       	ldd	r24, Y+1	; 0x01
    18b2:	80 64       	ori	r24, 0x40	; 64
    18b4:	89 83       	std	Y+1, r24	; 0x01
    18b6:	41 e0       	ldi	r20, 0x01	; 1
    18b8:	be 01       	movw	r22, r28
    18ba:	6f 5f       	subi	r22, 0xFF	; 255
    18bc:	7f 4f       	sbci	r23, 0xFF	; 255
    18be:	87 e0       	ldi	r24, 0x07	; 7
    18c0:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <RTCWriteRegisters>
    18c4:	18 2f       	mov	r17, r24
    18c6:	81 2f       	mov	r24, r17
    18c8:	a1 96       	adiw	r28, 0x21	; 33
    18ca:	0f b6       	in	r0, 0x3f	; 63
    18cc:	f8 94       	cli
    18ce:	de bf       	out	0x3e, r29	; 62
    18d0:	0f be       	out	0x3f, r0	; 63
    18d2:	cd bf       	out	0x3d, r28	; 61
    18d4:	df 91       	pop	r29
    18d6:	cf 91       	pop	r28
    18d8:	1f 91       	pop	r17
    18da:	0f 91       	pop	r16
    18dc:	ff 90       	pop	r15
    18de:	08 95       	ret

Disassembly of section .text.SDSetCS:

00004dd0 <SDSetCS>:
static uint8_t sg_u8CSD[16];

// This will provide a !CS assertion or deassertion with pre/postamble clock
static void SDSetCS(bool bAsserted)
{
	if (bAsserted)
    4dd0:	88 23       	and	r24, r24
    4dd2:	21 f0       	breq	.+8      	; 0x4ddc <SDSetCS+0xc>
	{
		SD_CS_ASSERT();
    4dd4:	88 b1       	in	r24, 0x08	; 8
    4dd6:	8f 7b       	andi	r24, 0xBF	; 191
    4dd8:	88 b9       	out	0x08, r24	; 8
    4dda:	08 95       	ret
	}
	else
	{
		SD_CS_DEASSERT();
    4ddc:	88 b1       	in	r24, 0x08	; 8
    4dde:	80 64       	ori	r24, 0x40	; 64
    4de0:	88 b9       	out	0x08, r24	; 8
    4de2:	08 95       	ret

Disassembly of section .text.SDPowerup:

0000456a <SDPowerup>:

// Sends SD powerup sequence to card and attempts to initialize it
static void SDPowerup(void)
{
	// Set SPI baud rate to (SD_SPEED_SLOW, which is the max for the init sequence)
	(void) SPISetBaudRate(SD_SPEED_SLOW);
    456a:	60 e8       	ldi	r22, 0x80	; 128
    456c:	7a e1       	ldi	r23, 0x1A	; 26
    456e:	86 e0       	ldi	r24, 0x06	; 6
    4570:	90 e0       	ldi	r25, 0x00	; 0
    4572:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <SPISetBaudRate>
	
	// Deassert chip select
	SD_CS_DEASSERT();
    4576:	88 b1       	in	r24, 0x08	; 8
    4578:	80 64       	ori	r24, 0x40	; 64
    457a:	88 b9       	out	0x08, r24	; 8
	
	// Delay time after possible deassertion (2ms)
	Delay(2000);
    457c:	60 ed       	ldi	r22, 0xD0	; 208
    457e:	77 e0       	ldi	r23, 0x07	; 7
    4580:	80 e0       	ldi	r24, 0x00	; 0
    4582:	90 e0       	ldi	r25, 0x00	; 0
    4584:	0e 94 4f 21 	call	0x429e	; 0x429e <Delay>
	
	// Send 74/80 bits of 0xff as a reset (80 bits required since we're byte-
	// sized transactions)
	SPIWritePattern(0xff,
    4588:	40 e1       	ldi	r20, 0x10	; 16
    458a:	50 e0       	ldi	r21, 0x00	; 0
    458c:	6f ef       	ldi	r22, 0xFF	; 255
    458e:	70 e0       	ldi	r23, 0x00	; 0
    4590:	82 e0       	ldi	r24, 0x02	; 2
    4592:	0e 94 22 20 	call	0x4044	; 0x4044 <SPITransaction>
				    128/8);

	// Delay time after write
	Delay(2000);
    4596:	60 ed       	ldi	r22, 0xD0	; 208
    4598:	77 e0       	ldi	r23, 0x07	; 7
    459a:	80 e0       	ldi	r24, 0x00	; 0
    459c:	90 e0       	ldi	r25, 0x00	; 0
    459e:	0e 94 4f 21 	call	0x429e	; 0x429e <Delay>
    45a2:	08 95       	ret

Disassembly of section .text.SDCommand:

000033f4 <SDCommand>:
#define CMD8_CRC    0x87

// Sends a command to the SD card, including argument an CRC
static uint8_t SDCommand(uint8_t u8Cmd,
						 uint32_t u32Arg)
{
    33f4:	df 92       	push	r13
    33f6:	ef 92       	push	r14
    33f8:	ff 92       	push	r15
    33fa:	0f 93       	push	r16
    33fc:	1f 93       	push	r17
    33fe:	cf 93       	push	r28
    3400:	df 93       	push	r29
    3402:	cd b7       	in	r28, 0x3d	; 61
    3404:	de b7       	in	r29, 0x3e	; 62
    3406:	27 97       	sbiw	r28, 0x07	; 7
    3408:	0f b6       	in	r0, 0x3f	; 63
    340a:	f8 94       	cli
    340c:	de bf       	out	0x3e, r29	; 62
    340e:	0f be       	out	0x3f, r0	; 63
    3410:	cd bf       	out	0x3d, r28	; 61
    3412:	18 2f       	mov	r17, r24
    3414:	04 2f       	mov	r16, r20
    3416:	f5 2e       	mov	r15, r21
    3418:	e6 2e       	mov	r14, r22
    341a:	d7 2e       	mov	r13, r23
	uint8_t u8Buffer[sizeof(u8Cmd) + sizeof(u32Arg) + sizeof(u8CRC)];
	uint8_t u8Response;
	uint8_t u8Count;
	
	// If this is an ACMD, prefix a CMD55
	if (u8Cmd & 0x80)
    341c:	88 23       	and	r24, r24
    341e:	4c f4       	brge	.+18     	; 0x3432 <SDCommand+0x3e>
	{
		u8Response = SDCommand(CMD55,
    3420:	40 e0       	ldi	r20, 0x00	; 0
    3422:	50 e0       	ldi	r21, 0x00	; 0
    3424:	ba 01       	movw	r22, r20
    3426:	87 e3       	ldi	r24, 0x37	; 55
    3428:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <SDCommand>
    342c:	8f 83       	std	Y+7, r24	; 0x07
							   CMD55_ARG);
							   
		if (u8Response > 1)
    342e:	82 30       	cpi	r24, 0x02	; 2
    3430:	40 f5       	brcc	.+80     	; 0x3482 <SDCommand+0x8e>
			return(u8Response);
		}
	}
	
	// SD Command (OR in 0x40 so bit 47 is always a 1
	u8Buffer[0] = (u8Cmd & 0x7f) | 0x40;
    3432:	81 2f       	mov	r24, r17
    3434:	8f 73       	andi	r24, 0x3F	; 63
    3436:	80 64       	ori	r24, 0x40	; 64
    3438:	89 83       	std	Y+1, r24	; 0x01
	
	// 32 Bits of argument
	u8Buffer[1] = (uint8_t) (u32Arg >> 24);
    343a:	da 82       	std	Y+2, r13	; 0x02
	u8Buffer[2] = (uint8_t) (u32Arg >> 16);
    343c:	eb 82       	std	Y+3, r14	; 0x03
	u8Buffer[3] = (uint8_t) (u32Arg >> 8);
    343e:	fc 82       	std	Y+4, r15	; 0x04
	u8Buffer[4] = (uint8_t) (u32Arg >> 0);
    3440:	0d 83       	std	Y+5, r16	; 0x05
	
	// Valid CRCs for specific commands
	u8CRC = 0;
	if (CMD0 == u8Cmd)
    3442:	11 23       	and	r17, r17
    3444:	11 f0       	breq	.+4      	; 0x344a <SDCommand+0x56>
	u8Buffer[2] = (uint8_t) (u32Arg >> 16);
	u8Buffer[3] = (uint8_t) (u32Arg >> 8);
	u8Buffer[4] = (uint8_t) (u32Arg >> 0);
	
	// Valid CRCs for specific commands
	u8CRC = 0;
    3446:	80 e0       	ldi	r24, 0x00	; 0
    3448:	01 c0       	rjmp	.+2      	; 0x344c <SDCommand+0x58>
	if (CMD0 == u8Cmd)
	{
		u8CRC = 0x95;
    344a:	85 e9       	ldi	r24, 0x95	; 149
	}
	
	if (CMD8 == u8Cmd)
    344c:	18 30       	cpi	r17, 0x08	; 8
    344e:	09 f4       	brne	.+2      	; 0x3452 <SDCommand+0x5e>
	{
		u8CRC = 0x87;
    3450:	87 e8       	ldi	r24, 0x87	; 135
	}
	
	// Now the CRC - Bit 0 means "ignore CRC"
	u8Buffer[5] = (uint8_t) (u8CRC | 0x01);
    3452:	81 60       	ori	r24, 0x01	; 1
    3454:	8e 83       	std	Y+6, r24	; 0x06
	
	// Send all bytes to the SD card
	SPIWrite(u8Buffer,
    3456:	46 e0       	ldi	r20, 0x06	; 6
    3458:	50 e0       	ldi	r21, 0x00	; 0
    345a:	be 01       	movw	r22, r28
    345c:	6f 5f       	subi	r22, 0xFF	; 255
    345e:	7f 4f       	sbci	r23, 0xFF	; 255
    3460:	81 e0       	ldi	r24, 0x01	; 1
    3462:	0e 94 22 20 	call	0x4044	; 0x4044 <SPITransaction>
			 sizeof(u8Buffer));
			 
	u8Count = 10;
    3466:	1a e0       	ldi	r17, 0x0A	; 10
	
	do 
	{
		SPIRead(&u8Response,
    3468:	41 e0       	ldi	r20, 0x01	; 1
    346a:	50 e0       	ldi	r21, 0x00	; 0
    346c:	be 01       	movw	r22, r28
    346e:	69 5f       	subi	r22, 0xF9	; 249
    3470:	7f 4f       	sbci	r23, 0xFF	; 255
    3472:	83 e0       	ldi	r24, 0x03	; 3
    3474:	0e 94 22 20 	call	0x4044	; 0x4044 <SPITransaction>
				sizeof(u8Response));
	} while ((u8Response & 0x80) && --u8Count);
    3478:	8f 81       	ldd	r24, Y+7	; 0x07
    347a:	88 23       	and	r24, r24
    347c:	14 f4       	brge	.+4      	; 0x3482 <SDCommand+0x8e>
    347e:	11 50       	subi	r17, 0x01	; 1
    3480:	99 f7       	brne	.-26     	; 0x3468 <SDCommand+0x74>
	
	return(u8Response);
}
    3482:	27 96       	adiw	r28, 0x07	; 7
    3484:	0f b6       	in	r0, 0x3f	; 63
    3486:	f8 94       	cli
    3488:	de bf       	out	0x3e, r29	; 62
    348a:	0f be       	out	0x3f, r0	; 63
    348c:	cd bf       	out	0x3d, r28	; 61
    348e:	df 91       	pop	r29
    3490:	cf 91       	pop	r28
    3492:	1f 91       	pop	r17
    3494:	0f 91       	pop	r16
    3496:	ff 90       	pop	r15
    3498:	ef 90       	pop	r14
    349a:	df 90       	pop	r13
    349c:	08 95       	ret

Disassembly of section .text.SDGoIdle:

00004c66 <SDGoIdle>:
			sizeof(uint32_t));
}

// SD - Go idle!
static uint8_t SDGoIdle(uint8_t *pu8Response)
{
    4c66:	cf 93       	push	r28
	uint8_t u8Response;
	
	SDSetCS(true);
    4c68:	81 e0       	ldi	r24, 0x01	; 1
    4c6a:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <SDSetCS>
	
	// Send our CMD0 (go idle)
	u8Response = SDCommand(CMD0,
    4c6e:	40 e0       	ldi	r20, 0x00	; 0
    4c70:	50 e0       	ldi	r21, 0x00	; 0
    4c72:	ba 01       	movw	r22, r20
    4c74:	80 e0       	ldi	r24, 0x00	; 0
    4c76:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <SDCommand>
    4c7a:	c8 2f       	mov	r28, r24
						   CMD0_ARG);
						   
	SDSetCS(false);
    4c7c:	80 e0       	ldi	r24, 0x00	; 0
    4c7e:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <SDSetCS>

	return(u8Response);
}
    4c82:	8c 2f       	mov	r24, r28
    4c84:	cf 91       	pop	r28
    4c86:	08 95       	ret

Disassembly of section .text.SDSendOpCondition:

0000467c <SDSendOpCondition>:
#define ACMD41_CRC  0x00

// Send operation condition
static uint8_t SDSendOpCondition(uint8_t *pu8Response,
								 uint32_t u32Arg)
{
    467c:	cf 92       	push	r12
    467e:	df 92       	push	r13
    4680:	ef 92       	push	r14
    4682:	ff 92       	push	r15
    4684:	cf 93       	push	r28
    4686:	6a 01       	movw	r12, r20
    4688:	7b 01       	movw	r14, r22
	uint8_t u8Response;
	
	// Assert chip select
	SDSetCS(true);
    468a:	81 e0       	ldi	r24, 0x01	; 1
    468c:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <SDSetCS>
	
	// Send the app command
	u8Response = SDCommand(ACMD41,
    4690:	b7 01       	movw	r22, r14
    4692:	a6 01       	movw	r20, r12
    4694:	89 ea       	ldi	r24, 0xA9	; 169
    4696:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <SDCommand>
    469a:	c8 2f       	mov	r28, r24
						   u32Arg);
	// Deassert chip select
	SDSetCS(false);
    469c:	80 e0       	ldi	r24, 0x00	; 0
    469e:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <SDSetCS>
	
	return(u8Response);
}
    46a2:	8c 2f       	mov	r24, r28
    46a4:	cf 91       	pop	r28
    46a6:	ff 90       	pop	r15
    46a8:	ef 90       	pop	r14
    46aa:	df 90       	pop	r13
    46ac:	cf 90       	pop	r12
    46ae:	08 95       	ret

Disassembly of section .text.SDSendOpConditionArg:

000040f4 <SDSendOpConditionArg>:
	return(u8Response);
}

static uint8_t SDSendOpConditionArg(uint8_t *pu8Resp,
									uint32_t u32Arg)
{
    40f4:	cf 92       	push	r12
    40f6:	df 92       	push	r13
    40f8:	ef 92       	push	r14
    40fa:	ff 92       	push	r15
    40fc:	0f 93       	push	r16
    40fe:	1f 93       	push	r17
    4100:	cf 93       	push	r28
    4102:	df 93       	push	r29
    4104:	8c 01       	movw	r16, r24
    4106:	6a 01       	movw	r12, r20
    4108:	7b 01       	movw	r14, r22
	uint8_t u8Attempts;
	uint8_t u8Response;
	
	u8Attempts = 0;
    410a:	c0 e0       	ldi	r28, 0x00	; 0
		
	// Loop until it comes alive - if it comes alive. Put the card in idle state.
	while (u8Attempts < SD_GO_IDLE_RETRIES)
    410c:	0f c0       	rjmp	.+30     	; 0x412c <SDSendOpConditionArg+0x38>
	{
		u8Response = SDSendOpCondition(pu8Resp,
    410e:	b7 01       	movw	r22, r14
    4110:	a6 01       	movw	r20, r12
    4112:	c8 01       	movw	r24, r16
    4114:	0e 94 3e 23 	call	0x467c	; 0x467c <SDSendOpCondition>
    4118:	d8 2f       	mov	r29, r24
									   u32Arg);
		if (0 == u8Response)
    411a:	88 23       	and	r24, r24
    411c:	49 f0       	breq	.+18     	; 0x4130 <SDSendOpConditionArg+0x3c>
		{
			break;
		}
			
		// Give it a little time to settle
		Delay(10000);
    411e:	60 e1       	ldi	r22, 0x10	; 16
    4120:	77 e2       	ldi	r23, 0x27	; 39
    4122:	80 e0       	ldi	r24, 0x00	; 0
    4124:	90 e0       	ldi	r25, 0x00	; 0
    4126:	0e 94 4f 21 	call	0x429e	; 0x429e <Delay>
		u8Attempts++;
    412a:	cf 5f       	subi	r28, 0xFF	; 255
	uint8_t u8Response;
	
	u8Attempts = 0;
		
	// Loop until it comes alive - if it comes alive. Put the card in idle state.
	while (u8Attempts < SD_GO_IDLE_RETRIES)
    412c:	c4 36       	cpi	r28, 0x64	; 100
    412e:	78 f3       	brcs	.-34     	; 0x410e <SDSendOpConditionArg+0x1a>
		Delay(10000);
		u8Attempts++;
	}

	// If we've retried too much, bail out. We're done.
	if (SD_GO_IDLE_RETRIES == u8Attempts)
    4130:	c4 36       	cpi	r28, 0x64	; 100
    4132:	09 f4       	brne	.+2      	; 0x4136 <SDSendOpConditionArg+0x42>
	{
		u8Response = 0x80;
    4134:	d0 e8       	ldi	r29, 0x80	; 128
	}
	
	return(u8Response);
}
    4136:	8d 2f       	mov	r24, r29
    4138:	df 91       	pop	r29
    413a:	cf 91       	pop	r28
    413c:	1f 91       	pop	r17
    413e:	0f 91       	pop	r16
    4140:	ff 90       	pop	r15
    4142:	ef 90       	pop	r14
    4144:	df 90       	pop	r13
    4146:	cf 90       	pop	r12
    4148:	08 95       	ret

Disassembly of section .text.SDWaitResponse7:

00004e9a <SDWaitResponse7>:

// This will return true if a response 7 was received, otherwise false
static void SDWaitResponse7(uint8_t *pu8ResponseByte)
{
	// Go read the remaining 4 bytes
	SPIRead(pu8ResponseByte,
    4e9a:	44 e0       	ldi	r20, 0x04	; 4
    4e9c:	50 e0       	ldi	r21, 0x00	; 0
    4e9e:	bc 01       	movw	r22, r24
    4ea0:	83 e0       	ldi	r24, 0x03	; 3
    4ea2:	0e 94 22 20 	call	0x4044	; 0x4044 <SPITransaction>
    4ea6:	08 95       	ret

Disassembly of section .text.SDSendInterfaceCondition:

000046b0 <SDSendInterfaceCondition>:
	return(u8Response);
}

// Send interface condition
static uint8_t SDSendInterfaceCondition(uint8_t *pu8Response)
{
    46b0:	0f 93       	push	r16
    46b2:	1f 93       	push	r17
    46b4:	cf 93       	push	r28
    46b6:	8c 01       	movw	r16, r24
	uint8_t u8Response;
	
	SDSetCS(true);
    46b8:	81 e0       	ldi	r24, 0x01	; 1
    46ba:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <SDSetCS>
	
	// Send our CMD8 Send interface condition
	u8Response = SDCommand(CMD8,
    46be:	4a ea       	ldi	r20, 0xAA	; 170
    46c0:	51 e0       	ldi	r21, 0x01	; 1
    46c2:	60 e0       	ldi	r22, 0x00	; 0
    46c4:	70 e0       	ldi	r23, 0x00	; 0
    46c6:	88 e0       	ldi	r24, 0x08	; 8
    46c8:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <SDCommand>
    46cc:	c8 2f       	mov	r28, r24
						   CMD8_ARG);
						   
	SDWaitResponse7(pu8Response);
    46ce:	c8 01       	movw	r24, r16
    46d0:	0e 94 4d 27 	call	0x4e9a	; 0x4e9a <SDWaitResponse7>
		
	SDSetCS(false);
    46d4:	80 e0       	ldi	r24, 0x00	; 0
    46d6:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <SDSetCS>

	return(u8Response);
}
    46da:	8c 2f       	mov	r24, r28
    46dc:	cf 91       	pop	r28
    46de:	1f 91       	pop	r17
    46e0:	0f 91       	pop	r16
    46e2:	08 95       	ret

Disassembly of section .text.SDReadOCR:

000046e4 <SDReadOCR>:
#define CMD58_ARG   0x00000000
#define CMD58_CRC   0x00

// Go read the OCR
static uint8_t SDReadOCR(uint8_t *pu8Response)
{
    46e4:	0f 93       	push	r16
    46e6:	1f 93       	push	r17
    46e8:	cf 93       	push	r28
    46ea:	8c 01       	movw	r16, r24
	uint8_t u8Response;
	
	// Assert chip select
	SDSetCS(true);
    46ec:	81 e0       	ldi	r24, 0x01	; 1
    46ee:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <SDSetCS>
	
	// Send the app command
	u8Response = SDCommand(CMD58,
    46f2:	40 e0       	ldi	r20, 0x00	; 0
    46f4:	50 e0       	ldi	r21, 0x00	; 0
    46f6:	ba 01       	movw	r22, r20
    46f8:	8a e3       	ldi	r24, 0x3A	; 58
    46fa:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <SDCommand>
    46fe:	c8 2f       	mov	r28, r24
						   CMD58_ARG);

	// Read response
	SDWaitResponse7(pu8Response);
    4700:	c8 01       	movw	r24, r16
    4702:	0e 94 4d 27 	call	0x4e9a	; 0x4e9a <SDWaitResponse7>

	// Deassert chip select
	SDSetCS(false);
    4706:	80 e0       	ldi	r24, 0x00	; 0
    4708:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <SDSetCS>
	
	return(u8Response);
}
    470c:	8c 2f       	mov	r24, r28
    470e:	cf 91       	pop	r28
    4710:	1f 91       	pop	r17
    4712:	0f 91       	pop	r16
    4714:	08 95       	ret

Disassembly of section .text.SDReadCSD:

00003bb2 <SDReadCSD>:
#define CMD9_ARG    0x000000000
#define CMD9_CRC    0x00

// Read CSD (card specific data) - CSD is 128 bits - see the SD spec for details.
static uint8_t SDReadCSD(uint8_t *pu8CSD)
{
    3bb2:	ef 92       	push	r14
    3bb4:	ff 92       	push	r15
    3bb6:	0f 93       	push	r16
    3bb8:	1f 93       	push	r17
    3bba:	cf 93       	push	r28
    3bbc:	df 93       	push	r29
    3bbe:	0f 92       	push	r0
    3bc0:	cd b7       	in	r28, 0x3d	; 61
    3bc2:	de b7       	in	r29, 0x3e	; 62
    3bc4:	7c 01       	movw	r14, r24
	uint8_t u8Response;
	uint8_t u8CmdResponse;
	uint8_t u8Count = 8;
	
	SDSetCS(true);
    3bc6:	81 e0       	ldi	r24, 0x01	; 1
    3bc8:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <SDSetCS>
	
	// Send our CMD9 (read CSD)
	u8CmdResponse = SDCommand(CMD9,
    3bcc:	40 e0       	ldi	r20, 0x00	; 0
    3bce:	50 e0       	ldi	r21, 0x00	; 0
    3bd0:	ba 01       	movw	r22, r20
    3bd2:	89 e0       	ldi	r24, 0x09	; 9
    3bd4:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <SDCommand>
    3bd8:	08 2f       	mov	r16, r24
							  CMD9_ARG);
	
	// Success! Let's get a response
	if (u8CmdResponse)
    3bda:	81 11       	cpse	r24, r1
    3bdc:	1c c0       	rjmp	.+56     	; 0x3c16 <SDReadCSD+0x64>
    3bde:	18 e0       	ldi	r17, 0x08	; 8
    3be0:	01 c0       	rjmp	.+2      	; 0x3be4 <SDReadCSD+0x32>
	do 
	{
		SPIRead(&u8Response,
			    sizeof(u8Response));
	} while ((u8Response != SD_START_TOKEN) &&
			 (u8Count--));
    3be2:	18 2f       	mov	r17, r24
	}
	
	// Wait until SD_START_TOKEN (start of data sector). We should easily see it in a few bytes.
	do 
	{
		SPIRead(&u8Response,
    3be4:	41 e0       	ldi	r20, 0x01	; 1
    3be6:	50 e0       	ldi	r21, 0x00	; 0
    3be8:	be 01       	movw	r22, r28
    3bea:	6f 5f       	subi	r22, 0xFF	; 255
    3bec:	7f 4f       	sbci	r23, 0xFF	; 255
    3bee:	83 e0       	ldi	r24, 0x03	; 3
    3bf0:	0e 94 22 20 	call	0x4044	; 0x4044 <SPITransaction>
			    sizeof(u8Response));
	} while ((u8Response != SD_START_TOKEN) &&
    3bf4:	89 81       	ldd	r24, Y+1	; 0x01
			 (u8Count--));
    3bf6:	8e 3f       	cpi	r24, 0xFE	; 254
    3bf8:	29 f0       	breq	.+10     	; 0x3c04 <SDReadCSD+0x52>
    3bfa:	8f ef       	ldi	r24, 0xFF	; 255
    3bfc:	81 0f       	add	r24, r17
	// Wait until SD_START_TOKEN (start of data sector). We should easily see it in a few bytes.
	do 
	{
		SPIRead(&u8Response,
			    sizeof(u8Response));
	} while ((u8Response != SD_START_TOKEN) &&
    3bfe:	11 11       	cpse	r17, r1
    3c00:	f0 cf       	rjmp	.-32     	; 0x3be2 <SDReadCSD+0x30>
    3c02:	01 c0       	rjmp	.+2      	; 0x3c06 <SDReadCSD+0x54>
    3c04:	81 2f       	mov	r24, r17
			 (u8Count--));
			 
	// If we haven't seen it in u8Count bytes, then error the call
	if (0 == u8Count)
    3c06:	88 23       	and	r24, r24
    3c08:	31 f0       	breq	.+12     	; 0x3c16 <SDReadCSD+0x64>
	{
		goto errorExit;
	}
	
	// Go read the remaining 16 bytes
	SPIRead(pu8CSD,
    3c0a:	40 e1       	ldi	r20, 0x10	; 16
    3c0c:	50 e0       	ldi	r21, 0x00	; 0
    3c0e:	b7 01       	movw	r22, r14
    3c10:	83 e0       	ldi	r24, 0x03	; 3
    3c12:	0e 94 22 20 	call	0x4044	; 0x4044 <SPITransaction>
		    16);
	
errorExit:	
	SDSetCS(false);
    3c16:	80 e0       	ldi	r24, 0x00	; 0
    3c18:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <SDSetCS>
	return(u8CmdResponse);
	
}
    3c1c:	80 2f       	mov	r24, r16
    3c1e:	0f 90       	pop	r0
    3c20:	df 91       	pop	r29
    3c22:	cf 91       	pop	r28
    3c24:	1f 91       	pop	r17
    3c26:	0f 91       	pop	r16
    3c28:	ff 90       	pop	r15
    3c2a:	ef 90       	pop	r14
    3c2c:	08 95       	ret

Disassembly of section .text.SDReceiveDataBlock:

0000379a <SDReceiveDataBlock>:
}

// Receives a datablock during the data phase which may take some time
static bool SDReceiveDataBlock(uint8_t *pu8Buffer,
							   uint16_t u16RXCount)
{
    379a:	cf 92       	push	r12
    379c:	df 92       	push	r13
    379e:	ef 92       	push	r14
    37a0:	ff 92       	push	r15
    37a2:	0f 93       	push	r16
    37a4:	1f 93       	push	r17
    37a6:	cf 93       	push	r28
    37a8:	df 93       	push	r29
    37aa:	0f 92       	push	r0
    37ac:	cd b7       	in	r28, 0x3d	; 61
    37ae:	de b7       	in	r29, 0x3e	; 62
    37b0:	7c 01       	movw	r14, r24
    37b2:	6b 01       	movw	r12, r22
	uint8_t u8Response;
	uint16_t u16Count = 4096;
    37b4:	00 e0       	ldi	r16, 0x00	; 0
    37b6:	10 e1       	ldi	r17, 0x10	; 16
    37b8:	01 c0       	rjmp	.+2      	; 0x37bc <SDReceiveDataBlock+0x22>
	{
		SPIRead(&u8Response,
				sizeof(u8Response));
	} 
	while ((u8Response != SD_START_TOKEN) &&
		   (u16Count--));
    37ba:	89 01       	movw	r16, r18
	uint16_t u16Count = 4096;
	
	// Wait for response token
	do 
	{
		SPIRead(&u8Response,
    37bc:	41 e0       	ldi	r20, 0x01	; 1
    37be:	50 e0       	ldi	r21, 0x00	; 0
    37c0:	be 01       	movw	r22, r28
    37c2:	6f 5f       	subi	r22, 0xFF	; 255
    37c4:	7f 4f       	sbci	r23, 0xFF	; 255
    37c6:	83 e0       	ldi	r24, 0x03	; 3
    37c8:	0e 94 22 20 	call	0x4044	; 0x4044 <SPITransaction>
				sizeof(u8Response));
	} 
	while ((u8Response != SD_START_TOKEN) &&
    37cc:	89 81       	ldd	r24, Y+1	; 0x01
		   (u16Count--));
    37ce:	8e 3f       	cpi	r24, 0xFE	; 254
    37d0:	29 f0       	breq	.+10     	; 0x37dc <SDReceiveDataBlock+0x42>
    37d2:	98 01       	movw	r18, r16
    37d4:	21 50       	subi	r18, 0x01	; 1
    37d6:	31 09       	sbc	r19, r1
	do 
	{
		SPIRead(&u8Response,
				sizeof(u8Response));
	} 
	while ((u8Response != SD_START_TOKEN) &&
    37d8:	01 2b       	or	r16, r17
    37da:	79 f7       	brne	.-34     	; 0x37ba <SDReceiveDataBlock+0x20>
		   (u16Count--));
		   
	if (u8Response != SD_START_TOKEN)
    37dc:	8e 3f       	cpi	r24, 0xFE	; 254
    37de:	b9 f4       	brne	.+46     	; 0x380e <SDReceiveDataBlock+0x74>
	{
		return(false);
	}
	
	// Start of data. Pull it down.
	SPIRead(pu8Buffer,
    37e0:	a6 01       	movw	r20, r12
    37e2:	b7 01       	movw	r22, r14
    37e4:	83 e0       	ldi	r24, 0x03	; 3
    37e6:	0e 94 22 20 	call	0x4044	; 0x4044 <SPITransaction>
			u16RXCount);
			
	// Discard CRC
	SPIRead(&u8Response,
    37ea:	41 e0       	ldi	r20, 0x01	; 1
    37ec:	50 e0       	ldi	r21, 0x00	; 0
    37ee:	be 01       	movw	r22, r28
    37f0:	6f 5f       	subi	r22, 0xFF	; 255
    37f2:	7f 4f       	sbci	r23, 0xFF	; 255
    37f4:	83 e0       	ldi	r24, 0x03	; 3
    37f6:	0e 94 22 20 	call	0x4044	; 0x4044 <SPITransaction>
			sizeof(u8Response));
	SPIRead(&u8Response,
    37fa:	41 e0       	ldi	r20, 0x01	; 1
    37fc:	50 e0       	ldi	r21, 0x00	; 0
    37fe:	be 01       	movw	r22, r28
    3800:	6f 5f       	subi	r22, 0xFF	; 255
    3802:	7f 4f       	sbci	r23, 0xFF	; 255
    3804:	83 e0       	ldi	r24, 0x03	; 3
    3806:	0e 94 22 20 	call	0x4044	; 0x4044 <SPITransaction>
			sizeof(u8Response));
	return(true);			   
    380a:	81 e0       	ldi	r24, 0x01	; 1
    380c:	01 c0       	rjmp	.+2      	; 0x3810 <SDReceiveDataBlock+0x76>
	while ((u8Response != SD_START_TOKEN) &&
		   (u16Count--));
		   
	if (u8Response != SD_START_TOKEN)
	{
		return(false);
    380e:	80 e0       	ldi	r24, 0x00	; 0
	SPIRead(&u8Response,
			sizeof(u8Response));
	SPIRead(&u8Response,
			sizeof(u8Response));
	return(true);			   
}
    3810:	0f 90       	pop	r0
    3812:	df 91       	pop	r29
    3814:	cf 91       	pop	r28
    3816:	1f 91       	pop	r17
    3818:	0f 91       	pop	r16
    381a:	ff 90       	pop	r15
    381c:	ef 90       	pop	r14
    381e:	df 90       	pop	r13
    3820:	cf 90       	pop	r12
    3822:	08 95       	ret

Disassembly of section .text.SDTransmitDataBlock:

0000310a <SDTransmitDataBlock>:

// Transmits a datablock during the data phase which may take some time
static bool SDTransmitDataBlock(uint8_t *pu8Buffer,
							    uint16_t u16TXCount,
								uint8_t u8DataPhaseToken)
{
    310a:	ef 92       	push	r14
    310c:	ff 92       	push	r15
    310e:	0f 93       	push	r16
    3110:	1f 93       	push	r17
    3112:	cf 93       	push	r28
    3114:	df 93       	push	r29
    3116:	00 d0       	rcall	.+0      	; 0x3118 <SDTransmitDataBlock+0xe>
    3118:	cd b7       	in	r28, 0x3d	; 61
    311a:	de b7       	in	r29, 0x3e	; 62
    311c:	8c 01       	movw	r16, r24
    311e:	7b 01       	movw	r14, r22
    3120:	4a 83       	std	Y+2, r20	; 0x02
	uint8_t u8Response;
	uint16_t u16Attempts;
	bool bResult = true;

	// Send the data phase token (whatever it is)
	SPIWrite(&u8DataPhaseToken,
    3122:	41 e0       	ldi	r20, 0x01	; 1
    3124:	50 e0       	ldi	r21, 0x00	; 0
    3126:	be 01       	movw	r22, r28
    3128:	6e 5f       	subi	r22, 0xFE	; 254
    312a:	7f 4f       	sbci	r23, 0xFF	; 255
    312c:	81 e0       	ldi	r24, 0x01	; 1
    312e:	0e 94 22 20 	call	0x4044	; 0x4044 <SPITransaction>
			 sizeof(u8DataPhaseToken));
	
	if (u8DataPhaseToken != SD_STOP_TRANSACTION)
    3132:	8a 81       	ldd	r24, Y+2	; 0x02
    3134:	8d 3f       	cpi	r24, 0xFD	; 253
    3136:	e1 f1       	breq	.+120    	; 0x31b0 <SDTransmitDataBlock+0xa6>
	{
		// As long as we're not stopping a transaction, we're writing data
		SPIWrite(pu8Buffer,
    3138:	a7 01       	movw	r20, r14
    313a:	b8 01       	movw	r22, r16
    313c:	81 e0       	ldi	r24, 0x01	; 1
    313e:	0e 94 22 20 	call	0x4044	; 0x4044 <SPITransaction>
				 u16TXCount);
				 
		// Wait for acceptance of the sector
		u16Attempts = 0;
    3142:	00 e0       	ldi	r16, 0x00	; 0
    3144:	10 e0       	ldi	r17, 0x00	; 0
		while (u16Attempts < SD_MAX_WRITE_ATTEMPTS)
    3146:	0d c0       	rjmp	.+26     	; 0x3162 <SDTransmitDataBlock+0x58>
		{
			// Get some data
			SPIRead(&u8Response,
    3148:	41 e0       	ldi	r20, 0x01	; 1
    314a:	50 e0       	ldi	r21, 0x00	; 0
    314c:	be 01       	movw	r22, r28
    314e:	6f 5f       	subi	r22, 0xFF	; 255
    3150:	7f 4f       	sbci	r23, 0xFF	; 255
    3152:	83 e0       	ldi	r24, 0x03	; 3
    3154:	0e 94 22 20 	call	0x4044	; 0x4044 <SPITransaction>
					sizeof(u8Response));
			if (u8Response != 0xff)
    3158:	89 81       	ldd	r24, Y+1	; 0x01
    315a:	8f 3f       	cpi	r24, 0xFF	; 255
    315c:	31 f4       	brne	.+12     	; 0x316a <SDTransmitDataBlock+0x60>
			{
				break;
			}
				
			++u16Attempts;
    315e:	0f 5f       	subi	r16, 0xFF	; 255
    3160:	1f 4f       	sbci	r17, 0xFF	; 255
		SPIWrite(pu8Buffer,
				 u16TXCount);
				 
		// Wait for acceptance of the sector
		u16Attempts = 0;
		while (u16Attempts < SD_MAX_WRITE_ATTEMPTS)
    3162:	0e 39       	cpi	r16, 0x9E	; 158
    3164:	88 e9       	ldi	r24, 0x98	; 152
    3166:	18 07       	cpc	r17, r24
    3168:	78 f3       	brcs	.-34     	; 0x3148 <SDTransmitDataBlock+0x3e>
				
			++u16Attempts;
		}
			
		// We've timed out or else the card is dead
		if (SD_MAX_WRITE_ATTEMPTS == u16Attempts)
    316a:	0e 39       	cpi	r16, 0x9E	; 158
    316c:	18 49       	sbci	r17, 0x98	; 152
    316e:	11 f1       	breq	.+68     	; 0x31b4 <SDTransmitDataBlock+0xaa>
			bResult = false;
			goto errorExit;
		}
			
		// See if the data was accepted
		u8Response &= 0x1f;
    3170:	89 81       	ldd	r24, Y+1	; 0x01
    3172:	8f 71       	andi	r24, 0x1F	; 31
    3174:	89 83       	std	Y+1, r24	; 0x01
		if (0x05 == u8Response)
    3176:	85 30       	cpi	r24, 0x05	; 5
    3178:	81 f0       	breq	.+32     	; 0x319a <SDTransmitDataBlock+0x90>
			// Success!
		}
		else
		{
			// Sector not accepted
			bResult = false;
    317a:	80 e0       	ldi	r24, 0x00	; 0
    317c:	1e c0       	rjmp	.+60     	; 0x31ba <SDTransmitDataBlock+0xb0>
			// Wait for the write to finish
			u16Attempts = 0;
			while (u16Attempts < SD_MAX_WRITE_ATTEMPTS)
			{
				// Wait for the card to accept writing the sector
				SPIRead(&u8Response,
    317e:	41 e0       	ldi	r20, 0x01	; 1
    3180:	50 e0       	ldi	r21, 0x00	; 0
    3182:	be 01       	movw	r22, r28
    3184:	6f 5f       	subi	r22, 0xFF	; 255
    3186:	7f 4f       	sbci	r23, 0xFF	; 255
    3188:	83 e0       	ldi	r24, 0x03	; 3
    318a:	0e 94 22 20 	call	0x4044	; 0x4044 <SPITransaction>
						sizeof(u8Response));
				if (u8Response)
    318e:	89 81       	ldd	r24, Y+1	; 0x01
    3190:	81 11       	cpse	r24, r1
    3192:	09 c0       	rjmp	.+18     	; 0x31a6 <SDTransmitDataBlock+0x9c>
				{
					break;
				}
					
				++u16Attempts;
    3194:	0f 5f       	subi	r16, 0xFF	; 255
    3196:	1f 4f       	sbci	r17, 0xFF	; 255
    3198:	02 c0       	rjmp	.+4      	; 0x319e <SDTransmitDataBlock+0x94>
    319a:	00 e0       	ldi	r16, 0x00	; 0
    319c:	10 e0       	ldi	r17, 0x00	; 0
		u8Response &= 0x1f;
		if (0x05 == u8Response)
		{
			// Wait for the write to finish
			u16Attempts = 0;
			while (u16Attempts < SD_MAX_WRITE_ATTEMPTS)
    319e:	0e 39       	cpi	r16, 0x9E	; 158
    31a0:	88 e9       	ldi	r24, 0x98	; 152
    31a2:	18 07       	cpc	r17, r24
    31a4:	60 f3       	brcs	.-40     	; 0x317e <SDTransmitDataBlock+0x74>
				}
					
				++u16Attempts;
			}
				
			if (SD_MAX_WRITE_ATTEMPTS == u16Attempts)
    31a6:	0e 39       	cpi	r16, 0x9E	; 158
    31a8:	18 49       	sbci	r17, 0x98	; 152
    31aa:	31 f0       	breq	.+12     	; 0x31b8 <SDTransmitDataBlock+0xae>
							    uint16_t u16TXCount,
								uint8_t u8DataPhaseToken)
{
	uint8_t u8Response;
	uint16_t u16Attempts;
	bool bResult = true;
    31ac:	81 e0       	ldi	r24, 0x01	; 1
    31ae:	05 c0       	rjmp	.+10     	; 0x31ba <SDTransmitDataBlock+0xb0>
    31b0:	81 e0       	ldi	r24, 0x01	; 1
    31b2:	03 c0       	rjmp	.+6      	; 0x31ba <SDTransmitDataBlock+0xb0>
		}
			
		// We've timed out or else the card is dead
		if (SD_MAX_WRITE_ATTEMPTS == u16Attempts)
		{
			bResult = false;
    31b4:	80 e0       	ldi	r24, 0x00	; 0
    31b6:	01 c0       	rjmp	.+2      	; 0x31ba <SDTransmitDataBlock+0xb0>
				++u16Attempts;
			}
				
			if (SD_MAX_WRITE_ATTEMPTS == u16Attempts)
			{
				bResult = false;
    31b8:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	
errorExit:
	return(bResult);
}
    31ba:	0f 90       	pop	r0
    31bc:	0f 90       	pop	r0
    31be:	df 91       	pop	r29
    31c0:	cf 91       	pop	r28
    31c2:	1f 91       	pop	r17
    31c4:	0f 91       	pop	r16
    31c6:	ff 90       	pop	r15
    31c8:	ef 90       	pop	r14
    31ca:	08 95       	ret

Disassembly of section .text.SDInit:

000021ac <SDInit>:

bool SDGetBlockSize(uint32_t *pu32BlockSize)
{
	*pu32BlockSize = sg_u16BlockSize;
	return(true);
}
    21ac:	1f 93       	push	r17
    21ae:	cf 93       	push	r28
    21b0:	df 93       	push	r29
    21b2:	00 d0       	rcall	.+0      	; 0x21b4 <SDInit+0x8>
    21b4:	00 d0       	rcall	.+0      	; 0x21b6 <SDInit+0xa>
    21b6:	0f 92       	push	r0
    21b8:	cd b7       	in	r28, 0x3d	; 61
    21ba:	de b7       	in	r29, 0x3e	; 62
    21bc:	87 b1       	in	r24, 0x07	; 7
    21be:	80 64       	ori	r24, 0x40	; 64
    21c0:	87 b9       	out	0x07, r24	; 7
    21c2:	88 b1       	in	r24, 0x08	; 8
    21c4:	80 64       	ori	r24, 0x40	; 64
    21c6:	88 b9       	out	0x08, r24	; 8
    21c8:	88 b1       	in	r24, 0x08	; 8
    21ca:	80 64       	ori	r24, 0x40	; 64
    21cc:	88 b9       	out	0x08, r24	; 8
    21ce:	0e 94 16 24 	call	0x482c	; 0x482c <SPIInit>
    21d2:	0e 94 b5 22 	call	0x456a	; 0x456a <SDPowerup>
    21d6:	10 e0       	ldi	r17, 0x00	; 0
    21d8:	0d c0       	rjmp	.+26     	; 0x21f4 <SDInit+0x48>
    21da:	ce 01       	movw	r24, r28
    21dc:	01 96       	adiw	r24, 0x01	; 1
    21de:	0e 94 33 26 	call	0x4c66	; 0x4c66 <SDGoIdle>
    21e2:	81 30       	cpi	r24, 0x01	; 1
    21e4:	49 f0       	breq	.+18     	; 0x21f8 <SDInit+0x4c>
    21e6:	60 e1       	ldi	r22, 0x10	; 16
    21e8:	77 e2       	ldi	r23, 0x27	; 39
    21ea:	80 e0       	ldi	r24, 0x00	; 0
    21ec:	90 e0       	ldi	r25, 0x00	; 0
    21ee:	0e 94 4f 21 	call	0x429e	; 0x429e <Delay>
    21f2:	1f 5f       	subi	r17, 0xFF	; 255
    21f4:	14 36       	cpi	r17, 0x64	; 100
    21f6:	88 f3       	brcs	.-30     	; 0x21da <SDInit+0x2e>
    21f8:	14 36       	cpi	r17, 0x64	; 100
    21fa:	09 f4       	brne	.+2      	; 0x21fe <SDInit+0x52>
    21fc:	76 c0       	rjmp	.+236    	; 0x22ea <SDInit+0x13e>
    21fe:	ce 01       	movw	r24, r28
    2200:	01 96       	adiw	r24, 0x01	; 1
    2202:	25 e0       	ldi	r18, 0x05	; 5
    2204:	fc 01       	movw	r30, r24
    2206:	11 92       	st	Z+, r1
    2208:	2a 95       	dec	r18
    220a:	e9 f7       	brne	.-6      	; 0x2206 <SDInit+0x5a>
    220c:	0e 94 58 23 	call	0x46b0	; 0x46b0 <SDSendInterfaceCondition>
    2210:	81 30       	cpi	r24, 0x01	; 1
    2212:	09 f0       	breq	.+2      	; 0x2216 <SDInit+0x6a>
    2214:	5e c0       	rjmp	.+188    	; 0x22d2 <SDInit+0x126>
    2216:	8c 81       	ldd	r24, Y+4	; 0x04
    2218:	8a 3a       	cpi	r24, 0xAA	; 170
    221a:	09 f0       	breq	.+2      	; 0x221e <SDInit+0x72>
    221c:	68 c0       	rjmp	.+208    	; 0x22ee <SDInit+0x142>
    221e:	40 e0       	ldi	r20, 0x00	; 0
    2220:	50 e0       	ldi	r21, 0x00	; 0
    2222:	60 e0       	ldi	r22, 0x00	; 0
    2224:	70 e4       	ldi	r23, 0x40	; 64
    2226:	ce 01       	movw	r24, r28
    2228:	01 96       	adiw	r24, 0x01	; 1
    222a:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <SDSendOpConditionArg>
    222e:	81 11       	cpse	r24, r1
    2230:	60 c0       	rjmp	.+192    	; 0x22f2 <SDInit+0x146>
    2232:	ce 01       	movw	r24, r28
    2234:	01 96       	adiw	r24, 0x01	; 1
    2236:	0e 94 72 23 	call	0x46e4	; 0x46e4 <SDReadOCR>
    223a:	88 23       	and	r24, r24
    223c:	0c f4       	brge	.+2      	; 0x2240 <SDInit+0x94>
    223e:	5b c0       	rjmp	.+182    	; 0x22f6 <SDInit+0x14a>
    2240:	8d e2       	ldi	r24, 0x2D	; 45
    2242:	99 e0       	ldi	r25, 0x09	; 9
    2244:	0e 94 d9 1d 	call	0x3bb2	; 0x3bb2 <SDReadCSD>
    2248:	88 23       	and	r24, r24
    224a:	0c f4       	brge	.+2      	; 0x224e <SDInit+0xa2>
    224c:	56 c0       	rjmp	.+172    	; 0x22fa <SDInit+0x14e>
    224e:	ed e2       	ldi	r30, 0x2D	; 45
    2250:	f9 e0       	ldi	r31, 0x09	; 9
    2252:	87 81       	ldd	r24, Z+7	; 0x07
    2254:	8f 73       	andi	r24, 0x3F	; 63
    2256:	90 e0       	ldi	r25, 0x00	; 0
    2258:	a0 e0       	ldi	r26, 0x00	; 0
    225a:	b0 e0       	ldi	r27, 0x00	; 0
    225c:	bc 01       	movw	r22, r24
    225e:	55 27       	eor	r21, r21
    2260:	44 27       	eor	r20, r20
    2262:	90 85       	ldd	r25, Z+8	; 0x08
    2264:	89 2f       	mov	r24, r25
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	a0 e0       	ldi	r26, 0x00	; 0
    226a:	b0 e0       	ldi	r27, 0x00	; 0
    226c:	ba 2f       	mov	r27, r26
    226e:	a9 2f       	mov	r26, r25
    2270:	98 2f       	mov	r25, r24
    2272:	88 27       	eor	r24, r24
    2274:	84 2b       	or	r24, r20
    2276:	95 2b       	or	r25, r21
    2278:	a6 2b       	or	r26, r22
    227a:	b7 2b       	or	r27, r23
    227c:	21 85       	ldd	r18, Z+9	; 0x09
    227e:	82 2b       	or	r24, r18
    2280:	01 96       	adiw	r24, 0x01	; 1
    2282:	a1 1d       	adc	r26, r1
    2284:	b1 1d       	adc	r27, r1
    2286:	07 2e       	mov	r0, r23
    2288:	7a e0       	ldi	r23, 0x0A	; 10
    228a:	88 0f       	add	r24, r24
    228c:	99 1f       	adc	r25, r25
    228e:	aa 1f       	adc	r26, r26
    2290:	bb 1f       	adc	r27, r27
    2292:	7a 95       	dec	r23
    2294:	d1 f7       	brne	.-12     	; 0x228a <SDInit+0xde>
    2296:	70 2d       	mov	r23, r0
    2298:	80 93 54 09 	sts	0x0954, r24	; 0x800954 <sg_u32SDSectorCount>
    229c:	90 93 55 09 	sts	0x0955, r25	; 0x800955 <sg_u32SDSectorCount+0x1>
    22a0:	a0 93 56 09 	sts	0x0956, r26	; 0x800956 <sg_u32SDSectorCount+0x2>
    22a4:	b0 93 57 09 	sts	0x0957, r27	; 0x800957 <sg_u32SDSectorCount+0x3>
    22a8:	25 81       	ldd	r18, Z+5	; 0x05
    22aa:	2f 70       	andi	r18, 0x0F	; 15
    22ac:	81 e0       	ldi	r24, 0x01	; 1
    22ae:	90 e0       	ldi	r25, 0x00	; 0
    22b0:	02 c0       	rjmp	.+4      	; 0x22b6 <SDInit+0x10a>
    22b2:	88 0f       	add	r24, r24
    22b4:	99 1f       	adc	r25, r25
    22b6:	2a 95       	dec	r18
    22b8:	e2 f7       	brpl	.-8      	; 0x22b2 <SDInit+0x106>
    22ba:	90 93 5f 09 	sts	0x095F, r25	; 0x80095f <sg_u16BlockSize+0x1>
    22be:	80 93 5e 09 	sts	0x095E, r24	; 0x80095e <sg_u16BlockSize>
    22c2:	60 ec       	ldi	r22, 0xC0	; 192
    22c4:	78 ed       	ldi	r23, 0xD8	; 216
    22c6:	87 ea       	ldi	r24, 0xA7	; 167
    22c8:	90 e0       	ldi	r25, 0x00	; 0
    22ca:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <SPISetBaudRate>
    22ce:	81 e0       	ldi	r24, 0x01	; 1
    22d0:	17 c0       	rjmp	.+46     	; 0x2300 <SDInit+0x154>
    22d2:	40 e0       	ldi	r20, 0x00	; 0
    22d4:	50 e0       	ldi	r21, 0x00	; 0
    22d6:	60 e0       	ldi	r22, 0x00	; 0
    22d8:	70 e4       	ldi	r23, 0x40	; 64
    22da:	ce 01       	movw	r24, r28
    22dc:	01 96       	adiw	r24, 0x01	; 1
    22de:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <SDSendOpConditionArg>
    22e2:	81 11       	cpse	r24, r1
    22e4:	0c c0       	rjmp	.+24     	; 0x22fe <SDInit+0x152>
    22e6:	81 e0       	ldi	r24, 0x01	; 1
    22e8:	0b c0       	rjmp	.+22     	; 0x2300 <SDInit+0x154>
    22ea:	80 e0       	ldi	r24, 0x00	; 0
    22ec:	09 c0       	rjmp	.+18     	; 0x2300 <SDInit+0x154>
    22ee:	80 e0       	ldi	r24, 0x00	; 0
    22f0:	07 c0       	rjmp	.+14     	; 0x2300 <SDInit+0x154>
    22f2:	80 e0       	ldi	r24, 0x00	; 0
    22f4:	05 c0       	rjmp	.+10     	; 0x2300 <SDInit+0x154>
    22f6:	80 e0       	ldi	r24, 0x00	; 0
    22f8:	03 c0       	rjmp	.+6      	; 0x2300 <SDInit+0x154>
    22fa:	80 e0       	ldi	r24, 0x00	; 0
    22fc:	01 c0       	rjmp	.+2      	; 0x2300 <SDInit+0x154>
    22fe:	80 e0       	ldi	r24, 0x00	; 0
    2300:	0f 90       	pop	r0
    2302:	0f 90       	pop	r0
    2304:	0f 90       	pop	r0
    2306:	0f 90       	pop	r0
    2308:	0f 90       	pop	r0
    230a:	df 91       	pop	r29
    230c:	cf 91       	pop	r28
    230e:	1f 91       	pop	r17
    2310:	08 95       	ret

Disassembly of section .text.SDRead:

00002d12 <SDRead>:

// Read one or more sectors from SD
bool SDRead(uint32_t u32Sector,
			uint8_t *pu8Buffer,
			uint32_t u32SectorCount)
{
    2d12:	8f 92       	push	r8
    2d14:	9f 92       	push	r9
    2d16:	af 92       	push	r10
    2d18:	bf 92       	push	r11
    2d1a:	cf 92       	push	r12
    2d1c:	df 92       	push	r13
    2d1e:	ef 92       	push	r14
    2d20:	ff 92       	push	r15
    2d22:	0f 93       	push	r16
    2d24:	1f 93       	push	r17
    2d26:	cf 93       	push	r28
    2d28:	df 93       	push	r29
    2d2a:	4b 01       	movw	r8, r22
    2d2c:	5c 01       	movw	r10, r24
    2d2e:	ea 01       	movw	r28, r20
    2d30:	68 01       	movw	r12, r16
    2d32:	79 01       	movw	r14, r18
	bool bResult = false;
	
	// Pet the watchdog
	WatchdogReset();
    2d34:	0e 94 82 27 	call	0x4f04	; 0x4f04 <WatchdogReset>
		
	// Assert chip select
	SDSetCS(true);
    2d38:	81 e0       	ldi	r24, 0x01	; 1
    2d3a:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <SDSetCS>

	if (1 == u32SectorCount)
    2d3e:	81 e0       	ldi	r24, 0x01	; 1
    2d40:	c8 16       	cp	r12, r24
    2d42:	d1 04       	cpc	r13, r1
    2d44:	e1 04       	cpc	r14, r1
    2d46:	f1 04       	cpc	r15, r1
    2d48:	81 f4       	brne	.+32     	; 0x2d6a <SDRead+0x58>
	{
		if (0 == SDCommand(CMD17,
    2d4a:	b5 01       	movw	r22, r10
    2d4c:	a4 01       	movw	r20, r8
    2d4e:	81 e1       	ldi	r24, 0x11	; 17
    2d50:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <SDCommand>
    2d54:	81 11       	cpse	r24, r1
    2d56:	35 c0       	rjmp	.+106    	; 0x2dc2 <SDRead+0xb0>
						   u32Sector))
		{
			bResult = SDReceiveDataBlock(pu8Buffer,
    2d58:	60 91 5e 09 	lds	r22, 0x095E	; 0x80095e <sg_u16BlockSize>
    2d5c:	70 91 5f 09 	lds	r23, 0x095F	; 0x80095f <sg_u16BlockSize+0x1>
    2d60:	ce 01       	movw	r24, r28
    2d62:	0e 94 cd 1b 	call	0x379a	; 0x379a <SDReceiveDataBlock>
    2d66:	18 2f       	mov	r17, r24
    2d68:	2f c0       	rjmp	.+94     	; 0x2dc8 <SDRead+0xb6>
		}
	}
	else
	{
		// Multisector
		if (0 == SDCommand(CMD18,
    2d6a:	b5 01       	movw	r22, r10
    2d6c:	a4 01       	movw	r20, r8
    2d6e:	82 e1       	ldi	r24, 0x12	; 18
    2d70:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <SDCommand>
    2d74:	88 23       	and	r24, r24
    2d76:	19 f0       	breq	.+6      	; 0x2d7e <SDRead+0x6c>
    2d78:	26 c0       	rjmp	.+76     	; 0x2dc6 <SDRead+0xb4>
				WatchdogReset();
				
				pu8Buffer += sg_u16BlockSize;
			} 
			while ((bResult) &&
				   (u32SectorCount--));
    2d7a:	6c 01       	movw	r12, r24
    2d7c:	7d 01       	movw	r14, r26
		if (0 == SDCommand(CMD18,
						   u32Sector))
		{
			do 
			{
				bResult = SDReceiveDataBlock(pu8Buffer,
    2d7e:	60 91 5e 09 	lds	r22, 0x095E	; 0x80095e <sg_u16BlockSize>
    2d82:	70 91 5f 09 	lds	r23, 0x095F	; 0x80095f <sg_u16BlockSize+0x1>
    2d86:	ce 01       	movw	r24, r28
    2d88:	0e 94 cd 1b 	call	0x379a	; 0x379a <SDReceiveDataBlock>
    2d8c:	18 2f       	mov	r17, r24
							 				 sg_u16BlockSize);
				// Pet the watchdog
				WatchdogReset();
    2d8e:	0e 94 82 27 	call	0x4f04	; 0x4f04 <WatchdogReset>
				
				pu8Buffer += sg_u16BlockSize;
    2d92:	80 91 5e 09 	lds	r24, 0x095E	; 0x80095e <sg_u16BlockSize>
    2d96:	90 91 5f 09 	lds	r25, 0x095F	; 0x80095f <sg_u16BlockSize+0x1>
    2d9a:	c8 0f       	add	r28, r24
    2d9c:	d9 1f       	adc	r29, r25
			} 
			while ((bResult) &&
				   (u32SectorCount--));
    2d9e:	11 23       	and	r17, r17
    2da0:	49 f0       	breq	.+18     	; 0x2db4 <SDRead+0xa2>
    2da2:	d7 01       	movw	r26, r14
    2da4:	c6 01       	movw	r24, r12
    2da6:	01 97       	sbiw	r24, 0x01	; 1
    2da8:	a1 09       	sbc	r26, r1
    2daa:	b1 09       	sbc	r27, r1
				// Pet the watchdog
				WatchdogReset();
				
				pu8Buffer += sg_u16BlockSize;
			} 
			while ((bResult) &&
    2dac:	cd 28       	or	r12, r13
    2dae:	ce 28       	or	r12, r14
    2db0:	cf 28       	or	r12, r15
    2db2:	19 f7       	brne	.-58     	; 0x2d7a <SDRead+0x68>
				   (u32SectorCount--));
				   
			// Regardless, send a stop command
			(void) SDCommand(CMD12,
    2db4:	40 e0       	ldi	r20, 0x00	; 0
    2db6:	50 e0       	ldi	r21, 0x00	; 0
    2db8:	ba 01       	movw	r22, r20
    2dba:	8c e0       	ldi	r24, 0x0C	; 12
    2dbc:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <SDCommand>
    2dc0:	03 c0       	rjmp	.+6      	; 0x2dc8 <SDRead+0xb6>
// Read one or more sectors from SD
bool SDRead(uint32_t u32Sector,
			uint8_t *pu8Buffer,
			uint32_t u32SectorCount)
{
	bool bResult = false;
    2dc2:	10 e0       	ldi	r17, 0x00	; 0
    2dc4:	01 c0       	rjmp	.+2      	; 0x2dc8 <SDRead+0xb6>
    2dc6:	10 e0       	ldi	r17, 0x00	; 0
		{
			// Failed
		}
	}
	
	SDSetCS(false);
    2dc8:	80 e0       	ldi	r24, 0x00	; 0
    2dca:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <SDSetCS>

	return(bResult);
}
    2dce:	81 2f       	mov	r24, r17
    2dd0:	df 91       	pop	r29
    2dd2:	cf 91       	pop	r28
    2dd4:	1f 91       	pop	r17
    2dd6:	0f 91       	pop	r16
    2dd8:	ff 90       	pop	r15
    2dda:	ef 90       	pop	r14
    2ddc:	df 90       	pop	r13
    2dde:	cf 90       	pop	r12
    2de0:	bf 90       	pop	r11
    2de2:	af 90       	pop	r10
    2de4:	9f 90       	pop	r9
    2de6:	8f 90       	pop	r8
    2de8:	08 95       	ret

Disassembly of section .text.SDWrite:

00002b5a <SDWrite>:

bool SDGetBlockSize(uint32_t *pu32BlockSize)
{
	*pu32BlockSize = sg_u16BlockSize;
	return(true);
}
    2b5a:	8f 92       	push	r8
    2b5c:	9f 92       	push	r9
    2b5e:	af 92       	push	r10
    2b60:	bf 92       	push	r11
    2b62:	cf 92       	push	r12
    2b64:	df 92       	push	r13
    2b66:	ef 92       	push	r14
    2b68:	ff 92       	push	r15
    2b6a:	0f 93       	push	r16
    2b6c:	1f 93       	push	r17
    2b6e:	cf 93       	push	r28
    2b70:	df 93       	push	r29
    2b72:	4b 01       	movw	r8, r22
    2b74:	5c 01       	movw	r10, r24
    2b76:	ea 01       	movw	r28, r20
    2b78:	68 01       	movw	r12, r16
    2b7a:	79 01       	movw	r14, r18
    2b7c:	0e 94 82 27 	call	0x4f04	; 0x4f04 <WatchdogReset>
    2b80:	81 e0       	ldi	r24, 0x01	; 1
    2b82:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <SDSetCS>
    2b86:	81 e0       	ldi	r24, 0x01	; 1
    2b88:	c8 16       	cp	r12, r24
    2b8a:	d1 04       	cpc	r13, r1
    2b8c:	e1 04       	cpc	r14, r1
    2b8e:	f1 04       	cpc	r15, r1
    2b90:	89 f4       	brne	.+34     	; 0x2bb4 <SDWrite+0x5a>
    2b92:	b5 01       	movw	r22, r10
    2b94:	a4 01       	movw	r20, r8
    2b96:	88 e1       	ldi	r24, 0x18	; 24
    2b98:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <SDCommand>
    2b9c:	81 11       	cpse	r24, r1
    2b9e:	37 c0       	rjmp	.+110    	; 0x2c0e <SDWrite+0xb4>
    2ba0:	60 91 5e 09 	lds	r22, 0x095E	; 0x80095e <sg_u16BlockSize>
    2ba4:	70 91 5f 09 	lds	r23, 0x095F	; 0x80095f <sg_u16BlockSize+0x1>
    2ba8:	4e ef       	ldi	r20, 0xFE	; 254
    2baa:	ce 01       	movw	r24, r28
    2bac:	0e 94 85 18 	call	0x310a	; 0x310a <SDTransmitDataBlock>
    2bb0:	18 2f       	mov	r17, r24
    2bb2:	30 c0       	rjmp	.+96     	; 0x2c14 <SDWrite+0xba>
    2bb4:	b5 01       	movw	r22, r10
    2bb6:	a4 01       	movw	r20, r8
    2bb8:	89 e1       	ldi	r24, 0x19	; 25
    2bba:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <SDCommand>
    2bbe:	88 23       	and	r24, r24
    2bc0:	19 f0       	breq	.+6      	; 0x2bc8 <SDWrite+0x6e>
    2bc2:	27 c0       	rjmp	.+78     	; 0x2c12 <SDWrite+0xb8>
    2bc4:	6c 01       	movw	r12, r24
    2bc6:	7d 01       	movw	r14, r26
    2bc8:	60 91 5e 09 	lds	r22, 0x095E	; 0x80095e <sg_u16BlockSize>
    2bcc:	70 91 5f 09 	lds	r23, 0x095F	; 0x80095f <sg_u16BlockSize+0x1>
    2bd0:	4c ef       	ldi	r20, 0xFC	; 252
    2bd2:	ce 01       	movw	r24, r28
    2bd4:	0e 94 85 18 	call	0x310a	; 0x310a <SDTransmitDataBlock>
    2bd8:	18 2f       	mov	r17, r24
    2bda:	0e 94 82 27 	call	0x4f04	; 0x4f04 <WatchdogReset>
    2bde:	80 91 5e 09 	lds	r24, 0x095E	; 0x80095e <sg_u16BlockSize>
    2be2:	90 91 5f 09 	lds	r25, 0x095F	; 0x80095f <sg_u16BlockSize+0x1>
    2be6:	c8 0f       	add	r28, r24
    2be8:	d9 1f       	adc	r29, r25
    2bea:	11 23       	and	r17, r17
    2bec:	49 f0       	breq	.+18     	; 0x2c00 <SDWrite+0xa6>
    2bee:	d7 01       	movw	r26, r14
    2bf0:	c6 01       	movw	r24, r12
    2bf2:	01 97       	sbiw	r24, 0x01	; 1
    2bf4:	a1 09       	sbc	r26, r1
    2bf6:	b1 09       	sbc	r27, r1
    2bf8:	cd 28       	or	r12, r13
    2bfa:	ce 28       	or	r12, r14
    2bfc:	cf 28       	or	r12, r15
    2bfe:	11 f7       	brne	.-60     	; 0x2bc4 <SDWrite+0x6a>
    2c00:	40 e0       	ldi	r20, 0x00	; 0
    2c02:	50 e0       	ldi	r21, 0x00	; 0
    2c04:	ba 01       	movw	r22, r20
    2c06:	8c e0       	ldi	r24, 0x0C	; 12
    2c08:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <SDCommand>
    2c0c:	03 c0       	rjmp	.+6      	; 0x2c14 <SDWrite+0xba>
    2c0e:	10 e0       	ldi	r17, 0x00	; 0
    2c10:	01 c0       	rjmp	.+2      	; 0x2c14 <SDWrite+0xba>
    2c12:	10 e0       	ldi	r17, 0x00	; 0
    2c14:	80 e0       	ldi	r24, 0x00	; 0
    2c16:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <SDSetCS>
    2c1a:	81 2f       	mov	r24, r17
    2c1c:	df 91       	pop	r29
    2c1e:	cf 91       	pop	r28
    2c20:	1f 91       	pop	r17
    2c22:	0f 91       	pop	r16
    2c24:	ff 90       	pop	r15
    2c26:	ef 90       	pop	r14
    2c28:	df 90       	pop	r13
    2c2a:	cf 90       	pop	r12
    2c2c:	bf 90       	pop	r11
    2c2e:	af 90       	pop	r10
    2c30:	9f 90       	pop	r9
    2c32:	8f 90       	pop	r8
    2c34:	08 95       	ret

Disassembly of section .text.SPITransaction:

00004044 <SPITransaction>:

// Do a SPI transaction - read or write (or write pattern)
void SPITransaction(ESPIBusState eSPIBusState,
					uint8_t *pu8Buffer,
					uint16_t u16ByteCount)
{
    4044:	fb 01       	movw	r30, r22
	// If we're transmitting, start the transaction
	if (ESTATE_RX_DATA == eSPIBusState)
    4046:	83 30       	cpi	r24, 0x03	; 3
    4048:	71 f4       	brne	.+28     	; 0x4066 <SPITransaction+0x22>
    404a:	08 c0       	rjmp	.+16     	; 0x405c <SPITransaction+0x18>
	{
		while (u16ByteCount--)
		{
			// Clock out 0xff so we can receive the data
			SPDR = 0xff;
    404c:	2f ef       	ldi	r18, 0xFF	; 255
    404e:	2e bd       	out	0x2e, r18	; 46

			// Wait for data to be available
			while (0 == (SPSR & (1 << SPIF)));
    4050:	0d b4       	in	r0, 0x2d	; 45
    4052:	07 fe       	sbrs	r0, 7
    4054:	fd cf       	rjmp	.-6      	; 0x4050 <SPITransaction+0xc>
			
			// Read the byte
			*pu8Buffer = SPDR;
    4056:	2e b5       	in	r18, 0x2e	; 46
    4058:	21 93       	st	Z+, r18
					uint16_t u16ByteCount)
{
	// If we're transmitting, start the transaction
	if (ESTATE_RX_DATA == eSPIBusState)
	{
		while (u16ByteCount--)
    405a:	ac 01       	movw	r20, r24
    405c:	ca 01       	movw	r24, r20
    405e:	01 97       	sbiw	r24, 0x01	; 1
    4060:	45 2b       	or	r20, r21
    4062:	a1 f7       	brne	.-24     	; 0x404c <SPITransaction+0x8>
    4064:	08 95       	ret
			*pu8Buffer = SPDR;
			++pu8Buffer;
		}
	}
	else
	if (ESTATE_TX_DATA == eSPIBusState)
    4066:	81 30       	cpi	r24, 0x01	; 1
    4068:	61 f4       	brne	.+24     	; 0x4082 <SPITransaction+0x3e>
    406a:	06 c0       	rjmp	.+12     	; 0x4078 <SPITransaction+0x34>
	{
		// Clock out whatever our data is in our queue
		while (u16ByteCount--)
		{
			SPDR = *pu8Buffer;
    406c:	21 91       	ld	r18, Z+
    406e:	2e bd       	out	0x2e, r18	; 46
			++pu8Buffer;
			
			// Wait for the transmit to complete
			while (0 == (SPSR & (1 << SPIF)));
    4070:	0d b4       	in	r0, 0x2d	; 45
    4072:	07 fe       	sbrs	r0, 7
    4074:	fd cf       	rjmp	.-6      	; 0x4070 <SPITransaction+0x2c>
	}
	else
	if (ESTATE_TX_DATA == eSPIBusState)
	{
		// Clock out whatever our data is in our queue
		while (u16ByteCount--)
    4076:	ac 01       	movw	r20, r24
    4078:	ca 01       	movw	r24, r20
    407a:	01 97       	sbiw	r24, 0x01	; 1
    407c:	45 2b       	or	r20, r21
    407e:	b1 f7       	brne	.-20     	; 0x406c <SPITransaction+0x28>
    4080:	08 95       	ret
			// Wait for the transmit to complete
			while (0 == (SPSR & (1 << SPIF)));
		}
	}
	else
	if (ESTATE_TX_PATTERN == eSPIBusState)
    4082:	82 30       	cpi	r24, 0x02	; 2
    4084:	51 f4       	brne	.+20     	; 0x409a <SPITransaction+0x56>
    4086:	05 c0       	rjmp	.+10     	; 0x4092 <SPITransaction+0x4e>
		// Clock out whatever our data is in our queue
		while (u16ByteCount--)
		{
			// This is OK - as the position where the pointer would normally
			// be is just the pattern (single byte)
			SPDR = (uint8_t) (pu8Buffer);
    4088:	ee bd       	out	0x2e, r30	; 46
		
			// Wait for the transmit to complete
			while (0 == (SPSR & (1 << SPIF)));
    408a:	0d b4       	in	r0, 0x2d	; 45
    408c:	07 fe       	sbrs	r0, 7
    408e:	fd cf       	rjmp	.-6      	; 0x408a <SPITransaction+0x46>
	}
	else
	if (ESTATE_TX_PATTERN == eSPIBusState)
	{
		// Clock out whatever our data is in our queue
		while (u16ByteCount--)
    4090:	ac 01       	movw	r20, r24
    4092:	ca 01       	movw	r24, r20
    4094:	01 97       	sbiw	r24, 0x01	; 1
    4096:	45 2b       	or	r20, r21
    4098:	b9 f7       	brne	.-18     	; 0x4088 <SPITransaction+0x44>
    409a:	08 95       	ret

Disassembly of section .text.SPISetBaudRate:

00002eb6 <SPISetBaudRate>:
	{FCLKIO >> 7,	(1 << SPR1) | (0 << SPR0),	0},					// /128
};

// Sets the SPI baud rate and returns the actual baud rate selected
uint32_t SPISetBaudRate(uint32_t u32BaudRate)
{
    2eb6:	cf 92       	push	r12
    2eb8:	df 92       	push	r13
    2eba:	ef 92       	push	r14
    2ebc:	ff 92       	push	r15
    2ebe:	6b 01       	movw	r12, r22
    2ec0:	7c 01       	movw	r14, r24
	uint8_t u8Loop;
	
	// Find the baud rate that's the closest
	for (u8Loop = 0; u8Loop < (sizeof(sg_sSPIBaudRates) / sizeof(sg_sSPIBaudRates[0])); u8Loop++)
    2ec2:	20 e0       	ldi	r18, 0x00	; 0
    2ec4:	19 c0       	rjmp	.+50     	; 0x2ef8 <SPISetBaudRate+0x42>
	{
		if (u32BaudRate >= sg_sSPIBaudRates[u8Loop].u32BaudRate)
    2ec6:	82 2f       	mov	r24, r18
    2ec8:	90 e0       	ldi	r25, 0x00	; 0
    2eca:	ac 01       	movw	r20, r24
    2ecc:	44 0f       	add	r20, r20
    2ece:	55 1f       	adc	r21, r21
    2ed0:	84 0f       	add	r24, r20
    2ed2:	95 1f       	adc	r25, r21
    2ed4:	88 0f       	add	r24, r24
    2ed6:	99 1f       	adc	r25, r25
    2ed8:	09 2e       	mov	r0, r25
    2eda:	00 0c       	add	r0, r0
    2edc:	aa 0b       	sbc	r26, r26
    2ede:	85 55       	subi	r24, 0x55	; 85
    2ee0:	9d 4f       	sbci	r25, 0xFD	; 253
    2ee2:	af 4f       	sbci	r26, 0xFF	; 255
    2ee4:	fc 01       	movw	r30, r24
    2ee6:	5a 2f       	mov	r21, r26
    2ee8:	0e 94 99 26 	call	0x4d32	; 0x4d32 <__xload_4>
    2eec:	c6 16       	cp	r12, r22
    2eee:	d7 06       	cpc	r13, r23
    2ef0:	e8 06       	cpc	r14, r24
    2ef2:	f9 06       	cpc	r15, r25
    2ef4:	18 f4       	brcc	.+6      	; 0x2efc <SPISetBaudRate+0x46>
uint32_t SPISetBaudRate(uint32_t u32BaudRate)
{
	uint8_t u8Loop;
	
	// Find the baud rate that's the closest
	for (u8Loop = 0; u8Loop < (sizeof(sg_sSPIBaudRates) / sizeof(sg_sSPIBaudRates[0])); u8Loop++)
    2ef6:	2f 5f       	subi	r18, 0xFF	; 255
    2ef8:	27 30       	cpi	r18, 0x07	; 7
    2efa:	28 f3       	brcs	.-54     	; 0x2ec6 <SPISetBaudRate+0x10>
			break;
		}
	}

	// If we've hit the end, use the slowest speed
	if ((sizeof(sg_sSPIBaudRates) / sizeof(sg_sSPIBaudRates[0])) == u8Loop)
    2efc:	27 30       	cpi	r18, 0x07	; 7
    2efe:	09 f4       	brne	.+2      	; 0x2f02 <SPISetBaudRate+0x4c>
	{
		u8Loop--;
    2f00:	21 50       	subi	r18, 0x01	; 1
	}

	// Found one!
	SPCR = (SPCR & (uint8_t) ~((1 << SPR1) | (1 << SPR0))) | sg_sSPIBaudRates[u8Loop].u8SPCR;
    2f02:	6c b5       	in	r22, 0x2c	; 44
    2f04:	30 e0       	ldi	r19, 0x00	; 0
    2f06:	a9 01       	movw	r20, r18
    2f08:	44 0f       	add	r20, r20
    2f0a:	55 1f       	adc	r21, r21
    2f0c:	ca 01       	movw	r24, r20
    2f0e:	82 0f       	add	r24, r18
    2f10:	93 1f       	adc	r25, r19
    2f12:	88 0f       	add	r24, r24
    2f14:	99 1f       	adc	r25, r25
    2f16:	04 96       	adiw	r24, 0x04	; 4
    2f18:	09 2e       	mov	r0, r25
    2f1a:	00 0c       	add	r0, r0
    2f1c:	aa 0b       	sbc	r26, r26
    2f1e:	85 55       	subi	r24, 0x55	; 85
    2f20:	9d 4f       	sbci	r25, 0xFD	; 253
    2f22:	af 4f       	sbci	r26, 0xFF	; 255
    2f24:	fc 01       	movw	r30, r24
    2f26:	84 91       	lpm	r24, Z
    2f28:	a7 fd       	sbrc	r26, 7
    2f2a:	80 81       	ld	r24, Z
    2f2c:	6c 7f       	andi	r22, 0xFC	; 252
    2f2e:	86 2b       	or	r24, r22
    2f30:	8c bd       	out	0x2c, r24	; 44
	SPSR = (SPSR & (uint8_t) ~(1 << SPI2X)) | sg_sSPIBaudRates[u8Loop].u8SPSR;
    2f32:	6d b5       	in	r22, 0x2d	; 45
    2f34:	ca 01       	movw	r24, r20
    2f36:	82 0f       	add	r24, r18
    2f38:	93 1f       	adc	r25, r19
    2f3a:	88 0f       	add	r24, r24
    2f3c:	99 1f       	adc	r25, r25
    2f3e:	05 96       	adiw	r24, 0x05	; 5
    2f40:	09 2e       	mov	r0, r25
    2f42:	00 0c       	add	r0, r0
    2f44:	aa 0b       	sbc	r26, r26
    2f46:	85 55       	subi	r24, 0x55	; 85
    2f48:	9d 4f       	sbci	r25, 0xFD	; 253
    2f4a:	af 4f       	sbci	r26, 0xFF	; 255
    2f4c:	fc 01       	movw	r30, r24
    2f4e:	84 91       	lpm	r24, Z
    2f50:	a7 fd       	sbrc	r26, 7
    2f52:	80 81       	ld	r24, Z
    2f54:	6e 7f       	andi	r22, 0xFE	; 254
    2f56:	86 2b       	or	r24, r22
    2f58:	8d bd       	out	0x2d, r24	; 45
	return(sg_sSPIBaudRates[u8Loop].u32BaudRate);
    2f5a:	24 0f       	add	r18, r20
    2f5c:	35 1f       	adc	r19, r21
    2f5e:	22 0f       	add	r18, r18
    2f60:	33 1f       	adc	r19, r19
    2f62:	03 2e       	mov	r0, r19
    2f64:	00 0c       	add	r0, r0
    2f66:	44 0b       	sbc	r20, r20
    2f68:	25 55       	subi	r18, 0x55	; 85
    2f6a:	3d 4f       	sbci	r19, 0xFD	; 253
    2f6c:	4f 4f       	sbci	r20, 0xFF	; 255
    2f6e:	f9 01       	movw	r30, r18
    2f70:	54 2f       	mov	r21, r20
    2f72:	0e 94 99 26 	call	0x4d32	; 0x4d32 <__xload_4>
}
    2f76:	ff 90       	pop	r15
    2f78:	ef 90       	pop	r14
    2f7a:	df 90       	pop	r13
    2f7c:	cf 90       	pop	r12
    2f7e:	08 95       	ret

Disassembly of section .text.SPIInit:

0000482c <SPIInit>:

void SPIInit(void)
{
	// Set MOSI and SCK to output
	DDR_SPI |= (1 << MOSI) | (1 << SCK);
    482c:	84 b1       	in	r24, 0x04	; 4
    482e:	82 68       	ori	r24, 0x82	; 130
    4830:	84 b9       	out	0x04, r24	; 4
	DDR_SPI &= (uint8_t) ~(1 << MISO);
    4832:	84 b1       	in	r24, 0x04	; 4
    4834:	8e 7f       	andi	r24, 0xFE	; 254
    4836:	84 b9       	out	0x04, r24	; 4
	
	// MISO As input (need our pullup)
	PORT_SPI |= (1 << MISO);
    4838:	85 b1       	in	r24, 0x05	; 5
    483a:	81 60       	ori	r24, 0x01	; 1
    483c:	85 b9       	out	0x05, r24	; 5
	
	// Enable SPI engine, master only, and clock to fosc/128 and SPI mode 0 (which is what SD wants)
	SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR1) | (1 << SPR0);
    483e:	83 e5       	ldi	r24, 0x53	; 83
    4840:	8c bd       	out	0x2c, r24	; 44
	
	// Zero out SPSR (all zeroes)
	SPSR = 0;
    4842:	1d bc       	out	0x2d, r1	; 45
	
	// Zero out SPIPS so the SPI IP is connected to MISO, MOSI, SCK, and SS
	MCUCR &= (uint8_t) ~(1 << SPIPS);
    4844:	85 b7       	in	r24, 0x35	; 53
    4846:	8f 77       	andi	r24, 0x7F	; 127
    4848:	85 bf       	out	0x35, r24	; 53

	// Set to something slow/compatible
	(void) SPISetBaudRate(400000);
    484a:	60 e8       	ldi	r22, 0x80	; 128
    484c:	7a e1       	ldi	r23, 0x1A	; 26
    484e:	86 e0       	ldi	r24, 0x06	; 6
    4850:	90 e0       	ldi	r25, 0x00	; 0
    4852:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <SPISetBaudRate>
    4856:	08 95       	ret

Disassembly of section .text.readGlobalState:

000044b4 <readGlobalState>:

static GlobalState gState;
static uint32_t currentSector;
static uint8_t __attribute__((aligned(4))) frameBuffer[FRAME_BUFFER_SIZE];  // Enlarged to handle full frame

static bool readGlobalState(void) {
    44b4:	0f 93       	push	r16
    44b6:	1f 93       	push	r17
    44b8:	cf 93       	push	r28
	if (!SDRead(0, frameBuffer, 1)) {
    44ba:	01 e0       	ldi	r16, 0x01	; 1
    44bc:	10 e0       	ldi	r17, 0x00	; 0
    44be:	20 e0       	ldi	r18, 0x00	; 0
    44c0:	30 e0       	ldi	r19, 0x00	; 0
    44c2:	4c e2       	ldi	r20, 0x2C	; 44
    44c4:	53 e0       	ldi	r21, 0x03	; 3
    44c6:	60 e0       	ldi	r22, 0x00	; 0
    44c8:	70 e0       	ldi	r23, 0x00	; 0
    44ca:	cb 01       	movw	r24, r22
    44cc:	0e 94 89 16 	call	0x2d12	; 0x2d12 <SDRead>
    44d0:	c8 2f       	mov	r28, r24
    44d2:	88 23       	and	r24, r24
    44d4:	49 f0       	breq	.+18     	; 0x44e8 <readGlobalState+0x34>
		return false;
	}
	memcpy(&gState, frameBuffer, sizeof(GlobalState));
    44d6:	4c e2       	ldi	r20, 0x2C	; 44
    44d8:	53 e0       	ldi	r21, 0x03	; 3
    44da:	60 e8       	ldi	r22, 0x80	; 128
    44dc:	28 ed       	ldi	r18, 0xD8	; 216
    44de:	31 e0       	ldi	r19, 0x01	; 1
    44e0:	8c e2       	ldi	r24, 0x2C	; 44
    44e2:	97 e0       	ldi	r25, 0x07	; 7
    44e4:	0e 94 a4 23 	call	0x4748	; 0x4748 <memcpy>
	// TODO: Implement checksum verification
	return true;
}
    44e8:	8c 2f       	mov	r24, r28
    44ea:	cf 91       	pop	r28
    44ec:	1f 91       	pop	r17
    44ee:	0f 91       	pop	r16
    44f0:	08 95       	ret

Disassembly of section .text.writeGlobalState:

00004716 <writeGlobalState>:

static bool writeGlobalState(void) {
    4716:	0f 93       	push	r16
    4718:	1f 93       	push	r17
	memcpy(frameBuffer, &gState, sizeof(GlobalState));
    471a:	4c e2       	ldi	r20, 0x2C	; 44
    471c:	57 e0       	ldi	r21, 0x07	; 7
    471e:	60 e8       	ldi	r22, 0x80	; 128
    4720:	28 ed       	ldi	r18, 0xD8	; 216
    4722:	31 e0       	ldi	r19, 0x01	; 1
    4724:	8c e2       	ldi	r24, 0x2C	; 44
    4726:	93 e0       	ldi	r25, 0x03	; 3
    4728:	0e 94 a4 23 	call	0x4748	; 0x4748 <memcpy>
	// TODO: Calculate and update checksum
	return SDWrite(0, frameBuffer, 1);
    472c:	01 e0       	ldi	r16, 0x01	; 1
    472e:	10 e0       	ldi	r17, 0x00	; 0
    4730:	20 e0       	ldi	r18, 0x00	; 0
    4732:	30 e0       	ldi	r19, 0x00	; 0
    4734:	4c e2       	ldi	r20, 0x2C	; 44
    4736:	53 e0       	ldi	r21, 0x03	; 3
    4738:	60 e0       	ldi	r22, 0x00	; 0
    473a:	70 e0       	ldi	r23, 0x00	; 0
    473c:	cb 01       	movw	r24, r22
    473e:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <SDWrite>
}
    4742:	1f 91       	pop	r17
    4744:	0f 91       	pop	r16
    4746:	08 95       	ret

Disassembly of section .text.updateSessionMap:

00002c36 <updateSessionMap>:

static bool updateSessionMap(void) {
    2c36:	8f 92       	push	r8
    2c38:	9f 92       	push	r9
    2c3a:	af 92       	push	r10
    2c3c:	bf 92       	push	r11
    2c3e:	cf 92       	push	r12
    2c40:	df 92       	push	r13
    2c42:	ef 92       	push	r14
    2c44:	ff 92       	push	r15
    2c46:	0f 93       	push	r16
    2c48:	1f 93       	push	r17
	uint32_t mapSector = gState.activeSessionMapSector;
    2c4a:	ec e2       	ldi	r30, 0x2C	; 44
    2c4c:	f7 e0       	ldi	r31, 0x07	; 7
    2c4e:	c4 8c       	ldd	r12, Z+28	; 0x1c
    2c50:	d5 8c       	ldd	r13, Z+29	; 0x1d
    2c52:	e6 8c       	ldd	r14, Z+30	; 0x1e
    2c54:	f7 8c       	ldd	r15, Z+31	; 0x1f
	uint32_t mapOffset = gState.activeSessionMapOffset;
    2c56:	80 a0       	ldd	r8, Z+32	; 0x20
    2c58:	91 a0       	ldd	r9, Z+33	; 0x21
    2c5a:	a2 a0       	ldd	r10, Z+34	; 0x22
    2c5c:	b3 a0       	ldd	r11, Z+35	; 0x23

	if (!SDRead(mapSector, frameBuffer, 1)) {
    2c5e:	01 e0       	ldi	r16, 0x01	; 1
    2c60:	10 e0       	ldi	r17, 0x00	; 0
    2c62:	20 e0       	ldi	r18, 0x00	; 0
    2c64:	30 e0       	ldi	r19, 0x00	; 0
    2c66:	4c e2       	ldi	r20, 0x2C	; 44
    2c68:	53 e0       	ldi	r21, 0x03	; 3
    2c6a:	c7 01       	movw	r24, r14
    2c6c:	b6 01       	movw	r22, r12
    2c6e:	0e 94 89 16 	call	0x2d12	; 0x2d12 <SDRead>
    2c72:	88 23       	and	r24, r24
    2c74:	09 f4       	brne	.+2      	; 0x2c78 <updateSessionMap+0x42>
    2c76:	42 c0       	rjmp	.+132    	; 0x2cfc <updateSessionMap+0xc6>
		return false;
	}

	// Update session map
	*(uint64_t*)(frameBuffer + mapOffset) = gState.newSessionSector;
    2c78:	f4 01       	movw	r30, r8
    2c7a:	e4 5d       	subi	r30, 0xD4	; 212
    2c7c:	fc 4f       	sbci	r31, 0xFC	; 252
    2c7e:	00 91 44 07 	lds	r16, 0x0744	; 0x800744 <gState+0x18>
    2c82:	10 91 45 07 	lds	r17, 0x0745	; 0x800745 <gState+0x19>
    2c86:	20 91 46 07 	lds	r18, 0x0746	; 0x800746 <gState+0x1a>
    2c8a:	30 91 47 07 	lds	r19, 0x0747	; 0x800747 <gState+0x1b>
    2c8e:	00 83       	st	Z, r16
    2c90:	11 83       	std	Z+1, r17	; 0x01
    2c92:	22 83       	std	Z+2, r18	; 0x02
    2c94:	33 83       	std	Z+3, r19	; 0x03
    2c96:	14 82       	std	Z+4, r1	; 0x04
    2c98:	15 82       	std	Z+5, r1	; 0x05
    2c9a:	16 82       	std	Z+6, r1	; 0x06
    2c9c:	17 82       	std	Z+7, r1	; 0x07

	if (!SDWrite(mapSector, frameBuffer, 1)) {
    2c9e:	01 e0       	ldi	r16, 0x01	; 1
    2ca0:	10 e0       	ldi	r17, 0x00	; 0
    2ca2:	20 e0       	ldi	r18, 0x00	; 0
    2ca4:	30 e0       	ldi	r19, 0x00	; 0
    2ca6:	4c e2       	ldi	r20, 0x2C	; 44
    2ca8:	53 e0       	ldi	r21, 0x03	; 3
    2caa:	c7 01       	movw	r24, r14
    2cac:	b6 01       	movw	r22, r12
    2cae:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <SDWrite>
    2cb2:	88 23       	and	r24, r24
    2cb4:	19 f1       	breq	.+70     	; 0x2cfc <updateSessionMap+0xc6>
		return false;
	}

	// Update map pointers
	gState.activeSessionMapOffset += sizeof(uint64_t);
    2cb6:	ec e2       	ldi	r30, 0x2C	; 44
    2cb8:	f7 e0       	ldi	r31, 0x07	; 7
    2cba:	80 a1       	ldd	r24, Z+32	; 0x20
    2cbc:	91 a1       	ldd	r25, Z+33	; 0x21
    2cbe:	a2 a1       	ldd	r26, Z+34	; 0x22
    2cc0:	b3 a1       	ldd	r27, Z+35	; 0x23
    2cc2:	08 96       	adiw	r24, 0x08	; 8
    2cc4:	a1 1d       	adc	r26, r1
    2cc6:	b1 1d       	adc	r27, r1
    2cc8:	80 a3       	std	Z+32, r24	; 0x20
    2cca:	91 a3       	std	Z+33, r25	; 0x21
    2ccc:	a2 a3       	std	Z+34, r26	; 0x22
    2cce:	b3 a3       	std	Z+35, r27	; 0x23
	if (gState.activeSessionMapOffset >= SECTOR_SIZE) {
    2cd0:	81 15       	cp	r24, r1
    2cd2:	92 40       	sbci	r25, 0x02	; 2
    2cd4:	a1 05       	cpc	r26, r1
    2cd6:	b1 05       	cpc	r27, r1
    2cd8:	78 f0       	brcs	.+30     	; 0x2cf8 <updateSessionMap+0xc2>
		gState.activeSessionMapSector++;
    2cda:	84 8d       	ldd	r24, Z+28	; 0x1c
    2cdc:	95 8d       	ldd	r25, Z+29	; 0x1d
    2cde:	a6 8d       	ldd	r26, Z+30	; 0x1e
    2ce0:	b7 8d       	ldd	r27, Z+31	; 0x1f
    2ce2:	01 96       	adiw	r24, 0x01	; 1
    2ce4:	a1 1d       	adc	r26, r1
    2ce6:	b1 1d       	adc	r27, r1
    2ce8:	84 8f       	std	Z+28, r24	; 0x1c
    2cea:	95 8f       	std	Z+29, r25	; 0x1d
    2cec:	a6 8f       	std	Z+30, r26	; 0x1e
    2cee:	b7 8f       	std	Z+31, r27	; 0x1f
		gState.activeSessionMapOffset = 0;
    2cf0:	10 a2       	std	Z+32, r1	; 0x20
    2cf2:	11 a2       	std	Z+33, r1	; 0x21
    2cf4:	12 a2       	std	Z+34, r1	; 0x22
    2cf6:	13 a2       	std	Z+35, r1	; 0x23
	}

	return writeGlobalState();
    2cf8:	0e 94 8b 23 	call	0x4716	; 0x4716 <writeGlobalState>
}
    2cfc:	1f 91       	pop	r17
    2cfe:	0f 91       	pop	r16
    2d00:	ff 90       	pop	r15
    2d02:	ef 90       	pop	r14
    2d04:	df 90       	pop	r13
    2d06:	cf 90       	pop	r12
    2d08:	bf 90       	pop	r11
    2d0a:	af 90       	pop	r10
    2d0c:	9f 90       	pop	r9
    2d0e:	8f 90       	pop	r8
    2d10:	08 95       	ret

Disassembly of section .text.STORE_Init:

000039b8 <STORE_Init>:

bool STORE_Init(void) {
    39b8:	cf 93       	push	r28
	if (!SDInit()) {
    39ba:	0e 94 d6 10 	call	0x21ac	; 0x21ac <SDInit>
    39be:	c8 2f       	mov	r28, r24
    39c0:	88 23       	and	r24, r24
    39c2:	c1 f1       	breq	.+112    	; 0x3a34 <STORE_Init+0x7c>
		return false;
	}

	if (!readGlobalState()) {
    39c4:	0e 94 5a 22 	call	0x44b4	; 0x44b4 <readGlobalState>
    39c8:	81 11       	cpse	r24, r1
    39ca:	22 c0       	rjmp	.+68     	; 0x3a10 <STORE_Init+0x58>
		// Initialize global state if it doesn't exist
		memset(&gState, 0, sizeof(GlobalState));
    39cc:	ec e2       	ldi	r30, 0x2C	; 44
    39ce:	f7 e0       	ldi	r31, 0x07	; 7
    39d0:	88 ed       	ldi	r24, 0xD8	; 216
    39d2:	91 e0       	ldi	r25, 0x01	; 1
    39d4:	df 01       	movw	r26, r30
    39d6:	9c 01       	movw	r18, r24
    39d8:	1d 92       	st	X+, r1
    39da:	21 50       	subi	r18, 0x01	; 1
    39dc:	30 40       	sbci	r19, 0x00	; 0
    39de:	e1 f7       	brne	.-8      	; 0x39d8 <STORE_Init+0x20>
		gState.firstSessionSector = 1;
    39e0:	81 e0       	ldi	r24, 0x01	; 1
    39e2:	90 e0       	ldi	r25, 0x00	; 0
    39e4:	a0 e0       	ldi	r26, 0x00	; 0
    39e6:	b0 e0       	ldi	r27, 0x00	; 0
    39e8:	84 87       	std	Z+12, r24	; 0x0c
    39ea:	95 87       	std	Z+13, r25	; 0x0d
    39ec:	a6 87       	std	Z+14, r26	; 0x0e
    39ee:	b7 87       	std	Z+15, r27	; 0x0f
		gState.newSessionSector = 1;
    39f0:	80 8f       	std	Z+24, r24	; 0x18
    39f2:	91 8f       	std	Z+25, r25	; 0x19
    39f4:	a2 8f       	std	Z+26, r26	; 0x1a
    39f6:	b3 8f       	std	Z+27, r27	; 0x1b
		gState.activeSessionMapSector = 4;
    39f8:	84 e0       	ldi	r24, 0x04	; 4
    39fa:	90 e0       	ldi	r25, 0x00	; 0
    39fc:	a0 e0       	ldi	r26, 0x00	; 0
    39fe:	b0 e0       	ldi	r27, 0x00	; 0
    3a00:	84 8f       	std	Z+28, r24	; 0x1c
    3a02:	95 8f       	std	Z+29, r25	; 0x1d
    3a04:	a6 8f       	std	Z+30, r26	; 0x1e
    3a06:	b7 8f       	std	Z+31, r27	; 0x1f
		gState.activeSessionMapOffset = 0;
		// TODO: Initialize other fields as needed
		if (!writeGlobalState()) {
    3a08:	0e 94 8b 23 	call	0x4716	; 0x4716 <writeGlobalState>
    3a0c:	88 23       	and	r24, r24
    3a0e:	89 f0       	breq	.+34     	; 0x3a32 <STORE_Init+0x7a>
			return false;
		}
	}

	currentSector = gState.newSessionSector;
    3a10:	80 91 44 07 	lds	r24, 0x0744	; 0x800744 <gState+0x18>
    3a14:	90 91 45 07 	lds	r25, 0x0745	; 0x800745 <gState+0x19>
    3a18:	a0 91 46 07 	lds	r26, 0x0746	; 0x800746 <gState+0x1a>
    3a1c:	b0 91 47 07 	lds	r27, 0x0747	; 0x800747 <gState+0x1b>
    3a20:	80 93 58 09 	sts	0x0958, r24	; 0x800958 <currentSector>
    3a24:	90 93 59 09 	sts	0x0959, r25	; 0x800959 <currentSector+0x1>
    3a28:	a0 93 5a 09 	sts	0x095A, r26	; 0x80095a <currentSector+0x2>
    3a2c:	b0 93 5b 09 	sts	0x095B, r27	; 0x80095b <currentSector+0x3>
	return true;
    3a30:	01 c0       	rjmp	.+2      	; 0x3a34 <STORE_Init+0x7c>
		gState.newSessionSector = 1;
		gState.activeSessionMapSector = 4;
		gState.activeSessionMapOffset = 0;
		// TODO: Initialize other fields as needed
		if (!writeGlobalState()) {
			return false;
    3a32:	c8 2f       	mov	r28, r24
		}
	}

	currentSector = gState.newSessionSector;
	return true;
}
    3a34:	8c 2f       	mov	r24, r28
    3a36:	cf 91       	pop	r28
    3a38:	08 95       	ret

Disassembly of section .text.STORE_WriteFrame:

0000289c <STORE_WriteFrame>:

bool STORE_WriteFrame(volatile FrameData* frame) {
    289c:	8f 92       	push	r8
    289e:	9f 92       	push	r9
    28a0:	af 92       	push	r10
    28a2:	bf 92       	push	r11
    28a4:	cf 92       	push	r12
    28a6:	df 92       	push	r13
    28a8:	ef 92       	push	r14
    28aa:	ff 92       	push	r15
    28ac:	0f 93       	push	r16
    28ae:	1f 93       	push	r17
    28b0:	cf 93       	push	r28
    28b2:	df 93       	push	r29
	uint32_t bytesWritten = 0;
	uint32_t currentOffset = 0;
	uint32_t sectorsToWrite;
	
	// Verify frame size
	if(frame->frameBytes > FRAME_BUFFER_SIZE) {
    28b4:	fc 01       	movw	r30, r24
    28b6:	24 81       	ldd	r18, Z+4	; 0x04
    28b8:	35 81       	ldd	r19, Z+5	; 0x05
    28ba:	21 30       	cpi	r18, 0x01	; 1
    28bc:	34 40       	sbci	r19, 0x04	; 4
    28be:	08 f0       	brcs	.+2      	; 0x28c2 <STORE_WriteFrame+0x26>
    28c0:	5b c0       	rjmp	.+182    	; 0x2978 <STORE_WriteFrame+0xdc>
    28c2:	ec 01       	movw	r28, r24
		return false;
	}
	
	// Copy frame data to our buffer
	memcpy(frameBuffer, (const void*)frame, frame->frameBytes);
    28c4:	2c 81       	ldd	r18, Y+4	; 0x04
    28c6:	3d 81       	ldd	r19, Y+5	; 0x05
    28c8:	ac 01       	movw	r20, r24
    28ca:	60 e8       	ldi	r22, 0x80	; 128
    28cc:	8c e2       	ldi	r24, 0x2C	; 44
    28ce:	93 e0       	ldi	r25, 0x03	; 3
    28d0:	0e 94 a4 23 	call	0x4748	; 0x4748 <memcpy>
	
	// Zero out any remaining buffer space in last sector
	if(frame->frameBytes < FRAME_BUFFER_SIZE) {
    28d4:	8c 81       	ldd	r24, Y+4	; 0x04
    28d6:	9d 81       	ldd	r25, Y+5	; 0x05
    28d8:	81 15       	cp	r24, r1
    28da:	94 40       	sbci	r25, 0x04	; 4
    28dc:	70 f4       	brcc	.+28     	; 0x28fa <STORE_WriteFrame+0x5e>
		memset(frameBuffer + frame->frameBytes, 0, FRAME_BUFFER_SIZE - frame->frameBytes);
    28de:	2c 81       	ldd	r18, Y+4	; 0x04
    28e0:	3d 81       	ldd	r19, Y+5	; 0x05
    28e2:	8c 81       	ldd	r24, Y+4	; 0x04
    28e4:	9d 81       	ldd	r25, Y+5	; 0x05
    28e6:	40 e0       	ldi	r20, 0x00	; 0
    28e8:	54 e0       	ldi	r21, 0x04	; 4
    28ea:	42 1b       	sub	r20, r18
    28ec:	53 0b       	sbc	r21, r19
    28ee:	60 e0       	ldi	r22, 0x00	; 0
    28f0:	70 e0       	ldi	r23, 0x00	; 0
    28f2:	84 5d       	subi	r24, 0xD4	; 212
    28f4:	9c 4f       	sbci	r25, 0xFC	; 252
    28f6:	0e 94 fb 26 	call	0x4df6	; 0x4df6 <memset>

	currentSector = gState.newSessionSector;
	return true;
}

bool STORE_WriteFrame(volatile FrameData* frame) {
    28fa:	c1 2c       	mov	r12, r1
    28fc:	d1 2c       	mov	r13, r1
    28fe:	76 01       	movw	r14, r12
    2900:	68 94       	set
    2902:	c1 f8       	bld	r12, 1
    2904:	81 2c       	mov	r8, r1
    2906:	91 2c       	mov	r9, r1
    2908:	54 01       	movw	r10, r8
    290a:	2f c0       	rjmp	.+94     	; 0x296a <STORE_WriteFrame+0xce>
	// Calculate how many complete sectors we need to write
	sectorsToWrite = SECTORS_PER_FRAME;
	
	// Write all sectors
	while(sectorsToWrite > 0) {
		if(!SDWrite(currentSector, frameBuffer + currentOffset, 1)) {
    290c:	60 91 58 09 	lds	r22, 0x0958	; 0x800958 <currentSector>
    2910:	70 91 59 09 	lds	r23, 0x0959	; 0x800959 <currentSector+0x1>
    2914:	80 91 5a 09 	lds	r24, 0x095A	; 0x80095a <currentSector+0x2>
    2918:	90 91 5b 09 	lds	r25, 0x095B	; 0x80095b <currentSector+0x3>
    291c:	01 e0       	ldi	r16, 0x01	; 1
    291e:	10 e0       	ldi	r17, 0x00	; 0
    2920:	20 e0       	ldi	r18, 0x00	; 0
    2922:	30 e0       	ldi	r19, 0x00	; 0
    2924:	a4 01       	movw	r20, r8
    2926:	44 5d       	subi	r20, 0xD4	; 212
    2928:	5c 4f       	sbci	r21, 0xFC	; 252
    292a:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <SDWrite>
    292e:	88 23       	and	r24, r24
    2930:	21 f1       	breq	.+72     	; 0x297a <STORE_WriteFrame+0xde>
			return false;
		}
		currentSector++;
    2932:	80 91 58 09 	lds	r24, 0x0958	; 0x800958 <currentSector>
    2936:	90 91 59 09 	lds	r25, 0x0959	; 0x800959 <currentSector+0x1>
    293a:	a0 91 5a 09 	lds	r26, 0x095A	; 0x80095a <currentSector+0x2>
    293e:	b0 91 5b 09 	lds	r27, 0x095B	; 0x80095b <currentSector+0x3>
    2942:	01 96       	adiw	r24, 0x01	; 1
    2944:	a1 1d       	adc	r26, r1
    2946:	b1 1d       	adc	r27, r1
    2948:	80 93 58 09 	sts	0x0958, r24	; 0x800958 <currentSector>
    294c:	90 93 59 09 	sts	0x0959, r25	; 0x800959 <currentSector+0x1>
    2950:	a0 93 5a 09 	sts	0x095A, r26	; 0x80095a <currentSector+0x2>
    2954:	b0 93 5b 09 	sts	0x095B, r27	; 0x80095b <currentSector+0x3>
		currentOffset += SECTOR_SIZE;
    2958:	42 e0       	ldi	r20, 0x02	; 2
    295a:	94 0e       	add	r9, r20
    295c:	a1 1c       	adc	r10, r1
    295e:	b1 1c       	adc	r11, r1
		sectorsToWrite--;
    2960:	81 e0       	ldi	r24, 0x01	; 1
    2962:	c8 1a       	sub	r12, r24
    2964:	d1 08       	sbc	r13, r1
    2966:	e1 08       	sbc	r14, r1
    2968:	f1 08       	sbc	r15, r1
	
	// Calculate how many complete sectors we need to write
	sectorsToWrite = SECTORS_PER_FRAME;
	
	// Write all sectors
	while(sectorsToWrite > 0) {
    296a:	c1 14       	cp	r12, r1
    296c:	d1 04       	cpc	r13, r1
    296e:	e1 04       	cpc	r14, r1
    2970:	f1 04       	cpc	r15, r1
    2972:	61 f6       	brne	.-104    	; 0x290c <STORE_WriteFrame+0x70>
		currentSector++;
		currentOffset += SECTOR_SIZE;
		sectorsToWrite--;
	}
	
	return true;
    2974:	81 e0       	ldi	r24, 0x01	; 1
    2976:	01 c0       	rjmp	.+2      	; 0x297a <STORE_WriteFrame+0xde>
	uint32_t currentOffset = 0;
	uint32_t sectorsToWrite;
	
	// Verify frame size
	if(frame->frameBytes > FRAME_BUFFER_SIZE) {
		return false;
    2978:	80 e0       	ldi	r24, 0x00	; 0
		currentOffset += SECTOR_SIZE;
		sectorsToWrite--;
	}
	
	return true;
}
    297a:	df 91       	pop	r29
    297c:	cf 91       	pop	r28
    297e:	1f 91       	pop	r17
    2980:	0f 91       	pop	r16
    2982:	ff 90       	pop	r15
    2984:	ef 90       	pop	r14
    2986:	df 90       	pop	r13
    2988:	cf 90       	pop	r12
    298a:	bf 90       	pop	r11
    298c:	af 90       	pop	r10
    298e:	9f 90       	pop	r9
    2990:	8f 90       	pop	r8
    2992:	08 95       	ret

Disassembly of section .text.STORE_StartNewSession:

0000424a <STORE_StartNewSession>:

bool STORE_StartNewSession(void) {
	// Update session info
	gState.sessionCount++;
    424a:	ec e2       	ldi	r30, 0x2C	; 44
    424c:	f7 e0       	ldi	r31, 0x07	; 7
    424e:	84 89       	ldd	r24, Z+20	; 0x14
    4250:	95 89       	ldd	r25, Z+21	; 0x15
    4252:	a6 89       	ldd	r26, Z+22	; 0x16
    4254:	b7 89       	ldd	r27, Z+23	; 0x17
    4256:	01 96       	adiw	r24, 0x01	; 1
    4258:	a1 1d       	adc	r26, r1
    425a:	b1 1d       	adc	r27, r1
    425c:	84 8b       	std	Z+20, r24	; 0x14
    425e:	95 8b       	std	Z+21, r25	; 0x15
    4260:	a6 8b       	std	Z+22, r26	; 0x16
    4262:	b7 8b       	std	Z+23, r27	; 0x17
	gState.newSessionSector = currentSector;
    4264:	80 91 58 09 	lds	r24, 0x0958	; 0x800958 <currentSector>
    4268:	90 91 59 09 	lds	r25, 0x0959	; 0x800959 <currentSector+0x1>
    426c:	a0 91 5a 09 	lds	r26, 0x095A	; 0x80095a <currentSector+0x2>
    4270:	b0 91 5b 09 	lds	r27, 0x095B	; 0x80095b <currentSector+0x3>
    4274:	80 8f       	std	Z+24, r24	; 0x18
    4276:	91 8f       	std	Z+25, r25	; 0x19
    4278:	a2 8f       	std	Z+26, r26	; 0x1a
    427a:	b3 8f       	std	Z+27, r27	; 0x1b
	
	// Ensure sector alignment for new sessions
	if(currentSector % SECTORS_PER_FRAME != 0) {
    427c:	80 ff       	sbrs	r24, 0
    427e:	0c c0       	rjmp	.+24     	; 0x4298 <STORE_StartNewSession+0x4e>
		currentSector += SECTORS_PER_FRAME - (currentSector % SECTORS_PER_FRAME);
    4280:	8e 7f       	andi	r24, 0xFE	; 254
    4282:	02 96       	adiw	r24, 0x02	; 2
    4284:	a1 1d       	adc	r26, r1
    4286:	b1 1d       	adc	r27, r1
    4288:	80 93 58 09 	sts	0x0958, r24	; 0x800958 <currentSector>
    428c:	90 93 59 09 	sts	0x0959, r25	; 0x800959 <currentSector+0x1>
    4290:	a0 93 5a 09 	sts	0x095A, r26	; 0x80095a <currentSector+0x2>
    4294:	b0 93 5b 09 	sts	0x095B, r27	; 0x80095b <currentSector+0x3>
	}
	
	return updateSessionMap();
    4298:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <updateSessionMap>
}
    429c:	08 95       	ret

Disassembly of section .text.STORE_EndSession:

0000409c <STORE_EndSession>:

bool STORE_EndSession(void) {
	// Ensure we end on a frame boundary
	if(currentSector % SECTORS_PER_FRAME != 0) {
    409c:	80 91 58 09 	lds	r24, 0x0958	; 0x800958 <currentSector>
    40a0:	90 91 59 09 	lds	r25, 0x0959	; 0x800959 <currentSector+0x1>
    40a4:	a0 91 5a 09 	lds	r26, 0x095A	; 0x80095a <currentSector+0x2>
    40a8:	b0 91 5b 09 	lds	r27, 0x095B	; 0x80095b <currentSector+0x3>
    40ac:	80 ff       	sbrs	r24, 0
    40ae:	0c c0       	rjmp	.+24     	; 0x40c8 <STORE_EndSession+0x2c>
		currentSector += SECTORS_PER_FRAME - (currentSector % SECTORS_PER_FRAME);
    40b0:	8e 7f       	andi	r24, 0xFE	; 254
    40b2:	02 96       	adiw	r24, 0x02	; 2
    40b4:	a1 1d       	adc	r26, r1
    40b6:	b1 1d       	adc	r27, r1
    40b8:	80 93 58 09 	sts	0x0958, r24	; 0x800958 <currentSector>
    40bc:	90 93 59 09 	sts	0x0959, r25	; 0x800959 <currentSector+0x1>
    40c0:	a0 93 5a 09 	sts	0x095A, r26	; 0x80095a <currentSector+0x2>
    40c4:	b0 93 5b 09 	sts	0x095B, r27	; 0x80095b <currentSector+0x3>
	}
	
	gState.lastSessionSector = currentSector - 1;
    40c8:	80 91 58 09 	lds	r24, 0x0958	; 0x800958 <currentSector>
    40cc:	90 91 59 09 	lds	r25, 0x0959	; 0x800959 <currentSector+0x1>
    40d0:	a0 91 5a 09 	lds	r26, 0x095A	; 0x80095a <currentSector+0x2>
    40d4:	b0 91 5b 09 	lds	r27, 0x095B	; 0x80095b <currentSector+0x3>
    40d8:	01 97       	sbiw	r24, 0x01	; 1
    40da:	a1 09       	sbc	r26, r1
    40dc:	b1 09       	sbc	r27, r1
    40de:	80 93 3c 07 	sts	0x073C, r24	; 0x80073c <gState+0x10>
    40e2:	90 93 3d 07 	sts	0x073D, r25	; 0x80073d <gState+0x11>
    40e6:	a0 93 3e 07 	sts	0x073E, r26	; 0x80073e <gState+0x12>
    40ea:	b0 93 3f 07 	sts	0x073F, r27	; 0x80073f <gState+0x13>
	return writeGlobalState();
    40ee:	0e 94 8b 23 	call	0x4716	; 0x4716 <writeGlobalState>
}
    40f2:	08 95       	ret

Disassembly of section .text.vUARTtxDataAvailable:

00004c42 <vUARTtxDataAvailable>:
#endif

bool vUARTIsBusy(void) {
	return ((sg_etxState != ESTATE_IDLE) ||
		(sg_eCell_mc_rxState != ESTATE_IDLE));
}
    4c42:	80 91 7b 09 	lds	r24, 0x097B	; 0x80097b <sg_u8SendIndex>
    4c46:	81 11       	cpse	r24, r1
    4c48:	06 c0       	rjmp	.+12     	; 0x4c56 <vUARTtxDataAvailable+0x14>
    4c4a:	0e 94 55 24 	call	0x48aa	; 0x48aa <PlatformGetSendData>
    4c4e:	90 93 61 09 	sts	0x0961, r25	; 0x800961 <sg_u8SendData+0x1>
    4c52:	80 93 60 09 	sts	0x0960, r24	; 0x800960 <sg_u8SendData>
    4c56:	80 91 7b 09 	lds	r24, 0x097B	; 0x80097b <sg_u8SendIndex>
    4c5a:	81 11       	cpse	r24, r1
    4c5c:	02 c0       	rjmp	.+4      	; 0x4c62 <vUARTtxDataAvailable+0x20>
    4c5e:	81 e0       	ldi	r24, 0x01	; 1
    4c60:	08 95       	ret
    4c62:	80 e0       	ldi	r24, 0x00	; 0
    4c64:	08 95       	ret

Disassembly of section .text.vUARTtxDataGet:

000043e0 <vUARTtxDataGet>:
    43e0:	80 91 7b 09 	lds	r24, 0x097B	; 0x80097b <sg_u8SendIndex>
    43e4:	81 11       	cpse	r24, r1
    43e6:	10 c0       	rjmp	.+32     	; 0x4408 <vUARTtxDataGet+0x28>
    43e8:	81 e0       	ldi	r24, 0x01	; 1
    43ea:	0e 94 55 24 	call	0x48aa	; 0x48aa <PlatformGetSendData>
    43ee:	e0 e6       	ldi	r30, 0x60	; 96
    43f0:	f9 e0       	ldi	r31, 0x09	; 9
    43f2:	90 83       	st	Z, r25
    43f4:	81 83       	std	Z+1, r24	; 0x01
    43f6:	80 81       	ld	r24, Z
    43f8:	88 23       	and	r24, r24
    43fa:	24 f4       	brge	.+8      	; 0x4404 <vUARTtxDataGet+0x24>
    43fc:	81 e0       	ldi	r24, 0x01	; 1
    43fe:	80 93 7f 09 	sts	0x097F, r24	; 0x80097f <sg_bCellReportsReuested>
    4402:	02 c0       	rjmp	.+4      	; 0x4408 <vUARTtxDataGet+0x28>
    4404:	10 92 7f 09 	sts	0x097F, r1	; 0x80097f <sg_bCellReportsReuested>
    4408:	e0 91 7b 09 	lds	r30, 0x097B	; 0x80097b <sg_u8SendIndex>
    440c:	f0 e0       	ldi	r31, 0x00	; 0
    440e:	e0 5a       	subi	r30, 0xA0	; 160
    4410:	f6 4f       	sbci	r31, 0xF6	; 246
    4412:	80 81       	ld	r24, Z
    4414:	90 91 7b 09 	lds	r25, 0x097B	; 0x80097b <sg_u8SendIndex>
    4418:	9f 5f       	subi	r25, 0xFF	; 255
    441a:	90 93 7b 09 	sts	0x097B, r25	; 0x80097b <sg_u8SendIndex>
    441e:	90 91 7b 09 	lds	r25, 0x097B	; 0x80097b <sg_u8SendIndex>
    4422:	92 30       	cpi	r25, 0x02	; 2
    4424:	10 f0       	brcs	.+4      	; 0x442a <vUARTtxDataGet+0x4a>
    4426:	10 92 7b 09 	sts	0x097B, r1	; 0x80097b <sg_u8SendIndex>
    442a:	08 95       	ret

Disassembly of section .text.vUARTRXReset:

00004ee2 <vUARTRXReset>:

// Called when we have a string timeout or need to reset the state machine
// for the MC RX side of things
void vUARTRXReset(void)
{
	sg_eCell_mc_rxState = ESTATE_IDLE;
    4ee2:	10 92 86 09 	sts	0x0986, r1	; 0x800986 <sg_eCell_mc_rxState>
	vUARTRXStart();
    4ee6:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <vUARTRXStart>
    4eea:	08 95       	ret

Disassembly of section .text.vUARTStarttx:

0000414a <vUARTStarttx>:
#endif

bool vUARTIsBusy(void) {
	return ((sg_etxState != ESTATE_IDLE) ||
		(sg_eCell_mc_rxState != ESTATE_IDLE));
}
    414a:	80 91 80 09 	lds	r24, 0x0980	; 0x800980 <sg_etxState>
    414e:	81 11       	cpse	r24, r1
    4150:	23 c0       	rjmp	.+70     	; 0x4198 <vUARTStarttx+0x4e>
    4152:	80 91 86 09 	lds	r24, 0x0986	; 0x800986 <sg_eCell_mc_rxState>
    4156:	81 11       	cpse	r24, r1
    4158:	21 c0       	rjmp	.+66     	; 0x419c <vUARTStarttx+0x52>
    415a:	82 e0       	ldi	r24, 0x02	; 2
    415c:	80 93 80 09 	sts	0x0980, r24	; 0x800980 <sg_etxState>
    4160:	10 92 7b 09 	sts	0x097B, r1	; 0x80097b <sg_u8SendIndex>
    4164:	10 92 83 09 	sts	0x0983, r1	; 0x800983 <sg_u8txBitCount>
    4168:	81 e0       	ldi	r24, 0x01	; 1
    416a:	80 93 7e 09 	sts	0x097E, r24	; 0x80097e <sg_bMCTxNextBit>
    416e:	86 b5       	in	r24, 0x26	; 38
    4170:	8e 5c       	subi	r24, 0xCE	; 206
    4172:	87 bd       	out	0x27, r24	; 39
    4174:	85 b3       	in	r24, 0x15	; 21
    4176:	82 60       	ori	r24, 0x02	; 2
    4178:	85 bb       	out	0x15, r24	; 21
    417a:	ee e6       	ldi	r30, 0x6E	; 110
    417c:	f0 e0       	ldi	r31, 0x00	; 0
    417e:	80 81       	ld	r24, Z
    4180:	82 60       	ori	r24, 0x02	; 2
    4182:	80 83       	st	Z, r24
    4184:	0e 94 21 26 	call	0x4c42	; 0x4c42 <vUARTtxDataAvailable>
    4188:	80 93 81 09 	sts	0x0981, r24	; 0x800981 <sg_btxMoreAvailable>
    418c:	0e 94 f0 21 	call	0x43e0	; 0x43e0 <vUARTtxDataGet>
    4190:	80 93 82 09 	sts	0x0982, r24	; 0x800982 <sg_u8txDataByte>
    4194:	81 e0       	ldi	r24, 0x01	; 1
    4196:	08 95       	ret
    4198:	80 e0       	ldi	r24, 0x00	; 0
    419a:	08 95       	ret
    419c:	80 e0       	ldi	r24, 0x00	; 0
    419e:	08 95       	ret

Disassembly of section .text.__vector_8:

00003342 <__vector_8>:
    3342:	1f 92       	push	r1
    3344:	0f 92       	push	r0
    3346:	0f b6       	in	r0, 0x3f	; 63
    3348:	0f 92       	push	r0
    334a:	11 24       	eor	r1, r1
    334c:	8f 93       	push	r24
    334e:	9f 93       	push	r25
    3350:	ef 93       	push	r30
    3352:	ff 93       	push	r31
    3354:	80 91 86 09 	lds	r24, 0x0986	; 0x800986 <sg_eCell_mc_rxState>
    3358:	88 23       	and	r24, r24
    335a:	11 f0       	breq	.+4      	; 0x3360 <__vector_8+0x1e>
    335c:	83 30       	cpi	r24, 0x03	; 3
    335e:	f9 f4       	brne	.+62     	; 0x339e <__vector_8+0x5c>
    3360:	86 b5       	in	r24, 0x26	; 38
    3362:	8c 5b       	subi	r24, 0xBC	; 188
    3364:	88 bd       	out	0x28, r24	; 40
    3366:	85 b3       	in	r24, 0x15	; 21
    3368:	84 60       	ori	r24, 0x04	; 4
    336a:	85 bb       	out	0x15, r24	; 21
    336c:	ee e6       	ldi	r30, 0x6E	; 110
    336e:	f0 e0       	ldi	r31, 0x00	; 0
    3370:	80 81       	ld	r24, Z
    3372:	84 60       	ori	r24, 0x04	; 4
    3374:	80 83       	st	Z, r24
    3376:	e9 e6       	ldi	r30, 0x69	; 105
    3378:	f0 e0       	ldi	r31, 0x00	; 0
    337a:	80 81       	ld	r24, Z
    337c:	83 7f       	andi	r24, 0xF3	; 243
    337e:	84 60       	ori	r24, 0x04	; 4
    3380:	80 83       	st	Z, r24
    3382:	8c b3       	in	r24, 0x1c	; 28
    3384:	82 60       	ori	r24, 0x02	; 2
    3386:	8c bb       	out	0x1c, r24	; 28
    3388:	8b b1       	in	r24, 0x0b	; 11
    338a:	80 62       	ori	r24, 0x20	; 32
    338c:	8b b9       	out	0x0b, r24	; 11
    338e:	10 92 7a 09 	sts	0x097A, r1	; 0x80097a <sg_bState>
    3392:	81 e0       	ldi	r24, 0x01	; 1
    3394:	80 93 86 09 	sts	0x0986, r24	; 0x800986 <sg_eCell_mc_rxState>
    3398:	10 92 88 09 	sts	0x0988, r1	; 0x800988 <sg_u8Cell_mc_rxBitCount>
    339c:	22 c0       	rjmp	.+68     	; 0x33e2 <__vector_8+0xa0>
    339e:	81 30       	cpi	r24, 0x01	; 1
    33a0:	01 f5       	brne	.+64     	; 0x33e2 <__vector_8+0xa0>
    33a2:	80 91 88 09 	lds	r24, 0x0988	; 0x800988 <sg_u8Cell_mc_rxBitCount>
    33a6:	88 23       	and	r24, r24
    33a8:	e1 f0       	breq	.+56     	; 0x33e2 <__vector_8+0xa0>
    33aa:	86 b5       	in	r24, 0x26	; 38
    33ac:	98 b5       	in	r25, 0x28	; 40
    33ae:	99 51       	subi	r25, 0x19	; 25
    33b0:	89 1b       	sub	r24, r25
    33b2:	90 91 7d 09 	lds	r25, 0x097D	; 0x80097d <sg_minTimingError>
    33b6:	89 17       	cp	r24, r25
    33b8:	14 f4       	brge	.+4      	; 0x33be <__vector_8+0x7c>
    33ba:	80 93 7d 09 	sts	0x097D, r24	; 0x80097d <sg_minTimingError>
    33be:	90 91 7c 09 	lds	r25, 0x097C	; 0x80097c <sg_maxTimingError>
    33c2:	98 17       	cp	r25, r24
    33c4:	14 f4       	brge	.+4      	; 0x33ca <__vector_8+0x88>
    33c6:	80 93 7c 09 	sts	0x097C, r24	; 0x80097c <sg_maxTimingError>
    33ca:	86 b5       	in	r24, 0x26	; 38
    33cc:	8e 5e       	subi	r24, 0xEE	; 238
    33ce:	88 bd       	out	0x28, r24	; 40
    33d0:	80 91 62 09 	lds	r24, 0x0962	; 0x800962 <sg_edgeCorrections>
    33d4:	90 91 63 09 	lds	r25, 0x0963	; 0x800963 <sg_edgeCorrections+0x1>
    33d8:	01 96       	adiw	r24, 0x01	; 1
    33da:	90 93 63 09 	sts	0x0963, r25	; 0x800963 <sg_edgeCorrections+0x1>
    33de:	80 93 62 09 	sts	0x0962, r24	; 0x800962 <sg_edgeCorrections>
    33e2:	ff 91       	pop	r31
    33e4:	ef 91       	pop	r30
    33e6:	9f 91       	pop	r25
    33e8:	8f 91       	pop	r24
    33ea:	0f 90       	pop	r0
    33ec:	0f be       	out	0x3f, r0	; 63
    33ee:	0f 90       	pop	r0
    33f0:	1f 90       	pop	r1
    33f2:	18 95       	reti

Disassembly of section .text.__vector_16:

00002994 <__vector_16>:
    2994:	1f 92       	push	r1
    2996:	0f 92       	push	r0
    2998:	0f b6       	in	r0, 0x3f	; 63
    299a:	0f 92       	push	r0
    299c:	11 24       	eor	r1, r1
    299e:	2f 93       	push	r18
    29a0:	3f 93       	push	r19
    29a2:	4f 93       	push	r20
    29a4:	5f 93       	push	r21
    29a6:	6f 93       	push	r22
    29a8:	7f 93       	push	r23
    29aa:	8f 93       	push	r24
    29ac:	9f 93       	push	r25
    29ae:	af 93       	push	r26
    29b0:	bf 93       	push	r27
    29b2:	ef 93       	push	r30
    29b4:	ff 93       	push	r31
    29b6:	86 b5       	in	r24, 0x26	; 38
    29b8:	85 5d       	subi	r24, 0xD5	; 213
    29ba:	88 bd       	out	0x28, r24	; 40
    29bc:	85 b3       	in	r24, 0x15	; 21
    29be:	84 60       	ori	r24, 0x04	; 4
    29c0:	85 bb       	out	0x15, r24	; 21
    29c2:	ee e6       	ldi	r30, 0x6E	; 110
    29c4:	f0 e0       	ldi	r31, 0x00	; 0
    29c6:	80 81       	ld	r24, Z
    29c8:	84 60       	ori	r24, 0x04	; 4
    29ca:	80 83       	st	Z, r24
    29cc:	20 91 85 09 	lds	r18, 0x0985	; 0x800985 <sg_bCell_mc_rxPriorState>
    29d0:	83 b1       	in	r24, 0x03	; 3
    29d2:	82 fb       	bst	r24, 2
    29d4:	88 27       	eor	r24, r24
    29d6:	80 f9       	bld	r24, 0
    29d8:	80 93 85 09 	sts	0x0985, r24	; 0x800985 <sg_bCell_mc_rxPriorState>
    29dc:	90 91 7a 09 	lds	r25, 0x097A	; 0x80097a <sg_bState>
    29e0:	99 23       	and	r25, r25
    29e2:	31 f0       	breq	.+12     	; 0x29f0 <__vector_16+0x5c>
    29e4:	9b b1       	in	r25, 0x0b	; 11
    29e6:	90 62       	ori	r25, 0x20	; 32
    29e8:	9b b9       	out	0x0b, r25	; 11
    29ea:	10 92 7a 09 	sts	0x097A, r1	; 0x80097a <sg_bState>
    29ee:	06 c0       	rjmp	.+12     	; 0x29fc <__vector_16+0x68>
    29f0:	9b b1       	in	r25, 0x0b	; 11
    29f2:	9f 7d       	andi	r25, 0xDF	; 223
    29f4:	9b b9       	out	0x0b, r25	; 11
    29f6:	81 e0       	ldi	r24, 0x01	; 1
    29f8:	80 93 7a 09 	sts	0x097A, r24	; 0x80097a <sg_bState>
    29fc:	80 91 88 09 	lds	r24, 0x0988	; 0x800988 <sg_u8Cell_mc_rxBitCount>
    2a00:	8f 5f       	subi	r24, 0xFF	; 255
    2a02:	80 93 88 09 	sts	0x0988, r24	; 0x800988 <sg_u8Cell_mc_rxBitCount>
    2a06:	81 30       	cpi	r24, 0x01	; 1
    2a08:	19 f4       	brne	.+6      	; 0x2a10 <__vector_16+0x7c>
    2a0a:	10 92 87 09 	sts	0x0987, r1	; 0x800987 <sg_u8rxDataByte>
    2a0e:	23 c0       	rjmp	.+70     	; 0x2a56 <__vector_16+0xc2>
    2a10:	8a 30       	cpi	r24, 0x0A	; 10
    2a12:	38 f4       	brcc	.+14     	; 0x2a22 <__vector_16+0x8e>
    2a14:	80 91 87 09 	lds	r24, 0x0987	; 0x800987 <sg_u8rxDataByte>
    2a18:	88 0f       	add	r24, r24
    2a1a:	82 2b       	or	r24, r18
    2a1c:	80 93 87 09 	sts	0x0987, r24	; 0x800987 <sg_u8rxDataByte>
    2a20:	1a c0       	rjmp	.+52     	; 0x2a56 <__vector_16+0xc2>
    2a22:	20 93 84 09 	sts	0x0984, r18	; 0x800984 <sg_bCell_mc_rxMoreData>
    2a26:	8b b1       	in	r24, 0x0b	; 11
    2a28:	8f 7d       	andi	r24, 0xDF	; 223
    2a2a:	8b b9       	out	0x0b, r24	; 11
    2a2c:	81 e0       	ldi	r24, 0x01	; 1
    2a2e:	80 93 7a 09 	sts	0x097A, r24	; 0x80097a <sg_bState>
    2a32:	8c e0       	ldi	r24, 0x0C	; 12
    2a34:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f0069>
    2a38:	8c b3       	in	r24, 0x1c	; 28
    2a3a:	82 60       	ori	r24, 0x02	; 2
    2a3c:	8c bb       	out	0x1c, r24	; 28
    2a3e:	ee e6       	ldi	r30, 0x6E	; 110
    2a40:	f0 e0       	ldi	r31, 0x00	; 0
    2a42:	80 81       	ld	r24, Z
    2a44:	8b 7f       	andi	r24, 0xFB	; 251
    2a46:	80 83       	st	Z, r24
    2a48:	80 91 87 09 	lds	r24, 0x0987	; 0x800987 <sg_u8rxDataByte>
    2a4c:	0e 94 54 1e 	call	0x3ca8	; 0x3ca8 <vUARTRXData>
    2a50:	83 e0       	ldi	r24, 0x03	; 3
    2a52:	80 93 86 09 	sts	0x0986, r24	; 0x800986 <sg_eCell_mc_rxState>
    2a56:	ff 91       	pop	r31
    2a58:	ef 91       	pop	r30
    2a5a:	bf 91       	pop	r27
    2a5c:	af 91       	pop	r26
    2a5e:	9f 91       	pop	r25
    2a60:	8f 91       	pop	r24
    2a62:	7f 91       	pop	r23
    2a64:	6f 91       	pop	r22
    2a66:	5f 91       	pop	r21
    2a68:	4f 91       	pop	r20
    2a6a:	3f 91       	pop	r19
    2a6c:	2f 91       	pop	r18
    2a6e:	0f 90       	pop	r0
    2a70:	0f be       	out	0x3f, r0	; 63
    2a72:	0f 90       	pop	r0
    2a74:	1f 90       	pop	r1
    2a76:	18 95       	reti

Disassembly of section .text.__vector_15:

0000244e <__vector_15>:
    244e:	1f 92       	push	r1
    2450:	0f 92       	push	r0
    2452:	0f b6       	in	r0, 0x3f	; 63
    2454:	0f 92       	push	r0
    2456:	11 24       	eor	r1, r1
    2458:	2f 93       	push	r18
    245a:	3f 93       	push	r19
    245c:	4f 93       	push	r20
    245e:	5f 93       	push	r21
    2460:	6f 93       	push	r22
    2462:	7f 93       	push	r23
    2464:	8f 93       	push	r24
    2466:	9f 93       	push	r25
    2468:	af 93       	push	r26
    246a:	bf 93       	push	r27
    246c:	ef 93       	push	r30
    246e:	ff 93       	push	r31
    2470:	86 b5       	in	r24, 0x26	; 38
    2472:	83 5d       	subi	r24, 0xD3	; 211
    2474:	87 bd       	out	0x27, r24	; 39
    2476:	85 b3       	in	r24, 0x15	; 21
    2478:	82 60       	ori	r24, 0x02	; 2
    247a:	85 bb       	out	0x15, r24	; 21
    247c:	ee e6       	ldi	r30, 0x6E	; 110
    247e:	f0 e0       	ldi	r31, 0x00	; 0
    2480:	80 81       	ld	r24, Z
    2482:	82 60       	ori	r24, 0x02	; 2
    2484:	80 83       	st	Z, r24
    2486:	80 91 7e 09 	lds	r24, 0x097E	; 0x80097e <sg_bMCTxNextBit>
    248a:	88 23       	and	r24, r24
    248c:	21 f0       	breq	.+8      	; 0x2496 <__vector_15+0x48>
    248e:	85 b1       	in	r24, 0x05	; 5
    2490:	88 60       	ori	r24, 0x08	; 8
    2492:	85 b9       	out	0x05, r24	; 5
    2494:	03 c0       	rjmp	.+6      	; 0x249c <__vector_15+0x4e>
    2496:	85 b1       	in	r24, 0x05	; 5
    2498:	87 7f       	andi	r24, 0xF7	; 247
    249a:	85 b9       	out	0x05, r24	; 5
    249c:	80 91 83 09 	lds	r24, 0x0983	; 0x800983 <sg_u8txBitCount>
    24a0:	8f 5f       	subi	r24, 0xFF	; 255
    24a2:	80 93 83 09 	sts	0x0983, r24	; 0x800983 <sg_u8txBitCount>
    24a6:	80 91 83 09 	lds	r24, 0x0983	; 0x800983 <sg_u8txBitCount>
    24aa:	83 30       	cpi	r24, 0x03	; 3
    24ac:	61 f4       	brne	.+24     	; 0x24c6 <__vector_15+0x78>
    24ae:	80 91 7f 09 	lds	r24, 0x097F	; 0x80097f <sg_bCellReportsReuested>
    24b2:	88 23       	and	r24, r24
    24b4:	41 f0       	breq	.+16     	; 0x24c6 <__vector_15+0x78>
    24b6:	8b e0       	ldi	r24, 0x0B	; 11
    24b8:	80 93 83 09 	sts	0x0983, r24	; 0x800983 <sg_u8txBitCount>
    24bc:	10 92 7e 09 	sts	0x097E, r1	; 0x80097e <sg_bMCTxNextBit>
    24c0:	10 92 81 09 	sts	0x0981, r1	; 0x800981 <sg_btxMoreAvailable>
    24c4:	4d c0       	rjmp	.+154    	; 0x2560 <__vector_15+0x112>
    24c6:	80 91 83 09 	lds	r24, 0x0983	; 0x800983 <sg_u8txBitCount>
    24ca:	8a 30       	cpi	r24, 0x0A	; 10
    24cc:	80 f4       	brcc	.+32     	; 0x24ee <__vector_15+0xa0>
    24ce:	80 91 82 09 	lds	r24, 0x0982	; 0x800982 <sg_u8txDataByte>
    24d2:	88 23       	and	r24, r24
    24d4:	24 f4       	brge	.+8      	; 0x24de <__vector_15+0x90>
    24d6:	81 e0       	ldi	r24, 0x01	; 1
    24d8:	80 93 7e 09 	sts	0x097E, r24	; 0x80097e <sg_bMCTxNextBit>
    24dc:	02 c0       	rjmp	.+4      	; 0x24e2 <__vector_15+0x94>
    24de:	10 92 7e 09 	sts	0x097E, r1	; 0x80097e <sg_bMCTxNextBit>
    24e2:	80 91 82 09 	lds	r24, 0x0982	; 0x800982 <sg_u8txDataByte>
    24e6:	88 0f       	add	r24, r24
    24e8:	80 93 82 09 	sts	0x0982, r24	; 0x800982 <sg_u8txDataByte>
    24ec:	39 c0       	rjmp	.+114    	; 0x2560 <__vector_15+0x112>
    24ee:	80 91 83 09 	lds	r24, 0x0983	; 0x800983 <sg_u8txBitCount>
    24f2:	8a 30       	cpi	r24, 0x0A	; 10
    24f4:	29 f4       	brne	.+10     	; 0x2500 <__vector_15+0xb2>
    24f6:	80 91 81 09 	lds	r24, 0x0981	; 0x800981 <sg_btxMoreAvailable>
    24fa:	80 93 7e 09 	sts	0x097E, r24	; 0x80097e <sg_bMCTxNextBit>
    24fe:	30 c0       	rjmp	.+96     	; 0x2560 <__vector_15+0x112>
    2500:	80 91 83 09 	lds	r24, 0x0983	; 0x800983 <sg_u8txBitCount>
    2504:	8b 30       	cpi	r24, 0x0B	; 11
    2506:	19 f4       	brne	.+6      	; 0x250e <__vector_15+0xc0>
    2508:	10 92 7e 09 	sts	0x097E, r1	; 0x80097e <sg_bMCTxNextBit>
    250c:	29 c0       	rjmp	.+82     	; 0x2560 <__vector_15+0x112>
    250e:	80 91 83 09 	lds	r24, 0x0983	; 0x800983 <sg_u8txBitCount>
    2512:	8c 30       	cpi	r24, 0x0C	; 12
    2514:	29 f5       	brne	.+74     	; 0x2560 <__vector_15+0x112>
    2516:	80 91 81 09 	lds	r24, 0x0981	; 0x800981 <sg_btxMoreAvailable>
    251a:	80 93 7e 09 	sts	0x097E, r24	; 0x80097e <sg_bMCTxNextBit>
    251e:	10 92 83 09 	sts	0x0983, r1	; 0x800983 <sg_u8txBitCount>
    2522:	80 91 81 09 	lds	r24, 0x0981	; 0x800981 <sg_btxMoreAvailable>
    2526:	81 11       	cpse	r24, r1
    2528:	08 c0       	rjmp	.+16     	; 0x253a <__vector_15+0xec>
    252a:	10 92 80 09 	sts	0x0980, r1	; 0x800980 <sg_etxState>
    252e:	ee e6       	ldi	r30, 0x6E	; 110
    2530:	f0 e0       	ldi	r31, 0x00	; 0
    2532:	80 81       	ld	r24, Z
    2534:	8d 7f       	andi	r24, 0xFD	; 253
    2536:	80 83       	st	Z, r24
    2538:	13 c0       	rjmp	.+38     	; 0x2560 <__vector_15+0x112>
    253a:	0e 94 21 26 	call	0x4c42	; 0x4c42 <vUARTtxDataAvailable>
    253e:	80 93 81 09 	sts	0x0981, r24	; 0x800981 <sg_btxMoreAvailable>
    2542:	0e 94 f0 21 	call	0x43e0	; 0x43e0 <vUARTtxDataGet>
    2546:	80 93 82 09 	sts	0x0982, r24	; 0x800982 <sg_u8txDataByte>
    254a:	86 b5       	in	r24, 0x26	; 38
    254c:	88 53       	subi	r24, 0x38	; 56
    254e:	87 bd       	out	0x27, r24	; 39
    2550:	85 b3       	in	r24, 0x15	; 21
    2552:	82 60       	ori	r24, 0x02	; 2
    2554:	85 bb       	out	0x15, r24	; 21
    2556:	ee e6       	ldi	r30, 0x6E	; 110
    2558:	f0 e0       	ldi	r31, 0x00	; 0
    255a:	80 81       	ld	r24, Z
    255c:	82 60       	ori	r24, 0x02	; 2
    255e:	80 83       	st	Z, r24
    2560:	ff 91       	pop	r31
    2562:	ef 91       	pop	r30
    2564:	bf 91       	pop	r27
    2566:	af 91       	pop	r26
    2568:	9f 91       	pop	r25
    256a:	8f 91       	pop	r24
    256c:	7f 91       	pop	r23
    256e:	6f 91       	pop	r22
    2570:	5f 91       	pop	r21
    2572:	4f 91       	pop	r20
    2574:	3f 91       	pop	r19
    2576:	2f 91       	pop	r18
    2578:	0f 90       	pop	r0
    257a:	0f be       	out	0x3f, r0	; 63
    257c:	0f 90       	pop	r0
    257e:	1f 90       	pop	r1
    2580:	18 95       	reti

Disassembly of section .text.vUARTInit:

000045dc <vUARTInit>:
    45dc:	85 b7       	in	r24, 0x35	; 53
    45de:	8f 7e       	andi	r24, 0xEF	; 239
    45e0:	85 bf       	out	0x35, r24	; 53
    45e2:	84 b1       	in	r24, 0x04	; 4
    45e4:	88 60       	ori	r24, 0x08	; 8
    45e6:	84 b9       	out	0x04, r24	; 4
    45e8:	84 b1       	in	r24, 0x04	; 4
    45ea:	8b 7f       	andi	r24, 0xFB	; 251
    45ec:	84 b9       	out	0x04, r24	; 4
    45ee:	85 b1       	in	r24, 0x05	; 5
    45f0:	8b 7f       	andi	r24, 0xFB	; 251
    45f2:	85 b9       	out	0x05, r24	; 5
    45f4:	8a b1       	in	r24, 0x0a	; 10
    45f6:	80 62       	ori	r24, 0x20	; 32
    45f8:	8a b9       	out	0x0a, r24	; 10
    45fa:	8b b1       	in	r24, 0x0b	; 11
    45fc:	80 62       	ori	r24, 0x20	; 32
    45fe:	8b b9       	out	0x0b, r24	; 11
    4600:	8d b3       	in	r24, 0x1d	; 29
    4602:	8d 7f       	andi	r24, 0xFD	; 253
    4604:	8d bb       	out	0x1d, r24	; 29
    4606:	10 92 80 09 	sts	0x0980, r1	; 0x800980 <sg_etxState>
    460a:	85 b1       	in	r24, 0x05	; 5
    460c:	87 7f       	andi	r24, 0xF7	; 247
    460e:	85 b9       	out	0x05, r24	; 5
    4610:	08 95       	ret

Disassembly of section .text.vUARTInitReceive:

000048d2 <vUARTInitReceive>:
    48d2:	8f e7       	ldi	r24, 0x7F	; 127
    48d4:	80 93 7d 09 	sts	0x097D, r24	; 0x80097d <sg_minTimingError>
    48d8:	80 e8       	ldi	r24, 0x80	; 128
    48da:	80 93 7c 09 	sts	0x097C, r24	; 0x80097c <sg_maxTimingError>
    48de:	10 92 63 09 	sts	0x0963, r1	; 0x800963 <sg_edgeCorrections+0x1>
    48e2:	10 92 62 09 	sts	0x0962, r1	; 0x800962 <sg_edgeCorrections>
    48e6:	8c e0       	ldi	r24, 0x0C	; 12
    48e8:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f0069>
    48ec:	8c b3       	in	r24, 0x1c	; 28
    48ee:	82 60       	ori	r24, 0x02	; 2
    48f0:	8c bb       	out	0x1c, r24	; 28
    48f2:	8d b3       	in	r24, 0x1d	; 29
    48f4:	82 60       	ori	r24, 0x02	; 2
    48f6:	8d bb       	out	0x1d, r24	; 29
    48f8:	08 95       	ret

Disassembly of section .text.libgcc.div:

000048fa <__udivmodhi4>:
    48fa:	aa 1b       	sub	r26, r26
    48fc:	bb 1b       	sub	r27, r27
    48fe:	51 e1       	ldi	r21, 0x11	; 17
    4900:	07 c0       	rjmp	.+14     	; 0x4910 <__udivmodhi4_ep>

00004902 <__udivmodhi4_loop>:
    4902:	aa 1f       	adc	r26, r26
    4904:	bb 1f       	adc	r27, r27
    4906:	a6 17       	cp	r26, r22
    4908:	b7 07       	cpc	r27, r23
    490a:	10 f0       	brcs	.+4      	; 0x4910 <__udivmodhi4_ep>
    490c:	a6 1b       	sub	r26, r22
    490e:	b7 0b       	sbc	r27, r23

00004910 <__udivmodhi4_ep>:
    4910:	88 1f       	adc	r24, r24
    4912:	99 1f       	adc	r25, r25
    4914:	5a 95       	dec	r21
    4916:	a9 f7       	brne	.-22     	; 0x4902 <__udivmodhi4_loop>
    4918:	80 95       	com	r24
    491a:	90 95       	com	r25
    491c:	bc 01       	movw	r22, r24
    491e:	cd 01       	movw	r24, r26
    4920:	08 95       	ret

Disassembly of section .text.libgcc.div:

00004470 <__udivmodsi4>:
    4470:	a1 e2       	ldi	r26, 0x21	; 33
    4472:	1a 2e       	mov	r1, r26
    4474:	aa 1b       	sub	r26, r26
    4476:	bb 1b       	sub	r27, r27
    4478:	fd 01       	movw	r30, r26
    447a:	0d c0       	rjmp	.+26     	; 0x4496 <__udivmodsi4_ep>

0000447c <__udivmodsi4_loop>:
    447c:	aa 1f       	adc	r26, r26
    447e:	bb 1f       	adc	r27, r27
    4480:	ee 1f       	adc	r30, r30
    4482:	ff 1f       	adc	r31, r31
    4484:	a2 17       	cp	r26, r18
    4486:	b3 07       	cpc	r27, r19
    4488:	e4 07       	cpc	r30, r20
    448a:	f5 07       	cpc	r31, r21
    448c:	20 f0       	brcs	.+8      	; 0x4496 <__udivmodsi4_ep>
    448e:	a2 1b       	sub	r26, r18
    4490:	b3 0b       	sbc	r27, r19
    4492:	e4 0b       	sbc	r30, r20
    4494:	f5 0b       	sbc	r31, r21

00004496 <__udivmodsi4_ep>:
    4496:	66 1f       	adc	r22, r22
    4498:	77 1f       	adc	r23, r23
    449a:	88 1f       	adc	r24, r24
    449c:	99 1f       	adc	r25, r25
    449e:	1a 94       	dec	r1
    44a0:	69 f7       	brne	.-38     	; 0x447c <__udivmodsi4_loop>
    44a2:	60 95       	com	r22
    44a4:	70 95       	com	r23
    44a6:	80 95       	com	r24
    44a8:	90 95       	com	r25
    44aa:	9b 01       	movw	r18, r22
    44ac:	ac 01       	movw	r20, r24
    44ae:	bd 01       	movw	r22, r26
    44b0:	cf 01       	movw	r24, r30
    44b2:	08 95       	ret

Disassembly of section .text.libgcc.div:

0000477a <__divmodsi4>:
    477a:	05 2e       	mov	r0, r21
    477c:	97 fb       	bst	r25, 7
    477e:	1e f4       	brtc	.+6      	; 0x4786 <__divmodsi4+0xc>
    4780:	00 94       	com	r0
    4782:	0e 94 27 27 	call	0x4e4e	; 0x4e4e <__negsi2>
    4786:	57 fd       	sbrc	r21, 7
    4788:	07 d0       	rcall	.+14     	; 0x4798 <__divmodsi4_neg2>
    478a:	0e 94 38 22 	call	0x4470	; 0x4470 <__udivmodsi4>
    478e:	07 fc       	sbrc	r0, 7
    4790:	03 d0       	rcall	.+6      	; 0x4798 <__divmodsi4_neg2>
    4792:	4e f4       	brtc	.+18     	; 0x47a6 <__divmodsi4_exit>
    4794:	0c 94 27 27 	jmp	0x4e4e	; 0x4e4e <__negsi2>

00004798 <__divmodsi4_neg2>:
    4798:	50 95       	com	r21
    479a:	40 95       	com	r20
    479c:	30 95       	com	r19
    479e:	21 95       	neg	r18
    47a0:	3f 4f       	sbci	r19, 0xFF	; 255
    47a2:	4f 4f       	sbci	r20, 0xFF	; 255
    47a4:	5f 4f       	sbci	r21, 0xFF	; 255

000047a6 <__divmodsi4_exit>:
    47a6:	08 95       	ret

Disassembly of section .text.libgcc.div:

00004e4e <__negsi2>:
    4e4e:	90 95       	com	r25
    4e50:	80 95       	com	r24
    4e52:	70 95       	com	r23
    4e54:	61 95       	neg	r22
    4e56:	7f 4f       	sbci	r23, 0xFF	; 255
    4e58:	8f 4f       	sbci	r24, 0xFF	; 255
    4e5a:	9f 4f       	sbci	r25, 0xFF	; 255
    4e5c:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00004ca8 <__umulhisi3>:
    4ca8:	a2 9f       	mul	r26, r18
    4caa:	b0 01       	movw	r22, r0
    4cac:	b3 9f       	mul	r27, r19
    4cae:	c0 01       	movw	r24, r0
    4cb0:	a3 9f       	mul	r26, r19
    4cb2:	70 0d       	add	r23, r0
    4cb4:	81 1d       	adc	r24, r1
    4cb6:	11 24       	eor	r1, r1
    4cb8:	91 1d       	adc	r25, r1
    4cba:	b2 9f       	mul	r27, r18
    4cbc:	70 0d       	add	r23, r0
    4cbe:	81 1d       	adc	r24, r1
    4cc0:	11 24       	eor	r1, r1
    4cc2:	91 1d       	adc	r25, r1
    4cc4:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00004ea8 <__usmulhisi3>:
    4ea8:	0e 94 54 26 	call	0x4ca8	; 0x4ca8 <__umulhisi3>

00004eac <__usmulhisi3_tail>:
    4eac:	b7 ff       	sbrs	r27, 7
    4eae:	08 95       	ret
    4eb0:	82 1b       	sub	r24, r18
    4eb2:	93 0b       	sbc	r25, r19
    4eb4:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00004da4 <__muluhisi3>:
    4da4:	0e 94 54 26 	call	0x4ca8	; 0x4ca8 <__umulhisi3>
    4da8:	a5 9f       	mul	r26, r21
    4daa:	90 0d       	add	r25, r0
    4dac:	b4 9f       	mul	r27, r20
    4dae:	90 0d       	add	r25, r0
    4db0:	a4 9f       	mul	r26, r20
    4db2:	80 0d       	add	r24, r0
    4db4:	91 1d       	adc	r25, r1
    4db6:	11 24       	eor	r1, r1
    4db8:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00004e5e <__mulshisi3>:
    4e5e:	b7 ff       	sbrs	r27, 7
    4e60:	0c 94 d2 26 	jmp	0x4da4	; 0x4da4 <__muluhisi3>

00004e64 <__mulohisi3>:
    4e64:	0e 94 d2 26 	call	0x4da4	; 0x4da4 <__muluhisi3>
    4e68:	82 1b       	sub	r24, r18
    4e6a:	93 0b       	sbc	r25, r19
    4e6c:	08 95       	ret

Disassembly of section .text.libgcc:

00004e6e <__xload_2>:
    4e6e:	57 fd       	sbrc	r21, 7
    4e70:	03 c0       	rjmp	.+6      	; 0x4e78 <__xload_2+0xa>
    4e72:	65 91       	lpm	r22, Z+
    4e74:	75 91       	lpm	r23, Z+
    4e76:	08 95       	ret
    4e78:	61 91       	ld	r22, Z+
    4e7a:	71 91       	ld	r23, Z+
    4e7c:	08 95       	ret

Disassembly of section .text.libgcc:

00004d32 <__xload_4>:
    4d32:	57 fd       	sbrc	r21, 7
    4d34:	05 c0       	rjmp	.+10     	; 0x4d40 <__xload_4+0xe>
    4d36:	65 91       	lpm	r22, Z+
    4d38:	75 91       	lpm	r23, Z+
    4d3a:	85 91       	lpm	r24, Z+
    4d3c:	95 91       	lpm	r25, Z+
    4d3e:	08 95       	ret
    4d40:	61 91       	ld	r22, Z+
    4d42:	71 91       	ld	r23, Z+
    4d44:	81 91       	ld	r24, Z+
    4d46:	91 91       	ld	r25, Z+
    4d48:	08 95       	ret

Disassembly of section .text.libgcc:

00004d4a <__adddi3_s8>:
    4d4a:	00 24       	eor	r0, r0
    4d4c:	a7 fd       	sbrc	r26, 7
    4d4e:	00 94       	com	r0
    4d50:	2a 0f       	add	r18, r26
    4d52:	30 1d       	adc	r19, r0
    4d54:	40 1d       	adc	r20, r0
    4d56:	50 1d       	adc	r21, r0
    4d58:	60 1d       	adc	r22, r0
    4d5a:	70 1d       	adc	r23, r0
    4d5c:	80 1d       	adc	r24, r0
    4d5e:	90 1d       	adc	r25, r0
    4d60:	08 95       	ret

Disassembly of section .text.__dummy_fini:

00004f06 <_fini>:
    4f06:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00004f08 <__funcs_on_exit>:
    4f08:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00004f0a <__simulator_exit>:
    4f0a:	08 95       	ret

Disassembly of section .text.exit:

00004dba <exit>:
    4dba:	ec 01       	movw	r28, r24
    4dbc:	0e 94 84 27 	call	0x4f08	; 0x4f08 <__funcs_on_exit>
    4dc0:	0e 94 83 27 	call	0x4f06	; 0x4f06 <_fini>
    4dc4:	ce 01       	movw	r24, r28
    4dc6:	0e 94 85 27 	call	0x4f0a	; 0x4f0a <__simulator_exit>
    4dca:	ce 01       	movw	r24, r28
    4dcc:	0e 94 80 27 	call	0x4f00	; 0x4f00 <_Exit>

Disassembly of section .text.memcpy:

00004748 <memcpy>:
    4748:	cf 92       	push	r12
    474a:	df 92       	push	r13
    474c:	ef 92       	push	r14
    474e:	6a 01       	movw	r12, r20
    4750:	e6 2e       	mov	r14, r22
    4752:	dc 01       	movw	r26, r24
    4754:	28 0f       	add	r18, r24
    4756:	39 1f       	adc	r19, r25
    4758:	a2 17       	cp	r26, r18
    475a:	b3 07       	cpc	r27, r19
    475c:	51 f0       	breq	.+20     	; 0x4772 <memcpy+0x2a>
    475e:	f6 01       	movw	r30, r12
    4760:	44 91       	lpm	r20, Z
    4762:	e7 fc       	sbrc	r14, 7
    4764:	40 81       	ld	r20, Z
    4766:	4d 93       	st	X+, r20
    4768:	4f ef       	ldi	r20, 0xFF	; 255
    476a:	c4 1a       	sub	r12, r20
    476c:	d4 0a       	sbc	r13, r20
    476e:	e4 0a       	sbc	r14, r20
    4770:	f3 cf       	rjmp	.-26     	; 0x4758 <memcpy+0x10>
    4772:	ef 90       	pop	r14
    4774:	df 90       	pop	r13
    4776:	cf 90       	pop	r12
    4778:	08 95       	ret

Disassembly of section .text.memset:

00004df6 <memset>:
    4df6:	fc 01       	movw	r30, r24
    4df8:	48 0f       	add	r20, r24
    4dfa:	59 1f       	adc	r21, r25
    4dfc:	e4 17       	cp	r30, r20
    4dfe:	f5 07       	cpc	r31, r21
    4e00:	11 f0       	breq	.+4      	; 0x4e06 <memset+0x10>
    4e02:	61 93       	st	Z+, r22
    4e04:	fb cf       	rjmp	.-10     	; 0x4dfc <memset+0x6>
    4e06:	08 95       	ret

Disassembly of section .text.gmtime:

00004eec <gmtime>:
    4eec:	44 e0       	ldi	r20, 0x04	; 4
    4eee:	59 e0       	ldi	r21, 0x09	; 9
    4ef0:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <__gmtime_r>
    4ef4:	08 95       	ret

Disassembly of section .text.__gmtime_r:

00003d22 <__gmtime_r>:
    3d22:	a0 e0       	ldi	r26, 0x00	; 0
    3d24:	b0 e0       	ldi	r27, 0x00	; 0
    3d26:	e7 e9       	ldi	r30, 0x97	; 151
    3d28:	fe e1       	ldi	r31, 0x1E	; 30
    3d2a:	0c 94 d8 22 	jmp	0x45b0	; 0x45b0 <__prologue_saves__+0xc>
    3d2e:	ea 01       	movw	r28, r20
    3d30:	fb 01       	movw	r30, r22
    3d32:	58 2f       	mov	r21, r24
    3d34:	0e 94 99 26 	call	0x4d32	; 0x4d32 <__xload_4>
    3d38:	4b 01       	movw	r8, r22
    3d3a:	5c 01       	movw	r10, r24
    3d3c:	c1 2c       	mov	r12, r1
    3d3e:	d1 2c       	mov	r13, r1
    3d40:	76 01       	movw	r14, r12
    3d42:	8e 01       	movw	r16, r28
    3d44:	9b 01       	movw	r18, r22
    3d46:	a5 01       	movw	r20, r10
    3d48:	60 e0       	ldi	r22, 0x00	; 0
    3d4a:	70 e0       	ldi	r23, 0x00	; 0
    3d4c:	80 e0       	ldi	r24, 0x00	; 0
    3d4e:	90 e0       	ldi	r25, 0x00	; 0
    3d50:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <__secs_to_tm>
    3d54:	97 ff       	sbrs	r25, 7
    3d56:	09 c0       	rjmp	.+18     	; 0x3d6a <__gmtime_r+0x48>
    3d58:	8f e4       	ldi	r24, 0x4F	; 79
    3d5a:	90 e0       	ldi	r25, 0x00	; 0
    3d5c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    3d60:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    3d64:	80 e0       	ldi	r24, 0x00	; 0
    3d66:	90 e0       	ldi	r25, 0x00	; 0
    3d68:	0d c0       	rjmp	.+26     	; 0x3d84 <__gmtime_r+0x62>
    3d6a:	19 8a       	std	Y+17, r1	; 0x11
    3d6c:	18 8a       	std	Y+16, r1	; 0x10
    3d6e:	1a 8a       	std	Y+18, r1	; 0x12
    3d70:	1b 8a       	std	Y+19, r1	; 0x13
    3d72:	1c 8a       	std	Y+20, r1	; 0x14
    3d74:	1d 8a       	std	Y+21, r1	; 0x15
    3d76:	8f ea       	ldi	r24, 0xAF	; 175
    3d78:	93 e0       	ldi	r25, 0x03	; 3
    3d7a:	a0 e0       	ldi	r26, 0x00	; 0
    3d7c:	8e 8b       	std	Y+22, r24	; 0x16
    3d7e:	9f 8b       	std	Y+23, r25	; 0x17
    3d80:	a8 8f       	std	Y+24, r26	; 0x18
    3d82:	ce 01       	movw	r24, r28
    3d84:	cd b7       	in	r28, 0x3d	; 61
    3d86:	de b7       	in	r29, 0x3e	; 62
    3d88:	ec e0       	ldi	r30, 0x0C	; 12
    3d8a:	0c 94 0f 23 	jmp	0x461e	; 0x461e <__epilogue_restores__+0xc>

Disassembly of section .text.mktime:

00003932 <mktime>:
    3932:	a9 e1       	ldi	r26, 0x19	; 25
    3934:	b0 e0       	ldi	r27, 0x00	; 0
    3936:	ef e9       	ldi	r30, 0x9F	; 159
    3938:	fc e1       	ldi	r31, 0x1C	; 28
    393a:	0c 94 d4 22 	jmp	0x45a8	; 0x45a8 <__prologue_saves__+0x4>
    393e:	2c 01       	movw	r4, r24
    3940:	bc 01       	movw	r22, r24
    3942:	80 e8       	ldi	r24, 0x80	; 128
    3944:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <__tm_to_secs>
    3948:	39 01       	movw	r6, r18
    394a:	4a 01       	movw	r8, r20
    394c:	59 01       	movw	r10, r18
    394e:	6a 01       	movw	r12, r20
    3950:	e1 2c       	mov	r14, r1
    3952:	f1 2c       	mov	r15, r1
    3954:	00 e0       	ldi	r16, 0x00	; 0
    3956:	10 e0       	ldi	r17, 0x00	; 0
    3958:	0e 94 16 27 	call	0x4e2c	; 0x4e2c <__cmpdi2>
    395c:	f9 f4       	brne	.+62     	; 0x399c <mktime+0x6a>
    395e:	1a 8a       	std	Y+18, r1	; 0x12
    3960:	19 8a       	std	Y+17, r1	; 0x11
    3962:	1b 8a       	std	Y+19, r1	; 0x13
    3964:	1c 8a       	std	Y+20, r1	; 0x14
    3966:	1d 8a       	std	Y+21, r1	; 0x15
    3968:	1e 8a       	std	Y+22, r1	; 0x16
    396a:	23 eb       	ldi	r18, 0xB3	; 179
    396c:	33 e0       	ldi	r19, 0x03	; 3
    396e:	40 e0       	ldi	r20, 0x00	; 0
    3970:	2f 8b       	std	Y+23, r18	; 0x17
    3972:	38 8f       	std	Y+24, r19	; 0x18
    3974:	49 8f       	std	Y+25, r20	; 0x19
    3976:	8e 01       	movw	r16, r28
    3978:	0f 5f       	subi	r16, 0xFF	; 255
    397a:	1f 4f       	sbci	r17, 0xFF	; 255
    397c:	93 01       	movw	r18, r6
    397e:	48 2d       	mov	r20, r8
    3980:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <__secs_to_tm>
    3984:	97 fd       	sbrc	r25, 7
    3986:	0a c0       	rjmp	.+20     	; 0x399c <mktime+0x6a>
    3988:	89 e1       	ldi	r24, 0x19	; 25
    398a:	f8 01       	movw	r30, r16
    398c:	d2 01       	movw	r26, r4
    398e:	01 90       	ld	r0, Z+
    3990:	0d 92       	st	X+, r0
    3992:	8a 95       	dec	r24
    3994:	e1 f7       	brne	.-8      	; 0x398e <mktime+0x5c>
    3996:	b3 01       	movw	r22, r6
    3998:	c4 01       	movw	r24, r8
    399a:	0a c0       	rjmp	.+20     	; 0x39b0 <mktime+0x7e>
    399c:	8f e4       	ldi	r24, 0x4F	; 79
    399e:	90 e0       	ldi	r25, 0x00	; 0
    39a0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    39a4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    39a8:	6f ef       	ldi	r22, 0xFF	; 255
    39aa:	7f ef       	ldi	r23, 0xFF	; 255
    39ac:	8f ef       	ldi	r24, 0xFF	; 255
    39ae:	9f ef       	ldi	r25, 0xFF	; 255
    39b0:	69 96       	adiw	r28, 0x19	; 25
    39b2:	e0 e1       	ldi	r30, 0x10	; 16
    39b4:	0c 94 0b 23 	jmp	0x4616	; 0x4616 <__epilogue_restores__+0x4>

Disassembly of section .text._Exit:

00004f00 <_Exit>:
    4f00:	0e 94 6b 00 	call	0xd6	; 0xd6 <_exit>

Disassembly of section .text.__tm_to_secs:

00001d10 <__tm_to_secs>:
    1d10:	a5 e0       	ldi	r26, 0x05	; 5
    1d12:	b0 e0       	ldi	r27, 0x00	; 0
    1d14:	ee e8       	ldi	r30, 0x8E	; 142
    1d16:	fe e0       	ldi	r31, 0x0E	; 14
    1d18:	0c 94 d2 22 	jmp	0x45a4	; 0x45a4 <__prologue_saves__>
    1d1c:	3b 01       	movw	r6, r22
    1d1e:	88 2e       	mov	r8, r24
    1d20:	a8 2f       	mov	r26, r24
    1d22:	cb 01       	movw	r24, r22
    1d24:	0a 96       	adiw	r24, 0x0a	; 10
    1d26:	a1 1d       	adc	r26, r1
    1d28:	fc 01       	movw	r30, r24
    1d2a:	5a 2f       	mov	r21, r26
    1d2c:	0e 94 37 27 	call	0x4e6e	; 0x4e6e <__xload_2>
    1d30:	5b 01       	movw	r10, r22
    1d32:	9b 01       	movw	r18, r22
    1d34:	9b 2c       	mov	r9, r11
    1d36:	99 0c       	add	r9, r9
    1d38:	99 08       	sbc	r9, r9
    1d3a:	f9 2c       	mov	r15, r9
    1d3c:	b9 2d       	mov	r27, r9
    1d3e:	a9 2d       	mov	r26, r9
    1d40:	89 2d       	mov	r24, r9
    1d42:	99 2d       	mov	r25, r9
    1d44:	e8 2c       	mov	r14, r8
    1d46:	63 01       	movw	r12, r6
    1d48:	48 e0       	ldi	r20, 0x08	; 8
    1d4a:	c4 0e       	add	r12, r20
    1d4c:	d1 1c       	adc	r13, r1
    1d4e:	e1 1c       	adc	r14, r1
    1d50:	f6 01       	movw	r30, r12
    1d52:	5e 2d       	mov	r21, r14
    1d54:	0e 94 37 27 	call	0x4e6e	; 0x4e6e <__xload_2>
    1d58:	2b 01       	movw	r4, r22
    1d5a:	6c 30       	cpi	r22, 0x0C	; 12
    1d5c:	71 05       	cpc	r23, r1
    1d5e:	10 f1       	brcs	.+68     	; 0x1da4 <__tm_to_secs+0x94>
    1d60:	cb 01       	movw	r24, r22
    1d62:	6c e0       	ldi	r22, 0x0C	; 12
    1d64:	70 e0       	ldi	r23, 0x00	; 0
    1d66:	0e 94 91 24 	call	0x4922	; 0x4922 <__divmodhi4>
    1d6a:	2c 01       	movw	r4, r24
    1d6c:	97 ff       	sbrs	r25, 7
    1d6e:	05 c0       	rjmp	.+10     	; 0x1d7a <__tm_to_secs+0x6a>
    1d70:	61 50       	subi	r22, 0x01	; 1
    1d72:	71 09       	sbc	r23, r1
    1d74:	8c e0       	ldi	r24, 0x0C	; 12
    1d76:	48 0e       	add	r4, r24
    1d78:	51 1c       	adc	r5, r1
    1d7a:	97 2f       	mov	r25, r23
    1d7c:	99 0f       	add	r25, r25
    1d7e:	99 0b       	sbc	r25, r25
    1d80:	9b 01       	movw	r18, r22
    1d82:	49 2f       	mov	r20, r25
    1d84:	59 2f       	mov	r21, r25
    1d86:	69 2f       	mov	r22, r25
    1d88:	79 2f       	mov	r23, r25
    1d8a:	89 2f       	mov	r24, r25
    1d8c:	c9 2c       	mov	r12, r9
    1d8e:	d9 2c       	mov	r13, r9
    1d90:	e9 2c       	mov	r14, r9
    1d92:	f9 2c       	mov	r15, r9
    1d94:	09 2d       	mov	r16, r9
    1d96:	19 2d       	mov	r17, r9
    1d98:	0e 94 0d 27 	call	0x4e1a	; 0x4e1a <__adddi3>
    1d9c:	94 2e       	mov	r9, r20
    1d9e:	f5 2e       	mov	r15, r21
    1da0:	b6 2f       	mov	r27, r22
    1da2:	a7 2f       	mov	r26, r23
    1da4:	8e 01       	movw	r16, r28
    1da6:	0f 5f       	subi	r16, 0xFF	; 255
    1da8:	1f 4f       	sbci	r17, 0xFF	; 255
    1daa:	49 2d       	mov	r20, r9
    1dac:	5f 2d       	mov	r21, r15
    1dae:	6b 2f       	mov	r22, r27
    1db0:	7a 2f       	mov	r23, r26
    1db2:	0e 94 34 0a 	call	0x1468	; 0x1468 <__year_to_secs>
    1db6:	59 01       	movw	r10, r18
    1db8:	6a 01       	movw	r12, r20
    1dba:	7b 01       	movw	r14, r22
    1dbc:	8c 01       	movw	r16, r24
    1dbe:	69 81       	ldd	r22, Y+1	; 0x01
    1dc0:	7a 81       	ldd	r23, Y+2	; 0x02
    1dc2:	c2 01       	movw	r24, r4
    1dc4:	0e 94 97 22 	call	0x452e	; 0x452e <__month_to_secs>
    1dc8:	1b 01       	movw	r2, r22
    1dca:	2c 01       	movw	r4, r24
    1dcc:	55 0c       	add	r5, r5
    1dce:	22 08       	sbc	r2, r2
    1dd0:	32 2c       	mov	r3, r2
    1dd2:	21 01       	movw	r4, r2
    1dd4:	9b 01       	movw	r18, r22
    1dd6:	ac 01       	movw	r20, r24
    1dd8:	62 2d       	mov	r22, r2
    1dda:	72 2d       	mov	r23, r2
    1ddc:	82 2d       	mov	r24, r2
    1dde:	92 2d       	mov	r25, r2
    1de0:	0e 94 0d 27 	call	0x4e1a	; 0x4e1a <__adddi3>
    1de4:	19 01       	movw	r2, r18
    1de6:	2a 01       	movw	r4, r20
    1de8:	96 2e       	mov	r9, r22
    1dea:	7b 83       	std	Y+3, r23	; 0x03
    1dec:	8c 83       	std	Y+4, r24	; 0x04
    1dee:	9d 83       	std	Y+5, r25	; 0x05
    1df0:	a8 2d       	mov	r26, r8
    1df2:	c3 01       	movw	r24, r6
    1df4:	06 96       	adiw	r24, 0x06	; 6
    1df6:	a1 1d       	adc	r26, r1
    1df8:	fc 01       	movw	r30, r24
    1dfa:	5a 2f       	mov	r21, r26
    1dfc:	0e 94 37 27 	call	0x4e6e	; 0x4e6e <__xload_2>
    1e00:	61 50       	subi	r22, 0x01	; 1
    1e02:	71 09       	sbc	r23, r1
    1e04:	97 2f       	mov	r25, r23
    1e06:	99 0f       	add	r25, r25
    1e08:	99 0b       	sbc	r25, r25
    1e0a:	30 e8       	ldi	r19, 0x80	; 128
    1e0c:	a3 2e       	mov	r10, r19
    1e0e:	41 e5       	ldi	r20, 0x51	; 81
    1e10:	b4 2e       	mov	r11, r20
    1e12:	cc 24       	eor	r12, r12
    1e14:	c3 94       	inc	r12
    1e16:	d1 2c       	mov	r13, r1
    1e18:	e1 2c       	mov	r14, r1
    1e1a:	f1 2c       	mov	r15, r1
    1e1c:	00 e0       	ldi	r16, 0x00	; 0
    1e1e:	10 e0       	ldi	r17, 0x00	; 0
    1e20:	9b 01       	movw	r18, r22
    1e22:	49 2f       	mov	r20, r25
    1e24:	59 2f       	mov	r21, r25
    1e26:	69 2f       	mov	r22, r25
    1e28:	79 2f       	mov	r23, r25
    1e2a:	89 2f       	mov	r24, r25
    1e2c:	0e 94 a0 1a 	call	0x3540	; 0x3540 <__muldi3>
    1e30:	51 01       	movw	r10, r2
    1e32:	62 01       	movw	r12, r4
    1e34:	e9 2c       	mov	r14, r9
    1e36:	fb 80       	ldd	r15, Y+3	; 0x03
    1e38:	0c 81       	ldd	r16, Y+4	; 0x04
    1e3a:	1d 81       	ldd	r17, Y+5	; 0x05
    1e3c:	0e 94 0d 27 	call	0x4e1a	; 0x4e1a <__adddi3>
    1e40:	59 01       	movw	r10, r18
    1e42:	6a 01       	movw	r12, r20
    1e44:	7b 01       	movw	r14, r22
    1e46:	8c 01       	movw	r16, r24
    1e48:	a8 2d       	mov	r26, r8
    1e4a:	c3 01       	movw	r24, r6
    1e4c:	04 96       	adiw	r24, 0x04	; 4
    1e4e:	a1 1d       	adc	r26, r1
    1e50:	fc 01       	movw	r30, r24
    1e52:	5a 2f       	mov	r21, r26
    1e54:	0e 94 37 27 	call	0x4e6e	; 0x4e6e <__xload_2>
    1e58:	07 2e       	mov	r0, r23
    1e5a:	00 0c       	add	r0, r0
    1e5c:	88 0b       	sbc	r24, r24
    1e5e:	99 0b       	sbc	r25, r25
    1e60:	20 e1       	ldi	r18, 0x10	; 16
    1e62:	3e e0       	ldi	r19, 0x0E	; 14
    1e64:	40 e0       	ldi	r20, 0x00	; 0
    1e66:	50 e0       	ldi	r21, 0x00	; 0
    1e68:	0e 94 63 26 	call	0x4cc6	; 0x4cc6 <__mulsidi3>
    1e6c:	0e 94 0d 27 	call	0x4e1a	; 0x4e1a <__adddi3>
    1e70:	59 01       	movw	r10, r18
    1e72:	6a 01       	movw	r12, r20
    1e74:	7b 01       	movw	r14, r22
    1e76:	8c 01       	movw	r16, r24
    1e78:	a8 2d       	mov	r26, r8
    1e7a:	c3 01       	movw	r24, r6
    1e7c:	02 96       	adiw	r24, 0x02	; 2
    1e7e:	a1 1d       	adc	r26, r1
    1e80:	fc 01       	movw	r30, r24
    1e82:	5a 2f       	mov	r21, r26
    1e84:	0e 94 37 27 	call	0x4e6e	; 0x4e6e <__xload_2>
    1e88:	07 2e       	mov	r0, r23
    1e8a:	00 0c       	add	r0, r0
    1e8c:	88 0b       	sbc	r24, r24
    1e8e:	99 0b       	sbc	r25, r25
    1e90:	2c e3       	ldi	r18, 0x3C	; 60
    1e92:	30 e0       	ldi	r19, 0x00	; 0
    1e94:	40 e0       	ldi	r20, 0x00	; 0
    1e96:	50 e0       	ldi	r21, 0x00	; 0
    1e98:	0e 94 63 26 	call	0x4cc6	; 0x4cc6 <__mulsidi3>
    1e9c:	0e 94 0d 27 	call	0x4e1a	; 0x4e1a <__adddi3>
    1ea0:	59 01       	movw	r10, r18
    1ea2:	6a 01       	movw	r12, r20
    1ea4:	7b 01       	movw	r14, r22
    1ea6:	8c 01       	movw	r16, r24
    1ea8:	f3 01       	movw	r30, r6
    1eaa:	58 2d       	mov	r21, r8
    1eac:	0e 94 37 27 	call	0x4e6e	; 0x4e6e <__xload_2>
    1eb0:	9b 01       	movw	r18, r22
    1eb2:	93 2f       	mov	r25, r19
    1eb4:	99 0f       	add	r25, r25
    1eb6:	99 0b       	sbc	r25, r25
    1eb8:	49 2f       	mov	r20, r25
    1eba:	59 2f       	mov	r21, r25
    1ebc:	69 2f       	mov	r22, r25
    1ebe:	79 2f       	mov	r23, r25
    1ec0:	89 2f       	mov	r24, r25
    1ec2:	0e 94 0d 27 	call	0x4e1a	; 0x4e1a <__adddi3>
    1ec6:	25 96       	adiw	r28, 0x05	; 5
    1ec8:	e2 e1       	ldi	r30, 0x12	; 18
    1eca:	0c 94 09 23 	jmp	0x4612	; 0x4612 <__epilogue_restores__>

Disassembly of section .text.__year_to_secs:

00001468 <__year_to_secs>:
    1468:	ac e0       	ldi	r26, 0x0C	; 12
    146a:	b0 e0       	ldi	r27, 0x00	; 0
    146c:	ea e3       	ldi	r30, 0x3A	; 58
    146e:	fa e0       	ldi	r31, 0x0A	; 10
    1470:	0c 94 d2 22 	jmp	0x45a4	; 0x45a4 <__prologue_saves__>
    1474:	49 01       	movw	r8, r18
    1476:	5a 01       	movw	r10, r20
    1478:	6b 01       	movw	r12, r22
    147a:	7c 01       	movw	r14, r24
    147c:	1c 83       	std	Y+4, r17	; 0x04
    147e:	0b 83       	std	Y+3, r16	; 0x03
    1480:	2a 38       	cpi	r18, 0x8A	; 138
    1482:	31 05       	cpc	r19, r1
    1484:	41 05       	cpc	r20, r1
    1486:	51 05       	cpc	r21, r1
    1488:	61 05       	cpc	r22, r1
    148a:	71 05       	cpc	r23, r1
    148c:	81 05       	cpc	r24, r1
    148e:	91 05       	cpc	r25, r1
    1490:	11 f0       	breq	.+4      	; 0x1496 <__year_to_secs+0x2e>
    1492:	0c f0       	brlt	.+2      	; 0x1496 <__year_to_secs+0x2e>
    1494:	42 c0       	rjmp	.+132    	; 0x151a <__year_to_secs+0xb2>
    1496:	f9 01       	movw	r30, r18
    1498:	e4 54       	subi	r30, 0x44	; 68
    149a:	f1 09       	sbc	r31, r1
    149c:	f5 95       	asr	r31
    149e:	e7 95       	ror	r30
    14a0:	f5 95       	asr	r31
    14a2:	e7 95       	ror	r30
    14a4:	c9 01       	movw	r24, r18
    14a6:	83 70       	andi	r24, 0x03	; 3
    14a8:	99 27       	eor	r25, r25
    14aa:	89 2b       	or	r24, r25
    14ac:	51 f4       	brne	.+20     	; 0x14c2 <__year_to_secs+0x5a>
    14ae:	31 97       	sbiw	r30, 0x01	; 1
    14b0:	01 15       	cp	r16, r1
    14b2:	11 05       	cpc	r17, r1
    14b4:	69 f0       	breq	.+26     	; 0x14d0 <__year_to_secs+0x68>
    14b6:	81 e0       	ldi	r24, 0x01	; 1
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	d8 01       	movw	r26, r16
    14bc:	8d 93       	st	X+, r24
    14be:	9c 93       	st	X, r25
    14c0:	07 c0       	rjmp	.+14     	; 0x14d0 <__year_to_secs+0x68>
    14c2:	8b 81       	ldd	r24, Y+3	; 0x03
    14c4:	9c 81       	ldd	r25, Y+4	; 0x04
    14c6:	00 97       	sbiw	r24, 0x00	; 0
    14c8:	19 f0       	breq	.+6      	; 0x14d0 <__year_to_secs+0x68>
    14ca:	dc 01       	movw	r26, r24
    14cc:	1d 92       	st	X+, r1
    14ce:	1c 92       	st	X, r1
    14d0:	d9 01       	movw	r26, r18
    14d2:	a6 54       	subi	r26, 0x46	; 70
    14d4:	b1 09       	sbc	r27, r1
    14d6:	20 e8       	ldi	r18, 0x80	; 128
    14d8:	33 e3       	ldi	r19, 0x33	; 51
    14da:	41 ee       	ldi	r20, 0xE1	; 225
    14dc:	51 e0       	ldi	r21, 0x01	; 1
    14de:	0e 94 2f 27 	call	0x4e5e	; 0x4e5e <__mulshisi3>
    14e2:	6b 01       	movw	r12, r22
    14e4:	7c 01       	movw	r14, r24
    14e6:	df 01       	movw	r26, r30
    14e8:	20 e8       	ldi	r18, 0x80	; 128
    14ea:	31 e5       	ldi	r19, 0x51	; 81
    14ec:	41 e0       	ldi	r20, 0x01	; 1
    14ee:	50 e0       	ldi	r21, 0x00	; 0
    14f0:	0e 94 2f 27 	call	0x4e5e	; 0x4e5e <__mulshisi3>
    14f4:	dc 01       	movw	r26, r24
    14f6:	cb 01       	movw	r24, r22
    14f8:	8c 0d       	add	r24, r12
    14fa:	9d 1d       	adc	r25, r13
    14fc:	ae 1d       	adc	r26, r14
    14fe:	bf 1d       	adc	r27, r15
    1500:	9c 01       	movw	r18, r24
    1502:	ad 01       	movw	r20, r26
    1504:	6c 01       	movw	r12, r24
    1506:	7d 01       	movw	r14, r26
    1508:	ff 0c       	add	r15, r15
    150a:	cc 08       	sbc	r12, r12
    150c:	dc 2c       	mov	r13, r12
    150e:	76 01       	movw	r14, r12
    1510:	ac 2d       	mov	r26, r12
    1512:	fc 2d       	mov	r31, r12
    1514:	ec 2d       	mov	r30, r12
    1516:	9c 2d       	mov	r25, r12
    1518:	cb c0       	rjmp	.+406    	; 0x16b0 <__year_to_secs+0x248>
    151a:	eb 81       	ldd	r30, Y+3	; 0x03
    151c:	fc 81       	ldd	r31, Y+4	; 0x04
    151e:	ef 2b       	or	r30, r31
    1520:	31 f4       	brne	.+12     	; 0x152e <__year_to_secs+0xc6>
    1522:	1a 82       	std	Y+2, r1	; 0x02
    1524:	19 82       	std	Y+1, r1	; 0x01
    1526:	ce 01       	movw	r24, r28
    1528:	01 96       	adiw	r24, 0x01	; 1
    152a:	9c 83       	std	Y+4, r25	; 0x04
    152c:	8b 83       	std	Y+3, r24	; 0x03
    152e:	c4 01       	movw	r24, r8
    1530:	84 56       	subi	r24, 0x64	; 100
    1532:	91 09       	sbc	r25, r1
    1534:	60 e9       	ldi	r22, 0x90	; 144
    1536:	71 e0       	ldi	r23, 0x01	; 1
    1538:	0e 94 91 24 	call	0x4922	; 0x4922 <__divmodhi4>
    153c:	7e 83       	std	Y+6, r23	; 0x06
    153e:	6d 83       	std	Y+5, r22	; 0x05
    1540:	94 01       	movw	r18, r8
    1542:	a5 01       	movw	r20, r10
    1544:	b6 01       	movw	r22, r12
    1546:	c7 01       	movw	r24, r14
    1548:	ac e9       	ldi	r26, 0x9C	; 156
    154a:	0e 94 a5 26 	call	0x4d4a	; 0x4d4a <__adddi3_s8>
    154e:	19 01       	movw	r2, r18
    1550:	2a 01       	movw	r4, r20
    1552:	3b 01       	movw	r6, r22
    1554:	8f 83       	std	Y+7, r24	; 0x07
    1556:	98 87       	std	Y+8, r25	; 0x08
    1558:	70 e9       	ldi	r23, 0x90	; 144
    155a:	a7 2e       	mov	r10, r23
    155c:	bb 24       	eor	r11, r11
    155e:	b3 94       	inc	r11
    1560:	c1 2c       	mov	r12, r1
    1562:	d1 2c       	mov	r13, r1
    1564:	e1 2c       	mov	r14, r1
    1566:	f1 2c       	mov	r15, r1
    1568:	00 e0       	ldi	r16, 0x00	; 0
    156a:	10 e0       	ldi	r17, 0x00	; 0
    156c:	91 01       	movw	r18, r2
    156e:	a2 01       	movw	r20, r4
    1570:	b3 01       	movw	r22, r6
    1572:	0e 94 94 1f 	call	0x3f28	; 0x3f28 <__moddi3>
    1576:	c9 01       	movw	r24, r18
    1578:	00 97       	sbiw	r24, 0x00	; 0
    157a:	59 f4       	brne	.+22     	; 0x1592 <__year_to_secs+0x12a>
    157c:	81 e0       	ldi	r24, 0x01	; 1
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	ab 81       	ldd	r26, Y+3	; 0x03
    1582:	bc 81       	ldd	r27, Y+4	; 0x04
    1584:	8d 93       	st	X+, r24
    1586:	9c 93       	st	X, r25
    1588:	20 e0       	ldi	r18, 0x00	; 0
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	40 e0       	ldi	r20, 0x00	; 0
    158e:	50 e0       	ldi	r21, 0x00	; 0
    1590:	33 c0       	rjmp	.+102    	; 0x15f8 <__year_to_secs+0x190>
    1592:	28 3c       	cpi	r18, 0xC8	; 200
    1594:	31 05       	cpc	r19, r1
    1596:	6c f0       	brlt	.+26     	; 0x15b2 <__year_to_secs+0x14a>
    1598:	2c 32       	cpi	r18, 0x2C	; 44
    159a:	31 40       	sbci	r19, 0x01	; 1
    159c:	2c f0       	brlt	.+10     	; 0x15a8 <__year_to_secs+0x140>
    159e:	8c 52       	subi	r24, 0x2C	; 44
    15a0:	91 40       	sbci	r25, 0x01	; 1
    15a2:	43 e0       	ldi	r20, 0x03	; 3
    15a4:	50 e0       	ldi	r21, 0x00	; 0
    15a6:	0c c0       	rjmp	.+24     	; 0x15c0 <__year_to_secs+0x158>
    15a8:	88 5c       	subi	r24, 0xC8	; 200
    15aa:	91 09       	sbc	r25, r1
    15ac:	42 e0       	ldi	r20, 0x02	; 2
    15ae:	50 e0       	ldi	r21, 0x00	; 0
    15b0:	07 c0       	rjmp	.+14     	; 0x15c0 <__year_to_secs+0x158>
    15b2:	24 36       	cpi	r18, 0x64	; 100
    15b4:	31 05       	cpc	r19, r1
    15b6:	6c f0       	brlt	.+26     	; 0x15d2 <__year_to_secs+0x16a>
    15b8:	84 56       	subi	r24, 0x64	; 100
    15ba:	91 09       	sbc	r25, r1
    15bc:	41 e0       	ldi	r20, 0x01	; 1
    15be:	50 e0       	ldi	r21, 0x00	; 0
    15c0:	00 97       	sbiw	r24, 0x00	; 0
    15c2:	49 f4       	brne	.+18     	; 0x15d6 <__year_to_secs+0x16e>
    15c4:	eb 81       	ldd	r30, Y+3	; 0x03
    15c6:	fc 81       	ldd	r31, Y+4	; 0x04
    15c8:	11 82       	std	Z+1, r1	; 0x01
    15ca:	10 82       	st	Z, r1
    15cc:	20 e0       	ldi	r18, 0x00	; 0
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	13 c0       	rjmp	.+38     	; 0x15f8 <__year_to_secs+0x190>
    15d2:	40 e0       	ldi	r20, 0x00	; 0
    15d4:	50 e0       	ldi	r21, 0x00	; 0
    15d6:	9c 01       	movw	r18, r24
    15d8:	36 95       	lsr	r19
    15da:	27 95       	ror	r18
    15dc:	36 95       	lsr	r19
    15de:	27 95       	ror	r18
    15e0:	83 70       	andi	r24, 0x03	; 3
    15e2:	99 27       	eor	r25, r25
    15e4:	61 e0       	ldi	r22, 0x01	; 1
    15e6:	70 e0       	ldi	r23, 0x00	; 0
    15e8:	89 2b       	or	r24, r25
    15ea:	11 f0       	breq	.+4      	; 0x15f0 <__year_to_secs+0x188>
    15ec:	60 e0       	ldi	r22, 0x00	; 0
    15ee:	70 e0       	ldi	r23, 0x00	; 0
    15f0:	ab 81       	ldd	r26, Y+3	; 0x03
    15f2:	bc 81       	ldd	r27, Y+4	; 0x04
    15f4:	6d 93       	st	X+, r22
    15f6:	7c 93       	st	X, r23
    15f8:	81 e6       	ldi	r24, 0x61	; 97
    15fa:	ed 81       	ldd	r30, Y+5	; 0x05
    15fc:	fe 81       	ldd	r31, Y+6	; 0x06
    15fe:	8e 9f       	mul	r24, r30
    1600:	b0 01       	movw	r22, r0
    1602:	8f 9f       	mul	r24, r31
    1604:	70 0d       	add	r23, r0
    1606:	11 24       	eor	r1, r1
    1608:	e8 e1       	ldi	r30, 0x18	; 24
    160a:	e4 9f       	mul	r30, r20
    160c:	c0 01       	movw	r24, r0
    160e:	e5 9f       	mul	r30, r21
    1610:	90 0d       	add	r25, r0
    1612:	11 24       	eor	r1, r1
    1614:	86 0f       	add	r24, r22
    1616:	97 1f       	adc	r25, r23
    1618:	ab 81       	ldd	r26, Y+3	; 0x03
    161a:	bc 81       	ldd	r27, Y+4	; 0x04
    161c:	4d 91       	ld	r20, X+
    161e:	5c 91       	ld	r21, X
    1620:	84 1b       	sub	r24, r20
    1622:	95 0b       	sbc	r25, r21
    1624:	82 0f       	add	r24, r18
    1626:	93 1f       	adc	r25, r19
    1628:	e9 2f       	mov	r30, r25
    162a:	ee 0f       	add	r30, r30
    162c:	ee 0b       	sbc	r30, r30
    162e:	20 e8       	ldi	r18, 0x80	; 128
    1630:	a2 2e       	mov	r10, r18
    1632:	31 e5       	ldi	r19, 0x51	; 81
    1634:	b3 2e       	mov	r11, r19
    1636:	cc 24       	eor	r12, r12
    1638:	c3 94       	inc	r12
    163a:	d1 2c       	mov	r13, r1
    163c:	e1 2c       	mov	r14, r1
    163e:	f1 2c       	mov	r15, r1
    1640:	00 e0       	ldi	r16, 0x00	; 0
    1642:	10 e0       	ldi	r17, 0x00	; 0
    1644:	9c 01       	movw	r18, r24
    1646:	4e 2f       	mov	r20, r30
    1648:	5e 2f       	mov	r21, r30
    164a:	6e 2f       	mov	r22, r30
    164c:	7e 2f       	mov	r23, r30
    164e:	8e 2f       	mov	r24, r30
    1650:	9e 2f       	mov	r25, r30
    1652:	0e 94 a0 1a 	call	0x3540	; 0x3540 <__muldi3>
    1656:	92 2e       	mov	r9, r18
    1658:	83 2e       	mov	r8, r19
    165a:	4b 83       	std	Y+3, r20	; 0x03
    165c:	5d 83       	std	Y+5, r21	; 0x05
    165e:	69 87       	std	Y+9, r22	; 0x09
    1660:	7a 87       	std	Y+10, r23	; 0x0a
    1662:	8b 87       	std	Y+11, r24	; 0x0b
    1664:	9c 87       	std	Y+12, r25	; 0x0c
    1666:	43 e3       	ldi	r20, 0x33	; 51
    1668:	b4 2e       	mov	r11, r20
    166a:	51 ee       	ldi	r21, 0xE1	; 225
    166c:	c5 2e       	mov	r12, r21
    166e:	dd 24       	eor	r13, r13
    1670:	d3 94       	inc	r13
    1672:	91 01       	movw	r18, r2
    1674:	a2 01       	movw	r20, r4
    1676:	b3 01       	movw	r22, r6
    1678:	8f 81       	ldd	r24, Y+7	; 0x07
    167a:	98 85       	ldd	r25, Y+8	; 0x08
    167c:	0e 94 a0 1a 	call	0x3540	; 0x3540 <__muldi3>
    1680:	59 01       	movw	r10, r18
    1682:	6a 01       	movw	r12, r20
    1684:	7b 01       	movw	r14, r22
    1686:	8c 01       	movw	r16, r24
    1688:	29 2d       	mov	r18, r9
    168a:	38 2d       	mov	r19, r8
    168c:	4b 81       	ldd	r20, Y+3	; 0x03
    168e:	5d 81       	ldd	r21, Y+5	; 0x05
    1690:	69 85       	ldd	r22, Y+9	; 0x09
    1692:	7a 85       	ldd	r23, Y+10	; 0x0a
    1694:	8b 85       	ldd	r24, Y+11	; 0x0b
    1696:	9c 85       	ldd	r25, Y+12	; 0x0c
    1698:	0e 94 0d 27 	call	0x4e1a	; 0x4e1a <__adddi3>
    169c:	3b 56       	subi	r19, 0x6B	; 107
    169e:	41 49       	sbci	r20, 0x91	; 145
    16a0:	57 4c       	sbci	r21, 0xC7	; 199
    16a2:	6f 4f       	sbci	r22, 0xFF	; 255
    16a4:	7f 4f       	sbci	r23, 0xFF	; 255
    16a6:	8f 4f       	sbci	r24, 0xFF	; 255
    16a8:	9f 4f       	sbci	r25, 0xFF	; 255
    16aa:	a6 2f       	mov	r26, r22
    16ac:	f7 2f       	mov	r31, r23
    16ae:	e8 2f       	mov	r30, r24
    16b0:	6a 2f       	mov	r22, r26
    16b2:	7f 2f       	mov	r23, r31
    16b4:	8e 2f       	mov	r24, r30
    16b6:	2c 96       	adiw	r28, 0x0c	; 12
    16b8:	e2 e1       	ldi	r30, 0x12	; 18
    16ba:	0c 94 09 23 	jmp	0x4612	; 0x4612 <__epilogue_restores__>

Disassembly of section .text.__month_to_secs:

0000452e <__month_to_secs>:
    452e:	cf 93       	push	r28
    4530:	df 93       	push	r29
    4532:	9c 01       	movw	r18, r24
    4534:	eb 01       	movw	r28, r22
    4536:	88 0f       	add	r24, r24
    4538:	99 1f       	adc	r25, r25
    453a:	88 0f       	add	r24, r24
    453c:	99 1f       	adc	r25, r25
    453e:	09 2e       	mov	r0, r25
    4540:	00 0c       	add	r0, r0
    4542:	aa 0b       	sbc	r26, r26
    4544:	85 58       	subi	r24, 0x85	; 133
    4546:	9d 4f       	sbci	r25, 0xFD	; 253
    4548:	af 4f       	sbci	r26, 0xFF	; 255
    454a:	fc 01       	movw	r30, r24
    454c:	5a 2f       	mov	r21, r26
    454e:	0e 94 99 26 	call	0x4d32	; 0x4d32 <__xload_4>
    4552:	cd 2b       	or	r28, r29
    4554:	39 f0       	breq	.+14     	; 0x4564 <__month_to_secs+0x36>
    4556:	22 30       	cpi	r18, 0x02	; 2
    4558:	31 05       	cpc	r19, r1
    455a:	24 f0       	brlt	.+8      	; 0x4564 <__month_to_secs+0x36>
    455c:	60 58       	subi	r22, 0x80	; 128
    455e:	7e 4a       	sbci	r23, 0xAE	; 174
    4560:	8e 4f       	sbci	r24, 0xFE	; 254
    4562:	9f 4f       	sbci	r25, 0xFF	; 255
    4564:	df 91       	pop	r29
    4566:	cf 91       	pop	r28
    4568:	08 95       	ret

Disassembly of section .text.__secs_to_tm:

000003b8 <__secs_to_tm>:
 3b8:	a6 e1       	ldi	r26, 0x16	; 22
 3ba:	b0 e0       	ldi	r27, 0x00	; 0
 3bc:	e2 ee       	ldi	r30, 0xE2	; 226
 3be:	f1 e0       	ldi	r31, 0x01	; 1
 3c0:	0c 94 d2 22 	jmp	0x45a4	; 0x45a4 <__prologue_saves__>
 3c4:	79 01       	movw	r14, r18
 3c6:	d4 2e       	mov	r13, r20
 3c8:	c5 2e       	mov	r12, r21
 3ca:	b6 2f       	mov	r27, r22
 3cc:	a7 2f       	mov	r26, r23
 3ce:	f8 2f       	mov	r31, r24
 3d0:	b9 2e       	mov	r11, r25
 3d2:	40 58       	subi	r20, 0x80	; 128
 3d4:	5d 4b       	sbci	r21, 0xBD	; 189
 3d6:	6e 40       	sbci	r22, 0x0E	; 14
 3d8:	7f 4f       	sbci	r23, 0xFF	; 255
 3da:	8f 4f       	sbci	r24, 0xFF	; 255
 3dc:	9f 4f       	sbci	r25, 0xFF	; 255
 3de:	21 15       	cp	r18, r1
 3e0:	3b 47       	sbci	r19, 0x7B	; 123
 3e2:	4d 41       	sbci	r20, 0x1D	; 29
 3e4:	53 48       	sbci	r21, 0x83	; 131
 3e6:	62 4e       	sbci	r22, 0xE2	; 226
 3e8:	71 40       	sbci	r23, 0x01	; 1
 3ea:	81 05       	cpc	r24, r1
 3ec:	91 05       	cpc	r25, r1
 3ee:	11 f0       	breq	.+4      	; 0x3f4 <__secs_to_tm+0x3c>
 3f0:	08 f0       	brcs	.+2      	; 0x3f4 <__secs_to_tm+0x3c>
 3f2:	08 c2       	rjmp	.+1040   	; 0x804 <__EEPROM_REGION_LENGTH__+0x4>
 3f4:	18 8b       	std	Y+16, r17	; 0x10
 3f6:	0f 87       	std	Y+15, r16	; 0x0f
 3f8:	9b 2d       	mov	r25, r11
 3fa:	8f 2f       	mov	r24, r31
 3fc:	7a 2f       	mov	r23, r26
 3fe:	6b 2f       	mov	r22, r27
 400:	5c 2d       	mov	r21, r12
 402:	4d 2d       	mov	r20, r13
 404:	97 01       	movw	r18, r14
 406:	20 58       	subi	r18, 0x80	; 128
 408:	3d 45       	sbci	r19, 0x5D	; 93
 40a:	4c 4b       	sbci	r20, 0xBC	; 188
 40c:	58 43       	sbci	r21, 0x38	; 56
 40e:	61 09       	sbc	r22, r1
 410:	71 09       	sbc	r23, r1
 412:	81 09       	sbc	r24, r1
 414:	91 09       	sbc	r25, r1
 416:	19 01       	movw	r2, r18
 418:	4d 83       	std	Y+5, r20	; 0x05
 41a:	59 87       	std	Y+9, r21	; 0x09
 41c:	6d 87       	std	Y+13, r22	; 0x0d
 41e:	79 83       	std	Y+1, r23	; 0x01
 420:	89 8b       	std	Y+17, r24	; 0x11
 422:	9a 8b       	std	Y+18, r25	; 0x12
 424:	f0 e8       	ldi	r31, 0x80	; 128
 426:	af 2e       	mov	r10, r31
 428:	a1 e5       	ldi	r26, 0x51	; 81
 42a:	ba 2e       	mov	r11, r26
 42c:	cc 24       	eor	r12, r12
 42e:	c3 94       	inc	r12
 430:	d1 2c       	mov	r13, r1
 432:	e1 2c       	mov	r14, r1
 434:	f1 2c       	mov	r15, r1
 436:	00 e0       	ldi	r16, 0x00	; 0
 438:	10 e0       	ldi	r17, 0x00	; 0
 43a:	0e 94 96 1f 	call	0x3f2c	; 0x3f2c <__divdi3>
 43e:	29 01       	movw	r4, r18
 440:	3a 01       	movw	r6, r20
 442:	4b 01       	movw	r8, r22
 444:	8e 8b       	std	Y+22, r24	; 0x16
 446:	9b 8b       	std	Y+19, r25	; 0x13
 448:	91 01       	movw	r18, r2
 44a:	4d 81       	ldd	r20, Y+5	; 0x05
 44c:	59 85       	ldd	r21, Y+9	; 0x09
 44e:	6d 85       	ldd	r22, Y+13	; 0x0d
 450:	79 81       	ldd	r23, Y+1	; 0x01
 452:	89 89       	ldd	r24, Y+17	; 0x11
 454:	9a 89       	ldd	r25, Y+18	; 0x12
 456:	0e 94 94 1f 	call	0x3f28	; 0x3f28 <__moddi3>
 45a:	2d 83       	std	Y+5, r18	; 0x05
 45c:	3e 83       	std	Y+6, r19	; 0x06
 45e:	4f 83       	std	Y+7, r20	; 0x07
 460:	58 87       	std	Y+8, r21	; 0x08
 462:	8d 81       	ldd	r24, Y+5	; 0x05
 464:	9e 81       	ldd	r25, Y+6	; 0x06
 466:	af 81       	ldd	r26, Y+7	; 0x07
 468:	b8 85       	ldd	r27, Y+8	; 0x08
 46a:	b7 ff       	sbrs	r27, 7
 46c:	15 c0       	rjmp	.+42     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
 46e:	80 58       	subi	r24, 0x80	; 128
 470:	9e 4a       	sbci	r25, 0xAE	; 174
 472:	ae 4f       	sbci	r26, 0xFE	; 254
 474:	bf 4f       	sbci	r27, 0xFF	; 255
 476:	8d 83       	std	Y+5, r24	; 0x05
 478:	9e 83       	std	Y+6, r25	; 0x06
 47a:	af 83       	std	Y+7, r26	; 0x07
 47c:	b8 87       	std	Y+8, r27	; 0x08
 47e:	92 01       	movw	r18, r4
 480:	a3 01       	movw	r20, r6
 482:	b4 01       	movw	r22, r8
 484:	8e 89       	ldd	r24, Y+22	; 0x16
 486:	9b 89       	ldd	r25, Y+19	; 0x13
 488:	af ef       	ldi	r26, 0xFF	; 255
 48a:	0e 94 a5 26 	call	0x4d4a	; 0x4d4a <__adddi3_s8>
 48e:	29 01       	movw	r4, r18
 490:	3a 01       	movw	r6, r20
 492:	4b 01       	movw	r8, r22
 494:	8e 8b       	std	Y+22, r24	; 0x16
 496:	9b 8b       	std	Y+19, r25	; 0x13
 498:	92 01       	movw	r18, r4
 49a:	a3 01       	movw	r20, r6
 49c:	b4 01       	movw	r22, r8
 49e:	8e 89       	ldd	r24, Y+22	; 0x16
 4a0:	9b 89       	ldd	r25, Y+19	; 0x13
 4a2:	a3 e0       	ldi	r26, 0x03	; 3
 4a4:	0e 94 a5 26 	call	0x4d4a	; 0x4d4a <__adddi3_s8>
 4a8:	e7 e0       	ldi	r30, 0x07	; 7
 4aa:	ae 2e       	mov	r10, r30
 4ac:	b1 2c       	mov	r11, r1
 4ae:	c1 2c       	mov	r12, r1
 4b0:	d1 2c       	mov	r13, r1
 4b2:	e1 2c       	mov	r14, r1
 4b4:	f1 2c       	mov	r15, r1
 4b6:	00 e0       	ldi	r16, 0x00	; 0
 4b8:	10 e0       	ldi	r17, 0x00	; 0
 4ba:	0e 94 94 1f 	call	0x3f28	; 0x3f28 <__moddi3>
 4be:	2d 87       	std	Y+13, r18	; 0x0d
 4c0:	3e 87       	std	Y+14, r19	; 0x0e
 4c2:	ad 85       	ldd	r26, Y+13	; 0x0d
 4c4:	be 85       	ldd	r27, Y+14	; 0x0e
 4c6:	b7 ff       	sbrs	r27, 7
 4c8:	03 c0       	rjmp	.+6      	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
 4ca:	17 96       	adiw	r26, 0x07	; 7
 4cc:	be 87       	std	Y+14, r27	; 0x0e
 4ce:	ad 87       	std	Y+13, r26	; 0x0d
 4d0:	51 eb       	ldi	r21, 0xB1	; 177
 4d2:	a5 2e       	mov	r10, r21
 4d4:	6a e3       	ldi	r22, 0x3A	; 58
 4d6:	b6 2e       	mov	r11, r22
 4d8:	72 e0       	ldi	r23, 0x02	; 2
 4da:	c7 2e       	mov	r12, r23
 4dc:	d1 2c       	mov	r13, r1
 4de:	e1 2c       	mov	r14, r1
 4e0:	f1 2c       	mov	r15, r1
 4e2:	00 e0       	ldi	r16, 0x00	; 0
 4e4:	10 e0       	ldi	r17, 0x00	; 0
 4e6:	92 01       	movw	r18, r4
 4e8:	a3 01       	movw	r20, r6
 4ea:	b4 01       	movw	r22, r8
 4ec:	8e 89       	ldd	r24, Y+22	; 0x16
 4ee:	9b 89       	ldd	r25, Y+19	; 0x13
 4f0:	0e 94 96 1f 	call	0x3f2c	; 0x3f2c <__divdi3>
 4f4:	29 87       	std	Y+9, r18	; 0x09
 4f6:	3a 87       	std	Y+10, r19	; 0x0a
 4f8:	4b 87       	std	Y+11, r20	; 0x0b
 4fa:	5c 87       	std	Y+12, r21	; 0x0c
 4fc:	92 01       	movw	r18, r4
 4fe:	a3 01       	movw	r20, r6
 500:	b4 01       	movw	r22, r8
 502:	8e 89       	ldd	r24, Y+22	; 0x16
 504:	9b 89       	ldd	r25, Y+19	; 0x13
 506:	0e 94 94 1f 	call	0x3f28	; 0x3f28 <__moddi3>
 50a:	82 2e       	mov	r8, r18
 50c:	93 2e       	mov	r9, r19
 50e:	a4 2e       	mov	r10, r20
 510:	b5 2e       	mov	r11, r21
 512:	b7 fe       	sbrs	r11, 7
 514:	12 c0       	rjmp	.+36     	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
 516:	b1 eb       	ldi	r27, 0xB1	; 177
 518:	8b 0e       	add	r8, r27
 51a:	ba e3       	ldi	r27, 0x3A	; 58
 51c:	9b 1e       	adc	r9, r27
 51e:	b2 e0       	ldi	r27, 0x02	; 2
 520:	ab 1e       	adc	r10, r27
 522:	b1 1c       	adc	r11, r1
 524:	89 85       	ldd	r24, Y+9	; 0x09
 526:	9a 85       	ldd	r25, Y+10	; 0x0a
 528:	ab 85       	ldd	r26, Y+11	; 0x0b
 52a:	bc 85       	ldd	r27, Y+12	; 0x0c
 52c:	01 97       	sbiw	r24, 0x01	; 1
 52e:	a1 09       	sbc	r26, r1
 530:	b1 09       	sbc	r27, r1
 532:	89 87       	std	Y+9, r24	; 0x09
 534:	9a 87       	std	Y+10, r25	; 0x0a
 536:	ab 87       	std	Y+11, r26	; 0x0b
 538:	bc 87       	std	Y+12, r27	; 0x0c
 53a:	c5 01       	movw	r24, r10
 53c:	b4 01       	movw	r22, r8
 53e:	2c ea       	ldi	r18, 0xAC	; 172
 540:	3e e8       	ldi	r19, 0x8E	; 142
 542:	40 e0       	ldi	r20, 0x00	; 0
 544:	50 e0       	ldi	r21, 0x00	; 0
 546:	0e 94 bd 23 	call	0x477a	; 0x477a <__divmodsi4>
 54a:	69 01       	movw	r12, r18
 54c:	7a 01       	movw	r14, r20
 54e:	24 30       	cpi	r18, 0x04	; 4
 550:	31 05       	cpc	r19, r1
 552:	41 05       	cpc	r20, r1
 554:	51 05       	cpc	r21, r1
 556:	29 f4       	brne	.+10     	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
 558:	43 e0       	ldi	r20, 0x03	; 3
 55a:	c4 2e       	mov	r12, r20
 55c:	d1 2c       	mov	r13, r1
 55e:	e1 2c       	mov	r14, r1
 560:	f1 2c       	mov	r15, r1
 562:	a4 e5       	ldi	r26, 0x54	; 84
 564:	b1 e7       	ldi	r27, 0x71	; 113
 566:	a7 01       	movw	r20, r14
 568:	96 01       	movw	r18, r12
 56a:	0e 94 32 27 	call	0x4e64	; 0x4e64 <__mulohisi3>
 56e:	2b 01       	movw	r4, r22
 570:	3c 01       	movw	r6, r24
 572:	48 0c       	add	r4, r8
 574:	59 1c       	adc	r5, r9
 576:	6a 1c       	adc	r6, r10
 578:	7b 1c       	adc	r7, r11
 57a:	c3 01       	movw	r24, r6
 57c:	b2 01       	movw	r22, r4
 57e:	25 eb       	ldi	r18, 0xB5	; 181
 580:	35 e0       	ldi	r19, 0x05	; 5
 582:	40 e0       	ldi	r20, 0x00	; 0
 584:	50 e0       	ldi	r21, 0x00	; 0
 586:	0e 94 bd 23 	call	0x477a	; 0x477a <__divmodsi4>
 58a:	49 01       	movw	r8, r18
 58c:	5a 01       	movw	r10, r20
 58e:	29 31       	cpi	r18, 0x19	; 25
 590:	31 05       	cpc	r19, r1
 592:	41 05       	cpc	r20, r1
 594:	51 05       	cpc	r21, r1
 596:	29 f4       	brne	.+10     	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
 598:	38 e1       	ldi	r19, 0x18	; 24
 59a:	83 2e       	mov	r8, r19
 59c:	91 2c       	mov	r9, r1
 59e:	a1 2c       	mov	r10, r1
 5a0:	b1 2c       	mov	r11, r1
 5a2:	ab e4       	ldi	r26, 0x4B	; 75
 5a4:	ba ef       	ldi	r27, 0xFA	; 250
 5a6:	a5 01       	movw	r20, r10
 5a8:	94 01       	movw	r18, r8
 5aa:	0e 94 32 27 	call	0x4e64	; 0x4e64 <__mulohisi3>
 5ae:	46 0e       	add	r4, r22
 5b0:	57 1e       	adc	r5, r23
 5b2:	68 1e       	adc	r6, r24
 5b4:	79 1e       	adc	r7, r25
 5b6:	c3 01       	movw	r24, r6
 5b8:	b2 01       	movw	r22, r4
 5ba:	2d e6       	ldi	r18, 0x6D	; 109
 5bc:	31 e0       	ldi	r19, 0x01	; 1
 5be:	40 e0       	ldi	r20, 0x00	; 0
 5c0:	50 e0       	ldi	r21, 0x00	; 0
 5c2:	0e 94 bd 23 	call	0x477a	; 0x477a <__divmodsi4>
 5c6:	29 83       	std	Y+1, r18	; 0x01
 5c8:	3a 83       	std	Y+2, r19	; 0x02
 5ca:	4b 83       	std	Y+3, r20	; 0x03
 5cc:	5c 83       	std	Y+4, r21	; 0x04
 5ce:	24 30       	cpi	r18, 0x04	; 4
 5d0:	31 05       	cpc	r19, r1
 5d2:	41 05       	cpc	r20, r1
 5d4:	51 05       	cpc	r21, r1
 5d6:	41 f4       	brne	.+16     	; 0x5e8 <__LOCK_REGION_LENGTH__+0x1e8>
 5d8:	83 e0       	ldi	r24, 0x03	; 3
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	a0 e0       	ldi	r26, 0x00	; 0
 5de:	b0 e0       	ldi	r27, 0x00	; 0
 5e0:	89 83       	std	Y+1, r24	; 0x01
 5e2:	9a 83       	std	Y+2, r25	; 0x02
 5e4:	ab 83       	std	Y+3, r26	; 0x03
 5e6:	bc 83       	std	Y+4, r27	; 0x04
 5e8:	a3 e9       	ldi	r26, 0x93	; 147
 5ea:	be ef       	ldi	r27, 0xFE	; 254
 5ec:	29 81       	ldd	r18, Y+1	; 0x01
 5ee:	3a 81       	ldd	r19, Y+2	; 0x02
 5f0:	4b 81       	ldd	r20, Y+3	; 0x03
 5f2:	5c 81       	ldd	r21, Y+4	; 0x04
 5f4:	0e 94 32 27 	call	0x4e64	; 0x4e64 <__mulohisi3>
 5f8:	46 0e       	add	r4, r22
 5fa:	57 1e       	adc	r5, r23
 5fc:	68 1e       	adc	r6, r24
 5fe:	79 1e       	adc	r7, r25
 600:	23 2b       	or	r18, r19
 602:	24 2b       	or	r18, r20
 604:	25 2b       	or	r18, r21
 606:	81 f4       	brne	.+32     	; 0x628 <__LOCK_REGION_LENGTH__+0x228>
 608:	81 14       	cp	r8, r1
 60a:	91 04       	cpc	r9, r1
 60c:	a1 04       	cpc	r10, r1
 60e:	b1 04       	cpc	r11, r1
 610:	71 f4       	brne	.+28     	; 0x62e <__LOCK_REGION_LENGTH__+0x22e>
 612:	31 e0       	ldi	r19, 0x01	; 1
 614:	20 e0       	ldi	r18, 0x00	; 0
 616:	c1 14       	cp	r12, r1
 618:	d1 04       	cpc	r13, r1
 61a:	e1 04       	cpc	r14, r1
 61c:	f1 04       	cpc	r15, r1
 61e:	09 f0       	breq	.+2      	; 0x622 <__LOCK_REGION_LENGTH__+0x222>
 620:	30 e0       	ldi	r19, 0x00	; 0
 622:	83 2f       	mov	r24, r19
 624:	92 2f       	mov	r25, r18
 626:	05 c0       	rjmp	.+10     	; 0x632 <__LOCK_REGION_LENGTH__+0x232>
 628:	80 e0       	ldi	r24, 0x00	; 0
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	02 c0       	rjmp	.+4      	; 0x632 <__LOCK_REGION_LENGTH__+0x232>
 62e:	81 e0       	ldi	r24, 0x01	; 1
 630:	90 e0       	ldi	r25, 0x00	; 0
 632:	12 01       	movw	r2, r4
 634:	ab e3       	ldi	r26, 0x3B	; 59
 636:	2a 0e       	add	r2, r26
 638:	31 1c       	adc	r3, r1
 63a:	28 0e       	add	r2, r24
 63c:	39 1e       	adc	r3, r25
 63e:	9c 01       	movw	r18, r24
 640:	24 59       	subi	r18, 0x94	; 148
 642:	3e 4f       	sbci	r19, 0xFE	; 254
 644:	22 15       	cp	r18, r2
 646:	33 05       	cpc	r19, r3
 648:	24 f4       	brge	.+8      	; 0x652 <__LOCK_REGION_LENGTH__+0x252>
 64a:	83 59       	subi	r24, 0x93	; 147
 64c:	9e 4f       	sbci	r25, 0xFE	; 254
 64e:	28 1a       	sub	r2, r24
 650:	39 0a       	sbc	r3, r25
 652:	92 e0       	ldi	r25, 0x02	; 2
 654:	88 0c       	add	r8, r8
 656:	99 1c       	adc	r9, r9
 658:	aa 1c       	adc	r10, r10
 65a:	bb 1c       	adc	r11, r11
 65c:	9a 95       	dec	r25
 65e:	d1 f7       	brne	.-12     	; 0x654 <__LOCK_REGION_LENGTH__+0x254>
 660:	89 81       	ldd	r24, Y+1	; 0x01
 662:	9a 81       	ldd	r25, Y+2	; 0x02
 664:	ab 81       	ldd	r26, Y+3	; 0x03
 666:	bc 81       	ldd	r27, Y+4	; 0x04
 668:	88 0e       	add	r8, r24
 66a:	99 1e       	adc	r9, r25
 66c:	aa 1e       	adc	r10, r26
 66e:	bb 1e       	adc	r11, r27
 670:	a4 e6       	ldi	r26, 0x64	; 100
 672:	b0 e0       	ldi	r27, 0x00	; 0
 674:	a7 01       	movw	r20, r14
 676:	96 01       	movw	r18, r12
 678:	0e 94 d2 26 	call	0x4da4	; 0x4da4 <__muluhisi3>
 67c:	86 0e       	add	r8, r22
 67e:	97 1e       	adc	r9, r23
 680:	a8 1e       	adc	r10, r24
 682:	b9 1e       	adc	r11, r25
 684:	d5 01       	movw	r26, r10
 686:	c4 01       	movw	r24, r8
 688:	bb 0f       	add	r27, r27
 68a:	88 0b       	sbc	r24, r24
 68c:	98 2f       	mov	r25, r24
 68e:	dc 01       	movw	r26, r24
 690:	89 83       	std	Y+1, r24	; 0x01
 692:	9a 83       	std	Y+2, r25	; 0x02
 694:	ab 83       	std	Y+3, r26	; 0x03
 696:	bc 83       	std	Y+4, r27	; 0x04
 698:	69 85       	ldd	r22, Y+9	; 0x09
 69a:	7a 85       	ldd	r23, Y+10	; 0x0a
 69c:	8b 85       	ldd	r24, Y+11	; 0x0b
 69e:	9c 85       	ldd	r25, Y+12	; 0x0c
 6a0:	20 e9       	ldi	r18, 0x90	; 144
 6a2:	31 e0       	ldi	r19, 0x01	; 1
 6a4:	40 e0       	ldi	r20, 0x00	; 0
 6a6:	50 e0       	ldi	r21, 0x00	; 0
 6a8:	0e 94 63 26 	call	0x4cc6	; 0x4cc6 <__mulsidi3>
 6ac:	f2 2f       	mov	r31, r18
 6ae:	e3 2f       	mov	r30, r19
 6b0:	6a 01       	movw	r12, r20
 6b2:	7b 01       	movw	r14, r22
 6b4:	8c 01       	movw	r16, r24
 6b6:	94 01       	movw	r18, r8
 6b8:	a5 01       	movw	r20, r10
 6ba:	69 81       	ldd	r22, Y+1	; 0x01
 6bc:	76 2f       	mov	r23, r22
 6be:	86 2f       	mov	r24, r22
 6c0:	96 2f       	mov	r25, r22
 6c2:	af 2e       	mov	r10, r31
 6c4:	be 2e       	mov	r11, r30
 6c6:	0e 94 0d 27 	call	0x4e1a	; 0x4e1a <__adddi3>
 6ca:	49 01       	movw	r8, r18
 6cc:	5a 01       	movw	r10, r20
 6ce:	6b 01       	movw	r12, r22
 6d0:	7c 01       	movw	r14, r24
 6d2:	25 e3       	ldi	r18, 0x35	; 53
 6d4:	33 e0       	ldi	r19, 0x03	; 3
 6d6:	40 e0       	ldi	r20, 0x00	; 0
 6d8:	1a 82       	std	Y+2, r1	; 0x02
 6da:	19 82       	std	Y+1, r1	; 0x01
 6dc:	f9 01       	movw	r30, r18
 6de:	84 91       	lpm	r24, Z
 6e0:	47 fd       	sbrc	r20, 7
 6e2:	80 81       	ld	r24, Z
 6e4:	08 2e       	mov	r0, r24
 6e6:	00 0c       	add	r0, r0
 6e8:	99 0b       	sbc	r25, r25
 6ea:	aa 0b       	sbc	r26, r26
 6ec:	bb 0b       	sbc	r27, r27
 6ee:	2f 5f       	subi	r18, 0xFF	; 255
 6f0:	3f 4f       	sbci	r19, 0xFF	; 255
 6f2:	4f 4f       	sbci	r20, 0xFF	; 255
 6f4:	48 16       	cp	r4, r24
 6f6:	59 06       	cpc	r5, r25
 6f8:	6a 06       	cpc	r6, r26
 6fa:	7b 06       	cpc	r7, r27
 6fc:	54 f0       	brlt	.+20     	; 0x712 <__LOCK_REGION_LENGTH__+0x312>
 6fe:	48 1a       	sub	r4, r24
 700:	59 0a       	sbc	r5, r25
 702:	6a 0a       	sbc	r6, r26
 704:	7b 0a       	sbc	r7, r27
 706:	a9 81       	ldd	r26, Y+1	; 0x01
 708:	ba 81       	ldd	r27, Y+2	; 0x02
 70a:	11 96       	adiw	r26, 0x01	; 1
 70c:	ba 83       	std	Y+2, r27	; 0x02
 70e:	a9 83       	std	Y+1, r26	; 0x01
 710:	e5 cf       	rjmp	.-54     	; 0x6dc <__LOCK_REGION_LENGTH__+0x2dc>
 712:	e9 81       	ldd	r30, Y+1	; 0x01
 714:	fa 81       	ldd	r31, Y+2	; 0x02
 716:	ea 30       	cpi	r30, 0x0A	; 10
 718:	f1 05       	cpc	r31, r1
 71a:	74 f0       	brlt	.+28     	; 0x738 <__LOCK_REGION_LENGTH__+0x338>
 71c:	3c 97       	sbiw	r30, 0x0c	; 12
 71e:	fa 83       	std	Y+2, r31	; 0x02
 720:	e9 83       	std	Y+1, r30	; 0x01
 722:	94 01       	movw	r18, r8
 724:	a5 01       	movw	r20, r10
 726:	b6 01       	movw	r22, r12
 728:	c7 01       	movw	r24, r14
 72a:	a1 e0       	ldi	r26, 0x01	; 1
 72c:	0e 94 a5 26 	call	0x4d4a	; 0x4d4a <__adddi3_s8>
 730:	49 01       	movw	r8, r18
 732:	5a 01       	movw	r10, r20
 734:	6b 01       	movw	r12, r22
 736:	7c 01       	movw	r14, r24
 738:	94 01       	movw	r18, r8
 73a:	a5 01       	movw	r20, r10
 73c:	b6 01       	movw	r22, r12
 73e:	c7 01       	movw	r24, r14
 740:	2c 59       	subi	r18, 0x9C	; 156
 742:	3f 47       	sbci	r19, 0x7F	; 127
 744:	4f 4f       	sbci	r20, 0xFF	; 255
 746:	5f 4f       	sbci	r21, 0xFF	; 255
 748:	6f 4f       	sbci	r22, 0xFF	; 255
 74a:	7f 4f       	sbci	r23, 0xFF	; 255
 74c:	8f 4f       	sbci	r24, 0xFF	; 255
 74e:	9f 4f       	sbci	r25, 0xFF	; 255
 750:	2f 3f       	cpi	r18, 0xFF	; 255
 752:	3f 4f       	sbci	r19, 0xFF	; 255
 754:	41 05       	cpc	r20, r1
 756:	51 05       	cpc	r21, r1
 758:	61 05       	cpc	r22, r1
 75a:	71 05       	cpc	r23, r1
 75c:	81 05       	cpc	r24, r1
 75e:	91 05       	cpc	r25, r1
 760:	11 f0       	breq	.+4      	; 0x766 <__LOCK_REGION_LENGTH__+0x366>
 762:	08 f0       	brcs	.+2      	; 0x766 <__LOCK_REGION_LENGTH__+0x366>
 764:	4f c0       	rjmp	.+158    	; 0x804 <__EEPROM_REGION_LENGTH__+0x4>
 766:	24 e6       	ldi	r18, 0x64	; 100
 768:	82 0e       	add	r8, r18
 76a:	91 1c       	adc	r9, r1
 76c:	af 85       	ldd	r26, Y+15	; 0x0f
 76e:	b8 89       	ldd	r27, Y+16	; 0x10
 770:	1b 96       	adiw	r26, 0x0b	; 11
 772:	9c 92       	st	X, r9
 774:	8e 92       	st	-X, r8
 776:	1a 97       	sbiw	r26, 0x0a	; 10
 778:	e9 81       	ldd	r30, Y+1	; 0x01
 77a:	fa 81       	ldd	r31, Y+2	; 0x02
 77c:	32 96       	adiw	r30, 0x02	; 2
 77e:	19 96       	adiw	r26, 0x09	; 9
 780:	fc 93       	st	X, r31
 782:	ee 93       	st	-X, r30
 784:	18 97       	sbiw	r26, 0x08	; 8
 786:	ff ef       	ldi	r31, 0xFF	; 255
 788:	4f 1a       	sub	r4, r31
 78a:	5f 0a       	sbc	r5, r31
 78c:	17 96       	adiw	r26, 0x07	; 7
 78e:	5c 92       	st	X, r5
 790:	4e 92       	st	-X, r4
 792:	16 97       	sbiw	r26, 0x06	; 6
 794:	8d 85       	ldd	r24, Y+13	; 0x0d
 796:	9e 85       	ldd	r25, Y+14	; 0x0e
 798:	1d 96       	adiw	r26, 0x0d	; 13
 79a:	9c 93       	st	X, r25
 79c:	8e 93       	st	-X, r24
 79e:	1c 97       	sbiw	r26, 0x0c	; 12
 7a0:	1f 96       	adiw	r26, 0x0f	; 15
 7a2:	3c 92       	st	X, r3
 7a4:	2e 92       	st	-X, r2
 7a6:	1e 97       	sbiw	r26, 0x0e	; 14
 7a8:	6d 81       	ldd	r22, Y+5	; 0x05
 7aa:	7e 81       	ldd	r23, Y+6	; 0x06
 7ac:	8f 81       	ldd	r24, Y+7	; 0x07
 7ae:	98 85       	ldd	r25, Y+8	; 0x08
 7b0:	20 e1       	ldi	r18, 0x10	; 16
 7b2:	3e e0       	ldi	r19, 0x0E	; 14
 7b4:	40 e0       	ldi	r20, 0x00	; 0
 7b6:	50 e0       	ldi	r21, 0x00	; 0
 7b8:	0e 94 bd 23 	call	0x477a	; 0x477a <__divmodsi4>
 7bc:	af 85       	ldd	r26, Y+15	; 0x0f
 7be:	b8 89       	ldd	r27, Y+16	; 0x10
 7c0:	15 96       	adiw	r26, 0x05	; 5
 7c2:	3c 93       	st	X, r19
 7c4:	2e 93       	st	-X, r18
 7c6:	14 97       	sbiw	r26, 0x04	; 4
 7c8:	8c e3       	ldi	r24, 0x3C	; 60
 7ca:	c8 2e       	mov	r12, r24
 7cc:	d1 2c       	mov	r13, r1
 7ce:	e1 2c       	mov	r14, r1
 7d0:	f1 2c       	mov	r15, r1
 7d2:	6d 81       	ldd	r22, Y+5	; 0x05
 7d4:	7e 81       	ldd	r23, Y+6	; 0x06
 7d6:	8f 81       	ldd	r24, Y+7	; 0x07
 7d8:	98 85       	ldd	r25, Y+8	; 0x08
 7da:	a7 01       	movw	r20, r14
 7dc:	96 01       	movw	r18, r12
 7de:	0e 94 bd 23 	call	0x477a	; 0x477a <__divmodsi4>
 7e2:	4b 01       	movw	r8, r22
 7e4:	5c 01       	movw	r10, r24
 7e6:	ca 01       	movw	r24, r20
 7e8:	b9 01       	movw	r22, r18
 7ea:	a7 01       	movw	r20, r14
 7ec:	96 01       	movw	r18, r12
 7ee:	0e 94 bd 23 	call	0x477a	; 0x477a <__divmodsi4>
 7f2:	ef 85       	ldd	r30, Y+15	; 0x0f
 7f4:	f8 89       	ldd	r31, Y+16	; 0x10
 7f6:	73 83       	std	Z+3, r23	; 0x03
 7f8:	62 83       	std	Z+2, r22	; 0x02
 7fa:	91 82       	std	Z+1, r9	; 0x01
 7fc:	80 82       	st	Z, r8
 7fe:	80 e0       	ldi	r24, 0x00	; 0
 800:	90 e0       	ldi	r25, 0x00	; 0
 802:	02 c0       	rjmp	.+4      	; 0x808 <__EEPROM_REGION_LENGTH__+0x8>
 804:	8f ef       	ldi	r24, 0xFF	; 255
 806:	9f ef       	ldi	r25, 0xFF	; 255
 808:	66 96       	adiw	r28, 0x16	; 22
 80a:	e2 e1       	ldi	r30, 0x12	; 18
 80c:	0c 94 09 23 	jmp	0x4612	; 0x4612 <__epilogue_restores__>

Disassembly of section .text.libgcc.div:

00004922 <__divmodhi4>:
    4922:	97 fb       	bst	r25, 7
    4924:	07 2e       	mov	r0, r23
    4926:	16 f4       	brtc	.+4      	; 0x492c <__divmodhi4+0xa>
    4928:	00 94       	com	r0
    492a:	07 d0       	rcall	.+14     	; 0x493a <__divmodhi4_neg1>
    492c:	77 fd       	sbrc	r23, 7
    492e:	09 d0       	rcall	.+18     	; 0x4942 <__divmodhi4_neg2>
    4930:	0e 94 7d 24 	call	0x48fa	; 0x48fa <__udivmodhi4>
    4934:	07 fc       	sbrc	r0, 7
    4936:	05 d0       	rcall	.+10     	; 0x4942 <__divmodhi4_neg2>
    4938:	3e f4       	brtc	.+14     	; 0x4948 <__divmodhi4_exit>

0000493a <__divmodhi4_neg1>:
    493a:	90 95       	com	r25
    493c:	81 95       	neg	r24
    493e:	9f 4f       	sbci	r25, 0xFF	; 255
    4940:	08 95       	ret

00004942 <__divmodhi4_neg2>:
    4942:	70 95       	com	r23
    4944:	61 95       	neg	r22
    4946:	7f 4f       	sbci	r23, 0xFF	; 255

00004948 <__divmodhi4_exit>:
    4948:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00003540 <__muldi3>:
    3540:	df 93       	push	r29
    3542:	cf 93       	push	r28
    3544:	1f 93       	push	r17
    3546:	0f 93       	push	r16
    3548:	9a 9d       	mul	r25, r10
    354a:	f0 2d       	mov	r31, r0
    354c:	21 9f       	mul	r18, r17
    354e:	f0 0d       	add	r31, r0
    3550:	8b 9d       	mul	r24, r11
    3552:	f0 0d       	add	r31, r0
    3554:	8a 9d       	mul	r24, r10
    3556:	e0 2d       	mov	r30, r0
    3558:	f1 0d       	add	r31, r1
    355a:	03 9f       	mul	r16, r19
    355c:	f0 0d       	add	r31, r0
    355e:	02 9f       	mul	r16, r18
    3560:	e0 0d       	add	r30, r0
    3562:	f1 1d       	adc	r31, r1
    3564:	4e 9d       	mul	r20, r14
    3566:	e0 0d       	add	r30, r0
    3568:	f1 1d       	adc	r31, r1
    356a:	5e 9d       	mul	r21, r14
    356c:	f0 0d       	add	r31, r0
    356e:	4f 9d       	mul	r20, r15
    3570:	f0 0d       	add	r31, r0
    3572:	7f 93       	push	r23
    3574:	6f 93       	push	r22
    3576:	bf 92       	push	r11
    3578:	af 92       	push	r10
    357a:	5f 93       	push	r21
    357c:	4f 93       	push	r20
    357e:	d5 01       	movw	r26, r10
    3580:	0e 94 54 26 	call	0x4ca8	; 0x4ca8 <__umulhisi3>
    3584:	8b 01       	movw	r16, r22
    3586:	ac 01       	movw	r20, r24
    3588:	d7 01       	movw	r26, r14
    358a:	0e 94 54 26 	call	0x4ca8	; 0x4ca8 <__umulhisi3>
    358e:	eb 01       	movw	r28, r22
    3590:	e8 0f       	add	r30, r24
    3592:	f9 1f       	adc	r31, r25
    3594:	d6 01       	movw	r26, r12
    3596:	0e 94 04 27 	call	0x4e08	; 0x4e08 <__muldi3_6>
    359a:	2f 91       	pop	r18
    359c:	3f 91       	pop	r19
    359e:	d6 01       	movw	r26, r12
    35a0:	0e 94 54 26 	call	0x4ca8	; 0x4ca8 <__umulhisi3>
    35a4:	c6 0f       	add	r28, r22
    35a6:	d7 1f       	adc	r29, r23
    35a8:	e8 1f       	adc	r30, r24
    35aa:	f9 1f       	adc	r31, r25
    35ac:	af 91       	pop	r26
    35ae:	bf 91       	pop	r27
    35b0:	0e 94 04 27 	call	0x4e08	; 0x4e08 <__muldi3_6>
    35b4:	2f 91       	pop	r18
    35b6:	3f 91       	pop	r19
    35b8:	0e 94 54 26 	call	0x4ca8	; 0x4ca8 <__umulhisi3>
    35bc:	c6 0f       	add	r28, r22
    35be:	d7 1f       	adc	r29, r23
    35c0:	e8 1f       	adc	r30, r24
    35c2:	f9 1f       	adc	r31, r25
    35c4:	d6 01       	movw	r26, r12
    35c6:	0e 94 54 26 	call	0x4ca8	; 0x4ca8 <__umulhisi3>
    35ca:	e6 0f       	add	r30, r22
    35cc:	f7 1f       	adc	r31, r23
    35ce:	98 01       	movw	r18, r16
    35d0:	be 01       	movw	r22, r28
    35d2:	cf 01       	movw	r24, r30
    35d4:	11 24       	eor	r1, r1
    35d6:	0f 91       	pop	r16
    35d8:	1f 91       	pop	r17
    35da:	cf 91       	pop	r28
    35dc:	df 91       	pop	r29
    35de:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00004e08 <__muldi3_6>:
    4e08:	0e 94 54 26 	call	0x4ca8	; 0x4ca8 <__umulhisi3>
    4e0c:	46 0f       	add	r20, r22
    4e0e:	57 1f       	adc	r21, r23
    4e10:	c8 1f       	adc	r28, r24
    4e12:	d9 1f       	adc	r29, r25
    4e14:	08 f4       	brcc	.+2      	; 0x4e18 <__muldi3_6+0x10>
    4e16:	31 96       	adiw	r30, 0x01	; 1
    4e18:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00004cc6 <__mulsidi3>:
    4cc6:	97 fb       	bst	r25, 7
    4cc8:	57 ff       	sbrs	r21, 7
    4cca:	0c 94 d1 20 	jmp	0x41a2	; 0x41a2 <__umulsidi3_helper>
    4cce:	9f 93       	push	r25
    4cd0:	8f 93       	push	r24
    4cd2:	0e 94 d1 20 	call	0x41a2	; 0x41a2 <__umulsidi3_helper>
    4cd6:	6e 1b       	sub	r22, r30
    4cd8:	7f 0b       	sbc	r23, r31
    4cda:	af 91       	pop	r26
    4cdc:	bf 91       	pop	r27
    4cde:	8a 0b       	sbc	r24, r26
    4ce0:	9b 0b       	sbc	r25, r27
    4ce2:	08 95       	ret

Disassembly of section .text.libgcc.mul:

000041a0 <__umulsidi3>:
    41a0:	e8 94       	clt

000041a2 <__umulsidi3_helper>:
    41a2:	df 93       	push	r29
    41a4:	cf 93       	push	r28
    41a6:	fc 01       	movw	r30, r24
    41a8:	db 01       	movw	r26, r22
    41aa:	0e 94 54 26 	call	0x4ca8	; 0x4ca8 <__umulhisi3>
    41ae:	7f 93       	push	r23
    41b0:	6f 93       	push	r22
    41b2:	e9 01       	movw	r28, r18
    41b4:	9a 01       	movw	r18, r20
    41b6:	ac 01       	movw	r20, r24
    41b8:	bf 93       	push	r27
    41ba:	af 93       	push	r26
    41bc:	3f 93       	push	r19
    41be:	2f 93       	push	r18
    41c0:	df 01       	movw	r26, r30
    41c2:	0e 94 54 26 	call	0x4ca8	; 0x4ca8 <__umulhisi3>
    41c6:	26 f4       	brtc	.+8      	; 0x41d0 <__umulsidi3_helper+0x2e>
    41c8:	6c 1b       	sub	r22, r28
    41ca:	7d 0b       	sbc	r23, r29
    41cc:	82 0b       	sbc	r24, r18
    41ce:	93 0b       	sbc	r25, r19
    41d0:	9e 01       	movw	r18, r28
    41d2:	eb 01       	movw	r28, r22
    41d4:	fc 01       	movw	r30, r24
    41d6:	0e 94 04 27 	call	0x4e08	; 0x4e08 <__muldi3_6>
    41da:	af 91       	pop	r26
    41dc:	bf 91       	pop	r27
    41de:	2f 91       	pop	r18
    41e0:	3f 91       	pop	r19
    41e2:	0e 94 04 27 	call	0x4e08	; 0x4e08 <__muldi3_6>
    41e6:	be 01       	movw	r22, r28
    41e8:	cf 01       	movw	r24, r30
    41ea:	f9 01       	movw	r30, r18
    41ec:	2f 91       	pop	r18
    41ee:	3f 91       	pop	r19
    41f0:	cf 91       	pop	r28
    41f2:	df 91       	pop	r29
    41f4:	08 95       	ret

Disassembly of section .text.libgcc.div:

00003f28 <__moddi3>:
    3f28:	68 94       	set
    3f2a:	01 c0       	rjmp	.+2      	; 0x3f2e <__divdi3_moddi3>

00003f2c <__divdi3>:
    3f2c:	e8 94       	clt

00003f2e <__divdi3_moddi3>:
    3f2e:	f9 2f       	mov	r31, r25
    3f30:	f1 2b       	or	r31, r17
    3f32:	12 f0       	brmi	.+4      	; 0x3f38 <__divdi3_moddi3+0xa>
    3f34:	0c 94 75 26 	jmp	0x4cea	; 0x4cea <__udivdi3_umoddi3>
    3f38:	a0 e0       	ldi	r26, 0x00	; 0
    3f3a:	b0 e0       	ldi	r27, 0x00	; 0
    3f3c:	e2 ea       	ldi	r30, 0xA2	; 162
    3f3e:	ff e1       	ldi	r31, 0x1F	; 31
    3f40:	0c 94 d8 22 	jmp	0x45b0	; 0x45b0 <__prologue_saves__+0xc>
    3f44:	09 2e       	mov	r0, r25
    3f46:	05 94       	asr	r0
    3f48:	22 f4       	brpl	.+8      	; 0x3f52 <__divdi3_moddi3+0x24>
    3f4a:	0e 94 44 26 	call	0x4c88	; 0x4c88 <__negdi2>
    3f4e:	11 23       	and	r17, r17
    3f50:	92 f4       	brpl	.+36     	; 0x3f76 <__divdi3_moddi3+0x48>
    3f52:	f0 e8       	ldi	r31, 0x80	; 128
    3f54:	0f 26       	eor	r0, r31
    3f56:	ff ef       	ldi	r31, 0xFF	; 255
    3f58:	e0 94       	com	r14
    3f5a:	f0 94       	com	r15
    3f5c:	00 95       	com	r16
    3f5e:	10 95       	com	r17
    3f60:	b0 94       	com	r11
    3f62:	c0 94       	com	r12
    3f64:	d0 94       	com	r13
    3f66:	a1 94       	neg	r10
    3f68:	bf 0a       	sbc	r11, r31
    3f6a:	cf 0a       	sbc	r12, r31
    3f6c:	df 0a       	sbc	r13, r31
    3f6e:	ef 0a       	sbc	r14, r31
    3f70:	ff 0a       	sbc	r15, r31
    3f72:	0f 0b       	sbc	r16, r31
    3f74:	1f 0b       	sbc	r17, r31
    3f76:	0e 94 4f 1a 	call	0x349e	; 0x349e <__udivmod64>
    3f7a:	07 fc       	sbrc	r0, 7
    3f7c:	0e 94 44 26 	call	0x4c88	; 0x4c88 <__negdi2>
    3f80:	cd b7       	in	r28, 0x3d	; 61
    3f82:	de b7       	in	r29, 0x3e	; 62
    3f84:	ec e0       	ldi	r30, 0x0C	; 12
    3f86:	0c 94 0f 23 	jmp	0x461e	; 0x461e <__epilogue_restores__+0xc>

Disassembly of section .text.libgcc.div:

00004ce4 <__umoddi3>:
    4ce4:	68 94       	set
    4ce6:	01 c0       	rjmp	.+2      	; 0x4cea <__udivdi3_umoddi3>

00004ce8 <__udivdi3>:
    4ce8:	e8 94       	clt

00004cea <__udivdi3_umoddi3>:
    4cea:	8f 92       	push	r8
    4cec:	9f 92       	push	r9
    4cee:	cf 93       	push	r28
    4cf0:	df 93       	push	r29
    4cf2:	0e 94 4f 1a 	call	0x349e	; 0x349e <__udivmod64>
    4cf6:	df 91       	pop	r29
    4cf8:	cf 91       	pop	r28
    4cfa:	9f 90       	pop	r9
    4cfc:	8f 90       	pop	r8
    4cfe:	08 95       	ret

Disassembly of section .text.libgcc.div:

0000349e <__udivmod64>:
    349e:	88 24       	eor	r8, r8
    34a0:	99 24       	eor	r9, r9
    34a2:	f4 01       	movw	r30, r8
    34a4:	e4 01       	movw	r28, r8
    34a6:	b0 e4       	ldi	r27, 0x40	; 64
    34a8:	9f 93       	push	r25
    34aa:	aa 27       	eor	r26, r26
    34ac:	9a 15       	cp	r25, r10
    34ae:	8b 04       	cpc	r8, r11
    34b0:	9c 04       	cpc	r9, r12
    34b2:	ed 05       	cpc	r30, r13
    34b4:	fe 05       	cpc	r31, r14
    34b6:	cf 05       	cpc	r28, r15
    34b8:	d0 07       	cpc	r29, r16
    34ba:	a1 07       	cpc	r26, r17
    34bc:	98 f4       	brcc	.+38     	; 0x34e4 <__udivmod64+0x46>
    34be:	ad 2f       	mov	r26, r29
    34c0:	dc 2f       	mov	r29, r28
    34c2:	cf 2f       	mov	r28, r31
    34c4:	fe 2f       	mov	r31, r30
    34c6:	e9 2d       	mov	r30, r9
    34c8:	98 2c       	mov	r9, r8
    34ca:	89 2e       	mov	r8, r25
    34cc:	98 2f       	mov	r25, r24
    34ce:	87 2f       	mov	r24, r23
    34d0:	76 2f       	mov	r23, r22
    34d2:	65 2f       	mov	r22, r21
    34d4:	54 2f       	mov	r21, r20
    34d6:	43 2f       	mov	r20, r19
    34d8:	32 2f       	mov	r19, r18
    34da:	22 27       	eor	r18, r18
    34dc:	b8 50       	subi	r27, 0x08	; 8
    34de:	31 f7       	brne	.-52     	; 0x34ac <__udivmod64+0xe>
    34e0:	bf 91       	pop	r27
    34e2:	27 c0       	rjmp	.+78     	; 0x3532 <__udivmod64+0x94>
    34e4:	1b 2e       	mov	r1, r27
    34e6:	bf 91       	pop	r27
    34e8:	bb 27       	eor	r27, r27
    34ea:	22 0f       	add	r18, r18
    34ec:	33 1f       	adc	r19, r19
    34ee:	44 1f       	adc	r20, r20
    34f0:	55 1f       	adc	r21, r21
    34f2:	66 1f       	adc	r22, r22
    34f4:	77 1f       	adc	r23, r23
    34f6:	88 1f       	adc	r24, r24
    34f8:	99 1f       	adc	r25, r25
    34fa:	88 1c       	adc	r8, r8
    34fc:	99 1c       	adc	r9, r9
    34fe:	ee 1f       	adc	r30, r30
    3500:	ff 1f       	adc	r31, r31
    3502:	cc 1f       	adc	r28, r28
    3504:	dd 1f       	adc	r29, r29
    3506:	aa 1f       	adc	r26, r26
    3508:	bb 1f       	adc	r27, r27
    350a:	8a 14       	cp	r8, r10
    350c:	9b 04       	cpc	r9, r11
    350e:	ec 05       	cpc	r30, r12
    3510:	fd 05       	cpc	r31, r13
    3512:	ce 05       	cpc	r28, r14
    3514:	df 05       	cpc	r29, r15
    3516:	a0 07       	cpc	r26, r16
    3518:	b1 07       	cpc	r27, r17
    351a:	48 f0       	brcs	.+18     	; 0x352e <__udivmod64+0x90>
    351c:	8a 18       	sub	r8, r10
    351e:	9b 08       	sbc	r9, r11
    3520:	ec 09       	sbc	r30, r12
    3522:	fd 09       	sbc	r31, r13
    3524:	ce 09       	sbc	r28, r14
    3526:	df 09       	sbc	r29, r15
    3528:	a0 0b       	sbc	r26, r16
    352a:	b1 0b       	sbc	r27, r17
    352c:	21 60       	ori	r18, 0x01	; 1
    352e:	1a 94       	dec	r1
    3530:	e1 f6       	brne	.-72     	; 0x34ea <__udivmod64+0x4c>
    3532:	2e f4       	brtc	.+10     	; 0x353e <__udivmod64+0xa0>
    3534:	94 01       	movw	r18, r8
    3536:	af 01       	movw	r20, r30
    3538:	be 01       	movw	r22, r28
    353a:	cd 01       	movw	r24, r26
    353c:	00 0c       	add	r0, r0
    353e:	08 95       	ret

Disassembly of section .text.libgcc:

00004c88 <__negdi2>:
    4c88:	60 95       	com	r22
    4c8a:	70 95       	com	r23
    4c8c:	80 95       	com	r24
    4c8e:	90 95       	com	r25
    4c90:	30 95       	com	r19
    4c92:	40 95       	com	r20
    4c94:	50 95       	com	r21
    4c96:	21 95       	neg	r18
    4c98:	3f 4f       	sbci	r19, 0xFF	; 255
    4c9a:	4f 4f       	sbci	r20, 0xFF	; 255
    4c9c:	5f 4f       	sbci	r21, 0xFF	; 255
    4c9e:	6f 4f       	sbci	r22, 0xFF	; 255
    4ca0:	7f 4f       	sbci	r23, 0xFF	; 255
    4ca2:	8f 4f       	sbci	r24, 0xFF	; 255
    4ca4:	9f 4f       	sbci	r25, 0xFF	; 255
    4ca6:	08 95       	ret

Disassembly of section .text.libgcc.prologue:

000045a4 <__prologue_saves__>:
    45a4:	2f 92       	push	r2
    45a6:	3f 92       	push	r3
    45a8:	4f 92       	push	r4
    45aa:	5f 92       	push	r5
    45ac:	6f 92       	push	r6
    45ae:	7f 92       	push	r7
    45b0:	8f 92       	push	r8
    45b2:	9f 92       	push	r9
    45b4:	af 92       	push	r10
    45b6:	bf 92       	push	r11
    45b8:	cf 92       	push	r12
    45ba:	df 92       	push	r13
    45bc:	ef 92       	push	r14
    45be:	ff 92       	push	r15
    45c0:	0f 93       	push	r16
    45c2:	1f 93       	push	r17
    45c4:	cf 93       	push	r28
    45c6:	df 93       	push	r29
    45c8:	cd b7       	in	r28, 0x3d	; 61
    45ca:	de b7       	in	r29, 0x3e	; 62
    45cc:	ca 1b       	sub	r28, r26
    45ce:	db 0b       	sbc	r29, r27
    45d0:	0f b6       	in	r0, 0x3f	; 63
    45d2:	f8 94       	cli
    45d4:	de bf       	out	0x3e, r29	; 62
    45d6:	0f be       	out	0x3f, r0	; 63
    45d8:	cd bf       	out	0x3d, r28	; 61
    45da:	09 94       	ijmp

Disassembly of section .text.libgcc.prologue:

00004612 <__epilogue_restores__>:
    4612:	2a 88       	ldd	r2, Y+18	; 0x12
    4614:	39 88       	ldd	r3, Y+17	; 0x11
    4616:	48 88       	ldd	r4, Y+16	; 0x10
    4618:	5f 84       	ldd	r5, Y+15	; 0x0f
    461a:	6e 84       	ldd	r6, Y+14	; 0x0e
    461c:	7d 84       	ldd	r7, Y+13	; 0x0d
    461e:	8c 84       	ldd	r8, Y+12	; 0x0c
    4620:	9b 84       	ldd	r9, Y+11	; 0x0b
    4622:	aa 84       	ldd	r10, Y+10	; 0x0a
    4624:	b9 84       	ldd	r11, Y+9	; 0x09
    4626:	c8 84       	ldd	r12, Y+8	; 0x08
    4628:	df 80       	ldd	r13, Y+7	; 0x07
    462a:	ee 80       	ldd	r14, Y+6	; 0x06
    462c:	fd 80       	ldd	r15, Y+5	; 0x05
    462e:	0c 81       	ldd	r16, Y+4	; 0x04
    4630:	1b 81       	ldd	r17, Y+3	; 0x03
    4632:	aa 81       	ldd	r26, Y+2	; 0x02
    4634:	b9 81       	ldd	r27, Y+1	; 0x01
    4636:	ce 0f       	add	r28, r30
    4638:	d1 1d       	adc	r29, r1
    463a:	0f b6       	in	r0, 0x3f	; 63
    463c:	f8 94       	cli
    463e:	de bf       	out	0x3e, r29	; 62
    4640:	0f be       	out	0x3f, r0	; 63
    4642:	cd bf       	out	0x3d, r28	; 61
    4644:	ed 01       	movw	r28, r26
    4646:	08 95       	ret

Disassembly of section .text.libgcc:

00004e1a <__adddi3>:
    4e1a:	2a 0d       	add	r18, r10
    4e1c:	3b 1d       	adc	r19, r11
    4e1e:	4c 1d       	adc	r20, r12
    4e20:	5d 1d       	adc	r21, r13
    4e22:	6e 1d       	adc	r22, r14
    4e24:	7f 1d       	adc	r23, r15
    4e26:	80 1f       	adc	r24, r16
    4e28:	91 1f       	adc	r25, r17
    4e2a:	08 95       	ret

Disassembly of section .text.libgcc:

00004e2c <__cmpdi2>:
    4e2c:	2a 15       	cp	r18, r10
    4e2e:	3b 05       	cpc	r19, r11
    4e30:	4c 05       	cpc	r20, r12
    4e32:	5d 05       	cpc	r21, r13
    4e34:	6e 05       	cpc	r22, r14
    4e36:	7f 05       	cpc	r23, r15
    4e38:	80 07       	cpc	r24, r16
    4e3a:	91 07       	cpc	r25, r17
    4e3c:	08 95       	ret
