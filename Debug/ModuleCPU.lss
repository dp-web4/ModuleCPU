
ModuleCPU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00004f60  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000da  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00004f60  2**0
                  ALLOC
  3 .noinit       0000022a  00800102  00800102  00004f60  2**2
                  ALLOC
  4 .comment      0000002f  00000000  00000000  00004f60  2**0
                  CONTENTS, READONLY
  5 .stack.descriptors.hdr 00000142  00000000  00000000  00004f8f  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000500  00000000  00000000  000050d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00008e56  00000000  00000000  000055d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001ab6  00000000  00000000  0000e427  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000385c  00000000  00000000  0000fedd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001220  00000000  00000000  0001373c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000006e4  00000000  00000000  0001495c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000482d  00000000  00000000  00015040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000004e0  00000000  00000000  0001986d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .text         00000004  00004e9c  00004e9c  00004f50  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00019d50  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .text.__vector_27 000000bc  000031c8  000031c8  0000327c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.ADCSetPowerOn 0000000c  00004e56  00004e56  00004f0a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.ADCStartConversion 0000002a  000047f8  000047f8  000048ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .progmemx.data 0000000b  00000341  00000341  000003f5  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 20 .text.ADCInit 0000013c  0000230e  0000230e  000023c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .progmemx.data.sg_sMuxSelectList 0000000f  0000031a  0000031a  000003ce  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 22 .bss.sg_eCurrentType 00000001  0080094f  0080094f  00004f60  2**0
                  ALLOC
 23 .bss.sg_eState 00000001  00800964  00800964  00004f60  2**0
                  ALLOC
 24 .text.CANLookupCommand 00000062  00003ec2  00003ec2  00003f76  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .progmemx.data 0000000b  0000034c  0000034c  00000400  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 26 .text.CANMOBSet 00000212  00001afa  00001afa  00001bae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.CANSendMessageInternal 00000178  00001eca  00001eca  00001f7e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.CANMOBInterrupt 00000166  00002042  00002042  000020f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.__vector_18 00000118  0000257e  0000257e  00002632  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.CANSendMessage 00000016  00004d02  00004d02  00004db6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.CANSetRXCallback 0000000a  00004e6e  00004e6e  00004f22  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.CANInit 0000009c  000035dc  000035dc  00003690  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .progmemx.data.sg_sRXCommandList 00000021  000002d5  000002d5  00000389  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 34 .progmemx.data.sg_sMOBModuleRequestTime 00000008  00000357  00000357  0000040b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 35 .progmemx.data.sg_sMOBModuleHardwareDetail 00000008  0000035f  0000035f  00000413  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 36 .progmemx.data.sg_sMOBModuleCellDetail 00000008  00000367  00000367  0000041b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 37 .progmemx.data.sg_sMOBModuleCellCommStat2 00000008  0000036f  0000036f  00000423  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 38 .progmemx.data.sg_sMOBModuleCellCommStat1 00000008  00000377  00000377  0000042b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 39 .progmemx.data.sg_sMOBModuleStatus3 00000008  0000037f  0000037f  00000433  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 40 .progmemx.data.sg_sMOBModuleStatus2 00000008  00000387  00000387  0000043b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 41 .progmemx.data.sg_sMOBModuleStatus1 00000008  0000038f  0000038f  00000443  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 42 .progmemx.data.sg_sMOBModuleAnnouncement 00000008  00000397  00000397  0000044b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 43 .progmemx.data.sg_sMOBGenericReceive 00000008  0000039f  0000039f  00000453  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 44 .progmemx.data.sg_sMOBDisabled 00000008  000003a7  000003a7  0000045b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 45 .bss.sg_bInRetransmit 00000001  00800965  00800965  00004f60  2**0
                  ALLOC
 46 .bss.sg_u8LastTXDataLen 00000001  00800966  00800966  00004f60  2**0
                  ALLOC
 47 .bss.sg_u8LastTXData 00000008  0080093d  0080093d  00004f60  2**0
                  ALLOC
 48 .bss.sg_eLastTXType 00000001  00800967  00800967  00004f60  2**0
                  ALLOC
 49 .bss.sg_u8TransmitAttempts 00000001  00800968  00800968  00004f60  2**0
                  ALLOC
 50 .bss.sg_pfRXCallback 00000002  0080094d  0080094d  00004f60  2**0
                  ALLOC
 51 .bss.sg_bBusy 00000001  00800969  00800969  00004f60  2**0
                  ALLOC
 52 .text.DebugOut 0000000e  00004e1e  00004e1e  00004ed2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 53 .text.EEPROMRead 00000012  00004d84  00004d84  00004e38  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 .text.I2CBitDelay 0000000e  00004e2c  00004e2c  00004ee0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.I2CStart 0000002c  00004748  00004748  000047fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.I2CStop 00000026  000048ea  000048ea  0000499e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .text.I2CUnstick 0000003c  00004492  00004492  00004546  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .text.I2CTxByte 0000006a  00003d8a  00003d8a  00003e3e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 .text.I2CRxByte 0000007a  00003c2a  00003c2a  00003cde  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 60 .text.I2CSetup 0000002c  00004774  00004774  00004828  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 61 .text.I2CStartTransaction 00000028  00004822  00004822  000048d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 62 .text.CellCountExpectedSet 000000c4  00003042  00003042  000030f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 63 .text.SendModuleControllerStatus 00000010  00004dde  00004dde  00004e92  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 64 .text.ModuleControllerStateSet 0000000a  00004e78  00004e78  00004f2c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .text.ModuleControllerStateSetMax 00000016  00004d18  00004d18  00004dcc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 66 .text.Check5VLoss 00000018  00004cba  00004cba  00004d6e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 67 .text.CellDataConvertVoltage 0000005e  00003f86  00003f86  0000403a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 68 .text.CellDataConvertTemperature 00000064  00003e5e  00003e5e  00003f12  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 69 .text.ModuleCurrentConvertReadings 00000104  00002696  00002696  0000274a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 70 .text.__vector_1 00000024  00004936  00004936  000049ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 71 .text.__vector_2 00000024  0000495a  0000495a  00004a0e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 72 .text.__vector_3 00000024  0000497e  0000497e  00004a32  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 73 .text.__vector_4 00000024  000049a2  000049a2  00004a56  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 74 .text.__vector_5 00000024  000049c6  000049c6  00004a7a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 75 .text.__vector_6 00000024  000049ea  000049ea  00004a9e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 76 .text.__vector_22 00000024  00004a0e  00004a0e  00004ac2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 77 .text.__vector_9 00000024  00004a32  00004a32  00004ae6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 78 .text.__vector_11 00000024  00004a56  00004a56  00004b0a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 79 .text.__vector_13 00000024  00004a7a  00004a7a  00004b2e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 80 .text.__vector_14 00000024  00004a9e  00004a9e  00004b52  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 81 .text.__vector_17 00000024  00004ac2  00004ac2  00004b76  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 82 .text.__vector_19 00000024  00004ae6  00004ae6  00004b9a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 83 .text.__vector_21 00000024  00004b0a  00004b0a  00004bbe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 84 .text.__vector_25 00000024  00004b2e  00004b2e  00004be2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 85 .text.__vector_26 00000024  00004b52  00004b52  00004c06  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 86 .text.__vector_29 00000024  00004b76  00004b76  00004c2a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 87 .text.__vector_30 00000024  00004b9a  00004b9a  00004c4e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 88 .text.CurrentThresholdsGet 00000094  00003678  00003678  0000372c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 89 .progmemx.data 000001a1  000000da  000000da  0000018e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 90 .text.CANReceiveCallback 00000298  000011cc  000011cc  00001280  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 91 .text.ControllerStatusMessagesSend 00000422  00000810  00000810  000008c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 92 .text.CellStringProcess 000002a6  00000f26  00000f26  00000fda  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 93 .text.Delay   00000052  0000423e  0000423e  000042f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 94 .text.PlatformAssert 0000002c  000047a0  000047a0  00004854  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 95 .text.ModuleControllerStateHandle 0000021e  000018dc  000018dc  00001990  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 96 .text.PlatformGetRegistrationID 00000006  00004e96  00004e96  00004f4a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 97 .text.SetSysclock 0000000c  00004e62  00004e62  00004f16  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 98 .text.ModuleControllerGetUniqueID 0000007e  00003a36  00003a36  00003aea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 99 .text.TimerInit 00000052  00004290  00004290  00004344  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
100 .text.__vector_12 000000ba  00003284  00003284  00003338  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
101 .text.WatchdogReset 00000002  00004ea4  00004ea4  00004f58  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
102 .text.WatchdogOff 0000001a  00004ca0  00004ca0  00004d54  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
103 .text.__vector_28 00000052  000042e2  000042e2  00004396  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
104 .text.__vector_23 0000008a  0000370c  0000370c  000037c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
105 .text.__vector_24 0000004c  00004334  00004334  000043e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
106 .text.vUARTRXStart 00000016  00004d2e  00004d2e  00004de2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
107 .text.vUARTRXEnd 00000024  00004bbe  00004bbe  00004c72  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
108 .text.vUARTRXData 0000007a  00003ca4  00003ca4  00003d58  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
109 .text.PlatformGetSendData 00000028  0000484a  0000484a  000048fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
110 .text.ADCCallback 00000026  00004910  00004910  000049c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
111 .text.FrameInit 000000cc  00002de6  00002de6  00002e9a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
112 .text.CellStringPowerStateMachine 00000088  00003820  00003820  000038d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
113 .text.main    000002f4  00000c32  00000c32  00000ce6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
114 .bss.sg_u8PCMSK1 00000001  0080096a  0080096a  00004f60  2**0
                  ALLOC
115 .bss.sg_u8PCMSK0 00000001  0080096b  0080096b  00004f60  2**0
                  ALLOC
116 .bss.sg_u8UnhandledInterruptVector 00000001  0080096c  0080096c  00004f60  2**0
                  ALLOC
117 .bss.sg_u8Reason 00000001  0080096d  0080096d  00004f60  2**0
                  ALLOC
118 .progmemx.data.sg_u8FractionalLookup 00000010  0000030a  0000030a  000003be  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
119 .bss.sg_u8ControllerStatusMsgCount 00000001  0080096e  0080096e  00004f60  2**0
                  ALLOC
120 .bss.sg_u8CellReports 00000001  0080096f  0080096f  00004f60  2**0
                  ALLOC
121 .bss.sg_u16BytesReceived 00000002  0080095c  0080095c  00004f60  2**0
                  ALLOC
122 .bss.sg_u8CellBufferTemp 00000004  00800950  00800950  00004f60  2**2
                  ALLOC
123 .bss.sg_u8CellBufferRX 00000001  00800970  00800970  00004f60  2**0
                  ALLOC
124 .bss.sg_u8CellIndex 00000001  00800971  00800971  00004f60  2**0
                  ALLOC
125 .bss.sg_u8TicksSinceLastPackControllerMessage 00000001  00800972  00800972  00004f60  2**0
                  ALLOC
126 .bss.sg_u8CellStringPowerTimer 00000001  00800973  00800973  00004f60  2**0
                  ALLOC
127 .bss.sg_bFrameStart 00000001  00800974  00800974  00004f60  2**0
                  ALLOC
128 .bss.sg_u8CellFrameTimer 00000001  00800975  00800975  00004f60  2**0
                  ALLOC
129 .bss.sg_bIgnoreStatusRequests 00000001  00800976  00800976  00004f60  2**0
                  ALLOC
130 .bss.sg_u8AnnouncementDelayTicks 00000001  00800977  00800977  00004f60  2**0
                  ALLOC
131 .bss.sg_bAnnouncementPending 00000001  00800978  00800978  00004f60  2**0
                  ALLOC
132 .bss.sg_u8CurrentBufferIndex 00000001  00800979  00800979  00004f60  2**0
                  ALLOC
133 .bss.sg_sCurrenBuffer 00000010  0080091d  0080091d  00004f60  2**0
                  ALLOC
134 .text.IsLeapYear 00000034  000045e8  000045e8  0000469c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
135 .text.RTCStartTransaction 00000044  000043cc  000043cc  00004480  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
136 .text.StructTMToHW 00000054  00004196  00004196  0000424a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
137 .text.HWToStructTM 0000007c  00003b32  00003b32  00003be6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
138 .text.__vector_10 00000086  000038a8  000038a8  0000395c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
139 .progmemx.data 00000014  000002f6  000002f6  000003aa  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
140 .text.RTCReadRegisters 0000007e  00003ab4  00003ab4  00003b68  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
141 .text.RTCReadHW 000000e2  00002a74  00002a74  00002b28  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
142 .text.RTCWriteRegisters 0000006a  00003df4  00003df4  00003ea8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
143 .text.RTCWriteHW 000000fe  0000279a  0000279a  0000284e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
144 .text.RTCSetTime 000000c6  00002f7c  00002f7c  00003030  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
145 .text.RTCInit 00000222  000016ba  000016ba  0000176e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
146 .progmemx.data.sg_u8DaysInMonths 0000000c  00000329  00000329  000003dd  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
147 .bss.sg_u64Time 00000008  00800945  00800945  00004f60  2**0
                  ALLOC
148 .text.SDSetCS 00000014  00004d70  00004d70  00004e24  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
149 .text.SDPowerup 0000003a  0000450a  0000450a  000045be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
150 .text.SDCommand 000000aa  000033f0  000033f0  000034a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
151 .text.SDGoIdle 00000022  00004c06  00004c06  00004cba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
152 .text.SDSendOpCondition 00000034  0000461c  0000461c  000046d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
153 .text.SDSendOpConditionArg 00000056  00004094  00004094  00004148  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
154 .text.SDWaitResponse7 0000000e  00004e3a  00004e3a  00004eee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
155 .text.SDSendInterfaceCondition 00000034  00004650  00004650  00004704  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
156 .text.SDReadOCR 00000032  00004684  00004684  00004738  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
157 .text.SDReadCSD 0000007c  00003bae  00003bae  00003c62  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
158 .text.SDReceiveDataBlock 0000008a  00003796  00003796  0000384a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
159 .text.SDTransmitDataBlock 000000c2  00003106  00003106  000031ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
160 .text.SDInit  00000166  000021a8  000021a8  0000225c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
161 .text.SDRead  000000d8  00002d0e  00002d0e  00002dc2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
162 .text.SDWrite 000000dc  00002b56  00002b56  00002c0a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
163 .bss.sg_u8CSD 00000010  0080092d  0080092d  00004f60  2**0
                  ALLOC
164 .bss.sg_u16BlockSize 00000002  0080095e  0080095e  00004f60  2**0
                  ALLOC
165 .bss.sg_u32SDSectorCount 00000004  00800954  00800954  00004f60  2**0
                  ALLOC
166 .text.SPITransaction 00000058  00003fe4  00003fe4  00004098  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
167 .text.SPISetBaudRate 000000ca  00002eb2  00002eb2  00002f66  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
168 .text.SPIInit 0000002c  000047cc  000047cc  00004880  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
169 .progmemx.data.sg_sSPIBaudRates 0000002a  000002ab  000002ab  0000035f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
170 .text.readGlobalState 0000003e  00004454  00004454  00004508  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
171 .text.writeGlobalState 00000032  000046b6  000046b6  0000476a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
172 .text.updateSessionMap 000000dc  00002c32  00002c32  00002ce6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
173 .text.STORE_Init 00000082  000039b4  000039b4  00003a68  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
174 .text.STORE_WriteFrame 000000f8  00002898  00002898  0000294c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
175 .text.STORE_StartNewSession 00000054  000041ea  000041ea  0000429e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
176 .text.STORE_EndSession 00000058  0000403c  0000403c  000040f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
177 .bss.frameBuffer 00000400  0080032c  0080032c  00004f60  2**2
                  ALLOC
178 .bss.currentSector 00000004  00800958  00800958  00004f60  2**0
                  ALLOC
179 .bss.gState   000001d8  0080072c  0080072c  00004f60  2**2
                  ALLOC
180 .text.vUARTtxDataAvailable 00000024  00004be2  00004be2  00004c96  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
181 .text.vUARTtxDataGet 0000004c  00004380  00004380  00004434  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
182 .text.vUARTRXReset 0000000a  00004e82  00004e82  00004f36  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
183 .text.vUARTStarttx 00000056  000040ea  000040ea  0000419e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
184 .text.__vector_8 000000b2  0000333e  0000333e  000033f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
185 .text.__vector_16 000000e4  00002990  00002990  00002a44  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
186 .text.__vector_15 00000134  0000244a  0000244a  000024fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
187 .text.vUARTInit 00000036  0000457c  0000457c  00004630  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
188 .text.vUARTInitReceive 00000028  00004872  00004872  00004926  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
189 .bss.sg_bState 00000001  0080097a  0080097a  00004f60  2**0
                  ALLOC
190 .bss.sg_u8SendData 00000002  00800960  00800960  00004f60  2**0
                  ALLOC
191 .bss.sg_u8SendIndex 00000001  0080097b  0080097b  00004f60  2**0
                  ALLOC
192 .bss.sg_edgeCorrections 00000002  00800962  00800962  00004f60  2**0
                  ALLOC
193 .bss.sg_maxTimingError 00000001  0080097c  0080097c  00004f60  2**0
                  ALLOC
194 .bss.sg_minTimingError 00000001  0080097d  0080097d  00004f60  2**0
                  ALLOC
195 .bss.sg_bMCTxNextBit 00000001  0080097e  0080097e  00004f60  2**0
                  ALLOC
196 .bss.sg_bCellReportsReuested 00000001  0080097f  0080097f  00004f60  2**0
                  ALLOC
197 .bss.sg_etxState 00000001  00800980  00800980  00004f60  2**0
                  ALLOC
198 .bss.sg_btxMoreAvailable 00000001  00800981  00800981  00004f60  2**0
                  ALLOC
199 .bss.sg_u8txDataByte 00000001  00800982  00800982  00004f60  2**0
                  ALLOC
200 .bss.sg_u8txBitCount 00000001  00800983  00800983  00004f60  2**0
                  ALLOC
201 .bss.sg_bCell_mc_rxMoreData 00000001  00800984  00800984  00004f60  2**0
                  ALLOC
202 .bss.sg_bCell_mc_rxPriorState 00000001  00800985  00800985  00004f60  2**0
                  ALLOC
203 .bss.sg_eCell_mc_rxState 00000001  00800986  00800986  00004f60  2**0
                  ALLOC
204 .bss.sg_u8rxDataByte 00000001  00800987  00800987  00004f60  2**0
                  ALLOC
205 .bss.sg_u8Cell_mc_rxBitCount 00000001  00800988  00800988  00004f60  2**0
                  ALLOC
206 .text.libgcc.div 00000028  0000489a  0000489a  0000494e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
207 .text.libgcc.div 00000044  00004410  00004410  000044c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
208 .text.libgcc.div 0000002e  0000471a  0000471a  000047ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
209 .text.libgcc.div 00000010  00004dee  00004dee  00004ea2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
210 .text.libgcc.mul 0000001e  00004c48  00004c48  00004cfc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
211 .text.libgcc.mul 0000000e  00004e48  00004e48  00004efc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
212 .text.libgcc.mul 00000016  00004d44  00004d44  00004df8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
213 .text.libgcc.mul 00000010  00004dfe  00004dfe  00004eb2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
214 .text.libgcc  00000010  00004e0e  00004e0e  00004ec2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
215 .text.libgcc  00000018  00004cd2  00004cd2  00004d86  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
216 .text.libgcc  00000018  00004cea  00004cea  00004d9e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
217 .text.__dummy_fini 00000002  00004ea6  00004ea6  00004f5a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
218 .text.__dummy_funcs_on_exit 00000002  00004ea8  00004ea8  00004f5c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
219 .text.__dummy_simulator_exit 00000002  00004eaa  00004eaa  00004f5e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
220 .text.exit    00000016  00004d5a  00004d5a  00004e0e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
221 .text.memcpy  00000032  000046e8  000046e8  0000479c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
222 .text.memset  00000012  00004d96  00004d96  00004e4a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
223 .text.gmtime  0000000a  00004e8c  00004e8c  00004f40  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
224 .bss.tm.1240  00000019  00800904  00800904  00004f60  2**0
                  ALLOC
225 .progmemx.data 00000004  000003af  000003af  00000463  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
226 .text.__gmtime_r 0000006c  00003d1e  00003d1e  00003dd2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
227 .progmemx.data 00000004  000003b3  000003b3  00000467  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
228 .text.mktime  00000086  0000392e  0000392e  000039e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
229 .text._Exit   00000004  00004ea0  00004ea0  00004f54  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
230 .text.__tm_to_secs 000001be  00001d0c  00001d0c  00001dc0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
231 .text.__year_to_secs 00000256  00001464  00001464  00001518  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
232 .text.__month_to_secs 0000003c  000044ce  000044ce  00004582  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
233 .progmemx.data.secs_through_month.1090 00000030  0000027b  0000027b  0000032f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
234 .text.__secs_to_tm 00000458  000003b8  000003b8  0000046c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
235 .progmemx.data.days_in_month.1250 0000000c  00000335  00000335  000003e9  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
236 .text.libgcc.div 00000028  000048c2  000048c2  00004976  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
237 .text.libgcc.mul 000000a0  0000353c  0000353c  000035f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
238 .text.libgcc.mul 00000012  00004da8  00004da8  00004e5c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
239 .text.libgcc.mul 0000001e  00004c66  00004c66  00004d1a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
240 .text.libgcc.mul 00000056  00004140  00004140  000041f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
241 .text.libgcc.div 00000062  00003f24  00003f24  00003fd8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
242 .text.libgcc.div 0000001c  00004c84  00004c84  00004d38  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
243 .text.libgcc.div 000000a2  0000349a  0000349a  0000354e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
244 .text.libgcc  00000020  00004c28  00004c28  00004cdc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
245 .text.libgcc.prologue 00000038  00004544  00004544  000045f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
246 .text.libgcc.prologue 00000036  000045b2  000045b2  00004666  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
247 .text.libgcc  00000012  00004dba  00004dba  00004e6e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
248 .text.libgcc  00000012  00004dcc  00004dcc  00004e80  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 43 00 	jmp	0x86	; 0x86 <__ctors_end>
   4:	0c 94 9b 24 	jmp	0x4936	; 0x4936 <__vector_1>
   8:	0c 94 ad 24 	jmp	0x495a	; 0x495a <__vector_2>
   c:	0c 94 bf 24 	jmp	0x497e	; 0x497e <__vector_3>
  10:	0c 94 d1 24 	jmp	0x49a2	; 0x49a2 <__vector_4>
  14:	0c 94 e3 24 	jmp	0x49c6	; 0x49c6 <__vector_5>
  18:	0c 94 f5 24 	jmp	0x49ea	; 0x49ea <__vector_6>
  1c:	0c 94 4e 27 	jmp	0x4e9c	; 0x4e9c <__bad_interrupt>
  20:	0c 94 9f 19 	jmp	0x333e	; 0x333e <__vector_8>
  24:	0c 94 19 25 	jmp	0x4a32	; 0x4a32 <__vector_9>
  28:	0c 94 54 1c 	jmp	0x38a8	; 0x38a8 <__vector_10>
  2c:	0c 94 2b 25 	jmp	0x4a56	; 0x4a56 <__vector_11>
  30:	0c 94 42 19 	jmp	0x3284	; 0x3284 <__vector_12>
  34:	0c 94 3d 25 	jmp	0x4a7a	; 0x4a7a <__vector_13>
  38:	0c 94 4f 25 	jmp	0x4a9e	; 0x4a9e <__vector_14>
  3c:	0c 94 25 12 	jmp	0x244a	; 0x244a <__vector_15>
  40:	0c 94 c8 14 	jmp	0x2990	; 0x2990 <__vector_16>
  44:	0c 94 61 25 	jmp	0x4ac2	; 0x4ac2 <__vector_17>
  48:	0c 94 bf 12 	jmp	0x257e	; 0x257e <__vector_18>
  4c:	0c 94 73 25 	jmp	0x4ae6	; 0x4ae6 <__vector_19>
  50:	0c 94 4e 27 	jmp	0x4e9c	; 0x4e9c <__bad_interrupt>
  54:	0c 94 85 25 	jmp	0x4b0a	; 0x4b0a <__vector_21>
  58:	0c 94 07 25 	jmp	0x4a0e	; 0x4a0e <__vector_22>
  5c:	0c 94 86 1b 	jmp	0x370c	; 0x370c <__vector_23>
  60:	0c 94 9a 21 	jmp	0x4334	; 0x4334 <__vector_24>
  64:	0c 94 97 25 	jmp	0x4b2e	; 0x4b2e <__vector_25>
  68:	0c 94 a9 25 	jmp	0x4b52	; 0x4b52 <__vector_26>
  6c:	0c 94 e4 18 	jmp	0x31c8	; 0x31c8 <__vector_27>
  70:	0c 94 71 21 	jmp	0x42e2	; 0x42e2 <__vector_28>
  74:	0c 94 bb 25 	jmp	0x4b76	; 0x4b76 <__vector_29>
  78:	0c 94 cd 25 	jmp	0x4b9a	; 0x4b9a <__vector_30>

0000007c <.dinit>:
  7c:	01 00       	.word	0x0001	; ????
  7e:	01 02       	muls	r16, r17
  80:	80 01       	movw	r16, r0
  82:	04 09       	sbc	r16, r4
  84:	89 80       	ldd	r8, Y+1	; 0x01

00000086 <__ctors_end>:
  86:	11 24       	eor	r1, r1
  88:	1f be       	out	0x3f, r1	; 63
  8a:	cf ef       	ldi	r28, 0xFF	; 255
  8c:	d0 e1       	ldi	r29, 0x10	; 16
  8e:	de bf       	out	0x3e, r29	; 62
  90:	cd bf       	out	0x3d, r28	; 61

00000092 <__do_copy_data>:
  92:	ec e7       	ldi	r30, 0x7C	; 124
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	40 e0       	ldi	r20, 0x00	; 0
  98:	17 c0       	rjmp	.+46     	; 0xc8 <__do_clear_bss+0x8>
  9a:	b5 91       	lpm	r27, Z+
  9c:	a5 91       	lpm	r26, Z+
  9e:	35 91       	lpm	r19, Z+
  a0:	25 91       	lpm	r18, Z+
  a2:	05 91       	lpm	r16, Z+
  a4:	07 fd       	sbrc	r16, 7
  a6:	0c c0       	rjmp	.+24     	; 0xc0 <__do_clear_bss>
  a8:	95 91       	lpm	r25, Z+
  aa:	85 91       	lpm	r24, Z+
  ac:	ef 01       	movw	r28, r30
  ae:	f9 2f       	mov	r31, r25
  b0:	e8 2f       	mov	r30, r24
  b2:	05 90       	lpm	r0, Z+
  b4:	0d 92       	st	X+, r0
  b6:	a2 17       	cp	r26, r18
  b8:	b3 07       	cpc	r27, r19
  ba:	d9 f7       	brne	.-10     	; 0xb2 <__do_copy_data+0x20>
  bc:	fe 01       	movw	r30, r28
  be:	04 c0       	rjmp	.+8      	; 0xc8 <__do_clear_bss+0x8>

000000c0 <__do_clear_bss>:
  c0:	1d 92       	st	X+, r1
  c2:	a2 17       	cp	r26, r18
  c4:	b3 07       	cpc	r27, r19
  c6:	e1 f7       	brne	.-8      	; 0xc0 <__do_clear_bss>
  c8:	e6 38       	cpi	r30, 0x86	; 134
  ca:	f4 07       	cpc	r31, r20
  cc:	31 f7       	brne	.-52     	; 0x9a <__do_copy_data+0x8>
  ce:	0e 94 19 06 	call	0xc32	; 0xc32 <main>
  d2:	0c 94 ad 26 	jmp	0x4d5a	; 0x4d5a <exit>

000000d6 <_exit>:
  d6:	f8 94       	cli

000000d8 <__stop_program>:
  d8:	ff cf       	rjmp	.-2      	; 0xd8 <__stop_program>

Disassembly of section .text:

00004e9c <__bad_interrupt>:
    4e9c:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.__vector_27:

000031c8 <__vector_27>:

	// Disable the conversion complete interrupt
	ADCSRA &= (uint8_t)~(1 << ADIE);

	// Clear any pending interrupt	
	ADCSRA |= (1 << ADIF);
    31c8:	78 94       	sei
    31ca:	1f 92       	push	r1
    31cc:	0f 92       	push	r0
    31ce:	0f b6       	in	r0, 0x3f	; 63
    31d0:	0f 92       	push	r0
    31d2:	11 24       	eor	r1, r1
    31d4:	2f 93       	push	r18
    31d6:	3f 93       	push	r19
    31d8:	4f 93       	push	r20
    31da:	5f 93       	push	r21
    31dc:	6f 93       	push	r22
    31de:	7f 93       	push	r23
    31e0:	8f 93       	push	r24
    31e2:	9f 93       	push	r25
    31e4:	af 93       	push	r26
    31e6:	bf 93       	push	r27
    31e8:	ef 93       	push	r30
    31ea:	ff 93       	push	r31
    31ec:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f0078>
    31f0:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f0079>
    31f4:	80 91 4f 09 	lds	r24, 0x094F	; 0x80094f <sg_eCurrentType>
    31f8:	91 e0       	ldi	r25, 0x01	; 1
    31fa:	98 0f       	add	r25, r24
    31fc:	90 93 4f 09 	sts	0x094F, r25	; 0x80094f <sg_eCurrentType>
    3200:	95 30       	cpi	r25, 0x05	; 5
    3202:	10 f0       	brcs	.+4      	; 0x3208 <__vector_27+0x40>
    3204:	10 92 4f 09 	sts	0x094F, r1	; 0x80094f <sg_eCurrentType>
    3208:	ac e7       	ldi	r26, 0x7C	; 124
    320a:	b0 e0       	ldi	r27, 0x00	; 0
    320c:	5c 91       	ld	r21, X
    320e:	20 91 4f 09 	lds	r18, 0x094F	; 0x80094f <sg_eCurrentType>
    3212:	30 e0       	ldi	r19, 0x00	; 0
    3214:	f9 01       	movw	r30, r18
    3216:	ee 0f       	add	r30, r30
    3218:	ff 1f       	adc	r31, r31
    321a:	2e 0f       	add	r18, r30
    321c:	3f 1f       	adc	r19, r31
    321e:	03 2e       	mov	r0, r19
    3220:	00 0c       	add	r0, r0
    3222:	44 0b       	sbc	r20, r20
    3224:	26 5e       	subi	r18, 0xE6	; 230
    3226:	3c 4f       	sbci	r19, 0xFC	; 252
    3228:	4f 4f       	sbci	r20, 0xFF	; 255
    322a:	f9 01       	movw	r30, r18
    322c:	94 91       	lpm	r25, Z
    322e:	47 fd       	sbrc	r20, 7
    3230:	90 81       	ld	r25, Z
    3232:	50 7e       	andi	r21, 0xE0	; 224
    3234:	95 2b       	or	r25, r21
    3236:	90 6c       	ori	r25, 0xC0	; 192
    3238:	9c 93       	st	X, r25
    323a:	0e 94 88 24 	call	0x4910	; 0x4910 <ADCCallback>
    323e:	80 91 4f 09 	lds	r24, 0x094F	; 0x80094f <sg_eCurrentType>
    3242:	81 11       	cpse	r24, r1
    3244:	09 c0       	rjmp	.+18     	; 0x3258 <__vector_27+0x90>
    3246:	ea e7       	ldi	r30, 0x7A	; 122
    3248:	f0 e0       	ldi	r31, 0x00	; 0
    324a:	80 81       	ld	r24, Z
    324c:	87 7f       	andi	r24, 0xF7	; 247
    324e:	80 83       	st	Z, r24
    3250:	81 e0       	ldi	r24, 0x01	; 1
    3252:	80 93 64 09 	sts	0x0964, r24	; 0x800964 <sg_eState>
    3256:	05 c0       	rjmp	.+10     	; 0x3262 <__vector_27+0x9a>
    3258:	ea e7       	ldi	r30, 0x7A	; 122
    325a:	f0 e0       	ldi	r31, 0x00	; 0
    325c:	80 81       	ld	r24, Z
    325e:	88 64       	ori	r24, 0x48	; 72
    3260:	80 83       	st	Z, r24
    3262:	ff 91       	pop	r31
    3264:	ef 91       	pop	r30
    3266:	bf 91       	pop	r27
    3268:	af 91       	pop	r26
    326a:	9f 91       	pop	r25
    326c:	8f 91       	pop	r24
    326e:	7f 91       	pop	r23
    3270:	6f 91       	pop	r22
    3272:	5f 91       	pop	r21
    3274:	4f 91       	pop	r20
    3276:	3f 91       	pop	r19
    3278:	2f 91       	pop	r18
    327a:	0f 90       	pop	r0
    327c:	0f be       	out	0x3f, r0	; 63
    327e:	0f 90       	pop	r0
    3280:	1f 90       	pop	r1
    3282:	18 95       	reti

Disassembly of section .text.ADCSetPowerOn:

00004e56 <ADCSetPowerOn>:
}

// Enable ADC
void ADCSetPowerOn( void )
{
	ADCSRA |= (1 << ADEN);
    4e56:	ea e7       	ldi	r30, 0x7A	; 122
    4e58:	f0 e0       	ldi	r31, 0x00	; 0
    4e5a:	80 81       	ld	r24, Z
    4e5c:	80 68       	ori	r24, 0x80	; 128
    4e5e:	80 83       	st	Z, r24
    4e60:	08 95       	ret

Disassembly of section .text.ADCStartConversion:

000047f8 <ADCStartConversion>:
}

void ADCStartConversion(void)
{
	// Don't start anything if we're not idle
	if (EADCSTATE_IDLE != sg_eState)
    47f8:	80 91 64 09 	lds	r24, 0x0964	; 0x800964 <sg_eState>
    47fc:	81 30       	cpi	r24, 0x01	; 1
    47fe:	81 f4       	brne	.+32     	; 0x4820 <ADCStartConversion+0x28>
	{
		return;
	}
	
	// Set back to the first channel
	sg_eCurrentType = EADCTYPE_FIRST;
    4800:	10 92 4f 09 	sts	0x094F, r1	; 0x80094f <sg_eCurrentType>
	
	// Set the MUX
	ADMUX = (ADMUX & MUX_MASK) | (sg_sMuxSelectList[sg_eCurrentType].u8MuxSelect) | MUX_AREF;
    4804:	ec e7       	ldi	r30, 0x7C	; 124
    4806:	f0 e0       	ldi	r31, 0x00	; 0
    4808:	80 81       	ld	r24, Z
    480a:	80 7e       	andi	r24, 0xE0	; 224
    480c:	89 6c       	ori	r24, 0xC9	; 201
    480e:	80 83       	st	Z, r24
		
	sg_eState = EADCSTATE_READING;
    4810:	82 e0       	ldi	r24, 0x02	; 2
    4812:	80 93 64 09 	sts	0x0964, r24	; 0x800964 <sg_eState>
	
	// Start a single conversion  - *dp run one at a time for now instead of continuous
	ADCSRA |= (1 << ADSC) | (1 << ADIE) | (1 << ADEN);  // turn power on if it isn't
    4816:	ea e7       	ldi	r30, 0x7A	; 122
    4818:	f0 e0       	ldi	r31, 0x00	; 0
    481a:	80 81       	ld	r24, Z
    481c:	88 6c       	ori	r24, 0xC8	; 200
    481e:	80 83       	st	Z, r24
    4820:	08 95       	ret

Disassembly of section .text.ADCInit:

0000230e <ADCInit>:

	// Disable the conversion complete interrupt
	ADCSRA &= (uint8_t)~(1 << ADIE);

	// Clear any pending interrupt	
	ADCSRA |= (1 << ADIF);
    230e:	cf 93       	push	r28
    2310:	82 e0       	ldi	r24, 0x02	; 2
    2312:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f007a>
    2316:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
    231a:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7f0094>
    231e:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7f0095>
    2322:	10 92 96 00 	sts	0x0096, r1	; 0x800096 <__TEXT_REGION_LENGTH__+0x7f0096>
    2326:	10 92 97 00 	sts	0x0097, r1	; 0x800097 <__TEXT_REGION_LENGTH__+0x7f0097>
    232a:	80 ea       	ldi	r24, 0xA0	; 160
    232c:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f007b>
    2330:	c0 e0       	ldi	r28, 0x00	; 0
    2332:	83 c0       	rjmp	.+262    	; 0x243a <ADCInit+0x12c>
    2334:	2c 2f       	mov	r18, r28
    2336:	30 e0       	ldi	r19, 0x00	; 0
    2338:	c9 01       	movw	r24, r18
    233a:	88 0f       	add	r24, r24
    233c:	99 1f       	adc	r25, r25
    233e:	82 0f       	add	r24, r18
    2340:	93 1f       	adc	r25, r19
    2342:	01 96       	adiw	r24, 0x01	; 1
    2344:	09 2e       	mov	r0, r25
    2346:	00 0c       	add	r0, r0
    2348:	aa 0b       	sbc	r26, r26
    234a:	86 5e       	subi	r24, 0xE6	; 230
    234c:	9c 4f       	sbci	r25, 0xFC	; 252
    234e:	af 4f       	sbci	r26, 0xFF	; 255
    2350:	fc 01       	movw	r30, r24
    2352:	84 91       	lpm	r24, Z
    2354:	a7 fd       	sbrc	r26, 7
    2356:	80 81       	ld	r24, Z
    2358:	81 30       	cpi	r24, 0x01	; 1
    235a:	41 f0       	breq	.+16     	; 0x236c <ADCInit+0x5e>
    235c:	08 f4       	brcc	.+2      	; 0x2360 <ADCInit+0x52>
    235e:	6c c0       	rjmp	.+216    	; 0x2438 <ADCInit+0x12a>
    2360:	82 30       	cpi	r24, 0x02	; 2
    2362:	21 f1       	breq	.+72     	; 0x23ac <ADCInit+0x9e>
    2364:	83 30       	cpi	r24, 0x03	; 3
    2366:	09 f4       	brne	.+2      	; 0x236a <ADCInit+0x5c>
    2368:	41 c0       	rjmp	.+130    	; 0x23ec <ADCInit+0xde>
    236a:	5f c0       	rjmp	.+190    	; 0x242a <ADCInit+0x11c>
    236c:	54 b1       	in	r21, 0x04	; 4
    236e:	c9 01       	movw	r24, r18
    2370:	88 0f       	add	r24, r24
    2372:	99 1f       	adc	r25, r25
    2374:	28 0f       	add	r18, r24
    2376:	39 1f       	adc	r19, r25
    2378:	2e 5f       	subi	r18, 0xFE	; 254
    237a:	3f 4f       	sbci	r19, 0xFF	; 255
    237c:	03 2e       	mov	r0, r19
    237e:	00 0c       	add	r0, r0
    2380:	44 0b       	sbc	r20, r20
    2382:	26 5e       	subi	r18, 0xE6	; 230
    2384:	3c 4f       	sbci	r19, 0xFC	; 252
    2386:	4f 4f       	sbci	r20, 0xFF	; 255
    2388:	f9 01       	movw	r30, r18
    238a:	24 91       	lpm	r18, Z
    238c:	47 fd       	sbrc	r20, 7
    238e:	20 81       	ld	r18, Z
    2390:	81 e0       	ldi	r24, 0x01	; 1
    2392:	90 e0       	ldi	r25, 0x00	; 0
    2394:	02 c0       	rjmp	.+4      	; 0x239a <ADCInit+0x8c>
    2396:	88 0f       	add	r24, r24
    2398:	99 1f       	adc	r25, r25
    239a:	2a 95       	dec	r18
    239c:	e2 f7       	brpl	.-8      	; 0x2396 <ADCInit+0x88>
    239e:	80 95       	com	r24
    23a0:	58 23       	and	r21, r24
    23a2:	54 b9       	out	0x04, r21	; 4
    23a4:	95 b1       	in	r25, 0x05	; 5
    23a6:	89 23       	and	r24, r25
    23a8:	85 b9       	out	0x05, r24	; 5
    23aa:	46 c0       	rjmp	.+140    	; 0x2438 <ADCInit+0x12a>
    23ac:	57 b1       	in	r21, 0x07	; 7
    23ae:	c9 01       	movw	r24, r18
    23b0:	88 0f       	add	r24, r24
    23b2:	99 1f       	adc	r25, r25
    23b4:	28 0f       	add	r18, r24
    23b6:	39 1f       	adc	r19, r25
    23b8:	2e 5f       	subi	r18, 0xFE	; 254
    23ba:	3f 4f       	sbci	r19, 0xFF	; 255
    23bc:	03 2e       	mov	r0, r19
    23be:	00 0c       	add	r0, r0
    23c0:	44 0b       	sbc	r20, r20
    23c2:	26 5e       	subi	r18, 0xE6	; 230
    23c4:	3c 4f       	sbci	r19, 0xFC	; 252
    23c6:	4f 4f       	sbci	r20, 0xFF	; 255
    23c8:	f9 01       	movw	r30, r18
    23ca:	24 91       	lpm	r18, Z
    23cc:	47 fd       	sbrc	r20, 7
    23ce:	20 81       	ld	r18, Z
    23d0:	81 e0       	ldi	r24, 0x01	; 1
    23d2:	90 e0       	ldi	r25, 0x00	; 0
    23d4:	02 c0       	rjmp	.+4      	; 0x23da <ADCInit+0xcc>
    23d6:	88 0f       	add	r24, r24
    23d8:	99 1f       	adc	r25, r25
    23da:	2a 95       	dec	r18
    23dc:	e2 f7       	brpl	.-8      	; 0x23d6 <ADCInit+0xc8>
    23de:	80 95       	com	r24
    23e0:	58 23       	and	r21, r24
    23e2:	57 b9       	out	0x07, r21	; 7
    23e4:	98 b1       	in	r25, 0x08	; 8
    23e6:	89 23       	and	r24, r25
    23e8:	88 b9       	out	0x08, r24	; 8
    23ea:	26 c0       	rjmp	.+76     	; 0x2438 <ADCInit+0x12a>
    23ec:	4a b1       	in	r20, 0x0a	; 10
    23ee:	c9 01       	movw	r24, r18
    23f0:	88 0f       	add	r24, r24
    23f2:	99 1f       	adc	r25, r25
    23f4:	82 0f       	add	r24, r18
    23f6:	93 1f       	adc	r25, r19
    23f8:	02 96       	adiw	r24, 0x02	; 2
    23fa:	09 2e       	mov	r0, r25
    23fc:	00 0c       	add	r0, r0
    23fe:	aa 0b       	sbc	r26, r26
    2400:	86 5e       	subi	r24, 0xE6	; 230
    2402:	9c 4f       	sbci	r25, 0xFC	; 252
    2404:	af 4f       	sbci	r26, 0xFF	; 255
    2406:	fc 01       	movw	r30, r24
    2408:	24 91       	lpm	r18, Z
    240a:	a7 fd       	sbrc	r26, 7
    240c:	20 81       	ld	r18, Z
    240e:	81 e0       	ldi	r24, 0x01	; 1
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	02 c0       	rjmp	.+4      	; 0x2418 <ADCInit+0x10a>
    2414:	88 0f       	add	r24, r24
    2416:	99 1f       	adc	r25, r25
    2418:	2a 95       	dec	r18
    241a:	e2 f7       	brpl	.-8      	; 0x2414 <ADCInit+0x106>
    241c:	80 95       	com	r24
    241e:	48 23       	and	r20, r24
    2420:	4a b9       	out	0x0a, r20	; 10
    2422:	9b b1       	in	r25, 0x0b	; 11
    2424:	89 23       	and	r24, r25
    2426:	8b b9       	out	0x0b, r24	; 11
    2428:	07 c0       	rjmp	.+14     	; 0x2438 <ADCInit+0x12a>
    242a:	45 eb       	ldi	r20, 0xB5	; 181
    242c:	50 e0       	ldi	r21, 0x00	; 0
    242e:	61 e4       	ldi	r22, 0x41	; 65
    2430:	73 e0       	ldi	r23, 0x03	; 3
    2432:	80 e0       	ldi	r24, 0x00	; 0
    2434:	0e 94 d0 23 	call	0x47a0	; 0x47a0 <PlatformAssert>
    2438:	cf 5f       	subi	r28, 0xFF	; 255
    243a:	c5 30       	cpi	r28, 0x05	; 5
    243c:	08 f4       	brcc	.+2      	; 0x2440 <ADCInit+0x132>
    243e:	7a cf       	rjmp	.-268    	; 0x2334 <ADCInit+0x26>
    2440:	81 e0       	ldi	r24, 0x01	; 1
    2442:	80 93 64 09 	sts	0x0964, r24	; 0x800964 <sg_eState>
    2446:	cf 91       	pop	r28
    2448:	08 95       	ret

Disassembly of section .text.CANLookupCommand:

00003ec2 <CANLookupCommand>:
	{PKT_MODULE_SET_TIME,		ECANMessageType_SetTime},
	{PKT_MODULE_MAX_STATE,		ECANMessageType_MaxState}
};

static ECANMessageType CANLookupCommand( uint16_t u16ID )
{
    3ec2:	cf 93       	push	r28
    3ec4:	df 93       	push	r29
    3ec6:	ec 01       	movw	r28, r24
	uint8_t u8Index = 0;
    3ec8:	90 e0       	ldi	r25, 0x00	; 0
	
	while( u8Index < (sizeof(sg_sRXCommandList)/sizeof(sg_sRXCommandList[0])) )
    3eca:	26 c0       	rjmp	.+76     	; 0x3f18 <CANLookupCommand+0x56>
	{
		if( sg_sRXCommandList[u8Index].u16ID == u16ID )
    3ecc:	a9 2f       	mov	r26, r25
    3ece:	b0 e0       	ldi	r27, 0x00	; 0
    3ed0:	9d 01       	movw	r18, r26
    3ed2:	22 0f       	add	r18, r18
    3ed4:	33 1f       	adc	r19, r19
    3ed6:	2a 0f       	add	r18, r26
    3ed8:	3b 1f       	adc	r19, r27
    3eda:	03 2e       	mov	r0, r19
    3edc:	00 0c       	add	r0, r0
    3ede:	44 0b       	sbc	r20, r20
    3ee0:	2b 52       	subi	r18, 0x2B	; 43
    3ee2:	3d 4f       	sbci	r19, 0xFD	; 253
    3ee4:	4f 4f       	sbci	r20, 0xFF	; 255
    3ee6:	f9 01       	movw	r30, r18
    3ee8:	54 2f       	mov	r21, r20
    3eea:	0e 94 07 27 	call	0x4e0e	; 0x4e0e <__xload_2>
    3eee:	6c 17       	cp	r22, r28
    3ef0:	7d 07       	cpc	r23, r29
    3ef2:	89 f4       	brne	.+34     	; 0x3f16 <CANLookupCommand+0x54>
		{
			return( sg_sRXCommandList[u8Index].eType );
    3ef4:	cd 01       	movw	r24, r26
    3ef6:	88 0f       	add	r24, r24
    3ef8:	99 1f       	adc	r25, r25
    3efa:	8a 0f       	add	r24, r26
    3efc:	9b 1f       	adc	r25, r27
    3efe:	02 96       	adiw	r24, 0x02	; 2
    3f00:	09 2e       	mov	r0, r25
    3f02:	00 0c       	add	r0, r0
    3f04:	aa 0b       	sbc	r26, r26
    3f06:	8b 52       	subi	r24, 0x2B	; 43
    3f08:	9d 4f       	sbci	r25, 0xFD	; 253
    3f0a:	af 4f       	sbci	r26, 0xFF	; 255
    3f0c:	fc 01       	movw	r30, r24
    3f0e:	84 91       	lpm	r24, Z
    3f10:	a7 fd       	sbrc	r26, 7
    3f12:	80 81       	ld	r24, Z
    3f14:	04 c0       	rjmp	.+8      	; 0x3f1e <CANLookupCommand+0x5c>
		}
		
		u8Index++;
    3f16:	9f 5f       	subi	r25, 0xFF	; 255

static ECANMessageType CANLookupCommand( uint16_t u16ID )
{
	uint8_t u8Index = 0;
	
	while( u8Index < (sizeof(sg_sRXCommandList)/sizeof(sg_sRXCommandList[0])) )
    3f18:	9b 30       	cpi	r25, 0x0B	; 11
    3f1a:	c0 f2       	brcs	.-80     	; 0x3ecc <CANLookupCommand+0xa>
		}
		
		u8Index++;
	}
	
	return( ECANMessageType_MAX );
    3f1c:	83 e1       	ldi	r24, 0x13	; 19
}
    3f1e:	df 91       	pop	r29
    3f20:	cf 91       	pop	r28
    3f22:	08 95       	ret

Disassembly of section .text.CANMOBSet:

00001afa <CANMOBSet>:

static void CANMOBSet( uint8_t u8MOBIndex,
					   const SMOBDef* psDef,
					   uint8_t* pu8Data,
					   uint8_t u8DataLen )
{
    1afa:	6f 92       	push	r6
    1afc:	7f 92       	push	r7
    1afe:	8f 92       	push	r8
    1b00:	9f 92       	push	r9
    1b02:	bf 92       	push	r11
    1b04:	cf 92       	push	r12
    1b06:	df 92       	push	r13
    1b08:	ef 92       	push	r14
    1b0a:	ff 92       	push	r15
    1b0c:	0f 93       	push	r16
    1b0e:	1f 93       	push	r17
    1b10:	cf 93       	push	r28
    1b12:	df 93       	push	r29
    1b14:	f8 2e       	mov	r15, r24
    1b16:	6a 01       	movw	r12, r20
    1b18:	e6 2e       	mov	r14, r22
    1b1a:	e9 01       	movw	r28, r18
	uint8_t u8CANCDMOBValue;
	uint32_t u32MessageID;
	uint8_t savedCANGIE;
	
	MBASSERT( u8MOBIndex <= 5 );
    1b1c:	0f 2e       	mov	r0, r31
    1b1e:	f5 e0       	ldi	r31, 0x05	; 5
    1b20:	6f 2e       	mov	r6, r31
    1b22:	f0 2d       	mov	r31, r0
    1b24:	68 16       	cp	r6, r24
    1b26:	38 f4       	brcc	.+14     	; 0x1b36 <CANMOBSet+0x3c>
    1b28:	40 ed       	ldi	r20, 0xD0	; 208
    1b2a:	50 e0       	ldi	r21, 0x00	; 0
    1b2c:	6c e4       	ldi	r22, 0x4C	; 76
    1b2e:	73 e0       	ldi	r23, 0x03	; 3
    1b30:	80 e0       	ldi	r24, 0x00	; 0
    1b32:	0e 94 d0 23 	call	0x47a0	; 0x47a0 <PlatformAssert>
	MBASSERT( u8DataLen <= 8 );
    1b36:	09 30       	cpi	r16, 0x09	; 9
    1b38:	38 f0       	brcs	.+14     	; 0x1b48 <CANMOBSet+0x4e>
    1b3a:	41 ed       	ldi	r20, 0xD1	; 209
    1b3c:	50 e0       	ldi	r21, 0x00	; 0
    1b3e:	6c e4       	ldi	r22, 0x4C	; 76
    1b40:	73 e0       	ldi	r23, 0x03	; 3
    1b42:	80 e0       	ldi	r24, 0x00	; 0
    1b44:	0e 94 d0 23 	call	0x47a0	; 0x47a0 <PlatformAssert>
	
	// Disable CAN interrupts during MOB configuration to prevent corruption
	savedCANGIE = CANGIE;
    1b48:	eb ed       	ldi	r30, 0xDB	; 219
    1b4a:	f0 e0       	ldi	r31, 0x00	; 0
    1b4c:	b0 80       	ld	r11, Z
	CANGIE &= ~(1 << ENIT);
    1b4e:	80 81       	ld	r24, Z
    1b50:	8f 77       	andi	r24, 0x7F	; 127
    1b52:	80 83       	st	Z, r24
	
	// Set the MOB page, auto increment, and data index 0
	CANPAGE = u8MOBIndex << 4;
    1b54:	8f 2d       	mov	r24, r15
    1b56:	82 95       	swap	r24
    1b58:	80 7f       	andi	r24, 0xF0	; 240
    1b5a:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f00ed>
	
	// Clear the MOB status
	CANSTMOB = 0;
    1b5e:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
	
	// Set the MOB registers for this page
	u8CANCDMOBValue = u8DataLen;
	u8CANCDMOBValue |= (psDef->u8Mode << CONMOB0);
    1b62:	f6 01       	movw	r30, r12
    1b64:	84 91       	lpm	r24, Z
    1b66:	e7 fc       	sbrc	r14, 7
    1b68:	80 81       	ld	r24, Z
    1b6a:	20 e4       	ldi	r18, 0x40	; 64
    1b6c:	82 9f       	mul	r24, r18
    1b6e:	c0 01       	movw	r24, r0
    1b70:	11 24       	eor	r1, r1
    1b72:	10 2f       	mov	r17, r16
    1b74:	18 2b       	or	r17, r24
	if( psDef->bReplyValid )
    1b76:	ae 2d       	mov	r26, r14
    1b78:	c6 01       	movw	r24, r12
    1b7a:	01 96       	adiw	r24, 0x01	; 1
    1b7c:	a1 1d       	adc	r26, r1
    1b7e:	fc 01       	movw	r30, r24
    1b80:	84 91       	lpm	r24, Z
    1b82:	a7 fd       	sbrc	r26, 7
    1b84:	80 81       	ld	r24, Z
    1b86:	81 11       	cpse	r24, r1
	{
		u8CANCDMOBValue |= (1 << RPLV);
    1b88:	10 62       	ori	r17, 0x20	; 32
	}
	u8CANCDMOBValue |= (1 << IDE);
    1b8a:	10 61       	ori	r17, 0x10	; 16
	// Extended frame address format
	//	Bits 0-7: Pack / Module registration ID of sender (if assigned, zero otherwise)
	//	Bits 8-17: Reserved, set to zero.
	//	Bits 18-28: Static message ID (eg. 0x500)
	
	u32MessageID = (uint32_t)PlatformGetRegistrationID();
    1b8c:	0e 94 4b 27 	call	0x4e96	; 0x4e96 <PlatformGetRegistrationID>
	u32MessageID |= (((uint32_t)psDef->u16ID) & 0x7ff) << 18;
    1b90:	4e 2d       	mov	r20, r14
    1b92:	96 01       	movw	r18, r12
    1b94:	2e 5f       	subi	r18, 0xFE	; 254
    1b96:	3f 4f       	sbci	r19, 0xFF	; 255
    1b98:	4f 4f       	sbci	r20, 0xFF	; 255
    1b9a:	f9 01       	movw	r30, r18
    1b9c:	54 2f       	mov	r21, r20
    1b9e:	0e 94 07 27 	call	0x4e0e	; 0x4e0e <__xload_2>
    1ba2:	ab 01       	movw	r20, r22
    1ba4:	57 70       	andi	r21, 0x07	; 7
    1ba6:	60 e0       	ldi	r22, 0x00	; 0
    1ba8:	70 e0       	ldi	r23, 0x00	; 0
    1baa:	03 2e       	mov	r0, r19
    1bac:	32 e1       	ldi	r19, 0x12	; 18
    1bae:	44 0f       	add	r20, r20
    1bb0:	55 1f       	adc	r21, r21
    1bb2:	66 1f       	adc	r22, r22
    1bb4:	77 1f       	adc	r23, r23
    1bb6:	3a 95       	dec	r19
    1bb8:	d1 f7       	brne	.-12     	; 0x1bae <CANMOBSet+0xb4>
    1bba:	30 2d       	mov	r19, r0
    1bbc:	3a 01       	movw	r6, r20
    1bbe:	4b 01       	movw	r8, r22
    1bc0:	68 2a       	or	r6, r24
    1bc2:	d4 01       	movw	r26, r8
    1bc4:	c3 01       	movw	r24, r6
	
	CANIDT4 = psDef->bRTRTag?(1 << RTRTAG):0;
    1bc6:	4e 2d       	mov	r20, r14
    1bc8:	96 01       	movw	r18, r12
    1bca:	2a 5f       	subi	r18, 0xFA	; 250
    1bcc:	3f 4f       	sbci	r19, 0xFF	; 255
    1bce:	4f 4f       	sbci	r20, 0xFF	; 255
    1bd0:	f9 01       	movw	r30, r18
    1bd2:	24 91       	lpm	r18, Z
    1bd4:	47 fd       	sbrc	r20, 7
    1bd6:	20 81       	ld	r18, Z
    1bd8:	22 23       	and	r18, r18
    1bda:	11 f0       	breq	.+4      	; 0x1be0 <CANMOBSet+0xe6>
    1bdc:	24 e0       	ldi	r18, 0x04	; 4
    1bde:	01 c0       	rjmp	.+2      	; 0x1be2 <CANMOBSet+0xe8>
    1be0:	20 e0       	ldi	r18, 0x00	; 0
    1be2:	e0 ef       	ldi	r30, 0xF0	; 240
    1be4:	f0 e0       	ldi	r31, 0x00	; 0
    1be6:	20 83       	st	Z, r18
	CANIDT4 |= u32MessageID << 3;
    1be8:	20 81       	ld	r18, Z
    1bea:	38 2f       	mov	r19, r24
    1bec:	33 0f       	add	r19, r19
    1bee:	33 0f       	add	r19, r19
    1bf0:	33 0f       	add	r19, r19
    1bf2:	23 2b       	or	r18, r19
    1bf4:	20 83       	st	Z, r18
	CANIDT3 = u32MessageID >> 5;
    1bf6:	ac 01       	movw	r20, r24
    1bf8:	bd 01       	movw	r22, r26
    1bfa:	68 94       	set
    1bfc:	14 f8       	bld	r1, 4
    1bfe:	76 95       	lsr	r23
    1c00:	67 95       	ror	r22
    1c02:	57 95       	ror	r21
    1c04:	47 95       	ror	r20
    1c06:	16 94       	lsr	r1
    1c08:	d1 f7       	brne	.-12     	; 0x1bfe <CANMOBSet+0x104>
    1c0a:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f00f1>
	CANIDT2 = u32MessageID >> 13;
    1c0e:	ac 01       	movw	r20, r24
    1c10:	bd 01       	movw	r22, r26
    1c12:	03 2e       	mov	r0, r19
    1c14:	3d e0       	ldi	r19, 0x0D	; 13
    1c16:	76 95       	lsr	r23
    1c18:	67 95       	ror	r22
    1c1a:	57 95       	ror	r21
    1c1c:	47 95       	ror	r20
    1c1e:	3a 95       	dec	r19
    1c20:	d1 f7       	brne	.-12     	; 0x1c16 <CANMOBSet+0x11c>
    1c22:	30 2d       	mov	r19, r0
    1c24:	40 93 f2 00 	sts	0x00F2, r20	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f00f2>
	CANIDT1 = u32MessageID >> 21;
    1c28:	07 2e       	mov	r0, r23
    1c2a:	75 e1       	ldi	r23, 0x15	; 21
    1c2c:	b6 95       	lsr	r27
    1c2e:	a7 95       	ror	r26
    1c30:	97 95       	ror	r25
    1c32:	87 95       	ror	r24
    1c34:	7a 95       	dec	r23
    1c36:	d1 f7       	brne	.-12     	; 0x1c2c <CANMOBSet+0x132>
    1c38:	70 2d       	mov	r23, r0
    1c3a:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f00f3>
	
	// Setup mask for the cmd (require matching ID extention bit)
	CANIDM4 = psDef->bRTRMask?(1 << RTRTAG):0;
    1c3e:	ae 2d       	mov	r26, r14
    1c40:	c6 01       	movw	r24, r12
    1c42:	07 96       	adiw	r24, 0x07	; 7
    1c44:	a1 1d       	adc	r26, r1
    1c46:	fc 01       	movw	r30, r24
    1c48:	84 91       	lpm	r24, Z
    1c4a:	a7 fd       	sbrc	r26, 7
    1c4c:	80 81       	ld	r24, Z
    1c4e:	88 23       	and	r24, r24
    1c50:	11 f0       	breq	.+4      	; 0x1c56 <CANMOBSet+0x15c>
    1c52:	84 e0       	ldi	r24, 0x04	; 4
    1c54:	01 c0       	rjmp	.+2      	; 0x1c58 <CANMOBSet+0x15e>
    1c56:	80 e0       	ldi	r24, 0x00	; 0
    1c58:	e4 ef       	ldi	r30, 0xF4	; 244
    1c5a:	f0 e0       	ldi	r31, 0x00	; 0
    1c5c:	80 83       	st	Z, r24
	CANIDM4 |= (1 << IDEMSK);
    1c5e:	80 81       	ld	r24, Z
    1c60:	81 60       	ori	r24, 0x01	; 1
    1c62:	80 83       	st	Z, r24
	CANIDM3 = 0;
    1c64:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7f00f5>
	CANIDM2 = psDef->u16IDMask << 5;
    1c68:	ae 2d       	mov	r26, r14
    1c6a:	c6 01       	movw	r24, r12
    1c6c:	04 96       	adiw	r24, 0x04	; 4
    1c6e:	a1 1d       	adc	r26, r1
    1c70:	fc 01       	movw	r30, r24
    1c72:	5a 2f       	mov	r21, r26
    1c74:	0e 94 07 27 	call	0x4e0e	; 0x4e0e <__xload_2>
    1c78:	62 95       	swap	r22
    1c7a:	66 0f       	add	r22, r22
    1c7c:	60 7e       	andi	r22, 0xE0	; 224
    1c7e:	60 93 f6 00 	sts	0x00F6, r22	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7f00f6>
	CANIDM1 = psDef->u16IDMask >> 3;
    1c82:	fc 01       	movw	r30, r24
    1c84:	5a 2f       	mov	r21, r26
    1c86:	0e 94 07 27 	call	0x4e0e	; 0x4e0e <__xload_2>
    1c8a:	76 95       	lsr	r23
    1c8c:	67 95       	ror	r22
    1c8e:	76 95       	lsr	r23
    1c90:	67 95       	ror	r22
    1c92:	76 95       	lsr	r23
    1c94:	67 95       	ror	r22
    1c96:	60 93 f7 00 	sts	0x00F7, r22	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7f00f7>
	
	// Set the data into the FIFO
	while( u8DataLen )
    1c9a:	04 c0       	rjmp	.+8      	; 0x1ca4 <CANMOBSet+0x1aa>
	{
		CANMSG = *pu8Data;
    1c9c:	89 91       	ld	r24, Y+
    1c9e:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
		
		pu8Data++;
		u8DataLen--;
    1ca2:	01 50       	subi	r16, 0x01	; 1
	CANIDM3 = 0;
	CANIDM2 = psDef->u16IDMask << 5;
	CANIDM1 = psDef->u16IDMask >> 3;
	
	// Set the data into the FIFO
	while( u8DataLen )
    1ca4:	01 11       	cpse	r16, r1
    1ca6:	fa cf       	rjmp	.-12     	; 0x1c9c <CANMOBSet+0x1a2>
		pu8Data++;
		u8DataLen--;
	}
	
	// Send it now
	CANCDMOB = u8CANCDMOBValue;
    1ca8:	10 93 ef 00 	sts	0x00EF, r17	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
	
	// Enable (activates the MOB) or disable the MOB interrupt
	if( psDef->u8Mode != CAN_DISABLED )
    1cac:	f6 01       	movw	r30, r12
    1cae:	84 91       	lpm	r24, Z
    1cb0:	e7 fc       	sbrc	r14, 7
    1cb2:	80 81       	ld	r24, Z
    1cb4:	88 23       	and	r24, r24
    1cb6:	69 f0       	breq	.+26     	; 0x1cd2 <CANMOBSet+0x1d8>
	{
		CANIE2 |= (1 << u8MOBIndex);
    1cb8:	ee ed       	ldi	r30, 0xDE	; 222
    1cba:	f0 e0       	ldi	r31, 0x00	; 0
    1cbc:	20 81       	ld	r18, Z
    1cbe:	81 e0       	ldi	r24, 0x01	; 1
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	02 c0       	rjmp	.+4      	; 0x1cc8 <CANMOBSet+0x1ce>
    1cc4:	88 0f       	add	r24, r24
    1cc6:	99 1f       	adc	r25, r25
    1cc8:	fa 94       	dec	r15
    1cca:	e2 f7       	brpl	.-8      	; 0x1cc4 <CANMOBSet+0x1ca>
    1ccc:	82 2b       	or	r24, r18
    1cce:	80 83       	st	Z, r24
    1cd0:	0d c0       	rjmp	.+26     	; 0x1cec <CANMOBSet+0x1f2>
	}
	else
	{
		CANIE2 &= (uint8_t)~(1 << u8MOBIndex);
    1cd2:	ee ed       	ldi	r30, 0xDE	; 222
    1cd4:	f0 e0       	ldi	r31, 0x00	; 0
    1cd6:	20 81       	ld	r18, Z
    1cd8:	81 e0       	ldi	r24, 0x01	; 1
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	02 c0       	rjmp	.+4      	; 0x1ce2 <CANMOBSet+0x1e8>
    1cde:	88 0f       	add	r24, r24
    1ce0:	99 1f       	adc	r25, r25
    1ce2:	fa 94       	dec	r15
    1ce4:	e2 f7       	brpl	.-8      	; 0x1cde <CANMOBSet+0x1e4>
    1ce6:	80 95       	com	r24
    1ce8:	82 23       	and	r24, r18
    1cea:	80 83       	st	Z, r24
	}
	
	// Restore CAN interrupts
	CANGIE = savedCANGIE;
    1cec:	b0 92 db 00 	sts	0x00DB, r11	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f00db>
}
    1cf0:	df 91       	pop	r29
    1cf2:	cf 91       	pop	r28
    1cf4:	1f 91       	pop	r17
    1cf6:	0f 91       	pop	r16
    1cf8:	ff 90       	pop	r15
    1cfa:	ef 90       	pop	r14
    1cfc:	df 90       	pop	r13
    1cfe:	cf 90       	pop	r12
    1d00:	bf 90       	pop	r11
    1d02:	9f 90       	pop	r9
    1d04:	8f 90       	pop	r8
    1d06:	7f 90       	pop	r7
    1d08:	6f 90       	pop	r6
    1d0a:	08 95       	ret

Disassembly of section .text.CANSendMessageInternal:

00001eca <CANSendMessageInternal>:

static void CANSendMessageInternal( ECANMessageType eType,
									uint8_t* pu8Data,
									uint8_t u8DataLen,	
									bool bRetransmit )
{
    1eca:	6f 92       	push	r6
    1ecc:	7f 92       	push	r7
    1ece:	8f 92       	push	r8
    1ed0:	ef 92       	push	r14
    1ed2:	ff 92       	push	r15
    1ed4:	0f 93       	push	r16
    1ed6:	cf 93       	push	r28
    1ed8:	df 93       	push	r29
    1eda:	c8 2f       	mov	r28, r24
    1edc:	7b 01       	movw	r14, r22
    1ede:	04 2f       	mov	r16, r20
    1ee0:	d2 2f       	mov	r29, r18
	const SMOBDef* psDef = NULL;
	
	if( ECANMessageType_ModuleAnnouncement == eType )
    1ee2:	88 23       	and	r24, r24
    1ee4:	f9 f0       	breq	.+62     	; 0x1f24 <CANSendMessageInternal+0x5a>
	{
		psDef = &sg_sMOBModuleAnnouncement;
	}
	else if( ECANMessageType_ModuleStatus1 == eType )
    1ee6:	81 30       	cpi	r24, 0x01	; 1
    1ee8:	31 f1       	breq	.+76     	; 0x1f36 <CANSendMessageInternal+0x6c>
	{
		psDef = &sg_sMOBModuleStatus1;
	}
	else if( ECANMessageType_ModuleStatus2 == eType )
    1eea:	82 30       	cpi	r24, 0x02	; 2
    1eec:	69 f1       	breq	.+90     	; 0x1f48 <CANSendMessageInternal+0x7e>
	{
		psDef = &sg_sMOBModuleStatus2;
	}
	else if( ECANMessageType_ModuleStatus3 == eType )
    1eee:	83 30       	cpi	r24, 0x03	; 3
    1ef0:	a1 f1       	breq	.+104    	; 0x1f5a <CANSendMessageInternal+0x90>
	{
		psDef = &sg_sMOBModuleStatus3;
	}
	else if( ECANMessageType_ModuleCellCommStat1 == eType )
    1ef2:	86 30       	cpi	r24, 0x06	; 6
    1ef4:	d9 f1       	breq	.+118    	; 0x1f6c <CANSendMessageInternal+0xa2>
	{
		psDef = &sg_sMOBModuleCellCommStat1;
	}
	else if( ECANMessageType_ModuleCellCommStat2 == eType )
    1ef6:	87 30       	cpi	r24, 0x07	; 7
    1ef8:	09 f4       	brne	.+2      	; 0x1efc <CANSendMessageInternal+0x32>
    1efa:	41 c0       	rjmp	.+130    	; 0x1f7e <CANSendMessageInternal+0xb4>
	{
		psDef = &sg_sMOBModuleCellCommStat2;
	}
	else if( ECANMessageType_ModuleHardwareDetail == eType )
    1efc:	85 30       	cpi	r24, 0x05	; 5
    1efe:	09 f4       	brne	.+2      	; 0x1f02 <CANSendMessageInternal+0x38>
    1f00:	47 c0       	rjmp	.+142    	; 0x1f90 <CANSendMessageInternal+0xc6>
	{
		psDef = &sg_sMOBModuleHardwareDetail;
	}
	else if( ECANMessageType_ModuleCellDetail == eType )
    1f02:	84 30       	cpi	r24, 0x04	; 4
    1f04:	09 f4       	brne	.+2      	; 0x1f08 <CANSendMessageInternal+0x3e>
    1f06:	4d c0       	rjmp	.+154    	; 0x1fa2 <CANSendMessageInternal+0xd8>
	{
		psDef = &sg_sMOBModuleCellDetail;
	}
	else if( ECANMessageType_ModuleRequestTime == eType )
    1f08:	88 30       	cpi	r24, 0x08	; 8
    1f0a:	09 f4       	brne	.+2      	; 0x1f0e <CANSendMessageInternal+0x44>
    1f0c:	53 c0       	rjmp	.+166    	; 0x1fb4 <CANSendMessageInternal+0xea>
		psDef = &sg_sMOBModuleRequestTime;
	}
	else
	{
		// Invalid message type
		MBASSERT(0);
    1f0e:	43 e4       	ldi	r20, 0x43	; 67
    1f10:	51 e0       	ldi	r21, 0x01	; 1
    1f12:	6c e4       	ldi	r22, 0x4C	; 76
    1f14:	73 e0       	ldi	r23, 0x03	; 3
    1f16:	80 e0       	ldi	r24, 0x00	; 0
    1f18:	0e 94 d0 23 	call	0x47a0	; 0x47a0 <PlatformAssert>
static void CANSendMessageInternal( ECANMessageType eType,
									uint8_t* pu8Data,
									uint8_t u8DataLen,	
									bool bRetransmit )
{
	const SMOBDef* psDef = NULL;
    1f1c:	61 2c       	mov	r6, r1
    1f1e:	71 2c       	mov	r7, r1
    1f20:	81 2c       	mov	r8, r1
    1f22:	50 c0       	rjmp	.+160    	; 0x1fc4 <CANSendMessageInternal+0xfa>
	
	if( ECANMessageType_ModuleAnnouncement == eType )
	{
		psDef = &sg_sMOBModuleAnnouncement;
    1f24:	0f 2e       	mov	r0, r31
    1f26:	f7 e9       	ldi	r31, 0x97	; 151
    1f28:	6f 2e       	mov	r6, r31
    1f2a:	f3 e0       	ldi	r31, 0x03	; 3
    1f2c:	7f 2e       	mov	r7, r31
    1f2e:	f0 e0       	ldi	r31, 0x00	; 0
    1f30:	8f 2e       	mov	r8, r31
    1f32:	f0 2d       	mov	r31, r0
    1f34:	47 c0       	rjmp	.+142    	; 0x1fc4 <CANSendMessageInternal+0xfa>
	}
	else if( ECANMessageType_ModuleStatus1 == eType )
	{
		psDef = &sg_sMOBModuleStatus1;
    1f36:	0f 2e       	mov	r0, r31
    1f38:	ff e8       	ldi	r31, 0x8F	; 143
    1f3a:	6f 2e       	mov	r6, r31
    1f3c:	f3 e0       	ldi	r31, 0x03	; 3
    1f3e:	7f 2e       	mov	r7, r31
    1f40:	f0 e0       	ldi	r31, 0x00	; 0
    1f42:	8f 2e       	mov	r8, r31
    1f44:	f0 2d       	mov	r31, r0
    1f46:	3e c0       	rjmp	.+124    	; 0x1fc4 <CANSendMessageInternal+0xfa>
	}
	else if( ECANMessageType_ModuleStatus2 == eType )
	{
		psDef = &sg_sMOBModuleStatus2;
    1f48:	0f 2e       	mov	r0, r31
    1f4a:	f7 e8       	ldi	r31, 0x87	; 135
    1f4c:	6f 2e       	mov	r6, r31
    1f4e:	f3 e0       	ldi	r31, 0x03	; 3
    1f50:	7f 2e       	mov	r7, r31
    1f52:	f0 e0       	ldi	r31, 0x00	; 0
    1f54:	8f 2e       	mov	r8, r31
    1f56:	f0 2d       	mov	r31, r0
    1f58:	35 c0       	rjmp	.+106    	; 0x1fc4 <CANSendMessageInternal+0xfa>
	}
	else if( ECANMessageType_ModuleStatus3 == eType )
	{
		psDef = &sg_sMOBModuleStatus3;
    1f5a:	0f 2e       	mov	r0, r31
    1f5c:	ff e7       	ldi	r31, 0x7F	; 127
    1f5e:	6f 2e       	mov	r6, r31
    1f60:	f3 e0       	ldi	r31, 0x03	; 3
    1f62:	7f 2e       	mov	r7, r31
    1f64:	f0 e0       	ldi	r31, 0x00	; 0
    1f66:	8f 2e       	mov	r8, r31
    1f68:	f0 2d       	mov	r31, r0
    1f6a:	2c c0       	rjmp	.+88     	; 0x1fc4 <CANSendMessageInternal+0xfa>
	}
	else if( ECANMessageType_ModuleCellCommStat1 == eType )
	{
		psDef = &sg_sMOBModuleCellCommStat1;
    1f6c:	0f 2e       	mov	r0, r31
    1f6e:	f7 e7       	ldi	r31, 0x77	; 119
    1f70:	6f 2e       	mov	r6, r31
    1f72:	f3 e0       	ldi	r31, 0x03	; 3
    1f74:	7f 2e       	mov	r7, r31
    1f76:	f0 e0       	ldi	r31, 0x00	; 0
    1f78:	8f 2e       	mov	r8, r31
    1f7a:	f0 2d       	mov	r31, r0
    1f7c:	23 c0       	rjmp	.+70     	; 0x1fc4 <CANSendMessageInternal+0xfa>
	}
	else if( ECANMessageType_ModuleCellCommStat2 == eType )
	{
		psDef = &sg_sMOBModuleCellCommStat2;
    1f7e:	0f 2e       	mov	r0, r31
    1f80:	ff e6       	ldi	r31, 0x6F	; 111
    1f82:	6f 2e       	mov	r6, r31
    1f84:	f3 e0       	ldi	r31, 0x03	; 3
    1f86:	7f 2e       	mov	r7, r31
    1f88:	f0 e0       	ldi	r31, 0x00	; 0
    1f8a:	8f 2e       	mov	r8, r31
    1f8c:	f0 2d       	mov	r31, r0
    1f8e:	1a c0       	rjmp	.+52     	; 0x1fc4 <CANSendMessageInternal+0xfa>
	}
	else if( ECANMessageType_ModuleHardwareDetail == eType )
	{
		psDef = &sg_sMOBModuleHardwareDetail;
    1f90:	0f 2e       	mov	r0, r31
    1f92:	ff e5       	ldi	r31, 0x5F	; 95
    1f94:	6f 2e       	mov	r6, r31
    1f96:	f3 e0       	ldi	r31, 0x03	; 3
    1f98:	7f 2e       	mov	r7, r31
    1f9a:	f0 e0       	ldi	r31, 0x00	; 0
    1f9c:	8f 2e       	mov	r8, r31
    1f9e:	f0 2d       	mov	r31, r0
    1fa0:	11 c0       	rjmp	.+34     	; 0x1fc4 <CANSendMessageInternal+0xfa>
	}
	else if( ECANMessageType_ModuleCellDetail == eType )
	{
		psDef = &sg_sMOBModuleCellDetail;
    1fa2:	0f 2e       	mov	r0, r31
    1fa4:	f7 e6       	ldi	r31, 0x67	; 103
    1fa6:	6f 2e       	mov	r6, r31
    1fa8:	f3 e0       	ldi	r31, 0x03	; 3
    1faa:	7f 2e       	mov	r7, r31
    1fac:	f0 e0       	ldi	r31, 0x00	; 0
    1fae:	8f 2e       	mov	r8, r31
    1fb0:	f0 2d       	mov	r31, r0
    1fb2:	08 c0       	rjmp	.+16     	; 0x1fc4 <CANSendMessageInternal+0xfa>
	}
	else if( ECANMessageType_ModuleRequestTime == eType )
	{
		psDef = &sg_sMOBModuleRequestTime;
    1fb4:	0f 2e       	mov	r0, r31
    1fb6:	f7 e5       	ldi	r31, 0x57	; 87
    1fb8:	6f 2e       	mov	r6, r31
    1fba:	f3 e0       	ldi	r31, 0x03	; 3
    1fbc:	7f 2e       	mov	r7, r31
    1fbe:	f0 e0       	ldi	r31, 0x00	; 0
    1fc0:	8f 2e       	mov	r8, r31
    1fc2:	f0 2d       	mov	r31, r0
	{
		// Invalid message type
		MBASSERT(0);
	}
	
	if(bRetransmit && sg_bInRetransmit) {
    1fc4:	dd 23       	and	r29, r29
    1fc6:	21 f0       	breq	.+8      	; 0x1fd0 <CANSendMessageInternal+0x106>
    1fc8:	80 91 65 09 	lds	r24, 0x0965	; 0x800965 <sg_bInRetransmit>
    1fcc:	81 11       	cpse	r24, r1
    1fce:	30 c0       	rjmp	.+96     	; 0x2030 <CANSendMessageInternal+0x166>
		// Already in a retransmit, don't allow nested retries
		return;
	}
	if( bRetransmit || (false == sg_bBusy) )
    1fd0:	d1 11       	cpse	r29, r1
    1fd2:	04 c0       	rjmp	.+8      	; 0x1fdc <CANSendMessageInternal+0x112>
    1fd4:	80 91 69 09 	lds	r24, 0x0969	; 0x800969 <sg_bBusy>
    1fd8:	81 11       	cpse	r24, r1
    1fda:	2a c0       	rjmp	.+84     	; 0x2030 <CANSendMessageInternal+0x166>
	{
		sg_bBusy = true;
    1fdc:	81 e0       	ldi	r24, 0x01	; 1
    1fde:	80 93 69 09 	sts	0x0969, r24	; 0x800969 <sg_bBusy>
		
		// Save this message info for retransmit later if needed
		if( false == bRetransmit )
    1fe2:	d1 11       	cpse	r29, r1
    1fe4:	1a c0       	rjmp	.+52     	; 0x201a <CANSendMessageInternal+0x150>
		{
			sg_u8TransmitAttempts = 0;
    1fe6:	10 92 68 09 	sts	0x0968, r1	; 0x800968 <sg_u8TransmitAttempts>
			sg_eLastTXType = eType;
    1fea:	c0 93 67 09 	sts	0x0967, r28	; 0x800967 <sg_eLastTXType>
			MBASSERT(u8DataLen <= CAN_MAX_MSG_SIZE);
    1fee:	09 30       	cpi	r16, 0x09	; 9
    1ff0:	38 f0       	brcs	.+14     	; 0x2000 <CANSendMessageInternal+0x136>
    1ff2:	43 e5       	ldi	r20, 0x53	; 83
    1ff4:	51 e0       	ldi	r21, 0x01	; 1
    1ff6:	6c e4       	ldi	r22, 0x4C	; 76
    1ff8:	73 e0       	ldi	r23, 0x03	; 3
    1ffa:	80 e0       	ldi	r24, 0x00	; 0
    1ffc:	0e 94 d0 23 	call	0x47a0	; 0x47a0 <PlatformAssert>
			memcpy(sg_u8LastTXData, pu8Data, u8DataLen);
    2000:	20 2f       	mov	r18, r16
    2002:	30 e0       	ldi	r19, 0x00	; 0
    2004:	c7 01       	movw	r24, r14
    2006:	a0 e8       	ldi	r26, 0x80	; 128
    2008:	ac 01       	movw	r20, r24
    200a:	6a 2f       	mov	r22, r26
    200c:	8d e3       	ldi	r24, 0x3D	; 61
    200e:	99 e0       	ldi	r25, 0x09	; 9
    2010:	0e 94 74 23 	call	0x46e8	; 0x46e8 <memcpy>
			sg_u8LastTXDataLen = u8DataLen;
    2014:	00 93 66 09 	sts	0x0966, r16	; 0x800966 <sg_u8LastTXDataLen>
    2018:	05 c0       	rjmp	.+10     	; 0x2024 <CANSendMessageInternal+0x15a>
		}
		else
		{
			sg_u8TransmitAttempts++;
    201a:	80 91 68 09 	lds	r24, 0x0968	; 0x800968 <sg_u8TransmitAttempts>
    201e:	8f 5f       	subi	r24, 0xFF	; 255
    2020:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <sg_u8TransmitAttempts>
		}
		
		// Send it now
		CANMOBSet( CANMOB_TX_IDX, psDef, pu8Data, u8DataLen );
    2024:	97 01       	movw	r18, r14
    2026:	68 2d       	mov	r22, r8
    2028:	a3 01       	movw	r20, r6
    202a:	81 e0       	ldi	r24, 0x01	; 1
    202c:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <CANMOBSet>
	}
}
    2030:	df 91       	pop	r29
    2032:	cf 91       	pop	r28
    2034:	0f 91       	pop	r16
    2036:	ff 90       	pop	r15
    2038:	ef 90       	pop	r14
    203a:	8f 90       	pop	r8
    203c:	7f 90       	pop	r7
    203e:	6f 90       	pop	r6
    2040:	08 95       	ret

Disassembly of section .text.CANMOBInterrupt:

00002042 <CANMOBInterrupt>:
 * - RX MOB is continuous, gets re-enabled immediately after processing
 * - System works because CANMOBSet() always re-enables on next TX
 * - Potential issue: TX MOB stays disabled after last transmission
 */
void CANMOBInterrupt( uint8_t u8MOBIndex )
{
    2042:	cf 92       	push	r12
    2044:	df 92       	push	r13
    2046:	ff 92       	push	r15
    2048:	0f 93       	push	r16
    204a:	1f 93       	push	r17
    204c:	cf 93       	push	r28
    204e:	df 93       	push	r29
    2050:	cd b7       	in	r28, 0x3d	; 61
    2052:	de b7       	in	r29, 0x3e	; 62
    2054:	28 97       	sbiw	r28, 0x08	; 8
    2056:	0f b6       	in	r0, 0x3f	; 63
    2058:	f8 94       	cli
    205a:	de bf       	out	0x3e, r29	; 62
    205c:	0f be       	out	0x3f, r0	; 63
    205e:	cd bf       	out	0x3d, r28	; 61
	// Set the MOB page first (and zero the data index)
	CANPAGE = u8MOBIndex << 4;
    2060:	98 2f       	mov	r25, r24
    2062:	92 95       	swap	r25
    2064:	90 7f       	andi	r25, 0xF0	; 240
    2066:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f00ed>
	
	// Temporarily disable the MOB to examine and modify the registers
	CANIE2 &= (uint8_t)~(1 << u8MOBIndex);
    206a:	ee ed       	ldi	r30, 0xDE	; 222
    206c:	f0 e0       	ldi	r31, 0x00	; 0
    206e:	20 81       	ld	r18, Z
    2070:	01 e0       	ldi	r16, 0x01	; 1
    2072:	10 e0       	ldi	r17, 0x00	; 0
    2074:	08 2e       	mov	r0, r24
    2076:	02 c0       	rjmp	.+4      	; 0x207c <CANMOBInterrupt+0x3a>
    2078:	00 0f       	add	r16, r16
    207a:	11 1f       	adc	r17, r17
    207c:	0a 94       	dec	r0
    207e:	e2 f7       	brpl	.-8      	; 0x2078 <CANMOBInterrupt+0x36>
    2080:	90 2f       	mov	r25, r16
    2082:	90 95       	com	r25
    2084:	92 23       	and	r25, r18
    2086:	90 83       	st	Z, r25
	CANCDMOB &= (uint8_t)~((1 << CONMOB0) | (1 << CONMOB1));
    2088:	ef ee       	ldi	r30, 0xEF	; 239
    208a:	f0 e0       	ldi	r31, 0x00	; 0
    208c:	90 81       	ld	r25, Z
    208e:	9f 73       	andi	r25, 0x3F	; 63
    2090:	90 83       	st	Z, r25
	
	if( CANMOB_RX_IDX == u8MOBIndex )
    2092:	81 11       	cpse	r24, r1
    2094:	50 c0       	rjmp	.+160    	; 0x2136 <CANMOBInterrupt+0xf4>
			// sg_bBusy = false;  // WRONG - commented out to fix CAN reliability issues
			// sg_bInRetransmit = false;  // WRONG - also should not be cleared here
		}
		*/
		// RX success?
		if( CANSTMOB & (1 << RXOK) )
    2096:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    209a:	85 ff       	sbrs	r24, 5
    209c:	38 c0       	rjmp	.+112    	; 0x210e <CANMOBInterrupt+0xcc>
		{
			// Clear it
			CANSTMOB &= ~(1 << RXOK);
    209e:	ee ee       	ldi	r30, 0xEE	; 238
    20a0:	f0 e0       	ldi	r31, 0x00	; 0
    20a2:	80 81       	ld	r24, Z
    20a4:	8f 7d       	andi	r24, 0xDF	; 223
    20a6:	80 83       	st	Z, r24
		
			if( sg_pfRXCallback )
    20a8:	c0 90 4d 09 	lds	r12, 0x094D	; 0x80094d <sg_pfRXCallback>
    20ac:	d0 90 4e 09 	lds	r13, 0x094E	; 0x80094e <sg_pfRXCallback+0x1>
    20b0:	c1 14       	cp	r12, r1
    20b2:	d1 04       	cpc	r13, r1
    20b4:	61 f1       	breq	.+88     	; 0x210e <CANMOBInterrupt+0xcc>
			{
				ECANMessageType eType;
				uint16_t u16ID = 0;
				uint8_t u8Data[8];
				uint8_t u8DataLen = CANCDMOB & 0x0f;
    20b6:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    20ba:	8f 70       	andi	r24, 0x0F	; 15
    20bc:	f8 2e       	mov	r15, r24
				uint8_t u8Index = 0;
			
				// Grab the messageID from the identifier registers
				// TODO: This extraction may be wrong for extended frames
				// but it worked with the real Pack Controller somehow
				u16ID = ((uint16_t)CANIDT1) << 3;
    20be:	40 91 f3 00 	lds	r20, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f00f3>
    20c2:	50 e0       	ldi	r21, 0x00	; 0
    20c4:	44 0f       	add	r20, r20
    20c6:	55 1f       	adc	r21, r21
    20c8:	44 0f       	add	r20, r20
    20ca:	55 1f       	adc	r21, r21
    20cc:	44 0f       	add	r20, r20
    20ce:	55 1f       	adc	r21, r21
				u16ID |= CANIDT2 >> 5;
    20d0:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f00f2>
    20d4:	82 95       	swap	r24
    20d6:	86 95       	lsr	r24
    20d8:	87 70       	andi	r24, 0x07	; 7
    20da:	48 2b       	or	r20, r24
			{
				ECANMessageType eType;
				uint16_t u16ID = 0;
				uint8_t u8Data[8];
				uint8_t u8DataLen = CANCDMOB & 0x0f;
				uint8_t u8Index = 0;
    20dc:	90 e0       	ldi	r25, 0x00	; 0
				// but it worked with the real Pack Controller somehow
				u16ID = ((uint16_t)CANIDT1) << 3;
				u16ID |= CANIDT2 >> 5;
			
				// Pull the data out into a temp buffer
				while( u8Index < u8DataLen )
    20de:	0a c0       	rjmp	.+20     	; 0x20f4 <CANMOBInterrupt+0xb2>
				{
					u8Data[u8Index] = CANMSG;
    20e0:	20 91 fa 00 	lds	r18, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
    20e4:	e1 e0       	ldi	r30, 0x01	; 1
    20e6:	f0 e0       	ldi	r31, 0x00	; 0
    20e8:	ec 0f       	add	r30, r28
    20ea:	fd 1f       	adc	r31, r29
    20ec:	e9 0f       	add	r30, r25
    20ee:	f1 1d       	adc	r31, r1
    20f0:	20 83       	st	Z, r18
					u8Index++;
    20f2:	9f 5f       	subi	r25, 0xFF	; 255
				// but it worked with the real Pack Controller somehow
				u16ID = ((uint16_t)CANIDT1) << 3;
				u16ID |= CANIDT2 >> 5;
			
				// Pull the data out into a temp buffer
				while( u8Index < u8DataLen )
    20f4:	9f 15       	cp	r25, r15
    20f6:	a0 f3       	brcs	.-24     	; 0x20e0 <CANMOBInterrupt+0x9e>
					u8Data[u8Index] = CANMSG;
					u8Index++;
				}
			
				// Lookup ID to see if it matches one of ours
				eType = CANLookupCommand( u16ID );
    20f8:	ca 01       	movw	r24, r20
    20fa:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <CANLookupCommand>
			
				if( eType != ECANMessageType_MAX )
    20fe:	83 31       	cpi	r24, 0x13	; 19
    2100:	31 f0       	breq	.+12     	; 0x210e <CANMOBInterrupt+0xcc>
				{
					// Call comamnd handler
					sg_pfRXCallback( eType, u8Data, u8DataLen );
    2102:	4f 2d       	mov	r20, r15
    2104:	be 01       	movw	r22, r28
    2106:	6f 5f       	subi	r22, 0xFF	; 255
    2108:	7f 4f       	sbci	r23, 0xFF	; 255
    210a:	f6 01       	movw	r30, r12
    210c:	09 95       	icall
				}
			}
		}
	
		// If receive error, clear the bits
		if( CANSTMOB & ((1 << SERR) | (1 << CERR) | (1 << FERR)) )
    210e:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    2112:	8e 70       	andi	r24, 0x0E	; 14
    2114:	29 f0       	breq	.+10     	; 0x2120 <CANMOBInterrupt+0xde>
		{
			// Clear it.  Just ignore
			CANSTMOB &= ~((1 << SERR) | (1 << CERR) | (1 << FERR));
    2116:	ee ee       	ldi	r30, 0xEE	; 238
    2118:	f0 e0       	ldi	r31, 0x00	; 0
    211a:	80 81       	ld	r24, Z
    211c:	81 7f       	andi	r24, 0xF1	; 241
    211e:	80 83       	st	Z, r24
		}
	
		// Re-enable RX now
		CANIE2 |= (1 << u8MOBIndex);
    2120:	ee ed       	ldi	r30, 0xDE	; 222
    2122:	f0 e0       	ldi	r31, 0x00	; 0
    2124:	80 81       	ld	r24, Z
    2126:	08 2b       	or	r16, r24
    2128:	00 83       	st	Z, r16
		CANCDMOB |= (1 << CONMOB1);
    212a:	ef ee       	ldi	r30, 0xEF	; 239
    212c:	f0 e0       	ldi	r31, 0x00	; 0
    212e:	80 81       	ld	r24, Z
    2130:	80 68       	ori	r24, 0x80	; 128
    2132:	80 83       	st	Z, r24
    2134:	2b c0       	rjmp	.+86     	; 0x218c <CANMOBInterrupt+0x14a>
	}
	else if( CANMOB_TX_IDX == u8MOBIndex )
    2136:	81 30       	cpi	r24, 0x01	; 1
    2138:	49 f5       	brne	.+82     	; 0x218c <CANMOBInterrupt+0x14a>
	{
		if( CANSTMOB & (1 << TXOK) )
    213a:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    213e:	86 ff       	sbrs	r24, 6
    2140:	07 c0       	rjmp	.+14     	; 0x2150 <CANMOBInterrupt+0x10e>
		{
			// Clear it
			CANSTMOB &= ~(1 << TXOK);
    2142:	ee ee       	ldi	r30, 0xEE	; 238
    2144:	f0 e0       	ldi	r31, 0x00	; 0
    2146:	80 81       	ld	r24, Z
    2148:	8f 7b       	andi	r24, 0xBF	; 191
    214a:	80 83       	st	Z, r24
		
			sg_bBusy = false;
    214c:	10 92 69 09 	sts	0x0969, r1	; 0x800969 <sg_bBusy>
//		}

		// If TX Error on transmit (collision with another device)
		// -or- ACK error (nobody listening),
		// retry send
		if( CANSTMOB & ((1 << BERR) | (1 << AERR) | (1 << SERR)) )
    2150:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    2154:	89 71       	andi	r24, 0x19	; 25
    2156:	d1 f0       	breq	.+52     	; 0x218c <CANMOBInterrupt+0x14a>
		{
			// Clear it
			CANSTMOB &= ~((1 << BERR) | (1 << AERR) | (1 << SERR));
    2158:	ee ee       	ldi	r30, 0xEE	; 238
    215a:	f0 e0       	ldi	r31, 0x00	; 0
    215c:	80 81       	ld	r24, Z
    215e:	86 7e       	andi	r24, 0xE6	; 230
    2160:	80 83       	st	Z, r24

			if( sg_u8TransmitAttempts < 20 )
    2162:	80 91 68 09 	lds	r24, 0x0968	; 0x800968 <sg_u8TransmitAttempts>
    2166:	84 31       	cpi	r24, 0x14	; 20
    2168:	68 f4       	brcc	.+26     	; 0x2184 <CANMOBInterrupt+0x142>
			{
				// Retransmit now
               sg_bInRetransmit = true;  // Set flag before retry
    216a:	81 e0       	ldi	r24, 0x01	; 1
    216c:	80 93 65 09 	sts	0x0965, r24	; 0x800965 <sg_bInRetransmit>
               CANSendMessageInternal( sg_eLastTXType, sg_u8LastTXData, sg_u8LastTXDataLen, true );
    2170:	21 e0       	ldi	r18, 0x01	; 1
    2172:	40 91 66 09 	lds	r20, 0x0966	; 0x800966 <sg_u8LastTXDataLen>
    2176:	6d e3       	ldi	r22, 0x3D	; 61
    2178:	79 e0       	ldi	r23, 0x09	; 9
    217a:	80 91 67 09 	lds	r24, 0x0967	; 0x800967 <sg_eLastTXType>
    217e:	0e 94 65 0f 	call	0x1eca	; 0x1eca <CANSendMessageInternal>
    2182:	04 c0       	rjmp	.+8      	; 0x218c <CANMOBInterrupt+0x14a>
			}
			else
			{
				// Retries exhausted.  Give up
				sg_bBusy = false;
    2184:	10 92 69 09 	sts	0x0969, r1	; 0x800969 <sg_bBusy>
                sg_bInRetransmit = false;
    2188:	10 92 65 09 	sts	0x0965, r1	; 0x800965 <sg_bInRetransmit>
			}
		}
	}
}
    218c:	28 96       	adiw	r28, 0x08	; 8
    218e:	0f b6       	in	r0, 0x3f	; 63
    2190:	f8 94       	cli
    2192:	de bf       	out	0x3e, r29	; 62
    2194:	0f be       	out	0x3f, r0	; 63
    2196:	cd bf       	out	0x3d, r28	; 61
    2198:	df 91       	pop	r29
    219a:	cf 91       	pop	r28
    219c:	1f 91       	pop	r17
    219e:	0f 91       	pop	r16
    21a0:	ff 90       	pop	r15
    21a2:	df 90       	pop	r13
    21a4:	cf 90       	pop	r12
    21a6:	08 95       	ret

Disassembly of section .text.__vector_18:

0000257e <__vector_18>:

// Generic CAN interrupt handler
// Check interrrupt sources and clear them (by servicing or explicit clearing)
ISR(CAN_INT_vect, ISR_BLOCK)
{
    257e:	1f 92       	push	r1
    2580:	0f 92       	push	r0
    2582:	0f b6       	in	r0, 0x3f	; 63
    2584:	0f 92       	push	r0
    2586:	11 24       	eor	r1, r1
    2588:	0f 93       	push	r16
    258a:	1f 93       	push	r17
    258c:	2f 93       	push	r18
    258e:	3f 93       	push	r19
    2590:	4f 93       	push	r20
    2592:	5f 93       	push	r21
    2594:	6f 93       	push	r22
    2596:	7f 93       	push	r23
    2598:	8f 93       	push	r24
    259a:	9f 93       	push	r25
    259c:	af 93       	push	r26
    259e:	bf 93       	push	r27
    25a0:	cf 93       	push	r28
    25a2:	df 93       	push	r29
    25a4:	ef 93       	push	r30
    25a6:	ff 93       	push	r31
	// Save state we'll need to restore
	uint8_t saved_cangie = CANGIE;
    25a8:	eb ed       	ldi	r30, 0xDB	; 219
    25aa:	f0 e0       	ldi	r31, 0x00	; 0
    25ac:	d0 81       	ld	r29, Z
	uint8_t saved_canie2 = CANIE2;	// Temporarily disable CAN interrupts to prevent reentry
    25ae:	10 91 de 00 	lds	r17, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7f00de>
	CANGIE &= (uint8_t)~(1 << ENIT);
    25b2:	80 81       	ld	r24, Z
    25b4:	8f 77       	andi	r24, 0x7F	; 127
    25b6:	80 83       	st	Z, r24

	// Do NOT re-enable global interrupts - this causes race conditions!
	
	 uint8_t sit = CANSIT2;
    25b8:	c0 91 e0 00 	lds	r28, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f00e0>
	 
	 // Most common interrupts first  *claude
	 if(sit & (1 << CANMOB_RX_IDX)) {
    25bc:	c0 ff       	sbrs	r28, 0
    25be:	0c c0       	rjmp	.+24     	; 0x25d8 <__vector_18+0x5a>
		 CANMOBInterrupt(CANMOB_RX_IDX);
    25c0:	80 e0       	ldi	r24, 0x00	; 0
    25c2:	0e 94 21 10 	call	0x2042	; 0x2042 <CANMOBInterrupt>
		 CANMOBSet(CANMOB_RX_IDX, &sg_sMOBGenericReceive, NULL, 0);
    25c6:	00 e0       	ldi	r16, 0x00	; 0
    25c8:	20 e0       	ldi	r18, 0x00	; 0
    25ca:	30 e0       	ldi	r19, 0x00	; 0
    25cc:	4f e9       	ldi	r20, 0x9F	; 159
    25ce:	53 e0       	ldi	r21, 0x03	; 3
    25d0:	60 e0       	ldi	r22, 0x00	; 0
    25d2:	80 e0       	ldi	r24, 0x00	; 0
    25d4:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <CANMOBSet>
	 }
	 
	
	// Check TX MOB
	if( sit & (1 << CANMOB_TX_IDX) )
    25d8:	c1 ff       	sbrs	r28, 1
    25da:	03 c0       	rjmp	.+6      	; 0x25e2 <__vector_18+0x64>
	{
		CANMOBInterrupt( CANMOB_TX_IDX );
    25dc:	81 e0       	ldi	r24, 0x01	; 1
    25de:	0e 94 21 10 	call	0x2042	; 0x2042 <CANMOBInterrupt>
	}
	
	// Now the generic, non-MOB interrupts (some of which may have already been handled by the MOB handler)
	
	// Bus Off interrupt
	if( CANGIT & (1 << BOFFIT) )
    25e2:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    25e6:	86 ff       	sbrs	r24, 6
    25e8:	03 c0       	rjmp	.+6      	; 0x25f0 <__vector_18+0x72>
	{
		// Just clear it for now
		CANGIT = (1 << BOFFIT);
    25ea:	80 e4       	ldi	r24, 0x40	; 64
    25ec:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
	}
	
	// Frame buffer receive (burst receive interrupt)
	// This should not be used
	if( CANGIT & (1 << BXOK) )
    25f0:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    25f4:	84 ff       	sbrs	r24, 4
    25f6:	0a c0       	rjmp	.+20     	; 0x260c <__vector_18+0x8e>
	{
		MBASSERT(0);
    25f8:	43 e2       	ldi	r20, 0x23	; 35
    25fa:	52 e0       	ldi	r21, 0x02	; 2
    25fc:	6c e4       	ldi	r22, 0x4C	; 76
    25fe:	73 e0       	ldi	r23, 0x03	; 3
    2600:	80 e0       	ldi	r24, 0x00	; 0
    2602:	0e 94 d0 23 	call	0x47a0	; 0x47a0 <PlatformAssert>
		
		// TODO: Must write the CONMOB fields of the MOB that interrupted first?
		// Just clear it for now
		CANGIT = (1 << BXOK);
    2606:	80 e1       	ldi	r24, 0x10	; 16
    2608:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
	}
	
	// Bit stuffing error on receive
	if( CANGIT & (1 << SERG) )
    260c:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    2610:	83 ff       	sbrs	r24, 3
    2612:	03 c0       	rjmp	.+6      	; 0x261a <__vector_18+0x9c>
	{
		// Just clear it for now.  Ignored.
		CANGIT = (1 << SERG);
    2614:	88 e0       	ldi	r24, 0x08	; 8
    2616:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
	}
	
	// CRC error on receive
	if( CANGIT & (1 << CERG) )
    261a:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    261e:	82 ff       	sbrs	r24, 2
    2620:	03 c0       	rjmp	.+6      	; 0x2628 <__vector_18+0xaa>
	{
		// Just clear it for now.  Ignored.
		CANGIT = (1 << CERG);
    2622:	84 e0       	ldi	r24, 0x04	; 4
    2624:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
	}
	
	// Form error
	if( CANGIT & (1 << FERG) )
    2628:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    262c:	81 ff       	sbrs	r24, 1
    262e:	03 c0       	rjmp	.+6      	; 0x2636 <__vector_18+0xb8>
	{
		// If detected form error on transmit, could be duplicate to MOB error interrupt (see 16.8.2 - Interrupt Behavior)
		// Ignore this one
		
		// Just clear it for now.  Ignored.
		CANGIT = (1 << FERG);
    2630:	82 e0       	ldi	r24, 0x02	; 2
    2632:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
	}
	
	// ACK missing on transmit (nobody's listening! (or failure on transmit???))
	if( CANGIT & (1 << AERG) )
    2636:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    263a:	80 ff       	sbrs	r24, 0
    263c:	13 c0       	rjmp	.+38     	; 0x2664 <__vector_18+0xe6>
	{
		// Clear the interrupt
		CANGIT = (1 << AERG);
    263e:	81 e0       	ldi	r24, 0x01	; 1
    2640:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
		
		if( sg_u8TransmitAttempts < 20 )
    2644:	80 91 68 09 	lds	r24, 0x0968	; 0x800968 <sg_u8TransmitAttempts>
    2648:	84 31       	cpi	r24, 0x14	; 20
    264a:	50 f4       	brcc	.+20     	; 0x2660 <__vector_18+0xe2>
		{
			// Retransmit now
			CANSendMessageInternal( sg_eLastTXType, sg_u8LastTXData, sg_u8LastTXDataLen, true );
    264c:	21 e0       	ldi	r18, 0x01	; 1
    264e:	40 91 66 09 	lds	r20, 0x0966	; 0x800966 <sg_u8LastTXDataLen>
    2652:	6d e3       	ldi	r22, 0x3D	; 61
    2654:	79 e0       	ldi	r23, 0x09	; 9
    2656:	80 91 67 09 	lds	r24, 0x0967	; 0x800967 <sg_eLastTXType>
    265a:	0e 94 65 0f 	call	0x1eca	; 0x1eca <CANSendMessageInternal>
    265e:	02 c0       	rjmp	.+4      	; 0x2664 <__vector_18+0xe6>
		}
		else
		{
			// Retries exhausted.  Give up
			sg_bBusy = false;
    2660:	10 92 69 09 	sts	0x0969, r1	; 0x800969 <sg_bBusy>
		}
	}

	// Reenable CAN general interrupt	
//	CANGIE |= (1 << ENIT);
    CANIE2 = saved_canie2;
    2664:	10 93 de 00 	sts	0x00DE, r17	; 0x8000de <__TEXT_REGION_LENGTH__+0x7f00de>
    CANGIE = saved_cangie;
    2668:	d0 93 db 00 	sts	0x00DB, r29	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f00db>
}
    266c:	ff 91       	pop	r31
    266e:	ef 91       	pop	r30
    2670:	df 91       	pop	r29
    2672:	cf 91       	pop	r28
    2674:	bf 91       	pop	r27
    2676:	af 91       	pop	r26
    2678:	9f 91       	pop	r25
    267a:	8f 91       	pop	r24
    267c:	7f 91       	pop	r23
    267e:	6f 91       	pop	r22
    2680:	5f 91       	pop	r21
    2682:	4f 91       	pop	r20
    2684:	3f 91       	pop	r19
    2686:	2f 91       	pop	r18
    2688:	1f 91       	pop	r17
    268a:	0f 91       	pop	r16
    268c:	0f 90       	pop	r0
    268e:	0f be       	out	0x3f, r0	; 63
    2690:	0f 90       	pop	r0
    2692:	1f 90       	pop	r1
    2694:	18 95       	reti

Disassembly of section .text.CANSendMessage:

00004d02 <CANSendMessage>:
					 uint8_t* pu8Data,
					 uint8_t u8DataLen )
{
	// If we're busy, kick it back so we're cooperatively multitasking
	// rather than spin locking
	if (sg_bBusy)
    4d02:	90 91 69 09 	lds	r25, 0x0969	; 0x800969 <sg_bBusy>
    4d06:	91 11       	cpse	r25, r1
    4d08:	05 c0       	rjmp	.+10     	; 0x4d14 <CANSendMessage+0x12>
	{
		return(false);
	}

	CANSendMessageInternal( eType, pu8Data, u8DataLen, false );
    4d0a:	20 e0       	ldi	r18, 0x00	; 0
    4d0c:	0e 94 65 0f 	call	0x1eca	; 0x1eca <CANSendMessageInternal>
	return( true );
    4d10:	81 e0       	ldi	r24, 0x01	; 1
    4d12:	08 95       	ret
{
	// If we're busy, kick it back so we're cooperatively multitasking
	// rather than spin locking
	if (sg_bBusy)
	{
		return(false);
    4d14:	80 e0       	ldi	r24, 0x00	; 0
	}

	CANSendMessageInternal( eType, pu8Data, u8DataLen, false );
	return( true );
}
    4d16:	08 95       	ret

Disassembly of section .text.CANSetRXCallback:

00004e6e <CANSetRXCallback>:

void CANSetRXCallback( void (*pfCallback)(ECANMessageType eType, uint8_t* pu8Data, uint8_t u8DataLen) )
{
	sg_pfRXCallback = pfCallback;
    4e6e:	90 93 4e 09 	sts	0x094E, r25	; 0x80094e <sg_pfRXCallback+0x1>
    4e72:	80 93 4d 09 	sts	0x094D, r24	; 0x80094d <sg_pfRXCallback>
    4e76:	08 95       	ret

Disassembly of section .text.CANInit:

000035dc <CANInit>:
}

void CANInit( void )
{
    35dc:	0f 93       	push	r16
    35de:	cf 93       	push	r28
	// Init clock
	// See datasheet table 16-2.
	// For 8Mhz, set CAN rate to 500 Kbps
	CANBT1 = 0x02;
    35e0:	c2 e0       	ldi	r28, 0x02	; 2
    35e2:	c0 93 e2 00 	sts	0x00E2, r28	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f00e2>
	CANBT2 = 0x04;
    35e6:	84 e0       	ldi	r24, 0x04	; 4
    35e8:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f00e3>
	CANBT3 = 0x12;
    35ec:	82 e1       	ldi	r24, 0x12	; 18
    35ee:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7f00e4>
	
	// Init message objects (MOBs) since there are no defaults at reset
	CANMOBSet( 0, &sg_sMOBDisabled, NULL, 0 );
    35f2:	00 e0       	ldi	r16, 0x00	; 0
    35f4:	20 e0       	ldi	r18, 0x00	; 0
    35f6:	30 e0       	ldi	r19, 0x00	; 0
    35f8:	47 ea       	ldi	r20, 0xA7	; 167
    35fa:	53 e0       	ldi	r21, 0x03	; 3
    35fc:	60 e0       	ldi	r22, 0x00	; 0
    35fe:	80 e0       	ldi	r24, 0x00	; 0
    3600:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <CANMOBSet>
	CANMOBSet( 1, &sg_sMOBDisabled, NULL, 0 );
    3604:	20 e0       	ldi	r18, 0x00	; 0
    3606:	30 e0       	ldi	r19, 0x00	; 0
    3608:	47 ea       	ldi	r20, 0xA7	; 167
    360a:	53 e0       	ldi	r21, 0x03	; 3
    360c:	60 e0       	ldi	r22, 0x00	; 0
    360e:	81 e0       	ldi	r24, 0x01	; 1
    3610:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <CANMOBSet>
	CANMOBSet( 2, &sg_sMOBDisabled, NULL, 0 );
    3614:	20 e0       	ldi	r18, 0x00	; 0
    3616:	30 e0       	ldi	r19, 0x00	; 0
    3618:	47 ea       	ldi	r20, 0xA7	; 167
    361a:	53 e0       	ldi	r21, 0x03	; 3
    361c:	60 e0       	ldi	r22, 0x00	; 0
    361e:	82 e0       	ldi	r24, 0x02	; 2
    3620:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <CANMOBSet>
	CANMOBSet( 3, &sg_sMOBDisabled, NULL, 0 );
    3624:	20 e0       	ldi	r18, 0x00	; 0
    3626:	30 e0       	ldi	r19, 0x00	; 0
    3628:	47 ea       	ldi	r20, 0xA7	; 167
    362a:	53 e0       	ldi	r21, 0x03	; 3
    362c:	60 e0       	ldi	r22, 0x00	; 0
    362e:	83 e0       	ldi	r24, 0x03	; 3
    3630:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <CANMOBSet>
	CANMOBSet( 4, &sg_sMOBDisabled, NULL, 0 );
    3634:	20 e0       	ldi	r18, 0x00	; 0
    3636:	30 e0       	ldi	r19, 0x00	; 0
    3638:	47 ea       	ldi	r20, 0xA7	; 167
    363a:	53 e0       	ldi	r21, 0x03	; 3
    363c:	60 e0       	ldi	r22, 0x00	; 0
    363e:	84 e0       	ldi	r24, 0x04	; 4
    3640:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <CANMOBSet>
	CANMOBSet( 5, &sg_sMOBDisabled, NULL, 0 );
    3644:	20 e0       	ldi	r18, 0x00	; 0
    3646:	30 e0       	ldi	r19, 0x00	; 0
    3648:	47 ea       	ldi	r20, 0xA7	; 167
    364a:	53 e0       	ldi	r21, 0x03	; 3
    364c:	60 e0       	ldi	r22, 0x00	; 0
    364e:	85 e0       	ldi	r24, 0x05	; 5
    3650:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <CANMOBSet>
	
	// Setup generic RX
	CANMOBSet( CANMOB_RX_IDX, &sg_sMOBGenericReceive, NULL, 0 );
    3654:	20 e0       	ldi	r18, 0x00	; 0
    3656:	30 e0       	ldi	r19, 0x00	; 0
    3658:	4f e9       	ldi	r20, 0x9F	; 159
    365a:	53 e0       	ldi	r21, 0x03	; 3
    365c:	60 e0       	ldi	r22, 0x00	; 0
    365e:	80 e0       	ldi	r24, 0x00	; 0
    3660:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <CANMOBSet>
	
	// Enable general CAN interrupts
	CANGIE = (1 << ENIT) | (1 << ENRX) | (1 << ENTX) | (1 << ENERR) | (1 << ENBX) | (1 << ENERG);
    3664:	8e eb       	ldi	r24, 0xBE	; 190
    3666:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f00db>

//	CANGIE &= ~(1 << ENOVRT);  // Disable CAN timer overflow interrupt

	// Enable the bus
	CANGCON = (1 << ENASTB);
    366a:	c0 93 d8 00 	sts	0x00D8, r28	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f00d8>
	sg_bBusy = false;
    366e:	10 92 69 09 	sts	0x0969, r1	; 0x800969 <sg_bBusy>
}
    3672:	cf 91       	pop	r28
    3674:	0f 91       	pop	r16
    3676:	08 95       	ret

Disassembly of section .text.DebugOut:

00004e1e <DebugOut>:
}

#endif

void DebugOut( const char* peFormat, ... )
{
    4e1e:	cf 93       	push	r28
    4e20:	df 93       	push	r29
    4e22:	cd b7       	in	r28, 0x3d	; 61
    4e24:	de b7       	in	r29, 0x3e	; 62
	
	va_end( args );	 */
	
	//DebugSerialSend( (uint8_t*)u8Buffer, strlen(u8Buffer) );
#endif
}
    4e26:	df 91       	pop	r29
    4e28:	cf 91       	pop	r28
    4e2a:	08 95       	ret

Disassembly of section .text.EEPROMRead:

00004d84 <EEPROMRead>:
}

uint8_t EEPROMRead(uint16_t u16Address)
{
	// Wait for any completion of writes, etc..
	while (EECR & (1 << EEWE));
    4d84:	f9 99       	sbic	0x1f, 1	; 31
    4d86:	fe cf       	rjmp	.-4      	; 0x4d84 <EEPROMRead>

	// Set address	
	EEAR = u16Address;
    4d88:	92 bd       	out	0x22, r25	; 34
    4d8a:	81 bd       	out	0x21, r24	; 33
	
	// Start EEPROM read
	EECR |= (1 << EERE);
    4d8c:	8f b3       	in	r24, 0x1f	; 31
    4d8e:	81 60       	ori	r24, 0x01	; 1
    4d90:	8f bb       	out	0x1f, r24	; 31
	
	// Return the data
	return(EEDR);
    4d92:	80 b5       	in	r24, 0x20	; 32
    4d94:	08 95       	ret

Disassembly of section .text.I2CBitDelay:

00004e2c <I2CBitDelay>:
#define SDA_SET_INPUT()			(I2C_PORT_DDR &= ((uint8_t) ~(1 << I2C_SDA_PIN))); SDA_HIGH()

// Delays for one I2C bit's worth of time
static void I2CBitDelay(void)
{
	Delay(10);
    4e2c:	6a e0       	ldi	r22, 0x0A	; 10
    4e2e:	70 e0       	ldi	r23, 0x00	; 0
    4e30:	80 e0       	ldi	r24, 0x00	; 0
    4e32:	90 e0       	ldi	r25, 0x00	; 0
    4e34:	0e 94 1f 21 	call	0x423e	; 0x423e <Delay>
    4e38:	08 95       	ret

Disassembly of section .text.I2CStart:

00004748 <I2CStart>:

// Send an I2C start sequence and quantize foreground code to the overflow
// timer
void I2CStart(void)
{
	SDA_SET_OUTPUT();
    4748:	8a b1       	in	r24, 0x0a	; 10
    474a:	82 60       	ori	r24, 0x02	; 2
    474c:	8a b9       	out	0x0a, r24	; 10
	SDA_HIGH();
    474e:	8b b1       	in	r24, 0x0b	; 11
    4750:	82 60       	ori	r24, 0x02	; 2
    4752:	8b b9       	out	0x0b, r24	; 11
	SCL_HIGH();
    4754:	8b b1       	in	r24, 0x0b	; 11
    4756:	81 60       	ori	r24, 0x01	; 1
    4758:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    475a:	0e 94 16 27 	call	0x4e2c	; 0x4e2c <I2CBitDelay>
	SDA_LOW();
    475e:	8b b1       	in	r24, 0x0b	; 11
    4760:	8d 7f       	andi	r24, 0xFD	; 253
    4762:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    4764:	0e 94 16 27 	call	0x4e2c	; 0x4e2c <I2CBitDelay>
	SCL_LOW();
    4768:	8b b1       	in	r24, 0x0b	; 11
    476a:	8e 7f       	andi	r24, 0xFE	; 254
    476c:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    476e:	0e 94 16 27 	call	0x4e2c	; 0x4e2c <I2CBitDelay>
    4772:	08 95       	ret

Disassembly of section .text.I2CStop:

000048ea <I2CStop>:
}

// Send an I2C stop sequence
void I2CStop(void)
{
	SDA_LOW();
    48ea:	8b b1       	in	r24, 0x0b	; 11
    48ec:	8d 7f       	andi	r24, 0xFD	; 253
    48ee:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    48f0:	0e 94 16 27 	call	0x4e2c	; 0x4e2c <I2CBitDelay>
	SCL_HIGH();
    48f4:	8b b1       	in	r24, 0x0b	; 11
    48f6:	81 60       	ori	r24, 0x01	; 1
    48f8:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    48fa:	0e 94 16 27 	call	0x4e2c	; 0x4e2c <I2CBitDelay>
	SDA_SET_INPUT();
    48fe:	8a b1       	in	r24, 0x0a	; 10
    4900:	8d 7f       	andi	r24, 0xFD	; 253
    4902:	8a b9       	out	0x0a, r24	; 10
    4904:	8b b1       	in	r24, 0x0b	; 11
    4906:	82 60       	ori	r24, 0x02	; 2
    4908:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    490a:	0e 94 16 27 	call	0x4e2c	; 0x4e2c <I2CBitDelay>
    490e:	08 95       	ret

Disassembly of section .text.I2CUnstick:

00004492 <I2CUnstick>:
}

// Unsticks an I2C bus
void I2CUnstick(void)
{
    4492:	cf 93       	push	r28
	uint8_t u8UnstickBits = 64;

	SCL_SET_OUTPUT();
    4494:	8a b1       	in	r24, 0x0a	; 10
    4496:	81 60       	ori	r24, 0x01	; 1
    4498:	8a b9       	out	0x0a, r24	; 10
	SDA_SET_OUTPUT();
    449a:	8a b1       	in	r24, 0x0a	; 10
    449c:	82 60       	ori	r24, 0x02	; 2
    449e:	8a b9       	out	0x0a, r24	; 10
}

// Unsticks an I2C bus
void I2CUnstick(void)
{
	uint8_t u8UnstickBits = 64;
    44a0:	c0 e4       	ldi	r28, 0x40	; 64

	SCL_SET_OUTPUT();
	SDA_SET_OUTPUT();
	
	while (u8UnstickBits)
    44a2:	11 c0       	rjmp	.+34     	; 0x44c6 <I2CUnstick+0x34>
	{
		SCL_LOW();
    44a4:	8b b1       	in	r24, 0x0b	; 11
    44a6:	8e 7f       	andi	r24, 0xFE	; 254
    44a8:	8b b9       	out	0x0b, r24	; 11
		SDA_LOW();
    44aa:	8b b1       	in	r24, 0x0b	; 11
    44ac:	8d 7f       	andi	r24, 0xFD	; 253
    44ae:	8b b9       	out	0x0b, r24	; 11
		I2CBitDelay();
    44b0:	0e 94 16 27 	call	0x4e2c	; 0x4e2c <I2CBitDelay>
		SCL_HIGH();
    44b4:	8b b1       	in	r24, 0x0b	; 11
    44b6:	81 60       	ori	r24, 0x01	; 1
    44b8:	8b b9       	out	0x0b, r24	; 11
		SDA_HIGH();
    44ba:	8b b1       	in	r24, 0x0b	; 11
    44bc:	82 60       	ori	r24, 0x02	; 2
    44be:	8b b9       	out	0x0b, r24	; 11
		I2CBitDelay();
    44c0:	0e 94 16 27 	call	0x4e2c	; 0x4e2c <I2CBitDelay>
		u8UnstickBits--;
    44c4:	c1 50       	subi	r28, 0x01	; 1
	uint8_t u8UnstickBits = 64;

	SCL_SET_OUTPUT();
	SDA_SET_OUTPUT();
	
	while (u8UnstickBits)
    44c6:	c1 11       	cpse	r28, r1
    44c8:	ed cf       	rjmp	.-38     	; 0x44a4 <I2CUnstick+0x12>
		SCL_HIGH();
		SDA_HIGH();
		I2CBitDelay();
		u8UnstickBits--;
	}
}
    44ca:	cf 91       	pop	r28
    44cc:	08 95       	ret

Disassembly of section .text.I2CTxByte:

00003d8a <I2CTxByte>:

// Sends a single I2C byte. Returns false if the byte is not acked, or true if it is.
bool I2CTxByte(uint8_t u8Byte)
{
    3d8a:	cf 93       	push	r28
    3d8c:	df 93       	push	r29
    3d8e:	d8 2f       	mov	r29, r24
	uint8_t u8Length = 8;			// 8 Bits to send
	bool bAck = false;

	SDA_SET_OUTPUT();
    3d90:	8a b1       	in	r24, 0x0a	; 10
    3d92:	82 60       	ori	r24, 0x02	; 2
    3d94:	8a b9       	out	0x0a, r24	; 10
}

// Sends a single I2C byte. Returns false if the byte is not acked, or true if it is.
bool I2CTxByte(uint8_t u8Byte)
{
	uint8_t u8Length = 8;			// 8 Bits to send
    3d96:	c8 e0       	ldi	r28, 0x08	; 8
	bool bAck = false;

	SDA_SET_OUTPUT();

	while (u8Length)
    3d98:	15 c0       	rjmp	.+42     	; 0x3dc4 <I2CTxByte+0x3a>
	{
		if (u8Byte & 0x80)
    3d9a:	dd 23       	and	r29, r29
    3d9c:	24 f4       	brge	.+8      	; 0x3da6 <I2CTxByte+0x1c>
		{
			SDA_HIGH();
    3d9e:	8b b1       	in	r24, 0x0b	; 11
    3da0:	82 60       	ori	r24, 0x02	; 2
    3da2:	8b b9       	out	0x0b, r24	; 11
    3da4:	03 c0       	rjmp	.+6      	; 0x3dac <I2CTxByte+0x22>
		}
		else
		{
			SDA_LOW();
    3da6:	8b b1       	in	r24, 0x0b	; 11
    3da8:	8d 7f       	andi	r24, 0xFD	; 253
    3daa:	8b b9       	out	0x0b, r24	; 11
		}
		
		// Drive SCL high
		SCL_HIGH();
    3dac:	8b b1       	in	r24, 0x0b	; 11
    3dae:	81 60       	ori	r24, 0x01	; 1
    3db0:	8b b9       	out	0x0b, r24	; 11
		
		I2CBitDelay();
    3db2:	0e 94 16 27 	call	0x4e2c	; 0x4e2c <I2CBitDelay>
		
		// Ensure SCL is low
		SCL_LOW();
    3db6:	8b b1       	in	r24, 0x0b	; 11
    3db8:	8e 7f       	andi	r24, 0xFE	; 254
    3dba:	8b b9       	out	0x0b, r24	; 11
	
		// SDA Is now set. Delay.
		I2CBitDelay();
    3dbc:	0e 94 16 27 	call	0x4e2c	; 0x4e2c <I2CBitDelay>
		
		// Next bit
		u8Byte <<= 1;	
    3dc0:	dd 0f       	add	r29, r29
		u8Length--;
    3dc2:	c1 50       	subi	r28, 0x01	; 1
	uint8_t u8Length = 8;			// 8 Bits to send
	bool bAck = false;

	SDA_SET_OUTPUT();

	while (u8Length)
    3dc4:	c1 11       	cpse	r28, r1
    3dc6:	e9 cf       	rjmp	.-46     	; 0x3d9a <I2CTxByte+0x10>
		// Next bit
		u8Byte <<= 1;	
		u8Length--;
	}
	
	SDA_SET_INPUT();
    3dc8:	8a b1       	in	r24, 0x0a	; 10
    3dca:	8d 7f       	andi	r24, 0xFD	; 253
    3dcc:	8a b9       	out	0x0a, r24	; 10
    3dce:	8b b1       	in	r24, 0x0b	; 11
    3dd0:	82 60       	ori	r24, 0x02	; 2
    3dd2:	8b b9       	out	0x0b, r24	; 11
	SCL_HIGH();
    3dd4:	8b b1       	in	r24, 0x0b	; 11
    3dd6:	81 60       	ori	r24, 0x01	; 1
    3dd8:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    3dda:	0e 94 16 27 	call	0x4e2c	; 0x4e2c <I2CBitDelay>
	
	// See if the byte was acknowledged
	if (SDA_READ())
    3dde:	49 9b       	sbis	0x09, 1	; 9
	{
		bAck = false;
	}
	else
	{
		bAck = true;
    3de0:	c1 e0       	ldi	r28, 0x01	; 1
	}
	
	SCL_LOW();
    3de2:	8b b1       	in	r24, 0x0b	; 11
    3de4:	8e 7f       	andi	r24, 0xFE	; 254
    3de6:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    3de8:	0e 94 16 27 	call	0x4e2c	; 0x4e2c <I2CBitDelay>
	return(bAck);
}
    3dec:	8c 2f       	mov	r24, r28
    3dee:	df 91       	pop	r29
    3df0:	cf 91       	pop	r28
    3df2:	08 95       	ret

Disassembly of section .text.I2CRxByte:

00003c2a <I2CRxByte>:

// Receives a single I2C byte and will optionally generate an ack at the end
uint8_t I2CRxByte(bool bAck)
{
    3c2a:	1f 93       	push	r17
    3c2c:	cf 93       	push	r28
    3c2e:	df 93       	push	r29
    3c30:	18 2f       	mov	r17, r24
	uint8_t u8Data = 0;
	uint8_t u8Count = 8;
	
	SDA_SET_INPUT();
    3c32:	8a b1       	in	r24, 0x0a	; 10
    3c34:	8d 7f       	andi	r24, 0xFD	; 253
    3c36:	8a b9       	out	0x0a, r24	; 10
    3c38:	8b b1       	in	r24, 0x0b	; 11
    3c3a:	82 60       	ori	r24, 0x02	; 2
    3c3c:	8b b9       	out	0x0b, r24	; 11

// Receives a single I2C byte and will optionally generate an ack at the end
uint8_t I2CRxByte(bool bAck)
{
	uint8_t u8Data = 0;
	uint8_t u8Count = 8;
    3c3e:	c8 e0       	ldi	r28, 0x08	; 8
}

// Receives a single I2C byte and will optionally generate an ack at the end
uint8_t I2CRxByte(bool bAck)
{
	uint8_t u8Data = 0;
    3c40:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t u8Count = 8;
	
	SDA_SET_INPUT();
	
	// Consume all 8 data bits
	while (u8Count)
    3c42:	0e c0       	rjmp	.+28     	; 0x3c60 <I2CRxByte+0x36>
	{
		u8Data <<= 1;
    3c44:	dd 0f       	add	r29, r29

		SCL_HIGH();
    3c46:	8b b1       	in	r24, 0x0b	; 11
    3c48:	81 60       	ori	r24, 0x01	; 1
    3c4a:	8b b9       	out	0x0b, r24	; 11
		I2CBitDelay();
    3c4c:	0e 94 16 27 	call	0x4e2c	; 0x4e2c <I2CBitDelay>
			
		if (SDA_READ())
    3c50:	49 99       	sbic	0x09, 1	; 9
		{
			u8Data |= 1;
    3c52:	d1 60       	ori	r29, 0x01	; 1
		}
		
		SCL_LOW();
    3c54:	8b b1       	in	r24, 0x0b	; 11
    3c56:	8e 7f       	andi	r24, 0xFE	; 254
    3c58:	8b b9       	out	0x0b, r24	; 11
		I2CBitDelay();
    3c5a:	0e 94 16 27 	call	0x4e2c	; 0x4e2c <I2CBitDelay>
		u8Count--;
    3c5e:	c1 50       	subi	r28, 0x01	; 1
	uint8_t u8Count = 8;
	
	SDA_SET_INPUT();
	
	// Consume all 8 data bits
	while (u8Count)
    3c60:	c1 11       	cpse	r28, r1
    3c62:	f0 cf       	rjmp	.-32     	; 0x3c44 <I2CRxByte+0x1a>
		I2CBitDelay();
		u8Count--;
	}

	// See if we acknowledge this
	SDA_SET_OUTPUT();
    3c64:	8a b1       	in	r24, 0x0a	; 10
    3c66:	82 60       	ori	r24, 0x02	; 2
    3c68:	8a b9       	out	0x0a, r24	; 10
	if (bAck)
    3c6a:	11 23       	and	r17, r17
    3c6c:	21 f0       	breq	.+8      	; 0x3c76 <I2CRxByte+0x4c>
	{
		SDA_LOW();
    3c6e:	8b b1       	in	r24, 0x0b	; 11
    3c70:	8d 7f       	andi	r24, 0xFD	; 253
    3c72:	8b b9       	out	0x0b, r24	; 11
    3c74:	03 c0       	rjmp	.+6      	; 0x3c7c <I2CRxByte+0x52>
	}
	else
	{
		SDA_HIGH();
    3c76:	8b b1       	in	r24, 0x0b	; 11
    3c78:	82 60       	ori	r24, 0x02	; 2
    3c7a:	8b b9       	out	0x0b, r24	; 11
	}
	
	I2CBitDelay();
    3c7c:	0e 94 16 27 	call	0x4e2c	; 0x4e2c <I2CBitDelay>
	SCL_HIGH();
    3c80:	8b b1       	in	r24, 0x0b	; 11
    3c82:	81 60       	ori	r24, 0x01	; 1
    3c84:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    3c86:	0e 94 16 27 	call	0x4e2c	; 0x4e2c <I2CBitDelay>
	SCL_LOW();
    3c8a:	8b b1       	in	r24, 0x0b	; 11
    3c8c:	8e 7f       	andi	r24, 0xFE	; 254
    3c8e:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    3c90:	0e 94 16 27 	call	0x4e2c	; 0x4e2c <I2CBitDelay>
	SDA_LOW();
    3c94:	8b b1       	in	r24, 0x0b	; 11
    3c96:	8d 7f       	andi	r24, 0xFD	; 253
    3c98:	8b b9       	out	0x0b, r24	; 11

	return(u8Data);	
}
    3c9a:	8d 2f       	mov	r24, r29
    3c9c:	df 91       	pop	r29
    3c9e:	cf 91       	pop	r28
    3ca0:	1f 91       	pop	r17
    3ca2:	08 95       	ret

Disassembly of section .text.I2CSetup:

00004774 <I2CSetup>:
// Prepares the SCL/SDA pins for I2C operation and returns when the CPU is
// quantized to the timer (for consistent bit alignment)
void I2CSetup(void)
{
	// Deassert SCL and SDA
	SCL_HIGH();
    4774:	8b b1       	in	r24, 0x0b	; 11
    4776:	81 60       	ori	r24, 0x01	; 1
    4778:	8b b9       	out	0x0b, r24	; 11
	SDA_HIGH();
    477a:	8b b1       	in	r24, 0x0b	; 11
    477c:	82 60       	ori	r24, 0x02	; 2
    477e:	8b b9       	out	0x0b, r24	; 11

	// Set SCL and SDA lines as push/pull output drives
	SCL_SET_OUTPUT();
    4780:	8a b1       	in	r24, 0x0a	; 10
    4782:	81 60       	ori	r24, 0x01	; 1
    4784:	8a b9       	out	0x0a, r24	; 10
	
	// Turn on SDA, set as an input
	SDA_SET_INPUT();
    4786:	8a b1       	in	r24, 0x0a	; 10
    4788:	8d 7f       	andi	r24, 0xFD	; 253
    478a:	8a b9       	out	0x0a, r24	; 10
    478c:	8b b1       	in	r24, 0x0b	; 11
    478e:	82 60       	ori	r24, 0x02	; 2
    4790:	8b b9       	out	0x0b, r24	; 11
	
	Delay(20);
    4792:	64 e1       	ldi	r22, 0x14	; 20
    4794:	70 e0       	ldi	r23, 0x00	; 0
    4796:	80 e0       	ldi	r24, 0x00	; 0
    4798:	90 e0       	ldi	r25, 0x00	; 0
    479a:	0e 94 1f 21 	call	0x423e	; 0x423e <Delay>
    479e:	08 95       	ret

Disassembly of section .text.I2CStartTransaction:

00004822 <I2CStartTransaction>:

// Sets up the I2C pins, sends slave address/read/write byte, and waits for acknowledgment.
// Returns false if no device is responding.
bool I2CStartTransaction(uint8_t u8SlaveAddress,
						 bool bRead)
{
    4822:	cf 93       	push	r28
    4824:	df 93       	push	r29
    4826:	c8 2f       	mov	r28, r24
    4828:	d6 2f       	mov	r29, r22
	// Set up the pins for I2C operation
	I2CSetup();
    482a:	0e 94 ba 23 	call	0x4774	; 0x4774 <I2CSetup>
	
	// I2C Start condition
	I2CStart();
    482e:	0e 94 a4 23 	call	0x4748	; 0x4748 <I2CStart>

	// If it's a read operation, clear the lower bit
	if (bRead)
    4832:	dd 23       	and	r29, r29
    4834:	19 f0       	breq	.+6      	; 0x483c <I2CStartTransaction+0x1a>
	{
		u8SlaveAddress |= 1;
    4836:	8c 2f       	mov	r24, r28
    4838:	81 60       	ori	r24, 0x01	; 1
    483a:	02 c0       	rjmp	.+4      	; 0x4840 <I2CStartTransaction+0x1e>
	}
	else
	{
		// Otherwise set it
		u8SlaveAddress &= (uint8_t) (~1);
    483c:	8c 2f       	mov	r24, r28
    483e:	8e 7f       	andi	r24, 0xFE	; 254
	}
	
	// Now send out the slave address + the read/write bit
	return(I2CTxByte(u8SlaveAddress));
    4840:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <I2CTxByte>
}
    4844:	df 91       	pop	r29
    4846:	cf 91       	pop	r28
    4848:	08 95       	ret

Disassembly of section .text.CellCountExpectedSet:

00003042 <CellCountExpectedSet>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    3042:	cf 92       	push	r12
    3044:	df 92       	push	r13
    3046:	ef 92       	push	r14
    3048:	ff 92       	push	r15
    304a:	8f 35       	cpi	r24, 0x5F	; 95
    304c:	08 f0       	brcs	.+2      	; 0x3050 <CellCountExpectedSet+0xe>
    304e:	8e e5       	ldi	r24, 0x5E	; 94
    3050:	e0 e1       	ldi	r30, 0x10	; 16
    3052:	f1 e0       	ldi	r31, 0x01	; 1
    3054:	85 8b       	std	Z+21, r24	; 0x15
    3056:	c8 2e       	mov	r12, r24
    3058:	d1 2c       	mov	r13, r1
    305a:	e1 2c       	mov	r14, r1
    305c:	f1 2c       	mov	r15, r1
    305e:	aa ec       	ldi	r26, 0xCA	; 202
    3060:	b8 e0       	ldi	r27, 0x08	; 8
    3062:	a7 01       	movw	r20, r14
    3064:	96 01       	movw	r18, r12
    3066:	0e 94 a2 26 	call	0x4d44	; 0x4d44 <__muluhisi3>
    306a:	65 8f       	std	Z+29, r22	; 0x1d
    306c:	76 8f       	std	Z+30, r23	; 0x1e
    306e:	87 8f       	std	Z+31, r24	; 0x1f
    3070:	90 a3       	std	Z+32, r25	; 0x20
    3072:	a4 e9       	ldi	r26, 0x94	; 148
    3074:	b1 e1       	ldi	r27, 0x11	; 17
    3076:	0e 94 a2 26 	call	0x4d44	; 0x4d44 <__muluhisi3>
    307a:	61 a3       	std	Z+33, r22	; 0x21
    307c:	72 a3       	std	Z+34, r23	; 0x22
    307e:	83 a3       	std	Z+35, r24	; 0x23
    3080:	94 a3       	std	Z+36, r25	; 0x24
    3082:	81 a1       	ldd	r24, Z+33	; 0x21
    3084:	92 a1       	ldd	r25, Z+34	; 0x22
    3086:	a3 a1       	ldd	r26, Z+35	; 0x23
    3088:	b4 a1       	ldd	r27, Z+36	; 0x24
    308a:	45 8d       	ldd	r20, Z+29	; 0x1d
    308c:	56 8d       	ldd	r21, Z+30	; 0x1e
    308e:	67 8d       	ldd	r22, Z+31	; 0x1f
    3090:	70 a1       	ldd	r23, Z+32	; 0x20
    3092:	84 1b       	sub	r24, r20
    3094:	95 0b       	sbc	r25, r21
    3096:	a6 0b       	sbc	r26, r22
    3098:	b7 0b       	sbc	r27, r23
    309a:	88 0f       	add	r24, r24
    309c:	99 1f       	adc	r25, r25
    309e:	aa 1f       	adc	r26, r26
    30a0:	bb 1f       	adc	r27, r27
    30a2:	88 0f       	add	r24, r24
    30a4:	99 1f       	adc	r25, r25
    30a6:	aa 1f       	adc	r26, r26
    30a8:	bb 1f       	adc	r27, r27
    30aa:	88 0f       	add	r24, r24
    30ac:	99 1f       	adc	r25, r25
    30ae:	aa 1f       	adc	r26, r26
    30b0:	bb 1f       	adc	r27, r27
    30b2:	88 0f       	add	r24, r24
    30b4:	99 1f       	adc	r25, r25
    30b6:	aa 1f       	adc	r26, r26
    30b8:	bb 1f       	adc	r27, r27
    30ba:	88 0f       	add	r24, r24
    30bc:	99 1f       	adc	r25, r25
    30be:	aa 1f       	adc	r26, r26
    30c0:	bb 1f       	adc	r27, r27
    30c2:	88 0f       	add	r24, r24
    30c4:	99 1f       	adc	r25, r25
    30c6:	aa 1f       	adc	r26, r26
    30c8:	bb 1f       	adc	r27, r27
    30ca:	88 0f       	add	r24, r24
    30cc:	99 1f       	adc	r25, r25
    30ce:	aa 1f       	adc	r26, r26
    30d0:	bb 1f       	adc	r27, r27
    30d2:	ac 01       	movw	r20, r24
    30d4:	bd 01       	movw	r22, r26
    30d6:	bb 23       	and	r27, r27
    30d8:	24 f4       	brge	.+8      	; 0x30e2 <CellCountExpectedSet+0xa0>
    30da:	41 50       	subi	r20, 0x01	; 1
    30dc:	5c 4f       	sbci	r21, 0xFC	; 252
    30de:	6f 4f       	sbci	r22, 0xFF	; 255
    30e0:	7f 4f       	sbci	r23, 0xFF	; 255
    30e2:	03 2e       	mov	r0, r19
    30e4:	3a e0       	ldi	r19, 0x0A	; 10
    30e6:	75 95       	asr	r23
    30e8:	67 95       	ror	r22
    30ea:	57 95       	ror	r21
    30ec:	47 95       	ror	r20
    30ee:	3a 95       	dec	r19
    30f0:	d1 f7       	brne	.-12     	; 0x30e6 <CellCountExpectedSet+0xa4>
    30f2:	30 2d       	mov	r19, r0
    30f4:	50 93 36 01 	sts	0x0136, r21	; 0x800136 <sg_sFrame+0x26>
    30f8:	40 93 35 01 	sts	0x0135, r20	; 0x800135 <sg_sFrame+0x25>
    30fc:	ff 90       	pop	r15
    30fe:	ef 90       	pop	r14
    3100:	df 90       	pop	r13
    3102:	cf 90       	pop	r12
    3104:	08 95       	ret

Disassembly of section .text.SendModuleControllerStatus:

00004dde <SendModuleControllerStatus>:

static uint8_t sg_u8ControllerStatusMsgCount = 0;

static void SendModuleControllerStatus(void)
{
	sg_bSendModuleControllerStatus = true;
    4dde:	81 e0       	ldi	r24, 0x01	; 1
    4de0:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <sg_bSendModuleControllerStatus>
	sg_u8ControllerStatusMsgCount = 0;
    4de4:	10 92 6e 09 	sts	0x096E, r1	; 0x80096e <sg_u8ControllerStatusMsgCount>
	sg_bIgnoreStatusRequests = true;  // Start ignoring new requests
    4de8:	80 93 76 09 	sts	0x0976, r24	; 0x800976 <sg_bIgnoreStatusRequests>
    4dec:	08 95       	ret

Disassembly of section .text.ModuleControllerStateSet:

00004e78 <ModuleControllerStateSet>:
	MBASSERT(0);
}

static void ModuleControllerStateSet( EModuleControllerState eNext )
{
	if(eNext < EMODSTATE_COUNT)
    4e78:	84 30       	cpi	r24, 0x04	; 4
    4e7a:	10 f4       	brcc	.+4      	; 0x4e80 <ModuleControllerStateSet+0x8>
	{
		sg_eModuleControllerStateTarget = eNext;
    4e7c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <sg_eModuleControllerStateTarget>
    4e80:	08 95       	ret

Disassembly of section .text.ModuleControllerStateSetMax:

00004d18 <ModuleControllerStateSetMax>:



static void ModuleControllerStateSetMax( EModuleControllerState eNext )
{
	if(eNext < EMODSTATE_COUNT)
    4d18:	84 30       	cpi	r24, 0x04	; 4
    4d1a:	40 f4       	brcc	.+16     	; 0x4d2c <ModuleControllerStateSetMax+0x14>
	{
		sg_eModuleControllerStateMax = eNext;
    4d1c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <sg_eModuleControllerStateMax>
		if (sg_eModuleControllerStateCurrent > eNext) // we are in a higher state than allowed
    4d20:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    4d24:	89 17       	cp	r24, r25
    4d26:	10 f4       	brcc	.+4      	; 0x4d2c <ModuleControllerStateSetMax+0x14>
		{
			sg_eModuleControllerStateTarget = eNext;
    4d28:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <sg_eModuleControllerStateTarget>
    4d2c:	08 95       	ret

Disassembly of section .text.Check5VLoss:

00004cba <Check5VLoss>:
}

// Checks for 5V loss
static void Check5VLoss(uint8_t u8NewState)
{
	if( u8NewState & (1 << PIN_5V_DET) )
    4cba:	86 fd       	sbrc	r24, 6
    4cbc:	09 c0       	rjmp	.+18     	; 0x4cd0 <Check5VLoss+0x16>
		// Not asserted
	}
	else
	{
		// 5V detect is low
		FET_EN_DEASSERT();
    4cbe:	88 b1       	in	r24, 0x08	; 8
    4cc0:	8f 7e       	andi	r24, 0xEF	; 239
    4cc2:	88 b9       	out	0x08, r24	; 8
		RELAY_EN_DEASSERT();
    4cc4:	8e b1       	in	r24, 0x0e	; 14
    4cc6:	8d 7f       	andi	r24, 0xFD	; 253
    4cc8:	8e b9       	out	0x0e, r24	; 14
		ModuleControllerStateSet( EMODSTATE_OFF );
    4cca:	80 e0       	ldi	r24, 0x00	; 0
    4ccc:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <ModuleControllerStateSet>
    4cd0:	08 95       	ret

Disassembly of section .text.CellDataConvertVoltage:

00003f86 <CellDataConvertVoltage>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    3f86:	fb 01       	movw	r30, r22
    3f88:	dc 01       	movw	r26, r24
    3f8a:	b3 70       	andi	r27, 0x03	; 3
    3f8c:	2b ed       	ldi	r18, 0xDB	; 219
    3f8e:	36 ea       	ldi	r19, 0xA6	; 166
    3f90:	43 e2       	ldi	r20, 0x23	; 35
    3f92:	50 e0       	ldi	r21, 0x00	; 0
    3f94:	0e 94 a2 26 	call	0x4d44	; 0x4d44 <__muluhisi3>
    3f98:	dc 01       	movw	r26, r24
    3f9a:	cb 01       	movw	r24, r22
    3f9c:	07 2e       	mov	r0, r23
    3f9e:	7a e0       	ldi	r23, 0x0A	; 10
    3fa0:	b6 95       	lsr	r27
    3fa2:	a7 95       	ror	r26
    3fa4:	97 95       	ror	r25
    3fa6:	87 95       	ror	r24
    3fa8:	7a 95       	dec	r23
    3faa:	d1 f7       	brne	.-12     	; 0x3fa0 <CellDataConvertVoltage+0x1a>
    3fac:	70 2d       	mov	r23, r0
    3fae:	9f 5f       	subi	r25, 0xFF	; 255
    3fb0:	af 4f       	sbci	r26, 0xFF	; 255
    3fb2:	bf 4f       	sbci	r27, 0xFF	; 255
    3fb4:	07 2e       	mov	r0, r23
    3fb6:	79 e0       	ldi	r23, 0x09	; 9
    3fb8:	b6 95       	lsr	r27
    3fba:	a7 95       	ror	r26
    3fbc:	97 95       	ror	r25
    3fbe:	87 95       	ror	r24
    3fc0:	7a 95       	dec	r23
    3fc2:	d1 f7       	brne	.-12     	; 0x3fb8 <CellDataConvertVoltage+0x32>
    3fc4:	70 2d       	mov	r23, r0
    3fc6:	9c 01       	movw	r18, r24
    3fc8:	01 97       	sbiw	r24, 0x01	; 1
    3fca:	8e 3f       	cpi	r24, 0xFE	; 254
    3fcc:	9f 4f       	sbci	r25, 0xFF	; 255
    3fce:	10 f4       	brcc	.+4      	; 0x3fd4 <CellDataConvertVoltage+0x4e>
    3fd0:	81 e0       	ldi	r24, 0x01	; 1
    3fd2:	03 c0       	rjmp	.+6      	; 0x3fda <CellDataConvertVoltage+0x54>
    3fd4:	80 e0       	ldi	r24, 0x00	; 0
    3fd6:	20 e0       	ldi	r18, 0x00	; 0
    3fd8:	30 e0       	ldi	r19, 0x00	; 0
    3fda:	30 97       	sbiw	r30, 0x00	; 0
    3fdc:	11 f0       	breq	.+4      	; 0x3fe2 <CellDataConvertVoltage+0x5c>
    3fde:	31 83       	std	Z+1, r19	; 0x01
    3fe0:	20 83       	st	Z, r18
    3fe2:	08 95       	ret

Disassembly of section .text.CellDataConvertTemperature:

00003e5e <CellDataConvertTemperature>:
    3e5e:	8f 3f       	cpi	r24, 0xFF	; 255
    3e60:	2f ef       	ldi	r18, 0xFF	; 255
    3e62:	92 07       	cpc	r25, r18
    3e64:	29 f1       	breq	.+74     	; 0x3eb0 <CellDataConvertTemperature+0x52>
    3e66:	28 2f       	mov	r18, r24
    3e68:	2f 70       	andi	r18, 0x0F	; 15
    3e6a:	94 ff       	sbrs	r25, 4
    3e6c:	02 c0       	rjmp	.+4      	; 0x3e72 <CellDataConvertTemperature+0x14>
    3e6e:	90 6f       	ori	r25, 0xF0	; 240
    3e70:	01 c0       	rjmp	.+2      	; 0x3e74 <CellDataConvertTemperature+0x16>
    3e72:	9f 77       	andi	r25, 0x7F	; 127
    3e74:	ac 01       	movw	r20, r24
    3e76:	55 95       	asr	r21
    3e78:	47 95       	ror	r20
    3e7a:	55 95       	asr	r21
    3e7c:	47 95       	ror	r20
    3e7e:	55 95       	asr	r21
    3e80:	47 95       	ror	r20
    3e82:	55 95       	asr	r21
    3e84:	47 95       	ror	r20
    3e86:	34 e6       	ldi	r19, 0x64	; 100
    3e88:	34 9f       	mul	r19, r20
    3e8a:	c0 01       	movw	r24, r0
    3e8c:	35 9f       	mul	r19, r21
    3e8e:	90 0d       	add	r25, r0
    3e90:	11 24       	eor	r1, r1
    3e92:	30 e0       	ldi	r19, 0x00	; 0
    3e94:	40 e0       	ldi	r20, 0x00	; 0
    3e96:	26 5f       	subi	r18, 0xF6	; 246
    3e98:	3c 4f       	sbci	r19, 0xFC	; 252
    3e9a:	4f 4f       	sbci	r20, 0xFF	; 255
    3e9c:	f9 01       	movw	r30, r18
    3e9e:	24 91       	lpm	r18, Z
    3ea0:	47 fd       	sbrc	r20, 7
    3ea2:	20 81       	ld	r18, Z
    3ea4:	82 0f       	add	r24, r18
    3ea6:	91 1d       	adc	r25, r1
    3ea8:	81 56       	subi	r24, 0x61	; 97
    3eaa:	9a 4e       	sbci	r25, 0xEA	; 234
    3eac:	21 e0       	ldi	r18, 0x01	; 1
    3eae:	01 c0       	rjmp	.+2      	; 0x3eb2 <CellDataConvertTemperature+0x54>
    3eb0:	20 e0       	ldi	r18, 0x00	; 0
    3eb2:	61 15       	cp	r22, r1
    3eb4:	71 05       	cpc	r23, r1
    3eb6:	19 f0       	breq	.+6      	; 0x3ebe <CellDataConvertTemperature+0x60>
    3eb8:	fb 01       	movw	r30, r22
    3eba:	91 83       	std	Z+1, r25	; 0x01
    3ebc:	80 83       	st	Z, r24
    3ebe:	82 2f       	mov	r24, r18
    3ec0:	08 95       	ret

Disassembly of section .text.ModuleCurrentConvertReadings:

00002696 <ModuleCurrentConvertReadings>:
    2696:	a0 91 59 01 	lds	r26, 0x0159	; 0x800159 <sg_sFrame+0x49>
    269a:	b0 91 5a 01 	lds	r27, 0x015A	; 0x80015a <sg_sFrame+0x4a>
    269e:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <sg_sFrame+0x4c>
    26a2:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <sg_sFrame+0x4d>
    26a6:	e0 91 79 09 	lds	r30, 0x0979	; 0x800979 <sg_u8CurrentBufferIndex>
    26aa:	ef 3f       	cpi	r30, 0xFF	; 255
    26ac:	81 f4       	brne	.+32     	; 0x26ce <ModuleCurrentConvertReadings+0x38>
    26ae:	07 c0       	rjmp	.+14     	; 0x26be <ModuleCurrentConvertReadings+0x28>
    26b0:	f0 e0       	ldi	r31, 0x00	; 0
    26b2:	ee 0f       	add	r30, r30
    26b4:	ff 1f       	adc	r31, r31
    26b6:	e3 5e       	subi	r30, 0xE3	; 227
    26b8:	f6 4f       	sbci	r31, 0xF6	; 246
    26ba:	91 83       	std	Z+1, r25	; 0x01
    26bc:	80 83       	st	Z, r24
    26be:	e0 91 79 09 	lds	r30, 0x0979	; 0x800979 <sg_u8CurrentBufferIndex>
    26c2:	ef 5f       	subi	r30, 0xFF	; 255
    26c4:	e0 93 79 09 	sts	0x0979, r30	; 0x800979 <sg_u8CurrentBufferIndex>
    26c8:	e8 30       	cpi	r30, 0x08	; 8
    26ca:	90 f3       	brcs	.-28     	; 0x26b0 <ModuleCurrentConvertReadings+0x1a>
    26cc:	0f c0       	rjmp	.+30     	; 0x26ec <ModuleCurrentConvertReadings+0x56>
    26ce:	21 e0       	ldi	r18, 0x01	; 1
    26d0:	2e 0f       	add	r18, r30
    26d2:	20 93 79 09 	sts	0x0979, r18	; 0x800979 <sg_u8CurrentBufferIndex>
    26d6:	f0 e0       	ldi	r31, 0x00	; 0
    26d8:	ee 0f       	add	r30, r30
    26da:	ff 1f       	adc	r31, r31
    26dc:	e3 5e       	subi	r30, 0xE3	; 227
    26de:	f6 4f       	sbci	r31, 0xF6	; 246
    26e0:	91 83       	std	Z+1, r25	; 0x01
    26e2:	80 83       	st	Z, r24
    26e4:	28 30       	cpi	r18, 0x08	; 8
    26e6:	10 f0       	brcs	.+4      	; 0x26ec <ModuleCurrentConvertReadings+0x56>
    26e8:	10 92 79 09 	sts	0x0979, r1	; 0x800979 <sg_u8CurrentBufferIndex>
    26ec:	80 e0       	ldi	r24, 0x00	; 0
    26ee:	20 e0       	ldi	r18, 0x00	; 0
    26f0:	30 e0       	ldi	r19, 0x00	; 0
    26f2:	0b c0       	rjmp	.+22     	; 0x270a <ModuleCurrentConvertReadings+0x74>
    26f4:	e8 2f       	mov	r30, r24
    26f6:	f0 e0       	ldi	r31, 0x00	; 0
    26f8:	ee 0f       	add	r30, r30
    26fa:	ff 1f       	adc	r31, r31
    26fc:	e3 5e       	subi	r30, 0xE3	; 227
    26fe:	f6 4f       	sbci	r31, 0xF6	; 246
    2700:	40 81       	ld	r20, Z
    2702:	51 81       	ldd	r21, Z+1	; 0x01
    2704:	24 0f       	add	r18, r20
    2706:	35 1f       	adc	r19, r21
    2708:	8f 5f       	subi	r24, 0xFF	; 255
    270a:	88 30       	cpi	r24, 0x08	; 8
    270c:	98 f3       	brcs	.-26     	; 0x26f4 <ModuleCurrentConvertReadings+0x5e>
    270e:	c9 01       	movw	r24, r18
    2710:	99 23       	and	r25, r25
    2712:	0c f4       	brge	.+2      	; 0x2716 <ModuleCurrentConvertReadings+0x80>
    2714:	07 96       	adiw	r24, 0x07	; 7
    2716:	95 95       	asr	r25
    2718:	87 95       	ror	r24
    271a:	95 95       	asr	r25
    271c:	87 95       	ror	r24
    271e:	95 95       	asr	r25
    2720:	87 95       	ror	r24
    2722:	a8 1b       	sub	r26, r24
    2724:	b9 0b       	sbc	r27, r25
    2726:	20 e8       	ldi	r18, 0x80	; 128
    2728:	3c e0       	ldi	r19, 0x0C	; 12
    272a:	0e 94 24 27 	call	0x4e48	; 0x4e48 <__usmulhisi3>
    272e:	ab 01       	movw	r20, r22
    2730:	bc 01       	movw	r22, r24
    2732:	5f 5f       	subi	r21, 0xFF	; 255
    2734:	6f 4f       	sbci	r22, 0xFF	; 255
    2736:	7f 4f       	sbci	r23, 0xFF	; 255
    2738:	db 01       	movw	r26, r22
    273a:	ca 01       	movw	r24, r20
    273c:	77 23       	and	r23, r23
    273e:	24 f4       	brge	.+8      	; 0x2748 <ModuleCurrentConvertReadings+0xb2>
    2740:	81 50       	subi	r24, 0x01	; 1
    2742:	9e 4f       	sbci	r25, 0xFE	; 254
    2744:	af 4f       	sbci	r26, 0xFF	; 255
    2746:	bf 4f       	sbci	r27, 0xFF	; 255
    2748:	07 2e       	mov	r0, r23
    274a:	79 e0       	ldi	r23, 0x09	; 9
    274c:	b5 95       	asr	r27
    274e:	a7 95       	ror	r26
    2750:	97 95       	ror	r25
    2752:	87 95       	ror	r24
    2754:	7a 95       	dec	r23
    2756:	d1 f7       	brne	.-12     	; 0x274c <ModuleCurrentConvertReadings+0xb6>
    2758:	70 2d       	mov	r23, r0
    275a:	90 58       	subi	r25, 0x80	; 128
    275c:	af 4f       	sbci	r26, 0xFF	; 255
    275e:	bf 4f       	sbci	r27, 0xFF	; 255
    2760:	e0 e1       	ldi	r30, 0x10	; 16
    2762:	f1 e0       	ldi	r31, 0x01	; 1
    2764:	90 ab       	std	Z+48, r25	; 0x30
    2766:	87 a7       	std	Z+47, r24	; 0x2f
    2768:	27 a5       	ldd	r18, Z+47	; 0x2f
    276a:	30 a9       	ldd	r19, Z+48	; 0x30
    276c:	86 89       	ldd	r24, Z+22	; 0x16
    276e:	97 89       	ldd	r25, Z+23	; 0x17
    2770:	82 17       	cp	r24, r18
    2772:	93 07       	cpc	r25, r19
    2774:	20 f4       	brcc	.+8      	; 0x277e <ModuleCurrentConvertReadings+0xe8>
    2776:	87 a5       	ldd	r24, Z+47	; 0x2f
    2778:	90 a9       	ldd	r25, Z+48	; 0x30
    277a:	97 8b       	std	Z+23, r25	; 0x17
    277c:	86 8b       	std	Z+22, r24	; 0x16
    277e:	e0 e1       	ldi	r30, 0x10	; 16
    2780:	f1 e0       	ldi	r31, 0x01	; 1
    2782:	27 a5       	ldd	r18, Z+47	; 0x2f
    2784:	30 a9       	ldd	r19, Z+48	; 0x30
    2786:	80 8d       	ldd	r24, Z+24	; 0x18
    2788:	91 8d       	ldd	r25, Z+25	; 0x19
    278a:	28 17       	cp	r18, r24
    278c:	39 07       	cpc	r19, r25
    278e:	20 f4       	brcc	.+8      	; 0x2798 <ModuleCurrentConvertReadings+0x102>
    2790:	87 a5       	ldd	r24, Z+47	; 0x2f
    2792:	90 a9       	ldd	r25, Z+48	; 0x30
    2794:	91 8f       	std	Z+25, r25	; 0x19
    2796:	80 8f       	std	Z+24, r24	; 0x18
    2798:	08 95       	ret

Disassembly of section .text.__vector_1:

00004936 <__vector_1>:

// NOTE: If you're getting unexpected AVR resets, uncomment these unused handlers to see
// if another interrupt is being taken that doesn't have a handler. AVR Defaults to jumping
// to 0 when not vector is programmed.
ISR(ANACOMP0_vect, ISR_BLOCK)
{
    4936:	1f 92       	push	r1
    4938:	0f 92       	push	r0
    493a:	0f b6       	in	r0, 0x3f	; 63
    493c:	0f 92       	push	r0
    493e:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) ANACOMP0_vect;
    4940:	8b e9       	ldi	r24, 0x9B	; 155
    4942:	94 e2       	ldi	r25, 0x24	; 36
    4944:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4948:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    494c:	80 93 6b 09 	sts	0x096B, r24	; 0x80096b <sg_u8PCMSK0>
    4950:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4954:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8PCMSK1>
    4958:	ff cf       	rjmp	.-2      	; 0x4958 <__vector_1+0x22>

Disassembly of section .text.__vector_2:

0000495a <__vector_2>:
	while (1);
}

ISR(ANACOMP1_vect, ISR_BLOCK)
{
    495a:	1f 92       	push	r1
    495c:	0f 92       	push	r0
    495e:	0f b6       	in	r0, 0x3f	; 63
    4960:	0f 92       	push	r0
    4962:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) ANACOMP1_vect;
    4964:	8d ea       	ldi	r24, 0xAD	; 173
    4966:	94 e2       	ldi	r25, 0x24	; 36
    4968:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    496c:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4970:	80 93 6b 09 	sts	0x096B, r24	; 0x80096b <sg_u8PCMSK0>
    4974:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4978:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8PCMSK1>
    497c:	ff cf       	rjmp	.-2      	; 0x497c <__vector_2+0x22>

Disassembly of section .text.__vector_3:

0000497e <__vector_3>:
	while (1);
}

ISR(ANACOMP2_vect, ISR_BLOCK)
{
    497e:	1f 92       	push	r1
    4980:	0f 92       	push	r0
    4982:	0f b6       	in	r0, 0x3f	; 63
    4984:	0f 92       	push	r0
    4986:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) ANACOMP2_vect;
    4988:	8f eb       	ldi	r24, 0xBF	; 191
    498a:	94 e2       	ldi	r25, 0x24	; 36
    498c:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4990:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4994:	80 93 6b 09 	sts	0x096B, r24	; 0x80096b <sg_u8PCMSK0>
    4998:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    499c:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8PCMSK1>
    49a0:	ff cf       	rjmp	.-2      	; 0x49a0 <__vector_3+0x22>

Disassembly of section .text.__vector_4:

000049a2 <__vector_4>:
	while (1);
}

ISR(ANACOMP3_vect, ISR_BLOCK)
{
    49a2:	1f 92       	push	r1
    49a4:	0f 92       	push	r0
    49a6:	0f b6       	in	r0, 0x3f	; 63
    49a8:	0f 92       	push	r0
    49aa:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) ANACOMP3_vect;
    49ac:	81 ed       	ldi	r24, 0xD1	; 209
    49ae:	94 e2       	ldi	r25, 0x24	; 36
    49b0:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    49b4:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    49b8:	80 93 6b 09 	sts	0x096B, r24	; 0x80096b <sg_u8PCMSK0>
    49bc:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    49c0:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8PCMSK1>
    49c4:	ff cf       	rjmp	.-2      	; 0x49c4 <__vector_4+0x22>

Disassembly of section .text.__vector_5:

000049c6 <__vector_5>:
	while (1);
}

ISR(PSC_FAULT_vect, ISR_BLOCK)
{
    49c6:	1f 92       	push	r1
    49c8:	0f 92       	push	r0
    49ca:	0f b6       	in	r0, 0x3f	; 63
    49cc:	0f 92       	push	r0
    49ce:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) PSC_FAULT_vect;
    49d0:	83 ee       	ldi	r24, 0xE3	; 227
    49d2:	94 e2       	ldi	r25, 0x24	; 36
    49d4:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    49d8:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    49dc:	80 93 6b 09 	sts	0x096B, r24	; 0x80096b <sg_u8PCMSK0>
    49e0:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    49e4:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8PCMSK1>
    49e8:	ff cf       	rjmp	.-2      	; 0x49e8 <__vector_5+0x22>

Disassembly of section .text.__vector_6:

000049ea <__vector_6>:
	while (1);
}

ISR(PSC_EC_vect, ISR_BLOCK)
{
    49ea:	1f 92       	push	r1
    49ec:	0f 92       	push	r0
    49ee:	0f b6       	in	r0, 0x3f	; 63
    49f0:	0f 92       	push	r0
    49f2:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) PSC_EC_vect;
    49f4:	85 ef       	ldi	r24, 0xF5	; 245
    49f6:	94 e2       	ldi	r25, 0x24	; 36
    49f8:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    49fc:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4a00:	80 93 6b 09 	sts	0x096B, r24	; 0x80096b <sg_u8PCMSK0>
    4a04:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4a08:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8PCMSK1>
    4a0c:	ff cf       	rjmp	.-2      	; 0x4a0c <__vector_6+0x22>

Disassembly of section .text.__vector_22:

00004a0e <__vector_22>:
	while (1);
}

ISR(PCINT0_vect, ISR_BLOCK)
{
    4a0e:	1f 92       	push	r1
    4a10:	0f 92       	push	r0
    4a12:	0f b6       	in	r0, 0x3f	; 63
    4a14:	0f 92       	push	r0
    4a16:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) PCINT0_vect;
    4a18:	87 e0       	ldi	r24, 0x07	; 7
    4a1a:	95 e2       	ldi	r25, 0x25	; 37
    4a1c:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4a20:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4a24:	80 93 6b 09 	sts	0x096B, r24	; 0x80096b <sg_u8PCMSK0>
    4a28:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4a2c:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8PCMSK1>
    4a30:	ff cf       	rjmp	.-2      	; 0x4a30 <__vector_22+0x22>

Disassembly of section .text.__vector_9:

00004a32 <__vector_9>:
// 	while (1);
// }
*/

ISR(INT2_vect, ISR_BLOCK)
{
    4a32:	1f 92       	push	r1
    4a34:	0f 92       	push	r0
    4a36:	0f b6       	in	r0, 0x3f	; 63
    4a38:	0f 92       	push	r0
    4a3a:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) INT2_vect;
    4a3c:	89 e1       	ldi	r24, 0x19	; 25
    4a3e:	95 e2       	ldi	r25, 0x25	; 37
    4a40:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4a44:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4a48:	80 93 6b 09 	sts	0x096B, r24	; 0x80096b <sg_u8PCMSK0>
    4a4c:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4a50:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8PCMSK1>
    4a54:	ff cf       	rjmp	.-2      	; 0x4a54 <__vector_9+0x22>

Disassembly of section .text.__vector_11:

00004a56 <__vector_11>:
// 	while (1);
// }


ISR(TIMER1_CAPT_vect, ISR_BLOCK)
{
    4a56:	1f 92       	push	r1
    4a58:	0f 92       	push	r0
    4a5a:	0f b6       	in	r0, 0x3f	; 63
    4a5c:	0f 92       	push	r0
    4a5e:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) TIMER1_CAPT_vect;
    4a60:	8b e2       	ldi	r24, 0x2B	; 43
    4a62:	95 e2       	ldi	r25, 0x25	; 37
    4a64:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4a68:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4a6c:	80 93 6b 09 	sts	0x096B, r24	; 0x80096b <sg_u8PCMSK0>
    4a70:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4a74:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8PCMSK1>
    4a78:	ff cf       	rjmp	.-2      	; 0x4a78 <__vector_11+0x22>

Disassembly of section .text.__vector_13:

00004a7a <__vector_13>:
// }



ISR(TIMER1_COMPB_vect, ISR_BLOCK)
{
    4a7a:	1f 92       	push	r1
    4a7c:	0f 92       	push	r0
    4a7e:	0f b6       	in	r0, 0x3f	; 63
    4a80:	0f 92       	push	r0
    4a82:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) TIMER1_COMPB_vect;
    4a84:	8d e3       	ldi	r24, 0x3D	; 61
    4a86:	95 e2       	ldi	r25, 0x25	; 37
    4a88:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4a8c:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4a90:	80 93 6b 09 	sts	0x096B, r24	; 0x80096b <sg_u8PCMSK0>
    4a94:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4a98:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8PCMSK1>
    4a9c:	ff cf       	rjmp	.-2      	; 0x4a9c <__vector_13+0x22>

Disassembly of section .text.__vector_14:

00004a9e <__vector_14>:
	while (1);
}


ISR(TIMER1_OVF_vect, ISR_BLOCK)
{
    4a9e:	1f 92       	push	r1
    4aa0:	0f 92       	push	r0
    4aa2:	0f b6       	in	r0, 0x3f	; 63
    4aa4:	0f 92       	push	r0
    4aa6:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) TIMER1_OVF_vect;
    4aa8:	8f e4       	ldi	r24, 0x4F	; 79
    4aaa:	95 e2       	ldi	r25, 0x25	; 37
    4aac:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4ab0:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4ab4:	80 93 6b 09 	sts	0x096B, r24	; 0x80096b <sg_u8PCMSK0>
    4ab8:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4abc:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8PCMSK1>
    4ac0:	ff cf       	rjmp	.-2      	; 0x4ac0 <__vector_14+0x22>

Disassembly of section .text.__vector_17:

00004ac2 <__vector_17>:
	while (1);
}

ISR(TIMER0_OVF_vect, ISR_BLOCK)
{
    4ac2:	1f 92       	push	r1
    4ac4:	0f 92       	push	r0
    4ac6:	0f b6       	in	r0, 0x3f	; 63
    4ac8:	0f 92       	push	r0
    4aca:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) TIMER0_OVF_vect;
    4acc:	81 e6       	ldi	r24, 0x61	; 97
    4ace:	95 e2       	ldi	r25, 0x25	; 37
    4ad0:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4ad4:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4ad8:	80 93 6b 09 	sts	0x096B, r24	; 0x80096b <sg_u8PCMSK0>
    4adc:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4ae0:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8PCMSK1>
    4ae4:	ff cf       	rjmp	.-2      	; 0x4ae4 <__vector_17+0x22>

Disassembly of section .text.__vector_19:

00004ae6 <__vector_19>:
	while (1);
}

ISR(CAN_TOVF_vect, ISR_BLOCK)
{
    4ae6:	1f 92       	push	r1
    4ae8:	0f 92       	push	r0
    4aea:	0f b6       	in	r0, 0x3f	; 63
    4aec:	0f 92       	push	r0
    4aee:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) CAN_TOVF_vect;
    4af0:	83 e7       	ldi	r24, 0x73	; 115
    4af2:	95 e2       	ldi	r25, 0x25	; 37
    4af4:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4af8:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4afc:	80 93 6b 09 	sts	0x096B, r24	; 0x80096b <sg_u8PCMSK0>
    4b00:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4b04:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8PCMSK1>
    4b08:	ff cf       	rjmp	.-2      	; 0x4b08 <__vector_19+0x22>

Disassembly of section .text.__vector_21:

00004b0a <__vector_21>:
	while (1);
}

ISR(LIN_ERR_vect, ISR_BLOCK)
{
    4b0a:	1f 92       	push	r1
    4b0c:	0f 92       	push	r0
    4b0e:	0f b6       	in	r0, 0x3f	; 63
    4b10:	0f 92       	push	r0
    4b12:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) LIN_ERR_vect;
    4b14:	85 e8       	ldi	r24, 0x85	; 133
    4b16:	95 e2       	ldi	r25, 0x25	; 37
    4b18:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4b1c:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4b20:	80 93 6b 09 	sts	0x096B, r24	; 0x80096b <sg_u8PCMSK0>
    4b24:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4b28:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8PCMSK1>
    4b2c:	ff cf       	rjmp	.-2      	; 0x4b2c <__vector_21+0x22>

Disassembly of section .text.__vector_25:

00004b2e <__vector_25>:
// 	while (1);
// }


ISR(PCINT3_vect, ISR_BLOCK)
{
    4b2e:	1f 92       	push	r1
    4b30:	0f 92       	push	r0
    4b32:	0f b6       	in	r0, 0x3f	; 63
    4b34:	0f 92       	push	r0
    4b36:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) PCINT3_vect;
    4b38:	87 e9       	ldi	r24, 0x97	; 151
    4b3a:	95 e2       	ldi	r25, 0x25	; 37
    4b3c:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4b40:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4b44:	80 93 6b 09 	sts	0x096B, r24	; 0x80096b <sg_u8PCMSK0>
    4b48:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4b4c:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8PCMSK1>
    4b50:	ff cf       	rjmp	.-2      	; 0x4b50 <__vector_25+0x22>

Disassembly of section .text.__vector_26:

00004b52 <__vector_26>:
	while (1);
}


ISR(SPI_STC_vect, ISR_BLOCK)
{
    4b52:	1f 92       	push	r1
    4b54:	0f 92       	push	r0
    4b56:	0f b6       	in	r0, 0x3f	; 63
    4b58:	0f 92       	push	r0
    4b5a:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) SPI_STC_vect;
    4b5c:	89 ea       	ldi	r24, 0xA9	; 169
    4b5e:	95 e2       	ldi	r25, 0x25	; 37
    4b60:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4b64:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4b68:	80 93 6b 09 	sts	0x096B, r24	; 0x80096b <sg_u8PCMSK0>
    4b6c:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4b70:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8PCMSK1>
    4b74:	ff cf       	rjmp	.-2      	; 0x4b74 <__vector_26+0x22>

Disassembly of section .text.__vector_29:

00004b76 <__vector_29>:
	while (1);
}

ISR(EE_READY_vect, ISR_BLOCK)
{
    4b76:	1f 92       	push	r1
    4b78:	0f 92       	push	r0
    4b7a:	0f b6       	in	r0, 0x3f	; 63
    4b7c:	0f 92       	push	r0
    4b7e:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) EE_READY_vect;
    4b80:	8b eb       	ldi	r24, 0xBB	; 187
    4b82:	95 e2       	ldi	r25, 0x25	; 37
    4b84:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4b88:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4b8c:	80 93 6b 09 	sts	0x096B, r24	; 0x80096b <sg_u8PCMSK0>
    4b90:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4b94:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8PCMSK1>
    4b98:	ff cf       	rjmp	.-2      	; 0x4b98 <__vector_29+0x22>

Disassembly of section .text.__vector_30:

00004b9a <__vector_30>:
	while (1);
}

ISR(SPM_READY_vect, ISR_BLOCK)
{
    4b9a:	1f 92       	push	r1
    4b9c:	0f 92       	push	r0
    4b9e:	0f b6       	in	r0, 0x3f	; 63
    4ba0:	0f 92       	push	r0
    4ba2:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) SPM_READY_vect;
    4ba4:	8d ec       	ldi	r24, 0xCD	; 205
    4ba6:	95 e2       	ldi	r25, 0x25	; 37
    4ba8:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4bac:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4bb0:	80 93 6b 09 	sts	0x096B, r24	; 0x80096b <sg_u8PCMSK0>
    4bb4:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4bb8:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8PCMSK1>
    4bbc:	ff cf       	rjmp	.-2      	; 0x4bbc <__vector_30+0x22>

Disassembly of section .text.CurrentThresholdsGet:

00003678 <CurrentThresholdsGet>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    3678:	0f 93       	push	r16
    367a:	1f 93       	push	r17
    367c:	cf 93       	push	r28
    367e:	df 93       	push	r29
    3680:	8c 01       	movw	r16, r24
    3682:	eb 01       	movw	r28, r22
    3684:	89 2b       	or	r24, r25
    3686:	f9 f0       	breq	.+62     	; 0x36c6 <CurrentThresholdsGet+0x4e>
    3688:	87 e0       	ldi	r24, 0x07	; 7
    368a:	90 e0       	ldi	r25, 0x00	; 0
    368c:	0e 94 c2 26 	call	0x4d84	; 0x4d84 <EEPROMRead>
    3690:	90 e0       	ldi	r25, 0x00	; 0
    3692:	f8 01       	movw	r30, r16
    3694:	91 83       	std	Z+1, r25	; 0x01
    3696:	80 83       	st	Z, r24
    3698:	88 e0       	ldi	r24, 0x08	; 8
    369a:	90 e0       	ldi	r25, 0x00	; 0
    369c:	0e 94 c2 26 	call	0x4d84	; 0x4d84 <EEPROMRead>
    36a0:	90 e0       	ldi	r25, 0x00	; 0
    36a2:	98 2f       	mov	r25, r24
    36a4:	88 27       	eor	r24, r24
    36a6:	f8 01       	movw	r30, r16
    36a8:	20 81       	ld	r18, Z
    36aa:	31 81       	ldd	r19, Z+1	; 0x01
    36ac:	82 2b       	or	r24, r18
    36ae:	93 2b       	or	r25, r19
    36b0:	91 83       	std	Z+1, r25	; 0x01
    36b2:	80 83       	st	Z, r24
    36b4:	01 97       	sbiw	r24, 0x01	; 1
    36b6:	8e 3f       	cpi	r24, 0xFE	; 254
    36b8:	9f 4f       	sbci	r25, 0xFF	; 255
    36ba:	28 f0       	brcs	.+10     	; 0x36c6 <CurrentThresholdsGet+0x4e>
    36bc:	8c ec       	ldi	r24, 0xCC	; 204
    36be:	97 e7       	ldi	r25, 0x77	; 119
    36c0:	f8 01       	movw	r30, r16
    36c2:	91 83       	std	Z+1, r25	; 0x01
    36c4:	80 83       	st	Z, r24
    36c6:	20 97       	sbiw	r28, 0x00	; 0
    36c8:	e1 f0       	breq	.+56     	; 0x3702 <CurrentThresholdsGet+0x8a>
    36ca:	85 e0       	ldi	r24, 0x05	; 5
    36cc:	90 e0       	ldi	r25, 0x00	; 0
    36ce:	0e 94 c2 26 	call	0x4d84	; 0x4d84 <EEPROMRead>
    36d2:	90 e0       	ldi	r25, 0x00	; 0
    36d4:	99 83       	std	Y+1, r25	; 0x01
    36d6:	88 83       	st	Y, r24
    36d8:	86 e0       	ldi	r24, 0x06	; 6
    36da:	90 e0       	ldi	r25, 0x00	; 0
    36dc:	0e 94 c2 26 	call	0x4d84	; 0x4d84 <EEPROMRead>
    36e0:	90 e0       	ldi	r25, 0x00	; 0
    36e2:	98 2f       	mov	r25, r24
    36e4:	88 27       	eor	r24, r24
    36e6:	28 81       	ld	r18, Y
    36e8:	39 81       	ldd	r19, Y+1	; 0x01
    36ea:	82 2b       	or	r24, r18
    36ec:	93 2b       	or	r25, r19
    36ee:	99 83       	std	Y+1, r25	; 0x01
    36f0:	88 83       	st	Y, r24
    36f2:	01 97       	sbiw	r24, 0x01	; 1
    36f4:	8e 3f       	cpi	r24, 0xFE	; 254
    36f6:	9f 4f       	sbci	r25, 0xFF	; 255
    36f8:	20 f0       	brcs	.+8      	; 0x3702 <CurrentThresholdsGet+0x8a>
    36fa:	84 ef       	ldi	r24, 0xF4	; 244
    36fc:	91 e8       	ldi	r25, 0x81	; 129
    36fe:	99 83       	std	Y+1, r25	; 0x01
    3700:	88 83       	st	Y, r24
    3702:	df 91       	pop	r29
    3704:	cf 91       	pop	r28
    3706:	1f 91       	pop	r17
    3708:	0f 91       	pop	r16
    370a:	08 95       	ret

Disassembly of section .text.CANReceiveCallback:

000011cc <CANReceiveCallback>:
    11cc:	cf 92       	push	r12
    11ce:	df 92       	push	r13
    11d0:	ef 92       	push	r14
    11d2:	ff 92       	push	r15
    11d4:	cf 93       	push	r28
    11d6:	fb 01       	movw	r30, r22
    11d8:	90 91 21 03 	lds	r25, 0x0321	; 0x800321 <sg_bModuleRegistered>
    11dc:	10 92 72 09 	sts	0x0972, r1	; 0x800972 <sg_u8TicksSinceLastPackControllerMessage>
    11e0:	82 31       	cpi	r24, 0x12	; 18
    11e2:	29 f4       	brne	.+10     	; 0x11ee <CANReceiveCallback+0x22>
    11e4:	80 81       	ld	r24, Z
    11e6:	8f 70       	andi	r24, 0x0F	; 15
    11e8:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <ModuleControllerStateSetMax>
    11ec:	35 c1       	rjmp	.+618    	; 0x1458 <CANReceiveCallback+0x28c>
    11ee:	8f 30       	cpi	r24, 0x0F	; 15
    11f0:	a9 f4       	brne	.+42     	; 0x121c <CANReceiveCallback+0x50>
    11f2:	8a ed       	ldi	r24, 0xDA	; 218
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	a0 e0       	ldi	r26, 0x00	; 0
    11f8:	af 93       	push	r26
    11fa:	9f 93       	push	r25
    11fc:	8f 93       	push	r24
    11fe:	0e 94 0f 27 	call	0x4e1e	; 0x4e1e <DebugOut>
    1202:	10 92 27 03 	sts	0x0327, r1	; 0x800327 <sg_u8ModuleRegistrationID>
    1206:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <sg_bModuleRegistered>
    120a:	10 92 76 09 	sts	0x0976, r1	; 0x800976 <sg_bIgnoreStatusRequests>
    120e:	80 e0       	ldi	r24, 0x00	; 0
    1210:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <ModuleControllerStateSet>
    1214:	0f 90       	pop	r0
    1216:	0f 90       	pop	r0
    1218:	0f 90       	pop	r0
    121a:	1e c1       	rjmp	.+572    	; 0x1458 <CANReceiveCallback+0x28c>
    121c:	80 31       	cpi	r24, 0x10	; 16
    121e:	21 f4       	brne	.+8      	; 0x1228 <CANReceiveCallback+0x5c>
    1220:	80 e0       	ldi	r24, 0x00	; 0
    1222:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <ModuleControllerStateSet>
    1226:	18 c1       	rjmp	.+560    	; 0x1458 <CANReceiveCallback+0x28c>
    1228:	81 31       	cpi	r24, 0x11	; 17
    122a:	59 f4       	brne	.+22     	; 0x1242 <CANReceiveCallback+0x76>
    122c:	20 81       	ld	r18, Z
    122e:	31 81       	ldd	r19, Z+1	; 0x01
    1230:	42 81       	ldd	r20, Z+2	; 0x02
    1232:	53 81       	ldd	r21, Z+3	; 0x03
    1234:	64 81       	ldd	r22, Z+4	; 0x04
    1236:	75 81       	ldd	r23, Z+5	; 0x05
    1238:	86 81       	ldd	r24, Z+6	; 0x06
    123a:	97 81       	ldd	r25, Z+7	; 0x07
    123c:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <RTCSetTime>
    1240:	0b c1       	rjmp	.+534    	; 0x1458 <CANReceiveCallback+0x28c>
    1242:	8d 30       	cpi	r24, 0x0D	; 13
    1244:	09 f0       	breq	.+2      	; 0x1248 <CANReceiveCallback+0x7c>
    1246:	4f c0       	rjmp	.+158    	; 0x12e6 <CANReceiveCallback+0x11a>
    1248:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <sg_bModuleRegistered>
    124c:	81 11       	cpse	r24, r1
    124e:	2f c0       	rjmp	.+94     	; 0x12ae <CANReceiveCallback+0xe2>
    1250:	80 91 78 09 	lds	r24, 0x0978	; 0x800978 <sg_bAnnouncementPending>
    1254:	81 11       	cpse	r24, r1
    1256:	2b c0       	rjmp	.+86     	; 0x12ae <CANReceiveCallback+0xe2>
    1258:	c0 90 1e 01 	lds	r12, 0x011E	; 0x80011e <sg_sFrame+0xe>
    125c:	d0 90 1f 01 	lds	r13, 0x011F	; 0x80011f <sg_sFrame+0xf>
    1260:	e0 90 20 01 	lds	r14, 0x0120	; 0x800120 <sg_sFrame+0x10>
    1264:	f0 90 21 01 	lds	r15, 0x0121	; 0x800121 <sg_sFrame+0x11>
    1268:	1f 92       	push	r1
    126a:	cf 92       	push	r12
    126c:	85 e0       	ldi	r24, 0x05	; 5
    126e:	91 e0       	ldi	r25, 0x01	; 1
    1270:	a0 e0       	ldi	r26, 0x00	; 0
    1272:	af 93       	push	r26
    1274:	9f 93       	push	r25
    1276:	8f 93       	push	r24
    1278:	0e 94 0f 27 	call	0x4e1e	; 0x4e1e <DebugOut>
    127c:	8d ec       	ldi	r24, 0xCD	; 205
    127e:	c8 9e       	mul	r12, r24
    1280:	c1 2c       	mov	r12, r1
    1282:	11 24       	eor	r1, r1
    1284:	c6 94       	lsr	r12
    1286:	c6 94       	lsr	r12
    1288:	c6 94       	lsr	r12
    128a:	c0 92 77 09 	sts	0x0977, r12	; 0x800977 <sg_u8AnnouncementDelayTicks>
    128e:	80 91 77 09 	lds	r24, 0x0977	; 0x800977 <sg_u8AnnouncementDelayTicks>
    1292:	0f 90       	pop	r0
    1294:	0f 90       	pop	r0
    1296:	0f 90       	pop	r0
    1298:	0f 90       	pop	r0
    129a:	0f 90       	pop	r0
    129c:	81 11       	cpse	r24, r1
    129e:	03 c0       	rjmp	.+6      	; 0x12a6 <CANReceiveCallback+0xda>
    12a0:	81 e0       	ldi	r24, 0x01	; 1
    12a2:	80 93 77 09 	sts	0x0977, r24	; 0x800977 <sg_u8AnnouncementDelayTicks>
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	80 93 78 09 	sts	0x0978, r24	; 0x800978 <sg_bAnnouncementPending>
    12ac:	d5 c0       	rjmp	.+426    	; 0x1458 <CANReceiveCallback+0x28c>
    12ae:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <sg_bModuleRegistered>
    12b2:	88 23       	and	r24, r24
    12b4:	61 f0       	breq	.+24     	; 0x12ce <CANReceiveCallback+0x102>
    12b6:	88 e4       	ldi	r24, 0x48	; 72
    12b8:	91 e0       	ldi	r25, 0x01	; 1
    12ba:	a0 e0       	ldi	r26, 0x00	; 0
    12bc:	af 93       	push	r26
    12be:	9f 93       	push	r25
    12c0:	8f 93       	push	r24
    12c2:	0e 94 0f 27 	call	0x4e1e	; 0x4e1e <DebugOut>
    12c6:	0f 90       	pop	r0
    12c8:	0f 90       	pop	r0
    12ca:	0f 90       	pop	r0
    12cc:	c5 c0       	rjmp	.+394    	; 0x1458 <CANReceiveCallback+0x28c>
    12ce:	86 e7       	ldi	r24, 0x76	; 118
    12d0:	91 e0       	ldi	r25, 0x01	; 1
    12d2:	a0 e0       	ldi	r26, 0x00	; 0
    12d4:	af 93       	push	r26
    12d6:	9f 93       	push	r25
    12d8:	8f 93       	push	r24
    12da:	0e 94 0f 27 	call	0x4e1e	; 0x4e1e <DebugOut>
    12de:	0f 90       	pop	r0
    12e0:	0f 90       	pop	r0
    12e2:	0f 90       	pop	r0
    12e4:	b9 c0       	rjmp	.+370    	; 0x1458 <CANReceiveCallback+0x28c>
    12e6:	89 30       	cpi	r24, 0x09	; 9
    12e8:	09 f0       	breq	.+2      	; 0x12ec <CANReceiveCallback+0x120>
    12ea:	41 c0       	rjmp	.+130    	; 0x136e <CANReceiveCallback+0x1a2>
    12ec:	48 30       	cpi	r20, 0x08	; 8
    12ee:	09 f0       	breq	.+2      	; 0x12f2 <CANReceiveCallback+0x126>
    12f0:	b3 c0       	rjmp	.+358    	; 0x1458 <CANReceiveCallback+0x28c>
    12f2:	f0 80       	ld	r15, Z
    12f4:	82 81       	ldd	r24, Z+2	; 0x02
    12f6:	82 30       	cpi	r24, 0x02	; 2
    12f8:	09 f0       	breq	.+2      	; 0x12fc <CANReceiveCallback+0x130>
    12fa:	ae c0       	rjmp	.+348    	; 0x1458 <CANReceiveCallback+0x28c>
    12fc:	83 81       	ldd	r24, Z+3	; 0x03
    12fe:	83 30       	cpi	r24, 0x03	; 3
    1300:	09 f0       	breq	.+2      	; 0x1304 <CANReceiveCallback+0x138>
    1302:	aa c0       	rjmp	.+340    	; 0x1458 <CANReceiveCallback+0x28c>
    1304:	40 91 1e 01 	lds	r20, 0x011E	; 0x80011e <sg_sFrame+0xe>
    1308:	50 91 1f 01 	lds	r21, 0x011F	; 0x80011f <sg_sFrame+0xf>
    130c:	60 91 20 01 	lds	r22, 0x0120	; 0x800120 <sg_sFrame+0x10>
    1310:	70 91 21 01 	lds	r23, 0x0121	; 0x800121 <sg_sFrame+0x11>
    1314:	84 81       	ldd	r24, Z+4	; 0x04
    1316:	95 81       	ldd	r25, Z+5	; 0x05
    1318:	a6 81       	ldd	r26, Z+6	; 0x06
    131a:	b7 81       	ldd	r27, Z+7	; 0x07
    131c:	48 17       	cp	r20, r24
    131e:	59 07       	cpc	r21, r25
    1320:	6a 07       	cpc	r22, r26
    1322:	7b 07       	cpc	r23, r27
    1324:	09 f0       	breq	.+2      	; 0x1328 <CANReceiveCallback+0x15c>
    1326:	98 c0       	rjmp	.+304    	; 0x1458 <CANReceiveCallback+0x28c>
    1328:	10 92 72 09 	sts	0x0972, r1	; 0x800972 <sg_u8TicksSinceLastPackControllerMessage>
    132c:	f0 92 27 03 	sts	0x0327, r15	; 0x800327 <sg_u8ModuleRegistrationID>
    1330:	0e 94 ef 26 	call	0x4dde	; 0x4dde <SendModuleControllerStatus>
    1334:	c1 e0       	ldi	r28, 0x01	; 1
    1336:	c0 93 1c 03 	sts	0x031C, r28	; 0x80031c <sg_bSendHardwareDetail>
    133a:	c0 93 21 03 	sts	0x0321, r28	; 0x800321 <sg_bModuleRegistered>
    133e:	10 92 76 09 	sts	0x0976, r1	; 0x800976 <sg_bIgnoreStatusRequests>
    1342:	1f 92       	push	r1
    1344:	ff 92       	push	r15
    1346:	8e e9       	ldi	r24, 0x9E	; 158
    1348:	91 e0       	ldi	r25, 0x01	; 1
    134a:	a0 e0       	ldi	r26, 0x00	; 0
    134c:	af 93       	push	r26
    134e:	9f 93       	push	r25
    1350:	8f 93       	push	r24
    1352:	0e 94 0f 27 	call	0x4e1e	; 0x4e1e <DebugOut>
    1356:	10 92 78 09 	sts	0x0978, r1	; 0x800978 <sg_bAnnouncementPending>
    135a:	10 92 77 09 	sts	0x0977, r1	; 0x800977 <sg_u8AnnouncementDelayTicks>
    135e:	c0 93 20 03 	sts	0x0320, r28	; 0x800320 <sg_bSendTimeRequest>
    1362:	0f 90       	pop	r0
    1364:	0f 90       	pop	r0
    1366:	0f 90       	pop	r0
    1368:	0f 90       	pop	r0
    136a:	0f 90       	pop	r0
    136c:	75 c0       	rjmp	.+234    	; 0x1458 <CANReceiveCallback+0x28c>
    136e:	44 23       	and	r20, r20
    1370:	09 f4       	brne	.+2      	; 0x1374 <CANReceiveCallback+0x1a8>
    1372:	72 c0       	rjmp	.+228    	; 0x1458 <CANReceiveCallback+0x28c>
    1374:	20 81       	ld	r18, Z
    1376:	91 11       	cpse	r25, r1
    1378:	08 c0       	rjmp	.+16     	; 0x138a <CANReceiveCallback+0x1be>
    137a:	8a 30       	cpi	r24, 0x0A	; 10
    137c:	09 f0       	breq	.+2      	; 0x1380 <CANReceiveCallback+0x1b4>
    137e:	6c c0       	rjmp	.+216    	; 0x1458 <CANReceiveCallback+0x28c>
    1380:	90 91 21 03 	lds	r25, 0x0321	; 0x800321 <sg_bModuleRegistered>
    1384:	99 23       	and	r25, r25
    1386:	09 f4       	brne	.+2      	; 0x138a <CANReceiveCallback+0x1be>
    1388:	67 c0       	rjmp	.+206    	; 0x1458 <CANReceiveCallback+0x28c>
    138a:	90 91 27 03 	lds	r25, 0x0327	; 0x800327 <sg_u8ModuleRegistrationID>
    138e:	29 13       	cpse	r18, r25
    1390:	63 c0       	rjmp	.+198    	; 0x1458 <CANReceiveCallback+0x28c>
    1392:	8a 30       	cpi	r24, 0x0A	; 10
    1394:	a9 f4       	brne	.+42     	; 0x13c0 <CANReceiveCallback+0x1f4>
    1396:	41 30       	cpi	r20, 0x01	; 1
    1398:	09 f0       	breq	.+2      	; 0x139c <CANReceiveCallback+0x1d0>
    139a:	5e c0       	rjmp	.+188    	; 0x1458 <CANReceiveCallback+0x28c>
    139c:	80 91 76 09 	lds	r24, 0x0976	; 0x800976 <sg_bIgnoreStatusRequests>
    13a0:	81 11       	cpse	r24, r1
    13a2:	5a c0       	rjmp	.+180    	; 0x1458 <CANReceiveCallback+0x28c>
    13a4:	89 ed       	ldi	r24, 0xD9	; 217
    13a6:	91 e0       	ldi	r25, 0x01	; 1
    13a8:	a0 e0       	ldi	r26, 0x00	; 0
    13aa:	af 93       	push	r26
    13ac:	9f 93       	push	r25
    13ae:	8f 93       	push	r24
    13b0:	0e 94 0f 27 	call	0x4e1e	; 0x4e1e <DebugOut>
    13b4:	0e 94 ef 26 	call	0x4dde	; 0x4dde <SendModuleControllerStatus>
    13b8:	0f 90       	pop	r0
    13ba:	0f 90       	pop	r0
    13bc:	0f 90       	pop	r0
    13be:	4c c0       	rjmp	.+152    	; 0x1458 <CANReceiveCallback+0x28c>
    13c0:	8b 30       	cpi	r24, 0x0B	; 11
    13c2:	f9 f4       	brne	.+62     	; 0x1402 <CANReceiveCallback+0x236>
    13c4:	43 30       	cpi	r20, 0x03	; 3
    13c6:	09 f0       	breq	.+2      	; 0x13ca <CANReceiveCallback+0x1fe>
    13c8:	47 c0       	rjmp	.+142    	; 0x1458 <CANReceiveCallback+0x28c>
    13ca:	80 91 1d 03 	lds	r24, 0x031D	; 0x80031d <sg_bSendCellStatus>
    13ce:	81 11       	cpse	r24, r1
    13d0:	43 c0       	rjmp	.+134    	; 0x1458 <CANReceiveCallback+0x28c>
    13d2:	81 81       	ldd	r24, Z+1	; 0x01
    13d4:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <sg_sFrame+0x15>
    13d8:	89 17       	cp	r24, r25
    13da:	f0 f5       	brcc	.+124    	; 0x1458 <CANReceiveCallback+0x28c>
    13dc:	80 93 23 03 	sts	0x0323, r24	; 0x800323 <sg_u8CellStatus>
    13e0:	90 91 23 03 	lds	r25, 0x0323	; 0x800323 <sg_u8CellStatus>
    13e4:	9f 5f       	subi	r25, 0xFF	; 255
    13e6:	90 93 24 03 	sts	0x0324, r25	; 0x800324 <sg_u8CellStatusTarget>
    13ea:	8f 3f       	cpi	r24, 0xFF	; 255
    13ec:	31 f4       	brne	.+12     	; 0x13fa <CANReceiveCallback+0x22e>
    13ee:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <sg_sFrame+0x15>
    13f2:	80 93 24 03 	sts	0x0324, r24	; 0x800324 <sg_u8CellStatusTarget>
    13f6:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <sg_u8CellStatus>
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	80 93 1d 03 	sts	0x031D, r24	; 0x80031d <sg_bSendCellStatus>
    1400:	2b c0       	rjmp	.+86     	; 0x1458 <CANReceiveCallback+0x28c>
    1402:	8c 30       	cpi	r24, 0x0C	; 12
    1404:	49 f4       	brne	.+18     	; 0x1418 <CANReceiveCallback+0x24c>
    1406:	10 92 72 09 	sts	0x0972, r1	; 0x800972 <sg_u8TicksSinceLastPackControllerMessage>
    140a:	42 30       	cpi	r20, 0x02	; 2
    140c:	29 f5       	brne	.+74     	; 0x1458 <CANReceiveCallback+0x28c>
    140e:	81 81       	ldd	r24, Z+1	; 0x01
    1410:	8f 70       	andi	r24, 0x0F	; 15
    1412:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <ModuleControllerStateSet>
    1416:	20 c0       	rjmp	.+64     	; 0x1458 <CANReceiveCallback+0x28c>
    1418:	85 30       	cpi	r24, 0x05	; 5
    141a:	21 f4       	brne	.+8      	; 0x1424 <CANReceiveCallback+0x258>
    141c:	81 e0       	ldi	r24, 0x01	; 1
    141e:	80 93 1c 03 	sts	0x031C, r24	; 0x80031c <sg_bSendHardwareDetail>
    1422:	1a c0       	rjmp	.+52     	; 0x1458 <CANReceiveCallback+0x28c>
    1424:	8e 30       	cpi	r24, 0x0E	; 14
    1426:	c1 f4       	brne	.+48     	; 0x1458 <CANReceiveCallback+0x28c>
    1428:	1f 92       	push	r1
    142a:	2f 93       	push	r18
    142c:	8e ef       	ldi	r24, 0xFE	; 254
    142e:	91 e0       	ldi	r25, 0x01	; 1
    1430:	a0 e0       	ldi	r26, 0x00	; 0
    1432:	af 93       	push	r26
    1434:	9f 93       	push	r25
    1436:	8f 93       	push	r24
    1438:	0e 94 0f 27 	call	0x4e1e	; 0x4e1e <DebugOut>
    143c:	10 92 27 03 	sts	0x0327, r1	; 0x800327 <sg_u8ModuleRegistrationID>
    1440:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <sg_bModuleRegistered>
    1444:	10 92 76 09 	sts	0x0976, r1	; 0x800976 <sg_bIgnoreStatusRequests>
    1448:	80 e0       	ldi	r24, 0x00	; 0
    144a:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <ModuleControllerStateSet>
    144e:	0f 90       	pop	r0
    1450:	0f 90       	pop	r0
    1452:	0f 90       	pop	r0
    1454:	0f 90       	pop	r0
    1456:	0f 90       	pop	r0
    1458:	cf 91       	pop	r28
    145a:	ff 90       	pop	r15
    145c:	ef 90       	pop	r14
    145e:	df 90       	pop	r13
    1460:	cf 90       	pop	r12
    1462:	08 95       	ret

Disassembly of section .text.ControllerStatusMessagesSend:

00000810 <ControllerStatusMessagesSend>:
 810:	cf 92       	push	r12
 812:	df 92       	push	r13
 814:	ef 92       	push	r14
 816:	ff 92       	push	r15
 818:	0f 93       	push	r16
 81a:	1f 93       	push	r17
 81c:	cf 93       	push	r28
 81e:	df 93       	push	r29
 820:	00 d0       	rcall	.+0      	; 0x822 <ControllerStatusMessagesSend+0x12>
 822:	00 d0       	rcall	.+0      	; 0x824 <ControllerStatusMessagesSend+0x14>
 824:	cd b7       	in	r28, 0x3d	; 61
 826:	de b7       	in	r29, 0x3e	; 62
 828:	8c 01       	movw	r16, r24
 82a:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <sg_bSendTimeRequest>
 82e:	88 23       	and	r24, r24
 830:	69 f0       	breq	.+26     	; 0x84c <ControllerStatusMessagesSend+0x3c>
 832:	88 e0       	ldi	r24, 0x08	; 8
 834:	d8 01       	movw	r26, r16
 836:	1d 92       	st	X+, r1
 838:	8a 95       	dec	r24
 83a:	e9 f7       	brne	.-6      	; 0x836 <ControllerStatusMessagesSend+0x26>
 83c:	48 e0       	ldi	r20, 0x08	; 8
 83e:	b8 01       	movw	r22, r16
 840:	88 e0       	ldi	r24, 0x08	; 8
 842:	0e 94 81 26 	call	0x4d02	; 0x4d02 <CANSendMessage>
 846:	81 11       	cpse	r24, r1
 848:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <sg_bSendTimeRequest>
 84c:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <sg_bSendModuleControllerStatus>
 850:	88 23       	and	r24, r24
 852:	09 f4       	brne	.+2      	; 0x856 <ControllerStatusMessagesSend+0x46>
 854:	06 c1       	rjmp	.+524    	; 0xa62 <ControllerStatusMessagesSend+0x252>
 856:	80 91 6e 09 	lds	r24, 0x096E	; 0x80096e <sg_u8ControllerStatusMsgCount>
 85a:	81 11       	cpse	r24, r1
 85c:	80 c0       	rjmp	.+256    	; 0x95e <ControllerStatusMessagesSend+0x14e>
 85e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
 862:	8f 70       	andi	r24, 0x0F	; 15
 864:	f8 01       	movw	r30, r16
 866:	80 83       	st	Z, r24
 868:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <sg_u8SOC>
 86c:	81 83       	std	Z+1, r24	; 0x01
 86e:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <sg_u8SOH>
 872:	82 83       	std	Z+2, r24	; 0x02
 874:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <sg_sFrame+0x15>
 878:	83 83       	std	Z+3, r24	; 0x03
 87a:	84 e0       	ldi	r24, 0x04	; 4
 87c:	34 96       	adiw	r30, 0x04	; 4
 87e:	df 01       	movw	r26, r30
 880:	1d 92       	st	X+, r1
 882:	8a 95       	dec	r24
 884:	e9 f7       	brne	.-6      	; 0x880 <ControllerStatusMessagesSend+0x70>
 886:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <sg_sFrame+0x48>
 88a:	88 23       	and	r24, r24
 88c:	79 f0       	breq	.+30     	; 0x8ac <ControllerStatusMessagesSend+0x9c>
 88e:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <sg_sFrame+0x4b>
 892:	88 23       	and	r24, r24
 894:	71 f0       	breq	.+28     	; 0x8b2 <ControllerStatusMessagesSend+0xa2>
 896:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
 89a:	83 30       	cpi	r24, 0x03	; 3
 89c:	69 f4       	brne	.+26     	; 0x8b8 <ControllerStatusMessagesSend+0xa8>
 89e:	0e 94 4b 13 	call	0x2696	; 0x2696 <ModuleCurrentConvertReadings>
 8a2:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <sg_sFrame+0x2f>
 8a6:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <sg_sFrame+0x30>
 8aa:	08 c0       	rjmp	.+16     	; 0x8bc <ControllerStatusMessagesSend+0xac>
 8ac:	80 e0       	ldi	r24, 0x00	; 0
 8ae:	90 e8       	ldi	r25, 0x80	; 128
 8b0:	05 c0       	rjmp	.+10     	; 0x8bc <ControllerStatusMessagesSend+0xac>
 8b2:	80 e0       	ldi	r24, 0x00	; 0
 8b4:	90 e8       	ldi	r25, 0x80	; 128
 8b6:	02 c0       	rjmp	.+4      	; 0x8bc <ControllerStatusMessagesSend+0xac>
 8b8:	80 e0       	ldi	r24, 0x00	; 0
 8ba:	90 e8       	ldi	r25, 0x80	; 128
 8bc:	f8 01       	movw	r30, r16
 8be:	84 83       	std	Z+4, r24	; 0x04
 8c0:	95 83       	std	Z+5, r25	; 0x05
 8c2:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <sg_sFrame+0x45>
 8c6:	88 23       	and	r24, r24
 8c8:	79 f0       	breq	.+30     	; 0x8e8 <ControllerStatusMessagesSend+0xd8>
 8ca:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <sg_sFrame+0x46>
 8ce:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <sg_sFrame+0x47>
 8d2:	4f ef       	ldi	r20, 0xFF	; 255
 8d4:	53 e0       	ldi	r21, 0x03	; 3
 8d6:	60 e0       	ldi	r22, 0x00	; 0
 8d8:	70 e0       	ldi	r23, 0x00	; 0
 8da:	9a 01       	movw	r18, r20
 8dc:	ab 01       	movw	r20, r22
 8de:	28 1b       	sub	r18, r24
 8e0:	39 0b       	sbc	r19, r25
 8e2:	41 09       	sbc	r20, r1
 8e4:	51 09       	sbc	r21, r1
 8e6:	03 c0       	rjmp	.+6      	; 0x8ee <ControllerStatusMessagesSend+0xde>
 8e8:	20 e0       	ldi	r18, 0x00	; 0
 8ea:	30 e0       	ldi	r19, 0x00	; 0
 8ec:	a9 01       	movw	r20, r18
 8ee:	e0 e1       	ldi	r30, 0x10	; 16
 8f0:	f1 e0       	ldi	r31, 0x01	; 1
 8f2:	a5 a1       	ldd	r26, Z+37	; 0x25
 8f4:	b6 a1       	ldd	r27, Z+38	; 0x26
 8f6:	0e 94 ff 26 	call	0x4dfe	; 0x4dfe <__mulshisi3>
 8fa:	dc 01       	movw	r26, r24
 8fc:	cb 01       	movw	r24, r22
 8fe:	68 94       	set
 900:	16 f8       	bld	r1, 6
 902:	b6 95       	lsr	r27
 904:	a7 95       	ror	r26
 906:	97 95       	ror	r25
 908:	87 95       	ror	r24
 90a:	16 94       	lsr	r1
 90c:	d1 f7       	brne	.-12     	; 0x902 <ControllerStatusMessagesSend+0xf2>
 90e:	c5 8c       	ldd	r12, Z+29	; 0x1d
 910:	d6 8c       	ldd	r13, Z+30	; 0x1e
 912:	e7 8c       	ldd	r14, Z+31	; 0x1f
 914:	f0 a0       	ldd	r15, Z+32	; 0x20
 916:	bc 01       	movw	r22, r24
 918:	cd 01       	movw	r24, r26
 91a:	6c 0d       	add	r22, r12
 91c:	7d 1d       	adc	r23, r13
 91e:	8e 1d       	adc	r24, r14
 920:	9f 1d       	adc	r25, r15
 922:	2f e0       	ldi	r18, 0x0F	; 15
 924:	30 e0       	ldi	r19, 0x00	; 0
 926:	40 e0       	ldi	r20, 0x00	; 0
 928:	50 e0       	ldi	r21, 0x00	; 0
 92a:	0e 94 08 22 	call	0x4410	; 0x4410 <__udivmodsi4>
 92e:	20 93 51 01 	sts	0x0151, r18	; 0x800151 <sg_sFrame+0x41>
 932:	30 93 52 01 	sts	0x0152, r19	; 0x800152 <sg_sFrame+0x42>
 936:	40 93 53 01 	sts	0x0153, r20	; 0x800153 <sg_sFrame+0x43>
 93a:	50 93 54 01 	sts	0x0154, r21	; 0x800154 <sg_sFrame+0x44>
 93e:	d8 01       	movw	r26, r16
 940:	16 96       	adiw	r26, 0x06	; 6
 942:	2c 93       	st	X, r18
 944:	16 97       	sbiw	r26, 0x06	; 6
 946:	17 96       	adiw	r26, 0x07	; 7
 948:	3c 93       	st	X, r19
 94a:	48 e0       	ldi	r20, 0x08	; 8
 94c:	b8 01       	movw	r22, r16
 94e:	81 e0       	ldi	r24, 0x01	; 1
 950:	0e 94 81 26 	call	0x4d02	; 0x4d02 <CANSendMessage>
 954:	88 23       	and	r24, r24
 956:	09 f4       	brne	.+2      	; 0x95a <ControllerStatusMessagesSend+0x14a>
 958:	6b c0       	rjmp	.+214    	; 0xa30 <ControllerStatusMessagesSend+0x220>
 95a:	81 e0       	ldi	r24, 0x01	; 1
 95c:	70 c0       	rjmp	.+224    	; 0xa3e <ControllerStatusMessagesSend+0x22e>
 95e:	81 30       	cpi	r24, 0x01	; 1
 960:	c1 f5       	brne	.+112    	; 0x9d2 <ControllerStatusMessagesSend+0x1c2>
 962:	e0 e1       	ldi	r30, 0x10	; 16
 964:	f1 e0       	ldi	r31, 0x01	; 1
 966:	81 ad       	ldd	r24, Z+57	; 0x39
 968:	92 ad       	ldd	r25, Z+58	; 0x3a
 96a:	d8 01       	movw	r26, r16
 96c:	8c 93       	st	X, r24
 96e:	81 ad       	ldd	r24, Z+57	; 0x39
 970:	92 ad       	ldd	r25, Z+58	; 0x3a
 972:	11 96       	adiw	r26, 0x01	; 1
 974:	9c 93       	st	X, r25
 976:	11 97       	sbiw	r26, 0x01	; 1
 978:	87 a9       	ldd	r24, Z+55	; 0x37
 97a:	90 ad       	ldd	r25, Z+56	; 0x38
 97c:	12 96       	adiw	r26, 0x02	; 2
 97e:	8c 93       	st	X, r24
 980:	12 97       	sbiw	r26, 0x02	; 2
 982:	87 a9       	ldd	r24, Z+55	; 0x37
 984:	90 ad       	ldd	r25, Z+56	; 0x38
 986:	13 96       	adiw	r26, 0x03	; 3
 988:	9c 93       	st	X, r25
 98a:	13 97       	sbiw	r26, 0x03	; 3
 98c:	83 ad       	ldd	r24, Z+59	; 0x3b
 98e:	94 ad       	ldd	r25, Z+60	; 0x3c
 990:	14 96       	adiw	r26, 0x04	; 4
 992:	8c 93       	st	X, r24
 994:	14 97       	sbiw	r26, 0x04	; 4
 996:	83 ad       	ldd	r24, Z+59	; 0x3b
 998:	94 ad       	ldd	r25, Z+60	; 0x3c
 99a:	15 96       	adiw	r26, 0x05	; 5
 99c:	9c 93       	st	X, r25
 99e:	60 91 4d 01 	lds	r22, 0x014D	; 0x80014d <sg_sFrame+0x3d>
 9a2:	70 91 4e 01 	lds	r23, 0x014E	; 0x80014e <sg_sFrame+0x3e>
 9a6:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <sg_sFrame+0x3f>
 9aa:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <sg_sFrame+0x40>
 9ae:	2f e0       	ldi	r18, 0x0F	; 15
 9b0:	30 e0       	ldi	r19, 0x00	; 0
 9b2:	40 e0       	ldi	r20, 0x00	; 0
 9b4:	50 e0       	ldi	r21, 0x00	; 0
 9b6:	0e 94 08 22 	call	0x4410	; 0x4410 <__udivmodsi4>
 9ba:	f8 01       	movw	r30, r16
 9bc:	26 83       	std	Z+6, r18	; 0x06
 9be:	37 83       	std	Z+7, r19	; 0x07
 9c0:	48 e0       	ldi	r20, 0x08	; 8
 9c2:	b8 01       	movw	r22, r16
 9c4:	82 e0       	ldi	r24, 0x02	; 2
 9c6:	0e 94 81 26 	call	0x4d02	; 0x4d02 <CANSendMessage>
 9ca:	88 23       	and	r24, r24
 9cc:	99 f1       	breq	.+102    	; 0xa34 <ControllerStatusMessagesSend+0x224>
 9ce:	81 e0       	ldi	r24, 0x01	; 1
 9d0:	36 c0       	rjmp	.+108    	; 0xa3e <ControllerStatusMessagesSend+0x22e>
 9d2:	82 30       	cpi	r24, 0x02	; 2
 9d4:	89 f5       	brne	.+98     	; 0xa38 <ControllerStatusMessagesSend+0x228>
 9d6:	e0 e1       	ldi	r30, 0x10	; 16
 9d8:	f1 e0       	ldi	r31, 0x01	; 1
 9da:	83 a9       	ldd	r24, Z+51	; 0x33
 9dc:	94 a9       	ldd	r25, Z+52	; 0x34
 9de:	d8 01       	movw	r26, r16
 9e0:	8c 93       	st	X, r24
 9e2:	83 a9       	ldd	r24, Z+51	; 0x33
 9e4:	94 a9       	ldd	r25, Z+52	; 0x34
 9e6:	11 96       	adiw	r26, 0x01	; 1
 9e8:	9c 93       	st	X, r25
 9ea:	11 97       	sbiw	r26, 0x01	; 1
 9ec:	81 a9       	ldd	r24, Z+49	; 0x31
 9ee:	92 a9       	ldd	r25, Z+50	; 0x32
 9f0:	12 96       	adiw	r26, 0x02	; 2
 9f2:	8c 93       	st	X, r24
 9f4:	12 97       	sbiw	r26, 0x02	; 2
 9f6:	81 a9       	ldd	r24, Z+49	; 0x31
 9f8:	92 a9       	ldd	r25, Z+50	; 0x32
 9fa:	13 96       	adiw	r26, 0x03	; 3
 9fc:	9c 93       	st	X, r25
 9fe:	13 97       	sbiw	r26, 0x03	; 3
 a00:	85 a9       	ldd	r24, Z+53	; 0x35
 a02:	96 a9       	ldd	r25, Z+54	; 0x36
 a04:	14 96       	adiw	r26, 0x04	; 4
 a06:	8c 93       	st	X, r24
 a08:	14 97       	sbiw	r26, 0x04	; 4
 a0a:	85 a9       	ldd	r24, Z+53	; 0x35
 a0c:	96 a9       	ldd	r25, Z+54	; 0x36
 a0e:	15 96       	adiw	r26, 0x05	; 5
 a10:	9c 93       	st	X, r25
 a12:	15 97       	sbiw	r26, 0x05	; 5
 a14:	16 96       	adiw	r26, 0x06	; 6
 a16:	1c 92       	st	X, r1
 a18:	16 97       	sbiw	r26, 0x06	; 6
 a1a:	17 96       	adiw	r26, 0x07	; 7
 a1c:	1c 92       	st	X, r1
 a1e:	48 e0       	ldi	r20, 0x08	; 8
 a20:	b8 01       	movw	r22, r16
 a22:	83 e0       	ldi	r24, 0x03	; 3
 a24:	0e 94 81 26 	call	0x4d02	; 0x4d02 <CANSendMessage>
 a28:	88 23       	and	r24, r24
 a2a:	41 f0       	breq	.+16     	; 0xa3c <ControllerStatusMessagesSend+0x22c>
 a2c:	81 e0       	ldi	r24, 0x01	; 1
 a2e:	07 c0       	rjmp	.+14     	; 0xa3e <ControllerStatusMessagesSend+0x22e>
 a30:	80 e0       	ldi	r24, 0x00	; 0
 a32:	05 c0       	rjmp	.+10     	; 0xa3e <ControllerStatusMessagesSend+0x22e>
 a34:	80 e0       	ldi	r24, 0x00	; 0
 a36:	03 c0       	rjmp	.+6      	; 0xa3e <ControllerStatusMessagesSend+0x22e>
 a38:	81 e0       	ldi	r24, 0x01	; 1
 a3a:	01 c0       	rjmp	.+2      	; 0xa3e <ControllerStatusMessagesSend+0x22e>
 a3c:	80 e0       	ldi	r24, 0x00	; 0
 a3e:	88 23       	and	r24, r24
 a40:	81 f0       	breq	.+32     	; 0xa62 <ControllerStatusMessagesSend+0x252>
 a42:	80 91 6e 09 	lds	r24, 0x096E	; 0x80096e <sg_u8ControllerStatusMsgCount>
 a46:	8f 5f       	subi	r24, 0xFF	; 255
 a48:	80 93 6e 09 	sts	0x096E, r24	; 0x80096e <sg_u8ControllerStatusMsgCount>
 a4c:	83 30       	cpi	r24, 0x03	; 3
 a4e:	48 f0       	brcs	.+18     	; 0xa62 <ControllerStatusMessagesSend+0x252>
 a50:	10 92 6e 09 	sts	0x096E, r1	; 0x80096e <sg_u8ControllerStatusMsgCount>
 a54:	10 92 1e 03 	sts	0x031E, r1	; 0x80031e <sg_bSendModuleControllerStatus>
 a58:	10 92 76 09 	sts	0x0976, r1	; 0x800976 <sg_bIgnoreStatusRequests>
 a5c:	81 e0       	ldi	r24, 0x01	; 1
 a5e:	80 93 1b 03 	sts	0x031B, r24	; 0x80031b <sg_bSendCellCommStatus>
 a62:	80 91 1d 03 	lds	r24, 0x031D	; 0x80031d <sg_bSendCellStatus>
 a66:	88 23       	and	r24, r24
 a68:	09 f4       	brne	.+2      	; 0xa6c <ControllerStatusMessagesSend+0x25c>
 a6a:	8c c0       	rjmp	.+280    	; 0xb84 <ControllerStatusMessagesSend+0x374>
 a6c:	1c 82       	std	Y+4, r1	; 0x04
 a6e:	1b 82       	std	Y+3, r1	; 0x03
 a70:	1a 82       	std	Y+2, r1	; 0x02
 a72:	19 82       	std	Y+1, r1	; 0x01
 a74:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <sg_sFrame+0x15>
 a78:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <sg_u8CellStatus>
 a7c:	89 17       	cp	r24, r25
 a7e:	88 f5       	brcc	.+98     	; 0xae2 <ControllerStatusMessagesSend+0x2d2>
 a80:	e0 91 23 03 	lds	r30, 0x0323	; 0x800323 <sg_u8CellStatus>
 a84:	f0 e0       	ldi	r31, 0x00	; 0
 a86:	75 96       	adiw	r30, 0x15	; 21
 a88:	ee 0f       	add	r30, r30
 a8a:	ff 1f       	adc	r31, r31
 a8c:	ee 0f       	add	r30, r30
 a8e:	ff 1f       	adc	r31, r31
 a90:	e0 5f       	subi	r30, 0xF0	; 240
 a92:	fe 4f       	sbci	r31, 0xFE	; 254
 a94:	80 81       	ld	r24, Z
 a96:	91 81       	ldd	r25, Z+1	; 0x01
 a98:	e0 91 23 03 	lds	r30, 0x0323	; 0x800323 <sg_u8CellStatus>
 a9c:	f0 e0       	ldi	r31, 0x00	; 0
 a9e:	75 96       	adiw	r30, 0x15	; 21
 aa0:	ee 0f       	add	r30, r30
 aa2:	ff 1f       	adc	r31, r31
 aa4:	ee 0f       	add	r30, r30
 aa6:	ff 1f       	adc	r31, r31
 aa8:	e0 5f       	subi	r30, 0xF0	; 240
 aaa:	fe 4f       	sbci	r31, 0xFE	; 254
 aac:	e2 80       	ldd	r14, Z+2	; 0x02
 aae:	f3 80       	ldd	r15, Z+3	; 0x03
 ab0:	be 01       	movw	r22, r28
 ab2:	6d 5f       	subi	r22, 0xFD	; 253
 ab4:	7f 4f       	sbci	r23, 0xFF	; 255
 ab6:	0e 94 c3 1f 	call	0x3f86	; 0x3f86 <CellDataConvertVoltage>
 aba:	81 11       	cpse	r24, r1
 abc:	02 c0       	rjmp	.+4      	; 0xac2 <ControllerStatusMessagesSend+0x2b2>
 abe:	1c 82       	std	Y+4, r1	; 0x04
 ac0:	1b 82       	std	Y+3, r1	; 0x03
 ac2:	60 e0       	ldi	r22, 0x00	; 0
 ac4:	70 e0       	ldi	r23, 0x00	; 0
 ac6:	c7 01       	movw	r24, r14
 ac8:	0e 94 2f 1f 	call	0x3e5e	; 0x3e5e <CellDataConvertTemperature>
 acc:	88 23       	and	r24, r24
 ace:	39 f0       	breq	.+14     	; 0xade <ControllerStatusMessagesSend+0x2ce>
 ad0:	be 01       	movw	r22, r28
 ad2:	6f 5f       	subi	r22, 0xFF	; 255
 ad4:	7f 4f       	sbci	r23, 0xFF	; 255
 ad6:	c7 01       	movw	r24, r14
 ad8:	0e 94 2f 1f 	call	0x3e5e	; 0x3e5e <CellDataConvertTemperature>
 adc:	02 c0       	rjmp	.+4      	; 0xae2 <ControllerStatusMessagesSend+0x2d2>
 ade:	1a 82       	std	Y+2, r1	; 0x02
 ae0:	19 82       	std	Y+1, r1	; 0x01
 ae2:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <sg_u8CellStatus>
 ae6:	f8 01       	movw	r30, r16
 ae8:	80 83       	st	Z, r24
 aea:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <sg_sFrame+0x15>
 aee:	81 83       	std	Z+1, r24	; 0x01
 af0:	99 81       	ldd	r25, Y+1	; 0x01
 af2:	8a 81       	ldd	r24, Y+2	; 0x02
 af4:	92 83       	std	Z+2, r25	; 0x02
 af6:	83 83       	std	Z+3, r24	; 0x03
 af8:	2b 81       	ldd	r18, Y+3	; 0x03
 afa:	3c 81       	ldd	r19, Y+4	; 0x04
 afc:	24 83       	std	Z+4, r18	; 0x04
 afe:	35 83       	std	Z+5, r19	; 0x05
 b00:	21 15       	cp	r18, r1
 b02:	31 05       	cpc	r19, r1
 b04:	59 f0       	breq	.+22     	; 0xb1c <ControllerStatusMessagesSend+0x30c>
 b06:	c9 01       	movw	r24, r18
 b08:	64 e0       	ldi	r22, 0x04	; 4
 b0a:	70 e1       	ldi	r23, 0x10	; 16
 b0c:	0e 94 4d 24 	call	0x489a	; 0x489a <__udivmodhi4>
 b10:	84 e6       	ldi	r24, 0x64	; 100
 b12:	68 9f       	mul	r22, r24
 b14:	60 2d       	mov	r22, r0
 b16:	11 24       	eor	r1, r1
 b18:	66 83       	std	Z+6, r22	; 0x06
 b1a:	01 c0       	rjmp	.+2      	; 0xb1e <ControllerStatusMessagesSend+0x30e>
 b1c:	16 82       	std	Z+6, r1	; 0x06
 b1e:	e0 e1       	ldi	r30, 0x10	; 16
 b20:	f1 e0       	ldi	r31, 0x01	; 1
 b22:	47 a9       	ldd	r20, Z+55	; 0x37
 b24:	50 ad       	ldd	r21, Z+56	; 0x38
 b26:	81 ad       	ldd	r24, Z+57	; 0x39
 b28:	92 ad       	ldd	r25, Z+58	; 0x3a
 b2a:	84 17       	cp	r24, r20
 b2c:	95 07       	cpc	r25, r21
 b2e:	98 f4       	brcc	.+38     	; 0xb56 <ControllerStatusMessagesSend+0x346>
 b30:	21 15       	cp	r18, r1
 b32:	31 05       	cpc	r19, r1
 b34:	81 f0       	breq	.+32     	; 0xb56 <ControllerStatusMessagesSend+0x346>
 b36:	67 a9       	ldd	r22, Z+55	; 0x37
 b38:	70 ad       	ldd	r23, Z+56	; 0x38
 b3a:	81 ad       	ldd	r24, Z+57	; 0x39
 b3c:	92 ad       	ldd	r25, Z+58	; 0x3a
 b3e:	68 1b       	sub	r22, r24
 b40:	79 0b       	sbc	r23, r25
 b42:	c9 01       	movw	r24, r18
 b44:	0e 94 4d 24 	call	0x489a	; 0x489a <__udivmodhi4>
 b48:	84 e6       	ldi	r24, 0x64	; 100
 b4a:	68 9f       	mul	r22, r24
 b4c:	60 2d       	mov	r22, r0
 b4e:	11 24       	eor	r1, r1
 b50:	f8 01       	movw	r30, r16
 b52:	67 83       	std	Z+7, r22	; 0x07
 b54:	03 c0       	rjmp	.+6      	; 0xb5c <ControllerStatusMessagesSend+0x34c>
 b56:	d8 01       	movw	r26, r16
 b58:	17 96       	adiw	r26, 0x07	; 7
 b5a:	1c 92       	st	X, r1
 b5c:	48 e0       	ldi	r20, 0x08	; 8
 b5e:	b8 01       	movw	r22, r16
 b60:	84 e0       	ldi	r24, 0x04	; 4
 b62:	0e 94 81 26 	call	0x4d02	; 0x4d02 <CANSendMessage>
 b66:	88 23       	and	r24, r24
 b68:	69 f0       	breq	.+26     	; 0xb84 <ControllerStatusMessagesSend+0x374>
 b6a:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <sg_u8CellStatus>
 b6e:	8f 5f       	subi	r24, 0xFF	; 255
 b70:	80 93 23 03 	sts	0x0323, r24	; 0x800323 <sg_u8CellStatus>
 b74:	90 91 23 03 	lds	r25, 0x0323	; 0x800323 <sg_u8CellStatus>
 b78:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <sg_u8CellStatusTarget>
 b7c:	98 17       	cp	r25, r24
 b7e:	10 f0       	brcs	.+4      	; 0xb84 <ControllerStatusMessagesSend+0x374>
 b80:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <sg_bSendCellStatus>
 b84:	80 91 1b 03 	lds	r24, 0x031B	; 0x80031b <sg_bSendCellCommStatus>
 b88:	88 23       	and	r24, r24
 b8a:	89 f1       	breq	.+98     	; 0xbee <ControllerStatusMessagesSend+0x3de>
 b8c:	e0 e1       	ldi	r30, 0x10	; 16
 b8e:	f1 e0       	ldi	r31, 0x01	; 1
 b90:	83 89       	ldd	r24, Z+19	; 0x13
 b92:	d8 01       	movw	r26, r16
 b94:	8c 93       	st	X, r24
 b96:	84 89       	ldd	r24, Z+20	; 0x14
 b98:	11 96       	adiw	r26, 0x01	; 1
 b9a:	8c 93       	st	X, r24
 b9c:	11 97       	sbiw	r26, 0x01	; 1
 b9e:	80 a5       	ldd	r24, Z+40	; 0x28
 ba0:	91 a5       	ldd	r25, Z+41	; 0x29
 ba2:	12 96       	adiw	r26, 0x02	; 2
 ba4:	8c 93       	st	X, r24
 ba6:	12 97       	sbiw	r26, 0x02	; 2
 ba8:	80 a5       	ldd	r24, Z+40	; 0x28
 baa:	91 a5       	ldd	r25, Z+41	; 0x29
 bac:	13 96       	adiw	r26, 0x03	; 3
 bae:	9c 93       	st	X, r25
 bb0:	13 97       	sbiw	r26, 0x03	; 3
 bb2:	86 a5       	ldd	r24, Z+46	; 0x2e
 bb4:	14 96       	adiw	r26, 0x04	; 4
 bb6:	8c 93       	st	X, r24
 bb8:	14 97       	sbiw	r26, 0x04	; 4
 bba:	82 a5       	ldd	r24, Z+42	; 0x2a
 bbc:	8f 3f       	cpi	r24, 0xFF	; 255
 bbe:	31 f0       	breq	.+12     	; 0xbcc <ControllerStatusMessagesSend+0x3bc>
 bc0:	85 a5       	ldd	r24, Z+45	; 0x2d
 bc2:	92 a5       	ldd	r25, Z+42	; 0x2a
 bc4:	89 1b       	sub	r24, r25
 bc6:	15 96       	adiw	r26, 0x05	; 5
 bc8:	8c 93       	st	X, r24
 bca:	03 c0       	rjmp	.+6      	; 0xbd2 <ControllerStatusMessagesSend+0x3c2>
 bcc:	8f ef       	ldi	r24, 0xFF	; 255
 bce:	f8 01       	movw	r30, r16
 bd0:	85 83       	std	Z+5, r24	; 0x05
 bd2:	d8 01       	movw	r26, r16
 bd4:	16 96       	adiw	r26, 0x06	; 6
 bd6:	1c 92       	st	X, r1
 bd8:	16 97       	sbiw	r26, 0x06	; 6
 bda:	17 96       	adiw	r26, 0x07	; 7
 bdc:	1c 92       	st	X, r1
 bde:	48 e0       	ldi	r20, 0x08	; 8
 be0:	b8 01       	movw	r22, r16
 be2:	86 e0       	ldi	r24, 0x06	; 6
 be4:	0e 94 81 26 	call	0x4d02	; 0x4d02 <CANSendMessage>
 be8:	81 11       	cpse	r24, r1
 bea:	10 92 1b 03 	sts	0x031B, r1	; 0x80031b <sg_bSendCellCommStatus>
 bee:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <sg_bSendHardwareDetail>
 bf2:	88 23       	and	r24, r24
 bf4:	89 f0       	breq	.+34     	; 0xc18 <ControllerStatusMessagesSend+0x408>
 bf6:	b8 01       	movw	r22, r16
 bf8:	c8 01       	movw	r24, r16
 bfa:	02 96       	adiw	r24, 0x02	; 2
 bfc:	0e 94 3c 1b 	call	0x3678	; 0x3678 <CurrentThresholdsGet>
 c00:	f8 01       	movw	r30, r16
 c02:	14 82       	std	Z+4, r1	; 0x04
 c04:	15 82       	std	Z+5, r1	; 0x05
 c06:	16 82       	std	Z+6, r1	; 0x06
 c08:	17 82       	std	Z+7, r1	; 0x07
 c0a:	48 e0       	ldi	r20, 0x08	; 8
 c0c:	b8 01       	movw	r22, r16
 c0e:	85 e0       	ldi	r24, 0x05	; 5
 c10:	0e 94 81 26 	call	0x4d02	; 0x4d02 <CANSendMessage>
 c14:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <sg_bSendHardwareDetail>
 c18:	0f 90       	pop	r0
 c1a:	0f 90       	pop	r0
 c1c:	0f 90       	pop	r0
 c1e:	0f 90       	pop	r0
 c20:	df 91       	pop	r29
 c22:	cf 91       	pop	r28
 c24:	1f 91       	pop	r17
 c26:	0f 91       	pop	r16
 c28:	ff 90       	pop	r15
 c2a:	ef 90       	pop	r14
 c2c:	df 90       	pop	r13
 c2e:	cf 90       	pop	r12
 c30:	08 95       	ret

Disassembly of section .text.CellStringProcess:

00000f26 <CellStringProcess>:
     f26:	3f 92       	push	r3
     f28:	4f 92       	push	r4
     f2a:	5f 92       	push	r5
     f2c:	6f 92       	push	r6
     f2e:	7f 92       	push	r7
     f30:	8f 92       	push	r8
     f32:	9f 92       	push	r9
     f34:	af 92       	push	r10
     f36:	bf 92       	push	r11
     f38:	cf 92       	push	r12
     f3a:	df 92       	push	r13
     f3c:	ef 92       	push	r14
     f3e:	ff 92       	push	r15
     f40:	0f 93       	push	r16
     f42:	1f 93       	push	r17
     f44:	cf 93       	push	r28
     f46:	df 93       	push	r29
     f48:	00 d0       	rcall	.+0      	; 0xf4a <CellStringProcess+0x24>
     f4a:	00 d0       	rcall	.+0      	; 0xf4c <CellStringProcess+0x26>
     f4c:	00 d0       	rcall	.+0      	; 0xf4e <CellStringProcess+0x28>
     f4e:	cd b7       	in	r28, 0x3d	; 61
     f50:	de b7       	in	r29, 0x3e	; 62
     f52:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <sg_sFrame+0x2b>
     f56:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <sg_sFrame+0x2c>
     f5a:	89 2b       	or	r24, r25
     f5c:	09 f4       	brne	.+2      	; 0xf60 <CellStringProcess+0x3a>
     f5e:	1e c1       	rjmp	.+572    	; 0x119c <__stack+0x9d>
     f60:	e0 e1       	ldi	r30, 0x10	; 16
     f62:	f1 e0       	ldi	r31, 0x01	; 1
     f64:	8f ef       	ldi	r24, 0xFF	; 255
     f66:	82 a7       	std	Z+42, r24	; 0x2a
     f68:	93 89       	ldd	r25, Z+19	; 0x13
     f6a:	85 a5       	ldd	r24, Z+45	; 0x2d
     f6c:	89 17       	cp	r24, r25
     f6e:	28 f4       	brcc	.+10     	; 0xf7a <CellStringProcess+0x54>
     f70:	85 a5       	ldd	r24, Z+45	; 0x2d
     f72:	83 8b       	std	Z+19, r24	; 0x13
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	80 93 1b 03 	sts	0x031B, r24	; 0x80031b <sg_bSendCellCommStatus>
     f7a:	e0 e1       	ldi	r30, 0x10	; 16
     f7c:	f1 e0       	ldi	r31, 0x01	; 1
     f7e:	94 89       	ldd	r25, Z+20	; 0x14
     f80:	85 a5       	ldd	r24, Z+45	; 0x2d
     f82:	98 17       	cp	r25, r24
     f84:	28 f4       	brcc	.+10     	; 0xf90 <CellStringProcess+0x6a>
     f86:	85 a5       	ldd	r24, Z+45	; 0x2d
     f88:	84 8b       	std	Z+20, r24	; 0x14
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	80 93 1b 03 	sts	0x031B, r24	; 0x80031b <sg_bSendCellCommStatus>
     f90:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <sg_sFrame+0x2b>
     f94:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <sg_sFrame+0x2c>
     f98:	83 70       	andi	r24, 0x03	; 3
     f9a:	99 27       	eor	r25, r25
     f9c:	89 2b       	or	r24, r25
     f9e:	61 f0       	breq	.+24     	; 0xfb8 <CellStringProcess+0x92>
     fa0:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <sg_sFrame+0x2e>
     fa4:	8f 3f       	cpi	r24, 0xFF	; 255
     fa6:	41 f0       	breq	.+16     	; 0xfb8 <CellStringProcess+0x92>
     fa8:	e0 e1       	ldi	r30, 0x10	; 16
     faa:	f1 e0       	ldi	r31, 0x01	; 1
     fac:	86 a5       	ldd	r24, Z+46	; 0x2e
     fae:	8f 5f       	subi	r24, 0xFF	; 255
     fb0:	86 a7       	std	Z+46, r24	; 0x2e
     fb2:	81 e0       	ldi	r24, 0x01	; 1
     fb4:	80 93 1b 03 	sts	0x031B, r24	; 0x80031b <sg_bSendCellCommStatus>
     fb8:	e0 e1       	ldi	r30, 0x10	; 16
     fba:	f1 e0       	ldi	r31, 0x01	; 1
     fbc:	10 ae       	std	Z+56, r1	; 0x38
     fbe:	17 aa       	std	Z+55, r1	; 0x37
     fc0:	8f ef       	ldi	r24, 0xFF	; 255
     fc2:	9f ef       	ldi	r25, 0xFF	; 255
     fc4:	92 af       	std	Z+58, r25	; 0x3a
     fc6:	81 af       	std	Z+57, r24	; 0x39
     fc8:	14 ae       	std	Z+60, r1	; 0x3c
     fca:	13 ae       	std	Z+59, r1	; 0x3b
     fcc:	80 e0       	ldi	r24, 0x00	; 0
     fce:	90 e8       	ldi	r25, 0x80	; 128
     fd0:	92 ab       	std	Z+50, r25	; 0x32
     fd2:	81 ab       	std	Z+49, r24	; 0x31
     fd4:	8f ef       	ldi	r24, 0xFF	; 255
     fd6:	9f e7       	ldi	r25, 0x7F	; 127
     fd8:	94 ab       	std	Z+52, r25	; 0x34
     fda:	83 ab       	std	Z+51, r24	; 0x33
     fdc:	16 aa       	std	Z+54, r1	; 0x36
     fde:	15 aa       	std	Z+53, r1	; 0x35
     fe0:	d1 2c       	mov	r13, r1
     fe2:	31 2c       	mov	r3, r1
     fe4:	c1 2c       	mov	r12, r1
     fe6:	41 2c       	mov	r4, r1
     fe8:	51 2c       	mov	r5, r1
     fea:	32 01       	movw	r6, r4
     fec:	81 2c       	mov	r8, r1
     fee:	91 2c       	mov	r9, r1
     ff0:	54 01       	movw	r10, r8
     ff2:	2f ef       	ldi	r18, 0xFF	; 255
     ff4:	3f e7       	ldi	r19, 0x7F	; 127
     ff6:	3e 83       	std	Y+6, r19	; 0x06
     ff8:	2d 83       	std	Y+5, r18	; 0x05
     ffa:	80 e0       	ldi	r24, 0x00	; 0
     ffc:	90 e8       	ldi	r25, 0x80	; 128
     ffe:	9c 83       	std	Y+4, r25	; 0x04
    1000:	8b 83       	std	Y+3, r24	; 0x03
    1002:	6b c0       	rjmp	.+214    	; 0x10da <__DATA_REGION_LENGTH__+0xda>
    1004:	0d 2d       	mov	r16, r13
    1006:	10 e0       	ldi	r17, 0x00	; 0
    1008:	f8 01       	movw	r30, r16
    100a:	75 96       	adiw	r30, 0x15	; 21
    100c:	ee 0f       	add	r30, r30
    100e:	ff 1f       	adc	r31, r31
    1010:	ee 0f       	add	r30, r30
    1012:	ff 1f       	adc	r31, r31
    1014:	e0 5f       	subi	r30, 0xF0	; 240
    1016:	fe 4f       	sbci	r31, 0xFE	; 254
    1018:	80 81       	ld	r24, Z
    101a:	91 81       	ldd	r25, Z+1	; 0x01
    101c:	9a 83       	std	Y+2, r25	; 0x02
    101e:	89 83       	std	Y+1, r24	; 0x01
    1020:	e2 80       	ldd	r14, Z+2	; 0x02
    1022:	f3 80       	ldd	r15, Z+3	; 0x03
    1024:	60 e0       	ldi	r22, 0x00	; 0
    1026:	70 e0       	ldi	r23, 0x00	; 0
    1028:	c7 01       	movw	r24, r14
    102a:	0e 94 2f 1f 	call	0x3e5e	; 0x3e5e <CellDataConvertTemperature>
    102e:	88 23       	and	r24, r24
    1030:	f1 f0       	breq	.+60     	; 0x106e <__DATA_REGION_LENGTH__+0x6e>
    1032:	f4 fe       	sbrs	r15, 4
    1034:	03 c0       	rjmp	.+6      	; 0x103c <__DATA_REGION_LENGTH__+0x3c>
    1036:	c7 01       	movw	r24, r14
    1038:	90 6f       	ori	r25, 0xF0	; 240
    103a:	02 c0       	rjmp	.+4      	; 0x1040 <__DATA_REGION_LENGTH__+0x40>
    103c:	c7 01       	movw	r24, r14
    103e:	9f 77       	andi	r25, 0x7F	; 127
    1040:	2b 81       	ldd	r18, Y+3	; 0x03
    1042:	3c 81       	ldd	r19, Y+4	; 0x04
    1044:	28 17       	cp	r18, r24
    1046:	39 07       	cpc	r19, r25
    1048:	14 f4       	brge	.+4      	; 0x104e <__DATA_REGION_LENGTH__+0x4e>
    104a:	9c 83       	std	Y+4, r25	; 0x04
    104c:	8b 83       	std	Y+3, r24	; 0x03
    104e:	2d 81       	ldd	r18, Y+5	; 0x05
    1050:	3e 81       	ldd	r19, Y+6	; 0x06
    1052:	82 17       	cp	r24, r18
    1054:	93 07       	cpc	r25, r19
    1056:	14 f4       	brge	.+4      	; 0x105c <__DATA_REGION_LENGTH__+0x5c>
    1058:	9e 83       	std	Y+6, r25	; 0x06
    105a:	8d 83       	std	Y+5, r24	; 0x05
    105c:	09 2e       	mov	r0, r25
    105e:	00 0c       	add	r0, r0
    1060:	aa 0b       	sbc	r26, r26
    1062:	bb 0b       	sbc	r27, r27
    1064:	88 0e       	add	r8, r24
    1066:	99 1e       	adc	r9, r25
    1068:	aa 1e       	adc	r10, r26
    106a:	bb 1e       	adc	r11, r27
    106c:	33 94       	inc	r3
    106e:	f8 01       	movw	r30, r16
    1070:	75 96       	adiw	r30, 0x15	; 21
    1072:	ee 0f       	add	r30, r30
    1074:	ff 1f       	adc	r31, r31
    1076:	ee 0f       	add	r30, r30
    1078:	ff 1f       	adc	r31, r31
    107a:	e0 5f       	subi	r30, 0xF0	; 240
    107c:	fe 4f       	sbci	r31, 0xFE	; 254
    107e:	80 81       	ld	r24, Z
    1080:	91 81       	ldd	r25, Z+1	; 0x01
    1082:	99 23       	and	r25, r25
    1084:	1c f4       	brge	.+6      	; 0x108c <__DATA_REGION_LENGTH__+0x8c>
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <sg_sFrame+0x27>
    108c:	be 01       	movw	r22, r28
    108e:	6f 5f       	subi	r22, 0xFF	; 255
    1090:	7f 4f       	sbci	r23, 0xFF	; 255
    1092:	89 81       	ldd	r24, Y+1	; 0x01
    1094:	9a 81       	ldd	r25, Y+2	; 0x02
    1096:	0e 94 c3 1f 	call	0x3f86	; 0x3f86 <CellDataConvertVoltage>
    109a:	88 23       	and	r24, r24
    109c:	e9 f0       	breq	.+58     	; 0x10d8 <__DATA_REGION_LENGTH__+0xd8>
    109e:	20 91 47 01 	lds	r18, 0x0147	; 0x800147 <sg_sFrame+0x37>
    10a2:	30 91 48 01 	lds	r19, 0x0148	; 0x800148 <sg_sFrame+0x38>
    10a6:	89 81       	ldd	r24, Y+1	; 0x01
    10a8:	9a 81       	ldd	r25, Y+2	; 0x02
    10aa:	28 17       	cp	r18, r24
    10ac:	39 07       	cpc	r19, r25
    10ae:	20 f4       	brcc	.+8      	; 0x10b8 <__DATA_REGION_LENGTH__+0xb8>
    10b0:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <sg_sFrame+0x38>
    10b4:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <sg_sFrame+0x37>
    10b8:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <sg_sFrame+0x39>
    10bc:	30 91 4a 01 	lds	r19, 0x014A	; 0x80014a <sg_sFrame+0x3a>
    10c0:	82 17       	cp	r24, r18
    10c2:	93 07       	cpc	r25, r19
    10c4:	20 f4       	brcc	.+8      	; 0x10ce <__DATA_REGION_LENGTH__+0xce>
    10c6:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <sg_sFrame+0x3a>
    10ca:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <sg_sFrame+0x39>
    10ce:	48 0e       	add	r4, r24
    10d0:	59 1e       	adc	r5, r25
    10d2:	61 1c       	adc	r6, r1
    10d4:	71 1c       	adc	r7, r1
    10d6:	c3 94       	inc	r12
    10d8:	d3 94       	inc	r13
    10da:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <sg_sFrame+0x2d>
    10de:	d8 16       	cp	r13, r24
    10e0:	08 f4       	brcc	.+2      	; 0x10e4 <__DATA_REGION_LENGTH__+0xe4>
    10e2:	90 cf       	rjmp	.-224    	; 0x1004 <__DATA_REGION_LENGTH__+0x4>
    10e4:	cc 20       	and	r12, r12
    10e6:	89 f1       	breq	.+98     	; 0x114a <__stack+0x4b>
    10e8:	ed e4       	ldi	r30, 0x4D	; 77
    10ea:	f1 e0       	ldi	r31, 0x01	; 1
    10ec:	40 82       	st	Z, r4
    10ee:	51 82       	std	Z+1, r5	; 0x01
    10f0:	62 82       	std	Z+2, r6	; 0x02
    10f2:	73 82       	std	Z+3, r7	; 0x03
    10f4:	60 81       	ld	r22, Z
    10f6:	71 81       	ldd	r23, Z+1	; 0x01
    10f8:	82 81       	ldd	r24, Z+2	; 0x02
    10fa:	93 81       	ldd	r25, Z+3	; 0x03
    10fc:	2c 2d       	mov	r18, r12
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	40 e0       	ldi	r20, 0x00	; 0
    1102:	50 e0       	ldi	r21, 0x00	; 0
    1104:	0e 94 08 22 	call	0x4410	; 0x4410 <__udivmodsi4>
    1108:	30 93 4c 01 	sts	0x014C, r19	; 0x80014c <sg_sFrame+0x3c>
    110c:	20 93 4b 01 	sts	0x014B, r18	; 0x80014b <sg_sFrame+0x3b>
    1110:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    1114:	83 30       	cpi	r24, 0x03	; 3
    1116:	c9 f0       	breq	.+50     	; 0x114a <__stack+0x4b>
    1118:	80 91 19 03 	lds	r24, 0x0319	; 0x800319 <sg_bCellBalancedOnce>
    111c:	81 11       	cpse	r24, r1
    111e:	15 c0       	rjmp	.+42     	; 0x114a <__stack+0x4b>
    1120:	e0 e1       	ldi	r30, 0x10	; 16
    1122:	f1 e0       	ldi	r31, 0x01	; 1
    1124:	27 a9       	ldd	r18, Z+55	; 0x37
    1126:	30 ad       	ldd	r19, Z+56	; 0x38
    1128:	81 ad       	ldd	r24, Z+57	; 0x39
    112a:	92 ad       	ldd	r25, Z+58	; 0x3a
    112c:	28 17       	cp	r18, r24
    112e:	39 07       	cpc	r19, r25
    1130:	60 f0       	brcs	.+24     	; 0x114a <__stack+0x4b>
    1132:	87 a9       	ldd	r24, Z+55	; 0x37
    1134:	90 ad       	ldd	r25, Z+56	; 0x38
    1136:	21 ad       	ldd	r18, Z+57	; 0x39
    1138:	32 ad       	ldd	r19, Z+58	; 0x3a
    113a:	82 1b       	sub	r24, r18
    113c:	93 0b       	sbc	r25, r19
    113e:	80 34       	cpi	r24, 0x40	; 64
    1140:	91 05       	cpc	r25, r1
    1142:	18 f0       	brcs	.+6      	; 0x114a <__stack+0x4b>
    1144:	81 e0       	ldi	r24, 0x01	; 1
    1146:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <sg_bCellBalanceReady>
    114a:	33 20       	and	r3, r3
    114c:	c9 f0       	breq	.+50     	; 0x1180 <__stack+0x81>
    114e:	23 2d       	mov	r18, r3
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	40 e0       	ldi	r20, 0x00	; 0
    1154:	50 e0       	ldi	r21, 0x00	; 0
    1156:	c5 01       	movw	r24, r10
    1158:	b4 01       	movw	r22, r8
    115a:	0e 94 8d 23 	call	0x471a	; 0x471a <__divmodsi4>
    115e:	65 e4       	ldi	r22, 0x45	; 69
    1160:	71 e0       	ldi	r23, 0x01	; 1
    1162:	c9 01       	movw	r24, r18
    1164:	0e 94 2f 1f 	call	0x3e5e	; 0x3e5e <CellDataConvertTemperature>
    1168:	61 e4       	ldi	r22, 0x41	; 65
    116a:	71 e0       	ldi	r23, 0x01	; 1
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	9c 81       	ldd	r25, Y+4	; 0x04
    1170:	0e 94 2f 1f 	call	0x3e5e	; 0x3e5e <CellDataConvertTemperature>
    1174:	63 e4       	ldi	r22, 0x43	; 67
    1176:	71 e0       	ldi	r23, 0x01	; 1
    1178:	8d 81       	ldd	r24, Y+5	; 0x05
    117a:	9e 81       	ldd	r25, Y+6	; 0x06
    117c:	0e 94 2f 1f 	call	0x3e5e	; 0x3e5e <CellDataConvertTemperature>
    1180:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <sg_bSDCardReady>
    1184:	88 23       	and	r24, r24
    1186:	51 f0       	breq	.+20     	; 0x119c <__stack+0x9d>
    1188:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    118c:	88 23       	and	r24, r24
    118e:	31 f0       	breq	.+12     	; 0x119c <__stack+0x9d>
    1190:	80 e1       	ldi	r24, 0x10	; 16
    1192:	91 e0       	ldi	r25, 0x01	; 1
    1194:	0e 94 4c 14 	call	0x2898	; 0x2898 <STORE_WriteFrame>
    1198:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <sg_bSDCardReady>
    119c:	26 96       	adiw	r28, 0x06	; 6
    119e:	0f b6       	in	r0, 0x3f	; 63
    11a0:	f8 94       	cli
    11a2:	de bf       	out	0x3e, r29	; 62
    11a4:	0f be       	out	0x3f, r0	; 63
    11a6:	cd bf       	out	0x3d, r28	; 61
    11a8:	df 91       	pop	r29
    11aa:	cf 91       	pop	r28
    11ac:	1f 91       	pop	r17
    11ae:	0f 91       	pop	r16
    11b0:	ff 90       	pop	r15
    11b2:	ef 90       	pop	r14
    11b4:	df 90       	pop	r13
    11b6:	cf 90       	pop	r12
    11b8:	bf 90       	pop	r11
    11ba:	af 90       	pop	r10
    11bc:	9f 90       	pop	r9
    11be:	8f 90       	pop	r8
    11c0:	7f 90       	pop	r7
    11c2:	6f 90       	pop	r6
    11c4:	5f 90       	pop	r5
    11c6:	4f 90       	pop	r4
    11c8:	3f 90       	pop	r3
    11ca:	08 95       	ret

Disassembly of section .text.Delay:

0000423e <Delay>:
    423e:	ab 01       	movw	r20, r22
    4240:	bc 01       	movw	r22, r24
    4242:	4f 5f       	subi	r20, 0xFF	; 255
    4244:	5f 4f       	sbci	r21, 0xFF	; 255
    4246:	6f 4f       	sbci	r22, 0xFF	; 255
    4248:	7f 4f       	sbci	r23, 0xFF	; 255
    424a:	76 95       	lsr	r23
    424c:	67 95       	ror	r22
    424e:	57 95       	ror	r21
    4250:	47 95       	ror	r20
    4252:	96 b5       	in	r25, 0x26	; 38
    4254:	17 c0       	rjmp	.+46     	; 0x4284 <Delay+0x46>
    4256:	86 b5       	in	r24, 0x26	; 38
    4258:	98 17       	cp	r25, r24
    425a:	e9 f3       	breq	.-6      	; 0x4256 <Delay+0x18>
    425c:	26 b5       	in	r18, 0x26	; 38
    425e:	82 2f       	mov	r24, r18
    4260:	89 1b       	sub	r24, r25
    4262:	90 e0       	ldi	r25, 0x00	; 0
    4264:	a0 e0       	ldi	r26, 0x00	; 0
    4266:	b0 e0       	ldi	r27, 0x00	; 0
    4268:	48 17       	cp	r20, r24
    426a:	59 07       	cpc	r21, r25
    426c:	6a 07       	cpc	r22, r26
    426e:	7b 07       	cpc	r23, r27
    4270:	28 f0       	brcs	.+10     	; 0x427c <Delay+0x3e>
    4272:	48 1b       	sub	r20, r24
    4274:	59 0b       	sbc	r21, r25
    4276:	6a 0b       	sbc	r22, r26
    4278:	7b 0b       	sbc	r23, r27
    427a:	03 c0       	rjmp	.+6      	; 0x4282 <Delay+0x44>
    427c:	40 e0       	ldi	r20, 0x00	; 0
    427e:	50 e0       	ldi	r21, 0x00	; 0
    4280:	ba 01       	movw	r22, r20
    4282:	92 2f       	mov	r25, r18
    4284:	41 15       	cp	r20, r1
    4286:	51 05       	cpc	r21, r1
    4288:	61 05       	cpc	r22, r1
    428a:	71 05       	cpc	r23, r1
    428c:	21 f7       	brne	.-56     	; 0x4256 <Delay+0x18>
    428e:	08 95       	ret

Disassembly of section .text.PlatformAssert:

000047a0 <PlatformAssert>:



void PlatformAssert( const char* peFilename, const int s32LineNumber )
{
	DebugOut("Assert %s: %d\n", peFilename, s32LineNumber);
    47a0:	5f 93       	push	r21
    47a2:	4f 93       	push	r20
    47a4:	8f 93       	push	r24
    47a6:	7f 93       	push	r23
    47a8:	6f 93       	push	r22
    47aa:	88 e3       	ldi	r24, 0x38	; 56
    47ac:	92 e0       	ldi	r25, 0x02	; 2
    47ae:	a0 e0       	ldi	r26, 0x00	; 0
    47b0:	af 93       	push	r26
    47b2:	9f 93       	push	r25
    47b4:	8f 93       	push	r24
    47b6:	0e 94 0f 27 	call	0x4e1e	; 0x4e1e <DebugOut>
	
//	while(1);
}
    47ba:	8d b7       	in	r24, 0x3d	; 61
    47bc:	9e b7       	in	r25, 0x3e	; 62
    47be:	08 96       	adiw	r24, 0x08	; 8
    47c0:	0f b6       	in	r0, 0x3f	; 63
    47c2:	f8 94       	cli
    47c4:	9e bf       	out	0x3e, r25	; 62
    47c6:	0f be       	out	0x3f, r0	; 63
    47c8:	8d bf       	out	0x3d, r24	; 61
    47ca:	08 95       	ret

Disassembly of section .text.ModuleControllerStateHandle:

000018dc <ModuleControllerStateHandle>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    18dc:	1f 93       	push	r17
    18de:	cf 93       	push	r28
    18e0:	df 93       	push	r29
    18e2:	d0 91 06 01 	lds	r29, 0x0106	; 0x800106 <sg_eModuleControllerStateTarget>
    18e6:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <sg_eModuleControllerStateMax>
    18ea:	8d 17       	cp	r24, r29
    18ec:	30 f0       	brcs	.+12     	; 0x18fa <ModuleControllerStateHandle+0x1e>
    18ee:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    18f2:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <sg_eModuleControllerStateMax>
    18f6:	89 17       	cp	r24, r25
    18f8:	10 f4       	brcc	.+4      	; 0x18fe <ModuleControllerStateHandle+0x22>
    18fa:	d0 91 05 01 	lds	r29, 0x0105	; 0x800105 <sg_eModuleControllerStateMax>
    18fe:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    1902:	d8 17       	cp	r29, r24
    1904:	09 f4       	brne	.+2      	; 0x1908 <ModuleControllerStateHandle+0x2c>
    1906:	f5 c0       	rjmp	.+490    	; 0x1af2 <ModuleControllerStateHandle+0x216>
    1908:	d2 30       	cpi	r29, 0x02	; 2
    190a:	09 f4       	brne	.+2      	; 0x190e <ModuleControllerStateHandle+0x32>
    190c:	72 c0       	rjmp	.+228    	; 0x19f2 <ModuleControllerStateHandle+0x116>
    190e:	28 f4       	brcc	.+10     	; 0x191a <ModuleControllerStateHandle+0x3e>
    1910:	dd 23       	and	r29, r29
    1912:	89 f0       	breq	.+34     	; 0x1936 <ModuleControllerStateHandle+0x5a>
    1914:	d1 30       	cpi	r29, 0x01	; 1
    1916:	e1 f1       	breq	.+120    	; 0x1990 <ModuleControllerStateHandle+0xb4>
    1918:	e0 c0       	rjmp	.+448    	; 0x1ada <ModuleControllerStateHandle+0x1fe>
    191a:	d3 30       	cpi	r29, 0x03	; 3
    191c:	09 f4       	brne	.+2      	; 0x1920 <ModuleControllerStateHandle+0x44>
    191e:	a9 c0       	rjmp	.+338    	; 0x1a72 <ModuleControllerStateHandle+0x196>
    1920:	d5 30       	cpi	r29, 0x05	; 5
    1922:	09 f0       	breq	.+2      	; 0x1926 <ModuleControllerStateHandle+0x4a>
    1924:	da c0       	rjmp	.+436    	; 0x1ada <ModuleControllerStateHandle+0x1fe>
    1926:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <sg_eModuleControllerStateCurrent>
    192a:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <sg_eModuleControllerStateTarget>
    192e:	d0 91 07 01 	lds	r29, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    1932:	0e 94 2b 27 	call	0x4e56	; 0x4e56 <ADCSetPowerOn>
    1936:	88 b1       	in	r24, 0x08	; 8
    1938:	8f 7e       	andi	r24, 0xEF	; 239
    193a:	88 b9       	out	0x08, r24	; 8
    193c:	68 e8       	ldi	r22, 0x88	; 136
    193e:	73 e1       	ldi	r23, 0x13	; 19
    1940:	80 e0       	ldi	r24, 0x00	; 0
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	0e 94 1f 21 	call	0x423e	; 0x423e <Delay>
    1948:	8e b1       	in	r24, 0x0e	; 14
    194a:	8d 7f       	andi	r24, 0xFD	; 253
    194c:	8e b9       	out	0x0e, r24	; 14
    194e:	68 e8       	ldi	r22, 0x88	; 136
    1950:	73 e1       	ldi	r23, 0x13	; 19
    1952:	80 e0       	ldi	r24, 0x00	; 0
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	0e 94 1f 21 	call	0x423e	; 0x423e <Delay>
    195a:	eb e6       	ldi	r30, 0x6B	; 107
    195c:	f0 e0       	ldi	r31, 0x00	; 0
    195e:	80 81       	ld	r24, Z
    1960:	8d 7f       	andi	r24, 0xFD	; 253
    1962:	80 83       	st	Z, r24
    1964:	e8 e6       	ldi	r30, 0x68	; 104
    1966:	f0 e0       	ldi	r31, 0x00	; 0
    1968:	80 81       	ld	r24, Z
    196a:	8d 7f       	andi	r24, 0xFD	; 253
    196c:	80 83       	st	Z, r24
    196e:	81 e0       	ldi	r24, 0x01	; 1
    1970:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <sg_bCellBalanceReady>
    1974:	10 92 19 03 	sts	0x0319, r1	; 0x800319 <sg_bCellBalancedOnce>
    1978:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <sg_bStopDischarge>
    197c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <sg_bSDCardReady>
    1980:	88 23       	and	r24, r24
    1982:	09 f4       	brne	.+2      	; 0x1986 <ModuleControllerStateHandle+0xaa>
    1984:	b2 c0       	rjmp	.+356    	; 0x1aea <ModuleControllerStateHandle+0x20e>
    1986:	0e 94 1e 20 	call	0x403c	; 0x403c <STORE_EndSession>
    198a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <sg_bSDCardReady>
    198e:	ad c0       	rjmp	.+346    	; 0x1aea <ModuleControllerStateHandle+0x20e>
    1990:	88 b1       	in	r24, 0x08	; 8
    1992:	8f 7e       	andi	r24, 0xEF	; 239
    1994:	88 b9       	out	0x08, r24	; 8
    1996:	68 e8       	ldi	r22, 0x88	; 136
    1998:	73 e1       	ldi	r23, 0x13	; 19
    199a:	80 e0       	ldi	r24, 0x00	; 0
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	0e 94 1f 21 	call	0x423e	; 0x423e <Delay>
    19a2:	eb e6       	ldi	r30, 0x6B	; 107
    19a4:	f0 e0       	ldi	r31, 0x00	; 0
    19a6:	80 81       	ld	r24, Z
    19a8:	8d 7f       	andi	r24, 0xFD	; 253
    19aa:	80 83       	st	Z, r24
    19ac:	e8 e6       	ldi	r30, 0x68	; 104
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	80 81       	ld	r24, Z
    19b2:	8d 7f       	andi	r24, 0xFD	; 253
    19b4:	80 83       	st	Z, r24
    19b6:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <sg_bModuleRegistered>
    19ba:	88 23       	and	r24, r24
    19bc:	19 f0       	breq	.+6      	; 0x19c4 <ModuleControllerStateHandle+0xe8>
    19be:	8e b1       	in	r24, 0x0e	; 14
    19c0:	82 60       	ori	r24, 0x02	; 2
    19c2:	8e b9       	out	0x0e, r24	; 14
    19c4:	68 e8       	ldi	r22, 0x88	; 136
    19c6:	73 e1       	ldi	r23, 0x13	; 19
    19c8:	80 e0       	ldi	r24, 0x00	; 0
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	0e 94 1f 21 	call	0x423e	; 0x423e <Delay>
    19d0:	81 e0       	ldi	r24, 0x01	; 1
    19d2:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <sg_bCellBalanceReady>
    19d6:	10 92 19 03 	sts	0x0319, r1	; 0x800319 <sg_bCellBalancedOnce>
    19da:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <sg_bStopDischarge>
    19de:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <sg_bSDCardReady>
    19e2:	88 23       	and	r24, r24
    19e4:	09 f4       	brne	.+2      	; 0x19e8 <ModuleControllerStateHandle+0x10c>
    19e6:	81 c0       	rjmp	.+258    	; 0x1aea <ModuleControllerStateHandle+0x20e>
    19e8:	0e 94 f5 20 	call	0x41ea	; 0x41ea <STORE_StartNewSession>
    19ec:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <sg_bSDCardReady>
    19f0:	7c c0       	rjmp	.+248    	; 0x1aea <ModuleControllerStateHandle+0x20e>
    19f2:	61 99       	sbic	0x0c, 1	; 12
    19f4:	0d c0       	rjmp	.+26     	; 0x1a10 <ModuleControllerStateHandle+0x134>
    19f6:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <sg_bModuleRegistered>
    19fa:	88 23       	and	r24, r24
    19fc:	19 f0       	breq	.+6      	; 0x1a04 <ModuleControllerStateHandle+0x128>
    19fe:	8e b1       	in	r24, 0x0e	; 14
    1a00:	82 60       	ori	r24, 0x02	; 2
    1a02:	8e b9       	out	0x0e, r24	; 14
    1a04:	68 e8       	ldi	r22, 0x88	; 136
    1a06:	73 e1       	ldi	r23, 0x13	; 19
    1a08:	80 e0       	ldi	r24, 0x00	; 0
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	0e 94 1f 21 	call	0x423e	; 0x423e <Delay>
    1a10:	cb e0       	ldi	r28, 0x0B	; 11
    1a12:	2a c0       	rjmp	.+84     	; 0x1a68 <ModuleControllerStateHandle+0x18c>
    1a14:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <sg_bModuleRegistered>
    1a18:	88 23       	and	r24, r24
    1a1a:	49 f0       	breq	.+18     	; 0x1a2e <ModuleControllerStateHandle+0x152>
    1a1c:	88 b1       	in	r24, 0x08	; 8
    1a1e:	80 61       	ori	r24, 0x10	; 16
    1a20:	88 b9       	out	0x08, r24	; 8
    1a22:	88 b1       	in	r24, 0x08	; 8
    1a24:	8f 77       	andi	r24, 0x7F	; 127
    1a26:	88 b9       	out	0x08, r24	; 8
    1a28:	88 b1       	in	r24, 0x08	; 8
    1a2a:	80 68       	ori	r24, 0x80	; 128
    1a2c:	88 b9       	out	0x08, r24	; 8
    1a2e:	68 ee       	ldi	r22, 0xE8	; 232
    1a30:	73 e0       	ldi	r23, 0x03	; 3
    1a32:	80 e0       	ldi	r24, 0x00	; 0
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	0e 94 1f 21 	call	0x423e	; 0x423e <Delay>
    1a3a:	88 b1       	in	r24, 0x08	; 8
    1a3c:	8f 7e       	andi	r24, 0xEF	; 239
    1a3e:	88 b9       	out	0x08, r24	; 8
    1a40:	68 e8       	ldi	r22, 0x88	; 136
    1a42:	73 e1       	ldi	r23, 0x13	; 19
    1a44:	80 e0       	ldi	r24, 0x00	; 0
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	0e 94 1f 21 	call	0x423e	; 0x423e <Delay>
    1a4c:	60 e5       	ldi	r22, 0x50	; 80
    1a4e:	73 ec       	ldi	r23, 0xC3	; 195
    1a50:	80 e0       	ldi	r24, 0x00	; 0
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	0e 94 1f 21 	call	0x423e	; 0x423e <Delay>
    1a58:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <sg_bOvercurrentSignal>
    1a5c:	88 23       	and	r24, r24
    1a5e:	19 f0       	breq	.+6      	; 0x1a66 <ModuleControllerStateHandle+0x18a>
    1a60:	10 92 17 03 	sts	0x0317, r1	; 0x800317 <sg_bOvercurrentSignal>
    1a64:	01 c0       	rjmp	.+2      	; 0x1a68 <ModuleControllerStateHandle+0x18c>
    1a66:	c1 2f       	mov	r28, r17
    1a68:	1f ef       	ldi	r17, 0xFF	; 255
    1a6a:	1c 0f       	add	r17, r28
    1a6c:	c1 11       	cpse	r28, r1
    1a6e:	d2 cf       	rjmp	.-92     	; 0x1a14 <ModuleControllerStateHandle+0x138>
    1a70:	3c c0       	rjmp	.+120    	; 0x1aea <ModuleControllerStateHandle+0x20e>
    1a72:	61 99       	sbic	0x0c, 1	; 12
    1a74:	0d c0       	rjmp	.+26     	; 0x1a90 <ModuleControllerStateHandle+0x1b4>
    1a76:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <sg_bModuleRegistered>
    1a7a:	88 23       	and	r24, r24
    1a7c:	19 f0       	breq	.+6      	; 0x1a84 <ModuleControllerStateHandle+0x1a8>
    1a7e:	8e b1       	in	r24, 0x0e	; 14
    1a80:	82 60       	ori	r24, 0x02	; 2
    1a82:	8e b9       	out	0x0e, r24	; 14
    1a84:	68 e8       	ldi	r22, 0x88	; 136
    1a86:	73 e1       	ldi	r23, 0x13	; 19
    1a88:	80 e0       	ldi	r24, 0x00	; 0
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	0e 94 1f 21 	call	0x423e	; 0x423e <Delay>
    1a90:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <sg_bModuleRegistered>
    1a94:	88 23       	and	r24, r24
    1a96:	49 f0       	breq	.+18     	; 0x1aaa <ModuleControllerStateHandle+0x1ce>
    1a98:	88 b1       	in	r24, 0x08	; 8
    1a9a:	80 61       	ori	r24, 0x10	; 16
    1a9c:	88 b9       	out	0x08, r24	; 8
    1a9e:	88 b1       	in	r24, 0x08	; 8
    1aa0:	8f 77       	andi	r24, 0x7F	; 127
    1aa2:	88 b9       	out	0x08, r24	; 8
    1aa4:	88 b1       	in	r24, 0x08	; 8
    1aa6:	80 68       	ori	r24, 0x80	; 128
    1aa8:	88 b9       	out	0x08, r24	; 8
    1aaa:	68 e8       	ldi	r22, 0x88	; 136
    1aac:	73 e1       	ldi	r23, 0x13	; 19
    1aae:	80 e0       	ldi	r24, 0x00	; 0
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	0e 94 1f 21 	call	0x423e	; 0x423e <Delay>
    1ab6:	10 92 1a 03 	sts	0x031A, r1	; 0x80031a <sg_bCellBalanceReady>
    1aba:	10 92 19 03 	sts	0x0319, r1	; 0x800319 <sg_bCellBalancedOnce>
    1abe:	81 e0       	ldi	r24, 0x01	; 1
    1ac0:	80 93 18 03 	sts	0x0318, r24	; 0x800318 <sg_bStopDischarge>
    1ac4:	eb e6       	ldi	r30, 0x6B	; 107
    1ac6:	f0 e0       	ldi	r31, 0x00	; 0
    1ac8:	80 81       	ld	r24, Z
    1aca:	82 60       	ori	r24, 0x02	; 2
    1acc:	80 83       	st	Z, r24
    1ace:	e8 e6       	ldi	r30, 0x68	; 104
    1ad0:	f0 e0       	ldi	r31, 0x00	; 0
    1ad2:	80 81       	ld	r24, Z
    1ad4:	82 60       	ori	r24, 0x02	; 2
    1ad6:	80 83       	st	Z, r24
    1ad8:	08 c0       	rjmp	.+16     	; 0x1aea <ModuleControllerStateHandle+0x20e>
    1ada:	4a ef       	ldi	r20, 0xFA	; 250
    1adc:	53 e0       	ldi	r21, 0x03	; 3
    1ade:	67 e4       	ldi	r22, 0x47	; 71
    1ae0:	72 e0       	ldi	r23, 0x02	; 2
    1ae2:	80 e0       	ldi	r24, 0x00	; 0
    1ae4:	0e 94 d0 23 	call	0x47a0	; 0x47a0 <PlatformAssert>
    1ae8:	d5 e0       	ldi	r29, 0x05	; 5
    1aea:	d0 93 07 01 	sts	0x0107, r29	; 0x800107 <sg_eModuleControllerStateCurrent>
    1aee:	0e 94 ef 26 	call	0x4dde	; 0x4dde <SendModuleControllerStatus>
    1af2:	df 91       	pop	r29
    1af4:	cf 91       	pop	r28
    1af6:	1f 91       	pop	r17
    1af8:	08 95       	ret

Disassembly of section .text.PlatformGetRegistrationID:

00004e96 <PlatformGetRegistrationID>:
}

uint8_t PlatformGetRegistrationID( void )
{
	return(sg_u8ModuleRegistrationID);
}
    4e96:	80 91 27 03 	lds	r24, 0x0327	; 0x800327 <sg_u8ModuleRegistrationID>
    4e9a:	08 95       	ret

Disassembly of section .text.SetSysclock:

00004e62 <SetSysclock>:

void SetSysclock( void )
{
	// First set the prescaler enable
	CLKPR = (1 << CLKPCE);
    4e62:	e1 e6       	ldi	r30, 0x61	; 97
    4e64:	f0 e0       	ldi	r31, 0x00	; 0
    4e66:	80 e8       	ldi	r24, 0x80	; 128
    4e68:	80 83       	st	Z, r24
	
	// Now set the desired prescale value
	CLKPR = SYSCLOCK_PRESCALE;
    4e6a:	10 82       	st	Z, r1
    4e6c:	08 95       	ret

Disassembly of section .text.ModuleControllerGetUniqueID:

00003a36 <ModuleControllerGetUniqueID>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    3a36:	cf 92       	push	r12
    3a38:	df 92       	push	r13
    3a3a:	ef 92       	push	r14
    3a3c:	ff 92       	push	r15
    3a3e:	80 e0       	ldi	r24, 0x00	; 0
    3a40:	90 e0       	ldi	r25, 0x00	; 0
    3a42:	0e 94 c2 26 	call	0x4d84	; 0x4d84 <EEPROMRead>
    3a46:	c8 2e       	mov	r12, r24
    3a48:	d1 2c       	mov	r13, r1
    3a4a:	e1 2c       	mov	r14, r1
    3a4c:	f1 2c       	mov	r15, r1
    3a4e:	81 e0       	ldi	r24, 0x01	; 1
    3a50:	90 e0       	ldi	r25, 0x00	; 0
    3a52:	0e 94 c2 26 	call	0x4d84	; 0x4d84 <EEPROMRead>
    3a56:	90 e0       	ldi	r25, 0x00	; 0
    3a58:	a0 e0       	ldi	r26, 0x00	; 0
    3a5a:	b0 e0       	ldi	r27, 0x00	; 0
    3a5c:	ba 2f       	mov	r27, r26
    3a5e:	a9 2f       	mov	r26, r25
    3a60:	98 2f       	mov	r25, r24
    3a62:	88 27       	eor	r24, r24
    3a64:	c8 2a       	or	r12, r24
    3a66:	d9 2a       	or	r13, r25
    3a68:	ea 2a       	or	r14, r26
    3a6a:	fb 2a       	or	r15, r27
    3a6c:	82 e0       	ldi	r24, 0x02	; 2
    3a6e:	90 e0       	ldi	r25, 0x00	; 0
    3a70:	0e 94 c2 26 	call	0x4d84	; 0x4d84 <EEPROMRead>
    3a74:	90 e0       	ldi	r25, 0x00	; 0
    3a76:	a0 e0       	ldi	r26, 0x00	; 0
    3a78:	b0 e0       	ldi	r27, 0x00	; 0
    3a7a:	dc 01       	movw	r26, r24
    3a7c:	99 27       	eor	r25, r25
    3a7e:	88 27       	eor	r24, r24
    3a80:	c8 2a       	or	r12, r24
    3a82:	d9 2a       	or	r13, r25
    3a84:	ea 2a       	or	r14, r26
    3a86:	fb 2a       	or	r15, r27
    3a88:	83 e0       	ldi	r24, 0x03	; 3
    3a8a:	90 e0       	ldi	r25, 0x00	; 0
    3a8c:	0e 94 c2 26 	call	0x4d84	; 0x4d84 <EEPROMRead>
    3a90:	90 e0       	ldi	r25, 0x00	; 0
    3a92:	a0 e0       	ldi	r26, 0x00	; 0
    3a94:	b0 e0       	ldi	r27, 0x00	; 0
    3a96:	b8 2f       	mov	r27, r24
    3a98:	aa 27       	eor	r26, r26
    3a9a:	99 27       	eor	r25, r25
    3a9c:	88 27       	eor	r24, r24
    3a9e:	bc 01       	movw	r22, r24
    3aa0:	cd 01       	movw	r24, r26
    3aa2:	6c 29       	or	r22, r12
    3aa4:	7d 29       	or	r23, r13
    3aa6:	8e 29       	or	r24, r14
    3aa8:	9f 29       	or	r25, r15
    3aaa:	ff 90       	pop	r15
    3aac:	ef 90       	pop	r14
    3aae:	df 90       	pop	r13
    3ab0:	cf 90       	pop	r12
    3ab2:	08 95       	ret

Disassembly of section .text.TimerInit:

00004290 <TimerInit>:
    4290:	14 bc       	out	0x24, r1	; 36
    4292:	92 e0       	ldi	r25, 0x02	; 2
    4294:	95 bd       	out	0x25, r25	; 37
    4296:	a4 e6       	ldi	r26, 0x64	; 100
    4298:	b0 e0       	ldi	r27, 0x00	; 0
    429a:	8c 91       	ld	r24, X
    429c:	87 7f       	andi	r24, 0xF7	; 247
    429e:	8c 93       	st	X, r24
    42a0:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f0080>
    42a4:	84 e0       	ldi	r24, 0x04	; 4
    42a6:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f0081>
    42aa:	96 bb       	out	0x16, r25	; 22
    42ac:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f0084>
    42b0:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f0085>
    42b4:	8b 5c       	subi	r24, 0xCB	; 203
    42b6:	93 4f       	sbci	r25, 0xF3	; 243
    42b8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f0089>
    42bc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f0088>
    42c0:	ef e6       	ldi	r30, 0x6F	; 111
    42c2:	f0 e0       	ldi	r31, 0x00	; 0
    42c4:	80 81       	ld	r24, Z
    42c6:	82 60       	ori	r24, 0x02	; 2
    42c8:	80 83       	st	Z, r24
    42ca:	8c 91       	ld	r24, X
    42cc:	8f 7e       	andi	r24, 0xEF	; 239
    42ce:	8c 93       	st	X, r24
    42d0:	ae e6       	ldi	r26, 0x6E	; 110
    42d2:	b0 e0       	ldi	r27, 0x00	; 0
    42d4:	8c 91       	ld	r24, X
    42d6:	8e 7f       	andi	r24, 0xFE	; 254
    42d8:	8c 93       	st	X, r24
    42da:	80 81       	ld	r24, Z
    42dc:	8e 7f       	andi	r24, 0xFE	; 254
    42de:	80 83       	st	Z, r24
    42e0:	08 95       	ret

Disassembly of section .text.__vector_12:

00003284 <__vector_12>:
    3284:	78 94       	sei
    3286:	1f 92       	push	r1
    3288:	0f 92       	push	r0
    328a:	0f b6       	in	r0, 0x3f	; 63
    328c:	0f 92       	push	r0
    328e:	11 24       	eor	r1, r1
    3290:	8f 93       	push	r24
    3292:	9f 93       	push	r25
    3294:	ef 93       	push	r30
    3296:	ff 93       	push	r31
    3298:	82 e0       	ldi	r24, 0x02	; 2
    329a:	86 bb       	out	0x16, r24	; 22
    329c:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f0084>
    32a0:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f0085>
    32a4:	8b 5c       	subi	r24, 0xCB	; 203
    32a6:	93 4f       	sbci	r25, 0xF3	; 243
    32a8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f0089>
    32ac:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f0088>
    32b0:	ef e6       	ldi	r30, 0x6F	; 111
    32b2:	f0 e0       	ldi	r31, 0x00	; 0
    32b4:	80 81       	ld	r24, Z
    32b6:	82 60       	ori	r24, 0x02	; 2
    32b8:	80 83       	st	Z, r24
    32ba:	81 e0       	ldi	r24, 0x01	; 1
    32bc:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <sg_bNewTick>
    32c0:	80 91 75 09 	lds	r24, 0x0975	; 0x800975 <sg_u8CellFrameTimer>
    32c4:	8f 5f       	subi	r24, 0xFF	; 255
    32c6:	80 93 75 09 	sts	0x0975, r24	; 0x800975 <sg_u8CellFrameTimer>
    32ca:	80 91 75 09 	lds	r24, 0x0975	; 0x800975 <sg_u8CellFrameTimer>
    32ce:	83 30       	cpi	r24, 0x03	; 3
    32d0:	78 f0       	brcs	.+30     	; 0x32f0 <__vector_12+0x6c>
    32d2:	10 92 75 09 	sts	0x0975, r1	; 0x800975 <sg_u8CellFrameTimer>
    32d6:	81 e0       	ldi	r24, 0x01	; 1
    32d8:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <sg_bFrameStart>
    32dc:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <sg_eFrameStatus>
    32e0:	81 30       	cpi	r24, 0x01	; 1
    32e2:	19 f4       	brne	.+6      	; 0x32ea <__vector_12+0x66>
    32e4:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <sg_eFrameStatus>
    32e8:	03 c0       	rjmp	.+6      	; 0x32f0 <__vector_12+0x6c>
    32ea:	81 e0       	ldi	r24, 0x01	; 1
    32ec:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <sg_eFrameStatus>
    32f0:	80 91 72 09 	lds	r24, 0x0972	; 0x800972 <sg_u8TicksSinceLastPackControllerMessage>
    32f4:	8f 3f       	cpi	r24, 0xFF	; 255
    32f6:	29 f0       	breq	.+10     	; 0x3302 <__vector_12+0x7e>
    32f8:	80 91 72 09 	lds	r24, 0x0972	; 0x800972 <sg_u8TicksSinceLastPackControllerMessage>
    32fc:	8f 5f       	subi	r24, 0xFF	; 255
    32fe:	80 93 72 09 	sts	0x0972, r24	; 0x800972 <sg_u8TicksSinceLastPackControllerMessage>
    3302:	80 91 72 09 	lds	r24, 0x0972	; 0x800972 <sg_u8TicksSinceLastPackControllerMessage>
    3306:	8f 36       	cpi	r24, 0x6F	; 111
    3308:	40 f0       	brcs	.+16     	; 0x331a <__vector_12+0x96>
    330a:	80 91 72 09 	lds	r24, 0x0972	; 0x800972 <sg_u8TicksSinceLastPackControllerMessage>
    330e:	8f 56       	subi	r24, 0x6F	; 111
    3310:	80 93 72 09 	sts	0x0972, r24	; 0x800972 <sg_u8TicksSinceLastPackControllerMessage>
    3314:	81 e0       	ldi	r24, 0x01	; 1
    3316:	80 93 1f 03 	sts	0x031F, r24	; 0x80031f <sg_bPackControllerTimeout>
    331a:	80 91 73 09 	lds	r24, 0x0973	; 0x800973 <sg_u8CellStringPowerTimer>
    331e:	88 23       	and	r24, r24
    3320:	29 f0       	breq	.+10     	; 0x332c <__vector_12+0xa8>
    3322:	80 91 73 09 	lds	r24, 0x0973	; 0x800973 <sg_u8CellStringPowerTimer>
    3326:	81 50       	subi	r24, 0x01	; 1
    3328:	80 93 73 09 	sts	0x0973, r24	; 0x800973 <sg_u8CellStringPowerTimer>
    332c:	ff 91       	pop	r31
    332e:	ef 91       	pop	r30
    3330:	9f 91       	pop	r25
    3332:	8f 91       	pop	r24
    3334:	0f 90       	pop	r0
    3336:	0f be       	out	0x3f, r0	; 63
    3338:	0f 90       	pop	r0
    333a:	1f 90       	pop	r1
    333c:	18 95       	reti

Disassembly of section .text.WatchdogReset:

00004ea4 <WatchdogReset>:
		sg_u8CellStringPowerTimer--;
	}
}

void WatchdogReset( void )
{
    4ea4:	08 95       	ret

Disassembly of section .text.WatchdogOff:

00004ca0 <WatchdogOff>:
// }

// Assume interrupts are disabled
void WatchdogOff( void )  // turn it off even when WDT_ENABLE is not defined
{
	wdt_reset();
    4ca0:	a8 95       	wdr
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    4ca2:	0f b6       	in	r0, 0x3f	; 63
    4ca4:	f8 94       	cli
    4ca6:	a8 95       	wdr
    4ca8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f0060>
    4cac:	88 61       	ori	r24, 0x18	; 24
    4cae:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f0060>
    4cb2:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f0060>
    4cb6:	0f be       	out	0x3f, r0	; 63
    4cb8:	08 95       	ret

Disassembly of section .text.__vector_28:

000042e2 <__vector_28>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    42e2:	1f 92       	push	r1
    42e4:	0f 92       	push	r0
    42e6:	0f b6       	in	r0, 0x3f	; 63
    42e8:	0f 92       	push	r0
    42ea:	11 24       	eor	r1, r1
    42ec:	2f 93       	push	r18
    42ee:	3f 93       	push	r19
    42f0:	4f 93       	push	r20
    42f2:	5f 93       	push	r21
    42f4:	6f 93       	push	r22
    42f6:	7f 93       	push	r23
    42f8:	8f 93       	push	r24
    42fa:	9f 93       	push	r25
    42fc:	af 93       	push	r26
    42fe:	bf 93       	push	r27
    4300:	ef 93       	push	r30
    4302:	ff 93       	push	r31
    4304:	46 e0       	ldi	r20, 0x06	; 6
    4306:	53 e0       	ldi	r21, 0x03	; 3
    4308:	67 e4       	ldi	r22, 0x47	; 71
    430a:	72 e0       	ldi	r23, 0x02	; 2
    430c:	80 e0       	ldi	r24, 0x00	; 0
    430e:	0e 94 d0 23 	call	0x47a0	; 0x47a0 <PlatformAssert>
    4312:	ff 91       	pop	r31
    4314:	ef 91       	pop	r30
    4316:	bf 91       	pop	r27
    4318:	af 91       	pop	r26
    431a:	9f 91       	pop	r25
    431c:	8f 91       	pop	r24
    431e:	7f 91       	pop	r23
    4320:	6f 91       	pop	r22
    4322:	5f 91       	pop	r21
    4324:	4f 91       	pop	r20
    4326:	3f 91       	pop	r19
    4328:	2f 91       	pop	r18
    432a:	0f 90       	pop	r0
    432c:	0f be       	out	0x3f, r0	; 63
    432e:	0f 90       	pop	r0
    4330:	1f 90       	pop	r1
    4332:	18 95       	reti

Disassembly of section .text.__vector_23:

0000370c <__vector_23>:
    370c:	78 94       	sei
    370e:	1f 92       	push	r1
    3710:	0f 92       	push	r0
    3712:	0f b6       	in	r0, 0x3f	; 63
    3714:	0f 92       	push	r0
    3716:	11 24       	eor	r1, r1
    3718:	2f 93       	push	r18
    371a:	3f 93       	push	r19
    371c:	4f 93       	push	r20
    371e:	5f 93       	push	r21
    3720:	6f 93       	push	r22
    3722:	7f 93       	push	r23
    3724:	8f 93       	push	r24
    3726:	9f 93       	push	r25
    3728:	af 93       	push	r26
    372a:	bf 93       	push	r27
    372c:	ef 93       	push	r30
    372e:	ff 93       	push	r31
    3730:	96 b1       	in	r25, 0x06	; 6
    3732:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    3736:	83 30       	cpi	r24, 0x03	; 3
    3738:	21 f0       	breq	.+8      	; 0x3742 <__vector_23+0x36>
    373a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    373e:	82 30       	cpi	r24, 0x02	; 2
    3740:	c9 f4       	brne	.+50     	; 0x3774 <__vector_23+0x68>
    3742:	91 ff       	sbrs	r25, 1
    3744:	17 c0       	rjmp	.+46     	; 0x3774 <__vector_23+0x68>
    3746:	88 b1       	in	r24, 0x08	; 8
    3748:	8f 7e       	andi	r24, 0xEF	; 239
    374a:	88 b9       	out	0x08, r24	; 8
    374c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    3750:	83 30       	cpi	r24, 0x03	; 3
    3752:	19 f4       	brne	.+6      	; 0x375a <__vector_23+0x4e>
    3754:	81 e0       	ldi	r24, 0x01	; 1
    3756:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <ModuleControllerStateSet>
    375a:	eb e6       	ldi	r30, 0x6B	; 107
    375c:	f0 e0       	ldi	r31, 0x00	; 0
    375e:	80 81       	ld	r24, Z
    3760:	8d 7f       	andi	r24, 0xFD	; 253
    3762:	80 83       	st	Z, r24
    3764:	e8 e6       	ldi	r30, 0x68	; 104
    3766:	f0 e0       	ldi	r31, 0x00	; 0
    3768:	80 81       	ld	r24, Z
    376a:	8d 7f       	andi	r24, 0xFD	; 253
    376c:	80 83       	st	Z, r24
    376e:	81 e0       	ldi	r24, 0x01	; 1
    3770:	80 93 17 03 	sts	0x0317, r24	; 0x800317 <sg_bOvercurrentSignal>
    3774:	ff 91       	pop	r31
    3776:	ef 91       	pop	r30
    3778:	bf 91       	pop	r27
    377a:	af 91       	pop	r26
    377c:	9f 91       	pop	r25
    377e:	8f 91       	pop	r24
    3780:	7f 91       	pop	r23
    3782:	6f 91       	pop	r22
    3784:	5f 91       	pop	r21
    3786:	4f 91       	pop	r20
    3788:	3f 91       	pop	r19
    378a:	2f 91       	pop	r18
    378c:	0f 90       	pop	r0
    378e:	0f be       	out	0x3f, r0	; 63
    3790:	0f 90       	pop	r0
    3792:	1f 90       	pop	r1
    3794:	18 95       	reti

Disassembly of section .text.__vector_24:

00004334 <__vector_24>:
    4334:	78 94       	sei
    4336:	1f 92       	push	r1
    4338:	0f 92       	push	r0
    433a:	0f b6       	in	r0, 0x3f	; 63
    433c:	0f 92       	push	r0
    433e:	11 24       	eor	r1, r1
    4340:	2f 93       	push	r18
    4342:	3f 93       	push	r19
    4344:	4f 93       	push	r20
    4346:	5f 93       	push	r21
    4348:	6f 93       	push	r22
    434a:	7f 93       	push	r23
    434c:	8f 93       	push	r24
    434e:	9f 93       	push	r25
    4350:	af 93       	push	r26
    4352:	bf 93       	push	r27
    4354:	ef 93       	push	r30
    4356:	ff 93       	push	r31
    4358:	8b b1       	in	r24, 0x0b	; 11
    435a:	0e 94 5d 26 	call	0x4cba	; 0x4cba <Check5VLoss>
    435e:	ff 91       	pop	r31
    4360:	ef 91       	pop	r30
    4362:	bf 91       	pop	r27
    4364:	af 91       	pop	r26
    4366:	9f 91       	pop	r25
    4368:	8f 91       	pop	r24
    436a:	7f 91       	pop	r23
    436c:	6f 91       	pop	r22
    436e:	5f 91       	pop	r21
    4370:	4f 91       	pop	r20
    4372:	3f 91       	pop	r19
    4374:	2f 91       	pop	r18
    4376:	0f 90       	pop	r0
    4378:	0f be       	out	0x3f, r0	; 63
    437a:	0f 90       	pop	r0
    437c:	1f 90       	pop	r1
    437e:	18 95       	reti

Disassembly of section .text.vUARTRXStart:

00004d2e <vUARTRXStart>:
}

// Called at the start of cell string data via MC RX
void vUARTRXStart(void)
{
	sg_u8CellBufferRX = 0;
    4d2e:	10 92 70 09 	sts	0x0970, r1	; 0x800970 <sg_u8CellBufferRX>
	sg_u8CellIndex = 0;
    4d32:	10 92 71 09 	sts	0x0971, r1	; 0x800971 <sg_u8CellIndex>
	sg_u16BytesReceived = 0;
    4d36:	10 92 5d 09 	sts	0x095D, r1	; 0x80095d <sg_u16BytesReceived+0x1>
    4d3a:	10 92 5c 09 	sts	0x095C, r1	; 0x80095c <sg_u16BytesReceived>
	sg_u8CellReports = 0;
    4d3e:	10 92 6f 09 	sts	0x096F, r1	; 0x80096f <sg_u8CellReports>
    4d42:	08 95       	ret

Disassembly of section .text.vUARTRXEnd:

00004bbe <vUARTRXEnd>:
	// disable the edge interrupt
//	VUART_RX_DISABLE();
	// disable bit timer interrupt, should already be off but just in case
//	TIMER_CHB_INT_DISABLE();
	// update bytes and cells received
	sg_sFrame.sg_u16BytesReceived = sg_u16BytesReceived;
    4bbe:	80 91 5c 09 	lds	r24, 0x095C	; 0x80095c <sg_u16BytesReceived>
    4bc2:	90 91 5d 09 	lds	r25, 0x095D	; 0x80095d <sg_u16BytesReceived+0x1>
    4bc6:	e0 e1       	ldi	r30, 0x10	; 16
    4bc8:	f1 e0       	ldi	r31, 0x01	; 1
    4bca:	94 a7       	std	Z+44, r25	; 0x2c
    4bcc:	83 a7       	std	Z+43, r24	; 0x2b
	sg_sFrame.sg_u8CellCPUCount = sg_u8CellReports;
    4bce:	80 91 6f 09 	lds	r24, 0x096F	; 0x80096f <sg_u8CellReports>
    4bd2:	85 a7       	std	Z+45, r24	; 0x2d
	sg_u16BytesReceived = 0;
    4bd4:	10 92 5d 09 	sts	0x095D, r1	; 0x80095d <sg_u16BytesReceived+0x1>
    4bd8:	10 92 5c 09 	sts	0x095C, r1	; 0x80095c <sg_u16BytesReceived>
	sg_u8CellReports = 0;
    4bdc:	10 92 6f 09 	sts	0x096F, r1	; 0x80096f <sg_u8CellReports>
    4be0:	08 95       	ret

Disassembly of section .text.vUARTRXData:

00003ca4 <vUARTRXData>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    3ca4:	e0 91 70 09 	lds	r30, 0x0970	; 0x800970 <sg_u8CellBufferRX>
    3ca8:	21 e0       	ldi	r18, 0x01	; 1
    3caa:	2e 0f       	add	r18, r30
    3cac:	20 93 70 09 	sts	0x0970, r18	; 0x800970 <sg_u8CellBufferRX>
    3cb0:	f0 e0       	ldi	r31, 0x00	; 0
    3cb2:	e0 5b       	subi	r30, 0xB0	; 176
    3cb4:	f6 4f       	sbci	r31, 0xF6	; 246
    3cb6:	80 83       	st	Z, r24
    3cb8:	80 91 5c 09 	lds	r24, 0x095C	; 0x80095c <sg_u16BytesReceived>
    3cbc:	90 91 5d 09 	lds	r25, 0x095D	; 0x80095d <sg_u16BytesReceived+0x1>
    3cc0:	01 96       	adiw	r24, 0x01	; 1
    3cc2:	90 93 5d 09 	sts	0x095D, r25	; 0x80095d <sg_u16BytesReceived+0x1>
    3cc6:	80 93 5c 09 	sts	0x095C, r24	; 0x80095c <sg_u16BytesReceived>
    3cca:	24 30       	cpi	r18, 0x04	; 4
    3ccc:	38 f1       	brcs	.+78     	; 0x3d1c <vUARTRXData+0x78>
    3cce:	10 92 70 09 	sts	0x0970, r1	; 0x800970 <sg_u8CellBufferRX>
    3cd2:	80 91 71 09 	lds	r24, 0x0971	; 0x800971 <sg_u8CellIndex>
    3cd6:	8c 36       	cpi	r24, 0x6C	; 108
    3cd8:	08 f5       	brcc	.+66     	; 0x3d1c <vUARTRXData+0x78>
    3cda:	e8 2f       	mov	r30, r24
    3cdc:	f0 e0       	ldi	r31, 0x00	; 0
    3cde:	75 96       	adiw	r30, 0x15	; 21
    3ce0:	ee 0f       	add	r30, r30
    3ce2:	ff 1f       	adc	r31, r31
    3ce4:	ee 0f       	add	r30, r30
    3ce6:	ff 1f       	adc	r31, r31
    3ce8:	e0 5f       	subi	r30, 0xF0	; 240
    3cea:	fe 4f       	sbci	r31, 0xFE	; 254
    3cec:	a0 e5       	ldi	r26, 0x50	; 80
    3cee:	b9 e0       	ldi	r27, 0x09	; 9
    3cf0:	4d 91       	ld	r20, X+
    3cf2:	5d 91       	ld	r21, X+
    3cf4:	6d 91       	ld	r22, X+
    3cf6:	7c 91       	ld	r23, X
    3cf8:	13 97       	sbiw	r26, 0x03	; 3
    3cfa:	40 83       	st	Z, r20
    3cfc:	51 83       	std	Z+1, r21	; 0x01
    3cfe:	62 83       	std	Z+2, r22	; 0x02
    3d00:	73 83       	std	Z+3, r23	; 0x03
    3d02:	1d 92       	st	X+, r1
    3d04:	1d 92       	st	X+, r1
    3d06:	1d 92       	st	X+, r1
    3d08:	1c 92       	st	X, r1
    3d0a:	13 97       	sbiw	r26, 0x03	; 3
    3d0c:	8f 5f       	subi	r24, 0xFF	; 255
    3d0e:	80 93 71 09 	sts	0x0971, r24	; 0x800971 <sg_u8CellIndex>
    3d12:	80 91 6f 09 	lds	r24, 0x096F	; 0x80096f <sg_u8CellReports>
    3d16:	8f 5f       	subi	r24, 0xFF	; 255
    3d18:	80 93 6f 09 	sts	0x096F, r24	; 0x80096f <sg_u8CellReports>
    3d1c:	08 95       	ret

Disassembly of section .text.PlatformGetSendData:

0000484a <PlatformGetSendData>:
uint16_t PlatformGetSendData( bool bUpdateBalanceStatus )
{
	uint16_t u16SendValue = 0;
	
	
	if( sg_bStopDischarge )
    484a:	90 91 18 03 	lds	r25, 0x0318	; 0x800318 <sg_bStopDischarge>
    484e:	99 23       	and	r25, r25
    4850:	51 f0       	breq	.+20     	; 0x4866 <PlatformGetSendData+0x1c>
	{
		if (bUpdateBalanceStatus)	// don't update if ony an availability check
    4852:	88 23       	and	r24, r24
    4854:	59 f0       	breq	.+22     	; 0x486c <PlatformGetSendData+0x22>
		{
			sg_bStopDischarge = false;
    4856:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <sg_bStopDischarge>
			sg_bCellBalancedOnce = true;
    485a:	81 e0       	ldi	r24, 0x01	; 1
    485c:	80 93 19 03 	sts	0x0319, r24	; 0x800319 <sg_bCellBalancedOnce>
		}
		u16SendValue = 0x3ff;
    4860:	8f ef       	ldi	r24, 0xFF	; 255
    4862:	93 e0       	ldi	r25, 0x03	; 3
    4864:	08 95       	ret
			}
		}
		else
#endif
		{
			u16SendValue |= MSG_CELL_SEND_REPORT;
    4866:	80 e0       	ldi	r24, 0x00	; 0
    4868:	90 e8       	ldi	r25, 0x80	; 128
    486a:	08 95       	ret
		if (bUpdateBalanceStatus)	// don't update if ony an availability check
		{
			sg_bStopDischarge = false;
			sg_bCellBalancedOnce = true;
		}
		u16SendValue = 0x3ff;
    486c:	8f ef       	ldi	r24, 0xFF	; 255
    486e:	93 e0       	ldi	r25, 0x03	; 3
#endif
		}
	}
	
	return( u16SendValue );
}
    4870:	08 95       	ret

Disassembly of section .text.ADCCallback:

00004910 <ADCCallback>:
// Called every time there's an ADC read since apparently ISR can't access global variables?  compiler fails
void ADCCallback(EADCType eType,
				 uint16_t u16Reading)
{
	// End of chain? Indicate it's time for an ADC update
	if ((EADCTYPE_COUNT-1) == eType)
    4910:	84 30       	cpi	r24, 0x04	; 4
    4912:	19 f4       	brne	.+6      	; 0x491a <ADCCallback+0xa>
	{
		sg_bADCUpdate = true;
    4914:	91 e0       	ldi	r25, 0x01	; 1
    4916:	90 93 16 03 	sts	0x0316, r25	; 0x800316 <sg_bADCUpdate>
	}
	sg_sFrame.ADCReadings[eType].u16Reading = u16Reading;
    491a:	90 e0       	ldi	r25, 0x00	; 0
    491c:	fc 01       	movw	r30, r24
    491e:	ee 0f       	add	r30, r30
    4920:	ff 1f       	adc	r31, r31
    4922:	8e 0f       	add	r24, r30
    4924:	9f 1f       	adc	r25, r31
    4926:	fc 01       	movw	r30, r24
    4928:	eb 5a       	subi	r30, 0xAB	; 171
    492a:	fe 4f       	sbci	r31, 0xFE	; 254
    492c:	72 83       	std	Z+2, r23	; 0x02
    492e:	61 83       	std	Z+1, r22	; 0x01
	sg_sFrame.ADCReadings[eType].bValid = true;
    4930:	81 e0       	ldi	r24, 0x01	; 1
    4932:	80 83       	st	Z, r24
    4934:	08 95       	ret

Disassembly of section .text.FrameInit:

00002de6 <FrameInit>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    2de6:	cf 93       	push	r28
    2de8:	df 93       	push	r29
    2dea:	81 11       	cpse	r24, r1
    2dec:	0d c0       	rjmp	.+26     	; 0x2e08 <FrameInit+0x22>
    2dee:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <sg_sFrame>
    2df2:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <sg_sFrame+0x1>
    2df6:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <sg_sFrame+0x2>
    2dfa:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <sg_sFrame+0x3>
    2dfe:	8a 37       	cpi	r24, 0x7A	; 122
    2e00:	9a 4d       	sbci	r25, 0xDA	; 218
    2e02:	a7 47       	sbci	r26, 0x77	; 119
    2e04:	ba 4b       	sbci	r27, 0xBA	; 186
    2e06:	29 f1       	breq	.+74     	; 0x2e52 <FrameInit+0x6c>
    2e08:	c0 e1       	ldi	r28, 0x10	; 16
    2e0a:	d1 e0       	ldi	r29, 0x01	; 1
    2e0c:	84 e0       	ldi	r24, 0x04	; 4
    2e0e:	92 e0       	ldi	r25, 0x02	; 2
    2e10:	fe 01       	movw	r30, r28
    2e12:	9c 01       	movw	r18, r24
    2e14:	11 92       	st	Z+, r1
    2e16:	21 50       	subi	r18, 0x01	; 1
    2e18:	30 40       	sbci	r19, 0x00	; 0
    2e1a:	e1 f7       	brne	.-8      	; 0x2e14 <FrameInit+0x2e>
    2e1c:	9d 83       	std	Y+5, r25	; 0x05
    2e1e:	8c 83       	std	Y+4, r24	; 0x04
    2e20:	8a e7       	ldi	r24, 0x7A	; 122
    2e22:	9a ed       	ldi	r25, 0xDA	; 218
    2e24:	a7 e7       	ldi	r26, 0x77	; 119
    2e26:	ba eb       	ldi	r27, 0xBA	; 186
    2e28:	88 83       	st	Y, r24
    2e2a:	99 83       	std	Y+1, r25	; 0x01
    2e2c:	aa 83       	std	Y+2, r26	; 0x02
    2e2e:	bb 83       	std	Y+3, r27	; 0x03
    2e30:	0e 94 1b 1d 	call	0x3a36	; 0x3a36 <ModuleControllerGetUniqueID>
    2e34:	6e 87       	std	Y+14, r22	; 0x0e
    2e36:	7f 87       	std	Y+15, r23	; 0x0f
    2e38:	88 8b       	std	Y+16, r24	; 0x10
    2e3a:	99 8b       	std	Y+17, r25	; 0x11
    2e3c:	8f ef       	ldi	r24, 0xFF	; 255
    2e3e:	8a a7       	std	Y+42, r24	; 0x2a
    2e40:	8b 8b       	std	Y+19, r24	; 0x13
    2e42:	1c 8a       	std	Y+20, r1	; 0x14
    2e44:	84 e0       	ldi	r24, 0x04	; 4
    2e46:	90 e0       	ldi	r25, 0x00	; 0
    2e48:	0e 94 c2 26 	call	0x4d84	; 0x4d84 <EEPROMRead>
    2e4c:	0e 94 21 18 	call	0x3042	; 0x3042 <CellCountExpectedSet>
    2e50:	2a c0       	rjmp	.+84     	; 0x2ea6 <FrameInit+0xc0>
    2e52:	e0 e1       	ldi	r30, 0x10	; 16
    2e54:	f1 e0       	ldi	r31, 0x01	; 1
    2e56:	17 a2       	std	Z+39, r1	; 0x27
    2e58:	11 a6       	std	Z+41, r1	; 0x29
    2e5a:	10 a6       	std	Z+40, r1	; 0x28
    2e5c:	12 a6       	std	Z+42, r1	; 0x2a
    2e5e:	15 a6       	std	Z+45, r1	; 0x2d
    2e60:	16 a6       	std	Z+46, r1	; 0x2e
    2e62:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <sg_sFrame+0x3d>
    2e66:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <sg_sFrame+0x3e>
    2e6a:	a0 91 4f 01 	lds	r26, 0x014F	; 0x80014f <sg_sFrame+0x3f>
    2e6e:	b0 91 50 01 	lds	r27, 0x0150	; 0x800150 <sg_sFrame+0x40>
    2e72:	89 2b       	or	r24, r25
    2e74:	8a 2b       	or	r24, r26
    2e76:	8b 2b       	or	r24, r27
    2e78:	b1 f4       	brne	.+44     	; 0x2ea6 <FrameInit+0xc0>
    2e7a:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <sg_sFrame+0x3d>
    2e7e:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <sg_sFrame+0x3e>
    2e82:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <sg_sFrame+0x3f>
    2e86:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <sg_sFrame+0x40>
    2e8a:	10 ae       	std	Z+56, r1	; 0x38
    2e8c:	17 aa       	std	Z+55, r1	; 0x37
    2e8e:	12 ae       	std	Z+58, r1	; 0x3a
    2e90:	11 ae       	std	Z+57, r1	; 0x39
    2e92:	14 ae       	std	Z+60, r1	; 0x3c
    2e94:	13 ae       	std	Z+59, r1	; 0x3b
    2e96:	8f e9       	ldi	r24, 0x9F	; 159
    2e98:	95 e1       	ldi	r25, 0x15	; 21
    2e9a:	92 ab       	std	Z+50, r25	; 0x32
    2e9c:	81 ab       	std	Z+49, r24	; 0x31
    2e9e:	94 ab       	std	Z+52, r25	; 0x34
    2ea0:	83 ab       	std	Z+51, r24	; 0x33
    2ea2:	96 ab       	std	Z+54, r25	; 0x36
    2ea4:	85 ab       	std	Z+53, r24	; 0x35
    2ea6:	8f ef       	ldi	r24, 0xFF	; 255
    2ea8:	80 93 79 09 	sts	0x0979, r24	; 0x800979 <sg_u8CurrentBufferIndex>
    2eac:	df 91       	pop	r29
    2eae:	cf 91       	pop	r28
    2eb0:	08 95       	ret

Disassembly of section .text.CellStringPowerStateMachine:

00003820 <CellStringPowerStateMachine>:
    3820:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <sg_eStringPowerState>
    3824:	82 30       	cpi	r24, 0x02	; 2
    3826:	49 f1       	breq	.+82     	; 0x387a <CellStringPowerStateMachine+0x5a>
    3828:	28 f4       	brcc	.+10     	; 0x3834 <CellStringPowerStateMachine+0x14>
    382a:	88 23       	and	r24, r24
    382c:	41 f0       	breq	.+16     	; 0x383e <CellStringPowerStateMachine+0x1e>
    382e:	81 30       	cpi	r24, 0x01	; 1
    3830:	91 f0       	breq	.+36     	; 0x3856 <CellStringPowerStateMachine+0x36>
    3832:	32 c0       	rjmp	.+100    	; 0x3898 <CellStringPowerStateMachine+0x78>
    3834:	83 30       	cpi	r24, 0x03	; 3
    3836:	61 f1       	breq	.+88     	; 0x3890 <CellStringPowerStateMachine+0x70>
    3838:	84 30       	cpi	r24, 0x04	; 4
    383a:	a9 f1       	breq	.+106    	; 0x38a6 <CellStringPowerStateMachine+0x86>
    383c:	2d c0       	rjmp	.+90     	; 0x3898 <CellStringPowerStateMachine+0x78>
    383e:	85 b1       	in	r24, 0x05	; 5
    3840:	8f 7e       	andi	r24, 0xEF	; 239
    3842:	85 b9       	out	0x05, r24	; 5
    3844:	81 e0       	ldi	r24, 0x01	; 1
    3846:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <sg_eStringPowerState>
    384a:	80 e0       	ldi	r24, 0x00	; 0
    384c:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <FrameInit>
    3850:	0e 94 ef 26 	call	0x4dde	; 0x4dde <SendModuleControllerStatus>
    3854:	08 95       	ret
    3856:	85 b1       	in	r24, 0x05	; 5
    3858:	8f 7e       	andi	r24, 0xEF	; 239
    385a:	85 b9       	out	0x05, r24	; 5
    385c:	80 e0       	ldi	r24, 0x00	; 0
    385e:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <FrameInit>
    3862:	82 e0       	ldi	r24, 0x02	; 2
    3864:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <sg_eStringPowerState>
    3868:	81 e0       	ldi	r24, 0x01	; 1
    386a:	80 93 73 09 	sts	0x0973, r24	; 0x800973 <sg_u8CellStringPowerTimer>
    386e:	e0 e1       	ldi	r30, 0x10	; 16
    3870:	f1 e0       	ldi	r31, 0x01	; 1
    3872:	8f ef       	ldi	r24, 0xFF	; 255
    3874:	83 8b       	std	Z+19, r24	; 0x13
    3876:	14 8a       	std	Z+20, r1	; 0x14
    3878:	08 95       	ret
    387a:	80 91 73 09 	lds	r24, 0x0973	; 0x800973 <sg_u8CellStringPowerTimer>
    387e:	81 11       	cpse	r24, r1
    3880:	12 c0       	rjmp	.+36     	; 0x38a6 <CellStringPowerStateMachine+0x86>
    3882:	85 b1       	in	r24, 0x05	; 5
    3884:	80 61       	ori	r24, 0x10	; 16
    3886:	85 b9       	out	0x05, r24	; 5
    3888:	83 e0       	ldi	r24, 0x03	; 3
    388a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <sg_eStringPowerState>
    388e:	08 95       	ret
    3890:	84 e0       	ldi	r24, 0x04	; 4
    3892:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <sg_eStringPowerState>
    3896:	08 95       	ret
    3898:	4d e6       	ldi	r20, 0x6D	; 109
    389a:	52 e0       	ldi	r21, 0x02	; 2
    389c:	67 e4       	ldi	r22, 0x47	; 71
    389e:	72 e0       	ldi	r23, 0x02	; 2
    38a0:	80 e0       	ldi	r24, 0x00	; 0
    38a2:	0e 94 d0 23 	call	0x47a0	; 0x47a0 <PlatformAssert>
    38a6:	08 95       	ret

Disassembly of section .text.main:

00000c32 <main>:
 c32:	cf 93       	push	r28
 c34:	df 93       	push	r29
 c36:	cd b7       	in	r28, 0x3d	; 61
 c38:	de b7       	in	r29, 0x3e	; 62
 c3a:	28 97       	sbiw	r28, 0x08	; 8
 c3c:	0f b6       	in	r0, 0x3f	; 63
 c3e:	f8 94       	cli
 c40:	de bf       	out	0x3e, r29	; 62
 c42:	0f be       	out	0x3f, r0	; 63
 c44:	cd bf       	out	0x3d, r28	; 61
 c46:	0e 94 50 26 	call	0x4ca0	; 0x4ca0 <WatchdogOff>
 c4a:	88 b1       	in	r24, 0x08	; 8
 c4c:	8f 7e       	andi	r24, 0xEF	; 239
 c4e:	88 b9       	out	0x08, r24	; 8
 c50:	87 b1       	in	r24, 0x07	; 7
 c52:	80 61       	ori	r24, 0x10	; 16
 c54:	87 b9       	out	0x07, r24	; 7
 c56:	87 b1       	in	r24, 0x07	; 7
 c58:	8d 7f       	andi	r24, 0xFD	; 253
 c5a:	87 b9       	out	0x07, r24	; 7
 c5c:	87 b1       	in	r24, 0x07	; 7
 c5e:	80 68       	ori	r24, 0x80	; 128
 c60:	87 b9       	out	0x07, r24	; 7
 c62:	88 b1       	in	r24, 0x08	; 8
 c64:	8f 7e       	andi	r24, 0xEF	; 239
 c66:	88 b9       	out	0x08, r24	; 8
 c68:	8d b1       	in	r24, 0x0d	; 13
 c6a:	82 60       	ori	r24, 0x02	; 2
 c6c:	8d b9       	out	0x0d, r24	; 13
 c6e:	8e b1       	in	r24, 0x0e	; 14
 c70:	8d 7f       	andi	r24, 0xFD	; 253
 c72:	8e b9       	out	0x0e, r24	; 14
 c74:	84 b1       	in	r24, 0x04	; 4
 c76:	80 61       	ori	r24, 0x10	; 16
 c78:	84 b9       	out	0x04, r24	; 4
 c7a:	85 b1       	in	r24, 0x05	; 5
 c7c:	8f 7e       	andi	r24, 0xEF	; 239
 c7e:	85 b9       	out	0x05, r24	; 5
 c80:	84 b7       	in	r24, 0x34	; 52
 c82:	80 93 6d 09 	sts	0x096D, r24	; 0x80096d <sg_u8Reason>
 c86:	80 91 6d 09 	lds	r24, 0x096D	; 0x80096d <sg_u8Reason>
 c8a:	83 ff       	sbrs	r24, 3
 c8c:	0a c0       	rjmp	.+20     	; 0xca2 <main+0x70>
 c8e:	80 91 28 03 	lds	r24, 0x0328	; 0x800328 <sg_eWDTCurrentStatus>
 c92:	e0 e1       	ldi	r30, 0x10	; 16
 c94:	f1 e0       	ldi	r31, 0x01	; 1
 c96:	82 89       	ldd	r24, Z+18	; 0x12
 c98:	8f 5f       	subi	r24, 0xFF	; 255
 c9a:	82 8b       	std	Z+18, r24	; 0x12
 c9c:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <ModuleControllerStateHandle>
 ca0:	70 c0       	rjmp	.+224    	; 0xd82 <main+0x150>
 ca2:	80 91 6d 09 	lds	r24, 0x096D	; 0x80096d <sg_u8Reason>
 ca6:	80 91 6d 09 	lds	r24, 0x096D	; 0x80096d <sg_u8Reason>
 caa:	80 91 6d 09 	lds	r24, 0x096D	; 0x80096d <sg_u8Reason>
 cae:	f8 94       	cli
 cb0:	0e 94 31 27 	call	0x4e62	; 0x4e62 <SetSysclock>
 cb4:	0e 94 48 21 	call	0x4290	; 0x4290 <TimerInit>
 cb8:	0e 94 be 22 	call	0x457c	; 0x457c <vUARTInit>
 cbc:	0e 94 87 11 	call	0x230e	; 0x230e <ADCInit>
 cc0:	0e 94 da 1c 	call	0x39b4	; 0x39b4 <STORE_Init>
 cc4:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <sg_bSDCardReady>
 cc8:	81 e0       	ldi	r24, 0x01	; 1
 cca:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <FrameInit>
 cce:	89 e0       	ldi	r24, 0x09	; 9
 cd0:	90 e0       	ldi	r25, 0x00	; 0
 cd2:	0e 94 c2 26 	call	0x4d84	; 0x4d84 <EEPROMRead>
 cd6:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <sg_u8SequentailCountMismatchThreshold>
 cda:	8a b1       	in	r24, 0x0a	; 10
 cdc:	8f 7b       	andi	r24, 0xBF	; 191
 cde:	8a b9       	out	0x0a, r24	; 10
 ce0:	8b b1       	in	r24, 0x0b	; 11
 ce2:	80 64       	ori	r24, 0x40	; 64
 ce4:	8b b9       	out	0x0b, r24	; 11
 ce6:	11 e0       	ldi	r17, 0x01	; 1
 ce8:	1b bb       	out	0x1b, r17	; 27
 cea:	82 e0       	ldi	r24, 0x02	; 2
 cec:	8b bb       	out	0x1b, r24	; 27
 cee:	84 e0       	ldi	r24, 0x04	; 4
 cf0:	8b bb       	out	0x1b, r24	; 27
 cf2:	88 e0       	ldi	r24, 0x08	; 8
 cf4:	8b bb       	out	0x1b, r24	; 27
 cf6:	ec e6       	ldi	r30, 0x6C	; 108
 cf8:	f0 e0       	ldi	r31, 0x00	; 0
 cfa:	80 81       	ld	r24, Z
 cfc:	80 64       	ori	r24, 0x40	; 64
 cfe:	80 83       	st	Z, r24
 d00:	8b b3       	in	r24, 0x1b	; 27
 d02:	84 60       	ori	r24, 0x04	; 4
 d04:	8b bb       	out	0x1b, r24	; 27
 d06:	86 ee       	ldi	r24, 0xE6	; 230
 d08:	98 e0       	ldi	r25, 0x08	; 8
 d0a:	0e 94 37 27 	call	0x4e6e	; 0x4e6e <CANSetRXCallback>
 d0e:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <CANInit>
 d12:	10 92 27 03 	sts	0x0327, r1	; 0x800327 <sg_u8ModuleRegistrationID>
 d16:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <sg_bModuleRegistered>
 d1a:	10 92 76 09 	sts	0x0976, r1	; 0x800976 <sg_bIgnoreStatusRequests>
 d1e:	80 e0       	ldi	r24, 0x00	; 0
 d20:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <ModuleControllerStateSet>
 d24:	10 93 22 03 	sts	0x0322, r17	; 0x800322 <sg_bSendAnnouncement>
 d28:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <sg_bPackControllerTimeout>
 d2c:	10 92 1e 03 	sts	0x031E, r1	; 0x80031e <sg_bSendModuleControllerStatus>
 d30:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <sg_bSendCellStatus>
 d34:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <sg_bSendHardwareDetail>
 d38:	10 92 1b 03 	sts	0x031B, r1	; 0x80031b <sg_bSendCellCommStatus>
 d3c:	10 92 1a 03 	sts	0x031A, r1	; 0x80031a <sg_bCellBalanceReady>
 d40:	10 92 19 03 	sts	0x0319, r1	; 0x800319 <sg_bCellBalancedOnce>
 d44:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <sg_bStopDischarge>
 d48:	10 92 17 03 	sts	0x0317, r1	; 0x800317 <sg_bOvercurrentSignal>
 d4c:	10 92 24 03 	sts	0x0324, r1	; 0x800324 <sg_u8CellStatusTarget>
 d50:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <sg_u8CellStatus>
 d54:	10 92 26 03 	sts	0x0326, r1	; 0x800326 <sg_u8SOC>
 d58:	10 92 25 03 	sts	0x0325, r1	; 0x800325 <sg_u8SOH>
 d5c:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <sg_u8SequentailCountMismatchThreshold>
 d60:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <sg_u8SequentailCellCountMismatches>
 d64:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <RTCInit>
 d68:	85 e0       	ldi	r24, 0x05	; 5
 d6a:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <sg_eModuleControllerStateCurrent>
 d6e:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <sg_eModuleControllerStateTarget>
 d72:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <sg_eModuleControllerStateMax>
 d76:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <sg_bModuleRegistered>
 d7a:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <sg_eStringPowerState>
 d7e:	10 93 0c 01 	sts	0x010C, r17	; 0x80010c <sg_eFrameStatus>
 d82:	78 94       	sei
 d84:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <sg_bNewTick>
 d88:	88 23       	and	r24, r24
 d8a:	e1 f3       	breq	.-8      	; 0xd84 <main+0x152>
 d8c:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <sg_bNewTick>
 d90:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <sg_bModuleRegistered>
 d94:	81 11       	cpse	r24, r1
 d96:	22 c0       	rjmp	.+68     	; 0xddc <main+0x1aa>
 d98:	80 91 78 09 	lds	r24, 0x0978	; 0x800978 <sg_bAnnouncementPending>
 d9c:	88 23       	and	r24, r24
 d9e:	11 f1       	breq	.+68     	; 0xde4 <main+0x1b2>
 da0:	80 91 77 09 	lds	r24, 0x0977	; 0x800977 <sg_u8AnnouncementDelayTicks>
 da4:	88 23       	and	r24, r24
 da6:	29 f0       	breq	.+10     	; 0xdb2 <main+0x180>
 da8:	80 91 77 09 	lds	r24, 0x0977	; 0x800977 <sg_u8AnnouncementDelayTicks>
 dac:	81 50       	subi	r24, 0x01	; 1
 dae:	80 93 77 09 	sts	0x0977, r24	; 0x800977 <sg_u8AnnouncementDelayTicks>
 db2:	80 91 77 09 	lds	r24, 0x0977	; 0x800977 <sg_u8AnnouncementDelayTicks>
 db6:	81 11       	cpse	r24, r1
 db8:	15 c0       	rjmp	.+42     	; 0xde4 <main+0x1b2>
 dba:	81 e0       	ldi	r24, 0x01	; 1
 dbc:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <sg_bSendAnnouncement>
 dc0:	10 92 78 09 	sts	0x0978, r1	; 0x800978 <sg_bAnnouncementPending>
 dc4:	83 e5       	ldi	r24, 0x53	; 83
 dc6:	92 e0       	ldi	r25, 0x02	; 2
 dc8:	a0 e0       	ldi	r26, 0x00	; 0
 dca:	af 93       	push	r26
 dcc:	9f 93       	push	r25
 dce:	8f 93       	push	r24
 dd0:	0e 94 0f 27 	call	0x4e1e	; 0x4e1e <DebugOut>
 dd4:	0f 90       	pop	r0
 dd6:	0f 90       	pop	r0
 dd8:	0f 90       	pop	r0
 dda:	04 c0       	rjmp	.+8      	; 0xde4 <main+0x1b2>
 ddc:	ce 01       	movw	r24, r28
 dde:	01 96       	adiw	r24, 0x01	; 1
 de0:	0e 94 08 04 	call	0x810	; 0x810 <ControllerStatusMessagesSend>
 de4:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <sg_bPackControllerTimeout>
 de8:	88 23       	and	r24, r24
 dea:	81 f0       	breq	.+32     	; 0xe0c <main+0x1da>
 dec:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <sg_bPackControllerTimeout>
 df0:	10 92 27 03 	sts	0x0327, r1	; 0x800327 <sg_u8ModuleRegistrationID>
 df4:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <sg_bModuleRegistered>
 df8:	10 92 76 09 	sts	0x0976, r1	; 0x800976 <sg_bIgnoreStatusRequests>
 dfc:	81 e0       	ldi	r24, 0x01	; 1
 dfe:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <sg_bSendAnnouncement>
 e02:	0e 94 ef 26 	call	0x4dde	; 0x4dde <SendModuleControllerStatus>
 e06:	80 e0       	ldi	r24, 0x00	; 0
 e08:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <ModuleControllerStateSet>
 e0c:	ef e6       	ldi	r30, 0x6F	; 111
 e0e:	f0 e0       	ldi	r31, 0x00	; 0
 e10:	90 81       	ld	r25, Z
 e12:	80 81       	ld	r24, Z
 e14:	8d 7f       	andi	r24, 0xFD	; 253
 e16:	80 83       	st	Z, r24
 e18:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <sg_eFrameStatus>
 e1c:	20 91 74 09 	lds	r18, 0x0974	; 0x800974 <sg_bFrameStart>
 e20:	90 83       	st	Z, r25
 e22:	81 30       	cpi	r24, 0x01	; 1
 e24:	09 f0       	breq	.+2      	; 0xe28 <main+0x1f6>
 e26:	61 c0       	rjmp	.+194    	; 0xeea <main+0x2b8>
 e28:	22 23       	and	r18, r18
 e2a:	09 f4       	brne	.+2      	; 0xe2e <main+0x1fc>
 e2c:	55 c0       	rjmp	.+170    	; 0xed8 <main+0x2a6>
 e2e:	10 92 74 09 	sts	0x0974, r1	; 0x800974 <sg_bFrameStart>
 e32:	0e 94 10 1c 	call	0x3820	; 0x3820 <CellStringPowerStateMachine>
 e36:	0e 94 df 25 	call	0x4bbe	; 0x4bbe <vUARTRXEnd>
 e3a:	ce 01       	movw	r24, r28
 e3c:	01 96       	adiw	r24, 0x01	; 1
 e3e:	0e 94 93 07 	call	0xf26	; 0xf26 <CellStringProcess>
 e42:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <sg_eStringPowerState>
 e46:	84 30       	cpi	r24, 0x04	; 4
 e48:	29 f5       	brne	.+74     	; 0xe94 <main+0x262>
 e4a:	e0 e1       	ldi	r30, 0x10	; 16
 e4c:	f1 e0       	ldi	r31, 0x01	; 1
 e4e:	95 a5       	ldd	r25, Z+45	; 0x2d
 e50:	85 89       	ldd	r24, Z+21	; 0x15
 e52:	98 17       	cp	r25, r24
 e54:	e9 f0       	breq	.+58     	; 0xe90 <main+0x25e>
 e56:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <sg_sFrame+0x15>
 e5a:	88 23       	and	r24, r24
 e5c:	c9 f0       	breq	.+50     	; 0xe90 <main+0x25e>
 e5e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <sg_u8SequentailCountMismatchThreshold>
 e62:	88 23       	and	r24, r24
 e64:	b9 f0       	breq	.+46     	; 0xe94 <main+0x262>
 e66:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <sg_u8SequentailCountMismatchThreshold>
 e6a:	8f 3f       	cpi	r24, 0xFF	; 255
 e6c:	99 f0       	breq	.+38     	; 0xe94 <main+0x262>
 e6e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <sg_u8SequentailCellCountMismatches>
 e72:	8f 5f       	subi	r24, 0xFF	; 255
 e74:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <sg_u8SequentailCellCountMismatches>
 e78:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <sg_u8SequentailCellCountMismatches>
 e7c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <sg_u8SequentailCountMismatchThreshold>
 e80:	98 17       	cp	r25, r24
 e82:	40 f0       	brcs	.+16     	; 0xe94 <main+0x262>
 e84:	81 e0       	ldi	r24, 0x01	; 1
 e86:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <sg_eStringPowerState>
 e8a:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <sg_u8SequentailCellCountMismatches>
 e8e:	02 c0       	rjmp	.+4      	; 0xe94 <main+0x262>
 e90:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <sg_u8SequentailCellCountMismatches>
 e94:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <sg_bSendAnnouncement>
 e98:	88 23       	and	r24, r24
 e9a:	f1 f0       	breq	.+60     	; 0xed8 <main+0x2a6>
 e9c:	86 e5       	ldi	r24, 0x56	; 86
 e9e:	89 83       	std	Y+1, r24	; 0x01
 ea0:	80 e2       	ldi	r24, 0x20	; 32
 ea2:	8a 83       	std	Y+2, r24	; 0x02
 ea4:	82 e0       	ldi	r24, 0x02	; 2
 ea6:	8b 83       	std	Y+3, r24	; 0x03
 ea8:	83 e0       	ldi	r24, 0x03	; 3
 eaa:	8c 83       	std	Y+4, r24	; 0x04
 eac:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <sg_sFrame+0xe>
 eb0:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <sg_sFrame+0xf>
 eb4:	a0 91 20 01 	lds	r26, 0x0120	; 0x800120 <sg_sFrame+0x10>
 eb8:	b0 91 21 01 	lds	r27, 0x0121	; 0x800121 <sg_sFrame+0x11>
 ebc:	8d 83       	std	Y+5, r24	; 0x05
 ebe:	9e 83       	std	Y+6, r25	; 0x06
 ec0:	af 83       	std	Y+7, r26	; 0x07
 ec2:	b8 87       	std	Y+8, r27	; 0x08
 ec4:	48 e0       	ldi	r20, 0x08	; 8
 ec6:	be 01       	movw	r22, r28
 ec8:	6f 5f       	subi	r22, 0xFF	; 255
 eca:	7f 4f       	sbci	r23, 0xFF	; 255
 ecc:	80 e0       	ldi	r24, 0x00	; 0
 ece:	0e 94 81 26 	call	0x4d02	; 0x4d02 <CANSendMessage>
 ed2:	81 11       	cpse	r24, r1
 ed4:	10 92 22 03 	sts	0x0322, r1	; 0x800322 <sg_bSendAnnouncement>
 ed8:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <ModuleControllerStateHandle>
 edc:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <sg_bOvercurrentSignal>
 ee0:	88 23       	and	r24, r24
 ee2:	b1 f0       	breq	.+44     	; 0xf10 <main+0x2de>
 ee4:	10 92 17 03 	sts	0x0317, r1	; 0x800317 <sg_bOvercurrentSignal>
 ee8:	13 c0       	rjmp	.+38     	; 0xf10 <main+0x2de>
 eea:	22 23       	and	r18, r18
 eec:	89 f0       	breq	.+34     	; 0xf10 <main+0x2de>
 eee:	10 92 74 09 	sts	0x0974, r1	; 0x800974 <sg_bFrameStart>
 ef2:	0e 94 10 1c 	call	0x3820	; 0x3820 <CellStringPowerStateMachine>
 ef6:	80 e0       	ldi	r24, 0x00	; 0
 ef8:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <FrameInit>
 efc:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <sg_eStringPowerState>
 f00:	84 30       	cpi	r24, 0x04	; 4
 f02:	31 f4       	brne	.+12     	; 0xf10 <main+0x2de>
 f04:	0e 94 39 24 	call	0x4872	; 0x4872 <vUARTInitReceive>
 f08:	0e 94 41 27 	call	0x4e82	; 0x4e82 <vUARTRXReset>
 f0c:	0e 94 75 20 	call	0x40ea	; 0x40ea <vUARTStarttx>
 f10:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <sg_bADCUpdate>
 f14:	88 23       	and	r24, r24
 f16:	21 f0       	breq	.+8      	; 0xf20 <main+0x2ee>
 f18:	10 92 16 03 	sts	0x0316, r1	; 0x800316 <sg_bADCUpdate>
 f1c:	0e 94 4b 13 	call	0x2696	; 0x2696 <ModuleCurrentConvertReadings>
 f20:	0e 94 fc 23 	call	0x47f8	; 0x47f8 <ADCStartConversion>
 f24:	2f cf       	rjmp	.-418    	; 0xd84 <main+0x152>

Disassembly of section .text.IsLeapYear:

000045e8 <IsLeapYear>:
	return( bResult );
}

// Returns true if u16Year is a leap year
static bool IsLeapYear(uint16_t u16Year)
{
    45e8:	9c 01       	movw	r18, r24
	bool bLeapYear = false;
	
	if ((u16Year % 400) == 0)
    45ea:	60 e9       	ldi	r22, 0x90	; 144
    45ec:	71 e0       	ldi	r23, 0x01	; 1
    45ee:	0e 94 4d 24 	call	0x489a	; 0x489a <__udivmodhi4>
    45f2:	89 2b       	or	r24, r25
    45f4:	69 f0       	breq	.+26     	; 0x4610 <IsLeapYear+0x28>
	{
		bLeapYear = true;
	}
	else
	if ((u16Year % 100) == 0)
    45f6:	c9 01       	movw	r24, r18
    45f8:	64 e6       	ldi	r22, 0x64	; 100
    45fa:	70 e0       	ldi	r23, 0x00	; 0
    45fc:	0e 94 4d 24 	call	0x489a	; 0x489a <__udivmodhi4>
    4600:	89 2b       	or	r24, r25
    4602:	41 f0       	breq	.+16     	; 0x4614 <IsLeapYear+0x2c>
	{
		// Not a leap year if divisible by 100 but not by 400
	}
	else
	if ((u16Year % 4) == 0)
    4604:	23 70       	andi	r18, 0x03	; 3
    4606:	33 27       	eor	r19, r19
    4608:	23 2b       	or	r18, r19
    460a:	31 f0       	breq	.+12     	; 0x4618 <IsLeapYear+0x30>
}

// Returns true if u16Year is a leap year
static bool IsLeapYear(uint16_t u16Year)
{
	bool bLeapYear = false;
    460c:	80 e0       	ldi	r24, 0x00	; 0
    460e:	08 95       	ret
	
	if ((u16Year % 400) == 0)
	{
		bLeapYear = true;
    4610:	81 e0       	ldi	r24, 0x01	; 1
    4612:	08 95       	ret
}

// Returns true if u16Year is a leap year
static bool IsLeapYear(uint16_t u16Year)
{
	bool bLeapYear = false;
    4614:	80 e0       	ldi	r24, 0x00	; 0
    4616:	08 95       	ret
		// Not a leap year if divisible by 100 but not by 400
	}
	else
	if ((u16Year % 4) == 0)
	{
		bLeapYear = true;
    4618:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return(bLeapYear);
}
    461a:	08 95       	ret

Disassembly of section .text.RTCStartTransaction:

000043cc <RTCStartTransaction>:
}

static bool RTCStartTransaction( uint8_t u8Address, 
								 bool bRead, 
								 bool bAllowUnstick )
{
    43cc:	ff 92       	push	r15
    43ce:	0f 93       	push	r16
    43d0:	1f 93       	push	r17
    43d2:	cf 93       	push	r28
    43d4:	df 93       	push	r29
    43d6:	f8 2e       	mov	r15, r24
    43d8:	06 2f       	mov	r16, r22
    43da:	14 2f       	mov	r17, r20
	bool bResult = false;
	uint8_t u8Tries = RTC_MAX_ADDRESS_TRIES;
    43dc:	d3 e0       	ldi	r29, 0x03	; 3

static bool RTCStartTransaction( uint8_t u8Address, 
								 bool bRead, 
								 bool bAllowUnstick )
{
	bool bResult = false;
    43de:	c0 e0       	ldi	r28, 0x00	; 0
	uint8_t u8Tries = RTC_MAX_ADDRESS_TRIES;
	
	while( (false == bResult) && u8Tries )
    43e0:	0c c0       	rjmp	.+24     	; 0x43fa <RTCStartTransaction+0x2e>
	{
		u8Tries--;
    43e2:	d1 50       	subi	r29, 0x01	; 1
		
		bResult = I2CStartTransaction( u8Address, bRead );
    43e4:	60 2f       	mov	r22, r16
    43e6:	8f 2d       	mov	r24, r15
    43e8:	0e 94 11 24 	call	0x4822	; 0x4822 <I2CStartTransaction>
    43ec:	c8 2f       	mov	r28, r24
	
		if( false == bAllowUnstick )
    43ee:	11 23       	and	r17, r17
    43f0:	41 f0       	breq	.+16     	; 0x4402 <RTCStartTransaction+0x36>
		{
			break;
		}
		
		// Unstick and retry on failure
		if( false == bResult )
    43f2:	81 11       	cpse	r24, r1
    43f4:	02 c0       	rjmp	.+4      	; 0x43fa <RTCStartTransaction+0x2e>
		{
			I2CUnstick();
    43f6:	0e 94 49 22 	call	0x4492	; 0x4492 <I2CUnstick>
								 bool bAllowUnstick )
{
	bool bResult = false;
	uint8_t u8Tries = RTC_MAX_ADDRESS_TRIES;
	
	while( (false == bResult) && u8Tries )
    43fa:	c1 11       	cpse	r28, r1
    43fc:	02 c0       	rjmp	.+4      	; 0x4402 <RTCStartTransaction+0x36>
    43fe:	d1 11       	cpse	r29, r1
    4400:	f0 cf       	rjmp	.-32     	; 0x43e2 <RTCStartTransaction+0x16>
			I2CUnstick();
		}
	}
	
	return( bResult );
}
    4402:	8c 2f       	mov	r24, r28
    4404:	df 91       	pop	r29
    4406:	cf 91       	pop	r28
    4408:	1f 91       	pop	r17
    440a:	0f 91       	pop	r16
    440c:	ff 90       	pop	r15
    440e:	08 95       	ret

Disassembly of section .text.StructTMToHW:

00004196 <StructTMToHW>:
}

// Converts struct tm to SMCP7940NTime structure
static void StructTMToHW(struct tm *psTimeTM,
						 SMCP7940NTime *psTime)
{
    4196:	cf 93       	push	r28
    4198:	df 93       	push	r29
    419a:	dc 01       	movw	r26, r24
    419c:	fb 01       	movw	r30, r22
	memset((void *) psTime, 0, sizeof(*psTime));
    419e:	87 e0       	ldi	r24, 0x07	; 7
    41a0:	eb 01       	movw	r28, r22
    41a2:	19 92       	st	Y+, r1
    41a4:	8a 95       	dec	r24
    41a6:	e9 f7       	brne	.-6      	; 0x41a2 <StructTMToHW+0xc>
	
	psTime->u8Seconds = psTimeTM->tm_sec;
    41a8:	8c 91       	ld	r24, X
    41aa:	80 83       	st	Z, r24
	psTime->u8Minutes = psTimeTM->tm_min;
    41ac:	12 96       	adiw	r26, 0x02	; 2
    41ae:	8c 91       	ld	r24, X
    41b0:	12 97       	sbiw	r26, 0x02	; 2
    41b2:	81 83       	std	Z+1, r24	; 0x01
	psTime->u8Hours = psTimeTM->tm_hour;
    41b4:	14 96       	adiw	r26, 0x04	; 4
    41b6:	8c 91       	ld	r24, X
    41b8:	14 97       	sbiw	r26, 0x04	; 4
    41ba:	82 83       	std	Z+2, r24	; 0x02
	psTime->u8Day = psTimeTM->tm_mday;
    41bc:	16 96       	adiw	r26, 0x06	; 6
    41be:	8c 91       	ld	r24, X
    41c0:	16 97       	sbiw	r26, 0x06	; 6
    41c2:	84 83       	std	Z+4, r24	; 0x04
	psTime->u8Month = psTimeTM->tm_mon;
    41c4:	18 96       	adiw	r26, 0x08	; 8
    41c6:	8c 91       	ld	r24, X
    41c8:	18 97       	sbiw	r26, 0x08	; 8
    41ca:	85 83       	std	Z+5, r24	; 0x05
	
	if (psTimeTM->tm_year > (2099-1900))
    41cc:	1a 96       	adiw	r26, 0x0a	; 10
    41ce:	8d 91       	ld	r24, X+
    41d0:	9c 91       	ld	r25, X
    41d2:	1b 97       	sbiw	r26, 0x0b	; 11
    41d4:	88 3c       	cpi	r24, 0xC8	; 200
    41d6:	91 05       	cpc	r25, r1
    41d8:	1c f0       	brlt	.+6      	; 0x41e0 <StructTMToHW+0x4a>
	{
		psTime->u8Year = psTimeTM->tm_year - 2100;
    41da:	84 53       	subi	r24, 0x34	; 52
    41dc:	86 83       	std	Z+6, r24	; 0x06
    41de:	02 c0       	rjmp	.+4      	; 0x41e4 <StructTMToHW+0x4e>
	}
	else
	{
		psTime->u8Year = psTimeTM->tm_year - 2000;
    41e0:	80 5d       	subi	r24, 0xD0	; 208
    41e2:	86 83       	std	Z+6, r24	; 0x06
	}
	
}
    41e4:	df 91       	pop	r29
    41e6:	cf 91       	pop	r28
    41e8:	08 95       	ret

Disassembly of section .text.HWToStructTM:

00003b32 <HWToStructTM>:
}

// Converts an SMCP7940NTime structure to struct tm
static void HWToStructTM(SMCP7940NTime *psTime,
						 struct tm *psTimeTM)
{
    3b32:	cf 93       	push	r28
    3b34:	df 93       	push	r29
    3b36:	dc 01       	movw	r26, r24
    3b38:	fb 01       	movw	r30, r22
	// At this point, the time is in STime and we should
	// turn that in to time_t
	memset((void *) psTimeTM, 0, sizeof(*psTimeTM));
    3b3a:	89 e1       	ldi	r24, 0x19	; 25
    3b3c:	eb 01       	movw	r28, r22
    3b3e:	19 92       	st	Y+, r1
    3b40:	8a 95       	dec	r24
    3b42:	e9 f7       	brne	.-6      	; 0x3b3e <HWToStructTM+0xc>
	
	psTimeTM->tm_sec = psTime->u8Seconds;
    3b44:	8c 91       	ld	r24, X
    3b46:	90 e0       	ldi	r25, 0x00	; 0
    3b48:	91 83       	std	Z+1, r25	; 0x01
    3b4a:	80 83       	st	Z, r24
	psTimeTM->tm_min = psTime->u8Minutes;
    3b4c:	11 96       	adiw	r26, 0x01	; 1
    3b4e:	8c 91       	ld	r24, X
    3b50:	11 97       	sbiw	r26, 0x01	; 1
    3b52:	90 e0       	ldi	r25, 0x00	; 0
    3b54:	93 83       	std	Z+3, r25	; 0x03
    3b56:	82 83       	std	Z+2, r24	; 0x02
	psTimeTM->tm_hour = psTime->u8Hours;
    3b58:	12 96       	adiw	r26, 0x02	; 2
    3b5a:	8c 91       	ld	r24, X
    3b5c:	12 97       	sbiw	r26, 0x02	; 2
    3b5e:	90 e0       	ldi	r25, 0x00	; 0
    3b60:	95 83       	std	Z+5, r25	; 0x05
    3b62:	84 83       	std	Z+4, r24	; 0x04
	psTimeTM->tm_mday = psTime->u8Day;
    3b64:	14 96       	adiw	r26, 0x04	; 4
    3b66:	8c 91       	ld	r24, X
    3b68:	14 97       	sbiw	r26, 0x04	; 4
    3b6a:	90 e0       	ldi	r25, 0x00	; 0
    3b6c:	97 83       	std	Z+7, r25	; 0x07
    3b6e:	86 83       	std	Z+6, r24	; 0x06
	psTimeTM->tm_mon = psTime->u8Month - 1;
    3b70:	15 96       	adiw	r26, 0x05	; 5
    3b72:	8c 91       	ld	r24, X
    3b74:	15 97       	sbiw	r26, 0x05	; 5
    3b76:	90 e0       	ldi	r25, 0x00	; 0
    3b78:	01 97       	sbiw	r24, 0x01	; 1
    3b7a:	91 87       	std	Z+9, r25	; 0x09
    3b7c:	80 87       	std	Z+8, r24	; 0x08
	
	if (psTime->u8Year < YEAR_ROLLOVER_CUTOFF)
    3b7e:	16 96       	adiw	r26, 0x06	; 6
    3b80:	8c 91       	ld	r24, X
    3b82:	84 31       	cpi	r24, 0x14	; 20
    3b84:	30 f4       	brcc	.+12     	; 0x3b92 <HWToStructTM+0x60>
	{
		psTimeTM->tm_year = 2100 + psTime->u8Year;
    3b86:	90 e0       	ldi	r25, 0x00	; 0
    3b88:	8c 5c       	subi	r24, 0xCC	; 204
    3b8a:	97 4f       	sbci	r25, 0xF7	; 247
    3b8c:	93 87       	std	Z+11, r25	; 0x0b
    3b8e:	82 87       	std	Z+10, r24	; 0x0a
    3b90:	05 c0       	rjmp	.+10     	; 0x3b9c <HWToStructTM+0x6a>
	}
	else
	{
		psTimeTM->tm_year = 2000 + psTime->u8Year;
    3b92:	90 e0       	ldi	r25, 0x00	; 0
    3b94:	80 53       	subi	r24, 0x30	; 48
    3b96:	98 4f       	sbci	r25, 0xF8	; 248
    3b98:	93 87       	std	Z+11, r25	; 0x0b
    3b9a:	82 87       	std	Z+10, r24	; 0x0a
	}	
	
	psTimeTM->tm_year -= 1900;
    3b9c:	82 85       	ldd	r24, Z+10	; 0x0a
    3b9e:	93 85       	ldd	r25, Z+11	; 0x0b
    3ba0:	8c 56       	subi	r24, 0x6C	; 108
    3ba2:	97 40       	sbci	r25, 0x07	; 7
    3ba4:	93 87       	std	Z+11, r25	; 0x0b
    3ba6:	82 87       	std	Z+10, r24	; 0x0a
}
    3ba8:	df 91       	pop	r29
    3baa:	cf 91       	pop	r28
    3bac:	08 95       	ret

Disassembly of section .text.__vector_10:

000038a8 <__vector_10>:
// # Of seconds since January 1, 1970
static volatile uint64_t sg_u64Time;

// Called once per second on rev 1 and newer hardware
ISR(INT3_vect, ISR_NOBLOCK)
{
    38a8:	78 94       	sei
    38aa:	1f 92       	push	r1
    38ac:	0f 92       	push	r0
    38ae:	0f b6       	in	r0, 0x3f	; 63
    38b0:	0f 92       	push	r0
    38b2:	11 24       	eor	r1, r1
    38b4:	2f 93       	push	r18
    38b6:	3f 93       	push	r19
    38b8:	4f 93       	push	r20
    38ba:	5f 93       	push	r21
    38bc:	6f 93       	push	r22
    38be:	7f 93       	push	r23
    38c0:	8f 93       	push	r24
    38c2:	9f 93       	push	r25
    38c4:	af 93       	push	r26
	EIFR |= (1 << INTF3);
    38c6:	8c b3       	in	r24, 0x1c	; 28
    38c8:	88 60       	ori	r24, 0x08	; 8
    38ca:	8c bb       	out	0x1c, r24	; 28
	sg_u64Time++;
    38cc:	20 91 45 09 	lds	r18, 0x0945	; 0x800945 <sg_u64Time>
    38d0:	30 91 46 09 	lds	r19, 0x0946	; 0x800946 <sg_u64Time+0x1>
    38d4:	40 91 47 09 	lds	r20, 0x0947	; 0x800947 <sg_u64Time+0x2>
    38d8:	50 91 48 09 	lds	r21, 0x0948	; 0x800948 <sg_u64Time+0x3>
    38dc:	60 91 49 09 	lds	r22, 0x0949	; 0x800949 <sg_u64Time+0x4>
    38e0:	70 91 4a 09 	lds	r23, 0x094A	; 0x80094a <sg_u64Time+0x5>
    38e4:	80 91 4b 09 	lds	r24, 0x094B	; 0x80094b <sg_u64Time+0x6>
    38e8:	90 91 4c 09 	lds	r25, 0x094C	; 0x80094c <sg_u64Time+0x7>
    38ec:	a1 e0       	ldi	r26, 0x01	; 1
    38ee:	0e 94 75 26 	call	0x4cea	; 0x4cea <__adddi3_s8>
    38f2:	20 93 45 09 	sts	0x0945, r18	; 0x800945 <sg_u64Time>
    38f6:	30 93 46 09 	sts	0x0946, r19	; 0x800946 <sg_u64Time+0x1>
    38fa:	40 93 47 09 	sts	0x0947, r20	; 0x800947 <sg_u64Time+0x2>
    38fe:	50 93 48 09 	sts	0x0948, r21	; 0x800948 <sg_u64Time+0x3>
    3902:	60 93 49 09 	sts	0x0949, r22	; 0x800949 <sg_u64Time+0x4>
    3906:	70 93 4a 09 	sts	0x094A, r23	; 0x80094a <sg_u64Time+0x5>
    390a:	80 93 4b 09 	sts	0x094B, r24	; 0x80094b <sg_u64Time+0x6>
    390e:	90 93 4c 09 	sts	0x094C, r25	; 0x80094c <sg_u64Time+0x7>
}
    3912:	af 91       	pop	r26
    3914:	9f 91       	pop	r25
    3916:	8f 91       	pop	r24
    3918:	7f 91       	pop	r23
    391a:	6f 91       	pop	r22
    391c:	5f 91       	pop	r21
    391e:	4f 91       	pop	r20
    3920:	3f 91       	pop	r19
    3922:	2f 91       	pop	r18
    3924:	0f 90       	pop	r0
    3926:	0f be       	out	0x3f, r0	; 63
    3928:	0f 90       	pop	r0
    392a:	1f 90       	pop	r1
    392c:	18 95       	reti

Disassembly of section .text.RTCReadRegisters:

00003ab4 <RTCReadRegisters>:
}

bool RTCReadRegisters( uint8_t u8RegisterAddr, 
					   uint8_t* pu8Data, 
					   uint8_t u8Length )
{
    3ab4:	ff 92       	push	r15
    3ab6:	0f 93       	push	r16
    3ab8:	1f 93       	push	r17
    3aba:	cf 93       	push	r28
    3abc:	df 93       	push	r29
    3abe:	f8 2e       	mov	r15, r24
    3ac0:	8b 01       	movw	r16, r22
    3ac2:	c4 2f       	mov	r28, r20
	bool bResult;
	
	MBASSERT( u8Length >= 1 );
    3ac4:	41 11       	cpse	r20, r1
    3ac6:	07 c0       	rjmp	.+14     	; 0x3ad6 <RTCReadRegisters+0x22>
    3ac8:	4f e5       	ldi	r20, 0x5F	; 95
    3aca:	50 e0       	ldi	r21, 0x00	; 0
    3acc:	66 ef       	ldi	r22, 0xF6	; 246
    3ace:	72 e0       	ldi	r23, 0x02	; 2
    3ad0:	80 e0       	ldi	r24, 0x00	; 0
    3ad2:	0e 94 d0 23 	call	0x47a0	; 0x47a0 <PlatformAssert>
	
	// First send device address and write register address
	bResult = RTCStartTransaction( RTC_ADDRESS, false, true );
    3ad6:	41 e0       	ldi	r20, 0x01	; 1
    3ad8:	60 e0       	ldi	r22, 0x00	; 0
    3ada:	8e ed       	ldi	r24, 0xDE	; 222
    3adc:	0e 94 e6 21 	call	0x43cc	; 0x43cc <RTCStartTransaction>
    3ae0:	d8 2f       	mov	r29, r24
	
	// Couldn't get an ACK?  Give up now
	if( false == bResult )
    3ae2:	88 23       	and	r24, r24
    3ae4:	e9 f0       	breq	.+58     	; 0x3b20 <RTCReadRegisters+0x6c>
	{
		goto errorExit;
	}
	
	// Send the register address
	bResult = I2CTxByte( u8RegisterAddr );
    3ae6:	8f 2d       	mov	r24, r15
    3ae8:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <I2CTxByte>
    3aec:	d8 2f       	mov	r29, r24
	
	if( false == bResult )
    3aee:	88 23       	and	r24, r24
    3af0:	b9 f0       	breq	.+46     	; 0x3b20 <RTCReadRegisters+0x6c>
	{
		goto errorExit;
	}
	
	// Send repeated start with read
	bResult = RTCStartTransaction( RTC_ADDRESS, true, false );
    3af2:	40 e0       	ldi	r20, 0x00	; 0
    3af4:	61 e0       	ldi	r22, 0x01	; 1
    3af6:	8e ed       	ldi	r24, 0xDE	; 222
    3af8:	0e 94 e6 21 	call	0x43cc	; 0x43cc <RTCStartTransaction>
    3afc:	d8 2f       	mov	r29, r24
	
	// Couldn't get an ACK?  Give up now
	if( false == bResult )
    3afe:	81 11       	cpse	r24, r1
    3b00:	08 c0       	rjmp	.+16     	; 0x3b12 <RTCReadRegisters+0x5e>
    3b02:	0e c0       	rjmp	.+28     	; 0x3b20 <RTCReadRegisters+0x6c>
		goto errorExit;
	}
	
	while( u8Length >= 2 )
	{
		*pu8Data = I2CRxByte( true );
    3b04:	81 e0       	ldi	r24, 0x01	; 1
    3b06:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <I2CRxByte>
    3b0a:	f8 01       	movw	r30, r16
    3b0c:	81 93       	st	Z+, r24
    3b0e:	8f 01       	movw	r16, r30
		pu8Data++;
		u8Length--;
    3b10:	c1 50       	subi	r28, 0x01	; 1
	if( false == bResult )
	{
		goto errorExit;
	}
	
	while( u8Length >= 2 )
    3b12:	c2 30       	cpi	r28, 0x02	; 2
    3b14:	b8 f7       	brcc	.-18     	; 0x3b04 <RTCReadRegisters+0x50>
		pu8Data++;
		u8Length--;
	}
	
	// Final read with NACK
	*pu8Data = I2CRxByte( false );
    3b16:	80 e0       	ldi	r24, 0x00	; 0
    3b18:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <I2CRxByte>
    3b1c:	f8 01       	movw	r30, r16
    3b1e:	80 83       	st	Z, r24
	
errorExit:

	I2CStop();
    3b20:	0e 94 75 24 	call	0x48ea	; 0x48ea <I2CStop>
	
	return(bResult);
}
    3b24:	8d 2f       	mov	r24, r29
    3b26:	df 91       	pop	r29
    3b28:	cf 91       	pop	r28
    3b2a:	1f 91       	pop	r17
    3b2c:	0f 91       	pop	r16
    3b2e:	ff 90       	pop	r15
    3b30:	08 95       	ret

Disassembly of section .text.RTCReadHW:

00002a74 <RTCReadHW>:
	sei();
	
	psSrc = gmtime((const time_t *) &u64Time);
	memcpy((void *) psTime, (void *) psSrc, sizeof(*psTime));
	return(true);
}
    2a74:	cf 93       	push	r28
    2a76:	df 93       	push	r29
    2a78:	ec 01       	movw	r28, r24
    2a7a:	47 e0       	ldi	r20, 0x07	; 7
    2a7c:	bc 01       	movw	r22, r24
    2a7e:	80 e0       	ldi	r24, 0x00	; 0
    2a80:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <RTCReadRegisters>
    2a84:	88 23       	and	r24, r24
    2a86:	09 f4       	brne	.+2      	; 0x2a8a <RTCReadHW+0x16>
    2a88:	63 c0       	rjmp	.+198    	; 0x2b50 <RTCReadHW+0xdc>
    2a8a:	98 81       	ld	r25, Y
    2a8c:	29 2f       	mov	r18, r25
    2a8e:	22 95       	swap	r18
    2a90:	2f 70       	andi	r18, 0x0F	; 15
    2a92:	27 70       	andi	r18, 0x07	; 7
    2a94:	22 0f       	add	r18, r18
    2a96:	32 2f       	mov	r19, r18
    2a98:	33 0f       	add	r19, r19
    2a9a:	33 0f       	add	r19, r19
    2a9c:	23 0f       	add	r18, r19
    2a9e:	9f 70       	andi	r25, 0x0F	; 15
    2aa0:	92 0f       	add	r25, r18
    2aa2:	98 83       	st	Y, r25
    2aa4:	99 81       	ldd	r25, Y+1	; 0x01
    2aa6:	29 2f       	mov	r18, r25
    2aa8:	22 95       	swap	r18
    2aaa:	2f 70       	andi	r18, 0x0F	; 15
    2aac:	27 70       	andi	r18, 0x07	; 7
    2aae:	22 0f       	add	r18, r18
    2ab0:	32 2f       	mov	r19, r18
    2ab2:	33 0f       	add	r19, r19
    2ab4:	33 0f       	add	r19, r19
    2ab6:	23 0f       	add	r18, r19
    2ab8:	9f 70       	andi	r25, 0x0F	; 15
    2aba:	92 0f       	add	r25, r18
    2abc:	99 83       	std	Y+1, r25	; 0x01
    2abe:	9a 81       	ldd	r25, Y+2	; 0x02
    2ac0:	96 ff       	sbrs	r25, 6
    2ac2:	11 c0       	rjmp	.+34     	; 0x2ae6 <RTCReadHW+0x72>
    2ac4:	94 fb       	bst	r25, 4
    2ac6:	22 27       	eor	r18, r18
    2ac8:	20 f9       	bld	r18, 0
    2aca:	22 0f       	add	r18, r18
    2acc:	32 2f       	mov	r19, r18
    2ace:	33 0f       	add	r19, r19
    2ad0:	33 0f       	add	r19, r19
    2ad2:	23 0f       	add	r18, r19
    2ad4:	39 2f       	mov	r19, r25
    2ad6:	3f 70       	andi	r19, 0x0F	; 15
    2ad8:	23 0f       	add	r18, r19
    2ada:	2a 83       	std	Y+2, r18	; 0x02
    2adc:	95 ff       	sbrs	r25, 5
    2ade:	0f c0       	rjmp	.+30     	; 0x2afe <RTCReadHW+0x8a>
    2ae0:	24 5f       	subi	r18, 0xF4	; 244
    2ae2:	2a 83       	std	Y+2, r18	; 0x02
    2ae4:	0c c0       	rjmp	.+24     	; 0x2afe <RTCReadHW+0x8a>
    2ae6:	29 2f       	mov	r18, r25
    2ae8:	22 95       	swap	r18
    2aea:	2f 70       	andi	r18, 0x0F	; 15
    2aec:	23 70       	andi	r18, 0x03	; 3
    2aee:	22 0f       	add	r18, r18
    2af0:	32 2f       	mov	r19, r18
    2af2:	33 0f       	add	r19, r19
    2af4:	33 0f       	add	r19, r19
    2af6:	23 0f       	add	r18, r19
    2af8:	9f 70       	andi	r25, 0x0F	; 15
    2afa:	92 0f       	add	r25, r18
    2afc:	9a 83       	std	Y+2, r25	; 0x02
    2afe:	9b 81       	ldd	r25, Y+3	; 0x03
    2b00:	97 70       	andi	r25, 0x07	; 7
    2b02:	9b 83       	std	Y+3, r25	; 0x03
    2b04:	9c 81       	ldd	r25, Y+4	; 0x04
    2b06:	29 2f       	mov	r18, r25
    2b08:	22 95       	swap	r18
    2b0a:	2f 70       	andi	r18, 0x0F	; 15
    2b0c:	23 70       	andi	r18, 0x03	; 3
    2b0e:	22 0f       	add	r18, r18
    2b10:	32 2f       	mov	r19, r18
    2b12:	33 0f       	add	r19, r19
    2b14:	33 0f       	add	r19, r19
    2b16:	23 0f       	add	r18, r19
    2b18:	9f 70       	andi	r25, 0x0F	; 15
    2b1a:	92 0f       	add	r25, r18
    2b1c:	9c 83       	std	Y+4, r25	; 0x04
    2b1e:	9d 81       	ldd	r25, Y+5	; 0x05
    2b20:	94 fb       	bst	r25, 4
    2b22:	22 27       	eor	r18, r18
    2b24:	20 f9       	bld	r18, 0
    2b26:	22 0f       	add	r18, r18
    2b28:	32 2f       	mov	r19, r18
    2b2a:	33 0f       	add	r19, r19
    2b2c:	33 0f       	add	r19, r19
    2b2e:	23 0f       	add	r18, r19
    2b30:	9f 70       	andi	r25, 0x0F	; 15
    2b32:	92 0f       	add	r25, r18
    2b34:	9d 83       	std	Y+5, r25	; 0x05
    2b36:	9e 81       	ldd	r25, Y+6	; 0x06
    2b38:	29 2f       	mov	r18, r25
    2b3a:	22 95       	swap	r18
    2b3c:	2f 70       	andi	r18, 0x0F	; 15
    2b3e:	22 0f       	add	r18, r18
    2b40:	32 2f       	mov	r19, r18
    2b42:	33 0f       	add	r19, r19
    2b44:	33 0f       	add	r19, r19
    2b46:	23 0f       	add	r18, r19
    2b48:	9f 70       	andi	r25, 0x0F	; 15
    2b4a:	92 0f       	add	r25, r18
    2b4c:	9c 5e       	subi	r25, 0xEC	; 236
    2b4e:	9e 83       	std	Y+6, r25	; 0x06
    2b50:	df 91       	pop	r29
    2b52:	cf 91       	pop	r28
    2b54:	08 95       	ret

Disassembly of section .text.RTCWriteRegisters:

00003df4 <RTCWriteRegisters>:
}

bool RTCWriteRegisters( uint8_t u8RegisterAddr,
						uint8_t* pu8Data, 
						uint8_t u8Length )
{
    3df4:	ff 92       	push	r15
    3df6:	0f 93       	push	r16
    3df8:	1f 93       	push	r17
    3dfa:	cf 93       	push	r28
    3dfc:	df 93       	push	r29
    3dfe:	f8 2e       	mov	r15, r24
    3e00:	8b 01       	movw	r16, r22
    3e02:	c4 2f       	mov	r28, r20
	bool bResult;
	
	MBASSERT( u8Length >= 1 );
    3e04:	41 11       	cpse	r20, r1
    3e06:	07 c0       	rjmp	.+14     	; 0x3e16 <RTCWriteRegisters+0x22>
    3e08:	42 e9       	ldi	r20, 0x92	; 146
    3e0a:	50 e0       	ldi	r21, 0x00	; 0
    3e0c:	66 ef       	ldi	r22, 0xF6	; 246
    3e0e:	72 e0       	ldi	r23, 0x02	; 2
    3e10:	80 e0       	ldi	r24, 0x00	; 0
    3e12:	0e 94 d0 23 	call	0x47a0	; 0x47a0 <PlatformAssert>
	
	// First send device address and write register address
	bResult = RTCStartTransaction( RTC_ADDRESS, false, true );
    3e16:	41 e0       	ldi	r20, 0x01	; 1
    3e18:	60 e0       	ldi	r22, 0x00	; 0
    3e1a:	8e ed       	ldi	r24, 0xDE	; 222
    3e1c:	0e 94 e6 21 	call	0x43cc	; 0x43cc <RTCStartTransaction>
    3e20:	d8 2f       	mov	r29, r24
	
	// Couldn't get an ACK?  Give up now
	if( false == bResult )
    3e22:	88 23       	and	r24, r24
    3e24:	99 f0       	breq	.+38     	; 0x3e4c <RTCWriteRegisters+0x58>
	{
		goto errorExit;
	}
	
	// Send the register address
	bResult = I2CTxByte( u8RegisterAddr );
    3e26:	8f 2d       	mov	r24, r15
    3e28:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <I2CTxByte>
    3e2c:	d8 2f       	mov	r29, r24
	
	if( false == bResult )
    3e2e:	81 11       	cpse	r24, r1
    3e30:	0b c0       	rjmp	.+22     	; 0x3e48 <RTCWriteRegisters+0x54>
    3e32:	0c c0       	rjmp	.+24     	; 0x3e4c <RTCWriteRegisters+0x58>
	}
	
	// Now immediately send the sequential data
	while( u8Length )
	{
		bResult = I2CTxByte( *pu8Data );
    3e34:	f8 01       	movw	r30, r16
    3e36:	80 81       	ld	r24, Z
    3e38:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <I2CTxByte>
    3e3c:	d8 2f       	mov	r29, r24
		
		if( false == bResult )
    3e3e:	88 23       	and	r24, r24
    3e40:	29 f0       	breq	.+10     	; 0x3e4c <RTCWriteRegisters+0x58>
		{
			goto errorExit;
		}
		
		pu8Data++;
    3e42:	0f 5f       	subi	r16, 0xFF	; 255
    3e44:	1f 4f       	sbci	r17, 0xFF	; 255
		u8Length--;
    3e46:	c1 50       	subi	r28, 0x01	; 1
	{
		goto errorExit;
	}
	
	// Now immediately send the sequential data
	while( u8Length )
    3e48:	c1 11       	cpse	r28, r1
    3e4a:	f4 cf       	rjmp	.-24     	; 0x3e34 <RTCWriteRegisters+0x40>
		u8Length--;
	}
	
errorExit:

	I2CStop();
    3e4c:	0e 94 75 24 	call	0x48ea	; 0x48ea <I2CStop>
	
	return( bResult );
}
    3e50:	8d 2f       	mov	r24, r29
    3e52:	df 91       	pop	r29
    3e54:	cf 91       	pop	r28
    3e56:	1f 91       	pop	r17
    3e58:	0f 91       	pop	r16
    3e5a:	ff 90       	pop	r15
    3e5c:	08 95       	ret

Disassembly of section .text.RTCWriteHW:

0000279a <RTCWriteHW>:
	sei();
	
	psSrc = gmtime((const time_t *) &u64Time);
	memcpy((void *) psTime, (void *) psSrc, sizeof(*psTime));
	return(true);
}
    279a:	fc 01       	movw	r30, r24
    279c:	20 81       	ld	r18, Z
    279e:	8d ec       	ldi	r24, 0xCD	; 205
    27a0:	28 9f       	mul	r18, r24
    27a2:	91 2d       	mov	r25, r1
    27a4:	11 24       	eor	r1, r1
    27a6:	96 95       	lsr	r25
    27a8:	96 95       	lsr	r25
    27aa:	96 95       	lsr	r25
    27ac:	30 e1       	ldi	r19, 0x10	; 16
    27ae:	93 9f       	mul	r25, r19
    27b0:	a0 01       	movw	r20, r0
    27b2:	11 24       	eor	r1, r1
    27b4:	99 0f       	add	r25, r25
    27b6:	39 2f       	mov	r19, r25
    27b8:	33 0f       	add	r19, r19
    27ba:	33 0f       	add	r19, r19
    27bc:	93 0f       	add	r25, r19
    27be:	29 1b       	sub	r18, r25
    27c0:	24 2b       	or	r18, r20
    27c2:	20 83       	st	Z, r18
    27c4:	21 81       	ldd	r18, Z+1	; 0x01
    27c6:	28 9f       	mul	r18, r24
    27c8:	91 2d       	mov	r25, r1
    27ca:	11 24       	eor	r1, r1
    27cc:	96 95       	lsr	r25
    27ce:	96 95       	lsr	r25
    27d0:	96 95       	lsr	r25
    27d2:	30 e1       	ldi	r19, 0x10	; 16
    27d4:	93 9f       	mul	r25, r19
    27d6:	a0 01       	movw	r20, r0
    27d8:	11 24       	eor	r1, r1
    27da:	99 0f       	add	r25, r25
    27dc:	39 2f       	mov	r19, r25
    27de:	33 0f       	add	r19, r19
    27e0:	33 0f       	add	r19, r19
    27e2:	93 0f       	add	r25, r19
    27e4:	29 1b       	sub	r18, r25
    27e6:	24 2b       	or	r18, r20
    27e8:	21 83       	std	Z+1, r18	; 0x01
    27ea:	42 81       	ldd	r20, Z+2	; 0x02
    27ec:	48 9f       	mul	r20, r24
    27ee:	91 2d       	mov	r25, r1
    27f0:	11 24       	eor	r1, r1
    27f2:	96 95       	lsr	r25
    27f4:	96 95       	lsr	r25
    27f6:	96 95       	lsr	r25
    27f8:	50 e1       	ldi	r21, 0x10	; 16
    27fa:	95 9f       	mul	r25, r21
    27fc:	90 01       	movw	r18, r0
    27fe:	11 24       	eor	r1, r1
    2800:	99 0f       	add	r25, r25
    2802:	39 2f       	mov	r19, r25
    2804:	33 0f       	add	r19, r19
    2806:	33 0f       	add	r19, r19
    2808:	93 0f       	add	r25, r19
    280a:	49 1b       	sub	r20, r25
    280c:	24 2b       	or	r18, r20
    280e:	2f 7b       	andi	r18, 0xBF	; 191
    2810:	22 83       	std	Z+2, r18	; 0x02
    2812:	93 81       	ldd	r25, Z+3	; 0x03
    2814:	97 70       	andi	r25, 0x07	; 7
    2816:	98 60       	ori	r25, 0x08	; 8
    2818:	93 83       	std	Z+3, r25	; 0x03
    281a:	24 81       	ldd	r18, Z+4	; 0x04
    281c:	28 9f       	mul	r18, r24
    281e:	91 2d       	mov	r25, r1
    2820:	11 24       	eor	r1, r1
    2822:	96 95       	lsr	r25
    2824:	96 95       	lsr	r25
    2826:	96 95       	lsr	r25
    2828:	30 e1       	ldi	r19, 0x10	; 16
    282a:	93 9f       	mul	r25, r19
    282c:	a0 01       	movw	r20, r0
    282e:	11 24       	eor	r1, r1
    2830:	99 0f       	add	r25, r25
    2832:	39 2f       	mov	r19, r25
    2834:	33 0f       	add	r19, r19
    2836:	33 0f       	add	r19, r19
    2838:	93 0f       	add	r25, r19
    283a:	29 1b       	sub	r18, r25
    283c:	24 2b       	or	r18, r20
    283e:	24 83       	std	Z+4, r18	; 0x04
    2840:	25 81       	ldd	r18, Z+5	; 0x05
    2842:	28 9f       	mul	r18, r24
    2844:	91 2d       	mov	r25, r1
    2846:	11 24       	eor	r1, r1
    2848:	96 95       	lsr	r25
    284a:	96 95       	lsr	r25
    284c:	96 95       	lsr	r25
    284e:	30 e1       	ldi	r19, 0x10	; 16
    2850:	93 9f       	mul	r25, r19
    2852:	a0 01       	movw	r20, r0
    2854:	11 24       	eor	r1, r1
    2856:	99 0f       	add	r25, r25
    2858:	39 2f       	mov	r19, r25
    285a:	33 0f       	add	r19, r19
    285c:	33 0f       	add	r19, r19
    285e:	93 0f       	add	r25, r19
    2860:	29 1b       	sub	r18, r25
    2862:	24 2b       	or	r18, r20
    2864:	25 83       	std	Z+5, r18	; 0x05
    2866:	96 81       	ldd	r25, Z+6	; 0x06
    2868:	98 9f       	mul	r25, r24
    286a:	81 2d       	mov	r24, r1
    286c:	11 24       	eor	r1, r1
    286e:	86 95       	lsr	r24
    2870:	86 95       	lsr	r24
    2872:	86 95       	lsr	r24
    2874:	40 e1       	ldi	r20, 0x10	; 16
    2876:	84 9f       	mul	r24, r20
    2878:	90 01       	movw	r18, r0
    287a:	11 24       	eor	r1, r1
    287c:	88 0f       	add	r24, r24
    287e:	38 2f       	mov	r19, r24
    2880:	33 0f       	add	r19, r19
    2882:	33 0f       	add	r19, r19
    2884:	83 0f       	add	r24, r19
    2886:	98 1b       	sub	r25, r24
    2888:	92 2b       	or	r25, r18
    288a:	96 83       	std	Z+6, r25	; 0x06
    288c:	47 e0       	ldi	r20, 0x07	; 7
    288e:	bf 01       	movw	r22, r30
    2890:	80 e0       	ldi	r24, 0x00	; 0
    2892:	0e 94 fa 1e 	call	0x3df4	; 0x3df4 <RTCWriteRegisters>
    2896:	08 95       	ret

Disassembly of section .text.RTCSetTime:

00002f7c <RTCSetTime>:

// This sets the RTC to the specific time passed in. True is returned
// if it's 
bool RTCSetTime(uint64_t u64Timet)
{
    2f7c:	0f 93       	push	r16
    2f7e:	1f 93       	push	r17
    2f80:	cf 93       	push	r28
    2f82:	df 93       	push	r29
    2f84:	cd b7       	in	r28, 0x3d	; 61
    2f86:	de b7       	in	r29, 0x3e	; 62
    2f88:	a8 97       	sbiw	r28, 0x28	; 40
    2f8a:	0f b6       	in	r0, 0x3f	; 63
    2f8c:	f8 94       	cli
    2f8e:	de bf       	out	0x3e, r29	; 62
    2f90:	0f be       	out	0x3f, r0	; 63
    2f92:	cd bf       	out	0x3d, r28	; 61
    2f94:	29 a3       	std	Y+33, r18	; 0x21
    2f96:	3a a3       	std	Y+34, r19	; 0x22
    2f98:	4b a3       	std	Y+35, r20	; 0x23
    2f9a:	5c a3       	std	Y+36, r21	; 0x24
    2f9c:	6d a3       	std	Y+37, r22	; 0x25
    2f9e:	7e a3       	std	Y+38, r23	; 0x26
    2fa0:	8f a3       	std	Y+39, r24	; 0x27
    2fa2:	98 a7       	std	Y+40, r25	; 0x28
	struct tm sTime;
	struct tm *psTime;
	SMCP7940NTime sTimeHW;

	// Convert to GMTime
	memset((void *) &sTime, 0, sizeof(sTime));
    2fa4:	fe 01       	movw	r30, r28
    2fa6:	31 96       	adiw	r30, 0x01	; 1
    2fa8:	89 e1       	ldi	r24, 0x19	; 25
    2faa:	df 01       	movw	r26, r30
    2fac:	1d 92       	st	X+, r1
    2fae:	8a 95       	dec	r24
    2fb0:	e9 f7       	brne	.-6      	; 0x2fac <RTCSetTime+0x30>
	psTime = gmtime((const time_t *) &u64Timet);
    2fb2:	be 01       	movw	r22, r28
    2fb4:	6f 5d       	subi	r22, 0xDF	; 223
    2fb6:	7f 4f       	sbci	r23, 0xFF	; 255
    2fb8:	80 e8       	ldi	r24, 0x80	; 128
    2fba:	0e 94 46 27 	call	0x4e8c	; 0x4e8c <gmtime>
    2fbe:	8c 01       	movw	r16, r24
	MBASSERT(psTime);
    2fc0:	89 2b       	or	r24, r25
    2fc2:	39 f4       	brne	.+14     	; 0x2fd2 <RTCSetTime+0x56>
    2fc4:	42 e8       	ldi	r20, 0x82	; 130
    2fc6:	51 e0       	ldi	r21, 0x01	; 1
    2fc8:	66 ef       	ldi	r22, 0xF6	; 246
    2fca:	72 e0       	ldi	r23, 0x02	; 2
    2fcc:	80 e0       	ldi	r24, 0x00	; 0
    2fce:	0e 94 d0 23 	call	0x47a0	; 0x47a0 <PlatformAssert>
	memcpy((void *) &sTime, (void *) psTime, sizeof(sTime));
    2fd2:	a8 01       	movw	r20, r16
    2fd4:	60 e8       	ldi	r22, 0x80	; 128
    2fd6:	29 e1       	ldi	r18, 0x19	; 25
    2fd8:	30 e0       	ldi	r19, 0x00	; 0
    2fda:	ce 01       	movw	r24, r28
    2fdc:	01 96       	adiw	r24, 0x01	; 1
    2fde:	0e 94 74 23 	call	0x46e8	; 0x46e8 <memcpy>
	
	// Now convert to hardware
	StructTMToHW(&sTime,
    2fe2:	be 01       	movw	r22, r28
    2fe4:	66 5e       	subi	r22, 0xE6	; 230
    2fe6:	7f 4f       	sbci	r23, 0xFF	; 255
    2fe8:	ce 01       	movw	r24, r28
    2fea:	01 96       	adiw	r24, 0x01	; 1
    2fec:	0e 94 cb 20 	call	0x4196	; 0x4196 <StructTMToHW>
				 &sTimeHW);
	
	// Set the time			 
	cli();
    2ff0:	f8 94       	cli
	sg_u64Time = u64Timet;
    2ff2:	79 a1       	ldd	r23, Y+33	; 0x21
    2ff4:	6a a1       	ldd	r22, Y+34	; 0x22
    2ff6:	5b a1       	ldd	r21, Y+35	; 0x23
    2ff8:	4c a1       	ldd	r20, Y+36	; 0x24
    2ffa:	3d a1       	ldd	r19, Y+37	; 0x25
    2ffc:	2e a1       	ldd	r18, Y+38	; 0x26
    2ffe:	9f a1       	ldd	r25, Y+39	; 0x27
    3000:	88 a5       	ldd	r24, Y+40	; 0x28
    3002:	70 93 45 09 	sts	0x0945, r23	; 0x800945 <sg_u64Time>
    3006:	60 93 46 09 	sts	0x0946, r22	; 0x800946 <sg_u64Time+0x1>
    300a:	50 93 47 09 	sts	0x0947, r21	; 0x800947 <sg_u64Time+0x2>
    300e:	40 93 48 09 	sts	0x0948, r20	; 0x800948 <sg_u64Time+0x3>
    3012:	30 93 49 09 	sts	0x0949, r19	; 0x800949 <sg_u64Time+0x4>
    3016:	20 93 4a 09 	sts	0x094A, r18	; 0x80094a <sg_u64Time+0x5>
    301a:	90 93 4b 09 	sts	0x094B, r25	; 0x80094b <sg_u64Time+0x6>
    301e:	80 93 4c 09 	sts	0x094C, r24	; 0x80094c <sg_u64Time+0x7>
	sei();
    3022:	78 94       	sei
	
	// Now go tell the hardware about it
	return(RTCWriteHW(&sTimeHW));
    3024:	ce 01       	movw	r24, r28
    3026:	4a 96       	adiw	r24, 0x1a	; 26
    3028:	0e 94 cd 13 	call	0x279a	; 0x279a <RTCWriteHW>
}
    302c:	a8 96       	adiw	r28, 0x28	; 40
    302e:	0f b6       	in	r0, 0x3f	; 63
    3030:	f8 94       	cli
    3032:	de bf       	out	0x3e, r29	; 62
    3034:	0f be       	out	0x3f, r0	; 63
    3036:	cd bf       	out	0x3d, r28	; 61
    3038:	df 91       	pop	r29
    303a:	cf 91       	pop	r28
    303c:	1f 91       	pop	r17
    303e:	0f 91       	pop	r16
    3040:	08 95       	ret

Disassembly of section .text.RTCInit:

000016ba <RTCInit>:
	sei();
	
	psSrc = gmtime((const time_t *) &u64Time);
	memcpy((void *) psTime, (void *) psSrc, sizeof(*psTime));
	return(true);
}
    16ba:	ff 92       	push	r15
    16bc:	0f 93       	push	r16
    16be:	1f 93       	push	r17
    16c0:	cf 93       	push	r28
    16c2:	df 93       	push	r29
    16c4:	cd b7       	in	r28, 0x3d	; 61
    16c6:	de b7       	in	r29, 0x3e	; 62
    16c8:	a1 97       	sbiw	r28, 0x21	; 33
    16ca:	0f b6       	in	r0, 0x3f	; 63
    16cc:	f8 94       	cli
    16ce:	de bf       	out	0x3e, r29	; 62
    16d0:	0f be       	out	0x3f, r0	; 63
    16d2:	cd bf       	out	0x3d, r28	; 61
    16d4:	19 82       	std	Y+1, r1	; 0x01
    16d6:	41 e0       	ldi	r20, 0x01	; 1
    16d8:	be 01       	movw	r22, r28
    16da:	6f 5f       	subi	r22, 0xFF	; 255
    16dc:	7f 4f       	sbci	r23, 0xFF	; 255
    16de:	87 e0       	ldi	r24, 0x07	; 7
    16e0:	0e 94 fa 1e 	call	0x3df4	; 0x3df4 <RTCWriteRegisters>
    16e4:	18 2f       	mov	r17, r24
    16e6:	88 23       	and	r24, r24
    16e8:	09 f4       	brne	.+2      	; 0x16ec <RTCInit+0x32>
    16ea:	eb c0       	rjmp	.+470    	; 0x18c2 <RTCInit+0x208>
    16ec:	80 e8       	ldi	r24, 0x80	; 128
    16ee:	89 83       	std	Y+1, r24	; 0x01
    16f0:	41 e0       	ldi	r20, 0x01	; 1
    16f2:	be 01       	movw	r22, r28
    16f4:	6f 5f       	subi	r22, 0xFF	; 255
    16f6:	7f 4f       	sbci	r23, 0xFF	; 255
    16f8:	80 e0       	ldi	r24, 0x00	; 0
    16fa:	0e 94 fa 1e 	call	0x3df4	; 0x3df4 <RTCWriteRegisters>
    16fe:	18 2f       	mov	r17, r24
    1700:	81 11       	cpse	r24, r1
    1702:	17 c0       	rjmp	.+46     	; 0x1732 <RTCInit+0x78>
    1704:	de c0       	rjmp	.+444    	; 0x18c2 <RTCInit+0x208>
    1706:	19 82       	std	Y+1, r1	; 0x01
    1708:	41 e0       	ldi	r20, 0x01	; 1
    170a:	be 01       	movw	r22, r28
    170c:	6f 5f       	subi	r22, 0xFF	; 255
    170e:	7f 4f       	sbci	r23, 0xFF	; 255
    1710:	83 e0       	ldi	r24, 0x03	; 3
    1712:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <RTCReadRegisters>
    1716:	18 2f       	mov	r17, r24
    1718:	88 23       	and	r24, r24
    171a:	09 f4       	brne	.+2      	; 0x171e <RTCInit+0x64>
    171c:	d2 c0       	rjmp	.+420    	; 0x18c2 <RTCInit+0x208>
    171e:	89 81       	ldd	r24, Y+1	; 0x01
    1720:	85 fd       	sbrc	r24, 5
    1722:	0a c0       	rjmp	.+20     	; 0x1738 <RTCInit+0x7e>
    1724:	60 e0       	ldi	r22, 0x00	; 0
    1726:	70 e0       	ldi	r23, 0x00	; 0
    1728:	cb 01       	movw	r24, r22
    172a:	0e 94 1f 21 	call	0x423e	; 0x423e <Delay>
    172e:	0f 5f       	subi	r16, 0xFF	; 255
    1730:	01 c0       	rjmp	.+2      	; 0x1734 <RTCInit+0x7a>
    1732:	00 e0       	ldi	r16, 0x00	; 0
    1734:	08 3c       	cpi	r16, 0xC8	; 200
    1736:	38 f3       	brcs	.-50     	; 0x1706 <RTCInit+0x4c>
    1738:	08 3c       	cpi	r16, 0xC8	; 200
    173a:	08 f0       	brcs	.+2      	; 0x173e <RTCInit+0x84>
    173c:	c2 c0       	rjmp	.+388    	; 0x18c2 <RTCInit+0x208>
    173e:	89 81       	ldd	r24, Y+1	; 0x01
    1740:	88 60       	ori	r24, 0x08	; 8
    1742:	89 83       	std	Y+1, r24	; 0x01
    1744:	41 e0       	ldi	r20, 0x01	; 1
    1746:	be 01       	movw	r22, r28
    1748:	6f 5f       	subi	r22, 0xFF	; 255
    174a:	7f 4f       	sbci	r23, 0xFF	; 255
    174c:	83 e0       	ldi	r24, 0x03	; 3
    174e:	0e 94 fa 1e 	call	0x3df4	; 0x3df4 <RTCWriteRegisters>
    1752:	18 2f       	mov	r17, r24
    1754:	88 23       	and	r24, r24
    1756:	09 f4       	brne	.+2      	; 0x175a <RTCInit+0xa0>
    1758:	b4 c0       	rjmp	.+360    	; 0x18c2 <RTCInit+0x208>
    175a:	41 e0       	ldi	r20, 0x01	; 1
    175c:	be 01       	movw	r22, r28
    175e:	6f 5f       	subi	r22, 0xFF	; 255
    1760:	7f 4f       	sbci	r23, 0xFF	; 255
    1762:	82 e0       	ldi	r24, 0x02	; 2
    1764:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <RTCReadRegisters>
    1768:	18 2f       	mov	r17, r24
    176a:	88 23       	and	r24, r24
    176c:	09 f4       	brne	.+2      	; 0x1770 <RTCInit+0xb6>
    176e:	a9 c0       	rjmp	.+338    	; 0x18c2 <RTCInit+0x208>
    1770:	89 81       	ldd	r24, Y+1	; 0x01
    1772:	8f 7b       	andi	r24, 0xBF	; 191
    1774:	89 83       	std	Y+1, r24	; 0x01
    1776:	41 e0       	ldi	r20, 0x01	; 1
    1778:	be 01       	movw	r22, r28
    177a:	6f 5f       	subi	r22, 0xFF	; 255
    177c:	7f 4f       	sbci	r23, 0xFF	; 255
    177e:	82 e0       	ldi	r24, 0x02	; 2
    1780:	0e 94 fa 1e 	call	0x3df4	; 0x3df4 <RTCWriteRegisters>
    1784:	18 2f       	mov	r17, r24
    1786:	88 23       	and	r24, r24
    1788:	09 f4       	brne	.+2      	; 0x178c <RTCInit+0xd2>
    178a:	9b c0       	rjmp	.+310    	; 0x18c2 <RTCInit+0x208>
    178c:	ce 01       	movw	r24, r28
    178e:	02 96       	adiw	r24, 0x02	; 2
    1790:	0e 94 3a 15 	call	0x2a74	; 0x2a74 <RTCReadHW>
    1794:	18 2f       	mov	r17, r24
    1796:	88 23       	and	r24, r24
    1798:	09 f4       	brne	.+2      	; 0x179c <RTCInit+0xe2>
    179a:	93 c0       	rjmp	.+294    	; 0x18c2 <RTCInit+0x208>
    179c:	8a 81       	ldd	r24, Y+2	; 0x02
    179e:	8c 33       	cpi	r24, 0x3C	; 60
    17a0:	10 f4       	brcc	.+4      	; 0x17a6 <RTCInit+0xec>
    17a2:	10 e0       	ldi	r17, 0x00	; 0
    17a4:	01 c0       	rjmp	.+2      	; 0x17a8 <RTCInit+0xee>
    17a6:	11 e0       	ldi	r17, 0x01	; 1
    17a8:	8b 81       	ldd	r24, Y+3	; 0x03
    17aa:	8c 33       	cpi	r24, 0x3C	; 60
    17ac:	08 f0       	brcs	.+2      	; 0x17b0 <RTCInit+0xf6>
    17ae:	11 e0       	ldi	r17, 0x01	; 1
    17b0:	8c 81       	ldd	r24, Y+4	; 0x04
    17b2:	8c 33       	cpi	r24, 0x3C	; 60
    17b4:	08 f0       	brcs	.+2      	; 0x17b8 <RTCInit+0xfe>
    17b6:	11 e0       	ldi	r17, 0x01	; 1
    17b8:	8d 81       	ldd	r24, Y+5	; 0x05
    17ba:	81 50       	subi	r24, 0x01	; 1
    17bc:	87 30       	cpi	r24, 0x07	; 7
    17be:	08 f0       	brcs	.+2      	; 0x17c2 <RTCInit+0x108>
    17c0:	11 e0       	ldi	r17, 0x01	; 1
    17c2:	2f 81       	ldd	r18, Y+7	; 0x07
    17c4:	8f ef       	ldi	r24, 0xFF	; 255
    17c6:	82 0f       	add	r24, r18
    17c8:	8c 30       	cpi	r24, 0x0C	; 12
    17ca:	18 f5       	brcc	.+70     	; 0x1812 <RTCInit+0x158>
    17cc:	0e 81       	ldd	r16, Y+6	; 0x06
    17ce:	00 23       	and	r16, r16
    17d0:	11 f1       	breq	.+68     	; 0x1816 <RTCInit+0x15c>
    17d2:	82 2f       	mov	r24, r18
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	01 97       	sbiw	r24, 0x01	; 1
    17d8:	09 2e       	mov	r0, r25
    17da:	00 0c       	add	r0, r0
    17dc:	aa 0b       	sbc	r26, r26
    17de:	87 5d       	subi	r24, 0xD7	; 215
    17e0:	9c 4f       	sbci	r25, 0xFC	; 252
    17e2:	af 4f       	sbci	r26, 0xFF	; 255
    17e4:	fc 01       	movw	r30, r24
    17e6:	f4 90       	lpm	r15, Z
    17e8:	a7 fd       	sbrc	r26, 7
    17ea:	f0 80       	ld	r15, Z
    17ec:	22 30       	cpi	r18, 0x02	; 2
    17ee:	71 f4       	brne	.+28     	; 0x180c <RTCInit+0x152>
    17f0:	88 85       	ldd	r24, Y+8	; 0x08
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	84 31       	cpi	r24, 0x14	; 20
    17f6:	91 05       	cpc	r25, r1
    17f8:	18 f4       	brcc	.+6      	; 0x1800 <RTCInit+0x146>
    17fa:	8c 5c       	subi	r24, 0xCC	; 204
    17fc:	97 4f       	sbci	r25, 0xF7	; 247
    17fe:	02 c0       	rjmp	.+4      	; 0x1804 <RTCInit+0x14a>
    1800:	80 53       	subi	r24, 0x30	; 48
    1802:	98 4f       	sbci	r25, 0xF8	; 248
    1804:	0e 94 f4 22 	call	0x45e8	; 0x45e8 <IsLeapYear>
    1808:	81 11       	cpse	r24, r1
    180a:	f3 94       	inc	r15
    180c:	f0 16       	cp	r15, r16
    180e:	28 f0       	brcs	.+10     	; 0x181a <RTCInit+0x160>
    1810:	05 c0       	rjmp	.+10     	; 0x181c <RTCInit+0x162>
    1812:	11 e0       	ldi	r17, 0x01	; 1
    1814:	03 c0       	rjmp	.+6      	; 0x181c <RTCInit+0x162>
    1816:	11 e0       	ldi	r17, 0x01	; 1
    1818:	01 c0       	rjmp	.+2      	; 0x181c <RTCInit+0x162>
    181a:	11 e0       	ldi	r17, 0x01	; 1
    181c:	11 23       	and	r17, r17
    181e:	b9 f0       	breq	.+46     	; 0x184e <RTCInit+0x194>
    1820:	1a 82       	std	Y+2, r1	; 0x02
    1822:	1b 82       	std	Y+3, r1	; 0x03
    1824:	1c 82       	std	Y+4, r1	; 0x04
    1826:	81 e0       	ldi	r24, 0x01	; 1
    1828:	8e 83       	std	Y+6, r24	; 0x06
    182a:	8f 83       	std	Y+7, r24	; 0x07
    182c:	88 e1       	ldi	r24, 0x18	; 24
    182e:	88 87       	std	Y+8, r24	; 0x08
    1830:	ce 01       	movw	r24, r28
    1832:	02 96       	adiw	r24, 0x02	; 2
    1834:	0e 94 cd 13 	call	0x279a	; 0x279a <RTCWriteHW>
    1838:	18 2f       	mov	r17, r24
    183a:	88 23       	and	r24, r24
    183c:	09 f4       	brne	.+2      	; 0x1840 <RTCInit+0x186>
    183e:	41 c0       	rjmp	.+130    	; 0x18c2 <RTCInit+0x208>
    1840:	ce 01       	movw	r24, r28
    1842:	02 96       	adiw	r24, 0x02	; 2
    1844:	0e 94 3a 15 	call	0x2a74	; 0x2a74 <RTCReadHW>
    1848:	18 2f       	mov	r17, r24
    184a:	88 23       	and	r24, r24
    184c:	d1 f1       	breq	.+116    	; 0x18c2 <RTCInit+0x208>
    184e:	be 01       	movw	r22, r28
    1850:	67 5f       	subi	r22, 0xF7	; 247
    1852:	7f 4f       	sbci	r23, 0xFF	; 255
    1854:	ce 01       	movw	r24, r28
    1856:	02 96       	adiw	r24, 0x02	; 2
    1858:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <HWToStructTM>
    185c:	ce 01       	movw	r24, r28
    185e:	09 96       	adiw	r24, 0x09	; 9
    1860:	0e 94 97 1c 	call	0x392e	; 0x392e <mktime>
    1864:	8b 01       	movw	r16, r22
    1866:	9c 01       	movw	r18, r24
    1868:	f8 94       	cli
    186a:	00 93 45 09 	sts	0x0945, r16	; 0x800945 <sg_u64Time>
    186e:	10 93 46 09 	sts	0x0946, r17	; 0x800946 <sg_u64Time+0x1>
    1872:	20 93 47 09 	sts	0x0947, r18	; 0x800947 <sg_u64Time+0x2>
    1876:	30 93 48 09 	sts	0x0948, r19	; 0x800948 <sg_u64Time+0x3>
    187a:	10 92 49 09 	sts	0x0949, r1	; 0x800949 <sg_u64Time+0x4>
    187e:	10 92 4a 09 	sts	0x094A, r1	; 0x80094a <sg_u64Time+0x5>
    1882:	10 92 4b 09 	sts	0x094B, r1	; 0x80094b <sg_u64Time+0x6>
    1886:	10 92 4c 09 	sts	0x094C, r1	; 0x80094c <sg_u64Time+0x7>
    188a:	78 94       	sei
    188c:	87 b1       	in	r24, 0x07	; 7
    188e:	8e 7f       	andi	r24, 0xFE	; 254
    1890:	87 b9       	out	0x07, r24	; 7
    1892:	88 b1       	in	r24, 0x08	; 8
    1894:	81 60       	ori	r24, 0x01	; 1
    1896:	88 b9       	out	0x08, r24	; 8
    1898:	41 e0       	ldi	r20, 0x01	; 1
    189a:	be 01       	movw	r22, r28
    189c:	6f 5f       	subi	r22, 0xFF	; 255
    189e:	7f 4f       	sbci	r23, 0xFF	; 255
    18a0:	87 e0       	ldi	r24, 0x07	; 7
    18a2:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <RTCReadRegisters>
    18a6:	18 2f       	mov	r17, r24
    18a8:	88 23       	and	r24, r24
    18aa:	59 f0       	breq	.+22     	; 0x18c2 <RTCInit+0x208>
    18ac:	89 81       	ldd	r24, Y+1	; 0x01
    18ae:	80 64       	ori	r24, 0x40	; 64
    18b0:	89 83       	std	Y+1, r24	; 0x01
    18b2:	41 e0       	ldi	r20, 0x01	; 1
    18b4:	be 01       	movw	r22, r28
    18b6:	6f 5f       	subi	r22, 0xFF	; 255
    18b8:	7f 4f       	sbci	r23, 0xFF	; 255
    18ba:	87 e0       	ldi	r24, 0x07	; 7
    18bc:	0e 94 fa 1e 	call	0x3df4	; 0x3df4 <RTCWriteRegisters>
    18c0:	18 2f       	mov	r17, r24
    18c2:	81 2f       	mov	r24, r17
    18c4:	a1 96       	adiw	r28, 0x21	; 33
    18c6:	0f b6       	in	r0, 0x3f	; 63
    18c8:	f8 94       	cli
    18ca:	de bf       	out	0x3e, r29	; 62
    18cc:	0f be       	out	0x3f, r0	; 63
    18ce:	cd bf       	out	0x3d, r28	; 61
    18d0:	df 91       	pop	r29
    18d2:	cf 91       	pop	r28
    18d4:	1f 91       	pop	r17
    18d6:	0f 91       	pop	r16
    18d8:	ff 90       	pop	r15
    18da:	08 95       	ret

Disassembly of section .text.SDSetCS:

00004d70 <SDSetCS>:
static uint8_t sg_u8CSD[16];

// This will provide a !CS assertion or deassertion with pre/postamble clock
static void SDSetCS(bool bAsserted)
{
	if (bAsserted)
    4d70:	88 23       	and	r24, r24
    4d72:	21 f0       	breq	.+8      	; 0x4d7c <SDSetCS+0xc>
	{
		SD_CS_ASSERT();
    4d74:	88 b1       	in	r24, 0x08	; 8
    4d76:	8f 7b       	andi	r24, 0xBF	; 191
    4d78:	88 b9       	out	0x08, r24	; 8
    4d7a:	08 95       	ret
	}
	else
	{
		SD_CS_DEASSERT();
    4d7c:	88 b1       	in	r24, 0x08	; 8
    4d7e:	80 64       	ori	r24, 0x40	; 64
    4d80:	88 b9       	out	0x08, r24	; 8
    4d82:	08 95       	ret

Disassembly of section .text.SDPowerup:

0000450a <SDPowerup>:

// Sends SD powerup sequence to card and attempts to initialize it
static void SDPowerup(void)
{
	// Set SPI baud rate to (SD_SPEED_SLOW, which is the max for the init sequence)
	(void) SPISetBaudRate(SD_SPEED_SLOW);
    450a:	60 e8       	ldi	r22, 0x80	; 128
    450c:	7a e1       	ldi	r23, 0x1A	; 26
    450e:	86 e0       	ldi	r24, 0x06	; 6
    4510:	90 e0       	ldi	r25, 0x00	; 0
    4512:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <SPISetBaudRate>
	
	// Deassert chip select
	SD_CS_DEASSERT();
    4516:	88 b1       	in	r24, 0x08	; 8
    4518:	80 64       	ori	r24, 0x40	; 64
    451a:	88 b9       	out	0x08, r24	; 8
	
	// Delay time after possible deassertion (2ms)
	Delay(2000);
    451c:	60 ed       	ldi	r22, 0xD0	; 208
    451e:	77 e0       	ldi	r23, 0x07	; 7
    4520:	80 e0       	ldi	r24, 0x00	; 0
    4522:	90 e0       	ldi	r25, 0x00	; 0
    4524:	0e 94 1f 21 	call	0x423e	; 0x423e <Delay>
	
	// Send 74/80 bits of 0xff as a reset (80 bits required since we're byte-
	// sized transactions)
	SPIWritePattern(0xff,
    4528:	40 e1       	ldi	r20, 0x10	; 16
    452a:	50 e0       	ldi	r21, 0x00	; 0
    452c:	6f ef       	ldi	r22, 0xFF	; 255
    452e:	70 e0       	ldi	r23, 0x00	; 0
    4530:	82 e0       	ldi	r24, 0x02	; 2
    4532:	0e 94 f2 1f 	call	0x3fe4	; 0x3fe4 <SPITransaction>
				    128/8);

	// Delay time after write
	Delay(2000);
    4536:	60 ed       	ldi	r22, 0xD0	; 208
    4538:	77 e0       	ldi	r23, 0x07	; 7
    453a:	80 e0       	ldi	r24, 0x00	; 0
    453c:	90 e0       	ldi	r25, 0x00	; 0
    453e:	0e 94 1f 21 	call	0x423e	; 0x423e <Delay>
    4542:	08 95       	ret

Disassembly of section .text.SDCommand:

000033f0 <SDCommand>:
#define CMD8_CRC    0x87

// Sends a command to the SD card, including argument an CRC
static uint8_t SDCommand(uint8_t u8Cmd,
						 uint32_t u32Arg)
{
    33f0:	df 92       	push	r13
    33f2:	ef 92       	push	r14
    33f4:	ff 92       	push	r15
    33f6:	0f 93       	push	r16
    33f8:	1f 93       	push	r17
    33fa:	cf 93       	push	r28
    33fc:	df 93       	push	r29
    33fe:	cd b7       	in	r28, 0x3d	; 61
    3400:	de b7       	in	r29, 0x3e	; 62
    3402:	27 97       	sbiw	r28, 0x07	; 7
    3404:	0f b6       	in	r0, 0x3f	; 63
    3406:	f8 94       	cli
    3408:	de bf       	out	0x3e, r29	; 62
    340a:	0f be       	out	0x3f, r0	; 63
    340c:	cd bf       	out	0x3d, r28	; 61
    340e:	18 2f       	mov	r17, r24
    3410:	04 2f       	mov	r16, r20
    3412:	f5 2e       	mov	r15, r21
    3414:	e6 2e       	mov	r14, r22
    3416:	d7 2e       	mov	r13, r23
	uint8_t u8Buffer[sizeof(u8Cmd) + sizeof(u32Arg) + sizeof(u8CRC)];
	uint8_t u8Response;
	uint8_t u8Count;
	
	// If this is an ACMD, prefix a CMD55
	if (u8Cmd & 0x80)
    3418:	88 23       	and	r24, r24
    341a:	4c f4       	brge	.+18     	; 0x342e <SDCommand+0x3e>
	{
		u8Response = SDCommand(CMD55,
    341c:	40 e0       	ldi	r20, 0x00	; 0
    341e:	50 e0       	ldi	r21, 0x00	; 0
    3420:	ba 01       	movw	r22, r20
    3422:	87 e3       	ldi	r24, 0x37	; 55
    3424:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <SDCommand>
    3428:	8f 83       	std	Y+7, r24	; 0x07
							   CMD55_ARG);
							   
		if (u8Response > 1)
    342a:	82 30       	cpi	r24, 0x02	; 2
    342c:	40 f5       	brcc	.+80     	; 0x347e <SDCommand+0x8e>
			return(u8Response);
		}
	}
	
	// SD Command (OR in 0x40 so bit 47 is always a 1
	u8Buffer[0] = (u8Cmd & 0x7f) | 0x40;
    342e:	81 2f       	mov	r24, r17
    3430:	8f 73       	andi	r24, 0x3F	; 63
    3432:	80 64       	ori	r24, 0x40	; 64
    3434:	89 83       	std	Y+1, r24	; 0x01
	
	// 32 Bits of argument
	u8Buffer[1] = (uint8_t) (u32Arg >> 24);
    3436:	da 82       	std	Y+2, r13	; 0x02
	u8Buffer[2] = (uint8_t) (u32Arg >> 16);
    3438:	eb 82       	std	Y+3, r14	; 0x03
	u8Buffer[3] = (uint8_t) (u32Arg >> 8);
    343a:	fc 82       	std	Y+4, r15	; 0x04
	u8Buffer[4] = (uint8_t) (u32Arg >> 0);
    343c:	0d 83       	std	Y+5, r16	; 0x05
	
	// Valid CRCs for specific commands
	u8CRC = 0;
	if (CMD0 == u8Cmd)
    343e:	11 23       	and	r17, r17
    3440:	11 f0       	breq	.+4      	; 0x3446 <SDCommand+0x56>
	u8Buffer[2] = (uint8_t) (u32Arg >> 16);
	u8Buffer[3] = (uint8_t) (u32Arg >> 8);
	u8Buffer[4] = (uint8_t) (u32Arg >> 0);
	
	// Valid CRCs for specific commands
	u8CRC = 0;
    3442:	80 e0       	ldi	r24, 0x00	; 0
    3444:	01 c0       	rjmp	.+2      	; 0x3448 <SDCommand+0x58>
	if (CMD0 == u8Cmd)
	{
		u8CRC = 0x95;
    3446:	85 e9       	ldi	r24, 0x95	; 149
	}
	
	if (CMD8 == u8Cmd)
    3448:	18 30       	cpi	r17, 0x08	; 8
    344a:	09 f4       	brne	.+2      	; 0x344e <SDCommand+0x5e>
	{
		u8CRC = 0x87;
    344c:	87 e8       	ldi	r24, 0x87	; 135
	}
	
	// Now the CRC - Bit 0 means "ignore CRC"
	u8Buffer[5] = (uint8_t) (u8CRC | 0x01);
    344e:	81 60       	ori	r24, 0x01	; 1
    3450:	8e 83       	std	Y+6, r24	; 0x06
	
	// Send all bytes to the SD card
	SPIWrite(u8Buffer,
    3452:	46 e0       	ldi	r20, 0x06	; 6
    3454:	50 e0       	ldi	r21, 0x00	; 0
    3456:	be 01       	movw	r22, r28
    3458:	6f 5f       	subi	r22, 0xFF	; 255
    345a:	7f 4f       	sbci	r23, 0xFF	; 255
    345c:	81 e0       	ldi	r24, 0x01	; 1
    345e:	0e 94 f2 1f 	call	0x3fe4	; 0x3fe4 <SPITransaction>
			 sizeof(u8Buffer));
			 
	u8Count = 10;
    3462:	1a e0       	ldi	r17, 0x0A	; 10
	
	do 
	{
		SPIRead(&u8Response,
    3464:	41 e0       	ldi	r20, 0x01	; 1
    3466:	50 e0       	ldi	r21, 0x00	; 0
    3468:	be 01       	movw	r22, r28
    346a:	69 5f       	subi	r22, 0xF9	; 249
    346c:	7f 4f       	sbci	r23, 0xFF	; 255
    346e:	83 e0       	ldi	r24, 0x03	; 3
    3470:	0e 94 f2 1f 	call	0x3fe4	; 0x3fe4 <SPITransaction>
				sizeof(u8Response));
	} while ((u8Response & 0x80) && --u8Count);
    3474:	8f 81       	ldd	r24, Y+7	; 0x07
    3476:	88 23       	and	r24, r24
    3478:	14 f4       	brge	.+4      	; 0x347e <SDCommand+0x8e>
    347a:	11 50       	subi	r17, 0x01	; 1
    347c:	99 f7       	brne	.-26     	; 0x3464 <SDCommand+0x74>
	
	return(u8Response);
}
    347e:	27 96       	adiw	r28, 0x07	; 7
    3480:	0f b6       	in	r0, 0x3f	; 63
    3482:	f8 94       	cli
    3484:	de bf       	out	0x3e, r29	; 62
    3486:	0f be       	out	0x3f, r0	; 63
    3488:	cd bf       	out	0x3d, r28	; 61
    348a:	df 91       	pop	r29
    348c:	cf 91       	pop	r28
    348e:	1f 91       	pop	r17
    3490:	0f 91       	pop	r16
    3492:	ff 90       	pop	r15
    3494:	ef 90       	pop	r14
    3496:	df 90       	pop	r13
    3498:	08 95       	ret

Disassembly of section .text.SDGoIdle:

00004c06 <SDGoIdle>:
			sizeof(uint32_t));
}

// SD - Go idle!
static uint8_t SDGoIdle(uint8_t *pu8Response)
{
    4c06:	cf 93       	push	r28
	uint8_t u8Response;
	
	SDSetCS(true);
    4c08:	81 e0       	ldi	r24, 0x01	; 1
    4c0a:	0e 94 b8 26 	call	0x4d70	; 0x4d70 <SDSetCS>
	
	// Send our CMD0 (go idle)
	u8Response = SDCommand(CMD0,
    4c0e:	40 e0       	ldi	r20, 0x00	; 0
    4c10:	50 e0       	ldi	r21, 0x00	; 0
    4c12:	ba 01       	movw	r22, r20
    4c14:	80 e0       	ldi	r24, 0x00	; 0
    4c16:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <SDCommand>
    4c1a:	c8 2f       	mov	r28, r24
						   CMD0_ARG);
						   
	SDSetCS(false);
    4c1c:	80 e0       	ldi	r24, 0x00	; 0
    4c1e:	0e 94 b8 26 	call	0x4d70	; 0x4d70 <SDSetCS>

	return(u8Response);
}
    4c22:	8c 2f       	mov	r24, r28
    4c24:	cf 91       	pop	r28
    4c26:	08 95       	ret

Disassembly of section .text.SDSendOpCondition:

0000461c <SDSendOpCondition>:
#define ACMD41_CRC  0x00

// Send operation condition
static uint8_t SDSendOpCondition(uint8_t *pu8Response,
								 uint32_t u32Arg)
{
    461c:	cf 92       	push	r12
    461e:	df 92       	push	r13
    4620:	ef 92       	push	r14
    4622:	ff 92       	push	r15
    4624:	cf 93       	push	r28
    4626:	6a 01       	movw	r12, r20
    4628:	7b 01       	movw	r14, r22
	uint8_t u8Response;
	
	// Assert chip select
	SDSetCS(true);
    462a:	81 e0       	ldi	r24, 0x01	; 1
    462c:	0e 94 b8 26 	call	0x4d70	; 0x4d70 <SDSetCS>
	
	// Send the app command
	u8Response = SDCommand(ACMD41,
    4630:	b7 01       	movw	r22, r14
    4632:	a6 01       	movw	r20, r12
    4634:	89 ea       	ldi	r24, 0xA9	; 169
    4636:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <SDCommand>
    463a:	c8 2f       	mov	r28, r24
						   u32Arg);
	// Deassert chip select
	SDSetCS(false);
    463c:	80 e0       	ldi	r24, 0x00	; 0
    463e:	0e 94 b8 26 	call	0x4d70	; 0x4d70 <SDSetCS>
	
	return(u8Response);
}
    4642:	8c 2f       	mov	r24, r28
    4644:	cf 91       	pop	r28
    4646:	ff 90       	pop	r15
    4648:	ef 90       	pop	r14
    464a:	df 90       	pop	r13
    464c:	cf 90       	pop	r12
    464e:	08 95       	ret

Disassembly of section .text.SDSendOpConditionArg:

00004094 <SDSendOpConditionArg>:
	return(u8Response);
}

static uint8_t SDSendOpConditionArg(uint8_t *pu8Resp,
									uint32_t u32Arg)
{
    4094:	cf 92       	push	r12
    4096:	df 92       	push	r13
    4098:	ef 92       	push	r14
    409a:	ff 92       	push	r15
    409c:	0f 93       	push	r16
    409e:	1f 93       	push	r17
    40a0:	cf 93       	push	r28
    40a2:	df 93       	push	r29
    40a4:	8c 01       	movw	r16, r24
    40a6:	6a 01       	movw	r12, r20
    40a8:	7b 01       	movw	r14, r22
	uint8_t u8Attempts;
	uint8_t u8Response;
	
	u8Attempts = 0;
    40aa:	c0 e0       	ldi	r28, 0x00	; 0
		
	// Loop until it comes alive - if it comes alive. Put the card in idle state.
	while (u8Attempts < SD_GO_IDLE_RETRIES)
    40ac:	0f c0       	rjmp	.+30     	; 0x40cc <SDSendOpConditionArg+0x38>
	{
		u8Response = SDSendOpCondition(pu8Resp,
    40ae:	b7 01       	movw	r22, r14
    40b0:	a6 01       	movw	r20, r12
    40b2:	c8 01       	movw	r24, r16
    40b4:	0e 94 0e 23 	call	0x461c	; 0x461c <SDSendOpCondition>
    40b8:	d8 2f       	mov	r29, r24
									   u32Arg);
		if (0 == u8Response)
    40ba:	88 23       	and	r24, r24
    40bc:	49 f0       	breq	.+18     	; 0x40d0 <SDSendOpConditionArg+0x3c>
		{
			break;
		}
			
		// Give it a little time to settle
		Delay(10000);
    40be:	60 e1       	ldi	r22, 0x10	; 16
    40c0:	77 e2       	ldi	r23, 0x27	; 39
    40c2:	80 e0       	ldi	r24, 0x00	; 0
    40c4:	90 e0       	ldi	r25, 0x00	; 0
    40c6:	0e 94 1f 21 	call	0x423e	; 0x423e <Delay>
		u8Attempts++;
    40ca:	cf 5f       	subi	r28, 0xFF	; 255
	uint8_t u8Response;
	
	u8Attempts = 0;
		
	// Loop until it comes alive - if it comes alive. Put the card in idle state.
	while (u8Attempts < SD_GO_IDLE_RETRIES)
    40cc:	c4 36       	cpi	r28, 0x64	; 100
    40ce:	78 f3       	brcs	.-34     	; 0x40ae <SDSendOpConditionArg+0x1a>
		Delay(10000);
		u8Attempts++;
	}

	// If we've retried too much, bail out. We're done.
	if (SD_GO_IDLE_RETRIES == u8Attempts)
    40d0:	c4 36       	cpi	r28, 0x64	; 100
    40d2:	09 f4       	brne	.+2      	; 0x40d6 <SDSendOpConditionArg+0x42>
	{
		u8Response = 0x80;
    40d4:	d0 e8       	ldi	r29, 0x80	; 128
	}
	
	return(u8Response);
}
    40d6:	8d 2f       	mov	r24, r29
    40d8:	df 91       	pop	r29
    40da:	cf 91       	pop	r28
    40dc:	1f 91       	pop	r17
    40de:	0f 91       	pop	r16
    40e0:	ff 90       	pop	r15
    40e2:	ef 90       	pop	r14
    40e4:	df 90       	pop	r13
    40e6:	cf 90       	pop	r12
    40e8:	08 95       	ret

Disassembly of section .text.SDWaitResponse7:

00004e3a <SDWaitResponse7>:

// This will return true if a response 7 was received, otherwise false
static void SDWaitResponse7(uint8_t *pu8ResponseByte)
{
	// Go read the remaining 4 bytes
	SPIRead(pu8ResponseByte,
    4e3a:	44 e0       	ldi	r20, 0x04	; 4
    4e3c:	50 e0       	ldi	r21, 0x00	; 0
    4e3e:	bc 01       	movw	r22, r24
    4e40:	83 e0       	ldi	r24, 0x03	; 3
    4e42:	0e 94 f2 1f 	call	0x3fe4	; 0x3fe4 <SPITransaction>
    4e46:	08 95       	ret

Disassembly of section .text.SDSendInterfaceCondition:

00004650 <SDSendInterfaceCondition>:
	return(u8Response);
}

// Send interface condition
static uint8_t SDSendInterfaceCondition(uint8_t *pu8Response)
{
    4650:	0f 93       	push	r16
    4652:	1f 93       	push	r17
    4654:	cf 93       	push	r28
    4656:	8c 01       	movw	r16, r24
	uint8_t u8Response;
	
	SDSetCS(true);
    4658:	81 e0       	ldi	r24, 0x01	; 1
    465a:	0e 94 b8 26 	call	0x4d70	; 0x4d70 <SDSetCS>
	
	// Send our CMD8 Send interface condition
	u8Response = SDCommand(CMD8,
    465e:	4a ea       	ldi	r20, 0xAA	; 170
    4660:	51 e0       	ldi	r21, 0x01	; 1
    4662:	60 e0       	ldi	r22, 0x00	; 0
    4664:	70 e0       	ldi	r23, 0x00	; 0
    4666:	88 e0       	ldi	r24, 0x08	; 8
    4668:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <SDCommand>
    466c:	c8 2f       	mov	r28, r24
						   CMD8_ARG);
						   
	SDWaitResponse7(pu8Response);
    466e:	c8 01       	movw	r24, r16
    4670:	0e 94 1d 27 	call	0x4e3a	; 0x4e3a <SDWaitResponse7>
		
	SDSetCS(false);
    4674:	80 e0       	ldi	r24, 0x00	; 0
    4676:	0e 94 b8 26 	call	0x4d70	; 0x4d70 <SDSetCS>

	return(u8Response);
}
    467a:	8c 2f       	mov	r24, r28
    467c:	cf 91       	pop	r28
    467e:	1f 91       	pop	r17
    4680:	0f 91       	pop	r16
    4682:	08 95       	ret

Disassembly of section .text.SDReadOCR:

00004684 <SDReadOCR>:
#define CMD58_ARG   0x00000000
#define CMD58_CRC   0x00

// Go read the OCR
static uint8_t SDReadOCR(uint8_t *pu8Response)
{
    4684:	0f 93       	push	r16
    4686:	1f 93       	push	r17
    4688:	cf 93       	push	r28
    468a:	8c 01       	movw	r16, r24
	uint8_t u8Response;
	
	// Assert chip select
	SDSetCS(true);
    468c:	81 e0       	ldi	r24, 0x01	; 1
    468e:	0e 94 b8 26 	call	0x4d70	; 0x4d70 <SDSetCS>
	
	// Send the app command
	u8Response = SDCommand(CMD58,
    4692:	40 e0       	ldi	r20, 0x00	; 0
    4694:	50 e0       	ldi	r21, 0x00	; 0
    4696:	ba 01       	movw	r22, r20
    4698:	8a e3       	ldi	r24, 0x3A	; 58
    469a:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <SDCommand>
    469e:	c8 2f       	mov	r28, r24
						   CMD58_ARG);

	// Read response
	SDWaitResponse7(pu8Response);
    46a0:	c8 01       	movw	r24, r16
    46a2:	0e 94 1d 27 	call	0x4e3a	; 0x4e3a <SDWaitResponse7>

	// Deassert chip select
	SDSetCS(false);
    46a6:	80 e0       	ldi	r24, 0x00	; 0
    46a8:	0e 94 b8 26 	call	0x4d70	; 0x4d70 <SDSetCS>
	
	return(u8Response);
}
    46ac:	8c 2f       	mov	r24, r28
    46ae:	cf 91       	pop	r28
    46b0:	1f 91       	pop	r17
    46b2:	0f 91       	pop	r16
    46b4:	08 95       	ret

Disassembly of section .text.SDReadCSD:

00003bae <SDReadCSD>:
#define CMD9_ARG    0x000000000
#define CMD9_CRC    0x00

// Read CSD (card specific data) - CSD is 128 bits - see the SD spec for details.
static uint8_t SDReadCSD(uint8_t *pu8CSD)
{
    3bae:	ef 92       	push	r14
    3bb0:	ff 92       	push	r15
    3bb2:	0f 93       	push	r16
    3bb4:	1f 93       	push	r17
    3bb6:	cf 93       	push	r28
    3bb8:	df 93       	push	r29
    3bba:	0f 92       	push	r0
    3bbc:	cd b7       	in	r28, 0x3d	; 61
    3bbe:	de b7       	in	r29, 0x3e	; 62
    3bc0:	7c 01       	movw	r14, r24
	uint8_t u8Response;
	uint8_t u8CmdResponse;
	uint8_t u8Count = 8;
	
	SDSetCS(true);
    3bc2:	81 e0       	ldi	r24, 0x01	; 1
    3bc4:	0e 94 b8 26 	call	0x4d70	; 0x4d70 <SDSetCS>
	
	// Send our CMD9 (read CSD)
	u8CmdResponse = SDCommand(CMD9,
    3bc8:	40 e0       	ldi	r20, 0x00	; 0
    3bca:	50 e0       	ldi	r21, 0x00	; 0
    3bcc:	ba 01       	movw	r22, r20
    3bce:	89 e0       	ldi	r24, 0x09	; 9
    3bd0:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <SDCommand>
    3bd4:	08 2f       	mov	r16, r24
							  CMD9_ARG);
	
	// Success! Let's get a response
	if (u8CmdResponse)
    3bd6:	81 11       	cpse	r24, r1
    3bd8:	1c c0       	rjmp	.+56     	; 0x3c12 <SDReadCSD+0x64>
    3bda:	18 e0       	ldi	r17, 0x08	; 8
    3bdc:	01 c0       	rjmp	.+2      	; 0x3be0 <SDReadCSD+0x32>
	do 
	{
		SPIRead(&u8Response,
			    sizeof(u8Response));
	} while ((u8Response != SD_START_TOKEN) &&
			 (u8Count--));
    3bde:	18 2f       	mov	r17, r24
	}
	
	// Wait until SD_START_TOKEN (start of data sector). We should easily see it in a few bytes.
	do 
	{
		SPIRead(&u8Response,
    3be0:	41 e0       	ldi	r20, 0x01	; 1
    3be2:	50 e0       	ldi	r21, 0x00	; 0
    3be4:	be 01       	movw	r22, r28
    3be6:	6f 5f       	subi	r22, 0xFF	; 255
    3be8:	7f 4f       	sbci	r23, 0xFF	; 255
    3bea:	83 e0       	ldi	r24, 0x03	; 3
    3bec:	0e 94 f2 1f 	call	0x3fe4	; 0x3fe4 <SPITransaction>
			    sizeof(u8Response));
	} while ((u8Response != SD_START_TOKEN) &&
    3bf0:	89 81       	ldd	r24, Y+1	; 0x01
			 (u8Count--));
    3bf2:	8e 3f       	cpi	r24, 0xFE	; 254
    3bf4:	29 f0       	breq	.+10     	; 0x3c00 <SDReadCSD+0x52>
    3bf6:	8f ef       	ldi	r24, 0xFF	; 255
    3bf8:	81 0f       	add	r24, r17
	// Wait until SD_START_TOKEN (start of data sector). We should easily see it in a few bytes.
	do 
	{
		SPIRead(&u8Response,
			    sizeof(u8Response));
	} while ((u8Response != SD_START_TOKEN) &&
    3bfa:	11 11       	cpse	r17, r1
    3bfc:	f0 cf       	rjmp	.-32     	; 0x3bde <SDReadCSD+0x30>
    3bfe:	01 c0       	rjmp	.+2      	; 0x3c02 <SDReadCSD+0x54>
    3c00:	81 2f       	mov	r24, r17
			 (u8Count--));
			 
	// If we haven't seen it in u8Count bytes, then error the call
	if (0 == u8Count)
    3c02:	88 23       	and	r24, r24
    3c04:	31 f0       	breq	.+12     	; 0x3c12 <SDReadCSD+0x64>
	{
		goto errorExit;
	}
	
	// Go read the remaining 16 bytes
	SPIRead(pu8CSD,
    3c06:	40 e1       	ldi	r20, 0x10	; 16
    3c08:	50 e0       	ldi	r21, 0x00	; 0
    3c0a:	b7 01       	movw	r22, r14
    3c0c:	83 e0       	ldi	r24, 0x03	; 3
    3c0e:	0e 94 f2 1f 	call	0x3fe4	; 0x3fe4 <SPITransaction>
		    16);
	
errorExit:	
	SDSetCS(false);
    3c12:	80 e0       	ldi	r24, 0x00	; 0
    3c14:	0e 94 b8 26 	call	0x4d70	; 0x4d70 <SDSetCS>
	return(u8CmdResponse);
	
}
    3c18:	80 2f       	mov	r24, r16
    3c1a:	0f 90       	pop	r0
    3c1c:	df 91       	pop	r29
    3c1e:	cf 91       	pop	r28
    3c20:	1f 91       	pop	r17
    3c22:	0f 91       	pop	r16
    3c24:	ff 90       	pop	r15
    3c26:	ef 90       	pop	r14
    3c28:	08 95       	ret

Disassembly of section .text.SDReceiveDataBlock:

00003796 <SDReceiveDataBlock>:
}

// Receives a datablock during the data phase which may take some time
static bool SDReceiveDataBlock(uint8_t *pu8Buffer,
							   uint16_t u16RXCount)
{
    3796:	cf 92       	push	r12
    3798:	df 92       	push	r13
    379a:	ef 92       	push	r14
    379c:	ff 92       	push	r15
    379e:	0f 93       	push	r16
    37a0:	1f 93       	push	r17
    37a2:	cf 93       	push	r28
    37a4:	df 93       	push	r29
    37a6:	0f 92       	push	r0
    37a8:	cd b7       	in	r28, 0x3d	; 61
    37aa:	de b7       	in	r29, 0x3e	; 62
    37ac:	7c 01       	movw	r14, r24
    37ae:	6b 01       	movw	r12, r22
	uint8_t u8Response;
	uint16_t u16Count = 4096;
    37b0:	00 e0       	ldi	r16, 0x00	; 0
    37b2:	10 e1       	ldi	r17, 0x10	; 16
    37b4:	01 c0       	rjmp	.+2      	; 0x37b8 <SDReceiveDataBlock+0x22>
	{
		SPIRead(&u8Response,
				sizeof(u8Response));
	} 
	while ((u8Response != SD_START_TOKEN) &&
		   (u16Count--));
    37b6:	89 01       	movw	r16, r18
	uint16_t u16Count = 4096;
	
	// Wait for response token
	do 
	{
		SPIRead(&u8Response,
    37b8:	41 e0       	ldi	r20, 0x01	; 1
    37ba:	50 e0       	ldi	r21, 0x00	; 0
    37bc:	be 01       	movw	r22, r28
    37be:	6f 5f       	subi	r22, 0xFF	; 255
    37c0:	7f 4f       	sbci	r23, 0xFF	; 255
    37c2:	83 e0       	ldi	r24, 0x03	; 3
    37c4:	0e 94 f2 1f 	call	0x3fe4	; 0x3fe4 <SPITransaction>
				sizeof(u8Response));
	} 
	while ((u8Response != SD_START_TOKEN) &&
    37c8:	89 81       	ldd	r24, Y+1	; 0x01
		   (u16Count--));
    37ca:	8e 3f       	cpi	r24, 0xFE	; 254
    37cc:	29 f0       	breq	.+10     	; 0x37d8 <SDReceiveDataBlock+0x42>
    37ce:	98 01       	movw	r18, r16
    37d0:	21 50       	subi	r18, 0x01	; 1
    37d2:	31 09       	sbc	r19, r1
	do 
	{
		SPIRead(&u8Response,
				sizeof(u8Response));
	} 
	while ((u8Response != SD_START_TOKEN) &&
    37d4:	01 2b       	or	r16, r17
    37d6:	79 f7       	brne	.-34     	; 0x37b6 <SDReceiveDataBlock+0x20>
		   (u16Count--));
		   
	if (u8Response != SD_START_TOKEN)
    37d8:	8e 3f       	cpi	r24, 0xFE	; 254
    37da:	b9 f4       	brne	.+46     	; 0x380a <SDReceiveDataBlock+0x74>
	{
		return(false);
	}
	
	// Start of data. Pull it down.
	SPIRead(pu8Buffer,
    37dc:	a6 01       	movw	r20, r12
    37de:	b7 01       	movw	r22, r14
    37e0:	83 e0       	ldi	r24, 0x03	; 3
    37e2:	0e 94 f2 1f 	call	0x3fe4	; 0x3fe4 <SPITransaction>
			u16RXCount);
			
	// Discard CRC
	SPIRead(&u8Response,
    37e6:	41 e0       	ldi	r20, 0x01	; 1
    37e8:	50 e0       	ldi	r21, 0x00	; 0
    37ea:	be 01       	movw	r22, r28
    37ec:	6f 5f       	subi	r22, 0xFF	; 255
    37ee:	7f 4f       	sbci	r23, 0xFF	; 255
    37f0:	83 e0       	ldi	r24, 0x03	; 3
    37f2:	0e 94 f2 1f 	call	0x3fe4	; 0x3fe4 <SPITransaction>
			sizeof(u8Response));
	SPIRead(&u8Response,
    37f6:	41 e0       	ldi	r20, 0x01	; 1
    37f8:	50 e0       	ldi	r21, 0x00	; 0
    37fa:	be 01       	movw	r22, r28
    37fc:	6f 5f       	subi	r22, 0xFF	; 255
    37fe:	7f 4f       	sbci	r23, 0xFF	; 255
    3800:	83 e0       	ldi	r24, 0x03	; 3
    3802:	0e 94 f2 1f 	call	0x3fe4	; 0x3fe4 <SPITransaction>
			sizeof(u8Response));
	return(true);			   
    3806:	81 e0       	ldi	r24, 0x01	; 1
    3808:	01 c0       	rjmp	.+2      	; 0x380c <SDReceiveDataBlock+0x76>
	while ((u8Response != SD_START_TOKEN) &&
		   (u16Count--));
		   
	if (u8Response != SD_START_TOKEN)
	{
		return(false);
    380a:	80 e0       	ldi	r24, 0x00	; 0
	SPIRead(&u8Response,
			sizeof(u8Response));
	SPIRead(&u8Response,
			sizeof(u8Response));
	return(true);			   
}
    380c:	0f 90       	pop	r0
    380e:	df 91       	pop	r29
    3810:	cf 91       	pop	r28
    3812:	1f 91       	pop	r17
    3814:	0f 91       	pop	r16
    3816:	ff 90       	pop	r15
    3818:	ef 90       	pop	r14
    381a:	df 90       	pop	r13
    381c:	cf 90       	pop	r12
    381e:	08 95       	ret

Disassembly of section .text.SDTransmitDataBlock:

00003106 <SDTransmitDataBlock>:

// Transmits a datablock during the data phase which may take some time
static bool SDTransmitDataBlock(uint8_t *pu8Buffer,
							    uint16_t u16TXCount,
								uint8_t u8DataPhaseToken)
{
    3106:	ef 92       	push	r14
    3108:	ff 92       	push	r15
    310a:	0f 93       	push	r16
    310c:	1f 93       	push	r17
    310e:	cf 93       	push	r28
    3110:	df 93       	push	r29
    3112:	00 d0       	rcall	.+0      	; 0x3114 <SDTransmitDataBlock+0xe>
    3114:	cd b7       	in	r28, 0x3d	; 61
    3116:	de b7       	in	r29, 0x3e	; 62
    3118:	8c 01       	movw	r16, r24
    311a:	7b 01       	movw	r14, r22
    311c:	4a 83       	std	Y+2, r20	; 0x02
	uint8_t u8Response;
	uint16_t u16Attempts;
	bool bResult = true;

	// Send the data phase token (whatever it is)
	SPIWrite(&u8DataPhaseToken,
    311e:	41 e0       	ldi	r20, 0x01	; 1
    3120:	50 e0       	ldi	r21, 0x00	; 0
    3122:	be 01       	movw	r22, r28
    3124:	6e 5f       	subi	r22, 0xFE	; 254
    3126:	7f 4f       	sbci	r23, 0xFF	; 255
    3128:	81 e0       	ldi	r24, 0x01	; 1
    312a:	0e 94 f2 1f 	call	0x3fe4	; 0x3fe4 <SPITransaction>
			 sizeof(u8DataPhaseToken));
	
	if (u8DataPhaseToken != SD_STOP_TRANSACTION)
    312e:	8a 81       	ldd	r24, Y+2	; 0x02
    3130:	8d 3f       	cpi	r24, 0xFD	; 253
    3132:	e1 f1       	breq	.+120    	; 0x31ac <SDTransmitDataBlock+0xa6>
	{
		// As long as we're not stopping a transaction, we're writing data
		SPIWrite(pu8Buffer,
    3134:	a7 01       	movw	r20, r14
    3136:	b8 01       	movw	r22, r16
    3138:	81 e0       	ldi	r24, 0x01	; 1
    313a:	0e 94 f2 1f 	call	0x3fe4	; 0x3fe4 <SPITransaction>
				 u16TXCount);
				 
		// Wait for acceptance of the sector
		u16Attempts = 0;
    313e:	00 e0       	ldi	r16, 0x00	; 0
    3140:	10 e0       	ldi	r17, 0x00	; 0
		while (u16Attempts < SD_MAX_WRITE_ATTEMPTS)
    3142:	0d c0       	rjmp	.+26     	; 0x315e <SDTransmitDataBlock+0x58>
		{
			// Get some data
			SPIRead(&u8Response,
    3144:	41 e0       	ldi	r20, 0x01	; 1
    3146:	50 e0       	ldi	r21, 0x00	; 0
    3148:	be 01       	movw	r22, r28
    314a:	6f 5f       	subi	r22, 0xFF	; 255
    314c:	7f 4f       	sbci	r23, 0xFF	; 255
    314e:	83 e0       	ldi	r24, 0x03	; 3
    3150:	0e 94 f2 1f 	call	0x3fe4	; 0x3fe4 <SPITransaction>
					sizeof(u8Response));
			if (u8Response != 0xff)
    3154:	89 81       	ldd	r24, Y+1	; 0x01
    3156:	8f 3f       	cpi	r24, 0xFF	; 255
    3158:	31 f4       	brne	.+12     	; 0x3166 <SDTransmitDataBlock+0x60>
			{
				break;
			}
				
			++u16Attempts;
    315a:	0f 5f       	subi	r16, 0xFF	; 255
    315c:	1f 4f       	sbci	r17, 0xFF	; 255
		SPIWrite(pu8Buffer,
				 u16TXCount);
				 
		// Wait for acceptance of the sector
		u16Attempts = 0;
		while (u16Attempts < SD_MAX_WRITE_ATTEMPTS)
    315e:	0e 39       	cpi	r16, 0x9E	; 158
    3160:	88 e9       	ldi	r24, 0x98	; 152
    3162:	18 07       	cpc	r17, r24
    3164:	78 f3       	brcs	.-34     	; 0x3144 <SDTransmitDataBlock+0x3e>
				
			++u16Attempts;
		}
			
		// We've timed out or else the card is dead
		if (SD_MAX_WRITE_ATTEMPTS == u16Attempts)
    3166:	0e 39       	cpi	r16, 0x9E	; 158
    3168:	18 49       	sbci	r17, 0x98	; 152
    316a:	11 f1       	breq	.+68     	; 0x31b0 <SDTransmitDataBlock+0xaa>
			bResult = false;
			goto errorExit;
		}
			
		// See if the data was accepted
		u8Response &= 0x1f;
    316c:	89 81       	ldd	r24, Y+1	; 0x01
    316e:	8f 71       	andi	r24, 0x1F	; 31
    3170:	89 83       	std	Y+1, r24	; 0x01
		if (0x05 == u8Response)
    3172:	85 30       	cpi	r24, 0x05	; 5
    3174:	81 f0       	breq	.+32     	; 0x3196 <SDTransmitDataBlock+0x90>
			// Success!
		}
		else
		{
			// Sector not accepted
			bResult = false;
    3176:	80 e0       	ldi	r24, 0x00	; 0
    3178:	1e c0       	rjmp	.+60     	; 0x31b6 <SDTransmitDataBlock+0xb0>
			// Wait for the write to finish
			u16Attempts = 0;
			while (u16Attempts < SD_MAX_WRITE_ATTEMPTS)
			{
				// Wait for the card to accept writing the sector
				SPIRead(&u8Response,
    317a:	41 e0       	ldi	r20, 0x01	; 1
    317c:	50 e0       	ldi	r21, 0x00	; 0
    317e:	be 01       	movw	r22, r28
    3180:	6f 5f       	subi	r22, 0xFF	; 255
    3182:	7f 4f       	sbci	r23, 0xFF	; 255
    3184:	83 e0       	ldi	r24, 0x03	; 3
    3186:	0e 94 f2 1f 	call	0x3fe4	; 0x3fe4 <SPITransaction>
						sizeof(u8Response));
				if (u8Response)
    318a:	89 81       	ldd	r24, Y+1	; 0x01
    318c:	81 11       	cpse	r24, r1
    318e:	09 c0       	rjmp	.+18     	; 0x31a2 <SDTransmitDataBlock+0x9c>
				{
					break;
				}
					
				++u16Attempts;
    3190:	0f 5f       	subi	r16, 0xFF	; 255
    3192:	1f 4f       	sbci	r17, 0xFF	; 255
    3194:	02 c0       	rjmp	.+4      	; 0x319a <SDTransmitDataBlock+0x94>
    3196:	00 e0       	ldi	r16, 0x00	; 0
    3198:	10 e0       	ldi	r17, 0x00	; 0
		u8Response &= 0x1f;
		if (0x05 == u8Response)
		{
			// Wait for the write to finish
			u16Attempts = 0;
			while (u16Attempts < SD_MAX_WRITE_ATTEMPTS)
    319a:	0e 39       	cpi	r16, 0x9E	; 158
    319c:	88 e9       	ldi	r24, 0x98	; 152
    319e:	18 07       	cpc	r17, r24
    31a0:	60 f3       	brcs	.-40     	; 0x317a <SDTransmitDataBlock+0x74>
				}
					
				++u16Attempts;
			}
				
			if (SD_MAX_WRITE_ATTEMPTS == u16Attempts)
    31a2:	0e 39       	cpi	r16, 0x9E	; 158
    31a4:	18 49       	sbci	r17, 0x98	; 152
    31a6:	31 f0       	breq	.+12     	; 0x31b4 <SDTransmitDataBlock+0xae>
							    uint16_t u16TXCount,
								uint8_t u8DataPhaseToken)
{
	uint8_t u8Response;
	uint16_t u16Attempts;
	bool bResult = true;
    31a8:	81 e0       	ldi	r24, 0x01	; 1
    31aa:	05 c0       	rjmp	.+10     	; 0x31b6 <SDTransmitDataBlock+0xb0>
    31ac:	81 e0       	ldi	r24, 0x01	; 1
    31ae:	03 c0       	rjmp	.+6      	; 0x31b6 <SDTransmitDataBlock+0xb0>
		}
			
		// We've timed out or else the card is dead
		if (SD_MAX_WRITE_ATTEMPTS == u16Attempts)
		{
			bResult = false;
    31b0:	80 e0       	ldi	r24, 0x00	; 0
    31b2:	01 c0       	rjmp	.+2      	; 0x31b6 <SDTransmitDataBlock+0xb0>
				++u16Attempts;
			}
				
			if (SD_MAX_WRITE_ATTEMPTS == u16Attempts)
			{
				bResult = false;
    31b4:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	
errorExit:
	return(bResult);
}
    31b6:	0f 90       	pop	r0
    31b8:	0f 90       	pop	r0
    31ba:	df 91       	pop	r29
    31bc:	cf 91       	pop	r28
    31be:	1f 91       	pop	r17
    31c0:	0f 91       	pop	r16
    31c2:	ff 90       	pop	r15
    31c4:	ef 90       	pop	r14
    31c6:	08 95       	ret

Disassembly of section .text.SDInit:

000021a8 <SDInit>:

bool SDGetBlockSize(uint32_t *pu32BlockSize)
{
	*pu32BlockSize = sg_u16BlockSize;
	return(true);
}
    21a8:	1f 93       	push	r17
    21aa:	cf 93       	push	r28
    21ac:	df 93       	push	r29
    21ae:	00 d0       	rcall	.+0      	; 0x21b0 <SDInit+0x8>
    21b0:	00 d0       	rcall	.+0      	; 0x21b2 <SDInit+0xa>
    21b2:	0f 92       	push	r0
    21b4:	cd b7       	in	r28, 0x3d	; 61
    21b6:	de b7       	in	r29, 0x3e	; 62
    21b8:	87 b1       	in	r24, 0x07	; 7
    21ba:	80 64       	ori	r24, 0x40	; 64
    21bc:	87 b9       	out	0x07, r24	; 7
    21be:	88 b1       	in	r24, 0x08	; 8
    21c0:	80 64       	ori	r24, 0x40	; 64
    21c2:	88 b9       	out	0x08, r24	; 8
    21c4:	88 b1       	in	r24, 0x08	; 8
    21c6:	80 64       	ori	r24, 0x40	; 64
    21c8:	88 b9       	out	0x08, r24	; 8
    21ca:	0e 94 e6 23 	call	0x47cc	; 0x47cc <SPIInit>
    21ce:	0e 94 85 22 	call	0x450a	; 0x450a <SDPowerup>
    21d2:	10 e0       	ldi	r17, 0x00	; 0
    21d4:	0d c0       	rjmp	.+26     	; 0x21f0 <SDInit+0x48>
    21d6:	ce 01       	movw	r24, r28
    21d8:	01 96       	adiw	r24, 0x01	; 1
    21da:	0e 94 03 26 	call	0x4c06	; 0x4c06 <SDGoIdle>
    21de:	81 30       	cpi	r24, 0x01	; 1
    21e0:	49 f0       	breq	.+18     	; 0x21f4 <SDInit+0x4c>
    21e2:	60 e1       	ldi	r22, 0x10	; 16
    21e4:	77 e2       	ldi	r23, 0x27	; 39
    21e6:	80 e0       	ldi	r24, 0x00	; 0
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	0e 94 1f 21 	call	0x423e	; 0x423e <Delay>
    21ee:	1f 5f       	subi	r17, 0xFF	; 255
    21f0:	14 36       	cpi	r17, 0x64	; 100
    21f2:	88 f3       	brcs	.-30     	; 0x21d6 <SDInit+0x2e>
    21f4:	14 36       	cpi	r17, 0x64	; 100
    21f6:	09 f4       	brne	.+2      	; 0x21fa <SDInit+0x52>
    21f8:	76 c0       	rjmp	.+236    	; 0x22e6 <SDInit+0x13e>
    21fa:	ce 01       	movw	r24, r28
    21fc:	01 96       	adiw	r24, 0x01	; 1
    21fe:	25 e0       	ldi	r18, 0x05	; 5
    2200:	fc 01       	movw	r30, r24
    2202:	11 92       	st	Z+, r1
    2204:	2a 95       	dec	r18
    2206:	e9 f7       	brne	.-6      	; 0x2202 <SDInit+0x5a>
    2208:	0e 94 28 23 	call	0x4650	; 0x4650 <SDSendInterfaceCondition>
    220c:	81 30       	cpi	r24, 0x01	; 1
    220e:	09 f0       	breq	.+2      	; 0x2212 <SDInit+0x6a>
    2210:	5e c0       	rjmp	.+188    	; 0x22ce <SDInit+0x126>
    2212:	8c 81       	ldd	r24, Y+4	; 0x04
    2214:	8a 3a       	cpi	r24, 0xAA	; 170
    2216:	09 f0       	breq	.+2      	; 0x221a <SDInit+0x72>
    2218:	68 c0       	rjmp	.+208    	; 0x22ea <SDInit+0x142>
    221a:	40 e0       	ldi	r20, 0x00	; 0
    221c:	50 e0       	ldi	r21, 0x00	; 0
    221e:	60 e0       	ldi	r22, 0x00	; 0
    2220:	70 e4       	ldi	r23, 0x40	; 64
    2222:	ce 01       	movw	r24, r28
    2224:	01 96       	adiw	r24, 0x01	; 1
    2226:	0e 94 4a 20 	call	0x4094	; 0x4094 <SDSendOpConditionArg>
    222a:	81 11       	cpse	r24, r1
    222c:	60 c0       	rjmp	.+192    	; 0x22ee <SDInit+0x146>
    222e:	ce 01       	movw	r24, r28
    2230:	01 96       	adiw	r24, 0x01	; 1
    2232:	0e 94 42 23 	call	0x4684	; 0x4684 <SDReadOCR>
    2236:	88 23       	and	r24, r24
    2238:	0c f4       	brge	.+2      	; 0x223c <SDInit+0x94>
    223a:	5b c0       	rjmp	.+182    	; 0x22f2 <SDInit+0x14a>
    223c:	8d e2       	ldi	r24, 0x2D	; 45
    223e:	99 e0       	ldi	r25, 0x09	; 9
    2240:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <SDReadCSD>
    2244:	88 23       	and	r24, r24
    2246:	0c f4       	brge	.+2      	; 0x224a <SDInit+0xa2>
    2248:	56 c0       	rjmp	.+172    	; 0x22f6 <SDInit+0x14e>
    224a:	ed e2       	ldi	r30, 0x2D	; 45
    224c:	f9 e0       	ldi	r31, 0x09	; 9
    224e:	87 81       	ldd	r24, Z+7	; 0x07
    2250:	8f 73       	andi	r24, 0x3F	; 63
    2252:	90 e0       	ldi	r25, 0x00	; 0
    2254:	a0 e0       	ldi	r26, 0x00	; 0
    2256:	b0 e0       	ldi	r27, 0x00	; 0
    2258:	bc 01       	movw	r22, r24
    225a:	55 27       	eor	r21, r21
    225c:	44 27       	eor	r20, r20
    225e:	90 85       	ldd	r25, Z+8	; 0x08
    2260:	89 2f       	mov	r24, r25
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	a0 e0       	ldi	r26, 0x00	; 0
    2266:	b0 e0       	ldi	r27, 0x00	; 0
    2268:	ba 2f       	mov	r27, r26
    226a:	a9 2f       	mov	r26, r25
    226c:	98 2f       	mov	r25, r24
    226e:	88 27       	eor	r24, r24
    2270:	84 2b       	or	r24, r20
    2272:	95 2b       	or	r25, r21
    2274:	a6 2b       	or	r26, r22
    2276:	b7 2b       	or	r27, r23
    2278:	21 85       	ldd	r18, Z+9	; 0x09
    227a:	82 2b       	or	r24, r18
    227c:	01 96       	adiw	r24, 0x01	; 1
    227e:	a1 1d       	adc	r26, r1
    2280:	b1 1d       	adc	r27, r1
    2282:	07 2e       	mov	r0, r23
    2284:	7a e0       	ldi	r23, 0x0A	; 10
    2286:	88 0f       	add	r24, r24
    2288:	99 1f       	adc	r25, r25
    228a:	aa 1f       	adc	r26, r26
    228c:	bb 1f       	adc	r27, r27
    228e:	7a 95       	dec	r23
    2290:	d1 f7       	brne	.-12     	; 0x2286 <SDInit+0xde>
    2292:	70 2d       	mov	r23, r0
    2294:	80 93 54 09 	sts	0x0954, r24	; 0x800954 <sg_u32SDSectorCount>
    2298:	90 93 55 09 	sts	0x0955, r25	; 0x800955 <sg_u32SDSectorCount+0x1>
    229c:	a0 93 56 09 	sts	0x0956, r26	; 0x800956 <sg_u32SDSectorCount+0x2>
    22a0:	b0 93 57 09 	sts	0x0957, r27	; 0x800957 <sg_u32SDSectorCount+0x3>
    22a4:	25 81       	ldd	r18, Z+5	; 0x05
    22a6:	2f 70       	andi	r18, 0x0F	; 15
    22a8:	81 e0       	ldi	r24, 0x01	; 1
    22aa:	90 e0       	ldi	r25, 0x00	; 0
    22ac:	02 c0       	rjmp	.+4      	; 0x22b2 <SDInit+0x10a>
    22ae:	88 0f       	add	r24, r24
    22b0:	99 1f       	adc	r25, r25
    22b2:	2a 95       	dec	r18
    22b4:	e2 f7       	brpl	.-8      	; 0x22ae <SDInit+0x106>
    22b6:	90 93 5f 09 	sts	0x095F, r25	; 0x80095f <sg_u16BlockSize+0x1>
    22ba:	80 93 5e 09 	sts	0x095E, r24	; 0x80095e <sg_u16BlockSize>
    22be:	60 ec       	ldi	r22, 0xC0	; 192
    22c0:	78 ed       	ldi	r23, 0xD8	; 216
    22c2:	87 ea       	ldi	r24, 0xA7	; 167
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <SPISetBaudRate>
    22ca:	81 e0       	ldi	r24, 0x01	; 1
    22cc:	17 c0       	rjmp	.+46     	; 0x22fc <SDInit+0x154>
    22ce:	40 e0       	ldi	r20, 0x00	; 0
    22d0:	50 e0       	ldi	r21, 0x00	; 0
    22d2:	60 e0       	ldi	r22, 0x00	; 0
    22d4:	70 e4       	ldi	r23, 0x40	; 64
    22d6:	ce 01       	movw	r24, r28
    22d8:	01 96       	adiw	r24, 0x01	; 1
    22da:	0e 94 4a 20 	call	0x4094	; 0x4094 <SDSendOpConditionArg>
    22de:	81 11       	cpse	r24, r1
    22e0:	0c c0       	rjmp	.+24     	; 0x22fa <SDInit+0x152>
    22e2:	81 e0       	ldi	r24, 0x01	; 1
    22e4:	0b c0       	rjmp	.+22     	; 0x22fc <SDInit+0x154>
    22e6:	80 e0       	ldi	r24, 0x00	; 0
    22e8:	09 c0       	rjmp	.+18     	; 0x22fc <SDInit+0x154>
    22ea:	80 e0       	ldi	r24, 0x00	; 0
    22ec:	07 c0       	rjmp	.+14     	; 0x22fc <SDInit+0x154>
    22ee:	80 e0       	ldi	r24, 0x00	; 0
    22f0:	05 c0       	rjmp	.+10     	; 0x22fc <SDInit+0x154>
    22f2:	80 e0       	ldi	r24, 0x00	; 0
    22f4:	03 c0       	rjmp	.+6      	; 0x22fc <SDInit+0x154>
    22f6:	80 e0       	ldi	r24, 0x00	; 0
    22f8:	01 c0       	rjmp	.+2      	; 0x22fc <SDInit+0x154>
    22fa:	80 e0       	ldi	r24, 0x00	; 0
    22fc:	0f 90       	pop	r0
    22fe:	0f 90       	pop	r0
    2300:	0f 90       	pop	r0
    2302:	0f 90       	pop	r0
    2304:	0f 90       	pop	r0
    2306:	df 91       	pop	r29
    2308:	cf 91       	pop	r28
    230a:	1f 91       	pop	r17
    230c:	08 95       	ret

Disassembly of section .text.SDRead:

00002d0e <SDRead>:

// Read one or more sectors from SD
bool SDRead(uint32_t u32Sector,
			uint8_t *pu8Buffer,
			uint32_t u32SectorCount)
{
    2d0e:	8f 92       	push	r8
    2d10:	9f 92       	push	r9
    2d12:	af 92       	push	r10
    2d14:	bf 92       	push	r11
    2d16:	cf 92       	push	r12
    2d18:	df 92       	push	r13
    2d1a:	ef 92       	push	r14
    2d1c:	ff 92       	push	r15
    2d1e:	0f 93       	push	r16
    2d20:	1f 93       	push	r17
    2d22:	cf 93       	push	r28
    2d24:	df 93       	push	r29
    2d26:	4b 01       	movw	r8, r22
    2d28:	5c 01       	movw	r10, r24
    2d2a:	ea 01       	movw	r28, r20
    2d2c:	68 01       	movw	r12, r16
    2d2e:	79 01       	movw	r14, r18
	bool bResult = false;
	
	// Pet the watchdog
	WatchdogReset();
    2d30:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <WatchdogReset>
		
	// Assert chip select
	SDSetCS(true);
    2d34:	81 e0       	ldi	r24, 0x01	; 1
    2d36:	0e 94 b8 26 	call	0x4d70	; 0x4d70 <SDSetCS>

	if (1 == u32SectorCount)
    2d3a:	81 e0       	ldi	r24, 0x01	; 1
    2d3c:	c8 16       	cp	r12, r24
    2d3e:	d1 04       	cpc	r13, r1
    2d40:	e1 04       	cpc	r14, r1
    2d42:	f1 04       	cpc	r15, r1
    2d44:	81 f4       	brne	.+32     	; 0x2d66 <SDRead+0x58>
	{
		if (0 == SDCommand(CMD17,
    2d46:	b5 01       	movw	r22, r10
    2d48:	a4 01       	movw	r20, r8
    2d4a:	81 e1       	ldi	r24, 0x11	; 17
    2d4c:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <SDCommand>
    2d50:	81 11       	cpse	r24, r1
    2d52:	35 c0       	rjmp	.+106    	; 0x2dbe <SDRead+0xb0>
						   u32Sector))
		{
			bResult = SDReceiveDataBlock(pu8Buffer,
    2d54:	60 91 5e 09 	lds	r22, 0x095E	; 0x80095e <sg_u16BlockSize>
    2d58:	70 91 5f 09 	lds	r23, 0x095F	; 0x80095f <sg_u16BlockSize+0x1>
    2d5c:	ce 01       	movw	r24, r28
    2d5e:	0e 94 cb 1b 	call	0x3796	; 0x3796 <SDReceiveDataBlock>
    2d62:	18 2f       	mov	r17, r24
    2d64:	2f c0       	rjmp	.+94     	; 0x2dc4 <SDRead+0xb6>
		}
	}
	else
	{
		// Multisector
		if (0 == SDCommand(CMD18,
    2d66:	b5 01       	movw	r22, r10
    2d68:	a4 01       	movw	r20, r8
    2d6a:	82 e1       	ldi	r24, 0x12	; 18
    2d6c:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <SDCommand>
    2d70:	88 23       	and	r24, r24
    2d72:	19 f0       	breq	.+6      	; 0x2d7a <SDRead+0x6c>
    2d74:	26 c0       	rjmp	.+76     	; 0x2dc2 <SDRead+0xb4>
				WatchdogReset();
				
				pu8Buffer += sg_u16BlockSize;
			} 
			while ((bResult) &&
				   (u32SectorCount--));
    2d76:	6c 01       	movw	r12, r24
    2d78:	7d 01       	movw	r14, r26
		if (0 == SDCommand(CMD18,
						   u32Sector))
		{
			do 
			{
				bResult = SDReceiveDataBlock(pu8Buffer,
    2d7a:	60 91 5e 09 	lds	r22, 0x095E	; 0x80095e <sg_u16BlockSize>
    2d7e:	70 91 5f 09 	lds	r23, 0x095F	; 0x80095f <sg_u16BlockSize+0x1>
    2d82:	ce 01       	movw	r24, r28
    2d84:	0e 94 cb 1b 	call	0x3796	; 0x3796 <SDReceiveDataBlock>
    2d88:	18 2f       	mov	r17, r24
							 				 sg_u16BlockSize);
				// Pet the watchdog
				WatchdogReset();
    2d8a:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <WatchdogReset>
				
				pu8Buffer += sg_u16BlockSize;
    2d8e:	80 91 5e 09 	lds	r24, 0x095E	; 0x80095e <sg_u16BlockSize>
    2d92:	90 91 5f 09 	lds	r25, 0x095F	; 0x80095f <sg_u16BlockSize+0x1>
    2d96:	c8 0f       	add	r28, r24
    2d98:	d9 1f       	adc	r29, r25
			} 
			while ((bResult) &&
				   (u32SectorCount--));
    2d9a:	11 23       	and	r17, r17
    2d9c:	49 f0       	breq	.+18     	; 0x2db0 <SDRead+0xa2>
    2d9e:	d7 01       	movw	r26, r14
    2da0:	c6 01       	movw	r24, r12
    2da2:	01 97       	sbiw	r24, 0x01	; 1
    2da4:	a1 09       	sbc	r26, r1
    2da6:	b1 09       	sbc	r27, r1
				// Pet the watchdog
				WatchdogReset();
				
				pu8Buffer += sg_u16BlockSize;
			} 
			while ((bResult) &&
    2da8:	cd 28       	or	r12, r13
    2daa:	ce 28       	or	r12, r14
    2dac:	cf 28       	or	r12, r15
    2dae:	19 f7       	brne	.-58     	; 0x2d76 <SDRead+0x68>
				   (u32SectorCount--));
				   
			// Regardless, send a stop command
			(void) SDCommand(CMD12,
    2db0:	40 e0       	ldi	r20, 0x00	; 0
    2db2:	50 e0       	ldi	r21, 0x00	; 0
    2db4:	ba 01       	movw	r22, r20
    2db6:	8c e0       	ldi	r24, 0x0C	; 12
    2db8:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <SDCommand>
    2dbc:	03 c0       	rjmp	.+6      	; 0x2dc4 <SDRead+0xb6>
// Read one or more sectors from SD
bool SDRead(uint32_t u32Sector,
			uint8_t *pu8Buffer,
			uint32_t u32SectorCount)
{
	bool bResult = false;
    2dbe:	10 e0       	ldi	r17, 0x00	; 0
    2dc0:	01 c0       	rjmp	.+2      	; 0x2dc4 <SDRead+0xb6>
    2dc2:	10 e0       	ldi	r17, 0x00	; 0
		{
			// Failed
		}
	}
	
	SDSetCS(false);
    2dc4:	80 e0       	ldi	r24, 0x00	; 0
    2dc6:	0e 94 b8 26 	call	0x4d70	; 0x4d70 <SDSetCS>

	return(bResult);
}
    2dca:	81 2f       	mov	r24, r17
    2dcc:	df 91       	pop	r29
    2dce:	cf 91       	pop	r28
    2dd0:	1f 91       	pop	r17
    2dd2:	0f 91       	pop	r16
    2dd4:	ff 90       	pop	r15
    2dd6:	ef 90       	pop	r14
    2dd8:	df 90       	pop	r13
    2dda:	cf 90       	pop	r12
    2ddc:	bf 90       	pop	r11
    2dde:	af 90       	pop	r10
    2de0:	9f 90       	pop	r9
    2de2:	8f 90       	pop	r8
    2de4:	08 95       	ret

Disassembly of section .text.SDWrite:

00002b56 <SDWrite>:

bool SDGetBlockSize(uint32_t *pu32BlockSize)
{
	*pu32BlockSize = sg_u16BlockSize;
	return(true);
}
    2b56:	8f 92       	push	r8
    2b58:	9f 92       	push	r9
    2b5a:	af 92       	push	r10
    2b5c:	bf 92       	push	r11
    2b5e:	cf 92       	push	r12
    2b60:	df 92       	push	r13
    2b62:	ef 92       	push	r14
    2b64:	ff 92       	push	r15
    2b66:	0f 93       	push	r16
    2b68:	1f 93       	push	r17
    2b6a:	cf 93       	push	r28
    2b6c:	df 93       	push	r29
    2b6e:	4b 01       	movw	r8, r22
    2b70:	5c 01       	movw	r10, r24
    2b72:	ea 01       	movw	r28, r20
    2b74:	68 01       	movw	r12, r16
    2b76:	79 01       	movw	r14, r18
    2b78:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <WatchdogReset>
    2b7c:	81 e0       	ldi	r24, 0x01	; 1
    2b7e:	0e 94 b8 26 	call	0x4d70	; 0x4d70 <SDSetCS>
    2b82:	81 e0       	ldi	r24, 0x01	; 1
    2b84:	c8 16       	cp	r12, r24
    2b86:	d1 04       	cpc	r13, r1
    2b88:	e1 04       	cpc	r14, r1
    2b8a:	f1 04       	cpc	r15, r1
    2b8c:	89 f4       	brne	.+34     	; 0x2bb0 <SDWrite+0x5a>
    2b8e:	b5 01       	movw	r22, r10
    2b90:	a4 01       	movw	r20, r8
    2b92:	88 e1       	ldi	r24, 0x18	; 24
    2b94:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <SDCommand>
    2b98:	81 11       	cpse	r24, r1
    2b9a:	37 c0       	rjmp	.+110    	; 0x2c0a <SDWrite+0xb4>
    2b9c:	60 91 5e 09 	lds	r22, 0x095E	; 0x80095e <sg_u16BlockSize>
    2ba0:	70 91 5f 09 	lds	r23, 0x095F	; 0x80095f <sg_u16BlockSize+0x1>
    2ba4:	4e ef       	ldi	r20, 0xFE	; 254
    2ba6:	ce 01       	movw	r24, r28
    2ba8:	0e 94 83 18 	call	0x3106	; 0x3106 <SDTransmitDataBlock>
    2bac:	18 2f       	mov	r17, r24
    2bae:	30 c0       	rjmp	.+96     	; 0x2c10 <SDWrite+0xba>
    2bb0:	b5 01       	movw	r22, r10
    2bb2:	a4 01       	movw	r20, r8
    2bb4:	89 e1       	ldi	r24, 0x19	; 25
    2bb6:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <SDCommand>
    2bba:	88 23       	and	r24, r24
    2bbc:	19 f0       	breq	.+6      	; 0x2bc4 <SDWrite+0x6e>
    2bbe:	27 c0       	rjmp	.+78     	; 0x2c0e <SDWrite+0xb8>
    2bc0:	6c 01       	movw	r12, r24
    2bc2:	7d 01       	movw	r14, r26
    2bc4:	60 91 5e 09 	lds	r22, 0x095E	; 0x80095e <sg_u16BlockSize>
    2bc8:	70 91 5f 09 	lds	r23, 0x095F	; 0x80095f <sg_u16BlockSize+0x1>
    2bcc:	4c ef       	ldi	r20, 0xFC	; 252
    2bce:	ce 01       	movw	r24, r28
    2bd0:	0e 94 83 18 	call	0x3106	; 0x3106 <SDTransmitDataBlock>
    2bd4:	18 2f       	mov	r17, r24
    2bd6:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <WatchdogReset>
    2bda:	80 91 5e 09 	lds	r24, 0x095E	; 0x80095e <sg_u16BlockSize>
    2bde:	90 91 5f 09 	lds	r25, 0x095F	; 0x80095f <sg_u16BlockSize+0x1>
    2be2:	c8 0f       	add	r28, r24
    2be4:	d9 1f       	adc	r29, r25
    2be6:	11 23       	and	r17, r17
    2be8:	49 f0       	breq	.+18     	; 0x2bfc <SDWrite+0xa6>
    2bea:	d7 01       	movw	r26, r14
    2bec:	c6 01       	movw	r24, r12
    2bee:	01 97       	sbiw	r24, 0x01	; 1
    2bf0:	a1 09       	sbc	r26, r1
    2bf2:	b1 09       	sbc	r27, r1
    2bf4:	cd 28       	or	r12, r13
    2bf6:	ce 28       	or	r12, r14
    2bf8:	cf 28       	or	r12, r15
    2bfa:	11 f7       	brne	.-60     	; 0x2bc0 <SDWrite+0x6a>
    2bfc:	40 e0       	ldi	r20, 0x00	; 0
    2bfe:	50 e0       	ldi	r21, 0x00	; 0
    2c00:	ba 01       	movw	r22, r20
    2c02:	8c e0       	ldi	r24, 0x0C	; 12
    2c04:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <SDCommand>
    2c08:	03 c0       	rjmp	.+6      	; 0x2c10 <SDWrite+0xba>
    2c0a:	10 e0       	ldi	r17, 0x00	; 0
    2c0c:	01 c0       	rjmp	.+2      	; 0x2c10 <SDWrite+0xba>
    2c0e:	10 e0       	ldi	r17, 0x00	; 0
    2c10:	80 e0       	ldi	r24, 0x00	; 0
    2c12:	0e 94 b8 26 	call	0x4d70	; 0x4d70 <SDSetCS>
    2c16:	81 2f       	mov	r24, r17
    2c18:	df 91       	pop	r29
    2c1a:	cf 91       	pop	r28
    2c1c:	1f 91       	pop	r17
    2c1e:	0f 91       	pop	r16
    2c20:	ff 90       	pop	r15
    2c22:	ef 90       	pop	r14
    2c24:	df 90       	pop	r13
    2c26:	cf 90       	pop	r12
    2c28:	bf 90       	pop	r11
    2c2a:	af 90       	pop	r10
    2c2c:	9f 90       	pop	r9
    2c2e:	8f 90       	pop	r8
    2c30:	08 95       	ret

Disassembly of section .text.SPITransaction:

00003fe4 <SPITransaction>:

// Do a SPI transaction - read or write (or write pattern)
void SPITransaction(ESPIBusState eSPIBusState,
					uint8_t *pu8Buffer,
					uint16_t u16ByteCount)
{
    3fe4:	fb 01       	movw	r30, r22
	// If we're transmitting, start the transaction
	if (ESTATE_RX_DATA == eSPIBusState)
    3fe6:	83 30       	cpi	r24, 0x03	; 3
    3fe8:	71 f4       	brne	.+28     	; 0x4006 <SPITransaction+0x22>
    3fea:	08 c0       	rjmp	.+16     	; 0x3ffc <SPITransaction+0x18>
	{
		while (u16ByteCount--)
		{
			// Clock out 0xff so we can receive the data
			SPDR = 0xff;
    3fec:	2f ef       	ldi	r18, 0xFF	; 255
    3fee:	2e bd       	out	0x2e, r18	; 46

			// Wait for data to be available
			while (0 == (SPSR & (1 << SPIF)));
    3ff0:	0d b4       	in	r0, 0x2d	; 45
    3ff2:	07 fe       	sbrs	r0, 7
    3ff4:	fd cf       	rjmp	.-6      	; 0x3ff0 <SPITransaction+0xc>
			
			// Read the byte
			*pu8Buffer = SPDR;
    3ff6:	2e b5       	in	r18, 0x2e	; 46
    3ff8:	21 93       	st	Z+, r18
					uint16_t u16ByteCount)
{
	// If we're transmitting, start the transaction
	if (ESTATE_RX_DATA == eSPIBusState)
	{
		while (u16ByteCount--)
    3ffa:	ac 01       	movw	r20, r24
    3ffc:	ca 01       	movw	r24, r20
    3ffe:	01 97       	sbiw	r24, 0x01	; 1
    4000:	45 2b       	or	r20, r21
    4002:	a1 f7       	brne	.-24     	; 0x3fec <SPITransaction+0x8>
    4004:	08 95       	ret
			*pu8Buffer = SPDR;
			++pu8Buffer;
		}
	}
	else
	if (ESTATE_TX_DATA == eSPIBusState)
    4006:	81 30       	cpi	r24, 0x01	; 1
    4008:	61 f4       	brne	.+24     	; 0x4022 <SPITransaction+0x3e>
    400a:	06 c0       	rjmp	.+12     	; 0x4018 <SPITransaction+0x34>
	{
		// Clock out whatever our data is in our queue
		while (u16ByteCount--)
		{
			SPDR = *pu8Buffer;
    400c:	21 91       	ld	r18, Z+
    400e:	2e bd       	out	0x2e, r18	; 46
			++pu8Buffer;
			
			// Wait for the transmit to complete
			while (0 == (SPSR & (1 << SPIF)));
    4010:	0d b4       	in	r0, 0x2d	; 45
    4012:	07 fe       	sbrs	r0, 7
    4014:	fd cf       	rjmp	.-6      	; 0x4010 <SPITransaction+0x2c>
	}
	else
	if (ESTATE_TX_DATA == eSPIBusState)
	{
		// Clock out whatever our data is in our queue
		while (u16ByteCount--)
    4016:	ac 01       	movw	r20, r24
    4018:	ca 01       	movw	r24, r20
    401a:	01 97       	sbiw	r24, 0x01	; 1
    401c:	45 2b       	or	r20, r21
    401e:	b1 f7       	brne	.-20     	; 0x400c <SPITransaction+0x28>
    4020:	08 95       	ret
			// Wait for the transmit to complete
			while (0 == (SPSR & (1 << SPIF)));
		}
	}
	else
	if (ESTATE_TX_PATTERN == eSPIBusState)
    4022:	82 30       	cpi	r24, 0x02	; 2
    4024:	51 f4       	brne	.+20     	; 0x403a <SPITransaction+0x56>
    4026:	05 c0       	rjmp	.+10     	; 0x4032 <SPITransaction+0x4e>
		// Clock out whatever our data is in our queue
		while (u16ByteCount--)
		{
			// This is OK - as the position where the pointer would normally
			// be is just the pattern (single byte)
			SPDR = (uint8_t) (pu8Buffer);
    4028:	ee bd       	out	0x2e, r30	; 46
		
			// Wait for the transmit to complete
			while (0 == (SPSR & (1 << SPIF)));
    402a:	0d b4       	in	r0, 0x2d	; 45
    402c:	07 fe       	sbrs	r0, 7
    402e:	fd cf       	rjmp	.-6      	; 0x402a <SPITransaction+0x46>
	}
	else
	if (ESTATE_TX_PATTERN == eSPIBusState)
	{
		// Clock out whatever our data is in our queue
		while (u16ByteCount--)
    4030:	ac 01       	movw	r20, r24
    4032:	ca 01       	movw	r24, r20
    4034:	01 97       	sbiw	r24, 0x01	; 1
    4036:	45 2b       	or	r20, r21
    4038:	b9 f7       	brne	.-18     	; 0x4028 <SPITransaction+0x44>
    403a:	08 95       	ret

Disassembly of section .text.SPISetBaudRate:

00002eb2 <SPISetBaudRate>:
	{FCLKIO >> 7,	(1 << SPR1) | (0 << SPR0),	0},					// /128
};

// Sets the SPI baud rate and returns the actual baud rate selected
uint32_t SPISetBaudRate(uint32_t u32BaudRate)
{
    2eb2:	cf 92       	push	r12
    2eb4:	df 92       	push	r13
    2eb6:	ef 92       	push	r14
    2eb8:	ff 92       	push	r15
    2eba:	6b 01       	movw	r12, r22
    2ebc:	7c 01       	movw	r14, r24
	uint8_t u8Loop;
	
	// Find the baud rate that's the closest
	for (u8Loop = 0; u8Loop < (sizeof(sg_sSPIBaudRates) / sizeof(sg_sSPIBaudRates[0])); u8Loop++)
    2ebe:	20 e0       	ldi	r18, 0x00	; 0
    2ec0:	19 c0       	rjmp	.+50     	; 0x2ef4 <SPISetBaudRate+0x42>
	{
		if (u32BaudRate >= sg_sSPIBaudRates[u8Loop].u32BaudRate)
    2ec2:	82 2f       	mov	r24, r18
    2ec4:	90 e0       	ldi	r25, 0x00	; 0
    2ec6:	ac 01       	movw	r20, r24
    2ec8:	44 0f       	add	r20, r20
    2eca:	55 1f       	adc	r21, r21
    2ecc:	84 0f       	add	r24, r20
    2ece:	95 1f       	adc	r25, r21
    2ed0:	88 0f       	add	r24, r24
    2ed2:	99 1f       	adc	r25, r25
    2ed4:	09 2e       	mov	r0, r25
    2ed6:	00 0c       	add	r0, r0
    2ed8:	aa 0b       	sbc	r26, r26
    2eda:	85 55       	subi	r24, 0x55	; 85
    2edc:	9d 4f       	sbci	r25, 0xFD	; 253
    2ede:	af 4f       	sbci	r26, 0xFF	; 255
    2ee0:	fc 01       	movw	r30, r24
    2ee2:	5a 2f       	mov	r21, r26
    2ee4:	0e 94 69 26 	call	0x4cd2	; 0x4cd2 <__xload_4>
    2ee8:	c6 16       	cp	r12, r22
    2eea:	d7 06       	cpc	r13, r23
    2eec:	e8 06       	cpc	r14, r24
    2eee:	f9 06       	cpc	r15, r25
    2ef0:	18 f4       	brcc	.+6      	; 0x2ef8 <SPISetBaudRate+0x46>
uint32_t SPISetBaudRate(uint32_t u32BaudRate)
{
	uint8_t u8Loop;
	
	// Find the baud rate that's the closest
	for (u8Loop = 0; u8Loop < (sizeof(sg_sSPIBaudRates) / sizeof(sg_sSPIBaudRates[0])); u8Loop++)
    2ef2:	2f 5f       	subi	r18, 0xFF	; 255
    2ef4:	27 30       	cpi	r18, 0x07	; 7
    2ef6:	28 f3       	brcs	.-54     	; 0x2ec2 <SPISetBaudRate+0x10>
			break;
		}
	}

	// If we've hit the end, use the slowest speed
	if ((sizeof(sg_sSPIBaudRates) / sizeof(sg_sSPIBaudRates[0])) == u8Loop)
    2ef8:	27 30       	cpi	r18, 0x07	; 7
    2efa:	09 f4       	brne	.+2      	; 0x2efe <SPISetBaudRate+0x4c>
	{
		u8Loop--;
    2efc:	21 50       	subi	r18, 0x01	; 1
	}

	// Found one!
	SPCR = (SPCR & (uint8_t) ~((1 << SPR1) | (1 << SPR0))) | sg_sSPIBaudRates[u8Loop].u8SPCR;
    2efe:	6c b5       	in	r22, 0x2c	; 44
    2f00:	30 e0       	ldi	r19, 0x00	; 0
    2f02:	a9 01       	movw	r20, r18
    2f04:	44 0f       	add	r20, r20
    2f06:	55 1f       	adc	r21, r21
    2f08:	ca 01       	movw	r24, r20
    2f0a:	82 0f       	add	r24, r18
    2f0c:	93 1f       	adc	r25, r19
    2f0e:	88 0f       	add	r24, r24
    2f10:	99 1f       	adc	r25, r25
    2f12:	04 96       	adiw	r24, 0x04	; 4
    2f14:	09 2e       	mov	r0, r25
    2f16:	00 0c       	add	r0, r0
    2f18:	aa 0b       	sbc	r26, r26
    2f1a:	85 55       	subi	r24, 0x55	; 85
    2f1c:	9d 4f       	sbci	r25, 0xFD	; 253
    2f1e:	af 4f       	sbci	r26, 0xFF	; 255
    2f20:	fc 01       	movw	r30, r24
    2f22:	84 91       	lpm	r24, Z
    2f24:	a7 fd       	sbrc	r26, 7
    2f26:	80 81       	ld	r24, Z
    2f28:	6c 7f       	andi	r22, 0xFC	; 252
    2f2a:	86 2b       	or	r24, r22
    2f2c:	8c bd       	out	0x2c, r24	; 44
	SPSR = (SPSR & (uint8_t) ~(1 << SPI2X)) | sg_sSPIBaudRates[u8Loop].u8SPSR;
    2f2e:	6d b5       	in	r22, 0x2d	; 45
    2f30:	ca 01       	movw	r24, r20
    2f32:	82 0f       	add	r24, r18
    2f34:	93 1f       	adc	r25, r19
    2f36:	88 0f       	add	r24, r24
    2f38:	99 1f       	adc	r25, r25
    2f3a:	05 96       	adiw	r24, 0x05	; 5
    2f3c:	09 2e       	mov	r0, r25
    2f3e:	00 0c       	add	r0, r0
    2f40:	aa 0b       	sbc	r26, r26
    2f42:	85 55       	subi	r24, 0x55	; 85
    2f44:	9d 4f       	sbci	r25, 0xFD	; 253
    2f46:	af 4f       	sbci	r26, 0xFF	; 255
    2f48:	fc 01       	movw	r30, r24
    2f4a:	84 91       	lpm	r24, Z
    2f4c:	a7 fd       	sbrc	r26, 7
    2f4e:	80 81       	ld	r24, Z
    2f50:	6e 7f       	andi	r22, 0xFE	; 254
    2f52:	86 2b       	or	r24, r22
    2f54:	8d bd       	out	0x2d, r24	; 45
	return(sg_sSPIBaudRates[u8Loop].u32BaudRate);
    2f56:	24 0f       	add	r18, r20
    2f58:	35 1f       	adc	r19, r21
    2f5a:	22 0f       	add	r18, r18
    2f5c:	33 1f       	adc	r19, r19
    2f5e:	03 2e       	mov	r0, r19
    2f60:	00 0c       	add	r0, r0
    2f62:	44 0b       	sbc	r20, r20
    2f64:	25 55       	subi	r18, 0x55	; 85
    2f66:	3d 4f       	sbci	r19, 0xFD	; 253
    2f68:	4f 4f       	sbci	r20, 0xFF	; 255
    2f6a:	f9 01       	movw	r30, r18
    2f6c:	54 2f       	mov	r21, r20
    2f6e:	0e 94 69 26 	call	0x4cd2	; 0x4cd2 <__xload_4>
}
    2f72:	ff 90       	pop	r15
    2f74:	ef 90       	pop	r14
    2f76:	df 90       	pop	r13
    2f78:	cf 90       	pop	r12
    2f7a:	08 95       	ret

Disassembly of section .text.SPIInit:

000047cc <SPIInit>:

void SPIInit(void)
{
	// Set MOSI and SCK to output
	DDR_SPI |= (1 << MOSI) | (1 << SCK);
    47cc:	84 b1       	in	r24, 0x04	; 4
    47ce:	82 68       	ori	r24, 0x82	; 130
    47d0:	84 b9       	out	0x04, r24	; 4
	DDR_SPI &= (uint8_t) ~(1 << MISO);
    47d2:	84 b1       	in	r24, 0x04	; 4
    47d4:	8e 7f       	andi	r24, 0xFE	; 254
    47d6:	84 b9       	out	0x04, r24	; 4
	
	// MISO As input (need our pullup)
	PORT_SPI |= (1 << MISO);
    47d8:	85 b1       	in	r24, 0x05	; 5
    47da:	81 60       	ori	r24, 0x01	; 1
    47dc:	85 b9       	out	0x05, r24	; 5
	
	// Enable SPI engine, master only, and clock to fosc/128 and SPI mode 0 (which is what SD wants)
	SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR1) | (1 << SPR0);
    47de:	83 e5       	ldi	r24, 0x53	; 83
    47e0:	8c bd       	out	0x2c, r24	; 44
	
	// Zero out SPSR (all zeroes)
	SPSR = 0;
    47e2:	1d bc       	out	0x2d, r1	; 45
	
	// Zero out SPIPS so the SPI IP is connected to MISO, MOSI, SCK, and SS
	MCUCR &= (uint8_t) ~(1 << SPIPS);
    47e4:	85 b7       	in	r24, 0x35	; 53
    47e6:	8f 77       	andi	r24, 0x7F	; 127
    47e8:	85 bf       	out	0x35, r24	; 53

	// Set to something slow/compatible
	(void) SPISetBaudRate(400000);
    47ea:	60 e8       	ldi	r22, 0x80	; 128
    47ec:	7a e1       	ldi	r23, 0x1A	; 26
    47ee:	86 e0       	ldi	r24, 0x06	; 6
    47f0:	90 e0       	ldi	r25, 0x00	; 0
    47f2:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <SPISetBaudRate>
    47f6:	08 95       	ret

Disassembly of section .text.readGlobalState:

00004454 <readGlobalState>:

static GlobalState gState;
static uint32_t currentSector;
static uint8_t __attribute__((aligned(4))) frameBuffer[FRAME_BUFFER_SIZE];  // Enlarged to handle full frame

static bool readGlobalState(void) {
    4454:	0f 93       	push	r16
    4456:	1f 93       	push	r17
    4458:	cf 93       	push	r28
	if (!SDRead(0, frameBuffer, 1)) {
    445a:	01 e0       	ldi	r16, 0x01	; 1
    445c:	10 e0       	ldi	r17, 0x00	; 0
    445e:	20 e0       	ldi	r18, 0x00	; 0
    4460:	30 e0       	ldi	r19, 0x00	; 0
    4462:	4c e2       	ldi	r20, 0x2C	; 44
    4464:	53 e0       	ldi	r21, 0x03	; 3
    4466:	60 e0       	ldi	r22, 0x00	; 0
    4468:	70 e0       	ldi	r23, 0x00	; 0
    446a:	cb 01       	movw	r24, r22
    446c:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <SDRead>
    4470:	c8 2f       	mov	r28, r24
    4472:	88 23       	and	r24, r24
    4474:	49 f0       	breq	.+18     	; 0x4488 <readGlobalState+0x34>
		return false;
	}
	memcpy(&gState, frameBuffer, sizeof(GlobalState));
    4476:	4c e2       	ldi	r20, 0x2C	; 44
    4478:	53 e0       	ldi	r21, 0x03	; 3
    447a:	60 e8       	ldi	r22, 0x80	; 128
    447c:	28 ed       	ldi	r18, 0xD8	; 216
    447e:	31 e0       	ldi	r19, 0x01	; 1
    4480:	8c e2       	ldi	r24, 0x2C	; 44
    4482:	97 e0       	ldi	r25, 0x07	; 7
    4484:	0e 94 74 23 	call	0x46e8	; 0x46e8 <memcpy>
	// TODO: Implement checksum verification
	return true;
}
    4488:	8c 2f       	mov	r24, r28
    448a:	cf 91       	pop	r28
    448c:	1f 91       	pop	r17
    448e:	0f 91       	pop	r16
    4490:	08 95       	ret

Disassembly of section .text.writeGlobalState:

000046b6 <writeGlobalState>:

static bool writeGlobalState(void) {
    46b6:	0f 93       	push	r16
    46b8:	1f 93       	push	r17
	memcpy(frameBuffer, &gState, sizeof(GlobalState));
    46ba:	4c e2       	ldi	r20, 0x2C	; 44
    46bc:	57 e0       	ldi	r21, 0x07	; 7
    46be:	60 e8       	ldi	r22, 0x80	; 128
    46c0:	28 ed       	ldi	r18, 0xD8	; 216
    46c2:	31 e0       	ldi	r19, 0x01	; 1
    46c4:	8c e2       	ldi	r24, 0x2C	; 44
    46c6:	93 e0       	ldi	r25, 0x03	; 3
    46c8:	0e 94 74 23 	call	0x46e8	; 0x46e8 <memcpy>
	// TODO: Calculate and update checksum
	return SDWrite(0, frameBuffer, 1);
    46cc:	01 e0       	ldi	r16, 0x01	; 1
    46ce:	10 e0       	ldi	r17, 0x00	; 0
    46d0:	20 e0       	ldi	r18, 0x00	; 0
    46d2:	30 e0       	ldi	r19, 0x00	; 0
    46d4:	4c e2       	ldi	r20, 0x2C	; 44
    46d6:	53 e0       	ldi	r21, 0x03	; 3
    46d8:	60 e0       	ldi	r22, 0x00	; 0
    46da:	70 e0       	ldi	r23, 0x00	; 0
    46dc:	cb 01       	movw	r24, r22
    46de:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <SDWrite>
}
    46e2:	1f 91       	pop	r17
    46e4:	0f 91       	pop	r16
    46e6:	08 95       	ret

Disassembly of section .text.updateSessionMap:

00002c32 <updateSessionMap>:

static bool updateSessionMap(void) {
    2c32:	8f 92       	push	r8
    2c34:	9f 92       	push	r9
    2c36:	af 92       	push	r10
    2c38:	bf 92       	push	r11
    2c3a:	cf 92       	push	r12
    2c3c:	df 92       	push	r13
    2c3e:	ef 92       	push	r14
    2c40:	ff 92       	push	r15
    2c42:	0f 93       	push	r16
    2c44:	1f 93       	push	r17
	uint32_t mapSector = gState.activeSessionMapSector;
    2c46:	ec e2       	ldi	r30, 0x2C	; 44
    2c48:	f7 e0       	ldi	r31, 0x07	; 7
    2c4a:	c4 8c       	ldd	r12, Z+28	; 0x1c
    2c4c:	d5 8c       	ldd	r13, Z+29	; 0x1d
    2c4e:	e6 8c       	ldd	r14, Z+30	; 0x1e
    2c50:	f7 8c       	ldd	r15, Z+31	; 0x1f
	uint32_t mapOffset = gState.activeSessionMapOffset;
    2c52:	80 a0       	ldd	r8, Z+32	; 0x20
    2c54:	91 a0       	ldd	r9, Z+33	; 0x21
    2c56:	a2 a0       	ldd	r10, Z+34	; 0x22
    2c58:	b3 a0       	ldd	r11, Z+35	; 0x23

	if (!SDRead(mapSector, frameBuffer, 1)) {
    2c5a:	01 e0       	ldi	r16, 0x01	; 1
    2c5c:	10 e0       	ldi	r17, 0x00	; 0
    2c5e:	20 e0       	ldi	r18, 0x00	; 0
    2c60:	30 e0       	ldi	r19, 0x00	; 0
    2c62:	4c e2       	ldi	r20, 0x2C	; 44
    2c64:	53 e0       	ldi	r21, 0x03	; 3
    2c66:	c7 01       	movw	r24, r14
    2c68:	b6 01       	movw	r22, r12
    2c6a:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <SDRead>
    2c6e:	88 23       	and	r24, r24
    2c70:	09 f4       	brne	.+2      	; 0x2c74 <updateSessionMap+0x42>
    2c72:	42 c0       	rjmp	.+132    	; 0x2cf8 <updateSessionMap+0xc6>
		return false;
	}

	// Update session map
	*(uint64_t*)(frameBuffer + mapOffset) = gState.newSessionSector;
    2c74:	f4 01       	movw	r30, r8
    2c76:	e4 5d       	subi	r30, 0xD4	; 212
    2c78:	fc 4f       	sbci	r31, 0xFC	; 252
    2c7a:	00 91 44 07 	lds	r16, 0x0744	; 0x800744 <gState+0x18>
    2c7e:	10 91 45 07 	lds	r17, 0x0745	; 0x800745 <gState+0x19>
    2c82:	20 91 46 07 	lds	r18, 0x0746	; 0x800746 <gState+0x1a>
    2c86:	30 91 47 07 	lds	r19, 0x0747	; 0x800747 <gState+0x1b>
    2c8a:	00 83       	st	Z, r16
    2c8c:	11 83       	std	Z+1, r17	; 0x01
    2c8e:	22 83       	std	Z+2, r18	; 0x02
    2c90:	33 83       	std	Z+3, r19	; 0x03
    2c92:	14 82       	std	Z+4, r1	; 0x04
    2c94:	15 82       	std	Z+5, r1	; 0x05
    2c96:	16 82       	std	Z+6, r1	; 0x06
    2c98:	17 82       	std	Z+7, r1	; 0x07

	if (!SDWrite(mapSector, frameBuffer, 1)) {
    2c9a:	01 e0       	ldi	r16, 0x01	; 1
    2c9c:	10 e0       	ldi	r17, 0x00	; 0
    2c9e:	20 e0       	ldi	r18, 0x00	; 0
    2ca0:	30 e0       	ldi	r19, 0x00	; 0
    2ca2:	4c e2       	ldi	r20, 0x2C	; 44
    2ca4:	53 e0       	ldi	r21, 0x03	; 3
    2ca6:	c7 01       	movw	r24, r14
    2ca8:	b6 01       	movw	r22, r12
    2caa:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <SDWrite>
    2cae:	88 23       	and	r24, r24
    2cb0:	19 f1       	breq	.+70     	; 0x2cf8 <updateSessionMap+0xc6>
		return false;
	}

	// Update map pointers
	gState.activeSessionMapOffset += sizeof(uint64_t);
    2cb2:	ec e2       	ldi	r30, 0x2C	; 44
    2cb4:	f7 e0       	ldi	r31, 0x07	; 7
    2cb6:	80 a1       	ldd	r24, Z+32	; 0x20
    2cb8:	91 a1       	ldd	r25, Z+33	; 0x21
    2cba:	a2 a1       	ldd	r26, Z+34	; 0x22
    2cbc:	b3 a1       	ldd	r27, Z+35	; 0x23
    2cbe:	08 96       	adiw	r24, 0x08	; 8
    2cc0:	a1 1d       	adc	r26, r1
    2cc2:	b1 1d       	adc	r27, r1
    2cc4:	80 a3       	std	Z+32, r24	; 0x20
    2cc6:	91 a3       	std	Z+33, r25	; 0x21
    2cc8:	a2 a3       	std	Z+34, r26	; 0x22
    2cca:	b3 a3       	std	Z+35, r27	; 0x23
	if (gState.activeSessionMapOffset >= SECTOR_SIZE) {
    2ccc:	81 15       	cp	r24, r1
    2cce:	92 40       	sbci	r25, 0x02	; 2
    2cd0:	a1 05       	cpc	r26, r1
    2cd2:	b1 05       	cpc	r27, r1
    2cd4:	78 f0       	brcs	.+30     	; 0x2cf4 <updateSessionMap+0xc2>
		gState.activeSessionMapSector++;
    2cd6:	84 8d       	ldd	r24, Z+28	; 0x1c
    2cd8:	95 8d       	ldd	r25, Z+29	; 0x1d
    2cda:	a6 8d       	ldd	r26, Z+30	; 0x1e
    2cdc:	b7 8d       	ldd	r27, Z+31	; 0x1f
    2cde:	01 96       	adiw	r24, 0x01	; 1
    2ce0:	a1 1d       	adc	r26, r1
    2ce2:	b1 1d       	adc	r27, r1
    2ce4:	84 8f       	std	Z+28, r24	; 0x1c
    2ce6:	95 8f       	std	Z+29, r25	; 0x1d
    2ce8:	a6 8f       	std	Z+30, r26	; 0x1e
    2cea:	b7 8f       	std	Z+31, r27	; 0x1f
		gState.activeSessionMapOffset = 0;
    2cec:	10 a2       	std	Z+32, r1	; 0x20
    2cee:	11 a2       	std	Z+33, r1	; 0x21
    2cf0:	12 a2       	std	Z+34, r1	; 0x22
    2cf2:	13 a2       	std	Z+35, r1	; 0x23
	}

	return writeGlobalState();
    2cf4:	0e 94 5b 23 	call	0x46b6	; 0x46b6 <writeGlobalState>
}
    2cf8:	1f 91       	pop	r17
    2cfa:	0f 91       	pop	r16
    2cfc:	ff 90       	pop	r15
    2cfe:	ef 90       	pop	r14
    2d00:	df 90       	pop	r13
    2d02:	cf 90       	pop	r12
    2d04:	bf 90       	pop	r11
    2d06:	af 90       	pop	r10
    2d08:	9f 90       	pop	r9
    2d0a:	8f 90       	pop	r8
    2d0c:	08 95       	ret

Disassembly of section .text.STORE_Init:

000039b4 <STORE_Init>:

bool STORE_Init(void) {
    39b4:	cf 93       	push	r28
	if (!SDInit()) {
    39b6:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <SDInit>
    39ba:	c8 2f       	mov	r28, r24
    39bc:	88 23       	and	r24, r24
    39be:	c1 f1       	breq	.+112    	; 0x3a30 <STORE_Init+0x7c>
		return false;
	}

	if (!readGlobalState()) {
    39c0:	0e 94 2a 22 	call	0x4454	; 0x4454 <readGlobalState>
    39c4:	81 11       	cpse	r24, r1
    39c6:	22 c0       	rjmp	.+68     	; 0x3a0c <STORE_Init+0x58>
		// Initialize global state if it doesn't exist
		memset(&gState, 0, sizeof(GlobalState));
    39c8:	ec e2       	ldi	r30, 0x2C	; 44
    39ca:	f7 e0       	ldi	r31, 0x07	; 7
    39cc:	88 ed       	ldi	r24, 0xD8	; 216
    39ce:	91 e0       	ldi	r25, 0x01	; 1
    39d0:	df 01       	movw	r26, r30
    39d2:	9c 01       	movw	r18, r24
    39d4:	1d 92       	st	X+, r1
    39d6:	21 50       	subi	r18, 0x01	; 1
    39d8:	30 40       	sbci	r19, 0x00	; 0
    39da:	e1 f7       	brne	.-8      	; 0x39d4 <STORE_Init+0x20>
		gState.firstSessionSector = 1;
    39dc:	81 e0       	ldi	r24, 0x01	; 1
    39de:	90 e0       	ldi	r25, 0x00	; 0
    39e0:	a0 e0       	ldi	r26, 0x00	; 0
    39e2:	b0 e0       	ldi	r27, 0x00	; 0
    39e4:	84 87       	std	Z+12, r24	; 0x0c
    39e6:	95 87       	std	Z+13, r25	; 0x0d
    39e8:	a6 87       	std	Z+14, r26	; 0x0e
    39ea:	b7 87       	std	Z+15, r27	; 0x0f
		gState.newSessionSector = 1;
    39ec:	80 8f       	std	Z+24, r24	; 0x18
    39ee:	91 8f       	std	Z+25, r25	; 0x19
    39f0:	a2 8f       	std	Z+26, r26	; 0x1a
    39f2:	b3 8f       	std	Z+27, r27	; 0x1b
		gState.activeSessionMapSector = 4;
    39f4:	84 e0       	ldi	r24, 0x04	; 4
    39f6:	90 e0       	ldi	r25, 0x00	; 0
    39f8:	a0 e0       	ldi	r26, 0x00	; 0
    39fa:	b0 e0       	ldi	r27, 0x00	; 0
    39fc:	84 8f       	std	Z+28, r24	; 0x1c
    39fe:	95 8f       	std	Z+29, r25	; 0x1d
    3a00:	a6 8f       	std	Z+30, r26	; 0x1e
    3a02:	b7 8f       	std	Z+31, r27	; 0x1f
		gState.activeSessionMapOffset = 0;
		// TODO: Initialize other fields as needed
		if (!writeGlobalState()) {
    3a04:	0e 94 5b 23 	call	0x46b6	; 0x46b6 <writeGlobalState>
    3a08:	88 23       	and	r24, r24
    3a0a:	89 f0       	breq	.+34     	; 0x3a2e <STORE_Init+0x7a>
			return false;
		}
	}

	currentSector = gState.newSessionSector;
    3a0c:	80 91 44 07 	lds	r24, 0x0744	; 0x800744 <gState+0x18>
    3a10:	90 91 45 07 	lds	r25, 0x0745	; 0x800745 <gState+0x19>
    3a14:	a0 91 46 07 	lds	r26, 0x0746	; 0x800746 <gState+0x1a>
    3a18:	b0 91 47 07 	lds	r27, 0x0747	; 0x800747 <gState+0x1b>
    3a1c:	80 93 58 09 	sts	0x0958, r24	; 0x800958 <currentSector>
    3a20:	90 93 59 09 	sts	0x0959, r25	; 0x800959 <currentSector+0x1>
    3a24:	a0 93 5a 09 	sts	0x095A, r26	; 0x80095a <currentSector+0x2>
    3a28:	b0 93 5b 09 	sts	0x095B, r27	; 0x80095b <currentSector+0x3>
	return true;
    3a2c:	01 c0       	rjmp	.+2      	; 0x3a30 <STORE_Init+0x7c>
		gState.newSessionSector = 1;
		gState.activeSessionMapSector = 4;
		gState.activeSessionMapOffset = 0;
		// TODO: Initialize other fields as needed
		if (!writeGlobalState()) {
			return false;
    3a2e:	c8 2f       	mov	r28, r24
		}
	}

	currentSector = gState.newSessionSector;
	return true;
}
    3a30:	8c 2f       	mov	r24, r28
    3a32:	cf 91       	pop	r28
    3a34:	08 95       	ret

Disassembly of section .text.STORE_WriteFrame:

00002898 <STORE_WriteFrame>:

bool STORE_WriteFrame(volatile FrameData* frame) {
    2898:	8f 92       	push	r8
    289a:	9f 92       	push	r9
    289c:	af 92       	push	r10
    289e:	bf 92       	push	r11
    28a0:	cf 92       	push	r12
    28a2:	df 92       	push	r13
    28a4:	ef 92       	push	r14
    28a6:	ff 92       	push	r15
    28a8:	0f 93       	push	r16
    28aa:	1f 93       	push	r17
    28ac:	cf 93       	push	r28
    28ae:	df 93       	push	r29
	uint32_t bytesWritten = 0;
	uint32_t currentOffset = 0;
	uint32_t sectorsToWrite;
	
	// Verify frame size
	if(frame->frameBytes > FRAME_BUFFER_SIZE) {
    28b0:	fc 01       	movw	r30, r24
    28b2:	24 81       	ldd	r18, Z+4	; 0x04
    28b4:	35 81       	ldd	r19, Z+5	; 0x05
    28b6:	21 30       	cpi	r18, 0x01	; 1
    28b8:	34 40       	sbci	r19, 0x04	; 4
    28ba:	08 f0       	brcs	.+2      	; 0x28be <STORE_WriteFrame+0x26>
    28bc:	5b c0       	rjmp	.+182    	; 0x2974 <STORE_WriteFrame+0xdc>
    28be:	ec 01       	movw	r28, r24
		return false;
	}
	
	// Copy frame data to our buffer
	memcpy(frameBuffer, (const void*)frame, frame->frameBytes);
    28c0:	2c 81       	ldd	r18, Y+4	; 0x04
    28c2:	3d 81       	ldd	r19, Y+5	; 0x05
    28c4:	ac 01       	movw	r20, r24
    28c6:	60 e8       	ldi	r22, 0x80	; 128
    28c8:	8c e2       	ldi	r24, 0x2C	; 44
    28ca:	93 e0       	ldi	r25, 0x03	; 3
    28cc:	0e 94 74 23 	call	0x46e8	; 0x46e8 <memcpy>
	
	// Zero out any remaining buffer space in last sector
	if(frame->frameBytes < FRAME_BUFFER_SIZE) {
    28d0:	8c 81       	ldd	r24, Y+4	; 0x04
    28d2:	9d 81       	ldd	r25, Y+5	; 0x05
    28d4:	81 15       	cp	r24, r1
    28d6:	94 40       	sbci	r25, 0x04	; 4
    28d8:	70 f4       	brcc	.+28     	; 0x28f6 <STORE_WriteFrame+0x5e>
		memset(frameBuffer + frame->frameBytes, 0, FRAME_BUFFER_SIZE - frame->frameBytes);
    28da:	2c 81       	ldd	r18, Y+4	; 0x04
    28dc:	3d 81       	ldd	r19, Y+5	; 0x05
    28de:	8c 81       	ldd	r24, Y+4	; 0x04
    28e0:	9d 81       	ldd	r25, Y+5	; 0x05
    28e2:	40 e0       	ldi	r20, 0x00	; 0
    28e4:	54 e0       	ldi	r21, 0x04	; 4
    28e6:	42 1b       	sub	r20, r18
    28e8:	53 0b       	sbc	r21, r19
    28ea:	60 e0       	ldi	r22, 0x00	; 0
    28ec:	70 e0       	ldi	r23, 0x00	; 0
    28ee:	84 5d       	subi	r24, 0xD4	; 212
    28f0:	9c 4f       	sbci	r25, 0xFC	; 252
    28f2:	0e 94 cb 26 	call	0x4d96	; 0x4d96 <memset>

	currentSector = gState.newSessionSector;
	return true;
}

bool STORE_WriteFrame(volatile FrameData* frame) {
    28f6:	c1 2c       	mov	r12, r1
    28f8:	d1 2c       	mov	r13, r1
    28fa:	76 01       	movw	r14, r12
    28fc:	68 94       	set
    28fe:	c1 f8       	bld	r12, 1
    2900:	81 2c       	mov	r8, r1
    2902:	91 2c       	mov	r9, r1
    2904:	54 01       	movw	r10, r8
    2906:	2f c0       	rjmp	.+94     	; 0x2966 <STORE_WriteFrame+0xce>
	// Calculate how many complete sectors we need to write
	sectorsToWrite = SECTORS_PER_FRAME;
	
	// Write all sectors
	while(sectorsToWrite > 0) {
		if(!SDWrite(currentSector, frameBuffer + currentOffset, 1)) {
    2908:	60 91 58 09 	lds	r22, 0x0958	; 0x800958 <currentSector>
    290c:	70 91 59 09 	lds	r23, 0x0959	; 0x800959 <currentSector+0x1>
    2910:	80 91 5a 09 	lds	r24, 0x095A	; 0x80095a <currentSector+0x2>
    2914:	90 91 5b 09 	lds	r25, 0x095B	; 0x80095b <currentSector+0x3>
    2918:	01 e0       	ldi	r16, 0x01	; 1
    291a:	10 e0       	ldi	r17, 0x00	; 0
    291c:	20 e0       	ldi	r18, 0x00	; 0
    291e:	30 e0       	ldi	r19, 0x00	; 0
    2920:	a4 01       	movw	r20, r8
    2922:	44 5d       	subi	r20, 0xD4	; 212
    2924:	5c 4f       	sbci	r21, 0xFC	; 252
    2926:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <SDWrite>
    292a:	88 23       	and	r24, r24
    292c:	21 f1       	breq	.+72     	; 0x2976 <STORE_WriteFrame+0xde>
			return false;
		}
		currentSector++;
    292e:	80 91 58 09 	lds	r24, 0x0958	; 0x800958 <currentSector>
    2932:	90 91 59 09 	lds	r25, 0x0959	; 0x800959 <currentSector+0x1>
    2936:	a0 91 5a 09 	lds	r26, 0x095A	; 0x80095a <currentSector+0x2>
    293a:	b0 91 5b 09 	lds	r27, 0x095B	; 0x80095b <currentSector+0x3>
    293e:	01 96       	adiw	r24, 0x01	; 1
    2940:	a1 1d       	adc	r26, r1
    2942:	b1 1d       	adc	r27, r1
    2944:	80 93 58 09 	sts	0x0958, r24	; 0x800958 <currentSector>
    2948:	90 93 59 09 	sts	0x0959, r25	; 0x800959 <currentSector+0x1>
    294c:	a0 93 5a 09 	sts	0x095A, r26	; 0x80095a <currentSector+0x2>
    2950:	b0 93 5b 09 	sts	0x095B, r27	; 0x80095b <currentSector+0x3>
		currentOffset += SECTOR_SIZE;
    2954:	42 e0       	ldi	r20, 0x02	; 2
    2956:	94 0e       	add	r9, r20
    2958:	a1 1c       	adc	r10, r1
    295a:	b1 1c       	adc	r11, r1
		sectorsToWrite--;
    295c:	81 e0       	ldi	r24, 0x01	; 1
    295e:	c8 1a       	sub	r12, r24
    2960:	d1 08       	sbc	r13, r1
    2962:	e1 08       	sbc	r14, r1
    2964:	f1 08       	sbc	r15, r1
	
	// Calculate how many complete sectors we need to write
	sectorsToWrite = SECTORS_PER_FRAME;
	
	// Write all sectors
	while(sectorsToWrite > 0) {
    2966:	c1 14       	cp	r12, r1
    2968:	d1 04       	cpc	r13, r1
    296a:	e1 04       	cpc	r14, r1
    296c:	f1 04       	cpc	r15, r1
    296e:	61 f6       	brne	.-104    	; 0x2908 <STORE_WriteFrame+0x70>
		currentSector++;
		currentOffset += SECTOR_SIZE;
		sectorsToWrite--;
	}
	
	return true;
    2970:	81 e0       	ldi	r24, 0x01	; 1
    2972:	01 c0       	rjmp	.+2      	; 0x2976 <STORE_WriteFrame+0xde>
	uint32_t currentOffset = 0;
	uint32_t sectorsToWrite;
	
	// Verify frame size
	if(frame->frameBytes > FRAME_BUFFER_SIZE) {
		return false;
    2974:	80 e0       	ldi	r24, 0x00	; 0
		currentOffset += SECTOR_SIZE;
		sectorsToWrite--;
	}
	
	return true;
}
    2976:	df 91       	pop	r29
    2978:	cf 91       	pop	r28
    297a:	1f 91       	pop	r17
    297c:	0f 91       	pop	r16
    297e:	ff 90       	pop	r15
    2980:	ef 90       	pop	r14
    2982:	df 90       	pop	r13
    2984:	cf 90       	pop	r12
    2986:	bf 90       	pop	r11
    2988:	af 90       	pop	r10
    298a:	9f 90       	pop	r9
    298c:	8f 90       	pop	r8
    298e:	08 95       	ret

Disassembly of section .text.STORE_StartNewSession:

000041ea <STORE_StartNewSession>:

bool STORE_StartNewSession(void) {
	// Update session info
	gState.sessionCount++;
    41ea:	ec e2       	ldi	r30, 0x2C	; 44
    41ec:	f7 e0       	ldi	r31, 0x07	; 7
    41ee:	84 89       	ldd	r24, Z+20	; 0x14
    41f0:	95 89       	ldd	r25, Z+21	; 0x15
    41f2:	a6 89       	ldd	r26, Z+22	; 0x16
    41f4:	b7 89       	ldd	r27, Z+23	; 0x17
    41f6:	01 96       	adiw	r24, 0x01	; 1
    41f8:	a1 1d       	adc	r26, r1
    41fa:	b1 1d       	adc	r27, r1
    41fc:	84 8b       	std	Z+20, r24	; 0x14
    41fe:	95 8b       	std	Z+21, r25	; 0x15
    4200:	a6 8b       	std	Z+22, r26	; 0x16
    4202:	b7 8b       	std	Z+23, r27	; 0x17
	gState.newSessionSector = currentSector;
    4204:	80 91 58 09 	lds	r24, 0x0958	; 0x800958 <currentSector>
    4208:	90 91 59 09 	lds	r25, 0x0959	; 0x800959 <currentSector+0x1>
    420c:	a0 91 5a 09 	lds	r26, 0x095A	; 0x80095a <currentSector+0x2>
    4210:	b0 91 5b 09 	lds	r27, 0x095B	; 0x80095b <currentSector+0x3>
    4214:	80 8f       	std	Z+24, r24	; 0x18
    4216:	91 8f       	std	Z+25, r25	; 0x19
    4218:	a2 8f       	std	Z+26, r26	; 0x1a
    421a:	b3 8f       	std	Z+27, r27	; 0x1b
	
	// Ensure sector alignment for new sessions
	if(currentSector % SECTORS_PER_FRAME != 0) {
    421c:	80 ff       	sbrs	r24, 0
    421e:	0c c0       	rjmp	.+24     	; 0x4238 <STORE_StartNewSession+0x4e>
		currentSector += SECTORS_PER_FRAME - (currentSector % SECTORS_PER_FRAME);
    4220:	8e 7f       	andi	r24, 0xFE	; 254
    4222:	02 96       	adiw	r24, 0x02	; 2
    4224:	a1 1d       	adc	r26, r1
    4226:	b1 1d       	adc	r27, r1
    4228:	80 93 58 09 	sts	0x0958, r24	; 0x800958 <currentSector>
    422c:	90 93 59 09 	sts	0x0959, r25	; 0x800959 <currentSector+0x1>
    4230:	a0 93 5a 09 	sts	0x095A, r26	; 0x80095a <currentSector+0x2>
    4234:	b0 93 5b 09 	sts	0x095B, r27	; 0x80095b <currentSector+0x3>
	}
	
	return updateSessionMap();
    4238:	0e 94 19 16 	call	0x2c32	; 0x2c32 <updateSessionMap>
}
    423c:	08 95       	ret

Disassembly of section .text.STORE_EndSession:

0000403c <STORE_EndSession>:

bool STORE_EndSession(void) {
	// Ensure we end on a frame boundary
	if(currentSector % SECTORS_PER_FRAME != 0) {
    403c:	80 91 58 09 	lds	r24, 0x0958	; 0x800958 <currentSector>
    4040:	90 91 59 09 	lds	r25, 0x0959	; 0x800959 <currentSector+0x1>
    4044:	a0 91 5a 09 	lds	r26, 0x095A	; 0x80095a <currentSector+0x2>
    4048:	b0 91 5b 09 	lds	r27, 0x095B	; 0x80095b <currentSector+0x3>
    404c:	80 ff       	sbrs	r24, 0
    404e:	0c c0       	rjmp	.+24     	; 0x4068 <STORE_EndSession+0x2c>
		currentSector += SECTORS_PER_FRAME - (currentSector % SECTORS_PER_FRAME);
    4050:	8e 7f       	andi	r24, 0xFE	; 254
    4052:	02 96       	adiw	r24, 0x02	; 2
    4054:	a1 1d       	adc	r26, r1
    4056:	b1 1d       	adc	r27, r1
    4058:	80 93 58 09 	sts	0x0958, r24	; 0x800958 <currentSector>
    405c:	90 93 59 09 	sts	0x0959, r25	; 0x800959 <currentSector+0x1>
    4060:	a0 93 5a 09 	sts	0x095A, r26	; 0x80095a <currentSector+0x2>
    4064:	b0 93 5b 09 	sts	0x095B, r27	; 0x80095b <currentSector+0x3>
	}
	
	gState.lastSessionSector = currentSector - 1;
    4068:	80 91 58 09 	lds	r24, 0x0958	; 0x800958 <currentSector>
    406c:	90 91 59 09 	lds	r25, 0x0959	; 0x800959 <currentSector+0x1>
    4070:	a0 91 5a 09 	lds	r26, 0x095A	; 0x80095a <currentSector+0x2>
    4074:	b0 91 5b 09 	lds	r27, 0x095B	; 0x80095b <currentSector+0x3>
    4078:	01 97       	sbiw	r24, 0x01	; 1
    407a:	a1 09       	sbc	r26, r1
    407c:	b1 09       	sbc	r27, r1
    407e:	80 93 3c 07 	sts	0x073C, r24	; 0x80073c <gState+0x10>
    4082:	90 93 3d 07 	sts	0x073D, r25	; 0x80073d <gState+0x11>
    4086:	a0 93 3e 07 	sts	0x073E, r26	; 0x80073e <gState+0x12>
    408a:	b0 93 3f 07 	sts	0x073F, r27	; 0x80073f <gState+0x13>
	return writeGlobalState();
    408e:	0e 94 5b 23 	call	0x46b6	; 0x46b6 <writeGlobalState>
}
    4092:	08 95       	ret

Disassembly of section .text.vUARTtxDataAvailable:

00004be2 <vUARTtxDataAvailable>:
#endif

bool vUARTIsBusy(void) {
	return ((sg_etxState != ESTATE_IDLE) ||
		(sg_eCell_mc_rxState != ESTATE_IDLE));
}
    4be2:	80 91 7b 09 	lds	r24, 0x097B	; 0x80097b <sg_u8SendIndex>
    4be6:	81 11       	cpse	r24, r1
    4be8:	06 c0       	rjmp	.+12     	; 0x4bf6 <vUARTtxDataAvailable+0x14>
    4bea:	0e 94 25 24 	call	0x484a	; 0x484a <PlatformGetSendData>
    4bee:	90 93 61 09 	sts	0x0961, r25	; 0x800961 <sg_u8SendData+0x1>
    4bf2:	80 93 60 09 	sts	0x0960, r24	; 0x800960 <sg_u8SendData>
    4bf6:	80 91 7b 09 	lds	r24, 0x097B	; 0x80097b <sg_u8SendIndex>
    4bfa:	81 11       	cpse	r24, r1
    4bfc:	02 c0       	rjmp	.+4      	; 0x4c02 <vUARTtxDataAvailable+0x20>
    4bfe:	81 e0       	ldi	r24, 0x01	; 1
    4c00:	08 95       	ret
    4c02:	80 e0       	ldi	r24, 0x00	; 0
    4c04:	08 95       	ret

Disassembly of section .text.vUARTtxDataGet:

00004380 <vUARTtxDataGet>:
    4380:	80 91 7b 09 	lds	r24, 0x097B	; 0x80097b <sg_u8SendIndex>
    4384:	81 11       	cpse	r24, r1
    4386:	10 c0       	rjmp	.+32     	; 0x43a8 <vUARTtxDataGet+0x28>
    4388:	81 e0       	ldi	r24, 0x01	; 1
    438a:	0e 94 25 24 	call	0x484a	; 0x484a <PlatformGetSendData>
    438e:	e0 e6       	ldi	r30, 0x60	; 96
    4390:	f9 e0       	ldi	r31, 0x09	; 9
    4392:	90 83       	st	Z, r25
    4394:	81 83       	std	Z+1, r24	; 0x01
    4396:	80 81       	ld	r24, Z
    4398:	88 23       	and	r24, r24
    439a:	24 f4       	brge	.+8      	; 0x43a4 <vUARTtxDataGet+0x24>
    439c:	81 e0       	ldi	r24, 0x01	; 1
    439e:	80 93 7f 09 	sts	0x097F, r24	; 0x80097f <sg_bCellReportsReuested>
    43a2:	02 c0       	rjmp	.+4      	; 0x43a8 <vUARTtxDataGet+0x28>
    43a4:	10 92 7f 09 	sts	0x097F, r1	; 0x80097f <sg_bCellReportsReuested>
    43a8:	e0 91 7b 09 	lds	r30, 0x097B	; 0x80097b <sg_u8SendIndex>
    43ac:	f0 e0       	ldi	r31, 0x00	; 0
    43ae:	e0 5a       	subi	r30, 0xA0	; 160
    43b0:	f6 4f       	sbci	r31, 0xF6	; 246
    43b2:	80 81       	ld	r24, Z
    43b4:	90 91 7b 09 	lds	r25, 0x097B	; 0x80097b <sg_u8SendIndex>
    43b8:	9f 5f       	subi	r25, 0xFF	; 255
    43ba:	90 93 7b 09 	sts	0x097B, r25	; 0x80097b <sg_u8SendIndex>
    43be:	90 91 7b 09 	lds	r25, 0x097B	; 0x80097b <sg_u8SendIndex>
    43c2:	92 30       	cpi	r25, 0x02	; 2
    43c4:	10 f0       	brcs	.+4      	; 0x43ca <vUARTtxDataGet+0x4a>
    43c6:	10 92 7b 09 	sts	0x097B, r1	; 0x80097b <sg_u8SendIndex>
    43ca:	08 95       	ret

Disassembly of section .text.vUARTRXReset:

00004e82 <vUARTRXReset>:

// Called when we have a string timeout or need to reset the state machine
// for the MC RX side of things
void vUARTRXReset(void)
{
	sg_eCell_mc_rxState = ESTATE_IDLE;
    4e82:	10 92 86 09 	sts	0x0986, r1	; 0x800986 <sg_eCell_mc_rxState>
	vUARTRXStart();
    4e86:	0e 94 97 26 	call	0x4d2e	; 0x4d2e <vUARTRXStart>
    4e8a:	08 95       	ret

Disassembly of section .text.vUARTStarttx:

000040ea <vUARTStarttx>:
#endif

bool vUARTIsBusy(void) {
	return ((sg_etxState != ESTATE_IDLE) ||
		(sg_eCell_mc_rxState != ESTATE_IDLE));
}
    40ea:	80 91 80 09 	lds	r24, 0x0980	; 0x800980 <sg_etxState>
    40ee:	81 11       	cpse	r24, r1
    40f0:	23 c0       	rjmp	.+70     	; 0x4138 <vUARTStarttx+0x4e>
    40f2:	80 91 86 09 	lds	r24, 0x0986	; 0x800986 <sg_eCell_mc_rxState>
    40f6:	81 11       	cpse	r24, r1
    40f8:	21 c0       	rjmp	.+66     	; 0x413c <vUARTStarttx+0x52>
    40fa:	82 e0       	ldi	r24, 0x02	; 2
    40fc:	80 93 80 09 	sts	0x0980, r24	; 0x800980 <sg_etxState>
    4100:	10 92 7b 09 	sts	0x097B, r1	; 0x80097b <sg_u8SendIndex>
    4104:	10 92 83 09 	sts	0x0983, r1	; 0x800983 <sg_u8txBitCount>
    4108:	81 e0       	ldi	r24, 0x01	; 1
    410a:	80 93 7e 09 	sts	0x097E, r24	; 0x80097e <sg_bMCTxNextBit>
    410e:	86 b5       	in	r24, 0x26	; 38
    4110:	8e 5c       	subi	r24, 0xCE	; 206
    4112:	87 bd       	out	0x27, r24	; 39
    4114:	85 b3       	in	r24, 0x15	; 21
    4116:	82 60       	ori	r24, 0x02	; 2
    4118:	85 bb       	out	0x15, r24	; 21
    411a:	ee e6       	ldi	r30, 0x6E	; 110
    411c:	f0 e0       	ldi	r31, 0x00	; 0
    411e:	80 81       	ld	r24, Z
    4120:	82 60       	ori	r24, 0x02	; 2
    4122:	80 83       	st	Z, r24
    4124:	0e 94 f1 25 	call	0x4be2	; 0x4be2 <vUARTtxDataAvailable>
    4128:	80 93 81 09 	sts	0x0981, r24	; 0x800981 <sg_btxMoreAvailable>
    412c:	0e 94 c0 21 	call	0x4380	; 0x4380 <vUARTtxDataGet>
    4130:	80 93 82 09 	sts	0x0982, r24	; 0x800982 <sg_u8txDataByte>
    4134:	81 e0       	ldi	r24, 0x01	; 1
    4136:	08 95       	ret
    4138:	80 e0       	ldi	r24, 0x00	; 0
    413a:	08 95       	ret
    413c:	80 e0       	ldi	r24, 0x00	; 0
    413e:	08 95       	ret

Disassembly of section .text.__vector_8:

0000333e <__vector_8>:
    333e:	1f 92       	push	r1
    3340:	0f 92       	push	r0
    3342:	0f b6       	in	r0, 0x3f	; 63
    3344:	0f 92       	push	r0
    3346:	11 24       	eor	r1, r1
    3348:	8f 93       	push	r24
    334a:	9f 93       	push	r25
    334c:	ef 93       	push	r30
    334e:	ff 93       	push	r31
    3350:	80 91 86 09 	lds	r24, 0x0986	; 0x800986 <sg_eCell_mc_rxState>
    3354:	88 23       	and	r24, r24
    3356:	11 f0       	breq	.+4      	; 0x335c <__vector_8+0x1e>
    3358:	83 30       	cpi	r24, 0x03	; 3
    335a:	f9 f4       	brne	.+62     	; 0x339a <__vector_8+0x5c>
    335c:	86 b5       	in	r24, 0x26	; 38
    335e:	8c 5b       	subi	r24, 0xBC	; 188
    3360:	88 bd       	out	0x28, r24	; 40
    3362:	85 b3       	in	r24, 0x15	; 21
    3364:	84 60       	ori	r24, 0x04	; 4
    3366:	85 bb       	out	0x15, r24	; 21
    3368:	ee e6       	ldi	r30, 0x6E	; 110
    336a:	f0 e0       	ldi	r31, 0x00	; 0
    336c:	80 81       	ld	r24, Z
    336e:	84 60       	ori	r24, 0x04	; 4
    3370:	80 83       	st	Z, r24
    3372:	e9 e6       	ldi	r30, 0x69	; 105
    3374:	f0 e0       	ldi	r31, 0x00	; 0
    3376:	80 81       	ld	r24, Z
    3378:	83 7f       	andi	r24, 0xF3	; 243
    337a:	84 60       	ori	r24, 0x04	; 4
    337c:	80 83       	st	Z, r24
    337e:	8c b3       	in	r24, 0x1c	; 28
    3380:	82 60       	ori	r24, 0x02	; 2
    3382:	8c bb       	out	0x1c, r24	; 28
    3384:	8b b1       	in	r24, 0x0b	; 11
    3386:	80 62       	ori	r24, 0x20	; 32
    3388:	8b b9       	out	0x0b, r24	; 11
    338a:	10 92 7a 09 	sts	0x097A, r1	; 0x80097a <sg_bState>
    338e:	81 e0       	ldi	r24, 0x01	; 1
    3390:	80 93 86 09 	sts	0x0986, r24	; 0x800986 <sg_eCell_mc_rxState>
    3394:	10 92 88 09 	sts	0x0988, r1	; 0x800988 <sg_u8Cell_mc_rxBitCount>
    3398:	22 c0       	rjmp	.+68     	; 0x33de <__vector_8+0xa0>
    339a:	81 30       	cpi	r24, 0x01	; 1
    339c:	01 f5       	brne	.+64     	; 0x33de <__vector_8+0xa0>
    339e:	80 91 88 09 	lds	r24, 0x0988	; 0x800988 <sg_u8Cell_mc_rxBitCount>
    33a2:	88 23       	and	r24, r24
    33a4:	e1 f0       	breq	.+56     	; 0x33de <__vector_8+0xa0>
    33a6:	86 b5       	in	r24, 0x26	; 38
    33a8:	98 b5       	in	r25, 0x28	; 40
    33aa:	99 51       	subi	r25, 0x19	; 25
    33ac:	89 1b       	sub	r24, r25
    33ae:	90 91 7d 09 	lds	r25, 0x097D	; 0x80097d <sg_minTimingError>
    33b2:	89 17       	cp	r24, r25
    33b4:	14 f4       	brge	.+4      	; 0x33ba <__vector_8+0x7c>
    33b6:	80 93 7d 09 	sts	0x097D, r24	; 0x80097d <sg_minTimingError>
    33ba:	90 91 7c 09 	lds	r25, 0x097C	; 0x80097c <sg_maxTimingError>
    33be:	98 17       	cp	r25, r24
    33c0:	14 f4       	brge	.+4      	; 0x33c6 <__vector_8+0x88>
    33c2:	80 93 7c 09 	sts	0x097C, r24	; 0x80097c <sg_maxTimingError>
    33c6:	86 b5       	in	r24, 0x26	; 38
    33c8:	8e 5e       	subi	r24, 0xEE	; 238
    33ca:	88 bd       	out	0x28, r24	; 40
    33cc:	80 91 62 09 	lds	r24, 0x0962	; 0x800962 <sg_edgeCorrections>
    33d0:	90 91 63 09 	lds	r25, 0x0963	; 0x800963 <sg_edgeCorrections+0x1>
    33d4:	01 96       	adiw	r24, 0x01	; 1
    33d6:	90 93 63 09 	sts	0x0963, r25	; 0x800963 <sg_edgeCorrections+0x1>
    33da:	80 93 62 09 	sts	0x0962, r24	; 0x800962 <sg_edgeCorrections>
    33de:	ff 91       	pop	r31
    33e0:	ef 91       	pop	r30
    33e2:	9f 91       	pop	r25
    33e4:	8f 91       	pop	r24
    33e6:	0f 90       	pop	r0
    33e8:	0f be       	out	0x3f, r0	; 63
    33ea:	0f 90       	pop	r0
    33ec:	1f 90       	pop	r1
    33ee:	18 95       	reti

Disassembly of section .text.__vector_16:

00002990 <__vector_16>:
    2990:	1f 92       	push	r1
    2992:	0f 92       	push	r0
    2994:	0f b6       	in	r0, 0x3f	; 63
    2996:	0f 92       	push	r0
    2998:	11 24       	eor	r1, r1
    299a:	2f 93       	push	r18
    299c:	3f 93       	push	r19
    299e:	4f 93       	push	r20
    29a0:	5f 93       	push	r21
    29a2:	6f 93       	push	r22
    29a4:	7f 93       	push	r23
    29a6:	8f 93       	push	r24
    29a8:	9f 93       	push	r25
    29aa:	af 93       	push	r26
    29ac:	bf 93       	push	r27
    29ae:	ef 93       	push	r30
    29b0:	ff 93       	push	r31
    29b2:	86 b5       	in	r24, 0x26	; 38
    29b4:	85 5d       	subi	r24, 0xD5	; 213
    29b6:	88 bd       	out	0x28, r24	; 40
    29b8:	85 b3       	in	r24, 0x15	; 21
    29ba:	84 60       	ori	r24, 0x04	; 4
    29bc:	85 bb       	out	0x15, r24	; 21
    29be:	ee e6       	ldi	r30, 0x6E	; 110
    29c0:	f0 e0       	ldi	r31, 0x00	; 0
    29c2:	80 81       	ld	r24, Z
    29c4:	84 60       	ori	r24, 0x04	; 4
    29c6:	80 83       	st	Z, r24
    29c8:	20 91 85 09 	lds	r18, 0x0985	; 0x800985 <sg_bCell_mc_rxPriorState>
    29cc:	83 b1       	in	r24, 0x03	; 3
    29ce:	82 fb       	bst	r24, 2
    29d0:	88 27       	eor	r24, r24
    29d2:	80 f9       	bld	r24, 0
    29d4:	80 93 85 09 	sts	0x0985, r24	; 0x800985 <sg_bCell_mc_rxPriorState>
    29d8:	90 91 7a 09 	lds	r25, 0x097A	; 0x80097a <sg_bState>
    29dc:	99 23       	and	r25, r25
    29de:	31 f0       	breq	.+12     	; 0x29ec <__vector_16+0x5c>
    29e0:	9b b1       	in	r25, 0x0b	; 11
    29e2:	90 62       	ori	r25, 0x20	; 32
    29e4:	9b b9       	out	0x0b, r25	; 11
    29e6:	10 92 7a 09 	sts	0x097A, r1	; 0x80097a <sg_bState>
    29ea:	06 c0       	rjmp	.+12     	; 0x29f8 <__vector_16+0x68>
    29ec:	9b b1       	in	r25, 0x0b	; 11
    29ee:	9f 7d       	andi	r25, 0xDF	; 223
    29f0:	9b b9       	out	0x0b, r25	; 11
    29f2:	81 e0       	ldi	r24, 0x01	; 1
    29f4:	80 93 7a 09 	sts	0x097A, r24	; 0x80097a <sg_bState>
    29f8:	80 91 88 09 	lds	r24, 0x0988	; 0x800988 <sg_u8Cell_mc_rxBitCount>
    29fc:	8f 5f       	subi	r24, 0xFF	; 255
    29fe:	80 93 88 09 	sts	0x0988, r24	; 0x800988 <sg_u8Cell_mc_rxBitCount>
    2a02:	81 30       	cpi	r24, 0x01	; 1
    2a04:	19 f4       	brne	.+6      	; 0x2a0c <__vector_16+0x7c>
    2a06:	10 92 87 09 	sts	0x0987, r1	; 0x800987 <sg_u8rxDataByte>
    2a0a:	23 c0       	rjmp	.+70     	; 0x2a52 <__vector_16+0xc2>
    2a0c:	8a 30       	cpi	r24, 0x0A	; 10
    2a0e:	38 f4       	brcc	.+14     	; 0x2a1e <__vector_16+0x8e>
    2a10:	80 91 87 09 	lds	r24, 0x0987	; 0x800987 <sg_u8rxDataByte>
    2a14:	88 0f       	add	r24, r24
    2a16:	82 2b       	or	r24, r18
    2a18:	80 93 87 09 	sts	0x0987, r24	; 0x800987 <sg_u8rxDataByte>
    2a1c:	1a c0       	rjmp	.+52     	; 0x2a52 <__vector_16+0xc2>
    2a1e:	20 93 84 09 	sts	0x0984, r18	; 0x800984 <sg_bCell_mc_rxMoreData>
    2a22:	8b b1       	in	r24, 0x0b	; 11
    2a24:	8f 7d       	andi	r24, 0xDF	; 223
    2a26:	8b b9       	out	0x0b, r24	; 11
    2a28:	81 e0       	ldi	r24, 0x01	; 1
    2a2a:	80 93 7a 09 	sts	0x097A, r24	; 0x80097a <sg_bState>
    2a2e:	8c e0       	ldi	r24, 0x0C	; 12
    2a30:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f0069>
    2a34:	8c b3       	in	r24, 0x1c	; 28
    2a36:	82 60       	ori	r24, 0x02	; 2
    2a38:	8c bb       	out	0x1c, r24	; 28
    2a3a:	ee e6       	ldi	r30, 0x6E	; 110
    2a3c:	f0 e0       	ldi	r31, 0x00	; 0
    2a3e:	80 81       	ld	r24, Z
    2a40:	8b 7f       	andi	r24, 0xFB	; 251
    2a42:	80 83       	st	Z, r24
    2a44:	80 91 87 09 	lds	r24, 0x0987	; 0x800987 <sg_u8rxDataByte>
    2a48:	0e 94 52 1e 	call	0x3ca4	; 0x3ca4 <vUARTRXData>
    2a4c:	83 e0       	ldi	r24, 0x03	; 3
    2a4e:	80 93 86 09 	sts	0x0986, r24	; 0x800986 <sg_eCell_mc_rxState>
    2a52:	ff 91       	pop	r31
    2a54:	ef 91       	pop	r30
    2a56:	bf 91       	pop	r27
    2a58:	af 91       	pop	r26
    2a5a:	9f 91       	pop	r25
    2a5c:	8f 91       	pop	r24
    2a5e:	7f 91       	pop	r23
    2a60:	6f 91       	pop	r22
    2a62:	5f 91       	pop	r21
    2a64:	4f 91       	pop	r20
    2a66:	3f 91       	pop	r19
    2a68:	2f 91       	pop	r18
    2a6a:	0f 90       	pop	r0
    2a6c:	0f be       	out	0x3f, r0	; 63
    2a6e:	0f 90       	pop	r0
    2a70:	1f 90       	pop	r1
    2a72:	18 95       	reti

Disassembly of section .text.__vector_15:

0000244a <__vector_15>:
    244a:	1f 92       	push	r1
    244c:	0f 92       	push	r0
    244e:	0f b6       	in	r0, 0x3f	; 63
    2450:	0f 92       	push	r0
    2452:	11 24       	eor	r1, r1
    2454:	2f 93       	push	r18
    2456:	3f 93       	push	r19
    2458:	4f 93       	push	r20
    245a:	5f 93       	push	r21
    245c:	6f 93       	push	r22
    245e:	7f 93       	push	r23
    2460:	8f 93       	push	r24
    2462:	9f 93       	push	r25
    2464:	af 93       	push	r26
    2466:	bf 93       	push	r27
    2468:	ef 93       	push	r30
    246a:	ff 93       	push	r31
    246c:	86 b5       	in	r24, 0x26	; 38
    246e:	83 5d       	subi	r24, 0xD3	; 211
    2470:	87 bd       	out	0x27, r24	; 39
    2472:	85 b3       	in	r24, 0x15	; 21
    2474:	82 60       	ori	r24, 0x02	; 2
    2476:	85 bb       	out	0x15, r24	; 21
    2478:	ee e6       	ldi	r30, 0x6E	; 110
    247a:	f0 e0       	ldi	r31, 0x00	; 0
    247c:	80 81       	ld	r24, Z
    247e:	82 60       	ori	r24, 0x02	; 2
    2480:	80 83       	st	Z, r24
    2482:	80 91 7e 09 	lds	r24, 0x097E	; 0x80097e <sg_bMCTxNextBit>
    2486:	88 23       	and	r24, r24
    2488:	21 f0       	breq	.+8      	; 0x2492 <__vector_15+0x48>
    248a:	85 b1       	in	r24, 0x05	; 5
    248c:	88 60       	ori	r24, 0x08	; 8
    248e:	85 b9       	out	0x05, r24	; 5
    2490:	03 c0       	rjmp	.+6      	; 0x2498 <__vector_15+0x4e>
    2492:	85 b1       	in	r24, 0x05	; 5
    2494:	87 7f       	andi	r24, 0xF7	; 247
    2496:	85 b9       	out	0x05, r24	; 5
    2498:	80 91 83 09 	lds	r24, 0x0983	; 0x800983 <sg_u8txBitCount>
    249c:	8f 5f       	subi	r24, 0xFF	; 255
    249e:	80 93 83 09 	sts	0x0983, r24	; 0x800983 <sg_u8txBitCount>
    24a2:	80 91 83 09 	lds	r24, 0x0983	; 0x800983 <sg_u8txBitCount>
    24a6:	83 30       	cpi	r24, 0x03	; 3
    24a8:	61 f4       	brne	.+24     	; 0x24c2 <__vector_15+0x78>
    24aa:	80 91 7f 09 	lds	r24, 0x097F	; 0x80097f <sg_bCellReportsReuested>
    24ae:	88 23       	and	r24, r24
    24b0:	41 f0       	breq	.+16     	; 0x24c2 <__vector_15+0x78>
    24b2:	8b e0       	ldi	r24, 0x0B	; 11
    24b4:	80 93 83 09 	sts	0x0983, r24	; 0x800983 <sg_u8txBitCount>
    24b8:	10 92 7e 09 	sts	0x097E, r1	; 0x80097e <sg_bMCTxNextBit>
    24bc:	10 92 81 09 	sts	0x0981, r1	; 0x800981 <sg_btxMoreAvailable>
    24c0:	4d c0       	rjmp	.+154    	; 0x255c <__vector_15+0x112>
    24c2:	80 91 83 09 	lds	r24, 0x0983	; 0x800983 <sg_u8txBitCount>
    24c6:	8a 30       	cpi	r24, 0x0A	; 10
    24c8:	80 f4       	brcc	.+32     	; 0x24ea <__vector_15+0xa0>
    24ca:	80 91 82 09 	lds	r24, 0x0982	; 0x800982 <sg_u8txDataByte>
    24ce:	88 23       	and	r24, r24
    24d0:	24 f4       	brge	.+8      	; 0x24da <__vector_15+0x90>
    24d2:	81 e0       	ldi	r24, 0x01	; 1
    24d4:	80 93 7e 09 	sts	0x097E, r24	; 0x80097e <sg_bMCTxNextBit>
    24d8:	02 c0       	rjmp	.+4      	; 0x24de <__vector_15+0x94>
    24da:	10 92 7e 09 	sts	0x097E, r1	; 0x80097e <sg_bMCTxNextBit>
    24de:	80 91 82 09 	lds	r24, 0x0982	; 0x800982 <sg_u8txDataByte>
    24e2:	88 0f       	add	r24, r24
    24e4:	80 93 82 09 	sts	0x0982, r24	; 0x800982 <sg_u8txDataByte>
    24e8:	39 c0       	rjmp	.+114    	; 0x255c <__vector_15+0x112>
    24ea:	80 91 83 09 	lds	r24, 0x0983	; 0x800983 <sg_u8txBitCount>
    24ee:	8a 30       	cpi	r24, 0x0A	; 10
    24f0:	29 f4       	brne	.+10     	; 0x24fc <__vector_15+0xb2>
    24f2:	80 91 81 09 	lds	r24, 0x0981	; 0x800981 <sg_btxMoreAvailable>
    24f6:	80 93 7e 09 	sts	0x097E, r24	; 0x80097e <sg_bMCTxNextBit>
    24fa:	30 c0       	rjmp	.+96     	; 0x255c <__vector_15+0x112>
    24fc:	80 91 83 09 	lds	r24, 0x0983	; 0x800983 <sg_u8txBitCount>
    2500:	8b 30       	cpi	r24, 0x0B	; 11
    2502:	19 f4       	brne	.+6      	; 0x250a <__vector_15+0xc0>
    2504:	10 92 7e 09 	sts	0x097E, r1	; 0x80097e <sg_bMCTxNextBit>
    2508:	29 c0       	rjmp	.+82     	; 0x255c <__vector_15+0x112>
    250a:	80 91 83 09 	lds	r24, 0x0983	; 0x800983 <sg_u8txBitCount>
    250e:	8c 30       	cpi	r24, 0x0C	; 12
    2510:	29 f5       	brne	.+74     	; 0x255c <__vector_15+0x112>
    2512:	80 91 81 09 	lds	r24, 0x0981	; 0x800981 <sg_btxMoreAvailable>
    2516:	80 93 7e 09 	sts	0x097E, r24	; 0x80097e <sg_bMCTxNextBit>
    251a:	10 92 83 09 	sts	0x0983, r1	; 0x800983 <sg_u8txBitCount>
    251e:	80 91 81 09 	lds	r24, 0x0981	; 0x800981 <sg_btxMoreAvailable>
    2522:	81 11       	cpse	r24, r1
    2524:	08 c0       	rjmp	.+16     	; 0x2536 <__vector_15+0xec>
    2526:	10 92 80 09 	sts	0x0980, r1	; 0x800980 <sg_etxState>
    252a:	ee e6       	ldi	r30, 0x6E	; 110
    252c:	f0 e0       	ldi	r31, 0x00	; 0
    252e:	80 81       	ld	r24, Z
    2530:	8d 7f       	andi	r24, 0xFD	; 253
    2532:	80 83       	st	Z, r24
    2534:	13 c0       	rjmp	.+38     	; 0x255c <__vector_15+0x112>
    2536:	0e 94 f1 25 	call	0x4be2	; 0x4be2 <vUARTtxDataAvailable>
    253a:	80 93 81 09 	sts	0x0981, r24	; 0x800981 <sg_btxMoreAvailable>
    253e:	0e 94 c0 21 	call	0x4380	; 0x4380 <vUARTtxDataGet>
    2542:	80 93 82 09 	sts	0x0982, r24	; 0x800982 <sg_u8txDataByte>
    2546:	86 b5       	in	r24, 0x26	; 38
    2548:	88 53       	subi	r24, 0x38	; 56
    254a:	87 bd       	out	0x27, r24	; 39
    254c:	85 b3       	in	r24, 0x15	; 21
    254e:	82 60       	ori	r24, 0x02	; 2
    2550:	85 bb       	out	0x15, r24	; 21
    2552:	ee e6       	ldi	r30, 0x6E	; 110
    2554:	f0 e0       	ldi	r31, 0x00	; 0
    2556:	80 81       	ld	r24, Z
    2558:	82 60       	ori	r24, 0x02	; 2
    255a:	80 83       	st	Z, r24
    255c:	ff 91       	pop	r31
    255e:	ef 91       	pop	r30
    2560:	bf 91       	pop	r27
    2562:	af 91       	pop	r26
    2564:	9f 91       	pop	r25
    2566:	8f 91       	pop	r24
    2568:	7f 91       	pop	r23
    256a:	6f 91       	pop	r22
    256c:	5f 91       	pop	r21
    256e:	4f 91       	pop	r20
    2570:	3f 91       	pop	r19
    2572:	2f 91       	pop	r18
    2574:	0f 90       	pop	r0
    2576:	0f be       	out	0x3f, r0	; 63
    2578:	0f 90       	pop	r0
    257a:	1f 90       	pop	r1
    257c:	18 95       	reti

Disassembly of section .text.vUARTInit:

0000457c <vUARTInit>:
    457c:	85 b7       	in	r24, 0x35	; 53
    457e:	8f 7e       	andi	r24, 0xEF	; 239
    4580:	85 bf       	out	0x35, r24	; 53
    4582:	84 b1       	in	r24, 0x04	; 4
    4584:	88 60       	ori	r24, 0x08	; 8
    4586:	84 b9       	out	0x04, r24	; 4
    4588:	84 b1       	in	r24, 0x04	; 4
    458a:	8b 7f       	andi	r24, 0xFB	; 251
    458c:	84 b9       	out	0x04, r24	; 4
    458e:	85 b1       	in	r24, 0x05	; 5
    4590:	8b 7f       	andi	r24, 0xFB	; 251
    4592:	85 b9       	out	0x05, r24	; 5
    4594:	8a b1       	in	r24, 0x0a	; 10
    4596:	80 62       	ori	r24, 0x20	; 32
    4598:	8a b9       	out	0x0a, r24	; 10
    459a:	8b b1       	in	r24, 0x0b	; 11
    459c:	80 62       	ori	r24, 0x20	; 32
    459e:	8b b9       	out	0x0b, r24	; 11
    45a0:	8d b3       	in	r24, 0x1d	; 29
    45a2:	8d 7f       	andi	r24, 0xFD	; 253
    45a4:	8d bb       	out	0x1d, r24	; 29
    45a6:	10 92 80 09 	sts	0x0980, r1	; 0x800980 <sg_etxState>
    45aa:	85 b1       	in	r24, 0x05	; 5
    45ac:	87 7f       	andi	r24, 0xF7	; 247
    45ae:	85 b9       	out	0x05, r24	; 5
    45b0:	08 95       	ret

Disassembly of section .text.vUARTInitReceive:

00004872 <vUARTInitReceive>:
    4872:	8f e7       	ldi	r24, 0x7F	; 127
    4874:	80 93 7d 09 	sts	0x097D, r24	; 0x80097d <sg_minTimingError>
    4878:	80 e8       	ldi	r24, 0x80	; 128
    487a:	80 93 7c 09 	sts	0x097C, r24	; 0x80097c <sg_maxTimingError>
    487e:	10 92 63 09 	sts	0x0963, r1	; 0x800963 <sg_edgeCorrections+0x1>
    4882:	10 92 62 09 	sts	0x0962, r1	; 0x800962 <sg_edgeCorrections>
    4886:	8c e0       	ldi	r24, 0x0C	; 12
    4888:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f0069>
    488c:	8c b3       	in	r24, 0x1c	; 28
    488e:	82 60       	ori	r24, 0x02	; 2
    4890:	8c bb       	out	0x1c, r24	; 28
    4892:	8d b3       	in	r24, 0x1d	; 29
    4894:	82 60       	ori	r24, 0x02	; 2
    4896:	8d bb       	out	0x1d, r24	; 29
    4898:	08 95       	ret

Disassembly of section .text.libgcc.div:

0000489a <__udivmodhi4>:
    489a:	aa 1b       	sub	r26, r26
    489c:	bb 1b       	sub	r27, r27
    489e:	51 e1       	ldi	r21, 0x11	; 17
    48a0:	07 c0       	rjmp	.+14     	; 0x48b0 <__udivmodhi4_ep>

000048a2 <__udivmodhi4_loop>:
    48a2:	aa 1f       	adc	r26, r26
    48a4:	bb 1f       	adc	r27, r27
    48a6:	a6 17       	cp	r26, r22
    48a8:	b7 07       	cpc	r27, r23
    48aa:	10 f0       	brcs	.+4      	; 0x48b0 <__udivmodhi4_ep>
    48ac:	a6 1b       	sub	r26, r22
    48ae:	b7 0b       	sbc	r27, r23

000048b0 <__udivmodhi4_ep>:
    48b0:	88 1f       	adc	r24, r24
    48b2:	99 1f       	adc	r25, r25
    48b4:	5a 95       	dec	r21
    48b6:	a9 f7       	brne	.-22     	; 0x48a2 <__udivmodhi4_loop>
    48b8:	80 95       	com	r24
    48ba:	90 95       	com	r25
    48bc:	bc 01       	movw	r22, r24
    48be:	cd 01       	movw	r24, r26
    48c0:	08 95       	ret

Disassembly of section .text.libgcc.div:

00004410 <__udivmodsi4>:
    4410:	a1 e2       	ldi	r26, 0x21	; 33
    4412:	1a 2e       	mov	r1, r26
    4414:	aa 1b       	sub	r26, r26
    4416:	bb 1b       	sub	r27, r27
    4418:	fd 01       	movw	r30, r26
    441a:	0d c0       	rjmp	.+26     	; 0x4436 <__udivmodsi4_ep>

0000441c <__udivmodsi4_loop>:
    441c:	aa 1f       	adc	r26, r26
    441e:	bb 1f       	adc	r27, r27
    4420:	ee 1f       	adc	r30, r30
    4422:	ff 1f       	adc	r31, r31
    4424:	a2 17       	cp	r26, r18
    4426:	b3 07       	cpc	r27, r19
    4428:	e4 07       	cpc	r30, r20
    442a:	f5 07       	cpc	r31, r21
    442c:	20 f0       	brcs	.+8      	; 0x4436 <__udivmodsi4_ep>
    442e:	a2 1b       	sub	r26, r18
    4430:	b3 0b       	sbc	r27, r19
    4432:	e4 0b       	sbc	r30, r20
    4434:	f5 0b       	sbc	r31, r21

00004436 <__udivmodsi4_ep>:
    4436:	66 1f       	adc	r22, r22
    4438:	77 1f       	adc	r23, r23
    443a:	88 1f       	adc	r24, r24
    443c:	99 1f       	adc	r25, r25
    443e:	1a 94       	dec	r1
    4440:	69 f7       	brne	.-38     	; 0x441c <__udivmodsi4_loop>
    4442:	60 95       	com	r22
    4444:	70 95       	com	r23
    4446:	80 95       	com	r24
    4448:	90 95       	com	r25
    444a:	9b 01       	movw	r18, r22
    444c:	ac 01       	movw	r20, r24
    444e:	bd 01       	movw	r22, r26
    4450:	cf 01       	movw	r24, r30
    4452:	08 95       	ret

Disassembly of section .text.libgcc.div:

0000471a <__divmodsi4>:
    471a:	05 2e       	mov	r0, r21
    471c:	97 fb       	bst	r25, 7
    471e:	1e f4       	brtc	.+6      	; 0x4726 <__divmodsi4+0xc>
    4720:	00 94       	com	r0
    4722:	0e 94 f7 26 	call	0x4dee	; 0x4dee <__negsi2>
    4726:	57 fd       	sbrc	r21, 7
    4728:	07 d0       	rcall	.+14     	; 0x4738 <__divmodsi4_neg2>
    472a:	0e 94 08 22 	call	0x4410	; 0x4410 <__udivmodsi4>
    472e:	07 fc       	sbrc	r0, 7
    4730:	03 d0       	rcall	.+6      	; 0x4738 <__divmodsi4_neg2>
    4732:	4e f4       	brtc	.+18     	; 0x4746 <__divmodsi4_exit>
    4734:	0c 94 f7 26 	jmp	0x4dee	; 0x4dee <__negsi2>

00004738 <__divmodsi4_neg2>:
    4738:	50 95       	com	r21
    473a:	40 95       	com	r20
    473c:	30 95       	com	r19
    473e:	21 95       	neg	r18
    4740:	3f 4f       	sbci	r19, 0xFF	; 255
    4742:	4f 4f       	sbci	r20, 0xFF	; 255
    4744:	5f 4f       	sbci	r21, 0xFF	; 255

00004746 <__divmodsi4_exit>:
    4746:	08 95       	ret

Disassembly of section .text.libgcc.div:

00004dee <__negsi2>:
    4dee:	90 95       	com	r25
    4df0:	80 95       	com	r24
    4df2:	70 95       	com	r23
    4df4:	61 95       	neg	r22
    4df6:	7f 4f       	sbci	r23, 0xFF	; 255
    4df8:	8f 4f       	sbci	r24, 0xFF	; 255
    4dfa:	9f 4f       	sbci	r25, 0xFF	; 255
    4dfc:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00004c48 <__umulhisi3>:
    4c48:	a2 9f       	mul	r26, r18
    4c4a:	b0 01       	movw	r22, r0
    4c4c:	b3 9f       	mul	r27, r19
    4c4e:	c0 01       	movw	r24, r0
    4c50:	a3 9f       	mul	r26, r19
    4c52:	70 0d       	add	r23, r0
    4c54:	81 1d       	adc	r24, r1
    4c56:	11 24       	eor	r1, r1
    4c58:	91 1d       	adc	r25, r1
    4c5a:	b2 9f       	mul	r27, r18
    4c5c:	70 0d       	add	r23, r0
    4c5e:	81 1d       	adc	r24, r1
    4c60:	11 24       	eor	r1, r1
    4c62:	91 1d       	adc	r25, r1
    4c64:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00004e48 <__usmulhisi3>:
    4e48:	0e 94 24 26 	call	0x4c48	; 0x4c48 <__umulhisi3>

00004e4c <__usmulhisi3_tail>:
    4e4c:	b7 ff       	sbrs	r27, 7
    4e4e:	08 95       	ret
    4e50:	82 1b       	sub	r24, r18
    4e52:	93 0b       	sbc	r25, r19
    4e54:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00004d44 <__muluhisi3>:
    4d44:	0e 94 24 26 	call	0x4c48	; 0x4c48 <__umulhisi3>
    4d48:	a5 9f       	mul	r26, r21
    4d4a:	90 0d       	add	r25, r0
    4d4c:	b4 9f       	mul	r27, r20
    4d4e:	90 0d       	add	r25, r0
    4d50:	a4 9f       	mul	r26, r20
    4d52:	80 0d       	add	r24, r0
    4d54:	91 1d       	adc	r25, r1
    4d56:	11 24       	eor	r1, r1
    4d58:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00004dfe <__mulshisi3>:
    4dfe:	b7 ff       	sbrs	r27, 7
    4e00:	0c 94 a2 26 	jmp	0x4d44	; 0x4d44 <__muluhisi3>

00004e04 <__mulohisi3>:
    4e04:	0e 94 a2 26 	call	0x4d44	; 0x4d44 <__muluhisi3>
    4e08:	82 1b       	sub	r24, r18
    4e0a:	93 0b       	sbc	r25, r19
    4e0c:	08 95       	ret

Disassembly of section .text.libgcc:

00004e0e <__xload_2>:
    4e0e:	57 fd       	sbrc	r21, 7
    4e10:	03 c0       	rjmp	.+6      	; 0x4e18 <__xload_2+0xa>
    4e12:	65 91       	lpm	r22, Z+
    4e14:	75 91       	lpm	r23, Z+
    4e16:	08 95       	ret
    4e18:	61 91       	ld	r22, Z+
    4e1a:	71 91       	ld	r23, Z+
    4e1c:	08 95       	ret

Disassembly of section .text.libgcc:

00004cd2 <__xload_4>:
    4cd2:	57 fd       	sbrc	r21, 7
    4cd4:	05 c0       	rjmp	.+10     	; 0x4ce0 <__xload_4+0xe>
    4cd6:	65 91       	lpm	r22, Z+
    4cd8:	75 91       	lpm	r23, Z+
    4cda:	85 91       	lpm	r24, Z+
    4cdc:	95 91       	lpm	r25, Z+
    4cde:	08 95       	ret
    4ce0:	61 91       	ld	r22, Z+
    4ce2:	71 91       	ld	r23, Z+
    4ce4:	81 91       	ld	r24, Z+
    4ce6:	91 91       	ld	r25, Z+
    4ce8:	08 95       	ret

Disassembly of section .text.libgcc:

00004cea <__adddi3_s8>:
    4cea:	00 24       	eor	r0, r0
    4cec:	a7 fd       	sbrc	r26, 7
    4cee:	00 94       	com	r0
    4cf0:	2a 0f       	add	r18, r26
    4cf2:	30 1d       	adc	r19, r0
    4cf4:	40 1d       	adc	r20, r0
    4cf6:	50 1d       	adc	r21, r0
    4cf8:	60 1d       	adc	r22, r0
    4cfa:	70 1d       	adc	r23, r0
    4cfc:	80 1d       	adc	r24, r0
    4cfe:	90 1d       	adc	r25, r0
    4d00:	08 95       	ret

Disassembly of section .text.__dummy_fini:

00004ea6 <_fini>:
    4ea6:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00004ea8 <__funcs_on_exit>:
    4ea8:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00004eaa <__simulator_exit>:
    4eaa:	08 95       	ret

Disassembly of section .text.exit:

00004d5a <exit>:
    4d5a:	ec 01       	movw	r28, r24
    4d5c:	0e 94 54 27 	call	0x4ea8	; 0x4ea8 <__funcs_on_exit>
    4d60:	0e 94 53 27 	call	0x4ea6	; 0x4ea6 <_fini>
    4d64:	ce 01       	movw	r24, r28
    4d66:	0e 94 55 27 	call	0x4eaa	; 0x4eaa <__simulator_exit>
    4d6a:	ce 01       	movw	r24, r28
    4d6c:	0e 94 50 27 	call	0x4ea0	; 0x4ea0 <_Exit>

Disassembly of section .text.memcpy:

000046e8 <memcpy>:
    46e8:	cf 92       	push	r12
    46ea:	df 92       	push	r13
    46ec:	ef 92       	push	r14
    46ee:	6a 01       	movw	r12, r20
    46f0:	e6 2e       	mov	r14, r22
    46f2:	dc 01       	movw	r26, r24
    46f4:	28 0f       	add	r18, r24
    46f6:	39 1f       	adc	r19, r25
    46f8:	a2 17       	cp	r26, r18
    46fa:	b3 07       	cpc	r27, r19
    46fc:	51 f0       	breq	.+20     	; 0x4712 <memcpy+0x2a>
    46fe:	f6 01       	movw	r30, r12
    4700:	44 91       	lpm	r20, Z
    4702:	e7 fc       	sbrc	r14, 7
    4704:	40 81       	ld	r20, Z
    4706:	4d 93       	st	X+, r20
    4708:	4f ef       	ldi	r20, 0xFF	; 255
    470a:	c4 1a       	sub	r12, r20
    470c:	d4 0a       	sbc	r13, r20
    470e:	e4 0a       	sbc	r14, r20
    4710:	f3 cf       	rjmp	.-26     	; 0x46f8 <memcpy+0x10>
    4712:	ef 90       	pop	r14
    4714:	df 90       	pop	r13
    4716:	cf 90       	pop	r12
    4718:	08 95       	ret

Disassembly of section .text.memset:

00004d96 <memset>:
    4d96:	fc 01       	movw	r30, r24
    4d98:	48 0f       	add	r20, r24
    4d9a:	59 1f       	adc	r21, r25
    4d9c:	e4 17       	cp	r30, r20
    4d9e:	f5 07       	cpc	r31, r21
    4da0:	11 f0       	breq	.+4      	; 0x4da6 <memset+0x10>
    4da2:	61 93       	st	Z+, r22
    4da4:	fb cf       	rjmp	.-10     	; 0x4d9c <memset+0x6>
    4da6:	08 95       	ret

Disassembly of section .text.gmtime:

00004e8c <gmtime>:
    4e8c:	44 e0       	ldi	r20, 0x04	; 4
    4e8e:	59 e0       	ldi	r21, 0x09	; 9
    4e90:	0e 94 8f 1e 	call	0x3d1e	; 0x3d1e <__gmtime_r>
    4e94:	08 95       	ret

Disassembly of section .text.__gmtime_r:

00003d1e <__gmtime_r>:
    3d1e:	a0 e0       	ldi	r26, 0x00	; 0
    3d20:	b0 e0       	ldi	r27, 0x00	; 0
    3d22:	e5 e9       	ldi	r30, 0x95	; 149
    3d24:	fe e1       	ldi	r31, 0x1E	; 30
    3d26:	0c 94 a8 22 	jmp	0x4550	; 0x4550 <__prologue_saves__+0xc>
    3d2a:	ea 01       	movw	r28, r20
    3d2c:	fb 01       	movw	r30, r22
    3d2e:	58 2f       	mov	r21, r24
    3d30:	0e 94 69 26 	call	0x4cd2	; 0x4cd2 <__xload_4>
    3d34:	4b 01       	movw	r8, r22
    3d36:	5c 01       	movw	r10, r24
    3d38:	c1 2c       	mov	r12, r1
    3d3a:	d1 2c       	mov	r13, r1
    3d3c:	76 01       	movw	r14, r12
    3d3e:	8e 01       	movw	r16, r28
    3d40:	9b 01       	movw	r18, r22
    3d42:	a5 01       	movw	r20, r10
    3d44:	60 e0       	ldi	r22, 0x00	; 0
    3d46:	70 e0       	ldi	r23, 0x00	; 0
    3d48:	80 e0       	ldi	r24, 0x00	; 0
    3d4a:	90 e0       	ldi	r25, 0x00	; 0
    3d4c:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <__secs_to_tm>
    3d50:	97 ff       	sbrs	r25, 7
    3d52:	09 c0       	rjmp	.+18     	; 0x3d66 <__gmtime_r+0x48>
    3d54:	8f e4       	ldi	r24, 0x4F	; 79
    3d56:	90 e0       	ldi	r25, 0x00	; 0
    3d58:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    3d5c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    3d60:	80 e0       	ldi	r24, 0x00	; 0
    3d62:	90 e0       	ldi	r25, 0x00	; 0
    3d64:	0d c0       	rjmp	.+26     	; 0x3d80 <__gmtime_r+0x62>
    3d66:	19 8a       	std	Y+17, r1	; 0x11
    3d68:	18 8a       	std	Y+16, r1	; 0x10
    3d6a:	1a 8a       	std	Y+18, r1	; 0x12
    3d6c:	1b 8a       	std	Y+19, r1	; 0x13
    3d6e:	1c 8a       	std	Y+20, r1	; 0x14
    3d70:	1d 8a       	std	Y+21, r1	; 0x15
    3d72:	8f ea       	ldi	r24, 0xAF	; 175
    3d74:	93 e0       	ldi	r25, 0x03	; 3
    3d76:	a0 e0       	ldi	r26, 0x00	; 0
    3d78:	8e 8b       	std	Y+22, r24	; 0x16
    3d7a:	9f 8b       	std	Y+23, r25	; 0x17
    3d7c:	a8 8f       	std	Y+24, r26	; 0x18
    3d7e:	ce 01       	movw	r24, r28
    3d80:	cd b7       	in	r28, 0x3d	; 61
    3d82:	de b7       	in	r29, 0x3e	; 62
    3d84:	ec e0       	ldi	r30, 0x0C	; 12
    3d86:	0c 94 df 22 	jmp	0x45be	; 0x45be <__epilogue_restores__+0xc>

Disassembly of section .text.mktime:

0000392e <mktime>:
    392e:	a9 e1       	ldi	r26, 0x19	; 25
    3930:	b0 e0       	ldi	r27, 0x00	; 0
    3932:	ed e9       	ldi	r30, 0x9D	; 157
    3934:	fc e1       	ldi	r31, 0x1C	; 28
    3936:	0c 94 a4 22 	jmp	0x4548	; 0x4548 <__prologue_saves__+0x4>
    393a:	2c 01       	movw	r4, r24
    393c:	bc 01       	movw	r22, r24
    393e:	80 e8       	ldi	r24, 0x80	; 128
    3940:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <__tm_to_secs>
    3944:	39 01       	movw	r6, r18
    3946:	4a 01       	movw	r8, r20
    3948:	59 01       	movw	r10, r18
    394a:	6a 01       	movw	r12, r20
    394c:	e1 2c       	mov	r14, r1
    394e:	f1 2c       	mov	r15, r1
    3950:	00 e0       	ldi	r16, 0x00	; 0
    3952:	10 e0       	ldi	r17, 0x00	; 0
    3954:	0e 94 e6 26 	call	0x4dcc	; 0x4dcc <__cmpdi2>
    3958:	f9 f4       	brne	.+62     	; 0x3998 <mktime+0x6a>
    395a:	1a 8a       	std	Y+18, r1	; 0x12
    395c:	19 8a       	std	Y+17, r1	; 0x11
    395e:	1b 8a       	std	Y+19, r1	; 0x13
    3960:	1c 8a       	std	Y+20, r1	; 0x14
    3962:	1d 8a       	std	Y+21, r1	; 0x15
    3964:	1e 8a       	std	Y+22, r1	; 0x16
    3966:	23 eb       	ldi	r18, 0xB3	; 179
    3968:	33 e0       	ldi	r19, 0x03	; 3
    396a:	40 e0       	ldi	r20, 0x00	; 0
    396c:	2f 8b       	std	Y+23, r18	; 0x17
    396e:	38 8f       	std	Y+24, r19	; 0x18
    3970:	49 8f       	std	Y+25, r20	; 0x19
    3972:	8e 01       	movw	r16, r28
    3974:	0f 5f       	subi	r16, 0xFF	; 255
    3976:	1f 4f       	sbci	r17, 0xFF	; 255
    3978:	93 01       	movw	r18, r6
    397a:	48 2d       	mov	r20, r8
    397c:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <__secs_to_tm>
    3980:	97 fd       	sbrc	r25, 7
    3982:	0a c0       	rjmp	.+20     	; 0x3998 <mktime+0x6a>
    3984:	89 e1       	ldi	r24, 0x19	; 25
    3986:	f8 01       	movw	r30, r16
    3988:	d2 01       	movw	r26, r4
    398a:	01 90       	ld	r0, Z+
    398c:	0d 92       	st	X+, r0
    398e:	8a 95       	dec	r24
    3990:	e1 f7       	brne	.-8      	; 0x398a <mktime+0x5c>
    3992:	b3 01       	movw	r22, r6
    3994:	c4 01       	movw	r24, r8
    3996:	0a c0       	rjmp	.+20     	; 0x39ac <mktime+0x7e>
    3998:	8f e4       	ldi	r24, 0x4F	; 79
    399a:	90 e0       	ldi	r25, 0x00	; 0
    399c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    39a0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    39a4:	6f ef       	ldi	r22, 0xFF	; 255
    39a6:	7f ef       	ldi	r23, 0xFF	; 255
    39a8:	8f ef       	ldi	r24, 0xFF	; 255
    39aa:	9f ef       	ldi	r25, 0xFF	; 255
    39ac:	69 96       	adiw	r28, 0x19	; 25
    39ae:	e0 e1       	ldi	r30, 0x10	; 16
    39b0:	0c 94 db 22 	jmp	0x45b6	; 0x45b6 <__epilogue_restores__+0x4>

Disassembly of section .text._Exit:

00004ea0 <_Exit>:
    4ea0:	0e 94 6b 00 	call	0xd6	; 0xd6 <_exit>

Disassembly of section .text.__tm_to_secs:

00001d0c <__tm_to_secs>:
    1d0c:	a5 e0       	ldi	r26, 0x05	; 5
    1d0e:	b0 e0       	ldi	r27, 0x00	; 0
    1d10:	ec e8       	ldi	r30, 0x8C	; 140
    1d12:	fe e0       	ldi	r31, 0x0E	; 14
    1d14:	0c 94 a2 22 	jmp	0x4544	; 0x4544 <__prologue_saves__>
    1d18:	3b 01       	movw	r6, r22
    1d1a:	88 2e       	mov	r8, r24
    1d1c:	a8 2f       	mov	r26, r24
    1d1e:	cb 01       	movw	r24, r22
    1d20:	0a 96       	adiw	r24, 0x0a	; 10
    1d22:	a1 1d       	adc	r26, r1
    1d24:	fc 01       	movw	r30, r24
    1d26:	5a 2f       	mov	r21, r26
    1d28:	0e 94 07 27 	call	0x4e0e	; 0x4e0e <__xload_2>
    1d2c:	5b 01       	movw	r10, r22
    1d2e:	9b 01       	movw	r18, r22
    1d30:	9b 2c       	mov	r9, r11
    1d32:	99 0c       	add	r9, r9
    1d34:	99 08       	sbc	r9, r9
    1d36:	f9 2c       	mov	r15, r9
    1d38:	b9 2d       	mov	r27, r9
    1d3a:	a9 2d       	mov	r26, r9
    1d3c:	89 2d       	mov	r24, r9
    1d3e:	99 2d       	mov	r25, r9
    1d40:	e8 2c       	mov	r14, r8
    1d42:	63 01       	movw	r12, r6
    1d44:	48 e0       	ldi	r20, 0x08	; 8
    1d46:	c4 0e       	add	r12, r20
    1d48:	d1 1c       	adc	r13, r1
    1d4a:	e1 1c       	adc	r14, r1
    1d4c:	f6 01       	movw	r30, r12
    1d4e:	5e 2d       	mov	r21, r14
    1d50:	0e 94 07 27 	call	0x4e0e	; 0x4e0e <__xload_2>
    1d54:	2b 01       	movw	r4, r22
    1d56:	6c 30       	cpi	r22, 0x0C	; 12
    1d58:	71 05       	cpc	r23, r1
    1d5a:	10 f1       	brcs	.+68     	; 0x1da0 <__tm_to_secs+0x94>
    1d5c:	cb 01       	movw	r24, r22
    1d5e:	6c e0       	ldi	r22, 0x0C	; 12
    1d60:	70 e0       	ldi	r23, 0x00	; 0
    1d62:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__divmodhi4>
    1d66:	2c 01       	movw	r4, r24
    1d68:	97 ff       	sbrs	r25, 7
    1d6a:	05 c0       	rjmp	.+10     	; 0x1d76 <__tm_to_secs+0x6a>
    1d6c:	61 50       	subi	r22, 0x01	; 1
    1d6e:	71 09       	sbc	r23, r1
    1d70:	8c e0       	ldi	r24, 0x0C	; 12
    1d72:	48 0e       	add	r4, r24
    1d74:	51 1c       	adc	r5, r1
    1d76:	97 2f       	mov	r25, r23
    1d78:	99 0f       	add	r25, r25
    1d7a:	99 0b       	sbc	r25, r25
    1d7c:	9b 01       	movw	r18, r22
    1d7e:	49 2f       	mov	r20, r25
    1d80:	59 2f       	mov	r21, r25
    1d82:	69 2f       	mov	r22, r25
    1d84:	79 2f       	mov	r23, r25
    1d86:	89 2f       	mov	r24, r25
    1d88:	c9 2c       	mov	r12, r9
    1d8a:	d9 2c       	mov	r13, r9
    1d8c:	e9 2c       	mov	r14, r9
    1d8e:	f9 2c       	mov	r15, r9
    1d90:	09 2d       	mov	r16, r9
    1d92:	19 2d       	mov	r17, r9
    1d94:	0e 94 dd 26 	call	0x4dba	; 0x4dba <__adddi3>
    1d98:	94 2e       	mov	r9, r20
    1d9a:	f5 2e       	mov	r15, r21
    1d9c:	b6 2f       	mov	r27, r22
    1d9e:	a7 2f       	mov	r26, r23
    1da0:	8e 01       	movw	r16, r28
    1da2:	0f 5f       	subi	r16, 0xFF	; 255
    1da4:	1f 4f       	sbci	r17, 0xFF	; 255
    1da6:	49 2d       	mov	r20, r9
    1da8:	5f 2d       	mov	r21, r15
    1daa:	6b 2f       	mov	r22, r27
    1dac:	7a 2f       	mov	r23, r26
    1dae:	0e 94 32 0a 	call	0x1464	; 0x1464 <__year_to_secs>
    1db2:	59 01       	movw	r10, r18
    1db4:	6a 01       	movw	r12, r20
    1db6:	7b 01       	movw	r14, r22
    1db8:	8c 01       	movw	r16, r24
    1dba:	69 81       	ldd	r22, Y+1	; 0x01
    1dbc:	7a 81       	ldd	r23, Y+2	; 0x02
    1dbe:	c2 01       	movw	r24, r4
    1dc0:	0e 94 67 22 	call	0x44ce	; 0x44ce <__month_to_secs>
    1dc4:	1b 01       	movw	r2, r22
    1dc6:	2c 01       	movw	r4, r24
    1dc8:	55 0c       	add	r5, r5
    1dca:	22 08       	sbc	r2, r2
    1dcc:	32 2c       	mov	r3, r2
    1dce:	21 01       	movw	r4, r2
    1dd0:	9b 01       	movw	r18, r22
    1dd2:	ac 01       	movw	r20, r24
    1dd4:	62 2d       	mov	r22, r2
    1dd6:	72 2d       	mov	r23, r2
    1dd8:	82 2d       	mov	r24, r2
    1dda:	92 2d       	mov	r25, r2
    1ddc:	0e 94 dd 26 	call	0x4dba	; 0x4dba <__adddi3>
    1de0:	19 01       	movw	r2, r18
    1de2:	2a 01       	movw	r4, r20
    1de4:	96 2e       	mov	r9, r22
    1de6:	7b 83       	std	Y+3, r23	; 0x03
    1de8:	8c 83       	std	Y+4, r24	; 0x04
    1dea:	9d 83       	std	Y+5, r25	; 0x05
    1dec:	a8 2d       	mov	r26, r8
    1dee:	c3 01       	movw	r24, r6
    1df0:	06 96       	adiw	r24, 0x06	; 6
    1df2:	a1 1d       	adc	r26, r1
    1df4:	fc 01       	movw	r30, r24
    1df6:	5a 2f       	mov	r21, r26
    1df8:	0e 94 07 27 	call	0x4e0e	; 0x4e0e <__xload_2>
    1dfc:	61 50       	subi	r22, 0x01	; 1
    1dfe:	71 09       	sbc	r23, r1
    1e00:	97 2f       	mov	r25, r23
    1e02:	99 0f       	add	r25, r25
    1e04:	99 0b       	sbc	r25, r25
    1e06:	30 e8       	ldi	r19, 0x80	; 128
    1e08:	a3 2e       	mov	r10, r19
    1e0a:	41 e5       	ldi	r20, 0x51	; 81
    1e0c:	b4 2e       	mov	r11, r20
    1e0e:	cc 24       	eor	r12, r12
    1e10:	c3 94       	inc	r12
    1e12:	d1 2c       	mov	r13, r1
    1e14:	e1 2c       	mov	r14, r1
    1e16:	f1 2c       	mov	r15, r1
    1e18:	00 e0       	ldi	r16, 0x00	; 0
    1e1a:	10 e0       	ldi	r17, 0x00	; 0
    1e1c:	9b 01       	movw	r18, r22
    1e1e:	49 2f       	mov	r20, r25
    1e20:	59 2f       	mov	r21, r25
    1e22:	69 2f       	mov	r22, r25
    1e24:	79 2f       	mov	r23, r25
    1e26:	89 2f       	mov	r24, r25
    1e28:	0e 94 9e 1a 	call	0x353c	; 0x353c <__muldi3>
    1e2c:	51 01       	movw	r10, r2
    1e2e:	62 01       	movw	r12, r4
    1e30:	e9 2c       	mov	r14, r9
    1e32:	fb 80       	ldd	r15, Y+3	; 0x03
    1e34:	0c 81       	ldd	r16, Y+4	; 0x04
    1e36:	1d 81       	ldd	r17, Y+5	; 0x05
    1e38:	0e 94 dd 26 	call	0x4dba	; 0x4dba <__adddi3>
    1e3c:	59 01       	movw	r10, r18
    1e3e:	6a 01       	movw	r12, r20
    1e40:	7b 01       	movw	r14, r22
    1e42:	8c 01       	movw	r16, r24
    1e44:	a8 2d       	mov	r26, r8
    1e46:	c3 01       	movw	r24, r6
    1e48:	04 96       	adiw	r24, 0x04	; 4
    1e4a:	a1 1d       	adc	r26, r1
    1e4c:	fc 01       	movw	r30, r24
    1e4e:	5a 2f       	mov	r21, r26
    1e50:	0e 94 07 27 	call	0x4e0e	; 0x4e0e <__xload_2>
    1e54:	07 2e       	mov	r0, r23
    1e56:	00 0c       	add	r0, r0
    1e58:	88 0b       	sbc	r24, r24
    1e5a:	99 0b       	sbc	r25, r25
    1e5c:	20 e1       	ldi	r18, 0x10	; 16
    1e5e:	3e e0       	ldi	r19, 0x0E	; 14
    1e60:	40 e0       	ldi	r20, 0x00	; 0
    1e62:	50 e0       	ldi	r21, 0x00	; 0
    1e64:	0e 94 33 26 	call	0x4c66	; 0x4c66 <__mulsidi3>
    1e68:	0e 94 dd 26 	call	0x4dba	; 0x4dba <__adddi3>
    1e6c:	59 01       	movw	r10, r18
    1e6e:	6a 01       	movw	r12, r20
    1e70:	7b 01       	movw	r14, r22
    1e72:	8c 01       	movw	r16, r24
    1e74:	a8 2d       	mov	r26, r8
    1e76:	c3 01       	movw	r24, r6
    1e78:	02 96       	adiw	r24, 0x02	; 2
    1e7a:	a1 1d       	adc	r26, r1
    1e7c:	fc 01       	movw	r30, r24
    1e7e:	5a 2f       	mov	r21, r26
    1e80:	0e 94 07 27 	call	0x4e0e	; 0x4e0e <__xload_2>
    1e84:	07 2e       	mov	r0, r23
    1e86:	00 0c       	add	r0, r0
    1e88:	88 0b       	sbc	r24, r24
    1e8a:	99 0b       	sbc	r25, r25
    1e8c:	2c e3       	ldi	r18, 0x3C	; 60
    1e8e:	30 e0       	ldi	r19, 0x00	; 0
    1e90:	40 e0       	ldi	r20, 0x00	; 0
    1e92:	50 e0       	ldi	r21, 0x00	; 0
    1e94:	0e 94 33 26 	call	0x4c66	; 0x4c66 <__mulsidi3>
    1e98:	0e 94 dd 26 	call	0x4dba	; 0x4dba <__adddi3>
    1e9c:	59 01       	movw	r10, r18
    1e9e:	6a 01       	movw	r12, r20
    1ea0:	7b 01       	movw	r14, r22
    1ea2:	8c 01       	movw	r16, r24
    1ea4:	f3 01       	movw	r30, r6
    1ea6:	58 2d       	mov	r21, r8
    1ea8:	0e 94 07 27 	call	0x4e0e	; 0x4e0e <__xload_2>
    1eac:	9b 01       	movw	r18, r22
    1eae:	93 2f       	mov	r25, r19
    1eb0:	99 0f       	add	r25, r25
    1eb2:	99 0b       	sbc	r25, r25
    1eb4:	49 2f       	mov	r20, r25
    1eb6:	59 2f       	mov	r21, r25
    1eb8:	69 2f       	mov	r22, r25
    1eba:	79 2f       	mov	r23, r25
    1ebc:	89 2f       	mov	r24, r25
    1ebe:	0e 94 dd 26 	call	0x4dba	; 0x4dba <__adddi3>
    1ec2:	25 96       	adiw	r28, 0x05	; 5
    1ec4:	e2 e1       	ldi	r30, 0x12	; 18
    1ec6:	0c 94 d9 22 	jmp	0x45b2	; 0x45b2 <__epilogue_restores__>

Disassembly of section .text.__year_to_secs:

00001464 <__year_to_secs>:
    1464:	ac e0       	ldi	r26, 0x0C	; 12
    1466:	b0 e0       	ldi	r27, 0x00	; 0
    1468:	e8 e3       	ldi	r30, 0x38	; 56
    146a:	fa e0       	ldi	r31, 0x0A	; 10
    146c:	0c 94 a2 22 	jmp	0x4544	; 0x4544 <__prologue_saves__>
    1470:	49 01       	movw	r8, r18
    1472:	5a 01       	movw	r10, r20
    1474:	6b 01       	movw	r12, r22
    1476:	7c 01       	movw	r14, r24
    1478:	1c 83       	std	Y+4, r17	; 0x04
    147a:	0b 83       	std	Y+3, r16	; 0x03
    147c:	2a 38       	cpi	r18, 0x8A	; 138
    147e:	31 05       	cpc	r19, r1
    1480:	41 05       	cpc	r20, r1
    1482:	51 05       	cpc	r21, r1
    1484:	61 05       	cpc	r22, r1
    1486:	71 05       	cpc	r23, r1
    1488:	81 05       	cpc	r24, r1
    148a:	91 05       	cpc	r25, r1
    148c:	11 f0       	breq	.+4      	; 0x1492 <__year_to_secs+0x2e>
    148e:	0c f0       	brlt	.+2      	; 0x1492 <__year_to_secs+0x2e>
    1490:	42 c0       	rjmp	.+132    	; 0x1516 <__year_to_secs+0xb2>
    1492:	f9 01       	movw	r30, r18
    1494:	e4 54       	subi	r30, 0x44	; 68
    1496:	f1 09       	sbc	r31, r1
    1498:	f5 95       	asr	r31
    149a:	e7 95       	ror	r30
    149c:	f5 95       	asr	r31
    149e:	e7 95       	ror	r30
    14a0:	c9 01       	movw	r24, r18
    14a2:	83 70       	andi	r24, 0x03	; 3
    14a4:	99 27       	eor	r25, r25
    14a6:	89 2b       	or	r24, r25
    14a8:	51 f4       	brne	.+20     	; 0x14be <__year_to_secs+0x5a>
    14aa:	31 97       	sbiw	r30, 0x01	; 1
    14ac:	01 15       	cp	r16, r1
    14ae:	11 05       	cpc	r17, r1
    14b0:	69 f0       	breq	.+26     	; 0x14cc <__year_to_secs+0x68>
    14b2:	81 e0       	ldi	r24, 0x01	; 1
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	d8 01       	movw	r26, r16
    14b8:	8d 93       	st	X+, r24
    14ba:	9c 93       	st	X, r25
    14bc:	07 c0       	rjmp	.+14     	; 0x14cc <__year_to_secs+0x68>
    14be:	8b 81       	ldd	r24, Y+3	; 0x03
    14c0:	9c 81       	ldd	r25, Y+4	; 0x04
    14c2:	00 97       	sbiw	r24, 0x00	; 0
    14c4:	19 f0       	breq	.+6      	; 0x14cc <__year_to_secs+0x68>
    14c6:	dc 01       	movw	r26, r24
    14c8:	1d 92       	st	X+, r1
    14ca:	1c 92       	st	X, r1
    14cc:	d9 01       	movw	r26, r18
    14ce:	a6 54       	subi	r26, 0x46	; 70
    14d0:	b1 09       	sbc	r27, r1
    14d2:	20 e8       	ldi	r18, 0x80	; 128
    14d4:	33 e3       	ldi	r19, 0x33	; 51
    14d6:	41 ee       	ldi	r20, 0xE1	; 225
    14d8:	51 e0       	ldi	r21, 0x01	; 1
    14da:	0e 94 ff 26 	call	0x4dfe	; 0x4dfe <__mulshisi3>
    14de:	6b 01       	movw	r12, r22
    14e0:	7c 01       	movw	r14, r24
    14e2:	df 01       	movw	r26, r30
    14e4:	20 e8       	ldi	r18, 0x80	; 128
    14e6:	31 e5       	ldi	r19, 0x51	; 81
    14e8:	41 e0       	ldi	r20, 0x01	; 1
    14ea:	50 e0       	ldi	r21, 0x00	; 0
    14ec:	0e 94 ff 26 	call	0x4dfe	; 0x4dfe <__mulshisi3>
    14f0:	dc 01       	movw	r26, r24
    14f2:	cb 01       	movw	r24, r22
    14f4:	8c 0d       	add	r24, r12
    14f6:	9d 1d       	adc	r25, r13
    14f8:	ae 1d       	adc	r26, r14
    14fa:	bf 1d       	adc	r27, r15
    14fc:	9c 01       	movw	r18, r24
    14fe:	ad 01       	movw	r20, r26
    1500:	6c 01       	movw	r12, r24
    1502:	7d 01       	movw	r14, r26
    1504:	ff 0c       	add	r15, r15
    1506:	cc 08       	sbc	r12, r12
    1508:	dc 2c       	mov	r13, r12
    150a:	76 01       	movw	r14, r12
    150c:	ac 2d       	mov	r26, r12
    150e:	fc 2d       	mov	r31, r12
    1510:	ec 2d       	mov	r30, r12
    1512:	9c 2d       	mov	r25, r12
    1514:	cb c0       	rjmp	.+406    	; 0x16ac <__year_to_secs+0x248>
    1516:	eb 81       	ldd	r30, Y+3	; 0x03
    1518:	fc 81       	ldd	r31, Y+4	; 0x04
    151a:	ef 2b       	or	r30, r31
    151c:	31 f4       	brne	.+12     	; 0x152a <__year_to_secs+0xc6>
    151e:	1a 82       	std	Y+2, r1	; 0x02
    1520:	19 82       	std	Y+1, r1	; 0x01
    1522:	ce 01       	movw	r24, r28
    1524:	01 96       	adiw	r24, 0x01	; 1
    1526:	9c 83       	std	Y+4, r25	; 0x04
    1528:	8b 83       	std	Y+3, r24	; 0x03
    152a:	c4 01       	movw	r24, r8
    152c:	84 56       	subi	r24, 0x64	; 100
    152e:	91 09       	sbc	r25, r1
    1530:	60 e9       	ldi	r22, 0x90	; 144
    1532:	71 e0       	ldi	r23, 0x01	; 1
    1534:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__divmodhi4>
    1538:	7e 83       	std	Y+6, r23	; 0x06
    153a:	6d 83       	std	Y+5, r22	; 0x05
    153c:	94 01       	movw	r18, r8
    153e:	a5 01       	movw	r20, r10
    1540:	b6 01       	movw	r22, r12
    1542:	c7 01       	movw	r24, r14
    1544:	ac e9       	ldi	r26, 0x9C	; 156
    1546:	0e 94 75 26 	call	0x4cea	; 0x4cea <__adddi3_s8>
    154a:	19 01       	movw	r2, r18
    154c:	2a 01       	movw	r4, r20
    154e:	3b 01       	movw	r6, r22
    1550:	8f 83       	std	Y+7, r24	; 0x07
    1552:	98 87       	std	Y+8, r25	; 0x08
    1554:	70 e9       	ldi	r23, 0x90	; 144
    1556:	a7 2e       	mov	r10, r23
    1558:	bb 24       	eor	r11, r11
    155a:	b3 94       	inc	r11
    155c:	c1 2c       	mov	r12, r1
    155e:	d1 2c       	mov	r13, r1
    1560:	e1 2c       	mov	r14, r1
    1562:	f1 2c       	mov	r15, r1
    1564:	00 e0       	ldi	r16, 0x00	; 0
    1566:	10 e0       	ldi	r17, 0x00	; 0
    1568:	91 01       	movw	r18, r2
    156a:	a2 01       	movw	r20, r4
    156c:	b3 01       	movw	r22, r6
    156e:	0e 94 92 1f 	call	0x3f24	; 0x3f24 <__moddi3>
    1572:	c9 01       	movw	r24, r18
    1574:	00 97       	sbiw	r24, 0x00	; 0
    1576:	59 f4       	brne	.+22     	; 0x158e <__year_to_secs+0x12a>
    1578:	81 e0       	ldi	r24, 0x01	; 1
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	ab 81       	ldd	r26, Y+3	; 0x03
    157e:	bc 81       	ldd	r27, Y+4	; 0x04
    1580:	8d 93       	st	X+, r24
    1582:	9c 93       	st	X, r25
    1584:	20 e0       	ldi	r18, 0x00	; 0
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	40 e0       	ldi	r20, 0x00	; 0
    158a:	50 e0       	ldi	r21, 0x00	; 0
    158c:	33 c0       	rjmp	.+102    	; 0x15f4 <__year_to_secs+0x190>
    158e:	28 3c       	cpi	r18, 0xC8	; 200
    1590:	31 05       	cpc	r19, r1
    1592:	6c f0       	brlt	.+26     	; 0x15ae <__year_to_secs+0x14a>
    1594:	2c 32       	cpi	r18, 0x2C	; 44
    1596:	31 40       	sbci	r19, 0x01	; 1
    1598:	2c f0       	brlt	.+10     	; 0x15a4 <__year_to_secs+0x140>
    159a:	8c 52       	subi	r24, 0x2C	; 44
    159c:	91 40       	sbci	r25, 0x01	; 1
    159e:	43 e0       	ldi	r20, 0x03	; 3
    15a0:	50 e0       	ldi	r21, 0x00	; 0
    15a2:	0c c0       	rjmp	.+24     	; 0x15bc <__year_to_secs+0x158>
    15a4:	88 5c       	subi	r24, 0xC8	; 200
    15a6:	91 09       	sbc	r25, r1
    15a8:	42 e0       	ldi	r20, 0x02	; 2
    15aa:	50 e0       	ldi	r21, 0x00	; 0
    15ac:	07 c0       	rjmp	.+14     	; 0x15bc <__year_to_secs+0x158>
    15ae:	24 36       	cpi	r18, 0x64	; 100
    15b0:	31 05       	cpc	r19, r1
    15b2:	6c f0       	brlt	.+26     	; 0x15ce <__year_to_secs+0x16a>
    15b4:	84 56       	subi	r24, 0x64	; 100
    15b6:	91 09       	sbc	r25, r1
    15b8:	41 e0       	ldi	r20, 0x01	; 1
    15ba:	50 e0       	ldi	r21, 0x00	; 0
    15bc:	00 97       	sbiw	r24, 0x00	; 0
    15be:	49 f4       	brne	.+18     	; 0x15d2 <__year_to_secs+0x16e>
    15c0:	eb 81       	ldd	r30, Y+3	; 0x03
    15c2:	fc 81       	ldd	r31, Y+4	; 0x04
    15c4:	11 82       	std	Z+1, r1	; 0x01
    15c6:	10 82       	st	Z, r1
    15c8:	20 e0       	ldi	r18, 0x00	; 0
    15ca:	30 e0       	ldi	r19, 0x00	; 0
    15cc:	13 c0       	rjmp	.+38     	; 0x15f4 <__year_to_secs+0x190>
    15ce:	40 e0       	ldi	r20, 0x00	; 0
    15d0:	50 e0       	ldi	r21, 0x00	; 0
    15d2:	9c 01       	movw	r18, r24
    15d4:	36 95       	lsr	r19
    15d6:	27 95       	ror	r18
    15d8:	36 95       	lsr	r19
    15da:	27 95       	ror	r18
    15dc:	83 70       	andi	r24, 0x03	; 3
    15de:	99 27       	eor	r25, r25
    15e0:	61 e0       	ldi	r22, 0x01	; 1
    15e2:	70 e0       	ldi	r23, 0x00	; 0
    15e4:	89 2b       	or	r24, r25
    15e6:	11 f0       	breq	.+4      	; 0x15ec <__year_to_secs+0x188>
    15e8:	60 e0       	ldi	r22, 0x00	; 0
    15ea:	70 e0       	ldi	r23, 0x00	; 0
    15ec:	ab 81       	ldd	r26, Y+3	; 0x03
    15ee:	bc 81       	ldd	r27, Y+4	; 0x04
    15f0:	6d 93       	st	X+, r22
    15f2:	7c 93       	st	X, r23
    15f4:	81 e6       	ldi	r24, 0x61	; 97
    15f6:	ed 81       	ldd	r30, Y+5	; 0x05
    15f8:	fe 81       	ldd	r31, Y+6	; 0x06
    15fa:	8e 9f       	mul	r24, r30
    15fc:	b0 01       	movw	r22, r0
    15fe:	8f 9f       	mul	r24, r31
    1600:	70 0d       	add	r23, r0
    1602:	11 24       	eor	r1, r1
    1604:	e8 e1       	ldi	r30, 0x18	; 24
    1606:	e4 9f       	mul	r30, r20
    1608:	c0 01       	movw	r24, r0
    160a:	e5 9f       	mul	r30, r21
    160c:	90 0d       	add	r25, r0
    160e:	11 24       	eor	r1, r1
    1610:	86 0f       	add	r24, r22
    1612:	97 1f       	adc	r25, r23
    1614:	ab 81       	ldd	r26, Y+3	; 0x03
    1616:	bc 81       	ldd	r27, Y+4	; 0x04
    1618:	4d 91       	ld	r20, X+
    161a:	5c 91       	ld	r21, X
    161c:	84 1b       	sub	r24, r20
    161e:	95 0b       	sbc	r25, r21
    1620:	82 0f       	add	r24, r18
    1622:	93 1f       	adc	r25, r19
    1624:	e9 2f       	mov	r30, r25
    1626:	ee 0f       	add	r30, r30
    1628:	ee 0b       	sbc	r30, r30
    162a:	20 e8       	ldi	r18, 0x80	; 128
    162c:	a2 2e       	mov	r10, r18
    162e:	31 e5       	ldi	r19, 0x51	; 81
    1630:	b3 2e       	mov	r11, r19
    1632:	cc 24       	eor	r12, r12
    1634:	c3 94       	inc	r12
    1636:	d1 2c       	mov	r13, r1
    1638:	e1 2c       	mov	r14, r1
    163a:	f1 2c       	mov	r15, r1
    163c:	00 e0       	ldi	r16, 0x00	; 0
    163e:	10 e0       	ldi	r17, 0x00	; 0
    1640:	9c 01       	movw	r18, r24
    1642:	4e 2f       	mov	r20, r30
    1644:	5e 2f       	mov	r21, r30
    1646:	6e 2f       	mov	r22, r30
    1648:	7e 2f       	mov	r23, r30
    164a:	8e 2f       	mov	r24, r30
    164c:	9e 2f       	mov	r25, r30
    164e:	0e 94 9e 1a 	call	0x353c	; 0x353c <__muldi3>
    1652:	92 2e       	mov	r9, r18
    1654:	83 2e       	mov	r8, r19
    1656:	4b 83       	std	Y+3, r20	; 0x03
    1658:	5d 83       	std	Y+5, r21	; 0x05
    165a:	69 87       	std	Y+9, r22	; 0x09
    165c:	7a 87       	std	Y+10, r23	; 0x0a
    165e:	8b 87       	std	Y+11, r24	; 0x0b
    1660:	9c 87       	std	Y+12, r25	; 0x0c
    1662:	43 e3       	ldi	r20, 0x33	; 51
    1664:	b4 2e       	mov	r11, r20
    1666:	51 ee       	ldi	r21, 0xE1	; 225
    1668:	c5 2e       	mov	r12, r21
    166a:	dd 24       	eor	r13, r13
    166c:	d3 94       	inc	r13
    166e:	91 01       	movw	r18, r2
    1670:	a2 01       	movw	r20, r4
    1672:	b3 01       	movw	r22, r6
    1674:	8f 81       	ldd	r24, Y+7	; 0x07
    1676:	98 85       	ldd	r25, Y+8	; 0x08
    1678:	0e 94 9e 1a 	call	0x353c	; 0x353c <__muldi3>
    167c:	59 01       	movw	r10, r18
    167e:	6a 01       	movw	r12, r20
    1680:	7b 01       	movw	r14, r22
    1682:	8c 01       	movw	r16, r24
    1684:	29 2d       	mov	r18, r9
    1686:	38 2d       	mov	r19, r8
    1688:	4b 81       	ldd	r20, Y+3	; 0x03
    168a:	5d 81       	ldd	r21, Y+5	; 0x05
    168c:	69 85       	ldd	r22, Y+9	; 0x09
    168e:	7a 85       	ldd	r23, Y+10	; 0x0a
    1690:	8b 85       	ldd	r24, Y+11	; 0x0b
    1692:	9c 85       	ldd	r25, Y+12	; 0x0c
    1694:	0e 94 dd 26 	call	0x4dba	; 0x4dba <__adddi3>
    1698:	3b 56       	subi	r19, 0x6B	; 107
    169a:	41 49       	sbci	r20, 0x91	; 145
    169c:	57 4c       	sbci	r21, 0xC7	; 199
    169e:	6f 4f       	sbci	r22, 0xFF	; 255
    16a0:	7f 4f       	sbci	r23, 0xFF	; 255
    16a2:	8f 4f       	sbci	r24, 0xFF	; 255
    16a4:	9f 4f       	sbci	r25, 0xFF	; 255
    16a6:	a6 2f       	mov	r26, r22
    16a8:	f7 2f       	mov	r31, r23
    16aa:	e8 2f       	mov	r30, r24
    16ac:	6a 2f       	mov	r22, r26
    16ae:	7f 2f       	mov	r23, r31
    16b0:	8e 2f       	mov	r24, r30
    16b2:	2c 96       	adiw	r28, 0x0c	; 12
    16b4:	e2 e1       	ldi	r30, 0x12	; 18
    16b6:	0c 94 d9 22 	jmp	0x45b2	; 0x45b2 <__epilogue_restores__>

Disassembly of section .text.__month_to_secs:

000044ce <__month_to_secs>:
    44ce:	cf 93       	push	r28
    44d0:	df 93       	push	r29
    44d2:	9c 01       	movw	r18, r24
    44d4:	eb 01       	movw	r28, r22
    44d6:	88 0f       	add	r24, r24
    44d8:	99 1f       	adc	r25, r25
    44da:	88 0f       	add	r24, r24
    44dc:	99 1f       	adc	r25, r25
    44de:	09 2e       	mov	r0, r25
    44e0:	00 0c       	add	r0, r0
    44e2:	aa 0b       	sbc	r26, r26
    44e4:	85 58       	subi	r24, 0x85	; 133
    44e6:	9d 4f       	sbci	r25, 0xFD	; 253
    44e8:	af 4f       	sbci	r26, 0xFF	; 255
    44ea:	fc 01       	movw	r30, r24
    44ec:	5a 2f       	mov	r21, r26
    44ee:	0e 94 69 26 	call	0x4cd2	; 0x4cd2 <__xload_4>
    44f2:	cd 2b       	or	r28, r29
    44f4:	39 f0       	breq	.+14     	; 0x4504 <__month_to_secs+0x36>
    44f6:	22 30       	cpi	r18, 0x02	; 2
    44f8:	31 05       	cpc	r19, r1
    44fa:	24 f0       	brlt	.+8      	; 0x4504 <__month_to_secs+0x36>
    44fc:	60 58       	subi	r22, 0x80	; 128
    44fe:	7e 4a       	sbci	r23, 0xAE	; 174
    4500:	8e 4f       	sbci	r24, 0xFE	; 254
    4502:	9f 4f       	sbci	r25, 0xFF	; 255
    4504:	df 91       	pop	r29
    4506:	cf 91       	pop	r28
    4508:	08 95       	ret

Disassembly of section .text.__secs_to_tm:

000003b8 <__secs_to_tm>:
 3b8:	a6 e1       	ldi	r26, 0x16	; 22
 3ba:	b0 e0       	ldi	r27, 0x00	; 0
 3bc:	e2 ee       	ldi	r30, 0xE2	; 226
 3be:	f1 e0       	ldi	r31, 0x01	; 1
 3c0:	0c 94 a2 22 	jmp	0x4544	; 0x4544 <__prologue_saves__>
 3c4:	79 01       	movw	r14, r18
 3c6:	d4 2e       	mov	r13, r20
 3c8:	c5 2e       	mov	r12, r21
 3ca:	b6 2f       	mov	r27, r22
 3cc:	a7 2f       	mov	r26, r23
 3ce:	f8 2f       	mov	r31, r24
 3d0:	b9 2e       	mov	r11, r25
 3d2:	40 58       	subi	r20, 0x80	; 128
 3d4:	5d 4b       	sbci	r21, 0xBD	; 189
 3d6:	6e 40       	sbci	r22, 0x0E	; 14
 3d8:	7f 4f       	sbci	r23, 0xFF	; 255
 3da:	8f 4f       	sbci	r24, 0xFF	; 255
 3dc:	9f 4f       	sbci	r25, 0xFF	; 255
 3de:	21 15       	cp	r18, r1
 3e0:	3b 47       	sbci	r19, 0x7B	; 123
 3e2:	4d 41       	sbci	r20, 0x1D	; 29
 3e4:	53 48       	sbci	r21, 0x83	; 131
 3e6:	62 4e       	sbci	r22, 0xE2	; 226
 3e8:	71 40       	sbci	r23, 0x01	; 1
 3ea:	81 05       	cpc	r24, r1
 3ec:	91 05       	cpc	r25, r1
 3ee:	11 f0       	breq	.+4      	; 0x3f4 <__secs_to_tm+0x3c>
 3f0:	08 f0       	brcs	.+2      	; 0x3f4 <__secs_to_tm+0x3c>
 3f2:	08 c2       	rjmp	.+1040   	; 0x804 <__EEPROM_REGION_LENGTH__+0x4>
 3f4:	18 8b       	std	Y+16, r17	; 0x10
 3f6:	0f 87       	std	Y+15, r16	; 0x0f
 3f8:	9b 2d       	mov	r25, r11
 3fa:	8f 2f       	mov	r24, r31
 3fc:	7a 2f       	mov	r23, r26
 3fe:	6b 2f       	mov	r22, r27
 400:	5c 2d       	mov	r21, r12
 402:	4d 2d       	mov	r20, r13
 404:	97 01       	movw	r18, r14
 406:	20 58       	subi	r18, 0x80	; 128
 408:	3d 45       	sbci	r19, 0x5D	; 93
 40a:	4c 4b       	sbci	r20, 0xBC	; 188
 40c:	58 43       	sbci	r21, 0x38	; 56
 40e:	61 09       	sbc	r22, r1
 410:	71 09       	sbc	r23, r1
 412:	81 09       	sbc	r24, r1
 414:	91 09       	sbc	r25, r1
 416:	19 01       	movw	r2, r18
 418:	4d 83       	std	Y+5, r20	; 0x05
 41a:	59 87       	std	Y+9, r21	; 0x09
 41c:	6d 87       	std	Y+13, r22	; 0x0d
 41e:	79 83       	std	Y+1, r23	; 0x01
 420:	89 8b       	std	Y+17, r24	; 0x11
 422:	9a 8b       	std	Y+18, r25	; 0x12
 424:	f0 e8       	ldi	r31, 0x80	; 128
 426:	af 2e       	mov	r10, r31
 428:	a1 e5       	ldi	r26, 0x51	; 81
 42a:	ba 2e       	mov	r11, r26
 42c:	cc 24       	eor	r12, r12
 42e:	c3 94       	inc	r12
 430:	d1 2c       	mov	r13, r1
 432:	e1 2c       	mov	r14, r1
 434:	f1 2c       	mov	r15, r1
 436:	00 e0       	ldi	r16, 0x00	; 0
 438:	10 e0       	ldi	r17, 0x00	; 0
 43a:	0e 94 94 1f 	call	0x3f28	; 0x3f28 <__divdi3>
 43e:	29 01       	movw	r4, r18
 440:	3a 01       	movw	r6, r20
 442:	4b 01       	movw	r8, r22
 444:	8e 8b       	std	Y+22, r24	; 0x16
 446:	9b 8b       	std	Y+19, r25	; 0x13
 448:	91 01       	movw	r18, r2
 44a:	4d 81       	ldd	r20, Y+5	; 0x05
 44c:	59 85       	ldd	r21, Y+9	; 0x09
 44e:	6d 85       	ldd	r22, Y+13	; 0x0d
 450:	79 81       	ldd	r23, Y+1	; 0x01
 452:	89 89       	ldd	r24, Y+17	; 0x11
 454:	9a 89       	ldd	r25, Y+18	; 0x12
 456:	0e 94 92 1f 	call	0x3f24	; 0x3f24 <__moddi3>
 45a:	2d 83       	std	Y+5, r18	; 0x05
 45c:	3e 83       	std	Y+6, r19	; 0x06
 45e:	4f 83       	std	Y+7, r20	; 0x07
 460:	58 87       	std	Y+8, r21	; 0x08
 462:	8d 81       	ldd	r24, Y+5	; 0x05
 464:	9e 81       	ldd	r25, Y+6	; 0x06
 466:	af 81       	ldd	r26, Y+7	; 0x07
 468:	b8 85       	ldd	r27, Y+8	; 0x08
 46a:	b7 ff       	sbrs	r27, 7
 46c:	15 c0       	rjmp	.+42     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
 46e:	80 58       	subi	r24, 0x80	; 128
 470:	9e 4a       	sbci	r25, 0xAE	; 174
 472:	ae 4f       	sbci	r26, 0xFE	; 254
 474:	bf 4f       	sbci	r27, 0xFF	; 255
 476:	8d 83       	std	Y+5, r24	; 0x05
 478:	9e 83       	std	Y+6, r25	; 0x06
 47a:	af 83       	std	Y+7, r26	; 0x07
 47c:	b8 87       	std	Y+8, r27	; 0x08
 47e:	92 01       	movw	r18, r4
 480:	a3 01       	movw	r20, r6
 482:	b4 01       	movw	r22, r8
 484:	8e 89       	ldd	r24, Y+22	; 0x16
 486:	9b 89       	ldd	r25, Y+19	; 0x13
 488:	af ef       	ldi	r26, 0xFF	; 255
 48a:	0e 94 75 26 	call	0x4cea	; 0x4cea <__adddi3_s8>
 48e:	29 01       	movw	r4, r18
 490:	3a 01       	movw	r6, r20
 492:	4b 01       	movw	r8, r22
 494:	8e 8b       	std	Y+22, r24	; 0x16
 496:	9b 8b       	std	Y+19, r25	; 0x13
 498:	92 01       	movw	r18, r4
 49a:	a3 01       	movw	r20, r6
 49c:	b4 01       	movw	r22, r8
 49e:	8e 89       	ldd	r24, Y+22	; 0x16
 4a0:	9b 89       	ldd	r25, Y+19	; 0x13
 4a2:	a3 e0       	ldi	r26, 0x03	; 3
 4a4:	0e 94 75 26 	call	0x4cea	; 0x4cea <__adddi3_s8>
 4a8:	e7 e0       	ldi	r30, 0x07	; 7
 4aa:	ae 2e       	mov	r10, r30
 4ac:	b1 2c       	mov	r11, r1
 4ae:	c1 2c       	mov	r12, r1
 4b0:	d1 2c       	mov	r13, r1
 4b2:	e1 2c       	mov	r14, r1
 4b4:	f1 2c       	mov	r15, r1
 4b6:	00 e0       	ldi	r16, 0x00	; 0
 4b8:	10 e0       	ldi	r17, 0x00	; 0
 4ba:	0e 94 92 1f 	call	0x3f24	; 0x3f24 <__moddi3>
 4be:	2d 87       	std	Y+13, r18	; 0x0d
 4c0:	3e 87       	std	Y+14, r19	; 0x0e
 4c2:	ad 85       	ldd	r26, Y+13	; 0x0d
 4c4:	be 85       	ldd	r27, Y+14	; 0x0e
 4c6:	b7 ff       	sbrs	r27, 7
 4c8:	03 c0       	rjmp	.+6      	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
 4ca:	17 96       	adiw	r26, 0x07	; 7
 4cc:	be 87       	std	Y+14, r27	; 0x0e
 4ce:	ad 87       	std	Y+13, r26	; 0x0d
 4d0:	51 eb       	ldi	r21, 0xB1	; 177
 4d2:	a5 2e       	mov	r10, r21
 4d4:	6a e3       	ldi	r22, 0x3A	; 58
 4d6:	b6 2e       	mov	r11, r22
 4d8:	72 e0       	ldi	r23, 0x02	; 2
 4da:	c7 2e       	mov	r12, r23
 4dc:	d1 2c       	mov	r13, r1
 4de:	e1 2c       	mov	r14, r1
 4e0:	f1 2c       	mov	r15, r1
 4e2:	00 e0       	ldi	r16, 0x00	; 0
 4e4:	10 e0       	ldi	r17, 0x00	; 0
 4e6:	92 01       	movw	r18, r4
 4e8:	a3 01       	movw	r20, r6
 4ea:	b4 01       	movw	r22, r8
 4ec:	8e 89       	ldd	r24, Y+22	; 0x16
 4ee:	9b 89       	ldd	r25, Y+19	; 0x13
 4f0:	0e 94 94 1f 	call	0x3f28	; 0x3f28 <__divdi3>
 4f4:	29 87       	std	Y+9, r18	; 0x09
 4f6:	3a 87       	std	Y+10, r19	; 0x0a
 4f8:	4b 87       	std	Y+11, r20	; 0x0b
 4fa:	5c 87       	std	Y+12, r21	; 0x0c
 4fc:	92 01       	movw	r18, r4
 4fe:	a3 01       	movw	r20, r6
 500:	b4 01       	movw	r22, r8
 502:	8e 89       	ldd	r24, Y+22	; 0x16
 504:	9b 89       	ldd	r25, Y+19	; 0x13
 506:	0e 94 92 1f 	call	0x3f24	; 0x3f24 <__moddi3>
 50a:	82 2e       	mov	r8, r18
 50c:	93 2e       	mov	r9, r19
 50e:	a4 2e       	mov	r10, r20
 510:	b5 2e       	mov	r11, r21
 512:	b7 fe       	sbrs	r11, 7
 514:	12 c0       	rjmp	.+36     	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
 516:	b1 eb       	ldi	r27, 0xB1	; 177
 518:	8b 0e       	add	r8, r27
 51a:	ba e3       	ldi	r27, 0x3A	; 58
 51c:	9b 1e       	adc	r9, r27
 51e:	b2 e0       	ldi	r27, 0x02	; 2
 520:	ab 1e       	adc	r10, r27
 522:	b1 1c       	adc	r11, r1
 524:	89 85       	ldd	r24, Y+9	; 0x09
 526:	9a 85       	ldd	r25, Y+10	; 0x0a
 528:	ab 85       	ldd	r26, Y+11	; 0x0b
 52a:	bc 85       	ldd	r27, Y+12	; 0x0c
 52c:	01 97       	sbiw	r24, 0x01	; 1
 52e:	a1 09       	sbc	r26, r1
 530:	b1 09       	sbc	r27, r1
 532:	89 87       	std	Y+9, r24	; 0x09
 534:	9a 87       	std	Y+10, r25	; 0x0a
 536:	ab 87       	std	Y+11, r26	; 0x0b
 538:	bc 87       	std	Y+12, r27	; 0x0c
 53a:	c5 01       	movw	r24, r10
 53c:	b4 01       	movw	r22, r8
 53e:	2c ea       	ldi	r18, 0xAC	; 172
 540:	3e e8       	ldi	r19, 0x8E	; 142
 542:	40 e0       	ldi	r20, 0x00	; 0
 544:	50 e0       	ldi	r21, 0x00	; 0
 546:	0e 94 8d 23 	call	0x471a	; 0x471a <__divmodsi4>
 54a:	69 01       	movw	r12, r18
 54c:	7a 01       	movw	r14, r20
 54e:	24 30       	cpi	r18, 0x04	; 4
 550:	31 05       	cpc	r19, r1
 552:	41 05       	cpc	r20, r1
 554:	51 05       	cpc	r21, r1
 556:	29 f4       	brne	.+10     	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
 558:	43 e0       	ldi	r20, 0x03	; 3
 55a:	c4 2e       	mov	r12, r20
 55c:	d1 2c       	mov	r13, r1
 55e:	e1 2c       	mov	r14, r1
 560:	f1 2c       	mov	r15, r1
 562:	a4 e5       	ldi	r26, 0x54	; 84
 564:	b1 e7       	ldi	r27, 0x71	; 113
 566:	a7 01       	movw	r20, r14
 568:	96 01       	movw	r18, r12
 56a:	0e 94 02 27 	call	0x4e04	; 0x4e04 <__mulohisi3>
 56e:	2b 01       	movw	r4, r22
 570:	3c 01       	movw	r6, r24
 572:	48 0c       	add	r4, r8
 574:	59 1c       	adc	r5, r9
 576:	6a 1c       	adc	r6, r10
 578:	7b 1c       	adc	r7, r11
 57a:	c3 01       	movw	r24, r6
 57c:	b2 01       	movw	r22, r4
 57e:	25 eb       	ldi	r18, 0xB5	; 181
 580:	35 e0       	ldi	r19, 0x05	; 5
 582:	40 e0       	ldi	r20, 0x00	; 0
 584:	50 e0       	ldi	r21, 0x00	; 0
 586:	0e 94 8d 23 	call	0x471a	; 0x471a <__divmodsi4>
 58a:	49 01       	movw	r8, r18
 58c:	5a 01       	movw	r10, r20
 58e:	29 31       	cpi	r18, 0x19	; 25
 590:	31 05       	cpc	r19, r1
 592:	41 05       	cpc	r20, r1
 594:	51 05       	cpc	r21, r1
 596:	29 f4       	brne	.+10     	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
 598:	38 e1       	ldi	r19, 0x18	; 24
 59a:	83 2e       	mov	r8, r19
 59c:	91 2c       	mov	r9, r1
 59e:	a1 2c       	mov	r10, r1
 5a0:	b1 2c       	mov	r11, r1
 5a2:	ab e4       	ldi	r26, 0x4B	; 75
 5a4:	ba ef       	ldi	r27, 0xFA	; 250
 5a6:	a5 01       	movw	r20, r10
 5a8:	94 01       	movw	r18, r8
 5aa:	0e 94 02 27 	call	0x4e04	; 0x4e04 <__mulohisi3>
 5ae:	46 0e       	add	r4, r22
 5b0:	57 1e       	adc	r5, r23
 5b2:	68 1e       	adc	r6, r24
 5b4:	79 1e       	adc	r7, r25
 5b6:	c3 01       	movw	r24, r6
 5b8:	b2 01       	movw	r22, r4
 5ba:	2d e6       	ldi	r18, 0x6D	; 109
 5bc:	31 e0       	ldi	r19, 0x01	; 1
 5be:	40 e0       	ldi	r20, 0x00	; 0
 5c0:	50 e0       	ldi	r21, 0x00	; 0
 5c2:	0e 94 8d 23 	call	0x471a	; 0x471a <__divmodsi4>
 5c6:	29 83       	std	Y+1, r18	; 0x01
 5c8:	3a 83       	std	Y+2, r19	; 0x02
 5ca:	4b 83       	std	Y+3, r20	; 0x03
 5cc:	5c 83       	std	Y+4, r21	; 0x04
 5ce:	24 30       	cpi	r18, 0x04	; 4
 5d0:	31 05       	cpc	r19, r1
 5d2:	41 05       	cpc	r20, r1
 5d4:	51 05       	cpc	r21, r1
 5d6:	41 f4       	brne	.+16     	; 0x5e8 <__LOCK_REGION_LENGTH__+0x1e8>
 5d8:	83 e0       	ldi	r24, 0x03	; 3
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	a0 e0       	ldi	r26, 0x00	; 0
 5de:	b0 e0       	ldi	r27, 0x00	; 0
 5e0:	89 83       	std	Y+1, r24	; 0x01
 5e2:	9a 83       	std	Y+2, r25	; 0x02
 5e4:	ab 83       	std	Y+3, r26	; 0x03
 5e6:	bc 83       	std	Y+4, r27	; 0x04
 5e8:	a3 e9       	ldi	r26, 0x93	; 147
 5ea:	be ef       	ldi	r27, 0xFE	; 254
 5ec:	29 81       	ldd	r18, Y+1	; 0x01
 5ee:	3a 81       	ldd	r19, Y+2	; 0x02
 5f0:	4b 81       	ldd	r20, Y+3	; 0x03
 5f2:	5c 81       	ldd	r21, Y+4	; 0x04
 5f4:	0e 94 02 27 	call	0x4e04	; 0x4e04 <__mulohisi3>
 5f8:	46 0e       	add	r4, r22
 5fa:	57 1e       	adc	r5, r23
 5fc:	68 1e       	adc	r6, r24
 5fe:	79 1e       	adc	r7, r25
 600:	23 2b       	or	r18, r19
 602:	24 2b       	or	r18, r20
 604:	25 2b       	or	r18, r21
 606:	81 f4       	brne	.+32     	; 0x628 <__LOCK_REGION_LENGTH__+0x228>
 608:	81 14       	cp	r8, r1
 60a:	91 04       	cpc	r9, r1
 60c:	a1 04       	cpc	r10, r1
 60e:	b1 04       	cpc	r11, r1
 610:	71 f4       	brne	.+28     	; 0x62e <__LOCK_REGION_LENGTH__+0x22e>
 612:	31 e0       	ldi	r19, 0x01	; 1
 614:	20 e0       	ldi	r18, 0x00	; 0
 616:	c1 14       	cp	r12, r1
 618:	d1 04       	cpc	r13, r1
 61a:	e1 04       	cpc	r14, r1
 61c:	f1 04       	cpc	r15, r1
 61e:	09 f0       	breq	.+2      	; 0x622 <__LOCK_REGION_LENGTH__+0x222>
 620:	30 e0       	ldi	r19, 0x00	; 0
 622:	83 2f       	mov	r24, r19
 624:	92 2f       	mov	r25, r18
 626:	05 c0       	rjmp	.+10     	; 0x632 <__LOCK_REGION_LENGTH__+0x232>
 628:	80 e0       	ldi	r24, 0x00	; 0
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	02 c0       	rjmp	.+4      	; 0x632 <__LOCK_REGION_LENGTH__+0x232>
 62e:	81 e0       	ldi	r24, 0x01	; 1
 630:	90 e0       	ldi	r25, 0x00	; 0
 632:	12 01       	movw	r2, r4
 634:	ab e3       	ldi	r26, 0x3B	; 59
 636:	2a 0e       	add	r2, r26
 638:	31 1c       	adc	r3, r1
 63a:	28 0e       	add	r2, r24
 63c:	39 1e       	adc	r3, r25
 63e:	9c 01       	movw	r18, r24
 640:	24 59       	subi	r18, 0x94	; 148
 642:	3e 4f       	sbci	r19, 0xFE	; 254
 644:	22 15       	cp	r18, r2
 646:	33 05       	cpc	r19, r3
 648:	24 f4       	brge	.+8      	; 0x652 <__LOCK_REGION_LENGTH__+0x252>
 64a:	83 59       	subi	r24, 0x93	; 147
 64c:	9e 4f       	sbci	r25, 0xFE	; 254
 64e:	28 1a       	sub	r2, r24
 650:	39 0a       	sbc	r3, r25
 652:	92 e0       	ldi	r25, 0x02	; 2
 654:	88 0c       	add	r8, r8
 656:	99 1c       	adc	r9, r9
 658:	aa 1c       	adc	r10, r10
 65a:	bb 1c       	adc	r11, r11
 65c:	9a 95       	dec	r25
 65e:	d1 f7       	brne	.-12     	; 0x654 <__LOCK_REGION_LENGTH__+0x254>
 660:	89 81       	ldd	r24, Y+1	; 0x01
 662:	9a 81       	ldd	r25, Y+2	; 0x02
 664:	ab 81       	ldd	r26, Y+3	; 0x03
 666:	bc 81       	ldd	r27, Y+4	; 0x04
 668:	88 0e       	add	r8, r24
 66a:	99 1e       	adc	r9, r25
 66c:	aa 1e       	adc	r10, r26
 66e:	bb 1e       	adc	r11, r27
 670:	a4 e6       	ldi	r26, 0x64	; 100
 672:	b0 e0       	ldi	r27, 0x00	; 0
 674:	a7 01       	movw	r20, r14
 676:	96 01       	movw	r18, r12
 678:	0e 94 a2 26 	call	0x4d44	; 0x4d44 <__muluhisi3>
 67c:	86 0e       	add	r8, r22
 67e:	97 1e       	adc	r9, r23
 680:	a8 1e       	adc	r10, r24
 682:	b9 1e       	adc	r11, r25
 684:	d5 01       	movw	r26, r10
 686:	c4 01       	movw	r24, r8
 688:	bb 0f       	add	r27, r27
 68a:	88 0b       	sbc	r24, r24
 68c:	98 2f       	mov	r25, r24
 68e:	dc 01       	movw	r26, r24
 690:	89 83       	std	Y+1, r24	; 0x01
 692:	9a 83       	std	Y+2, r25	; 0x02
 694:	ab 83       	std	Y+3, r26	; 0x03
 696:	bc 83       	std	Y+4, r27	; 0x04
 698:	69 85       	ldd	r22, Y+9	; 0x09
 69a:	7a 85       	ldd	r23, Y+10	; 0x0a
 69c:	8b 85       	ldd	r24, Y+11	; 0x0b
 69e:	9c 85       	ldd	r25, Y+12	; 0x0c
 6a0:	20 e9       	ldi	r18, 0x90	; 144
 6a2:	31 e0       	ldi	r19, 0x01	; 1
 6a4:	40 e0       	ldi	r20, 0x00	; 0
 6a6:	50 e0       	ldi	r21, 0x00	; 0
 6a8:	0e 94 33 26 	call	0x4c66	; 0x4c66 <__mulsidi3>
 6ac:	f2 2f       	mov	r31, r18
 6ae:	e3 2f       	mov	r30, r19
 6b0:	6a 01       	movw	r12, r20
 6b2:	7b 01       	movw	r14, r22
 6b4:	8c 01       	movw	r16, r24
 6b6:	94 01       	movw	r18, r8
 6b8:	a5 01       	movw	r20, r10
 6ba:	69 81       	ldd	r22, Y+1	; 0x01
 6bc:	76 2f       	mov	r23, r22
 6be:	86 2f       	mov	r24, r22
 6c0:	96 2f       	mov	r25, r22
 6c2:	af 2e       	mov	r10, r31
 6c4:	be 2e       	mov	r11, r30
 6c6:	0e 94 dd 26 	call	0x4dba	; 0x4dba <__adddi3>
 6ca:	49 01       	movw	r8, r18
 6cc:	5a 01       	movw	r10, r20
 6ce:	6b 01       	movw	r12, r22
 6d0:	7c 01       	movw	r14, r24
 6d2:	25 e3       	ldi	r18, 0x35	; 53
 6d4:	33 e0       	ldi	r19, 0x03	; 3
 6d6:	40 e0       	ldi	r20, 0x00	; 0
 6d8:	1a 82       	std	Y+2, r1	; 0x02
 6da:	19 82       	std	Y+1, r1	; 0x01
 6dc:	f9 01       	movw	r30, r18
 6de:	84 91       	lpm	r24, Z
 6e0:	47 fd       	sbrc	r20, 7
 6e2:	80 81       	ld	r24, Z
 6e4:	08 2e       	mov	r0, r24
 6e6:	00 0c       	add	r0, r0
 6e8:	99 0b       	sbc	r25, r25
 6ea:	aa 0b       	sbc	r26, r26
 6ec:	bb 0b       	sbc	r27, r27
 6ee:	2f 5f       	subi	r18, 0xFF	; 255
 6f0:	3f 4f       	sbci	r19, 0xFF	; 255
 6f2:	4f 4f       	sbci	r20, 0xFF	; 255
 6f4:	48 16       	cp	r4, r24
 6f6:	59 06       	cpc	r5, r25
 6f8:	6a 06       	cpc	r6, r26
 6fa:	7b 06       	cpc	r7, r27
 6fc:	54 f0       	brlt	.+20     	; 0x712 <__LOCK_REGION_LENGTH__+0x312>
 6fe:	48 1a       	sub	r4, r24
 700:	59 0a       	sbc	r5, r25
 702:	6a 0a       	sbc	r6, r26
 704:	7b 0a       	sbc	r7, r27
 706:	a9 81       	ldd	r26, Y+1	; 0x01
 708:	ba 81       	ldd	r27, Y+2	; 0x02
 70a:	11 96       	adiw	r26, 0x01	; 1
 70c:	ba 83       	std	Y+2, r27	; 0x02
 70e:	a9 83       	std	Y+1, r26	; 0x01
 710:	e5 cf       	rjmp	.-54     	; 0x6dc <__LOCK_REGION_LENGTH__+0x2dc>
 712:	e9 81       	ldd	r30, Y+1	; 0x01
 714:	fa 81       	ldd	r31, Y+2	; 0x02
 716:	ea 30       	cpi	r30, 0x0A	; 10
 718:	f1 05       	cpc	r31, r1
 71a:	74 f0       	brlt	.+28     	; 0x738 <__LOCK_REGION_LENGTH__+0x338>
 71c:	3c 97       	sbiw	r30, 0x0c	; 12
 71e:	fa 83       	std	Y+2, r31	; 0x02
 720:	e9 83       	std	Y+1, r30	; 0x01
 722:	94 01       	movw	r18, r8
 724:	a5 01       	movw	r20, r10
 726:	b6 01       	movw	r22, r12
 728:	c7 01       	movw	r24, r14
 72a:	a1 e0       	ldi	r26, 0x01	; 1
 72c:	0e 94 75 26 	call	0x4cea	; 0x4cea <__adddi3_s8>
 730:	49 01       	movw	r8, r18
 732:	5a 01       	movw	r10, r20
 734:	6b 01       	movw	r12, r22
 736:	7c 01       	movw	r14, r24
 738:	94 01       	movw	r18, r8
 73a:	a5 01       	movw	r20, r10
 73c:	b6 01       	movw	r22, r12
 73e:	c7 01       	movw	r24, r14
 740:	2c 59       	subi	r18, 0x9C	; 156
 742:	3f 47       	sbci	r19, 0x7F	; 127
 744:	4f 4f       	sbci	r20, 0xFF	; 255
 746:	5f 4f       	sbci	r21, 0xFF	; 255
 748:	6f 4f       	sbci	r22, 0xFF	; 255
 74a:	7f 4f       	sbci	r23, 0xFF	; 255
 74c:	8f 4f       	sbci	r24, 0xFF	; 255
 74e:	9f 4f       	sbci	r25, 0xFF	; 255
 750:	2f 3f       	cpi	r18, 0xFF	; 255
 752:	3f 4f       	sbci	r19, 0xFF	; 255
 754:	41 05       	cpc	r20, r1
 756:	51 05       	cpc	r21, r1
 758:	61 05       	cpc	r22, r1
 75a:	71 05       	cpc	r23, r1
 75c:	81 05       	cpc	r24, r1
 75e:	91 05       	cpc	r25, r1
 760:	11 f0       	breq	.+4      	; 0x766 <__LOCK_REGION_LENGTH__+0x366>
 762:	08 f0       	brcs	.+2      	; 0x766 <__LOCK_REGION_LENGTH__+0x366>
 764:	4f c0       	rjmp	.+158    	; 0x804 <__EEPROM_REGION_LENGTH__+0x4>
 766:	24 e6       	ldi	r18, 0x64	; 100
 768:	82 0e       	add	r8, r18
 76a:	91 1c       	adc	r9, r1
 76c:	af 85       	ldd	r26, Y+15	; 0x0f
 76e:	b8 89       	ldd	r27, Y+16	; 0x10
 770:	1b 96       	adiw	r26, 0x0b	; 11
 772:	9c 92       	st	X, r9
 774:	8e 92       	st	-X, r8
 776:	1a 97       	sbiw	r26, 0x0a	; 10
 778:	e9 81       	ldd	r30, Y+1	; 0x01
 77a:	fa 81       	ldd	r31, Y+2	; 0x02
 77c:	32 96       	adiw	r30, 0x02	; 2
 77e:	19 96       	adiw	r26, 0x09	; 9
 780:	fc 93       	st	X, r31
 782:	ee 93       	st	-X, r30
 784:	18 97       	sbiw	r26, 0x08	; 8
 786:	ff ef       	ldi	r31, 0xFF	; 255
 788:	4f 1a       	sub	r4, r31
 78a:	5f 0a       	sbc	r5, r31
 78c:	17 96       	adiw	r26, 0x07	; 7
 78e:	5c 92       	st	X, r5
 790:	4e 92       	st	-X, r4
 792:	16 97       	sbiw	r26, 0x06	; 6
 794:	8d 85       	ldd	r24, Y+13	; 0x0d
 796:	9e 85       	ldd	r25, Y+14	; 0x0e
 798:	1d 96       	adiw	r26, 0x0d	; 13
 79a:	9c 93       	st	X, r25
 79c:	8e 93       	st	-X, r24
 79e:	1c 97       	sbiw	r26, 0x0c	; 12
 7a0:	1f 96       	adiw	r26, 0x0f	; 15
 7a2:	3c 92       	st	X, r3
 7a4:	2e 92       	st	-X, r2
 7a6:	1e 97       	sbiw	r26, 0x0e	; 14
 7a8:	6d 81       	ldd	r22, Y+5	; 0x05
 7aa:	7e 81       	ldd	r23, Y+6	; 0x06
 7ac:	8f 81       	ldd	r24, Y+7	; 0x07
 7ae:	98 85       	ldd	r25, Y+8	; 0x08
 7b0:	20 e1       	ldi	r18, 0x10	; 16
 7b2:	3e e0       	ldi	r19, 0x0E	; 14
 7b4:	40 e0       	ldi	r20, 0x00	; 0
 7b6:	50 e0       	ldi	r21, 0x00	; 0
 7b8:	0e 94 8d 23 	call	0x471a	; 0x471a <__divmodsi4>
 7bc:	af 85       	ldd	r26, Y+15	; 0x0f
 7be:	b8 89       	ldd	r27, Y+16	; 0x10
 7c0:	15 96       	adiw	r26, 0x05	; 5
 7c2:	3c 93       	st	X, r19
 7c4:	2e 93       	st	-X, r18
 7c6:	14 97       	sbiw	r26, 0x04	; 4
 7c8:	8c e3       	ldi	r24, 0x3C	; 60
 7ca:	c8 2e       	mov	r12, r24
 7cc:	d1 2c       	mov	r13, r1
 7ce:	e1 2c       	mov	r14, r1
 7d0:	f1 2c       	mov	r15, r1
 7d2:	6d 81       	ldd	r22, Y+5	; 0x05
 7d4:	7e 81       	ldd	r23, Y+6	; 0x06
 7d6:	8f 81       	ldd	r24, Y+7	; 0x07
 7d8:	98 85       	ldd	r25, Y+8	; 0x08
 7da:	a7 01       	movw	r20, r14
 7dc:	96 01       	movw	r18, r12
 7de:	0e 94 8d 23 	call	0x471a	; 0x471a <__divmodsi4>
 7e2:	4b 01       	movw	r8, r22
 7e4:	5c 01       	movw	r10, r24
 7e6:	ca 01       	movw	r24, r20
 7e8:	b9 01       	movw	r22, r18
 7ea:	a7 01       	movw	r20, r14
 7ec:	96 01       	movw	r18, r12
 7ee:	0e 94 8d 23 	call	0x471a	; 0x471a <__divmodsi4>
 7f2:	ef 85       	ldd	r30, Y+15	; 0x0f
 7f4:	f8 89       	ldd	r31, Y+16	; 0x10
 7f6:	73 83       	std	Z+3, r23	; 0x03
 7f8:	62 83       	std	Z+2, r22	; 0x02
 7fa:	91 82       	std	Z+1, r9	; 0x01
 7fc:	80 82       	st	Z, r8
 7fe:	80 e0       	ldi	r24, 0x00	; 0
 800:	90 e0       	ldi	r25, 0x00	; 0
 802:	02 c0       	rjmp	.+4      	; 0x808 <__EEPROM_REGION_LENGTH__+0x8>
 804:	8f ef       	ldi	r24, 0xFF	; 255
 806:	9f ef       	ldi	r25, 0xFF	; 255
 808:	66 96       	adiw	r28, 0x16	; 22
 80a:	e2 e1       	ldi	r30, 0x12	; 18
 80c:	0c 94 d9 22 	jmp	0x45b2	; 0x45b2 <__epilogue_restores__>

Disassembly of section .text.libgcc.div:

000048c2 <__divmodhi4>:
    48c2:	97 fb       	bst	r25, 7
    48c4:	07 2e       	mov	r0, r23
    48c6:	16 f4       	brtc	.+4      	; 0x48cc <__divmodhi4+0xa>
    48c8:	00 94       	com	r0
    48ca:	07 d0       	rcall	.+14     	; 0x48da <__divmodhi4_neg1>
    48cc:	77 fd       	sbrc	r23, 7
    48ce:	09 d0       	rcall	.+18     	; 0x48e2 <__divmodhi4_neg2>
    48d0:	0e 94 4d 24 	call	0x489a	; 0x489a <__udivmodhi4>
    48d4:	07 fc       	sbrc	r0, 7
    48d6:	05 d0       	rcall	.+10     	; 0x48e2 <__divmodhi4_neg2>
    48d8:	3e f4       	brtc	.+14     	; 0x48e8 <__divmodhi4_exit>

000048da <__divmodhi4_neg1>:
    48da:	90 95       	com	r25
    48dc:	81 95       	neg	r24
    48de:	9f 4f       	sbci	r25, 0xFF	; 255
    48e0:	08 95       	ret

000048e2 <__divmodhi4_neg2>:
    48e2:	70 95       	com	r23
    48e4:	61 95       	neg	r22
    48e6:	7f 4f       	sbci	r23, 0xFF	; 255

000048e8 <__divmodhi4_exit>:
    48e8:	08 95       	ret

Disassembly of section .text.libgcc.mul:

0000353c <__muldi3>:
    353c:	df 93       	push	r29
    353e:	cf 93       	push	r28
    3540:	1f 93       	push	r17
    3542:	0f 93       	push	r16
    3544:	9a 9d       	mul	r25, r10
    3546:	f0 2d       	mov	r31, r0
    3548:	21 9f       	mul	r18, r17
    354a:	f0 0d       	add	r31, r0
    354c:	8b 9d       	mul	r24, r11
    354e:	f0 0d       	add	r31, r0
    3550:	8a 9d       	mul	r24, r10
    3552:	e0 2d       	mov	r30, r0
    3554:	f1 0d       	add	r31, r1
    3556:	03 9f       	mul	r16, r19
    3558:	f0 0d       	add	r31, r0
    355a:	02 9f       	mul	r16, r18
    355c:	e0 0d       	add	r30, r0
    355e:	f1 1d       	adc	r31, r1
    3560:	4e 9d       	mul	r20, r14
    3562:	e0 0d       	add	r30, r0
    3564:	f1 1d       	adc	r31, r1
    3566:	5e 9d       	mul	r21, r14
    3568:	f0 0d       	add	r31, r0
    356a:	4f 9d       	mul	r20, r15
    356c:	f0 0d       	add	r31, r0
    356e:	7f 93       	push	r23
    3570:	6f 93       	push	r22
    3572:	bf 92       	push	r11
    3574:	af 92       	push	r10
    3576:	5f 93       	push	r21
    3578:	4f 93       	push	r20
    357a:	d5 01       	movw	r26, r10
    357c:	0e 94 24 26 	call	0x4c48	; 0x4c48 <__umulhisi3>
    3580:	8b 01       	movw	r16, r22
    3582:	ac 01       	movw	r20, r24
    3584:	d7 01       	movw	r26, r14
    3586:	0e 94 24 26 	call	0x4c48	; 0x4c48 <__umulhisi3>
    358a:	eb 01       	movw	r28, r22
    358c:	e8 0f       	add	r30, r24
    358e:	f9 1f       	adc	r31, r25
    3590:	d6 01       	movw	r26, r12
    3592:	0e 94 d4 26 	call	0x4da8	; 0x4da8 <__muldi3_6>
    3596:	2f 91       	pop	r18
    3598:	3f 91       	pop	r19
    359a:	d6 01       	movw	r26, r12
    359c:	0e 94 24 26 	call	0x4c48	; 0x4c48 <__umulhisi3>
    35a0:	c6 0f       	add	r28, r22
    35a2:	d7 1f       	adc	r29, r23
    35a4:	e8 1f       	adc	r30, r24
    35a6:	f9 1f       	adc	r31, r25
    35a8:	af 91       	pop	r26
    35aa:	bf 91       	pop	r27
    35ac:	0e 94 d4 26 	call	0x4da8	; 0x4da8 <__muldi3_6>
    35b0:	2f 91       	pop	r18
    35b2:	3f 91       	pop	r19
    35b4:	0e 94 24 26 	call	0x4c48	; 0x4c48 <__umulhisi3>
    35b8:	c6 0f       	add	r28, r22
    35ba:	d7 1f       	adc	r29, r23
    35bc:	e8 1f       	adc	r30, r24
    35be:	f9 1f       	adc	r31, r25
    35c0:	d6 01       	movw	r26, r12
    35c2:	0e 94 24 26 	call	0x4c48	; 0x4c48 <__umulhisi3>
    35c6:	e6 0f       	add	r30, r22
    35c8:	f7 1f       	adc	r31, r23
    35ca:	98 01       	movw	r18, r16
    35cc:	be 01       	movw	r22, r28
    35ce:	cf 01       	movw	r24, r30
    35d0:	11 24       	eor	r1, r1
    35d2:	0f 91       	pop	r16
    35d4:	1f 91       	pop	r17
    35d6:	cf 91       	pop	r28
    35d8:	df 91       	pop	r29
    35da:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00004da8 <__muldi3_6>:
    4da8:	0e 94 24 26 	call	0x4c48	; 0x4c48 <__umulhisi3>
    4dac:	46 0f       	add	r20, r22
    4dae:	57 1f       	adc	r21, r23
    4db0:	c8 1f       	adc	r28, r24
    4db2:	d9 1f       	adc	r29, r25
    4db4:	08 f4       	brcc	.+2      	; 0x4db8 <__muldi3_6+0x10>
    4db6:	31 96       	adiw	r30, 0x01	; 1
    4db8:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00004c66 <__mulsidi3>:
    4c66:	97 fb       	bst	r25, 7
    4c68:	57 ff       	sbrs	r21, 7
    4c6a:	0c 94 a1 20 	jmp	0x4142	; 0x4142 <__umulsidi3_helper>
    4c6e:	9f 93       	push	r25
    4c70:	8f 93       	push	r24
    4c72:	0e 94 a1 20 	call	0x4142	; 0x4142 <__umulsidi3_helper>
    4c76:	6e 1b       	sub	r22, r30
    4c78:	7f 0b       	sbc	r23, r31
    4c7a:	af 91       	pop	r26
    4c7c:	bf 91       	pop	r27
    4c7e:	8a 0b       	sbc	r24, r26
    4c80:	9b 0b       	sbc	r25, r27
    4c82:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00004140 <__umulsidi3>:
    4140:	e8 94       	clt

00004142 <__umulsidi3_helper>:
    4142:	df 93       	push	r29
    4144:	cf 93       	push	r28
    4146:	fc 01       	movw	r30, r24
    4148:	db 01       	movw	r26, r22
    414a:	0e 94 24 26 	call	0x4c48	; 0x4c48 <__umulhisi3>
    414e:	7f 93       	push	r23
    4150:	6f 93       	push	r22
    4152:	e9 01       	movw	r28, r18
    4154:	9a 01       	movw	r18, r20
    4156:	ac 01       	movw	r20, r24
    4158:	bf 93       	push	r27
    415a:	af 93       	push	r26
    415c:	3f 93       	push	r19
    415e:	2f 93       	push	r18
    4160:	df 01       	movw	r26, r30
    4162:	0e 94 24 26 	call	0x4c48	; 0x4c48 <__umulhisi3>
    4166:	26 f4       	brtc	.+8      	; 0x4170 <__umulsidi3_helper+0x2e>
    4168:	6c 1b       	sub	r22, r28
    416a:	7d 0b       	sbc	r23, r29
    416c:	82 0b       	sbc	r24, r18
    416e:	93 0b       	sbc	r25, r19
    4170:	9e 01       	movw	r18, r28
    4172:	eb 01       	movw	r28, r22
    4174:	fc 01       	movw	r30, r24
    4176:	0e 94 d4 26 	call	0x4da8	; 0x4da8 <__muldi3_6>
    417a:	af 91       	pop	r26
    417c:	bf 91       	pop	r27
    417e:	2f 91       	pop	r18
    4180:	3f 91       	pop	r19
    4182:	0e 94 d4 26 	call	0x4da8	; 0x4da8 <__muldi3_6>
    4186:	be 01       	movw	r22, r28
    4188:	cf 01       	movw	r24, r30
    418a:	f9 01       	movw	r30, r18
    418c:	2f 91       	pop	r18
    418e:	3f 91       	pop	r19
    4190:	cf 91       	pop	r28
    4192:	df 91       	pop	r29
    4194:	08 95       	ret

Disassembly of section .text.libgcc.div:

00003f24 <__moddi3>:
    3f24:	68 94       	set
    3f26:	01 c0       	rjmp	.+2      	; 0x3f2a <__divdi3_moddi3>

00003f28 <__divdi3>:
    3f28:	e8 94       	clt

00003f2a <__divdi3_moddi3>:
    3f2a:	f9 2f       	mov	r31, r25
    3f2c:	f1 2b       	or	r31, r17
    3f2e:	12 f0       	brmi	.+4      	; 0x3f34 <__divdi3_moddi3+0xa>
    3f30:	0c 94 45 26 	jmp	0x4c8a	; 0x4c8a <__udivdi3_umoddi3>
    3f34:	a0 e0       	ldi	r26, 0x00	; 0
    3f36:	b0 e0       	ldi	r27, 0x00	; 0
    3f38:	e0 ea       	ldi	r30, 0xA0	; 160
    3f3a:	ff e1       	ldi	r31, 0x1F	; 31
    3f3c:	0c 94 a8 22 	jmp	0x4550	; 0x4550 <__prologue_saves__+0xc>
    3f40:	09 2e       	mov	r0, r25
    3f42:	05 94       	asr	r0
    3f44:	22 f4       	brpl	.+8      	; 0x3f4e <__divdi3_moddi3+0x24>
    3f46:	0e 94 14 26 	call	0x4c28	; 0x4c28 <__negdi2>
    3f4a:	11 23       	and	r17, r17
    3f4c:	92 f4       	brpl	.+36     	; 0x3f72 <__divdi3_moddi3+0x48>
    3f4e:	f0 e8       	ldi	r31, 0x80	; 128
    3f50:	0f 26       	eor	r0, r31
    3f52:	ff ef       	ldi	r31, 0xFF	; 255
    3f54:	e0 94       	com	r14
    3f56:	f0 94       	com	r15
    3f58:	00 95       	com	r16
    3f5a:	10 95       	com	r17
    3f5c:	b0 94       	com	r11
    3f5e:	c0 94       	com	r12
    3f60:	d0 94       	com	r13
    3f62:	a1 94       	neg	r10
    3f64:	bf 0a       	sbc	r11, r31
    3f66:	cf 0a       	sbc	r12, r31
    3f68:	df 0a       	sbc	r13, r31
    3f6a:	ef 0a       	sbc	r14, r31
    3f6c:	ff 0a       	sbc	r15, r31
    3f6e:	0f 0b       	sbc	r16, r31
    3f70:	1f 0b       	sbc	r17, r31
    3f72:	0e 94 4d 1a 	call	0x349a	; 0x349a <__udivmod64>
    3f76:	07 fc       	sbrc	r0, 7
    3f78:	0e 94 14 26 	call	0x4c28	; 0x4c28 <__negdi2>
    3f7c:	cd b7       	in	r28, 0x3d	; 61
    3f7e:	de b7       	in	r29, 0x3e	; 62
    3f80:	ec e0       	ldi	r30, 0x0C	; 12
    3f82:	0c 94 df 22 	jmp	0x45be	; 0x45be <__epilogue_restores__+0xc>

Disassembly of section .text.libgcc.div:

00004c84 <__umoddi3>:
    4c84:	68 94       	set
    4c86:	01 c0       	rjmp	.+2      	; 0x4c8a <__udivdi3_umoddi3>

00004c88 <__udivdi3>:
    4c88:	e8 94       	clt

00004c8a <__udivdi3_umoddi3>:
    4c8a:	8f 92       	push	r8
    4c8c:	9f 92       	push	r9
    4c8e:	cf 93       	push	r28
    4c90:	df 93       	push	r29
    4c92:	0e 94 4d 1a 	call	0x349a	; 0x349a <__udivmod64>
    4c96:	df 91       	pop	r29
    4c98:	cf 91       	pop	r28
    4c9a:	9f 90       	pop	r9
    4c9c:	8f 90       	pop	r8
    4c9e:	08 95       	ret

Disassembly of section .text.libgcc.div:

0000349a <__udivmod64>:
    349a:	88 24       	eor	r8, r8
    349c:	99 24       	eor	r9, r9
    349e:	f4 01       	movw	r30, r8
    34a0:	e4 01       	movw	r28, r8
    34a2:	b0 e4       	ldi	r27, 0x40	; 64
    34a4:	9f 93       	push	r25
    34a6:	aa 27       	eor	r26, r26
    34a8:	9a 15       	cp	r25, r10
    34aa:	8b 04       	cpc	r8, r11
    34ac:	9c 04       	cpc	r9, r12
    34ae:	ed 05       	cpc	r30, r13
    34b0:	fe 05       	cpc	r31, r14
    34b2:	cf 05       	cpc	r28, r15
    34b4:	d0 07       	cpc	r29, r16
    34b6:	a1 07       	cpc	r26, r17
    34b8:	98 f4       	brcc	.+38     	; 0x34e0 <__udivmod64+0x46>
    34ba:	ad 2f       	mov	r26, r29
    34bc:	dc 2f       	mov	r29, r28
    34be:	cf 2f       	mov	r28, r31
    34c0:	fe 2f       	mov	r31, r30
    34c2:	e9 2d       	mov	r30, r9
    34c4:	98 2c       	mov	r9, r8
    34c6:	89 2e       	mov	r8, r25
    34c8:	98 2f       	mov	r25, r24
    34ca:	87 2f       	mov	r24, r23
    34cc:	76 2f       	mov	r23, r22
    34ce:	65 2f       	mov	r22, r21
    34d0:	54 2f       	mov	r21, r20
    34d2:	43 2f       	mov	r20, r19
    34d4:	32 2f       	mov	r19, r18
    34d6:	22 27       	eor	r18, r18
    34d8:	b8 50       	subi	r27, 0x08	; 8
    34da:	31 f7       	brne	.-52     	; 0x34a8 <__udivmod64+0xe>
    34dc:	bf 91       	pop	r27
    34de:	27 c0       	rjmp	.+78     	; 0x352e <__udivmod64+0x94>
    34e0:	1b 2e       	mov	r1, r27
    34e2:	bf 91       	pop	r27
    34e4:	bb 27       	eor	r27, r27
    34e6:	22 0f       	add	r18, r18
    34e8:	33 1f       	adc	r19, r19
    34ea:	44 1f       	adc	r20, r20
    34ec:	55 1f       	adc	r21, r21
    34ee:	66 1f       	adc	r22, r22
    34f0:	77 1f       	adc	r23, r23
    34f2:	88 1f       	adc	r24, r24
    34f4:	99 1f       	adc	r25, r25
    34f6:	88 1c       	adc	r8, r8
    34f8:	99 1c       	adc	r9, r9
    34fa:	ee 1f       	adc	r30, r30
    34fc:	ff 1f       	adc	r31, r31
    34fe:	cc 1f       	adc	r28, r28
    3500:	dd 1f       	adc	r29, r29
    3502:	aa 1f       	adc	r26, r26
    3504:	bb 1f       	adc	r27, r27
    3506:	8a 14       	cp	r8, r10
    3508:	9b 04       	cpc	r9, r11
    350a:	ec 05       	cpc	r30, r12
    350c:	fd 05       	cpc	r31, r13
    350e:	ce 05       	cpc	r28, r14
    3510:	df 05       	cpc	r29, r15
    3512:	a0 07       	cpc	r26, r16
    3514:	b1 07       	cpc	r27, r17
    3516:	48 f0       	brcs	.+18     	; 0x352a <__udivmod64+0x90>
    3518:	8a 18       	sub	r8, r10
    351a:	9b 08       	sbc	r9, r11
    351c:	ec 09       	sbc	r30, r12
    351e:	fd 09       	sbc	r31, r13
    3520:	ce 09       	sbc	r28, r14
    3522:	df 09       	sbc	r29, r15
    3524:	a0 0b       	sbc	r26, r16
    3526:	b1 0b       	sbc	r27, r17
    3528:	21 60       	ori	r18, 0x01	; 1
    352a:	1a 94       	dec	r1
    352c:	e1 f6       	brne	.-72     	; 0x34e6 <__udivmod64+0x4c>
    352e:	2e f4       	brtc	.+10     	; 0x353a <__udivmod64+0xa0>
    3530:	94 01       	movw	r18, r8
    3532:	af 01       	movw	r20, r30
    3534:	be 01       	movw	r22, r28
    3536:	cd 01       	movw	r24, r26
    3538:	00 0c       	add	r0, r0
    353a:	08 95       	ret

Disassembly of section .text.libgcc:

00004c28 <__negdi2>:
    4c28:	60 95       	com	r22
    4c2a:	70 95       	com	r23
    4c2c:	80 95       	com	r24
    4c2e:	90 95       	com	r25
    4c30:	30 95       	com	r19
    4c32:	40 95       	com	r20
    4c34:	50 95       	com	r21
    4c36:	21 95       	neg	r18
    4c38:	3f 4f       	sbci	r19, 0xFF	; 255
    4c3a:	4f 4f       	sbci	r20, 0xFF	; 255
    4c3c:	5f 4f       	sbci	r21, 0xFF	; 255
    4c3e:	6f 4f       	sbci	r22, 0xFF	; 255
    4c40:	7f 4f       	sbci	r23, 0xFF	; 255
    4c42:	8f 4f       	sbci	r24, 0xFF	; 255
    4c44:	9f 4f       	sbci	r25, 0xFF	; 255
    4c46:	08 95       	ret

Disassembly of section .text.libgcc.prologue:

00004544 <__prologue_saves__>:
    4544:	2f 92       	push	r2
    4546:	3f 92       	push	r3
    4548:	4f 92       	push	r4
    454a:	5f 92       	push	r5
    454c:	6f 92       	push	r6
    454e:	7f 92       	push	r7
    4550:	8f 92       	push	r8
    4552:	9f 92       	push	r9
    4554:	af 92       	push	r10
    4556:	bf 92       	push	r11
    4558:	cf 92       	push	r12
    455a:	df 92       	push	r13
    455c:	ef 92       	push	r14
    455e:	ff 92       	push	r15
    4560:	0f 93       	push	r16
    4562:	1f 93       	push	r17
    4564:	cf 93       	push	r28
    4566:	df 93       	push	r29
    4568:	cd b7       	in	r28, 0x3d	; 61
    456a:	de b7       	in	r29, 0x3e	; 62
    456c:	ca 1b       	sub	r28, r26
    456e:	db 0b       	sbc	r29, r27
    4570:	0f b6       	in	r0, 0x3f	; 63
    4572:	f8 94       	cli
    4574:	de bf       	out	0x3e, r29	; 62
    4576:	0f be       	out	0x3f, r0	; 63
    4578:	cd bf       	out	0x3d, r28	; 61
    457a:	09 94       	ijmp

Disassembly of section .text.libgcc.prologue:

000045b2 <__epilogue_restores__>:
    45b2:	2a 88       	ldd	r2, Y+18	; 0x12
    45b4:	39 88       	ldd	r3, Y+17	; 0x11
    45b6:	48 88       	ldd	r4, Y+16	; 0x10
    45b8:	5f 84       	ldd	r5, Y+15	; 0x0f
    45ba:	6e 84       	ldd	r6, Y+14	; 0x0e
    45bc:	7d 84       	ldd	r7, Y+13	; 0x0d
    45be:	8c 84       	ldd	r8, Y+12	; 0x0c
    45c0:	9b 84       	ldd	r9, Y+11	; 0x0b
    45c2:	aa 84       	ldd	r10, Y+10	; 0x0a
    45c4:	b9 84       	ldd	r11, Y+9	; 0x09
    45c6:	c8 84       	ldd	r12, Y+8	; 0x08
    45c8:	df 80       	ldd	r13, Y+7	; 0x07
    45ca:	ee 80       	ldd	r14, Y+6	; 0x06
    45cc:	fd 80       	ldd	r15, Y+5	; 0x05
    45ce:	0c 81       	ldd	r16, Y+4	; 0x04
    45d0:	1b 81       	ldd	r17, Y+3	; 0x03
    45d2:	aa 81       	ldd	r26, Y+2	; 0x02
    45d4:	b9 81       	ldd	r27, Y+1	; 0x01
    45d6:	ce 0f       	add	r28, r30
    45d8:	d1 1d       	adc	r29, r1
    45da:	0f b6       	in	r0, 0x3f	; 63
    45dc:	f8 94       	cli
    45de:	de bf       	out	0x3e, r29	; 62
    45e0:	0f be       	out	0x3f, r0	; 63
    45e2:	cd bf       	out	0x3d, r28	; 61
    45e4:	ed 01       	movw	r28, r26
    45e6:	08 95       	ret

Disassembly of section .text.libgcc:

00004dba <__adddi3>:
    4dba:	2a 0d       	add	r18, r10
    4dbc:	3b 1d       	adc	r19, r11
    4dbe:	4c 1d       	adc	r20, r12
    4dc0:	5d 1d       	adc	r21, r13
    4dc2:	6e 1d       	adc	r22, r14
    4dc4:	7f 1d       	adc	r23, r15
    4dc6:	80 1f       	adc	r24, r16
    4dc8:	91 1f       	adc	r25, r17
    4dca:	08 95       	ret

Disassembly of section .text.libgcc:

00004dcc <__cmpdi2>:
    4dcc:	2a 15       	cp	r18, r10
    4dce:	3b 05       	cpc	r19, r11
    4dd0:	4c 05       	cpc	r20, r12
    4dd2:	5d 05       	cpc	r21, r13
    4dd4:	6e 05       	cpc	r22, r14
    4dd6:	7f 05       	cpc	r23, r15
    4dd8:	80 07       	cpc	r24, r16
    4dda:	91 07       	cpc	r25, r17
    4ddc:	08 95       	ret
