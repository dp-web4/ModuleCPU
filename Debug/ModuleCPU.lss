
ModuleCPU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00005328  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000da  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00005328  2**0
                  ALLOC
  3 .noinit       00000422  00800102  00800102  00005328  2**2
                  ALLOC
  4 .comment      0000002f  00000000  00000000  00005328  2**0
                  CONTENTS, READONLY
  5 .stack.descriptors.hdr 00000142  00000000  00000000  00005357  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000550  00000000  00000000  00005499  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00009590  00000000  00000000  000059e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001b4a  00000000  00000000  0000ef79  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003c08  00000000  00000000  00010ac3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000012c4  00000000  00000000  000146cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000729  00000000  00000000  00015990  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00004b11  00000000  00000000  000160b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000530  00000000  00000000  0001abca  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .text         00000004  00005264  00005264  00005318  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0001b0fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .text.__vector_27 000000bc  0000350a  0000350a  000035be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.ADCSetPowerOn 0000000c  0000521e  0000521e  000052d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.ADCStartConversion 0000002a  00004c10  00004c10  00004cc4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .progmemx.data 0000000b  00000341  00000341  000003f5  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 20 .text.ADCInit 0000013c  00002696  00002696  0000274a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .progmemx.data.sg_sMuxSelectList 0000000f  0000031a  0000031a  000003ce  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 22 .bss.sg_eCurrentType 00000001  00800b47  00800b47  00005328  2**0
                  ALLOC
 23 .bss.sg_eState 00000001  00800b64  00800b64  00005328  2**0
                  ALLOC
 24 .text.CANLookupCommand 00000062  00004224  00004224  000042d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .progmemx.data 0000000b  0000034c  0000034c  00000400  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 26 .text.CANMOBSet 00000212  00001bf4  00001bf4  00001ca8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.CANSendMessageInternal 00000180  00001fc4  00001fc4  00002078  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.CANMOBInterrupt 00000166  00002144  00002144  000021f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.__vector_18 0000013e  00002558  00002558  0000260c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.CANSendMessage 0000002e  00004ad8  00004ad8  00004b8c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.CANSetRXCallback 0000000a  00005236  00005236  000052ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.CANInit 0000009c  000039b8  000039b8  00003a6c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.CANCheckTxStatus 000000ac  00003680  00003680  00003734  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.CANCheckHealth 00000130  00002906  00002906  000029ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .bss.lastREC.2007 00000001  00800b65  00800b65  00005328  2**0
                  ALLOC
 36 .bss.lastTEC.2006 00000001  00800b66  00800b66  00005328  2**0
                  ALLOC
 37 .progmemx.data.sg_sRXCommandList 00000021  000002d5  000002d5  00000389  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 38 .progmemx.data.sg_sMOBModuleRequestTime 00000008  00000357  00000357  0000040b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 39 .progmemx.data.sg_sMOBModuleHardwareDetail 00000008  0000035f  0000035f  00000413  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 40 .progmemx.data.sg_sMOBModuleCellDetail 00000008  00000367  00000367  0000041b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 41 .progmemx.data.sg_sMOBModuleCellCommStat2 00000008  0000036f  0000036f  00000423  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 42 .progmemx.data.sg_sMOBModuleCellCommStat1 00000008  00000377  00000377  0000042b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 43 .progmemx.data.sg_sMOBModuleStatus3 00000008  0000037f  0000037f  00000433  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 44 .progmemx.data.sg_sMOBModuleStatus2 00000008  00000387  00000387  0000043b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 45 .progmemx.data.sg_sMOBModuleStatus1 00000008  0000038f  0000038f  00000443  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 46 .progmemx.data.sg_sMOBModuleAnnouncement 00000008  00000397  00000397  0000044b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 47 .progmemx.data.sg_sMOBGenericReceive 00000008  0000039f  0000039f  00000453  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 48 .progmemx.data.sg_sMOBDisabled 00000008  000003a7  000003a7  0000045b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 49 .bss.sg_u8TxBackoffDelay 00000001  00800b67  00800b67  00005328  2**0
                  ALLOC
 50 .bss.sg_u8TxOnlyErrorCount 00000001  00800b68  00800b68  00005328  2**0
                  ALLOC
 51 .bss.sg_u8BusOffRecoveryDelay 00000001  00800b69  00800b69  00005328  2**0
                  ALLOC
 52 .bss.sg_u16ErrorPassive 00000002  00800b45  00800b45  00005328  2**0
                  ALLOC
 53 .bss.sg_u16BusOffEvents 00000002  00800b54  00800b54  00005328  2**0
                  ALLOC
 54 .bss.sg_u16TxOkPolled 00000002  00800b56  00800b56  00005328  2**0
                  ALLOC
 55 .bss.sg_u16TxErrors 00000002  00800b58  00800b58  00005328  2**0
                  ALLOC
 56 .bss.sg_u16TxTimeouts 00000002  00800b5a  00800b5a  00005328  2**0
                  ALLOC
 57 .bss.sg_bInRetransmit 00000001  00800b6a  00800b6a  00005328  2**0
                  ALLOC
 58 .bss.sg_u8LastTXDataLen 00000001  00800b6b  00800b6b  00005328  2**0
                  ALLOC
 59 .bss.sg_u8LastTXData 00000008  00800b35  00800b35  00005328  2**0
                  ALLOC
 60 .bss.sg_eLastTXType 00000001  00800b6c  00800b6c  00005328  2**0
                  ALLOC
 61 .bss.sg_u8TransmitAttempts 00000001  00800b6d  00800b6d  00005328  2**0
                  ALLOC
 62 .bss.sg_pfRXCallback 00000002  00800b5c  00800b5c  00005328  2**0
                  ALLOC
 63 .bss.sg_u8Busy 00000001  00800b6e  00800b6e  00005328  2**0
                  ALLOC
 64 .text.DebugOut 0000000e  000051e6  000051e6  0000529a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .text.EEPROMRead 00000012  0000514c  0000514c  00005200  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 66 .text.I2CBitDelay 0000000e  000051f4  000051f4  000052a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 67 .text.I2CStart 0000002c  00004b34  00004b34  00004be8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 68 .text.I2CStop 00000026  00004cda  00004cda  00004d8e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 69 .text.I2CUnstick 0000003c  00004850  00004850  00004904  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 70 .text.I2CTxByte 0000006a  000040ec  000040ec  000041a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 71 .text.I2CRxByte 0000007a  00004006  00004006  000040ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 72 .text.I2CSetup 0000002c  00004b60  00004b60  00004c14  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 73 .text.I2CStartTransaction 00000028  00004c3a  00004c3a  00004cee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 74 .text.CellCountExpectedSet 00000148  00002410  00002410  000024c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 75 .text.SendModuleControllerStatus 00000010  000051a6  000051a6  0000525a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 76 .text.ModuleControllerStateSet 0000000a  00005240  00005240  000052f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 77 .text.ModuleControllerStateSetMax 00000016  000050cc  000050cc  00005180  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 78 .text.Check5VLoss 00000018  00005084  00005084  00005138  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 79 .text.CellDataConvertVoltage 0000005e  000042e8  000042e8  0000439c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 80 .text.CellDataConvertTemperature 00000064  000041c0  000041c0  00004274  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 81 .text.ModuleCurrentConvertReadings 00000104  00002b58  00002b58  00002c0c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 82 .text.__vector_1 00000024  00004d00  00004d00  00004db4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 83 .text.__vector_2 00000024  00004d24  00004d24  00004dd8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 84 .text.__vector_3 00000024  00004d48  00004d48  00004dfc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 85 .text.__vector_4 00000024  00004d6c  00004d6c  00004e20  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 86 .text.__vector_5 00000024  00004d90  00004d90  00004e44  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 87 .text.__vector_6 00000024  00004db4  00004db4  00004e68  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 88 .text.__vector_22 00000024  00004dd8  00004dd8  00004e8c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 89 .text.__vector_9 00000024  00004dfc  00004dfc  00004eb0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 90 .text.__vector_11 00000024  00004e20  00004e20  00004ed4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 91 .text.__vector_13 00000024  00004e44  00004e44  00004ef8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 92 .text.__vector_14 00000024  00004e68  00004e68  00004f1c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 93 .text.__vector_17 00000024  00004e8c  00004e8c  00004f40  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 94 .text.__vector_19 00000024  00004eb0  00004eb0  00004f64  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 95 .text.__vector_21 00000024  00004ed4  00004ed4  00004f88  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 96 .text.__vector_25 00000024  00004ef8  00004ef8  00004fac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 97 .text.__vector_26 00000024  00004f1c  00004f1c  00004fd0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 98 .text.__vector_29 00000024  00004f40  00004f40  00004ff4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 99 .text.__vector_30 00000024  00004f64  00004f64  00005018  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
100 .text.CurrentThresholdsGet 00000094  00003a54  00003a54  00003b08  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
101 .progmemx.data 000001a1  000000da  000000da  0000018e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
102 .text.CANReceiveCallback 00000298  000012c6  000012c6  0000137a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
103 .text.ControllerStatusMessagesSend 000004ac  000003b8  000003b8  0000046c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
104 .text.CellStringProcess 00000332  00000cbc  00000cbc  00000d70  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
105 .text.Delay   00000052  000045fc  000045fc  000046b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
106 .text.PlatformAssert 0000002c  00004b8c  00004b8c  00004c40  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
107 .text.ModuleControllerStateHandle 0000021e  000019d6  000019d6  00001a8a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
108 .text.PlatformGetRegistrationID 00000006  0000525e  0000525e  00005312  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
109 .text.SetSysclock 0000000c  0000522a  0000522a  000052de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
110 .text.ModuleControllerGetUniqueID 0000007e  00003e12  00003e12  00003ec6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
111 .text.TimerInit 00000052  0000464e  0000464e  00004702  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
112 .text.__vector_12 000000ba  000035c6  000035c6  0000367a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
113 .text.WatchdogReset 00000002  0000526c  0000526c  00005320  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
114 .text.WatchdogOff 0000001a  0000506a  0000506a  0000511e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
115 .text.__vector_28 00000052  000046a0  000046a0  00004754  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
116 .text.__vector_23 0000008a  00003ae8  00003ae8  00003b9c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
117 .text.__vector_24 0000004c  000046f2  000046f2  000047a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
118 .text.vUARTRXStart 00000016  000050e2  000050e2  00005196  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
119 .text.vUARTRXEnd 00000024  00004f88  00004f88  0000503c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
120 .text.vUARTRXData 000000a0  00003878  00003878  0000392c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
121 .text.PlatformGetSendData 00000028  00004c62  00004c62  00004d16  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
122 .text.ADCCallback 0000002c  00004bb8  00004bb8  00004c6c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
123 .text.FrameInit 00000122  00002a36  00002a36  00002aea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
124 .text.CellStringPowerStateMachine 00000088  00003bfc  00003bfc  00003cb0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
125 .text.main    000002d8  00000fee  00000fee  000010a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
126 .bss.sg_u8PCMSK1 00000001  00800b6f  00800b6f  00005328  2**0
                  ALLOC
127 .bss.sg_u8PCMSK0 00000001  00800b70  00800b70  00005328  2**0
                  ALLOC
128 .bss.sg_u8UnhandledInterruptVector 00000001  00800b71  00800b71  00005328  2**0
                  ALLOC
129 .bss.sg_u8Reason 00000001  00800b72  00800b72  00005328  2**0
                  ALLOC
130 .progmemx.data.sg_u8FractionalLookup 00000010  0000030a  0000030a  000003be  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
131 .bss.sg_u8ControllerStatusMsgCount 00000001  00800b73  00800b73  00005328  2**0
                  ALLOC
132 .bss.sg_u8CellReports 00000001  00800b74  00800b74  00005328  2**0
                  ALLOC
133 .bss.sg_u16BytesReceived 00000002  00800b5e  00800b5e  00005328  2**0
                  ALLOC
134 .bss.sg_u8CellBufferTemp 00000004  00800b48  00800b48  00005328  2**2
                  ALLOC
135 .bss.sg_u8CellBufferRX 00000001  00800b75  00800b75  00005328  2**0
                  ALLOC
136 .bss.sg_u8CellIndex 00000001  00800b76  00800b76  00005328  2**0
                  ALLOC
137 .bss.sg_u8TicksSinceLastPackControllerMessage 00000001  00800b77  00800b77  00005328  2**0
                  ALLOC
138 .bss.sg_u8CellStringPowerTimer 00000001  00800b78  00800b78  00005328  2**0
                  ALLOC
139 .bss.sg_bFrameStart 00000001  00800b79  00800b79  00005328  2**0
                  ALLOC
140 .bss.sg_u8CellFrameTimer 00000001  00800b7a  00800b7a  00005328  2**0
                  ALLOC
141 .bss.sg_bIgnoreStatusRequests 00000001  00800b7b  00800b7b  00005328  2**0
                  ALLOC
142 .bss.sg_u8AnnouncementDelayTicks 00000001  00800b7c  00800b7c  00005328  2**0
                  ALLOC
143 .bss.sg_bAnnouncementPending 00000001  00800b7d  00800b7d  00005328  2**0
                  ALLOC
144 .bss.sg_u8CurrentBufferIndex 00000001  00800b7e  00800b7e  00005328  2**0
                  ALLOC
145 .bss.sg_sCurrenBuffer 00000010  00800b15  00800b15  00005328  2**0
                  ALLOC
146 .text.IsLeapYear 00000034  000049a6  000049a6  00004a5a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
147 .text.RTCStartTransaction 00000044  0000478a  0000478a  0000483e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
148 .text.StructTMToHW 00000054  00004554  00004554  00004608  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
149 .text.HWToStructTM 0000007c  00003f0e  00003f0e  00003fc2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
150 .text.__vector_10 00000086  00003c84  00003c84  00003d38  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
151 .progmemx.data 00000014  000002f6  000002f6  000003aa  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
152 .text.RTCReadRegisters 0000007e  00003e90  00003e90  00003f44  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
153 .text.RTCReadHW 000000e2  00002f46  00002f46  00002ffa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
154 .text.RTCWriteRegisters 0000006a  00004156  00004156  0000420a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
155 .text.RTCWriteHW 000000fe  00002c5c  00002c5c  00002d10  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
156 .text.RTCSetTime 000000c6  00003382  00003382  00003436  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
157 .text.RTCInit 00000222  000017b4  000017b4  00001868  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
158 .progmemx.data.sg_u8DaysInMonths 0000000c  00000329  00000329  000003dd  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
159 .bss.sg_u64Time 00000008  00800b3d  00800b3d  00005328  2**0
                  ALLOC
160 .text.SDSetCS 00000014  00005124  00005124  000051d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
161 .text.SDPowerup 0000003a  000048c8  000048c8  0000497c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
162 .text.SDCommand 000000aa  0000372c  0000372c  000037e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
163 .text.SDGoIdle 00000022  00004fd0  00004fd0  00005084  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
164 .text.SDSendOpCondition 00000034  000049da  000049da  00004a8e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
165 .text.SDSendOpConditionArg 00000056  00004452  00004452  00004506  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
166 .text.SDWaitResponse7 0000000e  00005202  00005202  000052b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
167 .text.SDSendInterfaceCondition 00000034  00004a0e  00004a0e  00004ac2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
168 .text.SDReadOCR 00000032  00004a42  00004a42  00004af6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
169 .text.SDReadCSD 0000007c  00003f8a  00003f8a  0000403e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
170 .text.SDReceiveDataBlock 0000008a  00003b72  00003b72  00003c26  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
171 .text.SDTransmitDataBlock 000000c2  00003448  00003448  000034fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
172 .text.SDInit  00000166  000022aa  000022aa  0000235e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
173 .text.SDRead  000000d8  000031e0  000031e0  00003294  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
174 .text.SDWrite 000000dc  00003028  00003028  000030dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
175 .bss.sg_u8CSD 00000010  00800b25  00800b25  00005328  2**0
                  ALLOC
176 .bss.sg_u16BlockSize 00000002  00800b60  00800b60  00005328  2**0
                  ALLOC
177 .bss.sg_u32SDSectorCount 00000004  00800b4c  00800b4c  00005328  2**0
                  ALLOC
178 .text.SPITransaction 00000058  000043a2  000043a2  00004456  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
179 .text.SPISetBaudRate 000000ca  000032b8  000032b8  0000336c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
180 .text.SPIInit 0000002c  00004be4  00004be4  00004c98  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
181 .progmemx.data.sg_sSPIBaudRates 0000002a  000002ab  000002ab  0000035f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
182 .text.readGlobalState 0000003e  00004812  00004812  000048c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
183 .text.writeGlobalState 00000032  00004a74  00004a74  00004b28  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
184 .text.updateSessionMap 000000dc  00003104  00003104  000031b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
185 .text.STORE_Init 00000082  00003d90  00003d90  00003e44  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
186 .text.STORE_WriteFrame 000000f8  00002d5a  00002d5a  00002e0e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
187 .text.STORE_StartNewSession 00000054  000045a8  000045a8  0000465c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
188 .text.STORE_EndSession 00000058  000043fa  000043fa  000044ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
189 .bss.frameBuffer 00000400  00800524  00800524  00005328  2**2
                  ALLOC
190 .bss.currentSector 00000004  00800b50  00800b50  00005328  2**0
                  ALLOC
191 .bss.gState   000001d8  00800924  00800924  00005328  2**2
                  ALLOC
192 .text.vUARTtxDataAvailable 00000024  00004fac  00004fac  00005060  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
193 .text.vUARTtxDataGet 0000004c  0000473e  0000473e  000047f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
194 .text.vUARTRXReset 0000000a  0000524a  0000524a  000052fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
195 .text.vUARTStarttx 00000056  000044a8  000044a8  0000455c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
196 .text.__vector_8 0000005c  00004346  00004346  000043fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
197 .text.__vector_16 000000f4  00002e52  00002e52  00002f06  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
198 .text.__vector_15 00000134  000027d2  000027d2  00002886  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
199 .text.vUARTInit 00000036  0000493a  0000493a  000049ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
200 .text.vUARTInitReceive 00000014  00005138  00005138  000051ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
201 .bss.sg_bState 00000001  00800b7f  00800b7f  00005328  2**0
                  ALLOC
202 .bss.sg_u8SendData 00000002  00800b62  00800b62  00005328  2**0
                  ALLOC
203 .bss.sg_u8SendIndex 00000001  00800b80  00800b80  00005328  2**0
                  ALLOC
204 .bss.sg_bMCTxNextBit 00000001  00800b81  00800b81  00005328  2**0
                  ALLOC
205 .bss.sg_bCellReportsReuested 00000001  00800b82  00800b82  00005328  2**0
                  ALLOC
206 .bss.sg_etxState 00000001  00800b83  00800b83  00005328  2**0
                  ALLOC
207 .bss.sg_btxMoreAvailable 00000001  00800b84  00800b84  00005328  2**0
                  ALLOC
208 .bss.sg_u8txDataByte 00000001  00800b85  00800b85  00005328  2**0
                  ALLOC
209 .bss.sg_u8txBitCount 00000001  00800b86  00800b86  00005328  2**0
                  ALLOC
210 .bss.sg_bCell_mc_rxMoreData 00000001  00800b87  00800b87  00005328  2**0
                  ALLOC
211 .bss.sg_bCell_mc_rxPriorState 00000001  00800b88  00800b88  00005328  2**0
                  ALLOC
212 .bss.sg_eCell_mc_rxState 00000001  00800b89  00800b89  00005328  2**0
                  ALLOC
213 .bss.sg_u8rxDataByte 00000001  00800b8a  00800b8a  00005328  2**0
                  ALLOC
214 .bss.sg_u8Cell_mc_rxBitCount 00000001  00800b8b  00800b8b  00005328  2**0
                  ALLOC
215 .text.libgcc.div 00000028  00004c8a  00004c8a  00004d3e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
216 .text.libgcc.div 00000044  000047ce  000047ce  00004882  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
217 .text.libgcc.div 0000002e  00004b06  00004b06  00004bba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
218 .text.libgcc.div 00000010  000051b6  000051b6  0000526a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
219 .text.libgcc.mul 0000001e  00005012  00005012  000050c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
220 .text.libgcc.mul 0000000e  00005210  00005210  000052c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
221 .text.libgcc.mul 00000016  000050f8  000050f8  000051ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
222 .text.libgcc.mul 00000010  000051c6  000051c6  0000527a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
223 .text.libgcc  00000010  000051d6  000051d6  0000528a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
224 .text.libgcc  00000018  0000509c  0000509c  00005150  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
225 .text.libgcc  00000018  000050b4  000050b4  00005168  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
226 .text.__dummy_fini 00000002  0000526e  0000526e  00005322  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
227 .text.__dummy_funcs_on_exit 00000002  00005270  00005270  00005324  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
228 .text.__dummy_simulator_exit 00000002  00005272  00005272  00005326  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
229 .text.exit    00000016  0000510e  0000510e  000051c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
230 .text.memcpy  00000032  00004aa6  00004aa6  00004b5a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
231 .text.memset  00000012  0000515e  0000515e  00005212  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
232 .text.gmtime  0000000a  00005254  00005254  00005308  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
233 .bss.tm.1240  00000019  00800afc  00800afc  00005328  2**0
                  ALLOC
234 .progmemx.data 00000004  000003af  000003af  00000463  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
235 .text.__gmtime_r 0000006c  00004080  00004080  00004134  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
236 .progmemx.data 00000004  000003b3  000003b3  00000467  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
237 .text.mktime  00000086  00003d0a  00003d0a  00003dbe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
238 .text._Exit   00000004  00005268  00005268  0000531c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
239 .text.__tm_to_secs 000001be  00001e06  00001e06  00001eba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
240 .text.__year_to_secs 00000256  0000155e  0000155e  00001612  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
241 .text.__month_to_secs 0000003c  0000488c  0000488c  00004940  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
242 .progmemx.data.secs_through_month.1090 00000030  0000027b  0000027b  0000032f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
243 .text.__secs_to_tm 00000458  00000864  00000864  00000918  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
244 .progmemx.data.days_in_month.1250 0000000c  00000335  00000335  000003e9  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
245 .text.libgcc.div 00000028  00004cb2  00004cb2  00004d66  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
246 .text.libgcc.mul 000000a0  00003918  00003918  000039cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
247 .text.libgcc.mul 00000012  00005170  00005170  00005224  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
248 .text.libgcc.mul 0000001e  00005030  00005030  000050e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
249 .text.libgcc.mul 00000056  000044fe  000044fe  000045b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
250 .text.libgcc.div 00000062  00004286  00004286  0000433a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
251 .text.libgcc.div 0000001c  0000504e  0000504e  00005102  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
252 .text.libgcc.div 000000a2  000037d6  000037d6  0000388a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
253 .text.libgcc  00000020  00004ff2  00004ff2  000050a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
254 .text.libgcc.prologue 00000038  00004902  00004902  000049b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
255 .text.libgcc.prologue 00000036  00004970  00004970  00004a24  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
256 .text.libgcc  00000012  00005182  00005182  00005236  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
257 .text.libgcc  00000012  00005194  00005194  00005248  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 43 00 	jmp	0x86	; 0x86 <__ctors_end>
   4:	0c 94 80 26 	jmp	0x4d00	; 0x4d00 <__vector_1>
   8:	0c 94 92 26 	jmp	0x4d24	; 0x4d24 <__vector_2>
   c:	0c 94 a4 26 	jmp	0x4d48	; 0x4d48 <__vector_3>
  10:	0c 94 b6 26 	jmp	0x4d6c	; 0x4d6c <__vector_4>
  14:	0c 94 c8 26 	jmp	0x4d90	; 0x4d90 <__vector_5>
  18:	0c 94 da 26 	jmp	0x4db4	; 0x4db4 <__vector_6>
  1c:	0c 94 32 29 	jmp	0x5264	; 0x5264 <__bad_interrupt>
  20:	0c 94 a3 21 	jmp	0x4346	; 0x4346 <__vector_8>
  24:	0c 94 fe 26 	jmp	0x4dfc	; 0x4dfc <__vector_9>
  28:	0c 94 42 1e 	jmp	0x3c84	; 0x3c84 <__vector_10>
  2c:	0c 94 10 27 	jmp	0x4e20	; 0x4e20 <__vector_11>
  30:	0c 94 e3 1a 	jmp	0x35c6	; 0x35c6 <__vector_12>
  34:	0c 94 22 27 	jmp	0x4e44	; 0x4e44 <__vector_13>
  38:	0c 94 34 27 	jmp	0x4e68	; 0x4e68 <__vector_14>
  3c:	0c 94 e9 13 	jmp	0x27d2	; 0x27d2 <__vector_15>
  40:	0c 94 29 17 	jmp	0x2e52	; 0x2e52 <__vector_16>
  44:	0c 94 46 27 	jmp	0x4e8c	; 0x4e8c <__vector_17>
  48:	0c 94 ac 12 	jmp	0x2558	; 0x2558 <__vector_18>
  4c:	0c 94 58 27 	jmp	0x4eb0	; 0x4eb0 <__vector_19>
  50:	0c 94 32 29 	jmp	0x5264	; 0x5264 <__bad_interrupt>
  54:	0c 94 6a 27 	jmp	0x4ed4	; 0x4ed4 <__vector_21>
  58:	0c 94 ec 26 	jmp	0x4dd8	; 0x4dd8 <__vector_22>
  5c:	0c 94 74 1d 	jmp	0x3ae8	; 0x3ae8 <__vector_23>
  60:	0c 94 79 23 	jmp	0x46f2	; 0x46f2 <__vector_24>
  64:	0c 94 7c 27 	jmp	0x4ef8	; 0x4ef8 <__vector_25>
  68:	0c 94 8e 27 	jmp	0x4f1c	; 0x4f1c <__vector_26>
  6c:	0c 94 85 1a 	jmp	0x350a	; 0x350a <__vector_27>
  70:	0c 94 50 23 	jmp	0x46a0	; 0x46a0 <__vector_28>
  74:	0c 94 a0 27 	jmp	0x4f40	; 0x4f40 <__vector_29>
  78:	0c 94 b2 27 	jmp	0x4f64	; 0x4f64 <__vector_30>

0000007c <.dinit>:
  7c:	01 00       	.word	0x0001	; ????
  7e:	01 02       	muls	r16, r17
  80:	80 01       	movw	r16, r0
  82:	04 0b       	sbc	r16, r20
  84:	8c 80       	ldd	r8, Y+4	; 0x04

00000086 <__ctors_end>:
  86:	11 24       	eor	r1, r1
  88:	1f be       	out	0x3f, r1	; 63
  8a:	cf ef       	ldi	r28, 0xFF	; 255
  8c:	d0 e1       	ldi	r29, 0x10	; 16
  8e:	de bf       	out	0x3e, r29	; 62
  90:	cd bf       	out	0x3d, r28	; 61

00000092 <__do_copy_data>:
  92:	ec e7       	ldi	r30, 0x7C	; 124
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	40 e0       	ldi	r20, 0x00	; 0
  98:	17 c0       	rjmp	.+46     	; 0xc8 <__do_clear_bss+0x8>
  9a:	b5 91       	lpm	r27, Z+
  9c:	a5 91       	lpm	r26, Z+
  9e:	35 91       	lpm	r19, Z+
  a0:	25 91       	lpm	r18, Z+
  a2:	05 91       	lpm	r16, Z+
  a4:	07 fd       	sbrc	r16, 7
  a6:	0c c0       	rjmp	.+24     	; 0xc0 <__do_clear_bss>
  a8:	95 91       	lpm	r25, Z+
  aa:	85 91       	lpm	r24, Z+
  ac:	ef 01       	movw	r28, r30
  ae:	f9 2f       	mov	r31, r25
  b0:	e8 2f       	mov	r30, r24
  b2:	05 90       	lpm	r0, Z+
  b4:	0d 92       	st	X+, r0
  b6:	a2 17       	cp	r26, r18
  b8:	b3 07       	cpc	r27, r19
  ba:	d9 f7       	brne	.-10     	; 0xb2 <__do_copy_data+0x20>
  bc:	fe 01       	movw	r30, r28
  be:	04 c0       	rjmp	.+8      	; 0xc8 <__do_clear_bss+0x8>

000000c0 <__do_clear_bss>:
  c0:	1d 92       	st	X+, r1
  c2:	a2 17       	cp	r26, r18
  c4:	b3 07       	cpc	r27, r19
  c6:	e1 f7       	brne	.-8      	; 0xc0 <__do_clear_bss>
  c8:	e6 38       	cpi	r30, 0x86	; 134
  ca:	f4 07       	cpc	r31, r20
  cc:	31 f7       	brne	.-52     	; 0x9a <__do_copy_data+0x8>
  ce:	0e 94 f7 07 	call	0xfee	; 0xfee <main>
  d2:	0c 94 87 28 	jmp	0x510e	; 0x510e <exit>

000000d6 <_exit>:
  d6:	f8 94       	cli

000000d8 <__stop_program>:
  d8:	ff cf       	rjmp	.-2      	; 0xd8 <__stop_program>

Disassembly of section .text:

00005264 <__bad_interrupt>:
    5264:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.__vector_27:

0000350a <__vector_27>:

	// Disable the conversion complete interrupt
	ADCSRA &= (uint8_t)~(1 << ADIE);

	// Clear any pending interrupt	
	ADCSRA |= (1 << ADIF);
    350a:	78 94       	sei
    350c:	1f 92       	push	r1
    350e:	0f 92       	push	r0
    3510:	0f b6       	in	r0, 0x3f	; 63
    3512:	0f 92       	push	r0
    3514:	11 24       	eor	r1, r1
    3516:	2f 93       	push	r18
    3518:	3f 93       	push	r19
    351a:	4f 93       	push	r20
    351c:	5f 93       	push	r21
    351e:	6f 93       	push	r22
    3520:	7f 93       	push	r23
    3522:	8f 93       	push	r24
    3524:	9f 93       	push	r25
    3526:	af 93       	push	r26
    3528:	bf 93       	push	r27
    352a:	ef 93       	push	r30
    352c:	ff 93       	push	r31
    352e:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f0078>
    3532:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f0079>
    3536:	80 91 47 0b 	lds	r24, 0x0B47	; 0x800b47 <sg_eCurrentType>
    353a:	91 e0       	ldi	r25, 0x01	; 1
    353c:	98 0f       	add	r25, r24
    353e:	90 93 47 0b 	sts	0x0B47, r25	; 0x800b47 <sg_eCurrentType>
    3542:	95 30       	cpi	r25, 0x05	; 5
    3544:	10 f0       	brcs	.+4      	; 0x354a <__vector_27+0x40>
    3546:	10 92 47 0b 	sts	0x0B47, r1	; 0x800b47 <sg_eCurrentType>
    354a:	ac e7       	ldi	r26, 0x7C	; 124
    354c:	b0 e0       	ldi	r27, 0x00	; 0
    354e:	5c 91       	ld	r21, X
    3550:	20 91 47 0b 	lds	r18, 0x0B47	; 0x800b47 <sg_eCurrentType>
    3554:	30 e0       	ldi	r19, 0x00	; 0
    3556:	f9 01       	movw	r30, r18
    3558:	ee 0f       	add	r30, r30
    355a:	ff 1f       	adc	r31, r31
    355c:	2e 0f       	add	r18, r30
    355e:	3f 1f       	adc	r19, r31
    3560:	03 2e       	mov	r0, r19
    3562:	00 0c       	add	r0, r0
    3564:	44 0b       	sbc	r20, r20
    3566:	26 5e       	subi	r18, 0xE6	; 230
    3568:	3c 4f       	sbci	r19, 0xFC	; 252
    356a:	4f 4f       	sbci	r20, 0xFF	; 255
    356c:	f9 01       	movw	r30, r18
    356e:	94 91       	lpm	r25, Z
    3570:	47 fd       	sbrc	r20, 7
    3572:	90 81       	ld	r25, Z
    3574:	50 7e       	andi	r21, 0xE0	; 224
    3576:	95 2b       	or	r25, r21
    3578:	90 6c       	ori	r25, 0xC0	; 192
    357a:	9c 93       	st	X, r25
    357c:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <ADCCallback>
    3580:	80 91 47 0b 	lds	r24, 0x0B47	; 0x800b47 <sg_eCurrentType>
    3584:	81 11       	cpse	r24, r1
    3586:	09 c0       	rjmp	.+18     	; 0x359a <__vector_27+0x90>
    3588:	ea e7       	ldi	r30, 0x7A	; 122
    358a:	f0 e0       	ldi	r31, 0x00	; 0
    358c:	80 81       	ld	r24, Z
    358e:	87 7f       	andi	r24, 0xF7	; 247
    3590:	80 83       	st	Z, r24
    3592:	81 e0       	ldi	r24, 0x01	; 1
    3594:	80 93 64 0b 	sts	0x0B64, r24	; 0x800b64 <sg_eState>
    3598:	05 c0       	rjmp	.+10     	; 0x35a4 <__vector_27+0x9a>
    359a:	ea e7       	ldi	r30, 0x7A	; 122
    359c:	f0 e0       	ldi	r31, 0x00	; 0
    359e:	80 81       	ld	r24, Z
    35a0:	88 64       	ori	r24, 0x48	; 72
    35a2:	80 83       	st	Z, r24
    35a4:	ff 91       	pop	r31
    35a6:	ef 91       	pop	r30
    35a8:	bf 91       	pop	r27
    35aa:	af 91       	pop	r26
    35ac:	9f 91       	pop	r25
    35ae:	8f 91       	pop	r24
    35b0:	7f 91       	pop	r23
    35b2:	6f 91       	pop	r22
    35b4:	5f 91       	pop	r21
    35b6:	4f 91       	pop	r20
    35b8:	3f 91       	pop	r19
    35ba:	2f 91       	pop	r18
    35bc:	0f 90       	pop	r0
    35be:	0f be       	out	0x3f, r0	; 63
    35c0:	0f 90       	pop	r0
    35c2:	1f 90       	pop	r1
    35c4:	18 95       	reti

Disassembly of section .text.ADCSetPowerOn:

0000521e <ADCSetPowerOn>:
}

// Enable ADC
void ADCSetPowerOn( void )
{
	ADCSRA |= (1 << ADEN);
    521e:	ea e7       	ldi	r30, 0x7A	; 122
    5220:	f0 e0       	ldi	r31, 0x00	; 0
    5222:	80 81       	ld	r24, Z
    5224:	80 68       	ori	r24, 0x80	; 128
    5226:	80 83       	st	Z, r24
    5228:	08 95       	ret

Disassembly of section .text.ADCStartConversion:

00004c10 <ADCStartConversion>:
}

void ADCStartConversion(void)
{
	// Don't start anything if we're not idle
	if (EADCSTATE_IDLE != sg_eState)
    4c10:	80 91 64 0b 	lds	r24, 0x0B64	; 0x800b64 <sg_eState>
    4c14:	81 30       	cpi	r24, 0x01	; 1
    4c16:	81 f4       	brne	.+32     	; 0x4c38 <ADCStartConversion+0x28>
	{
		return;
	}
	
	// Set back to the first channel
	sg_eCurrentType = EADCTYPE_FIRST;
    4c18:	10 92 47 0b 	sts	0x0B47, r1	; 0x800b47 <sg_eCurrentType>
	
	// Set the MUX
	ADMUX = (ADMUX & MUX_MASK) | (sg_sMuxSelectList[sg_eCurrentType].u8MuxSelect) | MUX_AREF;
    4c1c:	ec e7       	ldi	r30, 0x7C	; 124
    4c1e:	f0 e0       	ldi	r31, 0x00	; 0
    4c20:	80 81       	ld	r24, Z
    4c22:	80 7e       	andi	r24, 0xE0	; 224
    4c24:	89 6c       	ori	r24, 0xC9	; 201
    4c26:	80 83       	st	Z, r24
		
	sg_eState = EADCSTATE_READING;
    4c28:	82 e0       	ldi	r24, 0x02	; 2
    4c2a:	80 93 64 0b 	sts	0x0B64, r24	; 0x800b64 <sg_eState>
	
	// Start a single conversion  - *dp run one at a time for now instead of continuous
	ADCSRA |= (1 << ADSC) | (1 << ADIE) | (1 << ADEN);  // turn power on if it isn't
    4c2e:	ea e7       	ldi	r30, 0x7A	; 122
    4c30:	f0 e0       	ldi	r31, 0x00	; 0
    4c32:	80 81       	ld	r24, Z
    4c34:	88 6c       	ori	r24, 0xC8	; 200
    4c36:	80 83       	st	Z, r24
    4c38:	08 95       	ret

Disassembly of section .text.ADCInit:

00002696 <ADCInit>:

	// Disable the conversion complete interrupt
	ADCSRA &= (uint8_t)~(1 << ADIE);

	// Clear any pending interrupt	
	ADCSRA |= (1 << ADIF);
    2696:	cf 93       	push	r28
    2698:	82 e0       	ldi	r24, 0x02	; 2
    269a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f007a>
    269e:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
    26a2:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7f0094>
    26a6:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7f0095>
    26aa:	10 92 96 00 	sts	0x0096, r1	; 0x800096 <__TEXT_REGION_LENGTH__+0x7f0096>
    26ae:	10 92 97 00 	sts	0x0097, r1	; 0x800097 <__TEXT_REGION_LENGTH__+0x7f0097>
    26b2:	80 ea       	ldi	r24, 0xA0	; 160
    26b4:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f007b>
    26b8:	c0 e0       	ldi	r28, 0x00	; 0
    26ba:	83 c0       	rjmp	.+262    	; 0x27c2 <ADCInit+0x12c>
    26bc:	2c 2f       	mov	r18, r28
    26be:	30 e0       	ldi	r19, 0x00	; 0
    26c0:	c9 01       	movw	r24, r18
    26c2:	88 0f       	add	r24, r24
    26c4:	99 1f       	adc	r25, r25
    26c6:	82 0f       	add	r24, r18
    26c8:	93 1f       	adc	r25, r19
    26ca:	01 96       	adiw	r24, 0x01	; 1
    26cc:	09 2e       	mov	r0, r25
    26ce:	00 0c       	add	r0, r0
    26d0:	aa 0b       	sbc	r26, r26
    26d2:	86 5e       	subi	r24, 0xE6	; 230
    26d4:	9c 4f       	sbci	r25, 0xFC	; 252
    26d6:	af 4f       	sbci	r26, 0xFF	; 255
    26d8:	fc 01       	movw	r30, r24
    26da:	84 91       	lpm	r24, Z
    26dc:	a7 fd       	sbrc	r26, 7
    26de:	80 81       	ld	r24, Z
    26e0:	81 30       	cpi	r24, 0x01	; 1
    26e2:	41 f0       	breq	.+16     	; 0x26f4 <ADCInit+0x5e>
    26e4:	08 f4       	brcc	.+2      	; 0x26e8 <ADCInit+0x52>
    26e6:	6c c0       	rjmp	.+216    	; 0x27c0 <ADCInit+0x12a>
    26e8:	82 30       	cpi	r24, 0x02	; 2
    26ea:	21 f1       	breq	.+72     	; 0x2734 <ADCInit+0x9e>
    26ec:	83 30       	cpi	r24, 0x03	; 3
    26ee:	09 f4       	brne	.+2      	; 0x26f2 <ADCInit+0x5c>
    26f0:	41 c0       	rjmp	.+130    	; 0x2774 <ADCInit+0xde>
    26f2:	5f c0       	rjmp	.+190    	; 0x27b2 <ADCInit+0x11c>
    26f4:	54 b1       	in	r21, 0x04	; 4
    26f6:	c9 01       	movw	r24, r18
    26f8:	88 0f       	add	r24, r24
    26fa:	99 1f       	adc	r25, r25
    26fc:	28 0f       	add	r18, r24
    26fe:	39 1f       	adc	r19, r25
    2700:	2e 5f       	subi	r18, 0xFE	; 254
    2702:	3f 4f       	sbci	r19, 0xFF	; 255
    2704:	03 2e       	mov	r0, r19
    2706:	00 0c       	add	r0, r0
    2708:	44 0b       	sbc	r20, r20
    270a:	26 5e       	subi	r18, 0xE6	; 230
    270c:	3c 4f       	sbci	r19, 0xFC	; 252
    270e:	4f 4f       	sbci	r20, 0xFF	; 255
    2710:	f9 01       	movw	r30, r18
    2712:	24 91       	lpm	r18, Z
    2714:	47 fd       	sbrc	r20, 7
    2716:	20 81       	ld	r18, Z
    2718:	81 e0       	ldi	r24, 0x01	; 1
    271a:	90 e0       	ldi	r25, 0x00	; 0
    271c:	02 c0       	rjmp	.+4      	; 0x2722 <ADCInit+0x8c>
    271e:	88 0f       	add	r24, r24
    2720:	99 1f       	adc	r25, r25
    2722:	2a 95       	dec	r18
    2724:	e2 f7       	brpl	.-8      	; 0x271e <ADCInit+0x88>
    2726:	80 95       	com	r24
    2728:	58 23       	and	r21, r24
    272a:	54 b9       	out	0x04, r21	; 4
    272c:	95 b1       	in	r25, 0x05	; 5
    272e:	89 23       	and	r24, r25
    2730:	85 b9       	out	0x05, r24	; 5
    2732:	46 c0       	rjmp	.+140    	; 0x27c0 <ADCInit+0x12a>
    2734:	57 b1       	in	r21, 0x07	; 7
    2736:	c9 01       	movw	r24, r18
    2738:	88 0f       	add	r24, r24
    273a:	99 1f       	adc	r25, r25
    273c:	28 0f       	add	r18, r24
    273e:	39 1f       	adc	r19, r25
    2740:	2e 5f       	subi	r18, 0xFE	; 254
    2742:	3f 4f       	sbci	r19, 0xFF	; 255
    2744:	03 2e       	mov	r0, r19
    2746:	00 0c       	add	r0, r0
    2748:	44 0b       	sbc	r20, r20
    274a:	26 5e       	subi	r18, 0xE6	; 230
    274c:	3c 4f       	sbci	r19, 0xFC	; 252
    274e:	4f 4f       	sbci	r20, 0xFF	; 255
    2750:	f9 01       	movw	r30, r18
    2752:	24 91       	lpm	r18, Z
    2754:	47 fd       	sbrc	r20, 7
    2756:	20 81       	ld	r18, Z
    2758:	81 e0       	ldi	r24, 0x01	; 1
    275a:	90 e0       	ldi	r25, 0x00	; 0
    275c:	02 c0       	rjmp	.+4      	; 0x2762 <ADCInit+0xcc>
    275e:	88 0f       	add	r24, r24
    2760:	99 1f       	adc	r25, r25
    2762:	2a 95       	dec	r18
    2764:	e2 f7       	brpl	.-8      	; 0x275e <ADCInit+0xc8>
    2766:	80 95       	com	r24
    2768:	58 23       	and	r21, r24
    276a:	57 b9       	out	0x07, r21	; 7
    276c:	98 b1       	in	r25, 0x08	; 8
    276e:	89 23       	and	r24, r25
    2770:	88 b9       	out	0x08, r24	; 8
    2772:	26 c0       	rjmp	.+76     	; 0x27c0 <ADCInit+0x12a>
    2774:	4a b1       	in	r20, 0x0a	; 10
    2776:	c9 01       	movw	r24, r18
    2778:	88 0f       	add	r24, r24
    277a:	99 1f       	adc	r25, r25
    277c:	82 0f       	add	r24, r18
    277e:	93 1f       	adc	r25, r19
    2780:	02 96       	adiw	r24, 0x02	; 2
    2782:	09 2e       	mov	r0, r25
    2784:	00 0c       	add	r0, r0
    2786:	aa 0b       	sbc	r26, r26
    2788:	86 5e       	subi	r24, 0xE6	; 230
    278a:	9c 4f       	sbci	r25, 0xFC	; 252
    278c:	af 4f       	sbci	r26, 0xFF	; 255
    278e:	fc 01       	movw	r30, r24
    2790:	24 91       	lpm	r18, Z
    2792:	a7 fd       	sbrc	r26, 7
    2794:	20 81       	ld	r18, Z
    2796:	81 e0       	ldi	r24, 0x01	; 1
    2798:	90 e0       	ldi	r25, 0x00	; 0
    279a:	02 c0       	rjmp	.+4      	; 0x27a0 <ADCInit+0x10a>
    279c:	88 0f       	add	r24, r24
    279e:	99 1f       	adc	r25, r25
    27a0:	2a 95       	dec	r18
    27a2:	e2 f7       	brpl	.-8      	; 0x279c <ADCInit+0x106>
    27a4:	80 95       	com	r24
    27a6:	48 23       	and	r20, r24
    27a8:	4a b9       	out	0x0a, r20	; 10
    27aa:	9b b1       	in	r25, 0x0b	; 11
    27ac:	89 23       	and	r24, r25
    27ae:	8b b9       	out	0x0b, r24	; 11
    27b0:	07 c0       	rjmp	.+14     	; 0x27c0 <ADCInit+0x12a>
    27b2:	45 eb       	ldi	r20, 0xB5	; 181
    27b4:	50 e0       	ldi	r21, 0x00	; 0
    27b6:	61 e4       	ldi	r22, 0x41	; 65
    27b8:	73 e0       	ldi	r23, 0x03	; 3
    27ba:	80 e0       	ldi	r24, 0x00	; 0
    27bc:	0e 94 c6 25 	call	0x4b8c	; 0x4b8c <PlatformAssert>
    27c0:	cf 5f       	subi	r28, 0xFF	; 255
    27c2:	c5 30       	cpi	r28, 0x05	; 5
    27c4:	08 f4       	brcc	.+2      	; 0x27c8 <ADCInit+0x132>
    27c6:	7a cf       	rjmp	.-268    	; 0x26bc <ADCInit+0x26>
    27c8:	81 e0       	ldi	r24, 0x01	; 1
    27ca:	80 93 64 0b 	sts	0x0B64, r24	; 0x800b64 <sg_eState>
    27ce:	cf 91       	pop	r28
    27d0:	08 95       	ret

Disassembly of section .text.CANLookupCommand:

00004224 <CANLookupCommand>:
	{PKT_MODULE_SET_TIME,		ECANMessageType_SetTime},
	{PKT_MODULE_MAX_STATE,		ECANMessageType_MaxState}
};

static ECANMessageType CANLookupCommand( uint16_t u16ID )
{
    4224:	cf 93       	push	r28
    4226:	df 93       	push	r29
    4228:	ec 01       	movw	r28, r24
	uint8_t u8Index = 0;
    422a:	90 e0       	ldi	r25, 0x00	; 0
	
	while( u8Index < (sizeof(sg_sRXCommandList)/sizeof(sg_sRXCommandList[0])) )
    422c:	26 c0       	rjmp	.+76     	; 0x427a <CANLookupCommand+0x56>
	{
		if( sg_sRXCommandList[u8Index].u16ID == u16ID )
    422e:	a9 2f       	mov	r26, r25
    4230:	b0 e0       	ldi	r27, 0x00	; 0
    4232:	9d 01       	movw	r18, r26
    4234:	22 0f       	add	r18, r18
    4236:	33 1f       	adc	r19, r19
    4238:	2a 0f       	add	r18, r26
    423a:	3b 1f       	adc	r19, r27
    423c:	03 2e       	mov	r0, r19
    423e:	00 0c       	add	r0, r0
    4240:	44 0b       	sbc	r20, r20
    4242:	2b 52       	subi	r18, 0x2B	; 43
    4244:	3d 4f       	sbci	r19, 0xFD	; 253
    4246:	4f 4f       	sbci	r20, 0xFF	; 255
    4248:	f9 01       	movw	r30, r18
    424a:	54 2f       	mov	r21, r20
    424c:	0e 94 eb 28 	call	0x51d6	; 0x51d6 <__xload_2>
    4250:	6c 17       	cp	r22, r28
    4252:	7d 07       	cpc	r23, r29
    4254:	89 f4       	brne	.+34     	; 0x4278 <CANLookupCommand+0x54>
		{
			return( sg_sRXCommandList[u8Index].eType );
    4256:	cd 01       	movw	r24, r26
    4258:	88 0f       	add	r24, r24
    425a:	99 1f       	adc	r25, r25
    425c:	8a 0f       	add	r24, r26
    425e:	9b 1f       	adc	r25, r27
    4260:	02 96       	adiw	r24, 0x02	; 2
    4262:	09 2e       	mov	r0, r25
    4264:	00 0c       	add	r0, r0
    4266:	aa 0b       	sbc	r26, r26
    4268:	8b 52       	subi	r24, 0x2B	; 43
    426a:	9d 4f       	sbci	r25, 0xFD	; 253
    426c:	af 4f       	sbci	r26, 0xFF	; 255
    426e:	fc 01       	movw	r30, r24
    4270:	84 91       	lpm	r24, Z
    4272:	a7 fd       	sbrc	r26, 7
    4274:	80 81       	ld	r24, Z
    4276:	04 c0       	rjmp	.+8      	; 0x4280 <CANLookupCommand+0x5c>
		}
		
		u8Index++;
    4278:	9f 5f       	subi	r25, 0xFF	; 255

static ECANMessageType CANLookupCommand( uint16_t u16ID )
{
	uint8_t u8Index = 0;
	
	while( u8Index < (sizeof(sg_sRXCommandList)/sizeof(sg_sRXCommandList[0])) )
    427a:	9b 30       	cpi	r25, 0x0B	; 11
    427c:	c0 f2       	brcs	.-80     	; 0x422e <CANLookupCommand+0xa>
		}
		
		u8Index++;
	}
	
	return( ECANMessageType_MAX );
    427e:	83 e1       	ldi	r24, 0x13	; 19
}
    4280:	df 91       	pop	r29
    4282:	cf 91       	pop	r28
    4284:	08 95       	ret

Disassembly of section .text.CANMOBSet:

00001bf4 <CANMOBSet>:
}

uint8_t CANGetTxBackoffDelay(void)
{
	return sg_u8TxBackoffDelay;
}
    1bf4:	6f 92       	push	r6
    1bf6:	7f 92       	push	r7
    1bf8:	8f 92       	push	r8
    1bfa:	9f 92       	push	r9
    1bfc:	bf 92       	push	r11
    1bfe:	cf 92       	push	r12
    1c00:	df 92       	push	r13
    1c02:	ef 92       	push	r14
    1c04:	ff 92       	push	r15
    1c06:	0f 93       	push	r16
    1c08:	1f 93       	push	r17
    1c0a:	cf 93       	push	r28
    1c0c:	df 93       	push	r29
    1c0e:	f8 2e       	mov	r15, r24
    1c10:	6a 01       	movw	r12, r20
    1c12:	e6 2e       	mov	r14, r22
    1c14:	e9 01       	movw	r28, r18
    1c16:	0f 2e       	mov	r0, r31
    1c18:	f5 e0       	ldi	r31, 0x05	; 5
    1c1a:	6f 2e       	mov	r6, r31
    1c1c:	f0 2d       	mov	r31, r0
    1c1e:	68 16       	cp	r6, r24
    1c20:	38 f4       	brcc	.+14     	; 0x1c30 <CANMOBSet+0x3c>
    1c22:	4d ed       	ldi	r20, 0xDD	; 221
    1c24:	50 e0       	ldi	r21, 0x00	; 0
    1c26:	6c e4       	ldi	r22, 0x4C	; 76
    1c28:	73 e0       	ldi	r23, 0x03	; 3
    1c2a:	80 e0       	ldi	r24, 0x00	; 0
    1c2c:	0e 94 c6 25 	call	0x4b8c	; 0x4b8c <PlatformAssert>
    1c30:	09 30       	cpi	r16, 0x09	; 9
    1c32:	38 f0       	brcs	.+14     	; 0x1c42 <CANMOBSet+0x4e>
    1c34:	4e ed       	ldi	r20, 0xDE	; 222
    1c36:	50 e0       	ldi	r21, 0x00	; 0
    1c38:	6c e4       	ldi	r22, 0x4C	; 76
    1c3a:	73 e0       	ldi	r23, 0x03	; 3
    1c3c:	80 e0       	ldi	r24, 0x00	; 0
    1c3e:	0e 94 c6 25 	call	0x4b8c	; 0x4b8c <PlatformAssert>
    1c42:	eb ed       	ldi	r30, 0xDB	; 219
    1c44:	f0 e0       	ldi	r31, 0x00	; 0
    1c46:	b0 80       	ld	r11, Z
    1c48:	80 81       	ld	r24, Z
    1c4a:	8f 77       	andi	r24, 0x7F	; 127
    1c4c:	80 83       	st	Z, r24
    1c4e:	8f 2d       	mov	r24, r15
    1c50:	82 95       	swap	r24
    1c52:	80 7f       	andi	r24, 0xF0	; 240
    1c54:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f00ed>
    1c58:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    1c5c:	f6 01       	movw	r30, r12
    1c5e:	84 91       	lpm	r24, Z
    1c60:	e7 fc       	sbrc	r14, 7
    1c62:	80 81       	ld	r24, Z
    1c64:	20 e4       	ldi	r18, 0x40	; 64
    1c66:	82 9f       	mul	r24, r18
    1c68:	c0 01       	movw	r24, r0
    1c6a:	11 24       	eor	r1, r1
    1c6c:	10 2f       	mov	r17, r16
    1c6e:	18 2b       	or	r17, r24
    1c70:	ae 2d       	mov	r26, r14
    1c72:	c6 01       	movw	r24, r12
    1c74:	01 96       	adiw	r24, 0x01	; 1
    1c76:	a1 1d       	adc	r26, r1
    1c78:	fc 01       	movw	r30, r24
    1c7a:	84 91       	lpm	r24, Z
    1c7c:	a7 fd       	sbrc	r26, 7
    1c7e:	80 81       	ld	r24, Z
    1c80:	81 11       	cpse	r24, r1
    1c82:	10 62       	ori	r17, 0x20	; 32
    1c84:	10 61       	ori	r17, 0x10	; 16
    1c86:	0e 94 2f 29 	call	0x525e	; 0x525e <PlatformGetRegistrationID>
    1c8a:	4e 2d       	mov	r20, r14
    1c8c:	96 01       	movw	r18, r12
    1c8e:	2e 5f       	subi	r18, 0xFE	; 254
    1c90:	3f 4f       	sbci	r19, 0xFF	; 255
    1c92:	4f 4f       	sbci	r20, 0xFF	; 255
    1c94:	f9 01       	movw	r30, r18
    1c96:	54 2f       	mov	r21, r20
    1c98:	0e 94 eb 28 	call	0x51d6	; 0x51d6 <__xload_2>
    1c9c:	ab 01       	movw	r20, r22
    1c9e:	57 70       	andi	r21, 0x07	; 7
    1ca0:	60 e0       	ldi	r22, 0x00	; 0
    1ca2:	70 e0       	ldi	r23, 0x00	; 0
    1ca4:	03 2e       	mov	r0, r19
    1ca6:	32 e1       	ldi	r19, 0x12	; 18
    1ca8:	44 0f       	add	r20, r20
    1caa:	55 1f       	adc	r21, r21
    1cac:	66 1f       	adc	r22, r22
    1cae:	77 1f       	adc	r23, r23
    1cb0:	3a 95       	dec	r19
    1cb2:	d1 f7       	brne	.-12     	; 0x1ca8 <CANMOBSet+0xb4>
    1cb4:	30 2d       	mov	r19, r0
    1cb6:	3a 01       	movw	r6, r20
    1cb8:	4b 01       	movw	r8, r22
    1cba:	68 2a       	or	r6, r24
    1cbc:	d4 01       	movw	r26, r8
    1cbe:	c3 01       	movw	r24, r6
    1cc0:	4e 2d       	mov	r20, r14
    1cc2:	96 01       	movw	r18, r12
    1cc4:	2a 5f       	subi	r18, 0xFA	; 250
    1cc6:	3f 4f       	sbci	r19, 0xFF	; 255
    1cc8:	4f 4f       	sbci	r20, 0xFF	; 255
    1cca:	f9 01       	movw	r30, r18
    1ccc:	24 91       	lpm	r18, Z
    1cce:	47 fd       	sbrc	r20, 7
    1cd0:	20 81       	ld	r18, Z
    1cd2:	22 23       	and	r18, r18
    1cd4:	11 f0       	breq	.+4      	; 0x1cda <CANMOBSet+0xe6>
    1cd6:	24 e0       	ldi	r18, 0x04	; 4
    1cd8:	01 c0       	rjmp	.+2      	; 0x1cdc <CANMOBSet+0xe8>
    1cda:	20 e0       	ldi	r18, 0x00	; 0
    1cdc:	e0 ef       	ldi	r30, 0xF0	; 240
    1cde:	f0 e0       	ldi	r31, 0x00	; 0
    1ce0:	20 83       	st	Z, r18
    1ce2:	20 81       	ld	r18, Z
    1ce4:	38 2f       	mov	r19, r24
    1ce6:	33 0f       	add	r19, r19
    1ce8:	33 0f       	add	r19, r19
    1cea:	33 0f       	add	r19, r19
    1cec:	23 2b       	or	r18, r19
    1cee:	20 83       	st	Z, r18
    1cf0:	ac 01       	movw	r20, r24
    1cf2:	bd 01       	movw	r22, r26
    1cf4:	68 94       	set
    1cf6:	14 f8       	bld	r1, 4
    1cf8:	76 95       	lsr	r23
    1cfa:	67 95       	ror	r22
    1cfc:	57 95       	ror	r21
    1cfe:	47 95       	ror	r20
    1d00:	16 94       	lsr	r1
    1d02:	d1 f7       	brne	.-12     	; 0x1cf8 <CANMOBSet+0x104>
    1d04:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f00f1>
    1d08:	ac 01       	movw	r20, r24
    1d0a:	bd 01       	movw	r22, r26
    1d0c:	03 2e       	mov	r0, r19
    1d0e:	3d e0       	ldi	r19, 0x0D	; 13
    1d10:	76 95       	lsr	r23
    1d12:	67 95       	ror	r22
    1d14:	57 95       	ror	r21
    1d16:	47 95       	ror	r20
    1d18:	3a 95       	dec	r19
    1d1a:	d1 f7       	brne	.-12     	; 0x1d10 <CANMOBSet+0x11c>
    1d1c:	30 2d       	mov	r19, r0
    1d1e:	40 93 f2 00 	sts	0x00F2, r20	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f00f2>
    1d22:	07 2e       	mov	r0, r23
    1d24:	75 e1       	ldi	r23, 0x15	; 21
    1d26:	b6 95       	lsr	r27
    1d28:	a7 95       	ror	r26
    1d2a:	97 95       	ror	r25
    1d2c:	87 95       	ror	r24
    1d2e:	7a 95       	dec	r23
    1d30:	d1 f7       	brne	.-12     	; 0x1d26 <CANMOBSet+0x132>
    1d32:	70 2d       	mov	r23, r0
    1d34:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f00f3>
    1d38:	ae 2d       	mov	r26, r14
    1d3a:	c6 01       	movw	r24, r12
    1d3c:	07 96       	adiw	r24, 0x07	; 7
    1d3e:	a1 1d       	adc	r26, r1
    1d40:	fc 01       	movw	r30, r24
    1d42:	84 91       	lpm	r24, Z
    1d44:	a7 fd       	sbrc	r26, 7
    1d46:	80 81       	ld	r24, Z
    1d48:	88 23       	and	r24, r24
    1d4a:	11 f0       	breq	.+4      	; 0x1d50 <CANMOBSet+0x15c>
    1d4c:	84 e0       	ldi	r24, 0x04	; 4
    1d4e:	01 c0       	rjmp	.+2      	; 0x1d52 <CANMOBSet+0x15e>
    1d50:	80 e0       	ldi	r24, 0x00	; 0
    1d52:	e4 ef       	ldi	r30, 0xF4	; 244
    1d54:	f0 e0       	ldi	r31, 0x00	; 0
    1d56:	80 83       	st	Z, r24
    1d58:	80 81       	ld	r24, Z
    1d5a:	81 60       	ori	r24, 0x01	; 1
    1d5c:	80 83       	st	Z, r24
    1d5e:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7f00f5>
    1d62:	ae 2d       	mov	r26, r14
    1d64:	c6 01       	movw	r24, r12
    1d66:	04 96       	adiw	r24, 0x04	; 4
    1d68:	a1 1d       	adc	r26, r1
    1d6a:	fc 01       	movw	r30, r24
    1d6c:	5a 2f       	mov	r21, r26
    1d6e:	0e 94 eb 28 	call	0x51d6	; 0x51d6 <__xload_2>
    1d72:	62 95       	swap	r22
    1d74:	66 0f       	add	r22, r22
    1d76:	60 7e       	andi	r22, 0xE0	; 224
    1d78:	60 93 f6 00 	sts	0x00F6, r22	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7f00f6>
    1d7c:	fc 01       	movw	r30, r24
    1d7e:	5a 2f       	mov	r21, r26
    1d80:	0e 94 eb 28 	call	0x51d6	; 0x51d6 <__xload_2>
    1d84:	76 95       	lsr	r23
    1d86:	67 95       	ror	r22
    1d88:	76 95       	lsr	r23
    1d8a:	67 95       	ror	r22
    1d8c:	76 95       	lsr	r23
    1d8e:	67 95       	ror	r22
    1d90:	60 93 f7 00 	sts	0x00F7, r22	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7f00f7>
    1d94:	04 c0       	rjmp	.+8      	; 0x1d9e <CANMOBSet+0x1aa>
    1d96:	89 91       	ld	r24, Y+
    1d98:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
    1d9c:	01 50       	subi	r16, 0x01	; 1
    1d9e:	01 11       	cpse	r16, r1
    1da0:	fa cf       	rjmp	.-12     	; 0x1d96 <CANMOBSet+0x1a2>
    1da2:	10 93 ef 00 	sts	0x00EF, r17	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    1da6:	f6 01       	movw	r30, r12
    1da8:	84 91       	lpm	r24, Z
    1daa:	e7 fc       	sbrc	r14, 7
    1dac:	80 81       	ld	r24, Z
    1dae:	88 23       	and	r24, r24
    1db0:	69 f0       	breq	.+26     	; 0x1dcc <CANMOBSet+0x1d8>
    1db2:	ee ed       	ldi	r30, 0xDE	; 222
    1db4:	f0 e0       	ldi	r31, 0x00	; 0
    1db6:	20 81       	ld	r18, Z
    1db8:	81 e0       	ldi	r24, 0x01	; 1
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	02 c0       	rjmp	.+4      	; 0x1dc2 <CANMOBSet+0x1ce>
    1dbe:	88 0f       	add	r24, r24
    1dc0:	99 1f       	adc	r25, r25
    1dc2:	fa 94       	dec	r15
    1dc4:	e2 f7       	brpl	.-8      	; 0x1dbe <CANMOBSet+0x1ca>
    1dc6:	82 2b       	or	r24, r18
    1dc8:	80 83       	st	Z, r24
    1dca:	0d c0       	rjmp	.+26     	; 0x1de6 <CANMOBSet+0x1f2>
    1dcc:	ee ed       	ldi	r30, 0xDE	; 222
    1dce:	f0 e0       	ldi	r31, 0x00	; 0
    1dd0:	20 81       	ld	r18, Z
    1dd2:	81 e0       	ldi	r24, 0x01	; 1
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	02 c0       	rjmp	.+4      	; 0x1ddc <CANMOBSet+0x1e8>
    1dd8:	88 0f       	add	r24, r24
    1dda:	99 1f       	adc	r25, r25
    1ddc:	fa 94       	dec	r15
    1dde:	e2 f7       	brpl	.-8      	; 0x1dd8 <CANMOBSet+0x1e4>
    1de0:	80 95       	com	r24
    1de2:	82 23       	and	r24, r18
    1de4:	80 83       	st	Z, r24
    1de6:	b0 92 db 00 	sts	0x00DB, r11	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f00db>
    1dea:	df 91       	pop	r29
    1dec:	cf 91       	pop	r28
    1dee:	1f 91       	pop	r17
    1df0:	0f 91       	pop	r16
    1df2:	ff 90       	pop	r15
    1df4:	ef 90       	pop	r14
    1df6:	df 90       	pop	r13
    1df8:	cf 90       	pop	r12
    1dfa:	bf 90       	pop	r11
    1dfc:	9f 90       	pop	r9
    1dfe:	8f 90       	pop	r8
    1e00:	7f 90       	pop	r7
    1e02:	6f 90       	pop	r6
    1e04:	08 95       	ret

Disassembly of section .text.CANSendMessageInternal:

00001fc4 <CANSendMessageInternal>:
    1fc4:	6f 92       	push	r6
    1fc6:	7f 92       	push	r7
    1fc8:	8f 92       	push	r8
    1fca:	ef 92       	push	r14
    1fcc:	ff 92       	push	r15
    1fce:	0f 93       	push	r16
    1fd0:	cf 93       	push	r28
    1fd2:	df 93       	push	r29
    1fd4:	c8 2f       	mov	r28, r24
    1fd6:	7b 01       	movw	r14, r22
    1fd8:	04 2f       	mov	r16, r20
    1fda:	d2 2f       	mov	r29, r18
    1fdc:	88 23       	and	r24, r24
    1fde:	f9 f0       	breq	.+62     	; 0x201e <CANSendMessageInternal+0x5a>
    1fe0:	81 30       	cpi	r24, 0x01	; 1
    1fe2:	31 f1       	breq	.+76     	; 0x2030 <CANSendMessageInternal+0x6c>
    1fe4:	82 30       	cpi	r24, 0x02	; 2
    1fe6:	69 f1       	breq	.+90     	; 0x2042 <CANSendMessageInternal+0x7e>
    1fe8:	83 30       	cpi	r24, 0x03	; 3
    1fea:	a1 f1       	breq	.+104    	; 0x2054 <CANSendMessageInternal+0x90>
    1fec:	86 30       	cpi	r24, 0x06	; 6
    1fee:	d9 f1       	breq	.+118    	; 0x2066 <CANSendMessageInternal+0xa2>
    1ff0:	87 30       	cpi	r24, 0x07	; 7
    1ff2:	09 f4       	brne	.+2      	; 0x1ff6 <CANSendMessageInternal+0x32>
    1ff4:	41 c0       	rjmp	.+130    	; 0x2078 <CANSendMessageInternal+0xb4>
    1ff6:	85 30       	cpi	r24, 0x05	; 5
    1ff8:	09 f4       	brne	.+2      	; 0x1ffc <CANSendMessageInternal+0x38>
    1ffa:	47 c0       	rjmp	.+142    	; 0x208a <CANSendMessageInternal+0xc6>
    1ffc:	84 30       	cpi	r24, 0x04	; 4
    1ffe:	09 f4       	brne	.+2      	; 0x2002 <CANSendMessageInternal+0x3e>
    2000:	4d c0       	rjmp	.+154    	; 0x209c <CANSendMessageInternal+0xd8>
    2002:	88 30       	cpi	r24, 0x08	; 8
    2004:	09 f4       	brne	.+2      	; 0x2008 <CANSendMessageInternal+0x44>
    2006:	53 c0       	rjmp	.+166    	; 0x20ae <CANSendMessageInternal+0xea>
    2008:	40 e5       	ldi	r20, 0x50	; 80
    200a:	51 e0       	ldi	r21, 0x01	; 1
    200c:	6c e4       	ldi	r22, 0x4C	; 76
    200e:	73 e0       	ldi	r23, 0x03	; 3
    2010:	80 e0       	ldi	r24, 0x00	; 0
    2012:	0e 94 c6 25 	call	0x4b8c	; 0x4b8c <PlatformAssert>
    2016:	61 2c       	mov	r6, r1
    2018:	71 2c       	mov	r7, r1
    201a:	81 2c       	mov	r8, r1
    201c:	50 c0       	rjmp	.+160    	; 0x20be <CANSendMessageInternal+0xfa>
    201e:	0f 2e       	mov	r0, r31
    2020:	f7 e9       	ldi	r31, 0x97	; 151
    2022:	6f 2e       	mov	r6, r31
    2024:	f3 e0       	ldi	r31, 0x03	; 3
    2026:	7f 2e       	mov	r7, r31
    2028:	f0 e0       	ldi	r31, 0x00	; 0
    202a:	8f 2e       	mov	r8, r31
    202c:	f0 2d       	mov	r31, r0
    202e:	47 c0       	rjmp	.+142    	; 0x20be <CANSendMessageInternal+0xfa>
    2030:	0f 2e       	mov	r0, r31
    2032:	ff e8       	ldi	r31, 0x8F	; 143
    2034:	6f 2e       	mov	r6, r31
    2036:	f3 e0       	ldi	r31, 0x03	; 3
    2038:	7f 2e       	mov	r7, r31
    203a:	f0 e0       	ldi	r31, 0x00	; 0
    203c:	8f 2e       	mov	r8, r31
    203e:	f0 2d       	mov	r31, r0
    2040:	3e c0       	rjmp	.+124    	; 0x20be <CANSendMessageInternal+0xfa>
    2042:	0f 2e       	mov	r0, r31
    2044:	f7 e8       	ldi	r31, 0x87	; 135
    2046:	6f 2e       	mov	r6, r31
    2048:	f3 e0       	ldi	r31, 0x03	; 3
    204a:	7f 2e       	mov	r7, r31
    204c:	f0 e0       	ldi	r31, 0x00	; 0
    204e:	8f 2e       	mov	r8, r31
    2050:	f0 2d       	mov	r31, r0
    2052:	35 c0       	rjmp	.+106    	; 0x20be <CANSendMessageInternal+0xfa>
    2054:	0f 2e       	mov	r0, r31
    2056:	ff e7       	ldi	r31, 0x7F	; 127
    2058:	6f 2e       	mov	r6, r31
    205a:	f3 e0       	ldi	r31, 0x03	; 3
    205c:	7f 2e       	mov	r7, r31
    205e:	f0 e0       	ldi	r31, 0x00	; 0
    2060:	8f 2e       	mov	r8, r31
    2062:	f0 2d       	mov	r31, r0
    2064:	2c c0       	rjmp	.+88     	; 0x20be <CANSendMessageInternal+0xfa>
    2066:	0f 2e       	mov	r0, r31
    2068:	f7 e7       	ldi	r31, 0x77	; 119
    206a:	6f 2e       	mov	r6, r31
    206c:	f3 e0       	ldi	r31, 0x03	; 3
    206e:	7f 2e       	mov	r7, r31
    2070:	f0 e0       	ldi	r31, 0x00	; 0
    2072:	8f 2e       	mov	r8, r31
    2074:	f0 2d       	mov	r31, r0
    2076:	23 c0       	rjmp	.+70     	; 0x20be <CANSendMessageInternal+0xfa>
    2078:	0f 2e       	mov	r0, r31
    207a:	ff e6       	ldi	r31, 0x6F	; 111
    207c:	6f 2e       	mov	r6, r31
    207e:	f3 e0       	ldi	r31, 0x03	; 3
    2080:	7f 2e       	mov	r7, r31
    2082:	f0 e0       	ldi	r31, 0x00	; 0
    2084:	8f 2e       	mov	r8, r31
    2086:	f0 2d       	mov	r31, r0
    2088:	1a c0       	rjmp	.+52     	; 0x20be <CANSendMessageInternal+0xfa>
    208a:	0f 2e       	mov	r0, r31
    208c:	ff e5       	ldi	r31, 0x5F	; 95
    208e:	6f 2e       	mov	r6, r31
    2090:	f3 e0       	ldi	r31, 0x03	; 3
    2092:	7f 2e       	mov	r7, r31
    2094:	f0 e0       	ldi	r31, 0x00	; 0
    2096:	8f 2e       	mov	r8, r31
    2098:	f0 2d       	mov	r31, r0
    209a:	11 c0       	rjmp	.+34     	; 0x20be <CANSendMessageInternal+0xfa>
    209c:	0f 2e       	mov	r0, r31
    209e:	f7 e6       	ldi	r31, 0x67	; 103
    20a0:	6f 2e       	mov	r6, r31
    20a2:	f3 e0       	ldi	r31, 0x03	; 3
    20a4:	7f 2e       	mov	r7, r31
    20a6:	f0 e0       	ldi	r31, 0x00	; 0
    20a8:	8f 2e       	mov	r8, r31
    20aa:	f0 2d       	mov	r31, r0
    20ac:	08 c0       	rjmp	.+16     	; 0x20be <CANSendMessageInternal+0xfa>
    20ae:	0f 2e       	mov	r0, r31
    20b0:	f7 e5       	ldi	r31, 0x57	; 87
    20b2:	6f 2e       	mov	r6, r31
    20b4:	f3 e0       	ldi	r31, 0x03	; 3
    20b6:	7f 2e       	mov	r7, r31
    20b8:	f0 e0       	ldi	r31, 0x00	; 0
    20ba:	8f 2e       	mov	r8, r31
    20bc:	f0 2d       	mov	r31, r0
    20be:	dd 23       	and	r29, r29
    20c0:	21 f0       	breq	.+8      	; 0x20ca <CANSendMessageInternal+0x106>
    20c2:	80 91 6a 0b 	lds	r24, 0x0B6A	; 0x800b6a <sg_bInRetransmit>
    20c6:	81 11       	cpse	r24, r1
    20c8:	34 c0       	rjmp	.+104    	; 0x2132 <CANSendMessageInternal+0x16e>
    20ca:	d1 11       	cpse	r29, r1
    20cc:	04 c0       	rjmp	.+8      	; 0x20d6 <CANSendMessageInternal+0x112>
    20ce:	80 91 6e 0b 	lds	r24, 0x0B6E	; 0x800b6e <sg_u8Busy>
    20d2:	81 11       	cpse	r24, r1
    20d4:	2e c0       	rjmp	.+92     	; 0x2132 <CANSendMessageInternal+0x16e>
    20d6:	80 91 6e 0b 	lds	r24, 0x0B6E	; 0x800b6e <sg_u8Busy>
    20da:	81 11       	cpse	r24, r1
    20dc:	03 c0       	rjmp	.+6      	; 0x20e4 <CANSendMessageInternal+0x120>
    20de:	82 e0       	ldi	r24, 0x02	; 2
    20e0:	80 93 6e 0b 	sts	0x0B6E, r24	; 0x800b6e <sg_u8Busy>
    20e4:	d1 11       	cpse	r29, r1
    20e6:	1a c0       	rjmp	.+52     	; 0x211c <CANSendMessageInternal+0x158>
    20e8:	10 92 6d 0b 	sts	0x0B6D, r1	; 0x800b6d <sg_u8TransmitAttempts>
    20ec:	c0 93 6c 0b 	sts	0x0B6C, r28	; 0x800b6c <sg_eLastTXType>
    20f0:	09 30       	cpi	r16, 0x09	; 9
    20f2:	38 f0       	brcs	.+14     	; 0x2102 <CANSendMessageInternal+0x13e>
    20f4:	45 e6       	ldi	r20, 0x65	; 101
    20f6:	51 e0       	ldi	r21, 0x01	; 1
    20f8:	6c e4       	ldi	r22, 0x4C	; 76
    20fa:	73 e0       	ldi	r23, 0x03	; 3
    20fc:	80 e0       	ldi	r24, 0x00	; 0
    20fe:	0e 94 c6 25 	call	0x4b8c	; 0x4b8c <PlatformAssert>
    2102:	20 2f       	mov	r18, r16
    2104:	30 e0       	ldi	r19, 0x00	; 0
    2106:	c7 01       	movw	r24, r14
    2108:	a0 e8       	ldi	r26, 0x80	; 128
    210a:	ac 01       	movw	r20, r24
    210c:	6a 2f       	mov	r22, r26
    210e:	85 e3       	ldi	r24, 0x35	; 53
    2110:	9b e0       	ldi	r25, 0x0B	; 11
    2112:	0e 94 53 25 	call	0x4aa6	; 0x4aa6 <memcpy>
    2116:	00 93 6b 0b 	sts	0x0B6B, r16	; 0x800b6b <sg_u8LastTXDataLen>
    211a:	05 c0       	rjmp	.+10     	; 0x2126 <CANSendMessageInternal+0x162>
    211c:	80 91 6d 0b 	lds	r24, 0x0B6D	; 0x800b6d <sg_u8TransmitAttempts>
    2120:	8f 5f       	subi	r24, 0xFF	; 255
    2122:	80 93 6d 0b 	sts	0x0B6D, r24	; 0x800b6d <sg_u8TransmitAttempts>
    2126:	97 01       	movw	r18, r14
    2128:	68 2d       	mov	r22, r8
    212a:	a3 01       	movw	r20, r6
    212c:	81 e0       	ldi	r24, 0x01	; 1
    212e:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <CANMOBSet>
    2132:	df 91       	pop	r29
    2134:	cf 91       	pop	r28
    2136:	0f 91       	pop	r16
    2138:	ff 90       	pop	r15
    213a:	ef 90       	pop	r14
    213c:	8f 90       	pop	r8
    213e:	7f 90       	pop	r7
    2140:	6f 90       	pop	r6
    2142:	08 95       	ret

Disassembly of section .text.CANMOBInterrupt:

00002144 <CANMOBInterrupt>:
    2144:	cf 92       	push	r12
    2146:	df 92       	push	r13
    2148:	ff 92       	push	r15
    214a:	0f 93       	push	r16
    214c:	1f 93       	push	r17
    214e:	cf 93       	push	r28
    2150:	df 93       	push	r29
    2152:	cd b7       	in	r28, 0x3d	; 61
    2154:	de b7       	in	r29, 0x3e	; 62
    2156:	28 97       	sbiw	r28, 0x08	; 8
    2158:	0f b6       	in	r0, 0x3f	; 63
    215a:	f8 94       	cli
    215c:	de bf       	out	0x3e, r29	; 62
    215e:	0f be       	out	0x3f, r0	; 63
    2160:	cd bf       	out	0x3d, r28	; 61
    2162:	98 2f       	mov	r25, r24
    2164:	92 95       	swap	r25
    2166:	90 7f       	andi	r25, 0xF0	; 240
    2168:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f00ed>
    216c:	ee ed       	ldi	r30, 0xDE	; 222
    216e:	f0 e0       	ldi	r31, 0x00	; 0
    2170:	20 81       	ld	r18, Z
    2172:	01 e0       	ldi	r16, 0x01	; 1
    2174:	10 e0       	ldi	r17, 0x00	; 0
    2176:	08 2e       	mov	r0, r24
    2178:	02 c0       	rjmp	.+4      	; 0x217e <CANMOBInterrupt+0x3a>
    217a:	00 0f       	add	r16, r16
    217c:	11 1f       	adc	r17, r17
    217e:	0a 94       	dec	r0
    2180:	e2 f7       	brpl	.-8      	; 0x217a <CANMOBInterrupt+0x36>
    2182:	90 2f       	mov	r25, r16
    2184:	90 95       	com	r25
    2186:	92 23       	and	r25, r18
    2188:	90 83       	st	Z, r25
    218a:	ef ee       	ldi	r30, 0xEF	; 239
    218c:	f0 e0       	ldi	r31, 0x00	; 0
    218e:	90 81       	ld	r25, Z
    2190:	9f 73       	andi	r25, 0x3F	; 63
    2192:	90 83       	st	Z, r25
    2194:	81 11       	cpse	r24, r1
    2196:	50 c0       	rjmp	.+160    	; 0x2238 <CANMOBInterrupt+0xf4>
    2198:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    219c:	85 ff       	sbrs	r24, 5
    219e:	38 c0       	rjmp	.+112    	; 0x2210 <CANMOBInterrupt+0xcc>
    21a0:	ee ee       	ldi	r30, 0xEE	; 238
    21a2:	f0 e0       	ldi	r31, 0x00	; 0
    21a4:	80 81       	ld	r24, Z
    21a6:	8f 7d       	andi	r24, 0xDF	; 223
    21a8:	80 83       	st	Z, r24
    21aa:	c0 90 5c 0b 	lds	r12, 0x0B5C	; 0x800b5c <sg_pfRXCallback>
    21ae:	d0 90 5d 0b 	lds	r13, 0x0B5D	; 0x800b5d <sg_pfRXCallback+0x1>
    21b2:	c1 14       	cp	r12, r1
    21b4:	d1 04       	cpc	r13, r1
    21b6:	61 f1       	breq	.+88     	; 0x2210 <CANMOBInterrupt+0xcc>
    21b8:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    21bc:	8f 70       	andi	r24, 0x0F	; 15
    21be:	f8 2e       	mov	r15, r24
    21c0:	40 91 f3 00 	lds	r20, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f00f3>
    21c4:	50 e0       	ldi	r21, 0x00	; 0
    21c6:	44 0f       	add	r20, r20
    21c8:	55 1f       	adc	r21, r21
    21ca:	44 0f       	add	r20, r20
    21cc:	55 1f       	adc	r21, r21
    21ce:	44 0f       	add	r20, r20
    21d0:	55 1f       	adc	r21, r21
    21d2:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f00f2>
    21d6:	82 95       	swap	r24
    21d8:	86 95       	lsr	r24
    21da:	87 70       	andi	r24, 0x07	; 7
    21dc:	48 2b       	or	r20, r24
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	0a c0       	rjmp	.+20     	; 0x21f6 <CANMOBInterrupt+0xb2>
    21e2:	20 91 fa 00 	lds	r18, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
    21e6:	e1 e0       	ldi	r30, 0x01	; 1
    21e8:	f0 e0       	ldi	r31, 0x00	; 0
    21ea:	ec 0f       	add	r30, r28
    21ec:	fd 1f       	adc	r31, r29
    21ee:	e9 0f       	add	r30, r25
    21f0:	f1 1d       	adc	r31, r1
    21f2:	20 83       	st	Z, r18
    21f4:	9f 5f       	subi	r25, 0xFF	; 255
    21f6:	9f 15       	cp	r25, r15
    21f8:	a0 f3       	brcs	.-24     	; 0x21e2 <CANMOBInterrupt+0x9e>
    21fa:	ca 01       	movw	r24, r20
    21fc:	0e 94 12 21 	call	0x4224	; 0x4224 <CANLookupCommand>
    2200:	83 31       	cpi	r24, 0x13	; 19
    2202:	31 f0       	breq	.+12     	; 0x2210 <CANMOBInterrupt+0xcc>
    2204:	4f 2d       	mov	r20, r15
    2206:	be 01       	movw	r22, r28
    2208:	6f 5f       	subi	r22, 0xFF	; 255
    220a:	7f 4f       	sbci	r23, 0xFF	; 255
    220c:	f6 01       	movw	r30, r12
    220e:	09 95       	icall
    2210:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    2214:	8e 70       	andi	r24, 0x0E	; 14
    2216:	29 f0       	breq	.+10     	; 0x2222 <CANMOBInterrupt+0xde>
    2218:	ee ee       	ldi	r30, 0xEE	; 238
    221a:	f0 e0       	ldi	r31, 0x00	; 0
    221c:	80 81       	ld	r24, Z
    221e:	81 7f       	andi	r24, 0xF1	; 241
    2220:	80 83       	st	Z, r24
    2222:	ee ed       	ldi	r30, 0xDE	; 222
    2224:	f0 e0       	ldi	r31, 0x00	; 0
    2226:	80 81       	ld	r24, Z
    2228:	08 2b       	or	r16, r24
    222a:	00 83       	st	Z, r16
    222c:	ef ee       	ldi	r30, 0xEF	; 239
    222e:	f0 e0       	ldi	r31, 0x00	; 0
    2230:	80 81       	ld	r24, Z
    2232:	80 68       	ori	r24, 0x80	; 128
    2234:	80 83       	st	Z, r24
    2236:	2b c0       	rjmp	.+86     	; 0x228e <CANMOBInterrupt+0x14a>
    2238:	81 30       	cpi	r24, 0x01	; 1
    223a:	49 f5       	brne	.+82     	; 0x228e <CANMOBInterrupt+0x14a>
    223c:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    2240:	86 ff       	sbrs	r24, 6
    2242:	07 c0       	rjmp	.+14     	; 0x2252 <CANMOBInterrupt+0x10e>
    2244:	ee ee       	ldi	r30, 0xEE	; 238
    2246:	f0 e0       	ldi	r31, 0x00	; 0
    2248:	80 81       	ld	r24, Z
    224a:	8f 7b       	andi	r24, 0xBF	; 191
    224c:	80 83       	st	Z, r24
    224e:	10 92 6e 0b 	sts	0x0B6E, r1	; 0x800b6e <sg_u8Busy>
    2252:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    2256:	89 71       	andi	r24, 0x19	; 25
    2258:	d1 f0       	breq	.+52     	; 0x228e <CANMOBInterrupt+0x14a>
    225a:	ee ee       	ldi	r30, 0xEE	; 238
    225c:	f0 e0       	ldi	r31, 0x00	; 0
    225e:	80 81       	ld	r24, Z
    2260:	86 7e       	andi	r24, 0xE6	; 230
    2262:	80 83       	st	Z, r24
    2264:	80 91 6d 0b 	lds	r24, 0x0B6D	; 0x800b6d <sg_u8TransmitAttempts>
    2268:	84 31       	cpi	r24, 0x14	; 20
    226a:	68 f4       	brcc	.+26     	; 0x2286 <CANMOBInterrupt+0x142>
    226c:	81 e0       	ldi	r24, 0x01	; 1
    226e:	80 93 6a 0b 	sts	0x0B6A, r24	; 0x800b6a <sg_bInRetransmit>
    2272:	21 e0       	ldi	r18, 0x01	; 1
    2274:	40 91 6b 0b 	lds	r20, 0x0B6B	; 0x800b6b <sg_u8LastTXDataLen>
    2278:	65 e3       	ldi	r22, 0x35	; 53
    227a:	7b e0       	ldi	r23, 0x0B	; 11
    227c:	80 91 6c 0b 	lds	r24, 0x0B6C	; 0x800b6c <sg_eLastTXType>
    2280:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <CANSendMessageInternal>
    2284:	04 c0       	rjmp	.+8      	; 0x228e <CANMOBInterrupt+0x14a>
    2286:	10 92 6e 0b 	sts	0x0B6E, r1	; 0x800b6e <sg_u8Busy>
    228a:	10 92 6a 0b 	sts	0x0B6A, r1	; 0x800b6a <sg_bInRetransmit>
    228e:	28 96       	adiw	r28, 0x08	; 8
    2290:	0f b6       	in	r0, 0x3f	; 63
    2292:	f8 94       	cli
    2294:	de bf       	out	0x3e, r29	; 62
    2296:	0f be       	out	0x3f, r0	; 63
    2298:	cd bf       	out	0x3d, r28	; 61
    229a:	df 91       	pop	r29
    229c:	cf 91       	pop	r28
    229e:	1f 91       	pop	r17
    22a0:	0f 91       	pop	r16
    22a2:	ff 90       	pop	r15
    22a4:	df 90       	pop	r13
    22a6:	cf 90       	pop	r12
    22a8:	08 95       	ret

Disassembly of section .text.__vector_18:

00002558 <__vector_18>:
    2558:	1f 92       	push	r1
    255a:	0f 92       	push	r0
    255c:	0f b6       	in	r0, 0x3f	; 63
    255e:	0f 92       	push	r0
    2560:	11 24       	eor	r1, r1
    2562:	0f 93       	push	r16
    2564:	1f 93       	push	r17
    2566:	2f 93       	push	r18
    2568:	3f 93       	push	r19
    256a:	4f 93       	push	r20
    256c:	5f 93       	push	r21
    256e:	6f 93       	push	r22
    2570:	7f 93       	push	r23
    2572:	8f 93       	push	r24
    2574:	9f 93       	push	r25
    2576:	af 93       	push	r26
    2578:	bf 93       	push	r27
    257a:	cf 93       	push	r28
    257c:	df 93       	push	r29
    257e:	ef 93       	push	r30
    2580:	ff 93       	push	r31
    2582:	eb ed       	ldi	r30, 0xDB	; 219
    2584:	f0 e0       	ldi	r31, 0x00	; 0
    2586:	d0 81       	ld	r29, Z
    2588:	10 91 de 00 	lds	r17, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7f00de>
    258c:	80 81       	ld	r24, Z
    258e:	8f 77       	andi	r24, 0x7F	; 127
    2590:	80 83       	st	Z, r24
    2592:	c0 91 e0 00 	lds	r28, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f00e0>
    2596:	c0 ff       	sbrs	r28, 0
    2598:	0c c0       	rjmp	.+24     	; 0x25b2 <__vector_18+0x5a>
    259a:	80 e0       	ldi	r24, 0x00	; 0
    259c:	0e 94 a2 10 	call	0x2144	; 0x2144 <CANMOBInterrupt>
    25a0:	00 e0       	ldi	r16, 0x00	; 0
    25a2:	20 e0       	ldi	r18, 0x00	; 0
    25a4:	30 e0       	ldi	r19, 0x00	; 0
    25a6:	4f e9       	ldi	r20, 0x9F	; 159
    25a8:	53 e0       	ldi	r21, 0x03	; 3
    25aa:	60 e0       	ldi	r22, 0x00	; 0
    25ac:	80 e0       	ldi	r24, 0x00	; 0
    25ae:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <CANMOBSet>
    25b2:	c1 ff       	sbrs	r28, 1
    25b4:	03 c0       	rjmp	.+6      	; 0x25bc <__vector_18+0x64>
    25b6:	81 e0       	ldi	r24, 0x01	; 1
    25b8:	0e 94 a2 10 	call	0x2144	; 0x2144 <CANMOBInterrupt>
    25bc:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    25c0:	86 ff       	sbrs	r24, 6
    25c2:	16 c0       	rjmp	.+44     	; 0x25f0 <__vector_18+0x98>
    25c4:	80 e4       	ldi	r24, 0x40	; 64
    25c6:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    25ca:	80 91 54 0b 	lds	r24, 0x0B54	; 0x800b54 <sg_u16BusOffEvents>
    25ce:	90 91 55 0b 	lds	r25, 0x0B55	; 0x800b55 <sg_u16BusOffEvents+0x1>
    25d2:	01 96       	adiw	r24, 0x01	; 1
    25d4:	90 93 55 0b 	sts	0x0B55, r25	; 0x800b55 <sg_u16BusOffEvents+0x1>
    25d8:	80 93 54 0b 	sts	0x0B54, r24	; 0x800b54 <sg_u16BusOffEvents>
    25dc:	82 e0       	ldi	r24, 0x02	; 2
    25de:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f00d8>
    25e2:	10 92 6e 0b 	sts	0x0B6E, r1	; 0x800b6e <sg_u8Busy>
    25e6:	10 92 6a 0b 	sts	0x0B6A, r1	; 0x800b6a <sg_bInRetransmit>
    25ea:	8a e0       	ldi	r24, 0x0A	; 10
    25ec:	80 93 69 0b 	sts	0x0B69, r24	; 0x800b69 <sg_u8BusOffRecoveryDelay>
    25f0:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    25f4:	84 ff       	sbrs	r24, 4
    25f6:	0a c0       	rjmp	.+20     	; 0x260c <__vector_18+0xb4>
    25f8:	45 e4       	ldi	r20, 0x45	; 69
    25fa:	52 e0       	ldi	r21, 0x02	; 2
    25fc:	6c e4       	ldi	r22, 0x4C	; 76
    25fe:	73 e0       	ldi	r23, 0x03	; 3
    2600:	80 e0       	ldi	r24, 0x00	; 0
    2602:	0e 94 c6 25 	call	0x4b8c	; 0x4b8c <PlatformAssert>
    2606:	80 e1       	ldi	r24, 0x10	; 16
    2608:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    260c:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    2610:	83 ff       	sbrs	r24, 3
    2612:	03 c0       	rjmp	.+6      	; 0x261a <__vector_18+0xc2>
    2614:	88 e0       	ldi	r24, 0x08	; 8
    2616:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    261a:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    261e:	82 ff       	sbrs	r24, 2
    2620:	03 c0       	rjmp	.+6      	; 0x2628 <__vector_18+0xd0>
    2622:	84 e0       	ldi	r24, 0x04	; 4
    2624:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    2628:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    262c:	81 ff       	sbrs	r24, 1
    262e:	03 c0       	rjmp	.+6      	; 0x2636 <__vector_18+0xde>
    2630:	82 e0       	ldi	r24, 0x02	; 2
    2632:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    2636:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    263a:	80 ff       	sbrs	r24, 0
    263c:	13 c0       	rjmp	.+38     	; 0x2664 <__vector_18+0x10c>
    263e:	81 e0       	ldi	r24, 0x01	; 1
    2640:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    2644:	80 91 6d 0b 	lds	r24, 0x0B6D	; 0x800b6d <sg_u8TransmitAttempts>
    2648:	84 31       	cpi	r24, 0x14	; 20
    264a:	50 f4       	brcc	.+20     	; 0x2660 <__vector_18+0x108>
    264c:	21 e0       	ldi	r18, 0x01	; 1
    264e:	40 91 6b 0b 	lds	r20, 0x0B6B	; 0x800b6b <sg_u8LastTXDataLen>
    2652:	65 e3       	ldi	r22, 0x35	; 53
    2654:	7b e0       	ldi	r23, 0x0B	; 11
    2656:	80 91 6c 0b 	lds	r24, 0x0B6C	; 0x800b6c <sg_eLastTXType>
    265a:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <CANSendMessageInternal>
    265e:	02 c0       	rjmp	.+4      	; 0x2664 <__vector_18+0x10c>
    2660:	10 92 6e 0b 	sts	0x0B6E, r1	; 0x800b6e <sg_u8Busy>
    2664:	10 93 de 00 	sts	0x00DE, r17	; 0x8000de <__TEXT_REGION_LENGTH__+0x7f00de>
    2668:	d0 93 db 00 	sts	0x00DB, r29	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f00db>
    266c:	ff 91       	pop	r31
    266e:	ef 91       	pop	r30
    2670:	df 91       	pop	r29
    2672:	cf 91       	pop	r28
    2674:	bf 91       	pop	r27
    2676:	af 91       	pop	r26
    2678:	9f 91       	pop	r25
    267a:	8f 91       	pop	r24
    267c:	7f 91       	pop	r23
    267e:	6f 91       	pop	r22
    2680:	5f 91       	pop	r21
    2682:	4f 91       	pop	r20
    2684:	3f 91       	pop	r19
    2686:	2f 91       	pop	r18
    2688:	1f 91       	pop	r17
    268a:	0f 91       	pop	r16
    268c:	0f 90       	pop	r0
    268e:	0f be       	out	0x3f, r0	; 63
    2690:	0f 90       	pop	r0
    2692:	1f 90       	pop	r1
    2694:	18 95       	reti

Disassembly of section .text.CANSendMessage:

00004ad8 <CANSendMessage>:
bool CANSendMessage( ECANMessageType eType,
					 uint8_t* pu8Data,
					 uint8_t u8DataLen )
{
	// Don't transmit during bus-off recovery period
	if (sg_u8BusOffRecoveryDelay > 0)
    4ad8:	90 91 69 0b 	lds	r25, 0x0B69	; 0x800b69 <sg_u8BusOffRecoveryDelay>
    4adc:	91 11       	cpse	r25, r1
    4ade:	0d c0       	rjmp	.+26     	; 0x4afa <CANSendMessage+0x22>
	{
		return(false);
	}

	// Don't transmit during TX backoff period (adaptive backoff for persistent errors)
	if (sg_u8TxBackoffDelay > 0)
    4ae0:	90 91 67 0b 	lds	r25, 0x0B67	; 0x800b67 <sg_u8TxBackoffDelay>
    4ae4:	91 11       	cpse	r25, r1
    4ae6:	0b c0       	rjmp	.+22     	; 0x4afe <CANSendMessage+0x26>
		return(false);
	}

	// If we're busy, kick it back so we're cooperatively multitasking
	// rather than spin locking
	if (sg_u8Busy)
    4ae8:	90 91 6e 0b 	lds	r25, 0x0B6E	; 0x800b6e <sg_u8Busy>
    4aec:	91 11       	cpse	r25, r1
    4aee:	09 c0       	rjmp	.+18     	; 0x4b02 <CANSendMessage+0x2a>
	{
		return(false);
	}

	CANSendMessageInternal( eType, pu8Data, u8DataLen, false );
    4af0:	20 e0       	ldi	r18, 0x00	; 0
    4af2:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <CANSendMessageInternal>
	return( true );
    4af6:	81 e0       	ldi	r24, 0x01	; 1
    4af8:	08 95       	ret
					 uint8_t u8DataLen )
{
	// Don't transmit during bus-off recovery period
	if (sg_u8BusOffRecoveryDelay > 0)
	{
		return(false);
    4afa:	80 e0       	ldi	r24, 0x00	; 0
    4afc:	08 95       	ret
	}

	// Don't transmit during TX backoff period (adaptive backoff for persistent errors)
	if (sg_u8TxBackoffDelay > 0)
	{
		return(false);
    4afe:	80 e0       	ldi	r24, 0x00	; 0
    4b00:	08 95       	ret

	// If we're busy, kick it back so we're cooperatively multitasking
	// rather than spin locking
	if (sg_u8Busy)
	{
		return(false);
    4b02:	80 e0       	ldi	r24, 0x00	; 0
	}

	CANSendMessageInternal( eType, pu8Data, u8DataLen, false );
	return( true );
}
    4b04:	08 95       	ret

Disassembly of section .text.CANSetRXCallback:

00005236 <CANSetRXCallback>:

void CANSetRXCallback( void (*pfCallback)(ECANMessageType eType, uint8_t* pu8Data, uint8_t u8DataLen) )
{
	sg_pfRXCallback = pfCallback;
    5236:	90 93 5d 0b 	sts	0x0B5D, r25	; 0x800b5d <sg_pfRXCallback+0x1>
    523a:	80 93 5c 0b 	sts	0x0B5C, r24	; 0x800b5c <sg_pfRXCallback>
    523e:	08 95       	ret

Disassembly of section .text.CANInit:

000039b8 <CANInit>:
}

void CANInit( void )
{
    39b8:	0f 93       	push	r16
    39ba:	cf 93       	push	r28
	// Init clock
	// See datasheet table 16-2.
	// For 8Mhz, set CAN rate to 500 Kbps
	CANBT1 = 0x02;
    39bc:	c2 e0       	ldi	r28, 0x02	; 2
    39be:	c0 93 e2 00 	sts	0x00E2, r28	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f00e2>
	CANBT2 = 0x04;
    39c2:	84 e0       	ldi	r24, 0x04	; 4
    39c4:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f00e3>
	CANBT3 = 0x12;
    39c8:	82 e1       	ldi	r24, 0x12	; 18
    39ca:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7f00e4>
	
	// Init message objects (MOBs) since there are no defaults at reset
	CANMOBSet( 0, &sg_sMOBDisabled, NULL, 0 );
    39ce:	00 e0       	ldi	r16, 0x00	; 0
    39d0:	20 e0       	ldi	r18, 0x00	; 0
    39d2:	30 e0       	ldi	r19, 0x00	; 0
    39d4:	47 ea       	ldi	r20, 0xA7	; 167
    39d6:	53 e0       	ldi	r21, 0x03	; 3
    39d8:	60 e0       	ldi	r22, 0x00	; 0
    39da:	80 e0       	ldi	r24, 0x00	; 0
    39dc:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <CANMOBSet>
	CANMOBSet( 1, &sg_sMOBDisabled, NULL, 0 );
    39e0:	20 e0       	ldi	r18, 0x00	; 0
    39e2:	30 e0       	ldi	r19, 0x00	; 0
    39e4:	47 ea       	ldi	r20, 0xA7	; 167
    39e6:	53 e0       	ldi	r21, 0x03	; 3
    39e8:	60 e0       	ldi	r22, 0x00	; 0
    39ea:	81 e0       	ldi	r24, 0x01	; 1
    39ec:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <CANMOBSet>
	CANMOBSet( 2, &sg_sMOBDisabled, NULL, 0 );
    39f0:	20 e0       	ldi	r18, 0x00	; 0
    39f2:	30 e0       	ldi	r19, 0x00	; 0
    39f4:	47 ea       	ldi	r20, 0xA7	; 167
    39f6:	53 e0       	ldi	r21, 0x03	; 3
    39f8:	60 e0       	ldi	r22, 0x00	; 0
    39fa:	82 e0       	ldi	r24, 0x02	; 2
    39fc:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <CANMOBSet>
	CANMOBSet( 3, &sg_sMOBDisabled, NULL, 0 );
    3a00:	20 e0       	ldi	r18, 0x00	; 0
    3a02:	30 e0       	ldi	r19, 0x00	; 0
    3a04:	47 ea       	ldi	r20, 0xA7	; 167
    3a06:	53 e0       	ldi	r21, 0x03	; 3
    3a08:	60 e0       	ldi	r22, 0x00	; 0
    3a0a:	83 e0       	ldi	r24, 0x03	; 3
    3a0c:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <CANMOBSet>
	CANMOBSet( 4, &sg_sMOBDisabled, NULL, 0 );
    3a10:	20 e0       	ldi	r18, 0x00	; 0
    3a12:	30 e0       	ldi	r19, 0x00	; 0
    3a14:	47 ea       	ldi	r20, 0xA7	; 167
    3a16:	53 e0       	ldi	r21, 0x03	; 3
    3a18:	60 e0       	ldi	r22, 0x00	; 0
    3a1a:	84 e0       	ldi	r24, 0x04	; 4
    3a1c:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <CANMOBSet>
	CANMOBSet( 5, &sg_sMOBDisabled, NULL, 0 );
    3a20:	20 e0       	ldi	r18, 0x00	; 0
    3a22:	30 e0       	ldi	r19, 0x00	; 0
    3a24:	47 ea       	ldi	r20, 0xA7	; 167
    3a26:	53 e0       	ldi	r21, 0x03	; 3
    3a28:	60 e0       	ldi	r22, 0x00	; 0
    3a2a:	85 e0       	ldi	r24, 0x05	; 5
    3a2c:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <CANMOBSet>
	
	// Setup generic RX
	CANMOBSet( CANMOB_RX_IDX, &sg_sMOBGenericReceive, NULL, 0 );
    3a30:	20 e0       	ldi	r18, 0x00	; 0
    3a32:	30 e0       	ldi	r19, 0x00	; 0
    3a34:	4f e9       	ldi	r20, 0x9F	; 159
    3a36:	53 e0       	ldi	r21, 0x03	; 3
    3a38:	60 e0       	ldi	r22, 0x00	; 0
    3a3a:	80 e0       	ldi	r24, 0x00	; 0
    3a3c:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <CANMOBSet>
	
	// Enable general CAN interrupts
	CANGIE = (1 << ENIT) | (1 << ENRX) | (1 << ENTX) | (1 << ENERR) | (1 << ENBX) | (1 << ENERG);
    3a40:	8e eb       	ldi	r24, 0xBE	; 190
    3a42:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f00db>

//	CANGIE &= ~(1 << ENOVRT);  // Disable CAN timer overflow interrupt

	// Enable the bus
	CANGCON = (1 << ENASTB);
    3a46:	c0 93 d8 00 	sts	0x00D8, r28	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f00d8>
	sg_u8Busy = 0;
    3a4a:	10 92 6e 0b 	sts	0x0B6E, r1	; 0x800b6e <sg_u8Busy>
}
    3a4e:	cf 91       	pop	r28
    3a50:	0f 91       	pop	r16
    3a52:	08 95       	ret

Disassembly of section .text.CANCheckTxStatus:

00003680 <CANCheckTxStatus>:

void CANCheckTxStatus(void)
{
	// Only check if we think we're busy
	if (sg_u8Busy > 0)
    3680:	80 91 6e 0b 	lds	r24, 0x0B6E	; 0x800b6e <sg_u8Busy>
    3684:	88 23       	and	r24, r24
    3686:	09 f4       	brne	.+2      	; 0x368a <CANCheckTxStatus+0xa>
    3688:	50 c0       	rjmp	.+160    	; 0x372a <CANCheckTxStatus+0xaa>
	{
		// Save current MOB and switch to TX MOB
		uint8_t savedMOB = CANPAGE;
    368a:	ed ee       	ldi	r30, 0xED	; 237
    368c:	f0 e0       	ldi	r31, 0x00	; 0
    368e:	80 81       	ld	r24, Z
		CANPAGE = CANMOB_TX_IDX << MOBNB0;
    3690:	90 e1       	ldi	r25, 0x10	; 16
    3692:	90 83       	st	Z, r25

		// Check if transmission completed successfully
		if (CANSTMOB & (1 << TXOK))
    3694:	90 91 ee 00 	lds	r25, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    3698:	96 ff       	sbrs	r25, 6
    369a:	12 c0       	rjmp	.+36     	; 0x36c0 <CANCheckTxStatus+0x40>
		{
			// Clear the flag
			CANSTMOB &= ~(1 << TXOK);
    369c:	ee ee       	ldi	r30, 0xEE	; 238
    369e:	f0 e0       	ldi	r31, 0x00	; 0
    36a0:	90 81       	ld	r25, Z
    36a2:	9f 7b       	andi	r25, 0xBF	; 191
    36a4:	90 83       	st	Z, r25
			sg_u8Busy = 0;
    36a6:	10 92 6e 0b 	sts	0x0B6E, r1	; 0x800b6e <sg_u8Busy>
			sg_u16TxOkPolled++;	// Diagnostic: we caught TXOK by polling
    36aa:	20 91 56 0b 	lds	r18, 0x0B56	; 0x800b56 <sg_u16TxOkPolled>
    36ae:	30 91 57 0b 	lds	r19, 0x0B57	; 0x800b57 <sg_u16TxOkPolled+0x1>
    36b2:	2f 5f       	subi	r18, 0xFF	; 255
    36b4:	3f 4f       	sbci	r19, 0xFF	; 255
    36b6:	30 93 57 0b 	sts	0x0B57, r19	; 0x800b57 <sg_u16TxOkPolled+0x1>
    36ba:	20 93 56 0b 	sts	0x0B56, r18	; 0x800b56 <sg_u16TxOkPolled>
    36be:	33 c0       	rjmp	.+102    	; 0x3726 <CANCheckTxStatus+0xa6>
		}
		// Check for transmission errors
		else if (CANSTMOB & ((1 << BERR) | (1 << SERR) | (1 << CERR) | (1 << FERR) | (1 << AERR)))
    36c0:	90 91 ee 00 	lds	r25, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    36c4:	9f 71       	andi	r25, 0x1F	; 31
    36c6:	89 f0       	breq	.+34     	; 0x36ea <CANCheckTxStatus+0x6a>
		{
			// Clear all error flags and reset busy flag
			CANSTMOB = 0x00;
    36c8:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
			sg_u8Busy = 0;
    36cc:	10 92 6e 0b 	sts	0x0B6E, r1	; 0x800b6e <sg_u8Busy>
			sg_u16TxErrors++;	// Diagnostic: error recovered
    36d0:	20 91 58 0b 	lds	r18, 0x0B58	; 0x800b58 <sg_u16TxErrors>
    36d4:	30 91 59 0b 	lds	r19, 0x0B59	; 0x800b59 <sg_u16TxErrors+0x1>
    36d8:	2f 5f       	subi	r18, 0xFF	; 255
    36da:	3f 4f       	sbci	r19, 0xFF	; 255
    36dc:	30 93 59 0b 	sts	0x0B59, r19	; 0x800b59 <sg_u16TxErrors+0x1>
    36e0:	20 93 58 0b 	sts	0x0B58, r18	; 0x800b58 <sg_u16TxErrors>

			// Clear in-retransmit flag since we're giving up
			sg_bInRetransmit = false;
    36e4:	10 92 6a 0b 	sts	0x0B6A, r1	; 0x800b6a <sg_bInRetransmit>
    36e8:	1e c0       	rjmp	.+60     	; 0x3726 <CANCheckTxStatus+0xa6>
		}
		else
		{
			// No completion or error yet, decrement timeout counter
			sg_u8Busy--;
    36ea:	90 91 6e 0b 	lds	r25, 0x0B6E	; 0x800b6e <sg_u8Busy>
    36ee:	91 50       	subi	r25, 0x01	; 1
    36f0:	90 93 6e 0b 	sts	0x0B6E, r25	; 0x800b6e <sg_u8Busy>

			// If timeout expired, force clear
			if (sg_u8Busy == 0)
    36f4:	90 91 6e 0b 	lds	r25, 0x0B6E	; 0x800b6e <sg_u8Busy>
    36f8:	91 11       	cpse	r25, r1
    36fa:	15 c0       	rjmp	.+42     	; 0x3726 <CANCheckTxStatus+0xa6>
			{
				// Clear any pending status and disable the MOB
				CANSTMOB = 0x00;
    36fc:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
				CANCDMOB = 0x00;	// Disable the MOB
    3700:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>

				// Clear in-retransmit flag since we're giving up
				sg_bInRetransmit = false;
    3704:	10 92 6a 0b 	sts	0x0B6A, r1	; 0x800b6a <sg_bInRetransmit>

				// Disable the MOB interrupt to prevent spurious interrupts
				CANIE2 &= ~(1 << CANMOB_TX_IDX);
    3708:	ee ed       	ldi	r30, 0xDE	; 222
    370a:	f0 e0       	ldi	r31, 0x00	; 0
    370c:	90 81       	ld	r25, Z
    370e:	9d 7f       	andi	r25, 0xFD	; 253
    3710:	90 83       	st	Z, r25

				sg_u16TxTimeouts++;	// Diagnostic: timeout occurred
    3712:	20 91 5a 0b 	lds	r18, 0x0B5A	; 0x800b5a <sg_u16TxTimeouts>
    3716:	30 91 5b 0b 	lds	r19, 0x0B5B	; 0x800b5b <sg_u16TxTimeouts+0x1>
    371a:	2f 5f       	subi	r18, 0xFF	; 255
    371c:	3f 4f       	sbci	r19, 0xFF	; 255
    371e:	30 93 5b 0b 	sts	0x0B5B, r19	; 0x800b5b <sg_u16TxTimeouts+0x1>
    3722:	20 93 5a 0b 	sts	0x0B5A, r18	; 0x800b5a <sg_u16TxTimeouts>
			}
		}

		// Restore MOB
		CANPAGE = savedMOB;
    3726:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f00ed>
    372a:	08 95       	ret

Disassembly of section .text.CANCheckHealth:

00002906 <CANCheckHealth>:
{
	return sg_u8TxBackoffDelay;
}

void CANCheckHealth(void)
{
    2906:	0f 93       	push	r16
	// Decrement bus-off recovery delay if active
	if (sg_u8BusOffRecoveryDelay > 0)
    2908:	80 91 69 0b 	lds	r24, 0x0B69	; 0x800b69 <sg_u8BusOffRecoveryDelay>
    290c:	88 23       	and	r24, r24
    290e:	19 f0       	breq	.+6      	; 0x2916 <CANCheckHealth+0x10>
	{
		sg_u8BusOffRecoveryDelay--;
    2910:	81 50       	subi	r24, 0x01	; 1
    2912:	80 93 69 0b 	sts	0x0B69, r24	; 0x800b69 <sg_u8BusOffRecoveryDelay>
	}

	// Decrement TX backoff delay if active
	if (sg_u8TxBackoffDelay > 0)
    2916:	80 91 67 0b 	lds	r24, 0x0B67	; 0x800b67 <sg_u8TxBackoffDelay>
    291a:	88 23       	and	r24, r24
    291c:	19 f0       	breq	.+6      	; 0x2924 <CANCheckHealth+0x1e>
	{
		sg_u8TxBackoffDelay--;
    291e:	81 50       	subi	r24, 0x01	; 1
    2920:	80 93 67 0b 	sts	0x0B67, r24	; 0x800b67 <sg_u8TxBackoffDelay>
	}

	// Store current error counter values for diagnostics
	static uint8_t lastTEC = 0;
	static uint8_t lastREC = 0;
	uint8_t currentTEC = CANTEC;
    2924:	20 91 ea 00 	lds	r18, 0x00EA	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7f00ea>
	uint8_t currentREC = CANREC;
    2928:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f00eb>

	// Detect TX-only errors (TEC increasing but REC stays at 0)
	// This indicates the module can't transmit but isn't seeing bus activity
	// Likely a hardware issue with TX circuitry or transceiver
	if ((currentTEC > lastTEC) && (currentREC == 0) && (lastREC == 0))
    292c:	80 91 66 0b 	lds	r24, 0x0B66	; 0x800b66 <lastTEC.2006>
    2930:	82 17       	cp	r24, r18
    2932:	48 f5       	brcc	.+82     	; 0x2986 <CANCheckHealth+0x80>
    2934:	31 11       	cpse	r19, r1
    2936:	27 c0       	rjmp	.+78     	; 0x2986 <CANCheckHealth+0x80>
    2938:	90 91 65 0b 	lds	r25, 0x0B65	; 0x800b65 <lastREC.2007>
    293c:	91 11       	cpse	r25, r1
    293e:	23 c0       	rjmp	.+70     	; 0x2986 <CANCheckHealth+0x80>
	{
		sg_u8TxOnlyErrorCount++;
    2940:	40 91 68 0b 	lds	r20, 0x0B68	; 0x800b68 <sg_u8TxOnlyErrorCount>
    2944:	4f 5f       	subi	r20, 0xFF	; 255
    2946:	40 93 68 0b 	sts	0x0B68, r20	; 0x800b68 <sg_u8TxOnlyErrorCount>

		// If we have persistent TX-only errors, apply adaptive backoff
		if (sg_u8TxOnlyErrorCount > 3)
    294a:	44 30       	cpi	r20, 0x04	; 4
    294c:	f8 f0       	brcs	.+62     	; 0x298c <CANCheckHealth+0x86>
		{
			// Exponential backoff: 2, 4, 8, 16 ticks (200ms to 1.6s)
			if (sg_u8TxBackoffDelay == 0)
    294e:	90 91 67 0b 	lds	r25, 0x0B67	; 0x800b67 <sg_u8TxBackoffDelay>
    2952:	91 11       	cpse	r25, r1
    2954:	1b c0       	rjmp	.+54     	; 0x298c <CANCheckHealth+0x86>
			{
				sg_u8TxBackoffDelay = 2 << ((sg_u8TxOnlyErrorCount - 3) > 3 ? 3 : (sg_u8TxOnlyErrorCount - 3));
    2956:	50 e0       	ldi	r21, 0x00	; 0
    2958:	43 50       	subi	r20, 0x03	; 3
    295a:	51 09       	sbc	r21, r1
    295c:	44 30       	cpi	r20, 0x04	; 4
    295e:	51 05       	cpc	r21, r1
    2960:	14 f0       	brlt	.+4      	; 0x2966 <CANCheckHealth+0x60>
    2962:	43 e0       	ldi	r20, 0x03	; 3
    2964:	50 e0       	ldi	r21, 0x00	; 0
    2966:	62 e0       	ldi	r22, 0x02	; 2
    2968:	70 e0       	ldi	r23, 0x00	; 0
    296a:	fb 01       	movw	r30, r22
    296c:	02 c0       	rjmp	.+4      	; 0x2972 <CANCheckHealth+0x6c>
    296e:	ee 0f       	add	r30, r30
    2970:	ff 1f       	adc	r31, r31
    2972:	4a 95       	dec	r20
    2974:	e2 f7       	brpl	.-8      	; 0x296e <CANCheckHealth+0x68>
    2976:	e0 93 67 0b 	sts	0x0B67, r30	; 0x800b67 <sg_u8TxBackoffDelay>
				if (sg_u8TxBackoffDelay > 16)
    297a:	e1 31       	cpi	r30, 0x11	; 17
    297c:	38 f0       	brcs	.+14     	; 0x298c <CANCheckHealth+0x86>
				{
					sg_u8TxBackoffDelay = 16;	// Cap at 1.6 seconds
    297e:	90 e1       	ldi	r25, 0x10	; 16
    2980:	90 93 67 0b 	sts	0x0B67, r25	; 0x800b67 <sg_u8TxBackoffDelay>
    2984:	03 c0       	rjmp	.+6      	; 0x298c <CANCheckHealth+0x86>
				}
			}
		}
	}
	else if (currentREC > 0)
    2986:	31 11       	cpse	r19, r1
	{
		// We're seeing bus activity - reset TX-only error counter
		sg_u8TxOnlyErrorCount = 0;
    2988:	10 92 68 0b 	sts	0x0B68, r1	; 0x800b68 <sg_u8TxOnlyErrorCount>
	}

	// Check if error counters are increasing rapidly (sign of bus problems)
	if ((currentTEC > lastTEC + 10) || (currentREC > lastREC + 10))
    298c:	42 2f       	mov	r20, r18
    298e:	50 e0       	ldi	r21, 0x00	; 0
    2990:	90 e0       	ldi	r25, 0x00	; 0
    2992:	0a 96       	adiw	r24, 0x0a	; 10
    2994:	84 17       	cp	r24, r20
    2996:	95 07       	cpc	r25, r21
    2998:	4c f0       	brlt	.+18     	; 0x29ac <CANCheckHealth+0xa6>
    299a:	43 2f       	mov	r20, r19
    299c:	50 e0       	ldi	r21, 0x00	; 0
    299e:	80 91 65 0b 	lds	r24, 0x0B65	; 0x800b65 <lastREC.2007>
    29a2:	90 e0       	ldi	r25, 0x00	; 0
    29a4:	0a 96       	adiw	r24, 0x0a	; 10
    29a6:	84 17       	cp	r24, r20
    29a8:	95 07       	cpc	r25, r21
    29aa:	3c f4       	brge	.+14     	; 0x29ba <CANCheckHealth+0xb4>
	{
		// Rapid error increase - likely physical bus problem
		// Apply temporary backoff
		if (sg_u8TxBackoffDelay < 5)
    29ac:	80 91 67 0b 	lds	r24, 0x0B67	; 0x800b67 <sg_u8TxBackoffDelay>
    29b0:	85 30       	cpi	r24, 0x05	; 5
    29b2:	18 f4       	brcc	.+6      	; 0x29ba <CANCheckHealth+0xb4>
		{
			sg_u8TxBackoffDelay = 5;	// 500ms backoff for rapid errors
    29b4:	85 e0       	ldi	r24, 0x05	; 5
    29b6:	80 93 67 0b 	sts	0x0B67, r24	; 0x800b67 <sg_u8TxBackoffDelay>
		}
	}

	lastTEC = currentTEC;
    29ba:	20 93 66 0b 	sts	0x0B66, r18	; 0x800b66 <lastTEC.2006>
	lastREC = currentREC;
    29be:	30 93 65 0b 	sts	0x0B65, r19	; 0x800b65 <lastREC.2007>

	// Check if CAN controller is in error passive state
	// TEC (Transmit Error Counter) or REC (Receive Error Counter) > 127
	if ((currentTEC > 127) || (currentREC > 127))
    29c2:	22 23       	and	r18, r18
    29c4:	14 f0       	brlt	.+4      	; 0x29ca <CANCheckHealth+0xc4>
    29c6:	33 23       	and	r19, r19
    29c8:	4c f4       	brge	.+18     	; 0x29dc <CANCheckHealth+0xd6>
	{
		sg_u16ErrorPassive++;
    29ca:	80 91 45 0b 	lds	r24, 0x0B45	; 0x800b45 <sg_u16ErrorPassive>
    29ce:	90 91 46 0b 	lds	r25, 0x0B46	; 0x800b46 <sg_u16ErrorPassive+0x1>
    29d2:	01 96       	adiw	r24, 0x01	; 1
    29d4:	90 93 46 0b 	sts	0x0B46, r25	; 0x800b46 <sg_u16ErrorPassive+0x1>
    29d8:	80 93 45 0b 	sts	0x0B45, r24	; 0x800b45 <sg_u16ErrorPassive>
		// Very close to bus-off (255) - try to prevent it
		// Could temporarily stop transmitting to let errors clear
	}

	// Check if CAN is disabled (should always be enabled)
	if (!(CANGSTA & (1 << ENFG)))
    29dc:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7f00d9>
    29e0:	82 fd       	sbrc	r24, 2
    29e2:	12 c0       	rjmp	.+36     	; 0x2a08 <CANCheckHealth+0x102>
	{
		// CAN controller is disabled - re-enable it!
		CANGCON = (1 << ENASTB);
    29e4:	82 e0       	ldi	r24, 0x02	; 2
    29e6:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f00d8>

		// Re-initialize RX MOB since controller was disabled
		CANMOBSet(CANMOB_RX_IDX, &sg_sMOBGenericReceive, NULL, 0);
    29ea:	00 e0       	ldi	r16, 0x00	; 0
    29ec:	20 e0       	ldi	r18, 0x00	; 0
    29ee:	30 e0       	ldi	r19, 0x00	; 0
    29f0:	4f e9       	ldi	r20, 0x9F	; 159
    29f2:	53 e0       	ldi	r21, 0x03	; 3
    29f4:	60 e0       	ldi	r22, 0x00	; 0
    29f6:	80 e0       	ldi	r24, 0x00	; 0
    29f8:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <CANMOBSet>

		// After bus-off recovery, error counters should be at 0
		// If they're not, there's still a bus problem
		if ((CANTEC > 0) || (CANREC > 0))
    29fc:	80 91 ea 00 	lds	r24, 0x00EA	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7f00ea>
    2a00:	81 11       	cpse	r24, r1
    2a02:	02 c0       	rjmp	.+4      	; 0x2a08 <CANCheckHealth+0x102>
    2a04:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f00eb>
			// Still have errors after re-enable - bus problem persists
		}
	}

	// Check if RX MOB is still enabled
	uint8_t savedMOB = CANPAGE;
    2a08:	ed ee       	ldi	r30, 0xED	; 237
    2a0a:	f0 e0       	ldi	r31, 0x00	; 0
    2a0c:	90 81       	ld	r25, Z
	CANPAGE = CANMOB_RX_IDX << MOBNB0;
    2a0e:	10 82       	st	Z, r1

	// If RX MOB is disabled (CONMOB bits are 0), re-enable it
	if ((CANCDMOB & 0xC0) == 0)
    2a10:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    2a14:	80 7c       	andi	r24, 0xC0	; 192
    2a16:	59 f4       	brne	.+22     	; 0x2a2e <CANCheckHealth+0x128>
	{
		// RX MOB is disabled - this shouldn't happen!
		// Re-enable it
		CANPAGE = savedMOB;  // Restore first
    2a18:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f00ed>
		CANMOBSet(CANMOB_RX_IDX, &sg_sMOBGenericReceive, NULL, 0);
    2a1c:	00 e0       	ldi	r16, 0x00	; 0
    2a1e:	20 e0       	ldi	r18, 0x00	; 0
    2a20:	30 e0       	ldi	r19, 0x00	; 0
    2a22:	4f e9       	ldi	r20, 0x9F	; 159
    2a24:	53 e0       	ldi	r21, 0x03	; 3
    2a26:	60 e0       	ldi	r22, 0x00	; 0
    2a28:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <CANMOBSet>
    2a2c:	02 c0       	rjmp	.+4      	; 0x2a32 <CANCheckHealth+0x12c>
	}
	else
	{
		CANPAGE = savedMOB;  // Restore MOB
    2a2e:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f00ed>
	}
}
    2a32:	0f 91       	pop	r16
    2a34:	08 95       	ret

Disassembly of section .text.DebugOut:

000051e6 <DebugOut>:
}

#endif

void DebugOut( const char* peFormat, ... )
{
    51e6:	cf 93       	push	r28
    51e8:	df 93       	push	r29
    51ea:	cd b7       	in	r28, 0x3d	; 61
    51ec:	de b7       	in	r29, 0x3e	; 62
	
	va_end( args );	 */
	
	//DebugSerialSend( (uint8_t*)u8Buffer, strlen(u8Buffer) );
#endif
}
    51ee:	df 91       	pop	r29
    51f0:	cf 91       	pop	r28
    51f2:	08 95       	ret

Disassembly of section .text.EEPROMRead:

0000514c <EEPROMRead>:
}

uint8_t EEPROMRead(uint16_t u16Address)
{
	// Wait for any completion of writes, etc..
	while (EECR & (1 << EEWE));
    514c:	f9 99       	sbic	0x1f, 1	; 31
    514e:	fe cf       	rjmp	.-4      	; 0x514c <EEPROMRead>

	// Set address	
	EEAR = u16Address;
    5150:	92 bd       	out	0x22, r25	; 34
    5152:	81 bd       	out	0x21, r24	; 33
	
	// Start EEPROM read
	EECR |= (1 << EERE);
    5154:	8f b3       	in	r24, 0x1f	; 31
    5156:	81 60       	ori	r24, 0x01	; 1
    5158:	8f bb       	out	0x1f, r24	; 31
	
	// Return the data
	return(EEDR);
    515a:	80 b5       	in	r24, 0x20	; 32
    515c:	08 95       	ret

Disassembly of section .text.I2CBitDelay:

000051f4 <I2CBitDelay>:
#define SDA_SET_INPUT()			(I2C_PORT_DDR &= ((uint8_t) ~(1 << I2C_SDA_PIN))); SDA_HIGH()

// Delays for one I2C bit's worth of time
static void I2CBitDelay(void)
{
	Delay(10);
    51f4:	6a e0       	ldi	r22, 0x0A	; 10
    51f6:	70 e0       	ldi	r23, 0x00	; 0
    51f8:	80 e0       	ldi	r24, 0x00	; 0
    51fa:	90 e0       	ldi	r25, 0x00	; 0
    51fc:	0e 94 fe 22 	call	0x45fc	; 0x45fc <Delay>
    5200:	08 95       	ret

Disassembly of section .text.I2CStart:

00004b34 <I2CStart>:

// Send an I2C start sequence and quantize foreground code to the overflow
// timer
void I2CStart(void)
{
	SDA_SET_OUTPUT();
    4b34:	8a b1       	in	r24, 0x0a	; 10
    4b36:	82 60       	ori	r24, 0x02	; 2
    4b38:	8a b9       	out	0x0a, r24	; 10
	SDA_HIGH();
    4b3a:	8b b1       	in	r24, 0x0b	; 11
    4b3c:	82 60       	ori	r24, 0x02	; 2
    4b3e:	8b b9       	out	0x0b, r24	; 11
	SCL_HIGH();
    4b40:	8b b1       	in	r24, 0x0b	; 11
    4b42:	81 60       	ori	r24, 0x01	; 1
    4b44:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    4b46:	0e 94 fa 28 	call	0x51f4	; 0x51f4 <I2CBitDelay>
	SDA_LOW();
    4b4a:	8b b1       	in	r24, 0x0b	; 11
    4b4c:	8d 7f       	andi	r24, 0xFD	; 253
    4b4e:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    4b50:	0e 94 fa 28 	call	0x51f4	; 0x51f4 <I2CBitDelay>
	SCL_LOW();
    4b54:	8b b1       	in	r24, 0x0b	; 11
    4b56:	8e 7f       	andi	r24, 0xFE	; 254
    4b58:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    4b5a:	0e 94 fa 28 	call	0x51f4	; 0x51f4 <I2CBitDelay>
    4b5e:	08 95       	ret

Disassembly of section .text.I2CStop:

00004cda <I2CStop>:
}

// Send an I2C stop sequence
void I2CStop(void)
{
	SDA_LOW();
    4cda:	8b b1       	in	r24, 0x0b	; 11
    4cdc:	8d 7f       	andi	r24, 0xFD	; 253
    4cde:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    4ce0:	0e 94 fa 28 	call	0x51f4	; 0x51f4 <I2CBitDelay>
	SCL_HIGH();
    4ce4:	8b b1       	in	r24, 0x0b	; 11
    4ce6:	81 60       	ori	r24, 0x01	; 1
    4ce8:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    4cea:	0e 94 fa 28 	call	0x51f4	; 0x51f4 <I2CBitDelay>
	SDA_SET_INPUT();
    4cee:	8a b1       	in	r24, 0x0a	; 10
    4cf0:	8d 7f       	andi	r24, 0xFD	; 253
    4cf2:	8a b9       	out	0x0a, r24	; 10
    4cf4:	8b b1       	in	r24, 0x0b	; 11
    4cf6:	82 60       	ori	r24, 0x02	; 2
    4cf8:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    4cfa:	0e 94 fa 28 	call	0x51f4	; 0x51f4 <I2CBitDelay>
    4cfe:	08 95       	ret

Disassembly of section .text.I2CUnstick:

00004850 <I2CUnstick>:
}

// Unsticks an I2C bus
void I2CUnstick(void)
{
    4850:	cf 93       	push	r28
	uint8_t u8UnstickBits = 64;

	SCL_SET_OUTPUT();
    4852:	8a b1       	in	r24, 0x0a	; 10
    4854:	81 60       	ori	r24, 0x01	; 1
    4856:	8a b9       	out	0x0a, r24	; 10
	SDA_SET_OUTPUT();
    4858:	8a b1       	in	r24, 0x0a	; 10
    485a:	82 60       	ori	r24, 0x02	; 2
    485c:	8a b9       	out	0x0a, r24	; 10
}

// Unsticks an I2C bus
void I2CUnstick(void)
{
	uint8_t u8UnstickBits = 64;
    485e:	c0 e4       	ldi	r28, 0x40	; 64

	SCL_SET_OUTPUT();
	SDA_SET_OUTPUT();
	
	while (u8UnstickBits)
    4860:	11 c0       	rjmp	.+34     	; 0x4884 <I2CUnstick+0x34>
	{
		SCL_LOW();
    4862:	8b b1       	in	r24, 0x0b	; 11
    4864:	8e 7f       	andi	r24, 0xFE	; 254
    4866:	8b b9       	out	0x0b, r24	; 11
		SDA_LOW();
    4868:	8b b1       	in	r24, 0x0b	; 11
    486a:	8d 7f       	andi	r24, 0xFD	; 253
    486c:	8b b9       	out	0x0b, r24	; 11
		I2CBitDelay();
    486e:	0e 94 fa 28 	call	0x51f4	; 0x51f4 <I2CBitDelay>
		SCL_HIGH();
    4872:	8b b1       	in	r24, 0x0b	; 11
    4874:	81 60       	ori	r24, 0x01	; 1
    4876:	8b b9       	out	0x0b, r24	; 11
		SDA_HIGH();
    4878:	8b b1       	in	r24, 0x0b	; 11
    487a:	82 60       	ori	r24, 0x02	; 2
    487c:	8b b9       	out	0x0b, r24	; 11
		I2CBitDelay();
    487e:	0e 94 fa 28 	call	0x51f4	; 0x51f4 <I2CBitDelay>
		u8UnstickBits--;
    4882:	c1 50       	subi	r28, 0x01	; 1
	uint8_t u8UnstickBits = 64;

	SCL_SET_OUTPUT();
	SDA_SET_OUTPUT();
	
	while (u8UnstickBits)
    4884:	c1 11       	cpse	r28, r1
    4886:	ed cf       	rjmp	.-38     	; 0x4862 <I2CUnstick+0x12>
		SCL_HIGH();
		SDA_HIGH();
		I2CBitDelay();
		u8UnstickBits--;
	}
}
    4888:	cf 91       	pop	r28
    488a:	08 95       	ret

Disassembly of section .text.I2CTxByte:

000040ec <I2CTxByte>:

// Sends a single I2C byte. Returns false if the byte is not acked, or true if it is.
bool I2CTxByte(uint8_t u8Byte)
{
    40ec:	cf 93       	push	r28
    40ee:	df 93       	push	r29
    40f0:	d8 2f       	mov	r29, r24
	uint8_t u8Length = 8;			// 8 Bits to send
	bool bAck = false;

	SDA_SET_OUTPUT();
    40f2:	8a b1       	in	r24, 0x0a	; 10
    40f4:	82 60       	ori	r24, 0x02	; 2
    40f6:	8a b9       	out	0x0a, r24	; 10
}

// Sends a single I2C byte. Returns false if the byte is not acked, or true if it is.
bool I2CTxByte(uint8_t u8Byte)
{
	uint8_t u8Length = 8;			// 8 Bits to send
    40f8:	c8 e0       	ldi	r28, 0x08	; 8
	bool bAck = false;

	SDA_SET_OUTPUT();

	while (u8Length)
    40fa:	15 c0       	rjmp	.+42     	; 0x4126 <I2CTxByte+0x3a>
	{
		if (u8Byte & 0x80)
    40fc:	dd 23       	and	r29, r29
    40fe:	24 f4       	brge	.+8      	; 0x4108 <I2CTxByte+0x1c>
		{
			SDA_HIGH();
    4100:	8b b1       	in	r24, 0x0b	; 11
    4102:	82 60       	ori	r24, 0x02	; 2
    4104:	8b b9       	out	0x0b, r24	; 11
    4106:	03 c0       	rjmp	.+6      	; 0x410e <I2CTxByte+0x22>
		}
		else
		{
			SDA_LOW();
    4108:	8b b1       	in	r24, 0x0b	; 11
    410a:	8d 7f       	andi	r24, 0xFD	; 253
    410c:	8b b9       	out	0x0b, r24	; 11
		}
		
		// Drive SCL high
		SCL_HIGH();
    410e:	8b b1       	in	r24, 0x0b	; 11
    4110:	81 60       	ori	r24, 0x01	; 1
    4112:	8b b9       	out	0x0b, r24	; 11
		
		I2CBitDelay();
    4114:	0e 94 fa 28 	call	0x51f4	; 0x51f4 <I2CBitDelay>
		
		// Ensure SCL is low
		SCL_LOW();
    4118:	8b b1       	in	r24, 0x0b	; 11
    411a:	8e 7f       	andi	r24, 0xFE	; 254
    411c:	8b b9       	out	0x0b, r24	; 11
	
		// SDA Is now set. Delay.
		I2CBitDelay();
    411e:	0e 94 fa 28 	call	0x51f4	; 0x51f4 <I2CBitDelay>
		
		// Next bit
		u8Byte <<= 1;	
    4122:	dd 0f       	add	r29, r29
		u8Length--;
    4124:	c1 50       	subi	r28, 0x01	; 1
	uint8_t u8Length = 8;			// 8 Bits to send
	bool bAck = false;

	SDA_SET_OUTPUT();

	while (u8Length)
    4126:	c1 11       	cpse	r28, r1
    4128:	e9 cf       	rjmp	.-46     	; 0x40fc <I2CTxByte+0x10>
		// Next bit
		u8Byte <<= 1;	
		u8Length--;
	}
	
	SDA_SET_INPUT();
    412a:	8a b1       	in	r24, 0x0a	; 10
    412c:	8d 7f       	andi	r24, 0xFD	; 253
    412e:	8a b9       	out	0x0a, r24	; 10
    4130:	8b b1       	in	r24, 0x0b	; 11
    4132:	82 60       	ori	r24, 0x02	; 2
    4134:	8b b9       	out	0x0b, r24	; 11
	SCL_HIGH();
    4136:	8b b1       	in	r24, 0x0b	; 11
    4138:	81 60       	ori	r24, 0x01	; 1
    413a:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    413c:	0e 94 fa 28 	call	0x51f4	; 0x51f4 <I2CBitDelay>
	
	// See if the byte was acknowledged
	if (SDA_READ())
    4140:	49 9b       	sbis	0x09, 1	; 9
	{
		bAck = false;
	}
	else
	{
		bAck = true;
    4142:	c1 e0       	ldi	r28, 0x01	; 1
	}
	
	SCL_LOW();
    4144:	8b b1       	in	r24, 0x0b	; 11
    4146:	8e 7f       	andi	r24, 0xFE	; 254
    4148:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    414a:	0e 94 fa 28 	call	0x51f4	; 0x51f4 <I2CBitDelay>
	return(bAck);
}
    414e:	8c 2f       	mov	r24, r28
    4150:	df 91       	pop	r29
    4152:	cf 91       	pop	r28
    4154:	08 95       	ret

Disassembly of section .text.I2CRxByte:

00004006 <I2CRxByte>:

// Receives a single I2C byte and will optionally generate an ack at the end
uint8_t I2CRxByte(bool bAck)
{
    4006:	1f 93       	push	r17
    4008:	cf 93       	push	r28
    400a:	df 93       	push	r29
    400c:	18 2f       	mov	r17, r24
	uint8_t u8Data = 0;
	uint8_t u8Count = 8;
	
	SDA_SET_INPUT();
    400e:	8a b1       	in	r24, 0x0a	; 10
    4010:	8d 7f       	andi	r24, 0xFD	; 253
    4012:	8a b9       	out	0x0a, r24	; 10
    4014:	8b b1       	in	r24, 0x0b	; 11
    4016:	82 60       	ori	r24, 0x02	; 2
    4018:	8b b9       	out	0x0b, r24	; 11

// Receives a single I2C byte and will optionally generate an ack at the end
uint8_t I2CRxByte(bool bAck)
{
	uint8_t u8Data = 0;
	uint8_t u8Count = 8;
    401a:	c8 e0       	ldi	r28, 0x08	; 8
}

// Receives a single I2C byte and will optionally generate an ack at the end
uint8_t I2CRxByte(bool bAck)
{
	uint8_t u8Data = 0;
    401c:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t u8Count = 8;
	
	SDA_SET_INPUT();
	
	// Consume all 8 data bits
	while (u8Count)
    401e:	0e c0       	rjmp	.+28     	; 0x403c <I2CRxByte+0x36>
	{
		u8Data <<= 1;
    4020:	dd 0f       	add	r29, r29

		SCL_HIGH();
    4022:	8b b1       	in	r24, 0x0b	; 11
    4024:	81 60       	ori	r24, 0x01	; 1
    4026:	8b b9       	out	0x0b, r24	; 11
		I2CBitDelay();
    4028:	0e 94 fa 28 	call	0x51f4	; 0x51f4 <I2CBitDelay>
			
		if (SDA_READ())
    402c:	49 99       	sbic	0x09, 1	; 9
		{
			u8Data |= 1;
    402e:	d1 60       	ori	r29, 0x01	; 1
		}
		
		SCL_LOW();
    4030:	8b b1       	in	r24, 0x0b	; 11
    4032:	8e 7f       	andi	r24, 0xFE	; 254
    4034:	8b b9       	out	0x0b, r24	; 11
		I2CBitDelay();
    4036:	0e 94 fa 28 	call	0x51f4	; 0x51f4 <I2CBitDelay>
		u8Count--;
    403a:	c1 50       	subi	r28, 0x01	; 1
	uint8_t u8Count = 8;
	
	SDA_SET_INPUT();
	
	// Consume all 8 data bits
	while (u8Count)
    403c:	c1 11       	cpse	r28, r1
    403e:	f0 cf       	rjmp	.-32     	; 0x4020 <I2CRxByte+0x1a>
		I2CBitDelay();
		u8Count--;
	}

	// See if we acknowledge this
	SDA_SET_OUTPUT();
    4040:	8a b1       	in	r24, 0x0a	; 10
    4042:	82 60       	ori	r24, 0x02	; 2
    4044:	8a b9       	out	0x0a, r24	; 10
	if (bAck)
    4046:	11 23       	and	r17, r17
    4048:	21 f0       	breq	.+8      	; 0x4052 <I2CRxByte+0x4c>
	{
		SDA_LOW();
    404a:	8b b1       	in	r24, 0x0b	; 11
    404c:	8d 7f       	andi	r24, 0xFD	; 253
    404e:	8b b9       	out	0x0b, r24	; 11
    4050:	03 c0       	rjmp	.+6      	; 0x4058 <I2CRxByte+0x52>
	}
	else
	{
		SDA_HIGH();
    4052:	8b b1       	in	r24, 0x0b	; 11
    4054:	82 60       	ori	r24, 0x02	; 2
    4056:	8b b9       	out	0x0b, r24	; 11
	}
	
	I2CBitDelay();
    4058:	0e 94 fa 28 	call	0x51f4	; 0x51f4 <I2CBitDelay>
	SCL_HIGH();
    405c:	8b b1       	in	r24, 0x0b	; 11
    405e:	81 60       	ori	r24, 0x01	; 1
    4060:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    4062:	0e 94 fa 28 	call	0x51f4	; 0x51f4 <I2CBitDelay>
	SCL_LOW();
    4066:	8b b1       	in	r24, 0x0b	; 11
    4068:	8e 7f       	andi	r24, 0xFE	; 254
    406a:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    406c:	0e 94 fa 28 	call	0x51f4	; 0x51f4 <I2CBitDelay>
	SDA_LOW();
    4070:	8b b1       	in	r24, 0x0b	; 11
    4072:	8d 7f       	andi	r24, 0xFD	; 253
    4074:	8b b9       	out	0x0b, r24	; 11

	return(u8Data);	
}
    4076:	8d 2f       	mov	r24, r29
    4078:	df 91       	pop	r29
    407a:	cf 91       	pop	r28
    407c:	1f 91       	pop	r17
    407e:	08 95       	ret

Disassembly of section .text.I2CSetup:

00004b60 <I2CSetup>:
// Prepares the SCL/SDA pins for I2C operation and returns when the CPU is
// quantized to the timer (for consistent bit alignment)
void I2CSetup(void)
{
	// Deassert SCL and SDA
	SCL_HIGH();
    4b60:	8b b1       	in	r24, 0x0b	; 11
    4b62:	81 60       	ori	r24, 0x01	; 1
    4b64:	8b b9       	out	0x0b, r24	; 11
	SDA_HIGH();
    4b66:	8b b1       	in	r24, 0x0b	; 11
    4b68:	82 60       	ori	r24, 0x02	; 2
    4b6a:	8b b9       	out	0x0b, r24	; 11

	// Set SCL and SDA lines as push/pull output drives
	SCL_SET_OUTPUT();
    4b6c:	8a b1       	in	r24, 0x0a	; 10
    4b6e:	81 60       	ori	r24, 0x01	; 1
    4b70:	8a b9       	out	0x0a, r24	; 10
	
	// Turn on SDA, set as an input
	SDA_SET_INPUT();
    4b72:	8a b1       	in	r24, 0x0a	; 10
    4b74:	8d 7f       	andi	r24, 0xFD	; 253
    4b76:	8a b9       	out	0x0a, r24	; 10
    4b78:	8b b1       	in	r24, 0x0b	; 11
    4b7a:	82 60       	ori	r24, 0x02	; 2
    4b7c:	8b b9       	out	0x0b, r24	; 11
	
	Delay(20);
    4b7e:	64 e1       	ldi	r22, 0x14	; 20
    4b80:	70 e0       	ldi	r23, 0x00	; 0
    4b82:	80 e0       	ldi	r24, 0x00	; 0
    4b84:	90 e0       	ldi	r25, 0x00	; 0
    4b86:	0e 94 fe 22 	call	0x45fc	; 0x45fc <Delay>
    4b8a:	08 95       	ret

Disassembly of section .text.I2CStartTransaction:

00004c3a <I2CStartTransaction>:

// Sets up the I2C pins, sends slave address/read/write byte, and waits for acknowledgment.
// Returns false if no device is responding.
bool I2CStartTransaction(uint8_t u8SlaveAddress,
						 bool bRead)
{
    4c3a:	cf 93       	push	r28
    4c3c:	df 93       	push	r29
    4c3e:	c8 2f       	mov	r28, r24
    4c40:	d6 2f       	mov	r29, r22
	// Set up the pins for I2C operation
	I2CSetup();
    4c42:	0e 94 b0 25 	call	0x4b60	; 0x4b60 <I2CSetup>
	
	// I2C Start condition
	I2CStart();
    4c46:	0e 94 9a 25 	call	0x4b34	; 0x4b34 <I2CStart>

	// If it's a read operation, clear the lower bit
	if (bRead)
    4c4a:	dd 23       	and	r29, r29
    4c4c:	19 f0       	breq	.+6      	; 0x4c54 <I2CStartTransaction+0x1a>
	{
		u8SlaveAddress |= 1;
    4c4e:	8c 2f       	mov	r24, r28
    4c50:	81 60       	ori	r24, 0x01	; 1
    4c52:	02 c0       	rjmp	.+4      	; 0x4c58 <I2CStartTransaction+0x1e>
	}
	else
	{
		// Otherwise set it
		u8SlaveAddress &= (uint8_t) (~1);
    4c54:	8c 2f       	mov	r24, r28
    4c56:	8e 7f       	andi	r24, 0xFE	; 254
	}
	
	// Now send out the slave address + the read/write bit
	return(I2CTxByte(u8SlaveAddress));
    4c58:	0e 94 76 20 	call	0x40ec	; 0x40ec <I2CTxByte>
}
    4c5c:	df 91       	pop	r29
    4c5e:	cf 91       	pop	r28
    4c60:	08 95       	ret

Disassembly of section .text.CellCountExpectedSet:

00002410 <CellCountExpectedSet>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    2410:	cf 92       	push	r12
    2412:	df 92       	push	r13
    2414:	ef 92       	push	r14
    2416:	ff 92       	push	r15
    2418:	28 2f       	mov	r18, r24
    241a:	8f 35       	cpi	r24, 0x5F	; 95
    241c:	08 f0       	brcs	.+2      	; 0x2420 <CellCountExpectedSet+0x10>
    241e:	2e e5       	ldi	r18, 0x5E	; 94
    2420:	20 93 21 01 	sts	0x0121, r18	; 0x800121 <sg_sFrame+0x15>
    2424:	62 2f       	mov	r22, r18
    2426:	70 e0       	ldi	r23, 0x00	; 0
    2428:	66 0f       	add	r22, r22
    242a:	77 1f       	adc	r23, r23
    242c:	66 0f       	add	r22, r22
    242e:	77 1f       	adc	r23, r23
    2430:	61 15       	cp	r22, r1
    2432:	71 05       	cpc	r23, r1
    2434:	99 f0       	breq	.+38     	; 0x245c <CellCountExpectedSet+0x4c>
    2436:	80 e8       	ldi	r24, 0x80	; 128
    2438:	93 e0       	ldi	r25, 0x03	; 3
    243a:	0e 94 45 26 	call	0x4c8a	; 0x4c8a <__udivmodhi4>
    243e:	e5 e6       	ldi	r30, 0x65	; 101
    2440:	f1 e0       	ldi	r31, 0x01	; 1
    2442:	71 83       	std	Z+1, r23	; 0x01
    2444:	60 83       	st	Z, r22
    2446:	80 81       	ld	r24, Z
    2448:	91 81       	ldd	r25, Z+1	; 0x01
    244a:	89 2b       	or	r24, r25
    244c:	69 f4       	brne	.+26     	; 0x2468 <CellCountExpectedSet+0x58>
    244e:	81 e0       	ldi	r24, 0x01	; 1
    2450:	90 e0       	ldi	r25, 0x00	; 0
    2452:	90 93 66 01 	sts	0x0166, r25	; 0x800166 <sg_sFrame+0x5a>
    2456:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <sg_sFrame+0x59>
    245a:	06 c0       	rjmp	.+12     	; 0x2468 <CellCountExpectedSet+0x58>
    245c:	81 e0       	ldi	r24, 0x01	; 1
    245e:	90 e0       	ldi	r25, 0x00	; 0
    2460:	90 93 66 01 	sts	0x0166, r25	; 0x800166 <sg_sFrame+0x5a>
    2464:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <sg_sFrame+0x59>
    2468:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <sg_sFrame+0x5c>
    246c:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <sg_sFrame+0x5b>
    2470:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <sg_sFrame+0x5e>
    2474:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <sg_sFrame+0x5d>
    2478:	80 e0       	ldi	r24, 0x00	; 0
    247a:	90 e0       	ldi	r25, 0x00	; 0
    247c:	10 c0       	rjmp	.+32     	; 0x249e <CellCountExpectedSet+0x8e>
    247e:	fc 01       	movw	r30, r24
    2480:	ee 0f       	add	r30, r30
    2482:	ff 1f       	adc	r31, r31
    2484:	ee 0f       	add	r30, r30
    2486:	ff 1f       	adc	r31, r31
    2488:	e4 59       	subi	r30, 0x94	; 148
    248a:	fe 4f       	sbci	r31, 0xFE	; 254
    248c:	4f ef       	ldi	r20, 0xFF	; 255
    248e:	5f ef       	ldi	r21, 0xFF	; 255
    2490:	51 83       	std	Z+1, r21	; 0x01
    2492:	40 83       	st	Z, r20
    2494:	4f ef       	ldi	r20, 0xFF	; 255
    2496:	5f e7       	ldi	r21, 0x7F	; 127
    2498:	53 83       	std	Z+3, r21	; 0x03
    249a:	42 83       	std	Z+2, r20	; 0x02
    249c:	01 96       	adiw	r24, 0x01	; 1
    249e:	80 3e       	cpi	r24, 0xE0	; 224
    24a0:	91 05       	cpc	r25, r1
    24a2:	68 f3       	brcs	.-38     	; 0x247e <CellCountExpectedSet+0x6e>
    24a4:	c2 2e       	mov	r12, r18
    24a6:	d1 2c       	mov	r13, r1
    24a8:	e1 2c       	mov	r14, r1
    24aa:	f1 2c       	mov	r15, r1
    24ac:	aa ec       	ldi	r26, 0xCA	; 202
    24ae:	b8 e0       	ldi	r27, 0x08	; 8
    24b0:	a7 01       	movw	r20, r14
    24b2:	96 01       	movw	r18, r12
    24b4:	0e 94 7c 28 	call	0x50f8	; 0x50f8 <__muluhisi3>
    24b8:	ec e0       	ldi	r30, 0x0C	; 12
    24ba:	f1 e0       	ldi	r31, 0x01	; 1
    24bc:	65 8f       	std	Z+29, r22	; 0x1d
    24be:	76 8f       	std	Z+30, r23	; 0x1e
    24c0:	87 8f       	std	Z+31, r24	; 0x1f
    24c2:	90 a3       	std	Z+32, r25	; 0x20
    24c4:	a4 e9       	ldi	r26, 0x94	; 148
    24c6:	b1 e1       	ldi	r27, 0x11	; 17
    24c8:	0e 94 7c 28 	call	0x50f8	; 0x50f8 <__muluhisi3>
    24cc:	61 a3       	std	Z+33, r22	; 0x21
    24ce:	72 a3       	std	Z+34, r23	; 0x22
    24d0:	83 a3       	std	Z+35, r24	; 0x23
    24d2:	94 a3       	std	Z+36, r25	; 0x24
    24d4:	81 a1       	ldd	r24, Z+33	; 0x21
    24d6:	92 a1       	ldd	r25, Z+34	; 0x22
    24d8:	a3 a1       	ldd	r26, Z+35	; 0x23
    24da:	b4 a1       	ldd	r27, Z+36	; 0x24
    24dc:	45 8d       	ldd	r20, Z+29	; 0x1d
    24de:	56 8d       	ldd	r21, Z+30	; 0x1e
    24e0:	67 8d       	ldd	r22, Z+31	; 0x1f
    24e2:	70 a1       	ldd	r23, Z+32	; 0x20
    24e4:	84 1b       	sub	r24, r20
    24e6:	95 0b       	sbc	r25, r21
    24e8:	a6 0b       	sbc	r26, r22
    24ea:	b7 0b       	sbc	r27, r23
    24ec:	88 0f       	add	r24, r24
    24ee:	99 1f       	adc	r25, r25
    24f0:	aa 1f       	adc	r26, r26
    24f2:	bb 1f       	adc	r27, r27
    24f4:	88 0f       	add	r24, r24
    24f6:	99 1f       	adc	r25, r25
    24f8:	aa 1f       	adc	r26, r26
    24fa:	bb 1f       	adc	r27, r27
    24fc:	88 0f       	add	r24, r24
    24fe:	99 1f       	adc	r25, r25
    2500:	aa 1f       	adc	r26, r26
    2502:	bb 1f       	adc	r27, r27
    2504:	88 0f       	add	r24, r24
    2506:	99 1f       	adc	r25, r25
    2508:	aa 1f       	adc	r26, r26
    250a:	bb 1f       	adc	r27, r27
    250c:	88 0f       	add	r24, r24
    250e:	99 1f       	adc	r25, r25
    2510:	aa 1f       	adc	r26, r26
    2512:	bb 1f       	adc	r27, r27
    2514:	88 0f       	add	r24, r24
    2516:	99 1f       	adc	r25, r25
    2518:	aa 1f       	adc	r26, r26
    251a:	bb 1f       	adc	r27, r27
    251c:	88 0f       	add	r24, r24
    251e:	99 1f       	adc	r25, r25
    2520:	aa 1f       	adc	r26, r26
    2522:	bb 1f       	adc	r27, r27
    2524:	ac 01       	movw	r20, r24
    2526:	bd 01       	movw	r22, r26
    2528:	bb 23       	and	r27, r27
    252a:	24 f4       	brge	.+8      	; 0x2534 <CellCountExpectedSet+0x124>
    252c:	41 50       	subi	r20, 0x01	; 1
    252e:	5c 4f       	sbci	r21, 0xFC	; 252
    2530:	6f 4f       	sbci	r22, 0xFF	; 255
    2532:	7f 4f       	sbci	r23, 0xFF	; 255
    2534:	03 2e       	mov	r0, r19
    2536:	3a e0       	ldi	r19, 0x0A	; 10
    2538:	75 95       	asr	r23
    253a:	67 95       	ror	r22
    253c:	57 95       	ror	r21
    253e:	47 95       	ror	r20
    2540:	3a 95       	dec	r19
    2542:	d1 f7       	brne	.-12     	; 0x2538 <CellCountExpectedSet+0x128>
    2544:	30 2d       	mov	r19, r0
    2546:	50 93 32 01 	sts	0x0132, r21	; 0x800132 <sg_sFrame+0x26>
    254a:	40 93 31 01 	sts	0x0131, r20	; 0x800131 <sg_sFrame+0x25>
    254e:	ff 90       	pop	r15
    2550:	ef 90       	pop	r14
    2552:	df 90       	pop	r13
    2554:	cf 90       	pop	r12
    2556:	08 95       	ret

Disassembly of section .text.SendModuleControllerStatus:

000051a6 <SendModuleControllerStatus>:

static uint8_t sg_u8ControllerStatusMsgCount = 0;

static void SendModuleControllerStatus(void)
{
	sg_bSendModuleControllerStatus = true;
    51a6:	81 e0       	ldi	r24, 0x01	; 1
    51a8:	80 93 16 05 	sts	0x0516, r24	; 0x800516 <sg_bSendModuleControllerStatus>
	sg_u8ControllerStatusMsgCount = 0;
    51ac:	10 92 73 0b 	sts	0x0B73, r1	; 0x800b73 <sg_u8ControllerStatusMsgCount>
	sg_bIgnoreStatusRequests = true;  // Start ignoring new requests
    51b0:	80 93 7b 0b 	sts	0x0B7B, r24	; 0x800b7b <sg_bIgnoreStatusRequests>
    51b4:	08 95       	ret

Disassembly of section .text.ModuleControllerStateSet:

00005240 <ModuleControllerStateSet>:
	MBASSERT(0);
}

static void ModuleControllerStateSet( EModuleControllerState eNext )
{
	if(eNext < EMODSTATE_COUNT)
    5240:	84 30       	cpi	r24, 0x04	; 4
    5242:	10 f4       	brcc	.+4      	; 0x5248 <ModuleControllerStateSet+0x8>
	{
		sg_eModuleControllerStateTarget = eNext;
    5244:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <sg_eModuleControllerStateTarget>
    5248:	08 95       	ret

Disassembly of section .text.ModuleControllerStateSetMax:

000050cc <ModuleControllerStateSetMax>:



static void ModuleControllerStateSetMax( EModuleControllerState eNext )
{
	if(eNext < EMODSTATE_COUNT)
    50cc:	84 30       	cpi	r24, 0x04	; 4
    50ce:	40 f4       	brcc	.+16     	; 0x50e0 <ModuleControllerStateSetMax+0x14>
	{
		sg_eModuleControllerStateMax = eNext;
    50d0:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <sg_eModuleControllerStateMax>
		if (sg_eModuleControllerStateCurrent > eNext) // we are in a higher state than allowed
    50d4:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    50d8:	89 17       	cp	r24, r25
    50da:	10 f4       	brcc	.+4      	; 0x50e0 <ModuleControllerStateSetMax+0x14>
		{
			sg_eModuleControllerStateTarget = eNext;
    50dc:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <sg_eModuleControllerStateTarget>
    50e0:	08 95       	ret

Disassembly of section .text.Check5VLoss:

00005084 <Check5VLoss>:
}

// Checks for 5V loss
static void Check5VLoss(uint8_t u8NewState)
{
	if( u8NewState & (1 << PIN_5V_DET) )
    5084:	86 fd       	sbrc	r24, 6
    5086:	09 c0       	rjmp	.+18     	; 0x509a <Check5VLoss+0x16>
		// Not asserted
	}
	else
	{
		// 5V detect is low
		FET_EN_DEASSERT();
    5088:	88 b1       	in	r24, 0x08	; 8
    508a:	8f 7e       	andi	r24, 0xEF	; 239
    508c:	88 b9       	out	0x08, r24	; 8
		RELAY_EN_DEASSERT();
    508e:	8e b1       	in	r24, 0x0e	; 14
    5090:	8d 7f       	andi	r24, 0xFD	; 253
    5092:	8e b9       	out	0x0e, r24	; 14
		ModuleControllerStateSet( EMODSTATE_OFF );
    5094:	80 e0       	ldi	r24, 0x00	; 0
    5096:	0e 94 20 29 	call	0x5240	; 0x5240 <ModuleControllerStateSet>
    509a:	08 95       	ret

Disassembly of section .text.CellDataConvertVoltage:

000042e8 <CellDataConvertVoltage>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    42e8:	fb 01       	movw	r30, r22
    42ea:	dc 01       	movw	r26, r24
    42ec:	b3 70       	andi	r27, 0x03	; 3
    42ee:	2b ed       	ldi	r18, 0xDB	; 219
    42f0:	36 ea       	ldi	r19, 0xA6	; 166
    42f2:	43 e2       	ldi	r20, 0x23	; 35
    42f4:	50 e0       	ldi	r21, 0x00	; 0
    42f6:	0e 94 7c 28 	call	0x50f8	; 0x50f8 <__muluhisi3>
    42fa:	dc 01       	movw	r26, r24
    42fc:	cb 01       	movw	r24, r22
    42fe:	07 2e       	mov	r0, r23
    4300:	7a e0       	ldi	r23, 0x0A	; 10
    4302:	b6 95       	lsr	r27
    4304:	a7 95       	ror	r26
    4306:	97 95       	ror	r25
    4308:	87 95       	ror	r24
    430a:	7a 95       	dec	r23
    430c:	d1 f7       	brne	.-12     	; 0x4302 <CellDataConvertVoltage+0x1a>
    430e:	70 2d       	mov	r23, r0
    4310:	9f 5f       	subi	r25, 0xFF	; 255
    4312:	af 4f       	sbci	r26, 0xFF	; 255
    4314:	bf 4f       	sbci	r27, 0xFF	; 255
    4316:	07 2e       	mov	r0, r23
    4318:	79 e0       	ldi	r23, 0x09	; 9
    431a:	b6 95       	lsr	r27
    431c:	a7 95       	ror	r26
    431e:	97 95       	ror	r25
    4320:	87 95       	ror	r24
    4322:	7a 95       	dec	r23
    4324:	d1 f7       	brne	.-12     	; 0x431a <CellDataConvertVoltage+0x32>
    4326:	70 2d       	mov	r23, r0
    4328:	9c 01       	movw	r18, r24
    432a:	01 97       	sbiw	r24, 0x01	; 1
    432c:	8e 3f       	cpi	r24, 0xFE	; 254
    432e:	9f 4f       	sbci	r25, 0xFF	; 255
    4330:	10 f4       	brcc	.+4      	; 0x4336 <CellDataConvertVoltage+0x4e>
    4332:	81 e0       	ldi	r24, 0x01	; 1
    4334:	03 c0       	rjmp	.+6      	; 0x433c <CellDataConvertVoltage+0x54>
    4336:	80 e0       	ldi	r24, 0x00	; 0
    4338:	20 e0       	ldi	r18, 0x00	; 0
    433a:	30 e0       	ldi	r19, 0x00	; 0
    433c:	30 97       	sbiw	r30, 0x00	; 0
    433e:	11 f0       	breq	.+4      	; 0x4344 <CellDataConvertVoltage+0x5c>
    4340:	31 83       	std	Z+1, r19	; 0x01
    4342:	20 83       	st	Z, r18
    4344:	08 95       	ret

Disassembly of section .text.CellDataConvertTemperature:

000041c0 <CellDataConvertTemperature>:
    41c0:	8f 3f       	cpi	r24, 0xFF	; 255
    41c2:	2f ef       	ldi	r18, 0xFF	; 255
    41c4:	92 07       	cpc	r25, r18
    41c6:	29 f1       	breq	.+74     	; 0x4212 <CellDataConvertTemperature+0x52>
    41c8:	28 2f       	mov	r18, r24
    41ca:	2f 70       	andi	r18, 0x0F	; 15
    41cc:	94 ff       	sbrs	r25, 4
    41ce:	02 c0       	rjmp	.+4      	; 0x41d4 <CellDataConvertTemperature+0x14>
    41d0:	90 6f       	ori	r25, 0xF0	; 240
    41d2:	01 c0       	rjmp	.+2      	; 0x41d6 <CellDataConvertTemperature+0x16>
    41d4:	9f 77       	andi	r25, 0x7F	; 127
    41d6:	ac 01       	movw	r20, r24
    41d8:	55 95       	asr	r21
    41da:	47 95       	ror	r20
    41dc:	55 95       	asr	r21
    41de:	47 95       	ror	r20
    41e0:	55 95       	asr	r21
    41e2:	47 95       	ror	r20
    41e4:	55 95       	asr	r21
    41e6:	47 95       	ror	r20
    41e8:	34 e6       	ldi	r19, 0x64	; 100
    41ea:	34 9f       	mul	r19, r20
    41ec:	c0 01       	movw	r24, r0
    41ee:	35 9f       	mul	r19, r21
    41f0:	90 0d       	add	r25, r0
    41f2:	11 24       	eor	r1, r1
    41f4:	30 e0       	ldi	r19, 0x00	; 0
    41f6:	40 e0       	ldi	r20, 0x00	; 0
    41f8:	26 5f       	subi	r18, 0xF6	; 246
    41fa:	3c 4f       	sbci	r19, 0xFC	; 252
    41fc:	4f 4f       	sbci	r20, 0xFF	; 255
    41fe:	f9 01       	movw	r30, r18
    4200:	24 91       	lpm	r18, Z
    4202:	47 fd       	sbrc	r20, 7
    4204:	20 81       	ld	r18, Z
    4206:	82 0f       	add	r24, r18
    4208:	91 1d       	adc	r25, r1
    420a:	81 56       	subi	r24, 0x61	; 97
    420c:	9a 4e       	sbci	r25, 0xEA	; 234
    420e:	21 e0       	ldi	r18, 0x01	; 1
    4210:	01 c0       	rjmp	.+2      	; 0x4214 <CellDataConvertTemperature+0x54>
    4212:	20 e0       	ldi	r18, 0x00	; 0
    4214:	61 15       	cp	r22, r1
    4216:	71 05       	cpc	r23, r1
    4218:	19 f0       	breq	.+6      	; 0x4220 <CellDataConvertTemperature+0x60>
    421a:	fb 01       	movw	r30, r22
    421c:	91 83       	std	Z+1, r25	; 0x01
    421e:	80 83       	st	Z, r24
    4220:	82 2f       	mov	r24, r18
    4222:	08 95       	ret

Disassembly of section .text.ModuleCurrentConvertReadings:

00002b58 <ModuleCurrentConvertReadings>:
    2b58:	a0 91 56 01 	lds	r26, 0x0156	; 0x800156 <sg_sFrame+0x4a>
    2b5c:	b0 91 57 01 	lds	r27, 0x0157	; 0x800157 <sg_sFrame+0x4b>
    2b60:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <sg_sFrame+0x4d>
    2b64:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <sg_sFrame+0x4e>
    2b68:	e0 91 7e 0b 	lds	r30, 0x0B7E	; 0x800b7e <sg_u8CurrentBufferIndex>
    2b6c:	ef 3f       	cpi	r30, 0xFF	; 255
    2b6e:	81 f4       	brne	.+32     	; 0x2b90 <ModuleCurrentConvertReadings+0x38>
    2b70:	07 c0       	rjmp	.+14     	; 0x2b80 <ModuleCurrentConvertReadings+0x28>
    2b72:	f0 e0       	ldi	r31, 0x00	; 0
    2b74:	ee 0f       	add	r30, r30
    2b76:	ff 1f       	adc	r31, r31
    2b78:	eb 5e       	subi	r30, 0xEB	; 235
    2b7a:	f4 4f       	sbci	r31, 0xF4	; 244
    2b7c:	91 83       	std	Z+1, r25	; 0x01
    2b7e:	80 83       	st	Z, r24
    2b80:	e0 91 7e 0b 	lds	r30, 0x0B7E	; 0x800b7e <sg_u8CurrentBufferIndex>
    2b84:	ef 5f       	subi	r30, 0xFF	; 255
    2b86:	e0 93 7e 0b 	sts	0x0B7E, r30	; 0x800b7e <sg_u8CurrentBufferIndex>
    2b8a:	e8 30       	cpi	r30, 0x08	; 8
    2b8c:	90 f3       	brcs	.-28     	; 0x2b72 <ModuleCurrentConvertReadings+0x1a>
    2b8e:	0f c0       	rjmp	.+30     	; 0x2bae <ModuleCurrentConvertReadings+0x56>
    2b90:	21 e0       	ldi	r18, 0x01	; 1
    2b92:	2e 0f       	add	r18, r30
    2b94:	20 93 7e 0b 	sts	0x0B7E, r18	; 0x800b7e <sg_u8CurrentBufferIndex>
    2b98:	f0 e0       	ldi	r31, 0x00	; 0
    2b9a:	ee 0f       	add	r30, r30
    2b9c:	ff 1f       	adc	r31, r31
    2b9e:	eb 5e       	subi	r30, 0xEB	; 235
    2ba0:	f4 4f       	sbci	r31, 0xF4	; 244
    2ba2:	91 83       	std	Z+1, r25	; 0x01
    2ba4:	80 83       	st	Z, r24
    2ba6:	28 30       	cpi	r18, 0x08	; 8
    2ba8:	10 f0       	brcs	.+4      	; 0x2bae <ModuleCurrentConvertReadings+0x56>
    2baa:	10 92 7e 0b 	sts	0x0B7E, r1	; 0x800b7e <sg_u8CurrentBufferIndex>
    2bae:	80 e0       	ldi	r24, 0x00	; 0
    2bb0:	20 e0       	ldi	r18, 0x00	; 0
    2bb2:	30 e0       	ldi	r19, 0x00	; 0
    2bb4:	0b c0       	rjmp	.+22     	; 0x2bcc <ModuleCurrentConvertReadings+0x74>
    2bb6:	e8 2f       	mov	r30, r24
    2bb8:	f0 e0       	ldi	r31, 0x00	; 0
    2bba:	ee 0f       	add	r30, r30
    2bbc:	ff 1f       	adc	r31, r31
    2bbe:	eb 5e       	subi	r30, 0xEB	; 235
    2bc0:	f4 4f       	sbci	r31, 0xF4	; 244
    2bc2:	40 81       	ld	r20, Z
    2bc4:	51 81       	ldd	r21, Z+1	; 0x01
    2bc6:	24 0f       	add	r18, r20
    2bc8:	35 1f       	adc	r19, r21
    2bca:	8f 5f       	subi	r24, 0xFF	; 255
    2bcc:	88 30       	cpi	r24, 0x08	; 8
    2bce:	98 f3       	brcs	.-26     	; 0x2bb6 <ModuleCurrentConvertReadings+0x5e>
    2bd0:	c9 01       	movw	r24, r18
    2bd2:	99 23       	and	r25, r25
    2bd4:	0c f4       	brge	.+2      	; 0x2bd8 <ModuleCurrentConvertReadings+0x80>
    2bd6:	07 96       	adiw	r24, 0x07	; 7
    2bd8:	95 95       	asr	r25
    2bda:	87 95       	ror	r24
    2bdc:	95 95       	asr	r25
    2bde:	87 95       	ror	r24
    2be0:	95 95       	asr	r25
    2be2:	87 95       	ror	r24
    2be4:	a8 1b       	sub	r26, r24
    2be6:	b9 0b       	sbc	r27, r25
    2be8:	20 e8       	ldi	r18, 0x80	; 128
    2bea:	3c e0       	ldi	r19, 0x0C	; 12
    2bec:	0e 94 08 29 	call	0x5210	; 0x5210 <__usmulhisi3>
    2bf0:	ab 01       	movw	r20, r22
    2bf2:	bc 01       	movw	r22, r24
    2bf4:	5f 5f       	subi	r21, 0xFF	; 255
    2bf6:	6f 4f       	sbci	r22, 0xFF	; 255
    2bf8:	7f 4f       	sbci	r23, 0xFF	; 255
    2bfa:	db 01       	movw	r26, r22
    2bfc:	ca 01       	movw	r24, r20
    2bfe:	77 23       	and	r23, r23
    2c00:	24 f4       	brge	.+8      	; 0x2c0a <ModuleCurrentConvertReadings+0xb2>
    2c02:	81 50       	subi	r24, 0x01	; 1
    2c04:	9e 4f       	sbci	r25, 0xFE	; 254
    2c06:	af 4f       	sbci	r26, 0xFF	; 255
    2c08:	bf 4f       	sbci	r27, 0xFF	; 255
    2c0a:	07 2e       	mov	r0, r23
    2c0c:	79 e0       	ldi	r23, 0x09	; 9
    2c0e:	b5 95       	asr	r27
    2c10:	a7 95       	ror	r26
    2c12:	97 95       	ror	r25
    2c14:	87 95       	ror	r24
    2c16:	7a 95       	dec	r23
    2c18:	d1 f7       	brne	.-12     	; 0x2c0e <ModuleCurrentConvertReadings+0xb6>
    2c1a:	70 2d       	mov	r23, r0
    2c1c:	90 58       	subi	r25, 0x80	; 128
    2c1e:	af 4f       	sbci	r26, 0xFF	; 255
    2c20:	bf 4f       	sbci	r27, 0xFF	; 255
    2c22:	ec e0       	ldi	r30, 0x0C	; 12
    2c24:	f1 e0       	ldi	r31, 0x01	; 1
    2c26:	91 ab       	std	Z+49, r25	; 0x31
    2c28:	80 ab       	std	Z+48, r24	; 0x30
    2c2a:	20 a9       	ldd	r18, Z+48	; 0x30
    2c2c:	31 a9       	ldd	r19, Z+49	; 0x31
    2c2e:	86 89       	ldd	r24, Z+22	; 0x16
    2c30:	97 89       	ldd	r25, Z+23	; 0x17
    2c32:	82 17       	cp	r24, r18
    2c34:	93 07       	cpc	r25, r19
    2c36:	20 f4       	brcc	.+8      	; 0x2c40 <ModuleCurrentConvertReadings+0xe8>
    2c38:	80 a9       	ldd	r24, Z+48	; 0x30
    2c3a:	91 a9       	ldd	r25, Z+49	; 0x31
    2c3c:	97 8b       	std	Z+23, r25	; 0x17
    2c3e:	86 8b       	std	Z+22, r24	; 0x16
    2c40:	ec e0       	ldi	r30, 0x0C	; 12
    2c42:	f1 e0       	ldi	r31, 0x01	; 1
    2c44:	20 a9       	ldd	r18, Z+48	; 0x30
    2c46:	31 a9       	ldd	r19, Z+49	; 0x31
    2c48:	80 8d       	ldd	r24, Z+24	; 0x18
    2c4a:	91 8d       	ldd	r25, Z+25	; 0x19
    2c4c:	28 17       	cp	r18, r24
    2c4e:	39 07       	cpc	r19, r25
    2c50:	20 f4       	brcc	.+8      	; 0x2c5a <ModuleCurrentConvertReadings+0x102>
    2c52:	80 a9       	ldd	r24, Z+48	; 0x30
    2c54:	91 a9       	ldd	r25, Z+49	; 0x31
    2c56:	91 8f       	std	Z+25, r25	; 0x19
    2c58:	80 8f       	std	Z+24, r24	; 0x18
    2c5a:	08 95       	ret

Disassembly of section .text.__vector_1:

00004d00 <__vector_1>:

// NOTE: If you're getting unexpected AVR resets, uncomment these unused handlers to see
// if another interrupt is being taken that doesn't have a handler. AVR Defaults to jumping
// to 0 when not vector is programmed.
ISR(ANACOMP0_vect, ISR_BLOCK)
{
    4d00:	1f 92       	push	r1
    4d02:	0f 92       	push	r0
    4d04:	0f b6       	in	r0, 0x3f	; 63
    4d06:	0f 92       	push	r0
    4d08:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) ANACOMP0_vect;
    4d0a:	80 e8       	ldi	r24, 0x80	; 128
    4d0c:	96 e2       	ldi	r25, 0x26	; 38
    4d0e:	80 93 71 0b 	sts	0x0B71, r24	; 0x800b71 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4d12:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4d16:	80 93 70 0b 	sts	0x0B70, r24	; 0x800b70 <sg_u8PCMSK0>
    4d1a:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4d1e:	80 93 6f 0b 	sts	0x0B6F, r24	; 0x800b6f <sg_u8PCMSK1>
    4d22:	ff cf       	rjmp	.-2      	; 0x4d22 <__vector_1+0x22>

Disassembly of section .text.__vector_2:

00004d24 <__vector_2>:
	while (1);
}

ISR(ANACOMP1_vect, ISR_BLOCK)
{
    4d24:	1f 92       	push	r1
    4d26:	0f 92       	push	r0
    4d28:	0f b6       	in	r0, 0x3f	; 63
    4d2a:	0f 92       	push	r0
    4d2c:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) ANACOMP1_vect;
    4d2e:	82 e9       	ldi	r24, 0x92	; 146
    4d30:	96 e2       	ldi	r25, 0x26	; 38
    4d32:	80 93 71 0b 	sts	0x0B71, r24	; 0x800b71 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4d36:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4d3a:	80 93 70 0b 	sts	0x0B70, r24	; 0x800b70 <sg_u8PCMSK0>
    4d3e:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4d42:	80 93 6f 0b 	sts	0x0B6F, r24	; 0x800b6f <sg_u8PCMSK1>
    4d46:	ff cf       	rjmp	.-2      	; 0x4d46 <__vector_2+0x22>

Disassembly of section .text.__vector_3:

00004d48 <__vector_3>:
	while (1);
}

ISR(ANACOMP2_vect, ISR_BLOCK)
{
    4d48:	1f 92       	push	r1
    4d4a:	0f 92       	push	r0
    4d4c:	0f b6       	in	r0, 0x3f	; 63
    4d4e:	0f 92       	push	r0
    4d50:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) ANACOMP2_vect;
    4d52:	84 ea       	ldi	r24, 0xA4	; 164
    4d54:	96 e2       	ldi	r25, 0x26	; 38
    4d56:	80 93 71 0b 	sts	0x0B71, r24	; 0x800b71 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4d5a:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4d5e:	80 93 70 0b 	sts	0x0B70, r24	; 0x800b70 <sg_u8PCMSK0>
    4d62:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4d66:	80 93 6f 0b 	sts	0x0B6F, r24	; 0x800b6f <sg_u8PCMSK1>
    4d6a:	ff cf       	rjmp	.-2      	; 0x4d6a <__vector_3+0x22>

Disassembly of section .text.__vector_4:

00004d6c <__vector_4>:
	while (1);
}

ISR(ANACOMP3_vect, ISR_BLOCK)
{
    4d6c:	1f 92       	push	r1
    4d6e:	0f 92       	push	r0
    4d70:	0f b6       	in	r0, 0x3f	; 63
    4d72:	0f 92       	push	r0
    4d74:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) ANACOMP3_vect;
    4d76:	86 eb       	ldi	r24, 0xB6	; 182
    4d78:	96 e2       	ldi	r25, 0x26	; 38
    4d7a:	80 93 71 0b 	sts	0x0B71, r24	; 0x800b71 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4d7e:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4d82:	80 93 70 0b 	sts	0x0B70, r24	; 0x800b70 <sg_u8PCMSK0>
    4d86:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4d8a:	80 93 6f 0b 	sts	0x0B6F, r24	; 0x800b6f <sg_u8PCMSK1>
    4d8e:	ff cf       	rjmp	.-2      	; 0x4d8e <__vector_4+0x22>

Disassembly of section .text.__vector_5:

00004d90 <__vector_5>:
	while (1);
}

ISR(PSC_FAULT_vect, ISR_BLOCK)
{
    4d90:	1f 92       	push	r1
    4d92:	0f 92       	push	r0
    4d94:	0f b6       	in	r0, 0x3f	; 63
    4d96:	0f 92       	push	r0
    4d98:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) PSC_FAULT_vect;
    4d9a:	88 ec       	ldi	r24, 0xC8	; 200
    4d9c:	96 e2       	ldi	r25, 0x26	; 38
    4d9e:	80 93 71 0b 	sts	0x0B71, r24	; 0x800b71 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4da2:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4da6:	80 93 70 0b 	sts	0x0B70, r24	; 0x800b70 <sg_u8PCMSK0>
    4daa:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4dae:	80 93 6f 0b 	sts	0x0B6F, r24	; 0x800b6f <sg_u8PCMSK1>
    4db2:	ff cf       	rjmp	.-2      	; 0x4db2 <__vector_5+0x22>

Disassembly of section .text.__vector_6:

00004db4 <__vector_6>:
	while (1);
}

ISR(PSC_EC_vect, ISR_BLOCK)
{
    4db4:	1f 92       	push	r1
    4db6:	0f 92       	push	r0
    4db8:	0f b6       	in	r0, 0x3f	; 63
    4dba:	0f 92       	push	r0
    4dbc:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) PSC_EC_vect;
    4dbe:	8a ed       	ldi	r24, 0xDA	; 218
    4dc0:	96 e2       	ldi	r25, 0x26	; 38
    4dc2:	80 93 71 0b 	sts	0x0B71, r24	; 0x800b71 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4dc6:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4dca:	80 93 70 0b 	sts	0x0B70, r24	; 0x800b70 <sg_u8PCMSK0>
    4dce:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4dd2:	80 93 6f 0b 	sts	0x0B6F, r24	; 0x800b6f <sg_u8PCMSK1>
    4dd6:	ff cf       	rjmp	.-2      	; 0x4dd6 <__vector_6+0x22>

Disassembly of section .text.__vector_22:

00004dd8 <__vector_22>:
	while (1);
}

ISR(PCINT0_vect, ISR_BLOCK)
{
    4dd8:	1f 92       	push	r1
    4dda:	0f 92       	push	r0
    4ddc:	0f b6       	in	r0, 0x3f	; 63
    4dde:	0f 92       	push	r0
    4de0:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) PCINT0_vect;
    4de2:	8c ee       	ldi	r24, 0xEC	; 236
    4de4:	96 e2       	ldi	r25, 0x26	; 38
    4de6:	80 93 71 0b 	sts	0x0B71, r24	; 0x800b71 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4dea:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4dee:	80 93 70 0b 	sts	0x0B70, r24	; 0x800b70 <sg_u8PCMSK0>
    4df2:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4df6:	80 93 6f 0b 	sts	0x0B6F, r24	; 0x800b6f <sg_u8PCMSK1>
    4dfa:	ff cf       	rjmp	.-2      	; 0x4dfa <__vector_22+0x22>

Disassembly of section .text.__vector_9:

00004dfc <__vector_9>:
// 	while (1);
// }
*/

ISR(INT2_vect, ISR_BLOCK)
{
    4dfc:	1f 92       	push	r1
    4dfe:	0f 92       	push	r0
    4e00:	0f b6       	in	r0, 0x3f	; 63
    4e02:	0f 92       	push	r0
    4e04:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) INT2_vect;
    4e06:	8e ef       	ldi	r24, 0xFE	; 254
    4e08:	96 e2       	ldi	r25, 0x26	; 38
    4e0a:	80 93 71 0b 	sts	0x0B71, r24	; 0x800b71 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4e0e:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4e12:	80 93 70 0b 	sts	0x0B70, r24	; 0x800b70 <sg_u8PCMSK0>
    4e16:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4e1a:	80 93 6f 0b 	sts	0x0B6F, r24	; 0x800b6f <sg_u8PCMSK1>
    4e1e:	ff cf       	rjmp	.-2      	; 0x4e1e <__vector_9+0x22>

Disassembly of section .text.__vector_11:

00004e20 <__vector_11>:
// 	while (1);
// }


ISR(TIMER1_CAPT_vect, ISR_BLOCK)
{
    4e20:	1f 92       	push	r1
    4e22:	0f 92       	push	r0
    4e24:	0f b6       	in	r0, 0x3f	; 63
    4e26:	0f 92       	push	r0
    4e28:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) TIMER1_CAPT_vect;
    4e2a:	80 e1       	ldi	r24, 0x10	; 16
    4e2c:	97 e2       	ldi	r25, 0x27	; 39
    4e2e:	80 93 71 0b 	sts	0x0B71, r24	; 0x800b71 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4e32:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4e36:	80 93 70 0b 	sts	0x0B70, r24	; 0x800b70 <sg_u8PCMSK0>
    4e3a:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4e3e:	80 93 6f 0b 	sts	0x0B6F, r24	; 0x800b6f <sg_u8PCMSK1>
    4e42:	ff cf       	rjmp	.-2      	; 0x4e42 <__vector_11+0x22>

Disassembly of section .text.__vector_13:

00004e44 <__vector_13>:
// }



ISR(TIMER1_COMPB_vect, ISR_BLOCK)
{
    4e44:	1f 92       	push	r1
    4e46:	0f 92       	push	r0
    4e48:	0f b6       	in	r0, 0x3f	; 63
    4e4a:	0f 92       	push	r0
    4e4c:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) TIMER1_COMPB_vect;
    4e4e:	82 e2       	ldi	r24, 0x22	; 34
    4e50:	97 e2       	ldi	r25, 0x27	; 39
    4e52:	80 93 71 0b 	sts	0x0B71, r24	; 0x800b71 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4e56:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4e5a:	80 93 70 0b 	sts	0x0B70, r24	; 0x800b70 <sg_u8PCMSK0>
    4e5e:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4e62:	80 93 6f 0b 	sts	0x0B6F, r24	; 0x800b6f <sg_u8PCMSK1>
    4e66:	ff cf       	rjmp	.-2      	; 0x4e66 <__vector_13+0x22>

Disassembly of section .text.__vector_14:

00004e68 <__vector_14>:
	while (1);
}


ISR(TIMER1_OVF_vect, ISR_BLOCK)
{
    4e68:	1f 92       	push	r1
    4e6a:	0f 92       	push	r0
    4e6c:	0f b6       	in	r0, 0x3f	; 63
    4e6e:	0f 92       	push	r0
    4e70:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) TIMER1_OVF_vect;
    4e72:	84 e3       	ldi	r24, 0x34	; 52
    4e74:	97 e2       	ldi	r25, 0x27	; 39
    4e76:	80 93 71 0b 	sts	0x0B71, r24	; 0x800b71 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4e7a:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4e7e:	80 93 70 0b 	sts	0x0B70, r24	; 0x800b70 <sg_u8PCMSK0>
    4e82:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4e86:	80 93 6f 0b 	sts	0x0B6F, r24	; 0x800b6f <sg_u8PCMSK1>
    4e8a:	ff cf       	rjmp	.-2      	; 0x4e8a <__vector_14+0x22>

Disassembly of section .text.__vector_17:

00004e8c <__vector_17>:
	while (1);
}

ISR(TIMER0_OVF_vect, ISR_BLOCK)
{
    4e8c:	1f 92       	push	r1
    4e8e:	0f 92       	push	r0
    4e90:	0f b6       	in	r0, 0x3f	; 63
    4e92:	0f 92       	push	r0
    4e94:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) TIMER0_OVF_vect;
    4e96:	86 e4       	ldi	r24, 0x46	; 70
    4e98:	97 e2       	ldi	r25, 0x27	; 39
    4e9a:	80 93 71 0b 	sts	0x0B71, r24	; 0x800b71 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4e9e:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4ea2:	80 93 70 0b 	sts	0x0B70, r24	; 0x800b70 <sg_u8PCMSK0>
    4ea6:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4eaa:	80 93 6f 0b 	sts	0x0B6F, r24	; 0x800b6f <sg_u8PCMSK1>
    4eae:	ff cf       	rjmp	.-2      	; 0x4eae <__vector_17+0x22>

Disassembly of section .text.__vector_19:

00004eb0 <__vector_19>:
	while (1);
}

ISR(CAN_TOVF_vect, ISR_BLOCK)
{
    4eb0:	1f 92       	push	r1
    4eb2:	0f 92       	push	r0
    4eb4:	0f b6       	in	r0, 0x3f	; 63
    4eb6:	0f 92       	push	r0
    4eb8:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) CAN_TOVF_vect;
    4eba:	88 e5       	ldi	r24, 0x58	; 88
    4ebc:	97 e2       	ldi	r25, 0x27	; 39
    4ebe:	80 93 71 0b 	sts	0x0B71, r24	; 0x800b71 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4ec2:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4ec6:	80 93 70 0b 	sts	0x0B70, r24	; 0x800b70 <sg_u8PCMSK0>
    4eca:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4ece:	80 93 6f 0b 	sts	0x0B6F, r24	; 0x800b6f <sg_u8PCMSK1>
    4ed2:	ff cf       	rjmp	.-2      	; 0x4ed2 <__vector_19+0x22>

Disassembly of section .text.__vector_21:

00004ed4 <__vector_21>:
	while (1);
}

ISR(LIN_ERR_vect, ISR_BLOCK)
{
    4ed4:	1f 92       	push	r1
    4ed6:	0f 92       	push	r0
    4ed8:	0f b6       	in	r0, 0x3f	; 63
    4eda:	0f 92       	push	r0
    4edc:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) LIN_ERR_vect;
    4ede:	8a e6       	ldi	r24, 0x6A	; 106
    4ee0:	97 e2       	ldi	r25, 0x27	; 39
    4ee2:	80 93 71 0b 	sts	0x0B71, r24	; 0x800b71 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4ee6:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4eea:	80 93 70 0b 	sts	0x0B70, r24	; 0x800b70 <sg_u8PCMSK0>
    4eee:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4ef2:	80 93 6f 0b 	sts	0x0B6F, r24	; 0x800b6f <sg_u8PCMSK1>
    4ef6:	ff cf       	rjmp	.-2      	; 0x4ef6 <__vector_21+0x22>

Disassembly of section .text.__vector_25:

00004ef8 <__vector_25>:
// 	while (1);
// }


ISR(PCINT3_vect, ISR_BLOCK)
{
    4ef8:	1f 92       	push	r1
    4efa:	0f 92       	push	r0
    4efc:	0f b6       	in	r0, 0x3f	; 63
    4efe:	0f 92       	push	r0
    4f00:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) PCINT3_vect;
    4f02:	8c e7       	ldi	r24, 0x7C	; 124
    4f04:	97 e2       	ldi	r25, 0x27	; 39
    4f06:	80 93 71 0b 	sts	0x0B71, r24	; 0x800b71 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4f0a:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4f0e:	80 93 70 0b 	sts	0x0B70, r24	; 0x800b70 <sg_u8PCMSK0>
    4f12:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4f16:	80 93 6f 0b 	sts	0x0B6F, r24	; 0x800b6f <sg_u8PCMSK1>
    4f1a:	ff cf       	rjmp	.-2      	; 0x4f1a <__vector_25+0x22>

Disassembly of section .text.__vector_26:

00004f1c <__vector_26>:
	while (1);
}


ISR(SPI_STC_vect, ISR_BLOCK)
{
    4f1c:	1f 92       	push	r1
    4f1e:	0f 92       	push	r0
    4f20:	0f b6       	in	r0, 0x3f	; 63
    4f22:	0f 92       	push	r0
    4f24:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) SPI_STC_vect;
    4f26:	8e e8       	ldi	r24, 0x8E	; 142
    4f28:	97 e2       	ldi	r25, 0x27	; 39
    4f2a:	80 93 71 0b 	sts	0x0B71, r24	; 0x800b71 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4f2e:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4f32:	80 93 70 0b 	sts	0x0B70, r24	; 0x800b70 <sg_u8PCMSK0>
    4f36:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4f3a:	80 93 6f 0b 	sts	0x0B6F, r24	; 0x800b6f <sg_u8PCMSK1>
    4f3e:	ff cf       	rjmp	.-2      	; 0x4f3e <__vector_26+0x22>

Disassembly of section .text.__vector_29:

00004f40 <__vector_29>:
	while (1);
}

ISR(EE_READY_vect, ISR_BLOCK)
{
    4f40:	1f 92       	push	r1
    4f42:	0f 92       	push	r0
    4f44:	0f b6       	in	r0, 0x3f	; 63
    4f46:	0f 92       	push	r0
    4f48:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) EE_READY_vect;
    4f4a:	80 ea       	ldi	r24, 0xA0	; 160
    4f4c:	97 e2       	ldi	r25, 0x27	; 39
    4f4e:	80 93 71 0b 	sts	0x0B71, r24	; 0x800b71 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4f52:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4f56:	80 93 70 0b 	sts	0x0B70, r24	; 0x800b70 <sg_u8PCMSK0>
    4f5a:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4f5e:	80 93 6f 0b 	sts	0x0B6F, r24	; 0x800b6f <sg_u8PCMSK1>
    4f62:	ff cf       	rjmp	.-2      	; 0x4f62 <__vector_29+0x22>

Disassembly of section .text.__vector_30:

00004f64 <__vector_30>:
	while (1);
}

ISR(SPM_READY_vect, ISR_BLOCK)
{
    4f64:	1f 92       	push	r1
    4f66:	0f 92       	push	r0
    4f68:	0f b6       	in	r0, 0x3f	; 63
    4f6a:	0f 92       	push	r0
    4f6c:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) SPM_READY_vect;
    4f6e:	82 eb       	ldi	r24, 0xB2	; 178
    4f70:	97 e2       	ldi	r25, 0x27	; 39
    4f72:	80 93 71 0b 	sts	0x0B71, r24	; 0x800b71 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4f76:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4f7a:	80 93 70 0b 	sts	0x0B70, r24	; 0x800b70 <sg_u8PCMSK0>
    4f7e:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4f82:	80 93 6f 0b 	sts	0x0B6F, r24	; 0x800b6f <sg_u8PCMSK1>
    4f86:	ff cf       	rjmp	.-2      	; 0x4f86 <__vector_30+0x22>

Disassembly of section .text.CurrentThresholdsGet:

00003a54 <CurrentThresholdsGet>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    3a54:	0f 93       	push	r16
    3a56:	1f 93       	push	r17
    3a58:	cf 93       	push	r28
    3a5a:	df 93       	push	r29
    3a5c:	8c 01       	movw	r16, r24
    3a5e:	eb 01       	movw	r28, r22
    3a60:	89 2b       	or	r24, r25
    3a62:	f9 f0       	breq	.+62     	; 0x3aa2 <CurrentThresholdsGet+0x4e>
    3a64:	87 e0       	ldi	r24, 0x07	; 7
    3a66:	90 e0       	ldi	r25, 0x00	; 0
    3a68:	0e 94 a6 28 	call	0x514c	; 0x514c <EEPROMRead>
    3a6c:	90 e0       	ldi	r25, 0x00	; 0
    3a6e:	f8 01       	movw	r30, r16
    3a70:	91 83       	std	Z+1, r25	; 0x01
    3a72:	80 83       	st	Z, r24
    3a74:	88 e0       	ldi	r24, 0x08	; 8
    3a76:	90 e0       	ldi	r25, 0x00	; 0
    3a78:	0e 94 a6 28 	call	0x514c	; 0x514c <EEPROMRead>
    3a7c:	90 e0       	ldi	r25, 0x00	; 0
    3a7e:	98 2f       	mov	r25, r24
    3a80:	88 27       	eor	r24, r24
    3a82:	f8 01       	movw	r30, r16
    3a84:	20 81       	ld	r18, Z
    3a86:	31 81       	ldd	r19, Z+1	; 0x01
    3a88:	82 2b       	or	r24, r18
    3a8a:	93 2b       	or	r25, r19
    3a8c:	91 83       	std	Z+1, r25	; 0x01
    3a8e:	80 83       	st	Z, r24
    3a90:	01 97       	sbiw	r24, 0x01	; 1
    3a92:	8e 3f       	cpi	r24, 0xFE	; 254
    3a94:	9f 4f       	sbci	r25, 0xFF	; 255
    3a96:	28 f0       	brcs	.+10     	; 0x3aa2 <CurrentThresholdsGet+0x4e>
    3a98:	8c ec       	ldi	r24, 0xCC	; 204
    3a9a:	97 e7       	ldi	r25, 0x77	; 119
    3a9c:	f8 01       	movw	r30, r16
    3a9e:	91 83       	std	Z+1, r25	; 0x01
    3aa0:	80 83       	st	Z, r24
    3aa2:	20 97       	sbiw	r28, 0x00	; 0
    3aa4:	e1 f0       	breq	.+56     	; 0x3ade <CurrentThresholdsGet+0x8a>
    3aa6:	85 e0       	ldi	r24, 0x05	; 5
    3aa8:	90 e0       	ldi	r25, 0x00	; 0
    3aaa:	0e 94 a6 28 	call	0x514c	; 0x514c <EEPROMRead>
    3aae:	90 e0       	ldi	r25, 0x00	; 0
    3ab0:	99 83       	std	Y+1, r25	; 0x01
    3ab2:	88 83       	st	Y, r24
    3ab4:	86 e0       	ldi	r24, 0x06	; 6
    3ab6:	90 e0       	ldi	r25, 0x00	; 0
    3ab8:	0e 94 a6 28 	call	0x514c	; 0x514c <EEPROMRead>
    3abc:	90 e0       	ldi	r25, 0x00	; 0
    3abe:	98 2f       	mov	r25, r24
    3ac0:	88 27       	eor	r24, r24
    3ac2:	28 81       	ld	r18, Y
    3ac4:	39 81       	ldd	r19, Y+1	; 0x01
    3ac6:	82 2b       	or	r24, r18
    3ac8:	93 2b       	or	r25, r19
    3aca:	99 83       	std	Y+1, r25	; 0x01
    3acc:	88 83       	st	Y, r24
    3ace:	01 97       	sbiw	r24, 0x01	; 1
    3ad0:	8e 3f       	cpi	r24, 0xFE	; 254
    3ad2:	9f 4f       	sbci	r25, 0xFF	; 255
    3ad4:	20 f0       	brcs	.+8      	; 0x3ade <CurrentThresholdsGet+0x8a>
    3ad6:	84 ef       	ldi	r24, 0xF4	; 244
    3ad8:	91 e8       	ldi	r25, 0x81	; 129
    3ada:	99 83       	std	Y+1, r25	; 0x01
    3adc:	88 83       	st	Y, r24
    3ade:	df 91       	pop	r29
    3ae0:	cf 91       	pop	r28
    3ae2:	1f 91       	pop	r17
    3ae4:	0f 91       	pop	r16
    3ae6:	08 95       	ret

Disassembly of section .text.CANReceiveCallback:

000012c6 <CANReceiveCallback>:
    12c6:	cf 92       	push	r12
    12c8:	df 92       	push	r13
    12ca:	ef 92       	push	r14
    12cc:	ff 92       	push	r15
    12ce:	cf 93       	push	r28
    12d0:	fb 01       	movw	r30, r22
    12d2:	90 91 19 05 	lds	r25, 0x0519	; 0x800519 <sg_bModuleRegistered>
    12d6:	10 92 77 0b 	sts	0x0B77, r1	; 0x800b77 <sg_u8TicksSinceLastPackControllerMessage>
    12da:	82 31       	cpi	r24, 0x12	; 18
    12dc:	29 f4       	brne	.+10     	; 0x12e8 <CANReceiveCallback+0x22>
    12de:	80 81       	ld	r24, Z
    12e0:	8f 70       	andi	r24, 0x0F	; 15
    12e2:	0e 94 66 28 	call	0x50cc	; 0x50cc <ModuleControllerStateSetMax>
    12e6:	35 c1       	rjmp	.+618    	; 0x1552 <CANReceiveCallback+0x28c>
    12e8:	8f 30       	cpi	r24, 0x0F	; 15
    12ea:	a9 f4       	brne	.+42     	; 0x1316 <CANReceiveCallback+0x50>
    12ec:	8a ed       	ldi	r24, 0xDA	; 218
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	a0 e0       	ldi	r26, 0x00	; 0
    12f2:	af 93       	push	r26
    12f4:	9f 93       	push	r25
    12f6:	8f 93       	push	r24
    12f8:	0e 94 f3 28 	call	0x51e6	; 0x51e6 <DebugOut>
    12fc:	10 92 1f 05 	sts	0x051F, r1	; 0x80051f <sg_u8ModuleRegistrationID>
    1300:	10 92 19 05 	sts	0x0519, r1	; 0x800519 <sg_bModuleRegistered>
    1304:	10 92 7b 0b 	sts	0x0B7B, r1	; 0x800b7b <sg_bIgnoreStatusRequests>
    1308:	80 e0       	ldi	r24, 0x00	; 0
    130a:	0e 94 20 29 	call	0x5240	; 0x5240 <ModuleControllerStateSet>
    130e:	0f 90       	pop	r0
    1310:	0f 90       	pop	r0
    1312:	0f 90       	pop	r0
    1314:	1e c1       	rjmp	.+572    	; 0x1552 <CANReceiveCallback+0x28c>
    1316:	80 31       	cpi	r24, 0x10	; 16
    1318:	21 f4       	brne	.+8      	; 0x1322 <CANReceiveCallback+0x5c>
    131a:	80 e0       	ldi	r24, 0x00	; 0
    131c:	0e 94 20 29 	call	0x5240	; 0x5240 <ModuleControllerStateSet>
    1320:	18 c1       	rjmp	.+560    	; 0x1552 <CANReceiveCallback+0x28c>
    1322:	81 31       	cpi	r24, 0x11	; 17
    1324:	59 f4       	brne	.+22     	; 0x133c <CANReceiveCallback+0x76>
    1326:	20 81       	ld	r18, Z
    1328:	31 81       	ldd	r19, Z+1	; 0x01
    132a:	42 81       	ldd	r20, Z+2	; 0x02
    132c:	53 81       	ldd	r21, Z+3	; 0x03
    132e:	64 81       	ldd	r22, Z+4	; 0x04
    1330:	75 81       	ldd	r23, Z+5	; 0x05
    1332:	86 81       	ldd	r24, Z+6	; 0x06
    1334:	97 81       	ldd	r25, Z+7	; 0x07
    1336:	0e 94 c1 19 	call	0x3382	; 0x3382 <RTCSetTime>
    133a:	0b c1       	rjmp	.+534    	; 0x1552 <CANReceiveCallback+0x28c>
    133c:	8d 30       	cpi	r24, 0x0D	; 13
    133e:	09 f0       	breq	.+2      	; 0x1342 <CANReceiveCallback+0x7c>
    1340:	4f c0       	rjmp	.+158    	; 0x13e0 <CANReceiveCallback+0x11a>
    1342:	80 91 19 05 	lds	r24, 0x0519	; 0x800519 <sg_bModuleRegistered>
    1346:	81 11       	cpse	r24, r1
    1348:	2f c0       	rjmp	.+94     	; 0x13a8 <CANReceiveCallback+0xe2>
    134a:	80 91 7d 0b 	lds	r24, 0x0B7D	; 0x800b7d <sg_bAnnouncementPending>
    134e:	81 11       	cpse	r24, r1
    1350:	2b c0       	rjmp	.+86     	; 0x13a8 <CANReceiveCallback+0xe2>
    1352:	c0 90 1a 01 	lds	r12, 0x011A	; 0x80011a <sg_sFrame+0xe>
    1356:	d0 90 1b 01 	lds	r13, 0x011B	; 0x80011b <sg_sFrame+0xf>
    135a:	e0 90 1c 01 	lds	r14, 0x011C	; 0x80011c <sg_sFrame+0x10>
    135e:	f0 90 1d 01 	lds	r15, 0x011D	; 0x80011d <sg_sFrame+0x11>
    1362:	1f 92       	push	r1
    1364:	cf 92       	push	r12
    1366:	85 e0       	ldi	r24, 0x05	; 5
    1368:	91 e0       	ldi	r25, 0x01	; 1
    136a:	a0 e0       	ldi	r26, 0x00	; 0
    136c:	af 93       	push	r26
    136e:	9f 93       	push	r25
    1370:	8f 93       	push	r24
    1372:	0e 94 f3 28 	call	0x51e6	; 0x51e6 <DebugOut>
    1376:	8d ec       	ldi	r24, 0xCD	; 205
    1378:	c8 9e       	mul	r12, r24
    137a:	c1 2c       	mov	r12, r1
    137c:	11 24       	eor	r1, r1
    137e:	c6 94       	lsr	r12
    1380:	c6 94       	lsr	r12
    1382:	c6 94       	lsr	r12
    1384:	c0 92 7c 0b 	sts	0x0B7C, r12	; 0x800b7c <sg_u8AnnouncementDelayTicks>
    1388:	80 91 7c 0b 	lds	r24, 0x0B7C	; 0x800b7c <sg_u8AnnouncementDelayTicks>
    138c:	0f 90       	pop	r0
    138e:	0f 90       	pop	r0
    1390:	0f 90       	pop	r0
    1392:	0f 90       	pop	r0
    1394:	0f 90       	pop	r0
    1396:	81 11       	cpse	r24, r1
    1398:	03 c0       	rjmp	.+6      	; 0x13a0 <CANReceiveCallback+0xda>
    139a:	81 e0       	ldi	r24, 0x01	; 1
    139c:	80 93 7c 0b 	sts	0x0B7C, r24	; 0x800b7c <sg_u8AnnouncementDelayTicks>
    13a0:	81 e0       	ldi	r24, 0x01	; 1
    13a2:	80 93 7d 0b 	sts	0x0B7D, r24	; 0x800b7d <sg_bAnnouncementPending>
    13a6:	d5 c0       	rjmp	.+426    	; 0x1552 <CANReceiveCallback+0x28c>
    13a8:	80 91 19 05 	lds	r24, 0x0519	; 0x800519 <sg_bModuleRegistered>
    13ac:	88 23       	and	r24, r24
    13ae:	61 f0       	breq	.+24     	; 0x13c8 <CANReceiveCallback+0x102>
    13b0:	88 e4       	ldi	r24, 0x48	; 72
    13b2:	91 e0       	ldi	r25, 0x01	; 1
    13b4:	a0 e0       	ldi	r26, 0x00	; 0
    13b6:	af 93       	push	r26
    13b8:	9f 93       	push	r25
    13ba:	8f 93       	push	r24
    13bc:	0e 94 f3 28 	call	0x51e6	; 0x51e6 <DebugOut>
    13c0:	0f 90       	pop	r0
    13c2:	0f 90       	pop	r0
    13c4:	0f 90       	pop	r0
    13c6:	c5 c0       	rjmp	.+394    	; 0x1552 <CANReceiveCallback+0x28c>
    13c8:	86 e7       	ldi	r24, 0x76	; 118
    13ca:	91 e0       	ldi	r25, 0x01	; 1
    13cc:	a0 e0       	ldi	r26, 0x00	; 0
    13ce:	af 93       	push	r26
    13d0:	9f 93       	push	r25
    13d2:	8f 93       	push	r24
    13d4:	0e 94 f3 28 	call	0x51e6	; 0x51e6 <DebugOut>
    13d8:	0f 90       	pop	r0
    13da:	0f 90       	pop	r0
    13dc:	0f 90       	pop	r0
    13de:	b9 c0       	rjmp	.+370    	; 0x1552 <CANReceiveCallback+0x28c>
    13e0:	89 30       	cpi	r24, 0x09	; 9
    13e2:	09 f0       	breq	.+2      	; 0x13e6 <CANReceiveCallback+0x120>
    13e4:	41 c0       	rjmp	.+130    	; 0x1468 <CANReceiveCallback+0x1a2>
    13e6:	48 30       	cpi	r20, 0x08	; 8
    13e8:	09 f0       	breq	.+2      	; 0x13ec <CANReceiveCallback+0x126>
    13ea:	b3 c0       	rjmp	.+358    	; 0x1552 <CANReceiveCallback+0x28c>
    13ec:	f0 80       	ld	r15, Z
    13ee:	82 81       	ldd	r24, Z+2	; 0x02
    13f0:	82 30       	cpi	r24, 0x02	; 2
    13f2:	09 f0       	breq	.+2      	; 0x13f6 <CANReceiveCallback+0x130>
    13f4:	ae c0       	rjmp	.+348    	; 0x1552 <CANReceiveCallback+0x28c>
    13f6:	83 81       	ldd	r24, Z+3	; 0x03
    13f8:	83 30       	cpi	r24, 0x03	; 3
    13fa:	09 f0       	breq	.+2      	; 0x13fe <CANReceiveCallback+0x138>
    13fc:	aa c0       	rjmp	.+340    	; 0x1552 <CANReceiveCallback+0x28c>
    13fe:	40 91 1a 01 	lds	r20, 0x011A	; 0x80011a <sg_sFrame+0xe>
    1402:	50 91 1b 01 	lds	r21, 0x011B	; 0x80011b <sg_sFrame+0xf>
    1406:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <sg_sFrame+0x10>
    140a:	70 91 1d 01 	lds	r23, 0x011D	; 0x80011d <sg_sFrame+0x11>
    140e:	84 81       	ldd	r24, Z+4	; 0x04
    1410:	95 81       	ldd	r25, Z+5	; 0x05
    1412:	a6 81       	ldd	r26, Z+6	; 0x06
    1414:	b7 81       	ldd	r27, Z+7	; 0x07
    1416:	48 17       	cp	r20, r24
    1418:	59 07       	cpc	r21, r25
    141a:	6a 07       	cpc	r22, r26
    141c:	7b 07       	cpc	r23, r27
    141e:	09 f0       	breq	.+2      	; 0x1422 <CANReceiveCallback+0x15c>
    1420:	98 c0       	rjmp	.+304    	; 0x1552 <CANReceiveCallback+0x28c>
    1422:	10 92 77 0b 	sts	0x0B77, r1	; 0x800b77 <sg_u8TicksSinceLastPackControllerMessage>
    1426:	f0 92 1f 05 	sts	0x051F, r15	; 0x80051f <sg_u8ModuleRegistrationID>
    142a:	0e 94 d3 28 	call	0x51a6	; 0x51a6 <SendModuleControllerStatus>
    142e:	c1 e0       	ldi	r28, 0x01	; 1
    1430:	c0 93 14 05 	sts	0x0514, r28	; 0x800514 <sg_bSendHardwareDetail>
    1434:	c0 93 19 05 	sts	0x0519, r28	; 0x800519 <sg_bModuleRegistered>
    1438:	10 92 7b 0b 	sts	0x0B7B, r1	; 0x800b7b <sg_bIgnoreStatusRequests>
    143c:	1f 92       	push	r1
    143e:	ff 92       	push	r15
    1440:	8e e9       	ldi	r24, 0x9E	; 158
    1442:	91 e0       	ldi	r25, 0x01	; 1
    1444:	a0 e0       	ldi	r26, 0x00	; 0
    1446:	af 93       	push	r26
    1448:	9f 93       	push	r25
    144a:	8f 93       	push	r24
    144c:	0e 94 f3 28 	call	0x51e6	; 0x51e6 <DebugOut>
    1450:	10 92 7d 0b 	sts	0x0B7D, r1	; 0x800b7d <sg_bAnnouncementPending>
    1454:	10 92 7c 0b 	sts	0x0B7C, r1	; 0x800b7c <sg_u8AnnouncementDelayTicks>
    1458:	c0 93 18 05 	sts	0x0518, r28	; 0x800518 <sg_bSendTimeRequest>
    145c:	0f 90       	pop	r0
    145e:	0f 90       	pop	r0
    1460:	0f 90       	pop	r0
    1462:	0f 90       	pop	r0
    1464:	0f 90       	pop	r0
    1466:	75 c0       	rjmp	.+234    	; 0x1552 <CANReceiveCallback+0x28c>
    1468:	44 23       	and	r20, r20
    146a:	09 f4       	brne	.+2      	; 0x146e <CANReceiveCallback+0x1a8>
    146c:	72 c0       	rjmp	.+228    	; 0x1552 <CANReceiveCallback+0x28c>
    146e:	20 81       	ld	r18, Z
    1470:	91 11       	cpse	r25, r1
    1472:	08 c0       	rjmp	.+16     	; 0x1484 <CANReceiveCallback+0x1be>
    1474:	8a 30       	cpi	r24, 0x0A	; 10
    1476:	09 f0       	breq	.+2      	; 0x147a <CANReceiveCallback+0x1b4>
    1478:	6c c0       	rjmp	.+216    	; 0x1552 <CANReceiveCallback+0x28c>
    147a:	90 91 19 05 	lds	r25, 0x0519	; 0x800519 <sg_bModuleRegistered>
    147e:	99 23       	and	r25, r25
    1480:	09 f4       	brne	.+2      	; 0x1484 <CANReceiveCallback+0x1be>
    1482:	67 c0       	rjmp	.+206    	; 0x1552 <CANReceiveCallback+0x28c>
    1484:	90 91 1f 05 	lds	r25, 0x051F	; 0x80051f <sg_u8ModuleRegistrationID>
    1488:	29 13       	cpse	r18, r25
    148a:	63 c0       	rjmp	.+198    	; 0x1552 <CANReceiveCallback+0x28c>
    148c:	8a 30       	cpi	r24, 0x0A	; 10
    148e:	a9 f4       	brne	.+42     	; 0x14ba <CANReceiveCallback+0x1f4>
    1490:	41 30       	cpi	r20, 0x01	; 1
    1492:	09 f0       	breq	.+2      	; 0x1496 <CANReceiveCallback+0x1d0>
    1494:	5e c0       	rjmp	.+188    	; 0x1552 <CANReceiveCallback+0x28c>
    1496:	80 91 7b 0b 	lds	r24, 0x0B7B	; 0x800b7b <sg_bIgnoreStatusRequests>
    149a:	81 11       	cpse	r24, r1
    149c:	5a c0       	rjmp	.+180    	; 0x1552 <CANReceiveCallback+0x28c>
    149e:	89 ed       	ldi	r24, 0xD9	; 217
    14a0:	91 e0       	ldi	r25, 0x01	; 1
    14a2:	a0 e0       	ldi	r26, 0x00	; 0
    14a4:	af 93       	push	r26
    14a6:	9f 93       	push	r25
    14a8:	8f 93       	push	r24
    14aa:	0e 94 f3 28 	call	0x51e6	; 0x51e6 <DebugOut>
    14ae:	0e 94 d3 28 	call	0x51a6	; 0x51a6 <SendModuleControllerStatus>
    14b2:	0f 90       	pop	r0
    14b4:	0f 90       	pop	r0
    14b6:	0f 90       	pop	r0
    14b8:	4c c0       	rjmp	.+152    	; 0x1552 <CANReceiveCallback+0x28c>
    14ba:	8b 30       	cpi	r24, 0x0B	; 11
    14bc:	f9 f4       	brne	.+62     	; 0x14fc <CANReceiveCallback+0x236>
    14be:	43 30       	cpi	r20, 0x03	; 3
    14c0:	09 f0       	breq	.+2      	; 0x14c4 <CANReceiveCallback+0x1fe>
    14c2:	47 c0       	rjmp	.+142    	; 0x1552 <CANReceiveCallback+0x28c>
    14c4:	80 91 15 05 	lds	r24, 0x0515	; 0x800515 <sg_bSendCellStatus>
    14c8:	81 11       	cpse	r24, r1
    14ca:	43 c0       	rjmp	.+134    	; 0x1552 <CANReceiveCallback+0x28c>
    14cc:	81 81       	ldd	r24, Z+1	; 0x01
    14ce:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <sg_sFrame+0x15>
    14d2:	89 17       	cp	r24, r25
    14d4:	f0 f5       	brcc	.+124    	; 0x1552 <CANReceiveCallback+0x28c>
    14d6:	80 93 1b 05 	sts	0x051B, r24	; 0x80051b <sg_u8CellStatus>
    14da:	90 91 1b 05 	lds	r25, 0x051B	; 0x80051b <sg_u8CellStatus>
    14de:	9f 5f       	subi	r25, 0xFF	; 255
    14e0:	90 93 1c 05 	sts	0x051C, r25	; 0x80051c <sg_u8CellStatusTarget>
    14e4:	8f 3f       	cpi	r24, 0xFF	; 255
    14e6:	31 f4       	brne	.+12     	; 0x14f4 <CANReceiveCallback+0x22e>
    14e8:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <sg_sFrame+0x15>
    14ec:	80 93 1c 05 	sts	0x051C, r24	; 0x80051c <sg_u8CellStatusTarget>
    14f0:	10 92 1b 05 	sts	0x051B, r1	; 0x80051b <sg_u8CellStatus>
    14f4:	81 e0       	ldi	r24, 0x01	; 1
    14f6:	80 93 15 05 	sts	0x0515, r24	; 0x800515 <sg_bSendCellStatus>
    14fa:	2b c0       	rjmp	.+86     	; 0x1552 <CANReceiveCallback+0x28c>
    14fc:	8c 30       	cpi	r24, 0x0C	; 12
    14fe:	49 f4       	brne	.+18     	; 0x1512 <CANReceiveCallback+0x24c>
    1500:	10 92 77 0b 	sts	0x0B77, r1	; 0x800b77 <sg_u8TicksSinceLastPackControllerMessage>
    1504:	42 30       	cpi	r20, 0x02	; 2
    1506:	29 f5       	brne	.+74     	; 0x1552 <CANReceiveCallback+0x28c>
    1508:	81 81       	ldd	r24, Z+1	; 0x01
    150a:	8f 70       	andi	r24, 0x0F	; 15
    150c:	0e 94 20 29 	call	0x5240	; 0x5240 <ModuleControllerStateSet>
    1510:	20 c0       	rjmp	.+64     	; 0x1552 <CANReceiveCallback+0x28c>
    1512:	85 30       	cpi	r24, 0x05	; 5
    1514:	21 f4       	brne	.+8      	; 0x151e <CANReceiveCallback+0x258>
    1516:	81 e0       	ldi	r24, 0x01	; 1
    1518:	80 93 14 05 	sts	0x0514, r24	; 0x800514 <sg_bSendHardwareDetail>
    151c:	1a c0       	rjmp	.+52     	; 0x1552 <CANReceiveCallback+0x28c>
    151e:	8e 30       	cpi	r24, 0x0E	; 14
    1520:	c1 f4       	brne	.+48     	; 0x1552 <CANReceiveCallback+0x28c>
    1522:	1f 92       	push	r1
    1524:	2f 93       	push	r18
    1526:	8e ef       	ldi	r24, 0xFE	; 254
    1528:	91 e0       	ldi	r25, 0x01	; 1
    152a:	a0 e0       	ldi	r26, 0x00	; 0
    152c:	af 93       	push	r26
    152e:	9f 93       	push	r25
    1530:	8f 93       	push	r24
    1532:	0e 94 f3 28 	call	0x51e6	; 0x51e6 <DebugOut>
    1536:	10 92 1f 05 	sts	0x051F, r1	; 0x80051f <sg_u8ModuleRegistrationID>
    153a:	10 92 19 05 	sts	0x0519, r1	; 0x800519 <sg_bModuleRegistered>
    153e:	10 92 7b 0b 	sts	0x0B7B, r1	; 0x800b7b <sg_bIgnoreStatusRequests>
    1542:	80 e0       	ldi	r24, 0x00	; 0
    1544:	0e 94 20 29 	call	0x5240	; 0x5240 <ModuleControllerStateSet>
    1548:	0f 90       	pop	r0
    154a:	0f 90       	pop	r0
    154c:	0f 90       	pop	r0
    154e:	0f 90       	pop	r0
    1550:	0f 90       	pop	r0
    1552:	cf 91       	pop	r28
    1554:	ff 90       	pop	r15
    1556:	ef 90       	pop	r14
    1558:	df 90       	pop	r13
    155a:	cf 90       	pop	r12
    155c:	08 95       	ret

Disassembly of section .text.ControllerStatusMessagesSend:

000003b8 <ControllerStatusMessagesSend>:
 3b8:	cf 92       	push	r12
 3ba:	df 92       	push	r13
 3bc:	ef 92       	push	r14
 3be:	ff 92       	push	r15
 3c0:	0f 93       	push	r16
 3c2:	1f 93       	push	r17
 3c4:	cf 93       	push	r28
 3c6:	df 93       	push	r29
 3c8:	00 d0       	rcall	.+0      	; 0x3ca <ControllerStatusMessagesSend+0x12>
 3ca:	00 d0       	rcall	.+0      	; 0x3cc <ControllerStatusMessagesSend+0x14>
 3cc:	cd b7       	in	r28, 0x3d	; 61
 3ce:	de b7       	in	r29, 0x3e	; 62
 3d0:	8c 01       	movw	r16, r24
 3d2:	80 91 18 05 	lds	r24, 0x0518	; 0x800518 <sg_bSendTimeRequest>
 3d6:	88 23       	and	r24, r24
 3d8:	69 f0       	breq	.+26     	; 0x3f4 <ControllerStatusMessagesSend+0x3c>
 3da:	88 e0       	ldi	r24, 0x08	; 8
 3dc:	d8 01       	movw	r26, r16
 3de:	1d 92       	st	X+, r1
 3e0:	8a 95       	dec	r24
 3e2:	e9 f7       	brne	.-6      	; 0x3de <ControllerStatusMessagesSend+0x26>
 3e4:	48 e0       	ldi	r20, 0x08	; 8
 3e6:	b8 01       	movw	r22, r16
 3e8:	88 e0       	ldi	r24, 0x08	; 8
 3ea:	0e 94 6c 25 	call	0x4ad8	; 0x4ad8 <CANSendMessage>
 3ee:	81 11       	cpse	r24, r1
 3f0:	10 92 18 05 	sts	0x0518, r1	; 0x800518 <sg_bSendTimeRequest>
 3f4:	80 91 16 05 	lds	r24, 0x0516	; 0x800516 <sg_bSendModuleControllerStatus>
 3f8:	88 23       	and	r24, r24
 3fa:	09 f4       	brne	.+2      	; 0x3fe <ControllerStatusMessagesSend+0x46>
 3fc:	06 c1       	rjmp	.+524    	; 0x60a <__LOCK_REGION_LENGTH__+0x20a>
 3fe:	80 91 73 0b 	lds	r24, 0x0B73	; 0x800b73 <sg_u8ControllerStatusMsgCount>
 402:	81 11       	cpse	r24, r1
 404:	80 c0       	rjmp	.+256    	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
 406:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
 40a:	8f 70       	andi	r24, 0x0F	; 15
 40c:	f8 01       	movw	r30, r16
 40e:	80 83       	st	Z, r24
 410:	80 91 1e 05 	lds	r24, 0x051E	; 0x80051e <sg_u8SOC>
 414:	81 83       	std	Z+1, r24	; 0x01
 416:	80 91 1d 05 	lds	r24, 0x051D	; 0x80051d <sg_u8SOH>
 41a:	82 83       	std	Z+2, r24	; 0x02
 41c:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <sg_sFrame+0x15>
 420:	83 83       	std	Z+3, r24	; 0x03
 422:	84 e0       	ldi	r24, 0x04	; 4
 424:	34 96       	adiw	r30, 0x04	; 4
 426:	df 01       	movw	r26, r30
 428:	1d 92       	st	X+, r1
 42a:	8a 95       	dec	r24
 42c:	e9 f7       	brne	.-6      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 42e:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <sg_sFrame+0x49>
 432:	88 23       	and	r24, r24
 434:	79 f0       	breq	.+30     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 436:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <sg_sFrame+0x4c>
 43a:	88 23       	and	r24, r24
 43c:	71 f0       	breq	.+28     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 43e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
 442:	83 30       	cpi	r24, 0x03	; 3
 444:	69 f4       	brne	.+26     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 446:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <ModuleCurrentConvertReadings>
 44a:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <sg_sFrame+0x30>
 44e:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <sg_sFrame+0x31>
 452:	08 c0       	rjmp	.+16     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 454:	80 e0       	ldi	r24, 0x00	; 0
 456:	90 e8       	ldi	r25, 0x80	; 128
 458:	05 c0       	rjmp	.+10     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 45a:	80 e0       	ldi	r24, 0x00	; 0
 45c:	90 e8       	ldi	r25, 0x80	; 128
 45e:	02 c0       	rjmp	.+4      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 460:	80 e0       	ldi	r24, 0x00	; 0
 462:	90 e8       	ldi	r25, 0x80	; 128
 464:	f8 01       	movw	r30, r16
 466:	84 83       	std	Z+4, r24	; 0x04
 468:	95 83       	std	Z+5, r25	; 0x05
 46a:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <sg_sFrame+0x46>
 46e:	88 23       	and	r24, r24
 470:	79 f0       	breq	.+30     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 472:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <sg_sFrame+0x47>
 476:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <sg_sFrame+0x48>
 47a:	4f ef       	ldi	r20, 0xFF	; 255
 47c:	53 e0       	ldi	r21, 0x03	; 3
 47e:	60 e0       	ldi	r22, 0x00	; 0
 480:	70 e0       	ldi	r23, 0x00	; 0
 482:	9a 01       	movw	r18, r20
 484:	ab 01       	movw	r20, r22
 486:	28 1b       	sub	r18, r24
 488:	39 0b       	sbc	r19, r25
 48a:	41 09       	sbc	r20, r1
 48c:	51 09       	sbc	r21, r1
 48e:	03 c0       	rjmp	.+6      	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
 490:	20 e0       	ldi	r18, 0x00	; 0
 492:	30 e0       	ldi	r19, 0x00	; 0
 494:	a9 01       	movw	r20, r18
 496:	ec e0       	ldi	r30, 0x0C	; 12
 498:	f1 e0       	ldi	r31, 0x01	; 1
 49a:	a5 a1       	ldd	r26, Z+37	; 0x25
 49c:	b6 a1       	ldd	r27, Z+38	; 0x26
 49e:	0e 94 e3 28 	call	0x51c6	; 0x51c6 <__mulshisi3>
 4a2:	dc 01       	movw	r26, r24
 4a4:	cb 01       	movw	r24, r22
 4a6:	68 94       	set
 4a8:	16 f8       	bld	r1, 6
 4aa:	b6 95       	lsr	r27
 4ac:	a7 95       	ror	r26
 4ae:	97 95       	ror	r25
 4b0:	87 95       	ror	r24
 4b2:	16 94       	lsr	r1
 4b4:	d1 f7       	brne	.-12     	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
 4b6:	c5 8c       	ldd	r12, Z+29	; 0x1d
 4b8:	d6 8c       	ldd	r13, Z+30	; 0x1e
 4ba:	e7 8c       	ldd	r14, Z+31	; 0x1f
 4bc:	f0 a0       	ldd	r15, Z+32	; 0x20
 4be:	bc 01       	movw	r22, r24
 4c0:	cd 01       	movw	r24, r26
 4c2:	6c 0d       	add	r22, r12
 4c4:	7d 1d       	adc	r23, r13
 4c6:	8e 1d       	adc	r24, r14
 4c8:	9f 1d       	adc	r25, r15
 4ca:	2f e0       	ldi	r18, 0x0F	; 15
 4cc:	30 e0       	ldi	r19, 0x00	; 0
 4ce:	40 e0       	ldi	r20, 0x00	; 0
 4d0:	50 e0       	ldi	r21, 0x00	; 0
 4d2:	0e 94 e7 23 	call	0x47ce	; 0x47ce <__udivmodsi4>
 4d6:	20 93 4e 01 	sts	0x014E, r18	; 0x80014e <sg_sFrame+0x42>
 4da:	30 93 4f 01 	sts	0x014F, r19	; 0x80014f <sg_sFrame+0x43>
 4de:	40 93 50 01 	sts	0x0150, r20	; 0x800150 <sg_sFrame+0x44>
 4e2:	50 93 51 01 	sts	0x0151, r21	; 0x800151 <sg_sFrame+0x45>
 4e6:	d8 01       	movw	r26, r16
 4e8:	16 96       	adiw	r26, 0x06	; 6
 4ea:	2c 93       	st	X, r18
 4ec:	16 97       	sbiw	r26, 0x06	; 6
 4ee:	17 96       	adiw	r26, 0x07	; 7
 4f0:	3c 93       	st	X, r19
 4f2:	48 e0       	ldi	r20, 0x08	; 8
 4f4:	b8 01       	movw	r22, r16
 4f6:	81 e0       	ldi	r24, 0x01	; 1
 4f8:	0e 94 6c 25 	call	0x4ad8	; 0x4ad8 <CANSendMessage>
 4fc:	88 23       	and	r24, r24
 4fe:	09 f4       	brne	.+2      	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
 500:	6b c0       	rjmp	.+214    	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
 502:	81 e0       	ldi	r24, 0x01	; 1
 504:	70 c0       	rjmp	.+224    	; 0x5e6 <__LOCK_REGION_LENGTH__+0x1e6>
 506:	81 30       	cpi	r24, 0x01	; 1
 508:	c1 f5       	brne	.+112    	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
 50a:	ec e0       	ldi	r30, 0x0C	; 12
 50c:	f1 e0       	ldi	r31, 0x01	; 1
 50e:	82 ad       	ldd	r24, Z+58	; 0x3a
 510:	93 ad       	ldd	r25, Z+59	; 0x3b
 512:	d8 01       	movw	r26, r16
 514:	8c 93       	st	X, r24
 516:	82 ad       	ldd	r24, Z+58	; 0x3a
 518:	93 ad       	ldd	r25, Z+59	; 0x3b
 51a:	11 96       	adiw	r26, 0x01	; 1
 51c:	9c 93       	st	X, r25
 51e:	11 97       	sbiw	r26, 0x01	; 1
 520:	80 ad       	ldd	r24, Z+56	; 0x38
 522:	91 ad       	ldd	r25, Z+57	; 0x39
 524:	12 96       	adiw	r26, 0x02	; 2
 526:	8c 93       	st	X, r24
 528:	12 97       	sbiw	r26, 0x02	; 2
 52a:	80 ad       	ldd	r24, Z+56	; 0x38
 52c:	91 ad       	ldd	r25, Z+57	; 0x39
 52e:	13 96       	adiw	r26, 0x03	; 3
 530:	9c 93       	st	X, r25
 532:	13 97       	sbiw	r26, 0x03	; 3
 534:	84 ad       	ldd	r24, Z+60	; 0x3c
 536:	95 ad       	ldd	r25, Z+61	; 0x3d
 538:	14 96       	adiw	r26, 0x04	; 4
 53a:	8c 93       	st	X, r24
 53c:	14 97       	sbiw	r26, 0x04	; 4
 53e:	84 ad       	ldd	r24, Z+60	; 0x3c
 540:	95 ad       	ldd	r25, Z+61	; 0x3d
 542:	15 96       	adiw	r26, 0x05	; 5
 544:	9c 93       	st	X, r25
 546:	60 91 4a 01 	lds	r22, 0x014A	; 0x80014a <sg_sFrame+0x3e>
 54a:	70 91 4b 01 	lds	r23, 0x014B	; 0x80014b <sg_sFrame+0x3f>
 54e:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <sg_sFrame+0x40>
 552:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <sg_sFrame+0x41>
 556:	2f e0       	ldi	r18, 0x0F	; 15
 558:	30 e0       	ldi	r19, 0x00	; 0
 55a:	40 e0       	ldi	r20, 0x00	; 0
 55c:	50 e0       	ldi	r21, 0x00	; 0
 55e:	0e 94 e7 23 	call	0x47ce	; 0x47ce <__udivmodsi4>
 562:	f8 01       	movw	r30, r16
 564:	26 83       	std	Z+6, r18	; 0x06
 566:	37 83       	std	Z+7, r19	; 0x07
 568:	48 e0       	ldi	r20, 0x08	; 8
 56a:	b8 01       	movw	r22, r16
 56c:	82 e0       	ldi	r24, 0x02	; 2
 56e:	0e 94 6c 25 	call	0x4ad8	; 0x4ad8 <CANSendMessage>
 572:	88 23       	and	r24, r24
 574:	99 f1       	breq	.+102    	; 0x5dc <__LOCK_REGION_LENGTH__+0x1dc>
 576:	81 e0       	ldi	r24, 0x01	; 1
 578:	36 c0       	rjmp	.+108    	; 0x5e6 <__LOCK_REGION_LENGTH__+0x1e6>
 57a:	82 30       	cpi	r24, 0x02	; 2
 57c:	89 f5       	brne	.+98     	; 0x5e0 <__LOCK_REGION_LENGTH__+0x1e0>
 57e:	ec e0       	ldi	r30, 0x0C	; 12
 580:	f1 e0       	ldi	r31, 0x01	; 1
 582:	84 a9       	ldd	r24, Z+52	; 0x34
 584:	95 a9       	ldd	r25, Z+53	; 0x35
 586:	d8 01       	movw	r26, r16
 588:	8c 93       	st	X, r24
 58a:	84 a9       	ldd	r24, Z+52	; 0x34
 58c:	95 a9       	ldd	r25, Z+53	; 0x35
 58e:	11 96       	adiw	r26, 0x01	; 1
 590:	9c 93       	st	X, r25
 592:	11 97       	sbiw	r26, 0x01	; 1
 594:	82 a9       	ldd	r24, Z+50	; 0x32
 596:	93 a9       	ldd	r25, Z+51	; 0x33
 598:	12 96       	adiw	r26, 0x02	; 2
 59a:	8c 93       	st	X, r24
 59c:	12 97       	sbiw	r26, 0x02	; 2
 59e:	82 a9       	ldd	r24, Z+50	; 0x32
 5a0:	93 a9       	ldd	r25, Z+51	; 0x33
 5a2:	13 96       	adiw	r26, 0x03	; 3
 5a4:	9c 93       	st	X, r25
 5a6:	13 97       	sbiw	r26, 0x03	; 3
 5a8:	86 a9       	ldd	r24, Z+54	; 0x36
 5aa:	97 a9       	ldd	r25, Z+55	; 0x37
 5ac:	14 96       	adiw	r26, 0x04	; 4
 5ae:	8c 93       	st	X, r24
 5b0:	14 97       	sbiw	r26, 0x04	; 4
 5b2:	86 a9       	ldd	r24, Z+54	; 0x36
 5b4:	97 a9       	ldd	r25, Z+55	; 0x37
 5b6:	15 96       	adiw	r26, 0x05	; 5
 5b8:	9c 93       	st	X, r25
 5ba:	15 97       	sbiw	r26, 0x05	; 5
 5bc:	16 96       	adiw	r26, 0x06	; 6
 5be:	1c 92       	st	X, r1
 5c0:	16 97       	sbiw	r26, 0x06	; 6
 5c2:	17 96       	adiw	r26, 0x07	; 7
 5c4:	1c 92       	st	X, r1
 5c6:	48 e0       	ldi	r20, 0x08	; 8
 5c8:	b8 01       	movw	r22, r16
 5ca:	83 e0       	ldi	r24, 0x03	; 3
 5cc:	0e 94 6c 25 	call	0x4ad8	; 0x4ad8 <CANSendMessage>
 5d0:	88 23       	and	r24, r24
 5d2:	41 f0       	breq	.+16     	; 0x5e4 <__LOCK_REGION_LENGTH__+0x1e4>
 5d4:	81 e0       	ldi	r24, 0x01	; 1
 5d6:	07 c0       	rjmp	.+14     	; 0x5e6 <__LOCK_REGION_LENGTH__+0x1e6>
 5d8:	80 e0       	ldi	r24, 0x00	; 0
 5da:	05 c0       	rjmp	.+10     	; 0x5e6 <__LOCK_REGION_LENGTH__+0x1e6>
 5dc:	80 e0       	ldi	r24, 0x00	; 0
 5de:	03 c0       	rjmp	.+6      	; 0x5e6 <__LOCK_REGION_LENGTH__+0x1e6>
 5e0:	81 e0       	ldi	r24, 0x01	; 1
 5e2:	01 c0       	rjmp	.+2      	; 0x5e6 <__LOCK_REGION_LENGTH__+0x1e6>
 5e4:	80 e0       	ldi	r24, 0x00	; 0
 5e6:	88 23       	and	r24, r24
 5e8:	81 f0       	breq	.+32     	; 0x60a <__LOCK_REGION_LENGTH__+0x20a>
 5ea:	80 91 73 0b 	lds	r24, 0x0B73	; 0x800b73 <sg_u8ControllerStatusMsgCount>
 5ee:	8f 5f       	subi	r24, 0xFF	; 255
 5f0:	80 93 73 0b 	sts	0x0B73, r24	; 0x800b73 <sg_u8ControllerStatusMsgCount>
 5f4:	83 30       	cpi	r24, 0x03	; 3
 5f6:	48 f0       	brcs	.+18     	; 0x60a <__LOCK_REGION_LENGTH__+0x20a>
 5f8:	10 92 73 0b 	sts	0x0B73, r1	; 0x800b73 <sg_u8ControllerStatusMsgCount>
 5fc:	10 92 16 05 	sts	0x0516, r1	; 0x800516 <sg_bSendModuleControllerStatus>
 600:	10 92 7b 0b 	sts	0x0B7B, r1	; 0x800b7b <sg_bIgnoreStatusRequests>
 604:	81 e0       	ldi	r24, 0x01	; 1
 606:	80 93 13 05 	sts	0x0513, r24	; 0x800513 <sg_bSendCellCommStatus>
 60a:	80 91 15 05 	lds	r24, 0x0515	; 0x800515 <sg_bSendCellStatus>
 60e:	88 23       	and	r24, r24
 610:	09 f4       	brne	.+2      	; 0x614 <__LOCK_REGION_LENGTH__+0x214>
 612:	c1 c0       	rjmp	.+386    	; 0x796 <__LOCK_REGION_LENGTH__+0x396>
 614:	1c 82       	std	Y+4, r1	; 0x04
 616:	1b 82       	std	Y+3, r1	; 0x03
 618:	1a 82       	std	Y+2, r1	; 0x02
 61a:	19 82       	std	Y+1, r1	; 0x01
 61c:	e0 90 1b 05 	lds	r14, 0x051B	; 0x80051b <sg_u8CellStatus>
 620:	f0 90 3b 01 	lds	r15, 0x013B	; 0x80013b <sg_sFrame+0x2f>
 624:	ef 14       	cp	r14, r15
 626:	08 f0       	brcs	.+2      	; 0x62a <__LOCK_REGION_LENGTH__+0x22a>
 628:	69 c0       	rjmp	.+210    	; 0x6fc <__LOCK_REGION_LENGTH__+0x2fc>
 62a:	ff 20       	and	r15, r15
 62c:	09 f4       	brne	.+2      	; 0x630 <__LOCK_REGION_LENGTH__+0x230>
 62e:	66 c0       	rjmp	.+204    	; 0x6fc <__LOCK_REGION_LENGTH__+0x2fc>
 630:	ef 2d       	mov	r30, r15
 632:	ee 19       	sub	r30, r14
 634:	8f ef       	ldi	r24, 0xFF	; 255
 636:	8e 0f       	add	r24, r30
 638:	8c 36       	cpi	r24, 0x6C	; 108
 63a:	08 f0       	brcs	.+2      	; 0x63e <__LOCK_REGION_LENGTH__+0x23e>
 63c:	5f c0       	rjmp	.+190    	; 0x6fc <__LOCK_REGION_LENGTH__+0x2fc>
 63e:	20 91 69 01 	lds	r18, 0x0169	; 0x800169 <sg_sFrame+0x5d>
 642:	30 91 6a 01 	lds	r19, 0x016A	; 0x80016a <sg_sFrame+0x5e>
 646:	23 2b       	or	r18, r19
 648:	29 f1       	breq	.+74     	; 0x694 <__LOCK_REGION_LENGTH__+0x294>
 64a:	20 91 67 01 	lds	r18, 0x0167	; 0x800167 <sg_sFrame+0x5b>
 64e:	30 91 68 01 	lds	r19, 0x0168	; 0x800168 <sg_sFrame+0x5c>
 652:	23 2b       	or	r18, r19
 654:	39 f4       	brne	.+14     	; 0x664 <__LOCK_REGION_LENGTH__+0x264>
 656:	40 91 65 01 	lds	r20, 0x0165	; 0x800165 <sg_sFrame+0x59>
 65a:	50 91 66 01 	lds	r21, 0x0166	; 0x800166 <sg_sFrame+0x5a>
 65e:	41 50       	subi	r20, 0x01	; 1
 660:	51 09       	sbc	r21, r1
 662:	06 c0       	rjmp	.+12     	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
 664:	40 91 67 01 	lds	r20, 0x0167	; 0x800167 <sg_sFrame+0x5b>
 668:	50 91 68 01 	lds	r21, 0x0168	; 0x800168 <sg_sFrame+0x5c>
 66c:	41 50       	subi	r20, 0x01	; 1
 66e:	51 09       	sbc	r21, r1
 670:	20 91 21 01 	lds	r18, 0x0121	; 0x800121 <sg_sFrame+0x15>
 674:	30 e0       	ldi	r19, 0x00	; 0
 676:	22 0f       	add	r18, r18
 678:	33 1f       	adc	r19, r19
 67a:	22 0f       	add	r18, r18
 67c:	33 1f       	adc	r19, r19
 67e:	24 9f       	mul	r18, r20
 680:	f0 01       	movw	r30, r0
 682:	25 9f       	mul	r18, r21
 684:	f0 0d       	add	r31, r0
 686:	34 9f       	mul	r19, r20
 688:	f0 0d       	add	r31, r0
 68a:	11 24       	eor	r1, r1
 68c:	9f 01       	movw	r18, r30
 68e:	24 59       	subi	r18, 0x94	; 148
 690:	3e 4f       	sbci	r19, 0xFE	; 254
 692:	15 c0       	rjmp	.+42     	; 0x6be <__LOCK_REGION_LENGTH__+0x2be>
 694:	40 91 67 01 	lds	r20, 0x0167	; 0x800167 <sg_sFrame+0x5b>
 698:	50 91 68 01 	lds	r21, 0x0168	; 0x800168 <sg_sFrame+0x5c>
 69c:	20 91 21 01 	lds	r18, 0x0121	; 0x800121 <sg_sFrame+0x15>
 6a0:	30 e0       	ldi	r19, 0x00	; 0
 6a2:	22 0f       	add	r18, r18
 6a4:	33 1f       	adc	r19, r19
 6a6:	22 0f       	add	r18, r18
 6a8:	33 1f       	adc	r19, r19
 6aa:	42 9f       	mul	r20, r18
 6ac:	f0 01       	movw	r30, r0
 6ae:	43 9f       	mul	r20, r19
 6b0:	f0 0d       	add	r31, r0
 6b2:	52 9f       	mul	r21, r18
 6b4:	f0 0d       	add	r31, r0
 6b6:	11 24       	eor	r1, r1
 6b8:	9f 01       	movw	r18, r30
 6ba:	24 59       	subi	r18, 0x94	; 148
 6bc:	3e 4f       	sbci	r19, 0xFE	; 254
 6be:	e8 2f       	mov	r30, r24
 6c0:	f0 e0       	ldi	r31, 0x00	; 0
 6c2:	ee 0f       	add	r30, r30
 6c4:	ff 1f       	adc	r31, r31
 6c6:	ee 0f       	add	r30, r30
 6c8:	ff 1f       	adc	r31, r31
 6ca:	e2 0f       	add	r30, r18
 6cc:	f3 1f       	adc	r31, r19
 6ce:	80 81       	ld	r24, Z
 6d0:	91 81       	ldd	r25, Z+1	; 0x01
 6d2:	c2 80       	ldd	r12, Z+2	; 0x02
 6d4:	d3 80       	ldd	r13, Z+3	; 0x03
 6d6:	be 01       	movw	r22, r28
 6d8:	6d 5f       	subi	r22, 0xFD	; 253
 6da:	7f 4f       	sbci	r23, 0xFF	; 255
 6dc:	0e 94 74 21 	call	0x42e8	; 0x42e8 <CellDataConvertVoltage>
 6e0:	81 11       	cpse	r24, r1
 6e2:	02 c0       	rjmp	.+4      	; 0x6e8 <__LOCK_REGION_LENGTH__+0x2e8>
 6e4:	1c 82       	std	Y+4, r1	; 0x04
 6e6:	1b 82       	std	Y+3, r1	; 0x03
 6e8:	be 01       	movw	r22, r28
 6ea:	6f 5f       	subi	r22, 0xFF	; 255
 6ec:	7f 4f       	sbci	r23, 0xFF	; 255
 6ee:	c6 01       	movw	r24, r12
 6f0:	0e 94 e0 20 	call	0x41c0	; 0x41c0 <CellDataConvertTemperature>
 6f4:	81 11       	cpse	r24, r1
 6f6:	02 c0       	rjmp	.+4      	; 0x6fc <__LOCK_REGION_LENGTH__+0x2fc>
 6f8:	1a 82       	std	Y+2, r1	; 0x02
 6fa:	19 82       	std	Y+1, r1	; 0x01
 6fc:	f8 01       	movw	r30, r16
 6fe:	e0 82       	st	Z, r14
 700:	f1 82       	std	Z+1, r15	; 0x01
 702:	99 81       	ldd	r25, Y+1	; 0x01
 704:	8a 81       	ldd	r24, Y+2	; 0x02
 706:	92 83       	std	Z+2, r25	; 0x02
 708:	83 83       	std	Z+3, r24	; 0x03
 70a:	2b 81       	ldd	r18, Y+3	; 0x03
 70c:	3c 81       	ldd	r19, Y+4	; 0x04
 70e:	24 83       	std	Z+4, r18	; 0x04
 710:	35 83       	std	Z+5, r19	; 0x05
 712:	21 15       	cp	r18, r1
 714:	31 05       	cpc	r19, r1
 716:	59 f0       	breq	.+22     	; 0x72e <__LOCK_REGION_LENGTH__+0x32e>
 718:	c9 01       	movw	r24, r18
 71a:	64 e0       	ldi	r22, 0x04	; 4
 71c:	70 e1       	ldi	r23, 0x10	; 16
 71e:	0e 94 45 26 	call	0x4c8a	; 0x4c8a <__udivmodhi4>
 722:	84 e6       	ldi	r24, 0x64	; 100
 724:	68 9f       	mul	r22, r24
 726:	60 2d       	mov	r22, r0
 728:	11 24       	eor	r1, r1
 72a:	66 83       	std	Z+6, r22	; 0x06
 72c:	01 c0       	rjmp	.+2      	; 0x730 <__LOCK_REGION_LENGTH__+0x330>
 72e:	16 82       	std	Z+6, r1	; 0x06
 730:	ec e0       	ldi	r30, 0x0C	; 12
 732:	f1 e0       	ldi	r31, 0x01	; 1
 734:	40 ad       	ldd	r20, Z+56	; 0x38
 736:	51 ad       	ldd	r21, Z+57	; 0x39
 738:	82 ad       	ldd	r24, Z+58	; 0x3a
 73a:	93 ad       	ldd	r25, Z+59	; 0x3b
 73c:	84 17       	cp	r24, r20
 73e:	95 07       	cpc	r25, r21
 740:	98 f4       	brcc	.+38     	; 0x768 <__LOCK_REGION_LENGTH__+0x368>
 742:	21 15       	cp	r18, r1
 744:	31 05       	cpc	r19, r1
 746:	81 f0       	breq	.+32     	; 0x768 <__LOCK_REGION_LENGTH__+0x368>
 748:	60 ad       	ldd	r22, Z+56	; 0x38
 74a:	71 ad       	ldd	r23, Z+57	; 0x39
 74c:	82 ad       	ldd	r24, Z+58	; 0x3a
 74e:	93 ad       	ldd	r25, Z+59	; 0x3b
 750:	68 1b       	sub	r22, r24
 752:	79 0b       	sbc	r23, r25
 754:	c9 01       	movw	r24, r18
 756:	0e 94 45 26 	call	0x4c8a	; 0x4c8a <__udivmodhi4>
 75a:	84 e6       	ldi	r24, 0x64	; 100
 75c:	68 9f       	mul	r22, r24
 75e:	60 2d       	mov	r22, r0
 760:	11 24       	eor	r1, r1
 762:	f8 01       	movw	r30, r16
 764:	67 83       	std	Z+7, r22	; 0x07
 766:	03 c0       	rjmp	.+6      	; 0x76e <__LOCK_REGION_LENGTH__+0x36e>
 768:	d8 01       	movw	r26, r16
 76a:	17 96       	adiw	r26, 0x07	; 7
 76c:	1c 92       	st	X, r1
 76e:	48 e0       	ldi	r20, 0x08	; 8
 770:	b8 01       	movw	r22, r16
 772:	84 e0       	ldi	r24, 0x04	; 4
 774:	0e 94 6c 25 	call	0x4ad8	; 0x4ad8 <CANSendMessage>
 778:	88 23       	and	r24, r24
 77a:	69 f0       	breq	.+26     	; 0x796 <__LOCK_REGION_LENGTH__+0x396>
 77c:	80 91 1b 05 	lds	r24, 0x051B	; 0x80051b <sg_u8CellStatus>
 780:	8f 5f       	subi	r24, 0xFF	; 255
 782:	80 93 1b 05 	sts	0x051B, r24	; 0x80051b <sg_u8CellStatus>
 786:	90 91 1b 05 	lds	r25, 0x051B	; 0x80051b <sg_u8CellStatus>
 78a:	80 91 1c 05 	lds	r24, 0x051C	; 0x80051c <sg_u8CellStatusTarget>
 78e:	98 17       	cp	r25, r24
 790:	10 f0       	brcs	.+4      	; 0x796 <__LOCK_REGION_LENGTH__+0x396>
 792:	10 92 15 05 	sts	0x0515, r1	; 0x800515 <sg_bSendCellStatus>
 796:	80 91 13 05 	lds	r24, 0x0513	; 0x800513 <sg_bSendCellCommStatus>
 79a:	88 23       	and	r24, r24
 79c:	89 f1       	breq	.+98     	; 0x800 <__EEPROM_REGION_LENGTH__>
 79e:	ec e0       	ldi	r30, 0x0C	; 12
 7a0:	f1 e0       	ldi	r31, 0x01	; 1
 7a2:	83 89       	ldd	r24, Z+19	; 0x13
 7a4:	d8 01       	movw	r26, r16
 7a6:	8c 93       	st	X, r24
 7a8:	84 89       	ldd	r24, Z+20	; 0x14
 7aa:	11 96       	adiw	r26, 0x01	; 1
 7ac:	8c 93       	st	X, r24
 7ae:	11 97       	sbiw	r26, 0x01	; 1
 7b0:	80 a5       	ldd	r24, Z+40	; 0x28
 7b2:	91 a5       	ldd	r25, Z+41	; 0x29
 7b4:	12 96       	adiw	r26, 0x02	; 2
 7b6:	8c 93       	st	X, r24
 7b8:	12 97       	sbiw	r26, 0x02	; 2
 7ba:	80 a5       	ldd	r24, Z+40	; 0x28
 7bc:	91 a5       	ldd	r25, Z+41	; 0x29
 7be:	13 96       	adiw	r26, 0x03	; 3
 7c0:	9c 93       	st	X, r25
 7c2:	13 97       	sbiw	r26, 0x03	; 3
 7c4:	86 a5       	ldd	r24, Z+46	; 0x2e
 7c6:	14 96       	adiw	r26, 0x04	; 4
 7c8:	8c 93       	st	X, r24
 7ca:	14 97       	sbiw	r26, 0x04	; 4
 7cc:	82 a5       	ldd	r24, Z+42	; 0x2a
 7ce:	8f 3f       	cpi	r24, 0xFF	; 255
 7d0:	31 f0       	breq	.+12     	; 0x7de <__LOCK_REGION_LENGTH__+0x3de>
 7d2:	85 a5       	ldd	r24, Z+45	; 0x2d
 7d4:	92 a5       	ldd	r25, Z+42	; 0x2a
 7d6:	89 1b       	sub	r24, r25
 7d8:	15 96       	adiw	r26, 0x05	; 5
 7da:	8c 93       	st	X, r24
 7dc:	03 c0       	rjmp	.+6      	; 0x7e4 <__LOCK_REGION_LENGTH__+0x3e4>
 7de:	8f ef       	ldi	r24, 0xFF	; 255
 7e0:	f8 01       	movw	r30, r16
 7e2:	85 83       	std	Z+5, r24	; 0x05
 7e4:	d8 01       	movw	r26, r16
 7e6:	16 96       	adiw	r26, 0x06	; 6
 7e8:	1c 92       	st	X, r1
 7ea:	16 97       	sbiw	r26, 0x06	; 6
 7ec:	17 96       	adiw	r26, 0x07	; 7
 7ee:	1c 92       	st	X, r1
 7f0:	48 e0       	ldi	r20, 0x08	; 8
 7f2:	b8 01       	movw	r22, r16
 7f4:	86 e0       	ldi	r24, 0x06	; 6
 7f6:	0e 94 6c 25 	call	0x4ad8	; 0x4ad8 <CANSendMessage>
 7fa:	81 11       	cpse	r24, r1
 7fc:	10 92 13 05 	sts	0x0513, r1	; 0x800513 <sg_bSendCellCommStatus>
 800:	80 91 14 05 	lds	r24, 0x0514	; 0x800514 <sg_bSendHardwareDetail>
 804:	88 23       	and	r24, r24
 806:	09 f1       	breq	.+66     	; 0x84a <__EEPROM_REGION_LENGTH__+0x4a>
 808:	b8 01       	movw	r22, r16
 80a:	c8 01       	movw	r24, r16
 80c:	02 96       	adiw	r24, 0x02	; 2
 80e:	0e 94 2a 1d 	call	0x3a54	; 0x3a54 <CurrentThresholdsGet>
 812:	a0 91 21 01 	lds	r26, 0x0121	; 0x800121 <sg_sFrame+0x15>
 816:	b0 e0       	ldi	r27, 0x00	; 0
 818:	28 e9       	ldi	r18, 0x98	; 152
 81a:	36 e1       	ldi	r19, 0x16	; 22
 81c:	46 e0       	ldi	r20, 0x06	; 6
 81e:	50 e0       	ldi	r21, 0x00	; 0
 820:	0e 94 7c 28 	call	0x50f8	; 0x50f8 <__muluhisi3>
 824:	2c ed       	ldi	r18, 0xDC	; 220
 826:	35 e0       	ldi	r19, 0x05	; 5
 828:	40 e0       	ldi	r20, 0x00	; 0
 82a:	50 e0       	ldi	r21, 0x00	; 0
 82c:	0e 94 e7 23 	call	0x47ce	; 0x47ce <__udivmodsi4>
 830:	f8 01       	movw	r30, r16
 832:	24 83       	std	Z+4, r18	; 0x04
 834:	35 83       	std	Z+5, r19	; 0x05
 836:	16 82       	std	Z+6, r1	; 0x06
 838:	17 82       	std	Z+7, r1	; 0x07
 83a:	48 e0       	ldi	r20, 0x08	; 8
 83c:	b8 01       	movw	r22, r16
 83e:	85 e0       	ldi	r24, 0x05	; 5
 840:	0e 94 6c 25 	call	0x4ad8	; 0x4ad8 <CANSendMessage>
 844:	81 11       	cpse	r24, r1
 846:	10 92 14 05 	sts	0x0514, r1	; 0x800514 <sg_bSendHardwareDetail>
 84a:	0f 90       	pop	r0
 84c:	0f 90       	pop	r0
 84e:	0f 90       	pop	r0
 850:	0f 90       	pop	r0
 852:	df 91       	pop	r29
 854:	cf 91       	pop	r28
 856:	1f 91       	pop	r17
 858:	0f 91       	pop	r16
 85a:	ff 90       	pop	r15
 85c:	ef 90       	pop	r14
 85e:	df 90       	pop	r13
 860:	cf 90       	pop	r12
 862:	08 95       	ret

Disassembly of section .text.CellStringProcess:

00000cbc <CellStringProcess>:
 cbc:	3f 92       	push	r3
 cbe:	4f 92       	push	r4
 cc0:	5f 92       	push	r5
 cc2:	6f 92       	push	r6
 cc4:	7f 92       	push	r7
 cc6:	8f 92       	push	r8
 cc8:	9f 92       	push	r9
 cca:	af 92       	push	r10
 ccc:	bf 92       	push	r11
 cce:	cf 92       	push	r12
 cd0:	df 92       	push	r13
 cd2:	ef 92       	push	r14
 cd4:	ff 92       	push	r15
 cd6:	0f 93       	push	r16
 cd8:	1f 93       	push	r17
 cda:	cf 93       	push	r28
 cdc:	df 93       	push	r29
 cde:	00 d0       	rcall	.+0      	; 0xce0 <CellStringProcess+0x24>
 ce0:	00 d0       	rcall	.+0      	; 0xce2 <CellStringProcess+0x26>
 ce2:	00 d0       	rcall	.+0      	; 0xce4 <CellStringProcess+0x28>
 ce4:	cd b7       	in	r28, 0x3d	; 61
 ce6:	de b7       	in	r29, 0x3e	; 62
 ce8:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <sg_sFrame+0x2b>
 cec:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <sg_sFrame+0x2c>
 cf0:	89 2b       	or	r24, r25
 cf2:	09 f4       	brne	.+2      	; 0xcf6 <CellStringProcess+0x3a>
 cf4:	1f c1       	rjmp	.+574    	; 0xf34 <CellStringProcess+0x278>
 cf6:	ec e0       	ldi	r30, 0x0C	; 12
 cf8:	f1 e0       	ldi	r31, 0x01	; 1
 cfa:	8f ef       	ldi	r24, 0xFF	; 255
 cfc:	82 a7       	std	Z+42, r24	; 0x2a
 cfe:	93 89       	ldd	r25, Z+19	; 0x13
 d00:	85 a5       	ldd	r24, Z+45	; 0x2d
 d02:	89 17       	cp	r24, r25
 d04:	28 f4       	brcc	.+10     	; 0xd10 <CellStringProcess+0x54>
 d06:	85 a5       	ldd	r24, Z+45	; 0x2d
 d08:	83 8b       	std	Z+19, r24	; 0x13
 d0a:	81 e0       	ldi	r24, 0x01	; 1
 d0c:	80 93 13 05 	sts	0x0513, r24	; 0x800513 <sg_bSendCellCommStatus>
 d10:	ec e0       	ldi	r30, 0x0C	; 12
 d12:	f1 e0       	ldi	r31, 0x01	; 1
 d14:	94 89       	ldd	r25, Z+20	; 0x14
 d16:	85 a5       	ldd	r24, Z+45	; 0x2d
 d18:	98 17       	cp	r25, r24
 d1a:	28 f4       	brcc	.+10     	; 0xd26 <CellStringProcess+0x6a>
 d1c:	85 a5       	ldd	r24, Z+45	; 0x2d
 d1e:	84 8b       	std	Z+20, r24	; 0x14
 d20:	81 e0       	ldi	r24, 0x01	; 1
 d22:	80 93 13 05 	sts	0x0513, r24	; 0x800513 <sg_bSendCellCommStatus>
 d26:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <sg_sFrame+0x2b>
 d2a:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <sg_sFrame+0x2c>
 d2e:	83 70       	andi	r24, 0x03	; 3
 d30:	99 27       	eor	r25, r25
 d32:	89 2b       	or	r24, r25
 d34:	61 f0       	breq	.+24     	; 0xd4e <CellStringProcess+0x92>
 d36:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <sg_sFrame+0x2e>
 d3a:	8f 3f       	cpi	r24, 0xFF	; 255
 d3c:	41 f0       	breq	.+16     	; 0xd4e <CellStringProcess+0x92>
 d3e:	ec e0       	ldi	r30, 0x0C	; 12
 d40:	f1 e0       	ldi	r31, 0x01	; 1
 d42:	86 a5       	ldd	r24, Z+46	; 0x2e
 d44:	8f 5f       	subi	r24, 0xFF	; 255
 d46:	86 a7       	std	Z+46, r24	; 0x2e
 d48:	81 e0       	ldi	r24, 0x01	; 1
 d4a:	80 93 13 05 	sts	0x0513, r24	; 0x800513 <sg_bSendCellCommStatus>
 d4e:	ec e0       	ldi	r30, 0x0C	; 12
 d50:	f1 e0       	ldi	r31, 0x01	; 1
 d52:	11 ae       	std	Z+57, r1	; 0x39
 d54:	10 ae       	std	Z+56, r1	; 0x38
 d56:	8f ef       	ldi	r24, 0xFF	; 255
 d58:	9f ef       	ldi	r25, 0xFF	; 255
 d5a:	93 af       	std	Z+59, r25	; 0x3b
 d5c:	82 af       	std	Z+58, r24	; 0x3a
 d5e:	15 ae       	std	Z+61, r1	; 0x3d
 d60:	14 ae       	std	Z+60, r1	; 0x3c
 d62:	80 e0       	ldi	r24, 0x00	; 0
 d64:	90 e8       	ldi	r25, 0x80	; 128
 d66:	93 ab       	std	Z+51, r25	; 0x33
 d68:	82 ab       	std	Z+50, r24	; 0x32
 d6a:	8f ef       	ldi	r24, 0xFF	; 255
 d6c:	9f e7       	ldi	r25, 0x7F	; 127
 d6e:	95 ab       	std	Z+53, r25	; 0x35
 d70:	84 ab       	std	Z+52, r24	; 0x34
 d72:	17 aa       	std	Z+55, r1	; 0x37
 d74:	16 aa       	std	Z+54, r1	; 0x36
 d76:	d1 2c       	mov	r13, r1
 d78:	31 2c       	mov	r3, r1
 d7a:	c1 2c       	mov	r12, r1
 d7c:	41 2c       	mov	r4, r1
 d7e:	51 2c       	mov	r5, r1
 d80:	32 01       	movw	r6, r4
 d82:	81 2c       	mov	r8, r1
 d84:	91 2c       	mov	r9, r1
 d86:	54 01       	movw	r10, r8
 d88:	2f ef       	ldi	r18, 0xFF	; 255
 d8a:	3f e7       	ldi	r19, 0x7F	; 127
 d8c:	3e 83       	std	Y+6, r19	; 0x06
 d8e:	2d 83       	std	Y+5, r18	; 0x05
 d90:	80 e0       	ldi	r24, 0x00	; 0
 d92:	90 e8       	ldi	r25, 0x80	; 128
 d94:	9c 83       	std	Y+4, r25	; 0x04
 d96:	8b 83       	std	Y+3, r24	; 0x03
 d98:	7a c0       	rjmp	.+244    	; 0xe8e <CellStringProcess+0x1d2>
 d9a:	20 91 67 01 	lds	r18, 0x0167	; 0x800167 <sg_sFrame+0x5b>
 d9e:	30 91 68 01 	lds	r19, 0x0168	; 0x800168 <sg_sFrame+0x5c>
 da2:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <sg_sFrame+0x15>
 da6:	90 e0       	ldi	r25, 0x00	; 0
 da8:	88 0f       	add	r24, r24
 daa:	99 1f       	adc	r25, r25
 dac:	88 0f       	add	r24, r24
 dae:	99 1f       	adc	r25, r25
 db0:	28 9f       	mul	r18, r24
 db2:	80 01       	movw	r16, r0
 db4:	29 9f       	mul	r18, r25
 db6:	10 0d       	add	r17, r0
 db8:	38 9f       	mul	r19, r24
 dba:	10 0d       	add	r17, r0
 dbc:	11 24       	eor	r1, r1
 dbe:	04 59       	subi	r16, 0x94	; 148
 dc0:	1e 4f       	sbci	r17, 0xFE	; 254
 dc2:	8d 2d       	mov	r24, r13
 dc4:	90 e0       	ldi	r25, 0x00	; 0
 dc6:	88 0f       	add	r24, r24
 dc8:	99 1f       	adc	r25, r25
 dca:	88 0f       	add	r24, r24
 dcc:	99 1f       	adc	r25, r25
 dce:	08 0f       	add	r16, r24
 dd0:	19 1f       	adc	r17, r25
 dd2:	d8 01       	movw	r26, r16
 dd4:	8d 91       	ld	r24, X+
 dd6:	9c 91       	ld	r25, X
 dd8:	11 97       	sbiw	r26, 0x01	; 1
 dda:	9a 83       	std	Y+2, r25	; 0x02
 ddc:	89 83       	std	Y+1, r24	; 0x01
 dde:	12 96       	adiw	r26, 0x02	; 2
 de0:	ed 90       	ld	r14, X+
 de2:	fc 90       	ld	r15, X
 de4:	13 97       	sbiw	r26, 0x03	; 3
 de6:	60 e0       	ldi	r22, 0x00	; 0
 de8:	70 e0       	ldi	r23, 0x00	; 0
 dea:	c7 01       	movw	r24, r14
 dec:	0e 94 e0 20 	call	0x41c0	; 0x41c0 <CellDataConvertTemperature>
 df0:	88 23       	and	r24, r24
 df2:	f1 f0       	breq	.+60     	; 0xe30 <CellStringProcess+0x174>
 df4:	f4 fe       	sbrs	r15, 4
 df6:	03 c0       	rjmp	.+6      	; 0xdfe <CellStringProcess+0x142>
 df8:	c7 01       	movw	r24, r14
 dfa:	90 6f       	ori	r25, 0xF0	; 240
 dfc:	02 c0       	rjmp	.+4      	; 0xe02 <CellStringProcess+0x146>
 dfe:	c7 01       	movw	r24, r14
 e00:	9f 77       	andi	r25, 0x7F	; 127
 e02:	eb 81       	ldd	r30, Y+3	; 0x03
 e04:	fc 81       	ldd	r31, Y+4	; 0x04
 e06:	e8 17       	cp	r30, r24
 e08:	f9 07       	cpc	r31, r25
 e0a:	14 f4       	brge	.+4      	; 0xe10 <CellStringProcess+0x154>
 e0c:	9c 83       	std	Y+4, r25	; 0x04
 e0e:	8b 83       	std	Y+3, r24	; 0x03
 e10:	2d 81       	ldd	r18, Y+5	; 0x05
 e12:	3e 81       	ldd	r19, Y+6	; 0x06
 e14:	82 17       	cp	r24, r18
 e16:	93 07       	cpc	r25, r19
 e18:	14 f4       	brge	.+4      	; 0xe1e <CellStringProcess+0x162>
 e1a:	9e 83       	std	Y+6, r25	; 0x06
 e1c:	8d 83       	std	Y+5, r24	; 0x05
 e1e:	09 2e       	mov	r0, r25
 e20:	00 0c       	add	r0, r0
 e22:	aa 0b       	sbc	r26, r26
 e24:	bb 0b       	sbc	r27, r27
 e26:	88 0e       	add	r8, r24
 e28:	99 1e       	adc	r9, r25
 e2a:	aa 1e       	adc	r10, r26
 e2c:	bb 1e       	adc	r11, r27
 e2e:	33 94       	inc	r3
 e30:	d8 01       	movw	r26, r16
 e32:	8d 91       	ld	r24, X+
 e34:	9c 91       	ld	r25, X
 e36:	99 23       	and	r25, r25
 e38:	1c f4       	brge	.+6      	; 0xe40 <CellStringProcess+0x184>
 e3a:	81 e0       	ldi	r24, 0x01	; 1
 e3c:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <sg_sFrame+0x27>
 e40:	be 01       	movw	r22, r28
 e42:	6f 5f       	subi	r22, 0xFF	; 255
 e44:	7f 4f       	sbci	r23, 0xFF	; 255
 e46:	89 81       	ldd	r24, Y+1	; 0x01
 e48:	9a 81       	ldd	r25, Y+2	; 0x02
 e4a:	0e 94 74 21 	call	0x42e8	; 0x42e8 <CellDataConvertVoltage>
 e4e:	88 23       	and	r24, r24
 e50:	e9 f0       	breq	.+58     	; 0xe8c <CellStringProcess+0x1d0>
 e52:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <sg_sFrame+0x38>
 e56:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <sg_sFrame+0x39>
 e5a:	89 81       	ldd	r24, Y+1	; 0x01
 e5c:	9a 81       	ldd	r25, Y+2	; 0x02
 e5e:	28 17       	cp	r18, r24
 e60:	39 07       	cpc	r19, r25
 e62:	20 f4       	brcc	.+8      	; 0xe6c <CellStringProcess+0x1b0>
 e64:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <sg_sFrame+0x39>
 e68:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <sg_sFrame+0x38>
 e6c:	20 91 46 01 	lds	r18, 0x0146	; 0x800146 <sg_sFrame+0x3a>
 e70:	30 91 47 01 	lds	r19, 0x0147	; 0x800147 <sg_sFrame+0x3b>
 e74:	82 17       	cp	r24, r18
 e76:	93 07       	cpc	r25, r19
 e78:	20 f4       	brcc	.+8      	; 0xe82 <CellStringProcess+0x1c6>
 e7a:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <sg_sFrame+0x3b>
 e7e:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <sg_sFrame+0x3a>
 e82:	48 0e       	add	r4, r24
 e84:	59 1e       	adc	r5, r25
 e86:	61 1c       	adc	r6, r1
 e88:	71 1c       	adc	r7, r1
 e8a:	c3 94       	inc	r12
 e8c:	d3 94       	inc	r13
 e8e:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <sg_sFrame+0x2d>
 e92:	d8 16       	cp	r13, r24
 e94:	08 f4       	brcc	.+2      	; 0xe98 <CellStringProcess+0x1dc>
 e96:	81 cf       	rjmp	.-254    	; 0xd9a <CellStringProcess+0xde>
 e98:	cc 20       	and	r12, r12
 e9a:	89 f1       	breq	.+98     	; 0xefe <CellStringProcess+0x242>
 e9c:	ea e4       	ldi	r30, 0x4A	; 74
 e9e:	f1 e0       	ldi	r31, 0x01	; 1
 ea0:	40 82       	st	Z, r4
 ea2:	51 82       	std	Z+1, r5	; 0x01
 ea4:	62 82       	std	Z+2, r6	; 0x02
 ea6:	73 82       	std	Z+3, r7	; 0x03
 ea8:	60 81       	ld	r22, Z
 eaa:	71 81       	ldd	r23, Z+1	; 0x01
 eac:	82 81       	ldd	r24, Z+2	; 0x02
 eae:	93 81       	ldd	r25, Z+3	; 0x03
 eb0:	2c 2d       	mov	r18, r12
 eb2:	30 e0       	ldi	r19, 0x00	; 0
 eb4:	40 e0       	ldi	r20, 0x00	; 0
 eb6:	50 e0       	ldi	r21, 0x00	; 0
 eb8:	0e 94 e7 23 	call	0x47ce	; 0x47ce <__udivmodsi4>
 ebc:	30 93 49 01 	sts	0x0149, r19	; 0x800149 <sg_sFrame+0x3d>
 ec0:	20 93 48 01 	sts	0x0148, r18	; 0x800148 <sg_sFrame+0x3c>
 ec4:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
 ec8:	83 30       	cpi	r24, 0x03	; 3
 eca:	c9 f0       	breq	.+50     	; 0xefe <CellStringProcess+0x242>
 ecc:	80 91 11 05 	lds	r24, 0x0511	; 0x800511 <sg_bCellBalancedOnce>
 ed0:	81 11       	cpse	r24, r1
 ed2:	15 c0       	rjmp	.+42     	; 0xefe <CellStringProcess+0x242>
 ed4:	ec e0       	ldi	r30, 0x0C	; 12
 ed6:	f1 e0       	ldi	r31, 0x01	; 1
 ed8:	20 ad       	ldd	r18, Z+56	; 0x38
 eda:	31 ad       	ldd	r19, Z+57	; 0x39
 edc:	82 ad       	ldd	r24, Z+58	; 0x3a
 ede:	93 ad       	ldd	r25, Z+59	; 0x3b
 ee0:	28 17       	cp	r18, r24
 ee2:	39 07       	cpc	r19, r25
 ee4:	60 f0       	brcs	.+24     	; 0xefe <CellStringProcess+0x242>
 ee6:	80 ad       	ldd	r24, Z+56	; 0x38
 ee8:	91 ad       	ldd	r25, Z+57	; 0x39
 eea:	22 ad       	ldd	r18, Z+58	; 0x3a
 eec:	33 ad       	ldd	r19, Z+59	; 0x3b
 eee:	82 1b       	sub	r24, r18
 ef0:	93 0b       	sbc	r25, r19
 ef2:	80 34       	cpi	r24, 0x40	; 64
 ef4:	91 05       	cpc	r25, r1
 ef6:	18 f0       	brcs	.+6      	; 0xefe <CellStringProcess+0x242>
 ef8:	81 e0       	ldi	r24, 0x01	; 1
 efa:	80 93 12 05 	sts	0x0512, r24	; 0x800512 <sg_bCellBalanceReady>
 efe:	33 20       	and	r3, r3
 f00:	c9 f0       	breq	.+50     	; 0xf34 <CellStringProcess+0x278>
 f02:	23 2d       	mov	r18, r3
 f04:	30 e0       	ldi	r19, 0x00	; 0
 f06:	40 e0       	ldi	r20, 0x00	; 0
 f08:	50 e0       	ldi	r21, 0x00	; 0
 f0a:	c5 01       	movw	r24, r10
 f0c:	b4 01       	movw	r22, r8
 f0e:	0e 94 83 25 	call	0x4b06	; 0x4b06 <__divmodsi4>
 f12:	62 e4       	ldi	r22, 0x42	; 66
 f14:	71 e0       	ldi	r23, 0x01	; 1
 f16:	c9 01       	movw	r24, r18
 f18:	0e 94 e0 20 	call	0x41c0	; 0x41c0 <CellDataConvertTemperature>
 f1c:	6e e3       	ldi	r22, 0x3E	; 62
 f1e:	71 e0       	ldi	r23, 0x01	; 1
 f20:	8b 81       	ldd	r24, Y+3	; 0x03
 f22:	9c 81       	ldd	r25, Y+4	; 0x04
 f24:	0e 94 e0 20 	call	0x41c0	; 0x41c0 <CellDataConvertTemperature>
 f28:	60 e4       	ldi	r22, 0x40	; 64
 f2a:	71 e0       	ldi	r23, 0x01	; 1
 f2c:	8d 81       	ldd	r24, Y+5	; 0x05
 f2e:	9e 81       	ldd	r25, Y+6	; 0x06
 f30:	0e 94 e0 20 	call	0x41c0	; 0x41c0 <CellDataConvertTemperature>
 f34:	ec e0       	ldi	r30, 0x0C	; 12
 f36:	f1 e0       	ldi	r31, 0x01	; 1
 f38:	85 a5       	ldd	r24, Z+45	; 0x2d
 f3a:	87 a7       	std	Z+47, r24	; 0x2f
 f3c:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <sg_sFrame+0x59>
 f40:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <sg_sFrame+0x5a>
 f44:	89 2b       	or	r24, r25
 f46:	69 f1       	breq	.+90     	; 0xfa2 <CellStringProcess+0x2e6>
 f48:	27 e6       	ldi	r18, 0x67	; 103
 f4a:	31 e0       	ldi	r19, 0x01	; 1
 f4c:	f9 01       	movw	r30, r18
 f4e:	80 81       	ld	r24, Z
 f50:	91 81       	ldd	r25, Z+1	; 0x01
 f52:	01 96       	adiw	r24, 0x01	; 1
 f54:	e5 e6       	ldi	r30, 0x65	; 101
 f56:	f1 e0       	ldi	r31, 0x01	; 1
 f58:	60 81       	ld	r22, Z
 f5a:	71 81       	ldd	r23, Z+1	; 0x01
 f5c:	0e 94 45 26 	call	0x4c8a	; 0x4c8a <__udivmodhi4>
 f60:	d9 01       	movw	r26, r18
 f62:	11 96       	adiw	r26, 0x01	; 1
 f64:	9c 93       	st	X, r25
 f66:	8e 93       	st	-X, r24
 f68:	20 91 69 01 	lds	r18, 0x0169	; 0x800169 <sg_sFrame+0x5d>
 f6c:	30 91 6a 01 	lds	r19, 0x016A	; 0x80016a <sg_sFrame+0x5e>
 f70:	80 81       	ld	r24, Z
 f72:	91 81       	ldd	r25, Z+1	; 0x01
 f74:	28 17       	cp	r18, r24
 f76:	39 07       	cpc	r19, r25
 f78:	38 f4       	brcc	.+14     	; 0xf88 <CellStringProcess+0x2cc>
 f7a:	e9 e6       	ldi	r30, 0x69	; 105
 f7c:	f1 e0       	ldi	r31, 0x01	; 1
 f7e:	80 81       	ld	r24, Z
 f80:	91 81       	ldd	r25, Z+1	; 0x01
 f82:	01 96       	adiw	r24, 0x01	; 1
 f84:	91 83       	std	Z+1, r25	; 0x01
 f86:	80 83       	st	Z, r24
 f88:	e1 e6       	ldi	r30, 0x61	; 97
 f8a:	f1 e0       	ldi	r31, 0x01	; 1
 f8c:	80 81       	ld	r24, Z
 f8e:	91 81       	ldd	r25, Z+1	; 0x01
 f90:	a2 81       	ldd	r26, Z+2	; 0x02
 f92:	b3 81       	ldd	r27, Z+3	; 0x03
 f94:	01 96       	adiw	r24, 0x01	; 1
 f96:	a1 1d       	adc	r26, r1
 f98:	b1 1d       	adc	r27, r1
 f9a:	80 83       	st	Z, r24
 f9c:	91 83       	std	Z+1, r25	; 0x01
 f9e:	a2 83       	std	Z+2, r26	; 0x02
 fa0:	b3 83       	std	Z+3, r27	; 0x03
 fa2:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <sg_bSDCardReady>
 fa6:	88 23       	and	r24, r24
 fa8:	51 f0       	breq	.+20     	; 0xfbe <CellStringProcess+0x302>
 faa:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
 fae:	88 23       	and	r24, r24
 fb0:	31 f0       	breq	.+12     	; 0xfbe <CellStringProcess+0x302>
 fb2:	8c e0       	ldi	r24, 0x0C	; 12
 fb4:	91 e0       	ldi	r25, 0x01	; 1
 fb6:	0e 94 ad 16 	call	0x2d5a	; 0x2d5a <STORE_WriteFrame>
 fba:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <sg_bSDCardReady>
 fbe:	26 96       	adiw	r28, 0x06	; 6
 fc0:	0f b6       	in	r0, 0x3f	; 63
 fc2:	f8 94       	cli
 fc4:	de bf       	out	0x3e, r29	; 62
 fc6:	0f be       	out	0x3f, r0	; 63
 fc8:	cd bf       	out	0x3d, r28	; 61
 fca:	df 91       	pop	r29
 fcc:	cf 91       	pop	r28
 fce:	1f 91       	pop	r17
 fd0:	0f 91       	pop	r16
 fd2:	ff 90       	pop	r15
 fd4:	ef 90       	pop	r14
 fd6:	df 90       	pop	r13
 fd8:	cf 90       	pop	r12
 fda:	bf 90       	pop	r11
 fdc:	af 90       	pop	r10
 fde:	9f 90       	pop	r9
 fe0:	8f 90       	pop	r8
 fe2:	7f 90       	pop	r7
 fe4:	6f 90       	pop	r6
 fe6:	5f 90       	pop	r5
 fe8:	4f 90       	pop	r4
 fea:	3f 90       	pop	r3
 fec:	08 95       	ret

Disassembly of section .text.Delay:

000045fc <Delay>:
    45fc:	ab 01       	movw	r20, r22
    45fe:	bc 01       	movw	r22, r24
    4600:	4f 5f       	subi	r20, 0xFF	; 255
    4602:	5f 4f       	sbci	r21, 0xFF	; 255
    4604:	6f 4f       	sbci	r22, 0xFF	; 255
    4606:	7f 4f       	sbci	r23, 0xFF	; 255
    4608:	76 95       	lsr	r23
    460a:	67 95       	ror	r22
    460c:	57 95       	ror	r21
    460e:	47 95       	ror	r20
    4610:	96 b5       	in	r25, 0x26	; 38
    4612:	17 c0       	rjmp	.+46     	; 0x4642 <Delay+0x46>
    4614:	86 b5       	in	r24, 0x26	; 38
    4616:	98 17       	cp	r25, r24
    4618:	e9 f3       	breq	.-6      	; 0x4614 <Delay+0x18>
    461a:	26 b5       	in	r18, 0x26	; 38
    461c:	82 2f       	mov	r24, r18
    461e:	89 1b       	sub	r24, r25
    4620:	90 e0       	ldi	r25, 0x00	; 0
    4622:	a0 e0       	ldi	r26, 0x00	; 0
    4624:	b0 e0       	ldi	r27, 0x00	; 0
    4626:	48 17       	cp	r20, r24
    4628:	59 07       	cpc	r21, r25
    462a:	6a 07       	cpc	r22, r26
    462c:	7b 07       	cpc	r23, r27
    462e:	28 f0       	brcs	.+10     	; 0x463a <Delay+0x3e>
    4630:	48 1b       	sub	r20, r24
    4632:	59 0b       	sbc	r21, r25
    4634:	6a 0b       	sbc	r22, r26
    4636:	7b 0b       	sbc	r23, r27
    4638:	03 c0       	rjmp	.+6      	; 0x4640 <Delay+0x44>
    463a:	40 e0       	ldi	r20, 0x00	; 0
    463c:	50 e0       	ldi	r21, 0x00	; 0
    463e:	ba 01       	movw	r22, r20
    4640:	92 2f       	mov	r25, r18
    4642:	41 15       	cp	r20, r1
    4644:	51 05       	cpc	r21, r1
    4646:	61 05       	cpc	r22, r1
    4648:	71 05       	cpc	r23, r1
    464a:	21 f7       	brne	.-56     	; 0x4614 <Delay+0x18>
    464c:	08 95       	ret

Disassembly of section .text.PlatformAssert:

00004b8c <PlatformAssert>:



void PlatformAssert( const char* peFilename, const int s32LineNumber )
{
	DebugOut("Assert %s: %d\n", peFilename, s32LineNumber);
    4b8c:	5f 93       	push	r21
    4b8e:	4f 93       	push	r20
    4b90:	8f 93       	push	r24
    4b92:	7f 93       	push	r23
    4b94:	6f 93       	push	r22
    4b96:	88 e3       	ldi	r24, 0x38	; 56
    4b98:	92 e0       	ldi	r25, 0x02	; 2
    4b9a:	a0 e0       	ldi	r26, 0x00	; 0
    4b9c:	af 93       	push	r26
    4b9e:	9f 93       	push	r25
    4ba0:	8f 93       	push	r24
    4ba2:	0e 94 f3 28 	call	0x51e6	; 0x51e6 <DebugOut>
	
//	while(1);
}
    4ba6:	8d b7       	in	r24, 0x3d	; 61
    4ba8:	9e b7       	in	r25, 0x3e	; 62
    4baa:	08 96       	adiw	r24, 0x08	; 8
    4bac:	0f b6       	in	r0, 0x3f	; 63
    4bae:	f8 94       	cli
    4bb0:	9e bf       	out	0x3e, r25	; 62
    4bb2:	0f be       	out	0x3f, r0	; 63
    4bb4:	8d bf       	out	0x3d, r24	; 61
    4bb6:	08 95       	ret

Disassembly of section .text.ModuleControllerStateHandle:

000019d6 <ModuleControllerStateHandle>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    19d6:	1f 93       	push	r17
    19d8:	cf 93       	push	r28
    19da:	df 93       	push	r29
    19dc:	d0 91 06 01 	lds	r29, 0x0106	; 0x800106 <sg_eModuleControllerStateTarget>
    19e0:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <sg_eModuleControllerStateMax>
    19e4:	8d 17       	cp	r24, r29
    19e6:	30 f0       	brcs	.+12     	; 0x19f4 <ModuleControllerStateHandle+0x1e>
    19e8:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    19ec:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <sg_eModuleControllerStateMax>
    19f0:	89 17       	cp	r24, r25
    19f2:	10 f4       	brcc	.+4      	; 0x19f8 <ModuleControllerStateHandle+0x22>
    19f4:	d0 91 05 01 	lds	r29, 0x0105	; 0x800105 <sg_eModuleControllerStateMax>
    19f8:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    19fc:	d8 17       	cp	r29, r24
    19fe:	09 f4       	brne	.+2      	; 0x1a02 <ModuleControllerStateHandle+0x2c>
    1a00:	f5 c0       	rjmp	.+490    	; 0x1bec <ModuleControllerStateHandle+0x216>
    1a02:	d2 30       	cpi	r29, 0x02	; 2
    1a04:	09 f4       	brne	.+2      	; 0x1a08 <ModuleControllerStateHandle+0x32>
    1a06:	72 c0       	rjmp	.+228    	; 0x1aec <ModuleControllerStateHandle+0x116>
    1a08:	28 f4       	brcc	.+10     	; 0x1a14 <ModuleControllerStateHandle+0x3e>
    1a0a:	dd 23       	and	r29, r29
    1a0c:	89 f0       	breq	.+34     	; 0x1a30 <ModuleControllerStateHandle+0x5a>
    1a0e:	d1 30       	cpi	r29, 0x01	; 1
    1a10:	e1 f1       	breq	.+120    	; 0x1a8a <ModuleControllerStateHandle+0xb4>
    1a12:	e0 c0       	rjmp	.+448    	; 0x1bd4 <ModuleControllerStateHandle+0x1fe>
    1a14:	d3 30       	cpi	r29, 0x03	; 3
    1a16:	09 f4       	brne	.+2      	; 0x1a1a <ModuleControllerStateHandle+0x44>
    1a18:	a9 c0       	rjmp	.+338    	; 0x1b6c <ModuleControllerStateHandle+0x196>
    1a1a:	d5 30       	cpi	r29, 0x05	; 5
    1a1c:	09 f0       	breq	.+2      	; 0x1a20 <ModuleControllerStateHandle+0x4a>
    1a1e:	da c0       	rjmp	.+436    	; 0x1bd4 <ModuleControllerStateHandle+0x1fe>
    1a20:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <sg_eModuleControllerStateCurrent>
    1a24:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <sg_eModuleControllerStateTarget>
    1a28:	d0 91 07 01 	lds	r29, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    1a2c:	0e 94 0f 29 	call	0x521e	; 0x521e <ADCSetPowerOn>
    1a30:	88 b1       	in	r24, 0x08	; 8
    1a32:	8f 7e       	andi	r24, 0xEF	; 239
    1a34:	88 b9       	out	0x08, r24	; 8
    1a36:	68 e8       	ldi	r22, 0x88	; 136
    1a38:	73 e1       	ldi	r23, 0x13	; 19
    1a3a:	80 e0       	ldi	r24, 0x00	; 0
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	0e 94 fe 22 	call	0x45fc	; 0x45fc <Delay>
    1a42:	8e b1       	in	r24, 0x0e	; 14
    1a44:	8d 7f       	andi	r24, 0xFD	; 253
    1a46:	8e b9       	out	0x0e, r24	; 14
    1a48:	68 e8       	ldi	r22, 0x88	; 136
    1a4a:	73 e1       	ldi	r23, 0x13	; 19
    1a4c:	80 e0       	ldi	r24, 0x00	; 0
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	0e 94 fe 22 	call	0x45fc	; 0x45fc <Delay>
    1a54:	eb e6       	ldi	r30, 0x6B	; 107
    1a56:	f0 e0       	ldi	r31, 0x00	; 0
    1a58:	80 81       	ld	r24, Z
    1a5a:	8d 7f       	andi	r24, 0xFD	; 253
    1a5c:	80 83       	st	Z, r24
    1a5e:	e8 e6       	ldi	r30, 0x68	; 104
    1a60:	f0 e0       	ldi	r31, 0x00	; 0
    1a62:	80 81       	ld	r24, Z
    1a64:	8d 7f       	andi	r24, 0xFD	; 253
    1a66:	80 83       	st	Z, r24
    1a68:	81 e0       	ldi	r24, 0x01	; 1
    1a6a:	80 93 12 05 	sts	0x0512, r24	; 0x800512 <sg_bCellBalanceReady>
    1a6e:	10 92 11 05 	sts	0x0511, r1	; 0x800511 <sg_bCellBalancedOnce>
    1a72:	10 92 10 05 	sts	0x0510, r1	; 0x800510 <sg_bStopDischarge>
    1a76:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <sg_bSDCardReady>
    1a7a:	88 23       	and	r24, r24
    1a7c:	09 f4       	brne	.+2      	; 0x1a80 <ModuleControllerStateHandle+0xaa>
    1a7e:	b2 c0       	rjmp	.+356    	; 0x1be4 <ModuleControllerStateHandle+0x20e>
    1a80:	0e 94 fd 21 	call	0x43fa	; 0x43fa <STORE_EndSession>
    1a84:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <sg_bSDCardReady>
    1a88:	ad c0       	rjmp	.+346    	; 0x1be4 <ModuleControllerStateHandle+0x20e>
    1a8a:	88 b1       	in	r24, 0x08	; 8
    1a8c:	8f 7e       	andi	r24, 0xEF	; 239
    1a8e:	88 b9       	out	0x08, r24	; 8
    1a90:	68 e8       	ldi	r22, 0x88	; 136
    1a92:	73 e1       	ldi	r23, 0x13	; 19
    1a94:	80 e0       	ldi	r24, 0x00	; 0
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	0e 94 fe 22 	call	0x45fc	; 0x45fc <Delay>
    1a9c:	eb e6       	ldi	r30, 0x6B	; 107
    1a9e:	f0 e0       	ldi	r31, 0x00	; 0
    1aa0:	80 81       	ld	r24, Z
    1aa2:	8d 7f       	andi	r24, 0xFD	; 253
    1aa4:	80 83       	st	Z, r24
    1aa6:	e8 e6       	ldi	r30, 0x68	; 104
    1aa8:	f0 e0       	ldi	r31, 0x00	; 0
    1aaa:	80 81       	ld	r24, Z
    1aac:	8d 7f       	andi	r24, 0xFD	; 253
    1aae:	80 83       	st	Z, r24
    1ab0:	80 91 19 05 	lds	r24, 0x0519	; 0x800519 <sg_bModuleRegistered>
    1ab4:	88 23       	and	r24, r24
    1ab6:	19 f0       	breq	.+6      	; 0x1abe <ModuleControllerStateHandle+0xe8>
    1ab8:	8e b1       	in	r24, 0x0e	; 14
    1aba:	82 60       	ori	r24, 0x02	; 2
    1abc:	8e b9       	out	0x0e, r24	; 14
    1abe:	68 e8       	ldi	r22, 0x88	; 136
    1ac0:	73 e1       	ldi	r23, 0x13	; 19
    1ac2:	80 e0       	ldi	r24, 0x00	; 0
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	0e 94 fe 22 	call	0x45fc	; 0x45fc <Delay>
    1aca:	81 e0       	ldi	r24, 0x01	; 1
    1acc:	80 93 12 05 	sts	0x0512, r24	; 0x800512 <sg_bCellBalanceReady>
    1ad0:	10 92 11 05 	sts	0x0511, r1	; 0x800511 <sg_bCellBalancedOnce>
    1ad4:	10 92 10 05 	sts	0x0510, r1	; 0x800510 <sg_bStopDischarge>
    1ad8:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <sg_bSDCardReady>
    1adc:	88 23       	and	r24, r24
    1ade:	09 f4       	brne	.+2      	; 0x1ae2 <ModuleControllerStateHandle+0x10c>
    1ae0:	81 c0       	rjmp	.+258    	; 0x1be4 <ModuleControllerStateHandle+0x20e>
    1ae2:	0e 94 d4 22 	call	0x45a8	; 0x45a8 <STORE_StartNewSession>
    1ae6:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <sg_bSDCardReady>
    1aea:	7c c0       	rjmp	.+248    	; 0x1be4 <ModuleControllerStateHandle+0x20e>
    1aec:	61 99       	sbic	0x0c, 1	; 12
    1aee:	0d c0       	rjmp	.+26     	; 0x1b0a <ModuleControllerStateHandle+0x134>
    1af0:	80 91 19 05 	lds	r24, 0x0519	; 0x800519 <sg_bModuleRegistered>
    1af4:	88 23       	and	r24, r24
    1af6:	19 f0       	breq	.+6      	; 0x1afe <ModuleControllerStateHandle+0x128>
    1af8:	8e b1       	in	r24, 0x0e	; 14
    1afa:	82 60       	ori	r24, 0x02	; 2
    1afc:	8e b9       	out	0x0e, r24	; 14
    1afe:	68 e8       	ldi	r22, 0x88	; 136
    1b00:	73 e1       	ldi	r23, 0x13	; 19
    1b02:	80 e0       	ldi	r24, 0x00	; 0
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	0e 94 fe 22 	call	0x45fc	; 0x45fc <Delay>
    1b0a:	cb e0       	ldi	r28, 0x0B	; 11
    1b0c:	2a c0       	rjmp	.+84     	; 0x1b62 <ModuleControllerStateHandle+0x18c>
    1b0e:	80 91 19 05 	lds	r24, 0x0519	; 0x800519 <sg_bModuleRegistered>
    1b12:	88 23       	and	r24, r24
    1b14:	49 f0       	breq	.+18     	; 0x1b28 <ModuleControllerStateHandle+0x152>
    1b16:	88 b1       	in	r24, 0x08	; 8
    1b18:	80 61       	ori	r24, 0x10	; 16
    1b1a:	88 b9       	out	0x08, r24	; 8
    1b1c:	88 b1       	in	r24, 0x08	; 8
    1b1e:	8f 77       	andi	r24, 0x7F	; 127
    1b20:	88 b9       	out	0x08, r24	; 8
    1b22:	88 b1       	in	r24, 0x08	; 8
    1b24:	80 68       	ori	r24, 0x80	; 128
    1b26:	88 b9       	out	0x08, r24	; 8
    1b28:	68 ee       	ldi	r22, 0xE8	; 232
    1b2a:	73 e0       	ldi	r23, 0x03	; 3
    1b2c:	80 e0       	ldi	r24, 0x00	; 0
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	0e 94 fe 22 	call	0x45fc	; 0x45fc <Delay>
    1b34:	88 b1       	in	r24, 0x08	; 8
    1b36:	8f 7e       	andi	r24, 0xEF	; 239
    1b38:	88 b9       	out	0x08, r24	; 8
    1b3a:	68 e8       	ldi	r22, 0x88	; 136
    1b3c:	73 e1       	ldi	r23, 0x13	; 19
    1b3e:	80 e0       	ldi	r24, 0x00	; 0
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	0e 94 fe 22 	call	0x45fc	; 0x45fc <Delay>
    1b46:	60 e5       	ldi	r22, 0x50	; 80
    1b48:	73 ec       	ldi	r23, 0xC3	; 195
    1b4a:	80 e0       	ldi	r24, 0x00	; 0
    1b4c:	90 e0       	ldi	r25, 0x00	; 0
    1b4e:	0e 94 fe 22 	call	0x45fc	; 0x45fc <Delay>
    1b52:	80 91 0f 05 	lds	r24, 0x050F	; 0x80050f <sg_bOvercurrentSignal>
    1b56:	88 23       	and	r24, r24
    1b58:	19 f0       	breq	.+6      	; 0x1b60 <ModuleControllerStateHandle+0x18a>
    1b5a:	10 92 0f 05 	sts	0x050F, r1	; 0x80050f <sg_bOvercurrentSignal>
    1b5e:	01 c0       	rjmp	.+2      	; 0x1b62 <ModuleControllerStateHandle+0x18c>
    1b60:	c1 2f       	mov	r28, r17
    1b62:	1f ef       	ldi	r17, 0xFF	; 255
    1b64:	1c 0f       	add	r17, r28
    1b66:	c1 11       	cpse	r28, r1
    1b68:	d2 cf       	rjmp	.-92     	; 0x1b0e <ModuleControllerStateHandle+0x138>
    1b6a:	3c c0       	rjmp	.+120    	; 0x1be4 <ModuleControllerStateHandle+0x20e>
    1b6c:	61 99       	sbic	0x0c, 1	; 12
    1b6e:	0d c0       	rjmp	.+26     	; 0x1b8a <ModuleControllerStateHandle+0x1b4>
    1b70:	80 91 19 05 	lds	r24, 0x0519	; 0x800519 <sg_bModuleRegistered>
    1b74:	88 23       	and	r24, r24
    1b76:	19 f0       	breq	.+6      	; 0x1b7e <ModuleControllerStateHandle+0x1a8>
    1b78:	8e b1       	in	r24, 0x0e	; 14
    1b7a:	82 60       	ori	r24, 0x02	; 2
    1b7c:	8e b9       	out	0x0e, r24	; 14
    1b7e:	68 e8       	ldi	r22, 0x88	; 136
    1b80:	73 e1       	ldi	r23, 0x13	; 19
    1b82:	80 e0       	ldi	r24, 0x00	; 0
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	0e 94 fe 22 	call	0x45fc	; 0x45fc <Delay>
    1b8a:	80 91 19 05 	lds	r24, 0x0519	; 0x800519 <sg_bModuleRegistered>
    1b8e:	88 23       	and	r24, r24
    1b90:	49 f0       	breq	.+18     	; 0x1ba4 <ModuleControllerStateHandle+0x1ce>
    1b92:	88 b1       	in	r24, 0x08	; 8
    1b94:	80 61       	ori	r24, 0x10	; 16
    1b96:	88 b9       	out	0x08, r24	; 8
    1b98:	88 b1       	in	r24, 0x08	; 8
    1b9a:	8f 77       	andi	r24, 0x7F	; 127
    1b9c:	88 b9       	out	0x08, r24	; 8
    1b9e:	88 b1       	in	r24, 0x08	; 8
    1ba0:	80 68       	ori	r24, 0x80	; 128
    1ba2:	88 b9       	out	0x08, r24	; 8
    1ba4:	68 e8       	ldi	r22, 0x88	; 136
    1ba6:	73 e1       	ldi	r23, 0x13	; 19
    1ba8:	80 e0       	ldi	r24, 0x00	; 0
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	0e 94 fe 22 	call	0x45fc	; 0x45fc <Delay>
    1bb0:	10 92 12 05 	sts	0x0512, r1	; 0x800512 <sg_bCellBalanceReady>
    1bb4:	10 92 11 05 	sts	0x0511, r1	; 0x800511 <sg_bCellBalancedOnce>
    1bb8:	81 e0       	ldi	r24, 0x01	; 1
    1bba:	80 93 10 05 	sts	0x0510, r24	; 0x800510 <sg_bStopDischarge>
    1bbe:	eb e6       	ldi	r30, 0x6B	; 107
    1bc0:	f0 e0       	ldi	r31, 0x00	; 0
    1bc2:	80 81       	ld	r24, Z
    1bc4:	82 60       	ori	r24, 0x02	; 2
    1bc6:	80 83       	st	Z, r24
    1bc8:	e8 e6       	ldi	r30, 0x68	; 104
    1bca:	f0 e0       	ldi	r31, 0x00	; 0
    1bcc:	80 81       	ld	r24, Z
    1bce:	82 60       	ori	r24, 0x02	; 2
    1bd0:	80 83       	st	Z, r24
    1bd2:	08 c0       	rjmp	.+16     	; 0x1be4 <ModuleControllerStateHandle+0x20e>
    1bd4:	49 e1       	ldi	r20, 0x19	; 25
    1bd6:	54 e0       	ldi	r21, 0x04	; 4
    1bd8:	67 e4       	ldi	r22, 0x47	; 71
    1bda:	72 e0       	ldi	r23, 0x02	; 2
    1bdc:	80 e0       	ldi	r24, 0x00	; 0
    1bde:	0e 94 c6 25 	call	0x4b8c	; 0x4b8c <PlatformAssert>
    1be2:	d5 e0       	ldi	r29, 0x05	; 5
    1be4:	d0 93 07 01 	sts	0x0107, r29	; 0x800107 <sg_eModuleControllerStateCurrent>
    1be8:	0e 94 d3 28 	call	0x51a6	; 0x51a6 <SendModuleControllerStatus>
    1bec:	df 91       	pop	r29
    1bee:	cf 91       	pop	r28
    1bf0:	1f 91       	pop	r17
    1bf2:	08 95       	ret

Disassembly of section .text.PlatformGetRegistrationID:

0000525e <PlatformGetRegistrationID>:
}

uint8_t PlatformGetRegistrationID( void )
{
	return(sg_u8ModuleRegistrationID);
}
    525e:	80 91 1f 05 	lds	r24, 0x051F	; 0x80051f <sg_u8ModuleRegistrationID>
    5262:	08 95       	ret

Disassembly of section .text.SetSysclock:

0000522a <SetSysclock>:

void SetSysclock( void )
{
	// First set the prescaler enable
	CLKPR = (1 << CLKPCE);
    522a:	e1 e6       	ldi	r30, 0x61	; 97
    522c:	f0 e0       	ldi	r31, 0x00	; 0
    522e:	80 e8       	ldi	r24, 0x80	; 128
    5230:	80 83       	st	Z, r24
	
	// Now set the desired prescale value
	CLKPR = SYSCLOCK_PRESCALE;
    5232:	10 82       	st	Z, r1
    5234:	08 95       	ret

Disassembly of section .text.ModuleControllerGetUniqueID:

00003e12 <ModuleControllerGetUniqueID>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    3e12:	cf 92       	push	r12
    3e14:	df 92       	push	r13
    3e16:	ef 92       	push	r14
    3e18:	ff 92       	push	r15
    3e1a:	80 e0       	ldi	r24, 0x00	; 0
    3e1c:	90 e0       	ldi	r25, 0x00	; 0
    3e1e:	0e 94 a6 28 	call	0x514c	; 0x514c <EEPROMRead>
    3e22:	c8 2e       	mov	r12, r24
    3e24:	d1 2c       	mov	r13, r1
    3e26:	e1 2c       	mov	r14, r1
    3e28:	f1 2c       	mov	r15, r1
    3e2a:	81 e0       	ldi	r24, 0x01	; 1
    3e2c:	90 e0       	ldi	r25, 0x00	; 0
    3e2e:	0e 94 a6 28 	call	0x514c	; 0x514c <EEPROMRead>
    3e32:	90 e0       	ldi	r25, 0x00	; 0
    3e34:	a0 e0       	ldi	r26, 0x00	; 0
    3e36:	b0 e0       	ldi	r27, 0x00	; 0
    3e38:	ba 2f       	mov	r27, r26
    3e3a:	a9 2f       	mov	r26, r25
    3e3c:	98 2f       	mov	r25, r24
    3e3e:	88 27       	eor	r24, r24
    3e40:	c8 2a       	or	r12, r24
    3e42:	d9 2a       	or	r13, r25
    3e44:	ea 2a       	or	r14, r26
    3e46:	fb 2a       	or	r15, r27
    3e48:	82 e0       	ldi	r24, 0x02	; 2
    3e4a:	90 e0       	ldi	r25, 0x00	; 0
    3e4c:	0e 94 a6 28 	call	0x514c	; 0x514c <EEPROMRead>
    3e50:	90 e0       	ldi	r25, 0x00	; 0
    3e52:	a0 e0       	ldi	r26, 0x00	; 0
    3e54:	b0 e0       	ldi	r27, 0x00	; 0
    3e56:	dc 01       	movw	r26, r24
    3e58:	99 27       	eor	r25, r25
    3e5a:	88 27       	eor	r24, r24
    3e5c:	c8 2a       	or	r12, r24
    3e5e:	d9 2a       	or	r13, r25
    3e60:	ea 2a       	or	r14, r26
    3e62:	fb 2a       	or	r15, r27
    3e64:	83 e0       	ldi	r24, 0x03	; 3
    3e66:	90 e0       	ldi	r25, 0x00	; 0
    3e68:	0e 94 a6 28 	call	0x514c	; 0x514c <EEPROMRead>
    3e6c:	90 e0       	ldi	r25, 0x00	; 0
    3e6e:	a0 e0       	ldi	r26, 0x00	; 0
    3e70:	b0 e0       	ldi	r27, 0x00	; 0
    3e72:	b8 2f       	mov	r27, r24
    3e74:	aa 27       	eor	r26, r26
    3e76:	99 27       	eor	r25, r25
    3e78:	88 27       	eor	r24, r24
    3e7a:	bc 01       	movw	r22, r24
    3e7c:	cd 01       	movw	r24, r26
    3e7e:	6c 29       	or	r22, r12
    3e80:	7d 29       	or	r23, r13
    3e82:	8e 29       	or	r24, r14
    3e84:	9f 29       	or	r25, r15
    3e86:	ff 90       	pop	r15
    3e88:	ef 90       	pop	r14
    3e8a:	df 90       	pop	r13
    3e8c:	cf 90       	pop	r12
    3e8e:	08 95       	ret

Disassembly of section .text.TimerInit:

0000464e <TimerInit>:
    464e:	14 bc       	out	0x24, r1	; 36
    4650:	92 e0       	ldi	r25, 0x02	; 2
    4652:	95 bd       	out	0x25, r25	; 37
    4654:	a4 e6       	ldi	r26, 0x64	; 100
    4656:	b0 e0       	ldi	r27, 0x00	; 0
    4658:	8c 91       	ld	r24, X
    465a:	87 7f       	andi	r24, 0xF7	; 247
    465c:	8c 93       	st	X, r24
    465e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f0080>
    4662:	84 e0       	ldi	r24, 0x04	; 4
    4664:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f0081>
    4668:	96 bb       	out	0x16, r25	; 22
    466a:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f0084>
    466e:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f0085>
    4672:	8b 5c       	subi	r24, 0xCB	; 203
    4674:	93 4f       	sbci	r25, 0xF3	; 243
    4676:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f0089>
    467a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f0088>
    467e:	ef e6       	ldi	r30, 0x6F	; 111
    4680:	f0 e0       	ldi	r31, 0x00	; 0
    4682:	80 81       	ld	r24, Z
    4684:	82 60       	ori	r24, 0x02	; 2
    4686:	80 83       	st	Z, r24
    4688:	8c 91       	ld	r24, X
    468a:	8f 7e       	andi	r24, 0xEF	; 239
    468c:	8c 93       	st	X, r24
    468e:	ae e6       	ldi	r26, 0x6E	; 110
    4690:	b0 e0       	ldi	r27, 0x00	; 0
    4692:	8c 91       	ld	r24, X
    4694:	8e 7f       	andi	r24, 0xFE	; 254
    4696:	8c 93       	st	X, r24
    4698:	80 81       	ld	r24, Z
    469a:	8e 7f       	andi	r24, 0xFE	; 254
    469c:	80 83       	st	Z, r24
    469e:	08 95       	ret

Disassembly of section .text.__vector_12:

000035c6 <__vector_12>:
    35c6:	78 94       	sei
    35c8:	1f 92       	push	r1
    35ca:	0f 92       	push	r0
    35cc:	0f b6       	in	r0, 0x3f	; 63
    35ce:	0f 92       	push	r0
    35d0:	11 24       	eor	r1, r1
    35d2:	8f 93       	push	r24
    35d4:	9f 93       	push	r25
    35d6:	ef 93       	push	r30
    35d8:	ff 93       	push	r31
    35da:	82 e0       	ldi	r24, 0x02	; 2
    35dc:	86 bb       	out	0x16, r24	; 22
    35de:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f0084>
    35e2:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f0085>
    35e6:	8b 5c       	subi	r24, 0xCB	; 203
    35e8:	93 4f       	sbci	r25, 0xF3	; 243
    35ea:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f0089>
    35ee:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f0088>
    35f2:	ef e6       	ldi	r30, 0x6F	; 111
    35f4:	f0 e0       	ldi	r31, 0x00	; 0
    35f6:	80 81       	ld	r24, Z
    35f8:	82 60       	ori	r24, 0x02	; 2
    35fa:	80 83       	st	Z, r24
    35fc:	81 e0       	ldi	r24, 0x01	; 1
    35fe:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <sg_bNewTick>
    3602:	80 91 7a 0b 	lds	r24, 0x0B7A	; 0x800b7a <sg_u8CellFrameTimer>
    3606:	8f 5f       	subi	r24, 0xFF	; 255
    3608:	80 93 7a 0b 	sts	0x0B7A, r24	; 0x800b7a <sg_u8CellFrameTimer>
    360c:	80 91 7a 0b 	lds	r24, 0x0B7A	; 0x800b7a <sg_u8CellFrameTimer>
    3610:	83 30       	cpi	r24, 0x03	; 3
    3612:	78 f0       	brcs	.+30     	; 0x3632 <__vector_12+0x6c>
    3614:	10 92 7a 0b 	sts	0x0B7A, r1	; 0x800b7a <sg_u8CellFrameTimer>
    3618:	81 e0       	ldi	r24, 0x01	; 1
    361a:	80 93 79 0b 	sts	0x0B79, r24	; 0x800b79 <sg_bFrameStart>
    361e:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <sg_eFrameStatus>
    3622:	81 30       	cpi	r24, 0x01	; 1
    3624:	19 f4       	brne	.+6      	; 0x362c <__vector_12+0x66>
    3626:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <sg_eFrameStatus>
    362a:	03 c0       	rjmp	.+6      	; 0x3632 <__vector_12+0x6c>
    362c:	81 e0       	ldi	r24, 0x01	; 1
    362e:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <sg_eFrameStatus>
    3632:	80 91 77 0b 	lds	r24, 0x0B77	; 0x800b77 <sg_u8TicksSinceLastPackControllerMessage>
    3636:	8f 3f       	cpi	r24, 0xFF	; 255
    3638:	29 f0       	breq	.+10     	; 0x3644 <__vector_12+0x7e>
    363a:	80 91 77 0b 	lds	r24, 0x0B77	; 0x800b77 <sg_u8TicksSinceLastPackControllerMessage>
    363e:	8f 5f       	subi	r24, 0xFF	; 255
    3640:	80 93 77 0b 	sts	0x0B77, r24	; 0x800b77 <sg_u8TicksSinceLastPackControllerMessage>
    3644:	80 91 77 0b 	lds	r24, 0x0B77	; 0x800b77 <sg_u8TicksSinceLastPackControllerMessage>
    3648:	8f 36       	cpi	r24, 0x6F	; 111
    364a:	40 f0       	brcs	.+16     	; 0x365c <__vector_12+0x96>
    364c:	80 91 77 0b 	lds	r24, 0x0B77	; 0x800b77 <sg_u8TicksSinceLastPackControllerMessage>
    3650:	8f 56       	subi	r24, 0x6F	; 111
    3652:	80 93 77 0b 	sts	0x0B77, r24	; 0x800b77 <sg_u8TicksSinceLastPackControllerMessage>
    3656:	81 e0       	ldi	r24, 0x01	; 1
    3658:	80 93 17 05 	sts	0x0517, r24	; 0x800517 <sg_bPackControllerTimeout>
    365c:	80 91 78 0b 	lds	r24, 0x0B78	; 0x800b78 <sg_u8CellStringPowerTimer>
    3660:	88 23       	and	r24, r24
    3662:	29 f0       	breq	.+10     	; 0x366e <__vector_12+0xa8>
    3664:	80 91 78 0b 	lds	r24, 0x0B78	; 0x800b78 <sg_u8CellStringPowerTimer>
    3668:	81 50       	subi	r24, 0x01	; 1
    366a:	80 93 78 0b 	sts	0x0B78, r24	; 0x800b78 <sg_u8CellStringPowerTimer>
    366e:	ff 91       	pop	r31
    3670:	ef 91       	pop	r30
    3672:	9f 91       	pop	r25
    3674:	8f 91       	pop	r24
    3676:	0f 90       	pop	r0
    3678:	0f be       	out	0x3f, r0	; 63
    367a:	0f 90       	pop	r0
    367c:	1f 90       	pop	r1
    367e:	18 95       	reti

Disassembly of section .text.WatchdogReset:

0000526c <WatchdogReset>:
		sg_u8CellStringPowerTimer--;
	}
}

void WatchdogReset( void )
{
    526c:	08 95       	ret

Disassembly of section .text.WatchdogOff:

0000506a <WatchdogOff>:
// }

// Assume interrupts are disabled
void WatchdogOff( void )  // turn it off even when WDT_ENABLE is not defined
{
	wdt_reset();
    506a:	a8 95       	wdr
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    506c:	0f b6       	in	r0, 0x3f	; 63
    506e:	f8 94       	cli
    5070:	a8 95       	wdr
    5072:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f0060>
    5076:	88 61       	ori	r24, 0x18	; 24
    5078:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f0060>
    507c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f0060>
    5080:	0f be       	out	0x3f, r0	; 63
    5082:	08 95       	ret

Disassembly of section .text.__vector_28:

000046a0 <__vector_28>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    46a0:	1f 92       	push	r1
    46a2:	0f 92       	push	r0
    46a4:	0f b6       	in	r0, 0x3f	; 63
    46a6:	0f 92       	push	r0
    46a8:	11 24       	eor	r1, r1
    46aa:	2f 93       	push	r18
    46ac:	3f 93       	push	r19
    46ae:	4f 93       	push	r20
    46b0:	5f 93       	push	r21
    46b2:	6f 93       	push	r22
    46b4:	7f 93       	push	r23
    46b6:	8f 93       	push	r24
    46b8:	9f 93       	push	r25
    46ba:	af 93       	push	r26
    46bc:	bf 93       	push	r27
    46be:	ef 93       	push	r30
    46c0:	ff 93       	push	r31
    46c2:	45 e2       	ldi	r20, 0x25	; 37
    46c4:	53 e0       	ldi	r21, 0x03	; 3
    46c6:	67 e4       	ldi	r22, 0x47	; 71
    46c8:	72 e0       	ldi	r23, 0x02	; 2
    46ca:	80 e0       	ldi	r24, 0x00	; 0
    46cc:	0e 94 c6 25 	call	0x4b8c	; 0x4b8c <PlatformAssert>
    46d0:	ff 91       	pop	r31
    46d2:	ef 91       	pop	r30
    46d4:	bf 91       	pop	r27
    46d6:	af 91       	pop	r26
    46d8:	9f 91       	pop	r25
    46da:	8f 91       	pop	r24
    46dc:	7f 91       	pop	r23
    46de:	6f 91       	pop	r22
    46e0:	5f 91       	pop	r21
    46e2:	4f 91       	pop	r20
    46e4:	3f 91       	pop	r19
    46e6:	2f 91       	pop	r18
    46e8:	0f 90       	pop	r0
    46ea:	0f be       	out	0x3f, r0	; 63
    46ec:	0f 90       	pop	r0
    46ee:	1f 90       	pop	r1
    46f0:	18 95       	reti

Disassembly of section .text.__vector_23:

00003ae8 <__vector_23>:
    3ae8:	78 94       	sei
    3aea:	1f 92       	push	r1
    3aec:	0f 92       	push	r0
    3aee:	0f b6       	in	r0, 0x3f	; 63
    3af0:	0f 92       	push	r0
    3af2:	11 24       	eor	r1, r1
    3af4:	2f 93       	push	r18
    3af6:	3f 93       	push	r19
    3af8:	4f 93       	push	r20
    3afa:	5f 93       	push	r21
    3afc:	6f 93       	push	r22
    3afe:	7f 93       	push	r23
    3b00:	8f 93       	push	r24
    3b02:	9f 93       	push	r25
    3b04:	af 93       	push	r26
    3b06:	bf 93       	push	r27
    3b08:	ef 93       	push	r30
    3b0a:	ff 93       	push	r31
    3b0c:	96 b1       	in	r25, 0x06	; 6
    3b0e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    3b12:	83 30       	cpi	r24, 0x03	; 3
    3b14:	21 f0       	breq	.+8      	; 0x3b1e <__vector_23+0x36>
    3b16:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    3b1a:	82 30       	cpi	r24, 0x02	; 2
    3b1c:	c9 f4       	brne	.+50     	; 0x3b50 <__vector_23+0x68>
    3b1e:	91 ff       	sbrs	r25, 1
    3b20:	17 c0       	rjmp	.+46     	; 0x3b50 <__vector_23+0x68>
    3b22:	88 b1       	in	r24, 0x08	; 8
    3b24:	8f 7e       	andi	r24, 0xEF	; 239
    3b26:	88 b9       	out	0x08, r24	; 8
    3b28:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    3b2c:	83 30       	cpi	r24, 0x03	; 3
    3b2e:	19 f4       	brne	.+6      	; 0x3b36 <__vector_23+0x4e>
    3b30:	81 e0       	ldi	r24, 0x01	; 1
    3b32:	0e 94 20 29 	call	0x5240	; 0x5240 <ModuleControllerStateSet>
    3b36:	eb e6       	ldi	r30, 0x6B	; 107
    3b38:	f0 e0       	ldi	r31, 0x00	; 0
    3b3a:	80 81       	ld	r24, Z
    3b3c:	8d 7f       	andi	r24, 0xFD	; 253
    3b3e:	80 83       	st	Z, r24
    3b40:	e8 e6       	ldi	r30, 0x68	; 104
    3b42:	f0 e0       	ldi	r31, 0x00	; 0
    3b44:	80 81       	ld	r24, Z
    3b46:	8d 7f       	andi	r24, 0xFD	; 253
    3b48:	80 83       	st	Z, r24
    3b4a:	81 e0       	ldi	r24, 0x01	; 1
    3b4c:	80 93 0f 05 	sts	0x050F, r24	; 0x80050f <sg_bOvercurrentSignal>
    3b50:	ff 91       	pop	r31
    3b52:	ef 91       	pop	r30
    3b54:	bf 91       	pop	r27
    3b56:	af 91       	pop	r26
    3b58:	9f 91       	pop	r25
    3b5a:	8f 91       	pop	r24
    3b5c:	7f 91       	pop	r23
    3b5e:	6f 91       	pop	r22
    3b60:	5f 91       	pop	r21
    3b62:	4f 91       	pop	r20
    3b64:	3f 91       	pop	r19
    3b66:	2f 91       	pop	r18
    3b68:	0f 90       	pop	r0
    3b6a:	0f be       	out	0x3f, r0	; 63
    3b6c:	0f 90       	pop	r0
    3b6e:	1f 90       	pop	r1
    3b70:	18 95       	reti

Disassembly of section .text.__vector_24:

000046f2 <__vector_24>:
    46f2:	78 94       	sei
    46f4:	1f 92       	push	r1
    46f6:	0f 92       	push	r0
    46f8:	0f b6       	in	r0, 0x3f	; 63
    46fa:	0f 92       	push	r0
    46fc:	11 24       	eor	r1, r1
    46fe:	2f 93       	push	r18
    4700:	3f 93       	push	r19
    4702:	4f 93       	push	r20
    4704:	5f 93       	push	r21
    4706:	6f 93       	push	r22
    4708:	7f 93       	push	r23
    470a:	8f 93       	push	r24
    470c:	9f 93       	push	r25
    470e:	af 93       	push	r26
    4710:	bf 93       	push	r27
    4712:	ef 93       	push	r30
    4714:	ff 93       	push	r31
    4716:	8b b1       	in	r24, 0x0b	; 11
    4718:	0e 94 42 28 	call	0x5084	; 0x5084 <Check5VLoss>
    471c:	ff 91       	pop	r31
    471e:	ef 91       	pop	r30
    4720:	bf 91       	pop	r27
    4722:	af 91       	pop	r26
    4724:	9f 91       	pop	r25
    4726:	8f 91       	pop	r24
    4728:	7f 91       	pop	r23
    472a:	6f 91       	pop	r22
    472c:	5f 91       	pop	r21
    472e:	4f 91       	pop	r20
    4730:	3f 91       	pop	r19
    4732:	2f 91       	pop	r18
    4734:	0f 90       	pop	r0
    4736:	0f be       	out	0x3f, r0	; 63
    4738:	0f 90       	pop	r0
    473a:	1f 90       	pop	r1
    473c:	18 95       	reti

Disassembly of section .text.vUARTRXStart:

000050e2 <vUARTRXStart>:
}

// Called at the start of cell string data via MC RX
void vUARTRXStart(void)
{
	sg_u8CellBufferRX = 0;
    50e2:	10 92 75 0b 	sts	0x0B75, r1	; 0x800b75 <sg_u8CellBufferRX>
	sg_u8CellIndex = 0;
    50e6:	10 92 76 0b 	sts	0x0B76, r1	; 0x800b76 <sg_u8CellIndex>
	sg_u16BytesReceived = 0;
    50ea:	10 92 5f 0b 	sts	0x0B5F, r1	; 0x800b5f <sg_u16BytesReceived+0x1>
    50ee:	10 92 5e 0b 	sts	0x0B5E, r1	; 0x800b5e <sg_u16BytesReceived>
	sg_u8CellReports = 0;
    50f2:	10 92 74 0b 	sts	0x0B74, r1	; 0x800b74 <sg_u8CellReports>
    50f6:	08 95       	ret

Disassembly of section .text.vUARTRXEnd:

00004f88 <vUARTRXEnd>:
	// disable the edge interrupt
//	VUART_RX_DISABLE();
	// disable bit timer interrupt, should already be off but just in case
//	TIMER_CHB_INT_DISABLE();
	// update bytes and cells received
	sg_sFrame.m.sg_u16BytesReceived = sg_u16BytesReceived;
    4f88:	80 91 5e 0b 	lds	r24, 0x0B5E	; 0x800b5e <sg_u16BytesReceived>
    4f8c:	90 91 5f 0b 	lds	r25, 0x0B5F	; 0x800b5f <sg_u16BytesReceived+0x1>
    4f90:	ec e0       	ldi	r30, 0x0C	; 12
    4f92:	f1 e0       	ldi	r31, 0x01	; 1
    4f94:	94 a7       	std	Z+44, r25	; 0x2c
    4f96:	83 a7       	std	Z+43, r24	; 0x2b
	sg_sFrame.m.sg_u8CellCPUCount = sg_u8CellReports;
    4f98:	80 91 74 0b 	lds	r24, 0x0B74	; 0x800b74 <sg_u8CellReports>
    4f9c:	85 a7       	std	Z+45, r24	; 0x2d
	sg_u16BytesReceived = 0;
    4f9e:	10 92 5f 0b 	sts	0x0B5F, r1	; 0x800b5f <sg_u16BytesReceived+0x1>
    4fa2:	10 92 5e 0b 	sts	0x0B5E, r1	; 0x800b5e <sg_u16BytesReceived>
	sg_u8CellReports = 0;
    4fa6:	10 92 74 0b 	sts	0x0B74, r1	; 0x800b74 <sg_u8CellReports>
    4faa:	08 95       	ret

Disassembly of section .text.vUARTRXData:

00003878 <vUARTRXData>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    3878:	e0 91 75 0b 	lds	r30, 0x0B75	; 0x800b75 <sg_u8CellBufferRX>
    387c:	21 e0       	ldi	r18, 0x01	; 1
    387e:	2e 0f       	add	r18, r30
    3880:	20 93 75 0b 	sts	0x0B75, r18	; 0x800b75 <sg_u8CellBufferRX>
    3884:	f0 e0       	ldi	r31, 0x00	; 0
    3886:	e8 5b       	subi	r30, 0xB8	; 184
    3888:	f4 4f       	sbci	r31, 0xF4	; 244
    388a:	80 83       	st	Z, r24
    388c:	80 91 5e 0b 	lds	r24, 0x0B5E	; 0x800b5e <sg_u16BytesReceived>
    3890:	90 91 5f 0b 	lds	r25, 0x0B5F	; 0x800b5f <sg_u16BytesReceived+0x1>
    3894:	01 96       	adiw	r24, 0x01	; 1
    3896:	90 93 5f 0b 	sts	0x0B5F, r25	; 0x800b5f <sg_u16BytesReceived+0x1>
    389a:	80 93 5e 0b 	sts	0x0B5E, r24	; 0x800b5e <sg_u16BytesReceived>
    389e:	24 30       	cpi	r18, 0x04	; 4
    38a0:	d0 f1       	brcs	.+116    	; 0x3916 <vUARTRXData+0x9e>
    38a2:	10 92 75 0b 	sts	0x0B75, r1	; 0x800b75 <sg_u8CellBufferRX>
    38a6:	80 91 76 0b 	lds	r24, 0x0B76	; 0x800b76 <sg_u8CellIndex>
    38aa:	8c 36       	cpi	r24, 0x6C	; 108
    38ac:	a0 f5       	brcc	.+104    	; 0x3916 <vUARTRXData+0x9e>
    38ae:	40 91 67 01 	lds	r20, 0x0167	; 0x800167 <sg_sFrame+0x5b>
    38b2:	50 91 68 01 	lds	r21, 0x0168	; 0x800168 <sg_sFrame+0x5c>
    38b6:	20 91 21 01 	lds	r18, 0x0121	; 0x800121 <sg_sFrame+0x15>
    38ba:	30 e0       	ldi	r19, 0x00	; 0
    38bc:	22 0f       	add	r18, r18
    38be:	33 1f       	adc	r19, r19
    38c0:	22 0f       	add	r18, r18
    38c2:	33 1f       	adc	r19, r19
    38c4:	42 9f       	mul	r20, r18
    38c6:	f0 01       	movw	r30, r0
    38c8:	43 9f       	mul	r20, r19
    38ca:	f0 0d       	add	r31, r0
    38cc:	52 9f       	mul	r21, r18
    38ce:	f0 0d       	add	r31, r0
    38d0:	11 24       	eor	r1, r1
    38d2:	e4 59       	subi	r30, 0x94	; 148
    38d4:	fe 4f       	sbci	r31, 0xFE	; 254
    38d6:	28 2f       	mov	r18, r24
    38d8:	30 e0       	ldi	r19, 0x00	; 0
    38da:	22 0f       	add	r18, r18
    38dc:	33 1f       	adc	r19, r19
    38de:	22 0f       	add	r18, r18
    38e0:	33 1f       	adc	r19, r19
    38e2:	e2 0f       	add	r30, r18
    38e4:	f3 1f       	adc	r31, r19
    38e6:	a8 e4       	ldi	r26, 0x48	; 72
    38e8:	bb e0       	ldi	r27, 0x0B	; 11
    38ea:	4d 91       	ld	r20, X+
    38ec:	5d 91       	ld	r21, X+
    38ee:	6d 91       	ld	r22, X+
    38f0:	7c 91       	ld	r23, X
    38f2:	13 97       	sbiw	r26, 0x03	; 3
    38f4:	40 83       	st	Z, r20
    38f6:	51 83       	std	Z+1, r21	; 0x01
    38f8:	62 83       	std	Z+2, r22	; 0x02
    38fa:	73 83       	std	Z+3, r23	; 0x03
    38fc:	1d 92       	st	X+, r1
    38fe:	1d 92       	st	X+, r1
    3900:	1d 92       	st	X+, r1
    3902:	1c 92       	st	X, r1
    3904:	13 97       	sbiw	r26, 0x03	; 3
    3906:	8f 5f       	subi	r24, 0xFF	; 255
    3908:	80 93 76 0b 	sts	0x0B76, r24	; 0x800b76 <sg_u8CellIndex>
    390c:	80 91 74 0b 	lds	r24, 0x0B74	; 0x800b74 <sg_u8CellReports>
    3910:	8f 5f       	subi	r24, 0xFF	; 255
    3912:	80 93 74 0b 	sts	0x0B74, r24	; 0x800b74 <sg_u8CellReports>
    3916:	08 95       	ret

Disassembly of section .text.PlatformGetSendData:

00004c62 <PlatformGetSendData>:
uint16_t PlatformGetSendData( bool bUpdateBalanceStatus )
{
	uint16_t u16SendValue = 0;
	
	
	if( sg_bStopDischarge )
    4c62:	90 91 10 05 	lds	r25, 0x0510	; 0x800510 <sg_bStopDischarge>
    4c66:	99 23       	and	r25, r25
    4c68:	51 f0       	breq	.+20     	; 0x4c7e <PlatformGetSendData+0x1c>
	{
		if (bUpdateBalanceStatus)	// don't update if ony an availability check
    4c6a:	88 23       	and	r24, r24
    4c6c:	59 f0       	breq	.+22     	; 0x4c84 <PlatformGetSendData+0x22>
		{
			sg_bStopDischarge = false;
    4c6e:	10 92 10 05 	sts	0x0510, r1	; 0x800510 <sg_bStopDischarge>
			sg_bCellBalancedOnce = true;
    4c72:	81 e0       	ldi	r24, 0x01	; 1
    4c74:	80 93 11 05 	sts	0x0511, r24	; 0x800511 <sg_bCellBalancedOnce>
		}
		u16SendValue = 0x3ff;
    4c78:	8f ef       	ldi	r24, 0xFF	; 255
    4c7a:	93 e0       	ldi	r25, 0x03	; 3
    4c7c:	08 95       	ret
			}
		}
		else
#endif
		{
			u16SendValue |= MSG_CELL_SEND_REPORT;
    4c7e:	80 e0       	ldi	r24, 0x00	; 0
    4c80:	90 e8       	ldi	r25, 0x80	; 128
    4c82:	08 95       	ret
		if (bUpdateBalanceStatus)	// don't update if ony an availability check
		{
			sg_bStopDischarge = false;
			sg_bCellBalancedOnce = true;
		}
		u16SendValue = 0x3ff;
    4c84:	8f ef       	ldi	r24, 0xFF	; 255
    4c86:	93 e0       	ldi	r25, 0x03	; 3
#endif
		}
	}
	
	return( u16SendValue );
}
    4c88:	08 95       	ret

Disassembly of section .text.ADCCallback:

00004bb8 <ADCCallback>:
// Called every time there's an ADC read since apparently ISR can't access global variables?  compiler fails
void ADCCallback(EADCType eType,
				 uint16_t u16Reading)
{
	// End of chain? Indicate it's time for an ADC update
	if ((EADCTYPE_COUNT-1) == eType)
    4bb8:	84 30       	cpi	r24, 0x04	; 4
    4bba:	19 f4       	brne	.+6      	; 0x4bc2 <ADCCallback+0xa>
	{
		sg_bADCUpdate = true;
    4bbc:	91 e0       	ldi	r25, 0x01	; 1
    4bbe:	90 93 0e 05 	sts	0x050E, r25	; 0x80050e <sg_bADCUpdate>
	}
	sg_sFrame.m.ADCReadings[eType].u16Reading = u16Reading;
    4bc2:	90 e0       	ldi	r25, 0x00	; 0
    4bc4:	9c 01       	movw	r18, r24
    4bc6:	22 0f       	add	r18, r18
    4bc8:	33 1f       	adc	r19, r19
    4bca:	82 0f       	add	r24, r18
    4bcc:	93 1f       	adc	r25, r19
    4bce:	84 5f       	subi	r24, 0xF4	; 244
    4bd0:	9e 4f       	sbci	r25, 0xFE	; 254
    4bd2:	fc 01       	movw	r30, r24
    4bd4:	e9 5b       	subi	r30, 0xB9	; 185
    4bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    4bd8:	71 83       	std	Z+1, r23	; 0x01
    4bda:	60 83       	st	Z, r22
	sg_sFrame.m.ADCReadings[eType].bValid = true;
    4bdc:	31 97       	sbiw	r30, 0x01	; 1
    4bde:	21 e0       	ldi	r18, 0x01	; 1
    4be0:	20 83       	st	Z, r18
    4be2:	08 95       	ret

Disassembly of section .text.FrameInit:

00002a36 <FrameInit>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    2a36:	cf 93       	push	r28
    2a38:	df 93       	push	r29
    2a3a:	81 11       	cpse	r24, r1
    2a3c:	0d c0       	rjmp	.+26     	; 0x2a58 <FrameInit+0x22>
    2a3e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <sg_sFrame>
    2a42:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <sg_sFrame+0x1>
    2a46:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <sg_sFrame+0x2>
    2a4a:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <sg_sFrame+0x3>
    2a4e:	8a 37       	cpi	r24, 0x7A	; 122
    2a50:	9a 4d       	sbci	r25, 0xDA	; 218
    2a52:	a7 47       	sbci	r26, 0x77	; 119
    2a54:	ba 4b       	sbci	r27, 0xBA	; 186
    2a56:	29 f1       	breq	.+74     	; 0x2aa2 <FrameInit+0x6c>
    2a58:	cc e0       	ldi	r28, 0x0C	; 12
    2a5a:	d1 e0       	ldi	r29, 0x01	; 1
    2a5c:	80 e0       	ldi	r24, 0x00	; 0
    2a5e:	94 e0       	ldi	r25, 0x04	; 4
    2a60:	fe 01       	movw	r30, r28
    2a62:	9c 01       	movw	r18, r24
    2a64:	11 92       	st	Z+, r1
    2a66:	21 50       	subi	r18, 0x01	; 1
    2a68:	30 40       	sbci	r19, 0x00	; 0
    2a6a:	e1 f7       	brne	.-8      	; 0x2a64 <FrameInit+0x2e>
    2a6c:	9d 83       	std	Y+5, r25	; 0x05
    2a6e:	8c 83       	std	Y+4, r24	; 0x04
    2a70:	8a e7       	ldi	r24, 0x7A	; 122
    2a72:	9a ed       	ldi	r25, 0xDA	; 218
    2a74:	a7 e7       	ldi	r26, 0x77	; 119
    2a76:	ba eb       	ldi	r27, 0xBA	; 186
    2a78:	88 83       	st	Y, r24
    2a7a:	99 83       	std	Y+1, r25	; 0x01
    2a7c:	aa 83       	std	Y+2, r26	; 0x02
    2a7e:	bb 83       	std	Y+3, r27	; 0x03
    2a80:	0e 94 09 1f 	call	0x3e12	; 0x3e12 <ModuleControllerGetUniqueID>
    2a84:	6e 87       	std	Y+14, r22	; 0x0e
    2a86:	7f 87       	std	Y+15, r23	; 0x0f
    2a88:	88 8b       	std	Y+16, r24	; 0x10
    2a8a:	99 8b       	std	Y+17, r25	; 0x11
    2a8c:	8f ef       	ldi	r24, 0xFF	; 255
    2a8e:	8a a7       	std	Y+42, r24	; 0x2a
    2a90:	8b 8b       	std	Y+19, r24	; 0x13
    2a92:	1c 8a       	std	Y+20, r1	; 0x14
    2a94:	84 e0       	ldi	r24, 0x04	; 4
    2a96:	90 e0       	ldi	r25, 0x00	; 0
    2a98:	0e 94 a6 28 	call	0x514c	; 0x514c <EEPROMRead>
    2a9c:	0e 94 08 12 	call	0x2410	; 0x2410 <CellCountExpectedSet>
    2aa0:	55 c0       	rjmp	.+170    	; 0x2b4c <FrameInit+0x116>
    2aa2:	20 91 67 01 	lds	r18, 0x0167	; 0x800167 <sg_sFrame+0x5b>
    2aa6:	30 91 68 01 	lds	r19, 0x0168	; 0x800168 <sg_sFrame+0x5c>
    2aaa:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <sg_sFrame+0x15>
    2aae:	90 e0       	ldi	r25, 0x00	; 0
    2ab0:	88 0f       	add	r24, r24
    2ab2:	99 1f       	adc	r25, r25
    2ab4:	88 0f       	add	r24, r24
    2ab6:	99 1f       	adc	r25, r25
    2ab8:	28 9f       	mul	r18, r24
    2aba:	a0 01       	movw	r20, r0
    2abc:	29 9f       	mul	r18, r25
    2abe:	50 0d       	add	r21, r0
    2ac0:	38 9f       	mul	r19, r24
    2ac2:	50 0d       	add	r21, r0
    2ac4:	11 24       	eor	r1, r1
    2ac6:	44 59       	subi	r20, 0x94	; 148
    2ac8:	5e 4f       	sbci	r21, 0xFE	; 254
    2aca:	80 e0       	ldi	r24, 0x00	; 0
    2acc:	11 c0       	rjmp	.+34     	; 0x2af0 <FrameInit+0xba>
    2ace:	e8 2f       	mov	r30, r24
    2ad0:	f0 e0       	ldi	r31, 0x00	; 0
    2ad2:	ee 0f       	add	r30, r30
    2ad4:	ff 1f       	adc	r31, r31
    2ad6:	ee 0f       	add	r30, r30
    2ad8:	ff 1f       	adc	r31, r31
    2ada:	e4 0f       	add	r30, r20
    2adc:	f5 1f       	adc	r31, r21
    2ade:	2f ef       	ldi	r18, 0xFF	; 255
    2ae0:	3f ef       	ldi	r19, 0xFF	; 255
    2ae2:	31 83       	std	Z+1, r19	; 0x01
    2ae4:	20 83       	st	Z, r18
    2ae6:	2f ef       	ldi	r18, 0xFF	; 255
    2ae8:	3f e7       	ldi	r19, 0x7F	; 127
    2aea:	33 83       	std	Z+3, r19	; 0x03
    2aec:	22 83       	std	Z+2, r18	; 0x02
    2aee:	8f 5f       	subi	r24, 0xFF	; 255
    2af0:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <sg_sFrame+0x15>
    2af4:	89 17       	cp	r24, r25
    2af6:	58 f3       	brcs	.-42     	; 0x2ace <FrameInit+0x98>
    2af8:	ec e0       	ldi	r30, 0x0C	; 12
    2afa:	f1 e0       	ldi	r31, 0x01	; 1
    2afc:	17 a2       	std	Z+39, r1	; 0x27
    2afe:	11 a6       	std	Z+41, r1	; 0x29
    2b00:	10 a6       	std	Z+40, r1	; 0x28
    2b02:	12 a6       	std	Z+42, r1	; 0x2a
    2b04:	15 a6       	std	Z+45, r1	; 0x2d
    2b06:	16 a6       	std	Z+46, r1	; 0x2e
    2b08:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <sg_sFrame+0x3e>
    2b0c:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <sg_sFrame+0x3f>
    2b10:	a0 91 4c 01 	lds	r26, 0x014C	; 0x80014c <sg_sFrame+0x40>
    2b14:	b0 91 4d 01 	lds	r27, 0x014D	; 0x80014d <sg_sFrame+0x41>
    2b18:	89 2b       	or	r24, r25
    2b1a:	8a 2b       	or	r24, r26
    2b1c:	8b 2b       	or	r24, r27
    2b1e:	b1 f4       	brne	.+44     	; 0x2b4c <FrameInit+0x116>
    2b20:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <sg_sFrame+0x3e>
    2b24:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <sg_sFrame+0x3f>
    2b28:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <sg_sFrame+0x40>
    2b2c:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <sg_sFrame+0x41>
    2b30:	11 ae       	std	Z+57, r1	; 0x39
    2b32:	10 ae       	std	Z+56, r1	; 0x38
    2b34:	13 ae       	std	Z+59, r1	; 0x3b
    2b36:	12 ae       	std	Z+58, r1	; 0x3a
    2b38:	15 ae       	std	Z+61, r1	; 0x3d
    2b3a:	14 ae       	std	Z+60, r1	; 0x3c
    2b3c:	8f e9       	ldi	r24, 0x9F	; 159
    2b3e:	95 e1       	ldi	r25, 0x15	; 21
    2b40:	93 ab       	std	Z+51, r25	; 0x33
    2b42:	82 ab       	std	Z+50, r24	; 0x32
    2b44:	95 ab       	std	Z+53, r25	; 0x35
    2b46:	84 ab       	std	Z+52, r24	; 0x34
    2b48:	97 ab       	std	Z+55, r25	; 0x37
    2b4a:	86 ab       	std	Z+54, r24	; 0x36
    2b4c:	8f ef       	ldi	r24, 0xFF	; 255
    2b4e:	80 93 7e 0b 	sts	0x0B7E, r24	; 0x800b7e <sg_u8CurrentBufferIndex>
    2b52:	df 91       	pop	r29
    2b54:	cf 91       	pop	r28
    2b56:	08 95       	ret

Disassembly of section .text.CellStringPowerStateMachine:

00003bfc <CellStringPowerStateMachine>:
    3bfc:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <sg_eStringPowerState>
    3c00:	82 30       	cpi	r24, 0x02	; 2
    3c02:	49 f1       	breq	.+82     	; 0x3c56 <CellStringPowerStateMachine+0x5a>
    3c04:	28 f4       	brcc	.+10     	; 0x3c10 <CellStringPowerStateMachine+0x14>
    3c06:	88 23       	and	r24, r24
    3c08:	41 f0       	breq	.+16     	; 0x3c1a <CellStringPowerStateMachine+0x1e>
    3c0a:	81 30       	cpi	r24, 0x01	; 1
    3c0c:	91 f0       	breq	.+36     	; 0x3c32 <CellStringPowerStateMachine+0x36>
    3c0e:	32 c0       	rjmp	.+100    	; 0x3c74 <CellStringPowerStateMachine+0x78>
    3c10:	83 30       	cpi	r24, 0x03	; 3
    3c12:	61 f1       	breq	.+88     	; 0x3c6c <CellStringPowerStateMachine+0x70>
    3c14:	84 30       	cpi	r24, 0x04	; 4
    3c16:	a9 f1       	breq	.+106    	; 0x3c82 <CellStringPowerStateMachine+0x86>
    3c18:	2d c0       	rjmp	.+90     	; 0x3c74 <CellStringPowerStateMachine+0x78>
    3c1a:	85 b1       	in	r24, 0x05	; 5
    3c1c:	8f 7e       	andi	r24, 0xEF	; 239
    3c1e:	85 b9       	out	0x05, r24	; 5
    3c20:	81 e0       	ldi	r24, 0x01	; 1
    3c22:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <sg_eStringPowerState>
    3c26:	80 e0       	ldi	r24, 0x00	; 0
    3c28:	0e 94 1b 15 	call	0x2a36	; 0x2a36 <FrameInit>
    3c2c:	0e 94 d3 28 	call	0x51a6	; 0x51a6 <SendModuleControllerStatus>
    3c30:	08 95       	ret
    3c32:	85 b1       	in	r24, 0x05	; 5
    3c34:	8f 7e       	andi	r24, 0xEF	; 239
    3c36:	85 b9       	out	0x05, r24	; 5
    3c38:	80 e0       	ldi	r24, 0x00	; 0
    3c3a:	0e 94 1b 15 	call	0x2a36	; 0x2a36 <FrameInit>
    3c3e:	82 e0       	ldi	r24, 0x02	; 2
    3c40:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <sg_eStringPowerState>
    3c44:	81 e0       	ldi	r24, 0x01	; 1
    3c46:	80 93 78 0b 	sts	0x0B78, r24	; 0x800b78 <sg_u8CellStringPowerTimer>
    3c4a:	ec e0       	ldi	r30, 0x0C	; 12
    3c4c:	f1 e0       	ldi	r31, 0x01	; 1
    3c4e:	8f ef       	ldi	r24, 0xFF	; 255
    3c50:	83 8b       	std	Z+19, r24	; 0x13
    3c52:	14 8a       	std	Z+20, r1	; 0x14
    3c54:	08 95       	ret
    3c56:	80 91 78 0b 	lds	r24, 0x0B78	; 0x800b78 <sg_u8CellStringPowerTimer>
    3c5a:	81 11       	cpse	r24, r1
    3c5c:	12 c0       	rjmp	.+36     	; 0x3c82 <CellStringPowerStateMachine+0x86>
    3c5e:	85 b1       	in	r24, 0x05	; 5
    3c60:	80 61       	ori	r24, 0x10	; 16
    3c62:	85 b9       	out	0x05, r24	; 5
    3c64:	83 e0       	ldi	r24, 0x03	; 3
    3c66:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <sg_eStringPowerState>
    3c6a:	08 95       	ret
    3c6c:	84 e0       	ldi	r24, 0x04	; 4
    3c6e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <sg_eStringPowerState>
    3c72:	08 95       	ret
    3c74:	4c e8       	ldi	r20, 0x8C	; 140
    3c76:	52 e0       	ldi	r21, 0x02	; 2
    3c78:	67 e4       	ldi	r22, 0x47	; 71
    3c7a:	72 e0       	ldi	r23, 0x02	; 2
    3c7c:	80 e0       	ldi	r24, 0x00	; 0
    3c7e:	0e 94 c6 25 	call	0x4b8c	; 0x4b8c <PlatformAssert>
    3c82:	08 95       	ret

Disassembly of section .text.main:

00000fee <main>:
     fee:	cf 93       	push	r28
     ff0:	df 93       	push	r29
     ff2:	cd b7       	in	r28, 0x3d	; 61
     ff4:	de b7       	in	r29, 0x3e	; 62
     ff6:	28 97       	sbiw	r28, 0x08	; 8
     ff8:	0f b6       	in	r0, 0x3f	; 63
     ffa:	f8 94       	cli
     ffc:	de bf       	out	0x3e, r29	; 62
     ffe:	0f be       	out	0x3f, r0	; 63
    1000:	cd bf       	out	0x3d, r28	; 61
    1002:	0e 94 35 28 	call	0x506a	; 0x506a <WatchdogOff>
    1006:	88 b1       	in	r24, 0x08	; 8
    1008:	8f 7e       	andi	r24, 0xEF	; 239
    100a:	88 b9       	out	0x08, r24	; 8
    100c:	87 b1       	in	r24, 0x07	; 7
    100e:	80 61       	ori	r24, 0x10	; 16
    1010:	87 b9       	out	0x07, r24	; 7
    1012:	87 b1       	in	r24, 0x07	; 7
    1014:	8d 7f       	andi	r24, 0xFD	; 253
    1016:	87 b9       	out	0x07, r24	; 7
    1018:	87 b1       	in	r24, 0x07	; 7
    101a:	80 68       	ori	r24, 0x80	; 128
    101c:	87 b9       	out	0x07, r24	; 7
    101e:	88 b1       	in	r24, 0x08	; 8
    1020:	8f 7e       	andi	r24, 0xEF	; 239
    1022:	88 b9       	out	0x08, r24	; 8
    1024:	8d b1       	in	r24, 0x0d	; 13
    1026:	82 60       	ori	r24, 0x02	; 2
    1028:	8d b9       	out	0x0d, r24	; 13
    102a:	8e b1       	in	r24, 0x0e	; 14
    102c:	8d 7f       	andi	r24, 0xFD	; 253
    102e:	8e b9       	out	0x0e, r24	; 14
    1030:	84 b1       	in	r24, 0x04	; 4
    1032:	80 61       	ori	r24, 0x10	; 16
    1034:	84 b9       	out	0x04, r24	; 4
    1036:	85 b1       	in	r24, 0x05	; 5
    1038:	8f 7e       	andi	r24, 0xEF	; 239
    103a:	85 b9       	out	0x05, r24	; 5
    103c:	84 b7       	in	r24, 0x34	; 52
    103e:	80 93 72 0b 	sts	0x0B72, r24	; 0x800b72 <sg_u8Reason>
    1042:	80 91 72 0b 	lds	r24, 0x0B72	; 0x800b72 <sg_u8Reason>
    1046:	83 ff       	sbrs	r24, 3
    1048:	0a c0       	rjmp	.+20     	; 0x105e <__DATA_REGION_LENGTH__+0x5e>
    104a:	80 91 20 05 	lds	r24, 0x0520	; 0x800520 <sg_eWDTCurrentStatus>
    104e:	ec e0       	ldi	r30, 0x0C	; 12
    1050:	f1 e0       	ldi	r31, 0x01	; 1
    1052:	82 89       	ldd	r24, Z+18	; 0x12
    1054:	8f 5f       	subi	r24, 0xFF	; 255
    1056:	82 8b       	std	Z+18, r24	; 0x12
    1058:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <ModuleControllerStateHandle>
    105c:	68 c0       	rjmp	.+208    	; 0x112e <__stack+0x2f>
    105e:	80 91 72 0b 	lds	r24, 0x0B72	; 0x800b72 <sg_u8Reason>
    1062:	80 91 72 0b 	lds	r24, 0x0B72	; 0x800b72 <sg_u8Reason>
    1066:	80 91 72 0b 	lds	r24, 0x0B72	; 0x800b72 <sg_u8Reason>
    106a:	f8 94       	cli
    106c:	0e 94 15 29 	call	0x522a	; 0x522a <SetSysclock>
    1070:	0e 94 27 23 	call	0x464e	; 0x464e <TimerInit>
    1074:	0e 94 9d 24 	call	0x493a	; 0x493a <vUARTInit>
    1078:	0e 94 4b 13 	call	0x2696	; 0x2696 <ADCInit>
    107c:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <STORE_Init>
    1080:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <sg_bSDCardReady>
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	0e 94 1b 15 	call	0x2a36	; 0x2a36 <FrameInit>
    108a:	8a b1       	in	r24, 0x0a	; 10
    108c:	8f 7b       	andi	r24, 0xBF	; 191
    108e:	8a b9       	out	0x0a, r24	; 10
    1090:	8b b1       	in	r24, 0x0b	; 11
    1092:	80 64       	ori	r24, 0x40	; 64
    1094:	8b b9       	out	0x0b, r24	; 11
    1096:	11 e0       	ldi	r17, 0x01	; 1
    1098:	1b bb       	out	0x1b, r17	; 27
    109a:	82 e0       	ldi	r24, 0x02	; 2
    109c:	8b bb       	out	0x1b, r24	; 27
    109e:	84 e0       	ldi	r24, 0x04	; 4
    10a0:	8b bb       	out	0x1b, r24	; 27
    10a2:	88 e0       	ldi	r24, 0x08	; 8
    10a4:	8b bb       	out	0x1b, r24	; 27
    10a6:	ec e6       	ldi	r30, 0x6C	; 108
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	80 81       	ld	r24, Z
    10ac:	80 64       	ori	r24, 0x40	; 64
    10ae:	80 83       	st	Z, r24
    10b0:	8b b3       	in	r24, 0x1b	; 27
    10b2:	84 60       	ori	r24, 0x04	; 4
    10b4:	8b bb       	out	0x1b, r24	; 27
    10b6:	83 e6       	ldi	r24, 0x63	; 99
    10b8:	99 e0       	ldi	r25, 0x09	; 9
    10ba:	0e 94 1b 29 	call	0x5236	; 0x5236 <CANSetRXCallback>
    10be:	0e 94 dc 1c 	call	0x39b8	; 0x39b8 <CANInit>
    10c2:	10 92 1f 05 	sts	0x051F, r1	; 0x80051f <sg_u8ModuleRegistrationID>
    10c6:	10 92 19 05 	sts	0x0519, r1	; 0x800519 <sg_bModuleRegistered>
    10ca:	10 92 7b 0b 	sts	0x0B7B, r1	; 0x800b7b <sg_bIgnoreStatusRequests>
    10ce:	80 e0       	ldi	r24, 0x00	; 0
    10d0:	0e 94 20 29 	call	0x5240	; 0x5240 <ModuleControllerStateSet>
    10d4:	10 93 1a 05 	sts	0x051A, r17	; 0x80051a <sg_bSendAnnouncement>
    10d8:	10 92 17 05 	sts	0x0517, r1	; 0x800517 <sg_bPackControllerTimeout>
    10dc:	10 92 16 05 	sts	0x0516, r1	; 0x800516 <sg_bSendModuleControllerStatus>
    10e0:	10 92 15 05 	sts	0x0515, r1	; 0x800515 <sg_bSendCellStatus>
    10e4:	10 92 14 05 	sts	0x0514, r1	; 0x800514 <sg_bSendHardwareDetail>
    10e8:	10 92 13 05 	sts	0x0513, r1	; 0x800513 <sg_bSendCellCommStatus>
    10ec:	10 92 12 05 	sts	0x0512, r1	; 0x800512 <sg_bCellBalanceReady>
    10f0:	10 92 11 05 	sts	0x0511, r1	; 0x800511 <sg_bCellBalancedOnce>
    10f4:	10 92 10 05 	sts	0x0510, r1	; 0x800510 <sg_bStopDischarge>
    10f8:	10 92 0f 05 	sts	0x050F, r1	; 0x80050f <sg_bOvercurrentSignal>
    10fc:	10 92 1c 05 	sts	0x051C, r1	; 0x80051c <sg_u8CellStatusTarget>
    1100:	10 92 1b 05 	sts	0x051B, r1	; 0x80051b <sg_u8CellStatus>
    1104:	10 92 1e 05 	sts	0x051E, r1	; 0x80051e <sg_u8SOC>
    1108:	10 92 1d 05 	sts	0x051D, r1	; 0x80051d <sg_u8SOH>
    110c:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <sg_u8SequentailCellCountMismatches>
    1110:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <RTCInit>
    1114:	85 e0       	ldi	r24, 0x05	; 5
    1116:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <sg_eModuleControllerStateCurrent>
    111a:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <sg_eModuleControllerStateTarget>
    111e:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <sg_eModuleControllerStateMax>
    1122:	10 92 19 05 	sts	0x0519, r1	; 0x800519 <sg_bModuleRegistered>
    1126:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <sg_eStringPowerState>
    112a:	10 93 0b 01 	sts	0x010B, r17	; 0x80010b <sg_eFrameStatus>
    112e:	78 94       	sei
    1130:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <sg_bNewTick>
    1134:	88 23       	and	r24, r24
    1136:	e1 f3       	breq	.-8      	; 0x1130 <__stack+0x31>
    1138:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <sg_bNewTick>
    113c:	0e 94 40 1b 	call	0x3680	; 0x3680 <CANCheckTxStatus>
    1140:	0e 94 83 14 	call	0x2906	; 0x2906 <CANCheckHealth>
    1144:	80 91 19 05 	lds	r24, 0x0519	; 0x800519 <sg_bModuleRegistered>
    1148:	81 11       	cpse	r24, r1
    114a:	22 c0       	rjmp	.+68     	; 0x1190 <__stack+0x91>
    114c:	80 91 7d 0b 	lds	r24, 0x0B7D	; 0x800b7d <sg_bAnnouncementPending>
    1150:	88 23       	and	r24, r24
    1152:	11 f1       	breq	.+68     	; 0x1198 <__stack+0x99>
    1154:	80 91 7c 0b 	lds	r24, 0x0B7C	; 0x800b7c <sg_u8AnnouncementDelayTicks>
    1158:	88 23       	and	r24, r24
    115a:	29 f0       	breq	.+10     	; 0x1166 <__stack+0x67>
    115c:	80 91 7c 0b 	lds	r24, 0x0B7C	; 0x800b7c <sg_u8AnnouncementDelayTicks>
    1160:	81 50       	subi	r24, 0x01	; 1
    1162:	80 93 7c 0b 	sts	0x0B7C, r24	; 0x800b7c <sg_u8AnnouncementDelayTicks>
    1166:	80 91 7c 0b 	lds	r24, 0x0B7C	; 0x800b7c <sg_u8AnnouncementDelayTicks>
    116a:	81 11       	cpse	r24, r1
    116c:	15 c0       	rjmp	.+42     	; 0x1198 <__stack+0x99>
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	80 93 1a 05 	sts	0x051A, r24	; 0x80051a <sg_bSendAnnouncement>
    1174:	10 92 7d 0b 	sts	0x0B7D, r1	; 0x800b7d <sg_bAnnouncementPending>
    1178:	83 e5       	ldi	r24, 0x53	; 83
    117a:	92 e0       	ldi	r25, 0x02	; 2
    117c:	a0 e0       	ldi	r26, 0x00	; 0
    117e:	af 93       	push	r26
    1180:	9f 93       	push	r25
    1182:	8f 93       	push	r24
    1184:	0e 94 f3 28 	call	0x51e6	; 0x51e6 <DebugOut>
    1188:	0f 90       	pop	r0
    118a:	0f 90       	pop	r0
    118c:	0f 90       	pop	r0
    118e:	04 c0       	rjmp	.+8      	; 0x1198 <__stack+0x99>
    1190:	ce 01       	movw	r24, r28
    1192:	01 96       	adiw	r24, 0x01	; 1
    1194:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <ControllerStatusMessagesSend>
    1198:	80 91 17 05 	lds	r24, 0x0517	; 0x800517 <sg_bPackControllerTimeout>
    119c:	88 23       	and	r24, r24
    119e:	81 f0       	breq	.+32     	; 0x11c0 <__stack+0xc1>
    11a0:	10 92 17 05 	sts	0x0517, r1	; 0x800517 <sg_bPackControllerTimeout>
    11a4:	10 92 1f 05 	sts	0x051F, r1	; 0x80051f <sg_u8ModuleRegistrationID>
    11a8:	10 92 19 05 	sts	0x0519, r1	; 0x800519 <sg_bModuleRegistered>
    11ac:	10 92 7b 0b 	sts	0x0B7B, r1	; 0x800b7b <sg_bIgnoreStatusRequests>
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	80 93 1a 05 	sts	0x051A, r24	; 0x80051a <sg_bSendAnnouncement>
    11b6:	0e 94 d3 28 	call	0x51a6	; 0x51a6 <SendModuleControllerStatus>
    11ba:	80 e0       	ldi	r24, 0x00	; 0
    11bc:	0e 94 20 29 	call	0x5240	; 0x5240 <ModuleControllerStateSet>
    11c0:	ef e6       	ldi	r30, 0x6F	; 111
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	90 81       	ld	r25, Z
    11c6:	80 81       	ld	r24, Z
    11c8:	8d 7f       	andi	r24, 0xFD	; 253
    11ca:	80 83       	st	Z, r24
    11cc:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <sg_eFrameStatus>
    11d0:	20 91 79 0b 	lds	r18, 0x0B79	; 0x800b79 <sg_bFrameStart>
    11d4:	90 83       	st	Z, r25
    11d6:	81 30       	cpi	r24, 0x01	; 1
    11d8:	09 f0       	breq	.+2      	; 0x11dc <__stack+0xdd>
    11da:	57 c0       	rjmp	.+174    	; 0x128a <__stack+0x18b>
    11dc:	22 23       	and	r18, r18
    11de:	09 f4       	brne	.+2      	; 0x11e2 <__stack+0xe3>
    11e0:	4b c0       	rjmp	.+150    	; 0x1278 <__stack+0x179>
    11e2:	10 92 79 0b 	sts	0x0B79, r1	; 0x800b79 <sg_bFrameStart>
    11e6:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <CellStringPowerStateMachine>
    11ea:	0e 94 c4 27 	call	0x4f88	; 0x4f88 <vUARTRXEnd>
    11ee:	ce 01       	movw	r24, r28
    11f0:	01 96       	adiw	r24, 0x01	; 1
    11f2:	0e 94 5e 06 	call	0xcbc	; 0xcbc <CellStringProcess>
    11f6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <sg_eStringPowerState>
    11fa:	84 30       	cpi	r24, 0x04	; 4
    11fc:	d9 f4       	brne	.+54     	; 0x1234 <__stack+0x135>
    11fe:	ec e0       	ldi	r30, 0x0C	; 12
    1200:	f1 e0       	ldi	r31, 0x01	; 1
    1202:	95 a5       	ldd	r25, Z+45	; 0x2d
    1204:	85 89       	ldd	r24, Z+21	; 0x15
    1206:	98 17       	cp	r25, r24
    1208:	99 f0       	breq	.+38     	; 0x1230 <__stack+0x131>
    120a:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <sg_sFrame+0x15>
    120e:	88 23       	and	r24, r24
    1210:	79 f0       	breq	.+30     	; 0x1230 <__stack+0x131>
    1212:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <sg_u8SequentailCellCountMismatches>
    1216:	8f 5f       	subi	r24, 0xFF	; 255
    1218:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <sg_u8SequentailCellCountMismatches>
    121c:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <sg_u8SequentailCellCountMismatches>
    1220:	85 30       	cpi	r24, 0x05	; 5
    1222:	40 f0       	brcs	.+16     	; 0x1234 <__stack+0x135>
    1224:	81 e0       	ldi	r24, 0x01	; 1
    1226:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <sg_eStringPowerState>
    122a:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <sg_u8SequentailCellCountMismatches>
    122e:	02 c0       	rjmp	.+4      	; 0x1234 <__stack+0x135>
    1230:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <sg_u8SequentailCellCountMismatches>
    1234:	80 91 1a 05 	lds	r24, 0x051A	; 0x80051a <sg_bSendAnnouncement>
    1238:	88 23       	and	r24, r24
    123a:	f1 f0       	breq	.+60     	; 0x1278 <__stack+0x179>
    123c:	86 e5       	ldi	r24, 0x56	; 86
    123e:	89 83       	std	Y+1, r24	; 0x01
    1240:	80 e2       	ldi	r24, 0x20	; 32
    1242:	8a 83       	std	Y+2, r24	; 0x02
    1244:	82 e0       	ldi	r24, 0x02	; 2
    1246:	8b 83       	std	Y+3, r24	; 0x03
    1248:	83 e0       	ldi	r24, 0x03	; 3
    124a:	8c 83       	std	Y+4, r24	; 0x04
    124c:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <sg_sFrame+0xe>
    1250:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <sg_sFrame+0xf>
    1254:	a0 91 1c 01 	lds	r26, 0x011C	; 0x80011c <sg_sFrame+0x10>
    1258:	b0 91 1d 01 	lds	r27, 0x011D	; 0x80011d <sg_sFrame+0x11>
    125c:	8d 83       	std	Y+5, r24	; 0x05
    125e:	9e 83       	std	Y+6, r25	; 0x06
    1260:	af 83       	std	Y+7, r26	; 0x07
    1262:	b8 87       	std	Y+8, r27	; 0x08
    1264:	48 e0       	ldi	r20, 0x08	; 8
    1266:	be 01       	movw	r22, r28
    1268:	6f 5f       	subi	r22, 0xFF	; 255
    126a:	7f 4f       	sbci	r23, 0xFF	; 255
    126c:	80 e0       	ldi	r24, 0x00	; 0
    126e:	0e 94 6c 25 	call	0x4ad8	; 0x4ad8 <CANSendMessage>
    1272:	81 11       	cpse	r24, r1
    1274:	10 92 1a 05 	sts	0x051A, r1	; 0x80051a <sg_bSendAnnouncement>
    1278:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <ModuleControllerStateHandle>
    127c:	80 91 0f 05 	lds	r24, 0x050F	; 0x80050f <sg_bOvercurrentSignal>
    1280:	88 23       	and	r24, r24
    1282:	b1 f0       	breq	.+44     	; 0x12b0 <__stack+0x1b1>
    1284:	10 92 0f 05 	sts	0x050F, r1	; 0x80050f <sg_bOvercurrentSignal>
    1288:	13 c0       	rjmp	.+38     	; 0x12b0 <__stack+0x1b1>
    128a:	22 23       	and	r18, r18
    128c:	89 f0       	breq	.+34     	; 0x12b0 <__stack+0x1b1>
    128e:	10 92 79 0b 	sts	0x0B79, r1	; 0x800b79 <sg_bFrameStart>
    1292:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <CellStringPowerStateMachine>
    1296:	80 e0       	ldi	r24, 0x00	; 0
    1298:	0e 94 1b 15 	call	0x2a36	; 0x2a36 <FrameInit>
    129c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <sg_eStringPowerState>
    12a0:	84 30       	cpi	r24, 0x04	; 4
    12a2:	31 f4       	brne	.+12     	; 0x12b0 <__stack+0x1b1>
    12a4:	0e 94 9c 28 	call	0x5138	; 0x5138 <vUARTInitReceive>
    12a8:	0e 94 25 29 	call	0x524a	; 0x524a <vUARTRXReset>
    12ac:	0e 94 54 22 	call	0x44a8	; 0x44a8 <vUARTStarttx>
    12b0:	80 91 0e 05 	lds	r24, 0x050E	; 0x80050e <sg_bADCUpdate>
    12b4:	88 23       	and	r24, r24
    12b6:	21 f0       	breq	.+8      	; 0x12c0 <__stack+0x1c1>
    12b8:	10 92 0e 05 	sts	0x050E, r1	; 0x80050e <sg_bADCUpdate>
    12bc:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <ModuleCurrentConvertReadings>
    12c0:	0e 94 08 26 	call	0x4c10	; 0x4c10 <ADCStartConversion>
    12c4:	35 cf       	rjmp	.-406    	; 0x1130 <__stack+0x31>

Disassembly of section .text.IsLeapYear:

000049a6 <IsLeapYear>:
	return( bResult );
}

// Returns true if u16Year is a leap year
static bool IsLeapYear(uint16_t u16Year)
{
    49a6:	9c 01       	movw	r18, r24
	bool bLeapYear = false;
	
	if ((u16Year % 400) == 0)
    49a8:	60 e9       	ldi	r22, 0x90	; 144
    49aa:	71 e0       	ldi	r23, 0x01	; 1
    49ac:	0e 94 45 26 	call	0x4c8a	; 0x4c8a <__udivmodhi4>
    49b0:	89 2b       	or	r24, r25
    49b2:	69 f0       	breq	.+26     	; 0x49ce <IsLeapYear+0x28>
	{
		bLeapYear = true;
	}
	else
	if ((u16Year % 100) == 0)
    49b4:	c9 01       	movw	r24, r18
    49b6:	64 e6       	ldi	r22, 0x64	; 100
    49b8:	70 e0       	ldi	r23, 0x00	; 0
    49ba:	0e 94 45 26 	call	0x4c8a	; 0x4c8a <__udivmodhi4>
    49be:	89 2b       	or	r24, r25
    49c0:	41 f0       	breq	.+16     	; 0x49d2 <IsLeapYear+0x2c>
	{
		// Not a leap year if divisible by 100 but not by 400
	}
	else
	if ((u16Year % 4) == 0)
    49c2:	23 70       	andi	r18, 0x03	; 3
    49c4:	33 27       	eor	r19, r19
    49c6:	23 2b       	or	r18, r19
    49c8:	31 f0       	breq	.+12     	; 0x49d6 <IsLeapYear+0x30>
}

// Returns true if u16Year is a leap year
static bool IsLeapYear(uint16_t u16Year)
{
	bool bLeapYear = false;
    49ca:	80 e0       	ldi	r24, 0x00	; 0
    49cc:	08 95       	ret
	
	if ((u16Year % 400) == 0)
	{
		bLeapYear = true;
    49ce:	81 e0       	ldi	r24, 0x01	; 1
    49d0:	08 95       	ret
}

// Returns true if u16Year is a leap year
static bool IsLeapYear(uint16_t u16Year)
{
	bool bLeapYear = false;
    49d2:	80 e0       	ldi	r24, 0x00	; 0
    49d4:	08 95       	ret
		// Not a leap year if divisible by 100 but not by 400
	}
	else
	if ((u16Year % 4) == 0)
	{
		bLeapYear = true;
    49d6:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return(bLeapYear);
}
    49d8:	08 95       	ret

Disassembly of section .text.RTCStartTransaction:

0000478a <RTCStartTransaction>:
}

static bool RTCStartTransaction( uint8_t u8Address, 
								 bool bRead, 
								 bool bAllowUnstick )
{
    478a:	ff 92       	push	r15
    478c:	0f 93       	push	r16
    478e:	1f 93       	push	r17
    4790:	cf 93       	push	r28
    4792:	df 93       	push	r29
    4794:	f8 2e       	mov	r15, r24
    4796:	06 2f       	mov	r16, r22
    4798:	14 2f       	mov	r17, r20
	bool bResult = false;
	uint8_t u8Tries = RTC_MAX_ADDRESS_TRIES;
    479a:	d3 e0       	ldi	r29, 0x03	; 3

static bool RTCStartTransaction( uint8_t u8Address, 
								 bool bRead, 
								 bool bAllowUnstick )
{
	bool bResult = false;
    479c:	c0 e0       	ldi	r28, 0x00	; 0
	uint8_t u8Tries = RTC_MAX_ADDRESS_TRIES;
	
	while( (false == bResult) && u8Tries )
    479e:	0c c0       	rjmp	.+24     	; 0x47b8 <RTCStartTransaction+0x2e>
	{
		u8Tries--;
    47a0:	d1 50       	subi	r29, 0x01	; 1
		
		bResult = I2CStartTransaction( u8Address, bRead );
    47a2:	60 2f       	mov	r22, r16
    47a4:	8f 2d       	mov	r24, r15
    47a6:	0e 94 1d 26 	call	0x4c3a	; 0x4c3a <I2CStartTransaction>
    47aa:	c8 2f       	mov	r28, r24
	
		if( false == bAllowUnstick )
    47ac:	11 23       	and	r17, r17
    47ae:	41 f0       	breq	.+16     	; 0x47c0 <RTCStartTransaction+0x36>
		{
			break;
		}
		
		// Unstick and retry on failure
		if( false == bResult )
    47b0:	81 11       	cpse	r24, r1
    47b2:	02 c0       	rjmp	.+4      	; 0x47b8 <RTCStartTransaction+0x2e>
		{
			I2CUnstick();
    47b4:	0e 94 28 24 	call	0x4850	; 0x4850 <I2CUnstick>
								 bool bAllowUnstick )
{
	bool bResult = false;
	uint8_t u8Tries = RTC_MAX_ADDRESS_TRIES;
	
	while( (false == bResult) && u8Tries )
    47b8:	c1 11       	cpse	r28, r1
    47ba:	02 c0       	rjmp	.+4      	; 0x47c0 <RTCStartTransaction+0x36>
    47bc:	d1 11       	cpse	r29, r1
    47be:	f0 cf       	rjmp	.-32     	; 0x47a0 <RTCStartTransaction+0x16>
			I2CUnstick();
		}
	}
	
	return( bResult );
}
    47c0:	8c 2f       	mov	r24, r28
    47c2:	df 91       	pop	r29
    47c4:	cf 91       	pop	r28
    47c6:	1f 91       	pop	r17
    47c8:	0f 91       	pop	r16
    47ca:	ff 90       	pop	r15
    47cc:	08 95       	ret

Disassembly of section .text.StructTMToHW:

00004554 <StructTMToHW>:
}

// Converts struct tm to SMCP7940NTime structure
static void StructTMToHW(struct tm *psTimeTM,
						 SMCP7940NTime *psTime)
{
    4554:	cf 93       	push	r28
    4556:	df 93       	push	r29
    4558:	dc 01       	movw	r26, r24
    455a:	fb 01       	movw	r30, r22
	memset((void *) psTime, 0, sizeof(*psTime));
    455c:	87 e0       	ldi	r24, 0x07	; 7
    455e:	eb 01       	movw	r28, r22
    4560:	19 92       	st	Y+, r1
    4562:	8a 95       	dec	r24
    4564:	e9 f7       	brne	.-6      	; 0x4560 <StructTMToHW+0xc>
	
	psTime->u8Seconds = psTimeTM->tm_sec;
    4566:	8c 91       	ld	r24, X
    4568:	80 83       	st	Z, r24
	psTime->u8Minutes = psTimeTM->tm_min;
    456a:	12 96       	adiw	r26, 0x02	; 2
    456c:	8c 91       	ld	r24, X
    456e:	12 97       	sbiw	r26, 0x02	; 2
    4570:	81 83       	std	Z+1, r24	; 0x01
	psTime->u8Hours = psTimeTM->tm_hour;
    4572:	14 96       	adiw	r26, 0x04	; 4
    4574:	8c 91       	ld	r24, X
    4576:	14 97       	sbiw	r26, 0x04	; 4
    4578:	82 83       	std	Z+2, r24	; 0x02
	psTime->u8Day = psTimeTM->tm_mday;
    457a:	16 96       	adiw	r26, 0x06	; 6
    457c:	8c 91       	ld	r24, X
    457e:	16 97       	sbiw	r26, 0x06	; 6
    4580:	84 83       	std	Z+4, r24	; 0x04
	psTime->u8Month = psTimeTM->tm_mon;
    4582:	18 96       	adiw	r26, 0x08	; 8
    4584:	8c 91       	ld	r24, X
    4586:	18 97       	sbiw	r26, 0x08	; 8
    4588:	85 83       	std	Z+5, r24	; 0x05
	
	if (psTimeTM->tm_year > (2099-1900))
    458a:	1a 96       	adiw	r26, 0x0a	; 10
    458c:	8d 91       	ld	r24, X+
    458e:	9c 91       	ld	r25, X
    4590:	1b 97       	sbiw	r26, 0x0b	; 11
    4592:	88 3c       	cpi	r24, 0xC8	; 200
    4594:	91 05       	cpc	r25, r1
    4596:	1c f0       	brlt	.+6      	; 0x459e <StructTMToHW+0x4a>
	{
		psTime->u8Year = psTimeTM->tm_year - 2100;
    4598:	84 53       	subi	r24, 0x34	; 52
    459a:	86 83       	std	Z+6, r24	; 0x06
    459c:	02 c0       	rjmp	.+4      	; 0x45a2 <StructTMToHW+0x4e>
	}
	else
	{
		psTime->u8Year = psTimeTM->tm_year - 2000;
    459e:	80 5d       	subi	r24, 0xD0	; 208
    45a0:	86 83       	std	Z+6, r24	; 0x06
	}
	
}
    45a2:	df 91       	pop	r29
    45a4:	cf 91       	pop	r28
    45a6:	08 95       	ret

Disassembly of section .text.HWToStructTM:

00003f0e <HWToStructTM>:
}

// Converts an SMCP7940NTime structure to struct tm
static void HWToStructTM(SMCP7940NTime *psTime,
						 struct tm *psTimeTM)
{
    3f0e:	cf 93       	push	r28
    3f10:	df 93       	push	r29
    3f12:	dc 01       	movw	r26, r24
    3f14:	fb 01       	movw	r30, r22
	// At this point, the time is in STime and we should
	// turn that in to time_t
	memset((void *) psTimeTM, 0, sizeof(*psTimeTM));
    3f16:	89 e1       	ldi	r24, 0x19	; 25
    3f18:	eb 01       	movw	r28, r22
    3f1a:	19 92       	st	Y+, r1
    3f1c:	8a 95       	dec	r24
    3f1e:	e9 f7       	brne	.-6      	; 0x3f1a <HWToStructTM+0xc>
	
	psTimeTM->tm_sec = psTime->u8Seconds;
    3f20:	8c 91       	ld	r24, X
    3f22:	90 e0       	ldi	r25, 0x00	; 0
    3f24:	91 83       	std	Z+1, r25	; 0x01
    3f26:	80 83       	st	Z, r24
	psTimeTM->tm_min = psTime->u8Minutes;
    3f28:	11 96       	adiw	r26, 0x01	; 1
    3f2a:	8c 91       	ld	r24, X
    3f2c:	11 97       	sbiw	r26, 0x01	; 1
    3f2e:	90 e0       	ldi	r25, 0x00	; 0
    3f30:	93 83       	std	Z+3, r25	; 0x03
    3f32:	82 83       	std	Z+2, r24	; 0x02
	psTimeTM->tm_hour = psTime->u8Hours;
    3f34:	12 96       	adiw	r26, 0x02	; 2
    3f36:	8c 91       	ld	r24, X
    3f38:	12 97       	sbiw	r26, 0x02	; 2
    3f3a:	90 e0       	ldi	r25, 0x00	; 0
    3f3c:	95 83       	std	Z+5, r25	; 0x05
    3f3e:	84 83       	std	Z+4, r24	; 0x04
	psTimeTM->tm_mday = psTime->u8Day;
    3f40:	14 96       	adiw	r26, 0x04	; 4
    3f42:	8c 91       	ld	r24, X
    3f44:	14 97       	sbiw	r26, 0x04	; 4
    3f46:	90 e0       	ldi	r25, 0x00	; 0
    3f48:	97 83       	std	Z+7, r25	; 0x07
    3f4a:	86 83       	std	Z+6, r24	; 0x06
	psTimeTM->tm_mon = psTime->u8Month - 1;
    3f4c:	15 96       	adiw	r26, 0x05	; 5
    3f4e:	8c 91       	ld	r24, X
    3f50:	15 97       	sbiw	r26, 0x05	; 5
    3f52:	90 e0       	ldi	r25, 0x00	; 0
    3f54:	01 97       	sbiw	r24, 0x01	; 1
    3f56:	91 87       	std	Z+9, r25	; 0x09
    3f58:	80 87       	std	Z+8, r24	; 0x08
	
	if (psTime->u8Year < YEAR_ROLLOVER_CUTOFF)
    3f5a:	16 96       	adiw	r26, 0x06	; 6
    3f5c:	8c 91       	ld	r24, X
    3f5e:	84 31       	cpi	r24, 0x14	; 20
    3f60:	30 f4       	brcc	.+12     	; 0x3f6e <HWToStructTM+0x60>
	{
		psTimeTM->tm_year = 2100 + psTime->u8Year;
    3f62:	90 e0       	ldi	r25, 0x00	; 0
    3f64:	8c 5c       	subi	r24, 0xCC	; 204
    3f66:	97 4f       	sbci	r25, 0xF7	; 247
    3f68:	93 87       	std	Z+11, r25	; 0x0b
    3f6a:	82 87       	std	Z+10, r24	; 0x0a
    3f6c:	05 c0       	rjmp	.+10     	; 0x3f78 <HWToStructTM+0x6a>
	}
	else
	{
		psTimeTM->tm_year = 2000 + psTime->u8Year;
    3f6e:	90 e0       	ldi	r25, 0x00	; 0
    3f70:	80 53       	subi	r24, 0x30	; 48
    3f72:	98 4f       	sbci	r25, 0xF8	; 248
    3f74:	93 87       	std	Z+11, r25	; 0x0b
    3f76:	82 87       	std	Z+10, r24	; 0x0a
	}	
	
	psTimeTM->tm_year -= 1900;
    3f78:	82 85       	ldd	r24, Z+10	; 0x0a
    3f7a:	93 85       	ldd	r25, Z+11	; 0x0b
    3f7c:	8c 56       	subi	r24, 0x6C	; 108
    3f7e:	97 40       	sbci	r25, 0x07	; 7
    3f80:	93 87       	std	Z+11, r25	; 0x0b
    3f82:	82 87       	std	Z+10, r24	; 0x0a
}
    3f84:	df 91       	pop	r29
    3f86:	cf 91       	pop	r28
    3f88:	08 95       	ret

Disassembly of section .text.__vector_10:

00003c84 <__vector_10>:
// # Of seconds since January 1, 1970
static volatile uint64_t sg_u64Time;

// Called once per second on rev 1 and newer hardware
ISR(INT3_vect, ISR_NOBLOCK)
{
    3c84:	78 94       	sei
    3c86:	1f 92       	push	r1
    3c88:	0f 92       	push	r0
    3c8a:	0f b6       	in	r0, 0x3f	; 63
    3c8c:	0f 92       	push	r0
    3c8e:	11 24       	eor	r1, r1
    3c90:	2f 93       	push	r18
    3c92:	3f 93       	push	r19
    3c94:	4f 93       	push	r20
    3c96:	5f 93       	push	r21
    3c98:	6f 93       	push	r22
    3c9a:	7f 93       	push	r23
    3c9c:	8f 93       	push	r24
    3c9e:	9f 93       	push	r25
    3ca0:	af 93       	push	r26
	EIFR |= (1 << INTF3);
    3ca2:	8c b3       	in	r24, 0x1c	; 28
    3ca4:	88 60       	ori	r24, 0x08	; 8
    3ca6:	8c bb       	out	0x1c, r24	; 28
	sg_u64Time++;
    3ca8:	20 91 3d 0b 	lds	r18, 0x0B3D	; 0x800b3d <sg_u64Time>
    3cac:	30 91 3e 0b 	lds	r19, 0x0B3E	; 0x800b3e <sg_u64Time+0x1>
    3cb0:	40 91 3f 0b 	lds	r20, 0x0B3F	; 0x800b3f <sg_u64Time+0x2>
    3cb4:	50 91 40 0b 	lds	r21, 0x0B40	; 0x800b40 <sg_u64Time+0x3>
    3cb8:	60 91 41 0b 	lds	r22, 0x0B41	; 0x800b41 <sg_u64Time+0x4>
    3cbc:	70 91 42 0b 	lds	r23, 0x0B42	; 0x800b42 <sg_u64Time+0x5>
    3cc0:	80 91 43 0b 	lds	r24, 0x0B43	; 0x800b43 <sg_u64Time+0x6>
    3cc4:	90 91 44 0b 	lds	r25, 0x0B44	; 0x800b44 <sg_u64Time+0x7>
    3cc8:	a1 e0       	ldi	r26, 0x01	; 1
    3cca:	0e 94 5a 28 	call	0x50b4	; 0x50b4 <__adddi3_s8>
    3cce:	20 93 3d 0b 	sts	0x0B3D, r18	; 0x800b3d <sg_u64Time>
    3cd2:	30 93 3e 0b 	sts	0x0B3E, r19	; 0x800b3e <sg_u64Time+0x1>
    3cd6:	40 93 3f 0b 	sts	0x0B3F, r20	; 0x800b3f <sg_u64Time+0x2>
    3cda:	50 93 40 0b 	sts	0x0B40, r21	; 0x800b40 <sg_u64Time+0x3>
    3cde:	60 93 41 0b 	sts	0x0B41, r22	; 0x800b41 <sg_u64Time+0x4>
    3ce2:	70 93 42 0b 	sts	0x0B42, r23	; 0x800b42 <sg_u64Time+0x5>
    3ce6:	80 93 43 0b 	sts	0x0B43, r24	; 0x800b43 <sg_u64Time+0x6>
    3cea:	90 93 44 0b 	sts	0x0B44, r25	; 0x800b44 <sg_u64Time+0x7>
}
    3cee:	af 91       	pop	r26
    3cf0:	9f 91       	pop	r25
    3cf2:	8f 91       	pop	r24
    3cf4:	7f 91       	pop	r23
    3cf6:	6f 91       	pop	r22
    3cf8:	5f 91       	pop	r21
    3cfa:	4f 91       	pop	r20
    3cfc:	3f 91       	pop	r19
    3cfe:	2f 91       	pop	r18
    3d00:	0f 90       	pop	r0
    3d02:	0f be       	out	0x3f, r0	; 63
    3d04:	0f 90       	pop	r0
    3d06:	1f 90       	pop	r1
    3d08:	18 95       	reti

Disassembly of section .text.RTCReadRegisters:

00003e90 <RTCReadRegisters>:
}

bool RTCReadRegisters( uint8_t u8RegisterAddr, 
					   uint8_t* pu8Data, 
					   uint8_t u8Length )
{
    3e90:	ff 92       	push	r15
    3e92:	0f 93       	push	r16
    3e94:	1f 93       	push	r17
    3e96:	cf 93       	push	r28
    3e98:	df 93       	push	r29
    3e9a:	f8 2e       	mov	r15, r24
    3e9c:	8b 01       	movw	r16, r22
    3e9e:	c4 2f       	mov	r28, r20
	bool bResult;
	
	MBASSERT( u8Length >= 1 );
    3ea0:	41 11       	cpse	r20, r1
    3ea2:	07 c0       	rjmp	.+14     	; 0x3eb2 <RTCReadRegisters+0x22>
    3ea4:	4f e5       	ldi	r20, 0x5F	; 95
    3ea6:	50 e0       	ldi	r21, 0x00	; 0
    3ea8:	66 ef       	ldi	r22, 0xF6	; 246
    3eaa:	72 e0       	ldi	r23, 0x02	; 2
    3eac:	80 e0       	ldi	r24, 0x00	; 0
    3eae:	0e 94 c6 25 	call	0x4b8c	; 0x4b8c <PlatformAssert>
	
	// First send device address and write register address
	bResult = RTCStartTransaction( RTC_ADDRESS, false, true );
    3eb2:	41 e0       	ldi	r20, 0x01	; 1
    3eb4:	60 e0       	ldi	r22, 0x00	; 0
    3eb6:	8e ed       	ldi	r24, 0xDE	; 222
    3eb8:	0e 94 c5 23 	call	0x478a	; 0x478a <RTCStartTransaction>
    3ebc:	d8 2f       	mov	r29, r24
	
	// Couldn't get an ACK?  Give up now
	if( false == bResult )
    3ebe:	88 23       	and	r24, r24
    3ec0:	e9 f0       	breq	.+58     	; 0x3efc <RTCReadRegisters+0x6c>
	{
		goto errorExit;
	}
	
	// Send the register address
	bResult = I2CTxByte( u8RegisterAddr );
    3ec2:	8f 2d       	mov	r24, r15
    3ec4:	0e 94 76 20 	call	0x40ec	; 0x40ec <I2CTxByte>
    3ec8:	d8 2f       	mov	r29, r24
	
	if( false == bResult )
    3eca:	88 23       	and	r24, r24
    3ecc:	b9 f0       	breq	.+46     	; 0x3efc <RTCReadRegisters+0x6c>
	{
		goto errorExit;
	}
	
	// Send repeated start with read
	bResult = RTCStartTransaction( RTC_ADDRESS, true, false );
    3ece:	40 e0       	ldi	r20, 0x00	; 0
    3ed0:	61 e0       	ldi	r22, 0x01	; 1
    3ed2:	8e ed       	ldi	r24, 0xDE	; 222
    3ed4:	0e 94 c5 23 	call	0x478a	; 0x478a <RTCStartTransaction>
    3ed8:	d8 2f       	mov	r29, r24
	
	// Couldn't get an ACK?  Give up now
	if( false == bResult )
    3eda:	81 11       	cpse	r24, r1
    3edc:	08 c0       	rjmp	.+16     	; 0x3eee <RTCReadRegisters+0x5e>
    3ede:	0e c0       	rjmp	.+28     	; 0x3efc <RTCReadRegisters+0x6c>
		goto errorExit;
	}
	
	while( u8Length >= 2 )
	{
		*pu8Data = I2CRxByte( true );
    3ee0:	81 e0       	ldi	r24, 0x01	; 1
    3ee2:	0e 94 03 20 	call	0x4006	; 0x4006 <I2CRxByte>
    3ee6:	f8 01       	movw	r30, r16
    3ee8:	81 93       	st	Z+, r24
    3eea:	8f 01       	movw	r16, r30
		pu8Data++;
		u8Length--;
    3eec:	c1 50       	subi	r28, 0x01	; 1
	if( false == bResult )
	{
		goto errorExit;
	}
	
	while( u8Length >= 2 )
    3eee:	c2 30       	cpi	r28, 0x02	; 2
    3ef0:	b8 f7       	brcc	.-18     	; 0x3ee0 <RTCReadRegisters+0x50>
		pu8Data++;
		u8Length--;
	}
	
	// Final read with NACK
	*pu8Data = I2CRxByte( false );
    3ef2:	80 e0       	ldi	r24, 0x00	; 0
    3ef4:	0e 94 03 20 	call	0x4006	; 0x4006 <I2CRxByte>
    3ef8:	f8 01       	movw	r30, r16
    3efa:	80 83       	st	Z, r24
	
errorExit:

	I2CStop();
    3efc:	0e 94 6d 26 	call	0x4cda	; 0x4cda <I2CStop>
	
	return(bResult);
}
    3f00:	8d 2f       	mov	r24, r29
    3f02:	df 91       	pop	r29
    3f04:	cf 91       	pop	r28
    3f06:	1f 91       	pop	r17
    3f08:	0f 91       	pop	r16
    3f0a:	ff 90       	pop	r15
    3f0c:	08 95       	ret

Disassembly of section .text.RTCReadHW:

00002f46 <RTCReadHW>:
	sei();
	
	psSrc = gmtime((const time_t *) &u64Time);
	memcpy((void *) psTime, (void *) psSrc, sizeof(*psTime));
	return(true);
}
    2f46:	cf 93       	push	r28
    2f48:	df 93       	push	r29
    2f4a:	ec 01       	movw	r28, r24
    2f4c:	47 e0       	ldi	r20, 0x07	; 7
    2f4e:	bc 01       	movw	r22, r24
    2f50:	80 e0       	ldi	r24, 0x00	; 0
    2f52:	0e 94 48 1f 	call	0x3e90	; 0x3e90 <RTCReadRegisters>
    2f56:	88 23       	and	r24, r24
    2f58:	09 f4       	brne	.+2      	; 0x2f5c <RTCReadHW+0x16>
    2f5a:	63 c0       	rjmp	.+198    	; 0x3022 <RTCReadHW+0xdc>
    2f5c:	98 81       	ld	r25, Y
    2f5e:	29 2f       	mov	r18, r25
    2f60:	22 95       	swap	r18
    2f62:	2f 70       	andi	r18, 0x0F	; 15
    2f64:	27 70       	andi	r18, 0x07	; 7
    2f66:	22 0f       	add	r18, r18
    2f68:	32 2f       	mov	r19, r18
    2f6a:	33 0f       	add	r19, r19
    2f6c:	33 0f       	add	r19, r19
    2f6e:	23 0f       	add	r18, r19
    2f70:	9f 70       	andi	r25, 0x0F	; 15
    2f72:	92 0f       	add	r25, r18
    2f74:	98 83       	st	Y, r25
    2f76:	99 81       	ldd	r25, Y+1	; 0x01
    2f78:	29 2f       	mov	r18, r25
    2f7a:	22 95       	swap	r18
    2f7c:	2f 70       	andi	r18, 0x0F	; 15
    2f7e:	27 70       	andi	r18, 0x07	; 7
    2f80:	22 0f       	add	r18, r18
    2f82:	32 2f       	mov	r19, r18
    2f84:	33 0f       	add	r19, r19
    2f86:	33 0f       	add	r19, r19
    2f88:	23 0f       	add	r18, r19
    2f8a:	9f 70       	andi	r25, 0x0F	; 15
    2f8c:	92 0f       	add	r25, r18
    2f8e:	99 83       	std	Y+1, r25	; 0x01
    2f90:	9a 81       	ldd	r25, Y+2	; 0x02
    2f92:	96 ff       	sbrs	r25, 6
    2f94:	11 c0       	rjmp	.+34     	; 0x2fb8 <RTCReadHW+0x72>
    2f96:	94 fb       	bst	r25, 4
    2f98:	22 27       	eor	r18, r18
    2f9a:	20 f9       	bld	r18, 0
    2f9c:	22 0f       	add	r18, r18
    2f9e:	32 2f       	mov	r19, r18
    2fa0:	33 0f       	add	r19, r19
    2fa2:	33 0f       	add	r19, r19
    2fa4:	23 0f       	add	r18, r19
    2fa6:	39 2f       	mov	r19, r25
    2fa8:	3f 70       	andi	r19, 0x0F	; 15
    2faa:	23 0f       	add	r18, r19
    2fac:	2a 83       	std	Y+2, r18	; 0x02
    2fae:	95 ff       	sbrs	r25, 5
    2fb0:	0f c0       	rjmp	.+30     	; 0x2fd0 <RTCReadHW+0x8a>
    2fb2:	24 5f       	subi	r18, 0xF4	; 244
    2fb4:	2a 83       	std	Y+2, r18	; 0x02
    2fb6:	0c c0       	rjmp	.+24     	; 0x2fd0 <RTCReadHW+0x8a>
    2fb8:	29 2f       	mov	r18, r25
    2fba:	22 95       	swap	r18
    2fbc:	2f 70       	andi	r18, 0x0F	; 15
    2fbe:	23 70       	andi	r18, 0x03	; 3
    2fc0:	22 0f       	add	r18, r18
    2fc2:	32 2f       	mov	r19, r18
    2fc4:	33 0f       	add	r19, r19
    2fc6:	33 0f       	add	r19, r19
    2fc8:	23 0f       	add	r18, r19
    2fca:	9f 70       	andi	r25, 0x0F	; 15
    2fcc:	92 0f       	add	r25, r18
    2fce:	9a 83       	std	Y+2, r25	; 0x02
    2fd0:	9b 81       	ldd	r25, Y+3	; 0x03
    2fd2:	97 70       	andi	r25, 0x07	; 7
    2fd4:	9b 83       	std	Y+3, r25	; 0x03
    2fd6:	9c 81       	ldd	r25, Y+4	; 0x04
    2fd8:	29 2f       	mov	r18, r25
    2fda:	22 95       	swap	r18
    2fdc:	2f 70       	andi	r18, 0x0F	; 15
    2fde:	23 70       	andi	r18, 0x03	; 3
    2fe0:	22 0f       	add	r18, r18
    2fe2:	32 2f       	mov	r19, r18
    2fe4:	33 0f       	add	r19, r19
    2fe6:	33 0f       	add	r19, r19
    2fe8:	23 0f       	add	r18, r19
    2fea:	9f 70       	andi	r25, 0x0F	; 15
    2fec:	92 0f       	add	r25, r18
    2fee:	9c 83       	std	Y+4, r25	; 0x04
    2ff0:	9d 81       	ldd	r25, Y+5	; 0x05
    2ff2:	94 fb       	bst	r25, 4
    2ff4:	22 27       	eor	r18, r18
    2ff6:	20 f9       	bld	r18, 0
    2ff8:	22 0f       	add	r18, r18
    2ffa:	32 2f       	mov	r19, r18
    2ffc:	33 0f       	add	r19, r19
    2ffe:	33 0f       	add	r19, r19
    3000:	23 0f       	add	r18, r19
    3002:	9f 70       	andi	r25, 0x0F	; 15
    3004:	92 0f       	add	r25, r18
    3006:	9d 83       	std	Y+5, r25	; 0x05
    3008:	9e 81       	ldd	r25, Y+6	; 0x06
    300a:	29 2f       	mov	r18, r25
    300c:	22 95       	swap	r18
    300e:	2f 70       	andi	r18, 0x0F	; 15
    3010:	22 0f       	add	r18, r18
    3012:	32 2f       	mov	r19, r18
    3014:	33 0f       	add	r19, r19
    3016:	33 0f       	add	r19, r19
    3018:	23 0f       	add	r18, r19
    301a:	9f 70       	andi	r25, 0x0F	; 15
    301c:	92 0f       	add	r25, r18
    301e:	9c 5e       	subi	r25, 0xEC	; 236
    3020:	9e 83       	std	Y+6, r25	; 0x06
    3022:	df 91       	pop	r29
    3024:	cf 91       	pop	r28
    3026:	08 95       	ret

Disassembly of section .text.RTCWriteRegisters:

00004156 <RTCWriteRegisters>:
}

bool RTCWriteRegisters( uint8_t u8RegisterAddr,
						uint8_t* pu8Data, 
						uint8_t u8Length )
{
    4156:	ff 92       	push	r15
    4158:	0f 93       	push	r16
    415a:	1f 93       	push	r17
    415c:	cf 93       	push	r28
    415e:	df 93       	push	r29
    4160:	f8 2e       	mov	r15, r24
    4162:	8b 01       	movw	r16, r22
    4164:	c4 2f       	mov	r28, r20
	bool bResult;
	
	MBASSERT( u8Length >= 1 );
    4166:	41 11       	cpse	r20, r1
    4168:	07 c0       	rjmp	.+14     	; 0x4178 <RTCWriteRegisters+0x22>
    416a:	42 e9       	ldi	r20, 0x92	; 146
    416c:	50 e0       	ldi	r21, 0x00	; 0
    416e:	66 ef       	ldi	r22, 0xF6	; 246
    4170:	72 e0       	ldi	r23, 0x02	; 2
    4172:	80 e0       	ldi	r24, 0x00	; 0
    4174:	0e 94 c6 25 	call	0x4b8c	; 0x4b8c <PlatformAssert>
	
	// First send device address and write register address
	bResult = RTCStartTransaction( RTC_ADDRESS, false, true );
    4178:	41 e0       	ldi	r20, 0x01	; 1
    417a:	60 e0       	ldi	r22, 0x00	; 0
    417c:	8e ed       	ldi	r24, 0xDE	; 222
    417e:	0e 94 c5 23 	call	0x478a	; 0x478a <RTCStartTransaction>
    4182:	d8 2f       	mov	r29, r24
	
	// Couldn't get an ACK?  Give up now
	if( false == bResult )
    4184:	88 23       	and	r24, r24
    4186:	99 f0       	breq	.+38     	; 0x41ae <RTCWriteRegisters+0x58>
	{
		goto errorExit;
	}
	
	// Send the register address
	bResult = I2CTxByte( u8RegisterAddr );
    4188:	8f 2d       	mov	r24, r15
    418a:	0e 94 76 20 	call	0x40ec	; 0x40ec <I2CTxByte>
    418e:	d8 2f       	mov	r29, r24
	
	if( false == bResult )
    4190:	81 11       	cpse	r24, r1
    4192:	0b c0       	rjmp	.+22     	; 0x41aa <RTCWriteRegisters+0x54>
    4194:	0c c0       	rjmp	.+24     	; 0x41ae <RTCWriteRegisters+0x58>
	}
	
	// Now immediately send the sequential data
	while( u8Length )
	{
		bResult = I2CTxByte( *pu8Data );
    4196:	f8 01       	movw	r30, r16
    4198:	80 81       	ld	r24, Z
    419a:	0e 94 76 20 	call	0x40ec	; 0x40ec <I2CTxByte>
    419e:	d8 2f       	mov	r29, r24
		
		if( false == bResult )
    41a0:	88 23       	and	r24, r24
    41a2:	29 f0       	breq	.+10     	; 0x41ae <RTCWriteRegisters+0x58>
		{
			goto errorExit;
		}
		
		pu8Data++;
    41a4:	0f 5f       	subi	r16, 0xFF	; 255
    41a6:	1f 4f       	sbci	r17, 0xFF	; 255
		u8Length--;
    41a8:	c1 50       	subi	r28, 0x01	; 1
	{
		goto errorExit;
	}
	
	// Now immediately send the sequential data
	while( u8Length )
    41aa:	c1 11       	cpse	r28, r1
    41ac:	f4 cf       	rjmp	.-24     	; 0x4196 <RTCWriteRegisters+0x40>
		u8Length--;
	}
	
errorExit:

	I2CStop();
    41ae:	0e 94 6d 26 	call	0x4cda	; 0x4cda <I2CStop>
	
	return( bResult );
}
    41b2:	8d 2f       	mov	r24, r29
    41b4:	df 91       	pop	r29
    41b6:	cf 91       	pop	r28
    41b8:	1f 91       	pop	r17
    41ba:	0f 91       	pop	r16
    41bc:	ff 90       	pop	r15
    41be:	08 95       	ret

Disassembly of section .text.RTCWriteHW:

00002c5c <RTCWriteHW>:
	sei();
	
	psSrc = gmtime((const time_t *) &u64Time);
	memcpy((void *) psTime, (void *) psSrc, sizeof(*psTime));
	return(true);
}
    2c5c:	fc 01       	movw	r30, r24
    2c5e:	20 81       	ld	r18, Z
    2c60:	8d ec       	ldi	r24, 0xCD	; 205
    2c62:	28 9f       	mul	r18, r24
    2c64:	91 2d       	mov	r25, r1
    2c66:	11 24       	eor	r1, r1
    2c68:	96 95       	lsr	r25
    2c6a:	96 95       	lsr	r25
    2c6c:	96 95       	lsr	r25
    2c6e:	30 e1       	ldi	r19, 0x10	; 16
    2c70:	93 9f       	mul	r25, r19
    2c72:	a0 01       	movw	r20, r0
    2c74:	11 24       	eor	r1, r1
    2c76:	99 0f       	add	r25, r25
    2c78:	39 2f       	mov	r19, r25
    2c7a:	33 0f       	add	r19, r19
    2c7c:	33 0f       	add	r19, r19
    2c7e:	93 0f       	add	r25, r19
    2c80:	29 1b       	sub	r18, r25
    2c82:	24 2b       	or	r18, r20
    2c84:	20 83       	st	Z, r18
    2c86:	21 81       	ldd	r18, Z+1	; 0x01
    2c88:	28 9f       	mul	r18, r24
    2c8a:	91 2d       	mov	r25, r1
    2c8c:	11 24       	eor	r1, r1
    2c8e:	96 95       	lsr	r25
    2c90:	96 95       	lsr	r25
    2c92:	96 95       	lsr	r25
    2c94:	30 e1       	ldi	r19, 0x10	; 16
    2c96:	93 9f       	mul	r25, r19
    2c98:	a0 01       	movw	r20, r0
    2c9a:	11 24       	eor	r1, r1
    2c9c:	99 0f       	add	r25, r25
    2c9e:	39 2f       	mov	r19, r25
    2ca0:	33 0f       	add	r19, r19
    2ca2:	33 0f       	add	r19, r19
    2ca4:	93 0f       	add	r25, r19
    2ca6:	29 1b       	sub	r18, r25
    2ca8:	24 2b       	or	r18, r20
    2caa:	21 83       	std	Z+1, r18	; 0x01
    2cac:	42 81       	ldd	r20, Z+2	; 0x02
    2cae:	48 9f       	mul	r20, r24
    2cb0:	91 2d       	mov	r25, r1
    2cb2:	11 24       	eor	r1, r1
    2cb4:	96 95       	lsr	r25
    2cb6:	96 95       	lsr	r25
    2cb8:	96 95       	lsr	r25
    2cba:	50 e1       	ldi	r21, 0x10	; 16
    2cbc:	95 9f       	mul	r25, r21
    2cbe:	90 01       	movw	r18, r0
    2cc0:	11 24       	eor	r1, r1
    2cc2:	99 0f       	add	r25, r25
    2cc4:	39 2f       	mov	r19, r25
    2cc6:	33 0f       	add	r19, r19
    2cc8:	33 0f       	add	r19, r19
    2cca:	93 0f       	add	r25, r19
    2ccc:	49 1b       	sub	r20, r25
    2cce:	24 2b       	or	r18, r20
    2cd0:	2f 7b       	andi	r18, 0xBF	; 191
    2cd2:	22 83       	std	Z+2, r18	; 0x02
    2cd4:	93 81       	ldd	r25, Z+3	; 0x03
    2cd6:	97 70       	andi	r25, 0x07	; 7
    2cd8:	98 60       	ori	r25, 0x08	; 8
    2cda:	93 83       	std	Z+3, r25	; 0x03
    2cdc:	24 81       	ldd	r18, Z+4	; 0x04
    2cde:	28 9f       	mul	r18, r24
    2ce0:	91 2d       	mov	r25, r1
    2ce2:	11 24       	eor	r1, r1
    2ce4:	96 95       	lsr	r25
    2ce6:	96 95       	lsr	r25
    2ce8:	96 95       	lsr	r25
    2cea:	30 e1       	ldi	r19, 0x10	; 16
    2cec:	93 9f       	mul	r25, r19
    2cee:	a0 01       	movw	r20, r0
    2cf0:	11 24       	eor	r1, r1
    2cf2:	99 0f       	add	r25, r25
    2cf4:	39 2f       	mov	r19, r25
    2cf6:	33 0f       	add	r19, r19
    2cf8:	33 0f       	add	r19, r19
    2cfa:	93 0f       	add	r25, r19
    2cfc:	29 1b       	sub	r18, r25
    2cfe:	24 2b       	or	r18, r20
    2d00:	24 83       	std	Z+4, r18	; 0x04
    2d02:	25 81       	ldd	r18, Z+5	; 0x05
    2d04:	28 9f       	mul	r18, r24
    2d06:	91 2d       	mov	r25, r1
    2d08:	11 24       	eor	r1, r1
    2d0a:	96 95       	lsr	r25
    2d0c:	96 95       	lsr	r25
    2d0e:	96 95       	lsr	r25
    2d10:	30 e1       	ldi	r19, 0x10	; 16
    2d12:	93 9f       	mul	r25, r19
    2d14:	a0 01       	movw	r20, r0
    2d16:	11 24       	eor	r1, r1
    2d18:	99 0f       	add	r25, r25
    2d1a:	39 2f       	mov	r19, r25
    2d1c:	33 0f       	add	r19, r19
    2d1e:	33 0f       	add	r19, r19
    2d20:	93 0f       	add	r25, r19
    2d22:	29 1b       	sub	r18, r25
    2d24:	24 2b       	or	r18, r20
    2d26:	25 83       	std	Z+5, r18	; 0x05
    2d28:	96 81       	ldd	r25, Z+6	; 0x06
    2d2a:	98 9f       	mul	r25, r24
    2d2c:	81 2d       	mov	r24, r1
    2d2e:	11 24       	eor	r1, r1
    2d30:	86 95       	lsr	r24
    2d32:	86 95       	lsr	r24
    2d34:	86 95       	lsr	r24
    2d36:	40 e1       	ldi	r20, 0x10	; 16
    2d38:	84 9f       	mul	r24, r20
    2d3a:	90 01       	movw	r18, r0
    2d3c:	11 24       	eor	r1, r1
    2d3e:	88 0f       	add	r24, r24
    2d40:	38 2f       	mov	r19, r24
    2d42:	33 0f       	add	r19, r19
    2d44:	33 0f       	add	r19, r19
    2d46:	83 0f       	add	r24, r19
    2d48:	98 1b       	sub	r25, r24
    2d4a:	92 2b       	or	r25, r18
    2d4c:	96 83       	std	Z+6, r25	; 0x06
    2d4e:	47 e0       	ldi	r20, 0x07	; 7
    2d50:	bf 01       	movw	r22, r30
    2d52:	80 e0       	ldi	r24, 0x00	; 0
    2d54:	0e 94 ab 20 	call	0x4156	; 0x4156 <RTCWriteRegisters>
    2d58:	08 95       	ret

Disassembly of section .text.RTCSetTime:

00003382 <RTCSetTime>:

// This sets the RTC to the specific time passed in. True is returned
// if it's 
bool RTCSetTime(uint64_t u64Timet)
{
    3382:	0f 93       	push	r16
    3384:	1f 93       	push	r17
    3386:	cf 93       	push	r28
    3388:	df 93       	push	r29
    338a:	cd b7       	in	r28, 0x3d	; 61
    338c:	de b7       	in	r29, 0x3e	; 62
    338e:	a8 97       	sbiw	r28, 0x28	; 40
    3390:	0f b6       	in	r0, 0x3f	; 63
    3392:	f8 94       	cli
    3394:	de bf       	out	0x3e, r29	; 62
    3396:	0f be       	out	0x3f, r0	; 63
    3398:	cd bf       	out	0x3d, r28	; 61
    339a:	29 a3       	std	Y+33, r18	; 0x21
    339c:	3a a3       	std	Y+34, r19	; 0x22
    339e:	4b a3       	std	Y+35, r20	; 0x23
    33a0:	5c a3       	std	Y+36, r21	; 0x24
    33a2:	6d a3       	std	Y+37, r22	; 0x25
    33a4:	7e a3       	std	Y+38, r23	; 0x26
    33a6:	8f a3       	std	Y+39, r24	; 0x27
    33a8:	98 a7       	std	Y+40, r25	; 0x28
	struct tm sTime;
	struct tm *psTime;
	SMCP7940NTime sTimeHW;

	// Convert to GMTime
	memset((void *) &sTime, 0, sizeof(sTime));
    33aa:	fe 01       	movw	r30, r28
    33ac:	31 96       	adiw	r30, 0x01	; 1
    33ae:	89 e1       	ldi	r24, 0x19	; 25
    33b0:	df 01       	movw	r26, r30
    33b2:	1d 92       	st	X+, r1
    33b4:	8a 95       	dec	r24
    33b6:	e9 f7       	brne	.-6      	; 0x33b2 <RTCSetTime+0x30>
	psTime = gmtime((const time_t *) &u64Timet);
    33b8:	be 01       	movw	r22, r28
    33ba:	6f 5d       	subi	r22, 0xDF	; 223
    33bc:	7f 4f       	sbci	r23, 0xFF	; 255
    33be:	80 e8       	ldi	r24, 0x80	; 128
    33c0:	0e 94 2a 29 	call	0x5254	; 0x5254 <gmtime>
    33c4:	8c 01       	movw	r16, r24
	MBASSERT(psTime);
    33c6:	89 2b       	or	r24, r25
    33c8:	39 f4       	brne	.+14     	; 0x33d8 <RTCSetTime+0x56>
    33ca:	42 e8       	ldi	r20, 0x82	; 130
    33cc:	51 e0       	ldi	r21, 0x01	; 1
    33ce:	66 ef       	ldi	r22, 0xF6	; 246
    33d0:	72 e0       	ldi	r23, 0x02	; 2
    33d2:	80 e0       	ldi	r24, 0x00	; 0
    33d4:	0e 94 c6 25 	call	0x4b8c	; 0x4b8c <PlatformAssert>
	memcpy((void *) &sTime, (void *) psTime, sizeof(sTime));
    33d8:	a8 01       	movw	r20, r16
    33da:	60 e8       	ldi	r22, 0x80	; 128
    33dc:	29 e1       	ldi	r18, 0x19	; 25
    33de:	30 e0       	ldi	r19, 0x00	; 0
    33e0:	ce 01       	movw	r24, r28
    33e2:	01 96       	adiw	r24, 0x01	; 1
    33e4:	0e 94 53 25 	call	0x4aa6	; 0x4aa6 <memcpy>
	
	// Now convert to hardware
	StructTMToHW(&sTime,
    33e8:	be 01       	movw	r22, r28
    33ea:	66 5e       	subi	r22, 0xE6	; 230
    33ec:	7f 4f       	sbci	r23, 0xFF	; 255
    33ee:	ce 01       	movw	r24, r28
    33f0:	01 96       	adiw	r24, 0x01	; 1
    33f2:	0e 94 aa 22 	call	0x4554	; 0x4554 <StructTMToHW>
				 &sTimeHW);
	
	// Set the time			 
	cli();
    33f6:	f8 94       	cli
	sg_u64Time = u64Timet;
    33f8:	79 a1       	ldd	r23, Y+33	; 0x21
    33fa:	6a a1       	ldd	r22, Y+34	; 0x22
    33fc:	5b a1       	ldd	r21, Y+35	; 0x23
    33fe:	4c a1       	ldd	r20, Y+36	; 0x24
    3400:	3d a1       	ldd	r19, Y+37	; 0x25
    3402:	2e a1       	ldd	r18, Y+38	; 0x26
    3404:	9f a1       	ldd	r25, Y+39	; 0x27
    3406:	88 a5       	ldd	r24, Y+40	; 0x28
    3408:	70 93 3d 0b 	sts	0x0B3D, r23	; 0x800b3d <sg_u64Time>
    340c:	60 93 3e 0b 	sts	0x0B3E, r22	; 0x800b3e <sg_u64Time+0x1>
    3410:	50 93 3f 0b 	sts	0x0B3F, r21	; 0x800b3f <sg_u64Time+0x2>
    3414:	40 93 40 0b 	sts	0x0B40, r20	; 0x800b40 <sg_u64Time+0x3>
    3418:	30 93 41 0b 	sts	0x0B41, r19	; 0x800b41 <sg_u64Time+0x4>
    341c:	20 93 42 0b 	sts	0x0B42, r18	; 0x800b42 <sg_u64Time+0x5>
    3420:	90 93 43 0b 	sts	0x0B43, r25	; 0x800b43 <sg_u64Time+0x6>
    3424:	80 93 44 0b 	sts	0x0B44, r24	; 0x800b44 <sg_u64Time+0x7>
	sei();
    3428:	78 94       	sei
	
	// Now go tell the hardware about it
	return(RTCWriteHW(&sTimeHW));
    342a:	ce 01       	movw	r24, r28
    342c:	4a 96       	adiw	r24, 0x1a	; 26
    342e:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <RTCWriteHW>
}
    3432:	a8 96       	adiw	r28, 0x28	; 40
    3434:	0f b6       	in	r0, 0x3f	; 63
    3436:	f8 94       	cli
    3438:	de bf       	out	0x3e, r29	; 62
    343a:	0f be       	out	0x3f, r0	; 63
    343c:	cd bf       	out	0x3d, r28	; 61
    343e:	df 91       	pop	r29
    3440:	cf 91       	pop	r28
    3442:	1f 91       	pop	r17
    3444:	0f 91       	pop	r16
    3446:	08 95       	ret

Disassembly of section .text.RTCInit:

000017b4 <RTCInit>:
	sei();
	
	psSrc = gmtime((const time_t *) &u64Time);
	memcpy((void *) psTime, (void *) psSrc, sizeof(*psTime));
	return(true);
}
    17b4:	ff 92       	push	r15
    17b6:	0f 93       	push	r16
    17b8:	1f 93       	push	r17
    17ba:	cf 93       	push	r28
    17bc:	df 93       	push	r29
    17be:	cd b7       	in	r28, 0x3d	; 61
    17c0:	de b7       	in	r29, 0x3e	; 62
    17c2:	a1 97       	sbiw	r28, 0x21	; 33
    17c4:	0f b6       	in	r0, 0x3f	; 63
    17c6:	f8 94       	cli
    17c8:	de bf       	out	0x3e, r29	; 62
    17ca:	0f be       	out	0x3f, r0	; 63
    17cc:	cd bf       	out	0x3d, r28	; 61
    17ce:	19 82       	std	Y+1, r1	; 0x01
    17d0:	41 e0       	ldi	r20, 0x01	; 1
    17d2:	be 01       	movw	r22, r28
    17d4:	6f 5f       	subi	r22, 0xFF	; 255
    17d6:	7f 4f       	sbci	r23, 0xFF	; 255
    17d8:	87 e0       	ldi	r24, 0x07	; 7
    17da:	0e 94 ab 20 	call	0x4156	; 0x4156 <RTCWriteRegisters>
    17de:	18 2f       	mov	r17, r24
    17e0:	88 23       	and	r24, r24
    17e2:	09 f4       	brne	.+2      	; 0x17e6 <RTCInit+0x32>
    17e4:	eb c0       	rjmp	.+470    	; 0x19bc <RTCInit+0x208>
    17e6:	80 e8       	ldi	r24, 0x80	; 128
    17e8:	89 83       	std	Y+1, r24	; 0x01
    17ea:	41 e0       	ldi	r20, 0x01	; 1
    17ec:	be 01       	movw	r22, r28
    17ee:	6f 5f       	subi	r22, 0xFF	; 255
    17f0:	7f 4f       	sbci	r23, 0xFF	; 255
    17f2:	80 e0       	ldi	r24, 0x00	; 0
    17f4:	0e 94 ab 20 	call	0x4156	; 0x4156 <RTCWriteRegisters>
    17f8:	18 2f       	mov	r17, r24
    17fa:	81 11       	cpse	r24, r1
    17fc:	17 c0       	rjmp	.+46     	; 0x182c <RTCInit+0x78>
    17fe:	de c0       	rjmp	.+444    	; 0x19bc <RTCInit+0x208>
    1800:	19 82       	std	Y+1, r1	; 0x01
    1802:	41 e0       	ldi	r20, 0x01	; 1
    1804:	be 01       	movw	r22, r28
    1806:	6f 5f       	subi	r22, 0xFF	; 255
    1808:	7f 4f       	sbci	r23, 0xFF	; 255
    180a:	83 e0       	ldi	r24, 0x03	; 3
    180c:	0e 94 48 1f 	call	0x3e90	; 0x3e90 <RTCReadRegisters>
    1810:	18 2f       	mov	r17, r24
    1812:	88 23       	and	r24, r24
    1814:	09 f4       	brne	.+2      	; 0x1818 <RTCInit+0x64>
    1816:	d2 c0       	rjmp	.+420    	; 0x19bc <RTCInit+0x208>
    1818:	89 81       	ldd	r24, Y+1	; 0x01
    181a:	85 fd       	sbrc	r24, 5
    181c:	0a c0       	rjmp	.+20     	; 0x1832 <RTCInit+0x7e>
    181e:	60 e0       	ldi	r22, 0x00	; 0
    1820:	70 e0       	ldi	r23, 0x00	; 0
    1822:	cb 01       	movw	r24, r22
    1824:	0e 94 fe 22 	call	0x45fc	; 0x45fc <Delay>
    1828:	0f 5f       	subi	r16, 0xFF	; 255
    182a:	01 c0       	rjmp	.+2      	; 0x182e <RTCInit+0x7a>
    182c:	00 e0       	ldi	r16, 0x00	; 0
    182e:	08 3c       	cpi	r16, 0xC8	; 200
    1830:	38 f3       	brcs	.-50     	; 0x1800 <RTCInit+0x4c>
    1832:	08 3c       	cpi	r16, 0xC8	; 200
    1834:	08 f0       	brcs	.+2      	; 0x1838 <RTCInit+0x84>
    1836:	c2 c0       	rjmp	.+388    	; 0x19bc <RTCInit+0x208>
    1838:	89 81       	ldd	r24, Y+1	; 0x01
    183a:	88 60       	ori	r24, 0x08	; 8
    183c:	89 83       	std	Y+1, r24	; 0x01
    183e:	41 e0       	ldi	r20, 0x01	; 1
    1840:	be 01       	movw	r22, r28
    1842:	6f 5f       	subi	r22, 0xFF	; 255
    1844:	7f 4f       	sbci	r23, 0xFF	; 255
    1846:	83 e0       	ldi	r24, 0x03	; 3
    1848:	0e 94 ab 20 	call	0x4156	; 0x4156 <RTCWriteRegisters>
    184c:	18 2f       	mov	r17, r24
    184e:	88 23       	and	r24, r24
    1850:	09 f4       	brne	.+2      	; 0x1854 <RTCInit+0xa0>
    1852:	b4 c0       	rjmp	.+360    	; 0x19bc <RTCInit+0x208>
    1854:	41 e0       	ldi	r20, 0x01	; 1
    1856:	be 01       	movw	r22, r28
    1858:	6f 5f       	subi	r22, 0xFF	; 255
    185a:	7f 4f       	sbci	r23, 0xFF	; 255
    185c:	82 e0       	ldi	r24, 0x02	; 2
    185e:	0e 94 48 1f 	call	0x3e90	; 0x3e90 <RTCReadRegisters>
    1862:	18 2f       	mov	r17, r24
    1864:	88 23       	and	r24, r24
    1866:	09 f4       	brne	.+2      	; 0x186a <RTCInit+0xb6>
    1868:	a9 c0       	rjmp	.+338    	; 0x19bc <RTCInit+0x208>
    186a:	89 81       	ldd	r24, Y+1	; 0x01
    186c:	8f 7b       	andi	r24, 0xBF	; 191
    186e:	89 83       	std	Y+1, r24	; 0x01
    1870:	41 e0       	ldi	r20, 0x01	; 1
    1872:	be 01       	movw	r22, r28
    1874:	6f 5f       	subi	r22, 0xFF	; 255
    1876:	7f 4f       	sbci	r23, 0xFF	; 255
    1878:	82 e0       	ldi	r24, 0x02	; 2
    187a:	0e 94 ab 20 	call	0x4156	; 0x4156 <RTCWriteRegisters>
    187e:	18 2f       	mov	r17, r24
    1880:	88 23       	and	r24, r24
    1882:	09 f4       	brne	.+2      	; 0x1886 <RTCInit+0xd2>
    1884:	9b c0       	rjmp	.+310    	; 0x19bc <RTCInit+0x208>
    1886:	ce 01       	movw	r24, r28
    1888:	02 96       	adiw	r24, 0x02	; 2
    188a:	0e 94 a3 17 	call	0x2f46	; 0x2f46 <RTCReadHW>
    188e:	18 2f       	mov	r17, r24
    1890:	88 23       	and	r24, r24
    1892:	09 f4       	brne	.+2      	; 0x1896 <RTCInit+0xe2>
    1894:	93 c0       	rjmp	.+294    	; 0x19bc <RTCInit+0x208>
    1896:	8a 81       	ldd	r24, Y+2	; 0x02
    1898:	8c 33       	cpi	r24, 0x3C	; 60
    189a:	10 f4       	brcc	.+4      	; 0x18a0 <RTCInit+0xec>
    189c:	10 e0       	ldi	r17, 0x00	; 0
    189e:	01 c0       	rjmp	.+2      	; 0x18a2 <RTCInit+0xee>
    18a0:	11 e0       	ldi	r17, 0x01	; 1
    18a2:	8b 81       	ldd	r24, Y+3	; 0x03
    18a4:	8c 33       	cpi	r24, 0x3C	; 60
    18a6:	08 f0       	brcs	.+2      	; 0x18aa <RTCInit+0xf6>
    18a8:	11 e0       	ldi	r17, 0x01	; 1
    18aa:	8c 81       	ldd	r24, Y+4	; 0x04
    18ac:	8c 33       	cpi	r24, 0x3C	; 60
    18ae:	08 f0       	brcs	.+2      	; 0x18b2 <RTCInit+0xfe>
    18b0:	11 e0       	ldi	r17, 0x01	; 1
    18b2:	8d 81       	ldd	r24, Y+5	; 0x05
    18b4:	81 50       	subi	r24, 0x01	; 1
    18b6:	87 30       	cpi	r24, 0x07	; 7
    18b8:	08 f0       	brcs	.+2      	; 0x18bc <RTCInit+0x108>
    18ba:	11 e0       	ldi	r17, 0x01	; 1
    18bc:	2f 81       	ldd	r18, Y+7	; 0x07
    18be:	8f ef       	ldi	r24, 0xFF	; 255
    18c0:	82 0f       	add	r24, r18
    18c2:	8c 30       	cpi	r24, 0x0C	; 12
    18c4:	18 f5       	brcc	.+70     	; 0x190c <RTCInit+0x158>
    18c6:	0e 81       	ldd	r16, Y+6	; 0x06
    18c8:	00 23       	and	r16, r16
    18ca:	11 f1       	breq	.+68     	; 0x1910 <RTCInit+0x15c>
    18cc:	82 2f       	mov	r24, r18
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	01 97       	sbiw	r24, 0x01	; 1
    18d2:	09 2e       	mov	r0, r25
    18d4:	00 0c       	add	r0, r0
    18d6:	aa 0b       	sbc	r26, r26
    18d8:	87 5d       	subi	r24, 0xD7	; 215
    18da:	9c 4f       	sbci	r25, 0xFC	; 252
    18dc:	af 4f       	sbci	r26, 0xFF	; 255
    18de:	fc 01       	movw	r30, r24
    18e0:	f4 90       	lpm	r15, Z
    18e2:	a7 fd       	sbrc	r26, 7
    18e4:	f0 80       	ld	r15, Z
    18e6:	22 30       	cpi	r18, 0x02	; 2
    18e8:	71 f4       	brne	.+28     	; 0x1906 <RTCInit+0x152>
    18ea:	88 85       	ldd	r24, Y+8	; 0x08
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	84 31       	cpi	r24, 0x14	; 20
    18f0:	91 05       	cpc	r25, r1
    18f2:	18 f4       	brcc	.+6      	; 0x18fa <RTCInit+0x146>
    18f4:	8c 5c       	subi	r24, 0xCC	; 204
    18f6:	97 4f       	sbci	r25, 0xF7	; 247
    18f8:	02 c0       	rjmp	.+4      	; 0x18fe <RTCInit+0x14a>
    18fa:	80 53       	subi	r24, 0x30	; 48
    18fc:	98 4f       	sbci	r25, 0xF8	; 248
    18fe:	0e 94 d3 24 	call	0x49a6	; 0x49a6 <IsLeapYear>
    1902:	81 11       	cpse	r24, r1
    1904:	f3 94       	inc	r15
    1906:	f0 16       	cp	r15, r16
    1908:	28 f0       	brcs	.+10     	; 0x1914 <RTCInit+0x160>
    190a:	05 c0       	rjmp	.+10     	; 0x1916 <RTCInit+0x162>
    190c:	11 e0       	ldi	r17, 0x01	; 1
    190e:	03 c0       	rjmp	.+6      	; 0x1916 <RTCInit+0x162>
    1910:	11 e0       	ldi	r17, 0x01	; 1
    1912:	01 c0       	rjmp	.+2      	; 0x1916 <RTCInit+0x162>
    1914:	11 e0       	ldi	r17, 0x01	; 1
    1916:	11 23       	and	r17, r17
    1918:	b9 f0       	breq	.+46     	; 0x1948 <RTCInit+0x194>
    191a:	1a 82       	std	Y+2, r1	; 0x02
    191c:	1b 82       	std	Y+3, r1	; 0x03
    191e:	1c 82       	std	Y+4, r1	; 0x04
    1920:	81 e0       	ldi	r24, 0x01	; 1
    1922:	8e 83       	std	Y+6, r24	; 0x06
    1924:	8f 83       	std	Y+7, r24	; 0x07
    1926:	88 e1       	ldi	r24, 0x18	; 24
    1928:	88 87       	std	Y+8, r24	; 0x08
    192a:	ce 01       	movw	r24, r28
    192c:	02 96       	adiw	r24, 0x02	; 2
    192e:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <RTCWriteHW>
    1932:	18 2f       	mov	r17, r24
    1934:	88 23       	and	r24, r24
    1936:	09 f4       	brne	.+2      	; 0x193a <RTCInit+0x186>
    1938:	41 c0       	rjmp	.+130    	; 0x19bc <RTCInit+0x208>
    193a:	ce 01       	movw	r24, r28
    193c:	02 96       	adiw	r24, 0x02	; 2
    193e:	0e 94 a3 17 	call	0x2f46	; 0x2f46 <RTCReadHW>
    1942:	18 2f       	mov	r17, r24
    1944:	88 23       	and	r24, r24
    1946:	d1 f1       	breq	.+116    	; 0x19bc <RTCInit+0x208>
    1948:	be 01       	movw	r22, r28
    194a:	67 5f       	subi	r22, 0xF7	; 247
    194c:	7f 4f       	sbci	r23, 0xFF	; 255
    194e:	ce 01       	movw	r24, r28
    1950:	02 96       	adiw	r24, 0x02	; 2
    1952:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <HWToStructTM>
    1956:	ce 01       	movw	r24, r28
    1958:	09 96       	adiw	r24, 0x09	; 9
    195a:	0e 94 85 1e 	call	0x3d0a	; 0x3d0a <mktime>
    195e:	8b 01       	movw	r16, r22
    1960:	9c 01       	movw	r18, r24
    1962:	f8 94       	cli
    1964:	00 93 3d 0b 	sts	0x0B3D, r16	; 0x800b3d <sg_u64Time>
    1968:	10 93 3e 0b 	sts	0x0B3E, r17	; 0x800b3e <sg_u64Time+0x1>
    196c:	20 93 3f 0b 	sts	0x0B3F, r18	; 0x800b3f <sg_u64Time+0x2>
    1970:	30 93 40 0b 	sts	0x0B40, r19	; 0x800b40 <sg_u64Time+0x3>
    1974:	10 92 41 0b 	sts	0x0B41, r1	; 0x800b41 <sg_u64Time+0x4>
    1978:	10 92 42 0b 	sts	0x0B42, r1	; 0x800b42 <sg_u64Time+0x5>
    197c:	10 92 43 0b 	sts	0x0B43, r1	; 0x800b43 <sg_u64Time+0x6>
    1980:	10 92 44 0b 	sts	0x0B44, r1	; 0x800b44 <sg_u64Time+0x7>
    1984:	78 94       	sei
    1986:	87 b1       	in	r24, 0x07	; 7
    1988:	8e 7f       	andi	r24, 0xFE	; 254
    198a:	87 b9       	out	0x07, r24	; 7
    198c:	88 b1       	in	r24, 0x08	; 8
    198e:	81 60       	ori	r24, 0x01	; 1
    1990:	88 b9       	out	0x08, r24	; 8
    1992:	41 e0       	ldi	r20, 0x01	; 1
    1994:	be 01       	movw	r22, r28
    1996:	6f 5f       	subi	r22, 0xFF	; 255
    1998:	7f 4f       	sbci	r23, 0xFF	; 255
    199a:	87 e0       	ldi	r24, 0x07	; 7
    199c:	0e 94 48 1f 	call	0x3e90	; 0x3e90 <RTCReadRegisters>
    19a0:	18 2f       	mov	r17, r24
    19a2:	88 23       	and	r24, r24
    19a4:	59 f0       	breq	.+22     	; 0x19bc <RTCInit+0x208>
    19a6:	89 81       	ldd	r24, Y+1	; 0x01
    19a8:	80 64       	ori	r24, 0x40	; 64
    19aa:	89 83       	std	Y+1, r24	; 0x01
    19ac:	41 e0       	ldi	r20, 0x01	; 1
    19ae:	be 01       	movw	r22, r28
    19b0:	6f 5f       	subi	r22, 0xFF	; 255
    19b2:	7f 4f       	sbci	r23, 0xFF	; 255
    19b4:	87 e0       	ldi	r24, 0x07	; 7
    19b6:	0e 94 ab 20 	call	0x4156	; 0x4156 <RTCWriteRegisters>
    19ba:	18 2f       	mov	r17, r24
    19bc:	81 2f       	mov	r24, r17
    19be:	a1 96       	adiw	r28, 0x21	; 33
    19c0:	0f b6       	in	r0, 0x3f	; 63
    19c2:	f8 94       	cli
    19c4:	de bf       	out	0x3e, r29	; 62
    19c6:	0f be       	out	0x3f, r0	; 63
    19c8:	cd bf       	out	0x3d, r28	; 61
    19ca:	df 91       	pop	r29
    19cc:	cf 91       	pop	r28
    19ce:	1f 91       	pop	r17
    19d0:	0f 91       	pop	r16
    19d2:	ff 90       	pop	r15
    19d4:	08 95       	ret

Disassembly of section .text.SDSetCS:

00005124 <SDSetCS>:
static uint8_t sg_u8CSD[16];

// This will provide a !CS assertion or deassertion with pre/postamble clock
static void SDSetCS(bool bAsserted)
{
	if (bAsserted)
    5124:	88 23       	and	r24, r24
    5126:	21 f0       	breq	.+8      	; 0x5130 <SDSetCS+0xc>
	{
		SD_CS_ASSERT();
    5128:	88 b1       	in	r24, 0x08	; 8
    512a:	8f 7b       	andi	r24, 0xBF	; 191
    512c:	88 b9       	out	0x08, r24	; 8
    512e:	08 95       	ret
	}
	else
	{
		SD_CS_DEASSERT();
    5130:	88 b1       	in	r24, 0x08	; 8
    5132:	80 64       	ori	r24, 0x40	; 64
    5134:	88 b9       	out	0x08, r24	; 8
    5136:	08 95       	ret

Disassembly of section .text.SDPowerup:

000048c8 <SDPowerup>:

// Sends SD powerup sequence to card and attempts to initialize it
static void SDPowerup(void)
{
	// Set SPI baud rate to (SD_SPEED_SLOW, which is the max for the init sequence)
	(void) SPISetBaudRate(SD_SPEED_SLOW);
    48c8:	60 e8       	ldi	r22, 0x80	; 128
    48ca:	7a e1       	ldi	r23, 0x1A	; 26
    48cc:	86 e0       	ldi	r24, 0x06	; 6
    48ce:	90 e0       	ldi	r25, 0x00	; 0
    48d0:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <SPISetBaudRate>
	
	// Deassert chip select
	SD_CS_DEASSERT();
    48d4:	88 b1       	in	r24, 0x08	; 8
    48d6:	80 64       	ori	r24, 0x40	; 64
    48d8:	88 b9       	out	0x08, r24	; 8
	
	// Delay time after possible deassertion (2ms)
	Delay(2000);
    48da:	60 ed       	ldi	r22, 0xD0	; 208
    48dc:	77 e0       	ldi	r23, 0x07	; 7
    48de:	80 e0       	ldi	r24, 0x00	; 0
    48e0:	90 e0       	ldi	r25, 0x00	; 0
    48e2:	0e 94 fe 22 	call	0x45fc	; 0x45fc <Delay>
	
	// Send 74/80 bits of 0xff as a reset (80 bits required since we're byte-
	// sized transactions)
	SPIWritePattern(0xff,
    48e6:	40 e1       	ldi	r20, 0x10	; 16
    48e8:	50 e0       	ldi	r21, 0x00	; 0
    48ea:	6f ef       	ldi	r22, 0xFF	; 255
    48ec:	70 e0       	ldi	r23, 0x00	; 0
    48ee:	82 e0       	ldi	r24, 0x02	; 2
    48f0:	0e 94 d1 21 	call	0x43a2	; 0x43a2 <SPITransaction>
				    128/8);

	// Delay time after write
	Delay(2000);
    48f4:	60 ed       	ldi	r22, 0xD0	; 208
    48f6:	77 e0       	ldi	r23, 0x07	; 7
    48f8:	80 e0       	ldi	r24, 0x00	; 0
    48fa:	90 e0       	ldi	r25, 0x00	; 0
    48fc:	0e 94 fe 22 	call	0x45fc	; 0x45fc <Delay>
    4900:	08 95       	ret

Disassembly of section .text.SDCommand:

0000372c <SDCommand>:
#define CMD8_CRC    0x87

// Sends a command to the SD card, including argument an CRC
static uint8_t SDCommand(uint8_t u8Cmd,
						 uint32_t u32Arg)
{
    372c:	df 92       	push	r13
    372e:	ef 92       	push	r14
    3730:	ff 92       	push	r15
    3732:	0f 93       	push	r16
    3734:	1f 93       	push	r17
    3736:	cf 93       	push	r28
    3738:	df 93       	push	r29
    373a:	cd b7       	in	r28, 0x3d	; 61
    373c:	de b7       	in	r29, 0x3e	; 62
    373e:	27 97       	sbiw	r28, 0x07	; 7
    3740:	0f b6       	in	r0, 0x3f	; 63
    3742:	f8 94       	cli
    3744:	de bf       	out	0x3e, r29	; 62
    3746:	0f be       	out	0x3f, r0	; 63
    3748:	cd bf       	out	0x3d, r28	; 61
    374a:	18 2f       	mov	r17, r24
    374c:	04 2f       	mov	r16, r20
    374e:	f5 2e       	mov	r15, r21
    3750:	e6 2e       	mov	r14, r22
    3752:	d7 2e       	mov	r13, r23
	uint8_t u8Buffer[sizeof(u8Cmd) + sizeof(u32Arg) + sizeof(u8CRC)];
	uint8_t u8Response;
	uint8_t u8Count;
	
	// If this is an ACMD, prefix a CMD55
	if (u8Cmd & 0x80)
    3754:	88 23       	and	r24, r24
    3756:	4c f4       	brge	.+18     	; 0x376a <SDCommand+0x3e>
	{
		u8Response = SDCommand(CMD55,
    3758:	40 e0       	ldi	r20, 0x00	; 0
    375a:	50 e0       	ldi	r21, 0x00	; 0
    375c:	ba 01       	movw	r22, r20
    375e:	87 e3       	ldi	r24, 0x37	; 55
    3760:	0e 94 96 1b 	call	0x372c	; 0x372c <SDCommand>
    3764:	8f 83       	std	Y+7, r24	; 0x07
							   CMD55_ARG);
							   
		if (u8Response > 1)
    3766:	82 30       	cpi	r24, 0x02	; 2
    3768:	40 f5       	brcc	.+80     	; 0x37ba <SDCommand+0x8e>
			return(u8Response);
		}
	}
	
	// SD Command (OR in 0x40 so bit 47 is always a 1
	u8Buffer[0] = (u8Cmd & 0x7f) | 0x40;
    376a:	81 2f       	mov	r24, r17
    376c:	8f 73       	andi	r24, 0x3F	; 63
    376e:	80 64       	ori	r24, 0x40	; 64
    3770:	89 83       	std	Y+1, r24	; 0x01
	
	// 32 Bits of argument
	u8Buffer[1] = (uint8_t) (u32Arg >> 24);
    3772:	da 82       	std	Y+2, r13	; 0x02
	u8Buffer[2] = (uint8_t) (u32Arg >> 16);
    3774:	eb 82       	std	Y+3, r14	; 0x03
	u8Buffer[3] = (uint8_t) (u32Arg >> 8);
    3776:	fc 82       	std	Y+4, r15	; 0x04
	u8Buffer[4] = (uint8_t) (u32Arg >> 0);
    3778:	0d 83       	std	Y+5, r16	; 0x05
	
	// Valid CRCs for specific commands
	u8CRC = 0;
	if (CMD0 == u8Cmd)
    377a:	11 23       	and	r17, r17
    377c:	11 f0       	breq	.+4      	; 0x3782 <SDCommand+0x56>
	u8Buffer[2] = (uint8_t) (u32Arg >> 16);
	u8Buffer[3] = (uint8_t) (u32Arg >> 8);
	u8Buffer[4] = (uint8_t) (u32Arg >> 0);
	
	// Valid CRCs for specific commands
	u8CRC = 0;
    377e:	80 e0       	ldi	r24, 0x00	; 0
    3780:	01 c0       	rjmp	.+2      	; 0x3784 <SDCommand+0x58>
	if (CMD0 == u8Cmd)
	{
		u8CRC = 0x95;
    3782:	85 e9       	ldi	r24, 0x95	; 149
	}
	
	if (CMD8 == u8Cmd)
    3784:	18 30       	cpi	r17, 0x08	; 8
    3786:	09 f4       	brne	.+2      	; 0x378a <SDCommand+0x5e>
	{
		u8CRC = 0x87;
    3788:	87 e8       	ldi	r24, 0x87	; 135
	}
	
	// Now the CRC - Bit 0 means "ignore CRC"
	u8Buffer[5] = (uint8_t) (u8CRC | 0x01);
    378a:	81 60       	ori	r24, 0x01	; 1
    378c:	8e 83       	std	Y+6, r24	; 0x06
	
	// Send all bytes to the SD card
	SPIWrite(u8Buffer,
    378e:	46 e0       	ldi	r20, 0x06	; 6
    3790:	50 e0       	ldi	r21, 0x00	; 0
    3792:	be 01       	movw	r22, r28
    3794:	6f 5f       	subi	r22, 0xFF	; 255
    3796:	7f 4f       	sbci	r23, 0xFF	; 255
    3798:	81 e0       	ldi	r24, 0x01	; 1
    379a:	0e 94 d1 21 	call	0x43a2	; 0x43a2 <SPITransaction>
			 sizeof(u8Buffer));
			 
	u8Count = 10;
    379e:	1a e0       	ldi	r17, 0x0A	; 10
	
	do 
	{
		SPIRead(&u8Response,
    37a0:	41 e0       	ldi	r20, 0x01	; 1
    37a2:	50 e0       	ldi	r21, 0x00	; 0
    37a4:	be 01       	movw	r22, r28
    37a6:	69 5f       	subi	r22, 0xF9	; 249
    37a8:	7f 4f       	sbci	r23, 0xFF	; 255
    37aa:	83 e0       	ldi	r24, 0x03	; 3
    37ac:	0e 94 d1 21 	call	0x43a2	; 0x43a2 <SPITransaction>
				sizeof(u8Response));
	} while ((u8Response & 0x80) && --u8Count);
    37b0:	8f 81       	ldd	r24, Y+7	; 0x07
    37b2:	88 23       	and	r24, r24
    37b4:	14 f4       	brge	.+4      	; 0x37ba <SDCommand+0x8e>
    37b6:	11 50       	subi	r17, 0x01	; 1
    37b8:	99 f7       	brne	.-26     	; 0x37a0 <SDCommand+0x74>
	
	return(u8Response);
}
    37ba:	27 96       	adiw	r28, 0x07	; 7
    37bc:	0f b6       	in	r0, 0x3f	; 63
    37be:	f8 94       	cli
    37c0:	de bf       	out	0x3e, r29	; 62
    37c2:	0f be       	out	0x3f, r0	; 63
    37c4:	cd bf       	out	0x3d, r28	; 61
    37c6:	df 91       	pop	r29
    37c8:	cf 91       	pop	r28
    37ca:	1f 91       	pop	r17
    37cc:	0f 91       	pop	r16
    37ce:	ff 90       	pop	r15
    37d0:	ef 90       	pop	r14
    37d2:	df 90       	pop	r13
    37d4:	08 95       	ret

Disassembly of section .text.SDGoIdle:

00004fd0 <SDGoIdle>:
			sizeof(uint32_t));
}

// SD - Go idle!
static uint8_t SDGoIdle(uint8_t *pu8Response)
{
    4fd0:	cf 93       	push	r28
	uint8_t u8Response;
	
	SDSetCS(true);
    4fd2:	81 e0       	ldi	r24, 0x01	; 1
    4fd4:	0e 94 92 28 	call	0x5124	; 0x5124 <SDSetCS>
	
	// Send our CMD0 (go idle)
	u8Response = SDCommand(CMD0,
    4fd8:	40 e0       	ldi	r20, 0x00	; 0
    4fda:	50 e0       	ldi	r21, 0x00	; 0
    4fdc:	ba 01       	movw	r22, r20
    4fde:	80 e0       	ldi	r24, 0x00	; 0
    4fe0:	0e 94 96 1b 	call	0x372c	; 0x372c <SDCommand>
    4fe4:	c8 2f       	mov	r28, r24
						   CMD0_ARG);
						   
	SDSetCS(false);
    4fe6:	80 e0       	ldi	r24, 0x00	; 0
    4fe8:	0e 94 92 28 	call	0x5124	; 0x5124 <SDSetCS>

	return(u8Response);
}
    4fec:	8c 2f       	mov	r24, r28
    4fee:	cf 91       	pop	r28
    4ff0:	08 95       	ret

Disassembly of section .text.SDSendOpCondition:

000049da <SDSendOpCondition>:
#define ACMD41_CRC  0x00

// Send operation condition
static uint8_t SDSendOpCondition(uint8_t *pu8Response,
								 uint32_t u32Arg)
{
    49da:	cf 92       	push	r12
    49dc:	df 92       	push	r13
    49de:	ef 92       	push	r14
    49e0:	ff 92       	push	r15
    49e2:	cf 93       	push	r28
    49e4:	6a 01       	movw	r12, r20
    49e6:	7b 01       	movw	r14, r22
	uint8_t u8Response;
	
	// Assert chip select
	SDSetCS(true);
    49e8:	81 e0       	ldi	r24, 0x01	; 1
    49ea:	0e 94 92 28 	call	0x5124	; 0x5124 <SDSetCS>
	
	// Send the app command
	u8Response = SDCommand(ACMD41,
    49ee:	b7 01       	movw	r22, r14
    49f0:	a6 01       	movw	r20, r12
    49f2:	89 ea       	ldi	r24, 0xA9	; 169
    49f4:	0e 94 96 1b 	call	0x372c	; 0x372c <SDCommand>
    49f8:	c8 2f       	mov	r28, r24
						   u32Arg);
	// Deassert chip select
	SDSetCS(false);
    49fa:	80 e0       	ldi	r24, 0x00	; 0
    49fc:	0e 94 92 28 	call	0x5124	; 0x5124 <SDSetCS>
	
	return(u8Response);
}
    4a00:	8c 2f       	mov	r24, r28
    4a02:	cf 91       	pop	r28
    4a04:	ff 90       	pop	r15
    4a06:	ef 90       	pop	r14
    4a08:	df 90       	pop	r13
    4a0a:	cf 90       	pop	r12
    4a0c:	08 95       	ret

Disassembly of section .text.SDSendOpConditionArg:

00004452 <SDSendOpConditionArg>:
	return(u8Response);
}

static uint8_t SDSendOpConditionArg(uint8_t *pu8Resp,
									uint32_t u32Arg)
{
    4452:	cf 92       	push	r12
    4454:	df 92       	push	r13
    4456:	ef 92       	push	r14
    4458:	ff 92       	push	r15
    445a:	0f 93       	push	r16
    445c:	1f 93       	push	r17
    445e:	cf 93       	push	r28
    4460:	df 93       	push	r29
    4462:	8c 01       	movw	r16, r24
    4464:	6a 01       	movw	r12, r20
    4466:	7b 01       	movw	r14, r22
	uint8_t u8Attempts;
	uint8_t u8Response;
	
	u8Attempts = 0;
    4468:	c0 e0       	ldi	r28, 0x00	; 0
		
	// Loop until it comes alive - if it comes alive. Put the card in idle state.
	while (u8Attempts < SD_GO_IDLE_RETRIES)
    446a:	0f c0       	rjmp	.+30     	; 0x448a <SDSendOpConditionArg+0x38>
	{
		u8Response = SDSendOpCondition(pu8Resp,
    446c:	b7 01       	movw	r22, r14
    446e:	a6 01       	movw	r20, r12
    4470:	c8 01       	movw	r24, r16
    4472:	0e 94 ed 24 	call	0x49da	; 0x49da <SDSendOpCondition>
    4476:	d8 2f       	mov	r29, r24
									   u32Arg);
		if (0 == u8Response)
    4478:	88 23       	and	r24, r24
    447a:	49 f0       	breq	.+18     	; 0x448e <SDSendOpConditionArg+0x3c>
		{
			break;
		}
			
		// Give it a little time to settle
		Delay(10000);
    447c:	60 e1       	ldi	r22, 0x10	; 16
    447e:	77 e2       	ldi	r23, 0x27	; 39
    4480:	80 e0       	ldi	r24, 0x00	; 0
    4482:	90 e0       	ldi	r25, 0x00	; 0
    4484:	0e 94 fe 22 	call	0x45fc	; 0x45fc <Delay>
		u8Attempts++;
    4488:	cf 5f       	subi	r28, 0xFF	; 255
	uint8_t u8Response;
	
	u8Attempts = 0;
		
	// Loop until it comes alive - if it comes alive. Put the card in idle state.
	while (u8Attempts < SD_GO_IDLE_RETRIES)
    448a:	c4 36       	cpi	r28, 0x64	; 100
    448c:	78 f3       	brcs	.-34     	; 0x446c <SDSendOpConditionArg+0x1a>
		Delay(10000);
		u8Attempts++;
	}

	// If we've retried too much, bail out. We're done.
	if (SD_GO_IDLE_RETRIES == u8Attempts)
    448e:	c4 36       	cpi	r28, 0x64	; 100
    4490:	09 f4       	brne	.+2      	; 0x4494 <SDSendOpConditionArg+0x42>
	{
		u8Response = 0x80;
    4492:	d0 e8       	ldi	r29, 0x80	; 128
	}
	
	return(u8Response);
}
    4494:	8d 2f       	mov	r24, r29
    4496:	df 91       	pop	r29
    4498:	cf 91       	pop	r28
    449a:	1f 91       	pop	r17
    449c:	0f 91       	pop	r16
    449e:	ff 90       	pop	r15
    44a0:	ef 90       	pop	r14
    44a2:	df 90       	pop	r13
    44a4:	cf 90       	pop	r12
    44a6:	08 95       	ret

Disassembly of section .text.SDWaitResponse7:

00005202 <SDWaitResponse7>:

// This will return true if a response 7 was received, otherwise false
static void SDWaitResponse7(uint8_t *pu8ResponseByte)
{
	// Go read the remaining 4 bytes
	SPIRead(pu8ResponseByte,
    5202:	44 e0       	ldi	r20, 0x04	; 4
    5204:	50 e0       	ldi	r21, 0x00	; 0
    5206:	bc 01       	movw	r22, r24
    5208:	83 e0       	ldi	r24, 0x03	; 3
    520a:	0e 94 d1 21 	call	0x43a2	; 0x43a2 <SPITransaction>
    520e:	08 95       	ret

Disassembly of section .text.SDSendInterfaceCondition:

00004a0e <SDSendInterfaceCondition>:
	return(u8Response);
}

// Send interface condition
static uint8_t SDSendInterfaceCondition(uint8_t *pu8Response)
{
    4a0e:	0f 93       	push	r16
    4a10:	1f 93       	push	r17
    4a12:	cf 93       	push	r28
    4a14:	8c 01       	movw	r16, r24
	uint8_t u8Response;
	
	SDSetCS(true);
    4a16:	81 e0       	ldi	r24, 0x01	; 1
    4a18:	0e 94 92 28 	call	0x5124	; 0x5124 <SDSetCS>
	
	// Send our CMD8 Send interface condition
	u8Response = SDCommand(CMD8,
    4a1c:	4a ea       	ldi	r20, 0xAA	; 170
    4a1e:	51 e0       	ldi	r21, 0x01	; 1
    4a20:	60 e0       	ldi	r22, 0x00	; 0
    4a22:	70 e0       	ldi	r23, 0x00	; 0
    4a24:	88 e0       	ldi	r24, 0x08	; 8
    4a26:	0e 94 96 1b 	call	0x372c	; 0x372c <SDCommand>
    4a2a:	c8 2f       	mov	r28, r24
						   CMD8_ARG);
						   
	SDWaitResponse7(pu8Response);
    4a2c:	c8 01       	movw	r24, r16
    4a2e:	0e 94 01 29 	call	0x5202	; 0x5202 <SDWaitResponse7>
		
	SDSetCS(false);
    4a32:	80 e0       	ldi	r24, 0x00	; 0
    4a34:	0e 94 92 28 	call	0x5124	; 0x5124 <SDSetCS>

	return(u8Response);
}
    4a38:	8c 2f       	mov	r24, r28
    4a3a:	cf 91       	pop	r28
    4a3c:	1f 91       	pop	r17
    4a3e:	0f 91       	pop	r16
    4a40:	08 95       	ret

Disassembly of section .text.SDReadOCR:

00004a42 <SDReadOCR>:
#define CMD58_ARG   0x00000000
#define CMD58_CRC   0x00

// Go read the OCR
static uint8_t SDReadOCR(uint8_t *pu8Response)
{
    4a42:	0f 93       	push	r16
    4a44:	1f 93       	push	r17
    4a46:	cf 93       	push	r28
    4a48:	8c 01       	movw	r16, r24
	uint8_t u8Response;
	
	// Assert chip select
	SDSetCS(true);
    4a4a:	81 e0       	ldi	r24, 0x01	; 1
    4a4c:	0e 94 92 28 	call	0x5124	; 0x5124 <SDSetCS>
	
	// Send the app command
	u8Response = SDCommand(CMD58,
    4a50:	40 e0       	ldi	r20, 0x00	; 0
    4a52:	50 e0       	ldi	r21, 0x00	; 0
    4a54:	ba 01       	movw	r22, r20
    4a56:	8a e3       	ldi	r24, 0x3A	; 58
    4a58:	0e 94 96 1b 	call	0x372c	; 0x372c <SDCommand>
    4a5c:	c8 2f       	mov	r28, r24
						   CMD58_ARG);

	// Read response
	SDWaitResponse7(pu8Response);
    4a5e:	c8 01       	movw	r24, r16
    4a60:	0e 94 01 29 	call	0x5202	; 0x5202 <SDWaitResponse7>

	// Deassert chip select
	SDSetCS(false);
    4a64:	80 e0       	ldi	r24, 0x00	; 0
    4a66:	0e 94 92 28 	call	0x5124	; 0x5124 <SDSetCS>
	
	return(u8Response);
}
    4a6a:	8c 2f       	mov	r24, r28
    4a6c:	cf 91       	pop	r28
    4a6e:	1f 91       	pop	r17
    4a70:	0f 91       	pop	r16
    4a72:	08 95       	ret

Disassembly of section .text.SDReadCSD:

00003f8a <SDReadCSD>:
#define CMD9_ARG    0x000000000
#define CMD9_CRC    0x00

// Read CSD (card specific data) - CSD is 128 bits - see the SD spec for details.
static uint8_t SDReadCSD(uint8_t *pu8CSD)
{
    3f8a:	ef 92       	push	r14
    3f8c:	ff 92       	push	r15
    3f8e:	0f 93       	push	r16
    3f90:	1f 93       	push	r17
    3f92:	cf 93       	push	r28
    3f94:	df 93       	push	r29
    3f96:	0f 92       	push	r0
    3f98:	cd b7       	in	r28, 0x3d	; 61
    3f9a:	de b7       	in	r29, 0x3e	; 62
    3f9c:	7c 01       	movw	r14, r24
	uint8_t u8Response;
	uint8_t u8CmdResponse;
	uint8_t u8Count = 8;
	
	SDSetCS(true);
    3f9e:	81 e0       	ldi	r24, 0x01	; 1
    3fa0:	0e 94 92 28 	call	0x5124	; 0x5124 <SDSetCS>
	
	// Send our CMD9 (read CSD)
	u8CmdResponse = SDCommand(CMD9,
    3fa4:	40 e0       	ldi	r20, 0x00	; 0
    3fa6:	50 e0       	ldi	r21, 0x00	; 0
    3fa8:	ba 01       	movw	r22, r20
    3faa:	89 e0       	ldi	r24, 0x09	; 9
    3fac:	0e 94 96 1b 	call	0x372c	; 0x372c <SDCommand>
    3fb0:	08 2f       	mov	r16, r24
							  CMD9_ARG);
	
	// Success! Let's get a response
	if (u8CmdResponse)
    3fb2:	81 11       	cpse	r24, r1
    3fb4:	1c c0       	rjmp	.+56     	; 0x3fee <SDReadCSD+0x64>
    3fb6:	18 e0       	ldi	r17, 0x08	; 8
    3fb8:	01 c0       	rjmp	.+2      	; 0x3fbc <SDReadCSD+0x32>
	do 
	{
		SPIRead(&u8Response,
			    sizeof(u8Response));
	} while ((u8Response != SD_START_TOKEN) &&
			 (u8Count--));
    3fba:	18 2f       	mov	r17, r24
	}
	
	// Wait until SD_START_TOKEN (start of data sector). We should easily see it in a few bytes.
	do 
	{
		SPIRead(&u8Response,
    3fbc:	41 e0       	ldi	r20, 0x01	; 1
    3fbe:	50 e0       	ldi	r21, 0x00	; 0
    3fc0:	be 01       	movw	r22, r28
    3fc2:	6f 5f       	subi	r22, 0xFF	; 255
    3fc4:	7f 4f       	sbci	r23, 0xFF	; 255
    3fc6:	83 e0       	ldi	r24, 0x03	; 3
    3fc8:	0e 94 d1 21 	call	0x43a2	; 0x43a2 <SPITransaction>
			    sizeof(u8Response));
	} while ((u8Response != SD_START_TOKEN) &&
    3fcc:	89 81       	ldd	r24, Y+1	; 0x01
			 (u8Count--));
    3fce:	8e 3f       	cpi	r24, 0xFE	; 254
    3fd0:	29 f0       	breq	.+10     	; 0x3fdc <SDReadCSD+0x52>
    3fd2:	8f ef       	ldi	r24, 0xFF	; 255
    3fd4:	81 0f       	add	r24, r17
	// Wait until SD_START_TOKEN (start of data sector). We should easily see it in a few bytes.
	do 
	{
		SPIRead(&u8Response,
			    sizeof(u8Response));
	} while ((u8Response != SD_START_TOKEN) &&
    3fd6:	11 11       	cpse	r17, r1
    3fd8:	f0 cf       	rjmp	.-32     	; 0x3fba <SDReadCSD+0x30>
    3fda:	01 c0       	rjmp	.+2      	; 0x3fde <SDReadCSD+0x54>
    3fdc:	81 2f       	mov	r24, r17
			 (u8Count--));
			 
	// If we haven't seen it in u8Count bytes, then error the call
	if (0 == u8Count)
    3fde:	88 23       	and	r24, r24
    3fe0:	31 f0       	breq	.+12     	; 0x3fee <SDReadCSD+0x64>
	{
		goto errorExit;
	}
	
	// Go read the remaining 16 bytes
	SPIRead(pu8CSD,
    3fe2:	40 e1       	ldi	r20, 0x10	; 16
    3fe4:	50 e0       	ldi	r21, 0x00	; 0
    3fe6:	b7 01       	movw	r22, r14
    3fe8:	83 e0       	ldi	r24, 0x03	; 3
    3fea:	0e 94 d1 21 	call	0x43a2	; 0x43a2 <SPITransaction>
		    16);
	
errorExit:	
	SDSetCS(false);
    3fee:	80 e0       	ldi	r24, 0x00	; 0
    3ff0:	0e 94 92 28 	call	0x5124	; 0x5124 <SDSetCS>
	return(u8CmdResponse);
	
}
    3ff4:	80 2f       	mov	r24, r16
    3ff6:	0f 90       	pop	r0
    3ff8:	df 91       	pop	r29
    3ffa:	cf 91       	pop	r28
    3ffc:	1f 91       	pop	r17
    3ffe:	0f 91       	pop	r16
    4000:	ff 90       	pop	r15
    4002:	ef 90       	pop	r14
    4004:	08 95       	ret

Disassembly of section .text.SDReceiveDataBlock:

00003b72 <SDReceiveDataBlock>:
}

// Receives a datablock during the data phase which may take some time
static bool SDReceiveDataBlock(uint8_t *pu8Buffer,
							   uint16_t u16RXCount)
{
    3b72:	cf 92       	push	r12
    3b74:	df 92       	push	r13
    3b76:	ef 92       	push	r14
    3b78:	ff 92       	push	r15
    3b7a:	0f 93       	push	r16
    3b7c:	1f 93       	push	r17
    3b7e:	cf 93       	push	r28
    3b80:	df 93       	push	r29
    3b82:	0f 92       	push	r0
    3b84:	cd b7       	in	r28, 0x3d	; 61
    3b86:	de b7       	in	r29, 0x3e	; 62
    3b88:	7c 01       	movw	r14, r24
    3b8a:	6b 01       	movw	r12, r22
	uint8_t u8Response;
	uint16_t u16Count = 4096;
    3b8c:	00 e0       	ldi	r16, 0x00	; 0
    3b8e:	10 e1       	ldi	r17, 0x10	; 16
    3b90:	01 c0       	rjmp	.+2      	; 0x3b94 <SDReceiveDataBlock+0x22>
	{
		SPIRead(&u8Response,
				sizeof(u8Response));
	} 
	while ((u8Response != SD_START_TOKEN) &&
		   (u16Count--));
    3b92:	89 01       	movw	r16, r18
	uint16_t u16Count = 4096;
	
	// Wait for response token
	do 
	{
		SPIRead(&u8Response,
    3b94:	41 e0       	ldi	r20, 0x01	; 1
    3b96:	50 e0       	ldi	r21, 0x00	; 0
    3b98:	be 01       	movw	r22, r28
    3b9a:	6f 5f       	subi	r22, 0xFF	; 255
    3b9c:	7f 4f       	sbci	r23, 0xFF	; 255
    3b9e:	83 e0       	ldi	r24, 0x03	; 3
    3ba0:	0e 94 d1 21 	call	0x43a2	; 0x43a2 <SPITransaction>
				sizeof(u8Response));
	} 
	while ((u8Response != SD_START_TOKEN) &&
    3ba4:	89 81       	ldd	r24, Y+1	; 0x01
		   (u16Count--));
    3ba6:	8e 3f       	cpi	r24, 0xFE	; 254
    3ba8:	29 f0       	breq	.+10     	; 0x3bb4 <SDReceiveDataBlock+0x42>
    3baa:	98 01       	movw	r18, r16
    3bac:	21 50       	subi	r18, 0x01	; 1
    3bae:	31 09       	sbc	r19, r1
	do 
	{
		SPIRead(&u8Response,
				sizeof(u8Response));
	} 
	while ((u8Response != SD_START_TOKEN) &&
    3bb0:	01 2b       	or	r16, r17
    3bb2:	79 f7       	brne	.-34     	; 0x3b92 <SDReceiveDataBlock+0x20>
		   (u16Count--));
		   
	if (u8Response != SD_START_TOKEN)
    3bb4:	8e 3f       	cpi	r24, 0xFE	; 254
    3bb6:	b9 f4       	brne	.+46     	; 0x3be6 <SDReceiveDataBlock+0x74>
	{
		return(false);
	}
	
	// Start of data. Pull it down.
	SPIRead(pu8Buffer,
    3bb8:	a6 01       	movw	r20, r12
    3bba:	b7 01       	movw	r22, r14
    3bbc:	83 e0       	ldi	r24, 0x03	; 3
    3bbe:	0e 94 d1 21 	call	0x43a2	; 0x43a2 <SPITransaction>
			u16RXCount);
			
	// Discard CRC
	SPIRead(&u8Response,
    3bc2:	41 e0       	ldi	r20, 0x01	; 1
    3bc4:	50 e0       	ldi	r21, 0x00	; 0
    3bc6:	be 01       	movw	r22, r28
    3bc8:	6f 5f       	subi	r22, 0xFF	; 255
    3bca:	7f 4f       	sbci	r23, 0xFF	; 255
    3bcc:	83 e0       	ldi	r24, 0x03	; 3
    3bce:	0e 94 d1 21 	call	0x43a2	; 0x43a2 <SPITransaction>
			sizeof(u8Response));
	SPIRead(&u8Response,
    3bd2:	41 e0       	ldi	r20, 0x01	; 1
    3bd4:	50 e0       	ldi	r21, 0x00	; 0
    3bd6:	be 01       	movw	r22, r28
    3bd8:	6f 5f       	subi	r22, 0xFF	; 255
    3bda:	7f 4f       	sbci	r23, 0xFF	; 255
    3bdc:	83 e0       	ldi	r24, 0x03	; 3
    3bde:	0e 94 d1 21 	call	0x43a2	; 0x43a2 <SPITransaction>
			sizeof(u8Response));
	return(true);			   
    3be2:	81 e0       	ldi	r24, 0x01	; 1
    3be4:	01 c0       	rjmp	.+2      	; 0x3be8 <SDReceiveDataBlock+0x76>
	while ((u8Response != SD_START_TOKEN) &&
		   (u16Count--));
		   
	if (u8Response != SD_START_TOKEN)
	{
		return(false);
    3be6:	80 e0       	ldi	r24, 0x00	; 0
	SPIRead(&u8Response,
			sizeof(u8Response));
	SPIRead(&u8Response,
			sizeof(u8Response));
	return(true);			   
}
    3be8:	0f 90       	pop	r0
    3bea:	df 91       	pop	r29
    3bec:	cf 91       	pop	r28
    3bee:	1f 91       	pop	r17
    3bf0:	0f 91       	pop	r16
    3bf2:	ff 90       	pop	r15
    3bf4:	ef 90       	pop	r14
    3bf6:	df 90       	pop	r13
    3bf8:	cf 90       	pop	r12
    3bfa:	08 95       	ret

Disassembly of section .text.SDTransmitDataBlock:

00003448 <SDTransmitDataBlock>:

// Transmits a datablock during the data phase which may take some time
static bool SDTransmitDataBlock(uint8_t *pu8Buffer,
							    uint16_t u16TXCount,
								uint8_t u8DataPhaseToken)
{
    3448:	ef 92       	push	r14
    344a:	ff 92       	push	r15
    344c:	0f 93       	push	r16
    344e:	1f 93       	push	r17
    3450:	cf 93       	push	r28
    3452:	df 93       	push	r29
    3454:	00 d0       	rcall	.+0      	; 0x3456 <SDTransmitDataBlock+0xe>
    3456:	cd b7       	in	r28, 0x3d	; 61
    3458:	de b7       	in	r29, 0x3e	; 62
    345a:	8c 01       	movw	r16, r24
    345c:	7b 01       	movw	r14, r22
    345e:	4a 83       	std	Y+2, r20	; 0x02
	uint8_t u8Response;
	uint16_t u16Attempts;
	bool bResult = true;

	// Send the data phase token (whatever it is)
	SPIWrite(&u8DataPhaseToken,
    3460:	41 e0       	ldi	r20, 0x01	; 1
    3462:	50 e0       	ldi	r21, 0x00	; 0
    3464:	be 01       	movw	r22, r28
    3466:	6e 5f       	subi	r22, 0xFE	; 254
    3468:	7f 4f       	sbci	r23, 0xFF	; 255
    346a:	81 e0       	ldi	r24, 0x01	; 1
    346c:	0e 94 d1 21 	call	0x43a2	; 0x43a2 <SPITransaction>
			 sizeof(u8DataPhaseToken));
	
	if (u8DataPhaseToken != SD_STOP_TRANSACTION)
    3470:	8a 81       	ldd	r24, Y+2	; 0x02
    3472:	8d 3f       	cpi	r24, 0xFD	; 253
    3474:	e1 f1       	breq	.+120    	; 0x34ee <SDTransmitDataBlock+0xa6>
	{
		// As long as we're not stopping a transaction, we're writing data
		SPIWrite(pu8Buffer,
    3476:	a7 01       	movw	r20, r14
    3478:	b8 01       	movw	r22, r16
    347a:	81 e0       	ldi	r24, 0x01	; 1
    347c:	0e 94 d1 21 	call	0x43a2	; 0x43a2 <SPITransaction>
				 u16TXCount);
				 
		// Wait for acceptance of the sector
		u16Attempts = 0;
    3480:	00 e0       	ldi	r16, 0x00	; 0
    3482:	10 e0       	ldi	r17, 0x00	; 0
		while (u16Attempts < SD_MAX_WRITE_ATTEMPTS)
    3484:	0d c0       	rjmp	.+26     	; 0x34a0 <SDTransmitDataBlock+0x58>
		{
			// Get some data
			SPIRead(&u8Response,
    3486:	41 e0       	ldi	r20, 0x01	; 1
    3488:	50 e0       	ldi	r21, 0x00	; 0
    348a:	be 01       	movw	r22, r28
    348c:	6f 5f       	subi	r22, 0xFF	; 255
    348e:	7f 4f       	sbci	r23, 0xFF	; 255
    3490:	83 e0       	ldi	r24, 0x03	; 3
    3492:	0e 94 d1 21 	call	0x43a2	; 0x43a2 <SPITransaction>
					sizeof(u8Response));
			if (u8Response != 0xff)
    3496:	89 81       	ldd	r24, Y+1	; 0x01
    3498:	8f 3f       	cpi	r24, 0xFF	; 255
    349a:	31 f4       	brne	.+12     	; 0x34a8 <SDTransmitDataBlock+0x60>
			{
				break;
			}
				
			++u16Attempts;
    349c:	0f 5f       	subi	r16, 0xFF	; 255
    349e:	1f 4f       	sbci	r17, 0xFF	; 255
		SPIWrite(pu8Buffer,
				 u16TXCount);
				 
		// Wait for acceptance of the sector
		u16Attempts = 0;
		while (u16Attempts < SD_MAX_WRITE_ATTEMPTS)
    34a0:	0e 39       	cpi	r16, 0x9E	; 158
    34a2:	88 e9       	ldi	r24, 0x98	; 152
    34a4:	18 07       	cpc	r17, r24
    34a6:	78 f3       	brcs	.-34     	; 0x3486 <SDTransmitDataBlock+0x3e>
				
			++u16Attempts;
		}
			
		// We've timed out or else the card is dead
		if (SD_MAX_WRITE_ATTEMPTS == u16Attempts)
    34a8:	0e 39       	cpi	r16, 0x9E	; 158
    34aa:	18 49       	sbci	r17, 0x98	; 152
    34ac:	11 f1       	breq	.+68     	; 0x34f2 <SDTransmitDataBlock+0xaa>
			bResult = false;
			goto errorExit;
		}
			
		// See if the data was accepted
		u8Response &= 0x1f;
    34ae:	89 81       	ldd	r24, Y+1	; 0x01
    34b0:	8f 71       	andi	r24, 0x1F	; 31
    34b2:	89 83       	std	Y+1, r24	; 0x01
		if (0x05 == u8Response)
    34b4:	85 30       	cpi	r24, 0x05	; 5
    34b6:	81 f0       	breq	.+32     	; 0x34d8 <SDTransmitDataBlock+0x90>
			// Success!
		}
		else
		{
			// Sector not accepted
			bResult = false;
    34b8:	80 e0       	ldi	r24, 0x00	; 0
    34ba:	1e c0       	rjmp	.+60     	; 0x34f8 <SDTransmitDataBlock+0xb0>
			// Wait for the write to finish
			u16Attempts = 0;
			while (u16Attempts < SD_MAX_WRITE_ATTEMPTS)
			{
				// Wait for the card to accept writing the sector
				SPIRead(&u8Response,
    34bc:	41 e0       	ldi	r20, 0x01	; 1
    34be:	50 e0       	ldi	r21, 0x00	; 0
    34c0:	be 01       	movw	r22, r28
    34c2:	6f 5f       	subi	r22, 0xFF	; 255
    34c4:	7f 4f       	sbci	r23, 0xFF	; 255
    34c6:	83 e0       	ldi	r24, 0x03	; 3
    34c8:	0e 94 d1 21 	call	0x43a2	; 0x43a2 <SPITransaction>
						sizeof(u8Response));
				if (u8Response)
    34cc:	89 81       	ldd	r24, Y+1	; 0x01
    34ce:	81 11       	cpse	r24, r1
    34d0:	09 c0       	rjmp	.+18     	; 0x34e4 <SDTransmitDataBlock+0x9c>
				{
					break;
				}
					
				++u16Attempts;
    34d2:	0f 5f       	subi	r16, 0xFF	; 255
    34d4:	1f 4f       	sbci	r17, 0xFF	; 255
    34d6:	02 c0       	rjmp	.+4      	; 0x34dc <SDTransmitDataBlock+0x94>
    34d8:	00 e0       	ldi	r16, 0x00	; 0
    34da:	10 e0       	ldi	r17, 0x00	; 0
		u8Response &= 0x1f;
		if (0x05 == u8Response)
		{
			// Wait for the write to finish
			u16Attempts = 0;
			while (u16Attempts < SD_MAX_WRITE_ATTEMPTS)
    34dc:	0e 39       	cpi	r16, 0x9E	; 158
    34de:	88 e9       	ldi	r24, 0x98	; 152
    34e0:	18 07       	cpc	r17, r24
    34e2:	60 f3       	brcs	.-40     	; 0x34bc <SDTransmitDataBlock+0x74>
				}
					
				++u16Attempts;
			}
				
			if (SD_MAX_WRITE_ATTEMPTS == u16Attempts)
    34e4:	0e 39       	cpi	r16, 0x9E	; 158
    34e6:	18 49       	sbci	r17, 0x98	; 152
    34e8:	31 f0       	breq	.+12     	; 0x34f6 <SDTransmitDataBlock+0xae>
							    uint16_t u16TXCount,
								uint8_t u8DataPhaseToken)
{
	uint8_t u8Response;
	uint16_t u16Attempts;
	bool bResult = true;
    34ea:	81 e0       	ldi	r24, 0x01	; 1
    34ec:	05 c0       	rjmp	.+10     	; 0x34f8 <SDTransmitDataBlock+0xb0>
    34ee:	81 e0       	ldi	r24, 0x01	; 1
    34f0:	03 c0       	rjmp	.+6      	; 0x34f8 <SDTransmitDataBlock+0xb0>
		}
			
		// We've timed out or else the card is dead
		if (SD_MAX_WRITE_ATTEMPTS == u16Attempts)
		{
			bResult = false;
    34f2:	80 e0       	ldi	r24, 0x00	; 0
    34f4:	01 c0       	rjmp	.+2      	; 0x34f8 <SDTransmitDataBlock+0xb0>
				++u16Attempts;
			}
				
			if (SD_MAX_WRITE_ATTEMPTS == u16Attempts)
			{
				bResult = false;
    34f6:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	
errorExit:
	return(bResult);
}
    34f8:	0f 90       	pop	r0
    34fa:	0f 90       	pop	r0
    34fc:	df 91       	pop	r29
    34fe:	cf 91       	pop	r28
    3500:	1f 91       	pop	r17
    3502:	0f 91       	pop	r16
    3504:	ff 90       	pop	r15
    3506:	ef 90       	pop	r14
    3508:	08 95       	ret

Disassembly of section .text.SDInit:

000022aa <SDInit>:

bool SDGetBlockSize(uint32_t *pu32BlockSize)
{
	*pu32BlockSize = sg_u16BlockSize;
	return(true);
}
    22aa:	1f 93       	push	r17
    22ac:	cf 93       	push	r28
    22ae:	df 93       	push	r29
    22b0:	00 d0       	rcall	.+0      	; 0x22b2 <SDInit+0x8>
    22b2:	00 d0       	rcall	.+0      	; 0x22b4 <SDInit+0xa>
    22b4:	0f 92       	push	r0
    22b6:	cd b7       	in	r28, 0x3d	; 61
    22b8:	de b7       	in	r29, 0x3e	; 62
    22ba:	87 b1       	in	r24, 0x07	; 7
    22bc:	80 64       	ori	r24, 0x40	; 64
    22be:	87 b9       	out	0x07, r24	; 7
    22c0:	88 b1       	in	r24, 0x08	; 8
    22c2:	80 64       	ori	r24, 0x40	; 64
    22c4:	88 b9       	out	0x08, r24	; 8
    22c6:	88 b1       	in	r24, 0x08	; 8
    22c8:	80 64       	ori	r24, 0x40	; 64
    22ca:	88 b9       	out	0x08, r24	; 8
    22cc:	0e 94 f2 25 	call	0x4be4	; 0x4be4 <SPIInit>
    22d0:	0e 94 64 24 	call	0x48c8	; 0x48c8 <SDPowerup>
    22d4:	10 e0       	ldi	r17, 0x00	; 0
    22d6:	0d c0       	rjmp	.+26     	; 0x22f2 <SDInit+0x48>
    22d8:	ce 01       	movw	r24, r28
    22da:	01 96       	adiw	r24, 0x01	; 1
    22dc:	0e 94 e8 27 	call	0x4fd0	; 0x4fd0 <SDGoIdle>
    22e0:	81 30       	cpi	r24, 0x01	; 1
    22e2:	49 f0       	breq	.+18     	; 0x22f6 <SDInit+0x4c>
    22e4:	60 e1       	ldi	r22, 0x10	; 16
    22e6:	77 e2       	ldi	r23, 0x27	; 39
    22e8:	80 e0       	ldi	r24, 0x00	; 0
    22ea:	90 e0       	ldi	r25, 0x00	; 0
    22ec:	0e 94 fe 22 	call	0x45fc	; 0x45fc <Delay>
    22f0:	1f 5f       	subi	r17, 0xFF	; 255
    22f2:	14 36       	cpi	r17, 0x64	; 100
    22f4:	88 f3       	brcs	.-30     	; 0x22d8 <SDInit+0x2e>
    22f6:	14 36       	cpi	r17, 0x64	; 100
    22f8:	09 f4       	brne	.+2      	; 0x22fc <SDInit+0x52>
    22fa:	76 c0       	rjmp	.+236    	; 0x23e8 <SDInit+0x13e>
    22fc:	ce 01       	movw	r24, r28
    22fe:	01 96       	adiw	r24, 0x01	; 1
    2300:	25 e0       	ldi	r18, 0x05	; 5
    2302:	fc 01       	movw	r30, r24
    2304:	11 92       	st	Z+, r1
    2306:	2a 95       	dec	r18
    2308:	e9 f7       	brne	.-6      	; 0x2304 <SDInit+0x5a>
    230a:	0e 94 07 25 	call	0x4a0e	; 0x4a0e <SDSendInterfaceCondition>
    230e:	81 30       	cpi	r24, 0x01	; 1
    2310:	09 f0       	breq	.+2      	; 0x2314 <SDInit+0x6a>
    2312:	5e c0       	rjmp	.+188    	; 0x23d0 <SDInit+0x126>
    2314:	8c 81       	ldd	r24, Y+4	; 0x04
    2316:	8a 3a       	cpi	r24, 0xAA	; 170
    2318:	09 f0       	breq	.+2      	; 0x231c <SDInit+0x72>
    231a:	68 c0       	rjmp	.+208    	; 0x23ec <SDInit+0x142>
    231c:	40 e0       	ldi	r20, 0x00	; 0
    231e:	50 e0       	ldi	r21, 0x00	; 0
    2320:	60 e0       	ldi	r22, 0x00	; 0
    2322:	70 e4       	ldi	r23, 0x40	; 64
    2324:	ce 01       	movw	r24, r28
    2326:	01 96       	adiw	r24, 0x01	; 1
    2328:	0e 94 29 22 	call	0x4452	; 0x4452 <SDSendOpConditionArg>
    232c:	81 11       	cpse	r24, r1
    232e:	60 c0       	rjmp	.+192    	; 0x23f0 <SDInit+0x146>
    2330:	ce 01       	movw	r24, r28
    2332:	01 96       	adiw	r24, 0x01	; 1
    2334:	0e 94 21 25 	call	0x4a42	; 0x4a42 <SDReadOCR>
    2338:	88 23       	and	r24, r24
    233a:	0c f4       	brge	.+2      	; 0x233e <SDInit+0x94>
    233c:	5b c0       	rjmp	.+182    	; 0x23f4 <SDInit+0x14a>
    233e:	85 e2       	ldi	r24, 0x25	; 37
    2340:	9b e0       	ldi	r25, 0x0B	; 11
    2342:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <SDReadCSD>
    2346:	88 23       	and	r24, r24
    2348:	0c f4       	brge	.+2      	; 0x234c <SDInit+0xa2>
    234a:	56 c0       	rjmp	.+172    	; 0x23f8 <SDInit+0x14e>
    234c:	e5 e2       	ldi	r30, 0x25	; 37
    234e:	fb e0       	ldi	r31, 0x0B	; 11
    2350:	87 81       	ldd	r24, Z+7	; 0x07
    2352:	8f 73       	andi	r24, 0x3F	; 63
    2354:	90 e0       	ldi	r25, 0x00	; 0
    2356:	a0 e0       	ldi	r26, 0x00	; 0
    2358:	b0 e0       	ldi	r27, 0x00	; 0
    235a:	bc 01       	movw	r22, r24
    235c:	55 27       	eor	r21, r21
    235e:	44 27       	eor	r20, r20
    2360:	90 85       	ldd	r25, Z+8	; 0x08
    2362:	89 2f       	mov	r24, r25
    2364:	90 e0       	ldi	r25, 0x00	; 0
    2366:	a0 e0       	ldi	r26, 0x00	; 0
    2368:	b0 e0       	ldi	r27, 0x00	; 0
    236a:	ba 2f       	mov	r27, r26
    236c:	a9 2f       	mov	r26, r25
    236e:	98 2f       	mov	r25, r24
    2370:	88 27       	eor	r24, r24
    2372:	84 2b       	or	r24, r20
    2374:	95 2b       	or	r25, r21
    2376:	a6 2b       	or	r26, r22
    2378:	b7 2b       	or	r27, r23
    237a:	21 85       	ldd	r18, Z+9	; 0x09
    237c:	82 2b       	or	r24, r18
    237e:	01 96       	adiw	r24, 0x01	; 1
    2380:	a1 1d       	adc	r26, r1
    2382:	b1 1d       	adc	r27, r1
    2384:	07 2e       	mov	r0, r23
    2386:	7a e0       	ldi	r23, 0x0A	; 10
    2388:	88 0f       	add	r24, r24
    238a:	99 1f       	adc	r25, r25
    238c:	aa 1f       	adc	r26, r26
    238e:	bb 1f       	adc	r27, r27
    2390:	7a 95       	dec	r23
    2392:	d1 f7       	brne	.-12     	; 0x2388 <SDInit+0xde>
    2394:	70 2d       	mov	r23, r0
    2396:	80 93 4c 0b 	sts	0x0B4C, r24	; 0x800b4c <sg_u32SDSectorCount>
    239a:	90 93 4d 0b 	sts	0x0B4D, r25	; 0x800b4d <sg_u32SDSectorCount+0x1>
    239e:	a0 93 4e 0b 	sts	0x0B4E, r26	; 0x800b4e <sg_u32SDSectorCount+0x2>
    23a2:	b0 93 4f 0b 	sts	0x0B4F, r27	; 0x800b4f <sg_u32SDSectorCount+0x3>
    23a6:	25 81       	ldd	r18, Z+5	; 0x05
    23a8:	2f 70       	andi	r18, 0x0F	; 15
    23aa:	81 e0       	ldi	r24, 0x01	; 1
    23ac:	90 e0       	ldi	r25, 0x00	; 0
    23ae:	02 c0       	rjmp	.+4      	; 0x23b4 <SDInit+0x10a>
    23b0:	88 0f       	add	r24, r24
    23b2:	99 1f       	adc	r25, r25
    23b4:	2a 95       	dec	r18
    23b6:	e2 f7       	brpl	.-8      	; 0x23b0 <SDInit+0x106>
    23b8:	90 93 61 0b 	sts	0x0B61, r25	; 0x800b61 <sg_u16BlockSize+0x1>
    23bc:	80 93 60 0b 	sts	0x0B60, r24	; 0x800b60 <sg_u16BlockSize>
    23c0:	60 ec       	ldi	r22, 0xC0	; 192
    23c2:	78 ed       	ldi	r23, 0xD8	; 216
    23c4:	87 ea       	ldi	r24, 0xA7	; 167
    23c6:	90 e0       	ldi	r25, 0x00	; 0
    23c8:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <SPISetBaudRate>
    23cc:	81 e0       	ldi	r24, 0x01	; 1
    23ce:	17 c0       	rjmp	.+46     	; 0x23fe <SDInit+0x154>
    23d0:	40 e0       	ldi	r20, 0x00	; 0
    23d2:	50 e0       	ldi	r21, 0x00	; 0
    23d4:	60 e0       	ldi	r22, 0x00	; 0
    23d6:	70 e4       	ldi	r23, 0x40	; 64
    23d8:	ce 01       	movw	r24, r28
    23da:	01 96       	adiw	r24, 0x01	; 1
    23dc:	0e 94 29 22 	call	0x4452	; 0x4452 <SDSendOpConditionArg>
    23e0:	81 11       	cpse	r24, r1
    23e2:	0c c0       	rjmp	.+24     	; 0x23fc <SDInit+0x152>
    23e4:	81 e0       	ldi	r24, 0x01	; 1
    23e6:	0b c0       	rjmp	.+22     	; 0x23fe <SDInit+0x154>
    23e8:	80 e0       	ldi	r24, 0x00	; 0
    23ea:	09 c0       	rjmp	.+18     	; 0x23fe <SDInit+0x154>
    23ec:	80 e0       	ldi	r24, 0x00	; 0
    23ee:	07 c0       	rjmp	.+14     	; 0x23fe <SDInit+0x154>
    23f0:	80 e0       	ldi	r24, 0x00	; 0
    23f2:	05 c0       	rjmp	.+10     	; 0x23fe <SDInit+0x154>
    23f4:	80 e0       	ldi	r24, 0x00	; 0
    23f6:	03 c0       	rjmp	.+6      	; 0x23fe <SDInit+0x154>
    23f8:	80 e0       	ldi	r24, 0x00	; 0
    23fa:	01 c0       	rjmp	.+2      	; 0x23fe <SDInit+0x154>
    23fc:	80 e0       	ldi	r24, 0x00	; 0
    23fe:	0f 90       	pop	r0
    2400:	0f 90       	pop	r0
    2402:	0f 90       	pop	r0
    2404:	0f 90       	pop	r0
    2406:	0f 90       	pop	r0
    2408:	df 91       	pop	r29
    240a:	cf 91       	pop	r28
    240c:	1f 91       	pop	r17
    240e:	08 95       	ret

Disassembly of section .text.SDRead:

000031e0 <SDRead>:

// Read one or more sectors from SD
bool SDRead(uint32_t u32Sector,
			uint8_t *pu8Buffer,
			uint32_t u32SectorCount)
{
    31e0:	8f 92       	push	r8
    31e2:	9f 92       	push	r9
    31e4:	af 92       	push	r10
    31e6:	bf 92       	push	r11
    31e8:	cf 92       	push	r12
    31ea:	df 92       	push	r13
    31ec:	ef 92       	push	r14
    31ee:	ff 92       	push	r15
    31f0:	0f 93       	push	r16
    31f2:	1f 93       	push	r17
    31f4:	cf 93       	push	r28
    31f6:	df 93       	push	r29
    31f8:	4b 01       	movw	r8, r22
    31fa:	5c 01       	movw	r10, r24
    31fc:	ea 01       	movw	r28, r20
    31fe:	68 01       	movw	r12, r16
    3200:	79 01       	movw	r14, r18
	bool bResult = false;
	
	// Pet the watchdog
	WatchdogReset();
    3202:	0e 94 36 29 	call	0x526c	; 0x526c <WatchdogReset>
		
	// Assert chip select
	SDSetCS(true);
    3206:	81 e0       	ldi	r24, 0x01	; 1
    3208:	0e 94 92 28 	call	0x5124	; 0x5124 <SDSetCS>

	if (1 == u32SectorCount)
    320c:	81 e0       	ldi	r24, 0x01	; 1
    320e:	c8 16       	cp	r12, r24
    3210:	d1 04       	cpc	r13, r1
    3212:	e1 04       	cpc	r14, r1
    3214:	f1 04       	cpc	r15, r1
    3216:	81 f4       	brne	.+32     	; 0x3238 <SDRead+0x58>
	{
		if (0 == SDCommand(CMD17,
    3218:	b5 01       	movw	r22, r10
    321a:	a4 01       	movw	r20, r8
    321c:	81 e1       	ldi	r24, 0x11	; 17
    321e:	0e 94 96 1b 	call	0x372c	; 0x372c <SDCommand>
    3222:	81 11       	cpse	r24, r1
    3224:	35 c0       	rjmp	.+106    	; 0x3290 <SDRead+0xb0>
						   u32Sector))
		{
			bResult = SDReceiveDataBlock(pu8Buffer,
    3226:	60 91 60 0b 	lds	r22, 0x0B60	; 0x800b60 <sg_u16BlockSize>
    322a:	70 91 61 0b 	lds	r23, 0x0B61	; 0x800b61 <sg_u16BlockSize+0x1>
    322e:	ce 01       	movw	r24, r28
    3230:	0e 94 b9 1d 	call	0x3b72	; 0x3b72 <SDReceiveDataBlock>
    3234:	18 2f       	mov	r17, r24
    3236:	2f c0       	rjmp	.+94     	; 0x3296 <SDRead+0xb6>
		}
	}
	else
	{
		// Multisector
		if (0 == SDCommand(CMD18,
    3238:	b5 01       	movw	r22, r10
    323a:	a4 01       	movw	r20, r8
    323c:	82 e1       	ldi	r24, 0x12	; 18
    323e:	0e 94 96 1b 	call	0x372c	; 0x372c <SDCommand>
    3242:	88 23       	and	r24, r24
    3244:	19 f0       	breq	.+6      	; 0x324c <SDRead+0x6c>
    3246:	26 c0       	rjmp	.+76     	; 0x3294 <SDRead+0xb4>
				WatchdogReset();
				
				pu8Buffer += sg_u16BlockSize;
			} 
			while ((bResult) &&
				   (u32SectorCount--));
    3248:	6c 01       	movw	r12, r24
    324a:	7d 01       	movw	r14, r26
		if (0 == SDCommand(CMD18,
						   u32Sector))
		{
			do 
			{
				bResult = SDReceiveDataBlock(pu8Buffer,
    324c:	60 91 60 0b 	lds	r22, 0x0B60	; 0x800b60 <sg_u16BlockSize>
    3250:	70 91 61 0b 	lds	r23, 0x0B61	; 0x800b61 <sg_u16BlockSize+0x1>
    3254:	ce 01       	movw	r24, r28
    3256:	0e 94 b9 1d 	call	0x3b72	; 0x3b72 <SDReceiveDataBlock>
    325a:	18 2f       	mov	r17, r24
							 				 sg_u16BlockSize);
				// Pet the watchdog
				WatchdogReset();
    325c:	0e 94 36 29 	call	0x526c	; 0x526c <WatchdogReset>
				
				pu8Buffer += sg_u16BlockSize;
    3260:	80 91 60 0b 	lds	r24, 0x0B60	; 0x800b60 <sg_u16BlockSize>
    3264:	90 91 61 0b 	lds	r25, 0x0B61	; 0x800b61 <sg_u16BlockSize+0x1>
    3268:	c8 0f       	add	r28, r24
    326a:	d9 1f       	adc	r29, r25
			} 
			while ((bResult) &&
				   (u32SectorCount--));
    326c:	11 23       	and	r17, r17
    326e:	49 f0       	breq	.+18     	; 0x3282 <SDRead+0xa2>
    3270:	d7 01       	movw	r26, r14
    3272:	c6 01       	movw	r24, r12
    3274:	01 97       	sbiw	r24, 0x01	; 1
    3276:	a1 09       	sbc	r26, r1
    3278:	b1 09       	sbc	r27, r1
				// Pet the watchdog
				WatchdogReset();
				
				pu8Buffer += sg_u16BlockSize;
			} 
			while ((bResult) &&
    327a:	cd 28       	or	r12, r13
    327c:	ce 28       	or	r12, r14
    327e:	cf 28       	or	r12, r15
    3280:	19 f7       	brne	.-58     	; 0x3248 <SDRead+0x68>
				   (u32SectorCount--));
				   
			// Regardless, send a stop command
			(void) SDCommand(CMD12,
    3282:	40 e0       	ldi	r20, 0x00	; 0
    3284:	50 e0       	ldi	r21, 0x00	; 0
    3286:	ba 01       	movw	r22, r20
    3288:	8c e0       	ldi	r24, 0x0C	; 12
    328a:	0e 94 96 1b 	call	0x372c	; 0x372c <SDCommand>
    328e:	03 c0       	rjmp	.+6      	; 0x3296 <SDRead+0xb6>
// Read one or more sectors from SD
bool SDRead(uint32_t u32Sector,
			uint8_t *pu8Buffer,
			uint32_t u32SectorCount)
{
	bool bResult = false;
    3290:	10 e0       	ldi	r17, 0x00	; 0
    3292:	01 c0       	rjmp	.+2      	; 0x3296 <SDRead+0xb6>
    3294:	10 e0       	ldi	r17, 0x00	; 0
		{
			// Failed
		}
	}
	
	SDSetCS(false);
    3296:	80 e0       	ldi	r24, 0x00	; 0
    3298:	0e 94 92 28 	call	0x5124	; 0x5124 <SDSetCS>

	return(bResult);
}
    329c:	81 2f       	mov	r24, r17
    329e:	df 91       	pop	r29
    32a0:	cf 91       	pop	r28
    32a2:	1f 91       	pop	r17
    32a4:	0f 91       	pop	r16
    32a6:	ff 90       	pop	r15
    32a8:	ef 90       	pop	r14
    32aa:	df 90       	pop	r13
    32ac:	cf 90       	pop	r12
    32ae:	bf 90       	pop	r11
    32b0:	af 90       	pop	r10
    32b2:	9f 90       	pop	r9
    32b4:	8f 90       	pop	r8
    32b6:	08 95       	ret

Disassembly of section .text.SDWrite:

00003028 <SDWrite>:

bool SDGetBlockSize(uint32_t *pu32BlockSize)
{
	*pu32BlockSize = sg_u16BlockSize;
	return(true);
}
    3028:	8f 92       	push	r8
    302a:	9f 92       	push	r9
    302c:	af 92       	push	r10
    302e:	bf 92       	push	r11
    3030:	cf 92       	push	r12
    3032:	df 92       	push	r13
    3034:	ef 92       	push	r14
    3036:	ff 92       	push	r15
    3038:	0f 93       	push	r16
    303a:	1f 93       	push	r17
    303c:	cf 93       	push	r28
    303e:	df 93       	push	r29
    3040:	4b 01       	movw	r8, r22
    3042:	5c 01       	movw	r10, r24
    3044:	ea 01       	movw	r28, r20
    3046:	68 01       	movw	r12, r16
    3048:	79 01       	movw	r14, r18
    304a:	0e 94 36 29 	call	0x526c	; 0x526c <WatchdogReset>
    304e:	81 e0       	ldi	r24, 0x01	; 1
    3050:	0e 94 92 28 	call	0x5124	; 0x5124 <SDSetCS>
    3054:	81 e0       	ldi	r24, 0x01	; 1
    3056:	c8 16       	cp	r12, r24
    3058:	d1 04       	cpc	r13, r1
    305a:	e1 04       	cpc	r14, r1
    305c:	f1 04       	cpc	r15, r1
    305e:	89 f4       	brne	.+34     	; 0x3082 <SDWrite+0x5a>
    3060:	b5 01       	movw	r22, r10
    3062:	a4 01       	movw	r20, r8
    3064:	88 e1       	ldi	r24, 0x18	; 24
    3066:	0e 94 96 1b 	call	0x372c	; 0x372c <SDCommand>
    306a:	81 11       	cpse	r24, r1
    306c:	37 c0       	rjmp	.+110    	; 0x30dc <SDWrite+0xb4>
    306e:	60 91 60 0b 	lds	r22, 0x0B60	; 0x800b60 <sg_u16BlockSize>
    3072:	70 91 61 0b 	lds	r23, 0x0B61	; 0x800b61 <sg_u16BlockSize+0x1>
    3076:	4e ef       	ldi	r20, 0xFE	; 254
    3078:	ce 01       	movw	r24, r28
    307a:	0e 94 24 1a 	call	0x3448	; 0x3448 <SDTransmitDataBlock>
    307e:	18 2f       	mov	r17, r24
    3080:	30 c0       	rjmp	.+96     	; 0x30e2 <SDWrite+0xba>
    3082:	b5 01       	movw	r22, r10
    3084:	a4 01       	movw	r20, r8
    3086:	89 e1       	ldi	r24, 0x19	; 25
    3088:	0e 94 96 1b 	call	0x372c	; 0x372c <SDCommand>
    308c:	88 23       	and	r24, r24
    308e:	19 f0       	breq	.+6      	; 0x3096 <SDWrite+0x6e>
    3090:	27 c0       	rjmp	.+78     	; 0x30e0 <SDWrite+0xb8>
    3092:	6c 01       	movw	r12, r24
    3094:	7d 01       	movw	r14, r26
    3096:	60 91 60 0b 	lds	r22, 0x0B60	; 0x800b60 <sg_u16BlockSize>
    309a:	70 91 61 0b 	lds	r23, 0x0B61	; 0x800b61 <sg_u16BlockSize+0x1>
    309e:	4c ef       	ldi	r20, 0xFC	; 252
    30a0:	ce 01       	movw	r24, r28
    30a2:	0e 94 24 1a 	call	0x3448	; 0x3448 <SDTransmitDataBlock>
    30a6:	18 2f       	mov	r17, r24
    30a8:	0e 94 36 29 	call	0x526c	; 0x526c <WatchdogReset>
    30ac:	80 91 60 0b 	lds	r24, 0x0B60	; 0x800b60 <sg_u16BlockSize>
    30b0:	90 91 61 0b 	lds	r25, 0x0B61	; 0x800b61 <sg_u16BlockSize+0x1>
    30b4:	c8 0f       	add	r28, r24
    30b6:	d9 1f       	adc	r29, r25
    30b8:	11 23       	and	r17, r17
    30ba:	49 f0       	breq	.+18     	; 0x30ce <SDWrite+0xa6>
    30bc:	d7 01       	movw	r26, r14
    30be:	c6 01       	movw	r24, r12
    30c0:	01 97       	sbiw	r24, 0x01	; 1
    30c2:	a1 09       	sbc	r26, r1
    30c4:	b1 09       	sbc	r27, r1
    30c6:	cd 28       	or	r12, r13
    30c8:	ce 28       	or	r12, r14
    30ca:	cf 28       	or	r12, r15
    30cc:	11 f7       	brne	.-60     	; 0x3092 <SDWrite+0x6a>
    30ce:	40 e0       	ldi	r20, 0x00	; 0
    30d0:	50 e0       	ldi	r21, 0x00	; 0
    30d2:	ba 01       	movw	r22, r20
    30d4:	8c e0       	ldi	r24, 0x0C	; 12
    30d6:	0e 94 96 1b 	call	0x372c	; 0x372c <SDCommand>
    30da:	03 c0       	rjmp	.+6      	; 0x30e2 <SDWrite+0xba>
    30dc:	10 e0       	ldi	r17, 0x00	; 0
    30de:	01 c0       	rjmp	.+2      	; 0x30e2 <SDWrite+0xba>
    30e0:	10 e0       	ldi	r17, 0x00	; 0
    30e2:	80 e0       	ldi	r24, 0x00	; 0
    30e4:	0e 94 92 28 	call	0x5124	; 0x5124 <SDSetCS>
    30e8:	81 2f       	mov	r24, r17
    30ea:	df 91       	pop	r29
    30ec:	cf 91       	pop	r28
    30ee:	1f 91       	pop	r17
    30f0:	0f 91       	pop	r16
    30f2:	ff 90       	pop	r15
    30f4:	ef 90       	pop	r14
    30f6:	df 90       	pop	r13
    30f8:	cf 90       	pop	r12
    30fa:	bf 90       	pop	r11
    30fc:	af 90       	pop	r10
    30fe:	9f 90       	pop	r9
    3100:	8f 90       	pop	r8
    3102:	08 95       	ret

Disassembly of section .text.SPITransaction:

000043a2 <SPITransaction>:

// Do a SPI transaction - read or write (or write pattern)
void SPITransaction(ESPIBusState eSPIBusState,
					uint8_t *pu8Buffer,
					uint16_t u16ByteCount)
{
    43a2:	fb 01       	movw	r30, r22
	// If we're transmitting, start the transaction
	if (ESTATE_RX_DATA == eSPIBusState)
    43a4:	83 30       	cpi	r24, 0x03	; 3
    43a6:	71 f4       	brne	.+28     	; 0x43c4 <SPITransaction+0x22>
    43a8:	08 c0       	rjmp	.+16     	; 0x43ba <SPITransaction+0x18>
	{
		while (u16ByteCount--)
		{
			// Clock out 0xff so we can receive the data
			SPDR = 0xff;
    43aa:	2f ef       	ldi	r18, 0xFF	; 255
    43ac:	2e bd       	out	0x2e, r18	; 46

			// Wait for data to be available
			while (0 == (SPSR & (1 << SPIF)));
    43ae:	0d b4       	in	r0, 0x2d	; 45
    43b0:	07 fe       	sbrs	r0, 7
    43b2:	fd cf       	rjmp	.-6      	; 0x43ae <SPITransaction+0xc>
			
			// Read the byte
			*pu8Buffer = SPDR;
    43b4:	2e b5       	in	r18, 0x2e	; 46
    43b6:	21 93       	st	Z+, r18
					uint16_t u16ByteCount)
{
	// If we're transmitting, start the transaction
	if (ESTATE_RX_DATA == eSPIBusState)
	{
		while (u16ByteCount--)
    43b8:	ac 01       	movw	r20, r24
    43ba:	ca 01       	movw	r24, r20
    43bc:	01 97       	sbiw	r24, 0x01	; 1
    43be:	45 2b       	or	r20, r21
    43c0:	a1 f7       	brne	.-24     	; 0x43aa <SPITransaction+0x8>
    43c2:	08 95       	ret
			*pu8Buffer = SPDR;
			++pu8Buffer;
		}
	}
	else
	if (ESTATE_TX_DATA == eSPIBusState)
    43c4:	81 30       	cpi	r24, 0x01	; 1
    43c6:	61 f4       	brne	.+24     	; 0x43e0 <SPITransaction+0x3e>
    43c8:	06 c0       	rjmp	.+12     	; 0x43d6 <SPITransaction+0x34>
	{
		// Clock out whatever our data is in our queue
		while (u16ByteCount--)
		{
			SPDR = *pu8Buffer;
    43ca:	21 91       	ld	r18, Z+
    43cc:	2e bd       	out	0x2e, r18	; 46
			++pu8Buffer;
			
			// Wait for the transmit to complete
			while (0 == (SPSR & (1 << SPIF)));
    43ce:	0d b4       	in	r0, 0x2d	; 45
    43d0:	07 fe       	sbrs	r0, 7
    43d2:	fd cf       	rjmp	.-6      	; 0x43ce <SPITransaction+0x2c>
	}
	else
	if (ESTATE_TX_DATA == eSPIBusState)
	{
		// Clock out whatever our data is in our queue
		while (u16ByteCount--)
    43d4:	ac 01       	movw	r20, r24
    43d6:	ca 01       	movw	r24, r20
    43d8:	01 97       	sbiw	r24, 0x01	; 1
    43da:	45 2b       	or	r20, r21
    43dc:	b1 f7       	brne	.-20     	; 0x43ca <SPITransaction+0x28>
    43de:	08 95       	ret
			// Wait for the transmit to complete
			while (0 == (SPSR & (1 << SPIF)));
		}
	}
	else
	if (ESTATE_TX_PATTERN == eSPIBusState)
    43e0:	82 30       	cpi	r24, 0x02	; 2
    43e2:	51 f4       	brne	.+20     	; 0x43f8 <SPITransaction+0x56>
    43e4:	05 c0       	rjmp	.+10     	; 0x43f0 <SPITransaction+0x4e>
		// Clock out whatever our data is in our queue
		while (u16ByteCount--)
		{
			// This is OK - as the position where the pointer would normally
			// be is just the pattern (single byte)
			SPDR = (uint8_t) (pu8Buffer);
    43e6:	ee bd       	out	0x2e, r30	; 46
		
			// Wait for the transmit to complete
			while (0 == (SPSR & (1 << SPIF)));
    43e8:	0d b4       	in	r0, 0x2d	; 45
    43ea:	07 fe       	sbrs	r0, 7
    43ec:	fd cf       	rjmp	.-6      	; 0x43e8 <SPITransaction+0x46>
	}
	else
	if (ESTATE_TX_PATTERN == eSPIBusState)
	{
		// Clock out whatever our data is in our queue
		while (u16ByteCount--)
    43ee:	ac 01       	movw	r20, r24
    43f0:	ca 01       	movw	r24, r20
    43f2:	01 97       	sbiw	r24, 0x01	; 1
    43f4:	45 2b       	or	r20, r21
    43f6:	b9 f7       	brne	.-18     	; 0x43e6 <SPITransaction+0x44>
    43f8:	08 95       	ret

Disassembly of section .text.SPISetBaudRate:

000032b8 <SPISetBaudRate>:
	{FCLKIO >> 7,	(1 << SPR1) | (0 << SPR0),	0},					// /128
};

// Sets the SPI baud rate and returns the actual baud rate selected
uint32_t SPISetBaudRate(uint32_t u32BaudRate)
{
    32b8:	cf 92       	push	r12
    32ba:	df 92       	push	r13
    32bc:	ef 92       	push	r14
    32be:	ff 92       	push	r15
    32c0:	6b 01       	movw	r12, r22
    32c2:	7c 01       	movw	r14, r24
	uint8_t u8Loop;
	
	// Find the baud rate that's the closest
	for (u8Loop = 0; u8Loop < (sizeof(sg_sSPIBaudRates) / sizeof(sg_sSPIBaudRates[0])); u8Loop++)
    32c4:	20 e0       	ldi	r18, 0x00	; 0
    32c6:	19 c0       	rjmp	.+50     	; 0x32fa <SPISetBaudRate+0x42>
	{
		if (u32BaudRate >= sg_sSPIBaudRates[u8Loop].u32BaudRate)
    32c8:	82 2f       	mov	r24, r18
    32ca:	90 e0       	ldi	r25, 0x00	; 0
    32cc:	ac 01       	movw	r20, r24
    32ce:	44 0f       	add	r20, r20
    32d0:	55 1f       	adc	r21, r21
    32d2:	84 0f       	add	r24, r20
    32d4:	95 1f       	adc	r25, r21
    32d6:	88 0f       	add	r24, r24
    32d8:	99 1f       	adc	r25, r25
    32da:	09 2e       	mov	r0, r25
    32dc:	00 0c       	add	r0, r0
    32de:	aa 0b       	sbc	r26, r26
    32e0:	85 55       	subi	r24, 0x55	; 85
    32e2:	9d 4f       	sbci	r25, 0xFD	; 253
    32e4:	af 4f       	sbci	r26, 0xFF	; 255
    32e6:	fc 01       	movw	r30, r24
    32e8:	5a 2f       	mov	r21, r26
    32ea:	0e 94 4e 28 	call	0x509c	; 0x509c <__xload_4>
    32ee:	c6 16       	cp	r12, r22
    32f0:	d7 06       	cpc	r13, r23
    32f2:	e8 06       	cpc	r14, r24
    32f4:	f9 06       	cpc	r15, r25
    32f6:	18 f4       	brcc	.+6      	; 0x32fe <SPISetBaudRate+0x46>
uint32_t SPISetBaudRate(uint32_t u32BaudRate)
{
	uint8_t u8Loop;
	
	// Find the baud rate that's the closest
	for (u8Loop = 0; u8Loop < (sizeof(sg_sSPIBaudRates) / sizeof(sg_sSPIBaudRates[0])); u8Loop++)
    32f8:	2f 5f       	subi	r18, 0xFF	; 255
    32fa:	27 30       	cpi	r18, 0x07	; 7
    32fc:	28 f3       	brcs	.-54     	; 0x32c8 <SPISetBaudRate+0x10>
			break;
		}
	}

	// If we've hit the end, use the slowest speed
	if ((sizeof(sg_sSPIBaudRates) / sizeof(sg_sSPIBaudRates[0])) == u8Loop)
    32fe:	27 30       	cpi	r18, 0x07	; 7
    3300:	09 f4       	brne	.+2      	; 0x3304 <SPISetBaudRate+0x4c>
	{
		u8Loop--;
    3302:	21 50       	subi	r18, 0x01	; 1
	}

	// Found one!
	SPCR = (SPCR & (uint8_t) ~((1 << SPR1) | (1 << SPR0))) | sg_sSPIBaudRates[u8Loop].u8SPCR;
    3304:	6c b5       	in	r22, 0x2c	; 44
    3306:	30 e0       	ldi	r19, 0x00	; 0
    3308:	a9 01       	movw	r20, r18
    330a:	44 0f       	add	r20, r20
    330c:	55 1f       	adc	r21, r21
    330e:	ca 01       	movw	r24, r20
    3310:	82 0f       	add	r24, r18
    3312:	93 1f       	adc	r25, r19
    3314:	88 0f       	add	r24, r24
    3316:	99 1f       	adc	r25, r25
    3318:	04 96       	adiw	r24, 0x04	; 4
    331a:	09 2e       	mov	r0, r25
    331c:	00 0c       	add	r0, r0
    331e:	aa 0b       	sbc	r26, r26
    3320:	85 55       	subi	r24, 0x55	; 85
    3322:	9d 4f       	sbci	r25, 0xFD	; 253
    3324:	af 4f       	sbci	r26, 0xFF	; 255
    3326:	fc 01       	movw	r30, r24
    3328:	84 91       	lpm	r24, Z
    332a:	a7 fd       	sbrc	r26, 7
    332c:	80 81       	ld	r24, Z
    332e:	6c 7f       	andi	r22, 0xFC	; 252
    3330:	86 2b       	or	r24, r22
    3332:	8c bd       	out	0x2c, r24	; 44
	SPSR = (SPSR & (uint8_t) ~(1 << SPI2X)) | sg_sSPIBaudRates[u8Loop].u8SPSR;
    3334:	6d b5       	in	r22, 0x2d	; 45
    3336:	ca 01       	movw	r24, r20
    3338:	82 0f       	add	r24, r18
    333a:	93 1f       	adc	r25, r19
    333c:	88 0f       	add	r24, r24
    333e:	99 1f       	adc	r25, r25
    3340:	05 96       	adiw	r24, 0x05	; 5
    3342:	09 2e       	mov	r0, r25
    3344:	00 0c       	add	r0, r0
    3346:	aa 0b       	sbc	r26, r26
    3348:	85 55       	subi	r24, 0x55	; 85
    334a:	9d 4f       	sbci	r25, 0xFD	; 253
    334c:	af 4f       	sbci	r26, 0xFF	; 255
    334e:	fc 01       	movw	r30, r24
    3350:	84 91       	lpm	r24, Z
    3352:	a7 fd       	sbrc	r26, 7
    3354:	80 81       	ld	r24, Z
    3356:	6e 7f       	andi	r22, 0xFE	; 254
    3358:	86 2b       	or	r24, r22
    335a:	8d bd       	out	0x2d, r24	; 45
	return(sg_sSPIBaudRates[u8Loop].u32BaudRate);
    335c:	24 0f       	add	r18, r20
    335e:	35 1f       	adc	r19, r21
    3360:	22 0f       	add	r18, r18
    3362:	33 1f       	adc	r19, r19
    3364:	03 2e       	mov	r0, r19
    3366:	00 0c       	add	r0, r0
    3368:	44 0b       	sbc	r20, r20
    336a:	25 55       	subi	r18, 0x55	; 85
    336c:	3d 4f       	sbci	r19, 0xFD	; 253
    336e:	4f 4f       	sbci	r20, 0xFF	; 255
    3370:	f9 01       	movw	r30, r18
    3372:	54 2f       	mov	r21, r20
    3374:	0e 94 4e 28 	call	0x509c	; 0x509c <__xload_4>
}
    3378:	ff 90       	pop	r15
    337a:	ef 90       	pop	r14
    337c:	df 90       	pop	r13
    337e:	cf 90       	pop	r12
    3380:	08 95       	ret

Disassembly of section .text.SPIInit:

00004be4 <SPIInit>:

void SPIInit(void)
{
	// Set MOSI and SCK to output
	DDR_SPI |= (1 << MOSI) | (1 << SCK);
    4be4:	84 b1       	in	r24, 0x04	; 4
    4be6:	82 68       	ori	r24, 0x82	; 130
    4be8:	84 b9       	out	0x04, r24	; 4
	DDR_SPI &= (uint8_t) ~(1 << MISO);
    4bea:	84 b1       	in	r24, 0x04	; 4
    4bec:	8e 7f       	andi	r24, 0xFE	; 254
    4bee:	84 b9       	out	0x04, r24	; 4
	
	// MISO As input (need our pullup)
	PORT_SPI |= (1 << MISO);
    4bf0:	85 b1       	in	r24, 0x05	; 5
    4bf2:	81 60       	ori	r24, 0x01	; 1
    4bf4:	85 b9       	out	0x05, r24	; 5
	
	// Enable SPI engine, master only, and clock to fosc/128 and SPI mode 0 (which is what SD wants)
	SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR1) | (1 << SPR0);
    4bf6:	83 e5       	ldi	r24, 0x53	; 83
    4bf8:	8c bd       	out	0x2c, r24	; 44
	
	// Zero out SPSR (all zeroes)
	SPSR = 0;
    4bfa:	1d bc       	out	0x2d, r1	; 45
	
	// Zero out SPIPS so the SPI IP is connected to MISO, MOSI, SCK, and SS
	MCUCR &= (uint8_t) ~(1 << SPIPS);
    4bfc:	85 b7       	in	r24, 0x35	; 53
    4bfe:	8f 77       	andi	r24, 0x7F	; 127
    4c00:	85 bf       	out	0x35, r24	; 53

	// Set to something slow/compatible
	(void) SPISetBaudRate(400000);
    4c02:	60 e8       	ldi	r22, 0x80	; 128
    4c04:	7a e1       	ldi	r23, 0x1A	; 26
    4c06:	86 e0       	ldi	r24, 0x06	; 6
    4c08:	90 e0       	ldi	r25, 0x00	; 0
    4c0a:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <SPISetBaudRate>
    4c0e:	08 95       	ret

Disassembly of section .text.readGlobalState:

00004812 <readGlobalState>:

static GlobalState gState;
static uint32_t currentSector;
static uint8_t __attribute__((aligned(4))) frameBuffer[FRAME_BUFFER_SIZE];  // Enlarged to handle full frame

static bool readGlobalState(void) {
    4812:	0f 93       	push	r16
    4814:	1f 93       	push	r17
    4816:	cf 93       	push	r28
	if (!SDRead(0, frameBuffer, 1)) {
    4818:	01 e0       	ldi	r16, 0x01	; 1
    481a:	10 e0       	ldi	r17, 0x00	; 0
    481c:	20 e0       	ldi	r18, 0x00	; 0
    481e:	30 e0       	ldi	r19, 0x00	; 0
    4820:	44 e2       	ldi	r20, 0x24	; 36
    4822:	55 e0       	ldi	r21, 0x05	; 5
    4824:	60 e0       	ldi	r22, 0x00	; 0
    4826:	70 e0       	ldi	r23, 0x00	; 0
    4828:	cb 01       	movw	r24, r22
    482a:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <SDRead>
    482e:	c8 2f       	mov	r28, r24
    4830:	88 23       	and	r24, r24
    4832:	49 f0       	breq	.+18     	; 0x4846 <readGlobalState+0x34>
		return false;
	}
	memcpy(&gState, frameBuffer, sizeof(GlobalState));
    4834:	44 e2       	ldi	r20, 0x24	; 36
    4836:	55 e0       	ldi	r21, 0x05	; 5
    4838:	60 e8       	ldi	r22, 0x80	; 128
    483a:	28 ed       	ldi	r18, 0xD8	; 216
    483c:	31 e0       	ldi	r19, 0x01	; 1
    483e:	84 e2       	ldi	r24, 0x24	; 36
    4840:	99 e0       	ldi	r25, 0x09	; 9
    4842:	0e 94 53 25 	call	0x4aa6	; 0x4aa6 <memcpy>
	// TODO: Implement checksum verification
	return true;
}
    4846:	8c 2f       	mov	r24, r28
    4848:	cf 91       	pop	r28
    484a:	1f 91       	pop	r17
    484c:	0f 91       	pop	r16
    484e:	08 95       	ret

Disassembly of section .text.writeGlobalState:

00004a74 <writeGlobalState>:

static bool writeGlobalState(void) {
    4a74:	0f 93       	push	r16
    4a76:	1f 93       	push	r17
	memcpy(frameBuffer, &gState, sizeof(GlobalState));
    4a78:	44 e2       	ldi	r20, 0x24	; 36
    4a7a:	59 e0       	ldi	r21, 0x09	; 9
    4a7c:	60 e8       	ldi	r22, 0x80	; 128
    4a7e:	28 ed       	ldi	r18, 0xD8	; 216
    4a80:	31 e0       	ldi	r19, 0x01	; 1
    4a82:	84 e2       	ldi	r24, 0x24	; 36
    4a84:	95 e0       	ldi	r25, 0x05	; 5
    4a86:	0e 94 53 25 	call	0x4aa6	; 0x4aa6 <memcpy>
	// TODO: Calculate and update checksum
	return SDWrite(0, frameBuffer, 1);
    4a8a:	01 e0       	ldi	r16, 0x01	; 1
    4a8c:	10 e0       	ldi	r17, 0x00	; 0
    4a8e:	20 e0       	ldi	r18, 0x00	; 0
    4a90:	30 e0       	ldi	r19, 0x00	; 0
    4a92:	44 e2       	ldi	r20, 0x24	; 36
    4a94:	55 e0       	ldi	r21, 0x05	; 5
    4a96:	60 e0       	ldi	r22, 0x00	; 0
    4a98:	70 e0       	ldi	r23, 0x00	; 0
    4a9a:	cb 01       	movw	r24, r22
    4a9c:	0e 94 14 18 	call	0x3028	; 0x3028 <SDWrite>
}
    4aa0:	1f 91       	pop	r17
    4aa2:	0f 91       	pop	r16
    4aa4:	08 95       	ret

Disassembly of section .text.updateSessionMap:

00003104 <updateSessionMap>:

static bool updateSessionMap(void) {
    3104:	8f 92       	push	r8
    3106:	9f 92       	push	r9
    3108:	af 92       	push	r10
    310a:	bf 92       	push	r11
    310c:	cf 92       	push	r12
    310e:	df 92       	push	r13
    3110:	ef 92       	push	r14
    3112:	ff 92       	push	r15
    3114:	0f 93       	push	r16
    3116:	1f 93       	push	r17
	uint32_t mapSector = gState.activeSessionMapSector;
    3118:	e4 e2       	ldi	r30, 0x24	; 36
    311a:	f9 e0       	ldi	r31, 0x09	; 9
    311c:	c4 8c       	ldd	r12, Z+28	; 0x1c
    311e:	d5 8c       	ldd	r13, Z+29	; 0x1d
    3120:	e6 8c       	ldd	r14, Z+30	; 0x1e
    3122:	f7 8c       	ldd	r15, Z+31	; 0x1f
	uint32_t mapOffset = gState.activeSessionMapOffset;
    3124:	80 a0       	ldd	r8, Z+32	; 0x20
    3126:	91 a0       	ldd	r9, Z+33	; 0x21
    3128:	a2 a0       	ldd	r10, Z+34	; 0x22
    312a:	b3 a0       	ldd	r11, Z+35	; 0x23

	if (!SDRead(mapSector, frameBuffer, 1)) {
    312c:	01 e0       	ldi	r16, 0x01	; 1
    312e:	10 e0       	ldi	r17, 0x00	; 0
    3130:	20 e0       	ldi	r18, 0x00	; 0
    3132:	30 e0       	ldi	r19, 0x00	; 0
    3134:	44 e2       	ldi	r20, 0x24	; 36
    3136:	55 e0       	ldi	r21, 0x05	; 5
    3138:	c7 01       	movw	r24, r14
    313a:	b6 01       	movw	r22, r12
    313c:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <SDRead>
    3140:	88 23       	and	r24, r24
    3142:	09 f4       	brne	.+2      	; 0x3146 <updateSessionMap+0x42>
    3144:	42 c0       	rjmp	.+132    	; 0x31ca <updateSessionMap+0xc6>
		return false;
	}

	// Update session map
	*(uint64_t*)(frameBuffer + mapOffset) = gState.newSessionSector;
    3146:	f4 01       	movw	r30, r8
    3148:	ec 5d       	subi	r30, 0xDC	; 220
    314a:	fa 4f       	sbci	r31, 0xFA	; 250
    314c:	00 91 3c 09 	lds	r16, 0x093C	; 0x80093c <gState+0x18>
    3150:	10 91 3d 09 	lds	r17, 0x093D	; 0x80093d <gState+0x19>
    3154:	20 91 3e 09 	lds	r18, 0x093E	; 0x80093e <gState+0x1a>
    3158:	30 91 3f 09 	lds	r19, 0x093F	; 0x80093f <gState+0x1b>
    315c:	00 83       	st	Z, r16
    315e:	11 83       	std	Z+1, r17	; 0x01
    3160:	22 83       	std	Z+2, r18	; 0x02
    3162:	33 83       	std	Z+3, r19	; 0x03
    3164:	14 82       	std	Z+4, r1	; 0x04
    3166:	15 82       	std	Z+5, r1	; 0x05
    3168:	16 82       	std	Z+6, r1	; 0x06
    316a:	17 82       	std	Z+7, r1	; 0x07

	if (!SDWrite(mapSector, frameBuffer, 1)) {
    316c:	01 e0       	ldi	r16, 0x01	; 1
    316e:	10 e0       	ldi	r17, 0x00	; 0
    3170:	20 e0       	ldi	r18, 0x00	; 0
    3172:	30 e0       	ldi	r19, 0x00	; 0
    3174:	44 e2       	ldi	r20, 0x24	; 36
    3176:	55 e0       	ldi	r21, 0x05	; 5
    3178:	c7 01       	movw	r24, r14
    317a:	b6 01       	movw	r22, r12
    317c:	0e 94 14 18 	call	0x3028	; 0x3028 <SDWrite>
    3180:	88 23       	and	r24, r24
    3182:	19 f1       	breq	.+70     	; 0x31ca <updateSessionMap+0xc6>
		return false;
	}

	// Update map pointers
	gState.activeSessionMapOffset += sizeof(uint64_t);
    3184:	e4 e2       	ldi	r30, 0x24	; 36
    3186:	f9 e0       	ldi	r31, 0x09	; 9
    3188:	80 a1       	ldd	r24, Z+32	; 0x20
    318a:	91 a1       	ldd	r25, Z+33	; 0x21
    318c:	a2 a1       	ldd	r26, Z+34	; 0x22
    318e:	b3 a1       	ldd	r27, Z+35	; 0x23
    3190:	08 96       	adiw	r24, 0x08	; 8
    3192:	a1 1d       	adc	r26, r1
    3194:	b1 1d       	adc	r27, r1
    3196:	80 a3       	std	Z+32, r24	; 0x20
    3198:	91 a3       	std	Z+33, r25	; 0x21
    319a:	a2 a3       	std	Z+34, r26	; 0x22
    319c:	b3 a3       	std	Z+35, r27	; 0x23
	if (gState.activeSessionMapOffset >= SECTOR_SIZE) {
    319e:	81 15       	cp	r24, r1
    31a0:	92 40       	sbci	r25, 0x02	; 2
    31a2:	a1 05       	cpc	r26, r1
    31a4:	b1 05       	cpc	r27, r1
    31a6:	78 f0       	brcs	.+30     	; 0x31c6 <updateSessionMap+0xc2>
		gState.activeSessionMapSector++;
    31a8:	84 8d       	ldd	r24, Z+28	; 0x1c
    31aa:	95 8d       	ldd	r25, Z+29	; 0x1d
    31ac:	a6 8d       	ldd	r26, Z+30	; 0x1e
    31ae:	b7 8d       	ldd	r27, Z+31	; 0x1f
    31b0:	01 96       	adiw	r24, 0x01	; 1
    31b2:	a1 1d       	adc	r26, r1
    31b4:	b1 1d       	adc	r27, r1
    31b6:	84 8f       	std	Z+28, r24	; 0x1c
    31b8:	95 8f       	std	Z+29, r25	; 0x1d
    31ba:	a6 8f       	std	Z+30, r26	; 0x1e
    31bc:	b7 8f       	std	Z+31, r27	; 0x1f
		gState.activeSessionMapOffset = 0;
    31be:	10 a2       	std	Z+32, r1	; 0x20
    31c0:	11 a2       	std	Z+33, r1	; 0x21
    31c2:	12 a2       	std	Z+34, r1	; 0x22
    31c4:	13 a2       	std	Z+35, r1	; 0x23
	}

	return writeGlobalState();
    31c6:	0e 94 3a 25 	call	0x4a74	; 0x4a74 <writeGlobalState>
}
    31ca:	1f 91       	pop	r17
    31cc:	0f 91       	pop	r16
    31ce:	ff 90       	pop	r15
    31d0:	ef 90       	pop	r14
    31d2:	df 90       	pop	r13
    31d4:	cf 90       	pop	r12
    31d6:	bf 90       	pop	r11
    31d8:	af 90       	pop	r10
    31da:	9f 90       	pop	r9
    31dc:	8f 90       	pop	r8
    31de:	08 95       	ret

Disassembly of section .text.STORE_Init:

00003d90 <STORE_Init>:

bool STORE_Init(void) {
    3d90:	cf 93       	push	r28
	if (!SDInit()) {
    3d92:	0e 94 55 11 	call	0x22aa	; 0x22aa <SDInit>
    3d96:	c8 2f       	mov	r28, r24
    3d98:	88 23       	and	r24, r24
    3d9a:	c1 f1       	breq	.+112    	; 0x3e0c <STORE_Init+0x7c>
		return false;
	}

	if (!readGlobalState()) {
    3d9c:	0e 94 09 24 	call	0x4812	; 0x4812 <readGlobalState>
    3da0:	81 11       	cpse	r24, r1
    3da2:	22 c0       	rjmp	.+68     	; 0x3de8 <STORE_Init+0x58>
		// Initialize global state if it doesn't exist
		memset(&gState, 0, sizeof(GlobalState));
    3da4:	e4 e2       	ldi	r30, 0x24	; 36
    3da6:	f9 e0       	ldi	r31, 0x09	; 9
    3da8:	88 ed       	ldi	r24, 0xD8	; 216
    3daa:	91 e0       	ldi	r25, 0x01	; 1
    3dac:	df 01       	movw	r26, r30
    3dae:	9c 01       	movw	r18, r24
    3db0:	1d 92       	st	X+, r1
    3db2:	21 50       	subi	r18, 0x01	; 1
    3db4:	30 40       	sbci	r19, 0x00	; 0
    3db6:	e1 f7       	brne	.-8      	; 0x3db0 <STORE_Init+0x20>
		gState.firstSessionSector = 1;
    3db8:	81 e0       	ldi	r24, 0x01	; 1
    3dba:	90 e0       	ldi	r25, 0x00	; 0
    3dbc:	a0 e0       	ldi	r26, 0x00	; 0
    3dbe:	b0 e0       	ldi	r27, 0x00	; 0
    3dc0:	84 87       	std	Z+12, r24	; 0x0c
    3dc2:	95 87       	std	Z+13, r25	; 0x0d
    3dc4:	a6 87       	std	Z+14, r26	; 0x0e
    3dc6:	b7 87       	std	Z+15, r27	; 0x0f
		gState.newSessionSector = 1;
    3dc8:	80 8f       	std	Z+24, r24	; 0x18
    3dca:	91 8f       	std	Z+25, r25	; 0x19
    3dcc:	a2 8f       	std	Z+26, r26	; 0x1a
    3dce:	b3 8f       	std	Z+27, r27	; 0x1b
		gState.activeSessionMapSector = 4;
    3dd0:	84 e0       	ldi	r24, 0x04	; 4
    3dd2:	90 e0       	ldi	r25, 0x00	; 0
    3dd4:	a0 e0       	ldi	r26, 0x00	; 0
    3dd6:	b0 e0       	ldi	r27, 0x00	; 0
    3dd8:	84 8f       	std	Z+28, r24	; 0x1c
    3dda:	95 8f       	std	Z+29, r25	; 0x1d
    3ddc:	a6 8f       	std	Z+30, r26	; 0x1e
    3dde:	b7 8f       	std	Z+31, r27	; 0x1f
		gState.activeSessionMapOffset = 0;
		// TODO: Initialize other fields as needed
		if (!writeGlobalState()) {
    3de0:	0e 94 3a 25 	call	0x4a74	; 0x4a74 <writeGlobalState>
    3de4:	88 23       	and	r24, r24
    3de6:	89 f0       	breq	.+34     	; 0x3e0a <STORE_Init+0x7a>
			return false;
		}
	}

	currentSector = gState.newSessionSector;
    3de8:	80 91 3c 09 	lds	r24, 0x093C	; 0x80093c <gState+0x18>
    3dec:	90 91 3d 09 	lds	r25, 0x093D	; 0x80093d <gState+0x19>
    3df0:	a0 91 3e 09 	lds	r26, 0x093E	; 0x80093e <gState+0x1a>
    3df4:	b0 91 3f 09 	lds	r27, 0x093F	; 0x80093f <gState+0x1b>
    3df8:	80 93 50 0b 	sts	0x0B50, r24	; 0x800b50 <currentSector>
    3dfc:	90 93 51 0b 	sts	0x0B51, r25	; 0x800b51 <currentSector+0x1>
    3e00:	a0 93 52 0b 	sts	0x0B52, r26	; 0x800b52 <currentSector+0x2>
    3e04:	b0 93 53 0b 	sts	0x0B53, r27	; 0x800b53 <currentSector+0x3>
	return true;
    3e08:	01 c0       	rjmp	.+2      	; 0x3e0c <STORE_Init+0x7c>
		gState.newSessionSector = 1;
		gState.activeSessionMapSector = 4;
		gState.activeSessionMapOffset = 0;
		// TODO: Initialize other fields as needed
		if (!writeGlobalState()) {
			return false;
    3e0a:	c8 2f       	mov	r28, r24
		}
	}

	currentSector = gState.newSessionSector;
	return true;
}
    3e0c:	8c 2f       	mov	r24, r28
    3e0e:	cf 91       	pop	r28
    3e10:	08 95       	ret

Disassembly of section .text.STORE_WriteFrame:

00002d5a <STORE_WriteFrame>:

bool STORE_WriteFrame(volatile FrameData* frame) {
    2d5a:	8f 92       	push	r8
    2d5c:	9f 92       	push	r9
    2d5e:	af 92       	push	r10
    2d60:	bf 92       	push	r11
    2d62:	cf 92       	push	r12
    2d64:	df 92       	push	r13
    2d66:	ef 92       	push	r14
    2d68:	ff 92       	push	r15
    2d6a:	0f 93       	push	r16
    2d6c:	1f 93       	push	r17
    2d6e:	cf 93       	push	r28
    2d70:	df 93       	push	r29
	uint32_t bytesWritten = 0;
	uint32_t currentOffset = 0;
	uint32_t sectorsToWrite;
	
	// Verify frame size
	if(frame->m.frameBytes > FRAME_BUFFER_SIZE) {
    2d72:	fc 01       	movw	r30, r24
    2d74:	24 81       	ldd	r18, Z+4	; 0x04
    2d76:	35 81       	ldd	r19, Z+5	; 0x05
    2d78:	21 30       	cpi	r18, 0x01	; 1
    2d7a:	34 40       	sbci	r19, 0x04	; 4
    2d7c:	08 f0       	brcs	.+2      	; 0x2d80 <STORE_WriteFrame+0x26>
    2d7e:	5b c0       	rjmp	.+182    	; 0x2e36 <STORE_WriteFrame+0xdc>
    2d80:	ec 01       	movw	r28, r24
		return false;
	}

	// Copy frame data to our buffer
	memcpy(frameBuffer, (const void*)frame, frame->m.frameBytes);
    2d82:	2c 81       	ldd	r18, Y+4	; 0x04
    2d84:	3d 81       	ldd	r19, Y+5	; 0x05
    2d86:	ac 01       	movw	r20, r24
    2d88:	60 e8       	ldi	r22, 0x80	; 128
    2d8a:	84 e2       	ldi	r24, 0x24	; 36
    2d8c:	95 e0       	ldi	r25, 0x05	; 5
    2d8e:	0e 94 53 25 	call	0x4aa6	; 0x4aa6 <memcpy>

	// Zero out any remaining buffer space in last sector
	if(frame->m.frameBytes < FRAME_BUFFER_SIZE) {
    2d92:	8c 81       	ldd	r24, Y+4	; 0x04
    2d94:	9d 81       	ldd	r25, Y+5	; 0x05
    2d96:	81 15       	cp	r24, r1
    2d98:	94 40       	sbci	r25, 0x04	; 4
    2d9a:	70 f4       	brcc	.+28     	; 0x2db8 <STORE_WriteFrame+0x5e>
		memset(frameBuffer + frame->m.frameBytes, 0, FRAME_BUFFER_SIZE - frame->m.frameBytes);
    2d9c:	2c 81       	ldd	r18, Y+4	; 0x04
    2d9e:	3d 81       	ldd	r19, Y+5	; 0x05
    2da0:	8c 81       	ldd	r24, Y+4	; 0x04
    2da2:	9d 81       	ldd	r25, Y+5	; 0x05
    2da4:	40 e0       	ldi	r20, 0x00	; 0
    2da6:	54 e0       	ldi	r21, 0x04	; 4
    2da8:	42 1b       	sub	r20, r18
    2daa:	53 0b       	sbc	r21, r19
    2dac:	60 e0       	ldi	r22, 0x00	; 0
    2dae:	70 e0       	ldi	r23, 0x00	; 0
    2db0:	8c 5d       	subi	r24, 0xDC	; 220
    2db2:	9a 4f       	sbci	r25, 0xFA	; 250
    2db4:	0e 94 af 28 	call	0x515e	; 0x515e <memset>

	currentSector = gState.newSessionSector;
	return true;
}

bool STORE_WriteFrame(volatile FrameData* frame) {
    2db8:	c1 2c       	mov	r12, r1
    2dba:	d1 2c       	mov	r13, r1
    2dbc:	76 01       	movw	r14, r12
    2dbe:	68 94       	set
    2dc0:	c1 f8       	bld	r12, 1
    2dc2:	81 2c       	mov	r8, r1
    2dc4:	91 2c       	mov	r9, r1
    2dc6:	54 01       	movw	r10, r8
    2dc8:	2f c0       	rjmp	.+94     	; 0x2e28 <STORE_WriteFrame+0xce>
	// Calculate how many complete sectors we need to write
	sectorsToWrite = SECTORS_PER_FRAME;
	
	// Write all sectors
	while(sectorsToWrite > 0) {
		if(!SDWrite(currentSector, frameBuffer + currentOffset, 1)) {
    2dca:	60 91 50 0b 	lds	r22, 0x0B50	; 0x800b50 <currentSector>
    2dce:	70 91 51 0b 	lds	r23, 0x0B51	; 0x800b51 <currentSector+0x1>
    2dd2:	80 91 52 0b 	lds	r24, 0x0B52	; 0x800b52 <currentSector+0x2>
    2dd6:	90 91 53 0b 	lds	r25, 0x0B53	; 0x800b53 <currentSector+0x3>
    2dda:	01 e0       	ldi	r16, 0x01	; 1
    2ddc:	10 e0       	ldi	r17, 0x00	; 0
    2dde:	20 e0       	ldi	r18, 0x00	; 0
    2de0:	30 e0       	ldi	r19, 0x00	; 0
    2de2:	a4 01       	movw	r20, r8
    2de4:	4c 5d       	subi	r20, 0xDC	; 220
    2de6:	5a 4f       	sbci	r21, 0xFA	; 250
    2de8:	0e 94 14 18 	call	0x3028	; 0x3028 <SDWrite>
    2dec:	88 23       	and	r24, r24
    2dee:	21 f1       	breq	.+72     	; 0x2e38 <STORE_WriteFrame+0xde>
			return false;
		}
		currentSector++;
    2df0:	80 91 50 0b 	lds	r24, 0x0B50	; 0x800b50 <currentSector>
    2df4:	90 91 51 0b 	lds	r25, 0x0B51	; 0x800b51 <currentSector+0x1>
    2df8:	a0 91 52 0b 	lds	r26, 0x0B52	; 0x800b52 <currentSector+0x2>
    2dfc:	b0 91 53 0b 	lds	r27, 0x0B53	; 0x800b53 <currentSector+0x3>
    2e00:	01 96       	adiw	r24, 0x01	; 1
    2e02:	a1 1d       	adc	r26, r1
    2e04:	b1 1d       	adc	r27, r1
    2e06:	80 93 50 0b 	sts	0x0B50, r24	; 0x800b50 <currentSector>
    2e0a:	90 93 51 0b 	sts	0x0B51, r25	; 0x800b51 <currentSector+0x1>
    2e0e:	a0 93 52 0b 	sts	0x0B52, r26	; 0x800b52 <currentSector+0x2>
    2e12:	b0 93 53 0b 	sts	0x0B53, r27	; 0x800b53 <currentSector+0x3>
		currentOffset += SECTOR_SIZE;
    2e16:	42 e0       	ldi	r20, 0x02	; 2
    2e18:	94 0e       	add	r9, r20
    2e1a:	a1 1c       	adc	r10, r1
    2e1c:	b1 1c       	adc	r11, r1
		sectorsToWrite--;
    2e1e:	81 e0       	ldi	r24, 0x01	; 1
    2e20:	c8 1a       	sub	r12, r24
    2e22:	d1 08       	sbc	r13, r1
    2e24:	e1 08       	sbc	r14, r1
    2e26:	f1 08       	sbc	r15, r1
	
	// Calculate how many complete sectors we need to write
	sectorsToWrite = SECTORS_PER_FRAME;
	
	// Write all sectors
	while(sectorsToWrite > 0) {
    2e28:	c1 14       	cp	r12, r1
    2e2a:	d1 04       	cpc	r13, r1
    2e2c:	e1 04       	cpc	r14, r1
    2e2e:	f1 04       	cpc	r15, r1
    2e30:	61 f6       	brne	.-104    	; 0x2dca <STORE_WriteFrame+0x70>
		currentSector++;
		currentOffset += SECTOR_SIZE;
		sectorsToWrite--;
	}
	
	return true;
    2e32:	81 e0       	ldi	r24, 0x01	; 1
    2e34:	01 c0       	rjmp	.+2      	; 0x2e38 <STORE_WriteFrame+0xde>
	uint32_t currentOffset = 0;
	uint32_t sectorsToWrite;
	
	// Verify frame size
	if(frame->m.frameBytes > FRAME_BUFFER_SIZE) {
		return false;
    2e36:	80 e0       	ldi	r24, 0x00	; 0
		currentOffset += SECTOR_SIZE;
		sectorsToWrite--;
	}
	
	return true;
}
    2e38:	df 91       	pop	r29
    2e3a:	cf 91       	pop	r28
    2e3c:	1f 91       	pop	r17
    2e3e:	0f 91       	pop	r16
    2e40:	ff 90       	pop	r15
    2e42:	ef 90       	pop	r14
    2e44:	df 90       	pop	r13
    2e46:	cf 90       	pop	r12
    2e48:	bf 90       	pop	r11
    2e4a:	af 90       	pop	r10
    2e4c:	9f 90       	pop	r9
    2e4e:	8f 90       	pop	r8
    2e50:	08 95       	ret

Disassembly of section .text.STORE_StartNewSession:

000045a8 <STORE_StartNewSession>:

bool STORE_StartNewSession(void) {
	// Update session info
	gState.sessionCount++;
    45a8:	e4 e2       	ldi	r30, 0x24	; 36
    45aa:	f9 e0       	ldi	r31, 0x09	; 9
    45ac:	84 89       	ldd	r24, Z+20	; 0x14
    45ae:	95 89       	ldd	r25, Z+21	; 0x15
    45b0:	a6 89       	ldd	r26, Z+22	; 0x16
    45b2:	b7 89       	ldd	r27, Z+23	; 0x17
    45b4:	01 96       	adiw	r24, 0x01	; 1
    45b6:	a1 1d       	adc	r26, r1
    45b8:	b1 1d       	adc	r27, r1
    45ba:	84 8b       	std	Z+20, r24	; 0x14
    45bc:	95 8b       	std	Z+21, r25	; 0x15
    45be:	a6 8b       	std	Z+22, r26	; 0x16
    45c0:	b7 8b       	std	Z+23, r27	; 0x17
	gState.newSessionSector = currentSector;
    45c2:	80 91 50 0b 	lds	r24, 0x0B50	; 0x800b50 <currentSector>
    45c6:	90 91 51 0b 	lds	r25, 0x0B51	; 0x800b51 <currentSector+0x1>
    45ca:	a0 91 52 0b 	lds	r26, 0x0B52	; 0x800b52 <currentSector+0x2>
    45ce:	b0 91 53 0b 	lds	r27, 0x0B53	; 0x800b53 <currentSector+0x3>
    45d2:	80 8f       	std	Z+24, r24	; 0x18
    45d4:	91 8f       	std	Z+25, r25	; 0x19
    45d6:	a2 8f       	std	Z+26, r26	; 0x1a
    45d8:	b3 8f       	std	Z+27, r27	; 0x1b
	
	// Ensure sector alignment for new sessions
	if(currentSector % SECTORS_PER_FRAME != 0) {
    45da:	80 ff       	sbrs	r24, 0
    45dc:	0c c0       	rjmp	.+24     	; 0x45f6 <STORE_StartNewSession+0x4e>
		currentSector += SECTORS_PER_FRAME - (currentSector % SECTORS_PER_FRAME);
    45de:	8e 7f       	andi	r24, 0xFE	; 254
    45e0:	02 96       	adiw	r24, 0x02	; 2
    45e2:	a1 1d       	adc	r26, r1
    45e4:	b1 1d       	adc	r27, r1
    45e6:	80 93 50 0b 	sts	0x0B50, r24	; 0x800b50 <currentSector>
    45ea:	90 93 51 0b 	sts	0x0B51, r25	; 0x800b51 <currentSector+0x1>
    45ee:	a0 93 52 0b 	sts	0x0B52, r26	; 0x800b52 <currentSector+0x2>
    45f2:	b0 93 53 0b 	sts	0x0B53, r27	; 0x800b53 <currentSector+0x3>
	}
	
	return updateSessionMap();
    45f6:	0e 94 82 18 	call	0x3104	; 0x3104 <updateSessionMap>
}
    45fa:	08 95       	ret

Disassembly of section .text.STORE_EndSession:

000043fa <STORE_EndSession>:

bool STORE_EndSession(void) {
	// Ensure we end on a frame boundary
	if(currentSector % SECTORS_PER_FRAME != 0) {
    43fa:	80 91 50 0b 	lds	r24, 0x0B50	; 0x800b50 <currentSector>
    43fe:	90 91 51 0b 	lds	r25, 0x0B51	; 0x800b51 <currentSector+0x1>
    4402:	a0 91 52 0b 	lds	r26, 0x0B52	; 0x800b52 <currentSector+0x2>
    4406:	b0 91 53 0b 	lds	r27, 0x0B53	; 0x800b53 <currentSector+0x3>
    440a:	80 ff       	sbrs	r24, 0
    440c:	0c c0       	rjmp	.+24     	; 0x4426 <STORE_EndSession+0x2c>
		currentSector += SECTORS_PER_FRAME - (currentSector % SECTORS_PER_FRAME);
    440e:	8e 7f       	andi	r24, 0xFE	; 254
    4410:	02 96       	adiw	r24, 0x02	; 2
    4412:	a1 1d       	adc	r26, r1
    4414:	b1 1d       	adc	r27, r1
    4416:	80 93 50 0b 	sts	0x0B50, r24	; 0x800b50 <currentSector>
    441a:	90 93 51 0b 	sts	0x0B51, r25	; 0x800b51 <currentSector+0x1>
    441e:	a0 93 52 0b 	sts	0x0B52, r26	; 0x800b52 <currentSector+0x2>
    4422:	b0 93 53 0b 	sts	0x0B53, r27	; 0x800b53 <currentSector+0x3>
	}
	
	gState.lastSessionSector = currentSector - 1;
    4426:	80 91 50 0b 	lds	r24, 0x0B50	; 0x800b50 <currentSector>
    442a:	90 91 51 0b 	lds	r25, 0x0B51	; 0x800b51 <currentSector+0x1>
    442e:	a0 91 52 0b 	lds	r26, 0x0B52	; 0x800b52 <currentSector+0x2>
    4432:	b0 91 53 0b 	lds	r27, 0x0B53	; 0x800b53 <currentSector+0x3>
    4436:	01 97       	sbiw	r24, 0x01	; 1
    4438:	a1 09       	sbc	r26, r1
    443a:	b1 09       	sbc	r27, r1
    443c:	80 93 34 09 	sts	0x0934, r24	; 0x800934 <gState+0x10>
    4440:	90 93 35 09 	sts	0x0935, r25	; 0x800935 <gState+0x11>
    4444:	a0 93 36 09 	sts	0x0936, r26	; 0x800936 <gState+0x12>
    4448:	b0 93 37 09 	sts	0x0937, r27	; 0x800937 <gState+0x13>
	return writeGlobalState();
    444c:	0e 94 3a 25 	call	0x4a74	; 0x4a74 <writeGlobalState>
}
    4450:	08 95       	ret

Disassembly of section .text.vUARTtxDataAvailable:

00004fac <vUARTtxDataAvailable>:
#endif

bool vUARTIsBusy(void) {
	return ((sg_etxState != ESTATE_IDLE) ||
		(sg_eCell_mc_rxState != ESTATE_IDLE));
}
    4fac:	80 91 80 0b 	lds	r24, 0x0B80	; 0x800b80 <sg_u8SendIndex>
    4fb0:	81 11       	cpse	r24, r1
    4fb2:	06 c0       	rjmp	.+12     	; 0x4fc0 <vUARTtxDataAvailable+0x14>
    4fb4:	0e 94 31 26 	call	0x4c62	; 0x4c62 <PlatformGetSendData>
    4fb8:	90 93 63 0b 	sts	0x0B63, r25	; 0x800b63 <sg_u8SendData+0x1>
    4fbc:	80 93 62 0b 	sts	0x0B62, r24	; 0x800b62 <sg_u8SendData>
    4fc0:	80 91 80 0b 	lds	r24, 0x0B80	; 0x800b80 <sg_u8SendIndex>
    4fc4:	81 11       	cpse	r24, r1
    4fc6:	02 c0       	rjmp	.+4      	; 0x4fcc <vUARTtxDataAvailable+0x20>
    4fc8:	81 e0       	ldi	r24, 0x01	; 1
    4fca:	08 95       	ret
    4fcc:	80 e0       	ldi	r24, 0x00	; 0
    4fce:	08 95       	ret

Disassembly of section .text.vUARTtxDataGet:

0000473e <vUARTtxDataGet>:
    473e:	80 91 80 0b 	lds	r24, 0x0B80	; 0x800b80 <sg_u8SendIndex>
    4742:	81 11       	cpse	r24, r1
    4744:	10 c0       	rjmp	.+32     	; 0x4766 <vUARTtxDataGet+0x28>
    4746:	81 e0       	ldi	r24, 0x01	; 1
    4748:	0e 94 31 26 	call	0x4c62	; 0x4c62 <PlatformGetSendData>
    474c:	e2 e6       	ldi	r30, 0x62	; 98
    474e:	fb e0       	ldi	r31, 0x0B	; 11
    4750:	90 83       	st	Z, r25
    4752:	81 83       	std	Z+1, r24	; 0x01
    4754:	80 81       	ld	r24, Z
    4756:	88 23       	and	r24, r24
    4758:	24 f4       	brge	.+8      	; 0x4762 <vUARTtxDataGet+0x24>
    475a:	81 e0       	ldi	r24, 0x01	; 1
    475c:	80 93 82 0b 	sts	0x0B82, r24	; 0x800b82 <sg_bCellReportsReuested>
    4760:	02 c0       	rjmp	.+4      	; 0x4766 <vUARTtxDataGet+0x28>
    4762:	10 92 82 0b 	sts	0x0B82, r1	; 0x800b82 <sg_bCellReportsReuested>
    4766:	e0 91 80 0b 	lds	r30, 0x0B80	; 0x800b80 <sg_u8SendIndex>
    476a:	f0 e0       	ldi	r31, 0x00	; 0
    476c:	ee 59       	subi	r30, 0x9E	; 158
    476e:	f4 4f       	sbci	r31, 0xF4	; 244
    4770:	80 81       	ld	r24, Z
    4772:	90 91 80 0b 	lds	r25, 0x0B80	; 0x800b80 <sg_u8SendIndex>
    4776:	9f 5f       	subi	r25, 0xFF	; 255
    4778:	90 93 80 0b 	sts	0x0B80, r25	; 0x800b80 <sg_u8SendIndex>
    477c:	90 91 80 0b 	lds	r25, 0x0B80	; 0x800b80 <sg_u8SendIndex>
    4780:	92 30       	cpi	r25, 0x02	; 2
    4782:	10 f0       	brcs	.+4      	; 0x4788 <vUARTtxDataGet+0x4a>
    4784:	10 92 80 0b 	sts	0x0B80, r1	; 0x800b80 <sg_u8SendIndex>
    4788:	08 95       	ret

Disassembly of section .text.vUARTRXReset:

0000524a <vUARTRXReset>:

// Called when we have a string timeout or need to reset the state machine
// for the MC RX side of things
void vUARTRXReset(void)
{
	sg_eCell_mc_rxState = ESTATE_IDLE;
    524a:	10 92 89 0b 	sts	0x0B89, r1	; 0x800b89 <sg_eCell_mc_rxState>
	vUARTRXStart();
    524e:	0e 94 71 28 	call	0x50e2	; 0x50e2 <vUARTRXStart>
    5252:	08 95       	ret

Disassembly of section .text.vUARTStarttx:

000044a8 <vUARTStarttx>:
#endif

bool vUARTIsBusy(void) {
	return ((sg_etxState != ESTATE_IDLE) ||
		(sg_eCell_mc_rxState != ESTATE_IDLE));
}
    44a8:	80 91 83 0b 	lds	r24, 0x0B83	; 0x800b83 <sg_etxState>
    44ac:	81 11       	cpse	r24, r1
    44ae:	23 c0       	rjmp	.+70     	; 0x44f6 <vUARTStarttx+0x4e>
    44b0:	80 91 89 0b 	lds	r24, 0x0B89	; 0x800b89 <sg_eCell_mc_rxState>
    44b4:	81 11       	cpse	r24, r1
    44b6:	21 c0       	rjmp	.+66     	; 0x44fa <vUARTStarttx+0x52>
    44b8:	82 e0       	ldi	r24, 0x02	; 2
    44ba:	80 93 83 0b 	sts	0x0B83, r24	; 0x800b83 <sg_etxState>
    44be:	10 92 80 0b 	sts	0x0B80, r1	; 0x800b80 <sg_u8SendIndex>
    44c2:	10 92 86 0b 	sts	0x0B86, r1	; 0x800b86 <sg_u8txBitCount>
    44c6:	81 e0       	ldi	r24, 0x01	; 1
    44c8:	80 93 81 0b 	sts	0x0B81, r24	; 0x800b81 <sg_bMCTxNextBit>
    44cc:	86 b5       	in	r24, 0x26	; 38
    44ce:	8e 5c       	subi	r24, 0xCE	; 206
    44d0:	87 bd       	out	0x27, r24	; 39
    44d2:	85 b3       	in	r24, 0x15	; 21
    44d4:	82 60       	ori	r24, 0x02	; 2
    44d6:	85 bb       	out	0x15, r24	; 21
    44d8:	ee e6       	ldi	r30, 0x6E	; 110
    44da:	f0 e0       	ldi	r31, 0x00	; 0
    44dc:	80 81       	ld	r24, Z
    44de:	82 60       	ori	r24, 0x02	; 2
    44e0:	80 83       	st	Z, r24
    44e2:	0e 94 d6 27 	call	0x4fac	; 0x4fac <vUARTtxDataAvailable>
    44e6:	80 93 84 0b 	sts	0x0B84, r24	; 0x800b84 <sg_btxMoreAvailable>
    44ea:	0e 94 9f 23 	call	0x473e	; 0x473e <vUARTtxDataGet>
    44ee:	80 93 85 0b 	sts	0x0B85, r24	; 0x800b85 <sg_u8txDataByte>
    44f2:	81 e0       	ldi	r24, 0x01	; 1
    44f4:	08 95       	ret
    44f6:	80 e0       	ldi	r24, 0x00	; 0
    44f8:	08 95       	ret
    44fa:	80 e0       	ldi	r24, 0x00	; 0
    44fc:	08 95       	ret

Disassembly of section .text.__vector_8:

00004346 <__vector_8>:
    4346:	1f 92       	push	r1
    4348:	0f 92       	push	r0
    434a:	0f b6       	in	r0, 0x3f	; 63
    434c:	0f 92       	push	r0
    434e:	11 24       	eor	r1, r1
    4350:	8f 93       	push	r24
    4352:	ef 93       	push	r30
    4354:	ff 93       	push	r31
    4356:	80 91 89 0b 	lds	r24, 0x0B89	; 0x800b89 <sg_eCell_mc_rxState>
    435a:	88 23       	and	r24, r24
    435c:	11 f0       	breq	.+4      	; 0x4362 <__vector_8+0x1c>
    435e:	83 30       	cpi	r24, 0x03	; 3
    4360:	c1 f4       	brne	.+48     	; 0x4392 <__vector_8+0x4c>
    4362:	86 b5       	in	r24, 0x26	; 38
    4364:	85 5b       	subi	r24, 0xB5	; 181
    4366:	88 bd       	out	0x28, r24	; 40
    4368:	85 b3       	in	r24, 0x15	; 21
    436a:	84 60       	ori	r24, 0x04	; 4
    436c:	85 bb       	out	0x15, r24	; 21
    436e:	ee e6       	ldi	r30, 0x6E	; 110
    4370:	f0 e0       	ldi	r31, 0x00	; 0
    4372:	80 81       	ld	r24, Z
    4374:	84 60       	ori	r24, 0x04	; 4
    4376:	80 83       	st	Z, r24
    4378:	8d b3       	in	r24, 0x1d	; 29
    437a:	8d 7f       	andi	r24, 0xFD	; 253
    437c:	8d bb       	out	0x1d, r24	; 29
    437e:	8b b1       	in	r24, 0x0b	; 11
    4380:	80 62       	ori	r24, 0x20	; 32
    4382:	8b b9       	out	0x0b, r24	; 11
    4384:	10 92 7f 0b 	sts	0x0B7F, r1	; 0x800b7f <sg_bState>
    4388:	81 e0       	ldi	r24, 0x01	; 1
    438a:	80 93 89 0b 	sts	0x0B89, r24	; 0x800b89 <sg_eCell_mc_rxState>
    438e:	10 92 8b 0b 	sts	0x0B8B, r1	; 0x800b8b <sg_u8Cell_mc_rxBitCount>
    4392:	ff 91       	pop	r31
    4394:	ef 91       	pop	r30
    4396:	8f 91       	pop	r24
    4398:	0f 90       	pop	r0
    439a:	0f be       	out	0x3f, r0	; 63
    439c:	0f 90       	pop	r0
    439e:	1f 90       	pop	r1
    43a0:	18 95       	reti

Disassembly of section .text.__vector_16:

00002e52 <__vector_16>:
    2e52:	1f 92       	push	r1
    2e54:	0f 92       	push	r0
    2e56:	0f b6       	in	r0, 0x3f	; 63
    2e58:	0f 92       	push	r0
    2e5a:	11 24       	eor	r1, r1
    2e5c:	2f 93       	push	r18
    2e5e:	3f 93       	push	r19
    2e60:	4f 93       	push	r20
    2e62:	5f 93       	push	r21
    2e64:	6f 93       	push	r22
    2e66:	7f 93       	push	r23
    2e68:	8f 93       	push	r24
    2e6a:	9f 93       	push	r25
    2e6c:	af 93       	push	r26
    2e6e:	bf 93       	push	r27
    2e70:	ef 93       	push	r30
    2e72:	ff 93       	push	r31
    2e74:	86 b5       	in	r24, 0x26	; 38
    2e76:	8e 5c       	subi	r24, 0xCE	; 206
    2e78:	88 bd       	out	0x28, r24	; 40
    2e7a:	85 b3       	in	r24, 0x15	; 21
    2e7c:	84 60       	ori	r24, 0x04	; 4
    2e7e:	85 bb       	out	0x15, r24	; 21
    2e80:	ee e6       	ldi	r30, 0x6E	; 110
    2e82:	f0 e0       	ldi	r31, 0x00	; 0
    2e84:	80 81       	ld	r24, Z
    2e86:	84 60       	ori	r24, 0x04	; 4
    2e88:	80 83       	st	Z, r24
    2e8a:	20 91 88 0b 	lds	r18, 0x0B88	; 0x800b88 <sg_bCell_mc_rxPriorState>
    2e8e:	83 b1       	in	r24, 0x03	; 3
    2e90:	82 fb       	bst	r24, 2
    2e92:	88 27       	eor	r24, r24
    2e94:	80 f9       	bld	r24, 0
    2e96:	80 93 88 0b 	sts	0x0B88, r24	; 0x800b88 <sg_bCell_mc_rxPriorState>
    2e9a:	90 91 7f 0b 	lds	r25, 0x0B7F	; 0x800b7f <sg_bState>
    2e9e:	99 23       	and	r25, r25
    2ea0:	31 f0       	breq	.+12     	; 0x2eae <__vector_16+0x5c>
    2ea2:	9b b1       	in	r25, 0x0b	; 11
    2ea4:	90 62       	ori	r25, 0x20	; 32
    2ea6:	9b b9       	out	0x0b, r25	; 11
    2ea8:	10 92 7f 0b 	sts	0x0B7F, r1	; 0x800b7f <sg_bState>
    2eac:	06 c0       	rjmp	.+12     	; 0x2eba <__vector_16+0x68>
    2eae:	9b b1       	in	r25, 0x0b	; 11
    2eb0:	9f 7d       	andi	r25, 0xDF	; 223
    2eb2:	9b b9       	out	0x0b, r25	; 11
    2eb4:	81 e0       	ldi	r24, 0x01	; 1
    2eb6:	80 93 7f 0b 	sts	0x0B7F, r24	; 0x800b7f <sg_bState>
    2eba:	80 91 8b 0b 	lds	r24, 0x0B8B	; 0x800b8b <sg_u8Cell_mc_rxBitCount>
    2ebe:	8f 5f       	subi	r24, 0xFF	; 255
    2ec0:	80 93 8b 0b 	sts	0x0B8B, r24	; 0x800b8b <sg_u8Cell_mc_rxBitCount>
    2ec4:	81 30       	cpi	r24, 0x01	; 1
    2ec6:	19 f4       	brne	.+6      	; 0x2ece <__vector_16+0x7c>
    2ec8:	10 92 8a 0b 	sts	0x0B8A, r1	; 0x800b8a <sg_u8rxDataByte>
    2ecc:	2b c0       	rjmp	.+86     	; 0x2f24 <__vector_16+0xd2>
    2ece:	8a 30       	cpi	r24, 0x0A	; 10
    2ed0:	38 f4       	brcc	.+14     	; 0x2ee0 <__vector_16+0x8e>
    2ed2:	80 91 8a 0b 	lds	r24, 0x0B8A	; 0x800b8a <sg_u8rxDataByte>
    2ed6:	88 0f       	add	r24, r24
    2ed8:	82 2b       	or	r24, r18
    2eda:	80 93 8a 0b 	sts	0x0B8A, r24	; 0x800b8a <sg_u8rxDataByte>
    2ede:	22 c0       	rjmp	.+68     	; 0x2f24 <__vector_16+0xd2>
    2ee0:	20 93 87 0b 	sts	0x0B87, r18	; 0x800b87 <sg_bCell_mc_rxMoreData>
    2ee4:	8b b1       	in	r24, 0x0b	; 11
    2ee6:	8f 7d       	andi	r24, 0xDF	; 223
    2ee8:	8b b9       	out	0x0b, r24	; 11
    2eea:	81 e0       	ldi	r24, 0x01	; 1
    2eec:	80 93 7f 0b 	sts	0x0B7F, r24	; 0x800b7f <sg_bState>
    2ef0:	e9 e6       	ldi	r30, 0x69	; 105
    2ef2:	f0 e0       	ldi	r31, 0x00	; 0
    2ef4:	9c e0       	ldi	r25, 0x0C	; 12
    2ef6:	90 83       	st	Z, r25
    2ef8:	8c b3       	in	r24, 0x1c	; 28
    2efa:	82 60       	ori	r24, 0x02	; 2
    2efc:	8c bb       	out	0x1c, r24	; 28
    2efe:	90 83       	st	Z, r25
    2f00:	8c b3       	in	r24, 0x1c	; 28
    2f02:	82 60       	ori	r24, 0x02	; 2
    2f04:	8c bb       	out	0x1c, r24	; 28
    2f06:	8d b3       	in	r24, 0x1d	; 29
    2f08:	82 60       	ori	r24, 0x02	; 2
    2f0a:	8d bb       	out	0x1d, r24	; 29
    2f0c:	ee e6       	ldi	r30, 0x6E	; 110
    2f0e:	f0 e0       	ldi	r31, 0x00	; 0
    2f10:	80 81       	ld	r24, Z
    2f12:	8b 7f       	andi	r24, 0xFB	; 251
    2f14:	80 83       	st	Z, r24
    2f16:	80 91 8a 0b 	lds	r24, 0x0B8A	; 0x800b8a <sg_u8rxDataByte>
    2f1a:	0e 94 3c 1c 	call	0x3878	; 0x3878 <vUARTRXData>
    2f1e:	83 e0       	ldi	r24, 0x03	; 3
    2f20:	80 93 89 0b 	sts	0x0B89, r24	; 0x800b89 <sg_eCell_mc_rxState>
    2f24:	ff 91       	pop	r31
    2f26:	ef 91       	pop	r30
    2f28:	bf 91       	pop	r27
    2f2a:	af 91       	pop	r26
    2f2c:	9f 91       	pop	r25
    2f2e:	8f 91       	pop	r24
    2f30:	7f 91       	pop	r23
    2f32:	6f 91       	pop	r22
    2f34:	5f 91       	pop	r21
    2f36:	4f 91       	pop	r20
    2f38:	3f 91       	pop	r19
    2f3a:	2f 91       	pop	r18
    2f3c:	0f 90       	pop	r0
    2f3e:	0f be       	out	0x3f, r0	; 63
    2f40:	0f 90       	pop	r0
    2f42:	1f 90       	pop	r1
    2f44:	18 95       	reti

Disassembly of section .text.__vector_15:

000027d2 <__vector_15>:
    27d2:	1f 92       	push	r1
    27d4:	0f 92       	push	r0
    27d6:	0f b6       	in	r0, 0x3f	; 63
    27d8:	0f 92       	push	r0
    27da:	11 24       	eor	r1, r1
    27dc:	2f 93       	push	r18
    27de:	3f 93       	push	r19
    27e0:	4f 93       	push	r20
    27e2:	5f 93       	push	r21
    27e4:	6f 93       	push	r22
    27e6:	7f 93       	push	r23
    27e8:	8f 93       	push	r24
    27ea:	9f 93       	push	r25
    27ec:	af 93       	push	r26
    27ee:	bf 93       	push	r27
    27f0:	ef 93       	push	r30
    27f2:	ff 93       	push	r31
    27f4:	86 b5       	in	r24, 0x26	; 38
    27f6:	83 5d       	subi	r24, 0xD3	; 211
    27f8:	87 bd       	out	0x27, r24	; 39
    27fa:	85 b3       	in	r24, 0x15	; 21
    27fc:	82 60       	ori	r24, 0x02	; 2
    27fe:	85 bb       	out	0x15, r24	; 21
    2800:	ee e6       	ldi	r30, 0x6E	; 110
    2802:	f0 e0       	ldi	r31, 0x00	; 0
    2804:	80 81       	ld	r24, Z
    2806:	82 60       	ori	r24, 0x02	; 2
    2808:	80 83       	st	Z, r24
    280a:	80 91 81 0b 	lds	r24, 0x0B81	; 0x800b81 <sg_bMCTxNextBit>
    280e:	88 23       	and	r24, r24
    2810:	21 f0       	breq	.+8      	; 0x281a <__vector_15+0x48>
    2812:	85 b1       	in	r24, 0x05	; 5
    2814:	88 60       	ori	r24, 0x08	; 8
    2816:	85 b9       	out	0x05, r24	; 5
    2818:	03 c0       	rjmp	.+6      	; 0x2820 <__vector_15+0x4e>
    281a:	85 b1       	in	r24, 0x05	; 5
    281c:	87 7f       	andi	r24, 0xF7	; 247
    281e:	85 b9       	out	0x05, r24	; 5
    2820:	80 91 86 0b 	lds	r24, 0x0B86	; 0x800b86 <sg_u8txBitCount>
    2824:	8f 5f       	subi	r24, 0xFF	; 255
    2826:	80 93 86 0b 	sts	0x0B86, r24	; 0x800b86 <sg_u8txBitCount>
    282a:	80 91 86 0b 	lds	r24, 0x0B86	; 0x800b86 <sg_u8txBitCount>
    282e:	83 30       	cpi	r24, 0x03	; 3
    2830:	61 f4       	brne	.+24     	; 0x284a <__vector_15+0x78>
    2832:	80 91 82 0b 	lds	r24, 0x0B82	; 0x800b82 <sg_bCellReportsReuested>
    2836:	88 23       	and	r24, r24
    2838:	41 f0       	breq	.+16     	; 0x284a <__vector_15+0x78>
    283a:	8b e0       	ldi	r24, 0x0B	; 11
    283c:	80 93 86 0b 	sts	0x0B86, r24	; 0x800b86 <sg_u8txBitCount>
    2840:	10 92 81 0b 	sts	0x0B81, r1	; 0x800b81 <sg_bMCTxNextBit>
    2844:	10 92 84 0b 	sts	0x0B84, r1	; 0x800b84 <sg_btxMoreAvailable>
    2848:	4d c0       	rjmp	.+154    	; 0x28e4 <__vector_15+0x112>
    284a:	80 91 86 0b 	lds	r24, 0x0B86	; 0x800b86 <sg_u8txBitCount>
    284e:	8a 30       	cpi	r24, 0x0A	; 10
    2850:	80 f4       	brcc	.+32     	; 0x2872 <__vector_15+0xa0>
    2852:	80 91 85 0b 	lds	r24, 0x0B85	; 0x800b85 <sg_u8txDataByte>
    2856:	88 23       	and	r24, r24
    2858:	24 f4       	brge	.+8      	; 0x2862 <__vector_15+0x90>
    285a:	81 e0       	ldi	r24, 0x01	; 1
    285c:	80 93 81 0b 	sts	0x0B81, r24	; 0x800b81 <sg_bMCTxNextBit>
    2860:	02 c0       	rjmp	.+4      	; 0x2866 <__vector_15+0x94>
    2862:	10 92 81 0b 	sts	0x0B81, r1	; 0x800b81 <sg_bMCTxNextBit>
    2866:	80 91 85 0b 	lds	r24, 0x0B85	; 0x800b85 <sg_u8txDataByte>
    286a:	88 0f       	add	r24, r24
    286c:	80 93 85 0b 	sts	0x0B85, r24	; 0x800b85 <sg_u8txDataByte>
    2870:	39 c0       	rjmp	.+114    	; 0x28e4 <__vector_15+0x112>
    2872:	80 91 86 0b 	lds	r24, 0x0B86	; 0x800b86 <sg_u8txBitCount>
    2876:	8a 30       	cpi	r24, 0x0A	; 10
    2878:	29 f4       	brne	.+10     	; 0x2884 <__vector_15+0xb2>
    287a:	80 91 84 0b 	lds	r24, 0x0B84	; 0x800b84 <sg_btxMoreAvailable>
    287e:	80 93 81 0b 	sts	0x0B81, r24	; 0x800b81 <sg_bMCTxNextBit>
    2882:	30 c0       	rjmp	.+96     	; 0x28e4 <__vector_15+0x112>
    2884:	80 91 86 0b 	lds	r24, 0x0B86	; 0x800b86 <sg_u8txBitCount>
    2888:	8b 30       	cpi	r24, 0x0B	; 11
    288a:	19 f4       	brne	.+6      	; 0x2892 <__vector_15+0xc0>
    288c:	10 92 81 0b 	sts	0x0B81, r1	; 0x800b81 <sg_bMCTxNextBit>
    2890:	29 c0       	rjmp	.+82     	; 0x28e4 <__vector_15+0x112>
    2892:	80 91 86 0b 	lds	r24, 0x0B86	; 0x800b86 <sg_u8txBitCount>
    2896:	8c 30       	cpi	r24, 0x0C	; 12
    2898:	29 f5       	brne	.+74     	; 0x28e4 <__vector_15+0x112>
    289a:	80 91 84 0b 	lds	r24, 0x0B84	; 0x800b84 <sg_btxMoreAvailable>
    289e:	80 93 81 0b 	sts	0x0B81, r24	; 0x800b81 <sg_bMCTxNextBit>
    28a2:	10 92 86 0b 	sts	0x0B86, r1	; 0x800b86 <sg_u8txBitCount>
    28a6:	80 91 84 0b 	lds	r24, 0x0B84	; 0x800b84 <sg_btxMoreAvailable>
    28aa:	81 11       	cpse	r24, r1
    28ac:	08 c0       	rjmp	.+16     	; 0x28be <__vector_15+0xec>
    28ae:	10 92 83 0b 	sts	0x0B83, r1	; 0x800b83 <sg_etxState>
    28b2:	ee e6       	ldi	r30, 0x6E	; 110
    28b4:	f0 e0       	ldi	r31, 0x00	; 0
    28b6:	80 81       	ld	r24, Z
    28b8:	8d 7f       	andi	r24, 0xFD	; 253
    28ba:	80 83       	st	Z, r24
    28bc:	13 c0       	rjmp	.+38     	; 0x28e4 <__vector_15+0x112>
    28be:	0e 94 d6 27 	call	0x4fac	; 0x4fac <vUARTtxDataAvailable>
    28c2:	80 93 84 0b 	sts	0x0B84, r24	; 0x800b84 <sg_btxMoreAvailable>
    28c6:	0e 94 9f 23 	call	0x473e	; 0x473e <vUARTtxDataGet>
    28ca:	80 93 85 0b 	sts	0x0B85, r24	; 0x800b85 <sg_u8txDataByte>
    28ce:	86 b5       	in	r24, 0x26	; 38
    28d0:	88 53       	subi	r24, 0x38	; 56
    28d2:	87 bd       	out	0x27, r24	; 39
    28d4:	85 b3       	in	r24, 0x15	; 21
    28d6:	82 60       	ori	r24, 0x02	; 2
    28d8:	85 bb       	out	0x15, r24	; 21
    28da:	ee e6       	ldi	r30, 0x6E	; 110
    28dc:	f0 e0       	ldi	r31, 0x00	; 0
    28de:	80 81       	ld	r24, Z
    28e0:	82 60       	ori	r24, 0x02	; 2
    28e2:	80 83       	st	Z, r24
    28e4:	ff 91       	pop	r31
    28e6:	ef 91       	pop	r30
    28e8:	bf 91       	pop	r27
    28ea:	af 91       	pop	r26
    28ec:	9f 91       	pop	r25
    28ee:	8f 91       	pop	r24
    28f0:	7f 91       	pop	r23
    28f2:	6f 91       	pop	r22
    28f4:	5f 91       	pop	r21
    28f6:	4f 91       	pop	r20
    28f8:	3f 91       	pop	r19
    28fa:	2f 91       	pop	r18
    28fc:	0f 90       	pop	r0
    28fe:	0f be       	out	0x3f, r0	; 63
    2900:	0f 90       	pop	r0
    2902:	1f 90       	pop	r1
    2904:	18 95       	reti

Disassembly of section .text.vUARTInit:

0000493a <vUARTInit>:
    493a:	85 b7       	in	r24, 0x35	; 53
    493c:	8f 7e       	andi	r24, 0xEF	; 239
    493e:	85 bf       	out	0x35, r24	; 53
    4940:	84 b1       	in	r24, 0x04	; 4
    4942:	88 60       	ori	r24, 0x08	; 8
    4944:	84 b9       	out	0x04, r24	; 4
    4946:	84 b1       	in	r24, 0x04	; 4
    4948:	8b 7f       	andi	r24, 0xFB	; 251
    494a:	84 b9       	out	0x04, r24	; 4
    494c:	85 b1       	in	r24, 0x05	; 5
    494e:	8b 7f       	andi	r24, 0xFB	; 251
    4950:	85 b9       	out	0x05, r24	; 5
    4952:	8a b1       	in	r24, 0x0a	; 10
    4954:	80 62       	ori	r24, 0x20	; 32
    4956:	8a b9       	out	0x0a, r24	; 10
    4958:	8b b1       	in	r24, 0x0b	; 11
    495a:	80 62       	ori	r24, 0x20	; 32
    495c:	8b b9       	out	0x0b, r24	; 11
    495e:	8d b3       	in	r24, 0x1d	; 29
    4960:	8d 7f       	andi	r24, 0xFD	; 253
    4962:	8d bb       	out	0x1d, r24	; 29
    4964:	10 92 83 0b 	sts	0x0B83, r1	; 0x800b83 <sg_etxState>
    4968:	85 b1       	in	r24, 0x05	; 5
    496a:	87 7f       	andi	r24, 0xF7	; 247
    496c:	85 b9       	out	0x05, r24	; 5
    496e:	08 95       	ret

Disassembly of section .text.vUARTInitReceive:

00005138 <vUARTInitReceive>:
    5138:	8c e0       	ldi	r24, 0x0C	; 12
    513a:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f0069>
    513e:	8c b3       	in	r24, 0x1c	; 28
    5140:	82 60       	ori	r24, 0x02	; 2
    5142:	8c bb       	out	0x1c, r24	; 28
    5144:	8d b3       	in	r24, 0x1d	; 29
    5146:	82 60       	ori	r24, 0x02	; 2
    5148:	8d bb       	out	0x1d, r24	; 29
    514a:	08 95       	ret

Disassembly of section .text.libgcc.div:

00004c8a <__udivmodhi4>:
    4c8a:	aa 1b       	sub	r26, r26
    4c8c:	bb 1b       	sub	r27, r27
    4c8e:	51 e1       	ldi	r21, 0x11	; 17
    4c90:	07 c0       	rjmp	.+14     	; 0x4ca0 <__udivmodhi4_ep>

00004c92 <__udivmodhi4_loop>:
    4c92:	aa 1f       	adc	r26, r26
    4c94:	bb 1f       	adc	r27, r27
    4c96:	a6 17       	cp	r26, r22
    4c98:	b7 07       	cpc	r27, r23
    4c9a:	10 f0       	brcs	.+4      	; 0x4ca0 <__udivmodhi4_ep>
    4c9c:	a6 1b       	sub	r26, r22
    4c9e:	b7 0b       	sbc	r27, r23

00004ca0 <__udivmodhi4_ep>:
    4ca0:	88 1f       	adc	r24, r24
    4ca2:	99 1f       	adc	r25, r25
    4ca4:	5a 95       	dec	r21
    4ca6:	a9 f7       	brne	.-22     	; 0x4c92 <__udivmodhi4_loop>
    4ca8:	80 95       	com	r24
    4caa:	90 95       	com	r25
    4cac:	bc 01       	movw	r22, r24
    4cae:	cd 01       	movw	r24, r26
    4cb0:	08 95       	ret

Disassembly of section .text.libgcc.div:

000047ce <__udivmodsi4>:
    47ce:	a1 e2       	ldi	r26, 0x21	; 33
    47d0:	1a 2e       	mov	r1, r26
    47d2:	aa 1b       	sub	r26, r26
    47d4:	bb 1b       	sub	r27, r27
    47d6:	fd 01       	movw	r30, r26
    47d8:	0d c0       	rjmp	.+26     	; 0x47f4 <__udivmodsi4_ep>

000047da <__udivmodsi4_loop>:
    47da:	aa 1f       	adc	r26, r26
    47dc:	bb 1f       	adc	r27, r27
    47de:	ee 1f       	adc	r30, r30
    47e0:	ff 1f       	adc	r31, r31
    47e2:	a2 17       	cp	r26, r18
    47e4:	b3 07       	cpc	r27, r19
    47e6:	e4 07       	cpc	r30, r20
    47e8:	f5 07       	cpc	r31, r21
    47ea:	20 f0       	brcs	.+8      	; 0x47f4 <__udivmodsi4_ep>
    47ec:	a2 1b       	sub	r26, r18
    47ee:	b3 0b       	sbc	r27, r19
    47f0:	e4 0b       	sbc	r30, r20
    47f2:	f5 0b       	sbc	r31, r21

000047f4 <__udivmodsi4_ep>:
    47f4:	66 1f       	adc	r22, r22
    47f6:	77 1f       	adc	r23, r23
    47f8:	88 1f       	adc	r24, r24
    47fa:	99 1f       	adc	r25, r25
    47fc:	1a 94       	dec	r1
    47fe:	69 f7       	brne	.-38     	; 0x47da <__udivmodsi4_loop>
    4800:	60 95       	com	r22
    4802:	70 95       	com	r23
    4804:	80 95       	com	r24
    4806:	90 95       	com	r25
    4808:	9b 01       	movw	r18, r22
    480a:	ac 01       	movw	r20, r24
    480c:	bd 01       	movw	r22, r26
    480e:	cf 01       	movw	r24, r30
    4810:	08 95       	ret

Disassembly of section .text.libgcc.div:

00004b06 <__divmodsi4>:
    4b06:	05 2e       	mov	r0, r21
    4b08:	97 fb       	bst	r25, 7
    4b0a:	1e f4       	brtc	.+6      	; 0x4b12 <__divmodsi4+0xc>
    4b0c:	00 94       	com	r0
    4b0e:	0e 94 db 28 	call	0x51b6	; 0x51b6 <__negsi2>
    4b12:	57 fd       	sbrc	r21, 7
    4b14:	07 d0       	rcall	.+14     	; 0x4b24 <__divmodsi4_neg2>
    4b16:	0e 94 e7 23 	call	0x47ce	; 0x47ce <__udivmodsi4>
    4b1a:	07 fc       	sbrc	r0, 7
    4b1c:	03 d0       	rcall	.+6      	; 0x4b24 <__divmodsi4_neg2>
    4b1e:	4e f4       	brtc	.+18     	; 0x4b32 <__divmodsi4_exit>
    4b20:	0c 94 db 28 	jmp	0x51b6	; 0x51b6 <__negsi2>

00004b24 <__divmodsi4_neg2>:
    4b24:	50 95       	com	r21
    4b26:	40 95       	com	r20
    4b28:	30 95       	com	r19
    4b2a:	21 95       	neg	r18
    4b2c:	3f 4f       	sbci	r19, 0xFF	; 255
    4b2e:	4f 4f       	sbci	r20, 0xFF	; 255
    4b30:	5f 4f       	sbci	r21, 0xFF	; 255

00004b32 <__divmodsi4_exit>:
    4b32:	08 95       	ret

Disassembly of section .text.libgcc.div:

000051b6 <__negsi2>:
    51b6:	90 95       	com	r25
    51b8:	80 95       	com	r24
    51ba:	70 95       	com	r23
    51bc:	61 95       	neg	r22
    51be:	7f 4f       	sbci	r23, 0xFF	; 255
    51c0:	8f 4f       	sbci	r24, 0xFF	; 255
    51c2:	9f 4f       	sbci	r25, 0xFF	; 255
    51c4:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00005012 <__umulhisi3>:
    5012:	a2 9f       	mul	r26, r18
    5014:	b0 01       	movw	r22, r0
    5016:	b3 9f       	mul	r27, r19
    5018:	c0 01       	movw	r24, r0
    501a:	a3 9f       	mul	r26, r19
    501c:	70 0d       	add	r23, r0
    501e:	81 1d       	adc	r24, r1
    5020:	11 24       	eor	r1, r1
    5022:	91 1d       	adc	r25, r1
    5024:	b2 9f       	mul	r27, r18
    5026:	70 0d       	add	r23, r0
    5028:	81 1d       	adc	r24, r1
    502a:	11 24       	eor	r1, r1
    502c:	91 1d       	adc	r25, r1
    502e:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00005210 <__usmulhisi3>:
    5210:	0e 94 09 28 	call	0x5012	; 0x5012 <__umulhisi3>

00005214 <__usmulhisi3_tail>:
    5214:	b7 ff       	sbrs	r27, 7
    5216:	08 95       	ret
    5218:	82 1b       	sub	r24, r18
    521a:	93 0b       	sbc	r25, r19
    521c:	08 95       	ret

Disassembly of section .text.libgcc.mul:

000050f8 <__muluhisi3>:
    50f8:	0e 94 09 28 	call	0x5012	; 0x5012 <__umulhisi3>
    50fc:	a5 9f       	mul	r26, r21
    50fe:	90 0d       	add	r25, r0
    5100:	b4 9f       	mul	r27, r20
    5102:	90 0d       	add	r25, r0
    5104:	a4 9f       	mul	r26, r20
    5106:	80 0d       	add	r24, r0
    5108:	91 1d       	adc	r25, r1
    510a:	11 24       	eor	r1, r1
    510c:	08 95       	ret

Disassembly of section .text.libgcc.mul:

000051c6 <__mulshisi3>:
    51c6:	b7 ff       	sbrs	r27, 7
    51c8:	0c 94 7c 28 	jmp	0x50f8	; 0x50f8 <__muluhisi3>

000051cc <__mulohisi3>:
    51cc:	0e 94 7c 28 	call	0x50f8	; 0x50f8 <__muluhisi3>
    51d0:	82 1b       	sub	r24, r18
    51d2:	93 0b       	sbc	r25, r19
    51d4:	08 95       	ret

Disassembly of section .text.libgcc:

000051d6 <__xload_2>:
    51d6:	57 fd       	sbrc	r21, 7
    51d8:	03 c0       	rjmp	.+6      	; 0x51e0 <__xload_2+0xa>
    51da:	65 91       	lpm	r22, Z+
    51dc:	75 91       	lpm	r23, Z+
    51de:	08 95       	ret
    51e0:	61 91       	ld	r22, Z+
    51e2:	71 91       	ld	r23, Z+
    51e4:	08 95       	ret

Disassembly of section .text.libgcc:

0000509c <__xload_4>:
    509c:	57 fd       	sbrc	r21, 7
    509e:	05 c0       	rjmp	.+10     	; 0x50aa <__xload_4+0xe>
    50a0:	65 91       	lpm	r22, Z+
    50a2:	75 91       	lpm	r23, Z+
    50a4:	85 91       	lpm	r24, Z+
    50a6:	95 91       	lpm	r25, Z+
    50a8:	08 95       	ret
    50aa:	61 91       	ld	r22, Z+
    50ac:	71 91       	ld	r23, Z+
    50ae:	81 91       	ld	r24, Z+
    50b0:	91 91       	ld	r25, Z+
    50b2:	08 95       	ret

Disassembly of section .text.libgcc:

000050b4 <__adddi3_s8>:
    50b4:	00 24       	eor	r0, r0
    50b6:	a7 fd       	sbrc	r26, 7
    50b8:	00 94       	com	r0
    50ba:	2a 0f       	add	r18, r26
    50bc:	30 1d       	adc	r19, r0
    50be:	40 1d       	adc	r20, r0
    50c0:	50 1d       	adc	r21, r0
    50c2:	60 1d       	adc	r22, r0
    50c4:	70 1d       	adc	r23, r0
    50c6:	80 1d       	adc	r24, r0
    50c8:	90 1d       	adc	r25, r0
    50ca:	08 95       	ret

Disassembly of section .text.__dummy_fini:

0000526e <_fini>:
    526e:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00005270 <__funcs_on_exit>:
    5270:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00005272 <__simulator_exit>:
    5272:	08 95       	ret

Disassembly of section .text.exit:

0000510e <exit>:
    510e:	ec 01       	movw	r28, r24
    5110:	0e 94 38 29 	call	0x5270	; 0x5270 <__funcs_on_exit>
    5114:	0e 94 37 29 	call	0x526e	; 0x526e <_fini>
    5118:	ce 01       	movw	r24, r28
    511a:	0e 94 39 29 	call	0x5272	; 0x5272 <__simulator_exit>
    511e:	ce 01       	movw	r24, r28
    5120:	0e 94 34 29 	call	0x5268	; 0x5268 <_Exit>

Disassembly of section .text.memcpy:

00004aa6 <memcpy>:
    4aa6:	cf 92       	push	r12
    4aa8:	df 92       	push	r13
    4aaa:	ef 92       	push	r14
    4aac:	6a 01       	movw	r12, r20
    4aae:	e6 2e       	mov	r14, r22
    4ab0:	dc 01       	movw	r26, r24
    4ab2:	28 0f       	add	r18, r24
    4ab4:	39 1f       	adc	r19, r25
    4ab6:	a2 17       	cp	r26, r18
    4ab8:	b3 07       	cpc	r27, r19
    4aba:	51 f0       	breq	.+20     	; 0x4ad0 <memcpy+0x2a>
    4abc:	f6 01       	movw	r30, r12
    4abe:	44 91       	lpm	r20, Z
    4ac0:	e7 fc       	sbrc	r14, 7
    4ac2:	40 81       	ld	r20, Z
    4ac4:	4d 93       	st	X+, r20
    4ac6:	4f ef       	ldi	r20, 0xFF	; 255
    4ac8:	c4 1a       	sub	r12, r20
    4aca:	d4 0a       	sbc	r13, r20
    4acc:	e4 0a       	sbc	r14, r20
    4ace:	f3 cf       	rjmp	.-26     	; 0x4ab6 <memcpy+0x10>
    4ad0:	ef 90       	pop	r14
    4ad2:	df 90       	pop	r13
    4ad4:	cf 90       	pop	r12
    4ad6:	08 95       	ret

Disassembly of section .text.memset:

0000515e <memset>:
    515e:	fc 01       	movw	r30, r24
    5160:	48 0f       	add	r20, r24
    5162:	59 1f       	adc	r21, r25
    5164:	e4 17       	cp	r30, r20
    5166:	f5 07       	cpc	r31, r21
    5168:	11 f0       	breq	.+4      	; 0x516e <memset+0x10>
    516a:	61 93       	st	Z+, r22
    516c:	fb cf       	rjmp	.-10     	; 0x5164 <memset+0x6>
    516e:	08 95       	ret

Disassembly of section .text.gmtime:

00005254 <gmtime>:
    5254:	4c ef       	ldi	r20, 0xFC	; 252
    5256:	5a e0       	ldi	r21, 0x0A	; 10
    5258:	0e 94 40 20 	call	0x4080	; 0x4080 <__gmtime_r>
    525c:	08 95       	ret

Disassembly of section .text.__gmtime_r:

00004080 <__gmtime_r>:
    4080:	a0 e0       	ldi	r26, 0x00	; 0
    4082:	b0 e0       	ldi	r27, 0x00	; 0
    4084:	e6 e4       	ldi	r30, 0x46	; 70
    4086:	f0 e2       	ldi	r31, 0x20	; 32
    4088:	0c 94 87 24 	jmp	0x490e	; 0x490e <__prologue_saves__+0xc>
    408c:	ea 01       	movw	r28, r20
    408e:	fb 01       	movw	r30, r22
    4090:	58 2f       	mov	r21, r24
    4092:	0e 94 4e 28 	call	0x509c	; 0x509c <__xload_4>
    4096:	4b 01       	movw	r8, r22
    4098:	5c 01       	movw	r10, r24
    409a:	c1 2c       	mov	r12, r1
    409c:	d1 2c       	mov	r13, r1
    409e:	76 01       	movw	r14, r12
    40a0:	8e 01       	movw	r16, r28
    40a2:	9b 01       	movw	r18, r22
    40a4:	a5 01       	movw	r20, r10
    40a6:	60 e0       	ldi	r22, 0x00	; 0
    40a8:	70 e0       	ldi	r23, 0x00	; 0
    40aa:	80 e0       	ldi	r24, 0x00	; 0
    40ac:	90 e0       	ldi	r25, 0x00	; 0
    40ae:	0e 94 32 04 	call	0x864	; 0x864 <__secs_to_tm>
    40b2:	97 ff       	sbrs	r25, 7
    40b4:	09 c0       	rjmp	.+18     	; 0x40c8 <__gmtime_r+0x48>
    40b6:	8f e4       	ldi	r24, 0x4F	; 79
    40b8:	90 e0       	ldi	r25, 0x00	; 0
    40ba:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    40be:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    40c2:	80 e0       	ldi	r24, 0x00	; 0
    40c4:	90 e0       	ldi	r25, 0x00	; 0
    40c6:	0d c0       	rjmp	.+26     	; 0x40e2 <__gmtime_r+0x62>
    40c8:	19 8a       	std	Y+17, r1	; 0x11
    40ca:	18 8a       	std	Y+16, r1	; 0x10
    40cc:	1a 8a       	std	Y+18, r1	; 0x12
    40ce:	1b 8a       	std	Y+19, r1	; 0x13
    40d0:	1c 8a       	std	Y+20, r1	; 0x14
    40d2:	1d 8a       	std	Y+21, r1	; 0x15
    40d4:	8f ea       	ldi	r24, 0xAF	; 175
    40d6:	93 e0       	ldi	r25, 0x03	; 3
    40d8:	a0 e0       	ldi	r26, 0x00	; 0
    40da:	8e 8b       	std	Y+22, r24	; 0x16
    40dc:	9f 8b       	std	Y+23, r25	; 0x17
    40de:	a8 8f       	std	Y+24, r26	; 0x18
    40e0:	ce 01       	movw	r24, r28
    40e2:	cd b7       	in	r28, 0x3d	; 61
    40e4:	de b7       	in	r29, 0x3e	; 62
    40e6:	ec e0       	ldi	r30, 0x0C	; 12
    40e8:	0c 94 be 24 	jmp	0x497c	; 0x497c <__epilogue_restores__+0xc>

Disassembly of section .text.mktime:

00003d0a <mktime>:
    3d0a:	a9 e1       	ldi	r26, 0x19	; 25
    3d0c:	b0 e0       	ldi	r27, 0x00	; 0
    3d0e:	eb e8       	ldi	r30, 0x8B	; 139
    3d10:	fe e1       	ldi	r31, 0x1E	; 30
    3d12:	0c 94 83 24 	jmp	0x4906	; 0x4906 <__prologue_saves__+0x4>
    3d16:	2c 01       	movw	r4, r24
    3d18:	bc 01       	movw	r22, r24
    3d1a:	80 e8       	ldi	r24, 0x80	; 128
    3d1c:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <__tm_to_secs>
    3d20:	39 01       	movw	r6, r18
    3d22:	4a 01       	movw	r8, r20
    3d24:	59 01       	movw	r10, r18
    3d26:	6a 01       	movw	r12, r20
    3d28:	e1 2c       	mov	r14, r1
    3d2a:	f1 2c       	mov	r15, r1
    3d2c:	00 e0       	ldi	r16, 0x00	; 0
    3d2e:	10 e0       	ldi	r17, 0x00	; 0
    3d30:	0e 94 ca 28 	call	0x5194	; 0x5194 <__cmpdi2>
    3d34:	f9 f4       	brne	.+62     	; 0x3d74 <mktime+0x6a>
    3d36:	1a 8a       	std	Y+18, r1	; 0x12
    3d38:	19 8a       	std	Y+17, r1	; 0x11
    3d3a:	1b 8a       	std	Y+19, r1	; 0x13
    3d3c:	1c 8a       	std	Y+20, r1	; 0x14
    3d3e:	1d 8a       	std	Y+21, r1	; 0x15
    3d40:	1e 8a       	std	Y+22, r1	; 0x16
    3d42:	23 eb       	ldi	r18, 0xB3	; 179
    3d44:	33 e0       	ldi	r19, 0x03	; 3
    3d46:	40 e0       	ldi	r20, 0x00	; 0
    3d48:	2f 8b       	std	Y+23, r18	; 0x17
    3d4a:	38 8f       	std	Y+24, r19	; 0x18
    3d4c:	49 8f       	std	Y+25, r20	; 0x19
    3d4e:	8e 01       	movw	r16, r28
    3d50:	0f 5f       	subi	r16, 0xFF	; 255
    3d52:	1f 4f       	sbci	r17, 0xFF	; 255
    3d54:	93 01       	movw	r18, r6
    3d56:	48 2d       	mov	r20, r8
    3d58:	0e 94 32 04 	call	0x864	; 0x864 <__secs_to_tm>
    3d5c:	97 fd       	sbrc	r25, 7
    3d5e:	0a c0       	rjmp	.+20     	; 0x3d74 <mktime+0x6a>
    3d60:	89 e1       	ldi	r24, 0x19	; 25
    3d62:	f8 01       	movw	r30, r16
    3d64:	d2 01       	movw	r26, r4
    3d66:	01 90       	ld	r0, Z+
    3d68:	0d 92       	st	X+, r0
    3d6a:	8a 95       	dec	r24
    3d6c:	e1 f7       	brne	.-8      	; 0x3d66 <mktime+0x5c>
    3d6e:	b3 01       	movw	r22, r6
    3d70:	c4 01       	movw	r24, r8
    3d72:	0a c0       	rjmp	.+20     	; 0x3d88 <mktime+0x7e>
    3d74:	8f e4       	ldi	r24, 0x4F	; 79
    3d76:	90 e0       	ldi	r25, 0x00	; 0
    3d78:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    3d7c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    3d80:	6f ef       	ldi	r22, 0xFF	; 255
    3d82:	7f ef       	ldi	r23, 0xFF	; 255
    3d84:	8f ef       	ldi	r24, 0xFF	; 255
    3d86:	9f ef       	ldi	r25, 0xFF	; 255
    3d88:	69 96       	adiw	r28, 0x19	; 25
    3d8a:	e0 e1       	ldi	r30, 0x10	; 16
    3d8c:	0c 94 ba 24 	jmp	0x4974	; 0x4974 <__epilogue_restores__+0x4>

Disassembly of section .text._Exit:

00005268 <_Exit>:
    5268:	0e 94 6b 00 	call	0xd6	; 0xd6 <_exit>

Disassembly of section .text.__tm_to_secs:

00001e06 <__tm_to_secs>:
    1e06:	a5 e0       	ldi	r26, 0x05	; 5
    1e08:	b0 e0       	ldi	r27, 0x00	; 0
    1e0a:	e9 e0       	ldi	r30, 0x09	; 9
    1e0c:	ff e0       	ldi	r31, 0x0F	; 15
    1e0e:	0c 94 81 24 	jmp	0x4902	; 0x4902 <__prologue_saves__>
    1e12:	3b 01       	movw	r6, r22
    1e14:	88 2e       	mov	r8, r24
    1e16:	a8 2f       	mov	r26, r24
    1e18:	cb 01       	movw	r24, r22
    1e1a:	0a 96       	adiw	r24, 0x0a	; 10
    1e1c:	a1 1d       	adc	r26, r1
    1e1e:	fc 01       	movw	r30, r24
    1e20:	5a 2f       	mov	r21, r26
    1e22:	0e 94 eb 28 	call	0x51d6	; 0x51d6 <__xload_2>
    1e26:	5b 01       	movw	r10, r22
    1e28:	9b 01       	movw	r18, r22
    1e2a:	9b 2c       	mov	r9, r11
    1e2c:	99 0c       	add	r9, r9
    1e2e:	99 08       	sbc	r9, r9
    1e30:	f9 2c       	mov	r15, r9
    1e32:	b9 2d       	mov	r27, r9
    1e34:	a9 2d       	mov	r26, r9
    1e36:	89 2d       	mov	r24, r9
    1e38:	99 2d       	mov	r25, r9
    1e3a:	e8 2c       	mov	r14, r8
    1e3c:	63 01       	movw	r12, r6
    1e3e:	48 e0       	ldi	r20, 0x08	; 8
    1e40:	c4 0e       	add	r12, r20
    1e42:	d1 1c       	adc	r13, r1
    1e44:	e1 1c       	adc	r14, r1
    1e46:	f6 01       	movw	r30, r12
    1e48:	5e 2d       	mov	r21, r14
    1e4a:	0e 94 eb 28 	call	0x51d6	; 0x51d6 <__xload_2>
    1e4e:	2b 01       	movw	r4, r22
    1e50:	6c 30       	cpi	r22, 0x0C	; 12
    1e52:	71 05       	cpc	r23, r1
    1e54:	10 f1       	brcs	.+68     	; 0x1e9a <__tm_to_secs+0x94>
    1e56:	cb 01       	movw	r24, r22
    1e58:	6c e0       	ldi	r22, 0x0C	; 12
    1e5a:	70 e0       	ldi	r23, 0x00	; 0
    1e5c:	0e 94 59 26 	call	0x4cb2	; 0x4cb2 <__divmodhi4>
    1e60:	2c 01       	movw	r4, r24
    1e62:	97 ff       	sbrs	r25, 7
    1e64:	05 c0       	rjmp	.+10     	; 0x1e70 <__tm_to_secs+0x6a>
    1e66:	61 50       	subi	r22, 0x01	; 1
    1e68:	71 09       	sbc	r23, r1
    1e6a:	8c e0       	ldi	r24, 0x0C	; 12
    1e6c:	48 0e       	add	r4, r24
    1e6e:	51 1c       	adc	r5, r1
    1e70:	97 2f       	mov	r25, r23
    1e72:	99 0f       	add	r25, r25
    1e74:	99 0b       	sbc	r25, r25
    1e76:	9b 01       	movw	r18, r22
    1e78:	49 2f       	mov	r20, r25
    1e7a:	59 2f       	mov	r21, r25
    1e7c:	69 2f       	mov	r22, r25
    1e7e:	79 2f       	mov	r23, r25
    1e80:	89 2f       	mov	r24, r25
    1e82:	c9 2c       	mov	r12, r9
    1e84:	d9 2c       	mov	r13, r9
    1e86:	e9 2c       	mov	r14, r9
    1e88:	f9 2c       	mov	r15, r9
    1e8a:	09 2d       	mov	r16, r9
    1e8c:	19 2d       	mov	r17, r9
    1e8e:	0e 94 c1 28 	call	0x5182	; 0x5182 <__adddi3>
    1e92:	94 2e       	mov	r9, r20
    1e94:	f5 2e       	mov	r15, r21
    1e96:	b6 2f       	mov	r27, r22
    1e98:	a7 2f       	mov	r26, r23
    1e9a:	8e 01       	movw	r16, r28
    1e9c:	0f 5f       	subi	r16, 0xFF	; 255
    1e9e:	1f 4f       	sbci	r17, 0xFF	; 255
    1ea0:	49 2d       	mov	r20, r9
    1ea2:	5f 2d       	mov	r21, r15
    1ea4:	6b 2f       	mov	r22, r27
    1ea6:	7a 2f       	mov	r23, r26
    1ea8:	0e 94 af 0a 	call	0x155e	; 0x155e <__year_to_secs>
    1eac:	59 01       	movw	r10, r18
    1eae:	6a 01       	movw	r12, r20
    1eb0:	7b 01       	movw	r14, r22
    1eb2:	8c 01       	movw	r16, r24
    1eb4:	69 81       	ldd	r22, Y+1	; 0x01
    1eb6:	7a 81       	ldd	r23, Y+2	; 0x02
    1eb8:	c2 01       	movw	r24, r4
    1eba:	0e 94 46 24 	call	0x488c	; 0x488c <__month_to_secs>
    1ebe:	1b 01       	movw	r2, r22
    1ec0:	2c 01       	movw	r4, r24
    1ec2:	55 0c       	add	r5, r5
    1ec4:	22 08       	sbc	r2, r2
    1ec6:	32 2c       	mov	r3, r2
    1ec8:	21 01       	movw	r4, r2
    1eca:	9b 01       	movw	r18, r22
    1ecc:	ac 01       	movw	r20, r24
    1ece:	62 2d       	mov	r22, r2
    1ed0:	72 2d       	mov	r23, r2
    1ed2:	82 2d       	mov	r24, r2
    1ed4:	92 2d       	mov	r25, r2
    1ed6:	0e 94 c1 28 	call	0x5182	; 0x5182 <__adddi3>
    1eda:	19 01       	movw	r2, r18
    1edc:	2a 01       	movw	r4, r20
    1ede:	96 2e       	mov	r9, r22
    1ee0:	7b 83       	std	Y+3, r23	; 0x03
    1ee2:	8c 83       	std	Y+4, r24	; 0x04
    1ee4:	9d 83       	std	Y+5, r25	; 0x05
    1ee6:	a8 2d       	mov	r26, r8
    1ee8:	c3 01       	movw	r24, r6
    1eea:	06 96       	adiw	r24, 0x06	; 6
    1eec:	a1 1d       	adc	r26, r1
    1eee:	fc 01       	movw	r30, r24
    1ef0:	5a 2f       	mov	r21, r26
    1ef2:	0e 94 eb 28 	call	0x51d6	; 0x51d6 <__xload_2>
    1ef6:	61 50       	subi	r22, 0x01	; 1
    1ef8:	71 09       	sbc	r23, r1
    1efa:	97 2f       	mov	r25, r23
    1efc:	99 0f       	add	r25, r25
    1efe:	99 0b       	sbc	r25, r25
    1f00:	30 e8       	ldi	r19, 0x80	; 128
    1f02:	a3 2e       	mov	r10, r19
    1f04:	41 e5       	ldi	r20, 0x51	; 81
    1f06:	b4 2e       	mov	r11, r20
    1f08:	cc 24       	eor	r12, r12
    1f0a:	c3 94       	inc	r12
    1f0c:	d1 2c       	mov	r13, r1
    1f0e:	e1 2c       	mov	r14, r1
    1f10:	f1 2c       	mov	r15, r1
    1f12:	00 e0       	ldi	r16, 0x00	; 0
    1f14:	10 e0       	ldi	r17, 0x00	; 0
    1f16:	9b 01       	movw	r18, r22
    1f18:	49 2f       	mov	r20, r25
    1f1a:	59 2f       	mov	r21, r25
    1f1c:	69 2f       	mov	r22, r25
    1f1e:	79 2f       	mov	r23, r25
    1f20:	89 2f       	mov	r24, r25
    1f22:	0e 94 8c 1c 	call	0x3918	; 0x3918 <__muldi3>
    1f26:	51 01       	movw	r10, r2
    1f28:	62 01       	movw	r12, r4
    1f2a:	e9 2c       	mov	r14, r9
    1f2c:	fb 80       	ldd	r15, Y+3	; 0x03
    1f2e:	0c 81       	ldd	r16, Y+4	; 0x04
    1f30:	1d 81       	ldd	r17, Y+5	; 0x05
    1f32:	0e 94 c1 28 	call	0x5182	; 0x5182 <__adddi3>
    1f36:	59 01       	movw	r10, r18
    1f38:	6a 01       	movw	r12, r20
    1f3a:	7b 01       	movw	r14, r22
    1f3c:	8c 01       	movw	r16, r24
    1f3e:	a8 2d       	mov	r26, r8
    1f40:	c3 01       	movw	r24, r6
    1f42:	04 96       	adiw	r24, 0x04	; 4
    1f44:	a1 1d       	adc	r26, r1
    1f46:	fc 01       	movw	r30, r24
    1f48:	5a 2f       	mov	r21, r26
    1f4a:	0e 94 eb 28 	call	0x51d6	; 0x51d6 <__xload_2>
    1f4e:	07 2e       	mov	r0, r23
    1f50:	00 0c       	add	r0, r0
    1f52:	88 0b       	sbc	r24, r24
    1f54:	99 0b       	sbc	r25, r25
    1f56:	20 e1       	ldi	r18, 0x10	; 16
    1f58:	3e e0       	ldi	r19, 0x0E	; 14
    1f5a:	40 e0       	ldi	r20, 0x00	; 0
    1f5c:	50 e0       	ldi	r21, 0x00	; 0
    1f5e:	0e 94 18 28 	call	0x5030	; 0x5030 <__mulsidi3>
    1f62:	0e 94 c1 28 	call	0x5182	; 0x5182 <__adddi3>
    1f66:	59 01       	movw	r10, r18
    1f68:	6a 01       	movw	r12, r20
    1f6a:	7b 01       	movw	r14, r22
    1f6c:	8c 01       	movw	r16, r24
    1f6e:	a8 2d       	mov	r26, r8
    1f70:	c3 01       	movw	r24, r6
    1f72:	02 96       	adiw	r24, 0x02	; 2
    1f74:	a1 1d       	adc	r26, r1
    1f76:	fc 01       	movw	r30, r24
    1f78:	5a 2f       	mov	r21, r26
    1f7a:	0e 94 eb 28 	call	0x51d6	; 0x51d6 <__xload_2>
    1f7e:	07 2e       	mov	r0, r23
    1f80:	00 0c       	add	r0, r0
    1f82:	88 0b       	sbc	r24, r24
    1f84:	99 0b       	sbc	r25, r25
    1f86:	2c e3       	ldi	r18, 0x3C	; 60
    1f88:	30 e0       	ldi	r19, 0x00	; 0
    1f8a:	40 e0       	ldi	r20, 0x00	; 0
    1f8c:	50 e0       	ldi	r21, 0x00	; 0
    1f8e:	0e 94 18 28 	call	0x5030	; 0x5030 <__mulsidi3>
    1f92:	0e 94 c1 28 	call	0x5182	; 0x5182 <__adddi3>
    1f96:	59 01       	movw	r10, r18
    1f98:	6a 01       	movw	r12, r20
    1f9a:	7b 01       	movw	r14, r22
    1f9c:	8c 01       	movw	r16, r24
    1f9e:	f3 01       	movw	r30, r6
    1fa0:	58 2d       	mov	r21, r8
    1fa2:	0e 94 eb 28 	call	0x51d6	; 0x51d6 <__xload_2>
    1fa6:	9b 01       	movw	r18, r22
    1fa8:	93 2f       	mov	r25, r19
    1faa:	99 0f       	add	r25, r25
    1fac:	99 0b       	sbc	r25, r25
    1fae:	49 2f       	mov	r20, r25
    1fb0:	59 2f       	mov	r21, r25
    1fb2:	69 2f       	mov	r22, r25
    1fb4:	79 2f       	mov	r23, r25
    1fb6:	89 2f       	mov	r24, r25
    1fb8:	0e 94 c1 28 	call	0x5182	; 0x5182 <__adddi3>
    1fbc:	25 96       	adiw	r28, 0x05	; 5
    1fbe:	e2 e1       	ldi	r30, 0x12	; 18
    1fc0:	0c 94 b8 24 	jmp	0x4970	; 0x4970 <__epilogue_restores__>

Disassembly of section .text.__year_to_secs:

0000155e <__year_to_secs>:
    155e:	ac e0       	ldi	r26, 0x0C	; 12
    1560:	b0 e0       	ldi	r27, 0x00	; 0
    1562:	e5 eb       	ldi	r30, 0xB5	; 181
    1564:	fa e0       	ldi	r31, 0x0A	; 10
    1566:	0c 94 81 24 	jmp	0x4902	; 0x4902 <__prologue_saves__>
    156a:	49 01       	movw	r8, r18
    156c:	5a 01       	movw	r10, r20
    156e:	6b 01       	movw	r12, r22
    1570:	7c 01       	movw	r14, r24
    1572:	1c 83       	std	Y+4, r17	; 0x04
    1574:	0b 83       	std	Y+3, r16	; 0x03
    1576:	2a 38       	cpi	r18, 0x8A	; 138
    1578:	31 05       	cpc	r19, r1
    157a:	41 05       	cpc	r20, r1
    157c:	51 05       	cpc	r21, r1
    157e:	61 05       	cpc	r22, r1
    1580:	71 05       	cpc	r23, r1
    1582:	81 05       	cpc	r24, r1
    1584:	91 05       	cpc	r25, r1
    1586:	11 f0       	breq	.+4      	; 0x158c <__year_to_secs+0x2e>
    1588:	0c f0       	brlt	.+2      	; 0x158c <__year_to_secs+0x2e>
    158a:	42 c0       	rjmp	.+132    	; 0x1610 <__year_to_secs+0xb2>
    158c:	f9 01       	movw	r30, r18
    158e:	e4 54       	subi	r30, 0x44	; 68
    1590:	f1 09       	sbc	r31, r1
    1592:	f5 95       	asr	r31
    1594:	e7 95       	ror	r30
    1596:	f5 95       	asr	r31
    1598:	e7 95       	ror	r30
    159a:	c9 01       	movw	r24, r18
    159c:	83 70       	andi	r24, 0x03	; 3
    159e:	99 27       	eor	r25, r25
    15a0:	89 2b       	or	r24, r25
    15a2:	51 f4       	brne	.+20     	; 0x15b8 <__year_to_secs+0x5a>
    15a4:	31 97       	sbiw	r30, 0x01	; 1
    15a6:	01 15       	cp	r16, r1
    15a8:	11 05       	cpc	r17, r1
    15aa:	69 f0       	breq	.+26     	; 0x15c6 <__year_to_secs+0x68>
    15ac:	81 e0       	ldi	r24, 0x01	; 1
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	d8 01       	movw	r26, r16
    15b2:	8d 93       	st	X+, r24
    15b4:	9c 93       	st	X, r25
    15b6:	07 c0       	rjmp	.+14     	; 0x15c6 <__year_to_secs+0x68>
    15b8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ba:	9c 81       	ldd	r25, Y+4	; 0x04
    15bc:	00 97       	sbiw	r24, 0x00	; 0
    15be:	19 f0       	breq	.+6      	; 0x15c6 <__year_to_secs+0x68>
    15c0:	dc 01       	movw	r26, r24
    15c2:	1d 92       	st	X+, r1
    15c4:	1c 92       	st	X, r1
    15c6:	d9 01       	movw	r26, r18
    15c8:	a6 54       	subi	r26, 0x46	; 70
    15ca:	b1 09       	sbc	r27, r1
    15cc:	20 e8       	ldi	r18, 0x80	; 128
    15ce:	33 e3       	ldi	r19, 0x33	; 51
    15d0:	41 ee       	ldi	r20, 0xE1	; 225
    15d2:	51 e0       	ldi	r21, 0x01	; 1
    15d4:	0e 94 e3 28 	call	0x51c6	; 0x51c6 <__mulshisi3>
    15d8:	6b 01       	movw	r12, r22
    15da:	7c 01       	movw	r14, r24
    15dc:	df 01       	movw	r26, r30
    15de:	20 e8       	ldi	r18, 0x80	; 128
    15e0:	31 e5       	ldi	r19, 0x51	; 81
    15e2:	41 e0       	ldi	r20, 0x01	; 1
    15e4:	50 e0       	ldi	r21, 0x00	; 0
    15e6:	0e 94 e3 28 	call	0x51c6	; 0x51c6 <__mulshisi3>
    15ea:	dc 01       	movw	r26, r24
    15ec:	cb 01       	movw	r24, r22
    15ee:	8c 0d       	add	r24, r12
    15f0:	9d 1d       	adc	r25, r13
    15f2:	ae 1d       	adc	r26, r14
    15f4:	bf 1d       	adc	r27, r15
    15f6:	9c 01       	movw	r18, r24
    15f8:	ad 01       	movw	r20, r26
    15fa:	6c 01       	movw	r12, r24
    15fc:	7d 01       	movw	r14, r26
    15fe:	ff 0c       	add	r15, r15
    1600:	cc 08       	sbc	r12, r12
    1602:	dc 2c       	mov	r13, r12
    1604:	76 01       	movw	r14, r12
    1606:	ac 2d       	mov	r26, r12
    1608:	fc 2d       	mov	r31, r12
    160a:	ec 2d       	mov	r30, r12
    160c:	9c 2d       	mov	r25, r12
    160e:	cb c0       	rjmp	.+406    	; 0x17a6 <__year_to_secs+0x248>
    1610:	eb 81       	ldd	r30, Y+3	; 0x03
    1612:	fc 81       	ldd	r31, Y+4	; 0x04
    1614:	ef 2b       	or	r30, r31
    1616:	31 f4       	brne	.+12     	; 0x1624 <__year_to_secs+0xc6>
    1618:	1a 82       	std	Y+2, r1	; 0x02
    161a:	19 82       	std	Y+1, r1	; 0x01
    161c:	ce 01       	movw	r24, r28
    161e:	01 96       	adiw	r24, 0x01	; 1
    1620:	9c 83       	std	Y+4, r25	; 0x04
    1622:	8b 83       	std	Y+3, r24	; 0x03
    1624:	c4 01       	movw	r24, r8
    1626:	84 56       	subi	r24, 0x64	; 100
    1628:	91 09       	sbc	r25, r1
    162a:	60 e9       	ldi	r22, 0x90	; 144
    162c:	71 e0       	ldi	r23, 0x01	; 1
    162e:	0e 94 59 26 	call	0x4cb2	; 0x4cb2 <__divmodhi4>
    1632:	7e 83       	std	Y+6, r23	; 0x06
    1634:	6d 83       	std	Y+5, r22	; 0x05
    1636:	94 01       	movw	r18, r8
    1638:	a5 01       	movw	r20, r10
    163a:	b6 01       	movw	r22, r12
    163c:	c7 01       	movw	r24, r14
    163e:	ac e9       	ldi	r26, 0x9C	; 156
    1640:	0e 94 5a 28 	call	0x50b4	; 0x50b4 <__adddi3_s8>
    1644:	19 01       	movw	r2, r18
    1646:	2a 01       	movw	r4, r20
    1648:	3b 01       	movw	r6, r22
    164a:	8f 83       	std	Y+7, r24	; 0x07
    164c:	98 87       	std	Y+8, r25	; 0x08
    164e:	70 e9       	ldi	r23, 0x90	; 144
    1650:	a7 2e       	mov	r10, r23
    1652:	bb 24       	eor	r11, r11
    1654:	b3 94       	inc	r11
    1656:	c1 2c       	mov	r12, r1
    1658:	d1 2c       	mov	r13, r1
    165a:	e1 2c       	mov	r14, r1
    165c:	f1 2c       	mov	r15, r1
    165e:	00 e0       	ldi	r16, 0x00	; 0
    1660:	10 e0       	ldi	r17, 0x00	; 0
    1662:	91 01       	movw	r18, r2
    1664:	a2 01       	movw	r20, r4
    1666:	b3 01       	movw	r22, r6
    1668:	0e 94 43 21 	call	0x4286	; 0x4286 <__moddi3>
    166c:	c9 01       	movw	r24, r18
    166e:	00 97       	sbiw	r24, 0x00	; 0
    1670:	59 f4       	brne	.+22     	; 0x1688 <__year_to_secs+0x12a>
    1672:	81 e0       	ldi	r24, 0x01	; 1
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	ab 81       	ldd	r26, Y+3	; 0x03
    1678:	bc 81       	ldd	r27, Y+4	; 0x04
    167a:	8d 93       	st	X+, r24
    167c:	9c 93       	st	X, r25
    167e:	20 e0       	ldi	r18, 0x00	; 0
    1680:	30 e0       	ldi	r19, 0x00	; 0
    1682:	40 e0       	ldi	r20, 0x00	; 0
    1684:	50 e0       	ldi	r21, 0x00	; 0
    1686:	33 c0       	rjmp	.+102    	; 0x16ee <__year_to_secs+0x190>
    1688:	28 3c       	cpi	r18, 0xC8	; 200
    168a:	31 05       	cpc	r19, r1
    168c:	6c f0       	brlt	.+26     	; 0x16a8 <__year_to_secs+0x14a>
    168e:	2c 32       	cpi	r18, 0x2C	; 44
    1690:	31 40       	sbci	r19, 0x01	; 1
    1692:	2c f0       	brlt	.+10     	; 0x169e <__year_to_secs+0x140>
    1694:	8c 52       	subi	r24, 0x2C	; 44
    1696:	91 40       	sbci	r25, 0x01	; 1
    1698:	43 e0       	ldi	r20, 0x03	; 3
    169a:	50 e0       	ldi	r21, 0x00	; 0
    169c:	0c c0       	rjmp	.+24     	; 0x16b6 <__year_to_secs+0x158>
    169e:	88 5c       	subi	r24, 0xC8	; 200
    16a0:	91 09       	sbc	r25, r1
    16a2:	42 e0       	ldi	r20, 0x02	; 2
    16a4:	50 e0       	ldi	r21, 0x00	; 0
    16a6:	07 c0       	rjmp	.+14     	; 0x16b6 <__year_to_secs+0x158>
    16a8:	24 36       	cpi	r18, 0x64	; 100
    16aa:	31 05       	cpc	r19, r1
    16ac:	6c f0       	brlt	.+26     	; 0x16c8 <__year_to_secs+0x16a>
    16ae:	84 56       	subi	r24, 0x64	; 100
    16b0:	91 09       	sbc	r25, r1
    16b2:	41 e0       	ldi	r20, 0x01	; 1
    16b4:	50 e0       	ldi	r21, 0x00	; 0
    16b6:	00 97       	sbiw	r24, 0x00	; 0
    16b8:	49 f4       	brne	.+18     	; 0x16cc <__year_to_secs+0x16e>
    16ba:	eb 81       	ldd	r30, Y+3	; 0x03
    16bc:	fc 81       	ldd	r31, Y+4	; 0x04
    16be:	11 82       	std	Z+1, r1	; 0x01
    16c0:	10 82       	st	Z, r1
    16c2:	20 e0       	ldi	r18, 0x00	; 0
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	13 c0       	rjmp	.+38     	; 0x16ee <__year_to_secs+0x190>
    16c8:	40 e0       	ldi	r20, 0x00	; 0
    16ca:	50 e0       	ldi	r21, 0x00	; 0
    16cc:	9c 01       	movw	r18, r24
    16ce:	36 95       	lsr	r19
    16d0:	27 95       	ror	r18
    16d2:	36 95       	lsr	r19
    16d4:	27 95       	ror	r18
    16d6:	83 70       	andi	r24, 0x03	; 3
    16d8:	99 27       	eor	r25, r25
    16da:	61 e0       	ldi	r22, 0x01	; 1
    16dc:	70 e0       	ldi	r23, 0x00	; 0
    16de:	89 2b       	or	r24, r25
    16e0:	11 f0       	breq	.+4      	; 0x16e6 <__year_to_secs+0x188>
    16e2:	60 e0       	ldi	r22, 0x00	; 0
    16e4:	70 e0       	ldi	r23, 0x00	; 0
    16e6:	ab 81       	ldd	r26, Y+3	; 0x03
    16e8:	bc 81       	ldd	r27, Y+4	; 0x04
    16ea:	6d 93       	st	X+, r22
    16ec:	7c 93       	st	X, r23
    16ee:	81 e6       	ldi	r24, 0x61	; 97
    16f0:	ed 81       	ldd	r30, Y+5	; 0x05
    16f2:	fe 81       	ldd	r31, Y+6	; 0x06
    16f4:	8e 9f       	mul	r24, r30
    16f6:	b0 01       	movw	r22, r0
    16f8:	8f 9f       	mul	r24, r31
    16fa:	70 0d       	add	r23, r0
    16fc:	11 24       	eor	r1, r1
    16fe:	e8 e1       	ldi	r30, 0x18	; 24
    1700:	e4 9f       	mul	r30, r20
    1702:	c0 01       	movw	r24, r0
    1704:	e5 9f       	mul	r30, r21
    1706:	90 0d       	add	r25, r0
    1708:	11 24       	eor	r1, r1
    170a:	86 0f       	add	r24, r22
    170c:	97 1f       	adc	r25, r23
    170e:	ab 81       	ldd	r26, Y+3	; 0x03
    1710:	bc 81       	ldd	r27, Y+4	; 0x04
    1712:	4d 91       	ld	r20, X+
    1714:	5c 91       	ld	r21, X
    1716:	84 1b       	sub	r24, r20
    1718:	95 0b       	sbc	r25, r21
    171a:	82 0f       	add	r24, r18
    171c:	93 1f       	adc	r25, r19
    171e:	e9 2f       	mov	r30, r25
    1720:	ee 0f       	add	r30, r30
    1722:	ee 0b       	sbc	r30, r30
    1724:	20 e8       	ldi	r18, 0x80	; 128
    1726:	a2 2e       	mov	r10, r18
    1728:	31 e5       	ldi	r19, 0x51	; 81
    172a:	b3 2e       	mov	r11, r19
    172c:	cc 24       	eor	r12, r12
    172e:	c3 94       	inc	r12
    1730:	d1 2c       	mov	r13, r1
    1732:	e1 2c       	mov	r14, r1
    1734:	f1 2c       	mov	r15, r1
    1736:	00 e0       	ldi	r16, 0x00	; 0
    1738:	10 e0       	ldi	r17, 0x00	; 0
    173a:	9c 01       	movw	r18, r24
    173c:	4e 2f       	mov	r20, r30
    173e:	5e 2f       	mov	r21, r30
    1740:	6e 2f       	mov	r22, r30
    1742:	7e 2f       	mov	r23, r30
    1744:	8e 2f       	mov	r24, r30
    1746:	9e 2f       	mov	r25, r30
    1748:	0e 94 8c 1c 	call	0x3918	; 0x3918 <__muldi3>
    174c:	92 2e       	mov	r9, r18
    174e:	83 2e       	mov	r8, r19
    1750:	4b 83       	std	Y+3, r20	; 0x03
    1752:	5d 83       	std	Y+5, r21	; 0x05
    1754:	69 87       	std	Y+9, r22	; 0x09
    1756:	7a 87       	std	Y+10, r23	; 0x0a
    1758:	8b 87       	std	Y+11, r24	; 0x0b
    175a:	9c 87       	std	Y+12, r25	; 0x0c
    175c:	43 e3       	ldi	r20, 0x33	; 51
    175e:	b4 2e       	mov	r11, r20
    1760:	51 ee       	ldi	r21, 0xE1	; 225
    1762:	c5 2e       	mov	r12, r21
    1764:	dd 24       	eor	r13, r13
    1766:	d3 94       	inc	r13
    1768:	91 01       	movw	r18, r2
    176a:	a2 01       	movw	r20, r4
    176c:	b3 01       	movw	r22, r6
    176e:	8f 81       	ldd	r24, Y+7	; 0x07
    1770:	98 85       	ldd	r25, Y+8	; 0x08
    1772:	0e 94 8c 1c 	call	0x3918	; 0x3918 <__muldi3>
    1776:	59 01       	movw	r10, r18
    1778:	6a 01       	movw	r12, r20
    177a:	7b 01       	movw	r14, r22
    177c:	8c 01       	movw	r16, r24
    177e:	29 2d       	mov	r18, r9
    1780:	38 2d       	mov	r19, r8
    1782:	4b 81       	ldd	r20, Y+3	; 0x03
    1784:	5d 81       	ldd	r21, Y+5	; 0x05
    1786:	69 85       	ldd	r22, Y+9	; 0x09
    1788:	7a 85       	ldd	r23, Y+10	; 0x0a
    178a:	8b 85       	ldd	r24, Y+11	; 0x0b
    178c:	9c 85       	ldd	r25, Y+12	; 0x0c
    178e:	0e 94 c1 28 	call	0x5182	; 0x5182 <__adddi3>
    1792:	3b 56       	subi	r19, 0x6B	; 107
    1794:	41 49       	sbci	r20, 0x91	; 145
    1796:	57 4c       	sbci	r21, 0xC7	; 199
    1798:	6f 4f       	sbci	r22, 0xFF	; 255
    179a:	7f 4f       	sbci	r23, 0xFF	; 255
    179c:	8f 4f       	sbci	r24, 0xFF	; 255
    179e:	9f 4f       	sbci	r25, 0xFF	; 255
    17a0:	a6 2f       	mov	r26, r22
    17a2:	f7 2f       	mov	r31, r23
    17a4:	e8 2f       	mov	r30, r24
    17a6:	6a 2f       	mov	r22, r26
    17a8:	7f 2f       	mov	r23, r31
    17aa:	8e 2f       	mov	r24, r30
    17ac:	2c 96       	adiw	r28, 0x0c	; 12
    17ae:	e2 e1       	ldi	r30, 0x12	; 18
    17b0:	0c 94 b8 24 	jmp	0x4970	; 0x4970 <__epilogue_restores__>

Disassembly of section .text.__month_to_secs:

0000488c <__month_to_secs>:
    488c:	cf 93       	push	r28
    488e:	df 93       	push	r29
    4890:	9c 01       	movw	r18, r24
    4892:	eb 01       	movw	r28, r22
    4894:	88 0f       	add	r24, r24
    4896:	99 1f       	adc	r25, r25
    4898:	88 0f       	add	r24, r24
    489a:	99 1f       	adc	r25, r25
    489c:	09 2e       	mov	r0, r25
    489e:	00 0c       	add	r0, r0
    48a0:	aa 0b       	sbc	r26, r26
    48a2:	85 58       	subi	r24, 0x85	; 133
    48a4:	9d 4f       	sbci	r25, 0xFD	; 253
    48a6:	af 4f       	sbci	r26, 0xFF	; 255
    48a8:	fc 01       	movw	r30, r24
    48aa:	5a 2f       	mov	r21, r26
    48ac:	0e 94 4e 28 	call	0x509c	; 0x509c <__xload_4>
    48b0:	cd 2b       	or	r28, r29
    48b2:	39 f0       	breq	.+14     	; 0x48c2 <__month_to_secs+0x36>
    48b4:	22 30       	cpi	r18, 0x02	; 2
    48b6:	31 05       	cpc	r19, r1
    48b8:	24 f0       	brlt	.+8      	; 0x48c2 <__month_to_secs+0x36>
    48ba:	60 58       	subi	r22, 0x80	; 128
    48bc:	7e 4a       	sbci	r23, 0xAE	; 174
    48be:	8e 4f       	sbci	r24, 0xFE	; 254
    48c0:	9f 4f       	sbci	r25, 0xFF	; 255
    48c2:	df 91       	pop	r29
    48c4:	cf 91       	pop	r28
    48c6:	08 95       	ret

Disassembly of section .text.__secs_to_tm:

00000864 <__secs_to_tm>:
 864:	a6 e1       	ldi	r26, 0x16	; 22
 866:	b0 e0       	ldi	r27, 0x00	; 0
 868:	e8 e3       	ldi	r30, 0x38	; 56
 86a:	f4 e0       	ldi	r31, 0x04	; 4
 86c:	0c 94 81 24 	jmp	0x4902	; 0x4902 <__prologue_saves__>
 870:	79 01       	movw	r14, r18
 872:	d4 2e       	mov	r13, r20
 874:	c5 2e       	mov	r12, r21
 876:	b6 2f       	mov	r27, r22
 878:	a7 2f       	mov	r26, r23
 87a:	f8 2f       	mov	r31, r24
 87c:	b9 2e       	mov	r11, r25
 87e:	40 58       	subi	r20, 0x80	; 128
 880:	5d 4b       	sbci	r21, 0xBD	; 189
 882:	6e 40       	sbci	r22, 0x0E	; 14
 884:	7f 4f       	sbci	r23, 0xFF	; 255
 886:	8f 4f       	sbci	r24, 0xFF	; 255
 888:	9f 4f       	sbci	r25, 0xFF	; 255
 88a:	21 15       	cp	r18, r1
 88c:	3b 47       	sbci	r19, 0x7B	; 123
 88e:	4d 41       	sbci	r20, 0x1D	; 29
 890:	53 48       	sbci	r21, 0x83	; 131
 892:	62 4e       	sbci	r22, 0xE2	; 226
 894:	71 40       	sbci	r23, 0x01	; 1
 896:	81 05       	cpc	r24, r1
 898:	91 05       	cpc	r25, r1
 89a:	11 f0       	breq	.+4      	; 0x8a0 <__secs_to_tm+0x3c>
 89c:	08 f0       	brcs	.+2      	; 0x8a0 <__secs_to_tm+0x3c>
 89e:	08 c2       	rjmp	.+1040   	; 0xcb0 <__secs_to_tm+0x44c>
 8a0:	18 8b       	std	Y+16, r17	; 0x10
 8a2:	0f 87       	std	Y+15, r16	; 0x0f
 8a4:	9b 2d       	mov	r25, r11
 8a6:	8f 2f       	mov	r24, r31
 8a8:	7a 2f       	mov	r23, r26
 8aa:	6b 2f       	mov	r22, r27
 8ac:	5c 2d       	mov	r21, r12
 8ae:	4d 2d       	mov	r20, r13
 8b0:	97 01       	movw	r18, r14
 8b2:	20 58       	subi	r18, 0x80	; 128
 8b4:	3d 45       	sbci	r19, 0x5D	; 93
 8b6:	4c 4b       	sbci	r20, 0xBC	; 188
 8b8:	58 43       	sbci	r21, 0x38	; 56
 8ba:	61 09       	sbc	r22, r1
 8bc:	71 09       	sbc	r23, r1
 8be:	81 09       	sbc	r24, r1
 8c0:	91 09       	sbc	r25, r1
 8c2:	19 01       	movw	r2, r18
 8c4:	4d 83       	std	Y+5, r20	; 0x05
 8c6:	59 87       	std	Y+9, r21	; 0x09
 8c8:	6d 87       	std	Y+13, r22	; 0x0d
 8ca:	79 83       	std	Y+1, r23	; 0x01
 8cc:	89 8b       	std	Y+17, r24	; 0x11
 8ce:	9a 8b       	std	Y+18, r25	; 0x12
 8d0:	f0 e8       	ldi	r31, 0x80	; 128
 8d2:	af 2e       	mov	r10, r31
 8d4:	a1 e5       	ldi	r26, 0x51	; 81
 8d6:	ba 2e       	mov	r11, r26
 8d8:	cc 24       	eor	r12, r12
 8da:	c3 94       	inc	r12
 8dc:	d1 2c       	mov	r13, r1
 8de:	e1 2c       	mov	r14, r1
 8e0:	f1 2c       	mov	r15, r1
 8e2:	00 e0       	ldi	r16, 0x00	; 0
 8e4:	10 e0       	ldi	r17, 0x00	; 0
 8e6:	0e 94 45 21 	call	0x428a	; 0x428a <__divdi3>
 8ea:	29 01       	movw	r4, r18
 8ec:	3a 01       	movw	r6, r20
 8ee:	4b 01       	movw	r8, r22
 8f0:	8e 8b       	std	Y+22, r24	; 0x16
 8f2:	9b 8b       	std	Y+19, r25	; 0x13
 8f4:	91 01       	movw	r18, r2
 8f6:	4d 81       	ldd	r20, Y+5	; 0x05
 8f8:	59 85       	ldd	r21, Y+9	; 0x09
 8fa:	6d 85       	ldd	r22, Y+13	; 0x0d
 8fc:	79 81       	ldd	r23, Y+1	; 0x01
 8fe:	89 89       	ldd	r24, Y+17	; 0x11
 900:	9a 89       	ldd	r25, Y+18	; 0x12
 902:	0e 94 43 21 	call	0x4286	; 0x4286 <__moddi3>
 906:	2d 83       	std	Y+5, r18	; 0x05
 908:	3e 83       	std	Y+6, r19	; 0x06
 90a:	4f 83       	std	Y+7, r20	; 0x07
 90c:	58 87       	std	Y+8, r21	; 0x08
 90e:	8d 81       	ldd	r24, Y+5	; 0x05
 910:	9e 81       	ldd	r25, Y+6	; 0x06
 912:	af 81       	ldd	r26, Y+7	; 0x07
 914:	b8 85       	ldd	r27, Y+8	; 0x08
 916:	b7 ff       	sbrs	r27, 7
 918:	15 c0       	rjmp	.+42     	; 0x944 <__secs_to_tm+0xe0>
 91a:	80 58       	subi	r24, 0x80	; 128
 91c:	9e 4a       	sbci	r25, 0xAE	; 174
 91e:	ae 4f       	sbci	r26, 0xFE	; 254
 920:	bf 4f       	sbci	r27, 0xFF	; 255
 922:	8d 83       	std	Y+5, r24	; 0x05
 924:	9e 83       	std	Y+6, r25	; 0x06
 926:	af 83       	std	Y+7, r26	; 0x07
 928:	b8 87       	std	Y+8, r27	; 0x08
 92a:	92 01       	movw	r18, r4
 92c:	a3 01       	movw	r20, r6
 92e:	b4 01       	movw	r22, r8
 930:	8e 89       	ldd	r24, Y+22	; 0x16
 932:	9b 89       	ldd	r25, Y+19	; 0x13
 934:	af ef       	ldi	r26, 0xFF	; 255
 936:	0e 94 5a 28 	call	0x50b4	; 0x50b4 <__adddi3_s8>
 93a:	29 01       	movw	r4, r18
 93c:	3a 01       	movw	r6, r20
 93e:	4b 01       	movw	r8, r22
 940:	8e 8b       	std	Y+22, r24	; 0x16
 942:	9b 8b       	std	Y+19, r25	; 0x13
 944:	92 01       	movw	r18, r4
 946:	a3 01       	movw	r20, r6
 948:	b4 01       	movw	r22, r8
 94a:	8e 89       	ldd	r24, Y+22	; 0x16
 94c:	9b 89       	ldd	r25, Y+19	; 0x13
 94e:	a3 e0       	ldi	r26, 0x03	; 3
 950:	0e 94 5a 28 	call	0x50b4	; 0x50b4 <__adddi3_s8>
 954:	e7 e0       	ldi	r30, 0x07	; 7
 956:	ae 2e       	mov	r10, r30
 958:	b1 2c       	mov	r11, r1
 95a:	c1 2c       	mov	r12, r1
 95c:	d1 2c       	mov	r13, r1
 95e:	e1 2c       	mov	r14, r1
 960:	f1 2c       	mov	r15, r1
 962:	00 e0       	ldi	r16, 0x00	; 0
 964:	10 e0       	ldi	r17, 0x00	; 0
 966:	0e 94 43 21 	call	0x4286	; 0x4286 <__moddi3>
 96a:	2d 87       	std	Y+13, r18	; 0x0d
 96c:	3e 87       	std	Y+14, r19	; 0x0e
 96e:	ad 85       	ldd	r26, Y+13	; 0x0d
 970:	be 85       	ldd	r27, Y+14	; 0x0e
 972:	b7 ff       	sbrs	r27, 7
 974:	03 c0       	rjmp	.+6      	; 0x97c <__secs_to_tm+0x118>
 976:	17 96       	adiw	r26, 0x07	; 7
 978:	be 87       	std	Y+14, r27	; 0x0e
 97a:	ad 87       	std	Y+13, r26	; 0x0d
 97c:	51 eb       	ldi	r21, 0xB1	; 177
 97e:	a5 2e       	mov	r10, r21
 980:	6a e3       	ldi	r22, 0x3A	; 58
 982:	b6 2e       	mov	r11, r22
 984:	72 e0       	ldi	r23, 0x02	; 2
 986:	c7 2e       	mov	r12, r23
 988:	d1 2c       	mov	r13, r1
 98a:	e1 2c       	mov	r14, r1
 98c:	f1 2c       	mov	r15, r1
 98e:	00 e0       	ldi	r16, 0x00	; 0
 990:	10 e0       	ldi	r17, 0x00	; 0
 992:	92 01       	movw	r18, r4
 994:	a3 01       	movw	r20, r6
 996:	b4 01       	movw	r22, r8
 998:	8e 89       	ldd	r24, Y+22	; 0x16
 99a:	9b 89       	ldd	r25, Y+19	; 0x13
 99c:	0e 94 45 21 	call	0x428a	; 0x428a <__divdi3>
 9a0:	29 87       	std	Y+9, r18	; 0x09
 9a2:	3a 87       	std	Y+10, r19	; 0x0a
 9a4:	4b 87       	std	Y+11, r20	; 0x0b
 9a6:	5c 87       	std	Y+12, r21	; 0x0c
 9a8:	92 01       	movw	r18, r4
 9aa:	a3 01       	movw	r20, r6
 9ac:	b4 01       	movw	r22, r8
 9ae:	8e 89       	ldd	r24, Y+22	; 0x16
 9b0:	9b 89       	ldd	r25, Y+19	; 0x13
 9b2:	0e 94 43 21 	call	0x4286	; 0x4286 <__moddi3>
 9b6:	82 2e       	mov	r8, r18
 9b8:	93 2e       	mov	r9, r19
 9ba:	a4 2e       	mov	r10, r20
 9bc:	b5 2e       	mov	r11, r21
 9be:	b7 fe       	sbrs	r11, 7
 9c0:	12 c0       	rjmp	.+36     	; 0x9e6 <__secs_to_tm+0x182>
 9c2:	b1 eb       	ldi	r27, 0xB1	; 177
 9c4:	8b 0e       	add	r8, r27
 9c6:	ba e3       	ldi	r27, 0x3A	; 58
 9c8:	9b 1e       	adc	r9, r27
 9ca:	b2 e0       	ldi	r27, 0x02	; 2
 9cc:	ab 1e       	adc	r10, r27
 9ce:	b1 1c       	adc	r11, r1
 9d0:	89 85       	ldd	r24, Y+9	; 0x09
 9d2:	9a 85       	ldd	r25, Y+10	; 0x0a
 9d4:	ab 85       	ldd	r26, Y+11	; 0x0b
 9d6:	bc 85       	ldd	r27, Y+12	; 0x0c
 9d8:	01 97       	sbiw	r24, 0x01	; 1
 9da:	a1 09       	sbc	r26, r1
 9dc:	b1 09       	sbc	r27, r1
 9de:	89 87       	std	Y+9, r24	; 0x09
 9e0:	9a 87       	std	Y+10, r25	; 0x0a
 9e2:	ab 87       	std	Y+11, r26	; 0x0b
 9e4:	bc 87       	std	Y+12, r27	; 0x0c
 9e6:	c5 01       	movw	r24, r10
 9e8:	b4 01       	movw	r22, r8
 9ea:	2c ea       	ldi	r18, 0xAC	; 172
 9ec:	3e e8       	ldi	r19, 0x8E	; 142
 9ee:	40 e0       	ldi	r20, 0x00	; 0
 9f0:	50 e0       	ldi	r21, 0x00	; 0
 9f2:	0e 94 83 25 	call	0x4b06	; 0x4b06 <__divmodsi4>
 9f6:	69 01       	movw	r12, r18
 9f8:	7a 01       	movw	r14, r20
 9fa:	24 30       	cpi	r18, 0x04	; 4
 9fc:	31 05       	cpc	r19, r1
 9fe:	41 05       	cpc	r20, r1
 a00:	51 05       	cpc	r21, r1
 a02:	29 f4       	brne	.+10     	; 0xa0e <__secs_to_tm+0x1aa>
 a04:	43 e0       	ldi	r20, 0x03	; 3
 a06:	c4 2e       	mov	r12, r20
 a08:	d1 2c       	mov	r13, r1
 a0a:	e1 2c       	mov	r14, r1
 a0c:	f1 2c       	mov	r15, r1
 a0e:	a4 e5       	ldi	r26, 0x54	; 84
 a10:	b1 e7       	ldi	r27, 0x71	; 113
 a12:	a7 01       	movw	r20, r14
 a14:	96 01       	movw	r18, r12
 a16:	0e 94 e6 28 	call	0x51cc	; 0x51cc <__mulohisi3>
 a1a:	2b 01       	movw	r4, r22
 a1c:	3c 01       	movw	r6, r24
 a1e:	48 0c       	add	r4, r8
 a20:	59 1c       	adc	r5, r9
 a22:	6a 1c       	adc	r6, r10
 a24:	7b 1c       	adc	r7, r11
 a26:	c3 01       	movw	r24, r6
 a28:	b2 01       	movw	r22, r4
 a2a:	25 eb       	ldi	r18, 0xB5	; 181
 a2c:	35 e0       	ldi	r19, 0x05	; 5
 a2e:	40 e0       	ldi	r20, 0x00	; 0
 a30:	50 e0       	ldi	r21, 0x00	; 0
 a32:	0e 94 83 25 	call	0x4b06	; 0x4b06 <__divmodsi4>
 a36:	49 01       	movw	r8, r18
 a38:	5a 01       	movw	r10, r20
 a3a:	29 31       	cpi	r18, 0x19	; 25
 a3c:	31 05       	cpc	r19, r1
 a3e:	41 05       	cpc	r20, r1
 a40:	51 05       	cpc	r21, r1
 a42:	29 f4       	brne	.+10     	; 0xa4e <__secs_to_tm+0x1ea>
 a44:	38 e1       	ldi	r19, 0x18	; 24
 a46:	83 2e       	mov	r8, r19
 a48:	91 2c       	mov	r9, r1
 a4a:	a1 2c       	mov	r10, r1
 a4c:	b1 2c       	mov	r11, r1
 a4e:	ab e4       	ldi	r26, 0x4B	; 75
 a50:	ba ef       	ldi	r27, 0xFA	; 250
 a52:	a5 01       	movw	r20, r10
 a54:	94 01       	movw	r18, r8
 a56:	0e 94 e6 28 	call	0x51cc	; 0x51cc <__mulohisi3>
 a5a:	46 0e       	add	r4, r22
 a5c:	57 1e       	adc	r5, r23
 a5e:	68 1e       	adc	r6, r24
 a60:	79 1e       	adc	r7, r25
 a62:	c3 01       	movw	r24, r6
 a64:	b2 01       	movw	r22, r4
 a66:	2d e6       	ldi	r18, 0x6D	; 109
 a68:	31 e0       	ldi	r19, 0x01	; 1
 a6a:	40 e0       	ldi	r20, 0x00	; 0
 a6c:	50 e0       	ldi	r21, 0x00	; 0
 a6e:	0e 94 83 25 	call	0x4b06	; 0x4b06 <__divmodsi4>
 a72:	29 83       	std	Y+1, r18	; 0x01
 a74:	3a 83       	std	Y+2, r19	; 0x02
 a76:	4b 83       	std	Y+3, r20	; 0x03
 a78:	5c 83       	std	Y+4, r21	; 0x04
 a7a:	24 30       	cpi	r18, 0x04	; 4
 a7c:	31 05       	cpc	r19, r1
 a7e:	41 05       	cpc	r20, r1
 a80:	51 05       	cpc	r21, r1
 a82:	41 f4       	brne	.+16     	; 0xa94 <__secs_to_tm+0x230>
 a84:	83 e0       	ldi	r24, 0x03	; 3
 a86:	90 e0       	ldi	r25, 0x00	; 0
 a88:	a0 e0       	ldi	r26, 0x00	; 0
 a8a:	b0 e0       	ldi	r27, 0x00	; 0
 a8c:	89 83       	std	Y+1, r24	; 0x01
 a8e:	9a 83       	std	Y+2, r25	; 0x02
 a90:	ab 83       	std	Y+3, r26	; 0x03
 a92:	bc 83       	std	Y+4, r27	; 0x04
 a94:	a3 e9       	ldi	r26, 0x93	; 147
 a96:	be ef       	ldi	r27, 0xFE	; 254
 a98:	29 81       	ldd	r18, Y+1	; 0x01
 a9a:	3a 81       	ldd	r19, Y+2	; 0x02
 a9c:	4b 81       	ldd	r20, Y+3	; 0x03
 a9e:	5c 81       	ldd	r21, Y+4	; 0x04
 aa0:	0e 94 e6 28 	call	0x51cc	; 0x51cc <__mulohisi3>
 aa4:	46 0e       	add	r4, r22
 aa6:	57 1e       	adc	r5, r23
 aa8:	68 1e       	adc	r6, r24
 aaa:	79 1e       	adc	r7, r25
 aac:	23 2b       	or	r18, r19
 aae:	24 2b       	or	r18, r20
 ab0:	25 2b       	or	r18, r21
 ab2:	81 f4       	brne	.+32     	; 0xad4 <__secs_to_tm+0x270>
 ab4:	81 14       	cp	r8, r1
 ab6:	91 04       	cpc	r9, r1
 ab8:	a1 04       	cpc	r10, r1
 aba:	b1 04       	cpc	r11, r1
 abc:	71 f4       	brne	.+28     	; 0xada <__secs_to_tm+0x276>
 abe:	31 e0       	ldi	r19, 0x01	; 1
 ac0:	20 e0       	ldi	r18, 0x00	; 0
 ac2:	c1 14       	cp	r12, r1
 ac4:	d1 04       	cpc	r13, r1
 ac6:	e1 04       	cpc	r14, r1
 ac8:	f1 04       	cpc	r15, r1
 aca:	09 f0       	breq	.+2      	; 0xace <__secs_to_tm+0x26a>
 acc:	30 e0       	ldi	r19, 0x00	; 0
 ace:	83 2f       	mov	r24, r19
 ad0:	92 2f       	mov	r25, r18
 ad2:	05 c0       	rjmp	.+10     	; 0xade <__secs_to_tm+0x27a>
 ad4:	80 e0       	ldi	r24, 0x00	; 0
 ad6:	90 e0       	ldi	r25, 0x00	; 0
 ad8:	02 c0       	rjmp	.+4      	; 0xade <__secs_to_tm+0x27a>
 ada:	81 e0       	ldi	r24, 0x01	; 1
 adc:	90 e0       	ldi	r25, 0x00	; 0
 ade:	12 01       	movw	r2, r4
 ae0:	ab e3       	ldi	r26, 0x3B	; 59
 ae2:	2a 0e       	add	r2, r26
 ae4:	31 1c       	adc	r3, r1
 ae6:	28 0e       	add	r2, r24
 ae8:	39 1e       	adc	r3, r25
 aea:	9c 01       	movw	r18, r24
 aec:	24 59       	subi	r18, 0x94	; 148
 aee:	3e 4f       	sbci	r19, 0xFE	; 254
 af0:	22 15       	cp	r18, r2
 af2:	33 05       	cpc	r19, r3
 af4:	24 f4       	brge	.+8      	; 0xafe <__secs_to_tm+0x29a>
 af6:	83 59       	subi	r24, 0x93	; 147
 af8:	9e 4f       	sbci	r25, 0xFE	; 254
 afa:	28 1a       	sub	r2, r24
 afc:	39 0a       	sbc	r3, r25
 afe:	92 e0       	ldi	r25, 0x02	; 2
 b00:	88 0c       	add	r8, r8
 b02:	99 1c       	adc	r9, r9
 b04:	aa 1c       	adc	r10, r10
 b06:	bb 1c       	adc	r11, r11
 b08:	9a 95       	dec	r25
 b0a:	d1 f7       	brne	.-12     	; 0xb00 <__secs_to_tm+0x29c>
 b0c:	89 81       	ldd	r24, Y+1	; 0x01
 b0e:	9a 81       	ldd	r25, Y+2	; 0x02
 b10:	ab 81       	ldd	r26, Y+3	; 0x03
 b12:	bc 81       	ldd	r27, Y+4	; 0x04
 b14:	88 0e       	add	r8, r24
 b16:	99 1e       	adc	r9, r25
 b18:	aa 1e       	adc	r10, r26
 b1a:	bb 1e       	adc	r11, r27
 b1c:	a4 e6       	ldi	r26, 0x64	; 100
 b1e:	b0 e0       	ldi	r27, 0x00	; 0
 b20:	a7 01       	movw	r20, r14
 b22:	96 01       	movw	r18, r12
 b24:	0e 94 7c 28 	call	0x50f8	; 0x50f8 <__muluhisi3>
 b28:	86 0e       	add	r8, r22
 b2a:	97 1e       	adc	r9, r23
 b2c:	a8 1e       	adc	r10, r24
 b2e:	b9 1e       	adc	r11, r25
 b30:	d5 01       	movw	r26, r10
 b32:	c4 01       	movw	r24, r8
 b34:	bb 0f       	add	r27, r27
 b36:	88 0b       	sbc	r24, r24
 b38:	98 2f       	mov	r25, r24
 b3a:	dc 01       	movw	r26, r24
 b3c:	89 83       	std	Y+1, r24	; 0x01
 b3e:	9a 83       	std	Y+2, r25	; 0x02
 b40:	ab 83       	std	Y+3, r26	; 0x03
 b42:	bc 83       	std	Y+4, r27	; 0x04
 b44:	69 85       	ldd	r22, Y+9	; 0x09
 b46:	7a 85       	ldd	r23, Y+10	; 0x0a
 b48:	8b 85       	ldd	r24, Y+11	; 0x0b
 b4a:	9c 85       	ldd	r25, Y+12	; 0x0c
 b4c:	20 e9       	ldi	r18, 0x90	; 144
 b4e:	31 e0       	ldi	r19, 0x01	; 1
 b50:	40 e0       	ldi	r20, 0x00	; 0
 b52:	50 e0       	ldi	r21, 0x00	; 0
 b54:	0e 94 18 28 	call	0x5030	; 0x5030 <__mulsidi3>
 b58:	f2 2f       	mov	r31, r18
 b5a:	e3 2f       	mov	r30, r19
 b5c:	6a 01       	movw	r12, r20
 b5e:	7b 01       	movw	r14, r22
 b60:	8c 01       	movw	r16, r24
 b62:	94 01       	movw	r18, r8
 b64:	a5 01       	movw	r20, r10
 b66:	69 81       	ldd	r22, Y+1	; 0x01
 b68:	76 2f       	mov	r23, r22
 b6a:	86 2f       	mov	r24, r22
 b6c:	96 2f       	mov	r25, r22
 b6e:	af 2e       	mov	r10, r31
 b70:	be 2e       	mov	r11, r30
 b72:	0e 94 c1 28 	call	0x5182	; 0x5182 <__adddi3>
 b76:	49 01       	movw	r8, r18
 b78:	5a 01       	movw	r10, r20
 b7a:	6b 01       	movw	r12, r22
 b7c:	7c 01       	movw	r14, r24
 b7e:	25 e3       	ldi	r18, 0x35	; 53
 b80:	33 e0       	ldi	r19, 0x03	; 3
 b82:	40 e0       	ldi	r20, 0x00	; 0
 b84:	1a 82       	std	Y+2, r1	; 0x02
 b86:	19 82       	std	Y+1, r1	; 0x01
 b88:	f9 01       	movw	r30, r18
 b8a:	84 91       	lpm	r24, Z
 b8c:	47 fd       	sbrc	r20, 7
 b8e:	80 81       	ld	r24, Z
 b90:	08 2e       	mov	r0, r24
 b92:	00 0c       	add	r0, r0
 b94:	99 0b       	sbc	r25, r25
 b96:	aa 0b       	sbc	r26, r26
 b98:	bb 0b       	sbc	r27, r27
 b9a:	2f 5f       	subi	r18, 0xFF	; 255
 b9c:	3f 4f       	sbci	r19, 0xFF	; 255
 b9e:	4f 4f       	sbci	r20, 0xFF	; 255
 ba0:	48 16       	cp	r4, r24
 ba2:	59 06       	cpc	r5, r25
 ba4:	6a 06       	cpc	r6, r26
 ba6:	7b 06       	cpc	r7, r27
 ba8:	54 f0       	brlt	.+20     	; 0xbbe <__secs_to_tm+0x35a>
 baa:	48 1a       	sub	r4, r24
 bac:	59 0a       	sbc	r5, r25
 bae:	6a 0a       	sbc	r6, r26
 bb0:	7b 0a       	sbc	r7, r27
 bb2:	a9 81       	ldd	r26, Y+1	; 0x01
 bb4:	ba 81       	ldd	r27, Y+2	; 0x02
 bb6:	11 96       	adiw	r26, 0x01	; 1
 bb8:	ba 83       	std	Y+2, r27	; 0x02
 bba:	a9 83       	std	Y+1, r26	; 0x01
 bbc:	e5 cf       	rjmp	.-54     	; 0xb88 <__secs_to_tm+0x324>
 bbe:	e9 81       	ldd	r30, Y+1	; 0x01
 bc0:	fa 81       	ldd	r31, Y+2	; 0x02
 bc2:	ea 30       	cpi	r30, 0x0A	; 10
 bc4:	f1 05       	cpc	r31, r1
 bc6:	74 f0       	brlt	.+28     	; 0xbe4 <__secs_to_tm+0x380>
 bc8:	3c 97       	sbiw	r30, 0x0c	; 12
 bca:	fa 83       	std	Y+2, r31	; 0x02
 bcc:	e9 83       	std	Y+1, r30	; 0x01
 bce:	94 01       	movw	r18, r8
 bd0:	a5 01       	movw	r20, r10
 bd2:	b6 01       	movw	r22, r12
 bd4:	c7 01       	movw	r24, r14
 bd6:	a1 e0       	ldi	r26, 0x01	; 1
 bd8:	0e 94 5a 28 	call	0x50b4	; 0x50b4 <__adddi3_s8>
 bdc:	49 01       	movw	r8, r18
 bde:	5a 01       	movw	r10, r20
 be0:	6b 01       	movw	r12, r22
 be2:	7c 01       	movw	r14, r24
 be4:	94 01       	movw	r18, r8
 be6:	a5 01       	movw	r20, r10
 be8:	b6 01       	movw	r22, r12
 bea:	c7 01       	movw	r24, r14
 bec:	2c 59       	subi	r18, 0x9C	; 156
 bee:	3f 47       	sbci	r19, 0x7F	; 127
 bf0:	4f 4f       	sbci	r20, 0xFF	; 255
 bf2:	5f 4f       	sbci	r21, 0xFF	; 255
 bf4:	6f 4f       	sbci	r22, 0xFF	; 255
 bf6:	7f 4f       	sbci	r23, 0xFF	; 255
 bf8:	8f 4f       	sbci	r24, 0xFF	; 255
 bfa:	9f 4f       	sbci	r25, 0xFF	; 255
 bfc:	2f 3f       	cpi	r18, 0xFF	; 255
 bfe:	3f 4f       	sbci	r19, 0xFF	; 255
 c00:	41 05       	cpc	r20, r1
 c02:	51 05       	cpc	r21, r1
 c04:	61 05       	cpc	r22, r1
 c06:	71 05       	cpc	r23, r1
 c08:	81 05       	cpc	r24, r1
 c0a:	91 05       	cpc	r25, r1
 c0c:	11 f0       	breq	.+4      	; 0xc12 <__secs_to_tm+0x3ae>
 c0e:	08 f0       	brcs	.+2      	; 0xc12 <__secs_to_tm+0x3ae>
 c10:	4f c0       	rjmp	.+158    	; 0xcb0 <__secs_to_tm+0x44c>
 c12:	24 e6       	ldi	r18, 0x64	; 100
 c14:	82 0e       	add	r8, r18
 c16:	91 1c       	adc	r9, r1
 c18:	af 85       	ldd	r26, Y+15	; 0x0f
 c1a:	b8 89       	ldd	r27, Y+16	; 0x10
 c1c:	1b 96       	adiw	r26, 0x0b	; 11
 c1e:	9c 92       	st	X, r9
 c20:	8e 92       	st	-X, r8
 c22:	1a 97       	sbiw	r26, 0x0a	; 10
 c24:	e9 81       	ldd	r30, Y+1	; 0x01
 c26:	fa 81       	ldd	r31, Y+2	; 0x02
 c28:	32 96       	adiw	r30, 0x02	; 2
 c2a:	19 96       	adiw	r26, 0x09	; 9
 c2c:	fc 93       	st	X, r31
 c2e:	ee 93       	st	-X, r30
 c30:	18 97       	sbiw	r26, 0x08	; 8
 c32:	ff ef       	ldi	r31, 0xFF	; 255
 c34:	4f 1a       	sub	r4, r31
 c36:	5f 0a       	sbc	r5, r31
 c38:	17 96       	adiw	r26, 0x07	; 7
 c3a:	5c 92       	st	X, r5
 c3c:	4e 92       	st	-X, r4
 c3e:	16 97       	sbiw	r26, 0x06	; 6
 c40:	8d 85       	ldd	r24, Y+13	; 0x0d
 c42:	9e 85       	ldd	r25, Y+14	; 0x0e
 c44:	1d 96       	adiw	r26, 0x0d	; 13
 c46:	9c 93       	st	X, r25
 c48:	8e 93       	st	-X, r24
 c4a:	1c 97       	sbiw	r26, 0x0c	; 12
 c4c:	1f 96       	adiw	r26, 0x0f	; 15
 c4e:	3c 92       	st	X, r3
 c50:	2e 92       	st	-X, r2
 c52:	1e 97       	sbiw	r26, 0x0e	; 14
 c54:	6d 81       	ldd	r22, Y+5	; 0x05
 c56:	7e 81       	ldd	r23, Y+6	; 0x06
 c58:	8f 81       	ldd	r24, Y+7	; 0x07
 c5a:	98 85       	ldd	r25, Y+8	; 0x08
 c5c:	20 e1       	ldi	r18, 0x10	; 16
 c5e:	3e e0       	ldi	r19, 0x0E	; 14
 c60:	40 e0       	ldi	r20, 0x00	; 0
 c62:	50 e0       	ldi	r21, 0x00	; 0
 c64:	0e 94 83 25 	call	0x4b06	; 0x4b06 <__divmodsi4>
 c68:	af 85       	ldd	r26, Y+15	; 0x0f
 c6a:	b8 89       	ldd	r27, Y+16	; 0x10
 c6c:	15 96       	adiw	r26, 0x05	; 5
 c6e:	3c 93       	st	X, r19
 c70:	2e 93       	st	-X, r18
 c72:	14 97       	sbiw	r26, 0x04	; 4
 c74:	8c e3       	ldi	r24, 0x3C	; 60
 c76:	c8 2e       	mov	r12, r24
 c78:	d1 2c       	mov	r13, r1
 c7a:	e1 2c       	mov	r14, r1
 c7c:	f1 2c       	mov	r15, r1
 c7e:	6d 81       	ldd	r22, Y+5	; 0x05
 c80:	7e 81       	ldd	r23, Y+6	; 0x06
 c82:	8f 81       	ldd	r24, Y+7	; 0x07
 c84:	98 85       	ldd	r25, Y+8	; 0x08
 c86:	a7 01       	movw	r20, r14
 c88:	96 01       	movw	r18, r12
 c8a:	0e 94 83 25 	call	0x4b06	; 0x4b06 <__divmodsi4>
 c8e:	4b 01       	movw	r8, r22
 c90:	5c 01       	movw	r10, r24
 c92:	ca 01       	movw	r24, r20
 c94:	b9 01       	movw	r22, r18
 c96:	a7 01       	movw	r20, r14
 c98:	96 01       	movw	r18, r12
 c9a:	0e 94 83 25 	call	0x4b06	; 0x4b06 <__divmodsi4>
 c9e:	ef 85       	ldd	r30, Y+15	; 0x0f
 ca0:	f8 89       	ldd	r31, Y+16	; 0x10
 ca2:	73 83       	std	Z+3, r23	; 0x03
 ca4:	62 83       	std	Z+2, r22	; 0x02
 ca6:	91 82       	std	Z+1, r9	; 0x01
 ca8:	80 82       	st	Z, r8
 caa:	80 e0       	ldi	r24, 0x00	; 0
 cac:	90 e0       	ldi	r25, 0x00	; 0
 cae:	02 c0       	rjmp	.+4      	; 0xcb4 <__secs_to_tm+0x450>
 cb0:	8f ef       	ldi	r24, 0xFF	; 255
 cb2:	9f ef       	ldi	r25, 0xFF	; 255
 cb4:	66 96       	adiw	r28, 0x16	; 22
 cb6:	e2 e1       	ldi	r30, 0x12	; 18
 cb8:	0c 94 b8 24 	jmp	0x4970	; 0x4970 <__epilogue_restores__>

Disassembly of section .text.libgcc.div:

00004cb2 <__divmodhi4>:
    4cb2:	97 fb       	bst	r25, 7
    4cb4:	07 2e       	mov	r0, r23
    4cb6:	16 f4       	brtc	.+4      	; 0x4cbc <__divmodhi4+0xa>
    4cb8:	00 94       	com	r0
    4cba:	07 d0       	rcall	.+14     	; 0x4cca <__divmodhi4_neg1>
    4cbc:	77 fd       	sbrc	r23, 7
    4cbe:	09 d0       	rcall	.+18     	; 0x4cd2 <__divmodhi4_neg2>
    4cc0:	0e 94 45 26 	call	0x4c8a	; 0x4c8a <__udivmodhi4>
    4cc4:	07 fc       	sbrc	r0, 7
    4cc6:	05 d0       	rcall	.+10     	; 0x4cd2 <__divmodhi4_neg2>
    4cc8:	3e f4       	brtc	.+14     	; 0x4cd8 <__divmodhi4_exit>

00004cca <__divmodhi4_neg1>:
    4cca:	90 95       	com	r25
    4ccc:	81 95       	neg	r24
    4cce:	9f 4f       	sbci	r25, 0xFF	; 255
    4cd0:	08 95       	ret

00004cd2 <__divmodhi4_neg2>:
    4cd2:	70 95       	com	r23
    4cd4:	61 95       	neg	r22
    4cd6:	7f 4f       	sbci	r23, 0xFF	; 255

00004cd8 <__divmodhi4_exit>:
    4cd8:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00003918 <__muldi3>:
    3918:	df 93       	push	r29
    391a:	cf 93       	push	r28
    391c:	1f 93       	push	r17
    391e:	0f 93       	push	r16
    3920:	9a 9d       	mul	r25, r10
    3922:	f0 2d       	mov	r31, r0
    3924:	21 9f       	mul	r18, r17
    3926:	f0 0d       	add	r31, r0
    3928:	8b 9d       	mul	r24, r11
    392a:	f0 0d       	add	r31, r0
    392c:	8a 9d       	mul	r24, r10
    392e:	e0 2d       	mov	r30, r0
    3930:	f1 0d       	add	r31, r1
    3932:	03 9f       	mul	r16, r19
    3934:	f0 0d       	add	r31, r0
    3936:	02 9f       	mul	r16, r18
    3938:	e0 0d       	add	r30, r0
    393a:	f1 1d       	adc	r31, r1
    393c:	4e 9d       	mul	r20, r14
    393e:	e0 0d       	add	r30, r0
    3940:	f1 1d       	adc	r31, r1
    3942:	5e 9d       	mul	r21, r14
    3944:	f0 0d       	add	r31, r0
    3946:	4f 9d       	mul	r20, r15
    3948:	f0 0d       	add	r31, r0
    394a:	7f 93       	push	r23
    394c:	6f 93       	push	r22
    394e:	bf 92       	push	r11
    3950:	af 92       	push	r10
    3952:	5f 93       	push	r21
    3954:	4f 93       	push	r20
    3956:	d5 01       	movw	r26, r10
    3958:	0e 94 09 28 	call	0x5012	; 0x5012 <__umulhisi3>
    395c:	8b 01       	movw	r16, r22
    395e:	ac 01       	movw	r20, r24
    3960:	d7 01       	movw	r26, r14
    3962:	0e 94 09 28 	call	0x5012	; 0x5012 <__umulhisi3>
    3966:	eb 01       	movw	r28, r22
    3968:	e8 0f       	add	r30, r24
    396a:	f9 1f       	adc	r31, r25
    396c:	d6 01       	movw	r26, r12
    396e:	0e 94 b8 28 	call	0x5170	; 0x5170 <__muldi3_6>
    3972:	2f 91       	pop	r18
    3974:	3f 91       	pop	r19
    3976:	d6 01       	movw	r26, r12
    3978:	0e 94 09 28 	call	0x5012	; 0x5012 <__umulhisi3>
    397c:	c6 0f       	add	r28, r22
    397e:	d7 1f       	adc	r29, r23
    3980:	e8 1f       	adc	r30, r24
    3982:	f9 1f       	adc	r31, r25
    3984:	af 91       	pop	r26
    3986:	bf 91       	pop	r27
    3988:	0e 94 b8 28 	call	0x5170	; 0x5170 <__muldi3_6>
    398c:	2f 91       	pop	r18
    398e:	3f 91       	pop	r19
    3990:	0e 94 09 28 	call	0x5012	; 0x5012 <__umulhisi3>
    3994:	c6 0f       	add	r28, r22
    3996:	d7 1f       	adc	r29, r23
    3998:	e8 1f       	adc	r30, r24
    399a:	f9 1f       	adc	r31, r25
    399c:	d6 01       	movw	r26, r12
    399e:	0e 94 09 28 	call	0x5012	; 0x5012 <__umulhisi3>
    39a2:	e6 0f       	add	r30, r22
    39a4:	f7 1f       	adc	r31, r23
    39a6:	98 01       	movw	r18, r16
    39a8:	be 01       	movw	r22, r28
    39aa:	cf 01       	movw	r24, r30
    39ac:	11 24       	eor	r1, r1
    39ae:	0f 91       	pop	r16
    39b0:	1f 91       	pop	r17
    39b2:	cf 91       	pop	r28
    39b4:	df 91       	pop	r29
    39b6:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00005170 <__muldi3_6>:
    5170:	0e 94 09 28 	call	0x5012	; 0x5012 <__umulhisi3>
    5174:	46 0f       	add	r20, r22
    5176:	57 1f       	adc	r21, r23
    5178:	c8 1f       	adc	r28, r24
    517a:	d9 1f       	adc	r29, r25
    517c:	08 f4       	brcc	.+2      	; 0x5180 <__muldi3_6+0x10>
    517e:	31 96       	adiw	r30, 0x01	; 1
    5180:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00005030 <__mulsidi3>:
    5030:	97 fb       	bst	r25, 7
    5032:	57 ff       	sbrs	r21, 7
    5034:	0c 94 80 22 	jmp	0x4500	; 0x4500 <__umulsidi3_helper>
    5038:	9f 93       	push	r25
    503a:	8f 93       	push	r24
    503c:	0e 94 80 22 	call	0x4500	; 0x4500 <__umulsidi3_helper>
    5040:	6e 1b       	sub	r22, r30
    5042:	7f 0b       	sbc	r23, r31
    5044:	af 91       	pop	r26
    5046:	bf 91       	pop	r27
    5048:	8a 0b       	sbc	r24, r26
    504a:	9b 0b       	sbc	r25, r27
    504c:	08 95       	ret

Disassembly of section .text.libgcc.mul:

000044fe <__umulsidi3>:
    44fe:	e8 94       	clt

00004500 <__umulsidi3_helper>:
    4500:	df 93       	push	r29
    4502:	cf 93       	push	r28
    4504:	fc 01       	movw	r30, r24
    4506:	db 01       	movw	r26, r22
    4508:	0e 94 09 28 	call	0x5012	; 0x5012 <__umulhisi3>
    450c:	7f 93       	push	r23
    450e:	6f 93       	push	r22
    4510:	e9 01       	movw	r28, r18
    4512:	9a 01       	movw	r18, r20
    4514:	ac 01       	movw	r20, r24
    4516:	bf 93       	push	r27
    4518:	af 93       	push	r26
    451a:	3f 93       	push	r19
    451c:	2f 93       	push	r18
    451e:	df 01       	movw	r26, r30
    4520:	0e 94 09 28 	call	0x5012	; 0x5012 <__umulhisi3>
    4524:	26 f4       	brtc	.+8      	; 0x452e <__umulsidi3_helper+0x2e>
    4526:	6c 1b       	sub	r22, r28
    4528:	7d 0b       	sbc	r23, r29
    452a:	82 0b       	sbc	r24, r18
    452c:	93 0b       	sbc	r25, r19
    452e:	9e 01       	movw	r18, r28
    4530:	eb 01       	movw	r28, r22
    4532:	fc 01       	movw	r30, r24
    4534:	0e 94 b8 28 	call	0x5170	; 0x5170 <__muldi3_6>
    4538:	af 91       	pop	r26
    453a:	bf 91       	pop	r27
    453c:	2f 91       	pop	r18
    453e:	3f 91       	pop	r19
    4540:	0e 94 b8 28 	call	0x5170	; 0x5170 <__muldi3_6>
    4544:	be 01       	movw	r22, r28
    4546:	cf 01       	movw	r24, r30
    4548:	f9 01       	movw	r30, r18
    454a:	2f 91       	pop	r18
    454c:	3f 91       	pop	r19
    454e:	cf 91       	pop	r28
    4550:	df 91       	pop	r29
    4552:	08 95       	ret

Disassembly of section .text.libgcc.div:

00004286 <__moddi3>:
    4286:	68 94       	set
    4288:	01 c0       	rjmp	.+2      	; 0x428c <__divdi3_moddi3>

0000428a <__divdi3>:
    428a:	e8 94       	clt

0000428c <__divdi3_moddi3>:
    428c:	f9 2f       	mov	r31, r25
    428e:	f1 2b       	or	r31, r17
    4290:	12 f0       	brmi	.+4      	; 0x4296 <__divdi3_moddi3+0xa>
    4292:	0c 94 2a 28 	jmp	0x5054	; 0x5054 <__udivdi3_umoddi3>
    4296:	a0 e0       	ldi	r26, 0x00	; 0
    4298:	b0 e0       	ldi	r27, 0x00	; 0
    429a:	e1 e5       	ldi	r30, 0x51	; 81
    429c:	f1 e2       	ldi	r31, 0x21	; 33
    429e:	0c 94 87 24 	jmp	0x490e	; 0x490e <__prologue_saves__+0xc>
    42a2:	09 2e       	mov	r0, r25
    42a4:	05 94       	asr	r0
    42a6:	22 f4       	brpl	.+8      	; 0x42b0 <__divdi3_moddi3+0x24>
    42a8:	0e 94 f9 27 	call	0x4ff2	; 0x4ff2 <__negdi2>
    42ac:	11 23       	and	r17, r17
    42ae:	92 f4       	brpl	.+36     	; 0x42d4 <__divdi3_moddi3+0x48>
    42b0:	f0 e8       	ldi	r31, 0x80	; 128
    42b2:	0f 26       	eor	r0, r31
    42b4:	ff ef       	ldi	r31, 0xFF	; 255
    42b6:	e0 94       	com	r14
    42b8:	f0 94       	com	r15
    42ba:	00 95       	com	r16
    42bc:	10 95       	com	r17
    42be:	b0 94       	com	r11
    42c0:	c0 94       	com	r12
    42c2:	d0 94       	com	r13
    42c4:	a1 94       	neg	r10
    42c6:	bf 0a       	sbc	r11, r31
    42c8:	cf 0a       	sbc	r12, r31
    42ca:	df 0a       	sbc	r13, r31
    42cc:	ef 0a       	sbc	r14, r31
    42ce:	ff 0a       	sbc	r15, r31
    42d0:	0f 0b       	sbc	r16, r31
    42d2:	1f 0b       	sbc	r17, r31
    42d4:	0e 94 eb 1b 	call	0x37d6	; 0x37d6 <__udivmod64>
    42d8:	07 fc       	sbrc	r0, 7
    42da:	0e 94 f9 27 	call	0x4ff2	; 0x4ff2 <__negdi2>
    42de:	cd b7       	in	r28, 0x3d	; 61
    42e0:	de b7       	in	r29, 0x3e	; 62
    42e2:	ec e0       	ldi	r30, 0x0C	; 12
    42e4:	0c 94 be 24 	jmp	0x497c	; 0x497c <__epilogue_restores__+0xc>

Disassembly of section .text.libgcc.div:

0000504e <__umoddi3>:
    504e:	68 94       	set
    5050:	01 c0       	rjmp	.+2      	; 0x5054 <__udivdi3_umoddi3>

00005052 <__udivdi3>:
    5052:	e8 94       	clt

00005054 <__udivdi3_umoddi3>:
    5054:	8f 92       	push	r8
    5056:	9f 92       	push	r9
    5058:	cf 93       	push	r28
    505a:	df 93       	push	r29
    505c:	0e 94 eb 1b 	call	0x37d6	; 0x37d6 <__udivmod64>
    5060:	df 91       	pop	r29
    5062:	cf 91       	pop	r28
    5064:	9f 90       	pop	r9
    5066:	8f 90       	pop	r8
    5068:	08 95       	ret

Disassembly of section .text.libgcc.div:

000037d6 <__udivmod64>:
    37d6:	88 24       	eor	r8, r8
    37d8:	99 24       	eor	r9, r9
    37da:	f4 01       	movw	r30, r8
    37dc:	e4 01       	movw	r28, r8
    37de:	b0 e4       	ldi	r27, 0x40	; 64
    37e0:	9f 93       	push	r25
    37e2:	aa 27       	eor	r26, r26
    37e4:	9a 15       	cp	r25, r10
    37e6:	8b 04       	cpc	r8, r11
    37e8:	9c 04       	cpc	r9, r12
    37ea:	ed 05       	cpc	r30, r13
    37ec:	fe 05       	cpc	r31, r14
    37ee:	cf 05       	cpc	r28, r15
    37f0:	d0 07       	cpc	r29, r16
    37f2:	a1 07       	cpc	r26, r17
    37f4:	98 f4       	brcc	.+38     	; 0x381c <__udivmod64+0x46>
    37f6:	ad 2f       	mov	r26, r29
    37f8:	dc 2f       	mov	r29, r28
    37fa:	cf 2f       	mov	r28, r31
    37fc:	fe 2f       	mov	r31, r30
    37fe:	e9 2d       	mov	r30, r9
    3800:	98 2c       	mov	r9, r8
    3802:	89 2e       	mov	r8, r25
    3804:	98 2f       	mov	r25, r24
    3806:	87 2f       	mov	r24, r23
    3808:	76 2f       	mov	r23, r22
    380a:	65 2f       	mov	r22, r21
    380c:	54 2f       	mov	r21, r20
    380e:	43 2f       	mov	r20, r19
    3810:	32 2f       	mov	r19, r18
    3812:	22 27       	eor	r18, r18
    3814:	b8 50       	subi	r27, 0x08	; 8
    3816:	31 f7       	brne	.-52     	; 0x37e4 <__udivmod64+0xe>
    3818:	bf 91       	pop	r27
    381a:	27 c0       	rjmp	.+78     	; 0x386a <__udivmod64+0x94>
    381c:	1b 2e       	mov	r1, r27
    381e:	bf 91       	pop	r27
    3820:	bb 27       	eor	r27, r27
    3822:	22 0f       	add	r18, r18
    3824:	33 1f       	adc	r19, r19
    3826:	44 1f       	adc	r20, r20
    3828:	55 1f       	adc	r21, r21
    382a:	66 1f       	adc	r22, r22
    382c:	77 1f       	adc	r23, r23
    382e:	88 1f       	adc	r24, r24
    3830:	99 1f       	adc	r25, r25
    3832:	88 1c       	adc	r8, r8
    3834:	99 1c       	adc	r9, r9
    3836:	ee 1f       	adc	r30, r30
    3838:	ff 1f       	adc	r31, r31
    383a:	cc 1f       	adc	r28, r28
    383c:	dd 1f       	adc	r29, r29
    383e:	aa 1f       	adc	r26, r26
    3840:	bb 1f       	adc	r27, r27
    3842:	8a 14       	cp	r8, r10
    3844:	9b 04       	cpc	r9, r11
    3846:	ec 05       	cpc	r30, r12
    3848:	fd 05       	cpc	r31, r13
    384a:	ce 05       	cpc	r28, r14
    384c:	df 05       	cpc	r29, r15
    384e:	a0 07       	cpc	r26, r16
    3850:	b1 07       	cpc	r27, r17
    3852:	48 f0       	brcs	.+18     	; 0x3866 <__udivmod64+0x90>
    3854:	8a 18       	sub	r8, r10
    3856:	9b 08       	sbc	r9, r11
    3858:	ec 09       	sbc	r30, r12
    385a:	fd 09       	sbc	r31, r13
    385c:	ce 09       	sbc	r28, r14
    385e:	df 09       	sbc	r29, r15
    3860:	a0 0b       	sbc	r26, r16
    3862:	b1 0b       	sbc	r27, r17
    3864:	21 60       	ori	r18, 0x01	; 1
    3866:	1a 94       	dec	r1
    3868:	e1 f6       	brne	.-72     	; 0x3822 <__udivmod64+0x4c>
    386a:	2e f4       	brtc	.+10     	; 0x3876 <__udivmod64+0xa0>
    386c:	94 01       	movw	r18, r8
    386e:	af 01       	movw	r20, r30
    3870:	be 01       	movw	r22, r28
    3872:	cd 01       	movw	r24, r26
    3874:	00 0c       	add	r0, r0
    3876:	08 95       	ret

Disassembly of section .text.libgcc:

00004ff2 <__negdi2>:
    4ff2:	60 95       	com	r22
    4ff4:	70 95       	com	r23
    4ff6:	80 95       	com	r24
    4ff8:	90 95       	com	r25
    4ffa:	30 95       	com	r19
    4ffc:	40 95       	com	r20
    4ffe:	50 95       	com	r21
    5000:	21 95       	neg	r18
    5002:	3f 4f       	sbci	r19, 0xFF	; 255
    5004:	4f 4f       	sbci	r20, 0xFF	; 255
    5006:	5f 4f       	sbci	r21, 0xFF	; 255
    5008:	6f 4f       	sbci	r22, 0xFF	; 255
    500a:	7f 4f       	sbci	r23, 0xFF	; 255
    500c:	8f 4f       	sbci	r24, 0xFF	; 255
    500e:	9f 4f       	sbci	r25, 0xFF	; 255
    5010:	08 95       	ret

Disassembly of section .text.libgcc.prologue:

00004902 <__prologue_saves__>:
    4902:	2f 92       	push	r2
    4904:	3f 92       	push	r3
    4906:	4f 92       	push	r4
    4908:	5f 92       	push	r5
    490a:	6f 92       	push	r6
    490c:	7f 92       	push	r7
    490e:	8f 92       	push	r8
    4910:	9f 92       	push	r9
    4912:	af 92       	push	r10
    4914:	bf 92       	push	r11
    4916:	cf 92       	push	r12
    4918:	df 92       	push	r13
    491a:	ef 92       	push	r14
    491c:	ff 92       	push	r15
    491e:	0f 93       	push	r16
    4920:	1f 93       	push	r17
    4922:	cf 93       	push	r28
    4924:	df 93       	push	r29
    4926:	cd b7       	in	r28, 0x3d	; 61
    4928:	de b7       	in	r29, 0x3e	; 62
    492a:	ca 1b       	sub	r28, r26
    492c:	db 0b       	sbc	r29, r27
    492e:	0f b6       	in	r0, 0x3f	; 63
    4930:	f8 94       	cli
    4932:	de bf       	out	0x3e, r29	; 62
    4934:	0f be       	out	0x3f, r0	; 63
    4936:	cd bf       	out	0x3d, r28	; 61
    4938:	09 94       	ijmp

Disassembly of section .text.libgcc.prologue:

00004970 <__epilogue_restores__>:
    4970:	2a 88       	ldd	r2, Y+18	; 0x12
    4972:	39 88       	ldd	r3, Y+17	; 0x11
    4974:	48 88       	ldd	r4, Y+16	; 0x10
    4976:	5f 84       	ldd	r5, Y+15	; 0x0f
    4978:	6e 84       	ldd	r6, Y+14	; 0x0e
    497a:	7d 84       	ldd	r7, Y+13	; 0x0d
    497c:	8c 84       	ldd	r8, Y+12	; 0x0c
    497e:	9b 84       	ldd	r9, Y+11	; 0x0b
    4980:	aa 84       	ldd	r10, Y+10	; 0x0a
    4982:	b9 84       	ldd	r11, Y+9	; 0x09
    4984:	c8 84       	ldd	r12, Y+8	; 0x08
    4986:	df 80       	ldd	r13, Y+7	; 0x07
    4988:	ee 80       	ldd	r14, Y+6	; 0x06
    498a:	fd 80       	ldd	r15, Y+5	; 0x05
    498c:	0c 81       	ldd	r16, Y+4	; 0x04
    498e:	1b 81       	ldd	r17, Y+3	; 0x03
    4990:	aa 81       	ldd	r26, Y+2	; 0x02
    4992:	b9 81       	ldd	r27, Y+1	; 0x01
    4994:	ce 0f       	add	r28, r30
    4996:	d1 1d       	adc	r29, r1
    4998:	0f b6       	in	r0, 0x3f	; 63
    499a:	f8 94       	cli
    499c:	de bf       	out	0x3e, r29	; 62
    499e:	0f be       	out	0x3f, r0	; 63
    49a0:	cd bf       	out	0x3d, r28	; 61
    49a2:	ed 01       	movw	r28, r26
    49a4:	08 95       	ret

Disassembly of section .text.libgcc:

00005182 <__adddi3>:
    5182:	2a 0d       	add	r18, r10
    5184:	3b 1d       	adc	r19, r11
    5186:	4c 1d       	adc	r20, r12
    5188:	5d 1d       	adc	r21, r13
    518a:	6e 1d       	adc	r22, r14
    518c:	7f 1d       	adc	r23, r15
    518e:	80 1f       	adc	r24, r16
    5190:	91 1f       	adc	r25, r17
    5192:	08 95       	ret

Disassembly of section .text.libgcc:

00005194 <__cmpdi2>:
    5194:	2a 15       	cp	r18, r10
    5196:	3b 05       	cpc	r19, r11
    5198:	4c 05       	cpc	r20, r12
    519a:	5d 05       	cpc	r21, r13
    519c:	6e 05       	cpc	r22, r14
    519e:	7f 05       	cpc	r23, r15
    51a0:	80 07       	cpc	r24, r16
    51a2:	91 07       	cpc	r25, r17
    51a4:	08 95       	ret
