
ModuleCPU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00004f76  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000da  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00004f78  2**0
                  ALLOC
  3 .noinit       0000022a  00800102  00800102  00004f78  2**2
                  ALLOC
  4 .comment      0000002f  00000000  00000000  00004f76  2**0
                  CONTENTS, READONLY
  5 .stack.descriptors.hdr 00000142  00000000  00000000  00004fa5  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000508  00000000  00000000  000050e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00008d9f  00000000  00000000  000055ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001aa4  00000000  00000000  0000e38e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003769  00000000  00000000  0000fe32  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001240  00000000  00000000  0001359c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000006d5  00000000  00000000  000147dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000496e  00000000  00000000  00014eb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000004e8  00000000  00000000  0001981f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .text         00000004  00004eb0  00004eb0  00004f64  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00019d08  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .text.__vector_27 000000bc  00003328  00003328  000033dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.ADCSetPowerOn 0000000c  00004e74  00004e74  00004f28  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.ADCStartConversion 0000002a  00004850  00004850  00004904  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .progmemx.data 0000000b  000004b9  000004b9  0000056d  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 20 .text.ADCInit 0000013c  00002464  00002464  00002518  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .progmemx.data.sg_sMuxSelectList 0000000f  00000492  00000492  00000546  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 22 .bss.sg_eCurrentType 00000001  0080095b  0080095b  00004f78  2**0
                  ALLOC
 23 .bss.sg_eState 00000001  0080095c  0080095c  00004f78  2**0
                  ALLOC
 24 .text.CANLookupCommand 00000062  00003f72  00003f72  00004026  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .progmemx.data 0000000b  000004c4  000004c4  00000578  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 26 .text.CANMOBSet 00000212  00001c24  00001c24  00001cd8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.CANSendMessageInternal 00000178  00002186  00002186  0000223a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.CANMOBInterrupt 00000192  00001ff4  00001ff4  000020a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.__vector_18 00000118  000026d4  000026d4  00002788  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.CANSendMessage 00000016  00004d36  00004d36  00004dea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.CANSetRXCallback 0000000a  00004e8c  00004e8c  00004f40  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.CANInit 0000009c  0000368a  0000368a  0000373e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .progmemx.data.sg_sRXCommandList 00000021  0000044d  0000044d  00000501  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 34 .progmemx.data.sg_sMOBModuleRequestTime 00000008  000004cf  000004cf  00000583  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 35 .progmemx.data.sg_sMOBModuleHardwareDetail 00000008  000004d7  000004d7  0000058b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 36 .progmemx.data.sg_sMOBModuleCellDetail 00000008  000004df  000004df  00000593  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 37 .progmemx.data.sg_sMOBModuleCellCommStat2 00000008  000004e7  000004e7  0000059b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 38 .progmemx.data.sg_sMOBModuleCellCommStat1 00000008  000004ef  000004ef  000005a3  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 39 .progmemx.data.sg_sMOBModuleStatus3 00000008  000004f7  000004f7  000005ab  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 40 .progmemx.data.sg_sMOBModuleStatus2 00000008  000004ff  000004ff  000005b3  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 41 .progmemx.data.sg_sMOBModuleStatus1 00000008  00000507  00000507  000005bb  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 42 .progmemx.data.sg_sMOBModuleAnnouncement 00000008  0000050f  0000050f  000005c3  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 43 .progmemx.data.sg_sMOBGenericReceive 00000008  00000517  00000517  000005cb  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 44 .progmemx.data.sg_sMOBDisabled 00000008  0000051f  0000051f  000005d3  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 45 .bss.sg_bInRetransmit 00000001  0080095d  0080095d  00004f78  2**0
                  ALLOC
 46 .bss.sg_u8LastTXDataLen 00000001  0080095e  0080095e  00004f78  2**0
                  ALLOC
 47 .bss.sg_u8LastTXData 00000008  0080093d  0080093d  00004f78  2**0
                  ALLOC
 48 .bss.sg_eLastTXType 00000001  0080095f  0080095f  00004f78  2**0
                  ALLOC
 49 .bss.sg_u8TransmitAttempts 00000001  00800960  00800960  00004f78  2**0
                  ALLOC
 50 .bss.sg_pfRXCallback 00000002  00800955  00800955  00004f78  2**0
                  ALLOC
 51 .bss.sg_bBusy 00000001  00800961  00800961  00004f78  2**0
                  ALLOC
 52 .text.DebugOut 0000000e  00004e3c  00004e3c  00004ef0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 53 .text.EEPROMRead 00000012  00004da2  00004da2  00004e56  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 .text.I2CBitDelay 0000000e  00004e4a  00004e4a  00004efe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.I2CStart 0000002c  000047a0  000047a0  00004854  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.I2CStop 00000026  00004942  00004942  000049f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .text.I2CUnstick 0000003c  000044f0  000044f0  000045a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .text.I2CTxByte 0000006a  00003e38  00003e38  00003eec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 .text.I2CRxByte 0000007a  00003cd8  00003cd8  00003d8c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 60 .text.I2CSetup 0000002c  000047cc  000047cc  00004880  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 61 .text.I2CStartTransaction 00000028  0000487a  0000487a  0000492e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 62 .text.CellCountExpectedSet 000000c4  000031a2  000031a2  00003256  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 63 .text.SendModuleControllerStatus 00000010  00004dfc  00004dfc  00004eb0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 64 .text.ModuleControllerStateSet 0000000a  00004e96  00004e96  00004f4a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .text.ModuleControllerStateSetMax 00000016  00004d4c  00004d4c  00004e00  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 66 .text.Check5VLoss 00000018  00004cee  00004cee  00004da2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 67 .text.CellDataConvertVoltage 00000062  00003fd4  00003fd4  00004088  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 68 .text.CellDataConvertTemperature 0000007a  00003d52  00003d52  00003e06  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 69 .text.CellDataConvert 00000028  000048a2  000048a2  00004956  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 70 .text.ModuleCurrentConvertReadings 00000104  000027ec  000027ec  000028a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 71 .text.__vector_1 00000024  0000498e  0000498e  00004a42  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 72 .text.__vector_2 00000024  000049b2  000049b2  00004a66  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 73 .text.__vector_3 00000024  000049d6  000049d6  00004a8a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 74 .text.__vector_4 00000024  000049fa  000049fa  00004aae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 75 .text.__vector_5 00000024  00004a1e  00004a1e  00004ad2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 76 .text.__vector_6 00000024  00004a42  00004a42  00004af6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 77 .text.__vector_22 00000024  00004a66  00004a66  00004b1a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 78 .text.__vector_9 00000024  00004a8a  00004a8a  00004b3e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 79 .text.__vector_11 00000024  00004aae  00004aae  00004b62  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 80 .text.__vector_13 00000024  00004ad2  00004ad2  00004b86  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 81 .text.__vector_14 00000024  00004af6  00004af6  00004baa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 82 .text.__vector_17 00000024  00004b1a  00004b1a  00004bce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 83 .text.__vector_19 00000024  00004b3e  00004b3e  00004bf2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 84 .text.__vector_21 00000024  00004b62  00004b62  00004c16  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 85 .text.__vector_25 00000024  00004b86  00004b86  00004c3a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 86 .text.__vector_26 00000024  00004baa  00004baa  00004c5e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 87 .text.__vector_29 00000024  00004bce  00004bce  00004c82  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 88 .text.__vector_30 00000024  00004bf2  00004bf2  00004ca6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 89 .text.CurrentThresholdsGet 00000094  00003726  00003726  000037da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 90 .progmemx.data 000001a1  000000da  000000da  0000018e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 91 .text.CANReceiveCallback 00000292  000012fc  000012fc  000013b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 92 .text.ControllerStatusMessagesSend 000003e6  00000988  00000988  00000a3c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 93 .text.CellStringProcess 000002aa  00001052  00001052  00001106  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 94 .text.Delay   00000052  0000429c  0000429c  00004350  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 95 .text.PlatformAssert 0000002c  000047f8  000047f8  000048ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 96 .text.ModuleControllerStateHandle 0000021e  00001a06  00001a06  00001aba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 97 .text.PlatformGetRegistrationID 00000006  00004eaa  00004eaa  00004f5e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 98 .text.SetSysclock 0000000c  00004e80  00004e80  00004f34  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 99 .text.ModuleControllerGetUniqueID 0000007e  00003ae4  00003ae4  00003b98  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
100 .text.TimerInit 00000052  000042ee  000042ee  000043a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
101 .text.__vector_12 000000ba  000033e4  000033e4  00003498  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
102 .text.WatchdogReset 00000002  00004eb8  00004eb8  00004f6c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
103 .text.WatchdogOff 0000001a  00004cd4  00004cd4  00004d88  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
104 .text.__vector_28 00000052  00004340  00004340  000043f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
105 .text.__vector_23 0000008a  000037ba  000037ba  0000386e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
106 .text.__vector_24 0000004c  00004392  00004392  00004446  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
107 .text.vUARTRXData 00000002  00004eba  00004eba  00004f6e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
108 .text.PlatformGetSendData 00000028  000048ca  000048ca  0000497e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
109 .text.ADCCallback 00000026  00004968  00004968  00004a1c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
110 .text.FrameInit 000000dc  00002ca6  00002ca6  00002d5a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
111 .text.CellStringPowerStateMachine 00000088  000038ce  000038ce  00003982  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
112 .text.main    000002e4  00000d6e  00000d6e  00000e22  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
113 .bss.sg_u8PCMSK1 00000001  00800962  00800962  00004f78  2**0
                  ALLOC
114 .bss.sg_u8PCMSK0 00000001  00800963  00800963  00004f78  2**0
                  ALLOC
115 .bss.sg_u8UnhandledInterruptVector 00000001  00800964  00800964  00004f78  2**0
                  ALLOC
116 .bss.sg_u8Reason 00000001  00800965  00800965  00004f78  2**0
                  ALLOC
117 .progmemx.data.sg_u8FractionalLookup 00000010  00000482  00000482  00000536  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
118 .bss.sg_u8ControllerStatusMsgCount 00000001  00800966  00800966  00004f78  2**0
                  ALLOC
119 .progmemx.data.sg_u16FakeCellData 00000178  0000027b  0000027b  0000032f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
120 .bss.sg_u8TicksSinceLastPackControllerMessage 00000001  00800967  00800967  00004f78  2**0
                  ALLOC
121 .bss.sg_u8CellStringPowerTimer 00000001  00800968  00800968  00004f78  2**0
                  ALLOC
122 .bss.sg_bFrameStart 00000001  00800969  00800969  00004f78  2**0
                  ALLOC
123 .bss.sg_u8CellFrameTimer 00000001  0080096a  0080096a  00004f78  2**0
                  ALLOC
124 .bss.sg_bIgnoreStatusRequests 00000001  0080096b  0080096b  00004f78  2**0
                  ALLOC
125 .bss.sg_u8AnnouncementDelayTicks 00000001  0080096c  0080096c  00004f78  2**0
                  ALLOC
126 .bss.sg_bAnnouncementPending 00000001  0080096d  0080096d  00004f78  2**0
                  ALLOC
127 .bss.sg_u8CurrentBufferIndex 00000001  0080096e  0080096e  00004f78  2**0
                  ALLOC
128 .bss.sg_sCurrenBuffer 00000010  0080091d  0080091d  00004f78  2**0
                  ALLOC
129 .text.IsLeapYear 00000034  00004610  00004610  000046c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
130 .text.RTCStartTransaction 00000044  0000442a  0000442a  000044de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
131 .text.StructTMToHW 00000054  000041f4  000041f4  000042a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
132 .text.HWToStructTM 0000007c  00003be0  00003be0  00003c94  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
133 .text.__vector_10 00000086  00003956  00003956  00003a0a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
134 .progmemx.data 00000014  0000046e  0000046e  00000522  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
135 .text.RTCReadRegisters 0000007e  00003b62  00003b62  00003c16  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
136 .text.RTCReadHW 000000e2  00002ae6  00002ae6  00002b9a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
137 .text.RTCWriteRegisters 0000006a  00003ea2  00003ea2  00003f56  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
138 .text.RTCWriteHW 000000fe  000028f0  000028f0  000029a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
139 .text.RTCSetTime 000000c6  000030dc  000030dc  00003190  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
140 .text.RTCInit 00000222  000017e4  000017e4  00001898  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
141 .progmemx.data.sg_u8DaysInMonths 0000000c  000004a1  000004a1  00000555  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
142 .bss.sg_u64Time 00000008  00800945  00800945  00004f78  2**0
                  ALLOC
143 .text.SDSetCS 00000014  00004d8e  00004d8e  00004e42  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
144 .text.SDPowerup 0000003a  00004568  00004568  0000461c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
145 .text.SDCommand 000000aa  0000349e  0000349e  00003552  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
146 .text.SDGoIdle 00000022  00004c3a  00004c3a  00004cee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
147 .text.SDSendOpCondition 00000034  00004644  00004644  000046f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
148 .text.SDSendOpConditionArg 00000056  00004148  00004148  000041fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
149 .text.SDWaitResponse7 0000000e  00004e58  00004e58  00004f0c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
150 .text.SDSendInterfaceCondition 00000034  00004678  00004678  0000472c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
151 .text.SDReadOCR 00000032  000046ac  000046ac  00004760  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
152 .text.SDReadCSD 0000007c  00003c5c  00003c5c  00003d10  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
153 .text.SDReceiveDataBlock 0000008a  00003844  00003844  000038f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
154 .text.SDTransmitDataBlock 000000c2  00003266  00003266  0000331a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
155 .text.SDInit  00000166  000022fe  000022fe  000023b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
156 .text.SDRead  000000d8  00002f3a  00002f3a  00002fee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
157 .text.SDWrite 000000dc  00002d82  00002d82  00002e36  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
158 .bss.sg_u8CSD 00000010  0080092d  0080092d  00004f78  2**0
                  ALLOC
159 .bss.sg_u16BlockSize 00000002  00800957  00800957  00004f78  2**0
                  ALLOC
160 .bss.sg_u32SDSectorCount 00000004  0080094d  0080094d  00004f78  2**0
                  ALLOC
161 .text.SPITransaction 00000058  00004098  00004098  0000414c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
162 .text.SPISetBaudRate 000000ca  00003012  00003012  000030c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
163 .text.SPIInit 0000002c  00004824  00004824  000048d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
164 .progmemx.data.sg_sSPIBaudRates 0000002a  00000423  00000423  000004d7  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
165 .text.readGlobalState 0000003e  000044b2  000044b2  00004566  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
166 .text.writeGlobalState 00000032  000046de  000046de  00004792  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
167 .text.updateSessionMap 000000dc  00002e5e  00002e5e  00002f12  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
168 .text.STORE_Init 00000082  00003a62  00003a62  00003b16  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
169 .text.STORE_WriteFrame 000000f8  000029ee  000029ee  00002aa2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
170 .text.STORE_StartNewSession 00000054  00004248  00004248  000042fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
171 .text.STORE_EndSession 00000058  000040f0  000040f0  000041a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
172 .bss.frameBuffer 00000400  0080032c  0080032c  00004f78  2**2
                  ALLOC
173 .bss.currentSector 00000004  00800951  00800951  00004f78  2**0
                  ALLOC
174 .bss.gState   000001d8  0080072c  0080072c  00004f78  2**2
                  ALLOC
175 .text.vUARTtxDataAvailable 00000024  00004c16  00004c16  00004cca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
176 .text.vUARTtxDataGet 0000004c  000043de  000043de  00004492  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
177 .text.__vector_8 00000066  00003f0c  00003f0c  00003fc0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
178 .text.__vector_16 000000de  00002bc8  00002bc8  00002c7c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
179 .text.__vector_15 00000134  000025a0  000025a0  00002654  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
180 .text.vUARTInit 00000030  00004742  00004742  000047f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
181 .bss.sg_bState 00000001  0080096f  0080096f  00004f78  2**0
                  ALLOC
182 .bss.sg_u8SendData 00000002  00800959  00800959  00004f78  2**0
                  ALLOC
183 .bss.sg_u8SendIndex 00000001  00800970  00800970  00004f78  2**0
                  ALLOC
184 .bss.sg_bMCTxNextBit 00000001  00800971  00800971  00004f78  2**0
                  ALLOC
185 .bss.sg_bCellReportsReuested 00000001  00800972  00800972  00004f78  2**0
                  ALLOC
186 .bss.sg_etxState 00000001  00800973  00800973  00004f78  2**0
                  ALLOC
187 .bss.sg_btxMoreAvailable 00000001  00800974  00800974  00004f78  2**0
                  ALLOC
188 .bss.sg_u8txDataByte 00000001  00800975  00800975  00004f78  2**0
                  ALLOC
189 .bss.sg_u8txBitCount 00000001  00800976  00800976  00004f78  2**0
                  ALLOC
190 .bss.sg_bCell_mc_rxMoreData 00000001  00800977  00800977  00004f78  2**0
                  ALLOC
191 .bss.sg_bCell_mc_rxPriorState 00000001  00800978  00800978  00004f78  2**0
                  ALLOC
192 .bss.sg_eCell_mc_rxState 00000001  00800979  00800979  00004f78  2**0
                  ALLOC
193 .bss.sg_u8rxDataByte 00000001  0080097a  0080097a  00004f78  2**0
                  ALLOC
194 .bss.sg_u8Cell_mc_rxBitCount 00000001  0080097b  0080097b  00004f78  2**0
                  ALLOC
195 .text.libgcc.div 00000028  000048f2  000048f2  000049a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
196 .text.libgcc.div 00000044  0000446e  0000446e  00004522  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
197 .text.libgcc.div 0000002e  00004772  00004772  00004826  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
198 .text.libgcc.div 00000010  00004e0c  00004e0c  00004ec0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
199 .text.libgcc.mul 0000001e  00004c7c  00004c7c  00004d30  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
200 .text.libgcc.mul 0000000e  00004e66  00004e66  00004f1a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
201 .text.libgcc.mul 00000016  00004d62  00004d62  00004e16  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
202 .text.libgcc.mul 00000010  00004e1c  00004e1c  00004ed0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
203 .text.libgcc  00000010  00004e2c  00004e2c  00004ee0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
204 .text.libgcc  00000018  00004d06  00004d06  00004dba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
205 .text.libgcc  00000018  00004d1e  00004d1e  00004dd2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
206 .text.__dummy_fini 00000002  00004ebc  00004ebc  00004f70  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
207 .text.__dummy_funcs_on_exit 00000002  00004ebe  00004ebe  00004f72  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
208 .text.__dummy_simulator_exit 00000002  00004ec0  00004ec0  00004f74  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
209 .text.exit    00000016  00004d78  00004d78  00004e2c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
210 .text.memcpy  00000032  00004710  00004710  000047c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
211 .text.memset  00000012  00004db4  00004db4  00004e68  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
212 .text.gmtime  0000000a  00004ea0  00004ea0  00004f54  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
213 .bss.tm.1240  00000019  00800904  00800904  00004f78  2**0
                  ALLOC
214 .progmemx.data 00000004  00000527  00000527  000005db  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
215 .text.__gmtime_r 0000006c  00003dcc  00003dcc  00003e80  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
216 .progmemx.data 00000004  0000052b  0000052b  000005df  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
217 .text.mktime  00000086  000039dc  000039dc  00003a90  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
218 .text._Exit   00000004  00004eb4  00004eb4  00004f68  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
219 .text.__tm_to_secs 000001be  00001e36  00001e36  00001eea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
220 .text.__year_to_secs 00000256  0000158e  0000158e  00001642  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
221 .text.__month_to_secs 0000003c  0000452c  0000452c  000045e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
222 .progmemx.data.secs_through_month.1090 00000030  000003f3  000003f3  000004a7  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
223 .text.__secs_to_tm 00000458  00000530  00000530  000005e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
224 .progmemx.data.days_in_month.1250 0000000c  000004ad  000004ad  00000561  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
225 .text.libgcc.div 00000028  0000491a  0000491a  000049ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
226 .text.libgcc.mul 000000a0  000035ea  000035ea  0000369e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
227 .text.libgcc.mul 00000012  00004dc6  00004dc6  00004e7a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
228 .text.libgcc.mul 0000001e  00004c9a  00004c9a  00004d4e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
229 .text.libgcc.mul 00000056  0000419e  0000419e  00004252  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
230 .text.libgcc.div 00000062  00004036  00004036  000040ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
231 .text.libgcc.div 0000001c  00004cb8  00004cb8  00004d6c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
232 .text.libgcc.div 000000a2  00003548  00003548  000035fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
233 .text.libgcc  00000020  00004c5c  00004c5c  00004d10  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
234 .text.libgcc.prologue 00000038  000045a2  000045a2  00004656  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
235 .text.libgcc.prologue 00000036  000045da  000045da  0000468e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
236 .text.libgcc  00000012  00004dd8  00004dd8  00004e8c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
237 .text.libgcc  00000012  00004dea  00004dea  00004e9e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 43 00 	jmp	0x86	; 0x86 <__ctors_end>
   4:	0c 94 c7 24 	jmp	0x498e	; 0x498e <__vector_1>
   8:	0c 94 d9 24 	jmp	0x49b2	; 0x49b2 <__vector_2>
   c:	0c 94 eb 24 	jmp	0x49d6	; 0x49d6 <__vector_3>
  10:	0c 94 fd 24 	jmp	0x49fa	; 0x49fa <__vector_4>
  14:	0c 94 0f 25 	jmp	0x4a1e	; 0x4a1e <__vector_5>
  18:	0c 94 21 25 	jmp	0x4a42	; 0x4a42 <__vector_6>
  1c:	0c 94 58 27 	jmp	0x4eb0	; 0x4eb0 <__bad_interrupt>
  20:	0c 94 86 1f 	jmp	0x3f0c	; 0x3f0c <__vector_8>
  24:	0c 94 45 25 	jmp	0x4a8a	; 0x4a8a <__vector_9>
  28:	0c 94 ab 1c 	jmp	0x3956	; 0x3956 <__vector_10>
  2c:	0c 94 57 25 	jmp	0x4aae	; 0x4aae <__vector_11>
  30:	0c 94 f2 19 	jmp	0x33e4	; 0x33e4 <__vector_12>
  34:	0c 94 69 25 	jmp	0x4ad2	; 0x4ad2 <__vector_13>
  38:	0c 94 7b 25 	jmp	0x4af6	; 0x4af6 <__vector_14>
  3c:	0c 94 d0 12 	jmp	0x25a0	; 0x25a0 <__vector_15>
  40:	0c 94 e4 15 	jmp	0x2bc8	; 0x2bc8 <__vector_16>
  44:	0c 94 8d 25 	jmp	0x4b1a	; 0x4b1a <__vector_17>
  48:	0c 94 6a 13 	jmp	0x26d4	; 0x26d4 <__vector_18>
  4c:	0c 94 9f 25 	jmp	0x4b3e	; 0x4b3e <__vector_19>
  50:	0c 94 58 27 	jmp	0x4eb0	; 0x4eb0 <__bad_interrupt>
  54:	0c 94 b1 25 	jmp	0x4b62	; 0x4b62 <__vector_21>
  58:	0c 94 33 25 	jmp	0x4a66	; 0x4a66 <__vector_22>
  5c:	0c 94 dd 1b 	jmp	0x37ba	; 0x37ba <__vector_23>
  60:	0c 94 c9 21 	jmp	0x4392	; 0x4392 <__vector_24>
  64:	0c 94 c3 25 	jmp	0x4b86	; 0x4b86 <__vector_25>
  68:	0c 94 d5 25 	jmp	0x4baa	; 0x4baa <__vector_26>
  6c:	0c 94 94 19 	jmp	0x3328	; 0x3328 <__vector_27>
  70:	0c 94 a0 21 	jmp	0x4340	; 0x4340 <__vector_28>
  74:	0c 94 e7 25 	jmp	0x4bce	; 0x4bce <__vector_29>
  78:	0c 94 f9 25 	jmp	0x4bf2	; 0x4bf2 <__vector_30>

0000007c <.dinit>:
  7c:	01 00       	.word	0x0001	; ????
  7e:	01 02       	muls	r16, r17
  80:	80 01       	movw	r16, r0
  82:	04 09       	sbc	r16, r4
  84:	7c 80       	ldd	r7, Y+4	; 0x04

00000086 <__ctors_end>:
  86:	11 24       	eor	r1, r1
  88:	1f be       	out	0x3f, r1	; 63
  8a:	cf ef       	ldi	r28, 0xFF	; 255
  8c:	d0 e1       	ldi	r29, 0x10	; 16
  8e:	de bf       	out	0x3e, r29	; 62
  90:	cd bf       	out	0x3d, r28	; 61

00000092 <__do_copy_data>:
  92:	ec e7       	ldi	r30, 0x7C	; 124
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	40 e0       	ldi	r20, 0x00	; 0
  98:	17 c0       	rjmp	.+46     	; 0xc8 <__do_clear_bss+0x8>
  9a:	b5 91       	lpm	r27, Z+
  9c:	a5 91       	lpm	r26, Z+
  9e:	35 91       	lpm	r19, Z+
  a0:	25 91       	lpm	r18, Z+
  a2:	05 91       	lpm	r16, Z+
  a4:	07 fd       	sbrc	r16, 7
  a6:	0c c0       	rjmp	.+24     	; 0xc0 <__do_clear_bss>
  a8:	95 91       	lpm	r25, Z+
  aa:	85 91       	lpm	r24, Z+
  ac:	ef 01       	movw	r28, r30
  ae:	f9 2f       	mov	r31, r25
  b0:	e8 2f       	mov	r30, r24
  b2:	05 90       	lpm	r0, Z+
  b4:	0d 92       	st	X+, r0
  b6:	a2 17       	cp	r26, r18
  b8:	b3 07       	cpc	r27, r19
  ba:	d9 f7       	brne	.-10     	; 0xb2 <__do_copy_data+0x20>
  bc:	fe 01       	movw	r30, r28
  be:	04 c0       	rjmp	.+8      	; 0xc8 <__do_clear_bss+0x8>

000000c0 <__do_clear_bss>:
  c0:	1d 92       	st	X+, r1
  c2:	a2 17       	cp	r26, r18
  c4:	b3 07       	cpc	r27, r19
  c6:	e1 f7       	brne	.-8      	; 0xc0 <__do_clear_bss>
  c8:	e6 38       	cpi	r30, 0x86	; 134
  ca:	f4 07       	cpc	r31, r20
  cc:	31 f7       	brne	.-52     	; 0x9a <__do_copy_data+0x8>
  ce:	0e 94 b7 06 	call	0xd6e	; 0xd6e <main>
  d2:	0c 94 bc 26 	jmp	0x4d78	; 0x4d78 <exit>

000000d6 <_exit>:
  d6:	f8 94       	cli

000000d8 <__stop_program>:
  d8:	ff cf       	rjmp	.-2      	; 0xd8 <__stop_program>

Disassembly of section .text:

00004eb0 <__bad_interrupt>:
    4eb0:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.__vector_27:

00003328 <__vector_27>:

	// Disable the conversion complete interrupt
	ADCSRA &= (uint8_t)~(1 << ADIE);

	// Clear any pending interrupt	
	ADCSRA |= (1 << ADIF);
    3328:	78 94       	sei
    332a:	1f 92       	push	r1
    332c:	0f 92       	push	r0
    332e:	0f b6       	in	r0, 0x3f	; 63
    3330:	0f 92       	push	r0
    3332:	11 24       	eor	r1, r1
    3334:	2f 93       	push	r18
    3336:	3f 93       	push	r19
    3338:	4f 93       	push	r20
    333a:	5f 93       	push	r21
    333c:	6f 93       	push	r22
    333e:	7f 93       	push	r23
    3340:	8f 93       	push	r24
    3342:	9f 93       	push	r25
    3344:	af 93       	push	r26
    3346:	bf 93       	push	r27
    3348:	ef 93       	push	r30
    334a:	ff 93       	push	r31
    334c:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f0078>
    3350:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f0079>
    3354:	80 91 5b 09 	lds	r24, 0x095B	; 0x80095b <sg_eCurrentType>
    3358:	91 e0       	ldi	r25, 0x01	; 1
    335a:	98 0f       	add	r25, r24
    335c:	90 93 5b 09 	sts	0x095B, r25	; 0x80095b <sg_eCurrentType>
    3360:	95 30       	cpi	r25, 0x05	; 5
    3362:	10 f0       	brcs	.+4      	; 0x3368 <__vector_27+0x40>
    3364:	10 92 5b 09 	sts	0x095B, r1	; 0x80095b <sg_eCurrentType>
    3368:	ac e7       	ldi	r26, 0x7C	; 124
    336a:	b0 e0       	ldi	r27, 0x00	; 0
    336c:	5c 91       	ld	r21, X
    336e:	20 91 5b 09 	lds	r18, 0x095B	; 0x80095b <sg_eCurrentType>
    3372:	30 e0       	ldi	r19, 0x00	; 0
    3374:	f9 01       	movw	r30, r18
    3376:	ee 0f       	add	r30, r30
    3378:	ff 1f       	adc	r31, r31
    337a:	2e 0f       	add	r18, r30
    337c:	3f 1f       	adc	r19, r31
    337e:	03 2e       	mov	r0, r19
    3380:	00 0c       	add	r0, r0
    3382:	44 0b       	sbc	r20, r20
    3384:	2e 56       	subi	r18, 0x6E	; 110
    3386:	3b 4f       	sbci	r19, 0xFB	; 251
    3388:	4f 4f       	sbci	r20, 0xFF	; 255
    338a:	f9 01       	movw	r30, r18
    338c:	94 91       	lpm	r25, Z
    338e:	47 fd       	sbrc	r20, 7
    3390:	90 81       	ld	r25, Z
    3392:	50 7e       	andi	r21, 0xE0	; 224
    3394:	95 2b       	or	r25, r21
    3396:	90 6c       	ori	r25, 0xC0	; 192
    3398:	9c 93       	st	X, r25
    339a:	0e 94 b4 24 	call	0x4968	; 0x4968 <ADCCallback>
    339e:	80 91 5b 09 	lds	r24, 0x095B	; 0x80095b <sg_eCurrentType>
    33a2:	81 11       	cpse	r24, r1
    33a4:	09 c0       	rjmp	.+18     	; 0x33b8 <__vector_27+0x90>
    33a6:	ea e7       	ldi	r30, 0x7A	; 122
    33a8:	f0 e0       	ldi	r31, 0x00	; 0
    33aa:	80 81       	ld	r24, Z
    33ac:	87 7f       	andi	r24, 0xF7	; 247
    33ae:	80 83       	st	Z, r24
    33b0:	81 e0       	ldi	r24, 0x01	; 1
    33b2:	80 93 5c 09 	sts	0x095C, r24	; 0x80095c <sg_eState>
    33b6:	05 c0       	rjmp	.+10     	; 0x33c2 <__vector_27+0x9a>
    33b8:	ea e7       	ldi	r30, 0x7A	; 122
    33ba:	f0 e0       	ldi	r31, 0x00	; 0
    33bc:	80 81       	ld	r24, Z
    33be:	88 64       	ori	r24, 0x48	; 72
    33c0:	80 83       	st	Z, r24
    33c2:	ff 91       	pop	r31
    33c4:	ef 91       	pop	r30
    33c6:	bf 91       	pop	r27
    33c8:	af 91       	pop	r26
    33ca:	9f 91       	pop	r25
    33cc:	8f 91       	pop	r24
    33ce:	7f 91       	pop	r23
    33d0:	6f 91       	pop	r22
    33d2:	5f 91       	pop	r21
    33d4:	4f 91       	pop	r20
    33d6:	3f 91       	pop	r19
    33d8:	2f 91       	pop	r18
    33da:	0f 90       	pop	r0
    33dc:	0f be       	out	0x3f, r0	; 63
    33de:	0f 90       	pop	r0
    33e0:	1f 90       	pop	r1
    33e2:	18 95       	reti

Disassembly of section .text.ADCSetPowerOn:

00004e74 <ADCSetPowerOn>:
}

// Enable ADC
void ADCSetPowerOn( void )
{
	ADCSRA |= (1 << ADEN);
    4e74:	ea e7       	ldi	r30, 0x7A	; 122
    4e76:	f0 e0       	ldi	r31, 0x00	; 0
    4e78:	80 81       	ld	r24, Z
    4e7a:	80 68       	ori	r24, 0x80	; 128
    4e7c:	80 83       	st	Z, r24
    4e7e:	08 95       	ret

Disassembly of section .text.ADCStartConversion:

00004850 <ADCStartConversion>:
}

void ADCStartConversion(void)
{
	// Don't start anything if we're not idle
	if (EADCSTATE_IDLE != sg_eState)
    4850:	80 91 5c 09 	lds	r24, 0x095C	; 0x80095c <sg_eState>
    4854:	81 30       	cpi	r24, 0x01	; 1
    4856:	81 f4       	brne	.+32     	; 0x4878 <ADCStartConversion+0x28>
	{
		return;
	}
	
	// Set back to the first channel
	sg_eCurrentType = EADCTYPE_FIRST;
    4858:	10 92 5b 09 	sts	0x095B, r1	; 0x80095b <sg_eCurrentType>
	
	// Set the MUX
	ADMUX = (ADMUX & MUX_MASK) | (sg_sMuxSelectList[sg_eCurrentType].u8MuxSelect) | MUX_AREF;
    485c:	ec e7       	ldi	r30, 0x7C	; 124
    485e:	f0 e0       	ldi	r31, 0x00	; 0
    4860:	80 81       	ld	r24, Z
    4862:	80 7e       	andi	r24, 0xE0	; 224
    4864:	89 6c       	ori	r24, 0xC9	; 201
    4866:	80 83       	st	Z, r24
		
	sg_eState = EADCSTATE_READING;
    4868:	82 e0       	ldi	r24, 0x02	; 2
    486a:	80 93 5c 09 	sts	0x095C, r24	; 0x80095c <sg_eState>
	
	// Start a single conversion  - *dp run one at a time for now instead of continuous
	ADCSRA |= (1 << ADSC) | (1 << ADIE) | (1 << ADEN);  // turn power on if it isn't
    486e:	ea e7       	ldi	r30, 0x7A	; 122
    4870:	f0 e0       	ldi	r31, 0x00	; 0
    4872:	80 81       	ld	r24, Z
    4874:	88 6c       	ori	r24, 0xC8	; 200
    4876:	80 83       	st	Z, r24
    4878:	08 95       	ret

Disassembly of section .text.ADCInit:

00002464 <ADCInit>:

	// Disable the conversion complete interrupt
	ADCSRA &= (uint8_t)~(1 << ADIE);

	// Clear any pending interrupt	
	ADCSRA |= (1 << ADIF);
    2464:	cf 93       	push	r28
    2466:	82 e0       	ldi	r24, 0x02	; 2
    2468:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f007a>
    246c:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
    2470:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7f0094>
    2474:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7f0095>
    2478:	10 92 96 00 	sts	0x0096, r1	; 0x800096 <__TEXT_REGION_LENGTH__+0x7f0096>
    247c:	10 92 97 00 	sts	0x0097, r1	; 0x800097 <__TEXT_REGION_LENGTH__+0x7f0097>
    2480:	80 ea       	ldi	r24, 0xA0	; 160
    2482:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f007b>
    2486:	c0 e0       	ldi	r28, 0x00	; 0
    2488:	83 c0       	rjmp	.+262    	; 0x2590 <ADCInit+0x12c>
    248a:	2c 2f       	mov	r18, r28
    248c:	30 e0       	ldi	r19, 0x00	; 0
    248e:	c9 01       	movw	r24, r18
    2490:	88 0f       	add	r24, r24
    2492:	99 1f       	adc	r25, r25
    2494:	82 0f       	add	r24, r18
    2496:	93 1f       	adc	r25, r19
    2498:	01 96       	adiw	r24, 0x01	; 1
    249a:	09 2e       	mov	r0, r25
    249c:	00 0c       	add	r0, r0
    249e:	aa 0b       	sbc	r26, r26
    24a0:	8e 56       	subi	r24, 0x6E	; 110
    24a2:	9b 4f       	sbci	r25, 0xFB	; 251
    24a4:	af 4f       	sbci	r26, 0xFF	; 255
    24a6:	fc 01       	movw	r30, r24
    24a8:	84 91       	lpm	r24, Z
    24aa:	a7 fd       	sbrc	r26, 7
    24ac:	80 81       	ld	r24, Z
    24ae:	81 30       	cpi	r24, 0x01	; 1
    24b0:	41 f0       	breq	.+16     	; 0x24c2 <ADCInit+0x5e>
    24b2:	08 f4       	brcc	.+2      	; 0x24b6 <ADCInit+0x52>
    24b4:	6c c0       	rjmp	.+216    	; 0x258e <ADCInit+0x12a>
    24b6:	82 30       	cpi	r24, 0x02	; 2
    24b8:	21 f1       	breq	.+72     	; 0x2502 <ADCInit+0x9e>
    24ba:	83 30       	cpi	r24, 0x03	; 3
    24bc:	09 f4       	brne	.+2      	; 0x24c0 <ADCInit+0x5c>
    24be:	41 c0       	rjmp	.+130    	; 0x2542 <ADCInit+0xde>
    24c0:	5f c0       	rjmp	.+190    	; 0x2580 <ADCInit+0x11c>
    24c2:	54 b1       	in	r21, 0x04	; 4
    24c4:	c9 01       	movw	r24, r18
    24c6:	88 0f       	add	r24, r24
    24c8:	99 1f       	adc	r25, r25
    24ca:	28 0f       	add	r18, r24
    24cc:	39 1f       	adc	r19, r25
    24ce:	2e 5f       	subi	r18, 0xFE	; 254
    24d0:	3f 4f       	sbci	r19, 0xFF	; 255
    24d2:	03 2e       	mov	r0, r19
    24d4:	00 0c       	add	r0, r0
    24d6:	44 0b       	sbc	r20, r20
    24d8:	2e 56       	subi	r18, 0x6E	; 110
    24da:	3b 4f       	sbci	r19, 0xFB	; 251
    24dc:	4f 4f       	sbci	r20, 0xFF	; 255
    24de:	f9 01       	movw	r30, r18
    24e0:	24 91       	lpm	r18, Z
    24e2:	47 fd       	sbrc	r20, 7
    24e4:	20 81       	ld	r18, Z
    24e6:	81 e0       	ldi	r24, 0x01	; 1
    24e8:	90 e0       	ldi	r25, 0x00	; 0
    24ea:	02 c0       	rjmp	.+4      	; 0x24f0 <ADCInit+0x8c>
    24ec:	88 0f       	add	r24, r24
    24ee:	99 1f       	adc	r25, r25
    24f0:	2a 95       	dec	r18
    24f2:	e2 f7       	brpl	.-8      	; 0x24ec <ADCInit+0x88>
    24f4:	80 95       	com	r24
    24f6:	58 23       	and	r21, r24
    24f8:	54 b9       	out	0x04, r21	; 4
    24fa:	95 b1       	in	r25, 0x05	; 5
    24fc:	89 23       	and	r24, r25
    24fe:	85 b9       	out	0x05, r24	; 5
    2500:	46 c0       	rjmp	.+140    	; 0x258e <ADCInit+0x12a>
    2502:	57 b1       	in	r21, 0x07	; 7
    2504:	c9 01       	movw	r24, r18
    2506:	88 0f       	add	r24, r24
    2508:	99 1f       	adc	r25, r25
    250a:	28 0f       	add	r18, r24
    250c:	39 1f       	adc	r19, r25
    250e:	2e 5f       	subi	r18, 0xFE	; 254
    2510:	3f 4f       	sbci	r19, 0xFF	; 255
    2512:	03 2e       	mov	r0, r19
    2514:	00 0c       	add	r0, r0
    2516:	44 0b       	sbc	r20, r20
    2518:	2e 56       	subi	r18, 0x6E	; 110
    251a:	3b 4f       	sbci	r19, 0xFB	; 251
    251c:	4f 4f       	sbci	r20, 0xFF	; 255
    251e:	f9 01       	movw	r30, r18
    2520:	24 91       	lpm	r18, Z
    2522:	47 fd       	sbrc	r20, 7
    2524:	20 81       	ld	r18, Z
    2526:	81 e0       	ldi	r24, 0x01	; 1
    2528:	90 e0       	ldi	r25, 0x00	; 0
    252a:	02 c0       	rjmp	.+4      	; 0x2530 <ADCInit+0xcc>
    252c:	88 0f       	add	r24, r24
    252e:	99 1f       	adc	r25, r25
    2530:	2a 95       	dec	r18
    2532:	e2 f7       	brpl	.-8      	; 0x252c <ADCInit+0xc8>
    2534:	80 95       	com	r24
    2536:	58 23       	and	r21, r24
    2538:	57 b9       	out	0x07, r21	; 7
    253a:	98 b1       	in	r25, 0x08	; 8
    253c:	89 23       	and	r24, r25
    253e:	88 b9       	out	0x08, r24	; 8
    2540:	26 c0       	rjmp	.+76     	; 0x258e <ADCInit+0x12a>
    2542:	4a b1       	in	r20, 0x0a	; 10
    2544:	c9 01       	movw	r24, r18
    2546:	88 0f       	add	r24, r24
    2548:	99 1f       	adc	r25, r25
    254a:	82 0f       	add	r24, r18
    254c:	93 1f       	adc	r25, r19
    254e:	02 96       	adiw	r24, 0x02	; 2
    2550:	09 2e       	mov	r0, r25
    2552:	00 0c       	add	r0, r0
    2554:	aa 0b       	sbc	r26, r26
    2556:	8e 56       	subi	r24, 0x6E	; 110
    2558:	9b 4f       	sbci	r25, 0xFB	; 251
    255a:	af 4f       	sbci	r26, 0xFF	; 255
    255c:	fc 01       	movw	r30, r24
    255e:	24 91       	lpm	r18, Z
    2560:	a7 fd       	sbrc	r26, 7
    2562:	20 81       	ld	r18, Z
    2564:	81 e0       	ldi	r24, 0x01	; 1
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	02 c0       	rjmp	.+4      	; 0x256e <ADCInit+0x10a>
    256a:	88 0f       	add	r24, r24
    256c:	99 1f       	adc	r25, r25
    256e:	2a 95       	dec	r18
    2570:	e2 f7       	brpl	.-8      	; 0x256a <ADCInit+0x106>
    2572:	80 95       	com	r24
    2574:	48 23       	and	r20, r24
    2576:	4a b9       	out	0x0a, r20	; 10
    2578:	9b b1       	in	r25, 0x0b	; 11
    257a:	89 23       	and	r24, r25
    257c:	8b b9       	out	0x0b, r24	; 11
    257e:	07 c0       	rjmp	.+14     	; 0x258e <ADCInit+0x12a>
    2580:	45 eb       	ldi	r20, 0xB5	; 181
    2582:	50 e0       	ldi	r21, 0x00	; 0
    2584:	69 eb       	ldi	r22, 0xB9	; 185
    2586:	74 e0       	ldi	r23, 0x04	; 4
    2588:	80 e0       	ldi	r24, 0x00	; 0
    258a:	0e 94 fc 23 	call	0x47f8	; 0x47f8 <PlatformAssert>
    258e:	cf 5f       	subi	r28, 0xFF	; 255
    2590:	c5 30       	cpi	r28, 0x05	; 5
    2592:	08 f4       	brcc	.+2      	; 0x2596 <ADCInit+0x132>
    2594:	7a cf       	rjmp	.-268    	; 0x248a <ADCInit+0x26>
    2596:	81 e0       	ldi	r24, 0x01	; 1
    2598:	80 93 5c 09 	sts	0x095C, r24	; 0x80095c <sg_eState>
    259c:	cf 91       	pop	r28
    259e:	08 95       	ret

Disassembly of section .text.CANLookupCommand:

00003f72 <CANLookupCommand>:
	{PKT_MODULE_SET_TIME,		ECANMessageType_SetTime},
	{PKT_MODULE_MAX_STATE,		ECANMessageType_MaxState}
};

static ECANMessageType CANLookupCommand( uint16_t u16ID )
{
    3f72:	cf 93       	push	r28
    3f74:	df 93       	push	r29
    3f76:	ec 01       	movw	r28, r24
	uint8_t u8Index = 0;
    3f78:	90 e0       	ldi	r25, 0x00	; 0
	
	while( u8Index < (sizeof(sg_sRXCommandList)/sizeof(sg_sRXCommandList[0])) )
    3f7a:	26 c0       	rjmp	.+76     	; 0x3fc8 <CANLookupCommand+0x56>
	{
		if( sg_sRXCommandList[u8Index].u16ID == u16ID )
    3f7c:	a9 2f       	mov	r26, r25
    3f7e:	b0 e0       	ldi	r27, 0x00	; 0
    3f80:	9d 01       	movw	r18, r26
    3f82:	22 0f       	add	r18, r18
    3f84:	33 1f       	adc	r19, r19
    3f86:	2a 0f       	add	r18, r26
    3f88:	3b 1f       	adc	r19, r27
    3f8a:	03 2e       	mov	r0, r19
    3f8c:	00 0c       	add	r0, r0
    3f8e:	44 0b       	sbc	r20, r20
    3f90:	23 5b       	subi	r18, 0xB3	; 179
    3f92:	3b 4f       	sbci	r19, 0xFB	; 251
    3f94:	4f 4f       	sbci	r20, 0xFF	; 255
    3f96:	f9 01       	movw	r30, r18
    3f98:	54 2f       	mov	r21, r20
    3f9a:	0e 94 16 27 	call	0x4e2c	; 0x4e2c <__xload_2>
    3f9e:	6c 17       	cp	r22, r28
    3fa0:	7d 07       	cpc	r23, r29
    3fa2:	89 f4       	brne	.+34     	; 0x3fc6 <CANLookupCommand+0x54>
		{
			return( sg_sRXCommandList[u8Index].eType );
    3fa4:	cd 01       	movw	r24, r26
    3fa6:	88 0f       	add	r24, r24
    3fa8:	99 1f       	adc	r25, r25
    3faa:	8a 0f       	add	r24, r26
    3fac:	9b 1f       	adc	r25, r27
    3fae:	02 96       	adiw	r24, 0x02	; 2
    3fb0:	09 2e       	mov	r0, r25
    3fb2:	00 0c       	add	r0, r0
    3fb4:	aa 0b       	sbc	r26, r26
    3fb6:	83 5b       	subi	r24, 0xB3	; 179
    3fb8:	9b 4f       	sbci	r25, 0xFB	; 251
    3fba:	af 4f       	sbci	r26, 0xFF	; 255
    3fbc:	fc 01       	movw	r30, r24
    3fbe:	84 91       	lpm	r24, Z
    3fc0:	a7 fd       	sbrc	r26, 7
    3fc2:	80 81       	ld	r24, Z
    3fc4:	04 c0       	rjmp	.+8      	; 0x3fce <CANLookupCommand+0x5c>
		}
		
		u8Index++;
    3fc6:	9f 5f       	subi	r25, 0xFF	; 255

static ECANMessageType CANLookupCommand( uint16_t u16ID )
{
	uint8_t u8Index = 0;
	
	while( u8Index < (sizeof(sg_sRXCommandList)/sizeof(sg_sRXCommandList[0])) )
    3fc8:	9b 30       	cpi	r25, 0x0B	; 11
    3fca:	c0 f2       	brcs	.-80     	; 0x3f7c <CANLookupCommand+0xa>
		}
		
		u8Index++;
	}
	
	return( ECANMessageType_MAX );
    3fcc:	83 e1       	ldi	r24, 0x13	; 19
}
    3fce:	df 91       	pop	r29
    3fd0:	cf 91       	pop	r28
    3fd2:	08 95       	ret

Disassembly of section .text.CANMOBSet:

00001c24 <CANMOBSet>:

static void CANMOBSet( uint8_t u8MOBIndex,
					   const SMOBDef* psDef,
					   uint8_t* pu8Data,
					   uint8_t u8DataLen )
{
    1c24:	6f 92       	push	r6
    1c26:	7f 92       	push	r7
    1c28:	8f 92       	push	r8
    1c2a:	9f 92       	push	r9
    1c2c:	bf 92       	push	r11
    1c2e:	cf 92       	push	r12
    1c30:	df 92       	push	r13
    1c32:	ef 92       	push	r14
    1c34:	ff 92       	push	r15
    1c36:	0f 93       	push	r16
    1c38:	1f 93       	push	r17
    1c3a:	cf 93       	push	r28
    1c3c:	df 93       	push	r29
    1c3e:	f8 2e       	mov	r15, r24
    1c40:	6a 01       	movw	r12, r20
    1c42:	e6 2e       	mov	r14, r22
    1c44:	e9 01       	movw	r28, r18
	uint8_t u8CANCDMOBValue;
	uint32_t u32MessageID;
	uint8_t savedCANGIE;
	
	MBASSERT( u8MOBIndex <= 5 );
    1c46:	0f 2e       	mov	r0, r31
    1c48:	f5 e0       	ldi	r31, 0x05	; 5
    1c4a:	6f 2e       	mov	r6, r31
    1c4c:	f0 2d       	mov	r31, r0
    1c4e:	68 16       	cp	r6, r24
    1c50:	38 f4       	brcc	.+14     	; 0x1c60 <CANMOBSet+0x3c>
    1c52:	40 ed       	ldi	r20, 0xD0	; 208
    1c54:	50 e0       	ldi	r21, 0x00	; 0
    1c56:	64 ec       	ldi	r22, 0xC4	; 196
    1c58:	74 e0       	ldi	r23, 0x04	; 4
    1c5a:	80 e0       	ldi	r24, 0x00	; 0
    1c5c:	0e 94 fc 23 	call	0x47f8	; 0x47f8 <PlatformAssert>
	MBASSERT( u8DataLen <= 8 );
    1c60:	09 30       	cpi	r16, 0x09	; 9
    1c62:	38 f0       	brcs	.+14     	; 0x1c72 <CANMOBSet+0x4e>
    1c64:	41 ed       	ldi	r20, 0xD1	; 209
    1c66:	50 e0       	ldi	r21, 0x00	; 0
    1c68:	64 ec       	ldi	r22, 0xC4	; 196
    1c6a:	74 e0       	ldi	r23, 0x04	; 4
    1c6c:	80 e0       	ldi	r24, 0x00	; 0
    1c6e:	0e 94 fc 23 	call	0x47f8	; 0x47f8 <PlatformAssert>
	
	// Disable CAN interrupts during MOB configuration to prevent corruption
	savedCANGIE = CANGIE;
    1c72:	eb ed       	ldi	r30, 0xDB	; 219
    1c74:	f0 e0       	ldi	r31, 0x00	; 0
    1c76:	b0 80       	ld	r11, Z
	CANGIE &= ~(1 << ENIT);
    1c78:	80 81       	ld	r24, Z
    1c7a:	8f 77       	andi	r24, 0x7F	; 127
    1c7c:	80 83       	st	Z, r24
	
	// Set the MOB page, auto increment, and data index 0
	CANPAGE = u8MOBIndex << 4;
    1c7e:	8f 2d       	mov	r24, r15
    1c80:	82 95       	swap	r24
    1c82:	80 7f       	andi	r24, 0xF0	; 240
    1c84:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f00ed>
	
	// Clear the MOB status
	CANSTMOB = 0;
    1c88:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
	
	// Set the MOB registers for this page
	u8CANCDMOBValue = u8DataLen;
	u8CANCDMOBValue |= (psDef->u8Mode << CONMOB0);
    1c8c:	f6 01       	movw	r30, r12
    1c8e:	84 91       	lpm	r24, Z
    1c90:	e7 fc       	sbrc	r14, 7
    1c92:	80 81       	ld	r24, Z
    1c94:	20 e4       	ldi	r18, 0x40	; 64
    1c96:	82 9f       	mul	r24, r18
    1c98:	c0 01       	movw	r24, r0
    1c9a:	11 24       	eor	r1, r1
    1c9c:	10 2f       	mov	r17, r16
    1c9e:	18 2b       	or	r17, r24
	if( psDef->bReplyValid )
    1ca0:	ae 2d       	mov	r26, r14
    1ca2:	c6 01       	movw	r24, r12
    1ca4:	01 96       	adiw	r24, 0x01	; 1
    1ca6:	a1 1d       	adc	r26, r1
    1ca8:	fc 01       	movw	r30, r24
    1caa:	84 91       	lpm	r24, Z
    1cac:	a7 fd       	sbrc	r26, 7
    1cae:	80 81       	ld	r24, Z
    1cb0:	81 11       	cpse	r24, r1
	{
		u8CANCDMOBValue |= (1 << RPLV);
    1cb2:	10 62       	ori	r17, 0x20	; 32
	}
	u8CANCDMOBValue |= (1 << IDE);
    1cb4:	10 61       	ori	r17, 0x10	; 16
	// Extended frame address format
	//	Bits 0-7: Pack / Module registration ID of sender (if assigned, zero otherwise)
	//	Bits 8-17: Reserved, set to zero.
	//	Bits 18-28: Static message ID (eg. 0x500)
	
	u32MessageID = (uint32_t)PlatformGetRegistrationID();
    1cb6:	0e 94 55 27 	call	0x4eaa	; 0x4eaa <PlatformGetRegistrationID>
	u32MessageID |= (((uint32_t)psDef->u16ID) & 0x7ff) << 18;
    1cba:	4e 2d       	mov	r20, r14
    1cbc:	96 01       	movw	r18, r12
    1cbe:	2e 5f       	subi	r18, 0xFE	; 254
    1cc0:	3f 4f       	sbci	r19, 0xFF	; 255
    1cc2:	4f 4f       	sbci	r20, 0xFF	; 255
    1cc4:	f9 01       	movw	r30, r18
    1cc6:	54 2f       	mov	r21, r20
    1cc8:	0e 94 16 27 	call	0x4e2c	; 0x4e2c <__xload_2>
    1ccc:	ab 01       	movw	r20, r22
    1cce:	57 70       	andi	r21, 0x07	; 7
    1cd0:	60 e0       	ldi	r22, 0x00	; 0
    1cd2:	70 e0       	ldi	r23, 0x00	; 0
    1cd4:	03 2e       	mov	r0, r19
    1cd6:	32 e1       	ldi	r19, 0x12	; 18
    1cd8:	44 0f       	add	r20, r20
    1cda:	55 1f       	adc	r21, r21
    1cdc:	66 1f       	adc	r22, r22
    1cde:	77 1f       	adc	r23, r23
    1ce0:	3a 95       	dec	r19
    1ce2:	d1 f7       	brne	.-12     	; 0x1cd8 <CANMOBSet+0xb4>
    1ce4:	30 2d       	mov	r19, r0
    1ce6:	3a 01       	movw	r6, r20
    1ce8:	4b 01       	movw	r8, r22
    1cea:	68 2a       	or	r6, r24
    1cec:	d4 01       	movw	r26, r8
    1cee:	c3 01       	movw	r24, r6
	
	CANIDT4 = psDef->bRTRTag?(1 << RTRTAG):0;
    1cf0:	4e 2d       	mov	r20, r14
    1cf2:	96 01       	movw	r18, r12
    1cf4:	2a 5f       	subi	r18, 0xFA	; 250
    1cf6:	3f 4f       	sbci	r19, 0xFF	; 255
    1cf8:	4f 4f       	sbci	r20, 0xFF	; 255
    1cfa:	f9 01       	movw	r30, r18
    1cfc:	24 91       	lpm	r18, Z
    1cfe:	47 fd       	sbrc	r20, 7
    1d00:	20 81       	ld	r18, Z
    1d02:	22 23       	and	r18, r18
    1d04:	11 f0       	breq	.+4      	; 0x1d0a <CANMOBSet+0xe6>
    1d06:	24 e0       	ldi	r18, 0x04	; 4
    1d08:	01 c0       	rjmp	.+2      	; 0x1d0c <CANMOBSet+0xe8>
    1d0a:	20 e0       	ldi	r18, 0x00	; 0
    1d0c:	e0 ef       	ldi	r30, 0xF0	; 240
    1d0e:	f0 e0       	ldi	r31, 0x00	; 0
    1d10:	20 83       	st	Z, r18
	CANIDT4 |= u32MessageID << 3;
    1d12:	20 81       	ld	r18, Z
    1d14:	38 2f       	mov	r19, r24
    1d16:	33 0f       	add	r19, r19
    1d18:	33 0f       	add	r19, r19
    1d1a:	33 0f       	add	r19, r19
    1d1c:	23 2b       	or	r18, r19
    1d1e:	20 83       	st	Z, r18
	CANIDT3 = u32MessageID >> 5;
    1d20:	ac 01       	movw	r20, r24
    1d22:	bd 01       	movw	r22, r26
    1d24:	68 94       	set
    1d26:	14 f8       	bld	r1, 4
    1d28:	76 95       	lsr	r23
    1d2a:	67 95       	ror	r22
    1d2c:	57 95       	ror	r21
    1d2e:	47 95       	ror	r20
    1d30:	16 94       	lsr	r1
    1d32:	d1 f7       	brne	.-12     	; 0x1d28 <CANMOBSet+0x104>
    1d34:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f00f1>
	CANIDT2 = u32MessageID >> 13;
    1d38:	ac 01       	movw	r20, r24
    1d3a:	bd 01       	movw	r22, r26
    1d3c:	03 2e       	mov	r0, r19
    1d3e:	3d e0       	ldi	r19, 0x0D	; 13
    1d40:	76 95       	lsr	r23
    1d42:	67 95       	ror	r22
    1d44:	57 95       	ror	r21
    1d46:	47 95       	ror	r20
    1d48:	3a 95       	dec	r19
    1d4a:	d1 f7       	brne	.-12     	; 0x1d40 <CANMOBSet+0x11c>
    1d4c:	30 2d       	mov	r19, r0
    1d4e:	40 93 f2 00 	sts	0x00F2, r20	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f00f2>
	CANIDT1 = u32MessageID >> 21;
    1d52:	07 2e       	mov	r0, r23
    1d54:	75 e1       	ldi	r23, 0x15	; 21
    1d56:	b6 95       	lsr	r27
    1d58:	a7 95       	ror	r26
    1d5a:	97 95       	ror	r25
    1d5c:	87 95       	ror	r24
    1d5e:	7a 95       	dec	r23
    1d60:	d1 f7       	brne	.-12     	; 0x1d56 <CANMOBSet+0x132>
    1d62:	70 2d       	mov	r23, r0
    1d64:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f00f3>
	
	// Setup mask for the cmd (require matching ID extention bit)
	CANIDM4 = psDef->bRTRMask?(1 << RTRTAG):0;
    1d68:	ae 2d       	mov	r26, r14
    1d6a:	c6 01       	movw	r24, r12
    1d6c:	07 96       	adiw	r24, 0x07	; 7
    1d6e:	a1 1d       	adc	r26, r1
    1d70:	fc 01       	movw	r30, r24
    1d72:	84 91       	lpm	r24, Z
    1d74:	a7 fd       	sbrc	r26, 7
    1d76:	80 81       	ld	r24, Z
    1d78:	88 23       	and	r24, r24
    1d7a:	11 f0       	breq	.+4      	; 0x1d80 <CANMOBSet+0x15c>
    1d7c:	84 e0       	ldi	r24, 0x04	; 4
    1d7e:	01 c0       	rjmp	.+2      	; 0x1d82 <CANMOBSet+0x15e>
    1d80:	80 e0       	ldi	r24, 0x00	; 0
    1d82:	e4 ef       	ldi	r30, 0xF4	; 244
    1d84:	f0 e0       	ldi	r31, 0x00	; 0
    1d86:	80 83       	st	Z, r24
	CANIDM4 |= (1 << IDEMSK);
    1d88:	80 81       	ld	r24, Z
    1d8a:	81 60       	ori	r24, 0x01	; 1
    1d8c:	80 83       	st	Z, r24
	CANIDM3 = 0;
    1d8e:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7f00f5>
	CANIDM2 = psDef->u16IDMask << 5;
    1d92:	ae 2d       	mov	r26, r14
    1d94:	c6 01       	movw	r24, r12
    1d96:	04 96       	adiw	r24, 0x04	; 4
    1d98:	a1 1d       	adc	r26, r1
    1d9a:	fc 01       	movw	r30, r24
    1d9c:	5a 2f       	mov	r21, r26
    1d9e:	0e 94 16 27 	call	0x4e2c	; 0x4e2c <__xload_2>
    1da2:	62 95       	swap	r22
    1da4:	66 0f       	add	r22, r22
    1da6:	60 7e       	andi	r22, 0xE0	; 224
    1da8:	60 93 f6 00 	sts	0x00F6, r22	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7f00f6>
	CANIDM1 = psDef->u16IDMask >> 3;
    1dac:	fc 01       	movw	r30, r24
    1dae:	5a 2f       	mov	r21, r26
    1db0:	0e 94 16 27 	call	0x4e2c	; 0x4e2c <__xload_2>
    1db4:	76 95       	lsr	r23
    1db6:	67 95       	ror	r22
    1db8:	76 95       	lsr	r23
    1dba:	67 95       	ror	r22
    1dbc:	76 95       	lsr	r23
    1dbe:	67 95       	ror	r22
    1dc0:	60 93 f7 00 	sts	0x00F7, r22	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7f00f7>
	
	// Set the data into the FIFO
	while( u8DataLen )
    1dc4:	04 c0       	rjmp	.+8      	; 0x1dce <CANMOBSet+0x1aa>
	{
		CANMSG = *pu8Data;
    1dc6:	89 91       	ld	r24, Y+
    1dc8:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
		
		pu8Data++;
		u8DataLen--;
    1dcc:	01 50       	subi	r16, 0x01	; 1
	CANIDM3 = 0;
	CANIDM2 = psDef->u16IDMask << 5;
	CANIDM1 = psDef->u16IDMask >> 3;
	
	// Set the data into the FIFO
	while( u8DataLen )
    1dce:	01 11       	cpse	r16, r1
    1dd0:	fa cf       	rjmp	.-12     	; 0x1dc6 <CANMOBSet+0x1a2>
		pu8Data++;
		u8DataLen--;
	}
	
	// Send it now
	CANCDMOB = u8CANCDMOBValue;
    1dd2:	10 93 ef 00 	sts	0x00EF, r17	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
	
	// Enable (activates the MOB) or disable the MOB interrupt
	if( psDef->u8Mode != CAN_DISABLED )
    1dd6:	f6 01       	movw	r30, r12
    1dd8:	84 91       	lpm	r24, Z
    1dda:	e7 fc       	sbrc	r14, 7
    1ddc:	80 81       	ld	r24, Z
    1dde:	88 23       	and	r24, r24
    1de0:	69 f0       	breq	.+26     	; 0x1dfc <CANMOBSet+0x1d8>
	{
		CANIE2 |= (1 << u8MOBIndex);
    1de2:	ee ed       	ldi	r30, 0xDE	; 222
    1de4:	f0 e0       	ldi	r31, 0x00	; 0
    1de6:	20 81       	ld	r18, Z
    1de8:	81 e0       	ldi	r24, 0x01	; 1
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	02 c0       	rjmp	.+4      	; 0x1df2 <CANMOBSet+0x1ce>
    1dee:	88 0f       	add	r24, r24
    1df0:	99 1f       	adc	r25, r25
    1df2:	fa 94       	dec	r15
    1df4:	e2 f7       	brpl	.-8      	; 0x1dee <CANMOBSet+0x1ca>
    1df6:	82 2b       	or	r24, r18
    1df8:	80 83       	st	Z, r24
    1dfa:	0d c0       	rjmp	.+26     	; 0x1e16 <CANMOBSet+0x1f2>
	}
	else
	{
		CANIE2 &= (uint8_t)~(1 << u8MOBIndex);
    1dfc:	ee ed       	ldi	r30, 0xDE	; 222
    1dfe:	f0 e0       	ldi	r31, 0x00	; 0
    1e00:	20 81       	ld	r18, Z
    1e02:	81 e0       	ldi	r24, 0x01	; 1
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	02 c0       	rjmp	.+4      	; 0x1e0c <CANMOBSet+0x1e8>
    1e08:	88 0f       	add	r24, r24
    1e0a:	99 1f       	adc	r25, r25
    1e0c:	fa 94       	dec	r15
    1e0e:	e2 f7       	brpl	.-8      	; 0x1e08 <CANMOBSet+0x1e4>
    1e10:	80 95       	com	r24
    1e12:	82 23       	and	r24, r18
    1e14:	80 83       	st	Z, r24
	}
	
	// Restore CAN interrupts
	CANGIE = savedCANGIE;
    1e16:	b0 92 db 00 	sts	0x00DB, r11	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f00db>
}
    1e1a:	df 91       	pop	r29
    1e1c:	cf 91       	pop	r28
    1e1e:	1f 91       	pop	r17
    1e20:	0f 91       	pop	r16
    1e22:	ff 90       	pop	r15
    1e24:	ef 90       	pop	r14
    1e26:	df 90       	pop	r13
    1e28:	cf 90       	pop	r12
    1e2a:	bf 90       	pop	r11
    1e2c:	9f 90       	pop	r9
    1e2e:	8f 90       	pop	r8
    1e30:	7f 90       	pop	r7
    1e32:	6f 90       	pop	r6
    1e34:	08 95       	ret

Disassembly of section .text.CANSendMessageInternal:

00002186 <CANSendMessageInternal>:

static void CANSendMessageInternal( ECANMessageType eType,
									uint8_t* pu8Data,
									uint8_t u8DataLen,	
									bool bRetransmit )
{
    2186:	6f 92       	push	r6
    2188:	7f 92       	push	r7
    218a:	8f 92       	push	r8
    218c:	ef 92       	push	r14
    218e:	ff 92       	push	r15
    2190:	0f 93       	push	r16
    2192:	cf 93       	push	r28
    2194:	df 93       	push	r29
    2196:	c8 2f       	mov	r28, r24
    2198:	7b 01       	movw	r14, r22
    219a:	04 2f       	mov	r16, r20
    219c:	d2 2f       	mov	r29, r18
	const SMOBDef* psDef = NULL;
	
	if( ECANMessageType_ModuleAnnouncement == eType )
    219e:	88 23       	and	r24, r24
    21a0:	f9 f0       	breq	.+62     	; 0x21e0 <CANSendMessageInternal+0x5a>
	{
		psDef = &sg_sMOBModuleAnnouncement;
	}
	else if( ECANMessageType_ModuleStatus1 == eType )
    21a2:	81 30       	cpi	r24, 0x01	; 1
    21a4:	31 f1       	breq	.+76     	; 0x21f2 <CANSendMessageInternal+0x6c>
	{
		psDef = &sg_sMOBModuleStatus1;
	}
	else if( ECANMessageType_ModuleStatus2 == eType )
    21a6:	82 30       	cpi	r24, 0x02	; 2
    21a8:	69 f1       	breq	.+90     	; 0x2204 <CANSendMessageInternal+0x7e>
	{
		psDef = &sg_sMOBModuleStatus2;
	}
	else if( ECANMessageType_ModuleStatus3 == eType )
    21aa:	83 30       	cpi	r24, 0x03	; 3
    21ac:	a1 f1       	breq	.+104    	; 0x2216 <CANSendMessageInternal+0x90>
	{
		psDef = &sg_sMOBModuleStatus3;
	}
	else if( ECANMessageType_ModuleCellCommStat1 == eType )
    21ae:	86 30       	cpi	r24, 0x06	; 6
    21b0:	d9 f1       	breq	.+118    	; 0x2228 <CANSendMessageInternal+0xa2>
	{
		psDef = &sg_sMOBModuleCellCommStat1;
	}
	else if( ECANMessageType_ModuleCellCommStat2 == eType )
    21b2:	87 30       	cpi	r24, 0x07	; 7
    21b4:	09 f4       	brne	.+2      	; 0x21b8 <CANSendMessageInternal+0x32>
    21b6:	41 c0       	rjmp	.+130    	; 0x223a <CANSendMessageInternal+0xb4>
	{
		psDef = &sg_sMOBModuleCellCommStat2;
	}
	else if( ECANMessageType_ModuleHardwareDetail == eType )
    21b8:	85 30       	cpi	r24, 0x05	; 5
    21ba:	09 f4       	brne	.+2      	; 0x21be <CANSendMessageInternal+0x38>
    21bc:	47 c0       	rjmp	.+142    	; 0x224c <CANSendMessageInternal+0xc6>
	{
		psDef = &sg_sMOBModuleHardwareDetail;
	}
	else if( ECANMessageType_ModuleCellDetail == eType )
    21be:	84 30       	cpi	r24, 0x04	; 4
    21c0:	09 f4       	brne	.+2      	; 0x21c4 <CANSendMessageInternal+0x3e>
    21c2:	4d c0       	rjmp	.+154    	; 0x225e <CANSendMessageInternal+0xd8>
	{
		psDef = &sg_sMOBModuleCellDetail;
	}
	else if( ECANMessageType_ModuleRequestTime == eType )
    21c4:	88 30       	cpi	r24, 0x08	; 8
    21c6:	09 f4       	brne	.+2      	; 0x21ca <CANSendMessageInternal+0x44>
    21c8:	53 c0       	rjmp	.+166    	; 0x2270 <CANSendMessageInternal+0xea>
		psDef = &sg_sMOBModuleRequestTime;
	}
	else
	{
		// Invalid message type
		MBASSERT(0);
    21ca:	43 e4       	ldi	r20, 0x43	; 67
    21cc:	51 e0       	ldi	r21, 0x01	; 1
    21ce:	64 ec       	ldi	r22, 0xC4	; 196
    21d0:	74 e0       	ldi	r23, 0x04	; 4
    21d2:	80 e0       	ldi	r24, 0x00	; 0
    21d4:	0e 94 fc 23 	call	0x47f8	; 0x47f8 <PlatformAssert>
static void CANSendMessageInternal( ECANMessageType eType,
									uint8_t* pu8Data,
									uint8_t u8DataLen,	
									bool bRetransmit )
{
	const SMOBDef* psDef = NULL;
    21d8:	61 2c       	mov	r6, r1
    21da:	71 2c       	mov	r7, r1
    21dc:	81 2c       	mov	r8, r1
    21de:	50 c0       	rjmp	.+160    	; 0x2280 <CANSendMessageInternal+0xfa>
	
	if( ECANMessageType_ModuleAnnouncement == eType )
	{
		psDef = &sg_sMOBModuleAnnouncement;
    21e0:	0f 2e       	mov	r0, r31
    21e2:	ff e0       	ldi	r31, 0x0F	; 15
    21e4:	6f 2e       	mov	r6, r31
    21e6:	f5 e0       	ldi	r31, 0x05	; 5
    21e8:	7f 2e       	mov	r7, r31
    21ea:	f0 e0       	ldi	r31, 0x00	; 0
    21ec:	8f 2e       	mov	r8, r31
    21ee:	f0 2d       	mov	r31, r0
    21f0:	47 c0       	rjmp	.+142    	; 0x2280 <CANSendMessageInternal+0xfa>
	}
	else if( ECANMessageType_ModuleStatus1 == eType )
	{
		psDef = &sg_sMOBModuleStatus1;
    21f2:	0f 2e       	mov	r0, r31
    21f4:	f7 e0       	ldi	r31, 0x07	; 7
    21f6:	6f 2e       	mov	r6, r31
    21f8:	f5 e0       	ldi	r31, 0x05	; 5
    21fa:	7f 2e       	mov	r7, r31
    21fc:	f0 e0       	ldi	r31, 0x00	; 0
    21fe:	8f 2e       	mov	r8, r31
    2200:	f0 2d       	mov	r31, r0
    2202:	3e c0       	rjmp	.+124    	; 0x2280 <CANSendMessageInternal+0xfa>
	}
	else if( ECANMessageType_ModuleStatus2 == eType )
	{
		psDef = &sg_sMOBModuleStatus2;
    2204:	0f 2e       	mov	r0, r31
    2206:	ff ef       	ldi	r31, 0xFF	; 255
    2208:	6f 2e       	mov	r6, r31
    220a:	f4 e0       	ldi	r31, 0x04	; 4
    220c:	7f 2e       	mov	r7, r31
    220e:	f0 e0       	ldi	r31, 0x00	; 0
    2210:	8f 2e       	mov	r8, r31
    2212:	f0 2d       	mov	r31, r0
    2214:	35 c0       	rjmp	.+106    	; 0x2280 <CANSendMessageInternal+0xfa>
	}
	else if( ECANMessageType_ModuleStatus3 == eType )
	{
		psDef = &sg_sMOBModuleStatus3;
    2216:	0f 2e       	mov	r0, r31
    2218:	f7 ef       	ldi	r31, 0xF7	; 247
    221a:	6f 2e       	mov	r6, r31
    221c:	f4 e0       	ldi	r31, 0x04	; 4
    221e:	7f 2e       	mov	r7, r31
    2220:	f0 e0       	ldi	r31, 0x00	; 0
    2222:	8f 2e       	mov	r8, r31
    2224:	f0 2d       	mov	r31, r0
    2226:	2c c0       	rjmp	.+88     	; 0x2280 <CANSendMessageInternal+0xfa>
	}
	else if( ECANMessageType_ModuleCellCommStat1 == eType )
	{
		psDef = &sg_sMOBModuleCellCommStat1;
    2228:	0f 2e       	mov	r0, r31
    222a:	ff ee       	ldi	r31, 0xEF	; 239
    222c:	6f 2e       	mov	r6, r31
    222e:	f4 e0       	ldi	r31, 0x04	; 4
    2230:	7f 2e       	mov	r7, r31
    2232:	f0 e0       	ldi	r31, 0x00	; 0
    2234:	8f 2e       	mov	r8, r31
    2236:	f0 2d       	mov	r31, r0
    2238:	23 c0       	rjmp	.+70     	; 0x2280 <CANSendMessageInternal+0xfa>
	}
	else if( ECANMessageType_ModuleCellCommStat2 == eType )
	{
		psDef = &sg_sMOBModuleCellCommStat2;
    223a:	0f 2e       	mov	r0, r31
    223c:	f7 ee       	ldi	r31, 0xE7	; 231
    223e:	6f 2e       	mov	r6, r31
    2240:	f4 e0       	ldi	r31, 0x04	; 4
    2242:	7f 2e       	mov	r7, r31
    2244:	f0 e0       	ldi	r31, 0x00	; 0
    2246:	8f 2e       	mov	r8, r31
    2248:	f0 2d       	mov	r31, r0
    224a:	1a c0       	rjmp	.+52     	; 0x2280 <CANSendMessageInternal+0xfa>
	}
	else if( ECANMessageType_ModuleHardwareDetail == eType )
	{
		psDef = &sg_sMOBModuleHardwareDetail;
    224c:	0f 2e       	mov	r0, r31
    224e:	f7 ed       	ldi	r31, 0xD7	; 215
    2250:	6f 2e       	mov	r6, r31
    2252:	f4 e0       	ldi	r31, 0x04	; 4
    2254:	7f 2e       	mov	r7, r31
    2256:	f0 e0       	ldi	r31, 0x00	; 0
    2258:	8f 2e       	mov	r8, r31
    225a:	f0 2d       	mov	r31, r0
    225c:	11 c0       	rjmp	.+34     	; 0x2280 <CANSendMessageInternal+0xfa>
	}
	else if( ECANMessageType_ModuleCellDetail == eType )
	{
		psDef = &sg_sMOBModuleCellDetail;
    225e:	0f 2e       	mov	r0, r31
    2260:	ff ed       	ldi	r31, 0xDF	; 223
    2262:	6f 2e       	mov	r6, r31
    2264:	f4 e0       	ldi	r31, 0x04	; 4
    2266:	7f 2e       	mov	r7, r31
    2268:	f0 e0       	ldi	r31, 0x00	; 0
    226a:	8f 2e       	mov	r8, r31
    226c:	f0 2d       	mov	r31, r0
    226e:	08 c0       	rjmp	.+16     	; 0x2280 <CANSendMessageInternal+0xfa>
	}
	else if( ECANMessageType_ModuleRequestTime == eType )
	{
		psDef = &sg_sMOBModuleRequestTime;
    2270:	0f 2e       	mov	r0, r31
    2272:	ff ec       	ldi	r31, 0xCF	; 207
    2274:	6f 2e       	mov	r6, r31
    2276:	f4 e0       	ldi	r31, 0x04	; 4
    2278:	7f 2e       	mov	r7, r31
    227a:	f0 e0       	ldi	r31, 0x00	; 0
    227c:	8f 2e       	mov	r8, r31
    227e:	f0 2d       	mov	r31, r0
	{
		// Invalid message type
		MBASSERT(0);
	}
	
	if(bRetransmit && sg_bInRetransmit) {
    2280:	dd 23       	and	r29, r29
    2282:	21 f0       	breq	.+8      	; 0x228c <CANSendMessageInternal+0x106>
    2284:	80 91 5d 09 	lds	r24, 0x095D	; 0x80095d <sg_bInRetransmit>
    2288:	81 11       	cpse	r24, r1
    228a:	30 c0       	rjmp	.+96     	; 0x22ec <CANSendMessageInternal+0x166>
		// Already in a retransmit, don't allow nested retries
		return;
	}
	if( bRetransmit || (false == sg_bBusy) )
    228c:	d1 11       	cpse	r29, r1
    228e:	04 c0       	rjmp	.+8      	; 0x2298 <CANSendMessageInternal+0x112>
    2290:	80 91 61 09 	lds	r24, 0x0961	; 0x800961 <sg_bBusy>
    2294:	81 11       	cpse	r24, r1
    2296:	2a c0       	rjmp	.+84     	; 0x22ec <CANSendMessageInternal+0x166>
	{
		sg_bBusy = true;
    2298:	81 e0       	ldi	r24, 0x01	; 1
    229a:	80 93 61 09 	sts	0x0961, r24	; 0x800961 <sg_bBusy>
		
		// Save this message info for retransmit later if needed
		if( false == bRetransmit )
    229e:	d1 11       	cpse	r29, r1
    22a0:	1a c0       	rjmp	.+52     	; 0x22d6 <CANSendMessageInternal+0x150>
		{
			sg_u8TransmitAttempts = 0;
    22a2:	10 92 60 09 	sts	0x0960, r1	; 0x800960 <sg_u8TransmitAttempts>
			sg_eLastTXType = eType;
    22a6:	c0 93 5f 09 	sts	0x095F, r28	; 0x80095f <sg_eLastTXType>
			MBASSERT(u8DataLen <= CAN_MAX_MSG_SIZE);
    22aa:	09 30       	cpi	r16, 0x09	; 9
    22ac:	38 f0       	brcs	.+14     	; 0x22bc <CANSendMessageInternal+0x136>
    22ae:	43 e5       	ldi	r20, 0x53	; 83
    22b0:	51 e0       	ldi	r21, 0x01	; 1
    22b2:	64 ec       	ldi	r22, 0xC4	; 196
    22b4:	74 e0       	ldi	r23, 0x04	; 4
    22b6:	80 e0       	ldi	r24, 0x00	; 0
    22b8:	0e 94 fc 23 	call	0x47f8	; 0x47f8 <PlatformAssert>
			memcpy(sg_u8LastTXData, pu8Data, u8DataLen);
    22bc:	20 2f       	mov	r18, r16
    22be:	30 e0       	ldi	r19, 0x00	; 0
    22c0:	c7 01       	movw	r24, r14
    22c2:	a0 e8       	ldi	r26, 0x80	; 128
    22c4:	ac 01       	movw	r20, r24
    22c6:	6a 2f       	mov	r22, r26
    22c8:	8d e3       	ldi	r24, 0x3D	; 61
    22ca:	99 e0       	ldi	r25, 0x09	; 9
    22cc:	0e 94 88 23 	call	0x4710	; 0x4710 <memcpy>
			sg_u8LastTXDataLen = u8DataLen;
    22d0:	00 93 5e 09 	sts	0x095E, r16	; 0x80095e <sg_u8LastTXDataLen>
    22d4:	05 c0       	rjmp	.+10     	; 0x22e0 <CANSendMessageInternal+0x15a>
		}
		else
		{
			sg_u8TransmitAttempts++;
    22d6:	80 91 60 09 	lds	r24, 0x0960	; 0x800960 <sg_u8TransmitAttempts>
    22da:	8f 5f       	subi	r24, 0xFF	; 255
    22dc:	80 93 60 09 	sts	0x0960, r24	; 0x800960 <sg_u8TransmitAttempts>
		}
		
		// Send it now
		CANMOBSet( CANMOB_TX_IDX, psDef, pu8Data, u8DataLen );
    22e0:	97 01       	movw	r18, r14
    22e2:	68 2d       	mov	r22, r8
    22e4:	a3 01       	movw	r20, r6
    22e6:	81 e0       	ldi	r24, 0x01	; 1
    22e8:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <CANMOBSet>
	}
}
    22ec:	df 91       	pop	r29
    22ee:	cf 91       	pop	r28
    22f0:	0f 91       	pop	r16
    22f2:	ff 90       	pop	r15
    22f4:	ef 90       	pop	r14
    22f6:	8f 90       	pop	r8
    22f8:	7f 90       	pop	r7
    22fa:	6f 90       	pop	r6
    22fc:	08 95       	ret

Disassembly of section .text.CANMOBInterrupt:

00001ff4 <CANMOBInterrupt>:

void CANMOBInterrupt( uint8_t u8MOBIndex )
{
    1ff4:	cf 92       	push	r12
    1ff6:	df 92       	push	r13
    1ff8:	ff 92       	push	r15
    1ffa:	0f 93       	push	r16
    1ffc:	1f 93       	push	r17
    1ffe:	cf 93       	push	r28
    2000:	df 93       	push	r29
    2002:	cd b7       	in	r28, 0x3d	; 61
    2004:	de b7       	in	r29, 0x3e	; 62
    2006:	28 97       	sbiw	r28, 0x08	; 8
    2008:	0f b6       	in	r0, 0x3f	; 63
    200a:	f8 94       	cli
    200c:	de bf       	out	0x3e, r29	; 62
    200e:	0f be       	out	0x3f, r0	; 63
    2010:	cd bf       	out	0x3d, r28	; 61
	// Set the MOB page first (and zero the data index)
	CANPAGE = u8MOBIndex << 4;
    2012:	98 2f       	mov	r25, r24
    2014:	92 95       	swap	r25
    2016:	90 7f       	andi	r25, 0xF0	; 240
    2018:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f00ed>
	
	// Temporarily disable the MOB to examine and modify the registers
	CANIE2 &= (uint8_t)~(1 << u8MOBIndex);
    201c:	ee ed       	ldi	r30, 0xDE	; 222
    201e:	f0 e0       	ldi	r31, 0x00	; 0
    2020:	20 81       	ld	r18, Z
    2022:	01 e0       	ldi	r16, 0x01	; 1
    2024:	10 e0       	ldi	r17, 0x00	; 0
    2026:	08 2e       	mov	r0, r24
    2028:	02 c0       	rjmp	.+4      	; 0x202e <CANMOBInterrupt+0x3a>
    202a:	00 0f       	add	r16, r16
    202c:	11 1f       	adc	r17, r17
    202e:	0a 94       	dec	r0
    2030:	e2 f7       	brpl	.-8      	; 0x202a <CANMOBInterrupt+0x36>
    2032:	90 2f       	mov	r25, r16
    2034:	90 95       	com	r25
    2036:	92 23       	and	r25, r18
    2038:	90 83       	st	Z, r25
	CANCDMOB &= (uint8_t)~((1 << CONMOB0) | (1 << CONMOB1));
    203a:	ef ee       	ldi	r30, 0xEF	; 239
    203c:	f0 e0       	ldi	r31, 0x00	; 0
    203e:	90 81       	ld	r25, Z
    2040:	9f 73       	andi	r25, 0x3F	; 63
    2042:	90 83       	st	Z, r25
	
	if( CANMOB_RX_IDX == u8MOBIndex )
    2044:	81 11       	cpse	r24, r1
    2046:	5d c0       	rjmp	.+186    	; 0x2102 <CANMOBInterrupt+0x10e>
	{
		// TX success?  Just clear it since this is the RX context
		if( CANSTMOB & (1 << TXOK) )
    2048:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    204c:	86 ff       	sbrs	r24, 6
    204e:	09 c0       	rjmp	.+18     	; 0x2062 <CANMOBInterrupt+0x6e>
		{
			// Clear it
			CANSTMOB &= ~(1 << TXOK);
    2050:	ee ee       	ldi	r30, 0xEE	; 238
    2052:	f0 e0       	ldi	r31, 0x00	; 0
    2054:	80 81       	ld	r24, Z
    2056:	8f 7b       	andi	r24, 0xBF	; 191
    2058:	80 83       	st	Z, r24
            sg_bBusy = false;
    205a:	10 92 61 09 	sts	0x0961, r1	; 0x800961 <sg_bBusy>
            sg_bInRetransmit = false;  // Clear flag on success	
    205e:	10 92 5d 09 	sts	0x095D, r1	; 0x80095d <sg_bInRetransmit>
		}
		// RX success?
		if( CANSTMOB & (1 << RXOK) )
    2062:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    2066:	85 ff       	sbrs	r24, 5
    2068:	38 c0       	rjmp	.+112    	; 0x20da <CANMOBInterrupt+0xe6>
		{
			// Clear it
			CANSTMOB &= ~(1 << RXOK);
    206a:	ee ee       	ldi	r30, 0xEE	; 238
    206c:	f0 e0       	ldi	r31, 0x00	; 0
    206e:	80 81       	ld	r24, Z
    2070:	8f 7d       	andi	r24, 0xDF	; 223
    2072:	80 83       	st	Z, r24
		
			if( sg_pfRXCallback )
    2074:	c0 90 55 09 	lds	r12, 0x0955	; 0x800955 <sg_pfRXCallback>
    2078:	d0 90 56 09 	lds	r13, 0x0956	; 0x800956 <sg_pfRXCallback+0x1>
    207c:	c1 14       	cp	r12, r1
    207e:	d1 04       	cpc	r13, r1
    2080:	61 f1       	breq	.+88     	; 0x20da <CANMOBInterrupt+0xe6>
			{
				ECANMessageType eType;
				uint16_t u16ID = 0;
				uint8_t u8Data[8];
				uint8_t u8DataLen = CANCDMOB & 0x0f;
    2082:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    2086:	8f 70       	andi	r24, 0x0F	; 15
    2088:	f8 2e       	mov	r15, r24
				uint8_t u8Index = 0;
			
				// Grab the messageID from the identifier registers
				// TODO: This extraction may be wrong for extended frames
				// but it worked with the real Pack Controller somehow
				u16ID = ((uint16_t)CANIDT1) << 3;
    208a:	40 91 f3 00 	lds	r20, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f00f3>
    208e:	50 e0       	ldi	r21, 0x00	; 0
    2090:	44 0f       	add	r20, r20
    2092:	55 1f       	adc	r21, r21
    2094:	44 0f       	add	r20, r20
    2096:	55 1f       	adc	r21, r21
    2098:	44 0f       	add	r20, r20
    209a:	55 1f       	adc	r21, r21
				u16ID |= CANIDT2 >> 5;
    209c:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f00f2>
    20a0:	82 95       	swap	r24
    20a2:	86 95       	lsr	r24
    20a4:	87 70       	andi	r24, 0x07	; 7
    20a6:	48 2b       	or	r20, r24
			{
				ECANMessageType eType;
				uint16_t u16ID = 0;
				uint8_t u8Data[8];
				uint8_t u8DataLen = CANCDMOB & 0x0f;
				uint8_t u8Index = 0;
    20a8:	90 e0       	ldi	r25, 0x00	; 0
				// but it worked with the real Pack Controller somehow
				u16ID = ((uint16_t)CANIDT1) << 3;
				u16ID |= CANIDT2 >> 5;
			
				// Pull the data out into a temp buffer
				while( u8Index < u8DataLen )
    20aa:	0a c0       	rjmp	.+20     	; 0x20c0 <CANMOBInterrupt+0xcc>
				{
					u8Data[u8Index] = CANMSG;
    20ac:	20 91 fa 00 	lds	r18, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
    20b0:	e1 e0       	ldi	r30, 0x01	; 1
    20b2:	f0 e0       	ldi	r31, 0x00	; 0
    20b4:	ec 0f       	add	r30, r28
    20b6:	fd 1f       	adc	r31, r29
    20b8:	e9 0f       	add	r30, r25
    20ba:	f1 1d       	adc	r31, r1
    20bc:	20 83       	st	Z, r18
					u8Index++;
    20be:	9f 5f       	subi	r25, 0xFF	; 255
				// but it worked with the real Pack Controller somehow
				u16ID = ((uint16_t)CANIDT1) << 3;
				u16ID |= CANIDT2 >> 5;
			
				// Pull the data out into a temp buffer
				while( u8Index < u8DataLen )
    20c0:	9f 15       	cp	r25, r15
    20c2:	a0 f3       	brcs	.-24     	; 0x20ac <CANMOBInterrupt+0xb8>
					u8Data[u8Index] = CANMSG;
					u8Index++;
				}
			
				// Lookup ID to see if it matches one of ours
				eType = CANLookupCommand( u16ID );
    20c4:	ca 01       	movw	r24, r20
    20c6:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <CANLookupCommand>
			
				if( eType != ECANMessageType_MAX )
    20ca:	83 31       	cpi	r24, 0x13	; 19
    20cc:	31 f0       	breq	.+12     	; 0x20da <CANMOBInterrupt+0xe6>
				{
					// Call comamnd handler
					sg_pfRXCallback( eType, u8Data, u8DataLen );
    20ce:	4f 2d       	mov	r20, r15
    20d0:	be 01       	movw	r22, r28
    20d2:	6f 5f       	subi	r22, 0xFF	; 255
    20d4:	7f 4f       	sbci	r23, 0xFF	; 255
    20d6:	f6 01       	movw	r30, r12
    20d8:	09 95       	icall
				}
			}
		}
	
		// If receive error, clear the bits
		if( CANSTMOB & ((1 << SERR) | (1 << CERR) | (1 << FERR)) )
    20da:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    20de:	8e 70       	andi	r24, 0x0E	; 14
    20e0:	29 f0       	breq	.+10     	; 0x20ec <CANMOBInterrupt+0xf8>
		{
			// Clear it.  Just ignore
			CANSTMOB &= ~((1 << SERR) | (1 << CERR) | (1 << FERR));
    20e2:	ee ee       	ldi	r30, 0xEE	; 238
    20e4:	f0 e0       	ldi	r31, 0x00	; 0
    20e6:	80 81       	ld	r24, Z
    20e8:	81 7f       	andi	r24, 0xF1	; 241
    20ea:	80 83       	st	Z, r24
		}
	
		// Re-enable RX now
		CANIE2 |= (1 << u8MOBIndex);
    20ec:	ee ed       	ldi	r30, 0xDE	; 222
    20ee:	f0 e0       	ldi	r31, 0x00	; 0
    20f0:	80 81       	ld	r24, Z
    20f2:	08 2b       	or	r16, r24
    20f4:	00 83       	st	Z, r16
		CANCDMOB |= (1 << CONMOB1);
    20f6:	ef ee       	ldi	r30, 0xEF	; 239
    20f8:	f0 e0       	ldi	r31, 0x00	; 0
    20fa:	80 81       	ld	r24, Z
    20fc:	80 68       	ori	r24, 0x80	; 128
    20fe:	80 83       	st	Z, r24
    2100:	34 c0       	rjmp	.+104    	; 0x216a <CANMOBInterrupt+0x176>
	}
	else if( CANMOB_TX_IDX == u8MOBIndex )
    2102:	81 30       	cpi	r24, 0x01	; 1
    2104:	91 f5       	brne	.+100    	; 0x216a <CANMOBInterrupt+0x176>
	{
		if( CANSTMOB & (1 << TXOK) )
    2106:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    210a:	86 ff       	sbrs	r24, 6
    210c:	07 c0       	rjmp	.+14     	; 0x211c <CANMOBInterrupt+0x128>
		{
			// Clear it
			CANSTMOB &= ~(1 << TXOK);
    210e:	ee ee       	ldi	r30, 0xEE	; 238
    2110:	f0 e0       	ldi	r31, 0x00	; 0
    2112:	80 81       	ld	r24, Z
    2114:	8f 7b       	andi	r24, 0xBF	; 191
    2116:	80 83       	st	Z, r24
		
			sg_bBusy = false;
    2118:	10 92 61 09 	sts	0x0961, r1	; 0x800961 <sg_bBusy>
		}
		
		// RX success, just clear it since this is the TX context
		if( CANSTMOB & (1 << RXOK) )
    211c:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    2120:	85 ff       	sbrs	r24, 5
    2122:	05 c0       	rjmp	.+10     	; 0x212e <CANMOBInterrupt+0x13a>
		{
			// Clear it
			CANSTMOB &= ~(1 << RXOK);
    2124:	ee ee       	ldi	r30, 0xEE	; 238
    2126:	f0 e0       	ldi	r31, 0x00	; 0
    2128:	80 81       	ld	r24, Z
    212a:	8f 7d       	andi	r24, 0xDF	; 223
    212c:	80 83       	st	Z, r24
		}

		// If TX Error on transmit (collision with another device)
		// -or- ACK error (nobody listening),
		// retry send
		if( CANSTMOB & ((1 << BERR) | (1 << AERR) | (1 << SERR)) )
    212e:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    2132:	89 71       	andi	r24, 0x19	; 25
    2134:	d1 f0       	breq	.+52     	; 0x216a <CANMOBInterrupt+0x176>
		{
			// Clear it
			CANSTMOB &= ~((1 << BERR) | (1 << AERR) | (1 << SERR));
    2136:	ee ee       	ldi	r30, 0xEE	; 238
    2138:	f0 e0       	ldi	r31, 0x00	; 0
    213a:	80 81       	ld	r24, Z
    213c:	86 7e       	andi	r24, 0xE6	; 230
    213e:	80 83       	st	Z, r24

			if( sg_u8TransmitAttempts < 20 )
    2140:	80 91 60 09 	lds	r24, 0x0960	; 0x800960 <sg_u8TransmitAttempts>
    2144:	84 31       	cpi	r24, 0x14	; 20
    2146:	68 f4       	brcc	.+26     	; 0x2162 <CANMOBInterrupt+0x16e>
			{
				// Retransmit now
               sg_bInRetransmit = true;  // Set flag before retry
    2148:	81 e0       	ldi	r24, 0x01	; 1
    214a:	80 93 5d 09 	sts	0x095D, r24	; 0x80095d <sg_bInRetransmit>
               CANSendMessageInternal( sg_eLastTXType, sg_u8LastTXData, sg_u8LastTXDataLen, true );
    214e:	21 e0       	ldi	r18, 0x01	; 1
    2150:	40 91 5e 09 	lds	r20, 0x095E	; 0x80095e <sg_u8LastTXDataLen>
    2154:	6d e3       	ldi	r22, 0x3D	; 61
    2156:	79 e0       	ldi	r23, 0x09	; 9
    2158:	80 91 5f 09 	lds	r24, 0x095F	; 0x80095f <sg_eLastTXType>
    215c:	0e 94 c3 10 	call	0x2186	; 0x2186 <CANSendMessageInternal>
    2160:	04 c0       	rjmp	.+8      	; 0x216a <CANMOBInterrupt+0x176>
			}
			else
			{
				// Retries exhausted.  Give up
				sg_bBusy = false;
    2162:	10 92 61 09 	sts	0x0961, r1	; 0x800961 <sg_bBusy>
                sg_bInRetransmit = false;
    2166:	10 92 5d 09 	sts	0x095D, r1	; 0x80095d <sg_bInRetransmit>
			}
		}
	}
}
    216a:	28 96       	adiw	r28, 0x08	; 8
    216c:	0f b6       	in	r0, 0x3f	; 63
    216e:	f8 94       	cli
    2170:	de bf       	out	0x3e, r29	; 62
    2172:	0f be       	out	0x3f, r0	; 63
    2174:	cd bf       	out	0x3d, r28	; 61
    2176:	df 91       	pop	r29
    2178:	cf 91       	pop	r28
    217a:	1f 91       	pop	r17
    217c:	0f 91       	pop	r16
    217e:	ff 90       	pop	r15
    2180:	df 90       	pop	r13
    2182:	cf 90       	pop	r12
    2184:	08 95       	ret

Disassembly of section .text.__vector_18:

000026d4 <__vector_18>:

// Generic CAN interrupt handler
// Check interrrupt sources and clear them (by servicing or explicit clearing)
ISR(CAN_INT_vect, ISR_BLOCK)
{
    26d4:	1f 92       	push	r1
    26d6:	0f 92       	push	r0
    26d8:	0f b6       	in	r0, 0x3f	; 63
    26da:	0f 92       	push	r0
    26dc:	11 24       	eor	r1, r1
    26de:	0f 93       	push	r16
    26e0:	1f 93       	push	r17
    26e2:	2f 93       	push	r18
    26e4:	3f 93       	push	r19
    26e6:	4f 93       	push	r20
    26e8:	5f 93       	push	r21
    26ea:	6f 93       	push	r22
    26ec:	7f 93       	push	r23
    26ee:	8f 93       	push	r24
    26f0:	9f 93       	push	r25
    26f2:	af 93       	push	r26
    26f4:	bf 93       	push	r27
    26f6:	cf 93       	push	r28
    26f8:	df 93       	push	r29
    26fa:	ef 93       	push	r30
    26fc:	ff 93       	push	r31
	// Save state we'll need to restore
	uint8_t saved_cangie = CANGIE;
    26fe:	eb ed       	ldi	r30, 0xDB	; 219
    2700:	f0 e0       	ldi	r31, 0x00	; 0
    2702:	d0 81       	ld	r29, Z
	uint8_t saved_canie2 = CANIE2;	// Temporarily disable CAN interrupts to prevent reentry
    2704:	10 91 de 00 	lds	r17, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7f00de>
	CANGIE &= (uint8_t)~(1 << ENIT);
    2708:	80 81       	ld	r24, Z
    270a:	8f 77       	andi	r24, 0x7F	; 127
    270c:	80 83       	st	Z, r24

	// Do NOT re-enable global interrupts - this causes race conditions!
	
	 uint8_t sit = CANSIT2;
    270e:	c0 91 e0 00 	lds	r28, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f00e0>
	 
	 // Most common interrupts first  *claude
	 if(sit & (1 << CANMOB_RX_IDX)) {
    2712:	c0 ff       	sbrs	r28, 0
    2714:	0c c0       	rjmp	.+24     	; 0x272e <__vector_18+0x5a>
		 CANMOBInterrupt(CANMOB_RX_IDX);
    2716:	80 e0       	ldi	r24, 0x00	; 0
    2718:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <CANMOBInterrupt>
		 CANMOBSet(CANMOB_RX_IDX, &sg_sMOBGenericReceive, NULL, 0);
    271c:	00 e0       	ldi	r16, 0x00	; 0
    271e:	20 e0       	ldi	r18, 0x00	; 0
    2720:	30 e0       	ldi	r19, 0x00	; 0
    2722:	47 e1       	ldi	r20, 0x17	; 23
    2724:	55 e0       	ldi	r21, 0x05	; 5
    2726:	60 e0       	ldi	r22, 0x00	; 0
    2728:	80 e0       	ldi	r24, 0x00	; 0
    272a:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <CANMOBSet>
	 }
	 
	
	// Check TX MOB
	if( sit & (1 << CANMOB_TX_IDX) )
    272e:	c1 ff       	sbrs	r28, 1
    2730:	03 c0       	rjmp	.+6      	; 0x2738 <__vector_18+0x64>
	{
		CANMOBInterrupt( CANMOB_TX_IDX );
    2732:	81 e0       	ldi	r24, 0x01	; 1
    2734:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <CANMOBInterrupt>
	}
	
	// Now the generic, non-MOB interrupts (some of which may have already been handled by the MOB handler)
	
	// Bus Off interrupt
	if( CANGIT & (1 << BOFFIT) )
    2738:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    273c:	86 ff       	sbrs	r24, 6
    273e:	03 c0       	rjmp	.+6      	; 0x2746 <__vector_18+0x72>
	{
		// Just clear it for now
		CANGIT = (1 << BOFFIT);
    2740:	80 e4       	ldi	r24, 0x40	; 64
    2742:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
	}
	
	// Frame buffer receive (burst receive interrupt)
	// This should not be used
	if( CANGIT & (1 << BXOK) )
    2746:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    274a:	84 ff       	sbrs	r24, 4
    274c:	0a c0       	rjmp	.+20     	; 0x2762 <__vector_18+0x8e>
	{
		MBASSERT(0);
    274e:	45 ef       	ldi	r20, 0xF5	; 245
    2750:	51 e0       	ldi	r21, 0x01	; 1
    2752:	64 ec       	ldi	r22, 0xC4	; 196
    2754:	74 e0       	ldi	r23, 0x04	; 4
    2756:	80 e0       	ldi	r24, 0x00	; 0
    2758:	0e 94 fc 23 	call	0x47f8	; 0x47f8 <PlatformAssert>
		
		// TODO: Must write the CONMOB fields of the MOB that interrupted first?
		// Just clear it for now
		CANGIT = (1 << BXOK);
    275c:	80 e1       	ldi	r24, 0x10	; 16
    275e:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
	}
	
	// Bit stuffing error on receive
	if( CANGIT & (1 << SERG) )
    2762:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    2766:	83 ff       	sbrs	r24, 3
    2768:	03 c0       	rjmp	.+6      	; 0x2770 <__vector_18+0x9c>
	{
		// Just clear it for now.  Ignored.
		CANGIT = (1 << SERG);
    276a:	88 e0       	ldi	r24, 0x08	; 8
    276c:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
	}
	
	// CRC error on receive
	if( CANGIT & (1 << CERG) )
    2770:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    2774:	82 ff       	sbrs	r24, 2
    2776:	03 c0       	rjmp	.+6      	; 0x277e <__vector_18+0xaa>
	{
		// Just clear it for now.  Ignored.
		CANGIT = (1 << CERG);
    2778:	84 e0       	ldi	r24, 0x04	; 4
    277a:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
	}
	
	// Form error
	if( CANGIT & (1 << FERG) )
    277e:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    2782:	81 ff       	sbrs	r24, 1
    2784:	03 c0       	rjmp	.+6      	; 0x278c <__vector_18+0xb8>
	{
		// If detected form error on transmit, could be duplicate to MOB error interrupt (see 16.8.2 - Interrupt Behavior)
		// Ignore this one
		
		// Just clear it for now.  Ignored.
		CANGIT = (1 << FERG);
    2786:	82 e0       	ldi	r24, 0x02	; 2
    2788:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
	}
	
	// ACK missing on transmit (nobody's listening! (or failure on transmit???))
	if( CANGIT & (1 << AERG) )
    278c:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    2790:	80 ff       	sbrs	r24, 0
    2792:	13 c0       	rjmp	.+38     	; 0x27ba <__vector_18+0xe6>
	{
		// Clear the interrupt
		CANGIT = (1 << AERG);
    2794:	81 e0       	ldi	r24, 0x01	; 1
    2796:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
		
		if( sg_u8TransmitAttempts < 20 )
    279a:	80 91 60 09 	lds	r24, 0x0960	; 0x800960 <sg_u8TransmitAttempts>
    279e:	84 31       	cpi	r24, 0x14	; 20
    27a0:	50 f4       	brcc	.+20     	; 0x27b6 <__vector_18+0xe2>
		{
			// Retransmit now
			CANSendMessageInternal( sg_eLastTXType, sg_u8LastTXData, sg_u8LastTXDataLen, true );
    27a2:	21 e0       	ldi	r18, 0x01	; 1
    27a4:	40 91 5e 09 	lds	r20, 0x095E	; 0x80095e <sg_u8LastTXDataLen>
    27a8:	6d e3       	ldi	r22, 0x3D	; 61
    27aa:	79 e0       	ldi	r23, 0x09	; 9
    27ac:	80 91 5f 09 	lds	r24, 0x095F	; 0x80095f <sg_eLastTXType>
    27b0:	0e 94 c3 10 	call	0x2186	; 0x2186 <CANSendMessageInternal>
    27b4:	02 c0       	rjmp	.+4      	; 0x27ba <__vector_18+0xe6>
		}
		else
		{
			// Retries exhausted.  Give up
			sg_bBusy = false;
    27b6:	10 92 61 09 	sts	0x0961, r1	; 0x800961 <sg_bBusy>
		}
	}

	// Reenable CAN general interrupt	
//	CANGIE |= (1 << ENIT);
    CANIE2 = saved_canie2;
    27ba:	10 93 de 00 	sts	0x00DE, r17	; 0x8000de <__TEXT_REGION_LENGTH__+0x7f00de>
    CANGIE = saved_cangie;
    27be:	d0 93 db 00 	sts	0x00DB, r29	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f00db>
}
    27c2:	ff 91       	pop	r31
    27c4:	ef 91       	pop	r30
    27c6:	df 91       	pop	r29
    27c8:	cf 91       	pop	r28
    27ca:	bf 91       	pop	r27
    27cc:	af 91       	pop	r26
    27ce:	9f 91       	pop	r25
    27d0:	8f 91       	pop	r24
    27d2:	7f 91       	pop	r23
    27d4:	6f 91       	pop	r22
    27d6:	5f 91       	pop	r21
    27d8:	4f 91       	pop	r20
    27da:	3f 91       	pop	r19
    27dc:	2f 91       	pop	r18
    27de:	1f 91       	pop	r17
    27e0:	0f 91       	pop	r16
    27e2:	0f 90       	pop	r0
    27e4:	0f be       	out	0x3f, r0	; 63
    27e6:	0f 90       	pop	r0
    27e8:	1f 90       	pop	r1
    27ea:	18 95       	reti

Disassembly of section .text.CANSendMessage:

00004d36 <CANSendMessage>:
					 uint8_t* pu8Data,
					 uint8_t u8DataLen )
{
	// If we're busy, kick it back so we're cooperatively multitasking
	// rather than spin locking
	if (sg_bBusy)
    4d36:	90 91 61 09 	lds	r25, 0x0961	; 0x800961 <sg_bBusy>
    4d3a:	91 11       	cpse	r25, r1
    4d3c:	05 c0       	rjmp	.+10     	; 0x4d48 <CANSendMessage+0x12>
	{
		return(false);
	}

	CANSendMessageInternal( eType, pu8Data, u8DataLen, false );
    4d3e:	20 e0       	ldi	r18, 0x00	; 0
    4d40:	0e 94 c3 10 	call	0x2186	; 0x2186 <CANSendMessageInternal>
	return( true );
    4d44:	81 e0       	ldi	r24, 0x01	; 1
    4d46:	08 95       	ret
{
	// If we're busy, kick it back so we're cooperatively multitasking
	// rather than spin locking
	if (sg_bBusy)
	{
		return(false);
    4d48:	80 e0       	ldi	r24, 0x00	; 0
	}

	CANSendMessageInternal( eType, pu8Data, u8DataLen, false );
	return( true );
}
    4d4a:	08 95       	ret

Disassembly of section .text.CANSetRXCallback:

00004e8c <CANSetRXCallback>:

void CANSetRXCallback( void (*pfCallback)(ECANMessageType eType, uint8_t* pu8Data, uint8_t u8DataLen) )
{
	sg_pfRXCallback = pfCallback;
    4e8c:	90 93 56 09 	sts	0x0956, r25	; 0x800956 <sg_pfRXCallback+0x1>
    4e90:	80 93 55 09 	sts	0x0955, r24	; 0x800955 <sg_pfRXCallback>
    4e94:	08 95       	ret

Disassembly of section .text.CANInit:

0000368a <CANInit>:
}

void CANInit( void )
{
    368a:	0f 93       	push	r16
    368c:	cf 93       	push	r28
	// Init clock
	// See datasheet table 16-2.
	// For 8Mhz, set CAN rate to 500 Kbps
	CANBT1 = 0x02;
    368e:	c2 e0       	ldi	r28, 0x02	; 2
    3690:	c0 93 e2 00 	sts	0x00E2, r28	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f00e2>
	CANBT2 = 0x04;
    3694:	84 e0       	ldi	r24, 0x04	; 4
    3696:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f00e3>
	CANBT3 = 0x12;
    369a:	82 e1       	ldi	r24, 0x12	; 18
    369c:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7f00e4>
	
	// Init message objects (MOBs) since there are no defaults at reset
	CANMOBSet( 0, &sg_sMOBDisabled, NULL, 0 );
    36a0:	00 e0       	ldi	r16, 0x00	; 0
    36a2:	20 e0       	ldi	r18, 0x00	; 0
    36a4:	30 e0       	ldi	r19, 0x00	; 0
    36a6:	4f e1       	ldi	r20, 0x1F	; 31
    36a8:	55 e0       	ldi	r21, 0x05	; 5
    36aa:	60 e0       	ldi	r22, 0x00	; 0
    36ac:	80 e0       	ldi	r24, 0x00	; 0
    36ae:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <CANMOBSet>
	CANMOBSet( 1, &sg_sMOBDisabled, NULL, 0 );
    36b2:	20 e0       	ldi	r18, 0x00	; 0
    36b4:	30 e0       	ldi	r19, 0x00	; 0
    36b6:	4f e1       	ldi	r20, 0x1F	; 31
    36b8:	55 e0       	ldi	r21, 0x05	; 5
    36ba:	60 e0       	ldi	r22, 0x00	; 0
    36bc:	81 e0       	ldi	r24, 0x01	; 1
    36be:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <CANMOBSet>
	CANMOBSet( 2, &sg_sMOBDisabled, NULL, 0 );
    36c2:	20 e0       	ldi	r18, 0x00	; 0
    36c4:	30 e0       	ldi	r19, 0x00	; 0
    36c6:	4f e1       	ldi	r20, 0x1F	; 31
    36c8:	55 e0       	ldi	r21, 0x05	; 5
    36ca:	60 e0       	ldi	r22, 0x00	; 0
    36cc:	82 e0       	ldi	r24, 0x02	; 2
    36ce:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <CANMOBSet>
	CANMOBSet( 3, &sg_sMOBDisabled, NULL, 0 );
    36d2:	20 e0       	ldi	r18, 0x00	; 0
    36d4:	30 e0       	ldi	r19, 0x00	; 0
    36d6:	4f e1       	ldi	r20, 0x1F	; 31
    36d8:	55 e0       	ldi	r21, 0x05	; 5
    36da:	60 e0       	ldi	r22, 0x00	; 0
    36dc:	83 e0       	ldi	r24, 0x03	; 3
    36de:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <CANMOBSet>
	CANMOBSet( 4, &sg_sMOBDisabled, NULL, 0 );
    36e2:	20 e0       	ldi	r18, 0x00	; 0
    36e4:	30 e0       	ldi	r19, 0x00	; 0
    36e6:	4f e1       	ldi	r20, 0x1F	; 31
    36e8:	55 e0       	ldi	r21, 0x05	; 5
    36ea:	60 e0       	ldi	r22, 0x00	; 0
    36ec:	84 e0       	ldi	r24, 0x04	; 4
    36ee:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <CANMOBSet>
	CANMOBSet( 5, &sg_sMOBDisabled, NULL, 0 );
    36f2:	20 e0       	ldi	r18, 0x00	; 0
    36f4:	30 e0       	ldi	r19, 0x00	; 0
    36f6:	4f e1       	ldi	r20, 0x1F	; 31
    36f8:	55 e0       	ldi	r21, 0x05	; 5
    36fa:	60 e0       	ldi	r22, 0x00	; 0
    36fc:	85 e0       	ldi	r24, 0x05	; 5
    36fe:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <CANMOBSet>
	
	// Setup generic RX
	CANMOBSet( CANMOB_RX_IDX, &sg_sMOBGenericReceive, NULL, 0 );
    3702:	20 e0       	ldi	r18, 0x00	; 0
    3704:	30 e0       	ldi	r19, 0x00	; 0
    3706:	47 e1       	ldi	r20, 0x17	; 23
    3708:	55 e0       	ldi	r21, 0x05	; 5
    370a:	60 e0       	ldi	r22, 0x00	; 0
    370c:	80 e0       	ldi	r24, 0x00	; 0
    370e:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <CANMOBSet>
	
	// Enable general CAN interrupts
	CANGIE = (1 << ENIT) | (1 << ENRX) | (1 << ENTX) | (1 << ENERR) | (1 << ENBX) | (1 << ENERG);
    3712:	8e eb       	ldi	r24, 0xBE	; 190
    3714:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f00db>

//	CANGIE &= ~(1 << ENOVRT);  // Disable CAN timer overflow interrupt

	// Enable the bus
	CANGCON = (1 << ENASTB);
    3718:	c0 93 d8 00 	sts	0x00D8, r28	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f00d8>
	sg_bBusy = false;
    371c:	10 92 61 09 	sts	0x0961, r1	; 0x800961 <sg_bBusy>
}
    3720:	cf 91       	pop	r28
    3722:	0f 91       	pop	r16
    3724:	08 95       	ret

Disassembly of section .text.DebugOut:

00004e3c <DebugOut>:
}

#endif

void DebugOut( const char* peFormat, ... )
{
    4e3c:	cf 93       	push	r28
    4e3e:	df 93       	push	r29
    4e40:	cd b7       	in	r28, 0x3d	; 61
    4e42:	de b7       	in	r29, 0x3e	; 62
	
	va_end( args );	 */
	
	//DebugSerialSend( (uint8_t*)u8Buffer, strlen(u8Buffer) );
#endif
}
    4e44:	df 91       	pop	r29
    4e46:	cf 91       	pop	r28
    4e48:	08 95       	ret

Disassembly of section .text.EEPROMRead:

00004da2 <EEPROMRead>:
}

uint8_t EEPROMRead(uint16_t u16Address)
{
	// Wait for any completion of writes, etc..
	while (EECR & (1 << EEWE));
    4da2:	f9 99       	sbic	0x1f, 1	; 31
    4da4:	fe cf       	rjmp	.-4      	; 0x4da2 <EEPROMRead>

	// Set address	
	EEAR = u16Address;
    4da6:	92 bd       	out	0x22, r25	; 34
    4da8:	81 bd       	out	0x21, r24	; 33
	
	// Start EEPROM read
	EECR |= (1 << EERE);
    4daa:	8f b3       	in	r24, 0x1f	; 31
    4dac:	81 60       	ori	r24, 0x01	; 1
    4dae:	8f bb       	out	0x1f, r24	; 31
	
	// Return the data
	return(EEDR);
    4db0:	80 b5       	in	r24, 0x20	; 32
    4db2:	08 95       	ret

Disassembly of section .text.I2CBitDelay:

00004e4a <I2CBitDelay>:
#define SDA_SET_INPUT()			(I2C_PORT_DDR &= ((uint8_t) ~(1 << I2C_SDA_PIN))); SDA_HIGH()

// Delays for one I2C bit's worth of time
static void I2CBitDelay(void)
{
	Delay(10);
    4e4a:	6a e0       	ldi	r22, 0x0A	; 10
    4e4c:	70 e0       	ldi	r23, 0x00	; 0
    4e4e:	80 e0       	ldi	r24, 0x00	; 0
    4e50:	90 e0       	ldi	r25, 0x00	; 0
    4e52:	0e 94 4e 21 	call	0x429c	; 0x429c <Delay>
    4e56:	08 95       	ret

Disassembly of section .text.I2CStart:

000047a0 <I2CStart>:

// Send an I2C start sequence and quantize foreground code to the overflow
// timer
void I2CStart(void)
{
	SDA_SET_OUTPUT();
    47a0:	8a b1       	in	r24, 0x0a	; 10
    47a2:	82 60       	ori	r24, 0x02	; 2
    47a4:	8a b9       	out	0x0a, r24	; 10
	SDA_HIGH();
    47a6:	8b b1       	in	r24, 0x0b	; 11
    47a8:	82 60       	ori	r24, 0x02	; 2
    47aa:	8b b9       	out	0x0b, r24	; 11
	SCL_HIGH();
    47ac:	8b b1       	in	r24, 0x0b	; 11
    47ae:	81 60       	ori	r24, 0x01	; 1
    47b0:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    47b2:	0e 94 25 27 	call	0x4e4a	; 0x4e4a <I2CBitDelay>
	SDA_LOW();
    47b6:	8b b1       	in	r24, 0x0b	; 11
    47b8:	8d 7f       	andi	r24, 0xFD	; 253
    47ba:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    47bc:	0e 94 25 27 	call	0x4e4a	; 0x4e4a <I2CBitDelay>
	SCL_LOW();
    47c0:	8b b1       	in	r24, 0x0b	; 11
    47c2:	8e 7f       	andi	r24, 0xFE	; 254
    47c4:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    47c6:	0e 94 25 27 	call	0x4e4a	; 0x4e4a <I2CBitDelay>
    47ca:	08 95       	ret

Disassembly of section .text.I2CStop:

00004942 <I2CStop>:
}

// Send an I2C stop sequence
void I2CStop(void)
{
	SDA_LOW();
    4942:	8b b1       	in	r24, 0x0b	; 11
    4944:	8d 7f       	andi	r24, 0xFD	; 253
    4946:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    4948:	0e 94 25 27 	call	0x4e4a	; 0x4e4a <I2CBitDelay>
	SCL_HIGH();
    494c:	8b b1       	in	r24, 0x0b	; 11
    494e:	81 60       	ori	r24, 0x01	; 1
    4950:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    4952:	0e 94 25 27 	call	0x4e4a	; 0x4e4a <I2CBitDelay>
	SDA_SET_INPUT();
    4956:	8a b1       	in	r24, 0x0a	; 10
    4958:	8d 7f       	andi	r24, 0xFD	; 253
    495a:	8a b9       	out	0x0a, r24	; 10
    495c:	8b b1       	in	r24, 0x0b	; 11
    495e:	82 60       	ori	r24, 0x02	; 2
    4960:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    4962:	0e 94 25 27 	call	0x4e4a	; 0x4e4a <I2CBitDelay>
    4966:	08 95       	ret

Disassembly of section .text.I2CUnstick:

000044f0 <I2CUnstick>:
}

// Unsticks an I2C bus
void I2CUnstick(void)
{
    44f0:	cf 93       	push	r28
	uint8_t u8UnstickBits = 64;

	SCL_SET_OUTPUT();
    44f2:	8a b1       	in	r24, 0x0a	; 10
    44f4:	81 60       	ori	r24, 0x01	; 1
    44f6:	8a b9       	out	0x0a, r24	; 10
	SDA_SET_OUTPUT();
    44f8:	8a b1       	in	r24, 0x0a	; 10
    44fa:	82 60       	ori	r24, 0x02	; 2
    44fc:	8a b9       	out	0x0a, r24	; 10
}

// Unsticks an I2C bus
void I2CUnstick(void)
{
	uint8_t u8UnstickBits = 64;
    44fe:	c0 e4       	ldi	r28, 0x40	; 64

	SCL_SET_OUTPUT();
	SDA_SET_OUTPUT();
	
	while (u8UnstickBits)
    4500:	11 c0       	rjmp	.+34     	; 0x4524 <I2CUnstick+0x34>
	{
		SCL_LOW();
    4502:	8b b1       	in	r24, 0x0b	; 11
    4504:	8e 7f       	andi	r24, 0xFE	; 254
    4506:	8b b9       	out	0x0b, r24	; 11
		SDA_LOW();
    4508:	8b b1       	in	r24, 0x0b	; 11
    450a:	8d 7f       	andi	r24, 0xFD	; 253
    450c:	8b b9       	out	0x0b, r24	; 11
		I2CBitDelay();
    450e:	0e 94 25 27 	call	0x4e4a	; 0x4e4a <I2CBitDelay>
		SCL_HIGH();
    4512:	8b b1       	in	r24, 0x0b	; 11
    4514:	81 60       	ori	r24, 0x01	; 1
    4516:	8b b9       	out	0x0b, r24	; 11
		SDA_HIGH();
    4518:	8b b1       	in	r24, 0x0b	; 11
    451a:	82 60       	ori	r24, 0x02	; 2
    451c:	8b b9       	out	0x0b, r24	; 11
		I2CBitDelay();
    451e:	0e 94 25 27 	call	0x4e4a	; 0x4e4a <I2CBitDelay>
		u8UnstickBits--;
    4522:	c1 50       	subi	r28, 0x01	; 1
	uint8_t u8UnstickBits = 64;

	SCL_SET_OUTPUT();
	SDA_SET_OUTPUT();
	
	while (u8UnstickBits)
    4524:	c1 11       	cpse	r28, r1
    4526:	ed cf       	rjmp	.-38     	; 0x4502 <I2CUnstick+0x12>
		SCL_HIGH();
		SDA_HIGH();
		I2CBitDelay();
		u8UnstickBits--;
	}
}
    4528:	cf 91       	pop	r28
    452a:	08 95       	ret

Disassembly of section .text.I2CTxByte:

00003e38 <I2CTxByte>:

// Sends a single I2C byte. Returns false if the byte is not acked, or true if it is.
bool I2CTxByte(uint8_t u8Byte)
{
    3e38:	cf 93       	push	r28
    3e3a:	df 93       	push	r29
    3e3c:	d8 2f       	mov	r29, r24
	uint8_t u8Length = 8;			// 8 Bits to send
	bool bAck = false;

	SDA_SET_OUTPUT();
    3e3e:	8a b1       	in	r24, 0x0a	; 10
    3e40:	82 60       	ori	r24, 0x02	; 2
    3e42:	8a b9       	out	0x0a, r24	; 10
}

// Sends a single I2C byte. Returns false if the byte is not acked, or true if it is.
bool I2CTxByte(uint8_t u8Byte)
{
	uint8_t u8Length = 8;			// 8 Bits to send
    3e44:	c8 e0       	ldi	r28, 0x08	; 8
	bool bAck = false;

	SDA_SET_OUTPUT();

	while (u8Length)
    3e46:	15 c0       	rjmp	.+42     	; 0x3e72 <I2CTxByte+0x3a>
	{
		if (u8Byte & 0x80)
    3e48:	dd 23       	and	r29, r29
    3e4a:	24 f4       	brge	.+8      	; 0x3e54 <I2CTxByte+0x1c>
		{
			SDA_HIGH();
    3e4c:	8b b1       	in	r24, 0x0b	; 11
    3e4e:	82 60       	ori	r24, 0x02	; 2
    3e50:	8b b9       	out	0x0b, r24	; 11
    3e52:	03 c0       	rjmp	.+6      	; 0x3e5a <I2CTxByte+0x22>
		}
		else
		{
			SDA_LOW();
    3e54:	8b b1       	in	r24, 0x0b	; 11
    3e56:	8d 7f       	andi	r24, 0xFD	; 253
    3e58:	8b b9       	out	0x0b, r24	; 11
		}
		
		// Drive SCL high
		SCL_HIGH();
    3e5a:	8b b1       	in	r24, 0x0b	; 11
    3e5c:	81 60       	ori	r24, 0x01	; 1
    3e5e:	8b b9       	out	0x0b, r24	; 11
		
		I2CBitDelay();
    3e60:	0e 94 25 27 	call	0x4e4a	; 0x4e4a <I2CBitDelay>
		
		// Ensure SCL is low
		SCL_LOW();
    3e64:	8b b1       	in	r24, 0x0b	; 11
    3e66:	8e 7f       	andi	r24, 0xFE	; 254
    3e68:	8b b9       	out	0x0b, r24	; 11
	
		// SDA Is now set. Delay.
		I2CBitDelay();
    3e6a:	0e 94 25 27 	call	0x4e4a	; 0x4e4a <I2CBitDelay>
		
		// Next bit
		u8Byte <<= 1;	
    3e6e:	dd 0f       	add	r29, r29
		u8Length--;
    3e70:	c1 50       	subi	r28, 0x01	; 1
	uint8_t u8Length = 8;			// 8 Bits to send
	bool bAck = false;

	SDA_SET_OUTPUT();

	while (u8Length)
    3e72:	c1 11       	cpse	r28, r1
    3e74:	e9 cf       	rjmp	.-46     	; 0x3e48 <I2CTxByte+0x10>
		// Next bit
		u8Byte <<= 1;	
		u8Length--;
	}
	
	SDA_SET_INPUT();
    3e76:	8a b1       	in	r24, 0x0a	; 10
    3e78:	8d 7f       	andi	r24, 0xFD	; 253
    3e7a:	8a b9       	out	0x0a, r24	; 10
    3e7c:	8b b1       	in	r24, 0x0b	; 11
    3e7e:	82 60       	ori	r24, 0x02	; 2
    3e80:	8b b9       	out	0x0b, r24	; 11
	SCL_HIGH();
    3e82:	8b b1       	in	r24, 0x0b	; 11
    3e84:	81 60       	ori	r24, 0x01	; 1
    3e86:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    3e88:	0e 94 25 27 	call	0x4e4a	; 0x4e4a <I2CBitDelay>
	
	// See if the byte was acknowledged
	if (SDA_READ())
    3e8c:	49 9b       	sbis	0x09, 1	; 9
	{
		bAck = false;
	}
	else
	{
		bAck = true;
    3e8e:	c1 e0       	ldi	r28, 0x01	; 1
	}
	
	SCL_LOW();
    3e90:	8b b1       	in	r24, 0x0b	; 11
    3e92:	8e 7f       	andi	r24, 0xFE	; 254
    3e94:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    3e96:	0e 94 25 27 	call	0x4e4a	; 0x4e4a <I2CBitDelay>
	return(bAck);
}
    3e9a:	8c 2f       	mov	r24, r28
    3e9c:	df 91       	pop	r29
    3e9e:	cf 91       	pop	r28
    3ea0:	08 95       	ret

Disassembly of section .text.I2CRxByte:

00003cd8 <I2CRxByte>:

// Receives a single I2C byte and will optionally generate an ack at the end
uint8_t I2CRxByte(bool bAck)
{
    3cd8:	1f 93       	push	r17
    3cda:	cf 93       	push	r28
    3cdc:	df 93       	push	r29
    3cde:	18 2f       	mov	r17, r24
	uint8_t u8Data = 0;
	uint8_t u8Count = 8;
	
	SDA_SET_INPUT();
    3ce0:	8a b1       	in	r24, 0x0a	; 10
    3ce2:	8d 7f       	andi	r24, 0xFD	; 253
    3ce4:	8a b9       	out	0x0a, r24	; 10
    3ce6:	8b b1       	in	r24, 0x0b	; 11
    3ce8:	82 60       	ori	r24, 0x02	; 2
    3cea:	8b b9       	out	0x0b, r24	; 11

// Receives a single I2C byte and will optionally generate an ack at the end
uint8_t I2CRxByte(bool bAck)
{
	uint8_t u8Data = 0;
	uint8_t u8Count = 8;
    3cec:	c8 e0       	ldi	r28, 0x08	; 8
}

// Receives a single I2C byte and will optionally generate an ack at the end
uint8_t I2CRxByte(bool bAck)
{
	uint8_t u8Data = 0;
    3cee:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t u8Count = 8;
	
	SDA_SET_INPUT();
	
	// Consume all 8 data bits
	while (u8Count)
    3cf0:	0e c0       	rjmp	.+28     	; 0x3d0e <I2CRxByte+0x36>
	{
		u8Data <<= 1;
    3cf2:	dd 0f       	add	r29, r29

		SCL_HIGH();
    3cf4:	8b b1       	in	r24, 0x0b	; 11
    3cf6:	81 60       	ori	r24, 0x01	; 1
    3cf8:	8b b9       	out	0x0b, r24	; 11
		I2CBitDelay();
    3cfa:	0e 94 25 27 	call	0x4e4a	; 0x4e4a <I2CBitDelay>
			
		if (SDA_READ())
    3cfe:	49 99       	sbic	0x09, 1	; 9
		{
			u8Data |= 1;
    3d00:	d1 60       	ori	r29, 0x01	; 1
		}
		
		SCL_LOW();
    3d02:	8b b1       	in	r24, 0x0b	; 11
    3d04:	8e 7f       	andi	r24, 0xFE	; 254
    3d06:	8b b9       	out	0x0b, r24	; 11
		I2CBitDelay();
    3d08:	0e 94 25 27 	call	0x4e4a	; 0x4e4a <I2CBitDelay>
		u8Count--;
    3d0c:	c1 50       	subi	r28, 0x01	; 1
	uint8_t u8Count = 8;
	
	SDA_SET_INPUT();
	
	// Consume all 8 data bits
	while (u8Count)
    3d0e:	c1 11       	cpse	r28, r1
    3d10:	f0 cf       	rjmp	.-32     	; 0x3cf2 <I2CRxByte+0x1a>
		I2CBitDelay();
		u8Count--;
	}

	// See if we acknowledge this
	SDA_SET_OUTPUT();
    3d12:	8a b1       	in	r24, 0x0a	; 10
    3d14:	82 60       	ori	r24, 0x02	; 2
    3d16:	8a b9       	out	0x0a, r24	; 10
	if (bAck)
    3d18:	11 23       	and	r17, r17
    3d1a:	21 f0       	breq	.+8      	; 0x3d24 <I2CRxByte+0x4c>
	{
		SDA_LOW();
    3d1c:	8b b1       	in	r24, 0x0b	; 11
    3d1e:	8d 7f       	andi	r24, 0xFD	; 253
    3d20:	8b b9       	out	0x0b, r24	; 11
    3d22:	03 c0       	rjmp	.+6      	; 0x3d2a <I2CRxByte+0x52>
	}
	else
	{
		SDA_HIGH();
    3d24:	8b b1       	in	r24, 0x0b	; 11
    3d26:	82 60       	ori	r24, 0x02	; 2
    3d28:	8b b9       	out	0x0b, r24	; 11
	}
	
	I2CBitDelay();
    3d2a:	0e 94 25 27 	call	0x4e4a	; 0x4e4a <I2CBitDelay>
	SCL_HIGH();
    3d2e:	8b b1       	in	r24, 0x0b	; 11
    3d30:	81 60       	ori	r24, 0x01	; 1
    3d32:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    3d34:	0e 94 25 27 	call	0x4e4a	; 0x4e4a <I2CBitDelay>
	SCL_LOW();
    3d38:	8b b1       	in	r24, 0x0b	; 11
    3d3a:	8e 7f       	andi	r24, 0xFE	; 254
    3d3c:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    3d3e:	0e 94 25 27 	call	0x4e4a	; 0x4e4a <I2CBitDelay>
	SDA_LOW();
    3d42:	8b b1       	in	r24, 0x0b	; 11
    3d44:	8d 7f       	andi	r24, 0xFD	; 253
    3d46:	8b b9       	out	0x0b, r24	; 11

	return(u8Data);	
}
    3d48:	8d 2f       	mov	r24, r29
    3d4a:	df 91       	pop	r29
    3d4c:	cf 91       	pop	r28
    3d4e:	1f 91       	pop	r17
    3d50:	08 95       	ret

Disassembly of section .text.I2CSetup:

000047cc <I2CSetup>:
// Prepares the SCL/SDA pins for I2C operation and returns when the CPU is
// quantized to the timer (for consistent bit alignment)
void I2CSetup(void)
{
	// Deassert SCL and SDA
	SCL_HIGH();
    47cc:	8b b1       	in	r24, 0x0b	; 11
    47ce:	81 60       	ori	r24, 0x01	; 1
    47d0:	8b b9       	out	0x0b, r24	; 11
	SDA_HIGH();
    47d2:	8b b1       	in	r24, 0x0b	; 11
    47d4:	82 60       	ori	r24, 0x02	; 2
    47d6:	8b b9       	out	0x0b, r24	; 11

	// Set SCL and SDA lines as push/pull output drives
	SCL_SET_OUTPUT();
    47d8:	8a b1       	in	r24, 0x0a	; 10
    47da:	81 60       	ori	r24, 0x01	; 1
    47dc:	8a b9       	out	0x0a, r24	; 10
	
	// Turn on SDA, set as an input
	SDA_SET_INPUT();
    47de:	8a b1       	in	r24, 0x0a	; 10
    47e0:	8d 7f       	andi	r24, 0xFD	; 253
    47e2:	8a b9       	out	0x0a, r24	; 10
    47e4:	8b b1       	in	r24, 0x0b	; 11
    47e6:	82 60       	ori	r24, 0x02	; 2
    47e8:	8b b9       	out	0x0b, r24	; 11
	
	Delay(20);
    47ea:	64 e1       	ldi	r22, 0x14	; 20
    47ec:	70 e0       	ldi	r23, 0x00	; 0
    47ee:	80 e0       	ldi	r24, 0x00	; 0
    47f0:	90 e0       	ldi	r25, 0x00	; 0
    47f2:	0e 94 4e 21 	call	0x429c	; 0x429c <Delay>
    47f6:	08 95       	ret

Disassembly of section .text.I2CStartTransaction:

0000487a <I2CStartTransaction>:

// Sets up the I2C pins, sends slave address/read/write byte, and waits for acknowledgment.
// Returns false if no device is responding.
bool I2CStartTransaction(uint8_t u8SlaveAddress,
						 bool bRead)
{
    487a:	cf 93       	push	r28
    487c:	df 93       	push	r29
    487e:	c8 2f       	mov	r28, r24
    4880:	d6 2f       	mov	r29, r22
	// Set up the pins for I2C operation
	I2CSetup();
    4882:	0e 94 e6 23 	call	0x47cc	; 0x47cc <I2CSetup>
	
	// I2C Start condition
	I2CStart();
    4886:	0e 94 d0 23 	call	0x47a0	; 0x47a0 <I2CStart>

	// If it's a read operation, clear the lower bit
	if (bRead)
    488a:	dd 23       	and	r29, r29
    488c:	19 f0       	breq	.+6      	; 0x4894 <I2CStartTransaction+0x1a>
	{
		u8SlaveAddress |= 1;
    488e:	8c 2f       	mov	r24, r28
    4890:	81 60       	ori	r24, 0x01	; 1
    4892:	02 c0       	rjmp	.+4      	; 0x4898 <I2CStartTransaction+0x1e>
	}
	else
	{
		// Otherwise set it
		u8SlaveAddress &= (uint8_t) (~1);
    4894:	8c 2f       	mov	r24, r28
    4896:	8e 7f       	andi	r24, 0xFE	; 254
	}
	
	// Now send out the slave address + the read/write bit
	return(I2CTxByte(u8SlaveAddress));
    4898:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <I2CTxByte>
}
    489c:	df 91       	pop	r29
    489e:	cf 91       	pop	r28
    48a0:	08 95       	ret

Disassembly of section .text.CellCountExpectedSet:

000031a2 <CellCountExpectedSet>:
	sg_u8CellReports = 0;
}

// Called at start of WRITE frame to wrap up any receive housekeeping prior to frame processing
void vUARTRXEnd(void)
{
    31a2:	cf 92       	push	r12
    31a4:	df 92       	push	r13
    31a6:	ef 92       	push	r14
    31a8:	ff 92       	push	r15
    31aa:	8f 35       	cpi	r24, 0x5F	; 95
    31ac:	08 f0       	brcs	.+2      	; 0x31b0 <CellCountExpectedSet+0xe>
    31ae:	8e e5       	ldi	r24, 0x5E	; 94
    31b0:	e0 e1       	ldi	r30, 0x10	; 16
    31b2:	f1 e0       	ldi	r31, 0x01	; 1
    31b4:	85 8b       	std	Z+21, r24	; 0x15
    31b6:	c8 2e       	mov	r12, r24
    31b8:	d1 2c       	mov	r13, r1
    31ba:	e1 2c       	mov	r14, r1
    31bc:	f1 2c       	mov	r15, r1
    31be:	aa ec       	ldi	r26, 0xCA	; 202
    31c0:	b8 e0       	ldi	r27, 0x08	; 8
    31c2:	a7 01       	movw	r20, r14
    31c4:	96 01       	movw	r18, r12
    31c6:	0e 94 b1 26 	call	0x4d62	; 0x4d62 <__muluhisi3>
    31ca:	65 8f       	std	Z+29, r22	; 0x1d
    31cc:	76 8f       	std	Z+30, r23	; 0x1e
    31ce:	87 8f       	std	Z+31, r24	; 0x1f
    31d0:	90 a3       	std	Z+32, r25	; 0x20
    31d2:	a4 e9       	ldi	r26, 0x94	; 148
    31d4:	b1 e1       	ldi	r27, 0x11	; 17
    31d6:	0e 94 b1 26 	call	0x4d62	; 0x4d62 <__muluhisi3>
    31da:	61 a3       	std	Z+33, r22	; 0x21
    31dc:	72 a3       	std	Z+34, r23	; 0x22
    31de:	83 a3       	std	Z+35, r24	; 0x23
    31e0:	94 a3       	std	Z+36, r25	; 0x24
    31e2:	81 a1       	ldd	r24, Z+33	; 0x21
    31e4:	92 a1       	ldd	r25, Z+34	; 0x22
    31e6:	a3 a1       	ldd	r26, Z+35	; 0x23
    31e8:	b4 a1       	ldd	r27, Z+36	; 0x24
    31ea:	45 8d       	ldd	r20, Z+29	; 0x1d
    31ec:	56 8d       	ldd	r21, Z+30	; 0x1e
    31ee:	67 8d       	ldd	r22, Z+31	; 0x1f
    31f0:	70 a1       	ldd	r23, Z+32	; 0x20
    31f2:	84 1b       	sub	r24, r20
    31f4:	95 0b       	sbc	r25, r21
    31f6:	a6 0b       	sbc	r26, r22
    31f8:	b7 0b       	sbc	r27, r23
    31fa:	88 0f       	add	r24, r24
    31fc:	99 1f       	adc	r25, r25
    31fe:	aa 1f       	adc	r26, r26
    3200:	bb 1f       	adc	r27, r27
    3202:	88 0f       	add	r24, r24
    3204:	99 1f       	adc	r25, r25
    3206:	aa 1f       	adc	r26, r26
    3208:	bb 1f       	adc	r27, r27
    320a:	88 0f       	add	r24, r24
    320c:	99 1f       	adc	r25, r25
    320e:	aa 1f       	adc	r26, r26
    3210:	bb 1f       	adc	r27, r27
    3212:	88 0f       	add	r24, r24
    3214:	99 1f       	adc	r25, r25
    3216:	aa 1f       	adc	r26, r26
    3218:	bb 1f       	adc	r27, r27
    321a:	88 0f       	add	r24, r24
    321c:	99 1f       	adc	r25, r25
    321e:	aa 1f       	adc	r26, r26
    3220:	bb 1f       	adc	r27, r27
    3222:	88 0f       	add	r24, r24
    3224:	99 1f       	adc	r25, r25
    3226:	aa 1f       	adc	r26, r26
    3228:	bb 1f       	adc	r27, r27
    322a:	88 0f       	add	r24, r24
    322c:	99 1f       	adc	r25, r25
    322e:	aa 1f       	adc	r26, r26
    3230:	bb 1f       	adc	r27, r27
    3232:	ac 01       	movw	r20, r24
    3234:	bd 01       	movw	r22, r26
    3236:	bb 23       	and	r27, r27
    3238:	24 f4       	brge	.+8      	; 0x3242 <CellCountExpectedSet+0xa0>
    323a:	41 50       	subi	r20, 0x01	; 1
    323c:	5c 4f       	sbci	r21, 0xFC	; 252
    323e:	6f 4f       	sbci	r22, 0xFF	; 255
    3240:	7f 4f       	sbci	r23, 0xFF	; 255
    3242:	03 2e       	mov	r0, r19
    3244:	3a e0       	ldi	r19, 0x0A	; 10
    3246:	75 95       	asr	r23
    3248:	67 95       	ror	r22
    324a:	57 95       	ror	r21
    324c:	47 95       	ror	r20
    324e:	3a 95       	dec	r19
    3250:	d1 f7       	brne	.-12     	; 0x3246 <CellCountExpectedSet+0xa4>
    3252:	30 2d       	mov	r19, r0
    3254:	50 93 36 01 	sts	0x0136, r21	; 0x800136 <sg_sFrame+0x26>
    3258:	40 93 35 01 	sts	0x0135, r20	; 0x800135 <sg_sFrame+0x25>
    325c:	ff 90       	pop	r15
    325e:	ef 90       	pop	r14
    3260:	df 90       	pop	r13
    3262:	cf 90       	pop	r12
    3264:	08 95       	ret

Disassembly of section .text.SendModuleControllerStatus:

00004dfc <SendModuleControllerStatus>:
    4dfc:	81 e0       	ldi	r24, 0x01	; 1
    4dfe:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <sg_bSendModuleControllerStatus>
    4e02:	10 92 66 09 	sts	0x0966, r1	; 0x800966 <sg_u8ControllerStatusMsgCount>
    4e06:	80 93 6b 09 	sts	0x096B, r24	; 0x80096b <sg_bIgnoreStatusRequests>
    4e0a:	08 95       	ret

Disassembly of section .text.ModuleControllerStateSet:

00004e96 <ModuleControllerStateSet>:
    4e96:	84 30       	cpi	r24, 0x04	; 4
    4e98:	10 f4       	brcc	.+4      	; 0x4e9e <ModuleControllerStateSet+0x8>
    4e9a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <sg_eModuleControllerStateTarget>
    4e9e:	08 95       	ret

Disassembly of section .text.ModuleControllerStateSetMax:

00004d4c <ModuleControllerStateSetMax>:
    4d4c:	84 30       	cpi	r24, 0x04	; 4
    4d4e:	40 f4       	brcc	.+16     	; 0x4d60 <ModuleControllerStateSetMax+0x14>
    4d50:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <sg_eModuleControllerStateMax>
    4d54:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    4d58:	89 17       	cp	r24, r25
    4d5a:	10 f4       	brcc	.+4      	; 0x4d60 <ModuleControllerStateSetMax+0x14>
    4d5c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <sg_eModuleControllerStateTarget>
    4d60:	08 95       	ret

Disassembly of section .text.Check5VLoss:

00004cee <Check5VLoss>:
    4cee:	86 fd       	sbrc	r24, 6
    4cf0:	09 c0       	rjmp	.+18     	; 0x4d04 <Check5VLoss+0x16>
    4cf2:	88 b1       	in	r24, 0x08	; 8
    4cf4:	8f 7e       	andi	r24, 0xEF	; 239
    4cf6:	88 b9       	out	0x08, r24	; 8
    4cf8:	8e b1       	in	r24, 0x0e	; 14
    4cfa:	8d 7f       	andi	r24, 0xFD	; 253
    4cfc:	8e b9       	out	0x0e, r24	; 14
    4cfe:	80 e0       	ldi	r24, 0x00	; 0
    4d00:	0e 94 4b 27 	call	0x4e96	; 0x4e96 <ModuleControllerStateSet>
    4d04:	08 95       	ret

Disassembly of section .text.CellDataConvertVoltage:

00003fd4 <CellDataConvertVoltage>:
    3fd4:	fb 01       	movw	r30, r22
    3fd6:	93 70       	andi	r25, 0x03	; 3
    3fd8:	9c 01       	movw	r18, r24
    3fda:	20 5f       	subi	r18, 0xF0	; 240
    3fdc:	31 40       	sbci	r19, 0x01	; 1
    3fde:	21 31       	cpi	r18, 0x11	; 17
    3fe0:	32 40       	sbci	r19, 0x02	; 2
    3fe2:	00 f5       	brcc	.+64     	; 0x4024 <CellDataConvertVoltage+0x50>
    3fe4:	dc 01       	movw	r26, r24
    3fe6:	2b ed       	ldi	r18, 0xDB	; 219
    3fe8:	36 ea       	ldi	r19, 0xA6	; 166
    3fea:	43 e2       	ldi	r20, 0x23	; 35
    3fec:	50 e0       	ldi	r21, 0x00	; 0
    3fee:	0e 94 b1 26 	call	0x4d62	; 0x4d62 <__muluhisi3>
    3ff2:	dc 01       	movw	r26, r24
    3ff4:	cb 01       	movw	r24, r22
    3ff6:	07 2e       	mov	r0, r23
    3ff8:	7a e0       	ldi	r23, 0x0A	; 10
    3ffa:	b6 95       	lsr	r27
    3ffc:	a7 95       	ror	r26
    3ffe:	97 95       	ror	r25
    4000:	87 95       	ror	r24
    4002:	7a 95       	dec	r23
    4004:	d1 f7       	brne	.-12     	; 0x3ffa <CellDataConvertVoltage+0x26>
    4006:	70 2d       	mov	r23, r0
    4008:	9f 5f       	subi	r25, 0xFF	; 255
    400a:	af 4f       	sbci	r26, 0xFF	; 255
    400c:	bf 4f       	sbci	r27, 0xFF	; 255
    400e:	07 2e       	mov	r0, r23
    4010:	79 e0       	ldi	r23, 0x09	; 9
    4012:	b6 95       	lsr	r27
    4014:	a7 95       	ror	r26
    4016:	97 95       	ror	r25
    4018:	87 95       	ror	r24
    401a:	7a 95       	dec	r23
    401c:	d1 f7       	brne	.-12     	; 0x4012 <CellDataConvertVoltage+0x3e>
    401e:	70 2d       	mov	r23, r0
    4020:	21 e0       	ldi	r18, 0x01	; 1
    4022:	03 c0       	rjmp	.+6      	; 0x402a <CellDataConvertVoltage+0x56>
    4024:	20 e0       	ldi	r18, 0x00	; 0
    4026:	80 e0       	ldi	r24, 0x00	; 0
    4028:	90 e0       	ldi	r25, 0x00	; 0
    402a:	30 97       	sbiw	r30, 0x00	; 0
    402c:	11 f0       	breq	.+4      	; 0x4032 <CellDataConvertVoltage+0x5e>
    402e:	91 83       	std	Z+1, r25	; 0x01
    4030:	80 83       	st	Z, r24
    4032:	82 2f       	mov	r24, r18
    4034:	08 95       	ret

Disassembly of section .text.CellDataConvertTemperature:

00003d52 <CellDataConvertTemperature>:
    3d52:	8f 3f       	cpi	r24, 0xFF	; 255
    3d54:	2f ef       	ldi	r18, 0xFF	; 255
    3d56:	92 07       	cpc	r25, r18
    3d58:	61 f1       	breq	.+88     	; 0x3db2 <CellDataConvertTemperature+0x60>
    3d5a:	28 2f       	mov	r18, r24
    3d5c:	2f 70       	andi	r18, 0x0F	; 15
    3d5e:	94 ff       	sbrs	r25, 4
    3d60:	02 c0       	rjmp	.+4      	; 0x3d66 <CellDataConvertTemperature+0x14>
    3d62:	90 6f       	ori	r25, 0xF0	; 240
    3d64:	01 c0       	rjmp	.+2      	; 0x3d68 <CellDataConvertTemperature+0x16>
    3d66:	9f 77       	andi	r25, 0x7F	; 127
    3d68:	95 95       	asr	r25
    3d6a:	87 95       	ror	r24
    3d6c:	95 95       	asr	r25
    3d6e:	87 95       	ror	r24
    3d70:	95 95       	asr	r25
    3d72:	87 95       	ror	r24
    3d74:	95 95       	asr	r25
    3d76:	87 95       	ror	r24
    3d78:	ac 01       	movw	r20, r24
    3d7a:	4c 5e       	subi	r20, 0xEC	; 236
    3d7c:	5f 4f       	sbci	r21, 0xFF	; 255
    3d7e:	4d 38       	cpi	r20, 0x8D	; 141
    3d80:	51 05       	cpc	r21, r1
    3d82:	c8 f4       	brcc	.+50     	; 0x3db6 <CellDataConvertTemperature+0x64>
    3d84:	34 e6       	ldi	r19, 0x64	; 100
    3d86:	38 9f       	mul	r19, r24
    3d88:	d0 01       	movw	r26, r0
    3d8a:	39 9f       	mul	r19, r25
    3d8c:	b0 0d       	add	r27, r0
    3d8e:	11 24       	eor	r1, r1
    3d90:	30 e0       	ldi	r19, 0x00	; 0
    3d92:	40 e0       	ldi	r20, 0x00	; 0
    3d94:	2e 57       	subi	r18, 0x7E	; 126
    3d96:	3b 4f       	sbci	r19, 0xFB	; 251
    3d98:	4f 4f       	sbci	r20, 0xFF	; 255
    3d9a:	f9 01       	movw	r30, r18
    3d9c:	84 91       	lpm	r24, Z
    3d9e:	47 fd       	sbrc	r20, 7
    3da0:	80 81       	ld	r24, Z
    3da2:	fd 01       	movw	r30, r26
    3da4:	e8 0f       	add	r30, r24
    3da6:	f1 1d       	adc	r31, r1
    3da8:	cf 01       	movw	r24, r30
    3daa:	81 56       	subi	r24, 0x61	; 97
    3dac:	9a 4e       	sbci	r25, 0xEA	; 234
    3dae:	21 e0       	ldi	r18, 0x01	; 1
    3db0:	05 c0       	rjmp	.+10     	; 0x3dbc <CellDataConvertTemperature+0x6a>
    3db2:	20 e0       	ldi	r18, 0x00	; 0
    3db4:	03 c0       	rjmp	.+6      	; 0x3dbc <CellDataConvertTemperature+0x6a>
    3db6:	8f ef       	ldi	r24, 0xFF	; 255
    3db8:	9f ef       	ldi	r25, 0xFF	; 255
    3dba:	20 e0       	ldi	r18, 0x00	; 0
    3dbc:	61 15       	cp	r22, r1
    3dbe:	71 05       	cpc	r23, r1
    3dc0:	19 f0       	breq	.+6      	; 0x3dc8 <CellDataConvertTemperature+0x76>
    3dc2:	fb 01       	movw	r30, r22
    3dc4:	91 83       	std	Z+1, r25	; 0x01
    3dc6:	80 83       	st	Z, r24
    3dc8:	82 2f       	mov	r24, r18
    3dca:	08 95       	ret

Disassembly of section .text.CellDataConvert:

000048a2 <CellDataConvert>:
    48a2:	0f 93       	push	r16
    48a4:	1f 93       	push	r17
    48a6:	cf 93       	push	r28
    48a8:	df 93       	push	r29
    48aa:	ec 01       	movw	r28, r24
    48ac:	8a 01       	movw	r16, r20
    48ae:	88 81       	ld	r24, Y
    48b0:	99 81       	ldd	r25, Y+1	; 0x01
    48b2:	0e 94 ea 1f 	call	0x3fd4	; 0x3fd4 <CellDataConvertVoltage>
    48b6:	b8 01       	movw	r22, r16
    48b8:	8a 81       	ldd	r24, Y+2	; 0x02
    48ba:	9b 81       	ldd	r25, Y+3	; 0x03
    48bc:	0e 94 a9 1e 	call	0x3d52	; 0x3d52 <CellDataConvertTemperature>
    48c0:	df 91       	pop	r29
    48c2:	cf 91       	pop	r28
    48c4:	1f 91       	pop	r17
    48c6:	0f 91       	pop	r16
    48c8:	08 95       	ret

Disassembly of section .text.ModuleCurrentConvertReadings:

000027ec <ModuleCurrentConvertReadings>:
    27ec:	a0 91 59 01 	lds	r26, 0x0159	; 0x800159 <sg_sFrame+0x49>
    27f0:	b0 91 5a 01 	lds	r27, 0x015A	; 0x80015a <sg_sFrame+0x4a>
    27f4:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <sg_sFrame+0x4c>
    27f8:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <sg_sFrame+0x4d>
    27fc:	e0 91 6e 09 	lds	r30, 0x096E	; 0x80096e <sg_u8CurrentBufferIndex>
    2800:	ef 3f       	cpi	r30, 0xFF	; 255
    2802:	81 f4       	brne	.+32     	; 0x2824 <ModuleCurrentConvertReadings+0x38>
    2804:	07 c0       	rjmp	.+14     	; 0x2814 <ModuleCurrentConvertReadings+0x28>
    2806:	f0 e0       	ldi	r31, 0x00	; 0
    2808:	ee 0f       	add	r30, r30
    280a:	ff 1f       	adc	r31, r31
    280c:	e3 5e       	subi	r30, 0xE3	; 227
    280e:	f6 4f       	sbci	r31, 0xF6	; 246
    2810:	91 83       	std	Z+1, r25	; 0x01
    2812:	80 83       	st	Z, r24
    2814:	e0 91 6e 09 	lds	r30, 0x096E	; 0x80096e <sg_u8CurrentBufferIndex>
    2818:	ef 5f       	subi	r30, 0xFF	; 255
    281a:	e0 93 6e 09 	sts	0x096E, r30	; 0x80096e <sg_u8CurrentBufferIndex>
    281e:	e8 30       	cpi	r30, 0x08	; 8
    2820:	90 f3       	brcs	.-28     	; 0x2806 <ModuleCurrentConvertReadings+0x1a>
    2822:	0f c0       	rjmp	.+30     	; 0x2842 <ModuleCurrentConvertReadings+0x56>
    2824:	21 e0       	ldi	r18, 0x01	; 1
    2826:	2e 0f       	add	r18, r30
    2828:	20 93 6e 09 	sts	0x096E, r18	; 0x80096e <sg_u8CurrentBufferIndex>
    282c:	f0 e0       	ldi	r31, 0x00	; 0
    282e:	ee 0f       	add	r30, r30
    2830:	ff 1f       	adc	r31, r31
    2832:	e3 5e       	subi	r30, 0xE3	; 227
    2834:	f6 4f       	sbci	r31, 0xF6	; 246
    2836:	91 83       	std	Z+1, r25	; 0x01
    2838:	80 83       	st	Z, r24
    283a:	28 30       	cpi	r18, 0x08	; 8
    283c:	10 f0       	brcs	.+4      	; 0x2842 <ModuleCurrentConvertReadings+0x56>
    283e:	10 92 6e 09 	sts	0x096E, r1	; 0x80096e <sg_u8CurrentBufferIndex>
    2842:	80 e0       	ldi	r24, 0x00	; 0
    2844:	20 e0       	ldi	r18, 0x00	; 0
    2846:	30 e0       	ldi	r19, 0x00	; 0
    2848:	0b c0       	rjmp	.+22     	; 0x2860 <ModuleCurrentConvertReadings+0x74>
    284a:	e8 2f       	mov	r30, r24
    284c:	f0 e0       	ldi	r31, 0x00	; 0
    284e:	ee 0f       	add	r30, r30
    2850:	ff 1f       	adc	r31, r31
    2852:	e3 5e       	subi	r30, 0xE3	; 227
    2854:	f6 4f       	sbci	r31, 0xF6	; 246
    2856:	40 81       	ld	r20, Z
    2858:	51 81       	ldd	r21, Z+1	; 0x01
    285a:	24 0f       	add	r18, r20
    285c:	35 1f       	adc	r19, r21
    285e:	8f 5f       	subi	r24, 0xFF	; 255
    2860:	88 30       	cpi	r24, 0x08	; 8
    2862:	98 f3       	brcs	.-26     	; 0x284a <ModuleCurrentConvertReadings+0x5e>
    2864:	c9 01       	movw	r24, r18
    2866:	99 23       	and	r25, r25
    2868:	0c f4       	brge	.+2      	; 0x286c <ModuleCurrentConvertReadings+0x80>
    286a:	07 96       	adiw	r24, 0x07	; 7
    286c:	95 95       	asr	r25
    286e:	87 95       	ror	r24
    2870:	95 95       	asr	r25
    2872:	87 95       	ror	r24
    2874:	95 95       	asr	r25
    2876:	87 95       	ror	r24
    2878:	a8 1b       	sub	r26, r24
    287a:	b9 0b       	sbc	r27, r25
    287c:	20 e8       	ldi	r18, 0x80	; 128
    287e:	3c e0       	ldi	r19, 0x0C	; 12
    2880:	0e 94 33 27 	call	0x4e66	; 0x4e66 <__usmulhisi3>
    2884:	ab 01       	movw	r20, r22
    2886:	bc 01       	movw	r22, r24
    2888:	5f 5f       	subi	r21, 0xFF	; 255
    288a:	6f 4f       	sbci	r22, 0xFF	; 255
    288c:	7f 4f       	sbci	r23, 0xFF	; 255
    288e:	db 01       	movw	r26, r22
    2890:	ca 01       	movw	r24, r20
    2892:	77 23       	and	r23, r23
    2894:	24 f4       	brge	.+8      	; 0x289e <ModuleCurrentConvertReadings+0xb2>
    2896:	81 50       	subi	r24, 0x01	; 1
    2898:	9e 4f       	sbci	r25, 0xFE	; 254
    289a:	af 4f       	sbci	r26, 0xFF	; 255
    289c:	bf 4f       	sbci	r27, 0xFF	; 255
    289e:	07 2e       	mov	r0, r23
    28a0:	79 e0       	ldi	r23, 0x09	; 9
    28a2:	b5 95       	asr	r27
    28a4:	a7 95       	ror	r26
    28a6:	97 95       	ror	r25
    28a8:	87 95       	ror	r24
    28aa:	7a 95       	dec	r23
    28ac:	d1 f7       	brne	.-12     	; 0x28a2 <ModuleCurrentConvertReadings+0xb6>
    28ae:	70 2d       	mov	r23, r0
    28b0:	90 58       	subi	r25, 0x80	; 128
    28b2:	af 4f       	sbci	r26, 0xFF	; 255
    28b4:	bf 4f       	sbci	r27, 0xFF	; 255
    28b6:	e0 e1       	ldi	r30, 0x10	; 16
    28b8:	f1 e0       	ldi	r31, 0x01	; 1
    28ba:	90 ab       	std	Z+48, r25	; 0x30
    28bc:	87 a7       	std	Z+47, r24	; 0x2f
    28be:	27 a5       	ldd	r18, Z+47	; 0x2f
    28c0:	30 a9       	ldd	r19, Z+48	; 0x30
    28c2:	86 89       	ldd	r24, Z+22	; 0x16
    28c4:	97 89       	ldd	r25, Z+23	; 0x17
    28c6:	82 17       	cp	r24, r18
    28c8:	93 07       	cpc	r25, r19
    28ca:	20 f4       	brcc	.+8      	; 0x28d4 <ModuleCurrentConvertReadings+0xe8>
    28cc:	87 a5       	ldd	r24, Z+47	; 0x2f
    28ce:	90 a9       	ldd	r25, Z+48	; 0x30
    28d0:	97 8b       	std	Z+23, r25	; 0x17
    28d2:	86 8b       	std	Z+22, r24	; 0x16
    28d4:	e0 e1       	ldi	r30, 0x10	; 16
    28d6:	f1 e0       	ldi	r31, 0x01	; 1
    28d8:	27 a5       	ldd	r18, Z+47	; 0x2f
    28da:	30 a9       	ldd	r19, Z+48	; 0x30
    28dc:	80 8d       	ldd	r24, Z+24	; 0x18
    28de:	91 8d       	ldd	r25, Z+25	; 0x19
    28e0:	28 17       	cp	r18, r24
    28e2:	39 07       	cpc	r19, r25
    28e4:	20 f4       	brcc	.+8      	; 0x28ee <ModuleCurrentConvertReadings+0x102>
    28e6:	87 a5       	ldd	r24, Z+47	; 0x2f
    28e8:	90 a9       	ldd	r25, Z+48	; 0x30
    28ea:	91 8f       	std	Z+25, r25	; 0x19
    28ec:	80 8f       	std	Z+24, r24	; 0x18
    28ee:	08 95       	ret

Disassembly of section .text.__vector_1:

0000498e <__vector_1>:
    498e:	1f 92       	push	r1
    4990:	0f 92       	push	r0
    4992:	0f b6       	in	r0, 0x3f	; 63
    4994:	0f 92       	push	r0
    4996:	11 24       	eor	r1, r1
    4998:	87 ec       	ldi	r24, 0xC7	; 199
    499a:	94 e2       	ldi	r25, 0x24	; 36
    499c:	80 93 64 09 	sts	0x0964, r24	; 0x800964 <sg_u8UnhandledInterruptVector>
    49a0:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    49a4:	80 93 63 09 	sts	0x0963, r24	; 0x800963 <sg_u8PCMSK0>
    49a8:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    49ac:	80 93 62 09 	sts	0x0962, r24	; 0x800962 <sg_u8PCMSK1>
    49b0:	ff cf       	rjmp	.-2      	; 0x49b0 <__vector_1+0x22>

Disassembly of section .text.__vector_2:

000049b2 <__vector_2>:
    49b2:	1f 92       	push	r1
    49b4:	0f 92       	push	r0
    49b6:	0f b6       	in	r0, 0x3f	; 63
    49b8:	0f 92       	push	r0
    49ba:	11 24       	eor	r1, r1
    49bc:	89 ed       	ldi	r24, 0xD9	; 217
    49be:	94 e2       	ldi	r25, 0x24	; 36
    49c0:	80 93 64 09 	sts	0x0964, r24	; 0x800964 <sg_u8UnhandledInterruptVector>
    49c4:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    49c8:	80 93 63 09 	sts	0x0963, r24	; 0x800963 <sg_u8PCMSK0>
    49cc:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    49d0:	80 93 62 09 	sts	0x0962, r24	; 0x800962 <sg_u8PCMSK1>
    49d4:	ff cf       	rjmp	.-2      	; 0x49d4 <__vector_2+0x22>

Disassembly of section .text.__vector_3:

000049d6 <__vector_3>:
    49d6:	1f 92       	push	r1
    49d8:	0f 92       	push	r0
    49da:	0f b6       	in	r0, 0x3f	; 63
    49dc:	0f 92       	push	r0
    49de:	11 24       	eor	r1, r1
    49e0:	8b ee       	ldi	r24, 0xEB	; 235
    49e2:	94 e2       	ldi	r25, 0x24	; 36
    49e4:	80 93 64 09 	sts	0x0964, r24	; 0x800964 <sg_u8UnhandledInterruptVector>
    49e8:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    49ec:	80 93 63 09 	sts	0x0963, r24	; 0x800963 <sg_u8PCMSK0>
    49f0:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    49f4:	80 93 62 09 	sts	0x0962, r24	; 0x800962 <sg_u8PCMSK1>
    49f8:	ff cf       	rjmp	.-2      	; 0x49f8 <__vector_3+0x22>

Disassembly of section .text.__vector_4:

000049fa <__vector_4>:
    49fa:	1f 92       	push	r1
    49fc:	0f 92       	push	r0
    49fe:	0f b6       	in	r0, 0x3f	; 63
    4a00:	0f 92       	push	r0
    4a02:	11 24       	eor	r1, r1
    4a04:	8d ef       	ldi	r24, 0xFD	; 253
    4a06:	94 e2       	ldi	r25, 0x24	; 36
    4a08:	80 93 64 09 	sts	0x0964, r24	; 0x800964 <sg_u8UnhandledInterruptVector>
    4a0c:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4a10:	80 93 63 09 	sts	0x0963, r24	; 0x800963 <sg_u8PCMSK0>
    4a14:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4a18:	80 93 62 09 	sts	0x0962, r24	; 0x800962 <sg_u8PCMSK1>
    4a1c:	ff cf       	rjmp	.-2      	; 0x4a1c <__vector_4+0x22>

Disassembly of section .text.__vector_5:

00004a1e <__vector_5>:
    4a1e:	1f 92       	push	r1
    4a20:	0f 92       	push	r0
    4a22:	0f b6       	in	r0, 0x3f	; 63
    4a24:	0f 92       	push	r0
    4a26:	11 24       	eor	r1, r1
    4a28:	8f e0       	ldi	r24, 0x0F	; 15
    4a2a:	95 e2       	ldi	r25, 0x25	; 37
    4a2c:	80 93 64 09 	sts	0x0964, r24	; 0x800964 <sg_u8UnhandledInterruptVector>
    4a30:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4a34:	80 93 63 09 	sts	0x0963, r24	; 0x800963 <sg_u8PCMSK0>
    4a38:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4a3c:	80 93 62 09 	sts	0x0962, r24	; 0x800962 <sg_u8PCMSK1>
    4a40:	ff cf       	rjmp	.-2      	; 0x4a40 <__vector_5+0x22>

Disassembly of section .text.__vector_6:

00004a42 <__vector_6>:
    4a42:	1f 92       	push	r1
    4a44:	0f 92       	push	r0
    4a46:	0f b6       	in	r0, 0x3f	; 63
    4a48:	0f 92       	push	r0
    4a4a:	11 24       	eor	r1, r1
    4a4c:	81 e2       	ldi	r24, 0x21	; 33
    4a4e:	95 e2       	ldi	r25, 0x25	; 37
    4a50:	80 93 64 09 	sts	0x0964, r24	; 0x800964 <sg_u8UnhandledInterruptVector>
    4a54:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4a58:	80 93 63 09 	sts	0x0963, r24	; 0x800963 <sg_u8PCMSK0>
    4a5c:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4a60:	80 93 62 09 	sts	0x0962, r24	; 0x800962 <sg_u8PCMSK1>
    4a64:	ff cf       	rjmp	.-2      	; 0x4a64 <__vector_6+0x22>

Disassembly of section .text.__vector_22:

00004a66 <__vector_22>:
    4a66:	1f 92       	push	r1
    4a68:	0f 92       	push	r0
    4a6a:	0f b6       	in	r0, 0x3f	; 63
    4a6c:	0f 92       	push	r0
    4a6e:	11 24       	eor	r1, r1
    4a70:	83 e3       	ldi	r24, 0x33	; 51
    4a72:	95 e2       	ldi	r25, 0x25	; 37
    4a74:	80 93 64 09 	sts	0x0964, r24	; 0x800964 <sg_u8UnhandledInterruptVector>
    4a78:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4a7c:	80 93 63 09 	sts	0x0963, r24	; 0x800963 <sg_u8PCMSK0>
    4a80:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4a84:	80 93 62 09 	sts	0x0962, r24	; 0x800962 <sg_u8PCMSK1>
    4a88:	ff cf       	rjmp	.-2      	; 0x4a88 <__vector_22+0x22>

Disassembly of section .text.__vector_9:

00004a8a <__vector_9>:
    4a8a:	1f 92       	push	r1
    4a8c:	0f 92       	push	r0
    4a8e:	0f b6       	in	r0, 0x3f	; 63
    4a90:	0f 92       	push	r0
    4a92:	11 24       	eor	r1, r1
    4a94:	85 e4       	ldi	r24, 0x45	; 69
    4a96:	95 e2       	ldi	r25, 0x25	; 37
    4a98:	80 93 64 09 	sts	0x0964, r24	; 0x800964 <sg_u8UnhandledInterruptVector>
    4a9c:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4aa0:	80 93 63 09 	sts	0x0963, r24	; 0x800963 <sg_u8PCMSK0>
    4aa4:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4aa8:	80 93 62 09 	sts	0x0962, r24	; 0x800962 <sg_u8PCMSK1>
    4aac:	ff cf       	rjmp	.-2      	; 0x4aac <__vector_9+0x22>

Disassembly of section .text.__vector_11:

00004aae <__vector_11>:
    4aae:	1f 92       	push	r1
    4ab0:	0f 92       	push	r0
    4ab2:	0f b6       	in	r0, 0x3f	; 63
    4ab4:	0f 92       	push	r0
    4ab6:	11 24       	eor	r1, r1
    4ab8:	87 e5       	ldi	r24, 0x57	; 87
    4aba:	95 e2       	ldi	r25, 0x25	; 37
    4abc:	80 93 64 09 	sts	0x0964, r24	; 0x800964 <sg_u8UnhandledInterruptVector>
    4ac0:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4ac4:	80 93 63 09 	sts	0x0963, r24	; 0x800963 <sg_u8PCMSK0>
    4ac8:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4acc:	80 93 62 09 	sts	0x0962, r24	; 0x800962 <sg_u8PCMSK1>
    4ad0:	ff cf       	rjmp	.-2      	; 0x4ad0 <__vector_11+0x22>

Disassembly of section .text.__vector_13:

00004ad2 <__vector_13>:
    4ad2:	1f 92       	push	r1
    4ad4:	0f 92       	push	r0
    4ad6:	0f b6       	in	r0, 0x3f	; 63
    4ad8:	0f 92       	push	r0
    4ada:	11 24       	eor	r1, r1
    4adc:	89 e6       	ldi	r24, 0x69	; 105
    4ade:	95 e2       	ldi	r25, 0x25	; 37
    4ae0:	80 93 64 09 	sts	0x0964, r24	; 0x800964 <sg_u8UnhandledInterruptVector>
    4ae4:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4ae8:	80 93 63 09 	sts	0x0963, r24	; 0x800963 <sg_u8PCMSK0>
    4aec:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4af0:	80 93 62 09 	sts	0x0962, r24	; 0x800962 <sg_u8PCMSK1>
    4af4:	ff cf       	rjmp	.-2      	; 0x4af4 <__vector_13+0x22>

Disassembly of section .text.__vector_14:

00004af6 <__vector_14>:
    4af6:	1f 92       	push	r1
    4af8:	0f 92       	push	r0
    4afa:	0f b6       	in	r0, 0x3f	; 63
    4afc:	0f 92       	push	r0
    4afe:	11 24       	eor	r1, r1
    4b00:	8b e7       	ldi	r24, 0x7B	; 123
    4b02:	95 e2       	ldi	r25, 0x25	; 37
    4b04:	80 93 64 09 	sts	0x0964, r24	; 0x800964 <sg_u8UnhandledInterruptVector>
    4b08:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4b0c:	80 93 63 09 	sts	0x0963, r24	; 0x800963 <sg_u8PCMSK0>
    4b10:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4b14:	80 93 62 09 	sts	0x0962, r24	; 0x800962 <sg_u8PCMSK1>
    4b18:	ff cf       	rjmp	.-2      	; 0x4b18 <__vector_14+0x22>

Disassembly of section .text.__vector_17:

00004b1a <__vector_17>:
    4b1a:	1f 92       	push	r1
    4b1c:	0f 92       	push	r0
    4b1e:	0f b6       	in	r0, 0x3f	; 63
    4b20:	0f 92       	push	r0
    4b22:	11 24       	eor	r1, r1
    4b24:	8d e8       	ldi	r24, 0x8D	; 141
    4b26:	95 e2       	ldi	r25, 0x25	; 37
    4b28:	80 93 64 09 	sts	0x0964, r24	; 0x800964 <sg_u8UnhandledInterruptVector>
    4b2c:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4b30:	80 93 63 09 	sts	0x0963, r24	; 0x800963 <sg_u8PCMSK0>
    4b34:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4b38:	80 93 62 09 	sts	0x0962, r24	; 0x800962 <sg_u8PCMSK1>
    4b3c:	ff cf       	rjmp	.-2      	; 0x4b3c <__vector_17+0x22>

Disassembly of section .text.__vector_19:

00004b3e <__vector_19>:
    4b3e:	1f 92       	push	r1
    4b40:	0f 92       	push	r0
    4b42:	0f b6       	in	r0, 0x3f	; 63
    4b44:	0f 92       	push	r0
    4b46:	11 24       	eor	r1, r1
    4b48:	8f e9       	ldi	r24, 0x9F	; 159
    4b4a:	95 e2       	ldi	r25, 0x25	; 37
    4b4c:	80 93 64 09 	sts	0x0964, r24	; 0x800964 <sg_u8UnhandledInterruptVector>
    4b50:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4b54:	80 93 63 09 	sts	0x0963, r24	; 0x800963 <sg_u8PCMSK0>
    4b58:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4b5c:	80 93 62 09 	sts	0x0962, r24	; 0x800962 <sg_u8PCMSK1>
    4b60:	ff cf       	rjmp	.-2      	; 0x4b60 <__vector_19+0x22>

Disassembly of section .text.__vector_21:

00004b62 <__vector_21>:
    4b62:	1f 92       	push	r1
    4b64:	0f 92       	push	r0
    4b66:	0f b6       	in	r0, 0x3f	; 63
    4b68:	0f 92       	push	r0
    4b6a:	11 24       	eor	r1, r1
    4b6c:	81 eb       	ldi	r24, 0xB1	; 177
    4b6e:	95 e2       	ldi	r25, 0x25	; 37
    4b70:	80 93 64 09 	sts	0x0964, r24	; 0x800964 <sg_u8UnhandledInterruptVector>
    4b74:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4b78:	80 93 63 09 	sts	0x0963, r24	; 0x800963 <sg_u8PCMSK0>
    4b7c:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4b80:	80 93 62 09 	sts	0x0962, r24	; 0x800962 <sg_u8PCMSK1>
    4b84:	ff cf       	rjmp	.-2      	; 0x4b84 <__vector_21+0x22>

Disassembly of section .text.__vector_25:

00004b86 <__vector_25>:
    4b86:	1f 92       	push	r1
    4b88:	0f 92       	push	r0
    4b8a:	0f b6       	in	r0, 0x3f	; 63
    4b8c:	0f 92       	push	r0
    4b8e:	11 24       	eor	r1, r1
    4b90:	83 ec       	ldi	r24, 0xC3	; 195
    4b92:	95 e2       	ldi	r25, 0x25	; 37
    4b94:	80 93 64 09 	sts	0x0964, r24	; 0x800964 <sg_u8UnhandledInterruptVector>
    4b98:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4b9c:	80 93 63 09 	sts	0x0963, r24	; 0x800963 <sg_u8PCMSK0>
    4ba0:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4ba4:	80 93 62 09 	sts	0x0962, r24	; 0x800962 <sg_u8PCMSK1>
    4ba8:	ff cf       	rjmp	.-2      	; 0x4ba8 <__vector_25+0x22>

Disassembly of section .text.__vector_26:

00004baa <__vector_26>:
    4baa:	1f 92       	push	r1
    4bac:	0f 92       	push	r0
    4bae:	0f b6       	in	r0, 0x3f	; 63
    4bb0:	0f 92       	push	r0
    4bb2:	11 24       	eor	r1, r1
    4bb4:	85 ed       	ldi	r24, 0xD5	; 213
    4bb6:	95 e2       	ldi	r25, 0x25	; 37
    4bb8:	80 93 64 09 	sts	0x0964, r24	; 0x800964 <sg_u8UnhandledInterruptVector>
    4bbc:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4bc0:	80 93 63 09 	sts	0x0963, r24	; 0x800963 <sg_u8PCMSK0>
    4bc4:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4bc8:	80 93 62 09 	sts	0x0962, r24	; 0x800962 <sg_u8PCMSK1>
    4bcc:	ff cf       	rjmp	.-2      	; 0x4bcc <__vector_26+0x22>

Disassembly of section .text.__vector_29:

00004bce <__vector_29>:
    4bce:	1f 92       	push	r1
    4bd0:	0f 92       	push	r0
    4bd2:	0f b6       	in	r0, 0x3f	; 63
    4bd4:	0f 92       	push	r0
    4bd6:	11 24       	eor	r1, r1
    4bd8:	87 ee       	ldi	r24, 0xE7	; 231
    4bda:	95 e2       	ldi	r25, 0x25	; 37
    4bdc:	80 93 64 09 	sts	0x0964, r24	; 0x800964 <sg_u8UnhandledInterruptVector>
    4be0:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4be4:	80 93 63 09 	sts	0x0963, r24	; 0x800963 <sg_u8PCMSK0>
    4be8:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4bec:	80 93 62 09 	sts	0x0962, r24	; 0x800962 <sg_u8PCMSK1>
    4bf0:	ff cf       	rjmp	.-2      	; 0x4bf0 <__vector_29+0x22>

Disassembly of section .text.__vector_30:

00004bf2 <__vector_30>:
    4bf2:	1f 92       	push	r1
    4bf4:	0f 92       	push	r0
    4bf6:	0f b6       	in	r0, 0x3f	; 63
    4bf8:	0f 92       	push	r0
    4bfa:	11 24       	eor	r1, r1
    4bfc:	89 ef       	ldi	r24, 0xF9	; 249
    4bfe:	95 e2       	ldi	r25, 0x25	; 37
    4c00:	80 93 64 09 	sts	0x0964, r24	; 0x800964 <sg_u8UnhandledInterruptVector>
    4c04:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4c08:	80 93 63 09 	sts	0x0963, r24	; 0x800963 <sg_u8PCMSK0>
    4c0c:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4c10:	80 93 62 09 	sts	0x0962, r24	; 0x800962 <sg_u8PCMSK1>
    4c14:	ff cf       	rjmp	.-2      	; 0x4c14 <__vector_30+0x22>

Disassembly of section .text.CurrentThresholdsGet:

00003726 <CurrentThresholdsGet>:
    3726:	0f 93       	push	r16
    3728:	1f 93       	push	r17
    372a:	cf 93       	push	r28
    372c:	df 93       	push	r29
    372e:	8c 01       	movw	r16, r24
    3730:	eb 01       	movw	r28, r22
    3732:	89 2b       	or	r24, r25
    3734:	f9 f0       	breq	.+62     	; 0x3774 <CurrentThresholdsGet+0x4e>
    3736:	87 e0       	ldi	r24, 0x07	; 7
    3738:	90 e0       	ldi	r25, 0x00	; 0
    373a:	0e 94 d1 26 	call	0x4da2	; 0x4da2 <EEPROMRead>
    373e:	90 e0       	ldi	r25, 0x00	; 0
    3740:	f8 01       	movw	r30, r16
    3742:	91 83       	std	Z+1, r25	; 0x01
    3744:	80 83       	st	Z, r24
    3746:	88 e0       	ldi	r24, 0x08	; 8
    3748:	90 e0       	ldi	r25, 0x00	; 0
    374a:	0e 94 d1 26 	call	0x4da2	; 0x4da2 <EEPROMRead>
    374e:	90 e0       	ldi	r25, 0x00	; 0
    3750:	98 2f       	mov	r25, r24
    3752:	88 27       	eor	r24, r24
    3754:	f8 01       	movw	r30, r16
    3756:	20 81       	ld	r18, Z
    3758:	31 81       	ldd	r19, Z+1	; 0x01
    375a:	82 2b       	or	r24, r18
    375c:	93 2b       	or	r25, r19
    375e:	91 83       	std	Z+1, r25	; 0x01
    3760:	80 83       	st	Z, r24
    3762:	01 97       	sbiw	r24, 0x01	; 1
    3764:	8e 3f       	cpi	r24, 0xFE	; 254
    3766:	9f 4f       	sbci	r25, 0xFF	; 255
    3768:	28 f0       	brcs	.+10     	; 0x3774 <CurrentThresholdsGet+0x4e>
    376a:	8c ec       	ldi	r24, 0xCC	; 204
    376c:	97 e7       	ldi	r25, 0x77	; 119
    376e:	f8 01       	movw	r30, r16
    3770:	91 83       	std	Z+1, r25	; 0x01
    3772:	80 83       	st	Z, r24
    3774:	20 97       	sbiw	r28, 0x00	; 0
    3776:	e1 f0       	breq	.+56     	; 0x37b0 <CurrentThresholdsGet+0x8a>
    3778:	85 e0       	ldi	r24, 0x05	; 5
    377a:	90 e0       	ldi	r25, 0x00	; 0
    377c:	0e 94 d1 26 	call	0x4da2	; 0x4da2 <EEPROMRead>
    3780:	90 e0       	ldi	r25, 0x00	; 0
    3782:	99 83       	std	Y+1, r25	; 0x01
    3784:	88 83       	st	Y, r24
    3786:	86 e0       	ldi	r24, 0x06	; 6
    3788:	90 e0       	ldi	r25, 0x00	; 0
    378a:	0e 94 d1 26 	call	0x4da2	; 0x4da2 <EEPROMRead>
    378e:	90 e0       	ldi	r25, 0x00	; 0
    3790:	98 2f       	mov	r25, r24
    3792:	88 27       	eor	r24, r24
    3794:	28 81       	ld	r18, Y
    3796:	39 81       	ldd	r19, Y+1	; 0x01
    3798:	82 2b       	or	r24, r18
    379a:	93 2b       	or	r25, r19
    379c:	99 83       	std	Y+1, r25	; 0x01
    379e:	88 83       	st	Y, r24
    37a0:	01 97       	sbiw	r24, 0x01	; 1
    37a2:	8e 3f       	cpi	r24, 0xFE	; 254
    37a4:	9f 4f       	sbci	r25, 0xFF	; 255
    37a6:	20 f0       	brcs	.+8      	; 0x37b0 <CurrentThresholdsGet+0x8a>
    37a8:	84 ef       	ldi	r24, 0xF4	; 244
    37aa:	91 e8       	ldi	r25, 0x81	; 129
    37ac:	99 83       	std	Y+1, r25	; 0x01
    37ae:	88 83       	st	Y, r24
    37b0:	df 91       	pop	r29
    37b2:	cf 91       	pop	r28
    37b4:	1f 91       	pop	r17
    37b6:	0f 91       	pop	r16
    37b8:	08 95       	ret

Disassembly of section .text.CANReceiveCallback:

000012fc <CANReceiveCallback>:
    12fc:	cf 92       	push	r12
    12fe:	df 92       	push	r13
    1300:	ef 92       	push	r14
    1302:	ff 92       	push	r15
    1304:	cf 93       	push	r28
    1306:	fb 01       	movw	r30, r22
    1308:	90 91 21 03 	lds	r25, 0x0321	; 0x800321 <sg_bModuleRegistered>
    130c:	10 92 67 09 	sts	0x0967, r1	; 0x800967 <sg_u8TicksSinceLastPackControllerMessage>
    1310:	82 31       	cpi	r24, 0x12	; 18
    1312:	29 f4       	brne	.+10     	; 0x131e <CANReceiveCallback+0x22>
    1314:	80 81       	ld	r24, Z
    1316:	8f 70       	andi	r24, 0x0F	; 15
    1318:	0e 94 a6 26 	call	0x4d4c	; 0x4d4c <ModuleControllerStateSetMax>
    131c:	32 c1       	rjmp	.+612    	; 0x1582 <CANReceiveCallback+0x286>
    131e:	8f 30       	cpi	r24, 0x0F	; 15
    1320:	a9 f4       	brne	.+42     	; 0x134c <CANReceiveCallback+0x50>
    1322:	8a ed       	ldi	r24, 0xDA	; 218
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	a0 e0       	ldi	r26, 0x00	; 0
    1328:	af 93       	push	r26
    132a:	9f 93       	push	r25
    132c:	8f 93       	push	r24
    132e:	0e 94 1e 27 	call	0x4e3c	; 0x4e3c <DebugOut>
    1332:	10 92 27 03 	sts	0x0327, r1	; 0x800327 <sg_u8ModuleRegistrationID>
    1336:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <sg_bModuleRegistered>
    133a:	10 92 6b 09 	sts	0x096B, r1	; 0x80096b <sg_bIgnoreStatusRequests>
    133e:	80 e0       	ldi	r24, 0x00	; 0
    1340:	0e 94 4b 27 	call	0x4e96	; 0x4e96 <ModuleControllerStateSet>
    1344:	0f 90       	pop	r0
    1346:	0f 90       	pop	r0
    1348:	0f 90       	pop	r0
    134a:	1b c1       	rjmp	.+566    	; 0x1582 <CANReceiveCallback+0x286>
    134c:	80 31       	cpi	r24, 0x10	; 16
    134e:	21 f4       	brne	.+8      	; 0x1358 <CANReceiveCallback+0x5c>
    1350:	80 e0       	ldi	r24, 0x00	; 0
    1352:	0e 94 4b 27 	call	0x4e96	; 0x4e96 <ModuleControllerStateSet>
    1356:	15 c1       	rjmp	.+554    	; 0x1582 <CANReceiveCallback+0x286>
    1358:	81 31       	cpi	r24, 0x11	; 17
    135a:	59 f4       	brne	.+22     	; 0x1372 <CANReceiveCallback+0x76>
    135c:	20 81       	ld	r18, Z
    135e:	31 81       	ldd	r19, Z+1	; 0x01
    1360:	42 81       	ldd	r20, Z+2	; 0x02
    1362:	53 81       	ldd	r21, Z+3	; 0x03
    1364:	64 81       	ldd	r22, Z+4	; 0x04
    1366:	75 81       	ldd	r23, Z+5	; 0x05
    1368:	86 81       	ldd	r24, Z+6	; 0x06
    136a:	97 81       	ldd	r25, Z+7	; 0x07
    136c:	0e 94 6e 18 	call	0x30dc	; 0x30dc <RTCSetTime>
    1370:	08 c1       	rjmp	.+528    	; 0x1582 <CANReceiveCallback+0x286>
    1372:	8d 30       	cpi	r24, 0x0D	; 13
    1374:	09 f0       	breq	.+2      	; 0x1378 <CANReceiveCallback+0x7c>
    1376:	4f c0       	rjmp	.+158    	; 0x1416 <CANReceiveCallback+0x11a>
    1378:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <sg_bModuleRegistered>
    137c:	81 11       	cpse	r24, r1
    137e:	2f c0       	rjmp	.+94     	; 0x13de <CANReceiveCallback+0xe2>
    1380:	80 91 6d 09 	lds	r24, 0x096D	; 0x80096d <sg_bAnnouncementPending>
    1384:	81 11       	cpse	r24, r1
    1386:	2b c0       	rjmp	.+86     	; 0x13de <CANReceiveCallback+0xe2>
    1388:	c0 90 1e 01 	lds	r12, 0x011E	; 0x80011e <sg_sFrame+0xe>
    138c:	d0 90 1f 01 	lds	r13, 0x011F	; 0x80011f <sg_sFrame+0xf>
    1390:	e0 90 20 01 	lds	r14, 0x0120	; 0x800120 <sg_sFrame+0x10>
    1394:	f0 90 21 01 	lds	r15, 0x0121	; 0x800121 <sg_sFrame+0x11>
    1398:	1f 92       	push	r1
    139a:	cf 92       	push	r12
    139c:	85 e0       	ldi	r24, 0x05	; 5
    139e:	91 e0       	ldi	r25, 0x01	; 1
    13a0:	a0 e0       	ldi	r26, 0x00	; 0
    13a2:	af 93       	push	r26
    13a4:	9f 93       	push	r25
    13a6:	8f 93       	push	r24
    13a8:	0e 94 1e 27 	call	0x4e3c	; 0x4e3c <DebugOut>
    13ac:	8d ec       	ldi	r24, 0xCD	; 205
    13ae:	c8 9e       	mul	r12, r24
    13b0:	c1 2c       	mov	r12, r1
    13b2:	11 24       	eor	r1, r1
    13b4:	c6 94       	lsr	r12
    13b6:	c6 94       	lsr	r12
    13b8:	c6 94       	lsr	r12
    13ba:	c0 92 6c 09 	sts	0x096C, r12	; 0x80096c <sg_u8AnnouncementDelayTicks>
    13be:	80 91 6c 09 	lds	r24, 0x096C	; 0x80096c <sg_u8AnnouncementDelayTicks>
    13c2:	0f 90       	pop	r0
    13c4:	0f 90       	pop	r0
    13c6:	0f 90       	pop	r0
    13c8:	0f 90       	pop	r0
    13ca:	0f 90       	pop	r0
    13cc:	81 11       	cpse	r24, r1
    13ce:	03 c0       	rjmp	.+6      	; 0x13d6 <CANReceiveCallback+0xda>
    13d0:	81 e0       	ldi	r24, 0x01	; 1
    13d2:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <sg_u8AnnouncementDelayTicks>
    13d6:	81 e0       	ldi	r24, 0x01	; 1
    13d8:	80 93 6d 09 	sts	0x096D, r24	; 0x80096d <sg_bAnnouncementPending>
    13dc:	d2 c0       	rjmp	.+420    	; 0x1582 <CANReceiveCallback+0x286>
    13de:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <sg_bModuleRegistered>
    13e2:	88 23       	and	r24, r24
    13e4:	61 f0       	breq	.+24     	; 0x13fe <CANReceiveCallback+0x102>
    13e6:	88 e4       	ldi	r24, 0x48	; 72
    13e8:	91 e0       	ldi	r25, 0x01	; 1
    13ea:	a0 e0       	ldi	r26, 0x00	; 0
    13ec:	af 93       	push	r26
    13ee:	9f 93       	push	r25
    13f0:	8f 93       	push	r24
    13f2:	0e 94 1e 27 	call	0x4e3c	; 0x4e3c <DebugOut>
    13f6:	0f 90       	pop	r0
    13f8:	0f 90       	pop	r0
    13fa:	0f 90       	pop	r0
    13fc:	c2 c0       	rjmp	.+388    	; 0x1582 <CANReceiveCallback+0x286>
    13fe:	86 e7       	ldi	r24, 0x76	; 118
    1400:	91 e0       	ldi	r25, 0x01	; 1
    1402:	a0 e0       	ldi	r26, 0x00	; 0
    1404:	af 93       	push	r26
    1406:	9f 93       	push	r25
    1408:	8f 93       	push	r24
    140a:	0e 94 1e 27 	call	0x4e3c	; 0x4e3c <DebugOut>
    140e:	0f 90       	pop	r0
    1410:	0f 90       	pop	r0
    1412:	0f 90       	pop	r0
    1414:	b6 c0       	rjmp	.+364    	; 0x1582 <CANReceiveCallback+0x286>
    1416:	89 30       	cpi	r24, 0x09	; 9
    1418:	09 f0       	breq	.+2      	; 0x141c <CANReceiveCallback+0x120>
    141a:	3f c0       	rjmp	.+126    	; 0x149a <CANReceiveCallback+0x19e>
    141c:	48 30       	cpi	r20, 0x08	; 8
    141e:	09 f0       	breq	.+2      	; 0x1422 <CANReceiveCallback+0x126>
    1420:	b0 c0       	rjmp	.+352    	; 0x1582 <CANReceiveCallback+0x286>
    1422:	f0 80       	ld	r15, Z
    1424:	82 81       	ldd	r24, Z+2	; 0x02
    1426:	82 30       	cpi	r24, 0x02	; 2
    1428:	09 f0       	breq	.+2      	; 0x142c <CANReceiveCallback+0x130>
    142a:	ab c0       	rjmp	.+342    	; 0x1582 <CANReceiveCallback+0x286>
    142c:	83 81       	ldd	r24, Z+3	; 0x03
    142e:	83 30       	cpi	r24, 0x03	; 3
    1430:	09 f0       	breq	.+2      	; 0x1434 <CANReceiveCallback+0x138>
    1432:	a7 c0       	rjmp	.+334    	; 0x1582 <CANReceiveCallback+0x286>
    1434:	40 91 1e 01 	lds	r20, 0x011E	; 0x80011e <sg_sFrame+0xe>
    1438:	50 91 1f 01 	lds	r21, 0x011F	; 0x80011f <sg_sFrame+0xf>
    143c:	60 91 20 01 	lds	r22, 0x0120	; 0x800120 <sg_sFrame+0x10>
    1440:	70 91 21 01 	lds	r23, 0x0121	; 0x800121 <sg_sFrame+0x11>
    1444:	84 81       	ldd	r24, Z+4	; 0x04
    1446:	95 81       	ldd	r25, Z+5	; 0x05
    1448:	a6 81       	ldd	r26, Z+6	; 0x06
    144a:	b7 81       	ldd	r27, Z+7	; 0x07
    144c:	48 17       	cp	r20, r24
    144e:	59 07       	cpc	r21, r25
    1450:	6a 07       	cpc	r22, r26
    1452:	7b 07       	cpc	r23, r27
    1454:	09 f0       	breq	.+2      	; 0x1458 <CANReceiveCallback+0x15c>
    1456:	95 c0       	rjmp	.+298    	; 0x1582 <CANReceiveCallback+0x286>
    1458:	10 92 67 09 	sts	0x0967, r1	; 0x800967 <sg_u8TicksSinceLastPackControllerMessage>
    145c:	f0 92 27 03 	sts	0x0327, r15	; 0x800327 <sg_u8ModuleRegistrationID>
    1460:	0e 94 fe 26 	call	0x4dfc	; 0x4dfc <SendModuleControllerStatus>
    1464:	c1 e0       	ldi	r28, 0x01	; 1
    1466:	c0 93 1c 03 	sts	0x031C, r28	; 0x80031c <sg_bSendHardwareDetail>
    146a:	c0 93 21 03 	sts	0x0321, r28	; 0x800321 <sg_bModuleRegistered>
    146e:	1f 92       	push	r1
    1470:	ff 92       	push	r15
    1472:	8e e9       	ldi	r24, 0x9E	; 158
    1474:	91 e0       	ldi	r25, 0x01	; 1
    1476:	a0 e0       	ldi	r26, 0x00	; 0
    1478:	af 93       	push	r26
    147a:	9f 93       	push	r25
    147c:	8f 93       	push	r24
    147e:	0e 94 1e 27 	call	0x4e3c	; 0x4e3c <DebugOut>
    1482:	10 92 6d 09 	sts	0x096D, r1	; 0x80096d <sg_bAnnouncementPending>
    1486:	10 92 6c 09 	sts	0x096C, r1	; 0x80096c <sg_u8AnnouncementDelayTicks>
    148a:	c0 93 20 03 	sts	0x0320, r28	; 0x800320 <sg_bSendTimeRequest>
    148e:	0f 90       	pop	r0
    1490:	0f 90       	pop	r0
    1492:	0f 90       	pop	r0
    1494:	0f 90       	pop	r0
    1496:	0f 90       	pop	r0
    1498:	74 c0       	rjmp	.+232    	; 0x1582 <CANReceiveCallback+0x286>
    149a:	44 23       	and	r20, r20
    149c:	09 f4       	brne	.+2      	; 0x14a0 <CANReceiveCallback+0x1a4>
    149e:	71 c0       	rjmp	.+226    	; 0x1582 <CANReceiveCallback+0x286>
    14a0:	20 81       	ld	r18, Z
    14a2:	91 11       	cpse	r25, r1
    14a4:	08 c0       	rjmp	.+16     	; 0x14b6 <CANReceiveCallback+0x1ba>
    14a6:	8a 30       	cpi	r24, 0x0A	; 10
    14a8:	09 f0       	breq	.+2      	; 0x14ac <CANReceiveCallback+0x1b0>
    14aa:	6b c0       	rjmp	.+214    	; 0x1582 <CANReceiveCallback+0x286>
    14ac:	90 91 21 03 	lds	r25, 0x0321	; 0x800321 <sg_bModuleRegistered>
    14b0:	99 23       	and	r25, r25
    14b2:	09 f4       	brne	.+2      	; 0x14b6 <CANReceiveCallback+0x1ba>
    14b4:	66 c0       	rjmp	.+204    	; 0x1582 <CANReceiveCallback+0x286>
    14b6:	90 91 27 03 	lds	r25, 0x0327	; 0x800327 <sg_u8ModuleRegistrationID>
    14ba:	29 13       	cpse	r18, r25
    14bc:	62 c0       	rjmp	.+196    	; 0x1582 <CANReceiveCallback+0x286>
    14be:	8a 30       	cpi	r24, 0x0A	; 10
    14c0:	a9 f4       	brne	.+42     	; 0x14ec <CANReceiveCallback+0x1f0>
    14c2:	41 30       	cpi	r20, 0x01	; 1
    14c4:	09 f0       	breq	.+2      	; 0x14c8 <CANReceiveCallback+0x1cc>
    14c6:	5d c0       	rjmp	.+186    	; 0x1582 <CANReceiveCallback+0x286>
    14c8:	80 91 6b 09 	lds	r24, 0x096B	; 0x80096b <sg_bIgnoreStatusRequests>
    14cc:	81 11       	cpse	r24, r1
    14ce:	59 c0       	rjmp	.+178    	; 0x1582 <CANReceiveCallback+0x286>
    14d0:	89 ed       	ldi	r24, 0xD9	; 217
    14d2:	91 e0       	ldi	r25, 0x01	; 1
    14d4:	a0 e0       	ldi	r26, 0x00	; 0
    14d6:	af 93       	push	r26
    14d8:	9f 93       	push	r25
    14da:	8f 93       	push	r24
    14dc:	0e 94 1e 27 	call	0x4e3c	; 0x4e3c <DebugOut>
    14e0:	0e 94 fe 26 	call	0x4dfc	; 0x4dfc <SendModuleControllerStatus>
    14e4:	0f 90       	pop	r0
    14e6:	0f 90       	pop	r0
    14e8:	0f 90       	pop	r0
    14ea:	4b c0       	rjmp	.+150    	; 0x1582 <CANReceiveCallback+0x286>
    14ec:	8b 30       	cpi	r24, 0x0B	; 11
    14ee:	f1 f4       	brne	.+60     	; 0x152c <CANReceiveCallback+0x230>
    14f0:	43 30       	cpi	r20, 0x03	; 3
    14f2:	09 f0       	breq	.+2      	; 0x14f6 <CANReceiveCallback+0x1fa>
    14f4:	46 c0       	rjmp	.+140    	; 0x1582 <CANReceiveCallback+0x286>
    14f6:	80 91 1d 03 	lds	r24, 0x031D	; 0x80031d <sg_bSendCellStatus>
    14fa:	81 11       	cpse	r24, r1
    14fc:	42 c0       	rjmp	.+132    	; 0x1582 <CANReceiveCallback+0x286>
    14fe:	81 81       	ldd	r24, Z+1	; 0x01
    1500:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <sg_sFrame+0x15>
    1504:	89 17       	cp	r24, r25
    1506:	e8 f5       	brcc	.+122    	; 0x1582 <CANReceiveCallback+0x286>
    1508:	80 93 23 03 	sts	0x0323, r24	; 0x800323 <sg_u8CellStatus>
    150c:	90 91 23 03 	lds	r25, 0x0323	; 0x800323 <sg_u8CellStatus>
    1510:	90 93 24 03 	sts	0x0324, r25	; 0x800324 <sg_u8CellStatusTarget>
    1514:	8f 3f       	cpi	r24, 0xFF	; 255
    1516:	31 f4       	brne	.+12     	; 0x1524 <CANReceiveCallback+0x228>
    1518:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <sg_sFrame+0x15>
    151c:	80 93 24 03 	sts	0x0324, r24	; 0x800324 <sg_u8CellStatusTarget>
    1520:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <sg_u8CellStatus>
    1524:	81 e0       	ldi	r24, 0x01	; 1
    1526:	80 93 1d 03 	sts	0x031D, r24	; 0x80031d <sg_bSendCellStatus>
    152a:	2b c0       	rjmp	.+86     	; 0x1582 <CANReceiveCallback+0x286>
    152c:	8c 30       	cpi	r24, 0x0C	; 12
    152e:	49 f4       	brne	.+18     	; 0x1542 <CANReceiveCallback+0x246>
    1530:	10 92 67 09 	sts	0x0967, r1	; 0x800967 <sg_u8TicksSinceLastPackControllerMessage>
    1534:	42 30       	cpi	r20, 0x02	; 2
    1536:	29 f5       	brne	.+74     	; 0x1582 <CANReceiveCallback+0x286>
    1538:	81 81       	ldd	r24, Z+1	; 0x01
    153a:	8f 70       	andi	r24, 0x0F	; 15
    153c:	0e 94 4b 27 	call	0x4e96	; 0x4e96 <ModuleControllerStateSet>
    1540:	20 c0       	rjmp	.+64     	; 0x1582 <CANReceiveCallback+0x286>
    1542:	85 30       	cpi	r24, 0x05	; 5
    1544:	21 f4       	brne	.+8      	; 0x154e <CANReceiveCallback+0x252>
    1546:	81 e0       	ldi	r24, 0x01	; 1
    1548:	80 93 1c 03 	sts	0x031C, r24	; 0x80031c <sg_bSendHardwareDetail>
    154c:	1a c0       	rjmp	.+52     	; 0x1582 <CANReceiveCallback+0x286>
    154e:	8e 30       	cpi	r24, 0x0E	; 14
    1550:	c1 f4       	brne	.+48     	; 0x1582 <CANReceiveCallback+0x286>
    1552:	1f 92       	push	r1
    1554:	2f 93       	push	r18
    1556:	8e ef       	ldi	r24, 0xFE	; 254
    1558:	91 e0       	ldi	r25, 0x01	; 1
    155a:	a0 e0       	ldi	r26, 0x00	; 0
    155c:	af 93       	push	r26
    155e:	9f 93       	push	r25
    1560:	8f 93       	push	r24
    1562:	0e 94 1e 27 	call	0x4e3c	; 0x4e3c <DebugOut>
    1566:	10 92 27 03 	sts	0x0327, r1	; 0x800327 <sg_u8ModuleRegistrationID>
    156a:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <sg_bModuleRegistered>
    156e:	10 92 6b 09 	sts	0x096B, r1	; 0x80096b <sg_bIgnoreStatusRequests>
    1572:	80 e0       	ldi	r24, 0x00	; 0
    1574:	0e 94 4b 27 	call	0x4e96	; 0x4e96 <ModuleControllerStateSet>
    1578:	0f 90       	pop	r0
    157a:	0f 90       	pop	r0
    157c:	0f 90       	pop	r0
    157e:	0f 90       	pop	r0
    1580:	0f 90       	pop	r0
    1582:	cf 91       	pop	r28
    1584:	ff 90       	pop	r15
    1586:	ef 90       	pop	r14
    1588:	df 90       	pop	r13
    158a:	cf 90       	pop	r12
    158c:	08 95       	ret

Disassembly of section .text.ControllerStatusMessagesSend:

00000988 <ControllerStatusMessagesSend>:
 988:	cf 92       	push	r12
 98a:	df 92       	push	r13
 98c:	ef 92       	push	r14
 98e:	ff 92       	push	r15
 990:	0f 93       	push	r16
 992:	1f 93       	push	r17
 994:	cf 93       	push	r28
 996:	df 93       	push	r29
 998:	00 d0       	rcall	.+0      	; 0x99a <ControllerStatusMessagesSend+0x12>
 99a:	00 d0       	rcall	.+0      	; 0x99c <ControllerStatusMessagesSend+0x14>
 99c:	cd b7       	in	r28, 0x3d	; 61
 99e:	de b7       	in	r29, 0x3e	; 62
 9a0:	8c 01       	movw	r16, r24
 9a2:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <sg_bSendTimeRequest>
 9a6:	88 23       	and	r24, r24
 9a8:	69 f0       	breq	.+26     	; 0x9c4 <ControllerStatusMessagesSend+0x3c>
 9aa:	88 e0       	ldi	r24, 0x08	; 8
 9ac:	d8 01       	movw	r26, r16
 9ae:	1d 92       	st	X+, r1
 9b0:	8a 95       	dec	r24
 9b2:	e9 f7       	brne	.-6      	; 0x9ae <ControllerStatusMessagesSend+0x26>
 9b4:	48 e0       	ldi	r20, 0x08	; 8
 9b6:	b8 01       	movw	r22, r16
 9b8:	88 e0       	ldi	r24, 0x08	; 8
 9ba:	0e 94 9b 26 	call	0x4d36	; 0x4d36 <CANSendMessage>
 9be:	81 11       	cpse	r24, r1
 9c0:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <sg_bSendTimeRequest>
 9c4:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <sg_bSendModuleControllerStatus>
 9c8:	88 23       	and	r24, r24
 9ca:	09 f4       	brne	.+2      	; 0x9ce <ControllerStatusMessagesSend+0x46>
 9cc:	06 c1       	rjmp	.+524    	; 0xbda <ControllerStatusMessagesSend+0x252>
 9ce:	80 91 66 09 	lds	r24, 0x0966	; 0x800966 <sg_u8ControllerStatusMsgCount>
 9d2:	81 11       	cpse	r24, r1
 9d4:	80 c0       	rjmp	.+256    	; 0xad6 <ControllerStatusMessagesSend+0x14e>
 9d6:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
 9da:	8f 70       	andi	r24, 0x0F	; 15
 9dc:	f8 01       	movw	r30, r16
 9de:	80 83       	st	Z, r24
 9e0:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <sg_u8SOC>
 9e4:	81 83       	std	Z+1, r24	; 0x01
 9e6:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <sg_u8SOH>
 9ea:	82 83       	std	Z+2, r24	; 0x02
 9ec:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <sg_sFrame+0x15>
 9f0:	83 83       	std	Z+3, r24	; 0x03
 9f2:	84 e0       	ldi	r24, 0x04	; 4
 9f4:	34 96       	adiw	r30, 0x04	; 4
 9f6:	df 01       	movw	r26, r30
 9f8:	1d 92       	st	X+, r1
 9fa:	8a 95       	dec	r24
 9fc:	e9 f7       	brne	.-6      	; 0x9f8 <ControllerStatusMessagesSend+0x70>
 9fe:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <sg_sFrame+0x48>
 a02:	88 23       	and	r24, r24
 a04:	79 f0       	breq	.+30     	; 0xa24 <ControllerStatusMessagesSend+0x9c>
 a06:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <sg_sFrame+0x4b>
 a0a:	88 23       	and	r24, r24
 a0c:	71 f0       	breq	.+28     	; 0xa2a <ControllerStatusMessagesSend+0xa2>
 a0e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
 a12:	83 30       	cpi	r24, 0x03	; 3
 a14:	69 f4       	brne	.+26     	; 0xa30 <ControllerStatusMessagesSend+0xa8>
 a16:	0e 94 f6 13 	call	0x27ec	; 0x27ec <ModuleCurrentConvertReadings>
 a1a:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <sg_sFrame+0x2f>
 a1e:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <sg_sFrame+0x30>
 a22:	08 c0       	rjmp	.+16     	; 0xa34 <ControllerStatusMessagesSend+0xac>
 a24:	80 e0       	ldi	r24, 0x00	; 0
 a26:	90 e8       	ldi	r25, 0x80	; 128
 a28:	05 c0       	rjmp	.+10     	; 0xa34 <ControllerStatusMessagesSend+0xac>
 a2a:	80 e0       	ldi	r24, 0x00	; 0
 a2c:	90 e8       	ldi	r25, 0x80	; 128
 a2e:	02 c0       	rjmp	.+4      	; 0xa34 <ControllerStatusMessagesSend+0xac>
 a30:	80 e0       	ldi	r24, 0x00	; 0
 a32:	90 e8       	ldi	r25, 0x80	; 128
 a34:	f8 01       	movw	r30, r16
 a36:	84 83       	std	Z+4, r24	; 0x04
 a38:	95 83       	std	Z+5, r25	; 0x05
 a3a:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <sg_sFrame+0x45>
 a3e:	88 23       	and	r24, r24
 a40:	79 f0       	breq	.+30     	; 0xa60 <ControllerStatusMessagesSend+0xd8>
 a42:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <sg_sFrame+0x46>
 a46:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <sg_sFrame+0x47>
 a4a:	4f ef       	ldi	r20, 0xFF	; 255
 a4c:	53 e0       	ldi	r21, 0x03	; 3
 a4e:	60 e0       	ldi	r22, 0x00	; 0
 a50:	70 e0       	ldi	r23, 0x00	; 0
 a52:	9a 01       	movw	r18, r20
 a54:	ab 01       	movw	r20, r22
 a56:	28 1b       	sub	r18, r24
 a58:	39 0b       	sbc	r19, r25
 a5a:	41 09       	sbc	r20, r1
 a5c:	51 09       	sbc	r21, r1
 a5e:	03 c0       	rjmp	.+6      	; 0xa66 <ControllerStatusMessagesSend+0xde>
 a60:	20 e0       	ldi	r18, 0x00	; 0
 a62:	30 e0       	ldi	r19, 0x00	; 0
 a64:	a9 01       	movw	r20, r18
 a66:	e0 e1       	ldi	r30, 0x10	; 16
 a68:	f1 e0       	ldi	r31, 0x01	; 1
 a6a:	a5 a1       	ldd	r26, Z+37	; 0x25
 a6c:	b6 a1       	ldd	r27, Z+38	; 0x26
 a6e:	0e 94 0e 27 	call	0x4e1c	; 0x4e1c <__mulshisi3>
 a72:	dc 01       	movw	r26, r24
 a74:	cb 01       	movw	r24, r22
 a76:	68 94       	set
 a78:	16 f8       	bld	r1, 6
 a7a:	b6 95       	lsr	r27
 a7c:	a7 95       	ror	r26
 a7e:	97 95       	ror	r25
 a80:	87 95       	ror	r24
 a82:	16 94       	lsr	r1
 a84:	d1 f7       	brne	.-12     	; 0xa7a <ControllerStatusMessagesSend+0xf2>
 a86:	c5 8c       	ldd	r12, Z+29	; 0x1d
 a88:	d6 8c       	ldd	r13, Z+30	; 0x1e
 a8a:	e7 8c       	ldd	r14, Z+31	; 0x1f
 a8c:	f0 a0       	ldd	r15, Z+32	; 0x20
 a8e:	bc 01       	movw	r22, r24
 a90:	cd 01       	movw	r24, r26
 a92:	6c 0d       	add	r22, r12
 a94:	7d 1d       	adc	r23, r13
 a96:	8e 1d       	adc	r24, r14
 a98:	9f 1d       	adc	r25, r15
 a9a:	2f e0       	ldi	r18, 0x0F	; 15
 a9c:	30 e0       	ldi	r19, 0x00	; 0
 a9e:	40 e0       	ldi	r20, 0x00	; 0
 aa0:	50 e0       	ldi	r21, 0x00	; 0
 aa2:	0e 94 37 22 	call	0x446e	; 0x446e <__udivmodsi4>
 aa6:	20 93 51 01 	sts	0x0151, r18	; 0x800151 <sg_sFrame+0x41>
 aaa:	30 93 52 01 	sts	0x0152, r19	; 0x800152 <sg_sFrame+0x42>
 aae:	40 93 53 01 	sts	0x0153, r20	; 0x800153 <sg_sFrame+0x43>
 ab2:	50 93 54 01 	sts	0x0154, r21	; 0x800154 <sg_sFrame+0x44>
 ab6:	d8 01       	movw	r26, r16
 ab8:	16 96       	adiw	r26, 0x06	; 6
 aba:	2c 93       	st	X, r18
 abc:	16 97       	sbiw	r26, 0x06	; 6
 abe:	17 96       	adiw	r26, 0x07	; 7
 ac0:	3c 93       	st	X, r19
 ac2:	48 e0       	ldi	r20, 0x08	; 8
 ac4:	b8 01       	movw	r22, r16
 ac6:	81 e0       	ldi	r24, 0x01	; 1
 ac8:	0e 94 9b 26 	call	0x4d36	; 0x4d36 <CANSendMessage>
 acc:	88 23       	and	r24, r24
 ace:	09 f4       	brne	.+2      	; 0xad2 <ControllerStatusMessagesSend+0x14a>
 ad0:	6b c0       	rjmp	.+214    	; 0xba8 <ControllerStatusMessagesSend+0x220>
 ad2:	81 e0       	ldi	r24, 0x01	; 1
 ad4:	70 c0       	rjmp	.+224    	; 0xbb6 <ControllerStatusMessagesSend+0x22e>
 ad6:	81 30       	cpi	r24, 0x01	; 1
 ad8:	c1 f5       	brne	.+112    	; 0xb4a <ControllerStatusMessagesSend+0x1c2>
 ada:	e0 e1       	ldi	r30, 0x10	; 16
 adc:	f1 e0       	ldi	r31, 0x01	; 1
 ade:	81 ad       	ldd	r24, Z+57	; 0x39
 ae0:	92 ad       	ldd	r25, Z+58	; 0x3a
 ae2:	d8 01       	movw	r26, r16
 ae4:	8c 93       	st	X, r24
 ae6:	81 ad       	ldd	r24, Z+57	; 0x39
 ae8:	92 ad       	ldd	r25, Z+58	; 0x3a
 aea:	11 96       	adiw	r26, 0x01	; 1
 aec:	9c 93       	st	X, r25
 aee:	11 97       	sbiw	r26, 0x01	; 1
 af0:	87 a9       	ldd	r24, Z+55	; 0x37
 af2:	90 ad       	ldd	r25, Z+56	; 0x38
 af4:	12 96       	adiw	r26, 0x02	; 2
 af6:	8c 93       	st	X, r24
 af8:	12 97       	sbiw	r26, 0x02	; 2
 afa:	87 a9       	ldd	r24, Z+55	; 0x37
 afc:	90 ad       	ldd	r25, Z+56	; 0x38
 afe:	13 96       	adiw	r26, 0x03	; 3
 b00:	9c 93       	st	X, r25
 b02:	13 97       	sbiw	r26, 0x03	; 3
 b04:	83 ad       	ldd	r24, Z+59	; 0x3b
 b06:	94 ad       	ldd	r25, Z+60	; 0x3c
 b08:	14 96       	adiw	r26, 0x04	; 4
 b0a:	8c 93       	st	X, r24
 b0c:	14 97       	sbiw	r26, 0x04	; 4
 b0e:	83 ad       	ldd	r24, Z+59	; 0x3b
 b10:	94 ad       	ldd	r25, Z+60	; 0x3c
 b12:	15 96       	adiw	r26, 0x05	; 5
 b14:	9c 93       	st	X, r25
 b16:	60 91 4d 01 	lds	r22, 0x014D	; 0x80014d <sg_sFrame+0x3d>
 b1a:	70 91 4e 01 	lds	r23, 0x014E	; 0x80014e <sg_sFrame+0x3e>
 b1e:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <sg_sFrame+0x3f>
 b22:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <sg_sFrame+0x40>
 b26:	2f e0       	ldi	r18, 0x0F	; 15
 b28:	30 e0       	ldi	r19, 0x00	; 0
 b2a:	40 e0       	ldi	r20, 0x00	; 0
 b2c:	50 e0       	ldi	r21, 0x00	; 0
 b2e:	0e 94 37 22 	call	0x446e	; 0x446e <__udivmodsi4>
 b32:	f8 01       	movw	r30, r16
 b34:	26 83       	std	Z+6, r18	; 0x06
 b36:	37 83       	std	Z+7, r19	; 0x07
 b38:	48 e0       	ldi	r20, 0x08	; 8
 b3a:	b8 01       	movw	r22, r16
 b3c:	82 e0       	ldi	r24, 0x02	; 2
 b3e:	0e 94 9b 26 	call	0x4d36	; 0x4d36 <CANSendMessage>
 b42:	88 23       	and	r24, r24
 b44:	99 f1       	breq	.+102    	; 0xbac <ControllerStatusMessagesSend+0x224>
 b46:	81 e0       	ldi	r24, 0x01	; 1
 b48:	36 c0       	rjmp	.+108    	; 0xbb6 <ControllerStatusMessagesSend+0x22e>
 b4a:	82 30       	cpi	r24, 0x02	; 2
 b4c:	89 f5       	brne	.+98     	; 0xbb0 <ControllerStatusMessagesSend+0x228>
 b4e:	e0 e1       	ldi	r30, 0x10	; 16
 b50:	f1 e0       	ldi	r31, 0x01	; 1
 b52:	83 a9       	ldd	r24, Z+51	; 0x33
 b54:	94 a9       	ldd	r25, Z+52	; 0x34
 b56:	d8 01       	movw	r26, r16
 b58:	8c 93       	st	X, r24
 b5a:	83 a9       	ldd	r24, Z+51	; 0x33
 b5c:	94 a9       	ldd	r25, Z+52	; 0x34
 b5e:	11 96       	adiw	r26, 0x01	; 1
 b60:	9c 93       	st	X, r25
 b62:	11 97       	sbiw	r26, 0x01	; 1
 b64:	81 a9       	ldd	r24, Z+49	; 0x31
 b66:	92 a9       	ldd	r25, Z+50	; 0x32
 b68:	12 96       	adiw	r26, 0x02	; 2
 b6a:	8c 93       	st	X, r24
 b6c:	12 97       	sbiw	r26, 0x02	; 2
 b6e:	81 a9       	ldd	r24, Z+49	; 0x31
 b70:	92 a9       	ldd	r25, Z+50	; 0x32
 b72:	13 96       	adiw	r26, 0x03	; 3
 b74:	9c 93       	st	X, r25
 b76:	13 97       	sbiw	r26, 0x03	; 3
 b78:	85 a9       	ldd	r24, Z+53	; 0x35
 b7a:	96 a9       	ldd	r25, Z+54	; 0x36
 b7c:	14 96       	adiw	r26, 0x04	; 4
 b7e:	8c 93       	st	X, r24
 b80:	14 97       	sbiw	r26, 0x04	; 4
 b82:	85 a9       	ldd	r24, Z+53	; 0x35
 b84:	96 a9       	ldd	r25, Z+54	; 0x36
 b86:	15 96       	adiw	r26, 0x05	; 5
 b88:	9c 93       	st	X, r25
 b8a:	15 97       	sbiw	r26, 0x05	; 5
 b8c:	16 96       	adiw	r26, 0x06	; 6
 b8e:	1c 92       	st	X, r1
 b90:	16 97       	sbiw	r26, 0x06	; 6
 b92:	17 96       	adiw	r26, 0x07	; 7
 b94:	1c 92       	st	X, r1
 b96:	48 e0       	ldi	r20, 0x08	; 8
 b98:	b8 01       	movw	r22, r16
 b9a:	83 e0       	ldi	r24, 0x03	; 3
 b9c:	0e 94 9b 26 	call	0x4d36	; 0x4d36 <CANSendMessage>
 ba0:	88 23       	and	r24, r24
 ba2:	41 f0       	breq	.+16     	; 0xbb4 <ControllerStatusMessagesSend+0x22c>
 ba4:	81 e0       	ldi	r24, 0x01	; 1
 ba6:	07 c0       	rjmp	.+14     	; 0xbb6 <ControllerStatusMessagesSend+0x22e>
 ba8:	80 e0       	ldi	r24, 0x00	; 0
 baa:	05 c0       	rjmp	.+10     	; 0xbb6 <ControllerStatusMessagesSend+0x22e>
 bac:	80 e0       	ldi	r24, 0x00	; 0
 bae:	03 c0       	rjmp	.+6      	; 0xbb6 <ControllerStatusMessagesSend+0x22e>
 bb0:	81 e0       	ldi	r24, 0x01	; 1
 bb2:	01 c0       	rjmp	.+2      	; 0xbb6 <ControllerStatusMessagesSend+0x22e>
 bb4:	80 e0       	ldi	r24, 0x00	; 0
 bb6:	88 23       	and	r24, r24
 bb8:	81 f0       	breq	.+32     	; 0xbda <ControllerStatusMessagesSend+0x252>
 bba:	80 91 66 09 	lds	r24, 0x0966	; 0x800966 <sg_u8ControllerStatusMsgCount>
 bbe:	8f 5f       	subi	r24, 0xFF	; 255
 bc0:	80 93 66 09 	sts	0x0966, r24	; 0x800966 <sg_u8ControllerStatusMsgCount>
 bc4:	83 30       	cpi	r24, 0x03	; 3
 bc6:	48 f0       	brcs	.+18     	; 0xbda <ControllerStatusMessagesSend+0x252>
 bc8:	10 92 66 09 	sts	0x0966, r1	; 0x800966 <sg_u8ControllerStatusMsgCount>
 bcc:	10 92 1e 03 	sts	0x031E, r1	; 0x80031e <sg_bSendModuleControllerStatus>
 bd0:	10 92 6b 09 	sts	0x096B, r1	; 0x80096b <sg_bIgnoreStatusRequests>
 bd4:	81 e0       	ldi	r24, 0x01	; 1
 bd6:	80 93 1b 03 	sts	0x031B, r24	; 0x80031b <sg_bSendCellCommStatus>
 bda:	80 91 1d 03 	lds	r24, 0x031D	; 0x80031d <sg_bSendCellStatus>
 bde:	88 23       	and	r24, r24
 be0:	09 f4       	brne	.+2      	; 0xbe4 <ControllerStatusMessagesSend+0x25c>
 be2:	6d c0       	rjmp	.+218    	; 0xcbe <ControllerStatusMessagesSend+0x336>
 be4:	1c 82       	std	Y+4, r1	; 0x04
 be6:	1b 82       	std	Y+3, r1	; 0x03
 be8:	1a 82       	std	Y+2, r1	; 0x02
 bea:	19 82       	std	Y+1, r1	; 0x01
 bec:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <sg_sFrame+0x2d>
 bf0:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <sg_u8CellStatus>
 bf4:	89 17       	cp	r24, r25
 bf6:	90 f4       	brcc	.+36     	; 0xc1c <ControllerStatusMessagesSend+0x294>
 bf8:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <sg_u8CellStatus>
 bfc:	90 e0       	ldi	r25, 0x00	; 0
 bfe:	45 96       	adiw	r24, 0x15	; 21
 c00:	88 0f       	add	r24, r24
 c02:	99 1f       	adc	r25, r25
 c04:	88 0f       	add	r24, r24
 c06:	99 1f       	adc	r25, r25
 c08:	ae 01       	movw	r20, r28
 c0a:	4f 5f       	subi	r20, 0xFF	; 255
 c0c:	5f 4f       	sbci	r21, 0xFF	; 255
 c0e:	be 01       	movw	r22, r28
 c10:	6d 5f       	subi	r22, 0xFD	; 253
 c12:	7f 4f       	sbci	r23, 0xFF	; 255
 c14:	80 5f       	subi	r24, 0xF0	; 240
 c16:	9e 4f       	sbci	r25, 0xFE	; 254
 c18:	0e 94 51 24 	call	0x48a2	; 0x48a2 <CellDataConvert>
 c1c:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <sg_u8CellStatus>
 c20:	f8 01       	movw	r30, r16
 c22:	80 83       	st	Z, r24
 c24:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <sg_sFrame+0x15>
 c28:	81 83       	std	Z+1, r24	; 0x01
 c2a:	99 81       	ldd	r25, Y+1	; 0x01
 c2c:	8a 81       	ldd	r24, Y+2	; 0x02
 c2e:	92 83       	std	Z+2, r25	; 0x02
 c30:	83 83       	std	Z+3, r24	; 0x03
 c32:	2b 81       	ldd	r18, Y+3	; 0x03
 c34:	3c 81       	ldd	r19, Y+4	; 0x04
 c36:	24 83       	std	Z+4, r18	; 0x04
 c38:	35 83       	std	Z+5, r19	; 0x05
 c3a:	21 15       	cp	r18, r1
 c3c:	31 05       	cpc	r19, r1
 c3e:	59 f0       	breq	.+22     	; 0xc56 <ControllerStatusMessagesSend+0x2ce>
 c40:	c9 01       	movw	r24, r18
 c42:	64 e0       	ldi	r22, 0x04	; 4
 c44:	70 e1       	ldi	r23, 0x10	; 16
 c46:	0e 94 79 24 	call	0x48f2	; 0x48f2 <__udivmodhi4>
 c4a:	84 e6       	ldi	r24, 0x64	; 100
 c4c:	68 9f       	mul	r22, r24
 c4e:	60 2d       	mov	r22, r0
 c50:	11 24       	eor	r1, r1
 c52:	66 83       	std	Z+6, r22	; 0x06
 c54:	01 c0       	rjmp	.+2      	; 0xc58 <ControllerStatusMessagesSend+0x2d0>
 c56:	16 82       	std	Z+6, r1	; 0x06
 c58:	e0 e1       	ldi	r30, 0x10	; 16
 c5a:	f1 e0       	ldi	r31, 0x01	; 1
 c5c:	47 a9       	ldd	r20, Z+55	; 0x37
 c5e:	50 ad       	ldd	r21, Z+56	; 0x38
 c60:	81 ad       	ldd	r24, Z+57	; 0x39
 c62:	92 ad       	ldd	r25, Z+58	; 0x3a
 c64:	84 17       	cp	r24, r20
 c66:	95 07       	cpc	r25, r21
 c68:	98 f4       	brcc	.+38     	; 0xc90 <ControllerStatusMessagesSend+0x308>
 c6a:	21 15       	cp	r18, r1
 c6c:	31 05       	cpc	r19, r1
 c6e:	81 f0       	breq	.+32     	; 0xc90 <ControllerStatusMessagesSend+0x308>
 c70:	67 a9       	ldd	r22, Z+55	; 0x37
 c72:	70 ad       	ldd	r23, Z+56	; 0x38
 c74:	81 ad       	ldd	r24, Z+57	; 0x39
 c76:	92 ad       	ldd	r25, Z+58	; 0x3a
 c78:	68 1b       	sub	r22, r24
 c7a:	79 0b       	sbc	r23, r25
 c7c:	c9 01       	movw	r24, r18
 c7e:	0e 94 79 24 	call	0x48f2	; 0x48f2 <__udivmodhi4>
 c82:	84 e6       	ldi	r24, 0x64	; 100
 c84:	68 9f       	mul	r22, r24
 c86:	60 2d       	mov	r22, r0
 c88:	11 24       	eor	r1, r1
 c8a:	f8 01       	movw	r30, r16
 c8c:	67 83       	std	Z+7, r22	; 0x07
 c8e:	03 c0       	rjmp	.+6      	; 0xc96 <ControllerStatusMessagesSend+0x30e>
 c90:	d8 01       	movw	r26, r16
 c92:	17 96       	adiw	r26, 0x07	; 7
 c94:	1c 92       	st	X, r1
 c96:	48 e0       	ldi	r20, 0x08	; 8
 c98:	b8 01       	movw	r22, r16
 c9a:	84 e0       	ldi	r24, 0x04	; 4
 c9c:	0e 94 9b 26 	call	0x4d36	; 0x4d36 <CANSendMessage>
 ca0:	88 23       	and	r24, r24
 ca2:	69 f0       	breq	.+26     	; 0xcbe <ControllerStatusMessagesSend+0x336>
 ca4:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <sg_u8CellStatus>
 ca8:	8f 5f       	subi	r24, 0xFF	; 255
 caa:	80 93 23 03 	sts	0x0323, r24	; 0x800323 <sg_u8CellStatus>
 cae:	90 91 23 03 	lds	r25, 0x0323	; 0x800323 <sg_u8CellStatus>
 cb2:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <sg_u8CellStatusTarget>
 cb6:	98 17       	cp	r25, r24
 cb8:	10 f0       	brcs	.+4      	; 0xcbe <ControllerStatusMessagesSend+0x336>
 cba:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <sg_bSendCellStatus>
 cbe:	80 91 1b 03 	lds	r24, 0x031B	; 0x80031b <sg_bSendCellCommStatus>
 cc2:	88 23       	and	r24, r24
 cc4:	89 f1       	breq	.+98     	; 0xd28 <ControllerStatusMessagesSend+0x3a0>
 cc6:	e0 e1       	ldi	r30, 0x10	; 16
 cc8:	f1 e0       	ldi	r31, 0x01	; 1
 cca:	83 89       	ldd	r24, Z+19	; 0x13
 ccc:	d8 01       	movw	r26, r16
 cce:	8c 93       	st	X, r24
 cd0:	84 89       	ldd	r24, Z+20	; 0x14
 cd2:	11 96       	adiw	r26, 0x01	; 1
 cd4:	8c 93       	st	X, r24
 cd6:	11 97       	sbiw	r26, 0x01	; 1
 cd8:	80 a5       	ldd	r24, Z+40	; 0x28
 cda:	91 a5       	ldd	r25, Z+41	; 0x29
 cdc:	12 96       	adiw	r26, 0x02	; 2
 cde:	8c 93       	st	X, r24
 ce0:	12 97       	sbiw	r26, 0x02	; 2
 ce2:	80 a5       	ldd	r24, Z+40	; 0x28
 ce4:	91 a5       	ldd	r25, Z+41	; 0x29
 ce6:	13 96       	adiw	r26, 0x03	; 3
 ce8:	9c 93       	st	X, r25
 cea:	13 97       	sbiw	r26, 0x03	; 3
 cec:	86 a5       	ldd	r24, Z+46	; 0x2e
 cee:	14 96       	adiw	r26, 0x04	; 4
 cf0:	8c 93       	st	X, r24
 cf2:	14 97       	sbiw	r26, 0x04	; 4
 cf4:	82 a5       	ldd	r24, Z+42	; 0x2a
 cf6:	8f 3f       	cpi	r24, 0xFF	; 255
 cf8:	31 f0       	breq	.+12     	; 0xd06 <ControllerStatusMessagesSend+0x37e>
 cfa:	85 a5       	ldd	r24, Z+45	; 0x2d
 cfc:	92 a5       	ldd	r25, Z+42	; 0x2a
 cfe:	89 1b       	sub	r24, r25
 d00:	15 96       	adiw	r26, 0x05	; 5
 d02:	8c 93       	st	X, r24
 d04:	03 c0       	rjmp	.+6      	; 0xd0c <ControllerStatusMessagesSend+0x384>
 d06:	8f ef       	ldi	r24, 0xFF	; 255
 d08:	f8 01       	movw	r30, r16
 d0a:	85 83       	std	Z+5, r24	; 0x05
 d0c:	d8 01       	movw	r26, r16
 d0e:	16 96       	adiw	r26, 0x06	; 6
 d10:	1c 92       	st	X, r1
 d12:	16 97       	sbiw	r26, 0x06	; 6
 d14:	17 96       	adiw	r26, 0x07	; 7
 d16:	1c 92       	st	X, r1
 d18:	48 e0       	ldi	r20, 0x08	; 8
 d1a:	b8 01       	movw	r22, r16
 d1c:	86 e0       	ldi	r24, 0x06	; 6
 d1e:	0e 94 9b 26 	call	0x4d36	; 0x4d36 <CANSendMessage>
 d22:	81 11       	cpse	r24, r1
 d24:	10 92 1b 03 	sts	0x031B, r1	; 0x80031b <sg_bSendCellCommStatus>
 d28:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <sg_bSendHardwareDetail>
 d2c:	88 23       	and	r24, r24
 d2e:	91 f0       	breq	.+36     	; 0xd54 <ControllerStatusMessagesSend+0x3cc>
 d30:	b8 01       	movw	r22, r16
 d32:	c8 01       	movw	r24, r16
 d34:	02 96       	adiw	r24, 0x02	; 2
 d36:	0e 94 93 1b 	call	0x3726	; 0x3726 <CurrentThresholdsGet>
 d3a:	f8 01       	movw	r30, r16
 d3c:	14 82       	std	Z+4, r1	; 0x04
 d3e:	15 82       	std	Z+5, r1	; 0x05
 d40:	16 82       	std	Z+6, r1	; 0x06
 d42:	17 82       	std	Z+7, r1	; 0x07
 d44:	48 e0       	ldi	r20, 0x08	; 8
 d46:	b8 01       	movw	r22, r16
 d48:	85 e0       	ldi	r24, 0x05	; 5
 d4a:	0e 94 9b 26 	call	0x4d36	; 0x4d36 <CANSendMessage>
 d4e:	81 11       	cpse	r24, r1
 d50:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <sg_bSendHardwareDetail>
 d54:	0f 90       	pop	r0
 d56:	0f 90       	pop	r0
 d58:	0f 90       	pop	r0
 d5a:	0f 90       	pop	r0
 d5c:	df 91       	pop	r29
 d5e:	cf 91       	pop	r28
 d60:	1f 91       	pop	r17
 d62:	0f 91       	pop	r16
 d64:	ff 90       	pop	r15
 d66:	ef 90       	pop	r14
 d68:	df 90       	pop	r13
 d6a:	cf 90       	pop	r12
 d6c:	08 95       	ret

Disassembly of section .text.CellStringProcess:

00001052 <CellStringProcess>:
    1052:	3f 92       	push	r3
    1054:	4f 92       	push	r4
    1056:	5f 92       	push	r5
    1058:	6f 92       	push	r6
    105a:	7f 92       	push	r7
    105c:	8f 92       	push	r8
    105e:	9f 92       	push	r9
    1060:	af 92       	push	r10
    1062:	bf 92       	push	r11
    1064:	cf 92       	push	r12
    1066:	df 92       	push	r13
    1068:	ef 92       	push	r14
    106a:	ff 92       	push	r15
    106c:	0f 93       	push	r16
    106e:	1f 93       	push	r17
    1070:	cf 93       	push	r28
    1072:	df 93       	push	r29
    1074:	00 d0       	rcall	.+0      	; 0x1076 <CellStringProcess+0x24>
    1076:	00 d0       	rcall	.+0      	; 0x1078 <CellStringProcess+0x26>
    1078:	00 d0       	rcall	.+0      	; 0x107a <CellStringProcess+0x28>
    107a:	cd b7       	in	r28, 0x3d	; 61
    107c:	de b7       	in	r29, 0x3e	; 62
    107e:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <sg_sFrame+0x2b>
    1082:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <sg_sFrame+0x2c>
    1086:	89 2b       	or	r24, r25
    1088:	09 f4       	brne	.+2      	; 0x108c <CellStringProcess+0x3a>
    108a:	20 c1       	rjmp	.+576    	; 0x12cc <__stack+0x1cd>
    108c:	e0 e1       	ldi	r30, 0x10	; 16
    108e:	f1 e0       	ldi	r31, 0x01	; 1
    1090:	8f ef       	ldi	r24, 0xFF	; 255
    1092:	82 a7       	std	Z+42, r24	; 0x2a
    1094:	93 89       	ldd	r25, Z+19	; 0x13
    1096:	85 a5       	ldd	r24, Z+45	; 0x2d
    1098:	89 17       	cp	r24, r25
    109a:	28 f4       	brcc	.+10     	; 0x10a6 <CellStringProcess+0x54>
    109c:	85 a5       	ldd	r24, Z+45	; 0x2d
    109e:	83 8b       	std	Z+19, r24	; 0x13
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	80 93 1b 03 	sts	0x031B, r24	; 0x80031b <sg_bSendCellCommStatus>
    10a6:	e0 e1       	ldi	r30, 0x10	; 16
    10a8:	f1 e0       	ldi	r31, 0x01	; 1
    10aa:	94 89       	ldd	r25, Z+20	; 0x14
    10ac:	85 a5       	ldd	r24, Z+45	; 0x2d
    10ae:	98 17       	cp	r25, r24
    10b0:	28 f4       	brcc	.+10     	; 0x10bc <CellStringProcess+0x6a>
    10b2:	85 a5       	ldd	r24, Z+45	; 0x2d
    10b4:	84 8b       	std	Z+20, r24	; 0x14
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	80 93 1b 03 	sts	0x031B, r24	; 0x80031b <sg_bSendCellCommStatus>
    10bc:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <sg_sFrame+0x2b>
    10c0:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <sg_sFrame+0x2c>
    10c4:	83 70       	andi	r24, 0x03	; 3
    10c6:	99 27       	eor	r25, r25
    10c8:	89 2b       	or	r24, r25
    10ca:	61 f0       	breq	.+24     	; 0x10e4 <CellStringProcess+0x92>
    10cc:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <sg_sFrame+0x2e>
    10d0:	8f 3f       	cpi	r24, 0xFF	; 255
    10d2:	41 f0       	breq	.+16     	; 0x10e4 <CellStringProcess+0x92>
    10d4:	e0 e1       	ldi	r30, 0x10	; 16
    10d6:	f1 e0       	ldi	r31, 0x01	; 1
    10d8:	86 a5       	ldd	r24, Z+46	; 0x2e
    10da:	8f 5f       	subi	r24, 0xFF	; 255
    10dc:	86 a7       	std	Z+46, r24	; 0x2e
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	80 93 1b 03 	sts	0x031B, r24	; 0x80031b <sg_bSendCellCommStatus>
    10e4:	e0 e1       	ldi	r30, 0x10	; 16
    10e6:	f1 e0       	ldi	r31, 0x01	; 1
    10e8:	10 ae       	std	Z+56, r1	; 0x38
    10ea:	17 aa       	std	Z+55, r1	; 0x37
    10ec:	8f ef       	ldi	r24, 0xFF	; 255
    10ee:	9f ef       	ldi	r25, 0xFF	; 255
    10f0:	92 af       	std	Z+58, r25	; 0x3a
    10f2:	81 af       	std	Z+57, r24	; 0x39
    10f4:	14 ae       	std	Z+60, r1	; 0x3c
    10f6:	13 ae       	std	Z+59, r1	; 0x3b
    10f8:	80 e0       	ldi	r24, 0x00	; 0
    10fa:	90 e8       	ldi	r25, 0x80	; 128
    10fc:	92 ab       	std	Z+50, r25	; 0x32
    10fe:	81 ab       	std	Z+49, r24	; 0x31
    1100:	8f ef       	ldi	r24, 0xFF	; 255
    1102:	9f e7       	ldi	r25, 0x7F	; 127
    1104:	94 ab       	std	Z+52, r25	; 0x34
    1106:	83 ab       	std	Z+51, r24	; 0x33
    1108:	16 aa       	std	Z+54, r1	; 0x36
    110a:	15 aa       	std	Z+53, r1	; 0x35
    110c:	d1 2c       	mov	r13, r1
    110e:	31 2c       	mov	r3, r1
    1110:	c1 2c       	mov	r12, r1
    1112:	41 2c       	mov	r4, r1
    1114:	51 2c       	mov	r5, r1
    1116:	32 01       	movw	r6, r4
    1118:	81 2c       	mov	r8, r1
    111a:	91 2c       	mov	r9, r1
    111c:	54 01       	movw	r10, r8
    111e:	2f ef       	ldi	r18, 0xFF	; 255
    1120:	3f e7       	ldi	r19, 0x7F	; 127
    1122:	3e 83       	std	Y+6, r19	; 0x06
    1124:	2d 83       	std	Y+5, r18	; 0x05
    1126:	80 e0       	ldi	r24, 0x00	; 0
    1128:	90 e8       	ldi	r25, 0x80	; 128
    112a:	9c 83       	std	Y+4, r25	; 0x04
    112c:	8b 83       	std	Y+3, r24	; 0x03
    112e:	6b c0       	rjmp	.+214    	; 0x1206 <__stack+0x107>
    1130:	0d 2d       	mov	r16, r13
    1132:	10 e0       	ldi	r17, 0x00	; 0
    1134:	f8 01       	movw	r30, r16
    1136:	75 96       	adiw	r30, 0x15	; 21
    1138:	ee 0f       	add	r30, r30
    113a:	ff 1f       	adc	r31, r31
    113c:	ee 0f       	add	r30, r30
    113e:	ff 1f       	adc	r31, r31
    1140:	e0 5f       	subi	r30, 0xF0	; 240
    1142:	fe 4f       	sbci	r31, 0xFE	; 254
    1144:	80 81       	ld	r24, Z
    1146:	91 81       	ldd	r25, Z+1	; 0x01
    1148:	9a 83       	std	Y+2, r25	; 0x02
    114a:	89 83       	std	Y+1, r24	; 0x01
    114c:	e2 80       	ldd	r14, Z+2	; 0x02
    114e:	f3 80       	ldd	r15, Z+3	; 0x03
    1150:	60 e0       	ldi	r22, 0x00	; 0
    1152:	70 e0       	ldi	r23, 0x00	; 0
    1154:	c7 01       	movw	r24, r14
    1156:	0e 94 a9 1e 	call	0x3d52	; 0x3d52 <CellDataConvertTemperature>
    115a:	88 23       	and	r24, r24
    115c:	f1 f0       	breq	.+60     	; 0x119a <__stack+0x9b>
    115e:	f4 fe       	sbrs	r15, 4
    1160:	03 c0       	rjmp	.+6      	; 0x1168 <__stack+0x69>
    1162:	c7 01       	movw	r24, r14
    1164:	90 6f       	ori	r25, 0xF0	; 240
    1166:	02 c0       	rjmp	.+4      	; 0x116c <__stack+0x6d>
    1168:	c7 01       	movw	r24, r14
    116a:	9f 77       	andi	r25, 0x7F	; 127
    116c:	2b 81       	ldd	r18, Y+3	; 0x03
    116e:	3c 81       	ldd	r19, Y+4	; 0x04
    1170:	28 17       	cp	r18, r24
    1172:	39 07       	cpc	r19, r25
    1174:	14 f4       	brge	.+4      	; 0x117a <__stack+0x7b>
    1176:	9c 83       	std	Y+4, r25	; 0x04
    1178:	8b 83       	std	Y+3, r24	; 0x03
    117a:	2d 81       	ldd	r18, Y+5	; 0x05
    117c:	3e 81       	ldd	r19, Y+6	; 0x06
    117e:	82 17       	cp	r24, r18
    1180:	93 07       	cpc	r25, r19
    1182:	14 f4       	brge	.+4      	; 0x1188 <__stack+0x89>
    1184:	9e 83       	std	Y+6, r25	; 0x06
    1186:	8d 83       	std	Y+5, r24	; 0x05
    1188:	09 2e       	mov	r0, r25
    118a:	00 0c       	add	r0, r0
    118c:	aa 0b       	sbc	r26, r26
    118e:	bb 0b       	sbc	r27, r27
    1190:	88 0e       	add	r8, r24
    1192:	99 1e       	adc	r9, r25
    1194:	aa 1e       	adc	r10, r26
    1196:	bb 1e       	adc	r11, r27
    1198:	33 94       	inc	r3
    119a:	f8 01       	movw	r30, r16
    119c:	75 96       	adiw	r30, 0x15	; 21
    119e:	ee 0f       	add	r30, r30
    11a0:	ff 1f       	adc	r31, r31
    11a2:	ee 0f       	add	r30, r30
    11a4:	ff 1f       	adc	r31, r31
    11a6:	e0 5f       	subi	r30, 0xF0	; 240
    11a8:	fe 4f       	sbci	r31, 0xFE	; 254
    11aa:	80 81       	ld	r24, Z
    11ac:	91 81       	ldd	r25, Z+1	; 0x01
    11ae:	99 23       	and	r25, r25
    11b0:	1c f4       	brge	.+6      	; 0x11b8 <__stack+0xb9>
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <sg_sFrame+0x27>
    11b8:	be 01       	movw	r22, r28
    11ba:	6f 5f       	subi	r22, 0xFF	; 255
    11bc:	7f 4f       	sbci	r23, 0xFF	; 255
    11be:	89 81       	ldd	r24, Y+1	; 0x01
    11c0:	9a 81       	ldd	r25, Y+2	; 0x02
    11c2:	0e 94 ea 1f 	call	0x3fd4	; 0x3fd4 <CellDataConvertVoltage>
    11c6:	88 23       	and	r24, r24
    11c8:	e9 f0       	breq	.+58     	; 0x1204 <__stack+0x105>
    11ca:	20 91 47 01 	lds	r18, 0x0147	; 0x800147 <sg_sFrame+0x37>
    11ce:	30 91 48 01 	lds	r19, 0x0148	; 0x800148 <sg_sFrame+0x38>
    11d2:	89 81       	ldd	r24, Y+1	; 0x01
    11d4:	9a 81       	ldd	r25, Y+2	; 0x02
    11d6:	28 17       	cp	r18, r24
    11d8:	39 07       	cpc	r19, r25
    11da:	20 f4       	brcc	.+8      	; 0x11e4 <__stack+0xe5>
    11dc:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <sg_sFrame+0x38>
    11e0:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <sg_sFrame+0x37>
    11e4:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <sg_sFrame+0x39>
    11e8:	30 91 4a 01 	lds	r19, 0x014A	; 0x80014a <sg_sFrame+0x3a>
    11ec:	82 17       	cp	r24, r18
    11ee:	93 07       	cpc	r25, r19
    11f0:	20 f4       	brcc	.+8      	; 0x11fa <__stack+0xfb>
    11f2:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <sg_sFrame+0x3a>
    11f6:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <sg_sFrame+0x39>
    11fa:	48 0e       	add	r4, r24
    11fc:	59 1e       	adc	r5, r25
    11fe:	61 1c       	adc	r6, r1
    1200:	71 1c       	adc	r7, r1
    1202:	c3 94       	inc	r12
    1204:	d3 94       	inc	r13
    1206:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <sg_sFrame+0x2d>
    120a:	d8 16       	cp	r13, r24
    120c:	08 f4       	brcc	.+2      	; 0x1210 <__stack+0x111>
    120e:	90 cf       	rjmp	.-224    	; 0x1130 <__stack+0x31>
    1210:	cc 20       	and	r12, r12
    1212:	89 f1       	breq	.+98     	; 0x1276 <__stack+0x177>
    1214:	ed e4       	ldi	r30, 0x4D	; 77
    1216:	f1 e0       	ldi	r31, 0x01	; 1
    1218:	40 82       	st	Z, r4
    121a:	51 82       	std	Z+1, r5	; 0x01
    121c:	62 82       	std	Z+2, r6	; 0x02
    121e:	73 82       	std	Z+3, r7	; 0x03
    1220:	60 81       	ld	r22, Z
    1222:	71 81       	ldd	r23, Z+1	; 0x01
    1224:	82 81       	ldd	r24, Z+2	; 0x02
    1226:	93 81       	ldd	r25, Z+3	; 0x03
    1228:	2c 2d       	mov	r18, r12
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	40 e0       	ldi	r20, 0x00	; 0
    122e:	50 e0       	ldi	r21, 0x00	; 0
    1230:	0e 94 37 22 	call	0x446e	; 0x446e <__udivmodsi4>
    1234:	30 93 4c 01 	sts	0x014C, r19	; 0x80014c <sg_sFrame+0x3c>
    1238:	20 93 4b 01 	sts	0x014B, r18	; 0x80014b <sg_sFrame+0x3b>
    123c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    1240:	83 30       	cpi	r24, 0x03	; 3
    1242:	c9 f0       	breq	.+50     	; 0x1276 <__stack+0x177>
    1244:	80 91 19 03 	lds	r24, 0x0319	; 0x800319 <sg_bCellBalancedOnce>
    1248:	81 11       	cpse	r24, r1
    124a:	15 c0       	rjmp	.+42     	; 0x1276 <__stack+0x177>
    124c:	e0 e1       	ldi	r30, 0x10	; 16
    124e:	f1 e0       	ldi	r31, 0x01	; 1
    1250:	27 a9       	ldd	r18, Z+55	; 0x37
    1252:	30 ad       	ldd	r19, Z+56	; 0x38
    1254:	81 ad       	ldd	r24, Z+57	; 0x39
    1256:	92 ad       	ldd	r25, Z+58	; 0x3a
    1258:	28 17       	cp	r18, r24
    125a:	39 07       	cpc	r19, r25
    125c:	60 f0       	brcs	.+24     	; 0x1276 <__stack+0x177>
    125e:	87 a9       	ldd	r24, Z+55	; 0x37
    1260:	90 ad       	ldd	r25, Z+56	; 0x38
    1262:	21 ad       	ldd	r18, Z+57	; 0x39
    1264:	32 ad       	ldd	r19, Z+58	; 0x3a
    1266:	82 1b       	sub	r24, r18
    1268:	93 0b       	sbc	r25, r19
    126a:	80 34       	cpi	r24, 0x40	; 64
    126c:	91 05       	cpc	r25, r1
    126e:	18 f0       	brcs	.+6      	; 0x1276 <__stack+0x177>
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <sg_bCellBalanceReady>
    1276:	33 20       	and	r3, r3
    1278:	c9 f0       	breq	.+50     	; 0x12ac <__stack+0x1ad>
    127a:	23 2d       	mov	r18, r3
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	40 e0       	ldi	r20, 0x00	; 0
    1280:	50 e0       	ldi	r21, 0x00	; 0
    1282:	c5 01       	movw	r24, r10
    1284:	b4 01       	movw	r22, r8
    1286:	0e 94 b9 23 	call	0x4772	; 0x4772 <__divmodsi4>
    128a:	65 e4       	ldi	r22, 0x45	; 69
    128c:	71 e0       	ldi	r23, 0x01	; 1
    128e:	c9 01       	movw	r24, r18
    1290:	0e 94 a9 1e 	call	0x3d52	; 0x3d52 <CellDataConvertTemperature>
    1294:	61 e4       	ldi	r22, 0x41	; 65
    1296:	71 e0       	ldi	r23, 0x01	; 1
    1298:	8b 81       	ldd	r24, Y+3	; 0x03
    129a:	9c 81       	ldd	r25, Y+4	; 0x04
    129c:	0e 94 a9 1e 	call	0x3d52	; 0x3d52 <CellDataConvertTemperature>
    12a0:	63 e4       	ldi	r22, 0x43	; 67
    12a2:	71 e0       	ldi	r23, 0x01	; 1
    12a4:	8d 81       	ldd	r24, Y+5	; 0x05
    12a6:	9e 81       	ldd	r25, Y+6	; 0x06
    12a8:	0e 94 a9 1e 	call	0x3d52	; 0x3d52 <CellDataConvertTemperature>
    12ac:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <sg_bSDCardReady>
    12b0:	88 23       	and	r24, r24
    12b2:	51 f0       	breq	.+20     	; 0x12c8 <__stack+0x1c9>
    12b4:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    12b8:	88 23       	and	r24, r24
    12ba:	31 f0       	breq	.+12     	; 0x12c8 <__stack+0x1c9>
    12bc:	80 e1       	ldi	r24, 0x10	; 16
    12be:	91 e0       	ldi	r25, 0x01	; 1
    12c0:	0e 94 f7 14 	call	0x29ee	; 0x29ee <STORE_WriteFrame>
    12c4:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <sg_bSDCardReady>
    12c8:	0e 94 fe 26 	call	0x4dfc	; 0x4dfc <SendModuleControllerStatus>
    12cc:	26 96       	adiw	r28, 0x06	; 6
    12ce:	0f b6       	in	r0, 0x3f	; 63
    12d0:	f8 94       	cli
    12d2:	de bf       	out	0x3e, r29	; 62
    12d4:	0f be       	out	0x3f, r0	; 63
    12d6:	cd bf       	out	0x3d, r28	; 61
    12d8:	df 91       	pop	r29
    12da:	cf 91       	pop	r28
    12dc:	1f 91       	pop	r17
    12de:	0f 91       	pop	r16
    12e0:	ff 90       	pop	r15
    12e2:	ef 90       	pop	r14
    12e4:	df 90       	pop	r13
    12e6:	cf 90       	pop	r12
    12e8:	bf 90       	pop	r11
    12ea:	af 90       	pop	r10
    12ec:	9f 90       	pop	r9
    12ee:	8f 90       	pop	r8
    12f0:	7f 90       	pop	r7
    12f2:	6f 90       	pop	r6
    12f4:	5f 90       	pop	r5
    12f6:	4f 90       	pop	r4
    12f8:	3f 90       	pop	r3
    12fa:	08 95       	ret

Disassembly of section .text.Delay:

0000429c <Delay>:
    429c:	ab 01       	movw	r20, r22
    429e:	bc 01       	movw	r22, r24
    42a0:	4f 5f       	subi	r20, 0xFF	; 255
    42a2:	5f 4f       	sbci	r21, 0xFF	; 255
    42a4:	6f 4f       	sbci	r22, 0xFF	; 255
    42a6:	7f 4f       	sbci	r23, 0xFF	; 255
    42a8:	76 95       	lsr	r23
    42aa:	67 95       	ror	r22
    42ac:	57 95       	ror	r21
    42ae:	47 95       	ror	r20
    42b0:	96 b5       	in	r25, 0x26	; 38
    42b2:	17 c0       	rjmp	.+46     	; 0x42e2 <Delay+0x46>
    42b4:	86 b5       	in	r24, 0x26	; 38
    42b6:	98 17       	cp	r25, r24
    42b8:	e9 f3       	breq	.-6      	; 0x42b4 <Delay+0x18>
    42ba:	26 b5       	in	r18, 0x26	; 38
    42bc:	82 2f       	mov	r24, r18
    42be:	89 1b       	sub	r24, r25
    42c0:	90 e0       	ldi	r25, 0x00	; 0
    42c2:	a0 e0       	ldi	r26, 0x00	; 0
    42c4:	b0 e0       	ldi	r27, 0x00	; 0
    42c6:	48 17       	cp	r20, r24
    42c8:	59 07       	cpc	r21, r25
    42ca:	6a 07       	cpc	r22, r26
    42cc:	7b 07       	cpc	r23, r27
    42ce:	28 f0       	brcs	.+10     	; 0x42da <Delay+0x3e>
    42d0:	48 1b       	sub	r20, r24
    42d2:	59 0b       	sbc	r21, r25
    42d4:	6a 0b       	sbc	r22, r26
    42d6:	7b 0b       	sbc	r23, r27
    42d8:	03 c0       	rjmp	.+6      	; 0x42e0 <Delay+0x44>
    42da:	40 e0       	ldi	r20, 0x00	; 0
    42dc:	50 e0       	ldi	r21, 0x00	; 0
    42de:	ba 01       	movw	r22, r20
    42e0:	92 2f       	mov	r25, r18
    42e2:	41 15       	cp	r20, r1
    42e4:	51 05       	cpc	r21, r1
    42e6:	61 05       	cpc	r22, r1
    42e8:	71 05       	cpc	r23, r1
    42ea:	21 f7       	brne	.-56     	; 0x42b4 <Delay+0x18>
    42ec:	08 95       	ret

Disassembly of section .text.PlatformAssert:

000047f8 <PlatformAssert>:
    47f8:	5f 93       	push	r21
    47fa:	4f 93       	push	r20
    47fc:	8f 93       	push	r24
    47fe:	7f 93       	push	r23
    4800:	6f 93       	push	r22
    4802:	88 e3       	ldi	r24, 0x38	; 56
    4804:	92 e0       	ldi	r25, 0x02	; 2
    4806:	a0 e0       	ldi	r26, 0x00	; 0
    4808:	af 93       	push	r26
    480a:	9f 93       	push	r25
    480c:	8f 93       	push	r24
    480e:	0e 94 1e 27 	call	0x4e3c	; 0x4e3c <DebugOut>
    4812:	8d b7       	in	r24, 0x3d	; 61
    4814:	9e b7       	in	r25, 0x3e	; 62
    4816:	08 96       	adiw	r24, 0x08	; 8
    4818:	0f b6       	in	r0, 0x3f	; 63
    481a:	f8 94       	cli
    481c:	9e bf       	out	0x3e, r25	; 62
    481e:	0f be       	out	0x3f, r0	; 63
    4820:	8d bf       	out	0x3d, r24	; 61
    4822:	08 95       	ret

Disassembly of section .text.ModuleControllerStateHandle:

00001a06 <ModuleControllerStateHandle>:
    1a06:	1f 93       	push	r17
    1a08:	cf 93       	push	r28
    1a0a:	df 93       	push	r29
    1a0c:	d0 91 06 01 	lds	r29, 0x0106	; 0x800106 <sg_eModuleControllerStateTarget>
    1a10:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <sg_eModuleControllerStateMax>
    1a14:	8d 17       	cp	r24, r29
    1a16:	30 f0       	brcs	.+12     	; 0x1a24 <ModuleControllerStateHandle+0x1e>
    1a18:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    1a1c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <sg_eModuleControllerStateMax>
    1a20:	89 17       	cp	r24, r25
    1a22:	10 f4       	brcc	.+4      	; 0x1a28 <ModuleControllerStateHandle+0x22>
    1a24:	d0 91 05 01 	lds	r29, 0x0105	; 0x800105 <sg_eModuleControllerStateMax>
    1a28:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    1a2c:	d8 17       	cp	r29, r24
    1a2e:	09 f4       	brne	.+2      	; 0x1a32 <ModuleControllerStateHandle+0x2c>
    1a30:	f5 c0       	rjmp	.+490    	; 0x1c1c <ModuleControllerStateHandle+0x216>
    1a32:	d2 30       	cpi	r29, 0x02	; 2
    1a34:	09 f4       	brne	.+2      	; 0x1a38 <ModuleControllerStateHandle+0x32>
    1a36:	72 c0       	rjmp	.+228    	; 0x1b1c <ModuleControllerStateHandle+0x116>
    1a38:	28 f4       	brcc	.+10     	; 0x1a44 <ModuleControllerStateHandle+0x3e>
    1a3a:	dd 23       	and	r29, r29
    1a3c:	89 f0       	breq	.+34     	; 0x1a60 <ModuleControllerStateHandle+0x5a>
    1a3e:	d1 30       	cpi	r29, 0x01	; 1
    1a40:	e1 f1       	breq	.+120    	; 0x1aba <ModuleControllerStateHandle+0xb4>
    1a42:	e0 c0       	rjmp	.+448    	; 0x1c04 <ModuleControllerStateHandle+0x1fe>
    1a44:	d3 30       	cpi	r29, 0x03	; 3
    1a46:	09 f4       	brne	.+2      	; 0x1a4a <ModuleControllerStateHandle+0x44>
    1a48:	a9 c0       	rjmp	.+338    	; 0x1b9c <ModuleControllerStateHandle+0x196>
    1a4a:	d5 30       	cpi	r29, 0x05	; 5
    1a4c:	09 f0       	breq	.+2      	; 0x1a50 <ModuleControllerStateHandle+0x4a>
    1a4e:	da c0       	rjmp	.+436    	; 0x1c04 <ModuleControllerStateHandle+0x1fe>
    1a50:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <sg_eModuleControllerStateCurrent>
    1a54:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <sg_eModuleControllerStateTarget>
    1a58:	d0 91 07 01 	lds	r29, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    1a5c:	0e 94 3a 27 	call	0x4e74	; 0x4e74 <ADCSetPowerOn>
    1a60:	88 b1       	in	r24, 0x08	; 8
    1a62:	8f 7e       	andi	r24, 0xEF	; 239
    1a64:	88 b9       	out	0x08, r24	; 8
    1a66:	68 e8       	ldi	r22, 0x88	; 136
    1a68:	73 e1       	ldi	r23, 0x13	; 19
    1a6a:	80 e0       	ldi	r24, 0x00	; 0
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	0e 94 4e 21 	call	0x429c	; 0x429c <Delay>
    1a72:	8e b1       	in	r24, 0x0e	; 14
    1a74:	8d 7f       	andi	r24, 0xFD	; 253
    1a76:	8e b9       	out	0x0e, r24	; 14
    1a78:	68 e8       	ldi	r22, 0x88	; 136
    1a7a:	73 e1       	ldi	r23, 0x13	; 19
    1a7c:	80 e0       	ldi	r24, 0x00	; 0
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	0e 94 4e 21 	call	0x429c	; 0x429c <Delay>
    1a84:	eb e6       	ldi	r30, 0x6B	; 107
    1a86:	f0 e0       	ldi	r31, 0x00	; 0
    1a88:	80 81       	ld	r24, Z
    1a8a:	8d 7f       	andi	r24, 0xFD	; 253
    1a8c:	80 83       	st	Z, r24
    1a8e:	e8 e6       	ldi	r30, 0x68	; 104
    1a90:	f0 e0       	ldi	r31, 0x00	; 0
    1a92:	80 81       	ld	r24, Z
    1a94:	8d 7f       	andi	r24, 0xFD	; 253
    1a96:	80 83       	st	Z, r24
    1a98:	81 e0       	ldi	r24, 0x01	; 1
    1a9a:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <sg_bCellBalanceReady>
    1a9e:	10 92 19 03 	sts	0x0319, r1	; 0x800319 <sg_bCellBalancedOnce>
    1aa2:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <sg_bStopDischarge>
    1aa6:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <sg_bSDCardReady>
    1aaa:	88 23       	and	r24, r24
    1aac:	09 f4       	brne	.+2      	; 0x1ab0 <ModuleControllerStateHandle+0xaa>
    1aae:	b2 c0       	rjmp	.+356    	; 0x1c14 <ModuleControllerStateHandle+0x20e>
    1ab0:	0e 94 78 20 	call	0x40f0	; 0x40f0 <STORE_EndSession>
    1ab4:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <sg_bSDCardReady>
    1ab8:	ad c0       	rjmp	.+346    	; 0x1c14 <ModuleControllerStateHandle+0x20e>
    1aba:	88 b1       	in	r24, 0x08	; 8
    1abc:	8f 7e       	andi	r24, 0xEF	; 239
    1abe:	88 b9       	out	0x08, r24	; 8
    1ac0:	68 e8       	ldi	r22, 0x88	; 136
    1ac2:	73 e1       	ldi	r23, 0x13	; 19
    1ac4:	80 e0       	ldi	r24, 0x00	; 0
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	0e 94 4e 21 	call	0x429c	; 0x429c <Delay>
    1acc:	eb e6       	ldi	r30, 0x6B	; 107
    1ace:	f0 e0       	ldi	r31, 0x00	; 0
    1ad0:	80 81       	ld	r24, Z
    1ad2:	8d 7f       	andi	r24, 0xFD	; 253
    1ad4:	80 83       	st	Z, r24
    1ad6:	e8 e6       	ldi	r30, 0x68	; 104
    1ad8:	f0 e0       	ldi	r31, 0x00	; 0
    1ada:	80 81       	ld	r24, Z
    1adc:	8d 7f       	andi	r24, 0xFD	; 253
    1ade:	80 83       	st	Z, r24
    1ae0:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <sg_bModuleRegistered>
    1ae4:	88 23       	and	r24, r24
    1ae6:	19 f0       	breq	.+6      	; 0x1aee <ModuleControllerStateHandle+0xe8>
    1ae8:	8e b1       	in	r24, 0x0e	; 14
    1aea:	82 60       	ori	r24, 0x02	; 2
    1aec:	8e b9       	out	0x0e, r24	; 14
    1aee:	68 e8       	ldi	r22, 0x88	; 136
    1af0:	73 e1       	ldi	r23, 0x13	; 19
    1af2:	80 e0       	ldi	r24, 0x00	; 0
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	0e 94 4e 21 	call	0x429c	; 0x429c <Delay>
    1afa:	81 e0       	ldi	r24, 0x01	; 1
    1afc:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <sg_bCellBalanceReady>
    1b00:	10 92 19 03 	sts	0x0319, r1	; 0x800319 <sg_bCellBalancedOnce>
    1b04:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <sg_bStopDischarge>
    1b08:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <sg_bSDCardReady>
    1b0c:	88 23       	and	r24, r24
    1b0e:	09 f4       	brne	.+2      	; 0x1b12 <ModuleControllerStateHandle+0x10c>
    1b10:	81 c0       	rjmp	.+258    	; 0x1c14 <ModuleControllerStateHandle+0x20e>
    1b12:	0e 94 24 21 	call	0x4248	; 0x4248 <STORE_StartNewSession>
    1b16:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <sg_bSDCardReady>
    1b1a:	7c c0       	rjmp	.+248    	; 0x1c14 <ModuleControllerStateHandle+0x20e>
    1b1c:	61 99       	sbic	0x0c, 1	; 12
    1b1e:	0d c0       	rjmp	.+26     	; 0x1b3a <ModuleControllerStateHandle+0x134>
    1b20:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <sg_bModuleRegistered>
    1b24:	88 23       	and	r24, r24
    1b26:	19 f0       	breq	.+6      	; 0x1b2e <ModuleControllerStateHandle+0x128>
    1b28:	8e b1       	in	r24, 0x0e	; 14
    1b2a:	82 60       	ori	r24, 0x02	; 2
    1b2c:	8e b9       	out	0x0e, r24	; 14
    1b2e:	68 e8       	ldi	r22, 0x88	; 136
    1b30:	73 e1       	ldi	r23, 0x13	; 19
    1b32:	80 e0       	ldi	r24, 0x00	; 0
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	0e 94 4e 21 	call	0x429c	; 0x429c <Delay>
    1b3a:	cb e0       	ldi	r28, 0x0B	; 11
    1b3c:	2a c0       	rjmp	.+84     	; 0x1b92 <ModuleControllerStateHandle+0x18c>
    1b3e:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <sg_bModuleRegistered>
    1b42:	88 23       	and	r24, r24
    1b44:	49 f0       	breq	.+18     	; 0x1b58 <ModuleControllerStateHandle+0x152>
    1b46:	88 b1       	in	r24, 0x08	; 8
    1b48:	80 61       	ori	r24, 0x10	; 16
    1b4a:	88 b9       	out	0x08, r24	; 8
    1b4c:	88 b1       	in	r24, 0x08	; 8
    1b4e:	8f 77       	andi	r24, 0x7F	; 127
    1b50:	88 b9       	out	0x08, r24	; 8
    1b52:	88 b1       	in	r24, 0x08	; 8
    1b54:	80 68       	ori	r24, 0x80	; 128
    1b56:	88 b9       	out	0x08, r24	; 8
    1b58:	68 ee       	ldi	r22, 0xE8	; 232
    1b5a:	73 e0       	ldi	r23, 0x03	; 3
    1b5c:	80 e0       	ldi	r24, 0x00	; 0
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	0e 94 4e 21 	call	0x429c	; 0x429c <Delay>
    1b64:	88 b1       	in	r24, 0x08	; 8
    1b66:	8f 7e       	andi	r24, 0xEF	; 239
    1b68:	88 b9       	out	0x08, r24	; 8
    1b6a:	68 e8       	ldi	r22, 0x88	; 136
    1b6c:	73 e1       	ldi	r23, 0x13	; 19
    1b6e:	80 e0       	ldi	r24, 0x00	; 0
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	0e 94 4e 21 	call	0x429c	; 0x429c <Delay>
    1b76:	60 e5       	ldi	r22, 0x50	; 80
    1b78:	73 ec       	ldi	r23, 0xC3	; 195
    1b7a:	80 e0       	ldi	r24, 0x00	; 0
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	0e 94 4e 21 	call	0x429c	; 0x429c <Delay>
    1b82:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <sg_bOvercurrentSignal>
    1b86:	88 23       	and	r24, r24
    1b88:	19 f0       	breq	.+6      	; 0x1b90 <ModuleControllerStateHandle+0x18a>
    1b8a:	10 92 17 03 	sts	0x0317, r1	; 0x800317 <sg_bOvercurrentSignal>
    1b8e:	01 c0       	rjmp	.+2      	; 0x1b92 <ModuleControllerStateHandle+0x18c>
    1b90:	c1 2f       	mov	r28, r17
    1b92:	1f ef       	ldi	r17, 0xFF	; 255
    1b94:	1c 0f       	add	r17, r28
    1b96:	c1 11       	cpse	r28, r1
    1b98:	d2 cf       	rjmp	.-92     	; 0x1b3e <ModuleControllerStateHandle+0x138>
    1b9a:	3c c0       	rjmp	.+120    	; 0x1c14 <ModuleControllerStateHandle+0x20e>
    1b9c:	61 99       	sbic	0x0c, 1	; 12
    1b9e:	0d c0       	rjmp	.+26     	; 0x1bba <ModuleControllerStateHandle+0x1b4>
    1ba0:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <sg_bModuleRegistered>
    1ba4:	88 23       	and	r24, r24
    1ba6:	19 f0       	breq	.+6      	; 0x1bae <ModuleControllerStateHandle+0x1a8>
    1ba8:	8e b1       	in	r24, 0x0e	; 14
    1baa:	82 60       	ori	r24, 0x02	; 2
    1bac:	8e b9       	out	0x0e, r24	; 14
    1bae:	68 e8       	ldi	r22, 0x88	; 136
    1bb0:	73 e1       	ldi	r23, 0x13	; 19
    1bb2:	80 e0       	ldi	r24, 0x00	; 0
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	0e 94 4e 21 	call	0x429c	; 0x429c <Delay>
    1bba:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <sg_bModuleRegistered>
    1bbe:	88 23       	and	r24, r24
    1bc0:	49 f0       	breq	.+18     	; 0x1bd4 <ModuleControllerStateHandle+0x1ce>
    1bc2:	88 b1       	in	r24, 0x08	; 8
    1bc4:	80 61       	ori	r24, 0x10	; 16
    1bc6:	88 b9       	out	0x08, r24	; 8
    1bc8:	88 b1       	in	r24, 0x08	; 8
    1bca:	8f 77       	andi	r24, 0x7F	; 127
    1bcc:	88 b9       	out	0x08, r24	; 8
    1bce:	88 b1       	in	r24, 0x08	; 8
    1bd0:	80 68       	ori	r24, 0x80	; 128
    1bd2:	88 b9       	out	0x08, r24	; 8
    1bd4:	68 e8       	ldi	r22, 0x88	; 136
    1bd6:	73 e1       	ldi	r23, 0x13	; 19
    1bd8:	80 e0       	ldi	r24, 0x00	; 0
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	0e 94 4e 21 	call	0x429c	; 0x429c <Delay>
    1be0:	10 92 1a 03 	sts	0x031A, r1	; 0x80031a <sg_bCellBalanceReady>
    1be4:	10 92 19 03 	sts	0x0319, r1	; 0x800319 <sg_bCellBalancedOnce>
    1be8:	81 e0       	ldi	r24, 0x01	; 1
    1bea:	80 93 18 03 	sts	0x0318, r24	; 0x800318 <sg_bStopDischarge>
    1bee:	eb e6       	ldi	r30, 0x6B	; 107
    1bf0:	f0 e0       	ldi	r31, 0x00	; 0
    1bf2:	80 81       	ld	r24, Z
    1bf4:	82 60       	ori	r24, 0x02	; 2
    1bf6:	80 83       	st	Z, r24
    1bf8:	e8 e6       	ldi	r30, 0x68	; 104
    1bfa:	f0 e0       	ldi	r31, 0x00	; 0
    1bfc:	80 81       	ld	r24, Z
    1bfe:	82 60       	ori	r24, 0x02	; 2
    1c00:	80 83       	st	Z, r24
    1c02:	08 c0       	rjmp	.+16     	; 0x1c14 <ModuleControllerStateHandle+0x20e>
    1c04:	48 ef       	ldi	r20, 0xF8	; 248
    1c06:	53 e0       	ldi	r21, 0x03	; 3
    1c08:	67 e4       	ldi	r22, 0x47	; 71
    1c0a:	72 e0       	ldi	r23, 0x02	; 2
    1c0c:	80 e0       	ldi	r24, 0x00	; 0
    1c0e:	0e 94 fc 23 	call	0x47f8	; 0x47f8 <PlatformAssert>
    1c12:	d5 e0       	ldi	r29, 0x05	; 5
    1c14:	d0 93 07 01 	sts	0x0107, r29	; 0x800107 <sg_eModuleControllerStateCurrent>
    1c18:	0e 94 fe 26 	call	0x4dfc	; 0x4dfc <SendModuleControllerStatus>
    1c1c:	df 91       	pop	r29
    1c1e:	cf 91       	pop	r28
    1c20:	1f 91       	pop	r17
    1c22:	08 95       	ret

Disassembly of section .text.PlatformGetRegistrationID:

00004eaa <PlatformGetRegistrationID>:
    4eaa:	80 91 27 03 	lds	r24, 0x0327	; 0x800327 <sg_u8ModuleRegistrationID>
    4eae:	08 95       	ret

Disassembly of section .text.SetSysclock:

00004e80 <SetSysclock>:
    4e80:	e1 e6       	ldi	r30, 0x61	; 97
    4e82:	f0 e0       	ldi	r31, 0x00	; 0
    4e84:	80 e8       	ldi	r24, 0x80	; 128
    4e86:	80 83       	st	Z, r24
    4e88:	10 82       	st	Z, r1
    4e8a:	08 95       	ret

Disassembly of section .text.ModuleControllerGetUniqueID:

00003ae4 <ModuleControllerGetUniqueID>:
    3ae4:	cf 92       	push	r12
    3ae6:	df 92       	push	r13
    3ae8:	ef 92       	push	r14
    3aea:	ff 92       	push	r15
    3aec:	80 e0       	ldi	r24, 0x00	; 0
    3aee:	90 e0       	ldi	r25, 0x00	; 0
    3af0:	0e 94 d1 26 	call	0x4da2	; 0x4da2 <EEPROMRead>
    3af4:	c8 2e       	mov	r12, r24
    3af6:	d1 2c       	mov	r13, r1
    3af8:	e1 2c       	mov	r14, r1
    3afa:	f1 2c       	mov	r15, r1
    3afc:	81 e0       	ldi	r24, 0x01	; 1
    3afe:	90 e0       	ldi	r25, 0x00	; 0
    3b00:	0e 94 d1 26 	call	0x4da2	; 0x4da2 <EEPROMRead>
    3b04:	90 e0       	ldi	r25, 0x00	; 0
    3b06:	a0 e0       	ldi	r26, 0x00	; 0
    3b08:	b0 e0       	ldi	r27, 0x00	; 0
    3b0a:	ba 2f       	mov	r27, r26
    3b0c:	a9 2f       	mov	r26, r25
    3b0e:	98 2f       	mov	r25, r24
    3b10:	88 27       	eor	r24, r24
    3b12:	c8 2a       	or	r12, r24
    3b14:	d9 2a       	or	r13, r25
    3b16:	ea 2a       	or	r14, r26
    3b18:	fb 2a       	or	r15, r27
    3b1a:	82 e0       	ldi	r24, 0x02	; 2
    3b1c:	90 e0       	ldi	r25, 0x00	; 0
    3b1e:	0e 94 d1 26 	call	0x4da2	; 0x4da2 <EEPROMRead>
    3b22:	90 e0       	ldi	r25, 0x00	; 0
    3b24:	a0 e0       	ldi	r26, 0x00	; 0
    3b26:	b0 e0       	ldi	r27, 0x00	; 0
    3b28:	dc 01       	movw	r26, r24
    3b2a:	99 27       	eor	r25, r25
    3b2c:	88 27       	eor	r24, r24
    3b2e:	c8 2a       	or	r12, r24
    3b30:	d9 2a       	or	r13, r25
    3b32:	ea 2a       	or	r14, r26
    3b34:	fb 2a       	or	r15, r27
    3b36:	83 e0       	ldi	r24, 0x03	; 3
    3b38:	90 e0       	ldi	r25, 0x00	; 0
    3b3a:	0e 94 d1 26 	call	0x4da2	; 0x4da2 <EEPROMRead>
    3b3e:	90 e0       	ldi	r25, 0x00	; 0
    3b40:	a0 e0       	ldi	r26, 0x00	; 0
    3b42:	b0 e0       	ldi	r27, 0x00	; 0
    3b44:	b8 2f       	mov	r27, r24
    3b46:	aa 27       	eor	r26, r26
    3b48:	99 27       	eor	r25, r25
    3b4a:	88 27       	eor	r24, r24
    3b4c:	bc 01       	movw	r22, r24
    3b4e:	cd 01       	movw	r24, r26
    3b50:	6c 29       	or	r22, r12
    3b52:	7d 29       	or	r23, r13
    3b54:	8e 29       	or	r24, r14
    3b56:	9f 29       	or	r25, r15
    3b58:	ff 90       	pop	r15
    3b5a:	ef 90       	pop	r14
    3b5c:	df 90       	pop	r13
    3b5e:	cf 90       	pop	r12
    3b60:	08 95       	ret

Disassembly of section .text.TimerInit:

000042ee <TimerInit>:
    42ee:	14 bc       	out	0x24, r1	; 36
    42f0:	92 e0       	ldi	r25, 0x02	; 2
    42f2:	95 bd       	out	0x25, r25	; 37
    42f4:	a4 e6       	ldi	r26, 0x64	; 100
    42f6:	b0 e0       	ldi	r27, 0x00	; 0
    42f8:	8c 91       	ld	r24, X
    42fa:	87 7f       	andi	r24, 0xF7	; 247
    42fc:	8c 93       	st	X, r24
    42fe:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f0080>
    4302:	84 e0       	ldi	r24, 0x04	; 4
    4304:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f0081>
    4308:	96 bb       	out	0x16, r25	; 22
    430a:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f0084>
    430e:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f0085>
    4312:	8b 5c       	subi	r24, 0xCB	; 203
    4314:	93 4f       	sbci	r25, 0xF3	; 243
    4316:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f0089>
    431a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f0088>
    431e:	ef e6       	ldi	r30, 0x6F	; 111
    4320:	f0 e0       	ldi	r31, 0x00	; 0
    4322:	80 81       	ld	r24, Z
    4324:	82 60       	ori	r24, 0x02	; 2
    4326:	80 83       	st	Z, r24
    4328:	8c 91       	ld	r24, X
    432a:	8f 7e       	andi	r24, 0xEF	; 239
    432c:	8c 93       	st	X, r24
    432e:	ae e6       	ldi	r26, 0x6E	; 110
    4330:	b0 e0       	ldi	r27, 0x00	; 0
    4332:	8c 91       	ld	r24, X
    4334:	8e 7f       	andi	r24, 0xFE	; 254
    4336:	8c 93       	st	X, r24
    4338:	80 81       	ld	r24, Z
    433a:	8e 7f       	andi	r24, 0xFE	; 254
    433c:	80 83       	st	Z, r24
    433e:	08 95       	ret

Disassembly of section .text.__vector_12:

000033e4 <__vector_12>:
    33e4:	78 94       	sei
    33e6:	1f 92       	push	r1
    33e8:	0f 92       	push	r0
    33ea:	0f b6       	in	r0, 0x3f	; 63
    33ec:	0f 92       	push	r0
    33ee:	11 24       	eor	r1, r1
    33f0:	8f 93       	push	r24
    33f2:	9f 93       	push	r25
    33f4:	ef 93       	push	r30
    33f6:	ff 93       	push	r31
    33f8:	82 e0       	ldi	r24, 0x02	; 2
    33fa:	86 bb       	out	0x16, r24	; 22
    33fc:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f0084>
    3400:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f0085>
    3404:	8b 5c       	subi	r24, 0xCB	; 203
    3406:	93 4f       	sbci	r25, 0xF3	; 243
    3408:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f0089>
    340c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f0088>
    3410:	ef e6       	ldi	r30, 0x6F	; 111
    3412:	f0 e0       	ldi	r31, 0x00	; 0
    3414:	80 81       	ld	r24, Z
    3416:	82 60       	ori	r24, 0x02	; 2
    3418:	80 83       	st	Z, r24
    341a:	81 e0       	ldi	r24, 0x01	; 1
    341c:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <sg_bNewTick>
    3420:	80 91 6a 09 	lds	r24, 0x096A	; 0x80096a <sg_u8CellFrameTimer>
    3424:	8f 5f       	subi	r24, 0xFF	; 255
    3426:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8CellFrameTimer>
    342a:	80 91 6a 09 	lds	r24, 0x096A	; 0x80096a <sg_u8CellFrameTimer>
    342e:	83 30       	cpi	r24, 0x03	; 3
    3430:	78 f0       	brcs	.+30     	; 0x3450 <__vector_12+0x6c>
    3432:	10 92 6a 09 	sts	0x096A, r1	; 0x80096a <sg_u8CellFrameTimer>
    3436:	81 e0       	ldi	r24, 0x01	; 1
    3438:	80 93 69 09 	sts	0x0969, r24	; 0x800969 <sg_bFrameStart>
    343c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <sg_eFrameStatus>
    3440:	81 30       	cpi	r24, 0x01	; 1
    3442:	19 f4       	brne	.+6      	; 0x344a <__vector_12+0x66>
    3444:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <sg_eFrameStatus>
    3448:	03 c0       	rjmp	.+6      	; 0x3450 <__vector_12+0x6c>
    344a:	81 e0       	ldi	r24, 0x01	; 1
    344c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <sg_eFrameStatus>
    3450:	80 91 67 09 	lds	r24, 0x0967	; 0x800967 <sg_u8TicksSinceLastPackControllerMessage>
    3454:	8f 3f       	cpi	r24, 0xFF	; 255
    3456:	29 f0       	breq	.+10     	; 0x3462 <__vector_12+0x7e>
    3458:	80 91 67 09 	lds	r24, 0x0967	; 0x800967 <sg_u8TicksSinceLastPackControllerMessage>
    345c:	8f 5f       	subi	r24, 0xFF	; 255
    345e:	80 93 67 09 	sts	0x0967, r24	; 0x800967 <sg_u8TicksSinceLastPackControllerMessage>
    3462:	80 91 67 09 	lds	r24, 0x0967	; 0x800967 <sg_u8TicksSinceLastPackControllerMessage>
    3466:	8f 36       	cpi	r24, 0x6F	; 111
    3468:	40 f0       	brcs	.+16     	; 0x347a <__vector_12+0x96>
    346a:	80 91 67 09 	lds	r24, 0x0967	; 0x800967 <sg_u8TicksSinceLastPackControllerMessage>
    346e:	8f 56       	subi	r24, 0x6F	; 111
    3470:	80 93 67 09 	sts	0x0967, r24	; 0x800967 <sg_u8TicksSinceLastPackControllerMessage>
    3474:	81 e0       	ldi	r24, 0x01	; 1
    3476:	80 93 1f 03 	sts	0x031F, r24	; 0x80031f <sg_bPackControllerTimeout>
    347a:	80 91 68 09 	lds	r24, 0x0968	; 0x800968 <sg_u8CellStringPowerTimer>
    347e:	88 23       	and	r24, r24
    3480:	29 f0       	breq	.+10     	; 0x348c <__vector_12+0xa8>
    3482:	80 91 68 09 	lds	r24, 0x0968	; 0x800968 <sg_u8CellStringPowerTimer>
    3486:	81 50       	subi	r24, 0x01	; 1
    3488:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <sg_u8CellStringPowerTimer>
    348c:	ff 91       	pop	r31
    348e:	ef 91       	pop	r30
    3490:	9f 91       	pop	r25
    3492:	8f 91       	pop	r24
    3494:	0f 90       	pop	r0
    3496:	0f be       	out	0x3f, r0	; 63
    3498:	0f 90       	pop	r0
    349a:	1f 90       	pop	r1
    349c:	18 95       	reti

Disassembly of section .text.WatchdogReset:

00004eb8 <WatchdogReset>:
    4eb8:	08 95       	ret

Disassembly of section .text.WatchdogOff:

00004cd4 <WatchdogOff>:
    4cd4:	a8 95       	wdr
    4cd6:	0f b6       	in	r0, 0x3f	; 63
    4cd8:	f8 94       	cli
    4cda:	a8 95       	wdr
    4cdc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f0060>
    4ce0:	88 61       	ori	r24, 0x18	; 24
    4ce2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f0060>
    4ce6:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f0060>
    4cea:	0f be       	out	0x3f, r0	; 63
    4cec:	08 95       	ret

Disassembly of section .text.__vector_28:

00004340 <__vector_28>:
    4340:	1f 92       	push	r1
    4342:	0f 92       	push	r0
    4344:	0f b6       	in	r0, 0x3f	; 63
    4346:	0f 92       	push	r0
    4348:	11 24       	eor	r1, r1
    434a:	2f 93       	push	r18
    434c:	3f 93       	push	r19
    434e:	4f 93       	push	r20
    4350:	5f 93       	push	r21
    4352:	6f 93       	push	r22
    4354:	7f 93       	push	r23
    4356:	8f 93       	push	r24
    4358:	9f 93       	push	r25
    435a:	af 93       	push	r26
    435c:	bf 93       	push	r27
    435e:	ef 93       	push	r30
    4360:	ff 93       	push	r31
    4362:	44 e0       	ldi	r20, 0x04	; 4
    4364:	53 e0       	ldi	r21, 0x03	; 3
    4366:	67 e4       	ldi	r22, 0x47	; 71
    4368:	72 e0       	ldi	r23, 0x02	; 2
    436a:	80 e0       	ldi	r24, 0x00	; 0
    436c:	0e 94 fc 23 	call	0x47f8	; 0x47f8 <PlatformAssert>
    4370:	ff 91       	pop	r31
    4372:	ef 91       	pop	r30
    4374:	bf 91       	pop	r27
    4376:	af 91       	pop	r26
    4378:	9f 91       	pop	r25
    437a:	8f 91       	pop	r24
    437c:	7f 91       	pop	r23
    437e:	6f 91       	pop	r22
    4380:	5f 91       	pop	r21
    4382:	4f 91       	pop	r20
    4384:	3f 91       	pop	r19
    4386:	2f 91       	pop	r18
    4388:	0f 90       	pop	r0
    438a:	0f be       	out	0x3f, r0	; 63
    438c:	0f 90       	pop	r0
    438e:	1f 90       	pop	r1
    4390:	18 95       	reti

Disassembly of section .text.__vector_23:

000037ba <__vector_23>:
    37ba:	78 94       	sei
    37bc:	1f 92       	push	r1
    37be:	0f 92       	push	r0
    37c0:	0f b6       	in	r0, 0x3f	; 63
    37c2:	0f 92       	push	r0
    37c4:	11 24       	eor	r1, r1
    37c6:	2f 93       	push	r18
    37c8:	3f 93       	push	r19
    37ca:	4f 93       	push	r20
    37cc:	5f 93       	push	r21
    37ce:	6f 93       	push	r22
    37d0:	7f 93       	push	r23
    37d2:	8f 93       	push	r24
    37d4:	9f 93       	push	r25
    37d6:	af 93       	push	r26
    37d8:	bf 93       	push	r27
    37da:	ef 93       	push	r30
    37dc:	ff 93       	push	r31
    37de:	96 b1       	in	r25, 0x06	; 6
    37e0:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    37e4:	83 30       	cpi	r24, 0x03	; 3
    37e6:	21 f0       	breq	.+8      	; 0x37f0 <__vector_23+0x36>
    37e8:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    37ec:	82 30       	cpi	r24, 0x02	; 2
    37ee:	c9 f4       	brne	.+50     	; 0x3822 <__vector_23+0x68>
    37f0:	91 ff       	sbrs	r25, 1
    37f2:	17 c0       	rjmp	.+46     	; 0x3822 <__vector_23+0x68>
    37f4:	88 b1       	in	r24, 0x08	; 8
    37f6:	8f 7e       	andi	r24, 0xEF	; 239
    37f8:	88 b9       	out	0x08, r24	; 8
    37fa:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    37fe:	83 30       	cpi	r24, 0x03	; 3
    3800:	19 f4       	brne	.+6      	; 0x3808 <__vector_23+0x4e>
    3802:	81 e0       	ldi	r24, 0x01	; 1
    3804:	0e 94 4b 27 	call	0x4e96	; 0x4e96 <ModuleControllerStateSet>
    3808:	eb e6       	ldi	r30, 0x6B	; 107
    380a:	f0 e0       	ldi	r31, 0x00	; 0
    380c:	80 81       	ld	r24, Z
    380e:	8d 7f       	andi	r24, 0xFD	; 253
    3810:	80 83       	st	Z, r24
    3812:	e8 e6       	ldi	r30, 0x68	; 104
    3814:	f0 e0       	ldi	r31, 0x00	; 0
    3816:	80 81       	ld	r24, Z
    3818:	8d 7f       	andi	r24, 0xFD	; 253
    381a:	80 83       	st	Z, r24
    381c:	81 e0       	ldi	r24, 0x01	; 1
    381e:	80 93 17 03 	sts	0x0317, r24	; 0x800317 <sg_bOvercurrentSignal>
    3822:	ff 91       	pop	r31
    3824:	ef 91       	pop	r30
    3826:	bf 91       	pop	r27
    3828:	af 91       	pop	r26
    382a:	9f 91       	pop	r25
    382c:	8f 91       	pop	r24
    382e:	7f 91       	pop	r23
    3830:	6f 91       	pop	r22
    3832:	5f 91       	pop	r21
    3834:	4f 91       	pop	r20
    3836:	3f 91       	pop	r19
    3838:	2f 91       	pop	r18
    383a:	0f 90       	pop	r0
    383c:	0f be       	out	0x3f, r0	; 63
    383e:	0f 90       	pop	r0
    3840:	1f 90       	pop	r1
    3842:	18 95       	reti

Disassembly of section .text.__vector_24:

00004392 <__vector_24>:
    4392:	78 94       	sei
    4394:	1f 92       	push	r1
    4396:	0f 92       	push	r0
    4398:	0f b6       	in	r0, 0x3f	; 63
    439a:	0f 92       	push	r0
    439c:	11 24       	eor	r1, r1
    439e:	2f 93       	push	r18
    43a0:	3f 93       	push	r19
    43a2:	4f 93       	push	r20
    43a4:	5f 93       	push	r21
    43a6:	6f 93       	push	r22
    43a8:	7f 93       	push	r23
    43aa:	8f 93       	push	r24
    43ac:	9f 93       	push	r25
    43ae:	af 93       	push	r26
    43b0:	bf 93       	push	r27
    43b2:	ef 93       	push	r30
    43b4:	ff 93       	push	r31
    43b6:	8b b1       	in	r24, 0x0b	; 11
    43b8:	0e 94 77 26 	call	0x4cee	; 0x4cee <Check5VLoss>
    43bc:	ff 91       	pop	r31
    43be:	ef 91       	pop	r30
    43c0:	bf 91       	pop	r27
    43c2:	af 91       	pop	r26
    43c4:	9f 91       	pop	r25
    43c6:	8f 91       	pop	r24
    43c8:	7f 91       	pop	r23
    43ca:	6f 91       	pop	r22
    43cc:	5f 91       	pop	r21
    43ce:	4f 91       	pop	r20
    43d0:	3f 91       	pop	r19
    43d2:	2f 91       	pop	r18
    43d4:	0f 90       	pop	r0
    43d6:	0f be       	out	0x3f, r0	; 63
    43d8:	0f 90       	pop	r0
    43da:	1f 90       	pop	r1
    43dc:	18 95       	reti

Disassembly of section .text.vUARTRXData:

00004eba <vUARTRXData>:
#endif
}

// This is called for every byte received from MC RX (from the cell chain)
void vUARTRXData( uint8_t u8rxDataByte )
{
    4eba:	08 95       	ret

Disassembly of section .text.PlatformGetSendData:

000048ca <PlatformGetSendData>:
	sg_u8CellReports = 0;
}

// Called at start of WRITE frame to wrap up any receive housekeeping prior to frame processing
void vUARTRXEnd(void)
{
    48ca:	90 91 18 03 	lds	r25, 0x0318	; 0x800318 <sg_bStopDischarge>
    48ce:	99 23       	and	r25, r25
    48d0:	51 f0       	breq	.+20     	; 0x48e6 <PlatformGetSendData+0x1c>
    48d2:	88 23       	and	r24, r24
    48d4:	59 f0       	breq	.+22     	; 0x48ec <PlatformGetSendData+0x22>
    48d6:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <sg_bStopDischarge>
    48da:	81 e0       	ldi	r24, 0x01	; 1
    48dc:	80 93 19 03 	sts	0x0319, r24	; 0x800319 <sg_bCellBalancedOnce>
    48e0:	8f ef       	ldi	r24, 0xFF	; 255
    48e2:	93 e0       	ldi	r25, 0x03	; 3
    48e4:	08 95       	ret
    48e6:	80 e0       	ldi	r24, 0x00	; 0
    48e8:	90 e8       	ldi	r25, 0x80	; 128
    48ea:	08 95       	ret
    48ec:	8f ef       	ldi	r24, 0xFF	; 255
    48ee:	93 e0       	ldi	r25, 0x03	; 3
    48f0:	08 95       	ret

Disassembly of section .text.ADCCallback:

00004968 <ADCCallback>:
    4968:	84 30       	cpi	r24, 0x04	; 4
    496a:	19 f4       	brne	.+6      	; 0x4972 <ADCCallback+0xa>
    496c:	91 e0       	ldi	r25, 0x01	; 1
    496e:	90 93 16 03 	sts	0x0316, r25	; 0x800316 <sg_bADCUpdate>
    4972:	90 e0       	ldi	r25, 0x00	; 0
    4974:	fc 01       	movw	r30, r24
    4976:	ee 0f       	add	r30, r30
    4978:	ff 1f       	adc	r31, r31
    497a:	8e 0f       	add	r24, r30
    497c:	9f 1f       	adc	r25, r31
    497e:	fc 01       	movw	r30, r24
    4980:	eb 5a       	subi	r30, 0xAB	; 171
    4982:	fe 4f       	sbci	r31, 0xFE	; 254
    4984:	72 83       	std	Z+2, r23	; 0x02
    4986:	61 83       	std	Z+1, r22	; 0x01
    4988:	81 e0       	ldi	r24, 0x01	; 1
    498a:	80 83       	st	Z, r24
    498c:	08 95       	ret

Disassembly of section .text.FrameInit:

00002ca6 <FrameInit>:
    2ca6:	cf 93       	push	r28
    2ca8:	df 93       	push	r29
    2caa:	81 11       	cpse	r24, r1
    2cac:	0d c0       	rjmp	.+26     	; 0x2cc8 <FrameInit+0x22>
    2cae:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <sg_sFrame>
    2cb2:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <sg_sFrame+0x1>
    2cb6:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <sg_sFrame+0x2>
    2cba:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <sg_sFrame+0x3>
    2cbe:	8a 37       	cpi	r24, 0x7A	; 122
    2cc0:	9a 4d       	sbci	r25, 0xDA	; 218
    2cc2:	a7 47       	sbci	r26, 0x77	; 119
    2cc4:	ba 4b       	sbci	r27, 0xBA	; 186
    2cc6:	19 f1       	breq	.+70     	; 0x2d0e <FrameInit+0x68>
    2cc8:	c0 e1       	ldi	r28, 0x10	; 16
    2cca:	d1 e0       	ldi	r29, 0x01	; 1
    2ccc:	84 e0       	ldi	r24, 0x04	; 4
    2cce:	92 e0       	ldi	r25, 0x02	; 2
    2cd0:	de 01       	movw	r26, r28
    2cd2:	fc 01       	movw	r30, r24
    2cd4:	1d 92       	st	X+, r1
    2cd6:	31 97       	sbiw	r30, 0x01	; 1
    2cd8:	e9 f7       	brne	.-6      	; 0x2cd4 <FrameInit+0x2e>
    2cda:	9d 83       	std	Y+5, r25	; 0x05
    2cdc:	8c 83       	std	Y+4, r24	; 0x04
    2cde:	8a e7       	ldi	r24, 0x7A	; 122
    2ce0:	9a ed       	ldi	r25, 0xDA	; 218
    2ce2:	a7 e7       	ldi	r26, 0x77	; 119
    2ce4:	ba eb       	ldi	r27, 0xBA	; 186
    2ce6:	88 83       	st	Y, r24
    2ce8:	99 83       	std	Y+1, r25	; 0x01
    2cea:	aa 83       	std	Y+2, r26	; 0x02
    2cec:	bb 83       	std	Y+3, r27	; 0x03
    2cee:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <ModuleControllerGetUniqueID>
    2cf2:	6e 87       	std	Y+14, r22	; 0x0e
    2cf4:	7f 87       	std	Y+15, r23	; 0x0f
    2cf6:	88 8b       	std	Y+16, r24	; 0x10
    2cf8:	99 8b       	std	Y+17, r25	; 0x11
    2cfa:	8f ef       	ldi	r24, 0xFF	; 255
    2cfc:	8a a7       	std	Y+42, r24	; 0x2a
    2cfe:	8b 8b       	std	Y+19, r24	; 0x13
    2d00:	84 e0       	ldi	r24, 0x04	; 4
    2d02:	90 e0       	ldi	r25, 0x00	; 0
    2d04:	0e 94 d1 26 	call	0x4da2	; 0x4da2 <EEPROMRead>
    2d08:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <CellCountExpectedSet>
    2d0c:	34 c0       	rjmp	.+104    	; 0x2d76 <FrameInit+0xd0>
    2d0e:	80 eb       	ldi	r24, 0xB0	; 176
    2d10:	91 e0       	ldi	r25, 0x01	; 1
    2d12:	e4 e6       	ldi	r30, 0x64	; 100
    2d14:	f1 e0       	ldi	r31, 0x01	; 1
    2d16:	df 01       	movw	r26, r30
    2d18:	9c 01       	movw	r18, r24
    2d1a:	1d 92       	st	X+, r1
    2d1c:	21 50       	subi	r18, 0x01	; 1
    2d1e:	30 40       	sbci	r19, 0x00	; 0
    2d20:	e1 f7       	brne	.-8      	; 0x2d1a <FrameInit+0x74>
    2d22:	e0 e1       	ldi	r30, 0x10	; 16
    2d24:	f1 e0       	ldi	r31, 0x01	; 1
    2d26:	17 a2       	std	Z+39, r1	; 0x27
    2d28:	11 a6       	std	Z+41, r1	; 0x29
    2d2a:	10 a6       	std	Z+40, r1	; 0x28
    2d2c:	12 a6       	std	Z+42, r1	; 0x2a
    2d2e:	15 a6       	std	Z+45, r1	; 0x2d
    2d30:	16 a6       	std	Z+46, r1	; 0x2e
    2d32:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <sg_sFrame+0x3d>
    2d36:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <sg_sFrame+0x3e>
    2d3a:	a0 91 4f 01 	lds	r26, 0x014F	; 0x80014f <sg_sFrame+0x3f>
    2d3e:	b0 91 50 01 	lds	r27, 0x0150	; 0x800150 <sg_sFrame+0x40>
    2d42:	89 2b       	or	r24, r25
    2d44:	8a 2b       	or	r24, r26
    2d46:	8b 2b       	or	r24, r27
    2d48:	b1 f4       	brne	.+44     	; 0x2d76 <FrameInit+0xd0>
    2d4a:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <sg_sFrame+0x3d>
    2d4e:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <sg_sFrame+0x3e>
    2d52:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <sg_sFrame+0x3f>
    2d56:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <sg_sFrame+0x40>
    2d5a:	10 ae       	std	Z+56, r1	; 0x38
    2d5c:	17 aa       	std	Z+55, r1	; 0x37
    2d5e:	12 ae       	std	Z+58, r1	; 0x3a
    2d60:	11 ae       	std	Z+57, r1	; 0x39
    2d62:	14 ae       	std	Z+60, r1	; 0x3c
    2d64:	13 ae       	std	Z+59, r1	; 0x3b
    2d66:	8f e9       	ldi	r24, 0x9F	; 159
    2d68:	95 e1       	ldi	r25, 0x15	; 21
    2d6a:	92 ab       	std	Z+50, r25	; 0x32
    2d6c:	81 ab       	std	Z+49, r24	; 0x31
    2d6e:	94 ab       	std	Z+52, r25	; 0x34
    2d70:	83 ab       	std	Z+51, r24	; 0x33
    2d72:	96 ab       	std	Z+54, r25	; 0x36
    2d74:	85 ab       	std	Z+53, r24	; 0x35
    2d76:	8f ef       	ldi	r24, 0xFF	; 255
    2d78:	80 93 6e 09 	sts	0x096E, r24	; 0x80096e <sg_u8CurrentBufferIndex>
    2d7c:	df 91       	pop	r29
    2d7e:	cf 91       	pop	r28
    2d80:	08 95       	ret

Disassembly of section .text.CellStringPowerStateMachine:

000038ce <CellStringPowerStateMachine>:
    38ce:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <sg_eStringPowerState>
    38d2:	82 30       	cpi	r24, 0x02	; 2
    38d4:	49 f1       	breq	.+82     	; 0x3928 <CellStringPowerStateMachine+0x5a>
    38d6:	28 f4       	brcc	.+10     	; 0x38e2 <CellStringPowerStateMachine+0x14>
    38d8:	88 23       	and	r24, r24
    38da:	41 f0       	breq	.+16     	; 0x38ec <CellStringPowerStateMachine+0x1e>
    38dc:	81 30       	cpi	r24, 0x01	; 1
    38de:	91 f0       	breq	.+36     	; 0x3904 <CellStringPowerStateMachine+0x36>
    38e0:	32 c0       	rjmp	.+100    	; 0x3946 <CellStringPowerStateMachine+0x78>
    38e2:	83 30       	cpi	r24, 0x03	; 3
    38e4:	61 f1       	breq	.+88     	; 0x393e <CellStringPowerStateMachine+0x70>
    38e6:	84 30       	cpi	r24, 0x04	; 4
    38e8:	a9 f1       	breq	.+106    	; 0x3954 <CellStringPowerStateMachine+0x86>
    38ea:	2d c0       	rjmp	.+90     	; 0x3946 <CellStringPowerStateMachine+0x78>
    38ec:	85 b1       	in	r24, 0x05	; 5
    38ee:	8f 7e       	andi	r24, 0xEF	; 239
    38f0:	85 b9       	out	0x05, r24	; 5
    38f2:	81 e0       	ldi	r24, 0x01	; 1
    38f4:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <sg_eStringPowerState>
    38f8:	80 e0       	ldi	r24, 0x00	; 0
    38fa:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <FrameInit>
    38fe:	0e 94 fe 26 	call	0x4dfc	; 0x4dfc <SendModuleControllerStatus>
    3902:	08 95       	ret
    3904:	85 b1       	in	r24, 0x05	; 5
    3906:	8f 7e       	andi	r24, 0xEF	; 239
    3908:	85 b9       	out	0x05, r24	; 5
    390a:	80 e0       	ldi	r24, 0x00	; 0
    390c:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <FrameInit>
    3910:	82 e0       	ldi	r24, 0x02	; 2
    3912:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <sg_eStringPowerState>
    3916:	81 e0       	ldi	r24, 0x01	; 1
    3918:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <sg_u8CellStringPowerTimer>
    391c:	e0 e1       	ldi	r30, 0x10	; 16
    391e:	f1 e0       	ldi	r31, 0x01	; 1
    3920:	8f ef       	ldi	r24, 0xFF	; 255
    3922:	83 8b       	std	Z+19, r24	; 0x13
    3924:	14 8a       	std	Z+20, r1	; 0x14
    3926:	08 95       	ret
    3928:	80 91 68 09 	lds	r24, 0x0968	; 0x800968 <sg_u8CellStringPowerTimer>
    392c:	81 11       	cpse	r24, r1
    392e:	12 c0       	rjmp	.+36     	; 0x3954 <CellStringPowerStateMachine+0x86>
    3930:	85 b1       	in	r24, 0x05	; 5
    3932:	80 61       	ori	r24, 0x10	; 16
    3934:	85 b9       	out	0x05, r24	; 5
    3936:	83 e0       	ldi	r24, 0x03	; 3
    3938:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <sg_eStringPowerState>
    393c:	08 95       	ret
    393e:	84 e0       	ldi	r24, 0x04	; 4
    3940:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <sg_eStringPowerState>
    3944:	08 95       	ret
    3946:	4b e6       	ldi	r20, 0x6B	; 107
    3948:	52 e0       	ldi	r21, 0x02	; 2
    394a:	67 e4       	ldi	r22, 0x47	; 71
    394c:	72 e0       	ldi	r23, 0x02	; 2
    394e:	80 e0       	ldi	r24, 0x00	; 0
    3950:	0e 94 fc 23 	call	0x47f8	; 0x47f8 <PlatformAssert>
    3954:	08 95       	ret

Disassembly of section .text.main:

00000d6e <main>:
     d6e:	cf 93       	push	r28
     d70:	df 93       	push	r29
     d72:	cd b7       	in	r28, 0x3d	; 61
     d74:	de b7       	in	r29, 0x3e	; 62
     d76:	28 97       	sbiw	r28, 0x08	; 8
     d78:	0f b6       	in	r0, 0x3f	; 63
     d7a:	f8 94       	cli
     d7c:	de bf       	out	0x3e, r29	; 62
     d7e:	0f be       	out	0x3f, r0	; 63
     d80:	cd bf       	out	0x3d, r28	; 61
     d82:	0e 94 6a 26 	call	0x4cd4	; 0x4cd4 <WatchdogOff>
     d86:	88 b1       	in	r24, 0x08	; 8
     d88:	8f 7e       	andi	r24, 0xEF	; 239
     d8a:	88 b9       	out	0x08, r24	; 8
     d8c:	87 b1       	in	r24, 0x07	; 7
     d8e:	80 61       	ori	r24, 0x10	; 16
     d90:	87 b9       	out	0x07, r24	; 7
     d92:	87 b1       	in	r24, 0x07	; 7
     d94:	8d 7f       	andi	r24, 0xFD	; 253
     d96:	87 b9       	out	0x07, r24	; 7
     d98:	87 b1       	in	r24, 0x07	; 7
     d9a:	80 68       	ori	r24, 0x80	; 128
     d9c:	87 b9       	out	0x07, r24	; 7
     d9e:	88 b1       	in	r24, 0x08	; 8
     da0:	8f 7e       	andi	r24, 0xEF	; 239
     da2:	88 b9       	out	0x08, r24	; 8
     da4:	8d b1       	in	r24, 0x0d	; 13
     da6:	82 60       	ori	r24, 0x02	; 2
     da8:	8d b9       	out	0x0d, r24	; 13
     daa:	8e b1       	in	r24, 0x0e	; 14
     dac:	8d 7f       	andi	r24, 0xFD	; 253
     dae:	8e b9       	out	0x0e, r24	; 14
     db0:	84 b1       	in	r24, 0x04	; 4
     db2:	80 61       	ori	r24, 0x10	; 16
     db4:	84 b9       	out	0x04, r24	; 4
     db6:	85 b1       	in	r24, 0x05	; 5
     db8:	8f 7e       	andi	r24, 0xEF	; 239
     dba:	85 b9       	out	0x05, r24	; 5
     dbc:	e0 e0       	ldi	r30, 0x00	; 0
     dbe:	f8 e0       	ldi	r31, 0x08	; 8
     dc0:	02 c0       	rjmp	.+4      	; 0xdc6 <main+0x58>
     dc2:	8a ea       	ldi	r24, 0xAA	; 170
     dc4:	81 93       	st	Z+, r24
     dc6:	e1 15       	cp	r30, r1
     dc8:	80 e1       	ldi	r24, 0x10	; 16
     dca:	f8 07       	cpc	r31, r24
     dcc:	d0 f3       	brcs	.-12     	; 0xdc2 <main+0x54>
     dce:	84 b7       	in	r24, 0x34	; 52
     dd0:	80 93 65 09 	sts	0x0965, r24	; 0x800965 <sg_u8Reason>
     dd4:	80 91 65 09 	lds	r24, 0x0965	; 0x800965 <sg_u8Reason>
     dd8:	83 ff       	sbrs	r24, 3
     dda:	0a c0       	rjmp	.+20     	; 0xdf0 <main+0x82>
     ddc:	80 91 28 03 	lds	r24, 0x0328	; 0x800328 <sg_eWDTCurrentStatus>
     de0:	e0 e1       	ldi	r30, 0x10	; 16
     de2:	f1 e0       	ldi	r31, 0x01	; 1
     de4:	82 89       	ldd	r24, Z+18	; 0x12
     de6:	8f 5f       	subi	r24, 0xFF	; 255
     de8:	82 8b       	std	Z+18, r24	; 0x12
     dea:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <ModuleControllerStateHandle>
     dee:	47 c0       	rjmp	.+142    	; 0xe7e <main+0x110>
     df0:	80 91 65 09 	lds	r24, 0x0965	; 0x800965 <sg_u8Reason>
     df4:	80 91 65 09 	lds	r24, 0x0965	; 0x800965 <sg_u8Reason>
     df8:	80 91 65 09 	lds	r24, 0x0965	; 0x800965 <sg_u8Reason>
     dfc:	f8 94       	cli
     dfe:	0e 94 40 27 	call	0x4e80	; 0x4e80 <SetSysclock>
     e02:	0e 94 77 21 	call	0x42ee	; 0x42ee <TimerInit>
     e06:	0e 94 a1 23 	call	0x4742	; 0x4742 <vUARTInit>
     e0a:	0e 94 32 12 	call	0x2464	; 0x2464 <ADCInit>
     e0e:	0e 94 31 1d 	call	0x3a62	; 0x3a62 <STORE_Init>
     e12:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <sg_bSDCardReady>
     e16:	81 e0       	ldi	r24, 0x01	; 1
     e18:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <FrameInit>
     e1c:	89 e0       	ldi	r24, 0x09	; 9
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	0e 94 d1 26 	call	0x4da2	; 0x4da2 <EEPROMRead>
     e24:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <sg_u8SequentailCountMismatchThreshold>
     e28:	8a b1       	in	r24, 0x0a	; 10
     e2a:	8f 7b       	andi	r24, 0xBF	; 191
     e2c:	8a b9       	out	0x0a, r24	; 10
     e2e:	8b b1       	in	r24, 0x0b	; 11
     e30:	80 64       	ori	r24, 0x40	; 64
     e32:	8b b9       	out	0x0b, r24	; 11
     e34:	11 e0       	ldi	r17, 0x01	; 1
     e36:	1b bb       	out	0x1b, r17	; 27
     e38:	82 e0       	ldi	r24, 0x02	; 2
     e3a:	8b bb       	out	0x1b, r24	; 27
     e3c:	84 e0       	ldi	r24, 0x04	; 4
     e3e:	8b bb       	out	0x1b, r24	; 27
     e40:	88 e0       	ldi	r24, 0x08	; 8
     e42:	8b bb       	out	0x1b, r24	; 27
     e44:	ec e6       	ldi	r30, 0x6C	; 108
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	80 81       	ld	r24, Z
     e4a:	80 64       	ori	r24, 0x40	; 64
     e4c:	80 83       	st	Z, r24
     e4e:	8b b3       	in	r24, 0x1b	; 27
     e50:	84 60       	ori	r24, 0x04	; 4
     e52:	8b bb       	out	0x1b, r24	; 27
     e54:	8e e7       	ldi	r24, 0x7E	; 126
     e56:	99 e0       	ldi	r25, 0x09	; 9
     e58:	0e 94 46 27 	call	0x4e8c	; 0x4e8c <CANSetRXCallback>
     e5c:	0e 94 45 1b 	call	0x368a	; 0x368a <CANInit>
     e60:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <RTCInit>
     e64:	85 e0       	ldi	r24, 0x05	; 5
     e66:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <sg_eModuleControllerStateCurrent>
     e6a:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <sg_eModuleControllerStateTarget>
     e6e:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <sg_eModuleControllerStateMax>
     e72:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <sg_bModuleRegistered>
     e76:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <sg_eStringPowerState>
     e7a:	10 93 0c 01 	sts	0x010C, r17	; 0x80010c <sg_eFrameStatus>
     e7e:	78 94       	sei
     e80:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <sg_bNewTick>
     e84:	88 23       	and	r24, r24
     e86:	e1 f3       	breq	.-8      	; 0xe80 <main+0x112>
     e88:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <sg_bNewTick>
     e8c:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <sg_bModuleRegistered>
     e90:	81 11       	cpse	r24, r1
     e92:	22 c0       	rjmp	.+68     	; 0xed8 <main+0x16a>
     e94:	80 91 6d 09 	lds	r24, 0x096D	; 0x80096d <sg_bAnnouncementPending>
     e98:	88 23       	and	r24, r24
     e9a:	11 f1       	breq	.+68     	; 0xee0 <main+0x172>
     e9c:	80 91 6c 09 	lds	r24, 0x096C	; 0x80096c <sg_u8AnnouncementDelayTicks>
     ea0:	88 23       	and	r24, r24
     ea2:	29 f0       	breq	.+10     	; 0xeae <main+0x140>
     ea4:	80 91 6c 09 	lds	r24, 0x096C	; 0x80096c <sg_u8AnnouncementDelayTicks>
     ea8:	81 50       	subi	r24, 0x01	; 1
     eaa:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <sg_u8AnnouncementDelayTicks>
     eae:	80 91 6c 09 	lds	r24, 0x096C	; 0x80096c <sg_u8AnnouncementDelayTicks>
     eb2:	81 11       	cpse	r24, r1
     eb4:	15 c0       	rjmp	.+42     	; 0xee0 <main+0x172>
     eb6:	81 e0       	ldi	r24, 0x01	; 1
     eb8:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <sg_bSendAnnouncement>
     ebc:	10 92 6d 09 	sts	0x096D, r1	; 0x80096d <sg_bAnnouncementPending>
     ec0:	83 e5       	ldi	r24, 0x53	; 83
     ec2:	92 e0       	ldi	r25, 0x02	; 2
     ec4:	a0 e0       	ldi	r26, 0x00	; 0
     ec6:	af 93       	push	r26
     ec8:	9f 93       	push	r25
     eca:	8f 93       	push	r24
     ecc:	0e 94 1e 27 	call	0x4e3c	; 0x4e3c <DebugOut>
     ed0:	0f 90       	pop	r0
     ed2:	0f 90       	pop	r0
     ed4:	0f 90       	pop	r0
     ed6:	04 c0       	rjmp	.+8      	; 0xee0 <main+0x172>
     ed8:	ce 01       	movw	r24, r28
     eda:	01 96       	adiw	r24, 0x01	; 1
     edc:	0e 94 c4 04 	call	0x988	; 0x988 <ControllerStatusMessagesSend>
     ee0:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <sg_bPackControllerTimeout>
     ee4:	88 23       	and	r24, r24
     ee6:	81 f0       	breq	.+32     	; 0xf08 <main+0x19a>
     ee8:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <sg_bPackControllerTimeout>
     eec:	10 92 27 03 	sts	0x0327, r1	; 0x800327 <sg_u8ModuleRegistrationID>
     ef0:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <sg_bModuleRegistered>
     ef4:	10 92 6b 09 	sts	0x096B, r1	; 0x80096b <sg_bIgnoreStatusRequests>
     ef8:	81 e0       	ldi	r24, 0x01	; 1
     efa:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <sg_bSendAnnouncement>
     efe:	0e 94 fe 26 	call	0x4dfc	; 0x4dfc <SendModuleControllerStatus>
     f02:	80 e0       	ldi	r24, 0x00	; 0
     f04:	0e 94 4b 27 	call	0x4e96	; 0x4e96 <ModuleControllerStateSet>
     f08:	ef e6       	ldi	r30, 0x6F	; 111
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	90 81       	ld	r25, Z
     f0e:	80 81       	ld	r24, Z
     f10:	8d 7f       	andi	r24, 0xFD	; 253
     f12:	80 83       	st	Z, r24
     f14:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <sg_eFrameStatus>
     f18:	20 91 69 09 	lds	r18, 0x0969	; 0x800969 <sg_bFrameStart>
     f1c:	90 83       	st	Z, r25
     f1e:	81 30       	cpi	r24, 0x01	; 1
     f20:	09 f0       	breq	.+2      	; 0xf24 <main+0x1b6>
     f22:	5f c0       	rjmp	.+190    	; 0xfe2 <main+0x274>
     f24:	22 23       	and	r18, r18
     f26:	09 f4       	brne	.+2      	; 0xf2a <main+0x1bc>
     f28:	53 c0       	rjmp	.+166    	; 0xfd0 <main+0x262>
     f2a:	10 92 69 09 	sts	0x0969, r1	; 0x800969 <sg_bFrameStart>
     f2e:	0e 94 67 1c 	call	0x38ce	; 0x38ce <CellStringPowerStateMachine>
     f32:	ce 01       	movw	r24, r28
     f34:	01 96       	adiw	r24, 0x01	; 1
     f36:	0e 94 29 08 	call	0x1052	; 0x1052 <CellStringProcess>
     f3a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <sg_eStringPowerState>
     f3e:	84 30       	cpi	r24, 0x04	; 4
     f40:	29 f5       	brne	.+74     	; 0xf8c <main+0x21e>
     f42:	e0 e1       	ldi	r30, 0x10	; 16
     f44:	f1 e0       	ldi	r31, 0x01	; 1
     f46:	95 a5       	ldd	r25, Z+45	; 0x2d
     f48:	85 89       	ldd	r24, Z+21	; 0x15
     f4a:	98 17       	cp	r25, r24
     f4c:	e9 f0       	breq	.+58     	; 0xf88 <main+0x21a>
     f4e:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <sg_sFrame+0x15>
     f52:	88 23       	and	r24, r24
     f54:	c9 f0       	breq	.+50     	; 0xf88 <main+0x21a>
     f56:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <sg_u8SequentailCountMismatchThreshold>
     f5a:	88 23       	and	r24, r24
     f5c:	b9 f0       	breq	.+46     	; 0xf8c <main+0x21e>
     f5e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <sg_u8SequentailCountMismatchThreshold>
     f62:	8f 3f       	cpi	r24, 0xFF	; 255
     f64:	99 f0       	breq	.+38     	; 0xf8c <main+0x21e>
     f66:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <sg_u8SequentailCellCountMismatches>
     f6a:	8f 5f       	subi	r24, 0xFF	; 255
     f6c:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <sg_u8SequentailCellCountMismatches>
     f70:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <sg_u8SequentailCellCountMismatches>
     f74:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <sg_u8SequentailCountMismatchThreshold>
     f78:	98 17       	cp	r25, r24
     f7a:	40 f0       	brcs	.+16     	; 0xf8c <main+0x21e>
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <sg_eStringPowerState>
     f82:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <sg_u8SequentailCellCountMismatches>
     f86:	02 c0       	rjmp	.+4      	; 0xf8c <main+0x21e>
     f88:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <sg_u8SequentailCellCountMismatches>
     f8c:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <sg_bSendAnnouncement>
     f90:	88 23       	and	r24, r24
     f92:	f1 f0       	breq	.+60     	; 0xfd0 <main+0x262>
     f94:	86 e5       	ldi	r24, 0x56	; 86
     f96:	89 83       	std	Y+1, r24	; 0x01
     f98:	80 e2       	ldi	r24, 0x20	; 32
     f9a:	8a 83       	std	Y+2, r24	; 0x02
     f9c:	82 e0       	ldi	r24, 0x02	; 2
     f9e:	8b 83       	std	Y+3, r24	; 0x03
     fa0:	83 e0       	ldi	r24, 0x03	; 3
     fa2:	8c 83       	std	Y+4, r24	; 0x04
     fa4:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <sg_sFrame+0xe>
     fa8:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <sg_sFrame+0xf>
     fac:	a0 91 20 01 	lds	r26, 0x0120	; 0x800120 <sg_sFrame+0x10>
     fb0:	b0 91 21 01 	lds	r27, 0x0121	; 0x800121 <sg_sFrame+0x11>
     fb4:	8d 83       	std	Y+5, r24	; 0x05
     fb6:	9e 83       	std	Y+6, r25	; 0x06
     fb8:	af 83       	std	Y+7, r26	; 0x07
     fba:	b8 87       	std	Y+8, r27	; 0x08
     fbc:	48 e0       	ldi	r20, 0x08	; 8
     fbe:	be 01       	movw	r22, r28
     fc0:	6f 5f       	subi	r22, 0xFF	; 255
     fc2:	7f 4f       	sbci	r23, 0xFF	; 255
     fc4:	80 e0       	ldi	r24, 0x00	; 0
     fc6:	0e 94 9b 26 	call	0x4d36	; 0x4d36 <CANSendMessage>
     fca:	81 11       	cpse	r24, r1
     fcc:	10 92 22 03 	sts	0x0322, r1	; 0x800322 <sg_bSendAnnouncement>
     fd0:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <ModuleControllerStateHandle>
     fd4:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <sg_bOvercurrentSignal>
     fd8:	88 23       	and	r24, r24
     fda:	81 f1       	breq	.+96     	; 0x103c <__DATA_REGION_LENGTH__+0x3c>
     fdc:	10 92 17 03 	sts	0x0317, r1	; 0x800317 <sg_bOvercurrentSignal>
     fe0:	2d c0       	rjmp	.+90     	; 0x103c <__DATA_REGION_LENGTH__+0x3c>
     fe2:	22 23       	and	r18, r18
     fe4:	59 f1       	breq	.+86     	; 0x103c <__DATA_REGION_LENGTH__+0x3c>
     fe6:	10 92 69 09 	sts	0x0969, r1	; 0x800969 <sg_bFrameStart>
     fea:	0e 94 67 1c 	call	0x38ce	; 0x38ce <CellStringPowerStateMachine>
     fee:	80 e0       	ldi	r24, 0x00	; 0
     ff0:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <FrameInit>
     ff4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <sg_eStringPowerState>
     ff8:	84 30       	cpi	r24, 0x04	; 4
     ffa:	01 f5       	brne	.+64     	; 0x103c <__DATA_REGION_LENGTH__+0x3c>
     ffc:	0b c0       	rjmp	.+22     	; 0x1014 <__DATA_REGION_LENGTH__+0x14>
     ffe:	fc 01       	movw	r30, r24
    1000:	24 91       	lpm	r18, Z
    1002:	a7 fd       	sbrc	r26, 7
    1004:	20 81       	ld	r18, Z
    1006:	fb 01       	movw	r30, r22
    1008:	21 93       	st	Z+, r18
    100a:	bf 01       	movw	r22, r30
    100c:	01 96       	adiw	r24, 0x01	; 1
    100e:	a1 1d       	adc	r26, r1
    1010:	9a 01       	movw	r18, r20
    1012:	07 c0       	rjmp	.+14     	; 0x1022 <__DATA_REGION_LENGTH__+0x22>
    1014:	28 e7       	ldi	r18, 0x78	; 120
    1016:	31 e0       	ldi	r19, 0x01	; 1
    1018:	8b e7       	ldi	r24, 0x7B	; 123
    101a:	92 e0       	ldi	r25, 0x02	; 2
    101c:	a0 e0       	ldi	r26, 0x00	; 0
    101e:	64 e6       	ldi	r22, 0x64	; 100
    1020:	71 e0       	ldi	r23, 0x01	; 1
    1022:	a9 01       	movw	r20, r18
    1024:	41 50       	subi	r20, 0x01	; 1
    1026:	51 09       	sbc	r21, r1
    1028:	23 2b       	or	r18, r19
    102a:	49 f7       	brne	.-46     	; 0xffe <main+0x290>
    102c:	e0 e1       	ldi	r30, 0x10	; 16
    102e:	f1 e0       	ldi	r31, 0x01	; 1
    1030:	88 e7       	ldi	r24, 0x78	; 120
    1032:	91 e0       	ldi	r25, 0x01	; 1
    1034:	94 a7       	std	Z+44, r25	; 0x2c
    1036:	83 a7       	std	Z+43, r24	; 0x2b
    1038:	8e e5       	ldi	r24, 0x5E	; 94
    103a:	85 a7       	std	Z+45, r24	; 0x2d
    103c:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <sg_bADCUpdate>
    1040:	88 23       	and	r24, r24
    1042:	21 f0       	breq	.+8      	; 0x104c <__DATA_REGION_LENGTH__+0x4c>
    1044:	10 92 16 03 	sts	0x0316, r1	; 0x800316 <sg_bADCUpdate>
    1048:	0e 94 f6 13 	call	0x27ec	; 0x27ec <ModuleCurrentConvertReadings>
    104c:	0e 94 28 24 	call	0x4850	; 0x4850 <ADCStartConversion>
    1050:	17 cf       	rjmp	.-466    	; 0xe80 <main+0x112>

Disassembly of section .text.IsLeapYear:

00004610 <IsLeapYear>:
	return( bResult );
}

// Returns true if u16Year is a leap year
static bool IsLeapYear(uint16_t u16Year)
{
    4610:	9c 01       	movw	r18, r24
	bool bLeapYear = false;
	
	if ((u16Year % 400) == 0)
    4612:	60 e9       	ldi	r22, 0x90	; 144
    4614:	71 e0       	ldi	r23, 0x01	; 1
    4616:	0e 94 79 24 	call	0x48f2	; 0x48f2 <__udivmodhi4>
    461a:	89 2b       	or	r24, r25
    461c:	69 f0       	breq	.+26     	; 0x4638 <IsLeapYear+0x28>
	{
		bLeapYear = true;
	}
	else
	if ((u16Year % 100) == 0)
    461e:	c9 01       	movw	r24, r18
    4620:	64 e6       	ldi	r22, 0x64	; 100
    4622:	70 e0       	ldi	r23, 0x00	; 0
    4624:	0e 94 79 24 	call	0x48f2	; 0x48f2 <__udivmodhi4>
    4628:	89 2b       	or	r24, r25
    462a:	41 f0       	breq	.+16     	; 0x463c <IsLeapYear+0x2c>
	{
		// Not a leap year if divisible by 100 but not by 400
	}
	else
	if ((u16Year % 4) == 0)
    462c:	23 70       	andi	r18, 0x03	; 3
    462e:	33 27       	eor	r19, r19
    4630:	23 2b       	or	r18, r19
    4632:	31 f0       	breq	.+12     	; 0x4640 <IsLeapYear+0x30>
}

// Returns true if u16Year is a leap year
static bool IsLeapYear(uint16_t u16Year)
{
	bool bLeapYear = false;
    4634:	80 e0       	ldi	r24, 0x00	; 0
    4636:	08 95       	ret
	
	if ((u16Year % 400) == 0)
	{
		bLeapYear = true;
    4638:	81 e0       	ldi	r24, 0x01	; 1
    463a:	08 95       	ret
}

// Returns true if u16Year is a leap year
static bool IsLeapYear(uint16_t u16Year)
{
	bool bLeapYear = false;
    463c:	80 e0       	ldi	r24, 0x00	; 0
    463e:	08 95       	ret
		// Not a leap year if divisible by 100 but not by 400
	}
	else
	if ((u16Year % 4) == 0)
	{
		bLeapYear = true;
    4640:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return(bLeapYear);
}
    4642:	08 95       	ret

Disassembly of section .text.RTCStartTransaction:

0000442a <RTCStartTransaction>:
}

static bool RTCStartTransaction( uint8_t u8Address, 
								 bool bRead, 
								 bool bAllowUnstick )
{
    442a:	ff 92       	push	r15
    442c:	0f 93       	push	r16
    442e:	1f 93       	push	r17
    4430:	cf 93       	push	r28
    4432:	df 93       	push	r29
    4434:	f8 2e       	mov	r15, r24
    4436:	06 2f       	mov	r16, r22
    4438:	14 2f       	mov	r17, r20
	bool bResult = false;
	uint8_t u8Tries = RTC_MAX_ADDRESS_TRIES;
    443a:	d3 e0       	ldi	r29, 0x03	; 3

static bool RTCStartTransaction( uint8_t u8Address, 
								 bool bRead, 
								 bool bAllowUnstick )
{
	bool bResult = false;
    443c:	c0 e0       	ldi	r28, 0x00	; 0
	uint8_t u8Tries = RTC_MAX_ADDRESS_TRIES;
	
	while( (false == bResult) && u8Tries )
    443e:	0c c0       	rjmp	.+24     	; 0x4458 <RTCStartTransaction+0x2e>
	{
		u8Tries--;
    4440:	d1 50       	subi	r29, 0x01	; 1
		
		bResult = I2CStartTransaction( u8Address, bRead );
    4442:	60 2f       	mov	r22, r16
    4444:	8f 2d       	mov	r24, r15
    4446:	0e 94 3d 24 	call	0x487a	; 0x487a <I2CStartTransaction>
    444a:	c8 2f       	mov	r28, r24
	
		if( false == bAllowUnstick )
    444c:	11 23       	and	r17, r17
    444e:	41 f0       	breq	.+16     	; 0x4460 <RTCStartTransaction+0x36>
		{
			break;
		}
		
		// Unstick and retry on failure
		if( false == bResult )
    4450:	81 11       	cpse	r24, r1
    4452:	02 c0       	rjmp	.+4      	; 0x4458 <RTCStartTransaction+0x2e>
		{
			I2CUnstick();
    4454:	0e 94 78 22 	call	0x44f0	; 0x44f0 <I2CUnstick>
								 bool bAllowUnstick )
{
	bool bResult = false;
	uint8_t u8Tries = RTC_MAX_ADDRESS_TRIES;
	
	while( (false == bResult) && u8Tries )
    4458:	c1 11       	cpse	r28, r1
    445a:	02 c0       	rjmp	.+4      	; 0x4460 <RTCStartTransaction+0x36>
    445c:	d1 11       	cpse	r29, r1
    445e:	f0 cf       	rjmp	.-32     	; 0x4440 <RTCStartTransaction+0x16>
			I2CUnstick();
		}
	}
	
	return( bResult );
}
    4460:	8c 2f       	mov	r24, r28
    4462:	df 91       	pop	r29
    4464:	cf 91       	pop	r28
    4466:	1f 91       	pop	r17
    4468:	0f 91       	pop	r16
    446a:	ff 90       	pop	r15
    446c:	08 95       	ret

Disassembly of section .text.StructTMToHW:

000041f4 <StructTMToHW>:
}

// Converts struct tm to SMCP7940NTime structure
static void StructTMToHW(struct tm *psTimeTM,
						 SMCP7940NTime *psTime)
{
    41f4:	cf 93       	push	r28
    41f6:	df 93       	push	r29
    41f8:	dc 01       	movw	r26, r24
    41fa:	fb 01       	movw	r30, r22
	memset((void *) psTime, 0, sizeof(*psTime));
    41fc:	87 e0       	ldi	r24, 0x07	; 7
    41fe:	eb 01       	movw	r28, r22
    4200:	19 92       	st	Y+, r1
    4202:	8a 95       	dec	r24
    4204:	e9 f7       	brne	.-6      	; 0x4200 <StructTMToHW+0xc>
	
	psTime->u8Seconds = psTimeTM->tm_sec;
    4206:	8c 91       	ld	r24, X
    4208:	80 83       	st	Z, r24
	psTime->u8Minutes = psTimeTM->tm_min;
    420a:	12 96       	adiw	r26, 0x02	; 2
    420c:	8c 91       	ld	r24, X
    420e:	12 97       	sbiw	r26, 0x02	; 2
    4210:	81 83       	std	Z+1, r24	; 0x01
	psTime->u8Hours = psTimeTM->tm_hour;
    4212:	14 96       	adiw	r26, 0x04	; 4
    4214:	8c 91       	ld	r24, X
    4216:	14 97       	sbiw	r26, 0x04	; 4
    4218:	82 83       	std	Z+2, r24	; 0x02
	psTime->u8Day = psTimeTM->tm_mday;
    421a:	16 96       	adiw	r26, 0x06	; 6
    421c:	8c 91       	ld	r24, X
    421e:	16 97       	sbiw	r26, 0x06	; 6
    4220:	84 83       	std	Z+4, r24	; 0x04
	psTime->u8Month = psTimeTM->tm_mon;
    4222:	18 96       	adiw	r26, 0x08	; 8
    4224:	8c 91       	ld	r24, X
    4226:	18 97       	sbiw	r26, 0x08	; 8
    4228:	85 83       	std	Z+5, r24	; 0x05
	
	if (psTimeTM->tm_year > (2099-1900))
    422a:	1a 96       	adiw	r26, 0x0a	; 10
    422c:	8d 91       	ld	r24, X+
    422e:	9c 91       	ld	r25, X
    4230:	1b 97       	sbiw	r26, 0x0b	; 11
    4232:	88 3c       	cpi	r24, 0xC8	; 200
    4234:	91 05       	cpc	r25, r1
    4236:	1c f0       	brlt	.+6      	; 0x423e <StructTMToHW+0x4a>
	{
		psTime->u8Year = psTimeTM->tm_year - 2100;
    4238:	84 53       	subi	r24, 0x34	; 52
    423a:	86 83       	std	Z+6, r24	; 0x06
    423c:	02 c0       	rjmp	.+4      	; 0x4242 <StructTMToHW+0x4e>
	}
	else
	{
		psTime->u8Year = psTimeTM->tm_year - 2000;
    423e:	80 5d       	subi	r24, 0xD0	; 208
    4240:	86 83       	std	Z+6, r24	; 0x06
	}
	
}
    4242:	df 91       	pop	r29
    4244:	cf 91       	pop	r28
    4246:	08 95       	ret

Disassembly of section .text.HWToStructTM:

00003be0 <HWToStructTM>:
}

// Converts an SMCP7940NTime structure to struct tm
static void HWToStructTM(SMCP7940NTime *psTime,
						 struct tm *psTimeTM)
{
    3be0:	cf 93       	push	r28
    3be2:	df 93       	push	r29
    3be4:	dc 01       	movw	r26, r24
    3be6:	fb 01       	movw	r30, r22
	// At this point, the time is in STime and we should
	// turn that in to time_t
	memset((void *) psTimeTM, 0, sizeof(*psTimeTM));
    3be8:	89 e1       	ldi	r24, 0x19	; 25
    3bea:	eb 01       	movw	r28, r22
    3bec:	19 92       	st	Y+, r1
    3bee:	8a 95       	dec	r24
    3bf0:	e9 f7       	brne	.-6      	; 0x3bec <HWToStructTM+0xc>
	
	psTimeTM->tm_sec = psTime->u8Seconds;
    3bf2:	8c 91       	ld	r24, X
    3bf4:	90 e0       	ldi	r25, 0x00	; 0
    3bf6:	91 83       	std	Z+1, r25	; 0x01
    3bf8:	80 83       	st	Z, r24
	psTimeTM->tm_min = psTime->u8Minutes;
    3bfa:	11 96       	adiw	r26, 0x01	; 1
    3bfc:	8c 91       	ld	r24, X
    3bfe:	11 97       	sbiw	r26, 0x01	; 1
    3c00:	90 e0       	ldi	r25, 0x00	; 0
    3c02:	93 83       	std	Z+3, r25	; 0x03
    3c04:	82 83       	std	Z+2, r24	; 0x02
	psTimeTM->tm_hour = psTime->u8Hours;
    3c06:	12 96       	adiw	r26, 0x02	; 2
    3c08:	8c 91       	ld	r24, X
    3c0a:	12 97       	sbiw	r26, 0x02	; 2
    3c0c:	90 e0       	ldi	r25, 0x00	; 0
    3c0e:	95 83       	std	Z+5, r25	; 0x05
    3c10:	84 83       	std	Z+4, r24	; 0x04
	psTimeTM->tm_mday = psTime->u8Day;
    3c12:	14 96       	adiw	r26, 0x04	; 4
    3c14:	8c 91       	ld	r24, X
    3c16:	14 97       	sbiw	r26, 0x04	; 4
    3c18:	90 e0       	ldi	r25, 0x00	; 0
    3c1a:	97 83       	std	Z+7, r25	; 0x07
    3c1c:	86 83       	std	Z+6, r24	; 0x06
	psTimeTM->tm_mon = psTime->u8Month - 1;
    3c1e:	15 96       	adiw	r26, 0x05	; 5
    3c20:	8c 91       	ld	r24, X
    3c22:	15 97       	sbiw	r26, 0x05	; 5
    3c24:	90 e0       	ldi	r25, 0x00	; 0
    3c26:	01 97       	sbiw	r24, 0x01	; 1
    3c28:	91 87       	std	Z+9, r25	; 0x09
    3c2a:	80 87       	std	Z+8, r24	; 0x08
	
	if (psTime->u8Year < YEAR_ROLLOVER_CUTOFF)
    3c2c:	16 96       	adiw	r26, 0x06	; 6
    3c2e:	8c 91       	ld	r24, X
    3c30:	84 31       	cpi	r24, 0x14	; 20
    3c32:	30 f4       	brcc	.+12     	; 0x3c40 <HWToStructTM+0x60>
	{
		psTimeTM->tm_year = 2100 + psTime->u8Year;
    3c34:	90 e0       	ldi	r25, 0x00	; 0
    3c36:	8c 5c       	subi	r24, 0xCC	; 204
    3c38:	97 4f       	sbci	r25, 0xF7	; 247
    3c3a:	93 87       	std	Z+11, r25	; 0x0b
    3c3c:	82 87       	std	Z+10, r24	; 0x0a
    3c3e:	05 c0       	rjmp	.+10     	; 0x3c4a <HWToStructTM+0x6a>
	}
	else
	{
		psTimeTM->tm_year = 2000 + psTime->u8Year;
    3c40:	90 e0       	ldi	r25, 0x00	; 0
    3c42:	80 53       	subi	r24, 0x30	; 48
    3c44:	98 4f       	sbci	r25, 0xF8	; 248
    3c46:	93 87       	std	Z+11, r25	; 0x0b
    3c48:	82 87       	std	Z+10, r24	; 0x0a
	}	
	
	psTimeTM->tm_year -= 1900;
    3c4a:	82 85       	ldd	r24, Z+10	; 0x0a
    3c4c:	93 85       	ldd	r25, Z+11	; 0x0b
    3c4e:	8c 56       	subi	r24, 0x6C	; 108
    3c50:	97 40       	sbci	r25, 0x07	; 7
    3c52:	93 87       	std	Z+11, r25	; 0x0b
    3c54:	82 87       	std	Z+10, r24	; 0x0a
}
    3c56:	df 91       	pop	r29
    3c58:	cf 91       	pop	r28
    3c5a:	08 95       	ret

Disassembly of section .text.__vector_10:

00003956 <__vector_10>:
// # Of seconds since January 1, 1970
static volatile uint64_t sg_u64Time;

// Called once per second on rev 1 and newer hardware
ISR(INT3_vect, ISR_NOBLOCK)
{
    3956:	78 94       	sei
    3958:	1f 92       	push	r1
    395a:	0f 92       	push	r0
    395c:	0f b6       	in	r0, 0x3f	; 63
    395e:	0f 92       	push	r0
    3960:	11 24       	eor	r1, r1
    3962:	2f 93       	push	r18
    3964:	3f 93       	push	r19
    3966:	4f 93       	push	r20
    3968:	5f 93       	push	r21
    396a:	6f 93       	push	r22
    396c:	7f 93       	push	r23
    396e:	8f 93       	push	r24
    3970:	9f 93       	push	r25
    3972:	af 93       	push	r26
	EIFR |= (1 << INTF3);
    3974:	8c b3       	in	r24, 0x1c	; 28
    3976:	88 60       	ori	r24, 0x08	; 8
    3978:	8c bb       	out	0x1c, r24	; 28
	sg_u64Time++;
    397a:	20 91 45 09 	lds	r18, 0x0945	; 0x800945 <sg_u64Time>
    397e:	30 91 46 09 	lds	r19, 0x0946	; 0x800946 <sg_u64Time+0x1>
    3982:	40 91 47 09 	lds	r20, 0x0947	; 0x800947 <sg_u64Time+0x2>
    3986:	50 91 48 09 	lds	r21, 0x0948	; 0x800948 <sg_u64Time+0x3>
    398a:	60 91 49 09 	lds	r22, 0x0949	; 0x800949 <sg_u64Time+0x4>
    398e:	70 91 4a 09 	lds	r23, 0x094A	; 0x80094a <sg_u64Time+0x5>
    3992:	80 91 4b 09 	lds	r24, 0x094B	; 0x80094b <sg_u64Time+0x6>
    3996:	90 91 4c 09 	lds	r25, 0x094C	; 0x80094c <sg_u64Time+0x7>
    399a:	a1 e0       	ldi	r26, 0x01	; 1
    399c:	0e 94 8f 26 	call	0x4d1e	; 0x4d1e <__adddi3_s8>
    39a0:	20 93 45 09 	sts	0x0945, r18	; 0x800945 <sg_u64Time>
    39a4:	30 93 46 09 	sts	0x0946, r19	; 0x800946 <sg_u64Time+0x1>
    39a8:	40 93 47 09 	sts	0x0947, r20	; 0x800947 <sg_u64Time+0x2>
    39ac:	50 93 48 09 	sts	0x0948, r21	; 0x800948 <sg_u64Time+0x3>
    39b0:	60 93 49 09 	sts	0x0949, r22	; 0x800949 <sg_u64Time+0x4>
    39b4:	70 93 4a 09 	sts	0x094A, r23	; 0x80094a <sg_u64Time+0x5>
    39b8:	80 93 4b 09 	sts	0x094B, r24	; 0x80094b <sg_u64Time+0x6>
    39bc:	90 93 4c 09 	sts	0x094C, r25	; 0x80094c <sg_u64Time+0x7>
}
    39c0:	af 91       	pop	r26
    39c2:	9f 91       	pop	r25
    39c4:	8f 91       	pop	r24
    39c6:	7f 91       	pop	r23
    39c8:	6f 91       	pop	r22
    39ca:	5f 91       	pop	r21
    39cc:	4f 91       	pop	r20
    39ce:	3f 91       	pop	r19
    39d0:	2f 91       	pop	r18
    39d2:	0f 90       	pop	r0
    39d4:	0f be       	out	0x3f, r0	; 63
    39d6:	0f 90       	pop	r0
    39d8:	1f 90       	pop	r1
    39da:	18 95       	reti

Disassembly of section .text.RTCReadRegisters:

00003b62 <RTCReadRegisters>:
}

bool RTCReadRegisters( uint8_t u8RegisterAddr, 
					   uint8_t* pu8Data, 
					   uint8_t u8Length )
{
    3b62:	ff 92       	push	r15
    3b64:	0f 93       	push	r16
    3b66:	1f 93       	push	r17
    3b68:	cf 93       	push	r28
    3b6a:	df 93       	push	r29
    3b6c:	f8 2e       	mov	r15, r24
    3b6e:	8b 01       	movw	r16, r22
    3b70:	c4 2f       	mov	r28, r20
	bool bResult;
	
	MBASSERT( u8Length >= 1 );
    3b72:	41 11       	cpse	r20, r1
    3b74:	07 c0       	rjmp	.+14     	; 0x3b84 <RTCReadRegisters+0x22>
    3b76:	4f e5       	ldi	r20, 0x5F	; 95
    3b78:	50 e0       	ldi	r21, 0x00	; 0
    3b7a:	6e e6       	ldi	r22, 0x6E	; 110
    3b7c:	74 e0       	ldi	r23, 0x04	; 4
    3b7e:	80 e0       	ldi	r24, 0x00	; 0
    3b80:	0e 94 fc 23 	call	0x47f8	; 0x47f8 <PlatformAssert>
	
	// First send device address and write register address
	bResult = RTCStartTransaction( RTC_ADDRESS, false, true );
    3b84:	41 e0       	ldi	r20, 0x01	; 1
    3b86:	60 e0       	ldi	r22, 0x00	; 0
    3b88:	8e ed       	ldi	r24, 0xDE	; 222
    3b8a:	0e 94 15 22 	call	0x442a	; 0x442a <RTCStartTransaction>
    3b8e:	d8 2f       	mov	r29, r24
	
	// Couldn't get an ACK?  Give up now
	if( false == bResult )
    3b90:	88 23       	and	r24, r24
    3b92:	e9 f0       	breq	.+58     	; 0x3bce <RTCReadRegisters+0x6c>
	{
		goto errorExit;
	}
	
	// Send the register address
	bResult = I2CTxByte( u8RegisterAddr );
    3b94:	8f 2d       	mov	r24, r15
    3b96:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <I2CTxByte>
    3b9a:	d8 2f       	mov	r29, r24
	
	if( false == bResult )
    3b9c:	88 23       	and	r24, r24
    3b9e:	b9 f0       	breq	.+46     	; 0x3bce <RTCReadRegisters+0x6c>
	{
		goto errorExit;
	}
	
	// Send repeated start with read
	bResult = RTCStartTransaction( RTC_ADDRESS, true, false );
    3ba0:	40 e0       	ldi	r20, 0x00	; 0
    3ba2:	61 e0       	ldi	r22, 0x01	; 1
    3ba4:	8e ed       	ldi	r24, 0xDE	; 222
    3ba6:	0e 94 15 22 	call	0x442a	; 0x442a <RTCStartTransaction>
    3baa:	d8 2f       	mov	r29, r24
	
	// Couldn't get an ACK?  Give up now
	if( false == bResult )
    3bac:	81 11       	cpse	r24, r1
    3bae:	08 c0       	rjmp	.+16     	; 0x3bc0 <RTCReadRegisters+0x5e>
    3bb0:	0e c0       	rjmp	.+28     	; 0x3bce <RTCReadRegisters+0x6c>
		goto errorExit;
	}
	
	while( u8Length >= 2 )
	{
		*pu8Data = I2CRxByte( true );
    3bb2:	81 e0       	ldi	r24, 0x01	; 1
    3bb4:	0e 94 6c 1e 	call	0x3cd8	; 0x3cd8 <I2CRxByte>
    3bb8:	f8 01       	movw	r30, r16
    3bba:	81 93       	st	Z+, r24
    3bbc:	8f 01       	movw	r16, r30
		pu8Data++;
		u8Length--;
    3bbe:	c1 50       	subi	r28, 0x01	; 1
	if( false == bResult )
	{
		goto errorExit;
	}
	
	while( u8Length >= 2 )
    3bc0:	c2 30       	cpi	r28, 0x02	; 2
    3bc2:	b8 f7       	brcc	.-18     	; 0x3bb2 <RTCReadRegisters+0x50>
		pu8Data++;
		u8Length--;
	}
	
	// Final read with NACK
	*pu8Data = I2CRxByte( false );
    3bc4:	80 e0       	ldi	r24, 0x00	; 0
    3bc6:	0e 94 6c 1e 	call	0x3cd8	; 0x3cd8 <I2CRxByte>
    3bca:	f8 01       	movw	r30, r16
    3bcc:	80 83       	st	Z, r24
	
errorExit:

	I2CStop();
    3bce:	0e 94 a1 24 	call	0x4942	; 0x4942 <I2CStop>
	
	return(bResult);
}
    3bd2:	8d 2f       	mov	r24, r29
    3bd4:	df 91       	pop	r29
    3bd6:	cf 91       	pop	r28
    3bd8:	1f 91       	pop	r17
    3bda:	0f 91       	pop	r16
    3bdc:	ff 90       	pop	r15
    3bde:	08 95       	ret

Disassembly of section .text.RTCReadHW:

00002ae6 <RTCReadHW>:
	sei();
	
	psSrc = gmtime((const time_t *) &u64Time);
	memcpy((void *) psTime, (void *) psSrc, sizeof(*psTime));
	return(true);
}
    2ae6:	cf 93       	push	r28
    2ae8:	df 93       	push	r29
    2aea:	ec 01       	movw	r28, r24
    2aec:	47 e0       	ldi	r20, 0x07	; 7
    2aee:	bc 01       	movw	r22, r24
    2af0:	80 e0       	ldi	r24, 0x00	; 0
    2af2:	0e 94 b1 1d 	call	0x3b62	; 0x3b62 <RTCReadRegisters>
    2af6:	88 23       	and	r24, r24
    2af8:	09 f4       	brne	.+2      	; 0x2afc <RTCReadHW+0x16>
    2afa:	63 c0       	rjmp	.+198    	; 0x2bc2 <RTCReadHW+0xdc>
    2afc:	98 81       	ld	r25, Y
    2afe:	29 2f       	mov	r18, r25
    2b00:	22 95       	swap	r18
    2b02:	2f 70       	andi	r18, 0x0F	; 15
    2b04:	27 70       	andi	r18, 0x07	; 7
    2b06:	22 0f       	add	r18, r18
    2b08:	32 2f       	mov	r19, r18
    2b0a:	33 0f       	add	r19, r19
    2b0c:	33 0f       	add	r19, r19
    2b0e:	23 0f       	add	r18, r19
    2b10:	9f 70       	andi	r25, 0x0F	; 15
    2b12:	92 0f       	add	r25, r18
    2b14:	98 83       	st	Y, r25
    2b16:	99 81       	ldd	r25, Y+1	; 0x01
    2b18:	29 2f       	mov	r18, r25
    2b1a:	22 95       	swap	r18
    2b1c:	2f 70       	andi	r18, 0x0F	; 15
    2b1e:	27 70       	andi	r18, 0x07	; 7
    2b20:	22 0f       	add	r18, r18
    2b22:	32 2f       	mov	r19, r18
    2b24:	33 0f       	add	r19, r19
    2b26:	33 0f       	add	r19, r19
    2b28:	23 0f       	add	r18, r19
    2b2a:	9f 70       	andi	r25, 0x0F	; 15
    2b2c:	92 0f       	add	r25, r18
    2b2e:	99 83       	std	Y+1, r25	; 0x01
    2b30:	9a 81       	ldd	r25, Y+2	; 0x02
    2b32:	96 ff       	sbrs	r25, 6
    2b34:	11 c0       	rjmp	.+34     	; 0x2b58 <RTCReadHW+0x72>
    2b36:	94 fb       	bst	r25, 4
    2b38:	22 27       	eor	r18, r18
    2b3a:	20 f9       	bld	r18, 0
    2b3c:	22 0f       	add	r18, r18
    2b3e:	32 2f       	mov	r19, r18
    2b40:	33 0f       	add	r19, r19
    2b42:	33 0f       	add	r19, r19
    2b44:	23 0f       	add	r18, r19
    2b46:	39 2f       	mov	r19, r25
    2b48:	3f 70       	andi	r19, 0x0F	; 15
    2b4a:	23 0f       	add	r18, r19
    2b4c:	2a 83       	std	Y+2, r18	; 0x02
    2b4e:	95 ff       	sbrs	r25, 5
    2b50:	0f c0       	rjmp	.+30     	; 0x2b70 <RTCReadHW+0x8a>
    2b52:	24 5f       	subi	r18, 0xF4	; 244
    2b54:	2a 83       	std	Y+2, r18	; 0x02
    2b56:	0c c0       	rjmp	.+24     	; 0x2b70 <RTCReadHW+0x8a>
    2b58:	29 2f       	mov	r18, r25
    2b5a:	22 95       	swap	r18
    2b5c:	2f 70       	andi	r18, 0x0F	; 15
    2b5e:	23 70       	andi	r18, 0x03	; 3
    2b60:	22 0f       	add	r18, r18
    2b62:	32 2f       	mov	r19, r18
    2b64:	33 0f       	add	r19, r19
    2b66:	33 0f       	add	r19, r19
    2b68:	23 0f       	add	r18, r19
    2b6a:	9f 70       	andi	r25, 0x0F	; 15
    2b6c:	92 0f       	add	r25, r18
    2b6e:	9a 83       	std	Y+2, r25	; 0x02
    2b70:	9b 81       	ldd	r25, Y+3	; 0x03
    2b72:	97 70       	andi	r25, 0x07	; 7
    2b74:	9b 83       	std	Y+3, r25	; 0x03
    2b76:	9c 81       	ldd	r25, Y+4	; 0x04
    2b78:	29 2f       	mov	r18, r25
    2b7a:	22 95       	swap	r18
    2b7c:	2f 70       	andi	r18, 0x0F	; 15
    2b7e:	23 70       	andi	r18, 0x03	; 3
    2b80:	22 0f       	add	r18, r18
    2b82:	32 2f       	mov	r19, r18
    2b84:	33 0f       	add	r19, r19
    2b86:	33 0f       	add	r19, r19
    2b88:	23 0f       	add	r18, r19
    2b8a:	9f 70       	andi	r25, 0x0F	; 15
    2b8c:	92 0f       	add	r25, r18
    2b8e:	9c 83       	std	Y+4, r25	; 0x04
    2b90:	9d 81       	ldd	r25, Y+5	; 0x05
    2b92:	94 fb       	bst	r25, 4
    2b94:	22 27       	eor	r18, r18
    2b96:	20 f9       	bld	r18, 0
    2b98:	22 0f       	add	r18, r18
    2b9a:	32 2f       	mov	r19, r18
    2b9c:	33 0f       	add	r19, r19
    2b9e:	33 0f       	add	r19, r19
    2ba0:	23 0f       	add	r18, r19
    2ba2:	9f 70       	andi	r25, 0x0F	; 15
    2ba4:	92 0f       	add	r25, r18
    2ba6:	9d 83       	std	Y+5, r25	; 0x05
    2ba8:	9e 81       	ldd	r25, Y+6	; 0x06
    2baa:	29 2f       	mov	r18, r25
    2bac:	22 95       	swap	r18
    2bae:	2f 70       	andi	r18, 0x0F	; 15
    2bb0:	22 0f       	add	r18, r18
    2bb2:	32 2f       	mov	r19, r18
    2bb4:	33 0f       	add	r19, r19
    2bb6:	33 0f       	add	r19, r19
    2bb8:	23 0f       	add	r18, r19
    2bba:	9f 70       	andi	r25, 0x0F	; 15
    2bbc:	92 0f       	add	r25, r18
    2bbe:	9c 5e       	subi	r25, 0xEC	; 236
    2bc0:	9e 83       	std	Y+6, r25	; 0x06
    2bc2:	df 91       	pop	r29
    2bc4:	cf 91       	pop	r28
    2bc6:	08 95       	ret

Disassembly of section .text.RTCWriteRegisters:

00003ea2 <RTCWriteRegisters>:
}

bool RTCWriteRegisters( uint8_t u8RegisterAddr,
						uint8_t* pu8Data, 
						uint8_t u8Length )
{
    3ea2:	ff 92       	push	r15
    3ea4:	0f 93       	push	r16
    3ea6:	1f 93       	push	r17
    3ea8:	cf 93       	push	r28
    3eaa:	df 93       	push	r29
    3eac:	f8 2e       	mov	r15, r24
    3eae:	8b 01       	movw	r16, r22
    3eb0:	c4 2f       	mov	r28, r20
	bool bResult;
	
	MBASSERT( u8Length >= 1 );
    3eb2:	41 11       	cpse	r20, r1
    3eb4:	07 c0       	rjmp	.+14     	; 0x3ec4 <RTCWriteRegisters+0x22>
    3eb6:	42 e9       	ldi	r20, 0x92	; 146
    3eb8:	50 e0       	ldi	r21, 0x00	; 0
    3eba:	6e e6       	ldi	r22, 0x6E	; 110
    3ebc:	74 e0       	ldi	r23, 0x04	; 4
    3ebe:	80 e0       	ldi	r24, 0x00	; 0
    3ec0:	0e 94 fc 23 	call	0x47f8	; 0x47f8 <PlatformAssert>
	
	// First send device address and write register address
	bResult = RTCStartTransaction( RTC_ADDRESS, false, true );
    3ec4:	41 e0       	ldi	r20, 0x01	; 1
    3ec6:	60 e0       	ldi	r22, 0x00	; 0
    3ec8:	8e ed       	ldi	r24, 0xDE	; 222
    3eca:	0e 94 15 22 	call	0x442a	; 0x442a <RTCStartTransaction>
    3ece:	d8 2f       	mov	r29, r24
	
	// Couldn't get an ACK?  Give up now
	if( false == bResult )
    3ed0:	88 23       	and	r24, r24
    3ed2:	99 f0       	breq	.+38     	; 0x3efa <RTCWriteRegisters+0x58>
	{
		goto errorExit;
	}
	
	// Send the register address
	bResult = I2CTxByte( u8RegisterAddr );
    3ed4:	8f 2d       	mov	r24, r15
    3ed6:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <I2CTxByte>
    3eda:	d8 2f       	mov	r29, r24
	
	if( false == bResult )
    3edc:	81 11       	cpse	r24, r1
    3ede:	0b c0       	rjmp	.+22     	; 0x3ef6 <RTCWriteRegisters+0x54>
    3ee0:	0c c0       	rjmp	.+24     	; 0x3efa <RTCWriteRegisters+0x58>
	}
	
	// Now immediately send the sequential data
	while( u8Length )
	{
		bResult = I2CTxByte( *pu8Data );
    3ee2:	f8 01       	movw	r30, r16
    3ee4:	80 81       	ld	r24, Z
    3ee6:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <I2CTxByte>
    3eea:	d8 2f       	mov	r29, r24
		
		if( false == bResult )
    3eec:	88 23       	and	r24, r24
    3eee:	29 f0       	breq	.+10     	; 0x3efa <RTCWriteRegisters+0x58>
		{
			goto errorExit;
		}
		
		pu8Data++;
    3ef0:	0f 5f       	subi	r16, 0xFF	; 255
    3ef2:	1f 4f       	sbci	r17, 0xFF	; 255
		u8Length--;
    3ef4:	c1 50       	subi	r28, 0x01	; 1
	{
		goto errorExit;
	}
	
	// Now immediately send the sequential data
	while( u8Length )
    3ef6:	c1 11       	cpse	r28, r1
    3ef8:	f4 cf       	rjmp	.-24     	; 0x3ee2 <RTCWriteRegisters+0x40>
		u8Length--;
	}
	
errorExit:

	I2CStop();
    3efa:	0e 94 a1 24 	call	0x4942	; 0x4942 <I2CStop>
	
	return( bResult );
}
    3efe:	8d 2f       	mov	r24, r29
    3f00:	df 91       	pop	r29
    3f02:	cf 91       	pop	r28
    3f04:	1f 91       	pop	r17
    3f06:	0f 91       	pop	r16
    3f08:	ff 90       	pop	r15
    3f0a:	08 95       	ret

Disassembly of section .text.RTCWriteHW:

000028f0 <RTCWriteHW>:
	sei();
	
	psSrc = gmtime((const time_t *) &u64Time);
	memcpy((void *) psTime, (void *) psSrc, sizeof(*psTime));
	return(true);
}
    28f0:	fc 01       	movw	r30, r24
    28f2:	20 81       	ld	r18, Z
    28f4:	8d ec       	ldi	r24, 0xCD	; 205
    28f6:	28 9f       	mul	r18, r24
    28f8:	91 2d       	mov	r25, r1
    28fa:	11 24       	eor	r1, r1
    28fc:	96 95       	lsr	r25
    28fe:	96 95       	lsr	r25
    2900:	96 95       	lsr	r25
    2902:	30 e1       	ldi	r19, 0x10	; 16
    2904:	93 9f       	mul	r25, r19
    2906:	a0 01       	movw	r20, r0
    2908:	11 24       	eor	r1, r1
    290a:	99 0f       	add	r25, r25
    290c:	39 2f       	mov	r19, r25
    290e:	33 0f       	add	r19, r19
    2910:	33 0f       	add	r19, r19
    2912:	93 0f       	add	r25, r19
    2914:	29 1b       	sub	r18, r25
    2916:	24 2b       	or	r18, r20
    2918:	20 83       	st	Z, r18
    291a:	21 81       	ldd	r18, Z+1	; 0x01
    291c:	28 9f       	mul	r18, r24
    291e:	91 2d       	mov	r25, r1
    2920:	11 24       	eor	r1, r1
    2922:	96 95       	lsr	r25
    2924:	96 95       	lsr	r25
    2926:	96 95       	lsr	r25
    2928:	30 e1       	ldi	r19, 0x10	; 16
    292a:	93 9f       	mul	r25, r19
    292c:	a0 01       	movw	r20, r0
    292e:	11 24       	eor	r1, r1
    2930:	99 0f       	add	r25, r25
    2932:	39 2f       	mov	r19, r25
    2934:	33 0f       	add	r19, r19
    2936:	33 0f       	add	r19, r19
    2938:	93 0f       	add	r25, r19
    293a:	29 1b       	sub	r18, r25
    293c:	24 2b       	or	r18, r20
    293e:	21 83       	std	Z+1, r18	; 0x01
    2940:	42 81       	ldd	r20, Z+2	; 0x02
    2942:	48 9f       	mul	r20, r24
    2944:	91 2d       	mov	r25, r1
    2946:	11 24       	eor	r1, r1
    2948:	96 95       	lsr	r25
    294a:	96 95       	lsr	r25
    294c:	96 95       	lsr	r25
    294e:	50 e1       	ldi	r21, 0x10	; 16
    2950:	95 9f       	mul	r25, r21
    2952:	90 01       	movw	r18, r0
    2954:	11 24       	eor	r1, r1
    2956:	99 0f       	add	r25, r25
    2958:	39 2f       	mov	r19, r25
    295a:	33 0f       	add	r19, r19
    295c:	33 0f       	add	r19, r19
    295e:	93 0f       	add	r25, r19
    2960:	49 1b       	sub	r20, r25
    2962:	24 2b       	or	r18, r20
    2964:	2f 7b       	andi	r18, 0xBF	; 191
    2966:	22 83       	std	Z+2, r18	; 0x02
    2968:	93 81       	ldd	r25, Z+3	; 0x03
    296a:	97 70       	andi	r25, 0x07	; 7
    296c:	98 60       	ori	r25, 0x08	; 8
    296e:	93 83       	std	Z+3, r25	; 0x03
    2970:	24 81       	ldd	r18, Z+4	; 0x04
    2972:	28 9f       	mul	r18, r24
    2974:	91 2d       	mov	r25, r1
    2976:	11 24       	eor	r1, r1
    2978:	96 95       	lsr	r25
    297a:	96 95       	lsr	r25
    297c:	96 95       	lsr	r25
    297e:	30 e1       	ldi	r19, 0x10	; 16
    2980:	93 9f       	mul	r25, r19
    2982:	a0 01       	movw	r20, r0
    2984:	11 24       	eor	r1, r1
    2986:	99 0f       	add	r25, r25
    2988:	39 2f       	mov	r19, r25
    298a:	33 0f       	add	r19, r19
    298c:	33 0f       	add	r19, r19
    298e:	93 0f       	add	r25, r19
    2990:	29 1b       	sub	r18, r25
    2992:	24 2b       	or	r18, r20
    2994:	24 83       	std	Z+4, r18	; 0x04
    2996:	25 81       	ldd	r18, Z+5	; 0x05
    2998:	28 9f       	mul	r18, r24
    299a:	91 2d       	mov	r25, r1
    299c:	11 24       	eor	r1, r1
    299e:	96 95       	lsr	r25
    29a0:	96 95       	lsr	r25
    29a2:	96 95       	lsr	r25
    29a4:	30 e1       	ldi	r19, 0x10	; 16
    29a6:	93 9f       	mul	r25, r19
    29a8:	a0 01       	movw	r20, r0
    29aa:	11 24       	eor	r1, r1
    29ac:	99 0f       	add	r25, r25
    29ae:	39 2f       	mov	r19, r25
    29b0:	33 0f       	add	r19, r19
    29b2:	33 0f       	add	r19, r19
    29b4:	93 0f       	add	r25, r19
    29b6:	29 1b       	sub	r18, r25
    29b8:	24 2b       	or	r18, r20
    29ba:	25 83       	std	Z+5, r18	; 0x05
    29bc:	96 81       	ldd	r25, Z+6	; 0x06
    29be:	98 9f       	mul	r25, r24
    29c0:	81 2d       	mov	r24, r1
    29c2:	11 24       	eor	r1, r1
    29c4:	86 95       	lsr	r24
    29c6:	86 95       	lsr	r24
    29c8:	86 95       	lsr	r24
    29ca:	40 e1       	ldi	r20, 0x10	; 16
    29cc:	84 9f       	mul	r24, r20
    29ce:	90 01       	movw	r18, r0
    29d0:	11 24       	eor	r1, r1
    29d2:	88 0f       	add	r24, r24
    29d4:	38 2f       	mov	r19, r24
    29d6:	33 0f       	add	r19, r19
    29d8:	33 0f       	add	r19, r19
    29da:	83 0f       	add	r24, r19
    29dc:	98 1b       	sub	r25, r24
    29de:	92 2b       	or	r25, r18
    29e0:	96 83       	std	Z+6, r25	; 0x06
    29e2:	47 e0       	ldi	r20, 0x07	; 7
    29e4:	bf 01       	movw	r22, r30
    29e6:	80 e0       	ldi	r24, 0x00	; 0
    29e8:	0e 94 51 1f 	call	0x3ea2	; 0x3ea2 <RTCWriteRegisters>
    29ec:	08 95       	ret

Disassembly of section .text.RTCSetTime:

000030dc <RTCSetTime>:

// This sets the RTC to the specific time passed in. True is returned
// if it's 
bool RTCSetTime(uint64_t u64Timet)
{
    30dc:	0f 93       	push	r16
    30de:	1f 93       	push	r17
    30e0:	cf 93       	push	r28
    30e2:	df 93       	push	r29
    30e4:	cd b7       	in	r28, 0x3d	; 61
    30e6:	de b7       	in	r29, 0x3e	; 62
    30e8:	a8 97       	sbiw	r28, 0x28	; 40
    30ea:	0f b6       	in	r0, 0x3f	; 63
    30ec:	f8 94       	cli
    30ee:	de bf       	out	0x3e, r29	; 62
    30f0:	0f be       	out	0x3f, r0	; 63
    30f2:	cd bf       	out	0x3d, r28	; 61
    30f4:	29 a3       	std	Y+33, r18	; 0x21
    30f6:	3a a3       	std	Y+34, r19	; 0x22
    30f8:	4b a3       	std	Y+35, r20	; 0x23
    30fa:	5c a3       	std	Y+36, r21	; 0x24
    30fc:	6d a3       	std	Y+37, r22	; 0x25
    30fe:	7e a3       	std	Y+38, r23	; 0x26
    3100:	8f a3       	std	Y+39, r24	; 0x27
    3102:	98 a7       	std	Y+40, r25	; 0x28
	struct tm sTime;
	struct tm *psTime;
	SMCP7940NTime sTimeHW;

	// Convert to GMTime
	memset((void *) &sTime, 0, sizeof(sTime));
    3104:	fe 01       	movw	r30, r28
    3106:	31 96       	adiw	r30, 0x01	; 1
    3108:	89 e1       	ldi	r24, 0x19	; 25
    310a:	df 01       	movw	r26, r30
    310c:	1d 92       	st	X+, r1
    310e:	8a 95       	dec	r24
    3110:	e9 f7       	brne	.-6      	; 0x310c <RTCSetTime+0x30>
	psTime = gmtime((const time_t *) &u64Timet);
    3112:	be 01       	movw	r22, r28
    3114:	6f 5d       	subi	r22, 0xDF	; 223
    3116:	7f 4f       	sbci	r23, 0xFF	; 255
    3118:	80 e8       	ldi	r24, 0x80	; 128
    311a:	0e 94 50 27 	call	0x4ea0	; 0x4ea0 <gmtime>
    311e:	8c 01       	movw	r16, r24
	MBASSERT(psTime);
    3120:	89 2b       	or	r24, r25
    3122:	39 f4       	brne	.+14     	; 0x3132 <RTCSetTime+0x56>
    3124:	42 e8       	ldi	r20, 0x82	; 130
    3126:	51 e0       	ldi	r21, 0x01	; 1
    3128:	6e e6       	ldi	r22, 0x6E	; 110
    312a:	74 e0       	ldi	r23, 0x04	; 4
    312c:	80 e0       	ldi	r24, 0x00	; 0
    312e:	0e 94 fc 23 	call	0x47f8	; 0x47f8 <PlatformAssert>
	memcpy((void *) &sTime, (void *) psTime, sizeof(sTime));
    3132:	a8 01       	movw	r20, r16
    3134:	60 e8       	ldi	r22, 0x80	; 128
    3136:	29 e1       	ldi	r18, 0x19	; 25
    3138:	30 e0       	ldi	r19, 0x00	; 0
    313a:	ce 01       	movw	r24, r28
    313c:	01 96       	adiw	r24, 0x01	; 1
    313e:	0e 94 88 23 	call	0x4710	; 0x4710 <memcpy>
	
	// Now convert to hardware
	StructTMToHW(&sTime,
    3142:	be 01       	movw	r22, r28
    3144:	66 5e       	subi	r22, 0xE6	; 230
    3146:	7f 4f       	sbci	r23, 0xFF	; 255
    3148:	ce 01       	movw	r24, r28
    314a:	01 96       	adiw	r24, 0x01	; 1
    314c:	0e 94 fa 20 	call	0x41f4	; 0x41f4 <StructTMToHW>
				 &sTimeHW);
	
	// Set the time			 
	cli();
    3150:	f8 94       	cli
	sg_u64Time = u64Timet;
    3152:	79 a1       	ldd	r23, Y+33	; 0x21
    3154:	6a a1       	ldd	r22, Y+34	; 0x22
    3156:	5b a1       	ldd	r21, Y+35	; 0x23
    3158:	4c a1       	ldd	r20, Y+36	; 0x24
    315a:	3d a1       	ldd	r19, Y+37	; 0x25
    315c:	2e a1       	ldd	r18, Y+38	; 0x26
    315e:	9f a1       	ldd	r25, Y+39	; 0x27
    3160:	88 a5       	ldd	r24, Y+40	; 0x28
    3162:	70 93 45 09 	sts	0x0945, r23	; 0x800945 <sg_u64Time>
    3166:	60 93 46 09 	sts	0x0946, r22	; 0x800946 <sg_u64Time+0x1>
    316a:	50 93 47 09 	sts	0x0947, r21	; 0x800947 <sg_u64Time+0x2>
    316e:	40 93 48 09 	sts	0x0948, r20	; 0x800948 <sg_u64Time+0x3>
    3172:	30 93 49 09 	sts	0x0949, r19	; 0x800949 <sg_u64Time+0x4>
    3176:	20 93 4a 09 	sts	0x094A, r18	; 0x80094a <sg_u64Time+0x5>
    317a:	90 93 4b 09 	sts	0x094B, r25	; 0x80094b <sg_u64Time+0x6>
    317e:	80 93 4c 09 	sts	0x094C, r24	; 0x80094c <sg_u64Time+0x7>
	sei();
    3182:	78 94       	sei
	
	// Now go tell the hardware about it
	return(RTCWriteHW(&sTimeHW));
    3184:	ce 01       	movw	r24, r28
    3186:	4a 96       	adiw	r24, 0x1a	; 26
    3188:	0e 94 78 14 	call	0x28f0	; 0x28f0 <RTCWriteHW>
}
    318c:	a8 96       	adiw	r28, 0x28	; 40
    318e:	0f b6       	in	r0, 0x3f	; 63
    3190:	f8 94       	cli
    3192:	de bf       	out	0x3e, r29	; 62
    3194:	0f be       	out	0x3f, r0	; 63
    3196:	cd bf       	out	0x3d, r28	; 61
    3198:	df 91       	pop	r29
    319a:	cf 91       	pop	r28
    319c:	1f 91       	pop	r17
    319e:	0f 91       	pop	r16
    31a0:	08 95       	ret

Disassembly of section .text.RTCInit:

000017e4 <RTCInit>:
	sei();
	
	psSrc = gmtime((const time_t *) &u64Time);
	memcpy((void *) psTime, (void *) psSrc, sizeof(*psTime));
	return(true);
}
    17e4:	ff 92       	push	r15
    17e6:	0f 93       	push	r16
    17e8:	1f 93       	push	r17
    17ea:	cf 93       	push	r28
    17ec:	df 93       	push	r29
    17ee:	cd b7       	in	r28, 0x3d	; 61
    17f0:	de b7       	in	r29, 0x3e	; 62
    17f2:	a1 97       	sbiw	r28, 0x21	; 33
    17f4:	0f b6       	in	r0, 0x3f	; 63
    17f6:	f8 94       	cli
    17f8:	de bf       	out	0x3e, r29	; 62
    17fa:	0f be       	out	0x3f, r0	; 63
    17fc:	cd bf       	out	0x3d, r28	; 61
    17fe:	19 82       	std	Y+1, r1	; 0x01
    1800:	41 e0       	ldi	r20, 0x01	; 1
    1802:	be 01       	movw	r22, r28
    1804:	6f 5f       	subi	r22, 0xFF	; 255
    1806:	7f 4f       	sbci	r23, 0xFF	; 255
    1808:	87 e0       	ldi	r24, 0x07	; 7
    180a:	0e 94 51 1f 	call	0x3ea2	; 0x3ea2 <RTCWriteRegisters>
    180e:	18 2f       	mov	r17, r24
    1810:	88 23       	and	r24, r24
    1812:	09 f4       	brne	.+2      	; 0x1816 <RTCInit+0x32>
    1814:	eb c0       	rjmp	.+470    	; 0x19ec <RTCInit+0x208>
    1816:	80 e8       	ldi	r24, 0x80	; 128
    1818:	89 83       	std	Y+1, r24	; 0x01
    181a:	41 e0       	ldi	r20, 0x01	; 1
    181c:	be 01       	movw	r22, r28
    181e:	6f 5f       	subi	r22, 0xFF	; 255
    1820:	7f 4f       	sbci	r23, 0xFF	; 255
    1822:	80 e0       	ldi	r24, 0x00	; 0
    1824:	0e 94 51 1f 	call	0x3ea2	; 0x3ea2 <RTCWriteRegisters>
    1828:	18 2f       	mov	r17, r24
    182a:	81 11       	cpse	r24, r1
    182c:	17 c0       	rjmp	.+46     	; 0x185c <RTCInit+0x78>
    182e:	de c0       	rjmp	.+444    	; 0x19ec <RTCInit+0x208>
    1830:	19 82       	std	Y+1, r1	; 0x01
    1832:	41 e0       	ldi	r20, 0x01	; 1
    1834:	be 01       	movw	r22, r28
    1836:	6f 5f       	subi	r22, 0xFF	; 255
    1838:	7f 4f       	sbci	r23, 0xFF	; 255
    183a:	83 e0       	ldi	r24, 0x03	; 3
    183c:	0e 94 b1 1d 	call	0x3b62	; 0x3b62 <RTCReadRegisters>
    1840:	18 2f       	mov	r17, r24
    1842:	88 23       	and	r24, r24
    1844:	09 f4       	brne	.+2      	; 0x1848 <RTCInit+0x64>
    1846:	d2 c0       	rjmp	.+420    	; 0x19ec <RTCInit+0x208>
    1848:	89 81       	ldd	r24, Y+1	; 0x01
    184a:	85 fd       	sbrc	r24, 5
    184c:	0a c0       	rjmp	.+20     	; 0x1862 <RTCInit+0x7e>
    184e:	60 e0       	ldi	r22, 0x00	; 0
    1850:	70 e0       	ldi	r23, 0x00	; 0
    1852:	cb 01       	movw	r24, r22
    1854:	0e 94 4e 21 	call	0x429c	; 0x429c <Delay>
    1858:	0f 5f       	subi	r16, 0xFF	; 255
    185a:	01 c0       	rjmp	.+2      	; 0x185e <RTCInit+0x7a>
    185c:	00 e0       	ldi	r16, 0x00	; 0
    185e:	08 3c       	cpi	r16, 0xC8	; 200
    1860:	38 f3       	brcs	.-50     	; 0x1830 <RTCInit+0x4c>
    1862:	08 3c       	cpi	r16, 0xC8	; 200
    1864:	08 f0       	brcs	.+2      	; 0x1868 <RTCInit+0x84>
    1866:	c2 c0       	rjmp	.+388    	; 0x19ec <RTCInit+0x208>
    1868:	89 81       	ldd	r24, Y+1	; 0x01
    186a:	88 60       	ori	r24, 0x08	; 8
    186c:	89 83       	std	Y+1, r24	; 0x01
    186e:	41 e0       	ldi	r20, 0x01	; 1
    1870:	be 01       	movw	r22, r28
    1872:	6f 5f       	subi	r22, 0xFF	; 255
    1874:	7f 4f       	sbci	r23, 0xFF	; 255
    1876:	83 e0       	ldi	r24, 0x03	; 3
    1878:	0e 94 51 1f 	call	0x3ea2	; 0x3ea2 <RTCWriteRegisters>
    187c:	18 2f       	mov	r17, r24
    187e:	88 23       	and	r24, r24
    1880:	09 f4       	brne	.+2      	; 0x1884 <RTCInit+0xa0>
    1882:	b4 c0       	rjmp	.+360    	; 0x19ec <RTCInit+0x208>
    1884:	41 e0       	ldi	r20, 0x01	; 1
    1886:	be 01       	movw	r22, r28
    1888:	6f 5f       	subi	r22, 0xFF	; 255
    188a:	7f 4f       	sbci	r23, 0xFF	; 255
    188c:	82 e0       	ldi	r24, 0x02	; 2
    188e:	0e 94 b1 1d 	call	0x3b62	; 0x3b62 <RTCReadRegisters>
    1892:	18 2f       	mov	r17, r24
    1894:	88 23       	and	r24, r24
    1896:	09 f4       	brne	.+2      	; 0x189a <RTCInit+0xb6>
    1898:	a9 c0       	rjmp	.+338    	; 0x19ec <RTCInit+0x208>
    189a:	89 81       	ldd	r24, Y+1	; 0x01
    189c:	8f 7b       	andi	r24, 0xBF	; 191
    189e:	89 83       	std	Y+1, r24	; 0x01
    18a0:	41 e0       	ldi	r20, 0x01	; 1
    18a2:	be 01       	movw	r22, r28
    18a4:	6f 5f       	subi	r22, 0xFF	; 255
    18a6:	7f 4f       	sbci	r23, 0xFF	; 255
    18a8:	82 e0       	ldi	r24, 0x02	; 2
    18aa:	0e 94 51 1f 	call	0x3ea2	; 0x3ea2 <RTCWriteRegisters>
    18ae:	18 2f       	mov	r17, r24
    18b0:	88 23       	and	r24, r24
    18b2:	09 f4       	brne	.+2      	; 0x18b6 <RTCInit+0xd2>
    18b4:	9b c0       	rjmp	.+310    	; 0x19ec <RTCInit+0x208>
    18b6:	ce 01       	movw	r24, r28
    18b8:	02 96       	adiw	r24, 0x02	; 2
    18ba:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <RTCReadHW>
    18be:	18 2f       	mov	r17, r24
    18c0:	88 23       	and	r24, r24
    18c2:	09 f4       	brne	.+2      	; 0x18c6 <RTCInit+0xe2>
    18c4:	93 c0       	rjmp	.+294    	; 0x19ec <RTCInit+0x208>
    18c6:	8a 81       	ldd	r24, Y+2	; 0x02
    18c8:	8c 33       	cpi	r24, 0x3C	; 60
    18ca:	10 f4       	brcc	.+4      	; 0x18d0 <RTCInit+0xec>
    18cc:	10 e0       	ldi	r17, 0x00	; 0
    18ce:	01 c0       	rjmp	.+2      	; 0x18d2 <RTCInit+0xee>
    18d0:	11 e0       	ldi	r17, 0x01	; 1
    18d2:	8b 81       	ldd	r24, Y+3	; 0x03
    18d4:	8c 33       	cpi	r24, 0x3C	; 60
    18d6:	08 f0       	brcs	.+2      	; 0x18da <RTCInit+0xf6>
    18d8:	11 e0       	ldi	r17, 0x01	; 1
    18da:	8c 81       	ldd	r24, Y+4	; 0x04
    18dc:	8c 33       	cpi	r24, 0x3C	; 60
    18de:	08 f0       	brcs	.+2      	; 0x18e2 <RTCInit+0xfe>
    18e0:	11 e0       	ldi	r17, 0x01	; 1
    18e2:	8d 81       	ldd	r24, Y+5	; 0x05
    18e4:	81 50       	subi	r24, 0x01	; 1
    18e6:	87 30       	cpi	r24, 0x07	; 7
    18e8:	08 f0       	brcs	.+2      	; 0x18ec <RTCInit+0x108>
    18ea:	11 e0       	ldi	r17, 0x01	; 1
    18ec:	2f 81       	ldd	r18, Y+7	; 0x07
    18ee:	8f ef       	ldi	r24, 0xFF	; 255
    18f0:	82 0f       	add	r24, r18
    18f2:	8c 30       	cpi	r24, 0x0C	; 12
    18f4:	18 f5       	brcc	.+70     	; 0x193c <RTCInit+0x158>
    18f6:	0e 81       	ldd	r16, Y+6	; 0x06
    18f8:	00 23       	and	r16, r16
    18fa:	11 f1       	breq	.+68     	; 0x1940 <RTCInit+0x15c>
    18fc:	82 2f       	mov	r24, r18
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	01 97       	sbiw	r24, 0x01	; 1
    1902:	09 2e       	mov	r0, r25
    1904:	00 0c       	add	r0, r0
    1906:	aa 0b       	sbc	r26, r26
    1908:	8f 55       	subi	r24, 0x5F	; 95
    190a:	9b 4f       	sbci	r25, 0xFB	; 251
    190c:	af 4f       	sbci	r26, 0xFF	; 255
    190e:	fc 01       	movw	r30, r24
    1910:	f4 90       	lpm	r15, Z
    1912:	a7 fd       	sbrc	r26, 7
    1914:	f0 80       	ld	r15, Z
    1916:	22 30       	cpi	r18, 0x02	; 2
    1918:	71 f4       	brne	.+28     	; 0x1936 <RTCInit+0x152>
    191a:	88 85       	ldd	r24, Y+8	; 0x08
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	84 31       	cpi	r24, 0x14	; 20
    1920:	91 05       	cpc	r25, r1
    1922:	18 f4       	brcc	.+6      	; 0x192a <RTCInit+0x146>
    1924:	8c 5c       	subi	r24, 0xCC	; 204
    1926:	97 4f       	sbci	r25, 0xF7	; 247
    1928:	02 c0       	rjmp	.+4      	; 0x192e <RTCInit+0x14a>
    192a:	80 53       	subi	r24, 0x30	; 48
    192c:	98 4f       	sbci	r25, 0xF8	; 248
    192e:	0e 94 08 23 	call	0x4610	; 0x4610 <IsLeapYear>
    1932:	81 11       	cpse	r24, r1
    1934:	f3 94       	inc	r15
    1936:	f0 16       	cp	r15, r16
    1938:	28 f0       	brcs	.+10     	; 0x1944 <RTCInit+0x160>
    193a:	05 c0       	rjmp	.+10     	; 0x1946 <RTCInit+0x162>
    193c:	11 e0       	ldi	r17, 0x01	; 1
    193e:	03 c0       	rjmp	.+6      	; 0x1946 <RTCInit+0x162>
    1940:	11 e0       	ldi	r17, 0x01	; 1
    1942:	01 c0       	rjmp	.+2      	; 0x1946 <RTCInit+0x162>
    1944:	11 e0       	ldi	r17, 0x01	; 1
    1946:	11 23       	and	r17, r17
    1948:	b9 f0       	breq	.+46     	; 0x1978 <RTCInit+0x194>
    194a:	1a 82       	std	Y+2, r1	; 0x02
    194c:	1b 82       	std	Y+3, r1	; 0x03
    194e:	1c 82       	std	Y+4, r1	; 0x04
    1950:	81 e0       	ldi	r24, 0x01	; 1
    1952:	8e 83       	std	Y+6, r24	; 0x06
    1954:	8f 83       	std	Y+7, r24	; 0x07
    1956:	88 e1       	ldi	r24, 0x18	; 24
    1958:	88 87       	std	Y+8, r24	; 0x08
    195a:	ce 01       	movw	r24, r28
    195c:	02 96       	adiw	r24, 0x02	; 2
    195e:	0e 94 78 14 	call	0x28f0	; 0x28f0 <RTCWriteHW>
    1962:	18 2f       	mov	r17, r24
    1964:	88 23       	and	r24, r24
    1966:	09 f4       	brne	.+2      	; 0x196a <RTCInit+0x186>
    1968:	41 c0       	rjmp	.+130    	; 0x19ec <RTCInit+0x208>
    196a:	ce 01       	movw	r24, r28
    196c:	02 96       	adiw	r24, 0x02	; 2
    196e:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <RTCReadHW>
    1972:	18 2f       	mov	r17, r24
    1974:	88 23       	and	r24, r24
    1976:	d1 f1       	breq	.+116    	; 0x19ec <RTCInit+0x208>
    1978:	be 01       	movw	r22, r28
    197a:	67 5f       	subi	r22, 0xF7	; 247
    197c:	7f 4f       	sbci	r23, 0xFF	; 255
    197e:	ce 01       	movw	r24, r28
    1980:	02 96       	adiw	r24, 0x02	; 2
    1982:	0e 94 f0 1d 	call	0x3be0	; 0x3be0 <HWToStructTM>
    1986:	ce 01       	movw	r24, r28
    1988:	09 96       	adiw	r24, 0x09	; 9
    198a:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <mktime>
    198e:	8b 01       	movw	r16, r22
    1990:	9c 01       	movw	r18, r24
    1992:	f8 94       	cli
    1994:	00 93 45 09 	sts	0x0945, r16	; 0x800945 <sg_u64Time>
    1998:	10 93 46 09 	sts	0x0946, r17	; 0x800946 <sg_u64Time+0x1>
    199c:	20 93 47 09 	sts	0x0947, r18	; 0x800947 <sg_u64Time+0x2>
    19a0:	30 93 48 09 	sts	0x0948, r19	; 0x800948 <sg_u64Time+0x3>
    19a4:	10 92 49 09 	sts	0x0949, r1	; 0x800949 <sg_u64Time+0x4>
    19a8:	10 92 4a 09 	sts	0x094A, r1	; 0x80094a <sg_u64Time+0x5>
    19ac:	10 92 4b 09 	sts	0x094B, r1	; 0x80094b <sg_u64Time+0x6>
    19b0:	10 92 4c 09 	sts	0x094C, r1	; 0x80094c <sg_u64Time+0x7>
    19b4:	78 94       	sei
    19b6:	87 b1       	in	r24, 0x07	; 7
    19b8:	8e 7f       	andi	r24, 0xFE	; 254
    19ba:	87 b9       	out	0x07, r24	; 7
    19bc:	88 b1       	in	r24, 0x08	; 8
    19be:	81 60       	ori	r24, 0x01	; 1
    19c0:	88 b9       	out	0x08, r24	; 8
    19c2:	41 e0       	ldi	r20, 0x01	; 1
    19c4:	be 01       	movw	r22, r28
    19c6:	6f 5f       	subi	r22, 0xFF	; 255
    19c8:	7f 4f       	sbci	r23, 0xFF	; 255
    19ca:	87 e0       	ldi	r24, 0x07	; 7
    19cc:	0e 94 b1 1d 	call	0x3b62	; 0x3b62 <RTCReadRegisters>
    19d0:	18 2f       	mov	r17, r24
    19d2:	88 23       	and	r24, r24
    19d4:	59 f0       	breq	.+22     	; 0x19ec <RTCInit+0x208>
    19d6:	89 81       	ldd	r24, Y+1	; 0x01
    19d8:	80 64       	ori	r24, 0x40	; 64
    19da:	89 83       	std	Y+1, r24	; 0x01
    19dc:	41 e0       	ldi	r20, 0x01	; 1
    19de:	be 01       	movw	r22, r28
    19e0:	6f 5f       	subi	r22, 0xFF	; 255
    19e2:	7f 4f       	sbci	r23, 0xFF	; 255
    19e4:	87 e0       	ldi	r24, 0x07	; 7
    19e6:	0e 94 51 1f 	call	0x3ea2	; 0x3ea2 <RTCWriteRegisters>
    19ea:	18 2f       	mov	r17, r24
    19ec:	81 2f       	mov	r24, r17
    19ee:	a1 96       	adiw	r28, 0x21	; 33
    19f0:	0f b6       	in	r0, 0x3f	; 63
    19f2:	f8 94       	cli
    19f4:	de bf       	out	0x3e, r29	; 62
    19f6:	0f be       	out	0x3f, r0	; 63
    19f8:	cd bf       	out	0x3d, r28	; 61
    19fa:	df 91       	pop	r29
    19fc:	cf 91       	pop	r28
    19fe:	1f 91       	pop	r17
    1a00:	0f 91       	pop	r16
    1a02:	ff 90       	pop	r15
    1a04:	08 95       	ret

Disassembly of section .text.SDSetCS:

00004d8e <SDSetCS>:
static uint8_t sg_u8CSD[16];

// This will provide a !CS assertion or deassertion with pre/postamble clock
static void SDSetCS(bool bAsserted)
{
	if (bAsserted)
    4d8e:	88 23       	and	r24, r24
    4d90:	21 f0       	breq	.+8      	; 0x4d9a <SDSetCS+0xc>
	{
		SD_CS_ASSERT();
    4d92:	88 b1       	in	r24, 0x08	; 8
    4d94:	8f 7b       	andi	r24, 0xBF	; 191
    4d96:	88 b9       	out	0x08, r24	; 8
    4d98:	08 95       	ret
	}
	else
	{
		SD_CS_DEASSERT();
    4d9a:	88 b1       	in	r24, 0x08	; 8
    4d9c:	80 64       	ori	r24, 0x40	; 64
    4d9e:	88 b9       	out	0x08, r24	; 8
    4da0:	08 95       	ret

Disassembly of section .text.SDPowerup:

00004568 <SDPowerup>:

// Sends SD powerup sequence to card and attempts to initialize it
static void SDPowerup(void)
{
	// Set SPI baud rate to (SD_SPEED_SLOW, which is the max for the init sequence)
	(void) SPISetBaudRate(SD_SPEED_SLOW);
    4568:	60 e8       	ldi	r22, 0x80	; 128
    456a:	7a e1       	ldi	r23, 0x1A	; 26
    456c:	86 e0       	ldi	r24, 0x06	; 6
    456e:	90 e0       	ldi	r25, 0x00	; 0
    4570:	0e 94 09 18 	call	0x3012	; 0x3012 <SPISetBaudRate>
	
	// Deassert chip select
	SD_CS_DEASSERT();
    4574:	88 b1       	in	r24, 0x08	; 8
    4576:	80 64       	ori	r24, 0x40	; 64
    4578:	88 b9       	out	0x08, r24	; 8
	
	// Delay time after possible deassertion (2ms)
	Delay(2000);
    457a:	60 ed       	ldi	r22, 0xD0	; 208
    457c:	77 e0       	ldi	r23, 0x07	; 7
    457e:	80 e0       	ldi	r24, 0x00	; 0
    4580:	90 e0       	ldi	r25, 0x00	; 0
    4582:	0e 94 4e 21 	call	0x429c	; 0x429c <Delay>
	
	// Send 74/80 bits of 0xff as a reset (80 bits required since we're byte-
	// sized transactions)
	SPIWritePattern(0xff,
    4586:	40 e1       	ldi	r20, 0x10	; 16
    4588:	50 e0       	ldi	r21, 0x00	; 0
    458a:	6f ef       	ldi	r22, 0xFF	; 255
    458c:	70 e0       	ldi	r23, 0x00	; 0
    458e:	82 e0       	ldi	r24, 0x02	; 2
    4590:	0e 94 4c 20 	call	0x4098	; 0x4098 <SPITransaction>
				    128/8);

	// Delay time after write
	Delay(2000);
    4594:	60 ed       	ldi	r22, 0xD0	; 208
    4596:	77 e0       	ldi	r23, 0x07	; 7
    4598:	80 e0       	ldi	r24, 0x00	; 0
    459a:	90 e0       	ldi	r25, 0x00	; 0
    459c:	0e 94 4e 21 	call	0x429c	; 0x429c <Delay>
    45a0:	08 95       	ret

Disassembly of section .text.SDCommand:

0000349e <SDCommand>:
#define CMD8_CRC    0x87

// Sends a command to the SD card, including argument an CRC
static uint8_t SDCommand(uint8_t u8Cmd,
						 uint32_t u32Arg)
{
    349e:	df 92       	push	r13
    34a0:	ef 92       	push	r14
    34a2:	ff 92       	push	r15
    34a4:	0f 93       	push	r16
    34a6:	1f 93       	push	r17
    34a8:	cf 93       	push	r28
    34aa:	df 93       	push	r29
    34ac:	cd b7       	in	r28, 0x3d	; 61
    34ae:	de b7       	in	r29, 0x3e	; 62
    34b0:	27 97       	sbiw	r28, 0x07	; 7
    34b2:	0f b6       	in	r0, 0x3f	; 63
    34b4:	f8 94       	cli
    34b6:	de bf       	out	0x3e, r29	; 62
    34b8:	0f be       	out	0x3f, r0	; 63
    34ba:	cd bf       	out	0x3d, r28	; 61
    34bc:	18 2f       	mov	r17, r24
    34be:	04 2f       	mov	r16, r20
    34c0:	f5 2e       	mov	r15, r21
    34c2:	e6 2e       	mov	r14, r22
    34c4:	d7 2e       	mov	r13, r23
	uint8_t u8Buffer[sizeof(u8Cmd) + sizeof(u32Arg) + sizeof(u8CRC)];
	uint8_t u8Response;
	uint8_t u8Count;
	
	// If this is an ACMD, prefix a CMD55
	if (u8Cmd & 0x80)
    34c6:	88 23       	and	r24, r24
    34c8:	4c f4       	brge	.+18     	; 0x34dc <SDCommand+0x3e>
	{
		u8Response = SDCommand(CMD55,
    34ca:	40 e0       	ldi	r20, 0x00	; 0
    34cc:	50 e0       	ldi	r21, 0x00	; 0
    34ce:	ba 01       	movw	r22, r20
    34d0:	87 e3       	ldi	r24, 0x37	; 55
    34d2:	0e 94 4f 1a 	call	0x349e	; 0x349e <SDCommand>
    34d6:	8f 83       	std	Y+7, r24	; 0x07
							   CMD55_ARG);
							   
		if (u8Response > 1)
    34d8:	82 30       	cpi	r24, 0x02	; 2
    34da:	40 f5       	brcc	.+80     	; 0x352c <SDCommand+0x8e>
			return(u8Response);
		}
	}
	
	// SD Command (OR in 0x40 so bit 47 is always a 1
	u8Buffer[0] = (u8Cmd & 0x7f) | 0x40;
    34dc:	81 2f       	mov	r24, r17
    34de:	8f 73       	andi	r24, 0x3F	; 63
    34e0:	80 64       	ori	r24, 0x40	; 64
    34e2:	89 83       	std	Y+1, r24	; 0x01
	
	// 32 Bits of argument
	u8Buffer[1] = (uint8_t) (u32Arg >> 24);
    34e4:	da 82       	std	Y+2, r13	; 0x02
	u8Buffer[2] = (uint8_t) (u32Arg >> 16);
    34e6:	eb 82       	std	Y+3, r14	; 0x03
	u8Buffer[3] = (uint8_t) (u32Arg >> 8);
    34e8:	fc 82       	std	Y+4, r15	; 0x04
	u8Buffer[4] = (uint8_t) (u32Arg >> 0);
    34ea:	0d 83       	std	Y+5, r16	; 0x05
	
	// Valid CRCs for specific commands
	u8CRC = 0;
	if (CMD0 == u8Cmd)
    34ec:	11 23       	and	r17, r17
    34ee:	11 f0       	breq	.+4      	; 0x34f4 <SDCommand+0x56>
	u8Buffer[2] = (uint8_t) (u32Arg >> 16);
	u8Buffer[3] = (uint8_t) (u32Arg >> 8);
	u8Buffer[4] = (uint8_t) (u32Arg >> 0);
	
	// Valid CRCs for specific commands
	u8CRC = 0;
    34f0:	80 e0       	ldi	r24, 0x00	; 0
    34f2:	01 c0       	rjmp	.+2      	; 0x34f6 <SDCommand+0x58>
	if (CMD0 == u8Cmd)
	{
		u8CRC = 0x95;
    34f4:	85 e9       	ldi	r24, 0x95	; 149
	}
	
	if (CMD8 == u8Cmd)
    34f6:	18 30       	cpi	r17, 0x08	; 8
    34f8:	09 f4       	brne	.+2      	; 0x34fc <SDCommand+0x5e>
	{
		u8CRC = 0x87;
    34fa:	87 e8       	ldi	r24, 0x87	; 135
	}
	
	// Now the CRC - Bit 0 means "ignore CRC"
	u8Buffer[5] = (uint8_t) (u8CRC | 0x01);
    34fc:	81 60       	ori	r24, 0x01	; 1
    34fe:	8e 83       	std	Y+6, r24	; 0x06
	
	// Send all bytes to the SD card
	SPIWrite(u8Buffer,
    3500:	46 e0       	ldi	r20, 0x06	; 6
    3502:	50 e0       	ldi	r21, 0x00	; 0
    3504:	be 01       	movw	r22, r28
    3506:	6f 5f       	subi	r22, 0xFF	; 255
    3508:	7f 4f       	sbci	r23, 0xFF	; 255
    350a:	81 e0       	ldi	r24, 0x01	; 1
    350c:	0e 94 4c 20 	call	0x4098	; 0x4098 <SPITransaction>
			 sizeof(u8Buffer));
			 
	u8Count = 10;
    3510:	1a e0       	ldi	r17, 0x0A	; 10
	
	do 
	{
		SPIRead(&u8Response,
    3512:	41 e0       	ldi	r20, 0x01	; 1
    3514:	50 e0       	ldi	r21, 0x00	; 0
    3516:	be 01       	movw	r22, r28
    3518:	69 5f       	subi	r22, 0xF9	; 249
    351a:	7f 4f       	sbci	r23, 0xFF	; 255
    351c:	83 e0       	ldi	r24, 0x03	; 3
    351e:	0e 94 4c 20 	call	0x4098	; 0x4098 <SPITransaction>
				sizeof(u8Response));
	} while ((u8Response & 0x80) && --u8Count);
    3522:	8f 81       	ldd	r24, Y+7	; 0x07
    3524:	88 23       	and	r24, r24
    3526:	14 f4       	brge	.+4      	; 0x352c <SDCommand+0x8e>
    3528:	11 50       	subi	r17, 0x01	; 1
    352a:	99 f7       	brne	.-26     	; 0x3512 <SDCommand+0x74>
	
	return(u8Response);
}
    352c:	27 96       	adiw	r28, 0x07	; 7
    352e:	0f b6       	in	r0, 0x3f	; 63
    3530:	f8 94       	cli
    3532:	de bf       	out	0x3e, r29	; 62
    3534:	0f be       	out	0x3f, r0	; 63
    3536:	cd bf       	out	0x3d, r28	; 61
    3538:	df 91       	pop	r29
    353a:	cf 91       	pop	r28
    353c:	1f 91       	pop	r17
    353e:	0f 91       	pop	r16
    3540:	ff 90       	pop	r15
    3542:	ef 90       	pop	r14
    3544:	df 90       	pop	r13
    3546:	08 95       	ret

Disassembly of section .text.SDGoIdle:

00004c3a <SDGoIdle>:
			sizeof(uint32_t));
}

// SD - Go idle!
static uint8_t SDGoIdle(uint8_t *pu8Response)
{
    4c3a:	cf 93       	push	r28
	uint8_t u8Response;
	
	SDSetCS(true);
    4c3c:	81 e0       	ldi	r24, 0x01	; 1
    4c3e:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <SDSetCS>
	
	// Send our CMD0 (go idle)
	u8Response = SDCommand(CMD0,
    4c42:	40 e0       	ldi	r20, 0x00	; 0
    4c44:	50 e0       	ldi	r21, 0x00	; 0
    4c46:	ba 01       	movw	r22, r20
    4c48:	80 e0       	ldi	r24, 0x00	; 0
    4c4a:	0e 94 4f 1a 	call	0x349e	; 0x349e <SDCommand>
    4c4e:	c8 2f       	mov	r28, r24
						   CMD0_ARG);
						   
	SDSetCS(false);
    4c50:	80 e0       	ldi	r24, 0x00	; 0
    4c52:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <SDSetCS>

	return(u8Response);
}
    4c56:	8c 2f       	mov	r24, r28
    4c58:	cf 91       	pop	r28
    4c5a:	08 95       	ret

Disassembly of section .text.SDSendOpCondition:

00004644 <SDSendOpCondition>:
#define ACMD41_CRC  0x00

// Send operation condition
static uint8_t SDSendOpCondition(uint8_t *pu8Response,
								 uint32_t u32Arg)
{
    4644:	cf 92       	push	r12
    4646:	df 92       	push	r13
    4648:	ef 92       	push	r14
    464a:	ff 92       	push	r15
    464c:	cf 93       	push	r28
    464e:	6a 01       	movw	r12, r20
    4650:	7b 01       	movw	r14, r22
	uint8_t u8Response;
	
	// Assert chip select
	SDSetCS(true);
    4652:	81 e0       	ldi	r24, 0x01	; 1
    4654:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <SDSetCS>
	
	// Send the app command
	u8Response = SDCommand(ACMD41,
    4658:	b7 01       	movw	r22, r14
    465a:	a6 01       	movw	r20, r12
    465c:	89 ea       	ldi	r24, 0xA9	; 169
    465e:	0e 94 4f 1a 	call	0x349e	; 0x349e <SDCommand>
    4662:	c8 2f       	mov	r28, r24
						   u32Arg);
	// Deassert chip select
	SDSetCS(false);
    4664:	80 e0       	ldi	r24, 0x00	; 0
    4666:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <SDSetCS>
	
	return(u8Response);
}
    466a:	8c 2f       	mov	r24, r28
    466c:	cf 91       	pop	r28
    466e:	ff 90       	pop	r15
    4670:	ef 90       	pop	r14
    4672:	df 90       	pop	r13
    4674:	cf 90       	pop	r12
    4676:	08 95       	ret

Disassembly of section .text.SDSendOpConditionArg:

00004148 <SDSendOpConditionArg>:
	return(u8Response);
}

static uint8_t SDSendOpConditionArg(uint8_t *pu8Resp,
									uint32_t u32Arg)
{
    4148:	cf 92       	push	r12
    414a:	df 92       	push	r13
    414c:	ef 92       	push	r14
    414e:	ff 92       	push	r15
    4150:	0f 93       	push	r16
    4152:	1f 93       	push	r17
    4154:	cf 93       	push	r28
    4156:	df 93       	push	r29
    4158:	8c 01       	movw	r16, r24
    415a:	6a 01       	movw	r12, r20
    415c:	7b 01       	movw	r14, r22
	uint8_t u8Attempts;
	uint8_t u8Response;
	
	u8Attempts = 0;
    415e:	c0 e0       	ldi	r28, 0x00	; 0
		
	// Loop until it comes alive - if it comes alive. Put the card in idle state.
	while (u8Attempts < SD_GO_IDLE_RETRIES)
    4160:	0f c0       	rjmp	.+30     	; 0x4180 <SDSendOpConditionArg+0x38>
	{
		u8Response = SDSendOpCondition(pu8Resp,
    4162:	b7 01       	movw	r22, r14
    4164:	a6 01       	movw	r20, r12
    4166:	c8 01       	movw	r24, r16
    4168:	0e 94 22 23 	call	0x4644	; 0x4644 <SDSendOpCondition>
    416c:	d8 2f       	mov	r29, r24
									   u32Arg);
		if (0 == u8Response)
    416e:	88 23       	and	r24, r24
    4170:	49 f0       	breq	.+18     	; 0x4184 <SDSendOpConditionArg+0x3c>
		{
			break;
		}
			
		// Give it a little time to settle
		Delay(10000);
    4172:	60 e1       	ldi	r22, 0x10	; 16
    4174:	77 e2       	ldi	r23, 0x27	; 39
    4176:	80 e0       	ldi	r24, 0x00	; 0
    4178:	90 e0       	ldi	r25, 0x00	; 0
    417a:	0e 94 4e 21 	call	0x429c	; 0x429c <Delay>
		u8Attempts++;
    417e:	cf 5f       	subi	r28, 0xFF	; 255
	uint8_t u8Response;
	
	u8Attempts = 0;
		
	// Loop until it comes alive - if it comes alive. Put the card in idle state.
	while (u8Attempts < SD_GO_IDLE_RETRIES)
    4180:	c4 36       	cpi	r28, 0x64	; 100
    4182:	78 f3       	brcs	.-34     	; 0x4162 <SDSendOpConditionArg+0x1a>
		Delay(10000);
		u8Attempts++;
	}

	// If we've retried too much, bail out. We're done.
	if (SD_GO_IDLE_RETRIES == u8Attempts)
    4184:	c4 36       	cpi	r28, 0x64	; 100
    4186:	09 f4       	brne	.+2      	; 0x418a <SDSendOpConditionArg+0x42>
	{
		u8Response = 0x80;
    4188:	d0 e8       	ldi	r29, 0x80	; 128
	}
	
	return(u8Response);
}
    418a:	8d 2f       	mov	r24, r29
    418c:	df 91       	pop	r29
    418e:	cf 91       	pop	r28
    4190:	1f 91       	pop	r17
    4192:	0f 91       	pop	r16
    4194:	ff 90       	pop	r15
    4196:	ef 90       	pop	r14
    4198:	df 90       	pop	r13
    419a:	cf 90       	pop	r12
    419c:	08 95       	ret

Disassembly of section .text.SDWaitResponse7:

00004e58 <SDWaitResponse7>:

// This will return true if a response 7 was received, otherwise false
static void SDWaitResponse7(uint8_t *pu8ResponseByte)
{
	// Go read the remaining 4 bytes
	SPIRead(pu8ResponseByte,
    4e58:	44 e0       	ldi	r20, 0x04	; 4
    4e5a:	50 e0       	ldi	r21, 0x00	; 0
    4e5c:	bc 01       	movw	r22, r24
    4e5e:	83 e0       	ldi	r24, 0x03	; 3
    4e60:	0e 94 4c 20 	call	0x4098	; 0x4098 <SPITransaction>
    4e64:	08 95       	ret

Disassembly of section .text.SDSendInterfaceCondition:

00004678 <SDSendInterfaceCondition>:
	return(u8Response);
}

// Send interface condition
static uint8_t SDSendInterfaceCondition(uint8_t *pu8Response)
{
    4678:	0f 93       	push	r16
    467a:	1f 93       	push	r17
    467c:	cf 93       	push	r28
    467e:	8c 01       	movw	r16, r24
	uint8_t u8Response;
	
	SDSetCS(true);
    4680:	81 e0       	ldi	r24, 0x01	; 1
    4682:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <SDSetCS>
	
	// Send our CMD8 Send interface condition
	u8Response = SDCommand(CMD8,
    4686:	4a ea       	ldi	r20, 0xAA	; 170
    4688:	51 e0       	ldi	r21, 0x01	; 1
    468a:	60 e0       	ldi	r22, 0x00	; 0
    468c:	70 e0       	ldi	r23, 0x00	; 0
    468e:	88 e0       	ldi	r24, 0x08	; 8
    4690:	0e 94 4f 1a 	call	0x349e	; 0x349e <SDCommand>
    4694:	c8 2f       	mov	r28, r24
						   CMD8_ARG);
						   
	SDWaitResponse7(pu8Response);
    4696:	c8 01       	movw	r24, r16
    4698:	0e 94 2c 27 	call	0x4e58	; 0x4e58 <SDWaitResponse7>
		
	SDSetCS(false);
    469c:	80 e0       	ldi	r24, 0x00	; 0
    469e:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <SDSetCS>

	return(u8Response);
}
    46a2:	8c 2f       	mov	r24, r28
    46a4:	cf 91       	pop	r28
    46a6:	1f 91       	pop	r17
    46a8:	0f 91       	pop	r16
    46aa:	08 95       	ret

Disassembly of section .text.SDReadOCR:

000046ac <SDReadOCR>:
#define CMD58_ARG   0x00000000
#define CMD58_CRC   0x00

// Go read the OCR
static uint8_t SDReadOCR(uint8_t *pu8Response)
{
    46ac:	0f 93       	push	r16
    46ae:	1f 93       	push	r17
    46b0:	cf 93       	push	r28
    46b2:	8c 01       	movw	r16, r24
	uint8_t u8Response;
	
	// Assert chip select
	SDSetCS(true);
    46b4:	81 e0       	ldi	r24, 0x01	; 1
    46b6:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <SDSetCS>
	
	// Send the app command
	u8Response = SDCommand(CMD58,
    46ba:	40 e0       	ldi	r20, 0x00	; 0
    46bc:	50 e0       	ldi	r21, 0x00	; 0
    46be:	ba 01       	movw	r22, r20
    46c0:	8a e3       	ldi	r24, 0x3A	; 58
    46c2:	0e 94 4f 1a 	call	0x349e	; 0x349e <SDCommand>
    46c6:	c8 2f       	mov	r28, r24
						   CMD58_ARG);

	// Read response
	SDWaitResponse7(pu8Response);
    46c8:	c8 01       	movw	r24, r16
    46ca:	0e 94 2c 27 	call	0x4e58	; 0x4e58 <SDWaitResponse7>

	// Deassert chip select
	SDSetCS(false);
    46ce:	80 e0       	ldi	r24, 0x00	; 0
    46d0:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <SDSetCS>
	
	return(u8Response);
}
    46d4:	8c 2f       	mov	r24, r28
    46d6:	cf 91       	pop	r28
    46d8:	1f 91       	pop	r17
    46da:	0f 91       	pop	r16
    46dc:	08 95       	ret

Disassembly of section .text.SDReadCSD:

00003c5c <SDReadCSD>:
#define CMD9_ARG    0x000000000
#define CMD9_CRC    0x00

// Read CSD (card specific data) - CSD is 128 bits - see the SD spec for details.
static uint8_t SDReadCSD(uint8_t *pu8CSD)
{
    3c5c:	ef 92       	push	r14
    3c5e:	ff 92       	push	r15
    3c60:	0f 93       	push	r16
    3c62:	1f 93       	push	r17
    3c64:	cf 93       	push	r28
    3c66:	df 93       	push	r29
    3c68:	0f 92       	push	r0
    3c6a:	cd b7       	in	r28, 0x3d	; 61
    3c6c:	de b7       	in	r29, 0x3e	; 62
    3c6e:	7c 01       	movw	r14, r24
	uint8_t u8Response;
	uint8_t u8CmdResponse;
	uint8_t u8Count = 8;
	
	SDSetCS(true);
    3c70:	81 e0       	ldi	r24, 0x01	; 1
    3c72:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <SDSetCS>
	
	// Send our CMD9 (read CSD)
	u8CmdResponse = SDCommand(CMD9,
    3c76:	40 e0       	ldi	r20, 0x00	; 0
    3c78:	50 e0       	ldi	r21, 0x00	; 0
    3c7a:	ba 01       	movw	r22, r20
    3c7c:	89 e0       	ldi	r24, 0x09	; 9
    3c7e:	0e 94 4f 1a 	call	0x349e	; 0x349e <SDCommand>
    3c82:	08 2f       	mov	r16, r24
							  CMD9_ARG);
	
	// Success! Let's get a response
	if (u8CmdResponse)
    3c84:	81 11       	cpse	r24, r1
    3c86:	1c c0       	rjmp	.+56     	; 0x3cc0 <SDReadCSD+0x64>
    3c88:	18 e0       	ldi	r17, 0x08	; 8
    3c8a:	01 c0       	rjmp	.+2      	; 0x3c8e <SDReadCSD+0x32>
	do 
	{
		SPIRead(&u8Response,
			    sizeof(u8Response));
	} while ((u8Response != SD_START_TOKEN) &&
			 (u8Count--));
    3c8c:	18 2f       	mov	r17, r24
	}
	
	// Wait until SD_START_TOKEN (start of data sector). We should easily see it in a few bytes.
	do 
	{
		SPIRead(&u8Response,
    3c8e:	41 e0       	ldi	r20, 0x01	; 1
    3c90:	50 e0       	ldi	r21, 0x00	; 0
    3c92:	be 01       	movw	r22, r28
    3c94:	6f 5f       	subi	r22, 0xFF	; 255
    3c96:	7f 4f       	sbci	r23, 0xFF	; 255
    3c98:	83 e0       	ldi	r24, 0x03	; 3
    3c9a:	0e 94 4c 20 	call	0x4098	; 0x4098 <SPITransaction>
			    sizeof(u8Response));
	} while ((u8Response != SD_START_TOKEN) &&
    3c9e:	89 81       	ldd	r24, Y+1	; 0x01
			 (u8Count--));
    3ca0:	8e 3f       	cpi	r24, 0xFE	; 254
    3ca2:	29 f0       	breq	.+10     	; 0x3cae <SDReadCSD+0x52>
    3ca4:	8f ef       	ldi	r24, 0xFF	; 255
    3ca6:	81 0f       	add	r24, r17
	// Wait until SD_START_TOKEN (start of data sector). We should easily see it in a few bytes.
	do 
	{
		SPIRead(&u8Response,
			    sizeof(u8Response));
	} while ((u8Response != SD_START_TOKEN) &&
    3ca8:	11 11       	cpse	r17, r1
    3caa:	f0 cf       	rjmp	.-32     	; 0x3c8c <SDReadCSD+0x30>
    3cac:	01 c0       	rjmp	.+2      	; 0x3cb0 <SDReadCSD+0x54>
    3cae:	81 2f       	mov	r24, r17
			 (u8Count--));
			 
	// If we haven't seen it in u8Count bytes, then error the call
	if (0 == u8Count)
    3cb0:	88 23       	and	r24, r24
    3cb2:	31 f0       	breq	.+12     	; 0x3cc0 <SDReadCSD+0x64>
	{
		goto errorExit;
	}
	
	// Go read the remaining 16 bytes
	SPIRead(pu8CSD,
    3cb4:	40 e1       	ldi	r20, 0x10	; 16
    3cb6:	50 e0       	ldi	r21, 0x00	; 0
    3cb8:	b7 01       	movw	r22, r14
    3cba:	83 e0       	ldi	r24, 0x03	; 3
    3cbc:	0e 94 4c 20 	call	0x4098	; 0x4098 <SPITransaction>
		    16);
	
errorExit:	
	SDSetCS(false);
    3cc0:	80 e0       	ldi	r24, 0x00	; 0
    3cc2:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <SDSetCS>
	return(u8CmdResponse);
	
}
    3cc6:	80 2f       	mov	r24, r16
    3cc8:	0f 90       	pop	r0
    3cca:	df 91       	pop	r29
    3ccc:	cf 91       	pop	r28
    3cce:	1f 91       	pop	r17
    3cd0:	0f 91       	pop	r16
    3cd2:	ff 90       	pop	r15
    3cd4:	ef 90       	pop	r14
    3cd6:	08 95       	ret

Disassembly of section .text.SDReceiveDataBlock:

00003844 <SDReceiveDataBlock>:
}

// Receives a datablock during the data phase which may take some time
static bool SDReceiveDataBlock(uint8_t *pu8Buffer,
							   uint16_t u16RXCount)
{
    3844:	cf 92       	push	r12
    3846:	df 92       	push	r13
    3848:	ef 92       	push	r14
    384a:	ff 92       	push	r15
    384c:	0f 93       	push	r16
    384e:	1f 93       	push	r17
    3850:	cf 93       	push	r28
    3852:	df 93       	push	r29
    3854:	0f 92       	push	r0
    3856:	cd b7       	in	r28, 0x3d	; 61
    3858:	de b7       	in	r29, 0x3e	; 62
    385a:	7c 01       	movw	r14, r24
    385c:	6b 01       	movw	r12, r22
	uint8_t u8Response;
	uint16_t u16Count = 4096;
    385e:	00 e0       	ldi	r16, 0x00	; 0
    3860:	10 e1       	ldi	r17, 0x10	; 16
    3862:	01 c0       	rjmp	.+2      	; 0x3866 <SDReceiveDataBlock+0x22>
	{
		SPIRead(&u8Response,
				sizeof(u8Response));
	} 
	while ((u8Response != SD_START_TOKEN) &&
		   (u16Count--));
    3864:	89 01       	movw	r16, r18
	uint16_t u16Count = 4096;
	
	// Wait for response token
	do 
	{
		SPIRead(&u8Response,
    3866:	41 e0       	ldi	r20, 0x01	; 1
    3868:	50 e0       	ldi	r21, 0x00	; 0
    386a:	be 01       	movw	r22, r28
    386c:	6f 5f       	subi	r22, 0xFF	; 255
    386e:	7f 4f       	sbci	r23, 0xFF	; 255
    3870:	83 e0       	ldi	r24, 0x03	; 3
    3872:	0e 94 4c 20 	call	0x4098	; 0x4098 <SPITransaction>
				sizeof(u8Response));
	} 
	while ((u8Response != SD_START_TOKEN) &&
    3876:	89 81       	ldd	r24, Y+1	; 0x01
		   (u16Count--));
    3878:	8e 3f       	cpi	r24, 0xFE	; 254
    387a:	29 f0       	breq	.+10     	; 0x3886 <SDReceiveDataBlock+0x42>
    387c:	98 01       	movw	r18, r16
    387e:	21 50       	subi	r18, 0x01	; 1
    3880:	31 09       	sbc	r19, r1
	do 
	{
		SPIRead(&u8Response,
				sizeof(u8Response));
	} 
	while ((u8Response != SD_START_TOKEN) &&
    3882:	01 2b       	or	r16, r17
    3884:	79 f7       	brne	.-34     	; 0x3864 <SDReceiveDataBlock+0x20>
		   (u16Count--));
		   
	if (u8Response != SD_START_TOKEN)
    3886:	8e 3f       	cpi	r24, 0xFE	; 254
    3888:	b9 f4       	brne	.+46     	; 0x38b8 <SDReceiveDataBlock+0x74>
	{
		return(false);
	}
	
	// Start of data. Pull it down.
	SPIRead(pu8Buffer,
    388a:	a6 01       	movw	r20, r12
    388c:	b7 01       	movw	r22, r14
    388e:	83 e0       	ldi	r24, 0x03	; 3
    3890:	0e 94 4c 20 	call	0x4098	; 0x4098 <SPITransaction>
			u16RXCount);
			
	// Discard CRC
	SPIRead(&u8Response,
    3894:	41 e0       	ldi	r20, 0x01	; 1
    3896:	50 e0       	ldi	r21, 0x00	; 0
    3898:	be 01       	movw	r22, r28
    389a:	6f 5f       	subi	r22, 0xFF	; 255
    389c:	7f 4f       	sbci	r23, 0xFF	; 255
    389e:	83 e0       	ldi	r24, 0x03	; 3
    38a0:	0e 94 4c 20 	call	0x4098	; 0x4098 <SPITransaction>
			sizeof(u8Response));
	SPIRead(&u8Response,
    38a4:	41 e0       	ldi	r20, 0x01	; 1
    38a6:	50 e0       	ldi	r21, 0x00	; 0
    38a8:	be 01       	movw	r22, r28
    38aa:	6f 5f       	subi	r22, 0xFF	; 255
    38ac:	7f 4f       	sbci	r23, 0xFF	; 255
    38ae:	83 e0       	ldi	r24, 0x03	; 3
    38b0:	0e 94 4c 20 	call	0x4098	; 0x4098 <SPITransaction>
			sizeof(u8Response));
	return(true);			   
    38b4:	81 e0       	ldi	r24, 0x01	; 1
    38b6:	01 c0       	rjmp	.+2      	; 0x38ba <SDReceiveDataBlock+0x76>
	while ((u8Response != SD_START_TOKEN) &&
		   (u16Count--));
		   
	if (u8Response != SD_START_TOKEN)
	{
		return(false);
    38b8:	80 e0       	ldi	r24, 0x00	; 0
	SPIRead(&u8Response,
			sizeof(u8Response));
	SPIRead(&u8Response,
			sizeof(u8Response));
	return(true);			   
}
    38ba:	0f 90       	pop	r0
    38bc:	df 91       	pop	r29
    38be:	cf 91       	pop	r28
    38c0:	1f 91       	pop	r17
    38c2:	0f 91       	pop	r16
    38c4:	ff 90       	pop	r15
    38c6:	ef 90       	pop	r14
    38c8:	df 90       	pop	r13
    38ca:	cf 90       	pop	r12
    38cc:	08 95       	ret

Disassembly of section .text.SDTransmitDataBlock:

00003266 <SDTransmitDataBlock>:

// Transmits a datablock during the data phase which may take some time
static bool SDTransmitDataBlock(uint8_t *pu8Buffer,
							    uint16_t u16TXCount,
								uint8_t u8DataPhaseToken)
{
    3266:	ef 92       	push	r14
    3268:	ff 92       	push	r15
    326a:	0f 93       	push	r16
    326c:	1f 93       	push	r17
    326e:	cf 93       	push	r28
    3270:	df 93       	push	r29
    3272:	00 d0       	rcall	.+0      	; 0x3274 <SDTransmitDataBlock+0xe>
    3274:	cd b7       	in	r28, 0x3d	; 61
    3276:	de b7       	in	r29, 0x3e	; 62
    3278:	8c 01       	movw	r16, r24
    327a:	7b 01       	movw	r14, r22
    327c:	4a 83       	std	Y+2, r20	; 0x02
	uint8_t u8Response;
	uint16_t u16Attempts;
	bool bResult = true;

	// Send the data phase token (whatever it is)
	SPIWrite(&u8DataPhaseToken,
    327e:	41 e0       	ldi	r20, 0x01	; 1
    3280:	50 e0       	ldi	r21, 0x00	; 0
    3282:	be 01       	movw	r22, r28
    3284:	6e 5f       	subi	r22, 0xFE	; 254
    3286:	7f 4f       	sbci	r23, 0xFF	; 255
    3288:	81 e0       	ldi	r24, 0x01	; 1
    328a:	0e 94 4c 20 	call	0x4098	; 0x4098 <SPITransaction>
			 sizeof(u8DataPhaseToken));
	
	if (u8DataPhaseToken != SD_STOP_TRANSACTION)
    328e:	8a 81       	ldd	r24, Y+2	; 0x02
    3290:	8d 3f       	cpi	r24, 0xFD	; 253
    3292:	e1 f1       	breq	.+120    	; 0x330c <SDTransmitDataBlock+0xa6>
	{
		// As long as we're not stopping a transaction, we're writing data
		SPIWrite(pu8Buffer,
    3294:	a7 01       	movw	r20, r14
    3296:	b8 01       	movw	r22, r16
    3298:	81 e0       	ldi	r24, 0x01	; 1
    329a:	0e 94 4c 20 	call	0x4098	; 0x4098 <SPITransaction>
				 u16TXCount);
				 
		// Wait for acceptance of the sector
		u16Attempts = 0;
    329e:	00 e0       	ldi	r16, 0x00	; 0
    32a0:	10 e0       	ldi	r17, 0x00	; 0
		while (u16Attempts < SD_MAX_WRITE_ATTEMPTS)
    32a2:	0d c0       	rjmp	.+26     	; 0x32be <SDTransmitDataBlock+0x58>
		{
			// Get some data
			SPIRead(&u8Response,
    32a4:	41 e0       	ldi	r20, 0x01	; 1
    32a6:	50 e0       	ldi	r21, 0x00	; 0
    32a8:	be 01       	movw	r22, r28
    32aa:	6f 5f       	subi	r22, 0xFF	; 255
    32ac:	7f 4f       	sbci	r23, 0xFF	; 255
    32ae:	83 e0       	ldi	r24, 0x03	; 3
    32b0:	0e 94 4c 20 	call	0x4098	; 0x4098 <SPITransaction>
					sizeof(u8Response));
			if (u8Response != 0xff)
    32b4:	89 81       	ldd	r24, Y+1	; 0x01
    32b6:	8f 3f       	cpi	r24, 0xFF	; 255
    32b8:	31 f4       	brne	.+12     	; 0x32c6 <SDTransmitDataBlock+0x60>
			{
				break;
			}
				
			++u16Attempts;
    32ba:	0f 5f       	subi	r16, 0xFF	; 255
    32bc:	1f 4f       	sbci	r17, 0xFF	; 255
		SPIWrite(pu8Buffer,
				 u16TXCount);
				 
		// Wait for acceptance of the sector
		u16Attempts = 0;
		while (u16Attempts < SD_MAX_WRITE_ATTEMPTS)
    32be:	0e 39       	cpi	r16, 0x9E	; 158
    32c0:	88 e9       	ldi	r24, 0x98	; 152
    32c2:	18 07       	cpc	r17, r24
    32c4:	78 f3       	brcs	.-34     	; 0x32a4 <SDTransmitDataBlock+0x3e>
				
			++u16Attempts;
		}
			
		// We've timed out or else the card is dead
		if (SD_MAX_WRITE_ATTEMPTS == u16Attempts)
    32c6:	0e 39       	cpi	r16, 0x9E	; 158
    32c8:	18 49       	sbci	r17, 0x98	; 152
    32ca:	11 f1       	breq	.+68     	; 0x3310 <SDTransmitDataBlock+0xaa>
			bResult = false;
			goto errorExit;
		}
			
		// See if the data was accepted
		u8Response &= 0x1f;
    32cc:	89 81       	ldd	r24, Y+1	; 0x01
    32ce:	8f 71       	andi	r24, 0x1F	; 31
    32d0:	89 83       	std	Y+1, r24	; 0x01
		if (0x05 == u8Response)
    32d2:	85 30       	cpi	r24, 0x05	; 5
    32d4:	81 f0       	breq	.+32     	; 0x32f6 <SDTransmitDataBlock+0x90>
			// Success!
		}
		else
		{
			// Sector not accepted
			bResult = false;
    32d6:	80 e0       	ldi	r24, 0x00	; 0
    32d8:	1e c0       	rjmp	.+60     	; 0x3316 <SDTransmitDataBlock+0xb0>
			// Wait for the write to finish
			u16Attempts = 0;
			while (u16Attempts < SD_MAX_WRITE_ATTEMPTS)
			{
				// Wait for the card to accept writing the sector
				SPIRead(&u8Response,
    32da:	41 e0       	ldi	r20, 0x01	; 1
    32dc:	50 e0       	ldi	r21, 0x00	; 0
    32de:	be 01       	movw	r22, r28
    32e0:	6f 5f       	subi	r22, 0xFF	; 255
    32e2:	7f 4f       	sbci	r23, 0xFF	; 255
    32e4:	83 e0       	ldi	r24, 0x03	; 3
    32e6:	0e 94 4c 20 	call	0x4098	; 0x4098 <SPITransaction>
						sizeof(u8Response));
				if (u8Response)
    32ea:	89 81       	ldd	r24, Y+1	; 0x01
    32ec:	81 11       	cpse	r24, r1
    32ee:	09 c0       	rjmp	.+18     	; 0x3302 <SDTransmitDataBlock+0x9c>
				{
					break;
				}
					
				++u16Attempts;
    32f0:	0f 5f       	subi	r16, 0xFF	; 255
    32f2:	1f 4f       	sbci	r17, 0xFF	; 255
    32f4:	02 c0       	rjmp	.+4      	; 0x32fa <SDTransmitDataBlock+0x94>
    32f6:	00 e0       	ldi	r16, 0x00	; 0
    32f8:	10 e0       	ldi	r17, 0x00	; 0
		u8Response &= 0x1f;
		if (0x05 == u8Response)
		{
			// Wait for the write to finish
			u16Attempts = 0;
			while (u16Attempts < SD_MAX_WRITE_ATTEMPTS)
    32fa:	0e 39       	cpi	r16, 0x9E	; 158
    32fc:	88 e9       	ldi	r24, 0x98	; 152
    32fe:	18 07       	cpc	r17, r24
    3300:	60 f3       	brcs	.-40     	; 0x32da <SDTransmitDataBlock+0x74>
				}
					
				++u16Attempts;
			}
				
			if (SD_MAX_WRITE_ATTEMPTS == u16Attempts)
    3302:	0e 39       	cpi	r16, 0x9E	; 158
    3304:	18 49       	sbci	r17, 0x98	; 152
    3306:	31 f0       	breq	.+12     	; 0x3314 <SDTransmitDataBlock+0xae>
							    uint16_t u16TXCount,
								uint8_t u8DataPhaseToken)
{
	uint8_t u8Response;
	uint16_t u16Attempts;
	bool bResult = true;
    3308:	81 e0       	ldi	r24, 0x01	; 1
    330a:	05 c0       	rjmp	.+10     	; 0x3316 <SDTransmitDataBlock+0xb0>
    330c:	81 e0       	ldi	r24, 0x01	; 1
    330e:	03 c0       	rjmp	.+6      	; 0x3316 <SDTransmitDataBlock+0xb0>
		}
			
		// We've timed out or else the card is dead
		if (SD_MAX_WRITE_ATTEMPTS == u16Attempts)
		{
			bResult = false;
    3310:	80 e0       	ldi	r24, 0x00	; 0
    3312:	01 c0       	rjmp	.+2      	; 0x3316 <SDTransmitDataBlock+0xb0>
				++u16Attempts;
			}
				
			if (SD_MAX_WRITE_ATTEMPTS == u16Attempts)
			{
				bResult = false;
    3314:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	
errorExit:
	return(bResult);
}
    3316:	0f 90       	pop	r0
    3318:	0f 90       	pop	r0
    331a:	df 91       	pop	r29
    331c:	cf 91       	pop	r28
    331e:	1f 91       	pop	r17
    3320:	0f 91       	pop	r16
    3322:	ff 90       	pop	r15
    3324:	ef 90       	pop	r14
    3326:	08 95       	ret

Disassembly of section .text.SDInit:

000022fe <SDInit>:

bool SDGetBlockSize(uint32_t *pu32BlockSize)
{
	*pu32BlockSize = sg_u16BlockSize;
	return(true);
}
    22fe:	1f 93       	push	r17
    2300:	cf 93       	push	r28
    2302:	df 93       	push	r29
    2304:	00 d0       	rcall	.+0      	; 0x2306 <SDInit+0x8>
    2306:	00 d0       	rcall	.+0      	; 0x2308 <SDInit+0xa>
    2308:	0f 92       	push	r0
    230a:	cd b7       	in	r28, 0x3d	; 61
    230c:	de b7       	in	r29, 0x3e	; 62
    230e:	87 b1       	in	r24, 0x07	; 7
    2310:	80 64       	ori	r24, 0x40	; 64
    2312:	87 b9       	out	0x07, r24	; 7
    2314:	88 b1       	in	r24, 0x08	; 8
    2316:	80 64       	ori	r24, 0x40	; 64
    2318:	88 b9       	out	0x08, r24	; 8
    231a:	88 b1       	in	r24, 0x08	; 8
    231c:	80 64       	ori	r24, 0x40	; 64
    231e:	88 b9       	out	0x08, r24	; 8
    2320:	0e 94 12 24 	call	0x4824	; 0x4824 <SPIInit>
    2324:	0e 94 b4 22 	call	0x4568	; 0x4568 <SDPowerup>
    2328:	10 e0       	ldi	r17, 0x00	; 0
    232a:	0d c0       	rjmp	.+26     	; 0x2346 <SDInit+0x48>
    232c:	ce 01       	movw	r24, r28
    232e:	01 96       	adiw	r24, 0x01	; 1
    2330:	0e 94 1d 26 	call	0x4c3a	; 0x4c3a <SDGoIdle>
    2334:	81 30       	cpi	r24, 0x01	; 1
    2336:	49 f0       	breq	.+18     	; 0x234a <SDInit+0x4c>
    2338:	60 e1       	ldi	r22, 0x10	; 16
    233a:	77 e2       	ldi	r23, 0x27	; 39
    233c:	80 e0       	ldi	r24, 0x00	; 0
    233e:	90 e0       	ldi	r25, 0x00	; 0
    2340:	0e 94 4e 21 	call	0x429c	; 0x429c <Delay>
    2344:	1f 5f       	subi	r17, 0xFF	; 255
    2346:	14 36       	cpi	r17, 0x64	; 100
    2348:	88 f3       	brcs	.-30     	; 0x232c <SDInit+0x2e>
    234a:	14 36       	cpi	r17, 0x64	; 100
    234c:	09 f4       	brne	.+2      	; 0x2350 <SDInit+0x52>
    234e:	76 c0       	rjmp	.+236    	; 0x243c <SDInit+0x13e>
    2350:	ce 01       	movw	r24, r28
    2352:	01 96       	adiw	r24, 0x01	; 1
    2354:	25 e0       	ldi	r18, 0x05	; 5
    2356:	fc 01       	movw	r30, r24
    2358:	11 92       	st	Z+, r1
    235a:	2a 95       	dec	r18
    235c:	e9 f7       	brne	.-6      	; 0x2358 <SDInit+0x5a>
    235e:	0e 94 3c 23 	call	0x4678	; 0x4678 <SDSendInterfaceCondition>
    2362:	81 30       	cpi	r24, 0x01	; 1
    2364:	09 f0       	breq	.+2      	; 0x2368 <SDInit+0x6a>
    2366:	5e c0       	rjmp	.+188    	; 0x2424 <SDInit+0x126>
    2368:	8c 81       	ldd	r24, Y+4	; 0x04
    236a:	8a 3a       	cpi	r24, 0xAA	; 170
    236c:	09 f0       	breq	.+2      	; 0x2370 <SDInit+0x72>
    236e:	68 c0       	rjmp	.+208    	; 0x2440 <SDInit+0x142>
    2370:	40 e0       	ldi	r20, 0x00	; 0
    2372:	50 e0       	ldi	r21, 0x00	; 0
    2374:	60 e0       	ldi	r22, 0x00	; 0
    2376:	70 e4       	ldi	r23, 0x40	; 64
    2378:	ce 01       	movw	r24, r28
    237a:	01 96       	adiw	r24, 0x01	; 1
    237c:	0e 94 a4 20 	call	0x4148	; 0x4148 <SDSendOpConditionArg>
    2380:	81 11       	cpse	r24, r1
    2382:	60 c0       	rjmp	.+192    	; 0x2444 <SDInit+0x146>
    2384:	ce 01       	movw	r24, r28
    2386:	01 96       	adiw	r24, 0x01	; 1
    2388:	0e 94 56 23 	call	0x46ac	; 0x46ac <SDReadOCR>
    238c:	88 23       	and	r24, r24
    238e:	0c f4       	brge	.+2      	; 0x2392 <SDInit+0x94>
    2390:	5b c0       	rjmp	.+182    	; 0x2448 <SDInit+0x14a>
    2392:	8d e2       	ldi	r24, 0x2D	; 45
    2394:	99 e0       	ldi	r25, 0x09	; 9
    2396:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <SDReadCSD>
    239a:	88 23       	and	r24, r24
    239c:	0c f4       	brge	.+2      	; 0x23a0 <SDInit+0xa2>
    239e:	56 c0       	rjmp	.+172    	; 0x244c <SDInit+0x14e>
    23a0:	ed e2       	ldi	r30, 0x2D	; 45
    23a2:	f9 e0       	ldi	r31, 0x09	; 9
    23a4:	87 81       	ldd	r24, Z+7	; 0x07
    23a6:	8f 73       	andi	r24, 0x3F	; 63
    23a8:	90 e0       	ldi	r25, 0x00	; 0
    23aa:	a0 e0       	ldi	r26, 0x00	; 0
    23ac:	b0 e0       	ldi	r27, 0x00	; 0
    23ae:	bc 01       	movw	r22, r24
    23b0:	55 27       	eor	r21, r21
    23b2:	44 27       	eor	r20, r20
    23b4:	90 85       	ldd	r25, Z+8	; 0x08
    23b6:	89 2f       	mov	r24, r25
    23b8:	90 e0       	ldi	r25, 0x00	; 0
    23ba:	a0 e0       	ldi	r26, 0x00	; 0
    23bc:	b0 e0       	ldi	r27, 0x00	; 0
    23be:	ba 2f       	mov	r27, r26
    23c0:	a9 2f       	mov	r26, r25
    23c2:	98 2f       	mov	r25, r24
    23c4:	88 27       	eor	r24, r24
    23c6:	84 2b       	or	r24, r20
    23c8:	95 2b       	or	r25, r21
    23ca:	a6 2b       	or	r26, r22
    23cc:	b7 2b       	or	r27, r23
    23ce:	21 85       	ldd	r18, Z+9	; 0x09
    23d0:	82 2b       	or	r24, r18
    23d2:	01 96       	adiw	r24, 0x01	; 1
    23d4:	a1 1d       	adc	r26, r1
    23d6:	b1 1d       	adc	r27, r1
    23d8:	07 2e       	mov	r0, r23
    23da:	7a e0       	ldi	r23, 0x0A	; 10
    23dc:	88 0f       	add	r24, r24
    23de:	99 1f       	adc	r25, r25
    23e0:	aa 1f       	adc	r26, r26
    23e2:	bb 1f       	adc	r27, r27
    23e4:	7a 95       	dec	r23
    23e6:	d1 f7       	brne	.-12     	; 0x23dc <SDInit+0xde>
    23e8:	70 2d       	mov	r23, r0
    23ea:	80 93 4d 09 	sts	0x094D, r24	; 0x80094d <sg_u32SDSectorCount>
    23ee:	90 93 4e 09 	sts	0x094E, r25	; 0x80094e <sg_u32SDSectorCount+0x1>
    23f2:	a0 93 4f 09 	sts	0x094F, r26	; 0x80094f <sg_u32SDSectorCount+0x2>
    23f6:	b0 93 50 09 	sts	0x0950, r27	; 0x800950 <sg_u32SDSectorCount+0x3>
    23fa:	25 81       	ldd	r18, Z+5	; 0x05
    23fc:	2f 70       	andi	r18, 0x0F	; 15
    23fe:	81 e0       	ldi	r24, 0x01	; 1
    2400:	90 e0       	ldi	r25, 0x00	; 0
    2402:	02 c0       	rjmp	.+4      	; 0x2408 <SDInit+0x10a>
    2404:	88 0f       	add	r24, r24
    2406:	99 1f       	adc	r25, r25
    2408:	2a 95       	dec	r18
    240a:	e2 f7       	brpl	.-8      	; 0x2404 <SDInit+0x106>
    240c:	90 93 58 09 	sts	0x0958, r25	; 0x800958 <sg_u16BlockSize+0x1>
    2410:	80 93 57 09 	sts	0x0957, r24	; 0x800957 <sg_u16BlockSize>
    2414:	60 ec       	ldi	r22, 0xC0	; 192
    2416:	78 ed       	ldi	r23, 0xD8	; 216
    2418:	87 ea       	ldi	r24, 0xA7	; 167
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	0e 94 09 18 	call	0x3012	; 0x3012 <SPISetBaudRate>
    2420:	81 e0       	ldi	r24, 0x01	; 1
    2422:	17 c0       	rjmp	.+46     	; 0x2452 <SDInit+0x154>
    2424:	40 e0       	ldi	r20, 0x00	; 0
    2426:	50 e0       	ldi	r21, 0x00	; 0
    2428:	60 e0       	ldi	r22, 0x00	; 0
    242a:	70 e4       	ldi	r23, 0x40	; 64
    242c:	ce 01       	movw	r24, r28
    242e:	01 96       	adiw	r24, 0x01	; 1
    2430:	0e 94 a4 20 	call	0x4148	; 0x4148 <SDSendOpConditionArg>
    2434:	81 11       	cpse	r24, r1
    2436:	0c c0       	rjmp	.+24     	; 0x2450 <SDInit+0x152>
    2438:	81 e0       	ldi	r24, 0x01	; 1
    243a:	0b c0       	rjmp	.+22     	; 0x2452 <SDInit+0x154>
    243c:	80 e0       	ldi	r24, 0x00	; 0
    243e:	09 c0       	rjmp	.+18     	; 0x2452 <SDInit+0x154>
    2440:	80 e0       	ldi	r24, 0x00	; 0
    2442:	07 c0       	rjmp	.+14     	; 0x2452 <SDInit+0x154>
    2444:	80 e0       	ldi	r24, 0x00	; 0
    2446:	05 c0       	rjmp	.+10     	; 0x2452 <SDInit+0x154>
    2448:	80 e0       	ldi	r24, 0x00	; 0
    244a:	03 c0       	rjmp	.+6      	; 0x2452 <SDInit+0x154>
    244c:	80 e0       	ldi	r24, 0x00	; 0
    244e:	01 c0       	rjmp	.+2      	; 0x2452 <SDInit+0x154>
    2450:	80 e0       	ldi	r24, 0x00	; 0
    2452:	0f 90       	pop	r0
    2454:	0f 90       	pop	r0
    2456:	0f 90       	pop	r0
    2458:	0f 90       	pop	r0
    245a:	0f 90       	pop	r0
    245c:	df 91       	pop	r29
    245e:	cf 91       	pop	r28
    2460:	1f 91       	pop	r17
    2462:	08 95       	ret

Disassembly of section .text.SDRead:

00002f3a <SDRead>:

// Read one or more sectors from SD
bool SDRead(uint32_t u32Sector,
			uint8_t *pu8Buffer,
			uint32_t u32SectorCount)
{
    2f3a:	8f 92       	push	r8
    2f3c:	9f 92       	push	r9
    2f3e:	af 92       	push	r10
    2f40:	bf 92       	push	r11
    2f42:	cf 92       	push	r12
    2f44:	df 92       	push	r13
    2f46:	ef 92       	push	r14
    2f48:	ff 92       	push	r15
    2f4a:	0f 93       	push	r16
    2f4c:	1f 93       	push	r17
    2f4e:	cf 93       	push	r28
    2f50:	df 93       	push	r29
    2f52:	4b 01       	movw	r8, r22
    2f54:	5c 01       	movw	r10, r24
    2f56:	ea 01       	movw	r28, r20
    2f58:	68 01       	movw	r12, r16
    2f5a:	79 01       	movw	r14, r18
	bool bResult = false;
	
	// Pet the watchdog
	WatchdogReset();
    2f5c:	0e 94 5c 27 	call	0x4eb8	; 0x4eb8 <WatchdogReset>
		
	// Assert chip select
	SDSetCS(true);
    2f60:	81 e0       	ldi	r24, 0x01	; 1
    2f62:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <SDSetCS>

	if (1 == u32SectorCount)
    2f66:	81 e0       	ldi	r24, 0x01	; 1
    2f68:	c8 16       	cp	r12, r24
    2f6a:	d1 04       	cpc	r13, r1
    2f6c:	e1 04       	cpc	r14, r1
    2f6e:	f1 04       	cpc	r15, r1
    2f70:	81 f4       	brne	.+32     	; 0x2f92 <SDRead+0x58>
	{
		if (0 == SDCommand(CMD17,
    2f72:	b5 01       	movw	r22, r10
    2f74:	a4 01       	movw	r20, r8
    2f76:	81 e1       	ldi	r24, 0x11	; 17
    2f78:	0e 94 4f 1a 	call	0x349e	; 0x349e <SDCommand>
    2f7c:	81 11       	cpse	r24, r1
    2f7e:	35 c0       	rjmp	.+106    	; 0x2fea <SDRead+0xb0>
						   u32Sector))
		{
			bResult = SDReceiveDataBlock(pu8Buffer,
    2f80:	60 91 57 09 	lds	r22, 0x0957	; 0x800957 <sg_u16BlockSize>
    2f84:	70 91 58 09 	lds	r23, 0x0958	; 0x800958 <sg_u16BlockSize+0x1>
    2f88:	ce 01       	movw	r24, r28
    2f8a:	0e 94 22 1c 	call	0x3844	; 0x3844 <SDReceiveDataBlock>
    2f8e:	18 2f       	mov	r17, r24
    2f90:	2f c0       	rjmp	.+94     	; 0x2ff0 <SDRead+0xb6>
		}
	}
	else
	{
		// Multisector
		if (0 == SDCommand(CMD18,
    2f92:	b5 01       	movw	r22, r10
    2f94:	a4 01       	movw	r20, r8
    2f96:	82 e1       	ldi	r24, 0x12	; 18
    2f98:	0e 94 4f 1a 	call	0x349e	; 0x349e <SDCommand>
    2f9c:	88 23       	and	r24, r24
    2f9e:	19 f0       	breq	.+6      	; 0x2fa6 <SDRead+0x6c>
    2fa0:	26 c0       	rjmp	.+76     	; 0x2fee <SDRead+0xb4>
				WatchdogReset();
				
				pu8Buffer += sg_u16BlockSize;
			} 
			while ((bResult) &&
				   (u32SectorCount--));
    2fa2:	6c 01       	movw	r12, r24
    2fa4:	7d 01       	movw	r14, r26
		if (0 == SDCommand(CMD18,
						   u32Sector))
		{
			do 
			{
				bResult = SDReceiveDataBlock(pu8Buffer,
    2fa6:	60 91 57 09 	lds	r22, 0x0957	; 0x800957 <sg_u16BlockSize>
    2faa:	70 91 58 09 	lds	r23, 0x0958	; 0x800958 <sg_u16BlockSize+0x1>
    2fae:	ce 01       	movw	r24, r28
    2fb0:	0e 94 22 1c 	call	0x3844	; 0x3844 <SDReceiveDataBlock>
    2fb4:	18 2f       	mov	r17, r24
							 				 sg_u16BlockSize);
				// Pet the watchdog
				WatchdogReset();
    2fb6:	0e 94 5c 27 	call	0x4eb8	; 0x4eb8 <WatchdogReset>
				
				pu8Buffer += sg_u16BlockSize;
    2fba:	80 91 57 09 	lds	r24, 0x0957	; 0x800957 <sg_u16BlockSize>
    2fbe:	90 91 58 09 	lds	r25, 0x0958	; 0x800958 <sg_u16BlockSize+0x1>
    2fc2:	c8 0f       	add	r28, r24
    2fc4:	d9 1f       	adc	r29, r25
			} 
			while ((bResult) &&
				   (u32SectorCount--));
    2fc6:	11 23       	and	r17, r17
    2fc8:	49 f0       	breq	.+18     	; 0x2fdc <SDRead+0xa2>
    2fca:	d7 01       	movw	r26, r14
    2fcc:	c6 01       	movw	r24, r12
    2fce:	01 97       	sbiw	r24, 0x01	; 1
    2fd0:	a1 09       	sbc	r26, r1
    2fd2:	b1 09       	sbc	r27, r1
				// Pet the watchdog
				WatchdogReset();
				
				pu8Buffer += sg_u16BlockSize;
			} 
			while ((bResult) &&
    2fd4:	cd 28       	or	r12, r13
    2fd6:	ce 28       	or	r12, r14
    2fd8:	cf 28       	or	r12, r15
    2fda:	19 f7       	brne	.-58     	; 0x2fa2 <SDRead+0x68>
				   (u32SectorCount--));
				   
			// Regardless, send a stop command
			(void) SDCommand(CMD12,
    2fdc:	40 e0       	ldi	r20, 0x00	; 0
    2fde:	50 e0       	ldi	r21, 0x00	; 0
    2fe0:	ba 01       	movw	r22, r20
    2fe2:	8c e0       	ldi	r24, 0x0C	; 12
    2fe4:	0e 94 4f 1a 	call	0x349e	; 0x349e <SDCommand>
    2fe8:	03 c0       	rjmp	.+6      	; 0x2ff0 <SDRead+0xb6>
// Read one or more sectors from SD
bool SDRead(uint32_t u32Sector,
			uint8_t *pu8Buffer,
			uint32_t u32SectorCount)
{
	bool bResult = false;
    2fea:	10 e0       	ldi	r17, 0x00	; 0
    2fec:	01 c0       	rjmp	.+2      	; 0x2ff0 <SDRead+0xb6>
    2fee:	10 e0       	ldi	r17, 0x00	; 0
		{
			// Failed
		}
	}
	
	SDSetCS(false);
    2ff0:	80 e0       	ldi	r24, 0x00	; 0
    2ff2:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <SDSetCS>

	return(bResult);
}
    2ff6:	81 2f       	mov	r24, r17
    2ff8:	df 91       	pop	r29
    2ffa:	cf 91       	pop	r28
    2ffc:	1f 91       	pop	r17
    2ffe:	0f 91       	pop	r16
    3000:	ff 90       	pop	r15
    3002:	ef 90       	pop	r14
    3004:	df 90       	pop	r13
    3006:	cf 90       	pop	r12
    3008:	bf 90       	pop	r11
    300a:	af 90       	pop	r10
    300c:	9f 90       	pop	r9
    300e:	8f 90       	pop	r8
    3010:	08 95       	ret

Disassembly of section .text.SDWrite:

00002d82 <SDWrite>:

bool SDGetBlockSize(uint32_t *pu32BlockSize)
{
	*pu32BlockSize = sg_u16BlockSize;
	return(true);
}
    2d82:	8f 92       	push	r8
    2d84:	9f 92       	push	r9
    2d86:	af 92       	push	r10
    2d88:	bf 92       	push	r11
    2d8a:	cf 92       	push	r12
    2d8c:	df 92       	push	r13
    2d8e:	ef 92       	push	r14
    2d90:	ff 92       	push	r15
    2d92:	0f 93       	push	r16
    2d94:	1f 93       	push	r17
    2d96:	cf 93       	push	r28
    2d98:	df 93       	push	r29
    2d9a:	4b 01       	movw	r8, r22
    2d9c:	5c 01       	movw	r10, r24
    2d9e:	ea 01       	movw	r28, r20
    2da0:	68 01       	movw	r12, r16
    2da2:	79 01       	movw	r14, r18
    2da4:	0e 94 5c 27 	call	0x4eb8	; 0x4eb8 <WatchdogReset>
    2da8:	81 e0       	ldi	r24, 0x01	; 1
    2daa:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <SDSetCS>
    2dae:	81 e0       	ldi	r24, 0x01	; 1
    2db0:	c8 16       	cp	r12, r24
    2db2:	d1 04       	cpc	r13, r1
    2db4:	e1 04       	cpc	r14, r1
    2db6:	f1 04       	cpc	r15, r1
    2db8:	89 f4       	brne	.+34     	; 0x2ddc <SDWrite+0x5a>
    2dba:	b5 01       	movw	r22, r10
    2dbc:	a4 01       	movw	r20, r8
    2dbe:	88 e1       	ldi	r24, 0x18	; 24
    2dc0:	0e 94 4f 1a 	call	0x349e	; 0x349e <SDCommand>
    2dc4:	81 11       	cpse	r24, r1
    2dc6:	37 c0       	rjmp	.+110    	; 0x2e36 <SDWrite+0xb4>
    2dc8:	60 91 57 09 	lds	r22, 0x0957	; 0x800957 <sg_u16BlockSize>
    2dcc:	70 91 58 09 	lds	r23, 0x0958	; 0x800958 <sg_u16BlockSize+0x1>
    2dd0:	4e ef       	ldi	r20, 0xFE	; 254
    2dd2:	ce 01       	movw	r24, r28
    2dd4:	0e 94 33 19 	call	0x3266	; 0x3266 <SDTransmitDataBlock>
    2dd8:	18 2f       	mov	r17, r24
    2dda:	30 c0       	rjmp	.+96     	; 0x2e3c <SDWrite+0xba>
    2ddc:	b5 01       	movw	r22, r10
    2dde:	a4 01       	movw	r20, r8
    2de0:	89 e1       	ldi	r24, 0x19	; 25
    2de2:	0e 94 4f 1a 	call	0x349e	; 0x349e <SDCommand>
    2de6:	88 23       	and	r24, r24
    2de8:	19 f0       	breq	.+6      	; 0x2df0 <SDWrite+0x6e>
    2dea:	27 c0       	rjmp	.+78     	; 0x2e3a <SDWrite+0xb8>
    2dec:	6c 01       	movw	r12, r24
    2dee:	7d 01       	movw	r14, r26
    2df0:	60 91 57 09 	lds	r22, 0x0957	; 0x800957 <sg_u16BlockSize>
    2df4:	70 91 58 09 	lds	r23, 0x0958	; 0x800958 <sg_u16BlockSize+0x1>
    2df8:	4c ef       	ldi	r20, 0xFC	; 252
    2dfa:	ce 01       	movw	r24, r28
    2dfc:	0e 94 33 19 	call	0x3266	; 0x3266 <SDTransmitDataBlock>
    2e00:	18 2f       	mov	r17, r24
    2e02:	0e 94 5c 27 	call	0x4eb8	; 0x4eb8 <WatchdogReset>
    2e06:	80 91 57 09 	lds	r24, 0x0957	; 0x800957 <sg_u16BlockSize>
    2e0a:	90 91 58 09 	lds	r25, 0x0958	; 0x800958 <sg_u16BlockSize+0x1>
    2e0e:	c8 0f       	add	r28, r24
    2e10:	d9 1f       	adc	r29, r25
    2e12:	11 23       	and	r17, r17
    2e14:	49 f0       	breq	.+18     	; 0x2e28 <SDWrite+0xa6>
    2e16:	d7 01       	movw	r26, r14
    2e18:	c6 01       	movw	r24, r12
    2e1a:	01 97       	sbiw	r24, 0x01	; 1
    2e1c:	a1 09       	sbc	r26, r1
    2e1e:	b1 09       	sbc	r27, r1
    2e20:	cd 28       	or	r12, r13
    2e22:	ce 28       	or	r12, r14
    2e24:	cf 28       	or	r12, r15
    2e26:	11 f7       	brne	.-60     	; 0x2dec <SDWrite+0x6a>
    2e28:	40 e0       	ldi	r20, 0x00	; 0
    2e2a:	50 e0       	ldi	r21, 0x00	; 0
    2e2c:	ba 01       	movw	r22, r20
    2e2e:	8c e0       	ldi	r24, 0x0C	; 12
    2e30:	0e 94 4f 1a 	call	0x349e	; 0x349e <SDCommand>
    2e34:	03 c0       	rjmp	.+6      	; 0x2e3c <SDWrite+0xba>
    2e36:	10 e0       	ldi	r17, 0x00	; 0
    2e38:	01 c0       	rjmp	.+2      	; 0x2e3c <SDWrite+0xba>
    2e3a:	10 e0       	ldi	r17, 0x00	; 0
    2e3c:	80 e0       	ldi	r24, 0x00	; 0
    2e3e:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <SDSetCS>
    2e42:	81 2f       	mov	r24, r17
    2e44:	df 91       	pop	r29
    2e46:	cf 91       	pop	r28
    2e48:	1f 91       	pop	r17
    2e4a:	0f 91       	pop	r16
    2e4c:	ff 90       	pop	r15
    2e4e:	ef 90       	pop	r14
    2e50:	df 90       	pop	r13
    2e52:	cf 90       	pop	r12
    2e54:	bf 90       	pop	r11
    2e56:	af 90       	pop	r10
    2e58:	9f 90       	pop	r9
    2e5a:	8f 90       	pop	r8
    2e5c:	08 95       	ret

Disassembly of section .text.SPITransaction:

00004098 <SPITransaction>:

// Do a SPI transaction - read or write (or write pattern)
void SPITransaction(ESPIBusState eSPIBusState,
					uint8_t *pu8Buffer,
					uint16_t u16ByteCount)
{
    4098:	fb 01       	movw	r30, r22
	// If we're transmitting, start the transaction
	if (ESTATE_RX_DATA == eSPIBusState)
    409a:	83 30       	cpi	r24, 0x03	; 3
    409c:	71 f4       	brne	.+28     	; 0x40ba <SPITransaction+0x22>
    409e:	08 c0       	rjmp	.+16     	; 0x40b0 <SPITransaction+0x18>
	{
		while (u16ByteCount--)
		{
			// Clock out 0xff so we can receive the data
			SPDR = 0xff;
    40a0:	2f ef       	ldi	r18, 0xFF	; 255
    40a2:	2e bd       	out	0x2e, r18	; 46

			// Wait for data to be available
			while (0 == (SPSR & (1 << SPIF)));
    40a4:	0d b4       	in	r0, 0x2d	; 45
    40a6:	07 fe       	sbrs	r0, 7
    40a8:	fd cf       	rjmp	.-6      	; 0x40a4 <SPITransaction+0xc>
			
			// Read the byte
			*pu8Buffer = SPDR;
    40aa:	2e b5       	in	r18, 0x2e	; 46
    40ac:	21 93       	st	Z+, r18
					uint16_t u16ByteCount)
{
	// If we're transmitting, start the transaction
	if (ESTATE_RX_DATA == eSPIBusState)
	{
		while (u16ByteCount--)
    40ae:	ac 01       	movw	r20, r24
    40b0:	ca 01       	movw	r24, r20
    40b2:	01 97       	sbiw	r24, 0x01	; 1
    40b4:	45 2b       	or	r20, r21
    40b6:	a1 f7       	brne	.-24     	; 0x40a0 <SPITransaction+0x8>
    40b8:	08 95       	ret
			*pu8Buffer = SPDR;
			++pu8Buffer;
		}
	}
	else
	if (ESTATE_TX_DATA == eSPIBusState)
    40ba:	81 30       	cpi	r24, 0x01	; 1
    40bc:	61 f4       	brne	.+24     	; 0x40d6 <SPITransaction+0x3e>
    40be:	06 c0       	rjmp	.+12     	; 0x40cc <SPITransaction+0x34>
	{
		// Clock out whatever our data is in our queue
		while (u16ByteCount--)
		{
			SPDR = *pu8Buffer;
    40c0:	21 91       	ld	r18, Z+
    40c2:	2e bd       	out	0x2e, r18	; 46
			++pu8Buffer;
			
			// Wait for the transmit to complete
			while (0 == (SPSR & (1 << SPIF)));
    40c4:	0d b4       	in	r0, 0x2d	; 45
    40c6:	07 fe       	sbrs	r0, 7
    40c8:	fd cf       	rjmp	.-6      	; 0x40c4 <SPITransaction+0x2c>
	}
	else
	if (ESTATE_TX_DATA == eSPIBusState)
	{
		// Clock out whatever our data is in our queue
		while (u16ByteCount--)
    40ca:	ac 01       	movw	r20, r24
    40cc:	ca 01       	movw	r24, r20
    40ce:	01 97       	sbiw	r24, 0x01	; 1
    40d0:	45 2b       	or	r20, r21
    40d2:	b1 f7       	brne	.-20     	; 0x40c0 <SPITransaction+0x28>
    40d4:	08 95       	ret
			// Wait for the transmit to complete
			while (0 == (SPSR & (1 << SPIF)));
		}
	}
	else
	if (ESTATE_TX_PATTERN == eSPIBusState)
    40d6:	82 30       	cpi	r24, 0x02	; 2
    40d8:	51 f4       	brne	.+20     	; 0x40ee <SPITransaction+0x56>
    40da:	05 c0       	rjmp	.+10     	; 0x40e6 <SPITransaction+0x4e>
		// Clock out whatever our data is in our queue
		while (u16ByteCount--)
		{
			// This is OK - as the position where the pointer would normally
			// be is just the pattern (single byte)
			SPDR = (uint8_t) (pu8Buffer);
    40dc:	ee bd       	out	0x2e, r30	; 46
		
			// Wait for the transmit to complete
			while (0 == (SPSR & (1 << SPIF)));
    40de:	0d b4       	in	r0, 0x2d	; 45
    40e0:	07 fe       	sbrs	r0, 7
    40e2:	fd cf       	rjmp	.-6      	; 0x40de <SPITransaction+0x46>
	}
	else
	if (ESTATE_TX_PATTERN == eSPIBusState)
	{
		// Clock out whatever our data is in our queue
		while (u16ByteCount--)
    40e4:	ac 01       	movw	r20, r24
    40e6:	ca 01       	movw	r24, r20
    40e8:	01 97       	sbiw	r24, 0x01	; 1
    40ea:	45 2b       	or	r20, r21
    40ec:	b9 f7       	brne	.-18     	; 0x40dc <SPITransaction+0x44>
    40ee:	08 95       	ret

Disassembly of section .text.SPISetBaudRate:

00003012 <SPISetBaudRate>:
	{FCLKIO >> 7,	(1 << SPR1) | (0 << SPR0),	0},					// /128
};

// Sets the SPI baud rate and returns the actual baud rate selected
uint32_t SPISetBaudRate(uint32_t u32BaudRate)
{
    3012:	cf 92       	push	r12
    3014:	df 92       	push	r13
    3016:	ef 92       	push	r14
    3018:	ff 92       	push	r15
    301a:	6b 01       	movw	r12, r22
    301c:	7c 01       	movw	r14, r24
	uint8_t u8Loop;
	
	// Find the baud rate that's the closest
	for (u8Loop = 0; u8Loop < (sizeof(sg_sSPIBaudRates) / sizeof(sg_sSPIBaudRates[0])); u8Loop++)
    301e:	20 e0       	ldi	r18, 0x00	; 0
    3020:	19 c0       	rjmp	.+50     	; 0x3054 <SPISetBaudRate+0x42>
	{
		if (u32BaudRate >= sg_sSPIBaudRates[u8Loop].u32BaudRate)
    3022:	82 2f       	mov	r24, r18
    3024:	90 e0       	ldi	r25, 0x00	; 0
    3026:	ac 01       	movw	r20, r24
    3028:	44 0f       	add	r20, r20
    302a:	55 1f       	adc	r21, r21
    302c:	84 0f       	add	r24, r20
    302e:	95 1f       	adc	r25, r21
    3030:	88 0f       	add	r24, r24
    3032:	99 1f       	adc	r25, r25
    3034:	09 2e       	mov	r0, r25
    3036:	00 0c       	add	r0, r0
    3038:	aa 0b       	sbc	r26, r26
    303a:	8d 5d       	subi	r24, 0xDD	; 221
    303c:	9b 4f       	sbci	r25, 0xFB	; 251
    303e:	af 4f       	sbci	r26, 0xFF	; 255
    3040:	fc 01       	movw	r30, r24
    3042:	5a 2f       	mov	r21, r26
    3044:	0e 94 83 26 	call	0x4d06	; 0x4d06 <__xload_4>
    3048:	c6 16       	cp	r12, r22
    304a:	d7 06       	cpc	r13, r23
    304c:	e8 06       	cpc	r14, r24
    304e:	f9 06       	cpc	r15, r25
    3050:	18 f4       	brcc	.+6      	; 0x3058 <SPISetBaudRate+0x46>
uint32_t SPISetBaudRate(uint32_t u32BaudRate)
{
	uint8_t u8Loop;
	
	// Find the baud rate that's the closest
	for (u8Loop = 0; u8Loop < (sizeof(sg_sSPIBaudRates) / sizeof(sg_sSPIBaudRates[0])); u8Loop++)
    3052:	2f 5f       	subi	r18, 0xFF	; 255
    3054:	27 30       	cpi	r18, 0x07	; 7
    3056:	28 f3       	brcs	.-54     	; 0x3022 <SPISetBaudRate+0x10>
			break;
		}
	}

	// If we've hit the end, use the slowest speed
	if ((sizeof(sg_sSPIBaudRates) / sizeof(sg_sSPIBaudRates[0])) == u8Loop)
    3058:	27 30       	cpi	r18, 0x07	; 7
    305a:	09 f4       	brne	.+2      	; 0x305e <SPISetBaudRate+0x4c>
	{
		u8Loop--;
    305c:	21 50       	subi	r18, 0x01	; 1
	}

	// Found one!
	SPCR = (SPCR & (uint8_t) ~((1 << SPR1) | (1 << SPR0))) | sg_sSPIBaudRates[u8Loop].u8SPCR;
    305e:	6c b5       	in	r22, 0x2c	; 44
    3060:	30 e0       	ldi	r19, 0x00	; 0
    3062:	a9 01       	movw	r20, r18
    3064:	44 0f       	add	r20, r20
    3066:	55 1f       	adc	r21, r21
    3068:	ca 01       	movw	r24, r20
    306a:	82 0f       	add	r24, r18
    306c:	93 1f       	adc	r25, r19
    306e:	88 0f       	add	r24, r24
    3070:	99 1f       	adc	r25, r25
    3072:	04 96       	adiw	r24, 0x04	; 4
    3074:	09 2e       	mov	r0, r25
    3076:	00 0c       	add	r0, r0
    3078:	aa 0b       	sbc	r26, r26
    307a:	8d 5d       	subi	r24, 0xDD	; 221
    307c:	9b 4f       	sbci	r25, 0xFB	; 251
    307e:	af 4f       	sbci	r26, 0xFF	; 255
    3080:	fc 01       	movw	r30, r24
    3082:	84 91       	lpm	r24, Z
    3084:	a7 fd       	sbrc	r26, 7
    3086:	80 81       	ld	r24, Z
    3088:	6c 7f       	andi	r22, 0xFC	; 252
    308a:	86 2b       	or	r24, r22
    308c:	8c bd       	out	0x2c, r24	; 44
	SPSR = (SPSR & (uint8_t) ~(1 << SPI2X)) | sg_sSPIBaudRates[u8Loop].u8SPSR;
    308e:	6d b5       	in	r22, 0x2d	; 45
    3090:	ca 01       	movw	r24, r20
    3092:	82 0f       	add	r24, r18
    3094:	93 1f       	adc	r25, r19
    3096:	88 0f       	add	r24, r24
    3098:	99 1f       	adc	r25, r25
    309a:	05 96       	adiw	r24, 0x05	; 5
    309c:	09 2e       	mov	r0, r25
    309e:	00 0c       	add	r0, r0
    30a0:	aa 0b       	sbc	r26, r26
    30a2:	8d 5d       	subi	r24, 0xDD	; 221
    30a4:	9b 4f       	sbci	r25, 0xFB	; 251
    30a6:	af 4f       	sbci	r26, 0xFF	; 255
    30a8:	fc 01       	movw	r30, r24
    30aa:	84 91       	lpm	r24, Z
    30ac:	a7 fd       	sbrc	r26, 7
    30ae:	80 81       	ld	r24, Z
    30b0:	6e 7f       	andi	r22, 0xFE	; 254
    30b2:	86 2b       	or	r24, r22
    30b4:	8d bd       	out	0x2d, r24	; 45
	return(sg_sSPIBaudRates[u8Loop].u32BaudRate);
    30b6:	24 0f       	add	r18, r20
    30b8:	35 1f       	adc	r19, r21
    30ba:	22 0f       	add	r18, r18
    30bc:	33 1f       	adc	r19, r19
    30be:	03 2e       	mov	r0, r19
    30c0:	00 0c       	add	r0, r0
    30c2:	44 0b       	sbc	r20, r20
    30c4:	2d 5d       	subi	r18, 0xDD	; 221
    30c6:	3b 4f       	sbci	r19, 0xFB	; 251
    30c8:	4f 4f       	sbci	r20, 0xFF	; 255
    30ca:	f9 01       	movw	r30, r18
    30cc:	54 2f       	mov	r21, r20
    30ce:	0e 94 83 26 	call	0x4d06	; 0x4d06 <__xload_4>
}
    30d2:	ff 90       	pop	r15
    30d4:	ef 90       	pop	r14
    30d6:	df 90       	pop	r13
    30d8:	cf 90       	pop	r12
    30da:	08 95       	ret

Disassembly of section .text.SPIInit:

00004824 <SPIInit>:

void SPIInit(void)
{
	// Set MOSI and SCK to output
	DDR_SPI |= (1 << MOSI) | (1 << SCK);
    4824:	84 b1       	in	r24, 0x04	; 4
    4826:	82 68       	ori	r24, 0x82	; 130
    4828:	84 b9       	out	0x04, r24	; 4
	DDR_SPI &= (uint8_t) ~(1 << MISO);
    482a:	84 b1       	in	r24, 0x04	; 4
    482c:	8e 7f       	andi	r24, 0xFE	; 254
    482e:	84 b9       	out	0x04, r24	; 4
	
	// MISO As input (need our pullup)
	PORT_SPI |= (1 << MISO);
    4830:	85 b1       	in	r24, 0x05	; 5
    4832:	81 60       	ori	r24, 0x01	; 1
    4834:	85 b9       	out	0x05, r24	; 5
	
	// Enable SPI engine, master only, and clock to fosc/128 and SPI mode 0 (which is what SD wants)
	SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR1) | (1 << SPR0);
    4836:	83 e5       	ldi	r24, 0x53	; 83
    4838:	8c bd       	out	0x2c, r24	; 44
	
	// Zero out SPSR (all zeroes)
	SPSR = 0;
    483a:	1d bc       	out	0x2d, r1	; 45
	
	// Zero out SPIPS so the SPI IP is connected to MISO, MOSI, SCK, and SS
	MCUCR &= (uint8_t) ~(1 << SPIPS);
    483c:	85 b7       	in	r24, 0x35	; 53
    483e:	8f 77       	andi	r24, 0x7F	; 127
    4840:	85 bf       	out	0x35, r24	; 53

	// Set to something slow/compatible
	(void) SPISetBaudRate(400000);
    4842:	60 e8       	ldi	r22, 0x80	; 128
    4844:	7a e1       	ldi	r23, 0x1A	; 26
    4846:	86 e0       	ldi	r24, 0x06	; 6
    4848:	90 e0       	ldi	r25, 0x00	; 0
    484a:	0e 94 09 18 	call	0x3012	; 0x3012 <SPISetBaudRate>
    484e:	08 95       	ret

Disassembly of section .text.readGlobalState:

000044b2 <readGlobalState>:

static GlobalState gState;
static uint32_t currentSector;
static uint8_t __attribute__((aligned(4))) frameBuffer[FRAME_BUFFER_SIZE];  // Enlarged to handle full frame

static bool readGlobalState(void) {
    44b2:	0f 93       	push	r16
    44b4:	1f 93       	push	r17
    44b6:	cf 93       	push	r28
	if (!SDRead(0, frameBuffer, 1)) {
    44b8:	01 e0       	ldi	r16, 0x01	; 1
    44ba:	10 e0       	ldi	r17, 0x00	; 0
    44bc:	20 e0       	ldi	r18, 0x00	; 0
    44be:	30 e0       	ldi	r19, 0x00	; 0
    44c0:	4c e2       	ldi	r20, 0x2C	; 44
    44c2:	53 e0       	ldi	r21, 0x03	; 3
    44c4:	60 e0       	ldi	r22, 0x00	; 0
    44c6:	70 e0       	ldi	r23, 0x00	; 0
    44c8:	cb 01       	movw	r24, r22
    44ca:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <SDRead>
    44ce:	c8 2f       	mov	r28, r24
    44d0:	88 23       	and	r24, r24
    44d2:	49 f0       	breq	.+18     	; 0x44e6 <readGlobalState+0x34>
		return false;
	}
	memcpy(&gState, frameBuffer, sizeof(GlobalState));
    44d4:	4c e2       	ldi	r20, 0x2C	; 44
    44d6:	53 e0       	ldi	r21, 0x03	; 3
    44d8:	60 e8       	ldi	r22, 0x80	; 128
    44da:	28 ed       	ldi	r18, 0xD8	; 216
    44dc:	31 e0       	ldi	r19, 0x01	; 1
    44de:	8c e2       	ldi	r24, 0x2C	; 44
    44e0:	97 e0       	ldi	r25, 0x07	; 7
    44e2:	0e 94 88 23 	call	0x4710	; 0x4710 <memcpy>
	// TODO: Implement checksum verification
	return true;
}
    44e6:	8c 2f       	mov	r24, r28
    44e8:	cf 91       	pop	r28
    44ea:	1f 91       	pop	r17
    44ec:	0f 91       	pop	r16
    44ee:	08 95       	ret

Disassembly of section .text.writeGlobalState:

000046de <writeGlobalState>:

static bool writeGlobalState(void) {
    46de:	0f 93       	push	r16
    46e0:	1f 93       	push	r17
	memcpy(frameBuffer, &gState, sizeof(GlobalState));
    46e2:	4c e2       	ldi	r20, 0x2C	; 44
    46e4:	57 e0       	ldi	r21, 0x07	; 7
    46e6:	60 e8       	ldi	r22, 0x80	; 128
    46e8:	28 ed       	ldi	r18, 0xD8	; 216
    46ea:	31 e0       	ldi	r19, 0x01	; 1
    46ec:	8c e2       	ldi	r24, 0x2C	; 44
    46ee:	93 e0       	ldi	r25, 0x03	; 3
    46f0:	0e 94 88 23 	call	0x4710	; 0x4710 <memcpy>
	// TODO: Calculate and update checksum
	return SDWrite(0, frameBuffer, 1);
    46f4:	01 e0       	ldi	r16, 0x01	; 1
    46f6:	10 e0       	ldi	r17, 0x00	; 0
    46f8:	20 e0       	ldi	r18, 0x00	; 0
    46fa:	30 e0       	ldi	r19, 0x00	; 0
    46fc:	4c e2       	ldi	r20, 0x2C	; 44
    46fe:	53 e0       	ldi	r21, 0x03	; 3
    4700:	60 e0       	ldi	r22, 0x00	; 0
    4702:	70 e0       	ldi	r23, 0x00	; 0
    4704:	cb 01       	movw	r24, r22
    4706:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <SDWrite>
}
    470a:	1f 91       	pop	r17
    470c:	0f 91       	pop	r16
    470e:	08 95       	ret

Disassembly of section .text.updateSessionMap:

00002e5e <updateSessionMap>:

static bool updateSessionMap(void) {
    2e5e:	8f 92       	push	r8
    2e60:	9f 92       	push	r9
    2e62:	af 92       	push	r10
    2e64:	bf 92       	push	r11
    2e66:	cf 92       	push	r12
    2e68:	df 92       	push	r13
    2e6a:	ef 92       	push	r14
    2e6c:	ff 92       	push	r15
    2e6e:	0f 93       	push	r16
    2e70:	1f 93       	push	r17
	uint32_t mapSector = gState.activeSessionMapSector;
    2e72:	ec e2       	ldi	r30, 0x2C	; 44
    2e74:	f7 e0       	ldi	r31, 0x07	; 7
    2e76:	c4 8c       	ldd	r12, Z+28	; 0x1c
    2e78:	d5 8c       	ldd	r13, Z+29	; 0x1d
    2e7a:	e6 8c       	ldd	r14, Z+30	; 0x1e
    2e7c:	f7 8c       	ldd	r15, Z+31	; 0x1f
	uint32_t mapOffset = gState.activeSessionMapOffset;
    2e7e:	80 a0       	ldd	r8, Z+32	; 0x20
    2e80:	91 a0       	ldd	r9, Z+33	; 0x21
    2e82:	a2 a0       	ldd	r10, Z+34	; 0x22
    2e84:	b3 a0       	ldd	r11, Z+35	; 0x23

	if (!SDRead(mapSector, frameBuffer, 1)) {
    2e86:	01 e0       	ldi	r16, 0x01	; 1
    2e88:	10 e0       	ldi	r17, 0x00	; 0
    2e8a:	20 e0       	ldi	r18, 0x00	; 0
    2e8c:	30 e0       	ldi	r19, 0x00	; 0
    2e8e:	4c e2       	ldi	r20, 0x2C	; 44
    2e90:	53 e0       	ldi	r21, 0x03	; 3
    2e92:	c7 01       	movw	r24, r14
    2e94:	b6 01       	movw	r22, r12
    2e96:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <SDRead>
    2e9a:	88 23       	and	r24, r24
    2e9c:	09 f4       	brne	.+2      	; 0x2ea0 <updateSessionMap+0x42>
    2e9e:	42 c0       	rjmp	.+132    	; 0x2f24 <updateSessionMap+0xc6>
		return false;
	}

	// Update session map
	*(uint64_t*)(frameBuffer + mapOffset) = gState.newSessionSector;
    2ea0:	f4 01       	movw	r30, r8
    2ea2:	e4 5d       	subi	r30, 0xD4	; 212
    2ea4:	fc 4f       	sbci	r31, 0xFC	; 252
    2ea6:	00 91 44 07 	lds	r16, 0x0744	; 0x800744 <gState+0x18>
    2eaa:	10 91 45 07 	lds	r17, 0x0745	; 0x800745 <gState+0x19>
    2eae:	20 91 46 07 	lds	r18, 0x0746	; 0x800746 <gState+0x1a>
    2eb2:	30 91 47 07 	lds	r19, 0x0747	; 0x800747 <gState+0x1b>
    2eb6:	00 83       	st	Z, r16
    2eb8:	11 83       	std	Z+1, r17	; 0x01
    2eba:	22 83       	std	Z+2, r18	; 0x02
    2ebc:	33 83       	std	Z+3, r19	; 0x03
    2ebe:	14 82       	std	Z+4, r1	; 0x04
    2ec0:	15 82       	std	Z+5, r1	; 0x05
    2ec2:	16 82       	std	Z+6, r1	; 0x06
    2ec4:	17 82       	std	Z+7, r1	; 0x07

	if (!SDWrite(mapSector, frameBuffer, 1)) {
    2ec6:	01 e0       	ldi	r16, 0x01	; 1
    2ec8:	10 e0       	ldi	r17, 0x00	; 0
    2eca:	20 e0       	ldi	r18, 0x00	; 0
    2ecc:	30 e0       	ldi	r19, 0x00	; 0
    2ece:	4c e2       	ldi	r20, 0x2C	; 44
    2ed0:	53 e0       	ldi	r21, 0x03	; 3
    2ed2:	c7 01       	movw	r24, r14
    2ed4:	b6 01       	movw	r22, r12
    2ed6:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <SDWrite>
    2eda:	88 23       	and	r24, r24
    2edc:	19 f1       	breq	.+70     	; 0x2f24 <updateSessionMap+0xc6>
		return false;
	}

	// Update map pointers
	gState.activeSessionMapOffset += sizeof(uint64_t);
    2ede:	ec e2       	ldi	r30, 0x2C	; 44
    2ee0:	f7 e0       	ldi	r31, 0x07	; 7
    2ee2:	80 a1       	ldd	r24, Z+32	; 0x20
    2ee4:	91 a1       	ldd	r25, Z+33	; 0x21
    2ee6:	a2 a1       	ldd	r26, Z+34	; 0x22
    2ee8:	b3 a1       	ldd	r27, Z+35	; 0x23
    2eea:	08 96       	adiw	r24, 0x08	; 8
    2eec:	a1 1d       	adc	r26, r1
    2eee:	b1 1d       	adc	r27, r1
    2ef0:	80 a3       	std	Z+32, r24	; 0x20
    2ef2:	91 a3       	std	Z+33, r25	; 0x21
    2ef4:	a2 a3       	std	Z+34, r26	; 0x22
    2ef6:	b3 a3       	std	Z+35, r27	; 0x23
	if (gState.activeSessionMapOffset >= SECTOR_SIZE) {
    2ef8:	81 15       	cp	r24, r1
    2efa:	92 40       	sbci	r25, 0x02	; 2
    2efc:	a1 05       	cpc	r26, r1
    2efe:	b1 05       	cpc	r27, r1
    2f00:	78 f0       	brcs	.+30     	; 0x2f20 <updateSessionMap+0xc2>
		gState.activeSessionMapSector++;
    2f02:	84 8d       	ldd	r24, Z+28	; 0x1c
    2f04:	95 8d       	ldd	r25, Z+29	; 0x1d
    2f06:	a6 8d       	ldd	r26, Z+30	; 0x1e
    2f08:	b7 8d       	ldd	r27, Z+31	; 0x1f
    2f0a:	01 96       	adiw	r24, 0x01	; 1
    2f0c:	a1 1d       	adc	r26, r1
    2f0e:	b1 1d       	adc	r27, r1
    2f10:	84 8f       	std	Z+28, r24	; 0x1c
    2f12:	95 8f       	std	Z+29, r25	; 0x1d
    2f14:	a6 8f       	std	Z+30, r26	; 0x1e
    2f16:	b7 8f       	std	Z+31, r27	; 0x1f
		gState.activeSessionMapOffset = 0;
    2f18:	10 a2       	std	Z+32, r1	; 0x20
    2f1a:	11 a2       	std	Z+33, r1	; 0x21
    2f1c:	12 a2       	std	Z+34, r1	; 0x22
    2f1e:	13 a2       	std	Z+35, r1	; 0x23
	}

	return writeGlobalState();
    2f20:	0e 94 6f 23 	call	0x46de	; 0x46de <writeGlobalState>
}
    2f24:	1f 91       	pop	r17
    2f26:	0f 91       	pop	r16
    2f28:	ff 90       	pop	r15
    2f2a:	ef 90       	pop	r14
    2f2c:	df 90       	pop	r13
    2f2e:	cf 90       	pop	r12
    2f30:	bf 90       	pop	r11
    2f32:	af 90       	pop	r10
    2f34:	9f 90       	pop	r9
    2f36:	8f 90       	pop	r8
    2f38:	08 95       	ret

Disassembly of section .text.STORE_Init:

00003a62 <STORE_Init>:

bool STORE_Init(void) {
    3a62:	cf 93       	push	r28
	if (!SDInit()) {
    3a64:	0e 94 7f 11 	call	0x22fe	; 0x22fe <SDInit>
    3a68:	c8 2f       	mov	r28, r24
    3a6a:	88 23       	and	r24, r24
    3a6c:	c1 f1       	breq	.+112    	; 0x3ade <STORE_Init+0x7c>
		return false;
	}

	if (!readGlobalState()) {
    3a6e:	0e 94 59 22 	call	0x44b2	; 0x44b2 <readGlobalState>
    3a72:	81 11       	cpse	r24, r1
    3a74:	22 c0       	rjmp	.+68     	; 0x3aba <STORE_Init+0x58>
		// Initialize global state if it doesn't exist
		memset(&gState, 0, sizeof(GlobalState));
    3a76:	ec e2       	ldi	r30, 0x2C	; 44
    3a78:	f7 e0       	ldi	r31, 0x07	; 7
    3a7a:	88 ed       	ldi	r24, 0xD8	; 216
    3a7c:	91 e0       	ldi	r25, 0x01	; 1
    3a7e:	df 01       	movw	r26, r30
    3a80:	9c 01       	movw	r18, r24
    3a82:	1d 92       	st	X+, r1
    3a84:	21 50       	subi	r18, 0x01	; 1
    3a86:	30 40       	sbci	r19, 0x00	; 0
    3a88:	e1 f7       	brne	.-8      	; 0x3a82 <STORE_Init+0x20>
		gState.firstSessionSector = 1;
    3a8a:	81 e0       	ldi	r24, 0x01	; 1
    3a8c:	90 e0       	ldi	r25, 0x00	; 0
    3a8e:	a0 e0       	ldi	r26, 0x00	; 0
    3a90:	b0 e0       	ldi	r27, 0x00	; 0
    3a92:	84 87       	std	Z+12, r24	; 0x0c
    3a94:	95 87       	std	Z+13, r25	; 0x0d
    3a96:	a6 87       	std	Z+14, r26	; 0x0e
    3a98:	b7 87       	std	Z+15, r27	; 0x0f
		gState.newSessionSector = 1;
    3a9a:	80 8f       	std	Z+24, r24	; 0x18
    3a9c:	91 8f       	std	Z+25, r25	; 0x19
    3a9e:	a2 8f       	std	Z+26, r26	; 0x1a
    3aa0:	b3 8f       	std	Z+27, r27	; 0x1b
		gState.activeSessionMapSector = 4;
    3aa2:	84 e0       	ldi	r24, 0x04	; 4
    3aa4:	90 e0       	ldi	r25, 0x00	; 0
    3aa6:	a0 e0       	ldi	r26, 0x00	; 0
    3aa8:	b0 e0       	ldi	r27, 0x00	; 0
    3aaa:	84 8f       	std	Z+28, r24	; 0x1c
    3aac:	95 8f       	std	Z+29, r25	; 0x1d
    3aae:	a6 8f       	std	Z+30, r26	; 0x1e
    3ab0:	b7 8f       	std	Z+31, r27	; 0x1f
		gState.activeSessionMapOffset = 0;
		// TODO: Initialize other fields as needed
		if (!writeGlobalState()) {
    3ab2:	0e 94 6f 23 	call	0x46de	; 0x46de <writeGlobalState>
    3ab6:	88 23       	and	r24, r24
    3ab8:	89 f0       	breq	.+34     	; 0x3adc <STORE_Init+0x7a>
			return false;
		}
	}

	currentSector = gState.newSessionSector;
    3aba:	80 91 44 07 	lds	r24, 0x0744	; 0x800744 <gState+0x18>
    3abe:	90 91 45 07 	lds	r25, 0x0745	; 0x800745 <gState+0x19>
    3ac2:	a0 91 46 07 	lds	r26, 0x0746	; 0x800746 <gState+0x1a>
    3ac6:	b0 91 47 07 	lds	r27, 0x0747	; 0x800747 <gState+0x1b>
    3aca:	80 93 51 09 	sts	0x0951, r24	; 0x800951 <currentSector>
    3ace:	90 93 52 09 	sts	0x0952, r25	; 0x800952 <currentSector+0x1>
    3ad2:	a0 93 53 09 	sts	0x0953, r26	; 0x800953 <currentSector+0x2>
    3ad6:	b0 93 54 09 	sts	0x0954, r27	; 0x800954 <currentSector+0x3>
	return true;
    3ada:	01 c0       	rjmp	.+2      	; 0x3ade <STORE_Init+0x7c>
		gState.newSessionSector = 1;
		gState.activeSessionMapSector = 4;
		gState.activeSessionMapOffset = 0;
		// TODO: Initialize other fields as needed
		if (!writeGlobalState()) {
			return false;
    3adc:	c8 2f       	mov	r28, r24
		}
	}

	currentSector = gState.newSessionSector;
	return true;
}
    3ade:	8c 2f       	mov	r24, r28
    3ae0:	cf 91       	pop	r28
    3ae2:	08 95       	ret

Disassembly of section .text.STORE_WriteFrame:

000029ee <STORE_WriteFrame>:

bool STORE_WriteFrame(volatile FrameData* frame) {
    29ee:	8f 92       	push	r8
    29f0:	9f 92       	push	r9
    29f2:	af 92       	push	r10
    29f4:	bf 92       	push	r11
    29f6:	cf 92       	push	r12
    29f8:	df 92       	push	r13
    29fa:	ef 92       	push	r14
    29fc:	ff 92       	push	r15
    29fe:	0f 93       	push	r16
    2a00:	1f 93       	push	r17
    2a02:	cf 93       	push	r28
    2a04:	df 93       	push	r29
	uint32_t bytesWritten = 0;
	uint32_t currentOffset = 0;
	uint32_t sectorsToWrite;
	
	// Verify frame size
	if(frame->frameBytes > FRAME_BUFFER_SIZE) {
    2a06:	fc 01       	movw	r30, r24
    2a08:	24 81       	ldd	r18, Z+4	; 0x04
    2a0a:	35 81       	ldd	r19, Z+5	; 0x05
    2a0c:	21 30       	cpi	r18, 0x01	; 1
    2a0e:	34 40       	sbci	r19, 0x04	; 4
    2a10:	08 f0       	brcs	.+2      	; 0x2a14 <STORE_WriteFrame+0x26>
    2a12:	5b c0       	rjmp	.+182    	; 0x2aca <STORE_WriteFrame+0xdc>
    2a14:	ec 01       	movw	r28, r24
		return false;
	}
	
	// Copy frame data to our buffer
	memcpy(frameBuffer, (const void*)frame, frame->frameBytes);
    2a16:	2c 81       	ldd	r18, Y+4	; 0x04
    2a18:	3d 81       	ldd	r19, Y+5	; 0x05
    2a1a:	ac 01       	movw	r20, r24
    2a1c:	60 e8       	ldi	r22, 0x80	; 128
    2a1e:	8c e2       	ldi	r24, 0x2C	; 44
    2a20:	93 e0       	ldi	r25, 0x03	; 3
    2a22:	0e 94 88 23 	call	0x4710	; 0x4710 <memcpy>
	
	// Zero out any remaining buffer space in last sector
	if(frame->frameBytes < FRAME_BUFFER_SIZE) {
    2a26:	8c 81       	ldd	r24, Y+4	; 0x04
    2a28:	9d 81       	ldd	r25, Y+5	; 0x05
    2a2a:	81 15       	cp	r24, r1
    2a2c:	94 40       	sbci	r25, 0x04	; 4
    2a2e:	70 f4       	brcc	.+28     	; 0x2a4c <STORE_WriteFrame+0x5e>
		memset(frameBuffer + frame->frameBytes, 0, FRAME_BUFFER_SIZE - frame->frameBytes);
    2a30:	2c 81       	ldd	r18, Y+4	; 0x04
    2a32:	3d 81       	ldd	r19, Y+5	; 0x05
    2a34:	8c 81       	ldd	r24, Y+4	; 0x04
    2a36:	9d 81       	ldd	r25, Y+5	; 0x05
    2a38:	40 e0       	ldi	r20, 0x00	; 0
    2a3a:	54 e0       	ldi	r21, 0x04	; 4
    2a3c:	42 1b       	sub	r20, r18
    2a3e:	53 0b       	sbc	r21, r19
    2a40:	60 e0       	ldi	r22, 0x00	; 0
    2a42:	70 e0       	ldi	r23, 0x00	; 0
    2a44:	84 5d       	subi	r24, 0xD4	; 212
    2a46:	9c 4f       	sbci	r25, 0xFC	; 252
    2a48:	0e 94 da 26 	call	0x4db4	; 0x4db4 <memset>

	currentSector = gState.newSessionSector;
	return true;
}

bool STORE_WriteFrame(volatile FrameData* frame) {
    2a4c:	c1 2c       	mov	r12, r1
    2a4e:	d1 2c       	mov	r13, r1
    2a50:	76 01       	movw	r14, r12
    2a52:	68 94       	set
    2a54:	c1 f8       	bld	r12, 1
    2a56:	81 2c       	mov	r8, r1
    2a58:	91 2c       	mov	r9, r1
    2a5a:	54 01       	movw	r10, r8
    2a5c:	2f c0       	rjmp	.+94     	; 0x2abc <STORE_WriteFrame+0xce>
	// Calculate how many complete sectors we need to write
	sectorsToWrite = SECTORS_PER_FRAME;
	
	// Write all sectors
	while(sectorsToWrite > 0) {
		if(!SDWrite(currentSector, frameBuffer + currentOffset, 1)) {
    2a5e:	60 91 51 09 	lds	r22, 0x0951	; 0x800951 <currentSector>
    2a62:	70 91 52 09 	lds	r23, 0x0952	; 0x800952 <currentSector+0x1>
    2a66:	80 91 53 09 	lds	r24, 0x0953	; 0x800953 <currentSector+0x2>
    2a6a:	90 91 54 09 	lds	r25, 0x0954	; 0x800954 <currentSector+0x3>
    2a6e:	01 e0       	ldi	r16, 0x01	; 1
    2a70:	10 e0       	ldi	r17, 0x00	; 0
    2a72:	20 e0       	ldi	r18, 0x00	; 0
    2a74:	30 e0       	ldi	r19, 0x00	; 0
    2a76:	a4 01       	movw	r20, r8
    2a78:	44 5d       	subi	r20, 0xD4	; 212
    2a7a:	5c 4f       	sbci	r21, 0xFC	; 252
    2a7c:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <SDWrite>
    2a80:	88 23       	and	r24, r24
    2a82:	21 f1       	breq	.+72     	; 0x2acc <STORE_WriteFrame+0xde>
			return false;
		}
		currentSector++;
    2a84:	80 91 51 09 	lds	r24, 0x0951	; 0x800951 <currentSector>
    2a88:	90 91 52 09 	lds	r25, 0x0952	; 0x800952 <currentSector+0x1>
    2a8c:	a0 91 53 09 	lds	r26, 0x0953	; 0x800953 <currentSector+0x2>
    2a90:	b0 91 54 09 	lds	r27, 0x0954	; 0x800954 <currentSector+0x3>
    2a94:	01 96       	adiw	r24, 0x01	; 1
    2a96:	a1 1d       	adc	r26, r1
    2a98:	b1 1d       	adc	r27, r1
    2a9a:	80 93 51 09 	sts	0x0951, r24	; 0x800951 <currentSector>
    2a9e:	90 93 52 09 	sts	0x0952, r25	; 0x800952 <currentSector+0x1>
    2aa2:	a0 93 53 09 	sts	0x0953, r26	; 0x800953 <currentSector+0x2>
    2aa6:	b0 93 54 09 	sts	0x0954, r27	; 0x800954 <currentSector+0x3>
		currentOffset += SECTOR_SIZE;
    2aaa:	42 e0       	ldi	r20, 0x02	; 2
    2aac:	94 0e       	add	r9, r20
    2aae:	a1 1c       	adc	r10, r1
    2ab0:	b1 1c       	adc	r11, r1
		sectorsToWrite--;
    2ab2:	81 e0       	ldi	r24, 0x01	; 1
    2ab4:	c8 1a       	sub	r12, r24
    2ab6:	d1 08       	sbc	r13, r1
    2ab8:	e1 08       	sbc	r14, r1
    2aba:	f1 08       	sbc	r15, r1
	
	// Calculate how many complete sectors we need to write
	sectorsToWrite = SECTORS_PER_FRAME;
	
	// Write all sectors
	while(sectorsToWrite > 0) {
    2abc:	c1 14       	cp	r12, r1
    2abe:	d1 04       	cpc	r13, r1
    2ac0:	e1 04       	cpc	r14, r1
    2ac2:	f1 04       	cpc	r15, r1
    2ac4:	61 f6       	brne	.-104    	; 0x2a5e <STORE_WriteFrame+0x70>
		currentSector++;
		currentOffset += SECTOR_SIZE;
		sectorsToWrite--;
	}
	
	return true;
    2ac6:	81 e0       	ldi	r24, 0x01	; 1
    2ac8:	01 c0       	rjmp	.+2      	; 0x2acc <STORE_WriteFrame+0xde>
	uint32_t currentOffset = 0;
	uint32_t sectorsToWrite;
	
	// Verify frame size
	if(frame->frameBytes > FRAME_BUFFER_SIZE) {
		return false;
    2aca:	80 e0       	ldi	r24, 0x00	; 0
		currentOffset += SECTOR_SIZE;
		sectorsToWrite--;
	}
	
	return true;
}
    2acc:	df 91       	pop	r29
    2ace:	cf 91       	pop	r28
    2ad0:	1f 91       	pop	r17
    2ad2:	0f 91       	pop	r16
    2ad4:	ff 90       	pop	r15
    2ad6:	ef 90       	pop	r14
    2ad8:	df 90       	pop	r13
    2ada:	cf 90       	pop	r12
    2adc:	bf 90       	pop	r11
    2ade:	af 90       	pop	r10
    2ae0:	9f 90       	pop	r9
    2ae2:	8f 90       	pop	r8
    2ae4:	08 95       	ret

Disassembly of section .text.STORE_StartNewSession:

00004248 <STORE_StartNewSession>:

bool STORE_StartNewSession(void) {
	// Update session info
	gState.sessionCount++;
    4248:	ec e2       	ldi	r30, 0x2C	; 44
    424a:	f7 e0       	ldi	r31, 0x07	; 7
    424c:	84 89       	ldd	r24, Z+20	; 0x14
    424e:	95 89       	ldd	r25, Z+21	; 0x15
    4250:	a6 89       	ldd	r26, Z+22	; 0x16
    4252:	b7 89       	ldd	r27, Z+23	; 0x17
    4254:	01 96       	adiw	r24, 0x01	; 1
    4256:	a1 1d       	adc	r26, r1
    4258:	b1 1d       	adc	r27, r1
    425a:	84 8b       	std	Z+20, r24	; 0x14
    425c:	95 8b       	std	Z+21, r25	; 0x15
    425e:	a6 8b       	std	Z+22, r26	; 0x16
    4260:	b7 8b       	std	Z+23, r27	; 0x17
	gState.newSessionSector = currentSector;
    4262:	80 91 51 09 	lds	r24, 0x0951	; 0x800951 <currentSector>
    4266:	90 91 52 09 	lds	r25, 0x0952	; 0x800952 <currentSector+0x1>
    426a:	a0 91 53 09 	lds	r26, 0x0953	; 0x800953 <currentSector+0x2>
    426e:	b0 91 54 09 	lds	r27, 0x0954	; 0x800954 <currentSector+0x3>
    4272:	80 8f       	std	Z+24, r24	; 0x18
    4274:	91 8f       	std	Z+25, r25	; 0x19
    4276:	a2 8f       	std	Z+26, r26	; 0x1a
    4278:	b3 8f       	std	Z+27, r27	; 0x1b
	
	// Ensure sector alignment for new sessions
	if(currentSector % SECTORS_PER_FRAME != 0) {
    427a:	80 ff       	sbrs	r24, 0
    427c:	0c c0       	rjmp	.+24     	; 0x4296 <STORE_StartNewSession+0x4e>
		currentSector += SECTORS_PER_FRAME - (currentSector % SECTORS_PER_FRAME);
    427e:	8e 7f       	andi	r24, 0xFE	; 254
    4280:	02 96       	adiw	r24, 0x02	; 2
    4282:	a1 1d       	adc	r26, r1
    4284:	b1 1d       	adc	r27, r1
    4286:	80 93 51 09 	sts	0x0951, r24	; 0x800951 <currentSector>
    428a:	90 93 52 09 	sts	0x0952, r25	; 0x800952 <currentSector+0x1>
    428e:	a0 93 53 09 	sts	0x0953, r26	; 0x800953 <currentSector+0x2>
    4292:	b0 93 54 09 	sts	0x0954, r27	; 0x800954 <currentSector+0x3>
	}
	
	return updateSessionMap();
    4296:	0e 94 2f 17 	call	0x2e5e	; 0x2e5e <updateSessionMap>
}
    429a:	08 95       	ret

Disassembly of section .text.STORE_EndSession:

000040f0 <STORE_EndSession>:

bool STORE_EndSession(void) {
	// Ensure we end on a frame boundary
	if(currentSector % SECTORS_PER_FRAME != 0) {
    40f0:	80 91 51 09 	lds	r24, 0x0951	; 0x800951 <currentSector>
    40f4:	90 91 52 09 	lds	r25, 0x0952	; 0x800952 <currentSector+0x1>
    40f8:	a0 91 53 09 	lds	r26, 0x0953	; 0x800953 <currentSector+0x2>
    40fc:	b0 91 54 09 	lds	r27, 0x0954	; 0x800954 <currentSector+0x3>
    4100:	80 ff       	sbrs	r24, 0
    4102:	0c c0       	rjmp	.+24     	; 0x411c <STORE_EndSession+0x2c>
		currentSector += SECTORS_PER_FRAME - (currentSector % SECTORS_PER_FRAME);
    4104:	8e 7f       	andi	r24, 0xFE	; 254
    4106:	02 96       	adiw	r24, 0x02	; 2
    4108:	a1 1d       	adc	r26, r1
    410a:	b1 1d       	adc	r27, r1
    410c:	80 93 51 09 	sts	0x0951, r24	; 0x800951 <currentSector>
    4110:	90 93 52 09 	sts	0x0952, r25	; 0x800952 <currentSector+0x1>
    4114:	a0 93 53 09 	sts	0x0953, r26	; 0x800953 <currentSector+0x2>
    4118:	b0 93 54 09 	sts	0x0954, r27	; 0x800954 <currentSector+0x3>
	}
	
	gState.lastSessionSector = currentSector - 1;
    411c:	80 91 51 09 	lds	r24, 0x0951	; 0x800951 <currentSector>
    4120:	90 91 52 09 	lds	r25, 0x0952	; 0x800952 <currentSector+0x1>
    4124:	a0 91 53 09 	lds	r26, 0x0953	; 0x800953 <currentSector+0x2>
    4128:	b0 91 54 09 	lds	r27, 0x0954	; 0x800954 <currentSector+0x3>
    412c:	01 97       	sbiw	r24, 0x01	; 1
    412e:	a1 09       	sbc	r26, r1
    4130:	b1 09       	sbc	r27, r1
    4132:	80 93 3c 07 	sts	0x073C, r24	; 0x80073c <gState+0x10>
    4136:	90 93 3d 07 	sts	0x073D, r25	; 0x80073d <gState+0x11>
    413a:	a0 93 3e 07 	sts	0x073E, r26	; 0x80073e <gState+0x12>
    413e:	b0 93 3f 07 	sts	0x073F, r27	; 0x80073f <gState+0x13>
	return writeGlobalState();
    4142:	0e 94 6f 23 	call	0x46de	; 0x46de <writeGlobalState>
}
    4146:	08 95       	ret

Disassembly of section .text.vUARTtxDataAvailable:

00004c16 <vUARTtxDataAvailable>:

// Return true if there are more data bytes available.
//	This is checked before calling vUARTtxDataGet()
static bool vUARTtxDataAvailable( void )
{
	if( 0 == sg_u8SendIndex )
    4c16:	80 91 70 09 	lds	r24, 0x0970	; 0x800970 <sg_u8SendIndex>
    4c1a:	81 11       	cpse	r24, r1
    4c1c:	06 c0       	rjmp	.+12     	; 0x4c2a <vUARTtxDataAvailable+0x14>
	{
		
		*(uint16_t*)sg_u8SendData = PlatformGetSendData(false);  //don't update balance status, only a query
    4c1e:	0e 94 65 24 	call	0x48ca	; 0x48ca <PlatformGetSendData>
    4c22:	90 93 5a 09 	sts	0x095A, r25	; 0x80095a <sg_u8SendData+0x1>
    4c26:	80 93 59 09 	sts	0x0959, r24	; 0x800959 <sg_u8SendData>
	}
	
	if( sg_u8SendIndex <= (sizeof(sg_u8SendData)-2) )
    4c2a:	80 91 70 09 	lds	r24, 0x0970	; 0x800970 <sg_u8SendIndex>
    4c2e:	81 11       	cpse	r24, r1
    4c30:	02 c0       	rjmp	.+4      	; 0x4c36 <vUARTtxDataAvailable+0x20>
	{
		return(true);
    4c32:	81 e0       	ldi	r24, 0x01	; 1
    4c34:	08 95       	ret
	}
	
	return(false);
    4c36:	80 e0       	ldi	r24, 0x00	; 0
}
    4c38:	08 95       	ret

Disassembly of section .text.vUARTtxDataGet:

000043de <vUARTtxDataGet>:
static uint8_t vUARTtxDataGet( void )
{
	uint8_t u8Send;
	uint16_t u16Data;
	
	if (0 == sg_u8SendIndex)  //only get data if not another byte to send
    43de:	80 91 70 09 	lds	r24, 0x0970	; 0x800970 <sg_u8SendIndex>
    43e2:	81 11       	cpse	r24, r1
    43e4:	10 c0       	rjmp	.+32     	; 0x4406 <vUARTtxDataGet+0x28>
		sg_u8SendData[0] = (uint8_t) (sg_u16Pattern[sg_u8PatternIndex] >> 8);
		sg_u8SendData[1] = (uint8_t) sg_u16Pattern[sg_u8PatternIndex];
#else
		// Send request for sensors
		// It's big endian, so we need to swap
		u16Data = PlatformGetSendData(true);  //update balance status because we are sending the data
    43e6:	81 e0       	ldi	r24, 0x01	; 1
    43e8:	0e 94 65 24 	call	0x48ca	; 0x48ca <PlatformGetSendData>
		sg_u8SendData[0] = (uint8_t) (u16Data >> 8);
    43ec:	e9 e5       	ldi	r30, 0x59	; 89
    43ee:	f9 e0       	ldi	r31, 0x09	; 9
    43f0:	90 83       	st	Z, r25
		sg_u8SendData[1] = (uint8_t) u16Data;
    43f2:	81 83       	std	Z+1, r24	; 0x01
#endif	
	
		if (sg_u8SendData[0] & 0x80)  //requesting cell reports
    43f4:	80 81       	ld	r24, Z
    43f6:	88 23       	and	r24, r24
    43f8:	24 f4       	brge	.+8      	; 0x4402 <vUARTtxDataGet+0x24>
		{
			sg_bCellReportsReuested = true;
    43fa:	81 e0       	ldi	r24, 0x01	; 1
    43fc:	80 93 72 09 	sts	0x0972, r24	; 0x800972 <sg_bCellReportsReuested>
    4400:	02 c0       	rjmp	.+4      	; 0x4406 <vUARTtxDataGet+0x28>
		}
		else
		{
			sg_bCellReportsReuested = false;  //sending a command
    4402:	10 92 72 09 	sts	0x0972, r1	; 0x800972 <sg_bCellReportsReuested>
		}
	}

	u8Send = sg_u8SendData[sg_u8SendIndex];
    4406:	e0 91 70 09 	lds	r30, 0x0970	; 0x800970 <sg_u8SendIndex>
    440a:	f0 e0       	ldi	r31, 0x00	; 0
    440c:	e7 5a       	subi	r30, 0xA7	; 167
    440e:	f6 4f       	sbci	r31, 0xF6	; 246
    4410:	80 81       	ld	r24, Z

	sg_u8SendIndex++;
    4412:	90 91 70 09 	lds	r25, 0x0970	; 0x800970 <sg_u8SendIndex>
    4416:	9f 5f       	subi	r25, 0xFF	; 255
    4418:	90 93 70 09 	sts	0x0970, r25	; 0x800970 <sg_u8SendIndex>
	if( sg_u8SendIndex >= sizeof(sg_u8SendData) )
    441c:	90 91 70 09 	lds	r25, 0x0970	; 0x800970 <sg_u8SendIndex>
    4420:	92 30       	cpi	r25, 0x02	; 2
    4422:	10 f0       	brcs	.+4      	; 0x4428 <vUARTtxDataGet+0x4a>
	{
		sg_u8SendIndex = 0;
    4424:	10 92 70 09 	sts	0x0970, r1	; 0x800970 <sg_u8SendIndex>
		}
#endif
	}
	
	return( u8Send );
}
    4428:	08 95       	ret

Disassembly of section .text.__vector_8:

00003f0c <__vector_8>:

static bool sg_bState;

// Pin change interrupt - detecting start bit
ISR(INT1_vect, ISR_BLOCK)
{
    3f0c:	1f 92       	push	r1
    3f0e:	0f 92       	push	r0
    3f10:	0f b6       	in	r0, 0x3f	; 63
    3f12:	0f 92       	push	r0
    3f14:	11 24       	eor	r1, r1
    3f16:	8f 93       	push	r24
    3f18:	ef 93       	push	r30
    3f1a:	ff 93       	push	r31
	// puts it almost in the center of the next bit. The added value 
	// is empirically measured to ensure the sample of the first
	// bit is in the middle of the bit time.
	
	// microseconds and accounts for CPU/interrupt/preamble overhead.
	TIMER_CHB_INT( VUART_BIT_TICKS + (VUART_BIT_START_OFSET));  
    3f1c:	86 b5       	in	r24, 0x26	; 38
    3f1e:	85 5c       	subi	r24, 0xC5	; 197
    3f20:	88 bd       	out	0x28, r24	; 40
    3f22:	85 b3       	in	r24, 0x15	; 21
    3f24:	84 60       	ori	r24, 0x04	; 4
    3f26:	85 bb       	out	0x15, r24	; 21
    3f28:	ee e6       	ldi	r30, 0x6E	; 110
    3f2a:	f0 e0       	ldi	r31, 0x00	; 0
    3f2c:	80 81       	ld	r24, Z
    3f2e:	84 60       	ori	r24, 0x04	; 4
    3f30:	80 83       	st	Z, r24
//	if( IS_PIN_RX_ASSERTED() )
if (1)
	{
		
		// Stop rx pin change interrupts
		VUART_RX_DISABLE();
    3f32:	8d b3       	in	r24, 0x1d	; 29
    3f34:	8d 7f       	andi	r24, 0xFD	; 253
    3f36:	8d bb       	out	0x1d, r24	; 29
	
		if (sg_bState)
    3f38:	80 91 6f 09 	lds	r24, 0x096F	; 0x80096f <sg_bState>
    3f3c:	88 23       	and	r24, r24
    3f3e:	31 f0       	breq	.+12     	; 0x3f4c <__vector_8+0x40>
		{
			PROF_1_ASSERT();
    3f40:	88 b1       	in	r24, 0x08	; 8
    3f42:	80 68       	ori	r24, 0x80	; 128
    3f44:	88 b9       	out	0x08, r24	; 8
			sg_bState = false;
    3f46:	10 92 6f 09 	sts	0x096F, r1	; 0x80096f <sg_bState>
    3f4a:	06 c0       	rjmp	.+12     	; 0x3f58 <__vector_8+0x4c>
		}
		else
		{
			PROF_1_DEASSERT();
    3f4c:	88 b1       	in	r24, 0x08	; 8
    3f4e:	8f 77       	andi	r24, 0x7F	; 127
    3f50:	88 b9       	out	0x08, r24	; 8
			sg_bState = true;
    3f52:	81 e0       	ldi	r24, 0x01	; 1
    3f54:	80 93 6f 09 	sts	0x096F, r24	; 0x80096f <sg_bState>
		}
		
		// Set the state machine to receive data
		sg_eCell_mc_rxState = ESTATE_RX_DATA;
    3f58:	81 e0       	ldi	r24, 0x01	; 1
    3f5a:	80 93 79 09 	sts	0x0979, r24	; 0x800979 <sg_eCell_mc_rxState>
		sg_u8Cell_mc_rxBitCount = 0;
    3f5e:	10 92 7b 09 	sts	0x097B, r1	; 0x80097b <sg_u8Cell_mc_rxBitCount>
		// of sync
		TIMER_CHB_INT_DISABLE();
		sg_eCell_mc_rxState = ESTATE_IDLE;
	}
		
}
    3f62:	ff 91       	pop	r31
    3f64:	ef 91       	pop	r30
    3f66:	8f 91       	pop	r24
    3f68:	0f 90       	pop	r0
    3f6a:	0f be       	out	0x3f, r0	; 63
    3f6c:	0f 90       	pop	r0
    3f6e:	1f 90       	pop	r1
    3f70:	18 95       	reti

Disassembly of section .text.__vector_16:

00002bc8 <__vector_16>:
		sg_btxMoreAvailable = vUARTtxDataAvailable();
		sg_u8txDataByte = vUARTtxDataGet();
	}
	
	return(bReturnCode);
}
    2bc8:	1f 92       	push	r1
    2bca:	0f 92       	push	r0
    2bcc:	0f b6       	in	r0, 0x3f	; 63
    2bce:	0f 92       	push	r0
    2bd0:	11 24       	eor	r1, r1
    2bd2:	2f 93       	push	r18
    2bd4:	3f 93       	push	r19
    2bd6:	4f 93       	push	r20
    2bd8:	5f 93       	push	r21
    2bda:	6f 93       	push	r22
    2bdc:	7f 93       	push	r23
    2bde:	8f 93       	push	r24
    2be0:	9f 93       	push	r25
    2be2:	af 93       	push	r26
    2be4:	bf 93       	push	r27
    2be6:	ef 93       	push	r30
    2be8:	ff 93       	push	r31
    2bea:	86 b5       	in	r24, 0x26	; 38
    2bec:	85 5d       	subi	r24, 0xD5	; 213
    2bee:	88 bd       	out	0x28, r24	; 40
    2bf0:	85 b3       	in	r24, 0x15	; 21
    2bf2:	84 60       	ori	r24, 0x04	; 4
    2bf4:	85 bb       	out	0x15, r24	; 21
    2bf6:	ee e6       	ldi	r30, 0x6E	; 110
    2bf8:	f0 e0       	ldi	r31, 0x00	; 0
    2bfa:	80 81       	ld	r24, Z
    2bfc:	84 60       	ori	r24, 0x04	; 4
    2bfe:	80 83       	st	Z, r24
    2c00:	20 91 78 09 	lds	r18, 0x0978	; 0x800978 <sg_bCell_mc_rxPriorState>
    2c04:	83 b1       	in	r24, 0x03	; 3
    2c06:	82 fb       	bst	r24, 2
    2c08:	88 27       	eor	r24, r24
    2c0a:	80 f9       	bld	r24, 0
    2c0c:	80 93 78 09 	sts	0x0978, r24	; 0x800978 <sg_bCell_mc_rxPriorState>
    2c10:	90 91 6f 09 	lds	r25, 0x096F	; 0x80096f <sg_bState>
    2c14:	99 23       	and	r25, r25
    2c16:	31 f0       	breq	.+12     	; 0x2c24 <__vector_16+0x5c>
    2c18:	98 b1       	in	r25, 0x08	; 8
    2c1a:	90 68       	ori	r25, 0x80	; 128
    2c1c:	98 b9       	out	0x08, r25	; 8
    2c1e:	10 92 6f 09 	sts	0x096F, r1	; 0x80096f <sg_bState>
    2c22:	06 c0       	rjmp	.+12     	; 0x2c30 <__vector_16+0x68>
    2c24:	98 b1       	in	r25, 0x08	; 8
    2c26:	9f 77       	andi	r25, 0x7F	; 127
    2c28:	98 b9       	out	0x08, r25	; 8
    2c2a:	81 e0       	ldi	r24, 0x01	; 1
    2c2c:	80 93 6f 09 	sts	0x096F, r24	; 0x80096f <sg_bState>
    2c30:	80 91 7b 09 	lds	r24, 0x097B	; 0x80097b <sg_u8Cell_mc_rxBitCount>
    2c34:	8f 5f       	subi	r24, 0xFF	; 255
    2c36:	80 93 7b 09 	sts	0x097B, r24	; 0x80097b <sg_u8Cell_mc_rxBitCount>
    2c3a:	81 30       	cpi	r24, 0x01	; 1
    2c3c:	19 f4       	brne	.+6      	; 0x2c44 <__vector_16+0x7c>
    2c3e:	10 92 7a 09 	sts	0x097A, r1	; 0x80097a <sg_u8rxDataByte>
    2c42:	20 c0       	rjmp	.+64     	; 0x2c84 <__vector_16+0xbc>
    2c44:	8a 30       	cpi	r24, 0x0A	; 10
    2c46:	38 f4       	brcc	.+14     	; 0x2c56 <__vector_16+0x8e>
    2c48:	80 91 7a 09 	lds	r24, 0x097A	; 0x80097a <sg_u8rxDataByte>
    2c4c:	88 0f       	add	r24, r24
    2c4e:	82 2b       	or	r24, r18
    2c50:	80 93 7a 09 	sts	0x097A, r24	; 0x80097a <sg_u8rxDataByte>
    2c54:	17 c0       	rjmp	.+46     	; 0x2c84 <__vector_16+0xbc>
    2c56:	20 93 77 09 	sts	0x0977, r18	; 0x800977 <sg_bCell_mc_rxMoreData>
    2c5a:	8c e0       	ldi	r24, 0x0C	; 12
    2c5c:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f0069>
    2c60:	8c b3       	in	r24, 0x1c	; 28
    2c62:	82 60       	ori	r24, 0x02	; 2
    2c64:	8c bb       	out	0x1c, r24	; 28
    2c66:	8d b3       	in	r24, 0x1d	; 29
    2c68:	82 60       	ori	r24, 0x02	; 2
    2c6a:	8d bb       	out	0x1d, r24	; 29
    2c6c:	ee e6       	ldi	r30, 0x6E	; 110
    2c6e:	f0 e0       	ldi	r31, 0x00	; 0
    2c70:	80 81       	ld	r24, Z
    2c72:	8b 7f       	andi	r24, 0xFB	; 251
    2c74:	80 83       	st	Z, r24
    2c76:	80 91 7a 09 	lds	r24, 0x097A	; 0x80097a <sg_u8rxDataByte>
    2c7a:	0e 94 5d 27 	call	0x4eba	; 0x4eba <vUARTRXData>
    2c7e:	83 e0       	ldi	r24, 0x03	; 3
    2c80:	80 93 79 09 	sts	0x0979, r24	; 0x800979 <sg_eCell_mc_rxState>
    2c84:	ff 91       	pop	r31
    2c86:	ef 91       	pop	r30
    2c88:	bf 91       	pop	r27
    2c8a:	af 91       	pop	r26
    2c8c:	9f 91       	pop	r25
    2c8e:	8f 91       	pop	r24
    2c90:	7f 91       	pop	r23
    2c92:	6f 91       	pop	r22
    2c94:	5f 91       	pop	r21
    2c96:	4f 91       	pop	r20
    2c98:	3f 91       	pop	r19
    2c9a:	2f 91       	pop	r18
    2c9c:	0f 90       	pop	r0
    2c9e:	0f be       	out	0x3f, r0	; 63
    2ca0:	0f 90       	pop	r0
    2ca2:	1f 90       	pop	r1
    2ca4:	18 95       	reti

Disassembly of section .text.__vector_15:

000025a0 <__vector_15>:
    25a0:	1f 92       	push	r1
    25a2:	0f 92       	push	r0
    25a4:	0f b6       	in	r0, 0x3f	; 63
    25a6:	0f 92       	push	r0
    25a8:	11 24       	eor	r1, r1
    25aa:	2f 93       	push	r18
    25ac:	3f 93       	push	r19
    25ae:	4f 93       	push	r20
    25b0:	5f 93       	push	r21
    25b2:	6f 93       	push	r22
    25b4:	7f 93       	push	r23
    25b6:	8f 93       	push	r24
    25b8:	9f 93       	push	r25
    25ba:	af 93       	push	r26
    25bc:	bf 93       	push	r27
    25be:	ef 93       	push	r30
    25c0:	ff 93       	push	r31
    25c2:	86 b5       	in	r24, 0x26	; 38
    25c4:	83 5d       	subi	r24, 0xD3	; 211
    25c6:	87 bd       	out	0x27, r24	; 39
    25c8:	85 b3       	in	r24, 0x15	; 21
    25ca:	82 60       	ori	r24, 0x02	; 2
    25cc:	85 bb       	out	0x15, r24	; 21
    25ce:	ee e6       	ldi	r30, 0x6E	; 110
    25d0:	f0 e0       	ldi	r31, 0x00	; 0
    25d2:	80 81       	ld	r24, Z
    25d4:	82 60       	ori	r24, 0x02	; 2
    25d6:	80 83       	st	Z, r24
    25d8:	80 91 71 09 	lds	r24, 0x0971	; 0x800971 <sg_bMCTxNextBit>
    25dc:	88 23       	and	r24, r24
    25de:	21 f0       	breq	.+8      	; 0x25e8 <__vector_15+0x48>
    25e0:	85 b1       	in	r24, 0x05	; 5
    25e2:	88 60       	ori	r24, 0x08	; 8
    25e4:	85 b9       	out	0x05, r24	; 5
    25e6:	03 c0       	rjmp	.+6      	; 0x25ee <__vector_15+0x4e>
    25e8:	85 b1       	in	r24, 0x05	; 5
    25ea:	87 7f       	andi	r24, 0xF7	; 247
    25ec:	85 b9       	out	0x05, r24	; 5
    25ee:	80 91 76 09 	lds	r24, 0x0976	; 0x800976 <sg_u8txBitCount>
    25f2:	8f 5f       	subi	r24, 0xFF	; 255
    25f4:	80 93 76 09 	sts	0x0976, r24	; 0x800976 <sg_u8txBitCount>
    25f8:	80 91 76 09 	lds	r24, 0x0976	; 0x800976 <sg_u8txBitCount>
    25fc:	83 30       	cpi	r24, 0x03	; 3
    25fe:	61 f4       	brne	.+24     	; 0x2618 <__vector_15+0x78>
    2600:	80 91 72 09 	lds	r24, 0x0972	; 0x800972 <sg_bCellReportsReuested>
    2604:	88 23       	and	r24, r24
    2606:	41 f0       	breq	.+16     	; 0x2618 <__vector_15+0x78>
    2608:	8b e0       	ldi	r24, 0x0B	; 11
    260a:	80 93 76 09 	sts	0x0976, r24	; 0x800976 <sg_u8txBitCount>
    260e:	10 92 71 09 	sts	0x0971, r1	; 0x800971 <sg_bMCTxNextBit>
    2612:	10 92 74 09 	sts	0x0974, r1	; 0x800974 <sg_btxMoreAvailable>
    2616:	4d c0       	rjmp	.+154    	; 0x26b2 <__vector_15+0x112>
    2618:	80 91 76 09 	lds	r24, 0x0976	; 0x800976 <sg_u8txBitCount>
    261c:	8a 30       	cpi	r24, 0x0A	; 10
    261e:	80 f4       	brcc	.+32     	; 0x2640 <__vector_15+0xa0>
    2620:	80 91 75 09 	lds	r24, 0x0975	; 0x800975 <sg_u8txDataByte>
    2624:	88 23       	and	r24, r24
    2626:	24 f4       	brge	.+8      	; 0x2630 <__vector_15+0x90>
    2628:	81 e0       	ldi	r24, 0x01	; 1
    262a:	80 93 71 09 	sts	0x0971, r24	; 0x800971 <sg_bMCTxNextBit>
    262e:	02 c0       	rjmp	.+4      	; 0x2634 <__vector_15+0x94>
    2630:	10 92 71 09 	sts	0x0971, r1	; 0x800971 <sg_bMCTxNextBit>
    2634:	80 91 75 09 	lds	r24, 0x0975	; 0x800975 <sg_u8txDataByte>
    2638:	88 0f       	add	r24, r24
    263a:	80 93 75 09 	sts	0x0975, r24	; 0x800975 <sg_u8txDataByte>
    263e:	39 c0       	rjmp	.+114    	; 0x26b2 <__vector_15+0x112>
    2640:	80 91 76 09 	lds	r24, 0x0976	; 0x800976 <sg_u8txBitCount>
    2644:	8a 30       	cpi	r24, 0x0A	; 10
    2646:	29 f4       	brne	.+10     	; 0x2652 <__vector_15+0xb2>
    2648:	80 91 74 09 	lds	r24, 0x0974	; 0x800974 <sg_btxMoreAvailable>
    264c:	80 93 71 09 	sts	0x0971, r24	; 0x800971 <sg_bMCTxNextBit>
    2650:	30 c0       	rjmp	.+96     	; 0x26b2 <__vector_15+0x112>
    2652:	80 91 76 09 	lds	r24, 0x0976	; 0x800976 <sg_u8txBitCount>
    2656:	8b 30       	cpi	r24, 0x0B	; 11
    2658:	19 f4       	brne	.+6      	; 0x2660 <__vector_15+0xc0>
    265a:	10 92 71 09 	sts	0x0971, r1	; 0x800971 <sg_bMCTxNextBit>
    265e:	29 c0       	rjmp	.+82     	; 0x26b2 <__vector_15+0x112>
    2660:	80 91 76 09 	lds	r24, 0x0976	; 0x800976 <sg_u8txBitCount>
    2664:	8c 30       	cpi	r24, 0x0C	; 12
    2666:	29 f5       	brne	.+74     	; 0x26b2 <__vector_15+0x112>
    2668:	80 91 74 09 	lds	r24, 0x0974	; 0x800974 <sg_btxMoreAvailable>
    266c:	80 93 71 09 	sts	0x0971, r24	; 0x800971 <sg_bMCTxNextBit>
    2670:	10 92 76 09 	sts	0x0976, r1	; 0x800976 <sg_u8txBitCount>
    2674:	80 91 74 09 	lds	r24, 0x0974	; 0x800974 <sg_btxMoreAvailable>
    2678:	81 11       	cpse	r24, r1
    267a:	08 c0       	rjmp	.+16     	; 0x268c <__vector_15+0xec>
    267c:	10 92 73 09 	sts	0x0973, r1	; 0x800973 <sg_etxState>
    2680:	ee e6       	ldi	r30, 0x6E	; 110
    2682:	f0 e0       	ldi	r31, 0x00	; 0
    2684:	80 81       	ld	r24, Z
    2686:	8d 7f       	andi	r24, 0xFD	; 253
    2688:	80 83       	st	Z, r24
    268a:	13 c0       	rjmp	.+38     	; 0x26b2 <__vector_15+0x112>
    268c:	0e 94 0b 26 	call	0x4c16	; 0x4c16 <vUARTtxDataAvailable>
    2690:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <sg_btxMoreAvailable>
    2694:	0e 94 ef 21 	call	0x43de	; 0x43de <vUARTtxDataGet>
    2698:	80 93 75 09 	sts	0x0975, r24	; 0x800975 <sg_u8txDataByte>
    269c:	86 b5       	in	r24, 0x26	; 38
    269e:	88 53       	subi	r24, 0x38	; 56
    26a0:	87 bd       	out	0x27, r24	; 39
    26a2:	85 b3       	in	r24, 0x15	; 21
    26a4:	82 60       	ori	r24, 0x02	; 2
    26a6:	85 bb       	out	0x15, r24	; 21
    26a8:	ee e6       	ldi	r30, 0x6E	; 110
    26aa:	f0 e0       	ldi	r31, 0x00	; 0
    26ac:	80 81       	ld	r24, Z
    26ae:	82 60       	ori	r24, 0x02	; 2
    26b0:	80 83       	st	Z, r24
    26b2:	ff 91       	pop	r31
    26b4:	ef 91       	pop	r30
    26b6:	bf 91       	pop	r27
    26b8:	af 91       	pop	r26
    26ba:	9f 91       	pop	r25
    26bc:	8f 91       	pop	r24
    26be:	7f 91       	pop	r23
    26c0:	6f 91       	pop	r22
    26c2:	5f 91       	pop	r21
    26c4:	4f 91       	pop	r20
    26c6:	3f 91       	pop	r19
    26c8:	2f 91       	pop	r18
    26ca:	0f 90       	pop	r0
    26cc:	0f be       	out	0x3f, r0	; 63
    26ce:	0f 90       	pop	r0
    26d0:	1f 90       	pop	r1
    26d2:	18 95       	reti

Disassembly of section .text.vUARTInit:

00004742 <vUARTInit>:
}

void vUARTInit(void)
{
	// Ensure pullups aren't globally disabled
	MCUCR &= (uint8_t) ~(1 << PUD);
    4742:	85 b7       	in	r24, 0x35	; 53
    4744:	8f 7e       	andi	r24, 0xEF	; 239
    4746:	85 bf       	out	0x35, r24	; 53
	
	// Set up outputs
	DDRB |= (1 << PIN_TX);
    4748:	84 b1       	in	r24, 0x04	; 4
    474a:	88 60       	ori	r24, 0x08	; 8
    474c:	84 b9       	out	0x04, r24	; 4
	
	// Now inputs
	DDRB &= (uint8_t) ~(1 << PIN_RX);
    474e:	84 b1       	in	r24, 0x04	; 4
    4750:	8b 7f       	andi	r24, 0xFB	; 251
    4752:	84 b9       	out	0x04, r24	; 4
	
	// Disable pullups on pin RX
	PORTB &= (uint8_t) ~(1 << PIN_RX);
    4754:	85 b1       	in	r24, 0x05	; 5
    4756:	8b 7f       	andi	r24, 0xFB	; 251
    4758:	85 b9       	out	0x05, r24	; 5
	
	// Init profiler pins (if needed)
	PROFILER_INIT();
    475a:	87 b1       	in	r24, 0x07	; 7
    475c:	80 68       	ori	r24, 0x80	; 128
    475e:	87 b9       	out	0x07, r24	; 7
	
	// Mask out the pin change interrupts for now
	VUART_RX_DISABLE();
    4760:	8d b3       	in	r24, 0x1d	; 29
    4762:	8d 7f       	andi	r24, 0xFD	; 253
    4764:	8d bb       	out	0x1d, r24	; 29
	
	// Set the TX state to idle, ready for business
	sg_etxState = ESTATE_IDLE;
    4766:	10 92 73 09 	sts	0x0973, r1	; 0x800973 <sg_etxState>
	
	// Deassert the transmitter so levels are correct to start with
	VUART_TX_DEASSERT();
    476a:	85 b1       	in	r24, 0x05	; 5
    476c:	87 7f       	andi	r24, 0xF7	; 247
    476e:	85 b9       	out	0x05, r24	; 5
    4770:	08 95       	ret

Disassembly of section .text.libgcc.div:

000048f2 <__udivmodhi4>:
    48f2:	aa 1b       	sub	r26, r26
    48f4:	bb 1b       	sub	r27, r27
    48f6:	51 e1       	ldi	r21, 0x11	; 17
    48f8:	07 c0       	rjmp	.+14     	; 0x4908 <__udivmodhi4_ep>

000048fa <__udivmodhi4_loop>:
    48fa:	aa 1f       	adc	r26, r26
    48fc:	bb 1f       	adc	r27, r27
    48fe:	a6 17       	cp	r26, r22
    4900:	b7 07       	cpc	r27, r23
    4902:	10 f0       	brcs	.+4      	; 0x4908 <__udivmodhi4_ep>
    4904:	a6 1b       	sub	r26, r22
    4906:	b7 0b       	sbc	r27, r23

00004908 <__udivmodhi4_ep>:
    4908:	88 1f       	adc	r24, r24
    490a:	99 1f       	adc	r25, r25
    490c:	5a 95       	dec	r21
    490e:	a9 f7       	brne	.-22     	; 0x48fa <__udivmodhi4_loop>
    4910:	80 95       	com	r24
    4912:	90 95       	com	r25
    4914:	bc 01       	movw	r22, r24
    4916:	cd 01       	movw	r24, r26
    4918:	08 95       	ret

Disassembly of section .text.libgcc.div:

0000446e <__udivmodsi4>:
    446e:	a1 e2       	ldi	r26, 0x21	; 33
    4470:	1a 2e       	mov	r1, r26
    4472:	aa 1b       	sub	r26, r26
    4474:	bb 1b       	sub	r27, r27
    4476:	fd 01       	movw	r30, r26
    4478:	0d c0       	rjmp	.+26     	; 0x4494 <__udivmodsi4_ep>

0000447a <__udivmodsi4_loop>:
    447a:	aa 1f       	adc	r26, r26
    447c:	bb 1f       	adc	r27, r27
    447e:	ee 1f       	adc	r30, r30
    4480:	ff 1f       	adc	r31, r31
    4482:	a2 17       	cp	r26, r18
    4484:	b3 07       	cpc	r27, r19
    4486:	e4 07       	cpc	r30, r20
    4488:	f5 07       	cpc	r31, r21
    448a:	20 f0       	brcs	.+8      	; 0x4494 <__udivmodsi4_ep>
    448c:	a2 1b       	sub	r26, r18
    448e:	b3 0b       	sbc	r27, r19
    4490:	e4 0b       	sbc	r30, r20
    4492:	f5 0b       	sbc	r31, r21

00004494 <__udivmodsi4_ep>:
    4494:	66 1f       	adc	r22, r22
    4496:	77 1f       	adc	r23, r23
    4498:	88 1f       	adc	r24, r24
    449a:	99 1f       	adc	r25, r25
    449c:	1a 94       	dec	r1
    449e:	69 f7       	brne	.-38     	; 0x447a <__udivmodsi4_loop>
    44a0:	60 95       	com	r22
    44a2:	70 95       	com	r23
    44a4:	80 95       	com	r24
    44a6:	90 95       	com	r25
    44a8:	9b 01       	movw	r18, r22
    44aa:	ac 01       	movw	r20, r24
    44ac:	bd 01       	movw	r22, r26
    44ae:	cf 01       	movw	r24, r30
    44b0:	08 95       	ret

Disassembly of section .text.libgcc.div:

00004772 <__divmodsi4>:
    4772:	05 2e       	mov	r0, r21
    4774:	97 fb       	bst	r25, 7
    4776:	1e f4       	brtc	.+6      	; 0x477e <__divmodsi4+0xc>
    4778:	00 94       	com	r0
    477a:	0e 94 06 27 	call	0x4e0c	; 0x4e0c <__negsi2>
    477e:	57 fd       	sbrc	r21, 7
    4780:	07 d0       	rcall	.+14     	; 0x4790 <__divmodsi4_neg2>
    4782:	0e 94 37 22 	call	0x446e	; 0x446e <__udivmodsi4>
    4786:	07 fc       	sbrc	r0, 7
    4788:	03 d0       	rcall	.+6      	; 0x4790 <__divmodsi4_neg2>
    478a:	4e f4       	brtc	.+18     	; 0x479e <__divmodsi4_exit>
    478c:	0c 94 06 27 	jmp	0x4e0c	; 0x4e0c <__negsi2>

00004790 <__divmodsi4_neg2>:
    4790:	50 95       	com	r21
    4792:	40 95       	com	r20
    4794:	30 95       	com	r19
    4796:	21 95       	neg	r18
    4798:	3f 4f       	sbci	r19, 0xFF	; 255
    479a:	4f 4f       	sbci	r20, 0xFF	; 255
    479c:	5f 4f       	sbci	r21, 0xFF	; 255

0000479e <__divmodsi4_exit>:
    479e:	08 95       	ret

Disassembly of section .text.libgcc.div:

00004e0c <__negsi2>:
    4e0c:	90 95       	com	r25
    4e0e:	80 95       	com	r24
    4e10:	70 95       	com	r23
    4e12:	61 95       	neg	r22
    4e14:	7f 4f       	sbci	r23, 0xFF	; 255
    4e16:	8f 4f       	sbci	r24, 0xFF	; 255
    4e18:	9f 4f       	sbci	r25, 0xFF	; 255
    4e1a:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00004c7c <__umulhisi3>:
    4c7c:	a2 9f       	mul	r26, r18
    4c7e:	b0 01       	movw	r22, r0
    4c80:	b3 9f       	mul	r27, r19
    4c82:	c0 01       	movw	r24, r0
    4c84:	a3 9f       	mul	r26, r19
    4c86:	70 0d       	add	r23, r0
    4c88:	81 1d       	adc	r24, r1
    4c8a:	11 24       	eor	r1, r1
    4c8c:	91 1d       	adc	r25, r1
    4c8e:	b2 9f       	mul	r27, r18
    4c90:	70 0d       	add	r23, r0
    4c92:	81 1d       	adc	r24, r1
    4c94:	11 24       	eor	r1, r1
    4c96:	91 1d       	adc	r25, r1
    4c98:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00004e66 <__usmulhisi3>:
    4e66:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <__umulhisi3>

00004e6a <__usmulhisi3_tail>:
    4e6a:	b7 ff       	sbrs	r27, 7
    4e6c:	08 95       	ret
    4e6e:	82 1b       	sub	r24, r18
    4e70:	93 0b       	sbc	r25, r19
    4e72:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00004d62 <__muluhisi3>:
    4d62:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <__umulhisi3>
    4d66:	a5 9f       	mul	r26, r21
    4d68:	90 0d       	add	r25, r0
    4d6a:	b4 9f       	mul	r27, r20
    4d6c:	90 0d       	add	r25, r0
    4d6e:	a4 9f       	mul	r26, r20
    4d70:	80 0d       	add	r24, r0
    4d72:	91 1d       	adc	r25, r1
    4d74:	11 24       	eor	r1, r1
    4d76:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00004e1c <__mulshisi3>:
    4e1c:	b7 ff       	sbrs	r27, 7
    4e1e:	0c 94 b1 26 	jmp	0x4d62	; 0x4d62 <__muluhisi3>

00004e22 <__mulohisi3>:
    4e22:	0e 94 b1 26 	call	0x4d62	; 0x4d62 <__muluhisi3>
    4e26:	82 1b       	sub	r24, r18
    4e28:	93 0b       	sbc	r25, r19
    4e2a:	08 95       	ret

Disassembly of section .text.libgcc:

00004e2c <__xload_2>:
    4e2c:	57 fd       	sbrc	r21, 7
    4e2e:	03 c0       	rjmp	.+6      	; 0x4e36 <__xload_2+0xa>
    4e30:	65 91       	lpm	r22, Z+
    4e32:	75 91       	lpm	r23, Z+
    4e34:	08 95       	ret
    4e36:	61 91       	ld	r22, Z+
    4e38:	71 91       	ld	r23, Z+
    4e3a:	08 95       	ret

Disassembly of section .text.libgcc:

00004d06 <__xload_4>:
    4d06:	57 fd       	sbrc	r21, 7
    4d08:	05 c0       	rjmp	.+10     	; 0x4d14 <__xload_4+0xe>
    4d0a:	65 91       	lpm	r22, Z+
    4d0c:	75 91       	lpm	r23, Z+
    4d0e:	85 91       	lpm	r24, Z+
    4d10:	95 91       	lpm	r25, Z+
    4d12:	08 95       	ret
    4d14:	61 91       	ld	r22, Z+
    4d16:	71 91       	ld	r23, Z+
    4d18:	81 91       	ld	r24, Z+
    4d1a:	91 91       	ld	r25, Z+
    4d1c:	08 95       	ret

Disassembly of section .text.libgcc:

00004d1e <__adddi3_s8>:
    4d1e:	00 24       	eor	r0, r0
    4d20:	a7 fd       	sbrc	r26, 7
    4d22:	00 94       	com	r0
    4d24:	2a 0f       	add	r18, r26
    4d26:	30 1d       	adc	r19, r0
    4d28:	40 1d       	adc	r20, r0
    4d2a:	50 1d       	adc	r21, r0
    4d2c:	60 1d       	adc	r22, r0
    4d2e:	70 1d       	adc	r23, r0
    4d30:	80 1d       	adc	r24, r0
    4d32:	90 1d       	adc	r25, r0
    4d34:	08 95       	ret

Disassembly of section .text.__dummy_fini:

00004ebc <_fini>:
    4ebc:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00004ebe <__funcs_on_exit>:
    4ebe:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00004ec0 <__simulator_exit>:
    4ec0:	08 95       	ret

Disassembly of section .text.exit:

00004d78 <exit>:
    4d78:	ec 01       	movw	r28, r24
    4d7a:	0e 94 5f 27 	call	0x4ebe	; 0x4ebe <__funcs_on_exit>
    4d7e:	0e 94 5e 27 	call	0x4ebc	; 0x4ebc <_fini>
    4d82:	ce 01       	movw	r24, r28
    4d84:	0e 94 60 27 	call	0x4ec0	; 0x4ec0 <__simulator_exit>
    4d88:	ce 01       	movw	r24, r28
    4d8a:	0e 94 5a 27 	call	0x4eb4	; 0x4eb4 <_Exit>

Disassembly of section .text.memcpy:

00004710 <memcpy>:
    4710:	cf 92       	push	r12
    4712:	df 92       	push	r13
    4714:	ef 92       	push	r14
    4716:	6a 01       	movw	r12, r20
    4718:	e6 2e       	mov	r14, r22
    471a:	dc 01       	movw	r26, r24
    471c:	28 0f       	add	r18, r24
    471e:	39 1f       	adc	r19, r25
    4720:	a2 17       	cp	r26, r18
    4722:	b3 07       	cpc	r27, r19
    4724:	51 f0       	breq	.+20     	; 0x473a <memcpy+0x2a>
    4726:	f6 01       	movw	r30, r12
    4728:	44 91       	lpm	r20, Z
    472a:	e7 fc       	sbrc	r14, 7
    472c:	40 81       	ld	r20, Z
    472e:	4d 93       	st	X+, r20
    4730:	4f ef       	ldi	r20, 0xFF	; 255
    4732:	c4 1a       	sub	r12, r20
    4734:	d4 0a       	sbc	r13, r20
    4736:	e4 0a       	sbc	r14, r20
    4738:	f3 cf       	rjmp	.-26     	; 0x4720 <memcpy+0x10>
    473a:	ef 90       	pop	r14
    473c:	df 90       	pop	r13
    473e:	cf 90       	pop	r12
    4740:	08 95       	ret

Disassembly of section .text.memset:

00004db4 <memset>:
    4db4:	fc 01       	movw	r30, r24
    4db6:	48 0f       	add	r20, r24
    4db8:	59 1f       	adc	r21, r25
    4dba:	e4 17       	cp	r30, r20
    4dbc:	f5 07       	cpc	r31, r21
    4dbe:	11 f0       	breq	.+4      	; 0x4dc4 <memset+0x10>
    4dc0:	61 93       	st	Z+, r22
    4dc2:	fb cf       	rjmp	.-10     	; 0x4dba <memset+0x6>
    4dc4:	08 95       	ret

Disassembly of section .text.gmtime:

00004ea0 <gmtime>:
    4ea0:	44 e0       	ldi	r20, 0x04	; 4
    4ea2:	59 e0       	ldi	r21, 0x09	; 9
    4ea4:	0e 94 e6 1e 	call	0x3dcc	; 0x3dcc <__gmtime_r>
    4ea8:	08 95       	ret

Disassembly of section .text.__gmtime_r:

00003dcc <__gmtime_r>:
    3dcc:	a0 e0       	ldi	r26, 0x00	; 0
    3dce:	b0 e0       	ldi	r27, 0x00	; 0
    3dd0:	ec ee       	ldi	r30, 0xEC	; 236
    3dd2:	fe e1       	ldi	r31, 0x1E	; 30
    3dd4:	0c 94 d7 22 	jmp	0x45ae	; 0x45ae <__prologue_saves__+0xc>
    3dd8:	ea 01       	movw	r28, r20
    3dda:	fb 01       	movw	r30, r22
    3ddc:	58 2f       	mov	r21, r24
    3dde:	0e 94 83 26 	call	0x4d06	; 0x4d06 <__xload_4>
    3de2:	4b 01       	movw	r8, r22
    3de4:	5c 01       	movw	r10, r24
    3de6:	c1 2c       	mov	r12, r1
    3de8:	d1 2c       	mov	r13, r1
    3dea:	76 01       	movw	r14, r12
    3dec:	8e 01       	movw	r16, r28
    3dee:	9b 01       	movw	r18, r22
    3df0:	a5 01       	movw	r20, r10
    3df2:	60 e0       	ldi	r22, 0x00	; 0
    3df4:	70 e0       	ldi	r23, 0x00	; 0
    3df6:	80 e0       	ldi	r24, 0x00	; 0
    3df8:	90 e0       	ldi	r25, 0x00	; 0
    3dfa:	0e 94 98 02 	call	0x530	; 0x530 <__secs_to_tm>
    3dfe:	97 ff       	sbrs	r25, 7
    3e00:	09 c0       	rjmp	.+18     	; 0x3e14 <__gmtime_r+0x48>
    3e02:	8f e4       	ldi	r24, 0x4F	; 79
    3e04:	90 e0       	ldi	r25, 0x00	; 0
    3e06:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    3e0a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    3e0e:	80 e0       	ldi	r24, 0x00	; 0
    3e10:	90 e0       	ldi	r25, 0x00	; 0
    3e12:	0d c0       	rjmp	.+26     	; 0x3e2e <__gmtime_r+0x62>
    3e14:	19 8a       	std	Y+17, r1	; 0x11
    3e16:	18 8a       	std	Y+16, r1	; 0x10
    3e18:	1a 8a       	std	Y+18, r1	; 0x12
    3e1a:	1b 8a       	std	Y+19, r1	; 0x13
    3e1c:	1c 8a       	std	Y+20, r1	; 0x14
    3e1e:	1d 8a       	std	Y+21, r1	; 0x15
    3e20:	87 e2       	ldi	r24, 0x27	; 39
    3e22:	95 e0       	ldi	r25, 0x05	; 5
    3e24:	a0 e0       	ldi	r26, 0x00	; 0
    3e26:	8e 8b       	std	Y+22, r24	; 0x16
    3e28:	9f 8b       	std	Y+23, r25	; 0x17
    3e2a:	a8 8f       	std	Y+24, r26	; 0x18
    3e2c:	ce 01       	movw	r24, r28
    3e2e:	cd b7       	in	r28, 0x3d	; 61
    3e30:	de b7       	in	r29, 0x3e	; 62
    3e32:	ec e0       	ldi	r30, 0x0C	; 12
    3e34:	0c 94 f3 22 	jmp	0x45e6	; 0x45e6 <__epilogue_restores__+0xc>

Disassembly of section .text.mktime:

000039dc <mktime>:
    39dc:	a9 e1       	ldi	r26, 0x19	; 25
    39de:	b0 e0       	ldi	r27, 0x00	; 0
    39e0:	e4 ef       	ldi	r30, 0xF4	; 244
    39e2:	fc e1       	ldi	r31, 0x1C	; 28
    39e4:	0c 94 d3 22 	jmp	0x45a6	; 0x45a6 <__prologue_saves__+0x4>
    39e8:	2c 01       	movw	r4, r24
    39ea:	bc 01       	movw	r22, r24
    39ec:	80 e8       	ldi	r24, 0x80	; 128
    39ee:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <__tm_to_secs>
    39f2:	39 01       	movw	r6, r18
    39f4:	4a 01       	movw	r8, r20
    39f6:	59 01       	movw	r10, r18
    39f8:	6a 01       	movw	r12, r20
    39fa:	e1 2c       	mov	r14, r1
    39fc:	f1 2c       	mov	r15, r1
    39fe:	00 e0       	ldi	r16, 0x00	; 0
    3a00:	10 e0       	ldi	r17, 0x00	; 0
    3a02:	0e 94 f5 26 	call	0x4dea	; 0x4dea <__cmpdi2>
    3a06:	f9 f4       	brne	.+62     	; 0x3a46 <mktime+0x6a>
    3a08:	1a 8a       	std	Y+18, r1	; 0x12
    3a0a:	19 8a       	std	Y+17, r1	; 0x11
    3a0c:	1b 8a       	std	Y+19, r1	; 0x13
    3a0e:	1c 8a       	std	Y+20, r1	; 0x14
    3a10:	1d 8a       	std	Y+21, r1	; 0x15
    3a12:	1e 8a       	std	Y+22, r1	; 0x16
    3a14:	2b e2       	ldi	r18, 0x2B	; 43
    3a16:	35 e0       	ldi	r19, 0x05	; 5
    3a18:	40 e0       	ldi	r20, 0x00	; 0
    3a1a:	2f 8b       	std	Y+23, r18	; 0x17
    3a1c:	38 8f       	std	Y+24, r19	; 0x18
    3a1e:	49 8f       	std	Y+25, r20	; 0x19
    3a20:	8e 01       	movw	r16, r28
    3a22:	0f 5f       	subi	r16, 0xFF	; 255
    3a24:	1f 4f       	sbci	r17, 0xFF	; 255
    3a26:	93 01       	movw	r18, r6
    3a28:	48 2d       	mov	r20, r8
    3a2a:	0e 94 98 02 	call	0x530	; 0x530 <__secs_to_tm>
    3a2e:	97 fd       	sbrc	r25, 7
    3a30:	0a c0       	rjmp	.+20     	; 0x3a46 <mktime+0x6a>
    3a32:	89 e1       	ldi	r24, 0x19	; 25
    3a34:	f8 01       	movw	r30, r16
    3a36:	d2 01       	movw	r26, r4
    3a38:	01 90       	ld	r0, Z+
    3a3a:	0d 92       	st	X+, r0
    3a3c:	8a 95       	dec	r24
    3a3e:	e1 f7       	brne	.-8      	; 0x3a38 <mktime+0x5c>
    3a40:	b3 01       	movw	r22, r6
    3a42:	c4 01       	movw	r24, r8
    3a44:	0a c0       	rjmp	.+20     	; 0x3a5a <mktime+0x7e>
    3a46:	8f e4       	ldi	r24, 0x4F	; 79
    3a48:	90 e0       	ldi	r25, 0x00	; 0
    3a4a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    3a4e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    3a52:	6f ef       	ldi	r22, 0xFF	; 255
    3a54:	7f ef       	ldi	r23, 0xFF	; 255
    3a56:	8f ef       	ldi	r24, 0xFF	; 255
    3a58:	9f ef       	ldi	r25, 0xFF	; 255
    3a5a:	69 96       	adiw	r28, 0x19	; 25
    3a5c:	e0 e1       	ldi	r30, 0x10	; 16
    3a5e:	0c 94 ef 22 	jmp	0x45de	; 0x45de <__epilogue_restores__+0x4>

Disassembly of section .text._Exit:

00004eb4 <_Exit>:
    4eb4:	0e 94 6b 00 	call	0xd6	; 0xd6 <_exit>

Disassembly of section .text.__tm_to_secs:

00001e36 <__tm_to_secs>:
    1e36:	a5 e0       	ldi	r26, 0x05	; 5
    1e38:	b0 e0       	ldi	r27, 0x00	; 0
    1e3a:	e1 e2       	ldi	r30, 0x21	; 33
    1e3c:	ff e0       	ldi	r31, 0x0F	; 15
    1e3e:	0c 94 d1 22 	jmp	0x45a2	; 0x45a2 <__prologue_saves__>
    1e42:	3b 01       	movw	r6, r22
    1e44:	88 2e       	mov	r8, r24
    1e46:	a8 2f       	mov	r26, r24
    1e48:	cb 01       	movw	r24, r22
    1e4a:	0a 96       	adiw	r24, 0x0a	; 10
    1e4c:	a1 1d       	adc	r26, r1
    1e4e:	fc 01       	movw	r30, r24
    1e50:	5a 2f       	mov	r21, r26
    1e52:	0e 94 16 27 	call	0x4e2c	; 0x4e2c <__xload_2>
    1e56:	5b 01       	movw	r10, r22
    1e58:	9b 01       	movw	r18, r22
    1e5a:	9b 2c       	mov	r9, r11
    1e5c:	99 0c       	add	r9, r9
    1e5e:	99 08       	sbc	r9, r9
    1e60:	f9 2c       	mov	r15, r9
    1e62:	b9 2d       	mov	r27, r9
    1e64:	a9 2d       	mov	r26, r9
    1e66:	89 2d       	mov	r24, r9
    1e68:	99 2d       	mov	r25, r9
    1e6a:	e8 2c       	mov	r14, r8
    1e6c:	63 01       	movw	r12, r6
    1e6e:	48 e0       	ldi	r20, 0x08	; 8
    1e70:	c4 0e       	add	r12, r20
    1e72:	d1 1c       	adc	r13, r1
    1e74:	e1 1c       	adc	r14, r1
    1e76:	f6 01       	movw	r30, r12
    1e78:	5e 2d       	mov	r21, r14
    1e7a:	0e 94 16 27 	call	0x4e2c	; 0x4e2c <__xload_2>
    1e7e:	2b 01       	movw	r4, r22
    1e80:	6c 30       	cpi	r22, 0x0C	; 12
    1e82:	71 05       	cpc	r23, r1
    1e84:	10 f1       	brcs	.+68     	; 0x1eca <__tm_to_secs+0x94>
    1e86:	cb 01       	movw	r24, r22
    1e88:	6c e0       	ldi	r22, 0x0C	; 12
    1e8a:	70 e0       	ldi	r23, 0x00	; 0
    1e8c:	0e 94 8d 24 	call	0x491a	; 0x491a <__divmodhi4>
    1e90:	2c 01       	movw	r4, r24
    1e92:	97 ff       	sbrs	r25, 7
    1e94:	05 c0       	rjmp	.+10     	; 0x1ea0 <__tm_to_secs+0x6a>
    1e96:	61 50       	subi	r22, 0x01	; 1
    1e98:	71 09       	sbc	r23, r1
    1e9a:	8c e0       	ldi	r24, 0x0C	; 12
    1e9c:	48 0e       	add	r4, r24
    1e9e:	51 1c       	adc	r5, r1
    1ea0:	97 2f       	mov	r25, r23
    1ea2:	99 0f       	add	r25, r25
    1ea4:	99 0b       	sbc	r25, r25
    1ea6:	9b 01       	movw	r18, r22
    1ea8:	49 2f       	mov	r20, r25
    1eaa:	59 2f       	mov	r21, r25
    1eac:	69 2f       	mov	r22, r25
    1eae:	79 2f       	mov	r23, r25
    1eb0:	89 2f       	mov	r24, r25
    1eb2:	c9 2c       	mov	r12, r9
    1eb4:	d9 2c       	mov	r13, r9
    1eb6:	e9 2c       	mov	r14, r9
    1eb8:	f9 2c       	mov	r15, r9
    1eba:	09 2d       	mov	r16, r9
    1ebc:	19 2d       	mov	r17, r9
    1ebe:	0e 94 ec 26 	call	0x4dd8	; 0x4dd8 <__adddi3>
    1ec2:	94 2e       	mov	r9, r20
    1ec4:	f5 2e       	mov	r15, r21
    1ec6:	b6 2f       	mov	r27, r22
    1ec8:	a7 2f       	mov	r26, r23
    1eca:	8e 01       	movw	r16, r28
    1ecc:	0f 5f       	subi	r16, 0xFF	; 255
    1ece:	1f 4f       	sbci	r17, 0xFF	; 255
    1ed0:	49 2d       	mov	r20, r9
    1ed2:	5f 2d       	mov	r21, r15
    1ed4:	6b 2f       	mov	r22, r27
    1ed6:	7a 2f       	mov	r23, r26
    1ed8:	0e 94 c7 0a 	call	0x158e	; 0x158e <__year_to_secs>
    1edc:	59 01       	movw	r10, r18
    1ede:	6a 01       	movw	r12, r20
    1ee0:	7b 01       	movw	r14, r22
    1ee2:	8c 01       	movw	r16, r24
    1ee4:	69 81       	ldd	r22, Y+1	; 0x01
    1ee6:	7a 81       	ldd	r23, Y+2	; 0x02
    1ee8:	c2 01       	movw	r24, r4
    1eea:	0e 94 96 22 	call	0x452c	; 0x452c <__month_to_secs>
    1eee:	1b 01       	movw	r2, r22
    1ef0:	2c 01       	movw	r4, r24
    1ef2:	55 0c       	add	r5, r5
    1ef4:	22 08       	sbc	r2, r2
    1ef6:	32 2c       	mov	r3, r2
    1ef8:	21 01       	movw	r4, r2
    1efa:	9b 01       	movw	r18, r22
    1efc:	ac 01       	movw	r20, r24
    1efe:	62 2d       	mov	r22, r2
    1f00:	72 2d       	mov	r23, r2
    1f02:	82 2d       	mov	r24, r2
    1f04:	92 2d       	mov	r25, r2
    1f06:	0e 94 ec 26 	call	0x4dd8	; 0x4dd8 <__adddi3>
    1f0a:	19 01       	movw	r2, r18
    1f0c:	2a 01       	movw	r4, r20
    1f0e:	96 2e       	mov	r9, r22
    1f10:	7b 83       	std	Y+3, r23	; 0x03
    1f12:	8c 83       	std	Y+4, r24	; 0x04
    1f14:	9d 83       	std	Y+5, r25	; 0x05
    1f16:	a8 2d       	mov	r26, r8
    1f18:	c3 01       	movw	r24, r6
    1f1a:	06 96       	adiw	r24, 0x06	; 6
    1f1c:	a1 1d       	adc	r26, r1
    1f1e:	fc 01       	movw	r30, r24
    1f20:	5a 2f       	mov	r21, r26
    1f22:	0e 94 16 27 	call	0x4e2c	; 0x4e2c <__xload_2>
    1f26:	61 50       	subi	r22, 0x01	; 1
    1f28:	71 09       	sbc	r23, r1
    1f2a:	97 2f       	mov	r25, r23
    1f2c:	99 0f       	add	r25, r25
    1f2e:	99 0b       	sbc	r25, r25
    1f30:	30 e8       	ldi	r19, 0x80	; 128
    1f32:	a3 2e       	mov	r10, r19
    1f34:	41 e5       	ldi	r20, 0x51	; 81
    1f36:	b4 2e       	mov	r11, r20
    1f38:	cc 24       	eor	r12, r12
    1f3a:	c3 94       	inc	r12
    1f3c:	d1 2c       	mov	r13, r1
    1f3e:	e1 2c       	mov	r14, r1
    1f40:	f1 2c       	mov	r15, r1
    1f42:	00 e0       	ldi	r16, 0x00	; 0
    1f44:	10 e0       	ldi	r17, 0x00	; 0
    1f46:	9b 01       	movw	r18, r22
    1f48:	49 2f       	mov	r20, r25
    1f4a:	59 2f       	mov	r21, r25
    1f4c:	69 2f       	mov	r22, r25
    1f4e:	79 2f       	mov	r23, r25
    1f50:	89 2f       	mov	r24, r25
    1f52:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <__muldi3>
    1f56:	51 01       	movw	r10, r2
    1f58:	62 01       	movw	r12, r4
    1f5a:	e9 2c       	mov	r14, r9
    1f5c:	fb 80       	ldd	r15, Y+3	; 0x03
    1f5e:	0c 81       	ldd	r16, Y+4	; 0x04
    1f60:	1d 81       	ldd	r17, Y+5	; 0x05
    1f62:	0e 94 ec 26 	call	0x4dd8	; 0x4dd8 <__adddi3>
    1f66:	59 01       	movw	r10, r18
    1f68:	6a 01       	movw	r12, r20
    1f6a:	7b 01       	movw	r14, r22
    1f6c:	8c 01       	movw	r16, r24
    1f6e:	a8 2d       	mov	r26, r8
    1f70:	c3 01       	movw	r24, r6
    1f72:	04 96       	adiw	r24, 0x04	; 4
    1f74:	a1 1d       	adc	r26, r1
    1f76:	fc 01       	movw	r30, r24
    1f78:	5a 2f       	mov	r21, r26
    1f7a:	0e 94 16 27 	call	0x4e2c	; 0x4e2c <__xload_2>
    1f7e:	07 2e       	mov	r0, r23
    1f80:	00 0c       	add	r0, r0
    1f82:	88 0b       	sbc	r24, r24
    1f84:	99 0b       	sbc	r25, r25
    1f86:	20 e1       	ldi	r18, 0x10	; 16
    1f88:	3e e0       	ldi	r19, 0x0E	; 14
    1f8a:	40 e0       	ldi	r20, 0x00	; 0
    1f8c:	50 e0       	ldi	r21, 0x00	; 0
    1f8e:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <__mulsidi3>
    1f92:	0e 94 ec 26 	call	0x4dd8	; 0x4dd8 <__adddi3>
    1f96:	59 01       	movw	r10, r18
    1f98:	6a 01       	movw	r12, r20
    1f9a:	7b 01       	movw	r14, r22
    1f9c:	8c 01       	movw	r16, r24
    1f9e:	a8 2d       	mov	r26, r8
    1fa0:	c3 01       	movw	r24, r6
    1fa2:	02 96       	adiw	r24, 0x02	; 2
    1fa4:	a1 1d       	adc	r26, r1
    1fa6:	fc 01       	movw	r30, r24
    1fa8:	5a 2f       	mov	r21, r26
    1faa:	0e 94 16 27 	call	0x4e2c	; 0x4e2c <__xload_2>
    1fae:	07 2e       	mov	r0, r23
    1fb0:	00 0c       	add	r0, r0
    1fb2:	88 0b       	sbc	r24, r24
    1fb4:	99 0b       	sbc	r25, r25
    1fb6:	2c e3       	ldi	r18, 0x3C	; 60
    1fb8:	30 e0       	ldi	r19, 0x00	; 0
    1fba:	40 e0       	ldi	r20, 0x00	; 0
    1fbc:	50 e0       	ldi	r21, 0x00	; 0
    1fbe:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <__mulsidi3>
    1fc2:	0e 94 ec 26 	call	0x4dd8	; 0x4dd8 <__adddi3>
    1fc6:	59 01       	movw	r10, r18
    1fc8:	6a 01       	movw	r12, r20
    1fca:	7b 01       	movw	r14, r22
    1fcc:	8c 01       	movw	r16, r24
    1fce:	f3 01       	movw	r30, r6
    1fd0:	58 2d       	mov	r21, r8
    1fd2:	0e 94 16 27 	call	0x4e2c	; 0x4e2c <__xload_2>
    1fd6:	9b 01       	movw	r18, r22
    1fd8:	93 2f       	mov	r25, r19
    1fda:	99 0f       	add	r25, r25
    1fdc:	99 0b       	sbc	r25, r25
    1fde:	49 2f       	mov	r20, r25
    1fe0:	59 2f       	mov	r21, r25
    1fe2:	69 2f       	mov	r22, r25
    1fe4:	79 2f       	mov	r23, r25
    1fe6:	89 2f       	mov	r24, r25
    1fe8:	0e 94 ec 26 	call	0x4dd8	; 0x4dd8 <__adddi3>
    1fec:	25 96       	adiw	r28, 0x05	; 5
    1fee:	e2 e1       	ldi	r30, 0x12	; 18
    1ff0:	0c 94 ed 22 	jmp	0x45da	; 0x45da <__epilogue_restores__>

Disassembly of section .text.__year_to_secs:

0000158e <__year_to_secs>:
    158e:	ac e0       	ldi	r26, 0x0C	; 12
    1590:	b0 e0       	ldi	r27, 0x00	; 0
    1592:	ed ec       	ldi	r30, 0xCD	; 205
    1594:	fa e0       	ldi	r31, 0x0A	; 10
    1596:	0c 94 d1 22 	jmp	0x45a2	; 0x45a2 <__prologue_saves__>
    159a:	49 01       	movw	r8, r18
    159c:	5a 01       	movw	r10, r20
    159e:	6b 01       	movw	r12, r22
    15a0:	7c 01       	movw	r14, r24
    15a2:	1c 83       	std	Y+4, r17	; 0x04
    15a4:	0b 83       	std	Y+3, r16	; 0x03
    15a6:	2a 38       	cpi	r18, 0x8A	; 138
    15a8:	31 05       	cpc	r19, r1
    15aa:	41 05       	cpc	r20, r1
    15ac:	51 05       	cpc	r21, r1
    15ae:	61 05       	cpc	r22, r1
    15b0:	71 05       	cpc	r23, r1
    15b2:	81 05       	cpc	r24, r1
    15b4:	91 05       	cpc	r25, r1
    15b6:	11 f0       	breq	.+4      	; 0x15bc <__year_to_secs+0x2e>
    15b8:	0c f0       	brlt	.+2      	; 0x15bc <__year_to_secs+0x2e>
    15ba:	42 c0       	rjmp	.+132    	; 0x1640 <__year_to_secs+0xb2>
    15bc:	f9 01       	movw	r30, r18
    15be:	e4 54       	subi	r30, 0x44	; 68
    15c0:	f1 09       	sbc	r31, r1
    15c2:	f5 95       	asr	r31
    15c4:	e7 95       	ror	r30
    15c6:	f5 95       	asr	r31
    15c8:	e7 95       	ror	r30
    15ca:	c9 01       	movw	r24, r18
    15cc:	83 70       	andi	r24, 0x03	; 3
    15ce:	99 27       	eor	r25, r25
    15d0:	89 2b       	or	r24, r25
    15d2:	51 f4       	brne	.+20     	; 0x15e8 <__year_to_secs+0x5a>
    15d4:	31 97       	sbiw	r30, 0x01	; 1
    15d6:	01 15       	cp	r16, r1
    15d8:	11 05       	cpc	r17, r1
    15da:	69 f0       	breq	.+26     	; 0x15f6 <__year_to_secs+0x68>
    15dc:	81 e0       	ldi	r24, 0x01	; 1
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	d8 01       	movw	r26, r16
    15e2:	8d 93       	st	X+, r24
    15e4:	9c 93       	st	X, r25
    15e6:	07 c0       	rjmp	.+14     	; 0x15f6 <__year_to_secs+0x68>
    15e8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ea:	9c 81       	ldd	r25, Y+4	; 0x04
    15ec:	00 97       	sbiw	r24, 0x00	; 0
    15ee:	19 f0       	breq	.+6      	; 0x15f6 <__year_to_secs+0x68>
    15f0:	dc 01       	movw	r26, r24
    15f2:	1d 92       	st	X+, r1
    15f4:	1c 92       	st	X, r1
    15f6:	d9 01       	movw	r26, r18
    15f8:	a6 54       	subi	r26, 0x46	; 70
    15fa:	b1 09       	sbc	r27, r1
    15fc:	20 e8       	ldi	r18, 0x80	; 128
    15fe:	33 e3       	ldi	r19, 0x33	; 51
    1600:	41 ee       	ldi	r20, 0xE1	; 225
    1602:	51 e0       	ldi	r21, 0x01	; 1
    1604:	0e 94 0e 27 	call	0x4e1c	; 0x4e1c <__mulshisi3>
    1608:	6b 01       	movw	r12, r22
    160a:	7c 01       	movw	r14, r24
    160c:	df 01       	movw	r26, r30
    160e:	20 e8       	ldi	r18, 0x80	; 128
    1610:	31 e5       	ldi	r19, 0x51	; 81
    1612:	41 e0       	ldi	r20, 0x01	; 1
    1614:	50 e0       	ldi	r21, 0x00	; 0
    1616:	0e 94 0e 27 	call	0x4e1c	; 0x4e1c <__mulshisi3>
    161a:	dc 01       	movw	r26, r24
    161c:	cb 01       	movw	r24, r22
    161e:	8c 0d       	add	r24, r12
    1620:	9d 1d       	adc	r25, r13
    1622:	ae 1d       	adc	r26, r14
    1624:	bf 1d       	adc	r27, r15
    1626:	9c 01       	movw	r18, r24
    1628:	ad 01       	movw	r20, r26
    162a:	6c 01       	movw	r12, r24
    162c:	7d 01       	movw	r14, r26
    162e:	ff 0c       	add	r15, r15
    1630:	cc 08       	sbc	r12, r12
    1632:	dc 2c       	mov	r13, r12
    1634:	76 01       	movw	r14, r12
    1636:	ac 2d       	mov	r26, r12
    1638:	fc 2d       	mov	r31, r12
    163a:	ec 2d       	mov	r30, r12
    163c:	9c 2d       	mov	r25, r12
    163e:	cb c0       	rjmp	.+406    	; 0x17d6 <__year_to_secs+0x248>
    1640:	eb 81       	ldd	r30, Y+3	; 0x03
    1642:	fc 81       	ldd	r31, Y+4	; 0x04
    1644:	ef 2b       	or	r30, r31
    1646:	31 f4       	brne	.+12     	; 0x1654 <__year_to_secs+0xc6>
    1648:	1a 82       	std	Y+2, r1	; 0x02
    164a:	19 82       	std	Y+1, r1	; 0x01
    164c:	ce 01       	movw	r24, r28
    164e:	01 96       	adiw	r24, 0x01	; 1
    1650:	9c 83       	std	Y+4, r25	; 0x04
    1652:	8b 83       	std	Y+3, r24	; 0x03
    1654:	c4 01       	movw	r24, r8
    1656:	84 56       	subi	r24, 0x64	; 100
    1658:	91 09       	sbc	r25, r1
    165a:	60 e9       	ldi	r22, 0x90	; 144
    165c:	71 e0       	ldi	r23, 0x01	; 1
    165e:	0e 94 8d 24 	call	0x491a	; 0x491a <__divmodhi4>
    1662:	7e 83       	std	Y+6, r23	; 0x06
    1664:	6d 83       	std	Y+5, r22	; 0x05
    1666:	94 01       	movw	r18, r8
    1668:	a5 01       	movw	r20, r10
    166a:	b6 01       	movw	r22, r12
    166c:	c7 01       	movw	r24, r14
    166e:	ac e9       	ldi	r26, 0x9C	; 156
    1670:	0e 94 8f 26 	call	0x4d1e	; 0x4d1e <__adddi3_s8>
    1674:	19 01       	movw	r2, r18
    1676:	2a 01       	movw	r4, r20
    1678:	3b 01       	movw	r6, r22
    167a:	8f 83       	std	Y+7, r24	; 0x07
    167c:	98 87       	std	Y+8, r25	; 0x08
    167e:	70 e9       	ldi	r23, 0x90	; 144
    1680:	a7 2e       	mov	r10, r23
    1682:	bb 24       	eor	r11, r11
    1684:	b3 94       	inc	r11
    1686:	c1 2c       	mov	r12, r1
    1688:	d1 2c       	mov	r13, r1
    168a:	e1 2c       	mov	r14, r1
    168c:	f1 2c       	mov	r15, r1
    168e:	00 e0       	ldi	r16, 0x00	; 0
    1690:	10 e0       	ldi	r17, 0x00	; 0
    1692:	91 01       	movw	r18, r2
    1694:	a2 01       	movw	r20, r4
    1696:	b3 01       	movw	r22, r6
    1698:	0e 94 1b 20 	call	0x4036	; 0x4036 <__moddi3>
    169c:	c9 01       	movw	r24, r18
    169e:	00 97       	sbiw	r24, 0x00	; 0
    16a0:	59 f4       	brne	.+22     	; 0x16b8 <__year_to_secs+0x12a>
    16a2:	81 e0       	ldi	r24, 0x01	; 1
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	ab 81       	ldd	r26, Y+3	; 0x03
    16a8:	bc 81       	ldd	r27, Y+4	; 0x04
    16aa:	8d 93       	st	X+, r24
    16ac:	9c 93       	st	X, r25
    16ae:	20 e0       	ldi	r18, 0x00	; 0
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	40 e0       	ldi	r20, 0x00	; 0
    16b4:	50 e0       	ldi	r21, 0x00	; 0
    16b6:	33 c0       	rjmp	.+102    	; 0x171e <__year_to_secs+0x190>
    16b8:	28 3c       	cpi	r18, 0xC8	; 200
    16ba:	31 05       	cpc	r19, r1
    16bc:	6c f0       	brlt	.+26     	; 0x16d8 <__year_to_secs+0x14a>
    16be:	2c 32       	cpi	r18, 0x2C	; 44
    16c0:	31 40       	sbci	r19, 0x01	; 1
    16c2:	2c f0       	brlt	.+10     	; 0x16ce <__year_to_secs+0x140>
    16c4:	8c 52       	subi	r24, 0x2C	; 44
    16c6:	91 40       	sbci	r25, 0x01	; 1
    16c8:	43 e0       	ldi	r20, 0x03	; 3
    16ca:	50 e0       	ldi	r21, 0x00	; 0
    16cc:	0c c0       	rjmp	.+24     	; 0x16e6 <__year_to_secs+0x158>
    16ce:	88 5c       	subi	r24, 0xC8	; 200
    16d0:	91 09       	sbc	r25, r1
    16d2:	42 e0       	ldi	r20, 0x02	; 2
    16d4:	50 e0       	ldi	r21, 0x00	; 0
    16d6:	07 c0       	rjmp	.+14     	; 0x16e6 <__year_to_secs+0x158>
    16d8:	24 36       	cpi	r18, 0x64	; 100
    16da:	31 05       	cpc	r19, r1
    16dc:	6c f0       	brlt	.+26     	; 0x16f8 <__year_to_secs+0x16a>
    16de:	84 56       	subi	r24, 0x64	; 100
    16e0:	91 09       	sbc	r25, r1
    16e2:	41 e0       	ldi	r20, 0x01	; 1
    16e4:	50 e0       	ldi	r21, 0x00	; 0
    16e6:	00 97       	sbiw	r24, 0x00	; 0
    16e8:	49 f4       	brne	.+18     	; 0x16fc <__year_to_secs+0x16e>
    16ea:	eb 81       	ldd	r30, Y+3	; 0x03
    16ec:	fc 81       	ldd	r31, Y+4	; 0x04
    16ee:	11 82       	std	Z+1, r1	; 0x01
    16f0:	10 82       	st	Z, r1
    16f2:	20 e0       	ldi	r18, 0x00	; 0
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	13 c0       	rjmp	.+38     	; 0x171e <__year_to_secs+0x190>
    16f8:	40 e0       	ldi	r20, 0x00	; 0
    16fa:	50 e0       	ldi	r21, 0x00	; 0
    16fc:	9c 01       	movw	r18, r24
    16fe:	36 95       	lsr	r19
    1700:	27 95       	ror	r18
    1702:	36 95       	lsr	r19
    1704:	27 95       	ror	r18
    1706:	83 70       	andi	r24, 0x03	; 3
    1708:	99 27       	eor	r25, r25
    170a:	61 e0       	ldi	r22, 0x01	; 1
    170c:	70 e0       	ldi	r23, 0x00	; 0
    170e:	89 2b       	or	r24, r25
    1710:	11 f0       	breq	.+4      	; 0x1716 <__year_to_secs+0x188>
    1712:	60 e0       	ldi	r22, 0x00	; 0
    1714:	70 e0       	ldi	r23, 0x00	; 0
    1716:	ab 81       	ldd	r26, Y+3	; 0x03
    1718:	bc 81       	ldd	r27, Y+4	; 0x04
    171a:	6d 93       	st	X+, r22
    171c:	7c 93       	st	X, r23
    171e:	81 e6       	ldi	r24, 0x61	; 97
    1720:	ed 81       	ldd	r30, Y+5	; 0x05
    1722:	fe 81       	ldd	r31, Y+6	; 0x06
    1724:	8e 9f       	mul	r24, r30
    1726:	b0 01       	movw	r22, r0
    1728:	8f 9f       	mul	r24, r31
    172a:	70 0d       	add	r23, r0
    172c:	11 24       	eor	r1, r1
    172e:	e8 e1       	ldi	r30, 0x18	; 24
    1730:	e4 9f       	mul	r30, r20
    1732:	c0 01       	movw	r24, r0
    1734:	e5 9f       	mul	r30, r21
    1736:	90 0d       	add	r25, r0
    1738:	11 24       	eor	r1, r1
    173a:	86 0f       	add	r24, r22
    173c:	97 1f       	adc	r25, r23
    173e:	ab 81       	ldd	r26, Y+3	; 0x03
    1740:	bc 81       	ldd	r27, Y+4	; 0x04
    1742:	4d 91       	ld	r20, X+
    1744:	5c 91       	ld	r21, X
    1746:	84 1b       	sub	r24, r20
    1748:	95 0b       	sbc	r25, r21
    174a:	82 0f       	add	r24, r18
    174c:	93 1f       	adc	r25, r19
    174e:	e9 2f       	mov	r30, r25
    1750:	ee 0f       	add	r30, r30
    1752:	ee 0b       	sbc	r30, r30
    1754:	20 e8       	ldi	r18, 0x80	; 128
    1756:	a2 2e       	mov	r10, r18
    1758:	31 e5       	ldi	r19, 0x51	; 81
    175a:	b3 2e       	mov	r11, r19
    175c:	cc 24       	eor	r12, r12
    175e:	c3 94       	inc	r12
    1760:	d1 2c       	mov	r13, r1
    1762:	e1 2c       	mov	r14, r1
    1764:	f1 2c       	mov	r15, r1
    1766:	00 e0       	ldi	r16, 0x00	; 0
    1768:	10 e0       	ldi	r17, 0x00	; 0
    176a:	9c 01       	movw	r18, r24
    176c:	4e 2f       	mov	r20, r30
    176e:	5e 2f       	mov	r21, r30
    1770:	6e 2f       	mov	r22, r30
    1772:	7e 2f       	mov	r23, r30
    1774:	8e 2f       	mov	r24, r30
    1776:	9e 2f       	mov	r25, r30
    1778:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <__muldi3>
    177c:	92 2e       	mov	r9, r18
    177e:	83 2e       	mov	r8, r19
    1780:	4b 83       	std	Y+3, r20	; 0x03
    1782:	5d 83       	std	Y+5, r21	; 0x05
    1784:	69 87       	std	Y+9, r22	; 0x09
    1786:	7a 87       	std	Y+10, r23	; 0x0a
    1788:	8b 87       	std	Y+11, r24	; 0x0b
    178a:	9c 87       	std	Y+12, r25	; 0x0c
    178c:	43 e3       	ldi	r20, 0x33	; 51
    178e:	b4 2e       	mov	r11, r20
    1790:	51 ee       	ldi	r21, 0xE1	; 225
    1792:	c5 2e       	mov	r12, r21
    1794:	dd 24       	eor	r13, r13
    1796:	d3 94       	inc	r13
    1798:	91 01       	movw	r18, r2
    179a:	a2 01       	movw	r20, r4
    179c:	b3 01       	movw	r22, r6
    179e:	8f 81       	ldd	r24, Y+7	; 0x07
    17a0:	98 85       	ldd	r25, Y+8	; 0x08
    17a2:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <__muldi3>
    17a6:	59 01       	movw	r10, r18
    17a8:	6a 01       	movw	r12, r20
    17aa:	7b 01       	movw	r14, r22
    17ac:	8c 01       	movw	r16, r24
    17ae:	29 2d       	mov	r18, r9
    17b0:	38 2d       	mov	r19, r8
    17b2:	4b 81       	ldd	r20, Y+3	; 0x03
    17b4:	5d 81       	ldd	r21, Y+5	; 0x05
    17b6:	69 85       	ldd	r22, Y+9	; 0x09
    17b8:	7a 85       	ldd	r23, Y+10	; 0x0a
    17ba:	8b 85       	ldd	r24, Y+11	; 0x0b
    17bc:	9c 85       	ldd	r25, Y+12	; 0x0c
    17be:	0e 94 ec 26 	call	0x4dd8	; 0x4dd8 <__adddi3>
    17c2:	3b 56       	subi	r19, 0x6B	; 107
    17c4:	41 49       	sbci	r20, 0x91	; 145
    17c6:	57 4c       	sbci	r21, 0xC7	; 199
    17c8:	6f 4f       	sbci	r22, 0xFF	; 255
    17ca:	7f 4f       	sbci	r23, 0xFF	; 255
    17cc:	8f 4f       	sbci	r24, 0xFF	; 255
    17ce:	9f 4f       	sbci	r25, 0xFF	; 255
    17d0:	a6 2f       	mov	r26, r22
    17d2:	f7 2f       	mov	r31, r23
    17d4:	e8 2f       	mov	r30, r24
    17d6:	6a 2f       	mov	r22, r26
    17d8:	7f 2f       	mov	r23, r31
    17da:	8e 2f       	mov	r24, r30
    17dc:	2c 96       	adiw	r28, 0x0c	; 12
    17de:	e2 e1       	ldi	r30, 0x12	; 18
    17e0:	0c 94 ed 22 	jmp	0x45da	; 0x45da <__epilogue_restores__>

Disassembly of section .text.__month_to_secs:

0000452c <__month_to_secs>:
    452c:	cf 93       	push	r28
    452e:	df 93       	push	r29
    4530:	9c 01       	movw	r18, r24
    4532:	eb 01       	movw	r28, r22
    4534:	88 0f       	add	r24, r24
    4536:	99 1f       	adc	r25, r25
    4538:	88 0f       	add	r24, r24
    453a:	99 1f       	adc	r25, r25
    453c:	09 2e       	mov	r0, r25
    453e:	00 0c       	add	r0, r0
    4540:	aa 0b       	sbc	r26, r26
    4542:	8d 50       	subi	r24, 0x0D	; 13
    4544:	9c 4f       	sbci	r25, 0xFC	; 252
    4546:	af 4f       	sbci	r26, 0xFF	; 255
    4548:	fc 01       	movw	r30, r24
    454a:	5a 2f       	mov	r21, r26
    454c:	0e 94 83 26 	call	0x4d06	; 0x4d06 <__xload_4>
    4550:	cd 2b       	or	r28, r29
    4552:	39 f0       	breq	.+14     	; 0x4562 <__month_to_secs+0x36>
    4554:	22 30       	cpi	r18, 0x02	; 2
    4556:	31 05       	cpc	r19, r1
    4558:	24 f0       	brlt	.+8      	; 0x4562 <__month_to_secs+0x36>
    455a:	60 58       	subi	r22, 0x80	; 128
    455c:	7e 4a       	sbci	r23, 0xAE	; 174
    455e:	8e 4f       	sbci	r24, 0xFE	; 254
    4560:	9f 4f       	sbci	r25, 0xFF	; 255
    4562:	df 91       	pop	r29
    4564:	cf 91       	pop	r28
    4566:	08 95       	ret

Disassembly of section .text.__secs_to_tm:

00000530 <__secs_to_tm>:
 530:	a6 e1       	ldi	r26, 0x16	; 22
 532:	b0 e0       	ldi	r27, 0x00	; 0
 534:	ee e9       	ldi	r30, 0x9E	; 158
 536:	f2 e0       	ldi	r31, 0x02	; 2
 538:	0c 94 d1 22 	jmp	0x45a2	; 0x45a2 <__prologue_saves__>
 53c:	79 01       	movw	r14, r18
 53e:	d4 2e       	mov	r13, r20
 540:	c5 2e       	mov	r12, r21
 542:	b6 2f       	mov	r27, r22
 544:	a7 2f       	mov	r26, r23
 546:	f8 2f       	mov	r31, r24
 548:	b9 2e       	mov	r11, r25
 54a:	40 58       	subi	r20, 0x80	; 128
 54c:	5d 4b       	sbci	r21, 0xBD	; 189
 54e:	6e 40       	sbci	r22, 0x0E	; 14
 550:	7f 4f       	sbci	r23, 0xFF	; 255
 552:	8f 4f       	sbci	r24, 0xFF	; 255
 554:	9f 4f       	sbci	r25, 0xFF	; 255
 556:	21 15       	cp	r18, r1
 558:	3b 47       	sbci	r19, 0x7B	; 123
 55a:	4d 41       	sbci	r20, 0x1D	; 29
 55c:	53 48       	sbci	r21, 0x83	; 131
 55e:	62 4e       	sbci	r22, 0xE2	; 226
 560:	71 40       	sbci	r23, 0x01	; 1
 562:	81 05       	cpc	r24, r1
 564:	91 05       	cpc	r25, r1
 566:	11 f0       	breq	.+4      	; 0x56c <__secs_to_tm+0x3c>
 568:	08 f0       	brcs	.+2      	; 0x56c <__secs_to_tm+0x3c>
 56a:	08 c2       	rjmp	.+1040   	; 0x97c <__EEPROM_REGION_LENGTH__+0x17c>
 56c:	18 8b       	std	Y+16, r17	; 0x10
 56e:	0f 87       	std	Y+15, r16	; 0x0f
 570:	9b 2d       	mov	r25, r11
 572:	8f 2f       	mov	r24, r31
 574:	7a 2f       	mov	r23, r26
 576:	6b 2f       	mov	r22, r27
 578:	5c 2d       	mov	r21, r12
 57a:	4d 2d       	mov	r20, r13
 57c:	97 01       	movw	r18, r14
 57e:	20 58       	subi	r18, 0x80	; 128
 580:	3d 45       	sbci	r19, 0x5D	; 93
 582:	4c 4b       	sbci	r20, 0xBC	; 188
 584:	58 43       	sbci	r21, 0x38	; 56
 586:	61 09       	sbc	r22, r1
 588:	71 09       	sbc	r23, r1
 58a:	81 09       	sbc	r24, r1
 58c:	91 09       	sbc	r25, r1
 58e:	19 01       	movw	r2, r18
 590:	4d 83       	std	Y+5, r20	; 0x05
 592:	59 87       	std	Y+9, r21	; 0x09
 594:	6d 87       	std	Y+13, r22	; 0x0d
 596:	79 83       	std	Y+1, r23	; 0x01
 598:	89 8b       	std	Y+17, r24	; 0x11
 59a:	9a 8b       	std	Y+18, r25	; 0x12
 59c:	f0 e8       	ldi	r31, 0x80	; 128
 59e:	af 2e       	mov	r10, r31
 5a0:	a1 e5       	ldi	r26, 0x51	; 81
 5a2:	ba 2e       	mov	r11, r26
 5a4:	cc 24       	eor	r12, r12
 5a6:	c3 94       	inc	r12
 5a8:	d1 2c       	mov	r13, r1
 5aa:	e1 2c       	mov	r14, r1
 5ac:	f1 2c       	mov	r15, r1
 5ae:	00 e0       	ldi	r16, 0x00	; 0
 5b0:	10 e0       	ldi	r17, 0x00	; 0
 5b2:	0e 94 1d 20 	call	0x403a	; 0x403a <__divdi3>
 5b6:	29 01       	movw	r4, r18
 5b8:	3a 01       	movw	r6, r20
 5ba:	4b 01       	movw	r8, r22
 5bc:	8e 8b       	std	Y+22, r24	; 0x16
 5be:	9b 8b       	std	Y+19, r25	; 0x13
 5c0:	91 01       	movw	r18, r2
 5c2:	4d 81       	ldd	r20, Y+5	; 0x05
 5c4:	59 85       	ldd	r21, Y+9	; 0x09
 5c6:	6d 85       	ldd	r22, Y+13	; 0x0d
 5c8:	79 81       	ldd	r23, Y+1	; 0x01
 5ca:	89 89       	ldd	r24, Y+17	; 0x11
 5cc:	9a 89       	ldd	r25, Y+18	; 0x12
 5ce:	0e 94 1b 20 	call	0x4036	; 0x4036 <__moddi3>
 5d2:	2d 83       	std	Y+5, r18	; 0x05
 5d4:	3e 83       	std	Y+6, r19	; 0x06
 5d6:	4f 83       	std	Y+7, r20	; 0x07
 5d8:	58 87       	std	Y+8, r21	; 0x08
 5da:	8d 81       	ldd	r24, Y+5	; 0x05
 5dc:	9e 81       	ldd	r25, Y+6	; 0x06
 5de:	af 81       	ldd	r26, Y+7	; 0x07
 5e0:	b8 85       	ldd	r27, Y+8	; 0x08
 5e2:	b7 ff       	sbrs	r27, 7
 5e4:	15 c0       	rjmp	.+42     	; 0x610 <__secs_to_tm+0xe0>
 5e6:	80 58       	subi	r24, 0x80	; 128
 5e8:	9e 4a       	sbci	r25, 0xAE	; 174
 5ea:	ae 4f       	sbci	r26, 0xFE	; 254
 5ec:	bf 4f       	sbci	r27, 0xFF	; 255
 5ee:	8d 83       	std	Y+5, r24	; 0x05
 5f0:	9e 83       	std	Y+6, r25	; 0x06
 5f2:	af 83       	std	Y+7, r26	; 0x07
 5f4:	b8 87       	std	Y+8, r27	; 0x08
 5f6:	92 01       	movw	r18, r4
 5f8:	a3 01       	movw	r20, r6
 5fa:	b4 01       	movw	r22, r8
 5fc:	8e 89       	ldd	r24, Y+22	; 0x16
 5fe:	9b 89       	ldd	r25, Y+19	; 0x13
 600:	af ef       	ldi	r26, 0xFF	; 255
 602:	0e 94 8f 26 	call	0x4d1e	; 0x4d1e <__adddi3_s8>
 606:	29 01       	movw	r4, r18
 608:	3a 01       	movw	r6, r20
 60a:	4b 01       	movw	r8, r22
 60c:	8e 8b       	std	Y+22, r24	; 0x16
 60e:	9b 8b       	std	Y+19, r25	; 0x13
 610:	92 01       	movw	r18, r4
 612:	a3 01       	movw	r20, r6
 614:	b4 01       	movw	r22, r8
 616:	8e 89       	ldd	r24, Y+22	; 0x16
 618:	9b 89       	ldd	r25, Y+19	; 0x13
 61a:	a3 e0       	ldi	r26, 0x03	; 3
 61c:	0e 94 8f 26 	call	0x4d1e	; 0x4d1e <__adddi3_s8>
 620:	e7 e0       	ldi	r30, 0x07	; 7
 622:	ae 2e       	mov	r10, r30
 624:	b1 2c       	mov	r11, r1
 626:	c1 2c       	mov	r12, r1
 628:	d1 2c       	mov	r13, r1
 62a:	e1 2c       	mov	r14, r1
 62c:	f1 2c       	mov	r15, r1
 62e:	00 e0       	ldi	r16, 0x00	; 0
 630:	10 e0       	ldi	r17, 0x00	; 0
 632:	0e 94 1b 20 	call	0x4036	; 0x4036 <__moddi3>
 636:	2d 87       	std	Y+13, r18	; 0x0d
 638:	3e 87       	std	Y+14, r19	; 0x0e
 63a:	ad 85       	ldd	r26, Y+13	; 0x0d
 63c:	be 85       	ldd	r27, Y+14	; 0x0e
 63e:	b7 ff       	sbrs	r27, 7
 640:	03 c0       	rjmp	.+6      	; 0x648 <__secs_to_tm+0x118>
 642:	17 96       	adiw	r26, 0x07	; 7
 644:	be 87       	std	Y+14, r27	; 0x0e
 646:	ad 87       	std	Y+13, r26	; 0x0d
 648:	51 eb       	ldi	r21, 0xB1	; 177
 64a:	a5 2e       	mov	r10, r21
 64c:	6a e3       	ldi	r22, 0x3A	; 58
 64e:	b6 2e       	mov	r11, r22
 650:	72 e0       	ldi	r23, 0x02	; 2
 652:	c7 2e       	mov	r12, r23
 654:	d1 2c       	mov	r13, r1
 656:	e1 2c       	mov	r14, r1
 658:	f1 2c       	mov	r15, r1
 65a:	00 e0       	ldi	r16, 0x00	; 0
 65c:	10 e0       	ldi	r17, 0x00	; 0
 65e:	92 01       	movw	r18, r4
 660:	a3 01       	movw	r20, r6
 662:	b4 01       	movw	r22, r8
 664:	8e 89       	ldd	r24, Y+22	; 0x16
 666:	9b 89       	ldd	r25, Y+19	; 0x13
 668:	0e 94 1d 20 	call	0x403a	; 0x403a <__divdi3>
 66c:	29 87       	std	Y+9, r18	; 0x09
 66e:	3a 87       	std	Y+10, r19	; 0x0a
 670:	4b 87       	std	Y+11, r20	; 0x0b
 672:	5c 87       	std	Y+12, r21	; 0x0c
 674:	92 01       	movw	r18, r4
 676:	a3 01       	movw	r20, r6
 678:	b4 01       	movw	r22, r8
 67a:	8e 89       	ldd	r24, Y+22	; 0x16
 67c:	9b 89       	ldd	r25, Y+19	; 0x13
 67e:	0e 94 1b 20 	call	0x4036	; 0x4036 <__moddi3>
 682:	82 2e       	mov	r8, r18
 684:	93 2e       	mov	r9, r19
 686:	a4 2e       	mov	r10, r20
 688:	b5 2e       	mov	r11, r21
 68a:	b7 fe       	sbrs	r11, 7
 68c:	12 c0       	rjmp	.+36     	; 0x6b2 <__secs_to_tm+0x182>
 68e:	b1 eb       	ldi	r27, 0xB1	; 177
 690:	8b 0e       	add	r8, r27
 692:	ba e3       	ldi	r27, 0x3A	; 58
 694:	9b 1e       	adc	r9, r27
 696:	b2 e0       	ldi	r27, 0x02	; 2
 698:	ab 1e       	adc	r10, r27
 69a:	b1 1c       	adc	r11, r1
 69c:	89 85       	ldd	r24, Y+9	; 0x09
 69e:	9a 85       	ldd	r25, Y+10	; 0x0a
 6a0:	ab 85       	ldd	r26, Y+11	; 0x0b
 6a2:	bc 85       	ldd	r27, Y+12	; 0x0c
 6a4:	01 97       	sbiw	r24, 0x01	; 1
 6a6:	a1 09       	sbc	r26, r1
 6a8:	b1 09       	sbc	r27, r1
 6aa:	89 87       	std	Y+9, r24	; 0x09
 6ac:	9a 87       	std	Y+10, r25	; 0x0a
 6ae:	ab 87       	std	Y+11, r26	; 0x0b
 6b0:	bc 87       	std	Y+12, r27	; 0x0c
 6b2:	c5 01       	movw	r24, r10
 6b4:	b4 01       	movw	r22, r8
 6b6:	2c ea       	ldi	r18, 0xAC	; 172
 6b8:	3e e8       	ldi	r19, 0x8E	; 142
 6ba:	40 e0       	ldi	r20, 0x00	; 0
 6bc:	50 e0       	ldi	r21, 0x00	; 0
 6be:	0e 94 b9 23 	call	0x4772	; 0x4772 <__divmodsi4>
 6c2:	69 01       	movw	r12, r18
 6c4:	7a 01       	movw	r14, r20
 6c6:	24 30       	cpi	r18, 0x04	; 4
 6c8:	31 05       	cpc	r19, r1
 6ca:	41 05       	cpc	r20, r1
 6cc:	51 05       	cpc	r21, r1
 6ce:	29 f4       	brne	.+10     	; 0x6da <__secs_to_tm+0x1aa>
 6d0:	43 e0       	ldi	r20, 0x03	; 3
 6d2:	c4 2e       	mov	r12, r20
 6d4:	d1 2c       	mov	r13, r1
 6d6:	e1 2c       	mov	r14, r1
 6d8:	f1 2c       	mov	r15, r1
 6da:	a4 e5       	ldi	r26, 0x54	; 84
 6dc:	b1 e7       	ldi	r27, 0x71	; 113
 6de:	a7 01       	movw	r20, r14
 6e0:	96 01       	movw	r18, r12
 6e2:	0e 94 11 27 	call	0x4e22	; 0x4e22 <__mulohisi3>
 6e6:	2b 01       	movw	r4, r22
 6e8:	3c 01       	movw	r6, r24
 6ea:	48 0c       	add	r4, r8
 6ec:	59 1c       	adc	r5, r9
 6ee:	6a 1c       	adc	r6, r10
 6f0:	7b 1c       	adc	r7, r11
 6f2:	c3 01       	movw	r24, r6
 6f4:	b2 01       	movw	r22, r4
 6f6:	25 eb       	ldi	r18, 0xB5	; 181
 6f8:	35 e0       	ldi	r19, 0x05	; 5
 6fa:	40 e0       	ldi	r20, 0x00	; 0
 6fc:	50 e0       	ldi	r21, 0x00	; 0
 6fe:	0e 94 b9 23 	call	0x4772	; 0x4772 <__divmodsi4>
 702:	49 01       	movw	r8, r18
 704:	5a 01       	movw	r10, r20
 706:	29 31       	cpi	r18, 0x19	; 25
 708:	31 05       	cpc	r19, r1
 70a:	41 05       	cpc	r20, r1
 70c:	51 05       	cpc	r21, r1
 70e:	29 f4       	brne	.+10     	; 0x71a <__secs_to_tm+0x1ea>
 710:	38 e1       	ldi	r19, 0x18	; 24
 712:	83 2e       	mov	r8, r19
 714:	91 2c       	mov	r9, r1
 716:	a1 2c       	mov	r10, r1
 718:	b1 2c       	mov	r11, r1
 71a:	ab e4       	ldi	r26, 0x4B	; 75
 71c:	ba ef       	ldi	r27, 0xFA	; 250
 71e:	a5 01       	movw	r20, r10
 720:	94 01       	movw	r18, r8
 722:	0e 94 11 27 	call	0x4e22	; 0x4e22 <__mulohisi3>
 726:	46 0e       	add	r4, r22
 728:	57 1e       	adc	r5, r23
 72a:	68 1e       	adc	r6, r24
 72c:	79 1e       	adc	r7, r25
 72e:	c3 01       	movw	r24, r6
 730:	b2 01       	movw	r22, r4
 732:	2d e6       	ldi	r18, 0x6D	; 109
 734:	31 e0       	ldi	r19, 0x01	; 1
 736:	40 e0       	ldi	r20, 0x00	; 0
 738:	50 e0       	ldi	r21, 0x00	; 0
 73a:	0e 94 b9 23 	call	0x4772	; 0x4772 <__divmodsi4>
 73e:	29 83       	std	Y+1, r18	; 0x01
 740:	3a 83       	std	Y+2, r19	; 0x02
 742:	4b 83       	std	Y+3, r20	; 0x03
 744:	5c 83       	std	Y+4, r21	; 0x04
 746:	24 30       	cpi	r18, 0x04	; 4
 748:	31 05       	cpc	r19, r1
 74a:	41 05       	cpc	r20, r1
 74c:	51 05       	cpc	r21, r1
 74e:	41 f4       	brne	.+16     	; 0x760 <__secs_to_tm+0x230>
 750:	83 e0       	ldi	r24, 0x03	; 3
 752:	90 e0       	ldi	r25, 0x00	; 0
 754:	a0 e0       	ldi	r26, 0x00	; 0
 756:	b0 e0       	ldi	r27, 0x00	; 0
 758:	89 83       	std	Y+1, r24	; 0x01
 75a:	9a 83       	std	Y+2, r25	; 0x02
 75c:	ab 83       	std	Y+3, r26	; 0x03
 75e:	bc 83       	std	Y+4, r27	; 0x04
 760:	a3 e9       	ldi	r26, 0x93	; 147
 762:	be ef       	ldi	r27, 0xFE	; 254
 764:	29 81       	ldd	r18, Y+1	; 0x01
 766:	3a 81       	ldd	r19, Y+2	; 0x02
 768:	4b 81       	ldd	r20, Y+3	; 0x03
 76a:	5c 81       	ldd	r21, Y+4	; 0x04
 76c:	0e 94 11 27 	call	0x4e22	; 0x4e22 <__mulohisi3>
 770:	46 0e       	add	r4, r22
 772:	57 1e       	adc	r5, r23
 774:	68 1e       	adc	r6, r24
 776:	79 1e       	adc	r7, r25
 778:	23 2b       	or	r18, r19
 77a:	24 2b       	or	r18, r20
 77c:	25 2b       	or	r18, r21
 77e:	81 f4       	brne	.+32     	; 0x7a0 <__secs_to_tm+0x270>
 780:	81 14       	cp	r8, r1
 782:	91 04       	cpc	r9, r1
 784:	a1 04       	cpc	r10, r1
 786:	b1 04       	cpc	r11, r1
 788:	71 f4       	brne	.+28     	; 0x7a6 <__secs_to_tm+0x276>
 78a:	31 e0       	ldi	r19, 0x01	; 1
 78c:	20 e0       	ldi	r18, 0x00	; 0
 78e:	c1 14       	cp	r12, r1
 790:	d1 04       	cpc	r13, r1
 792:	e1 04       	cpc	r14, r1
 794:	f1 04       	cpc	r15, r1
 796:	09 f0       	breq	.+2      	; 0x79a <__secs_to_tm+0x26a>
 798:	30 e0       	ldi	r19, 0x00	; 0
 79a:	83 2f       	mov	r24, r19
 79c:	92 2f       	mov	r25, r18
 79e:	05 c0       	rjmp	.+10     	; 0x7aa <__secs_to_tm+0x27a>
 7a0:	80 e0       	ldi	r24, 0x00	; 0
 7a2:	90 e0       	ldi	r25, 0x00	; 0
 7a4:	02 c0       	rjmp	.+4      	; 0x7aa <__secs_to_tm+0x27a>
 7a6:	81 e0       	ldi	r24, 0x01	; 1
 7a8:	90 e0       	ldi	r25, 0x00	; 0
 7aa:	12 01       	movw	r2, r4
 7ac:	ab e3       	ldi	r26, 0x3B	; 59
 7ae:	2a 0e       	add	r2, r26
 7b0:	31 1c       	adc	r3, r1
 7b2:	28 0e       	add	r2, r24
 7b4:	39 1e       	adc	r3, r25
 7b6:	9c 01       	movw	r18, r24
 7b8:	24 59       	subi	r18, 0x94	; 148
 7ba:	3e 4f       	sbci	r19, 0xFE	; 254
 7bc:	22 15       	cp	r18, r2
 7be:	33 05       	cpc	r19, r3
 7c0:	24 f4       	brge	.+8      	; 0x7ca <__secs_to_tm+0x29a>
 7c2:	83 59       	subi	r24, 0x93	; 147
 7c4:	9e 4f       	sbci	r25, 0xFE	; 254
 7c6:	28 1a       	sub	r2, r24
 7c8:	39 0a       	sbc	r3, r25
 7ca:	92 e0       	ldi	r25, 0x02	; 2
 7cc:	88 0c       	add	r8, r8
 7ce:	99 1c       	adc	r9, r9
 7d0:	aa 1c       	adc	r10, r10
 7d2:	bb 1c       	adc	r11, r11
 7d4:	9a 95       	dec	r25
 7d6:	d1 f7       	brne	.-12     	; 0x7cc <__secs_to_tm+0x29c>
 7d8:	89 81       	ldd	r24, Y+1	; 0x01
 7da:	9a 81       	ldd	r25, Y+2	; 0x02
 7dc:	ab 81       	ldd	r26, Y+3	; 0x03
 7de:	bc 81       	ldd	r27, Y+4	; 0x04
 7e0:	88 0e       	add	r8, r24
 7e2:	99 1e       	adc	r9, r25
 7e4:	aa 1e       	adc	r10, r26
 7e6:	bb 1e       	adc	r11, r27
 7e8:	a4 e6       	ldi	r26, 0x64	; 100
 7ea:	b0 e0       	ldi	r27, 0x00	; 0
 7ec:	a7 01       	movw	r20, r14
 7ee:	96 01       	movw	r18, r12
 7f0:	0e 94 b1 26 	call	0x4d62	; 0x4d62 <__muluhisi3>
 7f4:	86 0e       	add	r8, r22
 7f6:	97 1e       	adc	r9, r23
 7f8:	a8 1e       	adc	r10, r24
 7fa:	b9 1e       	adc	r11, r25
 7fc:	d5 01       	movw	r26, r10
 7fe:	c4 01       	movw	r24, r8
 800:	bb 0f       	add	r27, r27
 802:	88 0b       	sbc	r24, r24
 804:	98 2f       	mov	r25, r24
 806:	dc 01       	movw	r26, r24
 808:	89 83       	std	Y+1, r24	; 0x01
 80a:	9a 83       	std	Y+2, r25	; 0x02
 80c:	ab 83       	std	Y+3, r26	; 0x03
 80e:	bc 83       	std	Y+4, r27	; 0x04
 810:	69 85       	ldd	r22, Y+9	; 0x09
 812:	7a 85       	ldd	r23, Y+10	; 0x0a
 814:	8b 85       	ldd	r24, Y+11	; 0x0b
 816:	9c 85       	ldd	r25, Y+12	; 0x0c
 818:	20 e9       	ldi	r18, 0x90	; 144
 81a:	31 e0       	ldi	r19, 0x01	; 1
 81c:	40 e0       	ldi	r20, 0x00	; 0
 81e:	50 e0       	ldi	r21, 0x00	; 0
 820:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <__mulsidi3>
 824:	f2 2f       	mov	r31, r18
 826:	e3 2f       	mov	r30, r19
 828:	6a 01       	movw	r12, r20
 82a:	7b 01       	movw	r14, r22
 82c:	8c 01       	movw	r16, r24
 82e:	94 01       	movw	r18, r8
 830:	a5 01       	movw	r20, r10
 832:	69 81       	ldd	r22, Y+1	; 0x01
 834:	76 2f       	mov	r23, r22
 836:	86 2f       	mov	r24, r22
 838:	96 2f       	mov	r25, r22
 83a:	af 2e       	mov	r10, r31
 83c:	be 2e       	mov	r11, r30
 83e:	0e 94 ec 26 	call	0x4dd8	; 0x4dd8 <__adddi3>
 842:	49 01       	movw	r8, r18
 844:	5a 01       	movw	r10, r20
 846:	6b 01       	movw	r12, r22
 848:	7c 01       	movw	r14, r24
 84a:	2d ea       	ldi	r18, 0xAD	; 173
 84c:	34 e0       	ldi	r19, 0x04	; 4
 84e:	40 e0       	ldi	r20, 0x00	; 0
 850:	1a 82       	std	Y+2, r1	; 0x02
 852:	19 82       	std	Y+1, r1	; 0x01
 854:	f9 01       	movw	r30, r18
 856:	84 91       	lpm	r24, Z
 858:	47 fd       	sbrc	r20, 7
 85a:	80 81       	ld	r24, Z
 85c:	08 2e       	mov	r0, r24
 85e:	00 0c       	add	r0, r0
 860:	99 0b       	sbc	r25, r25
 862:	aa 0b       	sbc	r26, r26
 864:	bb 0b       	sbc	r27, r27
 866:	2f 5f       	subi	r18, 0xFF	; 255
 868:	3f 4f       	sbci	r19, 0xFF	; 255
 86a:	4f 4f       	sbci	r20, 0xFF	; 255
 86c:	48 16       	cp	r4, r24
 86e:	59 06       	cpc	r5, r25
 870:	6a 06       	cpc	r6, r26
 872:	7b 06       	cpc	r7, r27
 874:	54 f0       	brlt	.+20     	; 0x88a <__EEPROM_REGION_LENGTH__+0x8a>
 876:	48 1a       	sub	r4, r24
 878:	59 0a       	sbc	r5, r25
 87a:	6a 0a       	sbc	r6, r26
 87c:	7b 0a       	sbc	r7, r27
 87e:	a9 81       	ldd	r26, Y+1	; 0x01
 880:	ba 81       	ldd	r27, Y+2	; 0x02
 882:	11 96       	adiw	r26, 0x01	; 1
 884:	ba 83       	std	Y+2, r27	; 0x02
 886:	a9 83       	std	Y+1, r26	; 0x01
 888:	e5 cf       	rjmp	.-54     	; 0x854 <__EEPROM_REGION_LENGTH__+0x54>
 88a:	e9 81       	ldd	r30, Y+1	; 0x01
 88c:	fa 81       	ldd	r31, Y+2	; 0x02
 88e:	ea 30       	cpi	r30, 0x0A	; 10
 890:	f1 05       	cpc	r31, r1
 892:	74 f0       	brlt	.+28     	; 0x8b0 <__EEPROM_REGION_LENGTH__+0xb0>
 894:	3c 97       	sbiw	r30, 0x0c	; 12
 896:	fa 83       	std	Y+2, r31	; 0x02
 898:	e9 83       	std	Y+1, r30	; 0x01
 89a:	94 01       	movw	r18, r8
 89c:	a5 01       	movw	r20, r10
 89e:	b6 01       	movw	r22, r12
 8a0:	c7 01       	movw	r24, r14
 8a2:	a1 e0       	ldi	r26, 0x01	; 1
 8a4:	0e 94 8f 26 	call	0x4d1e	; 0x4d1e <__adddi3_s8>
 8a8:	49 01       	movw	r8, r18
 8aa:	5a 01       	movw	r10, r20
 8ac:	6b 01       	movw	r12, r22
 8ae:	7c 01       	movw	r14, r24
 8b0:	94 01       	movw	r18, r8
 8b2:	a5 01       	movw	r20, r10
 8b4:	b6 01       	movw	r22, r12
 8b6:	c7 01       	movw	r24, r14
 8b8:	2c 59       	subi	r18, 0x9C	; 156
 8ba:	3f 47       	sbci	r19, 0x7F	; 127
 8bc:	4f 4f       	sbci	r20, 0xFF	; 255
 8be:	5f 4f       	sbci	r21, 0xFF	; 255
 8c0:	6f 4f       	sbci	r22, 0xFF	; 255
 8c2:	7f 4f       	sbci	r23, 0xFF	; 255
 8c4:	8f 4f       	sbci	r24, 0xFF	; 255
 8c6:	9f 4f       	sbci	r25, 0xFF	; 255
 8c8:	2f 3f       	cpi	r18, 0xFF	; 255
 8ca:	3f 4f       	sbci	r19, 0xFF	; 255
 8cc:	41 05       	cpc	r20, r1
 8ce:	51 05       	cpc	r21, r1
 8d0:	61 05       	cpc	r22, r1
 8d2:	71 05       	cpc	r23, r1
 8d4:	81 05       	cpc	r24, r1
 8d6:	91 05       	cpc	r25, r1
 8d8:	11 f0       	breq	.+4      	; 0x8de <__EEPROM_REGION_LENGTH__+0xde>
 8da:	08 f0       	brcs	.+2      	; 0x8de <__EEPROM_REGION_LENGTH__+0xde>
 8dc:	4f c0       	rjmp	.+158    	; 0x97c <__EEPROM_REGION_LENGTH__+0x17c>
 8de:	24 e6       	ldi	r18, 0x64	; 100
 8e0:	82 0e       	add	r8, r18
 8e2:	91 1c       	adc	r9, r1
 8e4:	af 85       	ldd	r26, Y+15	; 0x0f
 8e6:	b8 89       	ldd	r27, Y+16	; 0x10
 8e8:	1b 96       	adiw	r26, 0x0b	; 11
 8ea:	9c 92       	st	X, r9
 8ec:	8e 92       	st	-X, r8
 8ee:	1a 97       	sbiw	r26, 0x0a	; 10
 8f0:	e9 81       	ldd	r30, Y+1	; 0x01
 8f2:	fa 81       	ldd	r31, Y+2	; 0x02
 8f4:	32 96       	adiw	r30, 0x02	; 2
 8f6:	19 96       	adiw	r26, 0x09	; 9
 8f8:	fc 93       	st	X, r31
 8fa:	ee 93       	st	-X, r30
 8fc:	18 97       	sbiw	r26, 0x08	; 8
 8fe:	ff ef       	ldi	r31, 0xFF	; 255
 900:	4f 1a       	sub	r4, r31
 902:	5f 0a       	sbc	r5, r31
 904:	17 96       	adiw	r26, 0x07	; 7
 906:	5c 92       	st	X, r5
 908:	4e 92       	st	-X, r4
 90a:	16 97       	sbiw	r26, 0x06	; 6
 90c:	8d 85       	ldd	r24, Y+13	; 0x0d
 90e:	9e 85       	ldd	r25, Y+14	; 0x0e
 910:	1d 96       	adiw	r26, 0x0d	; 13
 912:	9c 93       	st	X, r25
 914:	8e 93       	st	-X, r24
 916:	1c 97       	sbiw	r26, 0x0c	; 12
 918:	1f 96       	adiw	r26, 0x0f	; 15
 91a:	3c 92       	st	X, r3
 91c:	2e 92       	st	-X, r2
 91e:	1e 97       	sbiw	r26, 0x0e	; 14
 920:	6d 81       	ldd	r22, Y+5	; 0x05
 922:	7e 81       	ldd	r23, Y+6	; 0x06
 924:	8f 81       	ldd	r24, Y+7	; 0x07
 926:	98 85       	ldd	r25, Y+8	; 0x08
 928:	20 e1       	ldi	r18, 0x10	; 16
 92a:	3e e0       	ldi	r19, 0x0E	; 14
 92c:	40 e0       	ldi	r20, 0x00	; 0
 92e:	50 e0       	ldi	r21, 0x00	; 0
 930:	0e 94 b9 23 	call	0x4772	; 0x4772 <__divmodsi4>
 934:	af 85       	ldd	r26, Y+15	; 0x0f
 936:	b8 89       	ldd	r27, Y+16	; 0x10
 938:	15 96       	adiw	r26, 0x05	; 5
 93a:	3c 93       	st	X, r19
 93c:	2e 93       	st	-X, r18
 93e:	14 97       	sbiw	r26, 0x04	; 4
 940:	8c e3       	ldi	r24, 0x3C	; 60
 942:	c8 2e       	mov	r12, r24
 944:	d1 2c       	mov	r13, r1
 946:	e1 2c       	mov	r14, r1
 948:	f1 2c       	mov	r15, r1
 94a:	6d 81       	ldd	r22, Y+5	; 0x05
 94c:	7e 81       	ldd	r23, Y+6	; 0x06
 94e:	8f 81       	ldd	r24, Y+7	; 0x07
 950:	98 85       	ldd	r25, Y+8	; 0x08
 952:	a7 01       	movw	r20, r14
 954:	96 01       	movw	r18, r12
 956:	0e 94 b9 23 	call	0x4772	; 0x4772 <__divmodsi4>
 95a:	4b 01       	movw	r8, r22
 95c:	5c 01       	movw	r10, r24
 95e:	ca 01       	movw	r24, r20
 960:	b9 01       	movw	r22, r18
 962:	a7 01       	movw	r20, r14
 964:	96 01       	movw	r18, r12
 966:	0e 94 b9 23 	call	0x4772	; 0x4772 <__divmodsi4>
 96a:	ef 85       	ldd	r30, Y+15	; 0x0f
 96c:	f8 89       	ldd	r31, Y+16	; 0x10
 96e:	73 83       	std	Z+3, r23	; 0x03
 970:	62 83       	std	Z+2, r22	; 0x02
 972:	91 82       	std	Z+1, r9	; 0x01
 974:	80 82       	st	Z, r8
 976:	80 e0       	ldi	r24, 0x00	; 0
 978:	90 e0       	ldi	r25, 0x00	; 0
 97a:	02 c0       	rjmp	.+4      	; 0x980 <__EEPROM_REGION_LENGTH__+0x180>
 97c:	8f ef       	ldi	r24, 0xFF	; 255
 97e:	9f ef       	ldi	r25, 0xFF	; 255
 980:	66 96       	adiw	r28, 0x16	; 22
 982:	e2 e1       	ldi	r30, 0x12	; 18
 984:	0c 94 ed 22 	jmp	0x45da	; 0x45da <__epilogue_restores__>

Disassembly of section .text.libgcc.div:

0000491a <__divmodhi4>:
    491a:	97 fb       	bst	r25, 7
    491c:	07 2e       	mov	r0, r23
    491e:	16 f4       	brtc	.+4      	; 0x4924 <__divmodhi4+0xa>
    4920:	00 94       	com	r0
    4922:	07 d0       	rcall	.+14     	; 0x4932 <__divmodhi4_neg1>
    4924:	77 fd       	sbrc	r23, 7
    4926:	09 d0       	rcall	.+18     	; 0x493a <__divmodhi4_neg2>
    4928:	0e 94 79 24 	call	0x48f2	; 0x48f2 <__udivmodhi4>
    492c:	07 fc       	sbrc	r0, 7
    492e:	05 d0       	rcall	.+10     	; 0x493a <__divmodhi4_neg2>
    4930:	3e f4       	brtc	.+14     	; 0x4940 <__divmodhi4_exit>

00004932 <__divmodhi4_neg1>:
    4932:	90 95       	com	r25
    4934:	81 95       	neg	r24
    4936:	9f 4f       	sbci	r25, 0xFF	; 255
    4938:	08 95       	ret

0000493a <__divmodhi4_neg2>:
    493a:	70 95       	com	r23
    493c:	61 95       	neg	r22
    493e:	7f 4f       	sbci	r23, 0xFF	; 255

00004940 <__divmodhi4_exit>:
    4940:	08 95       	ret

Disassembly of section .text.libgcc.mul:

000035ea <__muldi3>:
    35ea:	df 93       	push	r29
    35ec:	cf 93       	push	r28
    35ee:	1f 93       	push	r17
    35f0:	0f 93       	push	r16
    35f2:	9a 9d       	mul	r25, r10
    35f4:	f0 2d       	mov	r31, r0
    35f6:	21 9f       	mul	r18, r17
    35f8:	f0 0d       	add	r31, r0
    35fa:	8b 9d       	mul	r24, r11
    35fc:	f0 0d       	add	r31, r0
    35fe:	8a 9d       	mul	r24, r10
    3600:	e0 2d       	mov	r30, r0
    3602:	f1 0d       	add	r31, r1
    3604:	03 9f       	mul	r16, r19
    3606:	f0 0d       	add	r31, r0
    3608:	02 9f       	mul	r16, r18
    360a:	e0 0d       	add	r30, r0
    360c:	f1 1d       	adc	r31, r1
    360e:	4e 9d       	mul	r20, r14
    3610:	e0 0d       	add	r30, r0
    3612:	f1 1d       	adc	r31, r1
    3614:	5e 9d       	mul	r21, r14
    3616:	f0 0d       	add	r31, r0
    3618:	4f 9d       	mul	r20, r15
    361a:	f0 0d       	add	r31, r0
    361c:	7f 93       	push	r23
    361e:	6f 93       	push	r22
    3620:	bf 92       	push	r11
    3622:	af 92       	push	r10
    3624:	5f 93       	push	r21
    3626:	4f 93       	push	r20
    3628:	d5 01       	movw	r26, r10
    362a:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <__umulhisi3>
    362e:	8b 01       	movw	r16, r22
    3630:	ac 01       	movw	r20, r24
    3632:	d7 01       	movw	r26, r14
    3634:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <__umulhisi3>
    3638:	eb 01       	movw	r28, r22
    363a:	e8 0f       	add	r30, r24
    363c:	f9 1f       	adc	r31, r25
    363e:	d6 01       	movw	r26, r12
    3640:	0e 94 e3 26 	call	0x4dc6	; 0x4dc6 <__muldi3_6>
    3644:	2f 91       	pop	r18
    3646:	3f 91       	pop	r19
    3648:	d6 01       	movw	r26, r12
    364a:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <__umulhisi3>
    364e:	c6 0f       	add	r28, r22
    3650:	d7 1f       	adc	r29, r23
    3652:	e8 1f       	adc	r30, r24
    3654:	f9 1f       	adc	r31, r25
    3656:	af 91       	pop	r26
    3658:	bf 91       	pop	r27
    365a:	0e 94 e3 26 	call	0x4dc6	; 0x4dc6 <__muldi3_6>
    365e:	2f 91       	pop	r18
    3660:	3f 91       	pop	r19
    3662:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <__umulhisi3>
    3666:	c6 0f       	add	r28, r22
    3668:	d7 1f       	adc	r29, r23
    366a:	e8 1f       	adc	r30, r24
    366c:	f9 1f       	adc	r31, r25
    366e:	d6 01       	movw	r26, r12
    3670:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <__umulhisi3>
    3674:	e6 0f       	add	r30, r22
    3676:	f7 1f       	adc	r31, r23
    3678:	98 01       	movw	r18, r16
    367a:	be 01       	movw	r22, r28
    367c:	cf 01       	movw	r24, r30
    367e:	11 24       	eor	r1, r1
    3680:	0f 91       	pop	r16
    3682:	1f 91       	pop	r17
    3684:	cf 91       	pop	r28
    3686:	df 91       	pop	r29
    3688:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00004dc6 <__muldi3_6>:
    4dc6:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <__umulhisi3>
    4dca:	46 0f       	add	r20, r22
    4dcc:	57 1f       	adc	r21, r23
    4dce:	c8 1f       	adc	r28, r24
    4dd0:	d9 1f       	adc	r29, r25
    4dd2:	08 f4       	brcc	.+2      	; 0x4dd6 <__muldi3_6+0x10>
    4dd4:	31 96       	adiw	r30, 0x01	; 1
    4dd6:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00004c9a <__mulsidi3>:
    4c9a:	97 fb       	bst	r25, 7
    4c9c:	57 ff       	sbrs	r21, 7
    4c9e:	0c 94 d0 20 	jmp	0x41a0	; 0x41a0 <__umulsidi3_helper>
    4ca2:	9f 93       	push	r25
    4ca4:	8f 93       	push	r24
    4ca6:	0e 94 d0 20 	call	0x41a0	; 0x41a0 <__umulsidi3_helper>
    4caa:	6e 1b       	sub	r22, r30
    4cac:	7f 0b       	sbc	r23, r31
    4cae:	af 91       	pop	r26
    4cb0:	bf 91       	pop	r27
    4cb2:	8a 0b       	sbc	r24, r26
    4cb4:	9b 0b       	sbc	r25, r27
    4cb6:	08 95       	ret

Disassembly of section .text.libgcc.mul:

0000419e <__umulsidi3>:
    419e:	e8 94       	clt

000041a0 <__umulsidi3_helper>:
    41a0:	df 93       	push	r29
    41a2:	cf 93       	push	r28
    41a4:	fc 01       	movw	r30, r24
    41a6:	db 01       	movw	r26, r22
    41a8:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <__umulhisi3>
    41ac:	7f 93       	push	r23
    41ae:	6f 93       	push	r22
    41b0:	e9 01       	movw	r28, r18
    41b2:	9a 01       	movw	r18, r20
    41b4:	ac 01       	movw	r20, r24
    41b6:	bf 93       	push	r27
    41b8:	af 93       	push	r26
    41ba:	3f 93       	push	r19
    41bc:	2f 93       	push	r18
    41be:	df 01       	movw	r26, r30
    41c0:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <__umulhisi3>
    41c4:	26 f4       	brtc	.+8      	; 0x41ce <__umulsidi3_helper+0x2e>
    41c6:	6c 1b       	sub	r22, r28
    41c8:	7d 0b       	sbc	r23, r29
    41ca:	82 0b       	sbc	r24, r18
    41cc:	93 0b       	sbc	r25, r19
    41ce:	9e 01       	movw	r18, r28
    41d0:	eb 01       	movw	r28, r22
    41d2:	fc 01       	movw	r30, r24
    41d4:	0e 94 e3 26 	call	0x4dc6	; 0x4dc6 <__muldi3_6>
    41d8:	af 91       	pop	r26
    41da:	bf 91       	pop	r27
    41dc:	2f 91       	pop	r18
    41de:	3f 91       	pop	r19
    41e0:	0e 94 e3 26 	call	0x4dc6	; 0x4dc6 <__muldi3_6>
    41e4:	be 01       	movw	r22, r28
    41e6:	cf 01       	movw	r24, r30
    41e8:	f9 01       	movw	r30, r18
    41ea:	2f 91       	pop	r18
    41ec:	3f 91       	pop	r19
    41ee:	cf 91       	pop	r28
    41f0:	df 91       	pop	r29
    41f2:	08 95       	ret

Disassembly of section .text.libgcc.div:

00004036 <__moddi3>:
    4036:	68 94       	set
    4038:	01 c0       	rjmp	.+2      	; 0x403c <__divdi3_moddi3>

0000403a <__divdi3>:
    403a:	e8 94       	clt

0000403c <__divdi3_moddi3>:
    403c:	f9 2f       	mov	r31, r25
    403e:	f1 2b       	or	r31, r17
    4040:	12 f0       	brmi	.+4      	; 0x4046 <__divdi3_moddi3+0xa>
    4042:	0c 94 5f 26 	jmp	0x4cbe	; 0x4cbe <__udivdi3_umoddi3>
    4046:	a0 e0       	ldi	r26, 0x00	; 0
    4048:	b0 e0       	ldi	r27, 0x00	; 0
    404a:	e9 e2       	ldi	r30, 0x29	; 41
    404c:	f0 e2       	ldi	r31, 0x20	; 32
    404e:	0c 94 d7 22 	jmp	0x45ae	; 0x45ae <__prologue_saves__+0xc>
    4052:	09 2e       	mov	r0, r25
    4054:	05 94       	asr	r0
    4056:	22 f4       	brpl	.+8      	; 0x4060 <__divdi3_moddi3+0x24>
    4058:	0e 94 2e 26 	call	0x4c5c	; 0x4c5c <__negdi2>
    405c:	11 23       	and	r17, r17
    405e:	92 f4       	brpl	.+36     	; 0x4084 <__divdi3_moddi3+0x48>
    4060:	f0 e8       	ldi	r31, 0x80	; 128
    4062:	0f 26       	eor	r0, r31
    4064:	ff ef       	ldi	r31, 0xFF	; 255
    4066:	e0 94       	com	r14
    4068:	f0 94       	com	r15
    406a:	00 95       	com	r16
    406c:	10 95       	com	r17
    406e:	b0 94       	com	r11
    4070:	c0 94       	com	r12
    4072:	d0 94       	com	r13
    4074:	a1 94       	neg	r10
    4076:	bf 0a       	sbc	r11, r31
    4078:	cf 0a       	sbc	r12, r31
    407a:	df 0a       	sbc	r13, r31
    407c:	ef 0a       	sbc	r14, r31
    407e:	ff 0a       	sbc	r15, r31
    4080:	0f 0b       	sbc	r16, r31
    4082:	1f 0b       	sbc	r17, r31
    4084:	0e 94 a4 1a 	call	0x3548	; 0x3548 <__udivmod64>
    4088:	07 fc       	sbrc	r0, 7
    408a:	0e 94 2e 26 	call	0x4c5c	; 0x4c5c <__negdi2>
    408e:	cd b7       	in	r28, 0x3d	; 61
    4090:	de b7       	in	r29, 0x3e	; 62
    4092:	ec e0       	ldi	r30, 0x0C	; 12
    4094:	0c 94 f3 22 	jmp	0x45e6	; 0x45e6 <__epilogue_restores__+0xc>

Disassembly of section .text.libgcc.div:

00004cb8 <__umoddi3>:
    4cb8:	68 94       	set
    4cba:	01 c0       	rjmp	.+2      	; 0x4cbe <__udivdi3_umoddi3>

00004cbc <__udivdi3>:
    4cbc:	e8 94       	clt

00004cbe <__udivdi3_umoddi3>:
    4cbe:	8f 92       	push	r8
    4cc0:	9f 92       	push	r9
    4cc2:	cf 93       	push	r28
    4cc4:	df 93       	push	r29
    4cc6:	0e 94 a4 1a 	call	0x3548	; 0x3548 <__udivmod64>
    4cca:	df 91       	pop	r29
    4ccc:	cf 91       	pop	r28
    4cce:	9f 90       	pop	r9
    4cd0:	8f 90       	pop	r8
    4cd2:	08 95       	ret

Disassembly of section .text.libgcc.div:

00003548 <__udivmod64>:
    3548:	88 24       	eor	r8, r8
    354a:	99 24       	eor	r9, r9
    354c:	f4 01       	movw	r30, r8
    354e:	e4 01       	movw	r28, r8
    3550:	b0 e4       	ldi	r27, 0x40	; 64
    3552:	9f 93       	push	r25
    3554:	aa 27       	eor	r26, r26
    3556:	9a 15       	cp	r25, r10
    3558:	8b 04       	cpc	r8, r11
    355a:	9c 04       	cpc	r9, r12
    355c:	ed 05       	cpc	r30, r13
    355e:	fe 05       	cpc	r31, r14
    3560:	cf 05       	cpc	r28, r15
    3562:	d0 07       	cpc	r29, r16
    3564:	a1 07       	cpc	r26, r17
    3566:	98 f4       	brcc	.+38     	; 0x358e <__udivmod64+0x46>
    3568:	ad 2f       	mov	r26, r29
    356a:	dc 2f       	mov	r29, r28
    356c:	cf 2f       	mov	r28, r31
    356e:	fe 2f       	mov	r31, r30
    3570:	e9 2d       	mov	r30, r9
    3572:	98 2c       	mov	r9, r8
    3574:	89 2e       	mov	r8, r25
    3576:	98 2f       	mov	r25, r24
    3578:	87 2f       	mov	r24, r23
    357a:	76 2f       	mov	r23, r22
    357c:	65 2f       	mov	r22, r21
    357e:	54 2f       	mov	r21, r20
    3580:	43 2f       	mov	r20, r19
    3582:	32 2f       	mov	r19, r18
    3584:	22 27       	eor	r18, r18
    3586:	b8 50       	subi	r27, 0x08	; 8
    3588:	31 f7       	brne	.-52     	; 0x3556 <__udivmod64+0xe>
    358a:	bf 91       	pop	r27
    358c:	27 c0       	rjmp	.+78     	; 0x35dc <__udivmod64+0x94>
    358e:	1b 2e       	mov	r1, r27
    3590:	bf 91       	pop	r27
    3592:	bb 27       	eor	r27, r27
    3594:	22 0f       	add	r18, r18
    3596:	33 1f       	adc	r19, r19
    3598:	44 1f       	adc	r20, r20
    359a:	55 1f       	adc	r21, r21
    359c:	66 1f       	adc	r22, r22
    359e:	77 1f       	adc	r23, r23
    35a0:	88 1f       	adc	r24, r24
    35a2:	99 1f       	adc	r25, r25
    35a4:	88 1c       	adc	r8, r8
    35a6:	99 1c       	adc	r9, r9
    35a8:	ee 1f       	adc	r30, r30
    35aa:	ff 1f       	adc	r31, r31
    35ac:	cc 1f       	adc	r28, r28
    35ae:	dd 1f       	adc	r29, r29
    35b0:	aa 1f       	adc	r26, r26
    35b2:	bb 1f       	adc	r27, r27
    35b4:	8a 14       	cp	r8, r10
    35b6:	9b 04       	cpc	r9, r11
    35b8:	ec 05       	cpc	r30, r12
    35ba:	fd 05       	cpc	r31, r13
    35bc:	ce 05       	cpc	r28, r14
    35be:	df 05       	cpc	r29, r15
    35c0:	a0 07       	cpc	r26, r16
    35c2:	b1 07       	cpc	r27, r17
    35c4:	48 f0       	brcs	.+18     	; 0x35d8 <__udivmod64+0x90>
    35c6:	8a 18       	sub	r8, r10
    35c8:	9b 08       	sbc	r9, r11
    35ca:	ec 09       	sbc	r30, r12
    35cc:	fd 09       	sbc	r31, r13
    35ce:	ce 09       	sbc	r28, r14
    35d0:	df 09       	sbc	r29, r15
    35d2:	a0 0b       	sbc	r26, r16
    35d4:	b1 0b       	sbc	r27, r17
    35d6:	21 60       	ori	r18, 0x01	; 1
    35d8:	1a 94       	dec	r1
    35da:	e1 f6       	brne	.-72     	; 0x3594 <__udivmod64+0x4c>
    35dc:	2e f4       	brtc	.+10     	; 0x35e8 <__udivmod64+0xa0>
    35de:	94 01       	movw	r18, r8
    35e0:	af 01       	movw	r20, r30
    35e2:	be 01       	movw	r22, r28
    35e4:	cd 01       	movw	r24, r26
    35e6:	00 0c       	add	r0, r0
    35e8:	08 95       	ret

Disassembly of section .text.libgcc:

00004c5c <__negdi2>:
    4c5c:	60 95       	com	r22
    4c5e:	70 95       	com	r23
    4c60:	80 95       	com	r24
    4c62:	90 95       	com	r25
    4c64:	30 95       	com	r19
    4c66:	40 95       	com	r20
    4c68:	50 95       	com	r21
    4c6a:	21 95       	neg	r18
    4c6c:	3f 4f       	sbci	r19, 0xFF	; 255
    4c6e:	4f 4f       	sbci	r20, 0xFF	; 255
    4c70:	5f 4f       	sbci	r21, 0xFF	; 255
    4c72:	6f 4f       	sbci	r22, 0xFF	; 255
    4c74:	7f 4f       	sbci	r23, 0xFF	; 255
    4c76:	8f 4f       	sbci	r24, 0xFF	; 255
    4c78:	9f 4f       	sbci	r25, 0xFF	; 255
    4c7a:	08 95       	ret

Disassembly of section .text.libgcc.prologue:

000045a2 <__prologue_saves__>:
    45a2:	2f 92       	push	r2
    45a4:	3f 92       	push	r3
    45a6:	4f 92       	push	r4
    45a8:	5f 92       	push	r5
    45aa:	6f 92       	push	r6
    45ac:	7f 92       	push	r7
    45ae:	8f 92       	push	r8
    45b0:	9f 92       	push	r9
    45b2:	af 92       	push	r10
    45b4:	bf 92       	push	r11
    45b6:	cf 92       	push	r12
    45b8:	df 92       	push	r13
    45ba:	ef 92       	push	r14
    45bc:	ff 92       	push	r15
    45be:	0f 93       	push	r16
    45c0:	1f 93       	push	r17
    45c2:	cf 93       	push	r28
    45c4:	df 93       	push	r29
    45c6:	cd b7       	in	r28, 0x3d	; 61
    45c8:	de b7       	in	r29, 0x3e	; 62
    45ca:	ca 1b       	sub	r28, r26
    45cc:	db 0b       	sbc	r29, r27
    45ce:	0f b6       	in	r0, 0x3f	; 63
    45d0:	f8 94       	cli
    45d2:	de bf       	out	0x3e, r29	; 62
    45d4:	0f be       	out	0x3f, r0	; 63
    45d6:	cd bf       	out	0x3d, r28	; 61
    45d8:	09 94       	ijmp

Disassembly of section .text.libgcc.prologue:

000045da <__epilogue_restores__>:
    45da:	2a 88       	ldd	r2, Y+18	; 0x12
    45dc:	39 88       	ldd	r3, Y+17	; 0x11
    45de:	48 88       	ldd	r4, Y+16	; 0x10
    45e0:	5f 84       	ldd	r5, Y+15	; 0x0f
    45e2:	6e 84       	ldd	r6, Y+14	; 0x0e
    45e4:	7d 84       	ldd	r7, Y+13	; 0x0d
    45e6:	8c 84       	ldd	r8, Y+12	; 0x0c
    45e8:	9b 84       	ldd	r9, Y+11	; 0x0b
    45ea:	aa 84       	ldd	r10, Y+10	; 0x0a
    45ec:	b9 84       	ldd	r11, Y+9	; 0x09
    45ee:	c8 84       	ldd	r12, Y+8	; 0x08
    45f0:	df 80       	ldd	r13, Y+7	; 0x07
    45f2:	ee 80       	ldd	r14, Y+6	; 0x06
    45f4:	fd 80       	ldd	r15, Y+5	; 0x05
    45f6:	0c 81       	ldd	r16, Y+4	; 0x04
    45f8:	1b 81       	ldd	r17, Y+3	; 0x03
    45fa:	aa 81       	ldd	r26, Y+2	; 0x02
    45fc:	b9 81       	ldd	r27, Y+1	; 0x01
    45fe:	ce 0f       	add	r28, r30
    4600:	d1 1d       	adc	r29, r1
    4602:	0f b6       	in	r0, 0x3f	; 63
    4604:	f8 94       	cli
    4606:	de bf       	out	0x3e, r29	; 62
    4608:	0f be       	out	0x3f, r0	; 63
    460a:	cd bf       	out	0x3d, r28	; 61
    460c:	ed 01       	movw	r28, r26
    460e:	08 95       	ret

Disassembly of section .text.libgcc:

00004dd8 <__adddi3>:
    4dd8:	2a 0d       	add	r18, r10
    4dda:	3b 1d       	adc	r19, r11
    4ddc:	4c 1d       	adc	r20, r12
    4dde:	5d 1d       	adc	r21, r13
    4de0:	6e 1d       	adc	r22, r14
    4de2:	7f 1d       	adc	r23, r15
    4de4:	80 1f       	adc	r24, r16
    4de6:	91 1f       	adc	r25, r17
    4de8:	08 95       	ret

Disassembly of section .text.libgcc:

00004dea <__cmpdi2>:
    4dea:	2a 15       	cp	r18, r10
    4dec:	3b 05       	cpc	r19, r11
    4dee:	4c 05       	cpc	r20, r12
    4df0:	5d 05       	cpc	r21, r13
    4df2:	6e 05       	cpc	r22, r14
    4df4:	7f 05       	cpc	r23, r15
    4df6:	80 07       	cpc	r24, r16
    4df8:	91 07       	cpc	r25, r17
    4dfa:	08 95       	ret
