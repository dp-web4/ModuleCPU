
ModuleCPU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00004f80  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000da  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00004f80  2**0
                  ALLOC
  3 .noinit       0000022a  00800102  00800102  00004f80  2**2
                  ALLOC
  4 .comment      0000002f  00000000  00000000  00004f80  2**0
                  CONTENTS, READONLY
  5 .stack.descriptors.hdr 00000142  00000000  00000000  00004faf  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000500  00000000  00000000  000050f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00008e82  00000000  00000000  000055f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001ab6  00000000  00000000  0000e473  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000385a  00000000  00000000  0000ff29  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001220  00000000  00000000  00013784  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000006e4  00000000  00000000  000149a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000488e  00000000  00000000  00015088  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000004e0  00000000  00000000  00019916  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .text         00000004  00004ebc  00004ebc  00004f70  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00019df8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .text.__vector_27 000000bc  00003284  00003284  00003338  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.ADCSetPowerOn 0000000c  00004e76  00004e76  00004f2a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.ADCStartConversion 0000002a  00004818  00004818  000048cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .progmemx.data 0000000b  00000341  00000341  000003f5  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 20 .text.ADCInit 0000013c  0000230e  0000230e  000023c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .progmemx.data.sg_sMuxSelectList 0000000f  0000031a  0000031a  000003ce  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 22 .bss.sg_eCurrentType 00000001  0080094f  0080094f  00004f80  2**0
                  ALLOC
 23 .bss.sg_eState 00000001  00800964  00800964  00004f80  2**0
                  ALLOC
 24 .text.CANLookupCommand 00000062  00003ee2  00003ee2  00003f96  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .progmemx.data 0000000b  0000034c  0000034c  00000400  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 26 .text.CANMOBSet 00000212  00001ace  00001ace  00001b82  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.CANSendMessageInternal 00000178  00002030  00002030  000020e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.CANMOBInterrupt 00000192  00001e9e  00001e9e  00001f52  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.__vector_18 00000118  0000257e  0000257e  00002632  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.CANSendMessage 00000016  00004d22  00004d22  00004dd6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.CANSetRXCallback 0000000a  00004e8e  00004e8e  00004f42  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.CANInit 0000009c  000035e6  000035e6  0000369a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .progmemx.data.sg_sRXCommandList 00000021  000002d5  000002d5  00000389  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 34 .progmemx.data.sg_sMOBModuleRequestTime 00000008  00000357  00000357  0000040b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 35 .progmemx.data.sg_sMOBModuleHardwareDetail 00000008  0000035f  0000035f  00000413  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 36 .progmemx.data.sg_sMOBModuleCellDetail 00000008  00000367  00000367  0000041b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 37 .progmemx.data.sg_sMOBModuleCellCommStat2 00000008  0000036f  0000036f  00000423  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 38 .progmemx.data.sg_sMOBModuleCellCommStat1 00000008  00000377  00000377  0000042b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 39 .progmemx.data.sg_sMOBModuleStatus3 00000008  0000037f  0000037f  00000433  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 40 .progmemx.data.sg_sMOBModuleStatus2 00000008  00000387  00000387  0000043b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 41 .progmemx.data.sg_sMOBModuleStatus1 00000008  0000038f  0000038f  00000443  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 42 .progmemx.data.sg_sMOBModuleAnnouncement 00000008  00000397  00000397  0000044b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 43 .progmemx.data.sg_sMOBGenericReceive 00000008  0000039f  0000039f  00000453  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 44 .progmemx.data.sg_sMOBDisabled 00000008  000003a7  000003a7  0000045b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 45 .bss.sg_bInRetransmit 00000001  00800965  00800965  00004f80  2**0
                  ALLOC
 46 .bss.sg_u8LastTXDataLen 00000001  00800966  00800966  00004f80  2**0
                  ALLOC
 47 .bss.sg_u8LastTXData 00000008  0080093d  0080093d  00004f80  2**0
                  ALLOC
 48 .bss.sg_eLastTXType 00000001  00800967  00800967  00004f80  2**0
                  ALLOC
 49 .bss.sg_u8TransmitAttempts 00000001  00800968  00800968  00004f80  2**0
                  ALLOC
 50 .bss.sg_pfRXCallback 00000002  0080094d  0080094d  00004f80  2**0
                  ALLOC
 51 .bss.sg_bBusy 00000001  00800969  00800969  00004f80  2**0
                  ALLOC
 52 .text.DebugOut 0000000e  00004e3e  00004e3e  00004ef2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 53 .text.EEPROMRead 00000012  00004da4  00004da4  00004e58  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 .text.I2CBitDelay 0000000e  00004e4c  00004e4c  00004f00  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.I2CStart 0000002c  00004768  00004768  0000481c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.I2CStop 00000026  0000490a  0000490a  000049be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .text.I2CUnstick 0000003c  000044b2  000044b2  00004566  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .text.I2CTxByte 0000006a  00003e0e  00003e0e  00003ec2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 .text.I2CRxByte 0000007a  00003c34  00003c34  00003ce8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 60 .text.I2CSetup 0000002c  00004794  00004794  00004848  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 61 .text.I2CStartTransaction 00000028  00004842  00004842  000048f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 62 .text.CellCountExpectedSet 000000c4  000030fe  000030fe  000031b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 63 .text.SendModuleControllerStatus 00000010  00004dfe  00004dfe  00004eb2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 64 .text.ModuleControllerStateSet 0000000a  00004e98  00004e98  00004f4c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .text.ModuleControllerStateSetMax 00000016  00004d38  00004d38  00004dec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 66 .text.Check5VLoss 00000018  00004cda  00004cda  00004d8e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 67 .text.CellDataConvertVoltage 0000005e  00003fa6  00003fa6  0000405a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 68 .text.CellDataConvertTemperature 0000007a  00003cae  00003cae  00003d62  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 69 .text.ModuleCurrentConvertReadings 00000104  00002696  00002696  0000274a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 70 .text.__vector_1 00000024  00004956  00004956  00004a0a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 71 .text.__vector_2 00000024  0000497a  0000497a  00004a2e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 72 .text.__vector_3 00000024  0000499e  0000499e  00004a52  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 73 .text.__vector_4 00000024  000049c2  000049c2  00004a76  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 74 .text.__vector_5 00000024  000049e6  000049e6  00004a9a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 75 .text.__vector_6 00000024  00004a0a  00004a0a  00004abe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 76 .text.__vector_22 00000024  00004a2e  00004a2e  00004ae2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 77 .text.__vector_9 00000024  00004a52  00004a52  00004b06  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 78 .text.__vector_11 00000024  00004a76  00004a76  00004b2a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 79 .text.__vector_13 00000024  00004a9a  00004a9a  00004b4e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 80 .text.__vector_14 00000024  00004abe  00004abe  00004b72  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 81 .text.__vector_17 00000024  00004ae2  00004ae2  00004b96  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 82 .text.__vector_19 00000024  00004b06  00004b06  00004bba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 83 .text.__vector_21 00000024  00004b2a  00004b2a  00004bde  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 84 .text.__vector_25 00000024  00004b4e  00004b4e  00004c02  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 85 .text.__vector_26 00000024  00004b72  00004b72  00004c26  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 86 .text.__vector_29 00000024  00004b96  00004b96  00004c4a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 87 .text.__vector_30 00000024  00004bba  00004bba  00004c6e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 88 .text.CurrentThresholdsGet 00000094  00003682  00003682  00003736  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 89 .progmemx.data 000001a1  000000da  000000da  0000018e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 90 .text.CANReceiveCallback 00000298  000011a0  000011a0  00001254  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 91 .text.ControllerStatusMessagesSend 00000424  00000810  00000810  000008c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 92 .text.CellStringProcess 000002a6  00000efa  00000efa  00000fae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 93 .text.Delay   00000052  0000425e  0000425e  00004312  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 94 .text.PlatformAssert 0000002c  000047c0  000047c0  00004874  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 95 .text.ModuleControllerStateHandle 0000021e  000018b0  000018b0  00001964  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 96 .text.PlatformGetRegistrationID 00000006  00004eb6  00004eb6  00004f6a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 97 .text.SetSysclock 0000000c  00004e82  00004e82  00004f36  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 98 .text.ModuleControllerGetUniqueID 0000007e  00003a40  00003a40  00003af4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 99 .text.TimerInit 00000052  000042b0  000042b0  00004364  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
100 .text.__vector_12 000000ba  00003340  00003340  000033f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
101 .text.WatchdogReset 00000002  00004ec4  00004ec4  00004f78  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
102 .text.WatchdogOff 0000001a  00004cc0  00004cc0  00004d74  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
103 .text.__vector_28 00000052  00004302  00004302  000043b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
104 .text.__vector_23 0000008a  00003716  00003716  000037ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
105 .text.__vector_24 0000004c  00004354  00004354  00004408  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
106 .text.vUARTRXStart 00000016  00004d4e  00004d4e  00004e02  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
107 .text.vUARTRXEnd 00000024  00004bde  00004bde  00004c92  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
108 .text.vUARTRXData 0000007a  00003d28  00003d28  00003ddc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
109 .text.PlatformGetSendData 00000028  0000486a  0000486a  0000491e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
110 .text.ADCCallback 00000026  00004930  00004930  000049e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
111 .text.FrameInit 000000cc  00002dda  00002dda  00002e8e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
112 .text.CellStringPowerStateMachine 00000088  0000382a  0000382a  000038de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
113 .text.main    000002c6  00000c34  00000c34  00000ce8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
114 .bss.sg_u8PCMSK1 00000001  0080096a  0080096a  00004f80  2**0
                  ALLOC
115 .bss.sg_u8PCMSK0 00000001  0080096b  0080096b  00004f80  2**0
                  ALLOC
116 .bss.sg_u8UnhandledInterruptVector 00000001  0080096c  0080096c  00004f80  2**0
                  ALLOC
117 .bss.sg_u8Reason 00000001  0080096d  0080096d  00004f80  2**0
                  ALLOC
118 .progmemx.data.sg_u8FractionalLookup 00000010  0000030a  0000030a  000003be  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
119 .bss.sg_u8ControllerStatusMsgCount 00000001  0080096e  0080096e  00004f80  2**0
                  ALLOC
120 .bss.sg_u8CellReports 00000001  0080096f  0080096f  00004f80  2**0
                  ALLOC
121 .bss.sg_u16BytesReceived 00000002  0080095c  0080095c  00004f80  2**0
                  ALLOC
122 .bss.sg_u8CellBufferTemp 00000004  00800950  00800950  00004f80  2**2
                  ALLOC
123 .bss.sg_u8CellBufferRX 00000001  00800970  00800970  00004f80  2**0
                  ALLOC
124 .bss.sg_u8CellIndex 00000001  00800971  00800971  00004f80  2**0
                  ALLOC
125 .bss.sg_u8TicksSinceLastPackControllerMessage 00000001  00800972  00800972  00004f80  2**0
                  ALLOC
126 .bss.sg_u8CellStringPowerTimer 00000001  00800973  00800973  00004f80  2**0
                  ALLOC
127 .bss.sg_bFrameStart 00000001  00800974  00800974  00004f80  2**0
                  ALLOC
128 .bss.sg_u8CellFrameTimer 00000001  00800975  00800975  00004f80  2**0
                  ALLOC
129 .bss.sg_bIgnoreStatusRequests 00000001  00800976  00800976  00004f80  2**0
                  ALLOC
130 .bss.sg_u8AnnouncementDelayTicks 00000001  00800977  00800977  00004f80  2**0
                  ALLOC
131 .bss.sg_bAnnouncementPending 00000001  00800978  00800978  00004f80  2**0
                  ALLOC
132 .bss.sg_u8CurrentBufferIndex 00000001  00800979  00800979  00004f80  2**0
                  ALLOC
133 .bss.sg_sCurrenBuffer 00000010  0080091d  0080091d  00004f80  2**0
                  ALLOC
134 .text.IsLeapYear 00000034  00004608  00004608  000046bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
135 .text.RTCStartTransaction 00000044  000043ec  000043ec  000044a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
136 .text.StructTMToHW 00000054  000041b6  000041b6  0000426a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
137 .text.HWToStructTM 0000007c  00003b3c  00003b3c  00003bf0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
138 .text.__vector_10 00000086  000038b2  000038b2  00003966  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
139 .progmemx.data 00000014  000002f6  000002f6  000003aa  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
140 .text.RTCReadRegisters 0000007e  00003abe  00003abe  00003b72  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
141 .text.RTCReadHW 000000e2  00002990  00002990  00002a44  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
142 .text.RTCWriteRegisters 0000006a  00003e78  00003e78  00003f2c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
143 .text.RTCWriteHW 000000fe  0000279a  0000279a  0000284e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
144 .text.RTCSetTime 000000c6  00003038  00003038  000030ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
145 .text.RTCInit 00000222  0000168e  0000168e  00001742  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
146 .progmemx.data.sg_u8DaysInMonths 0000000c  00000329  00000329  000003dd  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
147 .bss.sg_u64Time 00000008  00800945  00800945  00004f80  2**0
                  ALLOC
148 .text.SDSetCS 00000014  00004d90  00004d90  00004e44  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
149 .text.SDPowerup 0000003a  0000452a  0000452a  000045de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
150 .text.SDCommand 000000aa  000033fa  000033fa  000034ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
151 .text.SDGoIdle 00000022  00004c26  00004c26  00004cda  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
152 .text.SDSendOpCondition 00000034  0000463c  0000463c  000046f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
153 .text.SDSendOpConditionArg 00000056  000040b4  000040b4  00004168  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
154 .text.SDWaitResponse7 0000000e  00004e5a  00004e5a  00004f0e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
155 .text.SDSendInterfaceCondition 00000034  00004670  00004670  00004724  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
156 .text.SDReadOCR 00000032  000046a4  000046a4  00004758  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
157 .text.SDReadCSD 0000007c  00003bb8  00003bb8  00003c6c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
158 .text.SDReceiveDataBlock 0000008a  000037a0  000037a0  00003854  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
159 .text.SDTransmitDataBlock 000000c2  000031c2  000031c2  00003276  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
160 .text.SDInit  00000166  000021a8  000021a8  0000225c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
161 .text.SDRead  000000d8  00002c2a  00002c2a  00002cde  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
162 .text.SDWrite 000000dc  00002a72  00002a72  00002b26  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
163 .bss.sg_u8CSD 00000010  0080092d  0080092d  00004f80  2**0
                  ALLOC
164 .bss.sg_u16BlockSize 00000002  0080095e  0080095e  00004f80  2**0
                  ALLOC
165 .bss.sg_u32SDSectorCount 00000004  00800954  00800954  00004f80  2**0
                  ALLOC
166 .text.SPITransaction 00000058  00004004  00004004  000040b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
167 .text.SPISetBaudRate 000000ca  00002ea6  00002ea6  00002f5a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
168 .text.SPIInit 0000002c  000047ec  000047ec  000048a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
169 .progmemx.data.sg_sSPIBaudRates 0000002a  000002ab  000002ab  0000035f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
170 .text.readGlobalState 0000003e  00004474  00004474  00004528  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
171 .text.writeGlobalState 00000032  000046d6  000046d6  0000478a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
172 .text.updateSessionMap 000000dc  00002b4e  00002b4e  00002c02  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
173 .text.STORE_Init 00000082  000039be  000039be  00003a72  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
174 .text.STORE_WriteFrame 000000f8  00002898  00002898  0000294c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
175 .text.STORE_StartNewSession 00000054  0000420a  0000420a  000042be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
176 .text.STORE_EndSession 00000058  0000405c  0000405c  00004110  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
177 .bss.frameBuffer 00000400  0080032c  0080032c  00004f80  2**2
                  ALLOC
178 .bss.currentSector 00000004  00800958  00800958  00004f80  2**0
                  ALLOC
179 .bss.gState   000001d8  0080072c  0080072c  00004f80  2**2
                  ALLOC
180 .text.vUARTtxDataAvailable 00000024  00004c02  00004c02  00004cb6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
181 .text.vUARTtxDataGet 0000004c  000043a0  000043a0  00004454  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
182 .text.vUARTRXReset 0000000a  00004ea2  00004ea2  00004f56  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
183 .text.vUARTStarttx 00000056  0000410a  0000410a  000041be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
184 .text.__vector_8 000000c8  00002f70  00002f70  00003024  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
185 .text.__vector_16 000000d8  00002d02  00002d02  00002db6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
186 .text.__vector_15 00000134  0000244a  0000244a  000024fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
187 .text.vUARTInit 00000036  0000459c  0000459c  00004650  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
188 .text.vUARTInitReceive 00000028  00004892  00004892  00004946  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
189 .bss.sg_bState 00000001  0080097a  0080097a  00004f80  2**0
                  ALLOC
190 .bss.sg_u8SendData 00000002  00800960  00800960  00004f80  2**0
                  ALLOC
191 .bss.sg_u8SendIndex 00000001  0080097b  0080097b  00004f80  2**0
                  ALLOC
192 .bss.sg_edgeCorrections 00000002  00800962  00800962  00004f80  2**0
                  ALLOC
193 .bss.sg_maxTimingError 00000001  0080097c  0080097c  00004f80  2**0
                  ALLOC
194 .bss.sg_minTimingError 00000001  0080097d  0080097d  00004f80  2**0
                  ALLOC
195 .bss.sg_bMCTxNextBit 00000001  0080097e  0080097e  00004f80  2**0
                  ALLOC
196 .bss.sg_bCellReportsReuested 00000001  0080097f  0080097f  00004f80  2**0
                  ALLOC
197 .bss.sg_etxState 00000001  00800980  00800980  00004f80  2**0
                  ALLOC
198 .bss.sg_btxMoreAvailable 00000001  00800981  00800981  00004f80  2**0
                  ALLOC
199 .bss.sg_u8txDataByte 00000001  00800982  00800982  00004f80  2**0
                  ALLOC
200 .bss.sg_u8txBitCount 00000001  00800983  00800983  00004f80  2**0
                  ALLOC
201 .bss.sg_bCell_mc_rxMoreData 00000001  00800984  00800984  00004f80  2**0
                  ALLOC
202 .bss.sg_bCell_mc_rxPriorState 00000001  00800985  00800985  00004f80  2**0
                  ALLOC
203 .bss.sg_eCell_mc_rxState 00000001  00800986  00800986  00004f80  2**0
                  ALLOC
204 .bss.sg_u8rxDataByte 00000001  00800987  00800987  00004f80  2**0
                  ALLOC
205 .bss.sg_u8Cell_mc_rxBitCount 00000001  00800988  00800988  00004f80  2**0
                  ALLOC
206 .text.libgcc.div 00000028  000048ba  000048ba  0000496e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
207 .text.libgcc.div 00000044  00004430  00004430  000044e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
208 .text.libgcc.div 0000002e  0000473a  0000473a  000047ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
209 .text.libgcc.div 00000010  00004e0e  00004e0e  00004ec2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
210 .text.libgcc.mul 0000001e  00004c68  00004c68  00004d1c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
211 .text.libgcc.mul 0000000e  00004e68  00004e68  00004f1c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
212 .text.libgcc.mul 00000016  00004d64  00004d64  00004e18  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
213 .text.libgcc.mul 00000010  00004e1e  00004e1e  00004ed2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
214 .text.libgcc  00000010  00004e2e  00004e2e  00004ee2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
215 .text.libgcc  00000018  00004cf2  00004cf2  00004da6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
216 .text.libgcc  00000018  00004d0a  00004d0a  00004dbe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
217 .text.__dummy_fini 00000002  00004ec6  00004ec6  00004f7a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
218 .text.__dummy_funcs_on_exit 00000002  00004ec8  00004ec8  00004f7c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
219 .text.__dummy_simulator_exit 00000002  00004eca  00004eca  00004f7e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
220 .text.exit    00000016  00004d7a  00004d7a  00004e2e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
221 .text.memcpy  00000032  00004708  00004708  000047bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
222 .text.memset  00000012  00004db6  00004db6  00004e6a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
223 .text.gmtime  0000000a  00004eac  00004eac  00004f60  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
224 .bss.tm.1240  00000019  00800904  00800904  00004f80  2**0
                  ALLOC
225 .progmemx.data 00000004  000003af  000003af  00000463  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
226 .text.__gmtime_r 0000006c  00003da2  00003da2  00003e56  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
227 .progmemx.data 00000004  000003b3  000003b3  00000467  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
228 .text.mktime  00000086  00003938  00003938  000039ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
229 .text._Exit   00000004  00004ec0  00004ec0  00004f74  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
230 .text.__tm_to_secs 000001be  00001ce0  00001ce0  00001d94  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
231 .text.__year_to_secs 00000256  00001438  00001438  000014ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
232 .text.__month_to_secs 0000003c  000044ee  000044ee  000045a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
233 .progmemx.data.secs_through_month.1090 00000030  0000027b  0000027b  0000032f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
234 .text.__secs_to_tm 00000458  000003b8  000003b8  0000046c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
235 .progmemx.data.days_in_month.1250 0000000c  00000335  00000335  000003e9  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
236 .text.libgcc.div 00000028  000048e2  000048e2  00004996  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
237 .text.libgcc.mul 000000a0  00003546  00003546  000035fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
238 .text.libgcc.mul 00000012  00004dc8  00004dc8  00004e7c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
239 .text.libgcc.mul 0000001e  00004c86  00004c86  00004d3a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
240 .text.libgcc.mul 00000056  00004160  00004160  00004214  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
241 .text.libgcc.div 00000062  00003f44  00003f44  00003ff8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
242 .text.libgcc.div 0000001c  00004ca4  00004ca4  00004d58  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
243 .text.libgcc.div 000000a2  000034a4  000034a4  00003558  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
244 .text.libgcc  00000020  00004c48  00004c48  00004cfc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
245 .text.libgcc.prologue 00000038  00004564  00004564  00004618  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
246 .text.libgcc.prologue 00000036  000045d2  000045d2  00004686  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
247 .text.libgcc  00000012  00004dda  00004dda  00004e8e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
248 .text.libgcc  00000012  00004dec  00004dec  00004ea0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 43 00 	jmp	0x86	; 0x86 <__ctors_end>
   4:	0c 94 ab 24 	jmp	0x4956	; 0x4956 <__vector_1>
   8:	0c 94 bd 24 	jmp	0x497a	; 0x497a <__vector_2>
   c:	0c 94 cf 24 	jmp	0x499e	; 0x499e <__vector_3>
  10:	0c 94 e1 24 	jmp	0x49c2	; 0x49c2 <__vector_4>
  14:	0c 94 f3 24 	jmp	0x49e6	; 0x49e6 <__vector_5>
  18:	0c 94 05 25 	jmp	0x4a0a	; 0x4a0a <__vector_6>
  1c:	0c 94 5e 27 	jmp	0x4ebc	; 0x4ebc <__bad_interrupt>
  20:	0c 94 b8 17 	jmp	0x2f70	; 0x2f70 <__vector_8>
  24:	0c 94 29 25 	jmp	0x4a52	; 0x4a52 <__vector_9>
  28:	0c 94 59 1c 	jmp	0x38b2	; 0x38b2 <__vector_10>
  2c:	0c 94 3b 25 	jmp	0x4a76	; 0x4a76 <__vector_11>
  30:	0c 94 a0 19 	jmp	0x3340	; 0x3340 <__vector_12>
  34:	0c 94 4d 25 	jmp	0x4a9a	; 0x4a9a <__vector_13>
  38:	0c 94 5f 25 	jmp	0x4abe	; 0x4abe <__vector_14>
  3c:	0c 94 25 12 	jmp	0x244a	; 0x244a <__vector_15>
  40:	0c 94 81 16 	jmp	0x2d02	; 0x2d02 <__vector_16>
  44:	0c 94 71 25 	jmp	0x4ae2	; 0x4ae2 <__vector_17>
  48:	0c 94 bf 12 	jmp	0x257e	; 0x257e <__vector_18>
  4c:	0c 94 83 25 	jmp	0x4b06	; 0x4b06 <__vector_19>
  50:	0c 94 5e 27 	jmp	0x4ebc	; 0x4ebc <__bad_interrupt>
  54:	0c 94 95 25 	jmp	0x4b2a	; 0x4b2a <__vector_21>
  58:	0c 94 17 25 	jmp	0x4a2e	; 0x4a2e <__vector_22>
  5c:	0c 94 8b 1b 	jmp	0x3716	; 0x3716 <__vector_23>
  60:	0c 94 aa 21 	jmp	0x4354	; 0x4354 <__vector_24>
  64:	0c 94 a7 25 	jmp	0x4b4e	; 0x4b4e <__vector_25>
  68:	0c 94 b9 25 	jmp	0x4b72	; 0x4b72 <__vector_26>
  6c:	0c 94 42 19 	jmp	0x3284	; 0x3284 <__vector_27>
  70:	0c 94 81 21 	jmp	0x4302	; 0x4302 <__vector_28>
  74:	0c 94 cb 25 	jmp	0x4b96	; 0x4b96 <__vector_29>
  78:	0c 94 dd 25 	jmp	0x4bba	; 0x4bba <__vector_30>

0000007c <.dinit>:
  7c:	01 00       	.word	0x0001	; ????
  7e:	01 02       	muls	r16, r17
  80:	80 01       	movw	r16, r0
  82:	04 09       	sbc	r16, r4
  84:	89 80       	ldd	r8, Y+1	; 0x01

00000086 <__ctors_end>:
  86:	11 24       	eor	r1, r1
  88:	1f be       	out	0x3f, r1	; 63
  8a:	cf ef       	ldi	r28, 0xFF	; 255
  8c:	d0 e1       	ldi	r29, 0x10	; 16
  8e:	de bf       	out	0x3e, r29	; 62
  90:	cd bf       	out	0x3d, r28	; 61

00000092 <__do_copy_data>:
  92:	ec e7       	ldi	r30, 0x7C	; 124
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	40 e0       	ldi	r20, 0x00	; 0
  98:	17 c0       	rjmp	.+46     	; 0xc8 <__do_clear_bss+0x8>
  9a:	b5 91       	lpm	r27, Z+
  9c:	a5 91       	lpm	r26, Z+
  9e:	35 91       	lpm	r19, Z+
  a0:	25 91       	lpm	r18, Z+
  a2:	05 91       	lpm	r16, Z+
  a4:	07 fd       	sbrc	r16, 7
  a6:	0c c0       	rjmp	.+24     	; 0xc0 <__do_clear_bss>
  a8:	95 91       	lpm	r25, Z+
  aa:	85 91       	lpm	r24, Z+
  ac:	ef 01       	movw	r28, r30
  ae:	f9 2f       	mov	r31, r25
  b0:	e8 2f       	mov	r30, r24
  b2:	05 90       	lpm	r0, Z+
  b4:	0d 92       	st	X+, r0
  b6:	a2 17       	cp	r26, r18
  b8:	b3 07       	cpc	r27, r19
  ba:	d9 f7       	brne	.-10     	; 0xb2 <__do_copy_data+0x20>
  bc:	fe 01       	movw	r30, r28
  be:	04 c0       	rjmp	.+8      	; 0xc8 <__do_clear_bss+0x8>

000000c0 <__do_clear_bss>:
  c0:	1d 92       	st	X+, r1
  c2:	a2 17       	cp	r26, r18
  c4:	b3 07       	cpc	r27, r19
  c6:	e1 f7       	brne	.-8      	; 0xc0 <__do_clear_bss>
  c8:	e6 38       	cpi	r30, 0x86	; 134
  ca:	f4 07       	cpc	r31, r20
  cc:	31 f7       	brne	.-52     	; 0x9a <__do_copy_data+0x8>
  ce:	0e 94 1a 06 	call	0xc34	; 0xc34 <main>
  d2:	0c 94 bd 26 	jmp	0x4d7a	; 0x4d7a <exit>

000000d6 <_exit>:
  d6:	f8 94       	cli

000000d8 <__stop_program>:
  d8:	ff cf       	rjmp	.-2      	; 0xd8 <__stop_program>

Disassembly of section .text:

00004ebc <__bad_interrupt>:
    4ebc:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.__vector_27:

00003284 <__vector_27>:

	// Disable the conversion complete interrupt
	ADCSRA &= (uint8_t)~(1 << ADIE);

	// Clear any pending interrupt	
	ADCSRA |= (1 << ADIF);
    3284:	78 94       	sei
    3286:	1f 92       	push	r1
    3288:	0f 92       	push	r0
    328a:	0f b6       	in	r0, 0x3f	; 63
    328c:	0f 92       	push	r0
    328e:	11 24       	eor	r1, r1
    3290:	2f 93       	push	r18
    3292:	3f 93       	push	r19
    3294:	4f 93       	push	r20
    3296:	5f 93       	push	r21
    3298:	6f 93       	push	r22
    329a:	7f 93       	push	r23
    329c:	8f 93       	push	r24
    329e:	9f 93       	push	r25
    32a0:	af 93       	push	r26
    32a2:	bf 93       	push	r27
    32a4:	ef 93       	push	r30
    32a6:	ff 93       	push	r31
    32a8:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f0078>
    32ac:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f0079>
    32b0:	80 91 4f 09 	lds	r24, 0x094F	; 0x80094f <sg_eCurrentType>
    32b4:	91 e0       	ldi	r25, 0x01	; 1
    32b6:	98 0f       	add	r25, r24
    32b8:	90 93 4f 09 	sts	0x094F, r25	; 0x80094f <sg_eCurrentType>
    32bc:	95 30       	cpi	r25, 0x05	; 5
    32be:	10 f0       	brcs	.+4      	; 0x32c4 <__vector_27+0x40>
    32c0:	10 92 4f 09 	sts	0x094F, r1	; 0x80094f <sg_eCurrentType>
    32c4:	ac e7       	ldi	r26, 0x7C	; 124
    32c6:	b0 e0       	ldi	r27, 0x00	; 0
    32c8:	5c 91       	ld	r21, X
    32ca:	20 91 4f 09 	lds	r18, 0x094F	; 0x80094f <sg_eCurrentType>
    32ce:	30 e0       	ldi	r19, 0x00	; 0
    32d0:	f9 01       	movw	r30, r18
    32d2:	ee 0f       	add	r30, r30
    32d4:	ff 1f       	adc	r31, r31
    32d6:	2e 0f       	add	r18, r30
    32d8:	3f 1f       	adc	r19, r31
    32da:	03 2e       	mov	r0, r19
    32dc:	00 0c       	add	r0, r0
    32de:	44 0b       	sbc	r20, r20
    32e0:	26 5e       	subi	r18, 0xE6	; 230
    32e2:	3c 4f       	sbci	r19, 0xFC	; 252
    32e4:	4f 4f       	sbci	r20, 0xFF	; 255
    32e6:	f9 01       	movw	r30, r18
    32e8:	94 91       	lpm	r25, Z
    32ea:	47 fd       	sbrc	r20, 7
    32ec:	90 81       	ld	r25, Z
    32ee:	50 7e       	andi	r21, 0xE0	; 224
    32f0:	95 2b       	or	r25, r21
    32f2:	90 6c       	ori	r25, 0xC0	; 192
    32f4:	9c 93       	st	X, r25
    32f6:	0e 94 98 24 	call	0x4930	; 0x4930 <ADCCallback>
    32fa:	80 91 4f 09 	lds	r24, 0x094F	; 0x80094f <sg_eCurrentType>
    32fe:	81 11       	cpse	r24, r1
    3300:	09 c0       	rjmp	.+18     	; 0x3314 <__vector_27+0x90>
    3302:	ea e7       	ldi	r30, 0x7A	; 122
    3304:	f0 e0       	ldi	r31, 0x00	; 0
    3306:	80 81       	ld	r24, Z
    3308:	87 7f       	andi	r24, 0xF7	; 247
    330a:	80 83       	st	Z, r24
    330c:	81 e0       	ldi	r24, 0x01	; 1
    330e:	80 93 64 09 	sts	0x0964, r24	; 0x800964 <sg_eState>
    3312:	05 c0       	rjmp	.+10     	; 0x331e <__vector_27+0x9a>
    3314:	ea e7       	ldi	r30, 0x7A	; 122
    3316:	f0 e0       	ldi	r31, 0x00	; 0
    3318:	80 81       	ld	r24, Z
    331a:	88 64       	ori	r24, 0x48	; 72
    331c:	80 83       	st	Z, r24
    331e:	ff 91       	pop	r31
    3320:	ef 91       	pop	r30
    3322:	bf 91       	pop	r27
    3324:	af 91       	pop	r26
    3326:	9f 91       	pop	r25
    3328:	8f 91       	pop	r24
    332a:	7f 91       	pop	r23
    332c:	6f 91       	pop	r22
    332e:	5f 91       	pop	r21
    3330:	4f 91       	pop	r20
    3332:	3f 91       	pop	r19
    3334:	2f 91       	pop	r18
    3336:	0f 90       	pop	r0
    3338:	0f be       	out	0x3f, r0	; 63
    333a:	0f 90       	pop	r0
    333c:	1f 90       	pop	r1
    333e:	18 95       	reti

Disassembly of section .text.ADCSetPowerOn:

00004e76 <ADCSetPowerOn>:
}

// Enable ADC
void ADCSetPowerOn( void )
{
	ADCSRA |= (1 << ADEN);
    4e76:	ea e7       	ldi	r30, 0x7A	; 122
    4e78:	f0 e0       	ldi	r31, 0x00	; 0
    4e7a:	80 81       	ld	r24, Z
    4e7c:	80 68       	ori	r24, 0x80	; 128
    4e7e:	80 83       	st	Z, r24
    4e80:	08 95       	ret

Disassembly of section .text.ADCStartConversion:

00004818 <ADCStartConversion>:
}

void ADCStartConversion(void)
{
	// Don't start anything if we're not idle
	if (EADCSTATE_IDLE != sg_eState)
    4818:	80 91 64 09 	lds	r24, 0x0964	; 0x800964 <sg_eState>
    481c:	81 30       	cpi	r24, 0x01	; 1
    481e:	81 f4       	brne	.+32     	; 0x4840 <ADCStartConversion+0x28>
	{
		return;
	}
	
	// Set back to the first channel
	sg_eCurrentType = EADCTYPE_FIRST;
    4820:	10 92 4f 09 	sts	0x094F, r1	; 0x80094f <sg_eCurrentType>
	
	// Set the MUX
	ADMUX = (ADMUX & MUX_MASK) | (sg_sMuxSelectList[sg_eCurrentType].u8MuxSelect) | MUX_AREF;
    4824:	ec e7       	ldi	r30, 0x7C	; 124
    4826:	f0 e0       	ldi	r31, 0x00	; 0
    4828:	80 81       	ld	r24, Z
    482a:	80 7e       	andi	r24, 0xE0	; 224
    482c:	89 6c       	ori	r24, 0xC9	; 201
    482e:	80 83       	st	Z, r24
		
	sg_eState = EADCSTATE_READING;
    4830:	82 e0       	ldi	r24, 0x02	; 2
    4832:	80 93 64 09 	sts	0x0964, r24	; 0x800964 <sg_eState>
	
	// Start a single conversion  - *dp run one at a time for now instead of continuous
	ADCSRA |= (1 << ADSC) | (1 << ADIE) | (1 << ADEN);  // turn power on if it isn't
    4836:	ea e7       	ldi	r30, 0x7A	; 122
    4838:	f0 e0       	ldi	r31, 0x00	; 0
    483a:	80 81       	ld	r24, Z
    483c:	88 6c       	ori	r24, 0xC8	; 200
    483e:	80 83       	st	Z, r24
    4840:	08 95       	ret

Disassembly of section .text.ADCInit:

0000230e <ADCInit>:

	// Disable the conversion complete interrupt
	ADCSRA &= (uint8_t)~(1 << ADIE);

	// Clear any pending interrupt	
	ADCSRA |= (1 << ADIF);
    230e:	cf 93       	push	r28
    2310:	82 e0       	ldi	r24, 0x02	; 2
    2312:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f007a>
    2316:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
    231a:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7f0094>
    231e:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7f0095>
    2322:	10 92 96 00 	sts	0x0096, r1	; 0x800096 <__TEXT_REGION_LENGTH__+0x7f0096>
    2326:	10 92 97 00 	sts	0x0097, r1	; 0x800097 <__TEXT_REGION_LENGTH__+0x7f0097>
    232a:	80 ea       	ldi	r24, 0xA0	; 160
    232c:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f007b>
    2330:	c0 e0       	ldi	r28, 0x00	; 0
    2332:	83 c0       	rjmp	.+262    	; 0x243a <ADCInit+0x12c>
    2334:	2c 2f       	mov	r18, r28
    2336:	30 e0       	ldi	r19, 0x00	; 0
    2338:	c9 01       	movw	r24, r18
    233a:	88 0f       	add	r24, r24
    233c:	99 1f       	adc	r25, r25
    233e:	82 0f       	add	r24, r18
    2340:	93 1f       	adc	r25, r19
    2342:	01 96       	adiw	r24, 0x01	; 1
    2344:	09 2e       	mov	r0, r25
    2346:	00 0c       	add	r0, r0
    2348:	aa 0b       	sbc	r26, r26
    234a:	86 5e       	subi	r24, 0xE6	; 230
    234c:	9c 4f       	sbci	r25, 0xFC	; 252
    234e:	af 4f       	sbci	r26, 0xFF	; 255
    2350:	fc 01       	movw	r30, r24
    2352:	84 91       	lpm	r24, Z
    2354:	a7 fd       	sbrc	r26, 7
    2356:	80 81       	ld	r24, Z
    2358:	81 30       	cpi	r24, 0x01	; 1
    235a:	41 f0       	breq	.+16     	; 0x236c <ADCInit+0x5e>
    235c:	08 f4       	brcc	.+2      	; 0x2360 <ADCInit+0x52>
    235e:	6c c0       	rjmp	.+216    	; 0x2438 <ADCInit+0x12a>
    2360:	82 30       	cpi	r24, 0x02	; 2
    2362:	21 f1       	breq	.+72     	; 0x23ac <ADCInit+0x9e>
    2364:	83 30       	cpi	r24, 0x03	; 3
    2366:	09 f4       	brne	.+2      	; 0x236a <ADCInit+0x5c>
    2368:	41 c0       	rjmp	.+130    	; 0x23ec <ADCInit+0xde>
    236a:	5f c0       	rjmp	.+190    	; 0x242a <ADCInit+0x11c>
    236c:	54 b1       	in	r21, 0x04	; 4
    236e:	c9 01       	movw	r24, r18
    2370:	88 0f       	add	r24, r24
    2372:	99 1f       	adc	r25, r25
    2374:	28 0f       	add	r18, r24
    2376:	39 1f       	adc	r19, r25
    2378:	2e 5f       	subi	r18, 0xFE	; 254
    237a:	3f 4f       	sbci	r19, 0xFF	; 255
    237c:	03 2e       	mov	r0, r19
    237e:	00 0c       	add	r0, r0
    2380:	44 0b       	sbc	r20, r20
    2382:	26 5e       	subi	r18, 0xE6	; 230
    2384:	3c 4f       	sbci	r19, 0xFC	; 252
    2386:	4f 4f       	sbci	r20, 0xFF	; 255
    2388:	f9 01       	movw	r30, r18
    238a:	24 91       	lpm	r18, Z
    238c:	47 fd       	sbrc	r20, 7
    238e:	20 81       	ld	r18, Z
    2390:	81 e0       	ldi	r24, 0x01	; 1
    2392:	90 e0       	ldi	r25, 0x00	; 0
    2394:	02 c0       	rjmp	.+4      	; 0x239a <ADCInit+0x8c>
    2396:	88 0f       	add	r24, r24
    2398:	99 1f       	adc	r25, r25
    239a:	2a 95       	dec	r18
    239c:	e2 f7       	brpl	.-8      	; 0x2396 <ADCInit+0x88>
    239e:	80 95       	com	r24
    23a0:	58 23       	and	r21, r24
    23a2:	54 b9       	out	0x04, r21	; 4
    23a4:	95 b1       	in	r25, 0x05	; 5
    23a6:	89 23       	and	r24, r25
    23a8:	85 b9       	out	0x05, r24	; 5
    23aa:	46 c0       	rjmp	.+140    	; 0x2438 <ADCInit+0x12a>
    23ac:	57 b1       	in	r21, 0x07	; 7
    23ae:	c9 01       	movw	r24, r18
    23b0:	88 0f       	add	r24, r24
    23b2:	99 1f       	adc	r25, r25
    23b4:	28 0f       	add	r18, r24
    23b6:	39 1f       	adc	r19, r25
    23b8:	2e 5f       	subi	r18, 0xFE	; 254
    23ba:	3f 4f       	sbci	r19, 0xFF	; 255
    23bc:	03 2e       	mov	r0, r19
    23be:	00 0c       	add	r0, r0
    23c0:	44 0b       	sbc	r20, r20
    23c2:	26 5e       	subi	r18, 0xE6	; 230
    23c4:	3c 4f       	sbci	r19, 0xFC	; 252
    23c6:	4f 4f       	sbci	r20, 0xFF	; 255
    23c8:	f9 01       	movw	r30, r18
    23ca:	24 91       	lpm	r18, Z
    23cc:	47 fd       	sbrc	r20, 7
    23ce:	20 81       	ld	r18, Z
    23d0:	81 e0       	ldi	r24, 0x01	; 1
    23d2:	90 e0       	ldi	r25, 0x00	; 0
    23d4:	02 c0       	rjmp	.+4      	; 0x23da <ADCInit+0xcc>
    23d6:	88 0f       	add	r24, r24
    23d8:	99 1f       	adc	r25, r25
    23da:	2a 95       	dec	r18
    23dc:	e2 f7       	brpl	.-8      	; 0x23d6 <ADCInit+0xc8>
    23de:	80 95       	com	r24
    23e0:	58 23       	and	r21, r24
    23e2:	57 b9       	out	0x07, r21	; 7
    23e4:	98 b1       	in	r25, 0x08	; 8
    23e6:	89 23       	and	r24, r25
    23e8:	88 b9       	out	0x08, r24	; 8
    23ea:	26 c0       	rjmp	.+76     	; 0x2438 <ADCInit+0x12a>
    23ec:	4a b1       	in	r20, 0x0a	; 10
    23ee:	c9 01       	movw	r24, r18
    23f0:	88 0f       	add	r24, r24
    23f2:	99 1f       	adc	r25, r25
    23f4:	82 0f       	add	r24, r18
    23f6:	93 1f       	adc	r25, r19
    23f8:	02 96       	adiw	r24, 0x02	; 2
    23fa:	09 2e       	mov	r0, r25
    23fc:	00 0c       	add	r0, r0
    23fe:	aa 0b       	sbc	r26, r26
    2400:	86 5e       	subi	r24, 0xE6	; 230
    2402:	9c 4f       	sbci	r25, 0xFC	; 252
    2404:	af 4f       	sbci	r26, 0xFF	; 255
    2406:	fc 01       	movw	r30, r24
    2408:	24 91       	lpm	r18, Z
    240a:	a7 fd       	sbrc	r26, 7
    240c:	20 81       	ld	r18, Z
    240e:	81 e0       	ldi	r24, 0x01	; 1
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	02 c0       	rjmp	.+4      	; 0x2418 <ADCInit+0x10a>
    2414:	88 0f       	add	r24, r24
    2416:	99 1f       	adc	r25, r25
    2418:	2a 95       	dec	r18
    241a:	e2 f7       	brpl	.-8      	; 0x2414 <ADCInit+0x106>
    241c:	80 95       	com	r24
    241e:	48 23       	and	r20, r24
    2420:	4a b9       	out	0x0a, r20	; 10
    2422:	9b b1       	in	r25, 0x0b	; 11
    2424:	89 23       	and	r24, r25
    2426:	8b b9       	out	0x0b, r24	; 11
    2428:	07 c0       	rjmp	.+14     	; 0x2438 <ADCInit+0x12a>
    242a:	45 eb       	ldi	r20, 0xB5	; 181
    242c:	50 e0       	ldi	r21, 0x00	; 0
    242e:	61 e4       	ldi	r22, 0x41	; 65
    2430:	73 e0       	ldi	r23, 0x03	; 3
    2432:	80 e0       	ldi	r24, 0x00	; 0
    2434:	0e 94 e0 23 	call	0x47c0	; 0x47c0 <PlatformAssert>
    2438:	cf 5f       	subi	r28, 0xFF	; 255
    243a:	c5 30       	cpi	r28, 0x05	; 5
    243c:	08 f4       	brcc	.+2      	; 0x2440 <ADCInit+0x132>
    243e:	7a cf       	rjmp	.-268    	; 0x2334 <ADCInit+0x26>
    2440:	81 e0       	ldi	r24, 0x01	; 1
    2442:	80 93 64 09 	sts	0x0964, r24	; 0x800964 <sg_eState>
    2446:	cf 91       	pop	r28
    2448:	08 95       	ret

Disassembly of section .text.CANLookupCommand:

00003ee2 <CANLookupCommand>:
	{PKT_MODULE_SET_TIME,		ECANMessageType_SetTime},
	{PKT_MODULE_MAX_STATE,		ECANMessageType_MaxState}
};

static ECANMessageType CANLookupCommand( uint16_t u16ID )
{
    3ee2:	cf 93       	push	r28
    3ee4:	df 93       	push	r29
    3ee6:	ec 01       	movw	r28, r24
	uint8_t u8Index = 0;
    3ee8:	90 e0       	ldi	r25, 0x00	; 0
	
	while( u8Index < (sizeof(sg_sRXCommandList)/sizeof(sg_sRXCommandList[0])) )
    3eea:	26 c0       	rjmp	.+76     	; 0x3f38 <CANLookupCommand+0x56>
	{
		if( sg_sRXCommandList[u8Index].u16ID == u16ID )
    3eec:	a9 2f       	mov	r26, r25
    3eee:	b0 e0       	ldi	r27, 0x00	; 0
    3ef0:	9d 01       	movw	r18, r26
    3ef2:	22 0f       	add	r18, r18
    3ef4:	33 1f       	adc	r19, r19
    3ef6:	2a 0f       	add	r18, r26
    3ef8:	3b 1f       	adc	r19, r27
    3efa:	03 2e       	mov	r0, r19
    3efc:	00 0c       	add	r0, r0
    3efe:	44 0b       	sbc	r20, r20
    3f00:	2b 52       	subi	r18, 0x2B	; 43
    3f02:	3d 4f       	sbci	r19, 0xFD	; 253
    3f04:	4f 4f       	sbci	r20, 0xFF	; 255
    3f06:	f9 01       	movw	r30, r18
    3f08:	54 2f       	mov	r21, r20
    3f0a:	0e 94 17 27 	call	0x4e2e	; 0x4e2e <__xload_2>
    3f0e:	6c 17       	cp	r22, r28
    3f10:	7d 07       	cpc	r23, r29
    3f12:	89 f4       	brne	.+34     	; 0x3f36 <CANLookupCommand+0x54>
		{
			return( sg_sRXCommandList[u8Index].eType );
    3f14:	cd 01       	movw	r24, r26
    3f16:	88 0f       	add	r24, r24
    3f18:	99 1f       	adc	r25, r25
    3f1a:	8a 0f       	add	r24, r26
    3f1c:	9b 1f       	adc	r25, r27
    3f1e:	02 96       	adiw	r24, 0x02	; 2
    3f20:	09 2e       	mov	r0, r25
    3f22:	00 0c       	add	r0, r0
    3f24:	aa 0b       	sbc	r26, r26
    3f26:	8b 52       	subi	r24, 0x2B	; 43
    3f28:	9d 4f       	sbci	r25, 0xFD	; 253
    3f2a:	af 4f       	sbci	r26, 0xFF	; 255
    3f2c:	fc 01       	movw	r30, r24
    3f2e:	84 91       	lpm	r24, Z
    3f30:	a7 fd       	sbrc	r26, 7
    3f32:	80 81       	ld	r24, Z
    3f34:	04 c0       	rjmp	.+8      	; 0x3f3e <CANLookupCommand+0x5c>
		}
		
		u8Index++;
    3f36:	9f 5f       	subi	r25, 0xFF	; 255

static ECANMessageType CANLookupCommand( uint16_t u16ID )
{
	uint8_t u8Index = 0;
	
	while( u8Index < (sizeof(sg_sRXCommandList)/sizeof(sg_sRXCommandList[0])) )
    3f38:	9b 30       	cpi	r25, 0x0B	; 11
    3f3a:	c0 f2       	brcs	.-80     	; 0x3eec <CANLookupCommand+0xa>
		}
		
		u8Index++;
	}
	
	return( ECANMessageType_MAX );
    3f3c:	83 e1       	ldi	r24, 0x13	; 19
}
    3f3e:	df 91       	pop	r29
    3f40:	cf 91       	pop	r28
    3f42:	08 95       	ret

Disassembly of section .text.CANMOBSet:

00001ace <CANMOBSet>:

static void CANMOBSet( uint8_t u8MOBIndex,
					   const SMOBDef* psDef,
					   uint8_t* pu8Data,
					   uint8_t u8DataLen )
{
    1ace:	6f 92       	push	r6
    1ad0:	7f 92       	push	r7
    1ad2:	8f 92       	push	r8
    1ad4:	9f 92       	push	r9
    1ad6:	bf 92       	push	r11
    1ad8:	cf 92       	push	r12
    1ada:	df 92       	push	r13
    1adc:	ef 92       	push	r14
    1ade:	ff 92       	push	r15
    1ae0:	0f 93       	push	r16
    1ae2:	1f 93       	push	r17
    1ae4:	cf 93       	push	r28
    1ae6:	df 93       	push	r29
    1ae8:	f8 2e       	mov	r15, r24
    1aea:	6a 01       	movw	r12, r20
    1aec:	e6 2e       	mov	r14, r22
    1aee:	e9 01       	movw	r28, r18
	uint8_t u8CANCDMOBValue;
	uint32_t u32MessageID;
	uint8_t savedCANGIE;
	
	MBASSERT( u8MOBIndex <= 5 );
    1af0:	0f 2e       	mov	r0, r31
    1af2:	f5 e0       	ldi	r31, 0x05	; 5
    1af4:	6f 2e       	mov	r6, r31
    1af6:	f0 2d       	mov	r31, r0
    1af8:	68 16       	cp	r6, r24
    1afa:	38 f4       	brcc	.+14     	; 0x1b0a <CANMOBSet+0x3c>
    1afc:	40 ed       	ldi	r20, 0xD0	; 208
    1afe:	50 e0       	ldi	r21, 0x00	; 0
    1b00:	6c e4       	ldi	r22, 0x4C	; 76
    1b02:	73 e0       	ldi	r23, 0x03	; 3
    1b04:	80 e0       	ldi	r24, 0x00	; 0
    1b06:	0e 94 e0 23 	call	0x47c0	; 0x47c0 <PlatformAssert>
	MBASSERT( u8DataLen <= 8 );
    1b0a:	09 30       	cpi	r16, 0x09	; 9
    1b0c:	38 f0       	brcs	.+14     	; 0x1b1c <CANMOBSet+0x4e>
    1b0e:	41 ed       	ldi	r20, 0xD1	; 209
    1b10:	50 e0       	ldi	r21, 0x00	; 0
    1b12:	6c e4       	ldi	r22, 0x4C	; 76
    1b14:	73 e0       	ldi	r23, 0x03	; 3
    1b16:	80 e0       	ldi	r24, 0x00	; 0
    1b18:	0e 94 e0 23 	call	0x47c0	; 0x47c0 <PlatformAssert>
	
	// Disable CAN interrupts during MOB configuration to prevent corruption
	savedCANGIE = CANGIE;
    1b1c:	eb ed       	ldi	r30, 0xDB	; 219
    1b1e:	f0 e0       	ldi	r31, 0x00	; 0
    1b20:	b0 80       	ld	r11, Z
	CANGIE &= ~(1 << ENIT);
    1b22:	80 81       	ld	r24, Z
    1b24:	8f 77       	andi	r24, 0x7F	; 127
    1b26:	80 83       	st	Z, r24
	
	// Set the MOB page, auto increment, and data index 0
	CANPAGE = u8MOBIndex << 4;
    1b28:	8f 2d       	mov	r24, r15
    1b2a:	82 95       	swap	r24
    1b2c:	80 7f       	andi	r24, 0xF0	; 240
    1b2e:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f00ed>
	
	// Clear the MOB status
	CANSTMOB = 0;
    1b32:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
	
	// Set the MOB registers for this page
	u8CANCDMOBValue = u8DataLen;
	u8CANCDMOBValue |= (psDef->u8Mode << CONMOB0);
    1b36:	f6 01       	movw	r30, r12
    1b38:	84 91       	lpm	r24, Z
    1b3a:	e7 fc       	sbrc	r14, 7
    1b3c:	80 81       	ld	r24, Z
    1b3e:	20 e4       	ldi	r18, 0x40	; 64
    1b40:	82 9f       	mul	r24, r18
    1b42:	c0 01       	movw	r24, r0
    1b44:	11 24       	eor	r1, r1
    1b46:	10 2f       	mov	r17, r16
    1b48:	18 2b       	or	r17, r24
	if( psDef->bReplyValid )
    1b4a:	ae 2d       	mov	r26, r14
    1b4c:	c6 01       	movw	r24, r12
    1b4e:	01 96       	adiw	r24, 0x01	; 1
    1b50:	a1 1d       	adc	r26, r1
    1b52:	fc 01       	movw	r30, r24
    1b54:	84 91       	lpm	r24, Z
    1b56:	a7 fd       	sbrc	r26, 7
    1b58:	80 81       	ld	r24, Z
    1b5a:	81 11       	cpse	r24, r1
	{
		u8CANCDMOBValue |= (1 << RPLV);
    1b5c:	10 62       	ori	r17, 0x20	; 32
	}
	u8CANCDMOBValue |= (1 << IDE);
    1b5e:	10 61       	ori	r17, 0x10	; 16
	// Extended frame address format
	//	Bits 0-7: Pack / Module registration ID of sender (if assigned, zero otherwise)
	//	Bits 8-17: Reserved, set to zero.
	//	Bits 18-28: Static message ID (eg. 0x500)
	
	u32MessageID = (uint32_t)PlatformGetRegistrationID();
    1b60:	0e 94 5b 27 	call	0x4eb6	; 0x4eb6 <PlatformGetRegistrationID>
	u32MessageID |= (((uint32_t)psDef->u16ID) & 0x7ff) << 18;
    1b64:	4e 2d       	mov	r20, r14
    1b66:	96 01       	movw	r18, r12
    1b68:	2e 5f       	subi	r18, 0xFE	; 254
    1b6a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b6c:	4f 4f       	sbci	r20, 0xFF	; 255
    1b6e:	f9 01       	movw	r30, r18
    1b70:	54 2f       	mov	r21, r20
    1b72:	0e 94 17 27 	call	0x4e2e	; 0x4e2e <__xload_2>
    1b76:	ab 01       	movw	r20, r22
    1b78:	57 70       	andi	r21, 0x07	; 7
    1b7a:	60 e0       	ldi	r22, 0x00	; 0
    1b7c:	70 e0       	ldi	r23, 0x00	; 0
    1b7e:	03 2e       	mov	r0, r19
    1b80:	32 e1       	ldi	r19, 0x12	; 18
    1b82:	44 0f       	add	r20, r20
    1b84:	55 1f       	adc	r21, r21
    1b86:	66 1f       	adc	r22, r22
    1b88:	77 1f       	adc	r23, r23
    1b8a:	3a 95       	dec	r19
    1b8c:	d1 f7       	brne	.-12     	; 0x1b82 <CANMOBSet+0xb4>
    1b8e:	30 2d       	mov	r19, r0
    1b90:	3a 01       	movw	r6, r20
    1b92:	4b 01       	movw	r8, r22
    1b94:	68 2a       	or	r6, r24
    1b96:	d4 01       	movw	r26, r8
    1b98:	c3 01       	movw	r24, r6
	
	CANIDT4 = psDef->bRTRTag?(1 << RTRTAG):0;
    1b9a:	4e 2d       	mov	r20, r14
    1b9c:	96 01       	movw	r18, r12
    1b9e:	2a 5f       	subi	r18, 0xFA	; 250
    1ba0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ba2:	4f 4f       	sbci	r20, 0xFF	; 255
    1ba4:	f9 01       	movw	r30, r18
    1ba6:	24 91       	lpm	r18, Z
    1ba8:	47 fd       	sbrc	r20, 7
    1baa:	20 81       	ld	r18, Z
    1bac:	22 23       	and	r18, r18
    1bae:	11 f0       	breq	.+4      	; 0x1bb4 <CANMOBSet+0xe6>
    1bb0:	24 e0       	ldi	r18, 0x04	; 4
    1bb2:	01 c0       	rjmp	.+2      	; 0x1bb6 <CANMOBSet+0xe8>
    1bb4:	20 e0       	ldi	r18, 0x00	; 0
    1bb6:	e0 ef       	ldi	r30, 0xF0	; 240
    1bb8:	f0 e0       	ldi	r31, 0x00	; 0
    1bba:	20 83       	st	Z, r18
	CANIDT4 |= u32MessageID << 3;
    1bbc:	20 81       	ld	r18, Z
    1bbe:	38 2f       	mov	r19, r24
    1bc0:	33 0f       	add	r19, r19
    1bc2:	33 0f       	add	r19, r19
    1bc4:	33 0f       	add	r19, r19
    1bc6:	23 2b       	or	r18, r19
    1bc8:	20 83       	st	Z, r18
	CANIDT3 = u32MessageID >> 5;
    1bca:	ac 01       	movw	r20, r24
    1bcc:	bd 01       	movw	r22, r26
    1bce:	68 94       	set
    1bd0:	14 f8       	bld	r1, 4
    1bd2:	76 95       	lsr	r23
    1bd4:	67 95       	ror	r22
    1bd6:	57 95       	ror	r21
    1bd8:	47 95       	ror	r20
    1bda:	16 94       	lsr	r1
    1bdc:	d1 f7       	brne	.-12     	; 0x1bd2 <CANMOBSet+0x104>
    1bde:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f00f1>
	CANIDT2 = u32MessageID >> 13;
    1be2:	ac 01       	movw	r20, r24
    1be4:	bd 01       	movw	r22, r26
    1be6:	03 2e       	mov	r0, r19
    1be8:	3d e0       	ldi	r19, 0x0D	; 13
    1bea:	76 95       	lsr	r23
    1bec:	67 95       	ror	r22
    1bee:	57 95       	ror	r21
    1bf0:	47 95       	ror	r20
    1bf2:	3a 95       	dec	r19
    1bf4:	d1 f7       	brne	.-12     	; 0x1bea <CANMOBSet+0x11c>
    1bf6:	30 2d       	mov	r19, r0
    1bf8:	40 93 f2 00 	sts	0x00F2, r20	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f00f2>
	CANIDT1 = u32MessageID >> 21;
    1bfc:	07 2e       	mov	r0, r23
    1bfe:	75 e1       	ldi	r23, 0x15	; 21
    1c00:	b6 95       	lsr	r27
    1c02:	a7 95       	ror	r26
    1c04:	97 95       	ror	r25
    1c06:	87 95       	ror	r24
    1c08:	7a 95       	dec	r23
    1c0a:	d1 f7       	brne	.-12     	; 0x1c00 <CANMOBSet+0x132>
    1c0c:	70 2d       	mov	r23, r0
    1c0e:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f00f3>
	
	// Setup mask for the cmd (require matching ID extention bit)
	CANIDM4 = psDef->bRTRMask?(1 << RTRTAG):0;
    1c12:	ae 2d       	mov	r26, r14
    1c14:	c6 01       	movw	r24, r12
    1c16:	07 96       	adiw	r24, 0x07	; 7
    1c18:	a1 1d       	adc	r26, r1
    1c1a:	fc 01       	movw	r30, r24
    1c1c:	84 91       	lpm	r24, Z
    1c1e:	a7 fd       	sbrc	r26, 7
    1c20:	80 81       	ld	r24, Z
    1c22:	88 23       	and	r24, r24
    1c24:	11 f0       	breq	.+4      	; 0x1c2a <CANMOBSet+0x15c>
    1c26:	84 e0       	ldi	r24, 0x04	; 4
    1c28:	01 c0       	rjmp	.+2      	; 0x1c2c <CANMOBSet+0x15e>
    1c2a:	80 e0       	ldi	r24, 0x00	; 0
    1c2c:	e4 ef       	ldi	r30, 0xF4	; 244
    1c2e:	f0 e0       	ldi	r31, 0x00	; 0
    1c30:	80 83       	st	Z, r24
	CANIDM4 |= (1 << IDEMSK);
    1c32:	80 81       	ld	r24, Z
    1c34:	81 60       	ori	r24, 0x01	; 1
    1c36:	80 83       	st	Z, r24
	CANIDM3 = 0;
    1c38:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7f00f5>
	CANIDM2 = psDef->u16IDMask << 5;
    1c3c:	ae 2d       	mov	r26, r14
    1c3e:	c6 01       	movw	r24, r12
    1c40:	04 96       	adiw	r24, 0x04	; 4
    1c42:	a1 1d       	adc	r26, r1
    1c44:	fc 01       	movw	r30, r24
    1c46:	5a 2f       	mov	r21, r26
    1c48:	0e 94 17 27 	call	0x4e2e	; 0x4e2e <__xload_2>
    1c4c:	62 95       	swap	r22
    1c4e:	66 0f       	add	r22, r22
    1c50:	60 7e       	andi	r22, 0xE0	; 224
    1c52:	60 93 f6 00 	sts	0x00F6, r22	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7f00f6>
	CANIDM1 = psDef->u16IDMask >> 3;
    1c56:	fc 01       	movw	r30, r24
    1c58:	5a 2f       	mov	r21, r26
    1c5a:	0e 94 17 27 	call	0x4e2e	; 0x4e2e <__xload_2>
    1c5e:	76 95       	lsr	r23
    1c60:	67 95       	ror	r22
    1c62:	76 95       	lsr	r23
    1c64:	67 95       	ror	r22
    1c66:	76 95       	lsr	r23
    1c68:	67 95       	ror	r22
    1c6a:	60 93 f7 00 	sts	0x00F7, r22	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7f00f7>
	
	// Set the data into the FIFO
	while( u8DataLen )
    1c6e:	04 c0       	rjmp	.+8      	; 0x1c78 <CANMOBSet+0x1aa>
	{
		CANMSG = *pu8Data;
    1c70:	89 91       	ld	r24, Y+
    1c72:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
		
		pu8Data++;
		u8DataLen--;
    1c76:	01 50       	subi	r16, 0x01	; 1
	CANIDM3 = 0;
	CANIDM2 = psDef->u16IDMask << 5;
	CANIDM1 = psDef->u16IDMask >> 3;
	
	// Set the data into the FIFO
	while( u8DataLen )
    1c78:	01 11       	cpse	r16, r1
    1c7a:	fa cf       	rjmp	.-12     	; 0x1c70 <CANMOBSet+0x1a2>
		pu8Data++;
		u8DataLen--;
	}
	
	// Send it now
	CANCDMOB = u8CANCDMOBValue;
    1c7c:	10 93 ef 00 	sts	0x00EF, r17	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
	
	// Enable (activates the MOB) or disable the MOB interrupt
	if( psDef->u8Mode != CAN_DISABLED )
    1c80:	f6 01       	movw	r30, r12
    1c82:	84 91       	lpm	r24, Z
    1c84:	e7 fc       	sbrc	r14, 7
    1c86:	80 81       	ld	r24, Z
    1c88:	88 23       	and	r24, r24
    1c8a:	69 f0       	breq	.+26     	; 0x1ca6 <CANMOBSet+0x1d8>
	{
		CANIE2 |= (1 << u8MOBIndex);
    1c8c:	ee ed       	ldi	r30, 0xDE	; 222
    1c8e:	f0 e0       	ldi	r31, 0x00	; 0
    1c90:	20 81       	ld	r18, Z
    1c92:	81 e0       	ldi	r24, 0x01	; 1
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	02 c0       	rjmp	.+4      	; 0x1c9c <CANMOBSet+0x1ce>
    1c98:	88 0f       	add	r24, r24
    1c9a:	99 1f       	adc	r25, r25
    1c9c:	fa 94       	dec	r15
    1c9e:	e2 f7       	brpl	.-8      	; 0x1c98 <CANMOBSet+0x1ca>
    1ca0:	82 2b       	or	r24, r18
    1ca2:	80 83       	st	Z, r24
    1ca4:	0d c0       	rjmp	.+26     	; 0x1cc0 <CANMOBSet+0x1f2>
	}
	else
	{
		CANIE2 &= (uint8_t)~(1 << u8MOBIndex);
    1ca6:	ee ed       	ldi	r30, 0xDE	; 222
    1ca8:	f0 e0       	ldi	r31, 0x00	; 0
    1caa:	20 81       	ld	r18, Z
    1cac:	81 e0       	ldi	r24, 0x01	; 1
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	02 c0       	rjmp	.+4      	; 0x1cb6 <CANMOBSet+0x1e8>
    1cb2:	88 0f       	add	r24, r24
    1cb4:	99 1f       	adc	r25, r25
    1cb6:	fa 94       	dec	r15
    1cb8:	e2 f7       	brpl	.-8      	; 0x1cb2 <CANMOBSet+0x1e4>
    1cba:	80 95       	com	r24
    1cbc:	82 23       	and	r24, r18
    1cbe:	80 83       	st	Z, r24
	}
	
	// Restore CAN interrupts
	CANGIE = savedCANGIE;
    1cc0:	b0 92 db 00 	sts	0x00DB, r11	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f00db>
}
    1cc4:	df 91       	pop	r29
    1cc6:	cf 91       	pop	r28
    1cc8:	1f 91       	pop	r17
    1cca:	0f 91       	pop	r16
    1ccc:	ff 90       	pop	r15
    1cce:	ef 90       	pop	r14
    1cd0:	df 90       	pop	r13
    1cd2:	cf 90       	pop	r12
    1cd4:	bf 90       	pop	r11
    1cd6:	9f 90       	pop	r9
    1cd8:	8f 90       	pop	r8
    1cda:	7f 90       	pop	r7
    1cdc:	6f 90       	pop	r6
    1cde:	08 95       	ret

Disassembly of section .text.CANSendMessageInternal:

00002030 <CANSendMessageInternal>:

static void CANSendMessageInternal( ECANMessageType eType,
									uint8_t* pu8Data,
									uint8_t u8DataLen,	
									bool bRetransmit )
{
    2030:	6f 92       	push	r6
    2032:	7f 92       	push	r7
    2034:	8f 92       	push	r8
    2036:	ef 92       	push	r14
    2038:	ff 92       	push	r15
    203a:	0f 93       	push	r16
    203c:	cf 93       	push	r28
    203e:	df 93       	push	r29
    2040:	c8 2f       	mov	r28, r24
    2042:	7b 01       	movw	r14, r22
    2044:	04 2f       	mov	r16, r20
    2046:	d2 2f       	mov	r29, r18
	const SMOBDef* psDef = NULL;
	
	if( ECANMessageType_ModuleAnnouncement == eType )
    2048:	88 23       	and	r24, r24
    204a:	f9 f0       	breq	.+62     	; 0x208a <CANSendMessageInternal+0x5a>
	{
		psDef = &sg_sMOBModuleAnnouncement;
	}
	else if( ECANMessageType_ModuleStatus1 == eType )
    204c:	81 30       	cpi	r24, 0x01	; 1
    204e:	31 f1       	breq	.+76     	; 0x209c <CANSendMessageInternal+0x6c>
	{
		psDef = &sg_sMOBModuleStatus1;
	}
	else if( ECANMessageType_ModuleStatus2 == eType )
    2050:	82 30       	cpi	r24, 0x02	; 2
    2052:	69 f1       	breq	.+90     	; 0x20ae <CANSendMessageInternal+0x7e>
	{
		psDef = &sg_sMOBModuleStatus2;
	}
	else if( ECANMessageType_ModuleStatus3 == eType )
    2054:	83 30       	cpi	r24, 0x03	; 3
    2056:	a1 f1       	breq	.+104    	; 0x20c0 <CANSendMessageInternal+0x90>
	{
		psDef = &sg_sMOBModuleStatus3;
	}
	else if( ECANMessageType_ModuleCellCommStat1 == eType )
    2058:	86 30       	cpi	r24, 0x06	; 6
    205a:	d9 f1       	breq	.+118    	; 0x20d2 <CANSendMessageInternal+0xa2>
	{
		psDef = &sg_sMOBModuleCellCommStat1;
	}
	else if( ECANMessageType_ModuleCellCommStat2 == eType )
    205c:	87 30       	cpi	r24, 0x07	; 7
    205e:	09 f4       	brne	.+2      	; 0x2062 <CANSendMessageInternal+0x32>
    2060:	41 c0       	rjmp	.+130    	; 0x20e4 <CANSendMessageInternal+0xb4>
	{
		psDef = &sg_sMOBModuleCellCommStat2;
	}
	else if( ECANMessageType_ModuleHardwareDetail == eType )
    2062:	85 30       	cpi	r24, 0x05	; 5
    2064:	09 f4       	brne	.+2      	; 0x2068 <CANSendMessageInternal+0x38>
    2066:	47 c0       	rjmp	.+142    	; 0x20f6 <CANSendMessageInternal+0xc6>
	{
		psDef = &sg_sMOBModuleHardwareDetail;
	}
	else if( ECANMessageType_ModuleCellDetail == eType )
    2068:	84 30       	cpi	r24, 0x04	; 4
    206a:	09 f4       	brne	.+2      	; 0x206e <CANSendMessageInternal+0x3e>
    206c:	4d c0       	rjmp	.+154    	; 0x2108 <CANSendMessageInternal+0xd8>
	{
		psDef = &sg_sMOBModuleCellDetail;
	}
	else if( ECANMessageType_ModuleRequestTime == eType )
    206e:	88 30       	cpi	r24, 0x08	; 8
    2070:	09 f4       	brne	.+2      	; 0x2074 <CANSendMessageInternal+0x44>
    2072:	53 c0       	rjmp	.+166    	; 0x211a <CANSendMessageInternal+0xea>
		psDef = &sg_sMOBModuleRequestTime;
	}
	else
	{
		// Invalid message type
		MBASSERT(0);
    2074:	43 e4       	ldi	r20, 0x43	; 67
    2076:	51 e0       	ldi	r21, 0x01	; 1
    2078:	6c e4       	ldi	r22, 0x4C	; 76
    207a:	73 e0       	ldi	r23, 0x03	; 3
    207c:	80 e0       	ldi	r24, 0x00	; 0
    207e:	0e 94 e0 23 	call	0x47c0	; 0x47c0 <PlatformAssert>
static void CANSendMessageInternal( ECANMessageType eType,
									uint8_t* pu8Data,
									uint8_t u8DataLen,	
									bool bRetransmit )
{
	const SMOBDef* psDef = NULL;
    2082:	61 2c       	mov	r6, r1
    2084:	71 2c       	mov	r7, r1
    2086:	81 2c       	mov	r8, r1
    2088:	50 c0       	rjmp	.+160    	; 0x212a <CANSendMessageInternal+0xfa>
	
	if( ECANMessageType_ModuleAnnouncement == eType )
	{
		psDef = &sg_sMOBModuleAnnouncement;
    208a:	0f 2e       	mov	r0, r31
    208c:	f7 e9       	ldi	r31, 0x97	; 151
    208e:	6f 2e       	mov	r6, r31
    2090:	f3 e0       	ldi	r31, 0x03	; 3
    2092:	7f 2e       	mov	r7, r31
    2094:	f0 e0       	ldi	r31, 0x00	; 0
    2096:	8f 2e       	mov	r8, r31
    2098:	f0 2d       	mov	r31, r0
    209a:	47 c0       	rjmp	.+142    	; 0x212a <CANSendMessageInternal+0xfa>
	}
	else if( ECANMessageType_ModuleStatus1 == eType )
	{
		psDef = &sg_sMOBModuleStatus1;
    209c:	0f 2e       	mov	r0, r31
    209e:	ff e8       	ldi	r31, 0x8F	; 143
    20a0:	6f 2e       	mov	r6, r31
    20a2:	f3 e0       	ldi	r31, 0x03	; 3
    20a4:	7f 2e       	mov	r7, r31
    20a6:	f0 e0       	ldi	r31, 0x00	; 0
    20a8:	8f 2e       	mov	r8, r31
    20aa:	f0 2d       	mov	r31, r0
    20ac:	3e c0       	rjmp	.+124    	; 0x212a <CANSendMessageInternal+0xfa>
	}
	else if( ECANMessageType_ModuleStatus2 == eType )
	{
		psDef = &sg_sMOBModuleStatus2;
    20ae:	0f 2e       	mov	r0, r31
    20b0:	f7 e8       	ldi	r31, 0x87	; 135
    20b2:	6f 2e       	mov	r6, r31
    20b4:	f3 e0       	ldi	r31, 0x03	; 3
    20b6:	7f 2e       	mov	r7, r31
    20b8:	f0 e0       	ldi	r31, 0x00	; 0
    20ba:	8f 2e       	mov	r8, r31
    20bc:	f0 2d       	mov	r31, r0
    20be:	35 c0       	rjmp	.+106    	; 0x212a <CANSendMessageInternal+0xfa>
	}
	else if( ECANMessageType_ModuleStatus3 == eType )
	{
		psDef = &sg_sMOBModuleStatus3;
    20c0:	0f 2e       	mov	r0, r31
    20c2:	ff e7       	ldi	r31, 0x7F	; 127
    20c4:	6f 2e       	mov	r6, r31
    20c6:	f3 e0       	ldi	r31, 0x03	; 3
    20c8:	7f 2e       	mov	r7, r31
    20ca:	f0 e0       	ldi	r31, 0x00	; 0
    20cc:	8f 2e       	mov	r8, r31
    20ce:	f0 2d       	mov	r31, r0
    20d0:	2c c0       	rjmp	.+88     	; 0x212a <CANSendMessageInternal+0xfa>
	}
	else if( ECANMessageType_ModuleCellCommStat1 == eType )
	{
		psDef = &sg_sMOBModuleCellCommStat1;
    20d2:	0f 2e       	mov	r0, r31
    20d4:	f7 e7       	ldi	r31, 0x77	; 119
    20d6:	6f 2e       	mov	r6, r31
    20d8:	f3 e0       	ldi	r31, 0x03	; 3
    20da:	7f 2e       	mov	r7, r31
    20dc:	f0 e0       	ldi	r31, 0x00	; 0
    20de:	8f 2e       	mov	r8, r31
    20e0:	f0 2d       	mov	r31, r0
    20e2:	23 c0       	rjmp	.+70     	; 0x212a <CANSendMessageInternal+0xfa>
	}
	else if( ECANMessageType_ModuleCellCommStat2 == eType )
	{
		psDef = &sg_sMOBModuleCellCommStat2;
    20e4:	0f 2e       	mov	r0, r31
    20e6:	ff e6       	ldi	r31, 0x6F	; 111
    20e8:	6f 2e       	mov	r6, r31
    20ea:	f3 e0       	ldi	r31, 0x03	; 3
    20ec:	7f 2e       	mov	r7, r31
    20ee:	f0 e0       	ldi	r31, 0x00	; 0
    20f0:	8f 2e       	mov	r8, r31
    20f2:	f0 2d       	mov	r31, r0
    20f4:	1a c0       	rjmp	.+52     	; 0x212a <CANSendMessageInternal+0xfa>
	}
	else if( ECANMessageType_ModuleHardwareDetail == eType )
	{
		psDef = &sg_sMOBModuleHardwareDetail;
    20f6:	0f 2e       	mov	r0, r31
    20f8:	ff e5       	ldi	r31, 0x5F	; 95
    20fa:	6f 2e       	mov	r6, r31
    20fc:	f3 e0       	ldi	r31, 0x03	; 3
    20fe:	7f 2e       	mov	r7, r31
    2100:	f0 e0       	ldi	r31, 0x00	; 0
    2102:	8f 2e       	mov	r8, r31
    2104:	f0 2d       	mov	r31, r0
    2106:	11 c0       	rjmp	.+34     	; 0x212a <CANSendMessageInternal+0xfa>
	}
	else if( ECANMessageType_ModuleCellDetail == eType )
	{
		psDef = &sg_sMOBModuleCellDetail;
    2108:	0f 2e       	mov	r0, r31
    210a:	f7 e6       	ldi	r31, 0x67	; 103
    210c:	6f 2e       	mov	r6, r31
    210e:	f3 e0       	ldi	r31, 0x03	; 3
    2110:	7f 2e       	mov	r7, r31
    2112:	f0 e0       	ldi	r31, 0x00	; 0
    2114:	8f 2e       	mov	r8, r31
    2116:	f0 2d       	mov	r31, r0
    2118:	08 c0       	rjmp	.+16     	; 0x212a <CANSendMessageInternal+0xfa>
	}
	else if( ECANMessageType_ModuleRequestTime == eType )
	{
		psDef = &sg_sMOBModuleRequestTime;
    211a:	0f 2e       	mov	r0, r31
    211c:	f7 e5       	ldi	r31, 0x57	; 87
    211e:	6f 2e       	mov	r6, r31
    2120:	f3 e0       	ldi	r31, 0x03	; 3
    2122:	7f 2e       	mov	r7, r31
    2124:	f0 e0       	ldi	r31, 0x00	; 0
    2126:	8f 2e       	mov	r8, r31
    2128:	f0 2d       	mov	r31, r0
	{
		// Invalid message type
		MBASSERT(0);
	}
	
	if(bRetransmit && sg_bInRetransmit) {
    212a:	dd 23       	and	r29, r29
    212c:	21 f0       	breq	.+8      	; 0x2136 <CANSendMessageInternal+0x106>
    212e:	80 91 65 09 	lds	r24, 0x0965	; 0x800965 <sg_bInRetransmit>
    2132:	81 11       	cpse	r24, r1
    2134:	30 c0       	rjmp	.+96     	; 0x2196 <CANSendMessageInternal+0x166>
		// Already in a retransmit, don't allow nested retries
		return;
	}
	if( bRetransmit || (false == sg_bBusy) )
    2136:	d1 11       	cpse	r29, r1
    2138:	04 c0       	rjmp	.+8      	; 0x2142 <CANSendMessageInternal+0x112>
    213a:	80 91 69 09 	lds	r24, 0x0969	; 0x800969 <sg_bBusy>
    213e:	81 11       	cpse	r24, r1
    2140:	2a c0       	rjmp	.+84     	; 0x2196 <CANSendMessageInternal+0x166>
	{
		sg_bBusy = true;
    2142:	81 e0       	ldi	r24, 0x01	; 1
    2144:	80 93 69 09 	sts	0x0969, r24	; 0x800969 <sg_bBusy>
		
		// Save this message info for retransmit later if needed
		if( false == bRetransmit )
    2148:	d1 11       	cpse	r29, r1
    214a:	1a c0       	rjmp	.+52     	; 0x2180 <CANSendMessageInternal+0x150>
		{
			sg_u8TransmitAttempts = 0;
    214c:	10 92 68 09 	sts	0x0968, r1	; 0x800968 <sg_u8TransmitAttempts>
			sg_eLastTXType = eType;
    2150:	c0 93 67 09 	sts	0x0967, r28	; 0x800967 <sg_eLastTXType>
			MBASSERT(u8DataLen <= CAN_MAX_MSG_SIZE);
    2154:	09 30       	cpi	r16, 0x09	; 9
    2156:	38 f0       	brcs	.+14     	; 0x2166 <CANSendMessageInternal+0x136>
    2158:	43 e5       	ldi	r20, 0x53	; 83
    215a:	51 e0       	ldi	r21, 0x01	; 1
    215c:	6c e4       	ldi	r22, 0x4C	; 76
    215e:	73 e0       	ldi	r23, 0x03	; 3
    2160:	80 e0       	ldi	r24, 0x00	; 0
    2162:	0e 94 e0 23 	call	0x47c0	; 0x47c0 <PlatformAssert>
			memcpy(sg_u8LastTXData, pu8Data, u8DataLen);
    2166:	20 2f       	mov	r18, r16
    2168:	30 e0       	ldi	r19, 0x00	; 0
    216a:	c7 01       	movw	r24, r14
    216c:	a0 e8       	ldi	r26, 0x80	; 128
    216e:	ac 01       	movw	r20, r24
    2170:	6a 2f       	mov	r22, r26
    2172:	8d e3       	ldi	r24, 0x3D	; 61
    2174:	99 e0       	ldi	r25, 0x09	; 9
    2176:	0e 94 84 23 	call	0x4708	; 0x4708 <memcpy>
			sg_u8LastTXDataLen = u8DataLen;
    217a:	00 93 66 09 	sts	0x0966, r16	; 0x800966 <sg_u8LastTXDataLen>
    217e:	05 c0       	rjmp	.+10     	; 0x218a <CANSendMessageInternal+0x15a>
		}
		else
		{
			sg_u8TransmitAttempts++;
    2180:	80 91 68 09 	lds	r24, 0x0968	; 0x800968 <sg_u8TransmitAttempts>
    2184:	8f 5f       	subi	r24, 0xFF	; 255
    2186:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <sg_u8TransmitAttempts>
		}
		
		// Send it now
		CANMOBSet( CANMOB_TX_IDX, psDef, pu8Data, u8DataLen );
    218a:	97 01       	movw	r18, r14
    218c:	68 2d       	mov	r22, r8
    218e:	a3 01       	movw	r20, r6
    2190:	81 e0       	ldi	r24, 0x01	; 1
    2192:	0e 94 67 0d 	call	0x1ace	; 0x1ace <CANMOBSet>
	}
}
    2196:	df 91       	pop	r29
    2198:	cf 91       	pop	r28
    219a:	0f 91       	pop	r16
    219c:	ff 90       	pop	r15
    219e:	ef 90       	pop	r14
    21a0:	8f 90       	pop	r8
    21a2:	7f 90       	pop	r7
    21a4:	6f 90       	pop	r6
    21a6:	08 95       	ret

Disassembly of section .text.CANMOBInterrupt:

00001e9e <CANMOBInterrupt>:

void CANMOBInterrupt( uint8_t u8MOBIndex )
{
    1e9e:	cf 92       	push	r12
    1ea0:	df 92       	push	r13
    1ea2:	ff 92       	push	r15
    1ea4:	0f 93       	push	r16
    1ea6:	1f 93       	push	r17
    1ea8:	cf 93       	push	r28
    1eaa:	df 93       	push	r29
    1eac:	cd b7       	in	r28, 0x3d	; 61
    1eae:	de b7       	in	r29, 0x3e	; 62
    1eb0:	28 97       	sbiw	r28, 0x08	; 8
    1eb2:	0f b6       	in	r0, 0x3f	; 63
    1eb4:	f8 94       	cli
    1eb6:	de bf       	out	0x3e, r29	; 62
    1eb8:	0f be       	out	0x3f, r0	; 63
    1eba:	cd bf       	out	0x3d, r28	; 61
	// Set the MOB page first (and zero the data index)
	CANPAGE = u8MOBIndex << 4;
    1ebc:	98 2f       	mov	r25, r24
    1ebe:	92 95       	swap	r25
    1ec0:	90 7f       	andi	r25, 0xF0	; 240
    1ec2:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f00ed>
	
	// Temporarily disable the MOB to examine and modify the registers
	CANIE2 &= (uint8_t)~(1 << u8MOBIndex);
    1ec6:	ee ed       	ldi	r30, 0xDE	; 222
    1ec8:	f0 e0       	ldi	r31, 0x00	; 0
    1eca:	20 81       	ld	r18, Z
    1ecc:	01 e0       	ldi	r16, 0x01	; 1
    1ece:	10 e0       	ldi	r17, 0x00	; 0
    1ed0:	08 2e       	mov	r0, r24
    1ed2:	02 c0       	rjmp	.+4      	; 0x1ed8 <CANMOBInterrupt+0x3a>
    1ed4:	00 0f       	add	r16, r16
    1ed6:	11 1f       	adc	r17, r17
    1ed8:	0a 94       	dec	r0
    1eda:	e2 f7       	brpl	.-8      	; 0x1ed4 <CANMOBInterrupt+0x36>
    1edc:	90 2f       	mov	r25, r16
    1ede:	90 95       	com	r25
    1ee0:	92 23       	and	r25, r18
    1ee2:	90 83       	st	Z, r25
	CANCDMOB &= (uint8_t)~((1 << CONMOB0) | (1 << CONMOB1));
    1ee4:	ef ee       	ldi	r30, 0xEF	; 239
    1ee6:	f0 e0       	ldi	r31, 0x00	; 0
    1ee8:	90 81       	ld	r25, Z
    1eea:	9f 73       	andi	r25, 0x3F	; 63
    1eec:	90 83       	st	Z, r25
	
	if( CANMOB_RX_IDX == u8MOBIndex )
    1eee:	81 11       	cpse	r24, r1
    1ef0:	5d c0       	rjmp	.+186    	; 0x1fac <CANMOBInterrupt+0x10e>
	{
		// TX success?  Just clear it since this is the RX context
		if( CANSTMOB & (1 << TXOK) )
    1ef2:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    1ef6:	86 ff       	sbrs	r24, 6
    1ef8:	09 c0       	rjmp	.+18     	; 0x1f0c <CANMOBInterrupt+0x6e>
		{
			// Clear it
			CANSTMOB &= ~(1 << TXOK);
    1efa:	ee ee       	ldi	r30, 0xEE	; 238
    1efc:	f0 e0       	ldi	r31, 0x00	; 0
    1efe:	80 81       	ld	r24, Z
    1f00:	8f 7b       	andi	r24, 0xBF	; 191
    1f02:	80 83       	st	Z, r24
            sg_bBusy = false;
    1f04:	10 92 69 09 	sts	0x0969, r1	; 0x800969 <sg_bBusy>
            sg_bInRetransmit = false;  // Clear flag on success	
    1f08:	10 92 65 09 	sts	0x0965, r1	; 0x800965 <sg_bInRetransmit>
		}
		// RX success?
		if( CANSTMOB & (1 << RXOK) )
    1f0c:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    1f10:	85 ff       	sbrs	r24, 5
    1f12:	38 c0       	rjmp	.+112    	; 0x1f84 <CANMOBInterrupt+0xe6>
		{
			// Clear it
			CANSTMOB &= ~(1 << RXOK);
    1f14:	ee ee       	ldi	r30, 0xEE	; 238
    1f16:	f0 e0       	ldi	r31, 0x00	; 0
    1f18:	80 81       	ld	r24, Z
    1f1a:	8f 7d       	andi	r24, 0xDF	; 223
    1f1c:	80 83       	st	Z, r24
		
			if( sg_pfRXCallback )
    1f1e:	c0 90 4d 09 	lds	r12, 0x094D	; 0x80094d <sg_pfRXCallback>
    1f22:	d0 90 4e 09 	lds	r13, 0x094E	; 0x80094e <sg_pfRXCallback+0x1>
    1f26:	c1 14       	cp	r12, r1
    1f28:	d1 04       	cpc	r13, r1
    1f2a:	61 f1       	breq	.+88     	; 0x1f84 <CANMOBInterrupt+0xe6>
			{
				ECANMessageType eType;
				uint16_t u16ID = 0;
				uint8_t u8Data[8];
				uint8_t u8DataLen = CANCDMOB & 0x0f;
    1f2c:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    1f30:	8f 70       	andi	r24, 0x0F	; 15
    1f32:	f8 2e       	mov	r15, r24
				uint8_t u8Index = 0;
			
				// Grab the messageID from the identifier registers
				// TODO: This extraction may be wrong for extended frames
				// but it worked with the real Pack Controller somehow
				u16ID = ((uint16_t)CANIDT1) << 3;
    1f34:	40 91 f3 00 	lds	r20, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f00f3>
    1f38:	50 e0       	ldi	r21, 0x00	; 0
    1f3a:	44 0f       	add	r20, r20
    1f3c:	55 1f       	adc	r21, r21
    1f3e:	44 0f       	add	r20, r20
    1f40:	55 1f       	adc	r21, r21
    1f42:	44 0f       	add	r20, r20
    1f44:	55 1f       	adc	r21, r21
				u16ID |= CANIDT2 >> 5;
    1f46:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f00f2>
    1f4a:	82 95       	swap	r24
    1f4c:	86 95       	lsr	r24
    1f4e:	87 70       	andi	r24, 0x07	; 7
    1f50:	48 2b       	or	r20, r24
			{
				ECANMessageType eType;
				uint16_t u16ID = 0;
				uint8_t u8Data[8];
				uint8_t u8DataLen = CANCDMOB & 0x0f;
				uint8_t u8Index = 0;
    1f52:	90 e0       	ldi	r25, 0x00	; 0
				// but it worked with the real Pack Controller somehow
				u16ID = ((uint16_t)CANIDT1) << 3;
				u16ID |= CANIDT2 >> 5;
			
				// Pull the data out into a temp buffer
				while( u8Index < u8DataLen )
    1f54:	0a c0       	rjmp	.+20     	; 0x1f6a <CANMOBInterrupt+0xcc>
				{
					u8Data[u8Index] = CANMSG;
    1f56:	20 91 fa 00 	lds	r18, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
    1f5a:	e1 e0       	ldi	r30, 0x01	; 1
    1f5c:	f0 e0       	ldi	r31, 0x00	; 0
    1f5e:	ec 0f       	add	r30, r28
    1f60:	fd 1f       	adc	r31, r29
    1f62:	e9 0f       	add	r30, r25
    1f64:	f1 1d       	adc	r31, r1
    1f66:	20 83       	st	Z, r18
					u8Index++;
    1f68:	9f 5f       	subi	r25, 0xFF	; 255
				// but it worked with the real Pack Controller somehow
				u16ID = ((uint16_t)CANIDT1) << 3;
				u16ID |= CANIDT2 >> 5;
			
				// Pull the data out into a temp buffer
				while( u8Index < u8DataLen )
    1f6a:	9f 15       	cp	r25, r15
    1f6c:	a0 f3       	brcs	.-24     	; 0x1f56 <CANMOBInterrupt+0xb8>
					u8Data[u8Index] = CANMSG;
					u8Index++;
				}
			
				// Lookup ID to see if it matches one of ours
				eType = CANLookupCommand( u16ID );
    1f6e:	ca 01       	movw	r24, r20
    1f70:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <CANLookupCommand>
			
				if( eType != ECANMessageType_MAX )
    1f74:	83 31       	cpi	r24, 0x13	; 19
    1f76:	31 f0       	breq	.+12     	; 0x1f84 <CANMOBInterrupt+0xe6>
				{
					// Call comamnd handler
					sg_pfRXCallback( eType, u8Data, u8DataLen );
    1f78:	4f 2d       	mov	r20, r15
    1f7a:	be 01       	movw	r22, r28
    1f7c:	6f 5f       	subi	r22, 0xFF	; 255
    1f7e:	7f 4f       	sbci	r23, 0xFF	; 255
    1f80:	f6 01       	movw	r30, r12
    1f82:	09 95       	icall
				}
			}
		}
	
		// If receive error, clear the bits
		if( CANSTMOB & ((1 << SERR) | (1 << CERR) | (1 << FERR)) )
    1f84:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    1f88:	8e 70       	andi	r24, 0x0E	; 14
    1f8a:	29 f0       	breq	.+10     	; 0x1f96 <CANMOBInterrupt+0xf8>
		{
			// Clear it.  Just ignore
			CANSTMOB &= ~((1 << SERR) | (1 << CERR) | (1 << FERR));
    1f8c:	ee ee       	ldi	r30, 0xEE	; 238
    1f8e:	f0 e0       	ldi	r31, 0x00	; 0
    1f90:	80 81       	ld	r24, Z
    1f92:	81 7f       	andi	r24, 0xF1	; 241
    1f94:	80 83       	st	Z, r24
		}
	
		// Re-enable RX now
		CANIE2 |= (1 << u8MOBIndex);
    1f96:	ee ed       	ldi	r30, 0xDE	; 222
    1f98:	f0 e0       	ldi	r31, 0x00	; 0
    1f9a:	80 81       	ld	r24, Z
    1f9c:	08 2b       	or	r16, r24
    1f9e:	00 83       	st	Z, r16
		CANCDMOB |= (1 << CONMOB1);
    1fa0:	ef ee       	ldi	r30, 0xEF	; 239
    1fa2:	f0 e0       	ldi	r31, 0x00	; 0
    1fa4:	80 81       	ld	r24, Z
    1fa6:	80 68       	ori	r24, 0x80	; 128
    1fa8:	80 83       	st	Z, r24
    1faa:	34 c0       	rjmp	.+104    	; 0x2014 <CANMOBInterrupt+0x176>
	}
	else if( CANMOB_TX_IDX == u8MOBIndex )
    1fac:	81 30       	cpi	r24, 0x01	; 1
    1fae:	91 f5       	brne	.+100    	; 0x2014 <CANMOBInterrupt+0x176>
	{
		if( CANSTMOB & (1 << TXOK) )
    1fb0:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    1fb4:	86 ff       	sbrs	r24, 6
    1fb6:	07 c0       	rjmp	.+14     	; 0x1fc6 <CANMOBInterrupt+0x128>
		{
			// Clear it
			CANSTMOB &= ~(1 << TXOK);
    1fb8:	ee ee       	ldi	r30, 0xEE	; 238
    1fba:	f0 e0       	ldi	r31, 0x00	; 0
    1fbc:	80 81       	ld	r24, Z
    1fbe:	8f 7b       	andi	r24, 0xBF	; 191
    1fc0:	80 83       	st	Z, r24
		
			sg_bBusy = false;
    1fc2:	10 92 69 09 	sts	0x0969, r1	; 0x800969 <sg_bBusy>
		}
		
		// RX success, just clear it since this is the TX context
		if( CANSTMOB & (1 << RXOK) )
    1fc6:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    1fca:	85 ff       	sbrs	r24, 5
    1fcc:	05 c0       	rjmp	.+10     	; 0x1fd8 <CANMOBInterrupt+0x13a>
		{
			// Clear it
			CANSTMOB &= ~(1 << RXOK);
    1fce:	ee ee       	ldi	r30, 0xEE	; 238
    1fd0:	f0 e0       	ldi	r31, 0x00	; 0
    1fd2:	80 81       	ld	r24, Z
    1fd4:	8f 7d       	andi	r24, 0xDF	; 223
    1fd6:	80 83       	st	Z, r24
		}

		// If TX Error on transmit (collision with another device)
		// -or- ACK error (nobody listening),
		// retry send
		if( CANSTMOB & ((1 << BERR) | (1 << AERR) | (1 << SERR)) )
    1fd8:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    1fdc:	89 71       	andi	r24, 0x19	; 25
    1fde:	d1 f0       	breq	.+52     	; 0x2014 <CANMOBInterrupt+0x176>
		{
			// Clear it
			CANSTMOB &= ~((1 << BERR) | (1 << AERR) | (1 << SERR));
    1fe0:	ee ee       	ldi	r30, 0xEE	; 238
    1fe2:	f0 e0       	ldi	r31, 0x00	; 0
    1fe4:	80 81       	ld	r24, Z
    1fe6:	86 7e       	andi	r24, 0xE6	; 230
    1fe8:	80 83       	st	Z, r24

			if( sg_u8TransmitAttempts < 20 )
    1fea:	80 91 68 09 	lds	r24, 0x0968	; 0x800968 <sg_u8TransmitAttempts>
    1fee:	84 31       	cpi	r24, 0x14	; 20
    1ff0:	68 f4       	brcc	.+26     	; 0x200c <CANMOBInterrupt+0x16e>
			{
				// Retransmit now
               sg_bInRetransmit = true;  // Set flag before retry
    1ff2:	81 e0       	ldi	r24, 0x01	; 1
    1ff4:	80 93 65 09 	sts	0x0965, r24	; 0x800965 <sg_bInRetransmit>
               CANSendMessageInternal( sg_eLastTXType, sg_u8LastTXData, sg_u8LastTXDataLen, true );
    1ff8:	21 e0       	ldi	r18, 0x01	; 1
    1ffa:	40 91 66 09 	lds	r20, 0x0966	; 0x800966 <sg_u8LastTXDataLen>
    1ffe:	6d e3       	ldi	r22, 0x3D	; 61
    2000:	79 e0       	ldi	r23, 0x09	; 9
    2002:	80 91 67 09 	lds	r24, 0x0967	; 0x800967 <sg_eLastTXType>
    2006:	0e 94 18 10 	call	0x2030	; 0x2030 <CANSendMessageInternal>
    200a:	04 c0       	rjmp	.+8      	; 0x2014 <CANMOBInterrupt+0x176>
			}
			else
			{
				// Retries exhausted.  Give up
				sg_bBusy = false;
    200c:	10 92 69 09 	sts	0x0969, r1	; 0x800969 <sg_bBusy>
                sg_bInRetransmit = false;
    2010:	10 92 65 09 	sts	0x0965, r1	; 0x800965 <sg_bInRetransmit>
			}
		}
	}
}
    2014:	28 96       	adiw	r28, 0x08	; 8
    2016:	0f b6       	in	r0, 0x3f	; 63
    2018:	f8 94       	cli
    201a:	de bf       	out	0x3e, r29	; 62
    201c:	0f be       	out	0x3f, r0	; 63
    201e:	cd bf       	out	0x3d, r28	; 61
    2020:	df 91       	pop	r29
    2022:	cf 91       	pop	r28
    2024:	1f 91       	pop	r17
    2026:	0f 91       	pop	r16
    2028:	ff 90       	pop	r15
    202a:	df 90       	pop	r13
    202c:	cf 90       	pop	r12
    202e:	08 95       	ret

Disassembly of section .text.__vector_18:

0000257e <__vector_18>:

// Generic CAN interrupt handler
// Check interrrupt sources and clear them (by servicing or explicit clearing)
ISR(CAN_INT_vect, ISR_BLOCK)
{
    257e:	1f 92       	push	r1
    2580:	0f 92       	push	r0
    2582:	0f b6       	in	r0, 0x3f	; 63
    2584:	0f 92       	push	r0
    2586:	11 24       	eor	r1, r1
    2588:	0f 93       	push	r16
    258a:	1f 93       	push	r17
    258c:	2f 93       	push	r18
    258e:	3f 93       	push	r19
    2590:	4f 93       	push	r20
    2592:	5f 93       	push	r21
    2594:	6f 93       	push	r22
    2596:	7f 93       	push	r23
    2598:	8f 93       	push	r24
    259a:	9f 93       	push	r25
    259c:	af 93       	push	r26
    259e:	bf 93       	push	r27
    25a0:	cf 93       	push	r28
    25a2:	df 93       	push	r29
    25a4:	ef 93       	push	r30
    25a6:	ff 93       	push	r31
	// Save state we'll need to restore
	uint8_t saved_cangie = CANGIE;
    25a8:	eb ed       	ldi	r30, 0xDB	; 219
    25aa:	f0 e0       	ldi	r31, 0x00	; 0
    25ac:	d0 81       	ld	r29, Z
	uint8_t saved_canie2 = CANIE2;	// Temporarily disable CAN interrupts to prevent reentry
    25ae:	10 91 de 00 	lds	r17, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7f00de>
	CANGIE &= (uint8_t)~(1 << ENIT);
    25b2:	80 81       	ld	r24, Z
    25b4:	8f 77       	andi	r24, 0x7F	; 127
    25b6:	80 83       	st	Z, r24

	// Do NOT re-enable global interrupts - this causes race conditions!
	
	 uint8_t sit = CANSIT2;
    25b8:	c0 91 e0 00 	lds	r28, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f00e0>
	 
	 // Most common interrupts first  *claude
	 if(sit & (1 << CANMOB_RX_IDX)) {
    25bc:	c0 ff       	sbrs	r28, 0
    25be:	0c c0       	rjmp	.+24     	; 0x25d8 <__vector_18+0x5a>
		 CANMOBInterrupt(CANMOB_RX_IDX);
    25c0:	80 e0       	ldi	r24, 0x00	; 0
    25c2:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <CANMOBInterrupt>
		 CANMOBSet(CANMOB_RX_IDX, &sg_sMOBGenericReceive, NULL, 0);
    25c6:	00 e0       	ldi	r16, 0x00	; 0
    25c8:	20 e0       	ldi	r18, 0x00	; 0
    25ca:	30 e0       	ldi	r19, 0x00	; 0
    25cc:	4f e9       	ldi	r20, 0x9F	; 159
    25ce:	53 e0       	ldi	r21, 0x03	; 3
    25d0:	60 e0       	ldi	r22, 0x00	; 0
    25d2:	80 e0       	ldi	r24, 0x00	; 0
    25d4:	0e 94 67 0d 	call	0x1ace	; 0x1ace <CANMOBSet>
	 }
	 
	
	// Check TX MOB
	if( sit & (1 << CANMOB_TX_IDX) )
    25d8:	c1 ff       	sbrs	r28, 1
    25da:	03 c0       	rjmp	.+6      	; 0x25e2 <__vector_18+0x64>
	{
		CANMOBInterrupt( CANMOB_TX_IDX );
    25dc:	81 e0       	ldi	r24, 0x01	; 1
    25de:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <CANMOBInterrupt>
	}
	
	// Now the generic, non-MOB interrupts (some of which may have already been handled by the MOB handler)
	
	// Bus Off interrupt
	if( CANGIT & (1 << BOFFIT) )
    25e2:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    25e6:	86 ff       	sbrs	r24, 6
    25e8:	03 c0       	rjmp	.+6      	; 0x25f0 <__vector_18+0x72>
	{
		// Just clear it for now
		CANGIT = (1 << BOFFIT);
    25ea:	80 e4       	ldi	r24, 0x40	; 64
    25ec:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
	}
	
	// Frame buffer receive (burst receive interrupt)
	// This should not be used
	if( CANGIT & (1 << BXOK) )
    25f0:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    25f4:	84 ff       	sbrs	r24, 4
    25f6:	0a c0       	rjmp	.+20     	; 0x260c <__vector_18+0x8e>
	{
		MBASSERT(0);
    25f8:	45 ef       	ldi	r20, 0xF5	; 245
    25fa:	51 e0       	ldi	r21, 0x01	; 1
    25fc:	6c e4       	ldi	r22, 0x4C	; 76
    25fe:	73 e0       	ldi	r23, 0x03	; 3
    2600:	80 e0       	ldi	r24, 0x00	; 0
    2602:	0e 94 e0 23 	call	0x47c0	; 0x47c0 <PlatformAssert>
		
		// TODO: Must write the CONMOB fields of the MOB that interrupted first?
		// Just clear it for now
		CANGIT = (1 << BXOK);
    2606:	80 e1       	ldi	r24, 0x10	; 16
    2608:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
	}
	
	// Bit stuffing error on receive
	if( CANGIT & (1 << SERG) )
    260c:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    2610:	83 ff       	sbrs	r24, 3
    2612:	03 c0       	rjmp	.+6      	; 0x261a <__vector_18+0x9c>
	{
		// Just clear it for now.  Ignored.
		CANGIT = (1 << SERG);
    2614:	88 e0       	ldi	r24, 0x08	; 8
    2616:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
	}
	
	// CRC error on receive
	if( CANGIT & (1 << CERG) )
    261a:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    261e:	82 ff       	sbrs	r24, 2
    2620:	03 c0       	rjmp	.+6      	; 0x2628 <__vector_18+0xaa>
	{
		// Just clear it for now.  Ignored.
		CANGIT = (1 << CERG);
    2622:	84 e0       	ldi	r24, 0x04	; 4
    2624:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
	}
	
	// Form error
	if( CANGIT & (1 << FERG) )
    2628:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    262c:	81 ff       	sbrs	r24, 1
    262e:	03 c0       	rjmp	.+6      	; 0x2636 <__vector_18+0xb8>
	{
		// If detected form error on transmit, could be duplicate to MOB error interrupt (see 16.8.2 - Interrupt Behavior)
		// Ignore this one
		
		// Just clear it for now.  Ignored.
		CANGIT = (1 << FERG);
    2630:	82 e0       	ldi	r24, 0x02	; 2
    2632:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
	}
	
	// ACK missing on transmit (nobody's listening! (or failure on transmit???))
	if( CANGIT & (1 << AERG) )
    2636:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    263a:	80 ff       	sbrs	r24, 0
    263c:	13 c0       	rjmp	.+38     	; 0x2664 <__vector_18+0xe6>
	{
		// Clear the interrupt
		CANGIT = (1 << AERG);
    263e:	81 e0       	ldi	r24, 0x01	; 1
    2640:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
		
		if( sg_u8TransmitAttempts < 20 )
    2644:	80 91 68 09 	lds	r24, 0x0968	; 0x800968 <sg_u8TransmitAttempts>
    2648:	84 31       	cpi	r24, 0x14	; 20
    264a:	50 f4       	brcc	.+20     	; 0x2660 <__vector_18+0xe2>
		{
			// Retransmit now
			CANSendMessageInternal( sg_eLastTXType, sg_u8LastTXData, sg_u8LastTXDataLen, true );
    264c:	21 e0       	ldi	r18, 0x01	; 1
    264e:	40 91 66 09 	lds	r20, 0x0966	; 0x800966 <sg_u8LastTXDataLen>
    2652:	6d e3       	ldi	r22, 0x3D	; 61
    2654:	79 e0       	ldi	r23, 0x09	; 9
    2656:	80 91 67 09 	lds	r24, 0x0967	; 0x800967 <sg_eLastTXType>
    265a:	0e 94 18 10 	call	0x2030	; 0x2030 <CANSendMessageInternal>
    265e:	02 c0       	rjmp	.+4      	; 0x2664 <__vector_18+0xe6>
		}
		else
		{
			// Retries exhausted.  Give up
			sg_bBusy = false;
    2660:	10 92 69 09 	sts	0x0969, r1	; 0x800969 <sg_bBusy>
		}
	}

	// Reenable CAN general interrupt	
//	CANGIE |= (1 << ENIT);
    CANIE2 = saved_canie2;
    2664:	10 93 de 00 	sts	0x00DE, r17	; 0x8000de <__TEXT_REGION_LENGTH__+0x7f00de>
    CANGIE = saved_cangie;
    2668:	d0 93 db 00 	sts	0x00DB, r29	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f00db>
}
    266c:	ff 91       	pop	r31
    266e:	ef 91       	pop	r30
    2670:	df 91       	pop	r29
    2672:	cf 91       	pop	r28
    2674:	bf 91       	pop	r27
    2676:	af 91       	pop	r26
    2678:	9f 91       	pop	r25
    267a:	8f 91       	pop	r24
    267c:	7f 91       	pop	r23
    267e:	6f 91       	pop	r22
    2680:	5f 91       	pop	r21
    2682:	4f 91       	pop	r20
    2684:	3f 91       	pop	r19
    2686:	2f 91       	pop	r18
    2688:	1f 91       	pop	r17
    268a:	0f 91       	pop	r16
    268c:	0f 90       	pop	r0
    268e:	0f be       	out	0x3f, r0	; 63
    2690:	0f 90       	pop	r0
    2692:	1f 90       	pop	r1
    2694:	18 95       	reti

Disassembly of section .text.CANSendMessage:

00004d22 <CANSendMessage>:
					 uint8_t* pu8Data,
					 uint8_t u8DataLen )
{
	// If we're busy, kick it back so we're cooperatively multitasking
	// rather than spin locking
	if (sg_bBusy)
    4d22:	90 91 69 09 	lds	r25, 0x0969	; 0x800969 <sg_bBusy>
    4d26:	91 11       	cpse	r25, r1
    4d28:	05 c0       	rjmp	.+10     	; 0x4d34 <CANSendMessage+0x12>
	{
		return(false);
	}

	CANSendMessageInternal( eType, pu8Data, u8DataLen, false );
    4d2a:	20 e0       	ldi	r18, 0x00	; 0
    4d2c:	0e 94 18 10 	call	0x2030	; 0x2030 <CANSendMessageInternal>
	return( true );
    4d30:	81 e0       	ldi	r24, 0x01	; 1
    4d32:	08 95       	ret
{
	// If we're busy, kick it back so we're cooperatively multitasking
	// rather than spin locking
	if (sg_bBusy)
	{
		return(false);
    4d34:	80 e0       	ldi	r24, 0x00	; 0
	}

	CANSendMessageInternal( eType, pu8Data, u8DataLen, false );
	return( true );
}
    4d36:	08 95       	ret

Disassembly of section .text.CANSetRXCallback:

00004e8e <CANSetRXCallback>:

void CANSetRXCallback( void (*pfCallback)(ECANMessageType eType, uint8_t* pu8Data, uint8_t u8DataLen) )
{
	sg_pfRXCallback = pfCallback;
    4e8e:	90 93 4e 09 	sts	0x094E, r25	; 0x80094e <sg_pfRXCallback+0x1>
    4e92:	80 93 4d 09 	sts	0x094D, r24	; 0x80094d <sg_pfRXCallback>
    4e96:	08 95       	ret

Disassembly of section .text.CANInit:

000035e6 <CANInit>:
}

void CANInit( void )
{
    35e6:	0f 93       	push	r16
    35e8:	cf 93       	push	r28
	// Init clock
	// See datasheet table 16-2.
	// For 8Mhz, set CAN rate to 500 Kbps
	CANBT1 = 0x02;
    35ea:	c2 e0       	ldi	r28, 0x02	; 2
    35ec:	c0 93 e2 00 	sts	0x00E2, r28	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f00e2>
	CANBT2 = 0x04;
    35f0:	84 e0       	ldi	r24, 0x04	; 4
    35f2:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f00e3>
	CANBT3 = 0x12;
    35f6:	82 e1       	ldi	r24, 0x12	; 18
    35f8:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7f00e4>
	
	// Init message objects (MOBs) since there are no defaults at reset
	CANMOBSet( 0, &sg_sMOBDisabled, NULL, 0 );
    35fc:	00 e0       	ldi	r16, 0x00	; 0
    35fe:	20 e0       	ldi	r18, 0x00	; 0
    3600:	30 e0       	ldi	r19, 0x00	; 0
    3602:	47 ea       	ldi	r20, 0xA7	; 167
    3604:	53 e0       	ldi	r21, 0x03	; 3
    3606:	60 e0       	ldi	r22, 0x00	; 0
    3608:	80 e0       	ldi	r24, 0x00	; 0
    360a:	0e 94 67 0d 	call	0x1ace	; 0x1ace <CANMOBSet>
	CANMOBSet( 1, &sg_sMOBDisabled, NULL, 0 );
    360e:	20 e0       	ldi	r18, 0x00	; 0
    3610:	30 e0       	ldi	r19, 0x00	; 0
    3612:	47 ea       	ldi	r20, 0xA7	; 167
    3614:	53 e0       	ldi	r21, 0x03	; 3
    3616:	60 e0       	ldi	r22, 0x00	; 0
    3618:	81 e0       	ldi	r24, 0x01	; 1
    361a:	0e 94 67 0d 	call	0x1ace	; 0x1ace <CANMOBSet>
	CANMOBSet( 2, &sg_sMOBDisabled, NULL, 0 );
    361e:	20 e0       	ldi	r18, 0x00	; 0
    3620:	30 e0       	ldi	r19, 0x00	; 0
    3622:	47 ea       	ldi	r20, 0xA7	; 167
    3624:	53 e0       	ldi	r21, 0x03	; 3
    3626:	60 e0       	ldi	r22, 0x00	; 0
    3628:	82 e0       	ldi	r24, 0x02	; 2
    362a:	0e 94 67 0d 	call	0x1ace	; 0x1ace <CANMOBSet>
	CANMOBSet( 3, &sg_sMOBDisabled, NULL, 0 );
    362e:	20 e0       	ldi	r18, 0x00	; 0
    3630:	30 e0       	ldi	r19, 0x00	; 0
    3632:	47 ea       	ldi	r20, 0xA7	; 167
    3634:	53 e0       	ldi	r21, 0x03	; 3
    3636:	60 e0       	ldi	r22, 0x00	; 0
    3638:	83 e0       	ldi	r24, 0x03	; 3
    363a:	0e 94 67 0d 	call	0x1ace	; 0x1ace <CANMOBSet>
	CANMOBSet( 4, &sg_sMOBDisabled, NULL, 0 );
    363e:	20 e0       	ldi	r18, 0x00	; 0
    3640:	30 e0       	ldi	r19, 0x00	; 0
    3642:	47 ea       	ldi	r20, 0xA7	; 167
    3644:	53 e0       	ldi	r21, 0x03	; 3
    3646:	60 e0       	ldi	r22, 0x00	; 0
    3648:	84 e0       	ldi	r24, 0x04	; 4
    364a:	0e 94 67 0d 	call	0x1ace	; 0x1ace <CANMOBSet>
	CANMOBSet( 5, &sg_sMOBDisabled, NULL, 0 );
    364e:	20 e0       	ldi	r18, 0x00	; 0
    3650:	30 e0       	ldi	r19, 0x00	; 0
    3652:	47 ea       	ldi	r20, 0xA7	; 167
    3654:	53 e0       	ldi	r21, 0x03	; 3
    3656:	60 e0       	ldi	r22, 0x00	; 0
    3658:	85 e0       	ldi	r24, 0x05	; 5
    365a:	0e 94 67 0d 	call	0x1ace	; 0x1ace <CANMOBSet>
	
	// Setup generic RX
	CANMOBSet( CANMOB_RX_IDX, &sg_sMOBGenericReceive, NULL, 0 );
    365e:	20 e0       	ldi	r18, 0x00	; 0
    3660:	30 e0       	ldi	r19, 0x00	; 0
    3662:	4f e9       	ldi	r20, 0x9F	; 159
    3664:	53 e0       	ldi	r21, 0x03	; 3
    3666:	60 e0       	ldi	r22, 0x00	; 0
    3668:	80 e0       	ldi	r24, 0x00	; 0
    366a:	0e 94 67 0d 	call	0x1ace	; 0x1ace <CANMOBSet>
	
	// Enable general CAN interrupts
	CANGIE = (1 << ENIT) | (1 << ENRX) | (1 << ENTX) | (1 << ENERR) | (1 << ENBX) | (1 << ENERG);
    366e:	8e eb       	ldi	r24, 0xBE	; 190
    3670:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f00db>

//	CANGIE &= ~(1 << ENOVRT);  // Disable CAN timer overflow interrupt

	// Enable the bus
	CANGCON = (1 << ENASTB);
    3674:	c0 93 d8 00 	sts	0x00D8, r28	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f00d8>
	sg_bBusy = false;
    3678:	10 92 69 09 	sts	0x0969, r1	; 0x800969 <sg_bBusy>
}
    367c:	cf 91       	pop	r28
    367e:	0f 91       	pop	r16
    3680:	08 95       	ret

Disassembly of section .text.DebugOut:

00004e3e <DebugOut>:
}

#endif

void DebugOut( const char* peFormat, ... )
{
    4e3e:	cf 93       	push	r28
    4e40:	df 93       	push	r29
    4e42:	cd b7       	in	r28, 0x3d	; 61
    4e44:	de b7       	in	r29, 0x3e	; 62
	
	va_end( args );	 */
	
	//DebugSerialSend( (uint8_t*)u8Buffer, strlen(u8Buffer) );
#endif
}
    4e46:	df 91       	pop	r29
    4e48:	cf 91       	pop	r28
    4e4a:	08 95       	ret

Disassembly of section .text.EEPROMRead:

00004da4 <EEPROMRead>:
}

uint8_t EEPROMRead(uint16_t u16Address)
{
	// Wait for any completion of writes, etc..
	while (EECR & (1 << EEWE));
    4da4:	f9 99       	sbic	0x1f, 1	; 31
    4da6:	fe cf       	rjmp	.-4      	; 0x4da4 <EEPROMRead>

	// Set address	
	EEAR = u16Address;
    4da8:	92 bd       	out	0x22, r25	; 34
    4daa:	81 bd       	out	0x21, r24	; 33
	
	// Start EEPROM read
	EECR |= (1 << EERE);
    4dac:	8f b3       	in	r24, 0x1f	; 31
    4dae:	81 60       	ori	r24, 0x01	; 1
    4db0:	8f bb       	out	0x1f, r24	; 31
	
	// Return the data
	return(EEDR);
    4db2:	80 b5       	in	r24, 0x20	; 32
    4db4:	08 95       	ret

Disassembly of section .text.I2CBitDelay:

00004e4c <I2CBitDelay>:
#define SDA_SET_INPUT()			(I2C_PORT_DDR &= ((uint8_t) ~(1 << I2C_SDA_PIN))); SDA_HIGH()

// Delays for one I2C bit's worth of time
static void I2CBitDelay(void)
{
	Delay(10);
    4e4c:	6a e0       	ldi	r22, 0x0A	; 10
    4e4e:	70 e0       	ldi	r23, 0x00	; 0
    4e50:	80 e0       	ldi	r24, 0x00	; 0
    4e52:	90 e0       	ldi	r25, 0x00	; 0
    4e54:	0e 94 2f 21 	call	0x425e	; 0x425e <Delay>
    4e58:	08 95       	ret

Disassembly of section .text.I2CStart:

00004768 <I2CStart>:

// Send an I2C start sequence and quantize foreground code to the overflow
// timer
void I2CStart(void)
{
	SDA_SET_OUTPUT();
    4768:	8a b1       	in	r24, 0x0a	; 10
    476a:	82 60       	ori	r24, 0x02	; 2
    476c:	8a b9       	out	0x0a, r24	; 10
	SDA_HIGH();
    476e:	8b b1       	in	r24, 0x0b	; 11
    4770:	82 60       	ori	r24, 0x02	; 2
    4772:	8b b9       	out	0x0b, r24	; 11
	SCL_HIGH();
    4774:	8b b1       	in	r24, 0x0b	; 11
    4776:	81 60       	ori	r24, 0x01	; 1
    4778:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    477a:	0e 94 26 27 	call	0x4e4c	; 0x4e4c <I2CBitDelay>
	SDA_LOW();
    477e:	8b b1       	in	r24, 0x0b	; 11
    4780:	8d 7f       	andi	r24, 0xFD	; 253
    4782:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    4784:	0e 94 26 27 	call	0x4e4c	; 0x4e4c <I2CBitDelay>
	SCL_LOW();
    4788:	8b b1       	in	r24, 0x0b	; 11
    478a:	8e 7f       	andi	r24, 0xFE	; 254
    478c:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    478e:	0e 94 26 27 	call	0x4e4c	; 0x4e4c <I2CBitDelay>
    4792:	08 95       	ret

Disassembly of section .text.I2CStop:

0000490a <I2CStop>:
}

// Send an I2C stop sequence
void I2CStop(void)
{
	SDA_LOW();
    490a:	8b b1       	in	r24, 0x0b	; 11
    490c:	8d 7f       	andi	r24, 0xFD	; 253
    490e:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    4910:	0e 94 26 27 	call	0x4e4c	; 0x4e4c <I2CBitDelay>
	SCL_HIGH();
    4914:	8b b1       	in	r24, 0x0b	; 11
    4916:	81 60       	ori	r24, 0x01	; 1
    4918:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    491a:	0e 94 26 27 	call	0x4e4c	; 0x4e4c <I2CBitDelay>
	SDA_SET_INPUT();
    491e:	8a b1       	in	r24, 0x0a	; 10
    4920:	8d 7f       	andi	r24, 0xFD	; 253
    4922:	8a b9       	out	0x0a, r24	; 10
    4924:	8b b1       	in	r24, 0x0b	; 11
    4926:	82 60       	ori	r24, 0x02	; 2
    4928:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    492a:	0e 94 26 27 	call	0x4e4c	; 0x4e4c <I2CBitDelay>
    492e:	08 95       	ret

Disassembly of section .text.I2CUnstick:

000044b2 <I2CUnstick>:
}

// Unsticks an I2C bus
void I2CUnstick(void)
{
    44b2:	cf 93       	push	r28
	uint8_t u8UnstickBits = 64;

	SCL_SET_OUTPUT();
    44b4:	8a b1       	in	r24, 0x0a	; 10
    44b6:	81 60       	ori	r24, 0x01	; 1
    44b8:	8a b9       	out	0x0a, r24	; 10
	SDA_SET_OUTPUT();
    44ba:	8a b1       	in	r24, 0x0a	; 10
    44bc:	82 60       	ori	r24, 0x02	; 2
    44be:	8a b9       	out	0x0a, r24	; 10
}

// Unsticks an I2C bus
void I2CUnstick(void)
{
	uint8_t u8UnstickBits = 64;
    44c0:	c0 e4       	ldi	r28, 0x40	; 64

	SCL_SET_OUTPUT();
	SDA_SET_OUTPUT();
	
	while (u8UnstickBits)
    44c2:	11 c0       	rjmp	.+34     	; 0x44e6 <I2CUnstick+0x34>
	{
		SCL_LOW();
    44c4:	8b b1       	in	r24, 0x0b	; 11
    44c6:	8e 7f       	andi	r24, 0xFE	; 254
    44c8:	8b b9       	out	0x0b, r24	; 11
		SDA_LOW();
    44ca:	8b b1       	in	r24, 0x0b	; 11
    44cc:	8d 7f       	andi	r24, 0xFD	; 253
    44ce:	8b b9       	out	0x0b, r24	; 11
		I2CBitDelay();
    44d0:	0e 94 26 27 	call	0x4e4c	; 0x4e4c <I2CBitDelay>
		SCL_HIGH();
    44d4:	8b b1       	in	r24, 0x0b	; 11
    44d6:	81 60       	ori	r24, 0x01	; 1
    44d8:	8b b9       	out	0x0b, r24	; 11
		SDA_HIGH();
    44da:	8b b1       	in	r24, 0x0b	; 11
    44dc:	82 60       	ori	r24, 0x02	; 2
    44de:	8b b9       	out	0x0b, r24	; 11
		I2CBitDelay();
    44e0:	0e 94 26 27 	call	0x4e4c	; 0x4e4c <I2CBitDelay>
		u8UnstickBits--;
    44e4:	c1 50       	subi	r28, 0x01	; 1
	uint8_t u8UnstickBits = 64;

	SCL_SET_OUTPUT();
	SDA_SET_OUTPUT();
	
	while (u8UnstickBits)
    44e6:	c1 11       	cpse	r28, r1
    44e8:	ed cf       	rjmp	.-38     	; 0x44c4 <I2CUnstick+0x12>
		SCL_HIGH();
		SDA_HIGH();
		I2CBitDelay();
		u8UnstickBits--;
	}
}
    44ea:	cf 91       	pop	r28
    44ec:	08 95       	ret

Disassembly of section .text.I2CTxByte:

00003e0e <I2CTxByte>:

// Sends a single I2C byte. Returns false if the byte is not acked, or true if it is.
bool I2CTxByte(uint8_t u8Byte)
{
    3e0e:	cf 93       	push	r28
    3e10:	df 93       	push	r29
    3e12:	d8 2f       	mov	r29, r24
	uint8_t u8Length = 8;			// 8 Bits to send
	bool bAck = false;

	SDA_SET_OUTPUT();
    3e14:	8a b1       	in	r24, 0x0a	; 10
    3e16:	82 60       	ori	r24, 0x02	; 2
    3e18:	8a b9       	out	0x0a, r24	; 10
}

// Sends a single I2C byte. Returns false if the byte is not acked, or true if it is.
bool I2CTxByte(uint8_t u8Byte)
{
	uint8_t u8Length = 8;			// 8 Bits to send
    3e1a:	c8 e0       	ldi	r28, 0x08	; 8
	bool bAck = false;

	SDA_SET_OUTPUT();

	while (u8Length)
    3e1c:	15 c0       	rjmp	.+42     	; 0x3e48 <I2CTxByte+0x3a>
	{
		if (u8Byte & 0x80)
    3e1e:	dd 23       	and	r29, r29
    3e20:	24 f4       	brge	.+8      	; 0x3e2a <I2CTxByte+0x1c>
		{
			SDA_HIGH();
    3e22:	8b b1       	in	r24, 0x0b	; 11
    3e24:	82 60       	ori	r24, 0x02	; 2
    3e26:	8b b9       	out	0x0b, r24	; 11
    3e28:	03 c0       	rjmp	.+6      	; 0x3e30 <I2CTxByte+0x22>
		}
		else
		{
			SDA_LOW();
    3e2a:	8b b1       	in	r24, 0x0b	; 11
    3e2c:	8d 7f       	andi	r24, 0xFD	; 253
    3e2e:	8b b9       	out	0x0b, r24	; 11
		}
		
		// Drive SCL high
		SCL_HIGH();
    3e30:	8b b1       	in	r24, 0x0b	; 11
    3e32:	81 60       	ori	r24, 0x01	; 1
    3e34:	8b b9       	out	0x0b, r24	; 11
		
		I2CBitDelay();
    3e36:	0e 94 26 27 	call	0x4e4c	; 0x4e4c <I2CBitDelay>
		
		// Ensure SCL is low
		SCL_LOW();
    3e3a:	8b b1       	in	r24, 0x0b	; 11
    3e3c:	8e 7f       	andi	r24, 0xFE	; 254
    3e3e:	8b b9       	out	0x0b, r24	; 11
	
		// SDA Is now set. Delay.
		I2CBitDelay();
    3e40:	0e 94 26 27 	call	0x4e4c	; 0x4e4c <I2CBitDelay>
		
		// Next bit
		u8Byte <<= 1;	
    3e44:	dd 0f       	add	r29, r29
		u8Length--;
    3e46:	c1 50       	subi	r28, 0x01	; 1
	uint8_t u8Length = 8;			// 8 Bits to send
	bool bAck = false;

	SDA_SET_OUTPUT();

	while (u8Length)
    3e48:	c1 11       	cpse	r28, r1
    3e4a:	e9 cf       	rjmp	.-46     	; 0x3e1e <I2CTxByte+0x10>
		// Next bit
		u8Byte <<= 1;	
		u8Length--;
	}
	
	SDA_SET_INPUT();
    3e4c:	8a b1       	in	r24, 0x0a	; 10
    3e4e:	8d 7f       	andi	r24, 0xFD	; 253
    3e50:	8a b9       	out	0x0a, r24	; 10
    3e52:	8b b1       	in	r24, 0x0b	; 11
    3e54:	82 60       	ori	r24, 0x02	; 2
    3e56:	8b b9       	out	0x0b, r24	; 11
	SCL_HIGH();
    3e58:	8b b1       	in	r24, 0x0b	; 11
    3e5a:	81 60       	ori	r24, 0x01	; 1
    3e5c:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    3e5e:	0e 94 26 27 	call	0x4e4c	; 0x4e4c <I2CBitDelay>
	
	// See if the byte was acknowledged
	if (SDA_READ())
    3e62:	49 9b       	sbis	0x09, 1	; 9
	{
		bAck = false;
	}
	else
	{
		bAck = true;
    3e64:	c1 e0       	ldi	r28, 0x01	; 1
	}
	
	SCL_LOW();
    3e66:	8b b1       	in	r24, 0x0b	; 11
    3e68:	8e 7f       	andi	r24, 0xFE	; 254
    3e6a:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    3e6c:	0e 94 26 27 	call	0x4e4c	; 0x4e4c <I2CBitDelay>
	return(bAck);
}
    3e70:	8c 2f       	mov	r24, r28
    3e72:	df 91       	pop	r29
    3e74:	cf 91       	pop	r28
    3e76:	08 95       	ret

Disassembly of section .text.I2CRxByte:

00003c34 <I2CRxByte>:

// Receives a single I2C byte and will optionally generate an ack at the end
uint8_t I2CRxByte(bool bAck)
{
    3c34:	1f 93       	push	r17
    3c36:	cf 93       	push	r28
    3c38:	df 93       	push	r29
    3c3a:	18 2f       	mov	r17, r24
	uint8_t u8Data = 0;
	uint8_t u8Count = 8;
	
	SDA_SET_INPUT();
    3c3c:	8a b1       	in	r24, 0x0a	; 10
    3c3e:	8d 7f       	andi	r24, 0xFD	; 253
    3c40:	8a b9       	out	0x0a, r24	; 10
    3c42:	8b b1       	in	r24, 0x0b	; 11
    3c44:	82 60       	ori	r24, 0x02	; 2
    3c46:	8b b9       	out	0x0b, r24	; 11

// Receives a single I2C byte and will optionally generate an ack at the end
uint8_t I2CRxByte(bool bAck)
{
	uint8_t u8Data = 0;
	uint8_t u8Count = 8;
    3c48:	c8 e0       	ldi	r28, 0x08	; 8
}

// Receives a single I2C byte and will optionally generate an ack at the end
uint8_t I2CRxByte(bool bAck)
{
	uint8_t u8Data = 0;
    3c4a:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t u8Count = 8;
	
	SDA_SET_INPUT();
	
	// Consume all 8 data bits
	while (u8Count)
    3c4c:	0e c0       	rjmp	.+28     	; 0x3c6a <I2CRxByte+0x36>
	{
		u8Data <<= 1;
    3c4e:	dd 0f       	add	r29, r29

		SCL_HIGH();
    3c50:	8b b1       	in	r24, 0x0b	; 11
    3c52:	81 60       	ori	r24, 0x01	; 1
    3c54:	8b b9       	out	0x0b, r24	; 11
		I2CBitDelay();
    3c56:	0e 94 26 27 	call	0x4e4c	; 0x4e4c <I2CBitDelay>
			
		if (SDA_READ())
    3c5a:	49 99       	sbic	0x09, 1	; 9
		{
			u8Data |= 1;
    3c5c:	d1 60       	ori	r29, 0x01	; 1
		}
		
		SCL_LOW();
    3c5e:	8b b1       	in	r24, 0x0b	; 11
    3c60:	8e 7f       	andi	r24, 0xFE	; 254
    3c62:	8b b9       	out	0x0b, r24	; 11
		I2CBitDelay();
    3c64:	0e 94 26 27 	call	0x4e4c	; 0x4e4c <I2CBitDelay>
		u8Count--;
    3c68:	c1 50       	subi	r28, 0x01	; 1
	uint8_t u8Count = 8;
	
	SDA_SET_INPUT();
	
	// Consume all 8 data bits
	while (u8Count)
    3c6a:	c1 11       	cpse	r28, r1
    3c6c:	f0 cf       	rjmp	.-32     	; 0x3c4e <I2CRxByte+0x1a>
		I2CBitDelay();
		u8Count--;
	}

	// See if we acknowledge this
	SDA_SET_OUTPUT();
    3c6e:	8a b1       	in	r24, 0x0a	; 10
    3c70:	82 60       	ori	r24, 0x02	; 2
    3c72:	8a b9       	out	0x0a, r24	; 10
	if (bAck)
    3c74:	11 23       	and	r17, r17
    3c76:	21 f0       	breq	.+8      	; 0x3c80 <I2CRxByte+0x4c>
	{
		SDA_LOW();
    3c78:	8b b1       	in	r24, 0x0b	; 11
    3c7a:	8d 7f       	andi	r24, 0xFD	; 253
    3c7c:	8b b9       	out	0x0b, r24	; 11
    3c7e:	03 c0       	rjmp	.+6      	; 0x3c86 <I2CRxByte+0x52>
	}
	else
	{
		SDA_HIGH();
    3c80:	8b b1       	in	r24, 0x0b	; 11
    3c82:	82 60       	ori	r24, 0x02	; 2
    3c84:	8b b9       	out	0x0b, r24	; 11
	}
	
	I2CBitDelay();
    3c86:	0e 94 26 27 	call	0x4e4c	; 0x4e4c <I2CBitDelay>
	SCL_HIGH();
    3c8a:	8b b1       	in	r24, 0x0b	; 11
    3c8c:	81 60       	ori	r24, 0x01	; 1
    3c8e:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    3c90:	0e 94 26 27 	call	0x4e4c	; 0x4e4c <I2CBitDelay>
	SCL_LOW();
    3c94:	8b b1       	in	r24, 0x0b	; 11
    3c96:	8e 7f       	andi	r24, 0xFE	; 254
    3c98:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    3c9a:	0e 94 26 27 	call	0x4e4c	; 0x4e4c <I2CBitDelay>
	SDA_LOW();
    3c9e:	8b b1       	in	r24, 0x0b	; 11
    3ca0:	8d 7f       	andi	r24, 0xFD	; 253
    3ca2:	8b b9       	out	0x0b, r24	; 11

	return(u8Data);	
}
    3ca4:	8d 2f       	mov	r24, r29
    3ca6:	df 91       	pop	r29
    3ca8:	cf 91       	pop	r28
    3caa:	1f 91       	pop	r17
    3cac:	08 95       	ret

Disassembly of section .text.I2CSetup:

00004794 <I2CSetup>:
// Prepares the SCL/SDA pins for I2C operation and returns when the CPU is
// quantized to the timer (for consistent bit alignment)
void I2CSetup(void)
{
	// Deassert SCL and SDA
	SCL_HIGH();
    4794:	8b b1       	in	r24, 0x0b	; 11
    4796:	81 60       	ori	r24, 0x01	; 1
    4798:	8b b9       	out	0x0b, r24	; 11
	SDA_HIGH();
    479a:	8b b1       	in	r24, 0x0b	; 11
    479c:	82 60       	ori	r24, 0x02	; 2
    479e:	8b b9       	out	0x0b, r24	; 11

	// Set SCL and SDA lines as push/pull output drives
	SCL_SET_OUTPUT();
    47a0:	8a b1       	in	r24, 0x0a	; 10
    47a2:	81 60       	ori	r24, 0x01	; 1
    47a4:	8a b9       	out	0x0a, r24	; 10
	
	// Turn on SDA, set as an input
	SDA_SET_INPUT();
    47a6:	8a b1       	in	r24, 0x0a	; 10
    47a8:	8d 7f       	andi	r24, 0xFD	; 253
    47aa:	8a b9       	out	0x0a, r24	; 10
    47ac:	8b b1       	in	r24, 0x0b	; 11
    47ae:	82 60       	ori	r24, 0x02	; 2
    47b0:	8b b9       	out	0x0b, r24	; 11
	
	Delay(20);
    47b2:	64 e1       	ldi	r22, 0x14	; 20
    47b4:	70 e0       	ldi	r23, 0x00	; 0
    47b6:	80 e0       	ldi	r24, 0x00	; 0
    47b8:	90 e0       	ldi	r25, 0x00	; 0
    47ba:	0e 94 2f 21 	call	0x425e	; 0x425e <Delay>
    47be:	08 95       	ret

Disassembly of section .text.I2CStartTransaction:

00004842 <I2CStartTransaction>:

// Sets up the I2C pins, sends slave address/read/write byte, and waits for acknowledgment.
// Returns false if no device is responding.
bool I2CStartTransaction(uint8_t u8SlaveAddress,
						 bool bRead)
{
    4842:	cf 93       	push	r28
    4844:	df 93       	push	r29
    4846:	c8 2f       	mov	r28, r24
    4848:	d6 2f       	mov	r29, r22
	// Set up the pins for I2C operation
	I2CSetup();
    484a:	0e 94 ca 23 	call	0x4794	; 0x4794 <I2CSetup>
	
	// I2C Start condition
	I2CStart();
    484e:	0e 94 b4 23 	call	0x4768	; 0x4768 <I2CStart>

	// If it's a read operation, clear the lower bit
	if (bRead)
    4852:	dd 23       	and	r29, r29
    4854:	19 f0       	breq	.+6      	; 0x485c <I2CStartTransaction+0x1a>
	{
		u8SlaveAddress |= 1;
    4856:	8c 2f       	mov	r24, r28
    4858:	81 60       	ori	r24, 0x01	; 1
    485a:	02 c0       	rjmp	.+4      	; 0x4860 <I2CStartTransaction+0x1e>
	}
	else
	{
		// Otherwise set it
		u8SlaveAddress &= (uint8_t) (~1);
    485c:	8c 2f       	mov	r24, r28
    485e:	8e 7f       	andi	r24, 0xFE	; 254
	}
	
	// Now send out the slave address + the read/write bit
	return(I2CTxByte(u8SlaveAddress));
    4860:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <I2CTxByte>
}
    4864:	df 91       	pop	r29
    4866:	cf 91       	pop	r28
    4868:	08 95       	ret

Disassembly of section .text.CellCountExpectedSet:

000030fe <CellCountExpectedSet>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    30fe:	cf 92       	push	r12
    3100:	df 92       	push	r13
    3102:	ef 92       	push	r14
    3104:	ff 92       	push	r15
    3106:	8f 35       	cpi	r24, 0x5F	; 95
    3108:	08 f0       	brcs	.+2      	; 0x310c <CellCountExpectedSet+0xe>
    310a:	8e e5       	ldi	r24, 0x5E	; 94
    310c:	e0 e1       	ldi	r30, 0x10	; 16
    310e:	f1 e0       	ldi	r31, 0x01	; 1
    3110:	85 8b       	std	Z+21, r24	; 0x15
    3112:	c8 2e       	mov	r12, r24
    3114:	d1 2c       	mov	r13, r1
    3116:	e1 2c       	mov	r14, r1
    3118:	f1 2c       	mov	r15, r1
    311a:	aa ec       	ldi	r26, 0xCA	; 202
    311c:	b8 e0       	ldi	r27, 0x08	; 8
    311e:	a7 01       	movw	r20, r14
    3120:	96 01       	movw	r18, r12
    3122:	0e 94 b2 26 	call	0x4d64	; 0x4d64 <__muluhisi3>
    3126:	65 8f       	std	Z+29, r22	; 0x1d
    3128:	76 8f       	std	Z+30, r23	; 0x1e
    312a:	87 8f       	std	Z+31, r24	; 0x1f
    312c:	90 a3       	std	Z+32, r25	; 0x20
    312e:	a4 e9       	ldi	r26, 0x94	; 148
    3130:	b1 e1       	ldi	r27, 0x11	; 17
    3132:	0e 94 b2 26 	call	0x4d64	; 0x4d64 <__muluhisi3>
    3136:	61 a3       	std	Z+33, r22	; 0x21
    3138:	72 a3       	std	Z+34, r23	; 0x22
    313a:	83 a3       	std	Z+35, r24	; 0x23
    313c:	94 a3       	std	Z+36, r25	; 0x24
    313e:	81 a1       	ldd	r24, Z+33	; 0x21
    3140:	92 a1       	ldd	r25, Z+34	; 0x22
    3142:	a3 a1       	ldd	r26, Z+35	; 0x23
    3144:	b4 a1       	ldd	r27, Z+36	; 0x24
    3146:	45 8d       	ldd	r20, Z+29	; 0x1d
    3148:	56 8d       	ldd	r21, Z+30	; 0x1e
    314a:	67 8d       	ldd	r22, Z+31	; 0x1f
    314c:	70 a1       	ldd	r23, Z+32	; 0x20
    314e:	84 1b       	sub	r24, r20
    3150:	95 0b       	sbc	r25, r21
    3152:	a6 0b       	sbc	r26, r22
    3154:	b7 0b       	sbc	r27, r23
    3156:	88 0f       	add	r24, r24
    3158:	99 1f       	adc	r25, r25
    315a:	aa 1f       	adc	r26, r26
    315c:	bb 1f       	adc	r27, r27
    315e:	88 0f       	add	r24, r24
    3160:	99 1f       	adc	r25, r25
    3162:	aa 1f       	adc	r26, r26
    3164:	bb 1f       	adc	r27, r27
    3166:	88 0f       	add	r24, r24
    3168:	99 1f       	adc	r25, r25
    316a:	aa 1f       	adc	r26, r26
    316c:	bb 1f       	adc	r27, r27
    316e:	88 0f       	add	r24, r24
    3170:	99 1f       	adc	r25, r25
    3172:	aa 1f       	adc	r26, r26
    3174:	bb 1f       	adc	r27, r27
    3176:	88 0f       	add	r24, r24
    3178:	99 1f       	adc	r25, r25
    317a:	aa 1f       	adc	r26, r26
    317c:	bb 1f       	adc	r27, r27
    317e:	88 0f       	add	r24, r24
    3180:	99 1f       	adc	r25, r25
    3182:	aa 1f       	adc	r26, r26
    3184:	bb 1f       	adc	r27, r27
    3186:	88 0f       	add	r24, r24
    3188:	99 1f       	adc	r25, r25
    318a:	aa 1f       	adc	r26, r26
    318c:	bb 1f       	adc	r27, r27
    318e:	ac 01       	movw	r20, r24
    3190:	bd 01       	movw	r22, r26
    3192:	bb 23       	and	r27, r27
    3194:	24 f4       	brge	.+8      	; 0x319e <CellCountExpectedSet+0xa0>
    3196:	41 50       	subi	r20, 0x01	; 1
    3198:	5c 4f       	sbci	r21, 0xFC	; 252
    319a:	6f 4f       	sbci	r22, 0xFF	; 255
    319c:	7f 4f       	sbci	r23, 0xFF	; 255
    319e:	03 2e       	mov	r0, r19
    31a0:	3a e0       	ldi	r19, 0x0A	; 10
    31a2:	75 95       	asr	r23
    31a4:	67 95       	ror	r22
    31a6:	57 95       	ror	r21
    31a8:	47 95       	ror	r20
    31aa:	3a 95       	dec	r19
    31ac:	d1 f7       	brne	.-12     	; 0x31a2 <CellCountExpectedSet+0xa4>
    31ae:	30 2d       	mov	r19, r0
    31b0:	50 93 36 01 	sts	0x0136, r21	; 0x800136 <sg_sFrame+0x26>
    31b4:	40 93 35 01 	sts	0x0135, r20	; 0x800135 <sg_sFrame+0x25>
    31b8:	ff 90       	pop	r15
    31ba:	ef 90       	pop	r14
    31bc:	df 90       	pop	r13
    31be:	cf 90       	pop	r12
    31c0:	08 95       	ret

Disassembly of section .text.SendModuleControllerStatus:

00004dfe <SendModuleControllerStatus>:

static uint8_t sg_u8ControllerStatusMsgCount = 0;

static void SendModuleControllerStatus(void)
{
	sg_bSendModuleControllerStatus = true;
    4dfe:	81 e0       	ldi	r24, 0x01	; 1
    4e00:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <sg_bSendModuleControllerStatus>
	sg_u8ControllerStatusMsgCount = 0;
    4e04:	10 92 6e 09 	sts	0x096E, r1	; 0x80096e <sg_u8ControllerStatusMsgCount>
	sg_bIgnoreStatusRequests = true;  // Start ignoring new requests
    4e08:	80 93 76 09 	sts	0x0976, r24	; 0x800976 <sg_bIgnoreStatusRequests>
    4e0c:	08 95       	ret

Disassembly of section .text.ModuleControllerStateSet:

00004e98 <ModuleControllerStateSet>:
	MBASSERT(0);
}

static void ModuleControllerStateSet( EModuleControllerState eNext )
{
	if(eNext < EMODSTATE_COUNT)
    4e98:	84 30       	cpi	r24, 0x04	; 4
    4e9a:	10 f4       	brcc	.+4      	; 0x4ea0 <ModuleControllerStateSet+0x8>
	{
		sg_eModuleControllerStateTarget = eNext;
    4e9c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <sg_eModuleControllerStateTarget>
    4ea0:	08 95       	ret

Disassembly of section .text.ModuleControllerStateSetMax:

00004d38 <ModuleControllerStateSetMax>:



static void ModuleControllerStateSetMax( EModuleControllerState eNext )
{
	if(eNext < EMODSTATE_COUNT)
    4d38:	84 30       	cpi	r24, 0x04	; 4
    4d3a:	40 f4       	brcc	.+16     	; 0x4d4c <ModuleControllerStateSetMax+0x14>
	{
		sg_eModuleControllerStateMax = eNext;
    4d3c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <sg_eModuleControllerStateMax>
		if (sg_eModuleControllerStateCurrent > eNext) // we are in a higher state than allowed
    4d40:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    4d44:	89 17       	cp	r24, r25
    4d46:	10 f4       	brcc	.+4      	; 0x4d4c <ModuleControllerStateSetMax+0x14>
		{
			sg_eModuleControllerStateTarget = eNext;
    4d48:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <sg_eModuleControllerStateTarget>
    4d4c:	08 95       	ret

Disassembly of section .text.Check5VLoss:

00004cda <Check5VLoss>:
}

// Checks for 5V loss
static void Check5VLoss(uint8_t u8NewState)
{
	if( u8NewState & (1 << PIN_5V_DET) )
    4cda:	86 fd       	sbrc	r24, 6
    4cdc:	09 c0       	rjmp	.+18     	; 0x4cf0 <Check5VLoss+0x16>
		// Not asserted
	}
	else
	{
		// 5V detect is low
		FET_EN_DEASSERT();
    4cde:	88 b1       	in	r24, 0x08	; 8
    4ce0:	8f 7e       	andi	r24, 0xEF	; 239
    4ce2:	88 b9       	out	0x08, r24	; 8
		RELAY_EN_DEASSERT();
    4ce4:	8e b1       	in	r24, 0x0e	; 14
    4ce6:	8d 7f       	andi	r24, 0xFD	; 253
    4ce8:	8e b9       	out	0x0e, r24	; 14
		ModuleControllerStateSet( EMODSTATE_OFF );
    4cea:	80 e0       	ldi	r24, 0x00	; 0
    4cec:	0e 94 4c 27 	call	0x4e98	; 0x4e98 <ModuleControllerStateSet>
    4cf0:	08 95       	ret

Disassembly of section .text.CellDataConvertVoltage:

00003fa6 <CellDataConvertVoltage>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    3fa6:	fb 01       	movw	r30, r22
    3fa8:	dc 01       	movw	r26, r24
    3faa:	b3 70       	andi	r27, 0x03	; 3
    3fac:	2b ed       	ldi	r18, 0xDB	; 219
    3fae:	36 ea       	ldi	r19, 0xA6	; 166
    3fb0:	43 e2       	ldi	r20, 0x23	; 35
    3fb2:	50 e0       	ldi	r21, 0x00	; 0
    3fb4:	0e 94 b2 26 	call	0x4d64	; 0x4d64 <__muluhisi3>
    3fb8:	dc 01       	movw	r26, r24
    3fba:	cb 01       	movw	r24, r22
    3fbc:	07 2e       	mov	r0, r23
    3fbe:	7a e0       	ldi	r23, 0x0A	; 10
    3fc0:	b6 95       	lsr	r27
    3fc2:	a7 95       	ror	r26
    3fc4:	97 95       	ror	r25
    3fc6:	87 95       	ror	r24
    3fc8:	7a 95       	dec	r23
    3fca:	d1 f7       	brne	.-12     	; 0x3fc0 <CellDataConvertVoltage+0x1a>
    3fcc:	70 2d       	mov	r23, r0
    3fce:	9f 5f       	subi	r25, 0xFF	; 255
    3fd0:	af 4f       	sbci	r26, 0xFF	; 255
    3fd2:	bf 4f       	sbci	r27, 0xFF	; 255
    3fd4:	07 2e       	mov	r0, r23
    3fd6:	79 e0       	ldi	r23, 0x09	; 9
    3fd8:	b6 95       	lsr	r27
    3fda:	a7 95       	ror	r26
    3fdc:	97 95       	ror	r25
    3fde:	87 95       	ror	r24
    3fe0:	7a 95       	dec	r23
    3fe2:	d1 f7       	brne	.-12     	; 0x3fd8 <CellDataConvertVoltage+0x32>
    3fe4:	70 2d       	mov	r23, r0
    3fe6:	9c 01       	movw	r18, r24
    3fe8:	01 97       	sbiw	r24, 0x01	; 1
    3fea:	8e 3f       	cpi	r24, 0xFE	; 254
    3fec:	9f 4f       	sbci	r25, 0xFF	; 255
    3fee:	10 f4       	brcc	.+4      	; 0x3ff4 <CellDataConvertVoltage+0x4e>
    3ff0:	81 e0       	ldi	r24, 0x01	; 1
    3ff2:	03 c0       	rjmp	.+6      	; 0x3ffa <CellDataConvertVoltage+0x54>
    3ff4:	80 e0       	ldi	r24, 0x00	; 0
    3ff6:	20 e0       	ldi	r18, 0x00	; 0
    3ff8:	30 e0       	ldi	r19, 0x00	; 0
    3ffa:	30 97       	sbiw	r30, 0x00	; 0
    3ffc:	11 f0       	breq	.+4      	; 0x4002 <CellDataConvertVoltage+0x5c>
    3ffe:	31 83       	std	Z+1, r19	; 0x01
    4000:	20 83       	st	Z, r18
    4002:	08 95       	ret

Disassembly of section .text.CellDataConvertTemperature:

00003cae <CellDataConvertTemperature>:
    3cae:	8f 3f       	cpi	r24, 0xFF	; 255
    3cb0:	2f ef       	ldi	r18, 0xFF	; 255
    3cb2:	92 07       	cpc	r25, r18
    3cb4:	61 f1       	breq	.+88     	; 0x3d0e <CellDataConvertTemperature+0x60>
    3cb6:	28 2f       	mov	r18, r24
    3cb8:	2f 70       	andi	r18, 0x0F	; 15
    3cba:	94 ff       	sbrs	r25, 4
    3cbc:	02 c0       	rjmp	.+4      	; 0x3cc2 <CellDataConvertTemperature+0x14>
    3cbe:	90 6f       	ori	r25, 0xF0	; 240
    3cc0:	01 c0       	rjmp	.+2      	; 0x3cc4 <CellDataConvertTemperature+0x16>
    3cc2:	9f 77       	andi	r25, 0x7F	; 127
    3cc4:	95 95       	asr	r25
    3cc6:	87 95       	ror	r24
    3cc8:	95 95       	asr	r25
    3cca:	87 95       	ror	r24
    3ccc:	95 95       	asr	r25
    3cce:	87 95       	ror	r24
    3cd0:	95 95       	asr	r25
    3cd2:	87 95       	ror	r24
    3cd4:	ac 01       	movw	r20, r24
    3cd6:	4c 5e       	subi	r20, 0xEC	; 236
    3cd8:	5f 4f       	sbci	r21, 0xFF	; 255
    3cda:	4d 38       	cpi	r20, 0x8D	; 141
    3cdc:	51 05       	cpc	r21, r1
    3cde:	c8 f4       	brcc	.+50     	; 0x3d12 <CellDataConvertTemperature+0x64>
    3ce0:	34 e6       	ldi	r19, 0x64	; 100
    3ce2:	38 9f       	mul	r19, r24
    3ce4:	d0 01       	movw	r26, r0
    3ce6:	39 9f       	mul	r19, r25
    3ce8:	b0 0d       	add	r27, r0
    3cea:	11 24       	eor	r1, r1
    3cec:	30 e0       	ldi	r19, 0x00	; 0
    3cee:	40 e0       	ldi	r20, 0x00	; 0
    3cf0:	26 5f       	subi	r18, 0xF6	; 246
    3cf2:	3c 4f       	sbci	r19, 0xFC	; 252
    3cf4:	4f 4f       	sbci	r20, 0xFF	; 255
    3cf6:	f9 01       	movw	r30, r18
    3cf8:	84 91       	lpm	r24, Z
    3cfa:	47 fd       	sbrc	r20, 7
    3cfc:	80 81       	ld	r24, Z
    3cfe:	fd 01       	movw	r30, r26
    3d00:	e8 0f       	add	r30, r24
    3d02:	f1 1d       	adc	r31, r1
    3d04:	cf 01       	movw	r24, r30
    3d06:	81 56       	subi	r24, 0x61	; 97
    3d08:	9a 4e       	sbci	r25, 0xEA	; 234
    3d0a:	21 e0       	ldi	r18, 0x01	; 1
    3d0c:	05 c0       	rjmp	.+10     	; 0x3d18 <CellDataConvertTemperature+0x6a>
    3d0e:	20 e0       	ldi	r18, 0x00	; 0
    3d10:	03 c0       	rjmp	.+6      	; 0x3d18 <CellDataConvertTemperature+0x6a>
    3d12:	8f ef       	ldi	r24, 0xFF	; 255
    3d14:	9f ef       	ldi	r25, 0xFF	; 255
    3d16:	20 e0       	ldi	r18, 0x00	; 0
    3d18:	61 15       	cp	r22, r1
    3d1a:	71 05       	cpc	r23, r1
    3d1c:	19 f0       	breq	.+6      	; 0x3d24 <CellDataConvertTemperature+0x76>
    3d1e:	fb 01       	movw	r30, r22
    3d20:	91 83       	std	Z+1, r25	; 0x01
    3d22:	80 83       	st	Z, r24
    3d24:	82 2f       	mov	r24, r18
    3d26:	08 95       	ret

Disassembly of section .text.ModuleCurrentConvertReadings:

00002696 <ModuleCurrentConvertReadings>:
    2696:	a0 91 59 01 	lds	r26, 0x0159	; 0x800159 <sg_sFrame+0x49>
    269a:	b0 91 5a 01 	lds	r27, 0x015A	; 0x80015a <sg_sFrame+0x4a>
    269e:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <sg_sFrame+0x4c>
    26a2:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <sg_sFrame+0x4d>
    26a6:	e0 91 79 09 	lds	r30, 0x0979	; 0x800979 <sg_u8CurrentBufferIndex>
    26aa:	ef 3f       	cpi	r30, 0xFF	; 255
    26ac:	81 f4       	brne	.+32     	; 0x26ce <ModuleCurrentConvertReadings+0x38>
    26ae:	07 c0       	rjmp	.+14     	; 0x26be <ModuleCurrentConvertReadings+0x28>
    26b0:	f0 e0       	ldi	r31, 0x00	; 0
    26b2:	ee 0f       	add	r30, r30
    26b4:	ff 1f       	adc	r31, r31
    26b6:	e3 5e       	subi	r30, 0xE3	; 227
    26b8:	f6 4f       	sbci	r31, 0xF6	; 246
    26ba:	91 83       	std	Z+1, r25	; 0x01
    26bc:	80 83       	st	Z, r24
    26be:	e0 91 79 09 	lds	r30, 0x0979	; 0x800979 <sg_u8CurrentBufferIndex>
    26c2:	ef 5f       	subi	r30, 0xFF	; 255
    26c4:	e0 93 79 09 	sts	0x0979, r30	; 0x800979 <sg_u8CurrentBufferIndex>
    26c8:	e8 30       	cpi	r30, 0x08	; 8
    26ca:	90 f3       	brcs	.-28     	; 0x26b0 <ModuleCurrentConvertReadings+0x1a>
    26cc:	0f c0       	rjmp	.+30     	; 0x26ec <ModuleCurrentConvertReadings+0x56>
    26ce:	21 e0       	ldi	r18, 0x01	; 1
    26d0:	2e 0f       	add	r18, r30
    26d2:	20 93 79 09 	sts	0x0979, r18	; 0x800979 <sg_u8CurrentBufferIndex>
    26d6:	f0 e0       	ldi	r31, 0x00	; 0
    26d8:	ee 0f       	add	r30, r30
    26da:	ff 1f       	adc	r31, r31
    26dc:	e3 5e       	subi	r30, 0xE3	; 227
    26de:	f6 4f       	sbci	r31, 0xF6	; 246
    26e0:	91 83       	std	Z+1, r25	; 0x01
    26e2:	80 83       	st	Z, r24
    26e4:	28 30       	cpi	r18, 0x08	; 8
    26e6:	10 f0       	brcs	.+4      	; 0x26ec <ModuleCurrentConvertReadings+0x56>
    26e8:	10 92 79 09 	sts	0x0979, r1	; 0x800979 <sg_u8CurrentBufferIndex>
    26ec:	80 e0       	ldi	r24, 0x00	; 0
    26ee:	20 e0       	ldi	r18, 0x00	; 0
    26f0:	30 e0       	ldi	r19, 0x00	; 0
    26f2:	0b c0       	rjmp	.+22     	; 0x270a <ModuleCurrentConvertReadings+0x74>
    26f4:	e8 2f       	mov	r30, r24
    26f6:	f0 e0       	ldi	r31, 0x00	; 0
    26f8:	ee 0f       	add	r30, r30
    26fa:	ff 1f       	adc	r31, r31
    26fc:	e3 5e       	subi	r30, 0xE3	; 227
    26fe:	f6 4f       	sbci	r31, 0xF6	; 246
    2700:	40 81       	ld	r20, Z
    2702:	51 81       	ldd	r21, Z+1	; 0x01
    2704:	24 0f       	add	r18, r20
    2706:	35 1f       	adc	r19, r21
    2708:	8f 5f       	subi	r24, 0xFF	; 255
    270a:	88 30       	cpi	r24, 0x08	; 8
    270c:	98 f3       	brcs	.-26     	; 0x26f4 <ModuleCurrentConvertReadings+0x5e>
    270e:	c9 01       	movw	r24, r18
    2710:	99 23       	and	r25, r25
    2712:	0c f4       	brge	.+2      	; 0x2716 <ModuleCurrentConvertReadings+0x80>
    2714:	07 96       	adiw	r24, 0x07	; 7
    2716:	95 95       	asr	r25
    2718:	87 95       	ror	r24
    271a:	95 95       	asr	r25
    271c:	87 95       	ror	r24
    271e:	95 95       	asr	r25
    2720:	87 95       	ror	r24
    2722:	a8 1b       	sub	r26, r24
    2724:	b9 0b       	sbc	r27, r25
    2726:	20 e8       	ldi	r18, 0x80	; 128
    2728:	3c e0       	ldi	r19, 0x0C	; 12
    272a:	0e 94 34 27 	call	0x4e68	; 0x4e68 <__usmulhisi3>
    272e:	ab 01       	movw	r20, r22
    2730:	bc 01       	movw	r22, r24
    2732:	5f 5f       	subi	r21, 0xFF	; 255
    2734:	6f 4f       	sbci	r22, 0xFF	; 255
    2736:	7f 4f       	sbci	r23, 0xFF	; 255
    2738:	db 01       	movw	r26, r22
    273a:	ca 01       	movw	r24, r20
    273c:	77 23       	and	r23, r23
    273e:	24 f4       	brge	.+8      	; 0x2748 <ModuleCurrentConvertReadings+0xb2>
    2740:	81 50       	subi	r24, 0x01	; 1
    2742:	9e 4f       	sbci	r25, 0xFE	; 254
    2744:	af 4f       	sbci	r26, 0xFF	; 255
    2746:	bf 4f       	sbci	r27, 0xFF	; 255
    2748:	07 2e       	mov	r0, r23
    274a:	79 e0       	ldi	r23, 0x09	; 9
    274c:	b5 95       	asr	r27
    274e:	a7 95       	ror	r26
    2750:	97 95       	ror	r25
    2752:	87 95       	ror	r24
    2754:	7a 95       	dec	r23
    2756:	d1 f7       	brne	.-12     	; 0x274c <ModuleCurrentConvertReadings+0xb6>
    2758:	70 2d       	mov	r23, r0
    275a:	90 58       	subi	r25, 0x80	; 128
    275c:	af 4f       	sbci	r26, 0xFF	; 255
    275e:	bf 4f       	sbci	r27, 0xFF	; 255
    2760:	e0 e1       	ldi	r30, 0x10	; 16
    2762:	f1 e0       	ldi	r31, 0x01	; 1
    2764:	90 ab       	std	Z+48, r25	; 0x30
    2766:	87 a7       	std	Z+47, r24	; 0x2f
    2768:	27 a5       	ldd	r18, Z+47	; 0x2f
    276a:	30 a9       	ldd	r19, Z+48	; 0x30
    276c:	86 89       	ldd	r24, Z+22	; 0x16
    276e:	97 89       	ldd	r25, Z+23	; 0x17
    2770:	82 17       	cp	r24, r18
    2772:	93 07       	cpc	r25, r19
    2774:	20 f4       	brcc	.+8      	; 0x277e <ModuleCurrentConvertReadings+0xe8>
    2776:	87 a5       	ldd	r24, Z+47	; 0x2f
    2778:	90 a9       	ldd	r25, Z+48	; 0x30
    277a:	97 8b       	std	Z+23, r25	; 0x17
    277c:	86 8b       	std	Z+22, r24	; 0x16
    277e:	e0 e1       	ldi	r30, 0x10	; 16
    2780:	f1 e0       	ldi	r31, 0x01	; 1
    2782:	27 a5       	ldd	r18, Z+47	; 0x2f
    2784:	30 a9       	ldd	r19, Z+48	; 0x30
    2786:	80 8d       	ldd	r24, Z+24	; 0x18
    2788:	91 8d       	ldd	r25, Z+25	; 0x19
    278a:	28 17       	cp	r18, r24
    278c:	39 07       	cpc	r19, r25
    278e:	20 f4       	brcc	.+8      	; 0x2798 <ModuleCurrentConvertReadings+0x102>
    2790:	87 a5       	ldd	r24, Z+47	; 0x2f
    2792:	90 a9       	ldd	r25, Z+48	; 0x30
    2794:	91 8f       	std	Z+25, r25	; 0x19
    2796:	80 8f       	std	Z+24, r24	; 0x18
    2798:	08 95       	ret

Disassembly of section .text.__vector_1:

00004956 <__vector_1>:

// NOTE: If you're getting unexpected AVR resets, uncomment these unused handlers to see
// if another interrupt is being taken that doesn't have a handler. AVR Defaults to jumping
// to 0 when not vector is programmed.
ISR(ANACOMP0_vect, ISR_BLOCK)
{
    4956:	1f 92       	push	r1
    4958:	0f 92       	push	r0
    495a:	0f b6       	in	r0, 0x3f	; 63
    495c:	0f 92       	push	r0
    495e:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) ANACOMP0_vect;
    4960:	8b ea       	ldi	r24, 0xAB	; 171
    4962:	94 e2       	ldi	r25, 0x24	; 36
    4964:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4968:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    496c:	80 93 6b 09 	sts	0x096B, r24	; 0x80096b <sg_u8PCMSK0>
    4970:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4974:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8PCMSK1>
    4978:	ff cf       	rjmp	.-2      	; 0x4978 <__vector_1+0x22>

Disassembly of section .text.__vector_2:

0000497a <__vector_2>:
	while (1);
}

ISR(ANACOMP1_vect, ISR_BLOCK)
{
    497a:	1f 92       	push	r1
    497c:	0f 92       	push	r0
    497e:	0f b6       	in	r0, 0x3f	; 63
    4980:	0f 92       	push	r0
    4982:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) ANACOMP1_vect;
    4984:	8d eb       	ldi	r24, 0xBD	; 189
    4986:	94 e2       	ldi	r25, 0x24	; 36
    4988:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    498c:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4990:	80 93 6b 09 	sts	0x096B, r24	; 0x80096b <sg_u8PCMSK0>
    4994:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4998:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8PCMSK1>
    499c:	ff cf       	rjmp	.-2      	; 0x499c <__vector_2+0x22>

Disassembly of section .text.__vector_3:

0000499e <__vector_3>:
	while (1);
}

ISR(ANACOMP2_vect, ISR_BLOCK)
{
    499e:	1f 92       	push	r1
    49a0:	0f 92       	push	r0
    49a2:	0f b6       	in	r0, 0x3f	; 63
    49a4:	0f 92       	push	r0
    49a6:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) ANACOMP2_vect;
    49a8:	8f ec       	ldi	r24, 0xCF	; 207
    49aa:	94 e2       	ldi	r25, 0x24	; 36
    49ac:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    49b0:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    49b4:	80 93 6b 09 	sts	0x096B, r24	; 0x80096b <sg_u8PCMSK0>
    49b8:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    49bc:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8PCMSK1>
    49c0:	ff cf       	rjmp	.-2      	; 0x49c0 <__vector_3+0x22>

Disassembly of section .text.__vector_4:

000049c2 <__vector_4>:
	while (1);
}

ISR(ANACOMP3_vect, ISR_BLOCK)
{
    49c2:	1f 92       	push	r1
    49c4:	0f 92       	push	r0
    49c6:	0f b6       	in	r0, 0x3f	; 63
    49c8:	0f 92       	push	r0
    49ca:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) ANACOMP3_vect;
    49cc:	81 ee       	ldi	r24, 0xE1	; 225
    49ce:	94 e2       	ldi	r25, 0x24	; 36
    49d0:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    49d4:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    49d8:	80 93 6b 09 	sts	0x096B, r24	; 0x80096b <sg_u8PCMSK0>
    49dc:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    49e0:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8PCMSK1>
    49e4:	ff cf       	rjmp	.-2      	; 0x49e4 <__vector_4+0x22>

Disassembly of section .text.__vector_5:

000049e6 <__vector_5>:
	while (1);
}

ISR(PSC_FAULT_vect, ISR_BLOCK)
{
    49e6:	1f 92       	push	r1
    49e8:	0f 92       	push	r0
    49ea:	0f b6       	in	r0, 0x3f	; 63
    49ec:	0f 92       	push	r0
    49ee:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) PSC_FAULT_vect;
    49f0:	83 ef       	ldi	r24, 0xF3	; 243
    49f2:	94 e2       	ldi	r25, 0x24	; 36
    49f4:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    49f8:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    49fc:	80 93 6b 09 	sts	0x096B, r24	; 0x80096b <sg_u8PCMSK0>
    4a00:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4a04:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8PCMSK1>
    4a08:	ff cf       	rjmp	.-2      	; 0x4a08 <__vector_5+0x22>

Disassembly of section .text.__vector_6:

00004a0a <__vector_6>:
	while (1);
}

ISR(PSC_EC_vect, ISR_BLOCK)
{
    4a0a:	1f 92       	push	r1
    4a0c:	0f 92       	push	r0
    4a0e:	0f b6       	in	r0, 0x3f	; 63
    4a10:	0f 92       	push	r0
    4a12:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) PSC_EC_vect;
    4a14:	85 e0       	ldi	r24, 0x05	; 5
    4a16:	95 e2       	ldi	r25, 0x25	; 37
    4a18:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4a1c:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4a20:	80 93 6b 09 	sts	0x096B, r24	; 0x80096b <sg_u8PCMSK0>
    4a24:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4a28:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8PCMSK1>
    4a2c:	ff cf       	rjmp	.-2      	; 0x4a2c <__vector_6+0x22>

Disassembly of section .text.__vector_22:

00004a2e <__vector_22>:
	while (1);
}

ISR(PCINT0_vect, ISR_BLOCK)
{
    4a2e:	1f 92       	push	r1
    4a30:	0f 92       	push	r0
    4a32:	0f b6       	in	r0, 0x3f	; 63
    4a34:	0f 92       	push	r0
    4a36:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) PCINT0_vect;
    4a38:	87 e1       	ldi	r24, 0x17	; 23
    4a3a:	95 e2       	ldi	r25, 0x25	; 37
    4a3c:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4a40:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4a44:	80 93 6b 09 	sts	0x096B, r24	; 0x80096b <sg_u8PCMSK0>
    4a48:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4a4c:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8PCMSK1>
    4a50:	ff cf       	rjmp	.-2      	; 0x4a50 <__vector_22+0x22>

Disassembly of section .text.__vector_9:

00004a52 <__vector_9>:
// 	while (1);
// }
*/

ISR(INT2_vect, ISR_BLOCK)
{
    4a52:	1f 92       	push	r1
    4a54:	0f 92       	push	r0
    4a56:	0f b6       	in	r0, 0x3f	; 63
    4a58:	0f 92       	push	r0
    4a5a:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) INT2_vect;
    4a5c:	89 e2       	ldi	r24, 0x29	; 41
    4a5e:	95 e2       	ldi	r25, 0x25	; 37
    4a60:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4a64:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4a68:	80 93 6b 09 	sts	0x096B, r24	; 0x80096b <sg_u8PCMSK0>
    4a6c:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4a70:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8PCMSK1>
    4a74:	ff cf       	rjmp	.-2      	; 0x4a74 <__vector_9+0x22>

Disassembly of section .text.__vector_11:

00004a76 <__vector_11>:
// 	while (1);
// }


ISR(TIMER1_CAPT_vect, ISR_BLOCK)
{
    4a76:	1f 92       	push	r1
    4a78:	0f 92       	push	r0
    4a7a:	0f b6       	in	r0, 0x3f	; 63
    4a7c:	0f 92       	push	r0
    4a7e:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) TIMER1_CAPT_vect;
    4a80:	8b e3       	ldi	r24, 0x3B	; 59
    4a82:	95 e2       	ldi	r25, 0x25	; 37
    4a84:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4a88:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4a8c:	80 93 6b 09 	sts	0x096B, r24	; 0x80096b <sg_u8PCMSK0>
    4a90:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4a94:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8PCMSK1>
    4a98:	ff cf       	rjmp	.-2      	; 0x4a98 <__vector_11+0x22>

Disassembly of section .text.__vector_13:

00004a9a <__vector_13>:
// }



ISR(TIMER1_COMPB_vect, ISR_BLOCK)
{
    4a9a:	1f 92       	push	r1
    4a9c:	0f 92       	push	r0
    4a9e:	0f b6       	in	r0, 0x3f	; 63
    4aa0:	0f 92       	push	r0
    4aa2:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) TIMER1_COMPB_vect;
    4aa4:	8d e4       	ldi	r24, 0x4D	; 77
    4aa6:	95 e2       	ldi	r25, 0x25	; 37
    4aa8:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4aac:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4ab0:	80 93 6b 09 	sts	0x096B, r24	; 0x80096b <sg_u8PCMSK0>
    4ab4:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4ab8:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8PCMSK1>
    4abc:	ff cf       	rjmp	.-2      	; 0x4abc <__vector_13+0x22>

Disassembly of section .text.__vector_14:

00004abe <__vector_14>:
	while (1);
}


ISR(TIMER1_OVF_vect, ISR_BLOCK)
{
    4abe:	1f 92       	push	r1
    4ac0:	0f 92       	push	r0
    4ac2:	0f b6       	in	r0, 0x3f	; 63
    4ac4:	0f 92       	push	r0
    4ac6:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) TIMER1_OVF_vect;
    4ac8:	8f e5       	ldi	r24, 0x5F	; 95
    4aca:	95 e2       	ldi	r25, 0x25	; 37
    4acc:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4ad0:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4ad4:	80 93 6b 09 	sts	0x096B, r24	; 0x80096b <sg_u8PCMSK0>
    4ad8:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4adc:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8PCMSK1>
    4ae0:	ff cf       	rjmp	.-2      	; 0x4ae0 <__vector_14+0x22>

Disassembly of section .text.__vector_17:

00004ae2 <__vector_17>:
	while (1);
}

ISR(TIMER0_OVF_vect, ISR_BLOCK)
{
    4ae2:	1f 92       	push	r1
    4ae4:	0f 92       	push	r0
    4ae6:	0f b6       	in	r0, 0x3f	; 63
    4ae8:	0f 92       	push	r0
    4aea:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) TIMER0_OVF_vect;
    4aec:	81 e7       	ldi	r24, 0x71	; 113
    4aee:	95 e2       	ldi	r25, 0x25	; 37
    4af0:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4af4:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4af8:	80 93 6b 09 	sts	0x096B, r24	; 0x80096b <sg_u8PCMSK0>
    4afc:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4b00:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8PCMSK1>
    4b04:	ff cf       	rjmp	.-2      	; 0x4b04 <__vector_17+0x22>

Disassembly of section .text.__vector_19:

00004b06 <__vector_19>:
	while (1);
}

ISR(CAN_TOVF_vect, ISR_BLOCK)
{
    4b06:	1f 92       	push	r1
    4b08:	0f 92       	push	r0
    4b0a:	0f b6       	in	r0, 0x3f	; 63
    4b0c:	0f 92       	push	r0
    4b0e:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) CAN_TOVF_vect;
    4b10:	83 e8       	ldi	r24, 0x83	; 131
    4b12:	95 e2       	ldi	r25, 0x25	; 37
    4b14:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4b18:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4b1c:	80 93 6b 09 	sts	0x096B, r24	; 0x80096b <sg_u8PCMSK0>
    4b20:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4b24:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8PCMSK1>
    4b28:	ff cf       	rjmp	.-2      	; 0x4b28 <__vector_19+0x22>

Disassembly of section .text.__vector_21:

00004b2a <__vector_21>:
	while (1);
}

ISR(LIN_ERR_vect, ISR_BLOCK)
{
    4b2a:	1f 92       	push	r1
    4b2c:	0f 92       	push	r0
    4b2e:	0f b6       	in	r0, 0x3f	; 63
    4b30:	0f 92       	push	r0
    4b32:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) LIN_ERR_vect;
    4b34:	85 e9       	ldi	r24, 0x95	; 149
    4b36:	95 e2       	ldi	r25, 0x25	; 37
    4b38:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4b3c:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4b40:	80 93 6b 09 	sts	0x096B, r24	; 0x80096b <sg_u8PCMSK0>
    4b44:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4b48:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8PCMSK1>
    4b4c:	ff cf       	rjmp	.-2      	; 0x4b4c <__vector_21+0x22>

Disassembly of section .text.__vector_25:

00004b4e <__vector_25>:
// 	while (1);
// }


ISR(PCINT3_vect, ISR_BLOCK)
{
    4b4e:	1f 92       	push	r1
    4b50:	0f 92       	push	r0
    4b52:	0f b6       	in	r0, 0x3f	; 63
    4b54:	0f 92       	push	r0
    4b56:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) PCINT3_vect;
    4b58:	87 ea       	ldi	r24, 0xA7	; 167
    4b5a:	95 e2       	ldi	r25, 0x25	; 37
    4b5c:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4b60:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4b64:	80 93 6b 09 	sts	0x096B, r24	; 0x80096b <sg_u8PCMSK0>
    4b68:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4b6c:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8PCMSK1>
    4b70:	ff cf       	rjmp	.-2      	; 0x4b70 <__vector_25+0x22>

Disassembly of section .text.__vector_26:

00004b72 <__vector_26>:
	while (1);
}


ISR(SPI_STC_vect, ISR_BLOCK)
{
    4b72:	1f 92       	push	r1
    4b74:	0f 92       	push	r0
    4b76:	0f b6       	in	r0, 0x3f	; 63
    4b78:	0f 92       	push	r0
    4b7a:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) SPI_STC_vect;
    4b7c:	89 eb       	ldi	r24, 0xB9	; 185
    4b7e:	95 e2       	ldi	r25, 0x25	; 37
    4b80:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4b84:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4b88:	80 93 6b 09 	sts	0x096B, r24	; 0x80096b <sg_u8PCMSK0>
    4b8c:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4b90:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8PCMSK1>
    4b94:	ff cf       	rjmp	.-2      	; 0x4b94 <__vector_26+0x22>

Disassembly of section .text.__vector_29:

00004b96 <__vector_29>:
	while (1);
}

ISR(EE_READY_vect, ISR_BLOCK)
{
    4b96:	1f 92       	push	r1
    4b98:	0f 92       	push	r0
    4b9a:	0f b6       	in	r0, 0x3f	; 63
    4b9c:	0f 92       	push	r0
    4b9e:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) EE_READY_vect;
    4ba0:	8b ec       	ldi	r24, 0xCB	; 203
    4ba2:	95 e2       	ldi	r25, 0x25	; 37
    4ba4:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4ba8:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4bac:	80 93 6b 09 	sts	0x096B, r24	; 0x80096b <sg_u8PCMSK0>
    4bb0:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4bb4:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8PCMSK1>
    4bb8:	ff cf       	rjmp	.-2      	; 0x4bb8 <__vector_29+0x22>

Disassembly of section .text.__vector_30:

00004bba <__vector_30>:
	while (1);
}

ISR(SPM_READY_vect, ISR_BLOCK)
{
    4bba:	1f 92       	push	r1
    4bbc:	0f 92       	push	r0
    4bbe:	0f b6       	in	r0, 0x3f	; 63
    4bc0:	0f 92       	push	r0
    4bc2:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) SPM_READY_vect;
    4bc4:	8d ed       	ldi	r24, 0xDD	; 221
    4bc6:	95 e2       	ldi	r25, 0x25	; 37
    4bc8:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4bcc:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4bd0:	80 93 6b 09 	sts	0x096B, r24	; 0x80096b <sg_u8PCMSK0>
    4bd4:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4bd8:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8PCMSK1>
    4bdc:	ff cf       	rjmp	.-2      	; 0x4bdc <__vector_30+0x22>

Disassembly of section .text.CurrentThresholdsGet:

00003682 <CurrentThresholdsGet>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    3682:	0f 93       	push	r16
    3684:	1f 93       	push	r17
    3686:	cf 93       	push	r28
    3688:	df 93       	push	r29
    368a:	8c 01       	movw	r16, r24
    368c:	eb 01       	movw	r28, r22
    368e:	89 2b       	or	r24, r25
    3690:	f9 f0       	breq	.+62     	; 0x36d0 <CurrentThresholdsGet+0x4e>
    3692:	87 e0       	ldi	r24, 0x07	; 7
    3694:	90 e0       	ldi	r25, 0x00	; 0
    3696:	0e 94 d2 26 	call	0x4da4	; 0x4da4 <EEPROMRead>
    369a:	90 e0       	ldi	r25, 0x00	; 0
    369c:	f8 01       	movw	r30, r16
    369e:	91 83       	std	Z+1, r25	; 0x01
    36a0:	80 83       	st	Z, r24
    36a2:	88 e0       	ldi	r24, 0x08	; 8
    36a4:	90 e0       	ldi	r25, 0x00	; 0
    36a6:	0e 94 d2 26 	call	0x4da4	; 0x4da4 <EEPROMRead>
    36aa:	90 e0       	ldi	r25, 0x00	; 0
    36ac:	98 2f       	mov	r25, r24
    36ae:	88 27       	eor	r24, r24
    36b0:	f8 01       	movw	r30, r16
    36b2:	20 81       	ld	r18, Z
    36b4:	31 81       	ldd	r19, Z+1	; 0x01
    36b6:	82 2b       	or	r24, r18
    36b8:	93 2b       	or	r25, r19
    36ba:	91 83       	std	Z+1, r25	; 0x01
    36bc:	80 83       	st	Z, r24
    36be:	01 97       	sbiw	r24, 0x01	; 1
    36c0:	8e 3f       	cpi	r24, 0xFE	; 254
    36c2:	9f 4f       	sbci	r25, 0xFF	; 255
    36c4:	28 f0       	brcs	.+10     	; 0x36d0 <CurrentThresholdsGet+0x4e>
    36c6:	8c ec       	ldi	r24, 0xCC	; 204
    36c8:	97 e7       	ldi	r25, 0x77	; 119
    36ca:	f8 01       	movw	r30, r16
    36cc:	91 83       	std	Z+1, r25	; 0x01
    36ce:	80 83       	st	Z, r24
    36d0:	20 97       	sbiw	r28, 0x00	; 0
    36d2:	e1 f0       	breq	.+56     	; 0x370c <CurrentThresholdsGet+0x8a>
    36d4:	85 e0       	ldi	r24, 0x05	; 5
    36d6:	90 e0       	ldi	r25, 0x00	; 0
    36d8:	0e 94 d2 26 	call	0x4da4	; 0x4da4 <EEPROMRead>
    36dc:	90 e0       	ldi	r25, 0x00	; 0
    36de:	99 83       	std	Y+1, r25	; 0x01
    36e0:	88 83       	st	Y, r24
    36e2:	86 e0       	ldi	r24, 0x06	; 6
    36e4:	90 e0       	ldi	r25, 0x00	; 0
    36e6:	0e 94 d2 26 	call	0x4da4	; 0x4da4 <EEPROMRead>
    36ea:	90 e0       	ldi	r25, 0x00	; 0
    36ec:	98 2f       	mov	r25, r24
    36ee:	88 27       	eor	r24, r24
    36f0:	28 81       	ld	r18, Y
    36f2:	39 81       	ldd	r19, Y+1	; 0x01
    36f4:	82 2b       	or	r24, r18
    36f6:	93 2b       	or	r25, r19
    36f8:	99 83       	std	Y+1, r25	; 0x01
    36fa:	88 83       	st	Y, r24
    36fc:	01 97       	sbiw	r24, 0x01	; 1
    36fe:	8e 3f       	cpi	r24, 0xFE	; 254
    3700:	9f 4f       	sbci	r25, 0xFF	; 255
    3702:	20 f0       	brcs	.+8      	; 0x370c <CurrentThresholdsGet+0x8a>
    3704:	84 ef       	ldi	r24, 0xF4	; 244
    3706:	91 e8       	ldi	r25, 0x81	; 129
    3708:	99 83       	std	Y+1, r25	; 0x01
    370a:	88 83       	st	Y, r24
    370c:	df 91       	pop	r29
    370e:	cf 91       	pop	r28
    3710:	1f 91       	pop	r17
    3712:	0f 91       	pop	r16
    3714:	08 95       	ret

Disassembly of section .text.CANReceiveCallback:

000011a0 <CANReceiveCallback>:
    11a0:	cf 92       	push	r12
    11a2:	df 92       	push	r13
    11a4:	ef 92       	push	r14
    11a6:	ff 92       	push	r15
    11a8:	cf 93       	push	r28
    11aa:	fb 01       	movw	r30, r22
    11ac:	90 91 21 03 	lds	r25, 0x0321	; 0x800321 <sg_bModuleRegistered>
    11b0:	10 92 72 09 	sts	0x0972, r1	; 0x800972 <sg_u8TicksSinceLastPackControllerMessage>
    11b4:	82 31       	cpi	r24, 0x12	; 18
    11b6:	29 f4       	brne	.+10     	; 0x11c2 <CANReceiveCallback+0x22>
    11b8:	80 81       	ld	r24, Z
    11ba:	8f 70       	andi	r24, 0x0F	; 15
    11bc:	0e 94 9c 26 	call	0x4d38	; 0x4d38 <ModuleControllerStateSetMax>
    11c0:	35 c1       	rjmp	.+618    	; 0x142c <CANReceiveCallback+0x28c>
    11c2:	8f 30       	cpi	r24, 0x0F	; 15
    11c4:	a9 f4       	brne	.+42     	; 0x11f0 <CANReceiveCallback+0x50>
    11c6:	8a ed       	ldi	r24, 0xDA	; 218
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	a0 e0       	ldi	r26, 0x00	; 0
    11cc:	af 93       	push	r26
    11ce:	9f 93       	push	r25
    11d0:	8f 93       	push	r24
    11d2:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <DebugOut>
    11d6:	10 92 27 03 	sts	0x0327, r1	; 0x800327 <sg_u8ModuleRegistrationID>
    11da:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <sg_bModuleRegistered>
    11de:	10 92 76 09 	sts	0x0976, r1	; 0x800976 <sg_bIgnoreStatusRequests>
    11e2:	80 e0       	ldi	r24, 0x00	; 0
    11e4:	0e 94 4c 27 	call	0x4e98	; 0x4e98 <ModuleControllerStateSet>
    11e8:	0f 90       	pop	r0
    11ea:	0f 90       	pop	r0
    11ec:	0f 90       	pop	r0
    11ee:	1e c1       	rjmp	.+572    	; 0x142c <CANReceiveCallback+0x28c>
    11f0:	80 31       	cpi	r24, 0x10	; 16
    11f2:	21 f4       	brne	.+8      	; 0x11fc <CANReceiveCallback+0x5c>
    11f4:	80 e0       	ldi	r24, 0x00	; 0
    11f6:	0e 94 4c 27 	call	0x4e98	; 0x4e98 <ModuleControllerStateSet>
    11fa:	18 c1       	rjmp	.+560    	; 0x142c <CANReceiveCallback+0x28c>
    11fc:	81 31       	cpi	r24, 0x11	; 17
    11fe:	59 f4       	brne	.+22     	; 0x1216 <CANReceiveCallback+0x76>
    1200:	20 81       	ld	r18, Z
    1202:	31 81       	ldd	r19, Z+1	; 0x01
    1204:	42 81       	ldd	r20, Z+2	; 0x02
    1206:	53 81       	ldd	r21, Z+3	; 0x03
    1208:	64 81       	ldd	r22, Z+4	; 0x04
    120a:	75 81       	ldd	r23, Z+5	; 0x05
    120c:	86 81       	ldd	r24, Z+6	; 0x06
    120e:	97 81       	ldd	r25, Z+7	; 0x07
    1210:	0e 94 1c 18 	call	0x3038	; 0x3038 <RTCSetTime>
    1214:	0b c1       	rjmp	.+534    	; 0x142c <CANReceiveCallback+0x28c>
    1216:	8d 30       	cpi	r24, 0x0D	; 13
    1218:	09 f0       	breq	.+2      	; 0x121c <CANReceiveCallback+0x7c>
    121a:	4f c0       	rjmp	.+158    	; 0x12ba <CANReceiveCallback+0x11a>
    121c:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <sg_bModuleRegistered>
    1220:	81 11       	cpse	r24, r1
    1222:	2f c0       	rjmp	.+94     	; 0x1282 <CANReceiveCallback+0xe2>
    1224:	80 91 78 09 	lds	r24, 0x0978	; 0x800978 <sg_bAnnouncementPending>
    1228:	81 11       	cpse	r24, r1
    122a:	2b c0       	rjmp	.+86     	; 0x1282 <CANReceiveCallback+0xe2>
    122c:	c0 90 1e 01 	lds	r12, 0x011E	; 0x80011e <sg_sFrame+0xe>
    1230:	d0 90 1f 01 	lds	r13, 0x011F	; 0x80011f <sg_sFrame+0xf>
    1234:	e0 90 20 01 	lds	r14, 0x0120	; 0x800120 <sg_sFrame+0x10>
    1238:	f0 90 21 01 	lds	r15, 0x0121	; 0x800121 <sg_sFrame+0x11>
    123c:	1f 92       	push	r1
    123e:	cf 92       	push	r12
    1240:	85 e0       	ldi	r24, 0x05	; 5
    1242:	91 e0       	ldi	r25, 0x01	; 1
    1244:	a0 e0       	ldi	r26, 0x00	; 0
    1246:	af 93       	push	r26
    1248:	9f 93       	push	r25
    124a:	8f 93       	push	r24
    124c:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <DebugOut>
    1250:	8d ec       	ldi	r24, 0xCD	; 205
    1252:	c8 9e       	mul	r12, r24
    1254:	c1 2c       	mov	r12, r1
    1256:	11 24       	eor	r1, r1
    1258:	c6 94       	lsr	r12
    125a:	c6 94       	lsr	r12
    125c:	c6 94       	lsr	r12
    125e:	c0 92 77 09 	sts	0x0977, r12	; 0x800977 <sg_u8AnnouncementDelayTicks>
    1262:	80 91 77 09 	lds	r24, 0x0977	; 0x800977 <sg_u8AnnouncementDelayTicks>
    1266:	0f 90       	pop	r0
    1268:	0f 90       	pop	r0
    126a:	0f 90       	pop	r0
    126c:	0f 90       	pop	r0
    126e:	0f 90       	pop	r0
    1270:	81 11       	cpse	r24, r1
    1272:	03 c0       	rjmp	.+6      	; 0x127a <CANReceiveCallback+0xda>
    1274:	81 e0       	ldi	r24, 0x01	; 1
    1276:	80 93 77 09 	sts	0x0977, r24	; 0x800977 <sg_u8AnnouncementDelayTicks>
    127a:	81 e0       	ldi	r24, 0x01	; 1
    127c:	80 93 78 09 	sts	0x0978, r24	; 0x800978 <sg_bAnnouncementPending>
    1280:	d5 c0       	rjmp	.+426    	; 0x142c <CANReceiveCallback+0x28c>
    1282:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <sg_bModuleRegistered>
    1286:	88 23       	and	r24, r24
    1288:	61 f0       	breq	.+24     	; 0x12a2 <CANReceiveCallback+0x102>
    128a:	88 e4       	ldi	r24, 0x48	; 72
    128c:	91 e0       	ldi	r25, 0x01	; 1
    128e:	a0 e0       	ldi	r26, 0x00	; 0
    1290:	af 93       	push	r26
    1292:	9f 93       	push	r25
    1294:	8f 93       	push	r24
    1296:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <DebugOut>
    129a:	0f 90       	pop	r0
    129c:	0f 90       	pop	r0
    129e:	0f 90       	pop	r0
    12a0:	c5 c0       	rjmp	.+394    	; 0x142c <CANReceiveCallback+0x28c>
    12a2:	86 e7       	ldi	r24, 0x76	; 118
    12a4:	91 e0       	ldi	r25, 0x01	; 1
    12a6:	a0 e0       	ldi	r26, 0x00	; 0
    12a8:	af 93       	push	r26
    12aa:	9f 93       	push	r25
    12ac:	8f 93       	push	r24
    12ae:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <DebugOut>
    12b2:	0f 90       	pop	r0
    12b4:	0f 90       	pop	r0
    12b6:	0f 90       	pop	r0
    12b8:	b9 c0       	rjmp	.+370    	; 0x142c <CANReceiveCallback+0x28c>
    12ba:	89 30       	cpi	r24, 0x09	; 9
    12bc:	09 f0       	breq	.+2      	; 0x12c0 <CANReceiveCallback+0x120>
    12be:	41 c0       	rjmp	.+130    	; 0x1342 <CANReceiveCallback+0x1a2>
    12c0:	48 30       	cpi	r20, 0x08	; 8
    12c2:	09 f0       	breq	.+2      	; 0x12c6 <CANReceiveCallback+0x126>
    12c4:	b3 c0       	rjmp	.+358    	; 0x142c <CANReceiveCallback+0x28c>
    12c6:	f0 80       	ld	r15, Z
    12c8:	82 81       	ldd	r24, Z+2	; 0x02
    12ca:	82 30       	cpi	r24, 0x02	; 2
    12cc:	09 f0       	breq	.+2      	; 0x12d0 <CANReceiveCallback+0x130>
    12ce:	ae c0       	rjmp	.+348    	; 0x142c <CANReceiveCallback+0x28c>
    12d0:	83 81       	ldd	r24, Z+3	; 0x03
    12d2:	83 30       	cpi	r24, 0x03	; 3
    12d4:	09 f0       	breq	.+2      	; 0x12d8 <CANReceiveCallback+0x138>
    12d6:	aa c0       	rjmp	.+340    	; 0x142c <CANReceiveCallback+0x28c>
    12d8:	40 91 1e 01 	lds	r20, 0x011E	; 0x80011e <sg_sFrame+0xe>
    12dc:	50 91 1f 01 	lds	r21, 0x011F	; 0x80011f <sg_sFrame+0xf>
    12e0:	60 91 20 01 	lds	r22, 0x0120	; 0x800120 <sg_sFrame+0x10>
    12e4:	70 91 21 01 	lds	r23, 0x0121	; 0x800121 <sg_sFrame+0x11>
    12e8:	84 81       	ldd	r24, Z+4	; 0x04
    12ea:	95 81       	ldd	r25, Z+5	; 0x05
    12ec:	a6 81       	ldd	r26, Z+6	; 0x06
    12ee:	b7 81       	ldd	r27, Z+7	; 0x07
    12f0:	48 17       	cp	r20, r24
    12f2:	59 07       	cpc	r21, r25
    12f4:	6a 07       	cpc	r22, r26
    12f6:	7b 07       	cpc	r23, r27
    12f8:	09 f0       	breq	.+2      	; 0x12fc <CANReceiveCallback+0x15c>
    12fa:	98 c0       	rjmp	.+304    	; 0x142c <CANReceiveCallback+0x28c>
    12fc:	10 92 72 09 	sts	0x0972, r1	; 0x800972 <sg_u8TicksSinceLastPackControllerMessage>
    1300:	f0 92 27 03 	sts	0x0327, r15	; 0x800327 <sg_u8ModuleRegistrationID>
    1304:	0e 94 ff 26 	call	0x4dfe	; 0x4dfe <SendModuleControllerStatus>
    1308:	c1 e0       	ldi	r28, 0x01	; 1
    130a:	c0 93 1c 03 	sts	0x031C, r28	; 0x80031c <sg_bSendHardwareDetail>
    130e:	c0 93 21 03 	sts	0x0321, r28	; 0x800321 <sg_bModuleRegistered>
    1312:	10 92 76 09 	sts	0x0976, r1	; 0x800976 <sg_bIgnoreStatusRequests>
    1316:	1f 92       	push	r1
    1318:	ff 92       	push	r15
    131a:	8e e9       	ldi	r24, 0x9E	; 158
    131c:	91 e0       	ldi	r25, 0x01	; 1
    131e:	a0 e0       	ldi	r26, 0x00	; 0
    1320:	af 93       	push	r26
    1322:	9f 93       	push	r25
    1324:	8f 93       	push	r24
    1326:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <DebugOut>
    132a:	10 92 78 09 	sts	0x0978, r1	; 0x800978 <sg_bAnnouncementPending>
    132e:	10 92 77 09 	sts	0x0977, r1	; 0x800977 <sg_u8AnnouncementDelayTicks>
    1332:	c0 93 20 03 	sts	0x0320, r28	; 0x800320 <sg_bSendTimeRequest>
    1336:	0f 90       	pop	r0
    1338:	0f 90       	pop	r0
    133a:	0f 90       	pop	r0
    133c:	0f 90       	pop	r0
    133e:	0f 90       	pop	r0
    1340:	75 c0       	rjmp	.+234    	; 0x142c <CANReceiveCallback+0x28c>
    1342:	44 23       	and	r20, r20
    1344:	09 f4       	brne	.+2      	; 0x1348 <CANReceiveCallback+0x1a8>
    1346:	72 c0       	rjmp	.+228    	; 0x142c <CANReceiveCallback+0x28c>
    1348:	20 81       	ld	r18, Z
    134a:	91 11       	cpse	r25, r1
    134c:	08 c0       	rjmp	.+16     	; 0x135e <CANReceiveCallback+0x1be>
    134e:	8a 30       	cpi	r24, 0x0A	; 10
    1350:	09 f0       	breq	.+2      	; 0x1354 <CANReceiveCallback+0x1b4>
    1352:	6c c0       	rjmp	.+216    	; 0x142c <CANReceiveCallback+0x28c>
    1354:	90 91 21 03 	lds	r25, 0x0321	; 0x800321 <sg_bModuleRegistered>
    1358:	99 23       	and	r25, r25
    135a:	09 f4       	brne	.+2      	; 0x135e <CANReceiveCallback+0x1be>
    135c:	67 c0       	rjmp	.+206    	; 0x142c <CANReceiveCallback+0x28c>
    135e:	90 91 27 03 	lds	r25, 0x0327	; 0x800327 <sg_u8ModuleRegistrationID>
    1362:	29 13       	cpse	r18, r25
    1364:	63 c0       	rjmp	.+198    	; 0x142c <CANReceiveCallback+0x28c>
    1366:	8a 30       	cpi	r24, 0x0A	; 10
    1368:	a9 f4       	brne	.+42     	; 0x1394 <CANReceiveCallback+0x1f4>
    136a:	41 30       	cpi	r20, 0x01	; 1
    136c:	09 f0       	breq	.+2      	; 0x1370 <CANReceiveCallback+0x1d0>
    136e:	5e c0       	rjmp	.+188    	; 0x142c <CANReceiveCallback+0x28c>
    1370:	80 91 76 09 	lds	r24, 0x0976	; 0x800976 <sg_bIgnoreStatusRequests>
    1374:	81 11       	cpse	r24, r1
    1376:	5a c0       	rjmp	.+180    	; 0x142c <CANReceiveCallback+0x28c>
    1378:	89 ed       	ldi	r24, 0xD9	; 217
    137a:	91 e0       	ldi	r25, 0x01	; 1
    137c:	a0 e0       	ldi	r26, 0x00	; 0
    137e:	af 93       	push	r26
    1380:	9f 93       	push	r25
    1382:	8f 93       	push	r24
    1384:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <DebugOut>
    1388:	0e 94 ff 26 	call	0x4dfe	; 0x4dfe <SendModuleControllerStatus>
    138c:	0f 90       	pop	r0
    138e:	0f 90       	pop	r0
    1390:	0f 90       	pop	r0
    1392:	4c c0       	rjmp	.+152    	; 0x142c <CANReceiveCallback+0x28c>
    1394:	8b 30       	cpi	r24, 0x0B	; 11
    1396:	f9 f4       	brne	.+62     	; 0x13d6 <CANReceiveCallback+0x236>
    1398:	43 30       	cpi	r20, 0x03	; 3
    139a:	09 f0       	breq	.+2      	; 0x139e <CANReceiveCallback+0x1fe>
    139c:	47 c0       	rjmp	.+142    	; 0x142c <CANReceiveCallback+0x28c>
    139e:	80 91 1d 03 	lds	r24, 0x031D	; 0x80031d <sg_bSendCellStatus>
    13a2:	81 11       	cpse	r24, r1
    13a4:	43 c0       	rjmp	.+134    	; 0x142c <CANReceiveCallback+0x28c>
    13a6:	81 81       	ldd	r24, Z+1	; 0x01
    13a8:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <sg_sFrame+0x15>
    13ac:	89 17       	cp	r24, r25
    13ae:	f0 f5       	brcc	.+124    	; 0x142c <CANReceiveCallback+0x28c>
    13b0:	80 93 23 03 	sts	0x0323, r24	; 0x800323 <sg_u8CellStatus>
    13b4:	90 91 23 03 	lds	r25, 0x0323	; 0x800323 <sg_u8CellStatus>
    13b8:	9f 5f       	subi	r25, 0xFF	; 255
    13ba:	90 93 24 03 	sts	0x0324, r25	; 0x800324 <sg_u8CellStatusTarget>
    13be:	8f 3f       	cpi	r24, 0xFF	; 255
    13c0:	31 f4       	brne	.+12     	; 0x13ce <CANReceiveCallback+0x22e>
    13c2:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <sg_sFrame+0x15>
    13c6:	80 93 24 03 	sts	0x0324, r24	; 0x800324 <sg_u8CellStatusTarget>
    13ca:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <sg_u8CellStatus>
    13ce:	81 e0       	ldi	r24, 0x01	; 1
    13d0:	80 93 1d 03 	sts	0x031D, r24	; 0x80031d <sg_bSendCellStatus>
    13d4:	2b c0       	rjmp	.+86     	; 0x142c <CANReceiveCallback+0x28c>
    13d6:	8c 30       	cpi	r24, 0x0C	; 12
    13d8:	49 f4       	brne	.+18     	; 0x13ec <CANReceiveCallback+0x24c>
    13da:	10 92 72 09 	sts	0x0972, r1	; 0x800972 <sg_u8TicksSinceLastPackControllerMessage>
    13de:	42 30       	cpi	r20, 0x02	; 2
    13e0:	29 f5       	brne	.+74     	; 0x142c <CANReceiveCallback+0x28c>
    13e2:	81 81       	ldd	r24, Z+1	; 0x01
    13e4:	8f 70       	andi	r24, 0x0F	; 15
    13e6:	0e 94 4c 27 	call	0x4e98	; 0x4e98 <ModuleControllerStateSet>
    13ea:	20 c0       	rjmp	.+64     	; 0x142c <CANReceiveCallback+0x28c>
    13ec:	85 30       	cpi	r24, 0x05	; 5
    13ee:	21 f4       	brne	.+8      	; 0x13f8 <CANReceiveCallback+0x258>
    13f0:	81 e0       	ldi	r24, 0x01	; 1
    13f2:	80 93 1c 03 	sts	0x031C, r24	; 0x80031c <sg_bSendHardwareDetail>
    13f6:	1a c0       	rjmp	.+52     	; 0x142c <CANReceiveCallback+0x28c>
    13f8:	8e 30       	cpi	r24, 0x0E	; 14
    13fa:	c1 f4       	brne	.+48     	; 0x142c <CANReceiveCallback+0x28c>
    13fc:	1f 92       	push	r1
    13fe:	2f 93       	push	r18
    1400:	8e ef       	ldi	r24, 0xFE	; 254
    1402:	91 e0       	ldi	r25, 0x01	; 1
    1404:	a0 e0       	ldi	r26, 0x00	; 0
    1406:	af 93       	push	r26
    1408:	9f 93       	push	r25
    140a:	8f 93       	push	r24
    140c:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <DebugOut>
    1410:	10 92 27 03 	sts	0x0327, r1	; 0x800327 <sg_u8ModuleRegistrationID>
    1414:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <sg_bModuleRegistered>
    1418:	10 92 76 09 	sts	0x0976, r1	; 0x800976 <sg_bIgnoreStatusRequests>
    141c:	80 e0       	ldi	r24, 0x00	; 0
    141e:	0e 94 4c 27 	call	0x4e98	; 0x4e98 <ModuleControllerStateSet>
    1422:	0f 90       	pop	r0
    1424:	0f 90       	pop	r0
    1426:	0f 90       	pop	r0
    1428:	0f 90       	pop	r0
    142a:	0f 90       	pop	r0
    142c:	cf 91       	pop	r28
    142e:	ff 90       	pop	r15
    1430:	ef 90       	pop	r14
    1432:	df 90       	pop	r13
    1434:	cf 90       	pop	r12
    1436:	08 95       	ret

Disassembly of section .text.ControllerStatusMessagesSend:

00000810 <ControllerStatusMessagesSend>:
 810:	cf 92       	push	r12
 812:	df 92       	push	r13
 814:	ef 92       	push	r14
 816:	ff 92       	push	r15
 818:	0f 93       	push	r16
 81a:	1f 93       	push	r17
 81c:	cf 93       	push	r28
 81e:	df 93       	push	r29
 820:	00 d0       	rcall	.+0      	; 0x822 <ControllerStatusMessagesSend+0x12>
 822:	00 d0       	rcall	.+0      	; 0x824 <ControllerStatusMessagesSend+0x14>
 824:	cd b7       	in	r28, 0x3d	; 61
 826:	de b7       	in	r29, 0x3e	; 62
 828:	8c 01       	movw	r16, r24
 82a:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <sg_bSendTimeRequest>
 82e:	88 23       	and	r24, r24
 830:	69 f0       	breq	.+26     	; 0x84c <ControllerStatusMessagesSend+0x3c>
 832:	88 e0       	ldi	r24, 0x08	; 8
 834:	d8 01       	movw	r26, r16
 836:	1d 92       	st	X+, r1
 838:	8a 95       	dec	r24
 83a:	e9 f7       	brne	.-6      	; 0x836 <ControllerStatusMessagesSend+0x26>
 83c:	48 e0       	ldi	r20, 0x08	; 8
 83e:	b8 01       	movw	r22, r16
 840:	88 e0       	ldi	r24, 0x08	; 8
 842:	0e 94 91 26 	call	0x4d22	; 0x4d22 <CANSendMessage>
 846:	81 11       	cpse	r24, r1
 848:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <sg_bSendTimeRequest>
 84c:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <sg_bSendModuleControllerStatus>
 850:	88 23       	and	r24, r24
 852:	09 f4       	brne	.+2      	; 0x856 <ControllerStatusMessagesSend+0x46>
 854:	06 c1       	rjmp	.+524    	; 0xa62 <ControllerStatusMessagesSend+0x252>
 856:	80 91 6e 09 	lds	r24, 0x096E	; 0x80096e <sg_u8ControllerStatusMsgCount>
 85a:	81 11       	cpse	r24, r1
 85c:	80 c0       	rjmp	.+256    	; 0x95e <ControllerStatusMessagesSend+0x14e>
 85e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
 862:	8f 70       	andi	r24, 0x0F	; 15
 864:	f8 01       	movw	r30, r16
 866:	80 83       	st	Z, r24
 868:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <sg_u8SOC>
 86c:	81 83       	std	Z+1, r24	; 0x01
 86e:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <sg_u8SOH>
 872:	82 83       	std	Z+2, r24	; 0x02
 874:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <sg_sFrame+0x15>
 878:	83 83       	std	Z+3, r24	; 0x03
 87a:	84 e0       	ldi	r24, 0x04	; 4
 87c:	34 96       	adiw	r30, 0x04	; 4
 87e:	df 01       	movw	r26, r30
 880:	1d 92       	st	X+, r1
 882:	8a 95       	dec	r24
 884:	e9 f7       	brne	.-6      	; 0x880 <ControllerStatusMessagesSend+0x70>
 886:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <sg_sFrame+0x48>
 88a:	88 23       	and	r24, r24
 88c:	79 f0       	breq	.+30     	; 0x8ac <ControllerStatusMessagesSend+0x9c>
 88e:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <sg_sFrame+0x4b>
 892:	88 23       	and	r24, r24
 894:	71 f0       	breq	.+28     	; 0x8b2 <ControllerStatusMessagesSend+0xa2>
 896:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
 89a:	83 30       	cpi	r24, 0x03	; 3
 89c:	69 f4       	brne	.+26     	; 0x8b8 <ControllerStatusMessagesSend+0xa8>
 89e:	0e 94 4b 13 	call	0x2696	; 0x2696 <ModuleCurrentConvertReadings>
 8a2:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <sg_sFrame+0x2f>
 8a6:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <sg_sFrame+0x30>
 8aa:	08 c0       	rjmp	.+16     	; 0x8bc <ControllerStatusMessagesSend+0xac>
 8ac:	80 e0       	ldi	r24, 0x00	; 0
 8ae:	90 e8       	ldi	r25, 0x80	; 128
 8b0:	05 c0       	rjmp	.+10     	; 0x8bc <ControllerStatusMessagesSend+0xac>
 8b2:	80 e0       	ldi	r24, 0x00	; 0
 8b4:	90 e8       	ldi	r25, 0x80	; 128
 8b6:	02 c0       	rjmp	.+4      	; 0x8bc <ControllerStatusMessagesSend+0xac>
 8b8:	80 e0       	ldi	r24, 0x00	; 0
 8ba:	90 e8       	ldi	r25, 0x80	; 128
 8bc:	f8 01       	movw	r30, r16
 8be:	84 83       	std	Z+4, r24	; 0x04
 8c0:	95 83       	std	Z+5, r25	; 0x05
 8c2:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <sg_sFrame+0x45>
 8c6:	88 23       	and	r24, r24
 8c8:	79 f0       	breq	.+30     	; 0x8e8 <ControllerStatusMessagesSend+0xd8>
 8ca:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <sg_sFrame+0x46>
 8ce:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <sg_sFrame+0x47>
 8d2:	4f ef       	ldi	r20, 0xFF	; 255
 8d4:	53 e0       	ldi	r21, 0x03	; 3
 8d6:	60 e0       	ldi	r22, 0x00	; 0
 8d8:	70 e0       	ldi	r23, 0x00	; 0
 8da:	9a 01       	movw	r18, r20
 8dc:	ab 01       	movw	r20, r22
 8de:	28 1b       	sub	r18, r24
 8e0:	39 0b       	sbc	r19, r25
 8e2:	41 09       	sbc	r20, r1
 8e4:	51 09       	sbc	r21, r1
 8e6:	03 c0       	rjmp	.+6      	; 0x8ee <ControllerStatusMessagesSend+0xde>
 8e8:	20 e0       	ldi	r18, 0x00	; 0
 8ea:	30 e0       	ldi	r19, 0x00	; 0
 8ec:	a9 01       	movw	r20, r18
 8ee:	e0 e1       	ldi	r30, 0x10	; 16
 8f0:	f1 e0       	ldi	r31, 0x01	; 1
 8f2:	a5 a1       	ldd	r26, Z+37	; 0x25
 8f4:	b6 a1       	ldd	r27, Z+38	; 0x26
 8f6:	0e 94 0f 27 	call	0x4e1e	; 0x4e1e <__mulshisi3>
 8fa:	dc 01       	movw	r26, r24
 8fc:	cb 01       	movw	r24, r22
 8fe:	68 94       	set
 900:	16 f8       	bld	r1, 6
 902:	b6 95       	lsr	r27
 904:	a7 95       	ror	r26
 906:	97 95       	ror	r25
 908:	87 95       	ror	r24
 90a:	16 94       	lsr	r1
 90c:	d1 f7       	brne	.-12     	; 0x902 <ControllerStatusMessagesSend+0xf2>
 90e:	c5 8c       	ldd	r12, Z+29	; 0x1d
 910:	d6 8c       	ldd	r13, Z+30	; 0x1e
 912:	e7 8c       	ldd	r14, Z+31	; 0x1f
 914:	f0 a0       	ldd	r15, Z+32	; 0x20
 916:	bc 01       	movw	r22, r24
 918:	cd 01       	movw	r24, r26
 91a:	6c 0d       	add	r22, r12
 91c:	7d 1d       	adc	r23, r13
 91e:	8e 1d       	adc	r24, r14
 920:	9f 1d       	adc	r25, r15
 922:	2f e0       	ldi	r18, 0x0F	; 15
 924:	30 e0       	ldi	r19, 0x00	; 0
 926:	40 e0       	ldi	r20, 0x00	; 0
 928:	50 e0       	ldi	r21, 0x00	; 0
 92a:	0e 94 18 22 	call	0x4430	; 0x4430 <__udivmodsi4>
 92e:	20 93 51 01 	sts	0x0151, r18	; 0x800151 <sg_sFrame+0x41>
 932:	30 93 52 01 	sts	0x0152, r19	; 0x800152 <sg_sFrame+0x42>
 936:	40 93 53 01 	sts	0x0153, r20	; 0x800153 <sg_sFrame+0x43>
 93a:	50 93 54 01 	sts	0x0154, r21	; 0x800154 <sg_sFrame+0x44>
 93e:	d8 01       	movw	r26, r16
 940:	16 96       	adiw	r26, 0x06	; 6
 942:	2c 93       	st	X, r18
 944:	16 97       	sbiw	r26, 0x06	; 6
 946:	17 96       	adiw	r26, 0x07	; 7
 948:	3c 93       	st	X, r19
 94a:	48 e0       	ldi	r20, 0x08	; 8
 94c:	b8 01       	movw	r22, r16
 94e:	81 e0       	ldi	r24, 0x01	; 1
 950:	0e 94 91 26 	call	0x4d22	; 0x4d22 <CANSendMessage>
 954:	88 23       	and	r24, r24
 956:	09 f4       	brne	.+2      	; 0x95a <ControllerStatusMessagesSend+0x14a>
 958:	6b c0       	rjmp	.+214    	; 0xa30 <ControllerStatusMessagesSend+0x220>
 95a:	81 e0       	ldi	r24, 0x01	; 1
 95c:	70 c0       	rjmp	.+224    	; 0xa3e <ControllerStatusMessagesSend+0x22e>
 95e:	81 30       	cpi	r24, 0x01	; 1
 960:	c1 f5       	brne	.+112    	; 0x9d2 <ControllerStatusMessagesSend+0x1c2>
 962:	e0 e1       	ldi	r30, 0x10	; 16
 964:	f1 e0       	ldi	r31, 0x01	; 1
 966:	81 ad       	ldd	r24, Z+57	; 0x39
 968:	92 ad       	ldd	r25, Z+58	; 0x3a
 96a:	d8 01       	movw	r26, r16
 96c:	8c 93       	st	X, r24
 96e:	81 ad       	ldd	r24, Z+57	; 0x39
 970:	92 ad       	ldd	r25, Z+58	; 0x3a
 972:	11 96       	adiw	r26, 0x01	; 1
 974:	9c 93       	st	X, r25
 976:	11 97       	sbiw	r26, 0x01	; 1
 978:	87 a9       	ldd	r24, Z+55	; 0x37
 97a:	90 ad       	ldd	r25, Z+56	; 0x38
 97c:	12 96       	adiw	r26, 0x02	; 2
 97e:	8c 93       	st	X, r24
 980:	12 97       	sbiw	r26, 0x02	; 2
 982:	87 a9       	ldd	r24, Z+55	; 0x37
 984:	90 ad       	ldd	r25, Z+56	; 0x38
 986:	13 96       	adiw	r26, 0x03	; 3
 988:	9c 93       	st	X, r25
 98a:	13 97       	sbiw	r26, 0x03	; 3
 98c:	83 ad       	ldd	r24, Z+59	; 0x3b
 98e:	94 ad       	ldd	r25, Z+60	; 0x3c
 990:	14 96       	adiw	r26, 0x04	; 4
 992:	8c 93       	st	X, r24
 994:	14 97       	sbiw	r26, 0x04	; 4
 996:	83 ad       	ldd	r24, Z+59	; 0x3b
 998:	94 ad       	ldd	r25, Z+60	; 0x3c
 99a:	15 96       	adiw	r26, 0x05	; 5
 99c:	9c 93       	st	X, r25
 99e:	60 91 4d 01 	lds	r22, 0x014D	; 0x80014d <sg_sFrame+0x3d>
 9a2:	70 91 4e 01 	lds	r23, 0x014E	; 0x80014e <sg_sFrame+0x3e>
 9a6:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <sg_sFrame+0x3f>
 9aa:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <sg_sFrame+0x40>
 9ae:	2f e0       	ldi	r18, 0x0F	; 15
 9b0:	30 e0       	ldi	r19, 0x00	; 0
 9b2:	40 e0       	ldi	r20, 0x00	; 0
 9b4:	50 e0       	ldi	r21, 0x00	; 0
 9b6:	0e 94 18 22 	call	0x4430	; 0x4430 <__udivmodsi4>
 9ba:	f8 01       	movw	r30, r16
 9bc:	26 83       	std	Z+6, r18	; 0x06
 9be:	37 83       	std	Z+7, r19	; 0x07
 9c0:	48 e0       	ldi	r20, 0x08	; 8
 9c2:	b8 01       	movw	r22, r16
 9c4:	82 e0       	ldi	r24, 0x02	; 2
 9c6:	0e 94 91 26 	call	0x4d22	; 0x4d22 <CANSendMessage>
 9ca:	88 23       	and	r24, r24
 9cc:	99 f1       	breq	.+102    	; 0xa34 <ControllerStatusMessagesSend+0x224>
 9ce:	81 e0       	ldi	r24, 0x01	; 1
 9d0:	36 c0       	rjmp	.+108    	; 0xa3e <ControllerStatusMessagesSend+0x22e>
 9d2:	82 30       	cpi	r24, 0x02	; 2
 9d4:	89 f5       	brne	.+98     	; 0xa38 <ControllerStatusMessagesSend+0x228>
 9d6:	e0 e1       	ldi	r30, 0x10	; 16
 9d8:	f1 e0       	ldi	r31, 0x01	; 1
 9da:	83 a9       	ldd	r24, Z+51	; 0x33
 9dc:	94 a9       	ldd	r25, Z+52	; 0x34
 9de:	d8 01       	movw	r26, r16
 9e0:	8c 93       	st	X, r24
 9e2:	83 a9       	ldd	r24, Z+51	; 0x33
 9e4:	94 a9       	ldd	r25, Z+52	; 0x34
 9e6:	11 96       	adiw	r26, 0x01	; 1
 9e8:	9c 93       	st	X, r25
 9ea:	11 97       	sbiw	r26, 0x01	; 1
 9ec:	81 a9       	ldd	r24, Z+49	; 0x31
 9ee:	92 a9       	ldd	r25, Z+50	; 0x32
 9f0:	12 96       	adiw	r26, 0x02	; 2
 9f2:	8c 93       	st	X, r24
 9f4:	12 97       	sbiw	r26, 0x02	; 2
 9f6:	81 a9       	ldd	r24, Z+49	; 0x31
 9f8:	92 a9       	ldd	r25, Z+50	; 0x32
 9fa:	13 96       	adiw	r26, 0x03	; 3
 9fc:	9c 93       	st	X, r25
 9fe:	13 97       	sbiw	r26, 0x03	; 3
 a00:	85 a9       	ldd	r24, Z+53	; 0x35
 a02:	96 a9       	ldd	r25, Z+54	; 0x36
 a04:	14 96       	adiw	r26, 0x04	; 4
 a06:	8c 93       	st	X, r24
 a08:	14 97       	sbiw	r26, 0x04	; 4
 a0a:	85 a9       	ldd	r24, Z+53	; 0x35
 a0c:	96 a9       	ldd	r25, Z+54	; 0x36
 a0e:	15 96       	adiw	r26, 0x05	; 5
 a10:	9c 93       	st	X, r25
 a12:	15 97       	sbiw	r26, 0x05	; 5
 a14:	16 96       	adiw	r26, 0x06	; 6
 a16:	1c 92       	st	X, r1
 a18:	16 97       	sbiw	r26, 0x06	; 6
 a1a:	17 96       	adiw	r26, 0x07	; 7
 a1c:	1c 92       	st	X, r1
 a1e:	48 e0       	ldi	r20, 0x08	; 8
 a20:	b8 01       	movw	r22, r16
 a22:	83 e0       	ldi	r24, 0x03	; 3
 a24:	0e 94 91 26 	call	0x4d22	; 0x4d22 <CANSendMessage>
 a28:	88 23       	and	r24, r24
 a2a:	41 f0       	breq	.+16     	; 0xa3c <ControllerStatusMessagesSend+0x22c>
 a2c:	81 e0       	ldi	r24, 0x01	; 1
 a2e:	07 c0       	rjmp	.+14     	; 0xa3e <ControllerStatusMessagesSend+0x22e>
 a30:	80 e0       	ldi	r24, 0x00	; 0
 a32:	05 c0       	rjmp	.+10     	; 0xa3e <ControllerStatusMessagesSend+0x22e>
 a34:	80 e0       	ldi	r24, 0x00	; 0
 a36:	03 c0       	rjmp	.+6      	; 0xa3e <ControllerStatusMessagesSend+0x22e>
 a38:	81 e0       	ldi	r24, 0x01	; 1
 a3a:	01 c0       	rjmp	.+2      	; 0xa3e <ControllerStatusMessagesSend+0x22e>
 a3c:	80 e0       	ldi	r24, 0x00	; 0
 a3e:	88 23       	and	r24, r24
 a40:	81 f0       	breq	.+32     	; 0xa62 <ControllerStatusMessagesSend+0x252>
 a42:	80 91 6e 09 	lds	r24, 0x096E	; 0x80096e <sg_u8ControllerStatusMsgCount>
 a46:	8f 5f       	subi	r24, 0xFF	; 255
 a48:	80 93 6e 09 	sts	0x096E, r24	; 0x80096e <sg_u8ControllerStatusMsgCount>
 a4c:	83 30       	cpi	r24, 0x03	; 3
 a4e:	48 f0       	brcs	.+18     	; 0xa62 <ControllerStatusMessagesSend+0x252>
 a50:	10 92 6e 09 	sts	0x096E, r1	; 0x80096e <sg_u8ControllerStatusMsgCount>
 a54:	10 92 1e 03 	sts	0x031E, r1	; 0x80031e <sg_bSendModuleControllerStatus>
 a58:	10 92 76 09 	sts	0x0976, r1	; 0x800976 <sg_bIgnoreStatusRequests>
 a5c:	81 e0       	ldi	r24, 0x01	; 1
 a5e:	80 93 1b 03 	sts	0x031B, r24	; 0x80031b <sg_bSendCellCommStatus>
 a62:	80 91 1d 03 	lds	r24, 0x031D	; 0x80031d <sg_bSendCellStatus>
 a66:	88 23       	and	r24, r24
 a68:	09 f4       	brne	.+2      	; 0xa6c <ControllerStatusMessagesSend+0x25c>
 a6a:	8c c0       	rjmp	.+280    	; 0xb84 <ControllerStatusMessagesSend+0x374>
 a6c:	1c 82       	std	Y+4, r1	; 0x04
 a6e:	1b 82       	std	Y+3, r1	; 0x03
 a70:	1a 82       	std	Y+2, r1	; 0x02
 a72:	19 82       	std	Y+1, r1	; 0x01
 a74:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <sg_sFrame+0x15>
 a78:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <sg_u8CellStatus>
 a7c:	89 17       	cp	r24, r25
 a7e:	88 f5       	brcc	.+98     	; 0xae2 <ControllerStatusMessagesSend+0x2d2>
 a80:	e0 91 23 03 	lds	r30, 0x0323	; 0x800323 <sg_u8CellStatus>
 a84:	f0 e0       	ldi	r31, 0x00	; 0
 a86:	75 96       	adiw	r30, 0x15	; 21
 a88:	ee 0f       	add	r30, r30
 a8a:	ff 1f       	adc	r31, r31
 a8c:	ee 0f       	add	r30, r30
 a8e:	ff 1f       	adc	r31, r31
 a90:	e0 5f       	subi	r30, 0xF0	; 240
 a92:	fe 4f       	sbci	r31, 0xFE	; 254
 a94:	80 81       	ld	r24, Z
 a96:	91 81       	ldd	r25, Z+1	; 0x01
 a98:	e0 91 23 03 	lds	r30, 0x0323	; 0x800323 <sg_u8CellStatus>
 a9c:	f0 e0       	ldi	r31, 0x00	; 0
 a9e:	75 96       	adiw	r30, 0x15	; 21
 aa0:	ee 0f       	add	r30, r30
 aa2:	ff 1f       	adc	r31, r31
 aa4:	ee 0f       	add	r30, r30
 aa6:	ff 1f       	adc	r31, r31
 aa8:	e0 5f       	subi	r30, 0xF0	; 240
 aaa:	fe 4f       	sbci	r31, 0xFE	; 254
 aac:	e2 80       	ldd	r14, Z+2	; 0x02
 aae:	f3 80       	ldd	r15, Z+3	; 0x03
 ab0:	be 01       	movw	r22, r28
 ab2:	6d 5f       	subi	r22, 0xFD	; 253
 ab4:	7f 4f       	sbci	r23, 0xFF	; 255
 ab6:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <CellDataConvertVoltage>
 aba:	81 11       	cpse	r24, r1
 abc:	02 c0       	rjmp	.+4      	; 0xac2 <ControllerStatusMessagesSend+0x2b2>
 abe:	1c 82       	std	Y+4, r1	; 0x04
 ac0:	1b 82       	std	Y+3, r1	; 0x03
 ac2:	60 e0       	ldi	r22, 0x00	; 0
 ac4:	70 e0       	ldi	r23, 0x00	; 0
 ac6:	c7 01       	movw	r24, r14
 ac8:	0e 94 57 1e 	call	0x3cae	; 0x3cae <CellDataConvertTemperature>
 acc:	88 23       	and	r24, r24
 ace:	39 f0       	breq	.+14     	; 0xade <ControllerStatusMessagesSend+0x2ce>
 ad0:	be 01       	movw	r22, r28
 ad2:	6f 5f       	subi	r22, 0xFF	; 255
 ad4:	7f 4f       	sbci	r23, 0xFF	; 255
 ad6:	c7 01       	movw	r24, r14
 ad8:	0e 94 57 1e 	call	0x3cae	; 0x3cae <CellDataConvertTemperature>
 adc:	02 c0       	rjmp	.+4      	; 0xae2 <ControllerStatusMessagesSend+0x2d2>
 ade:	1a 82       	std	Y+2, r1	; 0x02
 ae0:	19 82       	std	Y+1, r1	; 0x01
 ae2:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <sg_u8CellStatus>
 ae6:	f8 01       	movw	r30, r16
 ae8:	80 83       	st	Z, r24
 aea:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <sg_sFrame+0x15>
 aee:	81 83       	std	Z+1, r24	; 0x01
 af0:	99 81       	ldd	r25, Y+1	; 0x01
 af2:	8a 81       	ldd	r24, Y+2	; 0x02
 af4:	92 83       	std	Z+2, r25	; 0x02
 af6:	83 83       	std	Z+3, r24	; 0x03
 af8:	2b 81       	ldd	r18, Y+3	; 0x03
 afa:	3c 81       	ldd	r19, Y+4	; 0x04
 afc:	24 83       	std	Z+4, r18	; 0x04
 afe:	35 83       	std	Z+5, r19	; 0x05
 b00:	21 15       	cp	r18, r1
 b02:	31 05       	cpc	r19, r1
 b04:	59 f0       	breq	.+22     	; 0xb1c <ControllerStatusMessagesSend+0x30c>
 b06:	c9 01       	movw	r24, r18
 b08:	64 e0       	ldi	r22, 0x04	; 4
 b0a:	70 e1       	ldi	r23, 0x10	; 16
 b0c:	0e 94 5d 24 	call	0x48ba	; 0x48ba <__udivmodhi4>
 b10:	84 e6       	ldi	r24, 0x64	; 100
 b12:	68 9f       	mul	r22, r24
 b14:	60 2d       	mov	r22, r0
 b16:	11 24       	eor	r1, r1
 b18:	66 83       	std	Z+6, r22	; 0x06
 b1a:	01 c0       	rjmp	.+2      	; 0xb1e <ControllerStatusMessagesSend+0x30e>
 b1c:	16 82       	std	Z+6, r1	; 0x06
 b1e:	e0 e1       	ldi	r30, 0x10	; 16
 b20:	f1 e0       	ldi	r31, 0x01	; 1
 b22:	47 a9       	ldd	r20, Z+55	; 0x37
 b24:	50 ad       	ldd	r21, Z+56	; 0x38
 b26:	81 ad       	ldd	r24, Z+57	; 0x39
 b28:	92 ad       	ldd	r25, Z+58	; 0x3a
 b2a:	84 17       	cp	r24, r20
 b2c:	95 07       	cpc	r25, r21
 b2e:	98 f4       	brcc	.+38     	; 0xb56 <ControllerStatusMessagesSend+0x346>
 b30:	21 15       	cp	r18, r1
 b32:	31 05       	cpc	r19, r1
 b34:	81 f0       	breq	.+32     	; 0xb56 <ControllerStatusMessagesSend+0x346>
 b36:	67 a9       	ldd	r22, Z+55	; 0x37
 b38:	70 ad       	ldd	r23, Z+56	; 0x38
 b3a:	81 ad       	ldd	r24, Z+57	; 0x39
 b3c:	92 ad       	ldd	r25, Z+58	; 0x3a
 b3e:	68 1b       	sub	r22, r24
 b40:	79 0b       	sbc	r23, r25
 b42:	c9 01       	movw	r24, r18
 b44:	0e 94 5d 24 	call	0x48ba	; 0x48ba <__udivmodhi4>
 b48:	84 e6       	ldi	r24, 0x64	; 100
 b4a:	68 9f       	mul	r22, r24
 b4c:	60 2d       	mov	r22, r0
 b4e:	11 24       	eor	r1, r1
 b50:	f8 01       	movw	r30, r16
 b52:	67 83       	std	Z+7, r22	; 0x07
 b54:	03 c0       	rjmp	.+6      	; 0xb5c <ControllerStatusMessagesSend+0x34c>
 b56:	d8 01       	movw	r26, r16
 b58:	17 96       	adiw	r26, 0x07	; 7
 b5a:	1c 92       	st	X, r1
 b5c:	48 e0       	ldi	r20, 0x08	; 8
 b5e:	b8 01       	movw	r22, r16
 b60:	84 e0       	ldi	r24, 0x04	; 4
 b62:	0e 94 91 26 	call	0x4d22	; 0x4d22 <CANSendMessage>
 b66:	88 23       	and	r24, r24
 b68:	69 f0       	breq	.+26     	; 0xb84 <ControllerStatusMessagesSend+0x374>
 b6a:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <sg_u8CellStatus>
 b6e:	8f 5f       	subi	r24, 0xFF	; 255
 b70:	80 93 23 03 	sts	0x0323, r24	; 0x800323 <sg_u8CellStatus>
 b74:	90 91 23 03 	lds	r25, 0x0323	; 0x800323 <sg_u8CellStatus>
 b78:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <sg_u8CellStatusTarget>
 b7c:	98 17       	cp	r25, r24
 b7e:	10 f0       	brcs	.+4      	; 0xb84 <ControllerStatusMessagesSend+0x374>
 b80:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <sg_bSendCellStatus>
 b84:	80 91 1b 03 	lds	r24, 0x031B	; 0x80031b <sg_bSendCellCommStatus>
 b88:	88 23       	and	r24, r24
 b8a:	89 f1       	breq	.+98     	; 0xbee <ControllerStatusMessagesSend+0x3de>
 b8c:	e0 e1       	ldi	r30, 0x10	; 16
 b8e:	f1 e0       	ldi	r31, 0x01	; 1
 b90:	83 89       	ldd	r24, Z+19	; 0x13
 b92:	d8 01       	movw	r26, r16
 b94:	8c 93       	st	X, r24
 b96:	84 89       	ldd	r24, Z+20	; 0x14
 b98:	11 96       	adiw	r26, 0x01	; 1
 b9a:	8c 93       	st	X, r24
 b9c:	11 97       	sbiw	r26, 0x01	; 1
 b9e:	80 a5       	ldd	r24, Z+40	; 0x28
 ba0:	91 a5       	ldd	r25, Z+41	; 0x29
 ba2:	12 96       	adiw	r26, 0x02	; 2
 ba4:	8c 93       	st	X, r24
 ba6:	12 97       	sbiw	r26, 0x02	; 2
 ba8:	80 a5       	ldd	r24, Z+40	; 0x28
 baa:	91 a5       	ldd	r25, Z+41	; 0x29
 bac:	13 96       	adiw	r26, 0x03	; 3
 bae:	9c 93       	st	X, r25
 bb0:	13 97       	sbiw	r26, 0x03	; 3
 bb2:	86 a5       	ldd	r24, Z+46	; 0x2e
 bb4:	14 96       	adiw	r26, 0x04	; 4
 bb6:	8c 93       	st	X, r24
 bb8:	14 97       	sbiw	r26, 0x04	; 4
 bba:	82 a5       	ldd	r24, Z+42	; 0x2a
 bbc:	8f 3f       	cpi	r24, 0xFF	; 255
 bbe:	31 f0       	breq	.+12     	; 0xbcc <ControllerStatusMessagesSend+0x3bc>
 bc0:	85 a5       	ldd	r24, Z+45	; 0x2d
 bc2:	92 a5       	ldd	r25, Z+42	; 0x2a
 bc4:	89 1b       	sub	r24, r25
 bc6:	15 96       	adiw	r26, 0x05	; 5
 bc8:	8c 93       	st	X, r24
 bca:	03 c0       	rjmp	.+6      	; 0xbd2 <ControllerStatusMessagesSend+0x3c2>
 bcc:	8f ef       	ldi	r24, 0xFF	; 255
 bce:	f8 01       	movw	r30, r16
 bd0:	85 83       	std	Z+5, r24	; 0x05
 bd2:	d8 01       	movw	r26, r16
 bd4:	16 96       	adiw	r26, 0x06	; 6
 bd6:	1c 92       	st	X, r1
 bd8:	16 97       	sbiw	r26, 0x06	; 6
 bda:	17 96       	adiw	r26, 0x07	; 7
 bdc:	1c 92       	st	X, r1
 bde:	48 e0       	ldi	r20, 0x08	; 8
 be0:	b8 01       	movw	r22, r16
 be2:	86 e0       	ldi	r24, 0x06	; 6
 be4:	0e 94 91 26 	call	0x4d22	; 0x4d22 <CANSendMessage>
 be8:	81 11       	cpse	r24, r1
 bea:	10 92 1b 03 	sts	0x031B, r1	; 0x80031b <sg_bSendCellCommStatus>
 bee:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <sg_bSendHardwareDetail>
 bf2:	88 23       	and	r24, r24
 bf4:	91 f0       	breq	.+36     	; 0xc1a <ControllerStatusMessagesSend+0x40a>
 bf6:	b8 01       	movw	r22, r16
 bf8:	c8 01       	movw	r24, r16
 bfa:	02 96       	adiw	r24, 0x02	; 2
 bfc:	0e 94 41 1b 	call	0x3682	; 0x3682 <CurrentThresholdsGet>
 c00:	f8 01       	movw	r30, r16
 c02:	14 82       	std	Z+4, r1	; 0x04
 c04:	15 82       	std	Z+5, r1	; 0x05
 c06:	16 82       	std	Z+6, r1	; 0x06
 c08:	17 82       	std	Z+7, r1	; 0x07
 c0a:	48 e0       	ldi	r20, 0x08	; 8
 c0c:	b8 01       	movw	r22, r16
 c0e:	85 e0       	ldi	r24, 0x05	; 5
 c10:	0e 94 91 26 	call	0x4d22	; 0x4d22 <CANSendMessage>
 c14:	81 11       	cpse	r24, r1
 c16:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <sg_bSendHardwareDetail>
 c1a:	0f 90       	pop	r0
 c1c:	0f 90       	pop	r0
 c1e:	0f 90       	pop	r0
 c20:	0f 90       	pop	r0
 c22:	df 91       	pop	r29
 c24:	cf 91       	pop	r28
 c26:	1f 91       	pop	r17
 c28:	0f 91       	pop	r16
 c2a:	ff 90       	pop	r15
 c2c:	ef 90       	pop	r14
 c2e:	df 90       	pop	r13
 c30:	cf 90       	pop	r12
 c32:	08 95       	ret

Disassembly of section .text.CellStringProcess:

00000efa <CellStringProcess>:
     efa:	3f 92       	push	r3
     efc:	4f 92       	push	r4
     efe:	5f 92       	push	r5
     f00:	6f 92       	push	r6
     f02:	7f 92       	push	r7
     f04:	8f 92       	push	r8
     f06:	9f 92       	push	r9
     f08:	af 92       	push	r10
     f0a:	bf 92       	push	r11
     f0c:	cf 92       	push	r12
     f0e:	df 92       	push	r13
     f10:	ef 92       	push	r14
     f12:	ff 92       	push	r15
     f14:	0f 93       	push	r16
     f16:	1f 93       	push	r17
     f18:	cf 93       	push	r28
     f1a:	df 93       	push	r29
     f1c:	00 d0       	rcall	.+0      	; 0xf1e <CellStringProcess+0x24>
     f1e:	00 d0       	rcall	.+0      	; 0xf20 <CellStringProcess+0x26>
     f20:	00 d0       	rcall	.+0      	; 0xf22 <CellStringProcess+0x28>
     f22:	cd b7       	in	r28, 0x3d	; 61
     f24:	de b7       	in	r29, 0x3e	; 62
     f26:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <sg_sFrame+0x2b>
     f2a:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <sg_sFrame+0x2c>
     f2e:	89 2b       	or	r24, r25
     f30:	09 f4       	brne	.+2      	; 0xf34 <CellStringProcess+0x3a>
     f32:	1e c1       	rjmp	.+572    	; 0x1170 <__stack+0x71>
     f34:	e0 e1       	ldi	r30, 0x10	; 16
     f36:	f1 e0       	ldi	r31, 0x01	; 1
     f38:	8f ef       	ldi	r24, 0xFF	; 255
     f3a:	82 a7       	std	Z+42, r24	; 0x2a
     f3c:	93 89       	ldd	r25, Z+19	; 0x13
     f3e:	85 a5       	ldd	r24, Z+45	; 0x2d
     f40:	89 17       	cp	r24, r25
     f42:	28 f4       	brcc	.+10     	; 0xf4e <CellStringProcess+0x54>
     f44:	85 a5       	ldd	r24, Z+45	; 0x2d
     f46:	83 8b       	std	Z+19, r24	; 0x13
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	80 93 1b 03 	sts	0x031B, r24	; 0x80031b <sg_bSendCellCommStatus>
     f4e:	e0 e1       	ldi	r30, 0x10	; 16
     f50:	f1 e0       	ldi	r31, 0x01	; 1
     f52:	94 89       	ldd	r25, Z+20	; 0x14
     f54:	85 a5       	ldd	r24, Z+45	; 0x2d
     f56:	98 17       	cp	r25, r24
     f58:	28 f4       	brcc	.+10     	; 0xf64 <CellStringProcess+0x6a>
     f5a:	85 a5       	ldd	r24, Z+45	; 0x2d
     f5c:	84 8b       	std	Z+20, r24	; 0x14
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	80 93 1b 03 	sts	0x031B, r24	; 0x80031b <sg_bSendCellCommStatus>
     f64:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <sg_sFrame+0x2b>
     f68:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <sg_sFrame+0x2c>
     f6c:	83 70       	andi	r24, 0x03	; 3
     f6e:	99 27       	eor	r25, r25
     f70:	89 2b       	or	r24, r25
     f72:	61 f0       	breq	.+24     	; 0xf8c <CellStringProcess+0x92>
     f74:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <sg_sFrame+0x2e>
     f78:	8f 3f       	cpi	r24, 0xFF	; 255
     f7a:	41 f0       	breq	.+16     	; 0xf8c <CellStringProcess+0x92>
     f7c:	e0 e1       	ldi	r30, 0x10	; 16
     f7e:	f1 e0       	ldi	r31, 0x01	; 1
     f80:	86 a5       	ldd	r24, Z+46	; 0x2e
     f82:	8f 5f       	subi	r24, 0xFF	; 255
     f84:	86 a7       	std	Z+46, r24	; 0x2e
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	80 93 1b 03 	sts	0x031B, r24	; 0x80031b <sg_bSendCellCommStatus>
     f8c:	e0 e1       	ldi	r30, 0x10	; 16
     f8e:	f1 e0       	ldi	r31, 0x01	; 1
     f90:	10 ae       	std	Z+56, r1	; 0x38
     f92:	17 aa       	std	Z+55, r1	; 0x37
     f94:	8f ef       	ldi	r24, 0xFF	; 255
     f96:	9f ef       	ldi	r25, 0xFF	; 255
     f98:	92 af       	std	Z+58, r25	; 0x3a
     f9a:	81 af       	std	Z+57, r24	; 0x39
     f9c:	14 ae       	std	Z+60, r1	; 0x3c
     f9e:	13 ae       	std	Z+59, r1	; 0x3b
     fa0:	80 e0       	ldi	r24, 0x00	; 0
     fa2:	90 e8       	ldi	r25, 0x80	; 128
     fa4:	92 ab       	std	Z+50, r25	; 0x32
     fa6:	81 ab       	std	Z+49, r24	; 0x31
     fa8:	8f ef       	ldi	r24, 0xFF	; 255
     faa:	9f e7       	ldi	r25, 0x7F	; 127
     fac:	94 ab       	std	Z+52, r25	; 0x34
     fae:	83 ab       	std	Z+51, r24	; 0x33
     fb0:	16 aa       	std	Z+54, r1	; 0x36
     fb2:	15 aa       	std	Z+53, r1	; 0x35
     fb4:	d1 2c       	mov	r13, r1
     fb6:	31 2c       	mov	r3, r1
     fb8:	c1 2c       	mov	r12, r1
     fba:	41 2c       	mov	r4, r1
     fbc:	51 2c       	mov	r5, r1
     fbe:	32 01       	movw	r6, r4
     fc0:	81 2c       	mov	r8, r1
     fc2:	91 2c       	mov	r9, r1
     fc4:	54 01       	movw	r10, r8
     fc6:	2f ef       	ldi	r18, 0xFF	; 255
     fc8:	3f e7       	ldi	r19, 0x7F	; 127
     fca:	3e 83       	std	Y+6, r19	; 0x06
     fcc:	2d 83       	std	Y+5, r18	; 0x05
     fce:	80 e0       	ldi	r24, 0x00	; 0
     fd0:	90 e8       	ldi	r25, 0x80	; 128
     fd2:	9c 83       	std	Y+4, r25	; 0x04
     fd4:	8b 83       	std	Y+3, r24	; 0x03
     fd6:	6b c0       	rjmp	.+214    	; 0x10ae <__DATA_REGION_LENGTH__+0xae>
     fd8:	0d 2d       	mov	r16, r13
     fda:	10 e0       	ldi	r17, 0x00	; 0
     fdc:	f8 01       	movw	r30, r16
     fde:	75 96       	adiw	r30, 0x15	; 21
     fe0:	ee 0f       	add	r30, r30
     fe2:	ff 1f       	adc	r31, r31
     fe4:	ee 0f       	add	r30, r30
     fe6:	ff 1f       	adc	r31, r31
     fe8:	e0 5f       	subi	r30, 0xF0	; 240
     fea:	fe 4f       	sbci	r31, 0xFE	; 254
     fec:	80 81       	ld	r24, Z
     fee:	91 81       	ldd	r25, Z+1	; 0x01
     ff0:	9a 83       	std	Y+2, r25	; 0x02
     ff2:	89 83       	std	Y+1, r24	; 0x01
     ff4:	e2 80       	ldd	r14, Z+2	; 0x02
     ff6:	f3 80       	ldd	r15, Z+3	; 0x03
     ff8:	60 e0       	ldi	r22, 0x00	; 0
     ffa:	70 e0       	ldi	r23, 0x00	; 0
     ffc:	c7 01       	movw	r24, r14
     ffe:	0e 94 57 1e 	call	0x3cae	; 0x3cae <CellDataConvertTemperature>
    1002:	88 23       	and	r24, r24
    1004:	f1 f0       	breq	.+60     	; 0x1042 <__DATA_REGION_LENGTH__+0x42>
    1006:	f4 fe       	sbrs	r15, 4
    1008:	03 c0       	rjmp	.+6      	; 0x1010 <__DATA_REGION_LENGTH__+0x10>
    100a:	c7 01       	movw	r24, r14
    100c:	90 6f       	ori	r25, 0xF0	; 240
    100e:	02 c0       	rjmp	.+4      	; 0x1014 <__DATA_REGION_LENGTH__+0x14>
    1010:	c7 01       	movw	r24, r14
    1012:	9f 77       	andi	r25, 0x7F	; 127
    1014:	2b 81       	ldd	r18, Y+3	; 0x03
    1016:	3c 81       	ldd	r19, Y+4	; 0x04
    1018:	28 17       	cp	r18, r24
    101a:	39 07       	cpc	r19, r25
    101c:	14 f4       	brge	.+4      	; 0x1022 <__DATA_REGION_LENGTH__+0x22>
    101e:	9c 83       	std	Y+4, r25	; 0x04
    1020:	8b 83       	std	Y+3, r24	; 0x03
    1022:	2d 81       	ldd	r18, Y+5	; 0x05
    1024:	3e 81       	ldd	r19, Y+6	; 0x06
    1026:	82 17       	cp	r24, r18
    1028:	93 07       	cpc	r25, r19
    102a:	14 f4       	brge	.+4      	; 0x1030 <__DATA_REGION_LENGTH__+0x30>
    102c:	9e 83       	std	Y+6, r25	; 0x06
    102e:	8d 83       	std	Y+5, r24	; 0x05
    1030:	09 2e       	mov	r0, r25
    1032:	00 0c       	add	r0, r0
    1034:	aa 0b       	sbc	r26, r26
    1036:	bb 0b       	sbc	r27, r27
    1038:	88 0e       	add	r8, r24
    103a:	99 1e       	adc	r9, r25
    103c:	aa 1e       	adc	r10, r26
    103e:	bb 1e       	adc	r11, r27
    1040:	33 94       	inc	r3
    1042:	f8 01       	movw	r30, r16
    1044:	75 96       	adiw	r30, 0x15	; 21
    1046:	ee 0f       	add	r30, r30
    1048:	ff 1f       	adc	r31, r31
    104a:	ee 0f       	add	r30, r30
    104c:	ff 1f       	adc	r31, r31
    104e:	e0 5f       	subi	r30, 0xF0	; 240
    1050:	fe 4f       	sbci	r31, 0xFE	; 254
    1052:	80 81       	ld	r24, Z
    1054:	91 81       	ldd	r25, Z+1	; 0x01
    1056:	99 23       	and	r25, r25
    1058:	1c f4       	brge	.+6      	; 0x1060 <__DATA_REGION_LENGTH__+0x60>
    105a:	81 e0       	ldi	r24, 0x01	; 1
    105c:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <sg_sFrame+0x27>
    1060:	be 01       	movw	r22, r28
    1062:	6f 5f       	subi	r22, 0xFF	; 255
    1064:	7f 4f       	sbci	r23, 0xFF	; 255
    1066:	89 81       	ldd	r24, Y+1	; 0x01
    1068:	9a 81       	ldd	r25, Y+2	; 0x02
    106a:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <CellDataConvertVoltage>
    106e:	88 23       	and	r24, r24
    1070:	e9 f0       	breq	.+58     	; 0x10ac <__DATA_REGION_LENGTH__+0xac>
    1072:	20 91 47 01 	lds	r18, 0x0147	; 0x800147 <sg_sFrame+0x37>
    1076:	30 91 48 01 	lds	r19, 0x0148	; 0x800148 <sg_sFrame+0x38>
    107a:	89 81       	ldd	r24, Y+1	; 0x01
    107c:	9a 81       	ldd	r25, Y+2	; 0x02
    107e:	28 17       	cp	r18, r24
    1080:	39 07       	cpc	r19, r25
    1082:	20 f4       	brcc	.+8      	; 0x108c <__DATA_REGION_LENGTH__+0x8c>
    1084:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <sg_sFrame+0x38>
    1088:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <sg_sFrame+0x37>
    108c:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <sg_sFrame+0x39>
    1090:	30 91 4a 01 	lds	r19, 0x014A	; 0x80014a <sg_sFrame+0x3a>
    1094:	82 17       	cp	r24, r18
    1096:	93 07       	cpc	r25, r19
    1098:	20 f4       	brcc	.+8      	; 0x10a2 <__DATA_REGION_LENGTH__+0xa2>
    109a:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <sg_sFrame+0x3a>
    109e:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <sg_sFrame+0x39>
    10a2:	48 0e       	add	r4, r24
    10a4:	59 1e       	adc	r5, r25
    10a6:	61 1c       	adc	r6, r1
    10a8:	71 1c       	adc	r7, r1
    10aa:	c3 94       	inc	r12
    10ac:	d3 94       	inc	r13
    10ae:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <sg_sFrame+0x2d>
    10b2:	d8 16       	cp	r13, r24
    10b4:	08 f4       	brcc	.+2      	; 0x10b8 <__DATA_REGION_LENGTH__+0xb8>
    10b6:	90 cf       	rjmp	.-224    	; 0xfd8 <CellStringProcess+0xde>
    10b8:	cc 20       	and	r12, r12
    10ba:	89 f1       	breq	.+98     	; 0x111e <__stack+0x1f>
    10bc:	ed e4       	ldi	r30, 0x4D	; 77
    10be:	f1 e0       	ldi	r31, 0x01	; 1
    10c0:	40 82       	st	Z, r4
    10c2:	51 82       	std	Z+1, r5	; 0x01
    10c4:	62 82       	std	Z+2, r6	; 0x02
    10c6:	73 82       	std	Z+3, r7	; 0x03
    10c8:	60 81       	ld	r22, Z
    10ca:	71 81       	ldd	r23, Z+1	; 0x01
    10cc:	82 81       	ldd	r24, Z+2	; 0x02
    10ce:	93 81       	ldd	r25, Z+3	; 0x03
    10d0:	2c 2d       	mov	r18, r12
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	40 e0       	ldi	r20, 0x00	; 0
    10d6:	50 e0       	ldi	r21, 0x00	; 0
    10d8:	0e 94 18 22 	call	0x4430	; 0x4430 <__udivmodsi4>
    10dc:	30 93 4c 01 	sts	0x014C, r19	; 0x80014c <sg_sFrame+0x3c>
    10e0:	20 93 4b 01 	sts	0x014B, r18	; 0x80014b <sg_sFrame+0x3b>
    10e4:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    10e8:	83 30       	cpi	r24, 0x03	; 3
    10ea:	c9 f0       	breq	.+50     	; 0x111e <__stack+0x1f>
    10ec:	80 91 19 03 	lds	r24, 0x0319	; 0x800319 <sg_bCellBalancedOnce>
    10f0:	81 11       	cpse	r24, r1
    10f2:	15 c0       	rjmp	.+42     	; 0x111e <__stack+0x1f>
    10f4:	e0 e1       	ldi	r30, 0x10	; 16
    10f6:	f1 e0       	ldi	r31, 0x01	; 1
    10f8:	27 a9       	ldd	r18, Z+55	; 0x37
    10fa:	30 ad       	ldd	r19, Z+56	; 0x38
    10fc:	81 ad       	ldd	r24, Z+57	; 0x39
    10fe:	92 ad       	ldd	r25, Z+58	; 0x3a
    1100:	28 17       	cp	r18, r24
    1102:	39 07       	cpc	r19, r25
    1104:	60 f0       	brcs	.+24     	; 0x111e <__stack+0x1f>
    1106:	87 a9       	ldd	r24, Z+55	; 0x37
    1108:	90 ad       	ldd	r25, Z+56	; 0x38
    110a:	21 ad       	ldd	r18, Z+57	; 0x39
    110c:	32 ad       	ldd	r19, Z+58	; 0x3a
    110e:	82 1b       	sub	r24, r18
    1110:	93 0b       	sbc	r25, r19
    1112:	80 34       	cpi	r24, 0x40	; 64
    1114:	91 05       	cpc	r25, r1
    1116:	18 f0       	brcs	.+6      	; 0x111e <__stack+0x1f>
    1118:	81 e0       	ldi	r24, 0x01	; 1
    111a:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <sg_bCellBalanceReady>
    111e:	33 20       	and	r3, r3
    1120:	c9 f0       	breq	.+50     	; 0x1154 <__stack+0x55>
    1122:	23 2d       	mov	r18, r3
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	40 e0       	ldi	r20, 0x00	; 0
    1128:	50 e0       	ldi	r21, 0x00	; 0
    112a:	c5 01       	movw	r24, r10
    112c:	b4 01       	movw	r22, r8
    112e:	0e 94 9d 23 	call	0x473a	; 0x473a <__divmodsi4>
    1132:	65 e4       	ldi	r22, 0x45	; 69
    1134:	71 e0       	ldi	r23, 0x01	; 1
    1136:	c9 01       	movw	r24, r18
    1138:	0e 94 57 1e 	call	0x3cae	; 0x3cae <CellDataConvertTemperature>
    113c:	61 e4       	ldi	r22, 0x41	; 65
    113e:	71 e0       	ldi	r23, 0x01	; 1
    1140:	8b 81       	ldd	r24, Y+3	; 0x03
    1142:	9c 81       	ldd	r25, Y+4	; 0x04
    1144:	0e 94 57 1e 	call	0x3cae	; 0x3cae <CellDataConvertTemperature>
    1148:	63 e4       	ldi	r22, 0x43	; 67
    114a:	71 e0       	ldi	r23, 0x01	; 1
    114c:	8d 81       	ldd	r24, Y+5	; 0x05
    114e:	9e 81       	ldd	r25, Y+6	; 0x06
    1150:	0e 94 57 1e 	call	0x3cae	; 0x3cae <CellDataConvertTemperature>
    1154:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <sg_bSDCardReady>
    1158:	88 23       	and	r24, r24
    115a:	51 f0       	breq	.+20     	; 0x1170 <__stack+0x71>
    115c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    1160:	88 23       	and	r24, r24
    1162:	31 f0       	breq	.+12     	; 0x1170 <__stack+0x71>
    1164:	80 e1       	ldi	r24, 0x10	; 16
    1166:	91 e0       	ldi	r25, 0x01	; 1
    1168:	0e 94 4c 14 	call	0x2898	; 0x2898 <STORE_WriteFrame>
    116c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <sg_bSDCardReady>
    1170:	26 96       	adiw	r28, 0x06	; 6
    1172:	0f b6       	in	r0, 0x3f	; 63
    1174:	f8 94       	cli
    1176:	de bf       	out	0x3e, r29	; 62
    1178:	0f be       	out	0x3f, r0	; 63
    117a:	cd bf       	out	0x3d, r28	; 61
    117c:	df 91       	pop	r29
    117e:	cf 91       	pop	r28
    1180:	1f 91       	pop	r17
    1182:	0f 91       	pop	r16
    1184:	ff 90       	pop	r15
    1186:	ef 90       	pop	r14
    1188:	df 90       	pop	r13
    118a:	cf 90       	pop	r12
    118c:	bf 90       	pop	r11
    118e:	af 90       	pop	r10
    1190:	9f 90       	pop	r9
    1192:	8f 90       	pop	r8
    1194:	7f 90       	pop	r7
    1196:	6f 90       	pop	r6
    1198:	5f 90       	pop	r5
    119a:	4f 90       	pop	r4
    119c:	3f 90       	pop	r3
    119e:	08 95       	ret

Disassembly of section .text.Delay:

0000425e <Delay>:
    425e:	ab 01       	movw	r20, r22
    4260:	bc 01       	movw	r22, r24
    4262:	4f 5f       	subi	r20, 0xFF	; 255
    4264:	5f 4f       	sbci	r21, 0xFF	; 255
    4266:	6f 4f       	sbci	r22, 0xFF	; 255
    4268:	7f 4f       	sbci	r23, 0xFF	; 255
    426a:	76 95       	lsr	r23
    426c:	67 95       	ror	r22
    426e:	57 95       	ror	r21
    4270:	47 95       	ror	r20
    4272:	96 b5       	in	r25, 0x26	; 38
    4274:	17 c0       	rjmp	.+46     	; 0x42a4 <Delay+0x46>
    4276:	86 b5       	in	r24, 0x26	; 38
    4278:	98 17       	cp	r25, r24
    427a:	e9 f3       	breq	.-6      	; 0x4276 <Delay+0x18>
    427c:	26 b5       	in	r18, 0x26	; 38
    427e:	82 2f       	mov	r24, r18
    4280:	89 1b       	sub	r24, r25
    4282:	90 e0       	ldi	r25, 0x00	; 0
    4284:	a0 e0       	ldi	r26, 0x00	; 0
    4286:	b0 e0       	ldi	r27, 0x00	; 0
    4288:	48 17       	cp	r20, r24
    428a:	59 07       	cpc	r21, r25
    428c:	6a 07       	cpc	r22, r26
    428e:	7b 07       	cpc	r23, r27
    4290:	28 f0       	brcs	.+10     	; 0x429c <Delay+0x3e>
    4292:	48 1b       	sub	r20, r24
    4294:	59 0b       	sbc	r21, r25
    4296:	6a 0b       	sbc	r22, r26
    4298:	7b 0b       	sbc	r23, r27
    429a:	03 c0       	rjmp	.+6      	; 0x42a2 <Delay+0x44>
    429c:	40 e0       	ldi	r20, 0x00	; 0
    429e:	50 e0       	ldi	r21, 0x00	; 0
    42a0:	ba 01       	movw	r22, r20
    42a2:	92 2f       	mov	r25, r18
    42a4:	41 15       	cp	r20, r1
    42a6:	51 05       	cpc	r21, r1
    42a8:	61 05       	cpc	r22, r1
    42aa:	71 05       	cpc	r23, r1
    42ac:	21 f7       	brne	.-56     	; 0x4276 <Delay+0x18>
    42ae:	08 95       	ret

Disassembly of section .text.PlatformAssert:

000047c0 <PlatformAssert>:



void PlatformAssert( const char* peFilename, const int s32LineNumber )
{
	DebugOut("Assert %s: %d\n", peFilename, s32LineNumber);
    47c0:	5f 93       	push	r21
    47c2:	4f 93       	push	r20
    47c4:	8f 93       	push	r24
    47c6:	7f 93       	push	r23
    47c8:	6f 93       	push	r22
    47ca:	88 e3       	ldi	r24, 0x38	; 56
    47cc:	92 e0       	ldi	r25, 0x02	; 2
    47ce:	a0 e0       	ldi	r26, 0x00	; 0
    47d0:	af 93       	push	r26
    47d2:	9f 93       	push	r25
    47d4:	8f 93       	push	r24
    47d6:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <DebugOut>
	
//	while(1);
}
    47da:	8d b7       	in	r24, 0x3d	; 61
    47dc:	9e b7       	in	r25, 0x3e	; 62
    47de:	08 96       	adiw	r24, 0x08	; 8
    47e0:	0f b6       	in	r0, 0x3f	; 63
    47e2:	f8 94       	cli
    47e4:	9e bf       	out	0x3e, r25	; 62
    47e6:	0f be       	out	0x3f, r0	; 63
    47e8:	8d bf       	out	0x3d, r24	; 61
    47ea:	08 95       	ret

Disassembly of section .text.ModuleControllerStateHandle:

000018b0 <ModuleControllerStateHandle>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    18b0:	1f 93       	push	r17
    18b2:	cf 93       	push	r28
    18b4:	df 93       	push	r29
    18b6:	d0 91 06 01 	lds	r29, 0x0106	; 0x800106 <sg_eModuleControllerStateTarget>
    18ba:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <sg_eModuleControllerStateMax>
    18be:	8d 17       	cp	r24, r29
    18c0:	30 f0       	brcs	.+12     	; 0x18ce <ModuleControllerStateHandle+0x1e>
    18c2:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    18c6:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <sg_eModuleControllerStateMax>
    18ca:	89 17       	cp	r24, r25
    18cc:	10 f4       	brcc	.+4      	; 0x18d2 <ModuleControllerStateHandle+0x22>
    18ce:	d0 91 05 01 	lds	r29, 0x0105	; 0x800105 <sg_eModuleControllerStateMax>
    18d2:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    18d6:	d8 17       	cp	r29, r24
    18d8:	09 f4       	brne	.+2      	; 0x18dc <ModuleControllerStateHandle+0x2c>
    18da:	f5 c0       	rjmp	.+490    	; 0x1ac6 <ModuleControllerStateHandle+0x216>
    18dc:	d2 30       	cpi	r29, 0x02	; 2
    18de:	09 f4       	brne	.+2      	; 0x18e2 <ModuleControllerStateHandle+0x32>
    18e0:	72 c0       	rjmp	.+228    	; 0x19c6 <ModuleControllerStateHandle+0x116>
    18e2:	28 f4       	brcc	.+10     	; 0x18ee <ModuleControllerStateHandle+0x3e>
    18e4:	dd 23       	and	r29, r29
    18e6:	89 f0       	breq	.+34     	; 0x190a <ModuleControllerStateHandle+0x5a>
    18e8:	d1 30       	cpi	r29, 0x01	; 1
    18ea:	e1 f1       	breq	.+120    	; 0x1964 <ModuleControllerStateHandle+0xb4>
    18ec:	e0 c0       	rjmp	.+448    	; 0x1aae <ModuleControllerStateHandle+0x1fe>
    18ee:	d3 30       	cpi	r29, 0x03	; 3
    18f0:	09 f4       	brne	.+2      	; 0x18f4 <ModuleControllerStateHandle+0x44>
    18f2:	a9 c0       	rjmp	.+338    	; 0x1a46 <ModuleControllerStateHandle+0x196>
    18f4:	d5 30       	cpi	r29, 0x05	; 5
    18f6:	09 f0       	breq	.+2      	; 0x18fa <ModuleControllerStateHandle+0x4a>
    18f8:	da c0       	rjmp	.+436    	; 0x1aae <ModuleControllerStateHandle+0x1fe>
    18fa:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <sg_eModuleControllerStateCurrent>
    18fe:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <sg_eModuleControllerStateTarget>
    1902:	d0 91 07 01 	lds	r29, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    1906:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <ADCSetPowerOn>
    190a:	88 b1       	in	r24, 0x08	; 8
    190c:	8f 7e       	andi	r24, 0xEF	; 239
    190e:	88 b9       	out	0x08, r24	; 8
    1910:	68 e8       	ldi	r22, 0x88	; 136
    1912:	73 e1       	ldi	r23, 0x13	; 19
    1914:	80 e0       	ldi	r24, 0x00	; 0
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	0e 94 2f 21 	call	0x425e	; 0x425e <Delay>
    191c:	8e b1       	in	r24, 0x0e	; 14
    191e:	8d 7f       	andi	r24, 0xFD	; 253
    1920:	8e b9       	out	0x0e, r24	; 14
    1922:	68 e8       	ldi	r22, 0x88	; 136
    1924:	73 e1       	ldi	r23, 0x13	; 19
    1926:	80 e0       	ldi	r24, 0x00	; 0
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	0e 94 2f 21 	call	0x425e	; 0x425e <Delay>
    192e:	eb e6       	ldi	r30, 0x6B	; 107
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	80 81       	ld	r24, Z
    1934:	8d 7f       	andi	r24, 0xFD	; 253
    1936:	80 83       	st	Z, r24
    1938:	e8 e6       	ldi	r30, 0x68	; 104
    193a:	f0 e0       	ldi	r31, 0x00	; 0
    193c:	80 81       	ld	r24, Z
    193e:	8d 7f       	andi	r24, 0xFD	; 253
    1940:	80 83       	st	Z, r24
    1942:	81 e0       	ldi	r24, 0x01	; 1
    1944:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <sg_bCellBalanceReady>
    1948:	10 92 19 03 	sts	0x0319, r1	; 0x800319 <sg_bCellBalancedOnce>
    194c:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <sg_bStopDischarge>
    1950:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <sg_bSDCardReady>
    1954:	88 23       	and	r24, r24
    1956:	09 f4       	brne	.+2      	; 0x195a <ModuleControllerStateHandle+0xaa>
    1958:	b2 c0       	rjmp	.+356    	; 0x1abe <ModuleControllerStateHandle+0x20e>
    195a:	0e 94 2e 20 	call	0x405c	; 0x405c <STORE_EndSession>
    195e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <sg_bSDCardReady>
    1962:	ad c0       	rjmp	.+346    	; 0x1abe <ModuleControllerStateHandle+0x20e>
    1964:	88 b1       	in	r24, 0x08	; 8
    1966:	8f 7e       	andi	r24, 0xEF	; 239
    1968:	88 b9       	out	0x08, r24	; 8
    196a:	68 e8       	ldi	r22, 0x88	; 136
    196c:	73 e1       	ldi	r23, 0x13	; 19
    196e:	80 e0       	ldi	r24, 0x00	; 0
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	0e 94 2f 21 	call	0x425e	; 0x425e <Delay>
    1976:	eb e6       	ldi	r30, 0x6B	; 107
    1978:	f0 e0       	ldi	r31, 0x00	; 0
    197a:	80 81       	ld	r24, Z
    197c:	8d 7f       	andi	r24, 0xFD	; 253
    197e:	80 83       	st	Z, r24
    1980:	e8 e6       	ldi	r30, 0x68	; 104
    1982:	f0 e0       	ldi	r31, 0x00	; 0
    1984:	80 81       	ld	r24, Z
    1986:	8d 7f       	andi	r24, 0xFD	; 253
    1988:	80 83       	st	Z, r24
    198a:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <sg_bModuleRegistered>
    198e:	88 23       	and	r24, r24
    1990:	19 f0       	breq	.+6      	; 0x1998 <ModuleControllerStateHandle+0xe8>
    1992:	8e b1       	in	r24, 0x0e	; 14
    1994:	82 60       	ori	r24, 0x02	; 2
    1996:	8e b9       	out	0x0e, r24	; 14
    1998:	68 e8       	ldi	r22, 0x88	; 136
    199a:	73 e1       	ldi	r23, 0x13	; 19
    199c:	80 e0       	ldi	r24, 0x00	; 0
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	0e 94 2f 21 	call	0x425e	; 0x425e <Delay>
    19a4:	81 e0       	ldi	r24, 0x01	; 1
    19a6:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <sg_bCellBalanceReady>
    19aa:	10 92 19 03 	sts	0x0319, r1	; 0x800319 <sg_bCellBalancedOnce>
    19ae:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <sg_bStopDischarge>
    19b2:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <sg_bSDCardReady>
    19b6:	88 23       	and	r24, r24
    19b8:	09 f4       	brne	.+2      	; 0x19bc <ModuleControllerStateHandle+0x10c>
    19ba:	81 c0       	rjmp	.+258    	; 0x1abe <ModuleControllerStateHandle+0x20e>
    19bc:	0e 94 05 21 	call	0x420a	; 0x420a <STORE_StartNewSession>
    19c0:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <sg_bSDCardReady>
    19c4:	7c c0       	rjmp	.+248    	; 0x1abe <ModuleControllerStateHandle+0x20e>
    19c6:	61 99       	sbic	0x0c, 1	; 12
    19c8:	0d c0       	rjmp	.+26     	; 0x19e4 <ModuleControllerStateHandle+0x134>
    19ca:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <sg_bModuleRegistered>
    19ce:	88 23       	and	r24, r24
    19d0:	19 f0       	breq	.+6      	; 0x19d8 <ModuleControllerStateHandle+0x128>
    19d2:	8e b1       	in	r24, 0x0e	; 14
    19d4:	82 60       	ori	r24, 0x02	; 2
    19d6:	8e b9       	out	0x0e, r24	; 14
    19d8:	68 e8       	ldi	r22, 0x88	; 136
    19da:	73 e1       	ldi	r23, 0x13	; 19
    19dc:	80 e0       	ldi	r24, 0x00	; 0
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	0e 94 2f 21 	call	0x425e	; 0x425e <Delay>
    19e4:	cb e0       	ldi	r28, 0x0B	; 11
    19e6:	2a c0       	rjmp	.+84     	; 0x1a3c <ModuleControllerStateHandle+0x18c>
    19e8:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <sg_bModuleRegistered>
    19ec:	88 23       	and	r24, r24
    19ee:	49 f0       	breq	.+18     	; 0x1a02 <ModuleControllerStateHandle+0x152>
    19f0:	88 b1       	in	r24, 0x08	; 8
    19f2:	80 61       	ori	r24, 0x10	; 16
    19f4:	88 b9       	out	0x08, r24	; 8
    19f6:	88 b1       	in	r24, 0x08	; 8
    19f8:	8f 77       	andi	r24, 0x7F	; 127
    19fa:	88 b9       	out	0x08, r24	; 8
    19fc:	88 b1       	in	r24, 0x08	; 8
    19fe:	80 68       	ori	r24, 0x80	; 128
    1a00:	88 b9       	out	0x08, r24	; 8
    1a02:	68 ee       	ldi	r22, 0xE8	; 232
    1a04:	73 e0       	ldi	r23, 0x03	; 3
    1a06:	80 e0       	ldi	r24, 0x00	; 0
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	0e 94 2f 21 	call	0x425e	; 0x425e <Delay>
    1a0e:	88 b1       	in	r24, 0x08	; 8
    1a10:	8f 7e       	andi	r24, 0xEF	; 239
    1a12:	88 b9       	out	0x08, r24	; 8
    1a14:	68 e8       	ldi	r22, 0x88	; 136
    1a16:	73 e1       	ldi	r23, 0x13	; 19
    1a18:	80 e0       	ldi	r24, 0x00	; 0
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	0e 94 2f 21 	call	0x425e	; 0x425e <Delay>
    1a20:	60 e5       	ldi	r22, 0x50	; 80
    1a22:	73 ec       	ldi	r23, 0xC3	; 195
    1a24:	80 e0       	ldi	r24, 0x00	; 0
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	0e 94 2f 21 	call	0x425e	; 0x425e <Delay>
    1a2c:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <sg_bOvercurrentSignal>
    1a30:	88 23       	and	r24, r24
    1a32:	19 f0       	breq	.+6      	; 0x1a3a <ModuleControllerStateHandle+0x18a>
    1a34:	10 92 17 03 	sts	0x0317, r1	; 0x800317 <sg_bOvercurrentSignal>
    1a38:	01 c0       	rjmp	.+2      	; 0x1a3c <ModuleControllerStateHandle+0x18c>
    1a3a:	c1 2f       	mov	r28, r17
    1a3c:	1f ef       	ldi	r17, 0xFF	; 255
    1a3e:	1c 0f       	add	r17, r28
    1a40:	c1 11       	cpse	r28, r1
    1a42:	d2 cf       	rjmp	.-92     	; 0x19e8 <ModuleControllerStateHandle+0x138>
    1a44:	3c c0       	rjmp	.+120    	; 0x1abe <ModuleControllerStateHandle+0x20e>
    1a46:	61 99       	sbic	0x0c, 1	; 12
    1a48:	0d c0       	rjmp	.+26     	; 0x1a64 <ModuleControllerStateHandle+0x1b4>
    1a4a:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <sg_bModuleRegistered>
    1a4e:	88 23       	and	r24, r24
    1a50:	19 f0       	breq	.+6      	; 0x1a58 <ModuleControllerStateHandle+0x1a8>
    1a52:	8e b1       	in	r24, 0x0e	; 14
    1a54:	82 60       	ori	r24, 0x02	; 2
    1a56:	8e b9       	out	0x0e, r24	; 14
    1a58:	68 e8       	ldi	r22, 0x88	; 136
    1a5a:	73 e1       	ldi	r23, 0x13	; 19
    1a5c:	80 e0       	ldi	r24, 0x00	; 0
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	0e 94 2f 21 	call	0x425e	; 0x425e <Delay>
    1a64:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <sg_bModuleRegistered>
    1a68:	88 23       	and	r24, r24
    1a6a:	49 f0       	breq	.+18     	; 0x1a7e <ModuleControllerStateHandle+0x1ce>
    1a6c:	88 b1       	in	r24, 0x08	; 8
    1a6e:	80 61       	ori	r24, 0x10	; 16
    1a70:	88 b9       	out	0x08, r24	; 8
    1a72:	88 b1       	in	r24, 0x08	; 8
    1a74:	8f 77       	andi	r24, 0x7F	; 127
    1a76:	88 b9       	out	0x08, r24	; 8
    1a78:	88 b1       	in	r24, 0x08	; 8
    1a7a:	80 68       	ori	r24, 0x80	; 128
    1a7c:	88 b9       	out	0x08, r24	; 8
    1a7e:	68 e8       	ldi	r22, 0x88	; 136
    1a80:	73 e1       	ldi	r23, 0x13	; 19
    1a82:	80 e0       	ldi	r24, 0x00	; 0
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	0e 94 2f 21 	call	0x425e	; 0x425e <Delay>
    1a8a:	10 92 1a 03 	sts	0x031A, r1	; 0x80031a <sg_bCellBalanceReady>
    1a8e:	10 92 19 03 	sts	0x0319, r1	; 0x800319 <sg_bCellBalancedOnce>
    1a92:	81 e0       	ldi	r24, 0x01	; 1
    1a94:	80 93 18 03 	sts	0x0318, r24	; 0x800318 <sg_bStopDischarge>
    1a98:	eb e6       	ldi	r30, 0x6B	; 107
    1a9a:	f0 e0       	ldi	r31, 0x00	; 0
    1a9c:	80 81       	ld	r24, Z
    1a9e:	82 60       	ori	r24, 0x02	; 2
    1aa0:	80 83       	st	Z, r24
    1aa2:	e8 e6       	ldi	r30, 0x68	; 104
    1aa4:	f0 e0       	ldi	r31, 0x00	; 0
    1aa6:	80 81       	ld	r24, Z
    1aa8:	82 60       	ori	r24, 0x02	; 2
    1aaa:	80 83       	st	Z, r24
    1aac:	08 c0       	rjmp	.+16     	; 0x1abe <ModuleControllerStateHandle+0x20e>
    1aae:	48 ef       	ldi	r20, 0xF8	; 248
    1ab0:	53 e0       	ldi	r21, 0x03	; 3
    1ab2:	67 e4       	ldi	r22, 0x47	; 71
    1ab4:	72 e0       	ldi	r23, 0x02	; 2
    1ab6:	80 e0       	ldi	r24, 0x00	; 0
    1ab8:	0e 94 e0 23 	call	0x47c0	; 0x47c0 <PlatformAssert>
    1abc:	d5 e0       	ldi	r29, 0x05	; 5
    1abe:	d0 93 07 01 	sts	0x0107, r29	; 0x800107 <sg_eModuleControllerStateCurrent>
    1ac2:	0e 94 ff 26 	call	0x4dfe	; 0x4dfe <SendModuleControllerStatus>
    1ac6:	df 91       	pop	r29
    1ac8:	cf 91       	pop	r28
    1aca:	1f 91       	pop	r17
    1acc:	08 95       	ret

Disassembly of section .text.PlatformGetRegistrationID:

00004eb6 <PlatformGetRegistrationID>:
}

uint8_t PlatformGetRegistrationID( void )
{
	return(sg_u8ModuleRegistrationID);
}
    4eb6:	80 91 27 03 	lds	r24, 0x0327	; 0x800327 <sg_u8ModuleRegistrationID>
    4eba:	08 95       	ret

Disassembly of section .text.SetSysclock:

00004e82 <SetSysclock>:

void SetSysclock( void )
{
	// First set the prescaler enable
	CLKPR = (1 << CLKPCE);
    4e82:	e1 e6       	ldi	r30, 0x61	; 97
    4e84:	f0 e0       	ldi	r31, 0x00	; 0
    4e86:	80 e8       	ldi	r24, 0x80	; 128
    4e88:	80 83       	st	Z, r24
	
	// Now set the desired prescale value
	CLKPR = SYSCLOCK_PRESCALE;
    4e8a:	10 82       	st	Z, r1
    4e8c:	08 95       	ret

Disassembly of section .text.ModuleControllerGetUniqueID:

00003a40 <ModuleControllerGetUniqueID>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    3a40:	cf 92       	push	r12
    3a42:	df 92       	push	r13
    3a44:	ef 92       	push	r14
    3a46:	ff 92       	push	r15
    3a48:	80 e0       	ldi	r24, 0x00	; 0
    3a4a:	90 e0       	ldi	r25, 0x00	; 0
    3a4c:	0e 94 d2 26 	call	0x4da4	; 0x4da4 <EEPROMRead>
    3a50:	c8 2e       	mov	r12, r24
    3a52:	d1 2c       	mov	r13, r1
    3a54:	e1 2c       	mov	r14, r1
    3a56:	f1 2c       	mov	r15, r1
    3a58:	81 e0       	ldi	r24, 0x01	; 1
    3a5a:	90 e0       	ldi	r25, 0x00	; 0
    3a5c:	0e 94 d2 26 	call	0x4da4	; 0x4da4 <EEPROMRead>
    3a60:	90 e0       	ldi	r25, 0x00	; 0
    3a62:	a0 e0       	ldi	r26, 0x00	; 0
    3a64:	b0 e0       	ldi	r27, 0x00	; 0
    3a66:	ba 2f       	mov	r27, r26
    3a68:	a9 2f       	mov	r26, r25
    3a6a:	98 2f       	mov	r25, r24
    3a6c:	88 27       	eor	r24, r24
    3a6e:	c8 2a       	or	r12, r24
    3a70:	d9 2a       	or	r13, r25
    3a72:	ea 2a       	or	r14, r26
    3a74:	fb 2a       	or	r15, r27
    3a76:	82 e0       	ldi	r24, 0x02	; 2
    3a78:	90 e0       	ldi	r25, 0x00	; 0
    3a7a:	0e 94 d2 26 	call	0x4da4	; 0x4da4 <EEPROMRead>
    3a7e:	90 e0       	ldi	r25, 0x00	; 0
    3a80:	a0 e0       	ldi	r26, 0x00	; 0
    3a82:	b0 e0       	ldi	r27, 0x00	; 0
    3a84:	dc 01       	movw	r26, r24
    3a86:	99 27       	eor	r25, r25
    3a88:	88 27       	eor	r24, r24
    3a8a:	c8 2a       	or	r12, r24
    3a8c:	d9 2a       	or	r13, r25
    3a8e:	ea 2a       	or	r14, r26
    3a90:	fb 2a       	or	r15, r27
    3a92:	83 e0       	ldi	r24, 0x03	; 3
    3a94:	90 e0       	ldi	r25, 0x00	; 0
    3a96:	0e 94 d2 26 	call	0x4da4	; 0x4da4 <EEPROMRead>
    3a9a:	90 e0       	ldi	r25, 0x00	; 0
    3a9c:	a0 e0       	ldi	r26, 0x00	; 0
    3a9e:	b0 e0       	ldi	r27, 0x00	; 0
    3aa0:	b8 2f       	mov	r27, r24
    3aa2:	aa 27       	eor	r26, r26
    3aa4:	99 27       	eor	r25, r25
    3aa6:	88 27       	eor	r24, r24
    3aa8:	bc 01       	movw	r22, r24
    3aaa:	cd 01       	movw	r24, r26
    3aac:	6c 29       	or	r22, r12
    3aae:	7d 29       	or	r23, r13
    3ab0:	8e 29       	or	r24, r14
    3ab2:	9f 29       	or	r25, r15
    3ab4:	ff 90       	pop	r15
    3ab6:	ef 90       	pop	r14
    3ab8:	df 90       	pop	r13
    3aba:	cf 90       	pop	r12
    3abc:	08 95       	ret

Disassembly of section .text.TimerInit:

000042b0 <TimerInit>:
    42b0:	14 bc       	out	0x24, r1	; 36
    42b2:	92 e0       	ldi	r25, 0x02	; 2
    42b4:	95 bd       	out	0x25, r25	; 37
    42b6:	a4 e6       	ldi	r26, 0x64	; 100
    42b8:	b0 e0       	ldi	r27, 0x00	; 0
    42ba:	8c 91       	ld	r24, X
    42bc:	87 7f       	andi	r24, 0xF7	; 247
    42be:	8c 93       	st	X, r24
    42c0:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f0080>
    42c4:	84 e0       	ldi	r24, 0x04	; 4
    42c6:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f0081>
    42ca:	96 bb       	out	0x16, r25	; 22
    42cc:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f0084>
    42d0:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f0085>
    42d4:	8b 5c       	subi	r24, 0xCB	; 203
    42d6:	93 4f       	sbci	r25, 0xF3	; 243
    42d8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f0089>
    42dc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f0088>
    42e0:	ef e6       	ldi	r30, 0x6F	; 111
    42e2:	f0 e0       	ldi	r31, 0x00	; 0
    42e4:	80 81       	ld	r24, Z
    42e6:	82 60       	ori	r24, 0x02	; 2
    42e8:	80 83       	st	Z, r24
    42ea:	8c 91       	ld	r24, X
    42ec:	8f 7e       	andi	r24, 0xEF	; 239
    42ee:	8c 93       	st	X, r24
    42f0:	ae e6       	ldi	r26, 0x6E	; 110
    42f2:	b0 e0       	ldi	r27, 0x00	; 0
    42f4:	8c 91       	ld	r24, X
    42f6:	8e 7f       	andi	r24, 0xFE	; 254
    42f8:	8c 93       	st	X, r24
    42fa:	80 81       	ld	r24, Z
    42fc:	8e 7f       	andi	r24, 0xFE	; 254
    42fe:	80 83       	st	Z, r24
    4300:	08 95       	ret

Disassembly of section .text.__vector_12:

00003340 <__vector_12>:
    3340:	78 94       	sei
    3342:	1f 92       	push	r1
    3344:	0f 92       	push	r0
    3346:	0f b6       	in	r0, 0x3f	; 63
    3348:	0f 92       	push	r0
    334a:	11 24       	eor	r1, r1
    334c:	8f 93       	push	r24
    334e:	9f 93       	push	r25
    3350:	ef 93       	push	r30
    3352:	ff 93       	push	r31
    3354:	82 e0       	ldi	r24, 0x02	; 2
    3356:	86 bb       	out	0x16, r24	; 22
    3358:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f0084>
    335c:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f0085>
    3360:	8b 5c       	subi	r24, 0xCB	; 203
    3362:	93 4f       	sbci	r25, 0xF3	; 243
    3364:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f0089>
    3368:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f0088>
    336c:	ef e6       	ldi	r30, 0x6F	; 111
    336e:	f0 e0       	ldi	r31, 0x00	; 0
    3370:	80 81       	ld	r24, Z
    3372:	82 60       	ori	r24, 0x02	; 2
    3374:	80 83       	st	Z, r24
    3376:	81 e0       	ldi	r24, 0x01	; 1
    3378:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <sg_bNewTick>
    337c:	80 91 75 09 	lds	r24, 0x0975	; 0x800975 <sg_u8CellFrameTimer>
    3380:	8f 5f       	subi	r24, 0xFF	; 255
    3382:	80 93 75 09 	sts	0x0975, r24	; 0x800975 <sg_u8CellFrameTimer>
    3386:	80 91 75 09 	lds	r24, 0x0975	; 0x800975 <sg_u8CellFrameTimer>
    338a:	83 30       	cpi	r24, 0x03	; 3
    338c:	78 f0       	brcs	.+30     	; 0x33ac <__vector_12+0x6c>
    338e:	10 92 75 09 	sts	0x0975, r1	; 0x800975 <sg_u8CellFrameTimer>
    3392:	81 e0       	ldi	r24, 0x01	; 1
    3394:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <sg_bFrameStart>
    3398:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <sg_eFrameStatus>
    339c:	81 30       	cpi	r24, 0x01	; 1
    339e:	19 f4       	brne	.+6      	; 0x33a6 <__vector_12+0x66>
    33a0:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <sg_eFrameStatus>
    33a4:	03 c0       	rjmp	.+6      	; 0x33ac <__vector_12+0x6c>
    33a6:	81 e0       	ldi	r24, 0x01	; 1
    33a8:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <sg_eFrameStatus>
    33ac:	80 91 72 09 	lds	r24, 0x0972	; 0x800972 <sg_u8TicksSinceLastPackControllerMessage>
    33b0:	8f 3f       	cpi	r24, 0xFF	; 255
    33b2:	29 f0       	breq	.+10     	; 0x33be <__vector_12+0x7e>
    33b4:	80 91 72 09 	lds	r24, 0x0972	; 0x800972 <sg_u8TicksSinceLastPackControllerMessage>
    33b8:	8f 5f       	subi	r24, 0xFF	; 255
    33ba:	80 93 72 09 	sts	0x0972, r24	; 0x800972 <sg_u8TicksSinceLastPackControllerMessage>
    33be:	80 91 72 09 	lds	r24, 0x0972	; 0x800972 <sg_u8TicksSinceLastPackControllerMessage>
    33c2:	8f 36       	cpi	r24, 0x6F	; 111
    33c4:	40 f0       	brcs	.+16     	; 0x33d6 <__vector_12+0x96>
    33c6:	80 91 72 09 	lds	r24, 0x0972	; 0x800972 <sg_u8TicksSinceLastPackControllerMessage>
    33ca:	8f 56       	subi	r24, 0x6F	; 111
    33cc:	80 93 72 09 	sts	0x0972, r24	; 0x800972 <sg_u8TicksSinceLastPackControllerMessage>
    33d0:	81 e0       	ldi	r24, 0x01	; 1
    33d2:	80 93 1f 03 	sts	0x031F, r24	; 0x80031f <sg_bPackControllerTimeout>
    33d6:	80 91 73 09 	lds	r24, 0x0973	; 0x800973 <sg_u8CellStringPowerTimer>
    33da:	88 23       	and	r24, r24
    33dc:	29 f0       	breq	.+10     	; 0x33e8 <__vector_12+0xa8>
    33de:	80 91 73 09 	lds	r24, 0x0973	; 0x800973 <sg_u8CellStringPowerTimer>
    33e2:	81 50       	subi	r24, 0x01	; 1
    33e4:	80 93 73 09 	sts	0x0973, r24	; 0x800973 <sg_u8CellStringPowerTimer>
    33e8:	ff 91       	pop	r31
    33ea:	ef 91       	pop	r30
    33ec:	9f 91       	pop	r25
    33ee:	8f 91       	pop	r24
    33f0:	0f 90       	pop	r0
    33f2:	0f be       	out	0x3f, r0	; 63
    33f4:	0f 90       	pop	r0
    33f6:	1f 90       	pop	r1
    33f8:	18 95       	reti

Disassembly of section .text.WatchdogReset:

00004ec4 <WatchdogReset>:
		sg_u8CellStringPowerTimer--;
	}
}

void WatchdogReset( void )
{
    4ec4:	08 95       	ret

Disassembly of section .text.WatchdogOff:

00004cc0 <WatchdogOff>:
// }

// Assume interrupts are disabled
void WatchdogOff( void )  // turn it off even when WDT_ENABLE is not defined
{
	wdt_reset();
    4cc0:	a8 95       	wdr
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    4cc2:	0f b6       	in	r0, 0x3f	; 63
    4cc4:	f8 94       	cli
    4cc6:	a8 95       	wdr
    4cc8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f0060>
    4ccc:	88 61       	ori	r24, 0x18	; 24
    4cce:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f0060>
    4cd2:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f0060>
    4cd6:	0f be       	out	0x3f, r0	; 63
    4cd8:	08 95       	ret

Disassembly of section .text.__vector_28:

00004302 <__vector_28>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    4302:	1f 92       	push	r1
    4304:	0f 92       	push	r0
    4306:	0f b6       	in	r0, 0x3f	; 63
    4308:	0f 92       	push	r0
    430a:	11 24       	eor	r1, r1
    430c:	2f 93       	push	r18
    430e:	3f 93       	push	r19
    4310:	4f 93       	push	r20
    4312:	5f 93       	push	r21
    4314:	6f 93       	push	r22
    4316:	7f 93       	push	r23
    4318:	8f 93       	push	r24
    431a:	9f 93       	push	r25
    431c:	af 93       	push	r26
    431e:	bf 93       	push	r27
    4320:	ef 93       	push	r30
    4322:	ff 93       	push	r31
    4324:	44 e0       	ldi	r20, 0x04	; 4
    4326:	53 e0       	ldi	r21, 0x03	; 3
    4328:	67 e4       	ldi	r22, 0x47	; 71
    432a:	72 e0       	ldi	r23, 0x02	; 2
    432c:	80 e0       	ldi	r24, 0x00	; 0
    432e:	0e 94 e0 23 	call	0x47c0	; 0x47c0 <PlatformAssert>
    4332:	ff 91       	pop	r31
    4334:	ef 91       	pop	r30
    4336:	bf 91       	pop	r27
    4338:	af 91       	pop	r26
    433a:	9f 91       	pop	r25
    433c:	8f 91       	pop	r24
    433e:	7f 91       	pop	r23
    4340:	6f 91       	pop	r22
    4342:	5f 91       	pop	r21
    4344:	4f 91       	pop	r20
    4346:	3f 91       	pop	r19
    4348:	2f 91       	pop	r18
    434a:	0f 90       	pop	r0
    434c:	0f be       	out	0x3f, r0	; 63
    434e:	0f 90       	pop	r0
    4350:	1f 90       	pop	r1
    4352:	18 95       	reti

Disassembly of section .text.__vector_23:

00003716 <__vector_23>:
    3716:	78 94       	sei
    3718:	1f 92       	push	r1
    371a:	0f 92       	push	r0
    371c:	0f b6       	in	r0, 0x3f	; 63
    371e:	0f 92       	push	r0
    3720:	11 24       	eor	r1, r1
    3722:	2f 93       	push	r18
    3724:	3f 93       	push	r19
    3726:	4f 93       	push	r20
    3728:	5f 93       	push	r21
    372a:	6f 93       	push	r22
    372c:	7f 93       	push	r23
    372e:	8f 93       	push	r24
    3730:	9f 93       	push	r25
    3732:	af 93       	push	r26
    3734:	bf 93       	push	r27
    3736:	ef 93       	push	r30
    3738:	ff 93       	push	r31
    373a:	96 b1       	in	r25, 0x06	; 6
    373c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    3740:	83 30       	cpi	r24, 0x03	; 3
    3742:	21 f0       	breq	.+8      	; 0x374c <__vector_23+0x36>
    3744:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    3748:	82 30       	cpi	r24, 0x02	; 2
    374a:	c9 f4       	brne	.+50     	; 0x377e <__vector_23+0x68>
    374c:	91 ff       	sbrs	r25, 1
    374e:	17 c0       	rjmp	.+46     	; 0x377e <__vector_23+0x68>
    3750:	88 b1       	in	r24, 0x08	; 8
    3752:	8f 7e       	andi	r24, 0xEF	; 239
    3754:	88 b9       	out	0x08, r24	; 8
    3756:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    375a:	83 30       	cpi	r24, 0x03	; 3
    375c:	19 f4       	brne	.+6      	; 0x3764 <__vector_23+0x4e>
    375e:	81 e0       	ldi	r24, 0x01	; 1
    3760:	0e 94 4c 27 	call	0x4e98	; 0x4e98 <ModuleControllerStateSet>
    3764:	eb e6       	ldi	r30, 0x6B	; 107
    3766:	f0 e0       	ldi	r31, 0x00	; 0
    3768:	80 81       	ld	r24, Z
    376a:	8d 7f       	andi	r24, 0xFD	; 253
    376c:	80 83       	st	Z, r24
    376e:	e8 e6       	ldi	r30, 0x68	; 104
    3770:	f0 e0       	ldi	r31, 0x00	; 0
    3772:	80 81       	ld	r24, Z
    3774:	8d 7f       	andi	r24, 0xFD	; 253
    3776:	80 83       	st	Z, r24
    3778:	81 e0       	ldi	r24, 0x01	; 1
    377a:	80 93 17 03 	sts	0x0317, r24	; 0x800317 <sg_bOvercurrentSignal>
    377e:	ff 91       	pop	r31
    3780:	ef 91       	pop	r30
    3782:	bf 91       	pop	r27
    3784:	af 91       	pop	r26
    3786:	9f 91       	pop	r25
    3788:	8f 91       	pop	r24
    378a:	7f 91       	pop	r23
    378c:	6f 91       	pop	r22
    378e:	5f 91       	pop	r21
    3790:	4f 91       	pop	r20
    3792:	3f 91       	pop	r19
    3794:	2f 91       	pop	r18
    3796:	0f 90       	pop	r0
    3798:	0f be       	out	0x3f, r0	; 63
    379a:	0f 90       	pop	r0
    379c:	1f 90       	pop	r1
    379e:	18 95       	reti

Disassembly of section .text.__vector_24:

00004354 <__vector_24>:
    4354:	78 94       	sei
    4356:	1f 92       	push	r1
    4358:	0f 92       	push	r0
    435a:	0f b6       	in	r0, 0x3f	; 63
    435c:	0f 92       	push	r0
    435e:	11 24       	eor	r1, r1
    4360:	2f 93       	push	r18
    4362:	3f 93       	push	r19
    4364:	4f 93       	push	r20
    4366:	5f 93       	push	r21
    4368:	6f 93       	push	r22
    436a:	7f 93       	push	r23
    436c:	8f 93       	push	r24
    436e:	9f 93       	push	r25
    4370:	af 93       	push	r26
    4372:	bf 93       	push	r27
    4374:	ef 93       	push	r30
    4376:	ff 93       	push	r31
    4378:	8b b1       	in	r24, 0x0b	; 11
    437a:	0e 94 6d 26 	call	0x4cda	; 0x4cda <Check5VLoss>
    437e:	ff 91       	pop	r31
    4380:	ef 91       	pop	r30
    4382:	bf 91       	pop	r27
    4384:	af 91       	pop	r26
    4386:	9f 91       	pop	r25
    4388:	8f 91       	pop	r24
    438a:	7f 91       	pop	r23
    438c:	6f 91       	pop	r22
    438e:	5f 91       	pop	r21
    4390:	4f 91       	pop	r20
    4392:	3f 91       	pop	r19
    4394:	2f 91       	pop	r18
    4396:	0f 90       	pop	r0
    4398:	0f be       	out	0x3f, r0	; 63
    439a:	0f 90       	pop	r0
    439c:	1f 90       	pop	r1
    439e:	18 95       	reti

Disassembly of section .text.vUARTRXStart:

00004d4e <vUARTRXStart>:
}

// Called at the start of cell string data via MC RX
void vUARTRXStart(void)
{
	sg_u8CellBufferRX = 0;
    4d4e:	10 92 70 09 	sts	0x0970, r1	; 0x800970 <sg_u8CellBufferRX>
	sg_u8CellIndex = 0;
    4d52:	10 92 71 09 	sts	0x0971, r1	; 0x800971 <sg_u8CellIndex>
	sg_u16BytesReceived = 0;
    4d56:	10 92 5d 09 	sts	0x095D, r1	; 0x80095d <sg_u16BytesReceived+0x1>
    4d5a:	10 92 5c 09 	sts	0x095C, r1	; 0x80095c <sg_u16BytesReceived>
	sg_u8CellReports = 0;
    4d5e:	10 92 6f 09 	sts	0x096F, r1	; 0x80096f <sg_u8CellReports>
    4d62:	08 95       	ret

Disassembly of section .text.vUARTRXEnd:

00004bde <vUARTRXEnd>:
	// disable the edge interrupt
//	VUART_RX_DISABLE();
	// disable bit timer interrupt, should already be off but just in case
//	TIMER_CHB_INT_DISABLE();
	// update bytes and cells received
	sg_sFrame.sg_u16BytesReceived = sg_u16BytesReceived;
    4bde:	80 91 5c 09 	lds	r24, 0x095C	; 0x80095c <sg_u16BytesReceived>
    4be2:	90 91 5d 09 	lds	r25, 0x095D	; 0x80095d <sg_u16BytesReceived+0x1>
    4be6:	e0 e1       	ldi	r30, 0x10	; 16
    4be8:	f1 e0       	ldi	r31, 0x01	; 1
    4bea:	94 a7       	std	Z+44, r25	; 0x2c
    4bec:	83 a7       	std	Z+43, r24	; 0x2b
	sg_sFrame.sg_u8CellCPUCount = sg_u8CellReports;
    4bee:	80 91 6f 09 	lds	r24, 0x096F	; 0x80096f <sg_u8CellReports>
    4bf2:	85 a7       	std	Z+45, r24	; 0x2d
	sg_u16BytesReceived = 0;
    4bf4:	10 92 5d 09 	sts	0x095D, r1	; 0x80095d <sg_u16BytesReceived+0x1>
    4bf8:	10 92 5c 09 	sts	0x095C, r1	; 0x80095c <sg_u16BytesReceived>
	sg_u8CellReports = 0;
    4bfc:	10 92 6f 09 	sts	0x096F, r1	; 0x80096f <sg_u8CellReports>
    4c00:	08 95       	ret

Disassembly of section .text.vUARTRXData:

00003d28 <vUARTRXData>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    3d28:	e0 91 70 09 	lds	r30, 0x0970	; 0x800970 <sg_u8CellBufferRX>
    3d2c:	21 e0       	ldi	r18, 0x01	; 1
    3d2e:	2e 0f       	add	r18, r30
    3d30:	20 93 70 09 	sts	0x0970, r18	; 0x800970 <sg_u8CellBufferRX>
    3d34:	f0 e0       	ldi	r31, 0x00	; 0
    3d36:	e0 5b       	subi	r30, 0xB0	; 176
    3d38:	f6 4f       	sbci	r31, 0xF6	; 246
    3d3a:	80 83       	st	Z, r24
    3d3c:	80 91 5c 09 	lds	r24, 0x095C	; 0x80095c <sg_u16BytesReceived>
    3d40:	90 91 5d 09 	lds	r25, 0x095D	; 0x80095d <sg_u16BytesReceived+0x1>
    3d44:	01 96       	adiw	r24, 0x01	; 1
    3d46:	90 93 5d 09 	sts	0x095D, r25	; 0x80095d <sg_u16BytesReceived+0x1>
    3d4a:	80 93 5c 09 	sts	0x095C, r24	; 0x80095c <sg_u16BytesReceived>
    3d4e:	24 30       	cpi	r18, 0x04	; 4
    3d50:	38 f1       	brcs	.+78     	; 0x3da0 <vUARTRXData+0x78>
    3d52:	10 92 70 09 	sts	0x0970, r1	; 0x800970 <sg_u8CellBufferRX>
    3d56:	80 91 71 09 	lds	r24, 0x0971	; 0x800971 <sg_u8CellIndex>
    3d5a:	8c 36       	cpi	r24, 0x6C	; 108
    3d5c:	08 f5       	brcc	.+66     	; 0x3da0 <vUARTRXData+0x78>
    3d5e:	e8 2f       	mov	r30, r24
    3d60:	f0 e0       	ldi	r31, 0x00	; 0
    3d62:	75 96       	adiw	r30, 0x15	; 21
    3d64:	ee 0f       	add	r30, r30
    3d66:	ff 1f       	adc	r31, r31
    3d68:	ee 0f       	add	r30, r30
    3d6a:	ff 1f       	adc	r31, r31
    3d6c:	e0 5f       	subi	r30, 0xF0	; 240
    3d6e:	fe 4f       	sbci	r31, 0xFE	; 254
    3d70:	a0 e5       	ldi	r26, 0x50	; 80
    3d72:	b9 e0       	ldi	r27, 0x09	; 9
    3d74:	4d 91       	ld	r20, X+
    3d76:	5d 91       	ld	r21, X+
    3d78:	6d 91       	ld	r22, X+
    3d7a:	7c 91       	ld	r23, X
    3d7c:	13 97       	sbiw	r26, 0x03	; 3
    3d7e:	40 83       	st	Z, r20
    3d80:	51 83       	std	Z+1, r21	; 0x01
    3d82:	62 83       	std	Z+2, r22	; 0x02
    3d84:	73 83       	std	Z+3, r23	; 0x03
    3d86:	1d 92       	st	X+, r1
    3d88:	1d 92       	st	X+, r1
    3d8a:	1d 92       	st	X+, r1
    3d8c:	1c 92       	st	X, r1
    3d8e:	13 97       	sbiw	r26, 0x03	; 3
    3d90:	8f 5f       	subi	r24, 0xFF	; 255
    3d92:	80 93 71 09 	sts	0x0971, r24	; 0x800971 <sg_u8CellIndex>
    3d96:	80 91 6f 09 	lds	r24, 0x096F	; 0x80096f <sg_u8CellReports>
    3d9a:	8f 5f       	subi	r24, 0xFF	; 255
    3d9c:	80 93 6f 09 	sts	0x096F, r24	; 0x80096f <sg_u8CellReports>
    3da0:	08 95       	ret

Disassembly of section .text.PlatformGetSendData:

0000486a <PlatformGetSendData>:
uint16_t PlatformGetSendData( bool bUpdateBalanceStatus )
{
	uint16_t u16SendValue = 0;
	
	
	if( sg_bStopDischarge )
    486a:	90 91 18 03 	lds	r25, 0x0318	; 0x800318 <sg_bStopDischarge>
    486e:	99 23       	and	r25, r25
    4870:	51 f0       	breq	.+20     	; 0x4886 <PlatformGetSendData+0x1c>
	{
		if (bUpdateBalanceStatus)	// don't update if ony an availability check
    4872:	88 23       	and	r24, r24
    4874:	59 f0       	breq	.+22     	; 0x488c <PlatformGetSendData+0x22>
		{
			sg_bStopDischarge = false;
    4876:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <sg_bStopDischarge>
			sg_bCellBalancedOnce = true;
    487a:	81 e0       	ldi	r24, 0x01	; 1
    487c:	80 93 19 03 	sts	0x0319, r24	; 0x800319 <sg_bCellBalancedOnce>
		}
		u16SendValue = 0x3ff;
    4880:	8f ef       	ldi	r24, 0xFF	; 255
    4882:	93 e0       	ldi	r25, 0x03	; 3
    4884:	08 95       	ret
			}
		}
		else
#endif
		{
			u16SendValue |= MSG_CELL_SEND_REPORT;
    4886:	80 e0       	ldi	r24, 0x00	; 0
    4888:	90 e8       	ldi	r25, 0x80	; 128
    488a:	08 95       	ret
		if (bUpdateBalanceStatus)	// don't update if ony an availability check
		{
			sg_bStopDischarge = false;
			sg_bCellBalancedOnce = true;
		}
		u16SendValue = 0x3ff;
    488c:	8f ef       	ldi	r24, 0xFF	; 255
    488e:	93 e0       	ldi	r25, 0x03	; 3
#endif
		}
	}
	
	return( u16SendValue );
}
    4890:	08 95       	ret

Disassembly of section .text.ADCCallback:

00004930 <ADCCallback>:
// Called every time there's an ADC read since apparently ISR can't access global variables?  compiler fails
void ADCCallback(EADCType eType,
				 uint16_t u16Reading)
{
	// End of chain? Indicate it's time for an ADC update
	if ((EADCTYPE_COUNT-1) == eType)
    4930:	84 30       	cpi	r24, 0x04	; 4
    4932:	19 f4       	brne	.+6      	; 0x493a <ADCCallback+0xa>
	{
		sg_bADCUpdate = true;
    4934:	91 e0       	ldi	r25, 0x01	; 1
    4936:	90 93 16 03 	sts	0x0316, r25	; 0x800316 <sg_bADCUpdate>
	}
	sg_sFrame.ADCReadings[eType].u16Reading = u16Reading;
    493a:	90 e0       	ldi	r25, 0x00	; 0
    493c:	fc 01       	movw	r30, r24
    493e:	ee 0f       	add	r30, r30
    4940:	ff 1f       	adc	r31, r31
    4942:	8e 0f       	add	r24, r30
    4944:	9f 1f       	adc	r25, r31
    4946:	fc 01       	movw	r30, r24
    4948:	eb 5a       	subi	r30, 0xAB	; 171
    494a:	fe 4f       	sbci	r31, 0xFE	; 254
    494c:	72 83       	std	Z+2, r23	; 0x02
    494e:	61 83       	std	Z+1, r22	; 0x01
	sg_sFrame.ADCReadings[eType].bValid = true;
    4950:	81 e0       	ldi	r24, 0x01	; 1
    4952:	80 83       	st	Z, r24
    4954:	08 95       	ret

Disassembly of section .text.FrameInit:

00002dda <FrameInit>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    2dda:	cf 93       	push	r28
    2ddc:	df 93       	push	r29
    2dde:	81 11       	cpse	r24, r1
    2de0:	0d c0       	rjmp	.+26     	; 0x2dfc <FrameInit+0x22>
    2de2:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <sg_sFrame>
    2de6:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <sg_sFrame+0x1>
    2dea:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <sg_sFrame+0x2>
    2dee:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <sg_sFrame+0x3>
    2df2:	8a 37       	cpi	r24, 0x7A	; 122
    2df4:	9a 4d       	sbci	r25, 0xDA	; 218
    2df6:	a7 47       	sbci	r26, 0x77	; 119
    2df8:	ba 4b       	sbci	r27, 0xBA	; 186
    2dfa:	29 f1       	breq	.+74     	; 0x2e46 <FrameInit+0x6c>
    2dfc:	c0 e1       	ldi	r28, 0x10	; 16
    2dfe:	d1 e0       	ldi	r29, 0x01	; 1
    2e00:	84 e0       	ldi	r24, 0x04	; 4
    2e02:	92 e0       	ldi	r25, 0x02	; 2
    2e04:	fe 01       	movw	r30, r28
    2e06:	9c 01       	movw	r18, r24
    2e08:	11 92       	st	Z+, r1
    2e0a:	21 50       	subi	r18, 0x01	; 1
    2e0c:	30 40       	sbci	r19, 0x00	; 0
    2e0e:	e1 f7       	brne	.-8      	; 0x2e08 <FrameInit+0x2e>
    2e10:	9d 83       	std	Y+5, r25	; 0x05
    2e12:	8c 83       	std	Y+4, r24	; 0x04
    2e14:	8a e7       	ldi	r24, 0x7A	; 122
    2e16:	9a ed       	ldi	r25, 0xDA	; 218
    2e18:	a7 e7       	ldi	r26, 0x77	; 119
    2e1a:	ba eb       	ldi	r27, 0xBA	; 186
    2e1c:	88 83       	st	Y, r24
    2e1e:	99 83       	std	Y+1, r25	; 0x01
    2e20:	aa 83       	std	Y+2, r26	; 0x02
    2e22:	bb 83       	std	Y+3, r27	; 0x03
    2e24:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <ModuleControllerGetUniqueID>
    2e28:	6e 87       	std	Y+14, r22	; 0x0e
    2e2a:	7f 87       	std	Y+15, r23	; 0x0f
    2e2c:	88 8b       	std	Y+16, r24	; 0x10
    2e2e:	99 8b       	std	Y+17, r25	; 0x11
    2e30:	8f ef       	ldi	r24, 0xFF	; 255
    2e32:	8a a7       	std	Y+42, r24	; 0x2a
    2e34:	8b 8b       	std	Y+19, r24	; 0x13
    2e36:	1c 8a       	std	Y+20, r1	; 0x14
    2e38:	84 e0       	ldi	r24, 0x04	; 4
    2e3a:	90 e0       	ldi	r25, 0x00	; 0
    2e3c:	0e 94 d2 26 	call	0x4da4	; 0x4da4 <EEPROMRead>
    2e40:	0e 94 7f 18 	call	0x30fe	; 0x30fe <CellCountExpectedSet>
    2e44:	2a c0       	rjmp	.+84     	; 0x2e9a <FrameInit+0xc0>
    2e46:	e0 e1       	ldi	r30, 0x10	; 16
    2e48:	f1 e0       	ldi	r31, 0x01	; 1
    2e4a:	17 a2       	std	Z+39, r1	; 0x27
    2e4c:	11 a6       	std	Z+41, r1	; 0x29
    2e4e:	10 a6       	std	Z+40, r1	; 0x28
    2e50:	12 a6       	std	Z+42, r1	; 0x2a
    2e52:	15 a6       	std	Z+45, r1	; 0x2d
    2e54:	16 a6       	std	Z+46, r1	; 0x2e
    2e56:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <sg_sFrame+0x3d>
    2e5a:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <sg_sFrame+0x3e>
    2e5e:	a0 91 4f 01 	lds	r26, 0x014F	; 0x80014f <sg_sFrame+0x3f>
    2e62:	b0 91 50 01 	lds	r27, 0x0150	; 0x800150 <sg_sFrame+0x40>
    2e66:	89 2b       	or	r24, r25
    2e68:	8a 2b       	or	r24, r26
    2e6a:	8b 2b       	or	r24, r27
    2e6c:	b1 f4       	brne	.+44     	; 0x2e9a <FrameInit+0xc0>
    2e6e:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <sg_sFrame+0x3d>
    2e72:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <sg_sFrame+0x3e>
    2e76:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <sg_sFrame+0x3f>
    2e7a:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <sg_sFrame+0x40>
    2e7e:	10 ae       	std	Z+56, r1	; 0x38
    2e80:	17 aa       	std	Z+55, r1	; 0x37
    2e82:	12 ae       	std	Z+58, r1	; 0x3a
    2e84:	11 ae       	std	Z+57, r1	; 0x39
    2e86:	14 ae       	std	Z+60, r1	; 0x3c
    2e88:	13 ae       	std	Z+59, r1	; 0x3b
    2e8a:	8f e9       	ldi	r24, 0x9F	; 159
    2e8c:	95 e1       	ldi	r25, 0x15	; 21
    2e8e:	92 ab       	std	Z+50, r25	; 0x32
    2e90:	81 ab       	std	Z+49, r24	; 0x31
    2e92:	94 ab       	std	Z+52, r25	; 0x34
    2e94:	83 ab       	std	Z+51, r24	; 0x33
    2e96:	96 ab       	std	Z+54, r25	; 0x36
    2e98:	85 ab       	std	Z+53, r24	; 0x35
    2e9a:	8f ef       	ldi	r24, 0xFF	; 255
    2e9c:	80 93 79 09 	sts	0x0979, r24	; 0x800979 <sg_u8CurrentBufferIndex>
    2ea0:	df 91       	pop	r29
    2ea2:	cf 91       	pop	r28
    2ea4:	08 95       	ret

Disassembly of section .text.CellStringPowerStateMachine:

0000382a <CellStringPowerStateMachine>:
    382a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <sg_eStringPowerState>
    382e:	82 30       	cpi	r24, 0x02	; 2
    3830:	49 f1       	breq	.+82     	; 0x3884 <CellStringPowerStateMachine+0x5a>
    3832:	28 f4       	brcc	.+10     	; 0x383e <CellStringPowerStateMachine+0x14>
    3834:	88 23       	and	r24, r24
    3836:	41 f0       	breq	.+16     	; 0x3848 <CellStringPowerStateMachine+0x1e>
    3838:	81 30       	cpi	r24, 0x01	; 1
    383a:	91 f0       	breq	.+36     	; 0x3860 <CellStringPowerStateMachine+0x36>
    383c:	32 c0       	rjmp	.+100    	; 0x38a2 <CellStringPowerStateMachine+0x78>
    383e:	83 30       	cpi	r24, 0x03	; 3
    3840:	61 f1       	breq	.+88     	; 0x389a <CellStringPowerStateMachine+0x70>
    3842:	84 30       	cpi	r24, 0x04	; 4
    3844:	a9 f1       	breq	.+106    	; 0x38b0 <CellStringPowerStateMachine+0x86>
    3846:	2d c0       	rjmp	.+90     	; 0x38a2 <CellStringPowerStateMachine+0x78>
    3848:	85 b1       	in	r24, 0x05	; 5
    384a:	8f 7e       	andi	r24, 0xEF	; 239
    384c:	85 b9       	out	0x05, r24	; 5
    384e:	81 e0       	ldi	r24, 0x01	; 1
    3850:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <sg_eStringPowerState>
    3854:	80 e0       	ldi	r24, 0x00	; 0
    3856:	0e 94 ed 16 	call	0x2dda	; 0x2dda <FrameInit>
    385a:	0e 94 ff 26 	call	0x4dfe	; 0x4dfe <SendModuleControllerStatus>
    385e:	08 95       	ret
    3860:	85 b1       	in	r24, 0x05	; 5
    3862:	8f 7e       	andi	r24, 0xEF	; 239
    3864:	85 b9       	out	0x05, r24	; 5
    3866:	80 e0       	ldi	r24, 0x00	; 0
    3868:	0e 94 ed 16 	call	0x2dda	; 0x2dda <FrameInit>
    386c:	82 e0       	ldi	r24, 0x02	; 2
    386e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <sg_eStringPowerState>
    3872:	81 e0       	ldi	r24, 0x01	; 1
    3874:	80 93 73 09 	sts	0x0973, r24	; 0x800973 <sg_u8CellStringPowerTimer>
    3878:	e0 e1       	ldi	r30, 0x10	; 16
    387a:	f1 e0       	ldi	r31, 0x01	; 1
    387c:	8f ef       	ldi	r24, 0xFF	; 255
    387e:	83 8b       	std	Z+19, r24	; 0x13
    3880:	14 8a       	std	Z+20, r1	; 0x14
    3882:	08 95       	ret
    3884:	80 91 73 09 	lds	r24, 0x0973	; 0x800973 <sg_u8CellStringPowerTimer>
    3888:	81 11       	cpse	r24, r1
    388a:	12 c0       	rjmp	.+36     	; 0x38b0 <CellStringPowerStateMachine+0x86>
    388c:	85 b1       	in	r24, 0x05	; 5
    388e:	80 61       	ori	r24, 0x10	; 16
    3890:	85 b9       	out	0x05, r24	; 5
    3892:	83 e0       	ldi	r24, 0x03	; 3
    3894:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <sg_eStringPowerState>
    3898:	08 95       	ret
    389a:	84 e0       	ldi	r24, 0x04	; 4
    389c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <sg_eStringPowerState>
    38a0:	08 95       	ret
    38a2:	4b e6       	ldi	r20, 0x6B	; 107
    38a4:	52 e0       	ldi	r21, 0x02	; 2
    38a6:	67 e4       	ldi	r22, 0x47	; 71
    38a8:	72 e0       	ldi	r23, 0x02	; 2
    38aa:	80 e0       	ldi	r24, 0x00	; 0
    38ac:	0e 94 e0 23 	call	0x47c0	; 0x47c0 <PlatformAssert>
    38b0:	08 95       	ret

Disassembly of section .text.main:

00000c34 <main>:
 c34:	cf 93       	push	r28
 c36:	df 93       	push	r29
 c38:	cd b7       	in	r28, 0x3d	; 61
 c3a:	de b7       	in	r29, 0x3e	; 62
 c3c:	28 97       	sbiw	r28, 0x08	; 8
 c3e:	0f b6       	in	r0, 0x3f	; 63
 c40:	f8 94       	cli
 c42:	de bf       	out	0x3e, r29	; 62
 c44:	0f be       	out	0x3f, r0	; 63
 c46:	cd bf       	out	0x3d, r28	; 61
 c48:	0e 94 60 26 	call	0x4cc0	; 0x4cc0 <WatchdogOff>
 c4c:	88 b1       	in	r24, 0x08	; 8
 c4e:	8f 7e       	andi	r24, 0xEF	; 239
 c50:	88 b9       	out	0x08, r24	; 8
 c52:	87 b1       	in	r24, 0x07	; 7
 c54:	80 61       	ori	r24, 0x10	; 16
 c56:	87 b9       	out	0x07, r24	; 7
 c58:	87 b1       	in	r24, 0x07	; 7
 c5a:	8d 7f       	andi	r24, 0xFD	; 253
 c5c:	87 b9       	out	0x07, r24	; 7
 c5e:	87 b1       	in	r24, 0x07	; 7
 c60:	80 68       	ori	r24, 0x80	; 128
 c62:	87 b9       	out	0x07, r24	; 7
 c64:	88 b1       	in	r24, 0x08	; 8
 c66:	8f 7e       	andi	r24, 0xEF	; 239
 c68:	88 b9       	out	0x08, r24	; 8
 c6a:	8d b1       	in	r24, 0x0d	; 13
 c6c:	82 60       	ori	r24, 0x02	; 2
 c6e:	8d b9       	out	0x0d, r24	; 13
 c70:	8e b1       	in	r24, 0x0e	; 14
 c72:	8d 7f       	andi	r24, 0xFD	; 253
 c74:	8e b9       	out	0x0e, r24	; 14
 c76:	84 b1       	in	r24, 0x04	; 4
 c78:	80 61       	ori	r24, 0x10	; 16
 c7a:	84 b9       	out	0x04, r24	; 4
 c7c:	85 b1       	in	r24, 0x05	; 5
 c7e:	8f 7e       	andi	r24, 0xEF	; 239
 c80:	85 b9       	out	0x05, r24	; 5
 c82:	e0 e0       	ldi	r30, 0x00	; 0
 c84:	f8 e0       	ldi	r31, 0x08	; 8
 c86:	02 c0       	rjmp	.+4      	; 0xc8c <main+0x58>
 c88:	8a ea       	ldi	r24, 0xAA	; 170
 c8a:	81 93       	st	Z+, r24
 c8c:	e1 15       	cp	r30, r1
 c8e:	80 e1       	ldi	r24, 0x10	; 16
 c90:	f8 07       	cpc	r31, r24
 c92:	d0 f3       	brcs	.-12     	; 0xc88 <main+0x54>
 c94:	84 b7       	in	r24, 0x34	; 52
 c96:	80 93 6d 09 	sts	0x096D, r24	; 0x80096d <sg_u8Reason>
 c9a:	80 91 6d 09 	lds	r24, 0x096D	; 0x80096d <sg_u8Reason>
 c9e:	83 ff       	sbrs	r24, 3
 ca0:	0a c0       	rjmp	.+20     	; 0xcb6 <main+0x82>
 ca2:	80 91 28 03 	lds	r24, 0x0328	; 0x800328 <sg_eWDTCurrentStatus>
 ca6:	e0 e1       	ldi	r30, 0x10	; 16
 ca8:	f1 e0       	ldi	r31, 0x01	; 1
 caa:	82 89       	ldd	r24, Z+18	; 0x12
 cac:	8f 5f       	subi	r24, 0xFF	; 255
 cae:	82 8b       	std	Z+18, r24	; 0x12
 cb0:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <ModuleControllerStateHandle>
 cb4:	50 c0       	rjmp	.+160    	; 0xd56 <main+0x122>
 cb6:	80 91 6d 09 	lds	r24, 0x096D	; 0x80096d <sg_u8Reason>
 cba:	80 91 6d 09 	lds	r24, 0x096D	; 0x80096d <sg_u8Reason>
 cbe:	80 91 6d 09 	lds	r24, 0x096D	; 0x80096d <sg_u8Reason>
 cc2:	f8 94       	cli
 cc4:	0e 94 41 27 	call	0x4e82	; 0x4e82 <SetSysclock>
 cc8:	0e 94 58 21 	call	0x42b0	; 0x42b0 <TimerInit>
 ccc:	0e 94 ce 22 	call	0x459c	; 0x459c <vUARTInit>
 cd0:	0e 94 87 11 	call	0x230e	; 0x230e <ADCInit>
 cd4:	0e 94 df 1c 	call	0x39be	; 0x39be <STORE_Init>
 cd8:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <sg_bSDCardReady>
 cdc:	81 e0       	ldi	r24, 0x01	; 1
 cde:	0e 94 ed 16 	call	0x2dda	; 0x2dda <FrameInit>
 ce2:	89 e0       	ldi	r24, 0x09	; 9
 ce4:	90 e0       	ldi	r25, 0x00	; 0
 ce6:	0e 94 d2 26 	call	0x4da4	; 0x4da4 <EEPROMRead>
 cea:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <sg_u8SequentailCountMismatchThreshold>
 cee:	8a b1       	in	r24, 0x0a	; 10
 cf0:	8f 7b       	andi	r24, 0xBF	; 191
 cf2:	8a b9       	out	0x0a, r24	; 10
 cf4:	8b b1       	in	r24, 0x0b	; 11
 cf6:	80 64       	ori	r24, 0x40	; 64
 cf8:	8b b9       	out	0x0b, r24	; 11
 cfa:	11 e0       	ldi	r17, 0x01	; 1
 cfc:	1b bb       	out	0x1b, r17	; 27
 cfe:	82 e0       	ldi	r24, 0x02	; 2
 d00:	8b bb       	out	0x1b, r24	; 27
 d02:	84 e0       	ldi	r24, 0x04	; 4
 d04:	8b bb       	out	0x1b, r24	; 27
 d06:	88 e0       	ldi	r24, 0x08	; 8
 d08:	8b bb       	out	0x1b, r24	; 27
 d0a:	ec e6       	ldi	r30, 0x6C	; 108
 d0c:	f0 e0       	ldi	r31, 0x00	; 0
 d0e:	80 81       	ld	r24, Z
 d10:	80 64       	ori	r24, 0x40	; 64
 d12:	80 83       	st	Z, r24
 d14:	8b b3       	in	r24, 0x1b	; 27
 d16:	84 60       	ori	r24, 0x04	; 4
 d18:	8b bb       	out	0x1b, r24	; 27
 d1a:	80 ed       	ldi	r24, 0xD0	; 208
 d1c:	98 e0       	ldi	r25, 0x08	; 8
 d1e:	0e 94 47 27 	call	0x4e8e	; 0x4e8e <CANSetRXCallback>
 d22:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <CANInit>
 d26:	10 92 27 03 	sts	0x0327, r1	; 0x800327 <sg_u8ModuleRegistrationID>
 d2a:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <sg_bModuleRegistered>
 d2e:	10 92 76 09 	sts	0x0976, r1	; 0x800976 <sg_bIgnoreStatusRequests>
 d32:	80 e0       	ldi	r24, 0x00	; 0
 d34:	0e 94 4c 27 	call	0x4e98	; 0x4e98 <ModuleControllerStateSet>
 d38:	0e 94 47 0b 	call	0x168e	; 0x168e <RTCInit>
 d3c:	85 e0       	ldi	r24, 0x05	; 5
 d3e:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <sg_eModuleControllerStateCurrent>
 d42:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <sg_eModuleControllerStateTarget>
 d46:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <sg_eModuleControllerStateMax>
 d4a:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <sg_bModuleRegistered>
 d4e:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <sg_eStringPowerState>
 d52:	10 93 0c 01 	sts	0x010C, r17	; 0x80010c <sg_eFrameStatus>
 d56:	78 94       	sei
 d58:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <sg_bNewTick>
 d5c:	88 23       	and	r24, r24
 d5e:	e1 f3       	breq	.-8      	; 0xd58 <main+0x124>
 d60:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <sg_bNewTick>
 d64:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <sg_bModuleRegistered>
 d68:	81 11       	cpse	r24, r1
 d6a:	22 c0       	rjmp	.+68     	; 0xdb0 <main+0x17c>
 d6c:	80 91 78 09 	lds	r24, 0x0978	; 0x800978 <sg_bAnnouncementPending>
 d70:	88 23       	and	r24, r24
 d72:	11 f1       	breq	.+68     	; 0xdb8 <main+0x184>
 d74:	80 91 77 09 	lds	r24, 0x0977	; 0x800977 <sg_u8AnnouncementDelayTicks>
 d78:	88 23       	and	r24, r24
 d7a:	29 f0       	breq	.+10     	; 0xd86 <main+0x152>
 d7c:	80 91 77 09 	lds	r24, 0x0977	; 0x800977 <sg_u8AnnouncementDelayTicks>
 d80:	81 50       	subi	r24, 0x01	; 1
 d82:	80 93 77 09 	sts	0x0977, r24	; 0x800977 <sg_u8AnnouncementDelayTicks>
 d86:	80 91 77 09 	lds	r24, 0x0977	; 0x800977 <sg_u8AnnouncementDelayTicks>
 d8a:	81 11       	cpse	r24, r1
 d8c:	15 c0       	rjmp	.+42     	; 0xdb8 <main+0x184>
 d8e:	81 e0       	ldi	r24, 0x01	; 1
 d90:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <sg_bSendAnnouncement>
 d94:	10 92 78 09 	sts	0x0978, r1	; 0x800978 <sg_bAnnouncementPending>
 d98:	83 e5       	ldi	r24, 0x53	; 83
 d9a:	92 e0       	ldi	r25, 0x02	; 2
 d9c:	a0 e0       	ldi	r26, 0x00	; 0
 d9e:	af 93       	push	r26
 da0:	9f 93       	push	r25
 da2:	8f 93       	push	r24
 da4:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <DebugOut>
 da8:	0f 90       	pop	r0
 daa:	0f 90       	pop	r0
 dac:	0f 90       	pop	r0
 dae:	04 c0       	rjmp	.+8      	; 0xdb8 <main+0x184>
 db0:	ce 01       	movw	r24, r28
 db2:	01 96       	adiw	r24, 0x01	; 1
 db4:	0e 94 08 04 	call	0x810	; 0x810 <ControllerStatusMessagesSend>
 db8:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <sg_bPackControllerTimeout>
 dbc:	88 23       	and	r24, r24
 dbe:	81 f0       	breq	.+32     	; 0xde0 <main+0x1ac>
 dc0:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <sg_bPackControllerTimeout>
 dc4:	10 92 27 03 	sts	0x0327, r1	; 0x800327 <sg_u8ModuleRegistrationID>
 dc8:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <sg_bModuleRegistered>
 dcc:	10 92 76 09 	sts	0x0976, r1	; 0x800976 <sg_bIgnoreStatusRequests>
 dd0:	81 e0       	ldi	r24, 0x01	; 1
 dd2:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <sg_bSendAnnouncement>
 dd6:	0e 94 ff 26 	call	0x4dfe	; 0x4dfe <SendModuleControllerStatus>
 dda:	80 e0       	ldi	r24, 0x00	; 0
 ddc:	0e 94 4c 27 	call	0x4e98	; 0x4e98 <ModuleControllerStateSet>
 de0:	ef e6       	ldi	r30, 0x6F	; 111
 de2:	f0 e0       	ldi	r31, 0x00	; 0
 de4:	90 81       	ld	r25, Z
 de6:	80 81       	ld	r24, Z
 de8:	8d 7f       	andi	r24, 0xFD	; 253
 dea:	80 83       	st	Z, r24
 dec:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <sg_eFrameStatus>
 df0:	20 91 74 09 	lds	r18, 0x0974	; 0x800974 <sg_bFrameStart>
 df4:	90 83       	st	Z, r25
 df6:	81 30       	cpi	r24, 0x01	; 1
 df8:	09 f0       	breq	.+2      	; 0xdfc <main+0x1c8>
 dfa:	61 c0       	rjmp	.+194    	; 0xebe <main+0x28a>
 dfc:	22 23       	and	r18, r18
 dfe:	09 f4       	brne	.+2      	; 0xe02 <main+0x1ce>
 e00:	55 c0       	rjmp	.+170    	; 0xeac <main+0x278>
 e02:	10 92 74 09 	sts	0x0974, r1	; 0x800974 <sg_bFrameStart>
 e06:	0e 94 15 1c 	call	0x382a	; 0x382a <CellStringPowerStateMachine>
 e0a:	0e 94 ef 25 	call	0x4bde	; 0x4bde <vUARTRXEnd>
 e0e:	ce 01       	movw	r24, r28
 e10:	01 96       	adiw	r24, 0x01	; 1
 e12:	0e 94 7d 07 	call	0xefa	; 0xefa <CellStringProcess>
 e16:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <sg_eStringPowerState>
 e1a:	84 30       	cpi	r24, 0x04	; 4
 e1c:	29 f5       	brne	.+74     	; 0xe68 <main+0x234>
 e1e:	e0 e1       	ldi	r30, 0x10	; 16
 e20:	f1 e0       	ldi	r31, 0x01	; 1
 e22:	95 a5       	ldd	r25, Z+45	; 0x2d
 e24:	85 89       	ldd	r24, Z+21	; 0x15
 e26:	98 17       	cp	r25, r24
 e28:	e9 f0       	breq	.+58     	; 0xe64 <main+0x230>
 e2a:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <sg_sFrame+0x15>
 e2e:	88 23       	and	r24, r24
 e30:	c9 f0       	breq	.+50     	; 0xe64 <main+0x230>
 e32:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <sg_u8SequentailCountMismatchThreshold>
 e36:	88 23       	and	r24, r24
 e38:	b9 f0       	breq	.+46     	; 0xe68 <main+0x234>
 e3a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <sg_u8SequentailCountMismatchThreshold>
 e3e:	8f 3f       	cpi	r24, 0xFF	; 255
 e40:	99 f0       	breq	.+38     	; 0xe68 <main+0x234>
 e42:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <sg_u8SequentailCellCountMismatches>
 e46:	8f 5f       	subi	r24, 0xFF	; 255
 e48:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <sg_u8SequentailCellCountMismatches>
 e4c:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <sg_u8SequentailCellCountMismatches>
 e50:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <sg_u8SequentailCountMismatchThreshold>
 e54:	98 17       	cp	r25, r24
 e56:	40 f0       	brcs	.+16     	; 0xe68 <main+0x234>
 e58:	81 e0       	ldi	r24, 0x01	; 1
 e5a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <sg_eStringPowerState>
 e5e:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <sg_u8SequentailCellCountMismatches>
 e62:	02 c0       	rjmp	.+4      	; 0xe68 <main+0x234>
 e64:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <sg_u8SequentailCellCountMismatches>
 e68:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <sg_bSendAnnouncement>
 e6c:	88 23       	and	r24, r24
 e6e:	f1 f0       	breq	.+60     	; 0xeac <main+0x278>
 e70:	86 e5       	ldi	r24, 0x56	; 86
 e72:	89 83       	std	Y+1, r24	; 0x01
 e74:	80 e2       	ldi	r24, 0x20	; 32
 e76:	8a 83       	std	Y+2, r24	; 0x02
 e78:	82 e0       	ldi	r24, 0x02	; 2
 e7a:	8b 83       	std	Y+3, r24	; 0x03
 e7c:	83 e0       	ldi	r24, 0x03	; 3
 e7e:	8c 83       	std	Y+4, r24	; 0x04
 e80:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <sg_sFrame+0xe>
 e84:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <sg_sFrame+0xf>
 e88:	a0 91 20 01 	lds	r26, 0x0120	; 0x800120 <sg_sFrame+0x10>
 e8c:	b0 91 21 01 	lds	r27, 0x0121	; 0x800121 <sg_sFrame+0x11>
 e90:	8d 83       	std	Y+5, r24	; 0x05
 e92:	9e 83       	std	Y+6, r25	; 0x06
 e94:	af 83       	std	Y+7, r26	; 0x07
 e96:	b8 87       	std	Y+8, r27	; 0x08
 e98:	48 e0       	ldi	r20, 0x08	; 8
 e9a:	be 01       	movw	r22, r28
 e9c:	6f 5f       	subi	r22, 0xFF	; 255
 e9e:	7f 4f       	sbci	r23, 0xFF	; 255
 ea0:	80 e0       	ldi	r24, 0x00	; 0
 ea2:	0e 94 91 26 	call	0x4d22	; 0x4d22 <CANSendMessage>
 ea6:	81 11       	cpse	r24, r1
 ea8:	10 92 22 03 	sts	0x0322, r1	; 0x800322 <sg_bSendAnnouncement>
 eac:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <ModuleControllerStateHandle>
 eb0:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <sg_bOvercurrentSignal>
 eb4:	88 23       	and	r24, r24
 eb6:	b1 f0       	breq	.+44     	; 0xee4 <main+0x2b0>
 eb8:	10 92 17 03 	sts	0x0317, r1	; 0x800317 <sg_bOvercurrentSignal>
 ebc:	13 c0       	rjmp	.+38     	; 0xee4 <main+0x2b0>
 ebe:	22 23       	and	r18, r18
 ec0:	89 f0       	breq	.+34     	; 0xee4 <main+0x2b0>
 ec2:	10 92 74 09 	sts	0x0974, r1	; 0x800974 <sg_bFrameStart>
 ec6:	0e 94 15 1c 	call	0x382a	; 0x382a <CellStringPowerStateMachine>
 eca:	80 e0       	ldi	r24, 0x00	; 0
 ecc:	0e 94 ed 16 	call	0x2dda	; 0x2dda <FrameInit>
 ed0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <sg_eStringPowerState>
 ed4:	84 30       	cpi	r24, 0x04	; 4
 ed6:	31 f4       	brne	.+12     	; 0xee4 <main+0x2b0>
 ed8:	0e 94 49 24 	call	0x4892	; 0x4892 <vUARTInitReceive>
 edc:	0e 94 51 27 	call	0x4ea2	; 0x4ea2 <vUARTRXReset>
 ee0:	0e 94 85 20 	call	0x410a	; 0x410a <vUARTStarttx>
 ee4:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <sg_bADCUpdate>
 ee8:	88 23       	and	r24, r24
 eea:	21 f0       	breq	.+8      	; 0xef4 <main+0x2c0>
 eec:	10 92 16 03 	sts	0x0316, r1	; 0x800316 <sg_bADCUpdate>
 ef0:	0e 94 4b 13 	call	0x2696	; 0x2696 <ModuleCurrentConvertReadings>
 ef4:	0e 94 0c 24 	call	0x4818	; 0x4818 <ADCStartConversion>
 ef8:	2f cf       	rjmp	.-418    	; 0xd58 <main+0x124>

Disassembly of section .text.IsLeapYear:

00004608 <IsLeapYear>:
	return( bResult );
}

// Returns true if u16Year is a leap year
static bool IsLeapYear(uint16_t u16Year)
{
    4608:	9c 01       	movw	r18, r24
	bool bLeapYear = false;
	
	if ((u16Year % 400) == 0)
    460a:	60 e9       	ldi	r22, 0x90	; 144
    460c:	71 e0       	ldi	r23, 0x01	; 1
    460e:	0e 94 5d 24 	call	0x48ba	; 0x48ba <__udivmodhi4>
    4612:	89 2b       	or	r24, r25
    4614:	69 f0       	breq	.+26     	; 0x4630 <IsLeapYear+0x28>
	{
		bLeapYear = true;
	}
	else
	if ((u16Year % 100) == 0)
    4616:	c9 01       	movw	r24, r18
    4618:	64 e6       	ldi	r22, 0x64	; 100
    461a:	70 e0       	ldi	r23, 0x00	; 0
    461c:	0e 94 5d 24 	call	0x48ba	; 0x48ba <__udivmodhi4>
    4620:	89 2b       	or	r24, r25
    4622:	41 f0       	breq	.+16     	; 0x4634 <IsLeapYear+0x2c>
	{
		// Not a leap year if divisible by 100 but not by 400
	}
	else
	if ((u16Year % 4) == 0)
    4624:	23 70       	andi	r18, 0x03	; 3
    4626:	33 27       	eor	r19, r19
    4628:	23 2b       	or	r18, r19
    462a:	31 f0       	breq	.+12     	; 0x4638 <IsLeapYear+0x30>
}

// Returns true if u16Year is a leap year
static bool IsLeapYear(uint16_t u16Year)
{
	bool bLeapYear = false;
    462c:	80 e0       	ldi	r24, 0x00	; 0
    462e:	08 95       	ret
	
	if ((u16Year % 400) == 0)
	{
		bLeapYear = true;
    4630:	81 e0       	ldi	r24, 0x01	; 1
    4632:	08 95       	ret
}

// Returns true if u16Year is a leap year
static bool IsLeapYear(uint16_t u16Year)
{
	bool bLeapYear = false;
    4634:	80 e0       	ldi	r24, 0x00	; 0
    4636:	08 95       	ret
		// Not a leap year if divisible by 100 but not by 400
	}
	else
	if ((u16Year % 4) == 0)
	{
		bLeapYear = true;
    4638:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return(bLeapYear);
}
    463a:	08 95       	ret

Disassembly of section .text.RTCStartTransaction:

000043ec <RTCStartTransaction>:
}

static bool RTCStartTransaction( uint8_t u8Address, 
								 bool bRead, 
								 bool bAllowUnstick )
{
    43ec:	ff 92       	push	r15
    43ee:	0f 93       	push	r16
    43f0:	1f 93       	push	r17
    43f2:	cf 93       	push	r28
    43f4:	df 93       	push	r29
    43f6:	f8 2e       	mov	r15, r24
    43f8:	06 2f       	mov	r16, r22
    43fa:	14 2f       	mov	r17, r20
	bool bResult = false;
	uint8_t u8Tries = RTC_MAX_ADDRESS_TRIES;
    43fc:	d3 e0       	ldi	r29, 0x03	; 3

static bool RTCStartTransaction( uint8_t u8Address, 
								 bool bRead, 
								 bool bAllowUnstick )
{
	bool bResult = false;
    43fe:	c0 e0       	ldi	r28, 0x00	; 0
	uint8_t u8Tries = RTC_MAX_ADDRESS_TRIES;
	
	while( (false == bResult) && u8Tries )
    4400:	0c c0       	rjmp	.+24     	; 0x441a <RTCStartTransaction+0x2e>
	{
		u8Tries--;
    4402:	d1 50       	subi	r29, 0x01	; 1
		
		bResult = I2CStartTransaction( u8Address, bRead );
    4404:	60 2f       	mov	r22, r16
    4406:	8f 2d       	mov	r24, r15
    4408:	0e 94 21 24 	call	0x4842	; 0x4842 <I2CStartTransaction>
    440c:	c8 2f       	mov	r28, r24
	
		if( false == bAllowUnstick )
    440e:	11 23       	and	r17, r17
    4410:	41 f0       	breq	.+16     	; 0x4422 <RTCStartTransaction+0x36>
		{
			break;
		}
		
		// Unstick and retry on failure
		if( false == bResult )
    4412:	81 11       	cpse	r24, r1
    4414:	02 c0       	rjmp	.+4      	; 0x441a <RTCStartTransaction+0x2e>
		{
			I2CUnstick();
    4416:	0e 94 59 22 	call	0x44b2	; 0x44b2 <I2CUnstick>
								 bool bAllowUnstick )
{
	bool bResult = false;
	uint8_t u8Tries = RTC_MAX_ADDRESS_TRIES;
	
	while( (false == bResult) && u8Tries )
    441a:	c1 11       	cpse	r28, r1
    441c:	02 c0       	rjmp	.+4      	; 0x4422 <RTCStartTransaction+0x36>
    441e:	d1 11       	cpse	r29, r1
    4420:	f0 cf       	rjmp	.-32     	; 0x4402 <RTCStartTransaction+0x16>
			I2CUnstick();
		}
	}
	
	return( bResult );
}
    4422:	8c 2f       	mov	r24, r28
    4424:	df 91       	pop	r29
    4426:	cf 91       	pop	r28
    4428:	1f 91       	pop	r17
    442a:	0f 91       	pop	r16
    442c:	ff 90       	pop	r15
    442e:	08 95       	ret

Disassembly of section .text.StructTMToHW:

000041b6 <StructTMToHW>:
}

// Converts struct tm to SMCP7940NTime structure
static void StructTMToHW(struct tm *psTimeTM,
						 SMCP7940NTime *psTime)
{
    41b6:	cf 93       	push	r28
    41b8:	df 93       	push	r29
    41ba:	dc 01       	movw	r26, r24
    41bc:	fb 01       	movw	r30, r22
	memset((void *) psTime, 0, sizeof(*psTime));
    41be:	87 e0       	ldi	r24, 0x07	; 7
    41c0:	eb 01       	movw	r28, r22
    41c2:	19 92       	st	Y+, r1
    41c4:	8a 95       	dec	r24
    41c6:	e9 f7       	brne	.-6      	; 0x41c2 <StructTMToHW+0xc>
	
	psTime->u8Seconds = psTimeTM->tm_sec;
    41c8:	8c 91       	ld	r24, X
    41ca:	80 83       	st	Z, r24
	psTime->u8Minutes = psTimeTM->tm_min;
    41cc:	12 96       	adiw	r26, 0x02	; 2
    41ce:	8c 91       	ld	r24, X
    41d0:	12 97       	sbiw	r26, 0x02	; 2
    41d2:	81 83       	std	Z+1, r24	; 0x01
	psTime->u8Hours = psTimeTM->tm_hour;
    41d4:	14 96       	adiw	r26, 0x04	; 4
    41d6:	8c 91       	ld	r24, X
    41d8:	14 97       	sbiw	r26, 0x04	; 4
    41da:	82 83       	std	Z+2, r24	; 0x02
	psTime->u8Day = psTimeTM->tm_mday;
    41dc:	16 96       	adiw	r26, 0x06	; 6
    41de:	8c 91       	ld	r24, X
    41e0:	16 97       	sbiw	r26, 0x06	; 6
    41e2:	84 83       	std	Z+4, r24	; 0x04
	psTime->u8Month = psTimeTM->tm_mon;
    41e4:	18 96       	adiw	r26, 0x08	; 8
    41e6:	8c 91       	ld	r24, X
    41e8:	18 97       	sbiw	r26, 0x08	; 8
    41ea:	85 83       	std	Z+5, r24	; 0x05
	
	if (psTimeTM->tm_year > (2099-1900))
    41ec:	1a 96       	adiw	r26, 0x0a	; 10
    41ee:	8d 91       	ld	r24, X+
    41f0:	9c 91       	ld	r25, X
    41f2:	1b 97       	sbiw	r26, 0x0b	; 11
    41f4:	88 3c       	cpi	r24, 0xC8	; 200
    41f6:	91 05       	cpc	r25, r1
    41f8:	1c f0       	brlt	.+6      	; 0x4200 <StructTMToHW+0x4a>
	{
		psTime->u8Year = psTimeTM->tm_year - 2100;
    41fa:	84 53       	subi	r24, 0x34	; 52
    41fc:	86 83       	std	Z+6, r24	; 0x06
    41fe:	02 c0       	rjmp	.+4      	; 0x4204 <StructTMToHW+0x4e>
	}
	else
	{
		psTime->u8Year = psTimeTM->tm_year - 2000;
    4200:	80 5d       	subi	r24, 0xD0	; 208
    4202:	86 83       	std	Z+6, r24	; 0x06
	}
	
}
    4204:	df 91       	pop	r29
    4206:	cf 91       	pop	r28
    4208:	08 95       	ret

Disassembly of section .text.HWToStructTM:

00003b3c <HWToStructTM>:
}

// Converts an SMCP7940NTime structure to struct tm
static void HWToStructTM(SMCP7940NTime *psTime,
						 struct tm *psTimeTM)
{
    3b3c:	cf 93       	push	r28
    3b3e:	df 93       	push	r29
    3b40:	dc 01       	movw	r26, r24
    3b42:	fb 01       	movw	r30, r22
	// At this point, the time is in STime and we should
	// turn that in to time_t
	memset((void *) psTimeTM, 0, sizeof(*psTimeTM));
    3b44:	89 e1       	ldi	r24, 0x19	; 25
    3b46:	eb 01       	movw	r28, r22
    3b48:	19 92       	st	Y+, r1
    3b4a:	8a 95       	dec	r24
    3b4c:	e9 f7       	brne	.-6      	; 0x3b48 <HWToStructTM+0xc>
	
	psTimeTM->tm_sec = psTime->u8Seconds;
    3b4e:	8c 91       	ld	r24, X
    3b50:	90 e0       	ldi	r25, 0x00	; 0
    3b52:	91 83       	std	Z+1, r25	; 0x01
    3b54:	80 83       	st	Z, r24
	psTimeTM->tm_min = psTime->u8Minutes;
    3b56:	11 96       	adiw	r26, 0x01	; 1
    3b58:	8c 91       	ld	r24, X
    3b5a:	11 97       	sbiw	r26, 0x01	; 1
    3b5c:	90 e0       	ldi	r25, 0x00	; 0
    3b5e:	93 83       	std	Z+3, r25	; 0x03
    3b60:	82 83       	std	Z+2, r24	; 0x02
	psTimeTM->tm_hour = psTime->u8Hours;
    3b62:	12 96       	adiw	r26, 0x02	; 2
    3b64:	8c 91       	ld	r24, X
    3b66:	12 97       	sbiw	r26, 0x02	; 2
    3b68:	90 e0       	ldi	r25, 0x00	; 0
    3b6a:	95 83       	std	Z+5, r25	; 0x05
    3b6c:	84 83       	std	Z+4, r24	; 0x04
	psTimeTM->tm_mday = psTime->u8Day;
    3b6e:	14 96       	adiw	r26, 0x04	; 4
    3b70:	8c 91       	ld	r24, X
    3b72:	14 97       	sbiw	r26, 0x04	; 4
    3b74:	90 e0       	ldi	r25, 0x00	; 0
    3b76:	97 83       	std	Z+7, r25	; 0x07
    3b78:	86 83       	std	Z+6, r24	; 0x06
	psTimeTM->tm_mon = psTime->u8Month - 1;
    3b7a:	15 96       	adiw	r26, 0x05	; 5
    3b7c:	8c 91       	ld	r24, X
    3b7e:	15 97       	sbiw	r26, 0x05	; 5
    3b80:	90 e0       	ldi	r25, 0x00	; 0
    3b82:	01 97       	sbiw	r24, 0x01	; 1
    3b84:	91 87       	std	Z+9, r25	; 0x09
    3b86:	80 87       	std	Z+8, r24	; 0x08
	
	if (psTime->u8Year < YEAR_ROLLOVER_CUTOFF)
    3b88:	16 96       	adiw	r26, 0x06	; 6
    3b8a:	8c 91       	ld	r24, X
    3b8c:	84 31       	cpi	r24, 0x14	; 20
    3b8e:	30 f4       	brcc	.+12     	; 0x3b9c <HWToStructTM+0x60>
	{
		psTimeTM->tm_year = 2100 + psTime->u8Year;
    3b90:	90 e0       	ldi	r25, 0x00	; 0
    3b92:	8c 5c       	subi	r24, 0xCC	; 204
    3b94:	97 4f       	sbci	r25, 0xF7	; 247
    3b96:	93 87       	std	Z+11, r25	; 0x0b
    3b98:	82 87       	std	Z+10, r24	; 0x0a
    3b9a:	05 c0       	rjmp	.+10     	; 0x3ba6 <HWToStructTM+0x6a>
	}
	else
	{
		psTimeTM->tm_year = 2000 + psTime->u8Year;
    3b9c:	90 e0       	ldi	r25, 0x00	; 0
    3b9e:	80 53       	subi	r24, 0x30	; 48
    3ba0:	98 4f       	sbci	r25, 0xF8	; 248
    3ba2:	93 87       	std	Z+11, r25	; 0x0b
    3ba4:	82 87       	std	Z+10, r24	; 0x0a
	}	
	
	psTimeTM->tm_year -= 1900;
    3ba6:	82 85       	ldd	r24, Z+10	; 0x0a
    3ba8:	93 85       	ldd	r25, Z+11	; 0x0b
    3baa:	8c 56       	subi	r24, 0x6C	; 108
    3bac:	97 40       	sbci	r25, 0x07	; 7
    3bae:	93 87       	std	Z+11, r25	; 0x0b
    3bb0:	82 87       	std	Z+10, r24	; 0x0a
}
    3bb2:	df 91       	pop	r29
    3bb4:	cf 91       	pop	r28
    3bb6:	08 95       	ret

Disassembly of section .text.__vector_10:

000038b2 <__vector_10>:
// # Of seconds since January 1, 1970
static volatile uint64_t sg_u64Time;

// Called once per second on rev 1 and newer hardware
ISR(INT3_vect, ISR_NOBLOCK)
{
    38b2:	78 94       	sei
    38b4:	1f 92       	push	r1
    38b6:	0f 92       	push	r0
    38b8:	0f b6       	in	r0, 0x3f	; 63
    38ba:	0f 92       	push	r0
    38bc:	11 24       	eor	r1, r1
    38be:	2f 93       	push	r18
    38c0:	3f 93       	push	r19
    38c2:	4f 93       	push	r20
    38c4:	5f 93       	push	r21
    38c6:	6f 93       	push	r22
    38c8:	7f 93       	push	r23
    38ca:	8f 93       	push	r24
    38cc:	9f 93       	push	r25
    38ce:	af 93       	push	r26
	EIFR |= (1 << INTF3);
    38d0:	8c b3       	in	r24, 0x1c	; 28
    38d2:	88 60       	ori	r24, 0x08	; 8
    38d4:	8c bb       	out	0x1c, r24	; 28
	sg_u64Time++;
    38d6:	20 91 45 09 	lds	r18, 0x0945	; 0x800945 <sg_u64Time>
    38da:	30 91 46 09 	lds	r19, 0x0946	; 0x800946 <sg_u64Time+0x1>
    38de:	40 91 47 09 	lds	r20, 0x0947	; 0x800947 <sg_u64Time+0x2>
    38e2:	50 91 48 09 	lds	r21, 0x0948	; 0x800948 <sg_u64Time+0x3>
    38e6:	60 91 49 09 	lds	r22, 0x0949	; 0x800949 <sg_u64Time+0x4>
    38ea:	70 91 4a 09 	lds	r23, 0x094A	; 0x80094a <sg_u64Time+0x5>
    38ee:	80 91 4b 09 	lds	r24, 0x094B	; 0x80094b <sg_u64Time+0x6>
    38f2:	90 91 4c 09 	lds	r25, 0x094C	; 0x80094c <sg_u64Time+0x7>
    38f6:	a1 e0       	ldi	r26, 0x01	; 1
    38f8:	0e 94 85 26 	call	0x4d0a	; 0x4d0a <__adddi3_s8>
    38fc:	20 93 45 09 	sts	0x0945, r18	; 0x800945 <sg_u64Time>
    3900:	30 93 46 09 	sts	0x0946, r19	; 0x800946 <sg_u64Time+0x1>
    3904:	40 93 47 09 	sts	0x0947, r20	; 0x800947 <sg_u64Time+0x2>
    3908:	50 93 48 09 	sts	0x0948, r21	; 0x800948 <sg_u64Time+0x3>
    390c:	60 93 49 09 	sts	0x0949, r22	; 0x800949 <sg_u64Time+0x4>
    3910:	70 93 4a 09 	sts	0x094A, r23	; 0x80094a <sg_u64Time+0x5>
    3914:	80 93 4b 09 	sts	0x094B, r24	; 0x80094b <sg_u64Time+0x6>
    3918:	90 93 4c 09 	sts	0x094C, r25	; 0x80094c <sg_u64Time+0x7>
}
    391c:	af 91       	pop	r26
    391e:	9f 91       	pop	r25
    3920:	8f 91       	pop	r24
    3922:	7f 91       	pop	r23
    3924:	6f 91       	pop	r22
    3926:	5f 91       	pop	r21
    3928:	4f 91       	pop	r20
    392a:	3f 91       	pop	r19
    392c:	2f 91       	pop	r18
    392e:	0f 90       	pop	r0
    3930:	0f be       	out	0x3f, r0	; 63
    3932:	0f 90       	pop	r0
    3934:	1f 90       	pop	r1
    3936:	18 95       	reti

Disassembly of section .text.RTCReadRegisters:

00003abe <RTCReadRegisters>:
}

bool RTCReadRegisters( uint8_t u8RegisterAddr, 
					   uint8_t* pu8Data, 
					   uint8_t u8Length )
{
    3abe:	ff 92       	push	r15
    3ac0:	0f 93       	push	r16
    3ac2:	1f 93       	push	r17
    3ac4:	cf 93       	push	r28
    3ac6:	df 93       	push	r29
    3ac8:	f8 2e       	mov	r15, r24
    3aca:	8b 01       	movw	r16, r22
    3acc:	c4 2f       	mov	r28, r20
	bool bResult;
	
	MBASSERT( u8Length >= 1 );
    3ace:	41 11       	cpse	r20, r1
    3ad0:	07 c0       	rjmp	.+14     	; 0x3ae0 <RTCReadRegisters+0x22>
    3ad2:	4f e5       	ldi	r20, 0x5F	; 95
    3ad4:	50 e0       	ldi	r21, 0x00	; 0
    3ad6:	66 ef       	ldi	r22, 0xF6	; 246
    3ad8:	72 e0       	ldi	r23, 0x02	; 2
    3ada:	80 e0       	ldi	r24, 0x00	; 0
    3adc:	0e 94 e0 23 	call	0x47c0	; 0x47c0 <PlatformAssert>
	
	// First send device address and write register address
	bResult = RTCStartTransaction( RTC_ADDRESS, false, true );
    3ae0:	41 e0       	ldi	r20, 0x01	; 1
    3ae2:	60 e0       	ldi	r22, 0x00	; 0
    3ae4:	8e ed       	ldi	r24, 0xDE	; 222
    3ae6:	0e 94 f6 21 	call	0x43ec	; 0x43ec <RTCStartTransaction>
    3aea:	d8 2f       	mov	r29, r24
	
	// Couldn't get an ACK?  Give up now
	if( false == bResult )
    3aec:	88 23       	and	r24, r24
    3aee:	e9 f0       	breq	.+58     	; 0x3b2a <RTCReadRegisters+0x6c>
	{
		goto errorExit;
	}
	
	// Send the register address
	bResult = I2CTxByte( u8RegisterAddr );
    3af0:	8f 2d       	mov	r24, r15
    3af2:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <I2CTxByte>
    3af6:	d8 2f       	mov	r29, r24
	
	if( false == bResult )
    3af8:	88 23       	and	r24, r24
    3afa:	b9 f0       	breq	.+46     	; 0x3b2a <RTCReadRegisters+0x6c>
	{
		goto errorExit;
	}
	
	// Send repeated start with read
	bResult = RTCStartTransaction( RTC_ADDRESS, true, false );
    3afc:	40 e0       	ldi	r20, 0x00	; 0
    3afe:	61 e0       	ldi	r22, 0x01	; 1
    3b00:	8e ed       	ldi	r24, 0xDE	; 222
    3b02:	0e 94 f6 21 	call	0x43ec	; 0x43ec <RTCStartTransaction>
    3b06:	d8 2f       	mov	r29, r24
	
	// Couldn't get an ACK?  Give up now
	if( false == bResult )
    3b08:	81 11       	cpse	r24, r1
    3b0a:	08 c0       	rjmp	.+16     	; 0x3b1c <RTCReadRegisters+0x5e>
    3b0c:	0e c0       	rjmp	.+28     	; 0x3b2a <RTCReadRegisters+0x6c>
		goto errorExit;
	}
	
	while( u8Length >= 2 )
	{
		*pu8Data = I2CRxByte( true );
    3b0e:	81 e0       	ldi	r24, 0x01	; 1
    3b10:	0e 94 1a 1e 	call	0x3c34	; 0x3c34 <I2CRxByte>
    3b14:	f8 01       	movw	r30, r16
    3b16:	81 93       	st	Z+, r24
    3b18:	8f 01       	movw	r16, r30
		pu8Data++;
		u8Length--;
    3b1a:	c1 50       	subi	r28, 0x01	; 1
	if( false == bResult )
	{
		goto errorExit;
	}
	
	while( u8Length >= 2 )
    3b1c:	c2 30       	cpi	r28, 0x02	; 2
    3b1e:	b8 f7       	brcc	.-18     	; 0x3b0e <RTCReadRegisters+0x50>
		pu8Data++;
		u8Length--;
	}
	
	// Final read with NACK
	*pu8Data = I2CRxByte( false );
    3b20:	80 e0       	ldi	r24, 0x00	; 0
    3b22:	0e 94 1a 1e 	call	0x3c34	; 0x3c34 <I2CRxByte>
    3b26:	f8 01       	movw	r30, r16
    3b28:	80 83       	st	Z, r24
	
errorExit:

	I2CStop();
    3b2a:	0e 94 85 24 	call	0x490a	; 0x490a <I2CStop>
	
	return(bResult);
}
    3b2e:	8d 2f       	mov	r24, r29
    3b30:	df 91       	pop	r29
    3b32:	cf 91       	pop	r28
    3b34:	1f 91       	pop	r17
    3b36:	0f 91       	pop	r16
    3b38:	ff 90       	pop	r15
    3b3a:	08 95       	ret

Disassembly of section .text.RTCReadHW:

00002990 <RTCReadHW>:
	sei();
	
	psSrc = gmtime((const time_t *) &u64Time);
	memcpy((void *) psTime, (void *) psSrc, sizeof(*psTime));
	return(true);
}
    2990:	cf 93       	push	r28
    2992:	df 93       	push	r29
    2994:	ec 01       	movw	r28, r24
    2996:	47 e0       	ldi	r20, 0x07	; 7
    2998:	bc 01       	movw	r22, r24
    299a:	80 e0       	ldi	r24, 0x00	; 0
    299c:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <RTCReadRegisters>
    29a0:	88 23       	and	r24, r24
    29a2:	09 f4       	brne	.+2      	; 0x29a6 <RTCReadHW+0x16>
    29a4:	63 c0       	rjmp	.+198    	; 0x2a6c <RTCReadHW+0xdc>
    29a6:	98 81       	ld	r25, Y
    29a8:	29 2f       	mov	r18, r25
    29aa:	22 95       	swap	r18
    29ac:	2f 70       	andi	r18, 0x0F	; 15
    29ae:	27 70       	andi	r18, 0x07	; 7
    29b0:	22 0f       	add	r18, r18
    29b2:	32 2f       	mov	r19, r18
    29b4:	33 0f       	add	r19, r19
    29b6:	33 0f       	add	r19, r19
    29b8:	23 0f       	add	r18, r19
    29ba:	9f 70       	andi	r25, 0x0F	; 15
    29bc:	92 0f       	add	r25, r18
    29be:	98 83       	st	Y, r25
    29c0:	99 81       	ldd	r25, Y+1	; 0x01
    29c2:	29 2f       	mov	r18, r25
    29c4:	22 95       	swap	r18
    29c6:	2f 70       	andi	r18, 0x0F	; 15
    29c8:	27 70       	andi	r18, 0x07	; 7
    29ca:	22 0f       	add	r18, r18
    29cc:	32 2f       	mov	r19, r18
    29ce:	33 0f       	add	r19, r19
    29d0:	33 0f       	add	r19, r19
    29d2:	23 0f       	add	r18, r19
    29d4:	9f 70       	andi	r25, 0x0F	; 15
    29d6:	92 0f       	add	r25, r18
    29d8:	99 83       	std	Y+1, r25	; 0x01
    29da:	9a 81       	ldd	r25, Y+2	; 0x02
    29dc:	96 ff       	sbrs	r25, 6
    29de:	11 c0       	rjmp	.+34     	; 0x2a02 <RTCReadHW+0x72>
    29e0:	94 fb       	bst	r25, 4
    29e2:	22 27       	eor	r18, r18
    29e4:	20 f9       	bld	r18, 0
    29e6:	22 0f       	add	r18, r18
    29e8:	32 2f       	mov	r19, r18
    29ea:	33 0f       	add	r19, r19
    29ec:	33 0f       	add	r19, r19
    29ee:	23 0f       	add	r18, r19
    29f0:	39 2f       	mov	r19, r25
    29f2:	3f 70       	andi	r19, 0x0F	; 15
    29f4:	23 0f       	add	r18, r19
    29f6:	2a 83       	std	Y+2, r18	; 0x02
    29f8:	95 ff       	sbrs	r25, 5
    29fa:	0f c0       	rjmp	.+30     	; 0x2a1a <RTCReadHW+0x8a>
    29fc:	24 5f       	subi	r18, 0xF4	; 244
    29fe:	2a 83       	std	Y+2, r18	; 0x02
    2a00:	0c c0       	rjmp	.+24     	; 0x2a1a <RTCReadHW+0x8a>
    2a02:	29 2f       	mov	r18, r25
    2a04:	22 95       	swap	r18
    2a06:	2f 70       	andi	r18, 0x0F	; 15
    2a08:	23 70       	andi	r18, 0x03	; 3
    2a0a:	22 0f       	add	r18, r18
    2a0c:	32 2f       	mov	r19, r18
    2a0e:	33 0f       	add	r19, r19
    2a10:	33 0f       	add	r19, r19
    2a12:	23 0f       	add	r18, r19
    2a14:	9f 70       	andi	r25, 0x0F	; 15
    2a16:	92 0f       	add	r25, r18
    2a18:	9a 83       	std	Y+2, r25	; 0x02
    2a1a:	9b 81       	ldd	r25, Y+3	; 0x03
    2a1c:	97 70       	andi	r25, 0x07	; 7
    2a1e:	9b 83       	std	Y+3, r25	; 0x03
    2a20:	9c 81       	ldd	r25, Y+4	; 0x04
    2a22:	29 2f       	mov	r18, r25
    2a24:	22 95       	swap	r18
    2a26:	2f 70       	andi	r18, 0x0F	; 15
    2a28:	23 70       	andi	r18, 0x03	; 3
    2a2a:	22 0f       	add	r18, r18
    2a2c:	32 2f       	mov	r19, r18
    2a2e:	33 0f       	add	r19, r19
    2a30:	33 0f       	add	r19, r19
    2a32:	23 0f       	add	r18, r19
    2a34:	9f 70       	andi	r25, 0x0F	; 15
    2a36:	92 0f       	add	r25, r18
    2a38:	9c 83       	std	Y+4, r25	; 0x04
    2a3a:	9d 81       	ldd	r25, Y+5	; 0x05
    2a3c:	94 fb       	bst	r25, 4
    2a3e:	22 27       	eor	r18, r18
    2a40:	20 f9       	bld	r18, 0
    2a42:	22 0f       	add	r18, r18
    2a44:	32 2f       	mov	r19, r18
    2a46:	33 0f       	add	r19, r19
    2a48:	33 0f       	add	r19, r19
    2a4a:	23 0f       	add	r18, r19
    2a4c:	9f 70       	andi	r25, 0x0F	; 15
    2a4e:	92 0f       	add	r25, r18
    2a50:	9d 83       	std	Y+5, r25	; 0x05
    2a52:	9e 81       	ldd	r25, Y+6	; 0x06
    2a54:	29 2f       	mov	r18, r25
    2a56:	22 95       	swap	r18
    2a58:	2f 70       	andi	r18, 0x0F	; 15
    2a5a:	22 0f       	add	r18, r18
    2a5c:	32 2f       	mov	r19, r18
    2a5e:	33 0f       	add	r19, r19
    2a60:	33 0f       	add	r19, r19
    2a62:	23 0f       	add	r18, r19
    2a64:	9f 70       	andi	r25, 0x0F	; 15
    2a66:	92 0f       	add	r25, r18
    2a68:	9c 5e       	subi	r25, 0xEC	; 236
    2a6a:	9e 83       	std	Y+6, r25	; 0x06
    2a6c:	df 91       	pop	r29
    2a6e:	cf 91       	pop	r28
    2a70:	08 95       	ret

Disassembly of section .text.RTCWriteRegisters:

00003e78 <RTCWriteRegisters>:
}

bool RTCWriteRegisters( uint8_t u8RegisterAddr,
						uint8_t* pu8Data, 
						uint8_t u8Length )
{
    3e78:	ff 92       	push	r15
    3e7a:	0f 93       	push	r16
    3e7c:	1f 93       	push	r17
    3e7e:	cf 93       	push	r28
    3e80:	df 93       	push	r29
    3e82:	f8 2e       	mov	r15, r24
    3e84:	8b 01       	movw	r16, r22
    3e86:	c4 2f       	mov	r28, r20
	bool bResult;
	
	MBASSERT( u8Length >= 1 );
    3e88:	41 11       	cpse	r20, r1
    3e8a:	07 c0       	rjmp	.+14     	; 0x3e9a <RTCWriteRegisters+0x22>
    3e8c:	42 e9       	ldi	r20, 0x92	; 146
    3e8e:	50 e0       	ldi	r21, 0x00	; 0
    3e90:	66 ef       	ldi	r22, 0xF6	; 246
    3e92:	72 e0       	ldi	r23, 0x02	; 2
    3e94:	80 e0       	ldi	r24, 0x00	; 0
    3e96:	0e 94 e0 23 	call	0x47c0	; 0x47c0 <PlatformAssert>
	
	// First send device address and write register address
	bResult = RTCStartTransaction( RTC_ADDRESS, false, true );
    3e9a:	41 e0       	ldi	r20, 0x01	; 1
    3e9c:	60 e0       	ldi	r22, 0x00	; 0
    3e9e:	8e ed       	ldi	r24, 0xDE	; 222
    3ea0:	0e 94 f6 21 	call	0x43ec	; 0x43ec <RTCStartTransaction>
    3ea4:	d8 2f       	mov	r29, r24
	
	// Couldn't get an ACK?  Give up now
	if( false == bResult )
    3ea6:	88 23       	and	r24, r24
    3ea8:	99 f0       	breq	.+38     	; 0x3ed0 <RTCWriteRegisters+0x58>
	{
		goto errorExit;
	}
	
	// Send the register address
	bResult = I2CTxByte( u8RegisterAddr );
    3eaa:	8f 2d       	mov	r24, r15
    3eac:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <I2CTxByte>
    3eb0:	d8 2f       	mov	r29, r24
	
	if( false == bResult )
    3eb2:	81 11       	cpse	r24, r1
    3eb4:	0b c0       	rjmp	.+22     	; 0x3ecc <RTCWriteRegisters+0x54>
    3eb6:	0c c0       	rjmp	.+24     	; 0x3ed0 <RTCWriteRegisters+0x58>
	}
	
	// Now immediately send the sequential data
	while( u8Length )
	{
		bResult = I2CTxByte( *pu8Data );
    3eb8:	f8 01       	movw	r30, r16
    3eba:	80 81       	ld	r24, Z
    3ebc:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <I2CTxByte>
    3ec0:	d8 2f       	mov	r29, r24
		
		if( false == bResult )
    3ec2:	88 23       	and	r24, r24
    3ec4:	29 f0       	breq	.+10     	; 0x3ed0 <RTCWriteRegisters+0x58>
		{
			goto errorExit;
		}
		
		pu8Data++;
    3ec6:	0f 5f       	subi	r16, 0xFF	; 255
    3ec8:	1f 4f       	sbci	r17, 0xFF	; 255
		u8Length--;
    3eca:	c1 50       	subi	r28, 0x01	; 1
	{
		goto errorExit;
	}
	
	// Now immediately send the sequential data
	while( u8Length )
    3ecc:	c1 11       	cpse	r28, r1
    3ece:	f4 cf       	rjmp	.-24     	; 0x3eb8 <RTCWriteRegisters+0x40>
		u8Length--;
	}
	
errorExit:

	I2CStop();
    3ed0:	0e 94 85 24 	call	0x490a	; 0x490a <I2CStop>
	
	return( bResult );
}
    3ed4:	8d 2f       	mov	r24, r29
    3ed6:	df 91       	pop	r29
    3ed8:	cf 91       	pop	r28
    3eda:	1f 91       	pop	r17
    3edc:	0f 91       	pop	r16
    3ede:	ff 90       	pop	r15
    3ee0:	08 95       	ret

Disassembly of section .text.RTCWriteHW:

0000279a <RTCWriteHW>:
	sei();
	
	psSrc = gmtime((const time_t *) &u64Time);
	memcpy((void *) psTime, (void *) psSrc, sizeof(*psTime));
	return(true);
}
    279a:	fc 01       	movw	r30, r24
    279c:	20 81       	ld	r18, Z
    279e:	8d ec       	ldi	r24, 0xCD	; 205
    27a0:	28 9f       	mul	r18, r24
    27a2:	91 2d       	mov	r25, r1
    27a4:	11 24       	eor	r1, r1
    27a6:	96 95       	lsr	r25
    27a8:	96 95       	lsr	r25
    27aa:	96 95       	lsr	r25
    27ac:	30 e1       	ldi	r19, 0x10	; 16
    27ae:	93 9f       	mul	r25, r19
    27b0:	a0 01       	movw	r20, r0
    27b2:	11 24       	eor	r1, r1
    27b4:	99 0f       	add	r25, r25
    27b6:	39 2f       	mov	r19, r25
    27b8:	33 0f       	add	r19, r19
    27ba:	33 0f       	add	r19, r19
    27bc:	93 0f       	add	r25, r19
    27be:	29 1b       	sub	r18, r25
    27c0:	24 2b       	or	r18, r20
    27c2:	20 83       	st	Z, r18
    27c4:	21 81       	ldd	r18, Z+1	; 0x01
    27c6:	28 9f       	mul	r18, r24
    27c8:	91 2d       	mov	r25, r1
    27ca:	11 24       	eor	r1, r1
    27cc:	96 95       	lsr	r25
    27ce:	96 95       	lsr	r25
    27d0:	96 95       	lsr	r25
    27d2:	30 e1       	ldi	r19, 0x10	; 16
    27d4:	93 9f       	mul	r25, r19
    27d6:	a0 01       	movw	r20, r0
    27d8:	11 24       	eor	r1, r1
    27da:	99 0f       	add	r25, r25
    27dc:	39 2f       	mov	r19, r25
    27de:	33 0f       	add	r19, r19
    27e0:	33 0f       	add	r19, r19
    27e2:	93 0f       	add	r25, r19
    27e4:	29 1b       	sub	r18, r25
    27e6:	24 2b       	or	r18, r20
    27e8:	21 83       	std	Z+1, r18	; 0x01
    27ea:	42 81       	ldd	r20, Z+2	; 0x02
    27ec:	48 9f       	mul	r20, r24
    27ee:	91 2d       	mov	r25, r1
    27f0:	11 24       	eor	r1, r1
    27f2:	96 95       	lsr	r25
    27f4:	96 95       	lsr	r25
    27f6:	96 95       	lsr	r25
    27f8:	50 e1       	ldi	r21, 0x10	; 16
    27fa:	95 9f       	mul	r25, r21
    27fc:	90 01       	movw	r18, r0
    27fe:	11 24       	eor	r1, r1
    2800:	99 0f       	add	r25, r25
    2802:	39 2f       	mov	r19, r25
    2804:	33 0f       	add	r19, r19
    2806:	33 0f       	add	r19, r19
    2808:	93 0f       	add	r25, r19
    280a:	49 1b       	sub	r20, r25
    280c:	24 2b       	or	r18, r20
    280e:	2f 7b       	andi	r18, 0xBF	; 191
    2810:	22 83       	std	Z+2, r18	; 0x02
    2812:	93 81       	ldd	r25, Z+3	; 0x03
    2814:	97 70       	andi	r25, 0x07	; 7
    2816:	98 60       	ori	r25, 0x08	; 8
    2818:	93 83       	std	Z+3, r25	; 0x03
    281a:	24 81       	ldd	r18, Z+4	; 0x04
    281c:	28 9f       	mul	r18, r24
    281e:	91 2d       	mov	r25, r1
    2820:	11 24       	eor	r1, r1
    2822:	96 95       	lsr	r25
    2824:	96 95       	lsr	r25
    2826:	96 95       	lsr	r25
    2828:	30 e1       	ldi	r19, 0x10	; 16
    282a:	93 9f       	mul	r25, r19
    282c:	a0 01       	movw	r20, r0
    282e:	11 24       	eor	r1, r1
    2830:	99 0f       	add	r25, r25
    2832:	39 2f       	mov	r19, r25
    2834:	33 0f       	add	r19, r19
    2836:	33 0f       	add	r19, r19
    2838:	93 0f       	add	r25, r19
    283a:	29 1b       	sub	r18, r25
    283c:	24 2b       	or	r18, r20
    283e:	24 83       	std	Z+4, r18	; 0x04
    2840:	25 81       	ldd	r18, Z+5	; 0x05
    2842:	28 9f       	mul	r18, r24
    2844:	91 2d       	mov	r25, r1
    2846:	11 24       	eor	r1, r1
    2848:	96 95       	lsr	r25
    284a:	96 95       	lsr	r25
    284c:	96 95       	lsr	r25
    284e:	30 e1       	ldi	r19, 0x10	; 16
    2850:	93 9f       	mul	r25, r19
    2852:	a0 01       	movw	r20, r0
    2854:	11 24       	eor	r1, r1
    2856:	99 0f       	add	r25, r25
    2858:	39 2f       	mov	r19, r25
    285a:	33 0f       	add	r19, r19
    285c:	33 0f       	add	r19, r19
    285e:	93 0f       	add	r25, r19
    2860:	29 1b       	sub	r18, r25
    2862:	24 2b       	or	r18, r20
    2864:	25 83       	std	Z+5, r18	; 0x05
    2866:	96 81       	ldd	r25, Z+6	; 0x06
    2868:	98 9f       	mul	r25, r24
    286a:	81 2d       	mov	r24, r1
    286c:	11 24       	eor	r1, r1
    286e:	86 95       	lsr	r24
    2870:	86 95       	lsr	r24
    2872:	86 95       	lsr	r24
    2874:	40 e1       	ldi	r20, 0x10	; 16
    2876:	84 9f       	mul	r24, r20
    2878:	90 01       	movw	r18, r0
    287a:	11 24       	eor	r1, r1
    287c:	88 0f       	add	r24, r24
    287e:	38 2f       	mov	r19, r24
    2880:	33 0f       	add	r19, r19
    2882:	33 0f       	add	r19, r19
    2884:	83 0f       	add	r24, r19
    2886:	98 1b       	sub	r25, r24
    2888:	92 2b       	or	r25, r18
    288a:	96 83       	std	Z+6, r25	; 0x06
    288c:	47 e0       	ldi	r20, 0x07	; 7
    288e:	bf 01       	movw	r22, r30
    2890:	80 e0       	ldi	r24, 0x00	; 0
    2892:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <RTCWriteRegisters>
    2896:	08 95       	ret

Disassembly of section .text.RTCSetTime:

00003038 <RTCSetTime>:

// This sets the RTC to the specific time passed in. True is returned
// if it's 
bool RTCSetTime(uint64_t u64Timet)
{
    3038:	0f 93       	push	r16
    303a:	1f 93       	push	r17
    303c:	cf 93       	push	r28
    303e:	df 93       	push	r29
    3040:	cd b7       	in	r28, 0x3d	; 61
    3042:	de b7       	in	r29, 0x3e	; 62
    3044:	a8 97       	sbiw	r28, 0x28	; 40
    3046:	0f b6       	in	r0, 0x3f	; 63
    3048:	f8 94       	cli
    304a:	de bf       	out	0x3e, r29	; 62
    304c:	0f be       	out	0x3f, r0	; 63
    304e:	cd bf       	out	0x3d, r28	; 61
    3050:	29 a3       	std	Y+33, r18	; 0x21
    3052:	3a a3       	std	Y+34, r19	; 0x22
    3054:	4b a3       	std	Y+35, r20	; 0x23
    3056:	5c a3       	std	Y+36, r21	; 0x24
    3058:	6d a3       	std	Y+37, r22	; 0x25
    305a:	7e a3       	std	Y+38, r23	; 0x26
    305c:	8f a3       	std	Y+39, r24	; 0x27
    305e:	98 a7       	std	Y+40, r25	; 0x28
	struct tm sTime;
	struct tm *psTime;
	SMCP7940NTime sTimeHW;

	// Convert to GMTime
	memset((void *) &sTime, 0, sizeof(sTime));
    3060:	fe 01       	movw	r30, r28
    3062:	31 96       	adiw	r30, 0x01	; 1
    3064:	89 e1       	ldi	r24, 0x19	; 25
    3066:	df 01       	movw	r26, r30
    3068:	1d 92       	st	X+, r1
    306a:	8a 95       	dec	r24
    306c:	e9 f7       	brne	.-6      	; 0x3068 <RTCSetTime+0x30>
	psTime = gmtime((const time_t *) &u64Timet);
    306e:	be 01       	movw	r22, r28
    3070:	6f 5d       	subi	r22, 0xDF	; 223
    3072:	7f 4f       	sbci	r23, 0xFF	; 255
    3074:	80 e8       	ldi	r24, 0x80	; 128
    3076:	0e 94 56 27 	call	0x4eac	; 0x4eac <gmtime>
    307a:	8c 01       	movw	r16, r24
	MBASSERT(psTime);
    307c:	89 2b       	or	r24, r25
    307e:	39 f4       	brne	.+14     	; 0x308e <RTCSetTime+0x56>
    3080:	42 e8       	ldi	r20, 0x82	; 130
    3082:	51 e0       	ldi	r21, 0x01	; 1
    3084:	66 ef       	ldi	r22, 0xF6	; 246
    3086:	72 e0       	ldi	r23, 0x02	; 2
    3088:	80 e0       	ldi	r24, 0x00	; 0
    308a:	0e 94 e0 23 	call	0x47c0	; 0x47c0 <PlatformAssert>
	memcpy((void *) &sTime, (void *) psTime, sizeof(sTime));
    308e:	a8 01       	movw	r20, r16
    3090:	60 e8       	ldi	r22, 0x80	; 128
    3092:	29 e1       	ldi	r18, 0x19	; 25
    3094:	30 e0       	ldi	r19, 0x00	; 0
    3096:	ce 01       	movw	r24, r28
    3098:	01 96       	adiw	r24, 0x01	; 1
    309a:	0e 94 84 23 	call	0x4708	; 0x4708 <memcpy>
	
	// Now convert to hardware
	StructTMToHW(&sTime,
    309e:	be 01       	movw	r22, r28
    30a0:	66 5e       	subi	r22, 0xE6	; 230
    30a2:	7f 4f       	sbci	r23, 0xFF	; 255
    30a4:	ce 01       	movw	r24, r28
    30a6:	01 96       	adiw	r24, 0x01	; 1
    30a8:	0e 94 db 20 	call	0x41b6	; 0x41b6 <StructTMToHW>
				 &sTimeHW);
	
	// Set the time			 
	cli();
    30ac:	f8 94       	cli
	sg_u64Time = u64Timet;
    30ae:	79 a1       	ldd	r23, Y+33	; 0x21
    30b0:	6a a1       	ldd	r22, Y+34	; 0x22
    30b2:	5b a1       	ldd	r21, Y+35	; 0x23
    30b4:	4c a1       	ldd	r20, Y+36	; 0x24
    30b6:	3d a1       	ldd	r19, Y+37	; 0x25
    30b8:	2e a1       	ldd	r18, Y+38	; 0x26
    30ba:	9f a1       	ldd	r25, Y+39	; 0x27
    30bc:	88 a5       	ldd	r24, Y+40	; 0x28
    30be:	70 93 45 09 	sts	0x0945, r23	; 0x800945 <sg_u64Time>
    30c2:	60 93 46 09 	sts	0x0946, r22	; 0x800946 <sg_u64Time+0x1>
    30c6:	50 93 47 09 	sts	0x0947, r21	; 0x800947 <sg_u64Time+0x2>
    30ca:	40 93 48 09 	sts	0x0948, r20	; 0x800948 <sg_u64Time+0x3>
    30ce:	30 93 49 09 	sts	0x0949, r19	; 0x800949 <sg_u64Time+0x4>
    30d2:	20 93 4a 09 	sts	0x094A, r18	; 0x80094a <sg_u64Time+0x5>
    30d6:	90 93 4b 09 	sts	0x094B, r25	; 0x80094b <sg_u64Time+0x6>
    30da:	80 93 4c 09 	sts	0x094C, r24	; 0x80094c <sg_u64Time+0x7>
	sei();
    30de:	78 94       	sei
	
	// Now go tell the hardware about it
	return(RTCWriteHW(&sTimeHW));
    30e0:	ce 01       	movw	r24, r28
    30e2:	4a 96       	adiw	r24, 0x1a	; 26
    30e4:	0e 94 cd 13 	call	0x279a	; 0x279a <RTCWriteHW>
}
    30e8:	a8 96       	adiw	r28, 0x28	; 40
    30ea:	0f b6       	in	r0, 0x3f	; 63
    30ec:	f8 94       	cli
    30ee:	de bf       	out	0x3e, r29	; 62
    30f0:	0f be       	out	0x3f, r0	; 63
    30f2:	cd bf       	out	0x3d, r28	; 61
    30f4:	df 91       	pop	r29
    30f6:	cf 91       	pop	r28
    30f8:	1f 91       	pop	r17
    30fa:	0f 91       	pop	r16
    30fc:	08 95       	ret

Disassembly of section .text.RTCInit:

0000168e <RTCInit>:
	sei();
	
	psSrc = gmtime((const time_t *) &u64Time);
	memcpy((void *) psTime, (void *) psSrc, sizeof(*psTime));
	return(true);
}
    168e:	ff 92       	push	r15
    1690:	0f 93       	push	r16
    1692:	1f 93       	push	r17
    1694:	cf 93       	push	r28
    1696:	df 93       	push	r29
    1698:	cd b7       	in	r28, 0x3d	; 61
    169a:	de b7       	in	r29, 0x3e	; 62
    169c:	a1 97       	sbiw	r28, 0x21	; 33
    169e:	0f b6       	in	r0, 0x3f	; 63
    16a0:	f8 94       	cli
    16a2:	de bf       	out	0x3e, r29	; 62
    16a4:	0f be       	out	0x3f, r0	; 63
    16a6:	cd bf       	out	0x3d, r28	; 61
    16a8:	19 82       	std	Y+1, r1	; 0x01
    16aa:	41 e0       	ldi	r20, 0x01	; 1
    16ac:	be 01       	movw	r22, r28
    16ae:	6f 5f       	subi	r22, 0xFF	; 255
    16b0:	7f 4f       	sbci	r23, 0xFF	; 255
    16b2:	87 e0       	ldi	r24, 0x07	; 7
    16b4:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <RTCWriteRegisters>
    16b8:	18 2f       	mov	r17, r24
    16ba:	88 23       	and	r24, r24
    16bc:	09 f4       	brne	.+2      	; 0x16c0 <RTCInit+0x32>
    16be:	eb c0       	rjmp	.+470    	; 0x1896 <RTCInit+0x208>
    16c0:	80 e8       	ldi	r24, 0x80	; 128
    16c2:	89 83       	std	Y+1, r24	; 0x01
    16c4:	41 e0       	ldi	r20, 0x01	; 1
    16c6:	be 01       	movw	r22, r28
    16c8:	6f 5f       	subi	r22, 0xFF	; 255
    16ca:	7f 4f       	sbci	r23, 0xFF	; 255
    16cc:	80 e0       	ldi	r24, 0x00	; 0
    16ce:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <RTCWriteRegisters>
    16d2:	18 2f       	mov	r17, r24
    16d4:	81 11       	cpse	r24, r1
    16d6:	17 c0       	rjmp	.+46     	; 0x1706 <RTCInit+0x78>
    16d8:	de c0       	rjmp	.+444    	; 0x1896 <RTCInit+0x208>
    16da:	19 82       	std	Y+1, r1	; 0x01
    16dc:	41 e0       	ldi	r20, 0x01	; 1
    16de:	be 01       	movw	r22, r28
    16e0:	6f 5f       	subi	r22, 0xFF	; 255
    16e2:	7f 4f       	sbci	r23, 0xFF	; 255
    16e4:	83 e0       	ldi	r24, 0x03	; 3
    16e6:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <RTCReadRegisters>
    16ea:	18 2f       	mov	r17, r24
    16ec:	88 23       	and	r24, r24
    16ee:	09 f4       	brne	.+2      	; 0x16f2 <RTCInit+0x64>
    16f0:	d2 c0       	rjmp	.+420    	; 0x1896 <RTCInit+0x208>
    16f2:	89 81       	ldd	r24, Y+1	; 0x01
    16f4:	85 fd       	sbrc	r24, 5
    16f6:	0a c0       	rjmp	.+20     	; 0x170c <RTCInit+0x7e>
    16f8:	60 e0       	ldi	r22, 0x00	; 0
    16fa:	70 e0       	ldi	r23, 0x00	; 0
    16fc:	cb 01       	movw	r24, r22
    16fe:	0e 94 2f 21 	call	0x425e	; 0x425e <Delay>
    1702:	0f 5f       	subi	r16, 0xFF	; 255
    1704:	01 c0       	rjmp	.+2      	; 0x1708 <RTCInit+0x7a>
    1706:	00 e0       	ldi	r16, 0x00	; 0
    1708:	08 3c       	cpi	r16, 0xC8	; 200
    170a:	38 f3       	brcs	.-50     	; 0x16da <RTCInit+0x4c>
    170c:	08 3c       	cpi	r16, 0xC8	; 200
    170e:	08 f0       	brcs	.+2      	; 0x1712 <RTCInit+0x84>
    1710:	c2 c0       	rjmp	.+388    	; 0x1896 <RTCInit+0x208>
    1712:	89 81       	ldd	r24, Y+1	; 0x01
    1714:	88 60       	ori	r24, 0x08	; 8
    1716:	89 83       	std	Y+1, r24	; 0x01
    1718:	41 e0       	ldi	r20, 0x01	; 1
    171a:	be 01       	movw	r22, r28
    171c:	6f 5f       	subi	r22, 0xFF	; 255
    171e:	7f 4f       	sbci	r23, 0xFF	; 255
    1720:	83 e0       	ldi	r24, 0x03	; 3
    1722:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <RTCWriteRegisters>
    1726:	18 2f       	mov	r17, r24
    1728:	88 23       	and	r24, r24
    172a:	09 f4       	brne	.+2      	; 0x172e <RTCInit+0xa0>
    172c:	b4 c0       	rjmp	.+360    	; 0x1896 <RTCInit+0x208>
    172e:	41 e0       	ldi	r20, 0x01	; 1
    1730:	be 01       	movw	r22, r28
    1732:	6f 5f       	subi	r22, 0xFF	; 255
    1734:	7f 4f       	sbci	r23, 0xFF	; 255
    1736:	82 e0       	ldi	r24, 0x02	; 2
    1738:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <RTCReadRegisters>
    173c:	18 2f       	mov	r17, r24
    173e:	88 23       	and	r24, r24
    1740:	09 f4       	brne	.+2      	; 0x1744 <RTCInit+0xb6>
    1742:	a9 c0       	rjmp	.+338    	; 0x1896 <RTCInit+0x208>
    1744:	89 81       	ldd	r24, Y+1	; 0x01
    1746:	8f 7b       	andi	r24, 0xBF	; 191
    1748:	89 83       	std	Y+1, r24	; 0x01
    174a:	41 e0       	ldi	r20, 0x01	; 1
    174c:	be 01       	movw	r22, r28
    174e:	6f 5f       	subi	r22, 0xFF	; 255
    1750:	7f 4f       	sbci	r23, 0xFF	; 255
    1752:	82 e0       	ldi	r24, 0x02	; 2
    1754:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <RTCWriteRegisters>
    1758:	18 2f       	mov	r17, r24
    175a:	88 23       	and	r24, r24
    175c:	09 f4       	brne	.+2      	; 0x1760 <RTCInit+0xd2>
    175e:	9b c0       	rjmp	.+310    	; 0x1896 <RTCInit+0x208>
    1760:	ce 01       	movw	r24, r28
    1762:	02 96       	adiw	r24, 0x02	; 2
    1764:	0e 94 c8 14 	call	0x2990	; 0x2990 <RTCReadHW>
    1768:	18 2f       	mov	r17, r24
    176a:	88 23       	and	r24, r24
    176c:	09 f4       	brne	.+2      	; 0x1770 <RTCInit+0xe2>
    176e:	93 c0       	rjmp	.+294    	; 0x1896 <RTCInit+0x208>
    1770:	8a 81       	ldd	r24, Y+2	; 0x02
    1772:	8c 33       	cpi	r24, 0x3C	; 60
    1774:	10 f4       	brcc	.+4      	; 0x177a <RTCInit+0xec>
    1776:	10 e0       	ldi	r17, 0x00	; 0
    1778:	01 c0       	rjmp	.+2      	; 0x177c <RTCInit+0xee>
    177a:	11 e0       	ldi	r17, 0x01	; 1
    177c:	8b 81       	ldd	r24, Y+3	; 0x03
    177e:	8c 33       	cpi	r24, 0x3C	; 60
    1780:	08 f0       	brcs	.+2      	; 0x1784 <RTCInit+0xf6>
    1782:	11 e0       	ldi	r17, 0x01	; 1
    1784:	8c 81       	ldd	r24, Y+4	; 0x04
    1786:	8c 33       	cpi	r24, 0x3C	; 60
    1788:	08 f0       	brcs	.+2      	; 0x178c <RTCInit+0xfe>
    178a:	11 e0       	ldi	r17, 0x01	; 1
    178c:	8d 81       	ldd	r24, Y+5	; 0x05
    178e:	81 50       	subi	r24, 0x01	; 1
    1790:	87 30       	cpi	r24, 0x07	; 7
    1792:	08 f0       	brcs	.+2      	; 0x1796 <RTCInit+0x108>
    1794:	11 e0       	ldi	r17, 0x01	; 1
    1796:	2f 81       	ldd	r18, Y+7	; 0x07
    1798:	8f ef       	ldi	r24, 0xFF	; 255
    179a:	82 0f       	add	r24, r18
    179c:	8c 30       	cpi	r24, 0x0C	; 12
    179e:	18 f5       	brcc	.+70     	; 0x17e6 <RTCInit+0x158>
    17a0:	0e 81       	ldd	r16, Y+6	; 0x06
    17a2:	00 23       	and	r16, r16
    17a4:	11 f1       	breq	.+68     	; 0x17ea <RTCInit+0x15c>
    17a6:	82 2f       	mov	r24, r18
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	01 97       	sbiw	r24, 0x01	; 1
    17ac:	09 2e       	mov	r0, r25
    17ae:	00 0c       	add	r0, r0
    17b0:	aa 0b       	sbc	r26, r26
    17b2:	87 5d       	subi	r24, 0xD7	; 215
    17b4:	9c 4f       	sbci	r25, 0xFC	; 252
    17b6:	af 4f       	sbci	r26, 0xFF	; 255
    17b8:	fc 01       	movw	r30, r24
    17ba:	f4 90       	lpm	r15, Z
    17bc:	a7 fd       	sbrc	r26, 7
    17be:	f0 80       	ld	r15, Z
    17c0:	22 30       	cpi	r18, 0x02	; 2
    17c2:	71 f4       	brne	.+28     	; 0x17e0 <RTCInit+0x152>
    17c4:	88 85       	ldd	r24, Y+8	; 0x08
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	84 31       	cpi	r24, 0x14	; 20
    17ca:	91 05       	cpc	r25, r1
    17cc:	18 f4       	brcc	.+6      	; 0x17d4 <RTCInit+0x146>
    17ce:	8c 5c       	subi	r24, 0xCC	; 204
    17d0:	97 4f       	sbci	r25, 0xF7	; 247
    17d2:	02 c0       	rjmp	.+4      	; 0x17d8 <RTCInit+0x14a>
    17d4:	80 53       	subi	r24, 0x30	; 48
    17d6:	98 4f       	sbci	r25, 0xF8	; 248
    17d8:	0e 94 04 23 	call	0x4608	; 0x4608 <IsLeapYear>
    17dc:	81 11       	cpse	r24, r1
    17de:	f3 94       	inc	r15
    17e0:	f0 16       	cp	r15, r16
    17e2:	28 f0       	brcs	.+10     	; 0x17ee <RTCInit+0x160>
    17e4:	05 c0       	rjmp	.+10     	; 0x17f0 <RTCInit+0x162>
    17e6:	11 e0       	ldi	r17, 0x01	; 1
    17e8:	03 c0       	rjmp	.+6      	; 0x17f0 <RTCInit+0x162>
    17ea:	11 e0       	ldi	r17, 0x01	; 1
    17ec:	01 c0       	rjmp	.+2      	; 0x17f0 <RTCInit+0x162>
    17ee:	11 e0       	ldi	r17, 0x01	; 1
    17f0:	11 23       	and	r17, r17
    17f2:	b9 f0       	breq	.+46     	; 0x1822 <RTCInit+0x194>
    17f4:	1a 82       	std	Y+2, r1	; 0x02
    17f6:	1b 82       	std	Y+3, r1	; 0x03
    17f8:	1c 82       	std	Y+4, r1	; 0x04
    17fa:	81 e0       	ldi	r24, 0x01	; 1
    17fc:	8e 83       	std	Y+6, r24	; 0x06
    17fe:	8f 83       	std	Y+7, r24	; 0x07
    1800:	88 e1       	ldi	r24, 0x18	; 24
    1802:	88 87       	std	Y+8, r24	; 0x08
    1804:	ce 01       	movw	r24, r28
    1806:	02 96       	adiw	r24, 0x02	; 2
    1808:	0e 94 cd 13 	call	0x279a	; 0x279a <RTCWriteHW>
    180c:	18 2f       	mov	r17, r24
    180e:	88 23       	and	r24, r24
    1810:	09 f4       	brne	.+2      	; 0x1814 <RTCInit+0x186>
    1812:	41 c0       	rjmp	.+130    	; 0x1896 <RTCInit+0x208>
    1814:	ce 01       	movw	r24, r28
    1816:	02 96       	adiw	r24, 0x02	; 2
    1818:	0e 94 c8 14 	call	0x2990	; 0x2990 <RTCReadHW>
    181c:	18 2f       	mov	r17, r24
    181e:	88 23       	and	r24, r24
    1820:	d1 f1       	breq	.+116    	; 0x1896 <RTCInit+0x208>
    1822:	be 01       	movw	r22, r28
    1824:	67 5f       	subi	r22, 0xF7	; 247
    1826:	7f 4f       	sbci	r23, 0xFF	; 255
    1828:	ce 01       	movw	r24, r28
    182a:	02 96       	adiw	r24, 0x02	; 2
    182c:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <HWToStructTM>
    1830:	ce 01       	movw	r24, r28
    1832:	09 96       	adiw	r24, 0x09	; 9
    1834:	0e 94 9c 1c 	call	0x3938	; 0x3938 <mktime>
    1838:	8b 01       	movw	r16, r22
    183a:	9c 01       	movw	r18, r24
    183c:	f8 94       	cli
    183e:	00 93 45 09 	sts	0x0945, r16	; 0x800945 <sg_u64Time>
    1842:	10 93 46 09 	sts	0x0946, r17	; 0x800946 <sg_u64Time+0x1>
    1846:	20 93 47 09 	sts	0x0947, r18	; 0x800947 <sg_u64Time+0x2>
    184a:	30 93 48 09 	sts	0x0948, r19	; 0x800948 <sg_u64Time+0x3>
    184e:	10 92 49 09 	sts	0x0949, r1	; 0x800949 <sg_u64Time+0x4>
    1852:	10 92 4a 09 	sts	0x094A, r1	; 0x80094a <sg_u64Time+0x5>
    1856:	10 92 4b 09 	sts	0x094B, r1	; 0x80094b <sg_u64Time+0x6>
    185a:	10 92 4c 09 	sts	0x094C, r1	; 0x80094c <sg_u64Time+0x7>
    185e:	78 94       	sei
    1860:	87 b1       	in	r24, 0x07	; 7
    1862:	8e 7f       	andi	r24, 0xFE	; 254
    1864:	87 b9       	out	0x07, r24	; 7
    1866:	88 b1       	in	r24, 0x08	; 8
    1868:	81 60       	ori	r24, 0x01	; 1
    186a:	88 b9       	out	0x08, r24	; 8
    186c:	41 e0       	ldi	r20, 0x01	; 1
    186e:	be 01       	movw	r22, r28
    1870:	6f 5f       	subi	r22, 0xFF	; 255
    1872:	7f 4f       	sbci	r23, 0xFF	; 255
    1874:	87 e0       	ldi	r24, 0x07	; 7
    1876:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <RTCReadRegisters>
    187a:	18 2f       	mov	r17, r24
    187c:	88 23       	and	r24, r24
    187e:	59 f0       	breq	.+22     	; 0x1896 <RTCInit+0x208>
    1880:	89 81       	ldd	r24, Y+1	; 0x01
    1882:	80 64       	ori	r24, 0x40	; 64
    1884:	89 83       	std	Y+1, r24	; 0x01
    1886:	41 e0       	ldi	r20, 0x01	; 1
    1888:	be 01       	movw	r22, r28
    188a:	6f 5f       	subi	r22, 0xFF	; 255
    188c:	7f 4f       	sbci	r23, 0xFF	; 255
    188e:	87 e0       	ldi	r24, 0x07	; 7
    1890:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <RTCWriteRegisters>
    1894:	18 2f       	mov	r17, r24
    1896:	81 2f       	mov	r24, r17
    1898:	a1 96       	adiw	r28, 0x21	; 33
    189a:	0f b6       	in	r0, 0x3f	; 63
    189c:	f8 94       	cli
    189e:	de bf       	out	0x3e, r29	; 62
    18a0:	0f be       	out	0x3f, r0	; 63
    18a2:	cd bf       	out	0x3d, r28	; 61
    18a4:	df 91       	pop	r29
    18a6:	cf 91       	pop	r28
    18a8:	1f 91       	pop	r17
    18aa:	0f 91       	pop	r16
    18ac:	ff 90       	pop	r15
    18ae:	08 95       	ret

Disassembly of section .text.SDSetCS:

00004d90 <SDSetCS>:
static uint8_t sg_u8CSD[16];

// This will provide a !CS assertion or deassertion with pre/postamble clock
static void SDSetCS(bool bAsserted)
{
	if (bAsserted)
    4d90:	88 23       	and	r24, r24
    4d92:	21 f0       	breq	.+8      	; 0x4d9c <SDSetCS+0xc>
	{
		SD_CS_ASSERT();
    4d94:	88 b1       	in	r24, 0x08	; 8
    4d96:	8f 7b       	andi	r24, 0xBF	; 191
    4d98:	88 b9       	out	0x08, r24	; 8
    4d9a:	08 95       	ret
	}
	else
	{
		SD_CS_DEASSERT();
    4d9c:	88 b1       	in	r24, 0x08	; 8
    4d9e:	80 64       	ori	r24, 0x40	; 64
    4da0:	88 b9       	out	0x08, r24	; 8
    4da2:	08 95       	ret

Disassembly of section .text.SDPowerup:

0000452a <SDPowerup>:

// Sends SD powerup sequence to card and attempts to initialize it
static void SDPowerup(void)
{
	// Set SPI baud rate to (SD_SPEED_SLOW, which is the max for the init sequence)
	(void) SPISetBaudRate(SD_SPEED_SLOW);
    452a:	60 e8       	ldi	r22, 0x80	; 128
    452c:	7a e1       	ldi	r23, 0x1A	; 26
    452e:	86 e0       	ldi	r24, 0x06	; 6
    4530:	90 e0       	ldi	r25, 0x00	; 0
    4532:	0e 94 53 17 	call	0x2ea6	; 0x2ea6 <SPISetBaudRate>
	
	// Deassert chip select
	SD_CS_DEASSERT();
    4536:	88 b1       	in	r24, 0x08	; 8
    4538:	80 64       	ori	r24, 0x40	; 64
    453a:	88 b9       	out	0x08, r24	; 8
	
	// Delay time after possible deassertion (2ms)
	Delay(2000);
    453c:	60 ed       	ldi	r22, 0xD0	; 208
    453e:	77 e0       	ldi	r23, 0x07	; 7
    4540:	80 e0       	ldi	r24, 0x00	; 0
    4542:	90 e0       	ldi	r25, 0x00	; 0
    4544:	0e 94 2f 21 	call	0x425e	; 0x425e <Delay>
	
	// Send 74/80 bits of 0xff as a reset (80 bits required since we're byte-
	// sized transactions)
	SPIWritePattern(0xff,
    4548:	40 e1       	ldi	r20, 0x10	; 16
    454a:	50 e0       	ldi	r21, 0x00	; 0
    454c:	6f ef       	ldi	r22, 0xFF	; 255
    454e:	70 e0       	ldi	r23, 0x00	; 0
    4550:	82 e0       	ldi	r24, 0x02	; 2
    4552:	0e 94 02 20 	call	0x4004	; 0x4004 <SPITransaction>
				    128/8);

	// Delay time after write
	Delay(2000);
    4556:	60 ed       	ldi	r22, 0xD0	; 208
    4558:	77 e0       	ldi	r23, 0x07	; 7
    455a:	80 e0       	ldi	r24, 0x00	; 0
    455c:	90 e0       	ldi	r25, 0x00	; 0
    455e:	0e 94 2f 21 	call	0x425e	; 0x425e <Delay>
    4562:	08 95       	ret

Disassembly of section .text.SDCommand:

000033fa <SDCommand>:
#define CMD8_CRC    0x87

// Sends a command to the SD card, including argument an CRC
static uint8_t SDCommand(uint8_t u8Cmd,
						 uint32_t u32Arg)
{
    33fa:	df 92       	push	r13
    33fc:	ef 92       	push	r14
    33fe:	ff 92       	push	r15
    3400:	0f 93       	push	r16
    3402:	1f 93       	push	r17
    3404:	cf 93       	push	r28
    3406:	df 93       	push	r29
    3408:	cd b7       	in	r28, 0x3d	; 61
    340a:	de b7       	in	r29, 0x3e	; 62
    340c:	27 97       	sbiw	r28, 0x07	; 7
    340e:	0f b6       	in	r0, 0x3f	; 63
    3410:	f8 94       	cli
    3412:	de bf       	out	0x3e, r29	; 62
    3414:	0f be       	out	0x3f, r0	; 63
    3416:	cd bf       	out	0x3d, r28	; 61
    3418:	18 2f       	mov	r17, r24
    341a:	04 2f       	mov	r16, r20
    341c:	f5 2e       	mov	r15, r21
    341e:	e6 2e       	mov	r14, r22
    3420:	d7 2e       	mov	r13, r23
	uint8_t u8Buffer[sizeof(u8Cmd) + sizeof(u32Arg) + sizeof(u8CRC)];
	uint8_t u8Response;
	uint8_t u8Count;
	
	// If this is an ACMD, prefix a CMD55
	if (u8Cmd & 0x80)
    3422:	88 23       	and	r24, r24
    3424:	4c f4       	brge	.+18     	; 0x3438 <SDCommand+0x3e>
	{
		u8Response = SDCommand(CMD55,
    3426:	40 e0       	ldi	r20, 0x00	; 0
    3428:	50 e0       	ldi	r21, 0x00	; 0
    342a:	ba 01       	movw	r22, r20
    342c:	87 e3       	ldi	r24, 0x37	; 55
    342e:	0e 94 fd 19 	call	0x33fa	; 0x33fa <SDCommand>
    3432:	8f 83       	std	Y+7, r24	; 0x07
							   CMD55_ARG);
							   
		if (u8Response > 1)
    3434:	82 30       	cpi	r24, 0x02	; 2
    3436:	40 f5       	brcc	.+80     	; 0x3488 <SDCommand+0x8e>
			return(u8Response);
		}
	}
	
	// SD Command (OR in 0x40 so bit 47 is always a 1
	u8Buffer[0] = (u8Cmd & 0x7f) | 0x40;
    3438:	81 2f       	mov	r24, r17
    343a:	8f 73       	andi	r24, 0x3F	; 63
    343c:	80 64       	ori	r24, 0x40	; 64
    343e:	89 83       	std	Y+1, r24	; 0x01
	
	// 32 Bits of argument
	u8Buffer[1] = (uint8_t) (u32Arg >> 24);
    3440:	da 82       	std	Y+2, r13	; 0x02
	u8Buffer[2] = (uint8_t) (u32Arg >> 16);
    3442:	eb 82       	std	Y+3, r14	; 0x03
	u8Buffer[3] = (uint8_t) (u32Arg >> 8);
    3444:	fc 82       	std	Y+4, r15	; 0x04
	u8Buffer[4] = (uint8_t) (u32Arg >> 0);
    3446:	0d 83       	std	Y+5, r16	; 0x05
	
	// Valid CRCs for specific commands
	u8CRC = 0;
	if (CMD0 == u8Cmd)
    3448:	11 23       	and	r17, r17
    344a:	11 f0       	breq	.+4      	; 0x3450 <SDCommand+0x56>
	u8Buffer[2] = (uint8_t) (u32Arg >> 16);
	u8Buffer[3] = (uint8_t) (u32Arg >> 8);
	u8Buffer[4] = (uint8_t) (u32Arg >> 0);
	
	// Valid CRCs for specific commands
	u8CRC = 0;
    344c:	80 e0       	ldi	r24, 0x00	; 0
    344e:	01 c0       	rjmp	.+2      	; 0x3452 <SDCommand+0x58>
	if (CMD0 == u8Cmd)
	{
		u8CRC = 0x95;
    3450:	85 e9       	ldi	r24, 0x95	; 149
	}
	
	if (CMD8 == u8Cmd)
    3452:	18 30       	cpi	r17, 0x08	; 8
    3454:	09 f4       	brne	.+2      	; 0x3458 <SDCommand+0x5e>
	{
		u8CRC = 0x87;
    3456:	87 e8       	ldi	r24, 0x87	; 135
	}
	
	// Now the CRC - Bit 0 means "ignore CRC"
	u8Buffer[5] = (uint8_t) (u8CRC | 0x01);
    3458:	81 60       	ori	r24, 0x01	; 1
    345a:	8e 83       	std	Y+6, r24	; 0x06
	
	// Send all bytes to the SD card
	SPIWrite(u8Buffer,
    345c:	46 e0       	ldi	r20, 0x06	; 6
    345e:	50 e0       	ldi	r21, 0x00	; 0
    3460:	be 01       	movw	r22, r28
    3462:	6f 5f       	subi	r22, 0xFF	; 255
    3464:	7f 4f       	sbci	r23, 0xFF	; 255
    3466:	81 e0       	ldi	r24, 0x01	; 1
    3468:	0e 94 02 20 	call	0x4004	; 0x4004 <SPITransaction>
			 sizeof(u8Buffer));
			 
	u8Count = 10;
    346c:	1a e0       	ldi	r17, 0x0A	; 10
	
	do 
	{
		SPIRead(&u8Response,
    346e:	41 e0       	ldi	r20, 0x01	; 1
    3470:	50 e0       	ldi	r21, 0x00	; 0
    3472:	be 01       	movw	r22, r28
    3474:	69 5f       	subi	r22, 0xF9	; 249
    3476:	7f 4f       	sbci	r23, 0xFF	; 255
    3478:	83 e0       	ldi	r24, 0x03	; 3
    347a:	0e 94 02 20 	call	0x4004	; 0x4004 <SPITransaction>
				sizeof(u8Response));
	} while ((u8Response & 0x80) && --u8Count);
    347e:	8f 81       	ldd	r24, Y+7	; 0x07
    3480:	88 23       	and	r24, r24
    3482:	14 f4       	brge	.+4      	; 0x3488 <SDCommand+0x8e>
    3484:	11 50       	subi	r17, 0x01	; 1
    3486:	99 f7       	brne	.-26     	; 0x346e <SDCommand+0x74>
	
	return(u8Response);
}
    3488:	27 96       	adiw	r28, 0x07	; 7
    348a:	0f b6       	in	r0, 0x3f	; 63
    348c:	f8 94       	cli
    348e:	de bf       	out	0x3e, r29	; 62
    3490:	0f be       	out	0x3f, r0	; 63
    3492:	cd bf       	out	0x3d, r28	; 61
    3494:	df 91       	pop	r29
    3496:	cf 91       	pop	r28
    3498:	1f 91       	pop	r17
    349a:	0f 91       	pop	r16
    349c:	ff 90       	pop	r15
    349e:	ef 90       	pop	r14
    34a0:	df 90       	pop	r13
    34a2:	08 95       	ret

Disassembly of section .text.SDGoIdle:

00004c26 <SDGoIdle>:
			sizeof(uint32_t));
}

// SD - Go idle!
static uint8_t SDGoIdle(uint8_t *pu8Response)
{
    4c26:	cf 93       	push	r28
	uint8_t u8Response;
	
	SDSetCS(true);
    4c28:	81 e0       	ldi	r24, 0x01	; 1
    4c2a:	0e 94 c8 26 	call	0x4d90	; 0x4d90 <SDSetCS>
	
	// Send our CMD0 (go idle)
	u8Response = SDCommand(CMD0,
    4c2e:	40 e0       	ldi	r20, 0x00	; 0
    4c30:	50 e0       	ldi	r21, 0x00	; 0
    4c32:	ba 01       	movw	r22, r20
    4c34:	80 e0       	ldi	r24, 0x00	; 0
    4c36:	0e 94 fd 19 	call	0x33fa	; 0x33fa <SDCommand>
    4c3a:	c8 2f       	mov	r28, r24
						   CMD0_ARG);
						   
	SDSetCS(false);
    4c3c:	80 e0       	ldi	r24, 0x00	; 0
    4c3e:	0e 94 c8 26 	call	0x4d90	; 0x4d90 <SDSetCS>

	return(u8Response);
}
    4c42:	8c 2f       	mov	r24, r28
    4c44:	cf 91       	pop	r28
    4c46:	08 95       	ret

Disassembly of section .text.SDSendOpCondition:

0000463c <SDSendOpCondition>:
#define ACMD41_CRC  0x00

// Send operation condition
static uint8_t SDSendOpCondition(uint8_t *pu8Response,
								 uint32_t u32Arg)
{
    463c:	cf 92       	push	r12
    463e:	df 92       	push	r13
    4640:	ef 92       	push	r14
    4642:	ff 92       	push	r15
    4644:	cf 93       	push	r28
    4646:	6a 01       	movw	r12, r20
    4648:	7b 01       	movw	r14, r22
	uint8_t u8Response;
	
	// Assert chip select
	SDSetCS(true);
    464a:	81 e0       	ldi	r24, 0x01	; 1
    464c:	0e 94 c8 26 	call	0x4d90	; 0x4d90 <SDSetCS>
	
	// Send the app command
	u8Response = SDCommand(ACMD41,
    4650:	b7 01       	movw	r22, r14
    4652:	a6 01       	movw	r20, r12
    4654:	89 ea       	ldi	r24, 0xA9	; 169
    4656:	0e 94 fd 19 	call	0x33fa	; 0x33fa <SDCommand>
    465a:	c8 2f       	mov	r28, r24
						   u32Arg);
	// Deassert chip select
	SDSetCS(false);
    465c:	80 e0       	ldi	r24, 0x00	; 0
    465e:	0e 94 c8 26 	call	0x4d90	; 0x4d90 <SDSetCS>
	
	return(u8Response);
}
    4662:	8c 2f       	mov	r24, r28
    4664:	cf 91       	pop	r28
    4666:	ff 90       	pop	r15
    4668:	ef 90       	pop	r14
    466a:	df 90       	pop	r13
    466c:	cf 90       	pop	r12
    466e:	08 95       	ret

Disassembly of section .text.SDSendOpConditionArg:

000040b4 <SDSendOpConditionArg>:
	return(u8Response);
}

static uint8_t SDSendOpConditionArg(uint8_t *pu8Resp,
									uint32_t u32Arg)
{
    40b4:	cf 92       	push	r12
    40b6:	df 92       	push	r13
    40b8:	ef 92       	push	r14
    40ba:	ff 92       	push	r15
    40bc:	0f 93       	push	r16
    40be:	1f 93       	push	r17
    40c0:	cf 93       	push	r28
    40c2:	df 93       	push	r29
    40c4:	8c 01       	movw	r16, r24
    40c6:	6a 01       	movw	r12, r20
    40c8:	7b 01       	movw	r14, r22
	uint8_t u8Attempts;
	uint8_t u8Response;
	
	u8Attempts = 0;
    40ca:	c0 e0       	ldi	r28, 0x00	; 0
		
	// Loop until it comes alive - if it comes alive. Put the card in idle state.
	while (u8Attempts < SD_GO_IDLE_RETRIES)
    40cc:	0f c0       	rjmp	.+30     	; 0x40ec <SDSendOpConditionArg+0x38>
	{
		u8Response = SDSendOpCondition(pu8Resp,
    40ce:	b7 01       	movw	r22, r14
    40d0:	a6 01       	movw	r20, r12
    40d2:	c8 01       	movw	r24, r16
    40d4:	0e 94 1e 23 	call	0x463c	; 0x463c <SDSendOpCondition>
    40d8:	d8 2f       	mov	r29, r24
									   u32Arg);
		if (0 == u8Response)
    40da:	88 23       	and	r24, r24
    40dc:	49 f0       	breq	.+18     	; 0x40f0 <SDSendOpConditionArg+0x3c>
		{
			break;
		}
			
		// Give it a little time to settle
		Delay(10000);
    40de:	60 e1       	ldi	r22, 0x10	; 16
    40e0:	77 e2       	ldi	r23, 0x27	; 39
    40e2:	80 e0       	ldi	r24, 0x00	; 0
    40e4:	90 e0       	ldi	r25, 0x00	; 0
    40e6:	0e 94 2f 21 	call	0x425e	; 0x425e <Delay>
		u8Attempts++;
    40ea:	cf 5f       	subi	r28, 0xFF	; 255
	uint8_t u8Response;
	
	u8Attempts = 0;
		
	// Loop until it comes alive - if it comes alive. Put the card in idle state.
	while (u8Attempts < SD_GO_IDLE_RETRIES)
    40ec:	c4 36       	cpi	r28, 0x64	; 100
    40ee:	78 f3       	brcs	.-34     	; 0x40ce <SDSendOpConditionArg+0x1a>
		Delay(10000);
		u8Attempts++;
	}

	// If we've retried too much, bail out. We're done.
	if (SD_GO_IDLE_RETRIES == u8Attempts)
    40f0:	c4 36       	cpi	r28, 0x64	; 100
    40f2:	09 f4       	brne	.+2      	; 0x40f6 <SDSendOpConditionArg+0x42>
	{
		u8Response = 0x80;
    40f4:	d0 e8       	ldi	r29, 0x80	; 128
	}
	
	return(u8Response);
}
    40f6:	8d 2f       	mov	r24, r29
    40f8:	df 91       	pop	r29
    40fa:	cf 91       	pop	r28
    40fc:	1f 91       	pop	r17
    40fe:	0f 91       	pop	r16
    4100:	ff 90       	pop	r15
    4102:	ef 90       	pop	r14
    4104:	df 90       	pop	r13
    4106:	cf 90       	pop	r12
    4108:	08 95       	ret

Disassembly of section .text.SDWaitResponse7:

00004e5a <SDWaitResponse7>:

// This will return true if a response 7 was received, otherwise false
static void SDWaitResponse7(uint8_t *pu8ResponseByte)
{
	// Go read the remaining 4 bytes
	SPIRead(pu8ResponseByte,
    4e5a:	44 e0       	ldi	r20, 0x04	; 4
    4e5c:	50 e0       	ldi	r21, 0x00	; 0
    4e5e:	bc 01       	movw	r22, r24
    4e60:	83 e0       	ldi	r24, 0x03	; 3
    4e62:	0e 94 02 20 	call	0x4004	; 0x4004 <SPITransaction>
    4e66:	08 95       	ret

Disassembly of section .text.SDSendInterfaceCondition:

00004670 <SDSendInterfaceCondition>:
	return(u8Response);
}

// Send interface condition
static uint8_t SDSendInterfaceCondition(uint8_t *pu8Response)
{
    4670:	0f 93       	push	r16
    4672:	1f 93       	push	r17
    4674:	cf 93       	push	r28
    4676:	8c 01       	movw	r16, r24
	uint8_t u8Response;
	
	SDSetCS(true);
    4678:	81 e0       	ldi	r24, 0x01	; 1
    467a:	0e 94 c8 26 	call	0x4d90	; 0x4d90 <SDSetCS>
	
	// Send our CMD8 Send interface condition
	u8Response = SDCommand(CMD8,
    467e:	4a ea       	ldi	r20, 0xAA	; 170
    4680:	51 e0       	ldi	r21, 0x01	; 1
    4682:	60 e0       	ldi	r22, 0x00	; 0
    4684:	70 e0       	ldi	r23, 0x00	; 0
    4686:	88 e0       	ldi	r24, 0x08	; 8
    4688:	0e 94 fd 19 	call	0x33fa	; 0x33fa <SDCommand>
    468c:	c8 2f       	mov	r28, r24
						   CMD8_ARG);
						   
	SDWaitResponse7(pu8Response);
    468e:	c8 01       	movw	r24, r16
    4690:	0e 94 2d 27 	call	0x4e5a	; 0x4e5a <SDWaitResponse7>
		
	SDSetCS(false);
    4694:	80 e0       	ldi	r24, 0x00	; 0
    4696:	0e 94 c8 26 	call	0x4d90	; 0x4d90 <SDSetCS>

	return(u8Response);
}
    469a:	8c 2f       	mov	r24, r28
    469c:	cf 91       	pop	r28
    469e:	1f 91       	pop	r17
    46a0:	0f 91       	pop	r16
    46a2:	08 95       	ret

Disassembly of section .text.SDReadOCR:

000046a4 <SDReadOCR>:
#define CMD58_ARG   0x00000000
#define CMD58_CRC   0x00

// Go read the OCR
static uint8_t SDReadOCR(uint8_t *pu8Response)
{
    46a4:	0f 93       	push	r16
    46a6:	1f 93       	push	r17
    46a8:	cf 93       	push	r28
    46aa:	8c 01       	movw	r16, r24
	uint8_t u8Response;
	
	// Assert chip select
	SDSetCS(true);
    46ac:	81 e0       	ldi	r24, 0x01	; 1
    46ae:	0e 94 c8 26 	call	0x4d90	; 0x4d90 <SDSetCS>
	
	// Send the app command
	u8Response = SDCommand(CMD58,
    46b2:	40 e0       	ldi	r20, 0x00	; 0
    46b4:	50 e0       	ldi	r21, 0x00	; 0
    46b6:	ba 01       	movw	r22, r20
    46b8:	8a e3       	ldi	r24, 0x3A	; 58
    46ba:	0e 94 fd 19 	call	0x33fa	; 0x33fa <SDCommand>
    46be:	c8 2f       	mov	r28, r24
						   CMD58_ARG);

	// Read response
	SDWaitResponse7(pu8Response);
    46c0:	c8 01       	movw	r24, r16
    46c2:	0e 94 2d 27 	call	0x4e5a	; 0x4e5a <SDWaitResponse7>

	// Deassert chip select
	SDSetCS(false);
    46c6:	80 e0       	ldi	r24, 0x00	; 0
    46c8:	0e 94 c8 26 	call	0x4d90	; 0x4d90 <SDSetCS>
	
	return(u8Response);
}
    46cc:	8c 2f       	mov	r24, r28
    46ce:	cf 91       	pop	r28
    46d0:	1f 91       	pop	r17
    46d2:	0f 91       	pop	r16
    46d4:	08 95       	ret

Disassembly of section .text.SDReadCSD:

00003bb8 <SDReadCSD>:
#define CMD9_ARG    0x000000000
#define CMD9_CRC    0x00

// Read CSD (card specific data) - CSD is 128 bits - see the SD spec for details.
static uint8_t SDReadCSD(uint8_t *pu8CSD)
{
    3bb8:	ef 92       	push	r14
    3bba:	ff 92       	push	r15
    3bbc:	0f 93       	push	r16
    3bbe:	1f 93       	push	r17
    3bc0:	cf 93       	push	r28
    3bc2:	df 93       	push	r29
    3bc4:	0f 92       	push	r0
    3bc6:	cd b7       	in	r28, 0x3d	; 61
    3bc8:	de b7       	in	r29, 0x3e	; 62
    3bca:	7c 01       	movw	r14, r24
	uint8_t u8Response;
	uint8_t u8CmdResponse;
	uint8_t u8Count = 8;
	
	SDSetCS(true);
    3bcc:	81 e0       	ldi	r24, 0x01	; 1
    3bce:	0e 94 c8 26 	call	0x4d90	; 0x4d90 <SDSetCS>
	
	// Send our CMD9 (read CSD)
	u8CmdResponse = SDCommand(CMD9,
    3bd2:	40 e0       	ldi	r20, 0x00	; 0
    3bd4:	50 e0       	ldi	r21, 0x00	; 0
    3bd6:	ba 01       	movw	r22, r20
    3bd8:	89 e0       	ldi	r24, 0x09	; 9
    3bda:	0e 94 fd 19 	call	0x33fa	; 0x33fa <SDCommand>
    3bde:	08 2f       	mov	r16, r24
							  CMD9_ARG);
	
	// Success! Let's get a response
	if (u8CmdResponse)
    3be0:	81 11       	cpse	r24, r1
    3be2:	1c c0       	rjmp	.+56     	; 0x3c1c <SDReadCSD+0x64>
    3be4:	18 e0       	ldi	r17, 0x08	; 8
    3be6:	01 c0       	rjmp	.+2      	; 0x3bea <SDReadCSD+0x32>
	do 
	{
		SPIRead(&u8Response,
			    sizeof(u8Response));
	} while ((u8Response != SD_START_TOKEN) &&
			 (u8Count--));
    3be8:	18 2f       	mov	r17, r24
	}
	
	// Wait until SD_START_TOKEN (start of data sector). We should easily see it in a few bytes.
	do 
	{
		SPIRead(&u8Response,
    3bea:	41 e0       	ldi	r20, 0x01	; 1
    3bec:	50 e0       	ldi	r21, 0x00	; 0
    3bee:	be 01       	movw	r22, r28
    3bf0:	6f 5f       	subi	r22, 0xFF	; 255
    3bf2:	7f 4f       	sbci	r23, 0xFF	; 255
    3bf4:	83 e0       	ldi	r24, 0x03	; 3
    3bf6:	0e 94 02 20 	call	0x4004	; 0x4004 <SPITransaction>
			    sizeof(u8Response));
	} while ((u8Response != SD_START_TOKEN) &&
    3bfa:	89 81       	ldd	r24, Y+1	; 0x01
			 (u8Count--));
    3bfc:	8e 3f       	cpi	r24, 0xFE	; 254
    3bfe:	29 f0       	breq	.+10     	; 0x3c0a <SDReadCSD+0x52>
    3c00:	8f ef       	ldi	r24, 0xFF	; 255
    3c02:	81 0f       	add	r24, r17
	// Wait until SD_START_TOKEN (start of data sector). We should easily see it in a few bytes.
	do 
	{
		SPIRead(&u8Response,
			    sizeof(u8Response));
	} while ((u8Response != SD_START_TOKEN) &&
    3c04:	11 11       	cpse	r17, r1
    3c06:	f0 cf       	rjmp	.-32     	; 0x3be8 <SDReadCSD+0x30>
    3c08:	01 c0       	rjmp	.+2      	; 0x3c0c <SDReadCSD+0x54>
    3c0a:	81 2f       	mov	r24, r17
			 (u8Count--));
			 
	// If we haven't seen it in u8Count bytes, then error the call
	if (0 == u8Count)
    3c0c:	88 23       	and	r24, r24
    3c0e:	31 f0       	breq	.+12     	; 0x3c1c <SDReadCSD+0x64>
	{
		goto errorExit;
	}
	
	// Go read the remaining 16 bytes
	SPIRead(pu8CSD,
    3c10:	40 e1       	ldi	r20, 0x10	; 16
    3c12:	50 e0       	ldi	r21, 0x00	; 0
    3c14:	b7 01       	movw	r22, r14
    3c16:	83 e0       	ldi	r24, 0x03	; 3
    3c18:	0e 94 02 20 	call	0x4004	; 0x4004 <SPITransaction>
		    16);
	
errorExit:	
	SDSetCS(false);
    3c1c:	80 e0       	ldi	r24, 0x00	; 0
    3c1e:	0e 94 c8 26 	call	0x4d90	; 0x4d90 <SDSetCS>
	return(u8CmdResponse);
	
}
    3c22:	80 2f       	mov	r24, r16
    3c24:	0f 90       	pop	r0
    3c26:	df 91       	pop	r29
    3c28:	cf 91       	pop	r28
    3c2a:	1f 91       	pop	r17
    3c2c:	0f 91       	pop	r16
    3c2e:	ff 90       	pop	r15
    3c30:	ef 90       	pop	r14
    3c32:	08 95       	ret

Disassembly of section .text.SDReceiveDataBlock:

000037a0 <SDReceiveDataBlock>:
}

// Receives a datablock during the data phase which may take some time
static bool SDReceiveDataBlock(uint8_t *pu8Buffer,
							   uint16_t u16RXCount)
{
    37a0:	cf 92       	push	r12
    37a2:	df 92       	push	r13
    37a4:	ef 92       	push	r14
    37a6:	ff 92       	push	r15
    37a8:	0f 93       	push	r16
    37aa:	1f 93       	push	r17
    37ac:	cf 93       	push	r28
    37ae:	df 93       	push	r29
    37b0:	0f 92       	push	r0
    37b2:	cd b7       	in	r28, 0x3d	; 61
    37b4:	de b7       	in	r29, 0x3e	; 62
    37b6:	7c 01       	movw	r14, r24
    37b8:	6b 01       	movw	r12, r22
	uint8_t u8Response;
	uint16_t u16Count = 4096;
    37ba:	00 e0       	ldi	r16, 0x00	; 0
    37bc:	10 e1       	ldi	r17, 0x10	; 16
    37be:	01 c0       	rjmp	.+2      	; 0x37c2 <SDReceiveDataBlock+0x22>
	{
		SPIRead(&u8Response,
				sizeof(u8Response));
	} 
	while ((u8Response != SD_START_TOKEN) &&
		   (u16Count--));
    37c0:	89 01       	movw	r16, r18
	uint16_t u16Count = 4096;
	
	// Wait for response token
	do 
	{
		SPIRead(&u8Response,
    37c2:	41 e0       	ldi	r20, 0x01	; 1
    37c4:	50 e0       	ldi	r21, 0x00	; 0
    37c6:	be 01       	movw	r22, r28
    37c8:	6f 5f       	subi	r22, 0xFF	; 255
    37ca:	7f 4f       	sbci	r23, 0xFF	; 255
    37cc:	83 e0       	ldi	r24, 0x03	; 3
    37ce:	0e 94 02 20 	call	0x4004	; 0x4004 <SPITransaction>
				sizeof(u8Response));
	} 
	while ((u8Response != SD_START_TOKEN) &&
    37d2:	89 81       	ldd	r24, Y+1	; 0x01
		   (u16Count--));
    37d4:	8e 3f       	cpi	r24, 0xFE	; 254
    37d6:	29 f0       	breq	.+10     	; 0x37e2 <SDReceiveDataBlock+0x42>
    37d8:	98 01       	movw	r18, r16
    37da:	21 50       	subi	r18, 0x01	; 1
    37dc:	31 09       	sbc	r19, r1
	do 
	{
		SPIRead(&u8Response,
				sizeof(u8Response));
	} 
	while ((u8Response != SD_START_TOKEN) &&
    37de:	01 2b       	or	r16, r17
    37e0:	79 f7       	brne	.-34     	; 0x37c0 <SDReceiveDataBlock+0x20>
		   (u16Count--));
		   
	if (u8Response != SD_START_TOKEN)
    37e2:	8e 3f       	cpi	r24, 0xFE	; 254
    37e4:	b9 f4       	brne	.+46     	; 0x3814 <SDReceiveDataBlock+0x74>
	{
		return(false);
	}
	
	// Start of data. Pull it down.
	SPIRead(pu8Buffer,
    37e6:	a6 01       	movw	r20, r12
    37e8:	b7 01       	movw	r22, r14
    37ea:	83 e0       	ldi	r24, 0x03	; 3
    37ec:	0e 94 02 20 	call	0x4004	; 0x4004 <SPITransaction>
			u16RXCount);
			
	// Discard CRC
	SPIRead(&u8Response,
    37f0:	41 e0       	ldi	r20, 0x01	; 1
    37f2:	50 e0       	ldi	r21, 0x00	; 0
    37f4:	be 01       	movw	r22, r28
    37f6:	6f 5f       	subi	r22, 0xFF	; 255
    37f8:	7f 4f       	sbci	r23, 0xFF	; 255
    37fa:	83 e0       	ldi	r24, 0x03	; 3
    37fc:	0e 94 02 20 	call	0x4004	; 0x4004 <SPITransaction>
			sizeof(u8Response));
	SPIRead(&u8Response,
    3800:	41 e0       	ldi	r20, 0x01	; 1
    3802:	50 e0       	ldi	r21, 0x00	; 0
    3804:	be 01       	movw	r22, r28
    3806:	6f 5f       	subi	r22, 0xFF	; 255
    3808:	7f 4f       	sbci	r23, 0xFF	; 255
    380a:	83 e0       	ldi	r24, 0x03	; 3
    380c:	0e 94 02 20 	call	0x4004	; 0x4004 <SPITransaction>
			sizeof(u8Response));
	return(true);			   
    3810:	81 e0       	ldi	r24, 0x01	; 1
    3812:	01 c0       	rjmp	.+2      	; 0x3816 <SDReceiveDataBlock+0x76>
	while ((u8Response != SD_START_TOKEN) &&
		   (u16Count--));
		   
	if (u8Response != SD_START_TOKEN)
	{
		return(false);
    3814:	80 e0       	ldi	r24, 0x00	; 0
	SPIRead(&u8Response,
			sizeof(u8Response));
	SPIRead(&u8Response,
			sizeof(u8Response));
	return(true);			   
}
    3816:	0f 90       	pop	r0
    3818:	df 91       	pop	r29
    381a:	cf 91       	pop	r28
    381c:	1f 91       	pop	r17
    381e:	0f 91       	pop	r16
    3820:	ff 90       	pop	r15
    3822:	ef 90       	pop	r14
    3824:	df 90       	pop	r13
    3826:	cf 90       	pop	r12
    3828:	08 95       	ret

Disassembly of section .text.SDTransmitDataBlock:

000031c2 <SDTransmitDataBlock>:

// Transmits a datablock during the data phase which may take some time
static bool SDTransmitDataBlock(uint8_t *pu8Buffer,
							    uint16_t u16TXCount,
								uint8_t u8DataPhaseToken)
{
    31c2:	ef 92       	push	r14
    31c4:	ff 92       	push	r15
    31c6:	0f 93       	push	r16
    31c8:	1f 93       	push	r17
    31ca:	cf 93       	push	r28
    31cc:	df 93       	push	r29
    31ce:	00 d0       	rcall	.+0      	; 0x31d0 <SDTransmitDataBlock+0xe>
    31d0:	cd b7       	in	r28, 0x3d	; 61
    31d2:	de b7       	in	r29, 0x3e	; 62
    31d4:	8c 01       	movw	r16, r24
    31d6:	7b 01       	movw	r14, r22
    31d8:	4a 83       	std	Y+2, r20	; 0x02
	uint8_t u8Response;
	uint16_t u16Attempts;
	bool bResult = true;

	// Send the data phase token (whatever it is)
	SPIWrite(&u8DataPhaseToken,
    31da:	41 e0       	ldi	r20, 0x01	; 1
    31dc:	50 e0       	ldi	r21, 0x00	; 0
    31de:	be 01       	movw	r22, r28
    31e0:	6e 5f       	subi	r22, 0xFE	; 254
    31e2:	7f 4f       	sbci	r23, 0xFF	; 255
    31e4:	81 e0       	ldi	r24, 0x01	; 1
    31e6:	0e 94 02 20 	call	0x4004	; 0x4004 <SPITransaction>
			 sizeof(u8DataPhaseToken));
	
	if (u8DataPhaseToken != SD_STOP_TRANSACTION)
    31ea:	8a 81       	ldd	r24, Y+2	; 0x02
    31ec:	8d 3f       	cpi	r24, 0xFD	; 253
    31ee:	e1 f1       	breq	.+120    	; 0x3268 <SDTransmitDataBlock+0xa6>
	{
		// As long as we're not stopping a transaction, we're writing data
		SPIWrite(pu8Buffer,
    31f0:	a7 01       	movw	r20, r14
    31f2:	b8 01       	movw	r22, r16
    31f4:	81 e0       	ldi	r24, 0x01	; 1
    31f6:	0e 94 02 20 	call	0x4004	; 0x4004 <SPITransaction>
				 u16TXCount);
				 
		// Wait for acceptance of the sector
		u16Attempts = 0;
    31fa:	00 e0       	ldi	r16, 0x00	; 0
    31fc:	10 e0       	ldi	r17, 0x00	; 0
		while (u16Attempts < SD_MAX_WRITE_ATTEMPTS)
    31fe:	0d c0       	rjmp	.+26     	; 0x321a <SDTransmitDataBlock+0x58>
		{
			// Get some data
			SPIRead(&u8Response,
    3200:	41 e0       	ldi	r20, 0x01	; 1
    3202:	50 e0       	ldi	r21, 0x00	; 0
    3204:	be 01       	movw	r22, r28
    3206:	6f 5f       	subi	r22, 0xFF	; 255
    3208:	7f 4f       	sbci	r23, 0xFF	; 255
    320a:	83 e0       	ldi	r24, 0x03	; 3
    320c:	0e 94 02 20 	call	0x4004	; 0x4004 <SPITransaction>
					sizeof(u8Response));
			if (u8Response != 0xff)
    3210:	89 81       	ldd	r24, Y+1	; 0x01
    3212:	8f 3f       	cpi	r24, 0xFF	; 255
    3214:	31 f4       	brne	.+12     	; 0x3222 <SDTransmitDataBlock+0x60>
			{
				break;
			}
				
			++u16Attempts;
    3216:	0f 5f       	subi	r16, 0xFF	; 255
    3218:	1f 4f       	sbci	r17, 0xFF	; 255
		SPIWrite(pu8Buffer,
				 u16TXCount);
				 
		// Wait for acceptance of the sector
		u16Attempts = 0;
		while (u16Attempts < SD_MAX_WRITE_ATTEMPTS)
    321a:	0e 39       	cpi	r16, 0x9E	; 158
    321c:	88 e9       	ldi	r24, 0x98	; 152
    321e:	18 07       	cpc	r17, r24
    3220:	78 f3       	brcs	.-34     	; 0x3200 <SDTransmitDataBlock+0x3e>
				
			++u16Attempts;
		}
			
		// We've timed out or else the card is dead
		if (SD_MAX_WRITE_ATTEMPTS == u16Attempts)
    3222:	0e 39       	cpi	r16, 0x9E	; 158
    3224:	18 49       	sbci	r17, 0x98	; 152
    3226:	11 f1       	breq	.+68     	; 0x326c <SDTransmitDataBlock+0xaa>
			bResult = false;
			goto errorExit;
		}
			
		// See if the data was accepted
		u8Response &= 0x1f;
    3228:	89 81       	ldd	r24, Y+1	; 0x01
    322a:	8f 71       	andi	r24, 0x1F	; 31
    322c:	89 83       	std	Y+1, r24	; 0x01
		if (0x05 == u8Response)
    322e:	85 30       	cpi	r24, 0x05	; 5
    3230:	81 f0       	breq	.+32     	; 0x3252 <SDTransmitDataBlock+0x90>
			// Success!
		}
		else
		{
			// Sector not accepted
			bResult = false;
    3232:	80 e0       	ldi	r24, 0x00	; 0
    3234:	1e c0       	rjmp	.+60     	; 0x3272 <SDTransmitDataBlock+0xb0>
			// Wait for the write to finish
			u16Attempts = 0;
			while (u16Attempts < SD_MAX_WRITE_ATTEMPTS)
			{
				// Wait for the card to accept writing the sector
				SPIRead(&u8Response,
    3236:	41 e0       	ldi	r20, 0x01	; 1
    3238:	50 e0       	ldi	r21, 0x00	; 0
    323a:	be 01       	movw	r22, r28
    323c:	6f 5f       	subi	r22, 0xFF	; 255
    323e:	7f 4f       	sbci	r23, 0xFF	; 255
    3240:	83 e0       	ldi	r24, 0x03	; 3
    3242:	0e 94 02 20 	call	0x4004	; 0x4004 <SPITransaction>
						sizeof(u8Response));
				if (u8Response)
    3246:	89 81       	ldd	r24, Y+1	; 0x01
    3248:	81 11       	cpse	r24, r1
    324a:	09 c0       	rjmp	.+18     	; 0x325e <SDTransmitDataBlock+0x9c>
				{
					break;
				}
					
				++u16Attempts;
    324c:	0f 5f       	subi	r16, 0xFF	; 255
    324e:	1f 4f       	sbci	r17, 0xFF	; 255
    3250:	02 c0       	rjmp	.+4      	; 0x3256 <SDTransmitDataBlock+0x94>
    3252:	00 e0       	ldi	r16, 0x00	; 0
    3254:	10 e0       	ldi	r17, 0x00	; 0
		u8Response &= 0x1f;
		if (0x05 == u8Response)
		{
			// Wait for the write to finish
			u16Attempts = 0;
			while (u16Attempts < SD_MAX_WRITE_ATTEMPTS)
    3256:	0e 39       	cpi	r16, 0x9E	; 158
    3258:	88 e9       	ldi	r24, 0x98	; 152
    325a:	18 07       	cpc	r17, r24
    325c:	60 f3       	brcs	.-40     	; 0x3236 <SDTransmitDataBlock+0x74>
				}
					
				++u16Attempts;
			}
				
			if (SD_MAX_WRITE_ATTEMPTS == u16Attempts)
    325e:	0e 39       	cpi	r16, 0x9E	; 158
    3260:	18 49       	sbci	r17, 0x98	; 152
    3262:	31 f0       	breq	.+12     	; 0x3270 <SDTransmitDataBlock+0xae>
							    uint16_t u16TXCount,
								uint8_t u8DataPhaseToken)
{
	uint8_t u8Response;
	uint16_t u16Attempts;
	bool bResult = true;
    3264:	81 e0       	ldi	r24, 0x01	; 1
    3266:	05 c0       	rjmp	.+10     	; 0x3272 <SDTransmitDataBlock+0xb0>
    3268:	81 e0       	ldi	r24, 0x01	; 1
    326a:	03 c0       	rjmp	.+6      	; 0x3272 <SDTransmitDataBlock+0xb0>
		}
			
		// We've timed out or else the card is dead
		if (SD_MAX_WRITE_ATTEMPTS == u16Attempts)
		{
			bResult = false;
    326c:	80 e0       	ldi	r24, 0x00	; 0
    326e:	01 c0       	rjmp	.+2      	; 0x3272 <SDTransmitDataBlock+0xb0>
				++u16Attempts;
			}
				
			if (SD_MAX_WRITE_ATTEMPTS == u16Attempts)
			{
				bResult = false;
    3270:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	
errorExit:
	return(bResult);
}
    3272:	0f 90       	pop	r0
    3274:	0f 90       	pop	r0
    3276:	df 91       	pop	r29
    3278:	cf 91       	pop	r28
    327a:	1f 91       	pop	r17
    327c:	0f 91       	pop	r16
    327e:	ff 90       	pop	r15
    3280:	ef 90       	pop	r14
    3282:	08 95       	ret

Disassembly of section .text.SDInit:

000021a8 <SDInit>:

bool SDGetBlockSize(uint32_t *pu32BlockSize)
{
	*pu32BlockSize = sg_u16BlockSize;
	return(true);
}
    21a8:	1f 93       	push	r17
    21aa:	cf 93       	push	r28
    21ac:	df 93       	push	r29
    21ae:	00 d0       	rcall	.+0      	; 0x21b0 <SDInit+0x8>
    21b0:	00 d0       	rcall	.+0      	; 0x21b2 <SDInit+0xa>
    21b2:	0f 92       	push	r0
    21b4:	cd b7       	in	r28, 0x3d	; 61
    21b6:	de b7       	in	r29, 0x3e	; 62
    21b8:	87 b1       	in	r24, 0x07	; 7
    21ba:	80 64       	ori	r24, 0x40	; 64
    21bc:	87 b9       	out	0x07, r24	; 7
    21be:	88 b1       	in	r24, 0x08	; 8
    21c0:	80 64       	ori	r24, 0x40	; 64
    21c2:	88 b9       	out	0x08, r24	; 8
    21c4:	88 b1       	in	r24, 0x08	; 8
    21c6:	80 64       	ori	r24, 0x40	; 64
    21c8:	88 b9       	out	0x08, r24	; 8
    21ca:	0e 94 f6 23 	call	0x47ec	; 0x47ec <SPIInit>
    21ce:	0e 94 95 22 	call	0x452a	; 0x452a <SDPowerup>
    21d2:	10 e0       	ldi	r17, 0x00	; 0
    21d4:	0d c0       	rjmp	.+26     	; 0x21f0 <SDInit+0x48>
    21d6:	ce 01       	movw	r24, r28
    21d8:	01 96       	adiw	r24, 0x01	; 1
    21da:	0e 94 13 26 	call	0x4c26	; 0x4c26 <SDGoIdle>
    21de:	81 30       	cpi	r24, 0x01	; 1
    21e0:	49 f0       	breq	.+18     	; 0x21f4 <SDInit+0x4c>
    21e2:	60 e1       	ldi	r22, 0x10	; 16
    21e4:	77 e2       	ldi	r23, 0x27	; 39
    21e6:	80 e0       	ldi	r24, 0x00	; 0
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	0e 94 2f 21 	call	0x425e	; 0x425e <Delay>
    21ee:	1f 5f       	subi	r17, 0xFF	; 255
    21f0:	14 36       	cpi	r17, 0x64	; 100
    21f2:	88 f3       	brcs	.-30     	; 0x21d6 <SDInit+0x2e>
    21f4:	14 36       	cpi	r17, 0x64	; 100
    21f6:	09 f4       	brne	.+2      	; 0x21fa <SDInit+0x52>
    21f8:	76 c0       	rjmp	.+236    	; 0x22e6 <SDInit+0x13e>
    21fa:	ce 01       	movw	r24, r28
    21fc:	01 96       	adiw	r24, 0x01	; 1
    21fe:	25 e0       	ldi	r18, 0x05	; 5
    2200:	fc 01       	movw	r30, r24
    2202:	11 92       	st	Z+, r1
    2204:	2a 95       	dec	r18
    2206:	e9 f7       	brne	.-6      	; 0x2202 <SDInit+0x5a>
    2208:	0e 94 38 23 	call	0x4670	; 0x4670 <SDSendInterfaceCondition>
    220c:	81 30       	cpi	r24, 0x01	; 1
    220e:	09 f0       	breq	.+2      	; 0x2212 <SDInit+0x6a>
    2210:	5e c0       	rjmp	.+188    	; 0x22ce <SDInit+0x126>
    2212:	8c 81       	ldd	r24, Y+4	; 0x04
    2214:	8a 3a       	cpi	r24, 0xAA	; 170
    2216:	09 f0       	breq	.+2      	; 0x221a <SDInit+0x72>
    2218:	68 c0       	rjmp	.+208    	; 0x22ea <SDInit+0x142>
    221a:	40 e0       	ldi	r20, 0x00	; 0
    221c:	50 e0       	ldi	r21, 0x00	; 0
    221e:	60 e0       	ldi	r22, 0x00	; 0
    2220:	70 e4       	ldi	r23, 0x40	; 64
    2222:	ce 01       	movw	r24, r28
    2224:	01 96       	adiw	r24, 0x01	; 1
    2226:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <SDSendOpConditionArg>
    222a:	81 11       	cpse	r24, r1
    222c:	60 c0       	rjmp	.+192    	; 0x22ee <SDInit+0x146>
    222e:	ce 01       	movw	r24, r28
    2230:	01 96       	adiw	r24, 0x01	; 1
    2232:	0e 94 52 23 	call	0x46a4	; 0x46a4 <SDReadOCR>
    2236:	88 23       	and	r24, r24
    2238:	0c f4       	brge	.+2      	; 0x223c <SDInit+0x94>
    223a:	5b c0       	rjmp	.+182    	; 0x22f2 <SDInit+0x14a>
    223c:	8d e2       	ldi	r24, 0x2D	; 45
    223e:	99 e0       	ldi	r25, 0x09	; 9
    2240:	0e 94 dc 1d 	call	0x3bb8	; 0x3bb8 <SDReadCSD>
    2244:	88 23       	and	r24, r24
    2246:	0c f4       	brge	.+2      	; 0x224a <SDInit+0xa2>
    2248:	56 c0       	rjmp	.+172    	; 0x22f6 <SDInit+0x14e>
    224a:	ed e2       	ldi	r30, 0x2D	; 45
    224c:	f9 e0       	ldi	r31, 0x09	; 9
    224e:	87 81       	ldd	r24, Z+7	; 0x07
    2250:	8f 73       	andi	r24, 0x3F	; 63
    2252:	90 e0       	ldi	r25, 0x00	; 0
    2254:	a0 e0       	ldi	r26, 0x00	; 0
    2256:	b0 e0       	ldi	r27, 0x00	; 0
    2258:	bc 01       	movw	r22, r24
    225a:	55 27       	eor	r21, r21
    225c:	44 27       	eor	r20, r20
    225e:	90 85       	ldd	r25, Z+8	; 0x08
    2260:	89 2f       	mov	r24, r25
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	a0 e0       	ldi	r26, 0x00	; 0
    2266:	b0 e0       	ldi	r27, 0x00	; 0
    2268:	ba 2f       	mov	r27, r26
    226a:	a9 2f       	mov	r26, r25
    226c:	98 2f       	mov	r25, r24
    226e:	88 27       	eor	r24, r24
    2270:	84 2b       	or	r24, r20
    2272:	95 2b       	or	r25, r21
    2274:	a6 2b       	or	r26, r22
    2276:	b7 2b       	or	r27, r23
    2278:	21 85       	ldd	r18, Z+9	; 0x09
    227a:	82 2b       	or	r24, r18
    227c:	01 96       	adiw	r24, 0x01	; 1
    227e:	a1 1d       	adc	r26, r1
    2280:	b1 1d       	adc	r27, r1
    2282:	07 2e       	mov	r0, r23
    2284:	7a e0       	ldi	r23, 0x0A	; 10
    2286:	88 0f       	add	r24, r24
    2288:	99 1f       	adc	r25, r25
    228a:	aa 1f       	adc	r26, r26
    228c:	bb 1f       	adc	r27, r27
    228e:	7a 95       	dec	r23
    2290:	d1 f7       	brne	.-12     	; 0x2286 <SDInit+0xde>
    2292:	70 2d       	mov	r23, r0
    2294:	80 93 54 09 	sts	0x0954, r24	; 0x800954 <sg_u32SDSectorCount>
    2298:	90 93 55 09 	sts	0x0955, r25	; 0x800955 <sg_u32SDSectorCount+0x1>
    229c:	a0 93 56 09 	sts	0x0956, r26	; 0x800956 <sg_u32SDSectorCount+0x2>
    22a0:	b0 93 57 09 	sts	0x0957, r27	; 0x800957 <sg_u32SDSectorCount+0x3>
    22a4:	25 81       	ldd	r18, Z+5	; 0x05
    22a6:	2f 70       	andi	r18, 0x0F	; 15
    22a8:	81 e0       	ldi	r24, 0x01	; 1
    22aa:	90 e0       	ldi	r25, 0x00	; 0
    22ac:	02 c0       	rjmp	.+4      	; 0x22b2 <SDInit+0x10a>
    22ae:	88 0f       	add	r24, r24
    22b0:	99 1f       	adc	r25, r25
    22b2:	2a 95       	dec	r18
    22b4:	e2 f7       	brpl	.-8      	; 0x22ae <SDInit+0x106>
    22b6:	90 93 5f 09 	sts	0x095F, r25	; 0x80095f <sg_u16BlockSize+0x1>
    22ba:	80 93 5e 09 	sts	0x095E, r24	; 0x80095e <sg_u16BlockSize>
    22be:	60 ec       	ldi	r22, 0xC0	; 192
    22c0:	78 ed       	ldi	r23, 0xD8	; 216
    22c2:	87 ea       	ldi	r24, 0xA7	; 167
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	0e 94 53 17 	call	0x2ea6	; 0x2ea6 <SPISetBaudRate>
    22ca:	81 e0       	ldi	r24, 0x01	; 1
    22cc:	17 c0       	rjmp	.+46     	; 0x22fc <SDInit+0x154>
    22ce:	40 e0       	ldi	r20, 0x00	; 0
    22d0:	50 e0       	ldi	r21, 0x00	; 0
    22d2:	60 e0       	ldi	r22, 0x00	; 0
    22d4:	70 e4       	ldi	r23, 0x40	; 64
    22d6:	ce 01       	movw	r24, r28
    22d8:	01 96       	adiw	r24, 0x01	; 1
    22da:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <SDSendOpConditionArg>
    22de:	81 11       	cpse	r24, r1
    22e0:	0c c0       	rjmp	.+24     	; 0x22fa <SDInit+0x152>
    22e2:	81 e0       	ldi	r24, 0x01	; 1
    22e4:	0b c0       	rjmp	.+22     	; 0x22fc <SDInit+0x154>
    22e6:	80 e0       	ldi	r24, 0x00	; 0
    22e8:	09 c0       	rjmp	.+18     	; 0x22fc <SDInit+0x154>
    22ea:	80 e0       	ldi	r24, 0x00	; 0
    22ec:	07 c0       	rjmp	.+14     	; 0x22fc <SDInit+0x154>
    22ee:	80 e0       	ldi	r24, 0x00	; 0
    22f0:	05 c0       	rjmp	.+10     	; 0x22fc <SDInit+0x154>
    22f2:	80 e0       	ldi	r24, 0x00	; 0
    22f4:	03 c0       	rjmp	.+6      	; 0x22fc <SDInit+0x154>
    22f6:	80 e0       	ldi	r24, 0x00	; 0
    22f8:	01 c0       	rjmp	.+2      	; 0x22fc <SDInit+0x154>
    22fa:	80 e0       	ldi	r24, 0x00	; 0
    22fc:	0f 90       	pop	r0
    22fe:	0f 90       	pop	r0
    2300:	0f 90       	pop	r0
    2302:	0f 90       	pop	r0
    2304:	0f 90       	pop	r0
    2306:	df 91       	pop	r29
    2308:	cf 91       	pop	r28
    230a:	1f 91       	pop	r17
    230c:	08 95       	ret

Disassembly of section .text.SDRead:

00002c2a <SDRead>:

// Read one or more sectors from SD
bool SDRead(uint32_t u32Sector,
			uint8_t *pu8Buffer,
			uint32_t u32SectorCount)
{
    2c2a:	8f 92       	push	r8
    2c2c:	9f 92       	push	r9
    2c2e:	af 92       	push	r10
    2c30:	bf 92       	push	r11
    2c32:	cf 92       	push	r12
    2c34:	df 92       	push	r13
    2c36:	ef 92       	push	r14
    2c38:	ff 92       	push	r15
    2c3a:	0f 93       	push	r16
    2c3c:	1f 93       	push	r17
    2c3e:	cf 93       	push	r28
    2c40:	df 93       	push	r29
    2c42:	4b 01       	movw	r8, r22
    2c44:	5c 01       	movw	r10, r24
    2c46:	ea 01       	movw	r28, r20
    2c48:	68 01       	movw	r12, r16
    2c4a:	79 01       	movw	r14, r18
	bool bResult = false;
	
	// Pet the watchdog
	WatchdogReset();
    2c4c:	0e 94 62 27 	call	0x4ec4	; 0x4ec4 <WatchdogReset>
		
	// Assert chip select
	SDSetCS(true);
    2c50:	81 e0       	ldi	r24, 0x01	; 1
    2c52:	0e 94 c8 26 	call	0x4d90	; 0x4d90 <SDSetCS>

	if (1 == u32SectorCount)
    2c56:	81 e0       	ldi	r24, 0x01	; 1
    2c58:	c8 16       	cp	r12, r24
    2c5a:	d1 04       	cpc	r13, r1
    2c5c:	e1 04       	cpc	r14, r1
    2c5e:	f1 04       	cpc	r15, r1
    2c60:	81 f4       	brne	.+32     	; 0x2c82 <SDRead+0x58>
	{
		if (0 == SDCommand(CMD17,
    2c62:	b5 01       	movw	r22, r10
    2c64:	a4 01       	movw	r20, r8
    2c66:	81 e1       	ldi	r24, 0x11	; 17
    2c68:	0e 94 fd 19 	call	0x33fa	; 0x33fa <SDCommand>
    2c6c:	81 11       	cpse	r24, r1
    2c6e:	35 c0       	rjmp	.+106    	; 0x2cda <SDRead+0xb0>
						   u32Sector))
		{
			bResult = SDReceiveDataBlock(pu8Buffer,
    2c70:	60 91 5e 09 	lds	r22, 0x095E	; 0x80095e <sg_u16BlockSize>
    2c74:	70 91 5f 09 	lds	r23, 0x095F	; 0x80095f <sg_u16BlockSize+0x1>
    2c78:	ce 01       	movw	r24, r28
    2c7a:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <SDReceiveDataBlock>
    2c7e:	18 2f       	mov	r17, r24
    2c80:	2f c0       	rjmp	.+94     	; 0x2ce0 <SDRead+0xb6>
		}
	}
	else
	{
		// Multisector
		if (0 == SDCommand(CMD18,
    2c82:	b5 01       	movw	r22, r10
    2c84:	a4 01       	movw	r20, r8
    2c86:	82 e1       	ldi	r24, 0x12	; 18
    2c88:	0e 94 fd 19 	call	0x33fa	; 0x33fa <SDCommand>
    2c8c:	88 23       	and	r24, r24
    2c8e:	19 f0       	breq	.+6      	; 0x2c96 <SDRead+0x6c>
    2c90:	26 c0       	rjmp	.+76     	; 0x2cde <SDRead+0xb4>
				WatchdogReset();
				
				pu8Buffer += sg_u16BlockSize;
			} 
			while ((bResult) &&
				   (u32SectorCount--));
    2c92:	6c 01       	movw	r12, r24
    2c94:	7d 01       	movw	r14, r26
		if (0 == SDCommand(CMD18,
						   u32Sector))
		{
			do 
			{
				bResult = SDReceiveDataBlock(pu8Buffer,
    2c96:	60 91 5e 09 	lds	r22, 0x095E	; 0x80095e <sg_u16BlockSize>
    2c9a:	70 91 5f 09 	lds	r23, 0x095F	; 0x80095f <sg_u16BlockSize+0x1>
    2c9e:	ce 01       	movw	r24, r28
    2ca0:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <SDReceiveDataBlock>
    2ca4:	18 2f       	mov	r17, r24
							 				 sg_u16BlockSize);
				// Pet the watchdog
				WatchdogReset();
    2ca6:	0e 94 62 27 	call	0x4ec4	; 0x4ec4 <WatchdogReset>
				
				pu8Buffer += sg_u16BlockSize;
    2caa:	80 91 5e 09 	lds	r24, 0x095E	; 0x80095e <sg_u16BlockSize>
    2cae:	90 91 5f 09 	lds	r25, 0x095F	; 0x80095f <sg_u16BlockSize+0x1>
    2cb2:	c8 0f       	add	r28, r24
    2cb4:	d9 1f       	adc	r29, r25
			} 
			while ((bResult) &&
				   (u32SectorCount--));
    2cb6:	11 23       	and	r17, r17
    2cb8:	49 f0       	breq	.+18     	; 0x2ccc <SDRead+0xa2>
    2cba:	d7 01       	movw	r26, r14
    2cbc:	c6 01       	movw	r24, r12
    2cbe:	01 97       	sbiw	r24, 0x01	; 1
    2cc0:	a1 09       	sbc	r26, r1
    2cc2:	b1 09       	sbc	r27, r1
				// Pet the watchdog
				WatchdogReset();
				
				pu8Buffer += sg_u16BlockSize;
			} 
			while ((bResult) &&
    2cc4:	cd 28       	or	r12, r13
    2cc6:	ce 28       	or	r12, r14
    2cc8:	cf 28       	or	r12, r15
    2cca:	19 f7       	brne	.-58     	; 0x2c92 <SDRead+0x68>
				   (u32SectorCount--));
				   
			// Regardless, send a stop command
			(void) SDCommand(CMD12,
    2ccc:	40 e0       	ldi	r20, 0x00	; 0
    2cce:	50 e0       	ldi	r21, 0x00	; 0
    2cd0:	ba 01       	movw	r22, r20
    2cd2:	8c e0       	ldi	r24, 0x0C	; 12
    2cd4:	0e 94 fd 19 	call	0x33fa	; 0x33fa <SDCommand>
    2cd8:	03 c0       	rjmp	.+6      	; 0x2ce0 <SDRead+0xb6>
// Read one or more sectors from SD
bool SDRead(uint32_t u32Sector,
			uint8_t *pu8Buffer,
			uint32_t u32SectorCount)
{
	bool bResult = false;
    2cda:	10 e0       	ldi	r17, 0x00	; 0
    2cdc:	01 c0       	rjmp	.+2      	; 0x2ce0 <SDRead+0xb6>
    2cde:	10 e0       	ldi	r17, 0x00	; 0
		{
			// Failed
		}
	}
	
	SDSetCS(false);
    2ce0:	80 e0       	ldi	r24, 0x00	; 0
    2ce2:	0e 94 c8 26 	call	0x4d90	; 0x4d90 <SDSetCS>

	return(bResult);
}
    2ce6:	81 2f       	mov	r24, r17
    2ce8:	df 91       	pop	r29
    2cea:	cf 91       	pop	r28
    2cec:	1f 91       	pop	r17
    2cee:	0f 91       	pop	r16
    2cf0:	ff 90       	pop	r15
    2cf2:	ef 90       	pop	r14
    2cf4:	df 90       	pop	r13
    2cf6:	cf 90       	pop	r12
    2cf8:	bf 90       	pop	r11
    2cfa:	af 90       	pop	r10
    2cfc:	9f 90       	pop	r9
    2cfe:	8f 90       	pop	r8
    2d00:	08 95       	ret

Disassembly of section .text.SDWrite:

00002a72 <SDWrite>:

bool SDGetBlockSize(uint32_t *pu32BlockSize)
{
	*pu32BlockSize = sg_u16BlockSize;
	return(true);
}
    2a72:	8f 92       	push	r8
    2a74:	9f 92       	push	r9
    2a76:	af 92       	push	r10
    2a78:	bf 92       	push	r11
    2a7a:	cf 92       	push	r12
    2a7c:	df 92       	push	r13
    2a7e:	ef 92       	push	r14
    2a80:	ff 92       	push	r15
    2a82:	0f 93       	push	r16
    2a84:	1f 93       	push	r17
    2a86:	cf 93       	push	r28
    2a88:	df 93       	push	r29
    2a8a:	4b 01       	movw	r8, r22
    2a8c:	5c 01       	movw	r10, r24
    2a8e:	ea 01       	movw	r28, r20
    2a90:	68 01       	movw	r12, r16
    2a92:	79 01       	movw	r14, r18
    2a94:	0e 94 62 27 	call	0x4ec4	; 0x4ec4 <WatchdogReset>
    2a98:	81 e0       	ldi	r24, 0x01	; 1
    2a9a:	0e 94 c8 26 	call	0x4d90	; 0x4d90 <SDSetCS>
    2a9e:	81 e0       	ldi	r24, 0x01	; 1
    2aa0:	c8 16       	cp	r12, r24
    2aa2:	d1 04       	cpc	r13, r1
    2aa4:	e1 04       	cpc	r14, r1
    2aa6:	f1 04       	cpc	r15, r1
    2aa8:	89 f4       	brne	.+34     	; 0x2acc <SDWrite+0x5a>
    2aaa:	b5 01       	movw	r22, r10
    2aac:	a4 01       	movw	r20, r8
    2aae:	88 e1       	ldi	r24, 0x18	; 24
    2ab0:	0e 94 fd 19 	call	0x33fa	; 0x33fa <SDCommand>
    2ab4:	81 11       	cpse	r24, r1
    2ab6:	37 c0       	rjmp	.+110    	; 0x2b26 <SDWrite+0xb4>
    2ab8:	60 91 5e 09 	lds	r22, 0x095E	; 0x80095e <sg_u16BlockSize>
    2abc:	70 91 5f 09 	lds	r23, 0x095F	; 0x80095f <sg_u16BlockSize+0x1>
    2ac0:	4e ef       	ldi	r20, 0xFE	; 254
    2ac2:	ce 01       	movw	r24, r28
    2ac4:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <SDTransmitDataBlock>
    2ac8:	18 2f       	mov	r17, r24
    2aca:	30 c0       	rjmp	.+96     	; 0x2b2c <SDWrite+0xba>
    2acc:	b5 01       	movw	r22, r10
    2ace:	a4 01       	movw	r20, r8
    2ad0:	89 e1       	ldi	r24, 0x19	; 25
    2ad2:	0e 94 fd 19 	call	0x33fa	; 0x33fa <SDCommand>
    2ad6:	88 23       	and	r24, r24
    2ad8:	19 f0       	breq	.+6      	; 0x2ae0 <SDWrite+0x6e>
    2ada:	27 c0       	rjmp	.+78     	; 0x2b2a <SDWrite+0xb8>
    2adc:	6c 01       	movw	r12, r24
    2ade:	7d 01       	movw	r14, r26
    2ae0:	60 91 5e 09 	lds	r22, 0x095E	; 0x80095e <sg_u16BlockSize>
    2ae4:	70 91 5f 09 	lds	r23, 0x095F	; 0x80095f <sg_u16BlockSize+0x1>
    2ae8:	4c ef       	ldi	r20, 0xFC	; 252
    2aea:	ce 01       	movw	r24, r28
    2aec:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <SDTransmitDataBlock>
    2af0:	18 2f       	mov	r17, r24
    2af2:	0e 94 62 27 	call	0x4ec4	; 0x4ec4 <WatchdogReset>
    2af6:	80 91 5e 09 	lds	r24, 0x095E	; 0x80095e <sg_u16BlockSize>
    2afa:	90 91 5f 09 	lds	r25, 0x095F	; 0x80095f <sg_u16BlockSize+0x1>
    2afe:	c8 0f       	add	r28, r24
    2b00:	d9 1f       	adc	r29, r25
    2b02:	11 23       	and	r17, r17
    2b04:	49 f0       	breq	.+18     	; 0x2b18 <SDWrite+0xa6>
    2b06:	d7 01       	movw	r26, r14
    2b08:	c6 01       	movw	r24, r12
    2b0a:	01 97       	sbiw	r24, 0x01	; 1
    2b0c:	a1 09       	sbc	r26, r1
    2b0e:	b1 09       	sbc	r27, r1
    2b10:	cd 28       	or	r12, r13
    2b12:	ce 28       	or	r12, r14
    2b14:	cf 28       	or	r12, r15
    2b16:	11 f7       	brne	.-60     	; 0x2adc <SDWrite+0x6a>
    2b18:	40 e0       	ldi	r20, 0x00	; 0
    2b1a:	50 e0       	ldi	r21, 0x00	; 0
    2b1c:	ba 01       	movw	r22, r20
    2b1e:	8c e0       	ldi	r24, 0x0C	; 12
    2b20:	0e 94 fd 19 	call	0x33fa	; 0x33fa <SDCommand>
    2b24:	03 c0       	rjmp	.+6      	; 0x2b2c <SDWrite+0xba>
    2b26:	10 e0       	ldi	r17, 0x00	; 0
    2b28:	01 c0       	rjmp	.+2      	; 0x2b2c <SDWrite+0xba>
    2b2a:	10 e0       	ldi	r17, 0x00	; 0
    2b2c:	80 e0       	ldi	r24, 0x00	; 0
    2b2e:	0e 94 c8 26 	call	0x4d90	; 0x4d90 <SDSetCS>
    2b32:	81 2f       	mov	r24, r17
    2b34:	df 91       	pop	r29
    2b36:	cf 91       	pop	r28
    2b38:	1f 91       	pop	r17
    2b3a:	0f 91       	pop	r16
    2b3c:	ff 90       	pop	r15
    2b3e:	ef 90       	pop	r14
    2b40:	df 90       	pop	r13
    2b42:	cf 90       	pop	r12
    2b44:	bf 90       	pop	r11
    2b46:	af 90       	pop	r10
    2b48:	9f 90       	pop	r9
    2b4a:	8f 90       	pop	r8
    2b4c:	08 95       	ret

Disassembly of section .text.SPITransaction:

00004004 <SPITransaction>:

// Do a SPI transaction - read or write (or write pattern)
void SPITransaction(ESPIBusState eSPIBusState,
					uint8_t *pu8Buffer,
					uint16_t u16ByteCount)
{
    4004:	fb 01       	movw	r30, r22
	// If we're transmitting, start the transaction
	if (ESTATE_RX_DATA == eSPIBusState)
    4006:	83 30       	cpi	r24, 0x03	; 3
    4008:	71 f4       	brne	.+28     	; 0x4026 <SPITransaction+0x22>
    400a:	08 c0       	rjmp	.+16     	; 0x401c <SPITransaction+0x18>
	{
		while (u16ByteCount--)
		{
			// Clock out 0xff so we can receive the data
			SPDR = 0xff;
    400c:	2f ef       	ldi	r18, 0xFF	; 255
    400e:	2e bd       	out	0x2e, r18	; 46

			// Wait for data to be available
			while (0 == (SPSR & (1 << SPIF)));
    4010:	0d b4       	in	r0, 0x2d	; 45
    4012:	07 fe       	sbrs	r0, 7
    4014:	fd cf       	rjmp	.-6      	; 0x4010 <SPITransaction+0xc>
			
			// Read the byte
			*pu8Buffer = SPDR;
    4016:	2e b5       	in	r18, 0x2e	; 46
    4018:	21 93       	st	Z+, r18
					uint16_t u16ByteCount)
{
	// If we're transmitting, start the transaction
	if (ESTATE_RX_DATA == eSPIBusState)
	{
		while (u16ByteCount--)
    401a:	ac 01       	movw	r20, r24
    401c:	ca 01       	movw	r24, r20
    401e:	01 97       	sbiw	r24, 0x01	; 1
    4020:	45 2b       	or	r20, r21
    4022:	a1 f7       	brne	.-24     	; 0x400c <SPITransaction+0x8>
    4024:	08 95       	ret
			*pu8Buffer = SPDR;
			++pu8Buffer;
		}
	}
	else
	if (ESTATE_TX_DATA == eSPIBusState)
    4026:	81 30       	cpi	r24, 0x01	; 1
    4028:	61 f4       	brne	.+24     	; 0x4042 <SPITransaction+0x3e>
    402a:	06 c0       	rjmp	.+12     	; 0x4038 <SPITransaction+0x34>
	{
		// Clock out whatever our data is in our queue
		while (u16ByteCount--)
		{
			SPDR = *pu8Buffer;
    402c:	21 91       	ld	r18, Z+
    402e:	2e bd       	out	0x2e, r18	; 46
			++pu8Buffer;
			
			// Wait for the transmit to complete
			while (0 == (SPSR & (1 << SPIF)));
    4030:	0d b4       	in	r0, 0x2d	; 45
    4032:	07 fe       	sbrs	r0, 7
    4034:	fd cf       	rjmp	.-6      	; 0x4030 <SPITransaction+0x2c>
	}
	else
	if (ESTATE_TX_DATA == eSPIBusState)
	{
		// Clock out whatever our data is in our queue
		while (u16ByteCount--)
    4036:	ac 01       	movw	r20, r24
    4038:	ca 01       	movw	r24, r20
    403a:	01 97       	sbiw	r24, 0x01	; 1
    403c:	45 2b       	or	r20, r21
    403e:	b1 f7       	brne	.-20     	; 0x402c <SPITransaction+0x28>
    4040:	08 95       	ret
			// Wait for the transmit to complete
			while (0 == (SPSR & (1 << SPIF)));
		}
	}
	else
	if (ESTATE_TX_PATTERN == eSPIBusState)
    4042:	82 30       	cpi	r24, 0x02	; 2
    4044:	51 f4       	brne	.+20     	; 0x405a <SPITransaction+0x56>
    4046:	05 c0       	rjmp	.+10     	; 0x4052 <SPITransaction+0x4e>
		// Clock out whatever our data is in our queue
		while (u16ByteCount--)
		{
			// This is OK - as the position where the pointer would normally
			// be is just the pattern (single byte)
			SPDR = (uint8_t) (pu8Buffer);
    4048:	ee bd       	out	0x2e, r30	; 46
		
			// Wait for the transmit to complete
			while (0 == (SPSR & (1 << SPIF)));
    404a:	0d b4       	in	r0, 0x2d	; 45
    404c:	07 fe       	sbrs	r0, 7
    404e:	fd cf       	rjmp	.-6      	; 0x404a <SPITransaction+0x46>
	}
	else
	if (ESTATE_TX_PATTERN == eSPIBusState)
	{
		// Clock out whatever our data is in our queue
		while (u16ByteCount--)
    4050:	ac 01       	movw	r20, r24
    4052:	ca 01       	movw	r24, r20
    4054:	01 97       	sbiw	r24, 0x01	; 1
    4056:	45 2b       	or	r20, r21
    4058:	b9 f7       	brne	.-18     	; 0x4048 <SPITransaction+0x44>
    405a:	08 95       	ret

Disassembly of section .text.SPISetBaudRate:

00002ea6 <SPISetBaudRate>:
	{FCLKIO >> 7,	(1 << SPR1) | (0 << SPR0),	0},					// /128
};

// Sets the SPI baud rate and returns the actual baud rate selected
uint32_t SPISetBaudRate(uint32_t u32BaudRate)
{
    2ea6:	cf 92       	push	r12
    2ea8:	df 92       	push	r13
    2eaa:	ef 92       	push	r14
    2eac:	ff 92       	push	r15
    2eae:	6b 01       	movw	r12, r22
    2eb0:	7c 01       	movw	r14, r24
	uint8_t u8Loop;
	
	// Find the baud rate that's the closest
	for (u8Loop = 0; u8Loop < (sizeof(sg_sSPIBaudRates) / sizeof(sg_sSPIBaudRates[0])); u8Loop++)
    2eb2:	20 e0       	ldi	r18, 0x00	; 0
    2eb4:	19 c0       	rjmp	.+50     	; 0x2ee8 <SPISetBaudRate+0x42>
	{
		if (u32BaudRate >= sg_sSPIBaudRates[u8Loop].u32BaudRate)
    2eb6:	82 2f       	mov	r24, r18
    2eb8:	90 e0       	ldi	r25, 0x00	; 0
    2eba:	ac 01       	movw	r20, r24
    2ebc:	44 0f       	add	r20, r20
    2ebe:	55 1f       	adc	r21, r21
    2ec0:	84 0f       	add	r24, r20
    2ec2:	95 1f       	adc	r25, r21
    2ec4:	88 0f       	add	r24, r24
    2ec6:	99 1f       	adc	r25, r25
    2ec8:	09 2e       	mov	r0, r25
    2eca:	00 0c       	add	r0, r0
    2ecc:	aa 0b       	sbc	r26, r26
    2ece:	85 55       	subi	r24, 0x55	; 85
    2ed0:	9d 4f       	sbci	r25, 0xFD	; 253
    2ed2:	af 4f       	sbci	r26, 0xFF	; 255
    2ed4:	fc 01       	movw	r30, r24
    2ed6:	5a 2f       	mov	r21, r26
    2ed8:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <__xload_4>
    2edc:	c6 16       	cp	r12, r22
    2ede:	d7 06       	cpc	r13, r23
    2ee0:	e8 06       	cpc	r14, r24
    2ee2:	f9 06       	cpc	r15, r25
    2ee4:	18 f4       	brcc	.+6      	; 0x2eec <SPISetBaudRate+0x46>
uint32_t SPISetBaudRate(uint32_t u32BaudRate)
{
	uint8_t u8Loop;
	
	// Find the baud rate that's the closest
	for (u8Loop = 0; u8Loop < (sizeof(sg_sSPIBaudRates) / sizeof(sg_sSPIBaudRates[0])); u8Loop++)
    2ee6:	2f 5f       	subi	r18, 0xFF	; 255
    2ee8:	27 30       	cpi	r18, 0x07	; 7
    2eea:	28 f3       	brcs	.-54     	; 0x2eb6 <SPISetBaudRate+0x10>
			break;
		}
	}

	// If we've hit the end, use the slowest speed
	if ((sizeof(sg_sSPIBaudRates) / sizeof(sg_sSPIBaudRates[0])) == u8Loop)
    2eec:	27 30       	cpi	r18, 0x07	; 7
    2eee:	09 f4       	brne	.+2      	; 0x2ef2 <SPISetBaudRate+0x4c>
	{
		u8Loop--;
    2ef0:	21 50       	subi	r18, 0x01	; 1
	}

	// Found one!
	SPCR = (SPCR & (uint8_t) ~((1 << SPR1) | (1 << SPR0))) | sg_sSPIBaudRates[u8Loop].u8SPCR;
    2ef2:	6c b5       	in	r22, 0x2c	; 44
    2ef4:	30 e0       	ldi	r19, 0x00	; 0
    2ef6:	a9 01       	movw	r20, r18
    2ef8:	44 0f       	add	r20, r20
    2efa:	55 1f       	adc	r21, r21
    2efc:	ca 01       	movw	r24, r20
    2efe:	82 0f       	add	r24, r18
    2f00:	93 1f       	adc	r25, r19
    2f02:	88 0f       	add	r24, r24
    2f04:	99 1f       	adc	r25, r25
    2f06:	04 96       	adiw	r24, 0x04	; 4
    2f08:	09 2e       	mov	r0, r25
    2f0a:	00 0c       	add	r0, r0
    2f0c:	aa 0b       	sbc	r26, r26
    2f0e:	85 55       	subi	r24, 0x55	; 85
    2f10:	9d 4f       	sbci	r25, 0xFD	; 253
    2f12:	af 4f       	sbci	r26, 0xFF	; 255
    2f14:	fc 01       	movw	r30, r24
    2f16:	84 91       	lpm	r24, Z
    2f18:	a7 fd       	sbrc	r26, 7
    2f1a:	80 81       	ld	r24, Z
    2f1c:	6c 7f       	andi	r22, 0xFC	; 252
    2f1e:	86 2b       	or	r24, r22
    2f20:	8c bd       	out	0x2c, r24	; 44
	SPSR = (SPSR & (uint8_t) ~(1 << SPI2X)) | sg_sSPIBaudRates[u8Loop].u8SPSR;
    2f22:	6d b5       	in	r22, 0x2d	; 45
    2f24:	ca 01       	movw	r24, r20
    2f26:	82 0f       	add	r24, r18
    2f28:	93 1f       	adc	r25, r19
    2f2a:	88 0f       	add	r24, r24
    2f2c:	99 1f       	adc	r25, r25
    2f2e:	05 96       	adiw	r24, 0x05	; 5
    2f30:	09 2e       	mov	r0, r25
    2f32:	00 0c       	add	r0, r0
    2f34:	aa 0b       	sbc	r26, r26
    2f36:	85 55       	subi	r24, 0x55	; 85
    2f38:	9d 4f       	sbci	r25, 0xFD	; 253
    2f3a:	af 4f       	sbci	r26, 0xFF	; 255
    2f3c:	fc 01       	movw	r30, r24
    2f3e:	84 91       	lpm	r24, Z
    2f40:	a7 fd       	sbrc	r26, 7
    2f42:	80 81       	ld	r24, Z
    2f44:	6e 7f       	andi	r22, 0xFE	; 254
    2f46:	86 2b       	or	r24, r22
    2f48:	8d bd       	out	0x2d, r24	; 45
	return(sg_sSPIBaudRates[u8Loop].u32BaudRate);
    2f4a:	24 0f       	add	r18, r20
    2f4c:	35 1f       	adc	r19, r21
    2f4e:	22 0f       	add	r18, r18
    2f50:	33 1f       	adc	r19, r19
    2f52:	03 2e       	mov	r0, r19
    2f54:	00 0c       	add	r0, r0
    2f56:	44 0b       	sbc	r20, r20
    2f58:	25 55       	subi	r18, 0x55	; 85
    2f5a:	3d 4f       	sbci	r19, 0xFD	; 253
    2f5c:	4f 4f       	sbci	r20, 0xFF	; 255
    2f5e:	f9 01       	movw	r30, r18
    2f60:	54 2f       	mov	r21, r20
    2f62:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <__xload_4>
}
    2f66:	ff 90       	pop	r15
    2f68:	ef 90       	pop	r14
    2f6a:	df 90       	pop	r13
    2f6c:	cf 90       	pop	r12
    2f6e:	08 95       	ret

Disassembly of section .text.SPIInit:

000047ec <SPIInit>:

void SPIInit(void)
{
	// Set MOSI and SCK to output
	DDR_SPI |= (1 << MOSI) | (1 << SCK);
    47ec:	84 b1       	in	r24, 0x04	; 4
    47ee:	82 68       	ori	r24, 0x82	; 130
    47f0:	84 b9       	out	0x04, r24	; 4
	DDR_SPI &= (uint8_t) ~(1 << MISO);
    47f2:	84 b1       	in	r24, 0x04	; 4
    47f4:	8e 7f       	andi	r24, 0xFE	; 254
    47f6:	84 b9       	out	0x04, r24	; 4
	
	// MISO As input (need our pullup)
	PORT_SPI |= (1 << MISO);
    47f8:	85 b1       	in	r24, 0x05	; 5
    47fa:	81 60       	ori	r24, 0x01	; 1
    47fc:	85 b9       	out	0x05, r24	; 5
	
	// Enable SPI engine, master only, and clock to fosc/128 and SPI mode 0 (which is what SD wants)
	SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR1) | (1 << SPR0);
    47fe:	83 e5       	ldi	r24, 0x53	; 83
    4800:	8c bd       	out	0x2c, r24	; 44
	
	// Zero out SPSR (all zeroes)
	SPSR = 0;
    4802:	1d bc       	out	0x2d, r1	; 45
	
	// Zero out SPIPS so the SPI IP is connected to MISO, MOSI, SCK, and SS
	MCUCR &= (uint8_t) ~(1 << SPIPS);
    4804:	85 b7       	in	r24, 0x35	; 53
    4806:	8f 77       	andi	r24, 0x7F	; 127
    4808:	85 bf       	out	0x35, r24	; 53

	// Set to something slow/compatible
	(void) SPISetBaudRate(400000);
    480a:	60 e8       	ldi	r22, 0x80	; 128
    480c:	7a e1       	ldi	r23, 0x1A	; 26
    480e:	86 e0       	ldi	r24, 0x06	; 6
    4810:	90 e0       	ldi	r25, 0x00	; 0
    4812:	0e 94 53 17 	call	0x2ea6	; 0x2ea6 <SPISetBaudRate>
    4816:	08 95       	ret

Disassembly of section .text.readGlobalState:

00004474 <readGlobalState>:

static GlobalState gState;
static uint32_t currentSector;
static uint8_t __attribute__((aligned(4))) frameBuffer[FRAME_BUFFER_SIZE];  // Enlarged to handle full frame

static bool readGlobalState(void) {
    4474:	0f 93       	push	r16
    4476:	1f 93       	push	r17
    4478:	cf 93       	push	r28
	if (!SDRead(0, frameBuffer, 1)) {
    447a:	01 e0       	ldi	r16, 0x01	; 1
    447c:	10 e0       	ldi	r17, 0x00	; 0
    447e:	20 e0       	ldi	r18, 0x00	; 0
    4480:	30 e0       	ldi	r19, 0x00	; 0
    4482:	4c e2       	ldi	r20, 0x2C	; 44
    4484:	53 e0       	ldi	r21, 0x03	; 3
    4486:	60 e0       	ldi	r22, 0x00	; 0
    4488:	70 e0       	ldi	r23, 0x00	; 0
    448a:	cb 01       	movw	r24, r22
    448c:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <SDRead>
    4490:	c8 2f       	mov	r28, r24
    4492:	88 23       	and	r24, r24
    4494:	49 f0       	breq	.+18     	; 0x44a8 <readGlobalState+0x34>
		return false;
	}
	memcpy(&gState, frameBuffer, sizeof(GlobalState));
    4496:	4c e2       	ldi	r20, 0x2C	; 44
    4498:	53 e0       	ldi	r21, 0x03	; 3
    449a:	60 e8       	ldi	r22, 0x80	; 128
    449c:	28 ed       	ldi	r18, 0xD8	; 216
    449e:	31 e0       	ldi	r19, 0x01	; 1
    44a0:	8c e2       	ldi	r24, 0x2C	; 44
    44a2:	97 e0       	ldi	r25, 0x07	; 7
    44a4:	0e 94 84 23 	call	0x4708	; 0x4708 <memcpy>
	// TODO: Implement checksum verification
	return true;
}
    44a8:	8c 2f       	mov	r24, r28
    44aa:	cf 91       	pop	r28
    44ac:	1f 91       	pop	r17
    44ae:	0f 91       	pop	r16
    44b0:	08 95       	ret

Disassembly of section .text.writeGlobalState:

000046d6 <writeGlobalState>:

static bool writeGlobalState(void) {
    46d6:	0f 93       	push	r16
    46d8:	1f 93       	push	r17
	memcpy(frameBuffer, &gState, sizeof(GlobalState));
    46da:	4c e2       	ldi	r20, 0x2C	; 44
    46dc:	57 e0       	ldi	r21, 0x07	; 7
    46de:	60 e8       	ldi	r22, 0x80	; 128
    46e0:	28 ed       	ldi	r18, 0xD8	; 216
    46e2:	31 e0       	ldi	r19, 0x01	; 1
    46e4:	8c e2       	ldi	r24, 0x2C	; 44
    46e6:	93 e0       	ldi	r25, 0x03	; 3
    46e8:	0e 94 84 23 	call	0x4708	; 0x4708 <memcpy>
	// TODO: Calculate and update checksum
	return SDWrite(0, frameBuffer, 1);
    46ec:	01 e0       	ldi	r16, 0x01	; 1
    46ee:	10 e0       	ldi	r17, 0x00	; 0
    46f0:	20 e0       	ldi	r18, 0x00	; 0
    46f2:	30 e0       	ldi	r19, 0x00	; 0
    46f4:	4c e2       	ldi	r20, 0x2C	; 44
    46f6:	53 e0       	ldi	r21, 0x03	; 3
    46f8:	60 e0       	ldi	r22, 0x00	; 0
    46fa:	70 e0       	ldi	r23, 0x00	; 0
    46fc:	cb 01       	movw	r24, r22
    46fe:	0e 94 39 15 	call	0x2a72	; 0x2a72 <SDWrite>
}
    4702:	1f 91       	pop	r17
    4704:	0f 91       	pop	r16
    4706:	08 95       	ret

Disassembly of section .text.updateSessionMap:

00002b4e <updateSessionMap>:

static bool updateSessionMap(void) {
    2b4e:	8f 92       	push	r8
    2b50:	9f 92       	push	r9
    2b52:	af 92       	push	r10
    2b54:	bf 92       	push	r11
    2b56:	cf 92       	push	r12
    2b58:	df 92       	push	r13
    2b5a:	ef 92       	push	r14
    2b5c:	ff 92       	push	r15
    2b5e:	0f 93       	push	r16
    2b60:	1f 93       	push	r17
	uint32_t mapSector = gState.activeSessionMapSector;
    2b62:	ec e2       	ldi	r30, 0x2C	; 44
    2b64:	f7 e0       	ldi	r31, 0x07	; 7
    2b66:	c4 8c       	ldd	r12, Z+28	; 0x1c
    2b68:	d5 8c       	ldd	r13, Z+29	; 0x1d
    2b6a:	e6 8c       	ldd	r14, Z+30	; 0x1e
    2b6c:	f7 8c       	ldd	r15, Z+31	; 0x1f
	uint32_t mapOffset = gState.activeSessionMapOffset;
    2b6e:	80 a0       	ldd	r8, Z+32	; 0x20
    2b70:	91 a0       	ldd	r9, Z+33	; 0x21
    2b72:	a2 a0       	ldd	r10, Z+34	; 0x22
    2b74:	b3 a0       	ldd	r11, Z+35	; 0x23

	if (!SDRead(mapSector, frameBuffer, 1)) {
    2b76:	01 e0       	ldi	r16, 0x01	; 1
    2b78:	10 e0       	ldi	r17, 0x00	; 0
    2b7a:	20 e0       	ldi	r18, 0x00	; 0
    2b7c:	30 e0       	ldi	r19, 0x00	; 0
    2b7e:	4c e2       	ldi	r20, 0x2C	; 44
    2b80:	53 e0       	ldi	r21, 0x03	; 3
    2b82:	c7 01       	movw	r24, r14
    2b84:	b6 01       	movw	r22, r12
    2b86:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <SDRead>
    2b8a:	88 23       	and	r24, r24
    2b8c:	09 f4       	brne	.+2      	; 0x2b90 <updateSessionMap+0x42>
    2b8e:	42 c0       	rjmp	.+132    	; 0x2c14 <updateSessionMap+0xc6>
		return false;
	}

	// Update session map
	*(uint64_t*)(frameBuffer + mapOffset) = gState.newSessionSector;
    2b90:	f4 01       	movw	r30, r8
    2b92:	e4 5d       	subi	r30, 0xD4	; 212
    2b94:	fc 4f       	sbci	r31, 0xFC	; 252
    2b96:	00 91 44 07 	lds	r16, 0x0744	; 0x800744 <gState+0x18>
    2b9a:	10 91 45 07 	lds	r17, 0x0745	; 0x800745 <gState+0x19>
    2b9e:	20 91 46 07 	lds	r18, 0x0746	; 0x800746 <gState+0x1a>
    2ba2:	30 91 47 07 	lds	r19, 0x0747	; 0x800747 <gState+0x1b>
    2ba6:	00 83       	st	Z, r16
    2ba8:	11 83       	std	Z+1, r17	; 0x01
    2baa:	22 83       	std	Z+2, r18	; 0x02
    2bac:	33 83       	std	Z+3, r19	; 0x03
    2bae:	14 82       	std	Z+4, r1	; 0x04
    2bb0:	15 82       	std	Z+5, r1	; 0x05
    2bb2:	16 82       	std	Z+6, r1	; 0x06
    2bb4:	17 82       	std	Z+7, r1	; 0x07

	if (!SDWrite(mapSector, frameBuffer, 1)) {
    2bb6:	01 e0       	ldi	r16, 0x01	; 1
    2bb8:	10 e0       	ldi	r17, 0x00	; 0
    2bba:	20 e0       	ldi	r18, 0x00	; 0
    2bbc:	30 e0       	ldi	r19, 0x00	; 0
    2bbe:	4c e2       	ldi	r20, 0x2C	; 44
    2bc0:	53 e0       	ldi	r21, 0x03	; 3
    2bc2:	c7 01       	movw	r24, r14
    2bc4:	b6 01       	movw	r22, r12
    2bc6:	0e 94 39 15 	call	0x2a72	; 0x2a72 <SDWrite>
    2bca:	88 23       	and	r24, r24
    2bcc:	19 f1       	breq	.+70     	; 0x2c14 <updateSessionMap+0xc6>
		return false;
	}

	// Update map pointers
	gState.activeSessionMapOffset += sizeof(uint64_t);
    2bce:	ec e2       	ldi	r30, 0x2C	; 44
    2bd0:	f7 e0       	ldi	r31, 0x07	; 7
    2bd2:	80 a1       	ldd	r24, Z+32	; 0x20
    2bd4:	91 a1       	ldd	r25, Z+33	; 0x21
    2bd6:	a2 a1       	ldd	r26, Z+34	; 0x22
    2bd8:	b3 a1       	ldd	r27, Z+35	; 0x23
    2bda:	08 96       	adiw	r24, 0x08	; 8
    2bdc:	a1 1d       	adc	r26, r1
    2bde:	b1 1d       	adc	r27, r1
    2be0:	80 a3       	std	Z+32, r24	; 0x20
    2be2:	91 a3       	std	Z+33, r25	; 0x21
    2be4:	a2 a3       	std	Z+34, r26	; 0x22
    2be6:	b3 a3       	std	Z+35, r27	; 0x23
	if (gState.activeSessionMapOffset >= SECTOR_SIZE) {
    2be8:	81 15       	cp	r24, r1
    2bea:	92 40       	sbci	r25, 0x02	; 2
    2bec:	a1 05       	cpc	r26, r1
    2bee:	b1 05       	cpc	r27, r1
    2bf0:	78 f0       	brcs	.+30     	; 0x2c10 <updateSessionMap+0xc2>
		gState.activeSessionMapSector++;
    2bf2:	84 8d       	ldd	r24, Z+28	; 0x1c
    2bf4:	95 8d       	ldd	r25, Z+29	; 0x1d
    2bf6:	a6 8d       	ldd	r26, Z+30	; 0x1e
    2bf8:	b7 8d       	ldd	r27, Z+31	; 0x1f
    2bfa:	01 96       	adiw	r24, 0x01	; 1
    2bfc:	a1 1d       	adc	r26, r1
    2bfe:	b1 1d       	adc	r27, r1
    2c00:	84 8f       	std	Z+28, r24	; 0x1c
    2c02:	95 8f       	std	Z+29, r25	; 0x1d
    2c04:	a6 8f       	std	Z+30, r26	; 0x1e
    2c06:	b7 8f       	std	Z+31, r27	; 0x1f
		gState.activeSessionMapOffset = 0;
    2c08:	10 a2       	std	Z+32, r1	; 0x20
    2c0a:	11 a2       	std	Z+33, r1	; 0x21
    2c0c:	12 a2       	std	Z+34, r1	; 0x22
    2c0e:	13 a2       	std	Z+35, r1	; 0x23
	}

	return writeGlobalState();
    2c10:	0e 94 6b 23 	call	0x46d6	; 0x46d6 <writeGlobalState>
}
    2c14:	1f 91       	pop	r17
    2c16:	0f 91       	pop	r16
    2c18:	ff 90       	pop	r15
    2c1a:	ef 90       	pop	r14
    2c1c:	df 90       	pop	r13
    2c1e:	cf 90       	pop	r12
    2c20:	bf 90       	pop	r11
    2c22:	af 90       	pop	r10
    2c24:	9f 90       	pop	r9
    2c26:	8f 90       	pop	r8
    2c28:	08 95       	ret

Disassembly of section .text.STORE_Init:

000039be <STORE_Init>:

bool STORE_Init(void) {
    39be:	cf 93       	push	r28
	if (!SDInit()) {
    39c0:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <SDInit>
    39c4:	c8 2f       	mov	r28, r24
    39c6:	88 23       	and	r24, r24
    39c8:	c1 f1       	breq	.+112    	; 0x3a3a <STORE_Init+0x7c>
		return false;
	}

	if (!readGlobalState()) {
    39ca:	0e 94 3a 22 	call	0x4474	; 0x4474 <readGlobalState>
    39ce:	81 11       	cpse	r24, r1
    39d0:	22 c0       	rjmp	.+68     	; 0x3a16 <STORE_Init+0x58>
		// Initialize global state if it doesn't exist
		memset(&gState, 0, sizeof(GlobalState));
    39d2:	ec e2       	ldi	r30, 0x2C	; 44
    39d4:	f7 e0       	ldi	r31, 0x07	; 7
    39d6:	88 ed       	ldi	r24, 0xD8	; 216
    39d8:	91 e0       	ldi	r25, 0x01	; 1
    39da:	df 01       	movw	r26, r30
    39dc:	9c 01       	movw	r18, r24
    39de:	1d 92       	st	X+, r1
    39e0:	21 50       	subi	r18, 0x01	; 1
    39e2:	30 40       	sbci	r19, 0x00	; 0
    39e4:	e1 f7       	brne	.-8      	; 0x39de <STORE_Init+0x20>
		gState.firstSessionSector = 1;
    39e6:	81 e0       	ldi	r24, 0x01	; 1
    39e8:	90 e0       	ldi	r25, 0x00	; 0
    39ea:	a0 e0       	ldi	r26, 0x00	; 0
    39ec:	b0 e0       	ldi	r27, 0x00	; 0
    39ee:	84 87       	std	Z+12, r24	; 0x0c
    39f0:	95 87       	std	Z+13, r25	; 0x0d
    39f2:	a6 87       	std	Z+14, r26	; 0x0e
    39f4:	b7 87       	std	Z+15, r27	; 0x0f
		gState.newSessionSector = 1;
    39f6:	80 8f       	std	Z+24, r24	; 0x18
    39f8:	91 8f       	std	Z+25, r25	; 0x19
    39fa:	a2 8f       	std	Z+26, r26	; 0x1a
    39fc:	b3 8f       	std	Z+27, r27	; 0x1b
		gState.activeSessionMapSector = 4;
    39fe:	84 e0       	ldi	r24, 0x04	; 4
    3a00:	90 e0       	ldi	r25, 0x00	; 0
    3a02:	a0 e0       	ldi	r26, 0x00	; 0
    3a04:	b0 e0       	ldi	r27, 0x00	; 0
    3a06:	84 8f       	std	Z+28, r24	; 0x1c
    3a08:	95 8f       	std	Z+29, r25	; 0x1d
    3a0a:	a6 8f       	std	Z+30, r26	; 0x1e
    3a0c:	b7 8f       	std	Z+31, r27	; 0x1f
		gState.activeSessionMapOffset = 0;
		// TODO: Initialize other fields as needed
		if (!writeGlobalState()) {
    3a0e:	0e 94 6b 23 	call	0x46d6	; 0x46d6 <writeGlobalState>
    3a12:	88 23       	and	r24, r24
    3a14:	89 f0       	breq	.+34     	; 0x3a38 <STORE_Init+0x7a>
			return false;
		}
	}

	currentSector = gState.newSessionSector;
    3a16:	80 91 44 07 	lds	r24, 0x0744	; 0x800744 <gState+0x18>
    3a1a:	90 91 45 07 	lds	r25, 0x0745	; 0x800745 <gState+0x19>
    3a1e:	a0 91 46 07 	lds	r26, 0x0746	; 0x800746 <gState+0x1a>
    3a22:	b0 91 47 07 	lds	r27, 0x0747	; 0x800747 <gState+0x1b>
    3a26:	80 93 58 09 	sts	0x0958, r24	; 0x800958 <currentSector>
    3a2a:	90 93 59 09 	sts	0x0959, r25	; 0x800959 <currentSector+0x1>
    3a2e:	a0 93 5a 09 	sts	0x095A, r26	; 0x80095a <currentSector+0x2>
    3a32:	b0 93 5b 09 	sts	0x095B, r27	; 0x80095b <currentSector+0x3>
	return true;
    3a36:	01 c0       	rjmp	.+2      	; 0x3a3a <STORE_Init+0x7c>
		gState.newSessionSector = 1;
		gState.activeSessionMapSector = 4;
		gState.activeSessionMapOffset = 0;
		// TODO: Initialize other fields as needed
		if (!writeGlobalState()) {
			return false;
    3a38:	c8 2f       	mov	r28, r24
		}
	}

	currentSector = gState.newSessionSector;
	return true;
}
    3a3a:	8c 2f       	mov	r24, r28
    3a3c:	cf 91       	pop	r28
    3a3e:	08 95       	ret

Disassembly of section .text.STORE_WriteFrame:

00002898 <STORE_WriteFrame>:

bool STORE_WriteFrame(volatile FrameData* frame) {
    2898:	8f 92       	push	r8
    289a:	9f 92       	push	r9
    289c:	af 92       	push	r10
    289e:	bf 92       	push	r11
    28a0:	cf 92       	push	r12
    28a2:	df 92       	push	r13
    28a4:	ef 92       	push	r14
    28a6:	ff 92       	push	r15
    28a8:	0f 93       	push	r16
    28aa:	1f 93       	push	r17
    28ac:	cf 93       	push	r28
    28ae:	df 93       	push	r29
	uint32_t bytesWritten = 0;
	uint32_t currentOffset = 0;
	uint32_t sectorsToWrite;
	
	// Verify frame size
	if(frame->frameBytes > FRAME_BUFFER_SIZE) {
    28b0:	fc 01       	movw	r30, r24
    28b2:	24 81       	ldd	r18, Z+4	; 0x04
    28b4:	35 81       	ldd	r19, Z+5	; 0x05
    28b6:	21 30       	cpi	r18, 0x01	; 1
    28b8:	34 40       	sbci	r19, 0x04	; 4
    28ba:	08 f0       	brcs	.+2      	; 0x28be <STORE_WriteFrame+0x26>
    28bc:	5b c0       	rjmp	.+182    	; 0x2974 <STORE_WriteFrame+0xdc>
    28be:	ec 01       	movw	r28, r24
		return false;
	}
	
	// Copy frame data to our buffer
	memcpy(frameBuffer, (const void*)frame, frame->frameBytes);
    28c0:	2c 81       	ldd	r18, Y+4	; 0x04
    28c2:	3d 81       	ldd	r19, Y+5	; 0x05
    28c4:	ac 01       	movw	r20, r24
    28c6:	60 e8       	ldi	r22, 0x80	; 128
    28c8:	8c e2       	ldi	r24, 0x2C	; 44
    28ca:	93 e0       	ldi	r25, 0x03	; 3
    28cc:	0e 94 84 23 	call	0x4708	; 0x4708 <memcpy>
	
	// Zero out any remaining buffer space in last sector
	if(frame->frameBytes < FRAME_BUFFER_SIZE) {
    28d0:	8c 81       	ldd	r24, Y+4	; 0x04
    28d2:	9d 81       	ldd	r25, Y+5	; 0x05
    28d4:	81 15       	cp	r24, r1
    28d6:	94 40       	sbci	r25, 0x04	; 4
    28d8:	70 f4       	brcc	.+28     	; 0x28f6 <STORE_WriteFrame+0x5e>
		memset(frameBuffer + frame->frameBytes, 0, FRAME_BUFFER_SIZE - frame->frameBytes);
    28da:	2c 81       	ldd	r18, Y+4	; 0x04
    28dc:	3d 81       	ldd	r19, Y+5	; 0x05
    28de:	8c 81       	ldd	r24, Y+4	; 0x04
    28e0:	9d 81       	ldd	r25, Y+5	; 0x05
    28e2:	40 e0       	ldi	r20, 0x00	; 0
    28e4:	54 e0       	ldi	r21, 0x04	; 4
    28e6:	42 1b       	sub	r20, r18
    28e8:	53 0b       	sbc	r21, r19
    28ea:	60 e0       	ldi	r22, 0x00	; 0
    28ec:	70 e0       	ldi	r23, 0x00	; 0
    28ee:	84 5d       	subi	r24, 0xD4	; 212
    28f0:	9c 4f       	sbci	r25, 0xFC	; 252
    28f2:	0e 94 db 26 	call	0x4db6	; 0x4db6 <memset>

	currentSector = gState.newSessionSector;
	return true;
}

bool STORE_WriteFrame(volatile FrameData* frame) {
    28f6:	c1 2c       	mov	r12, r1
    28f8:	d1 2c       	mov	r13, r1
    28fa:	76 01       	movw	r14, r12
    28fc:	68 94       	set
    28fe:	c1 f8       	bld	r12, 1
    2900:	81 2c       	mov	r8, r1
    2902:	91 2c       	mov	r9, r1
    2904:	54 01       	movw	r10, r8
    2906:	2f c0       	rjmp	.+94     	; 0x2966 <STORE_WriteFrame+0xce>
	// Calculate how many complete sectors we need to write
	sectorsToWrite = SECTORS_PER_FRAME;
	
	// Write all sectors
	while(sectorsToWrite > 0) {
		if(!SDWrite(currentSector, frameBuffer + currentOffset, 1)) {
    2908:	60 91 58 09 	lds	r22, 0x0958	; 0x800958 <currentSector>
    290c:	70 91 59 09 	lds	r23, 0x0959	; 0x800959 <currentSector+0x1>
    2910:	80 91 5a 09 	lds	r24, 0x095A	; 0x80095a <currentSector+0x2>
    2914:	90 91 5b 09 	lds	r25, 0x095B	; 0x80095b <currentSector+0x3>
    2918:	01 e0       	ldi	r16, 0x01	; 1
    291a:	10 e0       	ldi	r17, 0x00	; 0
    291c:	20 e0       	ldi	r18, 0x00	; 0
    291e:	30 e0       	ldi	r19, 0x00	; 0
    2920:	a4 01       	movw	r20, r8
    2922:	44 5d       	subi	r20, 0xD4	; 212
    2924:	5c 4f       	sbci	r21, 0xFC	; 252
    2926:	0e 94 39 15 	call	0x2a72	; 0x2a72 <SDWrite>
    292a:	88 23       	and	r24, r24
    292c:	21 f1       	breq	.+72     	; 0x2976 <STORE_WriteFrame+0xde>
			return false;
		}
		currentSector++;
    292e:	80 91 58 09 	lds	r24, 0x0958	; 0x800958 <currentSector>
    2932:	90 91 59 09 	lds	r25, 0x0959	; 0x800959 <currentSector+0x1>
    2936:	a0 91 5a 09 	lds	r26, 0x095A	; 0x80095a <currentSector+0x2>
    293a:	b0 91 5b 09 	lds	r27, 0x095B	; 0x80095b <currentSector+0x3>
    293e:	01 96       	adiw	r24, 0x01	; 1
    2940:	a1 1d       	adc	r26, r1
    2942:	b1 1d       	adc	r27, r1
    2944:	80 93 58 09 	sts	0x0958, r24	; 0x800958 <currentSector>
    2948:	90 93 59 09 	sts	0x0959, r25	; 0x800959 <currentSector+0x1>
    294c:	a0 93 5a 09 	sts	0x095A, r26	; 0x80095a <currentSector+0x2>
    2950:	b0 93 5b 09 	sts	0x095B, r27	; 0x80095b <currentSector+0x3>
		currentOffset += SECTOR_SIZE;
    2954:	42 e0       	ldi	r20, 0x02	; 2
    2956:	94 0e       	add	r9, r20
    2958:	a1 1c       	adc	r10, r1
    295a:	b1 1c       	adc	r11, r1
		sectorsToWrite--;
    295c:	81 e0       	ldi	r24, 0x01	; 1
    295e:	c8 1a       	sub	r12, r24
    2960:	d1 08       	sbc	r13, r1
    2962:	e1 08       	sbc	r14, r1
    2964:	f1 08       	sbc	r15, r1
	
	// Calculate how many complete sectors we need to write
	sectorsToWrite = SECTORS_PER_FRAME;
	
	// Write all sectors
	while(sectorsToWrite > 0) {
    2966:	c1 14       	cp	r12, r1
    2968:	d1 04       	cpc	r13, r1
    296a:	e1 04       	cpc	r14, r1
    296c:	f1 04       	cpc	r15, r1
    296e:	61 f6       	brne	.-104    	; 0x2908 <STORE_WriteFrame+0x70>
		currentSector++;
		currentOffset += SECTOR_SIZE;
		sectorsToWrite--;
	}
	
	return true;
    2970:	81 e0       	ldi	r24, 0x01	; 1
    2972:	01 c0       	rjmp	.+2      	; 0x2976 <STORE_WriteFrame+0xde>
	uint32_t currentOffset = 0;
	uint32_t sectorsToWrite;
	
	// Verify frame size
	if(frame->frameBytes > FRAME_BUFFER_SIZE) {
		return false;
    2974:	80 e0       	ldi	r24, 0x00	; 0
		currentOffset += SECTOR_SIZE;
		sectorsToWrite--;
	}
	
	return true;
}
    2976:	df 91       	pop	r29
    2978:	cf 91       	pop	r28
    297a:	1f 91       	pop	r17
    297c:	0f 91       	pop	r16
    297e:	ff 90       	pop	r15
    2980:	ef 90       	pop	r14
    2982:	df 90       	pop	r13
    2984:	cf 90       	pop	r12
    2986:	bf 90       	pop	r11
    2988:	af 90       	pop	r10
    298a:	9f 90       	pop	r9
    298c:	8f 90       	pop	r8
    298e:	08 95       	ret

Disassembly of section .text.STORE_StartNewSession:

0000420a <STORE_StartNewSession>:

bool STORE_StartNewSession(void) {
	// Update session info
	gState.sessionCount++;
    420a:	ec e2       	ldi	r30, 0x2C	; 44
    420c:	f7 e0       	ldi	r31, 0x07	; 7
    420e:	84 89       	ldd	r24, Z+20	; 0x14
    4210:	95 89       	ldd	r25, Z+21	; 0x15
    4212:	a6 89       	ldd	r26, Z+22	; 0x16
    4214:	b7 89       	ldd	r27, Z+23	; 0x17
    4216:	01 96       	adiw	r24, 0x01	; 1
    4218:	a1 1d       	adc	r26, r1
    421a:	b1 1d       	adc	r27, r1
    421c:	84 8b       	std	Z+20, r24	; 0x14
    421e:	95 8b       	std	Z+21, r25	; 0x15
    4220:	a6 8b       	std	Z+22, r26	; 0x16
    4222:	b7 8b       	std	Z+23, r27	; 0x17
	gState.newSessionSector = currentSector;
    4224:	80 91 58 09 	lds	r24, 0x0958	; 0x800958 <currentSector>
    4228:	90 91 59 09 	lds	r25, 0x0959	; 0x800959 <currentSector+0x1>
    422c:	a0 91 5a 09 	lds	r26, 0x095A	; 0x80095a <currentSector+0x2>
    4230:	b0 91 5b 09 	lds	r27, 0x095B	; 0x80095b <currentSector+0x3>
    4234:	80 8f       	std	Z+24, r24	; 0x18
    4236:	91 8f       	std	Z+25, r25	; 0x19
    4238:	a2 8f       	std	Z+26, r26	; 0x1a
    423a:	b3 8f       	std	Z+27, r27	; 0x1b
	
	// Ensure sector alignment for new sessions
	if(currentSector % SECTORS_PER_FRAME != 0) {
    423c:	80 ff       	sbrs	r24, 0
    423e:	0c c0       	rjmp	.+24     	; 0x4258 <STORE_StartNewSession+0x4e>
		currentSector += SECTORS_PER_FRAME - (currentSector % SECTORS_PER_FRAME);
    4240:	8e 7f       	andi	r24, 0xFE	; 254
    4242:	02 96       	adiw	r24, 0x02	; 2
    4244:	a1 1d       	adc	r26, r1
    4246:	b1 1d       	adc	r27, r1
    4248:	80 93 58 09 	sts	0x0958, r24	; 0x800958 <currentSector>
    424c:	90 93 59 09 	sts	0x0959, r25	; 0x800959 <currentSector+0x1>
    4250:	a0 93 5a 09 	sts	0x095A, r26	; 0x80095a <currentSector+0x2>
    4254:	b0 93 5b 09 	sts	0x095B, r27	; 0x80095b <currentSector+0x3>
	}
	
	return updateSessionMap();
    4258:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <updateSessionMap>
}
    425c:	08 95       	ret

Disassembly of section .text.STORE_EndSession:

0000405c <STORE_EndSession>:

bool STORE_EndSession(void) {
	// Ensure we end on a frame boundary
	if(currentSector % SECTORS_PER_FRAME != 0) {
    405c:	80 91 58 09 	lds	r24, 0x0958	; 0x800958 <currentSector>
    4060:	90 91 59 09 	lds	r25, 0x0959	; 0x800959 <currentSector+0x1>
    4064:	a0 91 5a 09 	lds	r26, 0x095A	; 0x80095a <currentSector+0x2>
    4068:	b0 91 5b 09 	lds	r27, 0x095B	; 0x80095b <currentSector+0x3>
    406c:	80 ff       	sbrs	r24, 0
    406e:	0c c0       	rjmp	.+24     	; 0x4088 <STORE_EndSession+0x2c>
		currentSector += SECTORS_PER_FRAME - (currentSector % SECTORS_PER_FRAME);
    4070:	8e 7f       	andi	r24, 0xFE	; 254
    4072:	02 96       	adiw	r24, 0x02	; 2
    4074:	a1 1d       	adc	r26, r1
    4076:	b1 1d       	adc	r27, r1
    4078:	80 93 58 09 	sts	0x0958, r24	; 0x800958 <currentSector>
    407c:	90 93 59 09 	sts	0x0959, r25	; 0x800959 <currentSector+0x1>
    4080:	a0 93 5a 09 	sts	0x095A, r26	; 0x80095a <currentSector+0x2>
    4084:	b0 93 5b 09 	sts	0x095B, r27	; 0x80095b <currentSector+0x3>
	}
	
	gState.lastSessionSector = currentSector - 1;
    4088:	80 91 58 09 	lds	r24, 0x0958	; 0x800958 <currentSector>
    408c:	90 91 59 09 	lds	r25, 0x0959	; 0x800959 <currentSector+0x1>
    4090:	a0 91 5a 09 	lds	r26, 0x095A	; 0x80095a <currentSector+0x2>
    4094:	b0 91 5b 09 	lds	r27, 0x095B	; 0x80095b <currentSector+0x3>
    4098:	01 97       	sbiw	r24, 0x01	; 1
    409a:	a1 09       	sbc	r26, r1
    409c:	b1 09       	sbc	r27, r1
    409e:	80 93 3c 07 	sts	0x073C, r24	; 0x80073c <gState+0x10>
    40a2:	90 93 3d 07 	sts	0x073D, r25	; 0x80073d <gState+0x11>
    40a6:	a0 93 3e 07 	sts	0x073E, r26	; 0x80073e <gState+0x12>
    40aa:	b0 93 3f 07 	sts	0x073F, r27	; 0x80073f <gState+0x13>
	return writeGlobalState();
    40ae:	0e 94 6b 23 	call	0x46d6	; 0x46d6 <writeGlobalState>
}
    40b2:	08 95       	ret

Disassembly of section .text.vUARTtxDataAvailable:

00004c02 <vUARTtxDataAvailable>:
#endif

bool vUARTIsBusy(void) {
	return ((sg_etxState != ESTATE_IDLE) ||
		(sg_eCell_mc_rxState != ESTATE_IDLE));
}
    4c02:	80 91 7b 09 	lds	r24, 0x097B	; 0x80097b <sg_u8SendIndex>
    4c06:	81 11       	cpse	r24, r1
    4c08:	06 c0       	rjmp	.+12     	; 0x4c16 <vUARTtxDataAvailable+0x14>
    4c0a:	0e 94 35 24 	call	0x486a	; 0x486a <PlatformGetSendData>
    4c0e:	90 93 61 09 	sts	0x0961, r25	; 0x800961 <sg_u8SendData+0x1>
    4c12:	80 93 60 09 	sts	0x0960, r24	; 0x800960 <sg_u8SendData>
    4c16:	80 91 7b 09 	lds	r24, 0x097B	; 0x80097b <sg_u8SendIndex>
    4c1a:	81 11       	cpse	r24, r1
    4c1c:	02 c0       	rjmp	.+4      	; 0x4c22 <vUARTtxDataAvailable+0x20>
    4c1e:	81 e0       	ldi	r24, 0x01	; 1
    4c20:	08 95       	ret
    4c22:	80 e0       	ldi	r24, 0x00	; 0
    4c24:	08 95       	ret

Disassembly of section .text.vUARTtxDataGet:

000043a0 <vUARTtxDataGet>:
    43a0:	80 91 7b 09 	lds	r24, 0x097B	; 0x80097b <sg_u8SendIndex>
    43a4:	81 11       	cpse	r24, r1
    43a6:	10 c0       	rjmp	.+32     	; 0x43c8 <vUARTtxDataGet+0x28>
    43a8:	81 e0       	ldi	r24, 0x01	; 1
    43aa:	0e 94 35 24 	call	0x486a	; 0x486a <PlatformGetSendData>
    43ae:	e0 e6       	ldi	r30, 0x60	; 96
    43b0:	f9 e0       	ldi	r31, 0x09	; 9
    43b2:	90 83       	st	Z, r25
    43b4:	81 83       	std	Z+1, r24	; 0x01
    43b6:	80 81       	ld	r24, Z
    43b8:	88 23       	and	r24, r24
    43ba:	24 f4       	brge	.+8      	; 0x43c4 <vUARTtxDataGet+0x24>
    43bc:	81 e0       	ldi	r24, 0x01	; 1
    43be:	80 93 7f 09 	sts	0x097F, r24	; 0x80097f <sg_bCellReportsReuested>
    43c2:	02 c0       	rjmp	.+4      	; 0x43c8 <vUARTtxDataGet+0x28>
    43c4:	10 92 7f 09 	sts	0x097F, r1	; 0x80097f <sg_bCellReportsReuested>
    43c8:	e0 91 7b 09 	lds	r30, 0x097B	; 0x80097b <sg_u8SendIndex>
    43cc:	f0 e0       	ldi	r31, 0x00	; 0
    43ce:	e0 5a       	subi	r30, 0xA0	; 160
    43d0:	f6 4f       	sbci	r31, 0xF6	; 246
    43d2:	80 81       	ld	r24, Z
    43d4:	90 91 7b 09 	lds	r25, 0x097B	; 0x80097b <sg_u8SendIndex>
    43d8:	9f 5f       	subi	r25, 0xFF	; 255
    43da:	90 93 7b 09 	sts	0x097B, r25	; 0x80097b <sg_u8SendIndex>
    43de:	90 91 7b 09 	lds	r25, 0x097B	; 0x80097b <sg_u8SendIndex>
    43e2:	92 30       	cpi	r25, 0x02	; 2
    43e4:	10 f0       	brcs	.+4      	; 0x43ea <vUARTtxDataGet+0x4a>
    43e6:	10 92 7b 09 	sts	0x097B, r1	; 0x80097b <sg_u8SendIndex>
    43ea:	08 95       	ret

Disassembly of section .text.vUARTRXReset:

00004ea2 <vUARTRXReset>:

// Called when we have a string timeout or need to reset the state machine
// for the MC RX side of things
void vUARTRXReset(void)
{
	sg_eCell_mc_rxState = ESTATE_IDLE;
    4ea2:	10 92 86 09 	sts	0x0986, r1	; 0x800986 <sg_eCell_mc_rxState>
	vUARTRXStart();
    4ea6:	0e 94 a7 26 	call	0x4d4e	; 0x4d4e <vUARTRXStart>
    4eaa:	08 95       	ret

Disassembly of section .text.vUARTStarttx:

0000410a <vUARTStarttx>:
#endif

bool vUARTIsBusy(void) {
	return ((sg_etxState != ESTATE_IDLE) ||
		(sg_eCell_mc_rxState != ESTATE_IDLE));
}
    410a:	80 91 80 09 	lds	r24, 0x0980	; 0x800980 <sg_etxState>
    410e:	81 11       	cpse	r24, r1
    4110:	23 c0       	rjmp	.+70     	; 0x4158 <vUARTStarttx+0x4e>
    4112:	80 91 86 09 	lds	r24, 0x0986	; 0x800986 <sg_eCell_mc_rxState>
    4116:	81 11       	cpse	r24, r1
    4118:	21 c0       	rjmp	.+66     	; 0x415c <vUARTStarttx+0x52>
    411a:	82 e0       	ldi	r24, 0x02	; 2
    411c:	80 93 80 09 	sts	0x0980, r24	; 0x800980 <sg_etxState>
    4120:	10 92 7b 09 	sts	0x097B, r1	; 0x80097b <sg_u8SendIndex>
    4124:	10 92 83 09 	sts	0x0983, r1	; 0x800983 <sg_u8txBitCount>
    4128:	81 e0       	ldi	r24, 0x01	; 1
    412a:	80 93 7e 09 	sts	0x097E, r24	; 0x80097e <sg_bMCTxNextBit>
    412e:	86 b5       	in	r24, 0x26	; 38
    4130:	8e 5c       	subi	r24, 0xCE	; 206
    4132:	87 bd       	out	0x27, r24	; 39
    4134:	85 b3       	in	r24, 0x15	; 21
    4136:	82 60       	ori	r24, 0x02	; 2
    4138:	85 bb       	out	0x15, r24	; 21
    413a:	ee e6       	ldi	r30, 0x6E	; 110
    413c:	f0 e0       	ldi	r31, 0x00	; 0
    413e:	80 81       	ld	r24, Z
    4140:	82 60       	ori	r24, 0x02	; 2
    4142:	80 83       	st	Z, r24
    4144:	0e 94 01 26 	call	0x4c02	; 0x4c02 <vUARTtxDataAvailable>
    4148:	80 93 81 09 	sts	0x0981, r24	; 0x800981 <sg_btxMoreAvailable>
    414c:	0e 94 d0 21 	call	0x43a0	; 0x43a0 <vUARTtxDataGet>
    4150:	80 93 82 09 	sts	0x0982, r24	; 0x800982 <sg_u8txDataByte>
    4154:	81 e0       	ldi	r24, 0x01	; 1
    4156:	08 95       	ret
    4158:	80 e0       	ldi	r24, 0x00	; 0
    415a:	08 95       	ret
    415c:	80 e0       	ldi	r24, 0x00	; 0
    415e:	08 95       	ret

Disassembly of section .text.__vector_8:

00002f70 <__vector_8>:
    2f70:	1f 92       	push	r1
    2f72:	0f 92       	push	r0
    2f74:	0f b6       	in	r0, 0x3f	; 63
    2f76:	0f 92       	push	r0
    2f78:	11 24       	eor	r1, r1
    2f7a:	8f 93       	push	r24
    2f7c:	9f 93       	push	r25
    2f7e:	ef 93       	push	r30
    2f80:	ff 93       	push	r31
    2f82:	80 91 86 09 	lds	r24, 0x0986	; 0x800986 <sg_eCell_mc_rxState>
    2f86:	88 23       	and	r24, r24
    2f88:	11 f0       	breq	.+4      	; 0x2f8e <__vector_8+0x1e>
    2f8a:	83 30       	cpi	r24, 0x03	; 3
    2f8c:	51 f5       	brne	.+84     	; 0x2fe2 <__vector_8+0x72>
    2f8e:	86 b5       	in	r24, 0x26	; 38
    2f90:	8c 5b       	subi	r24, 0xBC	; 188
    2f92:	88 bd       	out	0x28, r24	; 40
    2f94:	85 b3       	in	r24, 0x15	; 21
    2f96:	84 60       	ori	r24, 0x04	; 4
    2f98:	85 bb       	out	0x15, r24	; 21
    2f9a:	ee e6       	ldi	r30, 0x6E	; 110
    2f9c:	f0 e0       	ldi	r31, 0x00	; 0
    2f9e:	80 81       	ld	r24, Z
    2fa0:	84 60       	ori	r24, 0x04	; 4
    2fa2:	80 83       	st	Z, r24
    2fa4:	e9 e6       	ldi	r30, 0x69	; 105
    2fa6:	f0 e0       	ldi	r31, 0x00	; 0
    2fa8:	80 81       	ld	r24, Z
    2faa:	83 7f       	andi	r24, 0xF3	; 243
    2fac:	84 60       	ori	r24, 0x04	; 4
    2fae:	80 83       	st	Z, r24
    2fb0:	8c b3       	in	r24, 0x1c	; 28
    2fb2:	82 60       	ori	r24, 0x02	; 2
    2fb4:	8c bb       	out	0x1c, r24	; 28
    2fb6:	80 91 7a 09 	lds	r24, 0x097A	; 0x80097a <sg_bState>
    2fba:	88 23       	and	r24, r24
    2fbc:	31 f0       	breq	.+12     	; 0x2fca <__vector_8+0x5a>
    2fbe:	8b b1       	in	r24, 0x0b	; 11
    2fc0:	80 62       	ori	r24, 0x20	; 32
    2fc2:	8b b9       	out	0x0b, r24	; 11
    2fc4:	10 92 7a 09 	sts	0x097A, r1	; 0x80097a <sg_bState>
    2fc8:	06 c0       	rjmp	.+12     	; 0x2fd6 <__vector_8+0x66>
    2fca:	8b b1       	in	r24, 0x0b	; 11
    2fcc:	8f 7d       	andi	r24, 0xDF	; 223
    2fce:	8b b9       	out	0x0b, r24	; 11
    2fd0:	81 e0       	ldi	r24, 0x01	; 1
    2fd2:	80 93 7a 09 	sts	0x097A, r24	; 0x80097a <sg_bState>
    2fd6:	81 e0       	ldi	r24, 0x01	; 1
    2fd8:	80 93 86 09 	sts	0x0986, r24	; 0x800986 <sg_eCell_mc_rxState>
    2fdc:	10 92 88 09 	sts	0x0988, r1	; 0x800988 <sg_u8Cell_mc_rxBitCount>
    2fe0:	22 c0       	rjmp	.+68     	; 0x3026 <__vector_8+0xb6>
    2fe2:	81 30       	cpi	r24, 0x01	; 1
    2fe4:	01 f5       	brne	.+64     	; 0x3026 <__vector_8+0xb6>
    2fe6:	80 91 88 09 	lds	r24, 0x0988	; 0x800988 <sg_u8Cell_mc_rxBitCount>
    2fea:	88 23       	and	r24, r24
    2fec:	e1 f0       	breq	.+56     	; 0x3026 <__vector_8+0xb6>
    2fee:	86 b5       	in	r24, 0x26	; 38
    2ff0:	98 b5       	in	r25, 0x28	; 40
    2ff2:	99 51       	subi	r25, 0x19	; 25
    2ff4:	89 1b       	sub	r24, r25
    2ff6:	90 91 7d 09 	lds	r25, 0x097D	; 0x80097d <sg_minTimingError>
    2ffa:	89 17       	cp	r24, r25
    2ffc:	14 f4       	brge	.+4      	; 0x3002 <__vector_8+0x92>
    2ffe:	80 93 7d 09 	sts	0x097D, r24	; 0x80097d <sg_minTimingError>
    3002:	90 91 7c 09 	lds	r25, 0x097C	; 0x80097c <sg_maxTimingError>
    3006:	98 17       	cp	r25, r24
    3008:	14 f4       	brge	.+4      	; 0x300e <__vector_8+0x9e>
    300a:	80 93 7c 09 	sts	0x097C, r24	; 0x80097c <sg_maxTimingError>
    300e:	86 b5       	in	r24, 0x26	; 38
    3010:	8e 5e       	subi	r24, 0xEE	; 238
    3012:	88 bd       	out	0x28, r24	; 40
    3014:	80 91 62 09 	lds	r24, 0x0962	; 0x800962 <sg_edgeCorrections>
    3018:	90 91 63 09 	lds	r25, 0x0963	; 0x800963 <sg_edgeCorrections+0x1>
    301c:	01 96       	adiw	r24, 0x01	; 1
    301e:	90 93 63 09 	sts	0x0963, r25	; 0x800963 <sg_edgeCorrections+0x1>
    3022:	80 93 62 09 	sts	0x0962, r24	; 0x800962 <sg_edgeCorrections>
    3026:	ff 91       	pop	r31
    3028:	ef 91       	pop	r30
    302a:	9f 91       	pop	r25
    302c:	8f 91       	pop	r24
    302e:	0f 90       	pop	r0
    3030:	0f be       	out	0x3f, r0	; 63
    3032:	0f 90       	pop	r0
    3034:	1f 90       	pop	r1
    3036:	18 95       	reti

Disassembly of section .text.__vector_16:

00002d02 <__vector_16>:
    2d02:	1f 92       	push	r1
    2d04:	0f 92       	push	r0
    2d06:	0f b6       	in	r0, 0x3f	; 63
    2d08:	0f 92       	push	r0
    2d0a:	11 24       	eor	r1, r1
    2d0c:	2f 93       	push	r18
    2d0e:	3f 93       	push	r19
    2d10:	4f 93       	push	r20
    2d12:	5f 93       	push	r21
    2d14:	6f 93       	push	r22
    2d16:	7f 93       	push	r23
    2d18:	8f 93       	push	r24
    2d1a:	9f 93       	push	r25
    2d1c:	af 93       	push	r26
    2d1e:	bf 93       	push	r27
    2d20:	ef 93       	push	r30
    2d22:	ff 93       	push	r31
    2d24:	86 b5       	in	r24, 0x26	; 38
    2d26:	85 5d       	subi	r24, 0xD5	; 213
    2d28:	88 bd       	out	0x28, r24	; 40
    2d2a:	85 b3       	in	r24, 0x15	; 21
    2d2c:	84 60       	ori	r24, 0x04	; 4
    2d2e:	85 bb       	out	0x15, r24	; 21
    2d30:	ee e6       	ldi	r30, 0x6E	; 110
    2d32:	f0 e0       	ldi	r31, 0x00	; 0
    2d34:	80 81       	ld	r24, Z
    2d36:	84 60       	ori	r24, 0x04	; 4
    2d38:	80 83       	st	Z, r24
    2d3a:	20 91 85 09 	lds	r18, 0x0985	; 0x800985 <sg_bCell_mc_rxPriorState>
    2d3e:	83 b1       	in	r24, 0x03	; 3
    2d40:	82 fb       	bst	r24, 2
    2d42:	88 27       	eor	r24, r24
    2d44:	80 f9       	bld	r24, 0
    2d46:	80 93 85 09 	sts	0x0985, r24	; 0x800985 <sg_bCell_mc_rxPriorState>
    2d4a:	90 91 7a 09 	lds	r25, 0x097A	; 0x80097a <sg_bState>
    2d4e:	99 23       	and	r25, r25
    2d50:	31 f0       	breq	.+12     	; 0x2d5e <__vector_16+0x5c>
    2d52:	9b b1       	in	r25, 0x0b	; 11
    2d54:	90 62       	ori	r25, 0x20	; 32
    2d56:	9b b9       	out	0x0b, r25	; 11
    2d58:	10 92 7a 09 	sts	0x097A, r1	; 0x80097a <sg_bState>
    2d5c:	06 c0       	rjmp	.+12     	; 0x2d6a <__vector_16+0x68>
    2d5e:	9b b1       	in	r25, 0x0b	; 11
    2d60:	9f 7d       	andi	r25, 0xDF	; 223
    2d62:	9b b9       	out	0x0b, r25	; 11
    2d64:	81 e0       	ldi	r24, 0x01	; 1
    2d66:	80 93 7a 09 	sts	0x097A, r24	; 0x80097a <sg_bState>
    2d6a:	80 91 88 09 	lds	r24, 0x0988	; 0x800988 <sg_u8Cell_mc_rxBitCount>
    2d6e:	8f 5f       	subi	r24, 0xFF	; 255
    2d70:	80 93 88 09 	sts	0x0988, r24	; 0x800988 <sg_u8Cell_mc_rxBitCount>
    2d74:	81 30       	cpi	r24, 0x01	; 1
    2d76:	19 f4       	brne	.+6      	; 0x2d7e <__vector_16+0x7c>
    2d78:	10 92 87 09 	sts	0x0987, r1	; 0x800987 <sg_u8rxDataByte>
    2d7c:	1d c0       	rjmp	.+58     	; 0x2db8 <__vector_16+0xb6>
    2d7e:	8a 30       	cpi	r24, 0x0A	; 10
    2d80:	38 f4       	brcc	.+14     	; 0x2d90 <__vector_16+0x8e>
    2d82:	80 91 87 09 	lds	r24, 0x0987	; 0x800987 <sg_u8rxDataByte>
    2d86:	88 0f       	add	r24, r24
    2d88:	82 2b       	or	r24, r18
    2d8a:	80 93 87 09 	sts	0x0987, r24	; 0x800987 <sg_u8rxDataByte>
    2d8e:	14 c0       	rjmp	.+40     	; 0x2db8 <__vector_16+0xb6>
    2d90:	20 93 84 09 	sts	0x0984, r18	; 0x800984 <sg_bCell_mc_rxMoreData>
    2d94:	88 e0       	ldi	r24, 0x08	; 8
    2d96:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f0069>
    2d9a:	8c b3       	in	r24, 0x1c	; 28
    2d9c:	82 60       	ori	r24, 0x02	; 2
    2d9e:	8c bb       	out	0x1c, r24	; 28
    2da0:	ee e6       	ldi	r30, 0x6E	; 110
    2da2:	f0 e0       	ldi	r31, 0x00	; 0
    2da4:	80 81       	ld	r24, Z
    2da6:	8b 7f       	andi	r24, 0xFB	; 251
    2da8:	80 83       	st	Z, r24
    2daa:	80 91 87 09 	lds	r24, 0x0987	; 0x800987 <sg_u8rxDataByte>
    2dae:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <vUARTRXData>
    2db2:	83 e0       	ldi	r24, 0x03	; 3
    2db4:	80 93 86 09 	sts	0x0986, r24	; 0x800986 <sg_eCell_mc_rxState>
    2db8:	ff 91       	pop	r31
    2dba:	ef 91       	pop	r30
    2dbc:	bf 91       	pop	r27
    2dbe:	af 91       	pop	r26
    2dc0:	9f 91       	pop	r25
    2dc2:	8f 91       	pop	r24
    2dc4:	7f 91       	pop	r23
    2dc6:	6f 91       	pop	r22
    2dc8:	5f 91       	pop	r21
    2dca:	4f 91       	pop	r20
    2dcc:	3f 91       	pop	r19
    2dce:	2f 91       	pop	r18
    2dd0:	0f 90       	pop	r0
    2dd2:	0f be       	out	0x3f, r0	; 63
    2dd4:	0f 90       	pop	r0
    2dd6:	1f 90       	pop	r1
    2dd8:	18 95       	reti

Disassembly of section .text.__vector_15:

0000244a <__vector_15>:
    244a:	1f 92       	push	r1
    244c:	0f 92       	push	r0
    244e:	0f b6       	in	r0, 0x3f	; 63
    2450:	0f 92       	push	r0
    2452:	11 24       	eor	r1, r1
    2454:	2f 93       	push	r18
    2456:	3f 93       	push	r19
    2458:	4f 93       	push	r20
    245a:	5f 93       	push	r21
    245c:	6f 93       	push	r22
    245e:	7f 93       	push	r23
    2460:	8f 93       	push	r24
    2462:	9f 93       	push	r25
    2464:	af 93       	push	r26
    2466:	bf 93       	push	r27
    2468:	ef 93       	push	r30
    246a:	ff 93       	push	r31
    246c:	86 b5       	in	r24, 0x26	; 38
    246e:	83 5d       	subi	r24, 0xD3	; 211
    2470:	87 bd       	out	0x27, r24	; 39
    2472:	85 b3       	in	r24, 0x15	; 21
    2474:	82 60       	ori	r24, 0x02	; 2
    2476:	85 bb       	out	0x15, r24	; 21
    2478:	ee e6       	ldi	r30, 0x6E	; 110
    247a:	f0 e0       	ldi	r31, 0x00	; 0
    247c:	80 81       	ld	r24, Z
    247e:	82 60       	ori	r24, 0x02	; 2
    2480:	80 83       	st	Z, r24
    2482:	80 91 7e 09 	lds	r24, 0x097E	; 0x80097e <sg_bMCTxNextBit>
    2486:	88 23       	and	r24, r24
    2488:	21 f0       	breq	.+8      	; 0x2492 <__vector_15+0x48>
    248a:	85 b1       	in	r24, 0x05	; 5
    248c:	88 60       	ori	r24, 0x08	; 8
    248e:	85 b9       	out	0x05, r24	; 5
    2490:	03 c0       	rjmp	.+6      	; 0x2498 <__vector_15+0x4e>
    2492:	85 b1       	in	r24, 0x05	; 5
    2494:	87 7f       	andi	r24, 0xF7	; 247
    2496:	85 b9       	out	0x05, r24	; 5
    2498:	80 91 83 09 	lds	r24, 0x0983	; 0x800983 <sg_u8txBitCount>
    249c:	8f 5f       	subi	r24, 0xFF	; 255
    249e:	80 93 83 09 	sts	0x0983, r24	; 0x800983 <sg_u8txBitCount>
    24a2:	80 91 83 09 	lds	r24, 0x0983	; 0x800983 <sg_u8txBitCount>
    24a6:	83 30       	cpi	r24, 0x03	; 3
    24a8:	61 f4       	brne	.+24     	; 0x24c2 <__vector_15+0x78>
    24aa:	80 91 7f 09 	lds	r24, 0x097F	; 0x80097f <sg_bCellReportsReuested>
    24ae:	88 23       	and	r24, r24
    24b0:	41 f0       	breq	.+16     	; 0x24c2 <__vector_15+0x78>
    24b2:	8b e0       	ldi	r24, 0x0B	; 11
    24b4:	80 93 83 09 	sts	0x0983, r24	; 0x800983 <sg_u8txBitCount>
    24b8:	10 92 7e 09 	sts	0x097E, r1	; 0x80097e <sg_bMCTxNextBit>
    24bc:	10 92 81 09 	sts	0x0981, r1	; 0x800981 <sg_btxMoreAvailable>
    24c0:	4d c0       	rjmp	.+154    	; 0x255c <__vector_15+0x112>
    24c2:	80 91 83 09 	lds	r24, 0x0983	; 0x800983 <sg_u8txBitCount>
    24c6:	8a 30       	cpi	r24, 0x0A	; 10
    24c8:	80 f4       	brcc	.+32     	; 0x24ea <__vector_15+0xa0>
    24ca:	80 91 82 09 	lds	r24, 0x0982	; 0x800982 <sg_u8txDataByte>
    24ce:	88 23       	and	r24, r24
    24d0:	24 f4       	brge	.+8      	; 0x24da <__vector_15+0x90>
    24d2:	81 e0       	ldi	r24, 0x01	; 1
    24d4:	80 93 7e 09 	sts	0x097E, r24	; 0x80097e <sg_bMCTxNextBit>
    24d8:	02 c0       	rjmp	.+4      	; 0x24de <__vector_15+0x94>
    24da:	10 92 7e 09 	sts	0x097E, r1	; 0x80097e <sg_bMCTxNextBit>
    24de:	80 91 82 09 	lds	r24, 0x0982	; 0x800982 <sg_u8txDataByte>
    24e2:	88 0f       	add	r24, r24
    24e4:	80 93 82 09 	sts	0x0982, r24	; 0x800982 <sg_u8txDataByte>
    24e8:	39 c0       	rjmp	.+114    	; 0x255c <__vector_15+0x112>
    24ea:	80 91 83 09 	lds	r24, 0x0983	; 0x800983 <sg_u8txBitCount>
    24ee:	8a 30       	cpi	r24, 0x0A	; 10
    24f0:	29 f4       	brne	.+10     	; 0x24fc <__vector_15+0xb2>
    24f2:	80 91 81 09 	lds	r24, 0x0981	; 0x800981 <sg_btxMoreAvailable>
    24f6:	80 93 7e 09 	sts	0x097E, r24	; 0x80097e <sg_bMCTxNextBit>
    24fa:	30 c0       	rjmp	.+96     	; 0x255c <__vector_15+0x112>
    24fc:	80 91 83 09 	lds	r24, 0x0983	; 0x800983 <sg_u8txBitCount>
    2500:	8b 30       	cpi	r24, 0x0B	; 11
    2502:	19 f4       	brne	.+6      	; 0x250a <__vector_15+0xc0>
    2504:	10 92 7e 09 	sts	0x097E, r1	; 0x80097e <sg_bMCTxNextBit>
    2508:	29 c0       	rjmp	.+82     	; 0x255c <__vector_15+0x112>
    250a:	80 91 83 09 	lds	r24, 0x0983	; 0x800983 <sg_u8txBitCount>
    250e:	8c 30       	cpi	r24, 0x0C	; 12
    2510:	29 f5       	brne	.+74     	; 0x255c <__vector_15+0x112>
    2512:	80 91 81 09 	lds	r24, 0x0981	; 0x800981 <sg_btxMoreAvailable>
    2516:	80 93 7e 09 	sts	0x097E, r24	; 0x80097e <sg_bMCTxNextBit>
    251a:	10 92 83 09 	sts	0x0983, r1	; 0x800983 <sg_u8txBitCount>
    251e:	80 91 81 09 	lds	r24, 0x0981	; 0x800981 <sg_btxMoreAvailable>
    2522:	81 11       	cpse	r24, r1
    2524:	08 c0       	rjmp	.+16     	; 0x2536 <__vector_15+0xec>
    2526:	10 92 80 09 	sts	0x0980, r1	; 0x800980 <sg_etxState>
    252a:	ee e6       	ldi	r30, 0x6E	; 110
    252c:	f0 e0       	ldi	r31, 0x00	; 0
    252e:	80 81       	ld	r24, Z
    2530:	8d 7f       	andi	r24, 0xFD	; 253
    2532:	80 83       	st	Z, r24
    2534:	13 c0       	rjmp	.+38     	; 0x255c <__vector_15+0x112>
    2536:	0e 94 01 26 	call	0x4c02	; 0x4c02 <vUARTtxDataAvailable>
    253a:	80 93 81 09 	sts	0x0981, r24	; 0x800981 <sg_btxMoreAvailable>
    253e:	0e 94 d0 21 	call	0x43a0	; 0x43a0 <vUARTtxDataGet>
    2542:	80 93 82 09 	sts	0x0982, r24	; 0x800982 <sg_u8txDataByte>
    2546:	86 b5       	in	r24, 0x26	; 38
    2548:	88 53       	subi	r24, 0x38	; 56
    254a:	87 bd       	out	0x27, r24	; 39
    254c:	85 b3       	in	r24, 0x15	; 21
    254e:	82 60       	ori	r24, 0x02	; 2
    2550:	85 bb       	out	0x15, r24	; 21
    2552:	ee e6       	ldi	r30, 0x6E	; 110
    2554:	f0 e0       	ldi	r31, 0x00	; 0
    2556:	80 81       	ld	r24, Z
    2558:	82 60       	ori	r24, 0x02	; 2
    255a:	80 83       	st	Z, r24
    255c:	ff 91       	pop	r31
    255e:	ef 91       	pop	r30
    2560:	bf 91       	pop	r27
    2562:	af 91       	pop	r26
    2564:	9f 91       	pop	r25
    2566:	8f 91       	pop	r24
    2568:	7f 91       	pop	r23
    256a:	6f 91       	pop	r22
    256c:	5f 91       	pop	r21
    256e:	4f 91       	pop	r20
    2570:	3f 91       	pop	r19
    2572:	2f 91       	pop	r18
    2574:	0f 90       	pop	r0
    2576:	0f be       	out	0x3f, r0	; 63
    2578:	0f 90       	pop	r0
    257a:	1f 90       	pop	r1
    257c:	18 95       	reti

Disassembly of section .text.vUARTInit:

0000459c <vUARTInit>:
    459c:	85 b7       	in	r24, 0x35	; 53
    459e:	8f 7e       	andi	r24, 0xEF	; 239
    45a0:	85 bf       	out	0x35, r24	; 53
    45a2:	84 b1       	in	r24, 0x04	; 4
    45a4:	88 60       	ori	r24, 0x08	; 8
    45a6:	84 b9       	out	0x04, r24	; 4
    45a8:	84 b1       	in	r24, 0x04	; 4
    45aa:	8b 7f       	andi	r24, 0xFB	; 251
    45ac:	84 b9       	out	0x04, r24	; 4
    45ae:	85 b1       	in	r24, 0x05	; 5
    45b0:	8b 7f       	andi	r24, 0xFB	; 251
    45b2:	85 b9       	out	0x05, r24	; 5
    45b4:	8a b1       	in	r24, 0x0a	; 10
    45b6:	80 62       	ori	r24, 0x20	; 32
    45b8:	8a b9       	out	0x0a, r24	; 10
    45ba:	8b b1       	in	r24, 0x0b	; 11
    45bc:	80 62       	ori	r24, 0x20	; 32
    45be:	8b b9       	out	0x0b, r24	; 11
    45c0:	8d b3       	in	r24, 0x1d	; 29
    45c2:	8d 7f       	andi	r24, 0xFD	; 253
    45c4:	8d bb       	out	0x1d, r24	; 29
    45c6:	10 92 80 09 	sts	0x0980, r1	; 0x800980 <sg_etxState>
    45ca:	85 b1       	in	r24, 0x05	; 5
    45cc:	87 7f       	andi	r24, 0xF7	; 247
    45ce:	85 b9       	out	0x05, r24	; 5
    45d0:	08 95       	ret

Disassembly of section .text.vUARTInitReceive:

00004892 <vUARTInitReceive>:
    4892:	8f e7       	ldi	r24, 0x7F	; 127
    4894:	80 93 7d 09 	sts	0x097D, r24	; 0x80097d <sg_minTimingError>
    4898:	80 e8       	ldi	r24, 0x80	; 128
    489a:	80 93 7c 09 	sts	0x097C, r24	; 0x80097c <sg_maxTimingError>
    489e:	10 92 63 09 	sts	0x0963, r1	; 0x800963 <sg_edgeCorrections+0x1>
    48a2:	10 92 62 09 	sts	0x0962, r1	; 0x800962 <sg_edgeCorrections>
    48a6:	88 e0       	ldi	r24, 0x08	; 8
    48a8:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f0069>
    48ac:	8c b3       	in	r24, 0x1c	; 28
    48ae:	82 60       	ori	r24, 0x02	; 2
    48b0:	8c bb       	out	0x1c, r24	; 28
    48b2:	8d b3       	in	r24, 0x1d	; 29
    48b4:	82 60       	ori	r24, 0x02	; 2
    48b6:	8d bb       	out	0x1d, r24	; 29
    48b8:	08 95       	ret

Disassembly of section .text.libgcc.div:

000048ba <__udivmodhi4>:
    48ba:	aa 1b       	sub	r26, r26
    48bc:	bb 1b       	sub	r27, r27
    48be:	51 e1       	ldi	r21, 0x11	; 17
    48c0:	07 c0       	rjmp	.+14     	; 0x48d0 <__udivmodhi4_ep>

000048c2 <__udivmodhi4_loop>:
    48c2:	aa 1f       	adc	r26, r26
    48c4:	bb 1f       	adc	r27, r27
    48c6:	a6 17       	cp	r26, r22
    48c8:	b7 07       	cpc	r27, r23
    48ca:	10 f0       	brcs	.+4      	; 0x48d0 <__udivmodhi4_ep>
    48cc:	a6 1b       	sub	r26, r22
    48ce:	b7 0b       	sbc	r27, r23

000048d0 <__udivmodhi4_ep>:
    48d0:	88 1f       	adc	r24, r24
    48d2:	99 1f       	adc	r25, r25
    48d4:	5a 95       	dec	r21
    48d6:	a9 f7       	brne	.-22     	; 0x48c2 <__udivmodhi4_loop>
    48d8:	80 95       	com	r24
    48da:	90 95       	com	r25
    48dc:	bc 01       	movw	r22, r24
    48de:	cd 01       	movw	r24, r26
    48e0:	08 95       	ret

Disassembly of section .text.libgcc.div:

00004430 <__udivmodsi4>:
    4430:	a1 e2       	ldi	r26, 0x21	; 33
    4432:	1a 2e       	mov	r1, r26
    4434:	aa 1b       	sub	r26, r26
    4436:	bb 1b       	sub	r27, r27
    4438:	fd 01       	movw	r30, r26
    443a:	0d c0       	rjmp	.+26     	; 0x4456 <__udivmodsi4_ep>

0000443c <__udivmodsi4_loop>:
    443c:	aa 1f       	adc	r26, r26
    443e:	bb 1f       	adc	r27, r27
    4440:	ee 1f       	adc	r30, r30
    4442:	ff 1f       	adc	r31, r31
    4444:	a2 17       	cp	r26, r18
    4446:	b3 07       	cpc	r27, r19
    4448:	e4 07       	cpc	r30, r20
    444a:	f5 07       	cpc	r31, r21
    444c:	20 f0       	brcs	.+8      	; 0x4456 <__udivmodsi4_ep>
    444e:	a2 1b       	sub	r26, r18
    4450:	b3 0b       	sbc	r27, r19
    4452:	e4 0b       	sbc	r30, r20
    4454:	f5 0b       	sbc	r31, r21

00004456 <__udivmodsi4_ep>:
    4456:	66 1f       	adc	r22, r22
    4458:	77 1f       	adc	r23, r23
    445a:	88 1f       	adc	r24, r24
    445c:	99 1f       	adc	r25, r25
    445e:	1a 94       	dec	r1
    4460:	69 f7       	brne	.-38     	; 0x443c <__udivmodsi4_loop>
    4462:	60 95       	com	r22
    4464:	70 95       	com	r23
    4466:	80 95       	com	r24
    4468:	90 95       	com	r25
    446a:	9b 01       	movw	r18, r22
    446c:	ac 01       	movw	r20, r24
    446e:	bd 01       	movw	r22, r26
    4470:	cf 01       	movw	r24, r30
    4472:	08 95       	ret

Disassembly of section .text.libgcc.div:

0000473a <__divmodsi4>:
    473a:	05 2e       	mov	r0, r21
    473c:	97 fb       	bst	r25, 7
    473e:	1e f4       	brtc	.+6      	; 0x4746 <__divmodsi4+0xc>
    4740:	00 94       	com	r0
    4742:	0e 94 07 27 	call	0x4e0e	; 0x4e0e <__negsi2>
    4746:	57 fd       	sbrc	r21, 7
    4748:	07 d0       	rcall	.+14     	; 0x4758 <__divmodsi4_neg2>
    474a:	0e 94 18 22 	call	0x4430	; 0x4430 <__udivmodsi4>
    474e:	07 fc       	sbrc	r0, 7
    4750:	03 d0       	rcall	.+6      	; 0x4758 <__divmodsi4_neg2>
    4752:	4e f4       	brtc	.+18     	; 0x4766 <__divmodsi4_exit>
    4754:	0c 94 07 27 	jmp	0x4e0e	; 0x4e0e <__negsi2>

00004758 <__divmodsi4_neg2>:
    4758:	50 95       	com	r21
    475a:	40 95       	com	r20
    475c:	30 95       	com	r19
    475e:	21 95       	neg	r18
    4760:	3f 4f       	sbci	r19, 0xFF	; 255
    4762:	4f 4f       	sbci	r20, 0xFF	; 255
    4764:	5f 4f       	sbci	r21, 0xFF	; 255

00004766 <__divmodsi4_exit>:
    4766:	08 95       	ret

Disassembly of section .text.libgcc.div:

00004e0e <__negsi2>:
    4e0e:	90 95       	com	r25
    4e10:	80 95       	com	r24
    4e12:	70 95       	com	r23
    4e14:	61 95       	neg	r22
    4e16:	7f 4f       	sbci	r23, 0xFF	; 255
    4e18:	8f 4f       	sbci	r24, 0xFF	; 255
    4e1a:	9f 4f       	sbci	r25, 0xFF	; 255
    4e1c:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00004c68 <__umulhisi3>:
    4c68:	a2 9f       	mul	r26, r18
    4c6a:	b0 01       	movw	r22, r0
    4c6c:	b3 9f       	mul	r27, r19
    4c6e:	c0 01       	movw	r24, r0
    4c70:	a3 9f       	mul	r26, r19
    4c72:	70 0d       	add	r23, r0
    4c74:	81 1d       	adc	r24, r1
    4c76:	11 24       	eor	r1, r1
    4c78:	91 1d       	adc	r25, r1
    4c7a:	b2 9f       	mul	r27, r18
    4c7c:	70 0d       	add	r23, r0
    4c7e:	81 1d       	adc	r24, r1
    4c80:	11 24       	eor	r1, r1
    4c82:	91 1d       	adc	r25, r1
    4c84:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00004e68 <__usmulhisi3>:
    4e68:	0e 94 34 26 	call	0x4c68	; 0x4c68 <__umulhisi3>

00004e6c <__usmulhisi3_tail>:
    4e6c:	b7 ff       	sbrs	r27, 7
    4e6e:	08 95       	ret
    4e70:	82 1b       	sub	r24, r18
    4e72:	93 0b       	sbc	r25, r19
    4e74:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00004d64 <__muluhisi3>:
    4d64:	0e 94 34 26 	call	0x4c68	; 0x4c68 <__umulhisi3>
    4d68:	a5 9f       	mul	r26, r21
    4d6a:	90 0d       	add	r25, r0
    4d6c:	b4 9f       	mul	r27, r20
    4d6e:	90 0d       	add	r25, r0
    4d70:	a4 9f       	mul	r26, r20
    4d72:	80 0d       	add	r24, r0
    4d74:	91 1d       	adc	r25, r1
    4d76:	11 24       	eor	r1, r1
    4d78:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00004e1e <__mulshisi3>:
    4e1e:	b7 ff       	sbrs	r27, 7
    4e20:	0c 94 b2 26 	jmp	0x4d64	; 0x4d64 <__muluhisi3>

00004e24 <__mulohisi3>:
    4e24:	0e 94 b2 26 	call	0x4d64	; 0x4d64 <__muluhisi3>
    4e28:	82 1b       	sub	r24, r18
    4e2a:	93 0b       	sbc	r25, r19
    4e2c:	08 95       	ret

Disassembly of section .text.libgcc:

00004e2e <__xload_2>:
    4e2e:	57 fd       	sbrc	r21, 7
    4e30:	03 c0       	rjmp	.+6      	; 0x4e38 <__xload_2+0xa>
    4e32:	65 91       	lpm	r22, Z+
    4e34:	75 91       	lpm	r23, Z+
    4e36:	08 95       	ret
    4e38:	61 91       	ld	r22, Z+
    4e3a:	71 91       	ld	r23, Z+
    4e3c:	08 95       	ret

Disassembly of section .text.libgcc:

00004cf2 <__xload_4>:
    4cf2:	57 fd       	sbrc	r21, 7
    4cf4:	05 c0       	rjmp	.+10     	; 0x4d00 <__xload_4+0xe>
    4cf6:	65 91       	lpm	r22, Z+
    4cf8:	75 91       	lpm	r23, Z+
    4cfa:	85 91       	lpm	r24, Z+
    4cfc:	95 91       	lpm	r25, Z+
    4cfe:	08 95       	ret
    4d00:	61 91       	ld	r22, Z+
    4d02:	71 91       	ld	r23, Z+
    4d04:	81 91       	ld	r24, Z+
    4d06:	91 91       	ld	r25, Z+
    4d08:	08 95       	ret

Disassembly of section .text.libgcc:

00004d0a <__adddi3_s8>:
    4d0a:	00 24       	eor	r0, r0
    4d0c:	a7 fd       	sbrc	r26, 7
    4d0e:	00 94       	com	r0
    4d10:	2a 0f       	add	r18, r26
    4d12:	30 1d       	adc	r19, r0
    4d14:	40 1d       	adc	r20, r0
    4d16:	50 1d       	adc	r21, r0
    4d18:	60 1d       	adc	r22, r0
    4d1a:	70 1d       	adc	r23, r0
    4d1c:	80 1d       	adc	r24, r0
    4d1e:	90 1d       	adc	r25, r0
    4d20:	08 95       	ret

Disassembly of section .text.__dummy_fini:

00004ec6 <_fini>:
    4ec6:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00004ec8 <__funcs_on_exit>:
    4ec8:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00004eca <__simulator_exit>:
    4eca:	08 95       	ret

Disassembly of section .text.exit:

00004d7a <exit>:
    4d7a:	ec 01       	movw	r28, r24
    4d7c:	0e 94 64 27 	call	0x4ec8	; 0x4ec8 <__funcs_on_exit>
    4d80:	0e 94 63 27 	call	0x4ec6	; 0x4ec6 <_fini>
    4d84:	ce 01       	movw	r24, r28
    4d86:	0e 94 65 27 	call	0x4eca	; 0x4eca <__simulator_exit>
    4d8a:	ce 01       	movw	r24, r28
    4d8c:	0e 94 60 27 	call	0x4ec0	; 0x4ec0 <_Exit>

Disassembly of section .text.memcpy:

00004708 <memcpy>:
    4708:	cf 92       	push	r12
    470a:	df 92       	push	r13
    470c:	ef 92       	push	r14
    470e:	6a 01       	movw	r12, r20
    4710:	e6 2e       	mov	r14, r22
    4712:	dc 01       	movw	r26, r24
    4714:	28 0f       	add	r18, r24
    4716:	39 1f       	adc	r19, r25
    4718:	a2 17       	cp	r26, r18
    471a:	b3 07       	cpc	r27, r19
    471c:	51 f0       	breq	.+20     	; 0x4732 <memcpy+0x2a>
    471e:	f6 01       	movw	r30, r12
    4720:	44 91       	lpm	r20, Z
    4722:	e7 fc       	sbrc	r14, 7
    4724:	40 81       	ld	r20, Z
    4726:	4d 93       	st	X+, r20
    4728:	4f ef       	ldi	r20, 0xFF	; 255
    472a:	c4 1a       	sub	r12, r20
    472c:	d4 0a       	sbc	r13, r20
    472e:	e4 0a       	sbc	r14, r20
    4730:	f3 cf       	rjmp	.-26     	; 0x4718 <memcpy+0x10>
    4732:	ef 90       	pop	r14
    4734:	df 90       	pop	r13
    4736:	cf 90       	pop	r12
    4738:	08 95       	ret

Disassembly of section .text.memset:

00004db6 <memset>:
    4db6:	fc 01       	movw	r30, r24
    4db8:	48 0f       	add	r20, r24
    4dba:	59 1f       	adc	r21, r25
    4dbc:	e4 17       	cp	r30, r20
    4dbe:	f5 07       	cpc	r31, r21
    4dc0:	11 f0       	breq	.+4      	; 0x4dc6 <memset+0x10>
    4dc2:	61 93       	st	Z+, r22
    4dc4:	fb cf       	rjmp	.-10     	; 0x4dbc <memset+0x6>
    4dc6:	08 95       	ret

Disassembly of section .text.gmtime:

00004eac <gmtime>:
    4eac:	44 e0       	ldi	r20, 0x04	; 4
    4eae:	59 e0       	ldi	r21, 0x09	; 9
    4eb0:	0e 94 d1 1e 	call	0x3da2	; 0x3da2 <__gmtime_r>
    4eb4:	08 95       	ret

Disassembly of section .text.__gmtime_r:

00003da2 <__gmtime_r>:
    3da2:	a0 e0       	ldi	r26, 0x00	; 0
    3da4:	b0 e0       	ldi	r27, 0x00	; 0
    3da6:	e7 ed       	ldi	r30, 0xD7	; 215
    3da8:	fe e1       	ldi	r31, 0x1E	; 30
    3daa:	0c 94 b8 22 	jmp	0x4570	; 0x4570 <__prologue_saves__+0xc>
    3dae:	ea 01       	movw	r28, r20
    3db0:	fb 01       	movw	r30, r22
    3db2:	58 2f       	mov	r21, r24
    3db4:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <__xload_4>
    3db8:	4b 01       	movw	r8, r22
    3dba:	5c 01       	movw	r10, r24
    3dbc:	c1 2c       	mov	r12, r1
    3dbe:	d1 2c       	mov	r13, r1
    3dc0:	76 01       	movw	r14, r12
    3dc2:	8e 01       	movw	r16, r28
    3dc4:	9b 01       	movw	r18, r22
    3dc6:	a5 01       	movw	r20, r10
    3dc8:	60 e0       	ldi	r22, 0x00	; 0
    3dca:	70 e0       	ldi	r23, 0x00	; 0
    3dcc:	80 e0       	ldi	r24, 0x00	; 0
    3dce:	90 e0       	ldi	r25, 0x00	; 0
    3dd0:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <__secs_to_tm>
    3dd4:	97 ff       	sbrs	r25, 7
    3dd6:	09 c0       	rjmp	.+18     	; 0x3dea <__gmtime_r+0x48>
    3dd8:	8f e4       	ldi	r24, 0x4F	; 79
    3dda:	90 e0       	ldi	r25, 0x00	; 0
    3ddc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    3de0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    3de4:	80 e0       	ldi	r24, 0x00	; 0
    3de6:	90 e0       	ldi	r25, 0x00	; 0
    3de8:	0d c0       	rjmp	.+26     	; 0x3e04 <__gmtime_r+0x62>
    3dea:	19 8a       	std	Y+17, r1	; 0x11
    3dec:	18 8a       	std	Y+16, r1	; 0x10
    3dee:	1a 8a       	std	Y+18, r1	; 0x12
    3df0:	1b 8a       	std	Y+19, r1	; 0x13
    3df2:	1c 8a       	std	Y+20, r1	; 0x14
    3df4:	1d 8a       	std	Y+21, r1	; 0x15
    3df6:	8f ea       	ldi	r24, 0xAF	; 175
    3df8:	93 e0       	ldi	r25, 0x03	; 3
    3dfa:	a0 e0       	ldi	r26, 0x00	; 0
    3dfc:	8e 8b       	std	Y+22, r24	; 0x16
    3dfe:	9f 8b       	std	Y+23, r25	; 0x17
    3e00:	a8 8f       	std	Y+24, r26	; 0x18
    3e02:	ce 01       	movw	r24, r28
    3e04:	cd b7       	in	r28, 0x3d	; 61
    3e06:	de b7       	in	r29, 0x3e	; 62
    3e08:	ec e0       	ldi	r30, 0x0C	; 12
    3e0a:	0c 94 ef 22 	jmp	0x45de	; 0x45de <__epilogue_restores__+0xc>

Disassembly of section .text.mktime:

00003938 <mktime>:
    3938:	a9 e1       	ldi	r26, 0x19	; 25
    393a:	b0 e0       	ldi	r27, 0x00	; 0
    393c:	e2 ea       	ldi	r30, 0xA2	; 162
    393e:	fc e1       	ldi	r31, 0x1C	; 28
    3940:	0c 94 b4 22 	jmp	0x4568	; 0x4568 <__prologue_saves__+0x4>
    3944:	2c 01       	movw	r4, r24
    3946:	bc 01       	movw	r22, r24
    3948:	80 e8       	ldi	r24, 0x80	; 128
    394a:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <__tm_to_secs>
    394e:	39 01       	movw	r6, r18
    3950:	4a 01       	movw	r8, r20
    3952:	59 01       	movw	r10, r18
    3954:	6a 01       	movw	r12, r20
    3956:	e1 2c       	mov	r14, r1
    3958:	f1 2c       	mov	r15, r1
    395a:	00 e0       	ldi	r16, 0x00	; 0
    395c:	10 e0       	ldi	r17, 0x00	; 0
    395e:	0e 94 f6 26 	call	0x4dec	; 0x4dec <__cmpdi2>
    3962:	f9 f4       	brne	.+62     	; 0x39a2 <mktime+0x6a>
    3964:	1a 8a       	std	Y+18, r1	; 0x12
    3966:	19 8a       	std	Y+17, r1	; 0x11
    3968:	1b 8a       	std	Y+19, r1	; 0x13
    396a:	1c 8a       	std	Y+20, r1	; 0x14
    396c:	1d 8a       	std	Y+21, r1	; 0x15
    396e:	1e 8a       	std	Y+22, r1	; 0x16
    3970:	23 eb       	ldi	r18, 0xB3	; 179
    3972:	33 e0       	ldi	r19, 0x03	; 3
    3974:	40 e0       	ldi	r20, 0x00	; 0
    3976:	2f 8b       	std	Y+23, r18	; 0x17
    3978:	38 8f       	std	Y+24, r19	; 0x18
    397a:	49 8f       	std	Y+25, r20	; 0x19
    397c:	8e 01       	movw	r16, r28
    397e:	0f 5f       	subi	r16, 0xFF	; 255
    3980:	1f 4f       	sbci	r17, 0xFF	; 255
    3982:	93 01       	movw	r18, r6
    3984:	48 2d       	mov	r20, r8
    3986:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <__secs_to_tm>
    398a:	97 fd       	sbrc	r25, 7
    398c:	0a c0       	rjmp	.+20     	; 0x39a2 <mktime+0x6a>
    398e:	89 e1       	ldi	r24, 0x19	; 25
    3990:	f8 01       	movw	r30, r16
    3992:	d2 01       	movw	r26, r4
    3994:	01 90       	ld	r0, Z+
    3996:	0d 92       	st	X+, r0
    3998:	8a 95       	dec	r24
    399a:	e1 f7       	brne	.-8      	; 0x3994 <mktime+0x5c>
    399c:	b3 01       	movw	r22, r6
    399e:	c4 01       	movw	r24, r8
    39a0:	0a c0       	rjmp	.+20     	; 0x39b6 <mktime+0x7e>
    39a2:	8f e4       	ldi	r24, 0x4F	; 79
    39a4:	90 e0       	ldi	r25, 0x00	; 0
    39a6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    39aa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    39ae:	6f ef       	ldi	r22, 0xFF	; 255
    39b0:	7f ef       	ldi	r23, 0xFF	; 255
    39b2:	8f ef       	ldi	r24, 0xFF	; 255
    39b4:	9f ef       	ldi	r25, 0xFF	; 255
    39b6:	69 96       	adiw	r28, 0x19	; 25
    39b8:	e0 e1       	ldi	r30, 0x10	; 16
    39ba:	0c 94 eb 22 	jmp	0x45d6	; 0x45d6 <__epilogue_restores__+0x4>

Disassembly of section .text._Exit:

00004ec0 <_Exit>:
    4ec0:	0e 94 6b 00 	call	0xd6	; 0xd6 <_exit>

Disassembly of section .text.__tm_to_secs:

00001ce0 <__tm_to_secs>:
    1ce0:	a5 e0       	ldi	r26, 0x05	; 5
    1ce2:	b0 e0       	ldi	r27, 0x00	; 0
    1ce4:	e6 e7       	ldi	r30, 0x76	; 118
    1ce6:	fe e0       	ldi	r31, 0x0E	; 14
    1ce8:	0c 94 b2 22 	jmp	0x4564	; 0x4564 <__prologue_saves__>
    1cec:	3b 01       	movw	r6, r22
    1cee:	88 2e       	mov	r8, r24
    1cf0:	a8 2f       	mov	r26, r24
    1cf2:	cb 01       	movw	r24, r22
    1cf4:	0a 96       	adiw	r24, 0x0a	; 10
    1cf6:	a1 1d       	adc	r26, r1
    1cf8:	fc 01       	movw	r30, r24
    1cfa:	5a 2f       	mov	r21, r26
    1cfc:	0e 94 17 27 	call	0x4e2e	; 0x4e2e <__xload_2>
    1d00:	5b 01       	movw	r10, r22
    1d02:	9b 01       	movw	r18, r22
    1d04:	9b 2c       	mov	r9, r11
    1d06:	99 0c       	add	r9, r9
    1d08:	99 08       	sbc	r9, r9
    1d0a:	f9 2c       	mov	r15, r9
    1d0c:	b9 2d       	mov	r27, r9
    1d0e:	a9 2d       	mov	r26, r9
    1d10:	89 2d       	mov	r24, r9
    1d12:	99 2d       	mov	r25, r9
    1d14:	e8 2c       	mov	r14, r8
    1d16:	63 01       	movw	r12, r6
    1d18:	48 e0       	ldi	r20, 0x08	; 8
    1d1a:	c4 0e       	add	r12, r20
    1d1c:	d1 1c       	adc	r13, r1
    1d1e:	e1 1c       	adc	r14, r1
    1d20:	f6 01       	movw	r30, r12
    1d22:	5e 2d       	mov	r21, r14
    1d24:	0e 94 17 27 	call	0x4e2e	; 0x4e2e <__xload_2>
    1d28:	2b 01       	movw	r4, r22
    1d2a:	6c 30       	cpi	r22, 0x0C	; 12
    1d2c:	71 05       	cpc	r23, r1
    1d2e:	10 f1       	brcs	.+68     	; 0x1d74 <__tm_to_secs+0x94>
    1d30:	cb 01       	movw	r24, r22
    1d32:	6c e0       	ldi	r22, 0x0C	; 12
    1d34:	70 e0       	ldi	r23, 0x00	; 0
    1d36:	0e 94 71 24 	call	0x48e2	; 0x48e2 <__divmodhi4>
    1d3a:	2c 01       	movw	r4, r24
    1d3c:	97 ff       	sbrs	r25, 7
    1d3e:	05 c0       	rjmp	.+10     	; 0x1d4a <__tm_to_secs+0x6a>
    1d40:	61 50       	subi	r22, 0x01	; 1
    1d42:	71 09       	sbc	r23, r1
    1d44:	8c e0       	ldi	r24, 0x0C	; 12
    1d46:	48 0e       	add	r4, r24
    1d48:	51 1c       	adc	r5, r1
    1d4a:	97 2f       	mov	r25, r23
    1d4c:	99 0f       	add	r25, r25
    1d4e:	99 0b       	sbc	r25, r25
    1d50:	9b 01       	movw	r18, r22
    1d52:	49 2f       	mov	r20, r25
    1d54:	59 2f       	mov	r21, r25
    1d56:	69 2f       	mov	r22, r25
    1d58:	79 2f       	mov	r23, r25
    1d5a:	89 2f       	mov	r24, r25
    1d5c:	c9 2c       	mov	r12, r9
    1d5e:	d9 2c       	mov	r13, r9
    1d60:	e9 2c       	mov	r14, r9
    1d62:	f9 2c       	mov	r15, r9
    1d64:	09 2d       	mov	r16, r9
    1d66:	19 2d       	mov	r17, r9
    1d68:	0e 94 ed 26 	call	0x4dda	; 0x4dda <__adddi3>
    1d6c:	94 2e       	mov	r9, r20
    1d6e:	f5 2e       	mov	r15, r21
    1d70:	b6 2f       	mov	r27, r22
    1d72:	a7 2f       	mov	r26, r23
    1d74:	8e 01       	movw	r16, r28
    1d76:	0f 5f       	subi	r16, 0xFF	; 255
    1d78:	1f 4f       	sbci	r17, 0xFF	; 255
    1d7a:	49 2d       	mov	r20, r9
    1d7c:	5f 2d       	mov	r21, r15
    1d7e:	6b 2f       	mov	r22, r27
    1d80:	7a 2f       	mov	r23, r26
    1d82:	0e 94 1c 0a 	call	0x1438	; 0x1438 <__year_to_secs>
    1d86:	59 01       	movw	r10, r18
    1d88:	6a 01       	movw	r12, r20
    1d8a:	7b 01       	movw	r14, r22
    1d8c:	8c 01       	movw	r16, r24
    1d8e:	69 81       	ldd	r22, Y+1	; 0x01
    1d90:	7a 81       	ldd	r23, Y+2	; 0x02
    1d92:	c2 01       	movw	r24, r4
    1d94:	0e 94 77 22 	call	0x44ee	; 0x44ee <__month_to_secs>
    1d98:	1b 01       	movw	r2, r22
    1d9a:	2c 01       	movw	r4, r24
    1d9c:	55 0c       	add	r5, r5
    1d9e:	22 08       	sbc	r2, r2
    1da0:	32 2c       	mov	r3, r2
    1da2:	21 01       	movw	r4, r2
    1da4:	9b 01       	movw	r18, r22
    1da6:	ac 01       	movw	r20, r24
    1da8:	62 2d       	mov	r22, r2
    1daa:	72 2d       	mov	r23, r2
    1dac:	82 2d       	mov	r24, r2
    1dae:	92 2d       	mov	r25, r2
    1db0:	0e 94 ed 26 	call	0x4dda	; 0x4dda <__adddi3>
    1db4:	19 01       	movw	r2, r18
    1db6:	2a 01       	movw	r4, r20
    1db8:	96 2e       	mov	r9, r22
    1dba:	7b 83       	std	Y+3, r23	; 0x03
    1dbc:	8c 83       	std	Y+4, r24	; 0x04
    1dbe:	9d 83       	std	Y+5, r25	; 0x05
    1dc0:	a8 2d       	mov	r26, r8
    1dc2:	c3 01       	movw	r24, r6
    1dc4:	06 96       	adiw	r24, 0x06	; 6
    1dc6:	a1 1d       	adc	r26, r1
    1dc8:	fc 01       	movw	r30, r24
    1dca:	5a 2f       	mov	r21, r26
    1dcc:	0e 94 17 27 	call	0x4e2e	; 0x4e2e <__xload_2>
    1dd0:	61 50       	subi	r22, 0x01	; 1
    1dd2:	71 09       	sbc	r23, r1
    1dd4:	97 2f       	mov	r25, r23
    1dd6:	99 0f       	add	r25, r25
    1dd8:	99 0b       	sbc	r25, r25
    1dda:	30 e8       	ldi	r19, 0x80	; 128
    1ddc:	a3 2e       	mov	r10, r19
    1dde:	41 e5       	ldi	r20, 0x51	; 81
    1de0:	b4 2e       	mov	r11, r20
    1de2:	cc 24       	eor	r12, r12
    1de4:	c3 94       	inc	r12
    1de6:	d1 2c       	mov	r13, r1
    1de8:	e1 2c       	mov	r14, r1
    1dea:	f1 2c       	mov	r15, r1
    1dec:	00 e0       	ldi	r16, 0x00	; 0
    1dee:	10 e0       	ldi	r17, 0x00	; 0
    1df0:	9b 01       	movw	r18, r22
    1df2:	49 2f       	mov	r20, r25
    1df4:	59 2f       	mov	r21, r25
    1df6:	69 2f       	mov	r22, r25
    1df8:	79 2f       	mov	r23, r25
    1dfa:	89 2f       	mov	r24, r25
    1dfc:	0e 94 a3 1a 	call	0x3546	; 0x3546 <__muldi3>
    1e00:	51 01       	movw	r10, r2
    1e02:	62 01       	movw	r12, r4
    1e04:	e9 2c       	mov	r14, r9
    1e06:	fb 80       	ldd	r15, Y+3	; 0x03
    1e08:	0c 81       	ldd	r16, Y+4	; 0x04
    1e0a:	1d 81       	ldd	r17, Y+5	; 0x05
    1e0c:	0e 94 ed 26 	call	0x4dda	; 0x4dda <__adddi3>
    1e10:	59 01       	movw	r10, r18
    1e12:	6a 01       	movw	r12, r20
    1e14:	7b 01       	movw	r14, r22
    1e16:	8c 01       	movw	r16, r24
    1e18:	a8 2d       	mov	r26, r8
    1e1a:	c3 01       	movw	r24, r6
    1e1c:	04 96       	adiw	r24, 0x04	; 4
    1e1e:	a1 1d       	adc	r26, r1
    1e20:	fc 01       	movw	r30, r24
    1e22:	5a 2f       	mov	r21, r26
    1e24:	0e 94 17 27 	call	0x4e2e	; 0x4e2e <__xload_2>
    1e28:	07 2e       	mov	r0, r23
    1e2a:	00 0c       	add	r0, r0
    1e2c:	88 0b       	sbc	r24, r24
    1e2e:	99 0b       	sbc	r25, r25
    1e30:	20 e1       	ldi	r18, 0x10	; 16
    1e32:	3e e0       	ldi	r19, 0x0E	; 14
    1e34:	40 e0       	ldi	r20, 0x00	; 0
    1e36:	50 e0       	ldi	r21, 0x00	; 0
    1e38:	0e 94 43 26 	call	0x4c86	; 0x4c86 <__mulsidi3>
    1e3c:	0e 94 ed 26 	call	0x4dda	; 0x4dda <__adddi3>
    1e40:	59 01       	movw	r10, r18
    1e42:	6a 01       	movw	r12, r20
    1e44:	7b 01       	movw	r14, r22
    1e46:	8c 01       	movw	r16, r24
    1e48:	a8 2d       	mov	r26, r8
    1e4a:	c3 01       	movw	r24, r6
    1e4c:	02 96       	adiw	r24, 0x02	; 2
    1e4e:	a1 1d       	adc	r26, r1
    1e50:	fc 01       	movw	r30, r24
    1e52:	5a 2f       	mov	r21, r26
    1e54:	0e 94 17 27 	call	0x4e2e	; 0x4e2e <__xload_2>
    1e58:	07 2e       	mov	r0, r23
    1e5a:	00 0c       	add	r0, r0
    1e5c:	88 0b       	sbc	r24, r24
    1e5e:	99 0b       	sbc	r25, r25
    1e60:	2c e3       	ldi	r18, 0x3C	; 60
    1e62:	30 e0       	ldi	r19, 0x00	; 0
    1e64:	40 e0       	ldi	r20, 0x00	; 0
    1e66:	50 e0       	ldi	r21, 0x00	; 0
    1e68:	0e 94 43 26 	call	0x4c86	; 0x4c86 <__mulsidi3>
    1e6c:	0e 94 ed 26 	call	0x4dda	; 0x4dda <__adddi3>
    1e70:	59 01       	movw	r10, r18
    1e72:	6a 01       	movw	r12, r20
    1e74:	7b 01       	movw	r14, r22
    1e76:	8c 01       	movw	r16, r24
    1e78:	f3 01       	movw	r30, r6
    1e7a:	58 2d       	mov	r21, r8
    1e7c:	0e 94 17 27 	call	0x4e2e	; 0x4e2e <__xload_2>
    1e80:	9b 01       	movw	r18, r22
    1e82:	93 2f       	mov	r25, r19
    1e84:	99 0f       	add	r25, r25
    1e86:	99 0b       	sbc	r25, r25
    1e88:	49 2f       	mov	r20, r25
    1e8a:	59 2f       	mov	r21, r25
    1e8c:	69 2f       	mov	r22, r25
    1e8e:	79 2f       	mov	r23, r25
    1e90:	89 2f       	mov	r24, r25
    1e92:	0e 94 ed 26 	call	0x4dda	; 0x4dda <__adddi3>
    1e96:	25 96       	adiw	r28, 0x05	; 5
    1e98:	e2 e1       	ldi	r30, 0x12	; 18
    1e9a:	0c 94 e9 22 	jmp	0x45d2	; 0x45d2 <__epilogue_restores__>

Disassembly of section .text.__year_to_secs:

00001438 <__year_to_secs>:
    1438:	ac e0       	ldi	r26, 0x0C	; 12
    143a:	b0 e0       	ldi	r27, 0x00	; 0
    143c:	e2 e2       	ldi	r30, 0x22	; 34
    143e:	fa e0       	ldi	r31, 0x0A	; 10
    1440:	0c 94 b2 22 	jmp	0x4564	; 0x4564 <__prologue_saves__>
    1444:	49 01       	movw	r8, r18
    1446:	5a 01       	movw	r10, r20
    1448:	6b 01       	movw	r12, r22
    144a:	7c 01       	movw	r14, r24
    144c:	1c 83       	std	Y+4, r17	; 0x04
    144e:	0b 83       	std	Y+3, r16	; 0x03
    1450:	2a 38       	cpi	r18, 0x8A	; 138
    1452:	31 05       	cpc	r19, r1
    1454:	41 05       	cpc	r20, r1
    1456:	51 05       	cpc	r21, r1
    1458:	61 05       	cpc	r22, r1
    145a:	71 05       	cpc	r23, r1
    145c:	81 05       	cpc	r24, r1
    145e:	91 05       	cpc	r25, r1
    1460:	11 f0       	breq	.+4      	; 0x1466 <__year_to_secs+0x2e>
    1462:	0c f0       	brlt	.+2      	; 0x1466 <__year_to_secs+0x2e>
    1464:	42 c0       	rjmp	.+132    	; 0x14ea <__year_to_secs+0xb2>
    1466:	f9 01       	movw	r30, r18
    1468:	e4 54       	subi	r30, 0x44	; 68
    146a:	f1 09       	sbc	r31, r1
    146c:	f5 95       	asr	r31
    146e:	e7 95       	ror	r30
    1470:	f5 95       	asr	r31
    1472:	e7 95       	ror	r30
    1474:	c9 01       	movw	r24, r18
    1476:	83 70       	andi	r24, 0x03	; 3
    1478:	99 27       	eor	r25, r25
    147a:	89 2b       	or	r24, r25
    147c:	51 f4       	brne	.+20     	; 0x1492 <__year_to_secs+0x5a>
    147e:	31 97       	sbiw	r30, 0x01	; 1
    1480:	01 15       	cp	r16, r1
    1482:	11 05       	cpc	r17, r1
    1484:	69 f0       	breq	.+26     	; 0x14a0 <__year_to_secs+0x68>
    1486:	81 e0       	ldi	r24, 0x01	; 1
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	d8 01       	movw	r26, r16
    148c:	8d 93       	st	X+, r24
    148e:	9c 93       	st	X, r25
    1490:	07 c0       	rjmp	.+14     	; 0x14a0 <__year_to_secs+0x68>
    1492:	8b 81       	ldd	r24, Y+3	; 0x03
    1494:	9c 81       	ldd	r25, Y+4	; 0x04
    1496:	00 97       	sbiw	r24, 0x00	; 0
    1498:	19 f0       	breq	.+6      	; 0x14a0 <__year_to_secs+0x68>
    149a:	dc 01       	movw	r26, r24
    149c:	1d 92       	st	X+, r1
    149e:	1c 92       	st	X, r1
    14a0:	d9 01       	movw	r26, r18
    14a2:	a6 54       	subi	r26, 0x46	; 70
    14a4:	b1 09       	sbc	r27, r1
    14a6:	20 e8       	ldi	r18, 0x80	; 128
    14a8:	33 e3       	ldi	r19, 0x33	; 51
    14aa:	41 ee       	ldi	r20, 0xE1	; 225
    14ac:	51 e0       	ldi	r21, 0x01	; 1
    14ae:	0e 94 0f 27 	call	0x4e1e	; 0x4e1e <__mulshisi3>
    14b2:	6b 01       	movw	r12, r22
    14b4:	7c 01       	movw	r14, r24
    14b6:	df 01       	movw	r26, r30
    14b8:	20 e8       	ldi	r18, 0x80	; 128
    14ba:	31 e5       	ldi	r19, 0x51	; 81
    14bc:	41 e0       	ldi	r20, 0x01	; 1
    14be:	50 e0       	ldi	r21, 0x00	; 0
    14c0:	0e 94 0f 27 	call	0x4e1e	; 0x4e1e <__mulshisi3>
    14c4:	dc 01       	movw	r26, r24
    14c6:	cb 01       	movw	r24, r22
    14c8:	8c 0d       	add	r24, r12
    14ca:	9d 1d       	adc	r25, r13
    14cc:	ae 1d       	adc	r26, r14
    14ce:	bf 1d       	adc	r27, r15
    14d0:	9c 01       	movw	r18, r24
    14d2:	ad 01       	movw	r20, r26
    14d4:	6c 01       	movw	r12, r24
    14d6:	7d 01       	movw	r14, r26
    14d8:	ff 0c       	add	r15, r15
    14da:	cc 08       	sbc	r12, r12
    14dc:	dc 2c       	mov	r13, r12
    14de:	76 01       	movw	r14, r12
    14e0:	ac 2d       	mov	r26, r12
    14e2:	fc 2d       	mov	r31, r12
    14e4:	ec 2d       	mov	r30, r12
    14e6:	9c 2d       	mov	r25, r12
    14e8:	cb c0       	rjmp	.+406    	; 0x1680 <__year_to_secs+0x248>
    14ea:	eb 81       	ldd	r30, Y+3	; 0x03
    14ec:	fc 81       	ldd	r31, Y+4	; 0x04
    14ee:	ef 2b       	or	r30, r31
    14f0:	31 f4       	brne	.+12     	; 0x14fe <__year_to_secs+0xc6>
    14f2:	1a 82       	std	Y+2, r1	; 0x02
    14f4:	19 82       	std	Y+1, r1	; 0x01
    14f6:	ce 01       	movw	r24, r28
    14f8:	01 96       	adiw	r24, 0x01	; 1
    14fa:	9c 83       	std	Y+4, r25	; 0x04
    14fc:	8b 83       	std	Y+3, r24	; 0x03
    14fe:	c4 01       	movw	r24, r8
    1500:	84 56       	subi	r24, 0x64	; 100
    1502:	91 09       	sbc	r25, r1
    1504:	60 e9       	ldi	r22, 0x90	; 144
    1506:	71 e0       	ldi	r23, 0x01	; 1
    1508:	0e 94 71 24 	call	0x48e2	; 0x48e2 <__divmodhi4>
    150c:	7e 83       	std	Y+6, r23	; 0x06
    150e:	6d 83       	std	Y+5, r22	; 0x05
    1510:	94 01       	movw	r18, r8
    1512:	a5 01       	movw	r20, r10
    1514:	b6 01       	movw	r22, r12
    1516:	c7 01       	movw	r24, r14
    1518:	ac e9       	ldi	r26, 0x9C	; 156
    151a:	0e 94 85 26 	call	0x4d0a	; 0x4d0a <__adddi3_s8>
    151e:	19 01       	movw	r2, r18
    1520:	2a 01       	movw	r4, r20
    1522:	3b 01       	movw	r6, r22
    1524:	8f 83       	std	Y+7, r24	; 0x07
    1526:	98 87       	std	Y+8, r25	; 0x08
    1528:	70 e9       	ldi	r23, 0x90	; 144
    152a:	a7 2e       	mov	r10, r23
    152c:	bb 24       	eor	r11, r11
    152e:	b3 94       	inc	r11
    1530:	c1 2c       	mov	r12, r1
    1532:	d1 2c       	mov	r13, r1
    1534:	e1 2c       	mov	r14, r1
    1536:	f1 2c       	mov	r15, r1
    1538:	00 e0       	ldi	r16, 0x00	; 0
    153a:	10 e0       	ldi	r17, 0x00	; 0
    153c:	91 01       	movw	r18, r2
    153e:	a2 01       	movw	r20, r4
    1540:	b3 01       	movw	r22, r6
    1542:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <__moddi3>
    1546:	c9 01       	movw	r24, r18
    1548:	00 97       	sbiw	r24, 0x00	; 0
    154a:	59 f4       	brne	.+22     	; 0x1562 <__year_to_secs+0x12a>
    154c:	81 e0       	ldi	r24, 0x01	; 1
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	ab 81       	ldd	r26, Y+3	; 0x03
    1552:	bc 81       	ldd	r27, Y+4	; 0x04
    1554:	8d 93       	st	X+, r24
    1556:	9c 93       	st	X, r25
    1558:	20 e0       	ldi	r18, 0x00	; 0
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	40 e0       	ldi	r20, 0x00	; 0
    155e:	50 e0       	ldi	r21, 0x00	; 0
    1560:	33 c0       	rjmp	.+102    	; 0x15c8 <__year_to_secs+0x190>
    1562:	28 3c       	cpi	r18, 0xC8	; 200
    1564:	31 05       	cpc	r19, r1
    1566:	6c f0       	brlt	.+26     	; 0x1582 <__year_to_secs+0x14a>
    1568:	2c 32       	cpi	r18, 0x2C	; 44
    156a:	31 40       	sbci	r19, 0x01	; 1
    156c:	2c f0       	brlt	.+10     	; 0x1578 <__year_to_secs+0x140>
    156e:	8c 52       	subi	r24, 0x2C	; 44
    1570:	91 40       	sbci	r25, 0x01	; 1
    1572:	43 e0       	ldi	r20, 0x03	; 3
    1574:	50 e0       	ldi	r21, 0x00	; 0
    1576:	0c c0       	rjmp	.+24     	; 0x1590 <__year_to_secs+0x158>
    1578:	88 5c       	subi	r24, 0xC8	; 200
    157a:	91 09       	sbc	r25, r1
    157c:	42 e0       	ldi	r20, 0x02	; 2
    157e:	50 e0       	ldi	r21, 0x00	; 0
    1580:	07 c0       	rjmp	.+14     	; 0x1590 <__year_to_secs+0x158>
    1582:	24 36       	cpi	r18, 0x64	; 100
    1584:	31 05       	cpc	r19, r1
    1586:	6c f0       	brlt	.+26     	; 0x15a2 <__year_to_secs+0x16a>
    1588:	84 56       	subi	r24, 0x64	; 100
    158a:	91 09       	sbc	r25, r1
    158c:	41 e0       	ldi	r20, 0x01	; 1
    158e:	50 e0       	ldi	r21, 0x00	; 0
    1590:	00 97       	sbiw	r24, 0x00	; 0
    1592:	49 f4       	brne	.+18     	; 0x15a6 <__year_to_secs+0x16e>
    1594:	eb 81       	ldd	r30, Y+3	; 0x03
    1596:	fc 81       	ldd	r31, Y+4	; 0x04
    1598:	11 82       	std	Z+1, r1	; 0x01
    159a:	10 82       	st	Z, r1
    159c:	20 e0       	ldi	r18, 0x00	; 0
    159e:	30 e0       	ldi	r19, 0x00	; 0
    15a0:	13 c0       	rjmp	.+38     	; 0x15c8 <__year_to_secs+0x190>
    15a2:	40 e0       	ldi	r20, 0x00	; 0
    15a4:	50 e0       	ldi	r21, 0x00	; 0
    15a6:	9c 01       	movw	r18, r24
    15a8:	36 95       	lsr	r19
    15aa:	27 95       	ror	r18
    15ac:	36 95       	lsr	r19
    15ae:	27 95       	ror	r18
    15b0:	83 70       	andi	r24, 0x03	; 3
    15b2:	99 27       	eor	r25, r25
    15b4:	61 e0       	ldi	r22, 0x01	; 1
    15b6:	70 e0       	ldi	r23, 0x00	; 0
    15b8:	89 2b       	or	r24, r25
    15ba:	11 f0       	breq	.+4      	; 0x15c0 <__year_to_secs+0x188>
    15bc:	60 e0       	ldi	r22, 0x00	; 0
    15be:	70 e0       	ldi	r23, 0x00	; 0
    15c0:	ab 81       	ldd	r26, Y+3	; 0x03
    15c2:	bc 81       	ldd	r27, Y+4	; 0x04
    15c4:	6d 93       	st	X+, r22
    15c6:	7c 93       	st	X, r23
    15c8:	81 e6       	ldi	r24, 0x61	; 97
    15ca:	ed 81       	ldd	r30, Y+5	; 0x05
    15cc:	fe 81       	ldd	r31, Y+6	; 0x06
    15ce:	8e 9f       	mul	r24, r30
    15d0:	b0 01       	movw	r22, r0
    15d2:	8f 9f       	mul	r24, r31
    15d4:	70 0d       	add	r23, r0
    15d6:	11 24       	eor	r1, r1
    15d8:	e8 e1       	ldi	r30, 0x18	; 24
    15da:	e4 9f       	mul	r30, r20
    15dc:	c0 01       	movw	r24, r0
    15de:	e5 9f       	mul	r30, r21
    15e0:	90 0d       	add	r25, r0
    15e2:	11 24       	eor	r1, r1
    15e4:	86 0f       	add	r24, r22
    15e6:	97 1f       	adc	r25, r23
    15e8:	ab 81       	ldd	r26, Y+3	; 0x03
    15ea:	bc 81       	ldd	r27, Y+4	; 0x04
    15ec:	4d 91       	ld	r20, X+
    15ee:	5c 91       	ld	r21, X
    15f0:	84 1b       	sub	r24, r20
    15f2:	95 0b       	sbc	r25, r21
    15f4:	82 0f       	add	r24, r18
    15f6:	93 1f       	adc	r25, r19
    15f8:	e9 2f       	mov	r30, r25
    15fa:	ee 0f       	add	r30, r30
    15fc:	ee 0b       	sbc	r30, r30
    15fe:	20 e8       	ldi	r18, 0x80	; 128
    1600:	a2 2e       	mov	r10, r18
    1602:	31 e5       	ldi	r19, 0x51	; 81
    1604:	b3 2e       	mov	r11, r19
    1606:	cc 24       	eor	r12, r12
    1608:	c3 94       	inc	r12
    160a:	d1 2c       	mov	r13, r1
    160c:	e1 2c       	mov	r14, r1
    160e:	f1 2c       	mov	r15, r1
    1610:	00 e0       	ldi	r16, 0x00	; 0
    1612:	10 e0       	ldi	r17, 0x00	; 0
    1614:	9c 01       	movw	r18, r24
    1616:	4e 2f       	mov	r20, r30
    1618:	5e 2f       	mov	r21, r30
    161a:	6e 2f       	mov	r22, r30
    161c:	7e 2f       	mov	r23, r30
    161e:	8e 2f       	mov	r24, r30
    1620:	9e 2f       	mov	r25, r30
    1622:	0e 94 a3 1a 	call	0x3546	; 0x3546 <__muldi3>
    1626:	92 2e       	mov	r9, r18
    1628:	83 2e       	mov	r8, r19
    162a:	4b 83       	std	Y+3, r20	; 0x03
    162c:	5d 83       	std	Y+5, r21	; 0x05
    162e:	69 87       	std	Y+9, r22	; 0x09
    1630:	7a 87       	std	Y+10, r23	; 0x0a
    1632:	8b 87       	std	Y+11, r24	; 0x0b
    1634:	9c 87       	std	Y+12, r25	; 0x0c
    1636:	43 e3       	ldi	r20, 0x33	; 51
    1638:	b4 2e       	mov	r11, r20
    163a:	51 ee       	ldi	r21, 0xE1	; 225
    163c:	c5 2e       	mov	r12, r21
    163e:	dd 24       	eor	r13, r13
    1640:	d3 94       	inc	r13
    1642:	91 01       	movw	r18, r2
    1644:	a2 01       	movw	r20, r4
    1646:	b3 01       	movw	r22, r6
    1648:	8f 81       	ldd	r24, Y+7	; 0x07
    164a:	98 85       	ldd	r25, Y+8	; 0x08
    164c:	0e 94 a3 1a 	call	0x3546	; 0x3546 <__muldi3>
    1650:	59 01       	movw	r10, r18
    1652:	6a 01       	movw	r12, r20
    1654:	7b 01       	movw	r14, r22
    1656:	8c 01       	movw	r16, r24
    1658:	29 2d       	mov	r18, r9
    165a:	38 2d       	mov	r19, r8
    165c:	4b 81       	ldd	r20, Y+3	; 0x03
    165e:	5d 81       	ldd	r21, Y+5	; 0x05
    1660:	69 85       	ldd	r22, Y+9	; 0x09
    1662:	7a 85       	ldd	r23, Y+10	; 0x0a
    1664:	8b 85       	ldd	r24, Y+11	; 0x0b
    1666:	9c 85       	ldd	r25, Y+12	; 0x0c
    1668:	0e 94 ed 26 	call	0x4dda	; 0x4dda <__adddi3>
    166c:	3b 56       	subi	r19, 0x6B	; 107
    166e:	41 49       	sbci	r20, 0x91	; 145
    1670:	57 4c       	sbci	r21, 0xC7	; 199
    1672:	6f 4f       	sbci	r22, 0xFF	; 255
    1674:	7f 4f       	sbci	r23, 0xFF	; 255
    1676:	8f 4f       	sbci	r24, 0xFF	; 255
    1678:	9f 4f       	sbci	r25, 0xFF	; 255
    167a:	a6 2f       	mov	r26, r22
    167c:	f7 2f       	mov	r31, r23
    167e:	e8 2f       	mov	r30, r24
    1680:	6a 2f       	mov	r22, r26
    1682:	7f 2f       	mov	r23, r31
    1684:	8e 2f       	mov	r24, r30
    1686:	2c 96       	adiw	r28, 0x0c	; 12
    1688:	e2 e1       	ldi	r30, 0x12	; 18
    168a:	0c 94 e9 22 	jmp	0x45d2	; 0x45d2 <__epilogue_restores__>

Disassembly of section .text.__month_to_secs:

000044ee <__month_to_secs>:
    44ee:	cf 93       	push	r28
    44f0:	df 93       	push	r29
    44f2:	9c 01       	movw	r18, r24
    44f4:	eb 01       	movw	r28, r22
    44f6:	88 0f       	add	r24, r24
    44f8:	99 1f       	adc	r25, r25
    44fa:	88 0f       	add	r24, r24
    44fc:	99 1f       	adc	r25, r25
    44fe:	09 2e       	mov	r0, r25
    4500:	00 0c       	add	r0, r0
    4502:	aa 0b       	sbc	r26, r26
    4504:	85 58       	subi	r24, 0x85	; 133
    4506:	9d 4f       	sbci	r25, 0xFD	; 253
    4508:	af 4f       	sbci	r26, 0xFF	; 255
    450a:	fc 01       	movw	r30, r24
    450c:	5a 2f       	mov	r21, r26
    450e:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <__xload_4>
    4512:	cd 2b       	or	r28, r29
    4514:	39 f0       	breq	.+14     	; 0x4524 <__month_to_secs+0x36>
    4516:	22 30       	cpi	r18, 0x02	; 2
    4518:	31 05       	cpc	r19, r1
    451a:	24 f0       	brlt	.+8      	; 0x4524 <__month_to_secs+0x36>
    451c:	60 58       	subi	r22, 0x80	; 128
    451e:	7e 4a       	sbci	r23, 0xAE	; 174
    4520:	8e 4f       	sbci	r24, 0xFE	; 254
    4522:	9f 4f       	sbci	r25, 0xFF	; 255
    4524:	df 91       	pop	r29
    4526:	cf 91       	pop	r28
    4528:	08 95       	ret

Disassembly of section .text.__secs_to_tm:

000003b8 <__secs_to_tm>:
 3b8:	a6 e1       	ldi	r26, 0x16	; 22
 3ba:	b0 e0       	ldi	r27, 0x00	; 0
 3bc:	e2 ee       	ldi	r30, 0xE2	; 226
 3be:	f1 e0       	ldi	r31, 0x01	; 1
 3c0:	0c 94 b2 22 	jmp	0x4564	; 0x4564 <__prologue_saves__>
 3c4:	79 01       	movw	r14, r18
 3c6:	d4 2e       	mov	r13, r20
 3c8:	c5 2e       	mov	r12, r21
 3ca:	b6 2f       	mov	r27, r22
 3cc:	a7 2f       	mov	r26, r23
 3ce:	f8 2f       	mov	r31, r24
 3d0:	b9 2e       	mov	r11, r25
 3d2:	40 58       	subi	r20, 0x80	; 128
 3d4:	5d 4b       	sbci	r21, 0xBD	; 189
 3d6:	6e 40       	sbci	r22, 0x0E	; 14
 3d8:	7f 4f       	sbci	r23, 0xFF	; 255
 3da:	8f 4f       	sbci	r24, 0xFF	; 255
 3dc:	9f 4f       	sbci	r25, 0xFF	; 255
 3de:	21 15       	cp	r18, r1
 3e0:	3b 47       	sbci	r19, 0x7B	; 123
 3e2:	4d 41       	sbci	r20, 0x1D	; 29
 3e4:	53 48       	sbci	r21, 0x83	; 131
 3e6:	62 4e       	sbci	r22, 0xE2	; 226
 3e8:	71 40       	sbci	r23, 0x01	; 1
 3ea:	81 05       	cpc	r24, r1
 3ec:	91 05       	cpc	r25, r1
 3ee:	11 f0       	breq	.+4      	; 0x3f4 <__secs_to_tm+0x3c>
 3f0:	08 f0       	brcs	.+2      	; 0x3f4 <__secs_to_tm+0x3c>
 3f2:	08 c2       	rjmp	.+1040   	; 0x804 <__EEPROM_REGION_LENGTH__+0x4>
 3f4:	18 8b       	std	Y+16, r17	; 0x10
 3f6:	0f 87       	std	Y+15, r16	; 0x0f
 3f8:	9b 2d       	mov	r25, r11
 3fa:	8f 2f       	mov	r24, r31
 3fc:	7a 2f       	mov	r23, r26
 3fe:	6b 2f       	mov	r22, r27
 400:	5c 2d       	mov	r21, r12
 402:	4d 2d       	mov	r20, r13
 404:	97 01       	movw	r18, r14
 406:	20 58       	subi	r18, 0x80	; 128
 408:	3d 45       	sbci	r19, 0x5D	; 93
 40a:	4c 4b       	sbci	r20, 0xBC	; 188
 40c:	58 43       	sbci	r21, 0x38	; 56
 40e:	61 09       	sbc	r22, r1
 410:	71 09       	sbc	r23, r1
 412:	81 09       	sbc	r24, r1
 414:	91 09       	sbc	r25, r1
 416:	19 01       	movw	r2, r18
 418:	4d 83       	std	Y+5, r20	; 0x05
 41a:	59 87       	std	Y+9, r21	; 0x09
 41c:	6d 87       	std	Y+13, r22	; 0x0d
 41e:	79 83       	std	Y+1, r23	; 0x01
 420:	89 8b       	std	Y+17, r24	; 0x11
 422:	9a 8b       	std	Y+18, r25	; 0x12
 424:	f0 e8       	ldi	r31, 0x80	; 128
 426:	af 2e       	mov	r10, r31
 428:	a1 e5       	ldi	r26, 0x51	; 81
 42a:	ba 2e       	mov	r11, r26
 42c:	cc 24       	eor	r12, r12
 42e:	c3 94       	inc	r12
 430:	d1 2c       	mov	r13, r1
 432:	e1 2c       	mov	r14, r1
 434:	f1 2c       	mov	r15, r1
 436:	00 e0       	ldi	r16, 0x00	; 0
 438:	10 e0       	ldi	r17, 0x00	; 0
 43a:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <__divdi3>
 43e:	29 01       	movw	r4, r18
 440:	3a 01       	movw	r6, r20
 442:	4b 01       	movw	r8, r22
 444:	8e 8b       	std	Y+22, r24	; 0x16
 446:	9b 8b       	std	Y+19, r25	; 0x13
 448:	91 01       	movw	r18, r2
 44a:	4d 81       	ldd	r20, Y+5	; 0x05
 44c:	59 85       	ldd	r21, Y+9	; 0x09
 44e:	6d 85       	ldd	r22, Y+13	; 0x0d
 450:	79 81       	ldd	r23, Y+1	; 0x01
 452:	89 89       	ldd	r24, Y+17	; 0x11
 454:	9a 89       	ldd	r25, Y+18	; 0x12
 456:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <__moddi3>
 45a:	2d 83       	std	Y+5, r18	; 0x05
 45c:	3e 83       	std	Y+6, r19	; 0x06
 45e:	4f 83       	std	Y+7, r20	; 0x07
 460:	58 87       	std	Y+8, r21	; 0x08
 462:	8d 81       	ldd	r24, Y+5	; 0x05
 464:	9e 81       	ldd	r25, Y+6	; 0x06
 466:	af 81       	ldd	r26, Y+7	; 0x07
 468:	b8 85       	ldd	r27, Y+8	; 0x08
 46a:	b7 ff       	sbrs	r27, 7
 46c:	15 c0       	rjmp	.+42     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
 46e:	80 58       	subi	r24, 0x80	; 128
 470:	9e 4a       	sbci	r25, 0xAE	; 174
 472:	ae 4f       	sbci	r26, 0xFE	; 254
 474:	bf 4f       	sbci	r27, 0xFF	; 255
 476:	8d 83       	std	Y+5, r24	; 0x05
 478:	9e 83       	std	Y+6, r25	; 0x06
 47a:	af 83       	std	Y+7, r26	; 0x07
 47c:	b8 87       	std	Y+8, r27	; 0x08
 47e:	92 01       	movw	r18, r4
 480:	a3 01       	movw	r20, r6
 482:	b4 01       	movw	r22, r8
 484:	8e 89       	ldd	r24, Y+22	; 0x16
 486:	9b 89       	ldd	r25, Y+19	; 0x13
 488:	af ef       	ldi	r26, 0xFF	; 255
 48a:	0e 94 85 26 	call	0x4d0a	; 0x4d0a <__adddi3_s8>
 48e:	29 01       	movw	r4, r18
 490:	3a 01       	movw	r6, r20
 492:	4b 01       	movw	r8, r22
 494:	8e 8b       	std	Y+22, r24	; 0x16
 496:	9b 8b       	std	Y+19, r25	; 0x13
 498:	92 01       	movw	r18, r4
 49a:	a3 01       	movw	r20, r6
 49c:	b4 01       	movw	r22, r8
 49e:	8e 89       	ldd	r24, Y+22	; 0x16
 4a0:	9b 89       	ldd	r25, Y+19	; 0x13
 4a2:	a3 e0       	ldi	r26, 0x03	; 3
 4a4:	0e 94 85 26 	call	0x4d0a	; 0x4d0a <__adddi3_s8>
 4a8:	e7 e0       	ldi	r30, 0x07	; 7
 4aa:	ae 2e       	mov	r10, r30
 4ac:	b1 2c       	mov	r11, r1
 4ae:	c1 2c       	mov	r12, r1
 4b0:	d1 2c       	mov	r13, r1
 4b2:	e1 2c       	mov	r14, r1
 4b4:	f1 2c       	mov	r15, r1
 4b6:	00 e0       	ldi	r16, 0x00	; 0
 4b8:	10 e0       	ldi	r17, 0x00	; 0
 4ba:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <__moddi3>
 4be:	2d 87       	std	Y+13, r18	; 0x0d
 4c0:	3e 87       	std	Y+14, r19	; 0x0e
 4c2:	ad 85       	ldd	r26, Y+13	; 0x0d
 4c4:	be 85       	ldd	r27, Y+14	; 0x0e
 4c6:	b7 ff       	sbrs	r27, 7
 4c8:	03 c0       	rjmp	.+6      	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
 4ca:	17 96       	adiw	r26, 0x07	; 7
 4cc:	be 87       	std	Y+14, r27	; 0x0e
 4ce:	ad 87       	std	Y+13, r26	; 0x0d
 4d0:	51 eb       	ldi	r21, 0xB1	; 177
 4d2:	a5 2e       	mov	r10, r21
 4d4:	6a e3       	ldi	r22, 0x3A	; 58
 4d6:	b6 2e       	mov	r11, r22
 4d8:	72 e0       	ldi	r23, 0x02	; 2
 4da:	c7 2e       	mov	r12, r23
 4dc:	d1 2c       	mov	r13, r1
 4de:	e1 2c       	mov	r14, r1
 4e0:	f1 2c       	mov	r15, r1
 4e2:	00 e0       	ldi	r16, 0x00	; 0
 4e4:	10 e0       	ldi	r17, 0x00	; 0
 4e6:	92 01       	movw	r18, r4
 4e8:	a3 01       	movw	r20, r6
 4ea:	b4 01       	movw	r22, r8
 4ec:	8e 89       	ldd	r24, Y+22	; 0x16
 4ee:	9b 89       	ldd	r25, Y+19	; 0x13
 4f0:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <__divdi3>
 4f4:	29 87       	std	Y+9, r18	; 0x09
 4f6:	3a 87       	std	Y+10, r19	; 0x0a
 4f8:	4b 87       	std	Y+11, r20	; 0x0b
 4fa:	5c 87       	std	Y+12, r21	; 0x0c
 4fc:	92 01       	movw	r18, r4
 4fe:	a3 01       	movw	r20, r6
 500:	b4 01       	movw	r22, r8
 502:	8e 89       	ldd	r24, Y+22	; 0x16
 504:	9b 89       	ldd	r25, Y+19	; 0x13
 506:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <__moddi3>
 50a:	82 2e       	mov	r8, r18
 50c:	93 2e       	mov	r9, r19
 50e:	a4 2e       	mov	r10, r20
 510:	b5 2e       	mov	r11, r21
 512:	b7 fe       	sbrs	r11, 7
 514:	12 c0       	rjmp	.+36     	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
 516:	b1 eb       	ldi	r27, 0xB1	; 177
 518:	8b 0e       	add	r8, r27
 51a:	ba e3       	ldi	r27, 0x3A	; 58
 51c:	9b 1e       	adc	r9, r27
 51e:	b2 e0       	ldi	r27, 0x02	; 2
 520:	ab 1e       	adc	r10, r27
 522:	b1 1c       	adc	r11, r1
 524:	89 85       	ldd	r24, Y+9	; 0x09
 526:	9a 85       	ldd	r25, Y+10	; 0x0a
 528:	ab 85       	ldd	r26, Y+11	; 0x0b
 52a:	bc 85       	ldd	r27, Y+12	; 0x0c
 52c:	01 97       	sbiw	r24, 0x01	; 1
 52e:	a1 09       	sbc	r26, r1
 530:	b1 09       	sbc	r27, r1
 532:	89 87       	std	Y+9, r24	; 0x09
 534:	9a 87       	std	Y+10, r25	; 0x0a
 536:	ab 87       	std	Y+11, r26	; 0x0b
 538:	bc 87       	std	Y+12, r27	; 0x0c
 53a:	c5 01       	movw	r24, r10
 53c:	b4 01       	movw	r22, r8
 53e:	2c ea       	ldi	r18, 0xAC	; 172
 540:	3e e8       	ldi	r19, 0x8E	; 142
 542:	40 e0       	ldi	r20, 0x00	; 0
 544:	50 e0       	ldi	r21, 0x00	; 0
 546:	0e 94 9d 23 	call	0x473a	; 0x473a <__divmodsi4>
 54a:	69 01       	movw	r12, r18
 54c:	7a 01       	movw	r14, r20
 54e:	24 30       	cpi	r18, 0x04	; 4
 550:	31 05       	cpc	r19, r1
 552:	41 05       	cpc	r20, r1
 554:	51 05       	cpc	r21, r1
 556:	29 f4       	brne	.+10     	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
 558:	43 e0       	ldi	r20, 0x03	; 3
 55a:	c4 2e       	mov	r12, r20
 55c:	d1 2c       	mov	r13, r1
 55e:	e1 2c       	mov	r14, r1
 560:	f1 2c       	mov	r15, r1
 562:	a4 e5       	ldi	r26, 0x54	; 84
 564:	b1 e7       	ldi	r27, 0x71	; 113
 566:	a7 01       	movw	r20, r14
 568:	96 01       	movw	r18, r12
 56a:	0e 94 12 27 	call	0x4e24	; 0x4e24 <__mulohisi3>
 56e:	2b 01       	movw	r4, r22
 570:	3c 01       	movw	r6, r24
 572:	48 0c       	add	r4, r8
 574:	59 1c       	adc	r5, r9
 576:	6a 1c       	adc	r6, r10
 578:	7b 1c       	adc	r7, r11
 57a:	c3 01       	movw	r24, r6
 57c:	b2 01       	movw	r22, r4
 57e:	25 eb       	ldi	r18, 0xB5	; 181
 580:	35 e0       	ldi	r19, 0x05	; 5
 582:	40 e0       	ldi	r20, 0x00	; 0
 584:	50 e0       	ldi	r21, 0x00	; 0
 586:	0e 94 9d 23 	call	0x473a	; 0x473a <__divmodsi4>
 58a:	49 01       	movw	r8, r18
 58c:	5a 01       	movw	r10, r20
 58e:	29 31       	cpi	r18, 0x19	; 25
 590:	31 05       	cpc	r19, r1
 592:	41 05       	cpc	r20, r1
 594:	51 05       	cpc	r21, r1
 596:	29 f4       	brne	.+10     	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
 598:	38 e1       	ldi	r19, 0x18	; 24
 59a:	83 2e       	mov	r8, r19
 59c:	91 2c       	mov	r9, r1
 59e:	a1 2c       	mov	r10, r1
 5a0:	b1 2c       	mov	r11, r1
 5a2:	ab e4       	ldi	r26, 0x4B	; 75
 5a4:	ba ef       	ldi	r27, 0xFA	; 250
 5a6:	a5 01       	movw	r20, r10
 5a8:	94 01       	movw	r18, r8
 5aa:	0e 94 12 27 	call	0x4e24	; 0x4e24 <__mulohisi3>
 5ae:	46 0e       	add	r4, r22
 5b0:	57 1e       	adc	r5, r23
 5b2:	68 1e       	adc	r6, r24
 5b4:	79 1e       	adc	r7, r25
 5b6:	c3 01       	movw	r24, r6
 5b8:	b2 01       	movw	r22, r4
 5ba:	2d e6       	ldi	r18, 0x6D	; 109
 5bc:	31 e0       	ldi	r19, 0x01	; 1
 5be:	40 e0       	ldi	r20, 0x00	; 0
 5c0:	50 e0       	ldi	r21, 0x00	; 0
 5c2:	0e 94 9d 23 	call	0x473a	; 0x473a <__divmodsi4>
 5c6:	29 83       	std	Y+1, r18	; 0x01
 5c8:	3a 83       	std	Y+2, r19	; 0x02
 5ca:	4b 83       	std	Y+3, r20	; 0x03
 5cc:	5c 83       	std	Y+4, r21	; 0x04
 5ce:	24 30       	cpi	r18, 0x04	; 4
 5d0:	31 05       	cpc	r19, r1
 5d2:	41 05       	cpc	r20, r1
 5d4:	51 05       	cpc	r21, r1
 5d6:	41 f4       	brne	.+16     	; 0x5e8 <__LOCK_REGION_LENGTH__+0x1e8>
 5d8:	83 e0       	ldi	r24, 0x03	; 3
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	a0 e0       	ldi	r26, 0x00	; 0
 5de:	b0 e0       	ldi	r27, 0x00	; 0
 5e0:	89 83       	std	Y+1, r24	; 0x01
 5e2:	9a 83       	std	Y+2, r25	; 0x02
 5e4:	ab 83       	std	Y+3, r26	; 0x03
 5e6:	bc 83       	std	Y+4, r27	; 0x04
 5e8:	a3 e9       	ldi	r26, 0x93	; 147
 5ea:	be ef       	ldi	r27, 0xFE	; 254
 5ec:	29 81       	ldd	r18, Y+1	; 0x01
 5ee:	3a 81       	ldd	r19, Y+2	; 0x02
 5f0:	4b 81       	ldd	r20, Y+3	; 0x03
 5f2:	5c 81       	ldd	r21, Y+4	; 0x04
 5f4:	0e 94 12 27 	call	0x4e24	; 0x4e24 <__mulohisi3>
 5f8:	46 0e       	add	r4, r22
 5fa:	57 1e       	adc	r5, r23
 5fc:	68 1e       	adc	r6, r24
 5fe:	79 1e       	adc	r7, r25
 600:	23 2b       	or	r18, r19
 602:	24 2b       	or	r18, r20
 604:	25 2b       	or	r18, r21
 606:	81 f4       	brne	.+32     	; 0x628 <__LOCK_REGION_LENGTH__+0x228>
 608:	81 14       	cp	r8, r1
 60a:	91 04       	cpc	r9, r1
 60c:	a1 04       	cpc	r10, r1
 60e:	b1 04       	cpc	r11, r1
 610:	71 f4       	brne	.+28     	; 0x62e <__LOCK_REGION_LENGTH__+0x22e>
 612:	31 e0       	ldi	r19, 0x01	; 1
 614:	20 e0       	ldi	r18, 0x00	; 0
 616:	c1 14       	cp	r12, r1
 618:	d1 04       	cpc	r13, r1
 61a:	e1 04       	cpc	r14, r1
 61c:	f1 04       	cpc	r15, r1
 61e:	09 f0       	breq	.+2      	; 0x622 <__LOCK_REGION_LENGTH__+0x222>
 620:	30 e0       	ldi	r19, 0x00	; 0
 622:	83 2f       	mov	r24, r19
 624:	92 2f       	mov	r25, r18
 626:	05 c0       	rjmp	.+10     	; 0x632 <__LOCK_REGION_LENGTH__+0x232>
 628:	80 e0       	ldi	r24, 0x00	; 0
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	02 c0       	rjmp	.+4      	; 0x632 <__LOCK_REGION_LENGTH__+0x232>
 62e:	81 e0       	ldi	r24, 0x01	; 1
 630:	90 e0       	ldi	r25, 0x00	; 0
 632:	12 01       	movw	r2, r4
 634:	ab e3       	ldi	r26, 0x3B	; 59
 636:	2a 0e       	add	r2, r26
 638:	31 1c       	adc	r3, r1
 63a:	28 0e       	add	r2, r24
 63c:	39 1e       	adc	r3, r25
 63e:	9c 01       	movw	r18, r24
 640:	24 59       	subi	r18, 0x94	; 148
 642:	3e 4f       	sbci	r19, 0xFE	; 254
 644:	22 15       	cp	r18, r2
 646:	33 05       	cpc	r19, r3
 648:	24 f4       	brge	.+8      	; 0x652 <__LOCK_REGION_LENGTH__+0x252>
 64a:	83 59       	subi	r24, 0x93	; 147
 64c:	9e 4f       	sbci	r25, 0xFE	; 254
 64e:	28 1a       	sub	r2, r24
 650:	39 0a       	sbc	r3, r25
 652:	92 e0       	ldi	r25, 0x02	; 2
 654:	88 0c       	add	r8, r8
 656:	99 1c       	adc	r9, r9
 658:	aa 1c       	adc	r10, r10
 65a:	bb 1c       	adc	r11, r11
 65c:	9a 95       	dec	r25
 65e:	d1 f7       	brne	.-12     	; 0x654 <__LOCK_REGION_LENGTH__+0x254>
 660:	89 81       	ldd	r24, Y+1	; 0x01
 662:	9a 81       	ldd	r25, Y+2	; 0x02
 664:	ab 81       	ldd	r26, Y+3	; 0x03
 666:	bc 81       	ldd	r27, Y+4	; 0x04
 668:	88 0e       	add	r8, r24
 66a:	99 1e       	adc	r9, r25
 66c:	aa 1e       	adc	r10, r26
 66e:	bb 1e       	adc	r11, r27
 670:	a4 e6       	ldi	r26, 0x64	; 100
 672:	b0 e0       	ldi	r27, 0x00	; 0
 674:	a7 01       	movw	r20, r14
 676:	96 01       	movw	r18, r12
 678:	0e 94 b2 26 	call	0x4d64	; 0x4d64 <__muluhisi3>
 67c:	86 0e       	add	r8, r22
 67e:	97 1e       	adc	r9, r23
 680:	a8 1e       	adc	r10, r24
 682:	b9 1e       	adc	r11, r25
 684:	d5 01       	movw	r26, r10
 686:	c4 01       	movw	r24, r8
 688:	bb 0f       	add	r27, r27
 68a:	88 0b       	sbc	r24, r24
 68c:	98 2f       	mov	r25, r24
 68e:	dc 01       	movw	r26, r24
 690:	89 83       	std	Y+1, r24	; 0x01
 692:	9a 83       	std	Y+2, r25	; 0x02
 694:	ab 83       	std	Y+3, r26	; 0x03
 696:	bc 83       	std	Y+4, r27	; 0x04
 698:	69 85       	ldd	r22, Y+9	; 0x09
 69a:	7a 85       	ldd	r23, Y+10	; 0x0a
 69c:	8b 85       	ldd	r24, Y+11	; 0x0b
 69e:	9c 85       	ldd	r25, Y+12	; 0x0c
 6a0:	20 e9       	ldi	r18, 0x90	; 144
 6a2:	31 e0       	ldi	r19, 0x01	; 1
 6a4:	40 e0       	ldi	r20, 0x00	; 0
 6a6:	50 e0       	ldi	r21, 0x00	; 0
 6a8:	0e 94 43 26 	call	0x4c86	; 0x4c86 <__mulsidi3>
 6ac:	f2 2f       	mov	r31, r18
 6ae:	e3 2f       	mov	r30, r19
 6b0:	6a 01       	movw	r12, r20
 6b2:	7b 01       	movw	r14, r22
 6b4:	8c 01       	movw	r16, r24
 6b6:	94 01       	movw	r18, r8
 6b8:	a5 01       	movw	r20, r10
 6ba:	69 81       	ldd	r22, Y+1	; 0x01
 6bc:	76 2f       	mov	r23, r22
 6be:	86 2f       	mov	r24, r22
 6c0:	96 2f       	mov	r25, r22
 6c2:	af 2e       	mov	r10, r31
 6c4:	be 2e       	mov	r11, r30
 6c6:	0e 94 ed 26 	call	0x4dda	; 0x4dda <__adddi3>
 6ca:	49 01       	movw	r8, r18
 6cc:	5a 01       	movw	r10, r20
 6ce:	6b 01       	movw	r12, r22
 6d0:	7c 01       	movw	r14, r24
 6d2:	25 e3       	ldi	r18, 0x35	; 53
 6d4:	33 e0       	ldi	r19, 0x03	; 3
 6d6:	40 e0       	ldi	r20, 0x00	; 0
 6d8:	1a 82       	std	Y+2, r1	; 0x02
 6da:	19 82       	std	Y+1, r1	; 0x01
 6dc:	f9 01       	movw	r30, r18
 6de:	84 91       	lpm	r24, Z
 6e0:	47 fd       	sbrc	r20, 7
 6e2:	80 81       	ld	r24, Z
 6e4:	08 2e       	mov	r0, r24
 6e6:	00 0c       	add	r0, r0
 6e8:	99 0b       	sbc	r25, r25
 6ea:	aa 0b       	sbc	r26, r26
 6ec:	bb 0b       	sbc	r27, r27
 6ee:	2f 5f       	subi	r18, 0xFF	; 255
 6f0:	3f 4f       	sbci	r19, 0xFF	; 255
 6f2:	4f 4f       	sbci	r20, 0xFF	; 255
 6f4:	48 16       	cp	r4, r24
 6f6:	59 06       	cpc	r5, r25
 6f8:	6a 06       	cpc	r6, r26
 6fa:	7b 06       	cpc	r7, r27
 6fc:	54 f0       	brlt	.+20     	; 0x712 <__LOCK_REGION_LENGTH__+0x312>
 6fe:	48 1a       	sub	r4, r24
 700:	59 0a       	sbc	r5, r25
 702:	6a 0a       	sbc	r6, r26
 704:	7b 0a       	sbc	r7, r27
 706:	a9 81       	ldd	r26, Y+1	; 0x01
 708:	ba 81       	ldd	r27, Y+2	; 0x02
 70a:	11 96       	adiw	r26, 0x01	; 1
 70c:	ba 83       	std	Y+2, r27	; 0x02
 70e:	a9 83       	std	Y+1, r26	; 0x01
 710:	e5 cf       	rjmp	.-54     	; 0x6dc <__LOCK_REGION_LENGTH__+0x2dc>
 712:	e9 81       	ldd	r30, Y+1	; 0x01
 714:	fa 81       	ldd	r31, Y+2	; 0x02
 716:	ea 30       	cpi	r30, 0x0A	; 10
 718:	f1 05       	cpc	r31, r1
 71a:	74 f0       	brlt	.+28     	; 0x738 <__LOCK_REGION_LENGTH__+0x338>
 71c:	3c 97       	sbiw	r30, 0x0c	; 12
 71e:	fa 83       	std	Y+2, r31	; 0x02
 720:	e9 83       	std	Y+1, r30	; 0x01
 722:	94 01       	movw	r18, r8
 724:	a5 01       	movw	r20, r10
 726:	b6 01       	movw	r22, r12
 728:	c7 01       	movw	r24, r14
 72a:	a1 e0       	ldi	r26, 0x01	; 1
 72c:	0e 94 85 26 	call	0x4d0a	; 0x4d0a <__adddi3_s8>
 730:	49 01       	movw	r8, r18
 732:	5a 01       	movw	r10, r20
 734:	6b 01       	movw	r12, r22
 736:	7c 01       	movw	r14, r24
 738:	94 01       	movw	r18, r8
 73a:	a5 01       	movw	r20, r10
 73c:	b6 01       	movw	r22, r12
 73e:	c7 01       	movw	r24, r14
 740:	2c 59       	subi	r18, 0x9C	; 156
 742:	3f 47       	sbci	r19, 0x7F	; 127
 744:	4f 4f       	sbci	r20, 0xFF	; 255
 746:	5f 4f       	sbci	r21, 0xFF	; 255
 748:	6f 4f       	sbci	r22, 0xFF	; 255
 74a:	7f 4f       	sbci	r23, 0xFF	; 255
 74c:	8f 4f       	sbci	r24, 0xFF	; 255
 74e:	9f 4f       	sbci	r25, 0xFF	; 255
 750:	2f 3f       	cpi	r18, 0xFF	; 255
 752:	3f 4f       	sbci	r19, 0xFF	; 255
 754:	41 05       	cpc	r20, r1
 756:	51 05       	cpc	r21, r1
 758:	61 05       	cpc	r22, r1
 75a:	71 05       	cpc	r23, r1
 75c:	81 05       	cpc	r24, r1
 75e:	91 05       	cpc	r25, r1
 760:	11 f0       	breq	.+4      	; 0x766 <__LOCK_REGION_LENGTH__+0x366>
 762:	08 f0       	brcs	.+2      	; 0x766 <__LOCK_REGION_LENGTH__+0x366>
 764:	4f c0       	rjmp	.+158    	; 0x804 <__EEPROM_REGION_LENGTH__+0x4>
 766:	24 e6       	ldi	r18, 0x64	; 100
 768:	82 0e       	add	r8, r18
 76a:	91 1c       	adc	r9, r1
 76c:	af 85       	ldd	r26, Y+15	; 0x0f
 76e:	b8 89       	ldd	r27, Y+16	; 0x10
 770:	1b 96       	adiw	r26, 0x0b	; 11
 772:	9c 92       	st	X, r9
 774:	8e 92       	st	-X, r8
 776:	1a 97       	sbiw	r26, 0x0a	; 10
 778:	e9 81       	ldd	r30, Y+1	; 0x01
 77a:	fa 81       	ldd	r31, Y+2	; 0x02
 77c:	32 96       	adiw	r30, 0x02	; 2
 77e:	19 96       	adiw	r26, 0x09	; 9
 780:	fc 93       	st	X, r31
 782:	ee 93       	st	-X, r30
 784:	18 97       	sbiw	r26, 0x08	; 8
 786:	ff ef       	ldi	r31, 0xFF	; 255
 788:	4f 1a       	sub	r4, r31
 78a:	5f 0a       	sbc	r5, r31
 78c:	17 96       	adiw	r26, 0x07	; 7
 78e:	5c 92       	st	X, r5
 790:	4e 92       	st	-X, r4
 792:	16 97       	sbiw	r26, 0x06	; 6
 794:	8d 85       	ldd	r24, Y+13	; 0x0d
 796:	9e 85       	ldd	r25, Y+14	; 0x0e
 798:	1d 96       	adiw	r26, 0x0d	; 13
 79a:	9c 93       	st	X, r25
 79c:	8e 93       	st	-X, r24
 79e:	1c 97       	sbiw	r26, 0x0c	; 12
 7a0:	1f 96       	adiw	r26, 0x0f	; 15
 7a2:	3c 92       	st	X, r3
 7a4:	2e 92       	st	-X, r2
 7a6:	1e 97       	sbiw	r26, 0x0e	; 14
 7a8:	6d 81       	ldd	r22, Y+5	; 0x05
 7aa:	7e 81       	ldd	r23, Y+6	; 0x06
 7ac:	8f 81       	ldd	r24, Y+7	; 0x07
 7ae:	98 85       	ldd	r25, Y+8	; 0x08
 7b0:	20 e1       	ldi	r18, 0x10	; 16
 7b2:	3e e0       	ldi	r19, 0x0E	; 14
 7b4:	40 e0       	ldi	r20, 0x00	; 0
 7b6:	50 e0       	ldi	r21, 0x00	; 0
 7b8:	0e 94 9d 23 	call	0x473a	; 0x473a <__divmodsi4>
 7bc:	af 85       	ldd	r26, Y+15	; 0x0f
 7be:	b8 89       	ldd	r27, Y+16	; 0x10
 7c0:	15 96       	adiw	r26, 0x05	; 5
 7c2:	3c 93       	st	X, r19
 7c4:	2e 93       	st	-X, r18
 7c6:	14 97       	sbiw	r26, 0x04	; 4
 7c8:	8c e3       	ldi	r24, 0x3C	; 60
 7ca:	c8 2e       	mov	r12, r24
 7cc:	d1 2c       	mov	r13, r1
 7ce:	e1 2c       	mov	r14, r1
 7d0:	f1 2c       	mov	r15, r1
 7d2:	6d 81       	ldd	r22, Y+5	; 0x05
 7d4:	7e 81       	ldd	r23, Y+6	; 0x06
 7d6:	8f 81       	ldd	r24, Y+7	; 0x07
 7d8:	98 85       	ldd	r25, Y+8	; 0x08
 7da:	a7 01       	movw	r20, r14
 7dc:	96 01       	movw	r18, r12
 7de:	0e 94 9d 23 	call	0x473a	; 0x473a <__divmodsi4>
 7e2:	4b 01       	movw	r8, r22
 7e4:	5c 01       	movw	r10, r24
 7e6:	ca 01       	movw	r24, r20
 7e8:	b9 01       	movw	r22, r18
 7ea:	a7 01       	movw	r20, r14
 7ec:	96 01       	movw	r18, r12
 7ee:	0e 94 9d 23 	call	0x473a	; 0x473a <__divmodsi4>
 7f2:	ef 85       	ldd	r30, Y+15	; 0x0f
 7f4:	f8 89       	ldd	r31, Y+16	; 0x10
 7f6:	73 83       	std	Z+3, r23	; 0x03
 7f8:	62 83       	std	Z+2, r22	; 0x02
 7fa:	91 82       	std	Z+1, r9	; 0x01
 7fc:	80 82       	st	Z, r8
 7fe:	80 e0       	ldi	r24, 0x00	; 0
 800:	90 e0       	ldi	r25, 0x00	; 0
 802:	02 c0       	rjmp	.+4      	; 0x808 <__EEPROM_REGION_LENGTH__+0x8>
 804:	8f ef       	ldi	r24, 0xFF	; 255
 806:	9f ef       	ldi	r25, 0xFF	; 255
 808:	66 96       	adiw	r28, 0x16	; 22
 80a:	e2 e1       	ldi	r30, 0x12	; 18
 80c:	0c 94 e9 22 	jmp	0x45d2	; 0x45d2 <__epilogue_restores__>

Disassembly of section .text.libgcc.div:

000048e2 <__divmodhi4>:
    48e2:	97 fb       	bst	r25, 7
    48e4:	07 2e       	mov	r0, r23
    48e6:	16 f4       	brtc	.+4      	; 0x48ec <__divmodhi4+0xa>
    48e8:	00 94       	com	r0
    48ea:	07 d0       	rcall	.+14     	; 0x48fa <__divmodhi4_neg1>
    48ec:	77 fd       	sbrc	r23, 7
    48ee:	09 d0       	rcall	.+18     	; 0x4902 <__divmodhi4_neg2>
    48f0:	0e 94 5d 24 	call	0x48ba	; 0x48ba <__udivmodhi4>
    48f4:	07 fc       	sbrc	r0, 7
    48f6:	05 d0       	rcall	.+10     	; 0x4902 <__divmodhi4_neg2>
    48f8:	3e f4       	brtc	.+14     	; 0x4908 <__divmodhi4_exit>

000048fa <__divmodhi4_neg1>:
    48fa:	90 95       	com	r25
    48fc:	81 95       	neg	r24
    48fe:	9f 4f       	sbci	r25, 0xFF	; 255
    4900:	08 95       	ret

00004902 <__divmodhi4_neg2>:
    4902:	70 95       	com	r23
    4904:	61 95       	neg	r22
    4906:	7f 4f       	sbci	r23, 0xFF	; 255

00004908 <__divmodhi4_exit>:
    4908:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00003546 <__muldi3>:
    3546:	df 93       	push	r29
    3548:	cf 93       	push	r28
    354a:	1f 93       	push	r17
    354c:	0f 93       	push	r16
    354e:	9a 9d       	mul	r25, r10
    3550:	f0 2d       	mov	r31, r0
    3552:	21 9f       	mul	r18, r17
    3554:	f0 0d       	add	r31, r0
    3556:	8b 9d       	mul	r24, r11
    3558:	f0 0d       	add	r31, r0
    355a:	8a 9d       	mul	r24, r10
    355c:	e0 2d       	mov	r30, r0
    355e:	f1 0d       	add	r31, r1
    3560:	03 9f       	mul	r16, r19
    3562:	f0 0d       	add	r31, r0
    3564:	02 9f       	mul	r16, r18
    3566:	e0 0d       	add	r30, r0
    3568:	f1 1d       	adc	r31, r1
    356a:	4e 9d       	mul	r20, r14
    356c:	e0 0d       	add	r30, r0
    356e:	f1 1d       	adc	r31, r1
    3570:	5e 9d       	mul	r21, r14
    3572:	f0 0d       	add	r31, r0
    3574:	4f 9d       	mul	r20, r15
    3576:	f0 0d       	add	r31, r0
    3578:	7f 93       	push	r23
    357a:	6f 93       	push	r22
    357c:	bf 92       	push	r11
    357e:	af 92       	push	r10
    3580:	5f 93       	push	r21
    3582:	4f 93       	push	r20
    3584:	d5 01       	movw	r26, r10
    3586:	0e 94 34 26 	call	0x4c68	; 0x4c68 <__umulhisi3>
    358a:	8b 01       	movw	r16, r22
    358c:	ac 01       	movw	r20, r24
    358e:	d7 01       	movw	r26, r14
    3590:	0e 94 34 26 	call	0x4c68	; 0x4c68 <__umulhisi3>
    3594:	eb 01       	movw	r28, r22
    3596:	e8 0f       	add	r30, r24
    3598:	f9 1f       	adc	r31, r25
    359a:	d6 01       	movw	r26, r12
    359c:	0e 94 e4 26 	call	0x4dc8	; 0x4dc8 <__muldi3_6>
    35a0:	2f 91       	pop	r18
    35a2:	3f 91       	pop	r19
    35a4:	d6 01       	movw	r26, r12
    35a6:	0e 94 34 26 	call	0x4c68	; 0x4c68 <__umulhisi3>
    35aa:	c6 0f       	add	r28, r22
    35ac:	d7 1f       	adc	r29, r23
    35ae:	e8 1f       	adc	r30, r24
    35b0:	f9 1f       	adc	r31, r25
    35b2:	af 91       	pop	r26
    35b4:	bf 91       	pop	r27
    35b6:	0e 94 e4 26 	call	0x4dc8	; 0x4dc8 <__muldi3_6>
    35ba:	2f 91       	pop	r18
    35bc:	3f 91       	pop	r19
    35be:	0e 94 34 26 	call	0x4c68	; 0x4c68 <__umulhisi3>
    35c2:	c6 0f       	add	r28, r22
    35c4:	d7 1f       	adc	r29, r23
    35c6:	e8 1f       	adc	r30, r24
    35c8:	f9 1f       	adc	r31, r25
    35ca:	d6 01       	movw	r26, r12
    35cc:	0e 94 34 26 	call	0x4c68	; 0x4c68 <__umulhisi3>
    35d0:	e6 0f       	add	r30, r22
    35d2:	f7 1f       	adc	r31, r23
    35d4:	98 01       	movw	r18, r16
    35d6:	be 01       	movw	r22, r28
    35d8:	cf 01       	movw	r24, r30
    35da:	11 24       	eor	r1, r1
    35dc:	0f 91       	pop	r16
    35de:	1f 91       	pop	r17
    35e0:	cf 91       	pop	r28
    35e2:	df 91       	pop	r29
    35e4:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00004dc8 <__muldi3_6>:
    4dc8:	0e 94 34 26 	call	0x4c68	; 0x4c68 <__umulhisi3>
    4dcc:	46 0f       	add	r20, r22
    4dce:	57 1f       	adc	r21, r23
    4dd0:	c8 1f       	adc	r28, r24
    4dd2:	d9 1f       	adc	r29, r25
    4dd4:	08 f4       	brcc	.+2      	; 0x4dd8 <__muldi3_6+0x10>
    4dd6:	31 96       	adiw	r30, 0x01	; 1
    4dd8:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00004c86 <__mulsidi3>:
    4c86:	97 fb       	bst	r25, 7
    4c88:	57 ff       	sbrs	r21, 7
    4c8a:	0c 94 b1 20 	jmp	0x4162	; 0x4162 <__umulsidi3_helper>
    4c8e:	9f 93       	push	r25
    4c90:	8f 93       	push	r24
    4c92:	0e 94 b1 20 	call	0x4162	; 0x4162 <__umulsidi3_helper>
    4c96:	6e 1b       	sub	r22, r30
    4c98:	7f 0b       	sbc	r23, r31
    4c9a:	af 91       	pop	r26
    4c9c:	bf 91       	pop	r27
    4c9e:	8a 0b       	sbc	r24, r26
    4ca0:	9b 0b       	sbc	r25, r27
    4ca2:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00004160 <__umulsidi3>:
    4160:	e8 94       	clt

00004162 <__umulsidi3_helper>:
    4162:	df 93       	push	r29
    4164:	cf 93       	push	r28
    4166:	fc 01       	movw	r30, r24
    4168:	db 01       	movw	r26, r22
    416a:	0e 94 34 26 	call	0x4c68	; 0x4c68 <__umulhisi3>
    416e:	7f 93       	push	r23
    4170:	6f 93       	push	r22
    4172:	e9 01       	movw	r28, r18
    4174:	9a 01       	movw	r18, r20
    4176:	ac 01       	movw	r20, r24
    4178:	bf 93       	push	r27
    417a:	af 93       	push	r26
    417c:	3f 93       	push	r19
    417e:	2f 93       	push	r18
    4180:	df 01       	movw	r26, r30
    4182:	0e 94 34 26 	call	0x4c68	; 0x4c68 <__umulhisi3>
    4186:	26 f4       	brtc	.+8      	; 0x4190 <__umulsidi3_helper+0x2e>
    4188:	6c 1b       	sub	r22, r28
    418a:	7d 0b       	sbc	r23, r29
    418c:	82 0b       	sbc	r24, r18
    418e:	93 0b       	sbc	r25, r19
    4190:	9e 01       	movw	r18, r28
    4192:	eb 01       	movw	r28, r22
    4194:	fc 01       	movw	r30, r24
    4196:	0e 94 e4 26 	call	0x4dc8	; 0x4dc8 <__muldi3_6>
    419a:	af 91       	pop	r26
    419c:	bf 91       	pop	r27
    419e:	2f 91       	pop	r18
    41a0:	3f 91       	pop	r19
    41a2:	0e 94 e4 26 	call	0x4dc8	; 0x4dc8 <__muldi3_6>
    41a6:	be 01       	movw	r22, r28
    41a8:	cf 01       	movw	r24, r30
    41aa:	f9 01       	movw	r30, r18
    41ac:	2f 91       	pop	r18
    41ae:	3f 91       	pop	r19
    41b0:	cf 91       	pop	r28
    41b2:	df 91       	pop	r29
    41b4:	08 95       	ret

Disassembly of section .text.libgcc.div:

00003f44 <__moddi3>:
    3f44:	68 94       	set
    3f46:	01 c0       	rjmp	.+2      	; 0x3f4a <__divdi3_moddi3>

00003f48 <__divdi3>:
    3f48:	e8 94       	clt

00003f4a <__divdi3_moddi3>:
    3f4a:	f9 2f       	mov	r31, r25
    3f4c:	f1 2b       	or	r31, r17
    3f4e:	12 f0       	brmi	.+4      	; 0x3f54 <__divdi3_moddi3+0xa>
    3f50:	0c 94 55 26 	jmp	0x4caa	; 0x4caa <__udivdi3_umoddi3>
    3f54:	a0 e0       	ldi	r26, 0x00	; 0
    3f56:	b0 e0       	ldi	r27, 0x00	; 0
    3f58:	e0 eb       	ldi	r30, 0xB0	; 176
    3f5a:	ff e1       	ldi	r31, 0x1F	; 31
    3f5c:	0c 94 b8 22 	jmp	0x4570	; 0x4570 <__prologue_saves__+0xc>
    3f60:	09 2e       	mov	r0, r25
    3f62:	05 94       	asr	r0
    3f64:	22 f4       	brpl	.+8      	; 0x3f6e <__divdi3_moddi3+0x24>
    3f66:	0e 94 24 26 	call	0x4c48	; 0x4c48 <__negdi2>
    3f6a:	11 23       	and	r17, r17
    3f6c:	92 f4       	brpl	.+36     	; 0x3f92 <__divdi3_moddi3+0x48>
    3f6e:	f0 e8       	ldi	r31, 0x80	; 128
    3f70:	0f 26       	eor	r0, r31
    3f72:	ff ef       	ldi	r31, 0xFF	; 255
    3f74:	e0 94       	com	r14
    3f76:	f0 94       	com	r15
    3f78:	00 95       	com	r16
    3f7a:	10 95       	com	r17
    3f7c:	b0 94       	com	r11
    3f7e:	c0 94       	com	r12
    3f80:	d0 94       	com	r13
    3f82:	a1 94       	neg	r10
    3f84:	bf 0a       	sbc	r11, r31
    3f86:	cf 0a       	sbc	r12, r31
    3f88:	df 0a       	sbc	r13, r31
    3f8a:	ef 0a       	sbc	r14, r31
    3f8c:	ff 0a       	sbc	r15, r31
    3f8e:	0f 0b       	sbc	r16, r31
    3f90:	1f 0b       	sbc	r17, r31
    3f92:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <__udivmod64>
    3f96:	07 fc       	sbrc	r0, 7
    3f98:	0e 94 24 26 	call	0x4c48	; 0x4c48 <__negdi2>
    3f9c:	cd b7       	in	r28, 0x3d	; 61
    3f9e:	de b7       	in	r29, 0x3e	; 62
    3fa0:	ec e0       	ldi	r30, 0x0C	; 12
    3fa2:	0c 94 ef 22 	jmp	0x45de	; 0x45de <__epilogue_restores__+0xc>

Disassembly of section .text.libgcc.div:

00004ca4 <__umoddi3>:
    4ca4:	68 94       	set
    4ca6:	01 c0       	rjmp	.+2      	; 0x4caa <__udivdi3_umoddi3>

00004ca8 <__udivdi3>:
    4ca8:	e8 94       	clt

00004caa <__udivdi3_umoddi3>:
    4caa:	8f 92       	push	r8
    4cac:	9f 92       	push	r9
    4cae:	cf 93       	push	r28
    4cb0:	df 93       	push	r29
    4cb2:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <__udivmod64>
    4cb6:	df 91       	pop	r29
    4cb8:	cf 91       	pop	r28
    4cba:	9f 90       	pop	r9
    4cbc:	8f 90       	pop	r8
    4cbe:	08 95       	ret

Disassembly of section .text.libgcc.div:

000034a4 <__udivmod64>:
    34a4:	88 24       	eor	r8, r8
    34a6:	99 24       	eor	r9, r9
    34a8:	f4 01       	movw	r30, r8
    34aa:	e4 01       	movw	r28, r8
    34ac:	b0 e4       	ldi	r27, 0x40	; 64
    34ae:	9f 93       	push	r25
    34b0:	aa 27       	eor	r26, r26
    34b2:	9a 15       	cp	r25, r10
    34b4:	8b 04       	cpc	r8, r11
    34b6:	9c 04       	cpc	r9, r12
    34b8:	ed 05       	cpc	r30, r13
    34ba:	fe 05       	cpc	r31, r14
    34bc:	cf 05       	cpc	r28, r15
    34be:	d0 07       	cpc	r29, r16
    34c0:	a1 07       	cpc	r26, r17
    34c2:	98 f4       	brcc	.+38     	; 0x34ea <__udivmod64+0x46>
    34c4:	ad 2f       	mov	r26, r29
    34c6:	dc 2f       	mov	r29, r28
    34c8:	cf 2f       	mov	r28, r31
    34ca:	fe 2f       	mov	r31, r30
    34cc:	e9 2d       	mov	r30, r9
    34ce:	98 2c       	mov	r9, r8
    34d0:	89 2e       	mov	r8, r25
    34d2:	98 2f       	mov	r25, r24
    34d4:	87 2f       	mov	r24, r23
    34d6:	76 2f       	mov	r23, r22
    34d8:	65 2f       	mov	r22, r21
    34da:	54 2f       	mov	r21, r20
    34dc:	43 2f       	mov	r20, r19
    34de:	32 2f       	mov	r19, r18
    34e0:	22 27       	eor	r18, r18
    34e2:	b8 50       	subi	r27, 0x08	; 8
    34e4:	31 f7       	brne	.-52     	; 0x34b2 <__udivmod64+0xe>
    34e6:	bf 91       	pop	r27
    34e8:	27 c0       	rjmp	.+78     	; 0x3538 <__udivmod64+0x94>
    34ea:	1b 2e       	mov	r1, r27
    34ec:	bf 91       	pop	r27
    34ee:	bb 27       	eor	r27, r27
    34f0:	22 0f       	add	r18, r18
    34f2:	33 1f       	adc	r19, r19
    34f4:	44 1f       	adc	r20, r20
    34f6:	55 1f       	adc	r21, r21
    34f8:	66 1f       	adc	r22, r22
    34fa:	77 1f       	adc	r23, r23
    34fc:	88 1f       	adc	r24, r24
    34fe:	99 1f       	adc	r25, r25
    3500:	88 1c       	adc	r8, r8
    3502:	99 1c       	adc	r9, r9
    3504:	ee 1f       	adc	r30, r30
    3506:	ff 1f       	adc	r31, r31
    3508:	cc 1f       	adc	r28, r28
    350a:	dd 1f       	adc	r29, r29
    350c:	aa 1f       	adc	r26, r26
    350e:	bb 1f       	adc	r27, r27
    3510:	8a 14       	cp	r8, r10
    3512:	9b 04       	cpc	r9, r11
    3514:	ec 05       	cpc	r30, r12
    3516:	fd 05       	cpc	r31, r13
    3518:	ce 05       	cpc	r28, r14
    351a:	df 05       	cpc	r29, r15
    351c:	a0 07       	cpc	r26, r16
    351e:	b1 07       	cpc	r27, r17
    3520:	48 f0       	brcs	.+18     	; 0x3534 <__udivmod64+0x90>
    3522:	8a 18       	sub	r8, r10
    3524:	9b 08       	sbc	r9, r11
    3526:	ec 09       	sbc	r30, r12
    3528:	fd 09       	sbc	r31, r13
    352a:	ce 09       	sbc	r28, r14
    352c:	df 09       	sbc	r29, r15
    352e:	a0 0b       	sbc	r26, r16
    3530:	b1 0b       	sbc	r27, r17
    3532:	21 60       	ori	r18, 0x01	; 1
    3534:	1a 94       	dec	r1
    3536:	e1 f6       	brne	.-72     	; 0x34f0 <__udivmod64+0x4c>
    3538:	2e f4       	brtc	.+10     	; 0x3544 <__udivmod64+0xa0>
    353a:	94 01       	movw	r18, r8
    353c:	af 01       	movw	r20, r30
    353e:	be 01       	movw	r22, r28
    3540:	cd 01       	movw	r24, r26
    3542:	00 0c       	add	r0, r0
    3544:	08 95       	ret

Disassembly of section .text.libgcc:

00004c48 <__negdi2>:
    4c48:	60 95       	com	r22
    4c4a:	70 95       	com	r23
    4c4c:	80 95       	com	r24
    4c4e:	90 95       	com	r25
    4c50:	30 95       	com	r19
    4c52:	40 95       	com	r20
    4c54:	50 95       	com	r21
    4c56:	21 95       	neg	r18
    4c58:	3f 4f       	sbci	r19, 0xFF	; 255
    4c5a:	4f 4f       	sbci	r20, 0xFF	; 255
    4c5c:	5f 4f       	sbci	r21, 0xFF	; 255
    4c5e:	6f 4f       	sbci	r22, 0xFF	; 255
    4c60:	7f 4f       	sbci	r23, 0xFF	; 255
    4c62:	8f 4f       	sbci	r24, 0xFF	; 255
    4c64:	9f 4f       	sbci	r25, 0xFF	; 255
    4c66:	08 95       	ret

Disassembly of section .text.libgcc.prologue:

00004564 <__prologue_saves__>:
    4564:	2f 92       	push	r2
    4566:	3f 92       	push	r3
    4568:	4f 92       	push	r4
    456a:	5f 92       	push	r5
    456c:	6f 92       	push	r6
    456e:	7f 92       	push	r7
    4570:	8f 92       	push	r8
    4572:	9f 92       	push	r9
    4574:	af 92       	push	r10
    4576:	bf 92       	push	r11
    4578:	cf 92       	push	r12
    457a:	df 92       	push	r13
    457c:	ef 92       	push	r14
    457e:	ff 92       	push	r15
    4580:	0f 93       	push	r16
    4582:	1f 93       	push	r17
    4584:	cf 93       	push	r28
    4586:	df 93       	push	r29
    4588:	cd b7       	in	r28, 0x3d	; 61
    458a:	de b7       	in	r29, 0x3e	; 62
    458c:	ca 1b       	sub	r28, r26
    458e:	db 0b       	sbc	r29, r27
    4590:	0f b6       	in	r0, 0x3f	; 63
    4592:	f8 94       	cli
    4594:	de bf       	out	0x3e, r29	; 62
    4596:	0f be       	out	0x3f, r0	; 63
    4598:	cd bf       	out	0x3d, r28	; 61
    459a:	09 94       	ijmp

Disassembly of section .text.libgcc.prologue:

000045d2 <__epilogue_restores__>:
    45d2:	2a 88       	ldd	r2, Y+18	; 0x12
    45d4:	39 88       	ldd	r3, Y+17	; 0x11
    45d6:	48 88       	ldd	r4, Y+16	; 0x10
    45d8:	5f 84       	ldd	r5, Y+15	; 0x0f
    45da:	6e 84       	ldd	r6, Y+14	; 0x0e
    45dc:	7d 84       	ldd	r7, Y+13	; 0x0d
    45de:	8c 84       	ldd	r8, Y+12	; 0x0c
    45e0:	9b 84       	ldd	r9, Y+11	; 0x0b
    45e2:	aa 84       	ldd	r10, Y+10	; 0x0a
    45e4:	b9 84       	ldd	r11, Y+9	; 0x09
    45e6:	c8 84       	ldd	r12, Y+8	; 0x08
    45e8:	df 80       	ldd	r13, Y+7	; 0x07
    45ea:	ee 80       	ldd	r14, Y+6	; 0x06
    45ec:	fd 80       	ldd	r15, Y+5	; 0x05
    45ee:	0c 81       	ldd	r16, Y+4	; 0x04
    45f0:	1b 81       	ldd	r17, Y+3	; 0x03
    45f2:	aa 81       	ldd	r26, Y+2	; 0x02
    45f4:	b9 81       	ldd	r27, Y+1	; 0x01
    45f6:	ce 0f       	add	r28, r30
    45f8:	d1 1d       	adc	r29, r1
    45fa:	0f b6       	in	r0, 0x3f	; 63
    45fc:	f8 94       	cli
    45fe:	de bf       	out	0x3e, r29	; 62
    4600:	0f be       	out	0x3f, r0	; 63
    4602:	cd bf       	out	0x3d, r28	; 61
    4604:	ed 01       	movw	r28, r26
    4606:	08 95       	ret

Disassembly of section .text.libgcc:

00004dda <__adddi3>:
    4dda:	2a 0d       	add	r18, r10
    4ddc:	3b 1d       	adc	r19, r11
    4dde:	4c 1d       	adc	r20, r12
    4de0:	5d 1d       	adc	r21, r13
    4de2:	6e 1d       	adc	r22, r14
    4de4:	7f 1d       	adc	r23, r15
    4de6:	80 1f       	adc	r24, r16
    4de8:	91 1f       	adc	r25, r17
    4dea:	08 95       	ret

Disassembly of section .text.libgcc:

00004dec <__cmpdi2>:
    4dec:	2a 15       	cp	r18, r10
    4dee:	3b 05       	cpc	r19, r11
    4df0:	4c 05       	cpc	r20, r12
    4df2:	5d 05       	cpc	r21, r13
    4df4:	6e 05       	cpc	r22, r14
    4df6:	7f 05       	cpc	r23, r15
    4df8:	80 07       	cpc	r24, r16
    4dfa:	91 07       	cpc	r25, r17
    4dfc:	08 95       	ret
