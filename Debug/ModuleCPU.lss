
ModuleCPU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000050fa  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000da  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000050fc  2**0
                  ALLOC
  3 .noinit       0000022a  00800102  00800102  000050fc  2**2
                  ALLOC
  4 .comment      0000002f  00000000  00000000  000050fa  2**0
                  CONTENTS, READONLY
  5 .stack.descriptors.hdr 00000142  00000000  00000000  00005129  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000550  00000000  00000000  0000526b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00009177  00000000  00000000  000057bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001ace  00000000  00000000  0000e932  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003aa0  00000000  00000000  00010400  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000012c4  00000000  00000000  00013ea0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000070d  00000000  00000000  00015164  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000048dc  00000000  00000000  00015871  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000530  00000000  00000000  0001a14d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .text         00000004  00005036  00005036  000050ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0001a680  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .text.__vector_27 000000bc  00003302  00003302  000033b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.ADCSetPowerOn 0000000c  00004ff0  00004ff0  000050a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.ADCStartConversion 0000002a  000049e2  000049e2  00004a96  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .progmemx.data 0000000b  00000341  00000341  000003f5  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 20 .text.ADCInit 0000013c  00002420  00002420  000024d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .progmemx.data.sg_sMuxSelectList 0000000f  0000031a  0000031a  000003ce  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 22 .bss.sg_eCurrentType 00000001  0080094f  0080094f  000050fc  2**0
                  ALLOC
 23 .bss.sg_eState 00000001  0080096c  0080096c  000050fc  2**0
                  ALLOC
 24 .text.CANLookupCommand 00000062  00003ff6  00003ff6  000040aa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .progmemx.data 0000000b  0000034c  0000034c  00000400  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 26 .text.CANMOBSet 00000212  00001ac6  00001ac6  00001b7a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.CANSendMessageInternal 00000180  00001e96  00001e96  00001f4a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.CANMOBInterrupt 00000166  00002016  00002016  000020ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.__vector_18 0000013e  000022e2  000022e2  00002396  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.CANSendMessage 0000002e  000048aa  000048aa  0000495e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.CANSetRXCallback 0000000a  00005008  00005008  000050bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.CANInit 0000009c  00003710  00003710  000037c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.CANCheckTxStatus 000000ac  00003478  00003478  0000352c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.CANCheckHealth 00000130  00002690  00002690  00002744  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .bss.lastREC.2007 00000001  0080096d  0080096d  000050fc  2**0
                  ALLOC
 36 .bss.lastTEC.2006 00000001  0080096e  0080096e  000050fc  2**0
                  ALLOC
 37 .progmemx.data.sg_sRXCommandList 00000021  000002d5  000002d5  00000389  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 38 .progmemx.data.sg_sMOBModuleRequestTime 00000008  00000357  00000357  0000040b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 39 .progmemx.data.sg_sMOBModuleHardwareDetail 00000008  0000035f  0000035f  00000413  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 40 .progmemx.data.sg_sMOBModuleCellDetail 00000008  00000367  00000367  0000041b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 41 .progmemx.data.sg_sMOBModuleCellCommStat2 00000008  0000036f  0000036f  00000423  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 42 .progmemx.data.sg_sMOBModuleCellCommStat1 00000008  00000377  00000377  0000042b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 43 .progmemx.data.sg_sMOBModuleStatus3 00000008  0000037f  0000037f  00000433  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 44 .progmemx.data.sg_sMOBModuleStatus2 00000008  00000387  00000387  0000043b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 45 .progmemx.data.sg_sMOBModuleStatus1 00000008  0000038f  0000038f  00000443  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 46 .progmemx.data.sg_sMOBModuleAnnouncement 00000008  00000397  00000397  0000044b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 47 .progmemx.data.sg_sMOBGenericReceive 00000008  0000039f  0000039f  00000453  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 48 .progmemx.data.sg_sMOBDisabled 00000008  000003a7  000003a7  0000045b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 49 .bss.sg_u8TxBackoffDelay 00000001  0080096f  0080096f  000050fc  2**0
                  ALLOC
 50 .bss.sg_u8TxOnlyErrorCount 00000001  00800970  00800970  000050fc  2**0
                  ALLOC
 51 .bss.sg_u8BusOffRecoveryDelay 00000001  00800971  00800971  000050fc  2**0
                  ALLOC
 52 .bss.sg_u16ErrorPassive 00000002  0080094d  0080094d  000050fc  2**0
                  ALLOC
 53 .bss.sg_u16BusOffEvents 00000002  0080095c  0080095c  000050fc  2**0
                  ALLOC
 54 .bss.sg_u16TxOkPolled 00000002  0080095e  0080095e  000050fc  2**0
                  ALLOC
 55 .bss.sg_u16TxErrors 00000002  00800960  00800960  000050fc  2**0
                  ALLOC
 56 .bss.sg_u16TxTimeouts 00000002  00800962  00800962  000050fc  2**0
                  ALLOC
 57 .bss.sg_bInRetransmit 00000001  00800972  00800972  000050fc  2**0
                  ALLOC
 58 .bss.sg_u8LastTXDataLen 00000001  00800973  00800973  000050fc  2**0
                  ALLOC
 59 .bss.sg_u8LastTXData 00000008  0080093d  0080093d  000050fc  2**0
                  ALLOC
 60 .bss.sg_eLastTXType 00000001  00800974  00800974  000050fc  2**0
                  ALLOC
 61 .bss.sg_u8TransmitAttempts 00000001  00800975  00800975  000050fc  2**0
                  ALLOC
 62 .bss.sg_pfRXCallback 00000002  00800964  00800964  000050fc  2**0
                  ALLOC
 63 .bss.sg_u8Busy 00000001  00800976  00800976  000050fc  2**0
                  ALLOC
 64 .text.DebugOut 0000000e  00004fb8  00004fb8  0000506c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .text.EEPROMRead 00000012  00004f1e  00004f1e  00004fd2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 66 .text.I2CBitDelay 0000000e  00004fc6  00004fc6  0000507a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 67 .text.I2CStart 0000002c  00004906  00004906  000049ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 68 .text.I2CStop 00000026  00004aac  00004aac  00004b60  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 69 .text.I2CUnstick 0000003c  00004622  00004622  000046d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 70 .text.I2CTxByte 0000006a  00003ebe  00003ebe  00003f72  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 71 .text.I2CRxByte 0000007a  00003d5e  00003d5e  00003e12  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 72 .text.I2CSetup 0000002c  00004932  00004932  000049e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 73 .text.I2CStartTransaction 00000028  00004a0c  00004a0c  00004ac0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 74 .text.CellCountExpectedSet 000000c4  0000317c  0000317c  00003230  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 75 .text.SendModuleControllerStatus 00000010  00004f78  00004f78  0000502c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 76 .text.ModuleControllerStateSet 0000000a  00005012  00005012  000050c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 77 .text.ModuleControllerStateSetMax 00000016  00004e9e  00004e9e  00004f52  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 78 .text.Check5VLoss 00000018  00004e56  00004e56  00004f0a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 79 .text.CellDataConvertVoltage 0000005e  000040ba  000040ba  0000416e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 80 .text.CellDataConvertTemperature 00000064  00003f92  00003f92  00004046  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 81 .text.ModuleCurrentConvertReadings 00000104  000027c0  000027c0  00002874  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 82 .text.__vector_1 00000024  00004ad2  00004ad2  00004b86  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 83 .text.__vector_2 00000024  00004af6  00004af6  00004baa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 84 .text.__vector_3 00000024  00004b1a  00004b1a  00004bce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 85 .text.__vector_4 00000024  00004b3e  00004b3e  00004bf2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 86 .text.__vector_5 00000024  00004b62  00004b62  00004c16  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 87 .text.__vector_6 00000024  00004b86  00004b86  00004c3a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 88 .text.__vector_22 00000024  00004baa  00004baa  00004c5e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 89 .text.__vector_9 00000024  00004bce  00004bce  00004c82  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 90 .text.__vector_11 00000024  00004bf2  00004bf2  00004ca6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 91 .text.__vector_13 00000024  00004c16  00004c16  00004cca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 92 .text.__vector_14 00000024  00004c3a  00004c3a  00004cee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 93 .text.__vector_17 00000024  00004c5e  00004c5e  00004d12  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 94 .text.__vector_19 00000024  00004c82  00004c82  00004d36  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 95 .text.__vector_21 00000024  00004ca6  00004ca6  00004d5a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 96 .text.__vector_25 00000024  00004cca  00004cca  00004d7e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 97 .text.__vector_26 00000024  00004cee  00004cee  00004da2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 98 .text.__vector_29 00000024  00004d12  00004d12  00004dc6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 99 .text.__vector_30 00000024  00004d36  00004d36  00004dea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
100 .text.CurrentThresholdsGet 00000094  000037ac  000037ac  00003860  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
101 .progmemx.data 000001a1  000000da  000000da  0000018e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
102 .text.CANReceiveCallback 00000298  00001198  00001198  0000124c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
103 .text.ControllerStatusMessagesSend 00000404  00000810  00000810  000008c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
104 .text.CellStringProcess 000002ac  00000eec  00000eec  00000fa0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
105 .text.Delay   00000052  000043ce  000043ce  00004482  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
106 .text.PlatformAssert 0000002c  0000495e  0000495e  00004a12  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
107 .text.ModuleControllerStateHandle 0000021e  000018a8  000018a8  0000195c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
108 .text.PlatformGetRegistrationID 00000006  00005030  00005030  000050e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
109 .text.SetSysclock 0000000c  00004ffc  00004ffc  000050b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
110 .text.ModuleControllerGetUniqueID 0000007e  00003b6a  00003b6a  00003c1e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
111 .text.TimerInit 00000052  00004420  00004420  000044d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
112 .text.__vector_12 000000ba  000033be  000033be  00003472  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
113 .text.WatchdogReset 00000002  0000503e  0000503e  000050f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
114 .text.WatchdogOff 0000001a  00004e3c  00004e3c  00004ef0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
115 .text.__vector_28 00000052  00004472  00004472  00004526  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
116 .text.__vector_23 0000008a  00003840  00003840  000038f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
117 .text.__vector_24 0000004c  000044c4  000044c4  00004578  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
118 .text.vUARTRXStart 00000016  00004eb4  00004eb4  00004f68  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
119 .text.vUARTRXEnd 00000024  00004d5a  00004d5a  00004e0e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
120 .text.vUARTRXData 0000007a  00003dd8  00003dd8  00003e8c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
121 .text.PlatformGetSendData 00000028  00004a34  00004a34  00004ae8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
122 .text.ADCCallback 0000002c  0000498a  0000498a  00004a3e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
123 .text.FrameInit 000000cc  00002f20  00002f20  00002fd4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
124 .text.CellStringPowerStateMachine 00000088  00003954  00003954  00003a08  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
125 .text.main    000002d8  00000c14  00000c14  00000cc8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
126 .bss.sg_u8PCMSK1 00000001  00800977  00800977  000050fc  2**0
                  ALLOC
127 .bss.sg_u8PCMSK0 00000001  00800978  00800978  000050fc  2**0
                  ALLOC
128 .bss.sg_u8UnhandledInterruptVector 00000001  00800979  00800979  000050fc  2**0
                  ALLOC
129 .bss.sg_u8Reason 00000001  0080097a  0080097a  000050fc  2**0
                  ALLOC
130 .progmemx.data.sg_u8FractionalLookup 00000010  0000030a  0000030a  000003be  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
131 .bss.sg_u8ControllerStatusMsgCount 00000001  0080097b  0080097b  000050fc  2**0
                  ALLOC
132 .bss.sg_u8CellReports 00000001  0080097c  0080097c  000050fc  2**0
                  ALLOC
133 .bss.sg_u16BytesReceived 00000002  00800966  00800966  000050fc  2**0
                  ALLOC
134 .bss.sg_u8CellBufferTemp 00000004  00800950  00800950  000050fc  2**2
                  ALLOC
135 .bss.sg_u8CellBufferRX 00000001  0080097d  0080097d  000050fc  2**0
                  ALLOC
136 .bss.sg_u8CellIndex 00000001  0080097e  0080097e  000050fc  2**0
                  ALLOC
137 .bss.sg_u8TicksSinceLastPackControllerMessage 00000001  0080097f  0080097f  000050fc  2**0
                  ALLOC
138 .bss.sg_u8CellStringPowerTimer 00000001  00800980  00800980  000050fc  2**0
                  ALLOC
139 .bss.sg_bFrameStart 00000001  00800981  00800981  000050fc  2**0
                  ALLOC
140 .bss.sg_u8CellFrameTimer 00000001  00800982  00800982  000050fc  2**0
                  ALLOC
141 .bss.sg_bIgnoreStatusRequests 00000001  00800983  00800983  000050fc  2**0
                  ALLOC
142 .bss.sg_u8AnnouncementDelayTicks 00000001  00800984  00800984  000050fc  2**0
                  ALLOC
143 .bss.sg_bAnnouncementPending 00000001  00800985  00800985  000050fc  2**0
                  ALLOC
144 .bss.sg_u8CurrentBufferIndex 00000001  00800986  00800986  000050fc  2**0
                  ALLOC
145 .bss.sg_sCurrenBuffer 00000010  0080091d  0080091d  000050fc  2**0
                  ALLOC
146 .text.IsLeapYear 00000034  00004778  00004778  0000482c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
147 .text.RTCStartTransaction 00000044  0000455c  0000455c  00004610  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
148 .text.StructTMToHW 00000054  00004326  00004326  000043da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
149 .text.HWToStructTM 0000007c  00003c66  00003c66  00003d1a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
150 .text.__vector_10 00000086  000039dc  000039dc  00003a90  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
151 .progmemx.data 00000014  000002f6  000002f6  000003aa  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
152 .text.RTCReadRegisters 0000007e  00003be8  00003be8  00003c9c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
153 .text.RTCReadHW 000000e2  00002bae  00002bae  00002c62  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
154 .text.RTCWriteRegisters 0000006a  00003f28  00003f28  00003fdc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
155 .text.RTCWriteHW 000000fe  000028c4  000028c4  00002978  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
156 .text.RTCSetTime 000000c6  000030b6  000030b6  0000316a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
157 .text.RTCInit 00000222  00001686  00001686  0000173a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
158 .progmemx.data.sg_u8DaysInMonths 0000000c  00000329  00000329  000003dd  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
159 .bss.sg_u64Time 00000008  00800945  00800945  000050fc  2**0
                  ALLOC
160 .text.SDSetCS 00000014  00004ef6  00004ef6  00004faa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
161 .text.SDPowerup 0000003a  0000469a  0000469a  0000474e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
162 .text.SDCommand 000000aa  00003524  00003524  000035d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
163 .text.SDGoIdle 00000022  00004da2  00004da2  00004e56  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
164 .text.SDSendOpCondition 00000034  000047ac  000047ac  00004860  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
165 .text.SDSendOpConditionArg 00000056  00004224  00004224  000042d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
166 .text.SDWaitResponse7 0000000e  00004fd4  00004fd4  00005088  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
167 .text.SDSendInterfaceCondition 00000034  000047e0  000047e0  00004894  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
168 .text.SDReadOCR 00000032  00004814  00004814  000048c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
169 .text.SDReadCSD 0000007c  00003ce2  00003ce2  00003d96  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
170 .text.SDReceiveDataBlock 0000008a  000038ca  000038ca  0000397e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
171 .text.SDTransmitDataBlock 000000c2  00003240  00003240  000032f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
172 .text.SDInit  00000166  0000217c  0000217c  00002230  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
173 .text.SDRead  000000d8  00002e48  00002e48  00002efc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
174 .text.SDWrite 000000dc  00002c90  00002c90  00002d44  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
175 .bss.sg_u8CSD 00000010  0080092d  0080092d  000050fc  2**0
                  ALLOC
176 .bss.sg_u16BlockSize 00000002  00800968  00800968  000050fc  2**0
                  ALLOC
177 .bss.sg_u32SDSectorCount 00000004  00800954  00800954  000050fc  2**0
                  ALLOC
178 .text.SPITransaction 00000058  00004174  00004174  00004228  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
179 .text.SPISetBaudRate 000000ca  00002fec  00002fec  000030a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
180 .text.SPIInit 0000002c  000049b6  000049b6  00004a6a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
181 .progmemx.data.sg_sSPIBaudRates 0000002a  000002ab  000002ab  0000035f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
182 .text.readGlobalState 0000003e  000045e4  000045e4  00004698  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
183 .text.writeGlobalState 00000032  00004846  00004846  000048fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
184 .text.updateSessionMap 000000dc  00002d6c  00002d6c  00002e20  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
185 .text.STORE_Init 00000082  00003ae8  00003ae8  00003b9c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
186 .text.STORE_WriteFrame 000000f8  000029c2  000029c2  00002a76  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
187 .text.STORE_StartNewSession 00000054  0000437a  0000437a  0000442e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
188 .text.STORE_EndSession 00000058  000041cc  000041cc  00004280  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
189 .bss.frameBuffer 00000400  0080032c  0080032c  000050fc  2**2
                  ALLOC
190 .bss.currentSector 00000004  00800958  00800958  000050fc  2**0
                  ALLOC
191 .bss.gState   000001d8  0080072c  0080072c  000050fc  2**2
                  ALLOC
192 .text.vUARTtxDataAvailable 00000024  00004d7e  00004d7e  00004e32  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
193 .text.vUARTtxDataGet 0000004c  00004510  00004510  000045c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
194 .text.vUARTRXReset 0000000a  0000501c  0000501c  000050d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
195 .text.vUARTStarttx 00000056  0000427a  0000427a  0000432e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
196 .text.__vector_8 0000005c  00004118  00004118  000041cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
197 .text.__vector_16 000000f4  00002aba  00002aba  00002b6e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
198 .text.__vector_15 00000134  0000255c  0000255c  00002610  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
199 .text.vUARTInit 00000036  0000470c  0000470c  000047c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
200 .text.vUARTInitReceive 00000014  00004f0a  00004f0a  00004fbe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
201 .bss.sg_bState 00000001  00800987  00800987  000050fc  2**0
                  ALLOC
202 .bss.sg_u8SendData 00000002  0080096a  0080096a  000050fc  2**0
                  ALLOC
203 .bss.sg_u8SendIndex 00000001  00800988  00800988  000050fc  2**0
                  ALLOC
204 .bss.sg_bMCTxNextBit 00000001  00800989  00800989  000050fc  2**0
                  ALLOC
205 .bss.sg_bCellReportsReuested 00000001  0080098a  0080098a  000050fc  2**0
                  ALLOC
206 .bss.sg_etxState 00000001  0080098b  0080098b  000050fc  2**0
                  ALLOC
207 .bss.sg_btxMoreAvailable 00000001  0080098c  0080098c  000050fc  2**0
                  ALLOC
208 .bss.sg_u8txDataByte 00000001  0080098d  0080098d  000050fc  2**0
                  ALLOC
209 .bss.sg_u8txBitCount 00000001  0080098e  0080098e  000050fc  2**0
                  ALLOC
210 .bss.sg_bCell_mc_rxMoreData 00000001  0080098f  0080098f  000050fc  2**0
                  ALLOC
211 .bss.sg_bCell_mc_rxPriorState 00000001  00800990  00800990  000050fc  2**0
                  ALLOC
212 .bss.sg_eCell_mc_rxState 00000001  00800991  00800991  000050fc  2**0
                  ALLOC
213 .bss.sg_u8rxDataByte 00000001  00800992  00800992  000050fc  2**0
                  ALLOC
214 .bss.sg_u8Cell_mc_rxBitCount 00000001  00800993  00800993  000050fc  2**0
                  ALLOC
215 .text.libgcc.div 00000028  00004a5c  00004a5c  00004b10  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
216 .text.libgcc.div 00000044  000045a0  000045a0  00004654  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
217 .text.libgcc.div 0000002e  000048d8  000048d8  0000498c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
218 .text.libgcc.div 00000010  00004f88  00004f88  0000503c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
219 .text.libgcc.mul 0000001e  00004de4  00004de4  00004e98  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
220 .text.libgcc.mul 0000000e  00004fe2  00004fe2  00005096  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
221 .text.libgcc.mul 00000016  00004eca  00004eca  00004f7e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
222 .text.libgcc.mul 00000010  00004f98  00004f98  0000504c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
223 .text.libgcc  00000010  00004fa8  00004fa8  0000505c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
224 .text.libgcc  00000018  00004e6e  00004e6e  00004f22  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
225 .text.libgcc  00000018  00004e86  00004e86  00004f3a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
226 .text.__dummy_fini 00000002  00005040  00005040  000050f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
227 .text.__dummy_funcs_on_exit 00000002  00005042  00005042  000050f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
228 .text.__dummy_simulator_exit 00000002  00005044  00005044  000050f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
229 .text.exit    00000016  00004ee0  00004ee0  00004f94  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
230 .text.memcpy  00000032  00004878  00004878  0000492c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
231 .text.memset  00000012  00004f30  00004f30  00004fe4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
232 .text.gmtime  0000000a  00005026  00005026  000050da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
233 .bss.tm.1240  00000019  00800904  00800904  000050fc  2**0
                  ALLOC
234 .progmemx.data 00000004  000003af  000003af  00000463  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
235 .text.__gmtime_r 0000006c  00003e52  00003e52  00003f06  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
236 .progmemx.data 00000004  000003b3  000003b3  00000467  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
237 .text.mktime  00000086  00003a62  00003a62  00003b16  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
238 .text._Exit   00000004  0000503a  0000503a  000050ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
239 .text.__tm_to_secs 000001be  00001cd8  00001cd8  00001d8c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
240 .text.__year_to_secs 00000256  00001430  00001430  000014e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
241 .text.__month_to_secs 0000003c  0000465e  0000465e  00004712  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
242 .progmemx.data.secs_through_month.1090 00000030  0000027b  0000027b  0000032f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
243 .text.__secs_to_tm 00000458  000003b8  000003b8  0000046c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
244 .progmemx.data.days_in_month.1250 0000000c  00000335  00000335  000003e9  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
245 .text.libgcc.div 00000028  00004a84  00004a84  00004b38  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
246 .text.libgcc.mul 000000a0  00003670  00003670  00003724  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
247 .text.libgcc.mul 00000012  00004f42  00004f42  00004ff6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
248 .text.libgcc.mul 0000001e  00004e02  00004e02  00004eb6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
249 .text.libgcc.mul 00000056  000042d0  000042d0  00004384  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
250 .text.libgcc.div 00000062  00004058  00004058  0000410c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
251 .text.libgcc.div 0000001c  00004e20  00004e20  00004ed4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
252 .text.libgcc.div 000000a2  000035ce  000035ce  00003682  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
253 .text.libgcc  00000020  00004dc4  00004dc4  00004e78  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
254 .text.libgcc.prologue 00000038  000046d4  000046d4  00004788  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
255 .text.libgcc.prologue 00000036  00004742  00004742  000047f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
256 .text.libgcc  00000012  00004f54  00004f54  00005008  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
257 .text.libgcc  00000012  00004f66  00004f66  0000501a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 43 00 	jmp	0x86	; 0x86 <__ctors_end>
   4:	0c 94 69 25 	jmp	0x4ad2	; 0x4ad2 <__vector_1>
   8:	0c 94 7b 25 	jmp	0x4af6	; 0x4af6 <__vector_2>
   c:	0c 94 8d 25 	jmp	0x4b1a	; 0x4b1a <__vector_3>
  10:	0c 94 9f 25 	jmp	0x4b3e	; 0x4b3e <__vector_4>
  14:	0c 94 b1 25 	jmp	0x4b62	; 0x4b62 <__vector_5>
  18:	0c 94 c3 25 	jmp	0x4b86	; 0x4b86 <__vector_6>
  1c:	0c 94 1b 28 	jmp	0x5036	; 0x5036 <__bad_interrupt>
  20:	0c 94 8c 20 	jmp	0x4118	; 0x4118 <__vector_8>
  24:	0c 94 e7 25 	jmp	0x4bce	; 0x4bce <__vector_9>
  28:	0c 94 ee 1c 	jmp	0x39dc	; 0x39dc <__vector_10>
  2c:	0c 94 f9 25 	jmp	0x4bf2	; 0x4bf2 <__vector_11>
  30:	0c 94 df 19 	jmp	0x33be	; 0x33be <__vector_12>
  34:	0c 94 0b 26 	jmp	0x4c16	; 0x4c16 <__vector_13>
  38:	0c 94 1d 26 	jmp	0x4c3a	; 0x4c3a <__vector_14>
  3c:	0c 94 ae 12 	jmp	0x255c	; 0x255c <__vector_15>
  40:	0c 94 5d 15 	jmp	0x2aba	; 0x2aba <__vector_16>
  44:	0c 94 2f 26 	jmp	0x4c5e	; 0x4c5e <__vector_17>
  48:	0c 94 71 11 	jmp	0x22e2	; 0x22e2 <__vector_18>
  4c:	0c 94 41 26 	jmp	0x4c82	; 0x4c82 <__vector_19>
  50:	0c 94 1b 28 	jmp	0x5036	; 0x5036 <__bad_interrupt>
  54:	0c 94 53 26 	jmp	0x4ca6	; 0x4ca6 <__vector_21>
  58:	0c 94 d5 25 	jmp	0x4baa	; 0x4baa <__vector_22>
  5c:	0c 94 20 1c 	jmp	0x3840	; 0x3840 <__vector_23>
  60:	0c 94 62 22 	jmp	0x44c4	; 0x44c4 <__vector_24>
  64:	0c 94 65 26 	jmp	0x4cca	; 0x4cca <__vector_25>
  68:	0c 94 77 26 	jmp	0x4cee	; 0x4cee <__vector_26>
  6c:	0c 94 81 19 	jmp	0x3302	; 0x3302 <__vector_27>
  70:	0c 94 39 22 	jmp	0x4472	; 0x4472 <__vector_28>
  74:	0c 94 89 26 	jmp	0x4d12	; 0x4d12 <__vector_29>
  78:	0c 94 9b 26 	jmp	0x4d36	; 0x4d36 <__vector_30>

0000007c <.dinit>:
  7c:	01 00       	.word	0x0001	; ????
  7e:	01 02       	muls	r16, r17
  80:	80 01       	movw	r16, r0
  82:	04 09       	sbc	r16, r4
  84:	94 80       	ldd	r9, Z+4	; 0x04

00000086 <__ctors_end>:
  86:	11 24       	eor	r1, r1
  88:	1f be       	out	0x3f, r1	; 63
  8a:	cf ef       	ldi	r28, 0xFF	; 255
  8c:	d0 e1       	ldi	r29, 0x10	; 16
  8e:	de bf       	out	0x3e, r29	; 62
  90:	cd bf       	out	0x3d, r28	; 61

00000092 <__do_copy_data>:
  92:	ec e7       	ldi	r30, 0x7C	; 124
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	40 e0       	ldi	r20, 0x00	; 0
  98:	17 c0       	rjmp	.+46     	; 0xc8 <__do_clear_bss+0x8>
  9a:	b5 91       	lpm	r27, Z+
  9c:	a5 91       	lpm	r26, Z+
  9e:	35 91       	lpm	r19, Z+
  a0:	25 91       	lpm	r18, Z+
  a2:	05 91       	lpm	r16, Z+
  a4:	07 fd       	sbrc	r16, 7
  a6:	0c c0       	rjmp	.+24     	; 0xc0 <__do_clear_bss>
  a8:	95 91       	lpm	r25, Z+
  aa:	85 91       	lpm	r24, Z+
  ac:	ef 01       	movw	r28, r30
  ae:	f9 2f       	mov	r31, r25
  b0:	e8 2f       	mov	r30, r24
  b2:	05 90       	lpm	r0, Z+
  b4:	0d 92       	st	X+, r0
  b6:	a2 17       	cp	r26, r18
  b8:	b3 07       	cpc	r27, r19
  ba:	d9 f7       	brne	.-10     	; 0xb2 <__do_copy_data+0x20>
  bc:	fe 01       	movw	r30, r28
  be:	04 c0       	rjmp	.+8      	; 0xc8 <__do_clear_bss+0x8>

000000c0 <__do_clear_bss>:
  c0:	1d 92       	st	X+, r1
  c2:	a2 17       	cp	r26, r18
  c4:	b3 07       	cpc	r27, r19
  c6:	e1 f7       	brne	.-8      	; 0xc0 <__do_clear_bss>
  c8:	e6 38       	cpi	r30, 0x86	; 134
  ca:	f4 07       	cpc	r31, r20
  cc:	31 f7       	brne	.-52     	; 0x9a <__do_copy_data+0x8>
  ce:	0e 94 0a 06 	call	0xc14	; 0xc14 <main>
  d2:	0c 94 70 27 	jmp	0x4ee0	; 0x4ee0 <exit>

000000d6 <_exit>:
  d6:	f8 94       	cli

000000d8 <__stop_program>:
  d8:	ff cf       	rjmp	.-2      	; 0xd8 <__stop_program>

Disassembly of section .text:

00005036 <__bad_interrupt>:
    5036:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.__vector_27:

00003302 <__vector_27>:

	// Disable the conversion complete interrupt
	ADCSRA &= (uint8_t)~(1 << ADIE);

	// Clear any pending interrupt	
	ADCSRA |= (1 << ADIF);
    3302:	78 94       	sei
    3304:	1f 92       	push	r1
    3306:	0f 92       	push	r0
    3308:	0f b6       	in	r0, 0x3f	; 63
    330a:	0f 92       	push	r0
    330c:	11 24       	eor	r1, r1
    330e:	2f 93       	push	r18
    3310:	3f 93       	push	r19
    3312:	4f 93       	push	r20
    3314:	5f 93       	push	r21
    3316:	6f 93       	push	r22
    3318:	7f 93       	push	r23
    331a:	8f 93       	push	r24
    331c:	9f 93       	push	r25
    331e:	af 93       	push	r26
    3320:	bf 93       	push	r27
    3322:	ef 93       	push	r30
    3324:	ff 93       	push	r31
    3326:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f0078>
    332a:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f0079>
    332e:	80 91 4f 09 	lds	r24, 0x094F	; 0x80094f <sg_eCurrentType>
    3332:	91 e0       	ldi	r25, 0x01	; 1
    3334:	98 0f       	add	r25, r24
    3336:	90 93 4f 09 	sts	0x094F, r25	; 0x80094f <sg_eCurrentType>
    333a:	95 30       	cpi	r25, 0x05	; 5
    333c:	10 f0       	brcs	.+4      	; 0x3342 <__vector_27+0x40>
    333e:	10 92 4f 09 	sts	0x094F, r1	; 0x80094f <sg_eCurrentType>
    3342:	ac e7       	ldi	r26, 0x7C	; 124
    3344:	b0 e0       	ldi	r27, 0x00	; 0
    3346:	5c 91       	ld	r21, X
    3348:	20 91 4f 09 	lds	r18, 0x094F	; 0x80094f <sg_eCurrentType>
    334c:	30 e0       	ldi	r19, 0x00	; 0
    334e:	f9 01       	movw	r30, r18
    3350:	ee 0f       	add	r30, r30
    3352:	ff 1f       	adc	r31, r31
    3354:	2e 0f       	add	r18, r30
    3356:	3f 1f       	adc	r19, r31
    3358:	03 2e       	mov	r0, r19
    335a:	00 0c       	add	r0, r0
    335c:	44 0b       	sbc	r20, r20
    335e:	26 5e       	subi	r18, 0xE6	; 230
    3360:	3c 4f       	sbci	r19, 0xFC	; 252
    3362:	4f 4f       	sbci	r20, 0xFF	; 255
    3364:	f9 01       	movw	r30, r18
    3366:	94 91       	lpm	r25, Z
    3368:	47 fd       	sbrc	r20, 7
    336a:	90 81       	ld	r25, Z
    336c:	50 7e       	andi	r21, 0xE0	; 224
    336e:	95 2b       	or	r25, r21
    3370:	90 6c       	ori	r25, 0xC0	; 192
    3372:	9c 93       	st	X, r25
    3374:	0e 94 c5 24 	call	0x498a	; 0x498a <ADCCallback>
    3378:	80 91 4f 09 	lds	r24, 0x094F	; 0x80094f <sg_eCurrentType>
    337c:	81 11       	cpse	r24, r1
    337e:	09 c0       	rjmp	.+18     	; 0x3392 <__vector_27+0x90>
    3380:	ea e7       	ldi	r30, 0x7A	; 122
    3382:	f0 e0       	ldi	r31, 0x00	; 0
    3384:	80 81       	ld	r24, Z
    3386:	87 7f       	andi	r24, 0xF7	; 247
    3388:	80 83       	st	Z, r24
    338a:	81 e0       	ldi	r24, 0x01	; 1
    338c:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <sg_eState>
    3390:	05 c0       	rjmp	.+10     	; 0x339c <__vector_27+0x9a>
    3392:	ea e7       	ldi	r30, 0x7A	; 122
    3394:	f0 e0       	ldi	r31, 0x00	; 0
    3396:	80 81       	ld	r24, Z
    3398:	88 64       	ori	r24, 0x48	; 72
    339a:	80 83       	st	Z, r24
    339c:	ff 91       	pop	r31
    339e:	ef 91       	pop	r30
    33a0:	bf 91       	pop	r27
    33a2:	af 91       	pop	r26
    33a4:	9f 91       	pop	r25
    33a6:	8f 91       	pop	r24
    33a8:	7f 91       	pop	r23
    33aa:	6f 91       	pop	r22
    33ac:	5f 91       	pop	r21
    33ae:	4f 91       	pop	r20
    33b0:	3f 91       	pop	r19
    33b2:	2f 91       	pop	r18
    33b4:	0f 90       	pop	r0
    33b6:	0f be       	out	0x3f, r0	; 63
    33b8:	0f 90       	pop	r0
    33ba:	1f 90       	pop	r1
    33bc:	18 95       	reti

Disassembly of section .text.ADCSetPowerOn:

00004ff0 <ADCSetPowerOn>:
}

// Enable ADC
void ADCSetPowerOn( void )
{
	ADCSRA |= (1 << ADEN);
    4ff0:	ea e7       	ldi	r30, 0x7A	; 122
    4ff2:	f0 e0       	ldi	r31, 0x00	; 0
    4ff4:	80 81       	ld	r24, Z
    4ff6:	80 68       	ori	r24, 0x80	; 128
    4ff8:	80 83       	st	Z, r24
    4ffa:	08 95       	ret

Disassembly of section .text.ADCStartConversion:

000049e2 <ADCStartConversion>:
}

void ADCStartConversion(void)
{
	// Don't start anything if we're not idle
	if (EADCSTATE_IDLE != sg_eState)
    49e2:	80 91 6c 09 	lds	r24, 0x096C	; 0x80096c <sg_eState>
    49e6:	81 30       	cpi	r24, 0x01	; 1
    49e8:	81 f4       	brne	.+32     	; 0x4a0a <ADCStartConversion+0x28>
	{
		return;
	}
	
	// Set back to the first channel
	sg_eCurrentType = EADCTYPE_FIRST;
    49ea:	10 92 4f 09 	sts	0x094F, r1	; 0x80094f <sg_eCurrentType>
	
	// Set the MUX
	ADMUX = (ADMUX & MUX_MASK) | (sg_sMuxSelectList[sg_eCurrentType].u8MuxSelect) | MUX_AREF;
    49ee:	ec e7       	ldi	r30, 0x7C	; 124
    49f0:	f0 e0       	ldi	r31, 0x00	; 0
    49f2:	80 81       	ld	r24, Z
    49f4:	80 7e       	andi	r24, 0xE0	; 224
    49f6:	89 6c       	ori	r24, 0xC9	; 201
    49f8:	80 83       	st	Z, r24
		
	sg_eState = EADCSTATE_READING;
    49fa:	82 e0       	ldi	r24, 0x02	; 2
    49fc:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <sg_eState>
	
	// Start a single conversion  - *dp run one at a time for now instead of continuous
	ADCSRA |= (1 << ADSC) | (1 << ADIE) | (1 << ADEN);  // turn power on if it isn't
    4a00:	ea e7       	ldi	r30, 0x7A	; 122
    4a02:	f0 e0       	ldi	r31, 0x00	; 0
    4a04:	80 81       	ld	r24, Z
    4a06:	88 6c       	ori	r24, 0xC8	; 200
    4a08:	80 83       	st	Z, r24
    4a0a:	08 95       	ret

Disassembly of section .text.ADCInit:

00002420 <ADCInit>:

	// Disable the conversion complete interrupt
	ADCSRA &= (uint8_t)~(1 << ADIE);

	// Clear any pending interrupt	
	ADCSRA |= (1 << ADIF);
    2420:	cf 93       	push	r28
    2422:	82 e0       	ldi	r24, 0x02	; 2
    2424:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f007a>
    2428:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
    242c:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7f0094>
    2430:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7f0095>
    2434:	10 92 96 00 	sts	0x0096, r1	; 0x800096 <__TEXT_REGION_LENGTH__+0x7f0096>
    2438:	10 92 97 00 	sts	0x0097, r1	; 0x800097 <__TEXT_REGION_LENGTH__+0x7f0097>
    243c:	80 ea       	ldi	r24, 0xA0	; 160
    243e:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f007b>
    2442:	c0 e0       	ldi	r28, 0x00	; 0
    2444:	83 c0       	rjmp	.+262    	; 0x254c <ADCInit+0x12c>
    2446:	2c 2f       	mov	r18, r28
    2448:	30 e0       	ldi	r19, 0x00	; 0
    244a:	c9 01       	movw	r24, r18
    244c:	88 0f       	add	r24, r24
    244e:	99 1f       	adc	r25, r25
    2450:	82 0f       	add	r24, r18
    2452:	93 1f       	adc	r25, r19
    2454:	01 96       	adiw	r24, 0x01	; 1
    2456:	09 2e       	mov	r0, r25
    2458:	00 0c       	add	r0, r0
    245a:	aa 0b       	sbc	r26, r26
    245c:	86 5e       	subi	r24, 0xE6	; 230
    245e:	9c 4f       	sbci	r25, 0xFC	; 252
    2460:	af 4f       	sbci	r26, 0xFF	; 255
    2462:	fc 01       	movw	r30, r24
    2464:	84 91       	lpm	r24, Z
    2466:	a7 fd       	sbrc	r26, 7
    2468:	80 81       	ld	r24, Z
    246a:	81 30       	cpi	r24, 0x01	; 1
    246c:	41 f0       	breq	.+16     	; 0x247e <ADCInit+0x5e>
    246e:	08 f4       	brcc	.+2      	; 0x2472 <ADCInit+0x52>
    2470:	6c c0       	rjmp	.+216    	; 0x254a <ADCInit+0x12a>
    2472:	82 30       	cpi	r24, 0x02	; 2
    2474:	21 f1       	breq	.+72     	; 0x24be <ADCInit+0x9e>
    2476:	83 30       	cpi	r24, 0x03	; 3
    2478:	09 f4       	brne	.+2      	; 0x247c <ADCInit+0x5c>
    247a:	41 c0       	rjmp	.+130    	; 0x24fe <ADCInit+0xde>
    247c:	5f c0       	rjmp	.+190    	; 0x253c <ADCInit+0x11c>
    247e:	54 b1       	in	r21, 0x04	; 4
    2480:	c9 01       	movw	r24, r18
    2482:	88 0f       	add	r24, r24
    2484:	99 1f       	adc	r25, r25
    2486:	28 0f       	add	r18, r24
    2488:	39 1f       	adc	r19, r25
    248a:	2e 5f       	subi	r18, 0xFE	; 254
    248c:	3f 4f       	sbci	r19, 0xFF	; 255
    248e:	03 2e       	mov	r0, r19
    2490:	00 0c       	add	r0, r0
    2492:	44 0b       	sbc	r20, r20
    2494:	26 5e       	subi	r18, 0xE6	; 230
    2496:	3c 4f       	sbci	r19, 0xFC	; 252
    2498:	4f 4f       	sbci	r20, 0xFF	; 255
    249a:	f9 01       	movw	r30, r18
    249c:	24 91       	lpm	r18, Z
    249e:	47 fd       	sbrc	r20, 7
    24a0:	20 81       	ld	r18, Z
    24a2:	81 e0       	ldi	r24, 0x01	; 1
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	02 c0       	rjmp	.+4      	; 0x24ac <ADCInit+0x8c>
    24a8:	88 0f       	add	r24, r24
    24aa:	99 1f       	adc	r25, r25
    24ac:	2a 95       	dec	r18
    24ae:	e2 f7       	brpl	.-8      	; 0x24a8 <ADCInit+0x88>
    24b0:	80 95       	com	r24
    24b2:	58 23       	and	r21, r24
    24b4:	54 b9       	out	0x04, r21	; 4
    24b6:	95 b1       	in	r25, 0x05	; 5
    24b8:	89 23       	and	r24, r25
    24ba:	85 b9       	out	0x05, r24	; 5
    24bc:	46 c0       	rjmp	.+140    	; 0x254a <ADCInit+0x12a>
    24be:	57 b1       	in	r21, 0x07	; 7
    24c0:	c9 01       	movw	r24, r18
    24c2:	88 0f       	add	r24, r24
    24c4:	99 1f       	adc	r25, r25
    24c6:	28 0f       	add	r18, r24
    24c8:	39 1f       	adc	r19, r25
    24ca:	2e 5f       	subi	r18, 0xFE	; 254
    24cc:	3f 4f       	sbci	r19, 0xFF	; 255
    24ce:	03 2e       	mov	r0, r19
    24d0:	00 0c       	add	r0, r0
    24d2:	44 0b       	sbc	r20, r20
    24d4:	26 5e       	subi	r18, 0xE6	; 230
    24d6:	3c 4f       	sbci	r19, 0xFC	; 252
    24d8:	4f 4f       	sbci	r20, 0xFF	; 255
    24da:	f9 01       	movw	r30, r18
    24dc:	24 91       	lpm	r18, Z
    24de:	47 fd       	sbrc	r20, 7
    24e0:	20 81       	ld	r18, Z
    24e2:	81 e0       	ldi	r24, 0x01	; 1
    24e4:	90 e0       	ldi	r25, 0x00	; 0
    24e6:	02 c0       	rjmp	.+4      	; 0x24ec <ADCInit+0xcc>
    24e8:	88 0f       	add	r24, r24
    24ea:	99 1f       	adc	r25, r25
    24ec:	2a 95       	dec	r18
    24ee:	e2 f7       	brpl	.-8      	; 0x24e8 <ADCInit+0xc8>
    24f0:	80 95       	com	r24
    24f2:	58 23       	and	r21, r24
    24f4:	57 b9       	out	0x07, r21	; 7
    24f6:	98 b1       	in	r25, 0x08	; 8
    24f8:	89 23       	and	r24, r25
    24fa:	88 b9       	out	0x08, r24	; 8
    24fc:	26 c0       	rjmp	.+76     	; 0x254a <ADCInit+0x12a>
    24fe:	4a b1       	in	r20, 0x0a	; 10
    2500:	c9 01       	movw	r24, r18
    2502:	88 0f       	add	r24, r24
    2504:	99 1f       	adc	r25, r25
    2506:	82 0f       	add	r24, r18
    2508:	93 1f       	adc	r25, r19
    250a:	02 96       	adiw	r24, 0x02	; 2
    250c:	09 2e       	mov	r0, r25
    250e:	00 0c       	add	r0, r0
    2510:	aa 0b       	sbc	r26, r26
    2512:	86 5e       	subi	r24, 0xE6	; 230
    2514:	9c 4f       	sbci	r25, 0xFC	; 252
    2516:	af 4f       	sbci	r26, 0xFF	; 255
    2518:	fc 01       	movw	r30, r24
    251a:	24 91       	lpm	r18, Z
    251c:	a7 fd       	sbrc	r26, 7
    251e:	20 81       	ld	r18, Z
    2520:	81 e0       	ldi	r24, 0x01	; 1
    2522:	90 e0       	ldi	r25, 0x00	; 0
    2524:	02 c0       	rjmp	.+4      	; 0x252a <ADCInit+0x10a>
    2526:	88 0f       	add	r24, r24
    2528:	99 1f       	adc	r25, r25
    252a:	2a 95       	dec	r18
    252c:	e2 f7       	brpl	.-8      	; 0x2526 <ADCInit+0x106>
    252e:	80 95       	com	r24
    2530:	48 23       	and	r20, r24
    2532:	4a b9       	out	0x0a, r20	; 10
    2534:	9b b1       	in	r25, 0x0b	; 11
    2536:	89 23       	and	r24, r25
    2538:	8b b9       	out	0x0b, r24	; 11
    253a:	07 c0       	rjmp	.+14     	; 0x254a <ADCInit+0x12a>
    253c:	45 eb       	ldi	r20, 0xB5	; 181
    253e:	50 e0       	ldi	r21, 0x00	; 0
    2540:	61 e4       	ldi	r22, 0x41	; 65
    2542:	73 e0       	ldi	r23, 0x03	; 3
    2544:	80 e0       	ldi	r24, 0x00	; 0
    2546:	0e 94 af 24 	call	0x495e	; 0x495e <PlatformAssert>
    254a:	cf 5f       	subi	r28, 0xFF	; 255
    254c:	c5 30       	cpi	r28, 0x05	; 5
    254e:	08 f4       	brcc	.+2      	; 0x2552 <ADCInit+0x132>
    2550:	7a cf       	rjmp	.-268    	; 0x2446 <ADCInit+0x26>
    2552:	81 e0       	ldi	r24, 0x01	; 1
    2554:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <sg_eState>
    2558:	cf 91       	pop	r28
    255a:	08 95       	ret

Disassembly of section .text.CANLookupCommand:

00003ff6 <CANLookupCommand>:
	{PKT_MODULE_SET_TIME,		ECANMessageType_SetTime},
	{PKT_MODULE_MAX_STATE,		ECANMessageType_MaxState}
};

static ECANMessageType CANLookupCommand( uint16_t u16ID )
{
    3ff6:	cf 93       	push	r28
    3ff8:	df 93       	push	r29
    3ffa:	ec 01       	movw	r28, r24
	uint8_t u8Index = 0;
    3ffc:	90 e0       	ldi	r25, 0x00	; 0
	
	while( u8Index < (sizeof(sg_sRXCommandList)/sizeof(sg_sRXCommandList[0])) )
    3ffe:	26 c0       	rjmp	.+76     	; 0x404c <CANLookupCommand+0x56>
	{
		if( sg_sRXCommandList[u8Index].u16ID == u16ID )
    4000:	a9 2f       	mov	r26, r25
    4002:	b0 e0       	ldi	r27, 0x00	; 0
    4004:	9d 01       	movw	r18, r26
    4006:	22 0f       	add	r18, r18
    4008:	33 1f       	adc	r19, r19
    400a:	2a 0f       	add	r18, r26
    400c:	3b 1f       	adc	r19, r27
    400e:	03 2e       	mov	r0, r19
    4010:	00 0c       	add	r0, r0
    4012:	44 0b       	sbc	r20, r20
    4014:	2b 52       	subi	r18, 0x2B	; 43
    4016:	3d 4f       	sbci	r19, 0xFD	; 253
    4018:	4f 4f       	sbci	r20, 0xFF	; 255
    401a:	f9 01       	movw	r30, r18
    401c:	54 2f       	mov	r21, r20
    401e:	0e 94 d4 27 	call	0x4fa8	; 0x4fa8 <__xload_2>
    4022:	6c 17       	cp	r22, r28
    4024:	7d 07       	cpc	r23, r29
    4026:	89 f4       	brne	.+34     	; 0x404a <CANLookupCommand+0x54>
		{
			return( sg_sRXCommandList[u8Index].eType );
    4028:	cd 01       	movw	r24, r26
    402a:	88 0f       	add	r24, r24
    402c:	99 1f       	adc	r25, r25
    402e:	8a 0f       	add	r24, r26
    4030:	9b 1f       	adc	r25, r27
    4032:	02 96       	adiw	r24, 0x02	; 2
    4034:	09 2e       	mov	r0, r25
    4036:	00 0c       	add	r0, r0
    4038:	aa 0b       	sbc	r26, r26
    403a:	8b 52       	subi	r24, 0x2B	; 43
    403c:	9d 4f       	sbci	r25, 0xFD	; 253
    403e:	af 4f       	sbci	r26, 0xFF	; 255
    4040:	fc 01       	movw	r30, r24
    4042:	84 91       	lpm	r24, Z
    4044:	a7 fd       	sbrc	r26, 7
    4046:	80 81       	ld	r24, Z
    4048:	04 c0       	rjmp	.+8      	; 0x4052 <CANLookupCommand+0x5c>
		}
		
		u8Index++;
    404a:	9f 5f       	subi	r25, 0xFF	; 255

static ECANMessageType CANLookupCommand( uint16_t u16ID )
{
	uint8_t u8Index = 0;
	
	while( u8Index < (sizeof(sg_sRXCommandList)/sizeof(sg_sRXCommandList[0])) )
    404c:	9b 30       	cpi	r25, 0x0B	; 11
    404e:	c0 f2       	brcs	.-80     	; 0x4000 <CANLookupCommand+0xa>
		}
		
		u8Index++;
	}
	
	return( ECANMessageType_MAX );
    4050:	83 e1       	ldi	r24, 0x13	; 19
}
    4052:	df 91       	pop	r29
    4054:	cf 91       	pop	r28
    4056:	08 95       	ret

Disassembly of section .text.CANMOBSet:

00001ac6 <CANMOBSet>:
}

uint8_t CANGetTxBackoffDelay(void)
{
	return sg_u8TxBackoffDelay;
}
    1ac6:	6f 92       	push	r6
    1ac8:	7f 92       	push	r7
    1aca:	8f 92       	push	r8
    1acc:	9f 92       	push	r9
    1ace:	bf 92       	push	r11
    1ad0:	cf 92       	push	r12
    1ad2:	df 92       	push	r13
    1ad4:	ef 92       	push	r14
    1ad6:	ff 92       	push	r15
    1ad8:	0f 93       	push	r16
    1ada:	1f 93       	push	r17
    1adc:	cf 93       	push	r28
    1ade:	df 93       	push	r29
    1ae0:	f8 2e       	mov	r15, r24
    1ae2:	6a 01       	movw	r12, r20
    1ae4:	e6 2e       	mov	r14, r22
    1ae6:	e9 01       	movw	r28, r18
    1ae8:	0f 2e       	mov	r0, r31
    1aea:	f5 e0       	ldi	r31, 0x05	; 5
    1aec:	6f 2e       	mov	r6, r31
    1aee:	f0 2d       	mov	r31, r0
    1af0:	68 16       	cp	r6, r24
    1af2:	38 f4       	brcc	.+14     	; 0x1b02 <CANMOBSet+0x3c>
    1af4:	4d ed       	ldi	r20, 0xDD	; 221
    1af6:	50 e0       	ldi	r21, 0x00	; 0
    1af8:	6c e4       	ldi	r22, 0x4C	; 76
    1afa:	73 e0       	ldi	r23, 0x03	; 3
    1afc:	80 e0       	ldi	r24, 0x00	; 0
    1afe:	0e 94 af 24 	call	0x495e	; 0x495e <PlatformAssert>
    1b02:	09 30       	cpi	r16, 0x09	; 9
    1b04:	38 f0       	brcs	.+14     	; 0x1b14 <CANMOBSet+0x4e>
    1b06:	4e ed       	ldi	r20, 0xDE	; 222
    1b08:	50 e0       	ldi	r21, 0x00	; 0
    1b0a:	6c e4       	ldi	r22, 0x4C	; 76
    1b0c:	73 e0       	ldi	r23, 0x03	; 3
    1b0e:	80 e0       	ldi	r24, 0x00	; 0
    1b10:	0e 94 af 24 	call	0x495e	; 0x495e <PlatformAssert>
    1b14:	eb ed       	ldi	r30, 0xDB	; 219
    1b16:	f0 e0       	ldi	r31, 0x00	; 0
    1b18:	b0 80       	ld	r11, Z
    1b1a:	80 81       	ld	r24, Z
    1b1c:	8f 77       	andi	r24, 0x7F	; 127
    1b1e:	80 83       	st	Z, r24
    1b20:	8f 2d       	mov	r24, r15
    1b22:	82 95       	swap	r24
    1b24:	80 7f       	andi	r24, 0xF0	; 240
    1b26:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f00ed>
    1b2a:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    1b2e:	f6 01       	movw	r30, r12
    1b30:	84 91       	lpm	r24, Z
    1b32:	e7 fc       	sbrc	r14, 7
    1b34:	80 81       	ld	r24, Z
    1b36:	20 e4       	ldi	r18, 0x40	; 64
    1b38:	82 9f       	mul	r24, r18
    1b3a:	c0 01       	movw	r24, r0
    1b3c:	11 24       	eor	r1, r1
    1b3e:	10 2f       	mov	r17, r16
    1b40:	18 2b       	or	r17, r24
    1b42:	ae 2d       	mov	r26, r14
    1b44:	c6 01       	movw	r24, r12
    1b46:	01 96       	adiw	r24, 0x01	; 1
    1b48:	a1 1d       	adc	r26, r1
    1b4a:	fc 01       	movw	r30, r24
    1b4c:	84 91       	lpm	r24, Z
    1b4e:	a7 fd       	sbrc	r26, 7
    1b50:	80 81       	ld	r24, Z
    1b52:	81 11       	cpse	r24, r1
    1b54:	10 62       	ori	r17, 0x20	; 32
    1b56:	10 61       	ori	r17, 0x10	; 16
    1b58:	0e 94 18 28 	call	0x5030	; 0x5030 <PlatformGetRegistrationID>
    1b5c:	4e 2d       	mov	r20, r14
    1b5e:	96 01       	movw	r18, r12
    1b60:	2e 5f       	subi	r18, 0xFE	; 254
    1b62:	3f 4f       	sbci	r19, 0xFF	; 255
    1b64:	4f 4f       	sbci	r20, 0xFF	; 255
    1b66:	f9 01       	movw	r30, r18
    1b68:	54 2f       	mov	r21, r20
    1b6a:	0e 94 d4 27 	call	0x4fa8	; 0x4fa8 <__xload_2>
    1b6e:	ab 01       	movw	r20, r22
    1b70:	57 70       	andi	r21, 0x07	; 7
    1b72:	60 e0       	ldi	r22, 0x00	; 0
    1b74:	70 e0       	ldi	r23, 0x00	; 0
    1b76:	03 2e       	mov	r0, r19
    1b78:	32 e1       	ldi	r19, 0x12	; 18
    1b7a:	44 0f       	add	r20, r20
    1b7c:	55 1f       	adc	r21, r21
    1b7e:	66 1f       	adc	r22, r22
    1b80:	77 1f       	adc	r23, r23
    1b82:	3a 95       	dec	r19
    1b84:	d1 f7       	brne	.-12     	; 0x1b7a <CANMOBSet+0xb4>
    1b86:	30 2d       	mov	r19, r0
    1b88:	3a 01       	movw	r6, r20
    1b8a:	4b 01       	movw	r8, r22
    1b8c:	68 2a       	or	r6, r24
    1b8e:	d4 01       	movw	r26, r8
    1b90:	c3 01       	movw	r24, r6
    1b92:	4e 2d       	mov	r20, r14
    1b94:	96 01       	movw	r18, r12
    1b96:	2a 5f       	subi	r18, 0xFA	; 250
    1b98:	3f 4f       	sbci	r19, 0xFF	; 255
    1b9a:	4f 4f       	sbci	r20, 0xFF	; 255
    1b9c:	f9 01       	movw	r30, r18
    1b9e:	24 91       	lpm	r18, Z
    1ba0:	47 fd       	sbrc	r20, 7
    1ba2:	20 81       	ld	r18, Z
    1ba4:	22 23       	and	r18, r18
    1ba6:	11 f0       	breq	.+4      	; 0x1bac <CANMOBSet+0xe6>
    1ba8:	24 e0       	ldi	r18, 0x04	; 4
    1baa:	01 c0       	rjmp	.+2      	; 0x1bae <CANMOBSet+0xe8>
    1bac:	20 e0       	ldi	r18, 0x00	; 0
    1bae:	e0 ef       	ldi	r30, 0xF0	; 240
    1bb0:	f0 e0       	ldi	r31, 0x00	; 0
    1bb2:	20 83       	st	Z, r18
    1bb4:	20 81       	ld	r18, Z
    1bb6:	38 2f       	mov	r19, r24
    1bb8:	33 0f       	add	r19, r19
    1bba:	33 0f       	add	r19, r19
    1bbc:	33 0f       	add	r19, r19
    1bbe:	23 2b       	or	r18, r19
    1bc0:	20 83       	st	Z, r18
    1bc2:	ac 01       	movw	r20, r24
    1bc4:	bd 01       	movw	r22, r26
    1bc6:	68 94       	set
    1bc8:	14 f8       	bld	r1, 4
    1bca:	76 95       	lsr	r23
    1bcc:	67 95       	ror	r22
    1bce:	57 95       	ror	r21
    1bd0:	47 95       	ror	r20
    1bd2:	16 94       	lsr	r1
    1bd4:	d1 f7       	brne	.-12     	; 0x1bca <CANMOBSet+0x104>
    1bd6:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f00f1>
    1bda:	ac 01       	movw	r20, r24
    1bdc:	bd 01       	movw	r22, r26
    1bde:	03 2e       	mov	r0, r19
    1be0:	3d e0       	ldi	r19, 0x0D	; 13
    1be2:	76 95       	lsr	r23
    1be4:	67 95       	ror	r22
    1be6:	57 95       	ror	r21
    1be8:	47 95       	ror	r20
    1bea:	3a 95       	dec	r19
    1bec:	d1 f7       	brne	.-12     	; 0x1be2 <CANMOBSet+0x11c>
    1bee:	30 2d       	mov	r19, r0
    1bf0:	40 93 f2 00 	sts	0x00F2, r20	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f00f2>
    1bf4:	07 2e       	mov	r0, r23
    1bf6:	75 e1       	ldi	r23, 0x15	; 21
    1bf8:	b6 95       	lsr	r27
    1bfa:	a7 95       	ror	r26
    1bfc:	97 95       	ror	r25
    1bfe:	87 95       	ror	r24
    1c00:	7a 95       	dec	r23
    1c02:	d1 f7       	brne	.-12     	; 0x1bf8 <CANMOBSet+0x132>
    1c04:	70 2d       	mov	r23, r0
    1c06:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f00f3>
    1c0a:	ae 2d       	mov	r26, r14
    1c0c:	c6 01       	movw	r24, r12
    1c0e:	07 96       	adiw	r24, 0x07	; 7
    1c10:	a1 1d       	adc	r26, r1
    1c12:	fc 01       	movw	r30, r24
    1c14:	84 91       	lpm	r24, Z
    1c16:	a7 fd       	sbrc	r26, 7
    1c18:	80 81       	ld	r24, Z
    1c1a:	88 23       	and	r24, r24
    1c1c:	11 f0       	breq	.+4      	; 0x1c22 <CANMOBSet+0x15c>
    1c1e:	84 e0       	ldi	r24, 0x04	; 4
    1c20:	01 c0       	rjmp	.+2      	; 0x1c24 <CANMOBSet+0x15e>
    1c22:	80 e0       	ldi	r24, 0x00	; 0
    1c24:	e4 ef       	ldi	r30, 0xF4	; 244
    1c26:	f0 e0       	ldi	r31, 0x00	; 0
    1c28:	80 83       	st	Z, r24
    1c2a:	80 81       	ld	r24, Z
    1c2c:	81 60       	ori	r24, 0x01	; 1
    1c2e:	80 83       	st	Z, r24
    1c30:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7f00f5>
    1c34:	ae 2d       	mov	r26, r14
    1c36:	c6 01       	movw	r24, r12
    1c38:	04 96       	adiw	r24, 0x04	; 4
    1c3a:	a1 1d       	adc	r26, r1
    1c3c:	fc 01       	movw	r30, r24
    1c3e:	5a 2f       	mov	r21, r26
    1c40:	0e 94 d4 27 	call	0x4fa8	; 0x4fa8 <__xload_2>
    1c44:	62 95       	swap	r22
    1c46:	66 0f       	add	r22, r22
    1c48:	60 7e       	andi	r22, 0xE0	; 224
    1c4a:	60 93 f6 00 	sts	0x00F6, r22	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7f00f6>
    1c4e:	fc 01       	movw	r30, r24
    1c50:	5a 2f       	mov	r21, r26
    1c52:	0e 94 d4 27 	call	0x4fa8	; 0x4fa8 <__xload_2>
    1c56:	76 95       	lsr	r23
    1c58:	67 95       	ror	r22
    1c5a:	76 95       	lsr	r23
    1c5c:	67 95       	ror	r22
    1c5e:	76 95       	lsr	r23
    1c60:	67 95       	ror	r22
    1c62:	60 93 f7 00 	sts	0x00F7, r22	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7f00f7>
    1c66:	04 c0       	rjmp	.+8      	; 0x1c70 <CANMOBSet+0x1aa>
    1c68:	89 91       	ld	r24, Y+
    1c6a:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
    1c6e:	01 50       	subi	r16, 0x01	; 1
    1c70:	01 11       	cpse	r16, r1
    1c72:	fa cf       	rjmp	.-12     	; 0x1c68 <CANMOBSet+0x1a2>
    1c74:	10 93 ef 00 	sts	0x00EF, r17	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    1c78:	f6 01       	movw	r30, r12
    1c7a:	84 91       	lpm	r24, Z
    1c7c:	e7 fc       	sbrc	r14, 7
    1c7e:	80 81       	ld	r24, Z
    1c80:	88 23       	and	r24, r24
    1c82:	69 f0       	breq	.+26     	; 0x1c9e <CANMOBSet+0x1d8>
    1c84:	ee ed       	ldi	r30, 0xDE	; 222
    1c86:	f0 e0       	ldi	r31, 0x00	; 0
    1c88:	20 81       	ld	r18, Z
    1c8a:	81 e0       	ldi	r24, 0x01	; 1
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	02 c0       	rjmp	.+4      	; 0x1c94 <CANMOBSet+0x1ce>
    1c90:	88 0f       	add	r24, r24
    1c92:	99 1f       	adc	r25, r25
    1c94:	fa 94       	dec	r15
    1c96:	e2 f7       	brpl	.-8      	; 0x1c90 <CANMOBSet+0x1ca>
    1c98:	82 2b       	or	r24, r18
    1c9a:	80 83       	st	Z, r24
    1c9c:	0d c0       	rjmp	.+26     	; 0x1cb8 <CANMOBSet+0x1f2>
    1c9e:	ee ed       	ldi	r30, 0xDE	; 222
    1ca0:	f0 e0       	ldi	r31, 0x00	; 0
    1ca2:	20 81       	ld	r18, Z
    1ca4:	81 e0       	ldi	r24, 0x01	; 1
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	02 c0       	rjmp	.+4      	; 0x1cae <CANMOBSet+0x1e8>
    1caa:	88 0f       	add	r24, r24
    1cac:	99 1f       	adc	r25, r25
    1cae:	fa 94       	dec	r15
    1cb0:	e2 f7       	brpl	.-8      	; 0x1caa <CANMOBSet+0x1e4>
    1cb2:	80 95       	com	r24
    1cb4:	82 23       	and	r24, r18
    1cb6:	80 83       	st	Z, r24
    1cb8:	b0 92 db 00 	sts	0x00DB, r11	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f00db>
    1cbc:	df 91       	pop	r29
    1cbe:	cf 91       	pop	r28
    1cc0:	1f 91       	pop	r17
    1cc2:	0f 91       	pop	r16
    1cc4:	ff 90       	pop	r15
    1cc6:	ef 90       	pop	r14
    1cc8:	df 90       	pop	r13
    1cca:	cf 90       	pop	r12
    1ccc:	bf 90       	pop	r11
    1cce:	9f 90       	pop	r9
    1cd0:	8f 90       	pop	r8
    1cd2:	7f 90       	pop	r7
    1cd4:	6f 90       	pop	r6
    1cd6:	08 95       	ret

Disassembly of section .text.CANSendMessageInternal:

00001e96 <CANSendMessageInternal>:
    1e96:	6f 92       	push	r6
    1e98:	7f 92       	push	r7
    1e9a:	8f 92       	push	r8
    1e9c:	ef 92       	push	r14
    1e9e:	ff 92       	push	r15
    1ea0:	0f 93       	push	r16
    1ea2:	cf 93       	push	r28
    1ea4:	df 93       	push	r29
    1ea6:	c8 2f       	mov	r28, r24
    1ea8:	7b 01       	movw	r14, r22
    1eaa:	04 2f       	mov	r16, r20
    1eac:	d2 2f       	mov	r29, r18
    1eae:	88 23       	and	r24, r24
    1eb0:	f9 f0       	breq	.+62     	; 0x1ef0 <CANSendMessageInternal+0x5a>
    1eb2:	81 30       	cpi	r24, 0x01	; 1
    1eb4:	31 f1       	breq	.+76     	; 0x1f02 <CANSendMessageInternal+0x6c>
    1eb6:	82 30       	cpi	r24, 0x02	; 2
    1eb8:	69 f1       	breq	.+90     	; 0x1f14 <CANSendMessageInternal+0x7e>
    1eba:	83 30       	cpi	r24, 0x03	; 3
    1ebc:	a1 f1       	breq	.+104    	; 0x1f26 <CANSendMessageInternal+0x90>
    1ebe:	86 30       	cpi	r24, 0x06	; 6
    1ec0:	d9 f1       	breq	.+118    	; 0x1f38 <CANSendMessageInternal+0xa2>
    1ec2:	87 30       	cpi	r24, 0x07	; 7
    1ec4:	09 f4       	brne	.+2      	; 0x1ec8 <CANSendMessageInternal+0x32>
    1ec6:	41 c0       	rjmp	.+130    	; 0x1f4a <CANSendMessageInternal+0xb4>
    1ec8:	85 30       	cpi	r24, 0x05	; 5
    1eca:	09 f4       	brne	.+2      	; 0x1ece <CANSendMessageInternal+0x38>
    1ecc:	47 c0       	rjmp	.+142    	; 0x1f5c <CANSendMessageInternal+0xc6>
    1ece:	84 30       	cpi	r24, 0x04	; 4
    1ed0:	09 f4       	brne	.+2      	; 0x1ed4 <CANSendMessageInternal+0x3e>
    1ed2:	4d c0       	rjmp	.+154    	; 0x1f6e <CANSendMessageInternal+0xd8>
    1ed4:	88 30       	cpi	r24, 0x08	; 8
    1ed6:	09 f4       	brne	.+2      	; 0x1eda <CANSendMessageInternal+0x44>
    1ed8:	53 c0       	rjmp	.+166    	; 0x1f80 <CANSendMessageInternal+0xea>
    1eda:	40 e5       	ldi	r20, 0x50	; 80
    1edc:	51 e0       	ldi	r21, 0x01	; 1
    1ede:	6c e4       	ldi	r22, 0x4C	; 76
    1ee0:	73 e0       	ldi	r23, 0x03	; 3
    1ee2:	80 e0       	ldi	r24, 0x00	; 0
    1ee4:	0e 94 af 24 	call	0x495e	; 0x495e <PlatformAssert>
    1ee8:	61 2c       	mov	r6, r1
    1eea:	71 2c       	mov	r7, r1
    1eec:	81 2c       	mov	r8, r1
    1eee:	50 c0       	rjmp	.+160    	; 0x1f90 <CANSendMessageInternal+0xfa>
    1ef0:	0f 2e       	mov	r0, r31
    1ef2:	f7 e9       	ldi	r31, 0x97	; 151
    1ef4:	6f 2e       	mov	r6, r31
    1ef6:	f3 e0       	ldi	r31, 0x03	; 3
    1ef8:	7f 2e       	mov	r7, r31
    1efa:	f0 e0       	ldi	r31, 0x00	; 0
    1efc:	8f 2e       	mov	r8, r31
    1efe:	f0 2d       	mov	r31, r0
    1f00:	47 c0       	rjmp	.+142    	; 0x1f90 <CANSendMessageInternal+0xfa>
    1f02:	0f 2e       	mov	r0, r31
    1f04:	ff e8       	ldi	r31, 0x8F	; 143
    1f06:	6f 2e       	mov	r6, r31
    1f08:	f3 e0       	ldi	r31, 0x03	; 3
    1f0a:	7f 2e       	mov	r7, r31
    1f0c:	f0 e0       	ldi	r31, 0x00	; 0
    1f0e:	8f 2e       	mov	r8, r31
    1f10:	f0 2d       	mov	r31, r0
    1f12:	3e c0       	rjmp	.+124    	; 0x1f90 <CANSendMessageInternal+0xfa>
    1f14:	0f 2e       	mov	r0, r31
    1f16:	f7 e8       	ldi	r31, 0x87	; 135
    1f18:	6f 2e       	mov	r6, r31
    1f1a:	f3 e0       	ldi	r31, 0x03	; 3
    1f1c:	7f 2e       	mov	r7, r31
    1f1e:	f0 e0       	ldi	r31, 0x00	; 0
    1f20:	8f 2e       	mov	r8, r31
    1f22:	f0 2d       	mov	r31, r0
    1f24:	35 c0       	rjmp	.+106    	; 0x1f90 <CANSendMessageInternal+0xfa>
    1f26:	0f 2e       	mov	r0, r31
    1f28:	ff e7       	ldi	r31, 0x7F	; 127
    1f2a:	6f 2e       	mov	r6, r31
    1f2c:	f3 e0       	ldi	r31, 0x03	; 3
    1f2e:	7f 2e       	mov	r7, r31
    1f30:	f0 e0       	ldi	r31, 0x00	; 0
    1f32:	8f 2e       	mov	r8, r31
    1f34:	f0 2d       	mov	r31, r0
    1f36:	2c c0       	rjmp	.+88     	; 0x1f90 <CANSendMessageInternal+0xfa>
    1f38:	0f 2e       	mov	r0, r31
    1f3a:	f7 e7       	ldi	r31, 0x77	; 119
    1f3c:	6f 2e       	mov	r6, r31
    1f3e:	f3 e0       	ldi	r31, 0x03	; 3
    1f40:	7f 2e       	mov	r7, r31
    1f42:	f0 e0       	ldi	r31, 0x00	; 0
    1f44:	8f 2e       	mov	r8, r31
    1f46:	f0 2d       	mov	r31, r0
    1f48:	23 c0       	rjmp	.+70     	; 0x1f90 <CANSendMessageInternal+0xfa>
    1f4a:	0f 2e       	mov	r0, r31
    1f4c:	ff e6       	ldi	r31, 0x6F	; 111
    1f4e:	6f 2e       	mov	r6, r31
    1f50:	f3 e0       	ldi	r31, 0x03	; 3
    1f52:	7f 2e       	mov	r7, r31
    1f54:	f0 e0       	ldi	r31, 0x00	; 0
    1f56:	8f 2e       	mov	r8, r31
    1f58:	f0 2d       	mov	r31, r0
    1f5a:	1a c0       	rjmp	.+52     	; 0x1f90 <CANSendMessageInternal+0xfa>
    1f5c:	0f 2e       	mov	r0, r31
    1f5e:	ff e5       	ldi	r31, 0x5F	; 95
    1f60:	6f 2e       	mov	r6, r31
    1f62:	f3 e0       	ldi	r31, 0x03	; 3
    1f64:	7f 2e       	mov	r7, r31
    1f66:	f0 e0       	ldi	r31, 0x00	; 0
    1f68:	8f 2e       	mov	r8, r31
    1f6a:	f0 2d       	mov	r31, r0
    1f6c:	11 c0       	rjmp	.+34     	; 0x1f90 <CANSendMessageInternal+0xfa>
    1f6e:	0f 2e       	mov	r0, r31
    1f70:	f7 e6       	ldi	r31, 0x67	; 103
    1f72:	6f 2e       	mov	r6, r31
    1f74:	f3 e0       	ldi	r31, 0x03	; 3
    1f76:	7f 2e       	mov	r7, r31
    1f78:	f0 e0       	ldi	r31, 0x00	; 0
    1f7a:	8f 2e       	mov	r8, r31
    1f7c:	f0 2d       	mov	r31, r0
    1f7e:	08 c0       	rjmp	.+16     	; 0x1f90 <CANSendMessageInternal+0xfa>
    1f80:	0f 2e       	mov	r0, r31
    1f82:	f7 e5       	ldi	r31, 0x57	; 87
    1f84:	6f 2e       	mov	r6, r31
    1f86:	f3 e0       	ldi	r31, 0x03	; 3
    1f88:	7f 2e       	mov	r7, r31
    1f8a:	f0 e0       	ldi	r31, 0x00	; 0
    1f8c:	8f 2e       	mov	r8, r31
    1f8e:	f0 2d       	mov	r31, r0
    1f90:	dd 23       	and	r29, r29
    1f92:	21 f0       	breq	.+8      	; 0x1f9c <CANSendMessageInternal+0x106>
    1f94:	80 91 72 09 	lds	r24, 0x0972	; 0x800972 <sg_bInRetransmit>
    1f98:	81 11       	cpse	r24, r1
    1f9a:	34 c0       	rjmp	.+104    	; 0x2004 <CANSendMessageInternal+0x16e>
    1f9c:	d1 11       	cpse	r29, r1
    1f9e:	04 c0       	rjmp	.+8      	; 0x1fa8 <CANSendMessageInternal+0x112>
    1fa0:	80 91 76 09 	lds	r24, 0x0976	; 0x800976 <sg_u8Busy>
    1fa4:	81 11       	cpse	r24, r1
    1fa6:	2e c0       	rjmp	.+92     	; 0x2004 <CANSendMessageInternal+0x16e>
    1fa8:	80 91 76 09 	lds	r24, 0x0976	; 0x800976 <sg_u8Busy>
    1fac:	81 11       	cpse	r24, r1
    1fae:	03 c0       	rjmp	.+6      	; 0x1fb6 <CANSendMessageInternal+0x120>
    1fb0:	82 e0       	ldi	r24, 0x02	; 2
    1fb2:	80 93 76 09 	sts	0x0976, r24	; 0x800976 <sg_u8Busy>
    1fb6:	d1 11       	cpse	r29, r1
    1fb8:	1a c0       	rjmp	.+52     	; 0x1fee <CANSendMessageInternal+0x158>
    1fba:	10 92 75 09 	sts	0x0975, r1	; 0x800975 <sg_u8TransmitAttempts>
    1fbe:	c0 93 74 09 	sts	0x0974, r28	; 0x800974 <sg_eLastTXType>
    1fc2:	09 30       	cpi	r16, 0x09	; 9
    1fc4:	38 f0       	brcs	.+14     	; 0x1fd4 <CANSendMessageInternal+0x13e>
    1fc6:	45 e6       	ldi	r20, 0x65	; 101
    1fc8:	51 e0       	ldi	r21, 0x01	; 1
    1fca:	6c e4       	ldi	r22, 0x4C	; 76
    1fcc:	73 e0       	ldi	r23, 0x03	; 3
    1fce:	80 e0       	ldi	r24, 0x00	; 0
    1fd0:	0e 94 af 24 	call	0x495e	; 0x495e <PlatformAssert>
    1fd4:	20 2f       	mov	r18, r16
    1fd6:	30 e0       	ldi	r19, 0x00	; 0
    1fd8:	c7 01       	movw	r24, r14
    1fda:	a0 e8       	ldi	r26, 0x80	; 128
    1fdc:	ac 01       	movw	r20, r24
    1fde:	6a 2f       	mov	r22, r26
    1fe0:	8d e3       	ldi	r24, 0x3D	; 61
    1fe2:	99 e0       	ldi	r25, 0x09	; 9
    1fe4:	0e 94 3c 24 	call	0x4878	; 0x4878 <memcpy>
    1fe8:	00 93 73 09 	sts	0x0973, r16	; 0x800973 <sg_u8LastTXDataLen>
    1fec:	05 c0       	rjmp	.+10     	; 0x1ff8 <CANSendMessageInternal+0x162>
    1fee:	80 91 75 09 	lds	r24, 0x0975	; 0x800975 <sg_u8TransmitAttempts>
    1ff2:	8f 5f       	subi	r24, 0xFF	; 255
    1ff4:	80 93 75 09 	sts	0x0975, r24	; 0x800975 <sg_u8TransmitAttempts>
    1ff8:	97 01       	movw	r18, r14
    1ffa:	68 2d       	mov	r22, r8
    1ffc:	a3 01       	movw	r20, r6
    1ffe:	81 e0       	ldi	r24, 0x01	; 1
    2000:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <CANMOBSet>
    2004:	df 91       	pop	r29
    2006:	cf 91       	pop	r28
    2008:	0f 91       	pop	r16
    200a:	ff 90       	pop	r15
    200c:	ef 90       	pop	r14
    200e:	8f 90       	pop	r8
    2010:	7f 90       	pop	r7
    2012:	6f 90       	pop	r6
    2014:	08 95       	ret

Disassembly of section .text.CANMOBInterrupt:

00002016 <CANMOBInterrupt>:
    2016:	cf 92       	push	r12
    2018:	df 92       	push	r13
    201a:	ff 92       	push	r15
    201c:	0f 93       	push	r16
    201e:	1f 93       	push	r17
    2020:	cf 93       	push	r28
    2022:	df 93       	push	r29
    2024:	cd b7       	in	r28, 0x3d	; 61
    2026:	de b7       	in	r29, 0x3e	; 62
    2028:	28 97       	sbiw	r28, 0x08	; 8
    202a:	0f b6       	in	r0, 0x3f	; 63
    202c:	f8 94       	cli
    202e:	de bf       	out	0x3e, r29	; 62
    2030:	0f be       	out	0x3f, r0	; 63
    2032:	cd bf       	out	0x3d, r28	; 61
    2034:	98 2f       	mov	r25, r24
    2036:	92 95       	swap	r25
    2038:	90 7f       	andi	r25, 0xF0	; 240
    203a:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f00ed>
    203e:	ee ed       	ldi	r30, 0xDE	; 222
    2040:	f0 e0       	ldi	r31, 0x00	; 0
    2042:	20 81       	ld	r18, Z
    2044:	01 e0       	ldi	r16, 0x01	; 1
    2046:	10 e0       	ldi	r17, 0x00	; 0
    2048:	08 2e       	mov	r0, r24
    204a:	02 c0       	rjmp	.+4      	; 0x2050 <CANMOBInterrupt+0x3a>
    204c:	00 0f       	add	r16, r16
    204e:	11 1f       	adc	r17, r17
    2050:	0a 94       	dec	r0
    2052:	e2 f7       	brpl	.-8      	; 0x204c <CANMOBInterrupt+0x36>
    2054:	90 2f       	mov	r25, r16
    2056:	90 95       	com	r25
    2058:	92 23       	and	r25, r18
    205a:	90 83       	st	Z, r25
    205c:	ef ee       	ldi	r30, 0xEF	; 239
    205e:	f0 e0       	ldi	r31, 0x00	; 0
    2060:	90 81       	ld	r25, Z
    2062:	9f 73       	andi	r25, 0x3F	; 63
    2064:	90 83       	st	Z, r25
    2066:	81 11       	cpse	r24, r1
    2068:	50 c0       	rjmp	.+160    	; 0x210a <CANMOBInterrupt+0xf4>
    206a:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    206e:	85 ff       	sbrs	r24, 5
    2070:	38 c0       	rjmp	.+112    	; 0x20e2 <CANMOBInterrupt+0xcc>
    2072:	ee ee       	ldi	r30, 0xEE	; 238
    2074:	f0 e0       	ldi	r31, 0x00	; 0
    2076:	80 81       	ld	r24, Z
    2078:	8f 7d       	andi	r24, 0xDF	; 223
    207a:	80 83       	st	Z, r24
    207c:	c0 90 64 09 	lds	r12, 0x0964	; 0x800964 <sg_pfRXCallback>
    2080:	d0 90 65 09 	lds	r13, 0x0965	; 0x800965 <sg_pfRXCallback+0x1>
    2084:	c1 14       	cp	r12, r1
    2086:	d1 04       	cpc	r13, r1
    2088:	61 f1       	breq	.+88     	; 0x20e2 <CANMOBInterrupt+0xcc>
    208a:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    208e:	8f 70       	andi	r24, 0x0F	; 15
    2090:	f8 2e       	mov	r15, r24
    2092:	40 91 f3 00 	lds	r20, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f00f3>
    2096:	50 e0       	ldi	r21, 0x00	; 0
    2098:	44 0f       	add	r20, r20
    209a:	55 1f       	adc	r21, r21
    209c:	44 0f       	add	r20, r20
    209e:	55 1f       	adc	r21, r21
    20a0:	44 0f       	add	r20, r20
    20a2:	55 1f       	adc	r21, r21
    20a4:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f00f2>
    20a8:	82 95       	swap	r24
    20aa:	86 95       	lsr	r24
    20ac:	87 70       	andi	r24, 0x07	; 7
    20ae:	48 2b       	or	r20, r24
    20b0:	90 e0       	ldi	r25, 0x00	; 0
    20b2:	0a c0       	rjmp	.+20     	; 0x20c8 <CANMOBInterrupt+0xb2>
    20b4:	20 91 fa 00 	lds	r18, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
    20b8:	e1 e0       	ldi	r30, 0x01	; 1
    20ba:	f0 e0       	ldi	r31, 0x00	; 0
    20bc:	ec 0f       	add	r30, r28
    20be:	fd 1f       	adc	r31, r29
    20c0:	e9 0f       	add	r30, r25
    20c2:	f1 1d       	adc	r31, r1
    20c4:	20 83       	st	Z, r18
    20c6:	9f 5f       	subi	r25, 0xFF	; 255
    20c8:	9f 15       	cp	r25, r15
    20ca:	a0 f3       	brcs	.-24     	; 0x20b4 <CANMOBInterrupt+0x9e>
    20cc:	ca 01       	movw	r24, r20
    20ce:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <CANLookupCommand>
    20d2:	83 31       	cpi	r24, 0x13	; 19
    20d4:	31 f0       	breq	.+12     	; 0x20e2 <CANMOBInterrupt+0xcc>
    20d6:	4f 2d       	mov	r20, r15
    20d8:	be 01       	movw	r22, r28
    20da:	6f 5f       	subi	r22, 0xFF	; 255
    20dc:	7f 4f       	sbci	r23, 0xFF	; 255
    20de:	f6 01       	movw	r30, r12
    20e0:	09 95       	icall
    20e2:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    20e6:	8e 70       	andi	r24, 0x0E	; 14
    20e8:	29 f0       	breq	.+10     	; 0x20f4 <CANMOBInterrupt+0xde>
    20ea:	ee ee       	ldi	r30, 0xEE	; 238
    20ec:	f0 e0       	ldi	r31, 0x00	; 0
    20ee:	80 81       	ld	r24, Z
    20f0:	81 7f       	andi	r24, 0xF1	; 241
    20f2:	80 83       	st	Z, r24
    20f4:	ee ed       	ldi	r30, 0xDE	; 222
    20f6:	f0 e0       	ldi	r31, 0x00	; 0
    20f8:	80 81       	ld	r24, Z
    20fa:	08 2b       	or	r16, r24
    20fc:	00 83       	st	Z, r16
    20fe:	ef ee       	ldi	r30, 0xEF	; 239
    2100:	f0 e0       	ldi	r31, 0x00	; 0
    2102:	80 81       	ld	r24, Z
    2104:	80 68       	ori	r24, 0x80	; 128
    2106:	80 83       	st	Z, r24
    2108:	2b c0       	rjmp	.+86     	; 0x2160 <CANMOBInterrupt+0x14a>
    210a:	81 30       	cpi	r24, 0x01	; 1
    210c:	49 f5       	brne	.+82     	; 0x2160 <CANMOBInterrupt+0x14a>
    210e:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    2112:	86 ff       	sbrs	r24, 6
    2114:	07 c0       	rjmp	.+14     	; 0x2124 <CANMOBInterrupt+0x10e>
    2116:	ee ee       	ldi	r30, 0xEE	; 238
    2118:	f0 e0       	ldi	r31, 0x00	; 0
    211a:	80 81       	ld	r24, Z
    211c:	8f 7b       	andi	r24, 0xBF	; 191
    211e:	80 83       	st	Z, r24
    2120:	10 92 76 09 	sts	0x0976, r1	; 0x800976 <sg_u8Busy>
    2124:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    2128:	89 71       	andi	r24, 0x19	; 25
    212a:	d1 f0       	breq	.+52     	; 0x2160 <CANMOBInterrupt+0x14a>
    212c:	ee ee       	ldi	r30, 0xEE	; 238
    212e:	f0 e0       	ldi	r31, 0x00	; 0
    2130:	80 81       	ld	r24, Z
    2132:	86 7e       	andi	r24, 0xE6	; 230
    2134:	80 83       	st	Z, r24
    2136:	80 91 75 09 	lds	r24, 0x0975	; 0x800975 <sg_u8TransmitAttempts>
    213a:	84 31       	cpi	r24, 0x14	; 20
    213c:	68 f4       	brcc	.+26     	; 0x2158 <CANMOBInterrupt+0x142>
    213e:	81 e0       	ldi	r24, 0x01	; 1
    2140:	80 93 72 09 	sts	0x0972, r24	; 0x800972 <sg_bInRetransmit>
    2144:	21 e0       	ldi	r18, 0x01	; 1
    2146:	40 91 73 09 	lds	r20, 0x0973	; 0x800973 <sg_u8LastTXDataLen>
    214a:	6d e3       	ldi	r22, 0x3D	; 61
    214c:	79 e0       	ldi	r23, 0x09	; 9
    214e:	80 91 74 09 	lds	r24, 0x0974	; 0x800974 <sg_eLastTXType>
    2152:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <CANSendMessageInternal>
    2156:	04 c0       	rjmp	.+8      	; 0x2160 <CANMOBInterrupt+0x14a>
    2158:	10 92 76 09 	sts	0x0976, r1	; 0x800976 <sg_u8Busy>
    215c:	10 92 72 09 	sts	0x0972, r1	; 0x800972 <sg_bInRetransmit>
    2160:	28 96       	adiw	r28, 0x08	; 8
    2162:	0f b6       	in	r0, 0x3f	; 63
    2164:	f8 94       	cli
    2166:	de bf       	out	0x3e, r29	; 62
    2168:	0f be       	out	0x3f, r0	; 63
    216a:	cd bf       	out	0x3d, r28	; 61
    216c:	df 91       	pop	r29
    216e:	cf 91       	pop	r28
    2170:	1f 91       	pop	r17
    2172:	0f 91       	pop	r16
    2174:	ff 90       	pop	r15
    2176:	df 90       	pop	r13
    2178:	cf 90       	pop	r12
    217a:	08 95       	ret

Disassembly of section .text.__vector_18:

000022e2 <__vector_18>:
    22e2:	1f 92       	push	r1
    22e4:	0f 92       	push	r0
    22e6:	0f b6       	in	r0, 0x3f	; 63
    22e8:	0f 92       	push	r0
    22ea:	11 24       	eor	r1, r1
    22ec:	0f 93       	push	r16
    22ee:	1f 93       	push	r17
    22f0:	2f 93       	push	r18
    22f2:	3f 93       	push	r19
    22f4:	4f 93       	push	r20
    22f6:	5f 93       	push	r21
    22f8:	6f 93       	push	r22
    22fa:	7f 93       	push	r23
    22fc:	8f 93       	push	r24
    22fe:	9f 93       	push	r25
    2300:	af 93       	push	r26
    2302:	bf 93       	push	r27
    2304:	cf 93       	push	r28
    2306:	df 93       	push	r29
    2308:	ef 93       	push	r30
    230a:	ff 93       	push	r31
    230c:	eb ed       	ldi	r30, 0xDB	; 219
    230e:	f0 e0       	ldi	r31, 0x00	; 0
    2310:	d0 81       	ld	r29, Z
    2312:	10 91 de 00 	lds	r17, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7f00de>
    2316:	80 81       	ld	r24, Z
    2318:	8f 77       	andi	r24, 0x7F	; 127
    231a:	80 83       	st	Z, r24
    231c:	c0 91 e0 00 	lds	r28, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f00e0>
    2320:	c0 ff       	sbrs	r28, 0
    2322:	0c c0       	rjmp	.+24     	; 0x233c <__vector_18+0x5a>
    2324:	80 e0       	ldi	r24, 0x00	; 0
    2326:	0e 94 0b 10 	call	0x2016	; 0x2016 <CANMOBInterrupt>
    232a:	00 e0       	ldi	r16, 0x00	; 0
    232c:	20 e0       	ldi	r18, 0x00	; 0
    232e:	30 e0       	ldi	r19, 0x00	; 0
    2330:	4f e9       	ldi	r20, 0x9F	; 159
    2332:	53 e0       	ldi	r21, 0x03	; 3
    2334:	60 e0       	ldi	r22, 0x00	; 0
    2336:	80 e0       	ldi	r24, 0x00	; 0
    2338:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <CANMOBSet>
    233c:	c1 ff       	sbrs	r28, 1
    233e:	03 c0       	rjmp	.+6      	; 0x2346 <__vector_18+0x64>
    2340:	81 e0       	ldi	r24, 0x01	; 1
    2342:	0e 94 0b 10 	call	0x2016	; 0x2016 <CANMOBInterrupt>
    2346:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    234a:	86 ff       	sbrs	r24, 6
    234c:	16 c0       	rjmp	.+44     	; 0x237a <__vector_18+0x98>
    234e:	80 e4       	ldi	r24, 0x40	; 64
    2350:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    2354:	80 91 5c 09 	lds	r24, 0x095C	; 0x80095c <sg_u16BusOffEvents>
    2358:	90 91 5d 09 	lds	r25, 0x095D	; 0x80095d <sg_u16BusOffEvents+0x1>
    235c:	01 96       	adiw	r24, 0x01	; 1
    235e:	90 93 5d 09 	sts	0x095D, r25	; 0x80095d <sg_u16BusOffEvents+0x1>
    2362:	80 93 5c 09 	sts	0x095C, r24	; 0x80095c <sg_u16BusOffEvents>
    2366:	82 e0       	ldi	r24, 0x02	; 2
    2368:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f00d8>
    236c:	10 92 76 09 	sts	0x0976, r1	; 0x800976 <sg_u8Busy>
    2370:	10 92 72 09 	sts	0x0972, r1	; 0x800972 <sg_bInRetransmit>
    2374:	8a e0       	ldi	r24, 0x0A	; 10
    2376:	80 93 71 09 	sts	0x0971, r24	; 0x800971 <sg_u8BusOffRecoveryDelay>
    237a:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    237e:	84 ff       	sbrs	r24, 4
    2380:	0a c0       	rjmp	.+20     	; 0x2396 <__vector_18+0xb4>
    2382:	45 e4       	ldi	r20, 0x45	; 69
    2384:	52 e0       	ldi	r21, 0x02	; 2
    2386:	6c e4       	ldi	r22, 0x4C	; 76
    2388:	73 e0       	ldi	r23, 0x03	; 3
    238a:	80 e0       	ldi	r24, 0x00	; 0
    238c:	0e 94 af 24 	call	0x495e	; 0x495e <PlatformAssert>
    2390:	80 e1       	ldi	r24, 0x10	; 16
    2392:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    2396:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    239a:	83 ff       	sbrs	r24, 3
    239c:	03 c0       	rjmp	.+6      	; 0x23a4 <__vector_18+0xc2>
    239e:	88 e0       	ldi	r24, 0x08	; 8
    23a0:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    23a4:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    23a8:	82 ff       	sbrs	r24, 2
    23aa:	03 c0       	rjmp	.+6      	; 0x23b2 <__vector_18+0xd0>
    23ac:	84 e0       	ldi	r24, 0x04	; 4
    23ae:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    23b2:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    23b6:	81 ff       	sbrs	r24, 1
    23b8:	03 c0       	rjmp	.+6      	; 0x23c0 <__vector_18+0xde>
    23ba:	82 e0       	ldi	r24, 0x02	; 2
    23bc:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    23c0:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    23c4:	80 ff       	sbrs	r24, 0
    23c6:	13 c0       	rjmp	.+38     	; 0x23ee <__vector_18+0x10c>
    23c8:	81 e0       	ldi	r24, 0x01	; 1
    23ca:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    23ce:	80 91 75 09 	lds	r24, 0x0975	; 0x800975 <sg_u8TransmitAttempts>
    23d2:	84 31       	cpi	r24, 0x14	; 20
    23d4:	50 f4       	brcc	.+20     	; 0x23ea <__vector_18+0x108>
    23d6:	21 e0       	ldi	r18, 0x01	; 1
    23d8:	40 91 73 09 	lds	r20, 0x0973	; 0x800973 <sg_u8LastTXDataLen>
    23dc:	6d e3       	ldi	r22, 0x3D	; 61
    23de:	79 e0       	ldi	r23, 0x09	; 9
    23e0:	80 91 74 09 	lds	r24, 0x0974	; 0x800974 <sg_eLastTXType>
    23e4:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <CANSendMessageInternal>
    23e8:	02 c0       	rjmp	.+4      	; 0x23ee <__vector_18+0x10c>
    23ea:	10 92 76 09 	sts	0x0976, r1	; 0x800976 <sg_u8Busy>
    23ee:	10 93 de 00 	sts	0x00DE, r17	; 0x8000de <__TEXT_REGION_LENGTH__+0x7f00de>
    23f2:	d0 93 db 00 	sts	0x00DB, r29	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f00db>
    23f6:	ff 91       	pop	r31
    23f8:	ef 91       	pop	r30
    23fa:	df 91       	pop	r29
    23fc:	cf 91       	pop	r28
    23fe:	bf 91       	pop	r27
    2400:	af 91       	pop	r26
    2402:	9f 91       	pop	r25
    2404:	8f 91       	pop	r24
    2406:	7f 91       	pop	r23
    2408:	6f 91       	pop	r22
    240a:	5f 91       	pop	r21
    240c:	4f 91       	pop	r20
    240e:	3f 91       	pop	r19
    2410:	2f 91       	pop	r18
    2412:	1f 91       	pop	r17
    2414:	0f 91       	pop	r16
    2416:	0f 90       	pop	r0
    2418:	0f be       	out	0x3f, r0	; 63
    241a:	0f 90       	pop	r0
    241c:	1f 90       	pop	r1
    241e:	18 95       	reti

Disassembly of section .text.CANSendMessage:

000048aa <CANSendMessage>:
bool CANSendMessage( ECANMessageType eType,
					 uint8_t* pu8Data,
					 uint8_t u8DataLen )
{
	// Don't transmit during bus-off recovery period
	if (sg_u8BusOffRecoveryDelay > 0)
    48aa:	90 91 71 09 	lds	r25, 0x0971	; 0x800971 <sg_u8BusOffRecoveryDelay>
    48ae:	91 11       	cpse	r25, r1
    48b0:	0d c0       	rjmp	.+26     	; 0x48cc <CANSendMessage+0x22>
	{
		return(false);
	}

	// Don't transmit during TX backoff period (adaptive backoff for persistent errors)
	if (sg_u8TxBackoffDelay > 0)
    48b2:	90 91 6f 09 	lds	r25, 0x096F	; 0x80096f <sg_u8TxBackoffDelay>
    48b6:	91 11       	cpse	r25, r1
    48b8:	0b c0       	rjmp	.+22     	; 0x48d0 <CANSendMessage+0x26>
		return(false);
	}

	// If we're busy, kick it back so we're cooperatively multitasking
	// rather than spin locking
	if (sg_u8Busy)
    48ba:	90 91 76 09 	lds	r25, 0x0976	; 0x800976 <sg_u8Busy>
    48be:	91 11       	cpse	r25, r1
    48c0:	09 c0       	rjmp	.+18     	; 0x48d4 <CANSendMessage+0x2a>
	{
		return(false);
	}

	CANSendMessageInternal( eType, pu8Data, u8DataLen, false );
    48c2:	20 e0       	ldi	r18, 0x00	; 0
    48c4:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <CANSendMessageInternal>
	return( true );
    48c8:	81 e0       	ldi	r24, 0x01	; 1
    48ca:	08 95       	ret
					 uint8_t u8DataLen )
{
	// Don't transmit during bus-off recovery period
	if (sg_u8BusOffRecoveryDelay > 0)
	{
		return(false);
    48cc:	80 e0       	ldi	r24, 0x00	; 0
    48ce:	08 95       	ret
	}

	// Don't transmit during TX backoff period (adaptive backoff for persistent errors)
	if (sg_u8TxBackoffDelay > 0)
	{
		return(false);
    48d0:	80 e0       	ldi	r24, 0x00	; 0
    48d2:	08 95       	ret

	// If we're busy, kick it back so we're cooperatively multitasking
	// rather than spin locking
	if (sg_u8Busy)
	{
		return(false);
    48d4:	80 e0       	ldi	r24, 0x00	; 0
	}

	CANSendMessageInternal( eType, pu8Data, u8DataLen, false );
	return( true );
}
    48d6:	08 95       	ret

Disassembly of section .text.CANSetRXCallback:

00005008 <CANSetRXCallback>:

void CANSetRXCallback( void (*pfCallback)(ECANMessageType eType, uint8_t* pu8Data, uint8_t u8DataLen) )
{
	sg_pfRXCallback = pfCallback;
    5008:	90 93 65 09 	sts	0x0965, r25	; 0x800965 <sg_pfRXCallback+0x1>
    500c:	80 93 64 09 	sts	0x0964, r24	; 0x800964 <sg_pfRXCallback>
    5010:	08 95       	ret

Disassembly of section .text.CANInit:

00003710 <CANInit>:
}

void CANInit( void )
{
    3710:	0f 93       	push	r16
    3712:	cf 93       	push	r28
	// Init clock
	// See datasheet table 16-2.
	// For 8Mhz, set CAN rate to 500 Kbps
	CANBT1 = 0x02;
    3714:	c2 e0       	ldi	r28, 0x02	; 2
    3716:	c0 93 e2 00 	sts	0x00E2, r28	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f00e2>
	CANBT2 = 0x04;
    371a:	84 e0       	ldi	r24, 0x04	; 4
    371c:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f00e3>
	CANBT3 = 0x12;
    3720:	82 e1       	ldi	r24, 0x12	; 18
    3722:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7f00e4>
	
	// Init message objects (MOBs) since there are no defaults at reset
	CANMOBSet( 0, &sg_sMOBDisabled, NULL, 0 );
    3726:	00 e0       	ldi	r16, 0x00	; 0
    3728:	20 e0       	ldi	r18, 0x00	; 0
    372a:	30 e0       	ldi	r19, 0x00	; 0
    372c:	47 ea       	ldi	r20, 0xA7	; 167
    372e:	53 e0       	ldi	r21, 0x03	; 3
    3730:	60 e0       	ldi	r22, 0x00	; 0
    3732:	80 e0       	ldi	r24, 0x00	; 0
    3734:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <CANMOBSet>
	CANMOBSet( 1, &sg_sMOBDisabled, NULL, 0 );
    3738:	20 e0       	ldi	r18, 0x00	; 0
    373a:	30 e0       	ldi	r19, 0x00	; 0
    373c:	47 ea       	ldi	r20, 0xA7	; 167
    373e:	53 e0       	ldi	r21, 0x03	; 3
    3740:	60 e0       	ldi	r22, 0x00	; 0
    3742:	81 e0       	ldi	r24, 0x01	; 1
    3744:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <CANMOBSet>
	CANMOBSet( 2, &sg_sMOBDisabled, NULL, 0 );
    3748:	20 e0       	ldi	r18, 0x00	; 0
    374a:	30 e0       	ldi	r19, 0x00	; 0
    374c:	47 ea       	ldi	r20, 0xA7	; 167
    374e:	53 e0       	ldi	r21, 0x03	; 3
    3750:	60 e0       	ldi	r22, 0x00	; 0
    3752:	82 e0       	ldi	r24, 0x02	; 2
    3754:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <CANMOBSet>
	CANMOBSet( 3, &sg_sMOBDisabled, NULL, 0 );
    3758:	20 e0       	ldi	r18, 0x00	; 0
    375a:	30 e0       	ldi	r19, 0x00	; 0
    375c:	47 ea       	ldi	r20, 0xA7	; 167
    375e:	53 e0       	ldi	r21, 0x03	; 3
    3760:	60 e0       	ldi	r22, 0x00	; 0
    3762:	83 e0       	ldi	r24, 0x03	; 3
    3764:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <CANMOBSet>
	CANMOBSet( 4, &sg_sMOBDisabled, NULL, 0 );
    3768:	20 e0       	ldi	r18, 0x00	; 0
    376a:	30 e0       	ldi	r19, 0x00	; 0
    376c:	47 ea       	ldi	r20, 0xA7	; 167
    376e:	53 e0       	ldi	r21, 0x03	; 3
    3770:	60 e0       	ldi	r22, 0x00	; 0
    3772:	84 e0       	ldi	r24, 0x04	; 4
    3774:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <CANMOBSet>
	CANMOBSet( 5, &sg_sMOBDisabled, NULL, 0 );
    3778:	20 e0       	ldi	r18, 0x00	; 0
    377a:	30 e0       	ldi	r19, 0x00	; 0
    377c:	47 ea       	ldi	r20, 0xA7	; 167
    377e:	53 e0       	ldi	r21, 0x03	; 3
    3780:	60 e0       	ldi	r22, 0x00	; 0
    3782:	85 e0       	ldi	r24, 0x05	; 5
    3784:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <CANMOBSet>
	
	// Setup generic RX
	CANMOBSet( CANMOB_RX_IDX, &sg_sMOBGenericReceive, NULL, 0 );
    3788:	20 e0       	ldi	r18, 0x00	; 0
    378a:	30 e0       	ldi	r19, 0x00	; 0
    378c:	4f e9       	ldi	r20, 0x9F	; 159
    378e:	53 e0       	ldi	r21, 0x03	; 3
    3790:	60 e0       	ldi	r22, 0x00	; 0
    3792:	80 e0       	ldi	r24, 0x00	; 0
    3794:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <CANMOBSet>
	
	// Enable general CAN interrupts
	CANGIE = (1 << ENIT) | (1 << ENRX) | (1 << ENTX) | (1 << ENERR) | (1 << ENBX) | (1 << ENERG);
    3798:	8e eb       	ldi	r24, 0xBE	; 190
    379a:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f00db>

//	CANGIE &= ~(1 << ENOVRT);  // Disable CAN timer overflow interrupt

	// Enable the bus
	CANGCON = (1 << ENASTB);
    379e:	c0 93 d8 00 	sts	0x00D8, r28	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f00d8>
	sg_u8Busy = 0;
    37a2:	10 92 76 09 	sts	0x0976, r1	; 0x800976 <sg_u8Busy>
}
    37a6:	cf 91       	pop	r28
    37a8:	0f 91       	pop	r16
    37aa:	08 95       	ret

Disassembly of section .text.CANCheckTxStatus:

00003478 <CANCheckTxStatus>:

void CANCheckTxStatus(void)
{
	// Only check if we think we're busy
	if (sg_u8Busy > 0)
    3478:	80 91 76 09 	lds	r24, 0x0976	; 0x800976 <sg_u8Busy>
    347c:	88 23       	and	r24, r24
    347e:	09 f4       	brne	.+2      	; 0x3482 <CANCheckTxStatus+0xa>
    3480:	50 c0       	rjmp	.+160    	; 0x3522 <CANCheckTxStatus+0xaa>
	{
		// Save current MOB and switch to TX MOB
		uint8_t savedMOB = CANPAGE;
    3482:	ed ee       	ldi	r30, 0xED	; 237
    3484:	f0 e0       	ldi	r31, 0x00	; 0
    3486:	80 81       	ld	r24, Z
		CANPAGE = CANMOB_TX_IDX << MOBNB0;
    3488:	90 e1       	ldi	r25, 0x10	; 16
    348a:	90 83       	st	Z, r25

		// Check if transmission completed successfully
		if (CANSTMOB & (1 << TXOK))
    348c:	90 91 ee 00 	lds	r25, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    3490:	96 ff       	sbrs	r25, 6
    3492:	12 c0       	rjmp	.+36     	; 0x34b8 <CANCheckTxStatus+0x40>
		{
			// Clear the flag
			CANSTMOB &= ~(1 << TXOK);
    3494:	ee ee       	ldi	r30, 0xEE	; 238
    3496:	f0 e0       	ldi	r31, 0x00	; 0
    3498:	90 81       	ld	r25, Z
    349a:	9f 7b       	andi	r25, 0xBF	; 191
    349c:	90 83       	st	Z, r25
			sg_u8Busy = 0;
    349e:	10 92 76 09 	sts	0x0976, r1	; 0x800976 <sg_u8Busy>
			sg_u16TxOkPolled++;	// Diagnostic: we caught TXOK by polling
    34a2:	20 91 5e 09 	lds	r18, 0x095E	; 0x80095e <sg_u16TxOkPolled>
    34a6:	30 91 5f 09 	lds	r19, 0x095F	; 0x80095f <sg_u16TxOkPolled+0x1>
    34aa:	2f 5f       	subi	r18, 0xFF	; 255
    34ac:	3f 4f       	sbci	r19, 0xFF	; 255
    34ae:	30 93 5f 09 	sts	0x095F, r19	; 0x80095f <sg_u16TxOkPolled+0x1>
    34b2:	20 93 5e 09 	sts	0x095E, r18	; 0x80095e <sg_u16TxOkPolled>
    34b6:	33 c0       	rjmp	.+102    	; 0x351e <CANCheckTxStatus+0xa6>
		}
		// Check for transmission errors
		else if (CANSTMOB & ((1 << BERR) | (1 << SERR) | (1 << CERR) | (1 << FERR) | (1 << AERR)))
    34b8:	90 91 ee 00 	lds	r25, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    34bc:	9f 71       	andi	r25, 0x1F	; 31
    34be:	89 f0       	breq	.+34     	; 0x34e2 <CANCheckTxStatus+0x6a>
		{
			// Clear all error flags and reset busy flag
			CANSTMOB = 0x00;
    34c0:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
			sg_u8Busy = 0;
    34c4:	10 92 76 09 	sts	0x0976, r1	; 0x800976 <sg_u8Busy>
			sg_u16TxErrors++;	// Diagnostic: error recovered
    34c8:	20 91 60 09 	lds	r18, 0x0960	; 0x800960 <sg_u16TxErrors>
    34cc:	30 91 61 09 	lds	r19, 0x0961	; 0x800961 <sg_u16TxErrors+0x1>
    34d0:	2f 5f       	subi	r18, 0xFF	; 255
    34d2:	3f 4f       	sbci	r19, 0xFF	; 255
    34d4:	30 93 61 09 	sts	0x0961, r19	; 0x800961 <sg_u16TxErrors+0x1>
    34d8:	20 93 60 09 	sts	0x0960, r18	; 0x800960 <sg_u16TxErrors>

			// Clear in-retransmit flag since we're giving up
			sg_bInRetransmit = false;
    34dc:	10 92 72 09 	sts	0x0972, r1	; 0x800972 <sg_bInRetransmit>
    34e0:	1e c0       	rjmp	.+60     	; 0x351e <CANCheckTxStatus+0xa6>
		}
		else
		{
			// No completion or error yet, decrement timeout counter
			sg_u8Busy--;
    34e2:	90 91 76 09 	lds	r25, 0x0976	; 0x800976 <sg_u8Busy>
    34e6:	91 50       	subi	r25, 0x01	; 1
    34e8:	90 93 76 09 	sts	0x0976, r25	; 0x800976 <sg_u8Busy>

			// If timeout expired, force clear
			if (sg_u8Busy == 0)
    34ec:	90 91 76 09 	lds	r25, 0x0976	; 0x800976 <sg_u8Busy>
    34f0:	91 11       	cpse	r25, r1
    34f2:	15 c0       	rjmp	.+42     	; 0x351e <CANCheckTxStatus+0xa6>
			{
				// Clear any pending status and disable the MOB
				CANSTMOB = 0x00;
    34f4:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
				CANCDMOB = 0x00;	// Disable the MOB
    34f8:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>

				// Clear in-retransmit flag since we're giving up
				sg_bInRetransmit = false;
    34fc:	10 92 72 09 	sts	0x0972, r1	; 0x800972 <sg_bInRetransmit>

				// Disable the MOB interrupt to prevent spurious interrupts
				CANIE2 &= ~(1 << CANMOB_TX_IDX);
    3500:	ee ed       	ldi	r30, 0xDE	; 222
    3502:	f0 e0       	ldi	r31, 0x00	; 0
    3504:	90 81       	ld	r25, Z
    3506:	9d 7f       	andi	r25, 0xFD	; 253
    3508:	90 83       	st	Z, r25

				sg_u16TxTimeouts++;	// Diagnostic: timeout occurred
    350a:	20 91 62 09 	lds	r18, 0x0962	; 0x800962 <sg_u16TxTimeouts>
    350e:	30 91 63 09 	lds	r19, 0x0963	; 0x800963 <sg_u16TxTimeouts+0x1>
    3512:	2f 5f       	subi	r18, 0xFF	; 255
    3514:	3f 4f       	sbci	r19, 0xFF	; 255
    3516:	30 93 63 09 	sts	0x0963, r19	; 0x800963 <sg_u16TxTimeouts+0x1>
    351a:	20 93 62 09 	sts	0x0962, r18	; 0x800962 <sg_u16TxTimeouts>
			}
		}

		// Restore MOB
		CANPAGE = savedMOB;
    351e:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f00ed>
    3522:	08 95       	ret

Disassembly of section .text.CANCheckHealth:

00002690 <CANCheckHealth>:
{
	return sg_u8TxBackoffDelay;
}

void CANCheckHealth(void)
{
    2690:	0f 93       	push	r16
	// Decrement bus-off recovery delay if active
	if (sg_u8BusOffRecoveryDelay > 0)
    2692:	80 91 71 09 	lds	r24, 0x0971	; 0x800971 <sg_u8BusOffRecoveryDelay>
    2696:	88 23       	and	r24, r24
    2698:	19 f0       	breq	.+6      	; 0x26a0 <CANCheckHealth+0x10>
	{
		sg_u8BusOffRecoveryDelay--;
    269a:	81 50       	subi	r24, 0x01	; 1
    269c:	80 93 71 09 	sts	0x0971, r24	; 0x800971 <sg_u8BusOffRecoveryDelay>
	}

	// Decrement TX backoff delay if active
	if (sg_u8TxBackoffDelay > 0)
    26a0:	80 91 6f 09 	lds	r24, 0x096F	; 0x80096f <sg_u8TxBackoffDelay>
    26a4:	88 23       	and	r24, r24
    26a6:	19 f0       	breq	.+6      	; 0x26ae <CANCheckHealth+0x1e>
	{
		sg_u8TxBackoffDelay--;
    26a8:	81 50       	subi	r24, 0x01	; 1
    26aa:	80 93 6f 09 	sts	0x096F, r24	; 0x80096f <sg_u8TxBackoffDelay>
	}

	// Store current error counter values for diagnostics
	static uint8_t lastTEC = 0;
	static uint8_t lastREC = 0;
	uint8_t currentTEC = CANTEC;
    26ae:	20 91 ea 00 	lds	r18, 0x00EA	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7f00ea>
	uint8_t currentREC = CANREC;
    26b2:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f00eb>

	// Detect TX-only errors (TEC increasing but REC stays at 0)
	// This indicates the module can't transmit but isn't seeing bus activity
	// Likely a hardware issue with TX circuitry or transceiver
	if ((currentTEC > lastTEC) && (currentREC == 0) && (lastREC == 0))
    26b6:	80 91 6e 09 	lds	r24, 0x096E	; 0x80096e <lastTEC.2006>
    26ba:	82 17       	cp	r24, r18
    26bc:	48 f5       	brcc	.+82     	; 0x2710 <CANCheckHealth+0x80>
    26be:	31 11       	cpse	r19, r1
    26c0:	27 c0       	rjmp	.+78     	; 0x2710 <CANCheckHealth+0x80>
    26c2:	90 91 6d 09 	lds	r25, 0x096D	; 0x80096d <lastREC.2007>
    26c6:	91 11       	cpse	r25, r1
    26c8:	23 c0       	rjmp	.+70     	; 0x2710 <CANCheckHealth+0x80>
	{
		sg_u8TxOnlyErrorCount++;
    26ca:	40 91 70 09 	lds	r20, 0x0970	; 0x800970 <sg_u8TxOnlyErrorCount>
    26ce:	4f 5f       	subi	r20, 0xFF	; 255
    26d0:	40 93 70 09 	sts	0x0970, r20	; 0x800970 <sg_u8TxOnlyErrorCount>

		// If we have persistent TX-only errors, apply adaptive backoff
		if (sg_u8TxOnlyErrorCount > 3)
    26d4:	44 30       	cpi	r20, 0x04	; 4
    26d6:	f8 f0       	brcs	.+62     	; 0x2716 <CANCheckHealth+0x86>
		{
			// Exponential backoff: 2, 4, 8, 16 ticks (200ms to 1.6s)
			if (sg_u8TxBackoffDelay == 0)
    26d8:	90 91 6f 09 	lds	r25, 0x096F	; 0x80096f <sg_u8TxBackoffDelay>
    26dc:	91 11       	cpse	r25, r1
    26de:	1b c0       	rjmp	.+54     	; 0x2716 <CANCheckHealth+0x86>
			{
				sg_u8TxBackoffDelay = 2 << ((sg_u8TxOnlyErrorCount - 3) > 3 ? 3 : (sg_u8TxOnlyErrorCount - 3));
    26e0:	50 e0       	ldi	r21, 0x00	; 0
    26e2:	43 50       	subi	r20, 0x03	; 3
    26e4:	51 09       	sbc	r21, r1
    26e6:	44 30       	cpi	r20, 0x04	; 4
    26e8:	51 05       	cpc	r21, r1
    26ea:	14 f0       	brlt	.+4      	; 0x26f0 <CANCheckHealth+0x60>
    26ec:	43 e0       	ldi	r20, 0x03	; 3
    26ee:	50 e0       	ldi	r21, 0x00	; 0
    26f0:	62 e0       	ldi	r22, 0x02	; 2
    26f2:	70 e0       	ldi	r23, 0x00	; 0
    26f4:	fb 01       	movw	r30, r22
    26f6:	02 c0       	rjmp	.+4      	; 0x26fc <CANCheckHealth+0x6c>
    26f8:	ee 0f       	add	r30, r30
    26fa:	ff 1f       	adc	r31, r31
    26fc:	4a 95       	dec	r20
    26fe:	e2 f7       	brpl	.-8      	; 0x26f8 <CANCheckHealth+0x68>
    2700:	e0 93 6f 09 	sts	0x096F, r30	; 0x80096f <sg_u8TxBackoffDelay>
				if (sg_u8TxBackoffDelay > 16)
    2704:	e1 31       	cpi	r30, 0x11	; 17
    2706:	38 f0       	brcs	.+14     	; 0x2716 <CANCheckHealth+0x86>
				{
					sg_u8TxBackoffDelay = 16;	// Cap at 1.6 seconds
    2708:	90 e1       	ldi	r25, 0x10	; 16
    270a:	90 93 6f 09 	sts	0x096F, r25	; 0x80096f <sg_u8TxBackoffDelay>
    270e:	03 c0       	rjmp	.+6      	; 0x2716 <CANCheckHealth+0x86>
				}
			}
		}
	}
	else if (currentREC > 0)
    2710:	31 11       	cpse	r19, r1
	{
		// We're seeing bus activity - reset TX-only error counter
		sg_u8TxOnlyErrorCount = 0;
    2712:	10 92 70 09 	sts	0x0970, r1	; 0x800970 <sg_u8TxOnlyErrorCount>
	}

	// Check if error counters are increasing rapidly (sign of bus problems)
	if ((currentTEC > lastTEC + 10) || (currentREC > lastREC + 10))
    2716:	42 2f       	mov	r20, r18
    2718:	50 e0       	ldi	r21, 0x00	; 0
    271a:	90 e0       	ldi	r25, 0x00	; 0
    271c:	0a 96       	adiw	r24, 0x0a	; 10
    271e:	84 17       	cp	r24, r20
    2720:	95 07       	cpc	r25, r21
    2722:	4c f0       	brlt	.+18     	; 0x2736 <CANCheckHealth+0xa6>
    2724:	43 2f       	mov	r20, r19
    2726:	50 e0       	ldi	r21, 0x00	; 0
    2728:	80 91 6d 09 	lds	r24, 0x096D	; 0x80096d <lastREC.2007>
    272c:	90 e0       	ldi	r25, 0x00	; 0
    272e:	0a 96       	adiw	r24, 0x0a	; 10
    2730:	84 17       	cp	r24, r20
    2732:	95 07       	cpc	r25, r21
    2734:	3c f4       	brge	.+14     	; 0x2744 <CANCheckHealth+0xb4>
	{
		// Rapid error increase - likely physical bus problem
		// Apply temporary backoff
		if (sg_u8TxBackoffDelay < 5)
    2736:	80 91 6f 09 	lds	r24, 0x096F	; 0x80096f <sg_u8TxBackoffDelay>
    273a:	85 30       	cpi	r24, 0x05	; 5
    273c:	18 f4       	brcc	.+6      	; 0x2744 <CANCheckHealth+0xb4>
		{
			sg_u8TxBackoffDelay = 5;	// 500ms backoff for rapid errors
    273e:	85 e0       	ldi	r24, 0x05	; 5
    2740:	80 93 6f 09 	sts	0x096F, r24	; 0x80096f <sg_u8TxBackoffDelay>
		}
	}

	lastTEC = currentTEC;
    2744:	20 93 6e 09 	sts	0x096E, r18	; 0x80096e <lastTEC.2006>
	lastREC = currentREC;
    2748:	30 93 6d 09 	sts	0x096D, r19	; 0x80096d <lastREC.2007>

	// Check if CAN controller is in error passive state
	// TEC (Transmit Error Counter) or REC (Receive Error Counter) > 127
	if ((currentTEC > 127) || (currentREC > 127))
    274c:	22 23       	and	r18, r18
    274e:	14 f0       	brlt	.+4      	; 0x2754 <CANCheckHealth+0xc4>
    2750:	33 23       	and	r19, r19
    2752:	4c f4       	brge	.+18     	; 0x2766 <CANCheckHealth+0xd6>
	{
		sg_u16ErrorPassive++;
    2754:	80 91 4d 09 	lds	r24, 0x094D	; 0x80094d <sg_u16ErrorPassive>
    2758:	90 91 4e 09 	lds	r25, 0x094E	; 0x80094e <sg_u16ErrorPassive+0x1>
    275c:	01 96       	adiw	r24, 0x01	; 1
    275e:	90 93 4e 09 	sts	0x094E, r25	; 0x80094e <sg_u16ErrorPassive+0x1>
    2762:	80 93 4d 09 	sts	0x094D, r24	; 0x80094d <sg_u16ErrorPassive>
		// Very close to bus-off (255) - try to prevent it
		// Could temporarily stop transmitting to let errors clear
	}

	// Check if CAN is disabled (should always be enabled)
	if (!(CANGSTA & (1 << ENFG)))
    2766:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7f00d9>
    276a:	82 fd       	sbrc	r24, 2
    276c:	12 c0       	rjmp	.+36     	; 0x2792 <CANCheckHealth+0x102>
	{
		// CAN controller is disabled - re-enable it!
		CANGCON = (1 << ENASTB);
    276e:	82 e0       	ldi	r24, 0x02	; 2
    2770:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f00d8>

		// Re-initialize RX MOB since controller was disabled
		CANMOBSet(CANMOB_RX_IDX, &sg_sMOBGenericReceive, NULL, 0);
    2774:	00 e0       	ldi	r16, 0x00	; 0
    2776:	20 e0       	ldi	r18, 0x00	; 0
    2778:	30 e0       	ldi	r19, 0x00	; 0
    277a:	4f e9       	ldi	r20, 0x9F	; 159
    277c:	53 e0       	ldi	r21, 0x03	; 3
    277e:	60 e0       	ldi	r22, 0x00	; 0
    2780:	80 e0       	ldi	r24, 0x00	; 0
    2782:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <CANMOBSet>

		// After bus-off recovery, error counters should be at 0
		// If they're not, there's still a bus problem
		if ((CANTEC > 0) || (CANREC > 0))
    2786:	80 91 ea 00 	lds	r24, 0x00EA	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7f00ea>
    278a:	81 11       	cpse	r24, r1
    278c:	02 c0       	rjmp	.+4      	; 0x2792 <CANCheckHealth+0x102>
    278e:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f00eb>
			// Still have errors after re-enable - bus problem persists
		}
	}

	// Check if RX MOB is still enabled
	uint8_t savedMOB = CANPAGE;
    2792:	ed ee       	ldi	r30, 0xED	; 237
    2794:	f0 e0       	ldi	r31, 0x00	; 0
    2796:	90 81       	ld	r25, Z
	CANPAGE = CANMOB_RX_IDX << MOBNB0;
    2798:	10 82       	st	Z, r1

	// If RX MOB is disabled (CONMOB bits are 0), re-enable it
	if ((CANCDMOB & 0xC0) == 0)
    279a:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    279e:	80 7c       	andi	r24, 0xC0	; 192
    27a0:	59 f4       	brne	.+22     	; 0x27b8 <CANCheckHealth+0x128>
	{
		// RX MOB is disabled - this shouldn't happen!
		// Re-enable it
		CANPAGE = savedMOB;  // Restore first
    27a2:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f00ed>
		CANMOBSet(CANMOB_RX_IDX, &sg_sMOBGenericReceive, NULL, 0);
    27a6:	00 e0       	ldi	r16, 0x00	; 0
    27a8:	20 e0       	ldi	r18, 0x00	; 0
    27aa:	30 e0       	ldi	r19, 0x00	; 0
    27ac:	4f e9       	ldi	r20, 0x9F	; 159
    27ae:	53 e0       	ldi	r21, 0x03	; 3
    27b0:	60 e0       	ldi	r22, 0x00	; 0
    27b2:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <CANMOBSet>
    27b6:	02 c0       	rjmp	.+4      	; 0x27bc <CANCheckHealth+0x12c>
	}
	else
	{
		CANPAGE = savedMOB;  // Restore MOB
    27b8:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f00ed>
	}
}
    27bc:	0f 91       	pop	r16
    27be:	08 95       	ret

Disassembly of section .text.DebugOut:

00004fb8 <DebugOut>:
}

#endif

void DebugOut( const char* peFormat, ... )
{
    4fb8:	cf 93       	push	r28
    4fba:	df 93       	push	r29
    4fbc:	cd b7       	in	r28, 0x3d	; 61
    4fbe:	de b7       	in	r29, 0x3e	; 62
	
	va_end( args );	 */
	
	//DebugSerialSend( (uint8_t*)u8Buffer, strlen(u8Buffer) );
#endif
}
    4fc0:	df 91       	pop	r29
    4fc2:	cf 91       	pop	r28
    4fc4:	08 95       	ret

Disassembly of section .text.EEPROMRead:

00004f1e <EEPROMRead>:
}

uint8_t EEPROMRead(uint16_t u16Address)
{
	// Wait for any completion of writes, etc..
	while (EECR & (1 << EEWE));
    4f1e:	f9 99       	sbic	0x1f, 1	; 31
    4f20:	fe cf       	rjmp	.-4      	; 0x4f1e <EEPROMRead>

	// Set address	
	EEAR = u16Address;
    4f22:	92 bd       	out	0x22, r25	; 34
    4f24:	81 bd       	out	0x21, r24	; 33
	
	// Start EEPROM read
	EECR |= (1 << EERE);
    4f26:	8f b3       	in	r24, 0x1f	; 31
    4f28:	81 60       	ori	r24, 0x01	; 1
    4f2a:	8f bb       	out	0x1f, r24	; 31
	
	// Return the data
	return(EEDR);
    4f2c:	80 b5       	in	r24, 0x20	; 32
    4f2e:	08 95       	ret

Disassembly of section .text.I2CBitDelay:

00004fc6 <I2CBitDelay>:
#define SDA_SET_INPUT()			(I2C_PORT_DDR &= ((uint8_t) ~(1 << I2C_SDA_PIN))); SDA_HIGH()

// Delays for one I2C bit's worth of time
static void I2CBitDelay(void)
{
	Delay(10);
    4fc6:	6a e0       	ldi	r22, 0x0A	; 10
    4fc8:	70 e0       	ldi	r23, 0x00	; 0
    4fca:	80 e0       	ldi	r24, 0x00	; 0
    4fcc:	90 e0       	ldi	r25, 0x00	; 0
    4fce:	0e 94 e7 21 	call	0x43ce	; 0x43ce <Delay>
    4fd2:	08 95       	ret

Disassembly of section .text.I2CStart:

00004906 <I2CStart>:

// Send an I2C start sequence and quantize foreground code to the overflow
// timer
void I2CStart(void)
{
	SDA_SET_OUTPUT();
    4906:	8a b1       	in	r24, 0x0a	; 10
    4908:	82 60       	ori	r24, 0x02	; 2
    490a:	8a b9       	out	0x0a, r24	; 10
	SDA_HIGH();
    490c:	8b b1       	in	r24, 0x0b	; 11
    490e:	82 60       	ori	r24, 0x02	; 2
    4910:	8b b9       	out	0x0b, r24	; 11
	SCL_HIGH();
    4912:	8b b1       	in	r24, 0x0b	; 11
    4914:	81 60       	ori	r24, 0x01	; 1
    4916:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    4918:	0e 94 e3 27 	call	0x4fc6	; 0x4fc6 <I2CBitDelay>
	SDA_LOW();
    491c:	8b b1       	in	r24, 0x0b	; 11
    491e:	8d 7f       	andi	r24, 0xFD	; 253
    4920:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    4922:	0e 94 e3 27 	call	0x4fc6	; 0x4fc6 <I2CBitDelay>
	SCL_LOW();
    4926:	8b b1       	in	r24, 0x0b	; 11
    4928:	8e 7f       	andi	r24, 0xFE	; 254
    492a:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    492c:	0e 94 e3 27 	call	0x4fc6	; 0x4fc6 <I2CBitDelay>
    4930:	08 95       	ret

Disassembly of section .text.I2CStop:

00004aac <I2CStop>:
}

// Send an I2C stop sequence
void I2CStop(void)
{
	SDA_LOW();
    4aac:	8b b1       	in	r24, 0x0b	; 11
    4aae:	8d 7f       	andi	r24, 0xFD	; 253
    4ab0:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    4ab2:	0e 94 e3 27 	call	0x4fc6	; 0x4fc6 <I2CBitDelay>
	SCL_HIGH();
    4ab6:	8b b1       	in	r24, 0x0b	; 11
    4ab8:	81 60       	ori	r24, 0x01	; 1
    4aba:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    4abc:	0e 94 e3 27 	call	0x4fc6	; 0x4fc6 <I2CBitDelay>
	SDA_SET_INPUT();
    4ac0:	8a b1       	in	r24, 0x0a	; 10
    4ac2:	8d 7f       	andi	r24, 0xFD	; 253
    4ac4:	8a b9       	out	0x0a, r24	; 10
    4ac6:	8b b1       	in	r24, 0x0b	; 11
    4ac8:	82 60       	ori	r24, 0x02	; 2
    4aca:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    4acc:	0e 94 e3 27 	call	0x4fc6	; 0x4fc6 <I2CBitDelay>
    4ad0:	08 95       	ret

Disassembly of section .text.I2CUnstick:

00004622 <I2CUnstick>:
}

// Unsticks an I2C bus
void I2CUnstick(void)
{
    4622:	cf 93       	push	r28
	uint8_t u8UnstickBits = 64;

	SCL_SET_OUTPUT();
    4624:	8a b1       	in	r24, 0x0a	; 10
    4626:	81 60       	ori	r24, 0x01	; 1
    4628:	8a b9       	out	0x0a, r24	; 10
	SDA_SET_OUTPUT();
    462a:	8a b1       	in	r24, 0x0a	; 10
    462c:	82 60       	ori	r24, 0x02	; 2
    462e:	8a b9       	out	0x0a, r24	; 10
}

// Unsticks an I2C bus
void I2CUnstick(void)
{
	uint8_t u8UnstickBits = 64;
    4630:	c0 e4       	ldi	r28, 0x40	; 64

	SCL_SET_OUTPUT();
	SDA_SET_OUTPUT();
	
	while (u8UnstickBits)
    4632:	11 c0       	rjmp	.+34     	; 0x4656 <I2CUnstick+0x34>
	{
		SCL_LOW();
    4634:	8b b1       	in	r24, 0x0b	; 11
    4636:	8e 7f       	andi	r24, 0xFE	; 254
    4638:	8b b9       	out	0x0b, r24	; 11
		SDA_LOW();
    463a:	8b b1       	in	r24, 0x0b	; 11
    463c:	8d 7f       	andi	r24, 0xFD	; 253
    463e:	8b b9       	out	0x0b, r24	; 11
		I2CBitDelay();
    4640:	0e 94 e3 27 	call	0x4fc6	; 0x4fc6 <I2CBitDelay>
		SCL_HIGH();
    4644:	8b b1       	in	r24, 0x0b	; 11
    4646:	81 60       	ori	r24, 0x01	; 1
    4648:	8b b9       	out	0x0b, r24	; 11
		SDA_HIGH();
    464a:	8b b1       	in	r24, 0x0b	; 11
    464c:	82 60       	ori	r24, 0x02	; 2
    464e:	8b b9       	out	0x0b, r24	; 11
		I2CBitDelay();
    4650:	0e 94 e3 27 	call	0x4fc6	; 0x4fc6 <I2CBitDelay>
		u8UnstickBits--;
    4654:	c1 50       	subi	r28, 0x01	; 1
	uint8_t u8UnstickBits = 64;

	SCL_SET_OUTPUT();
	SDA_SET_OUTPUT();
	
	while (u8UnstickBits)
    4656:	c1 11       	cpse	r28, r1
    4658:	ed cf       	rjmp	.-38     	; 0x4634 <I2CUnstick+0x12>
		SCL_HIGH();
		SDA_HIGH();
		I2CBitDelay();
		u8UnstickBits--;
	}
}
    465a:	cf 91       	pop	r28
    465c:	08 95       	ret

Disassembly of section .text.I2CTxByte:

00003ebe <I2CTxByte>:

// Sends a single I2C byte. Returns false if the byte is not acked, or true if it is.
bool I2CTxByte(uint8_t u8Byte)
{
    3ebe:	cf 93       	push	r28
    3ec0:	df 93       	push	r29
    3ec2:	d8 2f       	mov	r29, r24
	uint8_t u8Length = 8;			// 8 Bits to send
	bool bAck = false;

	SDA_SET_OUTPUT();
    3ec4:	8a b1       	in	r24, 0x0a	; 10
    3ec6:	82 60       	ori	r24, 0x02	; 2
    3ec8:	8a b9       	out	0x0a, r24	; 10
}

// Sends a single I2C byte. Returns false if the byte is not acked, or true if it is.
bool I2CTxByte(uint8_t u8Byte)
{
	uint8_t u8Length = 8;			// 8 Bits to send
    3eca:	c8 e0       	ldi	r28, 0x08	; 8
	bool bAck = false;

	SDA_SET_OUTPUT();

	while (u8Length)
    3ecc:	15 c0       	rjmp	.+42     	; 0x3ef8 <I2CTxByte+0x3a>
	{
		if (u8Byte & 0x80)
    3ece:	dd 23       	and	r29, r29
    3ed0:	24 f4       	brge	.+8      	; 0x3eda <I2CTxByte+0x1c>
		{
			SDA_HIGH();
    3ed2:	8b b1       	in	r24, 0x0b	; 11
    3ed4:	82 60       	ori	r24, 0x02	; 2
    3ed6:	8b b9       	out	0x0b, r24	; 11
    3ed8:	03 c0       	rjmp	.+6      	; 0x3ee0 <I2CTxByte+0x22>
		}
		else
		{
			SDA_LOW();
    3eda:	8b b1       	in	r24, 0x0b	; 11
    3edc:	8d 7f       	andi	r24, 0xFD	; 253
    3ede:	8b b9       	out	0x0b, r24	; 11
		}
		
		// Drive SCL high
		SCL_HIGH();
    3ee0:	8b b1       	in	r24, 0x0b	; 11
    3ee2:	81 60       	ori	r24, 0x01	; 1
    3ee4:	8b b9       	out	0x0b, r24	; 11
		
		I2CBitDelay();
    3ee6:	0e 94 e3 27 	call	0x4fc6	; 0x4fc6 <I2CBitDelay>
		
		// Ensure SCL is low
		SCL_LOW();
    3eea:	8b b1       	in	r24, 0x0b	; 11
    3eec:	8e 7f       	andi	r24, 0xFE	; 254
    3eee:	8b b9       	out	0x0b, r24	; 11
	
		// SDA Is now set. Delay.
		I2CBitDelay();
    3ef0:	0e 94 e3 27 	call	0x4fc6	; 0x4fc6 <I2CBitDelay>
		
		// Next bit
		u8Byte <<= 1;	
    3ef4:	dd 0f       	add	r29, r29
		u8Length--;
    3ef6:	c1 50       	subi	r28, 0x01	; 1
	uint8_t u8Length = 8;			// 8 Bits to send
	bool bAck = false;

	SDA_SET_OUTPUT();

	while (u8Length)
    3ef8:	c1 11       	cpse	r28, r1
    3efa:	e9 cf       	rjmp	.-46     	; 0x3ece <I2CTxByte+0x10>
		// Next bit
		u8Byte <<= 1;	
		u8Length--;
	}
	
	SDA_SET_INPUT();
    3efc:	8a b1       	in	r24, 0x0a	; 10
    3efe:	8d 7f       	andi	r24, 0xFD	; 253
    3f00:	8a b9       	out	0x0a, r24	; 10
    3f02:	8b b1       	in	r24, 0x0b	; 11
    3f04:	82 60       	ori	r24, 0x02	; 2
    3f06:	8b b9       	out	0x0b, r24	; 11
	SCL_HIGH();
    3f08:	8b b1       	in	r24, 0x0b	; 11
    3f0a:	81 60       	ori	r24, 0x01	; 1
    3f0c:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    3f0e:	0e 94 e3 27 	call	0x4fc6	; 0x4fc6 <I2CBitDelay>
	
	// See if the byte was acknowledged
	if (SDA_READ())
    3f12:	49 9b       	sbis	0x09, 1	; 9
	{
		bAck = false;
	}
	else
	{
		bAck = true;
    3f14:	c1 e0       	ldi	r28, 0x01	; 1
	}
	
	SCL_LOW();
    3f16:	8b b1       	in	r24, 0x0b	; 11
    3f18:	8e 7f       	andi	r24, 0xFE	; 254
    3f1a:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    3f1c:	0e 94 e3 27 	call	0x4fc6	; 0x4fc6 <I2CBitDelay>
	return(bAck);
}
    3f20:	8c 2f       	mov	r24, r28
    3f22:	df 91       	pop	r29
    3f24:	cf 91       	pop	r28
    3f26:	08 95       	ret

Disassembly of section .text.I2CRxByte:

00003d5e <I2CRxByte>:

// Receives a single I2C byte and will optionally generate an ack at the end
uint8_t I2CRxByte(bool bAck)
{
    3d5e:	1f 93       	push	r17
    3d60:	cf 93       	push	r28
    3d62:	df 93       	push	r29
    3d64:	18 2f       	mov	r17, r24
	uint8_t u8Data = 0;
	uint8_t u8Count = 8;
	
	SDA_SET_INPUT();
    3d66:	8a b1       	in	r24, 0x0a	; 10
    3d68:	8d 7f       	andi	r24, 0xFD	; 253
    3d6a:	8a b9       	out	0x0a, r24	; 10
    3d6c:	8b b1       	in	r24, 0x0b	; 11
    3d6e:	82 60       	ori	r24, 0x02	; 2
    3d70:	8b b9       	out	0x0b, r24	; 11

// Receives a single I2C byte and will optionally generate an ack at the end
uint8_t I2CRxByte(bool bAck)
{
	uint8_t u8Data = 0;
	uint8_t u8Count = 8;
    3d72:	c8 e0       	ldi	r28, 0x08	; 8
}

// Receives a single I2C byte and will optionally generate an ack at the end
uint8_t I2CRxByte(bool bAck)
{
	uint8_t u8Data = 0;
    3d74:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t u8Count = 8;
	
	SDA_SET_INPUT();
	
	// Consume all 8 data bits
	while (u8Count)
    3d76:	0e c0       	rjmp	.+28     	; 0x3d94 <I2CRxByte+0x36>
	{
		u8Data <<= 1;
    3d78:	dd 0f       	add	r29, r29

		SCL_HIGH();
    3d7a:	8b b1       	in	r24, 0x0b	; 11
    3d7c:	81 60       	ori	r24, 0x01	; 1
    3d7e:	8b b9       	out	0x0b, r24	; 11
		I2CBitDelay();
    3d80:	0e 94 e3 27 	call	0x4fc6	; 0x4fc6 <I2CBitDelay>
			
		if (SDA_READ())
    3d84:	49 99       	sbic	0x09, 1	; 9
		{
			u8Data |= 1;
    3d86:	d1 60       	ori	r29, 0x01	; 1
		}
		
		SCL_LOW();
    3d88:	8b b1       	in	r24, 0x0b	; 11
    3d8a:	8e 7f       	andi	r24, 0xFE	; 254
    3d8c:	8b b9       	out	0x0b, r24	; 11
		I2CBitDelay();
    3d8e:	0e 94 e3 27 	call	0x4fc6	; 0x4fc6 <I2CBitDelay>
		u8Count--;
    3d92:	c1 50       	subi	r28, 0x01	; 1
	uint8_t u8Count = 8;
	
	SDA_SET_INPUT();
	
	// Consume all 8 data bits
	while (u8Count)
    3d94:	c1 11       	cpse	r28, r1
    3d96:	f0 cf       	rjmp	.-32     	; 0x3d78 <I2CRxByte+0x1a>
		I2CBitDelay();
		u8Count--;
	}

	// See if we acknowledge this
	SDA_SET_OUTPUT();
    3d98:	8a b1       	in	r24, 0x0a	; 10
    3d9a:	82 60       	ori	r24, 0x02	; 2
    3d9c:	8a b9       	out	0x0a, r24	; 10
	if (bAck)
    3d9e:	11 23       	and	r17, r17
    3da0:	21 f0       	breq	.+8      	; 0x3daa <I2CRxByte+0x4c>
	{
		SDA_LOW();
    3da2:	8b b1       	in	r24, 0x0b	; 11
    3da4:	8d 7f       	andi	r24, 0xFD	; 253
    3da6:	8b b9       	out	0x0b, r24	; 11
    3da8:	03 c0       	rjmp	.+6      	; 0x3db0 <I2CRxByte+0x52>
	}
	else
	{
		SDA_HIGH();
    3daa:	8b b1       	in	r24, 0x0b	; 11
    3dac:	82 60       	ori	r24, 0x02	; 2
    3dae:	8b b9       	out	0x0b, r24	; 11
	}
	
	I2CBitDelay();
    3db0:	0e 94 e3 27 	call	0x4fc6	; 0x4fc6 <I2CBitDelay>
	SCL_HIGH();
    3db4:	8b b1       	in	r24, 0x0b	; 11
    3db6:	81 60       	ori	r24, 0x01	; 1
    3db8:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    3dba:	0e 94 e3 27 	call	0x4fc6	; 0x4fc6 <I2CBitDelay>
	SCL_LOW();
    3dbe:	8b b1       	in	r24, 0x0b	; 11
    3dc0:	8e 7f       	andi	r24, 0xFE	; 254
    3dc2:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    3dc4:	0e 94 e3 27 	call	0x4fc6	; 0x4fc6 <I2CBitDelay>
	SDA_LOW();
    3dc8:	8b b1       	in	r24, 0x0b	; 11
    3dca:	8d 7f       	andi	r24, 0xFD	; 253
    3dcc:	8b b9       	out	0x0b, r24	; 11

	return(u8Data);	
}
    3dce:	8d 2f       	mov	r24, r29
    3dd0:	df 91       	pop	r29
    3dd2:	cf 91       	pop	r28
    3dd4:	1f 91       	pop	r17
    3dd6:	08 95       	ret

Disassembly of section .text.I2CSetup:

00004932 <I2CSetup>:
// Prepares the SCL/SDA pins for I2C operation and returns when the CPU is
// quantized to the timer (for consistent bit alignment)
void I2CSetup(void)
{
	// Deassert SCL and SDA
	SCL_HIGH();
    4932:	8b b1       	in	r24, 0x0b	; 11
    4934:	81 60       	ori	r24, 0x01	; 1
    4936:	8b b9       	out	0x0b, r24	; 11
	SDA_HIGH();
    4938:	8b b1       	in	r24, 0x0b	; 11
    493a:	82 60       	ori	r24, 0x02	; 2
    493c:	8b b9       	out	0x0b, r24	; 11

	// Set SCL and SDA lines as push/pull output drives
	SCL_SET_OUTPUT();
    493e:	8a b1       	in	r24, 0x0a	; 10
    4940:	81 60       	ori	r24, 0x01	; 1
    4942:	8a b9       	out	0x0a, r24	; 10
	
	// Turn on SDA, set as an input
	SDA_SET_INPUT();
    4944:	8a b1       	in	r24, 0x0a	; 10
    4946:	8d 7f       	andi	r24, 0xFD	; 253
    4948:	8a b9       	out	0x0a, r24	; 10
    494a:	8b b1       	in	r24, 0x0b	; 11
    494c:	82 60       	ori	r24, 0x02	; 2
    494e:	8b b9       	out	0x0b, r24	; 11
	
	Delay(20);
    4950:	64 e1       	ldi	r22, 0x14	; 20
    4952:	70 e0       	ldi	r23, 0x00	; 0
    4954:	80 e0       	ldi	r24, 0x00	; 0
    4956:	90 e0       	ldi	r25, 0x00	; 0
    4958:	0e 94 e7 21 	call	0x43ce	; 0x43ce <Delay>
    495c:	08 95       	ret

Disassembly of section .text.I2CStartTransaction:

00004a0c <I2CStartTransaction>:

// Sets up the I2C pins, sends slave address/read/write byte, and waits for acknowledgment.
// Returns false if no device is responding.
bool I2CStartTransaction(uint8_t u8SlaveAddress,
						 bool bRead)
{
    4a0c:	cf 93       	push	r28
    4a0e:	df 93       	push	r29
    4a10:	c8 2f       	mov	r28, r24
    4a12:	d6 2f       	mov	r29, r22
	// Set up the pins for I2C operation
	I2CSetup();
    4a14:	0e 94 99 24 	call	0x4932	; 0x4932 <I2CSetup>
	
	// I2C Start condition
	I2CStart();
    4a18:	0e 94 83 24 	call	0x4906	; 0x4906 <I2CStart>

	// If it's a read operation, clear the lower bit
	if (bRead)
    4a1c:	dd 23       	and	r29, r29
    4a1e:	19 f0       	breq	.+6      	; 0x4a26 <I2CStartTransaction+0x1a>
	{
		u8SlaveAddress |= 1;
    4a20:	8c 2f       	mov	r24, r28
    4a22:	81 60       	ori	r24, 0x01	; 1
    4a24:	02 c0       	rjmp	.+4      	; 0x4a2a <I2CStartTransaction+0x1e>
	}
	else
	{
		// Otherwise set it
		u8SlaveAddress &= (uint8_t) (~1);
    4a26:	8c 2f       	mov	r24, r28
    4a28:	8e 7f       	andi	r24, 0xFE	; 254
	}
	
	// Now send out the slave address + the read/write bit
	return(I2CTxByte(u8SlaveAddress));
    4a2a:	0e 94 5f 1f 	call	0x3ebe	; 0x3ebe <I2CTxByte>
}
    4a2e:	df 91       	pop	r29
    4a30:	cf 91       	pop	r28
    4a32:	08 95       	ret

Disassembly of section .text.CellCountExpectedSet:

0000317c <CellCountExpectedSet>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    317c:	cf 92       	push	r12
    317e:	df 92       	push	r13
    3180:	ef 92       	push	r14
    3182:	ff 92       	push	r15
    3184:	8f 35       	cpi	r24, 0x5F	; 95
    3186:	08 f0       	brcs	.+2      	; 0x318a <CellCountExpectedSet+0xe>
    3188:	8e e5       	ldi	r24, 0x5E	; 94
    318a:	ec e0       	ldi	r30, 0x0C	; 12
    318c:	f1 e0       	ldi	r31, 0x01	; 1
    318e:	85 8b       	std	Z+21, r24	; 0x15
    3190:	c8 2e       	mov	r12, r24
    3192:	d1 2c       	mov	r13, r1
    3194:	e1 2c       	mov	r14, r1
    3196:	f1 2c       	mov	r15, r1
    3198:	aa ec       	ldi	r26, 0xCA	; 202
    319a:	b8 e0       	ldi	r27, 0x08	; 8
    319c:	a7 01       	movw	r20, r14
    319e:	96 01       	movw	r18, r12
    31a0:	0e 94 65 27 	call	0x4eca	; 0x4eca <__muluhisi3>
    31a4:	65 8f       	std	Z+29, r22	; 0x1d
    31a6:	76 8f       	std	Z+30, r23	; 0x1e
    31a8:	87 8f       	std	Z+31, r24	; 0x1f
    31aa:	90 a3       	std	Z+32, r25	; 0x20
    31ac:	a4 e9       	ldi	r26, 0x94	; 148
    31ae:	b1 e1       	ldi	r27, 0x11	; 17
    31b0:	0e 94 65 27 	call	0x4eca	; 0x4eca <__muluhisi3>
    31b4:	61 a3       	std	Z+33, r22	; 0x21
    31b6:	72 a3       	std	Z+34, r23	; 0x22
    31b8:	83 a3       	std	Z+35, r24	; 0x23
    31ba:	94 a3       	std	Z+36, r25	; 0x24
    31bc:	81 a1       	ldd	r24, Z+33	; 0x21
    31be:	92 a1       	ldd	r25, Z+34	; 0x22
    31c0:	a3 a1       	ldd	r26, Z+35	; 0x23
    31c2:	b4 a1       	ldd	r27, Z+36	; 0x24
    31c4:	45 8d       	ldd	r20, Z+29	; 0x1d
    31c6:	56 8d       	ldd	r21, Z+30	; 0x1e
    31c8:	67 8d       	ldd	r22, Z+31	; 0x1f
    31ca:	70 a1       	ldd	r23, Z+32	; 0x20
    31cc:	84 1b       	sub	r24, r20
    31ce:	95 0b       	sbc	r25, r21
    31d0:	a6 0b       	sbc	r26, r22
    31d2:	b7 0b       	sbc	r27, r23
    31d4:	88 0f       	add	r24, r24
    31d6:	99 1f       	adc	r25, r25
    31d8:	aa 1f       	adc	r26, r26
    31da:	bb 1f       	adc	r27, r27
    31dc:	88 0f       	add	r24, r24
    31de:	99 1f       	adc	r25, r25
    31e0:	aa 1f       	adc	r26, r26
    31e2:	bb 1f       	adc	r27, r27
    31e4:	88 0f       	add	r24, r24
    31e6:	99 1f       	adc	r25, r25
    31e8:	aa 1f       	adc	r26, r26
    31ea:	bb 1f       	adc	r27, r27
    31ec:	88 0f       	add	r24, r24
    31ee:	99 1f       	adc	r25, r25
    31f0:	aa 1f       	adc	r26, r26
    31f2:	bb 1f       	adc	r27, r27
    31f4:	88 0f       	add	r24, r24
    31f6:	99 1f       	adc	r25, r25
    31f8:	aa 1f       	adc	r26, r26
    31fa:	bb 1f       	adc	r27, r27
    31fc:	88 0f       	add	r24, r24
    31fe:	99 1f       	adc	r25, r25
    3200:	aa 1f       	adc	r26, r26
    3202:	bb 1f       	adc	r27, r27
    3204:	88 0f       	add	r24, r24
    3206:	99 1f       	adc	r25, r25
    3208:	aa 1f       	adc	r26, r26
    320a:	bb 1f       	adc	r27, r27
    320c:	ac 01       	movw	r20, r24
    320e:	bd 01       	movw	r22, r26
    3210:	bb 23       	and	r27, r27
    3212:	24 f4       	brge	.+8      	; 0x321c <CellCountExpectedSet+0xa0>
    3214:	41 50       	subi	r20, 0x01	; 1
    3216:	5c 4f       	sbci	r21, 0xFC	; 252
    3218:	6f 4f       	sbci	r22, 0xFF	; 255
    321a:	7f 4f       	sbci	r23, 0xFF	; 255
    321c:	03 2e       	mov	r0, r19
    321e:	3a e0       	ldi	r19, 0x0A	; 10
    3220:	75 95       	asr	r23
    3222:	67 95       	ror	r22
    3224:	57 95       	ror	r21
    3226:	47 95       	ror	r20
    3228:	3a 95       	dec	r19
    322a:	d1 f7       	brne	.-12     	; 0x3220 <CellCountExpectedSet+0xa4>
    322c:	30 2d       	mov	r19, r0
    322e:	50 93 32 01 	sts	0x0132, r21	; 0x800132 <sg_sFrame+0x26>
    3232:	40 93 31 01 	sts	0x0131, r20	; 0x800131 <sg_sFrame+0x25>
    3236:	ff 90       	pop	r15
    3238:	ef 90       	pop	r14
    323a:	df 90       	pop	r13
    323c:	cf 90       	pop	r12
    323e:	08 95       	ret

Disassembly of section .text.SendModuleControllerStatus:

00004f78 <SendModuleControllerStatus>:

static uint8_t sg_u8ControllerStatusMsgCount = 0;

static void SendModuleControllerStatus(void)
{
	sg_bSendModuleControllerStatus = true;
    4f78:	81 e0       	ldi	r24, 0x01	; 1
    4f7a:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <sg_bSendModuleControllerStatus>
	sg_u8ControllerStatusMsgCount = 0;
    4f7e:	10 92 7b 09 	sts	0x097B, r1	; 0x80097b <sg_u8ControllerStatusMsgCount>
	sg_bIgnoreStatusRequests = true;  // Start ignoring new requests
    4f82:	80 93 83 09 	sts	0x0983, r24	; 0x800983 <sg_bIgnoreStatusRequests>
    4f86:	08 95       	ret

Disassembly of section .text.ModuleControllerStateSet:

00005012 <ModuleControllerStateSet>:
	MBASSERT(0);
}

static void ModuleControllerStateSet( EModuleControllerState eNext )
{
	if(eNext < EMODSTATE_COUNT)
    5012:	84 30       	cpi	r24, 0x04	; 4
    5014:	10 f4       	brcc	.+4      	; 0x501a <ModuleControllerStateSet+0x8>
	{
		sg_eModuleControllerStateTarget = eNext;
    5016:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <sg_eModuleControllerStateTarget>
    501a:	08 95       	ret

Disassembly of section .text.ModuleControllerStateSetMax:

00004e9e <ModuleControllerStateSetMax>:



static void ModuleControllerStateSetMax( EModuleControllerState eNext )
{
	if(eNext < EMODSTATE_COUNT)
    4e9e:	84 30       	cpi	r24, 0x04	; 4
    4ea0:	40 f4       	brcc	.+16     	; 0x4eb2 <ModuleControllerStateSetMax+0x14>
	{
		sg_eModuleControllerStateMax = eNext;
    4ea2:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <sg_eModuleControllerStateMax>
		if (sg_eModuleControllerStateCurrent > eNext) // we are in a higher state than allowed
    4ea6:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    4eaa:	89 17       	cp	r24, r25
    4eac:	10 f4       	brcc	.+4      	; 0x4eb2 <ModuleControllerStateSetMax+0x14>
		{
			sg_eModuleControllerStateTarget = eNext;
    4eae:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <sg_eModuleControllerStateTarget>
    4eb2:	08 95       	ret

Disassembly of section .text.Check5VLoss:

00004e56 <Check5VLoss>:
}

// Checks for 5V loss
static void Check5VLoss(uint8_t u8NewState)
{
	if( u8NewState & (1 << PIN_5V_DET) )
    4e56:	86 fd       	sbrc	r24, 6
    4e58:	09 c0       	rjmp	.+18     	; 0x4e6c <Check5VLoss+0x16>
		// Not asserted
	}
	else
	{
		// 5V detect is low
		FET_EN_DEASSERT();
    4e5a:	88 b1       	in	r24, 0x08	; 8
    4e5c:	8f 7e       	andi	r24, 0xEF	; 239
    4e5e:	88 b9       	out	0x08, r24	; 8
		RELAY_EN_DEASSERT();
    4e60:	8e b1       	in	r24, 0x0e	; 14
    4e62:	8d 7f       	andi	r24, 0xFD	; 253
    4e64:	8e b9       	out	0x0e, r24	; 14
		ModuleControllerStateSet( EMODSTATE_OFF );
    4e66:	80 e0       	ldi	r24, 0x00	; 0
    4e68:	0e 94 09 28 	call	0x5012	; 0x5012 <ModuleControllerStateSet>
    4e6c:	08 95       	ret

Disassembly of section .text.CellDataConvertVoltage:

000040ba <CellDataConvertVoltage>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    40ba:	fb 01       	movw	r30, r22
    40bc:	dc 01       	movw	r26, r24
    40be:	b3 70       	andi	r27, 0x03	; 3
    40c0:	2b ed       	ldi	r18, 0xDB	; 219
    40c2:	36 ea       	ldi	r19, 0xA6	; 166
    40c4:	43 e2       	ldi	r20, 0x23	; 35
    40c6:	50 e0       	ldi	r21, 0x00	; 0
    40c8:	0e 94 65 27 	call	0x4eca	; 0x4eca <__muluhisi3>
    40cc:	dc 01       	movw	r26, r24
    40ce:	cb 01       	movw	r24, r22
    40d0:	07 2e       	mov	r0, r23
    40d2:	7a e0       	ldi	r23, 0x0A	; 10
    40d4:	b6 95       	lsr	r27
    40d6:	a7 95       	ror	r26
    40d8:	97 95       	ror	r25
    40da:	87 95       	ror	r24
    40dc:	7a 95       	dec	r23
    40de:	d1 f7       	brne	.-12     	; 0x40d4 <CellDataConvertVoltage+0x1a>
    40e0:	70 2d       	mov	r23, r0
    40e2:	9f 5f       	subi	r25, 0xFF	; 255
    40e4:	af 4f       	sbci	r26, 0xFF	; 255
    40e6:	bf 4f       	sbci	r27, 0xFF	; 255
    40e8:	07 2e       	mov	r0, r23
    40ea:	79 e0       	ldi	r23, 0x09	; 9
    40ec:	b6 95       	lsr	r27
    40ee:	a7 95       	ror	r26
    40f0:	97 95       	ror	r25
    40f2:	87 95       	ror	r24
    40f4:	7a 95       	dec	r23
    40f6:	d1 f7       	brne	.-12     	; 0x40ec <CellDataConvertVoltage+0x32>
    40f8:	70 2d       	mov	r23, r0
    40fa:	9c 01       	movw	r18, r24
    40fc:	01 97       	sbiw	r24, 0x01	; 1
    40fe:	8e 3f       	cpi	r24, 0xFE	; 254
    4100:	9f 4f       	sbci	r25, 0xFF	; 255
    4102:	10 f4       	brcc	.+4      	; 0x4108 <CellDataConvertVoltage+0x4e>
    4104:	81 e0       	ldi	r24, 0x01	; 1
    4106:	03 c0       	rjmp	.+6      	; 0x410e <CellDataConvertVoltage+0x54>
    4108:	80 e0       	ldi	r24, 0x00	; 0
    410a:	20 e0       	ldi	r18, 0x00	; 0
    410c:	30 e0       	ldi	r19, 0x00	; 0
    410e:	30 97       	sbiw	r30, 0x00	; 0
    4110:	11 f0       	breq	.+4      	; 0x4116 <CellDataConvertVoltage+0x5c>
    4112:	31 83       	std	Z+1, r19	; 0x01
    4114:	20 83       	st	Z, r18
    4116:	08 95       	ret

Disassembly of section .text.CellDataConvertTemperature:

00003f92 <CellDataConvertTemperature>:
    3f92:	8f 3f       	cpi	r24, 0xFF	; 255
    3f94:	2f ef       	ldi	r18, 0xFF	; 255
    3f96:	92 07       	cpc	r25, r18
    3f98:	29 f1       	breq	.+74     	; 0x3fe4 <CellDataConvertTemperature+0x52>
    3f9a:	28 2f       	mov	r18, r24
    3f9c:	2f 70       	andi	r18, 0x0F	; 15
    3f9e:	94 ff       	sbrs	r25, 4
    3fa0:	02 c0       	rjmp	.+4      	; 0x3fa6 <CellDataConvertTemperature+0x14>
    3fa2:	90 6f       	ori	r25, 0xF0	; 240
    3fa4:	01 c0       	rjmp	.+2      	; 0x3fa8 <CellDataConvertTemperature+0x16>
    3fa6:	9f 77       	andi	r25, 0x7F	; 127
    3fa8:	ac 01       	movw	r20, r24
    3faa:	55 95       	asr	r21
    3fac:	47 95       	ror	r20
    3fae:	55 95       	asr	r21
    3fb0:	47 95       	ror	r20
    3fb2:	55 95       	asr	r21
    3fb4:	47 95       	ror	r20
    3fb6:	55 95       	asr	r21
    3fb8:	47 95       	ror	r20
    3fba:	34 e6       	ldi	r19, 0x64	; 100
    3fbc:	34 9f       	mul	r19, r20
    3fbe:	c0 01       	movw	r24, r0
    3fc0:	35 9f       	mul	r19, r21
    3fc2:	90 0d       	add	r25, r0
    3fc4:	11 24       	eor	r1, r1
    3fc6:	30 e0       	ldi	r19, 0x00	; 0
    3fc8:	40 e0       	ldi	r20, 0x00	; 0
    3fca:	26 5f       	subi	r18, 0xF6	; 246
    3fcc:	3c 4f       	sbci	r19, 0xFC	; 252
    3fce:	4f 4f       	sbci	r20, 0xFF	; 255
    3fd0:	f9 01       	movw	r30, r18
    3fd2:	24 91       	lpm	r18, Z
    3fd4:	47 fd       	sbrc	r20, 7
    3fd6:	20 81       	ld	r18, Z
    3fd8:	82 0f       	add	r24, r18
    3fda:	91 1d       	adc	r25, r1
    3fdc:	81 56       	subi	r24, 0x61	; 97
    3fde:	9a 4e       	sbci	r25, 0xEA	; 234
    3fe0:	21 e0       	ldi	r18, 0x01	; 1
    3fe2:	01 c0       	rjmp	.+2      	; 0x3fe6 <CellDataConvertTemperature+0x54>
    3fe4:	20 e0       	ldi	r18, 0x00	; 0
    3fe6:	61 15       	cp	r22, r1
    3fe8:	71 05       	cpc	r23, r1
    3fea:	19 f0       	breq	.+6      	; 0x3ff2 <CellDataConvertTemperature+0x60>
    3fec:	fb 01       	movw	r30, r22
    3fee:	91 83       	std	Z+1, r25	; 0x01
    3ff0:	80 83       	st	Z, r24
    3ff2:	82 2f       	mov	r24, r18
    3ff4:	08 95       	ret

Disassembly of section .text.ModuleCurrentConvertReadings:

000027c0 <ModuleCurrentConvertReadings>:
    27c0:	a0 91 56 01 	lds	r26, 0x0156	; 0x800156 <sg_sFrame+0x4a>
    27c4:	b0 91 57 01 	lds	r27, 0x0157	; 0x800157 <sg_sFrame+0x4b>
    27c8:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <sg_sFrame+0x4d>
    27cc:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <sg_sFrame+0x4e>
    27d0:	e0 91 86 09 	lds	r30, 0x0986	; 0x800986 <sg_u8CurrentBufferIndex>
    27d4:	ef 3f       	cpi	r30, 0xFF	; 255
    27d6:	81 f4       	brne	.+32     	; 0x27f8 <ModuleCurrentConvertReadings+0x38>
    27d8:	07 c0       	rjmp	.+14     	; 0x27e8 <ModuleCurrentConvertReadings+0x28>
    27da:	f0 e0       	ldi	r31, 0x00	; 0
    27dc:	ee 0f       	add	r30, r30
    27de:	ff 1f       	adc	r31, r31
    27e0:	e3 5e       	subi	r30, 0xE3	; 227
    27e2:	f6 4f       	sbci	r31, 0xF6	; 246
    27e4:	91 83       	std	Z+1, r25	; 0x01
    27e6:	80 83       	st	Z, r24
    27e8:	e0 91 86 09 	lds	r30, 0x0986	; 0x800986 <sg_u8CurrentBufferIndex>
    27ec:	ef 5f       	subi	r30, 0xFF	; 255
    27ee:	e0 93 86 09 	sts	0x0986, r30	; 0x800986 <sg_u8CurrentBufferIndex>
    27f2:	e8 30       	cpi	r30, 0x08	; 8
    27f4:	90 f3       	brcs	.-28     	; 0x27da <ModuleCurrentConvertReadings+0x1a>
    27f6:	0f c0       	rjmp	.+30     	; 0x2816 <ModuleCurrentConvertReadings+0x56>
    27f8:	21 e0       	ldi	r18, 0x01	; 1
    27fa:	2e 0f       	add	r18, r30
    27fc:	20 93 86 09 	sts	0x0986, r18	; 0x800986 <sg_u8CurrentBufferIndex>
    2800:	f0 e0       	ldi	r31, 0x00	; 0
    2802:	ee 0f       	add	r30, r30
    2804:	ff 1f       	adc	r31, r31
    2806:	e3 5e       	subi	r30, 0xE3	; 227
    2808:	f6 4f       	sbci	r31, 0xF6	; 246
    280a:	91 83       	std	Z+1, r25	; 0x01
    280c:	80 83       	st	Z, r24
    280e:	28 30       	cpi	r18, 0x08	; 8
    2810:	10 f0       	brcs	.+4      	; 0x2816 <ModuleCurrentConvertReadings+0x56>
    2812:	10 92 86 09 	sts	0x0986, r1	; 0x800986 <sg_u8CurrentBufferIndex>
    2816:	80 e0       	ldi	r24, 0x00	; 0
    2818:	20 e0       	ldi	r18, 0x00	; 0
    281a:	30 e0       	ldi	r19, 0x00	; 0
    281c:	0b c0       	rjmp	.+22     	; 0x2834 <ModuleCurrentConvertReadings+0x74>
    281e:	e8 2f       	mov	r30, r24
    2820:	f0 e0       	ldi	r31, 0x00	; 0
    2822:	ee 0f       	add	r30, r30
    2824:	ff 1f       	adc	r31, r31
    2826:	e3 5e       	subi	r30, 0xE3	; 227
    2828:	f6 4f       	sbci	r31, 0xF6	; 246
    282a:	40 81       	ld	r20, Z
    282c:	51 81       	ldd	r21, Z+1	; 0x01
    282e:	24 0f       	add	r18, r20
    2830:	35 1f       	adc	r19, r21
    2832:	8f 5f       	subi	r24, 0xFF	; 255
    2834:	88 30       	cpi	r24, 0x08	; 8
    2836:	98 f3       	brcs	.-26     	; 0x281e <ModuleCurrentConvertReadings+0x5e>
    2838:	c9 01       	movw	r24, r18
    283a:	99 23       	and	r25, r25
    283c:	0c f4       	brge	.+2      	; 0x2840 <ModuleCurrentConvertReadings+0x80>
    283e:	07 96       	adiw	r24, 0x07	; 7
    2840:	95 95       	asr	r25
    2842:	87 95       	ror	r24
    2844:	95 95       	asr	r25
    2846:	87 95       	ror	r24
    2848:	95 95       	asr	r25
    284a:	87 95       	ror	r24
    284c:	a8 1b       	sub	r26, r24
    284e:	b9 0b       	sbc	r27, r25
    2850:	20 e8       	ldi	r18, 0x80	; 128
    2852:	3c e0       	ldi	r19, 0x0C	; 12
    2854:	0e 94 f1 27 	call	0x4fe2	; 0x4fe2 <__usmulhisi3>
    2858:	ab 01       	movw	r20, r22
    285a:	bc 01       	movw	r22, r24
    285c:	5f 5f       	subi	r21, 0xFF	; 255
    285e:	6f 4f       	sbci	r22, 0xFF	; 255
    2860:	7f 4f       	sbci	r23, 0xFF	; 255
    2862:	db 01       	movw	r26, r22
    2864:	ca 01       	movw	r24, r20
    2866:	77 23       	and	r23, r23
    2868:	24 f4       	brge	.+8      	; 0x2872 <ModuleCurrentConvertReadings+0xb2>
    286a:	81 50       	subi	r24, 0x01	; 1
    286c:	9e 4f       	sbci	r25, 0xFE	; 254
    286e:	af 4f       	sbci	r26, 0xFF	; 255
    2870:	bf 4f       	sbci	r27, 0xFF	; 255
    2872:	07 2e       	mov	r0, r23
    2874:	79 e0       	ldi	r23, 0x09	; 9
    2876:	b5 95       	asr	r27
    2878:	a7 95       	ror	r26
    287a:	97 95       	ror	r25
    287c:	87 95       	ror	r24
    287e:	7a 95       	dec	r23
    2880:	d1 f7       	brne	.-12     	; 0x2876 <ModuleCurrentConvertReadings+0xb6>
    2882:	70 2d       	mov	r23, r0
    2884:	90 58       	subi	r25, 0x80	; 128
    2886:	af 4f       	sbci	r26, 0xFF	; 255
    2888:	bf 4f       	sbci	r27, 0xFF	; 255
    288a:	ec e0       	ldi	r30, 0x0C	; 12
    288c:	f1 e0       	ldi	r31, 0x01	; 1
    288e:	91 ab       	std	Z+49, r25	; 0x31
    2890:	80 ab       	std	Z+48, r24	; 0x30
    2892:	20 a9       	ldd	r18, Z+48	; 0x30
    2894:	31 a9       	ldd	r19, Z+49	; 0x31
    2896:	86 89       	ldd	r24, Z+22	; 0x16
    2898:	97 89       	ldd	r25, Z+23	; 0x17
    289a:	82 17       	cp	r24, r18
    289c:	93 07       	cpc	r25, r19
    289e:	20 f4       	brcc	.+8      	; 0x28a8 <ModuleCurrentConvertReadings+0xe8>
    28a0:	80 a9       	ldd	r24, Z+48	; 0x30
    28a2:	91 a9       	ldd	r25, Z+49	; 0x31
    28a4:	97 8b       	std	Z+23, r25	; 0x17
    28a6:	86 8b       	std	Z+22, r24	; 0x16
    28a8:	ec e0       	ldi	r30, 0x0C	; 12
    28aa:	f1 e0       	ldi	r31, 0x01	; 1
    28ac:	20 a9       	ldd	r18, Z+48	; 0x30
    28ae:	31 a9       	ldd	r19, Z+49	; 0x31
    28b0:	80 8d       	ldd	r24, Z+24	; 0x18
    28b2:	91 8d       	ldd	r25, Z+25	; 0x19
    28b4:	28 17       	cp	r18, r24
    28b6:	39 07       	cpc	r19, r25
    28b8:	20 f4       	brcc	.+8      	; 0x28c2 <ModuleCurrentConvertReadings+0x102>
    28ba:	80 a9       	ldd	r24, Z+48	; 0x30
    28bc:	91 a9       	ldd	r25, Z+49	; 0x31
    28be:	91 8f       	std	Z+25, r25	; 0x19
    28c0:	80 8f       	std	Z+24, r24	; 0x18
    28c2:	08 95       	ret

Disassembly of section .text.__vector_1:

00004ad2 <__vector_1>:

// NOTE: If you're getting unexpected AVR resets, uncomment these unused handlers to see
// if another interrupt is being taken that doesn't have a handler. AVR Defaults to jumping
// to 0 when not vector is programmed.
ISR(ANACOMP0_vect, ISR_BLOCK)
{
    4ad2:	1f 92       	push	r1
    4ad4:	0f 92       	push	r0
    4ad6:	0f b6       	in	r0, 0x3f	; 63
    4ad8:	0f 92       	push	r0
    4ada:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) ANACOMP0_vect;
    4adc:	89 e6       	ldi	r24, 0x69	; 105
    4ade:	95 e2       	ldi	r25, 0x25	; 37
    4ae0:	80 93 79 09 	sts	0x0979, r24	; 0x800979 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4ae4:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4ae8:	80 93 78 09 	sts	0x0978, r24	; 0x800978 <sg_u8PCMSK0>
    4aec:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4af0:	80 93 77 09 	sts	0x0977, r24	; 0x800977 <sg_u8PCMSK1>
    4af4:	ff cf       	rjmp	.-2      	; 0x4af4 <__vector_1+0x22>

Disassembly of section .text.__vector_2:

00004af6 <__vector_2>:
	while (1);
}

ISR(ANACOMP1_vect, ISR_BLOCK)
{
    4af6:	1f 92       	push	r1
    4af8:	0f 92       	push	r0
    4afa:	0f b6       	in	r0, 0x3f	; 63
    4afc:	0f 92       	push	r0
    4afe:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) ANACOMP1_vect;
    4b00:	8b e7       	ldi	r24, 0x7B	; 123
    4b02:	95 e2       	ldi	r25, 0x25	; 37
    4b04:	80 93 79 09 	sts	0x0979, r24	; 0x800979 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4b08:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4b0c:	80 93 78 09 	sts	0x0978, r24	; 0x800978 <sg_u8PCMSK0>
    4b10:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4b14:	80 93 77 09 	sts	0x0977, r24	; 0x800977 <sg_u8PCMSK1>
    4b18:	ff cf       	rjmp	.-2      	; 0x4b18 <__vector_2+0x22>

Disassembly of section .text.__vector_3:

00004b1a <__vector_3>:
	while (1);
}

ISR(ANACOMP2_vect, ISR_BLOCK)
{
    4b1a:	1f 92       	push	r1
    4b1c:	0f 92       	push	r0
    4b1e:	0f b6       	in	r0, 0x3f	; 63
    4b20:	0f 92       	push	r0
    4b22:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) ANACOMP2_vect;
    4b24:	8d e8       	ldi	r24, 0x8D	; 141
    4b26:	95 e2       	ldi	r25, 0x25	; 37
    4b28:	80 93 79 09 	sts	0x0979, r24	; 0x800979 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4b2c:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4b30:	80 93 78 09 	sts	0x0978, r24	; 0x800978 <sg_u8PCMSK0>
    4b34:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4b38:	80 93 77 09 	sts	0x0977, r24	; 0x800977 <sg_u8PCMSK1>
    4b3c:	ff cf       	rjmp	.-2      	; 0x4b3c <__vector_3+0x22>

Disassembly of section .text.__vector_4:

00004b3e <__vector_4>:
	while (1);
}

ISR(ANACOMP3_vect, ISR_BLOCK)
{
    4b3e:	1f 92       	push	r1
    4b40:	0f 92       	push	r0
    4b42:	0f b6       	in	r0, 0x3f	; 63
    4b44:	0f 92       	push	r0
    4b46:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) ANACOMP3_vect;
    4b48:	8f e9       	ldi	r24, 0x9F	; 159
    4b4a:	95 e2       	ldi	r25, 0x25	; 37
    4b4c:	80 93 79 09 	sts	0x0979, r24	; 0x800979 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4b50:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4b54:	80 93 78 09 	sts	0x0978, r24	; 0x800978 <sg_u8PCMSK0>
    4b58:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4b5c:	80 93 77 09 	sts	0x0977, r24	; 0x800977 <sg_u8PCMSK1>
    4b60:	ff cf       	rjmp	.-2      	; 0x4b60 <__vector_4+0x22>

Disassembly of section .text.__vector_5:

00004b62 <__vector_5>:
	while (1);
}

ISR(PSC_FAULT_vect, ISR_BLOCK)
{
    4b62:	1f 92       	push	r1
    4b64:	0f 92       	push	r0
    4b66:	0f b6       	in	r0, 0x3f	; 63
    4b68:	0f 92       	push	r0
    4b6a:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) PSC_FAULT_vect;
    4b6c:	81 eb       	ldi	r24, 0xB1	; 177
    4b6e:	95 e2       	ldi	r25, 0x25	; 37
    4b70:	80 93 79 09 	sts	0x0979, r24	; 0x800979 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4b74:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4b78:	80 93 78 09 	sts	0x0978, r24	; 0x800978 <sg_u8PCMSK0>
    4b7c:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4b80:	80 93 77 09 	sts	0x0977, r24	; 0x800977 <sg_u8PCMSK1>
    4b84:	ff cf       	rjmp	.-2      	; 0x4b84 <__vector_5+0x22>

Disassembly of section .text.__vector_6:

00004b86 <__vector_6>:
	while (1);
}

ISR(PSC_EC_vect, ISR_BLOCK)
{
    4b86:	1f 92       	push	r1
    4b88:	0f 92       	push	r0
    4b8a:	0f b6       	in	r0, 0x3f	; 63
    4b8c:	0f 92       	push	r0
    4b8e:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) PSC_EC_vect;
    4b90:	83 ec       	ldi	r24, 0xC3	; 195
    4b92:	95 e2       	ldi	r25, 0x25	; 37
    4b94:	80 93 79 09 	sts	0x0979, r24	; 0x800979 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4b98:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4b9c:	80 93 78 09 	sts	0x0978, r24	; 0x800978 <sg_u8PCMSK0>
    4ba0:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4ba4:	80 93 77 09 	sts	0x0977, r24	; 0x800977 <sg_u8PCMSK1>
    4ba8:	ff cf       	rjmp	.-2      	; 0x4ba8 <__vector_6+0x22>

Disassembly of section .text.__vector_22:

00004baa <__vector_22>:
	while (1);
}

ISR(PCINT0_vect, ISR_BLOCK)
{
    4baa:	1f 92       	push	r1
    4bac:	0f 92       	push	r0
    4bae:	0f b6       	in	r0, 0x3f	; 63
    4bb0:	0f 92       	push	r0
    4bb2:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) PCINT0_vect;
    4bb4:	85 ed       	ldi	r24, 0xD5	; 213
    4bb6:	95 e2       	ldi	r25, 0x25	; 37
    4bb8:	80 93 79 09 	sts	0x0979, r24	; 0x800979 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4bbc:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4bc0:	80 93 78 09 	sts	0x0978, r24	; 0x800978 <sg_u8PCMSK0>
    4bc4:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4bc8:	80 93 77 09 	sts	0x0977, r24	; 0x800977 <sg_u8PCMSK1>
    4bcc:	ff cf       	rjmp	.-2      	; 0x4bcc <__vector_22+0x22>

Disassembly of section .text.__vector_9:

00004bce <__vector_9>:
// 	while (1);
// }
*/

ISR(INT2_vect, ISR_BLOCK)
{
    4bce:	1f 92       	push	r1
    4bd0:	0f 92       	push	r0
    4bd2:	0f b6       	in	r0, 0x3f	; 63
    4bd4:	0f 92       	push	r0
    4bd6:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) INT2_vect;
    4bd8:	87 ee       	ldi	r24, 0xE7	; 231
    4bda:	95 e2       	ldi	r25, 0x25	; 37
    4bdc:	80 93 79 09 	sts	0x0979, r24	; 0x800979 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4be0:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4be4:	80 93 78 09 	sts	0x0978, r24	; 0x800978 <sg_u8PCMSK0>
    4be8:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4bec:	80 93 77 09 	sts	0x0977, r24	; 0x800977 <sg_u8PCMSK1>
    4bf0:	ff cf       	rjmp	.-2      	; 0x4bf0 <__vector_9+0x22>

Disassembly of section .text.__vector_11:

00004bf2 <__vector_11>:
// 	while (1);
// }


ISR(TIMER1_CAPT_vect, ISR_BLOCK)
{
    4bf2:	1f 92       	push	r1
    4bf4:	0f 92       	push	r0
    4bf6:	0f b6       	in	r0, 0x3f	; 63
    4bf8:	0f 92       	push	r0
    4bfa:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) TIMER1_CAPT_vect;
    4bfc:	89 ef       	ldi	r24, 0xF9	; 249
    4bfe:	95 e2       	ldi	r25, 0x25	; 37
    4c00:	80 93 79 09 	sts	0x0979, r24	; 0x800979 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4c04:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4c08:	80 93 78 09 	sts	0x0978, r24	; 0x800978 <sg_u8PCMSK0>
    4c0c:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4c10:	80 93 77 09 	sts	0x0977, r24	; 0x800977 <sg_u8PCMSK1>
    4c14:	ff cf       	rjmp	.-2      	; 0x4c14 <__vector_11+0x22>

Disassembly of section .text.__vector_13:

00004c16 <__vector_13>:
// }



ISR(TIMER1_COMPB_vect, ISR_BLOCK)
{
    4c16:	1f 92       	push	r1
    4c18:	0f 92       	push	r0
    4c1a:	0f b6       	in	r0, 0x3f	; 63
    4c1c:	0f 92       	push	r0
    4c1e:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) TIMER1_COMPB_vect;
    4c20:	8b e0       	ldi	r24, 0x0B	; 11
    4c22:	96 e2       	ldi	r25, 0x26	; 38
    4c24:	80 93 79 09 	sts	0x0979, r24	; 0x800979 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4c28:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4c2c:	80 93 78 09 	sts	0x0978, r24	; 0x800978 <sg_u8PCMSK0>
    4c30:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4c34:	80 93 77 09 	sts	0x0977, r24	; 0x800977 <sg_u8PCMSK1>
    4c38:	ff cf       	rjmp	.-2      	; 0x4c38 <__vector_13+0x22>

Disassembly of section .text.__vector_14:

00004c3a <__vector_14>:
	while (1);
}


ISR(TIMER1_OVF_vect, ISR_BLOCK)
{
    4c3a:	1f 92       	push	r1
    4c3c:	0f 92       	push	r0
    4c3e:	0f b6       	in	r0, 0x3f	; 63
    4c40:	0f 92       	push	r0
    4c42:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) TIMER1_OVF_vect;
    4c44:	8d e1       	ldi	r24, 0x1D	; 29
    4c46:	96 e2       	ldi	r25, 0x26	; 38
    4c48:	80 93 79 09 	sts	0x0979, r24	; 0x800979 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4c4c:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4c50:	80 93 78 09 	sts	0x0978, r24	; 0x800978 <sg_u8PCMSK0>
    4c54:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4c58:	80 93 77 09 	sts	0x0977, r24	; 0x800977 <sg_u8PCMSK1>
    4c5c:	ff cf       	rjmp	.-2      	; 0x4c5c <__vector_14+0x22>

Disassembly of section .text.__vector_17:

00004c5e <__vector_17>:
	while (1);
}

ISR(TIMER0_OVF_vect, ISR_BLOCK)
{
    4c5e:	1f 92       	push	r1
    4c60:	0f 92       	push	r0
    4c62:	0f b6       	in	r0, 0x3f	; 63
    4c64:	0f 92       	push	r0
    4c66:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) TIMER0_OVF_vect;
    4c68:	8f e2       	ldi	r24, 0x2F	; 47
    4c6a:	96 e2       	ldi	r25, 0x26	; 38
    4c6c:	80 93 79 09 	sts	0x0979, r24	; 0x800979 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4c70:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4c74:	80 93 78 09 	sts	0x0978, r24	; 0x800978 <sg_u8PCMSK0>
    4c78:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4c7c:	80 93 77 09 	sts	0x0977, r24	; 0x800977 <sg_u8PCMSK1>
    4c80:	ff cf       	rjmp	.-2      	; 0x4c80 <__vector_17+0x22>

Disassembly of section .text.__vector_19:

00004c82 <__vector_19>:
	while (1);
}

ISR(CAN_TOVF_vect, ISR_BLOCK)
{
    4c82:	1f 92       	push	r1
    4c84:	0f 92       	push	r0
    4c86:	0f b6       	in	r0, 0x3f	; 63
    4c88:	0f 92       	push	r0
    4c8a:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) CAN_TOVF_vect;
    4c8c:	81 e4       	ldi	r24, 0x41	; 65
    4c8e:	96 e2       	ldi	r25, 0x26	; 38
    4c90:	80 93 79 09 	sts	0x0979, r24	; 0x800979 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4c94:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4c98:	80 93 78 09 	sts	0x0978, r24	; 0x800978 <sg_u8PCMSK0>
    4c9c:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4ca0:	80 93 77 09 	sts	0x0977, r24	; 0x800977 <sg_u8PCMSK1>
    4ca4:	ff cf       	rjmp	.-2      	; 0x4ca4 <__vector_19+0x22>

Disassembly of section .text.__vector_21:

00004ca6 <__vector_21>:
	while (1);
}

ISR(LIN_ERR_vect, ISR_BLOCK)
{
    4ca6:	1f 92       	push	r1
    4ca8:	0f 92       	push	r0
    4caa:	0f b6       	in	r0, 0x3f	; 63
    4cac:	0f 92       	push	r0
    4cae:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) LIN_ERR_vect;
    4cb0:	83 e5       	ldi	r24, 0x53	; 83
    4cb2:	96 e2       	ldi	r25, 0x26	; 38
    4cb4:	80 93 79 09 	sts	0x0979, r24	; 0x800979 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4cb8:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4cbc:	80 93 78 09 	sts	0x0978, r24	; 0x800978 <sg_u8PCMSK0>
    4cc0:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4cc4:	80 93 77 09 	sts	0x0977, r24	; 0x800977 <sg_u8PCMSK1>
    4cc8:	ff cf       	rjmp	.-2      	; 0x4cc8 <__vector_21+0x22>

Disassembly of section .text.__vector_25:

00004cca <__vector_25>:
// 	while (1);
// }


ISR(PCINT3_vect, ISR_BLOCK)
{
    4cca:	1f 92       	push	r1
    4ccc:	0f 92       	push	r0
    4cce:	0f b6       	in	r0, 0x3f	; 63
    4cd0:	0f 92       	push	r0
    4cd2:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) PCINT3_vect;
    4cd4:	85 e6       	ldi	r24, 0x65	; 101
    4cd6:	96 e2       	ldi	r25, 0x26	; 38
    4cd8:	80 93 79 09 	sts	0x0979, r24	; 0x800979 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4cdc:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4ce0:	80 93 78 09 	sts	0x0978, r24	; 0x800978 <sg_u8PCMSK0>
    4ce4:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4ce8:	80 93 77 09 	sts	0x0977, r24	; 0x800977 <sg_u8PCMSK1>
    4cec:	ff cf       	rjmp	.-2      	; 0x4cec <__vector_25+0x22>

Disassembly of section .text.__vector_26:

00004cee <__vector_26>:
	while (1);
}


ISR(SPI_STC_vect, ISR_BLOCK)
{
    4cee:	1f 92       	push	r1
    4cf0:	0f 92       	push	r0
    4cf2:	0f b6       	in	r0, 0x3f	; 63
    4cf4:	0f 92       	push	r0
    4cf6:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) SPI_STC_vect;
    4cf8:	87 e7       	ldi	r24, 0x77	; 119
    4cfa:	96 e2       	ldi	r25, 0x26	; 38
    4cfc:	80 93 79 09 	sts	0x0979, r24	; 0x800979 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4d00:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4d04:	80 93 78 09 	sts	0x0978, r24	; 0x800978 <sg_u8PCMSK0>
    4d08:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4d0c:	80 93 77 09 	sts	0x0977, r24	; 0x800977 <sg_u8PCMSK1>
    4d10:	ff cf       	rjmp	.-2      	; 0x4d10 <__vector_26+0x22>

Disassembly of section .text.__vector_29:

00004d12 <__vector_29>:
	while (1);
}

ISR(EE_READY_vect, ISR_BLOCK)
{
    4d12:	1f 92       	push	r1
    4d14:	0f 92       	push	r0
    4d16:	0f b6       	in	r0, 0x3f	; 63
    4d18:	0f 92       	push	r0
    4d1a:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) EE_READY_vect;
    4d1c:	89 e8       	ldi	r24, 0x89	; 137
    4d1e:	96 e2       	ldi	r25, 0x26	; 38
    4d20:	80 93 79 09 	sts	0x0979, r24	; 0x800979 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4d24:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4d28:	80 93 78 09 	sts	0x0978, r24	; 0x800978 <sg_u8PCMSK0>
    4d2c:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4d30:	80 93 77 09 	sts	0x0977, r24	; 0x800977 <sg_u8PCMSK1>
    4d34:	ff cf       	rjmp	.-2      	; 0x4d34 <__vector_29+0x22>

Disassembly of section .text.__vector_30:

00004d36 <__vector_30>:
	while (1);
}

ISR(SPM_READY_vect, ISR_BLOCK)
{
    4d36:	1f 92       	push	r1
    4d38:	0f 92       	push	r0
    4d3a:	0f b6       	in	r0, 0x3f	; 63
    4d3c:	0f 92       	push	r0
    4d3e:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) SPM_READY_vect;
    4d40:	8b e9       	ldi	r24, 0x9B	; 155
    4d42:	96 e2       	ldi	r25, 0x26	; 38
    4d44:	80 93 79 09 	sts	0x0979, r24	; 0x800979 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4d48:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4d4c:	80 93 78 09 	sts	0x0978, r24	; 0x800978 <sg_u8PCMSK0>
    4d50:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4d54:	80 93 77 09 	sts	0x0977, r24	; 0x800977 <sg_u8PCMSK1>
    4d58:	ff cf       	rjmp	.-2      	; 0x4d58 <__vector_30+0x22>

Disassembly of section .text.CurrentThresholdsGet:

000037ac <CurrentThresholdsGet>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    37ac:	0f 93       	push	r16
    37ae:	1f 93       	push	r17
    37b0:	cf 93       	push	r28
    37b2:	df 93       	push	r29
    37b4:	8c 01       	movw	r16, r24
    37b6:	eb 01       	movw	r28, r22
    37b8:	89 2b       	or	r24, r25
    37ba:	f9 f0       	breq	.+62     	; 0x37fa <CurrentThresholdsGet+0x4e>
    37bc:	87 e0       	ldi	r24, 0x07	; 7
    37be:	90 e0       	ldi	r25, 0x00	; 0
    37c0:	0e 94 8f 27 	call	0x4f1e	; 0x4f1e <EEPROMRead>
    37c4:	90 e0       	ldi	r25, 0x00	; 0
    37c6:	f8 01       	movw	r30, r16
    37c8:	91 83       	std	Z+1, r25	; 0x01
    37ca:	80 83       	st	Z, r24
    37cc:	88 e0       	ldi	r24, 0x08	; 8
    37ce:	90 e0       	ldi	r25, 0x00	; 0
    37d0:	0e 94 8f 27 	call	0x4f1e	; 0x4f1e <EEPROMRead>
    37d4:	90 e0       	ldi	r25, 0x00	; 0
    37d6:	98 2f       	mov	r25, r24
    37d8:	88 27       	eor	r24, r24
    37da:	f8 01       	movw	r30, r16
    37dc:	20 81       	ld	r18, Z
    37de:	31 81       	ldd	r19, Z+1	; 0x01
    37e0:	82 2b       	or	r24, r18
    37e2:	93 2b       	or	r25, r19
    37e4:	91 83       	std	Z+1, r25	; 0x01
    37e6:	80 83       	st	Z, r24
    37e8:	01 97       	sbiw	r24, 0x01	; 1
    37ea:	8e 3f       	cpi	r24, 0xFE	; 254
    37ec:	9f 4f       	sbci	r25, 0xFF	; 255
    37ee:	28 f0       	brcs	.+10     	; 0x37fa <CurrentThresholdsGet+0x4e>
    37f0:	8c ec       	ldi	r24, 0xCC	; 204
    37f2:	97 e7       	ldi	r25, 0x77	; 119
    37f4:	f8 01       	movw	r30, r16
    37f6:	91 83       	std	Z+1, r25	; 0x01
    37f8:	80 83       	st	Z, r24
    37fa:	20 97       	sbiw	r28, 0x00	; 0
    37fc:	e1 f0       	breq	.+56     	; 0x3836 <CurrentThresholdsGet+0x8a>
    37fe:	85 e0       	ldi	r24, 0x05	; 5
    3800:	90 e0       	ldi	r25, 0x00	; 0
    3802:	0e 94 8f 27 	call	0x4f1e	; 0x4f1e <EEPROMRead>
    3806:	90 e0       	ldi	r25, 0x00	; 0
    3808:	99 83       	std	Y+1, r25	; 0x01
    380a:	88 83       	st	Y, r24
    380c:	86 e0       	ldi	r24, 0x06	; 6
    380e:	90 e0       	ldi	r25, 0x00	; 0
    3810:	0e 94 8f 27 	call	0x4f1e	; 0x4f1e <EEPROMRead>
    3814:	90 e0       	ldi	r25, 0x00	; 0
    3816:	98 2f       	mov	r25, r24
    3818:	88 27       	eor	r24, r24
    381a:	28 81       	ld	r18, Y
    381c:	39 81       	ldd	r19, Y+1	; 0x01
    381e:	82 2b       	or	r24, r18
    3820:	93 2b       	or	r25, r19
    3822:	99 83       	std	Y+1, r25	; 0x01
    3824:	88 83       	st	Y, r24
    3826:	01 97       	sbiw	r24, 0x01	; 1
    3828:	8e 3f       	cpi	r24, 0xFE	; 254
    382a:	9f 4f       	sbci	r25, 0xFF	; 255
    382c:	20 f0       	brcs	.+8      	; 0x3836 <CurrentThresholdsGet+0x8a>
    382e:	84 ef       	ldi	r24, 0xF4	; 244
    3830:	91 e8       	ldi	r25, 0x81	; 129
    3832:	99 83       	std	Y+1, r25	; 0x01
    3834:	88 83       	st	Y, r24
    3836:	df 91       	pop	r29
    3838:	cf 91       	pop	r28
    383a:	1f 91       	pop	r17
    383c:	0f 91       	pop	r16
    383e:	08 95       	ret

Disassembly of section .text.CANReceiveCallback:

00001198 <CANReceiveCallback>:
    1198:	cf 92       	push	r12
    119a:	df 92       	push	r13
    119c:	ef 92       	push	r14
    119e:	ff 92       	push	r15
    11a0:	cf 93       	push	r28
    11a2:	fb 01       	movw	r30, r22
    11a4:	90 91 21 03 	lds	r25, 0x0321	; 0x800321 <sg_bModuleRegistered>
    11a8:	10 92 7f 09 	sts	0x097F, r1	; 0x80097f <sg_u8TicksSinceLastPackControllerMessage>
    11ac:	82 31       	cpi	r24, 0x12	; 18
    11ae:	29 f4       	brne	.+10     	; 0x11ba <CANReceiveCallback+0x22>
    11b0:	80 81       	ld	r24, Z
    11b2:	8f 70       	andi	r24, 0x0F	; 15
    11b4:	0e 94 4f 27 	call	0x4e9e	; 0x4e9e <ModuleControllerStateSetMax>
    11b8:	35 c1       	rjmp	.+618    	; 0x1424 <CANReceiveCallback+0x28c>
    11ba:	8f 30       	cpi	r24, 0x0F	; 15
    11bc:	a9 f4       	brne	.+42     	; 0x11e8 <CANReceiveCallback+0x50>
    11be:	8a ed       	ldi	r24, 0xDA	; 218
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	a0 e0       	ldi	r26, 0x00	; 0
    11c4:	af 93       	push	r26
    11c6:	9f 93       	push	r25
    11c8:	8f 93       	push	r24
    11ca:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <DebugOut>
    11ce:	10 92 27 03 	sts	0x0327, r1	; 0x800327 <sg_u8ModuleRegistrationID>
    11d2:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <sg_bModuleRegistered>
    11d6:	10 92 83 09 	sts	0x0983, r1	; 0x800983 <sg_bIgnoreStatusRequests>
    11da:	80 e0       	ldi	r24, 0x00	; 0
    11dc:	0e 94 09 28 	call	0x5012	; 0x5012 <ModuleControllerStateSet>
    11e0:	0f 90       	pop	r0
    11e2:	0f 90       	pop	r0
    11e4:	0f 90       	pop	r0
    11e6:	1e c1       	rjmp	.+572    	; 0x1424 <CANReceiveCallback+0x28c>
    11e8:	80 31       	cpi	r24, 0x10	; 16
    11ea:	21 f4       	brne	.+8      	; 0x11f4 <CANReceiveCallback+0x5c>
    11ec:	80 e0       	ldi	r24, 0x00	; 0
    11ee:	0e 94 09 28 	call	0x5012	; 0x5012 <ModuleControllerStateSet>
    11f2:	18 c1       	rjmp	.+560    	; 0x1424 <CANReceiveCallback+0x28c>
    11f4:	81 31       	cpi	r24, 0x11	; 17
    11f6:	59 f4       	brne	.+22     	; 0x120e <CANReceiveCallback+0x76>
    11f8:	20 81       	ld	r18, Z
    11fa:	31 81       	ldd	r19, Z+1	; 0x01
    11fc:	42 81       	ldd	r20, Z+2	; 0x02
    11fe:	53 81       	ldd	r21, Z+3	; 0x03
    1200:	64 81       	ldd	r22, Z+4	; 0x04
    1202:	75 81       	ldd	r23, Z+5	; 0x05
    1204:	86 81       	ldd	r24, Z+6	; 0x06
    1206:	97 81       	ldd	r25, Z+7	; 0x07
    1208:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <RTCSetTime>
    120c:	0b c1       	rjmp	.+534    	; 0x1424 <CANReceiveCallback+0x28c>
    120e:	8d 30       	cpi	r24, 0x0D	; 13
    1210:	09 f0       	breq	.+2      	; 0x1214 <CANReceiveCallback+0x7c>
    1212:	4f c0       	rjmp	.+158    	; 0x12b2 <CANReceiveCallback+0x11a>
    1214:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <sg_bModuleRegistered>
    1218:	81 11       	cpse	r24, r1
    121a:	2f c0       	rjmp	.+94     	; 0x127a <CANReceiveCallback+0xe2>
    121c:	80 91 85 09 	lds	r24, 0x0985	; 0x800985 <sg_bAnnouncementPending>
    1220:	81 11       	cpse	r24, r1
    1222:	2b c0       	rjmp	.+86     	; 0x127a <CANReceiveCallback+0xe2>
    1224:	c0 90 1a 01 	lds	r12, 0x011A	; 0x80011a <sg_sFrame+0xe>
    1228:	d0 90 1b 01 	lds	r13, 0x011B	; 0x80011b <sg_sFrame+0xf>
    122c:	e0 90 1c 01 	lds	r14, 0x011C	; 0x80011c <sg_sFrame+0x10>
    1230:	f0 90 1d 01 	lds	r15, 0x011D	; 0x80011d <sg_sFrame+0x11>
    1234:	1f 92       	push	r1
    1236:	cf 92       	push	r12
    1238:	85 e0       	ldi	r24, 0x05	; 5
    123a:	91 e0       	ldi	r25, 0x01	; 1
    123c:	a0 e0       	ldi	r26, 0x00	; 0
    123e:	af 93       	push	r26
    1240:	9f 93       	push	r25
    1242:	8f 93       	push	r24
    1244:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <DebugOut>
    1248:	8d ec       	ldi	r24, 0xCD	; 205
    124a:	c8 9e       	mul	r12, r24
    124c:	c1 2c       	mov	r12, r1
    124e:	11 24       	eor	r1, r1
    1250:	c6 94       	lsr	r12
    1252:	c6 94       	lsr	r12
    1254:	c6 94       	lsr	r12
    1256:	c0 92 84 09 	sts	0x0984, r12	; 0x800984 <sg_u8AnnouncementDelayTicks>
    125a:	80 91 84 09 	lds	r24, 0x0984	; 0x800984 <sg_u8AnnouncementDelayTicks>
    125e:	0f 90       	pop	r0
    1260:	0f 90       	pop	r0
    1262:	0f 90       	pop	r0
    1264:	0f 90       	pop	r0
    1266:	0f 90       	pop	r0
    1268:	81 11       	cpse	r24, r1
    126a:	03 c0       	rjmp	.+6      	; 0x1272 <CANReceiveCallback+0xda>
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	80 93 84 09 	sts	0x0984, r24	; 0x800984 <sg_u8AnnouncementDelayTicks>
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	80 93 85 09 	sts	0x0985, r24	; 0x800985 <sg_bAnnouncementPending>
    1278:	d5 c0       	rjmp	.+426    	; 0x1424 <CANReceiveCallback+0x28c>
    127a:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <sg_bModuleRegistered>
    127e:	88 23       	and	r24, r24
    1280:	61 f0       	breq	.+24     	; 0x129a <CANReceiveCallback+0x102>
    1282:	88 e4       	ldi	r24, 0x48	; 72
    1284:	91 e0       	ldi	r25, 0x01	; 1
    1286:	a0 e0       	ldi	r26, 0x00	; 0
    1288:	af 93       	push	r26
    128a:	9f 93       	push	r25
    128c:	8f 93       	push	r24
    128e:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <DebugOut>
    1292:	0f 90       	pop	r0
    1294:	0f 90       	pop	r0
    1296:	0f 90       	pop	r0
    1298:	c5 c0       	rjmp	.+394    	; 0x1424 <CANReceiveCallback+0x28c>
    129a:	86 e7       	ldi	r24, 0x76	; 118
    129c:	91 e0       	ldi	r25, 0x01	; 1
    129e:	a0 e0       	ldi	r26, 0x00	; 0
    12a0:	af 93       	push	r26
    12a2:	9f 93       	push	r25
    12a4:	8f 93       	push	r24
    12a6:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <DebugOut>
    12aa:	0f 90       	pop	r0
    12ac:	0f 90       	pop	r0
    12ae:	0f 90       	pop	r0
    12b0:	b9 c0       	rjmp	.+370    	; 0x1424 <CANReceiveCallback+0x28c>
    12b2:	89 30       	cpi	r24, 0x09	; 9
    12b4:	09 f0       	breq	.+2      	; 0x12b8 <CANReceiveCallback+0x120>
    12b6:	41 c0       	rjmp	.+130    	; 0x133a <CANReceiveCallback+0x1a2>
    12b8:	48 30       	cpi	r20, 0x08	; 8
    12ba:	09 f0       	breq	.+2      	; 0x12be <CANReceiveCallback+0x126>
    12bc:	b3 c0       	rjmp	.+358    	; 0x1424 <CANReceiveCallback+0x28c>
    12be:	f0 80       	ld	r15, Z
    12c0:	82 81       	ldd	r24, Z+2	; 0x02
    12c2:	82 30       	cpi	r24, 0x02	; 2
    12c4:	09 f0       	breq	.+2      	; 0x12c8 <CANReceiveCallback+0x130>
    12c6:	ae c0       	rjmp	.+348    	; 0x1424 <CANReceiveCallback+0x28c>
    12c8:	83 81       	ldd	r24, Z+3	; 0x03
    12ca:	83 30       	cpi	r24, 0x03	; 3
    12cc:	09 f0       	breq	.+2      	; 0x12d0 <CANReceiveCallback+0x138>
    12ce:	aa c0       	rjmp	.+340    	; 0x1424 <CANReceiveCallback+0x28c>
    12d0:	40 91 1a 01 	lds	r20, 0x011A	; 0x80011a <sg_sFrame+0xe>
    12d4:	50 91 1b 01 	lds	r21, 0x011B	; 0x80011b <sg_sFrame+0xf>
    12d8:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <sg_sFrame+0x10>
    12dc:	70 91 1d 01 	lds	r23, 0x011D	; 0x80011d <sg_sFrame+0x11>
    12e0:	84 81       	ldd	r24, Z+4	; 0x04
    12e2:	95 81       	ldd	r25, Z+5	; 0x05
    12e4:	a6 81       	ldd	r26, Z+6	; 0x06
    12e6:	b7 81       	ldd	r27, Z+7	; 0x07
    12e8:	48 17       	cp	r20, r24
    12ea:	59 07       	cpc	r21, r25
    12ec:	6a 07       	cpc	r22, r26
    12ee:	7b 07       	cpc	r23, r27
    12f0:	09 f0       	breq	.+2      	; 0x12f4 <CANReceiveCallback+0x15c>
    12f2:	98 c0       	rjmp	.+304    	; 0x1424 <CANReceiveCallback+0x28c>
    12f4:	10 92 7f 09 	sts	0x097F, r1	; 0x80097f <sg_u8TicksSinceLastPackControllerMessage>
    12f8:	f0 92 27 03 	sts	0x0327, r15	; 0x800327 <sg_u8ModuleRegistrationID>
    12fc:	0e 94 bc 27 	call	0x4f78	; 0x4f78 <SendModuleControllerStatus>
    1300:	c1 e0       	ldi	r28, 0x01	; 1
    1302:	c0 93 1c 03 	sts	0x031C, r28	; 0x80031c <sg_bSendHardwareDetail>
    1306:	c0 93 21 03 	sts	0x0321, r28	; 0x800321 <sg_bModuleRegistered>
    130a:	10 92 83 09 	sts	0x0983, r1	; 0x800983 <sg_bIgnoreStatusRequests>
    130e:	1f 92       	push	r1
    1310:	ff 92       	push	r15
    1312:	8e e9       	ldi	r24, 0x9E	; 158
    1314:	91 e0       	ldi	r25, 0x01	; 1
    1316:	a0 e0       	ldi	r26, 0x00	; 0
    1318:	af 93       	push	r26
    131a:	9f 93       	push	r25
    131c:	8f 93       	push	r24
    131e:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <DebugOut>
    1322:	10 92 85 09 	sts	0x0985, r1	; 0x800985 <sg_bAnnouncementPending>
    1326:	10 92 84 09 	sts	0x0984, r1	; 0x800984 <sg_u8AnnouncementDelayTicks>
    132a:	c0 93 20 03 	sts	0x0320, r28	; 0x800320 <sg_bSendTimeRequest>
    132e:	0f 90       	pop	r0
    1330:	0f 90       	pop	r0
    1332:	0f 90       	pop	r0
    1334:	0f 90       	pop	r0
    1336:	0f 90       	pop	r0
    1338:	75 c0       	rjmp	.+234    	; 0x1424 <CANReceiveCallback+0x28c>
    133a:	44 23       	and	r20, r20
    133c:	09 f4       	brne	.+2      	; 0x1340 <CANReceiveCallback+0x1a8>
    133e:	72 c0       	rjmp	.+228    	; 0x1424 <CANReceiveCallback+0x28c>
    1340:	20 81       	ld	r18, Z
    1342:	91 11       	cpse	r25, r1
    1344:	08 c0       	rjmp	.+16     	; 0x1356 <CANReceiveCallback+0x1be>
    1346:	8a 30       	cpi	r24, 0x0A	; 10
    1348:	09 f0       	breq	.+2      	; 0x134c <CANReceiveCallback+0x1b4>
    134a:	6c c0       	rjmp	.+216    	; 0x1424 <CANReceiveCallback+0x28c>
    134c:	90 91 21 03 	lds	r25, 0x0321	; 0x800321 <sg_bModuleRegistered>
    1350:	99 23       	and	r25, r25
    1352:	09 f4       	brne	.+2      	; 0x1356 <CANReceiveCallback+0x1be>
    1354:	67 c0       	rjmp	.+206    	; 0x1424 <CANReceiveCallback+0x28c>
    1356:	90 91 27 03 	lds	r25, 0x0327	; 0x800327 <sg_u8ModuleRegistrationID>
    135a:	29 13       	cpse	r18, r25
    135c:	63 c0       	rjmp	.+198    	; 0x1424 <CANReceiveCallback+0x28c>
    135e:	8a 30       	cpi	r24, 0x0A	; 10
    1360:	a9 f4       	brne	.+42     	; 0x138c <CANReceiveCallback+0x1f4>
    1362:	41 30       	cpi	r20, 0x01	; 1
    1364:	09 f0       	breq	.+2      	; 0x1368 <CANReceiveCallback+0x1d0>
    1366:	5e c0       	rjmp	.+188    	; 0x1424 <CANReceiveCallback+0x28c>
    1368:	80 91 83 09 	lds	r24, 0x0983	; 0x800983 <sg_bIgnoreStatusRequests>
    136c:	81 11       	cpse	r24, r1
    136e:	5a c0       	rjmp	.+180    	; 0x1424 <CANReceiveCallback+0x28c>
    1370:	89 ed       	ldi	r24, 0xD9	; 217
    1372:	91 e0       	ldi	r25, 0x01	; 1
    1374:	a0 e0       	ldi	r26, 0x00	; 0
    1376:	af 93       	push	r26
    1378:	9f 93       	push	r25
    137a:	8f 93       	push	r24
    137c:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <DebugOut>
    1380:	0e 94 bc 27 	call	0x4f78	; 0x4f78 <SendModuleControllerStatus>
    1384:	0f 90       	pop	r0
    1386:	0f 90       	pop	r0
    1388:	0f 90       	pop	r0
    138a:	4c c0       	rjmp	.+152    	; 0x1424 <CANReceiveCallback+0x28c>
    138c:	8b 30       	cpi	r24, 0x0B	; 11
    138e:	f9 f4       	brne	.+62     	; 0x13ce <CANReceiveCallback+0x236>
    1390:	43 30       	cpi	r20, 0x03	; 3
    1392:	09 f0       	breq	.+2      	; 0x1396 <CANReceiveCallback+0x1fe>
    1394:	47 c0       	rjmp	.+142    	; 0x1424 <CANReceiveCallback+0x28c>
    1396:	80 91 1d 03 	lds	r24, 0x031D	; 0x80031d <sg_bSendCellStatus>
    139a:	81 11       	cpse	r24, r1
    139c:	43 c0       	rjmp	.+134    	; 0x1424 <CANReceiveCallback+0x28c>
    139e:	81 81       	ldd	r24, Z+1	; 0x01
    13a0:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <sg_sFrame+0x15>
    13a4:	89 17       	cp	r24, r25
    13a6:	f0 f5       	brcc	.+124    	; 0x1424 <CANReceiveCallback+0x28c>
    13a8:	80 93 23 03 	sts	0x0323, r24	; 0x800323 <sg_u8CellStatus>
    13ac:	90 91 23 03 	lds	r25, 0x0323	; 0x800323 <sg_u8CellStatus>
    13b0:	9f 5f       	subi	r25, 0xFF	; 255
    13b2:	90 93 24 03 	sts	0x0324, r25	; 0x800324 <sg_u8CellStatusTarget>
    13b6:	8f 3f       	cpi	r24, 0xFF	; 255
    13b8:	31 f4       	brne	.+12     	; 0x13c6 <CANReceiveCallback+0x22e>
    13ba:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <sg_sFrame+0x15>
    13be:	80 93 24 03 	sts	0x0324, r24	; 0x800324 <sg_u8CellStatusTarget>
    13c2:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <sg_u8CellStatus>
    13c6:	81 e0       	ldi	r24, 0x01	; 1
    13c8:	80 93 1d 03 	sts	0x031D, r24	; 0x80031d <sg_bSendCellStatus>
    13cc:	2b c0       	rjmp	.+86     	; 0x1424 <CANReceiveCallback+0x28c>
    13ce:	8c 30       	cpi	r24, 0x0C	; 12
    13d0:	49 f4       	brne	.+18     	; 0x13e4 <CANReceiveCallback+0x24c>
    13d2:	10 92 7f 09 	sts	0x097F, r1	; 0x80097f <sg_u8TicksSinceLastPackControllerMessage>
    13d6:	42 30       	cpi	r20, 0x02	; 2
    13d8:	29 f5       	brne	.+74     	; 0x1424 <CANReceiveCallback+0x28c>
    13da:	81 81       	ldd	r24, Z+1	; 0x01
    13dc:	8f 70       	andi	r24, 0x0F	; 15
    13de:	0e 94 09 28 	call	0x5012	; 0x5012 <ModuleControllerStateSet>
    13e2:	20 c0       	rjmp	.+64     	; 0x1424 <CANReceiveCallback+0x28c>
    13e4:	85 30       	cpi	r24, 0x05	; 5
    13e6:	21 f4       	brne	.+8      	; 0x13f0 <CANReceiveCallback+0x258>
    13e8:	81 e0       	ldi	r24, 0x01	; 1
    13ea:	80 93 1c 03 	sts	0x031C, r24	; 0x80031c <sg_bSendHardwareDetail>
    13ee:	1a c0       	rjmp	.+52     	; 0x1424 <CANReceiveCallback+0x28c>
    13f0:	8e 30       	cpi	r24, 0x0E	; 14
    13f2:	c1 f4       	brne	.+48     	; 0x1424 <CANReceiveCallback+0x28c>
    13f4:	1f 92       	push	r1
    13f6:	2f 93       	push	r18
    13f8:	8e ef       	ldi	r24, 0xFE	; 254
    13fa:	91 e0       	ldi	r25, 0x01	; 1
    13fc:	a0 e0       	ldi	r26, 0x00	; 0
    13fe:	af 93       	push	r26
    1400:	9f 93       	push	r25
    1402:	8f 93       	push	r24
    1404:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <DebugOut>
    1408:	10 92 27 03 	sts	0x0327, r1	; 0x800327 <sg_u8ModuleRegistrationID>
    140c:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <sg_bModuleRegistered>
    1410:	10 92 83 09 	sts	0x0983, r1	; 0x800983 <sg_bIgnoreStatusRequests>
    1414:	80 e0       	ldi	r24, 0x00	; 0
    1416:	0e 94 09 28 	call	0x5012	; 0x5012 <ModuleControllerStateSet>
    141a:	0f 90       	pop	r0
    141c:	0f 90       	pop	r0
    141e:	0f 90       	pop	r0
    1420:	0f 90       	pop	r0
    1422:	0f 90       	pop	r0
    1424:	cf 91       	pop	r28
    1426:	ff 90       	pop	r15
    1428:	ef 90       	pop	r14
    142a:	df 90       	pop	r13
    142c:	cf 90       	pop	r12
    142e:	08 95       	ret

Disassembly of section .text.ControllerStatusMessagesSend:

00000810 <ControllerStatusMessagesSend>:
 810:	cf 92       	push	r12
 812:	df 92       	push	r13
 814:	ef 92       	push	r14
 816:	ff 92       	push	r15
 818:	0f 93       	push	r16
 81a:	1f 93       	push	r17
 81c:	cf 93       	push	r28
 81e:	df 93       	push	r29
 820:	00 d0       	rcall	.+0      	; 0x822 <ControllerStatusMessagesSend+0x12>
 822:	00 d0       	rcall	.+0      	; 0x824 <ControllerStatusMessagesSend+0x14>
 824:	cd b7       	in	r28, 0x3d	; 61
 826:	de b7       	in	r29, 0x3e	; 62
 828:	8c 01       	movw	r16, r24
 82a:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <sg_bSendTimeRequest>
 82e:	88 23       	and	r24, r24
 830:	69 f0       	breq	.+26     	; 0x84c <ControllerStatusMessagesSend+0x3c>
 832:	88 e0       	ldi	r24, 0x08	; 8
 834:	d8 01       	movw	r26, r16
 836:	1d 92       	st	X+, r1
 838:	8a 95       	dec	r24
 83a:	e9 f7       	brne	.-6      	; 0x836 <ControllerStatusMessagesSend+0x26>
 83c:	48 e0       	ldi	r20, 0x08	; 8
 83e:	b8 01       	movw	r22, r16
 840:	88 e0       	ldi	r24, 0x08	; 8
 842:	0e 94 55 24 	call	0x48aa	; 0x48aa <CANSendMessage>
 846:	81 11       	cpse	r24, r1
 848:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <sg_bSendTimeRequest>
 84c:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <sg_bSendModuleControllerStatus>
 850:	88 23       	and	r24, r24
 852:	09 f4       	brne	.+2      	; 0x856 <ControllerStatusMessagesSend+0x46>
 854:	06 c1       	rjmp	.+524    	; 0xa62 <ControllerStatusMessagesSend+0x252>
 856:	80 91 7b 09 	lds	r24, 0x097B	; 0x80097b <sg_u8ControllerStatusMsgCount>
 85a:	81 11       	cpse	r24, r1
 85c:	80 c0       	rjmp	.+256    	; 0x95e <ControllerStatusMessagesSend+0x14e>
 85e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
 862:	8f 70       	andi	r24, 0x0F	; 15
 864:	f8 01       	movw	r30, r16
 866:	80 83       	st	Z, r24
 868:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <sg_u8SOC>
 86c:	81 83       	std	Z+1, r24	; 0x01
 86e:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <sg_u8SOH>
 872:	82 83       	std	Z+2, r24	; 0x02
 874:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <sg_sFrame+0x15>
 878:	83 83       	std	Z+3, r24	; 0x03
 87a:	84 e0       	ldi	r24, 0x04	; 4
 87c:	34 96       	adiw	r30, 0x04	; 4
 87e:	df 01       	movw	r26, r30
 880:	1d 92       	st	X+, r1
 882:	8a 95       	dec	r24
 884:	e9 f7       	brne	.-6      	; 0x880 <ControllerStatusMessagesSend+0x70>
 886:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <sg_sFrame+0x49>
 88a:	88 23       	and	r24, r24
 88c:	79 f0       	breq	.+30     	; 0x8ac <ControllerStatusMessagesSend+0x9c>
 88e:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <sg_sFrame+0x4c>
 892:	88 23       	and	r24, r24
 894:	71 f0       	breq	.+28     	; 0x8b2 <ControllerStatusMessagesSend+0xa2>
 896:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
 89a:	83 30       	cpi	r24, 0x03	; 3
 89c:	69 f4       	brne	.+26     	; 0x8b8 <ControllerStatusMessagesSend+0xa8>
 89e:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <ModuleCurrentConvertReadings>
 8a2:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <sg_sFrame+0x30>
 8a6:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <sg_sFrame+0x31>
 8aa:	08 c0       	rjmp	.+16     	; 0x8bc <ControllerStatusMessagesSend+0xac>
 8ac:	80 e0       	ldi	r24, 0x00	; 0
 8ae:	90 e8       	ldi	r25, 0x80	; 128
 8b0:	05 c0       	rjmp	.+10     	; 0x8bc <ControllerStatusMessagesSend+0xac>
 8b2:	80 e0       	ldi	r24, 0x00	; 0
 8b4:	90 e8       	ldi	r25, 0x80	; 128
 8b6:	02 c0       	rjmp	.+4      	; 0x8bc <ControllerStatusMessagesSend+0xac>
 8b8:	80 e0       	ldi	r24, 0x00	; 0
 8ba:	90 e8       	ldi	r25, 0x80	; 128
 8bc:	f8 01       	movw	r30, r16
 8be:	84 83       	std	Z+4, r24	; 0x04
 8c0:	95 83       	std	Z+5, r25	; 0x05
 8c2:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <sg_sFrame+0x46>
 8c6:	88 23       	and	r24, r24
 8c8:	79 f0       	breq	.+30     	; 0x8e8 <ControllerStatusMessagesSend+0xd8>
 8ca:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <sg_sFrame+0x47>
 8ce:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <sg_sFrame+0x48>
 8d2:	4f ef       	ldi	r20, 0xFF	; 255
 8d4:	53 e0       	ldi	r21, 0x03	; 3
 8d6:	60 e0       	ldi	r22, 0x00	; 0
 8d8:	70 e0       	ldi	r23, 0x00	; 0
 8da:	9a 01       	movw	r18, r20
 8dc:	ab 01       	movw	r20, r22
 8de:	28 1b       	sub	r18, r24
 8e0:	39 0b       	sbc	r19, r25
 8e2:	41 09       	sbc	r20, r1
 8e4:	51 09       	sbc	r21, r1
 8e6:	03 c0       	rjmp	.+6      	; 0x8ee <ControllerStatusMessagesSend+0xde>
 8e8:	20 e0       	ldi	r18, 0x00	; 0
 8ea:	30 e0       	ldi	r19, 0x00	; 0
 8ec:	a9 01       	movw	r20, r18
 8ee:	ec e0       	ldi	r30, 0x0C	; 12
 8f0:	f1 e0       	ldi	r31, 0x01	; 1
 8f2:	a5 a1       	ldd	r26, Z+37	; 0x25
 8f4:	b6 a1       	ldd	r27, Z+38	; 0x26
 8f6:	0e 94 cc 27 	call	0x4f98	; 0x4f98 <__mulshisi3>
 8fa:	dc 01       	movw	r26, r24
 8fc:	cb 01       	movw	r24, r22
 8fe:	68 94       	set
 900:	16 f8       	bld	r1, 6
 902:	b6 95       	lsr	r27
 904:	a7 95       	ror	r26
 906:	97 95       	ror	r25
 908:	87 95       	ror	r24
 90a:	16 94       	lsr	r1
 90c:	d1 f7       	brne	.-12     	; 0x902 <ControllerStatusMessagesSend+0xf2>
 90e:	c5 8c       	ldd	r12, Z+29	; 0x1d
 910:	d6 8c       	ldd	r13, Z+30	; 0x1e
 912:	e7 8c       	ldd	r14, Z+31	; 0x1f
 914:	f0 a0       	ldd	r15, Z+32	; 0x20
 916:	bc 01       	movw	r22, r24
 918:	cd 01       	movw	r24, r26
 91a:	6c 0d       	add	r22, r12
 91c:	7d 1d       	adc	r23, r13
 91e:	8e 1d       	adc	r24, r14
 920:	9f 1d       	adc	r25, r15
 922:	2f e0       	ldi	r18, 0x0F	; 15
 924:	30 e0       	ldi	r19, 0x00	; 0
 926:	40 e0       	ldi	r20, 0x00	; 0
 928:	50 e0       	ldi	r21, 0x00	; 0
 92a:	0e 94 d0 22 	call	0x45a0	; 0x45a0 <__udivmodsi4>
 92e:	20 93 4e 01 	sts	0x014E, r18	; 0x80014e <sg_sFrame+0x42>
 932:	30 93 4f 01 	sts	0x014F, r19	; 0x80014f <sg_sFrame+0x43>
 936:	40 93 50 01 	sts	0x0150, r20	; 0x800150 <sg_sFrame+0x44>
 93a:	50 93 51 01 	sts	0x0151, r21	; 0x800151 <sg_sFrame+0x45>
 93e:	d8 01       	movw	r26, r16
 940:	16 96       	adiw	r26, 0x06	; 6
 942:	2c 93       	st	X, r18
 944:	16 97       	sbiw	r26, 0x06	; 6
 946:	17 96       	adiw	r26, 0x07	; 7
 948:	3c 93       	st	X, r19
 94a:	48 e0       	ldi	r20, 0x08	; 8
 94c:	b8 01       	movw	r22, r16
 94e:	81 e0       	ldi	r24, 0x01	; 1
 950:	0e 94 55 24 	call	0x48aa	; 0x48aa <CANSendMessage>
 954:	88 23       	and	r24, r24
 956:	09 f4       	brne	.+2      	; 0x95a <ControllerStatusMessagesSend+0x14a>
 958:	6b c0       	rjmp	.+214    	; 0xa30 <ControllerStatusMessagesSend+0x220>
 95a:	81 e0       	ldi	r24, 0x01	; 1
 95c:	70 c0       	rjmp	.+224    	; 0xa3e <ControllerStatusMessagesSend+0x22e>
 95e:	81 30       	cpi	r24, 0x01	; 1
 960:	c1 f5       	brne	.+112    	; 0x9d2 <ControllerStatusMessagesSend+0x1c2>
 962:	ec e0       	ldi	r30, 0x0C	; 12
 964:	f1 e0       	ldi	r31, 0x01	; 1
 966:	82 ad       	ldd	r24, Z+58	; 0x3a
 968:	93 ad       	ldd	r25, Z+59	; 0x3b
 96a:	d8 01       	movw	r26, r16
 96c:	8c 93       	st	X, r24
 96e:	82 ad       	ldd	r24, Z+58	; 0x3a
 970:	93 ad       	ldd	r25, Z+59	; 0x3b
 972:	11 96       	adiw	r26, 0x01	; 1
 974:	9c 93       	st	X, r25
 976:	11 97       	sbiw	r26, 0x01	; 1
 978:	80 ad       	ldd	r24, Z+56	; 0x38
 97a:	91 ad       	ldd	r25, Z+57	; 0x39
 97c:	12 96       	adiw	r26, 0x02	; 2
 97e:	8c 93       	st	X, r24
 980:	12 97       	sbiw	r26, 0x02	; 2
 982:	80 ad       	ldd	r24, Z+56	; 0x38
 984:	91 ad       	ldd	r25, Z+57	; 0x39
 986:	13 96       	adiw	r26, 0x03	; 3
 988:	9c 93       	st	X, r25
 98a:	13 97       	sbiw	r26, 0x03	; 3
 98c:	84 ad       	ldd	r24, Z+60	; 0x3c
 98e:	95 ad       	ldd	r25, Z+61	; 0x3d
 990:	14 96       	adiw	r26, 0x04	; 4
 992:	8c 93       	st	X, r24
 994:	14 97       	sbiw	r26, 0x04	; 4
 996:	84 ad       	ldd	r24, Z+60	; 0x3c
 998:	95 ad       	ldd	r25, Z+61	; 0x3d
 99a:	15 96       	adiw	r26, 0x05	; 5
 99c:	9c 93       	st	X, r25
 99e:	60 91 4a 01 	lds	r22, 0x014A	; 0x80014a <sg_sFrame+0x3e>
 9a2:	70 91 4b 01 	lds	r23, 0x014B	; 0x80014b <sg_sFrame+0x3f>
 9a6:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <sg_sFrame+0x40>
 9aa:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <sg_sFrame+0x41>
 9ae:	2f e0       	ldi	r18, 0x0F	; 15
 9b0:	30 e0       	ldi	r19, 0x00	; 0
 9b2:	40 e0       	ldi	r20, 0x00	; 0
 9b4:	50 e0       	ldi	r21, 0x00	; 0
 9b6:	0e 94 d0 22 	call	0x45a0	; 0x45a0 <__udivmodsi4>
 9ba:	f8 01       	movw	r30, r16
 9bc:	26 83       	std	Z+6, r18	; 0x06
 9be:	37 83       	std	Z+7, r19	; 0x07
 9c0:	48 e0       	ldi	r20, 0x08	; 8
 9c2:	b8 01       	movw	r22, r16
 9c4:	82 e0       	ldi	r24, 0x02	; 2
 9c6:	0e 94 55 24 	call	0x48aa	; 0x48aa <CANSendMessage>
 9ca:	88 23       	and	r24, r24
 9cc:	99 f1       	breq	.+102    	; 0xa34 <ControllerStatusMessagesSend+0x224>
 9ce:	81 e0       	ldi	r24, 0x01	; 1
 9d0:	36 c0       	rjmp	.+108    	; 0xa3e <ControllerStatusMessagesSend+0x22e>
 9d2:	82 30       	cpi	r24, 0x02	; 2
 9d4:	89 f5       	brne	.+98     	; 0xa38 <ControllerStatusMessagesSend+0x228>
 9d6:	ec e0       	ldi	r30, 0x0C	; 12
 9d8:	f1 e0       	ldi	r31, 0x01	; 1
 9da:	84 a9       	ldd	r24, Z+52	; 0x34
 9dc:	95 a9       	ldd	r25, Z+53	; 0x35
 9de:	d8 01       	movw	r26, r16
 9e0:	8c 93       	st	X, r24
 9e2:	84 a9       	ldd	r24, Z+52	; 0x34
 9e4:	95 a9       	ldd	r25, Z+53	; 0x35
 9e6:	11 96       	adiw	r26, 0x01	; 1
 9e8:	9c 93       	st	X, r25
 9ea:	11 97       	sbiw	r26, 0x01	; 1
 9ec:	82 a9       	ldd	r24, Z+50	; 0x32
 9ee:	93 a9       	ldd	r25, Z+51	; 0x33
 9f0:	12 96       	adiw	r26, 0x02	; 2
 9f2:	8c 93       	st	X, r24
 9f4:	12 97       	sbiw	r26, 0x02	; 2
 9f6:	82 a9       	ldd	r24, Z+50	; 0x32
 9f8:	93 a9       	ldd	r25, Z+51	; 0x33
 9fa:	13 96       	adiw	r26, 0x03	; 3
 9fc:	9c 93       	st	X, r25
 9fe:	13 97       	sbiw	r26, 0x03	; 3
 a00:	86 a9       	ldd	r24, Z+54	; 0x36
 a02:	97 a9       	ldd	r25, Z+55	; 0x37
 a04:	14 96       	adiw	r26, 0x04	; 4
 a06:	8c 93       	st	X, r24
 a08:	14 97       	sbiw	r26, 0x04	; 4
 a0a:	86 a9       	ldd	r24, Z+54	; 0x36
 a0c:	97 a9       	ldd	r25, Z+55	; 0x37
 a0e:	15 96       	adiw	r26, 0x05	; 5
 a10:	9c 93       	st	X, r25
 a12:	15 97       	sbiw	r26, 0x05	; 5
 a14:	16 96       	adiw	r26, 0x06	; 6
 a16:	1c 92       	st	X, r1
 a18:	16 97       	sbiw	r26, 0x06	; 6
 a1a:	17 96       	adiw	r26, 0x07	; 7
 a1c:	1c 92       	st	X, r1
 a1e:	48 e0       	ldi	r20, 0x08	; 8
 a20:	b8 01       	movw	r22, r16
 a22:	83 e0       	ldi	r24, 0x03	; 3
 a24:	0e 94 55 24 	call	0x48aa	; 0x48aa <CANSendMessage>
 a28:	88 23       	and	r24, r24
 a2a:	41 f0       	breq	.+16     	; 0xa3c <ControllerStatusMessagesSend+0x22c>
 a2c:	81 e0       	ldi	r24, 0x01	; 1
 a2e:	07 c0       	rjmp	.+14     	; 0xa3e <ControllerStatusMessagesSend+0x22e>
 a30:	80 e0       	ldi	r24, 0x00	; 0
 a32:	05 c0       	rjmp	.+10     	; 0xa3e <ControllerStatusMessagesSend+0x22e>
 a34:	80 e0       	ldi	r24, 0x00	; 0
 a36:	03 c0       	rjmp	.+6      	; 0xa3e <ControllerStatusMessagesSend+0x22e>
 a38:	81 e0       	ldi	r24, 0x01	; 1
 a3a:	01 c0       	rjmp	.+2      	; 0xa3e <ControllerStatusMessagesSend+0x22e>
 a3c:	80 e0       	ldi	r24, 0x00	; 0
 a3e:	88 23       	and	r24, r24
 a40:	81 f0       	breq	.+32     	; 0xa62 <ControllerStatusMessagesSend+0x252>
 a42:	80 91 7b 09 	lds	r24, 0x097B	; 0x80097b <sg_u8ControllerStatusMsgCount>
 a46:	8f 5f       	subi	r24, 0xFF	; 255
 a48:	80 93 7b 09 	sts	0x097B, r24	; 0x80097b <sg_u8ControllerStatusMsgCount>
 a4c:	83 30       	cpi	r24, 0x03	; 3
 a4e:	48 f0       	brcs	.+18     	; 0xa62 <ControllerStatusMessagesSend+0x252>
 a50:	10 92 7b 09 	sts	0x097B, r1	; 0x80097b <sg_u8ControllerStatusMsgCount>
 a54:	10 92 1e 03 	sts	0x031E, r1	; 0x80031e <sg_bSendModuleControllerStatus>
 a58:	10 92 83 09 	sts	0x0983, r1	; 0x800983 <sg_bIgnoreStatusRequests>
 a5c:	81 e0       	ldi	r24, 0x01	; 1
 a5e:	80 93 1b 03 	sts	0x031B, r24	; 0x80031b <sg_bSendCellCommStatus>
 a62:	80 91 1d 03 	lds	r24, 0x031D	; 0x80031d <sg_bSendCellStatus>
 a66:	88 23       	and	r24, r24
 a68:	09 f4       	brne	.+2      	; 0xa6c <ControllerStatusMessagesSend+0x25c>
 a6a:	7d c0       	rjmp	.+250    	; 0xb66 <ControllerStatusMessagesSend+0x356>
 a6c:	1c 82       	std	Y+4, r1	; 0x04
 a6e:	1b 82       	std	Y+3, r1	; 0x03
 a70:	1a 82       	std	Y+2, r1	; 0x02
 a72:	19 82       	std	Y+1, r1	; 0x01
 a74:	e0 90 23 03 	lds	r14, 0x0323	; 0x800323 <sg_u8CellStatus>
 a78:	f0 90 3b 01 	lds	r15, 0x013B	; 0x80013b <sg_sFrame+0x2f>
 a7c:	ef 14       	cp	r14, r15
 a7e:	30 f5       	brcc	.+76     	; 0xacc <ControllerStatusMessagesSend+0x2bc>
 a80:	ff 20       	and	r15, r15
 a82:	21 f1       	breq	.+72     	; 0xacc <ControllerStatusMessagesSend+0x2bc>
 a84:	ef 2d       	mov	r30, r15
 a86:	ee 19       	sub	r30, r14
 a88:	e1 50       	subi	r30, 0x01	; 1
 a8a:	ec 36       	cpi	r30, 0x6C	; 108
 a8c:	f8 f4       	brcc	.+62     	; 0xacc <ControllerStatusMessagesSend+0x2bc>
 a8e:	f0 e0       	ldi	r31, 0x00	; 0
 a90:	75 96       	adiw	r30, 0x15	; 21
 a92:	ee 0f       	add	r30, r30
 a94:	ff 1f       	adc	r31, r31
 a96:	ee 0f       	add	r30, r30
 a98:	ff 1f       	adc	r31, r31
 a9a:	e4 5f       	subi	r30, 0xF4	; 244
 a9c:	fe 4f       	sbci	r31, 0xFE	; 254
 a9e:	81 81       	ldd	r24, Z+1	; 0x01
 aa0:	92 81       	ldd	r25, Z+2	; 0x02
 aa2:	c3 80       	ldd	r12, Z+3	; 0x03
 aa4:	d4 80       	ldd	r13, Z+4	; 0x04
 aa6:	be 01       	movw	r22, r28
 aa8:	6d 5f       	subi	r22, 0xFD	; 253
 aaa:	7f 4f       	sbci	r23, 0xFF	; 255
 aac:	0e 94 5d 20 	call	0x40ba	; 0x40ba <CellDataConvertVoltage>
 ab0:	81 11       	cpse	r24, r1
 ab2:	02 c0       	rjmp	.+4      	; 0xab8 <ControllerStatusMessagesSend+0x2a8>
 ab4:	1c 82       	std	Y+4, r1	; 0x04
 ab6:	1b 82       	std	Y+3, r1	; 0x03
 ab8:	be 01       	movw	r22, r28
 aba:	6f 5f       	subi	r22, 0xFF	; 255
 abc:	7f 4f       	sbci	r23, 0xFF	; 255
 abe:	c6 01       	movw	r24, r12
 ac0:	0e 94 c9 1f 	call	0x3f92	; 0x3f92 <CellDataConvertTemperature>
 ac4:	81 11       	cpse	r24, r1
 ac6:	02 c0       	rjmp	.+4      	; 0xacc <ControllerStatusMessagesSend+0x2bc>
 ac8:	1a 82       	std	Y+2, r1	; 0x02
 aca:	19 82       	std	Y+1, r1	; 0x01
 acc:	f8 01       	movw	r30, r16
 ace:	e0 82       	st	Z, r14
 ad0:	f1 82       	std	Z+1, r15	; 0x01
 ad2:	99 81       	ldd	r25, Y+1	; 0x01
 ad4:	8a 81       	ldd	r24, Y+2	; 0x02
 ad6:	92 83       	std	Z+2, r25	; 0x02
 ad8:	83 83       	std	Z+3, r24	; 0x03
 ada:	2b 81       	ldd	r18, Y+3	; 0x03
 adc:	3c 81       	ldd	r19, Y+4	; 0x04
 ade:	24 83       	std	Z+4, r18	; 0x04
 ae0:	35 83       	std	Z+5, r19	; 0x05
 ae2:	21 15       	cp	r18, r1
 ae4:	31 05       	cpc	r19, r1
 ae6:	59 f0       	breq	.+22     	; 0xafe <ControllerStatusMessagesSend+0x2ee>
 ae8:	c9 01       	movw	r24, r18
 aea:	64 e0       	ldi	r22, 0x04	; 4
 aec:	70 e1       	ldi	r23, 0x10	; 16
 aee:	0e 94 2e 25 	call	0x4a5c	; 0x4a5c <__udivmodhi4>
 af2:	84 e6       	ldi	r24, 0x64	; 100
 af4:	68 9f       	mul	r22, r24
 af6:	60 2d       	mov	r22, r0
 af8:	11 24       	eor	r1, r1
 afa:	66 83       	std	Z+6, r22	; 0x06
 afc:	01 c0       	rjmp	.+2      	; 0xb00 <ControllerStatusMessagesSend+0x2f0>
 afe:	16 82       	std	Z+6, r1	; 0x06
 b00:	ec e0       	ldi	r30, 0x0C	; 12
 b02:	f1 e0       	ldi	r31, 0x01	; 1
 b04:	40 ad       	ldd	r20, Z+56	; 0x38
 b06:	51 ad       	ldd	r21, Z+57	; 0x39
 b08:	82 ad       	ldd	r24, Z+58	; 0x3a
 b0a:	93 ad       	ldd	r25, Z+59	; 0x3b
 b0c:	84 17       	cp	r24, r20
 b0e:	95 07       	cpc	r25, r21
 b10:	98 f4       	brcc	.+38     	; 0xb38 <ControllerStatusMessagesSend+0x328>
 b12:	21 15       	cp	r18, r1
 b14:	31 05       	cpc	r19, r1
 b16:	81 f0       	breq	.+32     	; 0xb38 <ControllerStatusMessagesSend+0x328>
 b18:	60 ad       	ldd	r22, Z+56	; 0x38
 b1a:	71 ad       	ldd	r23, Z+57	; 0x39
 b1c:	82 ad       	ldd	r24, Z+58	; 0x3a
 b1e:	93 ad       	ldd	r25, Z+59	; 0x3b
 b20:	68 1b       	sub	r22, r24
 b22:	79 0b       	sbc	r23, r25
 b24:	c9 01       	movw	r24, r18
 b26:	0e 94 2e 25 	call	0x4a5c	; 0x4a5c <__udivmodhi4>
 b2a:	84 e6       	ldi	r24, 0x64	; 100
 b2c:	68 9f       	mul	r22, r24
 b2e:	60 2d       	mov	r22, r0
 b30:	11 24       	eor	r1, r1
 b32:	f8 01       	movw	r30, r16
 b34:	67 83       	std	Z+7, r22	; 0x07
 b36:	03 c0       	rjmp	.+6      	; 0xb3e <ControllerStatusMessagesSend+0x32e>
 b38:	d8 01       	movw	r26, r16
 b3a:	17 96       	adiw	r26, 0x07	; 7
 b3c:	1c 92       	st	X, r1
 b3e:	48 e0       	ldi	r20, 0x08	; 8
 b40:	b8 01       	movw	r22, r16
 b42:	84 e0       	ldi	r24, 0x04	; 4
 b44:	0e 94 55 24 	call	0x48aa	; 0x48aa <CANSendMessage>
 b48:	88 23       	and	r24, r24
 b4a:	69 f0       	breq	.+26     	; 0xb66 <ControllerStatusMessagesSend+0x356>
 b4c:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <sg_u8CellStatus>
 b50:	8f 5f       	subi	r24, 0xFF	; 255
 b52:	80 93 23 03 	sts	0x0323, r24	; 0x800323 <sg_u8CellStatus>
 b56:	90 91 23 03 	lds	r25, 0x0323	; 0x800323 <sg_u8CellStatus>
 b5a:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <sg_u8CellStatusTarget>
 b5e:	98 17       	cp	r25, r24
 b60:	10 f0       	brcs	.+4      	; 0xb66 <ControllerStatusMessagesSend+0x356>
 b62:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <sg_bSendCellStatus>
 b66:	80 91 1b 03 	lds	r24, 0x031B	; 0x80031b <sg_bSendCellCommStatus>
 b6a:	88 23       	and	r24, r24
 b6c:	89 f1       	breq	.+98     	; 0xbd0 <ControllerStatusMessagesSend+0x3c0>
 b6e:	ec e0       	ldi	r30, 0x0C	; 12
 b70:	f1 e0       	ldi	r31, 0x01	; 1
 b72:	83 89       	ldd	r24, Z+19	; 0x13
 b74:	d8 01       	movw	r26, r16
 b76:	8c 93       	st	X, r24
 b78:	84 89       	ldd	r24, Z+20	; 0x14
 b7a:	11 96       	adiw	r26, 0x01	; 1
 b7c:	8c 93       	st	X, r24
 b7e:	11 97       	sbiw	r26, 0x01	; 1
 b80:	80 a5       	ldd	r24, Z+40	; 0x28
 b82:	91 a5       	ldd	r25, Z+41	; 0x29
 b84:	12 96       	adiw	r26, 0x02	; 2
 b86:	8c 93       	st	X, r24
 b88:	12 97       	sbiw	r26, 0x02	; 2
 b8a:	80 a5       	ldd	r24, Z+40	; 0x28
 b8c:	91 a5       	ldd	r25, Z+41	; 0x29
 b8e:	13 96       	adiw	r26, 0x03	; 3
 b90:	9c 93       	st	X, r25
 b92:	13 97       	sbiw	r26, 0x03	; 3
 b94:	86 a5       	ldd	r24, Z+46	; 0x2e
 b96:	14 96       	adiw	r26, 0x04	; 4
 b98:	8c 93       	st	X, r24
 b9a:	14 97       	sbiw	r26, 0x04	; 4
 b9c:	82 a5       	ldd	r24, Z+42	; 0x2a
 b9e:	8f 3f       	cpi	r24, 0xFF	; 255
 ba0:	31 f0       	breq	.+12     	; 0xbae <ControllerStatusMessagesSend+0x39e>
 ba2:	85 a5       	ldd	r24, Z+45	; 0x2d
 ba4:	92 a5       	ldd	r25, Z+42	; 0x2a
 ba6:	89 1b       	sub	r24, r25
 ba8:	15 96       	adiw	r26, 0x05	; 5
 baa:	8c 93       	st	X, r24
 bac:	03 c0       	rjmp	.+6      	; 0xbb4 <ControllerStatusMessagesSend+0x3a4>
 bae:	8f ef       	ldi	r24, 0xFF	; 255
 bb0:	f8 01       	movw	r30, r16
 bb2:	85 83       	std	Z+5, r24	; 0x05
 bb4:	d8 01       	movw	r26, r16
 bb6:	16 96       	adiw	r26, 0x06	; 6
 bb8:	1c 92       	st	X, r1
 bba:	16 97       	sbiw	r26, 0x06	; 6
 bbc:	17 96       	adiw	r26, 0x07	; 7
 bbe:	1c 92       	st	X, r1
 bc0:	48 e0       	ldi	r20, 0x08	; 8
 bc2:	b8 01       	movw	r22, r16
 bc4:	86 e0       	ldi	r24, 0x06	; 6
 bc6:	0e 94 55 24 	call	0x48aa	; 0x48aa <CANSendMessage>
 bca:	81 11       	cpse	r24, r1
 bcc:	10 92 1b 03 	sts	0x031B, r1	; 0x80031b <sg_bSendCellCommStatus>
 bd0:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <sg_bSendHardwareDetail>
 bd4:	88 23       	and	r24, r24
 bd6:	89 f0       	breq	.+34     	; 0xbfa <ControllerStatusMessagesSend+0x3ea>
 bd8:	b8 01       	movw	r22, r16
 bda:	c8 01       	movw	r24, r16
 bdc:	02 96       	adiw	r24, 0x02	; 2
 bde:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <CurrentThresholdsGet>
 be2:	f8 01       	movw	r30, r16
 be4:	14 82       	std	Z+4, r1	; 0x04
 be6:	15 82       	std	Z+5, r1	; 0x05
 be8:	16 82       	std	Z+6, r1	; 0x06
 bea:	17 82       	std	Z+7, r1	; 0x07
 bec:	48 e0       	ldi	r20, 0x08	; 8
 bee:	b8 01       	movw	r22, r16
 bf0:	85 e0       	ldi	r24, 0x05	; 5
 bf2:	0e 94 55 24 	call	0x48aa	; 0x48aa <CANSendMessage>
 bf6:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <sg_bSendHardwareDetail>
 bfa:	0f 90       	pop	r0
 bfc:	0f 90       	pop	r0
 bfe:	0f 90       	pop	r0
 c00:	0f 90       	pop	r0
 c02:	df 91       	pop	r29
 c04:	cf 91       	pop	r28
 c06:	1f 91       	pop	r17
 c08:	0f 91       	pop	r16
 c0a:	ff 90       	pop	r15
 c0c:	ef 90       	pop	r14
 c0e:	df 90       	pop	r13
 c10:	cf 90       	pop	r12
 c12:	08 95       	ret

Disassembly of section .text.CellStringProcess:

00000eec <CellStringProcess>:
     eec:	3f 92       	push	r3
     eee:	4f 92       	push	r4
     ef0:	5f 92       	push	r5
     ef2:	6f 92       	push	r6
     ef4:	7f 92       	push	r7
     ef6:	8f 92       	push	r8
     ef8:	9f 92       	push	r9
     efa:	af 92       	push	r10
     efc:	bf 92       	push	r11
     efe:	cf 92       	push	r12
     f00:	df 92       	push	r13
     f02:	ef 92       	push	r14
     f04:	ff 92       	push	r15
     f06:	0f 93       	push	r16
     f08:	1f 93       	push	r17
     f0a:	cf 93       	push	r28
     f0c:	df 93       	push	r29
     f0e:	00 d0       	rcall	.+0      	; 0xf10 <CellStringProcess+0x24>
     f10:	00 d0       	rcall	.+0      	; 0xf12 <CellStringProcess+0x26>
     f12:	00 d0       	rcall	.+0      	; 0xf14 <CellStringProcess+0x28>
     f14:	cd b7       	in	r28, 0x3d	; 61
     f16:	de b7       	in	r29, 0x3e	; 62
     f18:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <sg_sFrame+0x2b>
     f1c:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <sg_sFrame+0x2c>
     f20:	89 2b       	or	r24, r25
     f22:	09 f4       	brne	.+2      	; 0xf26 <CellStringProcess+0x3a>
     f24:	10 c1       	rjmp	.+544    	; 0x1146 <__stack+0x47>
     f26:	ec e0       	ldi	r30, 0x0C	; 12
     f28:	f1 e0       	ldi	r31, 0x01	; 1
     f2a:	8f ef       	ldi	r24, 0xFF	; 255
     f2c:	82 a7       	std	Z+42, r24	; 0x2a
     f2e:	93 89       	ldd	r25, Z+19	; 0x13
     f30:	85 a5       	ldd	r24, Z+45	; 0x2d
     f32:	89 17       	cp	r24, r25
     f34:	28 f4       	brcc	.+10     	; 0xf40 <CellStringProcess+0x54>
     f36:	85 a5       	ldd	r24, Z+45	; 0x2d
     f38:	83 8b       	std	Z+19, r24	; 0x13
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	80 93 1b 03 	sts	0x031B, r24	; 0x80031b <sg_bSendCellCommStatus>
     f40:	ec e0       	ldi	r30, 0x0C	; 12
     f42:	f1 e0       	ldi	r31, 0x01	; 1
     f44:	94 89       	ldd	r25, Z+20	; 0x14
     f46:	85 a5       	ldd	r24, Z+45	; 0x2d
     f48:	98 17       	cp	r25, r24
     f4a:	28 f4       	brcc	.+10     	; 0xf56 <CellStringProcess+0x6a>
     f4c:	85 a5       	ldd	r24, Z+45	; 0x2d
     f4e:	84 8b       	std	Z+20, r24	; 0x14
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	80 93 1b 03 	sts	0x031B, r24	; 0x80031b <sg_bSendCellCommStatus>
     f56:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <sg_sFrame+0x2b>
     f5a:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <sg_sFrame+0x2c>
     f5e:	83 70       	andi	r24, 0x03	; 3
     f60:	99 27       	eor	r25, r25
     f62:	89 2b       	or	r24, r25
     f64:	61 f0       	breq	.+24     	; 0xf7e <CellStringProcess+0x92>
     f66:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <sg_sFrame+0x2e>
     f6a:	8f 3f       	cpi	r24, 0xFF	; 255
     f6c:	41 f0       	breq	.+16     	; 0xf7e <CellStringProcess+0x92>
     f6e:	ec e0       	ldi	r30, 0x0C	; 12
     f70:	f1 e0       	ldi	r31, 0x01	; 1
     f72:	86 a5       	ldd	r24, Z+46	; 0x2e
     f74:	8f 5f       	subi	r24, 0xFF	; 255
     f76:	86 a7       	std	Z+46, r24	; 0x2e
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	80 93 1b 03 	sts	0x031B, r24	; 0x80031b <sg_bSendCellCommStatus>
     f7e:	ec e0       	ldi	r30, 0x0C	; 12
     f80:	f1 e0       	ldi	r31, 0x01	; 1
     f82:	11 ae       	std	Z+57, r1	; 0x39
     f84:	10 ae       	std	Z+56, r1	; 0x38
     f86:	8f ef       	ldi	r24, 0xFF	; 255
     f88:	9f ef       	ldi	r25, 0xFF	; 255
     f8a:	93 af       	std	Z+59, r25	; 0x3b
     f8c:	82 af       	std	Z+58, r24	; 0x3a
     f8e:	15 ae       	std	Z+61, r1	; 0x3d
     f90:	14 ae       	std	Z+60, r1	; 0x3c
     f92:	80 e0       	ldi	r24, 0x00	; 0
     f94:	90 e8       	ldi	r25, 0x80	; 128
     f96:	93 ab       	std	Z+51, r25	; 0x33
     f98:	82 ab       	std	Z+50, r24	; 0x32
     f9a:	8f ef       	ldi	r24, 0xFF	; 255
     f9c:	9f e7       	ldi	r25, 0x7F	; 127
     f9e:	95 ab       	std	Z+53, r25	; 0x35
     fa0:	84 ab       	std	Z+52, r24	; 0x34
     fa2:	17 aa       	std	Z+55, r1	; 0x37
     fa4:	16 aa       	std	Z+54, r1	; 0x36
     fa6:	d1 2c       	mov	r13, r1
     fa8:	31 2c       	mov	r3, r1
     faa:	c1 2c       	mov	r12, r1
     fac:	41 2c       	mov	r4, r1
     fae:	51 2c       	mov	r5, r1
     fb0:	32 01       	movw	r6, r4
     fb2:	81 2c       	mov	r8, r1
     fb4:	91 2c       	mov	r9, r1
     fb6:	54 01       	movw	r10, r8
     fb8:	2f ef       	ldi	r18, 0xFF	; 255
     fba:	3f e7       	ldi	r19, 0x7F	; 127
     fbc:	3e 83       	std	Y+6, r19	; 0x06
     fbe:	2d 83       	std	Y+5, r18	; 0x05
     fc0:	80 e0       	ldi	r24, 0x00	; 0
     fc2:	90 e8       	ldi	r25, 0x80	; 128
     fc4:	9c 83       	std	Y+4, r25	; 0x04
     fc6:	8b 83       	std	Y+3, r24	; 0x03
     fc8:	6b c0       	rjmp	.+214    	; 0x10a0 <__DATA_REGION_LENGTH__+0xa0>
     fca:	0d 2d       	mov	r16, r13
     fcc:	10 e0       	ldi	r17, 0x00	; 0
     fce:	f8 01       	movw	r30, r16
     fd0:	75 96       	adiw	r30, 0x15	; 21
     fd2:	ee 0f       	add	r30, r30
     fd4:	ff 1f       	adc	r31, r31
     fd6:	ee 0f       	add	r30, r30
     fd8:	ff 1f       	adc	r31, r31
     fda:	e4 5f       	subi	r30, 0xF4	; 244
     fdc:	fe 4f       	sbci	r31, 0xFE	; 254
     fde:	81 81       	ldd	r24, Z+1	; 0x01
     fe0:	92 81       	ldd	r25, Z+2	; 0x02
     fe2:	9a 83       	std	Y+2, r25	; 0x02
     fe4:	89 83       	std	Y+1, r24	; 0x01
     fe6:	e3 80       	ldd	r14, Z+3	; 0x03
     fe8:	f4 80       	ldd	r15, Z+4	; 0x04
     fea:	60 e0       	ldi	r22, 0x00	; 0
     fec:	70 e0       	ldi	r23, 0x00	; 0
     fee:	c7 01       	movw	r24, r14
     ff0:	0e 94 c9 1f 	call	0x3f92	; 0x3f92 <CellDataConvertTemperature>
     ff4:	88 23       	and	r24, r24
     ff6:	f1 f0       	breq	.+60     	; 0x1034 <__DATA_REGION_LENGTH__+0x34>
     ff8:	f4 fe       	sbrs	r15, 4
     ffa:	03 c0       	rjmp	.+6      	; 0x1002 <__DATA_REGION_LENGTH__+0x2>
     ffc:	c7 01       	movw	r24, r14
     ffe:	90 6f       	ori	r25, 0xF0	; 240
    1000:	02 c0       	rjmp	.+4      	; 0x1006 <__DATA_REGION_LENGTH__+0x6>
    1002:	c7 01       	movw	r24, r14
    1004:	9f 77       	andi	r25, 0x7F	; 127
    1006:	2b 81       	ldd	r18, Y+3	; 0x03
    1008:	3c 81       	ldd	r19, Y+4	; 0x04
    100a:	28 17       	cp	r18, r24
    100c:	39 07       	cpc	r19, r25
    100e:	14 f4       	brge	.+4      	; 0x1014 <__DATA_REGION_LENGTH__+0x14>
    1010:	9c 83       	std	Y+4, r25	; 0x04
    1012:	8b 83       	std	Y+3, r24	; 0x03
    1014:	2d 81       	ldd	r18, Y+5	; 0x05
    1016:	3e 81       	ldd	r19, Y+6	; 0x06
    1018:	82 17       	cp	r24, r18
    101a:	93 07       	cpc	r25, r19
    101c:	14 f4       	brge	.+4      	; 0x1022 <__DATA_REGION_LENGTH__+0x22>
    101e:	9e 83       	std	Y+6, r25	; 0x06
    1020:	8d 83       	std	Y+5, r24	; 0x05
    1022:	09 2e       	mov	r0, r25
    1024:	00 0c       	add	r0, r0
    1026:	aa 0b       	sbc	r26, r26
    1028:	bb 0b       	sbc	r27, r27
    102a:	88 0e       	add	r8, r24
    102c:	99 1e       	adc	r9, r25
    102e:	aa 1e       	adc	r10, r26
    1030:	bb 1e       	adc	r11, r27
    1032:	33 94       	inc	r3
    1034:	f8 01       	movw	r30, r16
    1036:	75 96       	adiw	r30, 0x15	; 21
    1038:	ee 0f       	add	r30, r30
    103a:	ff 1f       	adc	r31, r31
    103c:	ee 0f       	add	r30, r30
    103e:	ff 1f       	adc	r31, r31
    1040:	e4 5f       	subi	r30, 0xF4	; 244
    1042:	fe 4f       	sbci	r31, 0xFE	; 254
    1044:	81 81       	ldd	r24, Z+1	; 0x01
    1046:	92 81       	ldd	r25, Z+2	; 0x02
    1048:	99 23       	and	r25, r25
    104a:	1c f4       	brge	.+6      	; 0x1052 <__DATA_REGION_LENGTH__+0x52>
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <sg_sFrame+0x27>
    1052:	be 01       	movw	r22, r28
    1054:	6f 5f       	subi	r22, 0xFF	; 255
    1056:	7f 4f       	sbci	r23, 0xFF	; 255
    1058:	89 81       	ldd	r24, Y+1	; 0x01
    105a:	9a 81       	ldd	r25, Y+2	; 0x02
    105c:	0e 94 5d 20 	call	0x40ba	; 0x40ba <CellDataConvertVoltage>
    1060:	88 23       	and	r24, r24
    1062:	e9 f0       	breq	.+58     	; 0x109e <__DATA_REGION_LENGTH__+0x9e>
    1064:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <sg_sFrame+0x38>
    1068:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <sg_sFrame+0x39>
    106c:	89 81       	ldd	r24, Y+1	; 0x01
    106e:	9a 81       	ldd	r25, Y+2	; 0x02
    1070:	28 17       	cp	r18, r24
    1072:	39 07       	cpc	r19, r25
    1074:	20 f4       	brcc	.+8      	; 0x107e <__DATA_REGION_LENGTH__+0x7e>
    1076:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <sg_sFrame+0x39>
    107a:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <sg_sFrame+0x38>
    107e:	20 91 46 01 	lds	r18, 0x0146	; 0x800146 <sg_sFrame+0x3a>
    1082:	30 91 47 01 	lds	r19, 0x0147	; 0x800147 <sg_sFrame+0x3b>
    1086:	82 17       	cp	r24, r18
    1088:	93 07       	cpc	r25, r19
    108a:	20 f4       	brcc	.+8      	; 0x1094 <__DATA_REGION_LENGTH__+0x94>
    108c:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <sg_sFrame+0x3b>
    1090:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <sg_sFrame+0x3a>
    1094:	48 0e       	add	r4, r24
    1096:	59 1e       	adc	r5, r25
    1098:	61 1c       	adc	r6, r1
    109a:	71 1c       	adc	r7, r1
    109c:	c3 94       	inc	r12
    109e:	d3 94       	inc	r13
    10a0:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <sg_sFrame+0x2d>
    10a4:	d8 16       	cp	r13, r24
    10a6:	08 f4       	brcc	.+2      	; 0x10aa <__DATA_REGION_LENGTH__+0xaa>
    10a8:	90 cf       	rjmp	.-224    	; 0xfca <CellStringProcess+0xde>
    10aa:	cc 20       	and	r12, r12
    10ac:	89 f1       	breq	.+98     	; 0x1110 <__stack+0x11>
    10ae:	ea e4       	ldi	r30, 0x4A	; 74
    10b0:	f1 e0       	ldi	r31, 0x01	; 1
    10b2:	40 82       	st	Z, r4
    10b4:	51 82       	std	Z+1, r5	; 0x01
    10b6:	62 82       	std	Z+2, r6	; 0x02
    10b8:	73 82       	std	Z+3, r7	; 0x03
    10ba:	60 81       	ld	r22, Z
    10bc:	71 81       	ldd	r23, Z+1	; 0x01
    10be:	82 81       	ldd	r24, Z+2	; 0x02
    10c0:	93 81       	ldd	r25, Z+3	; 0x03
    10c2:	2c 2d       	mov	r18, r12
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	40 e0       	ldi	r20, 0x00	; 0
    10c8:	50 e0       	ldi	r21, 0x00	; 0
    10ca:	0e 94 d0 22 	call	0x45a0	; 0x45a0 <__udivmodsi4>
    10ce:	30 93 49 01 	sts	0x0149, r19	; 0x800149 <sg_sFrame+0x3d>
    10d2:	20 93 48 01 	sts	0x0148, r18	; 0x800148 <sg_sFrame+0x3c>
    10d6:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    10da:	83 30       	cpi	r24, 0x03	; 3
    10dc:	c9 f0       	breq	.+50     	; 0x1110 <__stack+0x11>
    10de:	80 91 19 03 	lds	r24, 0x0319	; 0x800319 <sg_bCellBalancedOnce>
    10e2:	81 11       	cpse	r24, r1
    10e4:	15 c0       	rjmp	.+42     	; 0x1110 <__stack+0x11>
    10e6:	ec e0       	ldi	r30, 0x0C	; 12
    10e8:	f1 e0       	ldi	r31, 0x01	; 1
    10ea:	20 ad       	ldd	r18, Z+56	; 0x38
    10ec:	31 ad       	ldd	r19, Z+57	; 0x39
    10ee:	82 ad       	ldd	r24, Z+58	; 0x3a
    10f0:	93 ad       	ldd	r25, Z+59	; 0x3b
    10f2:	28 17       	cp	r18, r24
    10f4:	39 07       	cpc	r19, r25
    10f6:	60 f0       	brcs	.+24     	; 0x1110 <__stack+0x11>
    10f8:	80 ad       	ldd	r24, Z+56	; 0x38
    10fa:	91 ad       	ldd	r25, Z+57	; 0x39
    10fc:	22 ad       	ldd	r18, Z+58	; 0x3a
    10fe:	33 ad       	ldd	r19, Z+59	; 0x3b
    1100:	82 1b       	sub	r24, r18
    1102:	93 0b       	sbc	r25, r19
    1104:	80 34       	cpi	r24, 0x40	; 64
    1106:	91 05       	cpc	r25, r1
    1108:	18 f0       	brcs	.+6      	; 0x1110 <__stack+0x11>
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <sg_bCellBalanceReady>
    1110:	33 20       	and	r3, r3
    1112:	c9 f0       	breq	.+50     	; 0x1146 <__stack+0x47>
    1114:	23 2d       	mov	r18, r3
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	40 e0       	ldi	r20, 0x00	; 0
    111a:	50 e0       	ldi	r21, 0x00	; 0
    111c:	c5 01       	movw	r24, r10
    111e:	b4 01       	movw	r22, r8
    1120:	0e 94 6c 24 	call	0x48d8	; 0x48d8 <__divmodsi4>
    1124:	62 e4       	ldi	r22, 0x42	; 66
    1126:	71 e0       	ldi	r23, 0x01	; 1
    1128:	c9 01       	movw	r24, r18
    112a:	0e 94 c9 1f 	call	0x3f92	; 0x3f92 <CellDataConvertTemperature>
    112e:	6e e3       	ldi	r22, 0x3E	; 62
    1130:	71 e0       	ldi	r23, 0x01	; 1
    1132:	8b 81       	ldd	r24, Y+3	; 0x03
    1134:	9c 81       	ldd	r25, Y+4	; 0x04
    1136:	0e 94 c9 1f 	call	0x3f92	; 0x3f92 <CellDataConvertTemperature>
    113a:	60 e4       	ldi	r22, 0x40	; 64
    113c:	71 e0       	ldi	r23, 0x01	; 1
    113e:	8d 81       	ldd	r24, Y+5	; 0x05
    1140:	9e 81       	ldd	r25, Y+6	; 0x06
    1142:	0e 94 c9 1f 	call	0x3f92	; 0x3f92 <CellDataConvertTemperature>
    1146:	ec e0       	ldi	r30, 0x0C	; 12
    1148:	f1 e0       	ldi	r31, 0x01	; 1
    114a:	85 a5       	ldd	r24, Z+45	; 0x2d
    114c:	87 a7       	std	Z+47, r24	; 0x2f
    114e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <sg_bSDCardReady>
    1152:	88 23       	and	r24, r24
    1154:	49 f0       	breq	.+18     	; 0x1168 <__stack+0x69>
    1156:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    115a:	88 23       	and	r24, r24
    115c:	29 f0       	breq	.+10     	; 0x1168 <__stack+0x69>
    115e:	cf 01       	movw	r24, r30
    1160:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <STORE_WriteFrame>
    1164:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <sg_bSDCardReady>
    1168:	26 96       	adiw	r28, 0x06	; 6
    116a:	0f b6       	in	r0, 0x3f	; 63
    116c:	f8 94       	cli
    116e:	de bf       	out	0x3e, r29	; 62
    1170:	0f be       	out	0x3f, r0	; 63
    1172:	cd bf       	out	0x3d, r28	; 61
    1174:	df 91       	pop	r29
    1176:	cf 91       	pop	r28
    1178:	1f 91       	pop	r17
    117a:	0f 91       	pop	r16
    117c:	ff 90       	pop	r15
    117e:	ef 90       	pop	r14
    1180:	df 90       	pop	r13
    1182:	cf 90       	pop	r12
    1184:	bf 90       	pop	r11
    1186:	af 90       	pop	r10
    1188:	9f 90       	pop	r9
    118a:	8f 90       	pop	r8
    118c:	7f 90       	pop	r7
    118e:	6f 90       	pop	r6
    1190:	5f 90       	pop	r5
    1192:	4f 90       	pop	r4
    1194:	3f 90       	pop	r3
    1196:	08 95       	ret

Disassembly of section .text.Delay:

000043ce <Delay>:
    43ce:	ab 01       	movw	r20, r22
    43d0:	bc 01       	movw	r22, r24
    43d2:	4f 5f       	subi	r20, 0xFF	; 255
    43d4:	5f 4f       	sbci	r21, 0xFF	; 255
    43d6:	6f 4f       	sbci	r22, 0xFF	; 255
    43d8:	7f 4f       	sbci	r23, 0xFF	; 255
    43da:	76 95       	lsr	r23
    43dc:	67 95       	ror	r22
    43de:	57 95       	ror	r21
    43e0:	47 95       	ror	r20
    43e2:	96 b5       	in	r25, 0x26	; 38
    43e4:	17 c0       	rjmp	.+46     	; 0x4414 <Delay+0x46>
    43e6:	86 b5       	in	r24, 0x26	; 38
    43e8:	98 17       	cp	r25, r24
    43ea:	e9 f3       	breq	.-6      	; 0x43e6 <Delay+0x18>
    43ec:	26 b5       	in	r18, 0x26	; 38
    43ee:	82 2f       	mov	r24, r18
    43f0:	89 1b       	sub	r24, r25
    43f2:	90 e0       	ldi	r25, 0x00	; 0
    43f4:	a0 e0       	ldi	r26, 0x00	; 0
    43f6:	b0 e0       	ldi	r27, 0x00	; 0
    43f8:	48 17       	cp	r20, r24
    43fa:	59 07       	cpc	r21, r25
    43fc:	6a 07       	cpc	r22, r26
    43fe:	7b 07       	cpc	r23, r27
    4400:	28 f0       	brcs	.+10     	; 0x440c <Delay+0x3e>
    4402:	48 1b       	sub	r20, r24
    4404:	59 0b       	sbc	r21, r25
    4406:	6a 0b       	sbc	r22, r26
    4408:	7b 0b       	sbc	r23, r27
    440a:	03 c0       	rjmp	.+6      	; 0x4412 <Delay+0x44>
    440c:	40 e0       	ldi	r20, 0x00	; 0
    440e:	50 e0       	ldi	r21, 0x00	; 0
    4410:	ba 01       	movw	r22, r20
    4412:	92 2f       	mov	r25, r18
    4414:	41 15       	cp	r20, r1
    4416:	51 05       	cpc	r21, r1
    4418:	61 05       	cpc	r22, r1
    441a:	71 05       	cpc	r23, r1
    441c:	21 f7       	brne	.-56     	; 0x43e6 <Delay+0x18>
    441e:	08 95       	ret

Disassembly of section .text.PlatformAssert:

0000495e <PlatformAssert>:



void PlatformAssert( const char* peFilename, const int s32LineNumber )
{
	DebugOut("Assert %s: %d\n", peFilename, s32LineNumber);
    495e:	5f 93       	push	r21
    4960:	4f 93       	push	r20
    4962:	8f 93       	push	r24
    4964:	7f 93       	push	r23
    4966:	6f 93       	push	r22
    4968:	88 e3       	ldi	r24, 0x38	; 56
    496a:	92 e0       	ldi	r25, 0x02	; 2
    496c:	a0 e0       	ldi	r26, 0x00	; 0
    496e:	af 93       	push	r26
    4970:	9f 93       	push	r25
    4972:	8f 93       	push	r24
    4974:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <DebugOut>
	
//	while(1);
}
    4978:	8d b7       	in	r24, 0x3d	; 61
    497a:	9e b7       	in	r25, 0x3e	; 62
    497c:	08 96       	adiw	r24, 0x08	; 8
    497e:	0f b6       	in	r0, 0x3f	; 63
    4980:	f8 94       	cli
    4982:	9e bf       	out	0x3e, r25	; 62
    4984:	0f be       	out	0x3f, r0	; 63
    4986:	8d bf       	out	0x3d, r24	; 61
    4988:	08 95       	ret

Disassembly of section .text.ModuleControllerStateHandle:

000018a8 <ModuleControllerStateHandle>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    18a8:	1f 93       	push	r17
    18aa:	cf 93       	push	r28
    18ac:	df 93       	push	r29
    18ae:	d0 91 06 01 	lds	r29, 0x0106	; 0x800106 <sg_eModuleControllerStateTarget>
    18b2:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <sg_eModuleControllerStateMax>
    18b6:	8d 17       	cp	r24, r29
    18b8:	30 f0       	brcs	.+12     	; 0x18c6 <ModuleControllerStateHandle+0x1e>
    18ba:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    18be:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <sg_eModuleControllerStateMax>
    18c2:	89 17       	cp	r24, r25
    18c4:	10 f4       	brcc	.+4      	; 0x18ca <ModuleControllerStateHandle+0x22>
    18c6:	d0 91 05 01 	lds	r29, 0x0105	; 0x800105 <sg_eModuleControllerStateMax>
    18ca:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    18ce:	d8 17       	cp	r29, r24
    18d0:	09 f4       	brne	.+2      	; 0x18d4 <ModuleControllerStateHandle+0x2c>
    18d2:	f5 c0       	rjmp	.+490    	; 0x1abe <ModuleControllerStateHandle+0x216>
    18d4:	d2 30       	cpi	r29, 0x02	; 2
    18d6:	09 f4       	brne	.+2      	; 0x18da <ModuleControllerStateHandle+0x32>
    18d8:	72 c0       	rjmp	.+228    	; 0x19be <ModuleControllerStateHandle+0x116>
    18da:	28 f4       	brcc	.+10     	; 0x18e6 <ModuleControllerStateHandle+0x3e>
    18dc:	dd 23       	and	r29, r29
    18de:	89 f0       	breq	.+34     	; 0x1902 <ModuleControllerStateHandle+0x5a>
    18e0:	d1 30       	cpi	r29, 0x01	; 1
    18e2:	e1 f1       	breq	.+120    	; 0x195c <ModuleControllerStateHandle+0xb4>
    18e4:	e0 c0       	rjmp	.+448    	; 0x1aa6 <ModuleControllerStateHandle+0x1fe>
    18e6:	d3 30       	cpi	r29, 0x03	; 3
    18e8:	09 f4       	brne	.+2      	; 0x18ec <ModuleControllerStateHandle+0x44>
    18ea:	a9 c0       	rjmp	.+338    	; 0x1a3e <ModuleControllerStateHandle+0x196>
    18ec:	d5 30       	cpi	r29, 0x05	; 5
    18ee:	09 f0       	breq	.+2      	; 0x18f2 <ModuleControllerStateHandle+0x4a>
    18f0:	da c0       	rjmp	.+436    	; 0x1aa6 <ModuleControllerStateHandle+0x1fe>
    18f2:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <sg_eModuleControllerStateCurrent>
    18f6:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <sg_eModuleControllerStateTarget>
    18fa:	d0 91 07 01 	lds	r29, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    18fe:	0e 94 f8 27 	call	0x4ff0	; 0x4ff0 <ADCSetPowerOn>
    1902:	88 b1       	in	r24, 0x08	; 8
    1904:	8f 7e       	andi	r24, 0xEF	; 239
    1906:	88 b9       	out	0x08, r24	; 8
    1908:	68 e8       	ldi	r22, 0x88	; 136
    190a:	73 e1       	ldi	r23, 0x13	; 19
    190c:	80 e0       	ldi	r24, 0x00	; 0
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	0e 94 e7 21 	call	0x43ce	; 0x43ce <Delay>
    1914:	8e b1       	in	r24, 0x0e	; 14
    1916:	8d 7f       	andi	r24, 0xFD	; 253
    1918:	8e b9       	out	0x0e, r24	; 14
    191a:	68 e8       	ldi	r22, 0x88	; 136
    191c:	73 e1       	ldi	r23, 0x13	; 19
    191e:	80 e0       	ldi	r24, 0x00	; 0
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	0e 94 e7 21 	call	0x43ce	; 0x43ce <Delay>
    1926:	eb e6       	ldi	r30, 0x6B	; 107
    1928:	f0 e0       	ldi	r31, 0x00	; 0
    192a:	80 81       	ld	r24, Z
    192c:	8d 7f       	andi	r24, 0xFD	; 253
    192e:	80 83       	st	Z, r24
    1930:	e8 e6       	ldi	r30, 0x68	; 104
    1932:	f0 e0       	ldi	r31, 0x00	; 0
    1934:	80 81       	ld	r24, Z
    1936:	8d 7f       	andi	r24, 0xFD	; 253
    1938:	80 83       	st	Z, r24
    193a:	81 e0       	ldi	r24, 0x01	; 1
    193c:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <sg_bCellBalanceReady>
    1940:	10 92 19 03 	sts	0x0319, r1	; 0x800319 <sg_bCellBalancedOnce>
    1944:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <sg_bStopDischarge>
    1948:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <sg_bSDCardReady>
    194c:	88 23       	and	r24, r24
    194e:	09 f4       	brne	.+2      	; 0x1952 <ModuleControllerStateHandle+0xaa>
    1950:	b2 c0       	rjmp	.+356    	; 0x1ab6 <ModuleControllerStateHandle+0x20e>
    1952:	0e 94 e6 20 	call	0x41cc	; 0x41cc <STORE_EndSession>
    1956:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <sg_bSDCardReady>
    195a:	ad c0       	rjmp	.+346    	; 0x1ab6 <ModuleControllerStateHandle+0x20e>
    195c:	88 b1       	in	r24, 0x08	; 8
    195e:	8f 7e       	andi	r24, 0xEF	; 239
    1960:	88 b9       	out	0x08, r24	; 8
    1962:	68 e8       	ldi	r22, 0x88	; 136
    1964:	73 e1       	ldi	r23, 0x13	; 19
    1966:	80 e0       	ldi	r24, 0x00	; 0
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	0e 94 e7 21 	call	0x43ce	; 0x43ce <Delay>
    196e:	eb e6       	ldi	r30, 0x6B	; 107
    1970:	f0 e0       	ldi	r31, 0x00	; 0
    1972:	80 81       	ld	r24, Z
    1974:	8d 7f       	andi	r24, 0xFD	; 253
    1976:	80 83       	st	Z, r24
    1978:	e8 e6       	ldi	r30, 0x68	; 104
    197a:	f0 e0       	ldi	r31, 0x00	; 0
    197c:	80 81       	ld	r24, Z
    197e:	8d 7f       	andi	r24, 0xFD	; 253
    1980:	80 83       	st	Z, r24
    1982:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <sg_bModuleRegistered>
    1986:	88 23       	and	r24, r24
    1988:	19 f0       	breq	.+6      	; 0x1990 <ModuleControllerStateHandle+0xe8>
    198a:	8e b1       	in	r24, 0x0e	; 14
    198c:	82 60       	ori	r24, 0x02	; 2
    198e:	8e b9       	out	0x0e, r24	; 14
    1990:	68 e8       	ldi	r22, 0x88	; 136
    1992:	73 e1       	ldi	r23, 0x13	; 19
    1994:	80 e0       	ldi	r24, 0x00	; 0
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	0e 94 e7 21 	call	0x43ce	; 0x43ce <Delay>
    199c:	81 e0       	ldi	r24, 0x01	; 1
    199e:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <sg_bCellBalanceReady>
    19a2:	10 92 19 03 	sts	0x0319, r1	; 0x800319 <sg_bCellBalancedOnce>
    19a6:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <sg_bStopDischarge>
    19aa:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <sg_bSDCardReady>
    19ae:	88 23       	and	r24, r24
    19b0:	09 f4       	brne	.+2      	; 0x19b4 <ModuleControllerStateHandle+0x10c>
    19b2:	81 c0       	rjmp	.+258    	; 0x1ab6 <ModuleControllerStateHandle+0x20e>
    19b4:	0e 94 bd 21 	call	0x437a	; 0x437a <STORE_StartNewSession>
    19b8:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <sg_bSDCardReady>
    19bc:	7c c0       	rjmp	.+248    	; 0x1ab6 <ModuleControllerStateHandle+0x20e>
    19be:	61 99       	sbic	0x0c, 1	; 12
    19c0:	0d c0       	rjmp	.+26     	; 0x19dc <ModuleControllerStateHandle+0x134>
    19c2:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <sg_bModuleRegistered>
    19c6:	88 23       	and	r24, r24
    19c8:	19 f0       	breq	.+6      	; 0x19d0 <ModuleControllerStateHandle+0x128>
    19ca:	8e b1       	in	r24, 0x0e	; 14
    19cc:	82 60       	ori	r24, 0x02	; 2
    19ce:	8e b9       	out	0x0e, r24	; 14
    19d0:	68 e8       	ldi	r22, 0x88	; 136
    19d2:	73 e1       	ldi	r23, 0x13	; 19
    19d4:	80 e0       	ldi	r24, 0x00	; 0
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	0e 94 e7 21 	call	0x43ce	; 0x43ce <Delay>
    19dc:	cb e0       	ldi	r28, 0x0B	; 11
    19de:	2a c0       	rjmp	.+84     	; 0x1a34 <ModuleControllerStateHandle+0x18c>
    19e0:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <sg_bModuleRegistered>
    19e4:	88 23       	and	r24, r24
    19e6:	49 f0       	breq	.+18     	; 0x19fa <ModuleControllerStateHandle+0x152>
    19e8:	88 b1       	in	r24, 0x08	; 8
    19ea:	80 61       	ori	r24, 0x10	; 16
    19ec:	88 b9       	out	0x08, r24	; 8
    19ee:	88 b1       	in	r24, 0x08	; 8
    19f0:	8f 77       	andi	r24, 0x7F	; 127
    19f2:	88 b9       	out	0x08, r24	; 8
    19f4:	88 b1       	in	r24, 0x08	; 8
    19f6:	80 68       	ori	r24, 0x80	; 128
    19f8:	88 b9       	out	0x08, r24	; 8
    19fa:	68 ee       	ldi	r22, 0xE8	; 232
    19fc:	73 e0       	ldi	r23, 0x03	; 3
    19fe:	80 e0       	ldi	r24, 0x00	; 0
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	0e 94 e7 21 	call	0x43ce	; 0x43ce <Delay>
    1a06:	88 b1       	in	r24, 0x08	; 8
    1a08:	8f 7e       	andi	r24, 0xEF	; 239
    1a0a:	88 b9       	out	0x08, r24	; 8
    1a0c:	68 e8       	ldi	r22, 0x88	; 136
    1a0e:	73 e1       	ldi	r23, 0x13	; 19
    1a10:	80 e0       	ldi	r24, 0x00	; 0
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	0e 94 e7 21 	call	0x43ce	; 0x43ce <Delay>
    1a18:	60 e5       	ldi	r22, 0x50	; 80
    1a1a:	73 ec       	ldi	r23, 0xC3	; 195
    1a1c:	80 e0       	ldi	r24, 0x00	; 0
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	0e 94 e7 21 	call	0x43ce	; 0x43ce <Delay>
    1a24:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <sg_bOvercurrentSignal>
    1a28:	88 23       	and	r24, r24
    1a2a:	19 f0       	breq	.+6      	; 0x1a32 <ModuleControllerStateHandle+0x18a>
    1a2c:	10 92 17 03 	sts	0x0317, r1	; 0x800317 <sg_bOvercurrentSignal>
    1a30:	01 c0       	rjmp	.+2      	; 0x1a34 <ModuleControllerStateHandle+0x18c>
    1a32:	c1 2f       	mov	r28, r17
    1a34:	1f ef       	ldi	r17, 0xFF	; 255
    1a36:	1c 0f       	add	r17, r28
    1a38:	c1 11       	cpse	r28, r1
    1a3a:	d2 cf       	rjmp	.-92     	; 0x19e0 <ModuleControllerStateHandle+0x138>
    1a3c:	3c c0       	rjmp	.+120    	; 0x1ab6 <ModuleControllerStateHandle+0x20e>
    1a3e:	61 99       	sbic	0x0c, 1	; 12
    1a40:	0d c0       	rjmp	.+26     	; 0x1a5c <ModuleControllerStateHandle+0x1b4>
    1a42:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <sg_bModuleRegistered>
    1a46:	88 23       	and	r24, r24
    1a48:	19 f0       	breq	.+6      	; 0x1a50 <ModuleControllerStateHandle+0x1a8>
    1a4a:	8e b1       	in	r24, 0x0e	; 14
    1a4c:	82 60       	ori	r24, 0x02	; 2
    1a4e:	8e b9       	out	0x0e, r24	; 14
    1a50:	68 e8       	ldi	r22, 0x88	; 136
    1a52:	73 e1       	ldi	r23, 0x13	; 19
    1a54:	80 e0       	ldi	r24, 0x00	; 0
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	0e 94 e7 21 	call	0x43ce	; 0x43ce <Delay>
    1a5c:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <sg_bModuleRegistered>
    1a60:	88 23       	and	r24, r24
    1a62:	49 f0       	breq	.+18     	; 0x1a76 <ModuleControllerStateHandle+0x1ce>
    1a64:	88 b1       	in	r24, 0x08	; 8
    1a66:	80 61       	ori	r24, 0x10	; 16
    1a68:	88 b9       	out	0x08, r24	; 8
    1a6a:	88 b1       	in	r24, 0x08	; 8
    1a6c:	8f 77       	andi	r24, 0x7F	; 127
    1a6e:	88 b9       	out	0x08, r24	; 8
    1a70:	88 b1       	in	r24, 0x08	; 8
    1a72:	80 68       	ori	r24, 0x80	; 128
    1a74:	88 b9       	out	0x08, r24	; 8
    1a76:	68 e8       	ldi	r22, 0x88	; 136
    1a78:	73 e1       	ldi	r23, 0x13	; 19
    1a7a:	80 e0       	ldi	r24, 0x00	; 0
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	0e 94 e7 21 	call	0x43ce	; 0x43ce <Delay>
    1a82:	10 92 1a 03 	sts	0x031A, r1	; 0x80031a <sg_bCellBalanceReady>
    1a86:	10 92 19 03 	sts	0x0319, r1	; 0x800319 <sg_bCellBalancedOnce>
    1a8a:	81 e0       	ldi	r24, 0x01	; 1
    1a8c:	80 93 18 03 	sts	0x0318, r24	; 0x800318 <sg_bStopDischarge>
    1a90:	eb e6       	ldi	r30, 0x6B	; 107
    1a92:	f0 e0       	ldi	r31, 0x00	; 0
    1a94:	80 81       	ld	r24, Z
    1a96:	82 60       	ori	r24, 0x02	; 2
    1a98:	80 83       	st	Z, r24
    1a9a:	e8 e6       	ldi	r30, 0x68	; 104
    1a9c:	f0 e0       	ldi	r31, 0x00	; 0
    1a9e:	80 81       	ld	r24, Z
    1aa0:	82 60       	ori	r24, 0x02	; 2
    1aa2:	80 83       	st	Z, r24
    1aa4:	08 c0       	rjmp	.+16     	; 0x1ab6 <ModuleControllerStateHandle+0x20e>
    1aa6:	4d ef       	ldi	r20, 0xFD	; 253
    1aa8:	53 e0       	ldi	r21, 0x03	; 3
    1aaa:	67 e4       	ldi	r22, 0x47	; 71
    1aac:	72 e0       	ldi	r23, 0x02	; 2
    1aae:	80 e0       	ldi	r24, 0x00	; 0
    1ab0:	0e 94 af 24 	call	0x495e	; 0x495e <PlatformAssert>
    1ab4:	d5 e0       	ldi	r29, 0x05	; 5
    1ab6:	d0 93 07 01 	sts	0x0107, r29	; 0x800107 <sg_eModuleControllerStateCurrent>
    1aba:	0e 94 bc 27 	call	0x4f78	; 0x4f78 <SendModuleControllerStatus>
    1abe:	df 91       	pop	r29
    1ac0:	cf 91       	pop	r28
    1ac2:	1f 91       	pop	r17
    1ac4:	08 95       	ret

Disassembly of section .text.PlatformGetRegistrationID:

00005030 <PlatformGetRegistrationID>:
}

uint8_t PlatformGetRegistrationID( void )
{
	return(sg_u8ModuleRegistrationID);
}
    5030:	80 91 27 03 	lds	r24, 0x0327	; 0x800327 <sg_u8ModuleRegistrationID>
    5034:	08 95       	ret

Disassembly of section .text.SetSysclock:

00004ffc <SetSysclock>:

void SetSysclock( void )
{
	// First set the prescaler enable
	CLKPR = (1 << CLKPCE);
    4ffc:	e1 e6       	ldi	r30, 0x61	; 97
    4ffe:	f0 e0       	ldi	r31, 0x00	; 0
    5000:	80 e8       	ldi	r24, 0x80	; 128
    5002:	80 83       	st	Z, r24
	
	// Now set the desired prescale value
	CLKPR = SYSCLOCK_PRESCALE;
    5004:	10 82       	st	Z, r1
    5006:	08 95       	ret

Disassembly of section .text.ModuleControllerGetUniqueID:

00003b6a <ModuleControllerGetUniqueID>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    3b6a:	cf 92       	push	r12
    3b6c:	df 92       	push	r13
    3b6e:	ef 92       	push	r14
    3b70:	ff 92       	push	r15
    3b72:	80 e0       	ldi	r24, 0x00	; 0
    3b74:	90 e0       	ldi	r25, 0x00	; 0
    3b76:	0e 94 8f 27 	call	0x4f1e	; 0x4f1e <EEPROMRead>
    3b7a:	c8 2e       	mov	r12, r24
    3b7c:	d1 2c       	mov	r13, r1
    3b7e:	e1 2c       	mov	r14, r1
    3b80:	f1 2c       	mov	r15, r1
    3b82:	81 e0       	ldi	r24, 0x01	; 1
    3b84:	90 e0       	ldi	r25, 0x00	; 0
    3b86:	0e 94 8f 27 	call	0x4f1e	; 0x4f1e <EEPROMRead>
    3b8a:	90 e0       	ldi	r25, 0x00	; 0
    3b8c:	a0 e0       	ldi	r26, 0x00	; 0
    3b8e:	b0 e0       	ldi	r27, 0x00	; 0
    3b90:	ba 2f       	mov	r27, r26
    3b92:	a9 2f       	mov	r26, r25
    3b94:	98 2f       	mov	r25, r24
    3b96:	88 27       	eor	r24, r24
    3b98:	c8 2a       	or	r12, r24
    3b9a:	d9 2a       	or	r13, r25
    3b9c:	ea 2a       	or	r14, r26
    3b9e:	fb 2a       	or	r15, r27
    3ba0:	82 e0       	ldi	r24, 0x02	; 2
    3ba2:	90 e0       	ldi	r25, 0x00	; 0
    3ba4:	0e 94 8f 27 	call	0x4f1e	; 0x4f1e <EEPROMRead>
    3ba8:	90 e0       	ldi	r25, 0x00	; 0
    3baa:	a0 e0       	ldi	r26, 0x00	; 0
    3bac:	b0 e0       	ldi	r27, 0x00	; 0
    3bae:	dc 01       	movw	r26, r24
    3bb0:	99 27       	eor	r25, r25
    3bb2:	88 27       	eor	r24, r24
    3bb4:	c8 2a       	or	r12, r24
    3bb6:	d9 2a       	or	r13, r25
    3bb8:	ea 2a       	or	r14, r26
    3bba:	fb 2a       	or	r15, r27
    3bbc:	83 e0       	ldi	r24, 0x03	; 3
    3bbe:	90 e0       	ldi	r25, 0x00	; 0
    3bc0:	0e 94 8f 27 	call	0x4f1e	; 0x4f1e <EEPROMRead>
    3bc4:	90 e0       	ldi	r25, 0x00	; 0
    3bc6:	a0 e0       	ldi	r26, 0x00	; 0
    3bc8:	b0 e0       	ldi	r27, 0x00	; 0
    3bca:	b8 2f       	mov	r27, r24
    3bcc:	aa 27       	eor	r26, r26
    3bce:	99 27       	eor	r25, r25
    3bd0:	88 27       	eor	r24, r24
    3bd2:	bc 01       	movw	r22, r24
    3bd4:	cd 01       	movw	r24, r26
    3bd6:	6c 29       	or	r22, r12
    3bd8:	7d 29       	or	r23, r13
    3bda:	8e 29       	or	r24, r14
    3bdc:	9f 29       	or	r25, r15
    3bde:	ff 90       	pop	r15
    3be0:	ef 90       	pop	r14
    3be2:	df 90       	pop	r13
    3be4:	cf 90       	pop	r12
    3be6:	08 95       	ret

Disassembly of section .text.TimerInit:

00004420 <TimerInit>:
    4420:	14 bc       	out	0x24, r1	; 36
    4422:	92 e0       	ldi	r25, 0x02	; 2
    4424:	95 bd       	out	0x25, r25	; 37
    4426:	a4 e6       	ldi	r26, 0x64	; 100
    4428:	b0 e0       	ldi	r27, 0x00	; 0
    442a:	8c 91       	ld	r24, X
    442c:	87 7f       	andi	r24, 0xF7	; 247
    442e:	8c 93       	st	X, r24
    4430:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f0080>
    4434:	84 e0       	ldi	r24, 0x04	; 4
    4436:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f0081>
    443a:	96 bb       	out	0x16, r25	; 22
    443c:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f0084>
    4440:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f0085>
    4444:	8b 5c       	subi	r24, 0xCB	; 203
    4446:	93 4f       	sbci	r25, 0xF3	; 243
    4448:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f0089>
    444c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f0088>
    4450:	ef e6       	ldi	r30, 0x6F	; 111
    4452:	f0 e0       	ldi	r31, 0x00	; 0
    4454:	80 81       	ld	r24, Z
    4456:	82 60       	ori	r24, 0x02	; 2
    4458:	80 83       	st	Z, r24
    445a:	8c 91       	ld	r24, X
    445c:	8f 7e       	andi	r24, 0xEF	; 239
    445e:	8c 93       	st	X, r24
    4460:	ae e6       	ldi	r26, 0x6E	; 110
    4462:	b0 e0       	ldi	r27, 0x00	; 0
    4464:	8c 91       	ld	r24, X
    4466:	8e 7f       	andi	r24, 0xFE	; 254
    4468:	8c 93       	st	X, r24
    446a:	80 81       	ld	r24, Z
    446c:	8e 7f       	andi	r24, 0xFE	; 254
    446e:	80 83       	st	Z, r24
    4470:	08 95       	ret

Disassembly of section .text.__vector_12:

000033be <__vector_12>:
    33be:	78 94       	sei
    33c0:	1f 92       	push	r1
    33c2:	0f 92       	push	r0
    33c4:	0f b6       	in	r0, 0x3f	; 63
    33c6:	0f 92       	push	r0
    33c8:	11 24       	eor	r1, r1
    33ca:	8f 93       	push	r24
    33cc:	9f 93       	push	r25
    33ce:	ef 93       	push	r30
    33d0:	ff 93       	push	r31
    33d2:	82 e0       	ldi	r24, 0x02	; 2
    33d4:	86 bb       	out	0x16, r24	; 22
    33d6:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f0084>
    33da:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f0085>
    33de:	8b 5c       	subi	r24, 0xCB	; 203
    33e0:	93 4f       	sbci	r25, 0xF3	; 243
    33e2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f0089>
    33e6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f0088>
    33ea:	ef e6       	ldi	r30, 0x6F	; 111
    33ec:	f0 e0       	ldi	r31, 0x00	; 0
    33ee:	80 81       	ld	r24, Z
    33f0:	82 60       	ori	r24, 0x02	; 2
    33f2:	80 83       	st	Z, r24
    33f4:	81 e0       	ldi	r24, 0x01	; 1
    33f6:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <sg_bNewTick>
    33fa:	80 91 82 09 	lds	r24, 0x0982	; 0x800982 <sg_u8CellFrameTimer>
    33fe:	8f 5f       	subi	r24, 0xFF	; 255
    3400:	80 93 82 09 	sts	0x0982, r24	; 0x800982 <sg_u8CellFrameTimer>
    3404:	80 91 82 09 	lds	r24, 0x0982	; 0x800982 <sg_u8CellFrameTimer>
    3408:	83 30       	cpi	r24, 0x03	; 3
    340a:	78 f0       	brcs	.+30     	; 0x342a <__vector_12+0x6c>
    340c:	10 92 82 09 	sts	0x0982, r1	; 0x800982 <sg_u8CellFrameTimer>
    3410:	81 e0       	ldi	r24, 0x01	; 1
    3412:	80 93 81 09 	sts	0x0981, r24	; 0x800981 <sg_bFrameStart>
    3416:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <sg_eFrameStatus>
    341a:	81 30       	cpi	r24, 0x01	; 1
    341c:	19 f4       	brne	.+6      	; 0x3424 <__vector_12+0x66>
    341e:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <sg_eFrameStatus>
    3422:	03 c0       	rjmp	.+6      	; 0x342a <__vector_12+0x6c>
    3424:	81 e0       	ldi	r24, 0x01	; 1
    3426:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <sg_eFrameStatus>
    342a:	80 91 7f 09 	lds	r24, 0x097F	; 0x80097f <sg_u8TicksSinceLastPackControllerMessage>
    342e:	8f 3f       	cpi	r24, 0xFF	; 255
    3430:	29 f0       	breq	.+10     	; 0x343c <__vector_12+0x7e>
    3432:	80 91 7f 09 	lds	r24, 0x097F	; 0x80097f <sg_u8TicksSinceLastPackControllerMessage>
    3436:	8f 5f       	subi	r24, 0xFF	; 255
    3438:	80 93 7f 09 	sts	0x097F, r24	; 0x80097f <sg_u8TicksSinceLastPackControllerMessage>
    343c:	80 91 7f 09 	lds	r24, 0x097F	; 0x80097f <sg_u8TicksSinceLastPackControllerMessage>
    3440:	8f 36       	cpi	r24, 0x6F	; 111
    3442:	40 f0       	brcs	.+16     	; 0x3454 <__vector_12+0x96>
    3444:	80 91 7f 09 	lds	r24, 0x097F	; 0x80097f <sg_u8TicksSinceLastPackControllerMessage>
    3448:	8f 56       	subi	r24, 0x6F	; 111
    344a:	80 93 7f 09 	sts	0x097F, r24	; 0x80097f <sg_u8TicksSinceLastPackControllerMessage>
    344e:	81 e0       	ldi	r24, 0x01	; 1
    3450:	80 93 1f 03 	sts	0x031F, r24	; 0x80031f <sg_bPackControllerTimeout>
    3454:	80 91 80 09 	lds	r24, 0x0980	; 0x800980 <sg_u8CellStringPowerTimer>
    3458:	88 23       	and	r24, r24
    345a:	29 f0       	breq	.+10     	; 0x3466 <__vector_12+0xa8>
    345c:	80 91 80 09 	lds	r24, 0x0980	; 0x800980 <sg_u8CellStringPowerTimer>
    3460:	81 50       	subi	r24, 0x01	; 1
    3462:	80 93 80 09 	sts	0x0980, r24	; 0x800980 <sg_u8CellStringPowerTimer>
    3466:	ff 91       	pop	r31
    3468:	ef 91       	pop	r30
    346a:	9f 91       	pop	r25
    346c:	8f 91       	pop	r24
    346e:	0f 90       	pop	r0
    3470:	0f be       	out	0x3f, r0	; 63
    3472:	0f 90       	pop	r0
    3474:	1f 90       	pop	r1
    3476:	18 95       	reti

Disassembly of section .text.WatchdogReset:

0000503e <WatchdogReset>:
		sg_u8CellStringPowerTimer--;
	}
}

void WatchdogReset( void )
{
    503e:	08 95       	ret

Disassembly of section .text.WatchdogOff:

00004e3c <WatchdogOff>:
// }

// Assume interrupts are disabled
void WatchdogOff( void )  // turn it off even when WDT_ENABLE is not defined
{
	wdt_reset();
    4e3c:	a8 95       	wdr
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    4e3e:	0f b6       	in	r0, 0x3f	; 63
    4e40:	f8 94       	cli
    4e42:	a8 95       	wdr
    4e44:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f0060>
    4e48:	88 61       	ori	r24, 0x18	; 24
    4e4a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f0060>
    4e4e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f0060>
    4e52:	0f be       	out	0x3f, r0	; 63
    4e54:	08 95       	ret

Disassembly of section .text.__vector_28:

00004472 <__vector_28>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    4472:	1f 92       	push	r1
    4474:	0f 92       	push	r0
    4476:	0f b6       	in	r0, 0x3f	; 63
    4478:	0f 92       	push	r0
    447a:	11 24       	eor	r1, r1
    447c:	2f 93       	push	r18
    447e:	3f 93       	push	r19
    4480:	4f 93       	push	r20
    4482:	5f 93       	push	r21
    4484:	6f 93       	push	r22
    4486:	7f 93       	push	r23
    4488:	8f 93       	push	r24
    448a:	9f 93       	push	r25
    448c:	af 93       	push	r26
    448e:	bf 93       	push	r27
    4490:	ef 93       	push	r30
    4492:	ff 93       	push	r31
    4494:	49 e0       	ldi	r20, 0x09	; 9
    4496:	53 e0       	ldi	r21, 0x03	; 3
    4498:	67 e4       	ldi	r22, 0x47	; 71
    449a:	72 e0       	ldi	r23, 0x02	; 2
    449c:	80 e0       	ldi	r24, 0x00	; 0
    449e:	0e 94 af 24 	call	0x495e	; 0x495e <PlatformAssert>
    44a2:	ff 91       	pop	r31
    44a4:	ef 91       	pop	r30
    44a6:	bf 91       	pop	r27
    44a8:	af 91       	pop	r26
    44aa:	9f 91       	pop	r25
    44ac:	8f 91       	pop	r24
    44ae:	7f 91       	pop	r23
    44b0:	6f 91       	pop	r22
    44b2:	5f 91       	pop	r21
    44b4:	4f 91       	pop	r20
    44b6:	3f 91       	pop	r19
    44b8:	2f 91       	pop	r18
    44ba:	0f 90       	pop	r0
    44bc:	0f be       	out	0x3f, r0	; 63
    44be:	0f 90       	pop	r0
    44c0:	1f 90       	pop	r1
    44c2:	18 95       	reti

Disassembly of section .text.__vector_23:

00003840 <__vector_23>:
    3840:	78 94       	sei
    3842:	1f 92       	push	r1
    3844:	0f 92       	push	r0
    3846:	0f b6       	in	r0, 0x3f	; 63
    3848:	0f 92       	push	r0
    384a:	11 24       	eor	r1, r1
    384c:	2f 93       	push	r18
    384e:	3f 93       	push	r19
    3850:	4f 93       	push	r20
    3852:	5f 93       	push	r21
    3854:	6f 93       	push	r22
    3856:	7f 93       	push	r23
    3858:	8f 93       	push	r24
    385a:	9f 93       	push	r25
    385c:	af 93       	push	r26
    385e:	bf 93       	push	r27
    3860:	ef 93       	push	r30
    3862:	ff 93       	push	r31
    3864:	96 b1       	in	r25, 0x06	; 6
    3866:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    386a:	83 30       	cpi	r24, 0x03	; 3
    386c:	21 f0       	breq	.+8      	; 0x3876 <__vector_23+0x36>
    386e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    3872:	82 30       	cpi	r24, 0x02	; 2
    3874:	c9 f4       	brne	.+50     	; 0x38a8 <__vector_23+0x68>
    3876:	91 ff       	sbrs	r25, 1
    3878:	17 c0       	rjmp	.+46     	; 0x38a8 <__vector_23+0x68>
    387a:	88 b1       	in	r24, 0x08	; 8
    387c:	8f 7e       	andi	r24, 0xEF	; 239
    387e:	88 b9       	out	0x08, r24	; 8
    3880:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    3884:	83 30       	cpi	r24, 0x03	; 3
    3886:	19 f4       	brne	.+6      	; 0x388e <__vector_23+0x4e>
    3888:	81 e0       	ldi	r24, 0x01	; 1
    388a:	0e 94 09 28 	call	0x5012	; 0x5012 <ModuleControllerStateSet>
    388e:	eb e6       	ldi	r30, 0x6B	; 107
    3890:	f0 e0       	ldi	r31, 0x00	; 0
    3892:	80 81       	ld	r24, Z
    3894:	8d 7f       	andi	r24, 0xFD	; 253
    3896:	80 83       	st	Z, r24
    3898:	e8 e6       	ldi	r30, 0x68	; 104
    389a:	f0 e0       	ldi	r31, 0x00	; 0
    389c:	80 81       	ld	r24, Z
    389e:	8d 7f       	andi	r24, 0xFD	; 253
    38a0:	80 83       	st	Z, r24
    38a2:	81 e0       	ldi	r24, 0x01	; 1
    38a4:	80 93 17 03 	sts	0x0317, r24	; 0x800317 <sg_bOvercurrentSignal>
    38a8:	ff 91       	pop	r31
    38aa:	ef 91       	pop	r30
    38ac:	bf 91       	pop	r27
    38ae:	af 91       	pop	r26
    38b0:	9f 91       	pop	r25
    38b2:	8f 91       	pop	r24
    38b4:	7f 91       	pop	r23
    38b6:	6f 91       	pop	r22
    38b8:	5f 91       	pop	r21
    38ba:	4f 91       	pop	r20
    38bc:	3f 91       	pop	r19
    38be:	2f 91       	pop	r18
    38c0:	0f 90       	pop	r0
    38c2:	0f be       	out	0x3f, r0	; 63
    38c4:	0f 90       	pop	r0
    38c6:	1f 90       	pop	r1
    38c8:	18 95       	reti

Disassembly of section .text.__vector_24:

000044c4 <__vector_24>:
    44c4:	78 94       	sei
    44c6:	1f 92       	push	r1
    44c8:	0f 92       	push	r0
    44ca:	0f b6       	in	r0, 0x3f	; 63
    44cc:	0f 92       	push	r0
    44ce:	11 24       	eor	r1, r1
    44d0:	2f 93       	push	r18
    44d2:	3f 93       	push	r19
    44d4:	4f 93       	push	r20
    44d6:	5f 93       	push	r21
    44d8:	6f 93       	push	r22
    44da:	7f 93       	push	r23
    44dc:	8f 93       	push	r24
    44de:	9f 93       	push	r25
    44e0:	af 93       	push	r26
    44e2:	bf 93       	push	r27
    44e4:	ef 93       	push	r30
    44e6:	ff 93       	push	r31
    44e8:	8b b1       	in	r24, 0x0b	; 11
    44ea:	0e 94 2b 27 	call	0x4e56	; 0x4e56 <Check5VLoss>
    44ee:	ff 91       	pop	r31
    44f0:	ef 91       	pop	r30
    44f2:	bf 91       	pop	r27
    44f4:	af 91       	pop	r26
    44f6:	9f 91       	pop	r25
    44f8:	8f 91       	pop	r24
    44fa:	7f 91       	pop	r23
    44fc:	6f 91       	pop	r22
    44fe:	5f 91       	pop	r21
    4500:	4f 91       	pop	r20
    4502:	3f 91       	pop	r19
    4504:	2f 91       	pop	r18
    4506:	0f 90       	pop	r0
    4508:	0f be       	out	0x3f, r0	; 63
    450a:	0f 90       	pop	r0
    450c:	1f 90       	pop	r1
    450e:	18 95       	reti

Disassembly of section .text.vUARTRXStart:

00004eb4 <vUARTRXStart>:
}

// Called at the start of cell string data via MC RX
void vUARTRXStart(void)
{
	sg_u8CellBufferRX = 0;
    4eb4:	10 92 7d 09 	sts	0x097D, r1	; 0x80097d <sg_u8CellBufferRX>
	sg_u8CellIndex = 0;
    4eb8:	10 92 7e 09 	sts	0x097E, r1	; 0x80097e <sg_u8CellIndex>
	sg_u16BytesReceived = 0;
    4ebc:	10 92 67 09 	sts	0x0967, r1	; 0x800967 <sg_u16BytesReceived+0x1>
    4ec0:	10 92 66 09 	sts	0x0966, r1	; 0x800966 <sg_u16BytesReceived>
	sg_u8CellReports = 0;
    4ec4:	10 92 7c 09 	sts	0x097C, r1	; 0x80097c <sg_u8CellReports>
    4ec8:	08 95       	ret

Disassembly of section .text.vUARTRXEnd:

00004d5a <vUARTRXEnd>:
	// disable the edge interrupt
//	VUART_RX_DISABLE();
	// disable bit timer interrupt, should already be off but just in case
//	TIMER_CHB_INT_DISABLE();
	// update bytes and cells received
	sg_sFrame.sg_u16BytesReceived = sg_u16BytesReceived;
    4d5a:	80 91 66 09 	lds	r24, 0x0966	; 0x800966 <sg_u16BytesReceived>
    4d5e:	90 91 67 09 	lds	r25, 0x0967	; 0x800967 <sg_u16BytesReceived+0x1>
    4d62:	ec e0       	ldi	r30, 0x0C	; 12
    4d64:	f1 e0       	ldi	r31, 0x01	; 1
    4d66:	94 a7       	std	Z+44, r25	; 0x2c
    4d68:	83 a7       	std	Z+43, r24	; 0x2b
	sg_sFrame.sg_u8CellCPUCount = sg_u8CellReports;
    4d6a:	80 91 7c 09 	lds	r24, 0x097C	; 0x80097c <sg_u8CellReports>
    4d6e:	85 a7       	std	Z+45, r24	; 0x2d
	sg_u16BytesReceived = 0;
    4d70:	10 92 67 09 	sts	0x0967, r1	; 0x800967 <sg_u16BytesReceived+0x1>
    4d74:	10 92 66 09 	sts	0x0966, r1	; 0x800966 <sg_u16BytesReceived>
	sg_u8CellReports = 0;
    4d78:	10 92 7c 09 	sts	0x097C, r1	; 0x80097c <sg_u8CellReports>
    4d7c:	08 95       	ret

Disassembly of section .text.vUARTRXData:

00003dd8 <vUARTRXData>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    3dd8:	e0 91 7d 09 	lds	r30, 0x097D	; 0x80097d <sg_u8CellBufferRX>
    3ddc:	21 e0       	ldi	r18, 0x01	; 1
    3dde:	2e 0f       	add	r18, r30
    3de0:	20 93 7d 09 	sts	0x097D, r18	; 0x80097d <sg_u8CellBufferRX>
    3de4:	f0 e0       	ldi	r31, 0x00	; 0
    3de6:	e0 5b       	subi	r30, 0xB0	; 176
    3de8:	f6 4f       	sbci	r31, 0xF6	; 246
    3dea:	80 83       	st	Z, r24
    3dec:	80 91 66 09 	lds	r24, 0x0966	; 0x800966 <sg_u16BytesReceived>
    3df0:	90 91 67 09 	lds	r25, 0x0967	; 0x800967 <sg_u16BytesReceived+0x1>
    3df4:	01 96       	adiw	r24, 0x01	; 1
    3df6:	90 93 67 09 	sts	0x0967, r25	; 0x800967 <sg_u16BytesReceived+0x1>
    3dfa:	80 93 66 09 	sts	0x0966, r24	; 0x800966 <sg_u16BytesReceived>
    3dfe:	24 30       	cpi	r18, 0x04	; 4
    3e00:	38 f1       	brcs	.+78     	; 0x3e50 <vUARTRXData+0x78>
    3e02:	10 92 7d 09 	sts	0x097D, r1	; 0x80097d <sg_u8CellBufferRX>
    3e06:	80 91 7e 09 	lds	r24, 0x097E	; 0x80097e <sg_u8CellIndex>
    3e0a:	8c 36       	cpi	r24, 0x6C	; 108
    3e0c:	08 f5       	brcc	.+66     	; 0x3e50 <vUARTRXData+0x78>
    3e0e:	e8 2f       	mov	r30, r24
    3e10:	f0 e0       	ldi	r31, 0x00	; 0
    3e12:	75 96       	adiw	r30, 0x15	; 21
    3e14:	ee 0f       	add	r30, r30
    3e16:	ff 1f       	adc	r31, r31
    3e18:	ee 0f       	add	r30, r30
    3e1a:	ff 1f       	adc	r31, r31
    3e1c:	e4 5f       	subi	r30, 0xF4	; 244
    3e1e:	fe 4f       	sbci	r31, 0xFE	; 254
    3e20:	a0 e5       	ldi	r26, 0x50	; 80
    3e22:	b9 e0       	ldi	r27, 0x09	; 9
    3e24:	4d 91       	ld	r20, X+
    3e26:	5d 91       	ld	r21, X+
    3e28:	6d 91       	ld	r22, X+
    3e2a:	7c 91       	ld	r23, X
    3e2c:	13 97       	sbiw	r26, 0x03	; 3
    3e2e:	41 83       	std	Z+1, r20	; 0x01
    3e30:	52 83       	std	Z+2, r21	; 0x02
    3e32:	63 83       	std	Z+3, r22	; 0x03
    3e34:	74 83       	std	Z+4, r23	; 0x04
    3e36:	1d 92       	st	X+, r1
    3e38:	1d 92       	st	X+, r1
    3e3a:	1d 92       	st	X+, r1
    3e3c:	1c 92       	st	X, r1
    3e3e:	13 97       	sbiw	r26, 0x03	; 3
    3e40:	8f 5f       	subi	r24, 0xFF	; 255
    3e42:	80 93 7e 09 	sts	0x097E, r24	; 0x80097e <sg_u8CellIndex>
    3e46:	80 91 7c 09 	lds	r24, 0x097C	; 0x80097c <sg_u8CellReports>
    3e4a:	8f 5f       	subi	r24, 0xFF	; 255
    3e4c:	80 93 7c 09 	sts	0x097C, r24	; 0x80097c <sg_u8CellReports>
    3e50:	08 95       	ret

Disassembly of section .text.PlatformGetSendData:

00004a34 <PlatformGetSendData>:
uint16_t PlatformGetSendData( bool bUpdateBalanceStatus )
{
	uint16_t u16SendValue = 0;
	
	
	if( sg_bStopDischarge )
    4a34:	90 91 18 03 	lds	r25, 0x0318	; 0x800318 <sg_bStopDischarge>
    4a38:	99 23       	and	r25, r25
    4a3a:	51 f0       	breq	.+20     	; 0x4a50 <PlatformGetSendData+0x1c>
	{
		if (bUpdateBalanceStatus)	// don't update if ony an availability check
    4a3c:	88 23       	and	r24, r24
    4a3e:	59 f0       	breq	.+22     	; 0x4a56 <PlatformGetSendData+0x22>
		{
			sg_bStopDischarge = false;
    4a40:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <sg_bStopDischarge>
			sg_bCellBalancedOnce = true;
    4a44:	81 e0       	ldi	r24, 0x01	; 1
    4a46:	80 93 19 03 	sts	0x0319, r24	; 0x800319 <sg_bCellBalancedOnce>
		}
		u16SendValue = 0x3ff;
    4a4a:	8f ef       	ldi	r24, 0xFF	; 255
    4a4c:	93 e0       	ldi	r25, 0x03	; 3
    4a4e:	08 95       	ret
			}
		}
		else
#endif
		{
			u16SendValue |= MSG_CELL_SEND_REPORT;
    4a50:	80 e0       	ldi	r24, 0x00	; 0
    4a52:	90 e8       	ldi	r25, 0x80	; 128
    4a54:	08 95       	ret
		if (bUpdateBalanceStatus)	// don't update if ony an availability check
		{
			sg_bStopDischarge = false;
			sg_bCellBalancedOnce = true;
		}
		u16SendValue = 0x3ff;
    4a56:	8f ef       	ldi	r24, 0xFF	; 255
    4a58:	93 e0       	ldi	r25, 0x03	; 3
#endif
		}
	}
	
	return( u16SendValue );
}
    4a5a:	08 95       	ret

Disassembly of section .text.ADCCallback:

0000498a <ADCCallback>:
// Called every time there's an ADC read since apparently ISR can't access global variables?  compiler fails
void ADCCallback(EADCType eType,
				 uint16_t u16Reading)
{
	// End of chain? Indicate it's time for an ADC update
	if ((EADCTYPE_COUNT-1) == eType)
    498a:	84 30       	cpi	r24, 0x04	; 4
    498c:	19 f4       	brne	.+6      	; 0x4994 <ADCCallback+0xa>
	{
		sg_bADCUpdate = true;
    498e:	91 e0       	ldi	r25, 0x01	; 1
    4990:	90 93 16 03 	sts	0x0316, r25	; 0x800316 <sg_bADCUpdate>
	}
	sg_sFrame.ADCReadings[eType].u16Reading = u16Reading;
    4994:	90 e0       	ldi	r25, 0x00	; 0
    4996:	9c 01       	movw	r18, r24
    4998:	22 0f       	add	r18, r18
    499a:	33 1f       	adc	r19, r19
    499c:	82 0f       	add	r24, r18
    499e:	93 1f       	adc	r25, r19
    49a0:	84 5f       	subi	r24, 0xF4	; 244
    49a2:	9e 4f       	sbci	r25, 0xFE	; 254
    49a4:	fc 01       	movw	r30, r24
    49a6:	e9 5b       	subi	r30, 0xB9	; 185
    49a8:	ff 4f       	sbci	r31, 0xFF	; 255
    49aa:	71 83       	std	Z+1, r23	; 0x01
    49ac:	60 83       	st	Z, r22
	sg_sFrame.ADCReadings[eType].bValid = true;
    49ae:	31 97       	sbiw	r30, 0x01	; 1
    49b0:	21 e0       	ldi	r18, 0x01	; 1
    49b2:	20 83       	st	Z, r18
    49b4:	08 95       	ret

Disassembly of section .text.FrameInit:

00002f20 <FrameInit>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    2f20:	cf 93       	push	r28
    2f22:	df 93       	push	r29
    2f24:	81 11       	cpse	r24, r1
    2f26:	0d c0       	rjmp	.+26     	; 0x2f42 <FrameInit+0x22>
    2f28:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <sg_sFrame>
    2f2c:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <sg_sFrame+0x1>
    2f30:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <sg_sFrame+0x2>
    2f34:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <sg_sFrame+0x3>
    2f38:	8a 37       	cpi	r24, 0x7A	; 122
    2f3a:	9a 4d       	sbci	r25, 0xDA	; 218
    2f3c:	a7 47       	sbci	r26, 0x77	; 119
    2f3e:	ba 4b       	sbci	r27, 0xBA	; 186
    2f40:	29 f1       	breq	.+74     	; 0x2f8c <FrameInit+0x6c>
    2f42:	cc e0       	ldi	r28, 0x0C	; 12
    2f44:	d1 e0       	ldi	r29, 0x01	; 1
    2f46:	88 e0       	ldi	r24, 0x08	; 8
    2f48:	92 e0       	ldi	r25, 0x02	; 2
    2f4a:	fe 01       	movw	r30, r28
    2f4c:	9c 01       	movw	r18, r24
    2f4e:	11 92       	st	Z+, r1
    2f50:	21 50       	subi	r18, 0x01	; 1
    2f52:	30 40       	sbci	r19, 0x00	; 0
    2f54:	e1 f7       	brne	.-8      	; 0x2f4e <FrameInit+0x2e>
    2f56:	9d 83       	std	Y+5, r25	; 0x05
    2f58:	8c 83       	std	Y+4, r24	; 0x04
    2f5a:	8a e7       	ldi	r24, 0x7A	; 122
    2f5c:	9a ed       	ldi	r25, 0xDA	; 218
    2f5e:	a7 e7       	ldi	r26, 0x77	; 119
    2f60:	ba eb       	ldi	r27, 0xBA	; 186
    2f62:	88 83       	st	Y, r24
    2f64:	99 83       	std	Y+1, r25	; 0x01
    2f66:	aa 83       	std	Y+2, r26	; 0x02
    2f68:	bb 83       	std	Y+3, r27	; 0x03
    2f6a:	0e 94 b5 1d 	call	0x3b6a	; 0x3b6a <ModuleControllerGetUniqueID>
    2f6e:	6e 87       	std	Y+14, r22	; 0x0e
    2f70:	7f 87       	std	Y+15, r23	; 0x0f
    2f72:	88 8b       	std	Y+16, r24	; 0x10
    2f74:	99 8b       	std	Y+17, r25	; 0x11
    2f76:	8f ef       	ldi	r24, 0xFF	; 255
    2f78:	8a a7       	std	Y+42, r24	; 0x2a
    2f7a:	8b 8b       	std	Y+19, r24	; 0x13
    2f7c:	1c 8a       	std	Y+20, r1	; 0x14
    2f7e:	84 e0       	ldi	r24, 0x04	; 4
    2f80:	90 e0       	ldi	r25, 0x00	; 0
    2f82:	0e 94 8f 27 	call	0x4f1e	; 0x4f1e <EEPROMRead>
    2f86:	0e 94 be 18 	call	0x317c	; 0x317c <CellCountExpectedSet>
    2f8a:	2a c0       	rjmp	.+84     	; 0x2fe0 <FrameInit+0xc0>
    2f8c:	ec e0       	ldi	r30, 0x0C	; 12
    2f8e:	f1 e0       	ldi	r31, 0x01	; 1
    2f90:	17 a2       	std	Z+39, r1	; 0x27
    2f92:	11 a6       	std	Z+41, r1	; 0x29
    2f94:	10 a6       	std	Z+40, r1	; 0x28
    2f96:	12 a6       	std	Z+42, r1	; 0x2a
    2f98:	15 a6       	std	Z+45, r1	; 0x2d
    2f9a:	16 a6       	std	Z+46, r1	; 0x2e
    2f9c:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <sg_sFrame+0x3e>
    2fa0:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <sg_sFrame+0x3f>
    2fa4:	a0 91 4c 01 	lds	r26, 0x014C	; 0x80014c <sg_sFrame+0x40>
    2fa8:	b0 91 4d 01 	lds	r27, 0x014D	; 0x80014d <sg_sFrame+0x41>
    2fac:	89 2b       	or	r24, r25
    2fae:	8a 2b       	or	r24, r26
    2fb0:	8b 2b       	or	r24, r27
    2fb2:	b1 f4       	brne	.+44     	; 0x2fe0 <FrameInit+0xc0>
    2fb4:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <sg_sFrame+0x3e>
    2fb8:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <sg_sFrame+0x3f>
    2fbc:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <sg_sFrame+0x40>
    2fc0:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <sg_sFrame+0x41>
    2fc4:	11 ae       	std	Z+57, r1	; 0x39
    2fc6:	10 ae       	std	Z+56, r1	; 0x38
    2fc8:	13 ae       	std	Z+59, r1	; 0x3b
    2fca:	12 ae       	std	Z+58, r1	; 0x3a
    2fcc:	15 ae       	std	Z+61, r1	; 0x3d
    2fce:	14 ae       	std	Z+60, r1	; 0x3c
    2fd0:	8f e9       	ldi	r24, 0x9F	; 159
    2fd2:	95 e1       	ldi	r25, 0x15	; 21
    2fd4:	93 ab       	std	Z+51, r25	; 0x33
    2fd6:	82 ab       	std	Z+50, r24	; 0x32
    2fd8:	95 ab       	std	Z+53, r25	; 0x35
    2fda:	84 ab       	std	Z+52, r24	; 0x34
    2fdc:	97 ab       	std	Z+55, r25	; 0x37
    2fde:	86 ab       	std	Z+54, r24	; 0x36
    2fe0:	8f ef       	ldi	r24, 0xFF	; 255
    2fe2:	80 93 86 09 	sts	0x0986, r24	; 0x800986 <sg_u8CurrentBufferIndex>
    2fe6:	df 91       	pop	r29
    2fe8:	cf 91       	pop	r28
    2fea:	08 95       	ret

Disassembly of section .text.CellStringPowerStateMachine:

00003954 <CellStringPowerStateMachine>:
    3954:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <sg_eStringPowerState>
    3958:	82 30       	cpi	r24, 0x02	; 2
    395a:	49 f1       	breq	.+82     	; 0x39ae <CellStringPowerStateMachine+0x5a>
    395c:	28 f4       	brcc	.+10     	; 0x3968 <CellStringPowerStateMachine+0x14>
    395e:	88 23       	and	r24, r24
    3960:	41 f0       	breq	.+16     	; 0x3972 <CellStringPowerStateMachine+0x1e>
    3962:	81 30       	cpi	r24, 0x01	; 1
    3964:	91 f0       	breq	.+36     	; 0x398a <CellStringPowerStateMachine+0x36>
    3966:	32 c0       	rjmp	.+100    	; 0x39cc <CellStringPowerStateMachine+0x78>
    3968:	83 30       	cpi	r24, 0x03	; 3
    396a:	61 f1       	breq	.+88     	; 0x39c4 <CellStringPowerStateMachine+0x70>
    396c:	84 30       	cpi	r24, 0x04	; 4
    396e:	a9 f1       	breq	.+106    	; 0x39da <CellStringPowerStateMachine+0x86>
    3970:	2d c0       	rjmp	.+90     	; 0x39cc <CellStringPowerStateMachine+0x78>
    3972:	85 b1       	in	r24, 0x05	; 5
    3974:	8f 7e       	andi	r24, 0xEF	; 239
    3976:	85 b9       	out	0x05, r24	; 5
    3978:	81 e0       	ldi	r24, 0x01	; 1
    397a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <sg_eStringPowerState>
    397e:	80 e0       	ldi	r24, 0x00	; 0
    3980:	0e 94 90 17 	call	0x2f20	; 0x2f20 <FrameInit>
    3984:	0e 94 bc 27 	call	0x4f78	; 0x4f78 <SendModuleControllerStatus>
    3988:	08 95       	ret
    398a:	85 b1       	in	r24, 0x05	; 5
    398c:	8f 7e       	andi	r24, 0xEF	; 239
    398e:	85 b9       	out	0x05, r24	; 5
    3990:	80 e0       	ldi	r24, 0x00	; 0
    3992:	0e 94 90 17 	call	0x2f20	; 0x2f20 <FrameInit>
    3996:	82 e0       	ldi	r24, 0x02	; 2
    3998:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <sg_eStringPowerState>
    399c:	81 e0       	ldi	r24, 0x01	; 1
    399e:	80 93 80 09 	sts	0x0980, r24	; 0x800980 <sg_u8CellStringPowerTimer>
    39a2:	ec e0       	ldi	r30, 0x0C	; 12
    39a4:	f1 e0       	ldi	r31, 0x01	; 1
    39a6:	8f ef       	ldi	r24, 0xFF	; 255
    39a8:	83 8b       	std	Z+19, r24	; 0x13
    39aa:	14 8a       	std	Z+20, r1	; 0x14
    39ac:	08 95       	ret
    39ae:	80 91 80 09 	lds	r24, 0x0980	; 0x800980 <sg_u8CellStringPowerTimer>
    39b2:	81 11       	cpse	r24, r1
    39b4:	12 c0       	rjmp	.+36     	; 0x39da <CellStringPowerStateMachine+0x86>
    39b6:	85 b1       	in	r24, 0x05	; 5
    39b8:	80 61       	ori	r24, 0x10	; 16
    39ba:	85 b9       	out	0x05, r24	; 5
    39bc:	83 e0       	ldi	r24, 0x03	; 3
    39be:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <sg_eStringPowerState>
    39c2:	08 95       	ret
    39c4:	84 e0       	ldi	r24, 0x04	; 4
    39c6:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <sg_eStringPowerState>
    39ca:	08 95       	ret
    39cc:	40 e7       	ldi	r20, 0x70	; 112
    39ce:	52 e0       	ldi	r21, 0x02	; 2
    39d0:	67 e4       	ldi	r22, 0x47	; 71
    39d2:	72 e0       	ldi	r23, 0x02	; 2
    39d4:	80 e0       	ldi	r24, 0x00	; 0
    39d6:	0e 94 af 24 	call	0x495e	; 0x495e <PlatformAssert>
    39da:	08 95       	ret

Disassembly of section .text.main:

00000c14 <main>:
 c14:	cf 93       	push	r28
 c16:	df 93       	push	r29
 c18:	cd b7       	in	r28, 0x3d	; 61
 c1a:	de b7       	in	r29, 0x3e	; 62
 c1c:	28 97       	sbiw	r28, 0x08	; 8
 c1e:	0f b6       	in	r0, 0x3f	; 63
 c20:	f8 94       	cli
 c22:	de bf       	out	0x3e, r29	; 62
 c24:	0f be       	out	0x3f, r0	; 63
 c26:	cd bf       	out	0x3d, r28	; 61
 c28:	0e 94 1e 27 	call	0x4e3c	; 0x4e3c <WatchdogOff>
 c2c:	88 b1       	in	r24, 0x08	; 8
 c2e:	8f 7e       	andi	r24, 0xEF	; 239
 c30:	88 b9       	out	0x08, r24	; 8
 c32:	87 b1       	in	r24, 0x07	; 7
 c34:	80 61       	ori	r24, 0x10	; 16
 c36:	87 b9       	out	0x07, r24	; 7
 c38:	87 b1       	in	r24, 0x07	; 7
 c3a:	8d 7f       	andi	r24, 0xFD	; 253
 c3c:	87 b9       	out	0x07, r24	; 7
 c3e:	87 b1       	in	r24, 0x07	; 7
 c40:	80 68       	ori	r24, 0x80	; 128
 c42:	87 b9       	out	0x07, r24	; 7
 c44:	88 b1       	in	r24, 0x08	; 8
 c46:	8f 7e       	andi	r24, 0xEF	; 239
 c48:	88 b9       	out	0x08, r24	; 8
 c4a:	8d b1       	in	r24, 0x0d	; 13
 c4c:	82 60       	ori	r24, 0x02	; 2
 c4e:	8d b9       	out	0x0d, r24	; 13
 c50:	8e b1       	in	r24, 0x0e	; 14
 c52:	8d 7f       	andi	r24, 0xFD	; 253
 c54:	8e b9       	out	0x0e, r24	; 14
 c56:	84 b1       	in	r24, 0x04	; 4
 c58:	80 61       	ori	r24, 0x10	; 16
 c5a:	84 b9       	out	0x04, r24	; 4
 c5c:	85 b1       	in	r24, 0x05	; 5
 c5e:	8f 7e       	andi	r24, 0xEF	; 239
 c60:	85 b9       	out	0x05, r24	; 5
 c62:	84 b7       	in	r24, 0x34	; 52
 c64:	80 93 7a 09 	sts	0x097A, r24	; 0x80097a <sg_u8Reason>
 c68:	80 91 7a 09 	lds	r24, 0x097A	; 0x80097a <sg_u8Reason>
 c6c:	83 ff       	sbrs	r24, 3
 c6e:	0a c0       	rjmp	.+20     	; 0xc84 <main+0x70>
 c70:	80 91 28 03 	lds	r24, 0x0328	; 0x800328 <sg_eWDTCurrentStatus>
 c74:	ec e0       	ldi	r30, 0x0C	; 12
 c76:	f1 e0       	ldi	r31, 0x01	; 1
 c78:	82 89       	ldd	r24, Z+18	; 0x12
 c7a:	8f 5f       	subi	r24, 0xFF	; 255
 c7c:	82 8b       	std	Z+18, r24	; 0x12
 c7e:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <ModuleControllerStateHandle>
 c82:	68 c0       	rjmp	.+208    	; 0xd54 <main+0x140>
 c84:	80 91 7a 09 	lds	r24, 0x097A	; 0x80097a <sg_u8Reason>
 c88:	80 91 7a 09 	lds	r24, 0x097A	; 0x80097a <sg_u8Reason>
 c8c:	80 91 7a 09 	lds	r24, 0x097A	; 0x80097a <sg_u8Reason>
 c90:	f8 94       	cli
 c92:	0e 94 fe 27 	call	0x4ffc	; 0x4ffc <SetSysclock>
 c96:	0e 94 10 22 	call	0x4420	; 0x4420 <TimerInit>
 c9a:	0e 94 86 23 	call	0x470c	; 0x470c <vUARTInit>
 c9e:	0e 94 10 12 	call	0x2420	; 0x2420 <ADCInit>
 ca2:	0e 94 74 1d 	call	0x3ae8	; 0x3ae8 <STORE_Init>
 ca6:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <sg_bSDCardReady>
 caa:	81 e0       	ldi	r24, 0x01	; 1
 cac:	0e 94 90 17 	call	0x2f20	; 0x2f20 <FrameInit>
 cb0:	8a b1       	in	r24, 0x0a	; 10
 cb2:	8f 7b       	andi	r24, 0xBF	; 191
 cb4:	8a b9       	out	0x0a, r24	; 10
 cb6:	8b b1       	in	r24, 0x0b	; 11
 cb8:	80 64       	ori	r24, 0x40	; 64
 cba:	8b b9       	out	0x0b, r24	; 11
 cbc:	11 e0       	ldi	r17, 0x01	; 1
 cbe:	1b bb       	out	0x1b, r17	; 27
 cc0:	82 e0       	ldi	r24, 0x02	; 2
 cc2:	8b bb       	out	0x1b, r24	; 27
 cc4:	84 e0       	ldi	r24, 0x04	; 4
 cc6:	8b bb       	out	0x1b, r24	; 27
 cc8:	88 e0       	ldi	r24, 0x08	; 8
 cca:	8b bb       	out	0x1b, r24	; 27
 ccc:	ec e6       	ldi	r30, 0x6C	; 108
 cce:	f0 e0       	ldi	r31, 0x00	; 0
 cd0:	80 81       	ld	r24, Z
 cd2:	80 64       	ori	r24, 0x40	; 64
 cd4:	80 83       	st	Z, r24
 cd6:	8b b3       	in	r24, 0x1b	; 27
 cd8:	84 60       	ori	r24, 0x04	; 4
 cda:	8b bb       	out	0x1b, r24	; 27
 cdc:	8c ec       	ldi	r24, 0xCC	; 204
 cde:	98 e0       	ldi	r25, 0x08	; 8
 ce0:	0e 94 04 28 	call	0x5008	; 0x5008 <CANSetRXCallback>
 ce4:	0e 94 88 1b 	call	0x3710	; 0x3710 <CANInit>
 ce8:	10 92 27 03 	sts	0x0327, r1	; 0x800327 <sg_u8ModuleRegistrationID>
 cec:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <sg_bModuleRegistered>
 cf0:	10 92 83 09 	sts	0x0983, r1	; 0x800983 <sg_bIgnoreStatusRequests>
 cf4:	80 e0       	ldi	r24, 0x00	; 0
 cf6:	0e 94 09 28 	call	0x5012	; 0x5012 <ModuleControllerStateSet>
 cfa:	10 93 22 03 	sts	0x0322, r17	; 0x800322 <sg_bSendAnnouncement>
 cfe:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <sg_bPackControllerTimeout>
 d02:	10 92 1e 03 	sts	0x031E, r1	; 0x80031e <sg_bSendModuleControllerStatus>
 d06:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <sg_bSendCellStatus>
 d0a:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <sg_bSendHardwareDetail>
 d0e:	10 92 1b 03 	sts	0x031B, r1	; 0x80031b <sg_bSendCellCommStatus>
 d12:	10 92 1a 03 	sts	0x031A, r1	; 0x80031a <sg_bCellBalanceReady>
 d16:	10 92 19 03 	sts	0x0319, r1	; 0x800319 <sg_bCellBalancedOnce>
 d1a:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <sg_bStopDischarge>
 d1e:	10 92 17 03 	sts	0x0317, r1	; 0x800317 <sg_bOvercurrentSignal>
 d22:	10 92 24 03 	sts	0x0324, r1	; 0x800324 <sg_u8CellStatusTarget>
 d26:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <sg_u8CellStatus>
 d2a:	10 92 26 03 	sts	0x0326, r1	; 0x800326 <sg_u8SOC>
 d2e:	10 92 25 03 	sts	0x0325, r1	; 0x800325 <sg_u8SOH>
 d32:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <sg_u8SequentailCellCountMismatches>
 d36:	0e 94 43 0b 	call	0x1686	; 0x1686 <RTCInit>
 d3a:	85 e0       	ldi	r24, 0x05	; 5
 d3c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <sg_eModuleControllerStateCurrent>
 d40:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <sg_eModuleControllerStateTarget>
 d44:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <sg_eModuleControllerStateMax>
 d48:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <sg_bModuleRegistered>
 d4c:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <sg_eStringPowerState>
 d50:	10 93 0b 01 	sts	0x010B, r17	; 0x80010b <sg_eFrameStatus>
 d54:	78 94       	sei
 d56:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <sg_bNewTick>
 d5a:	88 23       	and	r24, r24
 d5c:	e1 f3       	breq	.-8      	; 0xd56 <main+0x142>
 d5e:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <sg_bNewTick>
 d62:	0e 94 3c 1a 	call	0x3478	; 0x3478 <CANCheckTxStatus>
 d66:	0e 94 48 13 	call	0x2690	; 0x2690 <CANCheckHealth>
 d6a:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <sg_bModuleRegistered>
 d6e:	81 11       	cpse	r24, r1
 d70:	22 c0       	rjmp	.+68     	; 0xdb6 <main+0x1a2>
 d72:	80 91 85 09 	lds	r24, 0x0985	; 0x800985 <sg_bAnnouncementPending>
 d76:	88 23       	and	r24, r24
 d78:	11 f1       	breq	.+68     	; 0xdbe <main+0x1aa>
 d7a:	80 91 84 09 	lds	r24, 0x0984	; 0x800984 <sg_u8AnnouncementDelayTicks>
 d7e:	88 23       	and	r24, r24
 d80:	29 f0       	breq	.+10     	; 0xd8c <main+0x178>
 d82:	80 91 84 09 	lds	r24, 0x0984	; 0x800984 <sg_u8AnnouncementDelayTicks>
 d86:	81 50       	subi	r24, 0x01	; 1
 d88:	80 93 84 09 	sts	0x0984, r24	; 0x800984 <sg_u8AnnouncementDelayTicks>
 d8c:	80 91 84 09 	lds	r24, 0x0984	; 0x800984 <sg_u8AnnouncementDelayTicks>
 d90:	81 11       	cpse	r24, r1
 d92:	15 c0       	rjmp	.+42     	; 0xdbe <main+0x1aa>
 d94:	81 e0       	ldi	r24, 0x01	; 1
 d96:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <sg_bSendAnnouncement>
 d9a:	10 92 85 09 	sts	0x0985, r1	; 0x800985 <sg_bAnnouncementPending>
 d9e:	83 e5       	ldi	r24, 0x53	; 83
 da0:	92 e0       	ldi	r25, 0x02	; 2
 da2:	a0 e0       	ldi	r26, 0x00	; 0
 da4:	af 93       	push	r26
 da6:	9f 93       	push	r25
 da8:	8f 93       	push	r24
 daa:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <DebugOut>
 dae:	0f 90       	pop	r0
 db0:	0f 90       	pop	r0
 db2:	0f 90       	pop	r0
 db4:	04 c0       	rjmp	.+8      	; 0xdbe <main+0x1aa>
 db6:	ce 01       	movw	r24, r28
 db8:	01 96       	adiw	r24, 0x01	; 1
 dba:	0e 94 08 04 	call	0x810	; 0x810 <ControllerStatusMessagesSend>
 dbe:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <sg_bPackControllerTimeout>
 dc2:	88 23       	and	r24, r24
 dc4:	81 f0       	breq	.+32     	; 0xde6 <main+0x1d2>
 dc6:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <sg_bPackControllerTimeout>
 dca:	10 92 27 03 	sts	0x0327, r1	; 0x800327 <sg_u8ModuleRegistrationID>
 dce:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <sg_bModuleRegistered>
 dd2:	10 92 83 09 	sts	0x0983, r1	; 0x800983 <sg_bIgnoreStatusRequests>
 dd6:	81 e0       	ldi	r24, 0x01	; 1
 dd8:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <sg_bSendAnnouncement>
 ddc:	0e 94 bc 27 	call	0x4f78	; 0x4f78 <SendModuleControllerStatus>
 de0:	80 e0       	ldi	r24, 0x00	; 0
 de2:	0e 94 09 28 	call	0x5012	; 0x5012 <ModuleControllerStateSet>
 de6:	ef e6       	ldi	r30, 0x6F	; 111
 de8:	f0 e0       	ldi	r31, 0x00	; 0
 dea:	90 81       	ld	r25, Z
 dec:	80 81       	ld	r24, Z
 dee:	8d 7f       	andi	r24, 0xFD	; 253
 df0:	80 83       	st	Z, r24
 df2:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <sg_eFrameStatus>
 df6:	20 91 81 09 	lds	r18, 0x0981	; 0x800981 <sg_bFrameStart>
 dfa:	90 83       	st	Z, r25
 dfc:	81 30       	cpi	r24, 0x01	; 1
 dfe:	09 f0       	breq	.+2      	; 0xe02 <main+0x1ee>
 e00:	57 c0       	rjmp	.+174    	; 0xeb0 <main+0x29c>
 e02:	22 23       	and	r18, r18
 e04:	09 f4       	brne	.+2      	; 0xe08 <main+0x1f4>
 e06:	4b c0       	rjmp	.+150    	; 0xe9e <main+0x28a>
 e08:	10 92 81 09 	sts	0x0981, r1	; 0x800981 <sg_bFrameStart>
 e0c:	0e 94 aa 1c 	call	0x3954	; 0x3954 <CellStringPowerStateMachine>
 e10:	0e 94 ad 26 	call	0x4d5a	; 0x4d5a <vUARTRXEnd>
 e14:	ce 01       	movw	r24, r28
 e16:	01 96       	adiw	r24, 0x01	; 1
 e18:	0e 94 76 07 	call	0xeec	; 0xeec <CellStringProcess>
 e1c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <sg_eStringPowerState>
 e20:	84 30       	cpi	r24, 0x04	; 4
 e22:	d9 f4       	brne	.+54     	; 0xe5a <main+0x246>
 e24:	ec e0       	ldi	r30, 0x0C	; 12
 e26:	f1 e0       	ldi	r31, 0x01	; 1
 e28:	95 a5       	ldd	r25, Z+45	; 0x2d
 e2a:	85 89       	ldd	r24, Z+21	; 0x15
 e2c:	98 17       	cp	r25, r24
 e2e:	99 f0       	breq	.+38     	; 0xe56 <main+0x242>
 e30:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <sg_sFrame+0x15>
 e34:	88 23       	and	r24, r24
 e36:	79 f0       	breq	.+30     	; 0xe56 <main+0x242>
 e38:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <sg_u8SequentailCellCountMismatches>
 e3c:	8f 5f       	subi	r24, 0xFF	; 255
 e3e:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <sg_u8SequentailCellCountMismatches>
 e42:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <sg_u8SequentailCellCountMismatches>
 e46:	85 30       	cpi	r24, 0x05	; 5
 e48:	40 f0       	brcs	.+16     	; 0xe5a <main+0x246>
 e4a:	81 e0       	ldi	r24, 0x01	; 1
 e4c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <sg_eStringPowerState>
 e50:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <sg_u8SequentailCellCountMismatches>
 e54:	02 c0       	rjmp	.+4      	; 0xe5a <main+0x246>
 e56:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <sg_u8SequentailCellCountMismatches>
 e5a:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <sg_bSendAnnouncement>
 e5e:	88 23       	and	r24, r24
 e60:	f1 f0       	breq	.+60     	; 0xe9e <main+0x28a>
 e62:	86 e5       	ldi	r24, 0x56	; 86
 e64:	89 83       	std	Y+1, r24	; 0x01
 e66:	80 e2       	ldi	r24, 0x20	; 32
 e68:	8a 83       	std	Y+2, r24	; 0x02
 e6a:	82 e0       	ldi	r24, 0x02	; 2
 e6c:	8b 83       	std	Y+3, r24	; 0x03
 e6e:	83 e0       	ldi	r24, 0x03	; 3
 e70:	8c 83       	std	Y+4, r24	; 0x04
 e72:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <sg_sFrame+0xe>
 e76:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <sg_sFrame+0xf>
 e7a:	a0 91 1c 01 	lds	r26, 0x011C	; 0x80011c <sg_sFrame+0x10>
 e7e:	b0 91 1d 01 	lds	r27, 0x011D	; 0x80011d <sg_sFrame+0x11>
 e82:	8d 83       	std	Y+5, r24	; 0x05
 e84:	9e 83       	std	Y+6, r25	; 0x06
 e86:	af 83       	std	Y+7, r26	; 0x07
 e88:	b8 87       	std	Y+8, r27	; 0x08
 e8a:	48 e0       	ldi	r20, 0x08	; 8
 e8c:	be 01       	movw	r22, r28
 e8e:	6f 5f       	subi	r22, 0xFF	; 255
 e90:	7f 4f       	sbci	r23, 0xFF	; 255
 e92:	80 e0       	ldi	r24, 0x00	; 0
 e94:	0e 94 55 24 	call	0x48aa	; 0x48aa <CANSendMessage>
 e98:	81 11       	cpse	r24, r1
 e9a:	10 92 22 03 	sts	0x0322, r1	; 0x800322 <sg_bSendAnnouncement>
 e9e:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <ModuleControllerStateHandle>
 ea2:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <sg_bOvercurrentSignal>
 ea6:	88 23       	and	r24, r24
 ea8:	b1 f0       	breq	.+44     	; 0xed6 <main+0x2c2>
 eaa:	10 92 17 03 	sts	0x0317, r1	; 0x800317 <sg_bOvercurrentSignal>
 eae:	13 c0       	rjmp	.+38     	; 0xed6 <main+0x2c2>
 eb0:	22 23       	and	r18, r18
 eb2:	89 f0       	breq	.+34     	; 0xed6 <main+0x2c2>
 eb4:	10 92 81 09 	sts	0x0981, r1	; 0x800981 <sg_bFrameStart>
 eb8:	0e 94 aa 1c 	call	0x3954	; 0x3954 <CellStringPowerStateMachine>
 ebc:	80 e0       	ldi	r24, 0x00	; 0
 ebe:	0e 94 90 17 	call	0x2f20	; 0x2f20 <FrameInit>
 ec2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <sg_eStringPowerState>
 ec6:	84 30       	cpi	r24, 0x04	; 4
 ec8:	31 f4       	brne	.+12     	; 0xed6 <main+0x2c2>
 eca:	0e 94 85 27 	call	0x4f0a	; 0x4f0a <vUARTInitReceive>
 ece:	0e 94 0e 28 	call	0x501c	; 0x501c <vUARTRXReset>
 ed2:	0e 94 3d 21 	call	0x427a	; 0x427a <vUARTStarttx>
 ed6:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <sg_bADCUpdate>
 eda:	88 23       	and	r24, r24
 edc:	21 f0       	breq	.+8      	; 0xee6 <main+0x2d2>
 ede:	10 92 16 03 	sts	0x0316, r1	; 0x800316 <sg_bADCUpdate>
 ee2:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <ModuleCurrentConvertReadings>
 ee6:	0e 94 f1 24 	call	0x49e2	; 0x49e2 <ADCStartConversion>
 eea:	35 cf       	rjmp	.-406    	; 0xd56 <main+0x142>

Disassembly of section .text.IsLeapYear:

00004778 <IsLeapYear>:
	return( bResult );
}

// Returns true if u16Year is a leap year
static bool IsLeapYear(uint16_t u16Year)
{
    4778:	9c 01       	movw	r18, r24
	bool bLeapYear = false;
	
	if ((u16Year % 400) == 0)
    477a:	60 e9       	ldi	r22, 0x90	; 144
    477c:	71 e0       	ldi	r23, 0x01	; 1
    477e:	0e 94 2e 25 	call	0x4a5c	; 0x4a5c <__udivmodhi4>
    4782:	89 2b       	or	r24, r25
    4784:	69 f0       	breq	.+26     	; 0x47a0 <IsLeapYear+0x28>
	{
		bLeapYear = true;
	}
	else
	if ((u16Year % 100) == 0)
    4786:	c9 01       	movw	r24, r18
    4788:	64 e6       	ldi	r22, 0x64	; 100
    478a:	70 e0       	ldi	r23, 0x00	; 0
    478c:	0e 94 2e 25 	call	0x4a5c	; 0x4a5c <__udivmodhi4>
    4790:	89 2b       	or	r24, r25
    4792:	41 f0       	breq	.+16     	; 0x47a4 <IsLeapYear+0x2c>
	{
		// Not a leap year if divisible by 100 but not by 400
	}
	else
	if ((u16Year % 4) == 0)
    4794:	23 70       	andi	r18, 0x03	; 3
    4796:	33 27       	eor	r19, r19
    4798:	23 2b       	or	r18, r19
    479a:	31 f0       	breq	.+12     	; 0x47a8 <IsLeapYear+0x30>
}

// Returns true if u16Year is a leap year
static bool IsLeapYear(uint16_t u16Year)
{
	bool bLeapYear = false;
    479c:	80 e0       	ldi	r24, 0x00	; 0
    479e:	08 95       	ret
	
	if ((u16Year % 400) == 0)
	{
		bLeapYear = true;
    47a0:	81 e0       	ldi	r24, 0x01	; 1
    47a2:	08 95       	ret
}

// Returns true if u16Year is a leap year
static bool IsLeapYear(uint16_t u16Year)
{
	bool bLeapYear = false;
    47a4:	80 e0       	ldi	r24, 0x00	; 0
    47a6:	08 95       	ret
		// Not a leap year if divisible by 100 but not by 400
	}
	else
	if ((u16Year % 4) == 0)
	{
		bLeapYear = true;
    47a8:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return(bLeapYear);
}
    47aa:	08 95       	ret

Disassembly of section .text.RTCStartTransaction:

0000455c <RTCStartTransaction>:
}

static bool RTCStartTransaction( uint8_t u8Address, 
								 bool bRead, 
								 bool bAllowUnstick )
{
    455c:	ff 92       	push	r15
    455e:	0f 93       	push	r16
    4560:	1f 93       	push	r17
    4562:	cf 93       	push	r28
    4564:	df 93       	push	r29
    4566:	f8 2e       	mov	r15, r24
    4568:	06 2f       	mov	r16, r22
    456a:	14 2f       	mov	r17, r20
	bool bResult = false;
	uint8_t u8Tries = RTC_MAX_ADDRESS_TRIES;
    456c:	d3 e0       	ldi	r29, 0x03	; 3

static bool RTCStartTransaction( uint8_t u8Address, 
								 bool bRead, 
								 bool bAllowUnstick )
{
	bool bResult = false;
    456e:	c0 e0       	ldi	r28, 0x00	; 0
	uint8_t u8Tries = RTC_MAX_ADDRESS_TRIES;
	
	while( (false == bResult) && u8Tries )
    4570:	0c c0       	rjmp	.+24     	; 0x458a <RTCStartTransaction+0x2e>
	{
		u8Tries--;
    4572:	d1 50       	subi	r29, 0x01	; 1
		
		bResult = I2CStartTransaction( u8Address, bRead );
    4574:	60 2f       	mov	r22, r16
    4576:	8f 2d       	mov	r24, r15
    4578:	0e 94 06 25 	call	0x4a0c	; 0x4a0c <I2CStartTransaction>
    457c:	c8 2f       	mov	r28, r24
	
		if( false == bAllowUnstick )
    457e:	11 23       	and	r17, r17
    4580:	41 f0       	breq	.+16     	; 0x4592 <RTCStartTransaction+0x36>
		{
			break;
		}
		
		// Unstick and retry on failure
		if( false == bResult )
    4582:	81 11       	cpse	r24, r1
    4584:	02 c0       	rjmp	.+4      	; 0x458a <RTCStartTransaction+0x2e>
		{
			I2CUnstick();
    4586:	0e 94 11 23 	call	0x4622	; 0x4622 <I2CUnstick>
								 bool bAllowUnstick )
{
	bool bResult = false;
	uint8_t u8Tries = RTC_MAX_ADDRESS_TRIES;
	
	while( (false == bResult) && u8Tries )
    458a:	c1 11       	cpse	r28, r1
    458c:	02 c0       	rjmp	.+4      	; 0x4592 <RTCStartTransaction+0x36>
    458e:	d1 11       	cpse	r29, r1
    4590:	f0 cf       	rjmp	.-32     	; 0x4572 <RTCStartTransaction+0x16>
			I2CUnstick();
		}
	}
	
	return( bResult );
}
    4592:	8c 2f       	mov	r24, r28
    4594:	df 91       	pop	r29
    4596:	cf 91       	pop	r28
    4598:	1f 91       	pop	r17
    459a:	0f 91       	pop	r16
    459c:	ff 90       	pop	r15
    459e:	08 95       	ret

Disassembly of section .text.StructTMToHW:

00004326 <StructTMToHW>:
}

// Converts struct tm to SMCP7940NTime structure
static void StructTMToHW(struct tm *psTimeTM,
						 SMCP7940NTime *psTime)
{
    4326:	cf 93       	push	r28
    4328:	df 93       	push	r29
    432a:	dc 01       	movw	r26, r24
    432c:	fb 01       	movw	r30, r22
	memset((void *) psTime, 0, sizeof(*psTime));
    432e:	87 e0       	ldi	r24, 0x07	; 7
    4330:	eb 01       	movw	r28, r22
    4332:	19 92       	st	Y+, r1
    4334:	8a 95       	dec	r24
    4336:	e9 f7       	brne	.-6      	; 0x4332 <StructTMToHW+0xc>
	
	psTime->u8Seconds = psTimeTM->tm_sec;
    4338:	8c 91       	ld	r24, X
    433a:	80 83       	st	Z, r24
	psTime->u8Minutes = psTimeTM->tm_min;
    433c:	12 96       	adiw	r26, 0x02	; 2
    433e:	8c 91       	ld	r24, X
    4340:	12 97       	sbiw	r26, 0x02	; 2
    4342:	81 83       	std	Z+1, r24	; 0x01
	psTime->u8Hours = psTimeTM->tm_hour;
    4344:	14 96       	adiw	r26, 0x04	; 4
    4346:	8c 91       	ld	r24, X
    4348:	14 97       	sbiw	r26, 0x04	; 4
    434a:	82 83       	std	Z+2, r24	; 0x02
	psTime->u8Day = psTimeTM->tm_mday;
    434c:	16 96       	adiw	r26, 0x06	; 6
    434e:	8c 91       	ld	r24, X
    4350:	16 97       	sbiw	r26, 0x06	; 6
    4352:	84 83       	std	Z+4, r24	; 0x04
	psTime->u8Month = psTimeTM->tm_mon;
    4354:	18 96       	adiw	r26, 0x08	; 8
    4356:	8c 91       	ld	r24, X
    4358:	18 97       	sbiw	r26, 0x08	; 8
    435a:	85 83       	std	Z+5, r24	; 0x05
	
	if (psTimeTM->tm_year > (2099-1900))
    435c:	1a 96       	adiw	r26, 0x0a	; 10
    435e:	8d 91       	ld	r24, X+
    4360:	9c 91       	ld	r25, X
    4362:	1b 97       	sbiw	r26, 0x0b	; 11
    4364:	88 3c       	cpi	r24, 0xC8	; 200
    4366:	91 05       	cpc	r25, r1
    4368:	1c f0       	brlt	.+6      	; 0x4370 <StructTMToHW+0x4a>
	{
		psTime->u8Year = psTimeTM->tm_year - 2100;
    436a:	84 53       	subi	r24, 0x34	; 52
    436c:	86 83       	std	Z+6, r24	; 0x06
    436e:	02 c0       	rjmp	.+4      	; 0x4374 <StructTMToHW+0x4e>
	}
	else
	{
		psTime->u8Year = psTimeTM->tm_year - 2000;
    4370:	80 5d       	subi	r24, 0xD0	; 208
    4372:	86 83       	std	Z+6, r24	; 0x06
	}
	
}
    4374:	df 91       	pop	r29
    4376:	cf 91       	pop	r28
    4378:	08 95       	ret

Disassembly of section .text.HWToStructTM:

00003c66 <HWToStructTM>:
}

// Converts an SMCP7940NTime structure to struct tm
static void HWToStructTM(SMCP7940NTime *psTime,
						 struct tm *psTimeTM)
{
    3c66:	cf 93       	push	r28
    3c68:	df 93       	push	r29
    3c6a:	dc 01       	movw	r26, r24
    3c6c:	fb 01       	movw	r30, r22
	// At this point, the time is in STime and we should
	// turn that in to time_t
	memset((void *) psTimeTM, 0, sizeof(*psTimeTM));
    3c6e:	89 e1       	ldi	r24, 0x19	; 25
    3c70:	eb 01       	movw	r28, r22
    3c72:	19 92       	st	Y+, r1
    3c74:	8a 95       	dec	r24
    3c76:	e9 f7       	brne	.-6      	; 0x3c72 <HWToStructTM+0xc>
	
	psTimeTM->tm_sec = psTime->u8Seconds;
    3c78:	8c 91       	ld	r24, X
    3c7a:	90 e0       	ldi	r25, 0x00	; 0
    3c7c:	91 83       	std	Z+1, r25	; 0x01
    3c7e:	80 83       	st	Z, r24
	psTimeTM->tm_min = psTime->u8Minutes;
    3c80:	11 96       	adiw	r26, 0x01	; 1
    3c82:	8c 91       	ld	r24, X
    3c84:	11 97       	sbiw	r26, 0x01	; 1
    3c86:	90 e0       	ldi	r25, 0x00	; 0
    3c88:	93 83       	std	Z+3, r25	; 0x03
    3c8a:	82 83       	std	Z+2, r24	; 0x02
	psTimeTM->tm_hour = psTime->u8Hours;
    3c8c:	12 96       	adiw	r26, 0x02	; 2
    3c8e:	8c 91       	ld	r24, X
    3c90:	12 97       	sbiw	r26, 0x02	; 2
    3c92:	90 e0       	ldi	r25, 0x00	; 0
    3c94:	95 83       	std	Z+5, r25	; 0x05
    3c96:	84 83       	std	Z+4, r24	; 0x04
	psTimeTM->tm_mday = psTime->u8Day;
    3c98:	14 96       	adiw	r26, 0x04	; 4
    3c9a:	8c 91       	ld	r24, X
    3c9c:	14 97       	sbiw	r26, 0x04	; 4
    3c9e:	90 e0       	ldi	r25, 0x00	; 0
    3ca0:	97 83       	std	Z+7, r25	; 0x07
    3ca2:	86 83       	std	Z+6, r24	; 0x06
	psTimeTM->tm_mon = psTime->u8Month - 1;
    3ca4:	15 96       	adiw	r26, 0x05	; 5
    3ca6:	8c 91       	ld	r24, X
    3ca8:	15 97       	sbiw	r26, 0x05	; 5
    3caa:	90 e0       	ldi	r25, 0x00	; 0
    3cac:	01 97       	sbiw	r24, 0x01	; 1
    3cae:	91 87       	std	Z+9, r25	; 0x09
    3cb0:	80 87       	std	Z+8, r24	; 0x08
	
	if (psTime->u8Year < YEAR_ROLLOVER_CUTOFF)
    3cb2:	16 96       	adiw	r26, 0x06	; 6
    3cb4:	8c 91       	ld	r24, X
    3cb6:	84 31       	cpi	r24, 0x14	; 20
    3cb8:	30 f4       	brcc	.+12     	; 0x3cc6 <HWToStructTM+0x60>
	{
		psTimeTM->tm_year = 2100 + psTime->u8Year;
    3cba:	90 e0       	ldi	r25, 0x00	; 0
    3cbc:	8c 5c       	subi	r24, 0xCC	; 204
    3cbe:	97 4f       	sbci	r25, 0xF7	; 247
    3cc0:	93 87       	std	Z+11, r25	; 0x0b
    3cc2:	82 87       	std	Z+10, r24	; 0x0a
    3cc4:	05 c0       	rjmp	.+10     	; 0x3cd0 <HWToStructTM+0x6a>
	}
	else
	{
		psTimeTM->tm_year = 2000 + psTime->u8Year;
    3cc6:	90 e0       	ldi	r25, 0x00	; 0
    3cc8:	80 53       	subi	r24, 0x30	; 48
    3cca:	98 4f       	sbci	r25, 0xF8	; 248
    3ccc:	93 87       	std	Z+11, r25	; 0x0b
    3cce:	82 87       	std	Z+10, r24	; 0x0a
	}	
	
	psTimeTM->tm_year -= 1900;
    3cd0:	82 85       	ldd	r24, Z+10	; 0x0a
    3cd2:	93 85       	ldd	r25, Z+11	; 0x0b
    3cd4:	8c 56       	subi	r24, 0x6C	; 108
    3cd6:	97 40       	sbci	r25, 0x07	; 7
    3cd8:	93 87       	std	Z+11, r25	; 0x0b
    3cda:	82 87       	std	Z+10, r24	; 0x0a
}
    3cdc:	df 91       	pop	r29
    3cde:	cf 91       	pop	r28
    3ce0:	08 95       	ret

Disassembly of section .text.__vector_10:

000039dc <__vector_10>:
// # Of seconds since January 1, 1970
static volatile uint64_t sg_u64Time;

// Called once per second on rev 1 and newer hardware
ISR(INT3_vect, ISR_NOBLOCK)
{
    39dc:	78 94       	sei
    39de:	1f 92       	push	r1
    39e0:	0f 92       	push	r0
    39e2:	0f b6       	in	r0, 0x3f	; 63
    39e4:	0f 92       	push	r0
    39e6:	11 24       	eor	r1, r1
    39e8:	2f 93       	push	r18
    39ea:	3f 93       	push	r19
    39ec:	4f 93       	push	r20
    39ee:	5f 93       	push	r21
    39f0:	6f 93       	push	r22
    39f2:	7f 93       	push	r23
    39f4:	8f 93       	push	r24
    39f6:	9f 93       	push	r25
    39f8:	af 93       	push	r26
	EIFR |= (1 << INTF3);
    39fa:	8c b3       	in	r24, 0x1c	; 28
    39fc:	88 60       	ori	r24, 0x08	; 8
    39fe:	8c bb       	out	0x1c, r24	; 28
	sg_u64Time++;
    3a00:	20 91 45 09 	lds	r18, 0x0945	; 0x800945 <sg_u64Time>
    3a04:	30 91 46 09 	lds	r19, 0x0946	; 0x800946 <sg_u64Time+0x1>
    3a08:	40 91 47 09 	lds	r20, 0x0947	; 0x800947 <sg_u64Time+0x2>
    3a0c:	50 91 48 09 	lds	r21, 0x0948	; 0x800948 <sg_u64Time+0x3>
    3a10:	60 91 49 09 	lds	r22, 0x0949	; 0x800949 <sg_u64Time+0x4>
    3a14:	70 91 4a 09 	lds	r23, 0x094A	; 0x80094a <sg_u64Time+0x5>
    3a18:	80 91 4b 09 	lds	r24, 0x094B	; 0x80094b <sg_u64Time+0x6>
    3a1c:	90 91 4c 09 	lds	r25, 0x094C	; 0x80094c <sg_u64Time+0x7>
    3a20:	a1 e0       	ldi	r26, 0x01	; 1
    3a22:	0e 94 43 27 	call	0x4e86	; 0x4e86 <__adddi3_s8>
    3a26:	20 93 45 09 	sts	0x0945, r18	; 0x800945 <sg_u64Time>
    3a2a:	30 93 46 09 	sts	0x0946, r19	; 0x800946 <sg_u64Time+0x1>
    3a2e:	40 93 47 09 	sts	0x0947, r20	; 0x800947 <sg_u64Time+0x2>
    3a32:	50 93 48 09 	sts	0x0948, r21	; 0x800948 <sg_u64Time+0x3>
    3a36:	60 93 49 09 	sts	0x0949, r22	; 0x800949 <sg_u64Time+0x4>
    3a3a:	70 93 4a 09 	sts	0x094A, r23	; 0x80094a <sg_u64Time+0x5>
    3a3e:	80 93 4b 09 	sts	0x094B, r24	; 0x80094b <sg_u64Time+0x6>
    3a42:	90 93 4c 09 	sts	0x094C, r25	; 0x80094c <sg_u64Time+0x7>
}
    3a46:	af 91       	pop	r26
    3a48:	9f 91       	pop	r25
    3a4a:	8f 91       	pop	r24
    3a4c:	7f 91       	pop	r23
    3a4e:	6f 91       	pop	r22
    3a50:	5f 91       	pop	r21
    3a52:	4f 91       	pop	r20
    3a54:	3f 91       	pop	r19
    3a56:	2f 91       	pop	r18
    3a58:	0f 90       	pop	r0
    3a5a:	0f be       	out	0x3f, r0	; 63
    3a5c:	0f 90       	pop	r0
    3a5e:	1f 90       	pop	r1
    3a60:	18 95       	reti

Disassembly of section .text.RTCReadRegisters:

00003be8 <RTCReadRegisters>:
}

bool RTCReadRegisters( uint8_t u8RegisterAddr, 
					   uint8_t* pu8Data, 
					   uint8_t u8Length )
{
    3be8:	ff 92       	push	r15
    3bea:	0f 93       	push	r16
    3bec:	1f 93       	push	r17
    3bee:	cf 93       	push	r28
    3bf0:	df 93       	push	r29
    3bf2:	f8 2e       	mov	r15, r24
    3bf4:	8b 01       	movw	r16, r22
    3bf6:	c4 2f       	mov	r28, r20
	bool bResult;
	
	MBASSERT( u8Length >= 1 );
    3bf8:	41 11       	cpse	r20, r1
    3bfa:	07 c0       	rjmp	.+14     	; 0x3c0a <RTCReadRegisters+0x22>
    3bfc:	4f e5       	ldi	r20, 0x5F	; 95
    3bfe:	50 e0       	ldi	r21, 0x00	; 0
    3c00:	66 ef       	ldi	r22, 0xF6	; 246
    3c02:	72 e0       	ldi	r23, 0x02	; 2
    3c04:	80 e0       	ldi	r24, 0x00	; 0
    3c06:	0e 94 af 24 	call	0x495e	; 0x495e <PlatformAssert>
	
	// First send device address and write register address
	bResult = RTCStartTransaction( RTC_ADDRESS, false, true );
    3c0a:	41 e0       	ldi	r20, 0x01	; 1
    3c0c:	60 e0       	ldi	r22, 0x00	; 0
    3c0e:	8e ed       	ldi	r24, 0xDE	; 222
    3c10:	0e 94 ae 22 	call	0x455c	; 0x455c <RTCStartTransaction>
    3c14:	d8 2f       	mov	r29, r24
	
	// Couldn't get an ACK?  Give up now
	if( false == bResult )
    3c16:	88 23       	and	r24, r24
    3c18:	e9 f0       	breq	.+58     	; 0x3c54 <RTCReadRegisters+0x6c>
	{
		goto errorExit;
	}
	
	// Send the register address
	bResult = I2CTxByte( u8RegisterAddr );
    3c1a:	8f 2d       	mov	r24, r15
    3c1c:	0e 94 5f 1f 	call	0x3ebe	; 0x3ebe <I2CTxByte>
    3c20:	d8 2f       	mov	r29, r24
	
	if( false == bResult )
    3c22:	88 23       	and	r24, r24
    3c24:	b9 f0       	breq	.+46     	; 0x3c54 <RTCReadRegisters+0x6c>
	{
		goto errorExit;
	}
	
	// Send repeated start with read
	bResult = RTCStartTransaction( RTC_ADDRESS, true, false );
    3c26:	40 e0       	ldi	r20, 0x00	; 0
    3c28:	61 e0       	ldi	r22, 0x01	; 1
    3c2a:	8e ed       	ldi	r24, 0xDE	; 222
    3c2c:	0e 94 ae 22 	call	0x455c	; 0x455c <RTCStartTransaction>
    3c30:	d8 2f       	mov	r29, r24
	
	// Couldn't get an ACK?  Give up now
	if( false == bResult )
    3c32:	81 11       	cpse	r24, r1
    3c34:	08 c0       	rjmp	.+16     	; 0x3c46 <RTCReadRegisters+0x5e>
    3c36:	0e c0       	rjmp	.+28     	; 0x3c54 <RTCReadRegisters+0x6c>
		goto errorExit;
	}
	
	while( u8Length >= 2 )
	{
		*pu8Data = I2CRxByte( true );
    3c38:	81 e0       	ldi	r24, 0x01	; 1
    3c3a:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <I2CRxByte>
    3c3e:	f8 01       	movw	r30, r16
    3c40:	81 93       	st	Z+, r24
    3c42:	8f 01       	movw	r16, r30
		pu8Data++;
		u8Length--;
    3c44:	c1 50       	subi	r28, 0x01	; 1
	if( false == bResult )
	{
		goto errorExit;
	}
	
	while( u8Length >= 2 )
    3c46:	c2 30       	cpi	r28, 0x02	; 2
    3c48:	b8 f7       	brcc	.-18     	; 0x3c38 <RTCReadRegisters+0x50>
		pu8Data++;
		u8Length--;
	}
	
	// Final read with NACK
	*pu8Data = I2CRxByte( false );
    3c4a:	80 e0       	ldi	r24, 0x00	; 0
    3c4c:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <I2CRxByte>
    3c50:	f8 01       	movw	r30, r16
    3c52:	80 83       	st	Z, r24
	
errorExit:

	I2CStop();
    3c54:	0e 94 56 25 	call	0x4aac	; 0x4aac <I2CStop>
	
	return(bResult);
}
    3c58:	8d 2f       	mov	r24, r29
    3c5a:	df 91       	pop	r29
    3c5c:	cf 91       	pop	r28
    3c5e:	1f 91       	pop	r17
    3c60:	0f 91       	pop	r16
    3c62:	ff 90       	pop	r15
    3c64:	08 95       	ret

Disassembly of section .text.RTCReadHW:

00002bae <RTCReadHW>:
	sei();
	
	psSrc = gmtime((const time_t *) &u64Time);
	memcpy((void *) psTime, (void *) psSrc, sizeof(*psTime));
	return(true);
}
    2bae:	cf 93       	push	r28
    2bb0:	df 93       	push	r29
    2bb2:	ec 01       	movw	r28, r24
    2bb4:	47 e0       	ldi	r20, 0x07	; 7
    2bb6:	bc 01       	movw	r22, r24
    2bb8:	80 e0       	ldi	r24, 0x00	; 0
    2bba:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <RTCReadRegisters>
    2bbe:	88 23       	and	r24, r24
    2bc0:	09 f4       	brne	.+2      	; 0x2bc4 <RTCReadHW+0x16>
    2bc2:	63 c0       	rjmp	.+198    	; 0x2c8a <RTCReadHW+0xdc>
    2bc4:	98 81       	ld	r25, Y
    2bc6:	29 2f       	mov	r18, r25
    2bc8:	22 95       	swap	r18
    2bca:	2f 70       	andi	r18, 0x0F	; 15
    2bcc:	27 70       	andi	r18, 0x07	; 7
    2bce:	22 0f       	add	r18, r18
    2bd0:	32 2f       	mov	r19, r18
    2bd2:	33 0f       	add	r19, r19
    2bd4:	33 0f       	add	r19, r19
    2bd6:	23 0f       	add	r18, r19
    2bd8:	9f 70       	andi	r25, 0x0F	; 15
    2bda:	92 0f       	add	r25, r18
    2bdc:	98 83       	st	Y, r25
    2bde:	99 81       	ldd	r25, Y+1	; 0x01
    2be0:	29 2f       	mov	r18, r25
    2be2:	22 95       	swap	r18
    2be4:	2f 70       	andi	r18, 0x0F	; 15
    2be6:	27 70       	andi	r18, 0x07	; 7
    2be8:	22 0f       	add	r18, r18
    2bea:	32 2f       	mov	r19, r18
    2bec:	33 0f       	add	r19, r19
    2bee:	33 0f       	add	r19, r19
    2bf0:	23 0f       	add	r18, r19
    2bf2:	9f 70       	andi	r25, 0x0F	; 15
    2bf4:	92 0f       	add	r25, r18
    2bf6:	99 83       	std	Y+1, r25	; 0x01
    2bf8:	9a 81       	ldd	r25, Y+2	; 0x02
    2bfa:	96 ff       	sbrs	r25, 6
    2bfc:	11 c0       	rjmp	.+34     	; 0x2c20 <RTCReadHW+0x72>
    2bfe:	94 fb       	bst	r25, 4
    2c00:	22 27       	eor	r18, r18
    2c02:	20 f9       	bld	r18, 0
    2c04:	22 0f       	add	r18, r18
    2c06:	32 2f       	mov	r19, r18
    2c08:	33 0f       	add	r19, r19
    2c0a:	33 0f       	add	r19, r19
    2c0c:	23 0f       	add	r18, r19
    2c0e:	39 2f       	mov	r19, r25
    2c10:	3f 70       	andi	r19, 0x0F	; 15
    2c12:	23 0f       	add	r18, r19
    2c14:	2a 83       	std	Y+2, r18	; 0x02
    2c16:	95 ff       	sbrs	r25, 5
    2c18:	0f c0       	rjmp	.+30     	; 0x2c38 <RTCReadHW+0x8a>
    2c1a:	24 5f       	subi	r18, 0xF4	; 244
    2c1c:	2a 83       	std	Y+2, r18	; 0x02
    2c1e:	0c c0       	rjmp	.+24     	; 0x2c38 <RTCReadHW+0x8a>
    2c20:	29 2f       	mov	r18, r25
    2c22:	22 95       	swap	r18
    2c24:	2f 70       	andi	r18, 0x0F	; 15
    2c26:	23 70       	andi	r18, 0x03	; 3
    2c28:	22 0f       	add	r18, r18
    2c2a:	32 2f       	mov	r19, r18
    2c2c:	33 0f       	add	r19, r19
    2c2e:	33 0f       	add	r19, r19
    2c30:	23 0f       	add	r18, r19
    2c32:	9f 70       	andi	r25, 0x0F	; 15
    2c34:	92 0f       	add	r25, r18
    2c36:	9a 83       	std	Y+2, r25	; 0x02
    2c38:	9b 81       	ldd	r25, Y+3	; 0x03
    2c3a:	97 70       	andi	r25, 0x07	; 7
    2c3c:	9b 83       	std	Y+3, r25	; 0x03
    2c3e:	9c 81       	ldd	r25, Y+4	; 0x04
    2c40:	29 2f       	mov	r18, r25
    2c42:	22 95       	swap	r18
    2c44:	2f 70       	andi	r18, 0x0F	; 15
    2c46:	23 70       	andi	r18, 0x03	; 3
    2c48:	22 0f       	add	r18, r18
    2c4a:	32 2f       	mov	r19, r18
    2c4c:	33 0f       	add	r19, r19
    2c4e:	33 0f       	add	r19, r19
    2c50:	23 0f       	add	r18, r19
    2c52:	9f 70       	andi	r25, 0x0F	; 15
    2c54:	92 0f       	add	r25, r18
    2c56:	9c 83       	std	Y+4, r25	; 0x04
    2c58:	9d 81       	ldd	r25, Y+5	; 0x05
    2c5a:	94 fb       	bst	r25, 4
    2c5c:	22 27       	eor	r18, r18
    2c5e:	20 f9       	bld	r18, 0
    2c60:	22 0f       	add	r18, r18
    2c62:	32 2f       	mov	r19, r18
    2c64:	33 0f       	add	r19, r19
    2c66:	33 0f       	add	r19, r19
    2c68:	23 0f       	add	r18, r19
    2c6a:	9f 70       	andi	r25, 0x0F	; 15
    2c6c:	92 0f       	add	r25, r18
    2c6e:	9d 83       	std	Y+5, r25	; 0x05
    2c70:	9e 81       	ldd	r25, Y+6	; 0x06
    2c72:	29 2f       	mov	r18, r25
    2c74:	22 95       	swap	r18
    2c76:	2f 70       	andi	r18, 0x0F	; 15
    2c78:	22 0f       	add	r18, r18
    2c7a:	32 2f       	mov	r19, r18
    2c7c:	33 0f       	add	r19, r19
    2c7e:	33 0f       	add	r19, r19
    2c80:	23 0f       	add	r18, r19
    2c82:	9f 70       	andi	r25, 0x0F	; 15
    2c84:	92 0f       	add	r25, r18
    2c86:	9c 5e       	subi	r25, 0xEC	; 236
    2c88:	9e 83       	std	Y+6, r25	; 0x06
    2c8a:	df 91       	pop	r29
    2c8c:	cf 91       	pop	r28
    2c8e:	08 95       	ret

Disassembly of section .text.RTCWriteRegisters:

00003f28 <RTCWriteRegisters>:
}

bool RTCWriteRegisters( uint8_t u8RegisterAddr,
						uint8_t* pu8Data, 
						uint8_t u8Length )
{
    3f28:	ff 92       	push	r15
    3f2a:	0f 93       	push	r16
    3f2c:	1f 93       	push	r17
    3f2e:	cf 93       	push	r28
    3f30:	df 93       	push	r29
    3f32:	f8 2e       	mov	r15, r24
    3f34:	8b 01       	movw	r16, r22
    3f36:	c4 2f       	mov	r28, r20
	bool bResult;
	
	MBASSERT( u8Length >= 1 );
    3f38:	41 11       	cpse	r20, r1
    3f3a:	07 c0       	rjmp	.+14     	; 0x3f4a <RTCWriteRegisters+0x22>
    3f3c:	42 e9       	ldi	r20, 0x92	; 146
    3f3e:	50 e0       	ldi	r21, 0x00	; 0
    3f40:	66 ef       	ldi	r22, 0xF6	; 246
    3f42:	72 e0       	ldi	r23, 0x02	; 2
    3f44:	80 e0       	ldi	r24, 0x00	; 0
    3f46:	0e 94 af 24 	call	0x495e	; 0x495e <PlatformAssert>
	
	// First send device address and write register address
	bResult = RTCStartTransaction( RTC_ADDRESS, false, true );
    3f4a:	41 e0       	ldi	r20, 0x01	; 1
    3f4c:	60 e0       	ldi	r22, 0x00	; 0
    3f4e:	8e ed       	ldi	r24, 0xDE	; 222
    3f50:	0e 94 ae 22 	call	0x455c	; 0x455c <RTCStartTransaction>
    3f54:	d8 2f       	mov	r29, r24
	
	// Couldn't get an ACK?  Give up now
	if( false == bResult )
    3f56:	88 23       	and	r24, r24
    3f58:	99 f0       	breq	.+38     	; 0x3f80 <RTCWriteRegisters+0x58>
	{
		goto errorExit;
	}
	
	// Send the register address
	bResult = I2CTxByte( u8RegisterAddr );
    3f5a:	8f 2d       	mov	r24, r15
    3f5c:	0e 94 5f 1f 	call	0x3ebe	; 0x3ebe <I2CTxByte>
    3f60:	d8 2f       	mov	r29, r24
	
	if( false == bResult )
    3f62:	81 11       	cpse	r24, r1
    3f64:	0b c0       	rjmp	.+22     	; 0x3f7c <RTCWriteRegisters+0x54>
    3f66:	0c c0       	rjmp	.+24     	; 0x3f80 <RTCWriteRegisters+0x58>
	}
	
	// Now immediately send the sequential data
	while( u8Length )
	{
		bResult = I2CTxByte( *pu8Data );
    3f68:	f8 01       	movw	r30, r16
    3f6a:	80 81       	ld	r24, Z
    3f6c:	0e 94 5f 1f 	call	0x3ebe	; 0x3ebe <I2CTxByte>
    3f70:	d8 2f       	mov	r29, r24
		
		if( false == bResult )
    3f72:	88 23       	and	r24, r24
    3f74:	29 f0       	breq	.+10     	; 0x3f80 <RTCWriteRegisters+0x58>
		{
			goto errorExit;
		}
		
		pu8Data++;
    3f76:	0f 5f       	subi	r16, 0xFF	; 255
    3f78:	1f 4f       	sbci	r17, 0xFF	; 255
		u8Length--;
    3f7a:	c1 50       	subi	r28, 0x01	; 1
	{
		goto errorExit;
	}
	
	// Now immediately send the sequential data
	while( u8Length )
    3f7c:	c1 11       	cpse	r28, r1
    3f7e:	f4 cf       	rjmp	.-24     	; 0x3f68 <RTCWriteRegisters+0x40>
		u8Length--;
	}
	
errorExit:

	I2CStop();
    3f80:	0e 94 56 25 	call	0x4aac	; 0x4aac <I2CStop>
	
	return( bResult );
}
    3f84:	8d 2f       	mov	r24, r29
    3f86:	df 91       	pop	r29
    3f88:	cf 91       	pop	r28
    3f8a:	1f 91       	pop	r17
    3f8c:	0f 91       	pop	r16
    3f8e:	ff 90       	pop	r15
    3f90:	08 95       	ret

Disassembly of section .text.RTCWriteHW:

000028c4 <RTCWriteHW>:
	sei();
	
	psSrc = gmtime((const time_t *) &u64Time);
	memcpy((void *) psTime, (void *) psSrc, sizeof(*psTime));
	return(true);
}
    28c4:	fc 01       	movw	r30, r24
    28c6:	20 81       	ld	r18, Z
    28c8:	8d ec       	ldi	r24, 0xCD	; 205
    28ca:	28 9f       	mul	r18, r24
    28cc:	91 2d       	mov	r25, r1
    28ce:	11 24       	eor	r1, r1
    28d0:	96 95       	lsr	r25
    28d2:	96 95       	lsr	r25
    28d4:	96 95       	lsr	r25
    28d6:	30 e1       	ldi	r19, 0x10	; 16
    28d8:	93 9f       	mul	r25, r19
    28da:	a0 01       	movw	r20, r0
    28dc:	11 24       	eor	r1, r1
    28de:	99 0f       	add	r25, r25
    28e0:	39 2f       	mov	r19, r25
    28e2:	33 0f       	add	r19, r19
    28e4:	33 0f       	add	r19, r19
    28e6:	93 0f       	add	r25, r19
    28e8:	29 1b       	sub	r18, r25
    28ea:	24 2b       	or	r18, r20
    28ec:	20 83       	st	Z, r18
    28ee:	21 81       	ldd	r18, Z+1	; 0x01
    28f0:	28 9f       	mul	r18, r24
    28f2:	91 2d       	mov	r25, r1
    28f4:	11 24       	eor	r1, r1
    28f6:	96 95       	lsr	r25
    28f8:	96 95       	lsr	r25
    28fa:	96 95       	lsr	r25
    28fc:	30 e1       	ldi	r19, 0x10	; 16
    28fe:	93 9f       	mul	r25, r19
    2900:	a0 01       	movw	r20, r0
    2902:	11 24       	eor	r1, r1
    2904:	99 0f       	add	r25, r25
    2906:	39 2f       	mov	r19, r25
    2908:	33 0f       	add	r19, r19
    290a:	33 0f       	add	r19, r19
    290c:	93 0f       	add	r25, r19
    290e:	29 1b       	sub	r18, r25
    2910:	24 2b       	or	r18, r20
    2912:	21 83       	std	Z+1, r18	; 0x01
    2914:	42 81       	ldd	r20, Z+2	; 0x02
    2916:	48 9f       	mul	r20, r24
    2918:	91 2d       	mov	r25, r1
    291a:	11 24       	eor	r1, r1
    291c:	96 95       	lsr	r25
    291e:	96 95       	lsr	r25
    2920:	96 95       	lsr	r25
    2922:	50 e1       	ldi	r21, 0x10	; 16
    2924:	95 9f       	mul	r25, r21
    2926:	90 01       	movw	r18, r0
    2928:	11 24       	eor	r1, r1
    292a:	99 0f       	add	r25, r25
    292c:	39 2f       	mov	r19, r25
    292e:	33 0f       	add	r19, r19
    2930:	33 0f       	add	r19, r19
    2932:	93 0f       	add	r25, r19
    2934:	49 1b       	sub	r20, r25
    2936:	24 2b       	or	r18, r20
    2938:	2f 7b       	andi	r18, 0xBF	; 191
    293a:	22 83       	std	Z+2, r18	; 0x02
    293c:	93 81       	ldd	r25, Z+3	; 0x03
    293e:	97 70       	andi	r25, 0x07	; 7
    2940:	98 60       	ori	r25, 0x08	; 8
    2942:	93 83       	std	Z+3, r25	; 0x03
    2944:	24 81       	ldd	r18, Z+4	; 0x04
    2946:	28 9f       	mul	r18, r24
    2948:	91 2d       	mov	r25, r1
    294a:	11 24       	eor	r1, r1
    294c:	96 95       	lsr	r25
    294e:	96 95       	lsr	r25
    2950:	96 95       	lsr	r25
    2952:	30 e1       	ldi	r19, 0x10	; 16
    2954:	93 9f       	mul	r25, r19
    2956:	a0 01       	movw	r20, r0
    2958:	11 24       	eor	r1, r1
    295a:	99 0f       	add	r25, r25
    295c:	39 2f       	mov	r19, r25
    295e:	33 0f       	add	r19, r19
    2960:	33 0f       	add	r19, r19
    2962:	93 0f       	add	r25, r19
    2964:	29 1b       	sub	r18, r25
    2966:	24 2b       	or	r18, r20
    2968:	24 83       	std	Z+4, r18	; 0x04
    296a:	25 81       	ldd	r18, Z+5	; 0x05
    296c:	28 9f       	mul	r18, r24
    296e:	91 2d       	mov	r25, r1
    2970:	11 24       	eor	r1, r1
    2972:	96 95       	lsr	r25
    2974:	96 95       	lsr	r25
    2976:	96 95       	lsr	r25
    2978:	30 e1       	ldi	r19, 0x10	; 16
    297a:	93 9f       	mul	r25, r19
    297c:	a0 01       	movw	r20, r0
    297e:	11 24       	eor	r1, r1
    2980:	99 0f       	add	r25, r25
    2982:	39 2f       	mov	r19, r25
    2984:	33 0f       	add	r19, r19
    2986:	33 0f       	add	r19, r19
    2988:	93 0f       	add	r25, r19
    298a:	29 1b       	sub	r18, r25
    298c:	24 2b       	or	r18, r20
    298e:	25 83       	std	Z+5, r18	; 0x05
    2990:	96 81       	ldd	r25, Z+6	; 0x06
    2992:	98 9f       	mul	r25, r24
    2994:	81 2d       	mov	r24, r1
    2996:	11 24       	eor	r1, r1
    2998:	86 95       	lsr	r24
    299a:	86 95       	lsr	r24
    299c:	86 95       	lsr	r24
    299e:	40 e1       	ldi	r20, 0x10	; 16
    29a0:	84 9f       	mul	r24, r20
    29a2:	90 01       	movw	r18, r0
    29a4:	11 24       	eor	r1, r1
    29a6:	88 0f       	add	r24, r24
    29a8:	38 2f       	mov	r19, r24
    29aa:	33 0f       	add	r19, r19
    29ac:	33 0f       	add	r19, r19
    29ae:	83 0f       	add	r24, r19
    29b0:	98 1b       	sub	r25, r24
    29b2:	92 2b       	or	r25, r18
    29b4:	96 83       	std	Z+6, r25	; 0x06
    29b6:	47 e0       	ldi	r20, 0x07	; 7
    29b8:	bf 01       	movw	r22, r30
    29ba:	80 e0       	ldi	r24, 0x00	; 0
    29bc:	0e 94 94 1f 	call	0x3f28	; 0x3f28 <RTCWriteRegisters>
    29c0:	08 95       	ret

Disassembly of section .text.RTCSetTime:

000030b6 <RTCSetTime>:

// This sets the RTC to the specific time passed in. True is returned
// if it's 
bool RTCSetTime(uint64_t u64Timet)
{
    30b6:	0f 93       	push	r16
    30b8:	1f 93       	push	r17
    30ba:	cf 93       	push	r28
    30bc:	df 93       	push	r29
    30be:	cd b7       	in	r28, 0x3d	; 61
    30c0:	de b7       	in	r29, 0x3e	; 62
    30c2:	a8 97       	sbiw	r28, 0x28	; 40
    30c4:	0f b6       	in	r0, 0x3f	; 63
    30c6:	f8 94       	cli
    30c8:	de bf       	out	0x3e, r29	; 62
    30ca:	0f be       	out	0x3f, r0	; 63
    30cc:	cd bf       	out	0x3d, r28	; 61
    30ce:	29 a3       	std	Y+33, r18	; 0x21
    30d0:	3a a3       	std	Y+34, r19	; 0x22
    30d2:	4b a3       	std	Y+35, r20	; 0x23
    30d4:	5c a3       	std	Y+36, r21	; 0x24
    30d6:	6d a3       	std	Y+37, r22	; 0x25
    30d8:	7e a3       	std	Y+38, r23	; 0x26
    30da:	8f a3       	std	Y+39, r24	; 0x27
    30dc:	98 a7       	std	Y+40, r25	; 0x28
	struct tm sTime;
	struct tm *psTime;
	SMCP7940NTime sTimeHW;

	// Convert to GMTime
	memset((void *) &sTime, 0, sizeof(sTime));
    30de:	fe 01       	movw	r30, r28
    30e0:	31 96       	adiw	r30, 0x01	; 1
    30e2:	89 e1       	ldi	r24, 0x19	; 25
    30e4:	df 01       	movw	r26, r30
    30e6:	1d 92       	st	X+, r1
    30e8:	8a 95       	dec	r24
    30ea:	e9 f7       	brne	.-6      	; 0x30e6 <RTCSetTime+0x30>
	psTime = gmtime((const time_t *) &u64Timet);
    30ec:	be 01       	movw	r22, r28
    30ee:	6f 5d       	subi	r22, 0xDF	; 223
    30f0:	7f 4f       	sbci	r23, 0xFF	; 255
    30f2:	80 e8       	ldi	r24, 0x80	; 128
    30f4:	0e 94 13 28 	call	0x5026	; 0x5026 <gmtime>
    30f8:	8c 01       	movw	r16, r24
	MBASSERT(psTime);
    30fa:	89 2b       	or	r24, r25
    30fc:	39 f4       	brne	.+14     	; 0x310c <RTCSetTime+0x56>
    30fe:	42 e8       	ldi	r20, 0x82	; 130
    3100:	51 e0       	ldi	r21, 0x01	; 1
    3102:	66 ef       	ldi	r22, 0xF6	; 246
    3104:	72 e0       	ldi	r23, 0x02	; 2
    3106:	80 e0       	ldi	r24, 0x00	; 0
    3108:	0e 94 af 24 	call	0x495e	; 0x495e <PlatformAssert>
	memcpy((void *) &sTime, (void *) psTime, sizeof(sTime));
    310c:	a8 01       	movw	r20, r16
    310e:	60 e8       	ldi	r22, 0x80	; 128
    3110:	29 e1       	ldi	r18, 0x19	; 25
    3112:	30 e0       	ldi	r19, 0x00	; 0
    3114:	ce 01       	movw	r24, r28
    3116:	01 96       	adiw	r24, 0x01	; 1
    3118:	0e 94 3c 24 	call	0x4878	; 0x4878 <memcpy>
	
	// Now convert to hardware
	StructTMToHW(&sTime,
    311c:	be 01       	movw	r22, r28
    311e:	66 5e       	subi	r22, 0xE6	; 230
    3120:	7f 4f       	sbci	r23, 0xFF	; 255
    3122:	ce 01       	movw	r24, r28
    3124:	01 96       	adiw	r24, 0x01	; 1
    3126:	0e 94 93 21 	call	0x4326	; 0x4326 <StructTMToHW>
				 &sTimeHW);
	
	// Set the time			 
	cli();
    312a:	f8 94       	cli
	sg_u64Time = u64Timet;
    312c:	79 a1       	ldd	r23, Y+33	; 0x21
    312e:	6a a1       	ldd	r22, Y+34	; 0x22
    3130:	5b a1       	ldd	r21, Y+35	; 0x23
    3132:	4c a1       	ldd	r20, Y+36	; 0x24
    3134:	3d a1       	ldd	r19, Y+37	; 0x25
    3136:	2e a1       	ldd	r18, Y+38	; 0x26
    3138:	9f a1       	ldd	r25, Y+39	; 0x27
    313a:	88 a5       	ldd	r24, Y+40	; 0x28
    313c:	70 93 45 09 	sts	0x0945, r23	; 0x800945 <sg_u64Time>
    3140:	60 93 46 09 	sts	0x0946, r22	; 0x800946 <sg_u64Time+0x1>
    3144:	50 93 47 09 	sts	0x0947, r21	; 0x800947 <sg_u64Time+0x2>
    3148:	40 93 48 09 	sts	0x0948, r20	; 0x800948 <sg_u64Time+0x3>
    314c:	30 93 49 09 	sts	0x0949, r19	; 0x800949 <sg_u64Time+0x4>
    3150:	20 93 4a 09 	sts	0x094A, r18	; 0x80094a <sg_u64Time+0x5>
    3154:	90 93 4b 09 	sts	0x094B, r25	; 0x80094b <sg_u64Time+0x6>
    3158:	80 93 4c 09 	sts	0x094C, r24	; 0x80094c <sg_u64Time+0x7>
	sei();
    315c:	78 94       	sei
	
	// Now go tell the hardware about it
	return(RTCWriteHW(&sTimeHW));
    315e:	ce 01       	movw	r24, r28
    3160:	4a 96       	adiw	r24, 0x1a	; 26
    3162:	0e 94 62 14 	call	0x28c4	; 0x28c4 <RTCWriteHW>
}
    3166:	a8 96       	adiw	r28, 0x28	; 40
    3168:	0f b6       	in	r0, 0x3f	; 63
    316a:	f8 94       	cli
    316c:	de bf       	out	0x3e, r29	; 62
    316e:	0f be       	out	0x3f, r0	; 63
    3170:	cd bf       	out	0x3d, r28	; 61
    3172:	df 91       	pop	r29
    3174:	cf 91       	pop	r28
    3176:	1f 91       	pop	r17
    3178:	0f 91       	pop	r16
    317a:	08 95       	ret

Disassembly of section .text.RTCInit:

00001686 <RTCInit>:
	sei();
	
	psSrc = gmtime((const time_t *) &u64Time);
	memcpy((void *) psTime, (void *) psSrc, sizeof(*psTime));
	return(true);
}
    1686:	ff 92       	push	r15
    1688:	0f 93       	push	r16
    168a:	1f 93       	push	r17
    168c:	cf 93       	push	r28
    168e:	df 93       	push	r29
    1690:	cd b7       	in	r28, 0x3d	; 61
    1692:	de b7       	in	r29, 0x3e	; 62
    1694:	a1 97       	sbiw	r28, 0x21	; 33
    1696:	0f b6       	in	r0, 0x3f	; 63
    1698:	f8 94       	cli
    169a:	de bf       	out	0x3e, r29	; 62
    169c:	0f be       	out	0x3f, r0	; 63
    169e:	cd bf       	out	0x3d, r28	; 61
    16a0:	19 82       	std	Y+1, r1	; 0x01
    16a2:	41 e0       	ldi	r20, 0x01	; 1
    16a4:	be 01       	movw	r22, r28
    16a6:	6f 5f       	subi	r22, 0xFF	; 255
    16a8:	7f 4f       	sbci	r23, 0xFF	; 255
    16aa:	87 e0       	ldi	r24, 0x07	; 7
    16ac:	0e 94 94 1f 	call	0x3f28	; 0x3f28 <RTCWriteRegisters>
    16b0:	18 2f       	mov	r17, r24
    16b2:	88 23       	and	r24, r24
    16b4:	09 f4       	brne	.+2      	; 0x16b8 <RTCInit+0x32>
    16b6:	eb c0       	rjmp	.+470    	; 0x188e <RTCInit+0x208>
    16b8:	80 e8       	ldi	r24, 0x80	; 128
    16ba:	89 83       	std	Y+1, r24	; 0x01
    16bc:	41 e0       	ldi	r20, 0x01	; 1
    16be:	be 01       	movw	r22, r28
    16c0:	6f 5f       	subi	r22, 0xFF	; 255
    16c2:	7f 4f       	sbci	r23, 0xFF	; 255
    16c4:	80 e0       	ldi	r24, 0x00	; 0
    16c6:	0e 94 94 1f 	call	0x3f28	; 0x3f28 <RTCWriteRegisters>
    16ca:	18 2f       	mov	r17, r24
    16cc:	81 11       	cpse	r24, r1
    16ce:	17 c0       	rjmp	.+46     	; 0x16fe <RTCInit+0x78>
    16d0:	de c0       	rjmp	.+444    	; 0x188e <RTCInit+0x208>
    16d2:	19 82       	std	Y+1, r1	; 0x01
    16d4:	41 e0       	ldi	r20, 0x01	; 1
    16d6:	be 01       	movw	r22, r28
    16d8:	6f 5f       	subi	r22, 0xFF	; 255
    16da:	7f 4f       	sbci	r23, 0xFF	; 255
    16dc:	83 e0       	ldi	r24, 0x03	; 3
    16de:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <RTCReadRegisters>
    16e2:	18 2f       	mov	r17, r24
    16e4:	88 23       	and	r24, r24
    16e6:	09 f4       	brne	.+2      	; 0x16ea <RTCInit+0x64>
    16e8:	d2 c0       	rjmp	.+420    	; 0x188e <RTCInit+0x208>
    16ea:	89 81       	ldd	r24, Y+1	; 0x01
    16ec:	85 fd       	sbrc	r24, 5
    16ee:	0a c0       	rjmp	.+20     	; 0x1704 <RTCInit+0x7e>
    16f0:	60 e0       	ldi	r22, 0x00	; 0
    16f2:	70 e0       	ldi	r23, 0x00	; 0
    16f4:	cb 01       	movw	r24, r22
    16f6:	0e 94 e7 21 	call	0x43ce	; 0x43ce <Delay>
    16fa:	0f 5f       	subi	r16, 0xFF	; 255
    16fc:	01 c0       	rjmp	.+2      	; 0x1700 <RTCInit+0x7a>
    16fe:	00 e0       	ldi	r16, 0x00	; 0
    1700:	08 3c       	cpi	r16, 0xC8	; 200
    1702:	38 f3       	brcs	.-50     	; 0x16d2 <RTCInit+0x4c>
    1704:	08 3c       	cpi	r16, 0xC8	; 200
    1706:	08 f0       	brcs	.+2      	; 0x170a <RTCInit+0x84>
    1708:	c2 c0       	rjmp	.+388    	; 0x188e <RTCInit+0x208>
    170a:	89 81       	ldd	r24, Y+1	; 0x01
    170c:	88 60       	ori	r24, 0x08	; 8
    170e:	89 83       	std	Y+1, r24	; 0x01
    1710:	41 e0       	ldi	r20, 0x01	; 1
    1712:	be 01       	movw	r22, r28
    1714:	6f 5f       	subi	r22, 0xFF	; 255
    1716:	7f 4f       	sbci	r23, 0xFF	; 255
    1718:	83 e0       	ldi	r24, 0x03	; 3
    171a:	0e 94 94 1f 	call	0x3f28	; 0x3f28 <RTCWriteRegisters>
    171e:	18 2f       	mov	r17, r24
    1720:	88 23       	and	r24, r24
    1722:	09 f4       	brne	.+2      	; 0x1726 <RTCInit+0xa0>
    1724:	b4 c0       	rjmp	.+360    	; 0x188e <RTCInit+0x208>
    1726:	41 e0       	ldi	r20, 0x01	; 1
    1728:	be 01       	movw	r22, r28
    172a:	6f 5f       	subi	r22, 0xFF	; 255
    172c:	7f 4f       	sbci	r23, 0xFF	; 255
    172e:	82 e0       	ldi	r24, 0x02	; 2
    1730:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <RTCReadRegisters>
    1734:	18 2f       	mov	r17, r24
    1736:	88 23       	and	r24, r24
    1738:	09 f4       	brne	.+2      	; 0x173c <RTCInit+0xb6>
    173a:	a9 c0       	rjmp	.+338    	; 0x188e <RTCInit+0x208>
    173c:	89 81       	ldd	r24, Y+1	; 0x01
    173e:	8f 7b       	andi	r24, 0xBF	; 191
    1740:	89 83       	std	Y+1, r24	; 0x01
    1742:	41 e0       	ldi	r20, 0x01	; 1
    1744:	be 01       	movw	r22, r28
    1746:	6f 5f       	subi	r22, 0xFF	; 255
    1748:	7f 4f       	sbci	r23, 0xFF	; 255
    174a:	82 e0       	ldi	r24, 0x02	; 2
    174c:	0e 94 94 1f 	call	0x3f28	; 0x3f28 <RTCWriteRegisters>
    1750:	18 2f       	mov	r17, r24
    1752:	88 23       	and	r24, r24
    1754:	09 f4       	brne	.+2      	; 0x1758 <RTCInit+0xd2>
    1756:	9b c0       	rjmp	.+310    	; 0x188e <RTCInit+0x208>
    1758:	ce 01       	movw	r24, r28
    175a:	02 96       	adiw	r24, 0x02	; 2
    175c:	0e 94 d7 15 	call	0x2bae	; 0x2bae <RTCReadHW>
    1760:	18 2f       	mov	r17, r24
    1762:	88 23       	and	r24, r24
    1764:	09 f4       	brne	.+2      	; 0x1768 <RTCInit+0xe2>
    1766:	93 c0       	rjmp	.+294    	; 0x188e <RTCInit+0x208>
    1768:	8a 81       	ldd	r24, Y+2	; 0x02
    176a:	8c 33       	cpi	r24, 0x3C	; 60
    176c:	10 f4       	brcc	.+4      	; 0x1772 <RTCInit+0xec>
    176e:	10 e0       	ldi	r17, 0x00	; 0
    1770:	01 c0       	rjmp	.+2      	; 0x1774 <RTCInit+0xee>
    1772:	11 e0       	ldi	r17, 0x01	; 1
    1774:	8b 81       	ldd	r24, Y+3	; 0x03
    1776:	8c 33       	cpi	r24, 0x3C	; 60
    1778:	08 f0       	brcs	.+2      	; 0x177c <RTCInit+0xf6>
    177a:	11 e0       	ldi	r17, 0x01	; 1
    177c:	8c 81       	ldd	r24, Y+4	; 0x04
    177e:	8c 33       	cpi	r24, 0x3C	; 60
    1780:	08 f0       	brcs	.+2      	; 0x1784 <RTCInit+0xfe>
    1782:	11 e0       	ldi	r17, 0x01	; 1
    1784:	8d 81       	ldd	r24, Y+5	; 0x05
    1786:	81 50       	subi	r24, 0x01	; 1
    1788:	87 30       	cpi	r24, 0x07	; 7
    178a:	08 f0       	brcs	.+2      	; 0x178e <RTCInit+0x108>
    178c:	11 e0       	ldi	r17, 0x01	; 1
    178e:	2f 81       	ldd	r18, Y+7	; 0x07
    1790:	8f ef       	ldi	r24, 0xFF	; 255
    1792:	82 0f       	add	r24, r18
    1794:	8c 30       	cpi	r24, 0x0C	; 12
    1796:	18 f5       	brcc	.+70     	; 0x17de <RTCInit+0x158>
    1798:	0e 81       	ldd	r16, Y+6	; 0x06
    179a:	00 23       	and	r16, r16
    179c:	11 f1       	breq	.+68     	; 0x17e2 <RTCInit+0x15c>
    179e:	82 2f       	mov	r24, r18
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	01 97       	sbiw	r24, 0x01	; 1
    17a4:	09 2e       	mov	r0, r25
    17a6:	00 0c       	add	r0, r0
    17a8:	aa 0b       	sbc	r26, r26
    17aa:	87 5d       	subi	r24, 0xD7	; 215
    17ac:	9c 4f       	sbci	r25, 0xFC	; 252
    17ae:	af 4f       	sbci	r26, 0xFF	; 255
    17b0:	fc 01       	movw	r30, r24
    17b2:	f4 90       	lpm	r15, Z
    17b4:	a7 fd       	sbrc	r26, 7
    17b6:	f0 80       	ld	r15, Z
    17b8:	22 30       	cpi	r18, 0x02	; 2
    17ba:	71 f4       	brne	.+28     	; 0x17d8 <RTCInit+0x152>
    17bc:	88 85       	ldd	r24, Y+8	; 0x08
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	84 31       	cpi	r24, 0x14	; 20
    17c2:	91 05       	cpc	r25, r1
    17c4:	18 f4       	brcc	.+6      	; 0x17cc <RTCInit+0x146>
    17c6:	8c 5c       	subi	r24, 0xCC	; 204
    17c8:	97 4f       	sbci	r25, 0xF7	; 247
    17ca:	02 c0       	rjmp	.+4      	; 0x17d0 <RTCInit+0x14a>
    17cc:	80 53       	subi	r24, 0x30	; 48
    17ce:	98 4f       	sbci	r25, 0xF8	; 248
    17d0:	0e 94 bc 23 	call	0x4778	; 0x4778 <IsLeapYear>
    17d4:	81 11       	cpse	r24, r1
    17d6:	f3 94       	inc	r15
    17d8:	f0 16       	cp	r15, r16
    17da:	28 f0       	brcs	.+10     	; 0x17e6 <RTCInit+0x160>
    17dc:	05 c0       	rjmp	.+10     	; 0x17e8 <RTCInit+0x162>
    17de:	11 e0       	ldi	r17, 0x01	; 1
    17e0:	03 c0       	rjmp	.+6      	; 0x17e8 <RTCInit+0x162>
    17e2:	11 e0       	ldi	r17, 0x01	; 1
    17e4:	01 c0       	rjmp	.+2      	; 0x17e8 <RTCInit+0x162>
    17e6:	11 e0       	ldi	r17, 0x01	; 1
    17e8:	11 23       	and	r17, r17
    17ea:	b9 f0       	breq	.+46     	; 0x181a <RTCInit+0x194>
    17ec:	1a 82       	std	Y+2, r1	; 0x02
    17ee:	1b 82       	std	Y+3, r1	; 0x03
    17f0:	1c 82       	std	Y+4, r1	; 0x04
    17f2:	81 e0       	ldi	r24, 0x01	; 1
    17f4:	8e 83       	std	Y+6, r24	; 0x06
    17f6:	8f 83       	std	Y+7, r24	; 0x07
    17f8:	88 e1       	ldi	r24, 0x18	; 24
    17fa:	88 87       	std	Y+8, r24	; 0x08
    17fc:	ce 01       	movw	r24, r28
    17fe:	02 96       	adiw	r24, 0x02	; 2
    1800:	0e 94 62 14 	call	0x28c4	; 0x28c4 <RTCWriteHW>
    1804:	18 2f       	mov	r17, r24
    1806:	88 23       	and	r24, r24
    1808:	09 f4       	brne	.+2      	; 0x180c <RTCInit+0x186>
    180a:	41 c0       	rjmp	.+130    	; 0x188e <RTCInit+0x208>
    180c:	ce 01       	movw	r24, r28
    180e:	02 96       	adiw	r24, 0x02	; 2
    1810:	0e 94 d7 15 	call	0x2bae	; 0x2bae <RTCReadHW>
    1814:	18 2f       	mov	r17, r24
    1816:	88 23       	and	r24, r24
    1818:	d1 f1       	breq	.+116    	; 0x188e <RTCInit+0x208>
    181a:	be 01       	movw	r22, r28
    181c:	67 5f       	subi	r22, 0xF7	; 247
    181e:	7f 4f       	sbci	r23, 0xFF	; 255
    1820:	ce 01       	movw	r24, r28
    1822:	02 96       	adiw	r24, 0x02	; 2
    1824:	0e 94 33 1e 	call	0x3c66	; 0x3c66 <HWToStructTM>
    1828:	ce 01       	movw	r24, r28
    182a:	09 96       	adiw	r24, 0x09	; 9
    182c:	0e 94 31 1d 	call	0x3a62	; 0x3a62 <mktime>
    1830:	8b 01       	movw	r16, r22
    1832:	9c 01       	movw	r18, r24
    1834:	f8 94       	cli
    1836:	00 93 45 09 	sts	0x0945, r16	; 0x800945 <sg_u64Time>
    183a:	10 93 46 09 	sts	0x0946, r17	; 0x800946 <sg_u64Time+0x1>
    183e:	20 93 47 09 	sts	0x0947, r18	; 0x800947 <sg_u64Time+0x2>
    1842:	30 93 48 09 	sts	0x0948, r19	; 0x800948 <sg_u64Time+0x3>
    1846:	10 92 49 09 	sts	0x0949, r1	; 0x800949 <sg_u64Time+0x4>
    184a:	10 92 4a 09 	sts	0x094A, r1	; 0x80094a <sg_u64Time+0x5>
    184e:	10 92 4b 09 	sts	0x094B, r1	; 0x80094b <sg_u64Time+0x6>
    1852:	10 92 4c 09 	sts	0x094C, r1	; 0x80094c <sg_u64Time+0x7>
    1856:	78 94       	sei
    1858:	87 b1       	in	r24, 0x07	; 7
    185a:	8e 7f       	andi	r24, 0xFE	; 254
    185c:	87 b9       	out	0x07, r24	; 7
    185e:	88 b1       	in	r24, 0x08	; 8
    1860:	81 60       	ori	r24, 0x01	; 1
    1862:	88 b9       	out	0x08, r24	; 8
    1864:	41 e0       	ldi	r20, 0x01	; 1
    1866:	be 01       	movw	r22, r28
    1868:	6f 5f       	subi	r22, 0xFF	; 255
    186a:	7f 4f       	sbci	r23, 0xFF	; 255
    186c:	87 e0       	ldi	r24, 0x07	; 7
    186e:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <RTCReadRegisters>
    1872:	18 2f       	mov	r17, r24
    1874:	88 23       	and	r24, r24
    1876:	59 f0       	breq	.+22     	; 0x188e <RTCInit+0x208>
    1878:	89 81       	ldd	r24, Y+1	; 0x01
    187a:	80 64       	ori	r24, 0x40	; 64
    187c:	89 83       	std	Y+1, r24	; 0x01
    187e:	41 e0       	ldi	r20, 0x01	; 1
    1880:	be 01       	movw	r22, r28
    1882:	6f 5f       	subi	r22, 0xFF	; 255
    1884:	7f 4f       	sbci	r23, 0xFF	; 255
    1886:	87 e0       	ldi	r24, 0x07	; 7
    1888:	0e 94 94 1f 	call	0x3f28	; 0x3f28 <RTCWriteRegisters>
    188c:	18 2f       	mov	r17, r24
    188e:	81 2f       	mov	r24, r17
    1890:	a1 96       	adiw	r28, 0x21	; 33
    1892:	0f b6       	in	r0, 0x3f	; 63
    1894:	f8 94       	cli
    1896:	de bf       	out	0x3e, r29	; 62
    1898:	0f be       	out	0x3f, r0	; 63
    189a:	cd bf       	out	0x3d, r28	; 61
    189c:	df 91       	pop	r29
    189e:	cf 91       	pop	r28
    18a0:	1f 91       	pop	r17
    18a2:	0f 91       	pop	r16
    18a4:	ff 90       	pop	r15
    18a6:	08 95       	ret

Disassembly of section .text.SDSetCS:

00004ef6 <SDSetCS>:
static uint8_t sg_u8CSD[16];

// This will provide a !CS assertion or deassertion with pre/postamble clock
static void SDSetCS(bool bAsserted)
{
	if (bAsserted)
    4ef6:	88 23       	and	r24, r24
    4ef8:	21 f0       	breq	.+8      	; 0x4f02 <SDSetCS+0xc>
	{
		SD_CS_ASSERT();
    4efa:	88 b1       	in	r24, 0x08	; 8
    4efc:	8f 7b       	andi	r24, 0xBF	; 191
    4efe:	88 b9       	out	0x08, r24	; 8
    4f00:	08 95       	ret
	}
	else
	{
		SD_CS_DEASSERT();
    4f02:	88 b1       	in	r24, 0x08	; 8
    4f04:	80 64       	ori	r24, 0x40	; 64
    4f06:	88 b9       	out	0x08, r24	; 8
    4f08:	08 95       	ret

Disassembly of section .text.SDPowerup:

0000469a <SDPowerup>:

// Sends SD powerup sequence to card and attempts to initialize it
static void SDPowerup(void)
{
	// Set SPI baud rate to (SD_SPEED_SLOW, which is the max for the init sequence)
	(void) SPISetBaudRate(SD_SPEED_SLOW);
    469a:	60 e8       	ldi	r22, 0x80	; 128
    469c:	7a e1       	ldi	r23, 0x1A	; 26
    469e:	86 e0       	ldi	r24, 0x06	; 6
    46a0:	90 e0       	ldi	r25, 0x00	; 0
    46a2:	0e 94 f6 17 	call	0x2fec	; 0x2fec <SPISetBaudRate>
	
	// Deassert chip select
	SD_CS_DEASSERT();
    46a6:	88 b1       	in	r24, 0x08	; 8
    46a8:	80 64       	ori	r24, 0x40	; 64
    46aa:	88 b9       	out	0x08, r24	; 8
	
	// Delay time after possible deassertion (2ms)
	Delay(2000);
    46ac:	60 ed       	ldi	r22, 0xD0	; 208
    46ae:	77 e0       	ldi	r23, 0x07	; 7
    46b0:	80 e0       	ldi	r24, 0x00	; 0
    46b2:	90 e0       	ldi	r25, 0x00	; 0
    46b4:	0e 94 e7 21 	call	0x43ce	; 0x43ce <Delay>
	
	// Send 74/80 bits of 0xff as a reset (80 bits required since we're byte-
	// sized transactions)
	SPIWritePattern(0xff,
    46b8:	40 e1       	ldi	r20, 0x10	; 16
    46ba:	50 e0       	ldi	r21, 0x00	; 0
    46bc:	6f ef       	ldi	r22, 0xFF	; 255
    46be:	70 e0       	ldi	r23, 0x00	; 0
    46c0:	82 e0       	ldi	r24, 0x02	; 2
    46c2:	0e 94 ba 20 	call	0x4174	; 0x4174 <SPITransaction>
				    128/8);

	// Delay time after write
	Delay(2000);
    46c6:	60 ed       	ldi	r22, 0xD0	; 208
    46c8:	77 e0       	ldi	r23, 0x07	; 7
    46ca:	80 e0       	ldi	r24, 0x00	; 0
    46cc:	90 e0       	ldi	r25, 0x00	; 0
    46ce:	0e 94 e7 21 	call	0x43ce	; 0x43ce <Delay>
    46d2:	08 95       	ret

Disassembly of section .text.SDCommand:

00003524 <SDCommand>:
#define CMD8_CRC    0x87

// Sends a command to the SD card, including argument an CRC
static uint8_t SDCommand(uint8_t u8Cmd,
						 uint32_t u32Arg)
{
    3524:	df 92       	push	r13
    3526:	ef 92       	push	r14
    3528:	ff 92       	push	r15
    352a:	0f 93       	push	r16
    352c:	1f 93       	push	r17
    352e:	cf 93       	push	r28
    3530:	df 93       	push	r29
    3532:	cd b7       	in	r28, 0x3d	; 61
    3534:	de b7       	in	r29, 0x3e	; 62
    3536:	27 97       	sbiw	r28, 0x07	; 7
    3538:	0f b6       	in	r0, 0x3f	; 63
    353a:	f8 94       	cli
    353c:	de bf       	out	0x3e, r29	; 62
    353e:	0f be       	out	0x3f, r0	; 63
    3540:	cd bf       	out	0x3d, r28	; 61
    3542:	18 2f       	mov	r17, r24
    3544:	04 2f       	mov	r16, r20
    3546:	f5 2e       	mov	r15, r21
    3548:	e6 2e       	mov	r14, r22
    354a:	d7 2e       	mov	r13, r23
	uint8_t u8Buffer[sizeof(u8Cmd) + sizeof(u32Arg) + sizeof(u8CRC)];
	uint8_t u8Response;
	uint8_t u8Count;
	
	// If this is an ACMD, prefix a CMD55
	if (u8Cmd & 0x80)
    354c:	88 23       	and	r24, r24
    354e:	4c f4       	brge	.+18     	; 0x3562 <SDCommand+0x3e>
	{
		u8Response = SDCommand(CMD55,
    3550:	40 e0       	ldi	r20, 0x00	; 0
    3552:	50 e0       	ldi	r21, 0x00	; 0
    3554:	ba 01       	movw	r22, r20
    3556:	87 e3       	ldi	r24, 0x37	; 55
    3558:	0e 94 92 1a 	call	0x3524	; 0x3524 <SDCommand>
    355c:	8f 83       	std	Y+7, r24	; 0x07
							   CMD55_ARG);
							   
		if (u8Response > 1)
    355e:	82 30       	cpi	r24, 0x02	; 2
    3560:	40 f5       	brcc	.+80     	; 0x35b2 <SDCommand+0x8e>
			return(u8Response);
		}
	}
	
	// SD Command (OR in 0x40 so bit 47 is always a 1
	u8Buffer[0] = (u8Cmd & 0x7f) | 0x40;
    3562:	81 2f       	mov	r24, r17
    3564:	8f 73       	andi	r24, 0x3F	; 63
    3566:	80 64       	ori	r24, 0x40	; 64
    3568:	89 83       	std	Y+1, r24	; 0x01
	
	// 32 Bits of argument
	u8Buffer[1] = (uint8_t) (u32Arg >> 24);
    356a:	da 82       	std	Y+2, r13	; 0x02
	u8Buffer[2] = (uint8_t) (u32Arg >> 16);
    356c:	eb 82       	std	Y+3, r14	; 0x03
	u8Buffer[3] = (uint8_t) (u32Arg >> 8);
    356e:	fc 82       	std	Y+4, r15	; 0x04
	u8Buffer[4] = (uint8_t) (u32Arg >> 0);
    3570:	0d 83       	std	Y+5, r16	; 0x05
	
	// Valid CRCs for specific commands
	u8CRC = 0;
	if (CMD0 == u8Cmd)
    3572:	11 23       	and	r17, r17
    3574:	11 f0       	breq	.+4      	; 0x357a <SDCommand+0x56>
	u8Buffer[2] = (uint8_t) (u32Arg >> 16);
	u8Buffer[3] = (uint8_t) (u32Arg >> 8);
	u8Buffer[4] = (uint8_t) (u32Arg >> 0);
	
	// Valid CRCs for specific commands
	u8CRC = 0;
    3576:	80 e0       	ldi	r24, 0x00	; 0
    3578:	01 c0       	rjmp	.+2      	; 0x357c <SDCommand+0x58>
	if (CMD0 == u8Cmd)
	{
		u8CRC = 0x95;
    357a:	85 e9       	ldi	r24, 0x95	; 149
	}
	
	if (CMD8 == u8Cmd)
    357c:	18 30       	cpi	r17, 0x08	; 8
    357e:	09 f4       	brne	.+2      	; 0x3582 <SDCommand+0x5e>
	{
		u8CRC = 0x87;
    3580:	87 e8       	ldi	r24, 0x87	; 135
	}
	
	// Now the CRC - Bit 0 means "ignore CRC"
	u8Buffer[5] = (uint8_t) (u8CRC | 0x01);
    3582:	81 60       	ori	r24, 0x01	; 1
    3584:	8e 83       	std	Y+6, r24	; 0x06
	
	// Send all bytes to the SD card
	SPIWrite(u8Buffer,
    3586:	46 e0       	ldi	r20, 0x06	; 6
    3588:	50 e0       	ldi	r21, 0x00	; 0
    358a:	be 01       	movw	r22, r28
    358c:	6f 5f       	subi	r22, 0xFF	; 255
    358e:	7f 4f       	sbci	r23, 0xFF	; 255
    3590:	81 e0       	ldi	r24, 0x01	; 1
    3592:	0e 94 ba 20 	call	0x4174	; 0x4174 <SPITransaction>
			 sizeof(u8Buffer));
			 
	u8Count = 10;
    3596:	1a e0       	ldi	r17, 0x0A	; 10
	
	do 
	{
		SPIRead(&u8Response,
    3598:	41 e0       	ldi	r20, 0x01	; 1
    359a:	50 e0       	ldi	r21, 0x00	; 0
    359c:	be 01       	movw	r22, r28
    359e:	69 5f       	subi	r22, 0xF9	; 249
    35a0:	7f 4f       	sbci	r23, 0xFF	; 255
    35a2:	83 e0       	ldi	r24, 0x03	; 3
    35a4:	0e 94 ba 20 	call	0x4174	; 0x4174 <SPITransaction>
				sizeof(u8Response));
	} while ((u8Response & 0x80) && --u8Count);
    35a8:	8f 81       	ldd	r24, Y+7	; 0x07
    35aa:	88 23       	and	r24, r24
    35ac:	14 f4       	brge	.+4      	; 0x35b2 <SDCommand+0x8e>
    35ae:	11 50       	subi	r17, 0x01	; 1
    35b0:	99 f7       	brne	.-26     	; 0x3598 <SDCommand+0x74>
	
	return(u8Response);
}
    35b2:	27 96       	adiw	r28, 0x07	; 7
    35b4:	0f b6       	in	r0, 0x3f	; 63
    35b6:	f8 94       	cli
    35b8:	de bf       	out	0x3e, r29	; 62
    35ba:	0f be       	out	0x3f, r0	; 63
    35bc:	cd bf       	out	0x3d, r28	; 61
    35be:	df 91       	pop	r29
    35c0:	cf 91       	pop	r28
    35c2:	1f 91       	pop	r17
    35c4:	0f 91       	pop	r16
    35c6:	ff 90       	pop	r15
    35c8:	ef 90       	pop	r14
    35ca:	df 90       	pop	r13
    35cc:	08 95       	ret

Disassembly of section .text.SDGoIdle:

00004da2 <SDGoIdle>:
			sizeof(uint32_t));
}

// SD - Go idle!
static uint8_t SDGoIdle(uint8_t *pu8Response)
{
    4da2:	cf 93       	push	r28
	uint8_t u8Response;
	
	SDSetCS(true);
    4da4:	81 e0       	ldi	r24, 0x01	; 1
    4da6:	0e 94 7b 27 	call	0x4ef6	; 0x4ef6 <SDSetCS>
	
	// Send our CMD0 (go idle)
	u8Response = SDCommand(CMD0,
    4daa:	40 e0       	ldi	r20, 0x00	; 0
    4dac:	50 e0       	ldi	r21, 0x00	; 0
    4dae:	ba 01       	movw	r22, r20
    4db0:	80 e0       	ldi	r24, 0x00	; 0
    4db2:	0e 94 92 1a 	call	0x3524	; 0x3524 <SDCommand>
    4db6:	c8 2f       	mov	r28, r24
						   CMD0_ARG);
						   
	SDSetCS(false);
    4db8:	80 e0       	ldi	r24, 0x00	; 0
    4dba:	0e 94 7b 27 	call	0x4ef6	; 0x4ef6 <SDSetCS>

	return(u8Response);
}
    4dbe:	8c 2f       	mov	r24, r28
    4dc0:	cf 91       	pop	r28
    4dc2:	08 95       	ret

Disassembly of section .text.SDSendOpCondition:

000047ac <SDSendOpCondition>:
#define ACMD41_CRC  0x00

// Send operation condition
static uint8_t SDSendOpCondition(uint8_t *pu8Response,
								 uint32_t u32Arg)
{
    47ac:	cf 92       	push	r12
    47ae:	df 92       	push	r13
    47b0:	ef 92       	push	r14
    47b2:	ff 92       	push	r15
    47b4:	cf 93       	push	r28
    47b6:	6a 01       	movw	r12, r20
    47b8:	7b 01       	movw	r14, r22
	uint8_t u8Response;
	
	// Assert chip select
	SDSetCS(true);
    47ba:	81 e0       	ldi	r24, 0x01	; 1
    47bc:	0e 94 7b 27 	call	0x4ef6	; 0x4ef6 <SDSetCS>
	
	// Send the app command
	u8Response = SDCommand(ACMD41,
    47c0:	b7 01       	movw	r22, r14
    47c2:	a6 01       	movw	r20, r12
    47c4:	89 ea       	ldi	r24, 0xA9	; 169
    47c6:	0e 94 92 1a 	call	0x3524	; 0x3524 <SDCommand>
    47ca:	c8 2f       	mov	r28, r24
						   u32Arg);
	// Deassert chip select
	SDSetCS(false);
    47cc:	80 e0       	ldi	r24, 0x00	; 0
    47ce:	0e 94 7b 27 	call	0x4ef6	; 0x4ef6 <SDSetCS>
	
	return(u8Response);
}
    47d2:	8c 2f       	mov	r24, r28
    47d4:	cf 91       	pop	r28
    47d6:	ff 90       	pop	r15
    47d8:	ef 90       	pop	r14
    47da:	df 90       	pop	r13
    47dc:	cf 90       	pop	r12
    47de:	08 95       	ret

Disassembly of section .text.SDSendOpConditionArg:

00004224 <SDSendOpConditionArg>:
	return(u8Response);
}

static uint8_t SDSendOpConditionArg(uint8_t *pu8Resp,
									uint32_t u32Arg)
{
    4224:	cf 92       	push	r12
    4226:	df 92       	push	r13
    4228:	ef 92       	push	r14
    422a:	ff 92       	push	r15
    422c:	0f 93       	push	r16
    422e:	1f 93       	push	r17
    4230:	cf 93       	push	r28
    4232:	df 93       	push	r29
    4234:	8c 01       	movw	r16, r24
    4236:	6a 01       	movw	r12, r20
    4238:	7b 01       	movw	r14, r22
	uint8_t u8Attempts;
	uint8_t u8Response;
	
	u8Attempts = 0;
    423a:	c0 e0       	ldi	r28, 0x00	; 0
		
	// Loop until it comes alive - if it comes alive. Put the card in idle state.
	while (u8Attempts < SD_GO_IDLE_RETRIES)
    423c:	0f c0       	rjmp	.+30     	; 0x425c <SDSendOpConditionArg+0x38>
	{
		u8Response = SDSendOpCondition(pu8Resp,
    423e:	b7 01       	movw	r22, r14
    4240:	a6 01       	movw	r20, r12
    4242:	c8 01       	movw	r24, r16
    4244:	0e 94 d6 23 	call	0x47ac	; 0x47ac <SDSendOpCondition>
    4248:	d8 2f       	mov	r29, r24
									   u32Arg);
		if (0 == u8Response)
    424a:	88 23       	and	r24, r24
    424c:	49 f0       	breq	.+18     	; 0x4260 <SDSendOpConditionArg+0x3c>
		{
			break;
		}
			
		// Give it a little time to settle
		Delay(10000);
    424e:	60 e1       	ldi	r22, 0x10	; 16
    4250:	77 e2       	ldi	r23, 0x27	; 39
    4252:	80 e0       	ldi	r24, 0x00	; 0
    4254:	90 e0       	ldi	r25, 0x00	; 0
    4256:	0e 94 e7 21 	call	0x43ce	; 0x43ce <Delay>
		u8Attempts++;
    425a:	cf 5f       	subi	r28, 0xFF	; 255
	uint8_t u8Response;
	
	u8Attempts = 0;
		
	// Loop until it comes alive - if it comes alive. Put the card in idle state.
	while (u8Attempts < SD_GO_IDLE_RETRIES)
    425c:	c4 36       	cpi	r28, 0x64	; 100
    425e:	78 f3       	brcs	.-34     	; 0x423e <SDSendOpConditionArg+0x1a>
		Delay(10000);
		u8Attempts++;
	}

	// If we've retried too much, bail out. We're done.
	if (SD_GO_IDLE_RETRIES == u8Attempts)
    4260:	c4 36       	cpi	r28, 0x64	; 100
    4262:	09 f4       	brne	.+2      	; 0x4266 <SDSendOpConditionArg+0x42>
	{
		u8Response = 0x80;
    4264:	d0 e8       	ldi	r29, 0x80	; 128
	}
	
	return(u8Response);
}
    4266:	8d 2f       	mov	r24, r29
    4268:	df 91       	pop	r29
    426a:	cf 91       	pop	r28
    426c:	1f 91       	pop	r17
    426e:	0f 91       	pop	r16
    4270:	ff 90       	pop	r15
    4272:	ef 90       	pop	r14
    4274:	df 90       	pop	r13
    4276:	cf 90       	pop	r12
    4278:	08 95       	ret

Disassembly of section .text.SDWaitResponse7:

00004fd4 <SDWaitResponse7>:

// This will return true if a response 7 was received, otherwise false
static void SDWaitResponse7(uint8_t *pu8ResponseByte)
{
	// Go read the remaining 4 bytes
	SPIRead(pu8ResponseByte,
    4fd4:	44 e0       	ldi	r20, 0x04	; 4
    4fd6:	50 e0       	ldi	r21, 0x00	; 0
    4fd8:	bc 01       	movw	r22, r24
    4fda:	83 e0       	ldi	r24, 0x03	; 3
    4fdc:	0e 94 ba 20 	call	0x4174	; 0x4174 <SPITransaction>
    4fe0:	08 95       	ret

Disassembly of section .text.SDSendInterfaceCondition:

000047e0 <SDSendInterfaceCondition>:
	return(u8Response);
}

// Send interface condition
static uint8_t SDSendInterfaceCondition(uint8_t *pu8Response)
{
    47e0:	0f 93       	push	r16
    47e2:	1f 93       	push	r17
    47e4:	cf 93       	push	r28
    47e6:	8c 01       	movw	r16, r24
	uint8_t u8Response;
	
	SDSetCS(true);
    47e8:	81 e0       	ldi	r24, 0x01	; 1
    47ea:	0e 94 7b 27 	call	0x4ef6	; 0x4ef6 <SDSetCS>
	
	// Send our CMD8 Send interface condition
	u8Response = SDCommand(CMD8,
    47ee:	4a ea       	ldi	r20, 0xAA	; 170
    47f0:	51 e0       	ldi	r21, 0x01	; 1
    47f2:	60 e0       	ldi	r22, 0x00	; 0
    47f4:	70 e0       	ldi	r23, 0x00	; 0
    47f6:	88 e0       	ldi	r24, 0x08	; 8
    47f8:	0e 94 92 1a 	call	0x3524	; 0x3524 <SDCommand>
    47fc:	c8 2f       	mov	r28, r24
						   CMD8_ARG);
						   
	SDWaitResponse7(pu8Response);
    47fe:	c8 01       	movw	r24, r16
    4800:	0e 94 ea 27 	call	0x4fd4	; 0x4fd4 <SDWaitResponse7>
		
	SDSetCS(false);
    4804:	80 e0       	ldi	r24, 0x00	; 0
    4806:	0e 94 7b 27 	call	0x4ef6	; 0x4ef6 <SDSetCS>

	return(u8Response);
}
    480a:	8c 2f       	mov	r24, r28
    480c:	cf 91       	pop	r28
    480e:	1f 91       	pop	r17
    4810:	0f 91       	pop	r16
    4812:	08 95       	ret

Disassembly of section .text.SDReadOCR:

00004814 <SDReadOCR>:
#define CMD58_ARG   0x00000000
#define CMD58_CRC   0x00

// Go read the OCR
static uint8_t SDReadOCR(uint8_t *pu8Response)
{
    4814:	0f 93       	push	r16
    4816:	1f 93       	push	r17
    4818:	cf 93       	push	r28
    481a:	8c 01       	movw	r16, r24
	uint8_t u8Response;
	
	// Assert chip select
	SDSetCS(true);
    481c:	81 e0       	ldi	r24, 0x01	; 1
    481e:	0e 94 7b 27 	call	0x4ef6	; 0x4ef6 <SDSetCS>
	
	// Send the app command
	u8Response = SDCommand(CMD58,
    4822:	40 e0       	ldi	r20, 0x00	; 0
    4824:	50 e0       	ldi	r21, 0x00	; 0
    4826:	ba 01       	movw	r22, r20
    4828:	8a e3       	ldi	r24, 0x3A	; 58
    482a:	0e 94 92 1a 	call	0x3524	; 0x3524 <SDCommand>
    482e:	c8 2f       	mov	r28, r24
						   CMD58_ARG);

	// Read response
	SDWaitResponse7(pu8Response);
    4830:	c8 01       	movw	r24, r16
    4832:	0e 94 ea 27 	call	0x4fd4	; 0x4fd4 <SDWaitResponse7>

	// Deassert chip select
	SDSetCS(false);
    4836:	80 e0       	ldi	r24, 0x00	; 0
    4838:	0e 94 7b 27 	call	0x4ef6	; 0x4ef6 <SDSetCS>
	
	return(u8Response);
}
    483c:	8c 2f       	mov	r24, r28
    483e:	cf 91       	pop	r28
    4840:	1f 91       	pop	r17
    4842:	0f 91       	pop	r16
    4844:	08 95       	ret

Disassembly of section .text.SDReadCSD:

00003ce2 <SDReadCSD>:
#define CMD9_ARG    0x000000000
#define CMD9_CRC    0x00

// Read CSD (card specific data) - CSD is 128 bits - see the SD spec for details.
static uint8_t SDReadCSD(uint8_t *pu8CSD)
{
    3ce2:	ef 92       	push	r14
    3ce4:	ff 92       	push	r15
    3ce6:	0f 93       	push	r16
    3ce8:	1f 93       	push	r17
    3cea:	cf 93       	push	r28
    3cec:	df 93       	push	r29
    3cee:	0f 92       	push	r0
    3cf0:	cd b7       	in	r28, 0x3d	; 61
    3cf2:	de b7       	in	r29, 0x3e	; 62
    3cf4:	7c 01       	movw	r14, r24
	uint8_t u8Response;
	uint8_t u8CmdResponse;
	uint8_t u8Count = 8;
	
	SDSetCS(true);
    3cf6:	81 e0       	ldi	r24, 0x01	; 1
    3cf8:	0e 94 7b 27 	call	0x4ef6	; 0x4ef6 <SDSetCS>
	
	// Send our CMD9 (read CSD)
	u8CmdResponse = SDCommand(CMD9,
    3cfc:	40 e0       	ldi	r20, 0x00	; 0
    3cfe:	50 e0       	ldi	r21, 0x00	; 0
    3d00:	ba 01       	movw	r22, r20
    3d02:	89 e0       	ldi	r24, 0x09	; 9
    3d04:	0e 94 92 1a 	call	0x3524	; 0x3524 <SDCommand>
    3d08:	08 2f       	mov	r16, r24
							  CMD9_ARG);
	
	// Success! Let's get a response
	if (u8CmdResponse)
    3d0a:	81 11       	cpse	r24, r1
    3d0c:	1c c0       	rjmp	.+56     	; 0x3d46 <SDReadCSD+0x64>
    3d0e:	18 e0       	ldi	r17, 0x08	; 8
    3d10:	01 c0       	rjmp	.+2      	; 0x3d14 <SDReadCSD+0x32>
	do 
	{
		SPIRead(&u8Response,
			    sizeof(u8Response));
	} while ((u8Response != SD_START_TOKEN) &&
			 (u8Count--));
    3d12:	18 2f       	mov	r17, r24
	}
	
	// Wait until SD_START_TOKEN (start of data sector). We should easily see it in a few bytes.
	do 
	{
		SPIRead(&u8Response,
    3d14:	41 e0       	ldi	r20, 0x01	; 1
    3d16:	50 e0       	ldi	r21, 0x00	; 0
    3d18:	be 01       	movw	r22, r28
    3d1a:	6f 5f       	subi	r22, 0xFF	; 255
    3d1c:	7f 4f       	sbci	r23, 0xFF	; 255
    3d1e:	83 e0       	ldi	r24, 0x03	; 3
    3d20:	0e 94 ba 20 	call	0x4174	; 0x4174 <SPITransaction>
			    sizeof(u8Response));
	} while ((u8Response != SD_START_TOKEN) &&
    3d24:	89 81       	ldd	r24, Y+1	; 0x01
			 (u8Count--));
    3d26:	8e 3f       	cpi	r24, 0xFE	; 254
    3d28:	29 f0       	breq	.+10     	; 0x3d34 <SDReadCSD+0x52>
    3d2a:	8f ef       	ldi	r24, 0xFF	; 255
    3d2c:	81 0f       	add	r24, r17
	// Wait until SD_START_TOKEN (start of data sector). We should easily see it in a few bytes.
	do 
	{
		SPIRead(&u8Response,
			    sizeof(u8Response));
	} while ((u8Response != SD_START_TOKEN) &&
    3d2e:	11 11       	cpse	r17, r1
    3d30:	f0 cf       	rjmp	.-32     	; 0x3d12 <SDReadCSD+0x30>
    3d32:	01 c0       	rjmp	.+2      	; 0x3d36 <SDReadCSD+0x54>
    3d34:	81 2f       	mov	r24, r17
			 (u8Count--));
			 
	// If we haven't seen it in u8Count bytes, then error the call
	if (0 == u8Count)
    3d36:	88 23       	and	r24, r24
    3d38:	31 f0       	breq	.+12     	; 0x3d46 <SDReadCSD+0x64>
	{
		goto errorExit;
	}
	
	// Go read the remaining 16 bytes
	SPIRead(pu8CSD,
    3d3a:	40 e1       	ldi	r20, 0x10	; 16
    3d3c:	50 e0       	ldi	r21, 0x00	; 0
    3d3e:	b7 01       	movw	r22, r14
    3d40:	83 e0       	ldi	r24, 0x03	; 3
    3d42:	0e 94 ba 20 	call	0x4174	; 0x4174 <SPITransaction>
		    16);
	
errorExit:	
	SDSetCS(false);
    3d46:	80 e0       	ldi	r24, 0x00	; 0
    3d48:	0e 94 7b 27 	call	0x4ef6	; 0x4ef6 <SDSetCS>
	return(u8CmdResponse);
	
}
    3d4c:	80 2f       	mov	r24, r16
    3d4e:	0f 90       	pop	r0
    3d50:	df 91       	pop	r29
    3d52:	cf 91       	pop	r28
    3d54:	1f 91       	pop	r17
    3d56:	0f 91       	pop	r16
    3d58:	ff 90       	pop	r15
    3d5a:	ef 90       	pop	r14
    3d5c:	08 95       	ret

Disassembly of section .text.SDReceiveDataBlock:

000038ca <SDReceiveDataBlock>:
}

// Receives a datablock during the data phase which may take some time
static bool SDReceiveDataBlock(uint8_t *pu8Buffer,
							   uint16_t u16RXCount)
{
    38ca:	cf 92       	push	r12
    38cc:	df 92       	push	r13
    38ce:	ef 92       	push	r14
    38d0:	ff 92       	push	r15
    38d2:	0f 93       	push	r16
    38d4:	1f 93       	push	r17
    38d6:	cf 93       	push	r28
    38d8:	df 93       	push	r29
    38da:	0f 92       	push	r0
    38dc:	cd b7       	in	r28, 0x3d	; 61
    38de:	de b7       	in	r29, 0x3e	; 62
    38e0:	7c 01       	movw	r14, r24
    38e2:	6b 01       	movw	r12, r22
	uint8_t u8Response;
	uint16_t u16Count = 4096;
    38e4:	00 e0       	ldi	r16, 0x00	; 0
    38e6:	10 e1       	ldi	r17, 0x10	; 16
    38e8:	01 c0       	rjmp	.+2      	; 0x38ec <SDReceiveDataBlock+0x22>
	{
		SPIRead(&u8Response,
				sizeof(u8Response));
	} 
	while ((u8Response != SD_START_TOKEN) &&
		   (u16Count--));
    38ea:	89 01       	movw	r16, r18
	uint16_t u16Count = 4096;
	
	// Wait for response token
	do 
	{
		SPIRead(&u8Response,
    38ec:	41 e0       	ldi	r20, 0x01	; 1
    38ee:	50 e0       	ldi	r21, 0x00	; 0
    38f0:	be 01       	movw	r22, r28
    38f2:	6f 5f       	subi	r22, 0xFF	; 255
    38f4:	7f 4f       	sbci	r23, 0xFF	; 255
    38f6:	83 e0       	ldi	r24, 0x03	; 3
    38f8:	0e 94 ba 20 	call	0x4174	; 0x4174 <SPITransaction>
				sizeof(u8Response));
	} 
	while ((u8Response != SD_START_TOKEN) &&
    38fc:	89 81       	ldd	r24, Y+1	; 0x01
		   (u16Count--));
    38fe:	8e 3f       	cpi	r24, 0xFE	; 254
    3900:	29 f0       	breq	.+10     	; 0x390c <SDReceiveDataBlock+0x42>
    3902:	98 01       	movw	r18, r16
    3904:	21 50       	subi	r18, 0x01	; 1
    3906:	31 09       	sbc	r19, r1
	do 
	{
		SPIRead(&u8Response,
				sizeof(u8Response));
	} 
	while ((u8Response != SD_START_TOKEN) &&
    3908:	01 2b       	or	r16, r17
    390a:	79 f7       	brne	.-34     	; 0x38ea <SDReceiveDataBlock+0x20>
		   (u16Count--));
		   
	if (u8Response != SD_START_TOKEN)
    390c:	8e 3f       	cpi	r24, 0xFE	; 254
    390e:	b9 f4       	brne	.+46     	; 0x393e <SDReceiveDataBlock+0x74>
	{
		return(false);
	}
	
	// Start of data. Pull it down.
	SPIRead(pu8Buffer,
    3910:	a6 01       	movw	r20, r12
    3912:	b7 01       	movw	r22, r14
    3914:	83 e0       	ldi	r24, 0x03	; 3
    3916:	0e 94 ba 20 	call	0x4174	; 0x4174 <SPITransaction>
			u16RXCount);
			
	// Discard CRC
	SPIRead(&u8Response,
    391a:	41 e0       	ldi	r20, 0x01	; 1
    391c:	50 e0       	ldi	r21, 0x00	; 0
    391e:	be 01       	movw	r22, r28
    3920:	6f 5f       	subi	r22, 0xFF	; 255
    3922:	7f 4f       	sbci	r23, 0xFF	; 255
    3924:	83 e0       	ldi	r24, 0x03	; 3
    3926:	0e 94 ba 20 	call	0x4174	; 0x4174 <SPITransaction>
			sizeof(u8Response));
	SPIRead(&u8Response,
    392a:	41 e0       	ldi	r20, 0x01	; 1
    392c:	50 e0       	ldi	r21, 0x00	; 0
    392e:	be 01       	movw	r22, r28
    3930:	6f 5f       	subi	r22, 0xFF	; 255
    3932:	7f 4f       	sbci	r23, 0xFF	; 255
    3934:	83 e0       	ldi	r24, 0x03	; 3
    3936:	0e 94 ba 20 	call	0x4174	; 0x4174 <SPITransaction>
			sizeof(u8Response));
	return(true);			   
    393a:	81 e0       	ldi	r24, 0x01	; 1
    393c:	01 c0       	rjmp	.+2      	; 0x3940 <SDReceiveDataBlock+0x76>
	while ((u8Response != SD_START_TOKEN) &&
		   (u16Count--));
		   
	if (u8Response != SD_START_TOKEN)
	{
		return(false);
    393e:	80 e0       	ldi	r24, 0x00	; 0
	SPIRead(&u8Response,
			sizeof(u8Response));
	SPIRead(&u8Response,
			sizeof(u8Response));
	return(true);			   
}
    3940:	0f 90       	pop	r0
    3942:	df 91       	pop	r29
    3944:	cf 91       	pop	r28
    3946:	1f 91       	pop	r17
    3948:	0f 91       	pop	r16
    394a:	ff 90       	pop	r15
    394c:	ef 90       	pop	r14
    394e:	df 90       	pop	r13
    3950:	cf 90       	pop	r12
    3952:	08 95       	ret

Disassembly of section .text.SDTransmitDataBlock:

00003240 <SDTransmitDataBlock>:

// Transmits a datablock during the data phase which may take some time
static bool SDTransmitDataBlock(uint8_t *pu8Buffer,
							    uint16_t u16TXCount,
								uint8_t u8DataPhaseToken)
{
    3240:	ef 92       	push	r14
    3242:	ff 92       	push	r15
    3244:	0f 93       	push	r16
    3246:	1f 93       	push	r17
    3248:	cf 93       	push	r28
    324a:	df 93       	push	r29
    324c:	00 d0       	rcall	.+0      	; 0x324e <SDTransmitDataBlock+0xe>
    324e:	cd b7       	in	r28, 0x3d	; 61
    3250:	de b7       	in	r29, 0x3e	; 62
    3252:	8c 01       	movw	r16, r24
    3254:	7b 01       	movw	r14, r22
    3256:	4a 83       	std	Y+2, r20	; 0x02
	uint8_t u8Response;
	uint16_t u16Attempts;
	bool bResult = true;

	// Send the data phase token (whatever it is)
	SPIWrite(&u8DataPhaseToken,
    3258:	41 e0       	ldi	r20, 0x01	; 1
    325a:	50 e0       	ldi	r21, 0x00	; 0
    325c:	be 01       	movw	r22, r28
    325e:	6e 5f       	subi	r22, 0xFE	; 254
    3260:	7f 4f       	sbci	r23, 0xFF	; 255
    3262:	81 e0       	ldi	r24, 0x01	; 1
    3264:	0e 94 ba 20 	call	0x4174	; 0x4174 <SPITransaction>
			 sizeof(u8DataPhaseToken));
	
	if (u8DataPhaseToken != SD_STOP_TRANSACTION)
    3268:	8a 81       	ldd	r24, Y+2	; 0x02
    326a:	8d 3f       	cpi	r24, 0xFD	; 253
    326c:	e1 f1       	breq	.+120    	; 0x32e6 <SDTransmitDataBlock+0xa6>
	{
		// As long as we're not stopping a transaction, we're writing data
		SPIWrite(pu8Buffer,
    326e:	a7 01       	movw	r20, r14
    3270:	b8 01       	movw	r22, r16
    3272:	81 e0       	ldi	r24, 0x01	; 1
    3274:	0e 94 ba 20 	call	0x4174	; 0x4174 <SPITransaction>
				 u16TXCount);
				 
		// Wait for acceptance of the sector
		u16Attempts = 0;
    3278:	00 e0       	ldi	r16, 0x00	; 0
    327a:	10 e0       	ldi	r17, 0x00	; 0
		while (u16Attempts < SD_MAX_WRITE_ATTEMPTS)
    327c:	0d c0       	rjmp	.+26     	; 0x3298 <SDTransmitDataBlock+0x58>
		{
			// Get some data
			SPIRead(&u8Response,
    327e:	41 e0       	ldi	r20, 0x01	; 1
    3280:	50 e0       	ldi	r21, 0x00	; 0
    3282:	be 01       	movw	r22, r28
    3284:	6f 5f       	subi	r22, 0xFF	; 255
    3286:	7f 4f       	sbci	r23, 0xFF	; 255
    3288:	83 e0       	ldi	r24, 0x03	; 3
    328a:	0e 94 ba 20 	call	0x4174	; 0x4174 <SPITransaction>
					sizeof(u8Response));
			if (u8Response != 0xff)
    328e:	89 81       	ldd	r24, Y+1	; 0x01
    3290:	8f 3f       	cpi	r24, 0xFF	; 255
    3292:	31 f4       	brne	.+12     	; 0x32a0 <SDTransmitDataBlock+0x60>
			{
				break;
			}
				
			++u16Attempts;
    3294:	0f 5f       	subi	r16, 0xFF	; 255
    3296:	1f 4f       	sbci	r17, 0xFF	; 255
		SPIWrite(pu8Buffer,
				 u16TXCount);
				 
		// Wait for acceptance of the sector
		u16Attempts = 0;
		while (u16Attempts < SD_MAX_WRITE_ATTEMPTS)
    3298:	0e 39       	cpi	r16, 0x9E	; 158
    329a:	88 e9       	ldi	r24, 0x98	; 152
    329c:	18 07       	cpc	r17, r24
    329e:	78 f3       	brcs	.-34     	; 0x327e <SDTransmitDataBlock+0x3e>
				
			++u16Attempts;
		}
			
		// We've timed out or else the card is dead
		if (SD_MAX_WRITE_ATTEMPTS == u16Attempts)
    32a0:	0e 39       	cpi	r16, 0x9E	; 158
    32a2:	18 49       	sbci	r17, 0x98	; 152
    32a4:	11 f1       	breq	.+68     	; 0x32ea <SDTransmitDataBlock+0xaa>
			bResult = false;
			goto errorExit;
		}
			
		// See if the data was accepted
		u8Response &= 0x1f;
    32a6:	89 81       	ldd	r24, Y+1	; 0x01
    32a8:	8f 71       	andi	r24, 0x1F	; 31
    32aa:	89 83       	std	Y+1, r24	; 0x01
		if (0x05 == u8Response)
    32ac:	85 30       	cpi	r24, 0x05	; 5
    32ae:	81 f0       	breq	.+32     	; 0x32d0 <SDTransmitDataBlock+0x90>
			// Success!
		}
		else
		{
			// Sector not accepted
			bResult = false;
    32b0:	80 e0       	ldi	r24, 0x00	; 0
    32b2:	1e c0       	rjmp	.+60     	; 0x32f0 <SDTransmitDataBlock+0xb0>
			// Wait for the write to finish
			u16Attempts = 0;
			while (u16Attempts < SD_MAX_WRITE_ATTEMPTS)
			{
				// Wait for the card to accept writing the sector
				SPIRead(&u8Response,
    32b4:	41 e0       	ldi	r20, 0x01	; 1
    32b6:	50 e0       	ldi	r21, 0x00	; 0
    32b8:	be 01       	movw	r22, r28
    32ba:	6f 5f       	subi	r22, 0xFF	; 255
    32bc:	7f 4f       	sbci	r23, 0xFF	; 255
    32be:	83 e0       	ldi	r24, 0x03	; 3
    32c0:	0e 94 ba 20 	call	0x4174	; 0x4174 <SPITransaction>
						sizeof(u8Response));
				if (u8Response)
    32c4:	89 81       	ldd	r24, Y+1	; 0x01
    32c6:	81 11       	cpse	r24, r1
    32c8:	09 c0       	rjmp	.+18     	; 0x32dc <SDTransmitDataBlock+0x9c>
				{
					break;
				}
					
				++u16Attempts;
    32ca:	0f 5f       	subi	r16, 0xFF	; 255
    32cc:	1f 4f       	sbci	r17, 0xFF	; 255
    32ce:	02 c0       	rjmp	.+4      	; 0x32d4 <SDTransmitDataBlock+0x94>
    32d0:	00 e0       	ldi	r16, 0x00	; 0
    32d2:	10 e0       	ldi	r17, 0x00	; 0
		u8Response &= 0x1f;
		if (0x05 == u8Response)
		{
			// Wait for the write to finish
			u16Attempts = 0;
			while (u16Attempts < SD_MAX_WRITE_ATTEMPTS)
    32d4:	0e 39       	cpi	r16, 0x9E	; 158
    32d6:	88 e9       	ldi	r24, 0x98	; 152
    32d8:	18 07       	cpc	r17, r24
    32da:	60 f3       	brcs	.-40     	; 0x32b4 <SDTransmitDataBlock+0x74>
				}
					
				++u16Attempts;
			}
				
			if (SD_MAX_WRITE_ATTEMPTS == u16Attempts)
    32dc:	0e 39       	cpi	r16, 0x9E	; 158
    32de:	18 49       	sbci	r17, 0x98	; 152
    32e0:	31 f0       	breq	.+12     	; 0x32ee <SDTransmitDataBlock+0xae>
							    uint16_t u16TXCount,
								uint8_t u8DataPhaseToken)
{
	uint8_t u8Response;
	uint16_t u16Attempts;
	bool bResult = true;
    32e2:	81 e0       	ldi	r24, 0x01	; 1
    32e4:	05 c0       	rjmp	.+10     	; 0x32f0 <SDTransmitDataBlock+0xb0>
    32e6:	81 e0       	ldi	r24, 0x01	; 1
    32e8:	03 c0       	rjmp	.+6      	; 0x32f0 <SDTransmitDataBlock+0xb0>
		}
			
		// We've timed out or else the card is dead
		if (SD_MAX_WRITE_ATTEMPTS == u16Attempts)
		{
			bResult = false;
    32ea:	80 e0       	ldi	r24, 0x00	; 0
    32ec:	01 c0       	rjmp	.+2      	; 0x32f0 <SDTransmitDataBlock+0xb0>
				++u16Attempts;
			}
				
			if (SD_MAX_WRITE_ATTEMPTS == u16Attempts)
			{
				bResult = false;
    32ee:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	
errorExit:
	return(bResult);
}
    32f0:	0f 90       	pop	r0
    32f2:	0f 90       	pop	r0
    32f4:	df 91       	pop	r29
    32f6:	cf 91       	pop	r28
    32f8:	1f 91       	pop	r17
    32fa:	0f 91       	pop	r16
    32fc:	ff 90       	pop	r15
    32fe:	ef 90       	pop	r14
    3300:	08 95       	ret

Disassembly of section .text.SDInit:

0000217c <SDInit>:

bool SDGetBlockSize(uint32_t *pu32BlockSize)
{
	*pu32BlockSize = sg_u16BlockSize;
	return(true);
}
    217c:	1f 93       	push	r17
    217e:	cf 93       	push	r28
    2180:	df 93       	push	r29
    2182:	00 d0       	rcall	.+0      	; 0x2184 <SDInit+0x8>
    2184:	00 d0       	rcall	.+0      	; 0x2186 <SDInit+0xa>
    2186:	0f 92       	push	r0
    2188:	cd b7       	in	r28, 0x3d	; 61
    218a:	de b7       	in	r29, 0x3e	; 62
    218c:	87 b1       	in	r24, 0x07	; 7
    218e:	80 64       	ori	r24, 0x40	; 64
    2190:	87 b9       	out	0x07, r24	; 7
    2192:	88 b1       	in	r24, 0x08	; 8
    2194:	80 64       	ori	r24, 0x40	; 64
    2196:	88 b9       	out	0x08, r24	; 8
    2198:	88 b1       	in	r24, 0x08	; 8
    219a:	80 64       	ori	r24, 0x40	; 64
    219c:	88 b9       	out	0x08, r24	; 8
    219e:	0e 94 db 24 	call	0x49b6	; 0x49b6 <SPIInit>
    21a2:	0e 94 4d 23 	call	0x469a	; 0x469a <SDPowerup>
    21a6:	10 e0       	ldi	r17, 0x00	; 0
    21a8:	0d c0       	rjmp	.+26     	; 0x21c4 <SDInit+0x48>
    21aa:	ce 01       	movw	r24, r28
    21ac:	01 96       	adiw	r24, 0x01	; 1
    21ae:	0e 94 d1 26 	call	0x4da2	; 0x4da2 <SDGoIdle>
    21b2:	81 30       	cpi	r24, 0x01	; 1
    21b4:	49 f0       	breq	.+18     	; 0x21c8 <SDInit+0x4c>
    21b6:	60 e1       	ldi	r22, 0x10	; 16
    21b8:	77 e2       	ldi	r23, 0x27	; 39
    21ba:	80 e0       	ldi	r24, 0x00	; 0
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	0e 94 e7 21 	call	0x43ce	; 0x43ce <Delay>
    21c2:	1f 5f       	subi	r17, 0xFF	; 255
    21c4:	14 36       	cpi	r17, 0x64	; 100
    21c6:	88 f3       	brcs	.-30     	; 0x21aa <SDInit+0x2e>
    21c8:	14 36       	cpi	r17, 0x64	; 100
    21ca:	09 f4       	brne	.+2      	; 0x21ce <SDInit+0x52>
    21cc:	76 c0       	rjmp	.+236    	; 0x22ba <SDInit+0x13e>
    21ce:	ce 01       	movw	r24, r28
    21d0:	01 96       	adiw	r24, 0x01	; 1
    21d2:	25 e0       	ldi	r18, 0x05	; 5
    21d4:	fc 01       	movw	r30, r24
    21d6:	11 92       	st	Z+, r1
    21d8:	2a 95       	dec	r18
    21da:	e9 f7       	brne	.-6      	; 0x21d6 <SDInit+0x5a>
    21dc:	0e 94 f0 23 	call	0x47e0	; 0x47e0 <SDSendInterfaceCondition>
    21e0:	81 30       	cpi	r24, 0x01	; 1
    21e2:	09 f0       	breq	.+2      	; 0x21e6 <SDInit+0x6a>
    21e4:	5e c0       	rjmp	.+188    	; 0x22a2 <SDInit+0x126>
    21e6:	8c 81       	ldd	r24, Y+4	; 0x04
    21e8:	8a 3a       	cpi	r24, 0xAA	; 170
    21ea:	09 f0       	breq	.+2      	; 0x21ee <SDInit+0x72>
    21ec:	68 c0       	rjmp	.+208    	; 0x22be <SDInit+0x142>
    21ee:	40 e0       	ldi	r20, 0x00	; 0
    21f0:	50 e0       	ldi	r21, 0x00	; 0
    21f2:	60 e0       	ldi	r22, 0x00	; 0
    21f4:	70 e4       	ldi	r23, 0x40	; 64
    21f6:	ce 01       	movw	r24, r28
    21f8:	01 96       	adiw	r24, 0x01	; 1
    21fa:	0e 94 12 21 	call	0x4224	; 0x4224 <SDSendOpConditionArg>
    21fe:	81 11       	cpse	r24, r1
    2200:	60 c0       	rjmp	.+192    	; 0x22c2 <SDInit+0x146>
    2202:	ce 01       	movw	r24, r28
    2204:	01 96       	adiw	r24, 0x01	; 1
    2206:	0e 94 0a 24 	call	0x4814	; 0x4814 <SDReadOCR>
    220a:	88 23       	and	r24, r24
    220c:	0c f4       	brge	.+2      	; 0x2210 <SDInit+0x94>
    220e:	5b c0       	rjmp	.+182    	; 0x22c6 <SDInit+0x14a>
    2210:	8d e2       	ldi	r24, 0x2D	; 45
    2212:	99 e0       	ldi	r25, 0x09	; 9
    2214:	0e 94 71 1e 	call	0x3ce2	; 0x3ce2 <SDReadCSD>
    2218:	88 23       	and	r24, r24
    221a:	0c f4       	brge	.+2      	; 0x221e <SDInit+0xa2>
    221c:	56 c0       	rjmp	.+172    	; 0x22ca <SDInit+0x14e>
    221e:	ed e2       	ldi	r30, 0x2D	; 45
    2220:	f9 e0       	ldi	r31, 0x09	; 9
    2222:	87 81       	ldd	r24, Z+7	; 0x07
    2224:	8f 73       	andi	r24, 0x3F	; 63
    2226:	90 e0       	ldi	r25, 0x00	; 0
    2228:	a0 e0       	ldi	r26, 0x00	; 0
    222a:	b0 e0       	ldi	r27, 0x00	; 0
    222c:	bc 01       	movw	r22, r24
    222e:	55 27       	eor	r21, r21
    2230:	44 27       	eor	r20, r20
    2232:	90 85       	ldd	r25, Z+8	; 0x08
    2234:	89 2f       	mov	r24, r25
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	a0 e0       	ldi	r26, 0x00	; 0
    223a:	b0 e0       	ldi	r27, 0x00	; 0
    223c:	ba 2f       	mov	r27, r26
    223e:	a9 2f       	mov	r26, r25
    2240:	98 2f       	mov	r25, r24
    2242:	88 27       	eor	r24, r24
    2244:	84 2b       	or	r24, r20
    2246:	95 2b       	or	r25, r21
    2248:	a6 2b       	or	r26, r22
    224a:	b7 2b       	or	r27, r23
    224c:	21 85       	ldd	r18, Z+9	; 0x09
    224e:	82 2b       	or	r24, r18
    2250:	01 96       	adiw	r24, 0x01	; 1
    2252:	a1 1d       	adc	r26, r1
    2254:	b1 1d       	adc	r27, r1
    2256:	07 2e       	mov	r0, r23
    2258:	7a e0       	ldi	r23, 0x0A	; 10
    225a:	88 0f       	add	r24, r24
    225c:	99 1f       	adc	r25, r25
    225e:	aa 1f       	adc	r26, r26
    2260:	bb 1f       	adc	r27, r27
    2262:	7a 95       	dec	r23
    2264:	d1 f7       	brne	.-12     	; 0x225a <SDInit+0xde>
    2266:	70 2d       	mov	r23, r0
    2268:	80 93 54 09 	sts	0x0954, r24	; 0x800954 <sg_u32SDSectorCount>
    226c:	90 93 55 09 	sts	0x0955, r25	; 0x800955 <sg_u32SDSectorCount+0x1>
    2270:	a0 93 56 09 	sts	0x0956, r26	; 0x800956 <sg_u32SDSectorCount+0x2>
    2274:	b0 93 57 09 	sts	0x0957, r27	; 0x800957 <sg_u32SDSectorCount+0x3>
    2278:	25 81       	ldd	r18, Z+5	; 0x05
    227a:	2f 70       	andi	r18, 0x0F	; 15
    227c:	81 e0       	ldi	r24, 0x01	; 1
    227e:	90 e0       	ldi	r25, 0x00	; 0
    2280:	02 c0       	rjmp	.+4      	; 0x2286 <SDInit+0x10a>
    2282:	88 0f       	add	r24, r24
    2284:	99 1f       	adc	r25, r25
    2286:	2a 95       	dec	r18
    2288:	e2 f7       	brpl	.-8      	; 0x2282 <SDInit+0x106>
    228a:	90 93 69 09 	sts	0x0969, r25	; 0x800969 <sg_u16BlockSize+0x1>
    228e:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <sg_u16BlockSize>
    2292:	60 ec       	ldi	r22, 0xC0	; 192
    2294:	78 ed       	ldi	r23, 0xD8	; 216
    2296:	87 ea       	ldi	r24, 0xA7	; 167
    2298:	90 e0       	ldi	r25, 0x00	; 0
    229a:	0e 94 f6 17 	call	0x2fec	; 0x2fec <SPISetBaudRate>
    229e:	81 e0       	ldi	r24, 0x01	; 1
    22a0:	17 c0       	rjmp	.+46     	; 0x22d0 <SDInit+0x154>
    22a2:	40 e0       	ldi	r20, 0x00	; 0
    22a4:	50 e0       	ldi	r21, 0x00	; 0
    22a6:	60 e0       	ldi	r22, 0x00	; 0
    22a8:	70 e4       	ldi	r23, 0x40	; 64
    22aa:	ce 01       	movw	r24, r28
    22ac:	01 96       	adiw	r24, 0x01	; 1
    22ae:	0e 94 12 21 	call	0x4224	; 0x4224 <SDSendOpConditionArg>
    22b2:	81 11       	cpse	r24, r1
    22b4:	0c c0       	rjmp	.+24     	; 0x22ce <SDInit+0x152>
    22b6:	81 e0       	ldi	r24, 0x01	; 1
    22b8:	0b c0       	rjmp	.+22     	; 0x22d0 <SDInit+0x154>
    22ba:	80 e0       	ldi	r24, 0x00	; 0
    22bc:	09 c0       	rjmp	.+18     	; 0x22d0 <SDInit+0x154>
    22be:	80 e0       	ldi	r24, 0x00	; 0
    22c0:	07 c0       	rjmp	.+14     	; 0x22d0 <SDInit+0x154>
    22c2:	80 e0       	ldi	r24, 0x00	; 0
    22c4:	05 c0       	rjmp	.+10     	; 0x22d0 <SDInit+0x154>
    22c6:	80 e0       	ldi	r24, 0x00	; 0
    22c8:	03 c0       	rjmp	.+6      	; 0x22d0 <SDInit+0x154>
    22ca:	80 e0       	ldi	r24, 0x00	; 0
    22cc:	01 c0       	rjmp	.+2      	; 0x22d0 <SDInit+0x154>
    22ce:	80 e0       	ldi	r24, 0x00	; 0
    22d0:	0f 90       	pop	r0
    22d2:	0f 90       	pop	r0
    22d4:	0f 90       	pop	r0
    22d6:	0f 90       	pop	r0
    22d8:	0f 90       	pop	r0
    22da:	df 91       	pop	r29
    22dc:	cf 91       	pop	r28
    22de:	1f 91       	pop	r17
    22e0:	08 95       	ret

Disassembly of section .text.SDRead:

00002e48 <SDRead>:

// Read one or more sectors from SD
bool SDRead(uint32_t u32Sector,
			uint8_t *pu8Buffer,
			uint32_t u32SectorCount)
{
    2e48:	8f 92       	push	r8
    2e4a:	9f 92       	push	r9
    2e4c:	af 92       	push	r10
    2e4e:	bf 92       	push	r11
    2e50:	cf 92       	push	r12
    2e52:	df 92       	push	r13
    2e54:	ef 92       	push	r14
    2e56:	ff 92       	push	r15
    2e58:	0f 93       	push	r16
    2e5a:	1f 93       	push	r17
    2e5c:	cf 93       	push	r28
    2e5e:	df 93       	push	r29
    2e60:	4b 01       	movw	r8, r22
    2e62:	5c 01       	movw	r10, r24
    2e64:	ea 01       	movw	r28, r20
    2e66:	68 01       	movw	r12, r16
    2e68:	79 01       	movw	r14, r18
	bool bResult = false;
	
	// Pet the watchdog
	WatchdogReset();
    2e6a:	0e 94 1f 28 	call	0x503e	; 0x503e <WatchdogReset>
		
	// Assert chip select
	SDSetCS(true);
    2e6e:	81 e0       	ldi	r24, 0x01	; 1
    2e70:	0e 94 7b 27 	call	0x4ef6	; 0x4ef6 <SDSetCS>

	if (1 == u32SectorCount)
    2e74:	81 e0       	ldi	r24, 0x01	; 1
    2e76:	c8 16       	cp	r12, r24
    2e78:	d1 04       	cpc	r13, r1
    2e7a:	e1 04       	cpc	r14, r1
    2e7c:	f1 04       	cpc	r15, r1
    2e7e:	81 f4       	brne	.+32     	; 0x2ea0 <SDRead+0x58>
	{
		if (0 == SDCommand(CMD17,
    2e80:	b5 01       	movw	r22, r10
    2e82:	a4 01       	movw	r20, r8
    2e84:	81 e1       	ldi	r24, 0x11	; 17
    2e86:	0e 94 92 1a 	call	0x3524	; 0x3524 <SDCommand>
    2e8a:	81 11       	cpse	r24, r1
    2e8c:	35 c0       	rjmp	.+106    	; 0x2ef8 <SDRead+0xb0>
						   u32Sector))
		{
			bResult = SDReceiveDataBlock(pu8Buffer,
    2e8e:	60 91 68 09 	lds	r22, 0x0968	; 0x800968 <sg_u16BlockSize>
    2e92:	70 91 69 09 	lds	r23, 0x0969	; 0x800969 <sg_u16BlockSize+0x1>
    2e96:	ce 01       	movw	r24, r28
    2e98:	0e 94 65 1c 	call	0x38ca	; 0x38ca <SDReceiveDataBlock>
    2e9c:	18 2f       	mov	r17, r24
    2e9e:	2f c0       	rjmp	.+94     	; 0x2efe <SDRead+0xb6>
		}
	}
	else
	{
		// Multisector
		if (0 == SDCommand(CMD18,
    2ea0:	b5 01       	movw	r22, r10
    2ea2:	a4 01       	movw	r20, r8
    2ea4:	82 e1       	ldi	r24, 0x12	; 18
    2ea6:	0e 94 92 1a 	call	0x3524	; 0x3524 <SDCommand>
    2eaa:	88 23       	and	r24, r24
    2eac:	19 f0       	breq	.+6      	; 0x2eb4 <SDRead+0x6c>
    2eae:	26 c0       	rjmp	.+76     	; 0x2efc <SDRead+0xb4>
				WatchdogReset();
				
				pu8Buffer += sg_u16BlockSize;
			} 
			while ((bResult) &&
				   (u32SectorCount--));
    2eb0:	6c 01       	movw	r12, r24
    2eb2:	7d 01       	movw	r14, r26
		if (0 == SDCommand(CMD18,
						   u32Sector))
		{
			do 
			{
				bResult = SDReceiveDataBlock(pu8Buffer,
    2eb4:	60 91 68 09 	lds	r22, 0x0968	; 0x800968 <sg_u16BlockSize>
    2eb8:	70 91 69 09 	lds	r23, 0x0969	; 0x800969 <sg_u16BlockSize+0x1>
    2ebc:	ce 01       	movw	r24, r28
    2ebe:	0e 94 65 1c 	call	0x38ca	; 0x38ca <SDReceiveDataBlock>
    2ec2:	18 2f       	mov	r17, r24
							 				 sg_u16BlockSize);
				// Pet the watchdog
				WatchdogReset();
    2ec4:	0e 94 1f 28 	call	0x503e	; 0x503e <WatchdogReset>
				
				pu8Buffer += sg_u16BlockSize;
    2ec8:	80 91 68 09 	lds	r24, 0x0968	; 0x800968 <sg_u16BlockSize>
    2ecc:	90 91 69 09 	lds	r25, 0x0969	; 0x800969 <sg_u16BlockSize+0x1>
    2ed0:	c8 0f       	add	r28, r24
    2ed2:	d9 1f       	adc	r29, r25
			} 
			while ((bResult) &&
				   (u32SectorCount--));
    2ed4:	11 23       	and	r17, r17
    2ed6:	49 f0       	breq	.+18     	; 0x2eea <SDRead+0xa2>
    2ed8:	d7 01       	movw	r26, r14
    2eda:	c6 01       	movw	r24, r12
    2edc:	01 97       	sbiw	r24, 0x01	; 1
    2ede:	a1 09       	sbc	r26, r1
    2ee0:	b1 09       	sbc	r27, r1
				// Pet the watchdog
				WatchdogReset();
				
				pu8Buffer += sg_u16BlockSize;
			} 
			while ((bResult) &&
    2ee2:	cd 28       	or	r12, r13
    2ee4:	ce 28       	or	r12, r14
    2ee6:	cf 28       	or	r12, r15
    2ee8:	19 f7       	brne	.-58     	; 0x2eb0 <SDRead+0x68>
				   (u32SectorCount--));
				   
			// Regardless, send a stop command
			(void) SDCommand(CMD12,
    2eea:	40 e0       	ldi	r20, 0x00	; 0
    2eec:	50 e0       	ldi	r21, 0x00	; 0
    2eee:	ba 01       	movw	r22, r20
    2ef0:	8c e0       	ldi	r24, 0x0C	; 12
    2ef2:	0e 94 92 1a 	call	0x3524	; 0x3524 <SDCommand>
    2ef6:	03 c0       	rjmp	.+6      	; 0x2efe <SDRead+0xb6>
// Read one or more sectors from SD
bool SDRead(uint32_t u32Sector,
			uint8_t *pu8Buffer,
			uint32_t u32SectorCount)
{
	bool bResult = false;
    2ef8:	10 e0       	ldi	r17, 0x00	; 0
    2efa:	01 c0       	rjmp	.+2      	; 0x2efe <SDRead+0xb6>
    2efc:	10 e0       	ldi	r17, 0x00	; 0
		{
			// Failed
		}
	}
	
	SDSetCS(false);
    2efe:	80 e0       	ldi	r24, 0x00	; 0
    2f00:	0e 94 7b 27 	call	0x4ef6	; 0x4ef6 <SDSetCS>

	return(bResult);
}
    2f04:	81 2f       	mov	r24, r17
    2f06:	df 91       	pop	r29
    2f08:	cf 91       	pop	r28
    2f0a:	1f 91       	pop	r17
    2f0c:	0f 91       	pop	r16
    2f0e:	ff 90       	pop	r15
    2f10:	ef 90       	pop	r14
    2f12:	df 90       	pop	r13
    2f14:	cf 90       	pop	r12
    2f16:	bf 90       	pop	r11
    2f18:	af 90       	pop	r10
    2f1a:	9f 90       	pop	r9
    2f1c:	8f 90       	pop	r8
    2f1e:	08 95       	ret

Disassembly of section .text.SDWrite:

00002c90 <SDWrite>:

bool SDGetBlockSize(uint32_t *pu32BlockSize)
{
	*pu32BlockSize = sg_u16BlockSize;
	return(true);
}
    2c90:	8f 92       	push	r8
    2c92:	9f 92       	push	r9
    2c94:	af 92       	push	r10
    2c96:	bf 92       	push	r11
    2c98:	cf 92       	push	r12
    2c9a:	df 92       	push	r13
    2c9c:	ef 92       	push	r14
    2c9e:	ff 92       	push	r15
    2ca0:	0f 93       	push	r16
    2ca2:	1f 93       	push	r17
    2ca4:	cf 93       	push	r28
    2ca6:	df 93       	push	r29
    2ca8:	4b 01       	movw	r8, r22
    2caa:	5c 01       	movw	r10, r24
    2cac:	ea 01       	movw	r28, r20
    2cae:	68 01       	movw	r12, r16
    2cb0:	79 01       	movw	r14, r18
    2cb2:	0e 94 1f 28 	call	0x503e	; 0x503e <WatchdogReset>
    2cb6:	81 e0       	ldi	r24, 0x01	; 1
    2cb8:	0e 94 7b 27 	call	0x4ef6	; 0x4ef6 <SDSetCS>
    2cbc:	81 e0       	ldi	r24, 0x01	; 1
    2cbe:	c8 16       	cp	r12, r24
    2cc0:	d1 04       	cpc	r13, r1
    2cc2:	e1 04       	cpc	r14, r1
    2cc4:	f1 04       	cpc	r15, r1
    2cc6:	89 f4       	brne	.+34     	; 0x2cea <SDWrite+0x5a>
    2cc8:	b5 01       	movw	r22, r10
    2cca:	a4 01       	movw	r20, r8
    2ccc:	88 e1       	ldi	r24, 0x18	; 24
    2cce:	0e 94 92 1a 	call	0x3524	; 0x3524 <SDCommand>
    2cd2:	81 11       	cpse	r24, r1
    2cd4:	37 c0       	rjmp	.+110    	; 0x2d44 <SDWrite+0xb4>
    2cd6:	60 91 68 09 	lds	r22, 0x0968	; 0x800968 <sg_u16BlockSize>
    2cda:	70 91 69 09 	lds	r23, 0x0969	; 0x800969 <sg_u16BlockSize+0x1>
    2cde:	4e ef       	ldi	r20, 0xFE	; 254
    2ce0:	ce 01       	movw	r24, r28
    2ce2:	0e 94 20 19 	call	0x3240	; 0x3240 <SDTransmitDataBlock>
    2ce6:	18 2f       	mov	r17, r24
    2ce8:	30 c0       	rjmp	.+96     	; 0x2d4a <SDWrite+0xba>
    2cea:	b5 01       	movw	r22, r10
    2cec:	a4 01       	movw	r20, r8
    2cee:	89 e1       	ldi	r24, 0x19	; 25
    2cf0:	0e 94 92 1a 	call	0x3524	; 0x3524 <SDCommand>
    2cf4:	88 23       	and	r24, r24
    2cf6:	19 f0       	breq	.+6      	; 0x2cfe <SDWrite+0x6e>
    2cf8:	27 c0       	rjmp	.+78     	; 0x2d48 <SDWrite+0xb8>
    2cfa:	6c 01       	movw	r12, r24
    2cfc:	7d 01       	movw	r14, r26
    2cfe:	60 91 68 09 	lds	r22, 0x0968	; 0x800968 <sg_u16BlockSize>
    2d02:	70 91 69 09 	lds	r23, 0x0969	; 0x800969 <sg_u16BlockSize+0x1>
    2d06:	4c ef       	ldi	r20, 0xFC	; 252
    2d08:	ce 01       	movw	r24, r28
    2d0a:	0e 94 20 19 	call	0x3240	; 0x3240 <SDTransmitDataBlock>
    2d0e:	18 2f       	mov	r17, r24
    2d10:	0e 94 1f 28 	call	0x503e	; 0x503e <WatchdogReset>
    2d14:	80 91 68 09 	lds	r24, 0x0968	; 0x800968 <sg_u16BlockSize>
    2d18:	90 91 69 09 	lds	r25, 0x0969	; 0x800969 <sg_u16BlockSize+0x1>
    2d1c:	c8 0f       	add	r28, r24
    2d1e:	d9 1f       	adc	r29, r25
    2d20:	11 23       	and	r17, r17
    2d22:	49 f0       	breq	.+18     	; 0x2d36 <SDWrite+0xa6>
    2d24:	d7 01       	movw	r26, r14
    2d26:	c6 01       	movw	r24, r12
    2d28:	01 97       	sbiw	r24, 0x01	; 1
    2d2a:	a1 09       	sbc	r26, r1
    2d2c:	b1 09       	sbc	r27, r1
    2d2e:	cd 28       	or	r12, r13
    2d30:	ce 28       	or	r12, r14
    2d32:	cf 28       	or	r12, r15
    2d34:	11 f7       	brne	.-60     	; 0x2cfa <SDWrite+0x6a>
    2d36:	40 e0       	ldi	r20, 0x00	; 0
    2d38:	50 e0       	ldi	r21, 0x00	; 0
    2d3a:	ba 01       	movw	r22, r20
    2d3c:	8c e0       	ldi	r24, 0x0C	; 12
    2d3e:	0e 94 92 1a 	call	0x3524	; 0x3524 <SDCommand>
    2d42:	03 c0       	rjmp	.+6      	; 0x2d4a <SDWrite+0xba>
    2d44:	10 e0       	ldi	r17, 0x00	; 0
    2d46:	01 c0       	rjmp	.+2      	; 0x2d4a <SDWrite+0xba>
    2d48:	10 e0       	ldi	r17, 0x00	; 0
    2d4a:	80 e0       	ldi	r24, 0x00	; 0
    2d4c:	0e 94 7b 27 	call	0x4ef6	; 0x4ef6 <SDSetCS>
    2d50:	81 2f       	mov	r24, r17
    2d52:	df 91       	pop	r29
    2d54:	cf 91       	pop	r28
    2d56:	1f 91       	pop	r17
    2d58:	0f 91       	pop	r16
    2d5a:	ff 90       	pop	r15
    2d5c:	ef 90       	pop	r14
    2d5e:	df 90       	pop	r13
    2d60:	cf 90       	pop	r12
    2d62:	bf 90       	pop	r11
    2d64:	af 90       	pop	r10
    2d66:	9f 90       	pop	r9
    2d68:	8f 90       	pop	r8
    2d6a:	08 95       	ret

Disassembly of section .text.SPITransaction:

00004174 <SPITransaction>:

// Do a SPI transaction - read or write (or write pattern)
void SPITransaction(ESPIBusState eSPIBusState,
					uint8_t *pu8Buffer,
					uint16_t u16ByteCount)
{
    4174:	fb 01       	movw	r30, r22
	// If we're transmitting, start the transaction
	if (ESTATE_RX_DATA == eSPIBusState)
    4176:	83 30       	cpi	r24, 0x03	; 3
    4178:	71 f4       	brne	.+28     	; 0x4196 <SPITransaction+0x22>
    417a:	08 c0       	rjmp	.+16     	; 0x418c <SPITransaction+0x18>
	{
		while (u16ByteCount--)
		{
			// Clock out 0xff so we can receive the data
			SPDR = 0xff;
    417c:	2f ef       	ldi	r18, 0xFF	; 255
    417e:	2e bd       	out	0x2e, r18	; 46

			// Wait for data to be available
			while (0 == (SPSR & (1 << SPIF)));
    4180:	0d b4       	in	r0, 0x2d	; 45
    4182:	07 fe       	sbrs	r0, 7
    4184:	fd cf       	rjmp	.-6      	; 0x4180 <SPITransaction+0xc>
			
			// Read the byte
			*pu8Buffer = SPDR;
    4186:	2e b5       	in	r18, 0x2e	; 46
    4188:	21 93       	st	Z+, r18
					uint16_t u16ByteCount)
{
	// If we're transmitting, start the transaction
	if (ESTATE_RX_DATA == eSPIBusState)
	{
		while (u16ByteCount--)
    418a:	ac 01       	movw	r20, r24
    418c:	ca 01       	movw	r24, r20
    418e:	01 97       	sbiw	r24, 0x01	; 1
    4190:	45 2b       	or	r20, r21
    4192:	a1 f7       	brne	.-24     	; 0x417c <SPITransaction+0x8>
    4194:	08 95       	ret
			*pu8Buffer = SPDR;
			++pu8Buffer;
		}
	}
	else
	if (ESTATE_TX_DATA == eSPIBusState)
    4196:	81 30       	cpi	r24, 0x01	; 1
    4198:	61 f4       	brne	.+24     	; 0x41b2 <SPITransaction+0x3e>
    419a:	06 c0       	rjmp	.+12     	; 0x41a8 <SPITransaction+0x34>
	{
		// Clock out whatever our data is in our queue
		while (u16ByteCount--)
		{
			SPDR = *pu8Buffer;
    419c:	21 91       	ld	r18, Z+
    419e:	2e bd       	out	0x2e, r18	; 46
			++pu8Buffer;
			
			// Wait for the transmit to complete
			while (0 == (SPSR & (1 << SPIF)));
    41a0:	0d b4       	in	r0, 0x2d	; 45
    41a2:	07 fe       	sbrs	r0, 7
    41a4:	fd cf       	rjmp	.-6      	; 0x41a0 <SPITransaction+0x2c>
	}
	else
	if (ESTATE_TX_DATA == eSPIBusState)
	{
		// Clock out whatever our data is in our queue
		while (u16ByteCount--)
    41a6:	ac 01       	movw	r20, r24
    41a8:	ca 01       	movw	r24, r20
    41aa:	01 97       	sbiw	r24, 0x01	; 1
    41ac:	45 2b       	or	r20, r21
    41ae:	b1 f7       	brne	.-20     	; 0x419c <SPITransaction+0x28>
    41b0:	08 95       	ret
			// Wait for the transmit to complete
			while (0 == (SPSR & (1 << SPIF)));
		}
	}
	else
	if (ESTATE_TX_PATTERN == eSPIBusState)
    41b2:	82 30       	cpi	r24, 0x02	; 2
    41b4:	51 f4       	brne	.+20     	; 0x41ca <SPITransaction+0x56>
    41b6:	05 c0       	rjmp	.+10     	; 0x41c2 <SPITransaction+0x4e>
		// Clock out whatever our data is in our queue
		while (u16ByteCount--)
		{
			// This is OK - as the position where the pointer would normally
			// be is just the pattern (single byte)
			SPDR = (uint8_t) (pu8Buffer);
    41b8:	ee bd       	out	0x2e, r30	; 46
		
			// Wait for the transmit to complete
			while (0 == (SPSR & (1 << SPIF)));
    41ba:	0d b4       	in	r0, 0x2d	; 45
    41bc:	07 fe       	sbrs	r0, 7
    41be:	fd cf       	rjmp	.-6      	; 0x41ba <SPITransaction+0x46>
	}
	else
	if (ESTATE_TX_PATTERN == eSPIBusState)
	{
		// Clock out whatever our data is in our queue
		while (u16ByteCount--)
    41c0:	ac 01       	movw	r20, r24
    41c2:	ca 01       	movw	r24, r20
    41c4:	01 97       	sbiw	r24, 0x01	; 1
    41c6:	45 2b       	or	r20, r21
    41c8:	b9 f7       	brne	.-18     	; 0x41b8 <SPITransaction+0x44>
    41ca:	08 95       	ret

Disassembly of section .text.SPISetBaudRate:

00002fec <SPISetBaudRate>:
	{FCLKIO >> 7,	(1 << SPR1) | (0 << SPR0),	0},					// /128
};

// Sets the SPI baud rate and returns the actual baud rate selected
uint32_t SPISetBaudRate(uint32_t u32BaudRate)
{
    2fec:	cf 92       	push	r12
    2fee:	df 92       	push	r13
    2ff0:	ef 92       	push	r14
    2ff2:	ff 92       	push	r15
    2ff4:	6b 01       	movw	r12, r22
    2ff6:	7c 01       	movw	r14, r24
	uint8_t u8Loop;
	
	// Find the baud rate that's the closest
	for (u8Loop = 0; u8Loop < (sizeof(sg_sSPIBaudRates) / sizeof(sg_sSPIBaudRates[0])); u8Loop++)
    2ff8:	20 e0       	ldi	r18, 0x00	; 0
    2ffa:	19 c0       	rjmp	.+50     	; 0x302e <SPISetBaudRate+0x42>
	{
		if (u32BaudRate >= sg_sSPIBaudRates[u8Loop].u32BaudRate)
    2ffc:	82 2f       	mov	r24, r18
    2ffe:	90 e0       	ldi	r25, 0x00	; 0
    3000:	ac 01       	movw	r20, r24
    3002:	44 0f       	add	r20, r20
    3004:	55 1f       	adc	r21, r21
    3006:	84 0f       	add	r24, r20
    3008:	95 1f       	adc	r25, r21
    300a:	88 0f       	add	r24, r24
    300c:	99 1f       	adc	r25, r25
    300e:	09 2e       	mov	r0, r25
    3010:	00 0c       	add	r0, r0
    3012:	aa 0b       	sbc	r26, r26
    3014:	85 55       	subi	r24, 0x55	; 85
    3016:	9d 4f       	sbci	r25, 0xFD	; 253
    3018:	af 4f       	sbci	r26, 0xFF	; 255
    301a:	fc 01       	movw	r30, r24
    301c:	5a 2f       	mov	r21, r26
    301e:	0e 94 37 27 	call	0x4e6e	; 0x4e6e <__xload_4>
    3022:	c6 16       	cp	r12, r22
    3024:	d7 06       	cpc	r13, r23
    3026:	e8 06       	cpc	r14, r24
    3028:	f9 06       	cpc	r15, r25
    302a:	18 f4       	brcc	.+6      	; 0x3032 <SPISetBaudRate+0x46>
uint32_t SPISetBaudRate(uint32_t u32BaudRate)
{
	uint8_t u8Loop;
	
	// Find the baud rate that's the closest
	for (u8Loop = 0; u8Loop < (sizeof(sg_sSPIBaudRates) / sizeof(sg_sSPIBaudRates[0])); u8Loop++)
    302c:	2f 5f       	subi	r18, 0xFF	; 255
    302e:	27 30       	cpi	r18, 0x07	; 7
    3030:	28 f3       	brcs	.-54     	; 0x2ffc <SPISetBaudRate+0x10>
			break;
		}
	}

	// If we've hit the end, use the slowest speed
	if ((sizeof(sg_sSPIBaudRates) / sizeof(sg_sSPIBaudRates[0])) == u8Loop)
    3032:	27 30       	cpi	r18, 0x07	; 7
    3034:	09 f4       	brne	.+2      	; 0x3038 <SPISetBaudRate+0x4c>
	{
		u8Loop--;
    3036:	21 50       	subi	r18, 0x01	; 1
	}

	// Found one!
	SPCR = (SPCR & (uint8_t) ~((1 << SPR1) | (1 << SPR0))) | sg_sSPIBaudRates[u8Loop].u8SPCR;
    3038:	6c b5       	in	r22, 0x2c	; 44
    303a:	30 e0       	ldi	r19, 0x00	; 0
    303c:	a9 01       	movw	r20, r18
    303e:	44 0f       	add	r20, r20
    3040:	55 1f       	adc	r21, r21
    3042:	ca 01       	movw	r24, r20
    3044:	82 0f       	add	r24, r18
    3046:	93 1f       	adc	r25, r19
    3048:	88 0f       	add	r24, r24
    304a:	99 1f       	adc	r25, r25
    304c:	04 96       	adiw	r24, 0x04	; 4
    304e:	09 2e       	mov	r0, r25
    3050:	00 0c       	add	r0, r0
    3052:	aa 0b       	sbc	r26, r26
    3054:	85 55       	subi	r24, 0x55	; 85
    3056:	9d 4f       	sbci	r25, 0xFD	; 253
    3058:	af 4f       	sbci	r26, 0xFF	; 255
    305a:	fc 01       	movw	r30, r24
    305c:	84 91       	lpm	r24, Z
    305e:	a7 fd       	sbrc	r26, 7
    3060:	80 81       	ld	r24, Z
    3062:	6c 7f       	andi	r22, 0xFC	; 252
    3064:	86 2b       	or	r24, r22
    3066:	8c bd       	out	0x2c, r24	; 44
	SPSR = (SPSR & (uint8_t) ~(1 << SPI2X)) | sg_sSPIBaudRates[u8Loop].u8SPSR;
    3068:	6d b5       	in	r22, 0x2d	; 45
    306a:	ca 01       	movw	r24, r20
    306c:	82 0f       	add	r24, r18
    306e:	93 1f       	adc	r25, r19
    3070:	88 0f       	add	r24, r24
    3072:	99 1f       	adc	r25, r25
    3074:	05 96       	adiw	r24, 0x05	; 5
    3076:	09 2e       	mov	r0, r25
    3078:	00 0c       	add	r0, r0
    307a:	aa 0b       	sbc	r26, r26
    307c:	85 55       	subi	r24, 0x55	; 85
    307e:	9d 4f       	sbci	r25, 0xFD	; 253
    3080:	af 4f       	sbci	r26, 0xFF	; 255
    3082:	fc 01       	movw	r30, r24
    3084:	84 91       	lpm	r24, Z
    3086:	a7 fd       	sbrc	r26, 7
    3088:	80 81       	ld	r24, Z
    308a:	6e 7f       	andi	r22, 0xFE	; 254
    308c:	86 2b       	or	r24, r22
    308e:	8d bd       	out	0x2d, r24	; 45
	return(sg_sSPIBaudRates[u8Loop].u32BaudRate);
    3090:	24 0f       	add	r18, r20
    3092:	35 1f       	adc	r19, r21
    3094:	22 0f       	add	r18, r18
    3096:	33 1f       	adc	r19, r19
    3098:	03 2e       	mov	r0, r19
    309a:	00 0c       	add	r0, r0
    309c:	44 0b       	sbc	r20, r20
    309e:	25 55       	subi	r18, 0x55	; 85
    30a0:	3d 4f       	sbci	r19, 0xFD	; 253
    30a2:	4f 4f       	sbci	r20, 0xFF	; 255
    30a4:	f9 01       	movw	r30, r18
    30a6:	54 2f       	mov	r21, r20
    30a8:	0e 94 37 27 	call	0x4e6e	; 0x4e6e <__xload_4>
}
    30ac:	ff 90       	pop	r15
    30ae:	ef 90       	pop	r14
    30b0:	df 90       	pop	r13
    30b2:	cf 90       	pop	r12
    30b4:	08 95       	ret

Disassembly of section .text.SPIInit:

000049b6 <SPIInit>:

void SPIInit(void)
{
	// Set MOSI and SCK to output
	DDR_SPI |= (1 << MOSI) | (1 << SCK);
    49b6:	84 b1       	in	r24, 0x04	; 4
    49b8:	82 68       	ori	r24, 0x82	; 130
    49ba:	84 b9       	out	0x04, r24	; 4
	DDR_SPI &= (uint8_t) ~(1 << MISO);
    49bc:	84 b1       	in	r24, 0x04	; 4
    49be:	8e 7f       	andi	r24, 0xFE	; 254
    49c0:	84 b9       	out	0x04, r24	; 4
	
	// MISO As input (need our pullup)
	PORT_SPI |= (1 << MISO);
    49c2:	85 b1       	in	r24, 0x05	; 5
    49c4:	81 60       	ori	r24, 0x01	; 1
    49c6:	85 b9       	out	0x05, r24	; 5
	
	// Enable SPI engine, master only, and clock to fosc/128 and SPI mode 0 (which is what SD wants)
	SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR1) | (1 << SPR0);
    49c8:	83 e5       	ldi	r24, 0x53	; 83
    49ca:	8c bd       	out	0x2c, r24	; 44
	
	// Zero out SPSR (all zeroes)
	SPSR = 0;
    49cc:	1d bc       	out	0x2d, r1	; 45
	
	// Zero out SPIPS so the SPI IP is connected to MISO, MOSI, SCK, and SS
	MCUCR &= (uint8_t) ~(1 << SPIPS);
    49ce:	85 b7       	in	r24, 0x35	; 53
    49d0:	8f 77       	andi	r24, 0x7F	; 127
    49d2:	85 bf       	out	0x35, r24	; 53

	// Set to something slow/compatible
	(void) SPISetBaudRate(400000);
    49d4:	60 e8       	ldi	r22, 0x80	; 128
    49d6:	7a e1       	ldi	r23, 0x1A	; 26
    49d8:	86 e0       	ldi	r24, 0x06	; 6
    49da:	90 e0       	ldi	r25, 0x00	; 0
    49dc:	0e 94 f6 17 	call	0x2fec	; 0x2fec <SPISetBaudRate>
    49e0:	08 95       	ret

Disassembly of section .text.readGlobalState:

000045e4 <readGlobalState>:

static GlobalState gState;
static uint32_t currentSector;
static uint8_t __attribute__((aligned(4))) frameBuffer[FRAME_BUFFER_SIZE];  // Enlarged to handle full frame

static bool readGlobalState(void) {
    45e4:	0f 93       	push	r16
    45e6:	1f 93       	push	r17
    45e8:	cf 93       	push	r28
	if (!SDRead(0, frameBuffer, 1)) {
    45ea:	01 e0       	ldi	r16, 0x01	; 1
    45ec:	10 e0       	ldi	r17, 0x00	; 0
    45ee:	20 e0       	ldi	r18, 0x00	; 0
    45f0:	30 e0       	ldi	r19, 0x00	; 0
    45f2:	4c e2       	ldi	r20, 0x2C	; 44
    45f4:	53 e0       	ldi	r21, 0x03	; 3
    45f6:	60 e0       	ldi	r22, 0x00	; 0
    45f8:	70 e0       	ldi	r23, 0x00	; 0
    45fa:	cb 01       	movw	r24, r22
    45fc:	0e 94 24 17 	call	0x2e48	; 0x2e48 <SDRead>
    4600:	c8 2f       	mov	r28, r24
    4602:	88 23       	and	r24, r24
    4604:	49 f0       	breq	.+18     	; 0x4618 <readGlobalState+0x34>
		return false;
	}
	memcpy(&gState, frameBuffer, sizeof(GlobalState));
    4606:	4c e2       	ldi	r20, 0x2C	; 44
    4608:	53 e0       	ldi	r21, 0x03	; 3
    460a:	60 e8       	ldi	r22, 0x80	; 128
    460c:	28 ed       	ldi	r18, 0xD8	; 216
    460e:	31 e0       	ldi	r19, 0x01	; 1
    4610:	8c e2       	ldi	r24, 0x2C	; 44
    4612:	97 e0       	ldi	r25, 0x07	; 7
    4614:	0e 94 3c 24 	call	0x4878	; 0x4878 <memcpy>
	// TODO: Implement checksum verification
	return true;
}
    4618:	8c 2f       	mov	r24, r28
    461a:	cf 91       	pop	r28
    461c:	1f 91       	pop	r17
    461e:	0f 91       	pop	r16
    4620:	08 95       	ret

Disassembly of section .text.writeGlobalState:

00004846 <writeGlobalState>:

static bool writeGlobalState(void) {
    4846:	0f 93       	push	r16
    4848:	1f 93       	push	r17
	memcpy(frameBuffer, &gState, sizeof(GlobalState));
    484a:	4c e2       	ldi	r20, 0x2C	; 44
    484c:	57 e0       	ldi	r21, 0x07	; 7
    484e:	60 e8       	ldi	r22, 0x80	; 128
    4850:	28 ed       	ldi	r18, 0xD8	; 216
    4852:	31 e0       	ldi	r19, 0x01	; 1
    4854:	8c e2       	ldi	r24, 0x2C	; 44
    4856:	93 e0       	ldi	r25, 0x03	; 3
    4858:	0e 94 3c 24 	call	0x4878	; 0x4878 <memcpy>
	// TODO: Calculate and update checksum
	return SDWrite(0, frameBuffer, 1);
    485c:	01 e0       	ldi	r16, 0x01	; 1
    485e:	10 e0       	ldi	r17, 0x00	; 0
    4860:	20 e0       	ldi	r18, 0x00	; 0
    4862:	30 e0       	ldi	r19, 0x00	; 0
    4864:	4c e2       	ldi	r20, 0x2C	; 44
    4866:	53 e0       	ldi	r21, 0x03	; 3
    4868:	60 e0       	ldi	r22, 0x00	; 0
    486a:	70 e0       	ldi	r23, 0x00	; 0
    486c:	cb 01       	movw	r24, r22
    486e:	0e 94 48 16 	call	0x2c90	; 0x2c90 <SDWrite>
}
    4872:	1f 91       	pop	r17
    4874:	0f 91       	pop	r16
    4876:	08 95       	ret

Disassembly of section .text.updateSessionMap:

00002d6c <updateSessionMap>:

static bool updateSessionMap(void) {
    2d6c:	8f 92       	push	r8
    2d6e:	9f 92       	push	r9
    2d70:	af 92       	push	r10
    2d72:	bf 92       	push	r11
    2d74:	cf 92       	push	r12
    2d76:	df 92       	push	r13
    2d78:	ef 92       	push	r14
    2d7a:	ff 92       	push	r15
    2d7c:	0f 93       	push	r16
    2d7e:	1f 93       	push	r17
	uint32_t mapSector = gState.activeSessionMapSector;
    2d80:	ec e2       	ldi	r30, 0x2C	; 44
    2d82:	f7 e0       	ldi	r31, 0x07	; 7
    2d84:	c4 8c       	ldd	r12, Z+28	; 0x1c
    2d86:	d5 8c       	ldd	r13, Z+29	; 0x1d
    2d88:	e6 8c       	ldd	r14, Z+30	; 0x1e
    2d8a:	f7 8c       	ldd	r15, Z+31	; 0x1f
	uint32_t mapOffset = gState.activeSessionMapOffset;
    2d8c:	80 a0       	ldd	r8, Z+32	; 0x20
    2d8e:	91 a0       	ldd	r9, Z+33	; 0x21
    2d90:	a2 a0       	ldd	r10, Z+34	; 0x22
    2d92:	b3 a0       	ldd	r11, Z+35	; 0x23

	if (!SDRead(mapSector, frameBuffer, 1)) {
    2d94:	01 e0       	ldi	r16, 0x01	; 1
    2d96:	10 e0       	ldi	r17, 0x00	; 0
    2d98:	20 e0       	ldi	r18, 0x00	; 0
    2d9a:	30 e0       	ldi	r19, 0x00	; 0
    2d9c:	4c e2       	ldi	r20, 0x2C	; 44
    2d9e:	53 e0       	ldi	r21, 0x03	; 3
    2da0:	c7 01       	movw	r24, r14
    2da2:	b6 01       	movw	r22, r12
    2da4:	0e 94 24 17 	call	0x2e48	; 0x2e48 <SDRead>
    2da8:	88 23       	and	r24, r24
    2daa:	09 f4       	brne	.+2      	; 0x2dae <updateSessionMap+0x42>
    2dac:	42 c0       	rjmp	.+132    	; 0x2e32 <updateSessionMap+0xc6>
		return false;
	}

	// Update session map
	*(uint64_t*)(frameBuffer + mapOffset) = gState.newSessionSector;
    2dae:	f4 01       	movw	r30, r8
    2db0:	e4 5d       	subi	r30, 0xD4	; 212
    2db2:	fc 4f       	sbci	r31, 0xFC	; 252
    2db4:	00 91 44 07 	lds	r16, 0x0744	; 0x800744 <gState+0x18>
    2db8:	10 91 45 07 	lds	r17, 0x0745	; 0x800745 <gState+0x19>
    2dbc:	20 91 46 07 	lds	r18, 0x0746	; 0x800746 <gState+0x1a>
    2dc0:	30 91 47 07 	lds	r19, 0x0747	; 0x800747 <gState+0x1b>
    2dc4:	00 83       	st	Z, r16
    2dc6:	11 83       	std	Z+1, r17	; 0x01
    2dc8:	22 83       	std	Z+2, r18	; 0x02
    2dca:	33 83       	std	Z+3, r19	; 0x03
    2dcc:	14 82       	std	Z+4, r1	; 0x04
    2dce:	15 82       	std	Z+5, r1	; 0x05
    2dd0:	16 82       	std	Z+6, r1	; 0x06
    2dd2:	17 82       	std	Z+7, r1	; 0x07

	if (!SDWrite(mapSector, frameBuffer, 1)) {
    2dd4:	01 e0       	ldi	r16, 0x01	; 1
    2dd6:	10 e0       	ldi	r17, 0x00	; 0
    2dd8:	20 e0       	ldi	r18, 0x00	; 0
    2dda:	30 e0       	ldi	r19, 0x00	; 0
    2ddc:	4c e2       	ldi	r20, 0x2C	; 44
    2dde:	53 e0       	ldi	r21, 0x03	; 3
    2de0:	c7 01       	movw	r24, r14
    2de2:	b6 01       	movw	r22, r12
    2de4:	0e 94 48 16 	call	0x2c90	; 0x2c90 <SDWrite>
    2de8:	88 23       	and	r24, r24
    2dea:	19 f1       	breq	.+70     	; 0x2e32 <updateSessionMap+0xc6>
		return false;
	}

	// Update map pointers
	gState.activeSessionMapOffset += sizeof(uint64_t);
    2dec:	ec e2       	ldi	r30, 0x2C	; 44
    2dee:	f7 e0       	ldi	r31, 0x07	; 7
    2df0:	80 a1       	ldd	r24, Z+32	; 0x20
    2df2:	91 a1       	ldd	r25, Z+33	; 0x21
    2df4:	a2 a1       	ldd	r26, Z+34	; 0x22
    2df6:	b3 a1       	ldd	r27, Z+35	; 0x23
    2df8:	08 96       	adiw	r24, 0x08	; 8
    2dfa:	a1 1d       	adc	r26, r1
    2dfc:	b1 1d       	adc	r27, r1
    2dfe:	80 a3       	std	Z+32, r24	; 0x20
    2e00:	91 a3       	std	Z+33, r25	; 0x21
    2e02:	a2 a3       	std	Z+34, r26	; 0x22
    2e04:	b3 a3       	std	Z+35, r27	; 0x23
	if (gState.activeSessionMapOffset >= SECTOR_SIZE) {
    2e06:	81 15       	cp	r24, r1
    2e08:	92 40       	sbci	r25, 0x02	; 2
    2e0a:	a1 05       	cpc	r26, r1
    2e0c:	b1 05       	cpc	r27, r1
    2e0e:	78 f0       	brcs	.+30     	; 0x2e2e <updateSessionMap+0xc2>
		gState.activeSessionMapSector++;
    2e10:	84 8d       	ldd	r24, Z+28	; 0x1c
    2e12:	95 8d       	ldd	r25, Z+29	; 0x1d
    2e14:	a6 8d       	ldd	r26, Z+30	; 0x1e
    2e16:	b7 8d       	ldd	r27, Z+31	; 0x1f
    2e18:	01 96       	adiw	r24, 0x01	; 1
    2e1a:	a1 1d       	adc	r26, r1
    2e1c:	b1 1d       	adc	r27, r1
    2e1e:	84 8f       	std	Z+28, r24	; 0x1c
    2e20:	95 8f       	std	Z+29, r25	; 0x1d
    2e22:	a6 8f       	std	Z+30, r26	; 0x1e
    2e24:	b7 8f       	std	Z+31, r27	; 0x1f
		gState.activeSessionMapOffset = 0;
    2e26:	10 a2       	std	Z+32, r1	; 0x20
    2e28:	11 a2       	std	Z+33, r1	; 0x21
    2e2a:	12 a2       	std	Z+34, r1	; 0x22
    2e2c:	13 a2       	std	Z+35, r1	; 0x23
	}

	return writeGlobalState();
    2e2e:	0e 94 23 24 	call	0x4846	; 0x4846 <writeGlobalState>
}
    2e32:	1f 91       	pop	r17
    2e34:	0f 91       	pop	r16
    2e36:	ff 90       	pop	r15
    2e38:	ef 90       	pop	r14
    2e3a:	df 90       	pop	r13
    2e3c:	cf 90       	pop	r12
    2e3e:	bf 90       	pop	r11
    2e40:	af 90       	pop	r10
    2e42:	9f 90       	pop	r9
    2e44:	8f 90       	pop	r8
    2e46:	08 95       	ret

Disassembly of section .text.STORE_Init:

00003ae8 <STORE_Init>:

bool STORE_Init(void) {
    3ae8:	cf 93       	push	r28
	if (!SDInit()) {
    3aea:	0e 94 be 10 	call	0x217c	; 0x217c <SDInit>
    3aee:	c8 2f       	mov	r28, r24
    3af0:	88 23       	and	r24, r24
    3af2:	c1 f1       	breq	.+112    	; 0x3b64 <STORE_Init+0x7c>
		return false;
	}

	if (!readGlobalState()) {
    3af4:	0e 94 f2 22 	call	0x45e4	; 0x45e4 <readGlobalState>
    3af8:	81 11       	cpse	r24, r1
    3afa:	22 c0       	rjmp	.+68     	; 0x3b40 <STORE_Init+0x58>
		// Initialize global state if it doesn't exist
		memset(&gState, 0, sizeof(GlobalState));
    3afc:	ec e2       	ldi	r30, 0x2C	; 44
    3afe:	f7 e0       	ldi	r31, 0x07	; 7
    3b00:	88 ed       	ldi	r24, 0xD8	; 216
    3b02:	91 e0       	ldi	r25, 0x01	; 1
    3b04:	df 01       	movw	r26, r30
    3b06:	9c 01       	movw	r18, r24
    3b08:	1d 92       	st	X+, r1
    3b0a:	21 50       	subi	r18, 0x01	; 1
    3b0c:	30 40       	sbci	r19, 0x00	; 0
    3b0e:	e1 f7       	brne	.-8      	; 0x3b08 <STORE_Init+0x20>
		gState.firstSessionSector = 1;
    3b10:	81 e0       	ldi	r24, 0x01	; 1
    3b12:	90 e0       	ldi	r25, 0x00	; 0
    3b14:	a0 e0       	ldi	r26, 0x00	; 0
    3b16:	b0 e0       	ldi	r27, 0x00	; 0
    3b18:	84 87       	std	Z+12, r24	; 0x0c
    3b1a:	95 87       	std	Z+13, r25	; 0x0d
    3b1c:	a6 87       	std	Z+14, r26	; 0x0e
    3b1e:	b7 87       	std	Z+15, r27	; 0x0f
		gState.newSessionSector = 1;
    3b20:	80 8f       	std	Z+24, r24	; 0x18
    3b22:	91 8f       	std	Z+25, r25	; 0x19
    3b24:	a2 8f       	std	Z+26, r26	; 0x1a
    3b26:	b3 8f       	std	Z+27, r27	; 0x1b
		gState.activeSessionMapSector = 4;
    3b28:	84 e0       	ldi	r24, 0x04	; 4
    3b2a:	90 e0       	ldi	r25, 0x00	; 0
    3b2c:	a0 e0       	ldi	r26, 0x00	; 0
    3b2e:	b0 e0       	ldi	r27, 0x00	; 0
    3b30:	84 8f       	std	Z+28, r24	; 0x1c
    3b32:	95 8f       	std	Z+29, r25	; 0x1d
    3b34:	a6 8f       	std	Z+30, r26	; 0x1e
    3b36:	b7 8f       	std	Z+31, r27	; 0x1f
		gState.activeSessionMapOffset = 0;
		// TODO: Initialize other fields as needed
		if (!writeGlobalState()) {
    3b38:	0e 94 23 24 	call	0x4846	; 0x4846 <writeGlobalState>
    3b3c:	88 23       	and	r24, r24
    3b3e:	89 f0       	breq	.+34     	; 0x3b62 <STORE_Init+0x7a>
			return false;
		}
	}

	currentSector = gState.newSessionSector;
    3b40:	80 91 44 07 	lds	r24, 0x0744	; 0x800744 <gState+0x18>
    3b44:	90 91 45 07 	lds	r25, 0x0745	; 0x800745 <gState+0x19>
    3b48:	a0 91 46 07 	lds	r26, 0x0746	; 0x800746 <gState+0x1a>
    3b4c:	b0 91 47 07 	lds	r27, 0x0747	; 0x800747 <gState+0x1b>
    3b50:	80 93 58 09 	sts	0x0958, r24	; 0x800958 <currentSector>
    3b54:	90 93 59 09 	sts	0x0959, r25	; 0x800959 <currentSector+0x1>
    3b58:	a0 93 5a 09 	sts	0x095A, r26	; 0x80095a <currentSector+0x2>
    3b5c:	b0 93 5b 09 	sts	0x095B, r27	; 0x80095b <currentSector+0x3>
	return true;
    3b60:	01 c0       	rjmp	.+2      	; 0x3b64 <STORE_Init+0x7c>
		gState.newSessionSector = 1;
		gState.activeSessionMapSector = 4;
		gState.activeSessionMapOffset = 0;
		// TODO: Initialize other fields as needed
		if (!writeGlobalState()) {
			return false;
    3b62:	c8 2f       	mov	r28, r24
		}
	}

	currentSector = gState.newSessionSector;
	return true;
}
    3b64:	8c 2f       	mov	r24, r28
    3b66:	cf 91       	pop	r28
    3b68:	08 95       	ret

Disassembly of section .text.STORE_WriteFrame:

000029c2 <STORE_WriteFrame>:

bool STORE_WriteFrame(volatile FrameData* frame) {
    29c2:	8f 92       	push	r8
    29c4:	9f 92       	push	r9
    29c6:	af 92       	push	r10
    29c8:	bf 92       	push	r11
    29ca:	cf 92       	push	r12
    29cc:	df 92       	push	r13
    29ce:	ef 92       	push	r14
    29d0:	ff 92       	push	r15
    29d2:	0f 93       	push	r16
    29d4:	1f 93       	push	r17
    29d6:	cf 93       	push	r28
    29d8:	df 93       	push	r29
	uint32_t bytesWritten = 0;
	uint32_t currentOffset = 0;
	uint32_t sectorsToWrite;
	
	// Verify frame size
	if(frame->frameBytes > FRAME_BUFFER_SIZE) {
    29da:	fc 01       	movw	r30, r24
    29dc:	24 81       	ldd	r18, Z+4	; 0x04
    29de:	35 81       	ldd	r19, Z+5	; 0x05
    29e0:	21 30       	cpi	r18, 0x01	; 1
    29e2:	34 40       	sbci	r19, 0x04	; 4
    29e4:	08 f0       	brcs	.+2      	; 0x29e8 <STORE_WriteFrame+0x26>
    29e6:	5b c0       	rjmp	.+182    	; 0x2a9e <STORE_WriteFrame+0xdc>
    29e8:	ec 01       	movw	r28, r24
		return false;
	}
	
	// Copy frame data to our buffer
	memcpy(frameBuffer, (const void*)frame, frame->frameBytes);
    29ea:	2c 81       	ldd	r18, Y+4	; 0x04
    29ec:	3d 81       	ldd	r19, Y+5	; 0x05
    29ee:	ac 01       	movw	r20, r24
    29f0:	60 e8       	ldi	r22, 0x80	; 128
    29f2:	8c e2       	ldi	r24, 0x2C	; 44
    29f4:	93 e0       	ldi	r25, 0x03	; 3
    29f6:	0e 94 3c 24 	call	0x4878	; 0x4878 <memcpy>
	
	// Zero out any remaining buffer space in last sector
	if(frame->frameBytes < FRAME_BUFFER_SIZE) {
    29fa:	8c 81       	ldd	r24, Y+4	; 0x04
    29fc:	9d 81       	ldd	r25, Y+5	; 0x05
    29fe:	81 15       	cp	r24, r1
    2a00:	94 40       	sbci	r25, 0x04	; 4
    2a02:	70 f4       	brcc	.+28     	; 0x2a20 <STORE_WriteFrame+0x5e>
		memset(frameBuffer + frame->frameBytes, 0, FRAME_BUFFER_SIZE - frame->frameBytes);
    2a04:	2c 81       	ldd	r18, Y+4	; 0x04
    2a06:	3d 81       	ldd	r19, Y+5	; 0x05
    2a08:	8c 81       	ldd	r24, Y+4	; 0x04
    2a0a:	9d 81       	ldd	r25, Y+5	; 0x05
    2a0c:	40 e0       	ldi	r20, 0x00	; 0
    2a0e:	54 e0       	ldi	r21, 0x04	; 4
    2a10:	42 1b       	sub	r20, r18
    2a12:	53 0b       	sbc	r21, r19
    2a14:	60 e0       	ldi	r22, 0x00	; 0
    2a16:	70 e0       	ldi	r23, 0x00	; 0
    2a18:	84 5d       	subi	r24, 0xD4	; 212
    2a1a:	9c 4f       	sbci	r25, 0xFC	; 252
    2a1c:	0e 94 98 27 	call	0x4f30	; 0x4f30 <memset>

	currentSector = gState.newSessionSector;
	return true;
}

bool STORE_WriteFrame(volatile FrameData* frame) {
    2a20:	c1 2c       	mov	r12, r1
    2a22:	d1 2c       	mov	r13, r1
    2a24:	76 01       	movw	r14, r12
    2a26:	68 94       	set
    2a28:	c1 f8       	bld	r12, 1
    2a2a:	81 2c       	mov	r8, r1
    2a2c:	91 2c       	mov	r9, r1
    2a2e:	54 01       	movw	r10, r8
    2a30:	2f c0       	rjmp	.+94     	; 0x2a90 <STORE_WriteFrame+0xce>
	// Calculate how many complete sectors we need to write
	sectorsToWrite = SECTORS_PER_FRAME;
	
	// Write all sectors
	while(sectorsToWrite > 0) {
		if(!SDWrite(currentSector, frameBuffer + currentOffset, 1)) {
    2a32:	60 91 58 09 	lds	r22, 0x0958	; 0x800958 <currentSector>
    2a36:	70 91 59 09 	lds	r23, 0x0959	; 0x800959 <currentSector+0x1>
    2a3a:	80 91 5a 09 	lds	r24, 0x095A	; 0x80095a <currentSector+0x2>
    2a3e:	90 91 5b 09 	lds	r25, 0x095B	; 0x80095b <currentSector+0x3>
    2a42:	01 e0       	ldi	r16, 0x01	; 1
    2a44:	10 e0       	ldi	r17, 0x00	; 0
    2a46:	20 e0       	ldi	r18, 0x00	; 0
    2a48:	30 e0       	ldi	r19, 0x00	; 0
    2a4a:	a4 01       	movw	r20, r8
    2a4c:	44 5d       	subi	r20, 0xD4	; 212
    2a4e:	5c 4f       	sbci	r21, 0xFC	; 252
    2a50:	0e 94 48 16 	call	0x2c90	; 0x2c90 <SDWrite>
    2a54:	88 23       	and	r24, r24
    2a56:	21 f1       	breq	.+72     	; 0x2aa0 <STORE_WriteFrame+0xde>
			return false;
		}
		currentSector++;
    2a58:	80 91 58 09 	lds	r24, 0x0958	; 0x800958 <currentSector>
    2a5c:	90 91 59 09 	lds	r25, 0x0959	; 0x800959 <currentSector+0x1>
    2a60:	a0 91 5a 09 	lds	r26, 0x095A	; 0x80095a <currentSector+0x2>
    2a64:	b0 91 5b 09 	lds	r27, 0x095B	; 0x80095b <currentSector+0x3>
    2a68:	01 96       	adiw	r24, 0x01	; 1
    2a6a:	a1 1d       	adc	r26, r1
    2a6c:	b1 1d       	adc	r27, r1
    2a6e:	80 93 58 09 	sts	0x0958, r24	; 0x800958 <currentSector>
    2a72:	90 93 59 09 	sts	0x0959, r25	; 0x800959 <currentSector+0x1>
    2a76:	a0 93 5a 09 	sts	0x095A, r26	; 0x80095a <currentSector+0x2>
    2a7a:	b0 93 5b 09 	sts	0x095B, r27	; 0x80095b <currentSector+0x3>
		currentOffset += SECTOR_SIZE;
    2a7e:	42 e0       	ldi	r20, 0x02	; 2
    2a80:	94 0e       	add	r9, r20
    2a82:	a1 1c       	adc	r10, r1
    2a84:	b1 1c       	adc	r11, r1
		sectorsToWrite--;
    2a86:	81 e0       	ldi	r24, 0x01	; 1
    2a88:	c8 1a       	sub	r12, r24
    2a8a:	d1 08       	sbc	r13, r1
    2a8c:	e1 08       	sbc	r14, r1
    2a8e:	f1 08       	sbc	r15, r1
	
	// Calculate how many complete sectors we need to write
	sectorsToWrite = SECTORS_PER_FRAME;
	
	// Write all sectors
	while(sectorsToWrite > 0) {
    2a90:	c1 14       	cp	r12, r1
    2a92:	d1 04       	cpc	r13, r1
    2a94:	e1 04       	cpc	r14, r1
    2a96:	f1 04       	cpc	r15, r1
    2a98:	61 f6       	brne	.-104    	; 0x2a32 <STORE_WriteFrame+0x70>
		currentSector++;
		currentOffset += SECTOR_SIZE;
		sectorsToWrite--;
	}
	
	return true;
    2a9a:	81 e0       	ldi	r24, 0x01	; 1
    2a9c:	01 c0       	rjmp	.+2      	; 0x2aa0 <STORE_WriteFrame+0xde>
	uint32_t currentOffset = 0;
	uint32_t sectorsToWrite;
	
	// Verify frame size
	if(frame->frameBytes > FRAME_BUFFER_SIZE) {
		return false;
    2a9e:	80 e0       	ldi	r24, 0x00	; 0
		currentOffset += SECTOR_SIZE;
		sectorsToWrite--;
	}
	
	return true;
}
    2aa0:	df 91       	pop	r29
    2aa2:	cf 91       	pop	r28
    2aa4:	1f 91       	pop	r17
    2aa6:	0f 91       	pop	r16
    2aa8:	ff 90       	pop	r15
    2aaa:	ef 90       	pop	r14
    2aac:	df 90       	pop	r13
    2aae:	cf 90       	pop	r12
    2ab0:	bf 90       	pop	r11
    2ab2:	af 90       	pop	r10
    2ab4:	9f 90       	pop	r9
    2ab6:	8f 90       	pop	r8
    2ab8:	08 95       	ret

Disassembly of section .text.STORE_StartNewSession:

0000437a <STORE_StartNewSession>:

bool STORE_StartNewSession(void) {
	// Update session info
	gState.sessionCount++;
    437a:	ec e2       	ldi	r30, 0x2C	; 44
    437c:	f7 e0       	ldi	r31, 0x07	; 7
    437e:	84 89       	ldd	r24, Z+20	; 0x14
    4380:	95 89       	ldd	r25, Z+21	; 0x15
    4382:	a6 89       	ldd	r26, Z+22	; 0x16
    4384:	b7 89       	ldd	r27, Z+23	; 0x17
    4386:	01 96       	adiw	r24, 0x01	; 1
    4388:	a1 1d       	adc	r26, r1
    438a:	b1 1d       	adc	r27, r1
    438c:	84 8b       	std	Z+20, r24	; 0x14
    438e:	95 8b       	std	Z+21, r25	; 0x15
    4390:	a6 8b       	std	Z+22, r26	; 0x16
    4392:	b7 8b       	std	Z+23, r27	; 0x17
	gState.newSessionSector = currentSector;
    4394:	80 91 58 09 	lds	r24, 0x0958	; 0x800958 <currentSector>
    4398:	90 91 59 09 	lds	r25, 0x0959	; 0x800959 <currentSector+0x1>
    439c:	a0 91 5a 09 	lds	r26, 0x095A	; 0x80095a <currentSector+0x2>
    43a0:	b0 91 5b 09 	lds	r27, 0x095B	; 0x80095b <currentSector+0x3>
    43a4:	80 8f       	std	Z+24, r24	; 0x18
    43a6:	91 8f       	std	Z+25, r25	; 0x19
    43a8:	a2 8f       	std	Z+26, r26	; 0x1a
    43aa:	b3 8f       	std	Z+27, r27	; 0x1b
	
	// Ensure sector alignment for new sessions
	if(currentSector % SECTORS_PER_FRAME != 0) {
    43ac:	80 ff       	sbrs	r24, 0
    43ae:	0c c0       	rjmp	.+24     	; 0x43c8 <STORE_StartNewSession+0x4e>
		currentSector += SECTORS_PER_FRAME - (currentSector % SECTORS_PER_FRAME);
    43b0:	8e 7f       	andi	r24, 0xFE	; 254
    43b2:	02 96       	adiw	r24, 0x02	; 2
    43b4:	a1 1d       	adc	r26, r1
    43b6:	b1 1d       	adc	r27, r1
    43b8:	80 93 58 09 	sts	0x0958, r24	; 0x800958 <currentSector>
    43bc:	90 93 59 09 	sts	0x0959, r25	; 0x800959 <currentSector+0x1>
    43c0:	a0 93 5a 09 	sts	0x095A, r26	; 0x80095a <currentSector+0x2>
    43c4:	b0 93 5b 09 	sts	0x095B, r27	; 0x80095b <currentSector+0x3>
	}
	
	return updateSessionMap();
    43c8:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <updateSessionMap>
}
    43cc:	08 95       	ret

Disassembly of section .text.STORE_EndSession:

000041cc <STORE_EndSession>:

bool STORE_EndSession(void) {
	// Ensure we end on a frame boundary
	if(currentSector % SECTORS_PER_FRAME != 0) {
    41cc:	80 91 58 09 	lds	r24, 0x0958	; 0x800958 <currentSector>
    41d0:	90 91 59 09 	lds	r25, 0x0959	; 0x800959 <currentSector+0x1>
    41d4:	a0 91 5a 09 	lds	r26, 0x095A	; 0x80095a <currentSector+0x2>
    41d8:	b0 91 5b 09 	lds	r27, 0x095B	; 0x80095b <currentSector+0x3>
    41dc:	80 ff       	sbrs	r24, 0
    41de:	0c c0       	rjmp	.+24     	; 0x41f8 <STORE_EndSession+0x2c>
		currentSector += SECTORS_PER_FRAME - (currentSector % SECTORS_PER_FRAME);
    41e0:	8e 7f       	andi	r24, 0xFE	; 254
    41e2:	02 96       	adiw	r24, 0x02	; 2
    41e4:	a1 1d       	adc	r26, r1
    41e6:	b1 1d       	adc	r27, r1
    41e8:	80 93 58 09 	sts	0x0958, r24	; 0x800958 <currentSector>
    41ec:	90 93 59 09 	sts	0x0959, r25	; 0x800959 <currentSector+0x1>
    41f0:	a0 93 5a 09 	sts	0x095A, r26	; 0x80095a <currentSector+0x2>
    41f4:	b0 93 5b 09 	sts	0x095B, r27	; 0x80095b <currentSector+0x3>
	}
	
	gState.lastSessionSector = currentSector - 1;
    41f8:	80 91 58 09 	lds	r24, 0x0958	; 0x800958 <currentSector>
    41fc:	90 91 59 09 	lds	r25, 0x0959	; 0x800959 <currentSector+0x1>
    4200:	a0 91 5a 09 	lds	r26, 0x095A	; 0x80095a <currentSector+0x2>
    4204:	b0 91 5b 09 	lds	r27, 0x095B	; 0x80095b <currentSector+0x3>
    4208:	01 97       	sbiw	r24, 0x01	; 1
    420a:	a1 09       	sbc	r26, r1
    420c:	b1 09       	sbc	r27, r1
    420e:	80 93 3c 07 	sts	0x073C, r24	; 0x80073c <gState+0x10>
    4212:	90 93 3d 07 	sts	0x073D, r25	; 0x80073d <gState+0x11>
    4216:	a0 93 3e 07 	sts	0x073E, r26	; 0x80073e <gState+0x12>
    421a:	b0 93 3f 07 	sts	0x073F, r27	; 0x80073f <gState+0x13>
	return writeGlobalState();
    421e:	0e 94 23 24 	call	0x4846	; 0x4846 <writeGlobalState>
}
    4222:	08 95       	ret

Disassembly of section .text.vUARTtxDataAvailable:

00004d7e <vUARTtxDataAvailable>:
#endif

bool vUARTIsBusy(void) {
	return ((sg_etxState != ESTATE_IDLE) ||
		(sg_eCell_mc_rxState != ESTATE_IDLE));
}
    4d7e:	80 91 88 09 	lds	r24, 0x0988	; 0x800988 <sg_u8SendIndex>
    4d82:	81 11       	cpse	r24, r1
    4d84:	06 c0       	rjmp	.+12     	; 0x4d92 <vUARTtxDataAvailable+0x14>
    4d86:	0e 94 1a 25 	call	0x4a34	; 0x4a34 <PlatformGetSendData>
    4d8a:	90 93 6b 09 	sts	0x096B, r25	; 0x80096b <sg_u8SendData+0x1>
    4d8e:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8SendData>
    4d92:	80 91 88 09 	lds	r24, 0x0988	; 0x800988 <sg_u8SendIndex>
    4d96:	81 11       	cpse	r24, r1
    4d98:	02 c0       	rjmp	.+4      	; 0x4d9e <vUARTtxDataAvailable+0x20>
    4d9a:	81 e0       	ldi	r24, 0x01	; 1
    4d9c:	08 95       	ret
    4d9e:	80 e0       	ldi	r24, 0x00	; 0
    4da0:	08 95       	ret

Disassembly of section .text.vUARTtxDataGet:

00004510 <vUARTtxDataGet>:
    4510:	80 91 88 09 	lds	r24, 0x0988	; 0x800988 <sg_u8SendIndex>
    4514:	81 11       	cpse	r24, r1
    4516:	10 c0       	rjmp	.+32     	; 0x4538 <vUARTtxDataGet+0x28>
    4518:	81 e0       	ldi	r24, 0x01	; 1
    451a:	0e 94 1a 25 	call	0x4a34	; 0x4a34 <PlatformGetSendData>
    451e:	ea e6       	ldi	r30, 0x6A	; 106
    4520:	f9 e0       	ldi	r31, 0x09	; 9
    4522:	90 83       	st	Z, r25
    4524:	81 83       	std	Z+1, r24	; 0x01
    4526:	80 81       	ld	r24, Z
    4528:	88 23       	and	r24, r24
    452a:	24 f4       	brge	.+8      	; 0x4534 <vUARTtxDataGet+0x24>
    452c:	81 e0       	ldi	r24, 0x01	; 1
    452e:	80 93 8a 09 	sts	0x098A, r24	; 0x80098a <sg_bCellReportsReuested>
    4532:	02 c0       	rjmp	.+4      	; 0x4538 <vUARTtxDataGet+0x28>
    4534:	10 92 8a 09 	sts	0x098A, r1	; 0x80098a <sg_bCellReportsReuested>
    4538:	e0 91 88 09 	lds	r30, 0x0988	; 0x800988 <sg_u8SendIndex>
    453c:	f0 e0       	ldi	r31, 0x00	; 0
    453e:	e6 59       	subi	r30, 0x96	; 150
    4540:	f6 4f       	sbci	r31, 0xF6	; 246
    4542:	80 81       	ld	r24, Z
    4544:	90 91 88 09 	lds	r25, 0x0988	; 0x800988 <sg_u8SendIndex>
    4548:	9f 5f       	subi	r25, 0xFF	; 255
    454a:	90 93 88 09 	sts	0x0988, r25	; 0x800988 <sg_u8SendIndex>
    454e:	90 91 88 09 	lds	r25, 0x0988	; 0x800988 <sg_u8SendIndex>
    4552:	92 30       	cpi	r25, 0x02	; 2
    4554:	10 f0       	brcs	.+4      	; 0x455a <vUARTtxDataGet+0x4a>
    4556:	10 92 88 09 	sts	0x0988, r1	; 0x800988 <sg_u8SendIndex>
    455a:	08 95       	ret

Disassembly of section .text.vUARTRXReset:

0000501c <vUARTRXReset>:

// Called when we have a string timeout or need to reset the state machine
// for the MC RX side of things
void vUARTRXReset(void)
{
	sg_eCell_mc_rxState = ESTATE_IDLE;
    501c:	10 92 91 09 	sts	0x0991, r1	; 0x800991 <sg_eCell_mc_rxState>
	vUARTRXStart();
    5020:	0e 94 5a 27 	call	0x4eb4	; 0x4eb4 <vUARTRXStart>
    5024:	08 95       	ret

Disassembly of section .text.vUARTStarttx:

0000427a <vUARTStarttx>:
#endif

bool vUARTIsBusy(void) {
	return ((sg_etxState != ESTATE_IDLE) ||
		(sg_eCell_mc_rxState != ESTATE_IDLE));
}
    427a:	80 91 8b 09 	lds	r24, 0x098B	; 0x80098b <sg_etxState>
    427e:	81 11       	cpse	r24, r1
    4280:	23 c0       	rjmp	.+70     	; 0x42c8 <vUARTStarttx+0x4e>
    4282:	80 91 91 09 	lds	r24, 0x0991	; 0x800991 <sg_eCell_mc_rxState>
    4286:	81 11       	cpse	r24, r1
    4288:	21 c0       	rjmp	.+66     	; 0x42cc <vUARTStarttx+0x52>
    428a:	82 e0       	ldi	r24, 0x02	; 2
    428c:	80 93 8b 09 	sts	0x098B, r24	; 0x80098b <sg_etxState>
    4290:	10 92 88 09 	sts	0x0988, r1	; 0x800988 <sg_u8SendIndex>
    4294:	10 92 8e 09 	sts	0x098E, r1	; 0x80098e <sg_u8txBitCount>
    4298:	81 e0       	ldi	r24, 0x01	; 1
    429a:	80 93 89 09 	sts	0x0989, r24	; 0x800989 <sg_bMCTxNextBit>
    429e:	86 b5       	in	r24, 0x26	; 38
    42a0:	8e 5c       	subi	r24, 0xCE	; 206
    42a2:	87 bd       	out	0x27, r24	; 39
    42a4:	85 b3       	in	r24, 0x15	; 21
    42a6:	82 60       	ori	r24, 0x02	; 2
    42a8:	85 bb       	out	0x15, r24	; 21
    42aa:	ee e6       	ldi	r30, 0x6E	; 110
    42ac:	f0 e0       	ldi	r31, 0x00	; 0
    42ae:	80 81       	ld	r24, Z
    42b0:	82 60       	ori	r24, 0x02	; 2
    42b2:	80 83       	st	Z, r24
    42b4:	0e 94 bf 26 	call	0x4d7e	; 0x4d7e <vUARTtxDataAvailable>
    42b8:	80 93 8c 09 	sts	0x098C, r24	; 0x80098c <sg_btxMoreAvailable>
    42bc:	0e 94 88 22 	call	0x4510	; 0x4510 <vUARTtxDataGet>
    42c0:	80 93 8d 09 	sts	0x098D, r24	; 0x80098d <sg_u8txDataByte>
    42c4:	81 e0       	ldi	r24, 0x01	; 1
    42c6:	08 95       	ret
    42c8:	80 e0       	ldi	r24, 0x00	; 0
    42ca:	08 95       	ret
    42cc:	80 e0       	ldi	r24, 0x00	; 0
    42ce:	08 95       	ret

Disassembly of section .text.__vector_8:

00004118 <__vector_8>:
    4118:	1f 92       	push	r1
    411a:	0f 92       	push	r0
    411c:	0f b6       	in	r0, 0x3f	; 63
    411e:	0f 92       	push	r0
    4120:	11 24       	eor	r1, r1
    4122:	8f 93       	push	r24
    4124:	ef 93       	push	r30
    4126:	ff 93       	push	r31
    4128:	80 91 91 09 	lds	r24, 0x0991	; 0x800991 <sg_eCell_mc_rxState>
    412c:	88 23       	and	r24, r24
    412e:	11 f0       	breq	.+4      	; 0x4134 <__vector_8+0x1c>
    4130:	83 30       	cpi	r24, 0x03	; 3
    4132:	c1 f4       	brne	.+48     	; 0x4164 <__vector_8+0x4c>
    4134:	86 b5       	in	r24, 0x26	; 38
    4136:	85 5b       	subi	r24, 0xB5	; 181
    4138:	88 bd       	out	0x28, r24	; 40
    413a:	85 b3       	in	r24, 0x15	; 21
    413c:	84 60       	ori	r24, 0x04	; 4
    413e:	85 bb       	out	0x15, r24	; 21
    4140:	ee e6       	ldi	r30, 0x6E	; 110
    4142:	f0 e0       	ldi	r31, 0x00	; 0
    4144:	80 81       	ld	r24, Z
    4146:	84 60       	ori	r24, 0x04	; 4
    4148:	80 83       	st	Z, r24
    414a:	8d b3       	in	r24, 0x1d	; 29
    414c:	8d 7f       	andi	r24, 0xFD	; 253
    414e:	8d bb       	out	0x1d, r24	; 29
    4150:	8b b1       	in	r24, 0x0b	; 11
    4152:	80 62       	ori	r24, 0x20	; 32
    4154:	8b b9       	out	0x0b, r24	; 11
    4156:	10 92 87 09 	sts	0x0987, r1	; 0x800987 <sg_bState>
    415a:	81 e0       	ldi	r24, 0x01	; 1
    415c:	80 93 91 09 	sts	0x0991, r24	; 0x800991 <sg_eCell_mc_rxState>
    4160:	10 92 93 09 	sts	0x0993, r1	; 0x800993 <sg_u8Cell_mc_rxBitCount>
    4164:	ff 91       	pop	r31
    4166:	ef 91       	pop	r30
    4168:	8f 91       	pop	r24
    416a:	0f 90       	pop	r0
    416c:	0f be       	out	0x3f, r0	; 63
    416e:	0f 90       	pop	r0
    4170:	1f 90       	pop	r1
    4172:	18 95       	reti

Disassembly of section .text.__vector_16:

00002aba <__vector_16>:
    2aba:	1f 92       	push	r1
    2abc:	0f 92       	push	r0
    2abe:	0f b6       	in	r0, 0x3f	; 63
    2ac0:	0f 92       	push	r0
    2ac2:	11 24       	eor	r1, r1
    2ac4:	2f 93       	push	r18
    2ac6:	3f 93       	push	r19
    2ac8:	4f 93       	push	r20
    2aca:	5f 93       	push	r21
    2acc:	6f 93       	push	r22
    2ace:	7f 93       	push	r23
    2ad0:	8f 93       	push	r24
    2ad2:	9f 93       	push	r25
    2ad4:	af 93       	push	r26
    2ad6:	bf 93       	push	r27
    2ad8:	ef 93       	push	r30
    2ada:	ff 93       	push	r31
    2adc:	86 b5       	in	r24, 0x26	; 38
    2ade:	8e 5c       	subi	r24, 0xCE	; 206
    2ae0:	88 bd       	out	0x28, r24	; 40
    2ae2:	85 b3       	in	r24, 0x15	; 21
    2ae4:	84 60       	ori	r24, 0x04	; 4
    2ae6:	85 bb       	out	0x15, r24	; 21
    2ae8:	ee e6       	ldi	r30, 0x6E	; 110
    2aea:	f0 e0       	ldi	r31, 0x00	; 0
    2aec:	80 81       	ld	r24, Z
    2aee:	84 60       	ori	r24, 0x04	; 4
    2af0:	80 83       	st	Z, r24
    2af2:	20 91 90 09 	lds	r18, 0x0990	; 0x800990 <sg_bCell_mc_rxPriorState>
    2af6:	83 b1       	in	r24, 0x03	; 3
    2af8:	82 fb       	bst	r24, 2
    2afa:	88 27       	eor	r24, r24
    2afc:	80 f9       	bld	r24, 0
    2afe:	80 93 90 09 	sts	0x0990, r24	; 0x800990 <sg_bCell_mc_rxPriorState>
    2b02:	90 91 87 09 	lds	r25, 0x0987	; 0x800987 <sg_bState>
    2b06:	99 23       	and	r25, r25
    2b08:	31 f0       	breq	.+12     	; 0x2b16 <__vector_16+0x5c>
    2b0a:	9b b1       	in	r25, 0x0b	; 11
    2b0c:	90 62       	ori	r25, 0x20	; 32
    2b0e:	9b b9       	out	0x0b, r25	; 11
    2b10:	10 92 87 09 	sts	0x0987, r1	; 0x800987 <sg_bState>
    2b14:	06 c0       	rjmp	.+12     	; 0x2b22 <__vector_16+0x68>
    2b16:	9b b1       	in	r25, 0x0b	; 11
    2b18:	9f 7d       	andi	r25, 0xDF	; 223
    2b1a:	9b b9       	out	0x0b, r25	; 11
    2b1c:	81 e0       	ldi	r24, 0x01	; 1
    2b1e:	80 93 87 09 	sts	0x0987, r24	; 0x800987 <sg_bState>
    2b22:	80 91 93 09 	lds	r24, 0x0993	; 0x800993 <sg_u8Cell_mc_rxBitCount>
    2b26:	8f 5f       	subi	r24, 0xFF	; 255
    2b28:	80 93 93 09 	sts	0x0993, r24	; 0x800993 <sg_u8Cell_mc_rxBitCount>
    2b2c:	81 30       	cpi	r24, 0x01	; 1
    2b2e:	19 f4       	brne	.+6      	; 0x2b36 <__vector_16+0x7c>
    2b30:	10 92 92 09 	sts	0x0992, r1	; 0x800992 <sg_u8rxDataByte>
    2b34:	2b c0       	rjmp	.+86     	; 0x2b8c <__vector_16+0xd2>
    2b36:	8a 30       	cpi	r24, 0x0A	; 10
    2b38:	38 f4       	brcc	.+14     	; 0x2b48 <__vector_16+0x8e>
    2b3a:	80 91 92 09 	lds	r24, 0x0992	; 0x800992 <sg_u8rxDataByte>
    2b3e:	88 0f       	add	r24, r24
    2b40:	82 2b       	or	r24, r18
    2b42:	80 93 92 09 	sts	0x0992, r24	; 0x800992 <sg_u8rxDataByte>
    2b46:	22 c0       	rjmp	.+68     	; 0x2b8c <__vector_16+0xd2>
    2b48:	20 93 8f 09 	sts	0x098F, r18	; 0x80098f <sg_bCell_mc_rxMoreData>
    2b4c:	8b b1       	in	r24, 0x0b	; 11
    2b4e:	8f 7d       	andi	r24, 0xDF	; 223
    2b50:	8b b9       	out	0x0b, r24	; 11
    2b52:	81 e0       	ldi	r24, 0x01	; 1
    2b54:	80 93 87 09 	sts	0x0987, r24	; 0x800987 <sg_bState>
    2b58:	e9 e6       	ldi	r30, 0x69	; 105
    2b5a:	f0 e0       	ldi	r31, 0x00	; 0
    2b5c:	9c e0       	ldi	r25, 0x0C	; 12
    2b5e:	90 83       	st	Z, r25
    2b60:	8c b3       	in	r24, 0x1c	; 28
    2b62:	82 60       	ori	r24, 0x02	; 2
    2b64:	8c bb       	out	0x1c, r24	; 28
    2b66:	90 83       	st	Z, r25
    2b68:	8c b3       	in	r24, 0x1c	; 28
    2b6a:	82 60       	ori	r24, 0x02	; 2
    2b6c:	8c bb       	out	0x1c, r24	; 28
    2b6e:	8d b3       	in	r24, 0x1d	; 29
    2b70:	82 60       	ori	r24, 0x02	; 2
    2b72:	8d bb       	out	0x1d, r24	; 29
    2b74:	ee e6       	ldi	r30, 0x6E	; 110
    2b76:	f0 e0       	ldi	r31, 0x00	; 0
    2b78:	80 81       	ld	r24, Z
    2b7a:	8b 7f       	andi	r24, 0xFB	; 251
    2b7c:	80 83       	st	Z, r24
    2b7e:	80 91 92 09 	lds	r24, 0x0992	; 0x800992 <sg_u8rxDataByte>
    2b82:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <vUARTRXData>
    2b86:	83 e0       	ldi	r24, 0x03	; 3
    2b88:	80 93 91 09 	sts	0x0991, r24	; 0x800991 <sg_eCell_mc_rxState>
    2b8c:	ff 91       	pop	r31
    2b8e:	ef 91       	pop	r30
    2b90:	bf 91       	pop	r27
    2b92:	af 91       	pop	r26
    2b94:	9f 91       	pop	r25
    2b96:	8f 91       	pop	r24
    2b98:	7f 91       	pop	r23
    2b9a:	6f 91       	pop	r22
    2b9c:	5f 91       	pop	r21
    2b9e:	4f 91       	pop	r20
    2ba0:	3f 91       	pop	r19
    2ba2:	2f 91       	pop	r18
    2ba4:	0f 90       	pop	r0
    2ba6:	0f be       	out	0x3f, r0	; 63
    2ba8:	0f 90       	pop	r0
    2baa:	1f 90       	pop	r1
    2bac:	18 95       	reti

Disassembly of section .text.__vector_15:

0000255c <__vector_15>:
    255c:	1f 92       	push	r1
    255e:	0f 92       	push	r0
    2560:	0f b6       	in	r0, 0x3f	; 63
    2562:	0f 92       	push	r0
    2564:	11 24       	eor	r1, r1
    2566:	2f 93       	push	r18
    2568:	3f 93       	push	r19
    256a:	4f 93       	push	r20
    256c:	5f 93       	push	r21
    256e:	6f 93       	push	r22
    2570:	7f 93       	push	r23
    2572:	8f 93       	push	r24
    2574:	9f 93       	push	r25
    2576:	af 93       	push	r26
    2578:	bf 93       	push	r27
    257a:	ef 93       	push	r30
    257c:	ff 93       	push	r31
    257e:	86 b5       	in	r24, 0x26	; 38
    2580:	83 5d       	subi	r24, 0xD3	; 211
    2582:	87 bd       	out	0x27, r24	; 39
    2584:	85 b3       	in	r24, 0x15	; 21
    2586:	82 60       	ori	r24, 0x02	; 2
    2588:	85 bb       	out	0x15, r24	; 21
    258a:	ee e6       	ldi	r30, 0x6E	; 110
    258c:	f0 e0       	ldi	r31, 0x00	; 0
    258e:	80 81       	ld	r24, Z
    2590:	82 60       	ori	r24, 0x02	; 2
    2592:	80 83       	st	Z, r24
    2594:	80 91 89 09 	lds	r24, 0x0989	; 0x800989 <sg_bMCTxNextBit>
    2598:	88 23       	and	r24, r24
    259a:	21 f0       	breq	.+8      	; 0x25a4 <__vector_15+0x48>
    259c:	85 b1       	in	r24, 0x05	; 5
    259e:	88 60       	ori	r24, 0x08	; 8
    25a0:	85 b9       	out	0x05, r24	; 5
    25a2:	03 c0       	rjmp	.+6      	; 0x25aa <__vector_15+0x4e>
    25a4:	85 b1       	in	r24, 0x05	; 5
    25a6:	87 7f       	andi	r24, 0xF7	; 247
    25a8:	85 b9       	out	0x05, r24	; 5
    25aa:	80 91 8e 09 	lds	r24, 0x098E	; 0x80098e <sg_u8txBitCount>
    25ae:	8f 5f       	subi	r24, 0xFF	; 255
    25b0:	80 93 8e 09 	sts	0x098E, r24	; 0x80098e <sg_u8txBitCount>
    25b4:	80 91 8e 09 	lds	r24, 0x098E	; 0x80098e <sg_u8txBitCount>
    25b8:	83 30       	cpi	r24, 0x03	; 3
    25ba:	61 f4       	brne	.+24     	; 0x25d4 <__vector_15+0x78>
    25bc:	80 91 8a 09 	lds	r24, 0x098A	; 0x80098a <sg_bCellReportsReuested>
    25c0:	88 23       	and	r24, r24
    25c2:	41 f0       	breq	.+16     	; 0x25d4 <__vector_15+0x78>
    25c4:	8b e0       	ldi	r24, 0x0B	; 11
    25c6:	80 93 8e 09 	sts	0x098E, r24	; 0x80098e <sg_u8txBitCount>
    25ca:	10 92 89 09 	sts	0x0989, r1	; 0x800989 <sg_bMCTxNextBit>
    25ce:	10 92 8c 09 	sts	0x098C, r1	; 0x80098c <sg_btxMoreAvailable>
    25d2:	4d c0       	rjmp	.+154    	; 0x266e <__vector_15+0x112>
    25d4:	80 91 8e 09 	lds	r24, 0x098E	; 0x80098e <sg_u8txBitCount>
    25d8:	8a 30       	cpi	r24, 0x0A	; 10
    25da:	80 f4       	brcc	.+32     	; 0x25fc <__vector_15+0xa0>
    25dc:	80 91 8d 09 	lds	r24, 0x098D	; 0x80098d <sg_u8txDataByte>
    25e0:	88 23       	and	r24, r24
    25e2:	24 f4       	brge	.+8      	; 0x25ec <__vector_15+0x90>
    25e4:	81 e0       	ldi	r24, 0x01	; 1
    25e6:	80 93 89 09 	sts	0x0989, r24	; 0x800989 <sg_bMCTxNextBit>
    25ea:	02 c0       	rjmp	.+4      	; 0x25f0 <__vector_15+0x94>
    25ec:	10 92 89 09 	sts	0x0989, r1	; 0x800989 <sg_bMCTxNextBit>
    25f0:	80 91 8d 09 	lds	r24, 0x098D	; 0x80098d <sg_u8txDataByte>
    25f4:	88 0f       	add	r24, r24
    25f6:	80 93 8d 09 	sts	0x098D, r24	; 0x80098d <sg_u8txDataByte>
    25fa:	39 c0       	rjmp	.+114    	; 0x266e <__vector_15+0x112>
    25fc:	80 91 8e 09 	lds	r24, 0x098E	; 0x80098e <sg_u8txBitCount>
    2600:	8a 30       	cpi	r24, 0x0A	; 10
    2602:	29 f4       	brne	.+10     	; 0x260e <__vector_15+0xb2>
    2604:	80 91 8c 09 	lds	r24, 0x098C	; 0x80098c <sg_btxMoreAvailable>
    2608:	80 93 89 09 	sts	0x0989, r24	; 0x800989 <sg_bMCTxNextBit>
    260c:	30 c0       	rjmp	.+96     	; 0x266e <__vector_15+0x112>
    260e:	80 91 8e 09 	lds	r24, 0x098E	; 0x80098e <sg_u8txBitCount>
    2612:	8b 30       	cpi	r24, 0x0B	; 11
    2614:	19 f4       	brne	.+6      	; 0x261c <__vector_15+0xc0>
    2616:	10 92 89 09 	sts	0x0989, r1	; 0x800989 <sg_bMCTxNextBit>
    261a:	29 c0       	rjmp	.+82     	; 0x266e <__vector_15+0x112>
    261c:	80 91 8e 09 	lds	r24, 0x098E	; 0x80098e <sg_u8txBitCount>
    2620:	8c 30       	cpi	r24, 0x0C	; 12
    2622:	29 f5       	brne	.+74     	; 0x266e <__vector_15+0x112>
    2624:	80 91 8c 09 	lds	r24, 0x098C	; 0x80098c <sg_btxMoreAvailable>
    2628:	80 93 89 09 	sts	0x0989, r24	; 0x800989 <sg_bMCTxNextBit>
    262c:	10 92 8e 09 	sts	0x098E, r1	; 0x80098e <sg_u8txBitCount>
    2630:	80 91 8c 09 	lds	r24, 0x098C	; 0x80098c <sg_btxMoreAvailable>
    2634:	81 11       	cpse	r24, r1
    2636:	08 c0       	rjmp	.+16     	; 0x2648 <__vector_15+0xec>
    2638:	10 92 8b 09 	sts	0x098B, r1	; 0x80098b <sg_etxState>
    263c:	ee e6       	ldi	r30, 0x6E	; 110
    263e:	f0 e0       	ldi	r31, 0x00	; 0
    2640:	80 81       	ld	r24, Z
    2642:	8d 7f       	andi	r24, 0xFD	; 253
    2644:	80 83       	st	Z, r24
    2646:	13 c0       	rjmp	.+38     	; 0x266e <__vector_15+0x112>
    2648:	0e 94 bf 26 	call	0x4d7e	; 0x4d7e <vUARTtxDataAvailable>
    264c:	80 93 8c 09 	sts	0x098C, r24	; 0x80098c <sg_btxMoreAvailable>
    2650:	0e 94 88 22 	call	0x4510	; 0x4510 <vUARTtxDataGet>
    2654:	80 93 8d 09 	sts	0x098D, r24	; 0x80098d <sg_u8txDataByte>
    2658:	86 b5       	in	r24, 0x26	; 38
    265a:	88 53       	subi	r24, 0x38	; 56
    265c:	87 bd       	out	0x27, r24	; 39
    265e:	85 b3       	in	r24, 0x15	; 21
    2660:	82 60       	ori	r24, 0x02	; 2
    2662:	85 bb       	out	0x15, r24	; 21
    2664:	ee e6       	ldi	r30, 0x6E	; 110
    2666:	f0 e0       	ldi	r31, 0x00	; 0
    2668:	80 81       	ld	r24, Z
    266a:	82 60       	ori	r24, 0x02	; 2
    266c:	80 83       	st	Z, r24
    266e:	ff 91       	pop	r31
    2670:	ef 91       	pop	r30
    2672:	bf 91       	pop	r27
    2674:	af 91       	pop	r26
    2676:	9f 91       	pop	r25
    2678:	8f 91       	pop	r24
    267a:	7f 91       	pop	r23
    267c:	6f 91       	pop	r22
    267e:	5f 91       	pop	r21
    2680:	4f 91       	pop	r20
    2682:	3f 91       	pop	r19
    2684:	2f 91       	pop	r18
    2686:	0f 90       	pop	r0
    2688:	0f be       	out	0x3f, r0	; 63
    268a:	0f 90       	pop	r0
    268c:	1f 90       	pop	r1
    268e:	18 95       	reti

Disassembly of section .text.vUARTInit:

0000470c <vUARTInit>:
    470c:	85 b7       	in	r24, 0x35	; 53
    470e:	8f 7e       	andi	r24, 0xEF	; 239
    4710:	85 bf       	out	0x35, r24	; 53
    4712:	84 b1       	in	r24, 0x04	; 4
    4714:	88 60       	ori	r24, 0x08	; 8
    4716:	84 b9       	out	0x04, r24	; 4
    4718:	84 b1       	in	r24, 0x04	; 4
    471a:	8b 7f       	andi	r24, 0xFB	; 251
    471c:	84 b9       	out	0x04, r24	; 4
    471e:	85 b1       	in	r24, 0x05	; 5
    4720:	8b 7f       	andi	r24, 0xFB	; 251
    4722:	85 b9       	out	0x05, r24	; 5
    4724:	8a b1       	in	r24, 0x0a	; 10
    4726:	80 62       	ori	r24, 0x20	; 32
    4728:	8a b9       	out	0x0a, r24	; 10
    472a:	8b b1       	in	r24, 0x0b	; 11
    472c:	80 62       	ori	r24, 0x20	; 32
    472e:	8b b9       	out	0x0b, r24	; 11
    4730:	8d b3       	in	r24, 0x1d	; 29
    4732:	8d 7f       	andi	r24, 0xFD	; 253
    4734:	8d bb       	out	0x1d, r24	; 29
    4736:	10 92 8b 09 	sts	0x098B, r1	; 0x80098b <sg_etxState>
    473a:	85 b1       	in	r24, 0x05	; 5
    473c:	87 7f       	andi	r24, 0xF7	; 247
    473e:	85 b9       	out	0x05, r24	; 5
    4740:	08 95       	ret

Disassembly of section .text.vUARTInitReceive:

00004f0a <vUARTInitReceive>:
    4f0a:	8c e0       	ldi	r24, 0x0C	; 12
    4f0c:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f0069>
    4f10:	8c b3       	in	r24, 0x1c	; 28
    4f12:	82 60       	ori	r24, 0x02	; 2
    4f14:	8c bb       	out	0x1c, r24	; 28
    4f16:	8d b3       	in	r24, 0x1d	; 29
    4f18:	82 60       	ori	r24, 0x02	; 2
    4f1a:	8d bb       	out	0x1d, r24	; 29
    4f1c:	08 95       	ret

Disassembly of section .text.libgcc.div:

00004a5c <__udivmodhi4>:
    4a5c:	aa 1b       	sub	r26, r26
    4a5e:	bb 1b       	sub	r27, r27
    4a60:	51 e1       	ldi	r21, 0x11	; 17
    4a62:	07 c0       	rjmp	.+14     	; 0x4a72 <__udivmodhi4_ep>

00004a64 <__udivmodhi4_loop>:
    4a64:	aa 1f       	adc	r26, r26
    4a66:	bb 1f       	adc	r27, r27
    4a68:	a6 17       	cp	r26, r22
    4a6a:	b7 07       	cpc	r27, r23
    4a6c:	10 f0       	brcs	.+4      	; 0x4a72 <__udivmodhi4_ep>
    4a6e:	a6 1b       	sub	r26, r22
    4a70:	b7 0b       	sbc	r27, r23

00004a72 <__udivmodhi4_ep>:
    4a72:	88 1f       	adc	r24, r24
    4a74:	99 1f       	adc	r25, r25
    4a76:	5a 95       	dec	r21
    4a78:	a9 f7       	brne	.-22     	; 0x4a64 <__udivmodhi4_loop>
    4a7a:	80 95       	com	r24
    4a7c:	90 95       	com	r25
    4a7e:	bc 01       	movw	r22, r24
    4a80:	cd 01       	movw	r24, r26
    4a82:	08 95       	ret

Disassembly of section .text.libgcc.div:

000045a0 <__udivmodsi4>:
    45a0:	a1 e2       	ldi	r26, 0x21	; 33
    45a2:	1a 2e       	mov	r1, r26
    45a4:	aa 1b       	sub	r26, r26
    45a6:	bb 1b       	sub	r27, r27
    45a8:	fd 01       	movw	r30, r26
    45aa:	0d c0       	rjmp	.+26     	; 0x45c6 <__udivmodsi4_ep>

000045ac <__udivmodsi4_loop>:
    45ac:	aa 1f       	adc	r26, r26
    45ae:	bb 1f       	adc	r27, r27
    45b0:	ee 1f       	adc	r30, r30
    45b2:	ff 1f       	adc	r31, r31
    45b4:	a2 17       	cp	r26, r18
    45b6:	b3 07       	cpc	r27, r19
    45b8:	e4 07       	cpc	r30, r20
    45ba:	f5 07       	cpc	r31, r21
    45bc:	20 f0       	brcs	.+8      	; 0x45c6 <__udivmodsi4_ep>
    45be:	a2 1b       	sub	r26, r18
    45c0:	b3 0b       	sbc	r27, r19
    45c2:	e4 0b       	sbc	r30, r20
    45c4:	f5 0b       	sbc	r31, r21

000045c6 <__udivmodsi4_ep>:
    45c6:	66 1f       	adc	r22, r22
    45c8:	77 1f       	adc	r23, r23
    45ca:	88 1f       	adc	r24, r24
    45cc:	99 1f       	adc	r25, r25
    45ce:	1a 94       	dec	r1
    45d0:	69 f7       	brne	.-38     	; 0x45ac <__udivmodsi4_loop>
    45d2:	60 95       	com	r22
    45d4:	70 95       	com	r23
    45d6:	80 95       	com	r24
    45d8:	90 95       	com	r25
    45da:	9b 01       	movw	r18, r22
    45dc:	ac 01       	movw	r20, r24
    45de:	bd 01       	movw	r22, r26
    45e0:	cf 01       	movw	r24, r30
    45e2:	08 95       	ret

Disassembly of section .text.libgcc.div:

000048d8 <__divmodsi4>:
    48d8:	05 2e       	mov	r0, r21
    48da:	97 fb       	bst	r25, 7
    48dc:	1e f4       	brtc	.+6      	; 0x48e4 <__divmodsi4+0xc>
    48de:	00 94       	com	r0
    48e0:	0e 94 c4 27 	call	0x4f88	; 0x4f88 <__negsi2>
    48e4:	57 fd       	sbrc	r21, 7
    48e6:	07 d0       	rcall	.+14     	; 0x48f6 <__divmodsi4_neg2>
    48e8:	0e 94 d0 22 	call	0x45a0	; 0x45a0 <__udivmodsi4>
    48ec:	07 fc       	sbrc	r0, 7
    48ee:	03 d0       	rcall	.+6      	; 0x48f6 <__divmodsi4_neg2>
    48f0:	4e f4       	brtc	.+18     	; 0x4904 <__divmodsi4_exit>
    48f2:	0c 94 c4 27 	jmp	0x4f88	; 0x4f88 <__negsi2>

000048f6 <__divmodsi4_neg2>:
    48f6:	50 95       	com	r21
    48f8:	40 95       	com	r20
    48fa:	30 95       	com	r19
    48fc:	21 95       	neg	r18
    48fe:	3f 4f       	sbci	r19, 0xFF	; 255
    4900:	4f 4f       	sbci	r20, 0xFF	; 255
    4902:	5f 4f       	sbci	r21, 0xFF	; 255

00004904 <__divmodsi4_exit>:
    4904:	08 95       	ret

Disassembly of section .text.libgcc.div:

00004f88 <__negsi2>:
    4f88:	90 95       	com	r25
    4f8a:	80 95       	com	r24
    4f8c:	70 95       	com	r23
    4f8e:	61 95       	neg	r22
    4f90:	7f 4f       	sbci	r23, 0xFF	; 255
    4f92:	8f 4f       	sbci	r24, 0xFF	; 255
    4f94:	9f 4f       	sbci	r25, 0xFF	; 255
    4f96:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00004de4 <__umulhisi3>:
    4de4:	a2 9f       	mul	r26, r18
    4de6:	b0 01       	movw	r22, r0
    4de8:	b3 9f       	mul	r27, r19
    4dea:	c0 01       	movw	r24, r0
    4dec:	a3 9f       	mul	r26, r19
    4dee:	70 0d       	add	r23, r0
    4df0:	81 1d       	adc	r24, r1
    4df2:	11 24       	eor	r1, r1
    4df4:	91 1d       	adc	r25, r1
    4df6:	b2 9f       	mul	r27, r18
    4df8:	70 0d       	add	r23, r0
    4dfa:	81 1d       	adc	r24, r1
    4dfc:	11 24       	eor	r1, r1
    4dfe:	91 1d       	adc	r25, r1
    4e00:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00004fe2 <__usmulhisi3>:
    4fe2:	0e 94 f2 26 	call	0x4de4	; 0x4de4 <__umulhisi3>

00004fe6 <__usmulhisi3_tail>:
    4fe6:	b7 ff       	sbrs	r27, 7
    4fe8:	08 95       	ret
    4fea:	82 1b       	sub	r24, r18
    4fec:	93 0b       	sbc	r25, r19
    4fee:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00004eca <__muluhisi3>:
    4eca:	0e 94 f2 26 	call	0x4de4	; 0x4de4 <__umulhisi3>
    4ece:	a5 9f       	mul	r26, r21
    4ed0:	90 0d       	add	r25, r0
    4ed2:	b4 9f       	mul	r27, r20
    4ed4:	90 0d       	add	r25, r0
    4ed6:	a4 9f       	mul	r26, r20
    4ed8:	80 0d       	add	r24, r0
    4eda:	91 1d       	adc	r25, r1
    4edc:	11 24       	eor	r1, r1
    4ede:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00004f98 <__mulshisi3>:
    4f98:	b7 ff       	sbrs	r27, 7
    4f9a:	0c 94 65 27 	jmp	0x4eca	; 0x4eca <__muluhisi3>

00004f9e <__mulohisi3>:
    4f9e:	0e 94 65 27 	call	0x4eca	; 0x4eca <__muluhisi3>
    4fa2:	82 1b       	sub	r24, r18
    4fa4:	93 0b       	sbc	r25, r19
    4fa6:	08 95       	ret

Disassembly of section .text.libgcc:

00004fa8 <__xload_2>:
    4fa8:	57 fd       	sbrc	r21, 7
    4faa:	03 c0       	rjmp	.+6      	; 0x4fb2 <__xload_2+0xa>
    4fac:	65 91       	lpm	r22, Z+
    4fae:	75 91       	lpm	r23, Z+
    4fb0:	08 95       	ret
    4fb2:	61 91       	ld	r22, Z+
    4fb4:	71 91       	ld	r23, Z+
    4fb6:	08 95       	ret

Disassembly of section .text.libgcc:

00004e6e <__xload_4>:
    4e6e:	57 fd       	sbrc	r21, 7
    4e70:	05 c0       	rjmp	.+10     	; 0x4e7c <__xload_4+0xe>
    4e72:	65 91       	lpm	r22, Z+
    4e74:	75 91       	lpm	r23, Z+
    4e76:	85 91       	lpm	r24, Z+
    4e78:	95 91       	lpm	r25, Z+
    4e7a:	08 95       	ret
    4e7c:	61 91       	ld	r22, Z+
    4e7e:	71 91       	ld	r23, Z+
    4e80:	81 91       	ld	r24, Z+
    4e82:	91 91       	ld	r25, Z+
    4e84:	08 95       	ret

Disassembly of section .text.libgcc:

00004e86 <__adddi3_s8>:
    4e86:	00 24       	eor	r0, r0
    4e88:	a7 fd       	sbrc	r26, 7
    4e8a:	00 94       	com	r0
    4e8c:	2a 0f       	add	r18, r26
    4e8e:	30 1d       	adc	r19, r0
    4e90:	40 1d       	adc	r20, r0
    4e92:	50 1d       	adc	r21, r0
    4e94:	60 1d       	adc	r22, r0
    4e96:	70 1d       	adc	r23, r0
    4e98:	80 1d       	adc	r24, r0
    4e9a:	90 1d       	adc	r25, r0
    4e9c:	08 95       	ret

Disassembly of section .text.__dummy_fini:

00005040 <_fini>:
    5040:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00005042 <__funcs_on_exit>:
    5042:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00005044 <__simulator_exit>:
    5044:	08 95       	ret

Disassembly of section .text.exit:

00004ee0 <exit>:
    4ee0:	ec 01       	movw	r28, r24
    4ee2:	0e 94 21 28 	call	0x5042	; 0x5042 <__funcs_on_exit>
    4ee6:	0e 94 20 28 	call	0x5040	; 0x5040 <_fini>
    4eea:	ce 01       	movw	r24, r28
    4eec:	0e 94 22 28 	call	0x5044	; 0x5044 <__simulator_exit>
    4ef0:	ce 01       	movw	r24, r28
    4ef2:	0e 94 1d 28 	call	0x503a	; 0x503a <_Exit>

Disassembly of section .text.memcpy:

00004878 <memcpy>:
    4878:	cf 92       	push	r12
    487a:	df 92       	push	r13
    487c:	ef 92       	push	r14
    487e:	6a 01       	movw	r12, r20
    4880:	e6 2e       	mov	r14, r22
    4882:	dc 01       	movw	r26, r24
    4884:	28 0f       	add	r18, r24
    4886:	39 1f       	adc	r19, r25
    4888:	a2 17       	cp	r26, r18
    488a:	b3 07       	cpc	r27, r19
    488c:	51 f0       	breq	.+20     	; 0x48a2 <memcpy+0x2a>
    488e:	f6 01       	movw	r30, r12
    4890:	44 91       	lpm	r20, Z
    4892:	e7 fc       	sbrc	r14, 7
    4894:	40 81       	ld	r20, Z
    4896:	4d 93       	st	X+, r20
    4898:	4f ef       	ldi	r20, 0xFF	; 255
    489a:	c4 1a       	sub	r12, r20
    489c:	d4 0a       	sbc	r13, r20
    489e:	e4 0a       	sbc	r14, r20
    48a0:	f3 cf       	rjmp	.-26     	; 0x4888 <memcpy+0x10>
    48a2:	ef 90       	pop	r14
    48a4:	df 90       	pop	r13
    48a6:	cf 90       	pop	r12
    48a8:	08 95       	ret

Disassembly of section .text.memset:

00004f30 <memset>:
    4f30:	fc 01       	movw	r30, r24
    4f32:	48 0f       	add	r20, r24
    4f34:	59 1f       	adc	r21, r25
    4f36:	e4 17       	cp	r30, r20
    4f38:	f5 07       	cpc	r31, r21
    4f3a:	11 f0       	breq	.+4      	; 0x4f40 <memset+0x10>
    4f3c:	61 93       	st	Z+, r22
    4f3e:	fb cf       	rjmp	.-10     	; 0x4f36 <memset+0x6>
    4f40:	08 95       	ret

Disassembly of section .text.gmtime:

00005026 <gmtime>:
    5026:	44 e0       	ldi	r20, 0x04	; 4
    5028:	59 e0       	ldi	r21, 0x09	; 9
    502a:	0e 94 29 1f 	call	0x3e52	; 0x3e52 <__gmtime_r>
    502e:	08 95       	ret

Disassembly of section .text.__gmtime_r:

00003e52 <__gmtime_r>:
    3e52:	a0 e0       	ldi	r26, 0x00	; 0
    3e54:	b0 e0       	ldi	r27, 0x00	; 0
    3e56:	ef e2       	ldi	r30, 0x2F	; 47
    3e58:	ff e1       	ldi	r31, 0x1F	; 31
    3e5a:	0c 94 70 23 	jmp	0x46e0	; 0x46e0 <__prologue_saves__+0xc>
    3e5e:	ea 01       	movw	r28, r20
    3e60:	fb 01       	movw	r30, r22
    3e62:	58 2f       	mov	r21, r24
    3e64:	0e 94 37 27 	call	0x4e6e	; 0x4e6e <__xload_4>
    3e68:	4b 01       	movw	r8, r22
    3e6a:	5c 01       	movw	r10, r24
    3e6c:	c1 2c       	mov	r12, r1
    3e6e:	d1 2c       	mov	r13, r1
    3e70:	76 01       	movw	r14, r12
    3e72:	8e 01       	movw	r16, r28
    3e74:	9b 01       	movw	r18, r22
    3e76:	a5 01       	movw	r20, r10
    3e78:	60 e0       	ldi	r22, 0x00	; 0
    3e7a:	70 e0       	ldi	r23, 0x00	; 0
    3e7c:	80 e0       	ldi	r24, 0x00	; 0
    3e7e:	90 e0       	ldi	r25, 0x00	; 0
    3e80:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <__secs_to_tm>
    3e84:	97 ff       	sbrs	r25, 7
    3e86:	09 c0       	rjmp	.+18     	; 0x3e9a <__gmtime_r+0x48>
    3e88:	8f e4       	ldi	r24, 0x4F	; 79
    3e8a:	90 e0       	ldi	r25, 0x00	; 0
    3e8c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    3e90:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    3e94:	80 e0       	ldi	r24, 0x00	; 0
    3e96:	90 e0       	ldi	r25, 0x00	; 0
    3e98:	0d c0       	rjmp	.+26     	; 0x3eb4 <__gmtime_r+0x62>
    3e9a:	19 8a       	std	Y+17, r1	; 0x11
    3e9c:	18 8a       	std	Y+16, r1	; 0x10
    3e9e:	1a 8a       	std	Y+18, r1	; 0x12
    3ea0:	1b 8a       	std	Y+19, r1	; 0x13
    3ea2:	1c 8a       	std	Y+20, r1	; 0x14
    3ea4:	1d 8a       	std	Y+21, r1	; 0x15
    3ea6:	8f ea       	ldi	r24, 0xAF	; 175
    3ea8:	93 e0       	ldi	r25, 0x03	; 3
    3eaa:	a0 e0       	ldi	r26, 0x00	; 0
    3eac:	8e 8b       	std	Y+22, r24	; 0x16
    3eae:	9f 8b       	std	Y+23, r25	; 0x17
    3eb0:	a8 8f       	std	Y+24, r26	; 0x18
    3eb2:	ce 01       	movw	r24, r28
    3eb4:	cd b7       	in	r28, 0x3d	; 61
    3eb6:	de b7       	in	r29, 0x3e	; 62
    3eb8:	ec e0       	ldi	r30, 0x0C	; 12
    3eba:	0c 94 a7 23 	jmp	0x474e	; 0x474e <__epilogue_restores__+0xc>

Disassembly of section .text.mktime:

00003a62 <mktime>:
    3a62:	a9 e1       	ldi	r26, 0x19	; 25
    3a64:	b0 e0       	ldi	r27, 0x00	; 0
    3a66:	e7 e3       	ldi	r30, 0x37	; 55
    3a68:	fd e1       	ldi	r31, 0x1D	; 29
    3a6a:	0c 94 6c 23 	jmp	0x46d8	; 0x46d8 <__prologue_saves__+0x4>
    3a6e:	2c 01       	movw	r4, r24
    3a70:	bc 01       	movw	r22, r24
    3a72:	80 e8       	ldi	r24, 0x80	; 128
    3a74:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <__tm_to_secs>
    3a78:	39 01       	movw	r6, r18
    3a7a:	4a 01       	movw	r8, r20
    3a7c:	59 01       	movw	r10, r18
    3a7e:	6a 01       	movw	r12, r20
    3a80:	e1 2c       	mov	r14, r1
    3a82:	f1 2c       	mov	r15, r1
    3a84:	00 e0       	ldi	r16, 0x00	; 0
    3a86:	10 e0       	ldi	r17, 0x00	; 0
    3a88:	0e 94 b3 27 	call	0x4f66	; 0x4f66 <__cmpdi2>
    3a8c:	f9 f4       	brne	.+62     	; 0x3acc <mktime+0x6a>
    3a8e:	1a 8a       	std	Y+18, r1	; 0x12
    3a90:	19 8a       	std	Y+17, r1	; 0x11
    3a92:	1b 8a       	std	Y+19, r1	; 0x13
    3a94:	1c 8a       	std	Y+20, r1	; 0x14
    3a96:	1d 8a       	std	Y+21, r1	; 0x15
    3a98:	1e 8a       	std	Y+22, r1	; 0x16
    3a9a:	23 eb       	ldi	r18, 0xB3	; 179
    3a9c:	33 e0       	ldi	r19, 0x03	; 3
    3a9e:	40 e0       	ldi	r20, 0x00	; 0
    3aa0:	2f 8b       	std	Y+23, r18	; 0x17
    3aa2:	38 8f       	std	Y+24, r19	; 0x18
    3aa4:	49 8f       	std	Y+25, r20	; 0x19
    3aa6:	8e 01       	movw	r16, r28
    3aa8:	0f 5f       	subi	r16, 0xFF	; 255
    3aaa:	1f 4f       	sbci	r17, 0xFF	; 255
    3aac:	93 01       	movw	r18, r6
    3aae:	48 2d       	mov	r20, r8
    3ab0:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <__secs_to_tm>
    3ab4:	97 fd       	sbrc	r25, 7
    3ab6:	0a c0       	rjmp	.+20     	; 0x3acc <mktime+0x6a>
    3ab8:	89 e1       	ldi	r24, 0x19	; 25
    3aba:	f8 01       	movw	r30, r16
    3abc:	d2 01       	movw	r26, r4
    3abe:	01 90       	ld	r0, Z+
    3ac0:	0d 92       	st	X+, r0
    3ac2:	8a 95       	dec	r24
    3ac4:	e1 f7       	brne	.-8      	; 0x3abe <mktime+0x5c>
    3ac6:	b3 01       	movw	r22, r6
    3ac8:	c4 01       	movw	r24, r8
    3aca:	0a c0       	rjmp	.+20     	; 0x3ae0 <mktime+0x7e>
    3acc:	8f e4       	ldi	r24, 0x4F	; 79
    3ace:	90 e0       	ldi	r25, 0x00	; 0
    3ad0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    3ad4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    3ad8:	6f ef       	ldi	r22, 0xFF	; 255
    3ada:	7f ef       	ldi	r23, 0xFF	; 255
    3adc:	8f ef       	ldi	r24, 0xFF	; 255
    3ade:	9f ef       	ldi	r25, 0xFF	; 255
    3ae0:	69 96       	adiw	r28, 0x19	; 25
    3ae2:	e0 e1       	ldi	r30, 0x10	; 16
    3ae4:	0c 94 a3 23 	jmp	0x4746	; 0x4746 <__epilogue_restores__+0x4>

Disassembly of section .text._Exit:

0000503a <_Exit>:
    503a:	0e 94 6b 00 	call	0xd6	; 0xd6 <_exit>

Disassembly of section .text.__tm_to_secs:

00001cd8 <__tm_to_secs>:
    1cd8:	a5 e0       	ldi	r26, 0x05	; 5
    1cda:	b0 e0       	ldi	r27, 0x00	; 0
    1cdc:	e2 e7       	ldi	r30, 0x72	; 114
    1cde:	fe e0       	ldi	r31, 0x0E	; 14
    1ce0:	0c 94 6a 23 	jmp	0x46d4	; 0x46d4 <__prologue_saves__>
    1ce4:	3b 01       	movw	r6, r22
    1ce6:	88 2e       	mov	r8, r24
    1ce8:	a8 2f       	mov	r26, r24
    1cea:	cb 01       	movw	r24, r22
    1cec:	0a 96       	adiw	r24, 0x0a	; 10
    1cee:	a1 1d       	adc	r26, r1
    1cf0:	fc 01       	movw	r30, r24
    1cf2:	5a 2f       	mov	r21, r26
    1cf4:	0e 94 d4 27 	call	0x4fa8	; 0x4fa8 <__xload_2>
    1cf8:	5b 01       	movw	r10, r22
    1cfa:	9b 01       	movw	r18, r22
    1cfc:	9b 2c       	mov	r9, r11
    1cfe:	99 0c       	add	r9, r9
    1d00:	99 08       	sbc	r9, r9
    1d02:	f9 2c       	mov	r15, r9
    1d04:	b9 2d       	mov	r27, r9
    1d06:	a9 2d       	mov	r26, r9
    1d08:	89 2d       	mov	r24, r9
    1d0a:	99 2d       	mov	r25, r9
    1d0c:	e8 2c       	mov	r14, r8
    1d0e:	63 01       	movw	r12, r6
    1d10:	48 e0       	ldi	r20, 0x08	; 8
    1d12:	c4 0e       	add	r12, r20
    1d14:	d1 1c       	adc	r13, r1
    1d16:	e1 1c       	adc	r14, r1
    1d18:	f6 01       	movw	r30, r12
    1d1a:	5e 2d       	mov	r21, r14
    1d1c:	0e 94 d4 27 	call	0x4fa8	; 0x4fa8 <__xload_2>
    1d20:	2b 01       	movw	r4, r22
    1d22:	6c 30       	cpi	r22, 0x0C	; 12
    1d24:	71 05       	cpc	r23, r1
    1d26:	10 f1       	brcs	.+68     	; 0x1d6c <__tm_to_secs+0x94>
    1d28:	cb 01       	movw	r24, r22
    1d2a:	6c e0       	ldi	r22, 0x0C	; 12
    1d2c:	70 e0       	ldi	r23, 0x00	; 0
    1d2e:	0e 94 42 25 	call	0x4a84	; 0x4a84 <__divmodhi4>
    1d32:	2c 01       	movw	r4, r24
    1d34:	97 ff       	sbrs	r25, 7
    1d36:	05 c0       	rjmp	.+10     	; 0x1d42 <__tm_to_secs+0x6a>
    1d38:	61 50       	subi	r22, 0x01	; 1
    1d3a:	71 09       	sbc	r23, r1
    1d3c:	8c e0       	ldi	r24, 0x0C	; 12
    1d3e:	48 0e       	add	r4, r24
    1d40:	51 1c       	adc	r5, r1
    1d42:	97 2f       	mov	r25, r23
    1d44:	99 0f       	add	r25, r25
    1d46:	99 0b       	sbc	r25, r25
    1d48:	9b 01       	movw	r18, r22
    1d4a:	49 2f       	mov	r20, r25
    1d4c:	59 2f       	mov	r21, r25
    1d4e:	69 2f       	mov	r22, r25
    1d50:	79 2f       	mov	r23, r25
    1d52:	89 2f       	mov	r24, r25
    1d54:	c9 2c       	mov	r12, r9
    1d56:	d9 2c       	mov	r13, r9
    1d58:	e9 2c       	mov	r14, r9
    1d5a:	f9 2c       	mov	r15, r9
    1d5c:	09 2d       	mov	r16, r9
    1d5e:	19 2d       	mov	r17, r9
    1d60:	0e 94 aa 27 	call	0x4f54	; 0x4f54 <__adddi3>
    1d64:	94 2e       	mov	r9, r20
    1d66:	f5 2e       	mov	r15, r21
    1d68:	b6 2f       	mov	r27, r22
    1d6a:	a7 2f       	mov	r26, r23
    1d6c:	8e 01       	movw	r16, r28
    1d6e:	0f 5f       	subi	r16, 0xFF	; 255
    1d70:	1f 4f       	sbci	r17, 0xFF	; 255
    1d72:	49 2d       	mov	r20, r9
    1d74:	5f 2d       	mov	r21, r15
    1d76:	6b 2f       	mov	r22, r27
    1d78:	7a 2f       	mov	r23, r26
    1d7a:	0e 94 18 0a 	call	0x1430	; 0x1430 <__year_to_secs>
    1d7e:	59 01       	movw	r10, r18
    1d80:	6a 01       	movw	r12, r20
    1d82:	7b 01       	movw	r14, r22
    1d84:	8c 01       	movw	r16, r24
    1d86:	69 81       	ldd	r22, Y+1	; 0x01
    1d88:	7a 81       	ldd	r23, Y+2	; 0x02
    1d8a:	c2 01       	movw	r24, r4
    1d8c:	0e 94 2f 23 	call	0x465e	; 0x465e <__month_to_secs>
    1d90:	1b 01       	movw	r2, r22
    1d92:	2c 01       	movw	r4, r24
    1d94:	55 0c       	add	r5, r5
    1d96:	22 08       	sbc	r2, r2
    1d98:	32 2c       	mov	r3, r2
    1d9a:	21 01       	movw	r4, r2
    1d9c:	9b 01       	movw	r18, r22
    1d9e:	ac 01       	movw	r20, r24
    1da0:	62 2d       	mov	r22, r2
    1da2:	72 2d       	mov	r23, r2
    1da4:	82 2d       	mov	r24, r2
    1da6:	92 2d       	mov	r25, r2
    1da8:	0e 94 aa 27 	call	0x4f54	; 0x4f54 <__adddi3>
    1dac:	19 01       	movw	r2, r18
    1dae:	2a 01       	movw	r4, r20
    1db0:	96 2e       	mov	r9, r22
    1db2:	7b 83       	std	Y+3, r23	; 0x03
    1db4:	8c 83       	std	Y+4, r24	; 0x04
    1db6:	9d 83       	std	Y+5, r25	; 0x05
    1db8:	a8 2d       	mov	r26, r8
    1dba:	c3 01       	movw	r24, r6
    1dbc:	06 96       	adiw	r24, 0x06	; 6
    1dbe:	a1 1d       	adc	r26, r1
    1dc0:	fc 01       	movw	r30, r24
    1dc2:	5a 2f       	mov	r21, r26
    1dc4:	0e 94 d4 27 	call	0x4fa8	; 0x4fa8 <__xload_2>
    1dc8:	61 50       	subi	r22, 0x01	; 1
    1dca:	71 09       	sbc	r23, r1
    1dcc:	97 2f       	mov	r25, r23
    1dce:	99 0f       	add	r25, r25
    1dd0:	99 0b       	sbc	r25, r25
    1dd2:	30 e8       	ldi	r19, 0x80	; 128
    1dd4:	a3 2e       	mov	r10, r19
    1dd6:	41 e5       	ldi	r20, 0x51	; 81
    1dd8:	b4 2e       	mov	r11, r20
    1dda:	cc 24       	eor	r12, r12
    1ddc:	c3 94       	inc	r12
    1dde:	d1 2c       	mov	r13, r1
    1de0:	e1 2c       	mov	r14, r1
    1de2:	f1 2c       	mov	r15, r1
    1de4:	00 e0       	ldi	r16, 0x00	; 0
    1de6:	10 e0       	ldi	r17, 0x00	; 0
    1de8:	9b 01       	movw	r18, r22
    1dea:	49 2f       	mov	r20, r25
    1dec:	59 2f       	mov	r21, r25
    1dee:	69 2f       	mov	r22, r25
    1df0:	79 2f       	mov	r23, r25
    1df2:	89 2f       	mov	r24, r25
    1df4:	0e 94 38 1b 	call	0x3670	; 0x3670 <__muldi3>
    1df8:	51 01       	movw	r10, r2
    1dfa:	62 01       	movw	r12, r4
    1dfc:	e9 2c       	mov	r14, r9
    1dfe:	fb 80       	ldd	r15, Y+3	; 0x03
    1e00:	0c 81       	ldd	r16, Y+4	; 0x04
    1e02:	1d 81       	ldd	r17, Y+5	; 0x05
    1e04:	0e 94 aa 27 	call	0x4f54	; 0x4f54 <__adddi3>
    1e08:	59 01       	movw	r10, r18
    1e0a:	6a 01       	movw	r12, r20
    1e0c:	7b 01       	movw	r14, r22
    1e0e:	8c 01       	movw	r16, r24
    1e10:	a8 2d       	mov	r26, r8
    1e12:	c3 01       	movw	r24, r6
    1e14:	04 96       	adiw	r24, 0x04	; 4
    1e16:	a1 1d       	adc	r26, r1
    1e18:	fc 01       	movw	r30, r24
    1e1a:	5a 2f       	mov	r21, r26
    1e1c:	0e 94 d4 27 	call	0x4fa8	; 0x4fa8 <__xload_2>
    1e20:	07 2e       	mov	r0, r23
    1e22:	00 0c       	add	r0, r0
    1e24:	88 0b       	sbc	r24, r24
    1e26:	99 0b       	sbc	r25, r25
    1e28:	20 e1       	ldi	r18, 0x10	; 16
    1e2a:	3e e0       	ldi	r19, 0x0E	; 14
    1e2c:	40 e0       	ldi	r20, 0x00	; 0
    1e2e:	50 e0       	ldi	r21, 0x00	; 0
    1e30:	0e 94 01 27 	call	0x4e02	; 0x4e02 <__mulsidi3>
    1e34:	0e 94 aa 27 	call	0x4f54	; 0x4f54 <__adddi3>
    1e38:	59 01       	movw	r10, r18
    1e3a:	6a 01       	movw	r12, r20
    1e3c:	7b 01       	movw	r14, r22
    1e3e:	8c 01       	movw	r16, r24
    1e40:	a8 2d       	mov	r26, r8
    1e42:	c3 01       	movw	r24, r6
    1e44:	02 96       	adiw	r24, 0x02	; 2
    1e46:	a1 1d       	adc	r26, r1
    1e48:	fc 01       	movw	r30, r24
    1e4a:	5a 2f       	mov	r21, r26
    1e4c:	0e 94 d4 27 	call	0x4fa8	; 0x4fa8 <__xload_2>
    1e50:	07 2e       	mov	r0, r23
    1e52:	00 0c       	add	r0, r0
    1e54:	88 0b       	sbc	r24, r24
    1e56:	99 0b       	sbc	r25, r25
    1e58:	2c e3       	ldi	r18, 0x3C	; 60
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	40 e0       	ldi	r20, 0x00	; 0
    1e5e:	50 e0       	ldi	r21, 0x00	; 0
    1e60:	0e 94 01 27 	call	0x4e02	; 0x4e02 <__mulsidi3>
    1e64:	0e 94 aa 27 	call	0x4f54	; 0x4f54 <__adddi3>
    1e68:	59 01       	movw	r10, r18
    1e6a:	6a 01       	movw	r12, r20
    1e6c:	7b 01       	movw	r14, r22
    1e6e:	8c 01       	movw	r16, r24
    1e70:	f3 01       	movw	r30, r6
    1e72:	58 2d       	mov	r21, r8
    1e74:	0e 94 d4 27 	call	0x4fa8	; 0x4fa8 <__xload_2>
    1e78:	9b 01       	movw	r18, r22
    1e7a:	93 2f       	mov	r25, r19
    1e7c:	99 0f       	add	r25, r25
    1e7e:	99 0b       	sbc	r25, r25
    1e80:	49 2f       	mov	r20, r25
    1e82:	59 2f       	mov	r21, r25
    1e84:	69 2f       	mov	r22, r25
    1e86:	79 2f       	mov	r23, r25
    1e88:	89 2f       	mov	r24, r25
    1e8a:	0e 94 aa 27 	call	0x4f54	; 0x4f54 <__adddi3>
    1e8e:	25 96       	adiw	r28, 0x05	; 5
    1e90:	e2 e1       	ldi	r30, 0x12	; 18
    1e92:	0c 94 a1 23 	jmp	0x4742	; 0x4742 <__epilogue_restores__>

Disassembly of section .text.__year_to_secs:

00001430 <__year_to_secs>:
    1430:	ac e0       	ldi	r26, 0x0C	; 12
    1432:	b0 e0       	ldi	r27, 0x00	; 0
    1434:	ee e1       	ldi	r30, 0x1E	; 30
    1436:	fa e0       	ldi	r31, 0x0A	; 10
    1438:	0c 94 6a 23 	jmp	0x46d4	; 0x46d4 <__prologue_saves__>
    143c:	49 01       	movw	r8, r18
    143e:	5a 01       	movw	r10, r20
    1440:	6b 01       	movw	r12, r22
    1442:	7c 01       	movw	r14, r24
    1444:	1c 83       	std	Y+4, r17	; 0x04
    1446:	0b 83       	std	Y+3, r16	; 0x03
    1448:	2a 38       	cpi	r18, 0x8A	; 138
    144a:	31 05       	cpc	r19, r1
    144c:	41 05       	cpc	r20, r1
    144e:	51 05       	cpc	r21, r1
    1450:	61 05       	cpc	r22, r1
    1452:	71 05       	cpc	r23, r1
    1454:	81 05       	cpc	r24, r1
    1456:	91 05       	cpc	r25, r1
    1458:	11 f0       	breq	.+4      	; 0x145e <__year_to_secs+0x2e>
    145a:	0c f0       	brlt	.+2      	; 0x145e <__year_to_secs+0x2e>
    145c:	42 c0       	rjmp	.+132    	; 0x14e2 <__year_to_secs+0xb2>
    145e:	f9 01       	movw	r30, r18
    1460:	e4 54       	subi	r30, 0x44	; 68
    1462:	f1 09       	sbc	r31, r1
    1464:	f5 95       	asr	r31
    1466:	e7 95       	ror	r30
    1468:	f5 95       	asr	r31
    146a:	e7 95       	ror	r30
    146c:	c9 01       	movw	r24, r18
    146e:	83 70       	andi	r24, 0x03	; 3
    1470:	99 27       	eor	r25, r25
    1472:	89 2b       	or	r24, r25
    1474:	51 f4       	brne	.+20     	; 0x148a <__year_to_secs+0x5a>
    1476:	31 97       	sbiw	r30, 0x01	; 1
    1478:	01 15       	cp	r16, r1
    147a:	11 05       	cpc	r17, r1
    147c:	69 f0       	breq	.+26     	; 0x1498 <__year_to_secs+0x68>
    147e:	81 e0       	ldi	r24, 0x01	; 1
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	d8 01       	movw	r26, r16
    1484:	8d 93       	st	X+, r24
    1486:	9c 93       	st	X, r25
    1488:	07 c0       	rjmp	.+14     	; 0x1498 <__year_to_secs+0x68>
    148a:	8b 81       	ldd	r24, Y+3	; 0x03
    148c:	9c 81       	ldd	r25, Y+4	; 0x04
    148e:	00 97       	sbiw	r24, 0x00	; 0
    1490:	19 f0       	breq	.+6      	; 0x1498 <__year_to_secs+0x68>
    1492:	dc 01       	movw	r26, r24
    1494:	1d 92       	st	X+, r1
    1496:	1c 92       	st	X, r1
    1498:	d9 01       	movw	r26, r18
    149a:	a6 54       	subi	r26, 0x46	; 70
    149c:	b1 09       	sbc	r27, r1
    149e:	20 e8       	ldi	r18, 0x80	; 128
    14a0:	33 e3       	ldi	r19, 0x33	; 51
    14a2:	41 ee       	ldi	r20, 0xE1	; 225
    14a4:	51 e0       	ldi	r21, 0x01	; 1
    14a6:	0e 94 cc 27 	call	0x4f98	; 0x4f98 <__mulshisi3>
    14aa:	6b 01       	movw	r12, r22
    14ac:	7c 01       	movw	r14, r24
    14ae:	df 01       	movw	r26, r30
    14b0:	20 e8       	ldi	r18, 0x80	; 128
    14b2:	31 e5       	ldi	r19, 0x51	; 81
    14b4:	41 e0       	ldi	r20, 0x01	; 1
    14b6:	50 e0       	ldi	r21, 0x00	; 0
    14b8:	0e 94 cc 27 	call	0x4f98	; 0x4f98 <__mulshisi3>
    14bc:	dc 01       	movw	r26, r24
    14be:	cb 01       	movw	r24, r22
    14c0:	8c 0d       	add	r24, r12
    14c2:	9d 1d       	adc	r25, r13
    14c4:	ae 1d       	adc	r26, r14
    14c6:	bf 1d       	adc	r27, r15
    14c8:	9c 01       	movw	r18, r24
    14ca:	ad 01       	movw	r20, r26
    14cc:	6c 01       	movw	r12, r24
    14ce:	7d 01       	movw	r14, r26
    14d0:	ff 0c       	add	r15, r15
    14d2:	cc 08       	sbc	r12, r12
    14d4:	dc 2c       	mov	r13, r12
    14d6:	76 01       	movw	r14, r12
    14d8:	ac 2d       	mov	r26, r12
    14da:	fc 2d       	mov	r31, r12
    14dc:	ec 2d       	mov	r30, r12
    14de:	9c 2d       	mov	r25, r12
    14e0:	cb c0       	rjmp	.+406    	; 0x1678 <__year_to_secs+0x248>
    14e2:	eb 81       	ldd	r30, Y+3	; 0x03
    14e4:	fc 81       	ldd	r31, Y+4	; 0x04
    14e6:	ef 2b       	or	r30, r31
    14e8:	31 f4       	brne	.+12     	; 0x14f6 <__year_to_secs+0xc6>
    14ea:	1a 82       	std	Y+2, r1	; 0x02
    14ec:	19 82       	std	Y+1, r1	; 0x01
    14ee:	ce 01       	movw	r24, r28
    14f0:	01 96       	adiw	r24, 0x01	; 1
    14f2:	9c 83       	std	Y+4, r25	; 0x04
    14f4:	8b 83       	std	Y+3, r24	; 0x03
    14f6:	c4 01       	movw	r24, r8
    14f8:	84 56       	subi	r24, 0x64	; 100
    14fa:	91 09       	sbc	r25, r1
    14fc:	60 e9       	ldi	r22, 0x90	; 144
    14fe:	71 e0       	ldi	r23, 0x01	; 1
    1500:	0e 94 42 25 	call	0x4a84	; 0x4a84 <__divmodhi4>
    1504:	7e 83       	std	Y+6, r23	; 0x06
    1506:	6d 83       	std	Y+5, r22	; 0x05
    1508:	94 01       	movw	r18, r8
    150a:	a5 01       	movw	r20, r10
    150c:	b6 01       	movw	r22, r12
    150e:	c7 01       	movw	r24, r14
    1510:	ac e9       	ldi	r26, 0x9C	; 156
    1512:	0e 94 43 27 	call	0x4e86	; 0x4e86 <__adddi3_s8>
    1516:	19 01       	movw	r2, r18
    1518:	2a 01       	movw	r4, r20
    151a:	3b 01       	movw	r6, r22
    151c:	8f 83       	std	Y+7, r24	; 0x07
    151e:	98 87       	std	Y+8, r25	; 0x08
    1520:	70 e9       	ldi	r23, 0x90	; 144
    1522:	a7 2e       	mov	r10, r23
    1524:	bb 24       	eor	r11, r11
    1526:	b3 94       	inc	r11
    1528:	c1 2c       	mov	r12, r1
    152a:	d1 2c       	mov	r13, r1
    152c:	e1 2c       	mov	r14, r1
    152e:	f1 2c       	mov	r15, r1
    1530:	00 e0       	ldi	r16, 0x00	; 0
    1532:	10 e0       	ldi	r17, 0x00	; 0
    1534:	91 01       	movw	r18, r2
    1536:	a2 01       	movw	r20, r4
    1538:	b3 01       	movw	r22, r6
    153a:	0e 94 2c 20 	call	0x4058	; 0x4058 <__moddi3>
    153e:	c9 01       	movw	r24, r18
    1540:	00 97       	sbiw	r24, 0x00	; 0
    1542:	59 f4       	brne	.+22     	; 0x155a <__year_to_secs+0x12a>
    1544:	81 e0       	ldi	r24, 0x01	; 1
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	ab 81       	ldd	r26, Y+3	; 0x03
    154a:	bc 81       	ldd	r27, Y+4	; 0x04
    154c:	8d 93       	st	X+, r24
    154e:	9c 93       	st	X, r25
    1550:	20 e0       	ldi	r18, 0x00	; 0
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	40 e0       	ldi	r20, 0x00	; 0
    1556:	50 e0       	ldi	r21, 0x00	; 0
    1558:	33 c0       	rjmp	.+102    	; 0x15c0 <__year_to_secs+0x190>
    155a:	28 3c       	cpi	r18, 0xC8	; 200
    155c:	31 05       	cpc	r19, r1
    155e:	6c f0       	brlt	.+26     	; 0x157a <__year_to_secs+0x14a>
    1560:	2c 32       	cpi	r18, 0x2C	; 44
    1562:	31 40       	sbci	r19, 0x01	; 1
    1564:	2c f0       	brlt	.+10     	; 0x1570 <__year_to_secs+0x140>
    1566:	8c 52       	subi	r24, 0x2C	; 44
    1568:	91 40       	sbci	r25, 0x01	; 1
    156a:	43 e0       	ldi	r20, 0x03	; 3
    156c:	50 e0       	ldi	r21, 0x00	; 0
    156e:	0c c0       	rjmp	.+24     	; 0x1588 <__year_to_secs+0x158>
    1570:	88 5c       	subi	r24, 0xC8	; 200
    1572:	91 09       	sbc	r25, r1
    1574:	42 e0       	ldi	r20, 0x02	; 2
    1576:	50 e0       	ldi	r21, 0x00	; 0
    1578:	07 c0       	rjmp	.+14     	; 0x1588 <__year_to_secs+0x158>
    157a:	24 36       	cpi	r18, 0x64	; 100
    157c:	31 05       	cpc	r19, r1
    157e:	6c f0       	brlt	.+26     	; 0x159a <__year_to_secs+0x16a>
    1580:	84 56       	subi	r24, 0x64	; 100
    1582:	91 09       	sbc	r25, r1
    1584:	41 e0       	ldi	r20, 0x01	; 1
    1586:	50 e0       	ldi	r21, 0x00	; 0
    1588:	00 97       	sbiw	r24, 0x00	; 0
    158a:	49 f4       	brne	.+18     	; 0x159e <__year_to_secs+0x16e>
    158c:	eb 81       	ldd	r30, Y+3	; 0x03
    158e:	fc 81       	ldd	r31, Y+4	; 0x04
    1590:	11 82       	std	Z+1, r1	; 0x01
    1592:	10 82       	st	Z, r1
    1594:	20 e0       	ldi	r18, 0x00	; 0
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	13 c0       	rjmp	.+38     	; 0x15c0 <__year_to_secs+0x190>
    159a:	40 e0       	ldi	r20, 0x00	; 0
    159c:	50 e0       	ldi	r21, 0x00	; 0
    159e:	9c 01       	movw	r18, r24
    15a0:	36 95       	lsr	r19
    15a2:	27 95       	ror	r18
    15a4:	36 95       	lsr	r19
    15a6:	27 95       	ror	r18
    15a8:	83 70       	andi	r24, 0x03	; 3
    15aa:	99 27       	eor	r25, r25
    15ac:	61 e0       	ldi	r22, 0x01	; 1
    15ae:	70 e0       	ldi	r23, 0x00	; 0
    15b0:	89 2b       	or	r24, r25
    15b2:	11 f0       	breq	.+4      	; 0x15b8 <__year_to_secs+0x188>
    15b4:	60 e0       	ldi	r22, 0x00	; 0
    15b6:	70 e0       	ldi	r23, 0x00	; 0
    15b8:	ab 81       	ldd	r26, Y+3	; 0x03
    15ba:	bc 81       	ldd	r27, Y+4	; 0x04
    15bc:	6d 93       	st	X+, r22
    15be:	7c 93       	st	X, r23
    15c0:	81 e6       	ldi	r24, 0x61	; 97
    15c2:	ed 81       	ldd	r30, Y+5	; 0x05
    15c4:	fe 81       	ldd	r31, Y+6	; 0x06
    15c6:	8e 9f       	mul	r24, r30
    15c8:	b0 01       	movw	r22, r0
    15ca:	8f 9f       	mul	r24, r31
    15cc:	70 0d       	add	r23, r0
    15ce:	11 24       	eor	r1, r1
    15d0:	e8 e1       	ldi	r30, 0x18	; 24
    15d2:	e4 9f       	mul	r30, r20
    15d4:	c0 01       	movw	r24, r0
    15d6:	e5 9f       	mul	r30, r21
    15d8:	90 0d       	add	r25, r0
    15da:	11 24       	eor	r1, r1
    15dc:	86 0f       	add	r24, r22
    15de:	97 1f       	adc	r25, r23
    15e0:	ab 81       	ldd	r26, Y+3	; 0x03
    15e2:	bc 81       	ldd	r27, Y+4	; 0x04
    15e4:	4d 91       	ld	r20, X+
    15e6:	5c 91       	ld	r21, X
    15e8:	84 1b       	sub	r24, r20
    15ea:	95 0b       	sbc	r25, r21
    15ec:	82 0f       	add	r24, r18
    15ee:	93 1f       	adc	r25, r19
    15f0:	e9 2f       	mov	r30, r25
    15f2:	ee 0f       	add	r30, r30
    15f4:	ee 0b       	sbc	r30, r30
    15f6:	20 e8       	ldi	r18, 0x80	; 128
    15f8:	a2 2e       	mov	r10, r18
    15fa:	31 e5       	ldi	r19, 0x51	; 81
    15fc:	b3 2e       	mov	r11, r19
    15fe:	cc 24       	eor	r12, r12
    1600:	c3 94       	inc	r12
    1602:	d1 2c       	mov	r13, r1
    1604:	e1 2c       	mov	r14, r1
    1606:	f1 2c       	mov	r15, r1
    1608:	00 e0       	ldi	r16, 0x00	; 0
    160a:	10 e0       	ldi	r17, 0x00	; 0
    160c:	9c 01       	movw	r18, r24
    160e:	4e 2f       	mov	r20, r30
    1610:	5e 2f       	mov	r21, r30
    1612:	6e 2f       	mov	r22, r30
    1614:	7e 2f       	mov	r23, r30
    1616:	8e 2f       	mov	r24, r30
    1618:	9e 2f       	mov	r25, r30
    161a:	0e 94 38 1b 	call	0x3670	; 0x3670 <__muldi3>
    161e:	92 2e       	mov	r9, r18
    1620:	83 2e       	mov	r8, r19
    1622:	4b 83       	std	Y+3, r20	; 0x03
    1624:	5d 83       	std	Y+5, r21	; 0x05
    1626:	69 87       	std	Y+9, r22	; 0x09
    1628:	7a 87       	std	Y+10, r23	; 0x0a
    162a:	8b 87       	std	Y+11, r24	; 0x0b
    162c:	9c 87       	std	Y+12, r25	; 0x0c
    162e:	43 e3       	ldi	r20, 0x33	; 51
    1630:	b4 2e       	mov	r11, r20
    1632:	51 ee       	ldi	r21, 0xE1	; 225
    1634:	c5 2e       	mov	r12, r21
    1636:	dd 24       	eor	r13, r13
    1638:	d3 94       	inc	r13
    163a:	91 01       	movw	r18, r2
    163c:	a2 01       	movw	r20, r4
    163e:	b3 01       	movw	r22, r6
    1640:	8f 81       	ldd	r24, Y+7	; 0x07
    1642:	98 85       	ldd	r25, Y+8	; 0x08
    1644:	0e 94 38 1b 	call	0x3670	; 0x3670 <__muldi3>
    1648:	59 01       	movw	r10, r18
    164a:	6a 01       	movw	r12, r20
    164c:	7b 01       	movw	r14, r22
    164e:	8c 01       	movw	r16, r24
    1650:	29 2d       	mov	r18, r9
    1652:	38 2d       	mov	r19, r8
    1654:	4b 81       	ldd	r20, Y+3	; 0x03
    1656:	5d 81       	ldd	r21, Y+5	; 0x05
    1658:	69 85       	ldd	r22, Y+9	; 0x09
    165a:	7a 85       	ldd	r23, Y+10	; 0x0a
    165c:	8b 85       	ldd	r24, Y+11	; 0x0b
    165e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1660:	0e 94 aa 27 	call	0x4f54	; 0x4f54 <__adddi3>
    1664:	3b 56       	subi	r19, 0x6B	; 107
    1666:	41 49       	sbci	r20, 0x91	; 145
    1668:	57 4c       	sbci	r21, 0xC7	; 199
    166a:	6f 4f       	sbci	r22, 0xFF	; 255
    166c:	7f 4f       	sbci	r23, 0xFF	; 255
    166e:	8f 4f       	sbci	r24, 0xFF	; 255
    1670:	9f 4f       	sbci	r25, 0xFF	; 255
    1672:	a6 2f       	mov	r26, r22
    1674:	f7 2f       	mov	r31, r23
    1676:	e8 2f       	mov	r30, r24
    1678:	6a 2f       	mov	r22, r26
    167a:	7f 2f       	mov	r23, r31
    167c:	8e 2f       	mov	r24, r30
    167e:	2c 96       	adiw	r28, 0x0c	; 12
    1680:	e2 e1       	ldi	r30, 0x12	; 18
    1682:	0c 94 a1 23 	jmp	0x4742	; 0x4742 <__epilogue_restores__>

Disassembly of section .text.__month_to_secs:

0000465e <__month_to_secs>:
    465e:	cf 93       	push	r28
    4660:	df 93       	push	r29
    4662:	9c 01       	movw	r18, r24
    4664:	eb 01       	movw	r28, r22
    4666:	88 0f       	add	r24, r24
    4668:	99 1f       	adc	r25, r25
    466a:	88 0f       	add	r24, r24
    466c:	99 1f       	adc	r25, r25
    466e:	09 2e       	mov	r0, r25
    4670:	00 0c       	add	r0, r0
    4672:	aa 0b       	sbc	r26, r26
    4674:	85 58       	subi	r24, 0x85	; 133
    4676:	9d 4f       	sbci	r25, 0xFD	; 253
    4678:	af 4f       	sbci	r26, 0xFF	; 255
    467a:	fc 01       	movw	r30, r24
    467c:	5a 2f       	mov	r21, r26
    467e:	0e 94 37 27 	call	0x4e6e	; 0x4e6e <__xload_4>
    4682:	cd 2b       	or	r28, r29
    4684:	39 f0       	breq	.+14     	; 0x4694 <__month_to_secs+0x36>
    4686:	22 30       	cpi	r18, 0x02	; 2
    4688:	31 05       	cpc	r19, r1
    468a:	24 f0       	brlt	.+8      	; 0x4694 <__month_to_secs+0x36>
    468c:	60 58       	subi	r22, 0x80	; 128
    468e:	7e 4a       	sbci	r23, 0xAE	; 174
    4690:	8e 4f       	sbci	r24, 0xFE	; 254
    4692:	9f 4f       	sbci	r25, 0xFF	; 255
    4694:	df 91       	pop	r29
    4696:	cf 91       	pop	r28
    4698:	08 95       	ret

Disassembly of section .text.__secs_to_tm:

000003b8 <__secs_to_tm>:
 3b8:	a6 e1       	ldi	r26, 0x16	; 22
 3ba:	b0 e0       	ldi	r27, 0x00	; 0
 3bc:	e2 ee       	ldi	r30, 0xE2	; 226
 3be:	f1 e0       	ldi	r31, 0x01	; 1
 3c0:	0c 94 6a 23 	jmp	0x46d4	; 0x46d4 <__prologue_saves__>
 3c4:	79 01       	movw	r14, r18
 3c6:	d4 2e       	mov	r13, r20
 3c8:	c5 2e       	mov	r12, r21
 3ca:	b6 2f       	mov	r27, r22
 3cc:	a7 2f       	mov	r26, r23
 3ce:	f8 2f       	mov	r31, r24
 3d0:	b9 2e       	mov	r11, r25
 3d2:	40 58       	subi	r20, 0x80	; 128
 3d4:	5d 4b       	sbci	r21, 0xBD	; 189
 3d6:	6e 40       	sbci	r22, 0x0E	; 14
 3d8:	7f 4f       	sbci	r23, 0xFF	; 255
 3da:	8f 4f       	sbci	r24, 0xFF	; 255
 3dc:	9f 4f       	sbci	r25, 0xFF	; 255
 3de:	21 15       	cp	r18, r1
 3e0:	3b 47       	sbci	r19, 0x7B	; 123
 3e2:	4d 41       	sbci	r20, 0x1D	; 29
 3e4:	53 48       	sbci	r21, 0x83	; 131
 3e6:	62 4e       	sbci	r22, 0xE2	; 226
 3e8:	71 40       	sbci	r23, 0x01	; 1
 3ea:	81 05       	cpc	r24, r1
 3ec:	91 05       	cpc	r25, r1
 3ee:	11 f0       	breq	.+4      	; 0x3f4 <__secs_to_tm+0x3c>
 3f0:	08 f0       	brcs	.+2      	; 0x3f4 <__secs_to_tm+0x3c>
 3f2:	08 c2       	rjmp	.+1040   	; 0x804 <__EEPROM_REGION_LENGTH__+0x4>
 3f4:	18 8b       	std	Y+16, r17	; 0x10
 3f6:	0f 87       	std	Y+15, r16	; 0x0f
 3f8:	9b 2d       	mov	r25, r11
 3fa:	8f 2f       	mov	r24, r31
 3fc:	7a 2f       	mov	r23, r26
 3fe:	6b 2f       	mov	r22, r27
 400:	5c 2d       	mov	r21, r12
 402:	4d 2d       	mov	r20, r13
 404:	97 01       	movw	r18, r14
 406:	20 58       	subi	r18, 0x80	; 128
 408:	3d 45       	sbci	r19, 0x5D	; 93
 40a:	4c 4b       	sbci	r20, 0xBC	; 188
 40c:	58 43       	sbci	r21, 0x38	; 56
 40e:	61 09       	sbc	r22, r1
 410:	71 09       	sbc	r23, r1
 412:	81 09       	sbc	r24, r1
 414:	91 09       	sbc	r25, r1
 416:	19 01       	movw	r2, r18
 418:	4d 83       	std	Y+5, r20	; 0x05
 41a:	59 87       	std	Y+9, r21	; 0x09
 41c:	6d 87       	std	Y+13, r22	; 0x0d
 41e:	79 83       	std	Y+1, r23	; 0x01
 420:	89 8b       	std	Y+17, r24	; 0x11
 422:	9a 8b       	std	Y+18, r25	; 0x12
 424:	f0 e8       	ldi	r31, 0x80	; 128
 426:	af 2e       	mov	r10, r31
 428:	a1 e5       	ldi	r26, 0x51	; 81
 42a:	ba 2e       	mov	r11, r26
 42c:	cc 24       	eor	r12, r12
 42e:	c3 94       	inc	r12
 430:	d1 2c       	mov	r13, r1
 432:	e1 2c       	mov	r14, r1
 434:	f1 2c       	mov	r15, r1
 436:	00 e0       	ldi	r16, 0x00	; 0
 438:	10 e0       	ldi	r17, 0x00	; 0
 43a:	0e 94 2e 20 	call	0x405c	; 0x405c <__divdi3>
 43e:	29 01       	movw	r4, r18
 440:	3a 01       	movw	r6, r20
 442:	4b 01       	movw	r8, r22
 444:	8e 8b       	std	Y+22, r24	; 0x16
 446:	9b 8b       	std	Y+19, r25	; 0x13
 448:	91 01       	movw	r18, r2
 44a:	4d 81       	ldd	r20, Y+5	; 0x05
 44c:	59 85       	ldd	r21, Y+9	; 0x09
 44e:	6d 85       	ldd	r22, Y+13	; 0x0d
 450:	79 81       	ldd	r23, Y+1	; 0x01
 452:	89 89       	ldd	r24, Y+17	; 0x11
 454:	9a 89       	ldd	r25, Y+18	; 0x12
 456:	0e 94 2c 20 	call	0x4058	; 0x4058 <__moddi3>
 45a:	2d 83       	std	Y+5, r18	; 0x05
 45c:	3e 83       	std	Y+6, r19	; 0x06
 45e:	4f 83       	std	Y+7, r20	; 0x07
 460:	58 87       	std	Y+8, r21	; 0x08
 462:	8d 81       	ldd	r24, Y+5	; 0x05
 464:	9e 81       	ldd	r25, Y+6	; 0x06
 466:	af 81       	ldd	r26, Y+7	; 0x07
 468:	b8 85       	ldd	r27, Y+8	; 0x08
 46a:	b7 ff       	sbrs	r27, 7
 46c:	15 c0       	rjmp	.+42     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
 46e:	80 58       	subi	r24, 0x80	; 128
 470:	9e 4a       	sbci	r25, 0xAE	; 174
 472:	ae 4f       	sbci	r26, 0xFE	; 254
 474:	bf 4f       	sbci	r27, 0xFF	; 255
 476:	8d 83       	std	Y+5, r24	; 0x05
 478:	9e 83       	std	Y+6, r25	; 0x06
 47a:	af 83       	std	Y+7, r26	; 0x07
 47c:	b8 87       	std	Y+8, r27	; 0x08
 47e:	92 01       	movw	r18, r4
 480:	a3 01       	movw	r20, r6
 482:	b4 01       	movw	r22, r8
 484:	8e 89       	ldd	r24, Y+22	; 0x16
 486:	9b 89       	ldd	r25, Y+19	; 0x13
 488:	af ef       	ldi	r26, 0xFF	; 255
 48a:	0e 94 43 27 	call	0x4e86	; 0x4e86 <__adddi3_s8>
 48e:	29 01       	movw	r4, r18
 490:	3a 01       	movw	r6, r20
 492:	4b 01       	movw	r8, r22
 494:	8e 8b       	std	Y+22, r24	; 0x16
 496:	9b 8b       	std	Y+19, r25	; 0x13
 498:	92 01       	movw	r18, r4
 49a:	a3 01       	movw	r20, r6
 49c:	b4 01       	movw	r22, r8
 49e:	8e 89       	ldd	r24, Y+22	; 0x16
 4a0:	9b 89       	ldd	r25, Y+19	; 0x13
 4a2:	a3 e0       	ldi	r26, 0x03	; 3
 4a4:	0e 94 43 27 	call	0x4e86	; 0x4e86 <__adddi3_s8>
 4a8:	e7 e0       	ldi	r30, 0x07	; 7
 4aa:	ae 2e       	mov	r10, r30
 4ac:	b1 2c       	mov	r11, r1
 4ae:	c1 2c       	mov	r12, r1
 4b0:	d1 2c       	mov	r13, r1
 4b2:	e1 2c       	mov	r14, r1
 4b4:	f1 2c       	mov	r15, r1
 4b6:	00 e0       	ldi	r16, 0x00	; 0
 4b8:	10 e0       	ldi	r17, 0x00	; 0
 4ba:	0e 94 2c 20 	call	0x4058	; 0x4058 <__moddi3>
 4be:	2d 87       	std	Y+13, r18	; 0x0d
 4c0:	3e 87       	std	Y+14, r19	; 0x0e
 4c2:	ad 85       	ldd	r26, Y+13	; 0x0d
 4c4:	be 85       	ldd	r27, Y+14	; 0x0e
 4c6:	b7 ff       	sbrs	r27, 7
 4c8:	03 c0       	rjmp	.+6      	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
 4ca:	17 96       	adiw	r26, 0x07	; 7
 4cc:	be 87       	std	Y+14, r27	; 0x0e
 4ce:	ad 87       	std	Y+13, r26	; 0x0d
 4d0:	51 eb       	ldi	r21, 0xB1	; 177
 4d2:	a5 2e       	mov	r10, r21
 4d4:	6a e3       	ldi	r22, 0x3A	; 58
 4d6:	b6 2e       	mov	r11, r22
 4d8:	72 e0       	ldi	r23, 0x02	; 2
 4da:	c7 2e       	mov	r12, r23
 4dc:	d1 2c       	mov	r13, r1
 4de:	e1 2c       	mov	r14, r1
 4e0:	f1 2c       	mov	r15, r1
 4e2:	00 e0       	ldi	r16, 0x00	; 0
 4e4:	10 e0       	ldi	r17, 0x00	; 0
 4e6:	92 01       	movw	r18, r4
 4e8:	a3 01       	movw	r20, r6
 4ea:	b4 01       	movw	r22, r8
 4ec:	8e 89       	ldd	r24, Y+22	; 0x16
 4ee:	9b 89       	ldd	r25, Y+19	; 0x13
 4f0:	0e 94 2e 20 	call	0x405c	; 0x405c <__divdi3>
 4f4:	29 87       	std	Y+9, r18	; 0x09
 4f6:	3a 87       	std	Y+10, r19	; 0x0a
 4f8:	4b 87       	std	Y+11, r20	; 0x0b
 4fa:	5c 87       	std	Y+12, r21	; 0x0c
 4fc:	92 01       	movw	r18, r4
 4fe:	a3 01       	movw	r20, r6
 500:	b4 01       	movw	r22, r8
 502:	8e 89       	ldd	r24, Y+22	; 0x16
 504:	9b 89       	ldd	r25, Y+19	; 0x13
 506:	0e 94 2c 20 	call	0x4058	; 0x4058 <__moddi3>
 50a:	82 2e       	mov	r8, r18
 50c:	93 2e       	mov	r9, r19
 50e:	a4 2e       	mov	r10, r20
 510:	b5 2e       	mov	r11, r21
 512:	b7 fe       	sbrs	r11, 7
 514:	12 c0       	rjmp	.+36     	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
 516:	b1 eb       	ldi	r27, 0xB1	; 177
 518:	8b 0e       	add	r8, r27
 51a:	ba e3       	ldi	r27, 0x3A	; 58
 51c:	9b 1e       	adc	r9, r27
 51e:	b2 e0       	ldi	r27, 0x02	; 2
 520:	ab 1e       	adc	r10, r27
 522:	b1 1c       	adc	r11, r1
 524:	89 85       	ldd	r24, Y+9	; 0x09
 526:	9a 85       	ldd	r25, Y+10	; 0x0a
 528:	ab 85       	ldd	r26, Y+11	; 0x0b
 52a:	bc 85       	ldd	r27, Y+12	; 0x0c
 52c:	01 97       	sbiw	r24, 0x01	; 1
 52e:	a1 09       	sbc	r26, r1
 530:	b1 09       	sbc	r27, r1
 532:	89 87       	std	Y+9, r24	; 0x09
 534:	9a 87       	std	Y+10, r25	; 0x0a
 536:	ab 87       	std	Y+11, r26	; 0x0b
 538:	bc 87       	std	Y+12, r27	; 0x0c
 53a:	c5 01       	movw	r24, r10
 53c:	b4 01       	movw	r22, r8
 53e:	2c ea       	ldi	r18, 0xAC	; 172
 540:	3e e8       	ldi	r19, 0x8E	; 142
 542:	40 e0       	ldi	r20, 0x00	; 0
 544:	50 e0       	ldi	r21, 0x00	; 0
 546:	0e 94 6c 24 	call	0x48d8	; 0x48d8 <__divmodsi4>
 54a:	69 01       	movw	r12, r18
 54c:	7a 01       	movw	r14, r20
 54e:	24 30       	cpi	r18, 0x04	; 4
 550:	31 05       	cpc	r19, r1
 552:	41 05       	cpc	r20, r1
 554:	51 05       	cpc	r21, r1
 556:	29 f4       	brne	.+10     	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
 558:	43 e0       	ldi	r20, 0x03	; 3
 55a:	c4 2e       	mov	r12, r20
 55c:	d1 2c       	mov	r13, r1
 55e:	e1 2c       	mov	r14, r1
 560:	f1 2c       	mov	r15, r1
 562:	a4 e5       	ldi	r26, 0x54	; 84
 564:	b1 e7       	ldi	r27, 0x71	; 113
 566:	a7 01       	movw	r20, r14
 568:	96 01       	movw	r18, r12
 56a:	0e 94 cf 27 	call	0x4f9e	; 0x4f9e <__mulohisi3>
 56e:	2b 01       	movw	r4, r22
 570:	3c 01       	movw	r6, r24
 572:	48 0c       	add	r4, r8
 574:	59 1c       	adc	r5, r9
 576:	6a 1c       	adc	r6, r10
 578:	7b 1c       	adc	r7, r11
 57a:	c3 01       	movw	r24, r6
 57c:	b2 01       	movw	r22, r4
 57e:	25 eb       	ldi	r18, 0xB5	; 181
 580:	35 e0       	ldi	r19, 0x05	; 5
 582:	40 e0       	ldi	r20, 0x00	; 0
 584:	50 e0       	ldi	r21, 0x00	; 0
 586:	0e 94 6c 24 	call	0x48d8	; 0x48d8 <__divmodsi4>
 58a:	49 01       	movw	r8, r18
 58c:	5a 01       	movw	r10, r20
 58e:	29 31       	cpi	r18, 0x19	; 25
 590:	31 05       	cpc	r19, r1
 592:	41 05       	cpc	r20, r1
 594:	51 05       	cpc	r21, r1
 596:	29 f4       	brne	.+10     	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
 598:	38 e1       	ldi	r19, 0x18	; 24
 59a:	83 2e       	mov	r8, r19
 59c:	91 2c       	mov	r9, r1
 59e:	a1 2c       	mov	r10, r1
 5a0:	b1 2c       	mov	r11, r1
 5a2:	ab e4       	ldi	r26, 0x4B	; 75
 5a4:	ba ef       	ldi	r27, 0xFA	; 250
 5a6:	a5 01       	movw	r20, r10
 5a8:	94 01       	movw	r18, r8
 5aa:	0e 94 cf 27 	call	0x4f9e	; 0x4f9e <__mulohisi3>
 5ae:	46 0e       	add	r4, r22
 5b0:	57 1e       	adc	r5, r23
 5b2:	68 1e       	adc	r6, r24
 5b4:	79 1e       	adc	r7, r25
 5b6:	c3 01       	movw	r24, r6
 5b8:	b2 01       	movw	r22, r4
 5ba:	2d e6       	ldi	r18, 0x6D	; 109
 5bc:	31 e0       	ldi	r19, 0x01	; 1
 5be:	40 e0       	ldi	r20, 0x00	; 0
 5c0:	50 e0       	ldi	r21, 0x00	; 0
 5c2:	0e 94 6c 24 	call	0x48d8	; 0x48d8 <__divmodsi4>
 5c6:	29 83       	std	Y+1, r18	; 0x01
 5c8:	3a 83       	std	Y+2, r19	; 0x02
 5ca:	4b 83       	std	Y+3, r20	; 0x03
 5cc:	5c 83       	std	Y+4, r21	; 0x04
 5ce:	24 30       	cpi	r18, 0x04	; 4
 5d0:	31 05       	cpc	r19, r1
 5d2:	41 05       	cpc	r20, r1
 5d4:	51 05       	cpc	r21, r1
 5d6:	41 f4       	brne	.+16     	; 0x5e8 <__LOCK_REGION_LENGTH__+0x1e8>
 5d8:	83 e0       	ldi	r24, 0x03	; 3
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	a0 e0       	ldi	r26, 0x00	; 0
 5de:	b0 e0       	ldi	r27, 0x00	; 0
 5e0:	89 83       	std	Y+1, r24	; 0x01
 5e2:	9a 83       	std	Y+2, r25	; 0x02
 5e4:	ab 83       	std	Y+3, r26	; 0x03
 5e6:	bc 83       	std	Y+4, r27	; 0x04
 5e8:	a3 e9       	ldi	r26, 0x93	; 147
 5ea:	be ef       	ldi	r27, 0xFE	; 254
 5ec:	29 81       	ldd	r18, Y+1	; 0x01
 5ee:	3a 81       	ldd	r19, Y+2	; 0x02
 5f0:	4b 81       	ldd	r20, Y+3	; 0x03
 5f2:	5c 81       	ldd	r21, Y+4	; 0x04
 5f4:	0e 94 cf 27 	call	0x4f9e	; 0x4f9e <__mulohisi3>
 5f8:	46 0e       	add	r4, r22
 5fa:	57 1e       	adc	r5, r23
 5fc:	68 1e       	adc	r6, r24
 5fe:	79 1e       	adc	r7, r25
 600:	23 2b       	or	r18, r19
 602:	24 2b       	or	r18, r20
 604:	25 2b       	or	r18, r21
 606:	81 f4       	brne	.+32     	; 0x628 <__LOCK_REGION_LENGTH__+0x228>
 608:	81 14       	cp	r8, r1
 60a:	91 04       	cpc	r9, r1
 60c:	a1 04       	cpc	r10, r1
 60e:	b1 04       	cpc	r11, r1
 610:	71 f4       	brne	.+28     	; 0x62e <__LOCK_REGION_LENGTH__+0x22e>
 612:	31 e0       	ldi	r19, 0x01	; 1
 614:	20 e0       	ldi	r18, 0x00	; 0
 616:	c1 14       	cp	r12, r1
 618:	d1 04       	cpc	r13, r1
 61a:	e1 04       	cpc	r14, r1
 61c:	f1 04       	cpc	r15, r1
 61e:	09 f0       	breq	.+2      	; 0x622 <__LOCK_REGION_LENGTH__+0x222>
 620:	30 e0       	ldi	r19, 0x00	; 0
 622:	83 2f       	mov	r24, r19
 624:	92 2f       	mov	r25, r18
 626:	05 c0       	rjmp	.+10     	; 0x632 <__LOCK_REGION_LENGTH__+0x232>
 628:	80 e0       	ldi	r24, 0x00	; 0
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	02 c0       	rjmp	.+4      	; 0x632 <__LOCK_REGION_LENGTH__+0x232>
 62e:	81 e0       	ldi	r24, 0x01	; 1
 630:	90 e0       	ldi	r25, 0x00	; 0
 632:	12 01       	movw	r2, r4
 634:	ab e3       	ldi	r26, 0x3B	; 59
 636:	2a 0e       	add	r2, r26
 638:	31 1c       	adc	r3, r1
 63a:	28 0e       	add	r2, r24
 63c:	39 1e       	adc	r3, r25
 63e:	9c 01       	movw	r18, r24
 640:	24 59       	subi	r18, 0x94	; 148
 642:	3e 4f       	sbci	r19, 0xFE	; 254
 644:	22 15       	cp	r18, r2
 646:	33 05       	cpc	r19, r3
 648:	24 f4       	brge	.+8      	; 0x652 <__LOCK_REGION_LENGTH__+0x252>
 64a:	83 59       	subi	r24, 0x93	; 147
 64c:	9e 4f       	sbci	r25, 0xFE	; 254
 64e:	28 1a       	sub	r2, r24
 650:	39 0a       	sbc	r3, r25
 652:	92 e0       	ldi	r25, 0x02	; 2
 654:	88 0c       	add	r8, r8
 656:	99 1c       	adc	r9, r9
 658:	aa 1c       	adc	r10, r10
 65a:	bb 1c       	adc	r11, r11
 65c:	9a 95       	dec	r25
 65e:	d1 f7       	brne	.-12     	; 0x654 <__LOCK_REGION_LENGTH__+0x254>
 660:	89 81       	ldd	r24, Y+1	; 0x01
 662:	9a 81       	ldd	r25, Y+2	; 0x02
 664:	ab 81       	ldd	r26, Y+3	; 0x03
 666:	bc 81       	ldd	r27, Y+4	; 0x04
 668:	88 0e       	add	r8, r24
 66a:	99 1e       	adc	r9, r25
 66c:	aa 1e       	adc	r10, r26
 66e:	bb 1e       	adc	r11, r27
 670:	a4 e6       	ldi	r26, 0x64	; 100
 672:	b0 e0       	ldi	r27, 0x00	; 0
 674:	a7 01       	movw	r20, r14
 676:	96 01       	movw	r18, r12
 678:	0e 94 65 27 	call	0x4eca	; 0x4eca <__muluhisi3>
 67c:	86 0e       	add	r8, r22
 67e:	97 1e       	adc	r9, r23
 680:	a8 1e       	adc	r10, r24
 682:	b9 1e       	adc	r11, r25
 684:	d5 01       	movw	r26, r10
 686:	c4 01       	movw	r24, r8
 688:	bb 0f       	add	r27, r27
 68a:	88 0b       	sbc	r24, r24
 68c:	98 2f       	mov	r25, r24
 68e:	dc 01       	movw	r26, r24
 690:	89 83       	std	Y+1, r24	; 0x01
 692:	9a 83       	std	Y+2, r25	; 0x02
 694:	ab 83       	std	Y+3, r26	; 0x03
 696:	bc 83       	std	Y+4, r27	; 0x04
 698:	69 85       	ldd	r22, Y+9	; 0x09
 69a:	7a 85       	ldd	r23, Y+10	; 0x0a
 69c:	8b 85       	ldd	r24, Y+11	; 0x0b
 69e:	9c 85       	ldd	r25, Y+12	; 0x0c
 6a0:	20 e9       	ldi	r18, 0x90	; 144
 6a2:	31 e0       	ldi	r19, 0x01	; 1
 6a4:	40 e0       	ldi	r20, 0x00	; 0
 6a6:	50 e0       	ldi	r21, 0x00	; 0
 6a8:	0e 94 01 27 	call	0x4e02	; 0x4e02 <__mulsidi3>
 6ac:	f2 2f       	mov	r31, r18
 6ae:	e3 2f       	mov	r30, r19
 6b0:	6a 01       	movw	r12, r20
 6b2:	7b 01       	movw	r14, r22
 6b4:	8c 01       	movw	r16, r24
 6b6:	94 01       	movw	r18, r8
 6b8:	a5 01       	movw	r20, r10
 6ba:	69 81       	ldd	r22, Y+1	; 0x01
 6bc:	76 2f       	mov	r23, r22
 6be:	86 2f       	mov	r24, r22
 6c0:	96 2f       	mov	r25, r22
 6c2:	af 2e       	mov	r10, r31
 6c4:	be 2e       	mov	r11, r30
 6c6:	0e 94 aa 27 	call	0x4f54	; 0x4f54 <__adddi3>
 6ca:	49 01       	movw	r8, r18
 6cc:	5a 01       	movw	r10, r20
 6ce:	6b 01       	movw	r12, r22
 6d0:	7c 01       	movw	r14, r24
 6d2:	25 e3       	ldi	r18, 0x35	; 53
 6d4:	33 e0       	ldi	r19, 0x03	; 3
 6d6:	40 e0       	ldi	r20, 0x00	; 0
 6d8:	1a 82       	std	Y+2, r1	; 0x02
 6da:	19 82       	std	Y+1, r1	; 0x01
 6dc:	f9 01       	movw	r30, r18
 6de:	84 91       	lpm	r24, Z
 6e0:	47 fd       	sbrc	r20, 7
 6e2:	80 81       	ld	r24, Z
 6e4:	08 2e       	mov	r0, r24
 6e6:	00 0c       	add	r0, r0
 6e8:	99 0b       	sbc	r25, r25
 6ea:	aa 0b       	sbc	r26, r26
 6ec:	bb 0b       	sbc	r27, r27
 6ee:	2f 5f       	subi	r18, 0xFF	; 255
 6f0:	3f 4f       	sbci	r19, 0xFF	; 255
 6f2:	4f 4f       	sbci	r20, 0xFF	; 255
 6f4:	48 16       	cp	r4, r24
 6f6:	59 06       	cpc	r5, r25
 6f8:	6a 06       	cpc	r6, r26
 6fa:	7b 06       	cpc	r7, r27
 6fc:	54 f0       	brlt	.+20     	; 0x712 <__LOCK_REGION_LENGTH__+0x312>
 6fe:	48 1a       	sub	r4, r24
 700:	59 0a       	sbc	r5, r25
 702:	6a 0a       	sbc	r6, r26
 704:	7b 0a       	sbc	r7, r27
 706:	a9 81       	ldd	r26, Y+1	; 0x01
 708:	ba 81       	ldd	r27, Y+2	; 0x02
 70a:	11 96       	adiw	r26, 0x01	; 1
 70c:	ba 83       	std	Y+2, r27	; 0x02
 70e:	a9 83       	std	Y+1, r26	; 0x01
 710:	e5 cf       	rjmp	.-54     	; 0x6dc <__LOCK_REGION_LENGTH__+0x2dc>
 712:	e9 81       	ldd	r30, Y+1	; 0x01
 714:	fa 81       	ldd	r31, Y+2	; 0x02
 716:	ea 30       	cpi	r30, 0x0A	; 10
 718:	f1 05       	cpc	r31, r1
 71a:	74 f0       	brlt	.+28     	; 0x738 <__LOCK_REGION_LENGTH__+0x338>
 71c:	3c 97       	sbiw	r30, 0x0c	; 12
 71e:	fa 83       	std	Y+2, r31	; 0x02
 720:	e9 83       	std	Y+1, r30	; 0x01
 722:	94 01       	movw	r18, r8
 724:	a5 01       	movw	r20, r10
 726:	b6 01       	movw	r22, r12
 728:	c7 01       	movw	r24, r14
 72a:	a1 e0       	ldi	r26, 0x01	; 1
 72c:	0e 94 43 27 	call	0x4e86	; 0x4e86 <__adddi3_s8>
 730:	49 01       	movw	r8, r18
 732:	5a 01       	movw	r10, r20
 734:	6b 01       	movw	r12, r22
 736:	7c 01       	movw	r14, r24
 738:	94 01       	movw	r18, r8
 73a:	a5 01       	movw	r20, r10
 73c:	b6 01       	movw	r22, r12
 73e:	c7 01       	movw	r24, r14
 740:	2c 59       	subi	r18, 0x9C	; 156
 742:	3f 47       	sbci	r19, 0x7F	; 127
 744:	4f 4f       	sbci	r20, 0xFF	; 255
 746:	5f 4f       	sbci	r21, 0xFF	; 255
 748:	6f 4f       	sbci	r22, 0xFF	; 255
 74a:	7f 4f       	sbci	r23, 0xFF	; 255
 74c:	8f 4f       	sbci	r24, 0xFF	; 255
 74e:	9f 4f       	sbci	r25, 0xFF	; 255
 750:	2f 3f       	cpi	r18, 0xFF	; 255
 752:	3f 4f       	sbci	r19, 0xFF	; 255
 754:	41 05       	cpc	r20, r1
 756:	51 05       	cpc	r21, r1
 758:	61 05       	cpc	r22, r1
 75a:	71 05       	cpc	r23, r1
 75c:	81 05       	cpc	r24, r1
 75e:	91 05       	cpc	r25, r1
 760:	11 f0       	breq	.+4      	; 0x766 <__LOCK_REGION_LENGTH__+0x366>
 762:	08 f0       	brcs	.+2      	; 0x766 <__LOCK_REGION_LENGTH__+0x366>
 764:	4f c0       	rjmp	.+158    	; 0x804 <__EEPROM_REGION_LENGTH__+0x4>
 766:	24 e6       	ldi	r18, 0x64	; 100
 768:	82 0e       	add	r8, r18
 76a:	91 1c       	adc	r9, r1
 76c:	af 85       	ldd	r26, Y+15	; 0x0f
 76e:	b8 89       	ldd	r27, Y+16	; 0x10
 770:	1b 96       	adiw	r26, 0x0b	; 11
 772:	9c 92       	st	X, r9
 774:	8e 92       	st	-X, r8
 776:	1a 97       	sbiw	r26, 0x0a	; 10
 778:	e9 81       	ldd	r30, Y+1	; 0x01
 77a:	fa 81       	ldd	r31, Y+2	; 0x02
 77c:	32 96       	adiw	r30, 0x02	; 2
 77e:	19 96       	adiw	r26, 0x09	; 9
 780:	fc 93       	st	X, r31
 782:	ee 93       	st	-X, r30
 784:	18 97       	sbiw	r26, 0x08	; 8
 786:	ff ef       	ldi	r31, 0xFF	; 255
 788:	4f 1a       	sub	r4, r31
 78a:	5f 0a       	sbc	r5, r31
 78c:	17 96       	adiw	r26, 0x07	; 7
 78e:	5c 92       	st	X, r5
 790:	4e 92       	st	-X, r4
 792:	16 97       	sbiw	r26, 0x06	; 6
 794:	8d 85       	ldd	r24, Y+13	; 0x0d
 796:	9e 85       	ldd	r25, Y+14	; 0x0e
 798:	1d 96       	adiw	r26, 0x0d	; 13
 79a:	9c 93       	st	X, r25
 79c:	8e 93       	st	-X, r24
 79e:	1c 97       	sbiw	r26, 0x0c	; 12
 7a0:	1f 96       	adiw	r26, 0x0f	; 15
 7a2:	3c 92       	st	X, r3
 7a4:	2e 92       	st	-X, r2
 7a6:	1e 97       	sbiw	r26, 0x0e	; 14
 7a8:	6d 81       	ldd	r22, Y+5	; 0x05
 7aa:	7e 81       	ldd	r23, Y+6	; 0x06
 7ac:	8f 81       	ldd	r24, Y+7	; 0x07
 7ae:	98 85       	ldd	r25, Y+8	; 0x08
 7b0:	20 e1       	ldi	r18, 0x10	; 16
 7b2:	3e e0       	ldi	r19, 0x0E	; 14
 7b4:	40 e0       	ldi	r20, 0x00	; 0
 7b6:	50 e0       	ldi	r21, 0x00	; 0
 7b8:	0e 94 6c 24 	call	0x48d8	; 0x48d8 <__divmodsi4>
 7bc:	af 85       	ldd	r26, Y+15	; 0x0f
 7be:	b8 89       	ldd	r27, Y+16	; 0x10
 7c0:	15 96       	adiw	r26, 0x05	; 5
 7c2:	3c 93       	st	X, r19
 7c4:	2e 93       	st	-X, r18
 7c6:	14 97       	sbiw	r26, 0x04	; 4
 7c8:	8c e3       	ldi	r24, 0x3C	; 60
 7ca:	c8 2e       	mov	r12, r24
 7cc:	d1 2c       	mov	r13, r1
 7ce:	e1 2c       	mov	r14, r1
 7d0:	f1 2c       	mov	r15, r1
 7d2:	6d 81       	ldd	r22, Y+5	; 0x05
 7d4:	7e 81       	ldd	r23, Y+6	; 0x06
 7d6:	8f 81       	ldd	r24, Y+7	; 0x07
 7d8:	98 85       	ldd	r25, Y+8	; 0x08
 7da:	a7 01       	movw	r20, r14
 7dc:	96 01       	movw	r18, r12
 7de:	0e 94 6c 24 	call	0x48d8	; 0x48d8 <__divmodsi4>
 7e2:	4b 01       	movw	r8, r22
 7e4:	5c 01       	movw	r10, r24
 7e6:	ca 01       	movw	r24, r20
 7e8:	b9 01       	movw	r22, r18
 7ea:	a7 01       	movw	r20, r14
 7ec:	96 01       	movw	r18, r12
 7ee:	0e 94 6c 24 	call	0x48d8	; 0x48d8 <__divmodsi4>
 7f2:	ef 85       	ldd	r30, Y+15	; 0x0f
 7f4:	f8 89       	ldd	r31, Y+16	; 0x10
 7f6:	73 83       	std	Z+3, r23	; 0x03
 7f8:	62 83       	std	Z+2, r22	; 0x02
 7fa:	91 82       	std	Z+1, r9	; 0x01
 7fc:	80 82       	st	Z, r8
 7fe:	80 e0       	ldi	r24, 0x00	; 0
 800:	90 e0       	ldi	r25, 0x00	; 0
 802:	02 c0       	rjmp	.+4      	; 0x808 <__EEPROM_REGION_LENGTH__+0x8>
 804:	8f ef       	ldi	r24, 0xFF	; 255
 806:	9f ef       	ldi	r25, 0xFF	; 255
 808:	66 96       	adiw	r28, 0x16	; 22
 80a:	e2 e1       	ldi	r30, 0x12	; 18
 80c:	0c 94 a1 23 	jmp	0x4742	; 0x4742 <__epilogue_restores__>

Disassembly of section .text.libgcc.div:

00004a84 <__divmodhi4>:
    4a84:	97 fb       	bst	r25, 7
    4a86:	07 2e       	mov	r0, r23
    4a88:	16 f4       	brtc	.+4      	; 0x4a8e <__divmodhi4+0xa>
    4a8a:	00 94       	com	r0
    4a8c:	07 d0       	rcall	.+14     	; 0x4a9c <__divmodhi4_neg1>
    4a8e:	77 fd       	sbrc	r23, 7
    4a90:	09 d0       	rcall	.+18     	; 0x4aa4 <__divmodhi4_neg2>
    4a92:	0e 94 2e 25 	call	0x4a5c	; 0x4a5c <__udivmodhi4>
    4a96:	07 fc       	sbrc	r0, 7
    4a98:	05 d0       	rcall	.+10     	; 0x4aa4 <__divmodhi4_neg2>
    4a9a:	3e f4       	brtc	.+14     	; 0x4aaa <__divmodhi4_exit>

00004a9c <__divmodhi4_neg1>:
    4a9c:	90 95       	com	r25
    4a9e:	81 95       	neg	r24
    4aa0:	9f 4f       	sbci	r25, 0xFF	; 255
    4aa2:	08 95       	ret

00004aa4 <__divmodhi4_neg2>:
    4aa4:	70 95       	com	r23
    4aa6:	61 95       	neg	r22
    4aa8:	7f 4f       	sbci	r23, 0xFF	; 255

00004aaa <__divmodhi4_exit>:
    4aaa:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00003670 <__muldi3>:
    3670:	df 93       	push	r29
    3672:	cf 93       	push	r28
    3674:	1f 93       	push	r17
    3676:	0f 93       	push	r16
    3678:	9a 9d       	mul	r25, r10
    367a:	f0 2d       	mov	r31, r0
    367c:	21 9f       	mul	r18, r17
    367e:	f0 0d       	add	r31, r0
    3680:	8b 9d       	mul	r24, r11
    3682:	f0 0d       	add	r31, r0
    3684:	8a 9d       	mul	r24, r10
    3686:	e0 2d       	mov	r30, r0
    3688:	f1 0d       	add	r31, r1
    368a:	03 9f       	mul	r16, r19
    368c:	f0 0d       	add	r31, r0
    368e:	02 9f       	mul	r16, r18
    3690:	e0 0d       	add	r30, r0
    3692:	f1 1d       	adc	r31, r1
    3694:	4e 9d       	mul	r20, r14
    3696:	e0 0d       	add	r30, r0
    3698:	f1 1d       	adc	r31, r1
    369a:	5e 9d       	mul	r21, r14
    369c:	f0 0d       	add	r31, r0
    369e:	4f 9d       	mul	r20, r15
    36a0:	f0 0d       	add	r31, r0
    36a2:	7f 93       	push	r23
    36a4:	6f 93       	push	r22
    36a6:	bf 92       	push	r11
    36a8:	af 92       	push	r10
    36aa:	5f 93       	push	r21
    36ac:	4f 93       	push	r20
    36ae:	d5 01       	movw	r26, r10
    36b0:	0e 94 f2 26 	call	0x4de4	; 0x4de4 <__umulhisi3>
    36b4:	8b 01       	movw	r16, r22
    36b6:	ac 01       	movw	r20, r24
    36b8:	d7 01       	movw	r26, r14
    36ba:	0e 94 f2 26 	call	0x4de4	; 0x4de4 <__umulhisi3>
    36be:	eb 01       	movw	r28, r22
    36c0:	e8 0f       	add	r30, r24
    36c2:	f9 1f       	adc	r31, r25
    36c4:	d6 01       	movw	r26, r12
    36c6:	0e 94 a1 27 	call	0x4f42	; 0x4f42 <__muldi3_6>
    36ca:	2f 91       	pop	r18
    36cc:	3f 91       	pop	r19
    36ce:	d6 01       	movw	r26, r12
    36d0:	0e 94 f2 26 	call	0x4de4	; 0x4de4 <__umulhisi3>
    36d4:	c6 0f       	add	r28, r22
    36d6:	d7 1f       	adc	r29, r23
    36d8:	e8 1f       	adc	r30, r24
    36da:	f9 1f       	adc	r31, r25
    36dc:	af 91       	pop	r26
    36de:	bf 91       	pop	r27
    36e0:	0e 94 a1 27 	call	0x4f42	; 0x4f42 <__muldi3_6>
    36e4:	2f 91       	pop	r18
    36e6:	3f 91       	pop	r19
    36e8:	0e 94 f2 26 	call	0x4de4	; 0x4de4 <__umulhisi3>
    36ec:	c6 0f       	add	r28, r22
    36ee:	d7 1f       	adc	r29, r23
    36f0:	e8 1f       	adc	r30, r24
    36f2:	f9 1f       	adc	r31, r25
    36f4:	d6 01       	movw	r26, r12
    36f6:	0e 94 f2 26 	call	0x4de4	; 0x4de4 <__umulhisi3>
    36fa:	e6 0f       	add	r30, r22
    36fc:	f7 1f       	adc	r31, r23
    36fe:	98 01       	movw	r18, r16
    3700:	be 01       	movw	r22, r28
    3702:	cf 01       	movw	r24, r30
    3704:	11 24       	eor	r1, r1
    3706:	0f 91       	pop	r16
    3708:	1f 91       	pop	r17
    370a:	cf 91       	pop	r28
    370c:	df 91       	pop	r29
    370e:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00004f42 <__muldi3_6>:
    4f42:	0e 94 f2 26 	call	0x4de4	; 0x4de4 <__umulhisi3>
    4f46:	46 0f       	add	r20, r22
    4f48:	57 1f       	adc	r21, r23
    4f4a:	c8 1f       	adc	r28, r24
    4f4c:	d9 1f       	adc	r29, r25
    4f4e:	08 f4       	brcc	.+2      	; 0x4f52 <__muldi3_6+0x10>
    4f50:	31 96       	adiw	r30, 0x01	; 1
    4f52:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00004e02 <__mulsidi3>:
    4e02:	97 fb       	bst	r25, 7
    4e04:	57 ff       	sbrs	r21, 7
    4e06:	0c 94 69 21 	jmp	0x42d2	; 0x42d2 <__umulsidi3_helper>
    4e0a:	9f 93       	push	r25
    4e0c:	8f 93       	push	r24
    4e0e:	0e 94 69 21 	call	0x42d2	; 0x42d2 <__umulsidi3_helper>
    4e12:	6e 1b       	sub	r22, r30
    4e14:	7f 0b       	sbc	r23, r31
    4e16:	af 91       	pop	r26
    4e18:	bf 91       	pop	r27
    4e1a:	8a 0b       	sbc	r24, r26
    4e1c:	9b 0b       	sbc	r25, r27
    4e1e:	08 95       	ret

Disassembly of section .text.libgcc.mul:

000042d0 <__umulsidi3>:
    42d0:	e8 94       	clt

000042d2 <__umulsidi3_helper>:
    42d2:	df 93       	push	r29
    42d4:	cf 93       	push	r28
    42d6:	fc 01       	movw	r30, r24
    42d8:	db 01       	movw	r26, r22
    42da:	0e 94 f2 26 	call	0x4de4	; 0x4de4 <__umulhisi3>
    42de:	7f 93       	push	r23
    42e0:	6f 93       	push	r22
    42e2:	e9 01       	movw	r28, r18
    42e4:	9a 01       	movw	r18, r20
    42e6:	ac 01       	movw	r20, r24
    42e8:	bf 93       	push	r27
    42ea:	af 93       	push	r26
    42ec:	3f 93       	push	r19
    42ee:	2f 93       	push	r18
    42f0:	df 01       	movw	r26, r30
    42f2:	0e 94 f2 26 	call	0x4de4	; 0x4de4 <__umulhisi3>
    42f6:	26 f4       	brtc	.+8      	; 0x4300 <__umulsidi3_helper+0x2e>
    42f8:	6c 1b       	sub	r22, r28
    42fa:	7d 0b       	sbc	r23, r29
    42fc:	82 0b       	sbc	r24, r18
    42fe:	93 0b       	sbc	r25, r19
    4300:	9e 01       	movw	r18, r28
    4302:	eb 01       	movw	r28, r22
    4304:	fc 01       	movw	r30, r24
    4306:	0e 94 a1 27 	call	0x4f42	; 0x4f42 <__muldi3_6>
    430a:	af 91       	pop	r26
    430c:	bf 91       	pop	r27
    430e:	2f 91       	pop	r18
    4310:	3f 91       	pop	r19
    4312:	0e 94 a1 27 	call	0x4f42	; 0x4f42 <__muldi3_6>
    4316:	be 01       	movw	r22, r28
    4318:	cf 01       	movw	r24, r30
    431a:	f9 01       	movw	r30, r18
    431c:	2f 91       	pop	r18
    431e:	3f 91       	pop	r19
    4320:	cf 91       	pop	r28
    4322:	df 91       	pop	r29
    4324:	08 95       	ret

Disassembly of section .text.libgcc.div:

00004058 <__moddi3>:
    4058:	68 94       	set
    405a:	01 c0       	rjmp	.+2      	; 0x405e <__divdi3_moddi3>

0000405c <__divdi3>:
    405c:	e8 94       	clt

0000405e <__divdi3_moddi3>:
    405e:	f9 2f       	mov	r31, r25
    4060:	f1 2b       	or	r31, r17
    4062:	12 f0       	brmi	.+4      	; 0x4068 <__divdi3_moddi3+0xa>
    4064:	0c 94 13 27 	jmp	0x4e26	; 0x4e26 <__udivdi3_umoddi3>
    4068:	a0 e0       	ldi	r26, 0x00	; 0
    406a:	b0 e0       	ldi	r27, 0x00	; 0
    406c:	ea e3       	ldi	r30, 0x3A	; 58
    406e:	f0 e2       	ldi	r31, 0x20	; 32
    4070:	0c 94 70 23 	jmp	0x46e0	; 0x46e0 <__prologue_saves__+0xc>
    4074:	09 2e       	mov	r0, r25
    4076:	05 94       	asr	r0
    4078:	22 f4       	brpl	.+8      	; 0x4082 <__divdi3_moddi3+0x24>
    407a:	0e 94 e2 26 	call	0x4dc4	; 0x4dc4 <__negdi2>
    407e:	11 23       	and	r17, r17
    4080:	92 f4       	brpl	.+36     	; 0x40a6 <__divdi3_moddi3+0x48>
    4082:	f0 e8       	ldi	r31, 0x80	; 128
    4084:	0f 26       	eor	r0, r31
    4086:	ff ef       	ldi	r31, 0xFF	; 255
    4088:	e0 94       	com	r14
    408a:	f0 94       	com	r15
    408c:	00 95       	com	r16
    408e:	10 95       	com	r17
    4090:	b0 94       	com	r11
    4092:	c0 94       	com	r12
    4094:	d0 94       	com	r13
    4096:	a1 94       	neg	r10
    4098:	bf 0a       	sbc	r11, r31
    409a:	cf 0a       	sbc	r12, r31
    409c:	df 0a       	sbc	r13, r31
    409e:	ef 0a       	sbc	r14, r31
    40a0:	ff 0a       	sbc	r15, r31
    40a2:	0f 0b       	sbc	r16, r31
    40a4:	1f 0b       	sbc	r17, r31
    40a6:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <__udivmod64>
    40aa:	07 fc       	sbrc	r0, 7
    40ac:	0e 94 e2 26 	call	0x4dc4	; 0x4dc4 <__negdi2>
    40b0:	cd b7       	in	r28, 0x3d	; 61
    40b2:	de b7       	in	r29, 0x3e	; 62
    40b4:	ec e0       	ldi	r30, 0x0C	; 12
    40b6:	0c 94 a7 23 	jmp	0x474e	; 0x474e <__epilogue_restores__+0xc>

Disassembly of section .text.libgcc.div:

00004e20 <__umoddi3>:
    4e20:	68 94       	set
    4e22:	01 c0       	rjmp	.+2      	; 0x4e26 <__udivdi3_umoddi3>

00004e24 <__udivdi3>:
    4e24:	e8 94       	clt

00004e26 <__udivdi3_umoddi3>:
    4e26:	8f 92       	push	r8
    4e28:	9f 92       	push	r9
    4e2a:	cf 93       	push	r28
    4e2c:	df 93       	push	r29
    4e2e:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <__udivmod64>
    4e32:	df 91       	pop	r29
    4e34:	cf 91       	pop	r28
    4e36:	9f 90       	pop	r9
    4e38:	8f 90       	pop	r8
    4e3a:	08 95       	ret

Disassembly of section .text.libgcc.div:

000035ce <__udivmod64>:
    35ce:	88 24       	eor	r8, r8
    35d0:	99 24       	eor	r9, r9
    35d2:	f4 01       	movw	r30, r8
    35d4:	e4 01       	movw	r28, r8
    35d6:	b0 e4       	ldi	r27, 0x40	; 64
    35d8:	9f 93       	push	r25
    35da:	aa 27       	eor	r26, r26
    35dc:	9a 15       	cp	r25, r10
    35de:	8b 04       	cpc	r8, r11
    35e0:	9c 04       	cpc	r9, r12
    35e2:	ed 05       	cpc	r30, r13
    35e4:	fe 05       	cpc	r31, r14
    35e6:	cf 05       	cpc	r28, r15
    35e8:	d0 07       	cpc	r29, r16
    35ea:	a1 07       	cpc	r26, r17
    35ec:	98 f4       	brcc	.+38     	; 0x3614 <__udivmod64+0x46>
    35ee:	ad 2f       	mov	r26, r29
    35f0:	dc 2f       	mov	r29, r28
    35f2:	cf 2f       	mov	r28, r31
    35f4:	fe 2f       	mov	r31, r30
    35f6:	e9 2d       	mov	r30, r9
    35f8:	98 2c       	mov	r9, r8
    35fa:	89 2e       	mov	r8, r25
    35fc:	98 2f       	mov	r25, r24
    35fe:	87 2f       	mov	r24, r23
    3600:	76 2f       	mov	r23, r22
    3602:	65 2f       	mov	r22, r21
    3604:	54 2f       	mov	r21, r20
    3606:	43 2f       	mov	r20, r19
    3608:	32 2f       	mov	r19, r18
    360a:	22 27       	eor	r18, r18
    360c:	b8 50       	subi	r27, 0x08	; 8
    360e:	31 f7       	brne	.-52     	; 0x35dc <__udivmod64+0xe>
    3610:	bf 91       	pop	r27
    3612:	27 c0       	rjmp	.+78     	; 0x3662 <__udivmod64+0x94>
    3614:	1b 2e       	mov	r1, r27
    3616:	bf 91       	pop	r27
    3618:	bb 27       	eor	r27, r27
    361a:	22 0f       	add	r18, r18
    361c:	33 1f       	adc	r19, r19
    361e:	44 1f       	adc	r20, r20
    3620:	55 1f       	adc	r21, r21
    3622:	66 1f       	adc	r22, r22
    3624:	77 1f       	adc	r23, r23
    3626:	88 1f       	adc	r24, r24
    3628:	99 1f       	adc	r25, r25
    362a:	88 1c       	adc	r8, r8
    362c:	99 1c       	adc	r9, r9
    362e:	ee 1f       	adc	r30, r30
    3630:	ff 1f       	adc	r31, r31
    3632:	cc 1f       	adc	r28, r28
    3634:	dd 1f       	adc	r29, r29
    3636:	aa 1f       	adc	r26, r26
    3638:	bb 1f       	adc	r27, r27
    363a:	8a 14       	cp	r8, r10
    363c:	9b 04       	cpc	r9, r11
    363e:	ec 05       	cpc	r30, r12
    3640:	fd 05       	cpc	r31, r13
    3642:	ce 05       	cpc	r28, r14
    3644:	df 05       	cpc	r29, r15
    3646:	a0 07       	cpc	r26, r16
    3648:	b1 07       	cpc	r27, r17
    364a:	48 f0       	brcs	.+18     	; 0x365e <__udivmod64+0x90>
    364c:	8a 18       	sub	r8, r10
    364e:	9b 08       	sbc	r9, r11
    3650:	ec 09       	sbc	r30, r12
    3652:	fd 09       	sbc	r31, r13
    3654:	ce 09       	sbc	r28, r14
    3656:	df 09       	sbc	r29, r15
    3658:	a0 0b       	sbc	r26, r16
    365a:	b1 0b       	sbc	r27, r17
    365c:	21 60       	ori	r18, 0x01	; 1
    365e:	1a 94       	dec	r1
    3660:	e1 f6       	brne	.-72     	; 0x361a <__udivmod64+0x4c>
    3662:	2e f4       	brtc	.+10     	; 0x366e <__udivmod64+0xa0>
    3664:	94 01       	movw	r18, r8
    3666:	af 01       	movw	r20, r30
    3668:	be 01       	movw	r22, r28
    366a:	cd 01       	movw	r24, r26
    366c:	00 0c       	add	r0, r0
    366e:	08 95       	ret

Disassembly of section .text.libgcc:

00004dc4 <__negdi2>:
    4dc4:	60 95       	com	r22
    4dc6:	70 95       	com	r23
    4dc8:	80 95       	com	r24
    4dca:	90 95       	com	r25
    4dcc:	30 95       	com	r19
    4dce:	40 95       	com	r20
    4dd0:	50 95       	com	r21
    4dd2:	21 95       	neg	r18
    4dd4:	3f 4f       	sbci	r19, 0xFF	; 255
    4dd6:	4f 4f       	sbci	r20, 0xFF	; 255
    4dd8:	5f 4f       	sbci	r21, 0xFF	; 255
    4dda:	6f 4f       	sbci	r22, 0xFF	; 255
    4ddc:	7f 4f       	sbci	r23, 0xFF	; 255
    4dde:	8f 4f       	sbci	r24, 0xFF	; 255
    4de0:	9f 4f       	sbci	r25, 0xFF	; 255
    4de2:	08 95       	ret

Disassembly of section .text.libgcc.prologue:

000046d4 <__prologue_saves__>:
    46d4:	2f 92       	push	r2
    46d6:	3f 92       	push	r3
    46d8:	4f 92       	push	r4
    46da:	5f 92       	push	r5
    46dc:	6f 92       	push	r6
    46de:	7f 92       	push	r7
    46e0:	8f 92       	push	r8
    46e2:	9f 92       	push	r9
    46e4:	af 92       	push	r10
    46e6:	bf 92       	push	r11
    46e8:	cf 92       	push	r12
    46ea:	df 92       	push	r13
    46ec:	ef 92       	push	r14
    46ee:	ff 92       	push	r15
    46f0:	0f 93       	push	r16
    46f2:	1f 93       	push	r17
    46f4:	cf 93       	push	r28
    46f6:	df 93       	push	r29
    46f8:	cd b7       	in	r28, 0x3d	; 61
    46fa:	de b7       	in	r29, 0x3e	; 62
    46fc:	ca 1b       	sub	r28, r26
    46fe:	db 0b       	sbc	r29, r27
    4700:	0f b6       	in	r0, 0x3f	; 63
    4702:	f8 94       	cli
    4704:	de bf       	out	0x3e, r29	; 62
    4706:	0f be       	out	0x3f, r0	; 63
    4708:	cd bf       	out	0x3d, r28	; 61
    470a:	09 94       	ijmp

Disassembly of section .text.libgcc.prologue:

00004742 <__epilogue_restores__>:
    4742:	2a 88       	ldd	r2, Y+18	; 0x12
    4744:	39 88       	ldd	r3, Y+17	; 0x11
    4746:	48 88       	ldd	r4, Y+16	; 0x10
    4748:	5f 84       	ldd	r5, Y+15	; 0x0f
    474a:	6e 84       	ldd	r6, Y+14	; 0x0e
    474c:	7d 84       	ldd	r7, Y+13	; 0x0d
    474e:	8c 84       	ldd	r8, Y+12	; 0x0c
    4750:	9b 84       	ldd	r9, Y+11	; 0x0b
    4752:	aa 84       	ldd	r10, Y+10	; 0x0a
    4754:	b9 84       	ldd	r11, Y+9	; 0x09
    4756:	c8 84       	ldd	r12, Y+8	; 0x08
    4758:	df 80       	ldd	r13, Y+7	; 0x07
    475a:	ee 80       	ldd	r14, Y+6	; 0x06
    475c:	fd 80       	ldd	r15, Y+5	; 0x05
    475e:	0c 81       	ldd	r16, Y+4	; 0x04
    4760:	1b 81       	ldd	r17, Y+3	; 0x03
    4762:	aa 81       	ldd	r26, Y+2	; 0x02
    4764:	b9 81       	ldd	r27, Y+1	; 0x01
    4766:	ce 0f       	add	r28, r30
    4768:	d1 1d       	adc	r29, r1
    476a:	0f b6       	in	r0, 0x3f	; 63
    476c:	f8 94       	cli
    476e:	de bf       	out	0x3e, r29	; 62
    4770:	0f be       	out	0x3f, r0	; 63
    4772:	cd bf       	out	0x3d, r28	; 61
    4774:	ed 01       	movw	r28, r26
    4776:	08 95       	ret

Disassembly of section .text.libgcc:

00004f54 <__adddi3>:
    4f54:	2a 0d       	add	r18, r10
    4f56:	3b 1d       	adc	r19, r11
    4f58:	4c 1d       	adc	r20, r12
    4f5a:	5d 1d       	adc	r21, r13
    4f5c:	6e 1d       	adc	r22, r14
    4f5e:	7f 1d       	adc	r23, r15
    4f60:	80 1f       	adc	r24, r16
    4f62:	91 1f       	adc	r25, r17
    4f64:	08 95       	ret

Disassembly of section .text.libgcc:

00004f66 <__cmpdi2>:
    4f66:	2a 15       	cp	r18, r10
    4f68:	3b 05       	cpc	r19, r11
    4f6a:	4c 05       	cpc	r20, r12
    4f6c:	5d 05       	cpc	r21, r13
    4f6e:	6e 05       	cpc	r22, r14
    4f70:	7f 05       	cpc	r23, r15
    4f72:	80 07       	cpc	r24, r16
    4f74:	91 07       	cpc	r25, r17
    4f76:	08 95       	ret
