
ModuleCPU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00004ee2  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000da  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00004ee4  2**0
                  ALLOC
  3 .noinit       0000022a  00800102  00800102  00004ee4  2**2
                  ALLOC
  4 .comment      0000002f  00000000  00000000  00004ee2  2**0
                  CONTENTS, READONLY
  5 .stack.descriptors.hdr 00000142  00000000  00000000  00004f11  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000508  00000000  00000000  00005053  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00008dff  00000000  00000000  0000555b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001aa4  00000000  00000000  0000e35a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000037c3  00000000  00000000  0000fdfe  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001240  00000000  00000000  000135c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000700  00000000  00000000  00014804  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000490d  00000000  00000000  00014f04  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000004d0  00000000  00000000  00019811  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .text         00000004  00004e1e  00004e1e  00004ed2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00019ce4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .text.__vector_27 000000bc  0000316e  0000316e  00003222  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.ADCSetPowerOn 0000000c  00004dd8  00004dd8  00004e8c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.ADCStartConversion 0000002a  00004766  00004766  0000481a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .progmemx.data 0000000b  00000341  00000341  000003f5  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 20 .text.ADCInit 0000013c  000022bc  000022bc  00002370  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .progmemx.data.sg_sMuxSelectList 0000000f  0000031a  0000031a  000003ce  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 22 .bss.sg_eCurrentType 00000001  0080094f  0080094f  00004ee4  2**0
                  ALLOC
 23 .bss.sg_eState 00000001  00800962  00800962  00004ee4  2**0
                  ALLOC
 24 .text.CANLookupCommand 00000062  00003e32  00003e32  00003ee6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .progmemx.data 0000000b  0000034c  0000034c  00000400  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 26 .text.CANMOBSet 00000212  00001a7c  00001a7c  00001b30  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.CANSendMessageInternal 00000178  00001fde  00001fde  00002092  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.CANMOBInterrupt 00000192  00001e4c  00001e4c  00001f00  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.__vector_18 00000118  0000252c  0000252c  000025e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.CANSendMessage 00000016  00004c70  00004c70  00004d24  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.CANSetRXCallback 0000000a  00004df0  00004df0  00004ea4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.CANInit 0000009c  000034d0  000034d0  00003584  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .progmemx.data.sg_sRXCommandList 00000021  000002d5  000002d5  00000389  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 34 .progmemx.data.sg_sMOBModuleRequestTime 00000008  00000357  00000357  0000040b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 35 .progmemx.data.sg_sMOBModuleHardwareDetail 00000008  0000035f  0000035f  00000413  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 36 .progmemx.data.sg_sMOBModuleCellDetail 00000008  00000367  00000367  0000041b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 37 .progmemx.data.sg_sMOBModuleCellCommStat2 00000008  0000036f  0000036f  00000423  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 38 .progmemx.data.sg_sMOBModuleCellCommStat1 00000008  00000377  00000377  0000042b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 39 .progmemx.data.sg_sMOBModuleStatus3 00000008  0000037f  0000037f  00000433  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 40 .progmemx.data.sg_sMOBModuleStatus2 00000008  00000387  00000387  0000043b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 41 .progmemx.data.sg_sMOBModuleStatus1 00000008  0000038f  0000038f  00000443  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 42 .progmemx.data.sg_sMOBModuleAnnouncement 00000008  00000397  00000397  0000044b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 43 .progmemx.data.sg_sMOBGenericReceive 00000008  0000039f  0000039f  00000453  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 44 .progmemx.data.sg_sMOBDisabled 00000008  000003a7  000003a7  0000045b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 45 .bss.sg_bInRetransmit 00000001  00800963  00800963  00004ee4  2**0
                  ALLOC
 46 .bss.sg_u8LastTXDataLen 00000001  00800964  00800964  00004ee4  2**0
                  ALLOC
 47 .bss.sg_u8LastTXData 00000008  0080093d  0080093d  00004ee4  2**0
                  ALLOC
 48 .bss.sg_eLastTXType 00000001  00800965  00800965  00004ee4  2**0
                  ALLOC
 49 .bss.sg_u8TransmitAttempts 00000001  00800966  00800966  00004ee4  2**0
                  ALLOC
 50 .bss.sg_pfRXCallback 00000002  0080094d  0080094d  00004ee4  2**0
                  ALLOC
 51 .bss.sg_bBusy 00000001  00800967  00800967  00004ee4  2**0
                  ALLOC
 52 .text.DebugOut 0000000e  00004da0  00004da0  00004e54  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 53 .text.EEPROMRead 00000012  00004d06  00004d06  00004dba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 .text.I2CBitDelay 0000000e  00004dae  00004dae  00004e62  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.I2CStart 0000002c  000046b6  000046b6  0000476a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.I2CStop 00000026  00004858  00004858  0000490c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .text.I2CUnstick 0000003c  00004406  00004406  000044ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .text.I2CTxByte 0000006a  00003cf8  00003cf8  00003dac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 .text.I2CRxByte 0000007a  00003b1e  00003b1e  00003bd2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 60 .text.I2CSetup 0000002c  000046e2  000046e2  00004796  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 61 .text.I2CStartTransaction 00000028  00004790  00004790  00004844  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 62 .text.CellCountExpectedSet 000000c4  00002fe8  00002fe8  0000309c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 63 .text.SendModuleControllerStatus 00000010  00004d60  00004d60  00004e14  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 64 .text.ModuleControllerStateSet 0000000a  00004dfa  00004dfa  00004eae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .text.ModuleControllerStateSetMax 00000016  00004c86  00004c86  00004d3a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 66 .text.Check5VLoss 00000018  00004c28  00004c28  00004cdc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 67 .text.CellDataConvertVoltage 00000062  00003e94  00003e94  00003f48  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 68 .text.CellDataConvertTemperature 0000007a  00003b98  00003b98  00003c4c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 69 .text.CellDataConvert 00000028  000047b8  000047b8  0000486c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 70 .text.ModuleCurrentConvertReadings 00000104  00002644  00002644  000026f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 71 .text.__vector_1 00000024  000048a4  000048a4  00004958  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 72 .text.__vector_2 00000024  000048c8  000048c8  0000497c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 73 .text.__vector_3 00000024  000048ec  000048ec  000049a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 74 .text.__vector_4 00000024  00004910  00004910  000049c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 75 .text.__vector_5 00000024  00004934  00004934  000049e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 76 .text.__vector_6 00000024  00004958  00004958  00004a0c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 77 .text.__vector_22 00000024  0000497c  0000497c  00004a30  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 78 .text.__vector_9 00000024  000049a0  000049a0  00004a54  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 79 .text.__vector_11 00000024  000049c4  000049c4  00004a78  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 80 .text.__vector_13 00000024  000049e8  000049e8  00004a9c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 81 .text.__vector_14 00000024  00004a0c  00004a0c  00004ac0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 82 .text.__vector_17 00000024  00004a30  00004a30  00004ae4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 83 .text.__vector_19 00000024  00004a54  00004a54  00004b08  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 84 .text.__vector_21 00000024  00004a78  00004a78  00004b2c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 85 .text.__vector_25 00000024  00004a9c  00004a9c  00004b50  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 86 .text.__vector_26 00000024  00004ac0  00004ac0  00004b74  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 87 .text.__vector_29 00000024  00004ae4  00004ae4  00004b98  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 88 .text.__vector_30 00000024  00004b08  00004b08  00004bbc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 89 .text.CurrentThresholdsGet 00000094  0000356c  0000356c  00003620  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 90 .progmemx.data 000001a1  000000da  000000da  0000018e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 91 .text.CANReceiveCallback 00000292  00001154  00001154  00001208  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 92 .text.ControllerStatusMessagesSend 000003e6  00000810  00000810  000008c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 93 .text.CellStringProcess 000002aa  00000eaa  00000eaa  00000f5e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 94 .text.Delay   00000052  000041b2  000041b2  00004266  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 95 .text.PlatformAssert 0000002c  0000470e  0000470e  000047c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 96 .text.ModuleControllerStateHandle 0000021e  0000185e  0000185e  00001912  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 97 .text.PlatformGetRegistrationID 00000006  00004e18  00004e18  00004ecc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 98 .text.SetSysclock 0000000c  00004de4  00004de4  00004e98  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 99 .text.ModuleControllerGetUniqueID 0000007e  0000392a  0000392a  000039de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
100 .text.TimerInit 00000052  00004204  00004204  000042b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
101 .text.__vector_12 000000ba  0000322a  0000322a  000032de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
102 .text.WatchdogReset 00000002  00004e26  00004e26  00004eda  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
103 .text.WatchdogOff 0000001a  00004c0e  00004c0e  00004cc2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
104 .text.__vector_28 00000052  00004256  00004256  0000430a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
105 .text.__vector_23 0000008a  00003600  00003600  000036b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
106 .text.__vector_24 0000004c  000042a8  000042a8  0000435c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
107 .text.vUARTRXStart 00000016  00004c9c  00004c9c  00004d50  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
108 .text.vUARTRXEnd 00000024  00004b2c  00004b2c  00004be0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
109 .text.vUARTRXData 0000007a  00003c12  00003c12  00003cc6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
110 .text.PlatformGetSendData 00000028  000047e0  000047e0  00004894  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
111 .text.ADCCallback 00000026  0000487e  0000487e  00004932  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
112 .text.FrameInit 000000ca  00002d8e  00002d8e  00002e42  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
113 .text.CellStringPowerStateMachine 00000088  00003714  00003714  000037c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
114 .text.main    000002b4  00000bf6  00000bf6  00000caa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
115 .bss.sg_u8PCMSK1 00000001  00800968  00800968  00004ee4  2**0
                  ALLOC
116 .bss.sg_u8PCMSK0 00000001  00800969  00800969  00004ee4  2**0
                  ALLOC
117 .bss.sg_u8UnhandledInterruptVector 00000001  0080096a  0080096a  00004ee4  2**0
                  ALLOC
118 .bss.sg_u8Reason 00000001  0080096b  0080096b  00004ee4  2**0
                  ALLOC
119 .progmemx.data.sg_u8FractionalLookup 00000010  0000030a  0000030a  000003be  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
120 .bss.sg_u8ControllerStatusMsgCount 00000001  0080096c  0080096c  00004ee4  2**0
                  ALLOC
121 .bss.sg_u8CellReports 00000001  0080096d  0080096d  00004ee4  2**0
                  ALLOC
122 .bss.sg_u16BytesReceived 00000002  0080095c  0080095c  00004ee4  2**0
                  ALLOC
123 .bss.sg_u8CellBufferTemp 00000004  00800950  00800950  00004ee4  2**2
                  ALLOC
124 .bss.sg_u8CellBufferRX 00000001  0080096e  0080096e  00004ee4  2**0
                  ALLOC
125 .bss.sg_u8CellIndex 00000001  0080096f  0080096f  00004ee4  2**0
                  ALLOC
126 .bss.sg_u8TicksSinceLastPackControllerMessage 00000001  00800970  00800970  00004ee4  2**0
                  ALLOC
127 .bss.sg_u8CellStringPowerTimer 00000001  00800971  00800971  00004ee4  2**0
                  ALLOC
128 .bss.sg_bFrameStart 00000001  00800972  00800972  00004ee4  2**0
                  ALLOC
129 .bss.sg_u8CellFrameTimer 00000001  00800973  00800973  00004ee4  2**0
                  ALLOC
130 .bss.sg_bIgnoreStatusRequests 00000001  00800974  00800974  00004ee4  2**0
                  ALLOC
131 .bss.sg_u8AnnouncementDelayTicks 00000001  00800975  00800975  00004ee4  2**0
                  ALLOC
132 .bss.sg_bAnnouncementPending 00000001  00800976  00800976  00004ee4  2**0
                  ALLOC
133 .bss.sg_u8CurrentBufferIndex 00000001  00800977  00800977  00004ee4  2**0
                  ALLOC
134 .bss.sg_sCurrenBuffer 00000010  0080091d  0080091d  00004ee4  2**0
                  ALLOC
135 .text.IsLeapYear 00000034  00004526  00004526  000045da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
136 .text.RTCStartTransaction 00000044  00004340  00004340  000043f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
137 .text.StructTMToHW 00000054  0000410a  0000410a  000041be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
138 .text.HWToStructTM 0000007c  00003a26  00003a26  00003ada  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
139 .text.__vector_10 00000086  0000379c  0000379c  00003850  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
140 .progmemx.data 00000014  000002f6  000002f6  000003aa  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
141 .text.RTCReadRegisters 0000007e  000039a8  000039a8  00003a5c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
142 .text.RTCReadHW 000000e2  0000293e  0000293e  000029f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
143 .text.RTCWriteRegisters 0000006a  00003d62  00003d62  00003e16  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
144 .text.RTCWriteHW 000000fe  00002748  00002748  000027fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
145 .text.RTCSetTime 000000c6  00002f22  00002f22  00002fd6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
146 .text.RTCInit 00000222  0000163c  0000163c  000016f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
147 .progmemx.data.sg_u8DaysInMonths 0000000c  00000329  00000329  000003dd  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
148 .bss.sg_u64Time 00000008  00800945  00800945  00004ee4  2**0
                  ALLOC
149 .text.SDSetCS 00000014  00004cde  00004cde  00004d92  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
150 .text.SDPowerup 0000003a  0000447e  0000447e  00004532  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
151 .text.SDCommand 000000aa  000032e4  000032e4  00003398  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
152 .text.SDGoIdle 00000022  00004b74  00004b74  00004c28  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
153 .text.SDSendOpCondition 00000034  0000455a  0000455a  0000460e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
154 .text.SDSendOpConditionArg 00000056  00004008  00004008  000040bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
155 .text.SDWaitResponse7 0000000e  00004dbc  00004dbc  00004e70  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
156 .text.SDSendInterfaceCondition 00000034  0000458e  0000458e  00004642  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
157 .text.SDReadOCR 00000032  000045c2  000045c2  00004676  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
158 .text.SDReadCSD 0000007c  00003aa2  00003aa2  00003b56  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
159 .text.SDReceiveDataBlock 0000008a  0000368a  0000368a  0000373e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
160 .text.SDTransmitDataBlock 000000c2  000030ac  000030ac  00003160  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
161 .text.SDInit  00000166  00002156  00002156  0000220a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
162 .text.SDRead  000000d8  00002cb6  00002cb6  00002d6a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
163 .text.SDWrite 000000dc  00002afe  00002afe  00002bb2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
164 .bss.sg_u8CSD 00000010  0080092d  0080092d  00004ee4  2**0
                  ALLOC
165 .bss.sg_u16BlockSize 00000002  0080095e  0080095e  00004ee4  2**0
                  ALLOC
166 .bss.sg_u32SDSectorCount 00000004  00800954  00800954  00004ee4  2**0
                  ALLOC
167 .text.SPITransaction 00000058  00003f58  00003f58  0000400c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
168 .text.SPISetBaudRate 000000ca  00002e58  00002e58  00002f0c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
169 .text.SPIInit 0000002c  0000473a  0000473a  000047ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
170 .progmemx.data.sg_sSPIBaudRates 0000002a  000002ab  000002ab  0000035f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
171 .text.readGlobalState 0000003e  000043c8  000043c8  0000447c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
172 .text.writeGlobalState 00000032  000045f4  000045f4  000046a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
173 .text.updateSessionMap 000000dc  00002bda  00002bda  00002c8e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
174 .text.STORE_Init 00000082  000038a8  000038a8  0000395c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
175 .text.STORE_WriteFrame 000000f8  00002846  00002846  000028fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
176 .text.STORE_StartNewSession 00000054  0000415e  0000415e  00004212  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
177 .text.STORE_EndSession 00000058  00003fb0  00003fb0  00004064  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
178 .bss.frameBuffer 00000400  0080032c  0080032c  00004ee4  2**2
                  ALLOC
179 .bss.currentSector 00000004  00800958  00800958  00004ee4  2**0
                  ALLOC
180 .bss.gState   000001d8  0080072c  0080072c  00004ee4  2**2
                  ALLOC
181 .text.vUARTtxDataAvailable 00000024  00004b50  00004b50  00004c04  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
182 .text.vUARTtxDataGet 0000004c  000042f4  000042f4  000043a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
183 .text.vUARTRXReset 0000000a  00004e04  00004e04  00004eb8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
184 .text.vUARTStarttx 00000056  0000405e  0000405e  00004112  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
185 .text.__vector_8 00000066  00003dcc  00003dcc  00003e80  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
186 .text.__vector_16 000000de  00002a20  00002a20  00002ad4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
187 .text.__vector_15 00000134  000023f8  000023f8  000024ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
188 .text.vUARTInit 00000030  00004658  00004658  0000470c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
189 .text.vUARTInitReceive 00000014  00004cf2  00004cf2  00004da6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
190 .bss.sg_bState 00000001  00800978  00800978  00004ee4  2**0
                  ALLOC
191 .bss.sg_u8SendData 00000002  00800960  00800960  00004ee4  2**0
                  ALLOC
192 .bss.sg_u8SendIndex 00000001  00800979  00800979  00004ee4  2**0
                  ALLOC
193 .bss.sg_bMCTxNextBit 00000001  0080097a  0080097a  00004ee4  2**0
                  ALLOC
194 .bss.sg_bCellReportsReuested 00000001  0080097b  0080097b  00004ee4  2**0
                  ALLOC
195 .bss.sg_etxState 00000001  0080097c  0080097c  00004ee4  2**0
                  ALLOC
196 .bss.sg_btxMoreAvailable 00000001  0080097d  0080097d  00004ee4  2**0
                  ALLOC
197 .bss.sg_u8txDataByte 00000001  0080097e  0080097e  00004ee4  2**0
                  ALLOC
198 .bss.sg_u8txBitCount 00000001  0080097f  0080097f  00004ee4  2**0
                  ALLOC
199 .bss.sg_bCell_mc_rxMoreData 00000001  00800980  00800980  00004ee4  2**0
                  ALLOC
200 .bss.sg_bCell_mc_rxPriorState 00000001  00800981  00800981  00004ee4  2**0
                  ALLOC
201 .bss.sg_eCell_mc_rxState 00000001  00800982  00800982  00004ee4  2**0
                  ALLOC
202 .bss.sg_u8rxDataByte 00000001  00800983  00800983  00004ee4  2**0
                  ALLOC
203 .bss.sg_u8Cell_mc_rxBitCount 00000001  00800984  00800984  00004ee4  2**0
                  ALLOC
204 .text.libgcc.div 00000028  00004808  00004808  000048bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
205 .text.libgcc.div 00000044  00004384  00004384  00004438  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
206 .text.libgcc.div 0000002e  00004688  00004688  0000473c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
207 .text.libgcc.div 00000010  00004d70  00004d70  00004e24  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
208 .text.libgcc.mul 0000001e  00004bb6  00004bb6  00004c6a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
209 .text.libgcc.mul 0000000e  00004dca  00004dca  00004e7e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
210 .text.libgcc.mul 00000016  00004cb2  00004cb2  00004d66  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
211 .text.libgcc.mul 00000010  00004d80  00004d80  00004e34  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
212 .text.libgcc  00000010  00004d90  00004d90  00004e44  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
213 .text.libgcc  00000018  00004c40  00004c40  00004cf4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
214 .text.libgcc  00000018  00004c58  00004c58  00004d0c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
215 .text.__dummy_fini 00000002  00004e28  00004e28  00004edc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
216 .text.__dummy_funcs_on_exit 00000002  00004e2a  00004e2a  00004ede  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
217 .text.__dummy_simulator_exit 00000002  00004e2c  00004e2c  00004ee0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
218 .text.exit    00000016  00004cc8  00004cc8  00004d7c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
219 .text.memcpy  00000032  00004626  00004626  000046da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
220 .text.memset  00000012  00004d18  00004d18  00004dcc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
221 .text.gmtime  0000000a  00004e0e  00004e0e  00004ec2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
222 .bss.tm.1240  00000019  00800904  00800904  00004ee4  2**0
                  ALLOC
223 .progmemx.data 00000004  000003af  000003af  00000463  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
224 .text.__gmtime_r 0000006c  00003c8c  00003c8c  00003d40  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
225 .progmemx.data 00000004  000003b3  000003b3  00000467  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
226 .text.mktime  00000086  00003822  00003822  000038d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
227 .text._Exit   00000004  00004e22  00004e22  00004ed6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
228 .text.__tm_to_secs 000001be  00001c8e  00001c8e  00001d42  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
229 .text.__year_to_secs 00000256  000013e6  000013e6  0000149a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
230 .text.__month_to_secs 0000003c  00004442  00004442  000044f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
231 .progmemx.data.secs_through_month.1090 00000030  0000027b  0000027b  0000032f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
232 .text.__secs_to_tm 00000458  000003b8  000003b8  0000046c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
233 .progmemx.data.days_in_month.1250 0000000c  00000335  00000335  000003e9  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
234 .text.libgcc.div 00000028  00004830  00004830  000048e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
235 .text.libgcc.mul 000000a0  00003430  00003430  000034e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
236 .text.libgcc.mul 00000012  00004d2a  00004d2a  00004dde  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
237 .text.libgcc.mul 0000001e  00004bd4  00004bd4  00004c88  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
238 .text.libgcc.mul 00000056  000040b4  000040b4  00004168  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
239 .text.libgcc.div 00000062  00003ef6  00003ef6  00003faa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
240 .text.libgcc.div 0000001c  00004bf2  00004bf2  00004ca6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
241 .text.libgcc.div 000000a2  0000338e  0000338e  00003442  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
242 .text.libgcc  00000020  00004b96  00004b96  00004c4a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
243 .text.libgcc.prologue 00000038  000044b8  000044b8  0000456c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
244 .text.libgcc.prologue 00000036  000044f0  000044f0  000045a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
245 .text.libgcc  00000012  00004d3c  00004d3c  00004df0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
246 .text.libgcc  00000012  00004d4e  00004d4e  00004e02  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 43 00 	jmp	0x86	; 0x86 <__ctors_end>
   4:	0c 94 52 24 	jmp	0x48a4	; 0x48a4 <__vector_1>
   8:	0c 94 64 24 	jmp	0x48c8	; 0x48c8 <__vector_2>
   c:	0c 94 76 24 	jmp	0x48ec	; 0x48ec <__vector_3>
  10:	0c 94 88 24 	jmp	0x4910	; 0x4910 <__vector_4>
  14:	0c 94 9a 24 	jmp	0x4934	; 0x4934 <__vector_5>
  18:	0c 94 ac 24 	jmp	0x4958	; 0x4958 <__vector_6>
  1c:	0c 94 0f 27 	jmp	0x4e1e	; 0x4e1e <__bad_interrupt>
  20:	0c 94 e6 1e 	jmp	0x3dcc	; 0x3dcc <__vector_8>
  24:	0c 94 d0 24 	jmp	0x49a0	; 0x49a0 <__vector_9>
  28:	0c 94 ce 1b 	jmp	0x379c	; 0x379c <__vector_10>
  2c:	0c 94 e2 24 	jmp	0x49c4	; 0x49c4 <__vector_11>
  30:	0c 94 15 19 	jmp	0x322a	; 0x322a <__vector_12>
  34:	0c 94 f4 24 	jmp	0x49e8	; 0x49e8 <__vector_13>
  38:	0c 94 06 25 	jmp	0x4a0c	; 0x4a0c <__vector_14>
  3c:	0c 94 fc 11 	jmp	0x23f8	; 0x23f8 <__vector_15>
  40:	0c 94 10 15 	jmp	0x2a20	; 0x2a20 <__vector_16>
  44:	0c 94 18 25 	jmp	0x4a30	; 0x4a30 <__vector_17>
  48:	0c 94 96 12 	jmp	0x252c	; 0x252c <__vector_18>
  4c:	0c 94 2a 25 	jmp	0x4a54	; 0x4a54 <__vector_19>
  50:	0c 94 0f 27 	jmp	0x4e1e	; 0x4e1e <__bad_interrupt>
  54:	0c 94 3c 25 	jmp	0x4a78	; 0x4a78 <__vector_21>
  58:	0c 94 be 24 	jmp	0x497c	; 0x497c <__vector_22>
  5c:	0c 94 00 1b 	jmp	0x3600	; 0x3600 <__vector_23>
  60:	0c 94 54 21 	jmp	0x42a8	; 0x42a8 <__vector_24>
  64:	0c 94 4e 25 	jmp	0x4a9c	; 0x4a9c <__vector_25>
  68:	0c 94 60 25 	jmp	0x4ac0	; 0x4ac0 <__vector_26>
  6c:	0c 94 b7 18 	jmp	0x316e	; 0x316e <__vector_27>
  70:	0c 94 2b 21 	jmp	0x4256	; 0x4256 <__vector_28>
  74:	0c 94 72 25 	jmp	0x4ae4	; 0x4ae4 <__vector_29>
  78:	0c 94 84 25 	jmp	0x4b08	; 0x4b08 <__vector_30>

0000007c <.dinit>:
  7c:	01 00       	.word	0x0001	; ????
  7e:	01 02       	muls	r16, r17
  80:	80 01       	movw	r16, r0
  82:	04 09       	sbc	r16, r4
  84:	85 80       	ldd	r8, Z+5	; 0x05

00000086 <__ctors_end>:
  86:	11 24       	eor	r1, r1
  88:	1f be       	out	0x3f, r1	; 63
  8a:	cf ef       	ldi	r28, 0xFF	; 255
  8c:	d0 e1       	ldi	r29, 0x10	; 16
  8e:	de bf       	out	0x3e, r29	; 62
  90:	cd bf       	out	0x3d, r28	; 61

00000092 <__do_copy_data>:
  92:	ec e7       	ldi	r30, 0x7C	; 124
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	40 e0       	ldi	r20, 0x00	; 0
  98:	17 c0       	rjmp	.+46     	; 0xc8 <__do_clear_bss+0x8>
  9a:	b5 91       	lpm	r27, Z+
  9c:	a5 91       	lpm	r26, Z+
  9e:	35 91       	lpm	r19, Z+
  a0:	25 91       	lpm	r18, Z+
  a2:	05 91       	lpm	r16, Z+
  a4:	07 fd       	sbrc	r16, 7
  a6:	0c c0       	rjmp	.+24     	; 0xc0 <__do_clear_bss>
  a8:	95 91       	lpm	r25, Z+
  aa:	85 91       	lpm	r24, Z+
  ac:	ef 01       	movw	r28, r30
  ae:	f9 2f       	mov	r31, r25
  b0:	e8 2f       	mov	r30, r24
  b2:	05 90       	lpm	r0, Z+
  b4:	0d 92       	st	X+, r0
  b6:	a2 17       	cp	r26, r18
  b8:	b3 07       	cpc	r27, r19
  ba:	d9 f7       	brne	.-10     	; 0xb2 <__do_copy_data+0x20>
  bc:	fe 01       	movw	r30, r28
  be:	04 c0       	rjmp	.+8      	; 0xc8 <__do_clear_bss+0x8>

000000c0 <__do_clear_bss>:
  c0:	1d 92       	st	X+, r1
  c2:	a2 17       	cp	r26, r18
  c4:	b3 07       	cpc	r27, r19
  c6:	e1 f7       	brne	.-8      	; 0xc0 <__do_clear_bss>
  c8:	e6 38       	cpi	r30, 0x86	; 134
  ca:	f4 07       	cpc	r31, r20
  cc:	31 f7       	brne	.-52     	; 0x9a <__do_copy_data+0x8>
  ce:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <main>
  d2:	0c 94 64 26 	jmp	0x4cc8	; 0x4cc8 <exit>

000000d6 <_exit>:
  d6:	f8 94       	cli

000000d8 <__stop_program>:
  d8:	ff cf       	rjmp	.-2      	; 0xd8 <__stop_program>

Disassembly of section .text:

00004e1e <__bad_interrupt>:
    4e1e:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.__vector_27:

0000316e <__vector_27>:

	// Disable the conversion complete interrupt
	ADCSRA &= (uint8_t)~(1 << ADIE);

	// Clear any pending interrupt	
	ADCSRA |= (1 << ADIF);
    316e:	78 94       	sei
    3170:	1f 92       	push	r1
    3172:	0f 92       	push	r0
    3174:	0f b6       	in	r0, 0x3f	; 63
    3176:	0f 92       	push	r0
    3178:	11 24       	eor	r1, r1
    317a:	2f 93       	push	r18
    317c:	3f 93       	push	r19
    317e:	4f 93       	push	r20
    3180:	5f 93       	push	r21
    3182:	6f 93       	push	r22
    3184:	7f 93       	push	r23
    3186:	8f 93       	push	r24
    3188:	9f 93       	push	r25
    318a:	af 93       	push	r26
    318c:	bf 93       	push	r27
    318e:	ef 93       	push	r30
    3190:	ff 93       	push	r31
    3192:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f0078>
    3196:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f0079>
    319a:	80 91 4f 09 	lds	r24, 0x094F	; 0x80094f <sg_eCurrentType>
    319e:	91 e0       	ldi	r25, 0x01	; 1
    31a0:	98 0f       	add	r25, r24
    31a2:	90 93 4f 09 	sts	0x094F, r25	; 0x80094f <sg_eCurrentType>
    31a6:	95 30       	cpi	r25, 0x05	; 5
    31a8:	10 f0       	brcs	.+4      	; 0x31ae <__vector_27+0x40>
    31aa:	10 92 4f 09 	sts	0x094F, r1	; 0x80094f <sg_eCurrentType>
    31ae:	ac e7       	ldi	r26, 0x7C	; 124
    31b0:	b0 e0       	ldi	r27, 0x00	; 0
    31b2:	5c 91       	ld	r21, X
    31b4:	20 91 4f 09 	lds	r18, 0x094F	; 0x80094f <sg_eCurrentType>
    31b8:	30 e0       	ldi	r19, 0x00	; 0
    31ba:	f9 01       	movw	r30, r18
    31bc:	ee 0f       	add	r30, r30
    31be:	ff 1f       	adc	r31, r31
    31c0:	2e 0f       	add	r18, r30
    31c2:	3f 1f       	adc	r19, r31
    31c4:	03 2e       	mov	r0, r19
    31c6:	00 0c       	add	r0, r0
    31c8:	44 0b       	sbc	r20, r20
    31ca:	26 5e       	subi	r18, 0xE6	; 230
    31cc:	3c 4f       	sbci	r19, 0xFC	; 252
    31ce:	4f 4f       	sbci	r20, 0xFF	; 255
    31d0:	f9 01       	movw	r30, r18
    31d2:	94 91       	lpm	r25, Z
    31d4:	47 fd       	sbrc	r20, 7
    31d6:	90 81       	ld	r25, Z
    31d8:	50 7e       	andi	r21, 0xE0	; 224
    31da:	95 2b       	or	r25, r21
    31dc:	90 6c       	ori	r25, 0xC0	; 192
    31de:	9c 93       	st	X, r25
    31e0:	0e 94 3f 24 	call	0x487e	; 0x487e <ADCCallback>
    31e4:	80 91 4f 09 	lds	r24, 0x094F	; 0x80094f <sg_eCurrentType>
    31e8:	81 11       	cpse	r24, r1
    31ea:	09 c0       	rjmp	.+18     	; 0x31fe <__vector_27+0x90>
    31ec:	ea e7       	ldi	r30, 0x7A	; 122
    31ee:	f0 e0       	ldi	r31, 0x00	; 0
    31f0:	80 81       	ld	r24, Z
    31f2:	87 7f       	andi	r24, 0xF7	; 247
    31f4:	80 83       	st	Z, r24
    31f6:	81 e0       	ldi	r24, 0x01	; 1
    31f8:	80 93 62 09 	sts	0x0962, r24	; 0x800962 <sg_eState>
    31fc:	05 c0       	rjmp	.+10     	; 0x3208 <__vector_27+0x9a>
    31fe:	ea e7       	ldi	r30, 0x7A	; 122
    3200:	f0 e0       	ldi	r31, 0x00	; 0
    3202:	80 81       	ld	r24, Z
    3204:	88 64       	ori	r24, 0x48	; 72
    3206:	80 83       	st	Z, r24
    3208:	ff 91       	pop	r31
    320a:	ef 91       	pop	r30
    320c:	bf 91       	pop	r27
    320e:	af 91       	pop	r26
    3210:	9f 91       	pop	r25
    3212:	8f 91       	pop	r24
    3214:	7f 91       	pop	r23
    3216:	6f 91       	pop	r22
    3218:	5f 91       	pop	r21
    321a:	4f 91       	pop	r20
    321c:	3f 91       	pop	r19
    321e:	2f 91       	pop	r18
    3220:	0f 90       	pop	r0
    3222:	0f be       	out	0x3f, r0	; 63
    3224:	0f 90       	pop	r0
    3226:	1f 90       	pop	r1
    3228:	18 95       	reti

Disassembly of section .text.ADCSetPowerOn:

00004dd8 <ADCSetPowerOn>:
}

// Enable ADC
void ADCSetPowerOn( void )
{
	ADCSRA |= (1 << ADEN);
    4dd8:	ea e7       	ldi	r30, 0x7A	; 122
    4dda:	f0 e0       	ldi	r31, 0x00	; 0
    4ddc:	80 81       	ld	r24, Z
    4dde:	80 68       	ori	r24, 0x80	; 128
    4de0:	80 83       	st	Z, r24
    4de2:	08 95       	ret

Disassembly of section .text.ADCStartConversion:

00004766 <ADCStartConversion>:
}

void ADCStartConversion(void)
{
	// Don't start anything if we're not idle
	if (EADCSTATE_IDLE != sg_eState)
    4766:	80 91 62 09 	lds	r24, 0x0962	; 0x800962 <sg_eState>
    476a:	81 30       	cpi	r24, 0x01	; 1
    476c:	81 f4       	brne	.+32     	; 0x478e <ADCStartConversion+0x28>
	{
		return;
	}
	
	// Set back to the first channel
	sg_eCurrentType = EADCTYPE_FIRST;
    476e:	10 92 4f 09 	sts	0x094F, r1	; 0x80094f <sg_eCurrentType>
	
	// Set the MUX
	ADMUX = (ADMUX & MUX_MASK) | (sg_sMuxSelectList[sg_eCurrentType].u8MuxSelect) | MUX_AREF;
    4772:	ec e7       	ldi	r30, 0x7C	; 124
    4774:	f0 e0       	ldi	r31, 0x00	; 0
    4776:	80 81       	ld	r24, Z
    4778:	80 7e       	andi	r24, 0xE0	; 224
    477a:	89 6c       	ori	r24, 0xC9	; 201
    477c:	80 83       	st	Z, r24
		
	sg_eState = EADCSTATE_READING;
    477e:	82 e0       	ldi	r24, 0x02	; 2
    4780:	80 93 62 09 	sts	0x0962, r24	; 0x800962 <sg_eState>
	
	// Start a single conversion  - *dp run one at a time for now instead of continuous
	ADCSRA |= (1 << ADSC) | (1 << ADIE) | (1 << ADEN);  // turn power on if it isn't
    4784:	ea e7       	ldi	r30, 0x7A	; 122
    4786:	f0 e0       	ldi	r31, 0x00	; 0
    4788:	80 81       	ld	r24, Z
    478a:	88 6c       	ori	r24, 0xC8	; 200
    478c:	80 83       	st	Z, r24
    478e:	08 95       	ret

Disassembly of section .text.ADCInit:

000022bc <ADCInit>:

	// Disable the conversion complete interrupt
	ADCSRA &= (uint8_t)~(1 << ADIE);

	// Clear any pending interrupt	
	ADCSRA |= (1 << ADIF);
    22bc:	cf 93       	push	r28
    22be:	82 e0       	ldi	r24, 0x02	; 2
    22c0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f007a>
    22c4:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
    22c8:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7f0094>
    22cc:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7f0095>
    22d0:	10 92 96 00 	sts	0x0096, r1	; 0x800096 <__TEXT_REGION_LENGTH__+0x7f0096>
    22d4:	10 92 97 00 	sts	0x0097, r1	; 0x800097 <__TEXT_REGION_LENGTH__+0x7f0097>
    22d8:	80 ea       	ldi	r24, 0xA0	; 160
    22da:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f007b>
    22de:	c0 e0       	ldi	r28, 0x00	; 0
    22e0:	83 c0       	rjmp	.+262    	; 0x23e8 <ADCInit+0x12c>
    22e2:	2c 2f       	mov	r18, r28
    22e4:	30 e0       	ldi	r19, 0x00	; 0
    22e6:	c9 01       	movw	r24, r18
    22e8:	88 0f       	add	r24, r24
    22ea:	99 1f       	adc	r25, r25
    22ec:	82 0f       	add	r24, r18
    22ee:	93 1f       	adc	r25, r19
    22f0:	01 96       	adiw	r24, 0x01	; 1
    22f2:	09 2e       	mov	r0, r25
    22f4:	00 0c       	add	r0, r0
    22f6:	aa 0b       	sbc	r26, r26
    22f8:	86 5e       	subi	r24, 0xE6	; 230
    22fa:	9c 4f       	sbci	r25, 0xFC	; 252
    22fc:	af 4f       	sbci	r26, 0xFF	; 255
    22fe:	fc 01       	movw	r30, r24
    2300:	84 91       	lpm	r24, Z
    2302:	a7 fd       	sbrc	r26, 7
    2304:	80 81       	ld	r24, Z
    2306:	81 30       	cpi	r24, 0x01	; 1
    2308:	41 f0       	breq	.+16     	; 0x231a <ADCInit+0x5e>
    230a:	08 f4       	brcc	.+2      	; 0x230e <ADCInit+0x52>
    230c:	6c c0       	rjmp	.+216    	; 0x23e6 <ADCInit+0x12a>
    230e:	82 30       	cpi	r24, 0x02	; 2
    2310:	21 f1       	breq	.+72     	; 0x235a <ADCInit+0x9e>
    2312:	83 30       	cpi	r24, 0x03	; 3
    2314:	09 f4       	brne	.+2      	; 0x2318 <ADCInit+0x5c>
    2316:	41 c0       	rjmp	.+130    	; 0x239a <ADCInit+0xde>
    2318:	5f c0       	rjmp	.+190    	; 0x23d8 <ADCInit+0x11c>
    231a:	54 b1       	in	r21, 0x04	; 4
    231c:	c9 01       	movw	r24, r18
    231e:	88 0f       	add	r24, r24
    2320:	99 1f       	adc	r25, r25
    2322:	28 0f       	add	r18, r24
    2324:	39 1f       	adc	r19, r25
    2326:	2e 5f       	subi	r18, 0xFE	; 254
    2328:	3f 4f       	sbci	r19, 0xFF	; 255
    232a:	03 2e       	mov	r0, r19
    232c:	00 0c       	add	r0, r0
    232e:	44 0b       	sbc	r20, r20
    2330:	26 5e       	subi	r18, 0xE6	; 230
    2332:	3c 4f       	sbci	r19, 0xFC	; 252
    2334:	4f 4f       	sbci	r20, 0xFF	; 255
    2336:	f9 01       	movw	r30, r18
    2338:	24 91       	lpm	r18, Z
    233a:	47 fd       	sbrc	r20, 7
    233c:	20 81       	ld	r18, Z
    233e:	81 e0       	ldi	r24, 0x01	; 1
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	02 c0       	rjmp	.+4      	; 0x2348 <ADCInit+0x8c>
    2344:	88 0f       	add	r24, r24
    2346:	99 1f       	adc	r25, r25
    2348:	2a 95       	dec	r18
    234a:	e2 f7       	brpl	.-8      	; 0x2344 <ADCInit+0x88>
    234c:	80 95       	com	r24
    234e:	58 23       	and	r21, r24
    2350:	54 b9       	out	0x04, r21	; 4
    2352:	95 b1       	in	r25, 0x05	; 5
    2354:	89 23       	and	r24, r25
    2356:	85 b9       	out	0x05, r24	; 5
    2358:	46 c0       	rjmp	.+140    	; 0x23e6 <ADCInit+0x12a>
    235a:	57 b1       	in	r21, 0x07	; 7
    235c:	c9 01       	movw	r24, r18
    235e:	88 0f       	add	r24, r24
    2360:	99 1f       	adc	r25, r25
    2362:	28 0f       	add	r18, r24
    2364:	39 1f       	adc	r19, r25
    2366:	2e 5f       	subi	r18, 0xFE	; 254
    2368:	3f 4f       	sbci	r19, 0xFF	; 255
    236a:	03 2e       	mov	r0, r19
    236c:	00 0c       	add	r0, r0
    236e:	44 0b       	sbc	r20, r20
    2370:	26 5e       	subi	r18, 0xE6	; 230
    2372:	3c 4f       	sbci	r19, 0xFC	; 252
    2374:	4f 4f       	sbci	r20, 0xFF	; 255
    2376:	f9 01       	movw	r30, r18
    2378:	24 91       	lpm	r18, Z
    237a:	47 fd       	sbrc	r20, 7
    237c:	20 81       	ld	r18, Z
    237e:	81 e0       	ldi	r24, 0x01	; 1
    2380:	90 e0       	ldi	r25, 0x00	; 0
    2382:	02 c0       	rjmp	.+4      	; 0x2388 <ADCInit+0xcc>
    2384:	88 0f       	add	r24, r24
    2386:	99 1f       	adc	r25, r25
    2388:	2a 95       	dec	r18
    238a:	e2 f7       	brpl	.-8      	; 0x2384 <ADCInit+0xc8>
    238c:	80 95       	com	r24
    238e:	58 23       	and	r21, r24
    2390:	57 b9       	out	0x07, r21	; 7
    2392:	98 b1       	in	r25, 0x08	; 8
    2394:	89 23       	and	r24, r25
    2396:	88 b9       	out	0x08, r24	; 8
    2398:	26 c0       	rjmp	.+76     	; 0x23e6 <ADCInit+0x12a>
    239a:	4a b1       	in	r20, 0x0a	; 10
    239c:	c9 01       	movw	r24, r18
    239e:	88 0f       	add	r24, r24
    23a0:	99 1f       	adc	r25, r25
    23a2:	82 0f       	add	r24, r18
    23a4:	93 1f       	adc	r25, r19
    23a6:	02 96       	adiw	r24, 0x02	; 2
    23a8:	09 2e       	mov	r0, r25
    23aa:	00 0c       	add	r0, r0
    23ac:	aa 0b       	sbc	r26, r26
    23ae:	86 5e       	subi	r24, 0xE6	; 230
    23b0:	9c 4f       	sbci	r25, 0xFC	; 252
    23b2:	af 4f       	sbci	r26, 0xFF	; 255
    23b4:	fc 01       	movw	r30, r24
    23b6:	24 91       	lpm	r18, Z
    23b8:	a7 fd       	sbrc	r26, 7
    23ba:	20 81       	ld	r18, Z
    23bc:	81 e0       	ldi	r24, 0x01	; 1
    23be:	90 e0       	ldi	r25, 0x00	; 0
    23c0:	02 c0       	rjmp	.+4      	; 0x23c6 <ADCInit+0x10a>
    23c2:	88 0f       	add	r24, r24
    23c4:	99 1f       	adc	r25, r25
    23c6:	2a 95       	dec	r18
    23c8:	e2 f7       	brpl	.-8      	; 0x23c2 <ADCInit+0x106>
    23ca:	80 95       	com	r24
    23cc:	48 23       	and	r20, r24
    23ce:	4a b9       	out	0x0a, r20	; 10
    23d0:	9b b1       	in	r25, 0x0b	; 11
    23d2:	89 23       	and	r24, r25
    23d4:	8b b9       	out	0x0b, r24	; 11
    23d6:	07 c0       	rjmp	.+14     	; 0x23e6 <ADCInit+0x12a>
    23d8:	45 eb       	ldi	r20, 0xB5	; 181
    23da:	50 e0       	ldi	r21, 0x00	; 0
    23dc:	61 e4       	ldi	r22, 0x41	; 65
    23de:	73 e0       	ldi	r23, 0x03	; 3
    23e0:	80 e0       	ldi	r24, 0x00	; 0
    23e2:	0e 94 87 23 	call	0x470e	; 0x470e <PlatformAssert>
    23e6:	cf 5f       	subi	r28, 0xFF	; 255
    23e8:	c5 30       	cpi	r28, 0x05	; 5
    23ea:	08 f4       	brcc	.+2      	; 0x23ee <ADCInit+0x132>
    23ec:	7a cf       	rjmp	.-268    	; 0x22e2 <ADCInit+0x26>
    23ee:	81 e0       	ldi	r24, 0x01	; 1
    23f0:	80 93 62 09 	sts	0x0962, r24	; 0x800962 <sg_eState>
    23f4:	cf 91       	pop	r28
    23f6:	08 95       	ret

Disassembly of section .text.CANLookupCommand:

00003e32 <CANLookupCommand>:
	{PKT_MODULE_SET_TIME,		ECANMessageType_SetTime},
	{PKT_MODULE_MAX_STATE,		ECANMessageType_MaxState}
};

static ECANMessageType CANLookupCommand( uint16_t u16ID )
{
    3e32:	cf 93       	push	r28
    3e34:	df 93       	push	r29
    3e36:	ec 01       	movw	r28, r24
	uint8_t u8Index = 0;
    3e38:	90 e0       	ldi	r25, 0x00	; 0
	
	while( u8Index < (sizeof(sg_sRXCommandList)/sizeof(sg_sRXCommandList[0])) )
    3e3a:	26 c0       	rjmp	.+76     	; 0x3e88 <CANLookupCommand+0x56>
	{
		if( sg_sRXCommandList[u8Index].u16ID == u16ID )
    3e3c:	a9 2f       	mov	r26, r25
    3e3e:	b0 e0       	ldi	r27, 0x00	; 0
    3e40:	9d 01       	movw	r18, r26
    3e42:	22 0f       	add	r18, r18
    3e44:	33 1f       	adc	r19, r19
    3e46:	2a 0f       	add	r18, r26
    3e48:	3b 1f       	adc	r19, r27
    3e4a:	03 2e       	mov	r0, r19
    3e4c:	00 0c       	add	r0, r0
    3e4e:	44 0b       	sbc	r20, r20
    3e50:	2b 52       	subi	r18, 0x2B	; 43
    3e52:	3d 4f       	sbci	r19, 0xFD	; 253
    3e54:	4f 4f       	sbci	r20, 0xFF	; 255
    3e56:	f9 01       	movw	r30, r18
    3e58:	54 2f       	mov	r21, r20
    3e5a:	0e 94 c8 26 	call	0x4d90	; 0x4d90 <__xload_2>
    3e5e:	6c 17       	cp	r22, r28
    3e60:	7d 07       	cpc	r23, r29
    3e62:	89 f4       	brne	.+34     	; 0x3e86 <CANLookupCommand+0x54>
		{
			return( sg_sRXCommandList[u8Index].eType );
    3e64:	cd 01       	movw	r24, r26
    3e66:	88 0f       	add	r24, r24
    3e68:	99 1f       	adc	r25, r25
    3e6a:	8a 0f       	add	r24, r26
    3e6c:	9b 1f       	adc	r25, r27
    3e6e:	02 96       	adiw	r24, 0x02	; 2
    3e70:	09 2e       	mov	r0, r25
    3e72:	00 0c       	add	r0, r0
    3e74:	aa 0b       	sbc	r26, r26
    3e76:	8b 52       	subi	r24, 0x2B	; 43
    3e78:	9d 4f       	sbci	r25, 0xFD	; 253
    3e7a:	af 4f       	sbci	r26, 0xFF	; 255
    3e7c:	fc 01       	movw	r30, r24
    3e7e:	84 91       	lpm	r24, Z
    3e80:	a7 fd       	sbrc	r26, 7
    3e82:	80 81       	ld	r24, Z
    3e84:	04 c0       	rjmp	.+8      	; 0x3e8e <CANLookupCommand+0x5c>
		}
		
		u8Index++;
    3e86:	9f 5f       	subi	r25, 0xFF	; 255

static ECANMessageType CANLookupCommand( uint16_t u16ID )
{
	uint8_t u8Index = 0;
	
	while( u8Index < (sizeof(sg_sRXCommandList)/sizeof(sg_sRXCommandList[0])) )
    3e88:	9b 30       	cpi	r25, 0x0B	; 11
    3e8a:	c0 f2       	brcs	.-80     	; 0x3e3c <CANLookupCommand+0xa>
		}
		
		u8Index++;
	}
	
	return( ECANMessageType_MAX );
    3e8c:	83 e1       	ldi	r24, 0x13	; 19
}
    3e8e:	df 91       	pop	r29
    3e90:	cf 91       	pop	r28
    3e92:	08 95       	ret

Disassembly of section .text.CANMOBSet:

00001a7c <CANMOBSet>:

static void CANMOBSet( uint8_t u8MOBIndex,
					   const SMOBDef* psDef,
					   uint8_t* pu8Data,
					   uint8_t u8DataLen )
{
    1a7c:	6f 92       	push	r6
    1a7e:	7f 92       	push	r7
    1a80:	8f 92       	push	r8
    1a82:	9f 92       	push	r9
    1a84:	bf 92       	push	r11
    1a86:	cf 92       	push	r12
    1a88:	df 92       	push	r13
    1a8a:	ef 92       	push	r14
    1a8c:	ff 92       	push	r15
    1a8e:	0f 93       	push	r16
    1a90:	1f 93       	push	r17
    1a92:	cf 93       	push	r28
    1a94:	df 93       	push	r29
    1a96:	f8 2e       	mov	r15, r24
    1a98:	6a 01       	movw	r12, r20
    1a9a:	e6 2e       	mov	r14, r22
    1a9c:	e9 01       	movw	r28, r18
	uint8_t u8CANCDMOBValue;
	uint32_t u32MessageID;
	uint8_t savedCANGIE;
	
	MBASSERT( u8MOBIndex <= 5 );
    1a9e:	0f 2e       	mov	r0, r31
    1aa0:	f5 e0       	ldi	r31, 0x05	; 5
    1aa2:	6f 2e       	mov	r6, r31
    1aa4:	f0 2d       	mov	r31, r0
    1aa6:	68 16       	cp	r6, r24
    1aa8:	38 f4       	brcc	.+14     	; 0x1ab8 <CANMOBSet+0x3c>
    1aaa:	40 ed       	ldi	r20, 0xD0	; 208
    1aac:	50 e0       	ldi	r21, 0x00	; 0
    1aae:	6c e4       	ldi	r22, 0x4C	; 76
    1ab0:	73 e0       	ldi	r23, 0x03	; 3
    1ab2:	80 e0       	ldi	r24, 0x00	; 0
    1ab4:	0e 94 87 23 	call	0x470e	; 0x470e <PlatformAssert>
	MBASSERT( u8DataLen <= 8 );
    1ab8:	09 30       	cpi	r16, 0x09	; 9
    1aba:	38 f0       	brcs	.+14     	; 0x1aca <CANMOBSet+0x4e>
    1abc:	41 ed       	ldi	r20, 0xD1	; 209
    1abe:	50 e0       	ldi	r21, 0x00	; 0
    1ac0:	6c e4       	ldi	r22, 0x4C	; 76
    1ac2:	73 e0       	ldi	r23, 0x03	; 3
    1ac4:	80 e0       	ldi	r24, 0x00	; 0
    1ac6:	0e 94 87 23 	call	0x470e	; 0x470e <PlatformAssert>
	
	// Disable CAN interrupts during MOB configuration to prevent corruption
	savedCANGIE = CANGIE;
    1aca:	eb ed       	ldi	r30, 0xDB	; 219
    1acc:	f0 e0       	ldi	r31, 0x00	; 0
    1ace:	b0 80       	ld	r11, Z
	CANGIE &= ~(1 << ENIT);
    1ad0:	80 81       	ld	r24, Z
    1ad2:	8f 77       	andi	r24, 0x7F	; 127
    1ad4:	80 83       	st	Z, r24
	
	// Set the MOB page, auto increment, and data index 0
	CANPAGE = u8MOBIndex << 4;
    1ad6:	8f 2d       	mov	r24, r15
    1ad8:	82 95       	swap	r24
    1ada:	80 7f       	andi	r24, 0xF0	; 240
    1adc:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f00ed>
	
	// Clear the MOB status
	CANSTMOB = 0;
    1ae0:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
	
	// Set the MOB registers for this page
	u8CANCDMOBValue = u8DataLen;
	u8CANCDMOBValue |= (psDef->u8Mode << CONMOB0);
    1ae4:	f6 01       	movw	r30, r12
    1ae6:	84 91       	lpm	r24, Z
    1ae8:	e7 fc       	sbrc	r14, 7
    1aea:	80 81       	ld	r24, Z
    1aec:	20 e4       	ldi	r18, 0x40	; 64
    1aee:	82 9f       	mul	r24, r18
    1af0:	c0 01       	movw	r24, r0
    1af2:	11 24       	eor	r1, r1
    1af4:	10 2f       	mov	r17, r16
    1af6:	18 2b       	or	r17, r24
	if( psDef->bReplyValid )
    1af8:	ae 2d       	mov	r26, r14
    1afa:	c6 01       	movw	r24, r12
    1afc:	01 96       	adiw	r24, 0x01	; 1
    1afe:	a1 1d       	adc	r26, r1
    1b00:	fc 01       	movw	r30, r24
    1b02:	84 91       	lpm	r24, Z
    1b04:	a7 fd       	sbrc	r26, 7
    1b06:	80 81       	ld	r24, Z
    1b08:	81 11       	cpse	r24, r1
	{
		u8CANCDMOBValue |= (1 << RPLV);
    1b0a:	10 62       	ori	r17, 0x20	; 32
	}
	u8CANCDMOBValue |= (1 << IDE);
    1b0c:	10 61       	ori	r17, 0x10	; 16
	// Extended frame address format
	//	Bits 0-7: Pack / Module registration ID of sender (if assigned, zero otherwise)
	//	Bits 8-17: Reserved, set to zero.
	//	Bits 18-28: Static message ID (eg. 0x500)
	
	u32MessageID = (uint32_t)PlatformGetRegistrationID();
    1b0e:	0e 94 0c 27 	call	0x4e18	; 0x4e18 <PlatformGetRegistrationID>
	u32MessageID |= (((uint32_t)psDef->u16ID) & 0x7ff) << 18;
    1b12:	4e 2d       	mov	r20, r14
    1b14:	96 01       	movw	r18, r12
    1b16:	2e 5f       	subi	r18, 0xFE	; 254
    1b18:	3f 4f       	sbci	r19, 0xFF	; 255
    1b1a:	4f 4f       	sbci	r20, 0xFF	; 255
    1b1c:	f9 01       	movw	r30, r18
    1b1e:	54 2f       	mov	r21, r20
    1b20:	0e 94 c8 26 	call	0x4d90	; 0x4d90 <__xload_2>
    1b24:	ab 01       	movw	r20, r22
    1b26:	57 70       	andi	r21, 0x07	; 7
    1b28:	60 e0       	ldi	r22, 0x00	; 0
    1b2a:	70 e0       	ldi	r23, 0x00	; 0
    1b2c:	03 2e       	mov	r0, r19
    1b2e:	32 e1       	ldi	r19, 0x12	; 18
    1b30:	44 0f       	add	r20, r20
    1b32:	55 1f       	adc	r21, r21
    1b34:	66 1f       	adc	r22, r22
    1b36:	77 1f       	adc	r23, r23
    1b38:	3a 95       	dec	r19
    1b3a:	d1 f7       	brne	.-12     	; 0x1b30 <CANMOBSet+0xb4>
    1b3c:	30 2d       	mov	r19, r0
    1b3e:	3a 01       	movw	r6, r20
    1b40:	4b 01       	movw	r8, r22
    1b42:	68 2a       	or	r6, r24
    1b44:	d4 01       	movw	r26, r8
    1b46:	c3 01       	movw	r24, r6
	
	CANIDT4 = psDef->bRTRTag?(1 << RTRTAG):0;
    1b48:	4e 2d       	mov	r20, r14
    1b4a:	96 01       	movw	r18, r12
    1b4c:	2a 5f       	subi	r18, 0xFA	; 250
    1b4e:	3f 4f       	sbci	r19, 0xFF	; 255
    1b50:	4f 4f       	sbci	r20, 0xFF	; 255
    1b52:	f9 01       	movw	r30, r18
    1b54:	24 91       	lpm	r18, Z
    1b56:	47 fd       	sbrc	r20, 7
    1b58:	20 81       	ld	r18, Z
    1b5a:	22 23       	and	r18, r18
    1b5c:	11 f0       	breq	.+4      	; 0x1b62 <CANMOBSet+0xe6>
    1b5e:	24 e0       	ldi	r18, 0x04	; 4
    1b60:	01 c0       	rjmp	.+2      	; 0x1b64 <CANMOBSet+0xe8>
    1b62:	20 e0       	ldi	r18, 0x00	; 0
    1b64:	e0 ef       	ldi	r30, 0xF0	; 240
    1b66:	f0 e0       	ldi	r31, 0x00	; 0
    1b68:	20 83       	st	Z, r18
	CANIDT4 |= u32MessageID << 3;
    1b6a:	20 81       	ld	r18, Z
    1b6c:	38 2f       	mov	r19, r24
    1b6e:	33 0f       	add	r19, r19
    1b70:	33 0f       	add	r19, r19
    1b72:	33 0f       	add	r19, r19
    1b74:	23 2b       	or	r18, r19
    1b76:	20 83       	st	Z, r18
	CANIDT3 = u32MessageID >> 5;
    1b78:	ac 01       	movw	r20, r24
    1b7a:	bd 01       	movw	r22, r26
    1b7c:	68 94       	set
    1b7e:	14 f8       	bld	r1, 4
    1b80:	76 95       	lsr	r23
    1b82:	67 95       	ror	r22
    1b84:	57 95       	ror	r21
    1b86:	47 95       	ror	r20
    1b88:	16 94       	lsr	r1
    1b8a:	d1 f7       	brne	.-12     	; 0x1b80 <CANMOBSet+0x104>
    1b8c:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f00f1>
	CANIDT2 = u32MessageID >> 13;
    1b90:	ac 01       	movw	r20, r24
    1b92:	bd 01       	movw	r22, r26
    1b94:	03 2e       	mov	r0, r19
    1b96:	3d e0       	ldi	r19, 0x0D	; 13
    1b98:	76 95       	lsr	r23
    1b9a:	67 95       	ror	r22
    1b9c:	57 95       	ror	r21
    1b9e:	47 95       	ror	r20
    1ba0:	3a 95       	dec	r19
    1ba2:	d1 f7       	brne	.-12     	; 0x1b98 <CANMOBSet+0x11c>
    1ba4:	30 2d       	mov	r19, r0
    1ba6:	40 93 f2 00 	sts	0x00F2, r20	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f00f2>
	CANIDT1 = u32MessageID >> 21;
    1baa:	07 2e       	mov	r0, r23
    1bac:	75 e1       	ldi	r23, 0x15	; 21
    1bae:	b6 95       	lsr	r27
    1bb0:	a7 95       	ror	r26
    1bb2:	97 95       	ror	r25
    1bb4:	87 95       	ror	r24
    1bb6:	7a 95       	dec	r23
    1bb8:	d1 f7       	brne	.-12     	; 0x1bae <CANMOBSet+0x132>
    1bba:	70 2d       	mov	r23, r0
    1bbc:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f00f3>
	
	// Setup mask for the cmd (require matching ID extention bit)
	CANIDM4 = psDef->bRTRMask?(1 << RTRTAG):0;
    1bc0:	ae 2d       	mov	r26, r14
    1bc2:	c6 01       	movw	r24, r12
    1bc4:	07 96       	adiw	r24, 0x07	; 7
    1bc6:	a1 1d       	adc	r26, r1
    1bc8:	fc 01       	movw	r30, r24
    1bca:	84 91       	lpm	r24, Z
    1bcc:	a7 fd       	sbrc	r26, 7
    1bce:	80 81       	ld	r24, Z
    1bd0:	88 23       	and	r24, r24
    1bd2:	11 f0       	breq	.+4      	; 0x1bd8 <CANMOBSet+0x15c>
    1bd4:	84 e0       	ldi	r24, 0x04	; 4
    1bd6:	01 c0       	rjmp	.+2      	; 0x1bda <CANMOBSet+0x15e>
    1bd8:	80 e0       	ldi	r24, 0x00	; 0
    1bda:	e4 ef       	ldi	r30, 0xF4	; 244
    1bdc:	f0 e0       	ldi	r31, 0x00	; 0
    1bde:	80 83       	st	Z, r24
	CANIDM4 |= (1 << IDEMSK);
    1be0:	80 81       	ld	r24, Z
    1be2:	81 60       	ori	r24, 0x01	; 1
    1be4:	80 83       	st	Z, r24
	CANIDM3 = 0;
    1be6:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7f00f5>
	CANIDM2 = psDef->u16IDMask << 5;
    1bea:	ae 2d       	mov	r26, r14
    1bec:	c6 01       	movw	r24, r12
    1bee:	04 96       	adiw	r24, 0x04	; 4
    1bf0:	a1 1d       	adc	r26, r1
    1bf2:	fc 01       	movw	r30, r24
    1bf4:	5a 2f       	mov	r21, r26
    1bf6:	0e 94 c8 26 	call	0x4d90	; 0x4d90 <__xload_2>
    1bfa:	62 95       	swap	r22
    1bfc:	66 0f       	add	r22, r22
    1bfe:	60 7e       	andi	r22, 0xE0	; 224
    1c00:	60 93 f6 00 	sts	0x00F6, r22	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7f00f6>
	CANIDM1 = psDef->u16IDMask >> 3;
    1c04:	fc 01       	movw	r30, r24
    1c06:	5a 2f       	mov	r21, r26
    1c08:	0e 94 c8 26 	call	0x4d90	; 0x4d90 <__xload_2>
    1c0c:	76 95       	lsr	r23
    1c0e:	67 95       	ror	r22
    1c10:	76 95       	lsr	r23
    1c12:	67 95       	ror	r22
    1c14:	76 95       	lsr	r23
    1c16:	67 95       	ror	r22
    1c18:	60 93 f7 00 	sts	0x00F7, r22	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7f00f7>
	
	// Set the data into the FIFO
	while( u8DataLen )
    1c1c:	04 c0       	rjmp	.+8      	; 0x1c26 <CANMOBSet+0x1aa>
	{
		CANMSG = *pu8Data;
    1c1e:	89 91       	ld	r24, Y+
    1c20:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
		
		pu8Data++;
		u8DataLen--;
    1c24:	01 50       	subi	r16, 0x01	; 1
	CANIDM3 = 0;
	CANIDM2 = psDef->u16IDMask << 5;
	CANIDM1 = psDef->u16IDMask >> 3;
	
	// Set the data into the FIFO
	while( u8DataLen )
    1c26:	01 11       	cpse	r16, r1
    1c28:	fa cf       	rjmp	.-12     	; 0x1c1e <CANMOBSet+0x1a2>
		pu8Data++;
		u8DataLen--;
	}
	
	// Send it now
	CANCDMOB = u8CANCDMOBValue;
    1c2a:	10 93 ef 00 	sts	0x00EF, r17	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
	
	// Enable (activates the MOB) or disable the MOB interrupt
	if( psDef->u8Mode != CAN_DISABLED )
    1c2e:	f6 01       	movw	r30, r12
    1c30:	84 91       	lpm	r24, Z
    1c32:	e7 fc       	sbrc	r14, 7
    1c34:	80 81       	ld	r24, Z
    1c36:	88 23       	and	r24, r24
    1c38:	69 f0       	breq	.+26     	; 0x1c54 <CANMOBSet+0x1d8>
	{
		CANIE2 |= (1 << u8MOBIndex);
    1c3a:	ee ed       	ldi	r30, 0xDE	; 222
    1c3c:	f0 e0       	ldi	r31, 0x00	; 0
    1c3e:	20 81       	ld	r18, Z
    1c40:	81 e0       	ldi	r24, 0x01	; 1
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	02 c0       	rjmp	.+4      	; 0x1c4a <CANMOBSet+0x1ce>
    1c46:	88 0f       	add	r24, r24
    1c48:	99 1f       	adc	r25, r25
    1c4a:	fa 94       	dec	r15
    1c4c:	e2 f7       	brpl	.-8      	; 0x1c46 <CANMOBSet+0x1ca>
    1c4e:	82 2b       	or	r24, r18
    1c50:	80 83       	st	Z, r24
    1c52:	0d c0       	rjmp	.+26     	; 0x1c6e <CANMOBSet+0x1f2>
	}
	else
	{
		CANIE2 &= (uint8_t)~(1 << u8MOBIndex);
    1c54:	ee ed       	ldi	r30, 0xDE	; 222
    1c56:	f0 e0       	ldi	r31, 0x00	; 0
    1c58:	20 81       	ld	r18, Z
    1c5a:	81 e0       	ldi	r24, 0x01	; 1
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	02 c0       	rjmp	.+4      	; 0x1c64 <CANMOBSet+0x1e8>
    1c60:	88 0f       	add	r24, r24
    1c62:	99 1f       	adc	r25, r25
    1c64:	fa 94       	dec	r15
    1c66:	e2 f7       	brpl	.-8      	; 0x1c60 <CANMOBSet+0x1e4>
    1c68:	80 95       	com	r24
    1c6a:	82 23       	and	r24, r18
    1c6c:	80 83       	st	Z, r24
	}
	
	// Restore CAN interrupts
	CANGIE = savedCANGIE;
    1c6e:	b0 92 db 00 	sts	0x00DB, r11	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f00db>
}
    1c72:	df 91       	pop	r29
    1c74:	cf 91       	pop	r28
    1c76:	1f 91       	pop	r17
    1c78:	0f 91       	pop	r16
    1c7a:	ff 90       	pop	r15
    1c7c:	ef 90       	pop	r14
    1c7e:	df 90       	pop	r13
    1c80:	cf 90       	pop	r12
    1c82:	bf 90       	pop	r11
    1c84:	9f 90       	pop	r9
    1c86:	8f 90       	pop	r8
    1c88:	7f 90       	pop	r7
    1c8a:	6f 90       	pop	r6
    1c8c:	08 95       	ret

Disassembly of section .text.CANSendMessageInternal:

00001fde <CANSendMessageInternal>:

static void CANSendMessageInternal( ECANMessageType eType,
									uint8_t* pu8Data,
									uint8_t u8DataLen,	
									bool bRetransmit )
{
    1fde:	6f 92       	push	r6
    1fe0:	7f 92       	push	r7
    1fe2:	8f 92       	push	r8
    1fe4:	ef 92       	push	r14
    1fe6:	ff 92       	push	r15
    1fe8:	0f 93       	push	r16
    1fea:	cf 93       	push	r28
    1fec:	df 93       	push	r29
    1fee:	c8 2f       	mov	r28, r24
    1ff0:	7b 01       	movw	r14, r22
    1ff2:	04 2f       	mov	r16, r20
    1ff4:	d2 2f       	mov	r29, r18
	const SMOBDef* psDef = NULL;
	
	if( ECANMessageType_ModuleAnnouncement == eType )
    1ff6:	88 23       	and	r24, r24
    1ff8:	f9 f0       	breq	.+62     	; 0x2038 <CANSendMessageInternal+0x5a>
	{
		psDef = &sg_sMOBModuleAnnouncement;
	}
	else if( ECANMessageType_ModuleStatus1 == eType )
    1ffa:	81 30       	cpi	r24, 0x01	; 1
    1ffc:	31 f1       	breq	.+76     	; 0x204a <CANSendMessageInternal+0x6c>
	{
		psDef = &sg_sMOBModuleStatus1;
	}
	else if( ECANMessageType_ModuleStatus2 == eType )
    1ffe:	82 30       	cpi	r24, 0x02	; 2
    2000:	69 f1       	breq	.+90     	; 0x205c <CANSendMessageInternal+0x7e>
	{
		psDef = &sg_sMOBModuleStatus2;
	}
	else if( ECANMessageType_ModuleStatus3 == eType )
    2002:	83 30       	cpi	r24, 0x03	; 3
    2004:	a1 f1       	breq	.+104    	; 0x206e <CANSendMessageInternal+0x90>
	{
		psDef = &sg_sMOBModuleStatus3;
	}
	else if( ECANMessageType_ModuleCellCommStat1 == eType )
    2006:	86 30       	cpi	r24, 0x06	; 6
    2008:	d9 f1       	breq	.+118    	; 0x2080 <CANSendMessageInternal+0xa2>
	{
		psDef = &sg_sMOBModuleCellCommStat1;
	}
	else if( ECANMessageType_ModuleCellCommStat2 == eType )
    200a:	87 30       	cpi	r24, 0x07	; 7
    200c:	09 f4       	brne	.+2      	; 0x2010 <CANSendMessageInternal+0x32>
    200e:	41 c0       	rjmp	.+130    	; 0x2092 <CANSendMessageInternal+0xb4>
	{
		psDef = &sg_sMOBModuleCellCommStat2;
	}
	else if( ECANMessageType_ModuleHardwareDetail == eType )
    2010:	85 30       	cpi	r24, 0x05	; 5
    2012:	09 f4       	brne	.+2      	; 0x2016 <CANSendMessageInternal+0x38>
    2014:	47 c0       	rjmp	.+142    	; 0x20a4 <CANSendMessageInternal+0xc6>
	{
		psDef = &sg_sMOBModuleHardwareDetail;
	}
	else if( ECANMessageType_ModuleCellDetail == eType )
    2016:	84 30       	cpi	r24, 0x04	; 4
    2018:	09 f4       	brne	.+2      	; 0x201c <CANSendMessageInternal+0x3e>
    201a:	4d c0       	rjmp	.+154    	; 0x20b6 <CANSendMessageInternal+0xd8>
	{
		psDef = &sg_sMOBModuleCellDetail;
	}
	else if( ECANMessageType_ModuleRequestTime == eType )
    201c:	88 30       	cpi	r24, 0x08	; 8
    201e:	09 f4       	brne	.+2      	; 0x2022 <CANSendMessageInternal+0x44>
    2020:	53 c0       	rjmp	.+166    	; 0x20c8 <CANSendMessageInternal+0xea>
		psDef = &sg_sMOBModuleRequestTime;
	}
	else
	{
		// Invalid message type
		MBASSERT(0);
    2022:	43 e4       	ldi	r20, 0x43	; 67
    2024:	51 e0       	ldi	r21, 0x01	; 1
    2026:	6c e4       	ldi	r22, 0x4C	; 76
    2028:	73 e0       	ldi	r23, 0x03	; 3
    202a:	80 e0       	ldi	r24, 0x00	; 0
    202c:	0e 94 87 23 	call	0x470e	; 0x470e <PlatformAssert>
static void CANSendMessageInternal( ECANMessageType eType,
									uint8_t* pu8Data,
									uint8_t u8DataLen,	
									bool bRetransmit )
{
	const SMOBDef* psDef = NULL;
    2030:	61 2c       	mov	r6, r1
    2032:	71 2c       	mov	r7, r1
    2034:	81 2c       	mov	r8, r1
    2036:	50 c0       	rjmp	.+160    	; 0x20d8 <CANSendMessageInternal+0xfa>
	
	if( ECANMessageType_ModuleAnnouncement == eType )
	{
		psDef = &sg_sMOBModuleAnnouncement;
    2038:	0f 2e       	mov	r0, r31
    203a:	f7 e9       	ldi	r31, 0x97	; 151
    203c:	6f 2e       	mov	r6, r31
    203e:	f3 e0       	ldi	r31, 0x03	; 3
    2040:	7f 2e       	mov	r7, r31
    2042:	f0 e0       	ldi	r31, 0x00	; 0
    2044:	8f 2e       	mov	r8, r31
    2046:	f0 2d       	mov	r31, r0
    2048:	47 c0       	rjmp	.+142    	; 0x20d8 <CANSendMessageInternal+0xfa>
	}
	else if( ECANMessageType_ModuleStatus1 == eType )
	{
		psDef = &sg_sMOBModuleStatus1;
    204a:	0f 2e       	mov	r0, r31
    204c:	ff e8       	ldi	r31, 0x8F	; 143
    204e:	6f 2e       	mov	r6, r31
    2050:	f3 e0       	ldi	r31, 0x03	; 3
    2052:	7f 2e       	mov	r7, r31
    2054:	f0 e0       	ldi	r31, 0x00	; 0
    2056:	8f 2e       	mov	r8, r31
    2058:	f0 2d       	mov	r31, r0
    205a:	3e c0       	rjmp	.+124    	; 0x20d8 <CANSendMessageInternal+0xfa>
	}
	else if( ECANMessageType_ModuleStatus2 == eType )
	{
		psDef = &sg_sMOBModuleStatus2;
    205c:	0f 2e       	mov	r0, r31
    205e:	f7 e8       	ldi	r31, 0x87	; 135
    2060:	6f 2e       	mov	r6, r31
    2062:	f3 e0       	ldi	r31, 0x03	; 3
    2064:	7f 2e       	mov	r7, r31
    2066:	f0 e0       	ldi	r31, 0x00	; 0
    2068:	8f 2e       	mov	r8, r31
    206a:	f0 2d       	mov	r31, r0
    206c:	35 c0       	rjmp	.+106    	; 0x20d8 <CANSendMessageInternal+0xfa>
	}
	else if( ECANMessageType_ModuleStatus3 == eType )
	{
		psDef = &sg_sMOBModuleStatus3;
    206e:	0f 2e       	mov	r0, r31
    2070:	ff e7       	ldi	r31, 0x7F	; 127
    2072:	6f 2e       	mov	r6, r31
    2074:	f3 e0       	ldi	r31, 0x03	; 3
    2076:	7f 2e       	mov	r7, r31
    2078:	f0 e0       	ldi	r31, 0x00	; 0
    207a:	8f 2e       	mov	r8, r31
    207c:	f0 2d       	mov	r31, r0
    207e:	2c c0       	rjmp	.+88     	; 0x20d8 <CANSendMessageInternal+0xfa>
	}
	else if( ECANMessageType_ModuleCellCommStat1 == eType )
	{
		psDef = &sg_sMOBModuleCellCommStat1;
    2080:	0f 2e       	mov	r0, r31
    2082:	f7 e7       	ldi	r31, 0x77	; 119
    2084:	6f 2e       	mov	r6, r31
    2086:	f3 e0       	ldi	r31, 0x03	; 3
    2088:	7f 2e       	mov	r7, r31
    208a:	f0 e0       	ldi	r31, 0x00	; 0
    208c:	8f 2e       	mov	r8, r31
    208e:	f0 2d       	mov	r31, r0
    2090:	23 c0       	rjmp	.+70     	; 0x20d8 <CANSendMessageInternal+0xfa>
	}
	else if( ECANMessageType_ModuleCellCommStat2 == eType )
	{
		psDef = &sg_sMOBModuleCellCommStat2;
    2092:	0f 2e       	mov	r0, r31
    2094:	ff e6       	ldi	r31, 0x6F	; 111
    2096:	6f 2e       	mov	r6, r31
    2098:	f3 e0       	ldi	r31, 0x03	; 3
    209a:	7f 2e       	mov	r7, r31
    209c:	f0 e0       	ldi	r31, 0x00	; 0
    209e:	8f 2e       	mov	r8, r31
    20a0:	f0 2d       	mov	r31, r0
    20a2:	1a c0       	rjmp	.+52     	; 0x20d8 <CANSendMessageInternal+0xfa>
	}
	else if( ECANMessageType_ModuleHardwareDetail == eType )
	{
		psDef = &sg_sMOBModuleHardwareDetail;
    20a4:	0f 2e       	mov	r0, r31
    20a6:	ff e5       	ldi	r31, 0x5F	; 95
    20a8:	6f 2e       	mov	r6, r31
    20aa:	f3 e0       	ldi	r31, 0x03	; 3
    20ac:	7f 2e       	mov	r7, r31
    20ae:	f0 e0       	ldi	r31, 0x00	; 0
    20b0:	8f 2e       	mov	r8, r31
    20b2:	f0 2d       	mov	r31, r0
    20b4:	11 c0       	rjmp	.+34     	; 0x20d8 <CANSendMessageInternal+0xfa>
	}
	else if( ECANMessageType_ModuleCellDetail == eType )
	{
		psDef = &sg_sMOBModuleCellDetail;
    20b6:	0f 2e       	mov	r0, r31
    20b8:	f7 e6       	ldi	r31, 0x67	; 103
    20ba:	6f 2e       	mov	r6, r31
    20bc:	f3 e0       	ldi	r31, 0x03	; 3
    20be:	7f 2e       	mov	r7, r31
    20c0:	f0 e0       	ldi	r31, 0x00	; 0
    20c2:	8f 2e       	mov	r8, r31
    20c4:	f0 2d       	mov	r31, r0
    20c6:	08 c0       	rjmp	.+16     	; 0x20d8 <CANSendMessageInternal+0xfa>
	}
	else if( ECANMessageType_ModuleRequestTime == eType )
	{
		psDef = &sg_sMOBModuleRequestTime;
    20c8:	0f 2e       	mov	r0, r31
    20ca:	f7 e5       	ldi	r31, 0x57	; 87
    20cc:	6f 2e       	mov	r6, r31
    20ce:	f3 e0       	ldi	r31, 0x03	; 3
    20d0:	7f 2e       	mov	r7, r31
    20d2:	f0 e0       	ldi	r31, 0x00	; 0
    20d4:	8f 2e       	mov	r8, r31
    20d6:	f0 2d       	mov	r31, r0
	{
		// Invalid message type
		MBASSERT(0);
	}
	
	if(bRetransmit && sg_bInRetransmit) {
    20d8:	dd 23       	and	r29, r29
    20da:	21 f0       	breq	.+8      	; 0x20e4 <CANSendMessageInternal+0x106>
    20dc:	80 91 63 09 	lds	r24, 0x0963	; 0x800963 <sg_bInRetransmit>
    20e0:	81 11       	cpse	r24, r1
    20e2:	30 c0       	rjmp	.+96     	; 0x2144 <CANSendMessageInternal+0x166>
		// Already in a retransmit, don't allow nested retries
		return;
	}
	if( bRetransmit || (false == sg_bBusy) )
    20e4:	d1 11       	cpse	r29, r1
    20e6:	04 c0       	rjmp	.+8      	; 0x20f0 <CANSendMessageInternal+0x112>
    20e8:	80 91 67 09 	lds	r24, 0x0967	; 0x800967 <sg_bBusy>
    20ec:	81 11       	cpse	r24, r1
    20ee:	2a c0       	rjmp	.+84     	; 0x2144 <CANSendMessageInternal+0x166>
	{
		sg_bBusy = true;
    20f0:	81 e0       	ldi	r24, 0x01	; 1
    20f2:	80 93 67 09 	sts	0x0967, r24	; 0x800967 <sg_bBusy>
		
		// Save this message info for retransmit later if needed
		if( false == bRetransmit )
    20f6:	d1 11       	cpse	r29, r1
    20f8:	1a c0       	rjmp	.+52     	; 0x212e <CANSendMessageInternal+0x150>
		{
			sg_u8TransmitAttempts = 0;
    20fa:	10 92 66 09 	sts	0x0966, r1	; 0x800966 <sg_u8TransmitAttempts>
			sg_eLastTXType = eType;
    20fe:	c0 93 65 09 	sts	0x0965, r28	; 0x800965 <sg_eLastTXType>
			MBASSERT(u8DataLen <= CAN_MAX_MSG_SIZE);
    2102:	09 30       	cpi	r16, 0x09	; 9
    2104:	38 f0       	brcs	.+14     	; 0x2114 <CANSendMessageInternal+0x136>
    2106:	43 e5       	ldi	r20, 0x53	; 83
    2108:	51 e0       	ldi	r21, 0x01	; 1
    210a:	6c e4       	ldi	r22, 0x4C	; 76
    210c:	73 e0       	ldi	r23, 0x03	; 3
    210e:	80 e0       	ldi	r24, 0x00	; 0
    2110:	0e 94 87 23 	call	0x470e	; 0x470e <PlatformAssert>
			memcpy(sg_u8LastTXData, pu8Data, u8DataLen);
    2114:	20 2f       	mov	r18, r16
    2116:	30 e0       	ldi	r19, 0x00	; 0
    2118:	c7 01       	movw	r24, r14
    211a:	a0 e8       	ldi	r26, 0x80	; 128
    211c:	ac 01       	movw	r20, r24
    211e:	6a 2f       	mov	r22, r26
    2120:	8d e3       	ldi	r24, 0x3D	; 61
    2122:	99 e0       	ldi	r25, 0x09	; 9
    2124:	0e 94 13 23 	call	0x4626	; 0x4626 <memcpy>
			sg_u8LastTXDataLen = u8DataLen;
    2128:	00 93 64 09 	sts	0x0964, r16	; 0x800964 <sg_u8LastTXDataLen>
    212c:	05 c0       	rjmp	.+10     	; 0x2138 <CANSendMessageInternal+0x15a>
		}
		else
		{
			sg_u8TransmitAttempts++;
    212e:	80 91 66 09 	lds	r24, 0x0966	; 0x800966 <sg_u8TransmitAttempts>
    2132:	8f 5f       	subi	r24, 0xFF	; 255
    2134:	80 93 66 09 	sts	0x0966, r24	; 0x800966 <sg_u8TransmitAttempts>
		}
		
		// Send it now
		CANMOBSet( CANMOB_TX_IDX, psDef, pu8Data, u8DataLen );
    2138:	97 01       	movw	r18, r14
    213a:	68 2d       	mov	r22, r8
    213c:	a3 01       	movw	r20, r6
    213e:	81 e0       	ldi	r24, 0x01	; 1
    2140:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <CANMOBSet>
	}
}
    2144:	df 91       	pop	r29
    2146:	cf 91       	pop	r28
    2148:	0f 91       	pop	r16
    214a:	ff 90       	pop	r15
    214c:	ef 90       	pop	r14
    214e:	8f 90       	pop	r8
    2150:	7f 90       	pop	r7
    2152:	6f 90       	pop	r6
    2154:	08 95       	ret

Disassembly of section .text.CANMOBInterrupt:

00001e4c <CANMOBInterrupt>:

void CANMOBInterrupt( uint8_t u8MOBIndex )
{
    1e4c:	cf 92       	push	r12
    1e4e:	df 92       	push	r13
    1e50:	ff 92       	push	r15
    1e52:	0f 93       	push	r16
    1e54:	1f 93       	push	r17
    1e56:	cf 93       	push	r28
    1e58:	df 93       	push	r29
    1e5a:	cd b7       	in	r28, 0x3d	; 61
    1e5c:	de b7       	in	r29, 0x3e	; 62
    1e5e:	28 97       	sbiw	r28, 0x08	; 8
    1e60:	0f b6       	in	r0, 0x3f	; 63
    1e62:	f8 94       	cli
    1e64:	de bf       	out	0x3e, r29	; 62
    1e66:	0f be       	out	0x3f, r0	; 63
    1e68:	cd bf       	out	0x3d, r28	; 61
	// Set the MOB page first (and zero the data index)
	CANPAGE = u8MOBIndex << 4;
    1e6a:	98 2f       	mov	r25, r24
    1e6c:	92 95       	swap	r25
    1e6e:	90 7f       	andi	r25, 0xF0	; 240
    1e70:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f00ed>
	
	// Temporarily disable the MOB to examine and modify the registers
	CANIE2 &= (uint8_t)~(1 << u8MOBIndex);
    1e74:	ee ed       	ldi	r30, 0xDE	; 222
    1e76:	f0 e0       	ldi	r31, 0x00	; 0
    1e78:	20 81       	ld	r18, Z
    1e7a:	01 e0       	ldi	r16, 0x01	; 1
    1e7c:	10 e0       	ldi	r17, 0x00	; 0
    1e7e:	08 2e       	mov	r0, r24
    1e80:	02 c0       	rjmp	.+4      	; 0x1e86 <CANMOBInterrupt+0x3a>
    1e82:	00 0f       	add	r16, r16
    1e84:	11 1f       	adc	r17, r17
    1e86:	0a 94       	dec	r0
    1e88:	e2 f7       	brpl	.-8      	; 0x1e82 <CANMOBInterrupt+0x36>
    1e8a:	90 2f       	mov	r25, r16
    1e8c:	90 95       	com	r25
    1e8e:	92 23       	and	r25, r18
    1e90:	90 83       	st	Z, r25
	CANCDMOB &= (uint8_t)~((1 << CONMOB0) | (1 << CONMOB1));
    1e92:	ef ee       	ldi	r30, 0xEF	; 239
    1e94:	f0 e0       	ldi	r31, 0x00	; 0
    1e96:	90 81       	ld	r25, Z
    1e98:	9f 73       	andi	r25, 0x3F	; 63
    1e9a:	90 83       	st	Z, r25
	
	if( CANMOB_RX_IDX == u8MOBIndex )
    1e9c:	81 11       	cpse	r24, r1
    1e9e:	5d c0       	rjmp	.+186    	; 0x1f5a <CANMOBInterrupt+0x10e>
	{
		// TX success?  Just clear it since this is the RX context
		if( CANSTMOB & (1 << TXOK) )
    1ea0:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    1ea4:	86 ff       	sbrs	r24, 6
    1ea6:	09 c0       	rjmp	.+18     	; 0x1eba <CANMOBInterrupt+0x6e>
		{
			// Clear it
			CANSTMOB &= ~(1 << TXOK);
    1ea8:	ee ee       	ldi	r30, 0xEE	; 238
    1eaa:	f0 e0       	ldi	r31, 0x00	; 0
    1eac:	80 81       	ld	r24, Z
    1eae:	8f 7b       	andi	r24, 0xBF	; 191
    1eb0:	80 83       	st	Z, r24
            sg_bBusy = false;
    1eb2:	10 92 67 09 	sts	0x0967, r1	; 0x800967 <sg_bBusy>
            sg_bInRetransmit = false;  // Clear flag on success	
    1eb6:	10 92 63 09 	sts	0x0963, r1	; 0x800963 <sg_bInRetransmit>
		}
		// RX success?
		if( CANSTMOB & (1 << RXOK) )
    1eba:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    1ebe:	85 ff       	sbrs	r24, 5
    1ec0:	38 c0       	rjmp	.+112    	; 0x1f32 <CANMOBInterrupt+0xe6>
		{
			// Clear it
			CANSTMOB &= ~(1 << RXOK);
    1ec2:	ee ee       	ldi	r30, 0xEE	; 238
    1ec4:	f0 e0       	ldi	r31, 0x00	; 0
    1ec6:	80 81       	ld	r24, Z
    1ec8:	8f 7d       	andi	r24, 0xDF	; 223
    1eca:	80 83       	st	Z, r24
		
			if( sg_pfRXCallback )
    1ecc:	c0 90 4d 09 	lds	r12, 0x094D	; 0x80094d <sg_pfRXCallback>
    1ed0:	d0 90 4e 09 	lds	r13, 0x094E	; 0x80094e <sg_pfRXCallback+0x1>
    1ed4:	c1 14       	cp	r12, r1
    1ed6:	d1 04       	cpc	r13, r1
    1ed8:	61 f1       	breq	.+88     	; 0x1f32 <CANMOBInterrupt+0xe6>
			{
				ECANMessageType eType;
				uint16_t u16ID = 0;
				uint8_t u8Data[8];
				uint8_t u8DataLen = CANCDMOB & 0x0f;
    1eda:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    1ede:	8f 70       	andi	r24, 0x0F	; 15
    1ee0:	f8 2e       	mov	r15, r24
				uint8_t u8Index = 0;
			
				// Grab the messageID from the identifier registers
				// TODO: This extraction may be wrong for extended frames
				// but it worked with the real Pack Controller somehow
				u16ID = ((uint16_t)CANIDT1) << 3;
    1ee2:	40 91 f3 00 	lds	r20, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f00f3>
    1ee6:	50 e0       	ldi	r21, 0x00	; 0
    1ee8:	44 0f       	add	r20, r20
    1eea:	55 1f       	adc	r21, r21
    1eec:	44 0f       	add	r20, r20
    1eee:	55 1f       	adc	r21, r21
    1ef0:	44 0f       	add	r20, r20
    1ef2:	55 1f       	adc	r21, r21
				u16ID |= CANIDT2 >> 5;
    1ef4:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f00f2>
    1ef8:	82 95       	swap	r24
    1efa:	86 95       	lsr	r24
    1efc:	87 70       	andi	r24, 0x07	; 7
    1efe:	48 2b       	or	r20, r24
			{
				ECANMessageType eType;
				uint16_t u16ID = 0;
				uint8_t u8Data[8];
				uint8_t u8DataLen = CANCDMOB & 0x0f;
				uint8_t u8Index = 0;
    1f00:	90 e0       	ldi	r25, 0x00	; 0
				// but it worked with the real Pack Controller somehow
				u16ID = ((uint16_t)CANIDT1) << 3;
				u16ID |= CANIDT2 >> 5;
			
				// Pull the data out into a temp buffer
				while( u8Index < u8DataLen )
    1f02:	0a c0       	rjmp	.+20     	; 0x1f18 <CANMOBInterrupt+0xcc>
				{
					u8Data[u8Index] = CANMSG;
    1f04:	20 91 fa 00 	lds	r18, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
    1f08:	e1 e0       	ldi	r30, 0x01	; 1
    1f0a:	f0 e0       	ldi	r31, 0x00	; 0
    1f0c:	ec 0f       	add	r30, r28
    1f0e:	fd 1f       	adc	r31, r29
    1f10:	e9 0f       	add	r30, r25
    1f12:	f1 1d       	adc	r31, r1
    1f14:	20 83       	st	Z, r18
					u8Index++;
    1f16:	9f 5f       	subi	r25, 0xFF	; 255
				// but it worked with the real Pack Controller somehow
				u16ID = ((uint16_t)CANIDT1) << 3;
				u16ID |= CANIDT2 >> 5;
			
				// Pull the data out into a temp buffer
				while( u8Index < u8DataLen )
    1f18:	9f 15       	cp	r25, r15
    1f1a:	a0 f3       	brcs	.-24     	; 0x1f04 <CANMOBInterrupt+0xb8>
					u8Data[u8Index] = CANMSG;
					u8Index++;
				}
			
				// Lookup ID to see if it matches one of ours
				eType = CANLookupCommand( u16ID );
    1f1c:	ca 01       	movw	r24, r20
    1f1e:	0e 94 19 1f 	call	0x3e32	; 0x3e32 <CANLookupCommand>
			
				if( eType != ECANMessageType_MAX )
    1f22:	83 31       	cpi	r24, 0x13	; 19
    1f24:	31 f0       	breq	.+12     	; 0x1f32 <CANMOBInterrupt+0xe6>
				{
					// Call comamnd handler
					sg_pfRXCallback( eType, u8Data, u8DataLen );
    1f26:	4f 2d       	mov	r20, r15
    1f28:	be 01       	movw	r22, r28
    1f2a:	6f 5f       	subi	r22, 0xFF	; 255
    1f2c:	7f 4f       	sbci	r23, 0xFF	; 255
    1f2e:	f6 01       	movw	r30, r12
    1f30:	09 95       	icall
				}
			}
		}
	
		// If receive error, clear the bits
		if( CANSTMOB & ((1 << SERR) | (1 << CERR) | (1 << FERR)) )
    1f32:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    1f36:	8e 70       	andi	r24, 0x0E	; 14
    1f38:	29 f0       	breq	.+10     	; 0x1f44 <CANMOBInterrupt+0xf8>
		{
			// Clear it.  Just ignore
			CANSTMOB &= ~((1 << SERR) | (1 << CERR) | (1 << FERR));
    1f3a:	ee ee       	ldi	r30, 0xEE	; 238
    1f3c:	f0 e0       	ldi	r31, 0x00	; 0
    1f3e:	80 81       	ld	r24, Z
    1f40:	81 7f       	andi	r24, 0xF1	; 241
    1f42:	80 83       	st	Z, r24
		}
	
		// Re-enable RX now
		CANIE2 |= (1 << u8MOBIndex);
    1f44:	ee ed       	ldi	r30, 0xDE	; 222
    1f46:	f0 e0       	ldi	r31, 0x00	; 0
    1f48:	80 81       	ld	r24, Z
    1f4a:	08 2b       	or	r16, r24
    1f4c:	00 83       	st	Z, r16
		CANCDMOB |= (1 << CONMOB1);
    1f4e:	ef ee       	ldi	r30, 0xEF	; 239
    1f50:	f0 e0       	ldi	r31, 0x00	; 0
    1f52:	80 81       	ld	r24, Z
    1f54:	80 68       	ori	r24, 0x80	; 128
    1f56:	80 83       	st	Z, r24
    1f58:	34 c0       	rjmp	.+104    	; 0x1fc2 <CANMOBInterrupt+0x176>
	}
	else if( CANMOB_TX_IDX == u8MOBIndex )
    1f5a:	81 30       	cpi	r24, 0x01	; 1
    1f5c:	91 f5       	brne	.+100    	; 0x1fc2 <CANMOBInterrupt+0x176>
	{
		if( CANSTMOB & (1 << TXOK) )
    1f5e:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    1f62:	86 ff       	sbrs	r24, 6
    1f64:	07 c0       	rjmp	.+14     	; 0x1f74 <CANMOBInterrupt+0x128>
		{
			// Clear it
			CANSTMOB &= ~(1 << TXOK);
    1f66:	ee ee       	ldi	r30, 0xEE	; 238
    1f68:	f0 e0       	ldi	r31, 0x00	; 0
    1f6a:	80 81       	ld	r24, Z
    1f6c:	8f 7b       	andi	r24, 0xBF	; 191
    1f6e:	80 83       	st	Z, r24
		
			sg_bBusy = false;
    1f70:	10 92 67 09 	sts	0x0967, r1	; 0x800967 <sg_bBusy>
		}
		
		// RX success, just clear it since this is the TX context
		if( CANSTMOB & (1 << RXOK) )
    1f74:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    1f78:	85 ff       	sbrs	r24, 5
    1f7a:	05 c0       	rjmp	.+10     	; 0x1f86 <CANMOBInterrupt+0x13a>
		{
			// Clear it
			CANSTMOB &= ~(1 << RXOK);
    1f7c:	ee ee       	ldi	r30, 0xEE	; 238
    1f7e:	f0 e0       	ldi	r31, 0x00	; 0
    1f80:	80 81       	ld	r24, Z
    1f82:	8f 7d       	andi	r24, 0xDF	; 223
    1f84:	80 83       	st	Z, r24
		}

		// If TX Error on transmit (collision with another device)
		// -or- ACK error (nobody listening),
		// retry send
		if( CANSTMOB & ((1 << BERR) | (1 << AERR) | (1 << SERR)) )
    1f86:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    1f8a:	89 71       	andi	r24, 0x19	; 25
    1f8c:	d1 f0       	breq	.+52     	; 0x1fc2 <CANMOBInterrupt+0x176>
		{
			// Clear it
			CANSTMOB &= ~((1 << BERR) | (1 << AERR) | (1 << SERR));
    1f8e:	ee ee       	ldi	r30, 0xEE	; 238
    1f90:	f0 e0       	ldi	r31, 0x00	; 0
    1f92:	80 81       	ld	r24, Z
    1f94:	86 7e       	andi	r24, 0xE6	; 230
    1f96:	80 83       	st	Z, r24

			if( sg_u8TransmitAttempts < 20 )
    1f98:	80 91 66 09 	lds	r24, 0x0966	; 0x800966 <sg_u8TransmitAttempts>
    1f9c:	84 31       	cpi	r24, 0x14	; 20
    1f9e:	68 f4       	brcc	.+26     	; 0x1fba <CANMOBInterrupt+0x16e>
			{
				// Retransmit now
               sg_bInRetransmit = true;  // Set flag before retry
    1fa0:	81 e0       	ldi	r24, 0x01	; 1
    1fa2:	80 93 63 09 	sts	0x0963, r24	; 0x800963 <sg_bInRetransmit>
               CANSendMessageInternal( sg_eLastTXType, sg_u8LastTXData, sg_u8LastTXDataLen, true );
    1fa6:	21 e0       	ldi	r18, 0x01	; 1
    1fa8:	40 91 64 09 	lds	r20, 0x0964	; 0x800964 <sg_u8LastTXDataLen>
    1fac:	6d e3       	ldi	r22, 0x3D	; 61
    1fae:	79 e0       	ldi	r23, 0x09	; 9
    1fb0:	80 91 65 09 	lds	r24, 0x0965	; 0x800965 <sg_eLastTXType>
    1fb4:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <CANSendMessageInternal>
    1fb8:	04 c0       	rjmp	.+8      	; 0x1fc2 <CANMOBInterrupt+0x176>
			}
			else
			{
				// Retries exhausted.  Give up
				sg_bBusy = false;
    1fba:	10 92 67 09 	sts	0x0967, r1	; 0x800967 <sg_bBusy>
                sg_bInRetransmit = false;
    1fbe:	10 92 63 09 	sts	0x0963, r1	; 0x800963 <sg_bInRetransmit>
			}
		}
	}
}
    1fc2:	28 96       	adiw	r28, 0x08	; 8
    1fc4:	0f b6       	in	r0, 0x3f	; 63
    1fc6:	f8 94       	cli
    1fc8:	de bf       	out	0x3e, r29	; 62
    1fca:	0f be       	out	0x3f, r0	; 63
    1fcc:	cd bf       	out	0x3d, r28	; 61
    1fce:	df 91       	pop	r29
    1fd0:	cf 91       	pop	r28
    1fd2:	1f 91       	pop	r17
    1fd4:	0f 91       	pop	r16
    1fd6:	ff 90       	pop	r15
    1fd8:	df 90       	pop	r13
    1fda:	cf 90       	pop	r12
    1fdc:	08 95       	ret

Disassembly of section .text.__vector_18:

0000252c <__vector_18>:

// Generic CAN interrupt handler
// Check interrrupt sources and clear them (by servicing or explicit clearing)
ISR(CAN_INT_vect, ISR_BLOCK)
{
    252c:	1f 92       	push	r1
    252e:	0f 92       	push	r0
    2530:	0f b6       	in	r0, 0x3f	; 63
    2532:	0f 92       	push	r0
    2534:	11 24       	eor	r1, r1
    2536:	0f 93       	push	r16
    2538:	1f 93       	push	r17
    253a:	2f 93       	push	r18
    253c:	3f 93       	push	r19
    253e:	4f 93       	push	r20
    2540:	5f 93       	push	r21
    2542:	6f 93       	push	r22
    2544:	7f 93       	push	r23
    2546:	8f 93       	push	r24
    2548:	9f 93       	push	r25
    254a:	af 93       	push	r26
    254c:	bf 93       	push	r27
    254e:	cf 93       	push	r28
    2550:	df 93       	push	r29
    2552:	ef 93       	push	r30
    2554:	ff 93       	push	r31
	// Save state we'll need to restore
	uint8_t saved_cangie = CANGIE;
    2556:	eb ed       	ldi	r30, 0xDB	; 219
    2558:	f0 e0       	ldi	r31, 0x00	; 0
    255a:	d0 81       	ld	r29, Z
	uint8_t saved_canie2 = CANIE2;	// Temporarily disable CAN interrupts to prevent reentry
    255c:	10 91 de 00 	lds	r17, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7f00de>
	CANGIE &= (uint8_t)~(1 << ENIT);
    2560:	80 81       	ld	r24, Z
    2562:	8f 77       	andi	r24, 0x7F	; 127
    2564:	80 83       	st	Z, r24

	// Do NOT re-enable global interrupts - this causes race conditions!
	
	 uint8_t sit = CANSIT2;
    2566:	c0 91 e0 00 	lds	r28, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f00e0>
	 
	 // Most common interrupts first  *claude
	 if(sit & (1 << CANMOB_RX_IDX)) {
    256a:	c0 ff       	sbrs	r28, 0
    256c:	0c c0       	rjmp	.+24     	; 0x2586 <__vector_18+0x5a>
		 CANMOBInterrupt(CANMOB_RX_IDX);
    256e:	80 e0       	ldi	r24, 0x00	; 0
    2570:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <CANMOBInterrupt>
		 CANMOBSet(CANMOB_RX_IDX, &sg_sMOBGenericReceive, NULL, 0);
    2574:	00 e0       	ldi	r16, 0x00	; 0
    2576:	20 e0       	ldi	r18, 0x00	; 0
    2578:	30 e0       	ldi	r19, 0x00	; 0
    257a:	4f e9       	ldi	r20, 0x9F	; 159
    257c:	53 e0       	ldi	r21, 0x03	; 3
    257e:	60 e0       	ldi	r22, 0x00	; 0
    2580:	80 e0       	ldi	r24, 0x00	; 0
    2582:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <CANMOBSet>
	 }
	 
	
	// Check TX MOB
	if( sit & (1 << CANMOB_TX_IDX) )
    2586:	c1 ff       	sbrs	r28, 1
    2588:	03 c0       	rjmp	.+6      	; 0x2590 <__vector_18+0x64>
	{
		CANMOBInterrupt( CANMOB_TX_IDX );
    258a:	81 e0       	ldi	r24, 0x01	; 1
    258c:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <CANMOBInterrupt>
	}
	
	// Now the generic, non-MOB interrupts (some of which may have already been handled by the MOB handler)
	
	// Bus Off interrupt
	if( CANGIT & (1 << BOFFIT) )
    2590:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    2594:	86 ff       	sbrs	r24, 6
    2596:	03 c0       	rjmp	.+6      	; 0x259e <__vector_18+0x72>
	{
		// Just clear it for now
		CANGIT = (1 << BOFFIT);
    2598:	80 e4       	ldi	r24, 0x40	; 64
    259a:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
	}
	
	// Frame buffer receive (burst receive interrupt)
	// This should not be used
	if( CANGIT & (1 << BXOK) )
    259e:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    25a2:	84 ff       	sbrs	r24, 4
    25a4:	0a c0       	rjmp	.+20     	; 0x25ba <__vector_18+0x8e>
	{
		MBASSERT(0);
    25a6:	45 ef       	ldi	r20, 0xF5	; 245
    25a8:	51 e0       	ldi	r21, 0x01	; 1
    25aa:	6c e4       	ldi	r22, 0x4C	; 76
    25ac:	73 e0       	ldi	r23, 0x03	; 3
    25ae:	80 e0       	ldi	r24, 0x00	; 0
    25b0:	0e 94 87 23 	call	0x470e	; 0x470e <PlatformAssert>
		
		// TODO: Must write the CONMOB fields of the MOB that interrupted first?
		// Just clear it for now
		CANGIT = (1 << BXOK);
    25b4:	80 e1       	ldi	r24, 0x10	; 16
    25b6:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
	}
	
	// Bit stuffing error on receive
	if( CANGIT & (1 << SERG) )
    25ba:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    25be:	83 ff       	sbrs	r24, 3
    25c0:	03 c0       	rjmp	.+6      	; 0x25c8 <__vector_18+0x9c>
	{
		// Just clear it for now.  Ignored.
		CANGIT = (1 << SERG);
    25c2:	88 e0       	ldi	r24, 0x08	; 8
    25c4:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
	}
	
	// CRC error on receive
	if( CANGIT & (1 << CERG) )
    25c8:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    25cc:	82 ff       	sbrs	r24, 2
    25ce:	03 c0       	rjmp	.+6      	; 0x25d6 <__vector_18+0xaa>
	{
		// Just clear it for now.  Ignored.
		CANGIT = (1 << CERG);
    25d0:	84 e0       	ldi	r24, 0x04	; 4
    25d2:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
	}
	
	// Form error
	if( CANGIT & (1 << FERG) )
    25d6:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    25da:	81 ff       	sbrs	r24, 1
    25dc:	03 c0       	rjmp	.+6      	; 0x25e4 <__vector_18+0xb8>
	{
		// If detected form error on transmit, could be duplicate to MOB error interrupt (see 16.8.2 - Interrupt Behavior)
		// Ignore this one
		
		// Just clear it for now.  Ignored.
		CANGIT = (1 << FERG);
    25de:	82 e0       	ldi	r24, 0x02	; 2
    25e0:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
	}
	
	// ACK missing on transmit (nobody's listening! (or failure on transmit???))
	if( CANGIT & (1 << AERG) )
    25e4:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    25e8:	80 ff       	sbrs	r24, 0
    25ea:	13 c0       	rjmp	.+38     	; 0x2612 <__vector_18+0xe6>
	{
		// Clear the interrupt
		CANGIT = (1 << AERG);
    25ec:	81 e0       	ldi	r24, 0x01	; 1
    25ee:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
		
		if( sg_u8TransmitAttempts < 20 )
    25f2:	80 91 66 09 	lds	r24, 0x0966	; 0x800966 <sg_u8TransmitAttempts>
    25f6:	84 31       	cpi	r24, 0x14	; 20
    25f8:	50 f4       	brcc	.+20     	; 0x260e <__vector_18+0xe2>
		{
			// Retransmit now
			CANSendMessageInternal( sg_eLastTXType, sg_u8LastTXData, sg_u8LastTXDataLen, true );
    25fa:	21 e0       	ldi	r18, 0x01	; 1
    25fc:	40 91 64 09 	lds	r20, 0x0964	; 0x800964 <sg_u8LastTXDataLen>
    2600:	6d e3       	ldi	r22, 0x3D	; 61
    2602:	79 e0       	ldi	r23, 0x09	; 9
    2604:	80 91 65 09 	lds	r24, 0x0965	; 0x800965 <sg_eLastTXType>
    2608:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <CANSendMessageInternal>
    260c:	02 c0       	rjmp	.+4      	; 0x2612 <__vector_18+0xe6>
		}
		else
		{
			// Retries exhausted.  Give up
			sg_bBusy = false;
    260e:	10 92 67 09 	sts	0x0967, r1	; 0x800967 <sg_bBusy>
		}
	}

	// Reenable CAN general interrupt	
//	CANGIE |= (1 << ENIT);
    CANIE2 = saved_canie2;
    2612:	10 93 de 00 	sts	0x00DE, r17	; 0x8000de <__TEXT_REGION_LENGTH__+0x7f00de>
    CANGIE = saved_cangie;
    2616:	d0 93 db 00 	sts	0x00DB, r29	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f00db>
}
    261a:	ff 91       	pop	r31
    261c:	ef 91       	pop	r30
    261e:	df 91       	pop	r29
    2620:	cf 91       	pop	r28
    2622:	bf 91       	pop	r27
    2624:	af 91       	pop	r26
    2626:	9f 91       	pop	r25
    2628:	8f 91       	pop	r24
    262a:	7f 91       	pop	r23
    262c:	6f 91       	pop	r22
    262e:	5f 91       	pop	r21
    2630:	4f 91       	pop	r20
    2632:	3f 91       	pop	r19
    2634:	2f 91       	pop	r18
    2636:	1f 91       	pop	r17
    2638:	0f 91       	pop	r16
    263a:	0f 90       	pop	r0
    263c:	0f be       	out	0x3f, r0	; 63
    263e:	0f 90       	pop	r0
    2640:	1f 90       	pop	r1
    2642:	18 95       	reti

Disassembly of section .text.CANSendMessage:

00004c70 <CANSendMessage>:
					 uint8_t* pu8Data,
					 uint8_t u8DataLen )
{
	// If we're busy, kick it back so we're cooperatively multitasking
	// rather than spin locking
	if (sg_bBusy)
    4c70:	90 91 67 09 	lds	r25, 0x0967	; 0x800967 <sg_bBusy>
    4c74:	91 11       	cpse	r25, r1
    4c76:	05 c0       	rjmp	.+10     	; 0x4c82 <CANSendMessage+0x12>
	{
		return(false);
	}

	CANSendMessageInternal( eType, pu8Data, u8DataLen, false );
    4c78:	20 e0       	ldi	r18, 0x00	; 0
    4c7a:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <CANSendMessageInternal>
	return( true );
    4c7e:	81 e0       	ldi	r24, 0x01	; 1
    4c80:	08 95       	ret
{
	// If we're busy, kick it back so we're cooperatively multitasking
	// rather than spin locking
	if (sg_bBusy)
	{
		return(false);
    4c82:	80 e0       	ldi	r24, 0x00	; 0
	}

	CANSendMessageInternal( eType, pu8Data, u8DataLen, false );
	return( true );
}
    4c84:	08 95       	ret

Disassembly of section .text.CANSetRXCallback:

00004df0 <CANSetRXCallback>:

void CANSetRXCallback( void (*pfCallback)(ECANMessageType eType, uint8_t* pu8Data, uint8_t u8DataLen) )
{
	sg_pfRXCallback = pfCallback;
    4df0:	90 93 4e 09 	sts	0x094E, r25	; 0x80094e <sg_pfRXCallback+0x1>
    4df4:	80 93 4d 09 	sts	0x094D, r24	; 0x80094d <sg_pfRXCallback>
    4df8:	08 95       	ret

Disassembly of section .text.CANInit:

000034d0 <CANInit>:
}

void CANInit( void )
{
    34d0:	0f 93       	push	r16
    34d2:	cf 93       	push	r28
	// Init clock
	// See datasheet table 16-2.
	// For 8Mhz, set CAN rate to 500 Kbps
	CANBT1 = 0x02;
    34d4:	c2 e0       	ldi	r28, 0x02	; 2
    34d6:	c0 93 e2 00 	sts	0x00E2, r28	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f00e2>
	CANBT2 = 0x04;
    34da:	84 e0       	ldi	r24, 0x04	; 4
    34dc:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f00e3>
	CANBT3 = 0x12;
    34e0:	82 e1       	ldi	r24, 0x12	; 18
    34e2:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7f00e4>
	
	// Init message objects (MOBs) since there are no defaults at reset
	CANMOBSet( 0, &sg_sMOBDisabled, NULL, 0 );
    34e6:	00 e0       	ldi	r16, 0x00	; 0
    34e8:	20 e0       	ldi	r18, 0x00	; 0
    34ea:	30 e0       	ldi	r19, 0x00	; 0
    34ec:	47 ea       	ldi	r20, 0xA7	; 167
    34ee:	53 e0       	ldi	r21, 0x03	; 3
    34f0:	60 e0       	ldi	r22, 0x00	; 0
    34f2:	80 e0       	ldi	r24, 0x00	; 0
    34f4:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <CANMOBSet>
	CANMOBSet( 1, &sg_sMOBDisabled, NULL, 0 );
    34f8:	20 e0       	ldi	r18, 0x00	; 0
    34fa:	30 e0       	ldi	r19, 0x00	; 0
    34fc:	47 ea       	ldi	r20, 0xA7	; 167
    34fe:	53 e0       	ldi	r21, 0x03	; 3
    3500:	60 e0       	ldi	r22, 0x00	; 0
    3502:	81 e0       	ldi	r24, 0x01	; 1
    3504:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <CANMOBSet>
	CANMOBSet( 2, &sg_sMOBDisabled, NULL, 0 );
    3508:	20 e0       	ldi	r18, 0x00	; 0
    350a:	30 e0       	ldi	r19, 0x00	; 0
    350c:	47 ea       	ldi	r20, 0xA7	; 167
    350e:	53 e0       	ldi	r21, 0x03	; 3
    3510:	60 e0       	ldi	r22, 0x00	; 0
    3512:	82 e0       	ldi	r24, 0x02	; 2
    3514:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <CANMOBSet>
	CANMOBSet( 3, &sg_sMOBDisabled, NULL, 0 );
    3518:	20 e0       	ldi	r18, 0x00	; 0
    351a:	30 e0       	ldi	r19, 0x00	; 0
    351c:	47 ea       	ldi	r20, 0xA7	; 167
    351e:	53 e0       	ldi	r21, 0x03	; 3
    3520:	60 e0       	ldi	r22, 0x00	; 0
    3522:	83 e0       	ldi	r24, 0x03	; 3
    3524:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <CANMOBSet>
	CANMOBSet( 4, &sg_sMOBDisabled, NULL, 0 );
    3528:	20 e0       	ldi	r18, 0x00	; 0
    352a:	30 e0       	ldi	r19, 0x00	; 0
    352c:	47 ea       	ldi	r20, 0xA7	; 167
    352e:	53 e0       	ldi	r21, 0x03	; 3
    3530:	60 e0       	ldi	r22, 0x00	; 0
    3532:	84 e0       	ldi	r24, 0x04	; 4
    3534:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <CANMOBSet>
	CANMOBSet( 5, &sg_sMOBDisabled, NULL, 0 );
    3538:	20 e0       	ldi	r18, 0x00	; 0
    353a:	30 e0       	ldi	r19, 0x00	; 0
    353c:	47 ea       	ldi	r20, 0xA7	; 167
    353e:	53 e0       	ldi	r21, 0x03	; 3
    3540:	60 e0       	ldi	r22, 0x00	; 0
    3542:	85 e0       	ldi	r24, 0x05	; 5
    3544:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <CANMOBSet>
	
	// Setup generic RX
	CANMOBSet( CANMOB_RX_IDX, &sg_sMOBGenericReceive, NULL, 0 );
    3548:	20 e0       	ldi	r18, 0x00	; 0
    354a:	30 e0       	ldi	r19, 0x00	; 0
    354c:	4f e9       	ldi	r20, 0x9F	; 159
    354e:	53 e0       	ldi	r21, 0x03	; 3
    3550:	60 e0       	ldi	r22, 0x00	; 0
    3552:	80 e0       	ldi	r24, 0x00	; 0
    3554:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <CANMOBSet>
	
	// Enable general CAN interrupts
	CANGIE = (1 << ENIT) | (1 << ENRX) | (1 << ENTX) | (1 << ENERR) | (1 << ENBX) | (1 << ENERG);
    3558:	8e eb       	ldi	r24, 0xBE	; 190
    355a:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f00db>

//	CANGIE &= ~(1 << ENOVRT);  // Disable CAN timer overflow interrupt

	// Enable the bus
	CANGCON = (1 << ENASTB);
    355e:	c0 93 d8 00 	sts	0x00D8, r28	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f00d8>
	sg_bBusy = false;
    3562:	10 92 67 09 	sts	0x0967, r1	; 0x800967 <sg_bBusy>
}
    3566:	cf 91       	pop	r28
    3568:	0f 91       	pop	r16
    356a:	08 95       	ret

Disassembly of section .text.DebugOut:

00004da0 <DebugOut>:
}

#endif

void DebugOut( const char* peFormat, ... )
{
    4da0:	cf 93       	push	r28
    4da2:	df 93       	push	r29
    4da4:	cd b7       	in	r28, 0x3d	; 61
    4da6:	de b7       	in	r29, 0x3e	; 62
	
	va_end( args );	 */
	
	//DebugSerialSend( (uint8_t*)u8Buffer, strlen(u8Buffer) );
#endif
}
    4da8:	df 91       	pop	r29
    4daa:	cf 91       	pop	r28
    4dac:	08 95       	ret

Disassembly of section .text.EEPROMRead:

00004d06 <EEPROMRead>:
}

uint8_t EEPROMRead(uint16_t u16Address)
{
	// Wait for any completion of writes, etc..
	while (EECR & (1 << EEWE));
    4d06:	f9 99       	sbic	0x1f, 1	; 31
    4d08:	fe cf       	rjmp	.-4      	; 0x4d06 <EEPROMRead>

	// Set address	
	EEAR = u16Address;
    4d0a:	92 bd       	out	0x22, r25	; 34
    4d0c:	81 bd       	out	0x21, r24	; 33
	
	// Start EEPROM read
	EECR |= (1 << EERE);
    4d0e:	8f b3       	in	r24, 0x1f	; 31
    4d10:	81 60       	ori	r24, 0x01	; 1
    4d12:	8f bb       	out	0x1f, r24	; 31
	
	// Return the data
	return(EEDR);
    4d14:	80 b5       	in	r24, 0x20	; 32
    4d16:	08 95       	ret

Disassembly of section .text.I2CBitDelay:

00004dae <I2CBitDelay>:
#define SDA_SET_INPUT()			(I2C_PORT_DDR &= ((uint8_t) ~(1 << I2C_SDA_PIN))); SDA_HIGH()

// Delays for one I2C bit's worth of time
static void I2CBitDelay(void)
{
	Delay(10);
    4dae:	6a e0       	ldi	r22, 0x0A	; 10
    4db0:	70 e0       	ldi	r23, 0x00	; 0
    4db2:	80 e0       	ldi	r24, 0x00	; 0
    4db4:	90 e0       	ldi	r25, 0x00	; 0
    4db6:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <Delay>
    4dba:	08 95       	ret

Disassembly of section .text.I2CStart:

000046b6 <I2CStart>:

// Send an I2C start sequence and quantize foreground code to the overflow
// timer
void I2CStart(void)
{
	SDA_SET_OUTPUT();
    46b6:	8a b1       	in	r24, 0x0a	; 10
    46b8:	82 60       	ori	r24, 0x02	; 2
    46ba:	8a b9       	out	0x0a, r24	; 10
	SDA_HIGH();
    46bc:	8b b1       	in	r24, 0x0b	; 11
    46be:	82 60       	ori	r24, 0x02	; 2
    46c0:	8b b9       	out	0x0b, r24	; 11
	SCL_HIGH();
    46c2:	8b b1       	in	r24, 0x0b	; 11
    46c4:	81 60       	ori	r24, 0x01	; 1
    46c6:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    46c8:	0e 94 d7 26 	call	0x4dae	; 0x4dae <I2CBitDelay>
	SDA_LOW();
    46cc:	8b b1       	in	r24, 0x0b	; 11
    46ce:	8d 7f       	andi	r24, 0xFD	; 253
    46d0:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    46d2:	0e 94 d7 26 	call	0x4dae	; 0x4dae <I2CBitDelay>
	SCL_LOW();
    46d6:	8b b1       	in	r24, 0x0b	; 11
    46d8:	8e 7f       	andi	r24, 0xFE	; 254
    46da:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    46dc:	0e 94 d7 26 	call	0x4dae	; 0x4dae <I2CBitDelay>
    46e0:	08 95       	ret

Disassembly of section .text.I2CStop:

00004858 <I2CStop>:
}

// Send an I2C stop sequence
void I2CStop(void)
{
	SDA_LOW();
    4858:	8b b1       	in	r24, 0x0b	; 11
    485a:	8d 7f       	andi	r24, 0xFD	; 253
    485c:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    485e:	0e 94 d7 26 	call	0x4dae	; 0x4dae <I2CBitDelay>
	SCL_HIGH();
    4862:	8b b1       	in	r24, 0x0b	; 11
    4864:	81 60       	ori	r24, 0x01	; 1
    4866:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    4868:	0e 94 d7 26 	call	0x4dae	; 0x4dae <I2CBitDelay>
	SDA_SET_INPUT();
    486c:	8a b1       	in	r24, 0x0a	; 10
    486e:	8d 7f       	andi	r24, 0xFD	; 253
    4870:	8a b9       	out	0x0a, r24	; 10
    4872:	8b b1       	in	r24, 0x0b	; 11
    4874:	82 60       	ori	r24, 0x02	; 2
    4876:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    4878:	0e 94 d7 26 	call	0x4dae	; 0x4dae <I2CBitDelay>
    487c:	08 95       	ret

Disassembly of section .text.I2CUnstick:

00004406 <I2CUnstick>:
}

// Unsticks an I2C bus
void I2CUnstick(void)
{
    4406:	cf 93       	push	r28
	uint8_t u8UnstickBits = 64;

	SCL_SET_OUTPUT();
    4408:	8a b1       	in	r24, 0x0a	; 10
    440a:	81 60       	ori	r24, 0x01	; 1
    440c:	8a b9       	out	0x0a, r24	; 10
	SDA_SET_OUTPUT();
    440e:	8a b1       	in	r24, 0x0a	; 10
    4410:	82 60       	ori	r24, 0x02	; 2
    4412:	8a b9       	out	0x0a, r24	; 10
}

// Unsticks an I2C bus
void I2CUnstick(void)
{
	uint8_t u8UnstickBits = 64;
    4414:	c0 e4       	ldi	r28, 0x40	; 64

	SCL_SET_OUTPUT();
	SDA_SET_OUTPUT();
	
	while (u8UnstickBits)
    4416:	11 c0       	rjmp	.+34     	; 0x443a <I2CUnstick+0x34>
	{
		SCL_LOW();
    4418:	8b b1       	in	r24, 0x0b	; 11
    441a:	8e 7f       	andi	r24, 0xFE	; 254
    441c:	8b b9       	out	0x0b, r24	; 11
		SDA_LOW();
    441e:	8b b1       	in	r24, 0x0b	; 11
    4420:	8d 7f       	andi	r24, 0xFD	; 253
    4422:	8b b9       	out	0x0b, r24	; 11
		I2CBitDelay();
    4424:	0e 94 d7 26 	call	0x4dae	; 0x4dae <I2CBitDelay>
		SCL_HIGH();
    4428:	8b b1       	in	r24, 0x0b	; 11
    442a:	81 60       	ori	r24, 0x01	; 1
    442c:	8b b9       	out	0x0b, r24	; 11
		SDA_HIGH();
    442e:	8b b1       	in	r24, 0x0b	; 11
    4430:	82 60       	ori	r24, 0x02	; 2
    4432:	8b b9       	out	0x0b, r24	; 11
		I2CBitDelay();
    4434:	0e 94 d7 26 	call	0x4dae	; 0x4dae <I2CBitDelay>
		u8UnstickBits--;
    4438:	c1 50       	subi	r28, 0x01	; 1
	uint8_t u8UnstickBits = 64;

	SCL_SET_OUTPUT();
	SDA_SET_OUTPUT();
	
	while (u8UnstickBits)
    443a:	c1 11       	cpse	r28, r1
    443c:	ed cf       	rjmp	.-38     	; 0x4418 <I2CUnstick+0x12>
		SCL_HIGH();
		SDA_HIGH();
		I2CBitDelay();
		u8UnstickBits--;
	}
}
    443e:	cf 91       	pop	r28
    4440:	08 95       	ret

Disassembly of section .text.I2CTxByte:

00003cf8 <I2CTxByte>:

// Sends a single I2C byte. Returns false if the byte is not acked, or true if it is.
bool I2CTxByte(uint8_t u8Byte)
{
    3cf8:	cf 93       	push	r28
    3cfa:	df 93       	push	r29
    3cfc:	d8 2f       	mov	r29, r24
	uint8_t u8Length = 8;			// 8 Bits to send
	bool bAck = false;

	SDA_SET_OUTPUT();
    3cfe:	8a b1       	in	r24, 0x0a	; 10
    3d00:	82 60       	ori	r24, 0x02	; 2
    3d02:	8a b9       	out	0x0a, r24	; 10
}

// Sends a single I2C byte. Returns false if the byte is not acked, or true if it is.
bool I2CTxByte(uint8_t u8Byte)
{
	uint8_t u8Length = 8;			// 8 Bits to send
    3d04:	c8 e0       	ldi	r28, 0x08	; 8
	bool bAck = false;

	SDA_SET_OUTPUT();

	while (u8Length)
    3d06:	15 c0       	rjmp	.+42     	; 0x3d32 <I2CTxByte+0x3a>
	{
		if (u8Byte & 0x80)
    3d08:	dd 23       	and	r29, r29
    3d0a:	24 f4       	brge	.+8      	; 0x3d14 <I2CTxByte+0x1c>
		{
			SDA_HIGH();
    3d0c:	8b b1       	in	r24, 0x0b	; 11
    3d0e:	82 60       	ori	r24, 0x02	; 2
    3d10:	8b b9       	out	0x0b, r24	; 11
    3d12:	03 c0       	rjmp	.+6      	; 0x3d1a <I2CTxByte+0x22>
		}
		else
		{
			SDA_LOW();
    3d14:	8b b1       	in	r24, 0x0b	; 11
    3d16:	8d 7f       	andi	r24, 0xFD	; 253
    3d18:	8b b9       	out	0x0b, r24	; 11
		}
		
		// Drive SCL high
		SCL_HIGH();
    3d1a:	8b b1       	in	r24, 0x0b	; 11
    3d1c:	81 60       	ori	r24, 0x01	; 1
    3d1e:	8b b9       	out	0x0b, r24	; 11
		
		I2CBitDelay();
    3d20:	0e 94 d7 26 	call	0x4dae	; 0x4dae <I2CBitDelay>
		
		// Ensure SCL is low
		SCL_LOW();
    3d24:	8b b1       	in	r24, 0x0b	; 11
    3d26:	8e 7f       	andi	r24, 0xFE	; 254
    3d28:	8b b9       	out	0x0b, r24	; 11
	
		// SDA Is now set. Delay.
		I2CBitDelay();
    3d2a:	0e 94 d7 26 	call	0x4dae	; 0x4dae <I2CBitDelay>
		
		// Next bit
		u8Byte <<= 1;	
    3d2e:	dd 0f       	add	r29, r29
		u8Length--;
    3d30:	c1 50       	subi	r28, 0x01	; 1
	uint8_t u8Length = 8;			// 8 Bits to send
	bool bAck = false;

	SDA_SET_OUTPUT();

	while (u8Length)
    3d32:	c1 11       	cpse	r28, r1
    3d34:	e9 cf       	rjmp	.-46     	; 0x3d08 <I2CTxByte+0x10>
		// Next bit
		u8Byte <<= 1;	
		u8Length--;
	}
	
	SDA_SET_INPUT();
    3d36:	8a b1       	in	r24, 0x0a	; 10
    3d38:	8d 7f       	andi	r24, 0xFD	; 253
    3d3a:	8a b9       	out	0x0a, r24	; 10
    3d3c:	8b b1       	in	r24, 0x0b	; 11
    3d3e:	82 60       	ori	r24, 0x02	; 2
    3d40:	8b b9       	out	0x0b, r24	; 11
	SCL_HIGH();
    3d42:	8b b1       	in	r24, 0x0b	; 11
    3d44:	81 60       	ori	r24, 0x01	; 1
    3d46:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    3d48:	0e 94 d7 26 	call	0x4dae	; 0x4dae <I2CBitDelay>
	
	// See if the byte was acknowledged
	if (SDA_READ())
    3d4c:	49 9b       	sbis	0x09, 1	; 9
	{
		bAck = false;
	}
	else
	{
		bAck = true;
    3d4e:	c1 e0       	ldi	r28, 0x01	; 1
	}
	
	SCL_LOW();
    3d50:	8b b1       	in	r24, 0x0b	; 11
    3d52:	8e 7f       	andi	r24, 0xFE	; 254
    3d54:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    3d56:	0e 94 d7 26 	call	0x4dae	; 0x4dae <I2CBitDelay>
	return(bAck);
}
    3d5a:	8c 2f       	mov	r24, r28
    3d5c:	df 91       	pop	r29
    3d5e:	cf 91       	pop	r28
    3d60:	08 95       	ret

Disassembly of section .text.I2CRxByte:

00003b1e <I2CRxByte>:

// Receives a single I2C byte and will optionally generate an ack at the end
uint8_t I2CRxByte(bool bAck)
{
    3b1e:	1f 93       	push	r17
    3b20:	cf 93       	push	r28
    3b22:	df 93       	push	r29
    3b24:	18 2f       	mov	r17, r24
	uint8_t u8Data = 0;
	uint8_t u8Count = 8;
	
	SDA_SET_INPUT();
    3b26:	8a b1       	in	r24, 0x0a	; 10
    3b28:	8d 7f       	andi	r24, 0xFD	; 253
    3b2a:	8a b9       	out	0x0a, r24	; 10
    3b2c:	8b b1       	in	r24, 0x0b	; 11
    3b2e:	82 60       	ori	r24, 0x02	; 2
    3b30:	8b b9       	out	0x0b, r24	; 11

// Receives a single I2C byte and will optionally generate an ack at the end
uint8_t I2CRxByte(bool bAck)
{
	uint8_t u8Data = 0;
	uint8_t u8Count = 8;
    3b32:	c8 e0       	ldi	r28, 0x08	; 8
}

// Receives a single I2C byte and will optionally generate an ack at the end
uint8_t I2CRxByte(bool bAck)
{
	uint8_t u8Data = 0;
    3b34:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t u8Count = 8;
	
	SDA_SET_INPUT();
	
	// Consume all 8 data bits
	while (u8Count)
    3b36:	0e c0       	rjmp	.+28     	; 0x3b54 <I2CRxByte+0x36>
	{
		u8Data <<= 1;
    3b38:	dd 0f       	add	r29, r29

		SCL_HIGH();
    3b3a:	8b b1       	in	r24, 0x0b	; 11
    3b3c:	81 60       	ori	r24, 0x01	; 1
    3b3e:	8b b9       	out	0x0b, r24	; 11
		I2CBitDelay();
    3b40:	0e 94 d7 26 	call	0x4dae	; 0x4dae <I2CBitDelay>
			
		if (SDA_READ())
    3b44:	49 99       	sbic	0x09, 1	; 9
		{
			u8Data |= 1;
    3b46:	d1 60       	ori	r29, 0x01	; 1
		}
		
		SCL_LOW();
    3b48:	8b b1       	in	r24, 0x0b	; 11
    3b4a:	8e 7f       	andi	r24, 0xFE	; 254
    3b4c:	8b b9       	out	0x0b, r24	; 11
		I2CBitDelay();
    3b4e:	0e 94 d7 26 	call	0x4dae	; 0x4dae <I2CBitDelay>
		u8Count--;
    3b52:	c1 50       	subi	r28, 0x01	; 1
	uint8_t u8Count = 8;
	
	SDA_SET_INPUT();
	
	// Consume all 8 data bits
	while (u8Count)
    3b54:	c1 11       	cpse	r28, r1
    3b56:	f0 cf       	rjmp	.-32     	; 0x3b38 <I2CRxByte+0x1a>
		I2CBitDelay();
		u8Count--;
	}

	// See if we acknowledge this
	SDA_SET_OUTPUT();
    3b58:	8a b1       	in	r24, 0x0a	; 10
    3b5a:	82 60       	ori	r24, 0x02	; 2
    3b5c:	8a b9       	out	0x0a, r24	; 10
	if (bAck)
    3b5e:	11 23       	and	r17, r17
    3b60:	21 f0       	breq	.+8      	; 0x3b6a <I2CRxByte+0x4c>
	{
		SDA_LOW();
    3b62:	8b b1       	in	r24, 0x0b	; 11
    3b64:	8d 7f       	andi	r24, 0xFD	; 253
    3b66:	8b b9       	out	0x0b, r24	; 11
    3b68:	03 c0       	rjmp	.+6      	; 0x3b70 <I2CRxByte+0x52>
	}
	else
	{
		SDA_HIGH();
    3b6a:	8b b1       	in	r24, 0x0b	; 11
    3b6c:	82 60       	ori	r24, 0x02	; 2
    3b6e:	8b b9       	out	0x0b, r24	; 11
	}
	
	I2CBitDelay();
    3b70:	0e 94 d7 26 	call	0x4dae	; 0x4dae <I2CBitDelay>
	SCL_HIGH();
    3b74:	8b b1       	in	r24, 0x0b	; 11
    3b76:	81 60       	ori	r24, 0x01	; 1
    3b78:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    3b7a:	0e 94 d7 26 	call	0x4dae	; 0x4dae <I2CBitDelay>
	SCL_LOW();
    3b7e:	8b b1       	in	r24, 0x0b	; 11
    3b80:	8e 7f       	andi	r24, 0xFE	; 254
    3b82:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    3b84:	0e 94 d7 26 	call	0x4dae	; 0x4dae <I2CBitDelay>
	SDA_LOW();
    3b88:	8b b1       	in	r24, 0x0b	; 11
    3b8a:	8d 7f       	andi	r24, 0xFD	; 253
    3b8c:	8b b9       	out	0x0b, r24	; 11

	return(u8Data);	
}
    3b8e:	8d 2f       	mov	r24, r29
    3b90:	df 91       	pop	r29
    3b92:	cf 91       	pop	r28
    3b94:	1f 91       	pop	r17
    3b96:	08 95       	ret

Disassembly of section .text.I2CSetup:

000046e2 <I2CSetup>:
// Prepares the SCL/SDA pins for I2C operation and returns when the CPU is
// quantized to the timer (for consistent bit alignment)
void I2CSetup(void)
{
	// Deassert SCL and SDA
	SCL_HIGH();
    46e2:	8b b1       	in	r24, 0x0b	; 11
    46e4:	81 60       	ori	r24, 0x01	; 1
    46e6:	8b b9       	out	0x0b, r24	; 11
	SDA_HIGH();
    46e8:	8b b1       	in	r24, 0x0b	; 11
    46ea:	82 60       	ori	r24, 0x02	; 2
    46ec:	8b b9       	out	0x0b, r24	; 11

	// Set SCL and SDA lines as push/pull output drives
	SCL_SET_OUTPUT();
    46ee:	8a b1       	in	r24, 0x0a	; 10
    46f0:	81 60       	ori	r24, 0x01	; 1
    46f2:	8a b9       	out	0x0a, r24	; 10
	
	// Turn on SDA, set as an input
	SDA_SET_INPUT();
    46f4:	8a b1       	in	r24, 0x0a	; 10
    46f6:	8d 7f       	andi	r24, 0xFD	; 253
    46f8:	8a b9       	out	0x0a, r24	; 10
    46fa:	8b b1       	in	r24, 0x0b	; 11
    46fc:	82 60       	ori	r24, 0x02	; 2
    46fe:	8b b9       	out	0x0b, r24	; 11
	
	Delay(20);
    4700:	64 e1       	ldi	r22, 0x14	; 20
    4702:	70 e0       	ldi	r23, 0x00	; 0
    4704:	80 e0       	ldi	r24, 0x00	; 0
    4706:	90 e0       	ldi	r25, 0x00	; 0
    4708:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <Delay>
    470c:	08 95       	ret

Disassembly of section .text.I2CStartTransaction:

00004790 <I2CStartTransaction>:

// Sets up the I2C pins, sends slave address/read/write byte, and waits for acknowledgment.
// Returns false if no device is responding.
bool I2CStartTransaction(uint8_t u8SlaveAddress,
						 bool bRead)
{
    4790:	cf 93       	push	r28
    4792:	df 93       	push	r29
    4794:	c8 2f       	mov	r28, r24
    4796:	d6 2f       	mov	r29, r22
	// Set up the pins for I2C operation
	I2CSetup();
    4798:	0e 94 71 23 	call	0x46e2	; 0x46e2 <I2CSetup>
	
	// I2C Start condition
	I2CStart();
    479c:	0e 94 5b 23 	call	0x46b6	; 0x46b6 <I2CStart>

	// If it's a read operation, clear the lower bit
	if (bRead)
    47a0:	dd 23       	and	r29, r29
    47a2:	19 f0       	breq	.+6      	; 0x47aa <I2CStartTransaction+0x1a>
	{
		u8SlaveAddress |= 1;
    47a4:	8c 2f       	mov	r24, r28
    47a6:	81 60       	ori	r24, 0x01	; 1
    47a8:	02 c0       	rjmp	.+4      	; 0x47ae <I2CStartTransaction+0x1e>
	}
	else
	{
		// Otherwise set it
		u8SlaveAddress &= (uint8_t) (~1);
    47aa:	8c 2f       	mov	r24, r28
    47ac:	8e 7f       	andi	r24, 0xFE	; 254
	}
	
	// Now send out the slave address + the read/write bit
	return(I2CTxByte(u8SlaveAddress));
    47ae:	0e 94 7c 1e 	call	0x3cf8	; 0x3cf8 <I2CTxByte>
}
    47b2:	df 91       	pop	r29
    47b4:	cf 91       	pop	r28
    47b6:	08 95       	ret

Disassembly of section .text.CellCountExpectedSet:

00002fe8 <CellCountExpectedSet>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    2fe8:	cf 92       	push	r12
    2fea:	df 92       	push	r13
    2fec:	ef 92       	push	r14
    2fee:	ff 92       	push	r15
    2ff0:	8f 35       	cpi	r24, 0x5F	; 95
    2ff2:	08 f0       	brcs	.+2      	; 0x2ff6 <CellCountExpectedSet+0xe>
    2ff4:	8e e5       	ldi	r24, 0x5E	; 94
    2ff6:	e0 e1       	ldi	r30, 0x10	; 16
    2ff8:	f1 e0       	ldi	r31, 0x01	; 1
    2ffa:	85 8b       	std	Z+21, r24	; 0x15
    2ffc:	c8 2e       	mov	r12, r24
    2ffe:	d1 2c       	mov	r13, r1
    3000:	e1 2c       	mov	r14, r1
    3002:	f1 2c       	mov	r15, r1
    3004:	aa ec       	ldi	r26, 0xCA	; 202
    3006:	b8 e0       	ldi	r27, 0x08	; 8
    3008:	a7 01       	movw	r20, r14
    300a:	96 01       	movw	r18, r12
    300c:	0e 94 59 26 	call	0x4cb2	; 0x4cb2 <__muluhisi3>
    3010:	65 8f       	std	Z+29, r22	; 0x1d
    3012:	76 8f       	std	Z+30, r23	; 0x1e
    3014:	87 8f       	std	Z+31, r24	; 0x1f
    3016:	90 a3       	std	Z+32, r25	; 0x20
    3018:	a4 e9       	ldi	r26, 0x94	; 148
    301a:	b1 e1       	ldi	r27, 0x11	; 17
    301c:	0e 94 59 26 	call	0x4cb2	; 0x4cb2 <__muluhisi3>
    3020:	61 a3       	std	Z+33, r22	; 0x21
    3022:	72 a3       	std	Z+34, r23	; 0x22
    3024:	83 a3       	std	Z+35, r24	; 0x23
    3026:	94 a3       	std	Z+36, r25	; 0x24
    3028:	81 a1       	ldd	r24, Z+33	; 0x21
    302a:	92 a1       	ldd	r25, Z+34	; 0x22
    302c:	a3 a1       	ldd	r26, Z+35	; 0x23
    302e:	b4 a1       	ldd	r27, Z+36	; 0x24
    3030:	45 8d       	ldd	r20, Z+29	; 0x1d
    3032:	56 8d       	ldd	r21, Z+30	; 0x1e
    3034:	67 8d       	ldd	r22, Z+31	; 0x1f
    3036:	70 a1       	ldd	r23, Z+32	; 0x20
    3038:	84 1b       	sub	r24, r20
    303a:	95 0b       	sbc	r25, r21
    303c:	a6 0b       	sbc	r26, r22
    303e:	b7 0b       	sbc	r27, r23
    3040:	88 0f       	add	r24, r24
    3042:	99 1f       	adc	r25, r25
    3044:	aa 1f       	adc	r26, r26
    3046:	bb 1f       	adc	r27, r27
    3048:	88 0f       	add	r24, r24
    304a:	99 1f       	adc	r25, r25
    304c:	aa 1f       	adc	r26, r26
    304e:	bb 1f       	adc	r27, r27
    3050:	88 0f       	add	r24, r24
    3052:	99 1f       	adc	r25, r25
    3054:	aa 1f       	adc	r26, r26
    3056:	bb 1f       	adc	r27, r27
    3058:	88 0f       	add	r24, r24
    305a:	99 1f       	adc	r25, r25
    305c:	aa 1f       	adc	r26, r26
    305e:	bb 1f       	adc	r27, r27
    3060:	88 0f       	add	r24, r24
    3062:	99 1f       	adc	r25, r25
    3064:	aa 1f       	adc	r26, r26
    3066:	bb 1f       	adc	r27, r27
    3068:	88 0f       	add	r24, r24
    306a:	99 1f       	adc	r25, r25
    306c:	aa 1f       	adc	r26, r26
    306e:	bb 1f       	adc	r27, r27
    3070:	88 0f       	add	r24, r24
    3072:	99 1f       	adc	r25, r25
    3074:	aa 1f       	adc	r26, r26
    3076:	bb 1f       	adc	r27, r27
    3078:	ac 01       	movw	r20, r24
    307a:	bd 01       	movw	r22, r26
    307c:	bb 23       	and	r27, r27
    307e:	24 f4       	brge	.+8      	; 0x3088 <CellCountExpectedSet+0xa0>
    3080:	41 50       	subi	r20, 0x01	; 1
    3082:	5c 4f       	sbci	r21, 0xFC	; 252
    3084:	6f 4f       	sbci	r22, 0xFF	; 255
    3086:	7f 4f       	sbci	r23, 0xFF	; 255
    3088:	03 2e       	mov	r0, r19
    308a:	3a e0       	ldi	r19, 0x0A	; 10
    308c:	75 95       	asr	r23
    308e:	67 95       	ror	r22
    3090:	57 95       	ror	r21
    3092:	47 95       	ror	r20
    3094:	3a 95       	dec	r19
    3096:	d1 f7       	brne	.-12     	; 0x308c <CellCountExpectedSet+0xa4>
    3098:	30 2d       	mov	r19, r0
    309a:	50 93 36 01 	sts	0x0136, r21	; 0x800136 <sg_sFrame+0x26>
    309e:	40 93 35 01 	sts	0x0135, r20	; 0x800135 <sg_sFrame+0x25>
    30a2:	ff 90       	pop	r15
    30a4:	ef 90       	pop	r14
    30a6:	df 90       	pop	r13
    30a8:	cf 90       	pop	r12
    30aa:	08 95       	ret

Disassembly of section .text.SendModuleControllerStatus:

00004d60 <SendModuleControllerStatus>:

static uint8_t sg_u8ControllerStatusMsgCount = 0;

static void SendModuleControllerStatus(void)
{
	sg_bSendModuleControllerStatus = true;
    4d60:	81 e0       	ldi	r24, 0x01	; 1
    4d62:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <sg_bSendModuleControllerStatus>
	sg_u8ControllerStatusMsgCount = 0;
    4d66:	10 92 6c 09 	sts	0x096C, r1	; 0x80096c <sg_u8ControllerStatusMsgCount>
	sg_bIgnoreStatusRequests = true;  // Start ignoring new requests
    4d6a:	80 93 74 09 	sts	0x0974, r24	; 0x800974 <sg_bIgnoreStatusRequests>
    4d6e:	08 95       	ret

Disassembly of section .text.ModuleControllerStateSet:

00004dfa <ModuleControllerStateSet>:
	MBASSERT(0);
}

static void ModuleControllerStateSet( EModuleControllerState eNext )
{
	if(eNext < EMODSTATE_COUNT)
    4dfa:	84 30       	cpi	r24, 0x04	; 4
    4dfc:	10 f4       	brcc	.+4      	; 0x4e02 <ModuleControllerStateSet+0x8>
	{
		sg_eModuleControllerStateTarget = eNext;
    4dfe:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <sg_eModuleControllerStateTarget>
    4e02:	08 95       	ret

Disassembly of section .text.ModuleControllerStateSetMax:

00004c86 <ModuleControllerStateSetMax>:



static void ModuleControllerStateSetMax( EModuleControllerState eNext )
{
	if(eNext < EMODSTATE_COUNT)
    4c86:	84 30       	cpi	r24, 0x04	; 4
    4c88:	40 f4       	brcc	.+16     	; 0x4c9a <ModuleControllerStateSetMax+0x14>
	{
		sg_eModuleControllerStateMax = eNext;
    4c8a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <sg_eModuleControllerStateMax>
		if (sg_eModuleControllerStateCurrent > eNext) // we are in a higher state than allowed
    4c8e:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    4c92:	89 17       	cp	r24, r25
    4c94:	10 f4       	brcc	.+4      	; 0x4c9a <ModuleControllerStateSetMax+0x14>
		{
			sg_eModuleControllerStateTarget = eNext;
    4c96:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <sg_eModuleControllerStateTarget>
    4c9a:	08 95       	ret

Disassembly of section .text.Check5VLoss:

00004c28 <Check5VLoss>:
}

// Checks for 5V loss
static void Check5VLoss(uint8_t u8NewState)
{
	if( u8NewState & (1 << PIN_5V_DET) )
    4c28:	86 fd       	sbrc	r24, 6
    4c2a:	09 c0       	rjmp	.+18     	; 0x4c3e <Check5VLoss+0x16>
		// Not asserted
	}
	else
	{
		// 5V detect is low
		FET_EN_DEASSERT();
    4c2c:	88 b1       	in	r24, 0x08	; 8
    4c2e:	8f 7e       	andi	r24, 0xEF	; 239
    4c30:	88 b9       	out	0x08, r24	; 8
		RELAY_EN_DEASSERT();
    4c32:	8e b1       	in	r24, 0x0e	; 14
    4c34:	8d 7f       	andi	r24, 0xFD	; 253
    4c36:	8e b9       	out	0x0e, r24	; 14
		ModuleControllerStateSet( EMODSTATE_OFF );
    4c38:	80 e0       	ldi	r24, 0x00	; 0
    4c3a:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <ModuleControllerStateSet>
    4c3e:	08 95       	ret

Disassembly of section .text.CellDataConvertVoltage:

00003e94 <CellDataConvertVoltage>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    3e94:	fb 01       	movw	r30, r22
    3e96:	93 70       	andi	r25, 0x03	; 3
    3e98:	9c 01       	movw	r18, r24
    3e9a:	20 5f       	subi	r18, 0xF0	; 240
    3e9c:	31 40       	sbci	r19, 0x01	; 1
    3e9e:	21 31       	cpi	r18, 0x11	; 17
    3ea0:	32 40       	sbci	r19, 0x02	; 2
    3ea2:	00 f5       	brcc	.+64     	; 0x3ee4 <CellDataConvertVoltage+0x50>
    3ea4:	dc 01       	movw	r26, r24
    3ea6:	2b ed       	ldi	r18, 0xDB	; 219
    3ea8:	36 ea       	ldi	r19, 0xA6	; 166
    3eaa:	43 e2       	ldi	r20, 0x23	; 35
    3eac:	50 e0       	ldi	r21, 0x00	; 0
    3eae:	0e 94 59 26 	call	0x4cb2	; 0x4cb2 <__muluhisi3>
    3eb2:	dc 01       	movw	r26, r24
    3eb4:	cb 01       	movw	r24, r22
    3eb6:	07 2e       	mov	r0, r23
    3eb8:	7a e0       	ldi	r23, 0x0A	; 10
    3eba:	b6 95       	lsr	r27
    3ebc:	a7 95       	ror	r26
    3ebe:	97 95       	ror	r25
    3ec0:	87 95       	ror	r24
    3ec2:	7a 95       	dec	r23
    3ec4:	d1 f7       	brne	.-12     	; 0x3eba <CellDataConvertVoltage+0x26>
    3ec6:	70 2d       	mov	r23, r0
    3ec8:	9f 5f       	subi	r25, 0xFF	; 255
    3eca:	af 4f       	sbci	r26, 0xFF	; 255
    3ecc:	bf 4f       	sbci	r27, 0xFF	; 255
    3ece:	07 2e       	mov	r0, r23
    3ed0:	79 e0       	ldi	r23, 0x09	; 9
    3ed2:	b6 95       	lsr	r27
    3ed4:	a7 95       	ror	r26
    3ed6:	97 95       	ror	r25
    3ed8:	87 95       	ror	r24
    3eda:	7a 95       	dec	r23
    3edc:	d1 f7       	brne	.-12     	; 0x3ed2 <CellDataConvertVoltage+0x3e>
    3ede:	70 2d       	mov	r23, r0
    3ee0:	21 e0       	ldi	r18, 0x01	; 1
    3ee2:	03 c0       	rjmp	.+6      	; 0x3eea <CellDataConvertVoltage+0x56>
    3ee4:	20 e0       	ldi	r18, 0x00	; 0
    3ee6:	80 e0       	ldi	r24, 0x00	; 0
    3ee8:	90 e0       	ldi	r25, 0x00	; 0
    3eea:	30 97       	sbiw	r30, 0x00	; 0
    3eec:	11 f0       	breq	.+4      	; 0x3ef2 <CellDataConvertVoltage+0x5e>
    3eee:	91 83       	std	Z+1, r25	; 0x01
    3ef0:	80 83       	st	Z, r24
    3ef2:	82 2f       	mov	r24, r18
    3ef4:	08 95       	ret

Disassembly of section .text.CellDataConvertTemperature:

00003b98 <CellDataConvertTemperature>:
    3b98:	8f 3f       	cpi	r24, 0xFF	; 255
    3b9a:	2f ef       	ldi	r18, 0xFF	; 255
    3b9c:	92 07       	cpc	r25, r18
    3b9e:	61 f1       	breq	.+88     	; 0x3bf8 <CellDataConvertTemperature+0x60>
    3ba0:	28 2f       	mov	r18, r24
    3ba2:	2f 70       	andi	r18, 0x0F	; 15
    3ba4:	94 ff       	sbrs	r25, 4
    3ba6:	02 c0       	rjmp	.+4      	; 0x3bac <CellDataConvertTemperature+0x14>
    3ba8:	90 6f       	ori	r25, 0xF0	; 240
    3baa:	01 c0       	rjmp	.+2      	; 0x3bae <CellDataConvertTemperature+0x16>
    3bac:	9f 77       	andi	r25, 0x7F	; 127
    3bae:	95 95       	asr	r25
    3bb0:	87 95       	ror	r24
    3bb2:	95 95       	asr	r25
    3bb4:	87 95       	ror	r24
    3bb6:	95 95       	asr	r25
    3bb8:	87 95       	ror	r24
    3bba:	95 95       	asr	r25
    3bbc:	87 95       	ror	r24
    3bbe:	ac 01       	movw	r20, r24
    3bc0:	4c 5e       	subi	r20, 0xEC	; 236
    3bc2:	5f 4f       	sbci	r21, 0xFF	; 255
    3bc4:	4d 38       	cpi	r20, 0x8D	; 141
    3bc6:	51 05       	cpc	r21, r1
    3bc8:	c8 f4       	brcc	.+50     	; 0x3bfc <CellDataConvertTemperature+0x64>
    3bca:	34 e6       	ldi	r19, 0x64	; 100
    3bcc:	38 9f       	mul	r19, r24
    3bce:	d0 01       	movw	r26, r0
    3bd0:	39 9f       	mul	r19, r25
    3bd2:	b0 0d       	add	r27, r0
    3bd4:	11 24       	eor	r1, r1
    3bd6:	30 e0       	ldi	r19, 0x00	; 0
    3bd8:	40 e0       	ldi	r20, 0x00	; 0
    3bda:	26 5f       	subi	r18, 0xF6	; 246
    3bdc:	3c 4f       	sbci	r19, 0xFC	; 252
    3bde:	4f 4f       	sbci	r20, 0xFF	; 255
    3be0:	f9 01       	movw	r30, r18
    3be2:	84 91       	lpm	r24, Z
    3be4:	47 fd       	sbrc	r20, 7
    3be6:	80 81       	ld	r24, Z
    3be8:	fd 01       	movw	r30, r26
    3bea:	e8 0f       	add	r30, r24
    3bec:	f1 1d       	adc	r31, r1
    3bee:	cf 01       	movw	r24, r30
    3bf0:	81 56       	subi	r24, 0x61	; 97
    3bf2:	9a 4e       	sbci	r25, 0xEA	; 234
    3bf4:	21 e0       	ldi	r18, 0x01	; 1
    3bf6:	05 c0       	rjmp	.+10     	; 0x3c02 <CellDataConvertTemperature+0x6a>
    3bf8:	20 e0       	ldi	r18, 0x00	; 0
    3bfa:	03 c0       	rjmp	.+6      	; 0x3c02 <CellDataConvertTemperature+0x6a>
    3bfc:	8f ef       	ldi	r24, 0xFF	; 255
    3bfe:	9f ef       	ldi	r25, 0xFF	; 255
    3c00:	20 e0       	ldi	r18, 0x00	; 0
    3c02:	61 15       	cp	r22, r1
    3c04:	71 05       	cpc	r23, r1
    3c06:	19 f0       	breq	.+6      	; 0x3c0e <CellDataConvertTemperature+0x76>
    3c08:	fb 01       	movw	r30, r22
    3c0a:	91 83       	std	Z+1, r25	; 0x01
    3c0c:	80 83       	st	Z, r24
    3c0e:	82 2f       	mov	r24, r18
    3c10:	08 95       	ret

Disassembly of section .text.CellDataConvert:

000047b8 <CellDataConvert>:

static void CellDataConvert( CellData* pCellData,
							uint16_t* pu16Voltage,
							int16_t* ps16Temperature
							)
{
    47b8:	0f 93       	push	r16
    47ba:	1f 93       	push	r17
    47bc:	cf 93       	push	r28
    47be:	df 93       	push	r29
    47c0:	ec 01       	movw	r28, r24
    47c2:	8a 01       	movw	r16, r20
	if (!CellDataConvertVoltage((*pCellData).voltage, pu16Voltage))
    47c4:	88 81       	ld	r24, Y
    47c6:	99 81       	ldd	r25, Y+1	; 0x01
    47c8:	0e 94 4a 1f 	call	0x3e94	; 0x3e94 <CellDataConvertVoltage>
	{
		// add error handling here if needed
	}
	if (!CellDataConvertTemperature((*pCellData).temperature, ps16Temperature))
    47cc:	b8 01       	movw	r22, r16
    47ce:	8a 81       	ldd	r24, Y+2	; 0x02
    47d0:	9b 81       	ldd	r25, Y+3	; 0x03
    47d2:	0e 94 cc 1d 	call	0x3b98	; 0x3b98 <CellDataConvertTemperature>
	{
		// add error handling here if needed
	}
	
}
    47d6:	df 91       	pop	r29
    47d8:	cf 91       	pop	r28
    47da:	1f 91       	pop	r17
    47dc:	0f 91       	pop	r16
    47de:	08 95       	ret

Disassembly of section .text.ModuleCurrentConvertReadings:

00002644 <ModuleCurrentConvertReadings>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    2644:	a0 91 59 01 	lds	r26, 0x0159	; 0x800159 <sg_sFrame+0x49>
    2648:	b0 91 5a 01 	lds	r27, 0x015A	; 0x80015a <sg_sFrame+0x4a>
    264c:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <sg_sFrame+0x4c>
    2650:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <sg_sFrame+0x4d>
    2654:	e0 91 77 09 	lds	r30, 0x0977	; 0x800977 <sg_u8CurrentBufferIndex>
    2658:	ef 3f       	cpi	r30, 0xFF	; 255
    265a:	81 f4       	brne	.+32     	; 0x267c <ModuleCurrentConvertReadings+0x38>
    265c:	07 c0       	rjmp	.+14     	; 0x266c <ModuleCurrentConvertReadings+0x28>
    265e:	f0 e0       	ldi	r31, 0x00	; 0
    2660:	ee 0f       	add	r30, r30
    2662:	ff 1f       	adc	r31, r31
    2664:	e3 5e       	subi	r30, 0xE3	; 227
    2666:	f6 4f       	sbci	r31, 0xF6	; 246
    2668:	91 83       	std	Z+1, r25	; 0x01
    266a:	80 83       	st	Z, r24
    266c:	e0 91 77 09 	lds	r30, 0x0977	; 0x800977 <sg_u8CurrentBufferIndex>
    2670:	ef 5f       	subi	r30, 0xFF	; 255
    2672:	e0 93 77 09 	sts	0x0977, r30	; 0x800977 <sg_u8CurrentBufferIndex>
    2676:	e8 30       	cpi	r30, 0x08	; 8
    2678:	90 f3       	brcs	.-28     	; 0x265e <ModuleCurrentConvertReadings+0x1a>
    267a:	0f c0       	rjmp	.+30     	; 0x269a <ModuleCurrentConvertReadings+0x56>
    267c:	21 e0       	ldi	r18, 0x01	; 1
    267e:	2e 0f       	add	r18, r30
    2680:	20 93 77 09 	sts	0x0977, r18	; 0x800977 <sg_u8CurrentBufferIndex>
    2684:	f0 e0       	ldi	r31, 0x00	; 0
    2686:	ee 0f       	add	r30, r30
    2688:	ff 1f       	adc	r31, r31
    268a:	e3 5e       	subi	r30, 0xE3	; 227
    268c:	f6 4f       	sbci	r31, 0xF6	; 246
    268e:	91 83       	std	Z+1, r25	; 0x01
    2690:	80 83       	st	Z, r24
    2692:	28 30       	cpi	r18, 0x08	; 8
    2694:	10 f0       	brcs	.+4      	; 0x269a <ModuleCurrentConvertReadings+0x56>
    2696:	10 92 77 09 	sts	0x0977, r1	; 0x800977 <sg_u8CurrentBufferIndex>
    269a:	80 e0       	ldi	r24, 0x00	; 0
    269c:	20 e0       	ldi	r18, 0x00	; 0
    269e:	30 e0       	ldi	r19, 0x00	; 0
    26a0:	0b c0       	rjmp	.+22     	; 0x26b8 <ModuleCurrentConvertReadings+0x74>
    26a2:	e8 2f       	mov	r30, r24
    26a4:	f0 e0       	ldi	r31, 0x00	; 0
    26a6:	ee 0f       	add	r30, r30
    26a8:	ff 1f       	adc	r31, r31
    26aa:	e3 5e       	subi	r30, 0xE3	; 227
    26ac:	f6 4f       	sbci	r31, 0xF6	; 246
    26ae:	40 81       	ld	r20, Z
    26b0:	51 81       	ldd	r21, Z+1	; 0x01
    26b2:	24 0f       	add	r18, r20
    26b4:	35 1f       	adc	r19, r21
    26b6:	8f 5f       	subi	r24, 0xFF	; 255
    26b8:	88 30       	cpi	r24, 0x08	; 8
    26ba:	98 f3       	brcs	.-26     	; 0x26a2 <ModuleCurrentConvertReadings+0x5e>
    26bc:	c9 01       	movw	r24, r18
    26be:	99 23       	and	r25, r25
    26c0:	0c f4       	brge	.+2      	; 0x26c4 <ModuleCurrentConvertReadings+0x80>
    26c2:	07 96       	adiw	r24, 0x07	; 7
    26c4:	95 95       	asr	r25
    26c6:	87 95       	ror	r24
    26c8:	95 95       	asr	r25
    26ca:	87 95       	ror	r24
    26cc:	95 95       	asr	r25
    26ce:	87 95       	ror	r24
    26d0:	a8 1b       	sub	r26, r24
    26d2:	b9 0b       	sbc	r27, r25
    26d4:	20 e8       	ldi	r18, 0x80	; 128
    26d6:	3c e0       	ldi	r19, 0x0C	; 12
    26d8:	0e 94 e5 26 	call	0x4dca	; 0x4dca <__usmulhisi3>
    26dc:	ab 01       	movw	r20, r22
    26de:	bc 01       	movw	r22, r24
    26e0:	5f 5f       	subi	r21, 0xFF	; 255
    26e2:	6f 4f       	sbci	r22, 0xFF	; 255
    26e4:	7f 4f       	sbci	r23, 0xFF	; 255
    26e6:	db 01       	movw	r26, r22
    26e8:	ca 01       	movw	r24, r20
    26ea:	77 23       	and	r23, r23
    26ec:	24 f4       	brge	.+8      	; 0x26f6 <ModuleCurrentConvertReadings+0xb2>
    26ee:	81 50       	subi	r24, 0x01	; 1
    26f0:	9e 4f       	sbci	r25, 0xFE	; 254
    26f2:	af 4f       	sbci	r26, 0xFF	; 255
    26f4:	bf 4f       	sbci	r27, 0xFF	; 255
    26f6:	07 2e       	mov	r0, r23
    26f8:	79 e0       	ldi	r23, 0x09	; 9
    26fa:	b5 95       	asr	r27
    26fc:	a7 95       	ror	r26
    26fe:	97 95       	ror	r25
    2700:	87 95       	ror	r24
    2702:	7a 95       	dec	r23
    2704:	d1 f7       	brne	.-12     	; 0x26fa <ModuleCurrentConvertReadings+0xb6>
    2706:	70 2d       	mov	r23, r0
    2708:	90 58       	subi	r25, 0x80	; 128
    270a:	af 4f       	sbci	r26, 0xFF	; 255
    270c:	bf 4f       	sbci	r27, 0xFF	; 255
    270e:	e0 e1       	ldi	r30, 0x10	; 16
    2710:	f1 e0       	ldi	r31, 0x01	; 1
    2712:	90 ab       	std	Z+48, r25	; 0x30
    2714:	87 a7       	std	Z+47, r24	; 0x2f
    2716:	27 a5       	ldd	r18, Z+47	; 0x2f
    2718:	30 a9       	ldd	r19, Z+48	; 0x30
    271a:	86 89       	ldd	r24, Z+22	; 0x16
    271c:	97 89       	ldd	r25, Z+23	; 0x17
    271e:	82 17       	cp	r24, r18
    2720:	93 07       	cpc	r25, r19
    2722:	20 f4       	brcc	.+8      	; 0x272c <ModuleCurrentConvertReadings+0xe8>
    2724:	87 a5       	ldd	r24, Z+47	; 0x2f
    2726:	90 a9       	ldd	r25, Z+48	; 0x30
    2728:	97 8b       	std	Z+23, r25	; 0x17
    272a:	86 8b       	std	Z+22, r24	; 0x16
    272c:	e0 e1       	ldi	r30, 0x10	; 16
    272e:	f1 e0       	ldi	r31, 0x01	; 1
    2730:	27 a5       	ldd	r18, Z+47	; 0x2f
    2732:	30 a9       	ldd	r19, Z+48	; 0x30
    2734:	80 8d       	ldd	r24, Z+24	; 0x18
    2736:	91 8d       	ldd	r25, Z+25	; 0x19
    2738:	28 17       	cp	r18, r24
    273a:	39 07       	cpc	r19, r25
    273c:	20 f4       	brcc	.+8      	; 0x2746 <ModuleCurrentConvertReadings+0x102>
    273e:	87 a5       	ldd	r24, Z+47	; 0x2f
    2740:	90 a9       	ldd	r25, Z+48	; 0x30
    2742:	91 8f       	std	Z+25, r25	; 0x19
    2744:	80 8f       	std	Z+24, r24	; 0x18
    2746:	08 95       	ret

Disassembly of section .text.__vector_1:

000048a4 <__vector_1>:

// NOTE: If you're getting unexpected AVR resets, uncomment these unused handlers to see
// if another interrupt is being taken that doesn't have a handler. AVR Defaults to jumping
// to 0 when not vector is programmed.
ISR(ANACOMP0_vect, ISR_BLOCK)
{
    48a4:	1f 92       	push	r1
    48a6:	0f 92       	push	r0
    48a8:	0f b6       	in	r0, 0x3f	; 63
    48aa:	0f 92       	push	r0
    48ac:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) ANACOMP0_vect;
    48ae:	82 e5       	ldi	r24, 0x52	; 82
    48b0:	94 e2       	ldi	r25, 0x24	; 36
    48b2:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    48b6:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    48ba:	80 93 69 09 	sts	0x0969, r24	; 0x800969 <sg_u8PCMSK0>
    48be:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    48c2:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <sg_u8PCMSK1>
    48c6:	ff cf       	rjmp	.-2      	; 0x48c6 <__vector_1+0x22>

Disassembly of section .text.__vector_2:

000048c8 <__vector_2>:
	while (1);
}

ISR(ANACOMP1_vect, ISR_BLOCK)
{
    48c8:	1f 92       	push	r1
    48ca:	0f 92       	push	r0
    48cc:	0f b6       	in	r0, 0x3f	; 63
    48ce:	0f 92       	push	r0
    48d0:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) ANACOMP1_vect;
    48d2:	84 e6       	ldi	r24, 0x64	; 100
    48d4:	94 e2       	ldi	r25, 0x24	; 36
    48d6:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    48da:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    48de:	80 93 69 09 	sts	0x0969, r24	; 0x800969 <sg_u8PCMSK0>
    48e2:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    48e6:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <sg_u8PCMSK1>
    48ea:	ff cf       	rjmp	.-2      	; 0x48ea <__vector_2+0x22>

Disassembly of section .text.__vector_3:

000048ec <__vector_3>:
	while (1);
}

ISR(ANACOMP2_vect, ISR_BLOCK)
{
    48ec:	1f 92       	push	r1
    48ee:	0f 92       	push	r0
    48f0:	0f b6       	in	r0, 0x3f	; 63
    48f2:	0f 92       	push	r0
    48f4:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) ANACOMP2_vect;
    48f6:	86 e7       	ldi	r24, 0x76	; 118
    48f8:	94 e2       	ldi	r25, 0x24	; 36
    48fa:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    48fe:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4902:	80 93 69 09 	sts	0x0969, r24	; 0x800969 <sg_u8PCMSK0>
    4906:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    490a:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <sg_u8PCMSK1>
    490e:	ff cf       	rjmp	.-2      	; 0x490e <__vector_3+0x22>

Disassembly of section .text.__vector_4:

00004910 <__vector_4>:
	while (1);
}

ISR(ANACOMP3_vect, ISR_BLOCK)
{
    4910:	1f 92       	push	r1
    4912:	0f 92       	push	r0
    4914:	0f b6       	in	r0, 0x3f	; 63
    4916:	0f 92       	push	r0
    4918:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) ANACOMP3_vect;
    491a:	88 e8       	ldi	r24, 0x88	; 136
    491c:	94 e2       	ldi	r25, 0x24	; 36
    491e:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4922:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4926:	80 93 69 09 	sts	0x0969, r24	; 0x800969 <sg_u8PCMSK0>
    492a:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    492e:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <sg_u8PCMSK1>
    4932:	ff cf       	rjmp	.-2      	; 0x4932 <__vector_4+0x22>

Disassembly of section .text.__vector_5:

00004934 <__vector_5>:
	while (1);
}

ISR(PSC_FAULT_vect, ISR_BLOCK)
{
    4934:	1f 92       	push	r1
    4936:	0f 92       	push	r0
    4938:	0f b6       	in	r0, 0x3f	; 63
    493a:	0f 92       	push	r0
    493c:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) PSC_FAULT_vect;
    493e:	8a e9       	ldi	r24, 0x9A	; 154
    4940:	94 e2       	ldi	r25, 0x24	; 36
    4942:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4946:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    494a:	80 93 69 09 	sts	0x0969, r24	; 0x800969 <sg_u8PCMSK0>
    494e:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4952:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <sg_u8PCMSK1>
    4956:	ff cf       	rjmp	.-2      	; 0x4956 <__vector_5+0x22>

Disassembly of section .text.__vector_6:

00004958 <__vector_6>:
	while (1);
}

ISR(PSC_EC_vect, ISR_BLOCK)
{
    4958:	1f 92       	push	r1
    495a:	0f 92       	push	r0
    495c:	0f b6       	in	r0, 0x3f	; 63
    495e:	0f 92       	push	r0
    4960:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) PSC_EC_vect;
    4962:	8c ea       	ldi	r24, 0xAC	; 172
    4964:	94 e2       	ldi	r25, 0x24	; 36
    4966:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    496a:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    496e:	80 93 69 09 	sts	0x0969, r24	; 0x800969 <sg_u8PCMSK0>
    4972:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4976:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <sg_u8PCMSK1>
    497a:	ff cf       	rjmp	.-2      	; 0x497a <__vector_6+0x22>

Disassembly of section .text.__vector_22:

0000497c <__vector_22>:
	while (1);
}

ISR(PCINT0_vect, ISR_BLOCK)
{
    497c:	1f 92       	push	r1
    497e:	0f 92       	push	r0
    4980:	0f b6       	in	r0, 0x3f	; 63
    4982:	0f 92       	push	r0
    4984:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) PCINT0_vect;
    4986:	8e eb       	ldi	r24, 0xBE	; 190
    4988:	94 e2       	ldi	r25, 0x24	; 36
    498a:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    498e:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4992:	80 93 69 09 	sts	0x0969, r24	; 0x800969 <sg_u8PCMSK0>
    4996:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    499a:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <sg_u8PCMSK1>
    499e:	ff cf       	rjmp	.-2      	; 0x499e <__vector_22+0x22>

Disassembly of section .text.__vector_9:

000049a0 <__vector_9>:
// 	while (1);
// }
*/

ISR(INT2_vect, ISR_BLOCK)
{
    49a0:	1f 92       	push	r1
    49a2:	0f 92       	push	r0
    49a4:	0f b6       	in	r0, 0x3f	; 63
    49a6:	0f 92       	push	r0
    49a8:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) INT2_vect;
    49aa:	80 ed       	ldi	r24, 0xD0	; 208
    49ac:	94 e2       	ldi	r25, 0x24	; 36
    49ae:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    49b2:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    49b6:	80 93 69 09 	sts	0x0969, r24	; 0x800969 <sg_u8PCMSK0>
    49ba:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    49be:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <sg_u8PCMSK1>
    49c2:	ff cf       	rjmp	.-2      	; 0x49c2 <__vector_9+0x22>

Disassembly of section .text.__vector_11:

000049c4 <__vector_11>:
// 	while (1);
// }


ISR(TIMER1_CAPT_vect, ISR_BLOCK)
{
    49c4:	1f 92       	push	r1
    49c6:	0f 92       	push	r0
    49c8:	0f b6       	in	r0, 0x3f	; 63
    49ca:	0f 92       	push	r0
    49cc:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) TIMER1_CAPT_vect;
    49ce:	82 ee       	ldi	r24, 0xE2	; 226
    49d0:	94 e2       	ldi	r25, 0x24	; 36
    49d2:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    49d6:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    49da:	80 93 69 09 	sts	0x0969, r24	; 0x800969 <sg_u8PCMSK0>
    49de:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    49e2:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <sg_u8PCMSK1>
    49e6:	ff cf       	rjmp	.-2      	; 0x49e6 <__vector_11+0x22>

Disassembly of section .text.__vector_13:

000049e8 <__vector_13>:
// }



ISR(TIMER1_COMPB_vect, ISR_BLOCK)
{
    49e8:	1f 92       	push	r1
    49ea:	0f 92       	push	r0
    49ec:	0f b6       	in	r0, 0x3f	; 63
    49ee:	0f 92       	push	r0
    49f0:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) TIMER1_COMPB_vect;
    49f2:	84 ef       	ldi	r24, 0xF4	; 244
    49f4:	94 e2       	ldi	r25, 0x24	; 36
    49f6:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    49fa:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    49fe:	80 93 69 09 	sts	0x0969, r24	; 0x800969 <sg_u8PCMSK0>
    4a02:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4a06:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <sg_u8PCMSK1>
    4a0a:	ff cf       	rjmp	.-2      	; 0x4a0a <__vector_13+0x22>

Disassembly of section .text.__vector_14:

00004a0c <__vector_14>:
	while (1);
}


ISR(TIMER1_OVF_vect, ISR_BLOCK)
{
    4a0c:	1f 92       	push	r1
    4a0e:	0f 92       	push	r0
    4a10:	0f b6       	in	r0, 0x3f	; 63
    4a12:	0f 92       	push	r0
    4a14:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) TIMER1_OVF_vect;
    4a16:	86 e0       	ldi	r24, 0x06	; 6
    4a18:	95 e2       	ldi	r25, 0x25	; 37
    4a1a:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4a1e:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4a22:	80 93 69 09 	sts	0x0969, r24	; 0x800969 <sg_u8PCMSK0>
    4a26:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4a2a:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <sg_u8PCMSK1>
    4a2e:	ff cf       	rjmp	.-2      	; 0x4a2e <__vector_14+0x22>

Disassembly of section .text.__vector_17:

00004a30 <__vector_17>:
	while (1);
}

ISR(TIMER0_OVF_vect, ISR_BLOCK)
{
    4a30:	1f 92       	push	r1
    4a32:	0f 92       	push	r0
    4a34:	0f b6       	in	r0, 0x3f	; 63
    4a36:	0f 92       	push	r0
    4a38:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) TIMER0_OVF_vect;
    4a3a:	88 e1       	ldi	r24, 0x18	; 24
    4a3c:	95 e2       	ldi	r25, 0x25	; 37
    4a3e:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4a42:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4a46:	80 93 69 09 	sts	0x0969, r24	; 0x800969 <sg_u8PCMSK0>
    4a4a:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4a4e:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <sg_u8PCMSK1>
    4a52:	ff cf       	rjmp	.-2      	; 0x4a52 <__vector_17+0x22>

Disassembly of section .text.__vector_19:

00004a54 <__vector_19>:
	while (1);
}

ISR(CAN_TOVF_vect, ISR_BLOCK)
{
    4a54:	1f 92       	push	r1
    4a56:	0f 92       	push	r0
    4a58:	0f b6       	in	r0, 0x3f	; 63
    4a5a:	0f 92       	push	r0
    4a5c:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) CAN_TOVF_vect;
    4a5e:	8a e2       	ldi	r24, 0x2A	; 42
    4a60:	95 e2       	ldi	r25, 0x25	; 37
    4a62:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4a66:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4a6a:	80 93 69 09 	sts	0x0969, r24	; 0x800969 <sg_u8PCMSK0>
    4a6e:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4a72:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <sg_u8PCMSK1>
    4a76:	ff cf       	rjmp	.-2      	; 0x4a76 <__vector_19+0x22>

Disassembly of section .text.__vector_21:

00004a78 <__vector_21>:
	while (1);
}

ISR(LIN_ERR_vect, ISR_BLOCK)
{
    4a78:	1f 92       	push	r1
    4a7a:	0f 92       	push	r0
    4a7c:	0f b6       	in	r0, 0x3f	; 63
    4a7e:	0f 92       	push	r0
    4a80:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) LIN_ERR_vect;
    4a82:	8c e3       	ldi	r24, 0x3C	; 60
    4a84:	95 e2       	ldi	r25, 0x25	; 37
    4a86:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4a8a:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4a8e:	80 93 69 09 	sts	0x0969, r24	; 0x800969 <sg_u8PCMSK0>
    4a92:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4a96:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <sg_u8PCMSK1>
    4a9a:	ff cf       	rjmp	.-2      	; 0x4a9a <__vector_21+0x22>

Disassembly of section .text.__vector_25:

00004a9c <__vector_25>:
// 	while (1);
// }


ISR(PCINT3_vect, ISR_BLOCK)
{
    4a9c:	1f 92       	push	r1
    4a9e:	0f 92       	push	r0
    4aa0:	0f b6       	in	r0, 0x3f	; 63
    4aa2:	0f 92       	push	r0
    4aa4:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) PCINT3_vect;
    4aa6:	8e e4       	ldi	r24, 0x4E	; 78
    4aa8:	95 e2       	ldi	r25, 0x25	; 37
    4aaa:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4aae:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4ab2:	80 93 69 09 	sts	0x0969, r24	; 0x800969 <sg_u8PCMSK0>
    4ab6:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4aba:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <sg_u8PCMSK1>
    4abe:	ff cf       	rjmp	.-2      	; 0x4abe <__vector_25+0x22>

Disassembly of section .text.__vector_26:

00004ac0 <__vector_26>:
	while (1);
}


ISR(SPI_STC_vect, ISR_BLOCK)
{
    4ac0:	1f 92       	push	r1
    4ac2:	0f 92       	push	r0
    4ac4:	0f b6       	in	r0, 0x3f	; 63
    4ac6:	0f 92       	push	r0
    4ac8:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) SPI_STC_vect;
    4aca:	80 e6       	ldi	r24, 0x60	; 96
    4acc:	95 e2       	ldi	r25, 0x25	; 37
    4ace:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4ad2:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4ad6:	80 93 69 09 	sts	0x0969, r24	; 0x800969 <sg_u8PCMSK0>
    4ada:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4ade:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <sg_u8PCMSK1>
    4ae2:	ff cf       	rjmp	.-2      	; 0x4ae2 <__vector_26+0x22>

Disassembly of section .text.__vector_29:

00004ae4 <__vector_29>:
	while (1);
}

ISR(EE_READY_vect, ISR_BLOCK)
{
    4ae4:	1f 92       	push	r1
    4ae6:	0f 92       	push	r0
    4ae8:	0f b6       	in	r0, 0x3f	; 63
    4aea:	0f 92       	push	r0
    4aec:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) EE_READY_vect;
    4aee:	82 e7       	ldi	r24, 0x72	; 114
    4af0:	95 e2       	ldi	r25, 0x25	; 37
    4af2:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4af6:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4afa:	80 93 69 09 	sts	0x0969, r24	; 0x800969 <sg_u8PCMSK0>
    4afe:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4b02:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <sg_u8PCMSK1>
    4b06:	ff cf       	rjmp	.-2      	; 0x4b06 <__vector_29+0x22>

Disassembly of section .text.__vector_30:

00004b08 <__vector_30>:
	while (1);
}

ISR(SPM_READY_vect, ISR_BLOCK)
{
    4b08:	1f 92       	push	r1
    4b0a:	0f 92       	push	r0
    4b0c:	0f b6       	in	r0, 0x3f	; 63
    4b0e:	0f 92       	push	r0
    4b10:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) SPM_READY_vect;
    4b12:	84 e8       	ldi	r24, 0x84	; 132
    4b14:	95 e2       	ldi	r25, 0x25	; 37
    4b16:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4b1a:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4b1e:	80 93 69 09 	sts	0x0969, r24	; 0x800969 <sg_u8PCMSK0>
    4b22:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4b26:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <sg_u8PCMSK1>
    4b2a:	ff cf       	rjmp	.-2      	; 0x4b2a <__vector_30+0x22>

Disassembly of section .text.CurrentThresholdsGet:

0000356c <CurrentThresholdsGet>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    356c:	0f 93       	push	r16
    356e:	1f 93       	push	r17
    3570:	cf 93       	push	r28
    3572:	df 93       	push	r29
    3574:	8c 01       	movw	r16, r24
    3576:	eb 01       	movw	r28, r22
    3578:	89 2b       	or	r24, r25
    357a:	f9 f0       	breq	.+62     	; 0x35ba <CurrentThresholdsGet+0x4e>
    357c:	87 e0       	ldi	r24, 0x07	; 7
    357e:	90 e0       	ldi	r25, 0x00	; 0
    3580:	0e 94 83 26 	call	0x4d06	; 0x4d06 <EEPROMRead>
    3584:	90 e0       	ldi	r25, 0x00	; 0
    3586:	f8 01       	movw	r30, r16
    3588:	91 83       	std	Z+1, r25	; 0x01
    358a:	80 83       	st	Z, r24
    358c:	88 e0       	ldi	r24, 0x08	; 8
    358e:	90 e0       	ldi	r25, 0x00	; 0
    3590:	0e 94 83 26 	call	0x4d06	; 0x4d06 <EEPROMRead>
    3594:	90 e0       	ldi	r25, 0x00	; 0
    3596:	98 2f       	mov	r25, r24
    3598:	88 27       	eor	r24, r24
    359a:	f8 01       	movw	r30, r16
    359c:	20 81       	ld	r18, Z
    359e:	31 81       	ldd	r19, Z+1	; 0x01
    35a0:	82 2b       	or	r24, r18
    35a2:	93 2b       	or	r25, r19
    35a4:	91 83       	std	Z+1, r25	; 0x01
    35a6:	80 83       	st	Z, r24
    35a8:	01 97       	sbiw	r24, 0x01	; 1
    35aa:	8e 3f       	cpi	r24, 0xFE	; 254
    35ac:	9f 4f       	sbci	r25, 0xFF	; 255
    35ae:	28 f0       	brcs	.+10     	; 0x35ba <CurrentThresholdsGet+0x4e>
    35b0:	8c ec       	ldi	r24, 0xCC	; 204
    35b2:	97 e7       	ldi	r25, 0x77	; 119
    35b4:	f8 01       	movw	r30, r16
    35b6:	91 83       	std	Z+1, r25	; 0x01
    35b8:	80 83       	st	Z, r24
    35ba:	20 97       	sbiw	r28, 0x00	; 0
    35bc:	e1 f0       	breq	.+56     	; 0x35f6 <CurrentThresholdsGet+0x8a>
    35be:	85 e0       	ldi	r24, 0x05	; 5
    35c0:	90 e0       	ldi	r25, 0x00	; 0
    35c2:	0e 94 83 26 	call	0x4d06	; 0x4d06 <EEPROMRead>
    35c6:	90 e0       	ldi	r25, 0x00	; 0
    35c8:	99 83       	std	Y+1, r25	; 0x01
    35ca:	88 83       	st	Y, r24
    35cc:	86 e0       	ldi	r24, 0x06	; 6
    35ce:	90 e0       	ldi	r25, 0x00	; 0
    35d0:	0e 94 83 26 	call	0x4d06	; 0x4d06 <EEPROMRead>
    35d4:	90 e0       	ldi	r25, 0x00	; 0
    35d6:	98 2f       	mov	r25, r24
    35d8:	88 27       	eor	r24, r24
    35da:	28 81       	ld	r18, Y
    35dc:	39 81       	ldd	r19, Y+1	; 0x01
    35de:	82 2b       	or	r24, r18
    35e0:	93 2b       	or	r25, r19
    35e2:	99 83       	std	Y+1, r25	; 0x01
    35e4:	88 83       	st	Y, r24
    35e6:	01 97       	sbiw	r24, 0x01	; 1
    35e8:	8e 3f       	cpi	r24, 0xFE	; 254
    35ea:	9f 4f       	sbci	r25, 0xFF	; 255
    35ec:	20 f0       	brcs	.+8      	; 0x35f6 <CurrentThresholdsGet+0x8a>
    35ee:	84 ef       	ldi	r24, 0xF4	; 244
    35f0:	91 e8       	ldi	r25, 0x81	; 129
    35f2:	99 83       	std	Y+1, r25	; 0x01
    35f4:	88 83       	st	Y, r24
    35f6:	df 91       	pop	r29
    35f8:	cf 91       	pop	r28
    35fa:	1f 91       	pop	r17
    35fc:	0f 91       	pop	r16
    35fe:	08 95       	ret

Disassembly of section .text.CANReceiveCallback:

00001154 <CANReceiveCallback>:
    1154:	cf 92       	push	r12
    1156:	df 92       	push	r13
    1158:	ef 92       	push	r14
    115a:	ff 92       	push	r15
    115c:	cf 93       	push	r28
    115e:	fb 01       	movw	r30, r22
    1160:	90 91 21 03 	lds	r25, 0x0321	; 0x800321 <sg_bModuleRegistered>
    1164:	10 92 70 09 	sts	0x0970, r1	; 0x800970 <sg_u8TicksSinceLastPackControllerMessage>
    1168:	82 31       	cpi	r24, 0x12	; 18
    116a:	29 f4       	brne	.+10     	; 0x1176 <CANReceiveCallback+0x22>
    116c:	80 81       	ld	r24, Z
    116e:	8f 70       	andi	r24, 0x0F	; 15
    1170:	0e 94 43 26 	call	0x4c86	; 0x4c86 <ModuleControllerStateSetMax>
    1174:	32 c1       	rjmp	.+612    	; 0x13da <CANReceiveCallback+0x286>
    1176:	8f 30       	cpi	r24, 0x0F	; 15
    1178:	a9 f4       	brne	.+42     	; 0x11a4 <CANReceiveCallback+0x50>
    117a:	8a ed       	ldi	r24, 0xDA	; 218
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	a0 e0       	ldi	r26, 0x00	; 0
    1180:	af 93       	push	r26
    1182:	9f 93       	push	r25
    1184:	8f 93       	push	r24
    1186:	0e 94 d0 26 	call	0x4da0	; 0x4da0 <DebugOut>
    118a:	10 92 27 03 	sts	0x0327, r1	; 0x800327 <sg_u8ModuleRegistrationID>
    118e:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <sg_bModuleRegistered>
    1192:	10 92 74 09 	sts	0x0974, r1	; 0x800974 <sg_bIgnoreStatusRequests>
    1196:	80 e0       	ldi	r24, 0x00	; 0
    1198:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <ModuleControllerStateSet>
    119c:	0f 90       	pop	r0
    119e:	0f 90       	pop	r0
    11a0:	0f 90       	pop	r0
    11a2:	1b c1       	rjmp	.+566    	; 0x13da <CANReceiveCallback+0x286>
    11a4:	80 31       	cpi	r24, 0x10	; 16
    11a6:	21 f4       	brne	.+8      	; 0x11b0 <CANReceiveCallback+0x5c>
    11a8:	80 e0       	ldi	r24, 0x00	; 0
    11aa:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <ModuleControllerStateSet>
    11ae:	15 c1       	rjmp	.+554    	; 0x13da <CANReceiveCallback+0x286>
    11b0:	81 31       	cpi	r24, 0x11	; 17
    11b2:	59 f4       	brne	.+22     	; 0x11ca <CANReceiveCallback+0x76>
    11b4:	20 81       	ld	r18, Z
    11b6:	31 81       	ldd	r19, Z+1	; 0x01
    11b8:	42 81       	ldd	r20, Z+2	; 0x02
    11ba:	53 81       	ldd	r21, Z+3	; 0x03
    11bc:	64 81       	ldd	r22, Z+4	; 0x04
    11be:	75 81       	ldd	r23, Z+5	; 0x05
    11c0:	86 81       	ldd	r24, Z+6	; 0x06
    11c2:	97 81       	ldd	r25, Z+7	; 0x07
    11c4:	0e 94 91 17 	call	0x2f22	; 0x2f22 <RTCSetTime>
    11c8:	08 c1       	rjmp	.+528    	; 0x13da <CANReceiveCallback+0x286>
    11ca:	8d 30       	cpi	r24, 0x0D	; 13
    11cc:	09 f0       	breq	.+2      	; 0x11d0 <CANReceiveCallback+0x7c>
    11ce:	4f c0       	rjmp	.+158    	; 0x126e <CANReceiveCallback+0x11a>
    11d0:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <sg_bModuleRegistered>
    11d4:	81 11       	cpse	r24, r1
    11d6:	2f c0       	rjmp	.+94     	; 0x1236 <CANReceiveCallback+0xe2>
    11d8:	80 91 76 09 	lds	r24, 0x0976	; 0x800976 <sg_bAnnouncementPending>
    11dc:	81 11       	cpse	r24, r1
    11de:	2b c0       	rjmp	.+86     	; 0x1236 <CANReceiveCallback+0xe2>
    11e0:	c0 90 1e 01 	lds	r12, 0x011E	; 0x80011e <sg_sFrame+0xe>
    11e4:	d0 90 1f 01 	lds	r13, 0x011F	; 0x80011f <sg_sFrame+0xf>
    11e8:	e0 90 20 01 	lds	r14, 0x0120	; 0x800120 <sg_sFrame+0x10>
    11ec:	f0 90 21 01 	lds	r15, 0x0121	; 0x800121 <sg_sFrame+0x11>
    11f0:	1f 92       	push	r1
    11f2:	cf 92       	push	r12
    11f4:	85 e0       	ldi	r24, 0x05	; 5
    11f6:	91 e0       	ldi	r25, 0x01	; 1
    11f8:	a0 e0       	ldi	r26, 0x00	; 0
    11fa:	af 93       	push	r26
    11fc:	9f 93       	push	r25
    11fe:	8f 93       	push	r24
    1200:	0e 94 d0 26 	call	0x4da0	; 0x4da0 <DebugOut>
    1204:	8d ec       	ldi	r24, 0xCD	; 205
    1206:	c8 9e       	mul	r12, r24
    1208:	c1 2c       	mov	r12, r1
    120a:	11 24       	eor	r1, r1
    120c:	c6 94       	lsr	r12
    120e:	c6 94       	lsr	r12
    1210:	c6 94       	lsr	r12
    1212:	c0 92 75 09 	sts	0x0975, r12	; 0x800975 <sg_u8AnnouncementDelayTicks>
    1216:	80 91 75 09 	lds	r24, 0x0975	; 0x800975 <sg_u8AnnouncementDelayTicks>
    121a:	0f 90       	pop	r0
    121c:	0f 90       	pop	r0
    121e:	0f 90       	pop	r0
    1220:	0f 90       	pop	r0
    1222:	0f 90       	pop	r0
    1224:	81 11       	cpse	r24, r1
    1226:	03 c0       	rjmp	.+6      	; 0x122e <CANReceiveCallback+0xda>
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	80 93 75 09 	sts	0x0975, r24	; 0x800975 <sg_u8AnnouncementDelayTicks>
    122e:	81 e0       	ldi	r24, 0x01	; 1
    1230:	80 93 76 09 	sts	0x0976, r24	; 0x800976 <sg_bAnnouncementPending>
    1234:	d2 c0       	rjmp	.+420    	; 0x13da <CANReceiveCallback+0x286>
    1236:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <sg_bModuleRegistered>
    123a:	88 23       	and	r24, r24
    123c:	61 f0       	breq	.+24     	; 0x1256 <CANReceiveCallback+0x102>
    123e:	88 e4       	ldi	r24, 0x48	; 72
    1240:	91 e0       	ldi	r25, 0x01	; 1
    1242:	a0 e0       	ldi	r26, 0x00	; 0
    1244:	af 93       	push	r26
    1246:	9f 93       	push	r25
    1248:	8f 93       	push	r24
    124a:	0e 94 d0 26 	call	0x4da0	; 0x4da0 <DebugOut>
    124e:	0f 90       	pop	r0
    1250:	0f 90       	pop	r0
    1252:	0f 90       	pop	r0
    1254:	c2 c0       	rjmp	.+388    	; 0x13da <CANReceiveCallback+0x286>
    1256:	86 e7       	ldi	r24, 0x76	; 118
    1258:	91 e0       	ldi	r25, 0x01	; 1
    125a:	a0 e0       	ldi	r26, 0x00	; 0
    125c:	af 93       	push	r26
    125e:	9f 93       	push	r25
    1260:	8f 93       	push	r24
    1262:	0e 94 d0 26 	call	0x4da0	; 0x4da0 <DebugOut>
    1266:	0f 90       	pop	r0
    1268:	0f 90       	pop	r0
    126a:	0f 90       	pop	r0
    126c:	b6 c0       	rjmp	.+364    	; 0x13da <CANReceiveCallback+0x286>
    126e:	89 30       	cpi	r24, 0x09	; 9
    1270:	09 f0       	breq	.+2      	; 0x1274 <CANReceiveCallback+0x120>
    1272:	3f c0       	rjmp	.+126    	; 0x12f2 <CANReceiveCallback+0x19e>
    1274:	48 30       	cpi	r20, 0x08	; 8
    1276:	09 f0       	breq	.+2      	; 0x127a <CANReceiveCallback+0x126>
    1278:	b0 c0       	rjmp	.+352    	; 0x13da <CANReceiveCallback+0x286>
    127a:	f0 80       	ld	r15, Z
    127c:	82 81       	ldd	r24, Z+2	; 0x02
    127e:	82 30       	cpi	r24, 0x02	; 2
    1280:	09 f0       	breq	.+2      	; 0x1284 <CANReceiveCallback+0x130>
    1282:	ab c0       	rjmp	.+342    	; 0x13da <CANReceiveCallback+0x286>
    1284:	83 81       	ldd	r24, Z+3	; 0x03
    1286:	83 30       	cpi	r24, 0x03	; 3
    1288:	09 f0       	breq	.+2      	; 0x128c <CANReceiveCallback+0x138>
    128a:	a7 c0       	rjmp	.+334    	; 0x13da <CANReceiveCallback+0x286>
    128c:	40 91 1e 01 	lds	r20, 0x011E	; 0x80011e <sg_sFrame+0xe>
    1290:	50 91 1f 01 	lds	r21, 0x011F	; 0x80011f <sg_sFrame+0xf>
    1294:	60 91 20 01 	lds	r22, 0x0120	; 0x800120 <sg_sFrame+0x10>
    1298:	70 91 21 01 	lds	r23, 0x0121	; 0x800121 <sg_sFrame+0x11>
    129c:	84 81       	ldd	r24, Z+4	; 0x04
    129e:	95 81       	ldd	r25, Z+5	; 0x05
    12a0:	a6 81       	ldd	r26, Z+6	; 0x06
    12a2:	b7 81       	ldd	r27, Z+7	; 0x07
    12a4:	48 17       	cp	r20, r24
    12a6:	59 07       	cpc	r21, r25
    12a8:	6a 07       	cpc	r22, r26
    12aa:	7b 07       	cpc	r23, r27
    12ac:	09 f0       	breq	.+2      	; 0x12b0 <CANReceiveCallback+0x15c>
    12ae:	95 c0       	rjmp	.+298    	; 0x13da <CANReceiveCallback+0x286>
    12b0:	10 92 70 09 	sts	0x0970, r1	; 0x800970 <sg_u8TicksSinceLastPackControllerMessage>
    12b4:	f0 92 27 03 	sts	0x0327, r15	; 0x800327 <sg_u8ModuleRegistrationID>
    12b8:	0e 94 b0 26 	call	0x4d60	; 0x4d60 <SendModuleControllerStatus>
    12bc:	c1 e0       	ldi	r28, 0x01	; 1
    12be:	c0 93 1c 03 	sts	0x031C, r28	; 0x80031c <sg_bSendHardwareDetail>
    12c2:	c0 93 21 03 	sts	0x0321, r28	; 0x800321 <sg_bModuleRegistered>
    12c6:	1f 92       	push	r1
    12c8:	ff 92       	push	r15
    12ca:	8e e9       	ldi	r24, 0x9E	; 158
    12cc:	91 e0       	ldi	r25, 0x01	; 1
    12ce:	a0 e0       	ldi	r26, 0x00	; 0
    12d0:	af 93       	push	r26
    12d2:	9f 93       	push	r25
    12d4:	8f 93       	push	r24
    12d6:	0e 94 d0 26 	call	0x4da0	; 0x4da0 <DebugOut>
    12da:	10 92 76 09 	sts	0x0976, r1	; 0x800976 <sg_bAnnouncementPending>
    12de:	10 92 75 09 	sts	0x0975, r1	; 0x800975 <sg_u8AnnouncementDelayTicks>
    12e2:	c0 93 20 03 	sts	0x0320, r28	; 0x800320 <sg_bSendTimeRequest>
    12e6:	0f 90       	pop	r0
    12e8:	0f 90       	pop	r0
    12ea:	0f 90       	pop	r0
    12ec:	0f 90       	pop	r0
    12ee:	0f 90       	pop	r0
    12f0:	74 c0       	rjmp	.+232    	; 0x13da <CANReceiveCallback+0x286>
    12f2:	44 23       	and	r20, r20
    12f4:	09 f4       	brne	.+2      	; 0x12f8 <CANReceiveCallback+0x1a4>
    12f6:	71 c0       	rjmp	.+226    	; 0x13da <CANReceiveCallback+0x286>
    12f8:	20 81       	ld	r18, Z
    12fa:	91 11       	cpse	r25, r1
    12fc:	08 c0       	rjmp	.+16     	; 0x130e <CANReceiveCallback+0x1ba>
    12fe:	8a 30       	cpi	r24, 0x0A	; 10
    1300:	09 f0       	breq	.+2      	; 0x1304 <CANReceiveCallback+0x1b0>
    1302:	6b c0       	rjmp	.+214    	; 0x13da <CANReceiveCallback+0x286>
    1304:	90 91 21 03 	lds	r25, 0x0321	; 0x800321 <sg_bModuleRegistered>
    1308:	99 23       	and	r25, r25
    130a:	09 f4       	brne	.+2      	; 0x130e <CANReceiveCallback+0x1ba>
    130c:	66 c0       	rjmp	.+204    	; 0x13da <CANReceiveCallback+0x286>
    130e:	90 91 27 03 	lds	r25, 0x0327	; 0x800327 <sg_u8ModuleRegistrationID>
    1312:	29 13       	cpse	r18, r25
    1314:	62 c0       	rjmp	.+196    	; 0x13da <CANReceiveCallback+0x286>
    1316:	8a 30       	cpi	r24, 0x0A	; 10
    1318:	a9 f4       	brne	.+42     	; 0x1344 <CANReceiveCallback+0x1f0>
    131a:	41 30       	cpi	r20, 0x01	; 1
    131c:	09 f0       	breq	.+2      	; 0x1320 <CANReceiveCallback+0x1cc>
    131e:	5d c0       	rjmp	.+186    	; 0x13da <CANReceiveCallback+0x286>
    1320:	80 91 74 09 	lds	r24, 0x0974	; 0x800974 <sg_bIgnoreStatusRequests>
    1324:	81 11       	cpse	r24, r1
    1326:	59 c0       	rjmp	.+178    	; 0x13da <CANReceiveCallback+0x286>
    1328:	89 ed       	ldi	r24, 0xD9	; 217
    132a:	91 e0       	ldi	r25, 0x01	; 1
    132c:	a0 e0       	ldi	r26, 0x00	; 0
    132e:	af 93       	push	r26
    1330:	9f 93       	push	r25
    1332:	8f 93       	push	r24
    1334:	0e 94 d0 26 	call	0x4da0	; 0x4da0 <DebugOut>
    1338:	0e 94 b0 26 	call	0x4d60	; 0x4d60 <SendModuleControllerStatus>
    133c:	0f 90       	pop	r0
    133e:	0f 90       	pop	r0
    1340:	0f 90       	pop	r0
    1342:	4b c0       	rjmp	.+150    	; 0x13da <CANReceiveCallback+0x286>
    1344:	8b 30       	cpi	r24, 0x0B	; 11
    1346:	f1 f4       	brne	.+60     	; 0x1384 <CANReceiveCallback+0x230>
    1348:	43 30       	cpi	r20, 0x03	; 3
    134a:	09 f0       	breq	.+2      	; 0x134e <CANReceiveCallback+0x1fa>
    134c:	46 c0       	rjmp	.+140    	; 0x13da <CANReceiveCallback+0x286>
    134e:	80 91 1d 03 	lds	r24, 0x031D	; 0x80031d <sg_bSendCellStatus>
    1352:	81 11       	cpse	r24, r1
    1354:	42 c0       	rjmp	.+132    	; 0x13da <CANReceiveCallback+0x286>
    1356:	81 81       	ldd	r24, Z+1	; 0x01
    1358:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <sg_sFrame+0x15>
    135c:	89 17       	cp	r24, r25
    135e:	e8 f5       	brcc	.+122    	; 0x13da <CANReceiveCallback+0x286>
    1360:	80 93 23 03 	sts	0x0323, r24	; 0x800323 <sg_u8CellStatus>
    1364:	90 91 23 03 	lds	r25, 0x0323	; 0x800323 <sg_u8CellStatus>
    1368:	90 93 24 03 	sts	0x0324, r25	; 0x800324 <sg_u8CellStatusTarget>
    136c:	8f 3f       	cpi	r24, 0xFF	; 255
    136e:	31 f4       	brne	.+12     	; 0x137c <CANReceiveCallback+0x228>
    1370:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <sg_sFrame+0x15>
    1374:	80 93 24 03 	sts	0x0324, r24	; 0x800324 <sg_u8CellStatusTarget>
    1378:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <sg_u8CellStatus>
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	80 93 1d 03 	sts	0x031D, r24	; 0x80031d <sg_bSendCellStatus>
    1382:	2b c0       	rjmp	.+86     	; 0x13da <CANReceiveCallback+0x286>
    1384:	8c 30       	cpi	r24, 0x0C	; 12
    1386:	49 f4       	brne	.+18     	; 0x139a <CANReceiveCallback+0x246>
    1388:	10 92 70 09 	sts	0x0970, r1	; 0x800970 <sg_u8TicksSinceLastPackControllerMessage>
    138c:	42 30       	cpi	r20, 0x02	; 2
    138e:	29 f5       	brne	.+74     	; 0x13da <CANReceiveCallback+0x286>
    1390:	81 81       	ldd	r24, Z+1	; 0x01
    1392:	8f 70       	andi	r24, 0x0F	; 15
    1394:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <ModuleControllerStateSet>
    1398:	20 c0       	rjmp	.+64     	; 0x13da <CANReceiveCallback+0x286>
    139a:	85 30       	cpi	r24, 0x05	; 5
    139c:	21 f4       	brne	.+8      	; 0x13a6 <CANReceiveCallback+0x252>
    139e:	81 e0       	ldi	r24, 0x01	; 1
    13a0:	80 93 1c 03 	sts	0x031C, r24	; 0x80031c <sg_bSendHardwareDetail>
    13a4:	1a c0       	rjmp	.+52     	; 0x13da <CANReceiveCallback+0x286>
    13a6:	8e 30       	cpi	r24, 0x0E	; 14
    13a8:	c1 f4       	brne	.+48     	; 0x13da <CANReceiveCallback+0x286>
    13aa:	1f 92       	push	r1
    13ac:	2f 93       	push	r18
    13ae:	8e ef       	ldi	r24, 0xFE	; 254
    13b0:	91 e0       	ldi	r25, 0x01	; 1
    13b2:	a0 e0       	ldi	r26, 0x00	; 0
    13b4:	af 93       	push	r26
    13b6:	9f 93       	push	r25
    13b8:	8f 93       	push	r24
    13ba:	0e 94 d0 26 	call	0x4da0	; 0x4da0 <DebugOut>
    13be:	10 92 27 03 	sts	0x0327, r1	; 0x800327 <sg_u8ModuleRegistrationID>
    13c2:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <sg_bModuleRegistered>
    13c6:	10 92 74 09 	sts	0x0974, r1	; 0x800974 <sg_bIgnoreStatusRequests>
    13ca:	80 e0       	ldi	r24, 0x00	; 0
    13cc:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <ModuleControllerStateSet>
    13d0:	0f 90       	pop	r0
    13d2:	0f 90       	pop	r0
    13d4:	0f 90       	pop	r0
    13d6:	0f 90       	pop	r0
    13d8:	0f 90       	pop	r0
    13da:	cf 91       	pop	r28
    13dc:	ff 90       	pop	r15
    13de:	ef 90       	pop	r14
    13e0:	df 90       	pop	r13
    13e2:	cf 90       	pop	r12
    13e4:	08 95       	ret

Disassembly of section .text.ControllerStatusMessagesSend:

00000810 <ControllerStatusMessagesSend>:
 810:	cf 92       	push	r12
 812:	df 92       	push	r13
 814:	ef 92       	push	r14
 816:	ff 92       	push	r15
 818:	0f 93       	push	r16
 81a:	1f 93       	push	r17
 81c:	cf 93       	push	r28
 81e:	df 93       	push	r29
 820:	00 d0       	rcall	.+0      	; 0x822 <ControllerStatusMessagesSend+0x12>
 822:	00 d0       	rcall	.+0      	; 0x824 <ControllerStatusMessagesSend+0x14>
 824:	cd b7       	in	r28, 0x3d	; 61
 826:	de b7       	in	r29, 0x3e	; 62
 828:	8c 01       	movw	r16, r24
 82a:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <sg_bSendTimeRequest>
 82e:	88 23       	and	r24, r24
 830:	69 f0       	breq	.+26     	; 0x84c <ControllerStatusMessagesSend+0x3c>
 832:	88 e0       	ldi	r24, 0x08	; 8
 834:	d8 01       	movw	r26, r16
 836:	1d 92       	st	X+, r1
 838:	8a 95       	dec	r24
 83a:	e9 f7       	brne	.-6      	; 0x836 <ControllerStatusMessagesSend+0x26>
 83c:	48 e0       	ldi	r20, 0x08	; 8
 83e:	b8 01       	movw	r22, r16
 840:	88 e0       	ldi	r24, 0x08	; 8
 842:	0e 94 38 26 	call	0x4c70	; 0x4c70 <CANSendMessage>
 846:	81 11       	cpse	r24, r1
 848:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <sg_bSendTimeRequest>
 84c:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <sg_bSendModuleControllerStatus>
 850:	88 23       	and	r24, r24
 852:	09 f4       	brne	.+2      	; 0x856 <ControllerStatusMessagesSend+0x46>
 854:	06 c1       	rjmp	.+524    	; 0xa62 <ControllerStatusMessagesSend+0x252>
 856:	80 91 6c 09 	lds	r24, 0x096C	; 0x80096c <sg_u8ControllerStatusMsgCount>
 85a:	81 11       	cpse	r24, r1
 85c:	80 c0       	rjmp	.+256    	; 0x95e <ControllerStatusMessagesSend+0x14e>
 85e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
 862:	8f 70       	andi	r24, 0x0F	; 15
 864:	f8 01       	movw	r30, r16
 866:	80 83       	st	Z, r24
 868:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <sg_u8SOC>
 86c:	81 83       	std	Z+1, r24	; 0x01
 86e:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <sg_u8SOH>
 872:	82 83       	std	Z+2, r24	; 0x02
 874:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <sg_sFrame+0x15>
 878:	83 83       	std	Z+3, r24	; 0x03
 87a:	84 e0       	ldi	r24, 0x04	; 4
 87c:	34 96       	adiw	r30, 0x04	; 4
 87e:	df 01       	movw	r26, r30
 880:	1d 92       	st	X+, r1
 882:	8a 95       	dec	r24
 884:	e9 f7       	brne	.-6      	; 0x880 <ControllerStatusMessagesSend+0x70>
 886:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <sg_sFrame+0x48>
 88a:	88 23       	and	r24, r24
 88c:	79 f0       	breq	.+30     	; 0x8ac <ControllerStatusMessagesSend+0x9c>
 88e:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <sg_sFrame+0x4b>
 892:	88 23       	and	r24, r24
 894:	71 f0       	breq	.+28     	; 0x8b2 <ControllerStatusMessagesSend+0xa2>
 896:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
 89a:	83 30       	cpi	r24, 0x03	; 3
 89c:	69 f4       	brne	.+26     	; 0x8b8 <ControllerStatusMessagesSend+0xa8>
 89e:	0e 94 22 13 	call	0x2644	; 0x2644 <ModuleCurrentConvertReadings>
 8a2:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <sg_sFrame+0x2f>
 8a6:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <sg_sFrame+0x30>
 8aa:	08 c0       	rjmp	.+16     	; 0x8bc <ControllerStatusMessagesSend+0xac>
 8ac:	80 e0       	ldi	r24, 0x00	; 0
 8ae:	90 e8       	ldi	r25, 0x80	; 128
 8b0:	05 c0       	rjmp	.+10     	; 0x8bc <ControllerStatusMessagesSend+0xac>
 8b2:	80 e0       	ldi	r24, 0x00	; 0
 8b4:	90 e8       	ldi	r25, 0x80	; 128
 8b6:	02 c0       	rjmp	.+4      	; 0x8bc <ControllerStatusMessagesSend+0xac>
 8b8:	80 e0       	ldi	r24, 0x00	; 0
 8ba:	90 e8       	ldi	r25, 0x80	; 128
 8bc:	f8 01       	movw	r30, r16
 8be:	84 83       	std	Z+4, r24	; 0x04
 8c0:	95 83       	std	Z+5, r25	; 0x05
 8c2:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <sg_sFrame+0x45>
 8c6:	88 23       	and	r24, r24
 8c8:	79 f0       	breq	.+30     	; 0x8e8 <ControllerStatusMessagesSend+0xd8>
 8ca:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <sg_sFrame+0x46>
 8ce:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <sg_sFrame+0x47>
 8d2:	4f ef       	ldi	r20, 0xFF	; 255
 8d4:	53 e0       	ldi	r21, 0x03	; 3
 8d6:	60 e0       	ldi	r22, 0x00	; 0
 8d8:	70 e0       	ldi	r23, 0x00	; 0
 8da:	9a 01       	movw	r18, r20
 8dc:	ab 01       	movw	r20, r22
 8de:	28 1b       	sub	r18, r24
 8e0:	39 0b       	sbc	r19, r25
 8e2:	41 09       	sbc	r20, r1
 8e4:	51 09       	sbc	r21, r1
 8e6:	03 c0       	rjmp	.+6      	; 0x8ee <ControllerStatusMessagesSend+0xde>
 8e8:	20 e0       	ldi	r18, 0x00	; 0
 8ea:	30 e0       	ldi	r19, 0x00	; 0
 8ec:	a9 01       	movw	r20, r18
 8ee:	e0 e1       	ldi	r30, 0x10	; 16
 8f0:	f1 e0       	ldi	r31, 0x01	; 1
 8f2:	a5 a1       	ldd	r26, Z+37	; 0x25
 8f4:	b6 a1       	ldd	r27, Z+38	; 0x26
 8f6:	0e 94 c0 26 	call	0x4d80	; 0x4d80 <__mulshisi3>
 8fa:	dc 01       	movw	r26, r24
 8fc:	cb 01       	movw	r24, r22
 8fe:	68 94       	set
 900:	16 f8       	bld	r1, 6
 902:	b6 95       	lsr	r27
 904:	a7 95       	ror	r26
 906:	97 95       	ror	r25
 908:	87 95       	ror	r24
 90a:	16 94       	lsr	r1
 90c:	d1 f7       	brne	.-12     	; 0x902 <ControllerStatusMessagesSend+0xf2>
 90e:	c5 8c       	ldd	r12, Z+29	; 0x1d
 910:	d6 8c       	ldd	r13, Z+30	; 0x1e
 912:	e7 8c       	ldd	r14, Z+31	; 0x1f
 914:	f0 a0       	ldd	r15, Z+32	; 0x20
 916:	bc 01       	movw	r22, r24
 918:	cd 01       	movw	r24, r26
 91a:	6c 0d       	add	r22, r12
 91c:	7d 1d       	adc	r23, r13
 91e:	8e 1d       	adc	r24, r14
 920:	9f 1d       	adc	r25, r15
 922:	2f e0       	ldi	r18, 0x0F	; 15
 924:	30 e0       	ldi	r19, 0x00	; 0
 926:	40 e0       	ldi	r20, 0x00	; 0
 928:	50 e0       	ldi	r21, 0x00	; 0
 92a:	0e 94 c2 21 	call	0x4384	; 0x4384 <__udivmodsi4>
 92e:	20 93 51 01 	sts	0x0151, r18	; 0x800151 <sg_sFrame+0x41>
 932:	30 93 52 01 	sts	0x0152, r19	; 0x800152 <sg_sFrame+0x42>
 936:	40 93 53 01 	sts	0x0153, r20	; 0x800153 <sg_sFrame+0x43>
 93a:	50 93 54 01 	sts	0x0154, r21	; 0x800154 <sg_sFrame+0x44>
 93e:	d8 01       	movw	r26, r16
 940:	16 96       	adiw	r26, 0x06	; 6
 942:	2c 93       	st	X, r18
 944:	16 97       	sbiw	r26, 0x06	; 6
 946:	17 96       	adiw	r26, 0x07	; 7
 948:	3c 93       	st	X, r19
 94a:	48 e0       	ldi	r20, 0x08	; 8
 94c:	b8 01       	movw	r22, r16
 94e:	81 e0       	ldi	r24, 0x01	; 1
 950:	0e 94 38 26 	call	0x4c70	; 0x4c70 <CANSendMessage>
 954:	88 23       	and	r24, r24
 956:	09 f4       	brne	.+2      	; 0x95a <ControllerStatusMessagesSend+0x14a>
 958:	6b c0       	rjmp	.+214    	; 0xa30 <ControllerStatusMessagesSend+0x220>
 95a:	81 e0       	ldi	r24, 0x01	; 1
 95c:	70 c0       	rjmp	.+224    	; 0xa3e <ControllerStatusMessagesSend+0x22e>
 95e:	81 30       	cpi	r24, 0x01	; 1
 960:	c1 f5       	brne	.+112    	; 0x9d2 <ControllerStatusMessagesSend+0x1c2>
 962:	e0 e1       	ldi	r30, 0x10	; 16
 964:	f1 e0       	ldi	r31, 0x01	; 1
 966:	81 ad       	ldd	r24, Z+57	; 0x39
 968:	92 ad       	ldd	r25, Z+58	; 0x3a
 96a:	d8 01       	movw	r26, r16
 96c:	8c 93       	st	X, r24
 96e:	81 ad       	ldd	r24, Z+57	; 0x39
 970:	92 ad       	ldd	r25, Z+58	; 0x3a
 972:	11 96       	adiw	r26, 0x01	; 1
 974:	9c 93       	st	X, r25
 976:	11 97       	sbiw	r26, 0x01	; 1
 978:	87 a9       	ldd	r24, Z+55	; 0x37
 97a:	90 ad       	ldd	r25, Z+56	; 0x38
 97c:	12 96       	adiw	r26, 0x02	; 2
 97e:	8c 93       	st	X, r24
 980:	12 97       	sbiw	r26, 0x02	; 2
 982:	87 a9       	ldd	r24, Z+55	; 0x37
 984:	90 ad       	ldd	r25, Z+56	; 0x38
 986:	13 96       	adiw	r26, 0x03	; 3
 988:	9c 93       	st	X, r25
 98a:	13 97       	sbiw	r26, 0x03	; 3
 98c:	83 ad       	ldd	r24, Z+59	; 0x3b
 98e:	94 ad       	ldd	r25, Z+60	; 0x3c
 990:	14 96       	adiw	r26, 0x04	; 4
 992:	8c 93       	st	X, r24
 994:	14 97       	sbiw	r26, 0x04	; 4
 996:	83 ad       	ldd	r24, Z+59	; 0x3b
 998:	94 ad       	ldd	r25, Z+60	; 0x3c
 99a:	15 96       	adiw	r26, 0x05	; 5
 99c:	9c 93       	st	X, r25
 99e:	60 91 4d 01 	lds	r22, 0x014D	; 0x80014d <sg_sFrame+0x3d>
 9a2:	70 91 4e 01 	lds	r23, 0x014E	; 0x80014e <sg_sFrame+0x3e>
 9a6:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <sg_sFrame+0x3f>
 9aa:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <sg_sFrame+0x40>
 9ae:	2f e0       	ldi	r18, 0x0F	; 15
 9b0:	30 e0       	ldi	r19, 0x00	; 0
 9b2:	40 e0       	ldi	r20, 0x00	; 0
 9b4:	50 e0       	ldi	r21, 0x00	; 0
 9b6:	0e 94 c2 21 	call	0x4384	; 0x4384 <__udivmodsi4>
 9ba:	f8 01       	movw	r30, r16
 9bc:	26 83       	std	Z+6, r18	; 0x06
 9be:	37 83       	std	Z+7, r19	; 0x07
 9c0:	48 e0       	ldi	r20, 0x08	; 8
 9c2:	b8 01       	movw	r22, r16
 9c4:	82 e0       	ldi	r24, 0x02	; 2
 9c6:	0e 94 38 26 	call	0x4c70	; 0x4c70 <CANSendMessage>
 9ca:	88 23       	and	r24, r24
 9cc:	99 f1       	breq	.+102    	; 0xa34 <ControllerStatusMessagesSend+0x224>
 9ce:	81 e0       	ldi	r24, 0x01	; 1
 9d0:	36 c0       	rjmp	.+108    	; 0xa3e <ControllerStatusMessagesSend+0x22e>
 9d2:	82 30       	cpi	r24, 0x02	; 2
 9d4:	89 f5       	brne	.+98     	; 0xa38 <ControllerStatusMessagesSend+0x228>
 9d6:	e0 e1       	ldi	r30, 0x10	; 16
 9d8:	f1 e0       	ldi	r31, 0x01	; 1
 9da:	83 a9       	ldd	r24, Z+51	; 0x33
 9dc:	94 a9       	ldd	r25, Z+52	; 0x34
 9de:	d8 01       	movw	r26, r16
 9e0:	8c 93       	st	X, r24
 9e2:	83 a9       	ldd	r24, Z+51	; 0x33
 9e4:	94 a9       	ldd	r25, Z+52	; 0x34
 9e6:	11 96       	adiw	r26, 0x01	; 1
 9e8:	9c 93       	st	X, r25
 9ea:	11 97       	sbiw	r26, 0x01	; 1
 9ec:	81 a9       	ldd	r24, Z+49	; 0x31
 9ee:	92 a9       	ldd	r25, Z+50	; 0x32
 9f0:	12 96       	adiw	r26, 0x02	; 2
 9f2:	8c 93       	st	X, r24
 9f4:	12 97       	sbiw	r26, 0x02	; 2
 9f6:	81 a9       	ldd	r24, Z+49	; 0x31
 9f8:	92 a9       	ldd	r25, Z+50	; 0x32
 9fa:	13 96       	adiw	r26, 0x03	; 3
 9fc:	9c 93       	st	X, r25
 9fe:	13 97       	sbiw	r26, 0x03	; 3
 a00:	85 a9       	ldd	r24, Z+53	; 0x35
 a02:	96 a9       	ldd	r25, Z+54	; 0x36
 a04:	14 96       	adiw	r26, 0x04	; 4
 a06:	8c 93       	st	X, r24
 a08:	14 97       	sbiw	r26, 0x04	; 4
 a0a:	85 a9       	ldd	r24, Z+53	; 0x35
 a0c:	96 a9       	ldd	r25, Z+54	; 0x36
 a0e:	15 96       	adiw	r26, 0x05	; 5
 a10:	9c 93       	st	X, r25
 a12:	15 97       	sbiw	r26, 0x05	; 5
 a14:	16 96       	adiw	r26, 0x06	; 6
 a16:	1c 92       	st	X, r1
 a18:	16 97       	sbiw	r26, 0x06	; 6
 a1a:	17 96       	adiw	r26, 0x07	; 7
 a1c:	1c 92       	st	X, r1
 a1e:	48 e0       	ldi	r20, 0x08	; 8
 a20:	b8 01       	movw	r22, r16
 a22:	83 e0       	ldi	r24, 0x03	; 3
 a24:	0e 94 38 26 	call	0x4c70	; 0x4c70 <CANSendMessage>
 a28:	88 23       	and	r24, r24
 a2a:	41 f0       	breq	.+16     	; 0xa3c <ControllerStatusMessagesSend+0x22c>
 a2c:	81 e0       	ldi	r24, 0x01	; 1
 a2e:	07 c0       	rjmp	.+14     	; 0xa3e <ControllerStatusMessagesSend+0x22e>
 a30:	80 e0       	ldi	r24, 0x00	; 0
 a32:	05 c0       	rjmp	.+10     	; 0xa3e <ControllerStatusMessagesSend+0x22e>
 a34:	80 e0       	ldi	r24, 0x00	; 0
 a36:	03 c0       	rjmp	.+6      	; 0xa3e <ControllerStatusMessagesSend+0x22e>
 a38:	81 e0       	ldi	r24, 0x01	; 1
 a3a:	01 c0       	rjmp	.+2      	; 0xa3e <ControllerStatusMessagesSend+0x22e>
 a3c:	80 e0       	ldi	r24, 0x00	; 0
 a3e:	88 23       	and	r24, r24
 a40:	81 f0       	breq	.+32     	; 0xa62 <ControllerStatusMessagesSend+0x252>
 a42:	80 91 6c 09 	lds	r24, 0x096C	; 0x80096c <sg_u8ControllerStatusMsgCount>
 a46:	8f 5f       	subi	r24, 0xFF	; 255
 a48:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <sg_u8ControllerStatusMsgCount>
 a4c:	83 30       	cpi	r24, 0x03	; 3
 a4e:	48 f0       	brcs	.+18     	; 0xa62 <ControllerStatusMessagesSend+0x252>
 a50:	10 92 6c 09 	sts	0x096C, r1	; 0x80096c <sg_u8ControllerStatusMsgCount>
 a54:	10 92 1e 03 	sts	0x031E, r1	; 0x80031e <sg_bSendModuleControllerStatus>
 a58:	10 92 74 09 	sts	0x0974, r1	; 0x800974 <sg_bIgnoreStatusRequests>
 a5c:	81 e0       	ldi	r24, 0x01	; 1
 a5e:	80 93 1b 03 	sts	0x031B, r24	; 0x80031b <sg_bSendCellCommStatus>
 a62:	80 91 1d 03 	lds	r24, 0x031D	; 0x80031d <sg_bSendCellStatus>
 a66:	88 23       	and	r24, r24
 a68:	09 f4       	brne	.+2      	; 0xa6c <ControllerStatusMessagesSend+0x25c>
 a6a:	6d c0       	rjmp	.+218    	; 0xb46 <ControllerStatusMessagesSend+0x336>
 a6c:	1c 82       	std	Y+4, r1	; 0x04
 a6e:	1b 82       	std	Y+3, r1	; 0x03
 a70:	1a 82       	std	Y+2, r1	; 0x02
 a72:	19 82       	std	Y+1, r1	; 0x01
 a74:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <sg_sFrame+0x2d>
 a78:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <sg_u8CellStatus>
 a7c:	89 17       	cp	r24, r25
 a7e:	90 f4       	brcc	.+36     	; 0xaa4 <ControllerStatusMessagesSend+0x294>
 a80:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <sg_u8CellStatus>
 a84:	90 e0       	ldi	r25, 0x00	; 0
 a86:	45 96       	adiw	r24, 0x15	; 21
 a88:	88 0f       	add	r24, r24
 a8a:	99 1f       	adc	r25, r25
 a8c:	88 0f       	add	r24, r24
 a8e:	99 1f       	adc	r25, r25
 a90:	ae 01       	movw	r20, r28
 a92:	4f 5f       	subi	r20, 0xFF	; 255
 a94:	5f 4f       	sbci	r21, 0xFF	; 255
 a96:	be 01       	movw	r22, r28
 a98:	6d 5f       	subi	r22, 0xFD	; 253
 a9a:	7f 4f       	sbci	r23, 0xFF	; 255
 a9c:	80 5f       	subi	r24, 0xF0	; 240
 a9e:	9e 4f       	sbci	r25, 0xFE	; 254
 aa0:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <CellDataConvert>
 aa4:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <sg_u8CellStatus>
 aa8:	f8 01       	movw	r30, r16
 aaa:	80 83       	st	Z, r24
 aac:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <sg_sFrame+0x15>
 ab0:	81 83       	std	Z+1, r24	; 0x01
 ab2:	99 81       	ldd	r25, Y+1	; 0x01
 ab4:	8a 81       	ldd	r24, Y+2	; 0x02
 ab6:	92 83       	std	Z+2, r25	; 0x02
 ab8:	83 83       	std	Z+3, r24	; 0x03
 aba:	2b 81       	ldd	r18, Y+3	; 0x03
 abc:	3c 81       	ldd	r19, Y+4	; 0x04
 abe:	24 83       	std	Z+4, r18	; 0x04
 ac0:	35 83       	std	Z+5, r19	; 0x05
 ac2:	21 15       	cp	r18, r1
 ac4:	31 05       	cpc	r19, r1
 ac6:	59 f0       	breq	.+22     	; 0xade <ControllerStatusMessagesSend+0x2ce>
 ac8:	c9 01       	movw	r24, r18
 aca:	64 e0       	ldi	r22, 0x04	; 4
 acc:	70 e1       	ldi	r23, 0x10	; 16
 ace:	0e 94 04 24 	call	0x4808	; 0x4808 <__udivmodhi4>
 ad2:	84 e6       	ldi	r24, 0x64	; 100
 ad4:	68 9f       	mul	r22, r24
 ad6:	60 2d       	mov	r22, r0
 ad8:	11 24       	eor	r1, r1
 ada:	66 83       	std	Z+6, r22	; 0x06
 adc:	01 c0       	rjmp	.+2      	; 0xae0 <ControllerStatusMessagesSend+0x2d0>
 ade:	16 82       	std	Z+6, r1	; 0x06
 ae0:	e0 e1       	ldi	r30, 0x10	; 16
 ae2:	f1 e0       	ldi	r31, 0x01	; 1
 ae4:	47 a9       	ldd	r20, Z+55	; 0x37
 ae6:	50 ad       	ldd	r21, Z+56	; 0x38
 ae8:	81 ad       	ldd	r24, Z+57	; 0x39
 aea:	92 ad       	ldd	r25, Z+58	; 0x3a
 aec:	84 17       	cp	r24, r20
 aee:	95 07       	cpc	r25, r21
 af0:	98 f4       	brcc	.+38     	; 0xb18 <ControllerStatusMessagesSend+0x308>
 af2:	21 15       	cp	r18, r1
 af4:	31 05       	cpc	r19, r1
 af6:	81 f0       	breq	.+32     	; 0xb18 <ControllerStatusMessagesSend+0x308>
 af8:	67 a9       	ldd	r22, Z+55	; 0x37
 afa:	70 ad       	ldd	r23, Z+56	; 0x38
 afc:	81 ad       	ldd	r24, Z+57	; 0x39
 afe:	92 ad       	ldd	r25, Z+58	; 0x3a
 b00:	68 1b       	sub	r22, r24
 b02:	79 0b       	sbc	r23, r25
 b04:	c9 01       	movw	r24, r18
 b06:	0e 94 04 24 	call	0x4808	; 0x4808 <__udivmodhi4>
 b0a:	84 e6       	ldi	r24, 0x64	; 100
 b0c:	68 9f       	mul	r22, r24
 b0e:	60 2d       	mov	r22, r0
 b10:	11 24       	eor	r1, r1
 b12:	f8 01       	movw	r30, r16
 b14:	67 83       	std	Z+7, r22	; 0x07
 b16:	03 c0       	rjmp	.+6      	; 0xb1e <ControllerStatusMessagesSend+0x30e>
 b18:	d8 01       	movw	r26, r16
 b1a:	17 96       	adiw	r26, 0x07	; 7
 b1c:	1c 92       	st	X, r1
 b1e:	48 e0       	ldi	r20, 0x08	; 8
 b20:	b8 01       	movw	r22, r16
 b22:	84 e0       	ldi	r24, 0x04	; 4
 b24:	0e 94 38 26 	call	0x4c70	; 0x4c70 <CANSendMessage>
 b28:	88 23       	and	r24, r24
 b2a:	69 f0       	breq	.+26     	; 0xb46 <ControllerStatusMessagesSend+0x336>
 b2c:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <sg_u8CellStatus>
 b30:	8f 5f       	subi	r24, 0xFF	; 255
 b32:	80 93 23 03 	sts	0x0323, r24	; 0x800323 <sg_u8CellStatus>
 b36:	90 91 23 03 	lds	r25, 0x0323	; 0x800323 <sg_u8CellStatus>
 b3a:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <sg_u8CellStatusTarget>
 b3e:	98 17       	cp	r25, r24
 b40:	10 f0       	brcs	.+4      	; 0xb46 <ControllerStatusMessagesSend+0x336>
 b42:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <sg_bSendCellStatus>
 b46:	80 91 1b 03 	lds	r24, 0x031B	; 0x80031b <sg_bSendCellCommStatus>
 b4a:	88 23       	and	r24, r24
 b4c:	89 f1       	breq	.+98     	; 0xbb0 <ControllerStatusMessagesSend+0x3a0>
 b4e:	e0 e1       	ldi	r30, 0x10	; 16
 b50:	f1 e0       	ldi	r31, 0x01	; 1
 b52:	83 89       	ldd	r24, Z+19	; 0x13
 b54:	d8 01       	movw	r26, r16
 b56:	8c 93       	st	X, r24
 b58:	84 89       	ldd	r24, Z+20	; 0x14
 b5a:	11 96       	adiw	r26, 0x01	; 1
 b5c:	8c 93       	st	X, r24
 b5e:	11 97       	sbiw	r26, 0x01	; 1
 b60:	80 a5       	ldd	r24, Z+40	; 0x28
 b62:	91 a5       	ldd	r25, Z+41	; 0x29
 b64:	12 96       	adiw	r26, 0x02	; 2
 b66:	8c 93       	st	X, r24
 b68:	12 97       	sbiw	r26, 0x02	; 2
 b6a:	80 a5       	ldd	r24, Z+40	; 0x28
 b6c:	91 a5       	ldd	r25, Z+41	; 0x29
 b6e:	13 96       	adiw	r26, 0x03	; 3
 b70:	9c 93       	st	X, r25
 b72:	13 97       	sbiw	r26, 0x03	; 3
 b74:	86 a5       	ldd	r24, Z+46	; 0x2e
 b76:	14 96       	adiw	r26, 0x04	; 4
 b78:	8c 93       	st	X, r24
 b7a:	14 97       	sbiw	r26, 0x04	; 4
 b7c:	82 a5       	ldd	r24, Z+42	; 0x2a
 b7e:	8f 3f       	cpi	r24, 0xFF	; 255
 b80:	31 f0       	breq	.+12     	; 0xb8e <ControllerStatusMessagesSend+0x37e>
 b82:	85 a5       	ldd	r24, Z+45	; 0x2d
 b84:	92 a5       	ldd	r25, Z+42	; 0x2a
 b86:	89 1b       	sub	r24, r25
 b88:	15 96       	adiw	r26, 0x05	; 5
 b8a:	8c 93       	st	X, r24
 b8c:	03 c0       	rjmp	.+6      	; 0xb94 <ControllerStatusMessagesSend+0x384>
 b8e:	8f ef       	ldi	r24, 0xFF	; 255
 b90:	f8 01       	movw	r30, r16
 b92:	85 83       	std	Z+5, r24	; 0x05
 b94:	d8 01       	movw	r26, r16
 b96:	16 96       	adiw	r26, 0x06	; 6
 b98:	1c 92       	st	X, r1
 b9a:	16 97       	sbiw	r26, 0x06	; 6
 b9c:	17 96       	adiw	r26, 0x07	; 7
 b9e:	1c 92       	st	X, r1
 ba0:	48 e0       	ldi	r20, 0x08	; 8
 ba2:	b8 01       	movw	r22, r16
 ba4:	86 e0       	ldi	r24, 0x06	; 6
 ba6:	0e 94 38 26 	call	0x4c70	; 0x4c70 <CANSendMessage>
 baa:	81 11       	cpse	r24, r1
 bac:	10 92 1b 03 	sts	0x031B, r1	; 0x80031b <sg_bSendCellCommStatus>
 bb0:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <sg_bSendHardwareDetail>
 bb4:	88 23       	and	r24, r24
 bb6:	91 f0       	breq	.+36     	; 0xbdc <ControllerStatusMessagesSend+0x3cc>
 bb8:	b8 01       	movw	r22, r16
 bba:	c8 01       	movw	r24, r16
 bbc:	02 96       	adiw	r24, 0x02	; 2
 bbe:	0e 94 b6 1a 	call	0x356c	; 0x356c <CurrentThresholdsGet>
 bc2:	f8 01       	movw	r30, r16
 bc4:	14 82       	std	Z+4, r1	; 0x04
 bc6:	15 82       	std	Z+5, r1	; 0x05
 bc8:	16 82       	std	Z+6, r1	; 0x06
 bca:	17 82       	std	Z+7, r1	; 0x07
 bcc:	48 e0       	ldi	r20, 0x08	; 8
 bce:	b8 01       	movw	r22, r16
 bd0:	85 e0       	ldi	r24, 0x05	; 5
 bd2:	0e 94 38 26 	call	0x4c70	; 0x4c70 <CANSendMessage>
 bd6:	81 11       	cpse	r24, r1
 bd8:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <sg_bSendHardwareDetail>
 bdc:	0f 90       	pop	r0
 bde:	0f 90       	pop	r0
 be0:	0f 90       	pop	r0
 be2:	0f 90       	pop	r0
 be4:	df 91       	pop	r29
 be6:	cf 91       	pop	r28
 be8:	1f 91       	pop	r17
 bea:	0f 91       	pop	r16
 bec:	ff 90       	pop	r15
 bee:	ef 90       	pop	r14
 bf0:	df 90       	pop	r13
 bf2:	cf 90       	pop	r12
 bf4:	08 95       	ret

Disassembly of section .text.CellStringProcess:

00000eaa <CellStringProcess>:
     eaa:	3f 92       	push	r3
     eac:	4f 92       	push	r4
     eae:	5f 92       	push	r5
     eb0:	6f 92       	push	r6
     eb2:	7f 92       	push	r7
     eb4:	8f 92       	push	r8
     eb6:	9f 92       	push	r9
     eb8:	af 92       	push	r10
     eba:	bf 92       	push	r11
     ebc:	cf 92       	push	r12
     ebe:	df 92       	push	r13
     ec0:	ef 92       	push	r14
     ec2:	ff 92       	push	r15
     ec4:	0f 93       	push	r16
     ec6:	1f 93       	push	r17
     ec8:	cf 93       	push	r28
     eca:	df 93       	push	r29
     ecc:	00 d0       	rcall	.+0      	; 0xece <CellStringProcess+0x24>
     ece:	00 d0       	rcall	.+0      	; 0xed0 <CellStringProcess+0x26>
     ed0:	00 d0       	rcall	.+0      	; 0xed2 <CellStringProcess+0x28>
     ed2:	cd b7       	in	r28, 0x3d	; 61
     ed4:	de b7       	in	r29, 0x3e	; 62
     ed6:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <sg_sFrame+0x2b>
     eda:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <sg_sFrame+0x2c>
     ede:	89 2b       	or	r24, r25
     ee0:	09 f4       	brne	.+2      	; 0xee4 <CellStringProcess+0x3a>
     ee2:	20 c1       	rjmp	.+576    	; 0x1124 <__stack+0x25>
     ee4:	e0 e1       	ldi	r30, 0x10	; 16
     ee6:	f1 e0       	ldi	r31, 0x01	; 1
     ee8:	8f ef       	ldi	r24, 0xFF	; 255
     eea:	82 a7       	std	Z+42, r24	; 0x2a
     eec:	93 89       	ldd	r25, Z+19	; 0x13
     eee:	85 a5       	ldd	r24, Z+45	; 0x2d
     ef0:	89 17       	cp	r24, r25
     ef2:	28 f4       	brcc	.+10     	; 0xefe <CellStringProcess+0x54>
     ef4:	85 a5       	ldd	r24, Z+45	; 0x2d
     ef6:	83 8b       	std	Z+19, r24	; 0x13
     ef8:	81 e0       	ldi	r24, 0x01	; 1
     efa:	80 93 1b 03 	sts	0x031B, r24	; 0x80031b <sg_bSendCellCommStatus>
     efe:	e0 e1       	ldi	r30, 0x10	; 16
     f00:	f1 e0       	ldi	r31, 0x01	; 1
     f02:	94 89       	ldd	r25, Z+20	; 0x14
     f04:	85 a5       	ldd	r24, Z+45	; 0x2d
     f06:	98 17       	cp	r25, r24
     f08:	28 f4       	brcc	.+10     	; 0xf14 <CellStringProcess+0x6a>
     f0a:	85 a5       	ldd	r24, Z+45	; 0x2d
     f0c:	84 8b       	std	Z+20, r24	; 0x14
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	80 93 1b 03 	sts	0x031B, r24	; 0x80031b <sg_bSendCellCommStatus>
     f14:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <sg_sFrame+0x2b>
     f18:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <sg_sFrame+0x2c>
     f1c:	83 70       	andi	r24, 0x03	; 3
     f1e:	99 27       	eor	r25, r25
     f20:	89 2b       	or	r24, r25
     f22:	61 f0       	breq	.+24     	; 0xf3c <CellStringProcess+0x92>
     f24:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <sg_sFrame+0x2e>
     f28:	8f 3f       	cpi	r24, 0xFF	; 255
     f2a:	41 f0       	breq	.+16     	; 0xf3c <CellStringProcess+0x92>
     f2c:	e0 e1       	ldi	r30, 0x10	; 16
     f2e:	f1 e0       	ldi	r31, 0x01	; 1
     f30:	86 a5       	ldd	r24, Z+46	; 0x2e
     f32:	8f 5f       	subi	r24, 0xFF	; 255
     f34:	86 a7       	std	Z+46, r24	; 0x2e
     f36:	81 e0       	ldi	r24, 0x01	; 1
     f38:	80 93 1b 03 	sts	0x031B, r24	; 0x80031b <sg_bSendCellCommStatus>
     f3c:	e0 e1       	ldi	r30, 0x10	; 16
     f3e:	f1 e0       	ldi	r31, 0x01	; 1
     f40:	10 ae       	std	Z+56, r1	; 0x38
     f42:	17 aa       	std	Z+55, r1	; 0x37
     f44:	8f ef       	ldi	r24, 0xFF	; 255
     f46:	9f ef       	ldi	r25, 0xFF	; 255
     f48:	92 af       	std	Z+58, r25	; 0x3a
     f4a:	81 af       	std	Z+57, r24	; 0x39
     f4c:	14 ae       	std	Z+60, r1	; 0x3c
     f4e:	13 ae       	std	Z+59, r1	; 0x3b
     f50:	80 e0       	ldi	r24, 0x00	; 0
     f52:	90 e8       	ldi	r25, 0x80	; 128
     f54:	92 ab       	std	Z+50, r25	; 0x32
     f56:	81 ab       	std	Z+49, r24	; 0x31
     f58:	8f ef       	ldi	r24, 0xFF	; 255
     f5a:	9f e7       	ldi	r25, 0x7F	; 127
     f5c:	94 ab       	std	Z+52, r25	; 0x34
     f5e:	83 ab       	std	Z+51, r24	; 0x33
     f60:	16 aa       	std	Z+54, r1	; 0x36
     f62:	15 aa       	std	Z+53, r1	; 0x35
     f64:	d1 2c       	mov	r13, r1
     f66:	31 2c       	mov	r3, r1
     f68:	c1 2c       	mov	r12, r1
     f6a:	41 2c       	mov	r4, r1
     f6c:	51 2c       	mov	r5, r1
     f6e:	32 01       	movw	r6, r4
     f70:	81 2c       	mov	r8, r1
     f72:	91 2c       	mov	r9, r1
     f74:	54 01       	movw	r10, r8
     f76:	2f ef       	ldi	r18, 0xFF	; 255
     f78:	3f e7       	ldi	r19, 0x7F	; 127
     f7a:	3e 83       	std	Y+6, r19	; 0x06
     f7c:	2d 83       	std	Y+5, r18	; 0x05
     f7e:	80 e0       	ldi	r24, 0x00	; 0
     f80:	90 e8       	ldi	r25, 0x80	; 128
     f82:	9c 83       	std	Y+4, r25	; 0x04
     f84:	8b 83       	std	Y+3, r24	; 0x03
     f86:	6b c0       	rjmp	.+214    	; 0x105e <__DATA_REGION_LENGTH__+0x5e>
     f88:	0d 2d       	mov	r16, r13
     f8a:	10 e0       	ldi	r17, 0x00	; 0
     f8c:	f8 01       	movw	r30, r16
     f8e:	75 96       	adiw	r30, 0x15	; 21
     f90:	ee 0f       	add	r30, r30
     f92:	ff 1f       	adc	r31, r31
     f94:	ee 0f       	add	r30, r30
     f96:	ff 1f       	adc	r31, r31
     f98:	e0 5f       	subi	r30, 0xF0	; 240
     f9a:	fe 4f       	sbci	r31, 0xFE	; 254
     f9c:	80 81       	ld	r24, Z
     f9e:	91 81       	ldd	r25, Z+1	; 0x01
     fa0:	9a 83       	std	Y+2, r25	; 0x02
     fa2:	89 83       	std	Y+1, r24	; 0x01
     fa4:	e2 80       	ldd	r14, Z+2	; 0x02
     fa6:	f3 80       	ldd	r15, Z+3	; 0x03
     fa8:	60 e0       	ldi	r22, 0x00	; 0
     faa:	70 e0       	ldi	r23, 0x00	; 0
     fac:	c7 01       	movw	r24, r14
     fae:	0e 94 cc 1d 	call	0x3b98	; 0x3b98 <CellDataConvertTemperature>
     fb2:	88 23       	and	r24, r24
     fb4:	f1 f0       	breq	.+60     	; 0xff2 <CellStringProcess+0x148>
     fb6:	f4 fe       	sbrs	r15, 4
     fb8:	03 c0       	rjmp	.+6      	; 0xfc0 <CellStringProcess+0x116>
     fba:	c7 01       	movw	r24, r14
     fbc:	90 6f       	ori	r25, 0xF0	; 240
     fbe:	02 c0       	rjmp	.+4      	; 0xfc4 <CellStringProcess+0x11a>
     fc0:	c7 01       	movw	r24, r14
     fc2:	9f 77       	andi	r25, 0x7F	; 127
     fc4:	2b 81       	ldd	r18, Y+3	; 0x03
     fc6:	3c 81       	ldd	r19, Y+4	; 0x04
     fc8:	28 17       	cp	r18, r24
     fca:	39 07       	cpc	r19, r25
     fcc:	14 f4       	brge	.+4      	; 0xfd2 <CellStringProcess+0x128>
     fce:	9c 83       	std	Y+4, r25	; 0x04
     fd0:	8b 83       	std	Y+3, r24	; 0x03
     fd2:	2d 81       	ldd	r18, Y+5	; 0x05
     fd4:	3e 81       	ldd	r19, Y+6	; 0x06
     fd6:	82 17       	cp	r24, r18
     fd8:	93 07       	cpc	r25, r19
     fda:	14 f4       	brge	.+4      	; 0xfe0 <CellStringProcess+0x136>
     fdc:	9e 83       	std	Y+6, r25	; 0x06
     fde:	8d 83       	std	Y+5, r24	; 0x05
     fe0:	09 2e       	mov	r0, r25
     fe2:	00 0c       	add	r0, r0
     fe4:	aa 0b       	sbc	r26, r26
     fe6:	bb 0b       	sbc	r27, r27
     fe8:	88 0e       	add	r8, r24
     fea:	99 1e       	adc	r9, r25
     fec:	aa 1e       	adc	r10, r26
     fee:	bb 1e       	adc	r11, r27
     ff0:	33 94       	inc	r3
     ff2:	f8 01       	movw	r30, r16
     ff4:	75 96       	adiw	r30, 0x15	; 21
     ff6:	ee 0f       	add	r30, r30
     ff8:	ff 1f       	adc	r31, r31
     ffa:	ee 0f       	add	r30, r30
     ffc:	ff 1f       	adc	r31, r31
     ffe:	e0 5f       	subi	r30, 0xF0	; 240
    1000:	fe 4f       	sbci	r31, 0xFE	; 254
    1002:	80 81       	ld	r24, Z
    1004:	91 81       	ldd	r25, Z+1	; 0x01
    1006:	99 23       	and	r25, r25
    1008:	1c f4       	brge	.+6      	; 0x1010 <__DATA_REGION_LENGTH__+0x10>
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <sg_sFrame+0x27>
    1010:	be 01       	movw	r22, r28
    1012:	6f 5f       	subi	r22, 0xFF	; 255
    1014:	7f 4f       	sbci	r23, 0xFF	; 255
    1016:	89 81       	ldd	r24, Y+1	; 0x01
    1018:	9a 81       	ldd	r25, Y+2	; 0x02
    101a:	0e 94 4a 1f 	call	0x3e94	; 0x3e94 <CellDataConvertVoltage>
    101e:	88 23       	and	r24, r24
    1020:	e9 f0       	breq	.+58     	; 0x105c <__DATA_REGION_LENGTH__+0x5c>
    1022:	20 91 47 01 	lds	r18, 0x0147	; 0x800147 <sg_sFrame+0x37>
    1026:	30 91 48 01 	lds	r19, 0x0148	; 0x800148 <sg_sFrame+0x38>
    102a:	89 81       	ldd	r24, Y+1	; 0x01
    102c:	9a 81       	ldd	r25, Y+2	; 0x02
    102e:	28 17       	cp	r18, r24
    1030:	39 07       	cpc	r19, r25
    1032:	20 f4       	brcc	.+8      	; 0x103c <__DATA_REGION_LENGTH__+0x3c>
    1034:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <sg_sFrame+0x38>
    1038:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <sg_sFrame+0x37>
    103c:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <sg_sFrame+0x39>
    1040:	30 91 4a 01 	lds	r19, 0x014A	; 0x80014a <sg_sFrame+0x3a>
    1044:	82 17       	cp	r24, r18
    1046:	93 07       	cpc	r25, r19
    1048:	20 f4       	brcc	.+8      	; 0x1052 <__DATA_REGION_LENGTH__+0x52>
    104a:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <sg_sFrame+0x3a>
    104e:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <sg_sFrame+0x39>
    1052:	48 0e       	add	r4, r24
    1054:	59 1e       	adc	r5, r25
    1056:	61 1c       	adc	r6, r1
    1058:	71 1c       	adc	r7, r1
    105a:	c3 94       	inc	r12
    105c:	d3 94       	inc	r13
    105e:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <sg_sFrame+0x2d>
    1062:	d8 16       	cp	r13, r24
    1064:	08 f4       	brcc	.+2      	; 0x1068 <__DATA_REGION_LENGTH__+0x68>
    1066:	90 cf       	rjmp	.-224    	; 0xf88 <CellStringProcess+0xde>
    1068:	cc 20       	and	r12, r12
    106a:	89 f1       	breq	.+98     	; 0x10ce <__DATA_REGION_LENGTH__+0xce>
    106c:	ed e4       	ldi	r30, 0x4D	; 77
    106e:	f1 e0       	ldi	r31, 0x01	; 1
    1070:	40 82       	st	Z, r4
    1072:	51 82       	std	Z+1, r5	; 0x01
    1074:	62 82       	std	Z+2, r6	; 0x02
    1076:	73 82       	std	Z+3, r7	; 0x03
    1078:	60 81       	ld	r22, Z
    107a:	71 81       	ldd	r23, Z+1	; 0x01
    107c:	82 81       	ldd	r24, Z+2	; 0x02
    107e:	93 81       	ldd	r25, Z+3	; 0x03
    1080:	2c 2d       	mov	r18, r12
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	40 e0       	ldi	r20, 0x00	; 0
    1086:	50 e0       	ldi	r21, 0x00	; 0
    1088:	0e 94 c2 21 	call	0x4384	; 0x4384 <__udivmodsi4>
    108c:	30 93 4c 01 	sts	0x014C, r19	; 0x80014c <sg_sFrame+0x3c>
    1090:	20 93 4b 01 	sts	0x014B, r18	; 0x80014b <sg_sFrame+0x3b>
    1094:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    1098:	83 30       	cpi	r24, 0x03	; 3
    109a:	c9 f0       	breq	.+50     	; 0x10ce <__DATA_REGION_LENGTH__+0xce>
    109c:	80 91 19 03 	lds	r24, 0x0319	; 0x800319 <sg_bCellBalancedOnce>
    10a0:	81 11       	cpse	r24, r1
    10a2:	15 c0       	rjmp	.+42     	; 0x10ce <__DATA_REGION_LENGTH__+0xce>
    10a4:	e0 e1       	ldi	r30, 0x10	; 16
    10a6:	f1 e0       	ldi	r31, 0x01	; 1
    10a8:	27 a9       	ldd	r18, Z+55	; 0x37
    10aa:	30 ad       	ldd	r19, Z+56	; 0x38
    10ac:	81 ad       	ldd	r24, Z+57	; 0x39
    10ae:	92 ad       	ldd	r25, Z+58	; 0x3a
    10b0:	28 17       	cp	r18, r24
    10b2:	39 07       	cpc	r19, r25
    10b4:	60 f0       	brcs	.+24     	; 0x10ce <__DATA_REGION_LENGTH__+0xce>
    10b6:	87 a9       	ldd	r24, Z+55	; 0x37
    10b8:	90 ad       	ldd	r25, Z+56	; 0x38
    10ba:	21 ad       	ldd	r18, Z+57	; 0x39
    10bc:	32 ad       	ldd	r19, Z+58	; 0x3a
    10be:	82 1b       	sub	r24, r18
    10c0:	93 0b       	sbc	r25, r19
    10c2:	80 34       	cpi	r24, 0x40	; 64
    10c4:	91 05       	cpc	r25, r1
    10c6:	18 f0       	brcs	.+6      	; 0x10ce <__DATA_REGION_LENGTH__+0xce>
    10c8:	81 e0       	ldi	r24, 0x01	; 1
    10ca:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <sg_bCellBalanceReady>
    10ce:	33 20       	and	r3, r3
    10d0:	c9 f0       	breq	.+50     	; 0x1104 <__stack+0x5>
    10d2:	23 2d       	mov	r18, r3
    10d4:	30 e0       	ldi	r19, 0x00	; 0
    10d6:	40 e0       	ldi	r20, 0x00	; 0
    10d8:	50 e0       	ldi	r21, 0x00	; 0
    10da:	c5 01       	movw	r24, r10
    10dc:	b4 01       	movw	r22, r8
    10de:	0e 94 44 23 	call	0x4688	; 0x4688 <__divmodsi4>
    10e2:	65 e4       	ldi	r22, 0x45	; 69
    10e4:	71 e0       	ldi	r23, 0x01	; 1
    10e6:	c9 01       	movw	r24, r18
    10e8:	0e 94 cc 1d 	call	0x3b98	; 0x3b98 <CellDataConvertTemperature>
    10ec:	61 e4       	ldi	r22, 0x41	; 65
    10ee:	71 e0       	ldi	r23, 0x01	; 1
    10f0:	8b 81       	ldd	r24, Y+3	; 0x03
    10f2:	9c 81       	ldd	r25, Y+4	; 0x04
    10f4:	0e 94 cc 1d 	call	0x3b98	; 0x3b98 <CellDataConvertTemperature>
    10f8:	63 e4       	ldi	r22, 0x43	; 67
    10fa:	71 e0       	ldi	r23, 0x01	; 1
    10fc:	8d 81       	ldd	r24, Y+5	; 0x05
    10fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1100:	0e 94 cc 1d 	call	0x3b98	; 0x3b98 <CellDataConvertTemperature>
    1104:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <sg_bSDCardReady>
    1108:	88 23       	and	r24, r24
    110a:	51 f0       	breq	.+20     	; 0x1120 <__stack+0x21>
    110c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    1110:	88 23       	and	r24, r24
    1112:	31 f0       	breq	.+12     	; 0x1120 <__stack+0x21>
    1114:	80 e1       	ldi	r24, 0x10	; 16
    1116:	91 e0       	ldi	r25, 0x01	; 1
    1118:	0e 94 23 14 	call	0x2846	; 0x2846 <STORE_WriteFrame>
    111c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <sg_bSDCardReady>
    1120:	0e 94 b0 26 	call	0x4d60	; 0x4d60 <SendModuleControllerStatus>
    1124:	26 96       	adiw	r28, 0x06	; 6
    1126:	0f b6       	in	r0, 0x3f	; 63
    1128:	f8 94       	cli
    112a:	de bf       	out	0x3e, r29	; 62
    112c:	0f be       	out	0x3f, r0	; 63
    112e:	cd bf       	out	0x3d, r28	; 61
    1130:	df 91       	pop	r29
    1132:	cf 91       	pop	r28
    1134:	1f 91       	pop	r17
    1136:	0f 91       	pop	r16
    1138:	ff 90       	pop	r15
    113a:	ef 90       	pop	r14
    113c:	df 90       	pop	r13
    113e:	cf 90       	pop	r12
    1140:	bf 90       	pop	r11
    1142:	af 90       	pop	r10
    1144:	9f 90       	pop	r9
    1146:	8f 90       	pop	r8
    1148:	7f 90       	pop	r7
    114a:	6f 90       	pop	r6
    114c:	5f 90       	pop	r5
    114e:	4f 90       	pop	r4
    1150:	3f 90       	pop	r3
    1152:	08 95       	ret

Disassembly of section .text.Delay:

000041b2 <Delay>:
    41b2:	ab 01       	movw	r20, r22
    41b4:	bc 01       	movw	r22, r24
    41b6:	4f 5f       	subi	r20, 0xFF	; 255
    41b8:	5f 4f       	sbci	r21, 0xFF	; 255
    41ba:	6f 4f       	sbci	r22, 0xFF	; 255
    41bc:	7f 4f       	sbci	r23, 0xFF	; 255
    41be:	76 95       	lsr	r23
    41c0:	67 95       	ror	r22
    41c2:	57 95       	ror	r21
    41c4:	47 95       	ror	r20
    41c6:	96 b5       	in	r25, 0x26	; 38
    41c8:	17 c0       	rjmp	.+46     	; 0x41f8 <Delay+0x46>
    41ca:	86 b5       	in	r24, 0x26	; 38
    41cc:	98 17       	cp	r25, r24
    41ce:	e9 f3       	breq	.-6      	; 0x41ca <Delay+0x18>
    41d0:	26 b5       	in	r18, 0x26	; 38
    41d2:	82 2f       	mov	r24, r18
    41d4:	89 1b       	sub	r24, r25
    41d6:	90 e0       	ldi	r25, 0x00	; 0
    41d8:	a0 e0       	ldi	r26, 0x00	; 0
    41da:	b0 e0       	ldi	r27, 0x00	; 0
    41dc:	48 17       	cp	r20, r24
    41de:	59 07       	cpc	r21, r25
    41e0:	6a 07       	cpc	r22, r26
    41e2:	7b 07       	cpc	r23, r27
    41e4:	28 f0       	brcs	.+10     	; 0x41f0 <Delay+0x3e>
    41e6:	48 1b       	sub	r20, r24
    41e8:	59 0b       	sbc	r21, r25
    41ea:	6a 0b       	sbc	r22, r26
    41ec:	7b 0b       	sbc	r23, r27
    41ee:	03 c0       	rjmp	.+6      	; 0x41f6 <Delay+0x44>
    41f0:	40 e0       	ldi	r20, 0x00	; 0
    41f2:	50 e0       	ldi	r21, 0x00	; 0
    41f4:	ba 01       	movw	r22, r20
    41f6:	92 2f       	mov	r25, r18
    41f8:	41 15       	cp	r20, r1
    41fa:	51 05       	cpc	r21, r1
    41fc:	61 05       	cpc	r22, r1
    41fe:	71 05       	cpc	r23, r1
    4200:	21 f7       	brne	.-56     	; 0x41ca <Delay+0x18>
    4202:	08 95       	ret

Disassembly of section .text.PlatformAssert:

0000470e <PlatformAssert>:



void PlatformAssert( const char* peFilename, const int s32LineNumber )
{
	DebugOut("Assert %s: %d\n", peFilename, s32LineNumber);
    470e:	5f 93       	push	r21
    4710:	4f 93       	push	r20
    4712:	8f 93       	push	r24
    4714:	7f 93       	push	r23
    4716:	6f 93       	push	r22
    4718:	88 e3       	ldi	r24, 0x38	; 56
    471a:	92 e0       	ldi	r25, 0x02	; 2
    471c:	a0 e0       	ldi	r26, 0x00	; 0
    471e:	af 93       	push	r26
    4720:	9f 93       	push	r25
    4722:	8f 93       	push	r24
    4724:	0e 94 d0 26 	call	0x4da0	; 0x4da0 <DebugOut>
	
//	while(1);
}
    4728:	8d b7       	in	r24, 0x3d	; 61
    472a:	9e b7       	in	r25, 0x3e	; 62
    472c:	08 96       	adiw	r24, 0x08	; 8
    472e:	0f b6       	in	r0, 0x3f	; 63
    4730:	f8 94       	cli
    4732:	9e bf       	out	0x3e, r25	; 62
    4734:	0f be       	out	0x3f, r0	; 63
    4736:	8d bf       	out	0x3d, r24	; 61
    4738:	08 95       	ret

Disassembly of section .text.ModuleControllerStateHandle:

0000185e <ModuleControllerStateHandle>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    185e:	1f 93       	push	r17
    1860:	cf 93       	push	r28
    1862:	df 93       	push	r29
    1864:	d0 91 06 01 	lds	r29, 0x0106	; 0x800106 <sg_eModuleControllerStateTarget>
    1868:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <sg_eModuleControllerStateMax>
    186c:	8d 17       	cp	r24, r29
    186e:	30 f0       	brcs	.+12     	; 0x187c <ModuleControllerStateHandle+0x1e>
    1870:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    1874:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <sg_eModuleControllerStateMax>
    1878:	89 17       	cp	r24, r25
    187a:	10 f4       	brcc	.+4      	; 0x1880 <ModuleControllerStateHandle+0x22>
    187c:	d0 91 05 01 	lds	r29, 0x0105	; 0x800105 <sg_eModuleControllerStateMax>
    1880:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    1884:	d8 17       	cp	r29, r24
    1886:	09 f4       	brne	.+2      	; 0x188a <ModuleControllerStateHandle+0x2c>
    1888:	f5 c0       	rjmp	.+490    	; 0x1a74 <ModuleControllerStateHandle+0x216>
    188a:	d2 30       	cpi	r29, 0x02	; 2
    188c:	09 f4       	brne	.+2      	; 0x1890 <ModuleControllerStateHandle+0x32>
    188e:	72 c0       	rjmp	.+228    	; 0x1974 <ModuleControllerStateHandle+0x116>
    1890:	28 f4       	brcc	.+10     	; 0x189c <ModuleControllerStateHandle+0x3e>
    1892:	dd 23       	and	r29, r29
    1894:	89 f0       	breq	.+34     	; 0x18b8 <ModuleControllerStateHandle+0x5a>
    1896:	d1 30       	cpi	r29, 0x01	; 1
    1898:	e1 f1       	breq	.+120    	; 0x1912 <ModuleControllerStateHandle+0xb4>
    189a:	e0 c0       	rjmp	.+448    	; 0x1a5c <ModuleControllerStateHandle+0x1fe>
    189c:	d3 30       	cpi	r29, 0x03	; 3
    189e:	09 f4       	brne	.+2      	; 0x18a2 <ModuleControllerStateHandle+0x44>
    18a0:	a9 c0       	rjmp	.+338    	; 0x19f4 <ModuleControllerStateHandle+0x196>
    18a2:	d5 30       	cpi	r29, 0x05	; 5
    18a4:	09 f0       	breq	.+2      	; 0x18a8 <ModuleControllerStateHandle+0x4a>
    18a6:	da c0       	rjmp	.+436    	; 0x1a5c <ModuleControllerStateHandle+0x1fe>
    18a8:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <sg_eModuleControllerStateCurrent>
    18ac:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <sg_eModuleControllerStateTarget>
    18b0:	d0 91 07 01 	lds	r29, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    18b4:	0e 94 ec 26 	call	0x4dd8	; 0x4dd8 <ADCSetPowerOn>
    18b8:	88 b1       	in	r24, 0x08	; 8
    18ba:	8f 7e       	andi	r24, 0xEF	; 239
    18bc:	88 b9       	out	0x08, r24	; 8
    18be:	68 e8       	ldi	r22, 0x88	; 136
    18c0:	73 e1       	ldi	r23, 0x13	; 19
    18c2:	80 e0       	ldi	r24, 0x00	; 0
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <Delay>
    18ca:	8e b1       	in	r24, 0x0e	; 14
    18cc:	8d 7f       	andi	r24, 0xFD	; 253
    18ce:	8e b9       	out	0x0e, r24	; 14
    18d0:	68 e8       	ldi	r22, 0x88	; 136
    18d2:	73 e1       	ldi	r23, 0x13	; 19
    18d4:	80 e0       	ldi	r24, 0x00	; 0
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <Delay>
    18dc:	eb e6       	ldi	r30, 0x6B	; 107
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	80 81       	ld	r24, Z
    18e2:	8d 7f       	andi	r24, 0xFD	; 253
    18e4:	80 83       	st	Z, r24
    18e6:	e8 e6       	ldi	r30, 0x68	; 104
    18e8:	f0 e0       	ldi	r31, 0x00	; 0
    18ea:	80 81       	ld	r24, Z
    18ec:	8d 7f       	andi	r24, 0xFD	; 253
    18ee:	80 83       	st	Z, r24
    18f0:	81 e0       	ldi	r24, 0x01	; 1
    18f2:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <sg_bCellBalanceReady>
    18f6:	10 92 19 03 	sts	0x0319, r1	; 0x800319 <sg_bCellBalancedOnce>
    18fa:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <sg_bStopDischarge>
    18fe:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <sg_bSDCardReady>
    1902:	88 23       	and	r24, r24
    1904:	09 f4       	brne	.+2      	; 0x1908 <ModuleControllerStateHandle+0xaa>
    1906:	b2 c0       	rjmp	.+356    	; 0x1a6c <ModuleControllerStateHandle+0x20e>
    1908:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <STORE_EndSession>
    190c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <sg_bSDCardReady>
    1910:	ad c0       	rjmp	.+346    	; 0x1a6c <ModuleControllerStateHandle+0x20e>
    1912:	88 b1       	in	r24, 0x08	; 8
    1914:	8f 7e       	andi	r24, 0xEF	; 239
    1916:	88 b9       	out	0x08, r24	; 8
    1918:	68 e8       	ldi	r22, 0x88	; 136
    191a:	73 e1       	ldi	r23, 0x13	; 19
    191c:	80 e0       	ldi	r24, 0x00	; 0
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <Delay>
    1924:	eb e6       	ldi	r30, 0x6B	; 107
    1926:	f0 e0       	ldi	r31, 0x00	; 0
    1928:	80 81       	ld	r24, Z
    192a:	8d 7f       	andi	r24, 0xFD	; 253
    192c:	80 83       	st	Z, r24
    192e:	e8 e6       	ldi	r30, 0x68	; 104
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	80 81       	ld	r24, Z
    1934:	8d 7f       	andi	r24, 0xFD	; 253
    1936:	80 83       	st	Z, r24
    1938:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <sg_bModuleRegistered>
    193c:	88 23       	and	r24, r24
    193e:	19 f0       	breq	.+6      	; 0x1946 <ModuleControllerStateHandle+0xe8>
    1940:	8e b1       	in	r24, 0x0e	; 14
    1942:	82 60       	ori	r24, 0x02	; 2
    1944:	8e b9       	out	0x0e, r24	; 14
    1946:	68 e8       	ldi	r22, 0x88	; 136
    1948:	73 e1       	ldi	r23, 0x13	; 19
    194a:	80 e0       	ldi	r24, 0x00	; 0
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <Delay>
    1952:	81 e0       	ldi	r24, 0x01	; 1
    1954:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <sg_bCellBalanceReady>
    1958:	10 92 19 03 	sts	0x0319, r1	; 0x800319 <sg_bCellBalancedOnce>
    195c:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <sg_bStopDischarge>
    1960:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <sg_bSDCardReady>
    1964:	88 23       	and	r24, r24
    1966:	09 f4       	brne	.+2      	; 0x196a <ModuleControllerStateHandle+0x10c>
    1968:	81 c0       	rjmp	.+258    	; 0x1a6c <ModuleControllerStateHandle+0x20e>
    196a:	0e 94 af 20 	call	0x415e	; 0x415e <STORE_StartNewSession>
    196e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <sg_bSDCardReady>
    1972:	7c c0       	rjmp	.+248    	; 0x1a6c <ModuleControllerStateHandle+0x20e>
    1974:	61 99       	sbic	0x0c, 1	; 12
    1976:	0d c0       	rjmp	.+26     	; 0x1992 <ModuleControllerStateHandle+0x134>
    1978:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <sg_bModuleRegistered>
    197c:	88 23       	and	r24, r24
    197e:	19 f0       	breq	.+6      	; 0x1986 <ModuleControllerStateHandle+0x128>
    1980:	8e b1       	in	r24, 0x0e	; 14
    1982:	82 60       	ori	r24, 0x02	; 2
    1984:	8e b9       	out	0x0e, r24	; 14
    1986:	68 e8       	ldi	r22, 0x88	; 136
    1988:	73 e1       	ldi	r23, 0x13	; 19
    198a:	80 e0       	ldi	r24, 0x00	; 0
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <Delay>
    1992:	cb e0       	ldi	r28, 0x0B	; 11
    1994:	2a c0       	rjmp	.+84     	; 0x19ea <ModuleControllerStateHandle+0x18c>
    1996:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <sg_bModuleRegistered>
    199a:	88 23       	and	r24, r24
    199c:	49 f0       	breq	.+18     	; 0x19b0 <ModuleControllerStateHandle+0x152>
    199e:	88 b1       	in	r24, 0x08	; 8
    19a0:	80 61       	ori	r24, 0x10	; 16
    19a2:	88 b9       	out	0x08, r24	; 8
    19a4:	88 b1       	in	r24, 0x08	; 8
    19a6:	8f 77       	andi	r24, 0x7F	; 127
    19a8:	88 b9       	out	0x08, r24	; 8
    19aa:	88 b1       	in	r24, 0x08	; 8
    19ac:	80 68       	ori	r24, 0x80	; 128
    19ae:	88 b9       	out	0x08, r24	; 8
    19b0:	68 ee       	ldi	r22, 0xE8	; 232
    19b2:	73 e0       	ldi	r23, 0x03	; 3
    19b4:	80 e0       	ldi	r24, 0x00	; 0
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <Delay>
    19bc:	88 b1       	in	r24, 0x08	; 8
    19be:	8f 7e       	andi	r24, 0xEF	; 239
    19c0:	88 b9       	out	0x08, r24	; 8
    19c2:	68 e8       	ldi	r22, 0x88	; 136
    19c4:	73 e1       	ldi	r23, 0x13	; 19
    19c6:	80 e0       	ldi	r24, 0x00	; 0
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <Delay>
    19ce:	60 e5       	ldi	r22, 0x50	; 80
    19d0:	73 ec       	ldi	r23, 0xC3	; 195
    19d2:	80 e0       	ldi	r24, 0x00	; 0
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <Delay>
    19da:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <sg_bOvercurrentSignal>
    19de:	88 23       	and	r24, r24
    19e0:	19 f0       	breq	.+6      	; 0x19e8 <ModuleControllerStateHandle+0x18a>
    19e2:	10 92 17 03 	sts	0x0317, r1	; 0x800317 <sg_bOvercurrentSignal>
    19e6:	01 c0       	rjmp	.+2      	; 0x19ea <ModuleControllerStateHandle+0x18c>
    19e8:	c1 2f       	mov	r28, r17
    19ea:	1f ef       	ldi	r17, 0xFF	; 255
    19ec:	1c 0f       	add	r17, r28
    19ee:	c1 11       	cpse	r28, r1
    19f0:	d2 cf       	rjmp	.-92     	; 0x1996 <ModuleControllerStateHandle+0x138>
    19f2:	3c c0       	rjmp	.+120    	; 0x1a6c <ModuleControllerStateHandle+0x20e>
    19f4:	61 99       	sbic	0x0c, 1	; 12
    19f6:	0d c0       	rjmp	.+26     	; 0x1a12 <ModuleControllerStateHandle+0x1b4>
    19f8:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <sg_bModuleRegistered>
    19fc:	88 23       	and	r24, r24
    19fe:	19 f0       	breq	.+6      	; 0x1a06 <ModuleControllerStateHandle+0x1a8>
    1a00:	8e b1       	in	r24, 0x0e	; 14
    1a02:	82 60       	ori	r24, 0x02	; 2
    1a04:	8e b9       	out	0x0e, r24	; 14
    1a06:	68 e8       	ldi	r22, 0x88	; 136
    1a08:	73 e1       	ldi	r23, 0x13	; 19
    1a0a:	80 e0       	ldi	r24, 0x00	; 0
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <Delay>
    1a12:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <sg_bModuleRegistered>
    1a16:	88 23       	and	r24, r24
    1a18:	49 f0       	breq	.+18     	; 0x1a2c <ModuleControllerStateHandle+0x1ce>
    1a1a:	88 b1       	in	r24, 0x08	; 8
    1a1c:	80 61       	ori	r24, 0x10	; 16
    1a1e:	88 b9       	out	0x08, r24	; 8
    1a20:	88 b1       	in	r24, 0x08	; 8
    1a22:	8f 77       	andi	r24, 0x7F	; 127
    1a24:	88 b9       	out	0x08, r24	; 8
    1a26:	88 b1       	in	r24, 0x08	; 8
    1a28:	80 68       	ori	r24, 0x80	; 128
    1a2a:	88 b9       	out	0x08, r24	; 8
    1a2c:	68 e8       	ldi	r22, 0x88	; 136
    1a2e:	73 e1       	ldi	r23, 0x13	; 19
    1a30:	80 e0       	ldi	r24, 0x00	; 0
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <Delay>
    1a38:	10 92 1a 03 	sts	0x031A, r1	; 0x80031a <sg_bCellBalanceReady>
    1a3c:	10 92 19 03 	sts	0x0319, r1	; 0x800319 <sg_bCellBalancedOnce>
    1a40:	81 e0       	ldi	r24, 0x01	; 1
    1a42:	80 93 18 03 	sts	0x0318, r24	; 0x800318 <sg_bStopDischarge>
    1a46:	eb e6       	ldi	r30, 0x6B	; 107
    1a48:	f0 e0       	ldi	r31, 0x00	; 0
    1a4a:	80 81       	ld	r24, Z
    1a4c:	82 60       	ori	r24, 0x02	; 2
    1a4e:	80 83       	st	Z, r24
    1a50:	e8 e6       	ldi	r30, 0x68	; 104
    1a52:	f0 e0       	ldi	r31, 0x00	; 0
    1a54:	80 81       	ld	r24, Z
    1a56:	82 60       	ori	r24, 0x02	; 2
    1a58:	80 83       	st	Z, r24
    1a5a:	08 c0       	rjmp	.+16     	; 0x1a6c <ModuleControllerStateHandle+0x20e>
    1a5c:	45 ef       	ldi	r20, 0xF5	; 245
    1a5e:	53 e0       	ldi	r21, 0x03	; 3
    1a60:	67 e4       	ldi	r22, 0x47	; 71
    1a62:	72 e0       	ldi	r23, 0x02	; 2
    1a64:	80 e0       	ldi	r24, 0x00	; 0
    1a66:	0e 94 87 23 	call	0x470e	; 0x470e <PlatformAssert>
    1a6a:	d5 e0       	ldi	r29, 0x05	; 5
    1a6c:	d0 93 07 01 	sts	0x0107, r29	; 0x800107 <sg_eModuleControllerStateCurrent>
    1a70:	0e 94 b0 26 	call	0x4d60	; 0x4d60 <SendModuleControllerStatus>
    1a74:	df 91       	pop	r29
    1a76:	cf 91       	pop	r28
    1a78:	1f 91       	pop	r17
    1a7a:	08 95       	ret

Disassembly of section .text.PlatformGetRegistrationID:

00004e18 <PlatformGetRegistrationID>:
}

uint8_t PlatformGetRegistrationID( void )
{
	return(sg_u8ModuleRegistrationID);
}
    4e18:	80 91 27 03 	lds	r24, 0x0327	; 0x800327 <sg_u8ModuleRegistrationID>
    4e1c:	08 95       	ret

Disassembly of section .text.SetSysclock:

00004de4 <SetSysclock>:

void SetSysclock( void )
{
	// First set the prescaler enable
	CLKPR = (1 << CLKPCE);
    4de4:	e1 e6       	ldi	r30, 0x61	; 97
    4de6:	f0 e0       	ldi	r31, 0x00	; 0
    4de8:	80 e8       	ldi	r24, 0x80	; 128
    4dea:	80 83       	st	Z, r24
	
	// Now set the desired prescale value
	CLKPR = SYSCLOCK_PRESCALE;
    4dec:	10 82       	st	Z, r1
    4dee:	08 95       	ret

Disassembly of section .text.ModuleControllerGetUniqueID:

0000392a <ModuleControllerGetUniqueID>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    392a:	cf 92       	push	r12
    392c:	df 92       	push	r13
    392e:	ef 92       	push	r14
    3930:	ff 92       	push	r15
    3932:	80 e0       	ldi	r24, 0x00	; 0
    3934:	90 e0       	ldi	r25, 0x00	; 0
    3936:	0e 94 83 26 	call	0x4d06	; 0x4d06 <EEPROMRead>
    393a:	c8 2e       	mov	r12, r24
    393c:	d1 2c       	mov	r13, r1
    393e:	e1 2c       	mov	r14, r1
    3940:	f1 2c       	mov	r15, r1
    3942:	81 e0       	ldi	r24, 0x01	; 1
    3944:	90 e0       	ldi	r25, 0x00	; 0
    3946:	0e 94 83 26 	call	0x4d06	; 0x4d06 <EEPROMRead>
    394a:	90 e0       	ldi	r25, 0x00	; 0
    394c:	a0 e0       	ldi	r26, 0x00	; 0
    394e:	b0 e0       	ldi	r27, 0x00	; 0
    3950:	ba 2f       	mov	r27, r26
    3952:	a9 2f       	mov	r26, r25
    3954:	98 2f       	mov	r25, r24
    3956:	88 27       	eor	r24, r24
    3958:	c8 2a       	or	r12, r24
    395a:	d9 2a       	or	r13, r25
    395c:	ea 2a       	or	r14, r26
    395e:	fb 2a       	or	r15, r27
    3960:	82 e0       	ldi	r24, 0x02	; 2
    3962:	90 e0       	ldi	r25, 0x00	; 0
    3964:	0e 94 83 26 	call	0x4d06	; 0x4d06 <EEPROMRead>
    3968:	90 e0       	ldi	r25, 0x00	; 0
    396a:	a0 e0       	ldi	r26, 0x00	; 0
    396c:	b0 e0       	ldi	r27, 0x00	; 0
    396e:	dc 01       	movw	r26, r24
    3970:	99 27       	eor	r25, r25
    3972:	88 27       	eor	r24, r24
    3974:	c8 2a       	or	r12, r24
    3976:	d9 2a       	or	r13, r25
    3978:	ea 2a       	or	r14, r26
    397a:	fb 2a       	or	r15, r27
    397c:	83 e0       	ldi	r24, 0x03	; 3
    397e:	90 e0       	ldi	r25, 0x00	; 0
    3980:	0e 94 83 26 	call	0x4d06	; 0x4d06 <EEPROMRead>
    3984:	90 e0       	ldi	r25, 0x00	; 0
    3986:	a0 e0       	ldi	r26, 0x00	; 0
    3988:	b0 e0       	ldi	r27, 0x00	; 0
    398a:	b8 2f       	mov	r27, r24
    398c:	aa 27       	eor	r26, r26
    398e:	99 27       	eor	r25, r25
    3990:	88 27       	eor	r24, r24
    3992:	bc 01       	movw	r22, r24
    3994:	cd 01       	movw	r24, r26
    3996:	6c 29       	or	r22, r12
    3998:	7d 29       	or	r23, r13
    399a:	8e 29       	or	r24, r14
    399c:	9f 29       	or	r25, r15
    399e:	ff 90       	pop	r15
    39a0:	ef 90       	pop	r14
    39a2:	df 90       	pop	r13
    39a4:	cf 90       	pop	r12
    39a6:	08 95       	ret

Disassembly of section .text.TimerInit:

00004204 <TimerInit>:
    4204:	14 bc       	out	0x24, r1	; 36
    4206:	92 e0       	ldi	r25, 0x02	; 2
    4208:	95 bd       	out	0x25, r25	; 37
    420a:	a4 e6       	ldi	r26, 0x64	; 100
    420c:	b0 e0       	ldi	r27, 0x00	; 0
    420e:	8c 91       	ld	r24, X
    4210:	87 7f       	andi	r24, 0xF7	; 247
    4212:	8c 93       	st	X, r24
    4214:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f0080>
    4218:	84 e0       	ldi	r24, 0x04	; 4
    421a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f0081>
    421e:	96 bb       	out	0x16, r25	; 22
    4220:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f0084>
    4224:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f0085>
    4228:	8b 5c       	subi	r24, 0xCB	; 203
    422a:	93 4f       	sbci	r25, 0xF3	; 243
    422c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f0089>
    4230:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f0088>
    4234:	ef e6       	ldi	r30, 0x6F	; 111
    4236:	f0 e0       	ldi	r31, 0x00	; 0
    4238:	80 81       	ld	r24, Z
    423a:	82 60       	ori	r24, 0x02	; 2
    423c:	80 83       	st	Z, r24
    423e:	8c 91       	ld	r24, X
    4240:	8f 7e       	andi	r24, 0xEF	; 239
    4242:	8c 93       	st	X, r24
    4244:	ae e6       	ldi	r26, 0x6E	; 110
    4246:	b0 e0       	ldi	r27, 0x00	; 0
    4248:	8c 91       	ld	r24, X
    424a:	8e 7f       	andi	r24, 0xFE	; 254
    424c:	8c 93       	st	X, r24
    424e:	80 81       	ld	r24, Z
    4250:	8e 7f       	andi	r24, 0xFE	; 254
    4252:	80 83       	st	Z, r24
    4254:	08 95       	ret

Disassembly of section .text.__vector_12:

0000322a <__vector_12>:
    322a:	78 94       	sei
    322c:	1f 92       	push	r1
    322e:	0f 92       	push	r0
    3230:	0f b6       	in	r0, 0x3f	; 63
    3232:	0f 92       	push	r0
    3234:	11 24       	eor	r1, r1
    3236:	8f 93       	push	r24
    3238:	9f 93       	push	r25
    323a:	ef 93       	push	r30
    323c:	ff 93       	push	r31
    323e:	82 e0       	ldi	r24, 0x02	; 2
    3240:	86 bb       	out	0x16, r24	; 22
    3242:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f0084>
    3246:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f0085>
    324a:	8b 5c       	subi	r24, 0xCB	; 203
    324c:	93 4f       	sbci	r25, 0xF3	; 243
    324e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f0089>
    3252:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f0088>
    3256:	ef e6       	ldi	r30, 0x6F	; 111
    3258:	f0 e0       	ldi	r31, 0x00	; 0
    325a:	80 81       	ld	r24, Z
    325c:	82 60       	ori	r24, 0x02	; 2
    325e:	80 83       	st	Z, r24
    3260:	81 e0       	ldi	r24, 0x01	; 1
    3262:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <sg_bNewTick>
    3266:	80 91 73 09 	lds	r24, 0x0973	; 0x800973 <sg_u8CellFrameTimer>
    326a:	8f 5f       	subi	r24, 0xFF	; 255
    326c:	80 93 73 09 	sts	0x0973, r24	; 0x800973 <sg_u8CellFrameTimer>
    3270:	80 91 73 09 	lds	r24, 0x0973	; 0x800973 <sg_u8CellFrameTimer>
    3274:	83 30       	cpi	r24, 0x03	; 3
    3276:	78 f0       	brcs	.+30     	; 0x3296 <__vector_12+0x6c>
    3278:	10 92 73 09 	sts	0x0973, r1	; 0x800973 <sg_u8CellFrameTimer>
    327c:	81 e0       	ldi	r24, 0x01	; 1
    327e:	80 93 72 09 	sts	0x0972, r24	; 0x800972 <sg_bFrameStart>
    3282:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <sg_eFrameStatus>
    3286:	81 30       	cpi	r24, 0x01	; 1
    3288:	19 f4       	brne	.+6      	; 0x3290 <__vector_12+0x66>
    328a:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <sg_eFrameStatus>
    328e:	03 c0       	rjmp	.+6      	; 0x3296 <__vector_12+0x6c>
    3290:	81 e0       	ldi	r24, 0x01	; 1
    3292:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <sg_eFrameStatus>
    3296:	80 91 70 09 	lds	r24, 0x0970	; 0x800970 <sg_u8TicksSinceLastPackControllerMessage>
    329a:	8f 3f       	cpi	r24, 0xFF	; 255
    329c:	29 f0       	breq	.+10     	; 0x32a8 <__vector_12+0x7e>
    329e:	80 91 70 09 	lds	r24, 0x0970	; 0x800970 <sg_u8TicksSinceLastPackControllerMessage>
    32a2:	8f 5f       	subi	r24, 0xFF	; 255
    32a4:	80 93 70 09 	sts	0x0970, r24	; 0x800970 <sg_u8TicksSinceLastPackControllerMessage>
    32a8:	80 91 70 09 	lds	r24, 0x0970	; 0x800970 <sg_u8TicksSinceLastPackControllerMessage>
    32ac:	8f 36       	cpi	r24, 0x6F	; 111
    32ae:	40 f0       	brcs	.+16     	; 0x32c0 <__vector_12+0x96>
    32b0:	80 91 70 09 	lds	r24, 0x0970	; 0x800970 <sg_u8TicksSinceLastPackControllerMessage>
    32b4:	8f 56       	subi	r24, 0x6F	; 111
    32b6:	80 93 70 09 	sts	0x0970, r24	; 0x800970 <sg_u8TicksSinceLastPackControllerMessage>
    32ba:	81 e0       	ldi	r24, 0x01	; 1
    32bc:	80 93 1f 03 	sts	0x031F, r24	; 0x80031f <sg_bPackControllerTimeout>
    32c0:	80 91 71 09 	lds	r24, 0x0971	; 0x800971 <sg_u8CellStringPowerTimer>
    32c4:	88 23       	and	r24, r24
    32c6:	29 f0       	breq	.+10     	; 0x32d2 <__vector_12+0xa8>
    32c8:	80 91 71 09 	lds	r24, 0x0971	; 0x800971 <sg_u8CellStringPowerTimer>
    32cc:	81 50       	subi	r24, 0x01	; 1
    32ce:	80 93 71 09 	sts	0x0971, r24	; 0x800971 <sg_u8CellStringPowerTimer>
    32d2:	ff 91       	pop	r31
    32d4:	ef 91       	pop	r30
    32d6:	9f 91       	pop	r25
    32d8:	8f 91       	pop	r24
    32da:	0f 90       	pop	r0
    32dc:	0f be       	out	0x3f, r0	; 63
    32de:	0f 90       	pop	r0
    32e0:	1f 90       	pop	r1
    32e2:	18 95       	reti

Disassembly of section .text.WatchdogReset:

00004e26 <WatchdogReset>:
		sg_u8CellStringPowerTimer--;
	}
}

void WatchdogReset( void )
{
    4e26:	08 95       	ret

Disassembly of section .text.WatchdogOff:

00004c0e <WatchdogOff>:
// }

// Assume interrupts are disabled
void WatchdogOff( void )  // turn it off even when WDT_ENABLE is not defined
{
	wdt_reset();
    4c0e:	a8 95       	wdr
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    4c10:	0f b6       	in	r0, 0x3f	; 63
    4c12:	f8 94       	cli
    4c14:	a8 95       	wdr
    4c16:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f0060>
    4c1a:	88 61       	ori	r24, 0x18	; 24
    4c1c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f0060>
    4c20:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f0060>
    4c24:	0f be       	out	0x3f, r0	; 63
    4c26:	08 95       	ret

Disassembly of section .text.__vector_28:

00004256 <__vector_28>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    4256:	1f 92       	push	r1
    4258:	0f 92       	push	r0
    425a:	0f b6       	in	r0, 0x3f	; 63
    425c:	0f 92       	push	r0
    425e:	11 24       	eor	r1, r1
    4260:	2f 93       	push	r18
    4262:	3f 93       	push	r19
    4264:	4f 93       	push	r20
    4266:	5f 93       	push	r21
    4268:	6f 93       	push	r22
    426a:	7f 93       	push	r23
    426c:	8f 93       	push	r24
    426e:	9f 93       	push	r25
    4270:	af 93       	push	r26
    4272:	bf 93       	push	r27
    4274:	ef 93       	push	r30
    4276:	ff 93       	push	r31
    4278:	41 e0       	ldi	r20, 0x01	; 1
    427a:	53 e0       	ldi	r21, 0x03	; 3
    427c:	67 e4       	ldi	r22, 0x47	; 71
    427e:	72 e0       	ldi	r23, 0x02	; 2
    4280:	80 e0       	ldi	r24, 0x00	; 0
    4282:	0e 94 87 23 	call	0x470e	; 0x470e <PlatformAssert>
    4286:	ff 91       	pop	r31
    4288:	ef 91       	pop	r30
    428a:	bf 91       	pop	r27
    428c:	af 91       	pop	r26
    428e:	9f 91       	pop	r25
    4290:	8f 91       	pop	r24
    4292:	7f 91       	pop	r23
    4294:	6f 91       	pop	r22
    4296:	5f 91       	pop	r21
    4298:	4f 91       	pop	r20
    429a:	3f 91       	pop	r19
    429c:	2f 91       	pop	r18
    429e:	0f 90       	pop	r0
    42a0:	0f be       	out	0x3f, r0	; 63
    42a2:	0f 90       	pop	r0
    42a4:	1f 90       	pop	r1
    42a6:	18 95       	reti

Disassembly of section .text.__vector_23:

00003600 <__vector_23>:
    3600:	78 94       	sei
    3602:	1f 92       	push	r1
    3604:	0f 92       	push	r0
    3606:	0f b6       	in	r0, 0x3f	; 63
    3608:	0f 92       	push	r0
    360a:	11 24       	eor	r1, r1
    360c:	2f 93       	push	r18
    360e:	3f 93       	push	r19
    3610:	4f 93       	push	r20
    3612:	5f 93       	push	r21
    3614:	6f 93       	push	r22
    3616:	7f 93       	push	r23
    3618:	8f 93       	push	r24
    361a:	9f 93       	push	r25
    361c:	af 93       	push	r26
    361e:	bf 93       	push	r27
    3620:	ef 93       	push	r30
    3622:	ff 93       	push	r31
    3624:	96 b1       	in	r25, 0x06	; 6
    3626:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    362a:	83 30       	cpi	r24, 0x03	; 3
    362c:	21 f0       	breq	.+8      	; 0x3636 <__vector_23+0x36>
    362e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    3632:	82 30       	cpi	r24, 0x02	; 2
    3634:	c9 f4       	brne	.+50     	; 0x3668 <__vector_23+0x68>
    3636:	91 ff       	sbrs	r25, 1
    3638:	17 c0       	rjmp	.+46     	; 0x3668 <__vector_23+0x68>
    363a:	88 b1       	in	r24, 0x08	; 8
    363c:	8f 7e       	andi	r24, 0xEF	; 239
    363e:	88 b9       	out	0x08, r24	; 8
    3640:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    3644:	83 30       	cpi	r24, 0x03	; 3
    3646:	19 f4       	brne	.+6      	; 0x364e <__vector_23+0x4e>
    3648:	81 e0       	ldi	r24, 0x01	; 1
    364a:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <ModuleControllerStateSet>
    364e:	eb e6       	ldi	r30, 0x6B	; 107
    3650:	f0 e0       	ldi	r31, 0x00	; 0
    3652:	80 81       	ld	r24, Z
    3654:	8d 7f       	andi	r24, 0xFD	; 253
    3656:	80 83       	st	Z, r24
    3658:	e8 e6       	ldi	r30, 0x68	; 104
    365a:	f0 e0       	ldi	r31, 0x00	; 0
    365c:	80 81       	ld	r24, Z
    365e:	8d 7f       	andi	r24, 0xFD	; 253
    3660:	80 83       	st	Z, r24
    3662:	81 e0       	ldi	r24, 0x01	; 1
    3664:	80 93 17 03 	sts	0x0317, r24	; 0x800317 <sg_bOvercurrentSignal>
    3668:	ff 91       	pop	r31
    366a:	ef 91       	pop	r30
    366c:	bf 91       	pop	r27
    366e:	af 91       	pop	r26
    3670:	9f 91       	pop	r25
    3672:	8f 91       	pop	r24
    3674:	7f 91       	pop	r23
    3676:	6f 91       	pop	r22
    3678:	5f 91       	pop	r21
    367a:	4f 91       	pop	r20
    367c:	3f 91       	pop	r19
    367e:	2f 91       	pop	r18
    3680:	0f 90       	pop	r0
    3682:	0f be       	out	0x3f, r0	; 63
    3684:	0f 90       	pop	r0
    3686:	1f 90       	pop	r1
    3688:	18 95       	reti

Disassembly of section .text.__vector_24:

000042a8 <__vector_24>:
    42a8:	78 94       	sei
    42aa:	1f 92       	push	r1
    42ac:	0f 92       	push	r0
    42ae:	0f b6       	in	r0, 0x3f	; 63
    42b0:	0f 92       	push	r0
    42b2:	11 24       	eor	r1, r1
    42b4:	2f 93       	push	r18
    42b6:	3f 93       	push	r19
    42b8:	4f 93       	push	r20
    42ba:	5f 93       	push	r21
    42bc:	6f 93       	push	r22
    42be:	7f 93       	push	r23
    42c0:	8f 93       	push	r24
    42c2:	9f 93       	push	r25
    42c4:	af 93       	push	r26
    42c6:	bf 93       	push	r27
    42c8:	ef 93       	push	r30
    42ca:	ff 93       	push	r31
    42cc:	8b b1       	in	r24, 0x0b	; 11
    42ce:	0e 94 14 26 	call	0x4c28	; 0x4c28 <Check5VLoss>
    42d2:	ff 91       	pop	r31
    42d4:	ef 91       	pop	r30
    42d6:	bf 91       	pop	r27
    42d8:	af 91       	pop	r26
    42da:	9f 91       	pop	r25
    42dc:	8f 91       	pop	r24
    42de:	7f 91       	pop	r23
    42e0:	6f 91       	pop	r22
    42e2:	5f 91       	pop	r21
    42e4:	4f 91       	pop	r20
    42e6:	3f 91       	pop	r19
    42e8:	2f 91       	pop	r18
    42ea:	0f 90       	pop	r0
    42ec:	0f be       	out	0x3f, r0	; 63
    42ee:	0f 90       	pop	r0
    42f0:	1f 90       	pop	r1
    42f2:	18 95       	reti

Disassembly of section .text.vUARTRXStart:

00004c9c <vUARTRXStart>:
}

// Called at the start of cell string data via MC RX
void vUARTRXStart(void)
{
	sg_u8CellBufferRX = 0;
    4c9c:	10 92 6e 09 	sts	0x096E, r1	; 0x80096e <sg_u8CellBufferRX>
	sg_u8CellIndex = 0;
    4ca0:	10 92 6f 09 	sts	0x096F, r1	; 0x80096f <sg_u8CellIndex>
	sg_u16BytesReceived = 0;
    4ca4:	10 92 5d 09 	sts	0x095D, r1	; 0x80095d <sg_u16BytesReceived+0x1>
    4ca8:	10 92 5c 09 	sts	0x095C, r1	; 0x80095c <sg_u16BytesReceived>
	sg_u8CellReports = 0;
    4cac:	10 92 6d 09 	sts	0x096D, r1	; 0x80096d <sg_u8CellReports>
    4cb0:	08 95       	ret

Disassembly of section .text.vUARTRXEnd:

00004b2c <vUARTRXEnd>:
	// disable the edge interrupt
//	VUART_RX_DISABLE();
	// disable bit timer interrupt, should already be off but just in case
//	TIMER_CHB_INT_DISABLE();
	// update bytes and cells received
	sg_sFrame.sg_u16BytesReceived = sg_u16BytesReceived;
    4b2c:	80 91 5c 09 	lds	r24, 0x095C	; 0x80095c <sg_u16BytesReceived>
    4b30:	90 91 5d 09 	lds	r25, 0x095D	; 0x80095d <sg_u16BytesReceived+0x1>
    4b34:	e0 e1       	ldi	r30, 0x10	; 16
    4b36:	f1 e0       	ldi	r31, 0x01	; 1
    4b38:	94 a7       	std	Z+44, r25	; 0x2c
    4b3a:	83 a7       	std	Z+43, r24	; 0x2b
	sg_sFrame.sg_u8CellCPUCount = sg_u8CellReports;
    4b3c:	80 91 6d 09 	lds	r24, 0x096D	; 0x80096d <sg_u8CellReports>
    4b40:	85 a7       	std	Z+45, r24	; 0x2d
	sg_u16BytesReceived = 0;
    4b42:	10 92 5d 09 	sts	0x095D, r1	; 0x80095d <sg_u16BytesReceived+0x1>
    4b46:	10 92 5c 09 	sts	0x095C, r1	; 0x80095c <sg_u16BytesReceived>
	sg_u8CellReports = 0;
    4b4a:	10 92 6d 09 	sts	0x096D, r1	; 0x80096d <sg_u8CellReports>
    4b4e:	08 95       	ret

Disassembly of section .text.vUARTRXData:

00003c12 <vUARTRXData>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    3c12:	e0 91 6e 09 	lds	r30, 0x096E	; 0x80096e <sg_u8CellBufferRX>
    3c16:	21 e0       	ldi	r18, 0x01	; 1
    3c18:	2e 0f       	add	r18, r30
    3c1a:	20 93 6e 09 	sts	0x096E, r18	; 0x80096e <sg_u8CellBufferRX>
    3c1e:	f0 e0       	ldi	r31, 0x00	; 0
    3c20:	e0 5b       	subi	r30, 0xB0	; 176
    3c22:	f6 4f       	sbci	r31, 0xF6	; 246
    3c24:	80 83       	st	Z, r24
    3c26:	80 91 5c 09 	lds	r24, 0x095C	; 0x80095c <sg_u16BytesReceived>
    3c2a:	90 91 5d 09 	lds	r25, 0x095D	; 0x80095d <sg_u16BytesReceived+0x1>
    3c2e:	01 96       	adiw	r24, 0x01	; 1
    3c30:	90 93 5d 09 	sts	0x095D, r25	; 0x80095d <sg_u16BytesReceived+0x1>
    3c34:	80 93 5c 09 	sts	0x095C, r24	; 0x80095c <sg_u16BytesReceived>
    3c38:	24 30       	cpi	r18, 0x04	; 4
    3c3a:	38 f1       	brcs	.+78     	; 0x3c8a <vUARTRXData+0x78>
    3c3c:	10 92 6e 09 	sts	0x096E, r1	; 0x80096e <sg_u8CellBufferRX>
    3c40:	80 91 6f 09 	lds	r24, 0x096F	; 0x80096f <sg_u8CellIndex>
    3c44:	8c 36       	cpi	r24, 0x6C	; 108
    3c46:	08 f5       	brcc	.+66     	; 0x3c8a <vUARTRXData+0x78>
    3c48:	e8 2f       	mov	r30, r24
    3c4a:	f0 e0       	ldi	r31, 0x00	; 0
    3c4c:	75 96       	adiw	r30, 0x15	; 21
    3c4e:	ee 0f       	add	r30, r30
    3c50:	ff 1f       	adc	r31, r31
    3c52:	ee 0f       	add	r30, r30
    3c54:	ff 1f       	adc	r31, r31
    3c56:	e0 5f       	subi	r30, 0xF0	; 240
    3c58:	fe 4f       	sbci	r31, 0xFE	; 254
    3c5a:	a0 e5       	ldi	r26, 0x50	; 80
    3c5c:	b9 e0       	ldi	r27, 0x09	; 9
    3c5e:	4d 91       	ld	r20, X+
    3c60:	5d 91       	ld	r21, X+
    3c62:	6d 91       	ld	r22, X+
    3c64:	7c 91       	ld	r23, X
    3c66:	13 97       	sbiw	r26, 0x03	; 3
    3c68:	40 83       	st	Z, r20
    3c6a:	51 83       	std	Z+1, r21	; 0x01
    3c6c:	62 83       	std	Z+2, r22	; 0x02
    3c6e:	73 83       	std	Z+3, r23	; 0x03
    3c70:	1d 92       	st	X+, r1
    3c72:	1d 92       	st	X+, r1
    3c74:	1d 92       	st	X+, r1
    3c76:	1c 92       	st	X, r1
    3c78:	13 97       	sbiw	r26, 0x03	; 3
    3c7a:	8f 5f       	subi	r24, 0xFF	; 255
    3c7c:	80 93 6f 09 	sts	0x096F, r24	; 0x80096f <sg_u8CellIndex>
    3c80:	80 91 6d 09 	lds	r24, 0x096D	; 0x80096d <sg_u8CellReports>
    3c84:	8f 5f       	subi	r24, 0xFF	; 255
    3c86:	80 93 6d 09 	sts	0x096D, r24	; 0x80096d <sg_u8CellReports>
    3c8a:	08 95       	ret

Disassembly of section .text.PlatformGetSendData:

000047e0 <PlatformGetSendData>:
uint16_t PlatformGetSendData( bool bUpdateBalanceStatus )
{
	uint16_t u16SendValue = 0;
	
	
	if( sg_bStopDischarge )
    47e0:	90 91 18 03 	lds	r25, 0x0318	; 0x800318 <sg_bStopDischarge>
    47e4:	99 23       	and	r25, r25
    47e6:	51 f0       	breq	.+20     	; 0x47fc <PlatformGetSendData+0x1c>
	{
		if (bUpdateBalanceStatus)	// don't update if ony an availability check
    47e8:	88 23       	and	r24, r24
    47ea:	59 f0       	breq	.+22     	; 0x4802 <PlatformGetSendData+0x22>
		{
			sg_bStopDischarge = false;
    47ec:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <sg_bStopDischarge>
			sg_bCellBalancedOnce = true;
    47f0:	81 e0       	ldi	r24, 0x01	; 1
    47f2:	80 93 19 03 	sts	0x0319, r24	; 0x800319 <sg_bCellBalancedOnce>
		}
		u16SendValue = 0x3ff;
    47f6:	8f ef       	ldi	r24, 0xFF	; 255
    47f8:	93 e0       	ldi	r25, 0x03	; 3
    47fa:	08 95       	ret
			}
		}
		else
#endif
		{
			u16SendValue |= MSG_CELL_SEND_REPORT;
    47fc:	80 e0       	ldi	r24, 0x00	; 0
    47fe:	90 e8       	ldi	r25, 0x80	; 128
    4800:	08 95       	ret
		if (bUpdateBalanceStatus)	// don't update if ony an availability check
		{
			sg_bStopDischarge = false;
			sg_bCellBalancedOnce = true;
		}
		u16SendValue = 0x3ff;
    4802:	8f ef       	ldi	r24, 0xFF	; 255
    4804:	93 e0       	ldi	r25, 0x03	; 3
#endif
		}
	}
	
	return( u16SendValue );
}
    4806:	08 95       	ret

Disassembly of section .text.ADCCallback:

0000487e <ADCCallback>:
// Called every time there's an ADC read since apparently ISR can't access global variables?  compiler fails
void ADCCallback(EADCType eType,
				 uint16_t u16Reading)
{
	// End of chain? Indicate it's time for an ADC update
	if ((EADCTYPE_COUNT-1) == eType)
    487e:	84 30       	cpi	r24, 0x04	; 4
    4880:	19 f4       	brne	.+6      	; 0x4888 <ADCCallback+0xa>
	{
		sg_bADCUpdate = true;
    4882:	91 e0       	ldi	r25, 0x01	; 1
    4884:	90 93 16 03 	sts	0x0316, r25	; 0x800316 <sg_bADCUpdate>
	}
	sg_sFrame.ADCReadings[eType].u16Reading = u16Reading;
    4888:	90 e0       	ldi	r25, 0x00	; 0
    488a:	fc 01       	movw	r30, r24
    488c:	ee 0f       	add	r30, r30
    488e:	ff 1f       	adc	r31, r31
    4890:	8e 0f       	add	r24, r30
    4892:	9f 1f       	adc	r25, r31
    4894:	fc 01       	movw	r30, r24
    4896:	eb 5a       	subi	r30, 0xAB	; 171
    4898:	fe 4f       	sbci	r31, 0xFE	; 254
    489a:	72 83       	std	Z+2, r23	; 0x02
    489c:	61 83       	std	Z+1, r22	; 0x01
	sg_sFrame.ADCReadings[eType].bValid = true;
    489e:	81 e0       	ldi	r24, 0x01	; 1
    48a0:	80 83       	st	Z, r24
    48a2:	08 95       	ret

Disassembly of section .text.FrameInit:

00002d8e <FrameInit>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    2d8e:	cf 93       	push	r28
    2d90:	df 93       	push	r29
    2d92:	81 11       	cpse	r24, r1
    2d94:	0d c0       	rjmp	.+26     	; 0x2db0 <FrameInit+0x22>
    2d96:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <sg_sFrame>
    2d9a:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <sg_sFrame+0x1>
    2d9e:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <sg_sFrame+0x2>
    2da2:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <sg_sFrame+0x3>
    2da6:	8a 37       	cpi	r24, 0x7A	; 122
    2da8:	9a 4d       	sbci	r25, 0xDA	; 218
    2daa:	a7 47       	sbci	r26, 0x77	; 119
    2dac:	ba 4b       	sbci	r27, 0xBA	; 186
    2dae:	21 f1       	breq	.+72     	; 0x2df8 <FrameInit+0x6a>
    2db0:	c0 e1       	ldi	r28, 0x10	; 16
    2db2:	d1 e0       	ldi	r29, 0x01	; 1
    2db4:	84 e0       	ldi	r24, 0x04	; 4
    2db6:	92 e0       	ldi	r25, 0x02	; 2
    2db8:	fe 01       	movw	r30, r28
    2dba:	9c 01       	movw	r18, r24
    2dbc:	11 92       	st	Z+, r1
    2dbe:	21 50       	subi	r18, 0x01	; 1
    2dc0:	30 40       	sbci	r19, 0x00	; 0
    2dc2:	e1 f7       	brne	.-8      	; 0x2dbc <FrameInit+0x2e>
    2dc4:	9d 83       	std	Y+5, r25	; 0x05
    2dc6:	8c 83       	std	Y+4, r24	; 0x04
    2dc8:	8a e7       	ldi	r24, 0x7A	; 122
    2dca:	9a ed       	ldi	r25, 0xDA	; 218
    2dcc:	a7 e7       	ldi	r26, 0x77	; 119
    2dce:	ba eb       	ldi	r27, 0xBA	; 186
    2dd0:	88 83       	st	Y, r24
    2dd2:	99 83       	std	Y+1, r25	; 0x01
    2dd4:	aa 83       	std	Y+2, r26	; 0x02
    2dd6:	bb 83       	std	Y+3, r27	; 0x03
    2dd8:	0e 94 95 1c 	call	0x392a	; 0x392a <ModuleControllerGetUniqueID>
    2ddc:	6e 87       	std	Y+14, r22	; 0x0e
    2dde:	7f 87       	std	Y+15, r23	; 0x0f
    2de0:	88 8b       	std	Y+16, r24	; 0x10
    2de2:	99 8b       	std	Y+17, r25	; 0x11
    2de4:	8f ef       	ldi	r24, 0xFF	; 255
    2de6:	8a a7       	std	Y+42, r24	; 0x2a
    2de8:	8b 8b       	std	Y+19, r24	; 0x13
    2dea:	84 e0       	ldi	r24, 0x04	; 4
    2dec:	90 e0       	ldi	r25, 0x00	; 0
    2dee:	0e 94 83 26 	call	0x4d06	; 0x4d06 <EEPROMRead>
    2df2:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <CellCountExpectedSet>
    2df6:	20 c0       	rjmp	.+64     	; 0x2e38 <FrameInit+0xaa>
    2df8:	e0 e1       	ldi	r30, 0x10	; 16
    2dfa:	f1 e0       	ldi	r31, 0x01	; 1
    2dfc:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <sg_sFrame+0x3d>
    2e00:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <sg_sFrame+0x3e>
    2e04:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <sg_sFrame+0x3f>
    2e08:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <sg_sFrame+0x40>
    2e0c:	10 ae       	std	Z+56, r1	; 0x38
    2e0e:	17 aa       	std	Z+55, r1	; 0x37
    2e10:	12 ae       	std	Z+58, r1	; 0x3a
    2e12:	11 ae       	std	Z+57, r1	; 0x39
    2e14:	14 ae       	std	Z+60, r1	; 0x3c
    2e16:	13 ae       	std	Z+59, r1	; 0x3b
    2e18:	80 eb       	ldi	r24, 0xB0	; 176
    2e1a:	91 e0       	ldi	r25, 0x01	; 1
    2e1c:	a4 e6       	ldi	r26, 0x64	; 100
    2e1e:	b1 e0       	ldi	r27, 0x01	; 1
    2e20:	ed 01       	movw	r28, r26
    2e22:	9c 01       	movw	r18, r24
    2e24:	19 92       	st	Y+, r1
    2e26:	21 50       	subi	r18, 0x01	; 1
    2e28:	30 40       	sbci	r19, 0x00	; 0
    2e2a:	e1 f7       	brne	.-8      	; 0x2e24 <FrameInit+0x96>
    2e2c:	17 a2       	std	Z+39, r1	; 0x27
    2e2e:	11 a6       	std	Z+41, r1	; 0x29
    2e30:	10 a6       	std	Z+40, r1	; 0x28
    2e32:	12 a6       	std	Z+42, r1	; 0x2a
    2e34:	15 a6       	std	Z+45, r1	; 0x2d
    2e36:	16 a6       	std	Z+46, r1	; 0x2e
    2e38:	e0 e1       	ldi	r30, 0x10	; 16
    2e3a:	f1 e0       	ldi	r31, 0x01	; 1
    2e3c:	8f e9       	ldi	r24, 0x9F	; 159
    2e3e:	95 e1       	ldi	r25, 0x15	; 21
    2e40:	92 ab       	std	Z+50, r25	; 0x32
    2e42:	81 ab       	std	Z+49, r24	; 0x31
    2e44:	94 ab       	std	Z+52, r25	; 0x34
    2e46:	83 ab       	std	Z+51, r24	; 0x33
    2e48:	96 ab       	std	Z+54, r25	; 0x36
    2e4a:	85 ab       	std	Z+53, r24	; 0x35
    2e4c:	8f ef       	ldi	r24, 0xFF	; 255
    2e4e:	80 93 77 09 	sts	0x0977, r24	; 0x800977 <sg_u8CurrentBufferIndex>
    2e52:	df 91       	pop	r29
    2e54:	cf 91       	pop	r28
    2e56:	08 95       	ret

Disassembly of section .text.CellStringPowerStateMachine:

00003714 <CellStringPowerStateMachine>:
    3714:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <sg_eStringPowerState>
    3718:	82 30       	cpi	r24, 0x02	; 2
    371a:	49 f1       	breq	.+82     	; 0x376e <CellStringPowerStateMachine+0x5a>
    371c:	28 f4       	brcc	.+10     	; 0x3728 <CellStringPowerStateMachine+0x14>
    371e:	88 23       	and	r24, r24
    3720:	41 f0       	breq	.+16     	; 0x3732 <CellStringPowerStateMachine+0x1e>
    3722:	81 30       	cpi	r24, 0x01	; 1
    3724:	91 f0       	breq	.+36     	; 0x374a <CellStringPowerStateMachine+0x36>
    3726:	32 c0       	rjmp	.+100    	; 0x378c <CellStringPowerStateMachine+0x78>
    3728:	83 30       	cpi	r24, 0x03	; 3
    372a:	61 f1       	breq	.+88     	; 0x3784 <CellStringPowerStateMachine+0x70>
    372c:	84 30       	cpi	r24, 0x04	; 4
    372e:	a9 f1       	breq	.+106    	; 0x379a <CellStringPowerStateMachine+0x86>
    3730:	2d c0       	rjmp	.+90     	; 0x378c <CellStringPowerStateMachine+0x78>
    3732:	85 b1       	in	r24, 0x05	; 5
    3734:	8f 7e       	andi	r24, 0xEF	; 239
    3736:	85 b9       	out	0x05, r24	; 5
    3738:	81 e0       	ldi	r24, 0x01	; 1
    373a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <sg_eStringPowerState>
    373e:	80 e0       	ldi	r24, 0x00	; 0
    3740:	0e 94 c7 16 	call	0x2d8e	; 0x2d8e <FrameInit>
    3744:	0e 94 b0 26 	call	0x4d60	; 0x4d60 <SendModuleControllerStatus>
    3748:	08 95       	ret
    374a:	85 b1       	in	r24, 0x05	; 5
    374c:	8f 7e       	andi	r24, 0xEF	; 239
    374e:	85 b9       	out	0x05, r24	; 5
    3750:	80 e0       	ldi	r24, 0x00	; 0
    3752:	0e 94 c7 16 	call	0x2d8e	; 0x2d8e <FrameInit>
    3756:	82 e0       	ldi	r24, 0x02	; 2
    3758:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <sg_eStringPowerState>
    375c:	81 e0       	ldi	r24, 0x01	; 1
    375e:	80 93 71 09 	sts	0x0971, r24	; 0x800971 <sg_u8CellStringPowerTimer>
    3762:	e0 e1       	ldi	r30, 0x10	; 16
    3764:	f1 e0       	ldi	r31, 0x01	; 1
    3766:	8f ef       	ldi	r24, 0xFF	; 255
    3768:	83 8b       	std	Z+19, r24	; 0x13
    376a:	14 8a       	std	Z+20, r1	; 0x14
    376c:	08 95       	ret
    376e:	80 91 71 09 	lds	r24, 0x0971	; 0x800971 <sg_u8CellStringPowerTimer>
    3772:	81 11       	cpse	r24, r1
    3774:	12 c0       	rjmp	.+36     	; 0x379a <CellStringPowerStateMachine+0x86>
    3776:	85 b1       	in	r24, 0x05	; 5
    3778:	80 61       	ori	r24, 0x10	; 16
    377a:	85 b9       	out	0x05, r24	; 5
    377c:	83 e0       	ldi	r24, 0x03	; 3
    377e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <sg_eStringPowerState>
    3782:	08 95       	ret
    3784:	84 e0       	ldi	r24, 0x04	; 4
    3786:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <sg_eStringPowerState>
    378a:	08 95       	ret
    378c:	48 e6       	ldi	r20, 0x68	; 104
    378e:	52 e0       	ldi	r21, 0x02	; 2
    3790:	67 e4       	ldi	r22, 0x47	; 71
    3792:	72 e0       	ldi	r23, 0x02	; 2
    3794:	80 e0       	ldi	r24, 0x00	; 0
    3796:	0e 94 87 23 	call	0x470e	; 0x470e <PlatformAssert>
    379a:	08 95       	ret

Disassembly of section .text.main:

00000bf6 <main>:
 bf6:	cf 93       	push	r28
 bf8:	df 93       	push	r29
 bfa:	cd b7       	in	r28, 0x3d	; 61
 bfc:	de b7       	in	r29, 0x3e	; 62
 bfe:	28 97       	sbiw	r28, 0x08	; 8
 c00:	0f b6       	in	r0, 0x3f	; 63
 c02:	f8 94       	cli
 c04:	de bf       	out	0x3e, r29	; 62
 c06:	0f be       	out	0x3f, r0	; 63
 c08:	cd bf       	out	0x3d, r28	; 61
 c0a:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <WatchdogOff>
 c0e:	88 b1       	in	r24, 0x08	; 8
 c10:	8f 7e       	andi	r24, 0xEF	; 239
 c12:	88 b9       	out	0x08, r24	; 8
 c14:	87 b1       	in	r24, 0x07	; 7
 c16:	80 61       	ori	r24, 0x10	; 16
 c18:	87 b9       	out	0x07, r24	; 7
 c1a:	87 b1       	in	r24, 0x07	; 7
 c1c:	8d 7f       	andi	r24, 0xFD	; 253
 c1e:	87 b9       	out	0x07, r24	; 7
 c20:	87 b1       	in	r24, 0x07	; 7
 c22:	80 68       	ori	r24, 0x80	; 128
 c24:	87 b9       	out	0x07, r24	; 7
 c26:	88 b1       	in	r24, 0x08	; 8
 c28:	8f 7e       	andi	r24, 0xEF	; 239
 c2a:	88 b9       	out	0x08, r24	; 8
 c2c:	8d b1       	in	r24, 0x0d	; 13
 c2e:	82 60       	ori	r24, 0x02	; 2
 c30:	8d b9       	out	0x0d, r24	; 13
 c32:	8e b1       	in	r24, 0x0e	; 14
 c34:	8d 7f       	andi	r24, 0xFD	; 253
 c36:	8e b9       	out	0x0e, r24	; 14
 c38:	84 b1       	in	r24, 0x04	; 4
 c3a:	80 61       	ori	r24, 0x10	; 16
 c3c:	84 b9       	out	0x04, r24	; 4
 c3e:	85 b1       	in	r24, 0x05	; 5
 c40:	8f 7e       	andi	r24, 0xEF	; 239
 c42:	85 b9       	out	0x05, r24	; 5
 c44:	e0 e0       	ldi	r30, 0x00	; 0
 c46:	f8 e0       	ldi	r31, 0x08	; 8
 c48:	02 c0       	rjmp	.+4      	; 0xc4e <main+0x58>
 c4a:	8a ea       	ldi	r24, 0xAA	; 170
 c4c:	81 93       	st	Z+, r24
 c4e:	e1 15       	cp	r30, r1
 c50:	80 e1       	ldi	r24, 0x10	; 16
 c52:	f8 07       	cpc	r31, r24
 c54:	d0 f3       	brcs	.-12     	; 0xc4a <main+0x54>
 c56:	84 b7       	in	r24, 0x34	; 52
 c58:	80 93 6b 09 	sts	0x096B, r24	; 0x80096b <sg_u8Reason>
 c5c:	80 91 6b 09 	lds	r24, 0x096B	; 0x80096b <sg_u8Reason>
 c60:	83 ff       	sbrs	r24, 3
 c62:	0a c0       	rjmp	.+20     	; 0xc78 <main+0x82>
 c64:	80 91 28 03 	lds	r24, 0x0328	; 0x800328 <sg_eWDTCurrentStatus>
 c68:	e0 e1       	ldi	r30, 0x10	; 16
 c6a:	f1 e0       	ldi	r31, 0x01	; 1
 c6c:	82 89       	ldd	r24, Z+18	; 0x12
 c6e:	8f 5f       	subi	r24, 0xFF	; 255
 c70:	82 8b       	std	Z+18, r24	; 0x12
 c72:	0e 94 2f 0c 	call	0x185e	; 0x185e <ModuleControllerStateHandle>
 c76:	47 c0       	rjmp	.+142    	; 0xd06 <main+0x110>
 c78:	80 91 6b 09 	lds	r24, 0x096B	; 0x80096b <sg_u8Reason>
 c7c:	80 91 6b 09 	lds	r24, 0x096B	; 0x80096b <sg_u8Reason>
 c80:	80 91 6b 09 	lds	r24, 0x096B	; 0x80096b <sg_u8Reason>
 c84:	f8 94       	cli
 c86:	0e 94 f2 26 	call	0x4de4	; 0x4de4 <SetSysclock>
 c8a:	0e 94 02 21 	call	0x4204	; 0x4204 <TimerInit>
 c8e:	0e 94 2c 23 	call	0x4658	; 0x4658 <vUARTInit>
 c92:	0e 94 5e 11 	call	0x22bc	; 0x22bc <ADCInit>
 c96:	0e 94 54 1c 	call	0x38a8	; 0x38a8 <STORE_Init>
 c9a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <sg_bSDCardReady>
 c9e:	81 e0       	ldi	r24, 0x01	; 1
 ca0:	0e 94 c7 16 	call	0x2d8e	; 0x2d8e <FrameInit>
 ca4:	89 e0       	ldi	r24, 0x09	; 9
 ca6:	90 e0       	ldi	r25, 0x00	; 0
 ca8:	0e 94 83 26 	call	0x4d06	; 0x4d06 <EEPROMRead>
 cac:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <sg_u8SequentailCountMismatchThreshold>
 cb0:	8a b1       	in	r24, 0x0a	; 10
 cb2:	8f 7b       	andi	r24, 0xBF	; 191
 cb4:	8a b9       	out	0x0a, r24	; 10
 cb6:	8b b1       	in	r24, 0x0b	; 11
 cb8:	80 64       	ori	r24, 0x40	; 64
 cba:	8b b9       	out	0x0b, r24	; 11
 cbc:	11 e0       	ldi	r17, 0x01	; 1
 cbe:	1b bb       	out	0x1b, r17	; 27
 cc0:	82 e0       	ldi	r24, 0x02	; 2
 cc2:	8b bb       	out	0x1b, r24	; 27
 cc4:	84 e0       	ldi	r24, 0x04	; 4
 cc6:	8b bb       	out	0x1b, r24	; 27
 cc8:	88 e0       	ldi	r24, 0x08	; 8
 cca:	8b bb       	out	0x1b, r24	; 27
 ccc:	ec e6       	ldi	r30, 0x6C	; 108
 cce:	f0 e0       	ldi	r31, 0x00	; 0
 cd0:	80 81       	ld	r24, Z
 cd2:	80 64       	ori	r24, 0x40	; 64
 cd4:	80 83       	st	Z, r24
 cd6:	8b b3       	in	r24, 0x1b	; 27
 cd8:	84 60       	ori	r24, 0x04	; 4
 cda:	8b bb       	out	0x1b, r24	; 27
 cdc:	8a ea       	ldi	r24, 0xAA	; 170
 cde:	98 e0       	ldi	r25, 0x08	; 8
 ce0:	0e 94 f8 26 	call	0x4df0	; 0x4df0 <CANSetRXCallback>
 ce4:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <CANInit>
 ce8:	0e 94 1e 0b 	call	0x163c	; 0x163c <RTCInit>
 cec:	85 e0       	ldi	r24, 0x05	; 5
 cee:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <sg_eModuleControllerStateCurrent>
 cf2:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <sg_eModuleControllerStateTarget>
 cf6:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <sg_eModuleControllerStateMax>
 cfa:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <sg_bModuleRegistered>
 cfe:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <sg_eStringPowerState>
 d02:	10 93 0c 01 	sts	0x010C, r17	; 0x80010c <sg_eFrameStatus>
 d06:	78 94       	sei
 d08:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <sg_bNewTick>
 d0c:	88 23       	and	r24, r24
 d0e:	e1 f3       	breq	.-8      	; 0xd08 <main+0x112>
 d10:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <sg_bNewTick>
 d14:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <sg_bModuleRegistered>
 d18:	81 11       	cpse	r24, r1
 d1a:	22 c0       	rjmp	.+68     	; 0xd60 <main+0x16a>
 d1c:	80 91 76 09 	lds	r24, 0x0976	; 0x800976 <sg_bAnnouncementPending>
 d20:	88 23       	and	r24, r24
 d22:	11 f1       	breq	.+68     	; 0xd68 <main+0x172>
 d24:	80 91 75 09 	lds	r24, 0x0975	; 0x800975 <sg_u8AnnouncementDelayTicks>
 d28:	88 23       	and	r24, r24
 d2a:	29 f0       	breq	.+10     	; 0xd36 <main+0x140>
 d2c:	80 91 75 09 	lds	r24, 0x0975	; 0x800975 <sg_u8AnnouncementDelayTicks>
 d30:	81 50       	subi	r24, 0x01	; 1
 d32:	80 93 75 09 	sts	0x0975, r24	; 0x800975 <sg_u8AnnouncementDelayTicks>
 d36:	80 91 75 09 	lds	r24, 0x0975	; 0x800975 <sg_u8AnnouncementDelayTicks>
 d3a:	81 11       	cpse	r24, r1
 d3c:	15 c0       	rjmp	.+42     	; 0xd68 <main+0x172>
 d3e:	81 e0       	ldi	r24, 0x01	; 1
 d40:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <sg_bSendAnnouncement>
 d44:	10 92 76 09 	sts	0x0976, r1	; 0x800976 <sg_bAnnouncementPending>
 d48:	83 e5       	ldi	r24, 0x53	; 83
 d4a:	92 e0       	ldi	r25, 0x02	; 2
 d4c:	a0 e0       	ldi	r26, 0x00	; 0
 d4e:	af 93       	push	r26
 d50:	9f 93       	push	r25
 d52:	8f 93       	push	r24
 d54:	0e 94 d0 26 	call	0x4da0	; 0x4da0 <DebugOut>
 d58:	0f 90       	pop	r0
 d5a:	0f 90       	pop	r0
 d5c:	0f 90       	pop	r0
 d5e:	04 c0       	rjmp	.+8      	; 0xd68 <main+0x172>
 d60:	ce 01       	movw	r24, r28
 d62:	01 96       	adiw	r24, 0x01	; 1
 d64:	0e 94 08 04 	call	0x810	; 0x810 <ControllerStatusMessagesSend>
 d68:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <sg_bPackControllerTimeout>
 d6c:	88 23       	and	r24, r24
 d6e:	81 f0       	breq	.+32     	; 0xd90 <main+0x19a>
 d70:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <sg_bPackControllerTimeout>
 d74:	10 92 27 03 	sts	0x0327, r1	; 0x800327 <sg_u8ModuleRegistrationID>
 d78:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <sg_bModuleRegistered>
 d7c:	10 92 74 09 	sts	0x0974, r1	; 0x800974 <sg_bIgnoreStatusRequests>
 d80:	81 e0       	ldi	r24, 0x01	; 1
 d82:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <sg_bSendAnnouncement>
 d86:	0e 94 b0 26 	call	0x4d60	; 0x4d60 <SendModuleControllerStatus>
 d8a:	80 e0       	ldi	r24, 0x00	; 0
 d8c:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <ModuleControllerStateSet>
 d90:	ef e6       	ldi	r30, 0x6F	; 111
 d92:	f0 e0       	ldi	r31, 0x00	; 0
 d94:	90 81       	ld	r25, Z
 d96:	80 81       	ld	r24, Z
 d98:	8d 7f       	andi	r24, 0xFD	; 253
 d9a:	80 83       	st	Z, r24
 d9c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <sg_eFrameStatus>
 da0:	20 91 72 09 	lds	r18, 0x0972	; 0x800972 <sg_bFrameStart>
 da4:	90 83       	st	Z, r25
 da6:	81 30       	cpi	r24, 0x01	; 1
 da8:	09 f0       	breq	.+2      	; 0xdac <main+0x1b6>
 daa:	61 c0       	rjmp	.+194    	; 0xe6e <main+0x278>
 dac:	22 23       	and	r18, r18
 dae:	09 f4       	brne	.+2      	; 0xdb2 <main+0x1bc>
 db0:	55 c0       	rjmp	.+170    	; 0xe5c <main+0x266>
 db2:	10 92 72 09 	sts	0x0972, r1	; 0x800972 <sg_bFrameStart>
 db6:	0e 94 8a 1b 	call	0x3714	; 0x3714 <CellStringPowerStateMachine>
 dba:	0e 94 96 25 	call	0x4b2c	; 0x4b2c <vUARTRXEnd>
 dbe:	ce 01       	movw	r24, r28
 dc0:	01 96       	adiw	r24, 0x01	; 1
 dc2:	0e 94 55 07 	call	0xeaa	; 0xeaa <CellStringProcess>
 dc6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <sg_eStringPowerState>
 dca:	84 30       	cpi	r24, 0x04	; 4
 dcc:	29 f5       	brne	.+74     	; 0xe18 <main+0x222>
 dce:	e0 e1       	ldi	r30, 0x10	; 16
 dd0:	f1 e0       	ldi	r31, 0x01	; 1
 dd2:	95 a5       	ldd	r25, Z+45	; 0x2d
 dd4:	85 89       	ldd	r24, Z+21	; 0x15
 dd6:	98 17       	cp	r25, r24
 dd8:	e9 f0       	breq	.+58     	; 0xe14 <main+0x21e>
 dda:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <sg_sFrame+0x15>
 dde:	88 23       	and	r24, r24
 de0:	c9 f0       	breq	.+50     	; 0xe14 <main+0x21e>
 de2:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <sg_u8SequentailCountMismatchThreshold>
 de6:	88 23       	and	r24, r24
 de8:	b9 f0       	breq	.+46     	; 0xe18 <main+0x222>
 dea:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <sg_u8SequentailCountMismatchThreshold>
 dee:	8f 3f       	cpi	r24, 0xFF	; 255
 df0:	99 f0       	breq	.+38     	; 0xe18 <main+0x222>
 df2:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <sg_u8SequentailCellCountMismatches>
 df6:	8f 5f       	subi	r24, 0xFF	; 255
 df8:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <sg_u8SequentailCellCountMismatches>
 dfc:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <sg_u8SequentailCellCountMismatches>
 e00:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <sg_u8SequentailCountMismatchThreshold>
 e04:	98 17       	cp	r25, r24
 e06:	40 f0       	brcs	.+16     	; 0xe18 <main+0x222>
 e08:	81 e0       	ldi	r24, 0x01	; 1
 e0a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <sg_eStringPowerState>
 e0e:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <sg_u8SequentailCellCountMismatches>
 e12:	02 c0       	rjmp	.+4      	; 0xe18 <main+0x222>
 e14:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <sg_u8SequentailCellCountMismatches>
 e18:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <sg_bSendAnnouncement>
 e1c:	88 23       	and	r24, r24
 e1e:	f1 f0       	breq	.+60     	; 0xe5c <main+0x266>
 e20:	86 e5       	ldi	r24, 0x56	; 86
 e22:	89 83       	std	Y+1, r24	; 0x01
 e24:	80 e2       	ldi	r24, 0x20	; 32
 e26:	8a 83       	std	Y+2, r24	; 0x02
 e28:	82 e0       	ldi	r24, 0x02	; 2
 e2a:	8b 83       	std	Y+3, r24	; 0x03
 e2c:	83 e0       	ldi	r24, 0x03	; 3
 e2e:	8c 83       	std	Y+4, r24	; 0x04
 e30:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <sg_sFrame+0xe>
 e34:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <sg_sFrame+0xf>
 e38:	a0 91 20 01 	lds	r26, 0x0120	; 0x800120 <sg_sFrame+0x10>
 e3c:	b0 91 21 01 	lds	r27, 0x0121	; 0x800121 <sg_sFrame+0x11>
 e40:	8d 83       	std	Y+5, r24	; 0x05
 e42:	9e 83       	std	Y+6, r25	; 0x06
 e44:	af 83       	std	Y+7, r26	; 0x07
 e46:	b8 87       	std	Y+8, r27	; 0x08
 e48:	48 e0       	ldi	r20, 0x08	; 8
 e4a:	be 01       	movw	r22, r28
 e4c:	6f 5f       	subi	r22, 0xFF	; 255
 e4e:	7f 4f       	sbci	r23, 0xFF	; 255
 e50:	80 e0       	ldi	r24, 0x00	; 0
 e52:	0e 94 38 26 	call	0x4c70	; 0x4c70 <CANSendMessage>
 e56:	81 11       	cpse	r24, r1
 e58:	10 92 22 03 	sts	0x0322, r1	; 0x800322 <sg_bSendAnnouncement>
 e5c:	0e 94 2f 0c 	call	0x185e	; 0x185e <ModuleControllerStateHandle>
 e60:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <sg_bOvercurrentSignal>
 e64:	88 23       	and	r24, r24
 e66:	b1 f0       	breq	.+44     	; 0xe94 <main+0x29e>
 e68:	10 92 17 03 	sts	0x0317, r1	; 0x800317 <sg_bOvercurrentSignal>
 e6c:	13 c0       	rjmp	.+38     	; 0xe94 <main+0x29e>
 e6e:	22 23       	and	r18, r18
 e70:	89 f0       	breq	.+34     	; 0xe94 <main+0x29e>
 e72:	10 92 72 09 	sts	0x0972, r1	; 0x800972 <sg_bFrameStart>
 e76:	0e 94 8a 1b 	call	0x3714	; 0x3714 <CellStringPowerStateMachine>
 e7a:	80 e0       	ldi	r24, 0x00	; 0
 e7c:	0e 94 c7 16 	call	0x2d8e	; 0x2d8e <FrameInit>
 e80:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <sg_eStringPowerState>
 e84:	84 30       	cpi	r24, 0x04	; 4
 e86:	31 f4       	brne	.+12     	; 0xe94 <main+0x29e>
 e88:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <vUARTInitReceive>
 e8c:	0e 94 02 27 	call	0x4e04	; 0x4e04 <vUARTRXReset>
 e90:	0e 94 2f 20 	call	0x405e	; 0x405e <vUARTStarttx>
 e94:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <sg_bADCUpdate>
 e98:	88 23       	and	r24, r24
 e9a:	21 f0       	breq	.+8      	; 0xea4 <main+0x2ae>
 e9c:	10 92 16 03 	sts	0x0316, r1	; 0x800316 <sg_bADCUpdate>
 ea0:	0e 94 22 13 	call	0x2644	; 0x2644 <ModuleCurrentConvertReadings>
 ea4:	0e 94 b3 23 	call	0x4766	; 0x4766 <ADCStartConversion>
 ea8:	2f cf       	rjmp	.-418    	; 0xd08 <main+0x112>

Disassembly of section .text.IsLeapYear:

00004526 <IsLeapYear>:
	return( bResult );
}

// Returns true if u16Year is a leap year
static bool IsLeapYear(uint16_t u16Year)
{
    4526:	9c 01       	movw	r18, r24
	bool bLeapYear = false;
	
	if ((u16Year % 400) == 0)
    4528:	60 e9       	ldi	r22, 0x90	; 144
    452a:	71 e0       	ldi	r23, 0x01	; 1
    452c:	0e 94 04 24 	call	0x4808	; 0x4808 <__udivmodhi4>
    4530:	89 2b       	or	r24, r25
    4532:	69 f0       	breq	.+26     	; 0x454e <IsLeapYear+0x28>
	{
		bLeapYear = true;
	}
	else
	if ((u16Year % 100) == 0)
    4534:	c9 01       	movw	r24, r18
    4536:	64 e6       	ldi	r22, 0x64	; 100
    4538:	70 e0       	ldi	r23, 0x00	; 0
    453a:	0e 94 04 24 	call	0x4808	; 0x4808 <__udivmodhi4>
    453e:	89 2b       	or	r24, r25
    4540:	41 f0       	breq	.+16     	; 0x4552 <IsLeapYear+0x2c>
	{
		// Not a leap year if divisible by 100 but not by 400
	}
	else
	if ((u16Year % 4) == 0)
    4542:	23 70       	andi	r18, 0x03	; 3
    4544:	33 27       	eor	r19, r19
    4546:	23 2b       	or	r18, r19
    4548:	31 f0       	breq	.+12     	; 0x4556 <IsLeapYear+0x30>
}

// Returns true if u16Year is a leap year
static bool IsLeapYear(uint16_t u16Year)
{
	bool bLeapYear = false;
    454a:	80 e0       	ldi	r24, 0x00	; 0
    454c:	08 95       	ret
	
	if ((u16Year % 400) == 0)
	{
		bLeapYear = true;
    454e:	81 e0       	ldi	r24, 0x01	; 1
    4550:	08 95       	ret
}

// Returns true if u16Year is a leap year
static bool IsLeapYear(uint16_t u16Year)
{
	bool bLeapYear = false;
    4552:	80 e0       	ldi	r24, 0x00	; 0
    4554:	08 95       	ret
		// Not a leap year if divisible by 100 but not by 400
	}
	else
	if ((u16Year % 4) == 0)
	{
		bLeapYear = true;
    4556:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return(bLeapYear);
}
    4558:	08 95       	ret

Disassembly of section .text.RTCStartTransaction:

00004340 <RTCStartTransaction>:
}

static bool RTCStartTransaction( uint8_t u8Address, 
								 bool bRead, 
								 bool bAllowUnstick )
{
    4340:	ff 92       	push	r15
    4342:	0f 93       	push	r16
    4344:	1f 93       	push	r17
    4346:	cf 93       	push	r28
    4348:	df 93       	push	r29
    434a:	f8 2e       	mov	r15, r24
    434c:	06 2f       	mov	r16, r22
    434e:	14 2f       	mov	r17, r20
	bool bResult = false;
	uint8_t u8Tries = RTC_MAX_ADDRESS_TRIES;
    4350:	d3 e0       	ldi	r29, 0x03	; 3

static bool RTCStartTransaction( uint8_t u8Address, 
								 bool bRead, 
								 bool bAllowUnstick )
{
	bool bResult = false;
    4352:	c0 e0       	ldi	r28, 0x00	; 0
	uint8_t u8Tries = RTC_MAX_ADDRESS_TRIES;
	
	while( (false == bResult) && u8Tries )
    4354:	0c c0       	rjmp	.+24     	; 0x436e <RTCStartTransaction+0x2e>
	{
		u8Tries--;
    4356:	d1 50       	subi	r29, 0x01	; 1
		
		bResult = I2CStartTransaction( u8Address, bRead );
    4358:	60 2f       	mov	r22, r16
    435a:	8f 2d       	mov	r24, r15
    435c:	0e 94 c8 23 	call	0x4790	; 0x4790 <I2CStartTransaction>
    4360:	c8 2f       	mov	r28, r24
	
		if( false == bAllowUnstick )
    4362:	11 23       	and	r17, r17
    4364:	41 f0       	breq	.+16     	; 0x4376 <RTCStartTransaction+0x36>
		{
			break;
		}
		
		// Unstick and retry on failure
		if( false == bResult )
    4366:	81 11       	cpse	r24, r1
    4368:	02 c0       	rjmp	.+4      	; 0x436e <RTCStartTransaction+0x2e>
		{
			I2CUnstick();
    436a:	0e 94 03 22 	call	0x4406	; 0x4406 <I2CUnstick>
								 bool bAllowUnstick )
{
	bool bResult = false;
	uint8_t u8Tries = RTC_MAX_ADDRESS_TRIES;
	
	while( (false == bResult) && u8Tries )
    436e:	c1 11       	cpse	r28, r1
    4370:	02 c0       	rjmp	.+4      	; 0x4376 <RTCStartTransaction+0x36>
    4372:	d1 11       	cpse	r29, r1
    4374:	f0 cf       	rjmp	.-32     	; 0x4356 <RTCStartTransaction+0x16>
			I2CUnstick();
		}
	}
	
	return( bResult );
}
    4376:	8c 2f       	mov	r24, r28
    4378:	df 91       	pop	r29
    437a:	cf 91       	pop	r28
    437c:	1f 91       	pop	r17
    437e:	0f 91       	pop	r16
    4380:	ff 90       	pop	r15
    4382:	08 95       	ret

Disassembly of section .text.StructTMToHW:

0000410a <StructTMToHW>:
}

// Converts struct tm to SMCP7940NTime structure
static void StructTMToHW(struct tm *psTimeTM,
						 SMCP7940NTime *psTime)
{
    410a:	cf 93       	push	r28
    410c:	df 93       	push	r29
    410e:	dc 01       	movw	r26, r24
    4110:	fb 01       	movw	r30, r22
	memset((void *) psTime, 0, sizeof(*psTime));
    4112:	87 e0       	ldi	r24, 0x07	; 7
    4114:	eb 01       	movw	r28, r22
    4116:	19 92       	st	Y+, r1
    4118:	8a 95       	dec	r24
    411a:	e9 f7       	brne	.-6      	; 0x4116 <StructTMToHW+0xc>
	
	psTime->u8Seconds = psTimeTM->tm_sec;
    411c:	8c 91       	ld	r24, X
    411e:	80 83       	st	Z, r24
	psTime->u8Minutes = psTimeTM->tm_min;
    4120:	12 96       	adiw	r26, 0x02	; 2
    4122:	8c 91       	ld	r24, X
    4124:	12 97       	sbiw	r26, 0x02	; 2
    4126:	81 83       	std	Z+1, r24	; 0x01
	psTime->u8Hours = psTimeTM->tm_hour;
    4128:	14 96       	adiw	r26, 0x04	; 4
    412a:	8c 91       	ld	r24, X
    412c:	14 97       	sbiw	r26, 0x04	; 4
    412e:	82 83       	std	Z+2, r24	; 0x02
	psTime->u8Day = psTimeTM->tm_mday;
    4130:	16 96       	adiw	r26, 0x06	; 6
    4132:	8c 91       	ld	r24, X
    4134:	16 97       	sbiw	r26, 0x06	; 6
    4136:	84 83       	std	Z+4, r24	; 0x04
	psTime->u8Month = psTimeTM->tm_mon;
    4138:	18 96       	adiw	r26, 0x08	; 8
    413a:	8c 91       	ld	r24, X
    413c:	18 97       	sbiw	r26, 0x08	; 8
    413e:	85 83       	std	Z+5, r24	; 0x05
	
	if (psTimeTM->tm_year > (2099-1900))
    4140:	1a 96       	adiw	r26, 0x0a	; 10
    4142:	8d 91       	ld	r24, X+
    4144:	9c 91       	ld	r25, X
    4146:	1b 97       	sbiw	r26, 0x0b	; 11
    4148:	88 3c       	cpi	r24, 0xC8	; 200
    414a:	91 05       	cpc	r25, r1
    414c:	1c f0       	brlt	.+6      	; 0x4154 <StructTMToHW+0x4a>
	{
		psTime->u8Year = psTimeTM->tm_year - 2100;
    414e:	84 53       	subi	r24, 0x34	; 52
    4150:	86 83       	std	Z+6, r24	; 0x06
    4152:	02 c0       	rjmp	.+4      	; 0x4158 <StructTMToHW+0x4e>
	}
	else
	{
		psTime->u8Year = psTimeTM->tm_year - 2000;
    4154:	80 5d       	subi	r24, 0xD0	; 208
    4156:	86 83       	std	Z+6, r24	; 0x06
	}
	
}
    4158:	df 91       	pop	r29
    415a:	cf 91       	pop	r28
    415c:	08 95       	ret

Disassembly of section .text.HWToStructTM:

00003a26 <HWToStructTM>:
}

// Converts an SMCP7940NTime structure to struct tm
static void HWToStructTM(SMCP7940NTime *psTime,
						 struct tm *psTimeTM)
{
    3a26:	cf 93       	push	r28
    3a28:	df 93       	push	r29
    3a2a:	dc 01       	movw	r26, r24
    3a2c:	fb 01       	movw	r30, r22
	// At this point, the time is in STime and we should
	// turn that in to time_t
	memset((void *) psTimeTM, 0, sizeof(*psTimeTM));
    3a2e:	89 e1       	ldi	r24, 0x19	; 25
    3a30:	eb 01       	movw	r28, r22
    3a32:	19 92       	st	Y+, r1
    3a34:	8a 95       	dec	r24
    3a36:	e9 f7       	brne	.-6      	; 0x3a32 <HWToStructTM+0xc>
	
	psTimeTM->tm_sec = psTime->u8Seconds;
    3a38:	8c 91       	ld	r24, X
    3a3a:	90 e0       	ldi	r25, 0x00	; 0
    3a3c:	91 83       	std	Z+1, r25	; 0x01
    3a3e:	80 83       	st	Z, r24
	psTimeTM->tm_min = psTime->u8Minutes;
    3a40:	11 96       	adiw	r26, 0x01	; 1
    3a42:	8c 91       	ld	r24, X
    3a44:	11 97       	sbiw	r26, 0x01	; 1
    3a46:	90 e0       	ldi	r25, 0x00	; 0
    3a48:	93 83       	std	Z+3, r25	; 0x03
    3a4a:	82 83       	std	Z+2, r24	; 0x02
	psTimeTM->tm_hour = psTime->u8Hours;
    3a4c:	12 96       	adiw	r26, 0x02	; 2
    3a4e:	8c 91       	ld	r24, X
    3a50:	12 97       	sbiw	r26, 0x02	; 2
    3a52:	90 e0       	ldi	r25, 0x00	; 0
    3a54:	95 83       	std	Z+5, r25	; 0x05
    3a56:	84 83       	std	Z+4, r24	; 0x04
	psTimeTM->tm_mday = psTime->u8Day;
    3a58:	14 96       	adiw	r26, 0x04	; 4
    3a5a:	8c 91       	ld	r24, X
    3a5c:	14 97       	sbiw	r26, 0x04	; 4
    3a5e:	90 e0       	ldi	r25, 0x00	; 0
    3a60:	97 83       	std	Z+7, r25	; 0x07
    3a62:	86 83       	std	Z+6, r24	; 0x06
	psTimeTM->tm_mon = psTime->u8Month - 1;
    3a64:	15 96       	adiw	r26, 0x05	; 5
    3a66:	8c 91       	ld	r24, X
    3a68:	15 97       	sbiw	r26, 0x05	; 5
    3a6a:	90 e0       	ldi	r25, 0x00	; 0
    3a6c:	01 97       	sbiw	r24, 0x01	; 1
    3a6e:	91 87       	std	Z+9, r25	; 0x09
    3a70:	80 87       	std	Z+8, r24	; 0x08
	
	if (psTime->u8Year < YEAR_ROLLOVER_CUTOFF)
    3a72:	16 96       	adiw	r26, 0x06	; 6
    3a74:	8c 91       	ld	r24, X
    3a76:	84 31       	cpi	r24, 0x14	; 20
    3a78:	30 f4       	brcc	.+12     	; 0x3a86 <HWToStructTM+0x60>
	{
		psTimeTM->tm_year = 2100 + psTime->u8Year;
    3a7a:	90 e0       	ldi	r25, 0x00	; 0
    3a7c:	8c 5c       	subi	r24, 0xCC	; 204
    3a7e:	97 4f       	sbci	r25, 0xF7	; 247
    3a80:	93 87       	std	Z+11, r25	; 0x0b
    3a82:	82 87       	std	Z+10, r24	; 0x0a
    3a84:	05 c0       	rjmp	.+10     	; 0x3a90 <HWToStructTM+0x6a>
	}
	else
	{
		psTimeTM->tm_year = 2000 + psTime->u8Year;
    3a86:	90 e0       	ldi	r25, 0x00	; 0
    3a88:	80 53       	subi	r24, 0x30	; 48
    3a8a:	98 4f       	sbci	r25, 0xF8	; 248
    3a8c:	93 87       	std	Z+11, r25	; 0x0b
    3a8e:	82 87       	std	Z+10, r24	; 0x0a
	}	
	
	psTimeTM->tm_year -= 1900;
    3a90:	82 85       	ldd	r24, Z+10	; 0x0a
    3a92:	93 85       	ldd	r25, Z+11	; 0x0b
    3a94:	8c 56       	subi	r24, 0x6C	; 108
    3a96:	97 40       	sbci	r25, 0x07	; 7
    3a98:	93 87       	std	Z+11, r25	; 0x0b
    3a9a:	82 87       	std	Z+10, r24	; 0x0a
}
    3a9c:	df 91       	pop	r29
    3a9e:	cf 91       	pop	r28
    3aa0:	08 95       	ret

Disassembly of section .text.__vector_10:

0000379c <__vector_10>:
// # Of seconds since January 1, 1970
static volatile uint64_t sg_u64Time;

// Called once per second on rev 1 and newer hardware
ISR(INT3_vect, ISR_NOBLOCK)
{
    379c:	78 94       	sei
    379e:	1f 92       	push	r1
    37a0:	0f 92       	push	r0
    37a2:	0f b6       	in	r0, 0x3f	; 63
    37a4:	0f 92       	push	r0
    37a6:	11 24       	eor	r1, r1
    37a8:	2f 93       	push	r18
    37aa:	3f 93       	push	r19
    37ac:	4f 93       	push	r20
    37ae:	5f 93       	push	r21
    37b0:	6f 93       	push	r22
    37b2:	7f 93       	push	r23
    37b4:	8f 93       	push	r24
    37b6:	9f 93       	push	r25
    37b8:	af 93       	push	r26
	EIFR |= (1 << INTF3);
    37ba:	8c b3       	in	r24, 0x1c	; 28
    37bc:	88 60       	ori	r24, 0x08	; 8
    37be:	8c bb       	out	0x1c, r24	; 28
	sg_u64Time++;
    37c0:	20 91 45 09 	lds	r18, 0x0945	; 0x800945 <sg_u64Time>
    37c4:	30 91 46 09 	lds	r19, 0x0946	; 0x800946 <sg_u64Time+0x1>
    37c8:	40 91 47 09 	lds	r20, 0x0947	; 0x800947 <sg_u64Time+0x2>
    37cc:	50 91 48 09 	lds	r21, 0x0948	; 0x800948 <sg_u64Time+0x3>
    37d0:	60 91 49 09 	lds	r22, 0x0949	; 0x800949 <sg_u64Time+0x4>
    37d4:	70 91 4a 09 	lds	r23, 0x094A	; 0x80094a <sg_u64Time+0x5>
    37d8:	80 91 4b 09 	lds	r24, 0x094B	; 0x80094b <sg_u64Time+0x6>
    37dc:	90 91 4c 09 	lds	r25, 0x094C	; 0x80094c <sg_u64Time+0x7>
    37e0:	a1 e0       	ldi	r26, 0x01	; 1
    37e2:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <__adddi3_s8>
    37e6:	20 93 45 09 	sts	0x0945, r18	; 0x800945 <sg_u64Time>
    37ea:	30 93 46 09 	sts	0x0946, r19	; 0x800946 <sg_u64Time+0x1>
    37ee:	40 93 47 09 	sts	0x0947, r20	; 0x800947 <sg_u64Time+0x2>
    37f2:	50 93 48 09 	sts	0x0948, r21	; 0x800948 <sg_u64Time+0x3>
    37f6:	60 93 49 09 	sts	0x0949, r22	; 0x800949 <sg_u64Time+0x4>
    37fa:	70 93 4a 09 	sts	0x094A, r23	; 0x80094a <sg_u64Time+0x5>
    37fe:	80 93 4b 09 	sts	0x094B, r24	; 0x80094b <sg_u64Time+0x6>
    3802:	90 93 4c 09 	sts	0x094C, r25	; 0x80094c <sg_u64Time+0x7>
}
    3806:	af 91       	pop	r26
    3808:	9f 91       	pop	r25
    380a:	8f 91       	pop	r24
    380c:	7f 91       	pop	r23
    380e:	6f 91       	pop	r22
    3810:	5f 91       	pop	r21
    3812:	4f 91       	pop	r20
    3814:	3f 91       	pop	r19
    3816:	2f 91       	pop	r18
    3818:	0f 90       	pop	r0
    381a:	0f be       	out	0x3f, r0	; 63
    381c:	0f 90       	pop	r0
    381e:	1f 90       	pop	r1
    3820:	18 95       	reti

Disassembly of section .text.RTCReadRegisters:

000039a8 <RTCReadRegisters>:
}

bool RTCReadRegisters( uint8_t u8RegisterAddr, 
					   uint8_t* pu8Data, 
					   uint8_t u8Length )
{
    39a8:	ff 92       	push	r15
    39aa:	0f 93       	push	r16
    39ac:	1f 93       	push	r17
    39ae:	cf 93       	push	r28
    39b0:	df 93       	push	r29
    39b2:	f8 2e       	mov	r15, r24
    39b4:	8b 01       	movw	r16, r22
    39b6:	c4 2f       	mov	r28, r20
	bool bResult;
	
	MBASSERT( u8Length >= 1 );
    39b8:	41 11       	cpse	r20, r1
    39ba:	07 c0       	rjmp	.+14     	; 0x39ca <RTCReadRegisters+0x22>
    39bc:	4f e5       	ldi	r20, 0x5F	; 95
    39be:	50 e0       	ldi	r21, 0x00	; 0
    39c0:	66 ef       	ldi	r22, 0xF6	; 246
    39c2:	72 e0       	ldi	r23, 0x02	; 2
    39c4:	80 e0       	ldi	r24, 0x00	; 0
    39c6:	0e 94 87 23 	call	0x470e	; 0x470e <PlatformAssert>
	
	// First send device address and write register address
	bResult = RTCStartTransaction( RTC_ADDRESS, false, true );
    39ca:	41 e0       	ldi	r20, 0x01	; 1
    39cc:	60 e0       	ldi	r22, 0x00	; 0
    39ce:	8e ed       	ldi	r24, 0xDE	; 222
    39d0:	0e 94 a0 21 	call	0x4340	; 0x4340 <RTCStartTransaction>
    39d4:	d8 2f       	mov	r29, r24
	
	// Couldn't get an ACK?  Give up now
	if( false == bResult )
    39d6:	88 23       	and	r24, r24
    39d8:	e9 f0       	breq	.+58     	; 0x3a14 <RTCReadRegisters+0x6c>
	{
		goto errorExit;
	}
	
	// Send the register address
	bResult = I2CTxByte( u8RegisterAddr );
    39da:	8f 2d       	mov	r24, r15
    39dc:	0e 94 7c 1e 	call	0x3cf8	; 0x3cf8 <I2CTxByte>
    39e0:	d8 2f       	mov	r29, r24
	
	if( false == bResult )
    39e2:	88 23       	and	r24, r24
    39e4:	b9 f0       	breq	.+46     	; 0x3a14 <RTCReadRegisters+0x6c>
	{
		goto errorExit;
	}
	
	// Send repeated start with read
	bResult = RTCStartTransaction( RTC_ADDRESS, true, false );
    39e6:	40 e0       	ldi	r20, 0x00	; 0
    39e8:	61 e0       	ldi	r22, 0x01	; 1
    39ea:	8e ed       	ldi	r24, 0xDE	; 222
    39ec:	0e 94 a0 21 	call	0x4340	; 0x4340 <RTCStartTransaction>
    39f0:	d8 2f       	mov	r29, r24
	
	// Couldn't get an ACK?  Give up now
	if( false == bResult )
    39f2:	81 11       	cpse	r24, r1
    39f4:	08 c0       	rjmp	.+16     	; 0x3a06 <RTCReadRegisters+0x5e>
    39f6:	0e c0       	rjmp	.+28     	; 0x3a14 <RTCReadRegisters+0x6c>
		goto errorExit;
	}
	
	while( u8Length >= 2 )
	{
		*pu8Data = I2CRxByte( true );
    39f8:	81 e0       	ldi	r24, 0x01	; 1
    39fa:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <I2CRxByte>
    39fe:	f8 01       	movw	r30, r16
    3a00:	81 93       	st	Z+, r24
    3a02:	8f 01       	movw	r16, r30
		pu8Data++;
		u8Length--;
    3a04:	c1 50       	subi	r28, 0x01	; 1
	if( false == bResult )
	{
		goto errorExit;
	}
	
	while( u8Length >= 2 )
    3a06:	c2 30       	cpi	r28, 0x02	; 2
    3a08:	b8 f7       	brcc	.-18     	; 0x39f8 <RTCReadRegisters+0x50>
		pu8Data++;
		u8Length--;
	}
	
	// Final read with NACK
	*pu8Data = I2CRxByte( false );
    3a0a:	80 e0       	ldi	r24, 0x00	; 0
    3a0c:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <I2CRxByte>
    3a10:	f8 01       	movw	r30, r16
    3a12:	80 83       	st	Z, r24
	
errorExit:

	I2CStop();
    3a14:	0e 94 2c 24 	call	0x4858	; 0x4858 <I2CStop>
	
	return(bResult);
}
    3a18:	8d 2f       	mov	r24, r29
    3a1a:	df 91       	pop	r29
    3a1c:	cf 91       	pop	r28
    3a1e:	1f 91       	pop	r17
    3a20:	0f 91       	pop	r16
    3a22:	ff 90       	pop	r15
    3a24:	08 95       	ret

Disassembly of section .text.RTCReadHW:

0000293e <RTCReadHW>:
	sei();
	
	psSrc = gmtime((const time_t *) &u64Time);
	memcpy((void *) psTime, (void *) psSrc, sizeof(*psTime));
	return(true);
}
    293e:	cf 93       	push	r28
    2940:	df 93       	push	r29
    2942:	ec 01       	movw	r28, r24
    2944:	47 e0       	ldi	r20, 0x07	; 7
    2946:	bc 01       	movw	r22, r24
    2948:	80 e0       	ldi	r24, 0x00	; 0
    294a:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <RTCReadRegisters>
    294e:	88 23       	and	r24, r24
    2950:	09 f4       	brne	.+2      	; 0x2954 <RTCReadHW+0x16>
    2952:	63 c0       	rjmp	.+198    	; 0x2a1a <RTCReadHW+0xdc>
    2954:	98 81       	ld	r25, Y
    2956:	29 2f       	mov	r18, r25
    2958:	22 95       	swap	r18
    295a:	2f 70       	andi	r18, 0x0F	; 15
    295c:	27 70       	andi	r18, 0x07	; 7
    295e:	22 0f       	add	r18, r18
    2960:	32 2f       	mov	r19, r18
    2962:	33 0f       	add	r19, r19
    2964:	33 0f       	add	r19, r19
    2966:	23 0f       	add	r18, r19
    2968:	9f 70       	andi	r25, 0x0F	; 15
    296a:	92 0f       	add	r25, r18
    296c:	98 83       	st	Y, r25
    296e:	99 81       	ldd	r25, Y+1	; 0x01
    2970:	29 2f       	mov	r18, r25
    2972:	22 95       	swap	r18
    2974:	2f 70       	andi	r18, 0x0F	; 15
    2976:	27 70       	andi	r18, 0x07	; 7
    2978:	22 0f       	add	r18, r18
    297a:	32 2f       	mov	r19, r18
    297c:	33 0f       	add	r19, r19
    297e:	33 0f       	add	r19, r19
    2980:	23 0f       	add	r18, r19
    2982:	9f 70       	andi	r25, 0x0F	; 15
    2984:	92 0f       	add	r25, r18
    2986:	99 83       	std	Y+1, r25	; 0x01
    2988:	9a 81       	ldd	r25, Y+2	; 0x02
    298a:	96 ff       	sbrs	r25, 6
    298c:	11 c0       	rjmp	.+34     	; 0x29b0 <RTCReadHW+0x72>
    298e:	94 fb       	bst	r25, 4
    2990:	22 27       	eor	r18, r18
    2992:	20 f9       	bld	r18, 0
    2994:	22 0f       	add	r18, r18
    2996:	32 2f       	mov	r19, r18
    2998:	33 0f       	add	r19, r19
    299a:	33 0f       	add	r19, r19
    299c:	23 0f       	add	r18, r19
    299e:	39 2f       	mov	r19, r25
    29a0:	3f 70       	andi	r19, 0x0F	; 15
    29a2:	23 0f       	add	r18, r19
    29a4:	2a 83       	std	Y+2, r18	; 0x02
    29a6:	95 ff       	sbrs	r25, 5
    29a8:	0f c0       	rjmp	.+30     	; 0x29c8 <RTCReadHW+0x8a>
    29aa:	24 5f       	subi	r18, 0xF4	; 244
    29ac:	2a 83       	std	Y+2, r18	; 0x02
    29ae:	0c c0       	rjmp	.+24     	; 0x29c8 <RTCReadHW+0x8a>
    29b0:	29 2f       	mov	r18, r25
    29b2:	22 95       	swap	r18
    29b4:	2f 70       	andi	r18, 0x0F	; 15
    29b6:	23 70       	andi	r18, 0x03	; 3
    29b8:	22 0f       	add	r18, r18
    29ba:	32 2f       	mov	r19, r18
    29bc:	33 0f       	add	r19, r19
    29be:	33 0f       	add	r19, r19
    29c0:	23 0f       	add	r18, r19
    29c2:	9f 70       	andi	r25, 0x0F	; 15
    29c4:	92 0f       	add	r25, r18
    29c6:	9a 83       	std	Y+2, r25	; 0x02
    29c8:	9b 81       	ldd	r25, Y+3	; 0x03
    29ca:	97 70       	andi	r25, 0x07	; 7
    29cc:	9b 83       	std	Y+3, r25	; 0x03
    29ce:	9c 81       	ldd	r25, Y+4	; 0x04
    29d0:	29 2f       	mov	r18, r25
    29d2:	22 95       	swap	r18
    29d4:	2f 70       	andi	r18, 0x0F	; 15
    29d6:	23 70       	andi	r18, 0x03	; 3
    29d8:	22 0f       	add	r18, r18
    29da:	32 2f       	mov	r19, r18
    29dc:	33 0f       	add	r19, r19
    29de:	33 0f       	add	r19, r19
    29e0:	23 0f       	add	r18, r19
    29e2:	9f 70       	andi	r25, 0x0F	; 15
    29e4:	92 0f       	add	r25, r18
    29e6:	9c 83       	std	Y+4, r25	; 0x04
    29e8:	9d 81       	ldd	r25, Y+5	; 0x05
    29ea:	94 fb       	bst	r25, 4
    29ec:	22 27       	eor	r18, r18
    29ee:	20 f9       	bld	r18, 0
    29f0:	22 0f       	add	r18, r18
    29f2:	32 2f       	mov	r19, r18
    29f4:	33 0f       	add	r19, r19
    29f6:	33 0f       	add	r19, r19
    29f8:	23 0f       	add	r18, r19
    29fa:	9f 70       	andi	r25, 0x0F	; 15
    29fc:	92 0f       	add	r25, r18
    29fe:	9d 83       	std	Y+5, r25	; 0x05
    2a00:	9e 81       	ldd	r25, Y+6	; 0x06
    2a02:	29 2f       	mov	r18, r25
    2a04:	22 95       	swap	r18
    2a06:	2f 70       	andi	r18, 0x0F	; 15
    2a08:	22 0f       	add	r18, r18
    2a0a:	32 2f       	mov	r19, r18
    2a0c:	33 0f       	add	r19, r19
    2a0e:	33 0f       	add	r19, r19
    2a10:	23 0f       	add	r18, r19
    2a12:	9f 70       	andi	r25, 0x0F	; 15
    2a14:	92 0f       	add	r25, r18
    2a16:	9c 5e       	subi	r25, 0xEC	; 236
    2a18:	9e 83       	std	Y+6, r25	; 0x06
    2a1a:	df 91       	pop	r29
    2a1c:	cf 91       	pop	r28
    2a1e:	08 95       	ret

Disassembly of section .text.RTCWriteRegisters:

00003d62 <RTCWriteRegisters>:
}

bool RTCWriteRegisters( uint8_t u8RegisterAddr,
						uint8_t* pu8Data, 
						uint8_t u8Length )
{
    3d62:	ff 92       	push	r15
    3d64:	0f 93       	push	r16
    3d66:	1f 93       	push	r17
    3d68:	cf 93       	push	r28
    3d6a:	df 93       	push	r29
    3d6c:	f8 2e       	mov	r15, r24
    3d6e:	8b 01       	movw	r16, r22
    3d70:	c4 2f       	mov	r28, r20
	bool bResult;
	
	MBASSERT( u8Length >= 1 );
    3d72:	41 11       	cpse	r20, r1
    3d74:	07 c0       	rjmp	.+14     	; 0x3d84 <RTCWriteRegisters+0x22>
    3d76:	42 e9       	ldi	r20, 0x92	; 146
    3d78:	50 e0       	ldi	r21, 0x00	; 0
    3d7a:	66 ef       	ldi	r22, 0xF6	; 246
    3d7c:	72 e0       	ldi	r23, 0x02	; 2
    3d7e:	80 e0       	ldi	r24, 0x00	; 0
    3d80:	0e 94 87 23 	call	0x470e	; 0x470e <PlatformAssert>
	
	// First send device address and write register address
	bResult = RTCStartTransaction( RTC_ADDRESS, false, true );
    3d84:	41 e0       	ldi	r20, 0x01	; 1
    3d86:	60 e0       	ldi	r22, 0x00	; 0
    3d88:	8e ed       	ldi	r24, 0xDE	; 222
    3d8a:	0e 94 a0 21 	call	0x4340	; 0x4340 <RTCStartTransaction>
    3d8e:	d8 2f       	mov	r29, r24
	
	// Couldn't get an ACK?  Give up now
	if( false == bResult )
    3d90:	88 23       	and	r24, r24
    3d92:	99 f0       	breq	.+38     	; 0x3dba <RTCWriteRegisters+0x58>
	{
		goto errorExit;
	}
	
	// Send the register address
	bResult = I2CTxByte( u8RegisterAddr );
    3d94:	8f 2d       	mov	r24, r15
    3d96:	0e 94 7c 1e 	call	0x3cf8	; 0x3cf8 <I2CTxByte>
    3d9a:	d8 2f       	mov	r29, r24
	
	if( false == bResult )
    3d9c:	81 11       	cpse	r24, r1
    3d9e:	0b c0       	rjmp	.+22     	; 0x3db6 <RTCWriteRegisters+0x54>
    3da0:	0c c0       	rjmp	.+24     	; 0x3dba <RTCWriteRegisters+0x58>
	}
	
	// Now immediately send the sequential data
	while( u8Length )
	{
		bResult = I2CTxByte( *pu8Data );
    3da2:	f8 01       	movw	r30, r16
    3da4:	80 81       	ld	r24, Z
    3da6:	0e 94 7c 1e 	call	0x3cf8	; 0x3cf8 <I2CTxByte>
    3daa:	d8 2f       	mov	r29, r24
		
		if( false == bResult )
    3dac:	88 23       	and	r24, r24
    3dae:	29 f0       	breq	.+10     	; 0x3dba <RTCWriteRegisters+0x58>
		{
			goto errorExit;
		}
		
		pu8Data++;
    3db0:	0f 5f       	subi	r16, 0xFF	; 255
    3db2:	1f 4f       	sbci	r17, 0xFF	; 255
		u8Length--;
    3db4:	c1 50       	subi	r28, 0x01	; 1
	{
		goto errorExit;
	}
	
	// Now immediately send the sequential data
	while( u8Length )
    3db6:	c1 11       	cpse	r28, r1
    3db8:	f4 cf       	rjmp	.-24     	; 0x3da2 <RTCWriteRegisters+0x40>
		u8Length--;
	}
	
errorExit:

	I2CStop();
    3dba:	0e 94 2c 24 	call	0x4858	; 0x4858 <I2CStop>
	
	return( bResult );
}
    3dbe:	8d 2f       	mov	r24, r29
    3dc0:	df 91       	pop	r29
    3dc2:	cf 91       	pop	r28
    3dc4:	1f 91       	pop	r17
    3dc6:	0f 91       	pop	r16
    3dc8:	ff 90       	pop	r15
    3dca:	08 95       	ret

Disassembly of section .text.RTCWriteHW:

00002748 <RTCWriteHW>:
	sei();
	
	psSrc = gmtime((const time_t *) &u64Time);
	memcpy((void *) psTime, (void *) psSrc, sizeof(*psTime));
	return(true);
}
    2748:	fc 01       	movw	r30, r24
    274a:	20 81       	ld	r18, Z
    274c:	8d ec       	ldi	r24, 0xCD	; 205
    274e:	28 9f       	mul	r18, r24
    2750:	91 2d       	mov	r25, r1
    2752:	11 24       	eor	r1, r1
    2754:	96 95       	lsr	r25
    2756:	96 95       	lsr	r25
    2758:	96 95       	lsr	r25
    275a:	30 e1       	ldi	r19, 0x10	; 16
    275c:	93 9f       	mul	r25, r19
    275e:	a0 01       	movw	r20, r0
    2760:	11 24       	eor	r1, r1
    2762:	99 0f       	add	r25, r25
    2764:	39 2f       	mov	r19, r25
    2766:	33 0f       	add	r19, r19
    2768:	33 0f       	add	r19, r19
    276a:	93 0f       	add	r25, r19
    276c:	29 1b       	sub	r18, r25
    276e:	24 2b       	or	r18, r20
    2770:	20 83       	st	Z, r18
    2772:	21 81       	ldd	r18, Z+1	; 0x01
    2774:	28 9f       	mul	r18, r24
    2776:	91 2d       	mov	r25, r1
    2778:	11 24       	eor	r1, r1
    277a:	96 95       	lsr	r25
    277c:	96 95       	lsr	r25
    277e:	96 95       	lsr	r25
    2780:	30 e1       	ldi	r19, 0x10	; 16
    2782:	93 9f       	mul	r25, r19
    2784:	a0 01       	movw	r20, r0
    2786:	11 24       	eor	r1, r1
    2788:	99 0f       	add	r25, r25
    278a:	39 2f       	mov	r19, r25
    278c:	33 0f       	add	r19, r19
    278e:	33 0f       	add	r19, r19
    2790:	93 0f       	add	r25, r19
    2792:	29 1b       	sub	r18, r25
    2794:	24 2b       	or	r18, r20
    2796:	21 83       	std	Z+1, r18	; 0x01
    2798:	42 81       	ldd	r20, Z+2	; 0x02
    279a:	48 9f       	mul	r20, r24
    279c:	91 2d       	mov	r25, r1
    279e:	11 24       	eor	r1, r1
    27a0:	96 95       	lsr	r25
    27a2:	96 95       	lsr	r25
    27a4:	96 95       	lsr	r25
    27a6:	50 e1       	ldi	r21, 0x10	; 16
    27a8:	95 9f       	mul	r25, r21
    27aa:	90 01       	movw	r18, r0
    27ac:	11 24       	eor	r1, r1
    27ae:	99 0f       	add	r25, r25
    27b0:	39 2f       	mov	r19, r25
    27b2:	33 0f       	add	r19, r19
    27b4:	33 0f       	add	r19, r19
    27b6:	93 0f       	add	r25, r19
    27b8:	49 1b       	sub	r20, r25
    27ba:	24 2b       	or	r18, r20
    27bc:	2f 7b       	andi	r18, 0xBF	; 191
    27be:	22 83       	std	Z+2, r18	; 0x02
    27c0:	93 81       	ldd	r25, Z+3	; 0x03
    27c2:	97 70       	andi	r25, 0x07	; 7
    27c4:	98 60       	ori	r25, 0x08	; 8
    27c6:	93 83       	std	Z+3, r25	; 0x03
    27c8:	24 81       	ldd	r18, Z+4	; 0x04
    27ca:	28 9f       	mul	r18, r24
    27cc:	91 2d       	mov	r25, r1
    27ce:	11 24       	eor	r1, r1
    27d0:	96 95       	lsr	r25
    27d2:	96 95       	lsr	r25
    27d4:	96 95       	lsr	r25
    27d6:	30 e1       	ldi	r19, 0x10	; 16
    27d8:	93 9f       	mul	r25, r19
    27da:	a0 01       	movw	r20, r0
    27dc:	11 24       	eor	r1, r1
    27de:	99 0f       	add	r25, r25
    27e0:	39 2f       	mov	r19, r25
    27e2:	33 0f       	add	r19, r19
    27e4:	33 0f       	add	r19, r19
    27e6:	93 0f       	add	r25, r19
    27e8:	29 1b       	sub	r18, r25
    27ea:	24 2b       	or	r18, r20
    27ec:	24 83       	std	Z+4, r18	; 0x04
    27ee:	25 81       	ldd	r18, Z+5	; 0x05
    27f0:	28 9f       	mul	r18, r24
    27f2:	91 2d       	mov	r25, r1
    27f4:	11 24       	eor	r1, r1
    27f6:	96 95       	lsr	r25
    27f8:	96 95       	lsr	r25
    27fa:	96 95       	lsr	r25
    27fc:	30 e1       	ldi	r19, 0x10	; 16
    27fe:	93 9f       	mul	r25, r19
    2800:	a0 01       	movw	r20, r0
    2802:	11 24       	eor	r1, r1
    2804:	99 0f       	add	r25, r25
    2806:	39 2f       	mov	r19, r25
    2808:	33 0f       	add	r19, r19
    280a:	33 0f       	add	r19, r19
    280c:	93 0f       	add	r25, r19
    280e:	29 1b       	sub	r18, r25
    2810:	24 2b       	or	r18, r20
    2812:	25 83       	std	Z+5, r18	; 0x05
    2814:	96 81       	ldd	r25, Z+6	; 0x06
    2816:	98 9f       	mul	r25, r24
    2818:	81 2d       	mov	r24, r1
    281a:	11 24       	eor	r1, r1
    281c:	86 95       	lsr	r24
    281e:	86 95       	lsr	r24
    2820:	86 95       	lsr	r24
    2822:	40 e1       	ldi	r20, 0x10	; 16
    2824:	84 9f       	mul	r24, r20
    2826:	90 01       	movw	r18, r0
    2828:	11 24       	eor	r1, r1
    282a:	88 0f       	add	r24, r24
    282c:	38 2f       	mov	r19, r24
    282e:	33 0f       	add	r19, r19
    2830:	33 0f       	add	r19, r19
    2832:	83 0f       	add	r24, r19
    2834:	98 1b       	sub	r25, r24
    2836:	92 2b       	or	r25, r18
    2838:	96 83       	std	Z+6, r25	; 0x06
    283a:	47 e0       	ldi	r20, 0x07	; 7
    283c:	bf 01       	movw	r22, r30
    283e:	80 e0       	ldi	r24, 0x00	; 0
    2840:	0e 94 b1 1e 	call	0x3d62	; 0x3d62 <RTCWriteRegisters>
    2844:	08 95       	ret

Disassembly of section .text.RTCSetTime:

00002f22 <RTCSetTime>:

// This sets the RTC to the specific time passed in. True is returned
// if it's 
bool RTCSetTime(uint64_t u64Timet)
{
    2f22:	0f 93       	push	r16
    2f24:	1f 93       	push	r17
    2f26:	cf 93       	push	r28
    2f28:	df 93       	push	r29
    2f2a:	cd b7       	in	r28, 0x3d	; 61
    2f2c:	de b7       	in	r29, 0x3e	; 62
    2f2e:	a8 97       	sbiw	r28, 0x28	; 40
    2f30:	0f b6       	in	r0, 0x3f	; 63
    2f32:	f8 94       	cli
    2f34:	de bf       	out	0x3e, r29	; 62
    2f36:	0f be       	out	0x3f, r0	; 63
    2f38:	cd bf       	out	0x3d, r28	; 61
    2f3a:	29 a3       	std	Y+33, r18	; 0x21
    2f3c:	3a a3       	std	Y+34, r19	; 0x22
    2f3e:	4b a3       	std	Y+35, r20	; 0x23
    2f40:	5c a3       	std	Y+36, r21	; 0x24
    2f42:	6d a3       	std	Y+37, r22	; 0x25
    2f44:	7e a3       	std	Y+38, r23	; 0x26
    2f46:	8f a3       	std	Y+39, r24	; 0x27
    2f48:	98 a7       	std	Y+40, r25	; 0x28
	struct tm sTime;
	struct tm *psTime;
	SMCP7940NTime sTimeHW;

	// Convert to GMTime
	memset((void *) &sTime, 0, sizeof(sTime));
    2f4a:	fe 01       	movw	r30, r28
    2f4c:	31 96       	adiw	r30, 0x01	; 1
    2f4e:	89 e1       	ldi	r24, 0x19	; 25
    2f50:	df 01       	movw	r26, r30
    2f52:	1d 92       	st	X+, r1
    2f54:	8a 95       	dec	r24
    2f56:	e9 f7       	brne	.-6      	; 0x2f52 <RTCSetTime+0x30>
	psTime = gmtime((const time_t *) &u64Timet);
    2f58:	be 01       	movw	r22, r28
    2f5a:	6f 5d       	subi	r22, 0xDF	; 223
    2f5c:	7f 4f       	sbci	r23, 0xFF	; 255
    2f5e:	80 e8       	ldi	r24, 0x80	; 128
    2f60:	0e 94 07 27 	call	0x4e0e	; 0x4e0e <gmtime>
    2f64:	8c 01       	movw	r16, r24
	MBASSERT(psTime);
    2f66:	89 2b       	or	r24, r25
    2f68:	39 f4       	brne	.+14     	; 0x2f78 <RTCSetTime+0x56>
    2f6a:	42 e8       	ldi	r20, 0x82	; 130
    2f6c:	51 e0       	ldi	r21, 0x01	; 1
    2f6e:	66 ef       	ldi	r22, 0xF6	; 246
    2f70:	72 e0       	ldi	r23, 0x02	; 2
    2f72:	80 e0       	ldi	r24, 0x00	; 0
    2f74:	0e 94 87 23 	call	0x470e	; 0x470e <PlatformAssert>
	memcpy((void *) &sTime, (void *) psTime, sizeof(sTime));
    2f78:	a8 01       	movw	r20, r16
    2f7a:	60 e8       	ldi	r22, 0x80	; 128
    2f7c:	29 e1       	ldi	r18, 0x19	; 25
    2f7e:	30 e0       	ldi	r19, 0x00	; 0
    2f80:	ce 01       	movw	r24, r28
    2f82:	01 96       	adiw	r24, 0x01	; 1
    2f84:	0e 94 13 23 	call	0x4626	; 0x4626 <memcpy>
	
	// Now convert to hardware
	StructTMToHW(&sTime,
    2f88:	be 01       	movw	r22, r28
    2f8a:	66 5e       	subi	r22, 0xE6	; 230
    2f8c:	7f 4f       	sbci	r23, 0xFF	; 255
    2f8e:	ce 01       	movw	r24, r28
    2f90:	01 96       	adiw	r24, 0x01	; 1
    2f92:	0e 94 85 20 	call	0x410a	; 0x410a <StructTMToHW>
				 &sTimeHW);
	
	// Set the time			 
	cli();
    2f96:	f8 94       	cli
	sg_u64Time = u64Timet;
    2f98:	79 a1       	ldd	r23, Y+33	; 0x21
    2f9a:	6a a1       	ldd	r22, Y+34	; 0x22
    2f9c:	5b a1       	ldd	r21, Y+35	; 0x23
    2f9e:	4c a1       	ldd	r20, Y+36	; 0x24
    2fa0:	3d a1       	ldd	r19, Y+37	; 0x25
    2fa2:	2e a1       	ldd	r18, Y+38	; 0x26
    2fa4:	9f a1       	ldd	r25, Y+39	; 0x27
    2fa6:	88 a5       	ldd	r24, Y+40	; 0x28
    2fa8:	70 93 45 09 	sts	0x0945, r23	; 0x800945 <sg_u64Time>
    2fac:	60 93 46 09 	sts	0x0946, r22	; 0x800946 <sg_u64Time+0x1>
    2fb0:	50 93 47 09 	sts	0x0947, r21	; 0x800947 <sg_u64Time+0x2>
    2fb4:	40 93 48 09 	sts	0x0948, r20	; 0x800948 <sg_u64Time+0x3>
    2fb8:	30 93 49 09 	sts	0x0949, r19	; 0x800949 <sg_u64Time+0x4>
    2fbc:	20 93 4a 09 	sts	0x094A, r18	; 0x80094a <sg_u64Time+0x5>
    2fc0:	90 93 4b 09 	sts	0x094B, r25	; 0x80094b <sg_u64Time+0x6>
    2fc4:	80 93 4c 09 	sts	0x094C, r24	; 0x80094c <sg_u64Time+0x7>
	sei();
    2fc8:	78 94       	sei
	
	// Now go tell the hardware about it
	return(RTCWriteHW(&sTimeHW));
    2fca:	ce 01       	movw	r24, r28
    2fcc:	4a 96       	adiw	r24, 0x1a	; 26
    2fce:	0e 94 a4 13 	call	0x2748	; 0x2748 <RTCWriteHW>
}
    2fd2:	a8 96       	adiw	r28, 0x28	; 40
    2fd4:	0f b6       	in	r0, 0x3f	; 63
    2fd6:	f8 94       	cli
    2fd8:	de bf       	out	0x3e, r29	; 62
    2fda:	0f be       	out	0x3f, r0	; 63
    2fdc:	cd bf       	out	0x3d, r28	; 61
    2fde:	df 91       	pop	r29
    2fe0:	cf 91       	pop	r28
    2fe2:	1f 91       	pop	r17
    2fe4:	0f 91       	pop	r16
    2fe6:	08 95       	ret

Disassembly of section .text.RTCInit:

0000163c <RTCInit>:
	sei();
	
	psSrc = gmtime((const time_t *) &u64Time);
	memcpy((void *) psTime, (void *) psSrc, sizeof(*psTime));
	return(true);
}
    163c:	ff 92       	push	r15
    163e:	0f 93       	push	r16
    1640:	1f 93       	push	r17
    1642:	cf 93       	push	r28
    1644:	df 93       	push	r29
    1646:	cd b7       	in	r28, 0x3d	; 61
    1648:	de b7       	in	r29, 0x3e	; 62
    164a:	a1 97       	sbiw	r28, 0x21	; 33
    164c:	0f b6       	in	r0, 0x3f	; 63
    164e:	f8 94       	cli
    1650:	de bf       	out	0x3e, r29	; 62
    1652:	0f be       	out	0x3f, r0	; 63
    1654:	cd bf       	out	0x3d, r28	; 61
    1656:	19 82       	std	Y+1, r1	; 0x01
    1658:	41 e0       	ldi	r20, 0x01	; 1
    165a:	be 01       	movw	r22, r28
    165c:	6f 5f       	subi	r22, 0xFF	; 255
    165e:	7f 4f       	sbci	r23, 0xFF	; 255
    1660:	87 e0       	ldi	r24, 0x07	; 7
    1662:	0e 94 b1 1e 	call	0x3d62	; 0x3d62 <RTCWriteRegisters>
    1666:	18 2f       	mov	r17, r24
    1668:	88 23       	and	r24, r24
    166a:	09 f4       	brne	.+2      	; 0x166e <RTCInit+0x32>
    166c:	eb c0       	rjmp	.+470    	; 0x1844 <RTCInit+0x208>
    166e:	80 e8       	ldi	r24, 0x80	; 128
    1670:	89 83       	std	Y+1, r24	; 0x01
    1672:	41 e0       	ldi	r20, 0x01	; 1
    1674:	be 01       	movw	r22, r28
    1676:	6f 5f       	subi	r22, 0xFF	; 255
    1678:	7f 4f       	sbci	r23, 0xFF	; 255
    167a:	80 e0       	ldi	r24, 0x00	; 0
    167c:	0e 94 b1 1e 	call	0x3d62	; 0x3d62 <RTCWriteRegisters>
    1680:	18 2f       	mov	r17, r24
    1682:	81 11       	cpse	r24, r1
    1684:	17 c0       	rjmp	.+46     	; 0x16b4 <RTCInit+0x78>
    1686:	de c0       	rjmp	.+444    	; 0x1844 <RTCInit+0x208>
    1688:	19 82       	std	Y+1, r1	; 0x01
    168a:	41 e0       	ldi	r20, 0x01	; 1
    168c:	be 01       	movw	r22, r28
    168e:	6f 5f       	subi	r22, 0xFF	; 255
    1690:	7f 4f       	sbci	r23, 0xFF	; 255
    1692:	83 e0       	ldi	r24, 0x03	; 3
    1694:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <RTCReadRegisters>
    1698:	18 2f       	mov	r17, r24
    169a:	88 23       	and	r24, r24
    169c:	09 f4       	brne	.+2      	; 0x16a0 <RTCInit+0x64>
    169e:	d2 c0       	rjmp	.+420    	; 0x1844 <RTCInit+0x208>
    16a0:	89 81       	ldd	r24, Y+1	; 0x01
    16a2:	85 fd       	sbrc	r24, 5
    16a4:	0a c0       	rjmp	.+20     	; 0x16ba <RTCInit+0x7e>
    16a6:	60 e0       	ldi	r22, 0x00	; 0
    16a8:	70 e0       	ldi	r23, 0x00	; 0
    16aa:	cb 01       	movw	r24, r22
    16ac:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <Delay>
    16b0:	0f 5f       	subi	r16, 0xFF	; 255
    16b2:	01 c0       	rjmp	.+2      	; 0x16b6 <RTCInit+0x7a>
    16b4:	00 e0       	ldi	r16, 0x00	; 0
    16b6:	08 3c       	cpi	r16, 0xC8	; 200
    16b8:	38 f3       	brcs	.-50     	; 0x1688 <RTCInit+0x4c>
    16ba:	08 3c       	cpi	r16, 0xC8	; 200
    16bc:	08 f0       	brcs	.+2      	; 0x16c0 <RTCInit+0x84>
    16be:	c2 c0       	rjmp	.+388    	; 0x1844 <RTCInit+0x208>
    16c0:	89 81       	ldd	r24, Y+1	; 0x01
    16c2:	88 60       	ori	r24, 0x08	; 8
    16c4:	89 83       	std	Y+1, r24	; 0x01
    16c6:	41 e0       	ldi	r20, 0x01	; 1
    16c8:	be 01       	movw	r22, r28
    16ca:	6f 5f       	subi	r22, 0xFF	; 255
    16cc:	7f 4f       	sbci	r23, 0xFF	; 255
    16ce:	83 e0       	ldi	r24, 0x03	; 3
    16d0:	0e 94 b1 1e 	call	0x3d62	; 0x3d62 <RTCWriteRegisters>
    16d4:	18 2f       	mov	r17, r24
    16d6:	88 23       	and	r24, r24
    16d8:	09 f4       	brne	.+2      	; 0x16dc <RTCInit+0xa0>
    16da:	b4 c0       	rjmp	.+360    	; 0x1844 <RTCInit+0x208>
    16dc:	41 e0       	ldi	r20, 0x01	; 1
    16de:	be 01       	movw	r22, r28
    16e0:	6f 5f       	subi	r22, 0xFF	; 255
    16e2:	7f 4f       	sbci	r23, 0xFF	; 255
    16e4:	82 e0       	ldi	r24, 0x02	; 2
    16e6:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <RTCReadRegisters>
    16ea:	18 2f       	mov	r17, r24
    16ec:	88 23       	and	r24, r24
    16ee:	09 f4       	brne	.+2      	; 0x16f2 <RTCInit+0xb6>
    16f0:	a9 c0       	rjmp	.+338    	; 0x1844 <RTCInit+0x208>
    16f2:	89 81       	ldd	r24, Y+1	; 0x01
    16f4:	8f 7b       	andi	r24, 0xBF	; 191
    16f6:	89 83       	std	Y+1, r24	; 0x01
    16f8:	41 e0       	ldi	r20, 0x01	; 1
    16fa:	be 01       	movw	r22, r28
    16fc:	6f 5f       	subi	r22, 0xFF	; 255
    16fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1700:	82 e0       	ldi	r24, 0x02	; 2
    1702:	0e 94 b1 1e 	call	0x3d62	; 0x3d62 <RTCWriteRegisters>
    1706:	18 2f       	mov	r17, r24
    1708:	88 23       	and	r24, r24
    170a:	09 f4       	brne	.+2      	; 0x170e <RTCInit+0xd2>
    170c:	9b c0       	rjmp	.+310    	; 0x1844 <RTCInit+0x208>
    170e:	ce 01       	movw	r24, r28
    1710:	02 96       	adiw	r24, 0x02	; 2
    1712:	0e 94 9f 14 	call	0x293e	; 0x293e <RTCReadHW>
    1716:	18 2f       	mov	r17, r24
    1718:	88 23       	and	r24, r24
    171a:	09 f4       	brne	.+2      	; 0x171e <RTCInit+0xe2>
    171c:	93 c0       	rjmp	.+294    	; 0x1844 <RTCInit+0x208>
    171e:	8a 81       	ldd	r24, Y+2	; 0x02
    1720:	8c 33       	cpi	r24, 0x3C	; 60
    1722:	10 f4       	brcc	.+4      	; 0x1728 <RTCInit+0xec>
    1724:	10 e0       	ldi	r17, 0x00	; 0
    1726:	01 c0       	rjmp	.+2      	; 0x172a <RTCInit+0xee>
    1728:	11 e0       	ldi	r17, 0x01	; 1
    172a:	8b 81       	ldd	r24, Y+3	; 0x03
    172c:	8c 33       	cpi	r24, 0x3C	; 60
    172e:	08 f0       	brcs	.+2      	; 0x1732 <RTCInit+0xf6>
    1730:	11 e0       	ldi	r17, 0x01	; 1
    1732:	8c 81       	ldd	r24, Y+4	; 0x04
    1734:	8c 33       	cpi	r24, 0x3C	; 60
    1736:	08 f0       	brcs	.+2      	; 0x173a <RTCInit+0xfe>
    1738:	11 e0       	ldi	r17, 0x01	; 1
    173a:	8d 81       	ldd	r24, Y+5	; 0x05
    173c:	81 50       	subi	r24, 0x01	; 1
    173e:	87 30       	cpi	r24, 0x07	; 7
    1740:	08 f0       	brcs	.+2      	; 0x1744 <RTCInit+0x108>
    1742:	11 e0       	ldi	r17, 0x01	; 1
    1744:	2f 81       	ldd	r18, Y+7	; 0x07
    1746:	8f ef       	ldi	r24, 0xFF	; 255
    1748:	82 0f       	add	r24, r18
    174a:	8c 30       	cpi	r24, 0x0C	; 12
    174c:	18 f5       	brcc	.+70     	; 0x1794 <RTCInit+0x158>
    174e:	0e 81       	ldd	r16, Y+6	; 0x06
    1750:	00 23       	and	r16, r16
    1752:	11 f1       	breq	.+68     	; 0x1798 <RTCInit+0x15c>
    1754:	82 2f       	mov	r24, r18
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	01 97       	sbiw	r24, 0x01	; 1
    175a:	09 2e       	mov	r0, r25
    175c:	00 0c       	add	r0, r0
    175e:	aa 0b       	sbc	r26, r26
    1760:	87 5d       	subi	r24, 0xD7	; 215
    1762:	9c 4f       	sbci	r25, 0xFC	; 252
    1764:	af 4f       	sbci	r26, 0xFF	; 255
    1766:	fc 01       	movw	r30, r24
    1768:	f4 90       	lpm	r15, Z
    176a:	a7 fd       	sbrc	r26, 7
    176c:	f0 80       	ld	r15, Z
    176e:	22 30       	cpi	r18, 0x02	; 2
    1770:	71 f4       	brne	.+28     	; 0x178e <RTCInit+0x152>
    1772:	88 85       	ldd	r24, Y+8	; 0x08
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	84 31       	cpi	r24, 0x14	; 20
    1778:	91 05       	cpc	r25, r1
    177a:	18 f4       	brcc	.+6      	; 0x1782 <RTCInit+0x146>
    177c:	8c 5c       	subi	r24, 0xCC	; 204
    177e:	97 4f       	sbci	r25, 0xF7	; 247
    1780:	02 c0       	rjmp	.+4      	; 0x1786 <RTCInit+0x14a>
    1782:	80 53       	subi	r24, 0x30	; 48
    1784:	98 4f       	sbci	r25, 0xF8	; 248
    1786:	0e 94 93 22 	call	0x4526	; 0x4526 <IsLeapYear>
    178a:	81 11       	cpse	r24, r1
    178c:	f3 94       	inc	r15
    178e:	f0 16       	cp	r15, r16
    1790:	28 f0       	brcs	.+10     	; 0x179c <RTCInit+0x160>
    1792:	05 c0       	rjmp	.+10     	; 0x179e <RTCInit+0x162>
    1794:	11 e0       	ldi	r17, 0x01	; 1
    1796:	03 c0       	rjmp	.+6      	; 0x179e <RTCInit+0x162>
    1798:	11 e0       	ldi	r17, 0x01	; 1
    179a:	01 c0       	rjmp	.+2      	; 0x179e <RTCInit+0x162>
    179c:	11 e0       	ldi	r17, 0x01	; 1
    179e:	11 23       	and	r17, r17
    17a0:	b9 f0       	breq	.+46     	; 0x17d0 <RTCInit+0x194>
    17a2:	1a 82       	std	Y+2, r1	; 0x02
    17a4:	1b 82       	std	Y+3, r1	; 0x03
    17a6:	1c 82       	std	Y+4, r1	; 0x04
    17a8:	81 e0       	ldi	r24, 0x01	; 1
    17aa:	8e 83       	std	Y+6, r24	; 0x06
    17ac:	8f 83       	std	Y+7, r24	; 0x07
    17ae:	88 e1       	ldi	r24, 0x18	; 24
    17b0:	88 87       	std	Y+8, r24	; 0x08
    17b2:	ce 01       	movw	r24, r28
    17b4:	02 96       	adiw	r24, 0x02	; 2
    17b6:	0e 94 a4 13 	call	0x2748	; 0x2748 <RTCWriteHW>
    17ba:	18 2f       	mov	r17, r24
    17bc:	88 23       	and	r24, r24
    17be:	09 f4       	brne	.+2      	; 0x17c2 <RTCInit+0x186>
    17c0:	41 c0       	rjmp	.+130    	; 0x1844 <RTCInit+0x208>
    17c2:	ce 01       	movw	r24, r28
    17c4:	02 96       	adiw	r24, 0x02	; 2
    17c6:	0e 94 9f 14 	call	0x293e	; 0x293e <RTCReadHW>
    17ca:	18 2f       	mov	r17, r24
    17cc:	88 23       	and	r24, r24
    17ce:	d1 f1       	breq	.+116    	; 0x1844 <RTCInit+0x208>
    17d0:	be 01       	movw	r22, r28
    17d2:	67 5f       	subi	r22, 0xF7	; 247
    17d4:	7f 4f       	sbci	r23, 0xFF	; 255
    17d6:	ce 01       	movw	r24, r28
    17d8:	02 96       	adiw	r24, 0x02	; 2
    17da:	0e 94 13 1d 	call	0x3a26	; 0x3a26 <HWToStructTM>
    17de:	ce 01       	movw	r24, r28
    17e0:	09 96       	adiw	r24, 0x09	; 9
    17e2:	0e 94 11 1c 	call	0x3822	; 0x3822 <mktime>
    17e6:	8b 01       	movw	r16, r22
    17e8:	9c 01       	movw	r18, r24
    17ea:	f8 94       	cli
    17ec:	00 93 45 09 	sts	0x0945, r16	; 0x800945 <sg_u64Time>
    17f0:	10 93 46 09 	sts	0x0946, r17	; 0x800946 <sg_u64Time+0x1>
    17f4:	20 93 47 09 	sts	0x0947, r18	; 0x800947 <sg_u64Time+0x2>
    17f8:	30 93 48 09 	sts	0x0948, r19	; 0x800948 <sg_u64Time+0x3>
    17fc:	10 92 49 09 	sts	0x0949, r1	; 0x800949 <sg_u64Time+0x4>
    1800:	10 92 4a 09 	sts	0x094A, r1	; 0x80094a <sg_u64Time+0x5>
    1804:	10 92 4b 09 	sts	0x094B, r1	; 0x80094b <sg_u64Time+0x6>
    1808:	10 92 4c 09 	sts	0x094C, r1	; 0x80094c <sg_u64Time+0x7>
    180c:	78 94       	sei
    180e:	87 b1       	in	r24, 0x07	; 7
    1810:	8e 7f       	andi	r24, 0xFE	; 254
    1812:	87 b9       	out	0x07, r24	; 7
    1814:	88 b1       	in	r24, 0x08	; 8
    1816:	81 60       	ori	r24, 0x01	; 1
    1818:	88 b9       	out	0x08, r24	; 8
    181a:	41 e0       	ldi	r20, 0x01	; 1
    181c:	be 01       	movw	r22, r28
    181e:	6f 5f       	subi	r22, 0xFF	; 255
    1820:	7f 4f       	sbci	r23, 0xFF	; 255
    1822:	87 e0       	ldi	r24, 0x07	; 7
    1824:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <RTCReadRegisters>
    1828:	18 2f       	mov	r17, r24
    182a:	88 23       	and	r24, r24
    182c:	59 f0       	breq	.+22     	; 0x1844 <RTCInit+0x208>
    182e:	89 81       	ldd	r24, Y+1	; 0x01
    1830:	80 64       	ori	r24, 0x40	; 64
    1832:	89 83       	std	Y+1, r24	; 0x01
    1834:	41 e0       	ldi	r20, 0x01	; 1
    1836:	be 01       	movw	r22, r28
    1838:	6f 5f       	subi	r22, 0xFF	; 255
    183a:	7f 4f       	sbci	r23, 0xFF	; 255
    183c:	87 e0       	ldi	r24, 0x07	; 7
    183e:	0e 94 b1 1e 	call	0x3d62	; 0x3d62 <RTCWriteRegisters>
    1842:	18 2f       	mov	r17, r24
    1844:	81 2f       	mov	r24, r17
    1846:	a1 96       	adiw	r28, 0x21	; 33
    1848:	0f b6       	in	r0, 0x3f	; 63
    184a:	f8 94       	cli
    184c:	de bf       	out	0x3e, r29	; 62
    184e:	0f be       	out	0x3f, r0	; 63
    1850:	cd bf       	out	0x3d, r28	; 61
    1852:	df 91       	pop	r29
    1854:	cf 91       	pop	r28
    1856:	1f 91       	pop	r17
    1858:	0f 91       	pop	r16
    185a:	ff 90       	pop	r15
    185c:	08 95       	ret

Disassembly of section .text.SDSetCS:

00004cde <SDSetCS>:
static uint8_t sg_u8CSD[16];

// This will provide a !CS assertion or deassertion with pre/postamble clock
static void SDSetCS(bool bAsserted)
{
	if (bAsserted)
    4cde:	88 23       	and	r24, r24
    4ce0:	21 f0       	breq	.+8      	; 0x4cea <SDSetCS+0xc>
	{
		SD_CS_ASSERT();
    4ce2:	88 b1       	in	r24, 0x08	; 8
    4ce4:	8f 7b       	andi	r24, 0xBF	; 191
    4ce6:	88 b9       	out	0x08, r24	; 8
    4ce8:	08 95       	ret
	}
	else
	{
		SD_CS_DEASSERT();
    4cea:	88 b1       	in	r24, 0x08	; 8
    4cec:	80 64       	ori	r24, 0x40	; 64
    4cee:	88 b9       	out	0x08, r24	; 8
    4cf0:	08 95       	ret

Disassembly of section .text.SDPowerup:

0000447e <SDPowerup>:

// Sends SD powerup sequence to card and attempts to initialize it
static void SDPowerup(void)
{
	// Set SPI baud rate to (SD_SPEED_SLOW, which is the max for the init sequence)
	(void) SPISetBaudRate(SD_SPEED_SLOW);
    447e:	60 e8       	ldi	r22, 0x80	; 128
    4480:	7a e1       	ldi	r23, 0x1A	; 26
    4482:	86 e0       	ldi	r24, 0x06	; 6
    4484:	90 e0       	ldi	r25, 0x00	; 0
    4486:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <SPISetBaudRate>
	
	// Deassert chip select
	SD_CS_DEASSERT();
    448a:	88 b1       	in	r24, 0x08	; 8
    448c:	80 64       	ori	r24, 0x40	; 64
    448e:	88 b9       	out	0x08, r24	; 8
	
	// Delay time after possible deassertion (2ms)
	Delay(2000);
    4490:	60 ed       	ldi	r22, 0xD0	; 208
    4492:	77 e0       	ldi	r23, 0x07	; 7
    4494:	80 e0       	ldi	r24, 0x00	; 0
    4496:	90 e0       	ldi	r25, 0x00	; 0
    4498:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <Delay>
	
	// Send 74/80 bits of 0xff as a reset (80 bits required since we're byte-
	// sized transactions)
	SPIWritePattern(0xff,
    449c:	40 e1       	ldi	r20, 0x10	; 16
    449e:	50 e0       	ldi	r21, 0x00	; 0
    44a0:	6f ef       	ldi	r22, 0xFF	; 255
    44a2:	70 e0       	ldi	r23, 0x00	; 0
    44a4:	82 e0       	ldi	r24, 0x02	; 2
    44a6:	0e 94 ac 1f 	call	0x3f58	; 0x3f58 <SPITransaction>
				    128/8);

	// Delay time after write
	Delay(2000);
    44aa:	60 ed       	ldi	r22, 0xD0	; 208
    44ac:	77 e0       	ldi	r23, 0x07	; 7
    44ae:	80 e0       	ldi	r24, 0x00	; 0
    44b0:	90 e0       	ldi	r25, 0x00	; 0
    44b2:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <Delay>
    44b6:	08 95       	ret

Disassembly of section .text.SDCommand:

000032e4 <SDCommand>:
#define CMD8_CRC    0x87

// Sends a command to the SD card, including argument an CRC
static uint8_t SDCommand(uint8_t u8Cmd,
						 uint32_t u32Arg)
{
    32e4:	df 92       	push	r13
    32e6:	ef 92       	push	r14
    32e8:	ff 92       	push	r15
    32ea:	0f 93       	push	r16
    32ec:	1f 93       	push	r17
    32ee:	cf 93       	push	r28
    32f0:	df 93       	push	r29
    32f2:	cd b7       	in	r28, 0x3d	; 61
    32f4:	de b7       	in	r29, 0x3e	; 62
    32f6:	27 97       	sbiw	r28, 0x07	; 7
    32f8:	0f b6       	in	r0, 0x3f	; 63
    32fa:	f8 94       	cli
    32fc:	de bf       	out	0x3e, r29	; 62
    32fe:	0f be       	out	0x3f, r0	; 63
    3300:	cd bf       	out	0x3d, r28	; 61
    3302:	18 2f       	mov	r17, r24
    3304:	04 2f       	mov	r16, r20
    3306:	f5 2e       	mov	r15, r21
    3308:	e6 2e       	mov	r14, r22
    330a:	d7 2e       	mov	r13, r23
	uint8_t u8Buffer[sizeof(u8Cmd) + sizeof(u32Arg) + sizeof(u8CRC)];
	uint8_t u8Response;
	uint8_t u8Count;
	
	// If this is an ACMD, prefix a CMD55
	if (u8Cmd & 0x80)
    330c:	88 23       	and	r24, r24
    330e:	4c f4       	brge	.+18     	; 0x3322 <SDCommand+0x3e>
	{
		u8Response = SDCommand(CMD55,
    3310:	40 e0       	ldi	r20, 0x00	; 0
    3312:	50 e0       	ldi	r21, 0x00	; 0
    3314:	ba 01       	movw	r22, r20
    3316:	87 e3       	ldi	r24, 0x37	; 55
    3318:	0e 94 72 19 	call	0x32e4	; 0x32e4 <SDCommand>
    331c:	8f 83       	std	Y+7, r24	; 0x07
							   CMD55_ARG);
							   
		if (u8Response > 1)
    331e:	82 30       	cpi	r24, 0x02	; 2
    3320:	40 f5       	brcc	.+80     	; 0x3372 <SDCommand+0x8e>
			return(u8Response);
		}
	}
	
	// SD Command (OR in 0x40 so bit 47 is always a 1
	u8Buffer[0] = (u8Cmd & 0x7f) | 0x40;
    3322:	81 2f       	mov	r24, r17
    3324:	8f 73       	andi	r24, 0x3F	; 63
    3326:	80 64       	ori	r24, 0x40	; 64
    3328:	89 83       	std	Y+1, r24	; 0x01
	
	// 32 Bits of argument
	u8Buffer[1] = (uint8_t) (u32Arg >> 24);
    332a:	da 82       	std	Y+2, r13	; 0x02
	u8Buffer[2] = (uint8_t) (u32Arg >> 16);
    332c:	eb 82       	std	Y+3, r14	; 0x03
	u8Buffer[3] = (uint8_t) (u32Arg >> 8);
    332e:	fc 82       	std	Y+4, r15	; 0x04
	u8Buffer[4] = (uint8_t) (u32Arg >> 0);
    3330:	0d 83       	std	Y+5, r16	; 0x05
	
	// Valid CRCs for specific commands
	u8CRC = 0;
	if (CMD0 == u8Cmd)
    3332:	11 23       	and	r17, r17
    3334:	11 f0       	breq	.+4      	; 0x333a <SDCommand+0x56>
	u8Buffer[2] = (uint8_t) (u32Arg >> 16);
	u8Buffer[3] = (uint8_t) (u32Arg >> 8);
	u8Buffer[4] = (uint8_t) (u32Arg >> 0);
	
	// Valid CRCs for specific commands
	u8CRC = 0;
    3336:	80 e0       	ldi	r24, 0x00	; 0
    3338:	01 c0       	rjmp	.+2      	; 0x333c <SDCommand+0x58>
	if (CMD0 == u8Cmd)
	{
		u8CRC = 0x95;
    333a:	85 e9       	ldi	r24, 0x95	; 149
	}
	
	if (CMD8 == u8Cmd)
    333c:	18 30       	cpi	r17, 0x08	; 8
    333e:	09 f4       	brne	.+2      	; 0x3342 <SDCommand+0x5e>
	{
		u8CRC = 0x87;
    3340:	87 e8       	ldi	r24, 0x87	; 135
	}
	
	// Now the CRC - Bit 0 means "ignore CRC"
	u8Buffer[5] = (uint8_t) (u8CRC | 0x01);
    3342:	81 60       	ori	r24, 0x01	; 1
    3344:	8e 83       	std	Y+6, r24	; 0x06
	
	// Send all bytes to the SD card
	SPIWrite(u8Buffer,
    3346:	46 e0       	ldi	r20, 0x06	; 6
    3348:	50 e0       	ldi	r21, 0x00	; 0
    334a:	be 01       	movw	r22, r28
    334c:	6f 5f       	subi	r22, 0xFF	; 255
    334e:	7f 4f       	sbci	r23, 0xFF	; 255
    3350:	81 e0       	ldi	r24, 0x01	; 1
    3352:	0e 94 ac 1f 	call	0x3f58	; 0x3f58 <SPITransaction>
			 sizeof(u8Buffer));
			 
	u8Count = 10;
    3356:	1a e0       	ldi	r17, 0x0A	; 10
	
	do 
	{
		SPIRead(&u8Response,
    3358:	41 e0       	ldi	r20, 0x01	; 1
    335a:	50 e0       	ldi	r21, 0x00	; 0
    335c:	be 01       	movw	r22, r28
    335e:	69 5f       	subi	r22, 0xF9	; 249
    3360:	7f 4f       	sbci	r23, 0xFF	; 255
    3362:	83 e0       	ldi	r24, 0x03	; 3
    3364:	0e 94 ac 1f 	call	0x3f58	; 0x3f58 <SPITransaction>
				sizeof(u8Response));
	} while ((u8Response & 0x80) && --u8Count);
    3368:	8f 81       	ldd	r24, Y+7	; 0x07
    336a:	88 23       	and	r24, r24
    336c:	14 f4       	brge	.+4      	; 0x3372 <SDCommand+0x8e>
    336e:	11 50       	subi	r17, 0x01	; 1
    3370:	99 f7       	brne	.-26     	; 0x3358 <SDCommand+0x74>
	
	return(u8Response);
}
    3372:	27 96       	adiw	r28, 0x07	; 7
    3374:	0f b6       	in	r0, 0x3f	; 63
    3376:	f8 94       	cli
    3378:	de bf       	out	0x3e, r29	; 62
    337a:	0f be       	out	0x3f, r0	; 63
    337c:	cd bf       	out	0x3d, r28	; 61
    337e:	df 91       	pop	r29
    3380:	cf 91       	pop	r28
    3382:	1f 91       	pop	r17
    3384:	0f 91       	pop	r16
    3386:	ff 90       	pop	r15
    3388:	ef 90       	pop	r14
    338a:	df 90       	pop	r13
    338c:	08 95       	ret

Disassembly of section .text.SDGoIdle:

00004b74 <SDGoIdle>:
			sizeof(uint32_t));
}

// SD - Go idle!
static uint8_t SDGoIdle(uint8_t *pu8Response)
{
    4b74:	cf 93       	push	r28
	uint8_t u8Response;
	
	SDSetCS(true);
    4b76:	81 e0       	ldi	r24, 0x01	; 1
    4b78:	0e 94 6f 26 	call	0x4cde	; 0x4cde <SDSetCS>
	
	// Send our CMD0 (go idle)
	u8Response = SDCommand(CMD0,
    4b7c:	40 e0       	ldi	r20, 0x00	; 0
    4b7e:	50 e0       	ldi	r21, 0x00	; 0
    4b80:	ba 01       	movw	r22, r20
    4b82:	80 e0       	ldi	r24, 0x00	; 0
    4b84:	0e 94 72 19 	call	0x32e4	; 0x32e4 <SDCommand>
    4b88:	c8 2f       	mov	r28, r24
						   CMD0_ARG);
						   
	SDSetCS(false);
    4b8a:	80 e0       	ldi	r24, 0x00	; 0
    4b8c:	0e 94 6f 26 	call	0x4cde	; 0x4cde <SDSetCS>

	return(u8Response);
}
    4b90:	8c 2f       	mov	r24, r28
    4b92:	cf 91       	pop	r28
    4b94:	08 95       	ret

Disassembly of section .text.SDSendOpCondition:

0000455a <SDSendOpCondition>:
#define ACMD41_CRC  0x00

// Send operation condition
static uint8_t SDSendOpCondition(uint8_t *pu8Response,
								 uint32_t u32Arg)
{
    455a:	cf 92       	push	r12
    455c:	df 92       	push	r13
    455e:	ef 92       	push	r14
    4560:	ff 92       	push	r15
    4562:	cf 93       	push	r28
    4564:	6a 01       	movw	r12, r20
    4566:	7b 01       	movw	r14, r22
	uint8_t u8Response;
	
	// Assert chip select
	SDSetCS(true);
    4568:	81 e0       	ldi	r24, 0x01	; 1
    456a:	0e 94 6f 26 	call	0x4cde	; 0x4cde <SDSetCS>
	
	// Send the app command
	u8Response = SDCommand(ACMD41,
    456e:	b7 01       	movw	r22, r14
    4570:	a6 01       	movw	r20, r12
    4572:	89 ea       	ldi	r24, 0xA9	; 169
    4574:	0e 94 72 19 	call	0x32e4	; 0x32e4 <SDCommand>
    4578:	c8 2f       	mov	r28, r24
						   u32Arg);
	// Deassert chip select
	SDSetCS(false);
    457a:	80 e0       	ldi	r24, 0x00	; 0
    457c:	0e 94 6f 26 	call	0x4cde	; 0x4cde <SDSetCS>
	
	return(u8Response);
}
    4580:	8c 2f       	mov	r24, r28
    4582:	cf 91       	pop	r28
    4584:	ff 90       	pop	r15
    4586:	ef 90       	pop	r14
    4588:	df 90       	pop	r13
    458a:	cf 90       	pop	r12
    458c:	08 95       	ret

Disassembly of section .text.SDSendOpConditionArg:

00004008 <SDSendOpConditionArg>:
	return(u8Response);
}

static uint8_t SDSendOpConditionArg(uint8_t *pu8Resp,
									uint32_t u32Arg)
{
    4008:	cf 92       	push	r12
    400a:	df 92       	push	r13
    400c:	ef 92       	push	r14
    400e:	ff 92       	push	r15
    4010:	0f 93       	push	r16
    4012:	1f 93       	push	r17
    4014:	cf 93       	push	r28
    4016:	df 93       	push	r29
    4018:	8c 01       	movw	r16, r24
    401a:	6a 01       	movw	r12, r20
    401c:	7b 01       	movw	r14, r22
	uint8_t u8Attempts;
	uint8_t u8Response;
	
	u8Attempts = 0;
    401e:	c0 e0       	ldi	r28, 0x00	; 0
		
	// Loop until it comes alive - if it comes alive. Put the card in idle state.
	while (u8Attempts < SD_GO_IDLE_RETRIES)
    4020:	0f c0       	rjmp	.+30     	; 0x4040 <SDSendOpConditionArg+0x38>
	{
		u8Response = SDSendOpCondition(pu8Resp,
    4022:	b7 01       	movw	r22, r14
    4024:	a6 01       	movw	r20, r12
    4026:	c8 01       	movw	r24, r16
    4028:	0e 94 ad 22 	call	0x455a	; 0x455a <SDSendOpCondition>
    402c:	d8 2f       	mov	r29, r24
									   u32Arg);
		if (0 == u8Response)
    402e:	88 23       	and	r24, r24
    4030:	49 f0       	breq	.+18     	; 0x4044 <SDSendOpConditionArg+0x3c>
		{
			break;
		}
			
		// Give it a little time to settle
		Delay(10000);
    4032:	60 e1       	ldi	r22, 0x10	; 16
    4034:	77 e2       	ldi	r23, 0x27	; 39
    4036:	80 e0       	ldi	r24, 0x00	; 0
    4038:	90 e0       	ldi	r25, 0x00	; 0
    403a:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <Delay>
		u8Attempts++;
    403e:	cf 5f       	subi	r28, 0xFF	; 255
	uint8_t u8Response;
	
	u8Attempts = 0;
		
	// Loop until it comes alive - if it comes alive. Put the card in idle state.
	while (u8Attempts < SD_GO_IDLE_RETRIES)
    4040:	c4 36       	cpi	r28, 0x64	; 100
    4042:	78 f3       	brcs	.-34     	; 0x4022 <SDSendOpConditionArg+0x1a>
		Delay(10000);
		u8Attempts++;
	}

	// If we've retried too much, bail out. We're done.
	if (SD_GO_IDLE_RETRIES == u8Attempts)
    4044:	c4 36       	cpi	r28, 0x64	; 100
    4046:	09 f4       	brne	.+2      	; 0x404a <SDSendOpConditionArg+0x42>
	{
		u8Response = 0x80;
    4048:	d0 e8       	ldi	r29, 0x80	; 128
	}
	
	return(u8Response);
}
    404a:	8d 2f       	mov	r24, r29
    404c:	df 91       	pop	r29
    404e:	cf 91       	pop	r28
    4050:	1f 91       	pop	r17
    4052:	0f 91       	pop	r16
    4054:	ff 90       	pop	r15
    4056:	ef 90       	pop	r14
    4058:	df 90       	pop	r13
    405a:	cf 90       	pop	r12
    405c:	08 95       	ret

Disassembly of section .text.SDWaitResponse7:

00004dbc <SDWaitResponse7>:

// This will return true if a response 7 was received, otherwise false
static void SDWaitResponse7(uint8_t *pu8ResponseByte)
{
	// Go read the remaining 4 bytes
	SPIRead(pu8ResponseByte,
    4dbc:	44 e0       	ldi	r20, 0x04	; 4
    4dbe:	50 e0       	ldi	r21, 0x00	; 0
    4dc0:	bc 01       	movw	r22, r24
    4dc2:	83 e0       	ldi	r24, 0x03	; 3
    4dc4:	0e 94 ac 1f 	call	0x3f58	; 0x3f58 <SPITransaction>
    4dc8:	08 95       	ret

Disassembly of section .text.SDSendInterfaceCondition:

0000458e <SDSendInterfaceCondition>:
	return(u8Response);
}

// Send interface condition
static uint8_t SDSendInterfaceCondition(uint8_t *pu8Response)
{
    458e:	0f 93       	push	r16
    4590:	1f 93       	push	r17
    4592:	cf 93       	push	r28
    4594:	8c 01       	movw	r16, r24
	uint8_t u8Response;
	
	SDSetCS(true);
    4596:	81 e0       	ldi	r24, 0x01	; 1
    4598:	0e 94 6f 26 	call	0x4cde	; 0x4cde <SDSetCS>
	
	// Send our CMD8 Send interface condition
	u8Response = SDCommand(CMD8,
    459c:	4a ea       	ldi	r20, 0xAA	; 170
    459e:	51 e0       	ldi	r21, 0x01	; 1
    45a0:	60 e0       	ldi	r22, 0x00	; 0
    45a2:	70 e0       	ldi	r23, 0x00	; 0
    45a4:	88 e0       	ldi	r24, 0x08	; 8
    45a6:	0e 94 72 19 	call	0x32e4	; 0x32e4 <SDCommand>
    45aa:	c8 2f       	mov	r28, r24
						   CMD8_ARG);
						   
	SDWaitResponse7(pu8Response);
    45ac:	c8 01       	movw	r24, r16
    45ae:	0e 94 de 26 	call	0x4dbc	; 0x4dbc <SDWaitResponse7>
		
	SDSetCS(false);
    45b2:	80 e0       	ldi	r24, 0x00	; 0
    45b4:	0e 94 6f 26 	call	0x4cde	; 0x4cde <SDSetCS>

	return(u8Response);
}
    45b8:	8c 2f       	mov	r24, r28
    45ba:	cf 91       	pop	r28
    45bc:	1f 91       	pop	r17
    45be:	0f 91       	pop	r16
    45c0:	08 95       	ret

Disassembly of section .text.SDReadOCR:

000045c2 <SDReadOCR>:
#define CMD58_ARG   0x00000000
#define CMD58_CRC   0x00

// Go read the OCR
static uint8_t SDReadOCR(uint8_t *pu8Response)
{
    45c2:	0f 93       	push	r16
    45c4:	1f 93       	push	r17
    45c6:	cf 93       	push	r28
    45c8:	8c 01       	movw	r16, r24
	uint8_t u8Response;
	
	// Assert chip select
	SDSetCS(true);
    45ca:	81 e0       	ldi	r24, 0x01	; 1
    45cc:	0e 94 6f 26 	call	0x4cde	; 0x4cde <SDSetCS>
	
	// Send the app command
	u8Response = SDCommand(CMD58,
    45d0:	40 e0       	ldi	r20, 0x00	; 0
    45d2:	50 e0       	ldi	r21, 0x00	; 0
    45d4:	ba 01       	movw	r22, r20
    45d6:	8a e3       	ldi	r24, 0x3A	; 58
    45d8:	0e 94 72 19 	call	0x32e4	; 0x32e4 <SDCommand>
    45dc:	c8 2f       	mov	r28, r24
						   CMD58_ARG);

	// Read response
	SDWaitResponse7(pu8Response);
    45de:	c8 01       	movw	r24, r16
    45e0:	0e 94 de 26 	call	0x4dbc	; 0x4dbc <SDWaitResponse7>

	// Deassert chip select
	SDSetCS(false);
    45e4:	80 e0       	ldi	r24, 0x00	; 0
    45e6:	0e 94 6f 26 	call	0x4cde	; 0x4cde <SDSetCS>
	
	return(u8Response);
}
    45ea:	8c 2f       	mov	r24, r28
    45ec:	cf 91       	pop	r28
    45ee:	1f 91       	pop	r17
    45f0:	0f 91       	pop	r16
    45f2:	08 95       	ret

Disassembly of section .text.SDReadCSD:

00003aa2 <SDReadCSD>:
#define CMD9_ARG    0x000000000
#define CMD9_CRC    0x00

// Read CSD (card specific data) - CSD is 128 bits - see the SD spec for details.
static uint8_t SDReadCSD(uint8_t *pu8CSD)
{
    3aa2:	ef 92       	push	r14
    3aa4:	ff 92       	push	r15
    3aa6:	0f 93       	push	r16
    3aa8:	1f 93       	push	r17
    3aaa:	cf 93       	push	r28
    3aac:	df 93       	push	r29
    3aae:	0f 92       	push	r0
    3ab0:	cd b7       	in	r28, 0x3d	; 61
    3ab2:	de b7       	in	r29, 0x3e	; 62
    3ab4:	7c 01       	movw	r14, r24
	uint8_t u8Response;
	uint8_t u8CmdResponse;
	uint8_t u8Count = 8;
	
	SDSetCS(true);
    3ab6:	81 e0       	ldi	r24, 0x01	; 1
    3ab8:	0e 94 6f 26 	call	0x4cde	; 0x4cde <SDSetCS>
	
	// Send our CMD9 (read CSD)
	u8CmdResponse = SDCommand(CMD9,
    3abc:	40 e0       	ldi	r20, 0x00	; 0
    3abe:	50 e0       	ldi	r21, 0x00	; 0
    3ac0:	ba 01       	movw	r22, r20
    3ac2:	89 e0       	ldi	r24, 0x09	; 9
    3ac4:	0e 94 72 19 	call	0x32e4	; 0x32e4 <SDCommand>
    3ac8:	08 2f       	mov	r16, r24
							  CMD9_ARG);
	
	// Success! Let's get a response
	if (u8CmdResponse)
    3aca:	81 11       	cpse	r24, r1
    3acc:	1c c0       	rjmp	.+56     	; 0x3b06 <SDReadCSD+0x64>
    3ace:	18 e0       	ldi	r17, 0x08	; 8
    3ad0:	01 c0       	rjmp	.+2      	; 0x3ad4 <SDReadCSD+0x32>
	do 
	{
		SPIRead(&u8Response,
			    sizeof(u8Response));
	} while ((u8Response != SD_START_TOKEN) &&
			 (u8Count--));
    3ad2:	18 2f       	mov	r17, r24
	}
	
	// Wait until SD_START_TOKEN (start of data sector). We should easily see it in a few bytes.
	do 
	{
		SPIRead(&u8Response,
    3ad4:	41 e0       	ldi	r20, 0x01	; 1
    3ad6:	50 e0       	ldi	r21, 0x00	; 0
    3ad8:	be 01       	movw	r22, r28
    3ada:	6f 5f       	subi	r22, 0xFF	; 255
    3adc:	7f 4f       	sbci	r23, 0xFF	; 255
    3ade:	83 e0       	ldi	r24, 0x03	; 3
    3ae0:	0e 94 ac 1f 	call	0x3f58	; 0x3f58 <SPITransaction>
			    sizeof(u8Response));
	} while ((u8Response != SD_START_TOKEN) &&
    3ae4:	89 81       	ldd	r24, Y+1	; 0x01
			 (u8Count--));
    3ae6:	8e 3f       	cpi	r24, 0xFE	; 254
    3ae8:	29 f0       	breq	.+10     	; 0x3af4 <SDReadCSD+0x52>
    3aea:	8f ef       	ldi	r24, 0xFF	; 255
    3aec:	81 0f       	add	r24, r17
	// Wait until SD_START_TOKEN (start of data sector). We should easily see it in a few bytes.
	do 
	{
		SPIRead(&u8Response,
			    sizeof(u8Response));
	} while ((u8Response != SD_START_TOKEN) &&
    3aee:	11 11       	cpse	r17, r1
    3af0:	f0 cf       	rjmp	.-32     	; 0x3ad2 <SDReadCSD+0x30>
    3af2:	01 c0       	rjmp	.+2      	; 0x3af6 <SDReadCSD+0x54>
    3af4:	81 2f       	mov	r24, r17
			 (u8Count--));
			 
	// If we haven't seen it in u8Count bytes, then error the call
	if (0 == u8Count)
    3af6:	88 23       	and	r24, r24
    3af8:	31 f0       	breq	.+12     	; 0x3b06 <SDReadCSD+0x64>
	{
		goto errorExit;
	}
	
	// Go read the remaining 16 bytes
	SPIRead(pu8CSD,
    3afa:	40 e1       	ldi	r20, 0x10	; 16
    3afc:	50 e0       	ldi	r21, 0x00	; 0
    3afe:	b7 01       	movw	r22, r14
    3b00:	83 e0       	ldi	r24, 0x03	; 3
    3b02:	0e 94 ac 1f 	call	0x3f58	; 0x3f58 <SPITransaction>
		    16);
	
errorExit:	
	SDSetCS(false);
    3b06:	80 e0       	ldi	r24, 0x00	; 0
    3b08:	0e 94 6f 26 	call	0x4cde	; 0x4cde <SDSetCS>
	return(u8CmdResponse);
	
}
    3b0c:	80 2f       	mov	r24, r16
    3b0e:	0f 90       	pop	r0
    3b10:	df 91       	pop	r29
    3b12:	cf 91       	pop	r28
    3b14:	1f 91       	pop	r17
    3b16:	0f 91       	pop	r16
    3b18:	ff 90       	pop	r15
    3b1a:	ef 90       	pop	r14
    3b1c:	08 95       	ret

Disassembly of section .text.SDReceiveDataBlock:

0000368a <SDReceiveDataBlock>:
}

// Receives a datablock during the data phase which may take some time
static bool SDReceiveDataBlock(uint8_t *pu8Buffer,
							   uint16_t u16RXCount)
{
    368a:	cf 92       	push	r12
    368c:	df 92       	push	r13
    368e:	ef 92       	push	r14
    3690:	ff 92       	push	r15
    3692:	0f 93       	push	r16
    3694:	1f 93       	push	r17
    3696:	cf 93       	push	r28
    3698:	df 93       	push	r29
    369a:	0f 92       	push	r0
    369c:	cd b7       	in	r28, 0x3d	; 61
    369e:	de b7       	in	r29, 0x3e	; 62
    36a0:	7c 01       	movw	r14, r24
    36a2:	6b 01       	movw	r12, r22
	uint8_t u8Response;
	uint16_t u16Count = 4096;
    36a4:	00 e0       	ldi	r16, 0x00	; 0
    36a6:	10 e1       	ldi	r17, 0x10	; 16
    36a8:	01 c0       	rjmp	.+2      	; 0x36ac <SDReceiveDataBlock+0x22>
	{
		SPIRead(&u8Response,
				sizeof(u8Response));
	} 
	while ((u8Response != SD_START_TOKEN) &&
		   (u16Count--));
    36aa:	89 01       	movw	r16, r18
	uint16_t u16Count = 4096;
	
	// Wait for response token
	do 
	{
		SPIRead(&u8Response,
    36ac:	41 e0       	ldi	r20, 0x01	; 1
    36ae:	50 e0       	ldi	r21, 0x00	; 0
    36b0:	be 01       	movw	r22, r28
    36b2:	6f 5f       	subi	r22, 0xFF	; 255
    36b4:	7f 4f       	sbci	r23, 0xFF	; 255
    36b6:	83 e0       	ldi	r24, 0x03	; 3
    36b8:	0e 94 ac 1f 	call	0x3f58	; 0x3f58 <SPITransaction>
				sizeof(u8Response));
	} 
	while ((u8Response != SD_START_TOKEN) &&
    36bc:	89 81       	ldd	r24, Y+1	; 0x01
		   (u16Count--));
    36be:	8e 3f       	cpi	r24, 0xFE	; 254
    36c0:	29 f0       	breq	.+10     	; 0x36cc <SDReceiveDataBlock+0x42>
    36c2:	98 01       	movw	r18, r16
    36c4:	21 50       	subi	r18, 0x01	; 1
    36c6:	31 09       	sbc	r19, r1
	do 
	{
		SPIRead(&u8Response,
				sizeof(u8Response));
	} 
	while ((u8Response != SD_START_TOKEN) &&
    36c8:	01 2b       	or	r16, r17
    36ca:	79 f7       	brne	.-34     	; 0x36aa <SDReceiveDataBlock+0x20>
		   (u16Count--));
		   
	if (u8Response != SD_START_TOKEN)
    36cc:	8e 3f       	cpi	r24, 0xFE	; 254
    36ce:	b9 f4       	brne	.+46     	; 0x36fe <SDReceiveDataBlock+0x74>
	{
		return(false);
	}
	
	// Start of data. Pull it down.
	SPIRead(pu8Buffer,
    36d0:	a6 01       	movw	r20, r12
    36d2:	b7 01       	movw	r22, r14
    36d4:	83 e0       	ldi	r24, 0x03	; 3
    36d6:	0e 94 ac 1f 	call	0x3f58	; 0x3f58 <SPITransaction>
			u16RXCount);
			
	// Discard CRC
	SPIRead(&u8Response,
    36da:	41 e0       	ldi	r20, 0x01	; 1
    36dc:	50 e0       	ldi	r21, 0x00	; 0
    36de:	be 01       	movw	r22, r28
    36e0:	6f 5f       	subi	r22, 0xFF	; 255
    36e2:	7f 4f       	sbci	r23, 0xFF	; 255
    36e4:	83 e0       	ldi	r24, 0x03	; 3
    36e6:	0e 94 ac 1f 	call	0x3f58	; 0x3f58 <SPITransaction>
			sizeof(u8Response));
	SPIRead(&u8Response,
    36ea:	41 e0       	ldi	r20, 0x01	; 1
    36ec:	50 e0       	ldi	r21, 0x00	; 0
    36ee:	be 01       	movw	r22, r28
    36f0:	6f 5f       	subi	r22, 0xFF	; 255
    36f2:	7f 4f       	sbci	r23, 0xFF	; 255
    36f4:	83 e0       	ldi	r24, 0x03	; 3
    36f6:	0e 94 ac 1f 	call	0x3f58	; 0x3f58 <SPITransaction>
			sizeof(u8Response));
	return(true);			   
    36fa:	81 e0       	ldi	r24, 0x01	; 1
    36fc:	01 c0       	rjmp	.+2      	; 0x3700 <SDReceiveDataBlock+0x76>
	while ((u8Response != SD_START_TOKEN) &&
		   (u16Count--));
		   
	if (u8Response != SD_START_TOKEN)
	{
		return(false);
    36fe:	80 e0       	ldi	r24, 0x00	; 0
	SPIRead(&u8Response,
			sizeof(u8Response));
	SPIRead(&u8Response,
			sizeof(u8Response));
	return(true);			   
}
    3700:	0f 90       	pop	r0
    3702:	df 91       	pop	r29
    3704:	cf 91       	pop	r28
    3706:	1f 91       	pop	r17
    3708:	0f 91       	pop	r16
    370a:	ff 90       	pop	r15
    370c:	ef 90       	pop	r14
    370e:	df 90       	pop	r13
    3710:	cf 90       	pop	r12
    3712:	08 95       	ret

Disassembly of section .text.SDTransmitDataBlock:

000030ac <SDTransmitDataBlock>:

// Transmits a datablock during the data phase which may take some time
static bool SDTransmitDataBlock(uint8_t *pu8Buffer,
							    uint16_t u16TXCount,
								uint8_t u8DataPhaseToken)
{
    30ac:	ef 92       	push	r14
    30ae:	ff 92       	push	r15
    30b0:	0f 93       	push	r16
    30b2:	1f 93       	push	r17
    30b4:	cf 93       	push	r28
    30b6:	df 93       	push	r29
    30b8:	00 d0       	rcall	.+0      	; 0x30ba <SDTransmitDataBlock+0xe>
    30ba:	cd b7       	in	r28, 0x3d	; 61
    30bc:	de b7       	in	r29, 0x3e	; 62
    30be:	8c 01       	movw	r16, r24
    30c0:	7b 01       	movw	r14, r22
    30c2:	4a 83       	std	Y+2, r20	; 0x02
	uint8_t u8Response;
	uint16_t u16Attempts;
	bool bResult = true;

	// Send the data phase token (whatever it is)
	SPIWrite(&u8DataPhaseToken,
    30c4:	41 e0       	ldi	r20, 0x01	; 1
    30c6:	50 e0       	ldi	r21, 0x00	; 0
    30c8:	be 01       	movw	r22, r28
    30ca:	6e 5f       	subi	r22, 0xFE	; 254
    30cc:	7f 4f       	sbci	r23, 0xFF	; 255
    30ce:	81 e0       	ldi	r24, 0x01	; 1
    30d0:	0e 94 ac 1f 	call	0x3f58	; 0x3f58 <SPITransaction>
			 sizeof(u8DataPhaseToken));
	
	if (u8DataPhaseToken != SD_STOP_TRANSACTION)
    30d4:	8a 81       	ldd	r24, Y+2	; 0x02
    30d6:	8d 3f       	cpi	r24, 0xFD	; 253
    30d8:	e1 f1       	breq	.+120    	; 0x3152 <SDTransmitDataBlock+0xa6>
	{
		// As long as we're not stopping a transaction, we're writing data
		SPIWrite(pu8Buffer,
    30da:	a7 01       	movw	r20, r14
    30dc:	b8 01       	movw	r22, r16
    30de:	81 e0       	ldi	r24, 0x01	; 1
    30e0:	0e 94 ac 1f 	call	0x3f58	; 0x3f58 <SPITransaction>
				 u16TXCount);
				 
		// Wait for acceptance of the sector
		u16Attempts = 0;
    30e4:	00 e0       	ldi	r16, 0x00	; 0
    30e6:	10 e0       	ldi	r17, 0x00	; 0
		while (u16Attempts < SD_MAX_WRITE_ATTEMPTS)
    30e8:	0d c0       	rjmp	.+26     	; 0x3104 <SDTransmitDataBlock+0x58>
		{
			// Get some data
			SPIRead(&u8Response,
    30ea:	41 e0       	ldi	r20, 0x01	; 1
    30ec:	50 e0       	ldi	r21, 0x00	; 0
    30ee:	be 01       	movw	r22, r28
    30f0:	6f 5f       	subi	r22, 0xFF	; 255
    30f2:	7f 4f       	sbci	r23, 0xFF	; 255
    30f4:	83 e0       	ldi	r24, 0x03	; 3
    30f6:	0e 94 ac 1f 	call	0x3f58	; 0x3f58 <SPITransaction>
					sizeof(u8Response));
			if (u8Response != 0xff)
    30fa:	89 81       	ldd	r24, Y+1	; 0x01
    30fc:	8f 3f       	cpi	r24, 0xFF	; 255
    30fe:	31 f4       	brne	.+12     	; 0x310c <SDTransmitDataBlock+0x60>
			{
				break;
			}
				
			++u16Attempts;
    3100:	0f 5f       	subi	r16, 0xFF	; 255
    3102:	1f 4f       	sbci	r17, 0xFF	; 255
		SPIWrite(pu8Buffer,
				 u16TXCount);
				 
		// Wait for acceptance of the sector
		u16Attempts = 0;
		while (u16Attempts < SD_MAX_WRITE_ATTEMPTS)
    3104:	0e 39       	cpi	r16, 0x9E	; 158
    3106:	88 e9       	ldi	r24, 0x98	; 152
    3108:	18 07       	cpc	r17, r24
    310a:	78 f3       	brcs	.-34     	; 0x30ea <SDTransmitDataBlock+0x3e>
				
			++u16Attempts;
		}
			
		// We've timed out or else the card is dead
		if (SD_MAX_WRITE_ATTEMPTS == u16Attempts)
    310c:	0e 39       	cpi	r16, 0x9E	; 158
    310e:	18 49       	sbci	r17, 0x98	; 152
    3110:	11 f1       	breq	.+68     	; 0x3156 <SDTransmitDataBlock+0xaa>
			bResult = false;
			goto errorExit;
		}
			
		// See if the data was accepted
		u8Response &= 0x1f;
    3112:	89 81       	ldd	r24, Y+1	; 0x01
    3114:	8f 71       	andi	r24, 0x1F	; 31
    3116:	89 83       	std	Y+1, r24	; 0x01
		if (0x05 == u8Response)
    3118:	85 30       	cpi	r24, 0x05	; 5
    311a:	81 f0       	breq	.+32     	; 0x313c <SDTransmitDataBlock+0x90>
			// Success!
		}
		else
		{
			// Sector not accepted
			bResult = false;
    311c:	80 e0       	ldi	r24, 0x00	; 0
    311e:	1e c0       	rjmp	.+60     	; 0x315c <SDTransmitDataBlock+0xb0>
			// Wait for the write to finish
			u16Attempts = 0;
			while (u16Attempts < SD_MAX_WRITE_ATTEMPTS)
			{
				// Wait for the card to accept writing the sector
				SPIRead(&u8Response,
    3120:	41 e0       	ldi	r20, 0x01	; 1
    3122:	50 e0       	ldi	r21, 0x00	; 0
    3124:	be 01       	movw	r22, r28
    3126:	6f 5f       	subi	r22, 0xFF	; 255
    3128:	7f 4f       	sbci	r23, 0xFF	; 255
    312a:	83 e0       	ldi	r24, 0x03	; 3
    312c:	0e 94 ac 1f 	call	0x3f58	; 0x3f58 <SPITransaction>
						sizeof(u8Response));
				if (u8Response)
    3130:	89 81       	ldd	r24, Y+1	; 0x01
    3132:	81 11       	cpse	r24, r1
    3134:	09 c0       	rjmp	.+18     	; 0x3148 <SDTransmitDataBlock+0x9c>
				{
					break;
				}
					
				++u16Attempts;
    3136:	0f 5f       	subi	r16, 0xFF	; 255
    3138:	1f 4f       	sbci	r17, 0xFF	; 255
    313a:	02 c0       	rjmp	.+4      	; 0x3140 <SDTransmitDataBlock+0x94>
    313c:	00 e0       	ldi	r16, 0x00	; 0
    313e:	10 e0       	ldi	r17, 0x00	; 0
		u8Response &= 0x1f;
		if (0x05 == u8Response)
		{
			// Wait for the write to finish
			u16Attempts = 0;
			while (u16Attempts < SD_MAX_WRITE_ATTEMPTS)
    3140:	0e 39       	cpi	r16, 0x9E	; 158
    3142:	88 e9       	ldi	r24, 0x98	; 152
    3144:	18 07       	cpc	r17, r24
    3146:	60 f3       	brcs	.-40     	; 0x3120 <SDTransmitDataBlock+0x74>
				}
					
				++u16Attempts;
			}
				
			if (SD_MAX_WRITE_ATTEMPTS == u16Attempts)
    3148:	0e 39       	cpi	r16, 0x9E	; 158
    314a:	18 49       	sbci	r17, 0x98	; 152
    314c:	31 f0       	breq	.+12     	; 0x315a <SDTransmitDataBlock+0xae>
							    uint16_t u16TXCount,
								uint8_t u8DataPhaseToken)
{
	uint8_t u8Response;
	uint16_t u16Attempts;
	bool bResult = true;
    314e:	81 e0       	ldi	r24, 0x01	; 1
    3150:	05 c0       	rjmp	.+10     	; 0x315c <SDTransmitDataBlock+0xb0>
    3152:	81 e0       	ldi	r24, 0x01	; 1
    3154:	03 c0       	rjmp	.+6      	; 0x315c <SDTransmitDataBlock+0xb0>
		}
			
		// We've timed out or else the card is dead
		if (SD_MAX_WRITE_ATTEMPTS == u16Attempts)
		{
			bResult = false;
    3156:	80 e0       	ldi	r24, 0x00	; 0
    3158:	01 c0       	rjmp	.+2      	; 0x315c <SDTransmitDataBlock+0xb0>
				++u16Attempts;
			}
				
			if (SD_MAX_WRITE_ATTEMPTS == u16Attempts)
			{
				bResult = false;
    315a:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	
errorExit:
	return(bResult);
}
    315c:	0f 90       	pop	r0
    315e:	0f 90       	pop	r0
    3160:	df 91       	pop	r29
    3162:	cf 91       	pop	r28
    3164:	1f 91       	pop	r17
    3166:	0f 91       	pop	r16
    3168:	ff 90       	pop	r15
    316a:	ef 90       	pop	r14
    316c:	08 95       	ret

Disassembly of section .text.SDInit:

00002156 <SDInit>:

bool SDGetBlockSize(uint32_t *pu32BlockSize)
{
	*pu32BlockSize = sg_u16BlockSize;
	return(true);
}
    2156:	1f 93       	push	r17
    2158:	cf 93       	push	r28
    215a:	df 93       	push	r29
    215c:	00 d0       	rcall	.+0      	; 0x215e <SDInit+0x8>
    215e:	00 d0       	rcall	.+0      	; 0x2160 <SDInit+0xa>
    2160:	0f 92       	push	r0
    2162:	cd b7       	in	r28, 0x3d	; 61
    2164:	de b7       	in	r29, 0x3e	; 62
    2166:	87 b1       	in	r24, 0x07	; 7
    2168:	80 64       	ori	r24, 0x40	; 64
    216a:	87 b9       	out	0x07, r24	; 7
    216c:	88 b1       	in	r24, 0x08	; 8
    216e:	80 64       	ori	r24, 0x40	; 64
    2170:	88 b9       	out	0x08, r24	; 8
    2172:	88 b1       	in	r24, 0x08	; 8
    2174:	80 64       	ori	r24, 0x40	; 64
    2176:	88 b9       	out	0x08, r24	; 8
    2178:	0e 94 9d 23 	call	0x473a	; 0x473a <SPIInit>
    217c:	0e 94 3f 22 	call	0x447e	; 0x447e <SDPowerup>
    2180:	10 e0       	ldi	r17, 0x00	; 0
    2182:	0d c0       	rjmp	.+26     	; 0x219e <SDInit+0x48>
    2184:	ce 01       	movw	r24, r28
    2186:	01 96       	adiw	r24, 0x01	; 1
    2188:	0e 94 ba 25 	call	0x4b74	; 0x4b74 <SDGoIdle>
    218c:	81 30       	cpi	r24, 0x01	; 1
    218e:	49 f0       	breq	.+18     	; 0x21a2 <SDInit+0x4c>
    2190:	60 e1       	ldi	r22, 0x10	; 16
    2192:	77 e2       	ldi	r23, 0x27	; 39
    2194:	80 e0       	ldi	r24, 0x00	; 0
    2196:	90 e0       	ldi	r25, 0x00	; 0
    2198:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <Delay>
    219c:	1f 5f       	subi	r17, 0xFF	; 255
    219e:	14 36       	cpi	r17, 0x64	; 100
    21a0:	88 f3       	brcs	.-30     	; 0x2184 <SDInit+0x2e>
    21a2:	14 36       	cpi	r17, 0x64	; 100
    21a4:	09 f4       	brne	.+2      	; 0x21a8 <SDInit+0x52>
    21a6:	76 c0       	rjmp	.+236    	; 0x2294 <SDInit+0x13e>
    21a8:	ce 01       	movw	r24, r28
    21aa:	01 96       	adiw	r24, 0x01	; 1
    21ac:	25 e0       	ldi	r18, 0x05	; 5
    21ae:	fc 01       	movw	r30, r24
    21b0:	11 92       	st	Z+, r1
    21b2:	2a 95       	dec	r18
    21b4:	e9 f7       	brne	.-6      	; 0x21b0 <SDInit+0x5a>
    21b6:	0e 94 c7 22 	call	0x458e	; 0x458e <SDSendInterfaceCondition>
    21ba:	81 30       	cpi	r24, 0x01	; 1
    21bc:	09 f0       	breq	.+2      	; 0x21c0 <SDInit+0x6a>
    21be:	5e c0       	rjmp	.+188    	; 0x227c <SDInit+0x126>
    21c0:	8c 81       	ldd	r24, Y+4	; 0x04
    21c2:	8a 3a       	cpi	r24, 0xAA	; 170
    21c4:	09 f0       	breq	.+2      	; 0x21c8 <SDInit+0x72>
    21c6:	68 c0       	rjmp	.+208    	; 0x2298 <SDInit+0x142>
    21c8:	40 e0       	ldi	r20, 0x00	; 0
    21ca:	50 e0       	ldi	r21, 0x00	; 0
    21cc:	60 e0       	ldi	r22, 0x00	; 0
    21ce:	70 e4       	ldi	r23, 0x40	; 64
    21d0:	ce 01       	movw	r24, r28
    21d2:	01 96       	adiw	r24, 0x01	; 1
    21d4:	0e 94 04 20 	call	0x4008	; 0x4008 <SDSendOpConditionArg>
    21d8:	81 11       	cpse	r24, r1
    21da:	60 c0       	rjmp	.+192    	; 0x229c <SDInit+0x146>
    21dc:	ce 01       	movw	r24, r28
    21de:	01 96       	adiw	r24, 0x01	; 1
    21e0:	0e 94 e1 22 	call	0x45c2	; 0x45c2 <SDReadOCR>
    21e4:	88 23       	and	r24, r24
    21e6:	0c f4       	brge	.+2      	; 0x21ea <SDInit+0x94>
    21e8:	5b c0       	rjmp	.+182    	; 0x22a0 <SDInit+0x14a>
    21ea:	8d e2       	ldi	r24, 0x2D	; 45
    21ec:	99 e0       	ldi	r25, 0x09	; 9
    21ee:	0e 94 51 1d 	call	0x3aa2	; 0x3aa2 <SDReadCSD>
    21f2:	88 23       	and	r24, r24
    21f4:	0c f4       	brge	.+2      	; 0x21f8 <SDInit+0xa2>
    21f6:	56 c0       	rjmp	.+172    	; 0x22a4 <SDInit+0x14e>
    21f8:	ed e2       	ldi	r30, 0x2D	; 45
    21fa:	f9 e0       	ldi	r31, 0x09	; 9
    21fc:	87 81       	ldd	r24, Z+7	; 0x07
    21fe:	8f 73       	andi	r24, 0x3F	; 63
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	a0 e0       	ldi	r26, 0x00	; 0
    2204:	b0 e0       	ldi	r27, 0x00	; 0
    2206:	bc 01       	movw	r22, r24
    2208:	55 27       	eor	r21, r21
    220a:	44 27       	eor	r20, r20
    220c:	90 85       	ldd	r25, Z+8	; 0x08
    220e:	89 2f       	mov	r24, r25
    2210:	90 e0       	ldi	r25, 0x00	; 0
    2212:	a0 e0       	ldi	r26, 0x00	; 0
    2214:	b0 e0       	ldi	r27, 0x00	; 0
    2216:	ba 2f       	mov	r27, r26
    2218:	a9 2f       	mov	r26, r25
    221a:	98 2f       	mov	r25, r24
    221c:	88 27       	eor	r24, r24
    221e:	84 2b       	or	r24, r20
    2220:	95 2b       	or	r25, r21
    2222:	a6 2b       	or	r26, r22
    2224:	b7 2b       	or	r27, r23
    2226:	21 85       	ldd	r18, Z+9	; 0x09
    2228:	82 2b       	or	r24, r18
    222a:	01 96       	adiw	r24, 0x01	; 1
    222c:	a1 1d       	adc	r26, r1
    222e:	b1 1d       	adc	r27, r1
    2230:	07 2e       	mov	r0, r23
    2232:	7a e0       	ldi	r23, 0x0A	; 10
    2234:	88 0f       	add	r24, r24
    2236:	99 1f       	adc	r25, r25
    2238:	aa 1f       	adc	r26, r26
    223a:	bb 1f       	adc	r27, r27
    223c:	7a 95       	dec	r23
    223e:	d1 f7       	brne	.-12     	; 0x2234 <SDInit+0xde>
    2240:	70 2d       	mov	r23, r0
    2242:	80 93 54 09 	sts	0x0954, r24	; 0x800954 <sg_u32SDSectorCount>
    2246:	90 93 55 09 	sts	0x0955, r25	; 0x800955 <sg_u32SDSectorCount+0x1>
    224a:	a0 93 56 09 	sts	0x0956, r26	; 0x800956 <sg_u32SDSectorCount+0x2>
    224e:	b0 93 57 09 	sts	0x0957, r27	; 0x800957 <sg_u32SDSectorCount+0x3>
    2252:	25 81       	ldd	r18, Z+5	; 0x05
    2254:	2f 70       	andi	r18, 0x0F	; 15
    2256:	81 e0       	ldi	r24, 0x01	; 1
    2258:	90 e0       	ldi	r25, 0x00	; 0
    225a:	02 c0       	rjmp	.+4      	; 0x2260 <SDInit+0x10a>
    225c:	88 0f       	add	r24, r24
    225e:	99 1f       	adc	r25, r25
    2260:	2a 95       	dec	r18
    2262:	e2 f7       	brpl	.-8      	; 0x225c <SDInit+0x106>
    2264:	90 93 5f 09 	sts	0x095F, r25	; 0x80095f <sg_u16BlockSize+0x1>
    2268:	80 93 5e 09 	sts	0x095E, r24	; 0x80095e <sg_u16BlockSize>
    226c:	60 ec       	ldi	r22, 0xC0	; 192
    226e:	78 ed       	ldi	r23, 0xD8	; 216
    2270:	87 ea       	ldi	r24, 0xA7	; 167
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <SPISetBaudRate>
    2278:	81 e0       	ldi	r24, 0x01	; 1
    227a:	17 c0       	rjmp	.+46     	; 0x22aa <SDInit+0x154>
    227c:	40 e0       	ldi	r20, 0x00	; 0
    227e:	50 e0       	ldi	r21, 0x00	; 0
    2280:	60 e0       	ldi	r22, 0x00	; 0
    2282:	70 e4       	ldi	r23, 0x40	; 64
    2284:	ce 01       	movw	r24, r28
    2286:	01 96       	adiw	r24, 0x01	; 1
    2288:	0e 94 04 20 	call	0x4008	; 0x4008 <SDSendOpConditionArg>
    228c:	81 11       	cpse	r24, r1
    228e:	0c c0       	rjmp	.+24     	; 0x22a8 <SDInit+0x152>
    2290:	81 e0       	ldi	r24, 0x01	; 1
    2292:	0b c0       	rjmp	.+22     	; 0x22aa <SDInit+0x154>
    2294:	80 e0       	ldi	r24, 0x00	; 0
    2296:	09 c0       	rjmp	.+18     	; 0x22aa <SDInit+0x154>
    2298:	80 e0       	ldi	r24, 0x00	; 0
    229a:	07 c0       	rjmp	.+14     	; 0x22aa <SDInit+0x154>
    229c:	80 e0       	ldi	r24, 0x00	; 0
    229e:	05 c0       	rjmp	.+10     	; 0x22aa <SDInit+0x154>
    22a0:	80 e0       	ldi	r24, 0x00	; 0
    22a2:	03 c0       	rjmp	.+6      	; 0x22aa <SDInit+0x154>
    22a4:	80 e0       	ldi	r24, 0x00	; 0
    22a6:	01 c0       	rjmp	.+2      	; 0x22aa <SDInit+0x154>
    22a8:	80 e0       	ldi	r24, 0x00	; 0
    22aa:	0f 90       	pop	r0
    22ac:	0f 90       	pop	r0
    22ae:	0f 90       	pop	r0
    22b0:	0f 90       	pop	r0
    22b2:	0f 90       	pop	r0
    22b4:	df 91       	pop	r29
    22b6:	cf 91       	pop	r28
    22b8:	1f 91       	pop	r17
    22ba:	08 95       	ret

Disassembly of section .text.SDRead:

00002cb6 <SDRead>:

// Read one or more sectors from SD
bool SDRead(uint32_t u32Sector,
			uint8_t *pu8Buffer,
			uint32_t u32SectorCount)
{
    2cb6:	8f 92       	push	r8
    2cb8:	9f 92       	push	r9
    2cba:	af 92       	push	r10
    2cbc:	bf 92       	push	r11
    2cbe:	cf 92       	push	r12
    2cc0:	df 92       	push	r13
    2cc2:	ef 92       	push	r14
    2cc4:	ff 92       	push	r15
    2cc6:	0f 93       	push	r16
    2cc8:	1f 93       	push	r17
    2cca:	cf 93       	push	r28
    2ccc:	df 93       	push	r29
    2cce:	4b 01       	movw	r8, r22
    2cd0:	5c 01       	movw	r10, r24
    2cd2:	ea 01       	movw	r28, r20
    2cd4:	68 01       	movw	r12, r16
    2cd6:	79 01       	movw	r14, r18
	bool bResult = false;
	
	// Pet the watchdog
	WatchdogReset();
    2cd8:	0e 94 13 27 	call	0x4e26	; 0x4e26 <WatchdogReset>
		
	// Assert chip select
	SDSetCS(true);
    2cdc:	81 e0       	ldi	r24, 0x01	; 1
    2cde:	0e 94 6f 26 	call	0x4cde	; 0x4cde <SDSetCS>

	if (1 == u32SectorCount)
    2ce2:	81 e0       	ldi	r24, 0x01	; 1
    2ce4:	c8 16       	cp	r12, r24
    2ce6:	d1 04       	cpc	r13, r1
    2ce8:	e1 04       	cpc	r14, r1
    2cea:	f1 04       	cpc	r15, r1
    2cec:	81 f4       	brne	.+32     	; 0x2d0e <SDRead+0x58>
	{
		if (0 == SDCommand(CMD17,
    2cee:	b5 01       	movw	r22, r10
    2cf0:	a4 01       	movw	r20, r8
    2cf2:	81 e1       	ldi	r24, 0x11	; 17
    2cf4:	0e 94 72 19 	call	0x32e4	; 0x32e4 <SDCommand>
    2cf8:	81 11       	cpse	r24, r1
    2cfa:	35 c0       	rjmp	.+106    	; 0x2d66 <SDRead+0xb0>
						   u32Sector))
		{
			bResult = SDReceiveDataBlock(pu8Buffer,
    2cfc:	60 91 5e 09 	lds	r22, 0x095E	; 0x80095e <sg_u16BlockSize>
    2d00:	70 91 5f 09 	lds	r23, 0x095F	; 0x80095f <sg_u16BlockSize+0x1>
    2d04:	ce 01       	movw	r24, r28
    2d06:	0e 94 45 1b 	call	0x368a	; 0x368a <SDReceiveDataBlock>
    2d0a:	18 2f       	mov	r17, r24
    2d0c:	2f c0       	rjmp	.+94     	; 0x2d6c <SDRead+0xb6>
		}
	}
	else
	{
		// Multisector
		if (0 == SDCommand(CMD18,
    2d0e:	b5 01       	movw	r22, r10
    2d10:	a4 01       	movw	r20, r8
    2d12:	82 e1       	ldi	r24, 0x12	; 18
    2d14:	0e 94 72 19 	call	0x32e4	; 0x32e4 <SDCommand>
    2d18:	88 23       	and	r24, r24
    2d1a:	19 f0       	breq	.+6      	; 0x2d22 <SDRead+0x6c>
    2d1c:	26 c0       	rjmp	.+76     	; 0x2d6a <SDRead+0xb4>
				WatchdogReset();
				
				pu8Buffer += sg_u16BlockSize;
			} 
			while ((bResult) &&
				   (u32SectorCount--));
    2d1e:	6c 01       	movw	r12, r24
    2d20:	7d 01       	movw	r14, r26
		if (0 == SDCommand(CMD18,
						   u32Sector))
		{
			do 
			{
				bResult = SDReceiveDataBlock(pu8Buffer,
    2d22:	60 91 5e 09 	lds	r22, 0x095E	; 0x80095e <sg_u16BlockSize>
    2d26:	70 91 5f 09 	lds	r23, 0x095F	; 0x80095f <sg_u16BlockSize+0x1>
    2d2a:	ce 01       	movw	r24, r28
    2d2c:	0e 94 45 1b 	call	0x368a	; 0x368a <SDReceiveDataBlock>
    2d30:	18 2f       	mov	r17, r24
							 				 sg_u16BlockSize);
				// Pet the watchdog
				WatchdogReset();
    2d32:	0e 94 13 27 	call	0x4e26	; 0x4e26 <WatchdogReset>
				
				pu8Buffer += sg_u16BlockSize;
    2d36:	80 91 5e 09 	lds	r24, 0x095E	; 0x80095e <sg_u16BlockSize>
    2d3a:	90 91 5f 09 	lds	r25, 0x095F	; 0x80095f <sg_u16BlockSize+0x1>
    2d3e:	c8 0f       	add	r28, r24
    2d40:	d9 1f       	adc	r29, r25
			} 
			while ((bResult) &&
				   (u32SectorCount--));
    2d42:	11 23       	and	r17, r17
    2d44:	49 f0       	breq	.+18     	; 0x2d58 <SDRead+0xa2>
    2d46:	d7 01       	movw	r26, r14
    2d48:	c6 01       	movw	r24, r12
    2d4a:	01 97       	sbiw	r24, 0x01	; 1
    2d4c:	a1 09       	sbc	r26, r1
    2d4e:	b1 09       	sbc	r27, r1
				// Pet the watchdog
				WatchdogReset();
				
				pu8Buffer += sg_u16BlockSize;
			} 
			while ((bResult) &&
    2d50:	cd 28       	or	r12, r13
    2d52:	ce 28       	or	r12, r14
    2d54:	cf 28       	or	r12, r15
    2d56:	19 f7       	brne	.-58     	; 0x2d1e <SDRead+0x68>
				   (u32SectorCount--));
				   
			// Regardless, send a stop command
			(void) SDCommand(CMD12,
    2d58:	40 e0       	ldi	r20, 0x00	; 0
    2d5a:	50 e0       	ldi	r21, 0x00	; 0
    2d5c:	ba 01       	movw	r22, r20
    2d5e:	8c e0       	ldi	r24, 0x0C	; 12
    2d60:	0e 94 72 19 	call	0x32e4	; 0x32e4 <SDCommand>
    2d64:	03 c0       	rjmp	.+6      	; 0x2d6c <SDRead+0xb6>
// Read one or more sectors from SD
bool SDRead(uint32_t u32Sector,
			uint8_t *pu8Buffer,
			uint32_t u32SectorCount)
{
	bool bResult = false;
    2d66:	10 e0       	ldi	r17, 0x00	; 0
    2d68:	01 c0       	rjmp	.+2      	; 0x2d6c <SDRead+0xb6>
    2d6a:	10 e0       	ldi	r17, 0x00	; 0
		{
			// Failed
		}
	}
	
	SDSetCS(false);
    2d6c:	80 e0       	ldi	r24, 0x00	; 0
    2d6e:	0e 94 6f 26 	call	0x4cde	; 0x4cde <SDSetCS>

	return(bResult);
}
    2d72:	81 2f       	mov	r24, r17
    2d74:	df 91       	pop	r29
    2d76:	cf 91       	pop	r28
    2d78:	1f 91       	pop	r17
    2d7a:	0f 91       	pop	r16
    2d7c:	ff 90       	pop	r15
    2d7e:	ef 90       	pop	r14
    2d80:	df 90       	pop	r13
    2d82:	cf 90       	pop	r12
    2d84:	bf 90       	pop	r11
    2d86:	af 90       	pop	r10
    2d88:	9f 90       	pop	r9
    2d8a:	8f 90       	pop	r8
    2d8c:	08 95       	ret

Disassembly of section .text.SDWrite:

00002afe <SDWrite>:

bool SDGetBlockSize(uint32_t *pu32BlockSize)
{
	*pu32BlockSize = sg_u16BlockSize;
	return(true);
}
    2afe:	8f 92       	push	r8
    2b00:	9f 92       	push	r9
    2b02:	af 92       	push	r10
    2b04:	bf 92       	push	r11
    2b06:	cf 92       	push	r12
    2b08:	df 92       	push	r13
    2b0a:	ef 92       	push	r14
    2b0c:	ff 92       	push	r15
    2b0e:	0f 93       	push	r16
    2b10:	1f 93       	push	r17
    2b12:	cf 93       	push	r28
    2b14:	df 93       	push	r29
    2b16:	4b 01       	movw	r8, r22
    2b18:	5c 01       	movw	r10, r24
    2b1a:	ea 01       	movw	r28, r20
    2b1c:	68 01       	movw	r12, r16
    2b1e:	79 01       	movw	r14, r18
    2b20:	0e 94 13 27 	call	0x4e26	; 0x4e26 <WatchdogReset>
    2b24:	81 e0       	ldi	r24, 0x01	; 1
    2b26:	0e 94 6f 26 	call	0x4cde	; 0x4cde <SDSetCS>
    2b2a:	81 e0       	ldi	r24, 0x01	; 1
    2b2c:	c8 16       	cp	r12, r24
    2b2e:	d1 04       	cpc	r13, r1
    2b30:	e1 04       	cpc	r14, r1
    2b32:	f1 04       	cpc	r15, r1
    2b34:	89 f4       	brne	.+34     	; 0x2b58 <SDWrite+0x5a>
    2b36:	b5 01       	movw	r22, r10
    2b38:	a4 01       	movw	r20, r8
    2b3a:	88 e1       	ldi	r24, 0x18	; 24
    2b3c:	0e 94 72 19 	call	0x32e4	; 0x32e4 <SDCommand>
    2b40:	81 11       	cpse	r24, r1
    2b42:	37 c0       	rjmp	.+110    	; 0x2bb2 <SDWrite+0xb4>
    2b44:	60 91 5e 09 	lds	r22, 0x095E	; 0x80095e <sg_u16BlockSize>
    2b48:	70 91 5f 09 	lds	r23, 0x095F	; 0x80095f <sg_u16BlockSize+0x1>
    2b4c:	4e ef       	ldi	r20, 0xFE	; 254
    2b4e:	ce 01       	movw	r24, r28
    2b50:	0e 94 56 18 	call	0x30ac	; 0x30ac <SDTransmitDataBlock>
    2b54:	18 2f       	mov	r17, r24
    2b56:	30 c0       	rjmp	.+96     	; 0x2bb8 <SDWrite+0xba>
    2b58:	b5 01       	movw	r22, r10
    2b5a:	a4 01       	movw	r20, r8
    2b5c:	89 e1       	ldi	r24, 0x19	; 25
    2b5e:	0e 94 72 19 	call	0x32e4	; 0x32e4 <SDCommand>
    2b62:	88 23       	and	r24, r24
    2b64:	19 f0       	breq	.+6      	; 0x2b6c <SDWrite+0x6e>
    2b66:	27 c0       	rjmp	.+78     	; 0x2bb6 <SDWrite+0xb8>
    2b68:	6c 01       	movw	r12, r24
    2b6a:	7d 01       	movw	r14, r26
    2b6c:	60 91 5e 09 	lds	r22, 0x095E	; 0x80095e <sg_u16BlockSize>
    2b70:	70 91 5f 09 	lds	r23, 0x095F	; 0x80095f <sg_u16BlockSize+0x1>
    2b74:	4c ef       	ldi	r20, 0xFC	; 252
    2b76:	ce 01       	movw	r24, r28
    2b78:	0e 94 56 18 	call	0x30ac	; 0x30ac <SDTransmitDataBlock>
    2b7c:	18 2f       	mov	r17, r24
    2b7e:	0e 94 13 27 	call	0x4e26	; 0x4e26 <WatchdogReset>
    2b82:	80 91 5e 09 	lds	r24, 0x095E	; 0x80095e <sg_u16BlockSize>
    2b86:	90 91 5f 09 	lds	r25, 0x095F	; 0x80095f <sg_u16BlockSize+0x1>
    2b8a:	c8 0f       	add	r28, r24
    2b8c:	d9 1f       	adc	r29, r25
    2b8e:	11 23       	and	r17, r17
    2b90:	49 f0       	breq	.+18     	; 0x2ba4 <SDWrite+0xa6>
    2b92:	d7 01       	movw	r26, r14
    2b94:	c6 01       	movw	r24, r12
    2b96:	01 97       	sbiw	r24, 0x01	; 1
    2b98:	a1 09       	sbc	r26, r1
    2b9a:	b1 09       	sbc	r27, r1
    2b9c:	cd 28       	or	r12, r13
    2b9e:	ce 28       	or	r12, r14
    2ba0:	cf 28       	or	r12, r15
    2ba2:	11 f7       	brne	.-60     	; 0x2b68 <SDWrite+0x6a>
    2ba4:	40 e0       	ldi	r20, 0x00	; 0
    2ba6:	50 e0       	ldi	r21, 0x00	; 0
    2ba8:	ba 01       	movw	r22, r20
    2baa:	8c e0       	ldi	r24, 0x0C	; 12
    2bac:	0e 94 72 19 	call	0x32e4	; 0x32e4 <SDCommand>
    2bb0:	03 c0       	rjmp	.+6      	; 0x2bb8 <SDWrite+0xba>
    2bb2:	10 e0       	ldi	r17, 0x00	; 0
    2bb4:	01 c0       	rjmp	.+2      	; 0x2bb8 <SDWrite+0xba>
    2bb6:	10 e0       	ldi	r17, 0x00	; 0
    2bb8:	80 e0       	ldi	r24, 0x00	; 0
    2bba:	0e 94 6f 26 	call	0x4cde	; 0x4cde <SDSetCS>
    2bbe:	81 2f       	mov	r24, r17
    2bc0:	df 91       	pop	r29
    2bc2:	cf 91       	pop	r28
    2bc4:	1f 91       	pop	r17
    2bc6:	0f 91       	pop	r16
    2bc8:	ff 90       	pop	r15
    2bca:	ef 90       	pop	r14
    2bcc:	df 90       	pop	r13
    2bce:	cf 90       	pop	r12
    2bd0:	bf 90       	pop	r11
    2bd2:	af 90       	pop	r10
    2bd4:	9f 90       	pop	r9
    2bd6:	8f 90       	pop	r8
    2bd8:	08 95       	ret

Disassembly of section .text.SPITransaction:

00003f58 <SPITransaction>:

// Do a SPI transaction - read or write (or write pattern)
void SPITransaction(ESPIBusState eSPIBusState,
					uint8_t *pu8Buffer,
					uint16_t u16ByteCount)
{
    3f58:	fb 01       	movw	r30, r22
	// If we're transmitting, start the transaction
	if (ESTATE_RX_DATA == eSPIBusState)
    3f5a:	83 30       	cpi	r24, 0x03	; 3
    3f5c:	71 f4       	brne	.+28     	; 0x3f7a <SPITransaction+0x22>
    3f5e:	08 c0       	rjmp	.+16     	; 0x3f70 <SPITransaction+0x18>
	{
		while (u16ByteCount--)
		{
			// Clock out 0xff so we can receive the data
			SPDR = 0xff;
    3f60:	2f ef       	ldi	r18, 0xFF	; 255
    3f62:	2e bd       	out	0x2e, r18	; 46

			// Wait for data to be available
			while (0 == (SPSR & (1 << SPIF)));
    3f64:	0d b4       	in	r0, 0x2d	; 45
    3f66:	07 fe       	sbrs	r0, 7
    3f68:	fd cf       	rjmp	.-6      	; 0x3f64 <SPITransaction+0xc>
			
			// Read the byte
			*pu8Buffer = SPDR;
    3f6a:	2e b5       	in	r18, 0x2e	; 46
    3f6c:	21 93       	st	Z+, r18
					uint16_t u16ByteCount)
{
	// If we're transmitting, start the transaction
	if (ESTATE_RX_DATA == eSPIBusState)
	{
		while (u16ByteCount--)
    3f6e:	ac 01       	movw	r20, r24
    3f70:	ca 01       	movw	r24, r20
    3f72:	01 97       	sbiw	r24, 0x01	; 1
    3f74:	45 2b       	or	r20, r21
    3f76:	a1 f7       	brne	.-24     	; 0x3f60 <SPITransaction+0x8>
    3f78:	08 95       	ret
			*pu8Buffer = SPDR;
			++pu8Buffer;
		}
	}
	else
	if (ESTATE_TX_DATA == eSPIBusState)
    3f7a:	81 30       	cpi	r24, 0x01	; 1
    3f7c:	61 f4       	brne	.+24     	; 0x3f96 <SPITransaction+0x3e>
    3f7e:	06 c0       	rjmp	.+12     	; 0x3f8c <SPITransaction+0x34>
	{
		// Clock out whatever our data is in our queue
		while (u16ByteCount--)
		{
			SPDR = *pu8Buffer;
    3f80:	21 91       	ld	r18, Z+
    3f82:	2e bd       	out	0x2e, r18	; 46
			++pu8Buffer;
			
			// Wait for the transmit to complete
			while (0 == (SPSR & (1 << SPIF)));
    3f84:	0d b4       	in	r0, 0x2d	; 45
    3f86:	07 fe       	sbrs	r0, 7
    3f88:	fd cf       	rjmp	.-6      	; 0x3f84 <SPITransaction+0x2c>
	}
	else
	if (ESTATE_TX_DATA == eSPIBusState)
	{
		// Clock out whatever our data is in our queue
		while (u16ByteCount--)
    3f8a:	ac 01       	movw	r20, r24
    3f8c:	ca 01       	movw	r24, r20
    3f8e:	01 97       	sbiw	r24, 0x01	; 1
    3f90:	45 2b       	or	r20, r21
    3f92:	b1 f7       	brne	.-20     	; 0x3f80 <SPITransaction+0x28>
    3f94:	08 95       	ret
			// Wait for the transmit to complete
			while (0 == (SPSR & (1 << SPIF)));
		}
	}
	else
	if (ESTATE_TX_PATTERN == eSPIBusState)
    3f96:	82 30       	cpi	r24, 0x02	; 2
    3f98:	51 f4       	brne	.+20     	; 0x3fae <SPITransaction+0x56>
    3f9a:	05 c0       	rjmp	.+10     	; 0x3fa6 <SPITransaction+0x4e>
		// Clock out whatever our data is in our queue
		while (u16ByteCount--)
		{
			// This is OK - as the position where the pointer would normally
			// be is just the pattern (single byte)
			SPDR = (uint8_t) (pu8Buffer);
    3f9c:	ee bd       	out	0x2e, r30	; 46
		
			// Wait for the transmit to complete
			while (0 == (SPSR & (1 << SPIF)));
    3f9e:	0d b4       	in	r0, 0x2d	; 45
    3fa0:	07 fe       	sbrs	r0, 7
    3fa2:	fd cf       	rjmp	.-6      	; 0x3f9e <SPITransaction+0x46>
	}
	else
	if (ESTATE_TX_PATTERN == eSPIBusState)
	{
		// Clock out whatever our data is in our queue
		while (u16ByteCount--)
    3fa4:	ac 01       	movw	r20, r24
    3fa6:	ca 01       	movw	r24, r20
    3fa8:	01 97       	sbiw	r24, 0x01	; 1
    3faa:	45 2b       	or	r20, r21
    3fac:	b9 f7       	brne	.-18     	; 0x3f9c <SPITransaction+0x44>
    3fae:	08 95       	ret

Disassembly of section .text.SPISetBaudRate:

00002e58 <SPISetBaudRate>:
	{FCLKIO >> 7,	(1 << SPR1) | (0 << SPR0),	0},					// /128
};

// Sets the SPI baud rate and returns the actual baud rate selected
uint32_t SPISetBaudRate(uint32_t u32BaudRate)
{
    2e58:	cf 92       	push	r12
    2e5a:	df 92       	push	r13
    2e5c:	ef 92       	push	r14
    2e5e:	ff 92       	push	r15
    2e60:	6b 01       	movw	r12, r22
    2e62:	7c 01       	movw	r14, r24
	uint8_t u8Loop;
	
	// Find the baud rate that's the closest
	for (u8Loop = 0; u8Loop < (sizeof(sg_sSPIBaudRates) / sizeof(sg_sSPIBaudRates[0])); u8Loop++)
    2e64:	20 e0       	ldi	r18, 0x00	; 0
    2e66:	19 c0       	rjmp	.+50     	; 0x2e9a <SPISetBaudRate+0x42>
	{
		if (u32BaudRate >= sg_sSPIBaudRates[u8Loop].u32BaudRate)
    2e68:	82 2f       	mov	r24, r18
    2e6a:	90 e0       	ldi	r25, 0x00	; 0
    2e6c:	ac 01       	movw	r20, r24
    2e6e:	44 0f       	add	r20, r20
    2e70:	55 1f       	adc	r21, r21
    2e72:	84 0f       	add	r24, r20
    2e74:	95 1f       	adc	r25, r21
    2e76:	88 0f       	add	r24, r24
    2e78:	99 1f       	adc	r25, r25
    2e7a:	09 2e       	mov	r0, r25
    2e7c:	00 0c       	add	r0, r0
    2e7e:	aa 0b       	sbc	r26, r26
    2e80:	85 55       	subi	r24, 0x55	; 85
    2e82:	9d 4f       	sbci	r25, 0xFD	; 253
    2e84:	af 4f       	sbci	r26, 0xFF	; 255
    2e86:	fc 01       	movw	r30, r24
    2e88:	5a 2f       	mov	r21, r26
    2e8a:	0e 94 20 26 	call	0x4c40	; 0x4c40 <__xload_4>
    2e8e:	c6 16       	cp	r12, r22
    2e90:	d7 06       	cpc	r13, r23
    2e92:	e8 06       	cpc	r14, r24
    2e94:	f9 06       	cpc	r15, r25
    2e96:	18 f4       	brcc	.+6      	; 0x2e9e <SPISetBaudRate+0x46>
uint32_t SPISetBaudRate(uint32_t u32BaudRate)
{
	uint8_t u8Loop;
	
	// Find the baud rate that's the closest
	for (u8Loop = 0; u8Loop < (sizeof(sg_sSPIBaudRates) / sizeof(sg_sSPIBaudRates[0])); u8Loop++)
    2e98:	2f 5f       	subi	r18, 0xFF	; 255
    2e9a:	27 30       	cpi	r18, 0x07	; 7
    2e9c:	28 f3       	brcs	.-54     	; 0x2e68 <SPISetBaudRate+0x10>
			break;
		}
	}

	// If we've hit the end, use the slowest speed
	if ((sizeof(sg_sSPIBaudRates) / sizeof(sg_sSPIBaudRates[0])) == u8Loop)
    2e9e:	27 30       	cpi	r18, 0x07	; 7
    2ea0:	09 f4       	brne	.+2      	; 0x2ea4 <SPISetBaudRate+0x4c>
	{
		u8Loop--;
    2ea2:	21 50       	subi	r18, 0x01	; 1
	}

	// Found one!
	SPCR = (SPCR & (uint8_t) ~((1 << SPR1) | (1 << SPR0))) | sg_sSPIBaudRates[u8Loop].u8SPCR;
    2ea4:	6c b5       	in	r22, 0x2c	; 44
    2ea6:	30 e0       	ldi	r19, 0x00	; 0
    2ea8:	a9 01       	movw	r20, r18
    2eaa:	44 0f       	add	r20, r20
    2eac:	55 1f       	adc	r21, r21
    2eae:	ca 01       	movw	r24, r20
    2eb0:	82 0f       	add	r24, r18
    2eb2:	93 1f       	adc	r25, r19
    2eb4:	88 0f       	add	r24, r24
    2eb6:	99 1f       	adc	r25, r25
    2eb8:	04 96       	adiw	r24, 0x04	; 4
    2eba:	09 2e       	mov	r0, r25
    2ebc:	00 0c       	add	r0, r0
    2ebe:	aa 0b       	sbc	r26, r26
    2ec0:	85 55       	subi	r24, 0x55	; 85
    2ec2:	9d 4f       	sbci	r25, 0xFD	; 253
    2ec4:	af 4f       	sbci	r26, 0xFF	; 255
    2ec6:	fc 01       	movw	r30, r24
    2ec8:	84 91       	lpm	r24, Z
    2eca:	a7 fd       	sbrc	r26, 7
    2ecc:	80 81       	ld	r24, Z
    2ece:	6c 7f       	andi	r22, 0xFC	; 252
    2ed0:	86 2b       	or	r24, r22
    2ed2:	8c bd       	out	0x2c, r24	; 44
	SPSR = (SPSR & (uint8_t) ~(1 << SPI2X)) | sg_sSPIBaudRates[u8Loop].u8SPSR;
    2ed4:	6d b5       	in	r22, 0x2d	; 45
    2ed6:	ca 01       	movw	r24, r20
    2ed8:	82 0f       	add	r24, r18
    2eda:	93 1f       	adc	r25, r19
    2edc:	88 0f       	add	r24, r24
    2ede:	99 1f       	adc	r25, r25
    2ee0:	05 96       	adiw	r24, 0x05	; 5
    2ee2:	09 2e       	mov	r0, r25
    2ee4:	00 0c       	add	r0, r0
    2ee6:	aa 0b       	sbc	r26, r26
    2ee8:	85 55       	subi	r24, 0x55	; 85
    2eea:	9d 4f       	sbci	r25, 0xFD	; 253
    2eec:	af 4f       	sbci	r26, 0xFF	; 255
    2eee:	fc 01       	movw	r30, r24
    2ef0:	84 91       	lpm	r24, Z
    2ef2:	a7 fd       	sbrc	r26, 7
    2ef4:	80 81       	ld	r24, Z
    2ef6:	6e 7f       	andi	r22, 0xFE	; 254
    2ef8:	86 2b       	or	r24, r22
    2efa:	8d bd       	out	0x2d, r24	; 45
	return(sg_sSPIBaudRates[u8Loop].u32BaudRate);
    2efc:	24 0f       	add	r18, r20
    2efe:	35 1f       	adc	r19, r21
    2f00:	22 0f       	add	r18, r18
    2f02:	33 1f       	adc	r19, r19
    2f04:	03 2e       	mov	r0, r19
    2f06:	00 0c       	add	r0, r0
    2f08:	44 0b       	sbc	r20, r20
    2f0a:	25 55       	subi	r18, 0x55	; 85
    2f0c:	3d 4f       	sbci	r19, 0xFD	; 253
    2f0e:	4f 4f       	sbci	r20, 0xFF	; 255
    2f10:	f9 01       	movw	r30, r18
    2f12:	54 2f       	mov	r21, r20
    2f14:	0e 94 20 26 	call	0x4c40	; 0x4c40 <__xload_4>
}
    2f18:	ff 90       	pop	r15
    2f1a:	ef 90       	pop	r14
    2f1c:	df 90       	pop	r13
    2f1e:	cf 90       	pop	r12
    2f20:	08 95       	ret

Disassembly of section .text.SPIInit:

0000473a <SPIInit>:

void SPIInit(void)
{
	// Set MOSI and SCK to output
	DDR_SPI |= (1 << MOSI) | (1 << SCK);
    473a:	84 b1       	in	r24, 0x04	; 4
    473c:	82 68       	ori	r24, 0x82	; 130
    473e:	84 b9       	out	0x04, r24	; 4
	DDR_SPI &= (uint8_t) ~(1 << MISO);
    4740:	84 b1       	in	r24, 0x04	; 4
    4742:	8e 7f       	andi	r24, 0xFE	; 254
    4744:	84 b9       	out	0x04, r24	; 4
	
	// MISO As input (need our pullup)
	PORT_SPI |= (1 << MISO);
    4746:	85 b1       	in	r24, 0x05	; 5
    4748:	81 60       	ori	r24, 0x01	; 1
    474a:	85 b9       	out	0x05, r24	; 5
	
	// Enable SPI engine, master only, and clock to fosc/128 and SPI mode 0 (which is what SD wants)
	SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR1) | (1 << SPR0);
    474c:	83 e5       	ldi	r24, 0x53	; 83
    474e:	8c bd       	out	0x2c, r24	; 44
	
	// Zero out SPSR (all zeroes)
	SPSR = 0;
    4750:	1d bc       	out	0x2d, r1	; 45
	
	// Zero out SPIPS so the SPI IP is connected to MISO, MOSI, SCK, and SS
	MCUCR &= (uint8_t) ~(1 << SPIPS);
    4752:	85 b7       	in	r24, 0x35	; 53
    4754:	8f 77       	andi	r24, 0x7F	; 127
    4756:	85 bf       	out	0x35, r24	; 53

	// Set to something slow/compatible
	(void) SPISetBaudRate(400000);
    4758:	60 e8       	ldi	r22, 0x80	; 128
    475a:	7a e1       	ldi	r23, 0x1A	; 26
    475c:	86 e0       	ldi	r24, 0x06	; 6
    475e:	90 e0       	ldi	r25, 0x00	; 0
    4760:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <SPISetBaudRate>
    4764:	08 95       	ret

Disassembly of section .text.readGlobalState:

000043c8 <readGlobalState>:

static GlobalState gState;
static uint32_t currentSector;
static uint8_t __attribute__((aligned(4))) frameBuffer[FRAME_BUFFER_SIZE];  // Enlarged to handle full frame

static bool readGlobalState(void) {
    43c8:	0f 93       	push	r16
    43ca:	1f 93       	push	r17
    43cc:	cf 93       	push	r28
	if (!SDRead(0, frameBuffer, 1)) {
    43ce:	01 e0       	ldi	r16, 0x01	; 1
    43d0:	10 e0       	ldi	r17, 0x00	; 0
    43d2:	20 e0       	ldi	r18, 0x00	; 0
    43d4:	30 e0       	ldi	r19, 0x00	; 0
    43d6:	4c e2       	ldi	r20, 0x2C	; 44
    43d8:	53 e0       	ldi	r21, 0x03	; 3
    43da:	60 e0       	ldi	r22, 0x00	; 0
    43dc:	70 e0       	ldi	r23, 0x00	; 0
    43de:	cb 01       	movw	r24, r22
    43e0:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <SDRead>
    43e4:	c8 2f       	mov	r28, r24
    43e6:	88 23       	and	r24, r24
    43e8:	49 f0       	breq	.+18     	; 0x43fc <readGlobalState+0x34>
		return false;
	}
	memcpy(&gState, frameBuffer, sizeof(GlobalState));
    43ea:	4c e2       	ldi	r20, 0x2C	; 44
    43ec:	53 e0       	ldi	r21, 0x03	; 3
    43ee:	60 e8       	ldi	r22, 0x80	; 128
    43f0:	28 ed       	ldi	r18, 0xD8	; 216
    43f2:	31 e0       	ldi	r19, 0x01	; 1
    43f4:	8c e2       	ldi	r24, 0x2C	; 44
    43f6:	97 e0       	ldi	r25, 0x07	; 7
    43f8:	0e 94 13 23 	call	0x4626	; 0x4626 <memcpy>
	// TODO: Implement checksum verification
	return true;
}
    43fc:	8c 2f       	mov	r24, r28
    43fe:	cf 91       	pop	r28
    4400:	1f 91       	pop	r17
    4402:	0f 91       	pop	r16
    4404:	08 95       	ret

Disassembly of section .text.writeGlobalState:

000045f4 <writeGlobalState>:

static bool writeGlobalState(void) {
    45f4:	0f 93       	push	r16
    45f6:	1f 93       	push	r17
	memcpy(frameBuffer, &gState, sizeof(GlobalState));
    45f8:	4c e2       	ldi	r20, 0x2C	; 44
    45fa:	57 e0       	ldi	r21, 0x07	; 7
    45fc:	60 e8       	ldi	r22, 0x80	; 128
    45fe:	28 ed       	ldi	r18, 0xD8	; 216
    4600:	31 e0       	ldi	r19, 0x01	; 1
    4602:	8c e2       	ldi	r24, 0x2C	; 44
    4604:	93 e0       	ldi	r25, 0x03	; 3
    4606:	0e 94 13 23 	call	0x4626	; 0x4626 <memcpy>
	// TODO: Calculate and update checksum
	return SDWrite(0, frameBuffer, 1);
    460a:	01 e0       	ldi	r16, 0x01	; 1
    460c:	10 e0       	ldi	r17, 0x00	; 0
    460e:	20 e0       	ldi	r18, 0x00	; 0
    4610:	30 e0       	ldi	r19, 0x00	; 0
    4612:	4c e2       	ldi	r20, 0x2C	; 44
    4614:	53 e0       	ldi	r21, 0x03	; 3
    4616:	60 e0       	ldi	r22, 0x00	; 0
    4618:	70 e0       	ldi	r23, 0x00	; 0
    461a:	cb 01       	movw	r24, r22
    461c:	0e 94 7f 15 	call	0x2afe	; 0x2afe <SDWrite>
}
    4620:	1f 91       	pop	r17
    4622:	0f 91       	pop	r16
    4624:	08 95       	ret

Disassembly of section .text.updateSessionMap:

00002bda <updateSessionMap>:

static bool updateSessionMap(void) {
    2bda:	8f 92       	push	r8
    2bdc:	9f 92       	push	r9
    2bde:	af 92       	push	r10
    2be0:	bf 92       	push	r11
    2be2:	cf 92       	push	r12
    2be4:	df 92       	push	r13
    2be6:	ef 92       	push	r14
    2be8:	ff 92       	push	r15
    2bea:	0f 93       	push	r16
    2bec:	1f 93       	push	r17
	uint32_t mapSector = gState.activeSessionMapSector;
    2bee:	ec e2       	ldi	r30, 0x2C	; 44
    2bf0:	f7 e0       	ldi	r31, 0x07	; 7
    2bf2:	c4 8c       	ldd	r12, Z+28	; 0x1c
    2bf4:	d5 8c       	ldd	r13, Z+29	; 0x1d
    2bf6:	e6 8c       	ldd	r14, Z+30	; 0x1e
    2bf8:	f7 8c       	ldd	r15, Z+31	; 0x1f
	uint32_t mapOffset = gState.activeSessionMapOffset;
    2bfa:	80 a0       	ldd	r8, Z+32	; 0x20
    2bfc:	91 a0       	ldd	r9, Z+33	; 0x21
    2bfe:	a2 a0       	ldd	r10, Z+34	; 0x22
    2c00:	b3 a0       	ldd	r11, Z+35	; 0x23

	if (!SDRead(mapSector, frameBuffer, 1)) {
    2c02:	01 e0       	ldi	r16, 0x01	; 1
    2c04:	10 e0       	ldi	r17, 0x00	; 0
    2c06:	20 e0       	ldi	r18, 0x00	; 0
    2c08:	30 e0       	ldi	r19, 0x00	; 0
    2c0a:	4c e2       	ldi	r20, 0x2C	; 44
    2c0c:	53 e0       	ldi	r21, 0x03	; 3
    2c0e:	c7 01       	movw	r24, r14
    2c10:	b6 01       	movw	r22, r12
    2c12:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <SDRead>
    2c16:	88 23       	and	r24, r24
    2c18:	09 f4       	brne	.+2      	; 0x2c1c <updateSessionMap+0x42>
    2c1a:	42 c0       	rjmp	.+132    	; 0x2ca0 <updateSessionMap+0xc6>
		return false;
	}

	// Update session map
	*(uint64_t*)(frameBuffer + mapOffset) = gState.newSessionSector;
    2c1c:	f4 01       	movw	r30, r8
    2c1e:	e4 5d       	subi	r30, 0xD4	; 212
    2c20:	fc 4f       	sbci	r31, 0xFC	; 252
    2c22:	00 91 44 07 	lds	r16, 0x0744	; 0x800744 <gState+0x18>
    2c26:	10 91 45 07 	lds	r17, 0x0745	; 0x800745 <gState+0x19>
    2c2a:	20 91 46 07 	lds	r18, 0x0746	; 0x800746 <gState+0x1a>
    2c2e:	30 91 47 07 	lds	r19, 0x0747	; 0x800747 <gState+0x1b>
    2c32:	00 83       	st	Z, r16
    2c34:	11 83       	std	Z+1, r17	; 0x01
    2c36:	22 83       	std	Z+2, r18	; 0x02
    2c38:	33 83       	std	Z+3, r19	; 0x03
    2c3a:	14 82       	std	Z+4, r1	; 0x04
    2c3c:	15 82       	std	Z+5, r1	; 0x05
    2c3e:	16 82       	std	Z+6, r1	; 0x06
    2c40:	17 82       	std	Z+7, r1	; 0x07

	if (!SDWrite(mapSector, frameBuffer, 1)) {
    2c42:	01 e0       	ldi	r16, 0x01	; 1
    2c44:	10 e0       	ldi	r17, 0x00	; 0
    2c46:	20 e0       	ldi	r18, 0x00	; 0
    2c48:	30 e0       	ldi	r19, 0x00	; 0
    2c4a:	4c e2       	ldi	r20, 0x2C	; 44
    2c4c:	53 e0       	ldi	r21, 0x03	; 3
    2c4e:	c7 01       	movw	r24, r14
    2c50:	b6 01       	movw	r22, r12
    2c52:	0e 94 7f 15 	call	0x2afe	; 0x2afe <SDWrite>
    2c56:	88 23       	and	r24, r24
    2c58:	19 f1       	breq	.+70     	; 0x2ca0 <updateSessionMap+0xc6>
		return false;
	}

	// Update map pointers
	gState.activeSessionMapOffset += sizeof(uint64_t);
    2c5a:	ec e2       	ldi	r30, 0x2C	; 44
    2c5c:	f7 e0       	ldi	r31, 0x07	; 7
    2c5e:	80 a1       	ldd	r24, Z+32	; 0x20
    2c60:	91 a1       	ldd	r25, Z+33	; 0x21
    2c62:	a2 a1       	ldd	r26, Z+34	; 0x22
    2c64:	b3 a1       	ldd	r27, Z+35	; 0x23
    2c66:	08 96       	adiw	r24, 0x08	; 8
    2c68:	a1 1d       	adc	r26, r1
    2c6a:	b1 1d       	adc	r27, r1
    2c6c:	80 a3       	std	Z+32, r24	; 0x20
    2c6e:	91 a3       	std	Z+33, r25	; 0x21
    2c70:	a2 a3       	std	Z+34, r26	; 0x22
    2c72:	b3 a3       	std	Z+35, r27	; 0x23
	if (gState.activeSessionMapOffset >= SECTOR_SIZE) {
    2c74:	81 15       	cp	r24, r1
    2c76:	92 40       	sbci	r25, 0x02	; 2
    2c78:	a1 05       	cpc	r26, r1
    2c7a:	b1 05       	cpc	r27, r1
    2c7c:	78 f0       	brcs	.+30     	; 0x2c9c <updateSessionMap+0xc2>
		gState.activeSessionMapSector++;
    2c7e:	84 8d       	ldd	r24, Z+28	; 0x1c
    2c80:	95 8d       	ldd	r25, Z+29	; 0x1d
    2c82:	a6 8d       	ldd	r26, Z+30	; 0x1e
    2c84:	b7 8d       	ldd	r27, Z+31	; 0x1f
    2c86:	01 96       	adiw	r24, 0x01	; 1
    2c88:	a1 1d       	adc	r26, r1
    2c8a:	b1 1d       	adc	r27, r1
    2c8c:	84 8f       	std	Z+28, r24	; 0x1c
    2c8e:	95 8f       	std	Z+29, r25	; 0x1d
    2c90:	a6 8f       	std	Z+30, r26	; 0x1e
    2c92:	b7 8f       	std	Z+31, r27	; 0x1f
		gState.activeSessionMapOffset = 0;
    2c94:	10 a2       	std	Z+32, r1	; 0x20
    2c96:	11 a2       	std	Z+33, r1	; 0x21
    2c98:	12 a2       	std	Z+34, r1	; 0x22
    2c9a:	13 a2       	std	Z+35, r1	; 0x23
	}

	return writeGlobalState();
    2c9c:	0e 94 fa 22 	call	0x45f4	; 0x45f4 <writeGlobalState>
}
    2ca0:	1f 91       	pop	r17
    2ca2:	0f 91       	pop	r16
    2ca4:	ff 90       	pop	r15
    2ca6:	ef 90       	pop	r14
    2ca8:	df 90       	pop	r13
    2caa:	cf 90       	pop	r12
    2cac:	bf 90       	pop	r11
    2cae:	af 90       	pop	r10
    2cb0:	9f 90       	pop	r9
    2cb2:	8f 90       	pop	r8
    2cb4:	08 95       	ret

Disassembly of section .text.STORE_Init:

000038a8 <STORE_Init>:

bool STORE_Init(void) {
    38a8:	cf 93       	push	r28
	if (!SDInit()) {
    38aa:	0e 94 ab 10 	call	0x2156	; 0x2156 <SDInit>
    38ae:	c8 2f       	mov	r28, r24
    38b0:	88 23       	and	r24, r24
    38b2:	c1 f1       	breq	.+112    	; 0x3924 <STORE_Init+0x7c>
		return false;
	}

	if (!readGlobalState()) {
    38b4:	0e 94 e4 21 	call	0x43c8	; 0x43c8 <readGlobalState>
    38b8:	81 11       	cpse	r24, r1
    38ba:	22 c0       	rjmp	.+68     	; 0x3900 <STORE_Init+0x58>
		// Initialize global state if it doesn't exist
		memset(&gState, 0, sizeof(GlobalState));
    38bc:	ec e2       	ldi	r30, 0x2C	; 44
    38be:	f7 e0       	ldi	r31, 0x07	; 7
    38c0:	88 ed       	ldi	r24, 0xD8	; 216
    38c2:	91 e0       	ldi	r25, 0x01	; 1
    38c4:	df 01       	movw	r26, r30
    38c6:	9c 01       	movw	r18, r24
    38c8:	1d 92       	st	X+, r1
    38ca:	21 50       	subi	r18, 0x01	; 1
    38cc:	30 40       	sbci	r19, 0x00	; 0
    38ce:	e1 f7       	brne	.-8      	; 0x38c8 <STORE_Init+0x20>
		gState.firstSessionSector = 1;
    38d0:	81 e0       	ldi	r24, 0x01	; 1
    38d2:	90 e0       	ldi	r25, 0x00	; 0
    38d4:	a0 e0       	ldi	r26, 0x00	; 0
    38d6:	b0 e0       	ldi	r27, 0x00	; 0
    38d8:	84 87       	std	Z+12, r24	; 0x0c
    38da:	95 87       	std	Z+13, r25	; 0x0d
    38dc:	a6 87       	std	Z+14, r26	; 0x0e
    38de:	b7 87       	std	Z+15, r27	; 0x0f
		gState.newSessionSector = 1;
    38e0:	80 8f       	std	Z+24, r24	; 0x18
    38e2:	91 8f       	std	Z+25, r25	; 0x19
    38e4:	a2 8f       	std	Z+26, r26	; 0x1a
    38e6:	b3 8f       	std	Z+27, r27	; 0x1b
		gState.activeSessionMapSector = 4;
    38e8:	84 e0       	ldi	r24, 0x04	; 4
    38ea:	90 e0       	ldi	r25, 0x00	; 0
    38ec:	a0 e0       	ldi	r26, 0x00	; 0
    38ee:	b0 e0       	ldi	r27, 0x00	; 0
    38f0:	84 8f       	std	Z+28, r24	; 0x1c
    38f2:	95 8f       	std	Z+29, r25	; 0x1d
    38f4:	a6 8f       	std	Z+30, r26	; 0x1e
    38f6:	b7 8f       	std	Z+31, r27	; 0x1f
		gState.activeSessionMapOffset = 0;
		// TODO: Initialize other fields as needed
		if (!writeGlobalState()) {
    38f8:	0e 94 fa 22 	call	0x45f4	; 0x45f4 <writeGlobalState>
    38fc:	88 23       	and	r24, r24
    38fe:	89 f0       	breq	.+34     	; 0x3922 <STORE_Init+0x7a>
			return false;
		}
	}

	currentSector = gState.newSessionSector;
    3900:	80 91 44 07 	lds	r24, 0x0744	; 0x800744 <gState+0x18>
    3904:	90 91 45 07 	lds	r25, 0x0745	; 0x800745 <gState+0x19>
    3908:	a0 91 46 07 	lds	r26, 0x0746	; 0x800746 <gState+0x1a>
    390c:	b0 91 47 07 	lds	r27, 0x0747	; 0x800747 <gState+0x1b>
    3910:	80 93 58 09 	sts	0x0958, r24	; 0x800958 <currentSector>
    3914:	90 93 59 09 	sts	0x0959, r25	; 0x800959 <currentSector+0x1>
    3918:	a0 93 5a 09 	sts	0x095A, r26	; 0x80095a <currentSector+0x2>
    391c:	b0 93 5b 09 	sts	0x095B, r27	; 0x80095b <currentSector+0x3>
	return true;
    3920:	01 c0       	rjmp	.+2      	; 0x3924 <STORE_Init+0x7c>
		gState.newSessionSector = 1;
		gState.activeSessionMapSector = 4;
		gState.activeSessionMapOffset = 0;
		// TODO: Initialize other fields as needed
		if (!writeGlobalState()) {
			return false;
    3922:	c8 2f       	mov	r28, r24
		}
	}

	currentSector = gState.newSessionSector;
	return true;
}
    3924:	8c 2f       	mov	r24, r28
    3926:	cf 91       	pop	r28
    3928:	08 95       	ret

Disassembly of section .text.STORE_WriteFrame:

00002846 <STORE_WriteFrame>:

bool STORE_WriteFrame(volatile FrameData* frame) {
    2846:	8f 92       	push	r8
    2848:	9f 92       	push	r9
    284a:	af 92       	push	r10
    284c:	bf 92       	push	r11
    284e:	cf 92       	push	r12
    2850:	df 92       	push	r13
    2852:	ef 92       	push	r14
    2854:	ff 92       	push	r15
    2856:	0f 93       	push	r16
    2858:	1f 93       	push	r17
    285a:	cf 93       	push	r28
    285c:	df 93       	push	r29
	uint32_t bytesWritten = 0;
	uint32_t currentOffset = 0;
	uint32_t sectorsToWrite;
	
	// Verify frame size
	if(frame->frameBytes > FRAME_BUFFER_SIZE) {
    285e:	fc 01       	movw	r30, r24
    2860:	24 81       	ldd	r18, Z+4	; 0x04
    2862:	35 81       	ldd	r19, Z+5	; 0x05
    2864:	21 30       	cpi	r18, 0x01	; 1
    2866:	34 40       	sbci	r19, 0x04	; 4
    2868:	08 f0       	brcs	.+2      	; 0x286c <STORE_WriteFrame+0x26>
    286a:	5b c0       	rjmp	.+182    	; 0x2922 <STORE_WriteFrame+0xdc>
    286c:	ec 01       	movw	r28, r24
		return false;
	}
	
	// Copy frame data to our buffer
	memcpy(frameBuffer, (const void*)frame, frame->frameBytes);
    286e:	2c 81       	ldd	r18, Y+4	; 0x04
    2870:	3d 81       	ldd	r19, Y+5	; 0x05
    2872:	ac 01       	movw	r20, r24
    2874:	60 e8       	ldi	r22, 0x80	; 128
    2876:	8c e2       	ldi	r24, 0x2C	; 44
    2878:	93 e0       	ldi	r25, 0x03	; 3
    287a:	0e 94 13 23 	call	0x4626	; 0x4626 <memcpy>
	
	// Zero out any remaining buffer space in last sector
	if(frame->frameBytes < FRAME_BUFFER_SIZE) {
    287e:	8c 81       	ldd	r24, Y+4	; 0x04
    2880:	9d 81       	ldd	r25, Y+5	; 0x05
    2882:	81 15       	cp	r24, r1
    2884:	94 40       	sbci	r25, 0x04	; 4
    2886:	70 f4       	brcc	.+28     	; 0x28a4 <STORE_WriteFrame+0x5e>
		memset(frameBuffer + frame->frameBytes, 0, FRAME_BUFFER_SIZE - frame->frameBytes);
    2888:	2c 81       	ldd	r18, Y+4	; 0x04
    288a:	3d 81       	ldd	r19, Y+5	; 0x05
    288c:	8c 81       	ldd	r24, Y+4	; 0x04
    288e:	9d 81       	ldd	r25, Y+5	; 0x05
    2890:	40 e0       	ldi	r20, 0x00	; 0
    2892:	54 e0       	ldi	r21, 0x04	; 4
    2894:	42 1b       	sub	r20, r18
    2896:	53 0b       	sbc	r21, r19
    2898:	60 e0       	ldi	r22, 0x00	; 0
    289a:	70 e0       	ldi	r23, 0x00	; 0
    289c:	84 5d       	subi	r24, 0xD4	; 212
    289e:	9c 4f       	sbci	r25, 0xFC	; 252
    28a0:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <memset>

	currentSector = gState.newSessionSector;
	return true;
}

bool STORE_WriteFrame(volatile FrameData* frame) {
    28a4:	c1 2c       	mov	r12, r1
    28a6:	d1 2c       	mov	r13, r1
    28a8:	76 01       	movw	r14, r12
    28aa:	68 94       	set
    28ac:	c1 f8       	bld	r12, 1
    28ae:	81 2c       	mov	r8, r1
    28b0:	91 2c       	mov	r9, r1
    28b2:	54 01       	movw	r10, r8
    28b4:	2f c0       	rjmp	.+94     	; 0x2914 <STORE_WriteFrame+0xce>
	// Calculate how many complete sectors we need to write
	sectorsToWrite = SECTORS_PER_FRAME;
	
	// Write all sectors
	while(sectorsToWrite > 0) {
		if(!SDWrite(currentSector, frameBuffer + currentOffset, 1)) {
    28b6:	60 91 58 09 	lds	r22, 0x0958	; 0x800958 <currentSector>
    28ba:	70 91 59 09 	lds	r23, 0x0959	; 0x800959 <currentSector+0x1>
    28be:	80 91 5a 09 	lds	r24, 0x095A	; 0x80095a <currentSector+0x2>
    28c2:	90 91 5b 09 	lds	r25, 0x095B	; 0x80095b <currentSector+0x3>
    28c6:	01 e0       	ldi	r16, 0x01	; 1
    28c8:	10 e0       	ldi	r17, 0x00	; 0
    28ca:	20 e0       	ldi	r18, 0x00	; 0
    28cc:	30 e0       	ldi	r19, 0x00	; 0
    28ce:	a4 01       	movw	r20, r8
    28d0:	44 5d       	subi	r20, 0xD4	; 212
    28d2:	5c 4f       	sbci	r21, 0xFC	; 252
    28d4:	0e 94 7f 15 	call	0x2afe	; 0x2afe <SDWrite>
    28d8:	88 23       	and	r24, r24
    28da:	21 f1       	breq	.+72     	; 0x2924 <STORE_WriteFrame+0xde>
			return false;
		}
		currentSector++;
    28dc:	80 91 58 09 	lds	r24, 0x0958	; 0x800958 <currentSector>
    28e0:	90 91 59 09 	lds	r25, 0x0959	; 0x800959 <currentSector+0x1>
    28e4:	a0 91 5a 09 	lds	r26, 0x095A	; 0x80095a <currentSector+0x2>
    28e8:	b0 91 5b 09 	lds	r27, 0x095B	; 0x80095b <currentSector+0x3>
    28ec:	01 96       	adiw	r24, 0x01	; 1
    28ee:	a1 1d       	adc	r26, r1
    28f0:	b1 1d       	adc	r27, r1
    28f2:	80 93 58 09 	sts	0x0958, r24	; 0x800958 <currentSector>
    28f6:	90 93 59 09 	sts	0x0959, r25	; 0x800959 <currentSector+0x1>
    28fa:	a0 93 5a 09 	sts	0x095A, r26	; 0x80095a <currentSector+0x2>
    28fe:	b0 93 5b 09 	sts	0x095B, r27	; 0x80095b <currentSector+0x3>
		currentOffset += SECTOR_SIZE;
    2902:	42 e0       	ldi	r20, 0x02	; 2
    2904:	94 0e       	add	r9, r20
    2906:	a1 1c       	adc	r10, r1
    2908:	b1 1c       	adc	r11, r1
		sectorsToWrite--;
    290a:	81 e0       	ldi	r24, 0x01	; 1
    290c:	c8 1a       	sub	r12, r24
    290e:	d1 08       	sbc	r13, r1
    2910:	e1 08       	sbc	r14, r1
    2912:	f1 08       	sbc	r15, r1
	
	// Calculate how many complete sectors we need to write
	sectorsToWrite = SECTORS_PER_FRAME;
	
	// Write all sectors
	while(sectorsToWrite > 0) {
    2914:	c1 14       	cp	r12, r1
    2916:	d1 04       	cpc	r13, r1
    2918:	e1 04       	cpc	r14, r1
    291a:	f1 04       	cpc	r15, r1
    291c:	61 f6       	brne	.-104    	; 0x28b6 <STORE_WriteFrame+0x70>
		currentSector++;
		currentOffset += SECTOR_SIZE;
		sectorsToWrite--;
	}
	
	return true;
    291e:	81 e0       	ldi	r24, 0x01	; 1
    2920:	01 c0       	rjmp	.+2      	; 0x2924 <STORE_WriteFrame+0xde>
	uint32_t currentOffset = 0;
	uint32_t sectorsToWrite;
	
	// Verify frame size
	if(frame->frameBytes > FRAME_BUFFER_SIZE) {
		return false;
    2922:	80 e0       	ldi	r24, 0x00	; 0
		currentOffset += SECTOR_SIZE;
		sectorsToWrite--;
	}
	
	return true;
}
    2924:	df 91       	pop	r29
    2926:	cf 91       	pop	r28
    2928:	1f 91       	pop	r17
    292a:	0f 91       	pop	r16
    292c:	ff 90       	pop	r15
    292e:	ef 90       	pop	r14
    2930:	df 90       	pop	r13
    2932:	cf 90       	pop	r12
    2934:	bf 90       	pop	r11
    2936:	af 90       	pop	r10
    2938:	9f 90       	pop	r9
    293a:	8f 90       	pop	r8
    293c:	08 95       	ret

Disassembly of section .text.STORE_StartNewSession:

0000415e <STORE_StartNewSession>:

bool STORE_StartNewSession(void) {
	// Update session info
	gState.sessionCount++;
    415e:	ec e2       	ldi	r30, 0x2C	; 44
    4160:	f7 e0       	ldi	r31, 0x07	; 7
    4162:	84 89       	ldd	r24, Z+20	; 0x14
    4164:	95 89       	ldd	r25, Z+21	; 0x15
    4166:	a6 89       	ldd	r26, Z+22	; 0x16
    4168:	b7 89       	ldd	r27, Z+23	; 0x17
    416a:	01 96       	adiw	r24, 0x01	; 1
    416c:	a1 1d       	adc	r26, r1
    416e:	b1 1d       	adc	r27, r1
    4170:	84 8b       	std	Z+20, r24	; 0x14
    4172:	95 8b       	std	Z+21, r25	; 0x15
    4174:	a6 8b       	std	Z+22, r26	; 0x16
    4176:	b7 8b       	std	Z+23, r27	; 0x17
	gState.newSessionSector = currentSector;
    4178:	80 91 58 09 	lds	r24, 0x0958	; 0x800958 <currentSector>
    417c:	90 91 59 09 	lds	r25, 0x0959	; 0x800959 <currentSector+0x1>
    4180:	a0 91 5a 09 	lds	r26, 0x095A	; 0x80095a <currentSector+0x2>
    4184:	b0 91 5b 09 	lds	r27, 0x095B	; 0x80095b <currentSector+0x3>
    4188:	80 8f       	std	Z+24, r24	; 0x18
    418a:	91 8f       	std	Z+25, r25	; 0x19
    418c:	a2 8f       	std	Z+26, r26	; 0x1a
    418e:	b3 8f       	std	Z+27, r27	; 0x1b
	
	// Ensure sector alignment for new sessions
	if(currentSector % SECTORS_PER_FRAME != 0) {
    4190:	80 ff       	sbrs	r24, 0
    4192:	0c c0       	rjmp	.+24     	; 0x41ac <STORE_StartNewSession+0x4e>
		currentSector += SECTORS_PER_FRAME - (currentSector % SECTORS_PER_FRAME);
    4194:	8e 7f       	andi	r24, 0xFE	; 254
    4196:	02 96       	adiw	r24, 0x02	; 2
    4198:	a1 1d       	adc	r26, r1
    419a:	b1 1d       	adc	r27, r1
    419c:	80 93 58 09 	sts	0x0958, r24	; 0x800958 <currentSector>
    41a0:	90 93 59 09 	sts	0x0959, r25	; 0x800959 <currentSector+0x1>
    41a4:	a0 93 5a 09 	sts	0x095A, r26	; 0x80095a <currentSector+0x2>
    41a8:	b0 93 5b 09 	sts	0x095B, r27	; 0x80095b <currentSector+0x3>
	}
	
	return updateSessionMap();
    41ac:	0e 94 ed 15 	call	0x2bda	; 0x2bda <updateSessionMap>
}
    41b0:	08 95       	ret

Disassembly of section .text.STORE_EndSession:

00003fb0 <STORE_EndSession>:

bool STORE_EndSession(void) {
	// Ensure we end on a frame boundary
	if(currentSector % SECTORS_PER_FRAME != 0) {
    3fb0:	80 91 58 09 	lds	r24, 0x0958	; 0x800958 <currentSector>
    3fb4:	90 91 59 09 	lds	r25, 0x0959	; 0x800959 <currentSector+0x1>
    3fb8:	a0 91 5a 09 	lds	r26, 0x095A	; 0x80095a <currentSector+0x2>
    3fbc:	b0 91 5b 09 	lds	r27, 0x095B	; 0x80095b <currentSector+0x3>
    3fc0:	80 ff       	sbrs	r24, 0
    3fc2:	0c c0       	rjmp	.+24     	; 0x3fdc <STORE_EndSession+0x2c>
		currentSector += SECTORS_PER_FRAME - (currentSector % SECTORS_PER_FRAME);
    3fc4:	8e 7f       	andi	r24, 0xFE	; 254
    3fc6:	02 96       	adiw	r24, 0x02	; 2
    3fc8:	a1 1d       	adc	r26, r1
    3fca:	b1 1d       	adc	r27, r1
    3fcc:	80 93 58 09 	sts	0x0958, r24	; 0x800958 <currentSector>
    3fd0:	90 93 59 09 	sts	0x0959, r25	; 0x800959 <currentSector+0x1>
    3fd4:	a0 93 5a 09 	sts	0x095A, r26	; 0x80095a <currentSector+0x2>
    3fd8:	b0 93 5b 09 	sts	0x095B, r27	; 0x80095b <currentSector+0x3>
	}
	
	gState.lastSessionSector = currentSector - 1;
    3fdc:	80 91 58 09 	lds	r24, 0x0958	; 0x800958 <currentSector>
    3fe0:	90 91 59 09 	lds	r25, 0x0959	; 0x800959 <currentSector+0x1>
    3fe4:	a0 91 5a 09 	lds	r26, 0x095A	; 0x80095a <currentSector+0x2>
    3fe8:	b0 91 5b 09 	lds	r27, 0x095B	; 0x80095b <currentSector+0x3>
    3fec:	01 97       	sbiw	r24, 0x01	; 1
    3fee:	a1 09       	sbc	r26, r1
    3ff0:	b1 09       	sbc	r27, r1
    3ff2:	80 93 3c 07 	sts	0x073C, r24	; 0x80073c <gState+0x10>
    3ff6:	90 93 3d 07 	sts	0x073D, r25	; 0x80073d <gState+0x11>
    3ffa:	a0 93 3e 07 	sts	0x073E, r26	; 0x80073e <gState+0x12>
    3ffe:	b0 93 3f 07 	sts	0x073F, r27	; 0x80073f <gState+0x13>
	return writeGlobalState();
    4002:	0e 94 fa 22 	call	0x45f4	; 0x45f4 <writeGlobalState>
}
    4006:	08 95       	ret

Disassembly of section .text.vUARTtxDataAvailable:

00004b50 <vUARTtxDataAvailable>:
#endif

bool vUARTIsBusy(void) {
	return ((sg_etxState != ESTATE_IDLE) ||
		(sg_eCell_mc_rxState != ESTATE_IDLE));
}
    4b50:	80 91 79 09 	lds	r24, 0x0979	; 0x800979 <sg_u8SendIndex>
    4b54:	81 11       	cpse	r24, r1
    4b56:	06 c0       	rjmp	.+12     	; 0x4b64 <vUARTtxDataAvailable+0x14>
    4b58:	0e 94 f0 23 	call	0x47e0	; 0x47e0 <PlatformGetSendData>
    4b5c:	90 93 61 09 	sts	0x0961, r25	; 0x800961 <sg_u8SendData+0x1>
    4b60:	80 93 60 09 	sts	0x0960, r24	; 0x800960 <sg_u8SendData>
    4b64:	80 91 79 09 	lds	r24, 0x0979	; 0x800979 <sg_u8SendIndex>
    4b68:	81 11       	cpse	r24, r1
    4b6a:	02 c0       	rjmp	.+4      	; 0x4b70 <vUARTtxDataAvailable+0x20>
    4b6c:	81 e0       	ldi	r24, 0x01	; 1
    4b6e:	08 95       	ret
    4b70:	80 e0       	ldi	r24, 0x00	; 0
    4b72:	08 95       	ret

Disassembly of section .text.vUARTtxDataGet:

000042f4 <vUARTtxDataGet>:
    42f4:	80 91 79 09 	lds	r24, 0x0979	; 0x800979 <sg_u8SendIndex>
    42f8:	81 11       	cpse	r24, r1
    42fa:	10 c0       	rjmp	.+32     	; 0x431c <vUARTtxDataGet+0x28>
    42fc:	81 e0       	ldi	r24, 0x01	; 1
    42fe:	0e 94 f0 23 	call	0x47e0	; 0x47e0 <PlatformGetSendData>
    4302:	e0 e6       	ldi	r30, 0x60	; 96
    4304:	f9 e0       	ldi	r31, 0x09	; 9
    4306:	90 83       	st	Z, r25
    4308:	81 83       	std	Z+1, r24	; 0x01
    430a:	80 81       	ld	r24, Z
    430c:	88 23       	and	r24, r24
    430e:	24 f4       	brge	.+8      	; 0x4318 <vUARTtxDataGet+0x24>
    4310:	81 e0       	ldi	r24, 0x01	; 1
    4312:	80 93 7b 09 	sts	0x097B, r24	; 0x80097b <sg_bCellReportsReuested>
    4316:	02 c0       	rjmp	.+4      	; 0x431c <vUARTtxDataGet+0x28>
    4318:	10 92 7b 09 	sts	0x097B, r1	; 0x80097b <sg_bCellReportsReuested>
    431c:	e0 91 79 09 	lds	r30, 0x0979	; 0x800979 <sg_u8SendIndex>
    4320:	f0 e0       	ldi	r31, 0x00	; 0
    4322:	e0 5a       	subi	r30, 0xA0	; 160
    4324:	f6 4f       	sbci	r31, 0xF6	; 246
    4326:	80 81       	ld	r24, Z
    4328:	90 91 79 09 	lds	r25, 0x0979	; 0x800979 <sg_u8SendIndex>
    432c:	9f 5f       	subi	r25, 0xFF	; 255
    432e:	90 93 79 09 	sts	0x0979, r25	; 0x800979 <sg_u8SendIndex>
    4332:	90 91 79 09 	lds	r25, 0x0979	; 0x800979 <sg_u8SendIndex>
    4336:	92 30       	cpi	r25, 0x02	; 2
    4338:	10 f0       	brcs	.+4      	; 0x433e <vUARTtxDataGet+0x4a>
    433a:	10 92 79 09 	sts	0x0979, r1	; 0x800979 <sg_u8SendIndex>
    433e:	08 95       	ret

Disassembly of section .text.vUARTRXReset:

00004e04 <vUARTRXReset>:

// Called when we have a string timeout or need to reset the state machine
// for the MC RX side of things
void vUARTRXReset(void)
{
	sg_eCell_mc_rxState = ESTATE_IDLE;
    4e04:	10 92 82 09 	sts	0x0982, r1	; 0x800982 <sg_eCell_mc_rxState>
	vUARTRXStart();
    4e08:	0e 94 4e 26 	call	0x4c9c	; 0x4c9c <vUARTRXStart>
    4e0c:	08 95       	ret

Disassembly of section .text.vUARTStarttx:

0000405e <vUARTStarttx>:
#endif

bool vUARTIsBusy(void) {
	return ((sg_etxState != ESTATE_IDLE) ||
		(sg_eCell_mc_rxState != ESTATE_IDLE));
}
    405e:	80 91 7c 09 	lds	r24, 0x097C	; 0x80097c <sg_etxState>
    4062:	81 11       	cpse	r24, r1
    4064:	23 c0       	rjmp	.+70     	; 0x40ac <vUARTStarttx+0x4e>
    4066:	80 91 82 09 	lds	r24, 0x0982	; 0x800982 <sg_eCell_mc_rxState>
    406a:	81 11       	cpse	r24, r1
    406c:	21 c0       	rjmp	.+66     	; 0x40b0 <vUARTStarttx+0x52>
    406e:	82 e0       	ldi	r24, 0x02	; 2
    4070:	80 93 7c 09 	sts	0x097C, r24	; 0x80097c <sg_etxState>
    4074:	10 92 79 09 	sts	0x0979, r1	; 0x800979 <sg_u8SendIndex>
    4078:	10 92 7f 09 	sts	0x097F, r1	; 0x80097f <sg_u8txBitCount>
    407c:	81 e0       	ldi	r24, 0x01	; 1
    407e:	80 93 7a 09 	sts	0x097A, r24	; 0x80097a <sg_bMCTxNextBit>
    4082:	86 b5       	in	r24, 0x26	; 38
    4084:	8e 5c       	subi	r24, 0xCE	; 206
    4086:	87 bd       	out	0x27, r24	; 39
    4088:	85 b3       	in	r24, 0x15	; 21
    408a:	82 60       	ori	r24, 0x02	; 2
    408c:	85 bb       	out	0x15, r24	; 21
    408e:	ee e6       	ldi	r30, 0x6E	; 110
    4090:	f0 e0       	ldi	r31, 0x00	; 0
    4092:	80 81       	ld	r24, Z
    4094:	82 60       	ori	r24, 0x02	; 2
    4096:	80 83       	st	Z, r24
    4098:	0e 94 a8 25 	call	0x4b50	; 0x4b50 <vUARTtxDataAvailable>
    409c:	80 93 7d 09 	sts	0x097D, r24	; 0x80097d <sg_btxMoreAvailable>
    40a0:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <vUARTtxDataGet>
    40a4:	80 93 7e 09 	sts	0x097E, r24	; 0x80097e <sg_u8txDataByte>
    40a8:	81 e0       	ldi	r24, 0x01	; 1
    40aa:	08 95       	ret
    40ac:	80 e0       	ldi	r24, 0x00	; 0
    40ae:	08 95       	ret
    40b0:	80 e0       	ldi	r24, 0x00	; 0
    40b2:	08 95       	ret

Disassembly of section .text.__vector_8:

00003dcc <__vector_8>:
    3dcc:	1f 92       	push	r1
    3dce:	0f 92       	push	r0
    3dd0:	0f b6       	in	r0, 0x3f	; 63
    3dd2:	0f 92       	push	r0
    3dd4:	11 24       	eor	r1, r1
    3dd6:	8f 93       	push	r24
    3dd8:	ef 93       	push	r30
    3dda:	ff 93       	push	r31
    3ddc:	86 b5       	in	r24, 0x26	; 38
    3dde:	85 5c       	subi	r24, 0xC5	; 197
    3de0:	88 bd       	out	0x28, r24	; 40
    3de2:	85 b3       	in	r24, 0x15	; 21
    3de4:	84 60       	ori	r24, 0x04	; 4
    3de6:	85 bb       	out	0x15, r24	; 21
    3de8:	ee e6       	ldi	r30, 0x6E	; 110
    3dea:	f0 e0       	ldi	r31, 0x00	; 0
    3dec:	80 81       	ld	r24, Z
    3dee:	84 60       	ori	r24, 0x04	; 4
    3df0:	80 83       	st	Z, r24
    3df2:	8d b3       	in	r24, 0x1d	; 29
    3df4:	8d 7f       	andi	r24, 0xFD	; 253
    3df6:	8d bb       	out	0x1d, r24	; 29
    3df8:	80 91 78 09 	lds	r24, 0x0978	; 0x800978 <sg_bState>
    3dfc:	88 23       	and	r24, r24
    3dfe:	31 f0       	breq	.+12     	; 0x3e0c <__vector_8+0x40>
    3e00:	88 b1       	in	r24, 0x08	; 8
    3e02:	80 68       	ori	r24, 0x80	; 128
    3e04:	88 b9       	out	0x08, r24	; 8
    3e06:	10 92 78 09 	sts	0x0978, r1	; 0x800978 <sg_bState>
    3e0a:	06 c0       	rjmp	.+12     	; 0x3e18 <__vector_8+0x4c>
    3e0c:	88 b1       	in	r24, 0x08	; 8
    3e0e:	8f 77       	andi	r24, 0x7F	; 127
    3e10:	88 b9       	out	0x08, r24	; 8
    3e12:	81 e0       	ldi	r24, 0x01	; 1
    3e14:	80 93 78 09 	sts	0x0978, r24	; 0x800978 <sg_bState>
    3e18:	81 e0       	ldi	r24, 0x01	; 1
    3e1a:	80 93 82 09 	sts	0x0982, r24	; 0x800982 <sg_eCell_mc_rxState>
    3e1e:	10 92 84 09 	sts	0x0984, r1	; 0x800984 <sg_u8Cell_mc_rxBitCount>
    3e22:	ff 91       	pop	r31
    3e24:	ef 91       	pop	r30
    3e26:	8f 91       	pop	r24
    3e28:	0f 90       	pop	r0
    3e2a:	0f be       	out	0x3f, r0	; 63
    3e2c:	0f 90       	pop	r0
    3e2e:	1f 90       	pop	r1
    3e30:	18 95       	reti

Disassembly of section .text.__vector_16:

00002a20 <__vector_16>:
    2a20:	1f 92       	push	r1
    2a22:	0f 92       	push	r0
    2a24:	0f b6       	in	r0, 0x3f	; 63
    2a26:	0f 92       	push	r0
    2a28:	11 24       	eor	r1, r1
    2a2a:	2f 93       	push	r18
    2a2c:	3f 93       	push	r19
    2a2e:	4f 93       	push	r20
    2a30:	5f 93       	push	r21
    2a32:	6f 93       	push	r22
    2a34:	7f 93       	push	r23
    2a36:	8f 93       	push	r24
    2a38:	9f 93       	push	r25
    2a3a:	af 93       	push	r26
    2a3c:	bf 93       	push	r27
    2a3e:	ef 93       	push	r30
    2a40:	ff 93       	push	r31
    2a42:	86 b5       	in	r24, 0x26	; 38
    2a44:	85 5d       	subi	r24, 0xD5	; 213
    2a46:	88 bd       	out	0x28, r24	; 40
    2a48:	85 b3       	in	r24, 0x15	; 21
    2a4a:	84 60       	ori	r24, 0x04	; 4
    2a4c:	85 bb       	out	0x15, r24	; 21
    2a4e:	ee e6       	ldi	r30, 0x6E	; 110
    2a50:	f0 e0       	ldi	r31, 0x00	; 0
    2a52:	80 81       	ld	r24, Z
    2a54:	84 60       	ori	r24, 0x04	; 4
    2a56:	80 83       	st	Z, r24
    2a58:	20 91 81 09 	lds	r18, 0x0981	; 0x800981 <sg_bCell_mc_rxPriorState>
    2a5c:	83 b1       	in	r24, 0x03	; 3
    2a5e:	82 fb       	bst	r24, 2
    2a60:	88 27       	eor	r24, r24
    2a62:	80 f9       	bld	r24, 0
    2a64:	80 93 81 09 	sts	0x0981, r24	; 0x800981 <sg_bCell_mc_rxPriorState>
    2a68:	90 91 78 09 	lds	r25, 0x0978	; 0x800978 <sg_bState>
    2a6c:	99 23       	and	r25, r25
    2a6e:	31 f0       	breq	.+12     	; 0x2a7c <__vector_16+0x5c>
    2a70:	98 b1       	in	r25, 0x08	; 8
    2a72:	90 68       	ori	r25, 0x80	; 128
    2a74:	98 b9       	out	0x08, r25	; 8
    2a76:	10 92 78 09 	sts	0x0978, r1	; 0x800978 <sg_bState>
    2a7a:	06 c0       	rjmp	.+12     	; 0x2a88 <__vector_16+0x68>
    2a7c:	98 b1       	in	r25, 0x08	; 8
    2a7e:	9f 77       	andi	r25, 0x7F	; 127
    2a80:	98 b9       	out	0x08, r25	; 8
    2a82:	81 e0       	ldi	r24, 0x01	; 1
    2a84:	80 93 78 09 	sts	0x0978, r24	; 0x800978 <sg_bState>
    2a88:	80 91 84 09 	lds	r24, 0x0984	; 0x800984 <sg_u8Cell_mc_rxBitCount>
    2a8c:	8f 5f       	subi	r24, 0xFF	; 255
    2a8e:	80 93 84 09 	sts	0x0984, r24	; 0x800984 <sg_u8Cell_mc_rxBitCount>
    2a92:	81 30       	cpi	r24, 0x01	; 1
    2a94:	19 f4       	brne	.+6      	; 0x2a9c <__vector_16+0x7c>
    2a96:	10 92 83 09 	sts	0x0983, r1	; 0x800983 <sg_u8rxDataByte>
    2a9a:	20 c0       	rjmp	.+64     	; 0x2adc <__vector_16+0xbc>
    2a9c:	8a 30       	cpi	r24, 0x0A	; 10
    2a9e:	38 f4       	brcc	.+14     	; 0x2aae <__vector_16+0x8e>
    2aa0:	80 91 83 09 	lds	r24, 0x0983	; 0x800983 <sg_u8rxDataByte>
    2aa4:	88 0f       	add	r24, r24
    2aa6:	82 2b       	or	r24, r18
    2aa8:	80 93 83 09 	sts	0x0983, r24	; 0x800983 <sg_u8rxDataByte>
    2aac:	17 c0       	rjmp	.+46     	; 0x2adc <__vector_16+0xbc>
    2aae:	20 93 80 09 	sts	0x0980, r18	; 0x800980 <sg_bCell_mc_rxMoreData>
    2ab2:	8c e0       	ldi	r24, 0x0C	; 12
    2ab4:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f0069>
    2ab8:	8c b3       	in	r24, 0x1c	; 28
    2aba:	82 60       	ori	r24, 0x02	; 2
    2abc:	8c bb       	out	0x1c, r24	; 28
    2abe:	8d b3       	in	r24, 0x1d	; 29
    2ac0:	82 60       	ori	r24, 0x02	; 2
    2ac2:	8d bb       	out	0x1d, r24	; 29
    2ac4:	ee e6       	ldi	r30, 0x6E	; 110
    2ac6:	f0 e0       	ldi	r31, 0x00	; 0
    2ac8:	80 81       	ld	r24, Z
    2aca:	8b 7f       	andi	r24, 0xFB	; 251
    2acc:	80 83       	st	Z, r24
    2ace:	80 91 83 09 	lds	r24, 0x0983	; 0x800983 <sg_u8rxDataByte>
    2ad2:	0e 94 09 1e 	call	0x3c12	; 0x3c12 <vUARTRXData>
    2ad6:	83 e0       	ldi	r24, 0x03	; 3
    2ad8:	80 93 82 09 	sts	0x0982, r24	; 0x800982 <sg_eCell_mc_rxState>
    2adc:	ff 91       	pop	r31
    2ade:	ef 91       	pop	r30
    2ae0:	bf 91       	pop	r27
    2ae2:	af 91       	pop	r26
    2ae4:	9f 91       	pop	r25
    2ae6:	8f 91       	pop	r24
    2ae8:	7f 91       	pop	r23
    2aea:	6f 91       	pop	r22
    2aec:	5f 91       	pop	r21
    2aee:	4f 91       	pop	r20
    2af0:	3f 91       	pop	r19
    2af2:	2f 91       	pop	r18
    2af4:	0f 90       	pop	r0
    2af6:	0f be       	out	0x3f, r0	; 63
    2af8:	0f 90       	pop	r0
    2afa:	1f 90       	pop	r1
    2afc:	18 95       	reti

Disassembly of section .text.__vector_15:

000023f8 <__vector_15>:
    23f8:	1f 92       	push	r1
    23fa:	0f 92       	push	r0
    23fc:	0f b6       	in	r0, 0x3f	; 63
    23fe:	0f 92       	push	r0
    2400:	11 24       	eor	r1, r1
    2402:	2f 93       	push	r18
    2404:	3f 93       	push	r19
    2406:	4f 93       	push	r20
    2408:	5f 93       	push	r21
    240a:	6f 93       	push	r22
    240c:	7f 93       	push	r23
    240e:	8f 93       	push	r24
    2410:	9f 93       	push	r25
    2412:	af 93       	push	r26
    2414:	bf 93       	push	r27
    2416:	ef 93       	push	r30
    2418:	ff 93       	push	r31
    241a:	86 b5       	in	r24, 0x26	; 38
    241c:	83 5d       	subi	r24, 0xD3	; 211
    241e:	87 bd       	out	0x27, r24	; 39
    2420:	85 b3       	in	r24, 0x15	; 21
    2422:	82 60       	ori	r24, 0x02	; 2
    2424:	85 bb       	out	0x15, r24	; 21
    2426:	ee e6       	ldi	r30, 0x6E	; 110
    2428:	f0 e0       	ldi	r31, 0x00	; 0
    242a:	80 81       	ld	r24, Z
    242c:	82 60       	ori	r24, 0x02	; 2
    242e:	80 83       	st	Z, r24
    2430:	80 91 7a 09 	lds	r24, 0x097A	; 0x80097a <sg_bMCTxNextBit>
    2434:	88 23       	and	r24, r24
    2436:	21 f0       	breq	.+8      	; 0x2440 <__vector_15+0x48>
    2438:	85 b1       	in	r24, 0x05	; 5
    243a:	88 60       	ori	r24, 0x08	; 8
    243c:	85 b9       	out	0x05, r24	; 5
    243e:	03 c0       	rjmp	.+6      	; 0x2446 <__vector_15+0x4e>
    2440:	85 b1       	in	r24, 0x05	; 5
    2442:	87 7f       	andi	r24, 0xF7	; 247
    2444:	85 b9       	out	0x05, r24	; 5
    2446:	80 91 7f 09 	lds	r24, 0x097F	; 0x80097f <sg_u8txBitCount>
    244a:	8f 5f       	subi	r24, 0xFF	; 255
    244c:	80 93 7f 09 	sts	0x097F, r24	; 0x80097f <sg_u8txBitCount>
    2450:	80 91 7f 09 	lds	r24, 0x097F	; 0x80097f <sg_u8txBitCount>
    2454:	83 30       	cpi	r24, 0x03	; 3
    2456:	61 f4       	brne	.+24     	; 0x2470 <__vector_15+0x78>
    2458:	80 91 7b 09 	lds	r24, 0x097B	; 0x80097b <sg_bCellReportsReuested>
    245c:	88 23       	and	r24, r24
    245e:	41 f0       	breq	.+16     	; 0x2470 <__vector_15+0x78>
    2460:	8b e0       	ldi	r24, 0x0B	; 11
    2462:	80 93 7f 09 	sts	0x097F, r24	; 0x80097f <sg_u8txBitCount>
    2466:	10 92 7a 09 	sts	0x097A, r1	; 0x80097a <sg_bMCTxNextBit>
    246a:	10 92 7d 09 	sts	0x097D, r1	; 0x80097d <sg_btxMoreAvailable>
    246e:	4d c0       	rjmp	.+154    	; 0x250a <__vector_15+0x112>
    2470:	80 91 7f 09 	lds	r24, 0x097F	; 0x80097f <sg_u8txBitCount>
    2474:	8a 30       	cpi	r24, 0x0A	; 10
    2476:	80 f4       	brcc	.+32     	; 0x2498 <__vector_15+0xa0>
    2478:	80 91 7e 09 	lds	r24, 0x097E	; 0x80097e <sg_u8txDataByte>
    247c:	88 23       	and	r24, r24
    247e:	24 f4       	brge	.+8      	; 0x2488 <__vector_15+0x90>
    2480:	81 e0       	ldi	r24, 0x01	; 1
    2482:	80 93 7a 09 	sts	0x097A, r24	; 0x80097a <sg_bMCTxNextBit>
    2486:	02 c0       	rjmp	.+4      	; 0x248c <__vector_15+0x94>
    2488:	10 92 7a 09 	sts	0x097A, r1	; 0x80097a <sg_bMCTxNextBit>
    248c:	80 91 7e 09 	lds	r24, 0x097E	; 0x80097e <sg_u8txDataByte>
    2490:	88 0f       	add	r24, r24
    2492:	80 93 7e 09 	sts	0x097E, r24	; 0x80097e <sg_u8txDataByte>
    2496:	39 c0       	rjmp	.+114    	; 0x250a <__vector_15+0x112>
    2498:	80 91 7f 09 	lds	r24, 0x097F	; 0x80097f <sg_u8txBitCount>
    249c:	8a 30       	cpi	r24, 0x0A	; 10
    249e:	29 f4       	brne	.+10     	; 0x24aa <__vector_15+0xb2>
    24a0:	80 91 7d 09 	lds	r24, 0x097D	; 0x80097d <sg_btxMoreAvailable>
    24a4:	80 93 7a 09 	sts	0x097A, r24	; 0x80097a <sg_bMCTxNextBit>
    24a8:	30 c0       	rjmp	.+96     	; 0x250a <__vector_15+0x112>
    24aa:	80 91 7f 09 	lds	r24, 0x097F	; 0x80097f <sg_u8txBitCount>
    24ae:	8b 30       	cpi	r24, 0x0B	; 11
    24b0:	19 f4       	brne	.+6      	; 0x24b8 <__vector_15+0xc0>
    24b2:	10 92 7a 09 	sts	0x097A, r1	; 0x80097a <sg_bMCTxNextBit>
    24b6:	29 c0       	rjmp	.+82     	; 0x250a <__vector_15+0x112>
    24b8:	80 91 7f 09 	lds	r24, 0x097F	; 0x80097f <sg_u8txBitCount>
    24bc:	8c 30       	cpi	r24, 0x0C	; 12
    24be:	29 f5       	brne	.+74     	; 0x250a <__vector_15+0x112>
    24c0:	80 91 7d 09 	lds	r24, 0x097D	; 0x80097d <sg_btxMoreAvailable>
    24c4:	80 93 7a 09 	sts	0x097A, r24	; 0x80097a <sg_bMCTxNextBit>
    24c8:	10 92 7f 09 	sts	0x097F, r1	; 0x80097f <sg_u8txBitCount>
    24cc:	80 91 7d 09 	lds	r24, 0x097D	; 0x80097d <sg_btxMoreAvailable>
    24d0:	81 11       	cpse	r24, r1
    24d2:	08 c0       	rjmp	.+16     	; 0x24e4 <__vector_15+0xec>
    24d4:	10 92 7c 09 	sts	0x097C, r1	; 0x80097c <sg_etxState>
    24d8:	ee e6       	ldi	r30, 0x6E	; 110
    24da:	f0 e0       	ldi	r31, 0x00	; 0
    24dc:	80 81       	ld	r24, Z
    24de:	8d 7f       	andi	r24, 0xFD	; 253
    24e0:	80 83       	st	Z, r24
    24e2:	13 c0       	rjmp	.+38     	; 0x250a <__vector_15+0x112>
    24e4:	0e 94 a8 25 	call	0x4b50	; 0x4b50 <vUARTtxDataAvailable>
    24e8:	80 93 7d 09 	sts	0x097D, r24	; 0x80097d <sg_btxMoreAvailable>
    24ec:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <vUARTtxDataGet>
    24f0:	80 93 7e 09 	sts	0x097E, r24	; 0x80097e <sg_u8txDataByte>
    24f4:	86 b5       	in	r24, 0x26	; 38
    24f6:	88 53       	subi	r24, 0x38	; 56
    24f8:	87 bd       	out	0x27, r24	; 39
    24fa:	85 b3       	in	r24, 0x15	; 21
    24fc:	82 60       	ori	r24, 0x02	; 2
    24fe:	85 bb       	out	0x15, r24	; 21
    2500:	ee e6       	ldi	r30, 0x6E	; 110
    2502:	f0 e0       	ldi	r31, 0x00	; 0
    2504:	80 81       	ld	r24, Z
    2506:	82 60       	ori	r24, 0x02	; 2
    2508:	80 83       	st	Z, r24
    250a:	ff 91       	pop	r31
    250c:	ef 91       	pop	r30
    250e:	bf 91       	pop	r27
    2510:	af 91       	pop	r26
    2512:	9f 91       	pop	r25
    2514:	8f 91       	pop	r24
    2516:	7f 91       	pop	r23
    2518:	6f 91       	pop	r22
    251a:	5f 91       	pop	r21
    251c:	4f 91       	pop	r20
    251e:	3f 91       	pop	r19
    2520:	2f 91       	pop	r18
    2522:	0f 90       	pop	r0
    2524:	0f be       	out	0x3f, r0	; 63
    2526:	0f 90       	pop	r0
    2528:	1f 90       	pop	r1
    252a:	18 95       	reti

Disassembly of section .text.vUARTInit:

00004658 <vUARTInit>:
    4658:	85 b7       	in	r24, 0x35	; 53
    465a:	8f 7e       	andi	r24, 0xEF	; 239
    465c:	85 bf       	out	0x35, r24	; 53
    465e:	84 b1       	in	r24, 0x04	; 4
    4660:	88 60       	ori	r24, 0x08	; 8
    4662:	84 b9       	out	0x04, r24	; 4
    4664:	84 b1       	in	r24, 0x04	; 4
    4666:	8b 7f       	andi	r24, 0xFB	; 251
    4668:	84 b9       	out	0x04, r24	; 4
    466a:	85 b1       	in	r24, 0x05	; 5
    466c:	8b 7f       	andi	r24, 0xFB	; 251
    466e:	85 b9       	out	0x05, r24	; 5
    4670:	87 b1       	in	r24, 0x07	; 7
    4672:	80 68       	ori	r24, 0x80	; 128
    4674:	87 b9       	out	0x07, r24	; 7
    4676:	8d b3       	in	r24, 0x1d	; 29
    4678:	8d 7f       	andi	r24, 0xFD	; 253
    467a:	8d bb       	out	0x1d, r24	; 29
    467c:	10 92 7c 09 	sts	0x097C, r1	; 0x80097c <sg_etxState>
    4680:	85 b1       	in	r24, 0x05	; 5
    4682:	87 7f       	andi	r24, 0xF7	; 247
    4684:	85 b9       	out	0x05, r24	; 5
    4686:	08 95       	ret

Disassembly of section .text.vUARTInitReceive:

00004cf2 <vUARTInitReceive>:
    4cf2:	8c e0       	ldi	r24, 0x0C	; 12
    4cf4:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f0069>
    4cf8:	8c b3       	in	r24, 0x1c	; 28
    4cfa:	82 60       	ori	r24, 0x02	; 2
    4cfc:	8c bb       	out	0x1c, r24	; 28
    4cfe:	8d b3       	in	r24, 0x1d	; 29
    4d00:	82 60       	ori	r24, 0x02	; 2
    4d02:	8d bb       	out	0x1d, r24	; 29
    4d04:	08 95       	ret

Disassembly of section .text.libgcc.div:

00004808 <__udivmodhi4>:
    4808:	aa 1b       	sub	r26, r26
    480a:	bb 1b       	sub	r27, r27
    480c:	51 e1       	ldi	r21, 0x11	; 17
    480e:	07 c0       	rjmp	.+14     	; 0x481e <__udivmodhi4_ep>

00004810 <__udivmodhi4_loop>:
    4810:	aa 1f       	adc	r26, r26
    4812:	bb 1f       	adc	r27, r27
    4814:	a6 17       	cp	r26, r22
    4816:	b7 07       	cpc	r27, r23
    4818:	10 f0       	brcs	.+4      	; 0x481e <__udivmodhi4_ep>
    481a:	a6 1b       	sub	r26, r22
    481c:	b7 0b       	sbc	r27, r23

0000481e <__udivmodhi4_ep>:
    481e:	88 1f       	adc	r24, r24
    4820:	99 1f       	adc	r25, r25
    4822:	5a 95       	dec	r21
    4824:	a9 f7       	brne	.-22     	; 0x4810 <__udivmodhi4_loop>
    4826:	80 95       	com	r24
    4828:	90 95       	com	r25
    482a:	bc 01       	movw	r22, r24
    482c:	cd 01       	movw	r24, r26
    482e:	08 95       	ret

Disassembly of section .text.libgcc.div:

00004384 <__udivmodsi4>:
    4384:	a1 e2       	ldi	r26, 0x21	; 33
    4386:	1a 2e       	mov	r1, r26
    4388:	aa 1b       	sub	r26, r26
    438a:	bb 1b       	sub	r27, r27
    438c:	fd 01       	movw	r30, r26
    438e:	0d c0       	rjmp	.+26     	; 0x43aa <__udivmodsi4_ep>

00004390 <__udivmodsi4_loop>:
    4390:	aa 1f       	adc	r26, r26
    4392:	bb 1f       	adc	r27, r27
    4394:	ee 1f       	adc	r30, r30
    4396:	ff 1f       	adc	r31, r31
    4398:	a2 17       	cp	r26, r18
    439a:	b3 07       	cpc	r27, r19
    439c:	e4 07       	cpc	r30, r20
    439e:	f5 07       	cpc	r31, r21
    43a0:	20 f0       	brcs	.+8      	; 0x43aa <__udivmodsi4_ep>
    43a2:	a2 1b       	sub	r26, r18
    43a4:	b3 0b       	sbc	r27, r19
    43a6:	e4 0b       	sbc	r30, r20
    43a8:	f5 0b       	sbc	r31, r21

000043aa <__udivmodsi4_ep>:
    43aa:	66 1f       	adc	r22, r22
    43ac:	77 1f       	adc	r23, r23
    43ae:	88 1f       	adc	r24, r24
    43b0:	99 1f       	adc	r25, r25
    43b2:	1a 94       	dec	r1
    43b4:	69 f7       	brne	.-38     	; 0x4390 <__udivmodsi4_loop>
    43b6:	60 95       	com	r22
    43b8:	70 95       	com	r23
    43ba:	80 95       	com	r24
    43bc:	90 95       	com	r25
    43be:	9b 01       	movw	r18, r22
    43c0:	ac 01       	movw	r20, r24
    43c2:	bd 01       	movw	r22, r26
    43c4:	cf 01       	movw	r24, r30
    43c6:	08 95       	ret

Disassembly of section .text.libgcc.div:

00004688 <__divmodsi4>:
    4688:	05 2e       	mov	r0, r21
    468a:	97 fb       	bst	r25, 7
    468c:	1e f4       	brtc	.+6      	; 0x4694 <__divmodsi4+0xc>
    468e:	00 94       	com	r0
    4690:	0e 94 b8 26 	call	0x4d70	; 0x4d70 <__negsi2>
    4694:	57 fd       	sbrc	r21, 7
    4696:	07 d0       	rcall	.+14     	; 0x46a6 <__divmodsi4_neg2>
    4698:	0e 94 c2 21 	call	0x4384	; 0x4384 <__udivmodsi4>
    469c:	07 fc       	sbrc	r0, 7
    469e:	03 d0       	rcall	.+6      	; 0x46a6 <__divmodsi4_neg2>
    46a0:	4e f4       	brtc	.+18     	; 0x46b4 <__divmodsi4_exit>
    46a2:	0c 94 b8 26 	jmp	0x4d70	; 0x4d70 <__negsi2>

000046a6 <__divmodsi4_neg2>:
    46a6:	50 95       	com	r21
    46a8:	40 95       	com	r20
    46aa:	30 95       	com	r19
    46ac:	21 95       	neg	r18
    46ae:	3f 4f       	sbci	r19, 0xFF	; 255
    46b0:	4f 4f       	sbci	r20, 0xFF	; 255
    46b2:	5f 4f       	sbci	r21, 0xFF	; 255

000046b4 <__divmodsi4_exit>:
    46b4:	08 95       	ret

Disassembly of section .text.libgcc.div:

00004d70 <__negsi2>:
    4d70:	90 95       	com	r25
    4d72:	80 95       	com	r24
    4d74:	70 95       	com	r23
    4d76:	61 95       	neg	r22
    4d78:	7f 4f       	sbci	r23, 0xFF	; 255
    4d7a:	8f 4f       	sbci	r24, 0xFF	; 255
    4d7c:	9f 4f       	sbci	r25, 0xFF	; 255
    4d7e:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00004bb6 <__umulhisi3>:
    4bb6:	a2 9f       	mul	r26, r18
    4bb8:	b0 01       	movw	r22, r0
    4bba:	b3 9f       	mul	r27, r19
    4bbc:	c0 01       	movw	r24, r0
    4bbe:	a3 9f       	mul	r26, r19
    4bc0:	70 0d       	add	r23, r0
    4bc2:	81 1d       	adc	r24, r1
    4bc4:	11 24       	eor	r1, r1
    4bc6:	91 1d       	adc	r25, r1
    4bc8:	b2 9f       	mul	r27, r18
    4bca:	70 0d       	add	r23, r0
    4bcc:	81 1d       	adc	r24, r1
    4bce:	11 24       	eor	r1, r1
    4bd0:	91 1d       	adc	r25, r1
    4bd2:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00004dca <__usmulhisi3>:
    4dca:	0e 94 db 25 	call	0x4bb6	; 0x4bb6 <__umulhisi3>

00004dce <__usmulhisi3_tail>:
    4dce:	b7 ff       	sbrs	r27, 7
    4dd0:	08 95       	ret
    4dd2:	82 1b       	sub	r24, r18
    4dd4:	93 0b       	sbc	r25, r19
    4dd6:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00004cb2 <__muluhisi3>:
    4cb2:	0e 94 db 25 	call	0x4bb6	; 0x4bb6 <__umulhisi3>
    4cb6:	a5 9f       	mul	r26, r21
    4cb8:	90 0d       	add	r25, r0
    4cba:	b4 9f       	mul	r27, r20
    4cbc:	90 0d       	add	r25, r0
    4cbe:	a4 9f       	mul	r26, r20
    4cc0:	80 0d       	add	r24, r0
    4cc2:	91 1d       	adc	r25, r1
    4cc4:	11 24       	eor	r1, r1
    4cc6:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00004d80 <__mulshisi3>:
    4d80:	b7 ff       	sbrs	r27, 7
    4d82:	0c 94 59 26 	jmp	0x4cb2	; 0x4cb2 <__muluhisi3>

00004d86 <__mulohisi3>:
    4d86:	0e 94 59 26 	call	0x4cb2	; 0x4cb2 <__muluhisi3>
    4d8a:	82 1b       	sub	r24, r18
    4d8c:	93 0b       	sbc	r25, r19
    4d8e:	08 95       	ret

Disassembly of section .text.libgcc:

00004d90 <__xload_2>:
    4d90:	57 fd       	sbrc	r21, 7
    4d92:	03 c0       	rjmp	.+6      	; 0x4d9a <__xload_2+0xa>
    4d94:	65 91       	lpm	r22, Z+
    4d96:	75 91       	lpm	r23, Z+
    4d98:	08 95       	ret
    4d9a:	61 91       	ld	r22, Z+
    4d9c:	71 91       	ld	r23, Z+
    4d9e:	08 95       	ret

Disassembly of section .text.libgcc:

00004c40 <__xload_4>:
    4c40:	57 fd       	sbrc	r21, 7
    4c42:	05 c0       	rjmp	.+10     	; 0x4c4e <__xload_4+0xe>
    4c44:	65 91       	lpm	r22, Z+
    4c46:	75 91       	lpm	r23, Z+
    4c48:	85 91       	lpm	r24, Z+
    4c4a:	95 91       	lpm	r25, Z+
    4c4c:	08 95       	ret
    4c4e:	61 91       	ld	r22, Z+
    4c50:	71 91       	ld	r23, Z+
    4c52:	81 91       	ld	r24, Z+
    4c54:	91 91       	ld	r25, Z+
    4c56:	08 95       	ret

Disassembly of section .text.libgcc:

00004c58 <__adddi3_s8>:
    4c58:	00 24       	eor	r0, r0
    4c5a:	a7 fd       	sbrc	r26, 7
    4c5c:	00 94       	com	r0
    4c5e:	2a 0f       	add	r18, r26
    4c60:	30 1d       	adc	r19, r0
    4c62:	40 1d       	adc	r20, r0
    4c64:	50 1d       	adc	r21, r0
    4c66:	60 1d       	adc	r22, r0
    4c68:	70 1d       	adc	r23, r0
    4c6a:	80 1d       	adc	r24, r0
    4c6c:	90 1d       	adc	r25, r0
    4c6e:	08 95       	ret

Disassembly of section .text.__dummy_fini:

00004e28 <_fini>:
    4e28:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00004e2a <__funcs_on_exit>:
    4e2a:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00004e2c <__simulator_exit>:
    4e2c:	08 95       	ret

Disassembly of section .text.exit:

00004cc8 <exit>:
    4cc8:	ec 01       	movw	r28, r24
    4cca:	0e 94 15 27 	call	0x4e2a	; 0x4e2a <__funcs_on_exit>
    4cce:	0e 94 14 27 	call	0x4e28	; 0x4e28 <_fini>
    4cd2:	ce 01       	movw	r24, r28
    4cd4:	0e 94 16 27 	call	0x4e2c	; 0x4e2c <__simulator_exit>
    4cd8:	ce 01       	movw	r24, r28
    4cda:	0e 94 11 27 	call	0x4e22	; 0x4e22 <_Exit>

Disassembly of section .text.memcpy:

00004626 <memcpy>:
    4626:	cf 92       	push	r12
    4628:	df 92       	push	r13
    462a:	ef 92       	push	r14
    462c:	6a 01       	movw	r12, r20
    462e:	e6 2e       	mov	r14, r22
    4630:	dc 01       	movw	r26, r24
    4632:	28 0f       	add	r18, r24
    4634:	39 1f       	adc	r19, r25
    4636:	a2 17       	cp	r26, r18
    4638:	b3 07       	cpc	r27, r19
    463a:	51 f0       	breq	.+20     	; 0x4650 <memcpy+0x2a>
    463c:	f6 01       	movw	r30, r12
    463e:	44 91       	lpm	r20, Z
    4640:	e7 fc       	sbrc	r14, 7
    4642:	40 81       	ld	r20, Z
    4644:	4d 93       	st	X+, r20
    4646:	4f ef       	ldi	r20, 0xFF	; 255
    4648:	c4 1a       	sub	r12, r20
    464a:	d4 0a       	sbc	r13, r20
    464c:	e4 0a       	sbc	r14, r20
    464e:	f3 cf       	rjmp	.-26     	; 0x4636 <memcpy+0x10>
    4650:	ef 90       	pop	r14
    4652:	df 90       	pop	r13
    4654:	cf 90       	pop	r12
    4656:	08 95       	ret

Disassembly of section .text.memset:

00004d18 <memset>:
    4d18:	fc 01       	movw	r30, r24
    4d1a:	48 0f       	add	r20, r24
    4d1c:	59 1f       	adc	r21, r25
    4d1e:	e4 17       	cp	r30, r20
    4d20:	f5 07       	cpc	r31, r21
    4d22:	11 f0       	breq	.+4      	; 0x4d28 <memset+0x10>
    4d24:	61 93       	st	Z+, r22
    4d26:	fb cf       	rjmp	.-10     	; 0x4d1e <memset+0x6>
    4d28:	08 95       	ret

Disassembly of section .text.gmtime:

00004e0e <gmtime>:
    4e0e:	44 e0       	ldi	r20, 0x04	; 4
    4e10:	59 e0       	ldi	r21, 0x09	; 9
    4e12:	0e 94 46 1e 	call	0x3c8c	; 0x3c8c <__gmtime_r>
    4e16:	08 95       	ret

Disassembly of section .text.__gmtime_r:

00003c8c <__gmtime_r>:
    3c8c:	a0 e0       	ldi	r26, 0x00	; 0
    3c8e:	b0 e0       	ldi	r27, 0x00	; 0
    3c90:	ec e4       	ldi	r30, 0x4C	; 76
    3c92:	fe e1       	ldi	r31, 0x1E	; 30
    3c94:	0c 94 62 22 	jmp	0x44c4	; 0x44c4 <__prologue_saves__+0xc>
    3c98:	ea 01       	movw	r28, r20
    3c9a:	fb 01       	movw	r30, r22
    3c9c:	58 2f       	mov	r21, r24
    3c9e:	0e 94 20 26 	call	0x4c40	; 0x4c40 <__xload_4>
    3ca2:	4b 01       	movw	r8, r22
    3ca4:	5c 01       	movw	r10, r24
    3ca6:	c1 2c       	mov	r12, r1
    3ca8:	d1 2c       	mov	r13, r1
    3caa:	76 01       	movw	r14, r12
    3cac:	8e 01       	movw	r16, r28
    3cae:	9b 01       	movw	r18, r22
    3cb0:	a5 01       	movw	r20, r10
    3cb2:	60 e0       	ldi	r22, 0x00	; 0
    3cb4:	70 e0       	ldi	r23, 0x00	; 0
    3cb6:	80 e0       	ldi	r24, 0x00	; 0
    3cb8:	90 e0       	ldi	r25, 0x00	; 0
    3cba:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <__secs_to_tm>
    3cbe:	97 ff       	sbrs	r25, 7
    3cc0:	09 c0       	rjmp	.+18     	; 0x3cd4 <__gmtime_r+0x48>
    3cc2:	8f e4       	ldi	r24, 0x4F	; 79
    3cc4:	90 e0       	ldi	r25, 0x00	; 0
    3cc6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    3cca:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    3cce:	80 e0       	ldi	r24, 0x00	; 0
    3cd0:	90 e0       	ldi	r25, 0x00	; 0
    3cd2:	0d c0       	rjmp	.+26     	; 0x3cee <__gmtime_r+0x62>
    3cd4:	19 8a       	std	Y+17, r1	; 0x11
    3cd6:	18 8a       	std	Y+16, r1	; 0x10
    3cd8:	1a 8a       	std	Y+18, r1	; 0x12
    3cda:	1b 8a       	std	Y+19, r1	; 0x13
    3cdc:	1c 8a       	std	Y+20, r1	; 0x14
    3cde:	1d 8a       	std	Y+21, r1	; 0x15
    3ce0:	8f ea       	ldi	r24, 0xAF	; 175
    3ce2:	93 e0       	ldi	r25, 0x03	; 3
    3ce4:	a0 e0       	ldi	r26, 0x00	; 0
    3ce6:	8e 8b       	std	Y+22, r24	; 0x16
    3ce8:	9f 8b       	std	Y+23, r25	; 0x17
    3cea:	a8 8f       	std	Y+24, r26	; 0x18
    3cec:	ce 01       	movw	r24, r28
    3cee:	cd b7       	in	r28, 0x3d	; 61
    3cf0:	de b7       	in	r29, 0x3e	; 62
    3cf2:	ec e0       	ldi	r30, 0x0C	; 12
    3cf4:	0c 94 7e 22 	jmp	0x44fc	; 0x44fc <__epilogue_restores__+0xc>

Disassembly of section .text.mktime:

00003822 <mktime>:
    3822:	a9 e1       	ldi	r26, 0x19	; 25
    3824:	b0 e0       	ldi	r27, 0x00	; 0
    3826:	e7 e1       	ldi	r30, 0x17	; 23
    3828:	fc e1       	ldi	r31, 0x1C	; 28
    382a:	0c 94 5e 22 	jmp	0x44bc	; 0x44bc <__prologue_saves__+0x4>
    382e:	2c 01       	movw	r4, r24
    3830:	bc 01       	movw	r22, r24
    3832:	80 e8       	ldi	r24, 0x80	; 128
    3834:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <__tm_to_secs>
    3838:	39 01       	movw	r6, r18
    383a:	4a 01       	movw	r8, r20
    383c:	59 01       	movw	r10, r18
    383e:	6a 01       	movw	r12, r20
    3840:	e1 2c       	mov	r14, r1
    3842:	f1 2c       	mov	r15, r1
    3844:	00 e0       	ldi	r16, 0x00	; 0
    3846:	10 e0       	ldi	r17, 0x00	; 0
    3848:	0e 94 a7 26 	call	0x4d4e	; 0x4d4e <__cmpdi2>
    384c:	f9 f4       	brne	.+62     	; 0x388c <mktime+0x6a>
    384e:	1a 8a       	std	Y+18, r1	; 0x12
    3850:	19 8a       	std	Y+17, r1	; 0x11
    3852:	1b 8a       	std	Y+19, r1	; 0x13
    3854:	1c 8a       	std	Y+20, r1	; 0x14
    3856:	1d 8a       	std	Y+21, r1	; 0x15
    3858:	1e 8a       	std	Y+22, r1	; 0x16
    385a:	23 eb       	ldi	r18, 0xB3	; 179
    385c:	33 e0       	ldi	r19, 0x03	; 3
    385e:	40 e0       	ldi	r20, 0x00	; 0
    3860:	2f 8b       	std	Y+23, r18	; 0x17
    3862:	38 8f       	std	Y+24, r19	; 0x18
    3864:	49 8f       	std	Y+25, r20	; 0x19
    3866:	8e 01       	movw	r16, r28
    3868:	0f 5f       	subi	r16, 0xFF	; 255
    386a:	1f 4f       	sbci	r17, 0xFF	; 255
    386c:	93 01       	movw	r18, r6
    386e:	48 2d       	mov	r20, r8
    3870:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <__secs_to_tm>
    3874:	97 fd       	sbrc	r25, 7
    3876:	0a c0       	rjmp	.+20     	; 0x388c <mktime+0x6a>
    3878:	89 e1       	ldi	r24, 0x19	; 25
    387a:	f8 01       	movw	r30, r16
    387c:	d2 01       	movw	r26, r4
    387e:	01 90       	ld	r0, Z+
    3880:	0d 92       	st	X+, r0
    3882:	8a 95       	dec	r24
    3884:	e1 f7       	brne	.-8      	; 0x387e <mktime+0x5c>
    3886:	b3 01       	movw	r22, r6
    3888:	c4 01       	movw	r24, r8
    388a:	0a c0       	rjmp	.+20     	; 0x38a0 <mktime+0x7e>
    388c:	8f e4       	ldi	r24, 0x4F	; 79
    388e:	90 e0       	ldi	r25, 0x00	; 0
    3890:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    3894:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    3898:	6f ef       	ldi	r22, 0xFF	; 255
    389a:	7f ef       	ldi	r23, 0xFF	; 255
    389c:	8f ef       	ldi	r24, 0xFF	; 255
    389e:	9f ef       	ldi	r25, 0xFF	; 255
    38a0:	69 96       	adiw	r28, 0x19	; 25
    38a2:	e0 e1       	ldi	r30, 0x10	; 16
    38a4:	0c 94 7a 22 	jmp	0x44f4	; 0x44f4 <__epilogue_restores__+0x4>

Disassembly of section .text._Exit:

00004e22 <_Exit>:
    4e22:	0e 94 6b 00 	call	0xd6	; 0xd6 <_exit>

Disassembly of section .text.__tm_to_secs:

00001c8e <__tm_to_secs>:
    1c8e:	a5 e0       	ldi	r26, 0x05	; 5
    1c90:	b0 e0       	ldi	r27, 0x00	; 0
    1c92:	ed e4       	ldi	r30, 0x4D	; 77
    1c94:	fe e0       	ldi	r31, 0x0E	; 14
    1c96:	0c 94 5c 22 	jmp	0x44b8	; 0x44b8 <__prologue_saves__>
    1c9a:	3b 01       	movw	r6, r22
    1c9c:	88 2e       	mov	r8, r24
    1c9e:	a8 2f       	mov	r26, r24
    1ca0:	cb 01       	movw	r24, r22
    1ca2:	0a 96       	adiw	r24, 0x0a	; 10
    1ca4:	a1 1d       	adc	r26, r1
    1ca6:	fc 01       	movw	r30, r24
    1ca8:	5a 2f       	mov	r21, r26
    1caa:	0e 94 c8 26 	call	0x4d90	; 0x4d90 <__xload_2>
    1cae:	5b 01       	movw	r10, r22
    1cb0:	9b 01       	movw	r18, r22
    1cb2:	9b 2c       	mov	r9, r11
    1cb4:	99 0c       	add	r9, r9
    1cb6:	99 08       	sbc	r9, r9
    1cb8:	f9 2c       	mov	r15, r9
    1cba:	b9 2d       	mov	r27, r9
    1cbc:	a9 2d       	mov	r26, r9
    1cbe:	89 2d       	mov	r24, r9
    1cc0:	99 2d       	mov	r25, r9
    1cc2:	e8 2c       	mov	r14, r8
    1cc4:	63 01       	movw	r12, r6
    1cc6:	48 e0       	ldi	r20, 0x08	; 8
    1cc8:	c4 0e       	add	r12, r20
    1cca:	d1 1c       	adc	r13, r1
    1ccc:	e1 1c       	adc	r14, r1
    1cce:	f6 01       	movw	r30, r12
    1cd0:	5e 2d       	mov	r21, r14
    1cd2:	0e 94 c8 26 	call	0x4d90	; 0x4d90 <__xload_2>
    1cd6:	2b 01       	movw	r4, r22
    1cd8:	6c 30       	cpi	r22, 0x0C	; 12
    1cda:	71 05       	cpc	r23, r1
    1cdc:	10 f1       	brcs	.+68     	; 0x1d22 <__tm_to_secs+0x94>
    1cde:	cb 01       	movw	r24, r22
    1ce0:	6c e0       	ldi	r22, 0x0C	; 12
    1ce2:	70 e0       	ldi	r23, 0x00	; 0
    1ce4:	0e 94 18 24 	call	0x4830	; 0x4830 <__divmodhi4>
    1ce8:	2c 01       	movw	r4, r24
    1cea:	97 ff       	sbrs	r25, 7
    1cec:	05 c0       	rjmp	.+10     	; 0x1cf8 <__tm_to_secs+0x6a>
    1cee:	61 50       	subi	r22, 0x01	; 1
    1cf0:	71 09       	sbc	r23, r1
    1cf2:	8c e0       	ldi	r24, 0x0C	; 12
    1cf4:	48 0e       	add	r4, r24
    1cf6:	51 1c       	adc	r5, r1
    1cf8:	97 2f       	mov	r25, r23
    1cfa:	99 0f       	add	r25, r25
    1cfc:	99 0b       	sbc	r25, r25
    1cfe:	9b 01       	movw	r18, r22
    1d00:	49 2f       	mov	r20, r25
    1d02:	59 2f       	mov	r21, r25
    1d04:	69 2f       	mov	r22, r25
    1d06:	79 2f       	mov	r23, r25
    1d08:	89 2f       	mov	r24, r25
    1d0a:	c9 2c       	mov	r12, r9
    1d0c:	d9 2c       	mov	r13, r9
    1d0e:	e9 2c       	mov	r14, r9
    1d10:	f9 2c       	mov	r15, r9
    1d12:	09 2d       	mov	r16, r9
    1d14:	19 2d       	mov	r17, r9
    1d16:	0e 94 9e 26 	call	0x4d3c	; 0x4d3c <__adddi3>
    1d1a:	94 2e       	mov	r9, r20
    1d1c:	f5 2e       	mov	r15, r21
    1d1e:	b6 2f       	mov	r27, r22
    1d20:	a7 2f       	mov	r26, r23
    1d22:	8e 01       	movw	r16, r28
    1d24:	0f 5f       	subi	r16, 0xFF	; 255
    1d26:	1f 4f       	sbci	r17, 0xFF	; 255
    1d28:	49 2d       	mov	r20, r9
    1d2a:	5f 2d       	mov	r21, r15
    1d2c:	6b 2f       	mov	r22, r27
    1d2e:	7a 2f       	mov	r23, r26
    1d30:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__year_to_secs>
    1d34:	59 01       	movw	r10, r18
    1d36:	6a 01       	movw	r12, r20
    1d38:	7b 01       	movw	r14, r22
    1d3a:	8c 01       	movw	r16, r24
    1d3c:	69 81       	ldd	r22, Y+1	; 0x01
    1d3e:	7a 81       	ldd	r23, Y+2	; 0x02
    1d40:	c2 01       	movw	r24, r4
    1d42:	0e 94 21 22 	call	0x4442	; 0x4442 <__month_to_secs>
    1d46:	1b 01       	movw	r2, r22
    1d48:	2c 01       	movw	r4, r24
    1d4a:	55 0c       	add	r5, r5
    1d4c:	22 08       	sbc	r2, r2
    1d4e:	32 2c       	mov	r3, r2
    1d50:	21 01       	movw	r4, r2
    1d52:	9b 01       	movw	r18, r22
    1d54:	ac 01       	movw	r20, r24
    1d56:	62 2d       	mov	r22, r2
    1d58:	72 2d       	mov	r23, r2
    1d5a:	82 2d       	mov	r24, r2
    1d5c:	92 2d       	mov	r25, r2
    1d5e:	0e 94 9e 26 	call	0x4d3c	; 0x4d3c <__adddi3>
    1d62:	19 01       	movw	r2, r18
    1d64:	2a 01       	movw	r4, r20
    1d66:	96 2e       	mov	r9, r22
    1d68:	7b 83       	std	Y+3, r23	; 0x03
    1d6a:	8c 83       	std	Y+4, r24	; 0x04
    1d6c:	9d 83       	std	Y+5, r25	; 0x05
    1d6e:	a8 2d       	mov	r26, r8
    1d70:	c3 01       	movw	r24, r6
    1d72:	06 96       	adiw	r24, 0x06	; 6
    1d74:	a1 1d       	adc	r26, r1
    1d76:	fc 01       	movw	r30, r24
    1d78:	5a 2f       	mov	r21, r26
    1d7a:	0e 94 c8 26 	call	0x4d90	; 0x4d90 <__xload_2>
    1d7e:	61 50       	subi	r22, 0x01	; 1
    1d80:	71 09       	sbc	r23, r1
    1d82:	97 2f       	mov	r25, r23
    1d84:	99 0f       	add	r25, r25
    1d86:	99 0b       	sbc	r25, r25
    1d88:	30 e8       	ldi	r19, 0x80	; 128
    1d8a:	a3 2e       	mov	r10, r19
    1d8c:	41 e5       	ldi	r20, 0x51	; 81
    1d8e:	b4 2e       	mov	r11, r20
    1d90:	cc 24       	eor	r12, r12
    1d92:	c3 94       	inc	r12
    1d94:	d1 2c       	mov	r13, r1
    1d96:	e1 2c       	mov	r14, r1
    1d98:	f1 2c       	mov	r15, r1
    1d9a:	00 e0       	ldi	r16, 0x00	; 0
    1d9c:	10 e0       	ldi	r17, 0x00	; 0
    1d9e:	9b 01       	movw	r18, r22
    1da0:	49 2f       	mov	r20, r25
    1da2:	59 2f       	mov	r21, r25
    1da4:	69 2f       	mov	r22, r25
    1da6:	79 2f       	mov	r23, r25
    1da8:	89 2f       	mov	r24, r25
    1daa:	0e 94 18 1a 	call	0x3430	; 0x3430 <__muldi3>
    1dae:	51 01       	movw	r10, r2
    1db0:	62 01       	movw	r12, r4
    1db2:	e9 2c       	mov	r14, r9
    1db4:	fb 80       	ldd	r15, Y+3	; 0x03
    1db6:	0c 81       	ldd	r16, Y+4	; 0x04
    1db8:	1d 81       	ldd	r17, Y+5	; 0x05
    1dba:	0e 94 9e 26 	call	0x4d3c	; 0x4d3c <__adddi3>
    1dbe:	59 01       	movw	r10, r18
    1dc0:	6a 01       	movw	r12, r20
    1dc2:	7b 01       	movw	r14, r22
    1dc4:	8c 01       	movw	r16, r24
    1dc6:	a8 2d       	mov	r26, r8
    1dc8:	c3 01       	movw	r24, r6
    1dca:	04 96       	adiw	r24, 0x04	; 4
    1dcc:	a1 1d       	adc	r26, r1
    1dce:	fc 01       	movw	r30, r24
    1dd0:	5a 2f       	mov	r21, r26
    1dd2:	0e 94 c8 26 	call	0x4d90	; 0x4d90 <__xload_2>
    1dd6:	07 2e       	mov	r0, r23
    1dd8:	00 0c       	add	r0, r0
    1dda:	88 0b       	sbc	r24, r24
    1ddc:	99 0b       	sbc	r25, r25
    1dde:	20 e1       	ldi	r18, 0x10	; 16
    1de0:	3e e0       	ldi	r19, 0x0E	; 14
    1de2:	40 e0       	ldi	r20, 0x00	; 0
    1de4:	50 e0       	ldi	r21, 0x00	; 0
    1de6:	0e 94 ea 25 	call	0x4bd4	; 0x4bd4 <__mulsidi3>
    1dea:	0e 94 9e 26 	call	0x4d3c	; 0x4d3c <__adddi3>
    1dee:	59 01       	movw	r10, r18
    1df0:	6a 01       	movw	r12, r20
    1df2:	7b 01       	movw	r14, r22
    1df4:	8c 01       	movw	r16, r24
    1df6:	a8 2d       	mov	r26, r8
    1df8:	c3 01       	movw	r24, r6
    1dfa:	02 96       	adiw	r24, 0x02	; 2
    1dfc:	a1 1d       	adc	r26, r1
    1dfe:	fc 01       	movw	r30, r24
    1e00:	5a 2f       	mov	r21, r26
    1e02:	0e 94 c8 26 	call	0x4d90	; 0x4d90 <__xload_2>
    1e06:	07 2e       	mov	r0, r23
    1e08:	00 0c       	add	r0, r0
    1e0a:	88 0b       	sbc	r24, r24
    1e0c:	99 0b       	sbc	r25, r25
    1e0e:	2c e3       	ldi	r18, 0x3C	; 60
    1e10:	30 e0       	ldi	r19, 0x00	; 0
    1e12:	40 e0       	ldi	r20, 0x00	; 0
    1e14:	50 e0       	ldi	r21, 0x00	; 0
    1e16:	0e 94 ea 25 	call	0x4bd4	; 0x4bd4 <__mulsidi3>
    1e1a:	0e 94 9e 26 	call	0x4d3c	; 0x4d3c <__adddi3>
    1e1e:	59 01       	movw	r10, r18
    1e20:	6a 01       	movw	r12, r20
    1e22:	7b 01       	movw	r14, r22
    1e24:	8c 01       	movw	r16, r24
    1e26:	f3 01       	movw	r30, r6
    1e28:	58 2d       	mov	r21, r8
    1e2a:	0e 94 c8 26 	call	0x4d90	; 0x4d90 <__xload_2>
    1e2e:	9b 01       	movw	r18, r22
    1e30:	93 2f       	mov	r25, r19
    1e32:	99 0f       	add	r25, r25
    1e34:	99 0b       	sbc	r25, r25
    1e36:	49 2f       	mov	r20, r25
    1e38:	59 2f       	mov	r21, r25
    1e3a:	69 2f       	mov	r22, r25
    1e3c:	79 2f       	mov	r23, r25
    1e3e:	89 2f       	mov	r24, r25
    1e40:	0e 94 9e 26 	call	0x4d3c	; 0x4d3c <__adddi3>
    1e44:	25 96       	adiw	r28, 0x05	; 5
    1e46:	e2 e1       	ldi	r30, 0x12	; 18
    1e48:	0c 94 78 22 	jmp	0x44f0	; 0x44f0 <__epilogue_restores__>

Disassembly of section .text.__year_to_secs:

000013e6 <__year_to_secs>:
    13e6:	ac e0       	ldi	r26, 0x0C	; 12
    13e8:	b0 e0       	ldi	r27, 0x00	; 0
    13ea:	e9 ef       	ldi	r30, 0xF9	; 249
    13ec:	f9 e0       	ldi	r31, 0x09	; 9
    13ee:	0c 94 5c 22 	jmp	0x44b8	; 0x44b8 <__prologue_saves__>
    13f2:	49 01       	movw	r8, r18
    13f4:	5a 01       	movw	r10, r20
    13f6:	6b 01       	movw	r12, r22
    13f8:	7c 01       	movw	r14, r24
    13fa:	1c 83       	std	Y+4, r17	; 0x04
    13fc:	0b 83       	std	Y+3, r16	; 0x03
    13fe:	2a 38       	cpi	r18, 0x8A	; 138
    1400:	31 05       	cpc	r19, r1
    1402:	41 05       	cpc	r20, r1
    1404:	51 05       	cpc	r21, r1
    1406:	61 05       	cpc	r22, r1
    1408:	71 05       	cpc	r23, r1
    140a:	81 05       	cpc	r24, r1
    140c:	91 05       	cpc	r25, r1
    140e:	11 f0       	breq	.+4      	; 0x1414 <__year_to_secs+0x2e>
    1410:	0c f0       	brlt	.+2      	; 0x1414 <__year_to_secs+0x2e>
    1412:	42 c0       	rjmp	.+132    	; 0x1498 <__year_to_secs+0xb2>
    1414:	f9 01       	movw	r30, r18
    1416:	e4 54       	subi	r30, 0x44	; 68
    1418:	f1 09       	sbc	r31, r1
    141a:	f5 95       	asr	r31
    141c:	e7 95       	ror	r30
    141e:	f5 95       	asr	r31
    1420:	e7 95       	ror	r30
    1422:	c9 01       	movw	r24, r18
    1424:	83 70       	andi	r24, 0x03	; 3
    1426:	99 27       	eor	r25, r25
    1428:	89 2b       	or	r24, r25
    142a:	51 f4       	brne	.+20     	; 0x1440 <__year_to_secs+0x5a>
    142c:	31 97       	sbiw	r30, 0x01	; 1
    142e:	01 15       	cp	r16, r1
    1430:	11 05       	cpc	r17, r1
    1432:	69 f0       	breq	.+26     	; 0x144e <__year_to_secs+0x68>
    1434:	81 e0       	ldi	r24, 0x01	; 1
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	d8 01       	movw	r26, r16
    143a:	8d 93       	st	X+, r24
    143c:	9c 93       	st	X, r25
    143e:	07 c0       	rjmp	.+14     	; 0x144e <__year_to_secs+0x68>
    1440:	8b 81       	ldd	r24, Y+3	; 0x03
    1442:	9c 81       	ldd	r25, Y+4	; 0x04
    1444:	00 97       	sbiw	r24, 0x00	; 0
    1446:	19 f0       	breq	.+6      	; 0x144e <__year_to_secs+0x68>
    1448:	dc 01       	movw	r26, r24
    144a:	1d 92       	st	X+, r1
    144c:	1c 92       	st	X, r1
    144e:	d9 01       	movw	r26, r18
    1450:	a6 54       	subi	r26, 0x46	; 70
    1452:	b1 09       	sbc	r27, r1
    1454:	20 e8       	ldi	r18, 0x80	; 128
    1456:	33 e3       	ldi	r19, 0x33	; 51
    1458:	41 ee       	ldi	r20, 0xE1	; 225
    145a:	51 e0       	ldi	r21, 0x01	; 1
    145c:	0e 94 c0 26 	call	0x4d80	; 0x4d80 <__mulshisi3>
    1460:	6b 01       	movw	r12, r22
    1462:	7c 01       	movw	r14, r24
    1464:	df 01       	movw	r26, r30
    1466:	20 e8       	ldi	r18, 0x80	; 128
    1468:	31 e5       	ldi	r19, 0x51	; 81
    146a:	41 e0       	ldi	r20, 0x01	; 1
    146c:	50 e0       	ldi	r21, 0x00	; 0
    146e:	0e 94 c0 26 	call	0x4d80	; 0x4d80 <__mulshisi3>
    1472:	dc 01       	movw	r26, r24
    1474:	cb 01       	movw	r24, r22
    1476:	8c 0d       	add	r24, r12
    1478:	9d 1d       	adc	r25, r13
    147a:	ae 1d       	adc	r26, r14
    147c:	bf 1d       	adc	r27, r15
    147e:	9c 01       	movw	r18, r24
    1480:	ad 01       	movw	r20, r26
    1482:	6c 01       	movw	r12, r24
    1484:	7d 01       	movw	r14, r26
    1486:	ff 0c       	add	r15, r15
    1488:	cc 08       	sbc	r12, r12
    148a:	dc 2c       	mov	r13, r12
    148c:	76 01       	movw	r14, r12
    148e:	ac 2d       	mov	r26, r12
    1490:	fc 2d       	mov	r31, r12
    1492:	ec 2d       	mov	r30, r12
    1494:	9c 2d       	mov	r25, r12
    1496:	cb c0       	rjmp	.+406    	; 0x162e <__year_to_secs+0x248>
    1498:	eb 81       	ldd	r30, Y+3	; 0x03
    149a:	fc 81       	ldd	r31, Y+4	; 0x04
    149c:	ef 2b       	or	r30, r31
    149e:	31 f4       	brne	.+12     	; 0x14ac <__year_to_secs+0xc6>
    14a0:	1a 82       	std	Y+2, r1	; 0x02
    14a2:	19 82       	std	Y+1, r1	; 0x01
    14a4:	ce 01       	movw	r24, r28
    14a6:	01 96       	adiw	r24, 0x01	; 1
    14a8:	9c 83       	std	Y+4, r25	; 0x04
    14aa:	8b 83       	std	Y+3, r24	; 0x03
    14ac:	c4 01       	movw	r24, r8
    14ae:	84 56       	subi	r24, 0x64	; 100
    14b0:	91 09       	sbc	r25, r1
    14b2:	60 e9       	ldi	r22, 0x90	; 144
    14b4:	71 e0       	ldi	r23, 0x01	; 1
    14b6:	0e 94 18 24 	call	0x4830	; 0x4830 <__divmodhi4>
    14ba:	7e 83       	std	Y+6, r23	; 0x06
    14bc:	6d 83       	std	Y+5, r22	; 0x05
    14be:	94 01       	movw	r18, r8
    14c0:	a5 01       	movw	r20, r10
    14c2:	b6 01       	movw	r22, r12
    14c4:	c7 01       	movw	r24, r14
    14c6:	ac e9       	ldi	r26, 0x9C	; 156
    14c8:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <__adddi3_s8>
    14cc:	19 01       	movw	r2, r18
    14ce:	2a 01       	movw	r4, r20
    14d0:	3b 01       	movw	r6, r22
    14d2:	8f 83       	std	Y+7, r24	; 0x07
    14d4:	98 87       	std	Y+8, r25	; 0x08
    14d6:	70 e9       	ldi	r23, 0x90	; 144
    14d8:	a7 2e       	mov	r10, r23
    14da:	bb 24       	eor	r11, r11
    14dc:	b3 94       	inc	r11
    14de:	c1 2c       	mov	r12, r1
    14e0:	d1 2c       	mov	r13, r1
    14e2:	e1 2c       	mov	r14, r1
    14e4:	f1 2c       	mov	r15, r1
    14e6:	00 e0       	ldi	r16, 0x00	; 0
    14e8:	10 e0       	ldi	r17, 0x00	; 0
    14ea:	91 01       	movw	r18, r2
    14ec:	a2 01       	movw	r20, r4
    14ee:	b3 01       	movw	r22, r6
    14f0:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <__moddi3>
    14f4:	c9 01       	movw	r24, r18
    14f6:	00 97       	sbiw	r24, 0x00	; 0
    14f8:	59 f4       	brne	.+22     	; 0x1510 <__year_to_secs+0x12a>
    14fa:	81 e0       	ldi	r24, 0x01	; 1
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	ab 81       	ldd	r26, Y+3	; 0x03
    1500:	bc 81       	ldd	r27, Y+4	; 0x04
    1502:	8d 93       	st	X+, r24
    1504:	9c 93       	st	X, r25
    1506:	20 e0       	ldi	r18, 0x00	; 0
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	40 e0       	ldi	r20, 0x00	; 0
    150c:	50 e0       	ldi	r21, 0x00	; 0
    150e:	33 c0       	rjmp	.+102    	; 0x1576 <__year_to_secs+0x190>
    1510:	28 3c       	cpi	r18, 0xC8	; 200
    1512:	31 05       	cpc	r19, r1
    1514:	6c f0       	brlt	.+26     	; 0x1530 <__year_to_secs+0x14a>
    1516:	2c 32       	cpi	r18, 0x2C	; 44
    1518:	31 40       	sbci	r19, 0x01	; 1
    151a:	2c f0       	brlt	.+10     	; 0x1526 <__year_to_secs+0x140>
    151c:	8c 52       	subi	r24, 0x2C	; 44
    151e:	91 40       	sbci	r25, 0x01	; 1
    1520:	43 e0       	ldi	r20, 0x03	; 3
    1522:	50 e0       	ldi	r21, 0x00	; 0
    1524:	0c c0       	rjmp	.+24     	; 0x153e <__year_to_secs+0x158>
    1526:	88 5c       	subi	r24, 0xC8	; 200
    1528:	91 09       	sbc	r25, r1
    152a:	42 e0       	ldi	r20, 0x02	; 2
    152c:	50 e0       	ldi	r21, 0x00	; 0
    152e:	07 c0       	rjmp	.+14     	; 0x153e <__year_to_secs+0x158>
    1530:	24 36       	cpi	r18, 0x64	; 100
    1532:	31 05       	cpc	r19, r1
    1534:	6c f0       	brlt	.+26     	; 0x1550 <__year_to_secs+0x16a>
    1536:	84 56       	subi	r24, 0x64	; 100
    1538:	91 09       	sbc	r25, r1
    153a:	41 e0       	ldi	r20, 0x01	; 1
    153c:	50 e0       	ldi	r21, 0x00	; 0
    153e:	00 97       	sbiw	r24, 0x00	; 0
    1540:	49 f4       	brne	.+18     	; 0x1554 <__year_to_secs+0x16e>
    1542:	eb 81       	ldd	r30, Y+3	; 0x03
    1544:	fc 81       	ldd	r31, Y+4	; 0x04
    1546:	11 82       	std	Z+1, r1	; 0x01
    1548:	10 82       	st	Z, r1
    154a:	20 e0       	ldi	r18, 0x00	; 0
    154c:	30 e0       	ldi	r19, 0x00	; 0
    154e:	13 c0       	rjmp	.+38     	; 0x1576 <__year_to_secs+0x190>
    1550:	40 e0       	ldi	r20, 0x00	; 0
    1552:	50 e0       	ldi	r21, 0x00	; 0
    1554:	9c 01       	movw	r18, r24
    1556:	36 95       	lsr	r19
    1558:	27 95       	ror	r18
    155a:	36 95       	lsr	r19
    155c:	27 95       	ror	r18
    155e:	83 70       	andi	r24, 0x03	; 3
    1560:	99 27       	eor	r25, r25
    1562:	61 e0       	ldi	r22, 0x01	; 1
    1564:	70 e0       	ldi	r23, 0x00	; 0
    1566:	89 2b       	or	r24, r25
    1568:	11 f0       	breq	.+4      	; 0x156e <__year_to_secs+0x188>
    156a:	60 e0       	ldi	r22, 0x00	; 0
    156c:	70 e0       	ldi	r23, 0x00	; 0
    156e:	ab 81       	ldd	r26, Y+3	; 0x03
    1570:	bc 81       	ldd	r27, Y+4	; 0x04
    1572:	6d 93       	st	X+, r22
    1574:	7c 93       	st	X, r23
    1576:	81 e6       	ldi	r24, 0x61	; 97
    1578:	ed 81       	ldd	r30, Y+5	; 0x05
    157a:	fe 81       	ldd	r31, Y+6	; 0x06
    157c:	8e 9f       	mul	r24, r30
    157e:	b0 01       	movw	r22, r0
    1580:	8f 9f       	mul	r24, r31
    1582:	70 0d       	add	r23, r0
    1584:	11 24       	eor	r1, r1
    1586:	e8 e1       	ldi	r30, 0x18	; 24
    1588:	e4 9f       	mul	r30, r20
    158a:	c0 01       	movw	r24, r0
    158c:	e5 9f       	mul	r30, r21
    158e:	90 0d       	add	r25, r0
    1590:	11 24       	eor	r1, r1
    1592:	86 0f       	add	r24, r22
    1594:	97 1f       	adc	r25, r23
    1596:	ab 81       	ldd	r26, Y+3	; 0x03
    1598:	bc 81       	ldd	r27, Y+4	; 0x04
    159a:	4d 91       	ld	r20, X+
    159c:	5c 91       	ld	r21, X
    159e:	84 1b       	sub	r24, r20
    15a0:	95 0b       	sbc	r25, r21
    15a2:	82 0f       	add	r24, r18
    15a4:	93 1f       	adc	r25, r19
    15a6:	e9 2f       	mov	r30, r25
    15a8:	ee 0f       	add	r30, r30
    15aa:	ee 0b       	sbc	r30, r30
    15ac:	20 e8       	ldi	r18, 0x80	; 128
    15ae:	a2 2e       	mov	r10, r18
    15b0:	31 e5       	ldi	r19, 0x51	; 81
    15b2:	b3 2e       	mov	r11, r19
    15b4:	cc 24       	eor	r12, r12
    15b6:	c3 94       	inc	r12
    15b8:	d1 2c       	mov	r13, r1
    15ba:	e1 2c       	mov	r14, r1
    15bc:	f1 2c       	mov	r15, r1
    15be:	00 e0       	ldi	r16, 0x00	; 0
    15c0:	10 e0       	ldi	r17, 0x00	; 0
    15c2:	9c 01       	movw	r18, r24
    15c4:	4e 2f       	mov	r20, r30
    15c6:	5e 2f       	mov	r21, r30
    15c8:	6e 2f       	mov	r22, r30
    15ca:	7e 2f       	mov	r23, r30
    15cc:	8e 2f       	mov	r24, r30
    15ce:	9e 2f       	mov	r25, r30
    15d0:	0e 94 18 1a 	call	0x3430	; 0x3430 <__muldi3>
    15d4:	92 2e       	mov	r9, r18
    15d6:	83 2e       	mov	r8, r19
    15d8:	4b 83       	std	Y+3, r20	; 0x03
    15da:	5d 83       	std	Y+5, r21	; 0x05
    15dc:	69 87       	std	Y+9, r22	; 0x09
    15de:	7a 87       	std	Y+10, r23	; 0x0a
    15e0:	8b 87       	std	Y+11, r24	; 0x0b
    15e2:	9c 87       	std	Y+12, r25	; 0x0c
    15e4:	43 e3       	ldi	r20, 0x33	; 51
    15e6:	b4 2e       	mov	r11, r20
    15e8:	51 ee       	ldi	r21, 0xE1	; 225
    15ea:	c5 2e       	mov	r12, r21
    15ec:	dd 24       	eor	r13, r13
    15ee:	d3 94       	inc	r13
    15f0:	91 01       	movw	r18, r2
    15f2:	a2 01       	movw	r20, r4
    15f4:	b3 01       	movw	r22, r6
    15f6:	8f 81       	ldd	r24, Y+7	; 0x07
    15f8:	98 85       	ldd	r25, Y+8	; 0x08
    15fa:	0e 94 18 1a 	call	0x3430	; 0x3430 <__muldi3>
    15fe:	59 01       	movw	r10, r18
    1600:	6a 01       	movw	r12, r20
    1602:	7b 01       	movw	r14, r22
    1604:	8c 01       	movw	r16, r24
    1606:	29 2d       	mov	r18, r9
    1608:	38 2d       	mov	r19, r8
    160a:	4b 81       	ldd	r20, Y+3	; 0x03
    160c:	5d 81       	ldd	r21, Y+5	; 0x05
    160e:	69 85       	ldd	r22, Y+9	; 0x09
    1610:	7a 85       	ldd	r23, Y+10	; 0x0a
    1612:	8b 85       	ldd	r24, Y+11	; 0x0b
    1614:	9c 85       	ldd	r25, Y+12	; 0x0c
    1616:	0e 94 9e 26 	call	0x4d3c	; 0x4d3c <__adddi3>
    161a:	3b 56       	subi	r19, 0x6B	; 107
    161c:	41 49       	sbci	r20, 0x91	; 145
    161e:	57 4c       	sbci	r21, 0xC7	; 199
    1620:	6f 4f       	sbci	r22, 0xFF	; 255
    1622:	7f 4f       	sbci	r23, 0xFF	; 255
    1624:	8f 4f       	sbci	r24, 0xFF	; 255
    1626:	9f 4f       	sbci	r25, 0xFF	; 255
    1628:	a6 2f       	mov	r26, r22
    162a:	f7 2f       	mov	r31, r23
    162c:	e8 2f       	mov	r30, r24
    162e:	6a 2f       	mov	r22, r26
    1630:	7f 2f       	mov	r23, r31
    1632:	8e 2f       	mov	r24, r30
    1634:	2c 96       	adiw	r28, 0x0c	; 12
    1636:	e2 e1       	ldi	r30, 0x12	; 18
    1638:	0c 94 78 22 	jmp	0x44f0	; 0x44f0 <__epilogue_restores__>

Disassembly of section .text.__month_to_secs:

00004442 <__month_to_secs>:
    4442:	cf 93       	push	r28
    4444:	df 93       	push	r29
    4446:	9c 01       	movw	r18, r24
    4448:	eb 01       	movw	r28, r22
    444a:	88 0f       	add	r24, r24
    444c:	99 1f       	adc	r25, r25
    444e:	88 0f       	add	r24, r24
    4450:	99 1f       	adc	r25, r25
    4452:	09 2e       	mov	r0, r25
    4454:	00 0c       	add	r0, r0
    4456:	aa 0b       	sbc	r26, r26
    4458:	85 58       	subi	r24, 0x85	; 133
    445a:	9d 4f       	sbci	r25, 0xFD	; 253
    445c:	af 4f       	sbci	r26, 0xFF	; 255
    445e:	fc 01       	movw	r30, r24
    4460:	5a 2f       	mov	r21, r26
    4462:	0e 94 20 26 	call	0x4c40	; 0x4c40 <__xload_4>
    4466:	cd 2b       	or	r28, r29
    4468:	39 f0       	breq	.+14     	; 0x4478 <__month_to_secs+0x36>
    446a:	22 30       	cpi	r18, 0x02	; 2
    446c:	31 05       	cpc	r19, r1
    446e:	24 f0       	brlt	.+8      	; 0x4478 <__month_to_secs+0x36>
    4470:	60 58       	subi	r22, 0x80	; 128
    4472:	7e 4a       	sbci	r23, 0xAE	; 174
    4474:	8e 4f       	sbci	r24, 0xFE	; 254
    4476:	9f 4f       	sbci	r25, 0xFF	; 255
    4478:	df 91       	pop	r29
    447a:	cf 91       	pop	r28
    447c:	08 95       	ret

Disassembly of section .text.__secs_to_tm:

000003b8 <__secs_to_tm>:
 3b8:	a6 e1       	ldi	r26, 0x16	; 22
 3ba:	b0 e0       	ldi	r27, 0x00	; 0
 3bc:	e2 ee       	ldi	r30, 0xE2	; 226
 3be:	f1 e0       	ldi	r31, 0x01	; 1
 3c0:	0c 94 5c 22 	jmp	0x44b8	; 0x44b8 <__prologue_saves__>
 3c4:	79 01       	movw	r14, r18
 3c6:	d4 2e       	mov	r13, r20
 3c8:	c5 2e       	mov	r12, r21
 3ca:	b6 2f       	mov	r27, r22
 3cc:	a7 2f       	mov	r26, r23
 3ce:	f8 2f       	mov	r31, r24
 3d0:	b9 2e       	mov	r11, r25
 3d2:	40 58       	subi	r20, 0x80	; 128
 3d4:	5d 4b       	sbci	r21, 0xBD	; 189
 3d6:	6e 40       	sbci	r22, 0x0E	; 14
 3d8:	7f 4f       	sbci	r23, 0xFF	; 255
 3da:	8f 4f       	sbci	r24, 0xFF	; 255
 3dc:	9f 4f       	sbci	r25, 0xFF	; 255
 3de:	21 15       	cp	r18, r1
 3e0:	3b 47       	sbci	r19, 0x7B	; 123
 3e2:	4d 41       	sbci	r20, 0x1D	; 29
 3e4:	53 48       	sbci	r21, 0x83	; 131
 3e6:	62 4e       	sbci	r22, 0xE2	; 226
 3e8:	71 40       	sbci	r23, 0x01	; 1
 3ea:	81 05       	cpc	r24, r1
 3ec:	91 05       	cpc	r25, r1
 3ee:	11 f0       	breq	.+4      	; 0x3f4 <__secs_to_tm+0x3c>
 3f0:	08 f0       	brcs	.+2      	; 0x3f4 <__secs_to_tm+0x3c>
 3f2:	08 c2       	rjmp	.+1040   	; 0x804 <__EEPROM_REGION_LENGTH__+0x4>
 3f4:	18 8b       	std	Y+16, r17	; 0x10
 3f6:	0f 87       	std	Y+15, r16	; 0x0f
 3f8:	9b 2d       	mov	r25, r11
 3fa:	8f 2f       	mov	r24, r31
 3fc:	7a 2f       	mov	r23, r26
 3fe:	6b 2f       	mov	r22, r27
 400:	5c 2d       	mov	r21, r12
 402:	4d 2d       	mov	r20, r13
 404:	97 01       	movw	r18, r14
 406:	20 58       	subi	r18, 0x80	; 128
 408:	3d 45       	sbci	r19, 0x5D	; 93
 40a:	4c 4b       	sbci	r20, 0xBC	; 188
 40c:	58 43       	sbci	r21, 0x38	; 56
 40e:	61 09       	sbc	r22, r1
 410:	71 09       	sbc	r23, r1
 412:	81 09       	sbc	r24, r1
 414:	91 09       	sbc	r25, r1
 416:	19 01       	movw	r2, r18
 418:	4d 83       	std	Y+5, r20	; 0x05
 41a:	59 87       	std	Y+9, r21	; 0x09
 41c:	6d 87       	std	Y+13, r22	; 0x0d
 41e:	79 83       	std	Y+1, r23	; 0x01
 420:	89 8b       	std	Y+17, r24	; 0x11
 422:	9a 8b       	std	Y+18, r25	; 0x12
 424:	f0 e8       	ldi	r31, 0x80	; 128
 426:	af 2e       	mov	r10, r31
 428:	a1 e5       	ldi	r26, 0x51	; 81
 42a:	ba 2e       	mov	r11, r26
 42c:	cc 24       	eor	r12, r12
 42e:	c3 94       	inc	r12
 430:	d1 2c       	mov	r13, r1
 432:	e1 2c       	mov	r14, r1
 434:	f1 2c       	mov	r15, r1
 436:	00 e0       	ldi	r16, 0x00	; 0
 438:	10 e0       	ldi	r17, 0x00	; 0
 43a:	0e 94 7d 1f 	call	0x3efa	; 0x3efa <__divdi3>
 43e:	29 01       	movw	r4, r18
 440:	3a 01       	movw	r6, r20
 442:	4b 01       	movw	r8, r22
 444:	8e 8b       	std	Y+22, r24	; 0x16
 446:	9b 8b       	std	Y+19, r25	; 0x13
 448:	91 01       	movw	r18, r2
 44a:	4d 81       	ldd	r20, Y+5	; 0x05
 44c:	59 85       	ldd	r21, Y+9	; 0x09
 44e:	6d 85       	ldd	r22, Y+13	; 0x0d
 450:	79 81       	ldd	r23, Y+1	; 0x01
 452:	89 89       	ldd	r24, Y+17	; 0x11
 454:	9a 89       	ldd	r25, Y+18	; 0x12
 456:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <__moddi3>
 45a:	2d 83       	std	Y+5, r18	; 0x05
 45c:	3e 83       	std	Y+6, r19	; 0x06
 45e:	4f 83       	std	Y+7, r20	; 0x07
 460:	58 87       	std	Y+8, r21	; 0x08
 462:	8d 81       	ldd	r24, Y+5	; 0x05
 464:	9e 81       	ldd	r25, Y+6	; 0x06
 466:	af 81       	ldd	r26, Y+7	; 0x07
 468:	b8 85       	ldd	r27, Y+8	; 0x08
 46a:	b7 ff       	sbrs	r27, 7
 46c:	15 c0       	rjmp	.+42     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
 46e:	80 58       	subi	r24, 0x80	; 128
 470:	9e 4a       	sbci	r25, 0xAE	; 174
 472:	ae 4f       	sbci	r26, 0xFE	; 254
 474:	bf 4f       	sbci	r27, 0xFF	; 255
 476:	8d 83       	std	Y+5, r24	; 0x05
 478:	9e 83       	std	Y+6, r25	; 0x06
 47a:	af 83       	std	Y+7, r26	; 0x07
 47c:	b8 87       	std	Y+8, r27	; 0x08
 47e:	92 01       	movw	r18, r4
 480:	a3 01       	movw	r20, r6
 482:	b4 01       	movw	r22, r8
 484:	8e 89       	ldd	r24, Y+22	; 0x16
 486:	9b 89       	ldd	r25, Y+19	; 0x13
 488:	af ef       	ldi	r26, 0xFF	; 255
 48a:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <__adddi3_s8>
 48e:	29 01       	movw	r4, r18
 490:	3a 01       	movw	r6, r20
 492:	4b 01       	movw	r8, r22
 494:	8e 8b       	std	Y+22, r24	; 0x16
 496:	9b 8b       	std	Y+19, r25	; 0x13
 498:	92 01       	movw	r18, r4
 49a:	a3 01       	movw	r20, r6
 49c:	b4 01       	movw	r22, r8
 49e:	8e 89       	ldd	r24, Y+22	; 0x16
 4a0:	9b 89       	ldd	r25, Y+19	; 0x13
 4a2:	a3 e0       	ldi	r26, 0x03	; 3
 4a4:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <__adddi3_s8>
 4a8:	e7 e0       	ldi	r30, 0x07	; 7
 4aa:	ae 2e       	mov	r10, r30
 4ac:	b1 2c       	mov	r11, r1
 4ae:	c1 2c       	mov	r12, r1
 4b0:	d1 2c       	mov	r13, r1
 4b2:	e1 2c       	mov	r14, r1
 4b4:	f1 2c       	mov	r15, r1
 4b6:	00 e0       	ldi	r16, 0x00	; 0
 4b8:	10 e0       	ldi	r17, 0x00	; 0
 4ba:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <__moddi3>
 4be:	2d 87       	std	Y+13, r18	; 0x0d
 4c0:	3e 87       	std	Y+14, r19	; 0x0e
 4c2:	ad 85       	ldd	r26, Y+13	; 0x0d
 4c4:	be 85       	ldd	r27, Y+14	; 0x0e
 4c6:	b7 ff       	sbrs	r27, 7
 4c8:	03 c0       	rjmp	.+6      	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
 4ca:	17 96       	adiw	r26, 0x07	; 7
 4cc:	be 87       	std	Y+14, r27	; 0x0e
 4ce:	ad 87       	std	Y+13, r26	; 0x0d
 4d0:	51 eb       	ldi	r21, 0xB1	; 177
 4d2:	a5 2e       	mov	r10, r21
 4d4:	6a e3       	ldi	r22, 0x3A	; 58
 4d6:	b6 2e       	mov	r11, r22
 4d8:	72 e0       	ldi	r23, 0x02	; 2
 4da:	c7 2e       	mov	r12, r23
 4dc:	d1 2c       	mov	r13, r1
 4de:	e1 2c       	mov	r14, r1
 4e0:	f1 2c       	mov	r15, r1
 4e2:	00 e0       	ldi	r16, 0x00	; 0
 4e4:	10 e0       	ldi	r17, 0x00	; 0
 4e6:	92 01       	movw	r18, r4
 4e8:	a3 01       	movw	r20, r6
 4ea:	b4 01       	movw	r22, r8
 4ec:	8e 89       	ldd	r24, Y+22	; 0x16
 4ee:	9b 89       	ldd	r25, Y+19	; 0x13
 4f0:	0e 94 7d 1f 	call	0x3efa	; 0x3efa <__divdi3>
 4f4:	29 87       	std	Y+9, r18	; 0x09
 4f6:	3a 87       	std	Y+10, r19	; 0x0a
 4f8:	4b 87       	std	Y+11, r20	; 0x0b
 4fa:	5c 87       	std	Y+12, r21	; 0x0c
 4fc:	92 01       	movw	r18, r4
 4fe:	a3 01       	movw	r20, r6
 500:	b4 01       	movw	r22, r8
 502:	8e 89       	ldd	r24, Y+22	; 0x16
 504:	9b 89       	ldd	r25, Y+19	; 0x13
 506:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <__moddi3>
 50a:	82 2e       	mov	r8, r18
 50c:	93 2e       	mov	r9, r19
 50e:	a4 2e       	mov	r10, r20
 510:	b5 2e       	mov	r11, r21
 512:	b7 fe       	sbrs	r11, 7
 514:	12 c0       	rjmp	.+36     	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
 516:	b1 eb       	ldi	r27, 0xB1	; 177
 518:	8b 0e       	add	r8, r27
 51a:	ba e3       	ldi	r27, 0x3A	; 58
 51c:	9b 1e       	adc	r9, r27
 51e:	b2 e0       	ldi	r27, 0x02	; 2
 520:	ab 1e       	adc	r10, r27
 522:	b1 1c       	adc	r11, r1
 524:	89 85       	ldd	r24, Y+9	; 0x09
 526:	9a 85       	ldd	r25, Y+10	; 0x0a
 528:	ab 85       	ldd	r26, Y+11	; 0x0b
 52a:	bc 85       	ldd	r27, Y+12	; 0x0c
 52c:	01 97       	sbiw	r24, 0x01	; 1
 52e:	a1 09       	sbc	r26, r1
 530:	b1 09       	sbc	r27, r1
 532:	89 87       	std	Y+9, r24	; 0x09
 534:	9a 87       	std	Y+10, r25	; 0x0a
 536:	ab 87       	std	Y+11, r26	; 0x0b
 538:	bc 87       	std	Y+12, r27	; 0x0c
 53a:	c5 01       	movw	r24, r10
 53c:	b4 01       	movw	r22, r8
 53e:	2c ea       	ldi	r18, 0xAC	; 172
 540:	3e e8       	ldi	r19, 0x8E	; 142
 542:	40 e0       	ldi	r20, 0x00	; 0
 544:	50 e0       	ldi	r21, 0x00	; 0
 546:	0e 94 44 23 	call	0x4688	; 0x4688 <__divmodsi4>
 54a:	69 01       	movw	r12, r18
 54c:	7a 01       	movw	r14, r20
 54e:	24 30       	cpi	r18, 0x04	; 4
 550:	31 05       	cpc	r19, r1
 552:	41 05       	cpc	r20, r1
 554:	51 05       	cpc	r21, r1
 556:	29 f4       	brne	.+10     	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
 558:	43 e0       	ldi	r20, 0x03	; 3
 55a:	c4 2e       	mov	r12, r20
 55c:	d1 2c       	mov	r13, r1
 55e:	e1 2c       	mov	r14, r1
 560:	f1 2c       	mov	r15, r1
 562:	a4 e5       	ldi	r26, 0x54	; 84
 564:	b1 e7       	ldi	r27, 0x71	; 113
 566:	a7 01       	movw	r20, r14
 568:	96 01       	movw	r18, r12
 56a:	0e 94 c3 26 	call	0x4d86	; 0x4d86 <__mulohisi3>
 56e:	2b 01       	movw	r4, r22
 570:	3c 01       	movw	r6, r24
 572:	48 0c       	add	r4, r8
 574:	59 1c       	adc	r5, r9
 576:	6a 1c       	adc	r6, r10
 578:	7b 1c       	adc	r7, r11
 57a:	c3 01       	movw	r24, r6
 57c:	b2 01       	movw	r22, r4
 57e:	25 eb       	ldi	r18, 0xB5	; 181
 580:	35 e0       	ldi	r19, 0x05	; 5
 582:	40 e0       	ldi	r20, 0x00	; 0
 584:	50 e0       	ldi	r21, 0x00	; 0
 586:	0e 94 44 23 	call	0x4688	; 0x4688 <__divmodsi4>
 58a:	49 01       	movw	r8, r18
 58c:	5a 01       	movw	r10, r20
 58e:	29 31       	cpi	r18, 0x19	; 25
 590:	31 05       	cpc	r19, r1
 592:	41 05       	cpc	r20, r1
 594:	51 05       	cpc	r21, r1
 596:	29 f4       	brne	.+10     	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
 598:	38 e1       	ldi	r19, 0x18	; 24
 59a:	83 2e       	mov	r8, r19
 59c:	91 2c       	mov	r9, r1
 59e:	a1 2c       	mov	r10, r1
 5a0:	b1 2c       	mov	r11, r1
 5a2:	ab e4       	ldi	r26, 0x4B	; 75
 5a4:	ba ef       	ldi	r27, 0xFA	; 250
 5a6:	a5 01       	movw	r20, r10
 5a8:	94 01       	movw	r18, r8
 5aa:	0e 94 c3 26 	call	0x4d86	; 0x4d86 <__mulohisi3>
 5ae:	46 0e       	add	r4, r22
 5b0:	57 1e       	adc	r5, r23
 5b2:	68 1e       	adc	r6, r24
 5b4:	79 1e       	adc	r7, r25
 5b6:	c3 01       	movw	r24, r6
 5b8:	b2 01       	movw	r22, r4
 5ba:	2d e6       	ldi	r18, 0x6D	; 109
 5bc:	31 e0       	ldi	r19, 0x01	; 1
 5be:	40 e0       	ldi	r20, 0x00	; 0
 5c0:	50 e0       	ldi	r21, 0x00	; 0
 5c2:	0e 94 44 23 	call	0x4688	; 0x4688 <__divmodsi4>
 5c6:	29 83       	std	Y+1, r18	; 0x01
 5c8:	3a 83       	std	Y+2, r19	; 0x02
 5ca:	4b 83       	std	Y+3, r20	; 0x03
 5cc:	5c 83       	std	Y+4, r21	; 0x04
 5ce:	24 30       	cpi	r18, 0x04	; 4
 5d0:	31 05       	cpc	r19, r1
 5d2:	41 05       	cpc	r20, r1
 5d4:	51 05       	cpc	r21, r1
 5d6:	41 f4       	brne	.+16     	; 0x5e8 <__LOCK_REGION_LENGTH__+0x1e8>
 5d8:	83 e0       	ldi	r24, 0x03	; 3
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	a0 e0       	ldi	r26, 0x00	; 0
 5de:	b0 e0       	ldi	r27, 0x00	; 0
 5e0:	89 83       	std	Y+1, r24	; 0x01
 5e2:	9a 83       	std	Y+2, r25	; 0x02
 5e4:	ab 83       	std	Y+3, r26	; 0x03
 5e6:	bc 83       	std	Y+4, r27	; 0x04
 5e8:	a3 e9       	ldi	r26, 0x93	; 147
 5ea:	be ef       	ldi	r27, 0xFE	; 254
 5ec:	29 81       	ldd	r18, Y+1	; 0x01
 5ee:	3a 81       	ldd	r19, Y+2	; 0x02
 5f0:	4b 81       	ldd	r20, Y+3	; 0x03
 5f2:	5c 81       	ldd	r21, Y+4	; 0x04
 5f4:	0e 94 c3 26 	call	0x4d86	; 0x4d86 <__mulohisi3>
 5f8:	46 0e       	add	r4, r22
 5fa:	57 1e       	adc	r5, r23
 5fc:	68 1e       	adc	r6, r24
 5fe:	79 1e       	adc	r7, r25
 600:	23 2b       	or	r18, r19
 602:	24 2b       	or	r18, r20
 604:	25 2b       	or	r18, r21
 606:	81 f4       	brne	.+32     	; 0x628 <__LOCK_REGION_LENGTH__+0x228>
 608:	81 14       	cp	r8, r1
 60a:	91 04       	cpc	r9, r1
 60c:	a1 04       	cpc	r10, r1
 60e:	b1 04       	cpc	r11, r1
 610:	71 f4       	brne	.+28     	; 0x62e <__LOCK_REGION_LENGTH__+0x22e>
 612:	31 e0       	ldi	r19, 0x01	; 1
 614:	20 e0       	ldi	r18, 0x00	; 0
 616:	c1 14       	cp	r12, r1
 618:	d1 04       	cpc	r13, r1
 61a:	e1 04       	cpc	r14, r1
 61c:	f1 04       	cpc	r15, r1
 61e:	09 f0       	breq	.+2      	; 0x622 <__LOCK_REGION_LENGTH__+0x222>
 620:	30 e0       	ldi	r19, 0x00	; 0
 622:	83 2f       	mov	r24, r19
 624:	92 2f       	mov	r25, r18
 626:	05 c0       	rjmp	.+10     	; 0x632 <__LOCK_REGION_LENGTH__+0x232>
 628:	80 e0       	ldi	r24, 0x00	; 0
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	02 c0       	rjmp	.+4      	; 0x632 <__LOCK_REGION_LENGTH__+0x232>
 62e:	81 e0       	ldi	r24, 0x01	; 1
 630:	90 e0       	ldi	r25, 0x00	; 0
 632:	12 01       	movw	r2, r4
 634:	ab e3       	ldi	r26, 0x3B	; 59
 636:	2a 0e       	add	r2, r26
 638:	31 1c       	adc	r3, r1
 63a:	28 0e       	add	r2, r24
 63c:	39 1e       	adc	r3, r25
 63e:	9c 01       	movw	r18, r24
 640:	24 59       	subi	r18, 0x94	; 148
 642:	3e 4f       	sbci	r19, 0xFE	; 254
 644:	22 15       	cp	r18, r2
 646:	33 05       	cpc	r19, r3
 648:	24 f4       	brge	.+8      	; 0x652 <__LOCK_REGION_LENGTH__+0x252>
 64a:	83 59       	subi	r24, 0x93	; 147
 64c:	9e 4f       	sbci	r25, 0xFE	; 254
 64e:	28 1a       	sub	r2, r24
 650:	39 0a       	sbc	r3, r25
 652:	92 e0       	ldi	r25, 0x02	; 2
 654:	88 0c       	add	r8, r8
 656:	99 1c       	adc	r9, r9
 658:	aa 1c       	adc	r10, r10
 65a:	bb 1c       	adc	r11, r11
 65c:	9a 95       	dec	r25
 65e:	d1 f7       	brne	.-12     	; 0x654 <__LOCK_REGION_LENGTH__+0x254>
 660:	89 81       	ldd	r24, Y+1	; 0x01
 662:	9a 81       	ldd	r25, Y+2	; 0x02
 664:	ab 81       	ldd	r26, Y+3	; 0x03
 666:	bc 81       	ldd	r27, Y+4	; 0x04
 668:	88 0e       	add	r8, r24
 66a:	99 1e       	adc	r9, r25
 66c:	aa 1e       	adc	r10, r26
 66e:	bb 1e       	adc	r11, r27
 670:	a4 e6       	ldi	r26, 0x64	; 100
 672:	b0 e0       	ldi	r27, 0x00	; 0
 674:	a7 01       	movw	r20, r14
 676:	96 01       	movw	r18, r12
 678:	0e 94 59 26 	call	0x4cb2	; 0x4cb2 <__muluhisi3>
 67c:	86 0e       	add	r8, r22
 67e:	97 1e       	adc	r9, r23
 680:	a8 1e       	adc	r10, r24
 682:	b9 1e       	adc	r11, r25
 684:	d5 01       	movw	r26, r10
 686:	c4 01       	movw	r24, r8
 688:	bb 0f       	add	r27, r27
 68a:	88 0b       	sbc	r24, r24
 68c:	98 2f       	mov	r25, r24
 68e:	dc 01       	movw	r26, r24
 690:	89 83       	std	Y+1, r24	; 0x01
 692:	9a 83       	std	Y+2, r25	; 0x02
 694:	ab 83       	std	Y+3, r26	; 0x03
 696:	bc 83       	std	Y+4, r27	; 0x04
 698:	69 85       	ldd	r22, Y+9	; 0x09
 69a:	7a 85       	ldd	r23, Y+10	; 0x0a
 69c:	8b 85       	ldd	r24, Y+11	; 0x0b
 69e:	9c 85       	ldd	r25, Y+12	; 0x0c
 6a0:	20 e9       	ldi	r18, 0x90	; 144
 6a2:	31 e0       	ldi	r19, 0x01	; 1
 6a4:	40 e0       	ldi	r20, 0x00	; 0
 6a6:	50 e0       	ldi	r21, 0x00	; 0
 6a8:	0e 94 ea 25 	call	0x4bd4	; 0x4bd4 <__mulsidi3>
 6ac:	f2 2f       	mov	r31, r18
 6ae:	e3 2f       	mov	r30, r19
 6b0:	6a 01       	movw	r12, r20
 6b2:	7b 01       	movw	r14, r22
 6b4:	8c 01       	movw	r16, r24
 6b6:	94 01       	movw	r18, r8
 6b8:	a5 01       	movw	r20, r10
 6ba:	69 81       	ldd	r22, Y+1	; 0x01
 6bc:	76 2f       	mov	r23, r22
 6be:	86 2f       	mov	r24, r22
 6c0:	96 2f       	mov	r25, r22
 6c2:	af 2e       	mov	r10, r31
 6c4:	be 2e       	mov	r11, r30
 6c6:	0e 94 9e 26 	call	0x4d3c	; 0x4d3c <__adddi3>
 6ca:	49 01       	movw	r8, r18
 6cc:	5a 01       	movw	r10, r20
 6ce:	6b 01       	movw	r12, r22
 6d0:	7c 01       	movw	r14, r24
 6d2:	25 e3       	ldi	r18, 0x35	; 53
 6d4:	33 e0       	ldi	r19, 0x03	; 3
 6d6:	40 e0       	ldi	r20, 0x00	; 0
 6d8:	1a 82       	std	Y+2, r1	; 0x02
 6da:	19 82       	std	Y+1, r1	; 0x01
 6dc:	f9 01       	movw	r30, r18
 6de:	84 91       	lpm	r24, Z
 6e0:	47 fd       	sbrc	r20, 7
 6e2:	80 81       	ld	r24, Z
 6e4:	08 2e       	mov	r0, r24
 6e6:	00 0c       	add	r0, r0
 6e8:	99 0b       	sbc	r25, r25
 6ea:	aa 0b       	sbc	r26, r26
 6ec:	bb 0b       	sbc	r27, r27
 6ee:	2f 5f       	subi	r18, 0xFF	; 255
 6f0:	3f 4f       	sbci	r19, 0xFF	; 255
 6f2:	4f 4f       	sbci	r20, 0xFF	; 255
 6f4:	48 16       	cp	r4, r24
 6f6:	59 06       	cpc	r5, r25
 6f8:	6a 06       	cpc	r6, r26
 6fa:	7b 06       	cpc	r7, r27
 6fc:	54 f0       	brlt	.+20     	; 0x712 <__LOCK_REGION_LENGTH__+0x312>
 6fe:	48 1a       	sub	r4, r24
 700:	59 0a       	sbc	r5, r25
 702:	6a 0a       	sbc	r6, r26
 704:	7b 0a       	sbc	r7, r27
 706:	a9 81       	ldd	r26, Y+1	; 0x01
 708:	ba 81       	ldd	r27, Y+2	; 0x02
 70a:	11 96       	adiw	r26, 0x01	; 1
 70c:	ba 83       	std	Y+2, r27	; 0x02
 70e:	a9 83       	std	Y+1, r26	; 0x01
 710:	e5 cf       	rjmp	.-54     	; 0x6dc <__LOCK_REGION_LENGTH__+0x2dc>
 712:	e9 81       	ldd	r30, Y+1	; 0x01
 714:	fa 81       	ldd	r31, Y+2	; 0x02
 716:	ea 30       	cpi	r30, 0x0A	; 10
 718:	f1 05       	cpc	r31, r1
 71a:	74 f0       	brlt	.+28     	; 0x738 <__LOCK_REGION_LENGTH__+0x338>
 71c:	3c 97       	sbiw	r30, 0x0c	; 12
 71e:	fa 83       	std	Y+2, r31	; 0x02
 720:	e9 83       	std	Y+1, r30	; 0x01
 722:	94 01       	movw	r18, r8
 724:	a5 01       	movw	r20, r10
 726:	b6 01       	movw	r22, r12
 728:	c7 01       	movw	r24, r14
 72a:	a1 e0       	ldi	r26, 0x01	; 1
 72c:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <__adddi3_s8>
 730:	49 01       	movw	r8, r18
 732:	5a 01       	movw	r10, r20
 734:	6b 01       	movw	r12, r22
 736:	7c 01       	movw	r14, r24
 738:	94 01       	movw	r18, r8
 73a:	a5 01       	movw	r20, r10
 73c:	b6 01       	movw	r22, r12
 73e:	c7 01       	movw	r24, r14
 740:	2c 59       	subi	r18, 0x9C	; 156
 742:	3f 47       	sbci	r19, 0x7F	; 127
 744:	4f 4f       	sbci	r20, 0xFF	; 255
 746:	5f 4f       	sbci	r21, 0xFF	; 255
 748:	6f 4f       	sbci	r22, 0xFF	; 255
 74a:	7f 4f       	sbci	r23, 0xFF	; 255
 74c:	8f 4f       	sbci	r24, 0xFF	; 255
 74e:	9f 4f       	sbci	r25, 0xFF	; 255
 750:	2f 3f       	cpi	r18, 0xFF	; 255
 752:	3f 4f       	sbci	r19, 0xFF	; 255
 754:	41 05       	cpc	r20, r1
 756:	51 05       	cpc	r21, r1
 758:	61 05       	cpc	r22, r1
 75a:	71 05       	cpc	r23, r1
 75c:	81 05       	cpc	r24, r1
 75e:	91 05       	cpc	r25, r1
 760:	11 f0       	breq	.+4      	; 0x766 <__LOCK_REGION_LENGTH__+0x366>
 762:	08 f0       	brcs	.+2      	; 0x766 <__LOCK_REGION_LENGTH__+0x366>
 764:	4f c0       	rjmp	.+158    	; 0x804 <__EEPROM_REGION_LENGTH__+0x4>
 766:	24 e6       	ldi	r18, 0x64	; 100
 768:	82 0e       	add	r8, r18
 76a:	91 1c       	adc	r9, r1
 76c:	af 85       	ldd	r26, Y+15	; 0x0f
 76e:	b8 89       	ldd	r27, Y+16	; 0x10
 770:	1b 96       	adiw	r26, 0x0b	; 11
 772:	9c 92       	st	X, r9
 774:	8e 92       	st	-X, r8
 776:	1a 97       	sbiw	r26, 0x0a	; 10
 778:	e9 81       	ldd	r30, Y+1	; 0x01
 77a:	fa 81       	ldd	r31, Y+2	; 0x02
 77c:	32 96       	adiw	r30, 0x02	; 2
 77e:	19 96       	adiw	r26, 0x09	; 9
 780:	fc 93       	st	X, r31
 782:	ee 93       	st	-X, r30
 784:	18 97       	sbiw	r26, 0x08	; 8
 786:	ff ef       	ldi	r31, 0xFF	; 255
 788:	4f 1a       	sub	r4, r31
 78a:	5f 0a       	sbc	r5, r31
 78c:	17 96       	adiw	r26, 0x07	; 7
 78e:	5c 92       	st	X, r5
 790:	4e 92       	st	-X, r4
 792:	16 97       	sbiw	r26, 0x06	; 6
 794:	8d 85       	ldd	r24, Y+13	; 0x0d
 796:	9e 85       	ldd	r25, Y+14	; 0x0e
 798:	1d 96       	adiw	r26, 0x0d	; 13
 79a:	9c 93       	st	X, r25
 79c:	8e 93       	st	-X, r24
 79e:	1c 97       	sbiw	r26, 0x0c	; 12
 7a0:	1f 96       	adiw	r26, 0x0f	; 15
 7a2:	3c 92       	st	X, r3
 7a4:	2e 92       	st	-X, r2
 7a6:	1e 97       	sbiw	r26, 0x0e	; 14
 7a8:	6d 81       	ldd	r22, Y+5	; 0x05
 7aa:	7e 81       	ldd	r23, Y+6	; 0x06
 7ac:	8f 81       	ldd	r24, Y+7	; 0x07
 7ae:	98 85       	ldd	r25, Y+8	; 0x08
 7b0:	20 e1       	ldi	r18, 0x10	; 16
 7b2:	3e e0       	ldi	r19, 0x0E	; 14
 7b4:	40 e0       	ldi	r20, 0x00	; 0
 7b6:	50 e0       	ldi	r21, 0x00	; 0
 7b8:	0e 94 44 23 	call	0x4688	; 0x4688 <__divmodsi4>
 7bc:	af 85       	ldd	r26, Y+15	; 0x0f
 7be:	b8 89       	ldd	r27, Y+16	; 0x10
 7c0:	15 96       	adiw	r26, 0x05	; 5
 7c2:	3c 93       	st	X, r19
 7c4:	2e 93       	st	-X, r18
 7c6:	14 97       	sbiw	r26, 0x04	; 4
 7c8:	8c e3       	ldi	r24, 0x3C	; 60
 7ca:	c8 2e       	mov	r12, r24
 7cc:	d1 2c       	mov	r13, r1
 7ce:	e1 2c       	mov	r14, r1
 7d0:	f1 2c       	mov	r15, r1
 7d2:	6d 81       	ldd	r22, Y+5	; 0x05
 7d4:	7e 81       	ldd	r23, Y+6	; 0x06
 7d6:	8f 81       	ldd	r24, Y+7	; 0x07
 7d8:	98 85       	ldd	r25, Y+8	; 0x08
 7da:	a7 01       	movw	r20, r14
 7dc:	96 01       	movw	r18, r12
 7de:	0e 94 44 23 	call	0x4688	; 0x4688 <__divmodsi4>
 7e2:	4b 01       	movw	r8, r22
 7e4:	5c 01       	movw	r10, r24
 7e6:	ca 01       	movw	r24, r20
 7e8:	b9 01       	movw	r22, r18
 7ea:	a7 01       	movw	r20, r14
 7ec:	96 01       	movw	r18, r12
 7ee:	0e 94 44 23 	call	0x4688	; 0x4688 <__divmodsi4>
 7f2:	ef 85       	ldd	r30, Y+15	; 0x0f
 7f4:	f8 89       	ldd	r31, Y+16	; 0x10
 7f6:	73 83       	std	Z+3, r23	; 0x03
 7f8:	62 83       	std	Z+2, r22	; 0x02
 7fa:	91 82       	std	Z+1, r9	; 0x01
 7fc:	80 82       	st	Z, r8
 7fe:	80 e0       	ldi	r24, 0x00	; 0
 800:	90 e0       	ldi	r25, 0x00	; 0
 802:	02 c0       	rjmp	.+4      	; 0x808 <__EEPROM_REGION_LENGTH__+0x8>
 804:	8f ef       	ldi	r24, 0xFF	; 255
 806:	9f ef       	ldi	r25, 0xFF	; 255
 808:	66 96       	adiw	r28, 0x16	; 22
 80a:	e2 e1       	ldi	r30, 0x12	; 18
 80c:	0c 94 78 22 	jmp	0x44f0	; 0x44f0 <__epilogue_restores__>

Disassembly of section .text.libgcc.div:

00004830 <__divmodhi4>:
    4830:	97 fb       	bst	r25, 7
    4832:	07 2e       	mov	r0, r23
    4834:	16 f4       	brtc	.+4      	; 0x483a <__divmodhi4+0xa>
    4836:	00 94       	com	r0
    4838:	07 d0       	rcall	.+14     	; 0x4848 <__divmodhi4_neg1>
    483a:	77 fd       	sbrc	r23, 7
    483c:	09 d0       	rcall	.+18     	; 0x4850 <__divmodhi4_neg2>
    483e:	0e 94 04 24 	call	0x4808	; 0x4808 <__udivmodhi4>
    4842:	07 fc       	sbrc	r0, 7
    4844:	05 d0       	rcall	.+10     	; 0x4850 <__divmodhi4_neg2>
    4846:	3e f4       	brtc	.+14     	; 0x4856 <__divmodhi4_exit>

00004848 <__divmodhi4_neg1>:
    4848:	90 95       	com	r25
    484a:	81 95       	neg	r24
    484c:	9f 4f       	sbci	r25, 0xFF	; 255
    484e:	08 95       	ret

00004850 <__divmodhi4_neg2>:
    4850:	70 95       	com	r23
    4852:	61 95       	neg	r22
    4854:	7f 4f       	sbci	r23, 0xFF	; 255

00004856 <__divmodhi4_exit>:
    4856:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00003430 <__muldi3>:
    3430:	df 93       	push	r29
    3432:	cf 93       	push	r28
    3434:	1f 93       	push	r17
    3436:	0f 93       	push	r16
    3438:	9a 9d       	mul	r25, r10
    343a:	f0 2d       	mov	r31, r0
    343c:	21 9f       	mul	r18, r17
    343e:	f0 0d       	add	r31, r0
    3440:	8b 9d       	mul	r24, r11
    3442:	f0 0d       	add	r31, r0
    3444:	8a 9d       	mul	r24, r10
    3446:	e0 2d       	mov	r30, r0
    3448:	f1 0d       	add	r31, r1
    344a:	03 9f       	mul	r16, r19
    344c:	f0 0d       	add	r31, r0
    344e:	02 9f       	mul	r16, r18
    3450:	e0 0d       	add	r30, r0
    3452:	f1 1d       	adc	r31, r1
    3454:	4e 9d       	mul	r20, r14
    3456:	e0 0d       	add	r30, r0
    3458:	f1 1d       	adc	r31, r1
    345a:	5e 9d       	mul	r21, r14
    345c:	f0 0d       	add	r31, r0
    345e:	4f 9d       	mul	r20, r15
    3460:	f0 0d       	add	r31, r0
    3462:	7f 93       	push	r23
    3464:	6f 93       	push	r22
    3466:	bf 92       	push	r11
    3468:	af 92       	push	r10
    346a:	5f 93       	push	r21
    346c:	4f 93       	push	r20
    346e:	d5 01       	movw	r26, r10
    3470:	0e 94 db 25 	call	0x4bb6	; 0x4bb6 <__umulhisi3>
    3474:	8b 01       	movw	r16, r22
    3476:	ac 01       	movw	r20, r24
    3478:	d7 01       	movw	r26, r14
    347a:	0e 94 db 25 	call	0x4bb6	; 0x4bb6 <__umulhisi3>
    347e:	eb 01       	movw	r28, r22
    3480:	e8 0f       	add	r30, r24
    3482:	f9 1f       	adc	r31, r25
    3484:	d6 01       	movw	r26, r12
    3486:	0e 94 95 26 	call	0x4d2a	; 0x4d2a <__muldi3_6>
    348a:	2f 91       	pop	r18
    348c:	3f 91       	pop	r19
    348e:	d6 01       	movw	r26, r12
    3490:	0e 94 db 25 	call	0x4bb6	; 0x4bb6 <__umulhisi3>
    3494:	c6 0f       	add	r28, r22
    3496:	d7 1f       	adc	r29, r23
    3498:	e8 1f       	adc	r30, r24
    349a:	f9 1f       	adc	r31, r25
    349c:	af 91       	pop	r26
    349e:	bf 91       	pop	r27
    34a0:	0e 94 95 26 	call	0x4d2a	; 0x4d2a <__muldi3_6>
    34a4:	2f 91       	pop	r18
    34a6:	3f 91       	pop	r19
    34a8:	0e 94 db 25 	call	0x4bb6	; 0x4bb6 <__umulhisi3>
    34ac:	c6 0f       	add	r28, r22
    34ae:	d7 1f       	adc	r29, r23
    34b0:	e8 1f       	adc	r30, r24
    34b2:	f9 1f       	adc	r31, r25
    34b4:	d6 01       	movw	r26, r12
    34b6:	0e 94 db 25 	call	0x4bb6	; 0x4bb6 <__umulhisi3>
    34ba:	e6 0f       	add	r30, r22
    34bc:	f7 1f       	adc	r31, r23
    34be:	98 01       	movw	r18, r16
    34c0:	be 01       	movw	r22, r28
    34c2:	cf 01       	movw	r24, r30
    34c4:	11 24       	eor	r1, r1
    34c6:	0f 91       	pop	r16
    34c8:	1f 91       	pop	r17
    34ca:	cf 91       	pop	r28
    34cc:	df 91       	pop	r29
    34ce:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00004d2a <__muldi3_6>:
    4d2a:	0e 94 db 25 	call	0x4bb6	; 0x4bb6 <__umulhisi3>
    4d2e:	46 0f       	add	r20, r22
    4d30:	57 1f       	adc	r21, r23
    4d32:	c8 1f       	adc	r28, r24
    4d34:	d9 1f       	adc	r29, r25
    4d36:	08 f4       	brcc	.+2      	; 0x4d3a <__muldi3_6+0x10>
    4d38:	31 96       	adiw	r30, 0x01	; 1
    4d3a:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00004bd4 <__mulsidi3>:
    4bd4:	97 fb       	bst	r25, 7
    4bd6:	57 ff       	sbrs	r21, 7
    4bd8:	0c 94 5b 20 	jmp	0x40b6	; 0x40b6 <__umulsidi3_helper>
    4bdc:	9f 93       	push	r25
    4bde:	8f 93       	push	r24
    4be0:	0e 94 5b 20 	call	0x40b6	; 0x40b6 <__umulsidi3_helper>
    4be4:	6e 1b       	sub	r22, r30
    4be6:	7f 0b       	sbc	r23, r31
    4be8:	af 91       	pop	r26
    4bea:	bf 91       	pop	r27
    4bec:	8a 0b       	sbc	r24, r26
    4bee:	9b 0b       	sbc	r25, r27
    4bf0:	08 95       	ret

Disassembly of section .text.libgcc.mul:

000040b4 <__umulsidi3>:
    40b4:	e8 94       	clt

000040b6 <__umulsidi3_helper>:
    40b6:	df 93       	push	r29
    40b8:	cf 93       	push	r28
    40ba:	fc 01       	movw	r30, r24
    40bc:	db 01       	movw	r26, r22
    40be:	0e 94 db 25 	call	0x4bb6	; 0x4bb6 <__umulhisi3>
    40c2:	7f 93       	push	r23
    40c4:	6f 93       	push	r22
    40c6:	e9 01       	movw	r28, r18
    40c8:	9a 01       	movw	r18, r20
    40ca:	ac 01       	movw	r20, r24
    40cc:	bf 93       	push	r27
    40ce:	af 93       	push	r26
    40d0:	3f 93       	push	r19
    40d2:	2f 93       	push	r18
    40d4:	df 01       	movw	r26, r30
    40d6:	0e 94 db 25 	call	0x4bb6	; 0x4bb6 <__umulhisi3>
    40da:	26 f4       	brtc	.+8      	; 0x40e4 <__umulsidi3_helper+0x2e>
    40dc:	6c 1b       	sub	r22, r28
    40de:	7d 0b       	sbc	r23, r29
    40e0:	82 0b       	sbc	r24, r18
    40e2:	93 0b       	sbc	r25, r19
    40e4:	9e 01       	movw	r18, r28
    40e6:	eb 01       	movw	r28, r22
    40e8:	fc 01       	movw	r30, r24
    40ea:	0e 94 95 26 	call	0x4d2a	; 0x4d2a <__muldi3_6>
    40ee:	af 91       	pop	r26
    40f0:	bf 91       	pop	r27
    40f2:	2f 91       	pop	r18
    40f4:	3f 91       	pop	r19
    40f6:	0e 94 95 26 	call	0x4d2a	; 0x4d2a <__muldi3_6>
    40fa:	be 01       	movw	r22, r28
    40fc:	cf 01       	movw	r24, r30
    40fe:	f9 01       	movw	r30, r18
    4100:	2f 91       	pop	r18
    4102:	3f 91       	pop	r19
    4104:	cf 91       	pop	r28
    4106:	df 91       	pop	r29
    4108:	08 95       	ret

Disassembly of section .text.libgcc.div:

00003ef6 <__moddi3>:
    3ef6:	68 94       	set
    3ef8:	01 c0       	rjmp	.+2      	; 0x3efc <__divdi3_moddi3>

00003efa <__divdi3>:
    3efa:	e8 94       	clt

00003efc <__divdi3_moddi3>:
    3efc:	f9 2f       	mov	r31, r25
    3efe:	f1 2b       	or	r31, r17
    3f00:	12 f0       	brmi	.+4      	; 0x3f06 <__divdi3_moddi3+0xa>
    3f02:	0c 94 fc 25 	jmp	0x4bf8	; 0x4bf8 <__udivdi3_umoddi3>
    3f06:	a0 e0       	ldi	r26, 0x00	; 0
    3f08:	b0 e0       	ldi	r27, 0x00	; 0
    3f0a:	e9 e8       	ldi	r30, 0x89	; 137
    3f0c:	ff e1       	ldi	r31, 0x1F	; 31
    3f0e:	0c 94 62 22 	jmp	0x44c4	; 0x44c4 <__prologue_saves__+0xc>
    3f12:	09 2e       	mov	r0, r25
    3f14:	05 94       	asr	r0
    3f16:	22 f4       	brpl	.+8      	; 0x3f20 <__divdi3_moddi3+0x24>
    3f18:	0e 94 cb 25 	call	0x4b96	; 0x4b96 <__negdi2>
    3f1c:	11 23       	and	r17, r17
    3f1e:	92 f4       	brpl	.+36     	; 0x3f44 <__divdi3_moddi3+0x48>
    3f20:	f0 e8       	ldi	r31, 0x80	; 128
    3f22:	0f 26       	eor	r0, r31
    3f24:	ff ef       	ldi	r31, 0xFF	; 255
    3f26:	e0 94       	com	r14
    3f28:	f0 94       	com	r15
    3f2a:	00 95       	com	r16
    3f2c:	10 95       	com	r17
    3f2e:	b0 94       	com	r11
    3f30:	c0 94       	com	r12
    3f32:	d0 94       	com	r13
    3f34:	a1 94       	neg	r10
    3f36:	bf 0a       	sbc	r11, r31
    3f38:	cf 0a       	sbc	r12, r31
    3f3a:	df 0a       	sbc	r13, r31
    3f3c:	ef 0a       	sbc	r14, r31
    3f3e:	ff 0a       	sbc	r15, r31
    3f40:	0f 0b       	sbc	r16, r31
    3f42:	1f 0b       	sbc	r17, r31
    3f44:	0e 94 c7 19 	call	0x338e	; 0x338e <__udivmod64>
    3f48:	07 fc       	sbrc	r0, 7
    3f4a:	0e 94 cb 25 	call	0x4b96	; 0x4b96 <__negdi2>
    3f4e:	cd b7       	in	r28, 0x3d	; 61
    3f50:	de b7       	in	r29, 0x3e	; 62
    3f52:	ec e0       	ldi	r30, 0x0C	; 12
    3f54:	0c 94 7e 22 	jmp	0x44fc	; 0x44fc <__epilogue_restores__+0xc>

Disassembly of section .text.libgcc.div:

00004bf2 <__umoddi3>:
    4bf2:	68 94       	set
    4bf4:	01 c0       	rjmp	.+2      	; 0x4bf8 <__udivdi3_umoddi3>

00004bf6 <__udivdi3>:
    4bf6:	e8 94       	clt

00004bf8 <__udivdi3_umoddi3>:
    4bf8:	8f 92       	push	r8
    4bfa:	9f 92       	push	r9
    4bfc:	cf 93       	push	r28
    4bfe:	df 93       	push	r29
    4c00:	0e 94 c7 19 	call	0x338e	; 0x338e <__udivmod64>
    4c04:	df 91       	pop	r29
    4c06:	cf 91       	pop	r28
    4c08:	9f 90       	pop	r9
    4c0a:	8f 90       	pop	r8
    4c0c:	08 95       	ret

Disassembly of section .text.libgcc.div:

0000338e <__udivmod64>:
    338e:	88 24       	eor	r8, r8
    3390:	99 24       	eor	r9, r9
    3392:	f4 01       	movw	r30, r8
    3394:	e4 01       	movw	r28, r8
    3396:	b0 e4       	ldi	r27, 0x40	; 64
    3398:	9f 93       	push	r25
    339a:	aa 27       	eor	r26, r26
    339c:	9a 15       	cp	r25, r10
    339e:	8b 04       	cpc	r8, r11
    33a0:	9c 04       	cpc	r9, r12
    33a2:	ed 05       	cpc	r30, r13
    33a4:	fe 05       	cpc	r31, r14
    33a6:	cf 05       	cpc	r28, r15
    33a8:	d0 07       	cpc	r29, r16
    33aa:	a1 07       	cpc	r26, r17
    33ac:	98 f4       	brcc	.+38     	; 0x33d4 <__udivmod64+0x46>
    33ae:	ad 2f       	mov	r26, r29
    33b0:	dc 2f       	mov	r29, r28
    33b2:	cf 2f       	mov	r28, r31
    33b4:	fe 2f       	mov	r31, r30
    33b6:	e9 2d       	mov	r30, r9
    33b8:	98 2c       	mov	r9, r8
    33ba:	89 2e       	mov	r8, r25
    33bc:	98 2f       	mov	r25, r24
    33be:	87 2f       	mov	r24, r23
    33c0:	76 2f       	mov	r23, r22
    33c2:	65 2f       	mov	r22, r21
    33c4:	54 2f       	mov	r21, r20
    33c6:	43 2f       	mov	r20, r19
    33c8:	32 2f       	mov	r19, r18
    33ca:	22 27       	eor	r18, r18
    33cc:	b8 50       	subi	r27, 0x08	; 8
    33ce:	31 f7       	brne	.-52     	; 0x339c <__udivmod64+0xe>
    33d0:	bf 91       	pop	r27
    33d2:	27 c0       	rjmp	.+78     	; 0x3422 <__udivmod64+0x94>
    33d4:	1b 2e       	mov	r1, r27
    33d6:	bf 91       	pop	r27
    33d8:	bb 27       	eor	r27, r27
    33da:	22 0f       	add	r18, r18
    33dc:	33 1f       	adc	r19, r19
    33de:	44 1f       	adc	r20, r20
    33e0:	55 1f       	adc	r21, r21
    33e2:	66 1f       	adc	r22, r22
    33e4:	77 1f       	adc	r23, r23
    33e6:	88 1f       	adc	r24, r24
    33e8:	99 1f       	adc	r25, r25
    33ea:	88 1c       	adc	r8, r8
    33ec:	99 1c       	adc	r9, r9
    33ee:	ee 1f       	adc	r30, r30
    33f0:	ff 1f       	adc	r31, r31
    33f2:	cc 1f       	adc	r28, r28
    33f4:	dd 1f       	adc	r29, r29
    33f6:	aa 1f       	adc	r26, r26
    33f8:	bb 1f       	adc	r27, r27
    33fa:	8a 14       	cp	r8, r10
    33fc:	9b 04       	cpc	r9, r11
    33fe:	ec 05       	cpc	r30, r12
    3400:	fd 05       	cpc	r31, r13
    3402:	ce 05       	cpc	r28, r14
    3404:	df 05       	cpc	r29, r15
    3406:	a0 07       	cpc	r26, r16
    3408:	b1 07       	cpc	r27, r17
    340a:	48 f0       	brcs	.+18     	; 0x341e <__udivmod64+0x90>
    340c:	8a 18       	sub	r8, r10
    340e:	9b 08       	sbc	r9, r11
    3410:	ec 09       	sbc	r30, r12
    3412:	fd 09       	sbc	r31, r13
    3414:	ce 09       	sbc	r28, r14
    3416:	df 09       	sbc	r29, r15
    3418:	a0 0b       	sbc	r26, r16
    341a:	b1 0b       	sbc	r27, r17
    341c:	21 60       	ori	r18, 0x01	; 1
    341e:	1a 94       	dec	r1
    3420:	e1 f6       	brne	.-72     	; 0x33da <__udivmod64+0x4c>
    3422:	2e f4       	brtc	.+10     	; 0x342e <__udivmod64+0xa0>
    3424:	94 01       	movw	r18, r8
    3426:	af 01       	movw	r20, r30
    3428:	be 01       	movw	r22, r28
    342a:	cd 01       	movw	r24, r26
    342c:	00 0c       	add	r0, r0
    342e:	08 95       	ret

Disassembly of section .text.libgcc:

00004b96 <__negdi2>:
    4b96:	60 95       	com	r22
    4b98:	70 95       	com	r23
    4b9a:	80 95       	com	r24
    4b9c:	90 95       	com	r25
    4b9e:	30 95       	com	r19
    4ba0:	40 95       	com	r20
    4ba2:	50 95       	com	r21
    4ba4:	21 95       	neg	r18
    4ba6:	3f 4f       	sbci	r19, 0xFF	; 255
    4ba8:	4f 4f       	sbci	r20, 0xFF	; 255
    4baa:	5f 4f       	sbci	r21, 0xFF	; 255
    4bac:	6f 4f       	sbci	r22, 0xFF	; 255
    4bae:	7f 4f       	sbci	r23, 0xFF	; 255
    4bb0:	8f 4f       	sbci	r24, 0xFF	; 255
    4bb2:	9f 4f       	sbci	r25, 0xFF	; 255
    4bb4:	08 95       	ret

Disassembly of section .text.libgcc.prologue:

000044b8 <__prologue_saves__>:
    44b8:	2f 92       	push	r2
    44ba:	3f 92       	push	r3
    44bc:	4f 92       	push	r4
    44be:	5f 92       	push	r5
    44c0:	6f 92       	push	r6
    44c2:	7f 92       	push	r7
    44c4:	8f 92       	push	r8
    44c6:	9f 92       	push	r9
    44c8:	af 92       	push	r10
    44ca:	bf 92       	push	r11
    44cc:	cf 92       	push	r12
    44ce:	df 92       	push	r13
    44d0:	ef 92       	push	r14
    44d2:	ff 92       	push	r15
    44d4:	0f 93       	push	r16
    44d6:	1f 93       	push	r17
    44d8:	cf 93       	push	r28
    44da:	df 93       	push	r29
    44dc:	cd b7       	in	r28, 0x3d	; 61
    44de:	de b7       	in	r29, 0x3e	; 62
    44e0:	ca 1b       	sub	r28, r26
    44e2:	db 0b       	sbc	r29, r27
    44e4:	0f b6       	in	r0, 0x3f	; 63
    44e6:	f8 94       	cli
    44e8:	de bf       	out	0x3e, r29	; 62
    44ea:	0f be       	out	0x3f, r0	; 63
    44ec:	cd bf       	out	0x3d, r28	; 61
    44ee:	09 94       	ijmp

Disassembly of section .text.libgcc.prologue:

000044f0 <__epilogue_restores__>:
    44f0:	2a 88       	ldd	r2, Y+18	; 0x12
    44f2:	39 88       	ldd	r3, Y+17	; 0x11
    44f4:	48 88       	ldd	r4, Y+16	; 0x10
    44f6:	5f 84       	ldd	r5, Y+15	; 0x0f
    44f8:	6e 84       	ldd	r6, Y+14	; 0x0e
    44fa:	7d 84       	ldd	r7, Y+13	; 0x0d
    44fc:	8c 84       	ldd	r8, Y+12	; 0x0c
    44fe:	9b 84       	ldd	r9, Y+11	; 0x0b
    4500:	aa 84       	ldd	r10, Y+10	; 0x0a
    4502:	b9 84       	ldd	r11, Y+9	; 0x09
    4504:	c8 84       	ldd	r12, Y+8	; 0x08
    4506:	df 80       	ldd	r13, Y+7	; 0x07
    4508:	ee 80       	ldd	r14, Y+6	; 0x06
    450a:	fd 80       	ldd	r15, Y+5	; 0x05
    450c:	0c 81       	ldd	r16, Y+4	; 0x04
    450e:	1b 81       	ldd	r17, Y+3	; 0x03
    4510:	aa 81       	ldd	r26, Y+2	; 0x02
    4512:	b9 81       	ldd	r27, Y+1	; 0x01
    4514:	ce 0f       	add	r28, r30
    4516:	d1 1d       	adc	r29, r1
    4518:	0f b6       	in	r0, 0x3f	; 63
    451a:	f8 94       	cli
    451c:	de bf       	out	0x3e, r29	; 62
    451e:	0f be       	out	0x3f, r0	; 63
    4520:	cd bf       	out	0x3d, r28	; 61
    4522:	ed 01       	movw	r28, r26
    4524:	08 95       	ret

Disassembly of section .text.libgcc:

00004d3c <__adddi3>:
    4d3c:	2a 0d       	add	r18, r10
    4d3e:	3b 1d       	adc	r19, r11
    4d40:	4c 1d       	adc	r20, r12
    4d42:	5d 1d       	adc	r21, r13
    4d44:	6e 1d       	adc	r22, r14
    4d46:	7f 1d       	adc	r23, r15
    4d48:	80 1f       	adc	r24, r16
    4d4a:	91 1f       	adc	r25, r17
    4d4c:	08 95       	ret

Disassembly of section .text.libgcc:

00004d4e <__cmpdi2>:
    4d4e:	2a 15       	cp	r18, r10
    4d50:	3b 05       	cpc	r19, r11
    4d52:	4c 05       	cpc	r20, r12
    4d54:	5d 05       	cpc	r21, r13
    4d56:	6e 05       	cpc	r22, r14
    4d58:	7f 05       	cpc	r23, r15
    4d5a:	80 07       	cpc	r24, r16
    4d5c:	91 07       	cpc	r25, r17
    4d5e:	08 95       	ret
