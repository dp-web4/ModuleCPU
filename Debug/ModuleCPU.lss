
ModuleCPU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00004b44  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000da  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00004b44  2**0
                  ALLOC
  3 .noinit       00000226  00800102  00800102  00004b44  2**2
                  ALLOC
  4 .comment      0000002f  00000000  00000000  00004b44  2**0
                  CONTENTS, READONLY
  5 .stack.descriptors.hdr 00000142  00000000  00000000  00004b73  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000508  00000000  00000000  00004cb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00008c82  00000000  00000000  000051bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001aa4  00000000  00000000  0000de3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003645  00000000  00000000  0000f8e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000011e0  00000000  00000000  00012f28  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000700  00000000  00000000  00014108  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000043f9  00000000  00000000  00014808  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000004d0  00000000  00000000  00018c01  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .text         00000004  00004a80  00004a80  00004b34  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000190d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .text.__vector_27 000000bc  00002d68  00002d68  00002e1c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.ADCSetPowerOn 0000000c  00004a2e  00004a2e  00004ae2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.ADCStartConversion 0000002a  000043cc  000043cc  00004480  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .progmemx.data 0000000b  000001b5  000001b5  00000269  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 20 .text.ADCInit 0000013c  00001f82  00001f82  00002036  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .progmemx.data.sg_sMuxSelectList 0000000f  0000018e  0000018e  00000242  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 22 .bss.sg_eCurrentType 00000001  0080074b  0080074b  00004b44  2**0
                  ALLOC
 23 .bss.sg_eState 00000001  0080075e  0080075e  00004b44  2**0
                  ALLOC
 24 .text.CANLookupCommand 00000062  00003ae0  00003ae0  00003b94  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .progmemx.data 0000000b  000001c0  000001c0  00000274  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 26 .text.CANMOBSet 00000212  000013fa  000013fa  000014ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.CANSendMessageInternal 00000178  00001b52  00001b52  00001c06  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.CANMOBInterrupt 00000192  000019c0  000019c0  00001a74  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.__vector_18 00000118  000021f2  000021f2  000022a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.CANSendMessage 00000016  000048d6  000048d6  0000498a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.CANSetRXCallback 0000000a  00004a52  00004a52  00004b06  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.CANInit 0000009c  0000317e  0000317e  00003232  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .progmemx.data.sg_sRXCommandList 0000001b  00000134  00000134  000001e8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 34 .progmemx.data.sg_sMOBModuleRequestTime 00000008  000001cb  000001cb  0000027f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 35 .progmemx.data.sg_sMOBModuleHardwareDetail 00000008  000001d3  000001d3  00000287  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 36 .progmemx.data.sg_sMOBModuleCellDetail 00000008  000001db  000001db  0000028f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 37 .progmemx.data.sg_sMOBModuleCellCommStat2 00000008  000001e3  000001e3  00000297  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 38 .progmemx.data.sg_sMOBModuleCellCommStat1 00000008  000001eb  000001eb  0000029f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 39 .progmemx.data.sg_sMOBModuleStatus3 00000008  000001f3  000001f3  000002a7  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 40 .progmemx.data.sg_sMOBModuleStatus2 00000008  000001fb  000001fb  000002af  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 41 .progmemx.data.sg_sMOBModuleStatus1 00000008  00000203  00000203  000002b7  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 42 .progmemx.data.sg_sMOBModuleAnnouncement 00000008  0000020b  0000020b  000002bf  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 43 .progmemx.data.sg_sMOBGenericReceive 00000008  00000213  00000213  000002c7  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 44 .progmemx.data.sg_sMOBDisabled 00000008  0000021b  0000021b  000002cf  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 45 .bss.sg_bInRetransmit 00000001  0080075f  0080075f  00004b44  2**0
                  ALLOC
 46 .bss.sg_u8LastTXDataLen 00000001  00800760  00800760  00004b44  2**0
                  ALLOC
 47 .bss.sg_u8LastTXData 00000008  00800739  00800739  00004b44  2**0
                  ALLOC
 48 .bss.sg_eLastTXType 00000001  00800761  00800761  00004b44  2**0
                  ALLOC
 49 .bss.sg_u8TransmitAttempts 00000001  00800762  00800762  00004b44  2**0
                  ALLOC
 50 .bss.sg_pfRXCallback 00000002  00800749  00800749  00004b44  2**0
                  ALLOC
 51 .bss.sg_bBusy 00000001  00800763  00800763  00004b44  2**0
                  ALLOC
 52 .text.DebugOut 0000000e  000049f6  000049f6  00004aaa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 53 .text.EEPROMRead 00000012  0000496c  0000496c  00004a20  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 .text.I2CBitDelay 0000000e  00004a04  00004a04  00004ab8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.I2CStart 0000002c  000042f0  000042f0  000043a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.I2CStop 00000026  000044be  000044be  00004572  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .text.I2CUnstick 0000003c  00004008  00004008  000040bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .text.I2CTxByte 0000006a  000039a6  000039a6  00003a5a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 .text.I2CRxByte 0000007a  000037cc  000037cc  00003880  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 60 .text.I2CSetup 0000002c  0000431c  0000431c  000043d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 61 .text.I2CStartTransaction 00000028  000043f6  000043f6  000044aa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 62 .text.CellCountExpectedSet 000000c4  00002be2  00002be2  00002c96  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 63 .text.SendModuleControllerStatus 0000000c  00004a3a  00004a3a  00004aee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 64 .text.ModuleControllerStateSet 0000000a  00004a5c  00004a5c  00004b10  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .text.ModuleControllerStateSetMax 00000016  000048ec  000048ec  000049a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 66 .text.Check5VLoss 00000018  0000488e  0000488e  00004942  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 67 .text.CellDataConvertVoltage 00000062  00003b42  00003b42  00003bf6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 68 .text.CellDataConvertTemperature 0000007a  00003846  00003846  000038fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 69 .text.CellDataConvert 00000028  0000441e  0000441e  000044d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 70 .text.ModuleCurrentConvertReadings 00000104  0000230a  0000230a  000023be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 71 .text.__vector_1 00000024  0000450a  0000450a  000045be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 72 .text.__vector_2 00000024  0000452e  0000452e  000045e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 73 .text.__vector_3 00000024  00004552  00004552  00004606  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 74 .text.__vector_4 00000024  00004576  00004576  0000462a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 75 .text.__vector_5 00000024  0000459a  0000459a  0000464e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 76 .text.__vector_6 00000024  000045be  000045be  00004672  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 77 .text.__vector_22 00000024  000045e2  000045e2  00004696  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 78 .text.__vector_9 00000024  00004606  00004606  000046ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 79 .text.__vector_11 00000024  0000462a  0000462a  000046de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 80 .text.__vector_13 00000024  0000464e  0000464e  00004702  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 81 .text.__vector_14 00000024  00004672  00004672  00004726  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 82 .text.__vector_17 00000024  00004696  00004696  0000474a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 83 .text.__vector_19 00000024  000046ba  000046ba  0000476e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 84 .text.__vector_21 00000024  000046de  000046de  00004792  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 85 .text.__vector_25 00000024  00004702  00004702  000047b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 86 .text.__vector_26 00000024  00004726  00004726  000047da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 87 .text.__vector_29 00000024  0000474a  0000474a  000047fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 88 .text.__vector_30 00000024  0000476e  0000476e  00004822  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 89 .text.CurrentThresholdsGet 00000094  0000321a  0000321a  000032ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 90 .text.CANReceiveCallback 00000152  00001e30  00001e30  00001ee4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 91 .text.ControllerStatusMessagesSend 000003dc  00000684  00000684  00000738  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 92 .text.CellStringProcess 000002a6  00000a60  00000a60  00000b14  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 93 .text.Delay   00000052  00003db4  00003db4  00003e68  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 94 .progmemx.data 0000001b  0000014f  0000014f  00000203  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 95 .text.PlatformAssert 0000002c  00004348  00004348  000043fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 96 .text.ModuleControllerStateHandle 000001f6  0000160c  0000160c  000016c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 97 .text.PlatformGetRegistrationID 00000006  00004a7a  00004a7a  00004b2e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 98 .text.SetSysclock 0000000c  00004a46  00004a46  00004afa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 99 .text.ModuleControllerGetUniqueID 0000007e  000035d8  000035d8  0000368c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
100 .text.TimerInit 00000052  00003e06  00003e06  00003eba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
101 .text.__vector_12 000000ba  00002e24  00002e24  00002ed8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
102 .text.WatchdogReset 00000002  00004a88  00004a88  00004b3c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
103 .text.WatchdogOff 0000001a  00004874  00004874  00004928  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
104 .text.__vector_28 00000052  00003e58  00003e58  00003f0c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
105 .text.__vector_23 0000008a  000032ae  000032ae  00003362  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
106 .text.__vector_24 0000004c  00003eaa  00003eaa  00003f5e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
107 .text.vUARTRXStart 00000016  00004902  00004902  000049b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
108 .text.vUARTRXEnd 00000024  00004792  00004792  00004846  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
109 .text.vUARTRXData 0000007a  000038c0  000038c0  00003974  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
110 .text.PlatformGetSendData 00000028  00004446  00004446  000044fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
111 .text.ADCCallback 00000026  000044e4  000044e4  00004598  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
112 .text.FrameInit 000000b4  00002ede  00002ede  00002f92  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
113 .text.CellStringPowerStateMachine 00000088  000033c2  000033c2  00003476  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
114 .text.main    0000027c  00000d06  00000d06  00000dba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
115 .bss.sg_u8PCMSK1 00000001  00800764  00800764  00004b44  2**0
                  ALLOC
116 .bss.sg_u8PCMSK0 00000001  00800765  00800765  00004b44  2**0
                  ALLOC
117 .bss.sg_u8UnhandledInterruptVector 00000001  00800766  00800766  00004b44  2**0
                  ALLOC
118 .bss.sg_u8Reason 00000001  00800767  00800767  00004b44  2**0
                  ALLOC
119 .progmemx.data.sg_u8FractionalLookup 00000010  0000017e  0000017e  00000232  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
120 .bss.sg_eStringPowerState 00000001  00800768  00800768  00004b44  2**0
                  ALLOC
121 .bss.sg_u8ControllerStatusMsgCount 00000001  00800769  00800769  00004b44  2**0
                  ALLOC
122 .bss.sg_u8CellReports 00000001  0080076a  0080076a  00004b44  2**0
                  ALLOC
123 .bss.sg_u16BytesReceived 00000002  00800758  00800758  00004b44  2**0
                  ALLOC
124 .bss.sg_u8CellBufferTemp 00000004  0080074c  0080074c  00004b44  2**2
                  ALLOC
125 .bss.sg_u8CellBufferRX 00000001  0080076b  0080076b  00004b44  2**0
                  ALLOC
126 .bss.sg_u8CellIndex 00000001  0080076c  0080076c  00004b44  2**0
                  ALLOC
127 .bss.sg_u8TicksSinceLastPackControllerMessage 00000001  0080076d  0080076d  00004b44  2**0
                  ALLOC
128 .bss.sg_u8CellStringPowerTimer 00000001  0080076e  0080076e  00004b44  2**0
                  ALLOC
129 .bss.sg_bFrameStart 00000001  0080076f  0080076f  00004b44  2**0
                  ALLOC
130 .bss.sg_u8CellFrameTimer 00000001  00800770  00800770  00004b44  2**0
                  ALLOC
131 .bss.sg_u8CurrentBufferIndex 00000001  00800771  00800771  00004b44  2**0
                  ALLOC
132 .bss.sg_sCurrenBuffer 00000010  00800719  00800719  00004b44  2**0
                  ALLOC
133 .text.IsLeapYear 00000034  00004160  00004160  00004214  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
134 .text.RTCStartTransaction 00000044  00003f42  00003f42  00003ff6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
135 .text.StructTMToHW 00000054  00003d60  00003d60  00003e14  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
136 .text.HWToStructTM 0000007c  000036d4  000036d4  00003788  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
137 .text.__vector_10 00000086  0000344a  0000344a  000034fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
138 .progmemx.data 00000014  0000016a  0000016a  0000021e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
139 .text.RTCReadRegisters 0000007e  00003656  00003656  0000370a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
140 .text.RTCReadHW 000000e2  00002602  00002602  000026b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
141 .text.RTCWriteRegisters 0000006a  00003a10  00003a10  00003ac4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
142 .text.RTCWriteHW 000000fe  0000240e  0000240e  000024c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
143 .text.RTCSetTime 000000c6  00002b1c  00002b1c  00002bd0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
144 .text.RTCInit 00000222  000011d8  000011d8  0000128c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
145 .progmemx.data.sg_u8DaysInMonths 0000000c  0000019d  0000019d  00000251  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
146 .bss.sg_u64Time 00000008  00800741  00800741  00004b44  2**0
                  ALLOC
147 .text.SDSetCS 00000014  00004944  00004944  000049f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
148 .text.SDPowerup 0000003a  00004080  00004080  00004134  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
149 .text.SDCommand 000000aa  00002f92  00002f92  00003046  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
150 .text.SDGoIdle 00000022  000047da  000047da  0000488e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
151 .text.SDSendOpCondition 00000034  00004194  00004194  00004248  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
152 .text.SDSendOpConditionArg 00000056  00003c5e  00003c5e  00003d12  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
153 .text.SDWaitResponse7 0000000e  00004a12  00004a12  00004ac6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
154 .text.SDSendInterfaceCondition 00000034  000041c8  000041c8  0000427c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
155 .text.SDReadOCR 00000032  000041fc  000041fc  000042b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
156 .text.SDReadCSD 0000007c  00003750  00003750  00003804  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
157 .text.SDReceiveDataBlock 0000008a  00003338  00003338  000033ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
158 .text.SDTransmitDataBlock 000000c2  00002ca6  00002ca6  00002d5a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
159 .text.SDInit  00000166  00001cca  00001cca  00001d7e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
160 .text.SDRead  000000d8  0000297a  0000297a  00002a2e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
161 .text.SDWrite 000000dc  000027c2  000027c2  00002876  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
162 .bss.sg_u8CSD 00000010  00800729  00800729  00004b44  2**0
                  ALLOC
163 .bss.sg_u16BlockSize 00000002  0080075a  0080075a  00004b44  2**0
                  ALLOC
164 .bss.sg_u32SDSectorCount 00000004  00800750  00800750  00004b44  2**0
                  ALLOC
165 .text.SPITransaction 00000058  00003c06  00003c06  00003cba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
166 .text.SPISetBaudRate 000000ca  00002a52  00002a52  00002b06  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
167 .text.SPIInit 0000002c  00004374  00004374  00004428  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
168 .progmemx.data.sg_sSPIBaudRates 0000002a  0000010a  0000010a  000001be  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
169 .text.readGlobalState 0000003e  00003fca  00003fca  0000407e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
170 .text.writeGlobalState 00000032  0000422e  0000422e  000042e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
171 .text.updateSessionMap 000000dc  0000289e  0000289e  00002952  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
172 .text.STORE_Init 00000082  00003556  00003556  0000360a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
173 .text.STORE_WriteFrame 000000f6  0000250c  0000250c  000025c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
174 .text.STORE_StartNewSession 00000038  000040ba  000040ba  0000416e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
175 .text.STORE_EndSession 0000002c  000043a0  000043a0  00004454  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
176 .bss.frameBuffer 00000200  00800328  00800328  00004b44  2**2
                  ALLOC
177 .bss.currentSector 00000004  00800754  00800754  00004b44  2**0
                  ALLOC
178 .bss.gState   000001d8  00800528  00800528  00004b44  2**2
                  ALLOC
179 .text.vUARTtxDataAvailable 00000024  000047b6  000047b6  0000486a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
180 .text.vUARTtxDataGet 0000004c  00003ef6  00003ef6  00003faa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
181 .text.vUARTRXReset 0000000a  00004a66  00004a66  00004b1a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
182 .text.vUARTStarttx 00000056  00003cb4  00003cb4  00003d68  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
183 .text.__vector_8 00000066  00003a7a  00003a7a  00003b2e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
184 .text.__vector_16 000000de  000026e4  000026e4  00002798  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
185 .text.__vector_15 00000134  000020be  000020be  00002172  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
186 .text.vUARTInit 00000030  00004292  00004292  00004346  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
187 .text.vUARTInitReceive 00000014  00004958  00004958  00004a0c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
188 .bss.sg_bState 00000001  00800772  00800772  00004b44  2**0
                  ALLOC
189 .bss.sg_u8SendData 00000002  0080075c  0080075c  00004b44  2**0
                  ALLOC
190 .bss.sg_u8SendIndex 00000001  00800773  00800773  00004b44  2**0
                  ALLOC
191 .bss.sg_bMCTxNextBit 00000001  00800774  00800774  00004b44  2**0
                  ALLOC
192 .bss.sg_bCellReportsReuested 00000001  00800775  00800775  00004b44  2**0
                  ALLOC
193 .bss.sg_etxState 00000001  00800776  00800776  00004b44  2**0
                  ALLOC
194 .bss.sg_btxMoreAvailable 00000001  00800777  00800777  00004b44  2**0
                  ALLOC
195 .bss.sg_u8txDataByte 00000001  00800778  00800778  00004b44  2**0
                  ALLOC
196 .bss.sg_u8txBitCount 00000001  00800779  00800779  00004b44  2**0
                  ALLOC
197 .bss.sg_bCell_mc_rxMoreData 00000001  0080077a  0080077a  00004b44  2**0
                  ALLOC
198 .bss.sg_bCell_mc_rxPriorState 00000001  0080077b  0080077b  00004b44  2**0
                  ALLOC
199 .bss.sg_eCell_mc_rxState 00000001  0080077c  0080077c  00004b44  2**0
                  ALLOC
200 .bss.sg_u8rxDataByte 00000001  0080077d  0080077d  00004b44  2**0
                  ALLOC
201 .bss.sg_u8Cell_mc_rxBitCount 00000001  0080077e  0080077e  00004b44  2**0
                  ALLOC
202 .text.libgcc.div 00000028  0000446e  0000446e  00004522  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
203 .text.libgcc.div 00000044  00003f86  00003f86  0000403a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
204 .text.libgcc.div 0000002e  000042c2  000042c2  00004376  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
205 .text.libgcc.div 00000010  000049c6  000049c6  00004a7a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
206 .text.libgcc.mul 0000001e  0000481c  0000481c  000048d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
207 .text.libgcc.mul 0000000e  00004a20  00004a20  00004ad4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
208 .text.libgcc.mul 00000016  00004918  00004918  000049cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
209 .text.libgcc.mul 00000010  000049d6  000049d6  00004a8a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
210 .text.libgcc  00000010  000049e6  000049e6  00004a9a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
211 .text.libgcc  00000018  000048a6  000048a6  0000495a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
212 .text.libgcc  00000018  000048be  000048be  00004972  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
213 .text.__dummy_fini 00000002  00004a8a  00004a8a  00004b3e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
214 .text.__dummy_funcs_on_exit 00000002  00004a8c  00004a8c  00004b40  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
215 .text.__dummy_simulator_exit 00000002  00004a8e  00004a8e  00004b42  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
216 .text.exit    00000016  0000492e  0000492e  000049e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
217 .text.memcpy  00000032  00004260  00004260  00004314  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
218 .text.memset  00000012  0000497e  0000497e  00004a32  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
219 .text.gmtime  0000000a  00004a70  00004a70  00004b24  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
220 .bss.tm.1240  00000019  00800700  00800700  00004b44  2**0
                  ALLOC
221 .progmemx.data 00000004  00000223  00000223  000002d7  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
222 .text.__gmtime_r 0000006c  0000393a  0000393a  000039ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
223 .progmemx.data 00000004  00000227  00000227  000002db  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
224 .text.mktime  00000086  000034d0  000034d0  00003584  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
225 .text._Exit   00000004  00004a84  00004a84  00004b38  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
226 .text.__tm_to_secs 000001be  00001802  00001802  000018b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
227 .text.__year_to_secs 00000256  00000f82  00000f82  00001036  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
228 .text.__month_to_secs 0000003c  00004044  00004044  000040f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
229 .progmemx.data.secs_through_month.1090 00000030  000000da  000000da  0000018e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
230 .text.__secs_to_tm 00000458  0000022c  0000022c  000002e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
231 .progmemx.data.days_in_month.1250 0000000c  000001a9  000001a9  0000025d  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
232 .text.libgcc.div 00000028  00004496  00004496  0000454a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
233 .text.libgcc.mul 000000a0  000030de  000030de  00003192  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
234 .text.libgcc.mul 00000012  00004990  00004990  00004a44  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
235 .text.libgcc.mul 0000001e  0000483a  0000483a  000048ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
236 .text.libgcc.mul 00000056  00003d0a  00003d0a  00003dbe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
237 .text.libgcc.div 00000062  00003ba4  00003ba4  00003c58  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
238 .text.libgcc.div 0000001c  00004858  00004858  0000490c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
239 .text.libgcc.div 000000a2  0000303c  0000303c  000030f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
240 .text.libgcc  00000020  000047fc  000047fc  000048b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
241 .text.libgcc.prologue 00000038  000040f2  000040f2  000041a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
242 .text.libgcc.prologue 00000036  0000412a  0000412a  000041de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
243 .text.libgcc  00000012  000049a2  000049a2  00004a56  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
244 .text.libgcc  00000012  000049b4  000049b4  00004a68  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 43 00 	jmp	0x86	; 0x86 <__ctors_end>
   4:	0c 94 85 22 	jmp	0x450a	; 0x450a <__vector_1>
   8:	0c 94 97 22 	jmp	0x452e	; 0x452e <__vector_2>
   c:	0c 94 a9 22 	jmp	0x4552	; 0x4552 <__vector_3>
  10:	0c 94 bb 22 	jmp	0x4576	; 0x4576 <__vector_4>
  14:	0c 94 cd 22 	jmp	0x459a	; 0x459a <__vector_5>
  18:	0c 94 df 22 	jmp	0x45be	; 0x45be <__vector_6>
  1c:	0c 94 40 25 	jmp	0x4a80	; 0x4a80 <__bad_interrupt>
  20:	0c 94 3d 1d 	jmp	0x3a7a	; 0x3a7a <__vector_8>
  24:	0c 94 03 23 	jmp	0x4606	; 0x4606 <__vector_9>
  28:	0c 94 25 1a 	jmp	0x344a	; 0x344a <__vector_10>
  2c:	0c 94 15 23 	jmp	0x462a	; 0x462a <__vector_11>
  30:	0c 94 12 17 	jmp	0x2e24	; 0x2e24 <__vector_12>
  34:	0c 94 27 23 	jmp	0x464e	; 0x464e <__vector_13>
  38:	0c 94 39 23 	jmp	0x4672	; 0x4672 <__vector_14>
  3c:	0c 94 5f 10 	jmp	0x20be	; 0x20be <__vector_15>
  40:	0c 94 72 13 	jmp	0x26e4	; 0x26e4 <__vector_16>
  44:	0c 94 4b 23 	jmp	0x4696	; 0x4696 <__vector_17>
  48:	0c 94 f9 10 	jmp	0x21f2	; 0x21f2 <__vector_18>
  4c:	0c 94 5d 23 	jmp	0x46ba	; 0x46ba <__vector_19>
  50:	0c 94 40 25 	jmp	0x4a80	; 0x4a80 <__bad_interrupt>
  54:	0c 94 6f 23 	jmp	0x46de	; 0x46de <__vector_21>
  58:	0c 94 f1 22 	jmp	0x45e2	; 0x45e2 <__vector_22>
  5c:	0c 94 57 19 	jmp	0x32ae	; 0x32ae <__vector_23>
  60:	0c 94 55 1f 	jmp	0x3eaa	; 0x3eaa <__vector_24>
  64:	0c 94 81 23 	jmp	0x4702	; 0x4702 <__vector_25>
  68:	0c 94 93 23 	jmp	0x4726	; 0x4726 <__vector_26>
  6c:	0c 94 b4 16 	jmp	0x2d68	; 0x2d68 <__vector_27>
  70:	0c 94 2c 1f 	jmp	0x3e58	; 0x3e58 <__vector_28>
  74:	0c 94 a5 23 	jmp	0x474a	; 0x474a <__vector_29>
  78:	0c 94 b7 23 	jmp	0x476e	; 0x476e <__vector_30>

0000007c <.dinit>:
  7c:	01 00       	.word	0x0001	; ????
  7e:	01 02       	muls	r16, r17
  80:	80 01       	movw	r16, r0
  82:	04 07       	cpc	r16, r20
  84:	7f 80       	ldd	r7, Y+7	; 0x07

00000086 <__ctors_end>:
  86:	11 24       	eor	r1, r1
  88:	1f be       	out	0x3f, r1	; 63
  8a:	cf ef       	ldi	r28, 0xFF	; 255
  8c:	d0 e1       	ldi	r29, 0x10	; 16
  8e:	de bf       	out	0x3e, r29	; 62
  90:	cd bf       	out	0x3d, r28	; 61

00000092 <__do_copy_data>:
  92:	ec e7       	ldi	r30, 0x7C	; 124
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	40 e0       	ldi	r20, 0x00	; 0
  98:	17 c0       	rjmp	.+46     	; 0xc8 <__do_clear_bss+0x8>
  9a:	b5 91       	lpm	r27, Z+
  9c:	a5 91       	lpm	r26, Z+
  9e:	35 91       	lpm	r19, Z+
  a0:	25 91       	lpm	r18, Z+
  a2:	05 91       	lpm	r16, Z+
  a4:	07 fd       	sbrc	r16, 7
  a6:	0c c0       	rjmp	.+24     	; 0xc0 <__do_clear_bss>
  a8:	95 91       	lpm	r25, Z+
  aa:	85 91       	lpm	r24, Z+
  ac:	ef 01       	movw	r28, r30
  ae:	f9 2f       	mov	r31, r25
  b0:	e8 2f       	mov	r30, r24
  b2:	05 90       	lpm	r0, Z+
  b4:	0d 92       	st	X+, r0
  b6:	a2 17       	cp	r26, r18
  b8:	b3 07       	cpc	r27, r19
  ba:	d9 f7       	brne	.-10     	; 0xb2 <__do_copy_data+0x20>
  bc:	fe 01       	movw	r30, r28
  be:	04 c0       	rjmp	.+8      	; 0xc8 <__do_clear_bss+0x8>

000000c0 <__do_clear_bss>:
  c0:	1d 92       	st	X+, r1
  c2:	a2 17       	cp	r26, r18
  c4:	b3 07       	cpc	r27, r19
  c6:	e1 f7       	brne	.-8      	; 0xc0 <__do_clear_bss>
  c8:	e6 38       	cpi	r30, 0x86	; 134
  ca:	f4 07       	cpc	r31, r20
  cc:	31 f7       	brne	.-52     	; 0x9a <__do_copy_data+0x8>
  ce:	0e 94 83 06 	call	0xd06	; 0xd06 <main>
  d2:	0c 94 97 24 	jmp	0x492e	; 0x492e <exit>

000000d6 <_exit>:
  d6:	f8 94       	cli

000000d8 <__stop_program>:
  d8:	ff cf       	rjmp	.-2      	; 0xd8 <__stop_program>

Disassembly of section .text:

00004a80 <__bad_interrupt>:
    4a80:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.__vector_27:

00002d68 <__vector_27>:

	// Disable the conversion complete interrupt
	ADCSRA &= (uint8_t)~(1 << ADIE);

	// Clear any pending interrupt	
	ADCSRA |= (1 << ADIF);
    2d68:	78 94       	sei
    2d6a:	1f 92       	push	r1
    2d6c:	0f 92       	push	r0
    2d6e:	0f b6       	in	r0, 0x3f	; 63
    2d70:	0f 92       	push	r0
    2d72:	11 24       	eor	r1, r1
    2d74:	2f 93       	push	r18
    2d76:	3f 93       	push	r19
    2d78:	4f 93       	push	r20
    2d7a:	5f 93       	push	r21
    2d7c:	6f 93       	push	r22
    2d7e:	7f 93       	push	r23
    2d80:	8f 93       	push	r24
    2d82:	9f 93       	push	r25
    2d84:	af 93       	push	r26
    2d86:	bf 93       	push	r27
    2d88:	ef 93       	push	r30
    2d8a:	ff 93       	push	r31
    2d8c:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f0078>
    2d90:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f0079>
    2d94:	80 91 4b 07 	lds	r24, 0x074B	; 0x80074b <sg_eCurrentType>
    2d98:	91 e0       	ldi	r25, 0x01	; 1
    2d9a:	98 0f       	add	r25, r24
    2d9c:	90 93 4b 07 	sts	0x074B, r25	; 0x80074b <sg_eCurrentType>
    2da0:	95 30       	cpi	r25, 0x05	; 5
    2da2:	10 f0       	brcs	.+4      	; 0x2da8 <__vector_27+0x40>
    2da4:	10 92 4b 07 	sts	0x074B, r1	; 0x80074b <sg_eCurrentType>
    2da8:	ac e7       	ldi	r26, 0x7C	; 124
    2daa:	b0 e0       	ldi	r27, 0x00	; 0
    2dac:	5c 91       	ld	r21, X
    2dae:	20 91 4b 07 	lds	r18, 0x074B	; 0x80074b <sg_eCurrentType>
    2db2:	30 e0       	ldi	r19, 0x00	; 0
    2db4:	f9 01       	movw	r30, r18
    2db6:	ee 0f       	add	r30, r30
    2db8:	ff 1f       	adc	r31, r31
    2dba:	2e 0f       	add	r18, r30
    2dbc:	3f 1f       	adc	r19, r31
    2dbe:	03 2e       	mov	r0, r19
    2dc0:	00 0c       	add	r0, r0
    2dc2:	44 0b       	sbc	r20, r20
    2dc4:	22 57       	subi	r18, 0x72	; 114
    2dc6:	3e 4f       	sbci	r19, 0xFE	; 254
    2dc8:	4f 4f       	sbci	r20, 0xFF	; 255
    2dca:	f9 01       	movw	r30, r18
    2dcc:	94 91       	lpm	r25, Z
    2dce:	47 fd       	sbrc	r20, 7
    2dd0:	90 81       	ld	r25, Z
    2dd2:	50 7e       	andi	r21, 0xE0	; 224
    2dd4:	95 2b       	or	r25, r21
    2dd6:	90 6c       	ori	r25, 0xC0	; 192
    2dd8:	9c 93       	st	X, r25
    2dda:	0e 94 72 22 	call	0x44e4	; 0x44e4 <ADCCallback>
    2dde:	80 91 4b 07 	lds	r24, 0x074B	; 0x80074b <sg_eCurrentType>
    2de2:	81 11       	cpse	r24, r1
    2de4:	09 c0       	rjmp	.+18     	; 0x2df8 <__vector_27+0x90>
    2de6:	ea e7       	ldi	r30, 0x7A	; 122
    2de8:	f0 e0       	ldi	r31, 0x00	; 0
    2dea:	80 81       	ld	r24, Z
    2dec:	87 7f       	andi	r24, 0xF7	; 247
    2dee:	80 83       	st	Z, r24
    2df0:	81 e0       	ldi	r24, 0x01	; 1
    2df2:	80 93 5e 07 	sts	0x075E, r24	; 0x80075e <sg_eState>
    2df6:	05 c0       	rjmp	.+10     	; 0x2e02 <__vector_27+0x9a>
    2df8:	ea e7       	ldi	r30, 0x7A	; 122
    2dfa:	f0 e0       	ldi	r31, 0x00	; 0
    2dfc:	80 81       	ld	r24, Z
    2dfe:	88 64       	ori	r24, 0x48	; 72
    2e00:	80 83       	st	Z, r24
    2e02:	ff 91       	pop	r31
    2e04:	ef 91       	pop	r30
    2e06:	bf 91       	pop	r27
    2e08:	af 91       	pop	r26
    2e0a:	9f 91       	pop	r25
    2e0c:	8f 91       	pop	r24
    2e0e:	7f 91       	pop	r23
    2e10:	6f 91       	pop	r22
    2e12:	5f 91       	pop	r21
    2e14:	4f 91       	pop	r20
    2e16:	3f 91       	pop	r19
    2e18:	2f 91       	pop	r18
    2e1a:	0f 90       	pop	r0
    2e1c:	0f be       	out	0x3f, r0	; 63
    2e1e:	0f 90       	pop	r0
    2e20:	1f 90       	pop	r1
    2e22:	18 95       	reti

Disassembly of section .text.ADCSetPowerOn:

00004a2e <ADCSetPowerOn>:
}

// Enable ADC
void ADCSetPowerOn( void )
{
	ADCSRA |= (1 << ADEN);
    4a2e:	ea e7       	ldi	r30, 0x7A	; 122
    4a30:	f0 e0       	ldi	r31, 0x00	; 0
    4a32:	80 81       	ld	r24, Z
    4a34:	80 68       	ori	r24, 0x80	; 128
    4a36:	80 83       	st	Z, r24
    4a38:	08 95       	ret

Disassembly of section .text.ADCStartConversion:

000043cc <ADCStartConversion>:
}

void ADCStartConversion(void)
{
	// Don't start anything if we're not idle
	if (EADCSTATE_IDLE != sg_eState)
    43cc:	80 91 5e 07 	lds	r24, 0x075E	; 0x80075e <sg_eState>
    43d0:	81 30       	cpi	r24, 0x01	; 1
    43d2:	81 f4       	brne	.+32     	; 0x43f4 <ADCStartConversion+0x28>
	{
		return;
	}
	
	// Set back to the first channel
	sg_eCurrentType = EADCTYPE_FIRST;
    43d4:	10 92 4b 07 	sts	0x074B, r1	; 0x80074b <sg_eCurrentType>
	
	// Set the MUX
	ADMUX = (ADMUX & MUX_MASK) | (sg_sMuxSelectList[sg_eCurrentType].u8MuxSelect) | MUX_AREF;
    43d8:	ec e7       	ldi	r30, 0x7C	; 124
    43da:	f0 e0       	ldi	r31, 0x00	; 0
    43dc:	80 81       	ld	r24, Z
    43de:	80 7e       	andi	r24, 0xE0	; 224
    43e0:	89 6c       	ori	r24, 0xC9	; 201
    43e2:	80 83       	st	Z, r24
		
	sg_eState = EADCSTATE_READING;
    43e4:	82 e0       	ldi	r24, 0x02	; 2
    43e6:	80 93 5e 07 	sts	0x075E, r24	; 0x80075e <sg_eState>
	
	// Start a single conversion  - *dp run one at a time for now instead of continuous
	ADCSRA |= (1 << ADSC) | (1 << ADIE) | (1 << ADEN);  // turn power on if it isn't
    43ea:	ea e7       	ldi	r30, 0x7A	; 122
    43ec:	f0 e0       	ldi	r31, 0x00	; 0
    43ee:	80 81       	ld	r24, Z
    43f0:	88 6c       	ori	r24, 0xC8	; 200
    43f2:	80 83       	st	Z, r24
    43f4:	08 95       	ret

Disassembly of section .text.ADCInit:

00001f82 <ADCInit>:

	// Disable the conversion complete interrupt
	ADCSRA &= (uint8_t)~(1 << ADIE);

	// Clear any pending interrupt	
	ADCSRA |= (1 << ADIF);
    1f82:	cf 93       	push	r28
    1f84:	82 e0       	ldi	r24, 0x02	; 2
    1f86:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f007a>
    1f8a:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
    1f8e:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7f0094>
    1f92:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7f0095>
    1f96:	10 92 96 00 	sts	0x0096, r1	; 0x800096 <__TEXT_REGION_LENGTH__+0x7f0096>
    1f9a:	10 92 97 00 	sts	0x0097, r1	; 0x800097 <__TEXT_REGION_LENGTH__+0x7f0097>
    1f9e:	80 ea       	ldi	r24, 0xA0	; 160
    1fa0:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f007b>
    1fa4:	c0 e0       	ldi	r28, 0x00	; 0
    1fa6:	83 c0       	rjmp	.+262    	; 0x20ae <ADCInit+0x12c>
    1fa8:	2c 2f       	mov	r18, r28
    1faa:	30 e0       	ldi	r19, 0x00	; 0
    1fac:	c9 01       	movw	r24, r18
    1fae:	88 0f       	add	r24, r24
    1fb0:	99 1f       	adc	r25, r25
    1fb2:	82 0f       	add	r24, r18
    1fb4:	93 1f       	adc	r25, r19
    1fb6:	01 96       	adiw	r24, 0x01	; 1
    1fb8:	09 2e       	mov	r0, r25
    1fba:	00 0c       	add	r0, r0
    1fbc:	aa 0b       	sbc	r26, r26
    1fbe:	82 57       	subi	r24, 0x72	; 114
    1fc0:	9e 4f       	sbci	r25, 0xFE	; 254
    1fc2:	af 4f       	sbci	r26, 0xFF	; 255
    1fc4:	fc 01       	movw	r30, r24
    1fc6:	84 91       	lpm	r24, Z
    1fc8:	a7 fd       	sbrc	r26, 7
    1fca:	80 81       	ld	r24, Z
    1fcc:	81 30       	cpi	r24, 0x01	; 1
    1fce:	41 f0       	breq	.+16     	; 0x1fe0 <ADCInit+0x5e>
    1fd0:	08 f4       	brcc	.+2      	; 0x1fd4 <ADCInit+0x52>
    1fd2:	6c c0       	rjmp	.+216    	; 0x20ac <ADCInit+0x12a>
    1fd4:	82 30       	cpi	r24, 0x02	; 2
    1fd6:	21 f1       	breq	.+72     	; 0x2020 <ADCInit+0x9e>
    1fd8:	83 30       	cpi	r24, 0x03	; 3
    1fda:	09 f4       	brne	.+2      	; 0x1fde <ADCInit+0x5c>
    1fdc:	41 c0       	rjmp	.+130    	; 0x2060 <ADCInit+0xde>
    1fde:	5f c0       	rjmp	.+190    	; 0x209e <ADCInit+0x11c>
    1fe0:	54 b1       	in	r21, 0x04	; 4
    1fe2:	c9 01       	movw	r24, r18
    1fe4:	88 0f       	add	r24, r24
    1fe6:	99 1f       	adc	r25, r25
    1fe8:	28 0f       	add	r18, r24
    1fea:	39 1f       	adc	r19, r25
    1fec:	2e 5f       	subi	r18, 0xFE	; 254
    1fee:	3f 4f       	sbci	r19, 0xFF	; 255
    1ff0:	03 2e       	mov	r0, r19
    1ff2:	00 0c       	add	r0, r0
    1ff4:	44 0b       	sbc	r20, r20
    1ff6:	22 57       	subi	r18, 0x72	; 114
    1ff8:	3e 4f       	sbci	r19, 0xFE	; 254
    1ffa:	4f 4f       	sbci	r20, 0xFF	; 255
    1ffc:	f9 01       	movw	r30, r18
    1ffe:	24 91       	lpm	r18, Z
    2000:	47 fd       	sbrc	r20, 7
    2002:	20 81       	ld	r18, Z
    2004:	81 e0       	ldi	r24, 0x01	; 1
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	02 c0       	rjmp	.+4      	; 0x200e <ADCInit+0x8c>
    200a:	88 0f       	add	r24, r24
    200c:	99 1f       	adc	r25, r25
    200e:	2a 95       	dec	r18
    2010:	e2 f7       	brpl	.-8      	; 0x200a <ADCInit+0x88>
    2012:	80 95       	com	r24
    2014:	58 23       	and	r21, r24
    2016:	54 b9       	out	0x04, r21	; 4
    2018:	95 b1       	in	r25, 0x05	; 5
    201a:	89 23       	and	r24, r25
    201c:	85 b9       	out	0x05, r24	; 5
    201e:	46 c0       	rjmp	.+140    	; 0x20ac <ADCInit+0x12a>
    2020:	57 b1       	in	r21, 0x07	; 7
    2022:	c9 01       	movw	r24, r18
    2024:	88 0f       	add	r24, r24
    2026:	99 1f       	adc	r25, r25
    2028:	28 0f       	add	r18, r24
    202a:	39 1f       	adc	r19, r25
    202c:	2e 5f       	subi	r18, 0xFE	; 254
    202e:	3f 4f       	sbci	r19, 0xFF	; 255
    2030:	03 2e       	mov	r0, r19
    2032:	00 0c       	add	r0, r0
    2034:	44 0b       	sbc	r20, r20
    2036:	22 57       	subi	r18, 0x72	; 114
    2038:	3e 4f       	sbci	r19, 0xFE	; 254
    203a:	4f 4f       	sbci	r20, 0xFF	; 255
    203c:	f9 01       	movw	r30, r18
    203e:	24 91       	lpm	r18, Z
    2040:	47 fd       	sbrc	r20, 7
    2042:	20 81       	ld	r18, Z
    2044:	81 e0       	ldi	r24, 0x01	; 1
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	02 c0       	rjmp	.+4      	; 0x204e <ADCInit+0xcc>
    204a:	88 0f       	add	r24, r24
    204c:	99 1f       	adc	r25, r25
    204e:	2a 95       	dec	r18
    2050:	e2 f7       	brpl	.-8      	; 0x204a <ADCInit+0xc8>
    2052:	80 95       	com	r24
    2054:	58 23       	and	r21, r24
    2056:	57 b9       	out	0x07, r21	; 7
    2058:	98 b1       	in	r25, 0x08	; 8
    205a:	89 23       	and	r24, r25
    205c:	88 b9       	out	0x08, r24	; 8
    205e:	26 c0       	rjmp	.+76     	; 0x20ac <ADCInit+0x12a>
    2060:	4a b1       	in	r20, 0x0a	; 10
    2062:	c9 01       	movw	r24, r18
    2064:	88 0f       	add	r24, r24
    2066:	99 1f       	adc	r25, r25
    2068:	82 0f       	add	r24, r18
    206a:	93 1f       	adc	r25, r19
    206c:	02 96       	adiw	r24, 0x02	; 2
    206e:	09 2e       	mov	r0, r25
    2070:	00 0c       	add	r0, r0
    2072:	aa 0b       	sbc	r26, r26
    2074:	82 57       	subi	r24, 0x72	; 114
    2076:	9e 4f       	sbci	r25, 0xFE	; 254
    2078:	af 4f       	sbci	r26, 0xFF	; 255
    207a:	fc 01       	movw	r30, r24
    207c:	24 91       	lpm	r18, Z
    207e:	a7 fd       	sbrc	r26, 7
    2080:	20 81       	ld	r18, Z
    2082:	81 e0       	ldi	r24, 0x01	; 1
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	02 c0       	rjmp	.+4      	; 0x208c <ADCInit+0x10a>
    2088:	88 0f       	add	r24, r24
    208a:	99 1f       	adc	r25, r25
    208c:	2a 95       	dec	r18
    208e:	e2 f7       	brpl	.-8      	; 0x2088 <ADCInit+0x106>
    2090:	80 95       	com	r24
    2092:	48 23       	and	r20, r24
    2094:	4a b9       	out	0x0a, r20	; 10
    2096:	9b b1       	in	r25, 0x0b	; 11
    2098:	89 23       	and	r24, r25
    209a:	8b b9       	out	0x0b, r24	; 11
    209c:	07 c0       	rjmp	.+14     	; 0x20ac <ADCInit+0x12a>
    209e:	45 eb       	ldi	r20, 0xB5	; 181
    20a0:	50 e0       	ldi	r21, 0x00	; 0
    20a2:	65 eb       	ldi	r22, 0xB5	; 181
    20a4:	71 e0       	ldi	r23, 0x01	; 1
    20a6:	80 e0       	ldi	r24, 0x00	; 0
    20a8:	0e 94 a4 21 	call	0x4348	; 0x4348 <PlatformAssert>
    20ac:	cf 5f       	subi	r28, 0xFF	; 255
    20ae:	c5 30       	cpi	r28, 0x05	; 5
    20b0:	08 f4       	brcc	.+2      	; 0x20b4 <ADCInit+0x132>
    20b2:	7a cf       	rjmp	.-268    	; 0x1fa8 <ADCInit+0x26>
    20b4:	81 e0       	ldi	r24, 0x01	; 1
    20b6:	80 93 5e 07 	sts	0x075E, r24	; 0x80075e <sg_eState>
    20ba:	cf 91       	pop	r28
    20bc:	08 95       	ret

Disassembly of section .text.CANLookupCommand:

00003ae0 <CANLookupCommand>:
	{PKT_MODULE_SET_TIME,		ECANMessageType_SetTime},
	{PKT_MODULE_MAX_STATE,		ECANMessageType_MaxState}
};

static ECANMessageType CANLookupCommand( uint16_t u16ID )
{
    3ae0:	cf 93       	push	r28
    3ae2:	df 93       	push	r29
    3ae4:	ec 01       	movw	r28, r24
	uint8_t u8Index = 0;
    3ae6:	90 e0       	ldi	r25, 0x00	; 0
	
	while( u8Index < (sizeof(sg_sRXCommandList)/sizeof(sg_sRXCommandList[0])) )
    3ae8:	26 c0       	rjmp	.+76     	; 0x3b36 <CANLookupCommand+0x56>
	{
		if( sg_sRXCommandList[u8Index].u16ID == u16ID )
    3aea:	a9 2f       	mov	r26, r25
    3aec:	b0 e0       	ldi	r27, 0x00	; 0
    3aee:	9d 01       	movw	r18, r26
    3af0:	22 0f       	add	r18, r18
    3af2:	33 1f       	adc	r19, r19
    3af4:	2a 0f       	add	r18, r26
    3af6:	3b 1f       	adc	r19, r27
    3af8:	03 2e       	mov	r0, r19
    3afa:	00 0c       	add	r0, r0
    3afc:	44 0b       	sbc	r20, r20
    3afe:	2c 5c       	subi	r18, 0xCC	; 204
    3b00:	3e 4f       	sbci	r19, 0xFE	; 254
    3b02:	4f 4f       	sbci	r20, 0xFF	; 255
    3b04:	f9 01       	movw	r30, r18
    3b06:	54 2f       	mov	r21, r20
    3b08:	0e 94 f3 24 	call	0x49e6	; 0x49e6 <__xload_2>
    3b0c:	6c 17       	cp	r22, r28
    3b0e:	7d 07       	cpc	r23, r29
    3b10:	89 f4       	brne	.+34     	; 0x3b34 <CANLookupCommand+0x54>
		{
			return( sg_sRXCommandList[u8Index].eType );
    3b12:	cd 01       	movw	r24, r26
    3b14:	88 0f       	add	r24, r24
    3b16:	99 1f       	adc	r25, r25
    3b18:	8a 0f       	add	r24, r26
    3b1a:	9b 1f       	adc	r25, r27
    3b1c:	02 96       	adiw	r24, 0x02	; 2
    3b1e:	09 2e       	mov	r0, r25
    3b20:	00 0c       	add	r0, r0
    3b22:	aa 0b       	sbc	r26, r26
    3b24:	8c 5c       	subi	r24, 0xCC	; 204
    3b26:	9e 4f       	sbci	r25, 0xFE	; 254
    3b28:	af 4f       	sbci	r26, 0xFF	; 255
    3b2a:	fc 01       	movw	r30, r24
    3b2c:	84 91       	lpm	r24, Z
    3b2e:	a7 fd       	sbrc	r26, 7
    3b30:	80 81       	ld	r24, Z
    3b32:	04 c0       	rjmp	.+8      	; 0x3b3c <CANLookupCommand+0x5c>
		}
		
		u8Index++;
    3b34:	9f 5f       	subi	r25, 0xFF	; 255

static ECANMessageType CANLookupCommand( uint16_t u16ID )
{
	uint8_t u8Index = 0;
	
	while( u8Index < (sizeof(sg_sRXCommandList)/sizeof(sg_sRXCommandList[0])) )
    3b36:	99 30       	cpi	r25, 0x09	; 9
    3b38:	c0 f2       	brcs	.-80     	; 0x3aea <CANLookupCommand+0xa>
		}
		
		u8Index++;
	}
	
	return( ECANMessageType_MAX );
    3b3a:	81 e1       	ldi	r24, 0x11	; 17
}
    3b3c:	df 91       	pop	r29
    3b3e:	cf 91       	pop	r28
    3b40:	08 95       	ret

Disassembly of section .text.CANMOBSet:

000013fa <CANMOBSet>:

static void CANMOBSet( uint8_t u8MOBIndex,
					   const SMOBDef* psDef,
					   uint8_t* pu8Data,
					   uint8_t u8DataLen )
{
    13fa:	6f 92       	push	r6
    13fc:	7f 92       	push	r7
    13fe:	8f 92       	push	r8
    1400:	9f 92       	push	r9
    1402:	bf 92       	push	r11
    1404:	cf 92       	push	r12
    1406:	df 92       	push	r13
    1408:	ef 92       	push	r14
    140a:	ff 92       	push	r15
    140c:	0f 93       	push	r16
    140e:	1f 93       	push	r17
    1410:	cf 93       	push	r28
    1412:	df 93       	push	r29
    1414:	f8 2e       	mov	r15, r24
    1416:	6a 01       	movw	r12, r20
    1418:	e6 2e       	mov	r14, r22
    141a:	e9 01       	movw	r28, r18
	uint8_t u8CANCDMOBValue;
	uint32_t u32MessageID;
	uint8_t savedCANGIE;
	
	MBASSERT( u8MOBIndex <= 5 );
    141c:	0f 2e       	mov	r0, r31
    141e:	f5 e0       	ldi	r31, 0x05	; 5
    1420:	6f 2e       	mov	r6, r31
    1422:	f0 2d       	mov	r31, r0
    1424:	68 16       	cp	r6, r24
    1426:	38 f4       	brcc	.+14     	; 0x1436 <CANMOBSet+0x3c>
    1428:	4e ec       	ldi	r20, 0xCE	; 206
    142a:	50 e0       	ldi	r21, 0x00	; 0
    142c:	60 ec       	ldi	r22, 0xC0	; 192
    142e:	71 e0       	ldi	r23, 0x01	; 1
    1430:	80 e0       	ldi	r24, 0x00	; 0
    1432:	0e 94 a4 21 	call	0x4348	; 0x4348 <PlatformAssert>
	MBASSERT( u8DataLen <= 8 );
    1436:	09 30       	cpi	r16, 0x09	; 9
    1438:	38 f0       	brcs	.+14     	; 0x1448 <CANMOBSet+0x4e>
    143a:	4f ec       	ldi	r20, 0xCF	; 207
    143c:	50 e0       	ldi	r21, 0x00	; 0
    143e:	60 ec       	ldi	r22, 0xC0	; 192
    1440:	71 e0       	ldi	r23, 0x01	; 1
    1442:	80 e0       	ldi	r24, 0x00	; 0
    1444:	0e 94 a4 21 	call	0x4348	; 0x4348 <PlatformAssert>
	
	// Disable CAN interrupts during MOB configuration to prevent corruption
	savedCANGIE = CANGIE;
    1448:	eb ed       	ldi	r30, 0xDB	; 219
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	b0 80       	ld	r11, Z
	CANGIE &= ~(1 << ENIT);
    144e:	80 81       	ld	r24, Z
    1450:	8f 77       	andi	r24, 0x7F	; 127
    1452:	80 83       	st	Z, r24
	
	// Set the MOB page, auto increment, and data index 0
	CANPAGE = u8MOBIndex << 4;
    1454:	8f 2d       	mov	r24, r15
    1456:	82 95       	swap	r24
    1458:	80 7f       	andi	r24, 0xF0	; 240
    145a:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f00ed>
	
	// Clear the MOB status
	CANSTMOB = 0;
    145e:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
	
	// Set the MOB registers for this page
	u8CANCDMOBValue = u8DataLen;
	u8CANCDMOBValue |= (psDef->u8Mode << CONMOB0);
    1462:	f6 01       	movw	r30, r12
    1464:	84 91       	lpm	r24, Z
    1466:	e7 fc       	sbrc	r14, 7
    1468:	80 81       	ld	r24, Z
    146a:	20 e4       	ldi	r18, 0x40	; 64
    146c:	82 9f       	mul	r24, r18
    146e:	c0 01       	movw	r24, r0
    1470:	11 24       	eor	r1, r1
    1472:	10 2f       	mov	r17, r16
    1474:	18 2b       	or	r17, r24
	if( psDef->bReplyValid )
    1476:	ae 2d       	mov	r26, r14
    1478:	c6 01       	movw	r24, r12
    147a:	01 96       	adiw	r24, 0x01	; 1
    147c:	a1 1d       	adc	r26, r1
    147e:	fc 01       	movw	r30, r24
    1480:	84 91       	lpm	r24, Z
    1482:	a7 fd       	sbrc	r26, 7
    1484:	80 81       	ld	r24, Z
    1486:	81 11       	cpse	r24, r1
	{
		u8CANCDMOBValue |= (1 << RPLV);
    1488:	10 62       	ori	r17, 0x20	; 32
	}
	u8CANCDMOBValue |= (1 << IDE);
    148a:	10 61       	ori	r17, 0x10	; 16
	// Extended frame address format
	//	Bits 0-7: Pack / Module registration ID of sender (if assigned, zero otherwise)
	//	Bits 8-17: Reserved, set to zero.
	//	Bits 18-28: Static message ID (eg. 0x500)
	
	u32MessageID = (uint32_t)PlatformGetRegistrationID();
    148c:	0e 94 3d 25 	call	0x4a7a	; 0x4a7a <PlatformGetRegistrationID>
	u32MessageID |= (((uint32_t)psDef->u16ID) & 0x7ff) << 18;
    1490:	4e 2d       	mov	r20, r14
    1492:	96 01       	movw	r18, r12
    1494:	2e 5f       	subi	r18, 0xFE	; 254
    1496:	3f 4f       	sbci	r19, 0xFF	; 255
    1498:	4f 4f       	sbci	r20, 0xFF	; 255
    149a:	f9 01       	movw	r30, r18
    149c:	54 2f       	mov	r21, r20
    149e:	0e 94 f3 24 	call	0x49e6	; 0x49e6 <__xload_2>
    14a2:	ab 01       	movw	r20, r22
    14a4:	57 70       	andi	r21, 0x07	; 7
    14a6:	60 e0       	ldi	r22, 0x00	; 0
    14a8:	70 e0       	ldi	r23, 0x00	; 0
    14aa:	03 2e       	mov	r0, r19
    14ac:	32 e1       	ldi	r19, 0x12	; 18
    14ae:	44 0f       	add	r20, r20
    14b0:	55 1f       	adc	r21, r21
    14b2:	66 1f       	adc	r22, r22
    14b4:	77 1f       	adc	r23, r23
    14b6:	3a 95       	dec	r19
    14b8:	d1 f7       	brne	.-12     	; 0x14ae <CANMOBSet+0xb4>
    14ba:	30 2d       	mov	r19, r0
    14bc:	3a 01       	movw	r6, r20
    14be:	4b 01       	movw	r8, r22
    14c0:	68 2a       	or	r6, r24
    14c2:	d4 01       	movw	r26, r8
    14c4:	c3 01       	movw	r24, r6
	
	CANIDT4 = psDef->bRTRTag?(1 << RTRTAG):0;
    14c6:	4e 2d       	mov	r20, r14
    14c8:	96 01       	movw	r18, r12
    14ca:	2a 5f       	subi	r18, 0xFA	; 250
    14cc:	3f 4f       	sbci	r19, 0xFF	; 255
    14ce:	4f 4f       	sbci	r20, 0xFF	; 255
    14d0:	f9 01       	movw	r30, r18
    14d2:	24 91       	lpm	r18, Z
    14d4:	47 fd       	sbrc	r20, 7
    14d6:	20 81       	ld	r18, Z
    14d8:	22 23       	and	r18, r18
    14da:	11 f0       	breq	.+4      	; 0x14e0 <CANMOBSet+0xe6>
    14dc:	24 e0       	ldi	r18, 0x04	; 4
    14de:	01 c0       	rjmp	.+2      	; 0x14e2 <CANMOBSet+0xe8>
    14e0:	20 e0       	ldi	r18, 0x00	; 0
    14e2:	e0 ef       	ldi	r30, 0xF0	; 240
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	20 83       	st	Z, r18
	CANIDT4 |= u32MessageID << 3;
    14e8:	20 81       	ld	r18, Z
    14ea:	38 2f       	mov	r19, r24
    14ec:	33 0f       	add	r19, r19
    14ee:	33 0f       	add	r19, r19
    14f0:	33 0f       	add	r19, r19
    14f2:	23 2b       	or	r18, r19
    14f4:	20 83       	st	Z, r18
	CANIDT3 = u32MessageID >> 5;
    14f6:	ac 01       	movw	r20, r24
    14f8:	bd 01       	movw	r22, r26
    14fa:	68 94       	set
    14fc:	14 f8       	bld	r1, 4
    14fe:	76 95       	lsr	r23
    1500:	67 95       	ror	r22
    1502:	57 95       	ror	r21
    1504:	47 95       	ror	r20
    1506:	16 94       	lsr	r1
    1508:	d1 f7       	brne	.-12     	; 0x14fe <CANMOBSet+0x104>
    150a:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f00f1>
	CANIDT2 = u32MessageID >> 13;
    150e:	ac 01       	movw	r20, r24
    1510:	bd 01       	movw	r22, r26
    1512:	03 2e       	mov	r0, r19
    1514:	3d e0       	ldi	r19, 0x0D	; 13
    1516:	76 95       	lsr	r23
    1518:	67 95       	ror	r22
    151a:	57 95       	ror	r21
    151c:	47 95       	ror	r20
    151e:	3a 95       	dec	r19
    1520:	d1 f7       	brne	.-12     	; 0x1516 <CANMOBSet+0x11c>
    1522:	30 2d       	mov	r19, r0
    1524:	40 93 f2 00 	sts	0x00F2, r20	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f00f2>
	CANIDT1 = u32MessageID >> 21;
    1528:	07 2e       	mov	r0, r23
    152a:	75 e1       	ldi	r23, 0x15	; 21
    152c:	b6 95       	lsr	r27
    152e:	a7 95       	ror	r26
    1530:	97 95       	ror	r25
    1532:	87 95       	ror	r24
    1534:	7a 95       	dec	r23
    1536:	d1 f7       	brne	.-12     	; 0x152c <CANMOBSet+0x132>
    1538:	70 2d       	mov	r23, r0
    153a:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f00f3>
	
	// Setup mask for the cmd (require matching ID extention bit)
	CANIDM4 = psDef->bRTRMask?(1 << RTRTAG):0;
    153e:	ae 2d       	mov	r26, r14
    1540:	c6 01       	movw	r24, r12
    1542:	07 96       	adiw	r24, 0x07	; 7
    1544:	a1 1d       	adc	r26, r1
    1546:	fc 01       	movw	r30, r24
    1548:	84 91       	lpm	r24, Z
    154a:	a7 fd       	sbrc	r26, 7
    154c:	80 81       	ld	r24, Z
    154e:	88 23       	and	r24, r24
    1550:	11 f0       	breq	.+4      	; 0x1556 <CANMOBSet+0x15c>
    1552:	84 e0       	ldi	r24, 0x04	; 4
    1554:	01 c0       	rjmp	.+2      	; 0x1558 <CANMOBSet+0x15e>
    1556:	80 e0       	ldi	r24, 0x00	; 0
    1558:	e4 ef       	ldi	r30, 0xF4	; 244
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	80 83       	st	Z, r24
	CANIDM4 |= (1 << IDEMSK);
    155e:	80 81       	ld	r24, Z
    1560:	81 60       	ori	r24, 0x01	; 1
    1562:	80 83       	st	Z, r24
	CANIDM3 = 0;
    1564:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7f00f5>
	CANIDM2 = psDef->u16IDMask << 5;
    1568:	ae 2d       	mov	r26, r14
    156a:	c6 01       	movw	r24, r12
    156c:	04 96       	adiw	r24, 0x04	; 4
    156e:	a1 1d       	adc	r26, r1
    1570:	fc 01       	movw	r30, r24
    1572:	5a 2f       	mov	r21, r26
    1574:	0e 94 f3 24 	call	0x49e6	; 0x49e6 <__xload_2>
    1578:	62 95       	swap	r22
    157a:	66 0f       	add	r22, r22
    157c:	60 7e       	andi	r22, 0xE0	; 224
    157e:	60 93 f6 00 	sts	0x00F6, r22	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7f00f6>
	CANIDM1 = psDef->u16IDMask >> 3;
    1582:	fc 01       	movw	r30, r24
    1584:	5a 2f       	mov	r21, r26
    1586:	0e 94 f3 24 	call	0x49e6	; 0x49e6 <__xload_2>
    158a:	76 95       	lsr	r23
    158c:	67 95       	ror	r22
    158e:	76 95       	lsr	r23
    1590:	67 95       	ror	r22
    1592:	76 95       	lsr	r23
    1594:	67 95       	ror	r22
    1596:	60 93 f7 00 	sts	0x00F7, r22	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7f00f7>
	
	// Set the data into the FIFO
	while( u8DataLen )
    159a:	04 c0       	rjmp	.+8      	; 0x15a4 <CANMOBSet+0x1aa>
	{
		CANMSG = *pu8Data;
    159c:	89 91       	ld	r24, Y+
    159e:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
		
		pu8Data++;
		u8DataLen--;
    15a2:	01 50       	subi	r16, 0x01	; 1
	CANIDM3 = 0;
	CANIDM2 = psDef->u16IDMask << 5;
	CANIDM1 = psDef->u16IDMask >> 3;
	
	// Set the data into the FIFO
	while( u8DataLen )
    15a4:	01 11       	cpse	r16, r1
    15a6:	fa cf       	rjmp	.-12     	; 0x159c <CANMOBSet+0x1a2>
		pu8Data++;
		u8DataLen--;
	}
	
	// Send it now
	CANCDMOB = u8CANCDMOBValue;
    15a8:	10 93 ef 00 	sts	0x00EF, r17	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
	
	// Enable (activates the MOB) or disable the MOB interrupt
	if( psDef->u8Mode != CAN_DISABLED )
    15ac:	f6 01       	movw	r30, r12
    15ae:	84 91       	lpm	r24, Z
    15b0:	e7 fc       	sbrc	r14, 7
    15b2:	80 81       	ld	r24, Z
    15b4:	88 23       	and	r24, r24
    15b6:	69 f0       	breq	.+26     	; 0x15d2 <CANMOBSet+0x1d8>
	{
		CANIE2 |= (1 << u8MOBIndex);
    15b8:	ee ed       	ldi	r30, 0xDE	; 222
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	20 81       	ld	r18, Z
    15be:	81 e0       	ldi	r24, 0x01	; 1
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	02 c0       	rjmp	.+4      	; 0x15c8 <CANMOBSet+0x1ce>
    15c4:	88 0f       	add	r24, r24
    15c6:	99 1f       	adc	r25, r25
    15c8:	fa 94       	dec	r15
    15ca:	e2 f7       	brpl	.-8      	; 0x15c4 <CANMOBSet+0x1ca>
    15cc:	82 2b       	or	r24, r18
    15ce:	80 83       	st	Z, r24
    15d0:	0d c0       	rjmp	.+26     	; 0x15ec <CANMOBSet+0x1f2>
	}
	else
	{
		CANIE2 &= (uint8_t)~(1 << u8MOBIndex);
    15d2:	ee ed       	ldi	r30, 0xDE	; 222
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	20 81       	ld	r18, Z
    15d8:	81 e0       	ldi	r24, 0x01	; 1
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	02 c0       	rjmp	.+4      	; 0x15e2 <CANMOBSet+0x1e8>
    15de:	88 0f       	add	r24, r24
    15e0:	99 1f       	adc	r25, r25
    15e2:	fa 94       	dec	r15
    15e4:	e2 f7       	brpl	.-8      	; 0x15de <CANMOBSet+0x1e4>
    15e6:	80 95       	com	r24
    15e8:	82 23       	and	r24, r18
    15ea:	80 83       	st	Z, r24
	}
	
	// Restore CAN interrupts
	CANGIE = savedCANGIE;
    15ec:	b0 92 db 00 	sts	0x00DB, r11	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f00db>
}
    15f0:	df 91       	pop	r29
    15f2:	cf 91       	pop	r28
    15f4:	1f 91       	pop	r17
    15f6:	0f 91       	pop	r16
    15f8:	ff 90       	pop	r15
    15fa:	ef 90       	pop	r14
    15fc:	df 90       	pop	r13
    15fe:	cf 90       	pop	r12
    1600:	bf 90       	pop	r11
    1602:	9f 90       	pop	r9
    1604:	8f 90       	pop	r8
    1606:	7f 90       	pop	r7
    1608:	6f 90       	pop	r6
    160a:	08 95       	ret

Disassembly of section .text.CANSendMessageInternal:

00001b52 <CANSendMessageInternal>:

static void CANSendMessageInternal( ECANMessageType eType,
									uint8_t* pu8Data,
									uint8_t u8DataLen,	
									bool bRetransmit )
{
    1b52:	6f 92       	push	r6
    1b54:	7f 92       	push	r7
    1b56:	8f 92       	push	r8
    1b58:	ef 92       	push	r14
    1b5a:	ff 92       	push	r15
    1b5c:	0f 93       	push	r16
    1b5e:	cf 93       	push	r28
    1b60:	df 93       	push	r29
    1b62:	c8 2f       	mov	r28, r24
    1b64:	7b 01       	movw	r14, r22
    1b66:	04 2f       	mov	r16, r20
    1b68:	d2 2f       	mov	r29, r18
	const SMOBDef* psDef = NULL;
	
	if( ECANMessageType_ModuleAnnouncement == eType )
    1b6a:	88 23       	and	r24, r24
    1b6c:	f9 f0       	breq	.+62     	; 0x1bac <CANSendMessageInternal+0x5a>
	{
		psDef = &sg_sMOBModuleAnnouncement;
	}
	else if( ECANMessageType_ModuleStatus1 == eType )
    1b6e:	81 30       	cpi	r24, 0x01	; 1
    1b70:	31 f1       	breq	.+76     	; 0x1bbe <CANSendMessageInternal+0x6c>
	{
		psDef = &sg_sMOBModuleStatus1;
	}
	else if( ECANMessageType_ModuleStatus2 == eType )
    1b72:	82 30       	cpi	r24, 0x02	; 2
    1b74:	69 f1       	breq	.+90     	; 0x1bd0 <CANSendMessageInternal+0x7e>
	{
		psDef = &sg_sMOBModuleStatus2;
	}
	else if( ECANMessageType_ModuleStatus3 == eType )
    1b76:	83 30       	cpi	r24, 0x03	; 3
    1b78:	a1 f1       	breq	.+104    	; 0x1be2 <CANSendMessageInternal+0x90>
	{
		psDef = &sg_sMOBModuleStatus3;
	}
	else if( ECANMessageType_ModuleCellCommStat1 == eType )
    1b7a:	86 30       	cpi	r24, 0x06	; 6
    1b7c:	d9 f1       	breq	.+118    	; 0x1bf4 <CANSendMessageInternal+0xa2>
	{
		psDef = &sg_sMOBModuleCellCommStat1;
	}
	else if( ECANMessageType_ModuleCellCommStat2 == eType )
    1b7e:	87 30       	cpi	r24, 0x07	; 7
    1b80:	09 f4       	brne	.+2      	; 0x1b84 <CANSendMessageInternal+0x32>
    1b82:	41 c0       	rjmp	.+130    	; 0x1c06 <CANSendMessageInternal+0xb4>
	{
		psDef = &sg_sMOBModuleCellCommStat2;
	}
	else if( ECANMessageType_ModuleHardwareDetail == eType )
    1b84:	85 30       	cpi	r24, 0x05	; 5
    1b86:	09 f4       	brne	.+2      	; 0x1b8a <CANSendMessageInternal+0x38>
    1b88:	47 c0       	rjmp	.+142    	; 0x1c18 <CANSendMessageInternal+0xc6>
	{
		psDef = &sg_sMOBModuleHardwareDetail;
	}
	else if( ECANMessageType_ModuleCellDetail == eType )
    1b8a:	84 30       	cpi	r24, 0x04	; 4
    1b8c:	09 f4       	brne	.+2      	; 0x1b90 <CANSendMessageInternal+0x3e>
    1b8e:	4d c0       	rjmp	.+154    	; 0x1c2a <CANSendMessageInternal+0xd8>
	{
		psDef = &sg_sMOBModuleCellDetail;
	}
	else if( ECANMessageType_ModuleRequestTime == eType )
    1b90:	88 30       	cpi	r24, 0x08	; 8
    1b92:	09 f4       	brne	.+2      	; 0x1b96 <CANSendMessageInternal+0x44>
    1b94:	53 c0       	rjmp	.+166    	; 0x1c3c <CANSendMessageInternal+0xea>
		psDef = &sg_sMOBModuleRequestTime;
	}
	else
	{
		// Invalid message type
		MBASSERT(0);
    1b96:	41 e4       	ldi	r20, 0x41	; 65
    1b98:	51 e0       	ldi	r21, 0x01	; 1
    1b9a:	60 ec       	ldi	r22, 0xC0	; 192
    1b9c:	71 e0       	ldi	r23, 0x01	; 1
    1b9e:	80 e0       	ldi	r24, 0x00	; 0
    1ba0:	0e 94 a4 21 	call	0x4348	; 0x4348 <PlatformAssert>
static void CANSendMessageInternal( ECANMessageType eType,
									uint8_t* pu8Data,
									uint8_t u8DataLen,	
									bool bRetransmit )
{
	const SMOBDef* psDef = NULL;
    1ba4:	61 2c       	mov	r6, r1
    1ba6:	71 2c       	mov	r7, r1
    1ba8:	81 2c       	mov	r8, r1
    1baa:	50 c0       	rjmp	.+160    	; 0x1c4c <CANSendMessageInternal+0xfa>
	
	if( ECANMessageType_ModuleAnnouncement == eType )
	{
		psDef = &sg_sMOBModuleAnnouncement;
    1bac:	0f 2e       	mov	r0, r31
    1bae:	fb e0       	ldi	r31, 0x0B	; 11
    1bb0:	6f 2e       	mov	r6, r31
    1bb2:	f2 e0       	ldi	r31, 0x02	; 2
    1bb4:	7f 2e       	mov	r7, r31
    1bb6:	f0 e0       	ldi	r31, 0x00	; 0
    1bb8:	8f 2e       	mov	r8, r31
    1bba:	f0 2d       	mov	r31, r0
    1bbc:	47 c0       	rjmp	.+142    	; 0x1c4c <CANSendMessageInternal+0xfa>
	}
	else if( ECANMessageType_ModuleStatus1 == eType )
	{
		psDef = &sg_sMOBModuleStatus1;
    1bbe:	0f 2e       	mov	r0, r31
    1bc0:	f3 e0       	ldi	r31, 0x03	; 3
    1bc2:	6f 2e       	mov	r6, r31
    1bc4:	f2 e0       	ldi	r31, 0x02	; 2
    1bc6:	7f 2e       	mov	r7, r31
    1bc8:	f0 e0       	ldi	r31, 0x00	; 0
    1bca:	8f 2e       	mov	r8, r31
    1bcc:	f0 2d       	mov	r31, r0
    1bce:	3e c0       	rjmp	.+124    	; 0x1c4c <CANSendMessageInternal+0xfa>
	}
	else if( ECANMessageType_ModuleStatus2 == eType )
	{
		psDef = &sg_sMOBModuleStatus2;
    1bd0:	0f 2e       	mov	r0, r31
    1bd2:	fb ef       	ldi	r31, 0xFB	; 251
    1bd4:	6f 2e       	mov	r6, r31
    1bd6:	f1 e0       	ldi	r31, 0x01	; 1
    1bd8:	7f 2e       	mov	r7, r31
    1bda:	f0 e0       	ldi	r31, 0x00	; 0
    1bdc:	8f 2e       	mov	r8, r31
    1bde:	f0 2d       	mov	r31, r0
    1be0:	35 c0       	rjmp	.+106    	; 0x1c4c <CANSendMessageInternal+0xfa>
	}
	else if( ECANMessageType_ModuleStatus3 == eType )
	{
		psDef = &sg_sMOBModuleStatus3;
    1be2:	0f 2e       	mov	r0, r31
    1be4:	f3 ef       	ldi	r31, 0xF3	; 243
    1be6:	6f 2e       	mov	r6, r31
    1be8:	f1 e0       	ldi	r31, 0x01	; 1
    1bea:	7f 2e       	mov	r7, r31
    1bec:	f0 e0       	ldi	r31, 0x00	; 0
    1bee:	8f 2e       	mov	r8, r31
    1bf0:	f0 2d       	mov	r31, r0
    1bf2:	2c c0       	rjmp	.+88     	; 0x1c4c <CANSendMessageInternal+0xfa>
	}
	else if( ECANMessageType_ModuleCellCommStat1 == eType )
	{
		psDef = &sg_sMOBModuleCellCommStat1;
    1bf4:	0f 2e       	mov	r0, r31
    1bf6:	fb ee       	ldi	r31, 0xEB	; 235
    1bf8:	6f 2e       	mov	r6, r31
    1bfa:	f1 e0       	ldi	r31, 0x01	; 1
    1bfc:	7f 2e       	mov	r7, r31
    1bfe:	f0 e0       	ldi	r31, 0x00	; 0
    1c00:	8f 2e       	mov	r8, r31
    1c02:	f0 2d       	mov	r31, r0
    1c04:	23 c0       	rjmp	.+70     	; 0x1c4c <CANSendMessageInternal+0xfa>
	}
	else if( ECANMessageType_ModuleCellCommStat2 == eType )
	{
		psDef = &sg_sMOBModuleCellCommStat2;
    1c06:	0f 2e       	mov	r0, r31
    1c08:	f3 ee       	ldi	r31, 0xE3	; 227
    1c0a:	6f 2e       	mov	r6, r31
    1c0c:	f1 e0       	ldi	r31, 0x01	; 1
    1c0e:	7f 2e       	mov	r7, r31
    1c10:	f0 e0       	ldi	r31, 0x00	; 0
    1c12:	8f 2e       	mov	r8, r31
    1c14:	f0 2d       	mov	r31, r0
    1c16:	1a c0       	rjmp	.+52     	; 0x1c4c <CANSendMessageInternal+0xfa>
	}
	else if( ECANMessageType_ModuleHardwareDetail == eType )
	{
		psDef = &sg_sMOBModuleHardwareDetail;
    1c18:	0f 2e       	mov	r0, r31
    1c1a:	f3 ed       	ldi	r31, 0xD3	; 211
    1c1c:	6f 2e       	mov	r6, r31
    1c1e:	f1 e0       	ldi	r31, 0x01	; 1
    1c20:	7f 2e       	mov	r7, r31
    1c22:	f0 e0       	ldi	r31, 0x00	; 0
    1c24:	8f 2e       	mov	r8, r31
    1c26:	f0 2d       	mov	r31, r0
    1c28:	11 c0       	rjmp	.+34     	; 0x1c4c <CANSendMessageInternal+0xfa>
	}
	else if( ECANMessageType_ModuleCellDetail == eType )
	{
		psDef = &sg_sMOBModuleCellDetail;
    1c2a:	0f 2e       	mov	r0, r31
    1c2c:	fb ed       	ldi	r31, 0xDB	; 219
    1c2e:	6f 2e       	mov	r6, r31
    1c30:	f1 e0       	ldi	r31, 0x01	; 1
    1c32:	7f 2e       	mov	r7, r31
    1c34:	f0 e0       	ldi	r31, 0x00	; 0
    1c36:	8f 2e       	mov	r8, r31
    1c38:	f0 2d       	mov	r31, r0
    1c3a:	08 c0       	rjmp	.+16     	; 0x1c4c <CANSendMessageInternal+0xfa>
	}
	else if( ECANMessageType_ModuleRequestTime == eType )
	{
		psDef = &sg_sMOBModuleRequestTime;
    1c3c:	0f 2e       	mov	r0, r31
    1c3e:	fb ec       	ldi	r31, 0xCB	; 203
    1c40:	6f 2e       	mov	r6, r31
    1c42:	f1 e0       	ldi	r31, 0x01	; 1
    1c44:	7f 2e       	mov	r7, r31
    1c46:	f0 e0       	ldi	r31, 0x00	; 0
    1c48:	8f 2e       	mov	r8, r31
    1c4a:	f0 2d       	mov	r31, r0
	{
		// Invalid message type
		MBASSERT(0);
	}
	
	if(bRetransmit && sg_bInRetransmit) {
    1c4c:	dd 23       	and	r29, r29
    1c4e:	21 f0       	breq	.+8      	; 0x1c58 <CANSendMessageInternal+0x106>
    1c50:	80 91 5f 07 	lds	r24, 0x075F	; 0x80075f <sg_bInRetransmit>
    1c54:	81 11       	cpse	r24, r1
    1c56:	30 c0       	rjmp	.+96     	; 0x1cb8 <CANSendMessageInternal+0x166>
		// Already in a retransmit, don't allow nested retries
		return;
	}
	if( bRetransmit || (false == sg_bBusy) )
    1c58:	d1 11       	cpse	r29, r1
    1c5a:	04 c0       	rjmp	.+8      	; 0x1c64 <CANSendMessageInternal+0x112>
    1c5c:	80 91 63 07 	lds	r24, 0x0763	; 0x800763 <sg_bBusy>
    1c60:	81 11       	cpse	r24, r1
    1c62:	2a c0       	rjmp	.+84     	; 0x1cb8 <CANSendMessageInternal+0x166>
	{
		sg_bBusy = true;
    1c64:	81 e0       	ldi	r24, 0x01	; 1
    1c66:	80 93 63 07 	sts	0x0763, r24	; 0x800763 <sg_bBusy>
		
		// Save this message info for retransmit later if needed
		if( false == bRetransmit )
    1c6a:	d1 11       	cpse	r29, r1
    1c6c:	1a c0       	rjmp	.+52     	; 0x1ca2 <CANSendMessageInternal+0x150>
		{
			sg_u8TransmitAttempts = 0;
    1c6e:	10 92 62 07 	sts	0x0762, r1	; 0x800762 <sg_u8TransmitAttempts>
			sg_eLastTXType = eType;
    1c72:	c0 93 61 07 	sts	0x0761, r28	; 0x800761 <sg_eLastTXType>
			MBASSERT(u8DataLen <= CAN_MAX_MSG_SIZE);
    1c76:	09 30       	cpi	r16, 0x09	; 9
    1c78:	38 f0       	brcs	.+14     	; 0x1c88 <CANSendMessageInternal+0x136>
    1c7a:	41 e5       	ldi	r20, 0x51	; 81
    1c7c:	51 e0       	ldi	r21, 0x01	; 1
    1c7e:	60 ec       	ldi	r22, 0xC0	; 192
    1c80:	71 e0       	ldi	r23, 0x01	; 1
    1c82:	80 e0       	ldi	r24, 0x00	; 0
    1c84:	0e 94 a4 21 	call	0x4348	; 0x4348 <PlatformAssert>
			memcpy(sg_u8LastTXData, pu8Data, u8DataLen);
    1c88:	20 2f       	mov	r18, r16
    1c8a:	30 e0       	ldi	r19, 0x00	; 0
    1c8c:	c7 01       	movw	r24, r14
    1c8e:	a0 e8       	ldi	r26, 0x80	; 128
    1c90:	ac 01       	movw	r20, r24
    1c92:	6a 2f       	mov	r22, r26
    1c94:	89 e3       	ldi	r24, 0x39	; 57
    1c96:	97 e0       	ldi	r25, 0x07	; 7
    1c98:	0e 94 30 21 	call	0x4260	; 0x4260 <memcpy>
			sg_u8LastTXDataLen = u8DataLen;
    1c9c:	00 93 60 07 	sts	0x0760, r16	; 0x800760 <sg_u8LastTXDataLen>
    1ca0:	05 c0       	rjmp	.+10     	; 0x1cac <CANSendMessageInternal+0x15a>
		}
		else
		{
			sg_u8TransmitAttempts++;
    1ca2:	80 91 62 07 	lds	r24, 0x0762	; 0x800762 <sg_u8TransmitAttempts>
    1ca6:	8f 5f       	subi	r24, 0xFF	; 255
    1ca8:	80 93 62 07 	sts	0x0762, r24	; 0x800762 <sg_u8TransmitAttempts>
		}
		
		// Send it now
		CANMOBSet( CANMOB_TX_IDX, psDef, pu8Data, u8DataLen );
    1cac:	97 01       	movw	r18, r14
    1cae:	68 2d       	mov	r22, r8
    1cb0:	a3 01       	movw	r20, r6
    1cb2:	81 e0       	ldi	r24, 0x01	; 1
    1cb4:	0e 94 fd 09 	call	0x13fa	; 0x13fa <CANMOBSet>
	}
}
    1cb8:	df 91       	pop	r29
    1cba:	cf 91       	pop	r28
    1cbc:	0f 91       	pop	r16
    1cbe:	ff 90       	pop	r15
    1cc0:	ef 90       	pop	r14
    1cc2:	8f 90       	pop	r8
    1cc4:	7f 90       	pop	r7
    1cc6:	6f 90       	pop	r6
    1cc8:	08 95       	ret

Disassembly of section .text.CANMOBInterrupt:

000019c0 <CANMOBInterrupt>:

void CANMOBInterrupt( uint8_t u8MOBIndex )
{
    19c0:	cf 92       	push	r12
    19c2:	df 92       	push	r13
    19c4:	ff 92       	push	r15
    19c6:	0f 93       	push	r16
    19c8:	1f 93       	push	r17
    19ca:	cf 93       	push	r28
    19cc:	df 93       	push	r29
    19ce:	cd b7       	in	r28, 0x3d	; 61
    19d0:	de b7       	in	r29, 0x3e	; 62
    19d2:	28 97       	sbiw	r28, 0x08	; 8
    19d4:	0f b6       	in	r0, 0x3f	; 63
    19d6:	f8 94       	cli
    19d8:	de bf       	out	0x3e, r29	; 62
    19da:	0f be       	out	0x3f, r0	; 63
    19dc:	cd bf       	out	0x3d, r28	; 61
	// Set the MOB page first (and zero the data index)
	CANPAGE = u8MOBIndex << 4;
    19de:	98 2f       	mov	r25, r24
    19e0:	92 95       	swap	r25
    19e2:	90 7f       	andi	r25, 0xF0	; 240
    19e4:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f00ed>
	
	// Temporarily disable the MOB to examine and modify the registers
	CANIE2 &= (uint8_t)~(1 << u8MOBIndex);
    19e8:	ee ed       	ldi	r30, 0xDE	; 222
    19ea:	f0 e0       	ldi	r31, 0x00	; 0
    19ec:	20 81       	ld	r18, Z
    19ee:	01 e0       	ldi	r16, 0x01	; 1
    19f0:	10 e0       	ldi	r17, 0x00	; 0
    19f2:	08 2e       	mov	r0, r24
    19f4:	02 c0       	rjmp	.+4      	; 0x19fa <CANMOBInterrupt+0x3a>
    19f6:	00 0f       	add	r16, r16
    19f8:	11 1f       	adc	r17, r17
    19fa:	0a 94       	dec	r0
    19fc:	e2 f7       	brpl	.-8      	; 0x19f6 <CANMOBInterrupt+0x36>
    19fe:	90 2f       	mov	r25, r16
    1a00:	90 95       	com	r25
    1a02:	92 23       	and	r25, r18
    1a04:	90 83       	st	Z, r25
	CANCDMOB &= (uint8_t)~((1 << CONMOB0) | (1 << CONMOB1));
    1a06:	ef ee       	ldi	r30, 0xEF	; 239
    1a08:	f0 e0       	ldi	r31, 0x00	; 0
    1a0a:	90 81       	ld	r25, Z
    1a0c:	9f 73       	andi	r25, 0x3F	; 63
    1a0e:	90 83       	st	Z, r25
	
	if( CANMOB_RX_IDX == u8MOBIndex )
    1a10:	81 11       	cpse	r24, r1
    1a12:	5d c0       	rjmp	.+186    	; 0x1ace <CANMOBInterrupt+0x10e>
	{
		// TX success?  Just clear it since this is the RX context
		if( CANSTMOB & (1 << TXOK) )
    1a14:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    1a18:	86 ff       	sbrs	r24, 6
    1a1a:	09 c0       	rjmp	.+18     	; 0x1a2e <CANMOBInterrupt+0x6e>
		{
			// Clear it
			CANSTMOB &= ~(1 << TXOK);
    1a1c:	ee ee       	ldi	r30, 0xEE	; 238
    1a1e:	f0 e0       	ldi	r31, 0x00	; 0
    1a20:	80 81       	ld	r24, Z
    1a22:	8f 7b       	andi	r24, 0xBF	; 191
    1a24:	80 83       	st	Z, r24
            sg_bBusy = false;
    1a26:	10 92 63 07 	sts	0x0763, r1	; 0x800763 <sg_bBusy>
            sg_bInRetransmit = false;  // Clear flag on success	
    1a2a:	10 92 5f 07 	sts	0x075F, r1	; 0x80075f <sg_bInRetransmit>
		}
		// RX success?
		if( CANSTMOB & (1 << RXOK) )
    1a2e:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    1a32:	85 ff       	sbrs	r24, 5
    1a34:	38 c0       	rjmp	.+112    	; 0x1aa6 <CANMOBInterrupt+0xe6>
		{
			// Clear it
			CANSTMOB &= ~(1 << RXOK);
    1a36:	ee ee       	ldi	r30, 0xEE	; 238
    1a38:	f0 e0       	ldi	r31, 0x00	; 0
    1a3a:	80 81       	ld	r24, Z
    1a3c:	8f 7d       	andi	r24, 0xDF	; 223
    1a3e:	80 83       	st	Z, r24
		
			if( sg_pfRXCallback )
    1a40:	c0 90 49 07 	lds	r12, 0x0749	; 0x800749 <sg_pfRXCallback>
    1a44:	d0 90 4a 07 	lds	r13, 0x074A	; 0x80074a <sg_pfRXCallback+0x1>
    1a48:	c1 14       	cp	r12, r1
    1a4a:	d1 04       	cpc	r13, r1
    1a4c:	61 f1       	breq	.+88     	; 0x1aa6 <CANMOBInterrupt+0xe6>
			{
				ECANMessageType eType;
				uint16_t u16ID = 0;
				uint8_t u8Data[8];
				uint8_t u8DataLen = CANCDMOB & 0x0f;
    1a4e:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    1a52:	8f 70       	andi	r24, 0x0F	; 15
    1a54:	f8 2e       	mov	r15, r24
				uint8_t u8Index = 0;
			
				// Grab the messageID from the identifier registers
				u16ID = ((uint16_t)CANIDT1) << 3;
    1a56:	40 91 f3 00 	lds	r20, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f00f3>
    1a5a:	50 e0       	ldi	r21, 0x00	; 0
    1a5c:	44 0f       	add	r20, r20
    1a5e:	55 1f       	adc	r21, r21
    1a60:	44 0f       	add	r20, r20
    1a62:	55 1f       	adc	r21, r21
    1a64:	44 0f       	add	r20, r20
    1a66:	55 1f       	adc	r21, r21
				u16ID |= CANIDT2 >> 5;
    1a68:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f00f2>
    1a6c:	82 95       	swap	r24
    1a6e:	86 95       	lsr	r24
    1a70:	87 70       	andi	r24, 0x07	; 7
    1a72:	48 2b       	or	r20, r24
			{
				ECANMessageType eType;
				uint16_t u16ID = 0;
				uint8_t u8Data[8];
				uint8_t u8DataLen = CANCDMOB & 0x0f;
				uint8_t u8Index = 0;
    1a74:	90 e0       	ldi	r25, 0x00	; 0
				// Grab the messageID from the identifier registers
				u16ID = ((uint16_t)CANIDT1) << 3;
				u16ID |= CANIDT2 >> 5;
			
				// Pull the data out into a temp buffer
				while( u8Index < u8DataLen )
    1a76:	0a c0       	rjmp	.+20     	; 0x1a8c <CANMOBInterrupt+0xcc>
				{
					u8Data[u8Index] = CANMSG;
    1a78:	20 91 fa 00 	lds	r18, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
    1a7c:	e1 e0       	ldi	r30, 0x01	; 1
    1a7e:	f0 e0       	ldi	r31, 0x00	; 0
    1a80:	ec 0f       	add	r30, r28
    1a82:	fd 1f       	adc	r31, r29
    1a84:	e9 0f       	add	r30, r25
    1a86:	f1 1d       	adc	r31, r1
    1a88:	20 83       	st	Z, r18
					u8Index++;
    1a8a:	9f 5f       	subi	r25, 0xFF	; 255
				// Grab the messageID from the identifier registers
				u16ID = ((uint16_t)CANIDT1) << 3;
				u16ID |= CANIDT2 >> 5;
			
				// Pull the data out into a temp buffer
				while( u8Index < u8DataLen )
    1a8c:	9f 15       	cp	r25, r15
    1a8e:	a0 f3       	brcs	.-24     	; 0x1a78 <CANMOBInterrupt+0xb8>
					u8Data[u8Index] = CANMSG;
					u8Index++;
				}
			
				// Lookup ID to see if it matches one of ours
				eType = CANLookupCommand( u16ID );
    1a90:	ca 01       	movw	r24, r20
    1a92:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <CANLookupCommand>
			
				if( eType != ECANMessageType_MAX )
    1a96:	81 31       	cpi	r24, 0x11	; 17
    1a98:	31 f0       	breq	.+12     	; 0x1aa6 <CANMOBInterrupt+0xe6>
				{
					// Call comamnd handler
					sg_pfRXCallback( eType, u8Data, u8DataLen );
    1a9a:	4f 2d       	mov	r20, r15
    1a9c:	be 01       	movw	r22, r28
    1a9e:	6f 5f       	subi	r22, 0xFF	; 255
    1aa0:	7f 4f       	sbci	r23, 0xFF	; 255
    1aa2:	f6 01       	movw	r30, r12
    1aa4:	09 95       	icall
				}
			}
		}
	
		// If receive error, clear the bits
		if( CANSTMOB & ((1 << SERR) | (1 << CERR) | (1 << FERR)) )
    1aa6:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    1aaa:	8e 70       	andi	r24, 0x0E	; 14
    1aac:	29 f0       	breq	.+10     	; 0x1ab8 <CANMOBInterrupt+0xf8>
		{
			// Clear it.  Just ignore
			CANSTMOB &= ~((1 << SERR) | (1 << CERR) | (1 << FERR));
    1aae:	ee ee       	ldi	r30, 0xEE	; 238
    1ab0:	f0 e0       	ldi	r31, 0x00	; 0
    1ab2:	80 81       	ld	r24, Z
    1ab4:	81 7f       	andi	r24, 0xF1	; 241
    1ab6:	80 83       	st	Z, r24
		}
	
		// Re-enable RX now
		CANIE2 |= (1 << u8MOBIndex);
    1ab8:	ee ed       	ldi	r30, 0xDE	; 222
    1aba:	f0 e0       	ldi	r31, 0x00	; 0
    1abc:	80 81       	ld	r24, Z
    1abe:	08 2b       	or	r16, r24
    1ac0:	00 83       	st	Z, r16
		CANCDMOB |= (1 << CONMOB1);
    1ac2:	ef ee       	ldi	r30, 0xEF	; 239
    1ac4:	f0 e0       	ldi	r31, 0x00	; 0
    1ac6:	80 81       	ld	r24, Z
    1ac8:	80 68       	ori	r24, 0x80	; 128
    1aca:	80 83       	st	Z, r24
    1acc:	34 c0       	rjmp	.+104    	; 0x1b36 <CANMOBInterrupt+0x176>
	}
	else if( CANMOB_TX_IDX == u8MOBIndex )
    1ace:	81 30       	cpi	r24, 0x01	; 1
    1ad0:	91 f5       	brne	.+100    	; 0x1b36 <CANMOBInterrupt+0x176>
	{
		if( CANSTMOB & (1 << TXOK) )
    1ad2:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    1ad6:	86 ff       	sbrs	r24, 6
    1ad8:	07 c0       	rjmp	.+14     	; 0x1ae8 <CANMOBInterrupt+0x128>
		{
			// Clear it
			CANSTMOB &= ~(1 << TXOK);
    1ada:	ee ee       	ldi	r30, 0xEE	; 238
    1adc:	f0 e0       	ldi	r31, 0x00	; 0
    1ade:	80 81       	ld	r24, Z
    1ae0:	8f 7b       	andi	r24, 0xBF	; 191
    1ae2:	80 83       	st	Z, r24
		
			sg_bBusy = false;
    1ae4:	10 92 63 07 	sts	0x0763, r1	; 0x800763 <sg_bBusy>
		}
		
		// RX success, just clear it since this is the TX context
		if( CANSTMOB & (1 << RXOK) )
    1ae8:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    1aec:	85 ff       	sbrs	r24, 5
    1aee:	05 c0       	rjmp	.+10     	; 0x1afa <CANMOBInterrupt+0x13a>
		{
			// Clear it
			CANSTMOB &= ~(1 << RXOK);
    1af0:	ee ee       	ldi	r30, 0xEE	; 238
    1af2:	f0 e0       	ldi	r31, 0x00	; 0
    1af4:	80 81       	ld	r24, Z
    1af6:	8f 7d       	andi	r24, 0xDF	; 223
    1af8:	80 83       	st	Z, r24
		}

		// If TX Error on transmit (collision with another device)
		// -or- ACK error (nobody listening),
		// retry send
		if( CANSTMOB & ((1 << BERR) | (1 << AERR) | (1 << SERR)) )
    1afa:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    1afe:	89 71       	andi	r24, 0x19	; 25
    1b00:	d1 f0       	breq	.+52     	; 0x1b36 <CANMOBInterrupt+0x176>
		{
			// Clear it
			CANSTMOB &= ~((1 << BERR) | (1 << AERR) | (1 << SERR));
    1b02:	ee ee       	ldi	r30, 0xEE	; 238
    1b04:	f0 e0       	ldi	r31, 0x00	; 0
    1b06:	80 81       	ld	r24, Z
    1b08:	86 7e       	andi	r24, 0xE6	; 230
    1b0a:	80 83       	st	Z, r24

			if( sg_u8TransmitAttempts < 20 )
    1b0c:	80 91 62 07 	lds	r24, 0x0762	; 0x800762 <sg_u8TransmitAttempts>
    1b10:	84 31       	cpi	r24, 0x14	; 20
    1b12:	68 f4       	brcc	.+26     	; 0x1b2e <CANMOBInterrupt+0x16e>
			{
				// Retransmit now
               sg_bInRetransmit = true;  // Set flag before retry
    1b14:	81 e0       	ldi	r24, 0x01	; 1
    1b16:	80 93 5f 07 	sts	0x075F, r24	; 0x80075f <sg_bInRetransmit>
               CANSendMessageInternal( sg_eLastTXType, sg_u8LastTXData, sg_u8LastTXDataLen, true );
    1b1a:	21 e0       	ldi	r18, 0x01	; 1
    1b1c:	40 91 60 07 	lds	r20, 0x0760	; 0x800760 <sg_u8LastTXDataLen>
    1b20:	69 e3       	ldi	r22, 0x39	; 57
    1b22:	77 e0       	ldi	r23, 0x07	; 7
    1b24:	80 91 61 07 	lds	r24, 0x0761	; 0x800761 <sg_eLastTXType>
    1b28:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <CANSendMessageInternal>
    1b2c:	04 c0       	rjmp	.+8      	; 0x1b36 <CANMOBInterrupt+0x176>
			}
			else
			{
				// Retries exhausted.  Give up
				sg_bBusy = false;
    1b2e:	10 92 63 07 	sts	0x0763, r1	; 0x800763 <sg_bBusy>
                sg_bInRetransmit = false;
    1b32:	10 92 5f 07 	sts	0x075F, r1	; 0x80075f <sg_bInRetransmit>
			}
		}
	}
}
    1b36:	28 96       	adiw	r28, 0x08	; 8
    1b38:	0f b6       	in	r0, 0x3f	; 63
    1b3a:	f8 94       	cli
    1b3c:	de bf       	out	0x3e, r29	; 62
    1b3e:	0f be       	out	0x3f, r0	; 63
    1b40:	cd bf       	out	0x3d, r28	; 61
    1b42:	df 91       	pop	r29
    1b44:	cf 91       	pop	r28
    1b46:	1f 91       	pop	r17
    1b48:	0f 91       	pop	r16
    1b4a:	ff 90       	pop	r15
    1b4c:	df 90       	pop	r13
    1b4e:	cf 90       	pop	r12
    1b50:	08 95       	ret

Disassembly of section .text.__vector_18:

000021f2 <__vector_18>:

// Generic CAN interrupt handler
// Check interrrupt sources and clear them (by servicing or explicit clearing)
ISR(CAN_INT_vect, ISR_BLOCK)
{
    21f2:	1f 92       	push	r1
    21f4:	0f 92       	push	r0
    21f6:	0f b6       	in	r0, 0x3f	; 63
    21f8:	0f 92       	push	r0
    21fa:	11 24       	eor	r1, r1
    21fc:	0f 93       	push	r16
    21fe:	1f 93       	push	r17
    2200:	2f 93       	push	r18
    2202:	3f 93       	push	r19
    2204:	4f 93       	push	r20
    2206:	5f 93       	push	r21
    2208:	6f 93       	push	r22
    220a:	7f 93       	push	r23
    220c:	8f 93       	push	r24
    220e:	9f 93       	push	r25
    2210:	af 93       	push	r26
    2212:	bf 93       	push	r27
    2214:	cf 93       	push	r28
    2216:	df 93       	push	r29
    2218:	ef 93       	push	r30
    221a:	ff 93       	push	r31
	// Save state we'll need to restore
	uint8_t saved_cangie = CANGIE;
    221c:	eb ed       	ldi	r30, 0xDB	; 219
    221e:	f0 e0       	ldi	r31, 0x00	; 0
    2220:	d0 81       	ld	r29, Z
	uint8_t saved_canie2 = CANIE2;	// Temporarily disable CAN interrupts to prevent reentry
    2222:	10 91 de 00 	lds	r17, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7f00de>
	CANGIE &= (uint8_t)~(1 << ENIT);
    2226:	80 81       	ld	r24, Z
    2228:	8f 77       	andi	r24, 0x7F	; 127
    222a:	80 83       	st	Z, r24

	// Do NOT re-enable global interrupts - this causes race conditions!
	
	 uint8_t sit = CANSIT2;
    222c:	c0 91 e0 00 	lds	r28, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f00e0>
	 
	 // Most common interrupts first  *claude
	 if(sit & (1 << CANMOB_RX_IDX)) {
    2230:	c0 ff       	sbrs	r28, 0
    2232:	0c c0       	rjmp	.+24     	; 0x224c <__vector_18+0x5a>
		 CANMOBInterrupt(CANMOB_RX_IDX);
    2234:	80 e0       	ldi	r24, 0x00	; 0
    2236:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <CANMOBInterrupt>
		 CANMOBSet(CANMOB_RX_IDX, &sg_sMOBGenericReceive, NULL, 0);
    223a:	00 e0       	ldi	r16, 0x00	; 0
    223c:	20 e0       	ldi	r18, 0x00	; 0
    223e:	30 e0       	ldi	r19, 0x00	; 0
    2240:	43 e1       	ldi	r20, 0x13	; 19
    2242:	52 e0       	ldi	r21, 0x02	; 2
    2244:	60 e0       	ldi	r22, 0x00	; 0
    2246:	80 e0       	ldi	r24, 0x00	; 0
    2248:	0e 94 fd 09 	call	0x13fa	; 0x13fa <CANMOBSet>
	 }
	 
	
	// Check TX MOB
	if( sit & (1 << CANMOB_TX_IDX) )
    224c:	c1 ff       	sbrs	r28, 1
    224e:	03 c0       	rjmp	.+6      	; 0x2256 <__vector_18+0x64>
	{
		CANMOBInterrupt( CANMOB_TX_IDX );
    2250:	81 e0       	ldi	r24, 0x01	; 1
    2252:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <CANMOBInterrupt>
	}
	
	// Now the generic, non-MOB interrupts (some of which may have already been handled by the MOB handler)
	
	// Bus Off interrupt
	if( CANGIT & (1 << BOFFIT) )
    2256:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    225a:	86 ff       	sbrs	r24, 6
    225c:	03 c0       	rjmp	.+6      	; 0x2264 <__vector_18+0x72>
	{
		// Just clear it for now
		CANGIT = (1 << BOFFIT);
    225e:	80 e4       	ldi	r24, 0x40	; 64
    2260:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
	}
	
	// Frame buffer receive (burst receive interrupt)
	// This should not be used
	if( CANGIT & (1 << BXOK) )
    2264:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    2268:	84 ff       	sbrs	r24, 4
    226a:	0a c0       	rjmp	.+20     	; 0x2280 <__vector_18+0x8e>
	{
		MBASSERT(0);
    226c:	41 ef       	ldi	r20, 0xF1	; 241
    226e:	51 e0       	ldi	r21, 0x01	; 1
    2270:	60 ec       	ldi	r22, 0xC0	; 192
    2272:	71 e0       	ldi	r23, 0x01	; 1
    2274:	80 e0       	ldi	r24, 0x00	; 0
    2276:	0e 94 a4 21 	call	0x4348	; 0x4348 <PlatformAssert>
		
		// TODO: Must write the CONMOB fields of the MOB that interrupted first?
		// Just clear it for now
		CANGIT = (1 << BXOK);
    227a:	80 e1       	ldi	r24, 0x10	; 16
    227c:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
	}
	
	// Bit stuffing error on receive
	if( CANGIT & (1 << SERG) )
    2280:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    2284:	83 ff       	sbrs	r24, 3
    2286:	03 c0       	rjmp	.+6      	; 0x228e <__vector_18+0x9c>
	{
		// Just clear it for now.  Ignored.
		CANGIT = (1 << SERG);
    2288:	88 e0       	ldi	r24, 0x08	; 8
    228a:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
	}
	
	// CRC error on receive
	if( CANGIT & (1 << CERG) )
    228e:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    2292:	82 ff       	sbrs	r24, 2
    2294:	03 c0       	rjmp	.+6      	; 0x229c <__vector_18+0xaa>
	{
		// Just clear it for now.  Ignored.
		CANGIT = (1 << CERG);
    2296:	84 e0       	ldi	r24, 0x04	; 4
    2298:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
	}
	
	// Form error
	if( CANGIT & (1 << FERG) )
    229c:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    22a0:	81 ff       	sbrs	r24, 1
    22a2:	03 c0       	rjmp	.+6      	; 0x22aa <__vector_18+0xb8>
	{
		// If detected form error on transmit, could be duplicate to MOB error interrupt (see 16.8.2 - Interrupt Behavior)
		// Ignore this one
		
		// Just clear it for now.  Ignored.
		CANGIT = (1 << FERG);
    22a4:	82 e0       	ldi	r24, 0x02	; 2
    22a6:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
	}
	
	// ACK missing on transmit (nobody's listening! (or failure on transmit???))
	if( CANGIT & (1 << AERG) )
    22aa:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    22ae:	80 ff       	sbrs	r24, 0
    22b0:	13 c0       	rjmp	.+38     	; 0x22d8 <__vector_18+0xe6>
	{
		// Clear the interrupt
		CANGIT = (1 << AERG);
    22b2:	81 e0       	ldi	r24, 0x01	; 1
    22b4:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
		
		if( sg_u8TransmitAttempts < 20 )
    22b8:	80 91 62 07 	lds	r24, 0x0762	; 0x800762 <sg_u8TransmitAttempts>
    22bc:	84 31       	cpi	r24, 0x14	; 20
    22be:	50 f4       	brcc	.+20     	; 0x22d4 <__vector_18+0xe2>
		{
			// Retransmit now
			CANSendMessageInternal( sg_eLastTXType, sg_u8LastTXData, sg_u8LastTXDataLen, true );
    22c0:	21 e0       	ldi	r18, 0x01	; 1
    22c2:	40 91 60 07 	lds	r20, 0x0760	; 0x800760 <sg_u8LastTXDataLen>
    22c6:	69 e3       	ldi	r22, 0x39	; 57
    22c8:	77 e0       	ldi	r23, 0x07	; 7
    22ca:	80 91 61 07 	lds	r24, 0x0761	; 0x800761 <sg_eLastTXType>
    22ce:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <CANSendMessageInternal>
    22d2:	02 c0       	rjmp	.+4      	; 0x22d8 <__vector_18+0xe6>
		}
		else
		{
			// Retries exhausted.  Give up
			sg_bBusy = false;
    22d4:	10 92 63 07 	sts	0x0763, r1	; 0x800763 <sg_bBusy>
		}
	}

	// Reenable CAN general interrupt	
//	CANGIE |= (1 << ENIT);
    CANIE2 = saved_canie2;
    22d8:	10 93 de 00 	sts	0x00DE, r17	; 0x8000de <__TEXT_REGION_LENGTH__+0x7f00de>
    CANGIE = saved_cangie;
    22dc:	d0 93 db 00 	sts	0x00DB, r29	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f00db>
}
    22e0:	ff 91       	pop	r31
    22e2:	ef 91       	pop	r30
    22e4:	df 91       	pop	r29
    22e6:	cf 91       	pop	r28
    22e8:	bf 91       	pop	r27
    22ea:	af 91       	pop	r26
    22ec:	9f 91       	pop	r25
    22ee:	8f 91       	pop	r24
    22f0:	7f 91       	pop	r23
    22f2:	6f 91       	pop	r22
    22f4:	5f 91       	pop	r21
    22f6:	4f 91       	pop	r20
    22f8:	3f 91       	pop	r19
    22fa:	2f 91       	pop	r18
    22fc:	1f 91       	pop	r17
    22fe:	0f 91       	pop	r16
    2300:	0f 90       	pop	r0
    2302:	0f be       	out	0x3f, r0	; 63
    2304:	0f 90       	pop	r0
    2306:	1f 90       	pop	r1
    2308:	18 95       	reti

Disassembly of section .text.CANSendMessage:

000048d6 <CANSendMessage>:
					 uint8_t* pu8Data,
					 uint8_t u8DataLen )
{
	// If we're busy, kick it back so we're cooperatively multitasking
	// rather than spin locking
	if (sg_bBusy)
    48d6:	90 91 63 07 	lds	r25, 0x0763	; 0x800763 <sg_bBusy>
    48da:	91 11       	cpse	r25, r1
    48dc:	05 c0       	rjmp	.+10     	; 0x48e8 <CANSendMessage+0x12>
	{
		return(false);
	}

	CANSendMessageInternal( eType, pu8Data, u8DataLen, false );
    48de:	20 e0       	ldi	r18, 0x00	; 0
    48e0:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <CANSendMessageInternal>
	return( true );
    48e4:	81 e0       	ldi	r24, 0x01	; 1
    48e6:	08 95       	ret
{
	// If we're busy, kick it back so we're cooperatively multitasking
	// rather than spin locking
	if (sg_bBusy)
	{
		return(false);
    48e8:	80 e0       	ldi	r24, 0x00	; 0
	}

	CANSendMessageInternal( eType, pu8Data, u8DataLen, false );
	return( true );
}
    48ea:	08 95       	ret

Disassembly of section .text.CANSetRXCallback:

00004a52 <CANSetRXCallback>:

void CANSetRXCallback( void (*pfCallback)(ECANMessageType eType, uint8_t* pu8Data, uint8_t u8DataLen) )
{
	sg_pfRXCallback = pfCallback;
    4a52:	90 93 4a 07 	sts	0x074A, r25	; 0x80074a <sg_pfRXCallback+0x1>
    4a56:	80 93 49 07 	sts	0x0749, r24	; 0x800749 <sg_pfRXCallback>
    4a5a:	08 95       	ret

Disassembly of section .text.CANInit:

0000317e <CANInit>:
}

void CANInit( void )
{
    317e:	0f 93       	push	r16
    3180:	cf 93       	push	r28
	// Init clock
	// See datasheet table 16-2.
	// For 8Mhz, set CAN rate to 500 Kbps
	CANBT1 = 0x02;
    3182:	c2 e0       	ldi	r28, 0x02	; 2
    3184:	c0 93 e2 00 	sts	0x00E2, r28	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f00e2>
	CANBT2 = 0x04;
    3188:	84 e0       	ldi	r24, 0x04	; 4
    318a:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f00e3>
	CANBT3 = 0x12;
    318e:	82 e1       	ldi	r24, 0x12	; 18
    3190:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7f00e4>
	
	// Init message objects (MOBs) since there are no defaults at reset
	CANMOBSet( 0, &sg_sMOBDisabled, NULL, 0 );
    3194:	00 e0       	ldi	r16, 0x00	; 0
    3196:	20 e0       	ldi	r18, 0x00	; 0
    3198:	30 e0       	ldi	r19, 0x00	; 0
    319a:	4b e1       	ldi	r20, 0x1B	; 27
    319c:	52 e0       	ldi	r21, 0x02	; 2
    319e:	60 e0       	ldi	r22, 0x00	; 0
    31a0:	80 e0       	ldi	r24, 0x00	; 0
    31a2:	0e 94 fd 09 	call	0x13fa	; 0x13fa <CANMOBSet>
	CANMOBSet( 1, &sg_sMOBDisabled, NULL, 0 );
    31a6:	20 e0       	ldi	r18, 0x00	; 0
    31a8:	30 e0       	ldi	r19, 0x00	; 0
    31aa:	4b e1       	ldi	r20, 0x1B	; 27
    31ac:	52 e0       	ldi	r21, 0x02	; 2
    31ae:	60 e0       	ldi	r22, 0x00	; 0
    31b0:	81 e0       	ldi	r24, 0x01	; 1
    31b2:	0e 94 fd 09 	call	0x13fa	; 0x13fa <CANMOBSet>
	CANMOBSet( 2, &sg_sMOBDisabled, NULL, 0 );
    31b6:	20 e0       	ldi	r18, 0x00	; 0
    31b8:	30 e0       	ldi	r19, 0x00	; 0
    31ba:	4b e1       	ldi	r20, 0x1B	; 27
    31bc:	52 e0       	ldi	r21, 0x02	; 2
    31be:	60 e0       	ldi	r22, 0x00	; 0
    31c0:	82 e0       	ldi	r24, 0x02	; 2
    31c2:	0e 94 fd 09 	call	0x13fa	; 0x13fa <CANMOBSet>
	CANMOBSet( 3, &sg_sMOBDisabled, NULL, 0 );
    31c6:	20 e0       	ldi	r18, 0x00	; 0
    31c8:	30 e0       	ldi	r19, 0x00	; 0
    31ca:	4b e1       	ldi	r20, 0x1B	; 27
    31cc:	52 e0       	ldi	r21, 0x02	; 2
    31ce:	60 e0       	ldi	r22, 0x00	; 0
    31d0:	83 e0       	ldi	r24, 0x03	; 3
    31d2:	0e 94 fd 09 	call	0x13fa	; 0x13fa <CANMOBSet>
	CANMOBSet( 4, &sg_sMOBDisabled, NULL, 0 );
    31d6:	20 e0       	ldi	r18, 0x00	; 0
    31d8:	30 e0       	ldi	r19, 0x00	; 0
    31da:	4b e1       	ldi	r20, 0x1B	; 27
    31dc:	52 e0       	ldi	r21, 0x02	; 2
    31de:	60 e0       	ldi	r22, 0x00	; 0
    31e0:	84 e0       	ldi	r24, 0x04	; 4
    31e2:	0e 94 fd 09 	call	0x13fa	; 0x13fa <CANMOBSet>
	CANMOBSet( 5, &sg_sMOBDisabled, NULL, 0 );
    31e6:	20 e0       	ldi	r18, 0x00	; 0
    31e8:	30 e0       	ldi	r19, 0x00	; 0
    31ea:	4b e1       	ldi	r20, 0x1B	; 27
    31ec:	52 e0       	ldi	r21, 0x02	; 2
    31ee:	60 e0       	ldi	r22, 0x00	; 0
    31f0:	85 e0       	ldi	r24, 0x05	; 5
    31f2:	0e 94 fd 09 	call	0x13fa	; 0x13fa <CANMOBSet>
	
	// Setup generic RX
	CANMOBSet( CANMOB_RX_IDX, &sg_sMOBGenericReceive, NULL, 0 );
    31f6:	20 e0       	ldi	r18, 0x00	; 0
    31f8:	30 e0       	ldi	r19, 0x00	; 0
    31fa:	43 e1       	ldi	r20, 0x13	; 19
    31fc:	52 e0       	ldi	r21, 0x02	; 2
    31fe:	60 e0       	ldi	r22, 0x00	; 0
    3200:	80 e0       	ldi	r24, 0x00	; 0
    3202:	0e 94 fd 09 	call	0x13fa	; 0x13fa <CANMOBSet>
	
	// Enable general CAN interrupts
	CANGIE = (1 << ENIT) | (1 << ENRX) | (1 << ENTX) | (1 << ENERR) | (1 << ENBX) | (1 << ENERG);
    3206:	8e eb       	ldi	r24, 0xBE	; 190
    3208:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f00db>

//	CANGIE &= ~(1 << ENOVRT);  // Disable CAN timer overflow interrupt

	// Enable the bus
	CANGCON = (1 << ENASTB);
    320c:	c0 93 d8 00 	sts	0x00D8, r28	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f00d8>
	sg_bBusy = false;
    3210:	10 92 63 07 	sts	0x0763, r1	; 0x800763 <sg_bBusy>
}
    3214:	cf 91       	pop	r28
    3216:	0f 91       	pop	r16
    3218:	08 95       	ret

Disassembly of section .text.DebugOut:

000049f6 <DebugOut>:
}

#endif

void DebugOut( const char* peFormat, ... )
{
    49f6:	cf 93       	push	r28
    49f8:	df 93       	push	r29
    49fa:	cd b7       	in	r28, 0x3d	; 61
    49fc:	de b7       	in	r29, 0x3e	; 62
	
	va_end( args );	 */
	
	//DebugSerialSend( (uint8_t*)u8Buffer, strlen(u8Buffer) );
#endif
}
    49fe:	df 91       	pop	r29
    4a00:	cf 91       	pop	r28
    4a02:	08 95       	ret

Disassembly of section .text.EEPROMRead:

0000496c <EEPROMRead>:
}

uint8_t EEPROMRead(uint16_t u16Address)
{
	// Wait for any completion of writes, etc..
	while (EECR & (1 << EEWE));
    496c:	f9 99       	sbic	0x1f, 1	; 31
    496e:	fe cf       	rjmp	.-4      	; 0x496c <EEPROMRead>

	// Set address	
	EEAR = u16Address;
    4970:	92 bd       	out	0x22, r25	; 34
    4972:	81 bd       	out	0x21, r24	; 33
	
	// Start EEPROM read
	EECR |= (1 << EERE);
    4974:	8f b3       	in	r24, 0x1f	; 31
    4976:	81 60       	ori	r24, 0x01	; 1
    4978:	8f bb       	out	0x1f, r24	; 31
	
	// Return the data
	return(EEDR);
    497a:	80 b5       	in	r24, 0x20	; 32
    497c:	08 95       	ret

Disassembly of section .text.I2CBitDelay:

00004a04 <I2CBitDelay>:
#define SDA_SET_INPUT()			(I2C_PORT_DDR &= ((uint8_t) ~(1 << I2C_SDA_PIN))); SDA_HIGH()

// Delays for one I2C bit's worth of time
static void I2CBitDelay(void)
{
	Delay(10);
    4a04:	6a e0       	ldi	r22, 0x0A	; 10
    4a06:	70 e0       	ldi	r23, 0x00	; 0
    4a08:	80 e0       	ldi	r24, 0x00	; 0
    4a0a:	90 e0       	ldi	r25, 0x00	; 0
    4a0c:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <Delay>
    4a10:	08 95       	ret

Disassembly of section .text.I2CStart:

000042f0 <I2CStart>:

// Send an I2C start sequence and quantize foreground code to the overflow
// timer
void I2CStart(void)
{
	SDA_SET_OUTPUT();
    42f0:	8a b1       	in	r24, 0x0a	; 10
    42f2:	82 60       	ori	r24, 0x02	; 2
    42f4:	8a b9       	out	0x0a, r24	; 10
	SDA_HIGH();
    42f6:	8b b1       	in	r24, 0x0b	; 11
    42f8:	82 60       	ori	r24, 0x02	; 2
    42fa:	8b b9       	out	0x0b, r24	; 11
	SCL_HIGH();
    42fc:	8b b1       	in	r24, 0x0b	; 11
    42fe:	81 60       	ori	r24, 0x01	; 1
    4300:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    4302:	0e 94 02 25 	call	0x4a04	; 0x4a04 <I2CBitDelay>
	SDA_LOW();
    4306:	8b b1       	in	r24, 0x0b	; 11
    4308:	8d 7f       	andi	r24, 0xFD	; 253
    430a:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    430c:	0e 94 02 25 	call	0x4a04	; 0x4a04 <I2CBitDelay>
	SCL_LOW();
    4310:	8b b1       	in	r24, 0x0b	; 11
    4312:	8e 7f       	andi	r24, 0xFE	; 254
    4314:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    4316:	0e 94 02 25 	call	0x4a04	; 0x4a04 <I2CBitDelay>
    431a:	08 95       	ret

Disassembly of section .text.I2CStop:

000044be <I2CStop>:
}

// Send an I2C stop sequence
void I2CStop(void)
{
	SDA_LOW();
    44be:	8b b1       	in	r24, 0x0b	; 11
    44c0:	8d 7f       	andi	r24, 0xFD	; 253
    44c2:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    44c4:	0e 94 02 25 	call	0x4a04	; 0x4a04 <I2CBitDelay>
	SCL_HIGH();
    44c8:	8b b1       	in	r24, 0x0b	; 11
    44ca:	81 60       	ori	r24, 0x01	; 1
    44cc:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    44ce:	0e 94 02 25 	call	0x4a04	; 0x4a04 <I2CBitDelay>
	SDA_SET_INPUT();
    44d2:	8a b1       	in	r24, 0x0a	; 10
    44d4:	8d 7f       	andi	r24, 0xFD	; 253
    44d6:	8a b9       	out	0x0a, r24	; 10
    44d8:	8b b1       	in	r24, 0x0b	; 11
    44da:	82 60       	ori	r24, 0x02	; 2
    44dc:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    44de:	0e 94 02 25 	call	0x4a04	; 0x4a04 <I2CBitDelay>
    44e2:	08 95       	ret

Disassembly of section .text.I2CUnstick:

00004008 <I2CUnstick>:
}

// Unsticks an I2C bus
void I2CUnstick(void)
{
    4008:	cf 93       	push	r28
	uint8_t u8UnstickBits = 64;

	SCL_SET_OUTPUT();
    400a:	8a b1       	in	r24, 0x0a	; 10
    400c:	81 60       	ori	r24, 0x01	; 1
    400e:	8a b9       	out	0x0a, r24	; 10
	SDA_SET_OUTPUT();
    4010:	8a b1       	in	r24, 0x0a	; 10
    4012:	82 60       	ori	r24, 0x02	; 2
    4014:	8a b9       	out	0x0a, r24	; 10
}

// Unsticks an I2C bus
void I2CUnstick(void)
{
	uint8_t u8UnstickBits = 64;
    4016:	c0 e4       	ldi	r28, 0x40	; 64

	SCL_SET_OUTPUT();
	SDA_SET_OUTPUT();
	
	while (u8UnstickBits)
    4018:	11 c0       	rjmp	.+34     	; 0x403c <I2CUnstick+0x34>
	{
		SCL_LOW();
    401a:	8b b1       	in	r24, 0x0b	; 11
    401c:	8e 7f       	andi	r24, 0xFE	; 254
    401e:	8b b9       	out	0x0b, r24	; 11
		SDA_LOW();
    4020:	8b b1       	in	r24, 0x0b	; 11
    4022:	8d 7f       	andi	r24, 0xFD	; 253
    4024:	8b b9       	out	0x0b, r24	; 11
		I2CBitDelay();
    4026:	0e 94 02 25 	call	0x4a04	; 0x4a04 <I2CBitDelay>
		SCL_HIGH();
    402a:	8b b1       	in	r24, 0x0b	; 11
    402c:	81 60       	ori	r24, 0x01	; 1
    402e:	8b b9       	out	0x0b, r24	; 11
		SDA_HIGH();
    4030:	8b b1       	in	r24, 0x0b	; 11
    4032:	82 60       	ori	r24, 0x02	; 2
    4034:	8b b9       	out	0x0b, r24	; 11
		I2CBitDelay();
    4036:	0e 94 02 25 	call	0x4a04	; 0x4a04 <I2CBitDelay>
		u8UnstickBits--;
    403a:	c1 50       	subi	r28, 0x01	; 1
	uint8_t u8UnstickBits = 64;

	SCL_SET_OUTPUT();
	SDA_SET_OUTPUT();
	
	while (u8UnstickBits)
    403c:	c1 11       	cpse	r28, r1
    403e:	ed cf       	rjmp	.-38     	; 0x401a <I2CUnstick+0x12>
		SCL_HIGH();
		SDA_HIGH();
		I2CBitDelay();
		u8UnstickBits--;
	}
}
    4040:	cf 91       	pop	r28
    4042:	08 95       	ret

Disassembly of section .text.I2CTxByte:

000039a6 <I2CTxByte>:

// Sends a single I2C byte. Returns false if the byte is not acked, or true if it is.
bool I2CTxByte(uint8_t u8Byte)
{
    39a6:	cf 93       	push	r28
    39a8:	df 93       	push	r29
    39aa:	d8 2f       	mov	r29, r24
	uint8_t u8Length = 8;			// 8 Bits to send
	bool bAck = false;

	SDA_SET_OUTPUT();
    39ac:	8a b1       	in	r24, 0x0a	; 10
    39ae:	82 60       	ori	r24, 0x02	; 2
    39b0:	8a b9       	out	0x0a, r24	; 10
}

// Sends a single I2C byte. Returns false if the byte is not acked, or true if it is.
bool I2CTxByte(uint8_t u8Byte)
{
	uint8_t u8Length = 8;			// 8 Bits to send
    39b2:	c8 e0       	ldi	r28, 0x08	; 8
	bool bAck = false;

	SDA_SET_OUTPUT();

	while (u8Length)
    39b4:	15 c0       	rjmp	.+42     	; 0x39e0 <I2CTxByte+0x3a>
	{
		if (u8Byte & 0x80)
    39b6:	dd 23       	and	r29, r29
    39b8:	24 f4       	brge	.+8      	; 0x39c2 <I2CTxByte+0x1c>
		{
			SDA_HIGH();
    39ba:	8b b1       	in	r24, 0x0b	; 11
    39bc:	82 60       	ori	r24, 0x02	; 2
    39be:	8b b9       	out	0x0b, r24	; 11
    39c0:	03 c0       	rjmp	.+6      	; 0x39c8 <I2CTxByte+0x22>
		}
		else
		{
			SDA_LOW();
    39c2:	8b b1       	in	r24, 0x0b	; 11
    39c4:	8d 7f       	andi	r24, 0xFD	; 253
    39c6:	8b b9       	out	0x0b, r24	; 11
		}
		
		// Drive SCL high
		SCL_HIGH();
    39c8:	8b b1       	in	r24, 0x0b	; 11
    39ca:	81 60       	ori	r24, 0x01	; 1
    39cc:	8b b9       	out	0x0b, r24	; 11
		
		I2CBitDelay();
    39ce:	0e 94 02 25 	call	0x4a04	; 0x4a04 <I2CBitDelay>
		
		// Ensure SCL is low
		SCL_LOW();
    39d2:	8b b1       	in	r24, 0x0b	; 11
    39d4:	8e 7f       	andi	r24, 0xFE	; 254
    39d6:	8b b9       	out	0x0b, r24	; 11
	
		// SDA Is now set. Delay.
		I2CBitDelay();
    39d8:	0e 94 02 25 	call	0x4a04	; 0x4a04 <I2CBitDelay>
		
		// Next bit
		u8Byte <<= 1;	
    39dc:	dd 0f       	add	r29, r29
		u8Length--;
    39de:	c1 50       	subi	r28, 0x01	; 1
	uint8_t u8Length = 8;			// 8 Bits to send
	bool bAck = false;

	SDA_SET_OUTPUT();

	while (u8Length)
    39e0:	c1 11       	cpse	r28, r1
    39e2:	e9 cf       	rjmp	.-46     	; 0x39b6 <I2CTxByte+0x10>
		// Next bit
		u8Byte <<= 1;	
		u8Length--;
	}
	
	SDA_SET_INPUT();
    39e4:	8a b1       	in	r24, 0x0a	; 10
    39e6:	8d 7f       	andi	r24, 0xFD	; 253
    39e8:	8a b9       	out	0x0a, r24	; 10
    39ea:	8b b1       	in	r24, 0x0b	; 11
    39ec:	82 60       	ori	r24, 0x02	; 2
    39ee:	8b b9       	out	0x0b, r24	; 11
	SCL_HIGH();
    39f0:	8b b1       	in	r24, 0x0b	; 11
    39f2:	81 60       	ori	r24, 0x01	; 1
    39f4:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    39f6:	0e 94 02 25 	call	0x4a04	; 0x4a04 <I2CBitDelay>
	
	// See if the byte was acknowledged
	if (SDA_READ())
    39fa:	49 9b       	sbis	0x09, 1	; 9
	{
		bAck = false;
	}
	else
	{
		bAck = true;
    39fc:	c1 e0       	ldi	r28, 0x01	; 1
	}
	
	SCL_LOW();
    39fe:	8b b1       	in	r24, 0x0b	; 11
    3a00:	8e 7f       	andi	r24, 0xFE	; 254
    3a02:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    3a04:	0e 94 02 25 	call	0x4a04	; 0x4a04 <I2CBitDelay>
	return(bAck);
}
    3a08:	8c 2f       	mov	r24, r28
    3a0a:	df 91       	pop	r29
    3a0c:	cf 91       	pop	r28
    3a0e:	08 95       	ret

Disassembly of section .text.I2CRxByte:

000037cc <I2CRxByte>:

// Receives a single I2C byte and will optionally generate an ack at the end
uint8_t I2CRxByte(bool bAck)
{
    37cc:	1f 93       	push	r17
    37ce:	cf 93       	push	r28
    37d0:	df 93       	push	r29
    37d2:	18 2f       	mov	r17, r24
	uint8_t u8Data = 0;
	uint8_t u8Count = 8;
	
	SDA_SET_INPUT();
    37d4:	8a b1       	in	r24, 0x0a	; 10
    37d6:	8d 7f       	andi	r24, 0xFD	; 253
    37d8:	8a b9       	out	0x0a, r24	; 10
    37da:	8b b1       	in	r24, 0x0b	; 11
    37dc:	82 60       	ori	r24, 0x02	; 2
    37de:	8b b9       	out	0x0b, r24	; 11

// Receives a single I2C byte and will optionally generate an ack at the end
uint8_t I2CRxByte(bool bAck)
{
	uint8_t u8Data = 0;
	uint8_t u8Count = 8;
    37e0:	c8 e0       	ldi	r28, 0x08	; 8
}

// Receives a single I2C byte and will optionally generate an ack at the end
uint8_t I2CRxByte(bool bAck)
{
	uint8_t u8Data = 0;
    37e2:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t u8Count = 8;
	
	SDA_SET_INPUT();
	
	// Consume all 8 data bits
	while (u8Count)
    37e4:	0e c0       	rjmp	.+28     	; 0x3802 <I2CRxByte+0x36>
	{
		u8Data <<= 1;
    37e6:	dd 0f       	add	r29, r29

		SCL_HIGH();
    37e8:	8b b1       	in	r24, 0x0b	; 11
    37ea:	81 60       	ori	r24, 0x01	; 1
    37ec:	8b b9       	out	0x0b, r24	; 11
		I2CBitDelay();
    37ee:	0e 94 02 25 	call	0x4a04	; 0x4a04 <I2CBitDelay>
			
		if (SDA_READ())
    37f2:	49 99       	sbic	0x09, 1	; 9
		{
			u8Data |= 1;
    37f4:	d1 60       	ori	r29, 0x01	; 1
		}
		
		SCL_LOW();
    37f6:	8b b1       	in	r24, 0x0b	; 11
    37f8:	8e 7f       	andi	r24, 0xFE	; 254
    37fa:	8b b9       	out	0x0b, r24	; 11
		I2CBitDelay();
    37fc:	0e 94 02 25 	call	0x4a04	; 0x4a04 <I2CBitDelay>
		u8Count--;
    3800:	c1 50       	subi	r28, 0x01	; 1
	uint8_t u8Count = 8;
	
	SDA_SET_INPUT();
	
	// Consume all 8 data bits
	while (u8Count)
    3802:	c1 11       	cpse	r28, r1
    3804:	f0 cf       	rjmp	.-32     	; 0x37e6 <I2CRxByte+0x1a>
		I2CBitDelay();
		u8Count--;
	}

	// See if we acknowledge this
	SDA_SET_OUTPUT();
    3806:	8a b1       	in	r24, 0x0a	; 10
    3808:	82 60       	ori	r24, 0x02	; 2
    380a:	8a b9       	out	0x0a, r24	; 10
	if (bAck)
    380c:	11 23       	and	r17, r17
    380e:	21 f0       	breq	.+8      	; 0x3818 <I2CRxByte+0x4c>
	{
		SDA_LOW();
    3810:	8b b1       	in	r24, 0x0b	; 11
    3812:	8d 7f       	andi	r24, 0xFD	; 253
    3814:	8b b9       	out	0x0b, r24	; 11
    3816:	03 c0       	rjmp	.+6      	; 0x381e <I2CRxByte+0x52>
	}
	else
	{
		SDA_HIGH();
    3818:	8b b1       	in	r24, 0x0b	; 11
    381a:	82 60       	ori	r24, 0x02	; 2
    381c:	8b b9       	out	0x0b, r24	; 11
	}
	
	I2CBitDelay();
    381e:	0e 94 02 25 	call	0x4a04	; 0x4a04 <I2CBitDelay>
	SCL_HIGH();
    3822:	8b b1       	in	r24, 0x0b	; 11
    3824:	81 60       	ori	r24, 0x01	; 1
    3826:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    3828:	0e 94 02 25 	call	0x4a04	; 0x4a04 <I2CBitDelay>
	SCL_LOW();
    382c:	8b b1       	in	r24, 0x0b	; 11
    382e:	8e 7f       	andi	r24, 0xFE	; 254
    3830:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    3832:	0e 94 02 25 	call	0x4a04	; 0x4a04 <I2CBitDelay>
	SDA_LOW();
    3836:	8b b1       	in	r24, 0x0b	; 11
    3838:	8d 7f       	andi	r24, 0xFD	; 253
    383a:	8b b9       	out	0x0b, r24	; 11

	return(u8Data);	
}
    383c:	8d 2f       	mov	r24, r29
    383e:	df 91       	pop	r29
    3840:	cf 91       	pop	r28
    3842:	1f 91       	pop	r17
    3844:	08 95       	ret

Disassembly of section .text.I2CSetup:

0000431c <I2CSetup>:
// Prepares the SCL/SDA pins for I2C operation and returns when the CPU is
// quantized to the timer (for consistent bit alignment)
void I2CSetup(void)
{
	// Deassert SCL and SDA
	SCL_HIGH();
    431c:	8b b1       	in	r24, 0x0b	; 11
    431e:	81 60       	ori	r24, 0x01	; 1
    4320:	8b b9       	out	0x0b, r24	; 11
	SDA_HIGH();
    4322:	8b b1       	in	r24, 0x0b	; 11
    4324:	82 60       	ori	r24, 0x02	; 2
    4326:	8b b9       	out	0x0b, r24	; 11

	// Set SCL and SDA lines as push/pull output drives
	SCL_SET_OUTPUT();
    4328:	8a b1       	in	r24, 0x0a	; 10
    432a:	81 60       	ori	r24, 0x01	; 1
    432c:	8a b9       	out	0x0a, r24	; 10
	
	// Turn on SDA, set as an input
	SDA_SET_INPUT();
    432e:	8a b1       	in	r24, 0x0a	; 10
    4330:	8d 7f       	andi	r24, 0xFD	; 253
    4332:	8a b9       	out	0x0a, r24	; 10
    4334:	8b b1       	in	r24, 0x0b	; 11
    4336:	82 60       	ori	r24, 0x02	; 2
    4338:	8b b9       	out	0x0b, r24	; 11
	
	Delay(20);
    433a:	64 e1       	ldi	r22, 0x14	; 20
    433c:	70 e0       	ldi	r23, 0x00	; 0
    433e:	80 e0       	ldi	r24, 0x00	; 0
    4340:	90 e0       	ldi	r25, 0x00	; 0
    4342:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <Delay>
    4346:	08 95       	ret

Disassembly of section .text.I2CStartTransaction:

000043f6 <I2CStartTransaction>:

// Sets up the I2C pins, sends slave address/read/write byte, and waits for acknowledgment.
// Returns false if no device is responding.
bool I2CStartTransaction(uint8_t u8SlaveAddress,
						 bool bRead)
{
    43f6:	cf 93       	push	r28
    43f8:	df 93       	push	r29
    43fa:	c8 2f       	mov	r28, r24
    43fc:	d6 2f       	mov	r29, r22
	// Set up the pins for I2C operation
	I2CSetup();
    43fe:	0e 94 8e 21 	call	0x431c	; 0x431c <I2CSetup>
	
	// I2C Start condition
	I2CStart();
    4402:	0e 94 78 21 	call	0x42f0	; 0x42f0 <I2CStart>

	// If it's a read operation, clear the lower bit
	if (bRead)
    4406:	dd 23       	and	r29, r29
    4408:	19 f0       	breq	.+6      	; 0x4410 <I2CStartTransaction+0x1a>
	{
		u8SlaveAddress |= 1;
    440a:	8c 2f       	mov	r24, r28
    440c:	81 60       	ori	r24, 0x01	; 1
    440e:	02 c0       	rjmp	.+4      	; 0x4414 <I2CStartTransaction+0x1e>
	}
	else
	{
		// Otherwise set it
		u8SlaveAddress &= (uint8_t) (~1);
    4410:	8c 2f       	mov	r24, r28
    4412:	8e 7f       	andi	r24, 0xFE	; 254
	}
	
	// Now send out the slave address + the read/write bit
	return(I2CTxByte(u8SlaveAddress));
    4414:	0e 94 d3 1c 	call	0x39a6	; 0x39a6 <I2CTxByte>
}
    4418:	df 91       	pop	r29
    441a:	cf 91       	pop	r28
    441c:	08 95       	ret

Disassembly of section .text.CellCountExpectedSet:

00002be2 <CellCountExpectedSet>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    2be2:	cf 92       	push	r12
    2be4:	df 92       	push	r13
    2be6:	ef 92       	push	r14
    2be8:	ff 92       	push	r15
    2bea:	8f 35       	cpi	r24, 0x5F	; 95
    2bec:	08 f0       	brcs	.+2      	; 0x2bf0 <CellCountExpectedSet+0xe>
    2bee:	8e e5       	ldi	r24, 0x5E	; 94
    2bf0:	ec e0       	ldi	r30, 0x0C	; 12
    2bf2:	f1 e0       	ldi	r31, 0x01	; 1
    2bf4:	81 8b       	std	Z+17, r24	; 0x11
    2bf6:	c8 2e       	mov	r12, r24
    2bf8:	d1 2c       	mov	r13, r1
    2bfa:	e1 2c       	mov	r14, r1
    2bfc:	f1 2c       	mov	r15, r1
    2bfe:	aa ec       	ldi	r26, 0xCA	; 202
    2c00:	b8 e0       	ldi	r27, 0x08	; 8
    2c02:	a7 01       	movw	r20, r14
    2c04:	96 01       	movw	r18, r12
    2c06:	0e 94 8c 24 	call	0x4918	; 0x4918 <__muluhisi3>
    2c0a:	61 8f       	std	Z+25, r22	; 0x19
    2c0c:	72 8f       	std	Z+26, r23	; 0x1a
    2c0e:	83 8f       	std	Z+27, r24	; 0x1b
    2c10:	94 8f       	std	Z+28, r25	; 0x1c
    2c12:	a4 e9       	ldi	r26, 0x94	; 148
    2c14:	b1 e1       	ldi	r27, 0x11	; 17
    2c16:	0e 94 8c 24 	call	0x4918	; 0x4918 <__muluhisi3>
    2c1a:	65 8f       	std	Z+29, r22	; 0x1d
    2c1c:	76 8f       	std	Z+30, r23	; 0x1e
    2c1e:	87 8f       	std	Z+31, r24	; 0x1f
    2c20:	90 a3       	std	Z+32, r25	; 0x20
    2c22:	85 8d       	ldd	r24, Z+29	; 0x1d
    2c24:	96 8d       	ldd	r25, Z+30	; 0x1e
    2c26:	a7 8d       	ldd	r26, Z+31	; 0x1f
    2c28:	b0 a1       	ldd	r27, Z+32	; 0x20
    2c2a:	41 8d       	ldd	r20, Z+25	; 0x19
    2c2c:	52 8d       	ldd	r21, Z+26	; 0x1a
    2c2e:	63 8d       	ldd	r22, Z+27	; 0x1b
    2c30:	74 8d       	ldd	r23, Z+28	; 0x1c
    2c32:	84 1b       	sub	r24, r20
    2c34:	95 0b       	sbc	r25, r21
    2c36:	a6 0b       	sbc	r26, r22
    2c38:	b7 0b       	sbc	r27, r23
    2c3a:	88 0f       	add	r24, r24
    2c3c:	99 1f       	adc	r25, r25
    2c3e:	aa 1f       	adc	r26, r26
    2c40:	bb 1f       	adc	r27, r27
    2c42:	88 0f       	add	r24, r24
    2c44:	99 1f       	adc	r25, r25
    2c46:	aa 1f       	adc	r26, r26
    2c48:	bb 1f       	adc	r27, r27
    2c4a:	88 0f       	add	r24, r24
    2c4c:	99 1f       	adc	r25, r25
    2c4e:	aa 1f       	adc	r26, r26
    2c50:	bb 1f       	adc	r27, r27
    2c52:	88 0f       	add	r24, r24
    2c54:	99 1f       	adc	r25, r25
    2c56:	aa 1f       	adc	r26, r26
    2c58:	bb 1f       	adc	r27, r27
    2c5a:	88 0f       	add	r24, r24
    2c5c:	99 1f       	adc	r25, r25
    2c5e:	aa 1f       	adc	r26, r26
    2c60:	bb 1f       	adc	r27, r27
    2c62:	88 0f       	add	r24, r24
    2c64:	99 1f       	adc	r25, r25
    2c66:	aa 1f       	adc	r26, r26
    2c68:	bb 1f       	adc	r27, r27
    2c6a:	88 0f       	add	r24, r24
    2c6c:	99 1f       	adc	r25, r25
    2c6e:	aa 1f       	adc	r26, r26
    2c70:	bb 1f       	adc	r27, r27
    2c72:	ac 01       	movw	r20, r24
    2c74:	bd 01       	movw	r22, r26
    2c76:	bb 23       	and	r27, r27
    2c78:	24 f4       	brge	.+8      	; 0x2c82 <CellCountExpectedSet+0xa0>
    2c7a:	41 50       	subi	r20, 0x01	; 1
    2c7c:	5c 4f       	sbci	r21, 0xFC	; 252
    2c7e:	6f 4f       	sbci	r22, 0xFF	; 255
    2c80:	7f 4f       	sbci	r23, 0xFF	; 255
    2c82:	03 2e       	mov	r0, r19
    2c84:	3a e0       	ldi	r19, 0x0A	; 10
    2c86:	75 95       	asr	r23
    2c88:	67 95       	ror	r22
    2c8a:	57 95       	ror	r21
    2c8c:	47 95       	ror	r20
    2c8e:	3a 95       	dec	r19
    2c90:	d1 f7       	brne	.-12     	; 0x2c86 <CellCountExpectedSet+0xa4>
    2c92:	30 2d       	mov	r19, r0
    2c94:	50 93 2e 01 	sts	0x012E, r21	; 0x80012e <sg_sFrame+0x22>
    2c98:	40 93 2d 01 	sts	0x012D, r20	; 0x80012d <sg_sFrame+0x21>
    2c9c:	ff 90       	pop	r15
    2c9e:	ef 90       	pop	r14
    2ca0:	df 90       	pop	r13
    2ca2:	cf 90       	pop	r12
    2ca4:	08 95       	ret

Disassembly of section .text.SendModuleControllerStatus:

00004a3a <SendModuleControllerStatus>:

static uint8_t sg_u8ControllerStatusMsgCount = 0;

static void SendModuleControllerStatus(void)
{
	sg_bSendModuleControllerStatus = true;
    4a3a:	81 e0       	ldi	r24, 0x01	; 1
    4a3c:	80 93 16 03 	sts	0x0316, r24	; 0x800316 <sg_bSendModuleControllerStatus>
	sg_u8ControllerStatusMsgCount = 0;
    4a40:	10 92 69 07 	sts	0x0769, r1	; 0x800769 <sg_u8ControllerStatusMsgCount>
    4a44:	08 95       	ret

Disassembly of section .text.ModuleControllerStateSet:

00004a5c <ModuleControllerStateSet>:
	MBASSERT(0);
}

static void ModuleControllerStateSet( EModuleControllerState eNext )
{
	if(eNext < EMODSTATE_COUNT)
    4a5c:	84 30       	cpi	r24, 0x04	; 4
    4a5e:	10 f4       	brcc	.+4      	; 0x4a64 <ModuleControllerStateSet+0x8>
	{
		sg_eModuleControllerStateTarget = eNext;
    4a60:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <sg_eModuleControllerStateTarget>
    4a64:	08 95       	ret

Disassembly of section .text.ModuleControllerStateSetMax:

000048ec <ModuleControllerStateSetMax>:



static void ModuleControllerStateSetMax( EModuleControllerState eNext )
{
	if(eNext < EMODSTATE_COUNT)
    48ec:	84 30       	cpi	r24, 0x04	; 4
    48ee:	40 f4       	brcc	.+16     	; 0x4900 <ModuleControllerStateSetMax+0x14>
	{
		sg_eModuleControllerStateMax = eNext;
    48f0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <sg_eModuleControllerStateMax>
		if (sg_eModuleControllerStateCurrent > eNext) // we are in a higher state than allowed
    48f4:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <sg_eModuleControllerStateCurrent>
    48f8:	89 17       	cp	r24, r25
    48fa:	10 f4       	brcc	.+4      	; 0x4900 <ModuleControllerStateSetMax+0x14>
		{
			sg_eModuleControllerStateTarget = eNext;
    48fc:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <sg_eModuleControllerStateTarget>
    4900:	08 95       	ret

Disassembly of section .text.Check5VLoss:

0000488e <Check5VLoss>:
}

// Checks for 5V loss
static void Check5VLoss(uint8_t u8NewState)
{
	if( u8NewState & (1 << PIN_5V_DET) )
    488e:	86 fd       	sbrc	r24, 6
    4890:	09 c0       	rjmp	.+18     	; 0x48a4 <Check5VLoss+0x16>
		// Not asserted
	}
	else
	{
		// 5V detect is low
		FET_EN_DEASSERT();
    4892:	88 b1       	in	r24, 0x08	; 8
    4894:	8f 7e       	andi	r24, 0xEF	; 239
    4896:	88 b9       	out	0x08, r24	; 8
		RELAY_EN_DEASSERT();
    4898:	8e b1       	in	r24, 0x0e	; 14
    489a:	8d 7f       	andi	r24, 0xFD	; 253
    489c:	8e b9       	out	0x0e, r24	; 14
		ModuleControllerStateSet( EMODSTATE_OFF );
    489e:	80 e0       	ldi	r24, 0x00	; 0
    48a0:	0e 94 2e 25 	call	0x4a5c	; 0x4a5c <ModuleControllerStateSet>
    48a4:	08 95       	ret

Disassembly of section .text.CellDataConvertVoltage:

00003b42 <CellDataConvertVoltage>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    3b42:	fb 01       	movw	r30, r22
    3b44:	93 70       	andi	r25, 0x03	; 3
    3b46:	9c 01       	movw	r18, r24
    3b48:	20 5f       	subi	r18, 0xF0	; 240
    3b4a:	31 40       	sbci	r19, 0x01	; 1
    3b4c:	21 31       	cpi	r18, 0x11	; 17
    3b4e:	32 40       	sbci	r19, 0x02	; 2
    3b50:	00 f5       	brcc	.+64     	; 0x3b92 <CellDataConvertVoltage+0x50>
    3b52:	dc 01       	movw	r26, r24
    3b54:	2b ed       	ldi	r18, 0xDB	; 219
    3b56:	36 ea       	ldi	r19, 0xA6	; 166
    3b58:	43 e2       	ldi	r20, 0x23	; 35
    3b5a:	50 e0       	ldi	r21, 0x00	; 0
    3b5c:	0e 94 8c 24 	call	0x4918	; 0x4918 <__muluhisi3>
    3b60:	dc 01       	movw	r26, r24
    3b62:	cb 01       	movw	r24, r22
    3b64:	07 2e       	mov	r0, r23
    3b66:	7a e0       	ldi	r23, 0x0A	; 10
    3b68:	b6 95       	lsr	r27
    3b6a:	a7 95       	ror	r26
    3b6c:	97 95       	ror	r25
    3b6e:	87 95       	ror	r24
    3b70:	7a 95       	dec	r23
    3b72:	d1 f7       	brne	.-12     	; 0x3b68 <CellDataConvertVoltage+0x26>
    3b74:	70 2d       	mov	r23, r0
    3b76:	9f 5f       	subi	r25, 0xFF	; 255
    3b78:	af 4f       	sbci	r26, 0xFF	; 255
    3b7a:	bf 4f       	sbci	r27, 0xFF	; 255
    3b7c:	07 2e       	mov	r0, r23
    3b7e:	79 e0       	ldi	r23, 0x09	; 9
    3b80:	b6 95       	lsr	r27
    3b82:	a7 95       	ror	r26
    3b84:	97 95       	ror	r25
    3b86:	87 95       	ror	r24
    3b88:	7a 95       	dec	r23
    3b8a:	d1 f7       	brne	.-12     	; 0x3b80 <CellDataConvertVoltage+0x3e>
    3b8c:	70 2d       	mov	r23, r0
    3b8e:	21 e0       	ldi	r18, 0x01	; 1
    3b90:	03 c0       	rjmp	.+6      	; 0x3b98 <CellDataConvertVoltage+0x56>
    3b92:	20 e0       	ldi	r18, 0x00	; 0
    3b94:	80 e0       	ldi	r24, 0x00	; 0
    3b96:	90 e0       	ldi	r25, 0x00	; 0
    3b98:	30 97       	sbiw	r30, 0x00	; 0
    3b9a:	11 f0       	breq	.+4      	; 0x3ba0 <CellDataConvertVoltage+0x5e>
    3b9c:	91 83       	std	Z+1, r25	; 0x01
    3b9e:	80 83       	st	Z, r24
    3ba0:	82 2f       	mov	r24, r18
    3ba2:	08 95       	ret

Disassembly of section .text.CellDataConvertTemperature:

00003846 <CellDataConvertTemperature>:
    3846:	8f 3f       	cpi	r24, 0xFF	; 255
    3848:	2f ef       	ldi	r18, 0xFF	; 255
    384a:	92 07       	cpc	r25, r18
    384c:	61 f1       	breq	.+88     	; 0x38a6 <CellDataConvertTemperature+0x60>
    384e:	28 2f       	mov	r18, r24
    3850:	2f 70       	andi	r18, 0x0F	; 15
    3852:	94 ff       	sbrs	r25, 4
    3854:	02 c0       	rjmp	.+4      	; 0x385a <CellDataConvertTemperature+0x14>
    3856:	90 6f       	ori	r25, 0xF0	; 240
    3858:	01 c0       	rjmp	.+2      	; 0x385c <CellDataConvertTemperature+0x16>
    385a:	9f 77       	andi	r25, 0x7F	; 127
    385c:	95 95       	asr	r25
    385e:	87 95       	ror	r24
    3860:	95 95       	asr	r25
    3862:	87 95       	ror	r24
    3864:	95 95       	asr	r25
    3866:	87 95       	ror	r24
    3868:	95 95       	asr	r25
    386a:	87 95       	ror	r24
    386c:	ac 01       	movw	r20, r24
    386e:	4c 5e       	subi	r20, 0xEC	; 236
    3870:	5f 4f       	sbci	r21, 0xFF	; 255
    3872:	4d 38       	cpi	r20, 0x8D	; 141
    3874:	51 05       	cpc	r21, r1
    3876:	c8 f4       	brcc	.+50     	; 0x38aa <CellDataConvertTemperature+0x64>
    3878:	34 e6       	ldi	r19, 0x64	; 100
    387a:	38 9f       	mul	r19, r24
    387c:	d0 01       	movw	r26, r0
    387e:	39 9f       	mul	r19, r25
    3880:	b0 0d       	add	r27, r0
    3882:	11 24       	eor	r1, r1
    3884:	30 e0       	ldi	r19, 0x00	; 0
    3886:	40 e0       	ldi	r20, 0x00	; 0
    3888:	22 58       	subi	r18, 0x82	; 130
    388a:	3e 4f       	sbci	r19, 0xFE	; 254
    388c:	4f 4f       	sbci	r20, 0xFF	; 255
    388e:	f9 01       	movw	r30, r18
    3890:	84 91       	lpm	r24, Z
    3892:	47 fd       	sbrc	r20, 7
    3894:	80 81       	ld	r24, Z
    3896:	fd 01       	movw	r30, r26
    3898:	e8 0f       	add	r30, r24
    389a:	f1 1d       	adc	r31, r1
    389c:	cf 01       	movw	r24, r30
    389e:	81 56       	subi	r24, 0x61	; 97
    38a0:	9a 4e       	sbci	r25, 0xEA	; 234
    38a2:	21 e0       	ldi	r18, 0x01	; 1
    38a4:	05 c0       	rjmp	.+10     	; 0x38b0 <CellDataConvertTemperature+0x6a>
    38a6:	20 e0       	ldi	r18, 0x00	; 0
    38a8:	03 c0       	rjmp	.+6      	; 0x38b0 <CellDataConvertTemperature+0x6a>
    38aa:	8f ef       	ldi	r24, 0xFF	; 255
    38ac:	9f ef       	ldi	r25, 0xFF	; 255
    38ae:	20 e0       	ldi	r18, 0x00	; 0
    38b0:	61 15       	cp	r22, r1
    38b2:	71 05       	cpc	r23, r1
    38b4:	19 f0       	breq	.+6      	; 0x38bc <CellDataConvertTemperature+0x76>
    38b6:	fb 01       	movw	r30, r22
    38b8:	91 83       	std	Z+1, r25	; 0x01
    38ba:	80 83       	st	Z, r24
    38bc:	82 2f       	mov	r24, r18
    38be:	08 95       	ret

Disassembly of section .text.CellDataConvert:

0000441e <CellDataConvert>:

static void CellDataConvert( CellData* pCellData,
							uint16_t* pu16Voltage,
							int16_t* ps16Temperature
							)
{
    441e:	0f 93       	push	r16
    4420:	1f 93       	push	r17
    4422:	cf 93       	push	r28
    4424:	df 93       	push	r29
    4426:	ec 01       	movw	r28, r24
    4428:	8a 01       	movw	r16, r20
	if (!CellDataConvertVoltage((*pCellData).voltage, pu16Voltage))
    442a:	88 81       	ld	r24, Y
    442c:	99 81       	ldd	r25, Y+1	; 0x01
    442e:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <CellDataConvertVoltage>
	{
		// add error handling here if needed
	}
	if (!CellDataConvertTemperature((*pCellData).temperature, ps16Temperature))
    4432:	b8 01       	movw	r22, r16
    4434:	8a 81       	ldd	r24, Y+2	; 0x02
    4436:	9b 81       	ldd	r25, Y+3	; 0x03
    4438:	0e 94 23 1c 	call	0x3846	; 0x3846 <CellDataConvertTemperature>
	{
		// add error handling here if needed
	}
	
}
    443c:	df 91       	pop	r29
    443e:	cf 91       	pop	r28
    4440:	1f 91       	pop	r17
    4442:	0f 91       	pop	r16
    4444:	08 95       	ret

Disassembly of section .text.ModuleCurrentConvertReadings:

0000230a <ModuleCurrentConvertReadings>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    230a:	a0 91 51 01 	lds	r26, 0x0151	; 0x800151 <sg_sFrame+0x45>
    230e:	b0 91 52 01 	lds	r27, 0x0152	; 0x800152 <sg_sFrame+0x46>
    2312:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <sg_sFrame+0x48>
    2316:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <sg_sFrame+0x49>
    231a:	e0 91 71 07 	lds	r30, 0x0771	; 0x800771 <sg_u8CurrentBufferIndex>
    231e:	ef 3f       	cpi	r30, 0xFF	; 255
    2320:	81 f4       	brne	.+32     	; 0x2342 <ModuleCurrentConvertReadings+0x38>
    2322:	07 c0       	rjmp	.+14     	; 0x2332 <ModuleCurrentConvertReadings+0x28>
    2324:	f0 e0       	ldi	r31, 0x00	; 0
    2326:	ee 0f       	add	r30, r30
    2328:	ff 1f       	adc	r31, r31
    232a:	e7 5e       	subi	r30, 0xE7	; 231
    232c:	f8 4f       	sbci	r31, 0xF8	; 248
    232e:	91 83       	std	Z+1, r25	; 0x01
    2330:	80 83       	st	Z, r24
    2332:	e0 91 71 07 	lds	r30, 0x0771	; 0x800771 <sg_u8CurrentBufferIndex>
    2336:	ef 5f       	subi	r30, 0xFF	; 255
    2338:	e0 93 71 07 	sts	0x0771, r30	; 0x800771 <sg_u8CurrentBufferIndex>
    233c:	e8 30       	cpi	r30, 0x08	; 8
    233e:	90 f3       	brcs	.-28     	; 0x2324 <ModuleCurrentConvertReadings+0x1a>
    2340:	0f c0       	rjmp	.+30     	; 0x2360 <ModuleCurrentConvertReadings+0x56>
    2342:	21 e0       	ldi	r18, 0x01	; 1
    2344:	2e 0f       	add	r18, r30
    2346:	20 93 71 07 	sts	0x0771, r18	; 0x800771 <sg_u8CurrentBufferIndex>
    234a:	f0 e0       	ldi	r31, 0x00	; 0
    234c:	ee 0f       	add	r30, r30
    234e:	ff 1f       	adc	r31, r31
    2350:	e7 5e       	subi	r30, 0xE7	; 231
    2352:	f8 4f       	sbci	r31, 0xF8	; 248
    2354:	91 83       	std	Z+1, r25	; 0x01
    2356:	80 83       	st	Z, r24
    2358:	28 30       	cpi	r18, 0x08	; 8
    235a:	10 f0       	brcs	.+4      	; 0x2360 <ModuleCurrentConvertReadings+0x56>
    235c:	10 92 71 07 	sts	0x0771, r1	; 0x800771 <sg_u8CurrentBufferIndex>
    2360:	80 e0       	ldi	r24, 0x00	; 0
    2362:	20 e0       	ldi	r18, 0x00	; 0
    2364:	30 e0       	ldi	r19, 0x00	; 0
    2366:	0b c0       	rjmp	.+22     	; 0x237e <ModuleCurrentConvertReadings+0x74>
    2368:	e8 2f       	mov	r30, r24
    236a:	f0 e0       	ldi	r31, 0x00	; 0
    236c:	ee 0f       	add	r30, r30
    236e:	ff 1f       	adc	r31, r31
    2370:	e7 5e       	subi	r30, 0xE7	; 231
    2372:	f8 4f       	sbci	r31, 0xF8	; 248
    2374:	40 81       	ld	r20, Z
    2376:	51 81       	ldd	r21, Z+1	; 0x01
    2378:	24 0f       	add	r18, r20
    237a:	35 1f       	adc	r19, r21
    237c:	8f 5f       	subi	r24, 0xFF	; 255
    237e:	88 30       	cpi	r24, 0x08	; 8
    2380:	98 f3       	brcs	.-26     	; 0x2368 <ModuleCurrentConvertReadings+0x5e>
    2382:	c9 01       	movw	r24, r18
    2384:	99 23       	and	r25, r25
    2386:	0c f4       	brge	.+2      	; 0x238a <ModuleCurrentConvertReadings+0x80>
    2388:	07 96       	adiw	r24, 0x07	; 7
    238a:	95 95       	asr	r25
    238c:	87 95       	ror	r24
    238e:	95 95       	asr	r25
    2390:	87 95       	ror	r24
    2392:	95 95       	asr	r25
    2394:	87 95       	ror	r24
    2396:	a8 1b       	sub	r26, r24
    2398:	b9 0b       	sbc	r27, r25
    239a:	20 e8       	ldi	r18, 0x80	; 128
    239c:	3c e0       	ldi	r19, 0x0C	; 12
    239e:	0e 94 10 25 	call	0x4a20	; 0x4a20 <__usmulhisi3>
    23a2:	ab 01       	movw	r20, r22
    23a4:	bc 01       	movw	r22, r24
    23a6:	5f 5f       	subi	r21, 0xFF	; 255
    23a8:	6f 4f       	sbci	r22, 0xFF	; 255
    23aa:	7f 4f       	sbci	r23, 0xFF	; 255
    23ac:	db 01       	movw	r26, r22
    23ae:	ca 01       	movw	r24, r20
    23b0:	77 23       	and	r23, r23
    23b2:	24 f4       	brge	.+8      	; 0x23bc <ModuleCurrentConvertReadings+0xb2>
    23b4:	81 50       	subi	r24, 0x01	; 1
    23b6:	9e 4f       	sbci	r25, 0xFE	; 254
    23b8:	af 4f       	sbci	r26, 0xFF	; 255
    23ba:	bf 4f       	sbci	r27, 0xFF	; 255
    23bc:	07 2e       	mov	r0, r23
    23be:	79 e0       	ldi	r23, 0x09	; 9
    23c0:	b5 95       	asr	r27
    23c2:	a7 95       	ror	r26
    23c4:	97 95       	ror	r25
    23c6:	87 95       	ror	r24
    23c8:	7a 95       	dec	r23
    23ca:	d1 f7       	brne	.-12     	; 0x23c0 <ModuleCurrentConvertReadings+0xb6>
    23cc:	70 2d       	mov	r23, r0
    23ce:	90 58       	subi	r25, 0x80	; 128
    23d0:	af 4f       	sbci	r26, 0xFF	; 255
    23d2:	bf 4f       	sbci	r27, 0xFF	; 255
    23d4:	ec e0       	ldi	r30, 0x0C	; 12
    23d6:	f1 e0       	ldi	r31, 0x01	; 1
    23d8:	94 a7       	std	Z+44, r25	; 0x2c
    23da:	83 a7       	std	Z+43, r24	; 0x2b
    23dc:	23 a5       	ldd	r18, Z+43	; 0x2b
    23de:	34 a5       	ldd	r19, Z+44	; 0x2c
    23e0:	82 89       	ldd	r24, Z+18	; 0x12
    23e2:	93 89       	ldd	r25, Z+19	; 0x13
    23e4:	82 17       	cp	r24, r18
    23e6:	93 07       	cpc	r25, r19
    23e8:	20 f4       	brcc	.+8      	; 0x23f2 <ModuleCurrentConvertReadings+0xe8>
    23ea:	83 a5       	ldd	r24, Z+43	; 0x2b
    23ec:	94 a5       	ldd	r25, Z+44	; 0x2c
    23ee:	93 8b       	std	Z+19, r25	; 0x13
    23f0:	82 8b       	std	Z+18, r24	; 0x12
    23f2:	ec e0       	ldi	r30, 0x0C	; 12
    23f4:	f1 e0       	ldi	r31, 0x01	; 1
    23f6:	23 a5       	ldd	r18, Z+43	; 0x2b
    23f8:	34 a5       	ldd	r19, Z+44	; 0x2c
    23fa:	84 89       	ldd	r24, Z+20	; 0x14
    23fc:	95 89       	ldd	r25, Z+21	; 0x15
    23fe:	28 17       	cp	r18, r24
    2400:	39 07       	cpc	r19, r25
    2402:	20 f4       	brcc	.+8      	; 0x240c <ModuleCurrentConvertReadings+0x102>
    2404:	83 a5       	ldd	r24, Z+43	; 0x2b
    2406:	94 a5       	ldd	r25, Z+44	; 0x2c
    2408:	95 8b       	std	Z+21, r25	; 0x15
    240a:	84 8b       	std	Z+20, r24	; 0x14
    240c:	08 95       	ret

Disassembly of section .text.__vector_1:

0000450a <__vector_1>:

// NOTE: If you're getting unexpected AVR resets, uncomment these unused handlers to see
// if another interrupt is being taken that doesn't have a handler. AVR Defaults to jumping
// to 0 when not vector is programmed.
ISR(ANACOMP0_vect, ISR_BLOCK)
{
    450a:	1f 92       	push	r1
    450c:	0f 92       	push	r0
    450e:	0f b6       	in	r0, 0x3f	; 63
    4510:	0f 92       	push	r0
    4512:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) ANACOMP0_vect;
    4514:	85 e8       	ldi	r24, 0x85	; 133
    4516:	92 e2       	ldi	r25, 0x22	; 34
    4518:	80 93 66 07 	sts	0x0766, r24	; 0x800766 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    451c:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4520:	80 93 65 07 	sts	0x0765, r24	; 0x800765 <sg_u8PCMSK0>
    4524:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4528:	80 93 64 07 	sts	0x0764, r24	; 0x800764 <sg_u8PCMSK1>
    452c:	ff cf       	rjmp	.-2      	; 0x452c <__vector_1+0x22>

Disassembly of section .text.__vector_2:

0000452e <__vector_2>:
	while (1);
}

ISR(ANACOMP1_vect, ISR_BLOCK)
{
    452e:	1f 92       	push	r1
    4530:	0f 92       	push	r0
    4532:	0f b6       	in	r0, 0x3f	; 63
    4534:	0f 92       	push	r0
    4536:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) ANACOMP1_vect;
    4538:	87 e9       	ldi	r24, 0x97	; 151
    453a:	92 e2       	ldi	r25, 0x22	; 34
    453c:	80 93 66 07 	sts	0x0766, r24	; 0x800766 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4540:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4544:	80 93 65 07 	sts	0x0765, r24	; 0x800765 <sg_u8PCMSK0>
    4548:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    454c:	80 93 64 07 	sts	0x0764, r24	; 0x800764 <sg_u8PCMSK1>
    4550:	ff cf       	rjmp	.-2      	; 0x4550 <__vector_2+0x22>

Disassembly of section .text.__vector_3:

00004552 <__vector_3>:
	while (1);
}

ISR(ANACOMP2_vect, ISR_BLOCK)
{
    4552:	1f 92       	push	r1
    4554:	0f 92       	push	r0
    4556:	0f b6       	in	r0, 0x3f	; 63
    4558:	0f 92       	push	r0
    455a:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) ANACOMP2_vect;
    455c:	89 ea       	ldi	r24, 0xA9	; 169
    455e:	92 e2       	ldi	r25, 0x22	; 34
    4560:	80 93 66 07 	sts	0x0766, r24	; 0x800766 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4564:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4568:	80 93 65 07 	sts	0x0765, r24	; 0x800765 <sg_u8PCMSK0>
    456c:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4570:	80 93 64 07 	sts	0x0764, r24	; 0x800764 <sg_u8PCMSK1>
    4574:	ff cf       	rjmp	.-2      	; 0x4574 <__vector_3+0x22>

Disassembly of section .text.__vector_4:

00004576 <__vector_4>:
	while (1);
}

ISR(ANACOMP3_vect, ISR_BLOCK)
{
    4576:	1f 92       	push	r1
    4578:	0f 92       	push	r0
    457a:	0f b6       	in	r0, 0x3f	; 63
    457c:	0f 92       	push	r0
    457e:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) ANACOMP3_vect;
    4580:	8b eb       	ldi	r24, 0xBB	; 187
    4582:	92 e2       	ldi	r25, 0x22	; 34
    4584:	80 93 66 07 	sts	0x0766, r24	; 0x800766 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4588:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    458c:	80 93 65 07 	sts	0x0765, r24	; 0x800765 <sg_u8PCMSK0>
    4590:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4594:	80 93 64 07 	sts	0x0764, r24	; 0x800764 <sg_u8PCMSK1>
    4598:	ff cf       	rjmp	.-2      	; 0x4598 <__vector_4+0x22>

Disassembly of section .text.__vector_5:

0000459a <__vector_5>:
	while (1);
}

ISR(PSC_FAULT_vect, ISR_BLOCK)
{
    459a:	1f 92       	push	r1
    459c:	0f 92       	push	r0
    459e:	0f b6       	in	r0, 0x3f	; 63
    45a0:	0f 92       	push	r0
    45a2:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) PSC_FAULT_vect;
    45a4:	8d ec       	ldi	r24, 0xCD	; 205
    45a6:	92 e2       	ldi	r25, 0x22	; 34
    45a8:	80 93 66 07 	sts	0x0766, r24	; 0x800766 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    45ac:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    45b0:	80 93 65 07 	sts	0x0765, r24	; 0x800765 <sg_u8PCMSK0>
    45b4:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    45b8:	80 93 64 07 	sts	0x0764, r24	; 0x800764 <sg_u8PCMSK1>
    45bc:	ff cf       	rjmp	.-2      	; 0x45bc <__vector_5+0x22>

Disassembly of section .text.__vector_6:

000045be <__vector_6>:
	while (1);
}

ISR(PSC_EC_vect, ISR_BLOCK)
{
    45be:	1f 92       	push	r1
    45c0:	0f 92       	push	r0
    45c2:	0f b6       	in	r0, 0x3f	; 63
    45c4:	0f 92       	push	r0
    45c6:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) PSC_EC_vect;
    45c8:	8f ed       	ldi	r24, 0xDF	; 223
    45ca:	92 e2       	ldi	r25, 0x22	; 34
    45cc:	80 93 66 07 	sts	0x0766, r24	; 0x800766 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    45d0:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    45d4:	80 93 65 07 	sts	0x0765, r24	; 0x800765 <sg_u8PCMSK0>
    45d8:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    45dc:	80 93 64 07 	sts	0x0764, r24	; 0x800764 <sg_u8PCMSK1>
    45e0:	ff cf       	rjmp	.-2      	; 0x45e0 <__vector_6+0x22>

Disassembly of section .text.__vector_22:

000045e2 <__vector_22>:
	while (1);
}

ISR(PCINT0_vect, ISR_BLOCK)
{
    45e2:	1f 92       	push	r1
    45e4:	0f 92       	push	r0
    45e6:	0f b6       	in	r0, 0x3f	; 63
    45e8:	0f 92       	push	r0
    45ea:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) PCINT0_vect;
    45ec:	81 ef       	ldi	r24, 0xF1	; 241
    45ee:	92 e2       	ldi	r25, 0x22	; 34
    45f0:	80 93 66 07 	sts	0x0766, r24	; 0x800766 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    45f4:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    45f8:	80 93 65 07 	sts	0x0765, r24	; 0x800765 <sg_u8PCMSK0>
    45fc:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4600:	80 93 64 07 	sts	0x0764, r24	; 0x800764 <sg_u8PCMSK1>
    4604:	ff cf       	rjmp	.-2      	; 0x4604 <__vector_22+0x22>

Disassembly of section .text.__vector_9:

00004606 <__vector_9>:
// 	while (1);
// }
*/

ISR(INT2_vect, ISR_BLOCK)
{
    4606:	1f 92       	push	r1
    4608:	0f 92       	push	r0
    460a:	0f b6       	in	r0, 0x3f	; 63
    460c:	0f 92       	push	r0
    460e:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) INT2_vect;
    4610:	83 e0       	ldi	r24, 0x03	; 3
    4612:	93 e2       	ldi	r25, 0x23	; 35
    4614:	80 93 66 07 	sts	0x0766, r24	; 0x800766 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4618:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    461c:	80 93 65 07 	sts	0x0765, r24	; 0x800765 <sg_u8PCMSK0>
    4620:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4624:	80 93 64 07 	sts	0x0764, r24	; 0x800764 <sg_u8PCMSK1>
    4628:	ff cf       	rjmp	.-2      	; 0x4628 <__vector_9+0x22>

Disassembly of section .text.__vector_11:

0000462a <__vector_11>:
// 	while (1);
// }


ISR(TIMER1_CAPT_vect, ISR_BLOCK)
{
    462a:	1f 92       	push	r1
    462c:	0f 92       	push	r0
    462e:	0f b6       	in	r0, 0x3f	; 63
    4630:	0f 92       	push	r0
    4632:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) TIMER1_CAPT_vect;
    4634:	85 e1       	ldi	r24, 0x15	; 21
    4636:	93 e2       	ldi	r25, 0x23	; 35
    4638:	80 93 66 07 	sts	0x0766, r24	; 0x800766 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    463c:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4640:	80 93 65 07 	sts	0x0765, r24	; 0x800765 <sg_u8PCMSK0>
    4644:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4648:	80 93 64 07 	sts	0x0764, r24	; 0x800764 <sg_u8PCMSK1>
    464c:	ff cf       	rjmp	.-2      	; 0x464c <__vector_11+0x22>

Disassembly of section .text.__vector_13:

0000464e <__vector_13>:
// }



ISR(TIMER1_COMPB_vect, ISR_BLOCK)
{
    464e:	1f 92       	push	r1
    4650:	0f 92       	push	r0
    4652:	0f b6       	in	r0, 0x3f	; 63
    4654:	0f 92       	push	r0
    4656:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) TIMER1_COMPB_vect;
    4658:	87 e2       	ldi	r24, 0x27	; 39
    465a:	93 e2       	ldi	r25, 0x23	; 35
    465c:	80 93 66 07 	sts	0x0766, r24	; 0x800766 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4660:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4664:	80 93 65 07 	sts	0x0765, r24	; 0x800765 <sg_u8PCMSK0>
    4668:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    466c:	80 93 64 07 	sts	0x0764, r24	; 0x800764 <sg_u8PCMSK1>
    4670:	ff cf       	rjmp	.-2      	; 0x4670 <__vector_13+0x22>

Disassembly of section .text.__vector_14:

00004672 <__vector_14>:
	while (1);
}


ISR(TIMER1_OVF_vect, ISR_BLOCK)
{
    4672:	1f 92       	push	r1
    4674:	0f 92       	push	r0
    4676:	0f b6       	in	r0, 0x3f	; 63
    4678:	0f 92       	push	r0
    467a:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) TIMER1_OVF_vect;
    467c:	89 e3       	ldi	r24, 0x39	; 57
    467e:	93 e2       	ldi	r25, 0x23	; 35
    4680:	80 93 66 07 	sts	0x0766, r24	; 0x800766 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4684:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4688:	80 93 65 07 	sts	0x0765, r24	; 0x800765 <sg_u8PCMSK0>
    468c:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4690:	80 93 64 07 	sts	0x0764, r24	; 0x800764 <sg_u8PCMSK1>
    4694:	ff cf       	rjmp	.-2      	; 0x4694 <__vector_14+0x22>

Disassembly of section .text.__vector_17:

00004696 <__vector_17>:
	while (1);
}

ISR(TIMER0_OVF_vect, ISR_BLOCK)
{
    4696:	1f 92       	push	r1
    4698:	0f 92       	push	r0
    469a:	0f b6       	in	r0, 0x3f	; 63
    469c:	0f 92       	push	r0
    469e:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) TIMER0_OVF_vect;
    46a0:	8b e4       	ldi	r24, 0x4B	; 75
    46a2:	93 e2       	ldi	r25, 0x23	; 35
    46a4:	80 93 66 07 	sts	0x0766, r24	; 0x800766 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    46a8:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    46ac:	80 93 65 07 	sts	0x0765, r24	; 0x800765 <sg_u8PCMSK0>
    46b0:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    46b4:	80 93 64 07 	sts	0x0764, r24	; 0x800764 <sg_u8PCMSK1>
    46b8:	ff cf       	rjmp	.-2      	; 0x46b8 <__vector_17+0x22>

Disassembly of section .text.__vector_19:

000046ba <__vector_19>:
	while (1);
}

ISR(CAN_TOVF_vect, ISR_BLOCK)
{
    46ba:	1f 92       	push	r1
    46bc:	0f 92       	push	r0
    46be:	0f b6       	in	r0, 0x3f	; 63
    46c0:	0f 92       	push	r0
    46c2:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) CAN_TOVF_vect;
    46c4:	8d e5       	ldi	r24, 0x5D	; 93
    46c6:	93 e2       	ldi	r25, 0x23	; 35
    46c8:	80 93 66 07 	sts	0x0766, r24	; 0x800766 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    46cc:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    46d0:	80 93 65 07 	sts	0x0765, r24	; 0x800765 <sg_u8PCMSK0>
    46d4:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    46d8:	80 93 64 07 	sts	0x0764, r24	; 0x800764 <sg_u8PCMSK1>
    46dc:	ff cf       	rjmp	.-2      	; 0x46dc <__vector_19+0x22>

Disassembly of section .text.__vector_21:

000046de <__vector_21>:
	while (1);
}

ISR(LIN_ERR_vect, ISR_BLOCK)
{
    46de:	1f 92       	push	r1
    46e0:	0f 92       	push	r0
    46e2:	0f b6       	in	r0, 0x3f	; 63
    46e4:	0f 92       	push	r0
    46e6:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) LIN_ERR_vect;
    46e8:	8f e6       	ldi	r24, 0x6F	; 111
    46ea:	93 e2       	ldi	r25, 0x23	; 35
    46ec:	80 93 66 07 	sts	0x0766, r24	; 0x800766 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    46f0:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    46f4:	80 93 65 07 	sts	0x0765, r24	; 0x800765 <sg_u8PCMSK0>
    46f8:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    46fc:	80 93 64 07 	sts	0x0764, r24	; 0x800764 <sg_u8PCMSK1>
    4700:	ff cf       	rjmp	.-2      	; 0x4700 <__vector_21+0x22>

Disassembly of section .text.__vector_25:

00004702 <__vector_25>:
// 	while (1);
// }


ISR(PCINT3_vect, ISR_BLOCK)
{
    4702:	1f 92       	push	r1
    4704:	0f 92       	push	r0
    4706:	0f b6       	in	r0, 0x3f	; 63
    4708:	0f 92       	push	r0
    470a:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) PCINT3_vect;
    470c:	81 e8       	ldi	r24, 0x81	; 129
    470e:	93 e2       	ldi	r25, 0x23	; 35
    4710:	80 93 66 07 	sts	0x0766, r24	; 0x800766 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4714:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4718:	80 93 65 07 	sts	0x0765, r24	; 0x800765 <sg_u8PCMSK0>
    471c:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4720:	80 93 64 07 	sts	0x0764, r24	; 0x800764 <sg_u8PCMSK1>
    4724:	ff cf       	rjmp	.-2      	; 0x4724 <__vector_25+0x22>

Disassembly of section .text.__vector_26:

00004726 <__vector_26>:
	while (1);
}


ISR(SPI_STC_vect, ISR_BLOCK)
{
    4726:	1f 92       	push	r1
    4728:	0f 92       	push	r0
    472a:	0f b6       	in	r0, 0x3f	; 63
    472c:	0f 92       	push	r0
    472e:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) SPI_STC_vect;
    4730:	83 e9       	ldi	r24, 0x93	; 147
    4732:	93 e2       	ldi	r25, 0x23	; 35
    4734:	80 93 66 07 	sts	0x0766, r24	; 0x800766 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4738:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    473c:	80 93 65 07 	sts	0x0765, r24	; 0x800765 <sg_u8PCMSK0>
    4740:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4744:	80 93 64 07 	sts	0x0764, r24	; 0x800764 <sg_u8PCMSK1>
    4748:	ff cf       	rjmp	.-2      	; 0x4748 <__vector_26+0x22>

Disassembly of section .text.__vector_29:

0000474a <__vector_29>:
	while (1);
}

ISR(EE_READY_vect, ISR_BLOCK)
{
    474a:	1f 92       	push	r1
    474c:	0f 92       	push	r0
    474e:	0f b6       	in	r0, 0x3f	; 63
    4750:	0f 92       	push	r0
    4752:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) EE_READY_vect;
    4754:	85 ea       	ldi	r24, 0xA5	; 165
    4756:	93 e2       	ldi	r25, 0x23	; 35
    4758:	80 93 66 07 	sts	0x0766, r24	; 0x800766 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    475c:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4760:	80 93 65 07 	sts	0x0765, r24	; 0x800765 <sg_u8PCMSK0>
    4764:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4768:	80 93 64 07 	sts	0x0764, r24	; 0x800764 <sg_u8PCMSK1>
    476c:	ff cf       	rjmp	.-2      	; 0x476c <__vector_29+0x22>

Disassembly of section .text.__vector_30:

0000476e <__vector_30>:
	while (1);
}

ISR(SPM_READY_vect, ISR_BLOCK)
{
    476e:	1f 92       	push	r1
    4770:	0f 92       	push	r0
    4772:	0f b6       	in	r0, 0x3f	; 63
    4774:	0f 92       	push	r0
    4776:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) SPM_READY_vect;
    4778:	87 eb       	ldi	r24, 0xB7	; 183
    477a:	93 e2       	ldi	r25, 0x23	; 35
    477c:	80 93 66 07 	sts	0x0766, r24	; 0x800766 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4780:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4784:	80 93 65 07 	sts	0x0765, r24	; 0x800765 <sg_u8PCMSK0>
    4788:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    478c:	80 93 64 07 	sts	0x0764, r24	; 0x800764 <sg_u8PCMSK1>
    4790:	ff cf       	rjmp	.-2      	; 0x4790 <__vector_30+0x22>

Disassembly of section .text.CurrentThresholdsGet:

0000321a <CurrentThresholdsGet>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    321a:	0f 93       	push	r16
    321c:	1f 93       	push	r17
    321e:	cf 93       	push	r28
    3220:	df 93       	push	r29
    3222:	8c 01       	movw	r16, r24
    3224:	eb 01       	movw	r28, r22
    3226:	89 2b       	or	r24, r25
    3228:	f9 f0       	breq	.+62     	; 0x3268 <CurrentThresholdsGet+0x4e>
    322a:	87 e0       	ldi	r24, 0x07	; 7
    322c:	90 e0       	ldi	r25, 0x00	; 0
    322e:	0e 94 b6 24 	call	0x496c	; 0x496c <EEPROMRead>
    3232:	90 e0       	ldi	r25, 0x00	; 0
    3234:	f8 01       	movw	r30, r16
    3236:	91 83       	std	Z+1, r25	; 0x01
    3238:	80 83       	st	Z, r24
    323a:	88 e0       	ldi	r24, 0x08	; 8
    323c:	90 e0       	ldi	r25, 0x00	; 0
    323e:	0e 94 b6 24 	call	0x496c	; 0x496c <EEPROMRead>
    3242:	90 e0       	ldi	r25, 0x00	; 0
    3244:	98 2f       	mov	r25, r24
    3246:	88 27       	eor	r24, r24
    3248:	f8 01       	movw	r30, r16
    324a:	20 81       	ld	r18, Z
    324c:	31 81       	ldd	r19, Z+1	; 0x01
    324e:	82 2b       	or	r24, r18
    3250:	93 2b       	or	r25, r19
    3252:	91 83       	std	Z+1, r25	; 0x01
    3254:	80 83       	st	Z, r24
    3256:	01 97       	sbiw	r24, 0x01	; 1
    3258:	8e 3f       	cpi	r24, 0xFE	; 254
    325a:	9f 4f       	sbci	r25, 0xFF	; 255
    325c:	28 f0       	brcs	.+10     	; 0x3268 <CurrentThresholdsGet+0x4e>
    325e:	8c ec       	ldi	r24, 0xCC	; 204
    3260:	97 e7       	ldi	r25, 0x77	; 119
    3262:	f8 01       	movw	r30, r16
    3264:	91 83       	std	Z+1, r25	; 0x01
    3266:	80 83       	st	Z, r24
    3268:	20 97       	sbiw	r28, 0x00	; 0
    326a:	e1 f0       	breq	.+56     	; 0x32a4 <CurrentThresholdsGet+0x8a>
    326c:	85 e0       	ldi	r24, 0x05	; 5
    326e:	90 e0       	ldi	r25, 0x00	; 0
    3270:	0e 94 b6 24 	call	0x496c	; 0x496c <EEPROMRead>
    3274:	90 e0       	ldi	r25, 0x00	; 0
    3276:	99 83       	std	Y+1, r25	; 0x01
    3278:	88 83       	st	Y, r24
    327a:	86 e0       	ldi	r24, 0x06	; 6
    327c:	90 e0       	ldi	r25, 0x00	; 0
    327e:	0e 94 b6 24 	call	0x496c	; 0x496c <EEPROMRead>
    3282:	90 e0       	ldi	r25, 0x00	; 0
    3284:	98 2f       	mov	r25, r24
    3286:	88 27       	eor	r24, r24
    3288:	28 81       	ld	r18, Y
    328a:	39 81       	ldd	r19, Y+1	; 0x01
    328c:	82 2b       	or	r24, r18
    328e:	93 2b       	or	r25, r19
    3290:	99 83       	std	Y+1, r25	; 0x01
    3292:	88 83       	st	Y, r24
    3294:	01 97       	sbiw	r24, 0x01	; 1
    3296:	8e 3f       	cpi	r24, 0xFE	; 254
    3298:	9f 4f       	sbci	r25, 0xFF	; 255
    329a:	20 f0       	brcs	.+8      	; 0x32a4 <CurrentThresholdsGet+0x8a>
    329c:	84 ef       	ldi	r24, 0xF4	; 244
    329e:	91 e8       	ldi	r25, 0x81	; 129
    32a0:	99 83       	std	Y+1, r25	; 0x01
    32a2:	88 83       	st	Y, r24
    32a4:	df 91       	pop	r29
    32a6:	cf 91       	pop	r28
    32a8:	1f 91       	pop	r17
    32aa:	0f 91       	pop	r16
    32ac:	08 95       	ret

Disassembly of section .text.CANReceiveCallback:

00001e30 <CANReceiveCallback>:
    1e30:	ef 92       	push	r14
    1e32:	ff 92       	push	r15
    1e34:	0f 93       	push	r16
    1e36:	1f 93       	push	r17
    1e38:	cf 93       	push	r28
    1e3a:	df 93       	push	r29
    1e3c:	c8 2f       	mov	r28, r24
    1e3e:	8b 01       	movw	r16, r22
    1e40:	d4 2f       	mov	r29, r20
    1e42:	f0 90 1d 03 	lds	r15, 0x031D	; 0x80031d <sg_bModuleRegistered>
    1e46:	89 30       	cpi	r24, 0x09	; 9
    1e48:	69 f5       	brne	.+90     	; 0x1ea4 <CANReceiveCallback+0x74>
    1e4a:	48 30       	cpi	r20, 0x08	; 8
    1e4c:	09 f0       	breq	.+2      	; 0x1e50 <CANReceiveCallback+0x20>
    1e4e:	92 c0       	rjmp	.+292    	; 0x1f74 <CANReceiveCallback+0x144>
    1e50:	fb 01       	movw	r30, r22
    1e52:	90 81       	ld	r25, Z
    1e54:	82 81       	ldd	r24, Z+2	; 0x02
    1e56:	82 30       	cpi	r24, 0x02	; 2
    1e58:	09 f0       	breq	.+2      	; 0x1e5c <CANReceiveCallback+0x2c>
    1e5a:	8c c0       	rjmp	.+280    	; 0x1f74 <CANReceiveCallback+0x144>
    1e5c:	83 81       	ldd	r24, Z+3	; 0x03
    1e5e:	83 30       	cpi	r24, 0x03	; 3
    1e60:	09 f0       	breq	.+2      	; 0x1e64 <CANReceiveCallback+0x34>
    1e62:	88 c0       	rjmp	.+272    	; 0x1f74 <CANReceiveCallback+0x144>
    1e64:	04 81       	ldd	r16, Z+4	; 0x04
    1e66:	15 81       	ldd	r17, Z+5	; 0x05
    1e68:	26 81       	ldd	r18, Z+6	; 0x06
    1e6a:	37 81       	ldd	r19, Z+7	; 0x07
    1e6c:	40 91 17 03 	lds	r20, 0x0317	; 0x800317 <sg_u32ModuleUniqueID>
    1e70:	50 91 18 03 	lds	r21, 0x0318	; 0x800318 <sg_u32ModuleUniqueID+0x1>
    1e74:	60 91 19 03 	lds	r22, 0x0319	; 0x800319 <sg_u32ModuleUniqueID+0x2>
    1e78:	70 91 1a 03 	lds	r23, 0x031A	; 0x80031a <sg_u32ModuleUniqueID+0x3>
    1e7c:	04 17       	cp	r16, r20
    1e7e:	15 07       	cpc	r17, r21
    1e80:	26 07       	cpc	r18, r22
    1e82:	37 07       	cpc	r19, r23
    1e84:	09 f0       	breq	.+2      	; 0x1e88 <CANReceiveCallback+0x58>
    1e86:	76 c0       	rjmp	.+236    	; 0x1f74 <CANReceiveCallback+0x144>
    1e88:	10 92 6d 07 	sts	0x076D, r1	; 0x80076d <sg_u8TicksSinceLastPackControllerMessage>
    1e8c:	90 93 23 03 	sts	0x0323, r25	; 0x800323 <sg_u8ModuleRegistrationID>
    1e90:	0e 94 1d 25 	call	0x4a3a	; 0x4a3a <SendModuleControllerStatus>
    1e94:	81 e0       	ldi	r24, 0x01	; 1
    1e96:	80 93 14 03 	sts	0x0314, r24	; 0x800314 <sg_bSendHardwareDetail>
    1e9a:	80 93 1d 03 	sts	0x031D, r24	; 0x80031d <sg_bModuleRegistered>
    1e9e:	80 93 1c 03 	sts	0x031C, r24	; 0x80031c <sg_bSendTimeRequest>
    1ea2:	68 c0       	rjmp	.+208    	; 0x1f74 <CANReceiveCallback+0x144>
    1ea4:	fb 01       	movw	r30, r22
    1ea6:	e0 80       	ld	r14, Z
    1ea8:	44 23       	and	r20, r20
    1eaa:	09 f4       	brne	.+2      	; 0x1eae <CANReceiveCallback+0x7e>
    1eac:	63 c0       	rjmp	.+198    	; 0x1f74 <CANReceiveCallback+0x144>
    1eae:	10 92 6d 07 	sts	0x076D, r1	; 0x80076d <sg_u8TicksSinceLastPackControllerMessage>
    1eb2:	80 31       	cpi	r24, 0x10	; 16
    1eb4:	21 f4       	brne	.+8      	; 0x1ebe <CANReceiveCallback+0x8e>
    1eb6:	81 81       	ldd	r24, Z+1	; 0x01
    1eb8:	8f 70       	andi	r24, 0x0F	; 15
    1eba:	0e 94 76 24 	call	0x48ec	; 0x48ec <ModuleControllerStateSetMax>
    1ebe:	ff 20       	and	r15, r15
    1ec0:	e1 f1       	breq	.+120    	; 0x1f3a <CANReceiveCallback+0x10a>
    1ec2:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <sg_u8ModuleRegistrationID>
    1ec6:	e8 12       	cpse	r14, r24
    1ec8:	38 c0       	rjmp	.+112    	; 0x1f3a <CANReceiveCallback+0x10a>
    1eca:	ca 30       	cpi	r28, 0x0A	; 10
    1ecc:	29 f4       	brne	.+10     	; 0x1ed8 <CANReceiveCallback+0xa8>
    1ece:	d1 30       	cpi	r29, 0x01	; 1
    1ed0:	a1 f5       	brne	.+104    	; 0x1f3a <CANReceiveCallback+0x10a>
    1ed2:	0e 94 1d 25 	call	0x4a3a	; 0x4a3a <SendModuleControllerStatus>
    1ed6:	31 c0       	rjmp	.+98     	; 0x1f3a <CANReceiveCallback+0x10a>
    1ed8:	cb 30       	cpi	r28, 0x0B	; 11
    1eda:	f1 f4       	brne	.+60     	; 0x1f18 <CANReceiveCallback+0xe8>
    1edc:	d3 30       	cpi	r29, 0x03	; 3
    1ede:	69 f5       	brne	.+90     	; 0x1f3a <CANReceiveCallback+0x10a>
    1ee0:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <sg_bSendCellStatus>
    1ee4:	81 11       	cpse	r24, r1
    1ee6:	29 c0       	rjmp	.+82     	; 0x1f3a <CANReceiveCallback+0x10a>
    1ee8:	f8 01       	movw	r30, r16
    1eea:	81 81       	ldd	r24, Z+1	; 0x01
    1eec:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <sg_sFrame+0x11>
    1ef0:	89 17       	cp	r24, r25
    1ef2:	18 f5       	brcc	.+70     	; 0x1f3a <CANReceiveCallback+0x10a>
    1ef4:	80 93 1f 03 	sts	0x031F, r24	; 0x80031f <sg_u8CellStatus>
    1ef8:	90 91 1f 03 	lds	r25, 0x031F	; 0x80031f <sg_u8CellStatus>
    1efc:	90 93 20 03 	sts	0x0320, r25	; 0x800320 <sg_u8CellStatusTarget>
    1f00:	8f 3f       	cpi	r24, 0xFF	; 255
    1f02:	31 f4       	brne	.+12     	; 0x1f10 <CANReceiveCallback+0xe0>
    1f04:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <sg_sFrame+0x11>
    1f08:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <sg_u8CellStatusTarget>
    1f0c:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <sg_u8CellStatus>
    1f10:	81 e0       	ldi	r24, 0x01	; 1
    1f12:	80 93 15 03 	sts	0x0315, r24	; 0x800315 <sg_bSendCellStatus>
    1f16:	11 c0       	rjmp	.+34     	; 0x1f3a <CANReceiveCallback+0x10a>
    1f18:	cc 30       	cpi	r28, 0x0C	; 12
    1f1a:	51 f4       	brne	.+20     	; 0x1f30 <CANReceiveCallback+0x100>
    1f1c:	10 92 6d 07 	sts	0x076D, r1	; 0x80076d <sg_u8TicksSinceLastPackControllerMessage>
    1f20:	d2 30       	cpi	r29, 0x02	; 2
    1f22:	59 f4       	brne	.+22     	; 0x1f3a <CANReceiveCallback+0x10a>
    1f24:	f8 01       	movw	r30, r16
    1f26:	81 81       	ldd	r24, Z+1	; 0x01
    1f28:	8f 70       	andi	r24, 0x0F	; 15
    1f2a:	0e 94 2e 25 	call	0x4a5c	; 0x4a5c <ModuleControllerStateSet>
    1f2e:	05 c0       	rjmp	.+10     	; 0x1f3a <CANReceiveCallback+0x10a>
    1f30:	c5 30       	cpi	r28, 0x05	; 5
    1f32:	19 f4       	brne	.+6      	; 0x1f3a <CANReceiveCallback+0x10a>
    1f34:	81 e0       	ldi	r24, 0x01	; 1
    1f36:	80 93 14 03 	sts	0x0314, r24	; 0x800314 <sg_bSendHardwareDetail>
    1f3a:	cd 30       	cpi	r28, 0x0D	; 13
    1f3c:	41 f4       	brne	.+16     	; 0x1f4e <CANReceiveCallback+0x11e>
    1f3e:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <sg_u8ModuleRegistrationID>
    1f42:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <sg_bModuleRegistered>
    1f46:	80 e0       	ldi	r24, 0x00	; 0
    1f48:	0e 94 2e 25 	call	0x4a5c	; 0x4a5c <ModuleControllerStateSet>
    1f4c:	13 c0       	rjmp	.+38     	; 0x1f74 <CANReceiveCallback+0x144>
    1f4e:	ce 30       	cpi	r28, 0x0E	; 14
    1f50:	21 f4       	brne	.+8      	; 0x1f5a <CANReceiveCallback+0x12a>
    1f52:	80 e0       	ldi	r24, 0x00	; 0
    1f54:	0e 94 2e 25 	call	0x4a5c	; 0x4a5c <ModuleControllerStateSet>
    1f58:	0d c0       	rjmp	.+26     	; 0x1f74 <CANReceiveCallback+0x144>
    1f5a:	cf 30       	cpi	r28, 0x0F	; 15
    1f5c:	59 f4       	brne	.+22     	; 0x1f74 <CANReceiveCallback+0x144>
    1f5e:	f8 01       	movw	r30, r16
    1f60:	20 81       	ld	r18, Z
    1f62:	31 81       	ldd	r19, Z+1	; 0x01
    1f64:	42 81       	ldd	r20, Z+2	; 0x02
    1f66:	53 81       	ldd	r21, Z+3	; 0x03
    1f68:	64 81       	ldd	r22, Z+4	; 0x04
    1f6a:	75 81       	ldd	r23, Z+5	; 0x05
    1f6c:	86 81       	ldd	r24, Z+6	; 0x06
    1f6e:	97 81       	ldd	r25, Z+7	; 0x07
    1f70:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <RTCSetTime>
    1f74:	df 91       	pop	r29
    1f76:	cf 91       	pop	r28
    1f78:	1f 91       	pop	r17
    1f7a:	0f 91       	pop	r16
    1f7c:	ff 90       	pop	r15
    1f7e:	ef 90       	pop	r14
    1f80:	08 95       	ret

Disassembly of section .text.ControllerStatusMessagesSend:

00000684 <ControllerStatusMessagesSend>:
 684:	cf 92       	push	r12
 686:	df 92       	push	r13
 688:	ef 92       	push	r14
 68a:	ff 92       	push	r15
 68c:	0f 93       	push	r16
 68e:	1f 93       	push	r17
 690:	cf 93       	push	r28
 692:	df 93       	push	r29
 694:	00 d0       	rcall	.+0      	; 0x696 <ControllerStatusMessagesSend+0x12>
 696:	00 d0       	rcall	.+0      	; 0x698 <ControllerStatusMessagesSend+0x14>
 698:	cd b7       	in	r28, 0x3d	; 61
 69a:	de b7       	in	r29, 0x3e	; 62
 69c:	8c 01       	movw	r16, r24
 69e:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <sg_bSendTimeRequest>
 6a2:	88 23       	and	r24, r24
 6a4:	69 f0       	breq	.+26     	; 0x6c0 <ControllerStatusMessagesSend+0x3c>
 6a6:	88 e0       	ldi	r24, 0x08	; 8
 6a8:	d8 01       	movw	r26, r16
 6aa:	1d 92       	st	X+, r1
 6ac:	8a 95       	dec	r24
 6ae:	e9 f7       	brne	.-6      	; 0x6aa <ControllerStatusMessagesSend+0x26>
 6b0:	48 e0       	ldi	r20, 0x08	; 8
 6b2:	b8 01       	movw	r22, r16
 6b4:	88 e0       	ldi	r24, 0x08	; 8
 6b6:	0e 94 6b 24 	call	0x48d6	; 0x48d6 <CANSendMessage>
 6ba:	81 11       	cpse	r24, r1
 6bc:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <sg_bSendTimeRequest>
 6c0:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <sg_bSendModuleControllerStatus>
 6c4:	88 23       	and	r24, r24
 6c6:	09 f4       	brne	.+2      	; 0x6ca <ControllerStatusMessagesSend+0x46>
 6c8:	00 c1       	rjmp	.+512    	; 0x8ca <__EEPROM_REGION_LENGTH__+0xca>
 6ca:	80 91 69 07 	lds	r24, 0x0769	; 0x800769 <sg_u8ControllerStatusMsgCount>
 6ce:	81 11       	cpse	r24, r1
 6d0:	80 c0       	rjmp	.+256    	; 0x7d2 <ControllerStatusMessagesSend+0x14e>
 6d2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <sg_eModuleControllerStateCurrent>
 6d6:	8f 70       	andi	r24, 0x0F	; 15
 6d8:	f8 01       	movw	r30, r16
 6da:	80 83       	st	Z, r24
 6dc:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <sg_u8SOC>
 6e0:	81 83       	std	Z+1, r24	; 0x01
 6e2:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <sg_u8SOH>
 6e6:	82 83       	std	Z+2, r24	; 0x02
 6e8:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <sg_sFrame+0x11>
 6ec:	83 83       	std	Z+3, r24	; 0x03
 6ee:	84 e0       	ldi	r24, 0x04	; 4
 6f0:	34 96       	adiw	r30, 0x04	; 4
 6f2:	df 01       	movw	r26, r30
 6f4:	1d 92       	st	X+, r1
 6f6:	8a 95       	dec	r24
 6f8:	e9 f7       	brne	.-6      	; 0x6f4 <ControllerStatusMessagesSend+0x70>
 6fa:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <sg_sFrame+0x44>
 6fe:	88 23       	and	r24, r24
 700:	79 f0       	breq	.+30     	; 0x720 <ControllerStatusMessagesSend+0x9c>
 702:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <sg_sFrame+0x47>
 706:	88 23       	and	r24, r24
 708:	71 f0       	breq	.+28     	; 0x726 <ControllerStatusMessagesSend+0xa2>
 70a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <sg_eModuleControllerStateCurrent>
 70e:	83 30       	cpi	r24, 0x03	; 3
 710:	69 f4       	brne	.+26     	; 0x72c <ControllerStatusMessagesSend+0xa8>
 712:	0e 94 85 11 	call	0x230a	; 0x230a <ModuleCurrentConvertReadings>
 716:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <sg_sFrame+0x2b>
 71a:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <sg_sFrame+0x2c>
 71e:	08 c0       	rjmp	.+16     	; 0x730 <ControllerStatusMessagesSend+0xac>
 720:	80 e0       	ldi	r24, 0x00	; 0
 722:	90 e8       	ldi	r25, 0x80	; 128
 724:	05 c0       	rjmp	.+10     	; 0x730 <ControllerStatusMessagesSend+0xac>
 726:	80 e0       	ldi	r24, 0x00	; 0
 728:	90 e8       	ldi	r25, 0x80	; 128
 72a:	02 c0       	rjmp	.+4      	; 0x730 <ControllerStatusMessagesSend+0xac>
 72c:	80 e0       	ldi	r24, 0x00	; 0
 72e:	90 e8       	ldi	r25, 0x80	; 128
 730:	f8 01       	movw	r30, r16
 732:	84 83       	std	Z+4, r24	; 0x04
 734:	95 83       	std	Z+5, r25	; 0x05
 736:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <sg_sFrame+0x41>
 73a:	88 23       	and	r24, r24
 73c:	79 f0       	breq	.+30     	; 0x75c <ControllerStatusMessagesSend+0xd8>
 73e:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <sg_sFrame+0x42>
 742:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <sg_sFrame+0x43>
 746:	4f ef       	ldi	r20, 0xFF	; 255
 748:	53 e0       	ldi	r21, 0x03	; 3
 74a:	60 e0       	ldi	r22, 0x00	; 0
 74c:	70 e0       	ldi	r23, 0x00	; 0
 74e:	9a 01       	movw	r18, r20
 750:	ab 01       	movw	r20, r22
 752:	28 1b       	sub	r18, r24
 754:	39 0b       	sbc	r19, r25
 756:	41 09       	sbc	r20, r1
 758:	51 09       	sbc	r21, r1
 75a:	03 c0       	rjmp	.+6      	; 0x762 <ControllerStatusMessagesSend+0xde>
 75c:	20 e0       	ldi	r18, 0x00	; 0
 75e:	30 e0       	ldi	r19, 0x00	; 0
 760:	a9 01       	movw	r20, r18
 762:	ec e0       	ldi	r30, 0x0C	; 12
 764:	f1 e0       	ldi	r31, 0x01	; 1
 766:	a1 a1       	ldd	r26, Z+33	; 0x21
 768:	b2 a1       	ldd	r27, Z+34	; 0x22
 76a:	0e 94 eb 24 	call	0x49d6	; 0x49d6 <__mulshisi3>
 76e:	dc 01       	movw	r26, r24
 770:	cb 01       	movw	r24, r22
 772:	68 94       	set
 774:	16 f8       	bld	r1, 6
 776:	b6 95       	lsr	r27
 778:	a7 95       	ror	r26
 77a:	97 95       	ror	r25
 77c:	87 95       	ror	r24
 77e:	16 94       	lsr	r1
 780:	d1 f7       	brne	.-12     	; 0x776 <ControllerStatusMessagesSend+0xf2>
 782:	c1 8c       	ldd	r12, Z+25	; 0x19
 784:	d2 8c       	ldd	r13, Z+26	; 0x1a
 786:	e3 8c       	ldd	r14, Z+27	; 0x1b
 788:	f4 8c       	ldd	r15, Z+28	; 0x1c
 78a:	bc 01       	movw	r22, r24
 78c:	cd 01       	movw	r24, r26
 78e:	6c 0d       	add	r22, r12
 790:	7d 1d       	adc	r23, r13
 792:	8e 1d       	adc	r24, r14
 794:	9f 1d       	adc	r25, r15
 796:	2f e0       	ldi	r18, 0x0F	; 15
 798:	30 e0       	ldi	r19, 0x00	; 0
 79a:	40 e0       	ldi	r20, 0x00	; 0
 79c:	50 e0       	ldi	r21, 0x00	; 0
 79e:	0e 94 c3 1f 	call	0x3f86	; 0x3f86 <__udivmodsi4>
 7a2:	20 93 49 01 	sts	0x0149, r18	; 0x800149 <sg_sFrame+0x3d>
 7a6:	30 93 4a 01 	sts	0x014A, r19	; 0x80014a <sg_sFrame+0x3e>
 7aa:	40 93 4b 01 	sts	0x014B, r20	; 0x80014b <sg_sFrame+0x3f>
 7ae:	50 93 4c 01 	sts	0x014C, r21	; 0x80014c <sg_sFrame+0x40>
 7b2:	d8 01       	movw	r26, r16
 7b4:	16 96       	adiw	r26, 0x06	; 6
 7b6:	2c 93       	st	X, r18
 7b8:	16 97       	sbiw	r26, 0x06	; 6
 7ba:	17 96       	adiw	r26, 0x07	; 7
 7bc:	3c 93       	st	X, r19
 7be:	48 e0       	ldi	r20, 0x08	; 8
 7c0:	b8 01       	movw	r22, r16
 7c2:	81 e0       	ldi	r24, 0x01	; 1
 7c4:	0e 94 6b 24 	call	0x48d6	; 0x48d6 <CANSendMessage>
 7c8:	88 23       	and	r24, r24
 7ca:	09 f4       	brne	.+2      	; 0x7ce <ControllerStatusMessagesSend+0x14a>
 7cc:	67 c0       	rjmp	.+206    	; 0x89c <__EEPROM_REGION_LENGTH__+0x9c>
 7ce:	81 e0       	ldi	r24, 0x01	; 1
 7d0:	6c c0       	rjmp	.+216    	; 0x8aa <__EEPROM_REGION_LENGTH__+0xaa>
 7d2:	81 30       	cpi	r24, 0x01	; 1
 7d4:	a1 f5       	brne	.+104    	; 0x83e <__EEPROM_REGION_LENGTH__+0x3e>
 7d6:	ec e0       	ldi	r30, 0x0C	; 12
 7d8:	f1 e0       	ldi	r31, 0x01	; 1
 7da:	85 a9       	ldd	r24, Z+53	; 0x35
 7dc:	96 a9       	ldd	r25, Z+54	; 0x36
 7de:	d8 01       	movw	r26, r16
 7e0:	8c 93       	st	X, r24
 7e2:	85 a9       	ldd	r24, Z+53	; 0x35
 7e4:	96 a9       	ldd	r25, Z+54	; 0x36
 7e6:	11 96       	adiw	r26, 0x01	; 1
 7e8:	9c 93       	st	X, r25
 7ea:	11 97       	sbiw	r26, 0x01	; 1
 7ec:	83 a9       	ldd	r24, Z+51	; 0x33
 7ee:	94 a9       	ldd	r25, Z+52	; 0x34
 7f0:	12 96       	adiw	r26, 0x02	; 2
 7f2:	8c 93       	st	X, r24
 7f4:	12 97       	sbiw	r26, 0x02	; 2
 7f6:	83 a9       	ldd	r24, Z+51	; 0x33
 7f8:	94 a9       	ldd	r25, Z+52	; 0x34
 7fa:	13 96       	adiw	r26, 0x03	; 3
 7fc:	9c 93       	st	X, r25
 7fe:	13 97       	sbiw	r26, 0x03	; 3
 800:	87 a9       	ldd	r24, Z+55	; 0x37
 802:	90 ad       	ldd	r25, Z+56	; 0x38
 804:	14 96       	adiw	r26, 0x04	; 4
 806:	8c 93       	st	X, r24
 808:	14 97       	sbiw	r26, 0x04	; 4
 80a:	87 a9       	ldd	r24, Z+55	; 0x37
 80c:	90 ad       	ldd	r25, Z+56	; 0x38
 80e:	15 96       	adiw	r26, 0x05	; 5
 810:	9c 93       	st	X, r25
 812:	61 ad       	ldd	r22, Z+57	; 0x39
 814:	72 ad       	ldd	r23, Z+58	; 0x3a
 816:	83 ad       	ldd	r24, Z+59	; 0x3b
 818:	94 ad       	ldd	r25, Z+60	; 0x3c
 81a:	2f e0       	ldi	r18, 0x0F	; 15
 81c:	30 e0       	ldi	r19, 0x00	; 0
 81e:	40 e0       	ldi	r20, 0x00	; 0
 820:	50 e0       	ldi	r21, 0x00	; 0
 822:	0e 94 c3 1f 	call	0x3f86	; 0x3f86 <__udivmodsi4>
 826:	f8 01       	movw	r30, r16
 828:	26 83       	std	Z+6, r18	; 0x06
 82a:	37 83       	std	Z+7, r19	; 0x07
 82c:	48 e0       	ldi	r20, 0x08	; 8
 82e:	b8 01       	movw	r22, r16
 830:	82 e0       	ldi	r24, 0x02	; 2
 832:	0e 94 6b 24 	call	0x48d6	; 0x48d6 <CANSendMessage>
 836:	88 23       	and	r24, r24
 838:	99 f1       	breq	.+102    	; 0x8a0 <__EEPROM_REGION_LENGTH__+0xa0>
 83a:	81 e0       	ldi	r24, 0x01	; 1
 83c:	36 c0       	rjmp	.+108    	; 0x8aa <__EEPROM_REGION_LENGTH__+0xaa>
 83e:	82 30       	cpi	r24, 0x02	; 2
 840:	89 f5       	brne	.+98     	; 0x8a4 <__EEPROM_REGION_LENGTH__+0xa4>
 842:	ec e0       	ldi	r30, 0x0C	; 12
 844:	f1 e0       	ldi	r31, 0x01	; 1
 846:	87 a5       	ldd	r24, Z+47	; 0x2f
 848:	90 a9       	ldd	r25, Z+48	; 0x30
 84a:	d8 01       	movw	r26, r16
 84c:	8c 93       	st	X, r24
 84e:	87 a5       	ldd	r24, Z+47	; 0x2f
 850:	90 a9       	ldd	r25, Z+48	; 0x30
 852:	11 96       	adiw	r26, 0x01	; 1
 854:	9c 93       	st	X, r25
 856:	11 97       	sbiw	r26, 0x01	; 1
 858:	85 a5       	ldd	r24, Z+45	; 0x2d
 85a:	96 a5       	ldd	r25, Z+46	; 0x2e
 85c:	12 96       	adiw	r26, 0x02	; 2
 85e:	8c 93       	st	X, r24
 860:	12 97       	sbiw	r26, 0x02	; 2
 862:	85 a5       	ldd	r24, Z+45	; 0x2d
 864:	96 a5       	ldd	r25, Z+46	; 0x2e
 866:	13 96       	adiw	r26, 0x03	; 3
 868:	9c 93       	st	X, r25
 86a:	13 97       	sbiw	r26, 0x03	; 3
 86c:	81 a9       	ldd	r24, Z+49	; 0x31
 86e:	92 a9       	ldd	r25, Z+50	; 0x32
 870:	14 96       	adiw	r26, 0x04	; 4
 872:	8c 93       	st	X, r24
 874:	14 97       	sbiw	r26, 0x04	; 4
 876:	81 a9       	ldd	r24, Z+49	; 0x31
 878:	92 a9       	ldd	r25, Z+50	; 0x32
 87a:	15 96       	adiw	r26, 0x05	; 5
 87c:	9c 93       	st	X, r25
 87e:	15 97       	sbiw	r26, 0x05	; 5
 880:	16 96       	adiw	r26, 0x06	; 6
 882:	1c 92       	st	X, r1
 884:	16 97       	sbiw	r26, 0x06	; 6
 886:	17 96       	adiw	r26, 0x07	; 7
 888:	1c 92       	st	X, r1
 88a:	48 e0       	ldi	r20, 0x08	; 8
 88c:	b8 01       	movw	r22, r16
 88e:	83 e0       	ldi	r24, 0x03	; 3
 890:	0e 94 6b 24 	call	0x48d6	; 0x48d6 <CANSendMessage>
 894:	88 23       	and	r24, r24
 896:	41 f0       	breq	.+16     	; 0x8a8 <__EEPROM_REGION_LENGTH__+0xa8>
 898:	81 e0       	ldi	r24, 0x01	; 1
 89a:	07 c0       	rjmp	.+14     	; 0x8aa <__EEPROM_REGION_LENGTH__+0xaa>
 89c:	80 e0       	ldi	r24, 0x00	; 0
 89e:	05 c0       	rjmp	.+10     	; 0x8aa <__EEPROM_REGION_LENGTH__+0xaa>
 8a0:	80 e0       	ldi	r24, 0x00	; 0
 8a2:	03 c0       	rjmp	.+6      	; 0x8aa <__EEPROM_REGION_LENGTH__+0xaa>
 8a4:	81 e0       	ldi	r24, 0x01	; 1
 8a6:	01 c0       	rjmp	.+2      	; 0x8aa <__EEPROM_REGION_LENGTH__+0xaa>
 8a8:	80 e0       	ldi	r24, 0x00	; 0
 8aa:	88 23       	and	r24, r24
 8ac:	71 f0       	breq	.+28     	; 0x8ca <__EEPROM_REGION_LENGTH__+0xca>
 8ae:	80 91 69 07 	lds	r24, 0x0769	; 0x800769 <sg_u8ControllerStatusMsgCount>
 8b2:	8f 5f       	subi	r24, 0xFF	; 255
 8b4:	80 93 69 07 	sts	0x0769, r24	; 0x800769 <sg_u8ControllerStatusMsgCount>
 8b8:	83 30       	cpi	r24, 0x03	; 3
 8ba:	38 f0       	brcs	.+14     	; 0x8ca <__EEPROM_REGION_LENGTH__+0xca>
 8bc:	10 92 69 07 	sts	0x0769, r1	; 0x800769 <sg_u8ControllerStatusMsgCount>
 8c0:	10 92 16 03 	sts	0x0316, r1	; 0x800316 <sg_bSendModuleControllerStatus>
 8c4:	81 e0       	ldi	r24, 0x01	; 1
 8c6:	80 93 13 03 	sts	0x0313, r24	; 0x800313 <sg_bSendCellCommStatus>
 8ca:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <sg_bSendCellStatus>
 8ce:	88 23       	and	r24, r24
 8d0:	09 f4       	brne	.+2      	; 0x8d4 <__EEPROM_REGION_LENGTH__+0xd4>
 8d2:	6e c0       	rjmp	.+220    	; 0x9b0 <__EEPROM_REGION_LENGTH__+0x1b0>
 8d4:	1c 82       	std	Y+4, r1	; 0x04
 8d6:	1b 82       	std	Y+3, r1	; 0x03
 8d8:	1a 82       	std	Y+2, r1	; 0x02
 8da:	19 82       	std	Y+1, r1	; 0x01
 8dc:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <sg_sFrame+0x29>
 8e0:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <sg_u8CellStatus>
 8e4:	89 17       	cp	r24, r25
 8e6:	08 f0       	brcs	.+2      	; 0x8ea <__EEPROM_REGION_LENGTH__+0xea>
 8e8:	5d c0       	rjmp	.+186    	; 0x9a4 <__EEPROM_REGION_LENGTH__+0x1a4>
 8ea:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <sg_u8CellStatus>
 8ee:	90 e0       	ldi	r25, 0x00	; 0
 8f0:	44 96       	adiw	r24, 0x14	; 20
 8f2:	88 0f       	add	r24, r24
 8f4:	99 1f       	adc	r25, r25
 8f6:	88 0f       	add	r24, r24
 8f8:	99 1f       	adc	r25, r25
 8fa:	ae 01       	movw	r20, r28
 8fc:	4f 5f       	subi	r20, 0xFF	; 255
 8fe:	5f 4f       	sbci	r21, 0xFF	; 255
 900:	be 01       	movw	r22, r28
 902:	6d 5f       	subi	r22, 0xFD	; 253
 904:	7f 4f       	sbci	r23, 0xFF	; 255
 906:	84 5f       	subi	r24, 0xF4	; 244
 908:	9e 4f       	sbci	r25, 0xFE	; 254
 90a:	0e 94 0f 22 	call	0x441e	; 0x441e <CellDataConvert>
 90e:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <sg_u8CellStatus>
 912:	f8 01       	movw	r30, r16
 914:	80 83       	st	Z, r24
 916:	ec e0       	ldi	r30, 0x0C	; 12
 918:	f1 e0       	ldi	r31, 0x01	; 1
 91a:	81 89       	ldd	r24, Z+17	; 0x11
 91c:	d8 01       	movw	r26, r16
 91e:	11 96       	adiw	r26, 0x01	; 1
 920:	8c 93       	st	X, r24
 922:	11 97       	sbiw	r26, 0x01	; 1
 924:	99 81       	ldd	r25, Y+1	; 0x01
 926:	8a 81       	ldd	r24, Y+2	; 0x02
 928:	12 96       	adiw	r26, 0x02	; 2
 92a:	9c 93       	st	X, r25
 92c:	12 97       	sbiw	r26, 0x02	; 2
 92e:	13 96       	adiw	r26, 0x03	; 3
 930:	8c 93       	st	X, r24
 932:	13 97       	sbiw	r26, 0x03	; 3
 934:	3b 81       	ldd	r19, Y+3	; 0x03
 936:	2c 81       	ldd	r18, Y+4	; 0x04
 938:	14 96       	adiw	r26, 0x04	; 4
 93a:	3c 93       	st	X, r19
 93c:	14 97       	sbiw	r26, 0x04	; 4
 93e:	15 96       	adiw	r26, 0x05	; 5
 940:	2c 93       	st	X, r18
 942:	83 2f       	mov	r24, r19
 944:	92 2f       	mov	r25, r18
 946:	64 e0       	ldi	r22, 0x04	; 4
 948:	70 e1       	ldi	r23, 0x10	; 16
 94a:	0e 94 37 22 	call	0x446e	; 0x446e <__udivmodhi4>
 94e:	44 e6       	ldi	r20, 0x64	; 100
 950:	64 9f       	mul	r22, r20
 952:	60 2d       	mov	r22, r0
 954:	11 24       	eor	r1, r1
 956:	d8 01       	movw	r26, r16
 958:	16 96       	adiw	r26, 0x06	; 6
 95a:	6c 93       	st	X, r22
 95c:	63 a9       	ldd	r22, Z+51	; 0x33
 95e:	74 a9       	ldd	r23, Z+52	; 0x34
 960:	85 a9       	ldd	r24, Z+53	; 0x35
 962:	96 a9       	ldd	r25, Z+54	; 0x36
 964:	68 1b       	sub	r22, r24
 966:	79 0b       	sbc	r23, r25
 968:	83 2f       	mov	r24, r19
 96a:	92 2f       	mov	r25, r18
 96c:	0e 94 37 22 	call	0x446e	; 0x446e <__udivmodhi4>
 970:	64 9f       	mul	r22, r20
 972:	60 2d       	mov	r22, r0
 974:	11 24       	eor	r1, r1
 976:	f8 01       	movw	r30, r16
 978:	67 83       	std	Z+7, r22	; 0x07
 97a:	48 e0       	ldi	r20, 0x08	; 8
 97c:	b8 01       	movw	r22, r16
 97e:	84 e0       	ldi	r24, 0x04	; 4
 980:	0e 94 6b 24 	call	0x48d6	; 0x48d6 <CANSendMessage>
 984:	88 23       	and	r24, r24
 986:	a1 f0       	breq	.+40     	; 0x9b0 <__EEPROM_REGION_LENGTH__+0x1b0>
 988:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <sg_u8CellStatus>
 98c:	8f 5f       	subi	r24, 0xFF	; 255
 98e:	80 93 1f 03 	sts	0x031F, r24	; 0x80031f <sg_u8CellStatus>
 992:	90 91 1f 03 	lds	r25, 0x031F	; 0x80031f <sg_u8CellStatus>
 996:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <sg_u8CellStatusTarget>
 99a:	98 17       	cp	r25, r24
 99c:	48 f0       	brcs	.+18     	; 0x9b0 <__EEPROM_REGION_LENGTH__+0x1b0>
 99e:	10 92 15 03 	sts	0x0315, r1	; 0x800315 <sg_bSendCellStatus>
 9a2:	06 c0       	rjmp	.+12     	; 0x9b0 <__EEPROM_REGION_LENGTH__+0x1b0>
 9a4:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <sg_u8CellStatusTarget>
 9a8:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <sg_u8CellStatus>
 9ac:	10 92 15 03 	sts	0x0315, r1	; 0x800315 <sg_bSendCellStatus>
 9b0:	80 91 13 03 	lds	r24, 0x0313	; 0x800313 <sg_bSendCellCommStatus>
 9b4:	88 23       	and	r24, r24
 9b6:	89 f1       	breq	.+98     	; 0xa1a <__EEPROM_REGION_LENGTH__+0x21a>
 9b8:	ec e0       	ldi	r30, 0x0C	; 12
 9ba:	f1 e0       	ldi	r31, 0x01	; 1
 9bc:	87 85       	ldd	r24, Z+15	; 0x0f
 9be:	d8 01       	movw	r26, r16
 9c0:	8c 93       	st	X, r24
 9c2:	80 89       	ldd	r24, Z+16	; 0x10
 9c4:	11 96       	adiw	r26, 0x01	; 1
 9c6:	8c 93       	st	X, r24
 9c8:	11 97       	sbiw	r26, 0x01	; 1
 9ca:	84 a1       	ldd	r24, Z+36	; 0x24
 9cc:	95 a1       	ldd	r25, Z+37	; 0x25
 9ce:	12 96       	adiw	r26, 0x02	; 2
 9d0:	8c 93       	st	X, r24
 9d2:	12 97       	sbiw	r26, 0x02	; 2
 9d4:	84 a1       	ldd	r24, Z+36	; 0x24
 9d6:	95 a1       	ldd	r25, Z+37	; 0x25
 9d8:	13 96       	adiw	r26, 0x03	; 3
 9da:	9c 93       	st	X, r25
 9dc:	13 97       	sbiw	r26, 0x03	; 3
 9de:	82 a5       	ldd	r24, Z+42	; 0x2a
 9e0:	14 96       	adiw	r26, 0x04	; 4
 9e2:	8c 93       	st	X, r24
 9e4:	14 97       	sbiw	r26, 0x04	; 4
 9e6:	86 a1       	ldd	r24, Z+38	; 0x26
 9e8:	8f 3f       	cpi	r24, 0xFF	; 255
 9ea:	31 f0       	breq	.+12     	; 0x9f8 <__EEPROM_REGION_LENGTH__+0x1f8>
 9ec:	81 a5       	ldd	r24, Z+41	; 0x29
 9ee:	96 a1       	ldd	r25, Z+38	; 0x26
 9f0:	89 1b       	sub	r24, r25
 9f2:	15 96       	adiw	r26, 0x05	; 5
 9f4:	8c 93       	st	X, r24
 9f6:	03 c0       	rjmp	.+6      	; 0x9fe <__EEPROM_REGION_LENGTH__+0x1fe>
 9f8:	8f ef       	ldi	r24, 0xFF	; 255
 9fa:	f8 01       	movw	r30, r16
 9fc:	85 83       	std	Z+5, r24	; 0x05
 9fe:	d8 01       	movw	r26, r16
 a00:	16 96       	adiw	r26, 0x06	; 6
 a02:	1c 92       	st	X, r1
 a04:	16 97       	sbiw	r26, 0x06	; 6
 a06:	17 96       	adiw	r26, 0x07	; 7
 a08:	1c 92       	st	X, r1
 a0a:	48 e0       	ldi	r20, 0x08	; 8
 a0c:	b8 01       	movw	r22, r16
 a0e:	86 e0       	ldi	r24, 0x06	; 6
 a10:	0e 94 6b 24 	call	0x48d6	; 0x48d6 <CANSendMessage>
 a14:	81 11       	cpse	r24, r1
 a16:	10 92 13 03 	sts	0x0313, r1	; 0x800313 <sg_bSendCellCommStatus>
 a1a:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <sg_bSendHardwareDetail>
 a1e:	88 23       	and	r24, r24
 a20:	91 f0       	breq	.+36     	; 0xa46 <__EEPROM_REGION_LENGTH__+0x246>
 a22:	b8 01       	movw	r22, r16
 a24:	c8 01       	movw	r24, r16
 a26:	02 96       	adiw	r24, 0x02	; 2
 a28:	0e 94 0d 19 	call	0x321a	; 0x321a <CurrentThresholdsGet>
 a2c:	f8 01       	movw	r30, r16
 a2e:	14 82       	std	Z+4, r1	; 0x04
 a30:	15 82       	std	Z+5, r1	; 0x05
 a32:	16 82       	std	Z+6, r1	; 0x06
 a34:	17 82       	std	Z+7, r1	; 0x07
 a36:	48 e0       	ldi	r20, 0x08	; 8
 a38:	b8 01       	movw	r22, r16
 a3a:	85 e0       	ldi	r24, 0x05	; 5
 a3c:	0e 94 6b 24 	call	0x48d6	; 0x48d6 <CANSendMessage>
 a40:	81 11       	cpse	r24, r1
 a42:	10 92 14 03 	sts	0x0314, r1	; 0x800314 <sg_bSendHardwareDetail>
 a46:	0f 90       	pop	r0
 a48:	0f 90       	pop	r0
 a4a:	0f 90       	pop	r0
 a4c:	0f 90       	pop	r0
 a4e:	df 91       	pop	r29
 a50:	cf 91       	pop	r28
 a52:	1f 91       	pop	r17
 a54:	0f 91       	pop	r16
 a56:	ff 90       	pop	r15
 a58:	ef 90       	pop	r14
 a5a:	df 90       	pop	r13
 a5c:	cf 90       	pop	r12
 a5e:	08 95       	ret

Disassembly of section .text.CellStringProcess:

00000a60 <CellStringProcess>:
 a60:	3f 92       	push	r3
 a62:	4f 92       	push	r4
 a64:	5f 92       	push	r5
 a66:	6f 92       	push	r6
 a68:	7f 92       	push	r7
 a6a:	8f 92       	push	r8
 a6c:	9f 92       	push	r9
 a6e:	af 92       	push	r10
 a70:	bf 92       	push	r11
 a72:	cf 92       	push	r12
 a74:	df 92       	push	r13
 a76:	ef 92       	push	r14
 a78:	ff 92       	push	r15
 a7a:	0f 93       	push	r16
 a7c:	1f 93       	push	r17
 a7e:	cf 93       	push	r28
 a80:	df 93       	push	r29
 a82:	00 d0       	rcall	.+0      	; 0xa84 <CellStringProcess+0x24>
 a84:	00 d0       	rcall	.+0      	; 0xa86 <CellStringProcess+0x26>
 a86:	00 d0       	rcall	.+0      	; 0xa88 <CellStringProcess+0x28>
 a88:	cd b7       	in	r28, 0x3d	; 61
 a8a:	de b7       	in	r29, 0x3e	; 62
 a8c:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <sg_sFrame+0x27>
 a90:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <sg_sFrame+0x28>
 a94:	89 2b       	or	r24, r25
 a96:	09 f4       	brne	.+2      	; 0xa9a <CellStringProcess+0x3a>
 a98:	1e c1       	rjmp	.+572    	; 0xcd6 <CellStringProcess+0x276>
 a9a:	ec e0       	ldi	r30, 0x0C	; 12
 a9c:	f1 e0       	ldi	r31, 0x01	; 1
 a9e:	8f ef       	ldi	r24, 0xFF	; 255
 aa0:	86 a3       	std	Z+38, r24	; 0x26
 aa2:	97 85       	ldd	r25, Z+15	; 0x0f
 aa4:	81 a5       	ldd	r24, Z+41	; 0x29
 aa6:	89 17       	cp	r24, r25
 aa8:	28 f4       	brcc	.+10     	; 0xab4 <CellStringProcess+0x54>
 aaa:	81 a5       	ldd	r24, Z+41	; 0x29
 aac:	87 87       	std	Z+15, r24	; 0x0f
 aae:	81 e0       	ldi	r24, 0x01	; 1
 ab0:	80 93 13 03 	sts	0x0313, r24	; 0x800313 <sg_bSendCellCommStatus>
 ab4:	ec e0       	ldi	r30, 0x0C	; 12
 ab6:	f1 e0       	ldi	r31, 0x01	; 1
 ab8:	90 89       	ldd	r25, Z+16	; 0x10
 aba:	81 a5       	ldd	r24, Z+41	; 0x29
 abc:	98 17       	cp	r25, r24
 abe:	28 f4       	brcc	.+10     	; 0xaca <CellStringProcess+0x6a>
 ac0:	81 a5       	ldd	r24, Z+41	; 0x29
 ac2:	80 8b       	std	Z+16, r24	; 0x10
 ac4:	81 e0       	ldi	r24, 0x01	; 1
 ac6:	80 93 13 03 	sts	0x0313, r24	; 0x800313 <sg_bSendCellCommStatus>
 aca:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <sg_sFrame+0x27>
 ace:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <sg_sFrame+0x28>
 ad2:	83 70       	andi	r24, 0x03	; 3
 ad4:	99 27       	eor	r25, r25
 ad6:	89 2b       	or	r24, r25
 ad8:	61 f0       	breq	.+24     	; 0xaf2 <CellStringProcess+0x92>
 ada:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <sg_sFrame+0x2a>
 ade:	8f 3f       	cpi	r24, 0xFF	; 255
 ae0:	41 f0       	breq	.+16     	; 0xaf2 <CellStringProcess+0x92>
 ae2:	ec e0       	ldi	r30, 0x0C	; 12
 ae4:	f1 e0       	ldi	r31, 0x01	; 1
 ae6:	82 a5       	ldd	r24, Z+42	; 0x2a
 ae8:	8f 5f       	subi	r24, 0xFF	; 255
 aea:	82 a7       	std	Z+42, r24	; 0x2a
 aec:	81 e0       	ldi	r24, 0x01	; 1
 aee:	80 93 13 03 	sts	0x0313, r24	; 0x800313 <sg_bSendCellCommStatus>
 af2:	ec e0       	ldi	r30, 0x0C	; 12
 af4:	f1 e0       	ldi	r31, 0x01	; 1
 af6:	14 aa       	std	Z+52, r1	; 0x34
 af8:	13 aa       	std	Z+51, r1	; 0x33
 afa:	8f ef       	ldi	r24, 0xFF	; 255
 afc:	9f ef       	ldi	r25, 0xFF	; 255
 afe:	96 ab       	std	Z+54, r25	; 0x36
 b00:	85 ab       	std	Z+53, r24	; 0x35
 b02:	10 ae       	std	Z+56, r1	; 0x38
 b04:	17 aa       	std	Z+55, r1	; 0x37
 b06:	80 e0       	ldi	r24, 0x00	; 0
 b08:	90 e8       	ldi	r25, 0x80	; 128
 b0a:	96 a7       	std	Z+46, r25	; 0x2e
 b0c:	85 a7       	std	Z+45, r24	; 0x2d
 b0e:	8f ef       	ldi	r24, 0xFF	; 255
 b10:	9f e7       	ldi	r25, 0x7F	; 127
 b12:	90 ab       	std	Z+48, r25	; 0x30
 b14:	87 a7       	std	Z+47, r24	; 0x2f
 b16:	12 aa       	std	Z+50, r1	; 0x32
 b18:	11 aa       	std	Z+49, r1	; 0x31
 b1a:	d1 2c       	mov	r13, r1
 b1c:	31 2c       	mov	r3, r1
 b1e:	c1 2c       	mov	r12, r1
 b20:	41 2c       	mov	r4, r1
 b22:	51 2c       	mov	r5, r1
 b24:	32 01       	movw	r6, r4
 b26:	81 2c       	mov	r8, r1
 b28:	91 2c       	mov	r9, r1
 b2a:	54 01       	movw	r10, r8
 b2c:	2f ef       	ldi	r18, 0xFF	; 255
 b2e:	3f e7       	ldi	r19, 0x7F	; 127
 b30:	3e 83       	std	Y+6, r19	; 0x06
 b32:	2d 83       	std	Y+5, r18	; 0x05
 b34:	80 e0       	ldi	r24, 0x00	; 0
 b36:	90 e8       	ldi	r25, 0x80	; 128
 b38:	9c 83       	std	Y+4, r25	; 0x04
 b3a:	8b 83       	std	Y+3, r24	; 0x03
 b3c:	6b c0       	rjmp	.+214    	; 0xc14 <CellStringProcess+0x1b4>
 b3e:	0d 2d       	mov	r16, r13
 b40:	10 e0       	ldi	r17, 0x00	; 0
 b42:	f8 01       	movw	r30, r16
 b44:	74 96       	adiw	r30, 0x14	; 20
 b46:	ee 0f       	add	r30, r30
 b48:	ff 1f       	adc	r31, r31
 b4a:	ee 0f       	add	r30, r30
 b4c:	ff 1f       	adc	r31, r31
 b4e:	e4 5f       	subi	r30, 0xF4	; 244
 b50:	fe 4f       	sbci	r31, 0xFE	; 254
 b52:	80 81       	ld	r24, Z
 b54:	91 81       	ldd	r25, Z+1	; 0x01
 b56:	9a 83       	std	Y+2, r25	; 0x02
 b58:	89 83       	std	Y+1, r24	; 0x01
 b5a:	e2 80       	ldd	r14, Z+2	; 0x02
 b5c:	f3 80       	ldd	r15, Z+3	; 0x03
 b5e:	60 e0       	ldi	r22, 0x00	; 0
 b60:	70 e0       	ldi	r23, 0x00	; 0
 b62:	c7 01       	movw	r24, r14
 b64:	0e 94 23 1c 	call	0x3846	; 0x3846 <CellDataConvertTemperature>
 b68:	88 23       	and	r24, r24
 b6a:	f1 f0       	breq	.+60     	; 0xba8 <CellStringProcess+0x148>
 b6c:	f4 fe       	sbrs	r15, 4
 b6e:	03 c0       	rjmp	.+6      	; 0xb76 <CellStringProcess+0x116>
 b70:	c7 01       	movw	r24, r14
 b72:	90 6f       	ori	r25, 0xF0	; 240
 b74:	02 c0       	rjmp	.+4      	; 0xb7a <CellStringProcess+0x11a>
 b76:	c7 01       	movw	r24, r14
 b78:	9f 77       	andi	r25, 0x7F	; 127
 b7a:	eb 81       	ldd	r30, Y+3	; 0x03
 b7c:	fc 81       	ldd	r31, Y+4	; 0x04
 b7e:	e8 17       	cp	r30, r24
 b80:	f9 07       	cpc	r31, r25
 b82:	14 f4       	brge	.+4      	; 0xb88 <CellStringProcess+0x128>
 b84:	9c 83       	std	Y+4, r25	; 0x04
 b86:	8b 83       	std	Y+3, r24	; 0x03
 b88:	2d 81       	ldd	r18, Y+5	; 0x05
 b8a:	3e 81       	ldd	r19, Y+6	; 0x06
 b8c:	82 17       	cp	r24, r18
 b8e:	93 07       	cpc	r25, r19
 b90:	14 f4       	brge	.+4      	; 0xb96 <CellStringProcess+0x136>
 b92:	9e 83       	std	Y+6, r25	; 0x06
 b94:	8d 83       	std	Y+5, r24	; 0x05
 b96:	09 2e       	mov	r0, r25
 b98:	00 0c       	add	r0, r0
 b9a:	aa 0b       	sbc	r26, r26
 b9c:	bb 0b       	sbc	r27, r27
 b9e:	88 0e       	add	r8, r24
 ba0:	99 1e       	adc	r9, r25
 ba2:	aa 1e       	adc	r10, r26
 ba4:	bb 1e       	adc	r11, r27
 ba6:	33 94       	inc	r3
 ba8:	f8 01       	movw	r30, r16
 baa:	74 96       	adiw	r30, 0x14	; 20
 bac:	ee 0f       	add	r30, r30
 bae:	ff 1f       	adc	r31, r31
 bb0:	ee 0f       	add	r30, r30
 bb2:	ff 1f       	adc	r31, r31
 bb4:	e4 5f       	subi	r30, 0xF4	; 244
 bb6:	fe 4f       	sbci	r31, 0xFE	; 254
 bb8:	80 81       	ld	r24, Z
 bba:	91 81       	ldd	r25, Z+1	; 0x01
 bbc:	99 23       	and	r25, r25
 bbe:	1c f4       	brge	.+6      	; 0xbc6 <CellStringProcess+0x166>
 bc0:	81 e0       	ldi	r24, 0x01	; 1
 bc2:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <sg_sFrame+0x23>
 bc6:	be 01       	movw	r22, r28
 bc8:	6f 5f       	subi	r22, 0xFF	; 255
 bca:	7f 4f       	sbci	r23, 0xFF	; 255
 bcc:	89 81       	ldd	r24, Y+1	; 0x01
 bce:	9a 81       	ldd	r25, Y+2	; 0x02
 bd0:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <CellDataConvertVoltage>
 bd4:	88 23       	and	r24, r24
 bd6:	e9 f0       	breq	.+58     	; 0xc12 <CellStringProcess+0x1b2>
 bd8:	20 91 3f 01 	lds	r18, 0x013F	; 0x80013f <sg_sFrame+0x33>
 bdc:	30 91 40 01 	lds	r19, 0x0140	; 0x800140 <sg_sFrame+0x34>
 be0:	89 81       	ldd	r24, Y+1	; 0x01
 be2:	9a 81       	ldd	r25, Y+2	; 0x02
 be4:	28 17       	cp	r18, r24
 be6:	39 07       	cpc	r19, r25
 be8:	20 f4       	brcc	.+8      	; 0xbf2 <CellStringProcess+0x192>
 bea:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <sg_sFrame+0x34>
 bee:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <sg_sFrame+0x33>
 bf2:	20 91 41 01 	lds	r18, 0x0141	; 0x800141 <sg_sFrame+0x35>
 bf6:	30 91 42 01 	lds	r19, 0x0142	; 0x800142 <sg_sFrame+0x36>
 bfa:	82 17       	cp	r24, r18
 bfc:	93 07       	cpc	r25, r19
 bfe:	20 f4       	brcc	.+8      	; 0xc08 <CellStringProcess+0x1a8>
 c00:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <sg_sFrame+0x36>
 c04:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <sg_sFrame+0x35>
 c08:	48 0e       	add	r4, r24
 c0a:	59 1e       	adc	r5, r25
 c0c:	61 1c       	adc	r6, r1
 c0e:	71 1c       	adc	r7, r1
 c10:	c3 94       	inc	r12
 c12:	d3 94       	inc	r13
 c14:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <sg_sFrame+0x29>
 c18:	d8 16       	cp	r13, r24
 c1a:	08 f4       	brcc	.+2      	; 0xc1e <CellStringProcess+0x1be>
 c1c:	90 cf       	rjmp	.-224    	; 0xb3e <CellStringProcess+0xde>
 c1e:	cc 20       	and	r12, r12
 c20:	79 f1       	breq	.+94     	; 0xc80 <CellStringProcess+0x220>
 c22:	0c e0       	ldi	r16, 0x0C	; 12
 c24:	11 e0       	ldi	r17, 0x01	; 1
 c26:	f8 01       	movw	r30, r16
 c28:	41 ae       	std	Z+57, r4	; 0x39
 c2a:	52 ae       	std	Z+58, r5	; 0x3a
 c2c:	63 ae       	std	Z+59, r6	; 0x3b
 c2e:	74 ae       	std	Z+60, r7	; 0x3c
 c30:	61 ad       	ldd	r22, Z+57	; 0x39
 c32:	72 ad       	ldd	r23, Z+58	; 0x3a
 c34:	83 ad       	ldd	r24, Z+59	; 0x3b
 c36:	94 ad       	ldd	r25, Z+60	; 0x3c
 c38:	2c 2d       	mov	r18, r12
 c3a:	30 e0       	ldi	r19, 0x00	; 0
 c3c:	40 e0       	ldi	r20, 0x00	; 0
 c3e:	50 e0       	ldi	r21, 0x00	; 0
 c40:	0e 94 c3 1f 	call	0x3f86	; 0x3f86 <__udivmodsi4>
 c44:	f8 01       	movw	r30, r16
 c46:	30 af       	std	Z+56, r19	; 0x38
 c48:	27 ab       	std	Z+55, r18	; 0x37
 c4a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <sg_eModuleControllerStateCurrent>
 c4e:	83 30       	cpi	r24, 0x03	; 3
 c50:	b9 f0       	breq	.+46     	; 0xc80 <CellStringProcess+0x220>
 c52:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <sg_bCellBalancedOnce>
 c56:	81 11       	cpse	r24, r1
 c58:	13 c0       	rjmp	.+38     	; 0xc80 <CellStringProcess+0x220>
 c5a:	23 a9       	ldd	r18, Z+51	; 0x33
 c5c:	34 a9       	ldd	r19, Z+52	; 0x34
 c5e:	85 a9       	ldd	r24, Z+53	; 0x35
 c60:	96 a9       	ldd	r25, Z+54	; 0x36
 c62:	28 17       	cp	r18, r24
 c64:	39 07       	cpc	r19, r25
 c66:	60 f0       	brcs	.+24     	; 0xc80 <CellStringProcess+0x220>
 c68:	83 a9       	ldd	r24, Z+51	; 0x33
 c6a:	94 a9       	ldd	r25, Z+52	; 0x34
 c6c:	25 a9       	ldd	r18, Z+53	; 0x35
 c6e:	36 a9       	ldd	r19, Z+54	; 0x36
 c70:	82 1b       	sub	r24, r18
 c72:	93 0b       	sbc	r25, r19
 c74:	80 34       	cpi	r24, 0x40	; 64
 c76:	91 05       	cpc	r25, r1
 c78:	18 f0       	brcs	.+6      	; 0xc80 <CellStringProcess+0x220>
 c7a:	81 e0       	ldi	r24, 0x01	; 1
 c7c:	80 93 12 03 	sts	0x0312, r24	; 0x800312 <sg_bCellBalanceReady>
 c80:	33 20       	and	r3, r3
 c82:	c9 f0       	breq	.+50     	; 0xcb6 <CellStringProcess+0x256>
 c84:	23 2d       	mov	r18, r3
 c86:	30 e0       	ldi	r19, 0x00	; 0
 c88:	40 e0       	ldi	r20, 0x00	; 0
 c8a:	50 e0       	ldi	r21, 0x00	; 0
 c8c:	c5 01       	movw	r24, r10
 c8e:	b4 01       	movw	r22, r8
 c90:	0e 94 61 21 	call	0x42c2	; 0x42c2 <__divmodsi4>
 c94:	6d e3       	ldi	r22, 0x3D	; 61
 c96:	71 e0       	ldi	r23, 0x01	; 1
 c98:	c9 01       	movw	r24, r18
 c9a:	0e 94 23 1c 	call	0x3846	; 0x3846 <CellDataConvertTemperature>
 c9e:	69 e3       	ldi	r22, 0x39	; 57
 ca0:	71 e0       	ldi	r23, 0x01	; 1
 ca2:	8b 81       	ldd	r24, Y+3	; 0x03
 ca4:	9c 81       	ldd	r25, Y+4	; 0x04
 ca6:	0e 94 23 1c 	call	0x3846	; 0x3846 <CellDataConvertTemperature>
 caa:	6b e3       	ldi	r22, 0x3B	; 59
 cac:	71 e0       	ldi	r23, 0x01	; 1
 cae:	8d 81       	ldd	r24, Y+5	; 0x05
 cb0:	9e 81       	ldd	r25, Y+6	; 0x06
 cb2:	0e 94 23 1c 	call	0x3846	; 0x3846 <CellDataConvertTemperature>
 cb6:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_bSDCardReady>
 cba:	88 23       	and	r24, r24
 cbc:	51 f0       	breq	.+20     	; 0xcd2 <CellStringProcess+0x272>
 cbe:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <sg_eModuleControllerStateCurrent>
 cc2:	88 23       	and	r24, r24
 cc4:	31 f0       	breq	.+12     	; 0xcd2 <CellStringProcess+0x272>
 cc6:	8c e0       	ldi	r24, 0x0C	; 12
 cc8:	91 e0       	ldi	r25, 0x01	; 1
 cca:	0e 94 86 12 	call	0x250c	; 0x250c <STORE_WriteFrame>
 cce:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <sg_bSDCardReady>
 cd2:	0e 94 1d 25 	call	0x4a3a	; 0x4a3a <SendModuleControllerStatus>
 cd6:	26 96       	adiw	r28, 0x06	; 6
 cd8:	0f b6       	in	r0, 0x3f	; 63
 cda:	f8 94       	cli
 cdc:	de bf       	out	0x3e, r29	; 62
 cde:	0f be       	out	0x3f, r0	; 63
 ce0:	cd bf       	out	0x3d, r28	; 61
 ce2:	df 91       	pop	r29
 ce4:	cf 91       	pop	r28
 ce6:	1f 91       	pop	r17
 ce8:	0f 91       	pop	r16
 cea:	ff 90       	pop	r15
 cec:	ef 90       	pop	r14
 cee:	df 90       	pop	r13
 cf0:	cf 90       	pop	r12
 cf2:	bf 90       	pop	r11
 cf4:	af 90       	pop	r10
 cf6:	9f 90       	pop	r9
 cf8:	8f 90       	pop	r8
 cfa:	7f 90       	pop	r7
 cfc:	6f 90       	pop	r6
 cfe:	5f 90       	pop	r5
 d00:	4f 90       	pop	r4
 d02:	3f 90       	pop	r3
 d04:	08 95       	ret

Disassembly of section .text.Delay:

00003db4 <Delay>:
    3db4:	ab 01       	movw	r20, r22
    3db6:	bc 01       	movw	r22, r24
    3db8:	4f 5f       	subi	r20, 0xFF	; 255
    3dba:	5f 4f       	sbci	r21, 0xFF	; 255
    3dbc:	6f 4f       	sbci	r22, 0xFF	; 255
    3dbe:	7f 4f       	sbci	r23, 0xFF	; 255
    3dc0:	76 95       	lsr	r23
    3dc2:	67 95       	ror	r22
    3dc4:	57 95       	ror	r21
    3dc6:	47 95       	ror	r20
    3dc8:	96 b5       	in	r25, 0x26	; 38
    3dca:	17 c0       	rjmp	.+46     	; 0x3dfa <Delay+0x46>
    3dcc:	86 b5       	in	r24, 0x26	; 38
    3dce:	98 17       	cp	r25, r24
    3dd0:	e9 f3       	breq	.-6      	; 0x3dcc <Delay+0x18>
    3dd2:	26 b5       	in	r18, 0x26	; 38
    3dd4:	82 2f       	mov	r24, r18
    3dd6:	89 1b       	sub	r24, r25
    3dd8:	90 e0       	ldi	r25, 0x00	; 0
    3dda:	a0 e0       	ldi	r26, 0x00	; 0
    3ddc:	b0 e0       	ldi	r27, 0x00	; 0
    3dde:	48 17       	cp	r20, r24
    3de0:	59 07       	cpc	r21, r25
    3de2:	6a 07       	cpc	r22, r26
    3de4:	7b 07       	cpc	r23, r27
    3de6:	28 f0       	brcs	.+10     	; 0x3df2 <Delay+0x3e>
    3de8:	48 1b       	sub	r20, r24
    3dea:	59 0b       	sbc	r21, r25
    3dec:	6a 0b       	sbc	r22, r26
    3dee:	7b 0b       	sbc	r23, r27
    3df0:	03 c0       	rjmp	.+6      	; 0x3df8 <Delay+0x44>
    3df2:	40 e0       	ldi	r20, 0x00	; 0
    3df4:	50 e0       	ldi	r21, 0x00	; 0
    3df6:	ba 01       	movw	r22, r20
    3df8:	92 2f       	mov	r25, r18
    3dfa:	41 15       	cp	r20, r1
    3dfc:	51 05       	cpc	r21, r1
    3dfe:	61 05       	cpc	r22, r1
    3e00:	71 05       	cpc	r23, r1
    3e02:	21 f7       	brne	.-56     	; 0x3dcc <Delay+0x18>
    3e04:	08 95       	ret

Disassembly of section .text.PlatformAssert:

00004348 <PlatformAssert>:



void PlatformAssert( const char* peFilename, const int s32LineNumber )
{
	DebugOut("Assert %s: %d\n", peFilename, s32LineNumber);
    4348:	5f 93       	push	r21
    434a:	4f 93       	push	r20
    434c:	8f 93       	push	r24
    434e:	7f 93       	push	r23
    4350:	6f 93       	push	r22
    4352:	8f e4       	ldi	r24, 0x4F	; 79
    4354:	91 e0       	ldi	r25, 0x01	; 1
    4356:	a0 e0       	ldi	r26, 0x00	; 0
    4358:	af 93       	push	r26
    435a:	9f 93       	push	r25
    435c:	8f 93       	push	r24
    435e:	0e 94 fb 24 	call	0x49f6	; 0x49f6 <DebugOut>
	
//	while(1);
}
    4362:	8d b7       	in	r24, 0x3d	; 61
    4364:	9e b7       	in	r25, 0x3e	; 62
    4366:	08 96       	adiw	r24, 0x08	; 8
    4368:	0f b6       	in	r0, 0x3f	; 63
    436a:	f8 94       	cli
    436c:	9e bf       	out	0x3e, r25	; 62
    436e:	0f be       	out	0x3f, r0	; 63
    4370:	8d bf       	out	0x3d, r24	; 61
    4372:	08 95       	ret

Disassembly of section .text.ModuleControllerStateHandle:

0000160c <ModuleControllerStateHandle>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    160c:	1f 93       	push	r17
    160e:	cf 93       	push	r28
    1610:	df 93       	push	r29
    1612:	d0 91 05 01 	lds	r29, 0x0105	; 0x800105 <sg_eModuleControllerStateTarget>
    1616:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <sg_eModuleControllerStateMax>
    161a:	8d 17       	cp	r24, r29
    161c:	30 f0       	brcs	.+12     	; 0x162a <ModuleControllerStateHandle+0x1e>
    161e:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <sg_eModuleControllerStateCurrent>
    1622:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <sg_eModuleControllerStateMax>
    1626:	89 17       	cp	r24, r25
    1628:	10 f4       	brcc	.+4      	; 0x162e <ModuleControllerStateHandle+0x22>
    162a:	d0 91 04 01 	lds	r29, 0x0104	; 0x800104 <sg_eModuleControllerStateMax>
    162e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <sg_eModuleControllerStateCurrent>
    1632:	d8 17       	cp	r29, r24
    1634:	09 f4       	brne	.+2      	; 0x1638 <ModuleControllerStateHandle+0x2c>
    1636:	e1 c0       	rjmp	.+450    	; 0x17fa <ModuleControllerStateHandle+0x1ee>
    1638:	d2 30       	cpi	r29, 0x02	; 2
    163a:	09 f4       	brne	.+2      	; 0x163e <ModuleControllerStateHandle+0x32>
    163c:	6e c0       	rjmp	.+220    	; 0x171a <ModuleControllerStateHandle+0x10e>
    163e:	28 f4       	brcc	.+10     	; 0x164a <ModuleControllerStateHandle+0x3e>
    1640:	dd 23       	and	r29, r29
    1642:	89 f0       	breq	.+34     	; 0x1666 <ModuleControllerStateHandle+0x5a>
    1644:	d1 30       	cpi	r29, 0x01	; 1
    1646:	e1 f1       	breq	.+120    	; 0x16c0 <ModuleControllerStateHandle+0xb4>
    1648:	cc c0       	rjmp	.+408    	; 0x17e2 <ModuleControllerStateHandle+0x1d6>
    164a:	d3 30       	cpi	r29, 0x03	; 3
    164c:	09 f4       	brne	.+2      	; 0x1650 <ModuleControllerStateHandle+0x44>
    164e:	9d c0       	rjmp	.+314    	; 0x178a <ModuleControllerStateHandle+0x17e>
    1650:	d5 30       	cpi	r29, 0x05	; 5
    1652:	09 f0       	breq	.+2      	; 0x1656 <ModuleControllerStateHandle+0x4a>
    1654:	c6 c0       	rjmp	.+396    	; 0x17e2 <ModuleControllerStateHandle+0x1d6>
    1656:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <sg_eModuleControllerStateCurrent>
    165a:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <sg_eModuleControllerStateTarget>
    165e:	d0 91 06 01 	lds	r29, 0x0106	; 0x800106 <sg_eModuleControllerStateCurrent>
    1662:	0e 94 17 25 	call	0x4a2e	; 0x4a2e <ADCSetPowerOn>
    1666:	88 b1       	in	r24, 0x08	; 8
    1668:	8f 7e       	andi	r24, 0xEF	; 239
    166a:	88 b9       	out	0x08, r24	; 8
    166c:	68 e8       	ldi	r22, 0x88	; 136
    166e:	73 e1       	ldi	r23, 0x13	; 19
    1670:	80 e0       	ldi	r24, 0x00	; 0
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <Delay>
    1678:	8e b1       	in	r24, 0x0e	; 14
    167a:	8d 7f       	andi	r24, 0xFD	; 253
    167c:	8e b9       	out	0x0e, r24	; 14
    167e:	68 e8       	ldi	r22, 0x88	; 136
    1680:	73 e1       	ldi	r23, 0x13	; 19
    1682:	80 e0       	ldi	r24, 0x00	; 0
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <Delay>
    168a:	eb e6       	ldi	r30, 0x6B	; 107
    168c:	f0 e0       	ldi	r31, 0x00	; 0
    168e:	80 81       	ld	r24, Z
    1690:	8d 7f       	andi	r24, 0xFD	; 253
    1692:	80 83       	st	Z, r24
    1694:	e8 e6       	ldi	r30, 0x68	; 104
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	80 81       	ld	r24, Z
    169a:	8d 7f       	andi	r24, 0xFD	; 253
    169c:	80 83       	st	Z, r24
    169e:	81 e0       	ldi	r24, 0x01	; 1
    16a0:	80 93 12 03 	sts	0x0312, r24	; 0x800312 <sg_bCellBalanceReady>
    16a4:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <sg_bCellBalancedOnce>
    16a8:	10 92 10 03 	sts	0x0310, r1	; 0x800310 <sg_bStopDischarge>
    16ac:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_bSDCardReady>
    16b0:	88 23       	and	r24, r24
    16b2:	09 f4       	brne	.+2      	; 0x16b6 <ModuleControllerStateHandle+0xaa>
    16b4:	9e c0       	rjmp	.+316    	; 0x17f2 <ModuleControllerStateHandle+0x1e6>
    16b6:	0e 94 d0 21 	call	0x43a0	; 0x43a0 <STORE_EndSession>
    16ba:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <sg_bSDCardReady>
    16be:	99 c0       	rjmp	.+306    	; 0x17f2 <ModuleControllerStateHandle+0x1e6>
    16c0:	88 b1       	in	r24, 0x08	; 8
    16c2:	8f 7e       	andi	r24, 0xEF	; 239
    16c4:	88 b9       	out	0x08, r24	; 8
    16c6:	68 e8       	ldi	r22, 0x88	; 136
    16c8:	73 e1       	ldi	r23, 0x13	; 19
    16ca:	80 e0       	ldi	r24, 0x00	; 0
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <Delay>
    16d2:	eb e6       	ldi	r30, 0x6B	; 107
    16d4:	f0 e0       	ldi	r31, 0x00	; 0
    16d6:	80 81       	ld	r24, Z
    16d8:	8d 7f       	andi	r24, 0xFD	; 253
    16da:	80 83       	st	Z, r24
    16dc:	e8 e6       	ldi	r30, 0x68	; 104
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	80 81       	ld	r24, Z
    16e2:	8d 7f       	andi	r24, 0xFD	; 253
    16e4:	80 83       	st	Z, r24
    16e6:	8e b1       	in	r24, 0x0e	; 14
    16e8:	82 60       	ori	r24, 0x02	; 2
    16ea:	8e b9       	out	0x0e, r24	; 14
    16ec:	68 e8       	ldi	r22, 0x88	; 136
    16ee:	73 e1       	ldi	r23, 0x13	; 19
    16f0:	80 e0       	ldi	r24, 0x00	; 0
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <Delay>
    16f8:	81 e0       	ldi	r24, 0x01	; 1
    16fa:	80 93 12 03 	sts	0x0312, r24	; 0x800312 <sg_bCellBalanceReady>
    16fe:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <sg_bCellBalancedOnce>
    1702:	10 92 10 03 	sts	0x0310, r1	; 0x800310 <sg_bStopDischarge>
    1706:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_bSDCardReady>
    170a:	88 23       	and	r24, r24
    170c:	09 f4       	brne	.+2      	; 0x1710 <ModuleControllerStateHandle+0x104>
    170e:	71 c0       	rjmp	.+226    	; 0x17f2 <ModuleControllerStateHandle+0x1e6>
    1710:	0e 94 5d 20 	call	0x40ba	; 0x40ba <STORE_StartNewSession>
    1714:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <sg_bSDCardReady>
    1718:	6c c0       	rjmp	.+216    	; 0x17f2 <ModuleControllerStateHandle+0x1e6>
    171a:	61 99       	sbic	0x0c, 1	; 12
    171c:	09 c0       	rjmp	.+18     	; 0x1730 <ModuleControllerStateHandle+0x124>
    171e:	8e b1       	in	r24, 0x0e	; 14
    1720:	82 60       	ori	r24, 0x02	; 2
    1722:	8e b9       	out	0x0e, r24	; 14
    1724:	68 e8       	ldi	r22, 0x88	; 136
    1726:	73 e1       	ldi	r23, 0x13	; 19
    1728:	80 e0       	ldi	r24, 0x00	; 0
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <Delay>
    1730:	cb e0       	ldi	r28, 0x0B	; 11
    1732:	26 c0       	rjmp	.+76     	; 0x1780 <ModuleControllerStateHandle+0x174>
    1734:	88 b1       	in	r24, 0x08	; 8
    1736:	80 61       	ori	r24, 0x10	; 16
    1738:	88 b9       	out	0x08, r24	; 8
    173a:	88 b1       	in	r24, 0x08	; 8
    173c:	8f 77       	andi	r24, 0x7F	; 127
    173e:	88 b9       	out	0x08, r24	; 8
    1740:	88 b1       	in	r24, 0x08	; 8
    1742:	80 68       	ori	r24, 0x80	; 128
    1744:	88 b9       	out	0x08, r24	; 8
    1746:	68 ee       	ldi	r22, 0xE8	; 232
    1748:	73 e0       	ldi	r23, 0x03	; 3
    174a:	80 e0       	ldi	r24, 0x00	; 0
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <Delay>
    1752:	88 b1       	in	r24, 0x08	; 8
    1754:	8f 7e       	andi	r24, 0xEF	; 239
    1756:	88 b9       	out	0x08, r24	; 8
    1758:	68 e8       	ldi	r22, 0x88	; 136
    175a:	73 e1       	ldi	r23, 0x13	; 19
    175c:	80 e0       	ldi	r24, 0x00	; 0
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <Delay>
    1764:	60 e5       	ldi	r22, 0x50	; 80
    1766:	73 ec       	ldi	r23, 0xC3	; 195
    1768:	80 e0       	ldi	r24, 0x00	; 0
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <Delay>
    1770:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <sg_bOvercurrentSignal>
    1774:	88 23       	and	r24, r24
    1776:	19 f0       	breq	.+6      	; 0x177e <ModuleControllerStateHandle+0x172>
    1778:	10 92 0f 03 	sts	0x030F, r1	; 0x80030f <sg_bOvercurrentSignal>
    177c:	01 c0       	rjmp	.+2      	; 0x1780 <ModuleControllerStateHandle+0x174>
    177e:	c1 2f       	mov	r28, r17
    1780:	1f ef       	ldi	r17, 0xFF	; 255
    1782:	1c 0f       	add	r17, r28
    1784:	c1 11       	cpse	r28, r1
    1786:	d6 cf       	rjmp	.-84     	; 0x1734 <ModuleControllerStateHandle+0x128>
    1788:	34 c0       	rjmp	.+104    	; 0x17f2 <ModuleControllerStateHandle+0x1e6>
    178a:	61 99       	sbic	0x0c, 1	; 12
    178c:	09 c0       	rjmp	.+18     	; 0x17a0 <ModuleControllerStateHandle+0x194>
    178e:	8e b1       	in	r24, 0x0e	; 14
    1790:	82 60       	ori	r24, 0x02	; 2
    1792:	8e b9       	out	0x0e, r24	; 14
    1794:	68 e8       	ldi	r22, 0x88	; 136
    1796:	73 e1       	ldi	r23, 0x13	; 19
    1798:	80 e0       	ldi	r24, 0x00	; 0
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <Delay>
    17a0:	88 b1       	in	r24, 0x08	; 8
    17a2:	80 61       	ori	r24, 0x10	; 16
    17a4:	88 b9       	out	0x08, r24	; 8
    17a6:	88 b1       	in	r24, 0x08	; 8
    17a8:	8f 77       	andi	r24, 0x7F	; 127
    17aa:	88 b9       	out	0x08, r24	; 8
    17ac:	88 b1       	in	r24, 0x08	; 8
    17ae:	80 68       	ori	r24, 0x80	; 128
    17b0:	88 b9       	out	0x08, r24	; 8
    17b2:	68 e8       	ldi	r22, 0x88	; 136
    17b4:	73 e1       	ldi	r23, 0x13	; 19
    17b6:	80 e0       	ldi	r24, 0x00	; 0
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <Delay>
    17be:	10 92 12 03 	sts	0x0312, r1	; 0x800312 <sg_bCellBalanceReady>
    17c2:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <sg_bCellBalancedOnce>
    17c6:	81 e0       	ldi	r24, 0x01	; 1
    17c8:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <sg_bStopDischarge>
    17cc:	eb e6       	ldi	r30, 0x6B	; 107
    17ce:	f0 e0       	ldi	r31, 0x00	; 0
    17d0:	80 81       	ld	r24, Z
    17d2:	82 60       	ori	r24, 0x02	; 2
    17d4:	80 83       	st	Z, r24
    17d6:	e8 e6       	ldi	r30, 0x68	; 104
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	80 81       	ld	r24, Z
    17dc:	82 60       	ori	r24, 0x02	; 2
    17de:	80 83       	st	Z, r24
    17e0:	08 c0       	rjmp	.+16     	; 0x17f2 <ModuleControllerStateHandle+0x1e6>
    17e2:	4e ec       	ldi	r20, 0xCE	; 206
    17e4:	53 e0       	ldi	r21, 0x03	; 3
    17e6:	6e e5       	ldi	r22, 0x5E	; 94
    17e8:	71 e0       	ldi	r23, 0x01	; 1
    17ea:	80 e0       	ldi	r24, 0x00	; 0
    17ec:	0e 94 a4 21 	call	0x4348	; 0x4348 <PlatformAssert>
    17f0:	d5 e0       	ldi	r29, 0x05	; 5
    17f2:	d0 93 06 01 	sts	0x0106, r29	; 0x800106 <sg_eModuleControllerStateCurrent>
    17f6:	0e 94 1d 25 	call	0x4a3a	; 0x4a3a <SendModuleControllerStatus>
    17fa:	df 91       	pop	r29
    17fc:	cf 91       	pop	r28
    17fe:	1f 91       	pop	r17
    1800:	08 95       	ret

Disassembly of section .text.PlatformGetRegistrationID:

00004a7a <PlatformGetRegistrationID>:
}

uint8_t PlatformGetRegistrationID( void )
{
	return(sg_u8ModuleRegistrationID);
}
    4a7a:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <sg_u8ModuleRegistrationID>
    4a7e:	08 95       	ret

Disassembly of section .text.SetSysclock:

00004a46 <SetSysclock>:

void SetSysclock( void )
{
	// First set the prescaler enable
	CLKPR = (1 << CLKPCE);
    4a46:	e1 e6       	ldi	r30, 0x61	; 97
    4a48:	f0 e0       	ldi	r31, 0x00	; 0
    4a4a:	80 e8       	ldi	r24, 0x80	; 128
    4a4c:	80 83       	st	Z, r24
	
	// Now set the desired prescale value
	CLKPR = SYSCLOCK_PRESCALE;
    4a4e:	10 82       	st	Z, r1
    4a50:	08 95       	ret

Disassembly of section .text.ModuleControllerGetUniqueID:

000035d8 <ModuleControllerGetUniqueID>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    35d8:	cf 92       	push	r12
    35da:	df 92       	push	r13
    35dc:	ef 92       	push	r14
    35de:	ff 92       	push	r15
    35e0:	80 e0       	ldi	r24, 0x00	; 0
    35e2:	90 e0       	ldi	r25, 0x00	; 0
    35e4:	0e 94 b6 24 	call	0x496c	; 0x496c <EEPROMRead>
    35e8:	c8 2e       	mov	r12, r24
    35ea:	d1 2c       	mov	r13, r1
    35ec:	e1 2c       	mov	r14, r1
    35ee:	f1 2c       	mov	r15, r1
    35f0:	81 e0       	ldi	r24, 0x01	; 1
    35f2:	90 e0       	ldi	r25, 0x00	; 0
    35f4:	0e 94 b6 24 	call	0x496c	; 0x496c <EEPROMRead>
    35f8:	90 e0       	ldi	r25, 0x00	; 0
    35fa:	a0 e0       	ldi	r26, 0x00	; 0
    35fc:	b0 e0       	ldi	r27, 0x00	; 0
    35fe:	ba 2f       	mov	r27, r26
    3600:	a9 2f       	mov	r26, r25
    3602:	98 2f       	mov	r25, r24
    3604:	88 27       	eor	r24, r24
    3606:	c8 2a       	or	r12, r24
    3608:	d9 2a       	or	r13, r25
    360a:	ea 2a       	or	r14, r26
    360c:	fb 2a       	or	r15, r27
    360e:	82 e0       	ldi	r24, 0x02	; 2
    3610:	90 e0       	ldi	r25, 0x00	; 0
    3612:	0e 94 b6 24 	call	0x496c	; 0x496c <EEPROMRead>
    3616:	90 e0       	ldi	r25, 0x00	; 0
    3618:	a0 e0       	ldi	r26, 0x00	; 0
    361a:	b0 e0       	ldi	r27, 0x00	; 0
    361c:	dc 01       	movw	r26, r24
    361e:	99 27       	eor	r25, r25
    3620:	88 27       	eor	r24, r24
    3622:	c8 2a       	or	r12, r24
    3624:	d9 2a       	or	r13, r25
    3626:	ea 2a       	or	r14, r26
    3628:	fb 2a       	or	r15, r27
    362a:	83 e0       	ldi	r24, 0x03	; 3
    362c:	90 e0       	ldi	r25, 0x00	; 0
    362e:	0e 94 b6 24 	call	0x496c	; 0x496c <EEPROMRead>
    3632:	90 e0       	ldi	r25, 0x00	; 0
    3634:	a0 e0       	ldi	r26, 0x00	; 0
    3636:	b0 e0       	ldi	r27, 0x00	; 0
    3638:	b8 2f       	mov	r27, r24
    363a:	aa 27       	eor	r26, r26
    363c:	99 27       	eor	r25, r25
    363e:	88 27       	eor	r24, r24
    3640:	bc 01       	movw	r22, r24
    3642:	cd 01       	movw	r24, r26
    3644:	6c 29       	or	r22, r12
    3646:	7d 29       	or	r23, r13
    3648:	8e 29       	or	r24, r14
    364a:	9f 29       	or	r25, r15
    364c:	ff 90       	pop	r15
    364e:	ef 90       	pop	r14
    3650:	df 90       	pop	r13
    3652:	cf 90       	pop	r12
    3654:	08 95       	ret

Disassembly of section .text.TimerInit:

00003e06 <TimerInit>:
    3e06:	14 bc       	out	0x24, r1	; 36
    3e08:	92 e0       	ldi	r25, 0x02	; 2
    3e0a:	95 bd       	out	0x25, r25	; 37
    3e0c:	a4 e6       	ldi	r26, 0x64	; 100
    3e0e:	b0 e0       	ldi	r27, 0x00	; 0
    3e10:	8c 91       	ld	r24, X
    3e12:	87 7f       	andi	r24, 0xF7	; 247
    3e14:	8c 93       	st	X, r24
    3e16:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f0080>
    3e1a:	84 e0       	ldi	r24, 0x04	; 4
    3e1c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f0081>
    3e20:	96 bb       	out	0x16, r25	; 22
    3e22:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f0084>
    3e26:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f0085>
    3e2a:	8b 5c       	subi	r24, 0xCB	; 203
    3e2c:	93 4f       	sbci	r25, 0xF3	; 243
    3e2e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f0089>
    3e32:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f0088>
    3e36:	ef e6       	ldi	r30, 0x6F	; 111
    3e38:	f0 e0       	ldi	r31, 0x00	; 0
    3e3a:	80 81       	ld	r24, Z
    3e3c:	82 60       	ori	r24, 0x02	; 2
    3e3e:	80 83       	st	Z, r24
    3e40:	8c 91       	ld	r24, X
    3e42:	8f 7e       	andi	r24, 0xEF	; 239
    3e44:	8c 93       	st	X, r24
    3e46:	ae e6       	ldi	r26, 0x6E	; 110
    3e48:	b0 e0       	ldi	r27, 0x00	; 0
    3e4a:	8c 91       	ld	r24, X
    3e4c:	8e 7f       	andi	r24, 0xFE	; 254
    3e4e:	8c 93       	st	X, r24
    3e50:	80 81       	ld	r24, Z
    3e52:	8e 7f       	andi	r24, 0xFE	; 254
    3e54:	80 83       	st	Z, r24
    3e56:	08 95       	ret

Disassembly of section .text.__vector_12:

00002e24 <__vector_12>:
    2e24:	78 94       	sei
    2e26:	1f 92       	push	r1
    2e28:	0f 92       	push	r0
    2e2a:	0f b6       	in	r0, 0x3f	; 63
    2e2c:	0f 92       	push	r0
    2e2e:	11 24       	eor	r1, r1
    2e30:	8f 93       	push	r24
    2e32:	9f 93       	push	r25
    2e34:	ef 93       	push	r30
    2e36:	ff 93       	push	r31
    2e38:	82 e0       	ldi	r24, 0x02	; 2
    2e3a:	86 bb       	out	0x16, r24	; 22
    2e3c:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f0084>
    2e40:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f0085>
    2e44:	8b 5c       	subi	r24, 0xCB	; 203
    2e46:	93 4f       	sbci	r25, 0xF3	; 243
    2e48:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f0089>
    2e4c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f0088>
    2e50:	ef e6       	ldi	r30, 0x6F	; 111
    2e52:	f0 e0       	ldi	r31, 0x00	; 0
    2e54:	80 81       	ld	r24, Z
    2e56:	82 60       	ori	r24, 0x02	; 2
    2e58:	80 83       	st	Z, r24
    2e5a:	81 e0       	ldi	r24, 0x01	; 1
    2e5c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <sg_bNewTick>
    2e60:	80 91 70 07 	lds	r24, 0x0770	; 0x800770 <sg_u8CellFrameTimer>
    2e64:	8f 5f       	subi	r24, 0xFF	; 255
    2e66:	80 93 70 07 	sts	0x0770, r24	; 0x800770 <sg_u8CellFrameTimer>
    2e6a:	80 91 70 07 	lds	r24, 0x0770	; 0x800770 <sg_u8CellFrameTimer>
    2e6e:	83 30       	cpi	r24, 0x03	; 3
    2e70:	78 f0       	brcs	.+30     	; 0x2e90 <__vector_12+0x6c>
    2e72:	10 92 70 07 	sts	0x0770, r1	; 0x800770 <sg_u8CellFrameTimer>
    2e76:	81 e0       	ldi	r24, 0x01	; 1
    2e78:	80 93 6f 07 	sts	0x076F, r24	; 0x80076f <sg_bFrameStart>
    2e7c:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <sg_eFrameStatus>
    2e80:	81 30       	cpi	r24, 0x01	; 1
    2e82:	19 f4       	brne	.+6      	; 0x2e8a <__vector_12+0x66>
    2e84:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <sg_eFrameStatus>
    2e88:	03 c0       	rjmp	.+6      	; 0x2e90 <__vector_12+0x6c>
    2e8a:	81 e0       	ldi	r24, 0x01	; 1
    2e8c:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <sg_eFrameStatus>
    2e90:	80 91 6d 07 	lds	r24, 0x076D	; 0x80076d <sg_u8TicksSinceLastPackControllerMessage>
    2e94:	8f 3f       	cpi	r24, 0xFF	; 255
    2e96:	29 f0       	breq	.+10     	; 0x2ea2 <__vector_12+0x7e>
    2e98:	80 91 6d 07 	lds	r24, 0x076D	; 0x80076d <sg_u8TicksSinceLastPackControllerMessage>
    2e9c:	8f 5f       	subi	r24, 0xFF	; 255
    2e9e:	80 93 6d 07 	sts	0x076D, r24	; 0x80076d <sg_u8TicksSinceLastPackControllerMessage>
    2ea2:	80 91 6d 07 	lds	r24, 0x076D	; 0x80076d <sg_u8TicksSinceLastPackControllerMessage>
    2ea6:	8f 36       	cpi	r24, 0x6F	; 111
    2ea8:	40 f0       	brcs	.+16     	; 0x2eba <__vector_12+0x96>
    2eaa:	80 91 6d 07 	lds	r24, 0x076D	; 0x80076d <sg_u8TicksSinceLastPackControllerMessage>
    2eae:	8f 56       	subi	r24, 0x6F	; 111
    2eb0:	80 93 6d 07 	sts	0x076D, r24	; 0x80076d <sg_u8TicksSinceLastPackControllerMessage>
    2eb4:	81 e0       	ldi	r24, 0x01	; 1
    2eb6:	80 93 1b 03 	sts	0x031B, r24	; 0x80031b <sg_bPackControllerTimeout>
    2eba:	80 91 6e 07 	lds	r24, 0x076E	; 0x80076e <sg_u8CellStringPowerTimer>
    2ebe:	88 23       	and	r24, r24
    2ec0:	29 f0       	breq	.+10     	; 0x2ecc <__vector_12+0xa8>
    2ec2:	80 91 6e 07 	lds	r24, 0x076E	; 0x80076e <sg_u8CellStringPowerTimer>
    2ec6:	81 50       	subi	r24, 0x01	; 1
    2ec8:	80 93 6e 07 	sts	0x076E, r24	; 0x80076e <sg_u8CellStringPowerTimer>
    2ecc:	ff 91       	pop	r31
    2ece:	ef 91       	pop	r30
    2ed0:	9f 91       	pop	r25
    2ed2:	8f 91       	pop	r24
    2ed4:	0f 90       	pop	r0
    2ed6:	0f be       	out	0x3f, r0	; 63
    2ed8:	0f 90       	pop	r0
    2eda:	1f 90       	pop	r1
    2edc:	18 95       	reti

Disassembly of section .text.WatchdogReset:

00004a88 <WatchdogReset>:
		sg_u8CellStringPowerTimer--;
	}
}

void WatchdogReset( void )
{
    4a88:	08 95       	ret

Disassembly of section .text.WatchdogOff:

00004874 <WatchdogOff>:
// }

// Assume interrupts are disabled
void WatchdogOff( void )  // turn it off even when WDT_ENABLE is not defined
{
	wdt_reset();
    4874:	a8 95       	wdr
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    4876:	0f b6       	in	r0, 0x3f	; 63
    4878:	f8 94       	cli
    487a:	a8 95       	wdr
    487c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f0060>
    4880:	88 61       	ori	r24, 0x18	; 24
    4882:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f0060>
    4886:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f0060>
    488a:	0f be       	out	0x3f, r0	; 63
    488c:	08 95       	ret

Disassembly of section .text.__vector_28:

00003e58 <__vector_28>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    3e58:	1f 92       	push	r1
    3e5a:	0f 92       	push	r0
    3e5c:	0f b6       	in	r0, 0x3f	; 63
    3e5e:	0f 92       	push	r0
    3e60:	11 24       	eor	r1, r1
    3e62:	2f 93       	push	r18
    3e64:	3f 93       	push	r19
    3e66:	4f 93       	push	r20
    3e68:	5f 93       	push	r21
    3e6a:	6f 93       	push	r22
    3e6c:	7f 93       	push	r23
    3e6e:	8f 93       	push	r24
    3e70:	9f 93       	push	r25
    3e72:	af 93       	push	r26
    3e74:	bf 93       	push	r27
    3e76:	ef 93       	push	r30
    3e78:	ff 93       	push	r31
    3e7a:	4d ef       	ldi	r20, 0xFD	; 253
    3e7c:	52 e0       	ldi	r21, 0x02	; 2
    3e7e:	6e e5       	ldi	r22, 0x5E	; 94
    3e80:	71 e0       	ldi	r23, 0x01	; 1
    3e82:	80 e0       	ldi	r24, 0x00	; 0
    3e84:	0e 94 a4 21 	call	0x4348	; 0x4348 <PlatformAssert>
    3e88:	ff 91       	pop	r31
    3e8a:	ef 91       	pop	r30
    3e8c:	bf 91       	pop	r27
    3e8e:	af 91       	pop	r26
    3e90:	9f 91       	pop	r25
    3e92:	8f 91       	pop	r24
    3e94:	7f 91       	pop	r23
    3e96:	6f 91       	pop	r22
    3e98:	5f 91       	pop	r21
    3e9a:	4f 91       	pop	r20
    3e9c:	3f 91       	pop	r19
    3e9e:	2f 91       	pop	r18
    3ea0:	0f 90       	pop	r0
    3ea2:	0f be       	out	0x3f, r0	; 63
    3ea4:	0f 90       	pop	r0
    3ea6:	1f 90       	pop	r1
    3ea8:	18 95       	reti

Disassembly of section .text.__vector_23:

000032ae <__vector_23>:
    32ae:	78 94       	sei
    32b0:	1f 92       	push	r1
    32b2:	0f 92       	push	r0
    32b4:	0f b6       	in	r0, 0x3f	; 63
    32b6:	0f 92       	push	r0
    32b8:	11 24       	eor	r1, r1
    32ba:	2f 93       	push	r18
    32bc:	3f 93       	push	r19
    32be:	4f 93       	push	r20
    32c0:	5f 93       	push	r21
    32c2:	6f 93       	push	r22
    32c4:	7f 93       	push	r23
    32c6:	8f 93       	push	r24
    32c8:	9f 93       	push	r25
    32ca:	af 93       	push	r26
    32cc:	bf 93       	push	r27
    32ce:	ef 93       	push	r30
    32d0:	ff 93       	push	r31
    32d2:	96 b1       	in	r25, 0x06	; 6
    32d4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <sg_eModuleControllerStateCurrent>
    32d8:	83 30       	cpi	r24, 0x03	; 3
    32da:	21 f0       	breq	.+8      	; 0x32e4 <__vector_23+0x36>
    32dc:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <sg_eModuleControllerStateCurrent>
    32e0:	82 30       	cpi	r24, 0x02	; 2
    32e2:	c9 f4       	brne	.+50     	; 0x3316 <__vector_23+0x68>
    32e4:	91 ff       	sbrs	r25, 1
    32e6:	17 c0       	rjmp	.+46     	; 0x3316 <__vector_23+0x68>
    32e8:	88 b1       	in	r24, 0x08	; 8
    32ea:	8f 7e       	andi	r24, 0xEF	; 239
    32ec:	88 b9       	out	0x08, r24	; 8
    32ee:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <sg_eModuleControllerStateCurrent>
    32f2:	83 30       	cpi	r24, 0x03	; 3
    32f4:	19 f4       	brne	.+6      	; 0x32fc <__vector_23+0x4e>
    32f6:	81 e0       	ldi	r24, 0x01	; 1
    32f8:	0e 94 2e 25 	call	0x4a5c	; 0x4a5c <ModuleControllerStateSet>
    32fc:	eb e6       	ldi	r30, 0x6B	; 107
    32fe:	f0 e0       	ldi	r31, 0x00	; 0
    3300:	80 81       	ld	r24, Z
    3302:	8d 7f       	andi	r24, 0xFD	; 253
    3304:	80 83       	st	Z, r24
    3306:	e8 e6       	ldi	r30, 0x68	; 104
    3308:	f0 e0       	ldi	r31, 0x00	; 0
    330a:	80 81       	ld	r24, Z
    330c:	8d 7f       	andi	r24, 0xFD	; 253
    330e:	80 83       	st	Z, r24
    3310:	81 e0       	ldi	r24, 0x01	; 1
    3312:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <sg_bOvercurrentSignal>
    3316:	ff 91       	pop	r31
    3318:	ef 91       	pop	r30
    331a:	bf 91       	pop	r27
    331c:	af 91       	pop	r26
    331e:	9f 91       	pop	r25
    3320:	8f 91       	pop	r24
    3322:	7f 91       	pop	r23
    3324:	6f 91       	pop	r22
    3326:	5f 91       	pop	r21
    3328:	4f 91       	pop	r20
    332a:	3f 91       	pop	r19
    332c:	2f 91       	pop	r18
    332e:	0f 90       	pop	r0
    3330:	0f be       	out	0x3f, r0	; 63
    3332:	0f 90       	pop	r0
    3334:	1f 90       	pop	r1
    3336:	18 95       	reti

Disassembly of section .text.__vector_24:

00003eaa <__vector_24>:
    3eaa:	78 94       	sei
    3eac:	1f 92       	push	r1
    3eae:	0f 92       	push	r0
    3eb0:	0f b6       	in	r0, 0x3f	; 63
    3eb2:	0f 92       	push	r0
    3eb4:	11 24       	eor	r1, r1
    3eb6:	2f 93       	push	r18
    3eb8:	3f 93       	push	r19
    3eba:	4f 93       	push	r20
    3ebc:	5f 93       	push	r21
    3ebe:	6f 93       	push	r22
    3ec0:	7f 93       	push	r23
    3ec2:	8f 93       	push	r24
    3ec4:	9f 93       	push	r25
    3ec6:	af 93       	push	r26
    3ec8:	bf 93       	push	r27
    3eca:	ef 93       	push	r30
    3ecc:	ff 93       	push	r31
    3ece:	8b b1       	in	r24, 0x0b	; 11
    3ed0:	0e 94 47 24 	call	0x488e	; 0x488e <Check5VLoss>
    3ed4:	ff 91       	pop	r31
    3ed6:	ef 91       	pop	r30
    3ed8:	bf 91       	pop	r27
    3eda:	af 91       	pop	r26
    3edc:	9f 91       	pop	r25
    3ede:	8f 91       	pop	r24
    3ee0:	7f 91       	pop	r23
    3ee2:	6f 91       	pop	r22
    3ee4:	5f 91       	pop	r21
    3ee6:	4f 91       	pop	r20
    3ee8:	3f 91       	pop	r19
    3eea:	2f 91       	pop	r18
    3eec:	0f 90       	pop	r0
    3eee:	0f be       	out	0x3f, r0	; 63
    3ef0:	0f 90       	pop	r0
    3ef2:	1f 90       	pop	r1
    3ef4:	18 95       	reti

Disassembly of section .text.vUARTRXStart:

00004902 <vUARTRXStart>:
}

// Called at the start of cell string data via MC RX
void vUARTRXStart(void)
{
	sg_u8CellBufferRX = 0;
    4902:	10 92 6b 07 	sts	0x076B, r1	; 0x80076b <sg_u8CellBufferRX>
	sg_u8CellIndex = 0;
    4906:	10 92 6c 07 	sts	0x076C, r1	; 0x80076c <sg_u8CellIndex>
	sg_u16BytesReceived = 0;
    490a:	10 92 59 07 	sts	0x0759, r1	; 0x800759 <sg_u16BytesReceived+0x1>
    490e:	10 92 58 07 	sts	0x0758, r1	; 0x800758 <sg_u16BytesReceived>
	sg_u8CellReports = 0;
    4912:	10 92 6a 07 	sts	0x076A, r1	; 0x80076a <sg_u8CellReports>
    4916:	08 95       	ret

Disassembly of section .text.vUARTRXEnd:

00004792 <vUARTRXEnd>:
	// disable the edge interrupt
//	VUART_RX_DISABLE();
	// disable bit timer interrupt, should already be off but just in case
//	TIMER_CHB_INT_DISABLE();
	// update bytes and cells received
	sg_sFrame.sg_u16BytesReceived = sg_u16BytesReceived;
    4792:	80 91 58 07 	lds	r24, 0x0758	; 0x800758 <sg_u16BytesReceived>
    4796:	90 91 59 07 	lds	r25, 0x0759	; 0x800759 <sg_u16BytesReceived+0x1>
    479a:	ec e0       	ldi	r30, 0x0C	; 12
    479c:	f1 e0       	ldi	r31, 0x01	; 1
    479e:	90 a7       	std	Z+40, r25	; 0x28
    47a0:	87 a3       	std	Z+39, r24	; 0x27
	sg_sFrame.sg_u8CellCPUCount = sg_u8CellReports;
    47a2:	80 91 6a 07 	lds	r24, 0x076A	; 0x80076a <sg_u8CellReports>
    47a6:	81 a7       	std	Z+41, r24	; 0x29
	sg_u16BytesReceived = 0;
    47a8:	10 92 59 07 	sts	0x0759, r1	; 0x800759 <sg_u16BytesReceived+0x1>
    47ac:	10 92 58 07 	sts	0x0758, r1	; 0x800758 <sg_u16BytesReceived>
	sg_u8CellReports = 0;
    47b0:	10 92 6a 07 	sts	0x076A, r1	; 0x80076a <sg_u8CellReports>
    47b4:	08 95       	ret

Disassembly of section .text.vUARTRXData:

000038c0 <vUARTRXData>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    38c0:	e0 91 6b 07 	lds	r30, 0x076B	; 0x80076b <sg_u8CellBufferRX>
    38c4:	21 e0       	ldi	r18, 0x01	; 1
    38c6:	2e 0f       	add	r18, r30
    38c8:	20 93 6b 07 	sts	0x076B, r18	; 0x80076b <sg_u8CellBufferRX>
    38cc:	f0 e0       	ldi	r31, 0x00	; 0
    38ce:	e4 5b       	subi	r30, 0xB4	; 180
    38d0:	f8 4f       	sbci	r31, 0xF8	; 248
    38d2:	80 83       	st	Z, r24
    38d4:	80 91 58 07 	lds	r24, 0x0758	; 0x800758 <sg_u16BytesReceived>
    38d8:	90 91 59 07 	lds	r25, 0x0759	; 0x800759 <sg_u16BytesReceived+0x1>
    38dc:	01 96       	adiw	r24, 0x01	; 1
    38de:	90 93 59 07 	sts	0x0759, r25	; 0x800759 <sg_u16BytesReceived+0x1>
    38e2:	80 93 58 07 	sts	0x0758, r24	; 0x800758 <sg_u16BytesReceived>
    38e6:	24 30       	cpi	r18, 0x04	; 4
    38e8:	38 f1       	brcs	.+78     	; 0x3938 <vUARTRXData+0x78>
    38ea:	10 92 6b 07 	sts	0x076B, r1	; 0x80076b <sg_u8CellBufferRX>
    38ee:	80 91 6c 07 	lds	r24, 0x076C	; 0x80076c <sg_u8CellIndex>
    38f2:	8c 36       	cpi	r24, 0x6C	; 108
    38f4:	08 f5       	brcc	.+66     	; 0x3938 <vUARTRXData+0x78>
    38f6:	e8 2f       	mov	r30, r24
    38f8:	f0 e0       	ldi	r31, 0x00	; 0
    38fa:	74 96       	adiw	r30, 0x14	; 20
    38fc:	ee 0f       	add	r30, r30
    38fe:	ff 1f       	adc	r31, r31
    3900:	ee 0f       	add	r30, r30
    3902:	ff 1f       	adc	r31, r31
    3904:	e4 5f       	subi	r30, 0xF4	; 244
    3906:	fe 4f       	sbci	r31, 0xFE	; 254
    3908:	ac e4       	ldi	r26, 0x4C	; 76
    390a:	b7 e0       	ldi	r27, 0x07	; 7
    390c:	4d 91       	ld	r20, X+
    390e:	5d 91       	ld	r21, X+
    3910:	6d 91       	ld	r22, X+
    3912:	7c 91       	ld	r23, X
    3914:	13 97       	sbiw	r26, 0x03	; 3
    3916:	40 83       	st	Z, r20
    3918:	51 83       	std	Z+1, r21	; 0x01
    391a:	62 83       	std	Z+2, r22	; 0x02
    391c:	73 83       	std	Z+3, r23	; 0x03
    391e:	1d 92       	st	X+, r1
    3920:	1d 92       	st	X+, r1
    3922:	1d 92       	st	X+, r1
    3924:	1c 92       	st	X, r1
    3926:	13 97       	sbiw	r26, 0x03	; 3
    3928:	8f 5f       	subi	r24, 0xFF	; 255
    392a:	80 93 6c 07 	sts	0x076C, r24	; 0x80076c <sg_u8CellIndex>
    392e:	80 91 6a 07 	lds	r24, 0x076A	; 0x80076a <sg_u8CellReports>
    3932:	8f 5f       	subi	r24, 0xFF	; 255
    3934:	80 93 6a 07 	sts	0x076A, r24	; 0x80076a <sg_u8CellReports>
    3938:	08 95       	ret

Disassembly of section .text.PlatformGetSendData:

00004446 <PlatformGetSendData>:
uint16_t PlatformGetSendData( bool bUpdateBalanceStatus )
{
	uint16_t u16SendValue = 0;
	
	
	if( sg_bStopDischarge )
    4446:	90 91 10 03 	lds	r25, 0x0310	; 0x800310 <sg_bStopDischarge>
    444a:	99 23       	and	r25, r25
    444c:	51 f0       	breq	.+20     	; 0x4462 <PlatformGetSendData+0x1c>
	{
		if (bUpdateBalanceStatus)	// don't update if ony an availability check
    444e:	88 23       	and	r24, r24
    4450:	59 f0       	breq	.+22     	; 0x4468 <PlatformGetSendData+0x22>
		{
			sg_bStopDischarge = false;
    4452:	10 92 10 03 	sts	0x0310, r1	; 0x800310 <sg_bStopDischarge>
			sg_bCellBalancedOnce = true;
    4456:	81 e0       	ldi	r24, 0x01	; 1
    4458:	80 93 11 03 	sts	0x0311, r24	; 0x800311 <sg_bCellBalancedOnce>
		}
		u16SendValue = 0x3ff;
    445c:	8f ef       	ldi	r24, 0xFF	; 255
    445e:	93 e0       	ldi	r25, 0x03	; 3
    4460:	08 95       	ret
			}
		}
		else
#endif
		{
			u16SendValue |= MSG_CELL_SEND_REPORT;
    4462:	80 e0       	ldi	r24, 0x00	; 0
    4464:	90 e8       	ldi	r25, 0x80	; 128
    4466:	08 95       	ret
		if (bUpdateBalanceStatus)	// don't update if ony an availability check
		{
			sg_bStopDischarge = false;
			sg_bCellBalancedOnce = true;
		}
		u16SendValue = 0x3ff;
    4468:	8f ef       	ldi	r24, 0xFF	; 255
    446a:	93 e0       	ldi	r25, 0x03	; 3
#endif
		}
	}
	
	return( u16SendValue );
}
    446c:	08 95       	ret

Disassembly of section .text.ADCCallback:

000044e4 <ADCCallback>:
// Called every time there's an ADC read since apparently ISR can't access global variables?  compiler fails
void ADCCallback(EADCType eType,
				 uint16_t u16Reading)
{
	// End of chain? Indicate it's time for an ADC update
	if ((EADCTYPE_COUNT-1) == eType)
    44e4:	84 30       	cpi	r24, 0x04	; 4
    44e6:	19 f4       	brne	.+6      	; 0x44ee <ADCCallback+0xa>
	{
		sg_bADCUpdate = true;
    44e8:	91 e0       	ldi	r25, 0x01	; 1
    44ea:	90 93 0e 03 	sts	0x030E, r25	; 0x80030e <sg_bADCUpdate>
	}
	sg_sFrame.ADCReadings[eType].u16Reading = u16Reading;
    44ee:	90 e0       	ldi	r25, 0x00	; 0
    44f0:	fc 01       	movw	r30, r24
    44f2:	ee 0f       	add	r30, r30
    44f4:	ff 1f       	adc	r31, r31
    44f6:	8e 0f       	add	r24, r30
    44f8:	9f 1f       	adc	r25, r31
    44fa:	fc 01       	movw	r30, r24
    44fc:	e3 5b       	subi	r30, 0xB3	; 179
    44fe:	fe 4f       	sbci	r31, 0xFE	; 254
    4500:	72 83       	std	Z+2, r23	; 0x02
    4502:	61 83       	std	Z+1, r22	; 0x01
	sg_sFrame.ADCReadings[eType].bValid = true;
    4504:	81 e0       	ldi	r24, 0x01	; 1
    4506:	80 83       	st	Z, r24
    4508:	08 95       	ret

Disassembly of section .text.FrameInit:

00002ede <FrameInit>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    2ede:	cf 93       	push	r28
    2ee0:	df 93       	push	r29
    2ee2:	81 11       	cpse	r24, r1
    2ee4:	0d c0       	rjmp	.+26     	; 0x2f00 <FrameInit+0x22>
    2ee6:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <sg_sFrame>
    2eea:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <sg_sFrame+0x1>
    2eee:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <sg_sFrame+0x2>
    2ef2:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <sg_sFrame+0x3>
    2ef6:	8a 37       	cpi	r24, 0x7A	; 122
    2ef8:	9a 4d       	sbci	r25, 0xDA	; 218
    2efa:	a7 47       	sbci	r26, 0x77	; 119
    2efc:	ba 4b       	sbci	r27, 0xBA	; 186
    2efe:	e9 f0       	breq	.+58     	; 0x2f3a <FrameInit+0x5c>
    2f00:	ec e0       	ldi	r30, 0x0C	; 12
    2f02:	f1 e0       	ldi	r31, 0x01	; 1
    2f04:	80 e0       	ldi	r24, 0x00	; 0
    2f06:	92 e0       	ldi	r25, 0x02	; 2
    2f08:	df 01       	movw	r26, r30
    2f0a:	ec 01       	movw	r28, r24
    2f0c:	1d 92       	st	X+, r1
    2f0e:	21 97       	sbiw	r28, 0x01	; 1
    2f10:	e9 f7       	brne	.-6      	; 0x2f0c <FrameInit+0x2e>
    2f12:	95 83       	std	Z+5, r25	; 0x05
    2f14:	84 83       	std	Z+4, r24	; 0x04
    2f16:	8a e7       	ldi	r24, 0x7A	; 122
    2f18:	9a ed       	ldi	r25, 0xDA	; 218
    2f1a:	a7 e7       	ldi	r26, 0x77	; 119
    2f1c:	ba eb       	ldi	r27, 0xBA	; 186
    2f1e:	80 83       	st	Z, r24
    2f20:	91 83       	std	Z+1, r25	; 0x01
    2f22:	a2 83       	std	Z+2, r26	; 0x02
    2f24:	b3 83       	std	Z+3, r27	; 0x03
    2f26:	8f ef       	ldi	r24, 0xFF	; 255
    2f28:	86 a3       	std	Z+38, r24	; 0x26
    2f2a:	87 87       	std	Z+15, r24	; 0x0f
    2f2c:	84 e0       	ldi	r24, 0x04	; 4
    2f2e:	90 e0       	ldi	r25, 0x00	; 0
    2f30:	0e 94 b6 24 	call	0x496c	; 0x496c <EEPROMRead>
    2f34:	0e 94 f1 15 	call	0x2be2	; 0x2be2 <CellCountExpectedSet>
    2f38:	1c c0       	rjmp	.+56     	; 0x2f72 <FrameInit+0x94>
    2f3a:	ec e0       	ldi	r30, 0x0C	; 12
    2f3c:	f1 e0       	ldi	r31, 0x01	; 1
    2f3e:	11 ae       	std	Z+57, r1	; 0x39
    2f40:	12 ae       	std	Z+58, r1	; 0x3a
    2f42:	13 ae       	std	Z+59, r1	; 0x3b
    2f44:	14 ae       	std	Z+60, r1	; 0x3c
    2f46:	14 aa       	std	Z+52, r1	; 0x34
    2f48:	13 aa       	std	Z+51, r1	; 0x33
    2f4a:	16 aa       	std	Z+54, r1	; 0x36
    2f4c:	15 aa       	std	Z+53, r1	; 0x35
    2f4e:	10 ae       	std	Z+56, r1	; 0x38
    2f50:	17 aa       	std	Z+55, r1	; 0x37
    2f52:	80 eb       	ldi	r24, 0xB0	; 176
    2f54:	91 e0       	ldi	r25, 0x01	; 1
    2f56:	ac e5       	ldi	r26, 0x5C	; 92
    2f58:	b1 e0       	ldi	r27, 0x01	; 1
    2f5a:	ed 01       	movw	r28, r26
    2f5c:	9c 01       	movw	r18, r24
    2f5e:	19 92       	st	Y+, r1
    2f60:	21 50       	subi	r18, 0x01	; 1
    2f62:	30 40       	sbci	r19, 0x00	; 0
    2f64:	e1 f7       	brne	.-8      	; 0x2f5e <FrameInit+0x80>
    2f66:	13 a2       	std	Z+35, r1	; 0x23
    2f68:	15 a2       	std	Z+37, r1	; 0x25
    2f6a:	14 a2       	std	Z+36, r1	; 0x24
    2f6c:	16 a2       	std	Z+38, r1	; 0x26
    2f6e:	11 a6       	std	Z+41, r1	; 0x29
    2f70:	12 a6       	std	Z+42, r1	; 0x2a
    2f72:	ec e0       	ldi	r30, 0x0C	; 12
    2f74:	f1 e0       	ldi	r31, 0x01	; 1
    2f76:	8f e9       	ldi	r24, 0x9F	; 159
    2f78:	95 e1       	ldi	r25, 0x15	; 21
    2f7a:	96 a7       	std	Z+46, r25	; 0x2e
    2f7c:	85 a7       	std	Z+45, r24	; 0x2d
    2f7e:	90 ab       	std	Z+48, r25	; 0x30
    2f80:	87 a7       	std	Z+47, r24	; 0x2f
    2f82:	92 ab       	std	Z+50, r25	; 0x32
    2f84:	81 ab       	std	Z+49, r24	; 0x31
    2f86:	8f ef       	ldi	r24, 0xFF	; 255
    2f88:	80 93 71 07 	sts	0x0771, r24	; 0x800771 <sg_u8CurrentBufferIndex>
    2f8c:	df 91       	pop	r29
    2f8e:	cf 91       	pop	r28
    2f90:	08 95       	ret

Disassembly of section .text.CellStringPowerStateMachine:

000033c2 <CellStringPowerStateMachine>:
    33c2:	80 91 68 07 	lds	r24, 0x0768	; 0x800768 <sg_eStringPowerState>
    33c6:	82 30       	cpi	r24, 0x02	; 2
    33c8:	49 f1       	breq	.+82     	; 0x341c <CellStringPowerStateMachine+0x5a>
    33ca:	28 f4       	brcc	.+10     	; 0x33d6 <CellStringPowerStateMachine+0x14>
    33cc:	88 23       	and	r24, r24
    33ce:	41 f0       	breq	.+16     	; 0x33e0 <CellStringPowerStateMachine+0x1e>
    33d0:	81 30       	cpi	r24, 0x01	; 1
    33d2:	91 f0       	breq	.+36     	; 0x33f8 <CellStringPowerStateMachine+0x36>
    33d4:	32 c0       	rjmp	.+100    	; 0x343a <CellStringPowerStateMachine+0x78>
    33d6:	83 30       	cpi	r24, 0x03	; 3
    33d8:	61 f1       	breq	.+88     	; 0x3432 <CellStringPowerStateMachine+0x70>
    33da:	84 30       	cpi	r24, 0x04	; 4
    33dc:	a9 f1       	breq	.+106    	; 0x3448 <CellStringPowerStateMachine+0x86>
    33de:	2d c0       	rjmp	.+90     	; 0x343a <CellStringPowerStateMachine+0x78>
    33e0:	85 b1       	in	r24, 0x05	; 5
    33e2:	8f 7e       	andi	r24, 0xEF	; 239
    33e4:	85 b9       	out	0x05, r24	; 5
    33e6:	81 e0       	ldi	r24, 0x01	; 1
    33e8:	80 93 68 07 	sts	0x0768, r24	; 0x800768 <sg_eStringPowerState>
    33ec:	80 e0       	ldi	r24, 0x00	; 0
    33ee:	0e 94 6f 17 	call	0x2ede	; 0x2ede <FrameInit>
    33f2:	0e 94 1d 25 	call	0x4a3a	; 0x4a3a <SendModuleControllerStatus>
    33f6:	08 95       	ret
    33f8:	85 b1       	in	r24, 0x05	; 5
    33fa:	8f 7e       	andi	r24, 0xEF	; 239
    33fc:	85 b9       	out	0x05, r24	; 5
    33fe:	80 e0       	ldi	r24, 0x00	; 0
    3400:	0e 94 6f 17 	call	0x2ede	; 0x2ede <FrameInit>
    3404:	82 e0       	ldi	r24, 0x02	; 2
    3406:	80 93 68 07 	sts	0x0768, r24	; 0x800768 <sg_eStringPowerState>
    340a:	81 e0       	ldi	r24, 0x01	; 1
    340c:	80 93 6e 07 	sts	0x076E, r24	; 0x80076e <sg_u8CellStringPowerTimer>
    3410:	ec e0       	ldi	r30, 0x0C	; 12
    3412:	f1 e0       	ldi	r31, 0x01	; 1
    3414:	8f ef       	ldi	r24, 0xFF	; 255
    3416:	87 87       	std	Z+15, r24	; 0x0f
    3418:	10 8a       	std	Z+16, r1	; 0x10
    341a:	08 95       	ret
    341c:	80 91 6e 07 	lds	r24, 0x076E	; 0x80076e <sg_u8CellStringPowerTimer>
    3420:	81 11       	cpse	r24, r1
    3422:	12 c0       	rjmp	.+36     	; 0x3448 <CellStringPowerStateMachine+0x86>
    3424:	85 b1       	in	r24, 0x05	; 5
    3426:	80 61       	ori	r24, 0x10	; 16
    3428:	85 b9       	out	0x05, r24	; 5
    342a:	83 e0       	ldi	r24, 0x03	; 3
    342c:	80 93 68 07 	sts	0x0768, r24	; 0x800768 <sg_eStringPowerState>
    3430:	08 95       	ret
    3432:	84 e0       	ldi	r24, 0x04	; 4
    3434:	80 93 68 07 	sts	0x0768, r24	; 0x800768 <sg_eStringPowerState>
    3438:	08 95       	ret
    343a:	44 e6       	ldi	r20, 0x64	; 100
    343c:	52 e0       	ldi	r21, 0x02	; 2
    343e:	6e e5       	ldi	r22, 0x5E	; 94
    3440:	71 e0       	ldi	r23, 0x01	; 1
    3442:	80 e0       	ldi	r24, 0x00	; 0
    3444:	0e 94 a4 21 	call	0x4348	; 0x4348 <PlatformAssert>
    3448:	08 95       	ret

Disassembly of section .text.main:

00000d06 <main>:
 d06:	cf 93       	push	r28
 d08:	df 93       	push	r29
 d0a:	cd b7       	in	r28, 0x3d	; 61
 d0c:	de b7       	in	r29, 0x3e	; 62
 d0e:	28 97       	sbiw	r28, 0x08	; 8
 d10:	0f b6       	in	r0, 0x3f	; 63
 d12:	f8 94       	cli
 d14:	de bf       	out	0x3e, r29	; 62
 d16:	0f be       	out	0x3f, r0	; 63
 d18:	cd bf       	out	0x3d, r28	; 61
 d1a:	0e 94 3a 24 	call	0x4874	; 0x4874 <WatchdogOff>
 d1e:	88 b1       	in	r24, 0x08	; 8
 d20:	8f 7e       	andi	r24, 0xEF	; 239
 d22:	88 b9       	out	0x08, r24	; 8
 d24:	87 b1       	in	r24, 0x07	; 7
 d26:	80 61       	ori	r24, 0x10	; 16
 d28:	87 b9       	out	0x07, r24	; 7
 d2a:	87 b1       	in	r24, 0x07	; 7
 d2c:	8d 7f       	andi	r24, 0xFD	; 253
 d2e:	87 b9       	out	0x07, r24	; 7
 d30:	87 b1       	in	r24, 0x07	; 7
 d32:	80 68       	ori	r24, 0x80	; 128
 d34:	87 b9       	out	0x07, r24	; 7
 d36:	88 b1       	in	r24, 0x08	; 8
 d38:	8f 7e       	andi	r24, 0xEF	; 239
 d3a:	88 b9       	out	0x08, r24	; 8
 d3c:	8d b1       	in	r24, 0x0d	; 13
 d3e:	82 60       	ori	r24, 0x02	; 2
 d40:	8d b9       	out	0x0d, r24	; 13
 d42:	8e b1       	in	r24, 0x0e	; 14
 d44:	8d 7f       	andi	r24, 0xFD	; 253
 d46:	8e b9       	out	0x0e, r24	; 14
 d48:	84 b1       	in	r24, 0x04	; 4
 d4a:	80 61       	ori	r24, 0x10	; 16
 d4c:	84 b9       	out	0x04, r24	; 4
 d4e:	85 b1       	in	r24, 0x05	; 5
 d50:	8f 7e       	andi	r24, 0xEF	; 239
 d52:	85 b9       	out	0x05, r24	; 5
 d54:	e0 e0       	ldi	r30, 0x00	; 0
 d56:	f8 e0       	ldi	r31, 0x08	; 8
 d58:	02 c0       	rjmp	.+4      	; 0xd5e <main+0x58>
 d5a:	8a ea       	ldi	r24, 0xAA	; 170
 d5c:	81 93       	st	Z+, r24
 d5e:	e1 15       	cp	r30, r1
 d60:	80 e1       	ldi	r24, 0x10	; 16
 d62:	f8 07       	cpc	r31, r24
 d64:	d0 f3       	brcs	.-12     	; 0xd5a <main+0x54>
 d66:	84 b7       	in	r24, 0x34	; 52
 d68:	80 93 67 07 	sts	0x0767, r24	; 0x800767 <sg_u8Reason>
 d6c:	80 91 67 07 	lds	r24, 0x0767	; 0x800767 <sg_u8Reason>
 d70:	83 ff       	sbrs	r24, 3
 d72:	0a c0       	rjmp	.+20     	; 0xd88 <main+0x82>
 d74:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <sg_eWDTCurrentStatus>
 d78:	ec e0       	ldi	r30, 0x0C	; 12
 d7a:	f1 e0       	ldi	r31, 0x01	; 1
 d7c:	86 85       	ldd	r24, Z+14	; 0x0e
 d7e:	8f 5f       	subi	r24, 0xFF	; 255
 d80:	86 87       	std	Z+14, r24	; 0x0e
 d82:	0e 94 06 0b 	call	0x160c	; 0x160c <ModuleControllerStateHandle>
 d86:	4b c0       	rjmp	.+150    	; 0xe1e <main+0x118>
 d88:	80 91 67 07 	lds	r24, 0x0767	; 0x800767 <sg_u8Reason>
 d8c:	80 91 67 07 	lds	r24, 0x0767	; 0x800767 <sg_u8Reason>
 d90:	80 91 67 07 	lds	r24, 0x0767	; 0x800767 <sg_u8Reason>
 d94:	f8 94       	cli
 d96:	0e 94 23 25 	call	0x4a46	; 0x4a46 <SetSysclock>
 d9a:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <TimerInit>
 d9e:	0e 94 49 21 	call	0x4292	; 0x4292 <vUARTInit>
 da2:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <ADCInit>
 da6:	0e 94 ab 1a 	call	0x3556	; 0x3556 <STORE_Init>
 daa:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <sg_bSDCardReady>
 dae:	81 e0       	ldi	r24, 0x01	; 1
 db0:	0e 94 6f 17 	call	0x2ede	; 0x2ede <FrameInit>
 db4:	89 e0       	ldi	r24, 0x09	; 9
 db6:	90 e0       	ldi	r25, 0x00	; 0
 db8:	0e 94 b6 24 	call	0x496c	; 0x496c <EEPROMRead>
 dbc:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <sg_u8SequentailCountMismatchThreshold>
 dc0:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <ModuleControllerGetUniqueID>
 dc4:	60 93 17 03 	sts	0x0317, r22	; 0x800317 <sg_u32ModuleUniqueID>
 dc8:	70 93 18 03 	sts	0x0318, r23	; 0x800318 <sg_u32ModuleUniqueID+0x1>
 dcc:	80 93 19 03 	sts	0x0319, r24	; 0x800319 <sg_u32ModuleUniqueID+0x2>
 dd0:	90 93 1a 03 	sts	0x031A, r25	; 0x80031a <sg_u32ModuleUniqueID+0x3>
 dd4:	8a b1       	in	r24, 0x0a	; 10
 dd6:	8f 7b       	andi	r24, 0xBF	; 191
 dd8:	8a b9       	out	0x0a, r24	; 10
 dda:	8b b1       	in	r24, 0x0b	; 11
 ddc:	80 64       	ori	r24, 0x40	; 64
 dde:	8b b9       	out	0x0b, r24	; 11
 de0:	11 e0       	ldi	r17, 0x01	; 1
 de2:	1b bb       	out	0x1b, r17	; 27
 de4:	82 e0       	ldi	r24, 0x02	; 2
 de6:	8b bb       	out	0x1b, r24	; 27
 de8:	84 e0       	ldi	r24, 0x04	; 4
 dea:	8b bb       	out	0x1b, r24	; 27
 dec:	88 e0       	ldi	r24, 0x08	; 8
 dee:	8b bb       	out	0x1b, r24	; 27
 df0:	ec e6       	ldi	r30, 0x6C	; 108
 df2:	f0 e0       	ldi	r31, 0x00	; 0
 df4:	80 81       	ld	r24, Z
 df6:	80 64       	ori	r24, 0x40	; 64
 df8:	80 83       	st	Z, r24
 dfa:	8b b3       	in	r24, 0x1b	; 27
 dfc:	84 60       	ori	r24, 0x04	; 4
 dfe:	8b bb       	out	0x1b, r24	; 27
 e00:	88 e1       	ldi	r24, 0x18	; 24
 e02:	9f e0       	ldi	r25, 0x0F	; 15
 e04:	0e 94 29 25 	call	0x4a52	; 0x4a52 <CANSetRXCallback>
 e08:	0e 94 bf 18 	call	0x317e	; 0x317e <CANInit>
 e0c:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <RTCInit>
 e10:	85 e0       	ldi	r24, 0x05	; 5
 e12:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <sg_eModuleControllerStateCurrent>
 e16:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <sg_eModuleControllerStateTarget>
 e1a:	10 93 0b 01 	sts	0x010B, r17	; 0x80010b <sg_eFrameStatus>
 e1e:	78 94       	sei
 e20:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <sg_bNewTick>
 e24:	88 23       	and	r24, r24
 e26:	e1 f3       	breq	.-8      	; 0xe20 <main+0x11a>
 e28:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <sg_bNewTick>
 e2c:	80 91 1d 03 	lds	r24, 0x031D	; 0x80031d <sg_bModuleRegistered>
 e30:	88 23       	and	r24, r24
 e32:	29 f0       	breq	.+10     	; 0xe3e <main+0x138>
 e34:	ce 01       	movw	r24, r28
 e36:	01 96       	adiw	r24, 0x01	; 1
 e38:	0e 94 42 03 	call	0x684	; 0x684 <ControllerStatusMessagesSend>
 e3c:	03 c0       	rjmp	.+6      	; 0xe44 <main+0x13e>
 e3e:	81 e0       	ldi	r24, 0x01	; 1
 e40:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <sg_bSendAnnouncement>
 e44:	80 91 1b 03 	lds	r24, 0x031B	; 0x80031b <sg_bPackControllerTimeout>
 e48:	88 23       	and	r24, r24
 e4a:	71 f0       	breq	.+28     	; 0xe68 <main+0x162>
 e4c:	10 92 1b 03 	sts	0x031B, r1	; 0x80031b <sg_bPackControllerTimeout>
 e50:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <sg_u8ModuleRegistrationID>
 e54:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <sg_bModuleRegistered>
 e58:	81 e0       	ldi	r24, 0x01	; 1
 e5a:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <sg_bSendAnnouncement>
 e5e:	0e 94 1d 25 	call	0x4a3a	; 0x4a3a <SendModuleControllerStatus>
 e62:	80 e0       	ldi	r24, 0x00	; 0
 e64:	0e 94 2e 25 	call	0x4a5c	; 0x4a5c <ModuleControllerStateSet>
 e68:	ef e6       	ldi	r30, 0x6F	; 111
 e6a:	f0 e0       	ldi	r31, 0x00	; 0
 e6c:	90 81       	ld	r25, Z
 e6e:	80 81       	ld	r24, Z
 e70:	8d 7f       	andi	r24, 0xFD	; 253
 e72:	80 83       	st	Z, r24
 e74:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <sg_eFrameStatus>
 e78:	20 91 6f 07 	lds	r18, 0x076F	; 0x80076f <sg_bFrameStart>
 e7c:	90 83       	st	Z, r25
 e7e:	81 30       	cpi	r24, 0x01	; 1
 e80:	09 f0       	breq	.+2      	; 0xe84 <main+0x17e>
 e82:	61 c0       	rjmp	.+194    	; 0xf46 <main+0x240>
 e84:	22 23       	and	r18, r18
 e86:	09 f4       	brne	.+2      	; 0xe8a <main+0x184>
 e88:	55 c0       	rjmp	.+170    	; 0xf34 <main+0x22e>
 e8a:	10 92 6f 07 	sts	0x076F, r1	; 0x80076f <sg_bFrameStart>
 e8e:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <CellStringPowerStateMachine>
 e92:	0e 94 c9 23 	call	0x4792	; 0x4792 <vUARTRXEnd>
 e96:	ce 01       	movw	r24, r28
 e98:	01 96       	adiw	r24, 0x01	; 1
 e9a:	0e 94 30 05 	call	0xa60	; 0xa60 <CellStringProcess>
 e9e:	80 91 68 07 	lds	r24, 0x0768	; 0x800768 <sg_eStringPowerState>
 ea2:	84 30       	cpi	r24, 0x04	; 4
 ea4:	29 f5       	brne	.+74     	; 0xef0 <main+0x1ea>
 ea6:	ec e0       	ldi	r30, 0x0C	; 12
 ea8:	f1 e0       	ldi	r31, 0x01	; 1
 eaa:	91 a5       	ldd	r25, Z+41	; 0x29
 eac:	81 89       	ldd	r24, Z+17	; 0x11
 eae:	98 17       	cp	r25, r24
 eb0:	e9 f0       	breq	.+58     	; 0xeec <main+0x1e6>
 eb2:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <sg_sFrame+0x11>
 eb6:	88 23       	and	r24, r24
 eb8:	c9 f0       	breq	.+50     	; 0xeec <main+0x1e6>
 eba:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <sg_u8SequentailCountMismatchThreshold>
 ebe:	88 23       	and	r24, r24
 ec0:	b9 f0       	breq	.+46     	; 0xef0 <main+0x1ea>
 ec2:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <sg_u8SequentailCountMismatchThreshold>
 ec6:	8f 3f       	cpi	r24, 0xFF	; 255
 ec8:	99 f0       	breq	.+38     	; 0xef0 <main+0x1ea>
 eca:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <sg_u8SequentailCellCountMismatches>
 ece:	8f 5f       	subi	r24, 0xFF	; 255
 ed0:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <sg_u8SequentailCellCountMismatches>
 ed4:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <sg_u8SequentailCellCountMismatches>
 ed8:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <sg_u8SequentailCountMismatchThreshold>
 edc:	98 17       	cp	r25, r24
 ede:	40 f0       	brcs	.+16     	; 0xef0 <main+0x1ea>
 ee0:	81 e0       	ldi	r24, 0x01	; 1
 ee2:	80 93 68 07 	sts	0x0768, r24	; 0x800768 <sg_eStringPowerState>
 ee6:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <sg_u8SequentailCellCountMismatches>
 eea:	02 c0       	rjmp	.+4      	; 0xef0 <main+0x1ea>
 eec:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <sg_u8SequentailCellCountMismatches>
 ef0:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <sg_bSendAnnouncement>
 ef4:	88 23       	and	r24, r24
 ef6:	f1 f0       	breq	.+60     	; 0xf34 <main+0x22e>
 ef8:	86 e5       	ldi	r24, 0x56	; 86
 efa:	89 83       	std	Y+1, r24	; 0x01
 efc:	80 e2       	ldi	r24, 0x20	; 32
 efe:	8a 83       	std	Y+2, r24	; 0x02
 f00:	82 e0       	ldi	r24, 0x02	; 2
 f02:	8b 83       	std	Y+3, r24	; 0x03
 f04:	83 e0       	ldi	r24, 0x03	; 3
 f06:	8c 83       	std	Y+4, r24	; 0x04
 f08:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <sg_u32ModuleUniqueID>
 f0c:	90 91 18 03 	lds	r25, 0x0318	; 0x800318 <sg_u32ModuleUniqueID+0x1>
 f10:	a0 91 19 03 	lds	r26, 0x0319	; 0x800319 <sg_u32ModuleUniqueID+0x2>
 f14:	b0 91 1a 03 	lds	r27, 0x031A	; 0x80031a <sg_u32ModuleUniqueID+0x3>
 f18:	8d 83       	std	Y+5, r24	; 0x05
 f1a:	9e 83       	std	Y+6, r25	; 0x06
 f1c:	af 83       	std	Y+7, r26	; 0x07
 f1e:	b8 87       	std	Y+8, r27	; 0x08
 f20:	48 e0       	ldi	r20, 0x08	; 8
 f22:	be 01       	movw	r22, r28
 f24:	6f 5f       	subi	r22, 0xFF	; 255
 f26:	7f 4f       	sbci	r23, 0xFF	; 255
 f28:	80 e0       	ldi	r24, 0x00	; 0
 f2a:	0e 94 6b 24 	call	0x48d6	; 0x48d6 <CANSendMessage>
 f2e:	81 11       	cpse	r24, r1
 f30:	10 92 1e 03 	sts	0x031E, r1	; 0x80031e <sg_bSendAnnouncement>
 f34:	0e 94 06 0b 	call	0x160c	; 0x160c <ModuleControllerStateHandle>
 f38:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <sg_bOvercurrentSignal>
 f3c:	88 23       	and	r24, r24
 f3e:	b1 f0       	breq	.+44     	; 0xf6c <main+0x266>
 f40:	10 92 0f 03 	sts	0x030F, r1	; 0x80030f <sg_bOvercurrentSignal>
 f44:	13 c0       	rjmp	.+38     	; 0xf6c <main+0x266>
 f46:	22 23       	and	r18, r18
 f48:	89 f0       	breq	.+34     	; 0xf6c <main+0x266>
 f4a:	10 92 6f 07 	sts	0x076F, r1	; 0x80076f <sg_bFrameStart>
 f4e:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <CellStringPowerStateMachine>
 f52:	80 e0       	ldi	r24, 0x00	; 0
 f54:	0e 94 6f 17 	call	0x2ede	; 0x2ede <FrameInit>
 f58:	80 91 68 07 	lds	r24, 0x0768	; 0x800768 <sg_eStringPowerState>
 f5c:	84 30       	cpi	r24, 0x04	; 4
 f5e:	31 f4       	brne	.+12     	; 0xf6c <main+0x266>
 f60:	0e 94 ac 24 	call	0x4958	; 0x4958 <vUARTInitReceive>
 f64:	0e 94 33 25 	call	0x4a66	; 0x4a66 <vUARTRXReset>
 f68:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <vUARTStarttx>
 f6c:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <sg_bADCUpdate>
 f70:	88 23       	and	r24, r24
 f72:	21 f0       	breq	.+8      	; 0xf7c <main+0x276>
 f74:	10 92 0e 03 	sts	0x030E, r1	; 0x80030e <sg_bADCUpdate>
 f78:	0e 94 85 11 	call	0x230a	; 0x230a <ModuleCurrentConvertReadings>
 f7c:	0e 94 e6 21 	call	0x43cc	; 0x43cc <ADCStartConversion>
 f80:	4f cf       	rjmp	.-354    	; 0xe20 <main+0x11a>

Disassembly of section .text.IsLeapYear:

00004160 <IsLeapYear>:
	return( bResult );
}

// Returns true if u16Year is a leap year
static bool IsLeapYear(uint16_t u16Year)
{
    4160:	9c 01       	movw	r18, r24
	bool bLeapYear = false;
	
	if ((u16Year % 400) == 0)
    4162:	60 e9       	ldi	r22, 0x90	; 144
    4164:	71 e0       	ldi	r23, 0x01	; 1
    4166:	0e 94 37 22 	call	0x446e	; 0x446e <__udivmodhi4>
    416a:	89 2b       	or	r24, r25
    416c:	69 f0       	breq	.+26     	; 0x4188 <IsLeapYear+0x28>
	{
		bLeapYear = true;
	}
	else
	if ((u16Year % 100) == 0)
    416e:	c9 01       	movw	r24, r18
    4170:	64 e6       	ldi	r22, 0x64	; 100
    4172:	70 e0       	ldi	r23, 0x00	; 0
    4174:	0e 94 37 22 	call	0x446e	; 0x446e <__udivmodhi4>
    4178:	89 2b       	or	r24, r25
    417a:	41 f0       	breq	.+16     	; 0x418c <IsLeapYear+0x2c>
	{
		// Not a leap year if divisible by 100 but not by 400
	}
	else
	if ((u16Year % 4) == 0)
    417c:	23 70       	andi	r18, 0x03	; 3
    417e:	33 27       	eor	r19, r19
    4180:	23 2b       	or	r18, r19
    4182:	31 f0       	breq	.+12     	; 0x4190 <IsLeapYear+0x30>
}

// Returns true if u16Year is a leap year
static bool IsLeapYear(uint16_t u16Year)
{
	bool bLeapYear = false;
    4184:	80 e0       	ldi	r24, 0x00	; 0
    4186:	08 95       	ret
	
	if ((u16Year % 400) == 0)
	{
		bLeapYear = true;
    4188:	81 e0       	ldi	r24, 0x01	; 1
    418a:	08 95       	ret
}

// Returns true if u16Year is a leap year
static bool IsLeapYear(uint16_t u16Year)
{
	bool bLeapYear = false;
    418c:	80 e0       	ldi	r24, 0x00	; 0
    418e:	08 95       	ret
		// Not a leap year if divisible by 100 but not by 400
	}
	else
	if ((u16Year % 4) == 0)
	{
		bLeapYear = true;
    4190:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return(bLeapYear);
}
    4192:	08 95       	ret

Disassembly of section .text.RTCStartTransaction:

00003f42 <RTCStartTransaction>:
}

static bool RTCStartTransaction( uint8_t u8Address, 
								 bool bRead, 
								 bool bAllowUnstick )
{
    3f42:	ff 92       	push	r15
    3f44:	0f 93       	push	r16
    3f46:	1f 93       	push	r17
    3f48:	cf 93       	push	r28
    3f4a:	df 93       	push	r29
    3f4c:	f8 2e       	mov	r15, r24
    3f4e:	06 2f       	mov	r16, r22
    3f50:	14 2f       	mov	r17, r20
	bool bResult = false;
	uint8_t u8Tries = RTC_MAX_ADDRESS_TRIES;
    3f52:	d3 e0       	ldi	r29, 0x03	; 3

static bool RTCStartTransaction( uint8_t u8Address, 
								 bool bRead, 
								 bool bAllowUnstick )
{
	bool bResult = false;
    3f54:	c0 e0       	ldi	r28, 0x00	; 0
	uint8_t u8Tries = RTC_MAX_ADDRESS_TRIES;
	
	while( (false == bResult) && u8Tries )
    3f56:	0c c0       	rjmp	.+24     	; 0x3f70 <RTCStartTransaction+0x2e>
	{
		u8Tries--;
    3f58:	d1 50       	subi	r29, 0x01	; 1
		
		bResult = I2CStartTransaction( u8Address, bRead );
    3f5a:	60 2f       	mov	r22, r16
    3f5c:	8f 2d       	mov	r24, r15
    3f5e:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <I2CStartTransaction>
    3f62:	c8 2f       	mov	r28, r24
	
		if( false == bAllowUnstick )
    3f64:	11 23       	and	r17, r17
    3f66:	41 f0       	breq	.+16     	; 0x3f78 <RTCStartTransaction+0x36>
		{
			break;
		}
		
		// Unstick and retry on failure
		if( false == bResult )
    3f68:	81 11       	cpse	r24, r1
    3f6a:	02 c0       	rjmp	.+4      	; 0x3f70 <RTCStartTransaction+0x2e>
		{
			I2CUnstick();
    3f6c:	0e 94 04 20 	call	0x4008	; 0x4008 <I2CUnstick>
								 bool bAllowUnstick )
{
	bool bResult = false;
	uint8_t u8Tries = RTC_MAX_ADDRESS_TRIES;
	
	while( (false == bResult) && u8Tries )
    3f70:	c1 11       	cpse	r28, r1
    3f72:	02 c0       	rjmp	.+4      	; 0x3f78 <RTCStartTransaction+0x36>
    3f74:	d1 11       	cpse	r29, r1
    3f76:	f0 cf       	rjmp	.-32     	; 0x3f58 <RTCStartTransaction+0x16>
			I2CUnstick();
		}
	}
	
	return( bResult );
}
    3f78:	8c 2f       	mov	r24, r28
    3f7a:	df 91       	pop	r29
    3f7c:	cf 91       	pop	r28
    3f7e:	1f 91       	pop	r17
    3f80:	0f 91       	pop	r16
    3f82:	ff 90       	pop	r15
    3f84:	08 95       	ret

Disassembly of section .text.StructTMToHW:

00003d60 <StructTMToHW>:
}

// Converts struct tm to SMCP7940NTime structure
static void StructTMToHW(struct tm *psTimeTM,
						 SMCP7940NTime *psTime)
{
    3d60:	cf 93       	push	r28
    3d62:	df 93       	push	r29
    3d64:	dc 01       	movw	r26, r24
    3d66:	fb 01       	movw	r30, r22
	memset((void *) psTime, 0, sizeof(*psTime));
    3d68:	87 e0       	ldi	r24, 0x07	; 7
    3d6a:	eb 01       	movw	r28, r22
    3d6c:	19 92       	st	Y+, r1
    3d6e:	8a 95       	dec	r24
    3d70:	e9 f7       	brne	.-6      	; 0x3d6c <StructTMToHW+0xc>
	
	psTime->u8Seconds = psTimeTM->tm_sec;
    3d72:	8c 91       	ld	r24, X
    3d74:	80 83       	st	Z, r24
	psTime->u8Minutes = psTimeTM->tm_min;
    3d76:	12 96       	adiw	r26, 0x02	; 2
    3d78:	8c 91       	ld	r24, X
    3d7a:	12 97       	sbiw	r26, 0x02	; 2
    3d7c:	81 83       	std	Z+1, r24	; 0x01
	psTime->u8Hours = psTimeTM->tm_hour;
    3d7e:	14 96       	adiw	r26, 0x04	; 4
    3d80:	8c 91       	ld	r24, X
    3d82:	14 97       	sbiw	r26, 0x04	; 4
    3d84:	82 83       	std	Z+2, r24	; 0x02
	psTime->u8Day = psTimeTM->tm_mday;
    3d86:	16 96       	adiw	r26, 0x06	; 6
    3d88:	8c 91       	ld	r24, X
    3d8a:	16 97       	sbiw	r26, 0x06	; 6
    3d8c:	84 83       	std	Z+4, r24	; 0x04
	psTime->u8Month = psTimeTM->tm_mon;
    3d8e:	18 96       	adiw	r26, 0x08	; 8
    3d90:	8c 91       	ld	r24, X
    3d92:	18 97       	sbiw	r26, 0x08	; 8
    3d94:	85 83       	std	Z+5, r24	; 0x05
	
	if (psTimeTM->tm_year > (2099-1900))
    3d96:	1a 96       	adiw	r26, 0x0a	; 10
    3d98:	8d 91       	ld	r24, X+
    3d9a:	9c 91       	ld	r25, X
    3d9c:	1b 97       	sbiw	r26, 0x0b	; 11
    3d9e:	88 3c       	cpi	r24, 0xC8	; 200
    3da0:	91 05       	cpc	r25, r1
    3da2:	1c f0       	brlt	.+6      	; 0x3daa <StructTMToHW+0x4a>
	{
		psTime->u8Year = psTimeTM->tm_year - 2100;
    3da4:	84 53       	subi	r24, 0x34	; 52
    3da6:	86 83       	std	Z+6, r24	; 0x06
    3da8:	02 c0       	rjmp	.+4      	; 0x3dae <StructTMToHW+0x4e>
	}
	else
	{
		psTime->u8Year = psTimeTM->tm_year - 2000;
    3daa:	80 5d       	subi	r24, 0xD0	; 208
    3dac:	86 83       	std	Z+6, r24	; 0x06
	}
	
}
    3dae:	df 91       	pop	r29
    3db0:	cf 91       	pop	r28
    3db2:	08 95       	ret

Disassembly of section .text.HWToStructTM:

000036d4 <HWToStructTM>:
}

// Converts an SMCP7940NTime structure to struct tm
static void HWToStructTM(SMCP7940NTime *psTime,
						 struct tm *psTimeTM)
{
    36d4:	cf 93       	push	r28
    36d6:	df 93       	push	r29
    36d8:	dc 01       	movw	r26, r24
    36da:	fb 01       	movw	r30, r22
	// At this point, the time is in STime and we should
	// turn that in to time_t
	memset((void *) psTimeTM, 0, sizeof(*psTimeTM));
    36dc:	89 e1       	ldi	r24, 0x19	; 25
    36de:	eb 01       	movw	r28, r22
    36e0:	19 92       	st	Y+, r1
    36e2:	8a 95       	dec	r24
    36e4:	e9 f7       	brne	.-6      	; 0x36e0 <HWToStructTM+0xc>
	
	psTimeTM->tm_sec = psTime->u8Seconds;
    36e6:	8c 91       	ld	r24, X
    36e8:	90 e0       	ldi	r25, 0x00	; 0
    36ea:	91 83       	std	Z+1, r25	; 0x01
    36ec:	80 83       	st	Z, r24
	psTimeTM->tm_min = psTime->u8Minutes;
    36ee:	11 96       	adiw	r26, 0x01	; 1
    36f0:	8c 91       	ld	r24, X
    36f2:	11 97       	sbiw	r26, 0x01	; 1
    36f4:	90 e0       	ldi	r25, 0x00	; 0
    36f6:	93 83       	std	Z+3, r25	; 0x03
    36f8:	82 83       	std	Z+2, r24	; 0x02
	psTimeTM->tm_hour = psTime->u8Hours;
    36fa:	12 96       	adiw	r26, 0x02	; 2
    36fc:	8c 91       	ld	r24, X
    36fe:	12 97       	sbiw	r26, 0x02	; 2
    3700:	90 e0       	ldi	r25, 0x00	; 0
    3702:	95 83       	std	Z+5, r25	; 0x05
    3704:	84 83       	std	Z+4, r24	; 0x04
	psTimeTM->tm_mday = psTime->u8Day;
    3706:	14 96       	adiw	r26, 0x04	; 4
    3708:	8c 91       	ld	r24, X
    370a:	14 97       	sbiw	r26, 0x04	; 4
    370c:	90 e0       	ldi	r25, 0x00	; 0
    370e:	97 83       	std	Z+7, r25	; 0x07
    3710:	86 83       	std	Z+6, r24	; 0x06
	psTimeTM->tm_mon = psTime->u8Month - 1;
    3712:	15 96       	adiw	r26, 0x05	; 5
    3714:	8c 91       	ld	r24, X
    3716:	15 97       	sbiw	r26, 0x05	; 5
    3718:	90 e0       	ldi	r25, 0x00	; 0
    371a:	01 97       	sbiw	r24, 0x01	; 1
    371c:	91 87       	std	Z+9, r25	; 0x09
    371e:	80 87       	std	Z+8, r24	; 0x08
	
	if (psTime->u8Year < YEAR_ROLLOVER_CUTOFF)
    3720:	16 96       	adiw	r26, 0x06	; 6
    3722:	8c 91       	ld	r24, X
    3724:	84 31       	cpi	r24, 0x14	; 20
    3726:	30 f4       	brcc	.+12     	; 0x3734 <HWToStructTM+0x60>
	{
		psTimeTM->tm_year = 2100 + psTime->u8Year;
    3728:	90 e0       	ldi	r25, 0x00	; 0
    372a:	8c 5c       	subi	r24, 0xCC	; 204
    372c:	97 4f       	sbci	r25, 0xF7	; 247
    372e:	93 87       	std	Z+11, r25	; 0x0b
    3730:	82 87       	std	Z+10, r24	; 0x0a
    3732:	05 c0       	rjmp	.+10     	; 0x373e <HWToStructTM+0x6a>
	}
	else
	{
		psTimeTM->tm_year = 2000 + psTime->u8Year;
    3734:	90 e0       	ldi	r25, 0x00	; 0
    3736:	80 53       	subi	r24, 0x30	; 48
    3738:	98 4f       	sbci	r25, 0xF8	; 248
    373a:	93 87       	std	Z+11, r25	; 0x0b
    373c:	82 87       	std	Z+10, r24	; 0x0a
	}	
	
	psTimeTM->tm_year -= 1900;
    373e:	82 85       	ldd	r24, Z+10	; 0x0a
    3740:	93 85       	ldd	r25, Z+11	; 0x0b
    3742:	8c 56       	subi	r24, 0x6C	; 108
    3744:	97 40       	sbci	r25, 0x07	; 7
    3746:	93 87       	std	Z+11, r25	; 0x0b
    3748:	82 87       	std	Z+10, r24	; 0x0a
}
    374a:	df 91       	pop	r29
    374c:	cf 91       	pop	r28
    374e:	08 95       	ret

Disassembly of section .text.__vector_10:

0000344a <__vector_10>:
// # Of seconds since January 1, 1970
static volatile uint64_t sg_u64Time;

// Called once per second on rev 1 and newer hardware
ISR(INT3_vect, ISR_NOBLOCK)
{
    344a:	78 94       	sei
    344c:	1f 92       	push	r1
    344e:	0f 92       	push	r0
    3450:	0f b6       	in	r0, 0x3f	; 63
    3452:	0f 92       	push	r0
    3454:	11 24       	eor	r1, r1
    3456:	2f 93       	push	r18
    3458:	3f 93       	push	r19
    345a:	4f 93       	push	r20
    345c:	5f 93       	push	r21
    345e:	6f 93       	push	r22
    3460:	7f 93       	push	r23
    3462:	8f 93       	push	r24
    3464:	9f 93       	push	r25
    3466:	af 93       	push	r26
	EIFR |= (1 << INTF3);
    3468:	8c b3       	in	r24, 0x1c	; 28
    346a:	88 60       	ori	r24, 0x08	; 8
    346c:	8c bb       	out	0x1c, r24	; 28
	sg_u64Time++;
    346e:	20 91 41 07 	lds	r18, 0x0741	; 0x800741 <sg_u64Time>
    3472:	30 91 42 07 	lds	r19, 0x0742	; 0x800742 <sg_u64Time+0x1>
    3476:	40 91 43 07 	lds	r20, 0x0743	; 0x800743 <sg_u64Time+0x2>
    347a:	50 91 44 07 	lds	r21, 0x0744	; 0x800744 <sg_u64Time+0x3>
    347e:	60 91 45 07 	lds	r22, 0x0745	; 0x800745 <sg_u64Time+0x4>
    3482:	70 91 46 07 	lds	r23, 0x0746	; 0x800746 <sg_u64Time+0x5>
    3486:	80 91 47 07 	lds	r24, 0x0747	; 0x800747 <sg_u64Time+0x6>
    348a:	90 91 48 07 	lds	r25, 0x0748	; 0x800748 <sg_u64Time+0x7>
    348e:	a1 e0       	ldi	r26, 0x01	; 1
    3490:	0e 94 5f 24 	call	0x48be	; 0x48be <__adddi3_s8>
    3494:	20 93 41 07 	sts	0x0741, r18	; 0x800741 <sg_u64Time>
    3498:	30 93 42 07 	sts	0x0742, r19	; 0x800742 <sg_u64Time+0x1>
    349c:	40 93 43 07 	sts	0x0743, r20	; 0x800743 <sg_u64Time+0x2>
    34a0:	50 93 44 07 	sts	0x0744, r21	; 0x800744 <sg_u64Time+0x3>
    34a4:	60 93 45 07 	sts	0x0745, r22	; 0x800745 <sg_u64Time+0x4>
    34a8:	70 93 46 07 	sts	0x0746, r23	; 0x800746 <sg_u64Time+0x5>
    34ac:	80 93 47 07 	sts	0x0747, r24	; 0x800747 <sg_u64Time+0x6>
    34b0:	90 93 48 07 	sts	0x0748, r25	; 0x800748 <sg_u64Time+0x7>
}
    34b4:	af 91       	pop	r26
    34b6:	9f 91       	pop	r25
    34b8:	8f 91       	pop	r24
    34ba:	7f 91       	pop	r23
    34bc:	6f 91       	pop	r22
    34be:	5f 91       	pop	r21
    34c0:	4f 91       	pop	r20
    34c2:	3f 91       	pop	r19
    34c4:	2f 91       	pop	r18
    34c6:	0f 90       	pop	r0
    34c8:	0f be       	out	0x3f, r0	; 63
    34ca:	0f 90       	pop	r0
    34cc:	1f 90       	pop	r1
    34ce:	18 95       	reti

Disassembly of section .text.RTCReadRegisters:

00003656 <RTCReadRegisters>:
}

bool RTCReadRegisters( uint8_t u8RegisterAddr, 
					   uint8_t* pu8Data, 
					   uint8_t u8Length )
{
    3656:	ff 92       	push	r15
    3658:	0f 93       	push	r16
    365a:	1f 93       	push	r17
    365c:	cf 93       	push	r28
    365e:	df 93       	push	r29
    3660:	f8 2e       	mov	r15, r24
    3662:	8b 01       	movw	r16, r22
    3664:	c4 2f       	mov	r28, r20
	bool bResult;
	
	MBASSERT( u8Length >= 1 );
    3666:	41 11       	cpse	r20, r1
    3668:	07 c0       	rjmp	.+14     	; 0x3678 <RTCReadRegisters+0x22>
    366a:	4f e5       	ldi	r20, 0x5F	; 95
    366c:	50 e0       	ldi	r21, 0x00	; 0
    366e:	6a e6       	ldi	r22, 0x6A	; 106
    3670:	71 e0       	ldi	r23, 0x01	; 1
    3672:	80 e0       	ldi	r24, 0x00	; 0
    3674:	0e 94 a4 21 	call	0x4348	; 0x4348 <PlatformAssert>
	
	// First send device address and write register address
	bResult = RTCStartTransaction( RTC_ADDRESS, false, true );
    3678:	41 e0       	ldi	r20, 0x01	; 1
    367a:	60 e0       	ldi	r22, 0x00	; 0
    367c:	8e ed       	ldi	r24, 0xDE	; 222
    367e:	0e 94 a1 1f 	call	0x3f42	; 0x3f42 <RTCStartTransaction>
    3682:	d8 2f       	mov	r29, r24
	
	// Couldn't get an ACK?  Give up now
	if( false == bResult )
    3684:	88 23       	and	r24, r24
    3686:	e9 f0       	breq	.+58     	; 0x36c2 <RTCReadRegisters+0x6c>
	{
		goto errorExit;
	}
	
	// Send the register address
	bResult = I2CTxByte( u8RegisterAddr );
    3688:	8f 2d       	mov	r24, r15
    368a:	0e 94 d3 1c 	call	0x39a6	; 0x39a6 <I2CTxByte>
    368e:	d8 2f       	mov	r29, r24
	
	if( false == bResult )
    3690:	88 23       	and	r24, r24
    3692:	b9 f0       	breq	.+46     	; 0x36c2 <RTCReadRegisters+0x6c>
	{
		goto errorExit;
	}
	
	// Send repeated start with read
	bResult = RTCStartTransaction( RTC_ADDRESS, true, false );
    3694:	40 e0       	ldi	r20, 0x00	; 0
    3696:	61 e0       	ldi	r22, 0x01	; 1
    3698:	8e ed       	ldi	r24, 0xDE	; 222
    369a:	0e 94 a1 1f 	call	0x3f42	; 0x3f42 <RTCStartTransaction>
    369e:	d8 2f       	mov	r29, r24
	
	// Couldn't get an ACK?  Give up now
	if( false == bResult )
    36a0:	81 11       	cpse	r24, r1
    36a2:	08 c0       	rjmp	.+16     	; 0x36b4 <RTCReadRegisters+0x5e>
    36a4:	0e c0       	rjmp	.+28     	; 0x36c2 <RTCReadRegisters+0x6c>
		goto errorExit;
	}
	
	while( u8Length >= 2 )
	{
		*pu8Data = I2CRxByte( true );
    36a6:	81 e0       	ldi	r24, 0x01	; 1
    36a8:	0e 94 e6 1b 	call	0x37cc	; 0x37cc <I2CRxByte>
    36ac:	f8 01       	movw	r30, r16
    36ae:	81 93       	st	Z+, r24
    36b0:	8f 01       	movw	r16, r30
		pu8Data++;
		u8Length--;
    36b2:	c1 50       	subi	r28, 0x01	; 1
	if( false == bResult )
	{
		goto errorExit;
	}
	
	while( u8Length >= 2 )
    36b4:	c2 30       	cpi	r28, 0x02	; 2
    36b6:	b8 f7       	brcc	.-18     	; 0x36a6 <RTCReadRegisters+0x50>
		pu8Data++;
		u8Length--;
	}
	
	// Final read with NACK
	*pu8Data = I2CRxByte( false );
    36b8:	80 e0       	ldi	r24, 0x00	; 0
    36ba:	0e 94 e6 1b 	call	0x37cc	; 0x37cc <I2CRxByte>
    36be:	f8 01       	movw	r30, r16
    36c0:	80 83       	st	Z, r24
	
errorExit:

	I2CStop();
    36c2:	0e 94 5f 22 	call	0x44be	; 0x44be <I2CStop>
	
	return(bResult);
}
    36c6:	8d 2f       	mov	r24, r29
    36c8:	df 91       	pop	r29
    36ca:	cf 91       	pop	r28
    36cc:	1f 91       	pop	r17
    36ce:	0f 91       	pop	r16
    36d0:	ff 90       	pop	r15
    36d2:	08 95       	ret

Disassembly of section .text.RTCReadHW:

00002602 <RTCReadHW>:
	sei();
	
	psSrc = gmtime((const time_t *) &u64Time);
	memcpy((void *) psTime, (void *) psSrc, sizeof(*psTime));
	return(true);
}
    2602:	cf 93       	push	r28
    2604:	df 93       	push	r29
    2606:	ec 01       	movw	r28, r24
    2608:	47 e0       	ldi	r20, 0x07	; 7
    260a:	bc 01       	movw	r22, r24
    260c:	80 e0       	ldi	r24, 0x00	; 0
    260e:	0e 94 2b 1b 	call	0x3656	; 0x3656 <RTCReadRegisters>
    2612:	88 23       	and	r24, r24
    2614:	09 f4       	brne	.+2      	; 0x2618 <RTCReadHW+0x16>
    2616:	63 c0       	rjmp	.+198    	; 0x26de <RTCReadHW+0xdc>
    2618:	98 81       	ld	r25, Y
    261a:	29 2f       	mov	r18, r25
    261c:	22 95       	swap	r18
    261e:	2f 70       	andi	r18, 0x0F	; 15
    2620:	27 70       	andi	r18, 0x07	; 7
    2622:	22 0f       	add	r18, r18
    2624:	32 2f       	mov	r19, r18
    2626:	33 0f       	add	r19, r19
    2628:	33 0f       	add	r19, r19
    262a:	23 0f       	add	r18, r19
    262c:	9f 70       	andi	r25, 0x0F	; 15
    262e:	92 0f       	add	r25, r18
    2630:	98 83       	st	Y, r25
    2632:	99 81       	ldd	r25, Y+1	; 0x01
    2634:	29 2f       	mov	r18, r25
    2636:	22 95       	swap	r18
    2638:	2f 70       	andi	r18, 0x0F	; 15
    263a:	27 70       	andi	r18, 0x07	; 7
    263c:	22 0f       	add	r18, r18
    263e:	32 2f       	mov	r19, r18
    2640:	33 0f       	add	r19, r19
    2642:	33 0f       	add	r19, r19
    2644:	23 0f       	add	r18, r19
    2646:	9f 70       	andi	r25, 0x0F	; 15
    2648:	92 0f       	add	r25, r18
    264a:	99 83       	std	Y+1, r25	; 0x01
    264c:	9a 81       	ldd	r25, Y+2	; 0x02
    264e:	96 ff       	sbrs	r25, 6
    2650:	11 c0       	rjmp	.+34     	; 0x2674 <RTCReadHW+0x72>
    2652:	94 fb       	bst	r25, 4
    2654:	22 27       	eor	r18, r18
    2656:	20 f9       	bld	r18, 0
    2658:	22 0f       	add	r18, r18
    265a:	32 2f       	mov	r19, r18
    265c:	33 0f       	add	r19, r19
    265e:	33 0f       	add	r19, r19
    2660:	23 0f       	add	r18, r19
    2662:	39 2f       	mov	r19, r25
    2664:	3f 70       	andi	r19, 0x0F	; 15
    2666:	23 0f       	add	r18, r19
    2668:	2a 83       	std	Y+2, r18	; 0x02
    266a:	95 ff       	sbrs	r25, 5
    266c:	0f c0       	rjmp	.+30     	; 0x268c <RTCReadHW+0x8a>
    266e:	24 5f       	subi	r18, 0xF4	; 244
    2670:	2a 83       	std	Y+2, r18	; 0x02
    2672:	0c c0       	rjmp	.+24     	; 0x268c <RTCReadHW+0x8a>
    2674:	29 2f       	mov	r18, r25
    2676:	22 95       	swap	r18
    2678:	2f 70       	andi	r18, 0x0F	; 15
    267a:	23 70       	andi	r18, 0x03	; 3
    267c:	22 0f       	add	r18, r18
    267e:	32 2f       	mov	r19, r18
    2680:	33 0f       	add	r19, r19
    2682:	33 0f       	add	r19, r19
    2684:	23 0f       	add	r18, r19
    2686:	9f 70       	andi	r25, 0x0F	; 15
    2688:	92 0f       	add	r25, r18
    268a:	9a 83       	std	Y+2, r25	; 0x02
    268c:	9b 81       	ldd	r25, Y+3	; 0x03
    268e:	97 70       	andi	r25, 0x07	; 7
    2690:	9b 83       	std	Y+3, r25	; 0x03
    2692:	9c 81       	ldd	r25, Y+4	; 0x04
    2694:	29 2f       	mov	r18, r25
    2696:	22 95       	swap	r18
    2698:	2f 70       	andi	r18, 0x0F	; 15
    269a:	23 70       	andi	r18, 0x03	; 3
    269c:	22 0f       	add	r18, r18
    269e:	32 2f       	mov	r19, r18
    26a0:	33 0f       	add	r19, r19
    26a2:	33 0f       	add	r19, r19
    26a4:	23 0f       	add	r18, r19
    26a6:	9f 70       	andi	r25, 0x0F	; 15
    26a8:	92 0f       	add	r25, r18
    26aa:	9c 83       	std	Y+4, r25	; 0x04
    26ac:	9d 81       	ldd	r25, Y+5	; 0x05
    26ae:	94 fb       	bst	r25, 4
    26b0:	22 27       	eor	r18, r18
    26b2:	20 f9       	bld	r18, 0
    26b4:	22 0f       	add	r18, r18
    26b6:	32 2f       	mov	r19, r18
    26b8:	33 0f       	add	r19, r19
    26ba:	33 0f       	add	r19, r19
    26bc:	23 0f       	add	r18, r19
    26be:	9f 70       	andi	r25, 0x0F	; 15
    26c0:	92 0f       	add	r25, r18
    26c2:	9d 83       	std	Y+5, r25	; 0x05
    26c4:	9e 81       	ldd	r25, Y+6	; 0x06
    26c6:	29 2f       	mov	r18, r25
    26c8:	22 95       	swap	r18
    26ca:	2f 70       	andi	r18, 0x0F	; 15
    26cc:	22 0f       	add	r18, r18
    26ce:	32 2f       	mov	r19, r18
    26d0:	33 0f       	add	r19, r19
    26d2:	33 0f       	add	r19, r19
    26d4:	23 0f       	add	r18, r19
    26d6:	9f 70       	andi	r25, 0x0F	; 15
    26d8:	92 0f       	add	r25, r18
    26da:	9c 5e       	subi	r25, 0xEC	; 236
    26dc:	9e 83       	std	Y+6, r25	; 0x06
    26de:	df 91       	pop	r29
    26e0:	cf 91       	pop	r28
    26e2:	08 95       	ret

Disassembly of section .text.RTCWriteRegisters:

00003a10 <RTCWriteRegisters>:
}

bool RTCWriteRegisters( uint8_t u8RegisterAddr,
						uint8_t* pu8Data, 
						uint8_t u8Length )
{
    3a10:	ff 92       	push	r15
    3a12:	0f 93       	push	r16
    3a14:	1f 93       	push	r17
    3a16:	cf 93       	push	r28
    3a18:	df 93       	push	r29
    3a1a:	f8 2e       	mov	r15, r24
    3a1c:	8b 01       	movw	r16, r22
    3a1e:	c4 2f       	mov	r28, r20
	bool bResult;
	
	MBASSERT( u8Length >= 1 );
    3a20:	41 11       	cpse	r20, r1
    3a22:	07 c0       	rjmp	.+14     	; 0x3a32 <RTCWriteRegisters+0x22>
    3a24:	42 e9       	ldi	r20, 0x92	; 146
    3a26:	50 e0       	ldi	r21, 0x00	; 0
    3a28:	6a e6       	ldi	r22, 0x6A	; 106
    3a2a:	71 e0       	ldi	r23, 0x01	; 1
    3a2c:	80 e0       	ldi	r24, 0x00	; 0
    3a2e:	0e 94 a4 21 	call	0x4348	; 0x4348 <PlatformAssert>
	
	// First send device address and write register address
	bResult = RTCStartTransaction( RTC_ADDRESS, false, true );
    3a32:	41 e0       	ldi	r20, 0x01	; 1
    3a34:	60 e0       	ldi	r22, 0x00	; 0
    3a36:	8e ed       	ldi	r24, 0xDE	; 222
    3a38:	0e 94 a1 1f 	call	0x3f42	; 0x3f42 <RTCStartTransaction>
    3a3c:	d8 2f       	mov	r29, r24
	
	// Couldn't get an ACK?  Give up now
	if( false == bResult )
    3a3e:	88 23       	and	r24, r24
    3a40:	99 f0       	breq	.+38     	; 0x3a68 <RTCWriteRegisters+0x58>
	{
		goto errorExit;
	}
	
	// Send the register address
	bResult = I2CTxByte( u8RegisterAddr );
    3a42:	8f 2d       	mov	r24, r15
    3a44:	0e 94 d3 1c 	call	0x39a6	; 0x39a6 <I2CTxByte>
    3a48:	d8 2f       	mov	r29, r24
	
	if( false == bResult )
    3a4a:	81 11       	cpse	r24, r1
    3a4c:	0b c0       	rjmp	.+22     	; 0x3a64 <RTCWriteRegisters+0x54>
    3a4e:	0c c0       	rjmp	.+24     	; 0x3a68 <RTCWriteRegisters+0x58>
	}
	
	// Now immediately send the sequential data
	while( u8Length )
	{
		bResult = I2CTxByte( *pu8Data );
    3a50:	f8 01       	movw	r30, r16
    3a52:	80 81       	ld	r24, Z
    3a54:	0e 94 d3 1c 	call	0x39a6	; 0x39a6 <I2CTxByte>
    3a58:	d8 2f       	mov	r29, r24
		
		if( false == bResult )
    3a5a:	88 23       	and	r24, r24
    3a5c:	29 f0       	breq	.+10     	; 0x3a68 <RTCWriteRegisters+0x58>
		{
			goto errorExit;
		}
		
		pu8Data++;
    3a5e:	0f 5f       	subi	r16, 0xFF	; 255
    3a60:	1f 4f       	sbci	r17, 0xFF	; 255
		u8Length--;
    3a62:	c1 50       	subi	r28, 0x01	; 1
	{
		goto errorExit;
	}
	
	// Now immediately send the sequential data
	while( u8Length )
    3a64:	c1 11       	cpse	r28, r1
    3a66:	f4 cf       	rjmp	.-24     	; 0x3a50 <RTCWriteRegisters+0x40>
		u8Length--;
	}
	
errorExit:

	I2CStop();
    3a68:	0e 94 5f 22 	call	0x44be	; 0x44be <I2CStop>
	
	return( bResult );
}
    3a6c:	8d 2f       	mov	r24, r29
    3a6e:	df 91       	pop	r29
    3a70:	cf 91       	pop	r28
    3a72:	1f 91       	pop	r17
    3a74:	0f 91       	pop	r16
    3a76:	ff 90       	pop	r15
    3a78:	08 95       	ret

Disassembly of section .text.RTCWriteHW:

0000240e <RTCWriteHW>:
	sei();
	
	psSrc = gmtime((const time_t *) &u64Time);
	memcpy((void *) psTime, (void *) psSrc, sizeof(*psTime));
	return(true);
}
    240e:	fc 01       	movw	r30, r24
    2410:	20 81       	ld	r18, Z
    2412:	8d ec       	ldi	r24, 0xCD	; 205
    2414:	28 9f       	mul	r18, r24
    2416:	91 2d       	mov	r25, r1
    2418:	11 24       	eor	r1, r1
    241a:	96 95       	lsr	r25
    241c:	96 95       	lsr	r25
    241e:	96 95       	lsr	r25
    2420:	30 e1       	ldi	r19, 0x10	; 16
    2422:	93 9f       	mul	r25, r19
    2424:	a0 01       	movw	r20, r0
    2426:	11 24       	eor	r1, r1
    2428:	99 0f       	add	r25, r25
    242a:	39 2f       	mov	r19, r25
    242c:	33 0f       	add	r19, r19
    242e:	33 0f       	add	r19, r19
    2430:	93 0f       	add	r25, r19
    2432:	29 1b       	sub	r18, r25
    2434:	24 2b       	or	r18, r20
    2436:	20 83       	st	Z, r18
    2438:	21 81       	ldd	r18, Z+1	; 0x01
    243a:	28 9f       	mul	r18, r24
    243c:	91 2d       	mov	r25, r1
    243e:	11 24       	eor	r1, r1
    2440:	96 95       	lsr	r25
    2442:	96 95       	lsr	r25
    2444:	96 95       	lsr	r25
    2446:	30 e1       	ldi	r19, 0x10	; 16
    2448:	93 9f       	mul	r25, r19
    244a:	a0 01       	movw	r20, r0
    244c:	11 24       	eor	r1, r1
    244e:	99 0f       	add	r25, r25
    2450:	39 2f       	mov	r19, r25
    2452:	33 0f       	add	r19, r19
    2454:	33 0f       	add	r19, r19
    2456:	93 0f       	add	r25, r19
    2458:	29 1b       	sub	r18, r25
    245a:	24 2b       	or	r18, r20
    245c:	21 83       	std	Z+1, r18	; 0x01
    245e:	42 81       	ldd	r20, Z+2	; 0x02
    2460:	48 9f       	mul	r20, r24
    2462:	91 2d       	mov	r25, r1
    2464:	11 24       	eor	r1, r1
    2466:	96 95       	lsr	r25
    2468:	96 95       	lsr	r25
    246a:	96 95       	lsr	r25
    246c:	50 e1       	ldi	r21, 0x10	; 16
    246e:	95 9f       	mul	r25, r21
    2470:	90 01       	movw	r18, r0
    2472:	11 24       	eor	r1, r1
    2474:	99 0f       	add	r25, r25
    2476:	39 2f       	mov	r19, r25
    2478:	33 0f       	add	r19, r19
    247a:	33 0f       	add	r19, r19
    247c:	93 0f       	add	r25, r19
    247e:	49 1b       	sub	r20, r25
    2480:	24 2b       	or	r18, r20
    2482:	2f 7b       	andi	r18, 0xBF	; 191
    2484:	22 83       	std	Z+2, r18	; 0x02
    2486:	93 81       	ldd	r25, Z+3	; 0x03
    2488:	97 70       	andi	r25, 0x07	; 7
    248a:	98 60       	ori	r25, 0x08	; 8
    248c:	93 83       	std	Z+3, r25	; 0x03
    248e:	24 81       	ldd	r18, Z+4	; 0x04
    2490:	28 9f       	mul	r18, r24
    2492:	91 2d       	mov	r25, r1
    2494:	11 24       	eor	r1, r1
    2496:	96 95       	lsr	r25
    2498:	96 95       	lsr	r25
    249a:	96 95       	lsr	r25
    249c:	30 e1       	ldi	r19, 0x10	; 16
    249e:	93 9f       	mul	r25, r19
    24a0:	a0 01       	movw	r20, r0
    24a2:	11 24       	eor	r1, r1
    24a4:	99 0f       	add	r25, r25
    24a6:	39 2f       	mov	r19, r25
    24a8:	33 0f       	add	r19, r19
    24aa:	33 0f       	add	r19, r19
    24ac:	93 0f       	add	r25, r19
    24ae:	29 1b       	sub	r18, r25
    24b0:	24 2b       	or	r18, r20
    24b2:	24 83       	std	Z+4, r18	; 0x04
    24b4:	25 81       	ldd	r18, Z+5	; 0x05
    24b6:	28 9f       	mul	r18, r24
    24b8:	91 2d       	mov	r25, r1
    24ba:	11 24       	eor	r1, r1
    24bc:	96 95       	lsr	r25
    24be:	96 95       	lsr	r25
    24c0:	96 95       	lsr	r25
    24c2:	30 e1       	ldi	r19, 0x10	; 16
    24c4:	93 9f       	mul	r25, r19
    24c6:	a0 01       	movw	r20, r0
    24c8:	11 24       	eor	r1, r1
    24ca:	99 0f       	add	r25, r25
    24cc:	39 2f       	mov	r19, r25
    24ce:	33 0f       	add	r19, r19
    24d0:	33 0f       	add	r19, r19
    24d2:	93 0f       	add	r25, r19
    24d4:	29 1b       	sub	r18, r25
    24d6:	24 2b       	or	r18, r20
    24d8:	25 83       	std	Z+5, r18	; 0x05
    24da:	96 81       	ldd	r25, Z+6	; 0x06
    24dc:	98 9f       	mul	r25, r24
    24de:	81 2d       	mov	r24, r1
    24e0:	11 24       	eor	r1, r1
    24e2:	86 95       	lsr	r24
    24e4:	86 95       	lsr	r24
    24e6:	86 95       	lsr	r24
    24e8:	40 e1       	ldi	r20, 0x10	; 16
    24ea:	84 9f       	mul	r24, r20
    24ec:	90 01       	movw	r18, r0
    24ee:	11 24       	eor	r1, r1
    24f0:	88 0f       	add	r24, r24
    24f2:	38 2f       	mov	r19, r24
    24f4:	33 0f       	add	r19, r19
    24f6:	33 0f       	add	r19, r19
    24f8:	83 0f       	add	r24, r19
    24fa:	98 1b       	sub	r25, r24
    24fc:	92 2b       	or	r25, r18
    24fe:	96 83       	std	Z+6, r25	; 0x06
    2500:	47 e0       	ldi	r20, 0x07	; 7
    2502:	bf 01       	movw	r22, r30
    2504:	80 e0       	ldi	r24, 0x00	; 0
    2506:	0e 94 08 1d 	call	0x3a10	; 0x3a10 <RTCWriteRegisters>
    250a:	08 95       	ret

Disassembly of section .text.RTCSetTime:

00002b1c <RTCSetTime>:

// This sets the RTC to the specific time passed in. True is returned
// if it's 
bool RTCSetTime(uint64_t u64Timet)
{
    2b1c:	0f 93       	push	r16
    2b1e:	1f 93       	push	r17
    2b20:	cf 93       	push	r28
    2b22:	df 93       	push	r29
    2b24:	cd b7       	in	r28, 0x3d	; 61
    2b26:	de b7       	in	r29, 0x3e	; 62
    2b28:	a8 97       	sbiw	r28, 0x28	; 40
    2b2a:	0f b6       	in	r0, 0x3f	; 63
    2b2c:	f8 94       	cli
    2b2e:	de bf       	out	0x3e, r29	; 62
    2b30:	0f be       	out	0x3f, r0	; 63
    2b32:	cd bf       	out	0x3d, r28	; 61
    2b34:	29 a3       	std	Y+33, r18	; 0x21
    2b36:	3a a3       	std	Y+34, r19	; 0x22
    2b38:	4b a3       	std	Y+35, r20	; 0x23
    2b3a:	5c a3       	std	Y+36, r21	; 0x24
    2b3c:	6d a3       	std	Y+37, r22	; 0x25
    2b3e:	7e a3       	std	Y+38, r23	; 0x26
    2b40:	8f a3       	std	Y+39, r24	; 0x27
    2b42:	98 a7       	std	Y+40, r25	; 0x28
	struct tm sTime;
	struct tm *psTime;
	SMCP7940NTime sTimeHW;

	// Convert to GMTime
	memset((void *) &sTime, 0, sizeof(sTime));
    2b44:	fe 01       	movw	r30, r28
    2b46:	31 96       	adiw	r30, 0x01	; 1
    2b48:	89 e1       	ldi	r24, 0x19	; 25
    2b4a:	df 01       	movw	r26, r30
    2b4c:	1d 92       	st	X+, r1
    2b4e:	8a 95       	dec	r24
    2b50:	e9 f7       	brne	.-6      	; 0x2b4c <RTCSetTime+0x30>
	psTime = gmtime((const time_t *) &u64Timet);
    2b52:	be 01       	movw	r22, r28
    2b54:	6f 5d       	subi	r22, 0xDF	; 223
    2b56:	7f 4f       	sbci	r23, 0xFF	; 255
    2b58:	80 e8       	ldi	r24, 0x80	; 128
    2b5a:	0e 94 38 25 	call	0x4a70	; 0x4a70 <gmtime>
    2b5e:	8c 01       	movw	r16, r24
	MBASSERT(psTime);
    2b60:	89 2b       	or	r24, r25
    2b62:	39 f4       	brne	.+14     	; 0x2b72 <RTCSetTime+0x56>
    2b64:	42 e8       	ldi	r20, 0x82	; 130
    2b66:	51 e0       	ldi	r21, 0x01	; 1
    2b68:	6a e6       	ldi	r22, 0x6A	; 106
    2b6a:	71 e0       	ldi	r23, 0x01	; 1
    2b6c:	80 e0       	ldi	r24, 0x00	; 0
    2b6e:	0e 94 a4 21 	call	0x4348	; 0x4348 <PlatformAssert>
	memcpy((void *) &sTime, (void *) psTime, sizeof(sTime));
    2b72:	a8 01       	movw	r20, r16
    2b74:	60 e8       	ldi	r22, 0x80	; 128
    2b76:	29 e1       	ldi	r18, 0x19	; 25
    2b78:	30 e0       	ldi	r19, 0x00	; 0
    2b7a:	ce 01       	movw	r24, r28
    2b7c:	01 96       	adiw	r24, 0x01	; 1
    2b7e:	0e 94 30 21 	call	0x4260	; 0x4260 <memcpy>
	
	// Now convert to hardware
	StructTMToHW(&sTime,
    2b82:	be 01       	movw	r22, r28
    2b84:	66 5e       	subi	r22, 0xE6	; 230
    2b86:	7f 4f       	sbci	r23, 0xFF	; 255
    2b88:	ce 01       	movw	r24, r28
    2b8a:	01 96       	adiw	r24, 0x01	; 1
    2b8c:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <StructTMToHW>
				 &sTimeHW);
	
	// Set the time			 
	cli();
    2b90:	f8 94       	cli
	sg_u64Time = u64Timet;
    2b92:	79 a1       	ldd	r23, Y+33	; 0x21
    2b94:	6a a1       	ldd	r22, Y+34	; 0x22
    2b96:	5b a1       	ldd	r21, Y+35	; 0x23
    2b98:	4c a1       	ldd	r20, Y+36	; 0x24
    2b9a:	3d a1       	ldd	r19, Y+37	; 0x25
    2b9c:	2e a1       	ldd	r18, Y+38	; 0x26
    2b9e:	9f a1       	ldd	r25, Y+39	; 0x27
    2ba0:	88 a5       	ldd	r24, Y+40	; 0x28
    2ba2:	70 93 41 07 	sts	0x0741, r23	; 0x800741 <sg_u64Time>
    2ba6:	60 93 42 07 	sts	0x0742, r22	; 0x800742 <sg_u64Time+0x1>
    2baa:	50 93 43 07 	sts	0x0743, r21	; 0x800743 <sg_u64Time+0x2>
    2bae:	40 93 44 07 	sts	0x0744, r20	; 0x800744 <sg_u64Time+0x3>
    2bb2:	30 93 45 07 	sts	0x0745, r19	; 0x800745 <sg_u64Time+0x4>
    2bb6:	20 93 46 07 	sts	0x0746, r18	; 0x800746 <sg_u64Time+0x5>
    2bba:	90 93 47 07 	sts	0x0747, r25	; 0x800747 <sg_u64Time+0x6>
    2bbe:	80 93 48 07 	sts	0x0748, r24	; 0x800748 <sg_u64Time+0x7>
	sei();
    2bc2:	78 94       	sei
	
	// Now go tell the hardware about it
	return(RTCWriteHW(&sTimeHW));
    2bc4:	ce 01       	movw	r24, r28
    2bc6:	4a 96       	adiw	r24, 0x1a	; 26
    2bc8:	0e 94 07 12 	call	0x240e	; 0x240e <RTCWriteHW>
}
    2bcc:	a8 96       	adiw	r28, 0x28	; 40
    2bce:	0f b6       	in	r0, 0x3f	; 63
    2bd0:	f8 94       	cli
    2bd2:	de bf       	out	0x3e, r29	; 62
    2bd4:	0f be       	out	0x3f, r0	; 63
    2bd6:	cd bf       	out	0x3d, r28	; 61
    2bd8:	df 91       	pop	r29
    2bda:	cf 91       	pop	r28
    2bdc:	1f 91       	pop	r17
    2bde:	0f 91       	pop	r16
    2be0:	08 95       	ret

Disassembly of section .text.RTCInit:

000011d8 <RTCInit>:
	sei();
	
	psSrc = gmtime((const time_t *) &u64Time);
	memcpy((void *) psTime, (void *) psSrc, sizeof(*psTime));
	return(true);
}
    11d8:	ff 92       	push	r15
    11da:	0f 93       	push	r16
    11dc:	1f 93       	push	r17
    11de:	cf 93       	push	r28
    11e0:	df 93       	push	r29
    11e2:	cd b7       	in	r28, 0x3d	; 61
    11e4:	de b7       	in	r29, 0x3e	; 62
    11e6:	a1 97       	sbiw	r28, 0x21	; 33
    11e8:	0f b6       	in	r0, 0x3f	; 63
    11ea:	f8 94       	cli
    11ec:	de bf       	out	0x3e, r29	; 62
    11ee:	0f be       	out	0x3f, r0	; 63
    11f0:	cd bf       	out	0x3d, r28	; 61
    11f2:	19 82       	std	Y+1, r1	; 0x01
    11f4:	41 e0       	ldi	r20, 0x01	; 1
    11f6:	be 01       	movw	r22, r28
    11f8:	6f 5f       	subi	r22, 0xFF	; 255
    11fa:	7f 4f       	sbci	r23, 0xFF	; 255
    11fc:	87 e0       	ldi	r24, 0x07	; 7
    11fe:	0e 94 08 1d 	call	0x3a10	; 0x3a10 <RTCWriteRegisters>
    1202:	18 2f       	mov	r17, r24
    1204:	88 23       	and	r24, r24
    1206:	09 f4       	brne	.+2      	; 0x120a <RTCInit+0x32>
    1208:	eb c0       	rjmp	.+470    	; 0x13e0 <RTCInit+0x208>
    120a:	80 e8       	ldi	r24, 0x80	; 128
    120c:	89 83       	std	Y+1, r24	; 0x01
    120e:	41 e0       	ldi	r20, 0x01	; 1
    1210:	be 01       	movw	r22, r28
    1212:	6f 5f       	subi	r22, 0xFF	; 255
    1214:	7f 4f       	sbci	r23, 0xFF	; 255
    1216:	80 e0       	ldi	r24, 0x00	; 0
    1218:	0e 94 08 1d 	call	0x3a10	; 0x3a10 <RTCWriteRegisters>
    121c:	18 2f       	mov	r17, r24
    121e:	81 11       	cpse	r24, r1
    1220:	17 c0       	rjmp	.+46     	; 0x1250 <RTCInit+0x78>
    1222:	de c0       	rjmp	.+444    	; 0x13e0 <RTCInit+0x208>
    1224:	19 82       	std	Y+1, r1	; 0x01
    1226:	41 e0       	ldi	r20, 0x01	; 1
    1228:	be 01       	movw	r22, r28
    122a:	6f 5f       	subi	r22, 0xFF	; 255
    122c:	7f 4f       	sbci	r23, 0xFF	; 255
    122e:	83 e0       	ldi	r24, 0x03	; 3
    1230:	0e 94 2b 1b 	call	0x3656	; 0x3656 <RTCReadRegisters>
    1234:	18 2f       	mov	r17, r24
    1236:	88 23       	and	r24, r24
    1238:	09 f4       	brne	.+2      	; 0x123c <RTCInit+0x64>
    123a:	d2 c0       	rjmp	.+420    	; 0x13e0 <RTCInit+0x208>
    123c:	89 81       	ldd	r24, Y+1	; 0x01
    123e:	85 fd       	sbrc	r24, 5
    1240:	0a c0       	rjmp	.+20     	; 0x1256 <RTCInit+0x7e>
    1242:	60 e0       	ldi	r22, 0x00	; 0
    1244:	70 e0       	ldi	r23, 0x00	; 0
    1246:	cb 01       	movw	r24, r22
    1248:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <Delay>
    124c:	0f 5f       	subi	r16, 0xFF	; 255
    124e:	01 c0       	rjmp	.+2      	; 0x1252 <RTCInit+0x7a>
    1250:	00 e0       	ldi	r16, 0x00	; 0
    1252:	08 3c       	cpi	r16, 0xC8	; 200
    1254:	38 f3       	brcs	.-50     	; 0x1224 <RTCInit+0x4c>
    1256:	08 3c       	cpi	r16, 0xC8	; 200
    1258:	08 f0       	brcs	.+2      	; 0x125c <RTCInit+0x84>
    125a:	c2 c0       	rjmp	.+388    	; 0x13e0 <RTCInit+0x208>
    125c:	89 81       	ldd	r24, Y+1	; 0x01
    125e:	88 60       	ori	r24, 0x08	; 8
    1260:	89 83       	std	Y+1, r24	; 0x01
    1262:	41 e0       	ldi	r20, 0x01	; 1
    1264:	be 01       	movw	r22, r28
    1266:	6f 5f       	subi	r22, 0xFF	; 255
    1268:	7f 4f       	sbci	r23, 0xFF	; 255
    126a:	83 e0       	ldi	r24, 0x03	; 3
    126c:	0e 94 08 1d 	call	0x3a10	; 0x3a10 <RTCWriteRegisters>
    1270:	18 2f       	mov	r17, r24
    1272:	88 23       	and	r24, r24
    1274:	09 f4       	brne	.+2      	; 0x1278 <RTCInit+0xa0>
    1276:	b4 c0       	rjmp	.+360    	; 0x13e0 <RTCInit+0x208>
    1278:	41 e0       	ldi	r20, 0x01	; 1
    127a:	be 01       	movw	r22, r28
    127c:	6f 5f       	subi	r22, 0xFF	; 255
    127e:	7f 4f       	sbci	r23, 0xFF	; 255
    1280:	82 e0       	ldi	r24, 0x02	; 2
    1282:	0e 94 2b 1b 	call	0x3656	; 0x3656 <RTCReadRegisters>
    1286:	18 2f       	mov	r17, r24
    1288:	88 23       	and	r24, r24
    128a:	09 f4       	brne	.+2      	; 0x128e <RTCInit+0xb6>
    128c:	a9 c0       	rjmp	.+338    	; 0x13e0 <RTCInit+0x208>
    128e:	89 81       	ldd	r24, Y+1	; 0x01
    1290:	8f 7b       	andi	r24, 0xBF	; 191
    1292:	89 83       	std	Y+1, r24	; 0x01
    1294:	41 e0       	ldi	r20, 0x01	; 1
    1296:	be 01       	movw	r22, r28
    1298:	6f 5f       	subi	r22, 0xFF	; 255
    129a:	7f 4f       	sbci	r23, 0xFF	; 255
    129c:	82 e0       	ldi	r24, 0x02	; 2
    129e:	0e 94 08 1d 	call	0x3a10	; 0x3a10 <RTCWriteRegisters>
    12a2:	18 2f       	mov	r17, r24
    12a4:	88 23       	and	r24, r24
    12a6:	09 f4       	brne	.+2      	; 0x12aa <RTCInit+0xd2>
    12a8:	9b c0       	rjmp	.+310    	; 0x13e0 <RTCInit+0x208>
    12aa:	ce 01       	movw	r24, r28
    12ac:	02 96       	adiw	r24, 0x02	; 2
    12ae:	0e 94 01 13 	call	0x2602	; 0x2602 <RTCReadHW>
    12b2:	18 2f       	mov	r17, r24
    12b4:	88 23       	and	r24, r24
    12b6:	09 f4       	brne	.+2      	; 0x12ba <RTCInit+0xe2>
    12b8:	93 c0       	rjmp	.+294    	; 0x13e0 <RTCInit+0x208>
    12ba:	8a 81       	ldd	r24, Y+2	; 0x02
    12bc:	8c 33       	cpi	r24, 0x3C	; 60
    12be:	10 f4       	brcc	.+4      	; 0x12c4 <RTCInit+0xec>
    12c0:	10 e0       	ldi	r17, 0x00	; 0
    12c2:	01 c0       	rjmp	.+2      	; 0x12c6 <RTCInit+0xee>
    12c4:	11 e0       	ldi	r17, 0x01	; 1
    12c6:	8b 81       	ldd	r24, Y+3	; 0x03
    12c8:	8c 33       	cpi	r24, 0x3C	; 60
    12ca:	08 f0       	brcs	.+2      	; 0x12ce <RTCInit+0xf6>
    12cc:	11 e0       	ldi	r17, 0x01	; 1
    12ce:	8c 81       	ldd	r24, Y+4	; 0x04
    12d0:	8c 33       	cpi	r24, 0x3C	; 60
    12d2:	08 f0       	brcs	.+2      	; 0x12d6 <RTCInit+0xfe>
    12d4:	11 e0       	ldi	r17, 0x01	; 1
    12d6:	8d 81       	ldd	r24, Y+5	; 0x05
    12d8:	81 50       	subi	r24, 0x01	; 1
    12da:	87 30       	cpi	r24, 0x07	; 7
    12dc:	08 f0       	brcs	.+2      	; 0x12e0 <RTCInit+0x108>
    12de:	11 e0       	ldi	r17, 0x01	; 1
    12e0:	2f 81       	ldd	r18, Y+7	; 0x07
    12e2:	8f ef       	ldi	r24, 0xFF	; 255
    12e4:	82 0f       	add	r24, r18
    12e6:	8c 30       	cpi	r24, 0x0C	; 12
    12e8:	18 f5       	brcc	.+70     	; 0x1330 <RTCInit+0x158>
    12ea:	0e 81       	ldd	r16, Y+6	; 0x06
    12ec:	00 23       	and	r16, r16
    12ee:	11 f1       	breq	.+68     	; 0x1334 <RTCInit+0x15c>
    12f0:	82 2f       	mov	r24, r18
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	01 97       	sbiw	r24, 0x01	; 1
    12f6:	09 2e       	mov	r0, r25
    12f8:	00 0c       	add	r0, r0
    12fa:	aa 0b       	sbc	r26, r26
    12fc:	83 56       	subi	r24, 0x63	; 99
    12fe:	9e 4f       	sbci	r25, 0xFE	; 254
    1300:	af 4f       	sbci	r26, 0xFF	; 255
    1302:	fc 01       	movw	r30, r24
    1304:	f4 90       	lpm	r15, Z
    1306:	a7 fd       	sbrc	r26, 7
    1308:	f0 80       	ld	r15, Z
    130a:	22 30       	cpi	r18, 0x02	; 2
    130c:	71 f4       	brne	.+28     	; 0x132a <RTCInit+0x152>
    130e:	88 85       	ldd	r24, Y+8	; 0x08
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	84 31       	cpi	r24, 0x14	; 20
    1314:	91 05       	cpc	r25, r1
    1316:	18 f4       	brcc	.+6      	; 0x131e <RTCInit+0x146>
    1318:	8c 5c       	subi	r24, 0xCC	; 204
    131a:	97 4f       	sbci	r25, 0xF7	; 247
    131c:	02 c0       	rjmp	.+4      	; 0x1322 <RTCInit+0x14a>
    131e:	80 53       	subi	r24, 0x30	; 48
    1320:	98 4f       	sbci	r25, 0xF8	; 248
    1322:	0e 94 b0 20 	call	0x4160	; 0x4160 <IsLeapYear>
    1326:	81 11       	cpse	r24, r1
    1328:	f3 94       	inc	r15
    132a:	f0 16       	cp	r15, r16
    132c:	28 f0       	brcs	.+10     	; 0x1338 <RTCInit+0x160>
    132e:	05 c0       	rjmp	.+10     	; 0x133a <RTCInit+0x162>
    1330:	11 e0       	ldi	r17, 0x01	; 1
    1332:	03 c0       	rjmp	.+6      	; 0x133a <RTCInit+0x162>
    1334:	11 e0       	ldi	r17, 0x01	; 1
    1336:	01 c0       	rjmp	.+2      	; 0x133a <RTCInit+0x162>
    1338:	11 e0       	ldi	r17, 0x01	; 1
    133a:	11 23       	and	r17, r17
    133c:	b9 f0       	breq	.+46     	; 0x136c <RTCInit+0x194>
    133e:	1a 82       	std	Y+2, r1	; 0x02
    1340:	1b 82       	std	Y+3, r1	; 0x03
    1342:	1c 82       	std	Y+4, r1	; 0x04
    1344:	81 e0       	ldi	r24, 0x01	; 1
    1346:	8e 83       	std	Y+6, r24	; 0x06
    1348:	8f 83       	std	Y+7, r24	; 0x07
    134a:	88 e1       	ldi	r24, 0x18	; 24
    134c:	88 87       	std	Y+8, r24	; 0x08
    134e:	ce 01       	movw	r24, r28
    1350:	02 96       	adiw	r24, 0x02	; 2
    1352:	0e 94 07 12 	call	0x240e	; 0x240e <RTCWriteHW>
    1356:	18 2f       	mov	r17, r24
    1358:	88 23       	and	r24, r24
    135a:	09 f4       	brne	.+2      	; 0x135e <RTCInit+0x186>
    135c:	41 c0       	rjmp	.+130    	; 0x13e0 <RTCInit+0x208>
    135e:	ce 01       	movw	r24, r28
    1360:	02 96       	adiw	r24, 0x02	; 2
    1362:	0e 94 01 13 	call	0x2602	; 0x2602 <RTCReadHW>
    1366:	18 2f       	mov	r17, r24
    1368:	88 23       	and	r24, r24
    136a:	d1 f1       	breq	.+116    	; 0x13e0 <RTCInit+0x208>
    136c:	be 01       	movw	r22, r28
    136e:	67 5f       	subi	r22, 0xF7	; 247
    1370:	7f 4f       	sbci	r23, 0xFF	; 255
    1372:	ce 01       	movw	r24, r28
    1374:	02 96       	adiw	r24, 0x02	; 2
    1376:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <HWToStructTM>
    137a:	ce 01       	movw	r24, r28
    137c:	09 96       	adiw	r24, 0x09	; 9
    137e:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <mktime>
    1382:	8b 01       	movw	r16, r22
    1384:	9c 01       	movw	r18, r24
    1386:	f8 94       	cli
    1388:	00 93 41 07 	sts	0x0741, r16	; 0x800741 <sg_u64Time>
    138c:	10 93 42 07 	sts	0x0742, r17	; 0x800742 <sg_u64Time+0x1>
    1390:	20 93 43 07 	sts	0x0743, r18	; 0x800743 <sg_u64Time+0x2>
    1394:	30 93 44 07 	sts	0x0744, r19	; 0x800744 <sg_u64Time+0x3>
    1398:	10 92 45 07 	sts	0x0745, r1	; 0x800745 <sg_u64Time+0x4>
    139c:	10 92 46 07 	sts	0x0746, r1	; 0x800746 <sg_u64Time+0x5>
    13a0:	10 92 47 07 	sts	0x0747, r1	; 0x800747 <sg_u64Time+0x6>
    13a4:	10 92 48 07 	sts	0x0748, r1	; 0x800748 <sg_u64Time+0x7>
    13a8:	78 94       	sei
    13aa:	87 b1       	in	r24, 0x07	; 7
    13ac:	8e 7f       	andi	r24, 0xFE	; 254
    13ae:	87 b9       	out	0x07, r24	; 7
    13b0:	88 b1       	in	r24, 0x08	; 8
    13b2:	81 60       	ori	r24, 0x01	; 1
    13b4:	88 b9       	out	0x08, r24	; 8
    13b6:	41 e0       	ldi	r20, 0x01	; 1
    13b8:	be 01       	movw	r22, r28
    13ba:	6f 5f       	subi	r22, 0xFF	; 255
    13bc:	7f 4f       	sbci	r23, 0xFF	; 255
    13be:	87 e0       	ldi	r24, 0x07	; 7
    13c0:	0e 94 2b 1b 	call	0x3656	; 0x3656 <RTCReadRegisters>
    13c4:	18 2f       	mov	r17, r24
    13c6:	88 23       	and	r24, r24
    13c8:	59 f0       	breq	.+22     	; 0x13e0 <RTCInit+0x208>
    13ca:	89 81       	ldd	r24, Y+1	; 0x01
    13cc:	80 64       	ori	r24, 0x40	; 64
    13ce:	89 83       	std	Y+1, r24	; 0x01
    13d0:	41 e0       	ldi	r20, 0x01	; 1
    13d2:	be 01       	movw	r22, r28
    13d4:	6f 5f       	subi	r22, 0xFF	; 255
    13d6:	7f 4f       	sbci	r23, 0xFF	; 255
    13d8:	87 e0       	ldi	r24, 0x07	; 7
    13da:	0e 94 08 1d 	call	0x3a10	; 0x3a10 <RTCWriteRegisters>
    13de:	18 2f       	mov	r17, r24
    13e0:	81 2f       	mov	r24, r17
    13e2:	a1 96       	adiw	r28, 0x21	; 33
    13e4:	0f b6       	in	r0, 0x3f	; 63
    13e6:	f8 94       	cli
    13e8:	de bf       	out	0x3e, r29	; 62
    13ea:	0f be       	out	0x3f, r0	; 63
    13ec:	cd bf       	out	0x3d, r28	; 61
    13ee:	df 91       	pop	r29
    13f0:	cf 91       	pop	r28
    13f2:	1f 91       	pop	r17
    13f4:	0f 91       	pop	r16
    13f6:	ff 90       	pop	r15
    13f8:	08 95       	ret

Disassembly of section .text.SDSetCS:

00004944 <SDSetCS>:
static uint8_t sg_u8CSD[16];

// This will provide a !CS assertion or deassertion with pre/postamble clock
static void SDSetCS(bool bAsserted)
{
	if (bAsserted)
    4944:	88 23       	and	r24, r24
    4946:	21 f0       	breq	.+8      	; 0x4950 <SDSetCS+0xc>
	{
		SD_CS_ASSERT();
    4948:	88 b1       	in	r24, 0x08	; 8
    494a:	8f 7b       	andi	r24, 0xBF	; 191
    494c:	88 b9       	out	0x08, r24	; 8
    494e:	08 95       	ret
	}
	else
	{
		SD_CS_DEASSERT();
    4950:	88 b1       	in	r24, 0x08	; 8
    4952:	80 64       	ori	r24, 0x40	; 64
    4954:	88 b9       	out	0x08, r24	; 8
    4956:	08 95       	ret

Disassembly of section .text.SDPowerup:

00004080 <SDPowerup>:

// Sends SD powerup sequence to card and attempts to initialize it
static void SDPowerup(void)
{
	// Set SPI baud rate to (SD_SPEED_SLOW, which is the max for the init sequence)
	(void) SPISetBaudRate(SD_SPEED_SLOW);
    4080:	60 e8       	ldi	r22, 0x80	; 128
    4082:	7a e1       	ldi	r23, 0x1A	; 26
    4084:	86 e0       	ldi	r24, 0x06	; 6
    4086:	90 e0       	ldi	r25, 0x00	; 0
    4088:	0e 94 29 15 	call	0x2a52	; 0x2a52 <SPISetBaudRate>
	
	// Deassert chip select
	SD_CS_DEASSERT();
    408c:	88 b1       	in	r24, 0x08	; 8
    408e:	80 64       	ori	r24, 0x40	; 64
    4090:	88 b9       	out	0x08, r24	; 8
	
	// Delay time after possible deassertion (2ms)
	Delay(2000);
    4092:	60 ed       	ldi	r22, 0xD0	; 208
    4094:	77 e0       	ldi	r23, 0x07	; 7
    4096:	80 e0       	ldi	r24, 0x00	; 0
    4098:	90 e0       	ldi	r25, 0x00	; 0
    409a:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <Delay>
	
	// Send 74/80 bits of 0xff as a reset (80 bits required since we're byte-
	// sized transactions)
	SPIWritePattern(0xff,
    409e:	40 e1       	ldi	r20, 0x10	; 16
    40a0:	50 e0       	ldi	r21, 0x00	; 0
    40a2:	6f ef       	ldi	r22, 0xFF	; 255
    40a4:	70 e0       	ldi	r23, 0x00	; 0
    40a6:	82 e0       	ldi	r24, 0x02	; 2
    40a8:	0e 94 03 1e 	call	0x3c06	; 0x3c06 <SPITransaction>
				    128/8);

	// Delay time after write
	Delay(2000);
    40ac:	60 ed       	ldi	r22, 0xD0	; 208
    40ae:	77 e0       	ldi	r23, 0x07	; 7
    40b0:	80 e0       	ldi	r24, 0x00	; 0
    40b2:	90 e0       	ldi	r25, 0x00	; 0
    40b4:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <Delay>
    40b8:	08 95       	ret

Disassembly of section .text.SDCommand:

00002f92 <SDCommand>:
#define CMD8_CRC    0x87

// Sends a command to the SD card, including argument an CRC
static uint8_t SDCommand(uint8_t u8Cmd,
						 uint32_t u32Arg)
{
    2f92:	df 92       	push	r13
    2f94:	ef 92       	push	r14
    2f96:	ff 92       	push	r15
    2f98:	0f 93       	push	r16
    2f9a:	1f 93       	push	r17
    2f9c:	cf 93       	push	r28
    2f9e:	df 93       	push	r29
    2fa0:	cd b7       	in	r28, 0x3d	; 61
    2fa2:	de b7       	in	r29, 0x3e	; 62
    2fa4:	27 97       	sbiw	r28, 0x07	; 7
    2fa6:	0f b6       	in	r0, 0x3f	; 63
    2fa8:	f8 94       	cli
    2faa:	de bf       	out	0x3e, r29	; 62
    2fac:	0f be       	out	0x3f, r0	; 63
    2fae:	cd bf       	out	0x3d, r28	; 61
    2fb0:	18 2f       	mov	r17, r24
    2fb2:	04 2f       	mov	r16, r20
    2fb4:	f5 2e       	mov	r15, r21
    2fb6:	e6 2e       	mov	r14, r22
    2fb8:	d7 2e       	mov	r13, r23
	uint8_t u8Buffer[sizeof(u8Cmd) + sizeof(u32Arg) + sizeof(u8CRC)];
	uint8_t u8Response;
	uint8_t u8Count;
	
	// If this is an ACMD, prefix a CMD55
	if (u8Cmd & 0x80)
    2fba:	88 23       	and	r24, r24
    2fbc:	4c f4       	brge	.+18     	; 0x2fd0 <SDCommand+0x3e>
	{
		u8Response = SDCommand(CMD55,
    2fbe:	40 e0       	ldi	r20, 0x00	; 0
    2fc0:	50 e0       	ldi	r21, 0x00	; 0
    2fc2:	ba 01       	movw	r22, r20
    2fc4:	87 e3       	ldi	r24, 0x37	; 55
    2fc6:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <SDCommand>
    2fca:	8f 83       	std	Y+7, r24	; 0x07
							   CMD55_ARG);
							   
		if (u8Response > 1)
    2fcc:	82 30       	cpi	r24, 0x02	; 2
    2fce:	40 f5       	brcc	.+80     	; 0x3020 <SDCommand+0x8e>
			return(u8Response);
		}
	}
	
	// SD Command (OR in 0x40 so bit 47 is always a 1
	u8Buffer[0] = (u8Cmd & 0x7f) | 0x40;
    2fd0:	81 2f       	mov	r24, r17
    2fd2:	8f 73       	andi	r24, 0x3F	; 63
    2fd4:	80 64       	ori	r24, 0x40	; 64
    2fd6:	89 83       	std	Y+1, r24	; 0x01
	
	// 32 Bits of argument
	u8Buffer[1] = (uint8_t) (u32Arg >> 24);
    2fd8:	da 82       	std	Y+2, r13	; 0x02
	u8Buffer[2] = (uint8_t) (u32Arg >> 16);
    2fda:	eb 82       	std	Y+3, r14	; 0x03
	u8Buffer[3] = (uint8_t) (u32Arg >> 8);
    2fdc:	fc 82       	std	Y+4, r15	; 0x04
	u8Buffer[4] = (uint8_t) (u32Arg >> 0);
    2fde:	0d 83       	std	Y+5, r16	; 0x05
	
	// Valid CRCs for specific commands
	u8CRC = 0;
	if (CMD0 == u8Cmd)
    2fe0:	11 23       	and	r17, r17
    2fe2:	11 f0       	breq	.+4      	; 0x2fe8 <SDCommand+0x56>
	u8Buffer[2] = (uint8_t) (u32Arg >> 16);
	u8Buffer[3] = (uint8_t) (u32Arg >> 8);
	u8Buffer[4] = (uint8_t) (u32Arg >> 0);
	
	// Valid CRCs for specific commands
	u8CRC = 0;
    2fe4:	80 e0       	ldi	r24, 0x00	; 0
    2fe6:	01 c0       	rjmp	.+2      	; 0x2fea <SDCommand+0x58>
	if (CMD0 == u8Cmd)
	{
		u8CRC = 0x95;
    2fe8:	85 e9       	ldi	r24, 0x95	; 149
	}
	
	if (CMD8 == u8Cmd)
    2fea:	18 30       	cpi	r17, 0x08	; 8
    2fec:	09 f4       	brne	.+2      	; 0x2ff0 <SDCommand+0x5e>
	{
		u8CRC = 0x87;
    2fee:	87 e8       	ldi	r24, 0x87	; 135
	}
	
	// Now the CRC - Bit 0 means "ignore CRC"
	u8Buffer[5] = (uint8_t) (u8CRC | 0x01);
    2ff0:	81 60       	ori	r24, 0x01	; 1
    2ff2:	8e 83       	std	Y+6, r24	; 0x06
	
	// Send all bytes to the SD card
	SPIWrite(u8Buffer,
    2ff4:	46 e0       	ldi	r20, 0x06	; 6
    2ff6:	50 e0       	ldi	r21, 0x00	; 0
    2ff8:	be 01       	movw	r22, r28
    2ffa:	6f 5f       	subi	r22, 0xFF	; 255
    2ffc:	7f 4f       	sbci	r23, 0xFF	; 255
    2ffe:	81 e0       	ldi	r24, 0x01	; 1
    3000:	0e 94 03 1e 	call	0x3c06	; 0x3c06 <SPITransaction>
			 sizeof(u8Buffer));
			 
	u8Count = 10;
    3004:	1a e0       	ldi	r17, 0x0A	; 10
	
	do 
	{
		SPIRead(&u8Response,
    3006:	41 e0       	ldi	r20, 0x01	; 1
    3008:	50 e0       	ldi	r21, 0x00	; 0
    300a:	be 01       	movw	r22, r28
    300c:	69 5f       	subi	r22, 0xF9	; 249
    300e:	7f 4f       	sbci	r23, 0xFF	; 255
    3010:	83 e0       	ldi	r24, 0x03	; 3
    3012:	0e 94 03 1e 	call	0x3c06	; 0x3c06 <SPITransaction>
				sizeof(u8Response));
	} while ((u8Response & 0x80) && --u8Count);
    3016:	8f 81       	ldd	r24, Y+7	; 0x07
    3018:	88 23       	and	r24, r24
    301a:	14 f4       	brge	.+4      	; 0x3020 <SDCommand+0x8e>
    301c:	11 50       	subi	r17, 0x01	; 1
    301e:	99 f7       	brne	.-26     	; 0x3006 <SDCommand+0x74>
	
	return(u8Response);
}
    3020:	27 96       	adiw	r28, 0x07	; 7
    3022:	0f b6       	in	r0, 0x3f	; 63
    3024:	f8 94       	cli
    3026:	de bf       	out	0x3e, r29	; 62
    3028:	0f be       	out	0x3f, r0	; 63
    302a:	cd bf       	out	0x3d, r28	; 61
    302c:	df 91       	pop	r29
    302e:	cf 91       	pop	r28
    3030:	1f 91       	pop	r17
    3032:	0f 91       	pop	r16
    3034:	ff 90       	pop	r15
    3036:	ef 90       	pop	r14
    3038:	df 90       	pop	r13
    303a:	08 95       	ret

Disassembly of section .text.SDGoIdle:

000047da <SDGoIdle>:
			sizeof(uint32_t));
}

// SD - Go idle!
static uint8_t SDGoIdle(uint8_t *pu8Response)
{
    47da:	cf 93       	push	r28
	uint8_t u8Response;
	
	SDSetCS(true);
    47dc:	81 e0       	ldi	r24, 0x01	; 1
    47de:	0e 94 a2 24 	call	0x4944	; 0x4944 <SDSetCS>
	
	// Send our CMD0 (go idle)
	u8Response = SDCommand(CMD0,
    47e2:	40 e0       	ldi	r20, 0x00	; 0
    47e4:	50 e0       	ldi	r21, 0x00	; 0
    47e6:	ba 01       	movw	r22, r20
    47e8:	80 e0       	ldi	r24, 0x00	; 0
    47ea:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <SDCommand>
    47ee:	c8 2f       	mov	r28, r24
						   CMD0_ARG);
						   
	SDSetCS(false);
    47f0:	80 e0       	ldi	r24, 0x00	; 0
    47f2:	0e 94 a2 24 	call	0x4944	; 0x4944 <SDSetCS>

	return(u8Response);
}
    47f6:	8c 2f       	mov	r24, r28
    47f8:	cf 91       	pop	r28
    47fa:	08 95       	ret

Disassembly of section .text.SDSendOpCondition:

00004194 <SDSendOpCondition>:
#define ACMD41_CRC  0x00

// Send operation condition
static uint8_t SDSendOpCondition(uint8_t *pu8Response,
								 uint32_t u32Arg)
{
    4194:	cf 92       	push	r12
    4196:	df 92       	push	r13
    4198:	ef 92       	push	r14
    419a:	ff 92       	push	r15
    419c:	cf 93       	push	r28
    419e:	6a 01       	movw	r12, r20
    41a0:	7b 01       	movw	r14, r22
	uint8_t u8Response;
	
	// Assert chip select
	SDSetCS(true);
    41a2:	81 e0       	ldi	r24, 0x01	; 1
    41a4:	0e 94 a2 24 	call	0x4944	; 0x4944 <SDSetCS>
	
	// Send the app command
	u8Response = SDCommand(ACMD41,
    41a8:	b7 01       	movw	r22, r14
    41aa:	a6 01       	movw	r20, r12
    41ac:	89 ea       	ldi	r24, 0xA9	; 169
    41ae:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <SDCommand>
    41b2:	c8 2f       	mov	r28, r24
						   u32Arg);
	// Deassert chip select
	SDSetCS(false);
    41b4:	80 e0       	ldi	r24, 0x00	; 0
    41b6:	0e 94 a2 24 	call	0x4944	; 0x4944 <SDSetCS>
	
	return(u8Response);
}
    41ba:	8c 2f       	mov	r24, r28
    41bc:	cf 91       	pop	r28
    41be:	ff 90       	pop	r15
    41c0:	ef 90       	pop	r14
    41c2:	df 90       	pop	r13
    41c4:	cf 90       	pop	r12
    41c6:	08 95       	ret

Disassembly of section .text.SDSendOpConditionArg:

00003c5e <SDSendOpConditionArg>:
	return(u8Response);
}

static uint8_t SDSendOpConditionArg(uint8_t *pu8Resp,
									uint32_t u32Arg)
{
    3c5e:	cf 92       	push	r12
    3c60:	df 92       	push	r13
    3c62:	ef 92       	push	r14
    3c64:	ff 92       	push	r15
    3c66:	0f 93       	push	r16
    3c68:	1f 93       	push	r17
    3c6a:	cf 93       	push	r28
    3c6c:	df 93       	push	r29
    3c6e:	8c 01       	movw	r16, r24
    3c70:	6a 01       	movw	r12, r20
    3c72:	7b 01       	movw	r14, r22
	uint8_t u8Attempts;
	uint8_t u8Response;
	
	u8Attempts = 0;
    3c74:	c0 e0       	ldi	r28, 0x00	; 0
		
	// Loop until it comes alive - if it comes alive. Put the card in idle state.
	while (u8Attempts < SD_GO_IDLE_RETRIES)
    3c76:	0f c0       	rjmp	.+30     	; 0x3c96 <SDSendOpConditionArg+0x38>
	{
		u8Response = SDSendOpCondition(pu8Resp,
    3c78:	b7 01       	movw	r22, r14
    3c7a:	a6 01       	movw	r20, r12
    3c7c:	c8 01       	movw	r24, r16
    3c7e:	0e 94 ca 20 	call	0x4194	; 0x4194 <SDSendOpCondition>
    3c82:	d8 2f       	mov	r29, r24
									   u32Arg);
		if (0 == u8Response)
    3c84:	88 23       	and	r24, r24
    3c86:	49 f0       	breq	.+18     	; 0x3c9a <SDSendOpConditionArg+0x3c>
		{
			break;
		}
			
		// Give it a little time to settle
		Delay(10000);
    3c88:	60 e1       	ldi	r22, 0x10	; 16
    3c8a:	77 e2       	ldi	r23, 0x27	; 39
    3c8c:	80 e0       	ldi	r24, 0x00	; 0
    3c8e:	90 e0       	ldi	r25, 0x00	; 0
    3c90:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <Delay>
		u8Attempts++;
    3c94:	cf 5f       	subi	r28, 0xFF	; 255
	uint8_t u8Response;
	
	u8Attempts = 0;
		
	// Loop until it comes alive - if it comes alive. Put the card in idle state.
	while (u8Attempts < SD_GO_IDLE_RETRIES)
    3c96:	c4 36       	cpi	r28, 0x64	; 100
    3c98:	78 f3       	brcs	.-34     	; 0x3c78 <SDSendOpConditionArg+0x1a>
		Delay(10000);
		u8Attempts++;
	}

	// If we've retried too much, bail out. We're done.
	if (SD_GO_IDLE_RETRIES == u8Attempts)
    3c9a:	c4 36       	cpi	r28, 0x64	; 100
    3c9c:	09 f4       	brne	.+2      	; 0x3ca0 <SDSendOpConditionArg+0x42>
	{
		u8Response = 0x80;
    3c9e:	d0 e8       	ldi	r29, 0x80	; 128
	}
	
	return(u8Response);
}
    3ca0:	8d 2f       	mov	r24, r29
    3ca2:	df 91       	pop	r29
    3ca4:	cf 91       	pop	r28
    3ca6:	1f 91       	pop	r17
    3ca8:	0f 91       	pop	r16
    3caa:	ff 90       	pop	r15
    3cac:	ef 90       	pop	r14
    3cae:	df 90       	pop	r13
    3cb0:	cf 90       	pop	r12
    3cb2:	08 95       	ret

Disassembly of section .text.SDWaitResponse7:

00004a12 <SDWaitResponse7>:

// This will return true if a response 7 was received, otherwise false
static void SDWaitResponse7(uint8_t *pu8ResponseByte)
{
	// Go read the remaining 4 bytes
	SPIRead(pu8ResponseByte,
    4a12:	44 e0       	ldi	r20, 0x04	; 4
    4a14:	50 e0       	ldi	r21, 0x00	; 0
    4a16:	bc 01       	movw	r22, r24
    4a18:	83 e0       	ldi	r24, 0x03	; 3
    4a1a:	0e 94 03 1e 	call	0x3c06	; 0x3c06 <SPITransaction>
    4a1e:	08 95       	ret

Disassembly of section .text.SDSendInterfaceCondition:

000041c8 <SDSendInterfaceCondition>:
	return(u8Response);
}

// Send interface condition
static uint8_t SDSendInterfaceCondition(uint8_t *pu8Response)
{
    41c8:	0f 93       	push	r16
    41ca:	1f 93       	push	r17
    41cc:	cf 93       	push	r28
    41ce:	8c 01       	movw	r16, r24
	uint8_t u8Response;
	
	SDSetCS(true);
    41d0:	81 e0       	ldi	r24, 0x01	; 1
    41d2:	0e 94 a2 24 	call	0x4944	; 0x4944 <SDSetCS>
	
	// Send our CMD8 Send interface condition
	u8Response = SDCommand(CMD8,
    41d6:	4a ea       	ldi	r20, 0xAA	; 170
    41d8:	51 e0       	ldi	r21, 0x01	; 1
    41da:	60 e0       	ldi	r22, 0x00	; 0
    41dc:	70 e0       	ldi	r23, 0x00	; 0
    41de:	88 e0       	ldi	r24, 0x08	; 8
    41e0:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <SDCommand>
    41e4:	c8 2f       	mov	r28, r24
						   CMD8_ARG);
						   
	SDWaitResponse7(pu8Response);
    41e6:	c8 01       	movw	r24, r16
    41e8:	0e 94 09 25 	call	0x4a12	; 0x4a12 <SDWaitResponse7>
		
	SDSetCS(false);
    41ec:	80 e0       	ldi	r24, 0x00	; 0
    41ee:	0e 94 a2 24 	call	0x4944	; 0x4944 <SDSetCS>

	return(u8Response);
}
    41f2:	8c 2f       	mov	r24, r28
    41f4:	cf 91       	pop	r28
    41f6:	1f 91       	pop	r17
    41f8:	0f 91       	pop	r16
    41fa:	08 95       	ret

Disassembly of section .text.SDReadOCR:

000041fc <SDReadOCR>:
#define CMD58_ARG   0x00000000
#define CMD58_CRC   0x00

// Go read the OCR
static uint8_t SDReadOCR(uint8_t *pu8Response)
{
    41fc:	0f 93       	push	r16
    41fe:	1f 93       	push	r17
    4200:	cf 93       	push	r28
    4202:	8c 01       	movw	r16, r24
	uint8_t u8Response;
	
	// Assert chip select
	SDSetCS(true);
    4204:	81 e0       	ldi	r24, 0x01	; 1
    4206:	0e 94 a2 24 	call	0x4944	; 0x4944 <SDSetCS>
	
	// Send the app command
	u8Response = SDCommand(CMD58,
    420a:	40 e0       	ldi	r20, 0x00	; 0
    420c:	50 e0       	ldi	r21, 0x00	; 0
    420e:	ba 01       	movw	r22, r20
    4210:	8a e3       	ldi	r24, 0x3A	; 58
    4212:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <SDCommand>
    4216:	c8 2f       	mov	r28, r24
						   CMD58_ARG);

	// Read response
	SDWaitResponse7(pu8Response);
    4218:	c8 01       	movw	r24, r16
    421a:	0e 94 09 25 	call	0x4a12	; 0x4a12 <SDWaitResponse7>

	// Deassert chip select
	SDSetCS(false);
    421e:	80 e0       	ldi	r24, 0x00	; 0
    4220:	0e 94 a2 24 	call	0x4944	; 0x4944 <SDSetCS>
	
	return(u8Response);
}
    4224:	8c 2f       	mov	r24, r28
    4226:	cf 91       	pop	r28
    4228:	1f 91       	pop	r17
    422a:	0f 91       	pop	r16
    422c:	08 95       	ret

Disassembly of section .text.SDReadCSD:

00003750 <SDReadCSD>:
#define CMD9_ARG    0x000000000
#define CMD9_CRC    0x00

// Read CSD (card specific data) - CSD is 128 bits - see the SD spec for details.
static uint8_t SDReadCSD(uint8_t *pu8CSD)
{
    3750:	ef 92       	push	r14
    3752:	ff 92       	push	r15
    3754:	0f 93       	push	r16
    3756:	1f 93       	push	r17
    3758:	cf 93       	push	r28
    375a:	df 93       	push	r29
    375c:	0f 92       	push	r0
    375e:	cd b7       	in	r28, 0x3d	; 61
    3760:	de b7       	in	r29, 0x3e	; 62
    3762:	7c 01       	movw	r14, r24
	uint8_t u8Response;
	uint8_t u8CmdResponse;
	uint8_t u8Count = 8;
	
	SDSetCS(true);
    3764:	81 e0       	ldi	r24, 0x01	; 1
    3766:	0e 94 a2 24 	call	0x4944	; 0x4944 <SDSetCS>
	
	// Send our CMD9 (read CSD)
	u8CmdResponse = SDCommand(CMD9,
    376a:	40 e0       	ldi	r20, 0x00	; 0
    376c:	50 e0       	ldi	r21, 0x00	; 0
    376e:	ba 01       	movw	r22, r20
    3770:	89 e0       	ldi	r24, 0x09	; 9
    3772:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <SDCommand>
    3776:	08 2f       	mov	r16, r24
							  CMD9_ARG);
	
	// Success! Let's get a response
	if (u8CmdResponse)
    3778:	81 11       	cpse	r24, r1
    377a:	1c c0       	rjmp	.+56     	; 0x37b4 <SDReadCSD+0x64>
    377c:	18 e0       	ldi	r17, 0x08	; 8
    377e:	01 c0       	rjmp	.+2      	; 0x3782 <SDReadCSD+0x32>
	do 
	{
		SPIRead(&u8Response,
			    sizeof(u8Response));
	} while ((u8Response != SD_START_TOKEN) &&
			 (u8Count--));
    3780:	18 2f       	mov	r17, r24
	}
	
	// Wait until SD_START_TOKEN (start of data sector). We should easily see it in a few bytes.
	do 
	{
		SPIRead(&u8Response,
    3782:	41 e0       	ldi	r20, 0x01	; 1
    3784:	50 e0       	ldi	r21, 0x00	; 0
    3786:	be 01       	movw	r22, r28
    3788:	6f 5f       	subi	r22, 0xFF	; 255
    378a:	7f 4f       	sbci	r23, 0xFF	; 255
    378c:	83 e0       	ldi	r24, 0x03	; 3
    378e:	0e 94 03 1e 	call	0x3c06	; 0x3c06 <SPITransaction>
			    sizeof(u8Response));
	} while ((u8Response != SD_START_TOKEN) &&
    3792:	89 81       	ldd	r24, Y+1	; 0x01
			 (u8Count--));
    3794:	8e 3f       	cpi	r24, 0xFE	; 254
    3796:	29 f0       	breq	.+10     	; 0x37a2 <SDReadCSD+0x52>
    3798:	8f ef       	ldi	r24, 0xFF	; 255
    379a:	81 0f       	add	r24, r17
	// Wait until SD_START_TOKEN (start of data sector). We should easily see it in a few bytes.
	do 
	{
		SPIRead(&u8Response,
			    sizeof(u8Response));
	} while ((u8Response != SD_START_TOKEN) &&
    379c:	11 11       	cpse	r17, r1
    379e:	f0 cf       	rjmp	.-32     	; 0x3780 <SDReadCSD+0x30>
    37a0:	01 c0       	rjmp	.+2      	; 0x37a4 <SDReadCSD+0x54>
    37a2:	81 2f       	mov	r24, r17
			 (u8Count--));
			 
	// If we haven't seen it in u8Count bytes, then error the call
	if (0 == u8Count)
    37a4:	88 23       	and	r24, r24
    37a6:	31 f0       	breq	.+12     	; 0x37b4 <SDReadCSD+0x64>
	{
		goto errorExit;
	}
	
	// Go read the remaining 16 bytes
	SPIRead(pu8CSD,
    37a8:	40 e1       	ldi	r20, 0x10	; 16
    37aa:	50 e0       	ldi	r21, 0x00	; 0
    37ac:	b7 01       	movw	r22, r14
    37ae:	83 e0       	ldi	r24, 0x03	; 3
    37b0:	0e 94 03 1e 	call	0x3c06	; 0x3c06 <SPITransaction>
		    16);
	
errorExit:	
	SDSetCS(false);
    37b4:	80 e0       	ldi	r24, 0x00	; 0
    37b6:	0e 94 a2 24 	call	0x4944	; 0x4944 <SDSetCS>
	return(u8CmdResponse);
	
}
    37ba:	80 2f       	mov	r24, r16
    37bc:	0f 90       	pop	r0
    37be:	df 91       	pop	r29
    37c0:	cf 91       	pop	r28
    37c2:	1f 91       	pop	r17
    37c4:	0f 91       	pop	r16
    37c6:	ff 90       	pop	r15
    37c8:	ef 90       	pop	r14
    37ca:	08 95       	ret

Disassembly of section .text.SDReceiveDataBlock:

00003338 <SDReceiveDataBlock>:
}

// Receives a datablock during the data phase which may take some time
static bool SDReceiveDataBlock(uint8_t *pu8Buffer,
							   uint16_t u16RXCount)
{
    3338:	cf 92       	push	r12
    333a:	df 92       	push	r13
    333c:	ef 92       	push	r14
    333e:	ff 92       	push	r15
    3340:	0f 93       	push	r16
    3342:	1f 93       	push	r17
    3344:	cf 93       	push	r28
    3346:	df 93       	push	r29
    3348:	0f 92       	push	r0
    334a:	cd b7       	in	r28, 0x3d	; 61
    334c:	de b7       	in	r29, 0x3e	; 62
    334e:	7c 01       	movw	r14, r24
    3350:	6b 01       	movw	r12, r22
	uint8_t u8Response;
	uint16_t u16Count = 4096;
    3352:	00 e0       	ldi	r16, 0x00	; 0
    3354:	10 e1       	ldi	r17, 0x10	; 16
    3356:	01 c0       	rjmp	.+2      	; 0x335a <SDReceiveDataBlock+0x22>
	{
		SPIRead(&u8Response,
				sizeof(u8Response));
	} 
	while ((u8Response != SD_START_TOKEN) &&
		   (u16Count--));
    3358:	89 01       	movw	r16, r18
	uint16_t u16Count = 4096;
	
	// Wait for response token
	do 
	{
		SPIRead(&u8Response,
    335a:	41 e0       	ldi	r20, 0x01	; 1
    335c:	50 e0       	ldi	r21, 0x00	; 0
    335e:	be 01       	movw	r22, r28
    3360:	6f 5f       	subi	r22, 0xFF	; 255
    3362:	7f 4f       	sbci	r23, 0xFF	; 255
    3364:	83 e0       	ldi	r24, 0x03	; 3
    3366:	0e 94 03 1e 	call	0x3c06	; 0x3c06 <SPITransaction>
				sizeof(u8Response));
	} 
	while ((u8Response != SD_START_TOKEN) &&
    336a:	89 81       	ldd	r24, Y+1	; 0x01
		   (u16Count--));
    336c:	8e 3f       	cpi	r24, 0xFE	; 254
    336e:	29 f0       	breq	.+10     	; 0x337a <SDReceiveDataBlock+0x42>
    3370:	98 01       	movw	r18, r16
    3372:	21 50       	subi	r18, 0x01	; 1
    3374:	31 09       	sbc	r19, r1
	do 
	{
		SPIRead(&u8Response,
				sizeof(u8Response));
	} 
	while ((u8Response != SD_START_TOKEN) &&
    3376:	01 2b       	or	r16, r17
    3378:	79 f7       	brne	.-34     	; 0x3358 <SDReceiveDataBlock+0x20>
		   (u16Count--));
		   
	if (u8Response != SD_START_TOKEN)
    337a:	8e 3f       	cpi	r24, 0xFE	; 254
    337c:	b9 f4       	brne	.+46     	; 0x33ac <SDReceiveDataBlock+0x74>
	{
		return(false);
	}
	
	// Start of data. Pull it down.
	SPIRead(pu8Buffer,
    337e:	a6 01       	movw	r20, r12
    3380:	b7 01       	movw	r22, r14
    3382:	83 e0       	ldi	r24, 0x03	; 3
    3384:	0e 94 03 1e 	call	0x3c06	; 0x3c06 <SPITransaction>
			u16RXCount);
			
	// Discard CRC
	SPIRead(&u8Response,
    3388:	41 e0       	ldi	r20, 0x01	; 1
    338a:	50 e0       	ldi	r21, 0x00	; 0
    338c:	be 01       	movw	r22, r28
    338e:	6f 5f       	subi	r22, 0xFF	; 255
    3390:	7f 4f       	sbci	r23, 0xFF	; 255
    3392:	83 e0       	ldi	r24, 0x03	; 3
    3394:	0e 94 03 1e 	call	0x3c06	; 0x3c06 <SPITransaction>
			sizeof(u8Response));
	SPIRead(&u8Response,
    3398:	41 e0       	ldi	r20, 0x01	; 1
    339a:	50 e0       	ldi	r21, 0x00	; 0
    339c:	be 01       	movw	r22, r28
    339e:	6f 5f       	subi	r22, 0xFF	; 255
    33a0:	7f 4f       	sbci	r23, 0xFF	; 255
    33a2:	83 e0       	ldi	r24, 0x03	; 3
    33a4:	0e 94 03 1e 	call	0x3c06	; 0x3c06 <SPITransaction>
			sizeof(u8Response));
	return(true);			   
    33a8:	81 e0       	ldi	r24, 0x01	; 1
    33aa:	01 c0       	rjmp	.+2      	; 0x33ae <SDReceiveDataBlock+0x76>
	while ((u8Response != SD_START_TOKEN) &&
		   (u16Count--));
		   
	if (u8Response != SD_START_TOKEN)
	{
		return(false);
    33ac:	80 e0       	ldi	r24, 0x00	; 0
	SPIRead(&u8Response,
			sizeof(u8Response));
	SPIRead(&u8Response,
			sizeof(u8Response));
	return(true);			   
}
    33ae:	0f 90       	pop	r0
    33b0:	df 91       	pop	r29
    33b2:	cf 91       	pop	r28
    33b4:	1f 91       	pop	r17
    33b6:	0f 91       	pop	r16
    33b8:	ff 90       	pop	r15
    33ba:	ef 90       	pop	r14
    33bc:	df 90       	pop	r13
    33be:	cf 90       	pop	r12
    33c0:	08 95       	ret

Disassembly of section .text.SDTransmitDataBlock:

00002ca6 <SDTransmitDataBlock>:

// Transmits a datablock during the data phase which may take some time
static bool SDTransmitDataBlock(uint8_t *pu8Buffer,
							    uint16_t u16TXCount,
								uint8_t u8DataPhaseToken)
{
    2ca6:	ef 92       	push	r14
    2ca8:	ff 92       	push	r15
    2caa:	0f 93       	push	r16
    2cac:	1f 93       	push	r17
    2cae:	cf 93       	push	r28
    2cb0:	df 93       	push	r29
    2cb2:	00 d0       	rcall	.+0      	; 0x2cb4 <SDTransmitDataBlock+0xe>
    2cb4:	cd b7       	in	r28, 0x3d	; 61
    2cb6:	de b7       	in	r29, 0x3e	; 62
    2cb8:	8c 01       	movw	r16, r24
    2cba:	7b 01       	movw	r14, r22
    2cbc:	4a 83       	std	Y+2, r20	; 0x02
	uint8_t u8Response;
	uint16_t u16Attempts;
	bool bResult = true;

	// Send the data phase token (whatever it is)
	SPIWrite(&u8DataPhaseToken,
    2cbe:	41 e0       	ldi	r20, 0x01	; 1
    2cc0:	50 e0       	ldi	r21, 0x00	; 0
    2cc2:	be 01       	movw	r22, r28
    2cc4:	6e 5f       	subi	r22, 0xFE	; 254
    2cc6:	7f 4f       	sbci	r23, 0xFF	; 255
    2cc8:	81 e0       	ldi	r24, 0x01	; 1
    2cca:	0e 94 03 1e 	call	0x3c06	; 0x3c06 <SPITransaction>
			 sizeof(u8DataPhaseToken));
	
	if (u8DataPhaseToken != SD_STOP_TRANSACTION)
    2cce:	8a 81       	ldd	r24, Y+2	; 0x02
    2cd0:	8d 3f       	cpi	r24, 0xFD	; 253
    2cd2:	e1 f1       	breq	.+120    	; 0x2d4c <SDTransmitDataBlock+0xa6>
	{
		// As long as we're not stopping a transaction, we're writing data
		SPIWrite(pu8Buffer,
    2cd4:	a7 01       	movw	r20, r14
    2cd6:	b8 01       	movw	r22, r16
    2cd8:	81 e0       	ldi	r24, 0x01	; 1
    2cda:	0e 94 03 1e 	call	0x3c06	; 0x3c06 <SPITransaction>
				 u16TXCount);
				 
		// Wait for acceptance of the sector
		u16Attempts = 0;
    2cde:	00 e0       	ldi	r16, 0x00	; 0
    2ce0:	10 e0       	ldi	r17, 0x00	; 0
		while (u16Attempts < SD_MAX_WRITE_ATTEMPTS)
    2ce2:	0d c0       	rjmp	.+26     	; 0x2cfe <SDTransmitDataBlock+0x58>
		{
			// Get some data
			SPIRead(&u8Response,
    2ce4:	41 e0       	ldi	r20, 0x01	; 1
    2ce6:	50 e0       	ldi	r21, 0x00	; 0
    2ce8:	be 01       	movw	r22, r28
    2cea:	6f 5f       	subi	r22, 0xFF	; 255
    2cec:	7f 4f       	sbci	r23, 0xFF	; 255
    2cee:	83 e0       	ldi	r24, 0x03	; 3
    2cf0:	0e 94 03 1e 	call	0x3c06	; 0x3c06 <SPITransaction>
					sizeof(u8Response));
			if (u8Response != 0xff)
    2cf4:	89 81       	ldd	r24, Y+1	; 0x01
    2cf6:	8f 3f       	cpi	r24, 0xFF	; 255
    2cf8:	31 f4       	brne	.+12     	; 0x2d06 <SDTransmitDataBlock+0x60>
			{
				break;
			}
				
			++u16Attempts;
    2cfa:	0f 5f       	subi	r16, 0xFF	; 255
    2cfc:	1f 4f       	sbci	r17, 0xFF	; 255
		SPIWrite(pu8Buffer,
				 u16TXCount);
				 
		// Wait for acceptance of the sector
		u16Attempts = 0;
		while (u16Attempts < SD_MAX_WRITE_ATTEMPTS)
    2cfe:	0e 39       	cpi	r16, 0x9E	; 158
    2d00:	88 e9       	ldi	r24, 0x98	; 152
    2d02:	18 07       	cpc	r17, r24
    2d04:	78 f3       	brcs	.-34     	; 0x2ce4 <SDTransmitDataBlock+0x3e>
				
			++u16Attempts;
		}
			
		// We've timed out or else the card is dead
		if (SD_MAX_WRITE_ATTEMPTS == u16Attempts)
    2d06:	0e 39       	cpi	r16, 0x9E	; 158
    2d08:	18 49       	sbci	r17, 0x98	; 152
    2d0a:	11 f1       	breq	.+68     	; 0x2d50 <SDTransmitDataBlock+0xaa>
			bResult = false;
			goto errorExit;
		}
			
		// See if the data was accepted
		u8Response &= 0x1f;
    2d0c:	89 81       	ldd	r24, Y+1	; 0x01
    2d0e:	8f 71       	andi	r24, 0x1F	; 31
    2d10:	89 83       	std	Y+1, r24	; 0x01
		if (0x05 == u8Response)
    2d12:	85 30       	cpi	r24, 0x05	; 5
    2d14:	81 f0       	breq	.+32     	; 0x2d36 <SDTransmitDataBlock+0x90>
			// Success!
		}
		else
		{
			// Sector not accepted
			bResult = false;
    2d16:	80 e0       	ldi	r24, 0x00	; 0
    2d18:	1e c0       	rjmp	.+60     	; 0x2d56 <SDTransmitDataBlock+0xb0>
			// Wait for the write to finish
			u16Attempts = 0;
			while (u16Attempts < SD_MAX_WRITE_ATTEMPTS)
			{
				// Wait for the card to accept writing the sector
				SPIRead(&u8Response,
    2d1a:	41 e0       	ldi	r20, 0x01	; 1
    2d1c:	50 e0       	ldi	r21, 0x00	; 0
    2d1e:	be 01       	movw	r22, r28
    2d20:	6f 5f       	subi	r22, 0xFF	; 255
    2d22:	7f 4f       	sbci	r23, 0xFF	; 255
    2d24:	83 e0       	ldi	r24, 0x03	; 3
    2d26:	0e 94 03 1e 	call	0x3c06	; 0x3c06 <SPITransaction>
						sizeof(u8Response));
				if (u8Response)
    2d2a:	89 81       	ldd	r24, Y+1	; 0x01
    2d2c:	81 11       	cpse	r24, r1
    2d2e:	09 c0       	rjmp	.+18     	; 0x2d42 <SDTransmitDataBlock+0x9c>
				{
					break;
				}
					
				++u16Attempts;
    2d30:	0f 5f       	subi	r16, 0xFF	; 255
    2d32:	1f 4f       	sbci	r17, 0xFF	; 255
    2d34:	02 c0       	rjmp	.+4      	; 0x2d3a <SDTransmitDataBlock+0x94>
    2d36:	00 e0       	ldi	r16, 0x00	; 0
    2d38:	10 e0       	ldi	r17, 0x00	; 0
		u8Response &= 0x1f;
		if (0x05 == u8Response)
		{
			// Wait for the write to finish
			u16Attempts = 0;
			while (u16Attempts < SD_MAX_WRITE_ATTEMPTS)
    2d3a:	0e 39       	cpi	r16, 0x9E	; 158
    2d3c:	88 e9       	ldi	r24, 0x98	; 152
    2d3e:	18 07       	cpc	r17, r24
    2d40:	60 f3       	brcs	.-40     	; 0x2d1a <SDTransmitDataBlock+0x74>
				}
					
				++u16Attempts;
			}
				
			if (SD_MAX_WRITE_ATTEMPTS == u16Attempts)
    2d42:	0e 39       	cpi	r16, 0x9E	; 158
    2d44:	18 49       	sbci	r17, 0x98	; 152
    2d46:	31 f0       	breq	.+12     	; 0x2d54 <SDTransmitDataBlock+0xae>
							    uint16_t u16TXCount,
								uint8_t u8DataPhaseToken)
{
	uint8_t u8Response;
	uint16_t u16Attempts;
	bool bResult = true;
    2d48:	81 e0       	ldi	r24, 0x01	; 1
    2d4a:	05 c0       	rjmp	.+10     	; 0x2d56 <SDTransmitDataBlock+0xb0>
    2d4c:	81 e0       	ldi	r24, 0x01	; 1
    2d4e:	03 c0       	rjmp	.+6      	; 0x2d56 <SDTransmitDataBlock+0xb0>
		}
			
		// We've timed out or else the card is dead
		if (SD_MAX_WRITE_ATTEMPTS == u16Attempts)
		{
			bResult = false;
    2d50:	80 e0       	ldi	r24, 0x00	; 0
    2d52:	01 c0       	rjmp	.+2      	; 0x2d56 <SDTransmitDataBlock+0xb0>
				++u16Attempts;
			}
				
			if (SD_MAX_WRITE_ATTEMPTS == u16Attempts)
			{
				bResult = false;
    2d54:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	
errorExit:
	return(bResult);
}
    2d56:	0f 90       	pop	r0
    2d58:	0f 90       	pop	r0
    2d5a:	df 91       	pop	r29
    2d5c:	cf 91       	pop	r28
    2d5e:	1f 91       	pop	r17
    2d60:	0f 91       	pop	r16
    2d62:	ff 90       	pop	r15
    2d64:	ef 90       	pop	r14
    2d66:	08 95       	ret

Disassembly of section .text.SDInit:

00001cca <SDInit>:

bool SDGetBlockSize(uint32_t *pu32BlockSize)
{
	*pu32BlockSize = sg_u16BlockSize;
	return(true);
}
    1cca:	1f 93       	push	r17
    1ccc:	cf 93       	push	r28
    1cce:	df 93       	push	r29
    1cd0:	00 d0       	rcall	.+0      	; 0x1cd2 <SDInit+0x8>
    1cd2:	00 d0       	rcall	.+0      	; 0x1cd4 <SDInit+0xa>
    1cd4:	0f 92       	push	r0
    1cd6:	cd b7       	in	r28, 0x3d	; 61
    1cd8:	de b7       	in	r29, 0x3e	; 62
    1cda:	87 b1       	in	r24, 0x07	; 7
    1cdc:	80 64       	ori	r24, 0x40	; 64
    1cde:	87 b9       	out	0x07, r24	; 7
    1ce0:	88 b1       	in	r24, 0x08	; 8
    1ce2:	80 64       	ori	r24, 0x40	; 64
    1ce4:	88 b9       	out	0x08, r24	; 8
    1ce6:	88 b1       	in	r24, 0x08	; 8
    1ce8:	80 64       	ori	r24, 0x40	; 64
    1cea:	88 b9       	out	0x08, r24	; 8
    1cec:	0e 94 ba 21 	call	0x4374	; 0x4374 <SPIInit>
    1cf0:	0e 94 40 20 	call	0x4080	; 0x4080 <SDPowerup>
    1cf4:	10 e0       	ldi	r17, 0x00	; 0
    1cf6:	0d c0       	rjmp	.+26     	; 0x1d12 <SDInit+0x48>
    1cf8:	ce 01       	movw	r24, r28
    1cfa:	01 96       	adiw	r24, 0x01	; 1
    1cfc:	0e 94 ed 23 	call	0x47da	; 0x47da <SDGoIdle>
    1d00:	81 30       	cpi	r24, 0x01	; 1
    1d02:	49 f0       	breq	.+18     	; 0x1d16 <SDInit+0x4c>
    1d04:	60 e1       	ldi	r22, 0x10	; 16
    1d06:	77 e2       	ldi	r23, 0x27	; 39
    1d08:	80 e0       	ldi	r24, 0x00	; 0
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <Delay>
    1d10:	1f 5f       	subi	r17, 0xFF	; 255
    1d12:	14 36       	cpi	r17, 0x64	; 100
    1d14:	88 f3       	brcs	.-30     	; 0x1cf8 <SDInit+0x2e>
    1d16:	14 36       	cpi	r17, 0x64	; 100
    1d18:	09 f4       	brne	.+2      	; 0x1d1c <SDInit+0x52>
    1d1a:	76 c0       	rjmp	.+236    	; 0x1e08 <SDInit+0x13e>
    1d1c:	ce 01       	movw	r24, r28
    1d1e:	01 96       	adiw	r24, 0x01	; 1
    1d20:	25 e0       	ldi	r18, 0x05	; 5
    1d22:	fc 01       	movw	r30, r24
    1d24:	11 92       	st	Z+, r1
    1d26:	2a 95       	dec	r18
    1d28:	e9 f7       	brne	.-6      	; 0x1d24 <SDInit+0x5a>
    1d2a:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <SDSendInterfaceCondition>
    1d2e:	81 30       	cpi	r24, 0x01	; 1
    1d30:	09 f0       	breq	.+2      	; 0x1d34 <SDInit+0x6a>
    1d32:	5e c0       	rjmp	.+188    	; 0x1df0 <SDInit+0x126>
    1d34:	8c 81       	ldd	r24, Y+4	; 0x04
    1d36:	8a 3a       	cpi	r24, 0xAA	; 170
    1d38:	09 f0       	breq	.+2      	; 0x1d3c <SDInit+0x72>
    1d3a:	68 c0       	rjmp	.+208    	; 0x1e0c <SDInit+0x142>
    1d3c:	40 e0       	ldi	r20, 0x00	; 0
    1d3e:	50 e0       	ldi	r21, 0x00	; 0
    1d40:	60 e0       	ldi	r22, 0x00	; 0
    1d42:	70 e4       	ldi	r23, 0x40	; 64
    1d44:	ce 01       	movw	r24, r28
    1d46:	01 96       	adiw	r24, 0x01	; 1
    1d48:	0e 94 2f 1e 	call	0x3c5e	; 0x3c5e <SDSendOpConditionArg>
    1d4c:	81 11       	cpse	r24, r1
    1d4e:	60 c0       	rjmp	.+192    	; 0x1e10 <SDInit+0x146>
    1d50:	ce 01       	movw	r24, r28
    1d52:	01 96       	adiw	r24, 0x01	; 1
    1d54:	0e 94 fe 20 	call	0x41fc	; 0x41fc <SDReadOCR>
    1d58:	88 23       	and	r24, r24
    1d5a:	0c f4       	brge	.+2      	; 0x1d5e <SDInit+0x94>
    1d5c:	5b c0       	rjmp	.+182    	; 0x1e14 <SDInit+0x14a>
    1d5e:	89 e2       	ldi	r24, 0x29	; 41
    1d60:	97 e0       	ldi	r25, 0x07	; 7
    1d62:	0e 94 a8 1b 	call	0x3750	; 0x3750 <SDReadCSD>
    1d66:	88 23       	and	r24, r24
    1d68:	0c f4       	brge	.+2      	; 0x1d6c <SDInit+0xa2>
    1d6a:	56 c0       	rjmp	.+172    	; 0x1e18 <SDInit+0x14e>
    1d6c:	e9 e2       	ldi	r30, 0x29	; 41
    1d6e:	f7 e0       	ldi	r31, 0x07	; 7
    1d70:	87 81       	ldd	r24, Z+7	; 0x07
    1d72:	8f 73       	andi	r24, 0x3F	; 63
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	a0 e0       	ldi	r26, 0x00	; 0
    1d78:	b0 e0       	ldi	r27, 0x00	; 0
    1d7a:	bc 01       	movw	r22, r24
    1d7c:	55 27       	eor	r21, r21
    1d7e:	44 27       	eor	r20, r20
    1d80:	90 85       	ldd	r25, Z+8	; 0x08
    1d82:	89 2f       	mov	r24, r25
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	a0 e0       	ldi	r26, 0x00	; 0
    1d88:	b0 e0       	ldi	r27, 0x00	; 0
    1d8a:	ba 2f       	mov	r27, r26
    1d8c:	a9 2f       	mov	r26, r25
    1d8e:	98 2f       	mov	r25, r24
    1d90:	88 27       	eor	r24, r24
    1d92:	84 2b       	or	r24, r20
    1d94:	95 2b       	or	r25, r21
    1d96:	a6 2b       	or	r26, r22
    1d98:	b7 2b       	or	r27, r23
    1d9a:	21 85       	ldd	r18, Z+9	; 0x09
    1d9c:	82 2b       	or	r24, r18
    1d9e:	01 96       	adiw	r24, 0x01	; 1
    1da0:	a1 1d       	adc	r26, r1
    1da2:	b1 1d       	adc	r27, r1
    1da4:	07 2e       	mov	r0, r23
    1da6:	7a e0       	ldi	r23, 0x0A	; 10
    1da8:	88 0f       	add	r24, r24
    1daa:	99 1f       	adc	r25, r25
    1dac:	aa 1f       	adc	r26, r26
    1dae:	bb 1f       	adc	r27, r27
    1db0:	7a 95       	dec	r23
    1db2:	d1 f7       	brne	.-12     	; 0x1da8 <SDInit+0xde>
    1db4:	70 2d       	mov	r23, r0
    1db6:	80 93 50 07 	sts	0x0750, r24	; 0x800750 <sg_u32SDSectorCount>
    1dba:	90 93 51 07 	sts	0x0751, r25	; 0x800751 <sg_u32SDSectorCount+0x1>
    1dbe:	a0 93 52 07 	sts	0x0752, r26	; 0x800752 <sg_u32SDSectorCount+0x2>
    1dc2:	b0 93 53 07 	sts	0x0753, r27	; 0x800753 <sg_u32SDSectorCount+0x3>
    1dc6:	25 81       	ldd	r18, Z+5	; 0x05
    1dc8:	2f 70       	andi	r18, 0x0F	; 15
    1dca:	81 e0       	ldi	r24, 0x01	; 1
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	02 c0       	rjmp	.+4      	; 0x1dd4 <SDInit+0x10a>
    1dd0:	88 0f       	add	r24, r24
    1dd2:	99 1f       	adc	r25, r25
    1dd4:	2a 95       	dec	r18
    1dd6:	e2 f7       	brpl	.-8      	; 0x1dd0 <SDInit+0x106>
    1dd8:	90 93 5b 07 	sts	0x075B, r25	; 0x80075b <sg_u16BlockSize+0x1>
    1ddc:	80 93 5a 07 	sts	0x075A, r24	; 0x80075a <sg_u16BlockSize>
    1de0:	60 ec       	ldi	r22, 0xC0	; 192
    1de2:	78 ed       	ldi	r23, 0xD8	; 216
    1de4:	87 ea       	ldi	r24, 0xA7	; 167
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	0e 94 29 15 	call	0x2a52	; 0x2a52 <SPISetBaudRate>
    1dec:	81 e0       	ldi	r24, 0x01	; 1
    1dee:	17 c0       	rjmp	.+46     	; 0x1e1e <SDInit+0x154>
    1df0:	40 e0       	ldi	r20, 0x00	; 0
    1df2:	50 e0       	ldi	r21, 0x00	; 0
    1df4:	60 e0       	ldi	r22, 0x00	; 0
    1df6:	70 e4       	ldi	r23, 0x40	; 64
    1df8:	ce 01       	movw	r24, r28
    1dfa:	01 96       	adiw	r24, 0x01	; 1
    1dfc:	0e 94 2f 1e 	call	0x3c5e	; 0x3c5e <SDSendOpConditionArg>
    1e00:	81 11       	cpse	r24, r1
    1e02:	0c c0       	rjmp	.+24     	; 0x1e1c <SDInit+0x152>
    1e04:	81 e0       	ldi	r24, 0x01	; 1
    1e06:	0b c0       	rjmp	.+22     	; 0x1e1e <SDInit+0x154>
    1e08:	80 e0       	ldi	r24, 0x00	; 0
    1e0a:	09 c0       	rjmp	.+18     	; 0x1e1e <SDInit+0x154>
    1e0c:	80 e0       	ldi	r24, 0x00	; 0
    1e0e:	07 c0       	rjmp	.+14     	; 0x1e1e <SDInit+0x154>
    1e10:	80 e0       	ldi	r24, 0x00	; 0
    1e12:	05 c0       	rjmp	.+10     	; 0x1e1e <SDInit+0x154>
    1e14:	80 e0       	ldi	r24, 0x00	; 0
    1e16:	03 c0       	rjmp	.+6      	; 0x1e1e <SDInit+0x154>
    1e18:	80 e0       	ldi	r24, 0x00	; 0
    1e1a:	01 c0       	rjmp	.+2      	; 0x1e1e <SDInit+0x154>
    1e1c:	80 e0       	ldi	r24, 0x00	; 0
    1e1e:	0f 90       	pop	r0
    1e20:	0f 90       	pop	r0
    1e22:	0f 90       	pop	r0
    1e24:	0f 90       	pop	r0
    1e26:	0f 90       	pop	r0
    1e28:	df 91       	pop	r29
    1e2a:	cf 91       	pop	r28
    1e2c:	1f 91       	pop	r17
    1e2e:	08 95       	ret

Disassembly of section .text.SDRead:

0000297a <SDRead>:

// Read one or more sectors from SD
bool SDRead(uint32_t u32Sector,
			uint8_t *pu8Buffer,
			uint32_t u32SectorCount)
{
    297a:	8f 92       	push	r8
    297c:	9f 92       	push	r9
    297e:	af 92       	push	r10
    2980:	bf 92       	push	r11
    2982:	cf 92       	push	r12
    2984:	df 92       	push	r13
    2986:	ef 92       	push	r14
    2988:	ff 92       	push	r15
    298a:	0f 93       	push	r16
    298c:	1f 93       	push	r17
    298e:	cf 93       	push	r28
    2990:	df 93       	push	r29
    2992:	4b 01       	movw	r8, r22
    2994:	5c 01       	movw	r10, r24
    2996:	ea 01       	movw	r28, r20
    2998:	68 01       	movw	r12, r16
    299a:	79 01       	movw	r14, r18
	bool bResult = false;
	
	// Pet the watchdog
	WatchdogReset();
    299c:	0e 94 44 25 	call	0x4a88	; 0x4a88 <WatchdogReset>
		
	// Assert chip select
	SDSetCS(true);
    29a0:	81 e0       	ldi	r24, 0x01	; 1
    29a2:	0e 94 a2 24 	call	0x4944	; 0x4944 <SDSetCS>

	if (1 == u32SectorCount)
    29a6:	81 e0       	ldi	r24, 0x01	; 1
    29a8:	c8 16       	cp	r12, r24
    29aa:	d1 04       	cpc	r13, r1
    29ac:	e1 04       	cpc	r14, r1
    29ae:	f1 04       	cpc	r15, r1
    29b0:	81 f4       	brne	.+32     	; 0x29d2 <SDRead+0x58>
	{
		if (0 == SDCommand(CMD17,
    29b2:	b5 01       	movw	r22, r10
    29b4:	a4 01       	movw	r20, r8
    29b6:	81 e1       	ldi	r24, 0x11	; 17
    29b8:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <SDCommand>
    29bc:	81 11       	cpse	r24, r1
    29be:	35 c0       	rjmp	.+106    	; 0x2a2a <SDRead+0xb0>
						   u32Sector))
		{
			bResult = SDReceiveDataBlock(pu8Buffer,
    29c0:	60 91 5a 07 	lds	r22, 0x075A	; 0x80075a <sg_u16BlockSize>
    29c4:	70 91 5b 07 	lds	r23, 0x075B	; 0x80075b <sg_u16BlockSize+0x1>
    29c8:	ce 01       	movw	r24, r28
    29ca:	0e 94 9c 19 	call	0x3338	; 0x3338 <SDReceiveDataBlock>
    29ce:	18 2f       	mov	r17, r24
    29d0:	2f c0       	rjmp	.+94     	; 0x2a30 <SDRead+0xb6>
		}
	}
	else
	{
		// Multisector
		if (0 == SDCommand(CMD18,
    29d2:	b5 01       	movw	r22, r10
    29d4:	a4 01       	movw	r20, r8
    29d6:	82 e1       	ldi	r24, 0x12	; 18
    29d8:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <SDCommand>
    29dc:	88 23       	and	r24, r24
    29de:	19 f0       	breq	.+6      	; 0x29e6 <SDRead+0x6c>
    29e0:	26 c0       	rjmp	.+76     	; 0x2a2e <SDRead+0xb4>
				WatchdogReset();
				
				pu8Buffer += sg_u16BlockSize;
			} 
			while ((bResult) &&
				   (u32SectorCount--));
    29e2:	6c 01       	movw	r12, r24
    29e4:	7d 01       	movw	r14, r26
		if (0 == SDCommand(CMD18,
						   u32Sector))
		{
			do 
			{
				bResult = SDReceiveDataBlock(pu8Buffer,
    29e6:	60 91 5a 07 	lds	r22, 0x075A	; 0x80075a <sg_u16BlockSize>
    29ea:	70 91 5b 07 	lds	r23, 0x075B	; 0x80075b <sg_u16BlockSize+0x1>
    29ee:	ce 01       	movw	r24, r28
    29f0:	0e 94 9c 19 	call	0x3338	; 0x3338 <SDReceiveDataBlock>
    29f4:	18 2f       	mov	r17, r24
							 				 sg_u16BlockSize);
				// Pet the watchdog
				WatchdogReset();
    29f6:	0e 94 44 25 	call	0x4a88	; 0x4a88 <WatchdogReset>
				
				pu8Buffer += sg_u16BlockSize;
    29fa:	80 91 5a 07 	lds	r24, 0x075A	; 0x80075a <sg_u16BlockSize>
    29fe:	90 91 5b 07 	lds	r25, 0x075B	; 0x80075b <sg_u16BlockSize+0x1>
    2a02:	c8 0f       	add	r28, r24
    2a04:	d9 1f       	adc	r29, r25
			} 
			while ((bResult) &&
				   (u32SectorCount--));
    2a06:	11 23       	and	r17, r17
    2a08:	49 f0       	breq	.+18     	; 0x2a1c <SDRead+0xa2>
    2a0a:	d7 01       	movw	r26, r14
    2a0c:	c6 01       	movw	r24, r12
    2a0e:	01 97       	sbiw	r24, 0x01	; 1
    2a10:	a1 09       	sbc	r26, r1
    2a12:	b1 09       	sbc	r27, r1
				// Pet the watchdog
				WatchdogReset();
				
				pu8Buffer += sg_u16BlockSize;
			} 
			while ((bResult) &&
    2a14:	cd 28       	or	r12, r13
    2a16:	ce 28       	or	r12, r14
    2a18:	cf 28       	or	r12, r15
    2a1a:	19 f7       	brne	.-58     	; 0x29e2 <SDRead+0x68>
				   (u32SectorCount--));
				   
			// Regardless, send a stop command
			(void) SDCommand(CMD12,
    2a1c:	40 e0       	ldi	r20, 0x00	; 0
    2a1e:	50 e0       	ldi	r21, 0x00	; 0
    2a20:	ba 01       	movw	r22, r20
    2a22:	8c e0       	ldi	r24, 0x0C	; 12
    2a24:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <SDCommand>
    2a28:	03 c0       	rjmp	.+6      	; 0x2a30 <SDRead+0xb6>
// Read one or more sectors from SD
bool SDRead(uint32_t u32Sector,
			uint8_t *pu8Buffer,
			uint32_t u32SectorCount)
{
	bool bResult = false;
    2a2a:	10 e0       	ldi	r17, 0x00	; 0
    2a2c:	01 c0       	rjmp	.+2      	; 0x2a30 <SDRead+0xb6>
    2a2e:	10 e0       	ldi	r17, 0x00	; 0
		{
			// Failed
		}
	}
	
	SDSetCS(false);
    2a30:	80 e0       	ldi	r24, 0x00	; 0
    2a32:	0e 94 a2 24 	call	0x4944	; 0x4944 <SDSetCS>

	return(bResult);
}
    2a36:	81 2f       	mov	r24, r17
    2a38:	df 91       	pop	r29
    2a3a:	cf 91       	pop	r28
    2a3c:	1f 91       	pop	r17
    2a3e:	0f 91       	pop	r16
    2a40:	ff 90       	pop	r15
    2a42:	ef 90       	pop	r14
    2a44:	df 90       	pop	r13
    2a46:	cf 90       	pop	r12
    2a48:	bf 90       	pop	r11
    2a4a:	af 90       	pop	r10
    2a4c:	9f 90       	pop	r9
    2a4e:	8f 90       	pop	r8
    2a50:	08 95       	ret

Disassembly of section .text.SDWrite:

000027c2 <SDWrite>:

bool SDGetBlockSize(uint32_t *pu32BlockSize)
{
	*pu32BlockSize = sg_u16BlockSize;
	return(true);
}
    27c2:	8f 92       	push	r8
    27c4:	9f 92       	push	r9
    27c6:	af 92       	push	r10
    27c8:	bf 92       	push	r11
    27ca:	cf 92       	push	r12
    27cc:	df 92       	push	r13
    27ce:	ef 92       	push	r14
    27d0:	ff 92       	push	r15
    27d2:	0f 93       	push	r16
    27d4:	1f 93       	push	r17
    27d6:	cf 93       	push	r28
    27d8:	df 93       	push	r29
    27da:	4b 01       	movw	r8, r22
    27dc:	5c 01       	movw	r10, r24
    27de:	ea 01       	movw	r28, r20
    27e0:	68 01       	movw	r12, r16
    27e2:	79 01       	movw	r14, r18
    27e4:	0e 94 44 25 	call	0x4a88	; 0x4a88 <WatchdogReset>
    27e8:	81 e0       	ldi	r24, 0x01	; 1
    27ea:	0e 94 a2 24 	call	0x4944	; 0x4944 <SDSetCS>
    27ee:	81 e0       	ldi	r24, 0x01	; 1
    27f0:	c8 16       	cp	r12, r24
    27f2:	d1 04       	cpc	r13, r1
    27f4:	e1 04       	cpc	r14, r1
    27f6:	f1 04       	cpc	r15, r1
    27f8:	89 f4       	brne	.+34     	; 0x281c <SDWrite+0x5a>
    27fa:	b5 01       	movw	r22, r10
    27fc:	a4 01       	movw	r20, r8
    27fe:	88 e1       	ldi	r24, 0x18	; 24
    2800:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <SDCommand>
    2804:	81 11       	cpse	r24, r1
    2806:	37 c0       	rjmp	.+110    	; 0x2876 <SDWrite+0xb4>
    2808:	60 91 5a 07 	lds	r22, 0x075A	; 0x80075a <sg_u16BlockSize>
    280c:	70 91 5b 07 	lds	r23, 0x075B	; 0x80075b <sg_u16BlockSize+0x1>
    2810:	4e ef       	ldi	r20, 0xFE	; 254
    2812:	ce 01       	movw	r24, r28
    2814:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <SDTransmitDataBlock>
    2818:	18 2f       	mov	r17, r24
    281a:	30 c0       	rjmp	.+96     	; 0x287c <SDWrite+0xba>
    281c:	b5 01       	movw	r22, r10
    281e:	a4 01       	movw	r20, r8
    2820:	89 e1       	ldi	r24, 0x19	; 25
    2822:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <SDCommand>
    2826:	88 23       	and	r24, r24
    2828:	19 f0       	breq	.+6      	; 0x2830 <SDWrite+0x6e>
    282a:	27 c0       	rjmp	.+78     	; 0x287a <SDWrite+0xb8>
    282c:	6c 01       	movw	r12, r24
    282e:	7d 01       	movw	r14, r26
    2830:	60 91 5a 07 	lds	r22, 0x075A	; 0x80075a <sg_u16BlockSize>
    2834:	70 91 5b 07 	lds	r23, 0x075B	; 0x80075b <sg_u16BlockSize+0x1>
    2838:	4c ef       	ldi	r20, 0xFC	; 252
    283a:	ce 01       	movw	r24, r28
    283c:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <SDTransmitDataBlock>
    2840:	18 2f       	mov	r17, r24
    2842:	0e 94 44 25 	call	0x4a88	; 0x4a88 <WatchdogReset>
    2846:	80 91 5a 07 	lds	r24, 0x075A	; 0x80075a <sg_u16BlockSize>
    284a:	90 91 5b 07 	lds	r25, 0x075B	; 0x80075b <sg_u16BlockSize+0x1>
    284e:	c8 0f       	add	r28, r24
    2850:	d9 1f       	adc	r29, r25
    2852:	11 23       	and	r17, r17
    2854:	49 f0       	breq	.+18     	; 0x2868 <SDWrite+0xa6>
    2856:	d7 01       	movw	r26, r14
    2858:	c6 01       	movw	r24, r12
    285a:	01 97       	sbiw	r24, 0x01	; 1
    285c:	a1 09       	sbc	r26, r1
    285e:	b1 09       	sbc	r27, r1
    2860:	cd 28       	or	r12, r13
    2862:	ce 28       	or	r12, r14
    2864:	cf 28       	or	r12, r15
    2866:	11 f7       	brne	.-60     	; 0x282c <SDWrite+0x6a>
    2868:	40 e0       	ldi	r20, 0x00	; 0
    286a:	50 e0       	ldi	r21, 0x00	; 0
    286c:	ba 01       	movw	r22, r20
    286e:	8c e0       	ldi	r24, 0x0C	; 12
    2870:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <SDCommand>
    2874:	03 c0       	rjmp	.+6      	; 0x287c <SDWrite+0xba>
    2876:	10 e0       	ldi	r17, 0x00	; 0
    2878:	01 c0       	rjmp	.+2      	; 0x287c <SDWrite+0xba>
    287a:	10 e0       	ldi	r17, 0x00	; 0
    287c:	80 e0       	ldi	r24, 0x00	; 0
    287e:	0e 94 a2 24 	call	0x4944	; 0x4944 <SDSetCS>
    2882:	81 2f       	mov	r24, r17
    2884:	df 91       	pop	r29
    2886:	cf 91       	pop	r28
    2888:	1f 91       	pop	r17
    288a:	0f 91       	pop	r16
    288c:	ff 90       	pop	r15
    288e:	ef 90       	pop	r14
    2890:	df 90       	pop	r13
    2892:	cf 90       	pop	r12
    2894:	bf 90       	pop	r11
    2896:	af 90       	pop	r10
    2898:	9f 90       	pop	r9
    289a:	8f 90       	pop	r8
    289c:	08 95       	ret

Disassembly of section .text.SPITransaction:

00003c06 <SPITransaction>:

// Do a SPI transaction - read or write (or write pattern)
void SPITransaction(ESPIBusState eSPIBusState,
					uint8_t *pu8Buffer,
					uint16_t u16ByteCount)
{
    3c06:	fb 01       	movw	r30, r22
	// If we're transmitting, start the transaction
	if (ESTATE_RX_DATA == eSPIBusState)
    3c08:	83 30       	cpi	r24, 0x03	; 3
    3c0a:	71 f4       	brne	.+28     	; 0x3c28 <SPITransaction+0x22>
    3c0c:	08 c0       	rjmp	.+16     	; 0x3c1e <SPITransaction+0x18>
	{
		while (u16ByteCount--)
		{
			// Clock out 0xff so we can receive the data
			SPDR = 0xff;
    3c0e:	2f ef       	ldi	r18, 0xFF	; 255
    3c10:	2e bd       	out	0x2e, r18	; 46

			// Wait for data to be available
			while (0 == (SPSR & (1 << SPIF)));
    3c12:	0d b4       	in	r0, 0x2d	; 45
    3c14:	07 fe       	sbrs	r0, 7
    3c16:	fd cf       	rjmp	.-6      	; 0x3c12 <SPITransaction+0xc>
			
			// Read the byte
			*pu8Buffer = SPDR;
    3c18:	2e b5       	in	r18, 0x2e	; 46
    3c1a:	21 93       	st	Z+, r18
					uint16_t u16ByteCount)
{
	// If we're transmitting, start the transaction
	if (ESTATE_RX_DATA == eSPIBusState)
	{
		while (u16ByteCount--)
    3c1c:	ac 01       	movw	r20, r24
    3c1e:	ca 01       	movw	r24, r20
    3c20:	01 97       	sbiw	r24, 0x01	; 1
    3c22:	45 2b       	or	r20, r21
    3c24:	a1 f7       	brne	.-24     	; 0x3c0e <SPITransaction+0x8>
    3c26:	08 95       	ret
			*pu8Buffer = SPDR;
			++pu8Buffer;
		}
	}
	else
	if (ESTATE_TX_DATA == eSPIBusState)
    3c28:	81 30       	cpi	r24, 0x01	; 1
    3c2a:	61 f4       	brne	.+24     	; 0x3c44 <SPITransaction+0x3e>
    3c2c:	06 c0       	rjmp	.+12     	; 0x3c3a <SPITransaction+0x34>
	{
		// Clock out whatever our data is in our queue
		while (u16ByteCount--)
		{
			SPDR = *pu8Buffer;
    3c2e:	21 91       	ld	r18, Z+
    3c30:	2e bd       	out	0x2e, r18	; 46
			++pu8Buffer;
			
			// Wait for the transmit to complete
			while (0 == (SPSR & (1 << SPIF)));
    3c32:	0d b4       	in	r0, 0x2d	; 45
    3c34:	07 fe       	sbrs	r0, 7
    3c36:	fd cf       	rjmp	.-6      	; 0x3c32 <SPITransaction+0x2c>
	}
	else
	if (ESTATE_TX_DATA == eSPIBusState)
	{
		// Clock out whatever our data is in our queue
		while (u16ByteCount--)
    3c38:	ac 01       	movw	r20, r24
    3c3a:	ca 01       	movw	r24, r20
    3c3c:	01 97       	sbiw	r24, 0x01	; 1
    3c3e:	45 2b       	or	r20, r21
    3c40:	b1 f7       	brne	.-20     	; 0x3c2e <SPITransaction+0x28>
    3c42:	08 95       	ret
			// Wait for the transmit to complete
			while (0 == (SPSR & (1 << SPIF)));
		}
	}
	else
	if (ESTATE_TX_PATTERN == eSPIBusState)
    3c44:	82 30       	cpi	r24, 0x02	; 2
    3c46:	51 f4       	brne	.+20     	; 0x3c5c <SPITransaction+0x56>
    3c48:	05 c0       	rjmp	.+10     	; 0x3c54 <SPITransaction+0x4e>
		// Clock out whatever our data is in our queue
		while (u16ByteCount--)
		{
			// This is OK - as the position where the pointer would normally
			// be is just the pattern (single byte)
			SPDR = (uint8_t) (pu8Buffer);
    3c4a:	ee bd       	out	0x2e, r30	; 46
		
			// Wait for the transmit to complete
			while (0 == (SPSR & (1 << SPIF)));
    3c4c:	0d b4       	in	r0, 0x2d	; 45
    3c4e:	07 fe       	sbrs	r0, 7
    3c50:	fd cf       	rjmp	.-6      	; 0x3c4c <SPITransaction+0x46>
	}
	else
	if (ESTATE_TX_PATTERN == eSPIBusState)
	{
		// Clock out whatever our data is in our queue
		while (u16ByteCount--)
    3c52:	ac 01       	movw	r20, r24
    3c54:	ca 01       	movw	r24, r20
    3c56:	01 97       	sbiw	r24, 0x01	; 1
    3c58:	45 2b       	or	r20, r21
    3c5a:	b9 f7       	brne	.-18     	; 0x3c4a <SPITransaction+0x44>
    3c5c:	08 95       	ret

Disassembly of section .text.SPISetBaudRate:

00002a52 <SPISetBaudRate>:
	{FCLKIO >> 7,	(1 << SPR1) | (0 << SPR0),	0},					// /128
};

// Sets the SPI baud rate and returns the actual baud rate selected
uint32_t SPISetBaudRate(uint32_t u32BaudRate)
{
    2a52:	cf 92       	push	r12
    2a54:	df 92       	push	r13
    2a56:	ef 92       	push	r14
    2a58:	ff 92       	push	r15
    2a5a:	6b 01       	movw	r12, r22
    2a5c:	7c 01       	movw	r14, r24
	uint8_t u8Loop;
	
	// Find the baud rate that's the closest
	for (u8Loop = 0; u8Loop < (sizeof(sg_sSPIBaudRates) / sizeof(sg_sSPIBaudRates[0])); u8Loop++)
    2a5e:	20 e0       	ldi	r18, 0x00	; 0
    2a60:	19 c0       	rjmp	.+50     	; 0x2a94 <SPISetBaudRate+0x42>
	{
		if (u32BaudRate >= sg_sSPIBaudRates[u8Loop].u32BaudRate)
    2a62:	82 2f       	mov	r24, r18
    2a64:	90 e0       	ldi	r25, 0x00	; 0
    2a66:	ac 01       	movw	r20, r24
    2a68:	44 0f       	add	r20, r20
    2a6a:	55 1f       	adc	r21, r21
    2a6c:	84 0f       	add	r24, r20
    2a6e:	95 1f       	adc	r25, r21
    2a70:	88 0f       	add	r24, r24
    2a72:	99 1f       	adc	r25, r25
    2a74:	09 2e       	mov	r0, r25
    2a76:	00 0c       	add	r0, r0
    2a78:	aa 0b       	sbc	r26, r26
    2a7a:	86 5f       	subi	r24, 0xF6	; 246
    2a7c:	9e 4f       	sbci	r25, 0xFE	; 254
    2a7e:	af 4f       	sbci	r26, 0xFF	; 255
    2a80:	fc 01       	movw	r30, r24
    2a82:	5a 2f       	mov	r21, r26
    2a84:	0e 94 53 24 	call	0x48a6	; 0x48a6 <__xload_4>
    2a88:	c6 16       	cp	r12, r22
    2a8a:	d7 06       	cpc	r13, r23
    2a8c:	e8 06       	cpc	r14, r24
    2a8e:	f9 06       	cpc	r15, r25
    2a90:	18 f4       	brcc	.+6      	; 0x2a98 <SPISetBaudRate+0x46>
uint32_t SPISetBaudRate(uint32_t u32BaudRate)
{
	uint8_t u8Loop;
	
	// Find the baud rate that's the closest
	for (u8Loop = 0; u8Loop < (sizeof(sg_sSPIBaudRates) / sizeof(sg_sSPIBaudRates[0])); u8Loop++)
    2a92:	2f 5f       	subi	r18, 0xFF	; 255
    2a94:	27 30       	cpi	r18, 0x07	; 7
    2a96:	28 f3       	brcs	.-54     	; 0x2a62 <SPISetBaudRate+0x10>
			break;
		}
	}

	// If we've hit the end, use the slowest speed
	if ((sizeof(sg_sSPIBaudRates) / sizeof(sg_sSPIBaudRates[0])) == u8Loop)
    2a98:	27 30       	cpi	r18, 0x07	; 7
    2a9a:	09 f4       	brne	.+2      	; 0x2a9e <SPISetBaudRate+0x4c>
	{
		u8Loop--;
    2a9c:	21 50       	subi	r18, 0x01	; 1
	}

	// Found one!
	SPCR = (SPCR & (uint8_t) ~((1 << SPR1) | (1 << SPR0))) | sg_sSPIBaudRates[u8Loop].u8SPCR;
    2a9e:	6c b5       	in	r22, 0x2c	; 44
    2aa0:	30 e0       	ldi	r19, 0x00	; 0
    2aa2:	a9 01       	movw	r20, r18
    2aa4:	44 0f       	add	r20, r20
    2aa6:	55 1f       	adc	r21, r21
    2aa8:	ca 01       	movw	r24, r20
    2aaa:	82 0f       	add	r24, r18
    2aac:	93 1f       	adc	r25, r19
    2aae:	88 0f       	add	r24, r24
    2ab0:	99 1f       	adc	r25, r25
    2ab2:	04 96       	adiw	r24, 0x04	; 4
    2ab4:	09 2e       	mov	r0, r25
    2ab6:	00 0c       	add	r0, r0
    2ab8:	aa 0b       	sbc	r26, r26
    2aba:	86 5f       	subi	r24, 0xF6	; 246
    2abc:	9e 4f       	sbci	r25, 0xFE	; 254
    2abe:	af 4f       	sbci	r26, 0xFF	; 255
    2ac0:	fc 01       	movw	r30, r24
    2ac2:	84 91       	lpm	r24, Z
    2ac4:	a7 fd       	sbrc	r26, 7
    2ac6:	80 81       	ld	r24, Z
    2ac8:	6c 7f       	andi	r22, 0xFC	; 252
    2aca:	86 2b       	or	r24, r22
    2acc:	8c bd       	out	0x2c, r24	; 44
	SPSR = (SPSR & (uint8_t) ~(1 << SPI2X)) | sg_sSPIBaudRates[u8Loop].u8SPSR;
    2ace:	6d b5       	in	r22, 0x2d	; 45
    2ad0:	ca 01       	movw	r24, r20
    2ad2:	82 0f       	add	r24, r18
    2ad4:	93 1f       	adc	r25, r19
    2ad6:	88 0f       	add	r24, r24
    2ad8:	99 1f       	adc	r25, r25
    2ada:	05 96       	adiw	r24, 0x05	; 5
    2adc:	09 2e       	mov	r0, r25
    2ade:	00 0c       	add	r0, r0
    2ae0:	aa 0b       	sbc	r26, r26
    2ae2:	86 5f       	subi	r24, 0xF6	; 246
    2ae4:	9e 4f       	sbci	r25, 0xFE	; 254
    2ae6:	af 4f       	sbci	r26, 0xFF	; 255
    2ae8:	fc 01       	movw	r30, r24
    2aea:	84 91       	lpm	r24, Z
    2aec:	a7 fd       	sbrc	r26, 7
    2aee:	80 81       	ld	r24, Z
    2af0:	6e 7f       	andi	r22, 0xFE	; 254
    2af2:	86 2b       	or	r24, r22
    2af4:	8d bd       	out	0x2d, r24	; 45
	return(sg_sSPIBaudRates[u8Loop].u32BaudRate);
    2af6:	24 0f       	add	r18, r20
    2af8:	35 1f       	adc	r19, r21
    2afa:	22 0f       	add	r18, r18
    2afc:	33 1f       	adc	r19, r19
    2afe:	03 2e       	mov	r0, r19
    2b00:	00 0c       	add	r0, r0
    2b02:	44 0b       	sbc	r20, r20
    2b04:	26 5f       	subi	r18, 0xF6	; 246
    2b06:	3e 4f       	sbci	r19, 0xFE	; 254
    2b08:	4f 4f       	sbci	r20, 0xFF	; 255
    2b0a:	f9 01       	movw	r30, r18
    2b0c:	54 2f       	mov	r21, r20
    2b0e:	0e 94 53 24 	call	0x48a6	; 0x48a6 <__xload_4>
}
    2b12:	ff 90       	pop	r15
    2b14:	ef 90       	pop	r14
    2b16:	df 90       	pop	r13
    2b18:	cf 90       	pop	r12
    2b1a:	08 95       	ret

Disassembly of section .text.SPIInit:

00004374 <SPIInit>:

void SPIInit(void)
{
	// Set MOSI and SCK to output
	DDR_SPI |= (1 << MOSI) | (1 << SCK);
    4374:	84 b1       	in	r24, 0x04	; 4
    4376:	82 68       	ori	r24, 0x82	; 130
    4378:	84 b9       	out	0x04, r24	; 4
	DDR_SPI &= (uint8_t) ~(1 << MISO);
    437a:	84 b1       	in	r24, 0x04	; 4
    437c:	8e 7f       	andi	r24, 0xFE	; 254
    437e:	84 b9       	out	0x04, r24	; 4
	
	// MISO As input (need our pullup)
	PORT_SPI |= (1 << MISO);
    4380:	85 b1       	in	r24, 0x05	; 5
    4382:	81 60       	ori	r24, 0x01	; 1
    4384:	85 b9       	out	0x05, r24	; 5
	
	// Enable SPI engine, master only, and clock to fosc/128 and SPI mode 0 (which is what SD wants)
	SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR1) | (1 << SPR0);
    4386:	83 e5       	ldi	r24, 0x53	; 83
    4388:	8c bd       	out	0x2c, r24	; 44
	
	// Zero out SPSR (all zeroes)
	SPSR = 0;
    438a:	1d bc       	out	0x2d, r1	; 45
	
	// Zero out SPIPS so the SPI IP is connected to MISO, MOSI, SCK, and SS
	MCUCR &= (uint8_t) ~(1 << SPIPS);
    438c:	85 b7       	in	r24, 0x35	; 53
    438e:	8f 77       	andi	r24, 0x7F	; 127
    4390:	85 bf       	out	0x35, r24	; 53

	// Set to something slow/compatible
	(void) SPISetBaudRate(400000);
    4392:	60 e8       	ldi	r22, 0x80	; 128
    4394:	7a e1       	ldi	r23, 0x1A	; 26
    4396:	86 e0       	ldi	r24, 0x06	; 6
    4398:	90 e0       	ldi	r25, 0x00	; 0
    439a:	0e 94 29 15 	call	0x2a52	; 0x2a52 <SPISetBaudRate>
    439e:	08 95       	ret

Disassembly of section .text.readGlobalState:

00003fca <readGlobalState>:

static GlobalState gState;
static uint32_t currentSector;
static uint8_t __attribute__((aligned(4))) frameBuffer[FRAME_BUFFER_SIZE];  // Enlarged to handle full frame

static bool readGlobalState(void) {
    3fca:	0f 93       	push	r16
    3fcc:	1f 93       	push	r17
    3fce:	cf 93       	push	r28
	if (!SDRead(0, frameBuffer, 1)) {
    3fd0:	01 e0       	ldi	r16, 0x01	; 1
    3fd2:	10 e0       	ldi	r17, 0x00	; 0
    3fd4:	20 e0       	ldi	r18, 0x00	; 0
    3fd6:	30 e0       	ldi	r19, 0x00	; 0
    3fd8:	48 e2       	ldi	r20, 0x28	; 40
    3fda:	53 e0       	ldi	r21, 0x03	; 3
    3fdc:	60 e0       	ldi	r22, 0x00	; 0
    3fde:	70 e0       	ldi	r23, 0x00	; 0
    3fe0:	cb 01       	movw	r24, r22
    3fe2:	0e 94 bd 14 	call	0x297a	; 0x297a <SDRead>
    3fe6:	c8 2f       	mov	r28, r24
    3fe8:	88 23       	and	r24, r24
    3fea:	49 f0       	breq	.+18     	; 0x3ffe <readGlobalState+0x34>
		return false;
	}
	memcpy(&gState, frameBuffer, sizeof(GlobalState));
    3fec:	48 e2       	ldi	r20, 0x28	; 40
    3fee:	53 e0       	ldi	r21, 0x03	; 3
    3ff0:	60 e8       	ldi	r22, 0x80	; 128
    3ff2:	28 ed       	ldi	r18, 0xD8	; 216
    3ff4:	31 e0       	ldi	r19, 0x01	; 1
    3ff6:	88 e2       	ldi	r24, 0x28	; 40
    3ff8:	95 e0       	ldi	r25, 0x05	; 5
    3ffa:	0e 94 30 21 	call	0x4260	; 0x4260 <memcpy>
	// TODO: Implement checksum verification
	return true;
}
    3ffe:	8c 2f       	mov	r24, r28
    4000:	cf 91       	pop	r28
    4002:	1f 91       	pop	r17
    4004:	0f 91       	pop	r16
    4006:	08 95       	ret

Disassembly of section .text.writeGlobalState:

0000422e <writeGlobalState>:

static bool writeGlobalState(void) {
    422e:	0f 93       	push	r16
    4230:	1f 93       	push	r17
	memcpy(frameBuffer, &gState, sizeof(GlobalState));
    4232:	48 e2       	ldi	r20, 0x28	; 40
    4234:	55 e0       	ldi	r21, 0x05	; 5
    4236:	60 e8       	ldi	r22, 0x80	; 128
    4238:	28 ed       	ldi	r18, 0xD8	; 216
    423a:	31 e0       	ldi	r19, 0x01	; 1
    423c:	88 e2       	ldi	r24, 0x28	; 40
    423e:	93 e0       	ldi	r25, 0x03	; 3
    4240:	0e 94 30 21 	call	0x4260	; 0x4260 <memcpy>
	// TODO: Calculate and update checksum
	return SDWrite(0, frameBuffer, 1);
    4244:	01 e0       	ldi	r16, 0x01	; 1
    4246:	10 e0       	ldi	r17, 0x00	; 0
    4248:	20 e0       	ldi	r18, 0x00	; 0
    424a:	30 e0       	ldi	r19, 0x00	; 0
    424c:	48 e2       	ldi	r20, 0x28	; 40
    424e:	53 e0       	ldi	r21, 0x03	; 3
    4250:	60 e0       	ldi	r22, 0x00	; 0
    4252:	70 e0       	ldi	r23, 0x00	; 0
    4254:	cb 01       	movw	r24, r22
    4256:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <SDWrite>
}
    425a:	1f 91       	pop	r17
    425c:	0f 91       	pop	r16
    425e:	08 95       	ret

Disassembly of section .text.updateSessionMap:

0000289e <updateSessionMap>:

static bool updateSessionMap(void) {
    289e:	8f 92       	push	r8
    28a0:	9f 92       	push	r9
    28a2:	af 92       	push	r10
    28a4:	bf 92       	push	r11
    28a6:	cf 92       	push	r12
    28a8:	df 92       	push	r13
    28aa:	ef 92       	push	r14
    28ac:	ff 92       	push	r15
    28ae:	0f 93       	push	r16
    28b0:	1f 93       	push	r17
	uint32_t mapSector = gState.activeSessionMapSector;
    28b2:	e8 e2       	ldi	r30, 0x28	; 40
    28b4:	f5 e0       	ldi	r31, 0x05	; 5
    28b6:	c4 8c       	ldd	r12, Z+28	; 0x1c
    28b8:	d5 8c       	ldd	r13, Z+29	; 0x1d
    28ba:	e6 8c       	ldd	r14, Z+30	; 0x1e
    28bc:	f7 8c       	ldd	r15, Z+31	; 0x1f
	uint32_t mapOffset = gState.activeSessionMapOffset;
    28be:	80 a0       	ldd	r8, Z+32	; 0x20
    28c0:	91 a0       	ldd	r9, Z+33	; 0x21
    28c2:	a2 a0       	ldd	r10, Z+34	; 0x22
    28c4:	b3 a0       	ldd	r11, Z+35	; 0x23

	if (!SDRead(mapSector, frameBuffer, 1)) {
    28c6:	01 e0       	ldi	r16, 0x01	; 1
    28c8:	10 e0       	ldi	r17, 0x00	; 0
    28ca:	20 e0       	ldi	r18, 0x00	; 0
    28cc:	30 e0       	ldi	r19, 0x00	; 0
    28ce:	48 e2       	ldi	r20, 0x28	; 40
    28d0:	53 e0       	ldi	r21, 0x03	; 3
    28d2:	c7 01       	movw	r24, r14
    28d4:	b6 01       	movw	r22, r12
    28d6:	0e 94 bd 14 	call	0x297a	; 0x297a <SDRead>
    28da:	88 23       	and	r24, r24
    28dc:	09 f4       	brne	.+2      	; 0x28e0 <updateSessionMap+0x42>
    28de:	42 c0       	rjmp	.+132    	; 0x2964 <updateSessionMap+0xc6>
		return false;
	}

	// Update session map
	*(uint64_t*)(frameBuffer + mapOffset) = gState.newSessionSector;
    28e0:	f4 01       	movw	r30, r8
    28e2:	e8 5d       	subi	r30, 0xD8	; 216
    28e4:	fc 4f       	sbci	r31, 0xFC	; 252
    28e6:	00 91 40 05 	lds	r16, 0x0540	; 0x800540 <gState+0x18>
    28ea:	10 91 41 05 	lds	r17, 0x0541	; 0x800541 <gState+0x19>
    28ee:	20 91 42 05 	lds	r18, 0x0542	; 0x800542 <gState+0x1a>
    28f2:	30 91 43 05 	lds	r19, 0x0543	; 0x800543 <gState+0x1b>
    28f6:	00 83       	st	Z, r16
    28f8:	11 83       	std	Z+1, r17	; 0x01
    28fa:	22 83       	std	Z+2, r18	; 0x02
    28fc:	33 83       	std	Z+3, r19	; 0x03
    28fe:	14 82       	std	Z+4, r1	; 0x04
    2900:	15 82       	std	Z+5, r1	; 0x05
    2902:	16 82       	std	Z+6, r1	; 0x06
    2904:	17 82       	std	Z+7, r1	; 0x07

	if (!SDWrite(mapSector, frameBuffer, 1)) {
    2906:	01 e0       	ldi	r16, 0x01	; 1
    2908:	10 e0       	ldi	r17, 0x00	; 0
    290a:	20 e0       	ldi	r18, 0x00	; 0
    290c:	30 e0       	ldi	r19, 0x00	; 0
    290e:	48 e2       	ldi	r20, 0x28	; 40
    2910:	53 e0       	ldi	r21, 0x03	; 3
    2912:	c7 01       	movw	r24, r14
    2914:	b6 01       	movw	r22, r12
    2916:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <SDWrite>
    291a:	88 23       	and	r24, r24
    291c:	19 f1       	breq	.+70     	; 0x2964 <updateSessionMap+0xc6>
		return false;
	}

	// Update map pointers
	gState.activeSessionMapOffset += sizeof(uint64_t);
    291e:	e8 e2       	ldi	r30, 0x28	; 40
    2920:	f5 e0       	ldi	r31, 0x05	; 5
    2922:	80 a1       	ldd	r24, Z+32	; 0x20
    2924:	91 a1       	ldd	r25, Z+33	; 0x21
    2926:	a2 a1       	ldd	r26, Z+34	; 0x22
    2928:	b3 a1       	ldd	r27, Z+35	; 0x23
    292a:	08 96       	adiw	r24, 0x08	; 8
    292c:	a1 1d       	adc	r26, r1
    292e:	b1 1d       	adc	r27, r1
    2930:	80 a3       	std	Z+32, r24	; 0x20
    2932:	91 a3       	std	Z+33, r25	; 0x21
    2934:	a2 a3       	std	Z+34, r26	; 0x22
    2936:	b3 a3       	std	Z+35, r27	; 0x23
	if (gState.activeSessionMapOffset >= SECTOR_SIZE) {
    2938:	81 15       	cp	r24, r1
    293a:	92 40       	sbci	r25, 0x02	; 2
    293c:	a1 05       	cpc	r26, r1
    293e:	b1 05       	cpc	r27, r1
    2940:	78 f0       	brcs	.+30     	; 0x2960 <updateSessionMap+0xc2>
		gState.activeSessionMapSector++;
    2942:	84 8d       	ldd	r24, Z+28	; 0x1c
    2944:	95 8d       	ldd	r25, Z+29	; 0x1d
    2946:	a6 8d       	ldd	r26, Z+30	; 0x1e
    2948:	b7 8d       	ldd	r27, Z+31	; 0x1f
    294a:	01 96       	adiw	r24, 0x01	; 1
    294c:	a1 1d       	adc	r26, r1
    294e:	b1 1d       	adc	r27, r1
    2950:	84 8f       	std	Z+28, r24	; 0x1c
    2952:	95 8f       	std	Z+29, r25	; 0x1d
    2954:	a6 8f       	std	Z+30, r26	; 0x1e
    2956:	b7 8f       	std	Z+31, r27	; 0x1f
		gState.activeSessionMapOffset = 0;
    2958:	10 a2       	std	Z+32, r1	; 0x20
    295a:	11 a2       	std	Z+33, r1	; 0x21
    295c:	12 a2       	std	Z+34, r1	; 0x22
    295e:	13 a2       	std	Z+35, r1	; 0x23
	}

	return writeGlobalState();
    2960:	0e 94 17 21 	call	0x422e	; 0x422e <writeGlobalState>
}
    2964:	1f 91       	pop	r17
    2966:	0f 91       	pop	r16
    2968:	ff 90       	pop	r15
    296a:	ef 90       	pop	r14
    296c:	df 90       	pop	r13
    296e:	cf 90       	pop	r12
    2970:	bf 90       	pop	r11
    2972:	af 90       	pop	r10
    2974:	9f 90       	pop	r9
    2976:	8f 90       	pop	r8
    2978:	08 95       	ret

Disassembly of section .text.STORE_Init:

00003556 <STORE_Init>:

bool STORE_Init(void) {
    3556:	cf 93       	push	r28
	if (!SDInit()) {
    3558:	0e 94 65 0e 	call	0x1cca	; 0x1cca <SDInit>
    355c:	c8 2f       	mov	r28, r24
    355e:	88 23       	and	r24, r24
    3560:	c1 f1       	breq	.+112    	; 0x35d2 <STORE_Init+0x7c>
		return false;
	}

	if (!readGlobalState()) {
    3562:	0e 94 e5 1f 	call	0x3fca	; 0x3fca <readGlobalState>
    3566:	81 11       	cpse	r24, r1
    3568:	22 c0       	rjmp	.+68     	; 0x35ae <STORE_Init+0x58>
		// Initialize global state if it doesn't exist
		memset(&gState, 0, sizeof(GlobalState));
    356a:	e8 e2       	ldi	r30, 0x28	; 40
    356c:	f5 e0       	ldi	r31, 0x05	; 5
    356e:	88 ed       	ldi	r24, 0xD8	; 216
    3570:	91 e0       	ldi	r25, 0x01	; 1
    3572:	df 01       	movw	r26, r30
    3574:	9c 01       	movw	r18, r24
    3576:	1d 92       	st	X+, r1
    3578:	21 50       	subi	r18, 0x01	; 1
    357a:	30 40       	sbci	r19, 0x00	; 0
    357c:	e1 f7       	brne	.-8      	; 0x3576 <STORE_Init+0x20>
		gState.firstSessionSector = 1;
    357e:	81 e0       	ldi	r24, 0x01	; 1
    3580:	90 e0       	ldi	r25, 0x00	; 0
    3582:	a0 e0       	ldi	r26, 0x00	; 0
    3584:	b0 e0       	ldi	r27, 0x00	; 0
    3586:	84 87       	std	Z+12, r24	; 0x0c
    3588:	95 87       	std	Z+13, r25	; 0x0d
    358a:	a6 87       	std	Z+14, r26	; 0x0e
    358c:	b7 87       	std	Z+15, r27	; 0x0f
		gState.newSessionSector = 1;
    358e:	80 8f       	std	Z+24, r24	; 0x18
    3590:	91 8f       	std	Z+25, r25	; 0x19
    3592:	a2 8f       	std	Z+26, r26	; 0x1a
    3594:	b3 8f       	std	Z+27, r27	; 0x1b
		gState.activeSessionMapSector = 4;
    3596:	84 e0       	ldi	r24, 0x04	; 4
    3598:	90 e0       	ldi	r25, 0x00	; 0
    359a:	a0 e0       	ldi	r26, 0x00	; 0
    359c:	b0 e0       	ldi	r27, 0x00	; 0
    359e:	84 8f       	std	Z+28, r24	; 0x1c
    35a0:	95 8f       	std	Z+29, r25	; 0x1d
    35a2:	a6 8f       	std	Z+30, r26	; 0x1e
    35a4:	b7 8f       	std	Z+31, r27	; 0x1f
		gState.activeSessionMapOffset = 0;
		// TODO: Initialize other fields as needed
		if (!writeGlobalState()) {
    35a6:	0e 94 17 21 	call	0x422e	; 0x422e <writeGlobalState>
    35aa:	88 23       	and	r24, r24
    35ac:	89 f0       	breq	.+34     	; 0x35d0 <STORE_Init+0x7a>
			return false;
		}
	}

	currentSector = gState.newSessionSector;
    35ae:	80 91 40 05 	lds	r24, 0x0540	; 0x800540 <gState+0x18>
    35b2:	90 91 41 05 	lds	r25, 0x0541	; 0x800541 <gState+0x19>
    35b6:	a0 91 42 05 	lds	r26, 0x0542	; 0x800542 <gState+0x1a>
    35ba:	b0 91 43 05 	lds	r27, 0x0543	; 0x800543 <gState+0x1b>
    35be:	80 93 54 07 	sts	0x0754, r24	; 0x800754 <currentSector>
    35c2:	90 93 55 07 	sts	0x0755, r25	; 0x800755 <currentSector+0x1>
    35c6:	a0 93 56 07 	sts	0x0756, r26	; 0x800756 <currentSector+0x2>
    35ca:	b0 93 57 07 	sts	0x0757, r27	; 0x800757 <currentSector+0x3>
	return true;
    35ce:	01 c0       	rjmp	.+2      	; 0x35d2 <STORE_Init+0x7c>
		gState.newSessionSector = 1;
		gState.activeSessionMapSector = 4;
		gState.activeSessionMapOffset = 0;
		// TODO: Initialize other fields as needed
		if (!writeGlobalState()) {
			return false;
    35d0:	c8 2f       	mov	r28, r24
		}
	}

	currentSector = gState.newSessionSector;
	return true;
}
    35d2:	8c 2f       	mov	r24, r28
    35d4:	cf 91       	pop	r28
    35d6:	08 95       	ret

Disassembly of section .text.STORE_WriteFrame:

0000250c <STORE_WriteFrame>:

bool STORE_WriteFrame(volatile FrameData* frame) {
    250c:	8f 92       	push	r8
    250e:	9f 92       	push	r9
    2510:	af 92       	push	r10
    2512:	bf 92       	push	r11
    2514:	cf 92       	push	r12
    2516:	df 92       	push	r13
    2518:	ef 92       	push	r14
    251a:	ff 92       	push	r15
    251c:	0f 93       	push	r16
    251e:	1f 93       	push	r17
    2520:	cf 93       	push	r28
    2522:	df 93       	push	r29
	uint32_t bytesWritten = 0;
	uint32_t currentOffset = 0;
	uint32_t sectorsToWrite;
	
	// Verify frame size
	if(frame->frameBytes > FRAME_BUFFER_SIZE) {
    2524:	fc 01       	movw	r30, r24
    2526:	24 81       	ldd	r18, Z+4	; 0x04
    2528:	35 81       	ldd	r19, Z+5	; 0x05
    252a:	21 30       	cpi	r18, 0x01	; 1
    252c:	32 40       	sbci	r19, 0x02	; 2
    252e:	08 f0       	brcs	.+2      	; 0x2532 <STORE_WriteFrame+0x26>
    2530:	5a c0       	rjmp	.+180    	; 0x25e6 <STORE_WriteFrame+0xda>
    2532:	ec 01       	movw	r28, r24
		return false;
	}
	
	// Copy frame data to our buffer
	memcpy(frameBuffer, (const void*)frame, frame->frameBytes);
    2534:	2c 81       	ldd	r18, Y+4	; 0x04
    2536:	3d 81       	ldd	r19, Y+5	; 0x05
    2538:	ac 01       	movw	r20, r24
    253a:	60 e8       	ldi	r22, 0x80	; 128
    253c:	88 e2       	ldi	r24, 0x28	; 40
    253e:	93 e0       	ldi	r25, 0x03	; 3
    2540:	0e 94 30 21 	call	0x4260	; 0x4260 <memcpy>
	
	// Zero out any remaining buffer space in last sector
	if(frame->frameBytes < FRAME_BUFFER_SIZE) {
    2544:	8c 81       	ldd	r24, Y+4	; 0x04
    2546:	9d 81       	ldd	r25, Y+5	; 0x05
    2548:	81 15       	cp	r24, r1
    254a:	92 40       	sbci	r25, 0x02	; 2
    254c:	70 f4       	brcc	.+28     	; 0x256a <STORE_WriteFrame+0x5e>
		memset(frameBuffer + frame->frameBytes, 0, FRAME_BUFFER_SIZE - frame->frameBytes);
    254e:	2c 81       	ldd	r18, Y+4	; 0x04
    2550:	3d 81       	ldd	r19, Y+5	; 0x05
    2552:	8c 81       	ldd	r24, Y+4	; 0x04
    2554:	9d 81       	ldd	r25, Y+5	; 0x05
    2556:	40 e0       	ldi	r20, 0x00	; 0
    2558:	52 e0       	ldi	r21, 0x02	; 2
    255a:	42 1b       	sub	r20, r18
    255c:	53 0b       	sbc	r21, r19
    255e:	60 e0       	ldi	r22, 0x00	; 0
    2560:	70 e0       	ldi	r23, 0x00	; 0
    2562:	88 5d       	subi	r24, 0xD8	; 216
    2564:	9c 4f       	sbci	r25, 0xFC	; 252
    2566:	0e 94 bf 24 	call	0x497e	; 0x497e <memset>

	currentSector = gState.newSessionSector;
	return true;
}

bool STORE_WriteFrame(volatile FrameData* frame) {
    256a:	c1 2c       	mov	r12, r1
    256c:	d1 2c       	mov	r13, r1
    256e:	76 01       	movw	r14, r12
    2570:	c3 94       	inc	r12
    2572:	81 2c       	mov	r8, r1
    2574:	91 2c       	mov	r9, r1
    2576:	54 01       	movw	r10, r8
    2578:	2f c0       	rjmp	.+94     	; 0x25d8 <STORE_WriteFrame+0xcc>
	// Calculate how many complete sectors we need to write
	sectorsToWrite = SECTORS_PER_FRAME;
	
	// Write all sectors
	while(sectorsToWrite > 0) {
		if(!SDWrite(currentSector, frameBuffer + currentOffset, 1)) {
    257a:	60 91 54 07 	lds	r22, 0x0754	; 0x800754 <currentSector>
    257e:	70 91 55 07 	lds	r23, 0x0755	; 0x800755 <currentSector+0x1>
    2582:	80 91 56 07 	lds	r24, 0x0756	; 0x800756 <currentSector+0x2>
    2586:	90 91 57 07 	lds	r25, 0x0757	; 0x800757 <currentSector+0x3>
    258a:	01 e0       	ldi	r16, 0x01	; 1
    258c:	10 e0       	ldi	r17, 0x00	; 0
    258e:	20 e0       	ldi	r18, 0x00	; 0
    2590:	30 e0       	ldi	r19, 0x00	; 0
    2592:	a4 01       	movw	r20, r8
    2594:	48 5d       	subi	r20, 0xD8	; 216
    2596:	5c 4f       	sbci	r21, 0xFC	; 252
    2598:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <SDWrite>
    259c:	88 23       	and	r24, r24
    259e:	21 f1       	breq	.+72     	; 0x25e8 <STORE_WriteFrame+0xdc>
			return false;
		}
		currentSector++;
    25a0:	80 91 54 07 	lds	r24, 0x0754	; 0x800754 <currentSector>
    25a4:	90 91 55 07 	lds	r25, 0x0755	; 0x800755 <currentSector+0x1>
    25a8:	a0 91 56 07 	lds	r26, 0x0756	; 0x800756 <currentSector+0x2>
    25ac:	b0 91 57 07 	lds	r27, 0x0757	; 0x800757 <currentSector+0x3>
    25b0:	01 96       	adiw	r24, 0x01	; 1
    25b2:	a1 1d       	adc	r26, r1
    25b4:	b1 1d       	adc	r27, r1
    25b6:	80 93 54 07 	sts	0x0754, r24	; 0x800754 <currentSector>
    25ba:	90 93 55 07 	sts	0x0755, r25	; 0x800755 <currentSector+0x1>
    25be:	a0 93 56 07 	sts	0x0756, r26	; 0x800756 <currentSector+0x2>
    25c2:	b0 93 57 07 	sts	0x0757, r27	; 0x800757 <currentSector+0x3>
		currentOffset += SECTOR_SIZE;
    25c6:	42 e0       	ldi	r20, 0x02	; 2
    25c8:	94 0e       	add	r9, r20
    25ca:	a1 1c       	adc	r10, r1
    25cc:	b1 1c       	adc	r11, r1
		sectorsToWrite--;
    25ce:	81 e0       	ldi	r24, 0x01	; 1
    25d0:	c8 1a       	sub	r12, r24
    25d2:	d1 08       	sbc	r13, r1
    25d4:	e1 08       	sbc	r14, r1
    25d6:	f1 08       	sbc	r15, r1
	
	// Calculate how many complete sectors we need to write
	sectorsToWrite = SECTORS_PER_FRAME;
	
	// Write all sectors
	while(sectorsToWrite > 0) {
    25d8:	c1 14       	cp	r12, r1
    25da:	d1 04       	cpc	r13, r1
    25dc:	e1 04       	cpc	r14, r1
    25de:	f1 04       	cpc	r15, r1
    25e0:	61 f6       	brne	.-104    	; 0x257a <STORE_WriteFrame+0x6e>
		currentSector++;
		currentOffset += SECTOR_SIZE;
		sectorsToWrite--;
	}
	
	return true;
    25e2:	81 e0       	ldi	r24, 0x01	; 1
    25e4:	01 c0       	rjmp	.+2      	; 0x25e8 <STORE_WriteFrame+0xdc>
	uint32_t currentOffset = 0;
	uint32_t sectorsToWrite;
	
	// Verify frame size
	if(frame->frameBytes > FRAME_BUFFER_SIZE) {
		return false;
    25e6:	80 e0       	ldi	r24, 0x00	; 0
		currentOffset += SECTOR_SIZE;
		sectorsToWrite--;
	}
	
	return true;
}
    25e8:	df 91       	pop	r29
    25ea:	cf 91       	pop	r28
    25ec:	1f 91       	pop	r17
    25ee:	0f 91       	pop	r16
    25f0:	ff 90       	pop	r15
    25f2:	ef 90       	pop	r14
    25f4:	df 90       	pop	r13
    25f6:	cf 90       	pop	r12
    25f8:	bf 90       	pop	r11
    25fa:	af 90       	pop	r10
    25fc:	9f 90       	pop	r9
    25fe:	8f 90       	pop	r8
    2600:	08 95       	ret

Disassembly of section .text.STORE_StartNewSession:

000040ba <STORE_StartNewSession>:

bool STORE_StartNewSession(void) {
	// Update session info
	gState.sessionCount++;
    40ba:	e8 e2       	ldi	r30, 0x28	; 40
    40bc:	f5 e0       	ldi	r31, 0x05	; 5
    40be:	84 89       	ldd	r24, Z+20	; 0x14
    40c0:	95 89       	ldd	r25, Z+21	; 0x15
    40c2:	a6 89       	ldd	r26, Z+22	; 0x16
    40c4:	b7 89       	ldd	r27, Z+23	; 0x17
    40c6:	01 96       	adiw	r24, 0x01	; 1
    40c8:	a1 1d       	adc	r26, r1
    40ca:	b1 1d       	adc	r27, r1
    40cc:	84 8b       	std	Z+20, r24	; 0x14
    40ce:	95 8b       	std	Z+21, r25	; 0x15
    40d0:	a6 8b       	std	Z+22, r26	; 0x16
    40d2:	b7 8b       	std	Z+23, r27	; 0x17
	gState.newSessionSector = currentSector;
    40d4:	80 91 54 07 	lds	r24, 0x0754	; 0x800754 <currentSector>
    40d8:	90 91 55 07 	lds	r25, 0x0755	; 0x800755 <currentSector+0x1>
    40dc:	a0 91 56 07 	lds	r26, 0x0756	; 0x800756 <currentSector+0x2>
    40e0:	b0 91 57 07 	lds	r27, 0x0757	; 0x800757 <currentSector+0x3>
    40e4:	80 8f       	std	Z+24, r24	; 0x18
    40e6:	91 8f       	std	Z+25, r25	; 0x19
    40e8:	a2 8f       	std	Z+26, r26	; 0x1a
    40ea:	b3 8f       	std	Z+27, r27	; 0x1b
	// Ensure sector alignment for new sessions
	if(currentSector % SECTORS_PER_FRAME != 0) {
		currentSector += SECTORS_PER_FRAME - (currentSector % SECTORS_PER_FRAME);
	}
	
	return updateSessionMap();
    40ec:	0e 94 4f 14 	call	0x289e	; 0x289e <updateSessionMap>
}
    40f0:	08 95       	ret

Disassembly of section .text.STORE_EndSession:

000043a0 <STORE_EndSession>:
	// Ensure we end on a frame boundary
	if(currentSector % SECTORS_PER_FRAME != 0) {
		currentSector += SECTORS_PER_FRAME - (currentSector % SECTORS_PER_FRAME);
	}
	
	gState.lastSessionSector = currentSector - 1;
    43a0:	80 91 54 07 	lds	r24, 0x0754	; 0x800754 <currentSector>
    43a4:	90 91 55 07 	lds	r25, 0x0755	; 0x800755 <currentSector+0x1>
    43a8:	a0 91 56 07 	lds	r26, 0x0756	; 0x800756 <currentSector+0x2>
    43ac:	b0 91 57 07 	lds	r27, 0x0757	; 0x800757 <currentSector+0x3>
    43b0:	01 97       	sbiw	r24, 0x01	; 1
    43b2:	a1 09       	sbc	r26, r1
    43b4:	b1 09       	sbc	r27, r1
    43b6:	80 93 38 05 	sts	0x0538, r24	; 0x800538 <gState+0x10>
    43ba:	90 93 39 05 	sts	0x0539, r25	; 0x800539 <gState+0x11>
    43be:	a0 93 3a 05 	sts	0x053A, r26	; 0x80053a <gState+0x12>
    43c2:	b0 93 3b 05 	sts	0x053B, r27	; 0x80053b <gState+0x13>
	return writeGlobalState();
    43c6:	0e 94 17 21 	call	0x422e	; 0x422e <writeGlobalState>
}
    43ca:	08 95       	ret

Disassembly of section .text.vUARTtxDataAvailable:

000047b6 <vUARTtxDataAvailable>:
#endif

bool vUARTIsBusy(void) {
	return ((sg_etxState != ESTATE_IDLE) ||
		(sg_eCell_mc_rxState != ESTATE_IDLE));
}
    47b6:	80 91 73 07 	lds	r24, 0x0773	; 0x800773 <sg_u8SendIndex>
    47ba:	81 11       	cpse	r24, r1
    47bc:	06 c0       	rjmp	.+12     	; 0x47ca <vUARTtxDataAvailable+0x14>
    47be:	0e 94 23 22 	call	0x4446	; 0x4446 <PlatformGetSendData>
    47c2:	90 93 5d 07 	sts	0x075D, r25	; 0x80075d <sg_u8SendData+0x1>
    47c6:	80 93 5c 07 	sts	0x075C, r24	; 0x80075c <sg_u8SendData>
    47ca:	80 91 73 07 	lds	r24, 0x0773	; 0x800773 <sg_u8SendIndex>
    47ce:	81 11       	cpse	r24, r1
    47d0:	02 c0       	rjmp	.+4      	; 0x47d6 <vUARTtxDataAvailable+0x20>
    47d2:	81 e0       	ldi	r24, 0x01	; 1
    47d4:	08 95       	ret
    47d6:	80 e0       	ldi	r24, 0x00	; 0
    47d8:	08 95       	ret

Disassembly of section .text.vUARTtxDataGet:

00003ef6 <vUARTtxDataGet>:
    3ef6:	80 91 73 07 	lds	r24, 0x0773	; 0x800773 <sg_u8SendIndex>
    3efa:	81 11       	cpse	r24, r1
    3efc:	10 c0       	rjmp	.+32     	; 0x3f1e <vUARTtxDataGet+0x28>
    3efe:	81 e0       	ldi	r24, 0x01	; 1
    3f00:	0e 94 23 22 	call	0x4446	; 0x4446 <PlatformGetSendData>
    3f04:	ec e5       	ldi	r30, 0x5C	; 92
    3f06:	f7 e0       	ldi	r31, 0x07	; 7
    3f08:	90 83       	st	Z, r25
    3f0a:	81 83       	std	Z+1, r24	; 0x01
    3f0c:	80 81       	ld	r24, Z
    3f0e:	88 23       	and	r24, r24
    3f10:	24 f4       	brge	.+8      	; 0x3f1a <vUARTtxDataGet+0x24>
    3f12:	81 e0       	ldi	r24, 0x01	; 1
    3f14:	80 93 75 07 	sts	0x0775, r24	; 0x800775 <sg_bCellReportsReuested>
    3f18:	02 c0       	rjmp	.+4      	; 0x3f1e <vUARTtxDataGet+0x28>
    3f1a:	10 92 75 07 	sts	0x0775, r1	; 0x800775 <sg_bCellReportsReuested>
    3f1e:	e0 91 73 07 	lds	r30, 0x0773	; 0x800773 <sg_u8SendIndex>
    3f22:	f0 e0       	ldi	r31, 0x00	; 0
    3f24:	e4 5a       	subi	r30, 0xA4	; 164
    3f26:	f8 4f       	sbci	r31, 0xF8	; 248
    3f28:	80 81       	ld	r24, Z
    3f2a:	90 91 73 07 	lds	r25, 0x0773	; 0x800773 <sg_u8SendIndex>
    3f2e:	9f 5f       	subi	r25, 0xFF	; 255
    3f30:	90 93 73 07 	sts	0x0773, r25	; 0x800773 <sg_u8SendIndex>
    3f34:	90 91 73 07 	lds	r25, 0x0773	; 0x800773 <sg_u8SendIndex>
    3f38:	92 30       	cpi	r25, 0x02	; 2
    3f3a:	10 f0       	brcs	.+4      	; 0x3f40 <vUARTtxDataGet+0x4a>
    3f3c:	10 92 73 07 	sts	0x0773, r1	; 0x800773 <sg_u8SendIndex>
    3f40:	08 95       	ret

Disassembly of section .text.vUARTRXReset:

00004a66 <vUARTRXReset>:

// Called when we have a string timeout or need to reset the state machine
// for the MC RX side of things
void vUARTRXReset(void)
{
	sg_eCell_mc_rxState = ESTATE_IDLE;
    4a66:	10 92 7c 07 	sts	0x077C, r1	; 0x80077c <sg_eCell_mc_rxState>
	vUARTRXStart();
    4a6a:	0e 94 81 24 	call	0x4902	; 0x4902 <vUARTRXStart>
    4a6e:	08 95       	ret

Disassembly of section .text.vUARTStarttx:

00003cb4 <vUARTStarttx>:
#endif

bool vUARTIsBusy(void) {
	return ((sg_etxState != ESTATE_IDLE) ||
		(sg_eCell_mc_rxState != ESTATE_IDLE));
}
    3cb4:	80 91 76 07 	lds	r24, 0x0776	; 0x800776 <sg_etxState>
    3cb8:	81 11       	cpse	r24, r1
    3cba:	23 c0       	rjmp	.+70     	; 0x3d02 <vUARTStarttx+0x4e>
    3cbc:	80 91 7c 07 	lds	r24, 0x077C	; 0x80077c <sg_eCell_mc_rxState>
    3cc0:	81 11       	cpse	r24, r1
    3cc2:	21 c0       	rjmp	.+66     	; 0x3d06 <vUARTStarttx+0x52>
    3cc4:	82 e0       	ldi	r24, 0x02	; 2
    3cc6:	80 93 76 07 	sts	0x0776, r24	; 0x800776 <sg_etxState>
    3cca:	10 92 73 07 	sts	0x0773, r1	; 0x800773 <sg_u8SendIndex>
    3cce:	10 92 79 07 	sts	0x0779, r1	; 0x800779 <sg_u8txBitCount>
    3cd2:	81 e0       	ldi	r24, 0x01	; 1
    3cd4:	80 93 74 07 	sts	0x0774, r24	; 0x800774 <sg_bMCTxNextBit>
    3cd8:	86 b5       	in	r24, 0x26	; 38
    3cda:	8e 5c       	subi	r24, 0xCE	; 206
    3cdc:	87 bd       	out	0x27, r24	; 39
    3cde:	85 b3       	in	r24, 0x15	; 21
    3ce0:	82 60       	ori	r24, 0x02	; 2
    3ce2:	85 bb       	out	0x15, r24	; 21
    3ce4:	ee e6       	ldi	r30, 0x6E	; 110
    3ce6:	f0 e0       	ldi	r31, 0x00	; 0
    3ce8:	80 81       	ld	r24, Z
    3cea:	82 60       	ori	r24, 0x02	; 2
    3cec:	80 83       	st	Z, r24
    3cee:	0e 94 db 23 	call	0x47b6	; 0x47b6 <vUARTtxDataAvailable>
    3cf2:	80 93 77 07 	sts	0x0777, r24	; 0x800777 <sg_btxMoreAvailable>
    3cf6:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <vUARTtxDataGet>
    3cfa:	80 93 78 07 	sts	0x0778, r24	; 0x800778 <sg_u8txDataByte>
    3cfe:	81 e0       	ldi	r24, 0x01	; 1
    3d00:	08 95       	ret
    3d02:	80 e0       	ldi	r24, 0x00	; 0
    3d04:	08 95       	ret
    3d06:	80 e0       	ldi	r24, 0x00	; 0
    3d08:	08 95       	ret

Disassembly of section .text.__vector_8:

00003a7a <__vector_8>:
    3a7a:	1f 92       	push	r1
    3a7c:	0f 92       	push	r0
    3a7e:	0f b6       	in	r0, 0x3f	; 63
    3a80:	0f 92       	push	r0
    3a82:	11 24       	eor	r1, r1
    3a84:	8f 93       	push	r24
    3a86:	ef 93       	push	r30
    3a88:	ff 93       	push	r31
    3a8a:	86 b5       	in	r24, 0x26	; 38
    3a8c:	85 5c       	subi	r24, 0xC5	; 197
    3a8e:	88 bd       	out	0x28, r24	; 40
    3a90:	85 b3       	in	r24, 0x15	; 21
    3a92:	84 60       	ori	r24, 0x04	; 4
    3a94:	85 bb       	out	0x15, r24	; 21
    3a96:	ee e6       	ldi	r30, 0x6E	; 110
    3a98:	f0 e0       	ldi	r31, 0x00	; 0
    3a9a:	80 81       	ld	r24, Z
    3a9c:	84 60       	ori	r24, 0x04	; 4
    3a9e:	80 83       	st	Z, r24
    3aa0:	8d b3       	in	r24, 0x1d	; 29
    3aa2:	8d 7f       	andi	r24, 0xFD	; 253
    3aa4:	8d bb       	out	0x1d, r24	; 29
    3aa6:	80 91 72 07 	lds	r24, 0x0772	; 0x800772 <sg_bState>
    3aaa:	88 23       	and	r24, r24
    3aac:	31 f0       	breq	.+12     	; 0x3aba <__vector_8+0x40>
    3aae:	88 b1       	in	r24, 0x08	; 8
    3ab0:	80 68       	ori	r24, 0x80	; 128
    3ab2:	88 b9       	out	0x08, r24	; 8
    3ab4:	10 92 72 07 	sts	0x0772, r1	; 0x800772 <sg_bState>
    3ab8:	06 c0       	rjmp	.+12     	; 0x3ac6 <__vector_8+0x4c>
    3aba:	88 b1       	in	r24, 0x08	; 8
    3abc:	8f 77       	andi	r24, 0x7F	; 127
    3abe:	88 b9       	out	0x08, r24	; 8
    3ac0:	81 e0       	ldi	r24, 0x01	; 1
    3ac2:	80 93 72 07 	sts	0x0772, r24	; 0x800772 <sg_bState>
    3ac6:	81 e0       	ldi	r24, 0x01	; 1
    3ac8:	80 93 7c 07 	sts	0x077C, r24	; 0x80077c <sg_eCell_mc_rxState>
    3acc:	10 92 7e 07 	sts	0x077E, r1	; 0x80077e <sg_u8Cell_mc_rxBitCount>
    3ad0:	ff 91       	pop	r31
    3ad2:	ef 91       	pop	r30
    3ad4:	8f 91       	pop	r24
    3ad6:	0f 90       	pop	r0
    3ad8:	0f be       	out	0x3f, r0	; 63
    3ada:	0f 90       	pop	r0
    3adc:	1f 90       	pop	r1
    3ade:	18 95       	reti

Disassembly of section .text.__vector_16:

000026e4 <__vector_16>:
    26e4:	1f 92       	push	r1
    26e6:	0f 92       	push	r0
    26e8:	0f b6       	in	r0, 0x3f	; 63
    26ea:	0f 92       	push	r0
    26ec:	11 24       	eor	r1, r1
    26ee:	2f 93       	push	r18
    26f0:	3f 93       	push	r19
    26f2:	4f 93       	push	r20
    26f4:	5f 93       	push	r21
    26f6:	6f 93       	push	r22
    26f8:	7f 93       	push	r23
    26fa:	8f 93       	push	r24
    26fc:	9f 93       	push	r25
    26fe:	af 93       	push	r26
    2700:	bf 93       	push	r27
    2702:	ef 93       	push	r30
    2704:	ff 93       	push	r31
    2706:	86 b5       	in	r24, 0x26	; 38
    2708:	85 5d       	subi	r24, 0xD5	; 213
    270a:	88 bd       	out	0x28, r24	; 40
    270c:	85 b3       	in	r24, 0x15	; 21
    270e:	84 60       	ori	r24, 0x04	; 4
    2710:	85 bb       	out	0x15, r24	; 21
    2712:	ee e6       	ldi	r30, 0x6E	; 110
    2714:	f0 e0       	ldi	r31, 0x00	; 0
    2716:	80 81       	ld	r24, Z
    2718:	84 60       	ori	r24, 0x04	; 4
    271a:	80 83       	st	Z, r24
    271c:	20 91 7b 07 	lds	r18, 0x077B	; 0x80077b <sg_bCell_mc_rxPriorState>
    2720:	83 b1       	in	r24, 0x03	; 3
    2722:	82 fb       	bst	r24, 2
    2724:	88 27       	eor	r24, r24
    2726:	80 f9       	bld	r24, 0
    2728:	80 93 7b 07 	sts	0x077B, r24	; 0x80077b <sg_bCell_mc_rxPriorState>
    272c:	90 91 72 07 	lds	r25, 0x0772	; 0x800772 <sg_bState>
    2730:	99 23       	and	r25, r25
    2732:	31 f0       	breq	.+12     	; 0x2740 <__vector_16+0x5c>
    2734:	98 b1       	in	r25, 0x08	; 8
    2736:	90 68       	ori	r25, 0x80	; 128
    2738:	98 b9       	out	0x08, r25	; 8
    273a:	10 92 72 07 	sts	0x0772, r1	; 0x800772 <sg_bState>
    273e:	06 c0       	rjmp	.+12     	; 0x274c <__vector_16+0x68>
    2740:	98 b1       	in	r25, 0x08	; 8
    2742:	9f 77       	andi	r25, 0x7F	; 127
    2744:	98 b9       	out	0x08, r25	; 8
    2746:	81 e0       	ldi	r24, 0x01	; 1
    2748:	80 93 72 07 	sts	0x0772, r24	; 0x800772 <sg_bState>
    274c:	80 91 7e 07 	lds	r24, 0x077E	; 0x80077e <sg_u8Cell_mc_rxBitCount>
    2750:	8f 5f       	subi	r24, 0xFF	; 255
    2752:	80 93 7e 07 	sts	0x077E, r24	; 0x80077e <sg_u8Cell_mc_rxBitCount>
    2756:	81 30       	cpi	r24, 0x01	; 1
    2758:	19 f4       	brne	.+6      	; 0x2760 <__vector_16+0x7c>
    275a:	10 92 7d 07 	sts	0x077D, r1	; 0x80077d <sg_u8rxDataByte>
    275e:	20 c0       	rjmp	.+64     	; 0x27a0 <__vector_16+0xbc>
    2760:	8a 30       	cpi	r24, 0x0A	; 10
    2762:	38 f4       	brcc	.+14     	; 0x2772 <__vector_16+0x8e>
    2764:	80 91 7d 07 	lds	r24, 0x077D	; 0x80077d <sg_u8rxDataByte>
    2768:	88 0f       	add	r24, r24
    276a:	82 2b       	or	r24, r18
    276c:	80 93 7d 07 	sts	0x077D, r24	; 0x80077d <sg_u8rxDataByte>
    2770:	17 c0       	rjmp	.+46     	; 0x27a0 <__vector_16+0xbc>
    2772:	20 93 7a 07 	sts	0x077A, r18	; 0x80077a <sg_bCell_mc_rxMoreData>
    2776:	8c e0       	ldi	r24, 0x0C	; 12
    2778:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f0069>
    277c:	8c b3       	in	r24, 0x1c	; 28
    277e:	82 60       	ori	r24, 0x02	; 2
    2780:	8c bb       	out	0x1c, r24	; 28
    2782:	8d b3       	in	r24, 0x1d	; 29
    2784:	82 60       	ori	r24, 0x02	; 2
    2786:	8d bb       	out	0x1d, r24	; 29
    2788:	ee e6       	ldi	r30, 0x6E	; 110
    278a:	f0 e0       	ldi	r31, 0x00	; 0
    278c:	80 81       	ld	r24, Z
    278e:	8b 7f       	andi	r24, 0xFB	; 251
    2790:	80 83       	st	Z, r24
    2792:	80 91 7d 07 	lds	r24, 0x077D	; 0x80077d <sg_u8rxDataByte>
    2796:	0e 94 60 1c 	call	0x38c0	; 0x38c0 <vUARTRXData>
    279a:	83 e0       	ldi	r24, 0x03	; 3
    279c:	80 93 7c 07 	sts	0x077C, r24	; 0x80077c <sg_eCell_mc_rxState>
    27a0:	ff 91       	pop	r31
    27a2:	ef 91       	pop	r30
    27a4:	bf 91       	pop	r27
    27a6:	af 91       	pop	r26
    27a8:	9f 91       	pop	r25
    27aa:	8f 91       	pop	r24
    27ac:	7f 91       	pop	r23
    27ae:	6f 91       	pop	r22
    27b0:	5f 91       	pop	r21
    27b2:	4f 91       	pop	r20
    27b4:	3f 91       	pop	r19
    27b6:	2f 91       	pop	r18
    27b8:	0f 90       	pop	r0
    27ba:	0f be       	out	0x3f, r0	; 63
    27bc:	0f 90       	pop	r0
    27be:	1f 90       	pop	r1
    27c0:	18 95       	reti

Disassembly of section .text.__vector_15:

000020be <__vector_15>:
    20be:	1f 92       	push	r1
    20c0:	0f 92       	push	r0
    20c2:	0f b6       	in	r0, 0x3f	; 63
    20c4:	0f 92       	push	r0
    20c6:	11 24       	eor	r1, r1
    20c8:	2f 93       	push	r18
    20ca:	3f 93       	push	r19
    20cc:	4f 93       	push	r20
    20ce:	5f 93       	push	r21
    20d0:	6f 93       	push	r22
    20d2:	7f 93       	push	r23
    20d4:	8f 93       	push	r24
    20d6:	9f 93       	push	r25
    20d8:	af 93       	push	r26
    20da:	bf 93       	push	r27
    20dc:	ef 93       	push	r30
    20de:	ff 93       	push	r31
    20e0:	86 b5       	in	r24, 0x26	; 38
    20e2:	83 5d       	subi	r24, 0xD3	; 211
    20e4:	87 bd       	out	0x27, r24	; 39
    20e6:	85 b3       	in	r24, 0x15	; 21
    20e8:	82 60       	ori	r24, 0x02	; 2
    20ea:	85 bb       	out	0x15, r24	; 21
    20ec:	ee e6       	ldi	r30, 0x6E	; 110
    20ee:	f0 e0       	ldi	r31, 0x00	; 0
    20f0:	80 81       	ld	r24, Z
    20f2:	82 60       	ori	r24, 0x02	; 2
    20f4:	80 83       	st	Z, r24
    20f6:	80 91 74 07 	lds	r24, 0x0774	; 0x800774 <sg_bMCTxNextBit>
    20fa:	88 23       	and	r24, r24
    20fc:	21 f0       	breq	.+8      	; 0x2106 <__vector_15+0x48>
    20fe:	85 b1       	in	r24, 0x05	; 5
    2100:	88 60       	ori	r24, 0x08	; 8
    2102:	85 b9       	out	0x05, r24	; 5
    2104:	03 c0       	rjmp	.+6      	; 0x210c <__vector_15+0x4e>
    2106:	85 b1       	in	r24, 0x05	; 5
    2108:	87 7f       	andi	r24, 0xF7	; 247
    210a:	85 b9       	out	0x05, r24	; 5
    210c:	80 91 79 07 	lds	r24, 0x0779	; 0x800779 <sg_u8txBitCount>
    2110:	8f 5f       	subi	r24, 0xFF	; 255
    2112:	80 93 79 07 	sts	0x0779, r24	; 0x800779 <sg_u8txBitCount>
    2116:	80 91 79 07 	lds	r24, 0x0779	; 0x800779 <sg_u8txBitCount>
    211a:	83 30       	cpi	r24, 0x03	; 3
    211c:	61 f4       	brne	.+24     	; 0x2136 <__vector_15+0x78>
    211e:	80 91 75 07 	lds	r24, 0x0775	; 0x800775 <sg_bCellReportsReuested>
    2122:	88 23       	and	r24, r24
    2124:	41 f0       	breq	.+16     	; 0x2136 <__vector_15+0x78>
    2126:	8b e0       	ldi	r24, 0x0B	; 11
    2128:	80 93 79 07 	sts	0x0779, r24	; 0x800779 <sg_u8txBitCount>
    212c:	10 92 74 07 	sts	0x0774, r1	; 0x800774 <sg_bMCTxNextBit>
    2130:	10 92 77 07 	sts	0x0777, r1	; 0x800777 <sg_btxMoreAvailable>
    2134:	4d c0       	rjmp	.+154    	; 0x21d0 <__vector_15+0x112>
    2136:	80 91 79 07 	lds	r24, 0x0779	; 0x800779 <sg_u8txBitCount>
    213a:	8a 30       	cpi	r24, 0x0A	; 10
    213c:	80 f4       	brcc	.+32     	; 0x215e <__vector_15+0xa0>
    213e:	80 91 78 07 	lds	r24, 0x0778	; 0x800778 <sg_u8txDataByte>
    2142:	88 23       	and	r24, r24
    2144:	24 f4       	brge	.+8      	; 0x214e <__vector_15+0x90>
    2146:	81 e0       	ldi	r24, 0x01	; 1
    2148:	80 93 74 07 	sts	0x0774, r24	; 0x800774 <sg_bMCTxNextBit>
    214c:	02 c0       	rjmp	.+4      	; 0x2152 <__vector_15+0x94>
    214e:	10 92 74 07 	sts	0x0774, r1	; 0x800774 <sg_bMCTxNextBit>
    2152:	80 91 78 07 	lds	r24, 0x0778	; 0x800778 <sg_u8txDataByte>
    2156:	88 0f       	add	r24, r24
    2158:	80 93 78 07 	sts	0x0778, r24	; 0x800778 <sg_u8txDataByte>
    215c:	39 c0       	rjmp	.+114    	; 0x21d0 <__vector_15+0x112>
    215e:	80 91 79 07 	lds	r24, 0x0779	; 0x800779 <sg_u8txBitCount>
    2162:	8a 30       	cpi	r24, 0x0A	; 10
    2164:	29 f4       	brne	.+10     	; 0x2170 <__vector_15+0xb2>
    2166:	80 91 77 07 	lds	r24, 0x0777	; 0x800777 <sg_btxMoreAvailable>
    216a:	80 93 74 07 	sts	0x0774, r24	; 0x800774 <sg_bMCTxNextBit>
    216e:	30 c0       	rjmp	.+96     	; 0x21d0 <__vector_15+0x112>
    2170:	80 91 79 07 	lds	r24, 0x0779	; 0x800779 <sg_u8txBitCount>
    2174:	8b 30       	cpi	r24, 0x0B	; 11
    2176:	19 f4       	brne	.+6      	; 0x217e <__vector_15+0xc0>
    2178:	10 92 74 07 	sts	0x0774, r1	; 0x800774 <sg_bMCTxNextBit>
    217c:	29 c0       	rjmp	.+82     	; 0x21d0 <__vector_15+0x112>
    217e:	80 91 79 07 	lds	r24, 0x0779	; 0x800779 <sg_u8txBitCount>
    2182:	8c 30       	cpi	r24, 0x0C	; 12
    2184:	29 f5       	brne	.+74     	; 0x21d0 <__vector_15+0x112>
    2186:	80 91 77 07 	lds	r24, 0x0777	; 0x800777 <sg_btxMoreAvailable>
    218a:	80 93 74 07 	sts	0x0774, r24	; 0x800774 <sg_bMCTxNextBit>
    218e:	10 92 79 07 	sts	0x0779, r1	; 0x800779 <sg_u8txBitCount>
    2192:	80 91 77 07 	lds	r24, 0x0777	; 0x800777 <sg_btxMoreAvailable>
    2196:	81 11       	cpse	r24, r1
    2198:	08 c0       	rjmp	.+16     	; 0x21aa <__vector_15+0xec>
    219a:	10 92 76 07 	sts	0x0776, r1	; 0x800776 <sg_etxState>
    219e:	ee e6       	ldi	r30, 0x6E	; 110
    21a0:	f0 e0       	ldi	r31, 0x00	; 0
    21a2:	80 81       	ld	r24, Z
    21a4:	8d 7f       	andi	r24, 0xFD	; 253
    21a6:	80 83       	st	Z, r24
    21a8:	13 c0       	rjmp	.+38     	; 0x21d0 <__vector_15+0x112>
    21aa:	0e 94 db 23 	call	0x47b6	; 0x47b6 <vUARTtxDataAvailable>
    21ae:	80 93 77 07 	sts	0x0777, r24	; 0x800777 <sg_btxMoreAvailable>
    21b2:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <vUARTtxDataGet>
    21b6:	80 93 78 07 	sts	0x0778, r24	; 0x800778 <sg_u8txDataByte>
    21ba:	86 b5       	in	r24, 0x26	; 38
    21bc:	88 53       	subi	r24, 0x38	; 56
    21be:	87 bd       	out	0x27, r24	; 39
    21c0:	85 b3       	in	r24, 0x15	; 21
    21c2:	82 60       	ori	r24, 0x02	; 2
    21c4:	85 bb       	out	0x15, r24	; 21
    21c6:	ee e6       	ldi	r30, 0x6E	; 110
    21c8:	f0 e0       	ldi	r31, 0x00	; 0
    21ca:	80 81       	ld	r24, Z
    21cc:	82 60       	ori	r24, 0x02	; 2
    21ce:	80 83       	st	Z, r24
    21d0:	ff 91       	pop	r31
    21d2:	ef 91       	pop	r30
    21d4:	bf 91       	pop	r27
    21d6:	af 91       	pop	r26
    21d8:	9f 91       	pop	r25
    21da:	8f 91       	pop	r24
    21dc:	7f 91       	pop	r23
    21de:	6f 91       	pop	r22
    21e0:	5f 91       	pop	r21
    21e2:	4f 91       	pop	r20
    21e4:	3f 91       	pop	r19
    21e6:	2f 91       	pop	r18
    21e8:	0f 90       	pop	r0
    21ea:	0f be       	out	0x3f, r0	; 63
    21ec:	0f 90       	pop	r0
    21ee:	1f 90       	pop	r1
    21f0:	18 95       	reti

Disassembly of section .text.vUARTInit:

00004292 <vUARTInit>:
    4292:	85 b7       	in	r24, 0x35	; 53
    4294:	8f 7e       	andi	r24, 0xEF	; 239
    4296:	85 bf       	out	0x35, r24	; 53
    4298:	84 b1       	in	r24, 0x04	; 4
    429a:	88 60       	ori	r24, 0x08	; 8
    429c:	84 b9       	out	0x04, r24	; 4
    429e:	84 b1       	in	r24, 0x04	; 4
    42a0:	8b 7f       	andi	r24, 0xFB	; 251
    42a2:	84 b9       	out	0x04, r24	; 4
    42a4:	85 b1       	in	r24, 0x05	; 5
    42a6:	8b 7f       	andi	r24, 0xFB	; 251
    42a8:	85 b9       	out	0x05, r24	; 5
    42aa:	87 b1       	in	r24, 0x07	; 7
    42ac:	80 68       	ori	r24, 0x80	; 128
    42ae:	87 b9       	out	0x07, r24	; 7
    42b0:	8d b3       	in	r24, 0x1d	; 29
    42b2:	8d 7f       	andi	r24, 0xFD	; 253
    42b4:	8d bb       	out	0x1d, r24	; 29
    42b6:	10 92 76 07 	sts	0x0776, r1	; 0x800776 <sg_etxState>
    42ba:	85 b1       	in	r24, 0x05	; 5
    42bc:	87 7f       	andi	r24, 0xF7	; 247
    42be:	85 b9       	out	0x05, r24	; 5
    42c0:	08 95       	ret

Disassembly of section .text.vUARTInitReceive:

00004958 <vUARTInitReceive>:
    4958:	8c e0       	ldi	r24, 0x0C	; 12
    495a:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f0069>
    495e:	8c b3       	in	r24, 0x1c	; 28
    4960:	82 60       	ori	r24, 0x02	; 2
    4962:	8c bb       	out	0x1c, r24	; 28
    4964:	8d b3       	in	r24, 0x1d	; 29
    4966:	82 60       	ori	r24, 0x02	; 2
    4968:	8d bb       	out	0x1d, r24	; 29
    496a:	08 95       	ret

Disassembly of section .text.libgcc.div:

0000446e <__udivmodhi4>:
    446e:	aa 1b       	sub	r26, r26
    4470:	bb 1b       	sub	r27, r27
    4472:	51 e1       	ldi	r21, 0x11	; 17
    4474:	07 c0       	rjmp	.+14     	; 0x4484 <__udivmodhi4_ep>

00004476 <__udivmodhi4_loop>:
    4476:	aa 1f       	adc	r26, r26
    4478:	bb 1f       	adc	r27, r27
    447a:	a6 17       	cp	r26, r22
    447c:	b7 07       	cpc	r27, r23
    447e:	10 f0       	brcs	.+4      	; 0x4484 <__udivmodhi4_ep>
    4480:	a6 1b       	sub	r26, r22
    4482:	b7 0b       	sbc	r27, r23

00004484 <__udivmodhi4_ep>:
    4484:	88 1f       	adc	r24, r24
    4486:	99 1f       	adc	r25, r25
    4488:	5a 95       	dec	r21
    448a:	a9 f7       	brne	.-22     	; 0x4476 <__udivmodhi4_loop>
    448c:	80 95       	com	r24
    448e:	90 95       	com	r25
    4490:	bc 01       	movw	r22, r24
    4492:	cd 01       	movw	r24, r26
    4494:	08 95       	ret

Disassembly of section .text.libgcc.div:

00003f86 <__udivmodsi4>:
    3f86:	a1 e2       	ldi	r26, 0x21	; 33
    3f88:	1a 2e       	mov	r1, r26
    3f8a:	aa 1b       	sub	r26, r26
    3f8c:	bb 1b       	sub	r27, r27
    3f8e:	fd 01       	movw	r30, r26
    3f90:	0d c0       	rjmp	.+26     	; 0x3fac <__udivmodsi4_ep>

00003f92 <__udivmodsi4_loop>:
    3f92:	aa 1f       	adc	r26, r26
    3f94:	bb 1f       	adc	r27, r27
    3f96:	ee 1f       	adc	r30, r30
    3f98:	ff 1f       	adc	r31, r31
    3f9a:	a2 17       	cp	r26, r18
    3f9c:	b3 07       	cpc	r27, r19
    3f9e:	e4 07       	cpc	r30, r20
    3fa0:	f5 07       	cpc	r31, r21
    3fa2:	20 f0       	brcs	.+8      	; 0x3fac <__udivmodsi4_ep>
    3fa4:	a2 1b       	sub	r26, r18
    3fa6:	b3 0b       	sbc	r27, r19
    3fa8:	e4 0b       	sbc	r30, r20
    3faa:	f5 0b       	sbc	r31, r21

00003fac <__udivmodsi4_ep>:
    3fac:	66 1f       	adc	r22, r22
    3fae:	77 1f       	adc	r23, r23
    3fb0:	88 1f       	adc	r24, r24
    3fb2:	99 1f       	adc	r25, r25
    3fb4:	1a 94       	dec	r1
    3fb6:	69 f7       	brne	.-38     	; 0x3f92 <__udivmodsi4_loop>
    3fb8:	60 95       	com	r22
    3fba:	70 95       	com	r23
    3fbc:	80 95       	com	r24
    3fbe:	90 95       	com	r25
    3fc0:	9b 01       	movw	r18, r22
    3fc2:	ac 01       	movw	r20, r24
    3fc4:	bd 01       	movw	r22, r26
    3fc6:	cf 01       	movw	r24, r30
    3fc8:	08 95       	ret

Disassembly of section .text.libgcc.div:

000042c2 <__divmodsi4>:
    42c2:	05 2e       	mov	r0, r21
    42c4:	97 fb       	bst	r25, 7
    42c6:	1e f4       	brtc	.+6      	; 0x42ce <__divmodsi4+0xc>
    42c8:	00 94       	com	r0
    42ca:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <__negsi2>
    42ce:	57 fd       	sbrc	r21, 7
    42d0:	07 d0       	rcall	.+14     	; 0x42e0 <__divmodsi4_neg2>
    42d2:	0e 94 c3 1f 	call	0x3f86	; 0x3f86 <__udivmodsi4>
    42d6:	07 fc       	sbrc	r0, 7
    42d8:	03 d0       	rcall	.+6      	; 0x42e0 <__divmodsi4_neg2>
    42da:	4e f4       	brtc	.+18     	; 0x42ee <__divmodsi4_exit>
    42dc:	0c 94 e3 24 	jmp	0x49c6	; 0x49c6 <__negsi2>

000042e0 <__divmodsi4_neg2>:
    42e0:	50 95       	com	r21
    42e2:	40 95       	com	r20
    42e4:	30 95       	com	r19
    42e6:	21 95       	neg	r18
    42e8:	3f 4f       	sbci	r19, 0xFF	; 255
    42ea:	4f 4f       	sbci	r20, 0xFF	; 255
    42ec:	5f 4f       	sbci	r21, 0xFF	; 255

000042ee <__divmodsi4_exit>:
    42ee:	08 95       	ret

Disassembly of section .text.libgcc.div:

000049c6 <__negsi2>:
    49c6:	90 95       	com	r25
    49c8:	80 95       	com	r24
    49ca:	70 95       	com	r23
    49cc:	61 95       	neg	r22
    49ce:	7f 4f       	sbci	r23, 0xFF	; 255
    49d0:	8f 4f       	sbci	r24, 0xFF	; 255
    49d2:	9f 4f       	sbci	r25, 0xFF	; 255
    49d4:	08 95       	ret

Disassembly of section .text.libgcc.mul:

0000481c <__umulhisi3>:
    481c:	a2 9f       	mul	r26, r18
    481e:	b0 01       	movw	r22, r0
    4820:	b3 9f       	mul	r27, r19
    4822:	c0 01       	movw	r24, r0
    4824:	a3 9f       	mul	r26, r19
    4826:	70 0d       	add	r23, r0
    4828:	81 1d       	adc	r24, r1
    482a:	11 24       	eor	r1, r1
    482c:	91 1d       	adc	r25, r1
    482e:	b2 9f       	mul	r27, r18
    4830:	70 0d       	add	r23, r0
    4832:	81 1d       	adc	r24, r1
    4834:	11 24       	eor	r1, r1
    4836:	91 1d       	adc	r25, r1
    4838:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00004a20 <__usmulhisi3>:
    4a20:	0e 94 0e 24 	call	0x481c	; 0x481c <__umulhisi3>

00004a24 <__usmulhisi3_tail>:
    4a24:	b7 ff       	sbrs	r27, 7
    4a26:	08 95       	ret
    4a28:	82 1b       	sub	r24, r18
    4a2a:	93 0b       	sbc	r25, r19
    4a2c:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00004918 <__muluhisi3>:
    4918:	0e 94 0e 24 	call	0x481c	; 0x481c <__umulhisi3>
    491c:	a5 9f       	mul	r26, r21
    491e:	90 0d       	add	r25, r0
    4920:	b4 9f       	mul	r27, r20
    4922:	90 0d       	add	r25, r0
    4924:	a4 9f       	mul	r26, r20
    4926:	80 0d       	add	r24, r0
    4928:	91 1d       	adc	r25, r1
    492a:	11 24       	eor	r1, r1
    492c:	08 95       	ret

Disassembly of section .text.libgcc.mul:

000049d6 <__mulshisi3>:
    49d6:	b7 ff       	sbrs	r27, 7
    49d8:	0c 94 8c 24 	jmp	0x4918	; 0x4918 <__muluhisi3>

000049dc <__mulohisi3>:
    49dc:	0e 94 8c 24 	call	0x4918	; 0x4918 <__muluhisi3>
    49e0:	82 1b       	sub	r24, r18
    49e2:	93 0b       	sbc	r25, r19
    49e4:	08 95       	ret

Disassembly of section .text.libgcc:

000049e6 <__xload_2>:
    49e6:	57 fd       	sbrc	r21, 7
    49e8:	03 c0       	rjmp	.+6      	; 0x49f0 <__xload_2+0xa>
    49ea:	65 91       	lpm	r22, Z+
    49ec:	75 91       	lpm	r23, Z+
    49ee:	08 95       	ret
    49f0:	61 91       	ld	r22, Z+
    49f2:	71 91       	ld	r23, Z+
    49f4:	08 95       	ret

Disassembly of section .text.libgcc:

000048a6 <__xload_4>:
    48a6:	57 fd       	sbrc	r21, 7
    48a8:	05 c0       	rjmp	.+10     	; 0x48b4 <__xload_4+0xe>
    48aa:	65 91       	lpm	r22, Z+
    48ac:	75 91       	lpm	r23, Z+
    48ae:	85 91       	lpm	r24, Z+
    48b0:	95 91       	lpm	r25, Z+
    48b2:	08 95       	ret
    48b4:	61 91       	ld	r22, Z+
    48b6:	71 91       	ld	r23, Z+
    48b8:	81 91       	ld	r24, Z+
    48ba:	91 91       	ld	r25, Z+
    48bc:	08 95       	ret

Disassembly of section .text.libgcc:

000048be <__adddi3_s8>:
    48be:	00 24       	eor	r0, r0
    48c0:	a7 fd       	sbrc	r26, 7
    48c2:	00 94       	com	r0
    48c4:	2a 0f       	add	r18, r26
    48c6:	30 1d       	adc	r19, r0
    48c8:	40 1d       	adc	r20, r0
    48ca:	50 1d       	adc	r21, r0
    48cc:	60 1d       	adc	r22, r0
    48ce:	70 1d       	adc	r23, r0
    48d0:	80 1d       	adc	r24, r0
    48d2:	90 1d       	adc	r25, r0
    48d4:	08 95       	ret

Disassembly of section .text.__dummy_fini:

00004a8a <_fini>:
    4a8a:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00004a8c <__funcs_on_exit>:
    4a8c:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00004a8e <__simulator_exit>:
    4a8e:	08 95       	ret

Disassembly of section .text.exit:

0000492e <exit>:
    492e:	ec 01       	movw	r28, r24
    4930:	0e 94 46 25 	call	0x4a8c	; 0x4a8c <__funcs_on_exit>
    4934:	0e 94 45 25 	call	0x4a8a	; 0x4a8a <_fini>
    4938:	ce 01       	movw	r24, r28
    493a:	0e 94 47 25 	call	0x4a8e	; 0x4a8e <__simulator_exit>
    493e:	ce 01       	movw	r24, r28
    4940:	0e 94 42 25 	call	0x4a84	; 0x4a84 <_Exit>

Disassembly of section .text.memcpy:

00004260 <memcpy>:
    4260:	cf 92       	push	r12
    4262:	df 92       	push	r13
    4264:	ef 92       	push	r14
    4266:	6a 01       	movw	r12, r20
    4268:	e6 2e       	mov	r14, r22
    426a:	dc 01       	movw	r26, r24
    426c:	28 0f       	add	r18, r24
    426e:	39 1f       	adc	r19, r25
    4270:	a2 17       	cp	r26, r18
    4272:	b3 07       	cpc	r27, r19
    4274:	51 f0       	breq	.+20     	; 0x428a <memcpy+0x2a>
    4276:	f6 01       	movw	r30, r12
    4278:	44 91       	lpm	r20, Z
    427a:	e7 fc       	sbrc	r14, 7
    427c:	40 81       	ld	r20, Z
    427e:	4d 93       	st	X+, r20
    4280:	4f ef       	ldi	r20, 0xFF	; 255
    4282:	c4 1a       	sub	r12, r20
    4284:	d4 0a       	sbc	r13, r20
    4286:	e4 0a       	sbc	r14, r20
    4288:	f3 cf       	rjmp	.-26     	; 0x4270 <memcpy+0x10>
    428a:	ef 90       	pop	r14
    428c:	df 90       	pop	r13
    428e:	cf 90       	pop	r12
    4290:	08 95       	ret

Disassembly of section .text.memset:

0000497e <memset>:
    497e:	fc 01       	movw	r30, r24
    4980:	48 0f       	add	r20, r24
    4982:	59 1f       	adc	r21, r25
    4984:	e4 17       	cp	r30, r20
    4986:	f5 07       	cpc	r31, r21
    4988:	11 f0       	breq	.+4      	; 0x498e <memset+0x10>
    498a:	61 93       	st	Z+, r22
    498c:	fb cf       	rjmp	.-10     	; 0x4984 <memset+0x6>
    498e:	08 95       	ret

Disassembly of section .text.gmtime:

00004a70 <gmtime>:
    4a70:	40 e0       	ldi	r20, 0x00	; 0
    4a72:	57 e0       	ldi	r21, 0x07	; 7
    4a74:	0e 94 9d 1c 	call	0x393a	; 0x393a <__gmtime_r>
    4a78:	08 95       	ret

Disassembly of section .text.__gmtime_r:

0000393a <__gmtime_r>:
    393a:	a0 e0       	ldi	r26, 0x00	; 0
    393c:	b0 e0       	ldi	r27, 0x00	; 0
    393e:	e3 ea       	ldi	r30, 0xA3	; 163
    3940:	fc e1       	ldi	r31, 0x1C	; 28
    3942:	0c 94 7f 20 	jmp	0x40fe	; 0x40fe <__prologue_saves__+0xc>
    3946:	ea 01       	movw	r28, r20
    3948:	fb 01       	movw	r30, r22
    394a:	58 2f       	mov	r21, r24
    394c:	0e 94 53 24 	call	0x48a6	; 0x48a6 <__xload_4>
    3950:	4b 01       	movw	r8, r22
    3952:	5c 01       	movw	r10, r24
    3954:	c1 2c       	mov	r12, r1
    3956:	d1 2c       	mov	r13, r1
    3958:	76 01       	movw	r14, r12
    395a:	8e 01       	movw	r16, r28
    395c:	9b 01       	movw	r18, r22
    395e:	a5 01       	movw	r20, r10
    3960:	60 e0       	ldi	r22, 0x00	; 0
    3962:	70 e0       	ldi	r23, 0x00	; 0
    3964:	80 e0       	ldi	r24, 0x00	; 0
    3966:	90 e0       	ldi	r25, 0x00	; 0
    3968:	0e 94 16 01 	call	0x22c	; 0x22c <__secs_to_tm>
    396c:	97 ff       	sbrs	r25, 7
    396e:	09 c0       	rjmp	.+18     	; 0x3982 <__gmtime_r+0x48>
    3970:	8f e4       	ldi	r24, 0x4F	; 79
    3972:	90 e0       	ldi	r25, 0x00	; 0
    3974:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
    3978:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
    397c:	80 e0       	ldi	r24, 0x00	; 0
    397e:	90 e0       	ldi	r25, 0x00	; 0
    3980:	0d c0       	rjmp	.+26     	; 0x399c <__gmtime_r+0x62>
    3982:	19 8a       	std	Y+17, r1	; 0x11
    3984:	18 8a       	std	Y+16, r1	; 0x10
    3986:	1a 8a       	std	Y+18, r1	; 0x12
    3988:	1b 8a       	std	Y+19, r1	; 0x13
    398a:	1c 8a       	std	Y+20, r1	; 0x14
    398c:	1d 8a       	std	Y+21, r1	; 0x15
    398e:	83 e2       	ldi	r24, 0x23	; 35
    3990:	92 e0       	ldi	r25, 0x02	; 2
    3992:	a0 e0       	ldi	r26, 0x00	; 0
    3994:	8e 8b       	std	Y+22, r24	; 0x16
    3996:	9f 8b       	std	Y+23, r25	; 0x17
    3998:	a8 8f       	std	Y+24, r26	; 0x18
    399a:	ce 01       	movw	r24, r28
    399c:	cd b7       	in	r28, 0x3d	; 61
    399e:	de b7       	in	r29, 0x3e	; 62
    39a0:	ec e0       	ldi	r30, 0x0C	; 12
    39a2:	0c 94 9b 20 	jmp	0x4136	; 0x4136 <__epilogue_restores__+0xc>

Disassembly of section .text.mktime:

000034d0 <mktime>:
    34d0:	a9 e1       	ldi	r26, 0x19	; 25
    34d2:	b0 e0       	ldi	r27, 0x00	; 0
    34d4:	ee e6       	ldi	r30, 0x6E	; 110
    34d6:	fa e1       	ldi	r31, 0x1A	; 26
    34d8:	0c 94 7b 20 	jmp	0x40f6	; 0x40f6 <__prologue_saves__+0x4>
    34dc:	2c 01       	movw	r4, r24
    34de:	bc 01       	movw	r22, r24
    34e0:	80 e8       	ldi	r24, 0x80	; 128
    34e2:	0e 94 01 0c 	call	0x1802	; 0x1802 <__tm_to_secs>
    34e6:	39 01       	movw	r6, r18
    34e8:	4a 01       	movw	r8, r20
    34ea:	59 01       	movw	r10, r18
    34ec:	6a 01       	movw	r12, r20
    34ee:	e1 2c       	mov	r14, r1
    34f0:	f1 2c       	mov	r15, r1
    34f2:	00 e0       	ldi	r16, 0x00	; 0
    34f4:	10 e0       	ldi	r17, 0x00	; 0
    34f6:	0e 94 da 24 	call	0x49b4	; 0x49b4 <__cmpdi2>
    34fa:	f9 f4       	brne	.+62     	; 0x353a <mktime+0x6a>
    34fc:	1a 8a       	std	Y+18, r1	; 0x12
    34fe:	19 8a       	std	Y+17, r1	; 0x11
    3500:	1b 8a       	std	Y+19, r1	; 0x13
    3502:	1c 8a       	std	Y+20, r1	; 0x14
    3504:	1d 8a       	std	Y+21, r1	; 0x15
    3506:	1e 8a       	std	Y+22, r1	; 0x16
    3508:	27 e2       	ldi	r18, 0x27	; 39
    350a:	32 e0       	ldi	r19, 0x02	; 2
    350c:	40 e0       	ldi	r20, 0x00	; 0
    350e:	2f 8b       	std	Y+23, r18	; 0x17
    3510:	38 8f       	std	Y+24, r19	; 0x18
    3512:	49 8f       	std	Y+25, r20	; 0x19
    3514:	8e 01       	movw	r16, r28
    3516:	0f 5f       	subi	r16, 0xFF	; 255
    3518:	1f 4f       	sbci	r17, 0xFF	; 255
    351a:	93 01       	movw	r18, r6
    351c:	48 2d       	mov	r20, r8
    351e:	0e 94 16 01 	call	0x22c	; 0x22c <__secs_to_tm>
    3522:	97 fd       	sbrc	r25, 7
    3524:	0a c0       	rjmp	.+20     	; 0x353a <mktime+0x6a>
    3526:	89 e1       	ldi	r24, 0x19	; 25
    3528:	f8 01       	movw	r30, r16
    352a:	d2 01       	movw	r26, r4
    352c:	01 90       	ld	r0, Z+
    352e:	0d 92       	st	X+, r0
    3530:	8a 95       	dec	r24
    3532:	e1 f7       	brne	.-8      	; 0x352c <mktime+0x5c>
    3534:	b3 01       	movw	r22, r6
    3536:	c4 01       	movw	r24, r8
    3538:	0a c0       	rjmp	.+20     	; 0x354e <mktime+0x7e>
    353a:	8f e4       	ldi	r24, 0x4F	; 79
    353c:	90 e0       	ldi	r25, 0x00	; 0
    353e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
    3542:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
    3546:	6f ef       	ldi	r22, 0xFF	; 255
    3548:	7f ef       	ldi	r23, 0xFF	; 255
    354a:	8f ef       	ldi	r24, 0xFF	; 255
    354c:	9f ef       	ldi	r25, 0xFF	; 255
    354e:	69 96       	adiw	r28, 0x19	; 25
    3550:	e0 e1       	ldi	r30, 0x10	; 16
    3552:	0c 94 97 20 	jmp	0x412e	; 0x412e <__epilogue_restores__+0x4>

Disassembly of section .text._Exit:

00004a84 <_Exit>:
    4a84:	0e 94 6b 00 	call	0xd6	; 0xd6 <_exit>

Disassembly of section .text.__tm_to_secs:

00001802 <__tm_to_secs>:
    1802:	a5 e0       	ldi	r26, 0x05	; 5
    1804:	b0 e0       	ldi	r27, 0x00	; 0
    1806:	e7 e0       	ldi	r30, 0x07	; 7
    1808:	fc e0       	ldi	r31, 0x0C	; 12
    180a:	0c 94 79 20 	jmp	0x40f2	; 0x40f2 <__prologue_saves__>
    180e:	3b 01       	movw	r6, r22
    1810:	88 2e       	mov	r8, r24
    1812:	a8 2f       	mov	r26, r24
    1814:	cb 01       	movw	r24, r22
    1816:	0a 96       	adiw	r24, 0x0a	; 10
    1818:	a1 1d       	adc	r26, r1
    181a:	fc 01       	movw	r30, r24
    181c:	5a 2f       	mov	r21, r26
    181e:	0e 94 f3 24 	call	0x49e6	; 0x49e6 <__xload_2>
    1822:	5b 01       	movw	r10, r22
    1824:	9b 01       	movw	r18, r22
    1826:	9b 2c       	mov	r9, r11
    1828:	99 0c       	add	r9, r9
    182a:	99 08       	sbc	r9, r9
    182c:	f9 2c       	mov	r15, r9
    182e:	b9 2d       	mov	r27, r9
    1830:	a9 2d       	mov	r26, r9
    1832:	89 2d       	mov	r24, r9
    1834:	99 2d       	mov	r25, r9
    1836:	e8 2c       	mov	r14, r8
    1838:	63 01       	movw	r12, r6
    183a:	48 e0       	ldi	r20, 0x08	; 8
    183c:	c4 0e       	add	r12, r20
    183e:	d1 1c       	adc	r13, r1
    1840:	e1 1c       	adc	r14, r1
    1842:	f6 01       	movw	r30, r12
    1844:	5e 2d       	mov	r21, r14
    1846:	0e 94 f3 24 	call	0x49e6	; 0x49e6 <__xload_2>
    184a:	2b 01       	movw	r4, r22
    184c:	6c 30       	cpi	r22, 0x0C	; 12
    184e:	71 05       	cpc	r23, r1
    1850:	10 f1       	brcs	.+68     	; 0x1896 <__tm_to_secs+0x94>
    1852:	cb 01       	movw	r24, r22
    1854:	6c e0       	ldi	r22, 0x0C	; 12
    1856:	70 e0       	ldi	r23, 0x00	; 0
    1858:	0e 94 4b 22 	call	0x4496	; 0x4496 <__divmodhi4>
    185c:	2c 01       	movw	r4, r24
    185e:	97 ff       	sbrs	r25, 7
    1860:	05 c0       	rjmp	.+10     	; 0x186c <__tm_to_secs+0x6a>
    1862:	61 50       	subi	r22, 0x01	; 1
    1864:	71 09       	sbc	r23, r1
    1866:	8c e0       	ldi	r24, 0x0C	; 12
    1868:	48 0e       	add	r4, r24
    186a:	51 1c       	adc	r5, r1
    186c:	97 2f       	mov	r25, r23
    186e:	99 0f       	add	r25, r25
    1870:	99 0b       	sbc	r25, r25
    1872:	9b 01       	movw	r18, r22
    1874:	49 2f       	mov	r20, r25
    1876:	59 2f       	mov	r21, r25
    1878:	69 2f       	mov	r22, r25
    187a:	79 2f       	mov	r23, r25
    187c:	89 2f       	mov	r24, r25
    187e:	c9 2c       	mov	r12, r9
    1880:	d9 2c       	mov	r13, r9
    1882:	e9 2c       	mov	r14, r9
    1884:	f9 2c       	mov	r15, r9
    1886:	09 2d       	mov	r16, r9
    1888:	19 2d       	mov	r17, r9
    188a:	0e 94 d1 24 	call	0x49a2	; 0x49a2 <__adddi3>
    188e:	94 2e       	mov	r9, r20
    1890:	f5 2e       	mov	r15, r21
    1892:	b6 2f       	mov	r27, r22
    1894:	a7 2f       	mov	r26, r23
    1896:	8e 01       	movw	r16, r28
    1898:	0f 5f       	subi	r16, 0xFF	; 255
    189a:	1f 4f       	sbci	r17, 0xFF	; 255
    189c:	49 2d       	mov	r20, r9
    189e:	5f 2d       	mov	r21, r15
    18a0:	6b 2f       	mov	r22, r27
    18a2:	7a 2f       	mov	r23, r26
    18a4:	0e 94 c1 07 	call	0xf82	; 0xf82 <__year_to_secs>
    18a8:	59 01       	movw	r10, r18
    18aa:	6a 01       	movw	r12, r20
    18ac:	7b 01       	movw	r14, r22
    18ae:	8c 01       	movw	r16, r24
    18b0:	69 81       	ldd	r22, Y+1	; 0x01
    18b2:	7a 81       	ldd	r23, Y+2	; 0x02
    18b4:	c2 01       	movw	r24, r4
    18b6:	0e 94 22 20 	call	0x4044	; 0x4044 <__month_to_secs>
    18ba:	1b 01       	movw	r2, r22
    18bc:	2c 01       	movw	r4, r24
    18be:	55 0c       	add	r5, r5
    18c0:	22 08       	sbc	r2, r2
    18c2:	32 2c       	mov	r3, r2
    18c4:	21 01       	movw	r4, r2
    18c6:	9b 01       	movw	r18, r22
    18c8:	ac 01       	movw	r20, r24
    18ca:	62 2d       	mov	r22, r2
    18cc:	72 2d       	mov	r23, r2
    18ce:	82 2d       	mov	r24, r2
    18d0:	92 2d       	mov	r25, r2
    18d2:	0e 94 d1 24 	call	0x49a2	; 0x49a2 <__adddi3>
    18d6:	19 01       	movw	r2, r18
    18d8:	2a 01       	movw	r4, r20
    18da:	96 2e       	mov	r9, r22
    18dc:	7b 83       	std	Y+3, r23	; 0x03
    18de:	8c 83       	std	Y+4, r24	; 0x04
    18e0:	9d 83       	std	Y+5, r25	; 0x05
    18e2:	a8 2d       	mov	r26, r8
    18e4:	c3 01       	movw	r24, r6
    18e6:	06 96       	adiw	r24, 0x06	; 6
    18e8:	a1 1d       	adc	r26, r1
    18ea:	fc 01       	movw	r30, r24
    18ec:	5a 2f       	mov	r21, r26
    18ee:	0e 94 f3 24 	call	0x49e6	; 0x49e6 <__xload_2>
    18f2:	61 50       	subi	r22, 0x01	; 1
    18f4:	71 09       	sbc	r23, r1
    18f6:	97 2f       	mov	r25, r23
    18f8:	99 0f       	add	r25, r25
    18fa:	99 0b       	sbc	r25, r25
    18fc:	30 e8       	ldi	r19, 0x80	; 128
    18fe:	a3 2e       	mov	r10, r19
    1900:	41 e5       	ldi	r20, 0x51	; 81
    1902:	b4 2e       	mov	r11, r20
    1904:	cc 24       	eor	r12, r12
    1906:	c3 94       	inc	r12
    1908:	d1 2c       	mov	r13, r1
    190a:	e1 2c       	mov	r14, r1
    190c:	f1 2c       	mov	r15, r1
    190e:	00 e0       	ldi	r16, 0x00	; 0
    1910:	10 e0       	ldi	r17, 0x00	; 0
    1912:	9b 01       	movw	r18, r22
    1914:	49 2f       	mov	r20, r25
    1916:	59 2f       	mov	r21, r25
    1918:	69 2f       	mov	r22, r25
    191a:	79 2f       	mov	r23, r25
    191c:	89 2f       	mov	r24, r25
    191e:	0e 94 6f 18 	call	0x30de	; 0x30de <__muldi3>
    1922:	51 01       	movw	r10, r2
    1924:	62 01       	movw	r12, r4
    1926:	e9 2c       	mov	r14, r9
    1928:	fb 80       	ldd	r15, Y+3	; 0x03
    192a:	0c 81       	ldd	r16, Y+4	; 0x04
    192c:	1d 81       	ldd	r17, Y+5	; 0x05
    192e:	0e 94 d1 24 	call	0x49a2	; 0x49a2 <__adddi3>
    1932:	59 01       	movw	r10, r18
    1934:	6a 01       	movw	r12, r20
    1936:	7b 01       	movw	r14, r22
    1938:	8c 01       	movw	r16, r24
    193a:	a8 2d       	mov	r26, r8
    193c:	c3 01       	movw	r24, r6
    193e:	04 96       	adiw	r24, 0x04	; 4
    1940:	a1 1d       	adc	r26, r1
    1942:	fc 01       	movw	r30, r24
    1944:	5a 2f       	mov	r21, r26
    1946:	0e 94 f3 24 	call	0x49e6	; 0x49e6 <__xload_2>
    194a:	07 2e       	mov	r0, r23
    194c:	00 0c       	add	r0, r0
    194e:	88 0b       	sbc	r24, r24
    1950:	99 0b       	sbc	r25, r25
    1952:	20 e1       	ldi	r18, 0x10	; 16
    1954:	3e e0       	ldi	r19, 0x0E	; 14
    1956:	40 e0       	ldi	r20, 0x00	; 0
    1958:	50 e0       	ldi	r21, 0x00	; 0
    195a:	0e 94 1d 24 	call	0x483a	; 0x483a <__mulsidi3>
    195e:	0e 94 d1 24 	call	0x49a2	; 0x49a2 <__adddi3>
    1962:	59 01       	movw	r10, r18
    1964:	6a 01       	movw	r12, r20
    1966:	7b 01       	movw	r14, r22
    1968:	8c 01       	movw	r16, r24
    196a:	a8 2d       	mov	r26, r8
    196c:	c3 01       	movw	r24, r6
    196e:	02 96       	adiw	r24, 0x02	; 2
    1970:	a1 1d       	adc	r26, r1
    1972:	fc 01       	movw	r30, r24
    1974:	5a 2f       	mov	r21, r26
    1976:	0e 94 f3 24 	call	0x49e6	; 0x49e6 <__xload_2>
    197a:	07 2e       	mov	r0, r23
    197c:	00 0c       	add	r0, r0
    197e:	88 0b       	sbc	r24, r24
    1980:	99 0b       	sbc	r25, r25
    1982:	2c e3       	ldi	r18, 0x3C	; 60
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	40 e0       	ldi	r20, 0x00	; 0
    1988:	50 e0       	ldi	r21, 0x00	; 0
    198a:	0e 94 1d 24 	call	0x483a	; 0x483a <__mulsidi3>
    198e:	0e 94 d1 24 	call	0x49a2	; 0x49a2 <__adddi3>
    1992:	59 01       	movw	r10, r18
    1994:	6a 01       	movw	r12, r20
    1996:	7b 01       	movw	r14, r22
    1998:	8c 01       	movw	r16, r24
    199a:	f3 01       	movw	r30, r6
    199c:	58 2d       	mov	r21, r8
    199e:	0e 94 f3 24 	call	0x49e6	; 0x49e6 <__xload_2>
    19a2:	9b 01       	movw	r18, r22
    19a4:	93 2f       	mov	r25, r19
    19a6:	99 0f       	add	r25, r25
    19a8:	99 0b       	sbc	r25, r25
    19aa:	49 2f       	mov	r20, r25
    19ac:	59 2f       	mov	r21, r25
    19ae:	69 2f       	mov	r22, r25
    19b0:	79 2f       	mov	r23, r25
    19b2:	89 2f       	mov	r24, r25
    19b4:	0e 94 d1 24 	call	0x49a2	; 0x49a2 <__adddi3>
    19b8:	25 96       	adiw	r28, 0x05	; 5
    19ba:	e2 e1       	ldi	r30, 0x12	; 18
    19bc:	0c 94 95 20 	jmp	0x412a	; 0x412a <__epilogue_restores__>

Disassembly of section .text.__year_to_secs:

00000f82 <__year_to_secs>:
     f82:	ac e0       	ldi	r26, 0x0C	; 12
     f84:	b0 e0       	ldi	r27, 0x00	; 0
     f86:	e7 ec       	ldi	r30, 0xC7	; 199
     f88:	f7 e0       	ldi	r31, 0x07	; 7
     f8a:	0c 94 79 20 	jmp	0x40f2	; 0x40f2 <__prologue_saves__>
     f8e:	49 01       	movw	r8, r18
     f90:	5a 01       	movw	r10, r20
     f92:	6b 01       	movw	r12, r22
     f94:	7c 01       	movw	r14, r24
     f96:	1c 83       	std	Y+4, r17	; 0x04
     f98:	0b 83       	std	Y+3, r16	; 0x03
     f9a:	2a 38       	cpi	r18, 0x8A	; 138
     f9c:	31 05       	cpc	r19, r1
     f9e:	41 05       	cpc	r20, r1
     fa0:	51 05       	cpc	r21, r1
     fa2:	61 05       	cpc	r22, r1
     fa4:	71 05       	cpc	r23, r1
     fa6:	81 05       	cpc	r24, r1
     fa8:	91 05       	cpc	r25, r1
     faa:	11 f0       	breq	.+4      	; 0xfb0 <__year_to_secs+0x2e>
     fac:	0c f0       	brlt	.+2      	; 0xfb0 <__year_to_secs+0x2e>
     fae:	42 c0       	rjmp	.+132    	; 0x1034 <__DATA_REGION_LENGTH__+0x34>
     fb0:	f9 01       	movw	r30, r18
     fb2:	e4 54       	subi	r30, 0x44	; 68
     fb4:	f1 09       	sbc	r31, r1
     fb6:	f5 95       	asr	r31
     fb8:	e7 95       	ror	r30
     fba:	f5 95       	asr	r31
     fbc:	e7 95       	ror	r30
     fbe:	c9 01       	movw	r24, r18
     fc0:	83 70       	andi	r24, 0x03	; 3
     fc2:	99 27       	eor	r25, r25
     fc4:	89 2b       	or	r24, r25
     fc6:	51 f4       	brne	.+20     	; 0xfdc <__year_to_secs+0x5a>
     fc8:	31 97       	sbiw	r30, 0x01	; 1
     fca:	01 15       	cp	r16, r1
     fcc:	11 05       	cpc	r17, r1
     fce:	69 f0       	breq	.+26     	; 0xfea <__year_to_secs+0x68>
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	d8 01       	movw	r26, r16
     fd6:	8d 93       	st	X+, r24
     fd8:	9c 93       	st	X, r25
     fda:	07 c0       	rjmp	.+14     	; 0xfea <__year_to_secs+0x68>
     fdc:	8b 81       	ldd	r24, Y+3	; 0x03
     fde:	9c 81       	ldd	r25, Y+4	; 0x04
     fe0:	00 97       	sbiw	r24, 0x00	; 0
     fe2:	19 f0       	breq	.+6      	; 0xfea <__year_to_secs+0x68>
     fe4:	dc 01       	movw	r26, r24
     fe6:	1d 92       	st	X+, r1
     fe8:	1c 92       	st	X, r1
     fea:	d9 01       	movw	r26, r18
     fec:	a6 54       	subi	r26, 0x46	; 70
     fee:	b1 09       	sbc	r27, r1
     ff0:	20 e8       	ldi	r18, 0x80	; 128
     ff2:	33 e3       	ldi	r19, 0x33	; 51
     ff4:	41 ee       	ldi	r20, 0xE1	; 225
     ff6:	51 e0       	ldi	r21, 0x01	; 1
     ff8:	0e 94 eb 24 	call	0x49d6	; 0x49d6 <__mulshisi3>
     ffc:	6b 01       	movw	r12, r22
     ffe:	7c 01       	movw	r14, r24
    1000:	df 01       	movw	r26, r30
    1002:	20 e8       	ldi	r18, 0x80	; 128
    1004:	31 e5       	ldi	r19, 0x51	; 81
    1006:	41 e0       	ldi	r20, 0x01	; 1
    1008:	50 e0       	ldi	r21, 0x00	; 0
    100a:	0e 94 eb 24 	call	0x49d6	; 0x49d6 <__mulshisi3>
    100e:	dc 01       	movw	r26, r24
    1010:	cb 01       	movw	r24, r22
    1012:	8c 0d       	add	r24, r12
    1014:	9d 1d       	adc	r25, r13
    1016:	ae 1d       	adc	r26, r14
    1018:	bf 1d       	adc	r27, r15
    101a:	9c 01       	movw	r18, r24
    101c:	ad 01       	movw	r20, r26
    101e:	6c 01       	movw	r12, r24
    1020:	7d 01       	movw	r14, r26
    1022:	ff 0c       	add	r15, r15
    1024:	cc 08       	sbc	r12, r12
    1026:	dc 2c       	mov	r13, r12
    1028:	76 01       	movw	r14, r12
    102a:	ac 2d       	mov	r26, r12
    102c:	fc 2d       	mov	r31, r12
    102e:	ec 2d       	mov	r30, r12
    1030:	9c 2d       	mov	r25, r12
    1032:	cb c0       	rjmp	.+406    	; 0x11ca <__stack+0xcb>
    1034:	eb 81       	ldd	r30, Y+3	; 0x03
    1036:	fc 81       	ldd	r31, Y+4	; 0x04
    1038:	ef 2b       	or	r30, r31
    103a:	31 f4       	brne	.+12     	; 0x1048 <__DATA_REGION_LENGTH__+0x48>
    103c:	1a 82       	std	Y+2, r1	; 0x02
    103e:	19 82       	std	Y+1, r1	; 0x01
    1040:	ce 01       	movw	r24, r28
    1042:	01 96       	adiw	r24, 0x01	; 1
    1044:	9c 83       	std	Y+4, r25	; 0x04
    1046:	8b 83       	std	Y+3, r24	; 0x03
    1048:	c4 01       	movw	r24, r8
    104a:	84 56       	subi	r24, 0x64	; 100
    104c:	91 09       	sbc	r25, r1
    104e:	60 e9       	ldi	r22, 0x90	; 144
    1050:	71 e0       	ldi	r23, 0x01	; 1
    1052:	0e 94 4b 22 	call	0x4496	; 0x4496 <__divmodhi4>
    1056:	7e 83       	std	Y+6, r23	; 0x06
    1058:	6d 83       	std	Y+5, r22	; 0x05
    105a:	94 01       	movw	r18, r8
    105c:	a5 01       	movw	r20, r10
    105e:	b6 01       	movw	r22, r12
    1060:	c7 01       	movw	r24, r14
    1062:	ac e9       	ldi	r26, 0x9C	; 156
    1064:	0e 94 5f 24 	call	0x48be	; 0x48be <__adddi3_s8>
    1068:	19 01       	movw	r2, r18
    106a:	2a 01       	movw	r4, r20
    106c:	3b 01       	movw	r6, r22
    106e:	8f 83       	std	Y+7, r24	; 0x07
    1070:	98 87       	std	Y+8, r25	; 0x08
    1072:	70 e9       	ldi	r23, 0x90	; 144
    1074:	a7 2e       	mov	r10, r23
    1076:	bb 24       	eor	r11, r11
    1078:	b3 94       	inc	r11
    107a:	c1 2c       	mov	r12, r1
    107c:	d1 2c       	mov	r13, r1
    107e:	e1 2c       	mov	r14, r1
    1080:	f1 2c       	mov	r15, r1
    1082:	00 e0       	ldi	r16, 0x00	; 0
    1084:	10 e0       	ldi	r17, 0x00	; 0
    1086:	91 01       	movw	r18, r2
    1088:	a2 01       	movw	r20, r4
    108a:	b3 01       	movw	r22, r6
    108c:	0e 94 d2 1d 	call	0x3ba4	; 0x3ba4 <__moddi3>
    1090:	c9 01       	movw	r24, r18
    1092:	00 97       	sbiw	r24, 0x00	; 0
    1094:	59 f4       	brne	.+22     	; 0x10ac <__DATA_REGION_LENGTH__+0xac>
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	ab 81       	ldd	r26, Y+3	; 0x03
    109c:	bc 81       	ldd	r27, Y+4	; 0x04
    109e:	8d 93       	st	X+, r24
    10a0:	9c 93       	st	X, r25
    10a2:	20 e0       	ldi	r18, 0x00	; 0
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	40 e0       	ldi	r20, 0x00	; 0
    10a8:	50 e0       	ldi	r21, 0x00	; 0
    10aa:	33 c0       	rjmp	.+102    	; 0x1112 <__stack+0x13>
    10ac:	28 3c       	cpi	r18, 0xC8	; 200
    10ae:	31 05       	cpc	r19, r1
    10b0:	6c f0       	brlt	.+26     	; 0x10cc <__DATA_REGION_LENGTH__+0xcc>
    10b2:	2c 32       	cpi	r18, 0x2C	; 44
    10b4:	31 40       	sbci	r19, 0x01	; 1
    10b6:	2c f0       	brlt	.+10     	; 0x10c2 <__DATA_REGION_LENGTH__+0xc2>
    10b8:	8c 52       	subi	r24, 0x2C	; 44
    10ba:	91 40       	sbci	r25, 0x01	; 1
    10bc:	43 e0       	ldi	r20, 0x03	; 3
    10be:	50 e0       	ldi	r21, 0x00	; 0
    10c0:	0c c0       	rjmp	.+24     	; 0x10da <__DATA_REGION_LENGTH__+0xda>
    10c2:	88 5c       	subi	r24, 0xC8	; 200
    10c4:	91 09       	sbc	r25, r1
    10c6:	42 e0       	ldi	r20, 0x02	; 2
    10c8:	50 e0       	ldi	r21, 0x00	; 0
    10ca:	07 c0       	rjmp	.+14     	; 0x10da <__DATA_REGION_LENGTH__+0xda>
    10cc:	24 36       	cpi	r18, 0x64	; 100
    10ce:	31 05       	cpc	r19, r1
    10d0:	6c f0       	brlt	.+26     	; 0x10ec <__DATA_REGION_LENGTH__+0xec>
    10d2:	84 56       	subi	r24, 0x64	; 100
    10d4:	91 09       	sbc	r25, r1
    10d6:	41 e0       	ldi	r20, 0x01	; 1
    10d8:	50 e0       	ldi	r21, 0x00	; 0
    10da:	00 97       	sbiw	r24, 0x00	; 0
    10dc:	49 f4       	brne	.+18     	; 0x10f0 <__DATA_REGION_LENGTH__+0xf0>
    10de:	eb 81       	ldd	r30, Y+3	; 0x03
    10e0:	fc 81       	ldd	r31, Y+4	; 0x04
    10e2:	11 82       	std	Z+1, r1	; 0x01
    10e4:	10 82       	st	Z, r1
    10e6:	20 e0       	ldi	r18, 0x00	; 0
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	13 c0       	rjmp	.+38     	; 0x1112 <__stack+0x13>
    10ec:	40 e0       	ldi	r20, 0x00	; 0
    10ee:	50 e0       	ldi	r21, 0x00	; 0
    10f0:	9c 01       	movw	r18, r24
    10f2:	36 95       	lsr	r19
    10f4:	27 95       	ror	r18
    10f6:	36 95       	lsr	r19
    10f8:	27 95       	ror	r18
    10fa:	83 70       	andi	r24, 0x03	; 3
    10fc:	99 27       	eor	r25, r25
    10fe:	61 e0       	ldi	r22, 0x01	; 1
    1100:	70 e0       	ldi	r23, 0x00	; 0
    1102:	89 2b       	or	r24, r25
    1104:	11 f0       	breq	.+4      	; 0x110a <__stack+0xb>
    1106:	60 e0       	ldi	r22, 0x00	; 0
    1108:	70 e0       	ldi	r23, 0x00	; 0
    110a:	ab 81       	ldd	r26, Y+3	; 0x03
    110c:	bc 81       	ldd	r27, Y+4	; 0x04
    110e:	6d 93       	st	X+, r22
    1110:	7c 93       	st	X, r23
    1112:	81 e6       	ldi	r24, 0x61	; 97
    1114:	ed 81       	ldd	r30, Y+5	; 0x05
    1116:	fe 81       	ldd	r31, Y+6	; 0x06
    1118:	8e 9f       	mul	r24, r30
    111a:	b0 01       	movw	r22, r0
    111c:	8f 9f       	mul	r24, r31
    111e:	70 0d       	add	r23, r0
    1120:	11 24       	eor	r1, r1
    1122:	e8 e1       	ldi	r30, 0x18	; 24
    1124:	e4 9f       	mul	r30, r20
    1126:	c0 01       	movw	r24, r0
    1128:	e5 9f       	mul	r30, r21
    112a:	90 0d       	add	r25, r0
    112c:	11 24       	eor	r1, r1
    112e:	86 0f       	add	r24, r22
    1130:	97 1f       	adc	r25, r23
    1132:	ab 81       	ldd	r26, Y+3	; 0x03
    1134:	bc 81       	ldd	r27, Y+4	; 0x04
    1136:	4d 91       	ld	r20, X+
    1138:	5c 91       	ld	r21, X
    113a:	84 1b       	sub	r24, r20
    113c:	95 0b       	sbc	r25, r21
    113e:	82 0f       	add	r24, r18
    1140:	93 1f       	adc	r25, r19
    1142:	e9 2f       	mov	r30, r25
    1144:	ee 0f       	add	r30, r30
    1146:	ee 0b       	sbc	r30, r30
    1148:	20 e8       	ldi	r18, 0x80	; 128
    114a:	a2 2e       	mov	r10, r18
    114c:	31 e5       	ldi	r19, 0x51	; 81
    114e:	b3 2e       	mov	r11, r19
    1150:	cc 24       	eor	r12, r12
    1152:	c3 94       	inc	r12
    1154:	d1 2c       	mov	r13, r1
    1156:	e1 2c       	mov	r14, r1
    1158:	f1 2c       	mov	r15, r1
    115a:	00 e0       	ldi	r16, 0x00	; 0
    115c:	10 e0       	ldi	r17, 0x00	; 0
    115e:	9c 01       	movw	r18, r24
    1160:	4e 2f       	mov	r20, r30
    1162:	5e 2f       	mov	r21, r30
    1164:	6e 2f       	mov	r22, r30
    1166:	7e 2f       	mov	r23, r30
    1168:	8e 2f       	mov	r24, r30
    116a:	9e 2f       	mov	r25, r30
    116c:	0e 94 6f 18 	call	0x30de	; 0x30de <__muldi3>
    1170:	92 2e       	mov	r9, r18
    1172:	83 2e       	mov	r8, r19
    1174:	4b 83       	std	Y+3, r20	; 0x03
    1176:	5d 83       	std	Y+5, r21	; 0x05
    1178:	69 87       	std	Y+9, r22	; 0x09
    117a:	7a 87       	std	Y+10, r23	; 0x0a
    117c:	8b 87       	std	Y+11, r24	; 0x0b
    117e:	9c 87       	std	Y+12, r25	; 0x0c
    1180:	43 e3       	ldi	r20, 0x33	; 51
    1182:	b4 2e       	mov	r11, r20
    1184:	51 ee       	ldi	r21, 0xE1	; 225
    1186:	c5 2e       	mov	r12, r21
    1188:	dd 24       	eor	r13, r13
    118a:	d3 94       	inc	r13
    118c:	91 01       	movw	r18, r2
    118e:	a2 01       	movw	r20, r4
    1190:	b3 01       	movw	r22, r6
    1192:	8f 81       	ldd	r24, Y+7	; 0x07
    1194:	98 85       	ldd	r25, Y+8	; 0x08
    1196:	0e 94 6f 18 	call	0x30de	; 0x30de <__muldi3>
    119a:	59 01       	movw	r10, r18
    119c:	6a 01       	movw	r12, r20
    119e:	7b 01       	movw	r14, r22
    11a0:	8c 01       	movw	r16, r24
    11a2:	29 2d       	mov	r18, r9
    11a4:	38 2d       	mov	r19, r8
    11a6:	4b 81       	ldd	r20, Y+3	; 0x03
    11a8:	5d 81       	ldd	r21, Y+5	; 0x05
    11aa:	69 85       	ldd	r22, Y+9	; 0x09
    11ac:	7a 85       	ldd	r23, Y+10	; 0x0a
    11ae:	8b 85       	ldd	r24, Y+11	; 0x0b
    11b0:	9c 85       	ldd	r25, Y+12	; 0x0c
    11b2:	0e 94 d1 24 	call	0x49a2	; 0x49a2 <__adddi3>
    11b6:	3b 56       	subi	r19, 0x6B	; 107
    11b8:	41 49       	sbci	r20, 0x91	; 145
    11ba:	57 4c       	sbci	r21, 0xC7	; 199
    11bc:	6f 4f       	sbci	r22, 0xFF	; 255
    11be:	7f 4f       	sbci	r23, 0xFF	; 255
    11c0:	8f 4f       	sbci	r24, 0xFF	; 255
    11c2:	9f 4f       	sbci	r25, 0xFF	; 255
    11c4:	a6 2f       	mov	r26, r22
    11c6:	f7 2f       	mov	r31, r23
    11c8:	e8 2f       	mov	r30, r24
    11ca:	6a 2f       	mov	r22, r26
    11cc:	7f 2f       	mov	r23, r31
    11ce:	8e 2f       	mov	r24, r30
    11d0:	2c 96       	adiw	r28, 0x0c	; 12
    11d2:	e2 e1       	ldi	r30, 0x12	; 18
    11d4:	0c 94 95 20 	jmp	0x412a	; 0x412a <__epilogue_restores__>

Disassembly of section .text.__month_to_secs:

00004044 <__month_to_secs>:
    4044:	cf 93       	push	r28
    4046:	df 93       	push	r29
    4048:	9c 01       	movw	r18, r24
    404a:	eb 01       	movw	r28, r22
    404c:	88 0f       	add	r24, r24
    404e:	99 1f       	adc	r25, r25
    4050:	88 0f       	add	r24, r24
    4052:	99 1f       	adc	r25, r25
    4054:	09 2e       	mov	r0, r25
    4056:	00 0c       	add	r0, r0
    4058:	aa 0b       	sbc	r26, r26
    405a:	86 52       	subi	r24, 0x26	; 38
    405c:	9f 4f       	sbci	r25, 0xFF	; 255
    405e:	af 4f       	sbci	r26, 0xFF	; 255
    4060:	fc 01       	movw	r30, r24
    4062:	5a 2f       	mov	r21, r26
    4064:	0e 94 53 24 	call	0x48a6	; 0x48a6 <__xload_4>
    4068:	cd 2b       	or	r28, r29
    406a:	39 f0       	breq	.+14     	; 0x407a <__month_to_secs+0x36>
    406c:	22 30       	cpi	r18, 0x02	; 2
    406e:	31 05       	cpc	r19, r1
    4070:	24 f0       	brlt	.+8      	; 0x407a <__month_to_secs+0x36>
    4072:	60 58       	subi	r22, 0x80	; 128
    4074:	7e 4a       	sbci	r23, 0xAE	; 174
    4076:	8e 4f       	sbci	r24, 0xFE	; 254
    4078:	9f 4f       	sbci	r25, 0xFF	; 255
    407a:	df 91       	pop	r29
    407c:	cf 91       	pop	r28
    407e:	08 95       	ret

Disassembly of section .text.__secs_to_tm:

0000022c <__secs_to_tm>:
 22c:	a6 e1       	ldi	r26, 0x16	; 22
 22e:	b0 e0       	ldi	r27, 0x00	; 0
 230:	ec e1       	ldi	r30, 0x1C	; 28
 232:	f1 e0       	ldi	r31, 0x01	; 1
 234:	0c 94 79 20 	jmp	0x40f2	; 0x40f2 <__prologue_saves__>
 238:	79 01       	movw	r14, r18
 23a:	d4 2e       	mov	r13, r20
 23c:	c5 2e       	mov	r12, r21
 23e:	b6 2f       	mov	r27, r22
 240:	a7 2f       	mov	r26, r23
 242:	f8 2f       	mov	r31, r24
 244:	b9 2e       	mov	r11, r25
 246:	40 58       	subi	r20, 0x80	; 128
 248:	5d 4b       	sbci	r21, 0xBD	; 189
 24a:	6e 40       	sbci	r22, 0x0E	; 14
 24c:	7f 4f       	sbci	r23, 0xFF	; 255
 24e:	8f 4f       	sbci	r24, 0xFF	; 255
 250:	9f 4f       	sbci	r25, 0xFF	; 255
 252:	21 15       	cp	r18, r1
 254:	3b 47       	sbci	r19, 0x7B	; 123
 256:	4d 41       	sbci	r20, 0x1D	; 29
 258:	53 48       	sbci	r21, 0x83	; 131
 25a:	62 4e       	sbci	r22, 0xE2	; 226
 25c:	71 40       	sbci	r23, 0x01	; 1
 25e:	81 05       	cpc	r24, r1
 260:	91 05       	cpc	r25, r1
 262:	11 f0       	breq	.+4      	; 0x268 <__secs_to_tm+0x3c>
 264:	08 f0       	brcs	.+2      	; 0x268 <__secs_to_tm+0x3c>
 266:	08 c2       	rjmp	.+1040   	; 0x678 <__LOCK_REGION_LENGTH__+0x278>
 268:	18 8b       	std	Y+16, r17	; 0x10
 26a:	0f 87       	std	Y+15, r16	; 0x0f
 26c:	9b 2d       	mov	r25, r11
 26e:	8f 2f       	mov	r24, r31
 270:	7a 2f       	mov	r23, r26
 272:	6b 2f       	mov	r22, r27
 274:	5c 2d       	mov	r21, r12
 276:	4d 2d       	mov	r20, r13
 278:	97 01       	movw	r18, r14
 27a:	20 58       	subi	r18, 0x80	; 128
 27c:	3d 45       	sbci	r19, 0x5D	; 93
 27e:	4c 4b       	sbci	r20, 0xBC	; 188
 280:	58 43       	sbci	r21, 0x38	; 56
 282:	61 09       	sbc	r22, r1
 284:	71 09       	sbc	r23, r1
 286:	81 09       	sbc	r24, r1
 288:	91 09       	sbc	r25, r1
 28a:	19 01       	movw	r2, r18
 28c:	4d 83       	std	Y+5, r20	; 0x05
 28e:	59 87       	std	Y+9, r21	; 0x09
 290:	6d 87       	std	Y+13, r22	; 0x0d
 292:	79 83       	std	Y+1, r23	; 0x01
 294:	89 8b       	std	Y+17, r24	; 0x11
 296:	9a 8b       	std	Y+18, r25	; 0x12
 298:	f0 e8       	ldi	r31, 0x80	; 128
 29a:	af 2e       	mov	r10, r31
 29c:	a1 e5       	ldi	r26, 0x51	; 81
 29e:	ba 2e       	mov	r11, r26
 2a0:	cc 24       	eor	r12, r12
 2a2:	c3 94       	inc	r12
 2a4:	d1 2c       	mov	r13, r1
 2a6:	e1 2c       	mov	r14, r1
 2a8:	f1 2c       	mov	r15, r1
 2aa:	00 e0       	ldi	r16, 0x00	; 0
 2ac:	10 e0       	ldi	r17, 0x00	; 0
 2ae:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <__divdi3>
 2b2:	29 01       	movw	r4, r18
 2b4:	3a 01       	movw	r6, r20
 2b6:	4b 01       	movw	r8, r22
 2b8:	8e 8b       	std	Y+22, r24	; 0x16
 2ba:	9b 8b       	std	Y+19, r25	; 0x13
 2bc:	91 01       	movw	r18, r2
 2be:	4d 81       	ldd	r20, Y+5	; 0x05
 2c0:	59 85       	ldd	r21, Y+9	; 0x09
 2c2:	6d 85       	ldd	r22, Y+13	; 0x0d
 2c4:	79 81       	ldd	r23, Y+1	; 0x01
 2c6:	89 89       	ldd	r24, Y+17	; 0x11
 2c8:	9a 89       	ldd	r25, Y+18	; 0x12
 2ca:	0e 94 d2 1d 	call	0x3ba4	; 0x3ba4 <__moddi3>
 2ce:	2d 83       	std	Y+5, r18	; 0x05
 2d0:	3e 83       	std	Y+6, r19	; 0x06
 2d2:	4f 83       	std	Y+7, r20	; 0x07
 2d4:	58 87       	std	Y+8, r21	; 0x08
 2d6:	8d 81       	ldd	r24, Y+5	; 0x05
 2d8:	9e 81       	ldd	r25, Y+6	; 0x06
 2da:	af 81       	ldd	r26, Y+7	; 0x07
 2dc:	b8 85       	ldd	r27, Y+8	; 0x08
 2de:	b7 ff       	sbrs	r27, 7
 2e0:	15 c0       	rjmp	.+42     	; 0x30c <__secs_to_tm+0xe0>
 2e2:	80 58       	subi	r24, 0x80	; 128
 2e4:	9e 4a       	sbci	r25, 0xAE	; 174
 2e6:	ae 4f       	sbci	r26, 0xFE	; 254
 2e8:	bf 4f       	sbci	r27, 0xFF	; 255
 2ea:	8d 83       	std	Y+5, r24	; 0x05
 2ec:	9e 83       	std	Y+6, r25	; 0x06
 2ee:	af 83       	std	Y+7, r26	; 0x07
 2f0:	b8 87       	std	Y+8, r27	; 0x08
 2f2:	92 01       	movw	r18, r4
 2f4:	a3 01       	movw	r20, r6
 2f6:	b4 01       	movw	r22, r8
 2f8:	8e 89       	ldd	r24, Y+22	; 0x16
 2fa:	9b 89       	ldd	r25, Y+19	; 0x13
 2fc:	af ef       	ldi	r26, 0xFF	; 255
 2fe:	0e 94 5f 24 	call	0x48be	; 0x48be <__adddi3_s8>
 302:	29 01       	movw	r4, r18
 304:	3a 01       	movw	r6, r20
 306:	4b 01       	movw	r8, r22
 308:	8e 8b       	std	Y+22, r24	; 0x16
 30a:	9b 8b       	std	Y+19, r25	; 0x13
 30c:	92 01       	movw	r18, r4
 30e:	a3 01       	movw	r20, r6
 310:	b4 01       	movw	r22, r8
 312:	8e 89       	ldd	r24, Y+22	; 0x16
 314:	9b 89       	ldd	r25, Y+19	; 0x13
 316:	a3 e0       	ldi	r26, 0x03	; 3
 318:	0e 94 5f 24 	call	0x48be	; 0x48be <__adddi3_s8>
 31c:	e7 e0       	ldi	r30, 0x07	; 7
 31e:	ae 2e       	mov	r10, r30
 320:	b1 2c       	mov	r11, r1
 322:	c1 2c       	mov	r12, r1
 324:	d1 2c       	mov	r13, r1
 326:	e1 2c       	mov	r14, r1
 328:	f1 2c       	mov	r15, r1
 32a:	00 e0       	ldi	r16, 0x00	; 0
 32c:	10 e0       	ldi	r17, 0x00	; 0
 32e:	0e 94 d2 1d 	call	0x3ba4	; 0x3ba4 <__moddi3>
 332:	2d 87       	std	Y+13, r18	; 0x0d
 334:	3e 87       	std	Y+14, r19	; 0x0e
 336:	ad 85       	ldd	r26, Y+13	; 0x0d
 338:	be 85       	ldd	r27, Y+14	; 0x0e
 33a:	b7 ff       	sbrs	r27, 7
 33c:	03 c0       	rjmp	.+6      	; 0x344 <__secs_to_tm+0x118>
 33e:	17 96       	adiw	r26, 0x07	; 7
 340:	be 87       	std	Y+14, r27	; 0x0e
 342:	ad 87       	std	Y+13, r26	; 0x0d
 344:	51 eb       	ldi	r21, 0xB1	; 177
 346:	a5 2e       	mov	r10, r21
 348:	6a e3       	ldi	r22, 0x3A	; 58
 34a:	b6 2e       	mov	r11, r22
 34c:	72 e0       	ldi	r23, 0x02	; 2
 34e:	c7 2e       	mov	r12, r23
 350:	d1 2c       	mov	r13, r1
 352:	e1 2c       	mov	r14, r1
 354:	f1 2c       	mov	r15, r1
 356:	00 e0       	ldi	r16, 0x00	; 0
 358:	10 e0       	ldi	r17, 0x00	; 0
 35a:	92 01       	movw	r18, r4
 35c:	a3 01       	movw	r20, r6
 35e:	b4 01       	movw	r22, r8
 360:	8e 89       	ldd	r24, Y+22	; 0x16
 362:	9b 89       	ldd	r25, Y+19	; 0x13
 364:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <__divdi3>
 368:	29 87       	std	Y+9, r18	; 0x09
 36a:	3a 87       	std	Y+10, r19	; 0x0a
 36c:	4b 87       	std	Y+11, r20	; 0x0b
 36e:	5c 87       	std	Y+12, r21	; 0x0c
 370:	92 01       	movw	r18, r4
 372:	a3 01       	movw	r20, r6
 374:	b4 01       	movw	r22, r8
 376:	8e 89       	ldd	r24, Y+22	; 0x16
 378:	9b 89       	ldd	r25, Y+19	; 0x13
 37a:	0e 94 d2 1d 	call	0x3ba4	; 0x3ba4 <__moddi3>
 37e:	82 2e       	mov	r8, r18
 380:	93 2e       	mov	r9, r19
 382:	a4 2e       	mov	r10, r20
 384:	b5 2e       	mov	r11, r21
 386:	b7 fe       	sbrs	r11, 7
 388:	12 c0       	rjmp	.+36     	; 0x3ae <__secs_to_tm+0x182>
 38a:	b1 eb       	ldi	r27, 0xB1	; 177
 38c:	8b 0e       	add	r8, r27
 38e:	ba e3       	ldi	r27, 0x3A	; 58
 390:	9b 1e       	adc	r9, r27
 392:	b2 e0       	ldi	r27, 0x02	; 2
 394:	ab 1e       	adc	r10, r27
 396:	b1 1c       	adc	r11, r1
 398:	89 85       	ldd	r24, Y+9	; 0x09
 39a:	9a 85       	ldd	r25, Y+10	; 0x0a
 39c:	ab 85       	ldd	r26, Y+11	; 0x0b
 39e:	bc 85       	ldd	r27, Y+12	; 0x0c
 3a0:	01 97       	sbiw	r24, 0x01	; 1
 3a2:	a1 09       	sbc	r26, r1
 3a4:	b1 09       	sbc	r27, r1
 3a6:	89 87       	std	Y+9, r24	; 0x09
 3a8:	9a 87       	std	Y+10, r25	; 0x0a
 3aa:	ab 87       	std	Y+11, r26	; 0x0b
 3ac:	bc 87       	std	Y+12, r27	; 0x0c
 3ae:	c5 01       	movw	r24, r10
 3b0:	b4 01       	movw	r22, r8
 3b2:	2c ea       	ldi	r18, 0xAC	; 172
 3b4:	3e e8       	ldi	r19, 0x8E	; 142
 3b6:	40 e0       	ldi	r20, 0x00	; 0
 3b8:	50 e0       	ldi	r21, 0x00	; 0
 3ba:	0e 94 61 21 	call	0x42c2	; 0x42c2 <__divmodsi4>
 3be:	69 01       	movw	r12, r18
 3c0:	7a 01       	movw	r14, r20
 3c2:	24 30       	cpi	r18, 0x04	; 4
 3c4:	31 05       	cpc	r19, r1
 3c6:	41 05       	cpc	r20, r1
 3c8:	51 05       	cpc	r21, r1
 3ca:	29 f4       	brne	.+10     	; 0x3d6 <__secs_to_tm+0x1aa>
 3cc:	43 e0       	ldi	r20, 0x03	; 3
 3ce:	c4 2e       	mov	r12, r20
 3d0:	d1 2c       	mov	r13, r1
 3d2:	e1 2c       	mov	r14, r1
 3d4:	f1 2c       	mov	r15, r1
 3d6:	a4 e5       	ldi	r26, 0x54	; 84
 3d8:	b1 e7       	ldi	r27, 0x71	; 113
 3da:	a7 01       	movw	r20, r14
 3dc:	96 01       	movw	r18, r12
 3de:	0e 94 ee 24 	call	0x49dc	; 0x49dc <__mulohisi3>
 3e2:	2b 01       	movw	r4, r22
 3e4:	3c 01       	movw	r6, r24
 3e6:	48 0c       	add	r4, r8
 3e8:	59 1c       	adc	r5, r9
 3ea:	6a 1c       	adc	r6, r10
 3ec:	7b 1c       	adc	r7, r11
 3ee:	c3 01       	movw	r24, r6
 3f0:	b2 01       	movw	r22, r4
 3f2:	25 eb       	ldi	r18, 0xB5	; 181
 3f4:	35 e0       	ldi	r19, 0x05	; 5
 3f6:	40 e0       	ldi	r20, 0x00	; 0
 3f8:	50 e0       	ldi	r21, 0x00	; 0
 3fa:	0e 94 61 21 	call	0x42c2	; 0x42c2 <__divmodsi4>
 3fe:	49 01       	movw	r8, r18
 400:	5a 01       	movw	r10, r20
 402:	29 31       	cpi	r18, 0x19	; 25
 404:	31 05       	cpc	r19, r1
 406:	41 05       	cpc	r20, r1
 408:	51 05       	cpc	r21, r1
 40a:	29 f4       	brne	.+10     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 40c:	38 e1       	ldi	r19, 0x18	; 24
 40e:	83 2e       	mov	r8, r19
 410:	91 2c       	mov	r9, r1
 412:	a1 2c       	mov	r10, r1
 414:	b1 2c       	mov	r11, r1
 416:	ab e4       	ldi	r26, 0x4B	; 75
 418:	ba ef       	ldi	r27, 0xFA	; 250
 41a:	a5 01       	movw	r20, r10
 41c:	94 01       	movw	r18, r8
 41e:	0e 94 ee 24 	call	0x49dc	; 0x49dc <__mulohisi3>
 422:	46 0e       	add	r4, r22
 424:	57 1e       	adc	r5, r23
 426:	68 1e       	adc	r6, r24
 428:	79 1e       	adc	r7, r25
 42a:	c3 01       	movw	r24, r6
 42c:	b2 01       	movw	r22, r4
 42e:	2d e6       	ldi	r18, 0x6D	; 109
 430:	31 e0       	ldi	r19, 0x01	; 1
 432:	40 e0       	ldi	r20, 0x00	; 0
 434:	50 e0       	ldi	r21, 0x00	; 0
 436:	0e 94 61 21 	call	0x42c2	; 0x42c2 <__divmodsi4>
 43a:	29 83       	std	Y+1, r18	; 0x01
 43c:	3a 83       	std	Y+2, r19	; 0x02
 43e:	4b 83       	std	Y+3, r20	; 0x03
 440:	5c 83       	std	Y+4, r21	; 0x04
 442:	24 30       	cpi	r18, 0x04	; 4
 444:	31 05       	cpc	r19, r1
 446:	41 05       	cpc	r20, r1
 448:	51 05       	cpc	r21, r1
 44a:	41 f4       	brne	.+16     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 44c:	83 e0       	ldi	r24, 0x03	; 3
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	a0 e0       	ldi	r26, 0x00	; 0
 452:	b0 e0       	ldi	r27, 0x00	; 0
 454:	89 83       	std	Y+1, r24	; 0x01
 456:	9a 83       	std	Y+2, r25	; 0x02
 458:	ab 83       	std	Y+3, r26	; 0x03
 45a:	bc 83       	std	Y+4, r27	; 0x04
 45c:	a3 e9       	ldi	r26, 0x93	; 147
 45e:	be ef       	ldi	r27, 0xFE	; 254
 460:	29 81       	ldd	r18, Y+1	; 0x01
 462:	3a 81       	ldd	r19, Y+2	; 0x02
 464:	4b 81       	ldd	r20, Y+3	; 0x03
 466:	5c 81       	ldd	r21, Y+4	; 0x04
 468:	0e 94 ee 24 	call	0x49dc	; 0x49dc <__mulohisi3>
 46c:	46 0e       	add	r4, r22
 46e:	57 1e       	adc	r5, r23
 470:	68 1e       	adc	r6, r24
 472:	79 1e       	adc	r7, r25
 474:	23 2b       	or	r18, r19
 476:	24 2b       	or	r18, r20
 478:	25 2b       	or	r18, r21
 47a:	81 f4       	brne	.+32     	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
 47c:	81 14       	cp	r8, r1
 47e:	91 04       	cpc	r9, r1
 480:	a1 04       	cpc	r10, r1
 482:	b1 04       	cpc	r11, r1
 484:	71 f4       	brne	.+28     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 486:	31 e0       	ldi	r19, 0x01	; 1
 488:	20 e0       	ldi	r18, 0x00	; 0
 48a:	c1 14       	cp	r12, r1
 48c:	d1 04       	cpc	r13, r1
 48e:	e1 04       	cpc	r14, r1
 490:	f1 04       	cpc	r15, r1
 492:	09 f0       	breq	.+2      	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
 494:	30 e0       	ldi	r19, 0x00	; 0
 496:	83 2f       	mov	r24, r19
 498:	92 2f       	mov	r25, r18
 49a:	05 c0       	rjmp	.+10     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 49c:	80 e0       	ldi	r24, 0x00	; 0
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	12 01       	movw	r2, r4
 4a8:	ab e3       	ldi	r26, 0x3B	; 59
 4aa:	2a 0e       	add	r2, r26
 4ac:	31 1c       	adc	r3, r1
 4ae:	28 0e       	add	r2, r24
 4b0:	39 1e       	adc	r3, r25
 4b2:	9c 01       	movw	r18, r24
 4b4:	24 59       	subi	r18, 0x94	; 148
 4b6:	3e 4f       	sbci	r19, 0xFE	; 254
 4b8:	22 15       	cp	r18, r2
 4ba:	33 05       	cpc	r19, r3
 4bc:	24 f4       	brge	.+8      	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
 4be:	83 59       	subi	r24, 0x93	; 147
 4c0:	9e 4f       	sbci	r25, 0xFE	; 254
 4c2:	28 1a       	sub	r2, r24
 4c4:	39 0a       	sbc	r3, r25
 4c6:	92 e0       	ldi	r25, 0x02	; 2
 4c8:	88 0c       	add	r8, r8
 4ca:	99 1c       	adc	r9, r9
 4cc:	aa 1c       	adc	r10, r10
 4ce:	bb 1c       	adc	r11, r11
 4d0:	9a 95       	dec	r25
 4d2:	d1 f7       	brne	.-12     	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
 4d4:	89 81       	ldd	r24, Y+1	; 0x01
 4d6:	9a 81       	ldd	r25, Y+2	; 0x02
 4d8:	ab 81       	ldd	r26, Y+3	; 0x03
 4da:	bc 81       	ldd	r27, Y+4	; 0x04
 4dc:	88 0e       	add	r8, r24
 4de:	99 1e       	adc	r9, r25
 4e0:	aa 1e       	adc	r10, r26
 4e2:	bb 1e       	adc	r11, r27
 4e4:	a4 e6       	ldi	r26, 0x64	; 100
 4e6:	b0 e0       	ldi	r27, 0x00	; 0
 4e8:	a7 01       	movw	r20, r14
 4ea:	96 01       	movw	r18, r12
 4ec:	0e 94 8c 24 	call	0x4918	; 0x4918 <__muluhisi3>
 4f0:	86 0e       	add	r8, r22
 4f2:	97 1e       	adc	r9, r23
 4f4:	a8 1e       	adc	r10, r24
 4f6:	b9 1e       	adc	r11, r25
 4f8:	d5 01       	movw	r26, r10
 4fa:	c4 01       	movw	r24, r8
 4fc:	bb 0f       	add	r27, r27
 4fe:	88 0b       	sbc	r24, r24
 500:	98 2f       	mov	r25, r24
 502:	dc 01       	movw	r26, r24
 504:	89 83       	std	Y+1, r24	; 0x01
 506:	9a 83       	std	Y+2, r25	; 0x02
 508:	ab 83       	std	Y+3, r26	; 0x03
 50a:	bc 83       	std	Y+4, r27	; 0x04
 50c:	69 85       	ldd	r22, Y+9	; 0x09
 50e:	7a 85       	ldd	r23, Y+10	; 0x0a
 510:	8b 85       	ldd	r24, Y+11	; 0x0b
 512:	9c 85       	ldd	r25, Y+12	; 0x0c
 514:	20 e9       	ldi	r18, 0x90	; 144
 516:	31 e0       	ldi	r19, 0x01	; 1
 518:	40 e0       	ldi	r20, 0x00	; 0
 51a:	50 e0       	ldi	r21, 0x00	; 0
 51c:	0e 94 1d 24 	call	0x483a	; 0x483a <__mulsidi3>
 520:	f2 2f       	mov	r31, r18
 522:	e3 2f       	mov	r30, r19
 524:	6a 01       	movw	r12, r20
 526:	7b 01       	movw	r14, r22
 528:	8c 01       	movw	r16, r24
 52a:	94 01       	movw	r18, r8
 52c:	a5 01       	movw	r20, r10
 52e:	69 81       	ldd	r22, Y+1	; 0x01
 530:	76 2f       	mov	r23, r22
 532:	86 2f       	mov	r24, r22
 534:	96 2f       	mov	r25, r22
 536:	af 2e       	mov	r10, r31
 538:	be 2e       	mov	r11, r30
 53a:	0e 94 d1 24 	call	0x49a2	; 0x49a2 <__adddi3>
 53e:	49 01       	movw	r8, r18
 540:	5a 01       	movw	r10, r20
 542:	6b 01       	movw	r12, r22
 544:	7c 01       	movw	r14, r24
 546:	29 ea       	ldi	r18, 0xA9	; 169
 548:	31 e0       	ldi	r19, 0x01	; 1
 54a:	40 e0       	ldi	r20, 0x00	; 0
 54c:	1a 82       	std	Y+2, r1	; 0x02
 54e:	19 82       	std	Y+1, r1	; 0x01
 550:	f9 01       	movw	r30, r18
 552:	84 91       	lpm	r24, Z
 554:	47 fd       	sbrc	r20, 7
 556:	80 81       	ld	r24, Z
 558:	08 2e       	mov	r0, r24
 55a:	00 0c       	add	r0, r0
 55c:	99 0b       	sbc	r25, r25
 55e:	aa 0b       	sbc	r26, r26
 560:	bb 0b       	sbc	r27, r27
 562:	2f 5f       	subi	r18, 0xFF	; 255
 564:	3f 4f       	sbci	r19, 0xFF	; 255
 566:	4f 4f       	sbci	r20, 0xFF	; 255
 568:	48 16       	cp	r4, r24
 56a:	59 06       	cpc	r5, r25
 56c:	6a 06       	cpc	r6, r26
 56e:	7b 06       	cpc	r7, r27
 570:	54 f0       	brlt	.+20     	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
 572:	48 1a       	sub	r4, r24
 574:	59 0a       	sbc	r5, r25
 576:	6a 0a       	sbc	r6, r26
 578:	7b 0a       	sbc	r7, r27
 57a:	a9 81       	ldd	r26, Y+1	; 0x01
 57c:	ba 81       	ldd	r27, Y+2	; 0x02
 57e:	11 96       	adiw	r26, 0x01	; 1
 580:	ba 83       	std	Y+2, r27	; 0x02
 582:	a9 83       	std	Y+1, r26	; 0x01
 584:	e5 cf       	rjmp	.-54     	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
 586:	e9 81       	ldd	r30, Y+1	; 0x01
 588:	fa 81       	ldd	r31, Y+2	; 0x02
 58a:	ea 30       	cpi	r30, 0x0A	; 10
 58c:	f1 05       	cpc	r31, r1
 58e:	74 f0       	brlt	.+28     	; 0x5ac <__LOCK_REGION_LENGTH__+0x1ac>
 590:	3c 97       	sbiw	r30, 0x0c	; 12
 592:	fa 83       	std	Y+2, r31	; 0x02
 594:	e9 83       	std	Y+1, r30	; 0x01
 596:	94 01       	movw	r18, r8
 598:	a5 01       	movw	r20, r10
 59a:	b6 01       	movw	r22, r12
 59c:	c7 01       	movw	r24, r14
 59e:	a1 e0       	ldi	r26, 0x01	; 1
 5a0:	0e 94 5f 24 	call	0x48be	; 0x48be <__adddi3_s8>
 5a4:	49 01       	movw	r8, r18
 5a6:	5a 01       	movw	r10, r20
 5a8:	6b 01       	movw	r12, r22
 5aa:	7c 01       	movw	r14, r24
 5ac:	94 01       	movw	r18, r8
 5ae:	a5 01       	movw	r20, r10
 5b0:	b6 01       	movw	r22, r12
 5b2:	c7 01       	movw	r24, r14
 5b4:	2c 59       	subi	r18, 0x9C	; 156
 5b6:	3f 47       	sbci	r19, 0x7F	; 127
 5b8:	4f 4f       	sbci	r20, 0xFF	; 255
 5ba:	5f 4f       	sbci	r21, 0xFF	; 255
 5bc:	6f 4f       	sbci	r22, 0xFF	; 255
 5be:	7f 4f       	sbci	r23, 0xFF	; 255
 5c0:	8f 4f       	sbci	r24, 0xFF	; 255
 5c2:	9f 4f       	sbci	r25, 0xFF	; 255
 5c4:	2f 3f       	cpi	r18, 0xFF	; 255
 5c6:	3f 4f       	sbci	r19, 0xFF	; 255
 5c8:	41 05       	cpc	r20, r1
 5ca:	51 05       	cpc	r21, r1
 5cc:	61 05       	cpc	r22, r1
 5ce:	71 05       	cpc	r23, r1
 5d0:	81 05       	cpc	r24, r1
 5d2:	91 05       	cpc	r25, r1
 5d4:	11 f0       	breq	.+4      	; 0x5da <__LOCK_REGION_LENGTH__+0x1da>
 5d6:	08 f0       	brcs	.+2      	; 0x5da <__LOCK_REGION_LENGTH__+0x1da>
 5d8:	4f c0       	rjmp	.+158    	; 0x678 <__LOCK_REGION_LENGTH__+0x278>
 5da:	24 e6       	ldi	r18, 0x64	; 100
 5dc:	82 0e       	add	r8, r18
 5de:	91 1c       	adc	r9, r1
 5e0:	af 85       	ldd	r26, Y+15	; 0x0f
 5e2:	b8 89       	ldd	r27, Y+16	; 0x10
 5e4:	1b 96       	adiw	r26, 0x0b	; 11
 5e6:	9c 92       	st	X, r9
 5e8:	8e 92       	st	-X, r8
 5ea:	1a 97       	sbiw	r26, 0x0a	; 10
 5ec:	e9 81       	ldd	r30, Y+1	; 0x01
 5ee:	fa 81       	ldd	r31, Y+2	; 0x02
 5f0:	32 96       	adiw	r30, 0x02	; 2
 5f2:	19 96       	adiw	r26, 0x09	; 9
 5f4:	fc 93       	st	X, r31
 5f6:	ee 93       	st	-X, r30
 5f8:	18 97       	sbiw	r26, 0x08	; 8
 5fa:	ff ef       	ldi	r31, 0xFF	; 255
 5fc:	4f 1a       	sub	r4, r31
 5fe:	5f 0a       	sbc	r5, r31
 600:	17 96       	adiw	r26, 0x07	; 7
 602:	5c 92       	st	X, r5
 604:	4e 92       	st	-X, r4
 606:	16 97       	sbiw	r26, 0x06	; 6
 608:	8d 85       	ldd	r24, Y+13	; 0x0d
 60a:	9e 85       	ldd	r25, Y+14	; 0x0e
 60c:	1d 96       	adiw	r26, 0x0d	; 13
 60e:	9c 93       	st	X, r25
 610:	8e 93       	st	-X, r24
 612:	1c 97       	sbiw	r26, 0x0c	; 12
 614:	1f 96       	adiw	r26, 0x0f	; 15
 616:	3c 92       	st	X, r3
 618:	2e 92       	st	-X, r2
 61a:	1e 97       	sbiw	r26, 0x0e	; 14
 61c:	6d 81       	ldd	r22, Y+5	; 0x05
 61e:	7e 81       	ldd	r23, Y+6	; 0x06
 620:	8f 81       	ldd	r24, Y+7	; 0x07
 622:	98 85       	ldd	r25, Y+8	; 0x08
 624:	20 e1       	ldi	r18, 0x10	; 16
 626:	3e e0       	ldi	r19, 0x0E	; 14
 628:	40 e0       	ldi	r20, 0x00	; 0
 62a:	50 e0       	ldi	r21, 0x00	; 0
 62c:	0e 94 61 21 	call	0x42c2	; 0x42c2 <__divmodsi4>
 630:	af 85       	ldd	r26, Y+15	; 0x0f
 632:	b8 89       	ldd	r27, Y+16	; 0x10
 634:	15 96       	adiw	r26, 0x05	; 5
 636:	3c 93       	st	X, r19
 638:	2e 93       	st	-X, r18
 63a:	14 97       	sbiw	r26, 0x04	; 4
 63c:	8c e3       	ldi	r24, 0x3C	; 60
 63e:	c8 2e       	mov	r12, r24
 640:	d1 2c       	mov	r13, r1
 642:	e1 2c       	mov	r14, r1
 644:	f1 2c       	mov	r15, r1
 646:	6d 81       	ldd	r22, Y+5	; 0x05
 648:	7e 81       	ldd	r23, Y+6	; 0x06
 64a:	8f 81       	ldd	r24, Y+7	; 0x07
 64c:	98 85       	ldd	r25, Y+8	; 0x08
 64e:	a7 01       	movw	r20, r14
 650:	96 01       	movw	r18, r12
 652:	0e 94 61 21 	call	0x42c2	; 0x42c2 <__divmodsi4>
 656:	4b 01       	movw	r8, r22
 658:	5c 01       	movw	r10, r24
 65a:	ca 01       	movw	r24, r20
 65c:	b9 01       	movw	r22, r18
 65e:	a7 01       	movw	r20, r14
 660:	96 01       	movw	r18, r12
 662:	0e 94 61 21 	call	0x42c2	; 0x42c2 <__divmodsi4>
 666:	ef 85       	ldd	r30, Y+15	; 0x0f
 668:	f8 89       	ldd	r31, Y+16	; 0x10
 66a:	73 83       	std	Z+3, r23	; 0x03
 66c:	62 83       	std	Z+2, r22	; 0x02
 66e:	91 82       	std	Z+1, r9	; 0x01
 670:	80 82       	st	Z, r8
 672:	80 e0       	ldi	r24, 0x00	; 0
 674:	90 e0       	ldi	r25, 0x00	; 0
 676:	02 c0       	rjmp	.+4      	; 0x67c <__LOCK_REGION_LENGTH__+0x27c>
 678:	8f ef       	ldi	r24, 0xFF	; 255
 67a:	9f ef       	ldi	r25, 0xFF	; 255
 67c:	66 96       	adiw	r28, 0x16	; 22
 67e:	e2 e1       	ldi	r30, 0x12	; 18
 680:	0c 94 95 20 	jmp	0x412a	; 0x412a <__epilogue_restores__>

Disassembly of section .text.libgcc.div:

00004496 <__divmodhi4>:
    4496:	97 fb       	bst	r25, 7
    4498:	07 2e       	mov	r0, r23
    449a:	16 f4       	brtc	.+4      	; 0x44a0 <__divmodhi4+0xa>
    449c:	00 94       	com	r0
    449e:	07 d0       	rcall	.+14     	; 0x44ae <__divmodhi4_neg1>
    44a0:	77 fd       	sbrc	r23, 7
    44a2:	09 d0       	rcall	.+18     	; 0x44b6 <__divmodhi4_neg2>
    44a4:	0e 94 37 22 	call	0x446e	; 0x446e <__udivmodhi4>
    44a8:	07 fc       	sbrc	r0, 7
    44aa:	05 d0       	rcall	.+10     	; 0x44b6 <__divmodhi4_neg2>
    44ac:	3e f4       	brtc	.+14     	; 0x44bc <__divmodhi4_exit>

000044ae <__divmodhi4_neg1>:
    44ae:	90 95       	com	r25
    44b0:	81 95       	neg	r24
    44b2:	9f 4f       	sbci	r25, 0xFF	; 255
    44b4:	08 95       	ret

000044b6 <__divmodhi4_neg2>:
    44b6:	70 95       	com	r23
    44b8:	61 95       	neg	r22
    44ba:	7f 4f       	sbci	r23, 0xFF	; 255

000044bc <__divmodhi4_exit>:
    44bc:	08 95       	ret

Disassembly of section .text.libgcc.mul:

000030de <__muldi3>:
    30de:	df 93       	push	r29
    30e0:	cf 93       	push	r28
    30e2:	1f 93       	push	r17
    30e4:	0f 93       	push	r16
    30e6:	9a 9d       	mul	r25, r10
    30e8:	f0 2d       	mov	r31, r0
    30ea:	21 9f       	mul	r18, r17
    30ec:	f0 0d       	add	r31, r0
    30ee:	8b 9d       	mul	r24, r11
    30f0:	f0 0d       	add	r31, r0
    30f2:	8a 9d       	mul	r24, r10
    30f4:	e0 2d       	mov	r30, r0
    30f6:	f1 0d       	add	r31, r1
    30f8:	03 9f       	mul	r16, r19
    30fa:	f0 0d       	add	r31, r0
    30fc:	02 9f       	mul	r16, r18
    30fe:	e0 0d       	add	r30, r0
    3100:	f1 1d       	adc	r31, r1
    3102:	4e 9d       	mul	r20, r14
    3104:	e0 0d       	add	r30, r0
    3106:	f1 1d       	adc	r31, r1
    3108:	5e 9d       	mul	r21, r14
    310a:	f0 0d       	add	r31, r0
    310c:	4f 9d       	mul	r20, r15
    310e:	f0 0d       	add	r31, r0
    3110:	7f 93       	push	r23
    3112:	6f 93       	push	r22
    3114:	bf 92       	push	r11
    3116:	af 92       	push	r10
    3118:	5f 93       	push	r21
    311a:	4f 93       	push	r20
    311c:	d5 01       	movw	r26, r10
    311e:	0e 94 0e 24 	call	0x481c	; 0x481c <__umulhisi3>
    3122:	8b 01       	movw	r16, r22
    3124:	ac 01       	movw	r20, r24
    3126:	d7 01       	movw	r26, r14
    3128:	0e 94 0e 24 	call	0x481c	; 0x481c <__umulhisi3>
    312c:	eb 01       	movw	r28, r22
    312e:	e8 0f       	add	r30, r24
    3130:	f9 1f       	adc	r31, r25
    3132:	d6 01       	movw	r26, r12
    3134:	0e 94 c8 24 	call	0x4990	; 0x4990 <__muldi3_6>
    3138:	2f 91       	pop	r18
    313a:	3f 91       	pop	r19
    313c:	d6 01       	movw	r26, r12
    313e:	0e 94 0e 24 	call	0x481c	; 0x481c <__umulhisi3>
    3142:	c6 0f       	add	r28, r22
    3144:	d7 1f       	adc	r29, r23
    3146:	e8 1f       	adc	r30, r24
    3148:	f9 1f       	adc	r31, r25
    314a:	af 91       	pop	r26
    314c:	bf 91       	pop	r27
    314e:	0e 94 c8 24 	call	0x4990	; 0x4990 <__muldi3_6>
    3152:	2f 91       	pop	r18
    3154:	3f 91       	pop	r19
    3156:	0e 94 0e 24 	call	0x481c	; 0x481c <__umulhisi3>
    315a:	c6 0f       	add	r28, r22
    315c:	d7 1f       	adc	r29, r23
    315e:	e8 1f       	adc	r30, r24
    3160:	f9 1f       	adc	r31, r25
    3162:	d6 01       	movw	r26, r12
    3164:	0e 94 0e 24 	call	0x481c	; 0x481c <__umulhisi3>
    3168:	e6 0f       	add	r30, r22
    316a:	f7 1f       	adc	r31, r23
    316c:	98 01       	movw	r18, r16
    316e:	be 01       	movw	r22, r28
    3170:	cf 01       	movw	r24, r30
    3172:	11 24       	eor	r1, r1
    3174:	0f 91       	pop	r16
    3176:	1f 91       	pop	r17
    3178:	cf 91       	pop	r28
    317a:	df 91       	pop	r29
    317c:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00004990 <__muldi3_6>:
    4990:	0e 94 0e 24 	call	0x481c	; 0x481c <__umulhisi3>
    4994:	46 0f       	add	r20, r22
    4996:	57 1f       	adc	r21, r23
    4998:	c8 1f       	adc	r28, r24
    499a:	d9 1f       	adc	r29, r25
    499c:	08 f4       	brcc	.+2      	; 0x49a0 <__muldi3_6+0x10>
    499e:	31 96       	adiw	r30, 0x01	; 1
    49a0:	08 95       	ret

Disassembly of section .text.libgcc.mul:

0000483a <__mulsidi3>:
    483a:	97 fb       	bst	r25, 7
    483c:	57 ff       	sbrs	r21, 7
    483e:	0c 94 86 1e 	jmp	0x3d0c	; 0x3d0c <__umulsidi3_helper>
    4842:	9f 93       	push	r25
    4844:	8f 93       	push	r24
    4846:	0e 94 86 1e 	call	0x3d0c	; 0x3d0c <__umulsidi3_helper>
    484a:	6e 1b       	sub	r22, r30
    484c:	7f 0b       	sbc	r23, r31
    484e:	af 91       	pop	r26
    4850:	bf 91       	pop	r27
    4852:	8a 0b       	sbc	r24, r26
    4854:	9b 0b       	sbc	r25, r27
    4856:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00003d0a <__umulsidi3>:
    3d0a:	e8 94       	clt

00003d0c <__umulsidi3_helper>:
    3d0c:	df 93       	push	r29
    3d0e:	cf 93       	push	r28
    3d10:	fc 01       	movw	r30, r24
    3d12:	db 01       	movw	r26, r22
    3d14:	0e 94 0e 24 	call	0x481c	; 0x481c <__umulhisi3>
    3d18:	7f 93       	push	r23
    3d1a:	6f 93       	push	r22
    3d1c:	e9 01       	movw	r28, r18
    3d1e:	9a 01       	movw	r18, r20
    3d20:	ac 01       	movw	r20, r24
    3d22:	bf 93       	push	r27
    3d24:	af 93       	push	r26
    3d26:	3f 93       	push	r19
    3d28:	2f 93       	push	r18
    3d2a:	df 01       	movw	r26, r30
    3d2c:	0e 94 0e 24 	call	0x481c	; 0x481c <__umulhisi3>
    3d30:	26 f4       	brtc	.+8      	; 0x3d3a <__umulsidi3_helper+0x2e>
    3d32:	6c 1b       	sub	r22, r28
    3d34:	7d 0b       	sbc	r23, r29
    3d36:	82 0b       	sbc	r24, r18
    3d38:	93 0b       	sbc	r25, r19
    3d3a:	9e 01       	movw	r18, r28
    3d3c:	eb 01       	movw	r28, r22
    3d3e:	fc 01       	movw	r30, r24
    3d40:	0e 94 c8 24 	call	0x4990	; 0x4990 <__muldi3_6>
    3d44:	af 91       	pop	r26
    3d46:	bf 91       	pop	r27
    3d48:	2f 91       	pop	r18
    3d4a:	3f 91       	pop	r19
    3d4c:	0e 94 c8 24 	call	0x4990	; 0x4990 <__muldi3_6>
    3d50:	be 01       	movw	r22, r28
    3d52:	cf 01       	movw	r24, r30
    3d54:	f9 01       	movw	r30, r18
    3d56:	2f 91       	pop	r18
    3d58:	3f 91       	pop	r19
    3d5a:	cf 91       	pop	r28
    3d5c:	df 91       	pop	r29
    3d5e:	08 95       	ret

Disassembly of section .text.libgcc.div:

00003ba4 <__moddi3>:
    3ba4:	68 94       	set
    3ba6:	01 c0       	rjmp	.+2      	; 0x3baa <__divdi3_moddi3>

00003ba8 <__divdi3>:
    3ba8:	e8 94       	clt

00003baa <__divdi3_moddi3>:
    3baa:	f9 2f       	mov	r31, r25
    3bac:	f1 2b       	or	r31, r17
    3bae:	12 f0       	brmi	.+4      	; 0x3bb4 <__divdi3_moddi3+0xa>
    3bb0:	0c 94 2f 24 	jmp	0x485e	; 0x485e <__udivdi3_umoddi3>
    3bb4:	a0 e0       	ldi	r26, 0x00	; 0
    3bb6:	b0 e0       	ldi	r27, 0x00	; 0
    3bb8:	e0 ee       	ldi	r30, 0xE0	; 224
    3bba:	fd e1       	ldi	r31, 0x1D	; 29
    3bbc:	0c 94 7f 20 	jmp	0x40fe	; 0x40fe <__prologue_saves__+0xc>
    3bc0:	09 2e       	mov	r0, r25
    3bc2:	05 94       	asr	r0
    3bc4:	22 f4       	brpl	.+8      	; 0x3bce <__divdi3_moddi3+0x24>
    3bc6:	0e 94 fe 23 	call	0x47fc	; 0x47fc <__negdi2>
    3bca:	11 23       	and	r17, r17
    3bcc:	92 f4       	brpl	.+36     	; 0x3bf2 <__divdi3_moddi3+0x48>
    3bce:	f0 e8       	ldi	r31, 0x80	; 128
    3bd0:	0f 26       	eor	r0, r31
    3bd2:	ff ef       	ldi	r31, 0xFF	; 255
    3bd4:	e0 94       	com	r14
    3bd6:	f0 94       	com	r15
    3bd8:	00 95       	com	r16
    3bda:	10 95       	com	r17
    3bdc:	b0 94       	com	r11
    3bde:	c0 94       	com	r12
    3be0:	d0 94       	com	r13
    3be2:	a1 94       	neg	r10
    3be4:	bf 0a       	sbc	r11, r31
    3be6:	cf 0a       	sbc	r12, r31
    3be8:	df 0a       	sbc	r13, r31
    3bea:	ef 0a       	sbc	r14, r31
    3bec:	ff 0a       	sbc	r15, r31
    3bee:	0f 0b       	sbc	r16, r31
    3bf0:	1f 0b       	sbc	r17, r31
    3bf2:	0e 94 1e 18 	call	0x303c	; 0x303c <__udivmod64>
    3bf6:	07 fc       	sbrc	r0, 7
    3bf8:	0e 94 fe 23 	call	0x47fc	; 0x47fc <__negdi2>
    3bfc:	cd b7       	in	r28, 0x3d	; 61
    3bfe:	de b7       	in	r29, 0x3e	; 62
    3c00:	ec e0       	ldi	r30, 0x0C	; 12
    3c02:	0c 94 9b 20 	jmp	0x4136	; 0x4136 <__epilogue_restores__+0xc>

Disassembly of section .text.libgcc.div:

00004858 <__umoddi3>:
    4858:	68 94       	set
    485a:	01 c0       	rjmp	.+2      	; 0x485e <__udivdi3_umoddi3>

0000485c <__udivdi3>:
    485c:	e8 94       	clt

0000485e <__udivdi3_umoddi3>:
    485e:	8f 92       	push	r8
    4860:	9f 92       	push	r9
    4862:	cf 93       	push	r28
    4864:	df 93       	push	r29
    4866:	0e 94 1e 18 	call	0x303c	; 0x303c <__udivmod64>
    486a:	df 91       	pop	r29
    486c:	cf 91       	pop	r28
    486e:	9f 90       	pop	r9
    4870:	8f 90       	pop	r8
    4872:	08 95       	ret

Disassembly of section .text.libgcc.div:

0000303c <__udivmod64>:
    303c:	88 24       	eor	r8, r8
    303e:	99 24       	eor	r9, r9
    3040:	f4 01       	movw	r30, r8
    3042:	e4 01       	movw	r28, r8
    3044:	b0 e4       	ldi	r27, 0x40	; 64
    3046:	9f 93       	push	r25
    3048:	aa 27       	eor	r26, r26
    304a:	9a 15       	cp	r25, r10
    304c:	8b 04       	cpc	r8, r11
    304e:	9c 04       	cpc	r9, r12
    3050:	ed 05       	cpc	r30, r13
    3052:	fe 05       	cpc	r31, r14
    3054:	cf 05       	cpc	r28, r15
    3056:	d0 07       	cpc	r29, r16
    3058:	a1 07       	cpc	r26, r17
    305a:	98 f4       	brcc	.+38     	; 0x3082 <__udivmod64+0x46>
    305c:	ad 2f       	mov	r26, r29
    305e:	dc 2f       	mov	r29, r28
    3060:	cf 2f       	mov	r28, r31
    3062:	fe 2f       	mov	r31, r30
    3064:	e9 2d       	mov	r30, r9
    3066:	98 2c       	mov	r9, r8
    3068:	89 2e       	mov	r8, r25
    306a:	98 2f       	mov	r25, r24
    306c:	87 2f       	mov	r24, r23
    306e:	76 2f       	mov	r23, r22
    3070:	65 2f       	mov	r22, r21
    3072:	54 2f       	mov	r21, r20
    3074:	43 2f       	mov	r20, r19
    3076:	32 2f       	mov	r19, r18
    3078:	22 27       	eor	r18, r18
    307a:	b8 50       	subi	r27, 0x08	; 8
    307c:	31 f7       	brne	.-52     	; 0x304a <__udivmod64+0xe>
    307e:	bf 91       	pop	r27
    3080:	27 c0       	rjmp	.+78     	; 0x30d0 <__udivmod64+0x94>
    3082:	1b 2e       	mov	r1, r27
    3084:	bf 91       	pop	r27
    3086:	bb 27       	eor	r27, r27
    3088:	22 0f       	add	r18, r18
    308a:	33 1f       	adc	r19, r19
    308c:	44 1f       	adc	r20, r20
    308e:	55 1f       	adc	r21, r21
    3090:	66 1f       	adc	r22, r22
    3092:	77 1f       	adc	r23, r23
    3094:	88 1f       	adc	r24, r24
    3096:	99 1f       	adc	r25, r25
    3098:	88 1c       	adc	r8, r8
    309a:	99 1c       	adc	r9, r9
    309c:	ee 1f       	adc	r30, r30
    309e:	ff 1f       	adc	r31, r31
    30a0:	cc 1f       	adc	r28, r28
    30a2:	dd 1f       	adc	r29, r29
    30a4:	aa 1f       	adc	r26, r26
    30a6:	bb 1f       	adc	r27, r27
    30a8:	8a 14       	cp	r8, r10
    30aa:	9b 04       	cpc	r9, r11
    30ac:	ec 05       	cpc	r30, r12
    30ae:	fd 05       	cpc	r31, r13
    30b0:	ce 05       	cpc	r28, r14
    30b2:	df 05       	cpc	r29, r15
    30b4:	a0 07       	cpc	r26, r16
    30b6:	b1 07       	cpc	r27, r17
    30b8:	48 f0       	brcs	.+18     	; 0x30cc <__udivmod64+0x90>
    30ba:	8a 18       	sub	r8, r10
    30bc:	9b 08       	sbc	r9, r11
    30be:	ec 09       	sbc	r30, r12
    30c0:	fd 09       	sbc	r31, r13
    30c2:	ce 09       	sbc	r28, r14
    30c4:	df 09       	sbc	r29, r15
    30c6:	a0 0b       	sbc	r26, r16
    30c8:	b1 0b       	sbc	r27, r17
    30ca:	21 60       	ori	r18, 0x01	; 1
    30cc:	1a 94       	dec	r1
    30ce:	e1 f6       	brne	.-72     	; 0x3088 <__udivmod64+0x4c>
    30d0:	2e f4       	brtc	.+10     	; 0x30dc <__udivmod64+0xa0>
    30d2:	94 01       	movw	r18, r8
    30d4:	af 01       	movw	r20, r30
    30d6:	be 01       	movw	r22, r28
    30d8:	cd 01       	movw	r24, r26
    30da:	00 0c       	add	r0, r0
    30dc:	08 95       	ret

Disassembly of section .text.libgcc:

000047fc <__negdi2>:
    47fc:	60 95       	com	r22
    47fe:	70 95       	com	r23
    4800:	80 95       	com	r24
    4802:	90 95       	com	r25
    4804:	30 95       	com	r19
    4806:	40 95       	com	r20
    4808:	50 95       	com	r21
    480a:	21 95       	neg	r18
    480c:	3f 4f       	sbci	r19, 0xFF	; 255
    480e:	4f 4f       	sbci	r20, 0xFF	; 255
    4810:	5f 4f       	sbci	r21, 0xFF	; 255
    4812:	6f 4f       	sbci	r22, 0xFF	; 255
    4814:	7f 4f       	sbci	r23, 0xFF	; 255
    4816:	8f 4f       	sbci	r24, 0xFF	; 255
    4818:	9f 4f       	sbci	r25, 0xFF	; 255
    481a:	08 95       	ret

Disassembly of section .text.libgcc.prologue:

000040f2 <__prologue_saves__>:
    40f2:	2f 92       	push	r2
    40f4:	3f 92       	push	r3
    40f6:	4f 92       	push	r4
    40f8:	5f 92       	push	r5
    40fa:	6f 92       	push	r6
    40fc:	7f 92       	push	r7
    40fe:	8f 92       	push	r8
    4100:	9f 92       	push	r9
    4102:	af 92       	push	r10
    4104:	bf 92       	push	r11
    4106:	cf 92       	push	r12
    4108:	df 92       	push	r13
    410a:	ef 92       	push	r14
    410c:	ff 92       	push	r15
    410e:	0f 93       	push	r16
    4110:	1f 93       	push	r17
    4112:	cf 93       	push	r28
    4114:	df 93       	push	r29
    4116:	cd b7       	in	r28, 0x3d	; 61
    4118:	de b7       	in	r29, 0x3e	; 62
    411a:	ca 1b       	sub	r28, r26
    411c:	db 0b       	sbc	r29, r27
    411e:	0f b6       	in	r0, 0x3f	; 63
    4120:	f8 94       	cli
    4122:	de bf       	out	0x3e, r29	; 62
    4124:	0f be       	out	0x3f, r0	; 63
    4126:	cd bf       	out	0x3d, r28	; 61
    4128:	09 94       	ijmp

Disassembly of section .text.libgcc.prologue:

0000412a <__epilogue_restores__>:
    412a:	2a 88       	ldd	r2, Y+18	; 0x12
    412c:	39 88       	ldd	r3, Y+17	; 0x11
    412e:	48 88       	ldd	r4, Y+16	; 0x10
    4130:	5f 84       	ldd	r5, Y+15	; 0x0f
    4132:	6e 84       	ldd	r6, Y+14	; 0x0e
    4134:	7d 84       	ldd	r7, Y+13	; 0x0d
    4136:	8c 84       	ldd	r8, Y+12	; 0x0c
    4138:	9b 84       	ldd	r9, Y+11	; 0x0b
    413a:	aa 84       	ldd	r10, Y+10	; 0x0a
    413c:	b9 84       	ldd	r11, Y+9	; 0x09
    413e:	c8 84       	ldd	r12, Y+8	; 0x08
    4140:	df 80       	ldd	r13, Y+7	; 0x07
    4142:	ee 80       	ldd	r14, Y+6	; 0x06
    4144:	fd 80       	ldd	r15, Y+5	; 0x05
    4146:	0c 81       	ldd	r16, Y+4	; 0x04
    4148:	1b 81       	ldd	r17, Y+3	; 0x03
    414a:	aa 81       	ldd	r26, Y+2	; 0x02
    414c:	b9 81       	ldd	r27, Y+1	; 0x01
    414e:	ce 0f       	add	r28, r30
    4150:	d1 1d       	adc	r29, r1
    4152:	0f b6       	in	r0, 0x3f	; 63
    4154:	f8 94       	cli
    4156:	de bf       	out	0x3e, r29	; 62
    4158:	0f be       	out	0x3f, r0	; 63
    415a:	cd bf       	out	0x3d, r28	; 61
    415c:	ed 01       	movw	r28, r26
    415e:	08 95       	ret

Disassembly of section .text.libgcc:

000049a2 <__adddi3>:
    49a2:	2a 0d       	add	r18, r10
    49a4:	3b 1d       	adc	r19, r11
    49a6:	4c 1d       	adc	r20, r12
    49a8:	5d 1d       	adc	r21, r13
    49aa:	6e 1d       	adc	r22, r14
    49ac:	7f 1d       	adc	r23, r15
    49ae:	80 1f       	adc	r24, r16
    49b0:	91 1f       	adc	r25, r17
    49b2:	08 95       	ret

Disassembly of section .text.libgcc:

000049b4 <__cmpdi2>:
    49b4:	2a 15       	cp	r18, r10
    49b6:	3b 05       	cpc	r19, r11
    49b8:	4c 05       	cpc	r20, r12
    49ba:	5d 05       	cpc	r21, r13
    49bc:	6e 05       	cpc	r22, r14
    49be:	7f 05       	cpc	r23, r15
    49c0:	80 07       	cpc	r24, r16
    49c2:	91 07       	cpc	r25, r17
    49c4:	08 95       	ret
