
ModuleCPU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00004afe  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000da  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00004b00  2**0
                  ALLOC
  3 .noinit       00000222  00800102  00800102  00004b00  2**2
                  ALLOC
  4 .comment      0000002f  00000000  00000000  00004afe  2**0
                  CONTENTS, READONLY
  5 .stack.descriptors.hdr 00000142  00000000  00000000  00004b2d  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000508  00000000  00000000  00004c6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00008c71  00000000  00000000  00005177  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001aa4  00000000  00000000  0000dde8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003633  00000000  00000000  0000f88c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000011d8  00000000  00000000  00012ec0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000700  00000000  00000000  00014098  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000043f0  00000000  00000000  00014798  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000004d0  00000000  00000000  00018b88  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .text         00000004  00004a3a  00004a3a  00004aee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00019058  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .text.__vector_27 000000bc  00002d22  00002d22  00002dd6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.ADCSetPowerOn 0000000c  000049e8  000049e8  00004a9c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.ADCStartConversion 0000002a  00004386  00004386  0000443a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .progmemx.data 0000000b  000001b5  000001b5  00000269  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 20 .text.ADCInit 0000013c  00001f3a  00001f3a  00001fee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .progmemx.data.sg_sMuxSelectList 0000000f  0000018e  0000018e  00000242  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 22 .bss.sg_eCurrentType 00000001  00800747  00800747  00004b00  2**0
                  ALLOC
 23 .bss.sg_eState 00000001  0080075a  0080075a  00004b00  2**0
                  ALLOC
 24 .text.CANLookupCommand 00000062  00003a9a  00003a9a  00003b4e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .progmemx.data 0000000b  000001c0  000001c0  00000274  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 26 .text.CANMOBSet 000001fe  000013d0  000013d0  00001484  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.CANSendMessageInternal 00000178  00001b14  00001b14  00001bc8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.CANMOBInterrupt 00000192  00001982  00001982  00001a36  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.__vector_18 0000011a  000021aa  000021aa  0000225e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.CANSendMessage 00000016  00004890  00004890  00004944  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.CANSetRXCallback 0000000a  00004a0c  00004a0c  00004ac0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.CANInit 0000009c  00003138  00003138  000031ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .progmemx.data.sg_sRXCommandList 0000001b  00000134  00000134  000001e8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 34 .progmemx.data.sg_sMOBModuleRequestTime 00000008  000001cb  000001cb  0000027f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 35 .progmemx.data.sg_sMOBModuleHardwareDetail 00000008  000001d3  000001d3  00000287  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 36 .progmemx.data.sg_sMOBModuleCellDetail 00000008  000001db  000001db  0000028f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 37 .progmemx.data.sg_sMOBModuleCellCommStat2 00000008  000001e3  000001e3  00000297  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 38 .progmemx.data.sg_sMOBModuleCellCommStat1 00000008  000001eb  000001eb  0000029f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 39 .progmemx.data.sg_sMOBModuleStatus3 00000008  000001f3  000001f3  000002a7  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 40 .progmemx.data.sg_sMOBModuleStatus2 00000008  000001fb  000001fb  000002af  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 41 .progmemx.data.sg_sMOBModuleStatus1 00000008  00000203  00000203  000002b7  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 42 .progmemx.data.sg_sMOBModuleAnnouncement 00000008  0000020b  0000020b  000002bf  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 43 .progmemx.data.sg_sMOBGenericReceive 00000008  00000213  00000213  000002c7  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 44 .progmemx.data.sg_sMOBDisabled 00000008  0000021b  0000021b  000002cf  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 45 .bss.sg_bInRetransmit 00000001  0080075b  0080075b  00004b00  2**0
                  ALLOC
 46 .bss.sg_u8LastTXDataLen 00000001  0080075c  0080075c  00004b00  2**0
                  ALLOC
 47 .bss.sg_u8LastTXData 00000008  00800735  00800735  00004b00  2**0
                  ALLOC
 48 .bss.sg_eLastTXType 00000001  0080075d  0080075d  00004b00  2**0
                  ALLOC
 49 .bss.sg_u8TransmitAttempts 00000001  0080075e  0080075e  00004b00  2**0
                  ALLOC
 50 .bss.sg_pfRXCallback 00000002  00800745  00800745  00004b00  2**0
                  ALLOC
 51 .bss.sg_bBusy 00000001  0080075f  0080075f  00004b00  2**0
                  ALLOC
 52 .text.DebugOut 0000000e  000049b0  000049b0  00004a64  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 53 .text.EEPROMRead 00000012  00004926  00004926  000049da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 .text.I2CBitDelay 0000000e  000049be  000049be  00004a72  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.I2CStart 0000002c  000042aa  000042aa  0000435e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.I2CStop 00000026  00004478  00004478  0000452c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .text.I2CUnstick 0000003c  00003fc2  00003fc2  00004076  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .text.I2CTxByte 0000006a  00003960  00003960  00003a14  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 .text.I2CRxByte 0000007a  00003786  00003786  0000383a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 60 .text.I2CSetup 0000002c  000042d6  000042d6  0000438a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 61 .text.I2CStartTransaction 00000028  000043b0  000043b0  00004464  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 62 .text.CellCountExpectedSet 000000c4  00002b9c  00002b9c  00002c50  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 63 .text.SendModuleControllerStatus 0000000c  000049f4  000049f4  00004aa8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 64 .text.ModuleControllerStateSet 0000000a  00004a16  00004a16  00004aca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .text.ModuleControllerStateSetMax 00000016  000048a6  000048a6  0000495a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 66 .text.Check5VLoss 00000018  00004848  00004848  000048fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 67 .text.CellDataConvertVoltage 00000062  00003afc  00003afc  00003bb0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 68 .text.CellDataConvertTemperature 0000007a  00003800  00003800  000038b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 69 .text.CellDataConvert 00000028  000043d8  000043d8  0000448c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 70 .text.ModuleCurrentConvertReadings 00000104  000022c4  000022c4  00002378  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 71 .text.__vector_1 00000024  000044c4  000044c4  00004578  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 72 .text.__vector_2 00000024  000044e8  000044e8  0000459c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 73 .text.__vector_3 00000024  0000450c  0000450c  000045c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 74 .text.__vector_4 00000024  00004530  00004530  000045e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 75 .text.__vector_5 00000024  00004554  00004554  00004608  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 76 .text.__vector_6 00000024  00004578  00004578  0000462c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 77 .text.__vector_22 00000024  0000459c  0000459c  00004650  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 78 .text.__vector_9 00000024  000045c0  000045c0  00004674  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 79 .text.__vector_11 00000024  000045e4  000045e4  00004698  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 80 .text.__vector_13 00000024  00004608  00004608  000046bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 81 .text.__vector_14 00000024  0000462c  0000462c  000046e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 82 .text.__vector_17 00000024  00004650  00004650  00004704  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 83 .text.__vector_19 00000024  00004674  00004674  00004728  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 84 .text.__vector_21 00000024  00004698  00004698  0000474c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 85 .text.__vector_25 00000024  000046bc  000046bc  00004770  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 86 .text.__vector_26 00000024  000046e0  000046e0  00004794  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 87 .text.__vector_29 00000024  00004704  00004704  000047b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 88 .text.__vector_30 00000024  00004728  00004728  000047dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 89 .text.CurrentThresholdsGet 00000094  000031d4  000031d4  00003288  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 90 .text.ControllerStatusMessagesSend 000003dc  00000684  00000684  00000738  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 91 .text.CellStringProcess 000002a6  00000a60  00000a60  00000b14  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 92 .text.Delay   00000052  00003d6e  00003d6e  00003e22  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 93 .progmemx.data 0000001b  0000014f  0000014f  00000203  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 94 .text.PlatformAssert 0000002c  00004302  00004302  000043b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 95 .text.ModuleControllerStateHandle 000001f6  000015ce  000015ce  00001682  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 96 .text.PlatformGetRegistrationID 00000006  00004a34  00004a34  00004ae8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 97 .text.SetSysclock 0000000c  00004a00  00004a00  00004ab4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 98 .text.ModuleControllerGetUniqueID 0000007e  00003592  00003592  00003646  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 99 .text.CANReceiveCallback 00000148  00001df2  00001df2  00001ea6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
100 .text.TimerInit 00000052  00003dc0  00003dc0  00003e74  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
101 .text.__vector_12 000000ba  00002dde  00002dde  00002e92  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
102 .text.WatchdogReset 00000002  00004a42  00004a42  00004af6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
103 .text.WatchdogOff 0000001a  0000482e  0000482e  000048e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
104 .text.__vector_28 00000052  00003e12  00003e12  00003ec6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
105 .text.__vector_23 0000008a  00003268  00003268  0000331c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
106 .text.__vector_24 0000004c  00003e64  00003e64  00003f18  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
107 .text.vUARTRXStart 00000016  000048bc  000048bc  00004970  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
108 .text.vUARTRXEnd 00000024  0000474c  0000474c  00004800  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
109 .text.vUARTRXData 0000007a  0000387a  0000387a  0000392e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
110 .text.PlatformGetSendData 00000028  00004400  00004400  000044b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
111 .text.ADCCallback 00000026  0000449e  0000449e  00004552  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
112 .text.FrameInit 000000b4  00002e98  00002e98  00002f4c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
113 .text.CellStringPowerStateMachine 00000088  0000337c  0000337c  00003430  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
114 .text.main    00000252  00000f5c  00000f5c  00001010  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
115 .bss.sg_u8PCMSK1 00000001  00800760  00800760  00004b00  2**0
                  ALLOC
116 .bss.sg_u8PCMSK0 00000001  00800761  00800761  00004b00  2**0
                  ALLOC
117 .bss.sg_u8UnhandledInterruptVector 00000001  00800762  00800762  00004b00  2**0
                  ALLOC
118 .bss.sg_u8Reason 00000001  00800763  00800763  00004b00  2**0
                  ALLOC
119 .progmemx.data.sg_u8FractionalLookup 00000010  0000017e  0000017e  00000232  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
120 .bss.sg_eStringPowerState 00000001  00800764  00800764  00004b00  2**0
                  ALLOC
121 .bss.sg_u8ControllerStatusMsgCount 00000001  00800765  00800765  00004b00  2**0
                  ALLOC
122 .bss.sg_u8CellReports 00000001  00800766  00800766  00004b00  2**0
                  ALLOC
123 .bss.sg_u16BytesReceived 00000002  00800754  00800754  00004b00  2**0
                  ALLOC
124 .bss.sg_u8CellBufferTemp 00000004  00800748  00800748  00004b00  2**2
                  ALLOC
125 .bss.sg_u8CellBufferRX 00000001  00800767  00800767  00004b00  2**0
                  ALLOC
126 .bss.sg_u8CellIndex 00000001  00800768  00800768  00004b00  2**0
                  ALLOC
127 .bss.sg_u8TicksSinceLastPackControllerMessage 00000001  00800769  00800769  00004b00  2**0
                  ALLOC
128 .bss.sg_u8CellStringPowerTimer 00000001  0080076a  0080076a  00004b00  2**0
                  ALLOC
129 .bss.sg_bFrameStart 00000001  0080076b  0080076b  00004b00  2**0
                  ALLOC
130 .bss.sg_u8CellFrameTimer 00000001  0080076c  0080076c  00004b00  2**0
                  ALLOC
131 .bss.sg_u8CurrentBufferIndex 00000001  0080076d  0080076d  00004b00  2**0
                  ALLOC
132 .bss.sg_sCurrenBuffer 00000010  00800715  00800715  00004b00  2**0
                  ALLOC
133 .text.IsLeapYear 00000034  0000411a  0000411a  000041ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
134 .text.RTCStartTransaction 00000044  00003efc  00003efc  00003fb0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
135 .text.StructTMToHW 00000054  00003d1a  00003d1a  00003dce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
136 .text.HWToStructTM 0000007c  0000368e  0000368e  00003742  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
137 .text.__vector_10 00000086  00003404  00003404  000034b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
138 .progmemx.data 00000014  0000016a  0000016a  0000021e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
139 .text.RTCReadRegisters 0000007e  00003610  00003610  000036c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
140 .text.RTCReadHW 000000e2  000025bc  000025bc  00002670  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
141 .text.RTCWriteRegisters 0000006a  000039ca  000039ca  00003a7e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
142 .text.RTCWriteHW 000000fe  000023c8  000023c8  0000247c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
143 .text.RTCSetTime 000000c6  00002ad6  00002ad6  00002b8a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
144 .text.RTCInit 00000222  000011ae  000011ae  00001262  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
145 .progmemx.data.sg_u8DaysInMonths 0000000c  0000019d  0000019d  00000251  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
146 .bss.sg_u64Time 00000008  0080073d  0080073d  00004b00  2**0
                  ALLOC
147 .text.SDSetCS 00000014  000048fe  000048fe  000049b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
148 .text.SDPowerup 0000003a  0000403a  0000403a  000040ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
149 .text.SDCommand 000000aa  00002f4c  00002f4c  00003000  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
150 .text.SDGoIdle 00000022  00004794  00004794  00004848  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
151 .text.SDSendOpCondition 00000034  0000414e  0000414e  00004202  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
152 .text.SDSendOpConditionArg 00000056  00003c18  00003c18  00003ccc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
153 .text.SDWaitResponse7 0000000e  000049cc  000049cc  00004a80  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
154 .text.SDSendInterfaceCondition 00000034  00004182  00004182  00004236  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
155 .text.SDReadOCR 00000032  000041b6  000041b6  0000426a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
156 .text.SDReadCSD 0000007c  0000370a  0000370a  000037be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
157 .text.SDReceiveDataBlock 0000008a  000032f2  000032f2  000033a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
158 .text.SDTransmitDataBlock 000000c2  00002c60  00002c60  00002d14  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
159 .text.SDInit  00000166  00001c8c  00001c8c  00001d40  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
160 .text.SDRead  000000d8  00002934  00002934  000029e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
161 .text.SDWrite 000000dc  0000277c  0000277c  00002830  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
162 .bss.sg_u8CSD 00000010  00800725  00800725  00004b00  2**0
                  ALLOC
163 .bss.sg_u16BlockSize 00000002  00800756  00800756  00004b00  2**0
                  ALLOC
164 .bss.sg_u32SDSectorCount 00000004  0080074c  0080074c  00004b00  2**0
                  ALLOC
165 .text.SPITransaction 00000058  00003bc0  00003bc0  00003c74  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
166 .text.SPISetBaudRate 000000ca  00002a0c  00002a0c  00002ac0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
167 .text.SPIInit 0000002c  0000432e  0000432e  000043e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
168 .progmemx.data.sg_sSPIBaudRates 0000002a  0000010a  0000010a  000001be  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
169 .text.readGlobalState 0000003e  00003f84  00003f84  00004038  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
170 .text.writeGlobalState 00000032  000041e8  000041e8  0000429c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
171 .text.updateSessionMap 000000dc  00002858  00002858  0000290c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
172 .text.STORE_Init 00000082  00003510  00003510  000035c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
173 .text.STORE_WriteFrame 000000f6  000024c6  000024c6  0000257a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
174 .text.STORE_StartNewSession 00000038  00004074  00004074  00004128  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
175 .text.STORE_EndSession 0000002c  0000435a  0000435a  0000440e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
176 .bss.frameBuffer 00000200  00800324  00800324  00004b00  2**2
                  ALLOC
177 .bss.currentSector 00000004  00800750  00800750  00004b00  2**0
                  ALLOC
178 .bss.gState   000001d8  00800524  00800524  00004b00  2**2
                  ALLOC
179 .text.vUARTtxDataAvailable 00000024  00004770  00004770  00004824  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
180 .text.vUARTtxDataGet 0000004c  00003eb0  00003eb0  00003f64  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
181 .text.vUARTRXReset 0000000a  00004a20  00004a20  00004ad4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
182 .text.vUARTStarttx 00000056  00003c6e  00003c6e  00003d22  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
183 .text.__vector_8 00000066  00003a34  00003a34  00003ae8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
184 .text.__vector_16 000000de  0000269e  0000269e  00002752  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
185 .text.__vector_15 00000134  00002076  00002076  0000212a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
186 .text.vUARTInit 00000030  0000424c  0000424c  00004300  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
187 .text.vUARTInitReceive 00000014  00004912  00004912  000049c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
188 .bss.sg_bState 00000001  0080076e  0080076e  00004b00  2**0
                  ALLOC
189 .bss.sg_u8SendData 00000002  00800758  00800758  00004b00  2**0
                  ALLOC
190 .bss.sg_u8SendIndex 00000001  0080076f  0080076f  00004b00  2**0
                  ALLOC
191 .bss.sg_bMCTxNextBit 00000001  00800770  00800770  00004b00  2**0
                  ALLOC
192 .bss.sg_bCellReportsReuested 00000001  00800771  00800771  00004b00  2**0
                  ALLOC
193 .bss.sg_etxState 00000001  00800772  00800772  00004b00  2**0
                  ALLOC
194 .bss.sg_btxMoreAvailable 00000001  00800773  00800773  00004b00  2**0
                  ALLOC
195 .bss.sg_u8txDataByte 00000001  00800774  00800774  00004b00  2**0
                  ALLOC
196 .bss.sg_u8txBitCount 00000001  00800775  00800775  00004b00  2**0
                  ALLOC
197 .bss.sg_bCell_mc_rxMoreData 00000001  00800776  00800776  00004b00  2**0
                  ALLOC
198 .bss.sg_bCell_mc_rxPriorState 00000001  00800777  00800777  00004b00  2**0
                  ALLOC
199 .bss.sg_eCell_mc_rxState 00000001  00800778  00800778  00004b00  2**0
                  ALLOC
200 .bss.sg_u8rxDataByte 00000001  00800779  00800779  00004b00  2**0
                  ALLOC
201 .bss.sg_u8Cell_mc_rxBitCount 00000001  0080077a  0080077a  00004b00  2**0
                  ALLOC
202 .text.libgcc.div 00000028  00004428  00004428  000044dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
203 .text.libgcc.div 00000044  00003f40  00003f40  00003ff4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
204 .text.libgcc.div 0000002e  0000427c  0000427c  00004330  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
205 .text.libgcc.div 00000010  00004980  00004980  00004a34  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
206 .text.libgcc.mul 0000001e  000047d6  000047d6  0000488a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
207 .text.libgcc.mul 0000000e  000049da  000049da  00004a8e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
208 .text.libgcc.mul 00000016  000048d2  000048d2  00004986  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
209 .text.libgcc.mul 00000010  00004990  00004990  00004a44  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
210 .text.libgcc  00000010  000049a0  000049a0  00004a54  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
211 .text.libgcc  00000018  00004860  00004860  00004914  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
212 .text.libgcc  00000018  00004878  00004878  0000492c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
213 .text.__dummy_fini 00000002  00004a44  00004a44  00004af8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
214 .text.__dummy_funcs_on_exit 00000002  00004a46  00004a46  00004afa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
215 .text.__dummy_simulator_exit 00000002  00004a48  00004a48  00004afc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
216 .text.exit    00000016  000048e8  000048e8  0000499c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
217 .text.memcpy  00000032  0000421a  0000421a  000042ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
218 .text.memset  00000012  00004938  00004938  000049ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
219 .text.gmtime  0000000a  00004a2a  00004a2a  00004ade  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
220 .bss.tm.1240  00000019  008006fc  008006fc  00004b00  2**0
                  ALLOC
221 .progmemx.data 00000004  00000223  00000223  000002d7  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
222 .text.__gmtime_r 0000006c  000038f4  000038f4  000039a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
223 .progmemx.data 00000004  00000227  00000227  000002db  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
224 .text.mktime  00000086  0000348a  0000348a  0000353e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
225 .text._Exit   00000004  00004a3e  00004a3e  00004af2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
226 .text.__tm_to_secs 000001be  000017c4  000017c4  00001878  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
227 .text.__year_to_secs 00000256  00000d06  00000d06  00000dba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
228 .text.__month_to_secs 0000003c  00003ffe  00003ffe  000040b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
229 .progmemx.data.secs_through_month.1090 00000030  000000da  000000da  0000018e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
230 .text.__secs_to_tm 00000458  0000022c  0000022c  000002e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
231 .progmemx.data.days_in_month.1250 0000000c  000001a9  000001a9  0000025d  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
232 .text.libgcc.div 00000028  00004450  00004450  00004504  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
233 .text.libgcc.mul 000000a0  00003098  00003098  0000314c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
234 .text.libgcc.mul 00000012  0000494a  0000494a  000049fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
235 .text.libgcc.mul 0000001e  000047f4  000047f4  000048a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
236 .text.libgcc.mul 00000056  00003cc4  00003cc4  00003d78  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
237 .text.libgcc.div 00000062  00003b5e  00003b5e  00003c12  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
238 .text.libgcc.div 0000001c  00004812  00004812  000048c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
239 .text.libgcc.div 000000a2  00002ff6  00002ff6  000030aa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
240 .text.libgcc  00000020  000047b6  000047b6  0000486a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
241 .text.libgcc.prologue 00000038  000040ac  000040ac  00004160  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
242 .text.libgcc.prologue 00000036  000040e4  000040e4  00004198  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
243 .text.libgcc  00000012  0000495c  0000495c  00004a10  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
244 .text.libgcc  00000012  0000496e  0000496e  00004a22  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 43 00 	jmp	0x86	; 0x86 <__ctors_end>
   4:	0c 94 62 22 	jmp	0x44c4	; 0x44c4 <__vector_1>
   8:	0c 94 74 22 	jmp	0x44e8	; 0x44e8 <__vector_2>
   c:	0c 94 86 22 	jmp	0x450c	; 0x450c <__vector_3>
  10:	0c 94 98 22 	jmp	0x4530	; 0x4530 <__vector_4>
  14:	0c 94 aa 22 	jmp	0x4554	; 0x4554 <__vector_5>
  18:	0c 94 bc 22 	jmp	0x4578	; 0x4578 <__vector_6>
  1c:	0c 94 1d 25 	jmp	0x4a3a	; 0x4a3a <__bad_interrupt>
  20:	0c 94 1a 1d 	jmp	0x3a34	; 0x3a34 <__vector_8>
  24:	0c 94 e0 22 	jmp	0x45c0	; 0x45c0 <__vector_9>
  28:	0c 94 02 1a 	jmp	0x3404	; 0x3404 <__vector_10>
  2c:	0c 94 f2 22 	jmp	0x45e4	; 0x45e4 <__vector_11>
  30:	0c 94 ef 16 	jmp	0x2dde	; 0x2dde <__vector_12>
  34:	0c 94 04 23 	jmp	0x4608	; 0x4608 <__vector_13>
  38:	0c 94 16 23 	jmp	0x462c	; 0x462c <__vector_14>
  3c:	0c 94 3b 10 	jmp	0x2076	; 0x2076 <__vector_15>
  40:	0c 94 4f 13 	jmp	0x269e	; 0x269e <__vector_16>
  44:	0c 94 28 23 	jmp	0x4650	; 0x4650 <__vector_17>
  48:	0c 94 d5 10 	jmp	0x21aa	; 0x21aa <__vector_18>
  4c:	0c 94 3a 23 	jmp	0x4674	; 0x4674 <__vector_19>
  50:	0c 94 1d 25 	jmp	0x4a3a	; 0x4a3a <__bad_interrupt>
  54:	0c 94 4c 23 	jmp	0x4698	; 0x4698 <__vector_21>
  58:	0c 94 ce 22 	jmp	0x459c	; 0x459c <__vector_22>
  5c:	0c 94 34 19 	jmp	0x3268	; 0x3268 <__vector_23>
  60:	0c 94 32 1f 	jmp	0x3e64	; 0x3e64 <__vector_24>
  64:	0c 94 5e 23 	jmp	0x46bc	; 0x46bc <__vector_25>
  68:	0c 94 70 23 	jmp	0x46e0	; 0x46e0 <__vector_26>
  6c:	0c 94 91 16 	jmp	0x2d22	; 0x2d22 <__vector_27>
  70:	0c 94 09 1f 	jmp	0x3e12	; 0x3e12 <__vector_28>
  74:	0c 94 82 23 	jmp	0x4704	; 0x4704 <__vector_29>
  78:	0c 94 94 23 	jmp	0x4728	; 0x4728 <__vector_30>

0000007c <.dinit>:
  7c:	01 00       	.word	0x0001	; ????
  7e:	01 02       	muls	r16, r17
  80:	80 01       	movw	r16, r0
  82:	04 07       	cpc	r16, r20
  84:	7b 80       	ldd	r7, Y+3	; 0x03

00000086 <__ctors_end>:
  86:	11 24       	eor	r1, r1
  88:	1f be       	out	0x3f, r1	; 63
  8a:	cf ef       	ldi	r28, 0xFF	; 255
  8c:	d0 e1       	ldi	r29, 0x10	; 16
  8e:	de bf       	out	0x3e, r29	; 62
  90:	cd bf       	out	0x3d, r28	; 61

00000092 <__do_copy_data>:
  92:	ec e7       	ldi	r30, 0x7C	; 124
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	40 e0       	ldi	r20, 0x00	; 0
  98:	17 c0       	rjmp	.+46     	; 0xc8 <__do_clear_bss+0x8>
  9a:	b5 91       	lpm	r27, Z+
  9c:	a5 91       	lpm	r26, Z+
  9e:	35 91       	lpm	r19, Z+
  a0:	25 91       	lpm	r18, Z+
  a2:	05 91       	lpm	r16, Z+
  a4:	07 fd       	sbrc	r16, 7
  a6:	0c c0       	rjmp	.+24     	; 0xc0 <__do_clear_bss>
  a8:	95 91       	lpm	r25, Z+
  aa:	85 91       	lpm	r24, Z+
  ac:	ef 01       	movw	r28, r30
  ae:	f9 2f       	mov	r31, r25
  b0:	e8 2f       	mov	r30, r24
  b2:	05 90       	lpm	r0, Z+
  b4:	0d 92       	st	X+, r0
  b6:	a2 17       	cp	r26, r18
  b8:	b3 07       	cpc	r27, r19
  ba:	d9 f7       	brne	.-10     	; 0xb2 <__do_copy_data+0x20>
  bc:	fe 01       	movw	r30, r28
  be:	04 c0       	rjmp	.+8      	; 0xc8 <__do_clear_bss+0x8>

000000c0 <__do_clear_bss>:
  c0:	1d 92       	st	X+, r1
  c2:	a2 17       	cp	r26, r18
  c4:	b3 07       	cpc	r27, r19
  c6:	e1 f7       	brne	.-8      	; 0xc0 <__do_clear_bss>
  c8:	e6 38       	cpi	r30, 0x86	; 134
  ca:	f4 07       	cpc	r31, r20
  cc:	31 f7       	brne	.-52     	; 0x9a <__do_copy_data+0x8>
  ce:	0e 94 ae 07 	call	0xf5c	; 0xf5c <main>
  d2:	0c 94 74 24 	jmp	0x48e8	; 0x48e8 <exit>

000000d6 <_exit>:
  d6:	f8 94       	cli

000000d8 <__stop_program>:
  d8:	ff cf       	rjmp	.-2      	; 0xd8 <__stop_program>

Disassembly of section .text:

00004a3a <__bad_interrupt>:
    4a3a:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.__vector_27:

00002d22 <__vector_27>:

	// Disable the conversion complete interrupt
	ADCSRA &= (uint8_t)~(1 << ADIE);

	// Clear any pending interrupt	
	ADCSRA |= (1 << ADIF);
    2d22:	78 94       	sei
    2d24:	1f 92       	push	r1
    2d26:	0f 92       	push	r0
    2d28:	0f b6       	in	r0, 0x3f	; 63
    2d2a:	0f 92       	push	r0
    2d2c:	11 24       	eor	r1, r1
    2d2e:	2f 93       	push	r18
    2d30:	3f 93       	push	r19
    2d32:	4f 93       	push	r20
    2d34:	5f 93       	push	r21
    2d36:	6f 93       	push	r22
    2d38:	7f 93       	push	r23
    2d3a:	8f 93       	push	r24
    2d3c:	9f 93       	push	r25
    2d3e:	af 93       	push	r26
    2d40:	bf 93       	push	r27
    2d42:	ef 93       	push	r30
    2d44:	ff 93       	push	r31
    2d46:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f0078>
    2d4a:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f0079>
    2d4e:	80 91 47 07 	lds	r24, 0x0747	; 0x800747 <sg_eCurrentType>
    2d52:	91 e0       	ldi	r25, 0x01	; 1
    2d54:	98 0f       	add	r25, r24
    2d56:	90 93 47 07 	sts	0x0747, r25	; 0x800747 <sg_eCurrentType>
    2d5a:	95 30       	cpi	r25, 0x05	; 5
    2d5c:	10 f0       	brcs	.+4      	; 0x2d62 <__vector_27+0x40>
    2d5e:	10 92 47 07 	sts	0x0747, r1	; 0x800747 <sg_eCurrentType>
    2d62:	ac e7       	ldi	r26, 0x7C	; 124
    2d64:	b0 e0       	ldi	r27, 0x00	; 0
    2d66:	5c 91       	ld	r21, X
    2d68:	20 91 47 07 	lds	r18, 0x0747	; 0x800747 <sg_eCurrentType>
    2d6c:	30 e0       	ldi	r19, 0x00	; 0
    2d6e:	f9 01       	movw	r30, r18
    2d70:	ee 0f       	add	r30, r30
    2d72:	ff 1f       	adc	r31, r31
    2d74:	2e 0f       	add	r18, r30
    2d76:	3f 1f       	adc	r19, r31
    2d78:	03 2e       	mov	r0, r19
    2d7a:	00 0c       	add	r0, r0
    2d7c:	44 0b       	sbc	r20, r20
    2d7e:	22 57       	subi	r18, 0x72	; 114
    2d80:	3e 4f       	sbci	r19, 0xFE	; 254
    2d82:	4f 4f       	sbci	r20, 0xFF	; 255
    2d84:	f9 01       	movw	r30, r18
    2d86:	94 91       	lpm	r25, Z
    2d88:	47 fd       	sbrc	r20, 7
    2d8a:	90 81       	ld	r25, Z
    2d8c:	50 7e       	andi	r21, 0xE0	; 224
    2d8e:	95 2b       	or	r25, r21
    2d90:	90 6c       	ori	r25, 0xC0	; 192
    2d92:	9c 93       	st	X, r25
    2d94:	0e 94 4f 22 	call	0x449e	; 0x449e <ADCCallback>
    2d98:	80 91 47 07 	lds	r24, 0x0747	; 0x800747 <sg_eCurrentType>
    2d9c:	81 11       	cpse	r24, r1
    2d9e:	09 c0       	rjmp	.+18     	; 0x2db2 <__vector_27+0x90>
    2da0:	ea e7       	ldi	r30, 0x7A	; 122
    2da2:	f0 e0       	ldi	r31, 0x00	; 0
    2da4:	80 81       	ld	r24, Z
    2da6:	87 7f       	andi	r24, 0xF7	; 247
    2da8:	80 83       	st	Z, r24
    2daa:	81 e0       	ldi	r24, 0x01	; 1
    2dac:	80 93 5a 07 	sts	0x075A, r24	; 0x80075a <sg_eState>
    2db0:	05 c0       	rjmp	.+10     	; 0x2dbc <__vector_27+0x9a>
    2db2:	ea e7       	ldi	r30, 0x7A	; 122
    2db4:	f0 e0       	ldi	r31, 0x00	; 0
    2db6:	80 81       	ld	r24, Z
    2db8:	88 64       	ori	r24, 0x48	; 72
    2dba:	80 83       	st	Z, r24
    2dbc:	ff 91       	pop	r31
    2dbe:	ef 91       	pop	r30
    2dc0:	bf 91       	pop	r27
    2dc2:	af 91       	pop	r26
    2dc4:	9f 91       	pop	r25
    2dc6:	8f 91       	pop	r24
    2dc8:	7f 91       	pop	r23
    2dca:	6f 91       	pop	r22
    2dcc:	5f 91       	pop	r21
    2dce:	4f 91       	pop	r20
    2dd0:	3f 91       	pop	r19
    2dd2:	2f 91       	pop	r18
    2dd4:	0f 90       	pop	r0
    2dd6:	0f be       	out	0x3f, r0	; 63
    2dd8:	0f 90       	pop	r0
    2dda:	1f 90       	pop	r1
    2ddc:	18 95       	reti

Disassembly of section .text.ADCSetPowerOn:

000049e8 <ADCSetPowerOn>:
}

// Enable ADC
void ADCSetPowerOn( void )
{
	ADCSRA |= (1 << ADEN);
    49e8:	ea e7       	ldi	r30, 0x7A	; 122
    49ea:	f0 e0       	ldi	r31, 0x00	; 0
    49ec:	80 81       	ld	r24, Z
    49ee:	80 68       	ori	r24, 0x80	; 128
    49f0:	80 83       	st	Z, r24
    49f2:	08 95       	ret

Disassembly of section .text.ADCStartConversion:

00004386 <ADCStartConversion>:
}

void ADCStartConversion(void)
{
	// Don't start anything if we're not idle
	if (EADCSTATE_IDLE != sg_eState)
    4386:	80 91 5a 07 	lds	r24, 0x075A	; 0x80075a <sg_eState>
    438a:	81 30       	cpi	r24, 0x01	; 1
    438c:	81 f4       	brne	.+32     	; 0x43ae <ADCStartConversion+0x28>
	{
		return;
	}
	
	// Set back to the first channel
	sg_eCurrentType = EADCTYPE_FIRST;
    438e:	10 92 47 07 	sts	0x0747, r1	; 0x800747 <sg_eCurrentType>
	
	// Set the MUX
	ADMUX = (ADMUX & MUX_MASK) | (sg_sMuxSelectList[sg_eCurrentType].u8MuxSelect) | MUX_AREF;
    4392:	ec e7       	ldi	r30, 0x7C	; 124
    4394:	f0 e0       	ldi	r31, 0x00	; 0
    4396:	80 81       	ld	r24, Z
    4398:	80 7e       	andi	r24, 0xE0	; 224
    439a:	89 6c       	ori	r24, 0xC9	; 201
    439c:	80 83       	st	Z, r24
		
	sg_eState = EADCSTATE_READING;
    439e:	82 e0       	ldi	r24, 0x02	; 2
    43a0:	80 93 5a 07 	sts	0x075A, r24	; 0x80075a <sg_eState>
	
	// Start a single conversion  - *dp run one at a time for now instead of continuous
	ADCSRA |= (1 << ADSC) | (1 << ADIE) | (1 << ADEN);  // turn power on if it isn't
    43a4:	ea e7       	ldi	r30, 0x7A	; 122
    43a6:	f0 e0       	ldi	r31, 0x00	; 0
    43a8:	80 81       	ld	r24, Z
    43aa:	88 6c       	ori	r24, 0xC8	; 200
    43ac:	80 83       	st	Z, r24
    43ae:	08 95       	ret

Disassembly of section .text.ADCInit:

00001f3a <ADCInit>:

	// Disable the conversion complete interrupt
	ADCSRA &= (uint8_t)~(1 << ADIE);

	// Clear any pending interrupt	
	ADCSRA |= (1 << ADIF);
    1f3a:	cf 93       	push	r28
    1f3c:	82 e0       	ldi	r24, 0x02	; 2
    1f3e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f007a>
    1f42:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
    1f46:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7f0094>
    1f4a:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7f0095>
    1f4e:	10 92 96 00 	sts	0x0096, r1	; 0x800096 <__TEXT_REGION_LENGTH__+0x7f0096>
    1f52:	10 92 97 00 	sts	0x0097, r1	; 0x800097 <__TEXT_REGION_LENGTH__+0x7f0097>
    1f56:	80 ea       	ldi	r24, 0xA0	; 160
    1f58:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f007b>
    1f5c:	c0 e0       	ldi	r28, 0x00	; 0
    1f5e:	83 c0       	rjmp	.+262    	; 0x2066 <ADCInit+0x12c>
    1f60:	2c 2f       	mov	r18, r28
    1f62:	30 e0       	ldi	r19, 0x00	; 0
    1f64:	c9 01       	movw	r24, r18
    1f66:	88 0f       	add	r24, r24
    1f68:	99 1f       	adc	r25, r25
    1f6a:	82 0f       	add	r24, r18
    1f6c:	93 1f       	adc	r25, r19
    1f6e:	01 96       	adiw	r24, 0x01	; 1
    1f70:	09 2e       	mov	r0, r25
    1f72:	00 0c       	add	r0, r0
    1f74:	aa 0b       	sbc	r26, r26
    1f76:	82 57       	subi	r24, 0x72	; 114
    1f78:	9e 4f       	sbci	r25, 0xFE	; 254
    1f7a:	af 4f       	sbci	r26, 0xFF	; 255
    1f7c:	fc 01       	movw	r30, r24
    1f7e:	84 91       	lpm	r24, Z
    1f80:	a7 fd       	sbrc	r26, 7
    1f82:	80 81       	ld	r24, Z
    1f84:	81 30       	cpi	r24, 0x01	; 1
    1f86:	41 f0       	breq	.+16     	; 0x1f98 <ADCInit+0x5e>
    1f88:	08 f4       	brcc	.+2      	; 0x1f8c <ADCInit+0x52>
    1f8a:	6c c0       	rjmp	.+216    	; 0x2064 <ADCInit+0x12a>
    1f8c:	82 30       	cpi	r24, 0x02	; 2
    1f8e:	21 f1       	breq	.+72     	; 0x1fd8 <ADCInit+0x9e>
    1f90:	83 30       	cpi	r24, 0x03	; 3
    1f92:	09 f4       	brne	.+2      	; 0x1f96 <ADCInit+0x5c>
    1f94:	41 c0       	rjmp	.+130    	; 0x2018 <ADCInit+0xde>
    1f96:	5f c0       	rjmp	.+190    	; 0x2056 <ADCInit+0x11c>
    1f98:	54 b1       	in	r21, 0x04	; 4
    1f9a:	c9 01       	movw	r24, r18
    1f9c:	88 0f       	add	r24, r24
    1f9e:	99 1f       	adc	r25, r25
    1fa0:	28 0f       	add	r18, r24
    1fa2:	39 1f       	adc	r19, r25
    1fa4:	2e 5f       	subi	r18, 0xFE	; 254
    1fa6:	3f 4f       	sbci	r19, 0xFF	; 255
    1fa8:	03 2e       	mov	r0, r19
    1faa:	00 0c       	add	r0, r0
    1fac:	44 0b       	sbc	r20, r20
    1fae:	22 57       	subi	r18, 0x72	; 114
    1fb0:	3e 4f       	sbci	r19, 0xFE	; 254
    1fb2:	4f 4f       	sbci	r20, 0xFF	; 255
    1fb4:	f9 01       	movw	r30, r18
    1fb6:	24 91       	lpm	r18, Z
    1fb8:	47 fd       	sbrc	r20, 7
    1fba:	20 81       	ld	r18, Z
    1fbc:	81 e0       	ldi	r24, 0x01	; 1
    1fbe:	90 e0       	ldi	r25, 0x00	; 0
    1fc0:	02 c0       	rjmp	.+4      	; 0x1fc6 <ADCInit+0x8c>
    1fc2:	88 0f       	add	r24, r24
    1fc4:	99 1f       	adc	r25, r25
    1fc6:	2a 95       	dec	r18
    1fc8:	e2 f7       	brpl	.-8      	; 0x1fc2 <ADCInit+0x88>
    1fca:	80 95       	com	r24
    1fcc:	58 23       	and	r21, r24
    1fce:	54 b9       	out	0x04, r21	; 4
    1fd0:	95 b1       	in	r25, 0x05	; 5
    1fd2:	89 23       	and	r24, r25
    1fd4:	85 b9       	out	0x05, r24	; 5
    1fd6:	46 c0       	rjmp	.+140    	; 0x2064 <ADCInit+0x12a>
    1fd8:	57 b1       	in	r21, 0x07	; 7
    1fda:	c9 01       	movw	r24, r18
    1fdc:	88 0f       	add	r24, r24
    1fde:	99 1f       	adc	r25, r25
    1fe0:	28 0f       	add	r18, r24
    1fe2:	39 1f       	adc	r19, r25
    1fe4:	2e 5f       	subi	r18, 0xFE	; 254
    1fe6:	3f 4f       	sbci	r19, 0xFF	; 255
    1fe8:	03 2e       	mov	r0, r19
    1fea:	00 0c       	add	r0, r0
    1fec:	44 0b       	sbc	r20, r20
    1fee:	22 57       	subi	r18, 0x72	; 114
    1ff0:	3e 4f       	sbci	r19, 0xFE	; 254
    1ff2:	4f 4f       	sbci	r20, 0xFF	; 255
    1ff4:	f9 01       	movw	r30, r18
    1ff6:	24 91       	lpm	r18, Z
    1ff8:	47 fd       	sbrc	r20, 7
    1ffa:	20 81       	ld	r18, Z
    1ffc:	81 e0       	ldi	r24, 0x01	; 1
    1ffe:	90 e0       	ldi	r25, 0x00	; 0
    2000:	02 c0       	rjmp	.+4      	; 0x2006 <ADCInit+0xcc>
    2002:	88 0f       	add	r24, r24
    2004:	99 1f       	adc	r25, r25
    2006:	2a 95       	dec	r18
    2008:	e2 f7       	brpl	.-8      	; 0x2002 <ADCInit+0xc8>
    200a:	80 95       	com	r24
    200c:	58 23       	and	r21, r24
    200e:	57 b9       	out	0x07, r21	; 7
    2010:	98 b1       	in	r25, 0x08	; 8
    2012:	89 23       	and	r24, r25
    2014:	88 b9       	out	0x08, r24	; 8
    2016:	26 c0       	rjmp	.+76     	; 0x2064 <ADCInit+0x12a>
    2018:	4a b1       	in	r20, 0x0a	; 10
    201a:	c9 01       	movw	r24, r18
    201c:	88 0f       	add	r24, r24
    201e:	99 1f       	adc	r25, r25
    2020:	82 0f       	add	r24, r18
    2022:	93 1f       	adc	r25, r19
    2024:	02 96       	adiw	r24, 0x02	; 2
    2026:	09 2e       	mov	r0, r25
    2028:	00 0c       	add	r0, r0
    202a:	aa 0b       	sbc	r26, r26
    202c:	82 57       	subi	r24, 0x72	; 114
    202e:	9e 4f       	sbci	r25, 0xFE	; 254
    2030:	af 4f       	sbci	r26, 0xFF	; 255
    2032:	fc 01       	movw	r30, r24
    2034:	24 91       	lpm	r18, Z
    2036:	a7 fd       	sbrc	r26, 7
    2038:	20 81       	ld	r18, Z
    203a:	81 e0       	ldi	r24, 0x01	; 1
    203c:	90 e0       	ldi	r25, 0x00	; 0
    203e:	02 c0       	rjmp	.+4      	; 0x2044 <ADCInit+0x10a>
    2040:	88 0f       	add	r24, r24
    2042:	99 1f       	adc	r25, r25
    2044:	2a 95       	dec	r18
    2046:	e2 f7       	brpl	.-8      	; 0x2040 <ADCInit+0x106>
    2048:	80 95       	com	r24
    204a:	48 23       	and	r20, r24
    204c:	4a b9       	out	0x0a, r20	; 10
    204e:	9b b1       	in	r25, 0x0b	; 11
    2050:	89 23       	and	r24, r25
    2052:	8b b9       	out	0x0b, r24	; 11
    2054:	07 c0       	rjmp	.+14     	; 0x2064 <ADCInit+0x12a>
    2056:	45 eb       	ldi	r20, 0xB5	; 181
    2058:	50 e0       	ldi	r21, 0x00	; 0
    205a:	65 eb       	ldi	r22, 0xB5	; 181
    205c:	71 e0       	ldi	r23, 0x01	; 1
    205e:	80 e0       	ldi	r24, 0x00	; 0
    2060:	0e 94 81 21 	call	0x4302	; 0x4302 <PlatformAssert>
    2064:	cf 5f       	subi	r28, 0xFF	; 255
    2066:	c5 30       	cpi	r28, 0x05	; 5
    2068:	08 f4       	brcc	.+2      	; 0x206c <ADCInit+0x132>
    206a:	7a cf       	rjmp	.-268    	; 0x1f60 <ADCInit+0x26>
    206c:	81 e0       	ldi	r24, 0x01	; 1
    206e:	80 93 5a 07 	sts	0x075A, r24	; 0x80075a <sg_eState>
    2072:	cf 91       	pop	r28
    2074:	08 95       	ret

Disassembly of section .text.CANLookupCommand:

00003a9a <CANLookupCommand>:
	{PKT_MODULE_SET_TIME,		ECANMessageType_SetTime},
	{PKT_MODULE_MAX_STATE,		ECANMessageType_MaxState}
};

static ECANMessageType CANLookupCommand( uint16_t u16ID )
{
    3a9a:	cf 93       	push	r28
    3a9c:	df 93       	push	r29
    3a9e:	ec 01       	movw	r28, r24
	uint8_t u8Index = 0;
    3aa0:	90 e0       	ldi	r25, 0x00	; 0
	
	while( u8Index < (sizeof(sg_sRXCommandList)/sizeof(sg_sRXCommandList[0])) )
    3aa2:	26 c0       	rjmp	.+76     	; 0x3af0 <CANLookupCommand+0x56>
	{
		if( sg_sRXCommandList[u8Index].u16ID == u16ID )
    3aa4:	a9 2f       	mov	r26, r25
    3aa6:	b0 e0       	ldi	r27, 0x00	; 0
    3aa8:	9d 01       	movw	r18, r26
    3aaa:	22 0f       	add	r18, r18
    3aac:	33 1f       	adc	r19, r19
    3aae:	2a 0f       	add	r18, r26
    3ab0:	3b 1f       	adc	r19, r27
    3ab2:	03 2e       	mov	r0, r19
    3ab4:	00 0c       	add	r0, r0
    3ab6:	44 0b       	sbc	r20, r20
    3ab8:	2c 5c       	subi	r18, 0xCC	; 204
    3aba:	3e 4f       	sbci	r19, 0xFE	; 254
    3abc:	4f 4f       	sbci	r20, 0xFF	; 255
    3abe:	f9 01       	movw	r30, r18
    3ac0:	54 2f       	mov	r21, r20
    3ac2:	0e 94 d0 24 	call	0x49a0	; 0x49a0 <__xload_2>
    3ac6:	6c 17       	cp	r22, r28
    3ac8:	7d 07       	cpc	r23, r29
    3aca:	89 f4       	brne	.+34     	; 0x3aee <CANLookupCommand+0x54>
		{
			return( sg_sRXCommandList[u8Index].eType );
    3acc:	cd 01       	movw	r24, r26
    3ace:	88 0f       	add	r24, r24
    3ad0:	99 1f       	adc	r25, r25
    3ad2:	8a 0f       	add	r24, r26
    3ad4:	9b 1f       	adc	r25, r27
    3ad6:	02 96       	adiw	r24, 0x02	; 2
    3ad8:	09 2e       	mov	r0, r25
    3ada:	00 0c       	add	r0, r0
    3adc:	aa 0b       	sbc	r26, r26
    3ade:	8c 5c       	subi	r24, 0xCC	; 204
    3ae0:	9e 4f       	sbci	r25, 0xFE	; 254
    3ae2:	af 4f       	sbci	r26, 0xFF	; 255
    3ae4:	fc 01       	movw	r30, r24
    3ae6:	84 91       	lpm	r24, Z
    3ae8:	a7 fd       	sbrc	r26, 7
    3aea:	80 81       	ld	r24, Z
    3aec:	04 c0       	rjmp	.+8      	; 0x3af6 <CANLookupCommand+0x5c>
		}
		
		u8Index++;
    3aee:	9f 5f       	subi	r25, 0xFF	; 255

static ECANMessageType CANLookupCommand( uint16_t u16ID )
{
	uint8_t u8Index = 0;
	
	while( u8Index < (sizeof(sg_sRXCommandList)/sizeof(sg_sRXCommandList[0])) )
    3af0:	99 30       	cpi	r25, 0x09	; 9
    3af2:	c0 f2       	brcs	.-80     	; 0x3aa4 <CANLookupCommand+0xa>
		}
		
		u8Index++;
	}
	
	return( ECANMessageType_MAX );
    3af4:	81 e1       	ldi	r24, 0x11	; 17
}
    3af6:	df 91       	pop	r29
    3af8:	cf 91       	pop	r28
    3afa:	08 95       	ret

Disassembly of section .text.CANMOBSet:

000013d0 <CANMOBSet>:

static void CANMOBSet( uint8_t u8MOBIndex,
					   const SMOBDef* psDef,
					   uint8_t* pu8Data,
					   uint8_t u8DataLen )
{
    13d0:	8f 92       	push	r8
    13d2:	9f 92       	push	r9
    13d4:	af 92       	push	r10
    13d6:	bf 92       	push	r11
    13d8:	cf 92       	push	r12
    13da:	df 92       	push	r13
    13dc:	ef 92       	push	r14
    13de:	ff 92       	push	r15
    13e0:	0f 93       	push	r16
    13e2:	1f 93       	push	r17
    13e4:	cf 93       	push	r28
    13e6:	df 93       	push	r29
    13e8:	f8 2e       	mov	r15, r24
    13ea:	6a 01       	movw	r12, r20
    13ec:	e6 2e       	mov	r14, r22
    13ee:	e9 01       	movw	r28, r18
	uint8_t u8CANCDMOBValue;
	uint32_t u32MessageID;
	
	MBASSERT( u8MOBIndex <= 5 );
    13f0:	0f 2e       	mov	r0, r31
    13f2:	f5 e0       	ldi	r31, 0x05	; 5
    13f4:	8f 2e       	mov	r8, r31
    13f6:	f0 2d       	mov	r31, r0
    13f8:	88 16       	cp	r8, r24
    13fa:	38 f4       	brcc	.+14     	; 0x140a <CANMOBSet+0x3a>
    13fc:	4d ec       	ldi	r20, 0xCD	; 205
    13fe:	50 e0       	ldi	r21, 0x00	; 0
    1400:	60 ec       	ldi	r22, 0xC0	; 192
    1402:	71 e0       	ldi	r23, 0x01	; 1
    1404:	80 e0       	ldi	r24, 0x00	; 0
    1406:	0e 94 81 21 	call	0x4302	; 0x4302 <PlatformAssert>
	MBASSERT( u8DataLen <= 8 );
    140a:	09 30       	cpi	r16, 0x09	; 9
    140c:	38 f0       	brcs	.+14     	; 0x141c <CANMOBSet+0x4c>
    140e:	4e ec       	ldi	r20, 0xCE	; 206
    1410:	50 e0       	ldi	r21, 0x00	; 0
    1412:	60 ec       	ldi	r22, 0xC0	; 192
    1414:	71 e0       	ldi	r23, 0x01	; 1
    1416:	80 e0       	ldi	r24, 0x00	; 0
    1418:	0e 94 81 21 	call	0x4302	; 0x4302 <PlatformAssert>
	
	// Set the MOB page, auto increment, and data index 0
	CANPAGE = u8MOBIndex << 4;
    141c:	8f 2d       	mov	r24, r15
    141e:	82 95       	swap	r24
    1420:	80 7f       	andi	r24, 0xF0	; 240
    1422:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f00ed>
	
	// Clear the MOB status
	CANSTMOB = 0;
    1426:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
	
	// Set the MOB registers for this page
	u8CANCDMOBValue = u8DataLen;
	u8CANCDMOBValue |= (psDef->u8Mode << CONMOB0);
    142a:	f6 01       	movw	r30, r12
    142c:	84 91       	lpm	r24, Z
    142e:	e7 fc       	sbrc	r14, 7
    1430:	80 81       	ld	r24, Z
    1432:	20 e4       	ldi	r18, 0x40	; 64
    1434:	82 9f       	mul	r24, r18
    1436:	c0 01       	movw	r24, r0
    1438:	11 24       	eor	r1, r1
    143a:	10 2f       	mov	r17, r16
    143c:	18 2b       	or	r17, r24
	if( psDef->bReplyValid )
    143e:	ae 2d       	mov	r26, r14
    1440:	c6 01       	movw	r24, r12
    1442:	01 96       	adiw	r24, 0x01	; 1
    1444:	a1 1d       	adc	r26, r1
    1446:	fc 01       	movw	r30, r24
    1448:	84 91       	lpm	r24, Z
    144a:	a7 fd       	sbrc	r26, 7
    144c:	80 81       	ld	r24, Z
    144e:	81 11       	cpse	r24, r1
	{
		u8CANCDMOBValue |= (1 << RPLV);
    1450:	10 62       	ori	r17, 0x20	; 32
	}
	u8CANCDMOBValue |= (1 << IDE);
    1452:	10 61       	ori	r17, 0x10	; 16
	// Extended frame address format
	//	Bits 0-7: Pack / Module registration ID of sender (if assigned, zero otherwise)
	//	Bits 8-17: Reserved, set to zero.
	//	Bits 18-28: Static message ID (eg. 0x500)
	
	u32MessageID = (uint32_t)PlatformGetRegistrationID();
    1454:	0e 94 1a 25 	call	0x4a34	; 0x4a34 <PlatformGetRegistrationID>
	u32MessageID |= (((uint32_t)psDef->u16ID) & 0x7ff) << 18;
    1458:	4e 2d       	mov	r20, r14
    145a:	96 01       	movw	r18, r12
    145c:	2e 5f       	subi	r18, 0xFE	; 254
    145e:	3f 4f       	sbci	r19, 0xFF	; 255
    1460:	4f 4f       	sbci	r20, 0xFF	; 255
    1462:	f9 01       	movw	r30, r18
    1464:	54 2f       	mov	r21, r20
    1466:	0e 94 d0 24 	call	0x49a0	; 0x49a0 <__xload_2>
    146a:	ab 01       	movw	r20, r22
    146c:	57 70       	andi	r21, 0x07	; 7
    146e:	60 e0       	ldi	r22, 0x00	; 0
    1470:	70 e0       	ldi	r23, 0x00	; 0
    1472:	03 2e       	mov	r0, r19
    1474:	32 e1       	ldi	r19, 0x12	; 18
    1476:	44 0f       	add	r20, r20
    1478:	55 1f       	adc	r21, r21
    147a:	66 1f       	adc	r22, r22
    147c:	77 1f       	adc	r23, r23
    147e:	3a 95       	dec	r19
    1480:	d1 f7       	brne	.-12     	; 0x1476 <CANMOBSet+0xa6>
    1482:	30 2d       	mov	r19, r0
    1484:	4a 01       	movw	r8, r20
    1486:	5b 01       	movw	r10, r22
    1488:	88 2a       	or	r8, r24
    148a:	d5 01       	movw	r26, r10
    148c:	c4 01       	movw	r24, r8
	
	CANIDT4 = psDef->bRTRTag?(1 << RTRTAG):0;
    148e:	4e 2d       	mov	r20, r14
    1490:	96 01       	movw	r18, r12
    1492:	2a 5f       	subi	r18, 0xFA	; 250
    1494:	3f 4f       	sbci	r19, 0xFF	; 255
    1496:	4f 4f       	sbci	r20, 0xFF	; 255
    1498:	f9 01       	movw	r30, r18
    149a:	24 91       	lpm	r18, Z
    149c:	47 fd       	sbrc	r20, 7
    149e:	20 81       	ld	r18, Z
    14a0:	22 23       	and	r18, r18
    14a2:	11 f0       	breq	.+4      	; 0x14a8 <CANMOBSet+0xd8>
    14a4:	24 e0       	ldi	r18, 0x04	; 4
    14a6:	01 c0       	rjmp	.+2      	; 0x14aa <CANMOBSet+0xda>
    14a8:	20 e0       	ldi	r18, 0x00	; 0
    14aa:	e0 ef       	ldi	r30, 0xF0	; 240
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	20 83       	st	Z, r18
	CANIDT4 |= u32MessageID << 3;
    14b0:	20 81       	ld	r18, Z
    14b2:	38 2f       	mov	r19, r24
    14b4:	33 0f       	add	r19, r19
    14b6:	33 0f       	add	r19, r19
    14b8:	33 0f       	add	r19, r19
    14ba:	23 2b       	or	r18, r19
    14bc:	20 83       	st	Z, r18
	CANIDT3 = u32MessageID >> 5;
    14be:	ac 01       	movw	r20, r24
    14c0:	bd 01       	movw	r22, r26
    14c2:	68 94       	set
    14c4:	14 f8       	bld	r1, 4
    14c6:	76 95       	lsr	r23
    14c8:	67 95       	ror	r22
    14ca:	57 95       	ror	r21
    14cc:	47 95       	ror	r20
    14ce:	16 94       	lsr	r1
    14d0:	d1 f7       	brne	.-12     	; 0x14c6 <CANMOBSet+0xf6>
    14d2:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f00f1>
	CANIDT2 = u32MessageID >> 13;
    14d6:	ac 01       	movw	r20, r24
    14d8:	bd 01       	movw	r22, r26
    14da:	03 2e       	mov	r0, r19
    14dc:	3d e0       	ldi	r19, 0x0D	; 13
    14de:	76 95       	lsr	r23
    14e0:	67 95       	ror	r22
    14e2:	57 95       	ror	r21
    14e4:	47 95       	ror	r20
    14e6:	3a 95       	dec	r19
    14e8:	d1 f7       	brne	.-12     	; 0x14de <CANMOBSet+0x10e>
    14ea:	30 2d       	mov	r19, r0
    14ec:	40 93 f2 00 	sts	0x00F2, r20	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f00f2>
	CANIDT1 = u32MessageID >> 21;
    14f0:	07 2e       	mov	r0, r23
    14f2:	75 e1       	ldi	r23, 0x15	; 21
    14f4:	b6 95       	lsr	r27
    14f6:	a7 95       	ror	r26
    14f8:	97 95       	ror	r25
    14fa:	87 95       	ror	r24
    14fc:	7a 95       	dec	r23
    14fe:	d1 f7       	brne	.-12     	; 0x14f4 <CANMOBSet+0x124>
    1500:	70 2d       	mov	r23, r0
    1502:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f00f3>
	
	// Setup mask for the cmd (require matching ID extention bit)
	CANIDM4 = psDef->bRTRMask?(1 << RTRTAG):0;
    1506:	ae 2d       	mov	r26, r14
    1508:	c6 01       	movw	r24, r12
    150a:	07 96       	adiw	r24, 0x07	; 7
    150c:	a1 1d       	adc	r26, r1
    150e:	fc 01       	movw	r30, r24
    1510:	84 91       	lpm	r24, Z
    1512:	a7 fd       	sbrc	r26, 7
    1514:	80 81       	ld	r24, Z
    1516:	88 23       	and	r24, r24
    1518:	11 f0       	breq	.+4      	; 0x151e <CANMOBSet+0x14e>
    151a:	84 e0       	ldi	r24, 0x04	; 4
    151c:	01 c0       	rjmp	.+2      	; 0x1520 <CANMOBSet+0x150>
    151e:	80 e0       	ldi	r24, 0x00	; 0
    1520:	e4 ef       	ldi	r30, 0xF4	; 244
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	80 83       	st	Z, r24
	CANIDM4 |= (1 << IDEMSK);
    1526:	80 81       	ld	r24, Z
    1528:	81 60       	ori	r24, 0x01	; 1
    152a:	80 83       	st	Z, r24
	CANIDM3 = 0;
    152c:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7f00f5>
	CANIDM2 = psDef->u16IDMask << 5;
    1530:	ae 2d       	mov	r26, r14
    1532:	c6 01       	movw	r24, r12
    1534:	04 96       	adiw	r24, 0x04	; 4
    1536:	a1 1d       	adc	r26, r1
    1538:	fc 01       	movw	r30, r24
    153a:	5a 2f       	mov	r21, r26
    153c:	0e 94 d0 24 	call	0x49a0	; 0x49a0 <__xload_2>
    1540:	62 95       	swap	r22
    1542:	66 0f       	add	r22, r22
    1544:	60 7e       	andi	r22, 0xE0	; 224
    1546:	60 93 f6 00 	sts	0x00F6, r22	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7f00f6>
	CANIDM1 = psDef->u16IDMask >> 3;
    154a:	fc 01       	movw	r30, r24
    154c:	5a 2f       	mov	r21, r26
    154e:	0e 94 d0 24 	call	0x49a0	; 0x49a0 <__xload_2>
    1552:	76 95       	lsr	r23
    1554:	67 95       	ror	r22
    1556:	76 95       	lsr	r23
    1558:	67 95       	ror	r22
    155a:	76 95       	lsr	r23
    155c:	67 95       	ror	r22
    155e:	60 93 f7 00 	sts	0x00F7, r22	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7f00f7>
	
	// Set the data into the FIFO
	while( u8DataLen )
    1562:	04 c0       	rjmp	.+8      	; 0x156c <CANMOBSet+0x19c>
	{
		CANMSG = *pu8Data;
    1564:	89 91       	ld	r24, Y+
    1566:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
		
		pu8Data++;
		u8DataLen--;
    156a:	01 50       	subi	r16, 0x01	; 1
	CANIDM3 = 0;
	CANIDM2 = psDef->u16IDMask << 5;
	CANIDM1 = psDef->u16IDMask >> 3;
	
	// Set the data into the FIFO
	while( u8DataLen )
    156c:	01 11       	cpse	r16, r1
    156e:	fa cf       	rjmp	.-12     	; 0x1564 <CANMOBSet+0x194>
		pu8Data++;
		u8DataLen--;
	}
	
	// Send it now
	CANCDMOB = u8CANCDMOBValue;
    1570:	10 93 ef 00 	sts	0x00EF, r17	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
	
	// Enable (activates the MOB) or disable the MOB interrupt
	if( psDef->u8Mode != CAN_DISABLED )
    1574:	f6 01       	movw	r30, r12
    1576:	84 91       	lpm	r24, Z
    1578:	e7 fc       	sbrc	r14, 7
    157a:	80 81       	ld	r24, Z
    157c:	88 23       	and	r24, r24
    157e:	69 f0       	breq	.+26     	; 0x159a <CANMOBSet+0x1ca>
	{
		CANIE2 |= (1 << u8MOBIndex);
    1580:	ee ed       	ldi	r30, 0xDE	; 222
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	20 81       	ld	r18, Z
    1586:	81 e0       	ldi	r24, 0x01	; 1
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	02 c0       	rjmp	.+4      	; 0x1590 <CANMOBSet+0x1c0>
    158c:	88 0f       	add	r24, r24
    158e:	99 1f       	adc	r25, r25
    1590:	fa 94       	dec	r15
    1592:	e2 f7       	brpl	.-8      	; 0x158c <CANMOBSet+0x1bc>
    1594:	82 2b       	or	r24, r18
    1596:	80 83       	st	Z, r24
    1598:	0d c0       	rjmp	.+26     	; 0x15b4 <CANMOBSet+0x1e4>
	}
	else
	{
		CANIE2 &= (uint8_t)~(1 << u8MOBIndex);
    159a:	ee ed       	ldi	r30, 0xDE	; 222
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	20 81       	ld	r18, Z
    15a0:	81 e0       	ldi	r24, 0x01	; 1
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	02 c0       	rjmp	.+4      	; 0x15aa <CANMOBSet+0x1da>
    15a6:	88 0f       	add	r24, r24
    15a8:	99 1f       	adc	r25, r25
    15aa:	fa 94       	dec	r15
    15ac:	e2 f7       	brpl	.-8      	; 0x15a6 <CANMOBSet+0x1d6>
    15ae:	80 95       	com	r24
    15b0:	82 23       	and	r24, r18
    15b2:	80 83       	st	Z, r24
	}
}
    15b4:	df 91       	pop	r29
    15b6:	cf 91       	pop	r28
    15b8:	1f 91       	pop	r17
    15ba:	0f 91       	pop	r16
    15bc:	ff 90       	pop	r15
    15be:	ef 90       	pop	r14
    15c0:	df 90       	pop	r13
    15c2:	cf 90       	pop	r12
    15c4:	bf 90       	pop	r11
    15c6:	af 90       	pop	r10
    15c8:	9f 90       	pop	r9
    15ca:	8f 90       	pop	r8
    15cc:	08 95       	ret

Disassembly of section .text.CANSendMessageInternal:

00001b14 <CANSendMessageInternal>:

static void CANSendMessageInternal( ECANMessageType eType,
									uint8_t* pu8Data,
									uint8_t u8DataLen,	
									bool bRetransmit )
{
    1b14:	6f 92       	push	r6
    1b16:	7f 92       	push	r7
    1b18:	8f 92       	push	r8
    1b1a:	ef 92       	push	r14
    1b1c:	ff 92       	push	r15
    1b1e:	0f 93       	push	r16
    1b20:	cf 93       	push	r28
    1b22:	df 93       	push	r29
    1b24:	c8 2f       	mov	r28, r24
    1b26:	7b 01       	movw	r14, r22
    1b28:	04 2f       	mov	r16, r20
    1b2a:	d2 2f       	mov	r29, r18
	const SMOBDef* psDef = NULL;
	
	if( ECANMessageType_ModuleAnnouncement == eType )
    1b2c:	88 23       	and	r24, r24
    1b2e:	f9 f0       	breq	.+62     	; 0x1b6e <CANSendMessageInternal+0x5a>
	{
		psDef = &sg_sMOBModuleAnnouncement;
	}
	else if( ECANMessageType_ModuleStatus1 == eType )
    1b30:	81 30       	cpi	r24, 0x01	; 1
    1b32:	31 f1       	breq	.+76     	; 0x1b80 <CANSendMessageInternal+0x6c>
	{
		psDef = &sg_sMOBModuleStatus1;
	}
	else if( ECANMessageType_ModuleStatus2 == eType )
    1b34:	82 30       	cpi	r24, 0x02	; 2
    1b36:	69 f1       	breq	.+90     	; 0x1b92 <CANSendMessageInternal+0x7e>
	{
		psDef = &sg_sMOBModuleStatus2;
	}
	else if( ECANMessageType_ModuleStatus3 == eType )
    1b38:	83 30       	cpi	r24, 0x03	; 3
    1b3a:	a1 f1       	breq	.+104    	; 0x1ba4 <CANSendMessageInternal+0x90>
	{
		psDef = &sg_sMOBModuleStatus3;
	}
	else if( ECANMessageType_ModuleCellCommStat1 == eType )
    1b3c:	86 30       	cpi	r24, 0x06	; 6
    1b3e:	d9 f1       	breq	.+118    	; 0x1bb6 <CANSendMessageInternal+0xa2>
	{
		psDef = &sg_sMOBModuleCellCommStat1;
	}
	else if( ECANMessageType_ModuleCellCommStat2 == eType )
    1b40:	87 30       	cpi	r24, 0x07	; 7
    1b42:	09 f4       	brne	.+2      	; 0x1b46 <CANSendMessageInternal+0x32>
    1b44:	41 c0       	rjmp	.+130    	; 0x1bc8 <CANSendMessageInternal+0xb4>
	{
		psDef = &sg_sMOBModuleCellCommStat2;
	}
	else if( ECANMessageType_ModuleHardwareDetail == eType )
    1b46:	85 30       	cpi	r24, 0x05	; 5
    1b48:	09 f4       	brne	.+2      	; 0x1b4c <CANSendMessageInternal+0x38>
    1b4a:	47 c0       	rjmp	.+142    	; 0x1bda <CANSendMessageInternal+0xc6>
	{
		psDef = &sg_sMOBModuleHardwareDetail;
	}
	else if( ECANMessageType_ModuleCellDetail == eType )
    1b4c:	84 30       	cpi	r24, 0x04	; 4
    1b4e:	09 f4       	brne	.+2      	; 0x1b52 <CANSendMessageInternal+0x3e>
    1b50:	4d c0       	rjmp	.+154    	; 0x1bec <CANSendMessageInternal+0xd8>
	{
		psDef = &sg_sMOBModuleCellDetail;
	}
	else if( ECANMessageType_ModuleRequestTime == eType )
    1b52:	88 30       	cpi	r24, 0x08	; 8
    1b54:	09 f4       	brne	.+2      	; 0x1b58 <CANSendMessageInternal+0x44>
    1b56:	53 c0       	rjmp	.+166    	; 0x1bfe <CANSendMessageInternal+0xea>
		psDef = &sg_sMOBModuleRequestTime;
	}
	else
	{
		// Invalid message type
		MBASSERT(0);
    1b58:	49 e3       	ldi	r20, 0x39	; 57
    1b5a:	51 e0       	ldi	r21, 0x01	; 1
    1b5c:	60 ec       	ldi	r22, 0xC0	; 192
    1b5e:	71 e0       	ldi	r23, 0x01	; 1
    1b60:	80 e0       	ldi	r24, 0x00	; 0
    1b62:	0e 94 81 21 	call	0x4302	; 0x4302 <PlatformAssert>
static void CANSendMessageInternal( ECANMessageType eType,
									uint8_t* pu8Data,
									uint8_t u8DataLen,	
									bool bRetransmit )
{
	const SMOBDef* psDef = NULL;
    1b66:	61 2c       	mov	r6, r1
    1b68:	71 2c       	mov	r7, r1
    1b6a:	81 2c       	mov	r8, r1
    1b6c:	50 c0       	rjmp	.+160    	; 0x1c0e <CANSendMessageInternal+0xfa>
	
	if( ECANMessageType_ModuleAnnouncement == eType )
	{
		psDef = &sg_sMOBModuleAnnouncement;
    1b6e:	0f 2e       	mov	r0, r31
    1b70:	fb e0       	ldi	r31, 0x0B	; 11
    1b72:	6f 2e       	mov	r6, r31
    1b74:	f2 e0       	ldi	r31, 0x02	; 2
    1b76:	7f 2e       	mov	r7, r31
    1b78:	f0 e0       	ldi	r31, 0x00	; 0
    1b7a:	8f 2e       	mov	r8, r31
    1b7c:	f0 2d       	mov	r31, r0
    1b7e:	47 c0       	rjmp	.+142    	; 0x1c0e <CANSendMessageInternal+0xfa>
	}
	else if( ECANMessageType_ModuleStatus1 == eType )
	{
		psDef = &sg_sMOBModuleStatus1;
    1b80:	0f 2e       	mov	r0, r31
    1b82:	f3 e0       	ldi	r31, 0x03	; 3
    1b84:	6f 2e       	mov	r6, r31
    1b86:	f2 e0       	ldi	r31, 0x02	; 2
    1b88:	7f 2e       	mov	r7, r31
    1b8a:	f0 e0       	ldi	r31, 0x00	; 0
    1b8c:	8f 2e       	mov	r8, r31
    1b8e:	f0 2d       	mov	r31, r0
    1b90:	3e c0       	rjmp	.+124    	; 0x1c0e <CANSendMessageInternal+0xfa>
	}
	else if( ECANMessageType_ModuleStatus2 == eType )
	{
		psDef = &sg_sMOBModuleStatus2;
    1b92:	0f 2e       	mov	r0, r31
    1b94:	fb ef       	ldi	r31, 0xFB	; 251
    1b96:	6f 2e       	mov	r6, r31
    1b98:	f1 e0       	ldi	r31, 0x01	; 1
    1b9a:	7f 2e       	mov	r7, r31
    1b9c:	f0 e0       	ldi	r31, 0x00	; 0
    1b9e:	8f 2e       	mov	r8, r31
    1ba0:	f0 2d       	mov	r31, r0
    1ba2:	35 c0       	rjmp	.+106    	; 0x1c0e <CANSendMessageInternal+0xfa>
	}
	else if( ECANMessageType_ModuleStatus3 == eType )
	{
		psDef = &sg_sMOBModuleStatus3;
    1ba4:	0f 2e       	mov	r0, r31
    1ba6:	f3 ef       	ldi	r31, 0xF3	; 243
    1ba8:	6f 2e       	mov	r6, r31
    1baa:	f1 e0       	ldi	r31, 0x01	; 1
    1bac:	7f 2e       	mov	r7, r31
    1bae:	f0 e0       	ldi	r31, 0x00	; 0
    1bb0:	8f 2e       	mov	r8, r31
    1bb2:	f0 2d       	mov	r31, r0
    1bb4:	2c c0       	rjmp	.+88     	; 0x1c0e <CANSendMessageInternal+0xfa>
	}
	else if( ECANMessageType_ModuleCellCommStat1 == eType )
	{
		psDef = &sg_sMOBModuleCellCommStat1;
    1bb6:	0f 2e       	mov	r0, r31
    1bb8:	fb ee       	ldi	r31, 0xEB	; 235
    1bba:	6f 2e       	mov	r6, r31
    1bbc:	f1 e0       	ldi	r31, 0x01	; 1
    1bbe:	7f 2e       	mov	r7, r31
    1bc0:	f0 e0       	ldi	r31, 0x00	; 0
    1bc2:	8f 2e       	mov	r8, r31
    1bc4:	f0 2d       	mov	r31, r0
    1bc6:	23 c0       	rjmp	.+70     	; 0x1c0e <CANSendMessageInternal+0xfa>
	}
	else if( ECANMessageType_ModuleCellCommStat2 == eType )
	{
		psDef = &sg_sMOBModuleCellCommStat2;
    1bc8:	0f 2e       	mov	r0, r31
    1bca:	f3 ee       	ldi	r31, 0xE3	; 227
    1bcc:	6f 2e       	mov	r6, r31
    1bce:	f1 e0       	ldi	r31, 0x01	; 1
    1bd0:	7f 2e       	mov	r7, r31
    1bd2:	f0 e0       	ldi	r31, 0x00	; 0
    1bd4:	8f 2e       	mov	r8, r31
    1bd6:	f0 2d       	mov	r31, r0
    1bd8:	1a c0       	rjmp	.+52     	; 0x1c0e <CANSendMessageInternal+0xfa>
	}
	else if( ECANMessageType_ModuleHardwareDetail == eType )
	{
		psDef = &sg_sMOBModuleHardwareDetail;
    1bda:	0f 2e       	mov	r0, r31
    1bdc:	f3 ed       	ldi	r31, 0xD3	; 211
    1bde:	6f 2e       	mov	r6, r31
    1be0:	f1 e0       	ldi	r31, 0x01	; 1
    1be2:	7f 2e       	mov	r7, r31
    1be4:	f0 e0       	ldi	r31, 0x00	; 0
    1be6:	8f 2e       	mov	r8, r31
    1be8:	f0 2d       	mov	r31, r0
    1bea:	11 c0       	rjmp	.+34     	; 0x1c0e <CANSendMessageInternal+0xfa>
	}
	else if( ECANMessageType_ModuleCellDetail == eType )
	{
		psDef = &sg_sMOBModuleCellDetail;
    1bec:	0f 2e       	mov	r0, r31
    1bee:	fb ed       	ldi	r31, 0xDB	; 219
    1bf0:	6f 2e       	mov	r6, r31
    1bf2:	f1 e0       	ldi	r31, 0x01	; 1
    1bf4:	7f 2e       	mov	r7, r31
    1bf6:	f0 e0       	ldi	r31, 0x00	; 0
    1bf8:	8f 2e       	mov	r8, r31
    1bfa:	f0 2d       	mov	r31, r0
    1bfc:	08 c0       	rjmp	.+16     	; 0x1c0e <CANSendMessageInternal+0xfa>
	}
	else if( ECANMessageType_ModuleRequestTime == eType )
	{
		psDef = &sg_sMOBModuleRequestTime;
    1bfe:	0f 2e       	mov	r0, r31
    1c00:	fb ec       	ldi	r31, 0xCB	; 203
    1c02:	6f 2e       	mov	r6, r31
    1c04:	f1 e0       	ldi	r31, 0x01	; 1
    1c06:	7f 2e       	mov	r7, r31
    1c08:	f0 e0       	ldi	r31, 0x00	; 0
    1c0a:	8f 2e       	mov	r8, r31
    1c0c:	f0 2d       	mov	r31, r0
	{
		// Invalid message type
		MBASSERT(0);
	}
	
	if(bRetransmit && sg_bInRetransmit) {
    1c0e:	dd 23       	and	r29, r29
    1c10:	21 f0       	breq	.+8      	; 0x1c1a <CANSendMessageInternal+0x106>
    1c12:	80 91 5b 07 	lds	r24, 0x075B	; 0x80075b <sg_bInRetransmit>
    1c16:	81 11       	cpse	r24, r1
    1c18:	30 c0       	rjmp	.+96     	; 0x1c7a <CANSendMessageInternal+0x166>
		// Already in a retransmit, don't allow nested retries
		return;
	}
	if( bRetransmit || (false == sg_bBusy) )
    1c1a:	d1 11       	cpse	r29, r1
    1c1c:	04 c0       	rjmp	.+8      	; 0x1c26 <CANSendMessageInternal+0x112>
    1c1e:	80 91 5f 07 	lds	r24, 0x075F	; 0x80075f <sg_bBusy>
    1c22:	81 11       	cpse	r24, r1
    1c24:	2a c0       	rjmp	.+84     	; 0x1c7a <CANSendMessageInternal+0x166>
	{
		sg_bBusy = true;
    1c26:	81 e0       	ldi	r24, 0x01	; 1
    1c28:	80 93 5f 07 	sts	0x075F, r24	; 0x80075f <sg_bBusy>
		
		// Save this message info for retransmit later if needed
		if( false == bRetransmit )
    1c2c:	d1 11       	cpse	r29, r1
    1c2e:	1a c0       	rjmp	.+52     	; 0x1c64 <CANSendMessageInternal+0x150>
		{
			sg_u8TransmitAttempts = 0;
    1c30:	10 92 5e 07 	sts	0x075E, r1	; 0x80075e <sg_u8TransmitAttempts>
			sg_eLastTXType = eType;
    1c34:	c0 93 5d 07 	sts	0x075D, r28	; 0x80075d <sg_eLastTXType>
			MBASSERT(u8DataLen <= CAN_MAX_MSG_SIZE);
    1c38:	09 30       	cpi	r16, 0x09	; 9
    1c3a:	38 f0       	brcs	.+14     	; 0x1c4a <CANSendMessageInternal+0x136>
    1c3c:	49 e4       	ldi	r20, 0x49	; 73
    1c3e:	51 e0       	ldi	r21, 0x01	; 1
    1c40:	60 ec       	ldi	r22, 0xC0	; 192
    1c42:	71 e0       	ldi	r23, 0x01	; 1
    1c44:	80 e0       	ldi	r24, 0x00	; 0
    1c46:	0e 94 81 21 	call	0x4302	; 0x4302 <PlatformAssert>
			memcpy(sg_u8LastTXData, pu8Data, u8DataLen);
    1c4a:	20 2f       	mov	r18, r16
    1c4c:	30 e0       	ldi	r19, 0x00	; 0
    1c4e:	c7 01       	movw	r24, r14
    1c50:	a0 e8       	ldi	r26, 0x80	; 128
    1c52:	ac 01       	movw	r20, r24
    1c54:	6a 2f       	mov	r22, r26
    1c56:	85 e3       	ldi	r24, 0x35	; 53
    1c58:	97 e0       	ldi	r25, 0x07	; 7
    1c5a:	0e 94 0d 21 	call	0x421a	; 0x421a <memcpy>
			sg_u8LastTXDataLen = u8DataLen;
    1c5e:	00 93 5c 07 	sts	0x075C, r16	; 0x80075c <sg_u8LastTXDataLen>
    1c62:	05 c0       	rjmp	.+10     	; 0x1c6e <CANSendMessageInternal+0x15a>
		}
		else
		{
			sg_u8TransmitAttempts++;
    1c64:	80 91 5e 07 	lds	r24, 0x075E	; 0x80075e <sg_u8TransmitAttempts>
    1c68:	8f 5f       	subi	r24, 0xFF	; 255
    1c6a:	80 93 5e 07 	sts	0x075E, r24	; 0x80075e <sg_u8TransmitAttempts>
		}
		
		// Send it now
		CANMOBSet( CANMOB_TX_IDX, psDef, pu8Data, u8DataLen );
    1c6e:	97 01       	movw	r18, r14
    1c70:	68 2d       	mov	r22, r8
    1c72:	a3 01       	movw	r20, r6
    1c74:	81 e0       	ldi	r24, 0x01	; 1
    1c76:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <CANMOBSet>
	}
}
    1c7a:	df 91       	pop	r29
    1c7c:	cf 91       	pop	r28
    1c7e:	0f 91       	pop	r16
    1c80:	ff 90       	pop	r15
    1c82:	ef 90       	pop	r14
    1c84:	8f 90       	pop	r8
    1c86:	7f 90       	pop	r7
    1c88:	6f 90       	pop	r6
    1c8a:	08 95       	ret

Disassembly of section .text.CANMOBInterrupt:

00001982 <CANMOBInterrupt>:

void CANMOBInterrupt( uint8_t u8MOBIndex )
{
    1982:	cf 92       	push	r12
    1984:	df 92       	push	r13
    1986:	ff 92       	push	r15
    1988:	0f 93       	push	r16
    198a:	1f 93       	push	r17
    198c:	cf 93       	push	r28
    198e:	df 93       	push	r29
    1990:	cd b7       	in	r28, 0x3d	; 61
    1992:	de b7       	in	r29, 0x3e	; 62
    1994:	28 97       	sbiw	r28, 0x08	; 8
    1996:	0f b6       	in	r0, 0x3f	; 63
    1998:	f8 94       	cli
    199a:	de bf       	out	0x3e, r29	; 62
    199c:	0f be       	out	0x3f, r0	; 63
    199e:	cd bf       	out	0x3d, r28	; 61
	// Set the MOB page first (and zero the data index)
	CANPAGE = u8MOBIndex << 4;
    19a0:	98 2f       	mov	r25, r24
    19a2:	92 95       	swap	r25
    19a4:	90 7f       	andi	r25, 0xF0	; 240
    19a6:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f00ed>
	
	// Temporarily disable the MOB to examine and modify the registers
	CANIE2 &= (uint8_t)~(1 << u8MOBIndex);
    19aa:	ee ed       	ldi	r30, 0xDE	; 222
    19ac:	f0 e0       	ldi	r31, 0x00	; 0
    19ae:	20 81       	ld	r18, Z
    19b0:	01 e0       	ldi	r16, 0x01	; 1
    19b2:	10 e0       	ldi	r17, 0x00	; 0
    19b4:	08 2e       	mov	r0, r24
    19b6:	02 c0       	rjmp	.+4      	; 0x19bc <CANMOBInterrupt+0x3a>
    19b8:	00 0f       	add	r16, r16
    19ba:	11 1f       	adc	r17, r17
    19bc:	0a 94       	dec	r0
    19be:	e2 f7       	brpl	.-8      	; 0x19b8 <CANMOBInterrupt+0x36>
    19c0:	90 2f       	mov	r25, r16
    19c2:	90 95       	com	r25
    19c4:	92 23       	and	r25, r18
    19c6:	90 83       	st	Z, r25
	CANCDMOB &= (uint8_t)~((1 << CONMOB0) | (1 << CONMOB1));
    19c8:	ef ee       	ldi	r30, 0xEF	; 239
    19ca:	f0 e0       	ldi	r31, 0x00	; 0
    19cc:	90 81       	ld	r25, Z
    19ce:	9f 73       	andi	r25, 0x3F	; 63
    19d0:	90 83       	st	Z, r25
	
	if( CANMOB_RX_IDX == u8MOBIndex )
    19d2:	81 11       	cpse	r24, r1
    19d4:	5d c0       	rjmp	.+186    	; 0x1a90 <CANMOBInterrupt+0x10e>
	{
		// TX success?  Just clear it since this is the RX context
		if( CANSTMOB & (1 << TXOK) )
    19d6:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    19da:	86 ff       	sbrs	r24, 6
    19dc:	09 c0       	rjmp	.+18     	; 0x19f0 <CANMOBInterrupt+0x6e>
		{
			// Clear it
			CANSTMOB &= ~(1 << TXOK);
    19de:	ee ee       	ldi	r30, 0xEE	; 238
    19e0:	f0 e0       	ldi	r31, 0x00	; 0
    19e2:	80 81       	ld	r24, Z
    19e4:	8f 7b       	andi	r24, 0xBF	; 191
    19e6:	80 83       	st	Z, r24
            sg_bBusy = false;
    19e8:	10 92 5f 07 	sts	0x075F, r1	; 0x80075f <sg_bBusy>
            sg_bInRetransmit = false;  // Clear flag on success	
    19ec:	10 92 5b 07 	sts	0x075B, r1	; 0x80075b <sg_bInRetransmit>
		}
		// RX success?
		if( CANSTMOB & (1 << RXOK) )
    19f0:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    19f4:	85 ff       	sbrs	r24, 5
    19f6:	38 c0       	rjmp	.+112    	; 0x1a68 <CANMOBInterrupt+0xe6>
		{
			// Clear it
			CANSTMOB &= ~(1 << RXOK);
    19f8:	ee ee       	ldi	r30, 0xEE	; 238
    19fa:	f0 e0       	ldi	r31, 0x00	; 0
    19fc:	80 81       	ld	r24, Z
    19fe:	8f 7d       	andi	r24, 0xDF	; 223
    1a00:	80 83       	st	Z, r24
		
			if( sg_pfRXCallback )
    1a02:	c0 90 45 07 	lds	r12, 0x0745	; 0x800745 <sg_pfRXCallback>
    1a06:	d0 90 46 07 	lds	r13, 0x0746	; 0x800746 <sg_pfRXCallback+0x1>
    1a0a:	c1 14       	cp	r12, r1
    1a0c:	d1 04       	cpc	r13, r1
    1a0e:	61 f1       	breq	.+88     	; 0x1a68 <CANMOBInterrupt+0xe6>
			{
				ECANMessageType eType;
				uint16_t u16ID = 0;
				uint8_t u8Data[8];
				uint8_t u8DataLen = CANCDMOB & 0x0f;
    1a10:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    1a14:	8f 70       	andi	r24, 0x0F	; 15
    1a16:	f8 2e       	mov	r15, r24
				uint8_t u8Index = 0;
			
				// Grab the messageID from the identifier registers
				u16ID = ((uint16_t)CANIDT1) << 3;
    1a18:	40 91 f3 00 	lds	r20, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f00f3>
    1a1c:	50 e0       	ldi	r21, 0x00	; 0
    1a1e:	44 0f       	add	r20, r20
    1a20:	55 1f       	adc	r21, r21
    1a22:	44 0f       	add	r20, r20
    1a24:	55 1f       	adc	r21, r21
    1a26:	44 0f       	add	r20, r20
    1a28:	55 1f       	adc	r21, r21
				u16ID |= CANIDT2 >> 5;
    1a2a:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f00f2>
    1a2e:	82 95       	swap	r24
    1a30:	86 95       	lsr	r24
    1a32:	87 70       	andi	r24, 0x07	; 7
    1a34:	48 2b       	or	r20, r24
			{
				ECANMessageType eType;
				uint16_t u16ID = 0;
				uint8_t u8Data[8];
				uint8_t u8DataLen = CANCDMOB & 0x0f;
				uint8_t u8Index = 0;
    1a36:	90 e0       	ldi	r25, 0x00	; 0
				// Grab the messageID from the identifier registers
				u16ID = ((uint16_t)CANIDT1) << 3;
				u16ID |= CANIDT2 >> 5;
			
				// Pull the data out into a temp buffer
				while( u8Index < u8DataLen )
    1a38:	0a c0       	rjmp	.+20     	; 0x1a4e <CANMOBInterrupt+0xcc>
				{
					u8Data[u8Index] = CANMSG;
    1a3a:	20 91 fa 00 	lds	r18, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
    1a3e:	e1 e0       	ldi	r30, 0x01	; 1
    1a40:	f0 e0       	ldi	r31, 0x00	; 0
    1a42:	ec 0f       	add	r30, r28
    1a44:	fd 1f       	adc	r31, r29
    1a46:	e9 0f       	add	r30, r25
    1a48:	f1 1d       	adc	r31, r1
    1a4a:	20 83       	st	Z, r18
					u8Index++;
    1a4c:	9f 5f       	subi	r25, 0xFF	; 255
				// Grab the messageID from the identifier registers
				u16ID = ((uint16_t)CANIDT1) << 3;
				u16ID |= CANIDT2 >> 5;
			
				// Pull the data out into a temp buffer
				while( u8Index < u8DataLen )
    1a4e:	9f 15       	cp	r25, r15
    1a50:	a0 f3       	brcs	.-24     	; 0x1a3a <CANMOBInterrupt+0xb8>
					u8Data[u8Index] = CANMSG;
					u8Index++;
				}
			
				// Lookup ID to see if it matches one of ours
				eType = CANLookupCommand( u16ID );
    1a52:	ca 01       	movw	r24, r20
    1a54:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <CANLookupCommand>
			
				if( eType != ECANMessageType_MAX )
    1a58:	81 31       	cpi	r24, 0x11	; 17
    1a5a:	31 f0       	breq	.+12     	; 0x1a68 <CANMOBInterrupt+0xe6>
				{
					// Call comamnd handler
					sg_pfRXCallback( eType, u8Data, u8DataLen );
    1a5c:	4f 2d       	mov	r20, r15
    1a5e:	be 01       	movw	r22, r28
    1a60:	6f 5f       	subi	r22, 0xFF	; 255
    1a62:	7f 4f       	sbci	r23, 0xFF	; 255
    1a64:	f6 01       	movw	r30, r12
    1a66:	09 95       	icall
				}
			}
		}
	
		// If receive error, clear the bits
		if( CANSTMOB & ((1 << SERR) | (1 << CERR) | (1 << FERR)) )
    1a68:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    1a6c:	8e 70       	andi	r24, 0x0E	; 14
    1a6e:	29 f0       	breq	.+10     	; 0x1a7a <CANMOBInterrupt+0xf8>
		{
			// Clear it.  Just ignore
			CANSTMOB &= ~((1 << SERR) | (1 << CERR) | (1 << FERR));
    1a70:	ee ee       	ldi	r30, 0xEE	; 238
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	80 81       	ld	r24, Z
    1a76:	81 7f       	andi	r24, 0xF1	; 241
    1a78:	80 83       	st	Z, r24
		}
	
		// Re-enable RX now
		CANIE2 |= (1 << u8MOBIndex);
    1a7a:	ee ed       	ldi	r30, 0xDE	; 222
    1a7c:	f0 e0       	ldi	r31, 0x00	; 0
    1a7e:	80 81       	ld	r24, Z
    1a80:	08 2b       	or	r16, r24
    1a82:	00 83       	st	Z, r16
		CANCDMOB |= (1 << CONMOB1);
    1a84:	ef ee       	ldi	r30, 0xEF	; 239
    1a86:	f0 e0       	ldi	r31, 0x00	; 0
    1a88:	80 81       	ld	r24, Z
    1a8a:	80 68       	ori	r24, 0x80	; 128
    1a8c:	80 83       	st	Z, r24
    1a8e:	34 c0       	rjmp	.+104    	; 0x1af8 <CANMOBInterrupt+0x176>
	}
	else if( CANMOB_TX_IDX == u8MOBIndex )
    1a90:	81 30       	cpi	r24, 0x01	; 1
    1a92:	91 f5       	brne	.+100    	; 0x1af8 <CANMOBInterrupt+0x176>
	{
		if( CANSTMOB & (1 << TXOK) )
    1a94:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    1a98:	86 ff       	sbrs	r24, 6
    1a9a:	07 c0       	rjmp	.+14     	; 0x1aaa <CANMOBInterrupt+0x128>
		{
			// Clear it
			CANSTMOB &= ~(1 << TXOK);
    1a9c:	ee ee       	ldi	r30, 0xEE	; 238
    1a9e:	f0 e0       	ldi	r31, 0x00	; 0
    1aa0:	80 81       	ld	r24, Z
    1aa2:	8f 7b       	andi	r24, 0xBF	; 191
    1aa4:	80 83       	st	Z, r24
		
			sg_bBusy = false;
    1aa6:	10 92 5f 07 	sts	0x075F, r1	; 0x80075f <sg_bBusy>
		}
		
		// RX success, just clear it since this is the TX context
		if( CANSTMOB & (1 << RXOK) )
    1aaa:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    1aae:	85 ff       	sbrs	r24, 5
    1ab0:	05 c0       	rjmp	.+10     	; 0x1abc <CANMOBInterrupt+0x13a>
		{
			// Clear it
			CANSTMOB &= ~(1 << RXOK);
    1ab2:	ee ee       	ldi	r30, 0xEE	; 238
    1ab4:	f0 e0       	ldi	r31, 0x00	; 0
    1ab6:	80 81       	ld	r24, Z
    1ab8:	8f 7d       	andi	r24, 0xDF	; 223
    1aba:	80 83       	st	Z, r24
		}

		// If TX Error on transmit (collision with another device)
		// -or- ACK error (nobody listening),
		// retry send
		if( CANSTMOB & ((1 << BERR) | (1 << AERR) | (1 << SERR)) )
    1abc:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    1ac0:	89 71       	andi	r24, 0x19	; 25
    1ac2:	d1 f0       	breq	.+52     	; 0x1af8 <CANMOBInterrupt+0x176>
		{
			// Clear it
			CANSTMOB &= ~((1 << BERR) | (1 << AERR) | (1 << SERR));
    1ac4:	ee ee       	ldi	r30, 0xEE	; 238
    1ac6:	f0 e0       	ldi	r31, 0x00	; 0
    1ac8:	80 81       	ld	r24, Z
    1aca:	86 7e       	andi	r24, 0xE6	; 230
    1acc:	80 83       	st	Z, r24

			if( sg_u8TransmitAttempts < 20 )
    1ace:	80 91 5e 07 	lds	r24, 0x075E	; 0x80075e <sg_u8TransmitAttempts>
    1ad2:	84 31       	cpi	r24, 0x14	; 20
    1ad4:	68 f4       	brcc	.+26     	; 0x1af0 <CANMOBInterrupt+0x16e>
			{
				// Retransmit now
               sg_bInRetransmit = true;  // Set flag before retry
    1ad6:	81 e0       	ldi	r24, 0x01	; 1
    1ad8:	80 93 5b 07 	sts	0x075B, r24	; 0x80075b <sg_bInRetransmit>
               CANSendMessageInternal( sg_eLastTXType, sg_u8LastTXData, sg_u8LastTXDataLen, true );
    1adc:	21 e0       	ldi	r18, 0x01	; 1
    1ade:	40 91 5c 07 	lds	r20, 0x075C	; 0x80075c <sg_u8LastTXDataLen>
    1ae2:	65 e3       	ldi	r22, 0x35	; 53
    1ae4:	77 e0       	ldi	r23, 0x07	; 7
    1ae6:	80 91 5d 07 	lds	r24, 0x075D	; 0x80075d <sg_eLastTXType>
    1aea:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <CANSendMessageInternal>
    1aee:	04 c0       	rjmp	.+8      	; 0x1af8 <CANMOBInterrupt+0x176>
			}
			else
			{
				// Retries exhausted.  Give up
				sg_bBusy = false;
    1af0:	10 92 5f 07 	sts	0x075F, r1	; 0x80075f <sg_bBusy>
                sg_bInRetransmit = false;
    1af4:	10 92 5b 07 	sts	0x075B, r1	; 0x80075b <sg_bInRetransmit>
			}
		}
	}
}
    1af8:	28 96       	adiw	r28, 0x08	; 8
    1afa:	0f b6       	in	r0, 0x3f	; 63
    1afc:	f8 94       	cli
    1afe:	de bf       	out	0x3e, r29	; 62
    1b00:	0f be       	out	0x3f, r0	; 63
    1b02:	cd bf       	out	0x3d, r28	; 61
    1b04:	df 91       	pop	r29
    1b06:	cf 91       	pop	r28
    1b08:	1f 91       	pop	r17
    1b0a:	0f 91       	pop	r16
    1b0c:	ff 90       	pop	r15
    1b0e:	df 90       	pop	r13
    1b10:	cf 90       	pop	r12
    1b12:	08 95       	ret

Disassembly of section .text.__vector_18:

000021aa <__vector_18>:

// Generic CAN interrupt handler
// Check interrrupt sources and clear them (by servicing or explicit clearing)
ISR(CAN_INT_vect, ISR_BLOCK)
{
    21aa:	1f 92       	push	r1
    21ac:	0f 92       	push	r0
    21ae:	0f b6       	in	r0, 0x3f	; 63
    21b0:	0f 92       	push	r0
    21b2:	11 24       	eor	r1, r1
    21b4:	0f 93       	push	r16
    21b6:	1f 93       	push	r17
    21b8:	2f 93       	push	r18
    21ba:	3f 93       	push	r19
    21bc:	4f 93       	push	r20
    21be:	5f 93       	push	r21
    21c0:	6f 93       	push	r22
    21c2:	7f 93       	push	r23
    21c4:	8f 93       	push	r24
    21c6:	9f 93       	push	r25
    21c8:	af 93       	push	r26
    21ca:	bf 93       	push	r27
    21cc:	cf 93       	push	r28
    21ce:	df 93       	push	r29
    21d0:	ef 93       	push	r30
    21d2:	ff 93       	push	r31
	// Save state we'll need to restore
	uint8_t saved_cangie = CANGIE;
    21d4:	eb ed       	ldi	r30, 0xDB	; 219
    21d6:	f0 e0       	ldi	r31, 0x00	; 0
    21d8:	d0 81       	ld	r29, Z
	uint8_t saved_canie2 = CANIE2;	// Temporarily disable CAN interrupts to prevent reentry
    21da:	10 91 de 00 	lds	r17, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7f00de>
	CANGIE &= (uint8_t)~(1 << ENIT);
    21de:	80 81       	ld	r24, Z
    21e0:	8f 77       	andi	r24, 0x7F	; 127
    21e2:	80 83       	st	Z, r24

	sei();
    21e4:	78 94       	sei
	
	 uint8_t sit = CANSIT2;
    21e6:	c0 91 e0 00 	lds	r28, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f00e0>
	 
	 // Most common interrupts first  *claude
	 if(sit & (1 << CANMOB_RX_IDX)) {
    21ea:	c0 ff       	sbrs	r28, 0
    21ec:	0c c0       	rjmp	.+24     	; 0x2206 <__vector_18+0x5c>
		 CANMOBInterrupt(CANMOB_RX_IDX);
    21ee:	80 e0       	ldi	r24, 0x00	; 0
    21f0:	0e 94 c1 0c 	call	0x1982	; 0x1982 <CANMOBInterrupt>
		 CANMOBSet(CANMOB_RX_IDX, &sg_sMOBGenericReceive, NULL, 0);
    21f4:	00 e0       	ldi	r16, 0x00	; 0
    21f6:	20 e0       	ldi	r18, 0x00	; 0
    21f8:	30 e0       	ldi	r19, 0x00	; 0
    21fa:	43 e1       	ldi	r20, 0x13	; 19
    21fc:	52 e0       	ldi	r21, 0x02	; 2
    21fe:	60 e0       	ldi	r22, 0x00	; 0
    2200:	80 e0       	ldi	r24, 0x00	; 0
    2202:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <CANMOBSet>
	 }
	 
	
	// Check TX MOB
	if( sit & (1 << CANMOB_TX_IDX) )
    2206:	c1 ff       	sbrs	r28, 1
    2208:	03 c0       	rjmp	.+6      	; 0x2210 <__vector_18+0x66>
	{
		CANMOBInterrupt( CANMOB_TX_IDX );
    220a:	81 e0       	ldi	r24, 0x01	; 1
    220c:	0e 94 c1 0c 	call	0x1982	; 0x1982 <CANMOBInterrupt>
	}
	
	// Now the generic, non-MOB interrupts (some of which may have already been handled by the MOB handler)
	
	// Bus Off interrupt
	if( CANGIT & (1 << BOFFIT) )
    2210:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    2214:	86 ff       	sbrs	r24, 6
    2216:	03 c0       	rjmp	.+6      	; 0x221e <__vector_18+0x74>
	{
		// Just clear it for now
		CANGIT = (1 << BOFFIT);
    2218:	80 e4       	ldi	r24, 0x40	; 64
    221a:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
	}
	
	// Frame buffer receive (burst receive interrupt)
	// This should not be used
	if( CANGIT & (1 << BXOK) )
    221e:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    2222:	84 ff       	sbrs	r24, 4
    2224:	0a c0       	rjmp	.+20     	; 0x223a <__vector_18+0x90>
	{
		MBASSERT(0);
    2226:	49 ee       	ldi	r20, 0xE9	; 233
    2228:	51 e0       	ldi	r21, 0x01	; 1
    222a:	60 ec       	ldi	r22, 0xC0	; 192
    222c:	71 e0       	ldi	r23, 0x01	; 1
    222e:	80 e0       	ldi	r24, 0x00	; 0
    2230:	0e 94 81 21 	call	0x4302	; 0x4302 <PlatformAssert>
		
		// TODO: Must write the CONMOB fields of the MOB that interrupted first?
		// Just clear it for now
		CANGIT = (1 << BXOK);
    2234:	80 e1       	ldi	r24, 0x10	; 16
    2236:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
	}
	
	// Bit stuffing error on receive
	if( CANGIT & (1 << SERG) )
    223a:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    223e:	83 ff       	sbrs	r24, 3
    2240:	03 c0       	rjmp	.+6      	; 0x2248 <__vector_18+0x9e>
	{
		// Just clear it for now.  Ignored.
		CANGIT = (1 << SERG);
    2242:	88 e0       	ldi	r24, 0x08	; 8
    2244:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
	}
	
	// CRC error on receive
	if( CANGIT & (1 << CERG) )
    2248:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    224c:	82 ff       	sbrs	r24, 2
    224e:	03 c0       	rjmp	.+6      	; 0x2256 <__vector_18+0xac>
	{
		// Just clear it for now.  Ignored.
		CANGIT = (1 << CERG);
    2250:	84 e0       	ldi	r24, 0x04	; 4
    2252:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
	}
	
	// Form error
	if( CANGIT & (1 << FERG) )
    2256:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    225a:	81 ff       	sbrs	r24, 1
    225c:	03 c0       	rjmp	.+6      	; 0x2264 <__vector_18+0xba>
	{
		// If detected form error on transmit, could be duplicate to MOB error interrupt (see 16.8.2 - Interrupt Behavior)
		// Ignore this one
		
		// Just clear it for now.  Ignored.
		CANGIT = (1 << FERG);
    225e:	82 e0       	ldi	r24, 0x02	; 2
    2260:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
	}
	
	// ACK missing on transmit (nobody's listening! (or failure on transmit???))
	if( CANGIT & (1 << AERG) )
    2264:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    2268:	80 ff       	sbrs	r24, 0
    226a:	13 c0       	rjmp	.+38     	; 0x2292 <__vector_18+0xe8>
	{
		// Clear the interrupt
		CANGIT = (1 << AERG);
    226c:	81 e0       	ldi	r24, 0x01	; 1
    226e:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
		
		if( sg_u8TransmitAttempts < 20 )
    2272:	80 91 5e 07 	lds	r24, 0x075E	; 0x80075e <sg_u8TransmitAttempts>
    2276:	84 31       	cpi	r24, 0x14	; 20
    2278:	50 f4       	brcc	.+20     	; 0x228e <__vector_18+0xe4>
		{
			// Retransmit now
			CANSendMessageInternal( sg_eLastTXType, sg_u8LastTXData, sg_u8LastTXDataLen, true );
    227a:	21 e0       	ldi	r18, 0x01	; 1
    227c:	40 91 5c 07 	lds	r20, 0x075C	; 0x80075c <sg_u8LastTXDataLen>
    2280:	65 e3       	ldi	r22, 0x35	; 53
    2282:	77 e0       	ldi	r23, 0x07	; 7
    2284:	80 91 5d 07 	lds	r24, 0x075D	; 0x80075d <sg_eLastTXType>
    2288:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <CANSendMessageInternal>
    228c:	02 c0       	rjmp	.+4      	; 0x2292 <__vector_18+0xe8>
		}
		else
		{
			// Retries exhausted.  Give up
			sg_bBusy = false;
    228e:	10 92 5f 07 	sts	0x075F, r1	; 0x80075f <sg_bBusy>
		}
	}

	// Reenable CAN general interrupt	
//	CANGIE |= (1 << ENIT);
    CANIE2 = saved_canie2;
    2292:	10 93 de 00 	sts	0x00DE, r17	; 0x8000de <__TEXT_REGION_LENGTH__+0x7f00de>
    CANGIE = saved_cangie;
    2296:	d0 93 db 00 	sts	0x00DB, r29	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f00db>
}
    229a:	ff 91       	pop	r31
    229c:	ef 91       	pop	r30
    229e:	df 91       	pop	r29
    22a0:	cf 91       	pop	r28
    22a2:	bf 91       	pop	r27
    22a4:	af 91       	pop	r26
    22a6:	9f 91       	pop	r25
    22a8:	8f 91       	pop	r24
    22aa:	7f 91       	pop	r23
    22ac:	6f 91       	pop	r22
    22ae:	5f 91       	pop	r21
    22b0:	4f 91       	pop	r20
    22b2:	3f 91       	pop	r19
    22b4:	2f 91       	pop	r18
    22b6:	1f 91       	pop	r17
    22b8:	0f 91       	pop	r16
    22ba:	0f 90       	pop	r0
    22bc:	0f be       	out	0x3f, r0	; 63
    22be:	0f 90       	pop	r0
    22c0:	1f 90       	pop	r1
    22c2:	18 95       	reti

Disassembly of section .text.CANSendMessage:

00004890 <CANSendMessage>:
					 uint8_t* pu8Data,
					 uint8_t u8DataLen )
{
	// If we're busy, kick it back so we're cooperatively multitasking
	// rather than spin locking
	if (sg_bBusy)
    4890:	90 91 5f 07 	lds	r25, 0x075F	; 0x80075f <sg_bBusy>
    4894:	91 11       	cpse	r25, r1
    4896:	05 c0       	rjmp	.+10     	; 0x48a2 <CANSendMessage+0x12>
	{
		return(false);
	}

	CANSendMessageInternal( eType, pu8Data, u8DataLen, false );
    4898:	20 e0       	ldi	r18, 0x00	; 0
    489a:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <CANSendMessageInternal>
	return( true );
    489e:	81 e0       	ldi	r24, 0x01	; 1
    48a0:	08 95       	ret
{
	// If we're busy, kick it back so we're cooperatively multitasking
	// rather than spin locking
	if (sg_bBusy)
	{
		return(false);
    48a2:	80 e0       	ldi	r24, 0x00	; 0
	}

	CANSendMessageInternal( eType, pu8Data, u8DataLen, false );
	return( true );
}
    48a4:	08 95       	ret

Disassembly of section .text.CANSetRXCallback:

00004a0c <CANSetRXCallback>:

void CANSetRXCallback( void (*pfCallback)(ECANMessageType eType, uint8_t* pu8Data, uint8_t u8DataLen) )
{
	sg_pfRXCallback = pfCallback;
    4a0c:	90 93 46 07 	sts	0x0746, r25	; 0x800746 <sg_pfRXCallback+0x1>
    4a10:	80 93 45 07 	sts	0x0745, r24	; 0x800745 <sg_pfRXCallback>
    4a14:	08 95       	ret

Disassembly of section .text.CANInit:

00003138 <CANInit>:
}

void CANInit( void )
{
    3138:	0f 93       	push	r16
    313a:	cf 93       	push	r28
	// Init clock
	// See datasheet table 16-2.
	// For 8Mhz, set CAN rate to 500 Kbps
	CANBT1 = 0x02;
    313c:	c2 e0       	ldi	r28, 0x02	; 2
    313e:	c0 93 e2 00 	sts	0x00E2, r28	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f00e2>
	CANBT2 = 0x04;
    3142:	84 e0       	ldi	r24, 0x04	; 4
    3144:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f00e3>
	CANBT3 = 0x12;
    3148:	82 e1       	ldi	r24, 0x12	; 18
    314a:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7f00e4>
	
	// Init message objects (MOBs) since there are no defaults at reset
	CANMOBSet( 0, &sg_sMOBDisabled, NULL, 0 );
    314e:	00 e0       	ldi	r16, 0x00	; 0
    3150:	20 e0       	ldi	r18, 0x00	; 0
    3152:	30 e0       	ldi	r19, 0x00	; 0
    3154:	4b e1       	ldi	r20, 0x1B	; 27
    3156:	52 e0       	ldi	r21, 0x02	; 2
    3158:	60 e0       	ldi	r22, 0x00	; 0
    315a:	80 e0       	ldi	r24, 0x00	; 0
    315c:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <CANMOBSet>
	CANMOBSet( 1, &sg_sMOBDisabled, NULL, 0 );
    3160:	20 e0       	ldi	r18, 0x00	; 0
    3162:	30 e0       	ldi	r19, 0x00	; 0
    3164:	4b e1       	ldi	r20, 0x1B	; 27
    3166:	52 e0       	ldi	r21, 0x02	; 2
    3168:	60 e0       	ldi	r22, 0x00	; 0
    316a:	81 e0       	ldi	r24, 0x01	; 1
    316c:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <CANMOBSet>
	CANMOBSet( 2, &sg_sMOBDisabled, NULL, 0 );
    3170:	20 e0       	ldi	r18, 0x00	; 0
    3172:	30 e0       	ldi	r19, 0x00	; 0
    3174:	4b e1       	ldi	r20, 0x1B	; 27
    3176:	52 e0       	ldi	r21, 0x02	; 2
    3178:	60 e0       	ldi	r22, 0x00	; 0
    317a:	82 e0       	ldi	r24, 0x02	; 2
    317c:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <CANMOBSet>
	CANMOBSet( 3, &sg_sMOBDisabled, NULL, 0 );
    3180:	20 e0       	ldi	r18, 0x00	; 0
    3182:	30 e0       	ldi	r19, 0x00	; 0
    3184:	4b e1       	ldi	r20, 0x1B	; 27
    3186:	52 e0       	ldi	r21, 0x02	; 2
    3188:	60 e0       	ldi	r22, 0x00	; 0
    318a:	83 e0       	ldi	r24, 0x03	; 3
    318c:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <CANMOBSet>
	CANMOBSet( 4, &sg_sMOBDisabled, NULL, 0 );
    3190:	20 e0       	ldi	r18, 0x00	; 0
    3192:	30 e0       	ldi	r19, 0x00	; 0
    3194:	4b e1       	ldi	r20, 0x1B	; 27
    3196:	52 e0       	ldi	r21, 0x02	; 2
    3198:	60 e0       	ldi	r22, 0x00	; 0
    319a:	84 e0       	ldi	r24, 0x04	; 4
    319c:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <CANMOBSet>
	CANMOBSet( 5, &sg_sMOBDisabled, NULL, 0 );
    31a0:	20 e0       	ldi	r18, 0x00	; 0
    31a2:	30 e0       	ldi	r19, 0x00	; 0
    31a4:	4b e1       	ldi	r20, 0x1B	; 27
    31a6:	52 e0       	ldi	r21, 0x02	; 2
    31a8:	60 e0       	ldi	r22, 0x00	; 0
    31aa:	85 e0       	ldi	r24, 0x05	; 5
    31ac:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <CANMOBSet>
	
	// Setup generic RX
	CANMOBSet( CANMOB_RX_IDX, &sg_sMOBGenericReceive, NULL, 0 );
    31b0:	20 e0       	ldi	r18, 0x00	; 0
    31b2:	30 e0       	ldi	r19, 0x00	; 0
    31b4:	43 e1       	ldi	r20, 0x13	; 19
    31b6:	52 e0       	ldi	r21, 0x02	; 2
    31b8:	60 e0       	ldi	r22, 0x00	; 0
    31ba:	80 e0       	ldi	r24, 0x00	; 0
    31bc:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <CANMOBSet>
	
	// Enable general CAN interrupts
	CANGIE = (1 << ENIT) | (1 << ENRX) | (1 << ENTX) | (1 << ENERR) | (1 << ENBX) | (1 << ENERG);
    31c0:	8e eb       	ldi	r24, 0xBE	; 190
    31c2:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f00db>

//	CANGIE &= ~(1 << ENOVRT);  // Disable CAN timer overflow interrupt

	// Enable the bus
	CANGCON = (1 << ENASTB);
    31c6:	c0 93 d8 00 	sts	0x00D8, r28	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f00d8>
	sg_bBusy = false;
    31ca:	10 92 5f 07 	sts	0x075F, r1	; 0x80075f <sg_bBusy>
}
    31ce:	cf 91       	pop	r28
    31d0:	0f 91       	pop	r16
    31d2:	08 95       	ret

Disassembly of section .text.DebugOut:

000049b0 <DebugOut>:
}

#endif

void DebugOut( const char* peFormat, ... )
{
    49b0:	cf 93       	push	r28
    49b2:	df 93       	push	r29
    49b4:	cd b7       	in	r28, 0x3d	; 61
    49b6:	de b7       	in	r29, 0x3e	; 62
	
	va_end( args );	 */
	
	//DebugSerialSend( (uint8_t*)u8Buffer, strlen(u8Buffer) );
#endif
}
    49b8:	df 91       	pop	r29
    49ba:	cf 91       	pop	r28
    49bc:	08 95       	ret

Disassembly of section .text.EEPROMRead:

00004926 <EEPROMRead>:
}

uint8_t EEPROMRead(uint16_t u16Address)
{
	// Wait for any completion of writes, etc..
	while (EECR & (1 << EEWE));
    4926:	f9 99       	sbic	0x1f, 1	; 31
    4928:	fe cf       	rjmp	.-4      	; 0x4926 <EEPROMRead>

	// Set address	
	EEAR = u16Address;
    492a:	92 bd       	out	0x22, r25	; 34
    492c:	81 bd       	out	0x21, r24	; 33
	
	// Start EEPROM read
	EECR |= (1 << EERE);
    492e:	8f b3       	in	r24, 0x1f	; 31
    4930:	81 60       	ori	r24, 0x01	; 1
    4932:	8f bb       	out	0x1f, r24	; 31
	
	// Return the data
	return(EEDR);
    4934:	80 b5       	in	r24, 0x20	; 32
    4936:	08 95       	ret

Disassembly of section .text.I2CBitDelay:

000049be <I2CBitDelay>:
#define SDA_SET_INPUT()			(I2C_PORT_DDR &= ((uint8_t) ~(1 << I2C_SDA_PIN))); SDA_HIGH()

// Delays for one I2C bit's worth of time
static void I2CBitDelay(void)
{
	Delay(10);
    49be:	6a e0       	ldi	r22, 0x0A	; 10
    49c0:	70 e0       	ldi	r23, 0x00	; 0
    49c2:	80 e0       	ldi	r24, 0x00	; 0
    49c4:	90 e0       	ldi	r25, 0x00	; 0
    49c6:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <Delay>
    49ca:	08 95       	ret

Disassembly of section .text.I2CStart:

000042aa <I2CStart>:

// Send an I2C start sequence and quantize foreground code to the overflow
// timer
void I2CStart(void)
{
	SDA_SET_OUTPUT();
    42aa:	8a b1       	in	r24, 0x0a	; 10
    42ac:	82 60       	ori	r24, 0x02	; 2
    42ae:	8a b9       	out	0x0a, r24	; 10
	SDA_HIGH();
    42b0:	8b b1       	in	r24, 0x0b	; 11
    42b2:	82 60       	ori	r24, 0x02	; 2
    42b4:	8b b9       	out	0x0b, r24	; 11
	SCL_HIGH();
    42b6:	8b b1       	in	r24, 0x0b	; 11
    42b8:	81 60       	ori	r24, 0x01	; 1
    42ba:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    42bc:	0e 94 df 24 	call	0x49be	; 0x49be <I2CBitDelay>
	SDA_LOW();
    42c0:	8b b1       	in	r24, 0x0b	; 11
    42c2:	8d 7f       	andi	r24, 0xFD	; 253
    42c4:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    42c6:	0e 94 df 24 	call	0x49be	; 0x49be <I2CBitDelay>
	SCL_LOW();
    42ca:	8b b1       	in	r24, 0x0b	; 11
    42cc:	8e 7f       	andi	r24, 0xFE	; 254
    42ce:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    42d0:	0e 94 df 24 	call	0x49be	; 0x49be <I2CBitDelay>
    42d4:	08 95       	ret

Disassembly of section .text.I2CStop:

00004478 <I2CStop>:
}

// Send an I2C stop sequence
void I2CStop(void)
{
	SDA_LOW();
    4478:	8b b1       	in	r24, 0x0b	; 11
    447a:	8d 7f       	andi	r24, 0xFD	; 253
    447c:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    447e:	0e 94 df 24 	call	0x49be	; 0x49be <I2CBitDelay>
	SCL_HIGH();
    4482:	8b b1       	in	r24, 0x0b	; 11
    4484:	81 60       	ori	r24, 0x01	; 1
    4486:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    4488:	0e 94 df 24 	call	0x49be	; 0x49be <I2CBitDelay>
	SDA_SET_INPUT();
    448c:	8a b1       	in	r24, 0x0a	; 10
    448e:	8d 7f       	andi	r24, 0xFD	; 253
    4490:	8a b9       	out	0x0a, r24	; 10
    4492:	8b b1       	in	r24, 0x0b	; 11
    4494:	82 60       	ori	r24, 0x02	; 2
    4496:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    4498:	0e 94 df 24 	call	0x49be	; 0x49be <I2CBitDelay>
    449c:	08 95       	ret

Disassembly of section .text.I2CUnstick:

00003fc2 <I2CUnstick>:
}

// Unsticks an I2C bus
void I2CUnstick(void)
{
    3fc2:	cf 93       	push	r28
	uint8_t u8UnstickBits = 64;

	SCL_SET_OUTPUT();
    3fc4:	8a b1       	in	r24, 0x0a	; 10
    3fc6:	81 60       	ori	r24, 0x01	; 1
    3fc8:	8a b9       	out	0x0a, r24	; 10
	SDA_SET_OUTPUT();
    3fca:	8a b1       	in	r24, 0x0a	; 10
    3fcc:	82 60       	ori	r24, 0x02	; 2
    3fce:	8a b9       	out	0x0a, r24	; 10
}

// Unsticks an I2C bus
void I2CUnstick(void)
{
	uint8_t u8UnstickBits = 64;
    3fd0:	c0 e4       	ldi	r28, 0x40	; 64

	SCL_SET_OUTPUT();
	SDA_SET_OUTPUT();
	
	while (u8UnstickBits)
    3fd2:	11 c0       	rjmp	.+34     	; 0x3ff6 <I2CUnstick+0x34>
	{
		SCL_LOW();
    3fd4:	8b b1       	in	r24, 0x0b	; 11
    3fd6:	8e 7f       	andi	r24, 0xFE	; 254
    3fd8:	8b b9       	out	0x0b, r24	; 11
		SDA_LOW();
    3fda:	8b b1       	in	r24, 0x0b	; 11
    3fdc:	8d 7f       	andi	r24, 0xFD	; 253
    3fde:	8b b9       	out	0x0b, r24	; 11
		I2CBitDelay();
    3fe0:	0e 94 df 24 	call	0x49be	; 0x49be <I2CBitDelay>
		SCL_HIGH();
    3fe4:	8b b1       	in	r24, 0x0b	; 11
    3fe6:	81 60       	ori	r24, 0x01	; 1
    3fe8:	8b b9       	out	0x0b, r24	; 11
		SDA_HIGH();
    3fea:	8b b1       	in	r24, 0x0b	; 11
    3fec:	82 60       	ori	r24, 0x02	; 2
    3fee:	8b b9       	out	0x0b, r24	; 11
		I2CBitDelay();
    3ff0:	0e 94 df 24 	call	0x49be	; 0x49be <I2CBitDelay>
		u8UnstickBits--;
    3ff4:	c1 50       	subi	r28, 0x01	; 1
	uint8_t u8UnstickBits = 64;

	SCL_SET_OUTPUT();
	SDA_SET_OUTPUT();
	
	while (u8UnstickBits)
    3ff6:	c1 11       	cpse	r28, r1
    3ff8:	ed cf       	rjmp	.-38     	; 0x3fd4 <I2CUnstick+0x12>
		SCL_HIGH();
		SDA_HIGH();
		I2CBitDelay();
		u8UnstickBits--;
	}
}
    3ffa:	cf 91       	pop	r28
    3ffc:	08 95       	ret

Disassembly of section .text.I2CTxByte:

00003960 <I2CTxByte>:

// Sends a single I2C byte. Returns false if the byte is not acked, or true if it is.
bool I2CTxByte(uint8_t u8Byte)
{
    3960:	cf 93       	push	r28
    3962:	df 93       	push	r29
    3964:	d8 2f       	mov	r29, r24
	uint8_t u8Length = 8;			// 8 Bits to send
	bool bAck = false;

	SDA_SET_OUTPUT();
    3966:	8a b1       	in	r24, 0x0a	; 10
    3968:	82 60       	ori	r24, 0x02	; 2
    396a:	8a b9       	out	0x0a, r24	; 10
}

// Sends a single I2C byte. Returns false if the byte is not acked, or true if it is.
bool I2CTxByte(uint8_t u8Byte)
{
	uint8_t u8Length = 8;			// 8 Bits to send
    396c:	c8 e0       	ldi	r28, 0x08	; 8
	bool bAck = false;

	SDA_SET_OUTPUT();

	while (u8Length)
    396e:	15 c0       	rjmp	.+42     	; 0x399a <I2CTxByte+0x3a>
	{
		if (u8Byte & 0x80)
    3970:	dd 23       	and	r29, r29
    3972:	24 f4       	brge	.+8      	; 0x397c <I2CTxByte+0x1c>
		{
			SDA_HIGH();
    3974:	8b b1       	in	r24, 0x0b	; 11
    3976:	82 60       	ori	r24, 0x02	; 2
    3978:	8b b9       	out	0x0b, r24	; 11
    397a:	03 c0       	rjmp	.+6      	; 0x3982 <I2CTxByte+0x22>
		}
		else
		{
			SDA_LOW();
    397c:	8b b1       	in	r24, 0x0b	; 11
    397e:	8d 7f       	andi	r24, 0xFD	; 253
    3980:	8b b9       	out	0x0b, r24	; 11
		}
		
		// Drive SCL high
		SCL_HIGH();
    3982:	8b b1       	in	r24, 0x0b	; 11
    3984:	81 60       	ori	r24, 0x01	; 1
    3986:	8b b9       	out	0x0b, r24	; 11
		
		I2CBitDelay();
    3988:	0e 94 df 24 	call	0x49be	; 0x49be <I2CBitDelay>
		
		// Ensure SCL is low
		SCL_LOW();
    398c:	8b b1       	in	r24, 0x0b	; 11
    398e:	8e 7f       	andi	r24, 0xFE	; 254
    3990:	8b b9       	out	0x0b, r24	; 11
	
		// SDA Is now set. Delay.
		I2CBitDelay();
    3992:	0e 94 df 24 	call	0x49be	; 0x49be <I2CBitDelay>
		
		// Next bit
		u8Byte <<= 1;	
    3996:	dd 0f       	add	r29, r29
		u8Length--;
    3998:	c1 50       	subi	r28, 0x01	; 1
	uint8_t u8Length = 8;			// 8 Bits to send
	bool bAck = false;

	SDA_SET_OUTPUT();

	while (u8Length)
    399a:	c1 11       	cpse	r28, r1
    399c:	e9 cf       	rjmp	.-46     	; 0x3970 <I2CTxByte+0x10>
		// Next bit
		u8Byte <<= 1;	
		u8Length--;
	}
	
	SDA_SET_INPUT();
    399e:	8a b1       	in	r24, 0x0a	; 10
    39a0:	8d 7f       	andi	r24, 0xFD	; 253
    39a2:	8a b9       	out	0x0a, r24	; 10
    39a4:	8b b1       	in	r24, 0x0b	; 11
    39a6:	82 60       	ori	r24, 0x02	; 2
    39a8:	8b b9       	out	0x0b, r24	; 11
	SCL_HIGH();
    39aa:	8b b1       	in	r24, 0x0b	; 11
    39ac:	81 60       	ori	r24, 0x01	; 1
    39ae:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    39b0:	0e 94 df 24 	call	0x49be	; 0x49be <I2CBitDelay>
	
	// See if the byte was acknowledged
	if (SDA_READ())
    39b4:	49 9b       	sbis	0x09, 1	; 9
	{
		bAck = false;
	}
	else
	{
		bAck = true;
    39b6:	c1 e0       	ldi	r28, 0x01	; 1
	}
	
	SCL_LOW();
    39b8:	8b b1       	in	r24, 0x0b	; 11
    39ba:	8e 7f       	andi	r24, 0xFE	; 254
    39bc:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    39be:	0e 94 df 24 	call	0x49be	; 0x49be <I2CBitDelay>
	return(bAck);
}
    39c2:	8c 2f       	mov	r24, r28
    39c4:	df 91       	pop	r29
    39c6:	cf 91       	pop	r28
    39c8:	08 95       	ret

Disassembly of section .text.I2CRxByte:

00003786 <I2CRxByte>:

// Receives a single I2C byte and will optionally generate an ack at the end
uint8_t I2CRxByte(bool bAck)
{
    3786:	1f 93       	push	r17
    3788:	cf 93       	push	r28
    378a:	df 93       	push	r29
    378c:	18 2f       	mov	r17, r24
	uint8_t u8Data = 0;
	uint8_t u8Count = 8;
	
	SDA_SET_INPUT();
    378e:	8a b1       	in	r24, 0x0a	; 10
    3790:	8d 7f       	andi	r24, 0xFD	; 253
    3792:	8a b9       	out	0x0a, r24	; 10
    3794:	8b b1       	in	r24, 0x0b	; 11
    3796:	82 60       	ori	r24, 0x02	; 2
    3798:	8b b9       	out	0x0b, r24	; 11

// Receives a single I2C byte and will optionally generate an ack at the end
uint8_t I2CRxByte(bool bAck)
{
	uint8_t u8Data = 0;
	uint8_t u8Count = 8;
    379a:	c8 e0       	ldi	r28, 0x08	; 8
}

// Receives a single I2C byte and will optionally generate an ack at the end
uint8_t I2CRxByte(bool bAck)
{
	uint8_t u8Data = 0;
    379c:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t u8Count = 8;
	
	SDA_SET_INPUT();
	
	// Consume all 8 data bits
	while (u8Count)
    379e:	0e c0       	rjmp	.+28     	; 0x37bc <I2CRxByte+0x36>
	{
		u8Data <<= 1;
    37a0:	dd 0f       	add	r29, r29

		SCL_HIGH();
    37a2:	8b b1       	in	r24, 0x0b	; 11
    37a4:	81 60       	ori	r24, 0x01	; 1
    37a6:	8b b9       	out	0x0b, r24	; 11
		I2CBitDelay();
    37a8:	0e 94 df 24 	call	0x49be	; 0x49be <I2CBitDelay>
			
		if (SDA_READ())
    37ac:	49 99       	sbic	0x09, 1	; 9
		{
			u8Data |= 1;
    37ae:	d1 60       	ori	r29, 0x01	; 1
		}
		
		SCL_LOW();
    37b0:	8b b1       	in	r24, 0x0b	; 11
    37b2:	8e 7f       	andi	r24, 0xFE	; 254
    37b4:	8b b9       	out	0x0b, r24	; 11
		I2CBitDelay();
    37b6:	0e 94 df 24 	call	0x49be	; 0x49be <I2CBitDelay>
		u8Count--;
    37ba:	c1 50       	subi	r28, 0x01	; 1
	uint8_t u8Count = 8;
	
	SDA_SET_INPUT();
	
	// Consume all 8 data bits
	while (u8Count)
    37bc:	c1 11       	cpse	r28, r1
    37be:	f0 cf       	rjmp	.-32     	; 0x37a0 <I2CRxByte+0x1a>
		I2CBitDelay();
		u8Count--;
	}

	// See if we acknowledge this
	SDA_SET_OUTPUT();
    37c0:	8a b1       	in	r24, 0x0a	; 10
    37c2:	82 60       	ori	r24, 0x02	; 2
    37c4:	8a b9       	out	0x0a, r24	; 10
	if (bAck)
    37c6:	11 23       	and	r17, r17
    37c8:	21 f0       	breq	.+8      	; 0x37d2 <I2CRxByte+0x4c>
	{
		SDA_LOW();
    37ca:	8b b1       	in	r24, 0x0b	; 11
    37cc:	8d 7f       	andi	r24, 0xFD	; 253
    37ce:	8b b9       	out	0x0b, r24	; 11
    37d0:	03 c0       	rjmp	.+6      	; 0x37d8 <I2CRxByte+0x52>
	}
	else
	{
		SDA_HIGH();
    37d2:	8b b1       	in	r24, 0x0b	; 11
    37d4:	82 60       	ori	r24, 0x02	; 2
    37d6:	8b b9       	out	0x0b, r24	; 11
	}
	
	I2CBitDelay();
    37d8:	0e 94 df 24 	call	0x49be	; 0x49be <I2CBitDelay>
	SCL_HIGH();
    37dc:	8b b1       	in	r24, 0x0b	; 11
    37de:	81 60       	ori	r24, 0x01	; 1
    37e0:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    37e2:	0e 94 df 24 	call	0x49be	; 0x49be <I2CBitDelay>
	SCL_LOW();
    37e6:	8b b1       	in	r24, 0x0b	; 11
    37e8:	8e 7f       	andi	r24, 0xFE	; 254
    37ea:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    37ec:	0e 94 df 24 	call	0x49be	; 0x49be <I2CBitDelay>
	SDA_LOW();
    37f0:	8b b1       	in	r24, 0x0b	; 11
    37f2:	8d 7f       	andi	r24, 0xFD	; 253
    37f4:	8b b9       	out	0x0b, r24	; 11

	return(u8Data);	
}
    37f6:	8d 2f       	mov	r24, r29
    37f8:	df 91       	pop	r29
    37fa:	cf 91       	pop	r28
    37fc:	1f 91       	pop	r17
    37fe:	08 95       	ret

Disassembly of section .text.I2CSetup:

000042d6 <I2CSetup>:
// Prepares the SCL/SDA pins for I2C operation and returns when the CPU is
// quantized to the timer (for consistent bit alignment)
void I2CSetup(void)
{
	// Deassert SCL and SDA
	SCL_HIGH();
    42d6:	8b b1       	in	r24, 0x0b	; 11
    42d8:	81 60       	ori	r24, 0x01	; 1
    42da:	8b b9       	out	0x0b, r24	; 11
	SDA_HIGH();
    42dc:	8b b1       	in	r24, 0x0b	; 11
    42de:	82 60       	ori	r24, 0x02	; 2
    42e0:	8b b9       	out	0x0b, r24	; 11

	// Set SCL and SDA lines as push/pull output drives
	SCL_SET_OUTPUT();
    42e2:	8a b1       	in	r24, 0x0a	; 10
    42e4:	81 60       	ori	r24, 0x01	; 1
    42e6:	8a b9       	out	0x0a, r24	; 10
	
	// Turn on SDA, set as an input
	SDA_SET_INPUT();
    42e8:	8a b1       	in	r24, 0x0a	; 10
    42ea:	8d 7f       	andi	r24, 0xFD	; 253
    42ec:	8a b9       	out	0x0a, r24	; 10
    42ee:	8b b1       	in	r24, 0x0b	; 11
    42f0:	82 60       	ori	r24, 0x02	; 2
    42f2:	8b b9       	out	0x0b, r24	; 11
	
	Delay(20);
    42f4:	64 e1       	ldi	r22, 0x14	; 20
    42f6:	70 e0       	ldi	r23, 0x00	; 0
    42f8:	80 e0       	ldi	r24, 0x00	; 0
    42fa:	90 e0       	ldi	r25, 0x00	; 0
    42fc:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <Delay>
    4300:	08 95       	ret

Disassembly of section .text.I2CStartTransaction:

000043b0 <I2CStartTransaction>:

// Sets up the I2C pins, sends slave address/read/write byte, and waits for acknowledgment.
// Returns false if no device is responding.
bool I2CStartTransaction(uint8_t u8SlaveAddress,
						 bool bRead)
{
    43b0:	cf 93       	push	r28
    43b2:	df 93       	push	r29
    43b4:	c8 2f       	mov	r28, r24
    43b6:	d6 2f       	mov	r29, r22
	// Set up the pins for I2C operation
	I2CSetup();
    43b8:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <I2CSetup>
	
	// I2C Start condition
	I2CStart();
    43bc:	0e 94 55 21 	call	0x42aa	; 0x42aa <I2CStart>

	// If it's a read operation, clear the lower bit
	if (bRead)
    43c0:	dd 23       	and	r29, r29
    43c2:	19 f0       	breq	.+6      	; 0x43ca <I2CStartTransaction+0x1a>
	{
		u8SlaveAddress |= 1;
    43c4:	8c 2f       	mov	r24, r28
    43c6:	81 60       	ori	r24, 0x01	; 1
    43c8:	02 c0       	rjmp	.+4      	; 0x43ce <I2CStartTransaction+0x1e>
	}
	else
	{
		// Otherwise set it
		u8SlaveAddress &= (uint8_t) (~1);
    43ca:	8c 2f       	mov	r24, r28
    43cc:	8e 7f       	andi	r24, 0xFE	; 254
	}
	
	// Now send out the slave address + the read/write bit
	return(I2CTxByte(u8SlaveAddress));
    43ce:	0e 94 b0 1c 	call	0x3960	; 0x3960 <I2CTxByte>
}
    43d2:	df 91       	pop	r29
    43d4:	cf 91       	pop	r28
    43d6:	08 95       	ret

Disassembly of section .text.CellCountExpectedSet:

00002b9c <CellCountExpectedSet>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    2b9c:	cf 92       	push	r12
    2b9e:	df 92       	push	r13
    2ba0:	ef 92       	push	r14
    2ba2:	ff 92       	push	r15
    2ba4:	8f 35       	cpi	r24, 0x5F	; 95
    2ba6:	08 f0       	brcs	.+2      	; 0x2baa <CellCountExpectedSet+0xe>
    2ba8:	8e e5       	ldi	r24, 0x5E	; 94
    2baa:	ec e0       	ldi	r30, 0x0C	; 12
    2bac:	f1 e0       	ldi	r31, 0x01	; 1
    2bae:	81 8b       	std	Z+17, r24	; 0x11
    2bb0:	c8 2e       	mov	r12, r24
    2bb2:	d1 2c       	mov	r13, r1
    2bb4:	e1 2c       	mov	r14, r1
    2bb6:	f1 2c       	mov	r15, r1
    2bb8:	aa ec       	ldi	r26, 0xCA	; 202
    2bba:	b8 e0       	ldi	r27, 0x08	; 8
    2bbc:	a7 01       	movw	r20, r14
    2bbe:	96 01       	movw	r18, r12
    2bc0:	0e 94 69 24 	call	0x48d2	; 0x48d2 <__muluhisi3>
    2bc4:	61 8f       	std	Z+25, r22	; 0x19
    2bc6:	72 8f       	std	Z+26, r23	; 0x1a
    2bc8:	83 8f       	std	Z+27, r24	; 0x1b
    2bca:	94 8f       	std	Z+28, r25	; 0x1c
    2bcc:	a4 e9       	ldi	r26, 0x94	; 148
    2bce:	b1 e1       	ldi	r27, 0x11	; 17
    2bd0:	0e 94 69 24 	call	0x48d2	; 0x48d2 <__muluhisi3>
    2bd4:	65 8f       	std	Z+29, r22	; 0x1d
    2bd6:	76 8f       	std	Z+30, r23	; 0x1e
    2bd8:	87 8f       	std	Z+31, r24	; 0x1f
    2bda:	90 a3       	std	Z+32, r25	; 0x20
    2bdc:	85 8d       	ldd	r24, Z+29	; 0x1d
    2bde:	96 8d       	ldd	r25, Z+30	; 0x1e
    2be0:	a7 8d       	ldd	r26, Z+31	; 0x1f
    2be2:	b0 a1       	ldd	r27, Z+32	; 0x20
    2be4:	41 8d       	ldd	r20, Z+25	; 0x19
    2be6:	52 8d       	ldd	r21, Z+26	; 0x1a
    2be8:	63 8d       	ldd	r22, Z+27	; 0x1b
    2bea:	74 8d       	ldd	r23, Z+28	; 0x1c
    2bec:	84 1b       	sub	r24, r20
    2bee:	95 0b       	sbc	r25, r21
    2bf0:	a6 0b       	sbc	r26, r22
    2bf2:	b7 0b       	sbc	r27, r23
    2bf4:	88 0f       	add	r24, r24
    2bf6:	99 1f       	adc	r25, r25
    2bf8:	aa 1f       	adc	r26, r26
    2bfa:	bb 1f       	adc	r27, r27
    2bfc:	88 0f       	add	r24, r24
    2bfe:	99 1f       	adc	r25, r25
    2c00:	aa 1f       	adc	r26, r26
    2c02:	bb 1f       	adc	r27, r27
    2c04:	88 0f       	add	r24, r24
    2c06:	99 1f       	adc	r25, r25
    2c08:	aa 1f       	adc	r26, r26
    2c0a:	bb 1f       	adc	r27, r27
    2c0c:	88 0f       	add	r24, r24
    2c0e:	99 1f       	adc	r25, r25
    2c10:	aa 1f       	adc	r26, r26
    2c12:	bb 1f       	adc	r27, r27
    2c14:	88 0f       	add	r24, r24
    2c16:	99 1f       	adc	r25, r25
    2c18:	aa 1f       	adc	r26, r26
    2c1a:	bb 1f       	adc	r27, r27
    2c1c:	88 0f       	add	r24, r24
    2c1e:	99 1f       	adc	r25, r25
    2c20:	aa 1f       	adc	r26, r26
    2c22:	bb 1f       	adc	r27, r27
    2c24:	88 0f       	add	r24, r24
    2c26:	99 1f       	adc	r25, r25
    2c28:	aa 1f       	adc	r26, r26
    2c2a:	bb 1f       	adc	r27, r27
    2c2c:	ac 01       	movw	r20, r24
    2c2e:	bd 01       	movw	r22, r26
    2c30:	bb 23       	and	r27, r27
    2c32:	24 f4       	brge	.+8      	; 0x2c3c <CellCountExpectedSet+0xa0>
    2c34:	41 50       	subi	r20, 0x01	; 1
    2c36:	5c 4f       	sbci	r21, 0xFC	; 252
    2c38:	6f 4f       	sbci	r22, 0xFF	; 255
    2c3a:	7f 4f       	sbci	r23, 0xFF	; 255
    2c3c:	03 2e       	mov	r0, r19
    2c3e:	3a e0       	ldi	r19, 0x0A	; 10
    2c40:	75 95       	asr	r23
    2c42:	67 95       	ror	r22
    2c44:	57 95       	ror	r21
    2c46:	47 95       	ror	r20
    2c48:	3a 95       	dec	r19
    2c4a:	d1 f7       	brne	.-12     	; 0x2c40 <CellCountExpectedSet+0xa4>
    2c4c:	30 2d       	mov	r19, r0
    2c4e:	50 93 2e 01 	sts	0x012E, r21	; 0x80012e <sg_sFrame+0x22>
    2c52:	40 93 2d 01 	sts	0x012D, r20	; 0x80012d <sg_sFrame+0x21>
    2c56:	ff 90       	pop	r15
    2c58:	ef 90       	pop	r14
    2c5a:	df 90       	pop	r13
    2c5c:	cf 90       	pop	r12
    2c5e:	08 95       	ret

Disassembly of section .text.SendModuleControllerStatus:

000049f4 <SendModuleControllerStatus>:

static uint8_t sg_u8ControllerStatusMsgCount = 0;

static void SendModuleControllerStatus(void)
{
	sg_bSendModuleControllerStatus = true;
    49f4:	81 e0       	ldi	r24, 0x01	; 1
    49f6:	80 93 16 03 	sts	0x0316, r24	; 0x800316 <sg_bSendModuleControllerStatus>
	sg_u8ControllerStatusMsgCount = 0;
    49fa:	10 92 65 07 	sts	0x0765, r1	; 0x800765 <sg_u8ControllerStatusMsgCount>
    49fe:	08 95       	ret

Disassembly of section .text.ModuleControllerStateSet:

00004a16 <ModuleControllerStateSet>:
	MBASSERT(0);
}

static void ModuleControllerStateSet( EModuleControllerState eNext )
{
	if(eNext < EMODSTATE_COUNT)
    4a16:	84 30       	cpi	r24, 0x04	; 4
    4a18:	10 f4       	brcc	.+4      	; 0x4a1e <ModuleControllerStateSet+0x8>
	{
		sg_eModuleControllerStateTarget = eNext;
    4a1a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <sg_eModuleControllerStateTarget>
    4a1e:	08 95       	ret

Disassembly of section .text.ModuleControllerStateSetMax:

000048a6 <ModuleControllerStateSetMax>:



static void ModuleControllerStateSetMax( EModuleControllerState eNext )
{
	if(eNext < EMODSTATE_COUNT)
    48a6:	84 30       	cpi	r24, 0x04	; 4
    48a8:	40 f4       	brcc	.+16     	; 0x48ba <ModuleControllerStateSetMax+0x14>
	{
		sg_eModuleControllerStateMax = eNext;
    48aa:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <sg_eModuleControllerStateMax>
		if (sg_eModuleControllerStateCurrent > eNext) // we are in a higher state than allowed
    48ae:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <sg_eModuleControllerStateCurrent>
    48b2:	89 17       	cp	r24, r25
    48b4:	10 f4       	brcc	.+4      	; 0x48ba <ModuleControllerStateSetMax+0x14>
		{
			sg_eModuleControllerStateTarget = eNext;
    48b6:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <sg_eModuleControllerStateTarget>
    48ba:	08 95       	ret

Disassembly of section .text.Check5VLoss:

00004848 <Check5VLoss>:
}

// Checks for 5V loss
static void Check5VLoss(uint8_t u8NewState)
{
	if( u8NewState & (1 << PIN_5V_DET) )
    4848:	86 fd       	sbrc	r24, 6
    484a:	09 c0       	rjmp	.+18     	; 0x485e <Check5VLoss+0x16>
		// Not asserted
	}
	else
	{
		// 5V detect is low
		FET_EN_DEASSERT();
    484c:	88 b1       	in	r24, 0x08	; 8
    484e:	8f 7e       	andi	r24, 0xEF	; 239
    4850:	88 b9       	out	0x08, r24	; 8
		RELAY_EN_DEASSERT();
    4852:	8e b1       	in	r24, 0x0e	; 14
    4854:	8d 7f       	andi	r24, 0xFD	; 253
    4856:	8e b9       	out	0x0e, r24	; 14
		ModuleControllerStateSet( EMODSTATE_OFF );
    4858:	80 e0       	ldi	r24, 0x00	; 0
    485a:	0e 94 0b 25 	call	0x4a16	; 0x4a16 <ModuleControllerStateSet>
    485e:	08 95       	ret

Disassembly of section .text.CellDataConvertVoltage:

00003afc <CellDataConvertVoltage>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    3afc:	fb 01       	movw	r30, r22
    3afe:	93 70       	andi	r25, 0x03	; 3
    3b00:	9c 01       	movw	r18, r24
    3b02:	20 5f       	subi	r18, 0xF0	; 240
    3b04:	31 40       	sbci	r19, 0x01	; 1
    3b06:	21 31       	cpi	r18, 0x11	; 17
    3b08:	32 40       	sbci	r19, 0x02	; 2
    3b0a:	00 f5       	brcc	.+64     	; 0x3b4c <CellDataConvertVoltage+0x50>
    3b0c:	dc 01       	movw	r26, r24
    3b0e:	2b ed       	ldi	r18, 0xDB	; 219
    3b10:	36 ea       	ldi	r19, 0xA6	; 166
    3b12:	43 e2       	ldi	r20, 0x23	; 35
    3b14:	50 e0       	ldi	r21, 0x00	; 0
    3b16:	0e 94 69 24 	call	0x48d2	; 0x48d2 <__muluhisi3>
    3b1a:	dc 01       	movw	r26, r24
    3b1c:	cb 01       	movw	r24, r22
    3b1e:	07 2e       	mov	r0, r23
    3b20:	7a e0       	ldi	r23, 0x0A	; 10
    3b22:	b6 95       	lsr	r27
    3b24:	a7 95       	ror	r26
    3b26:	97 95       	ror	r25
    3b28:	87 95       	ror	r24
    3b2a:	7a 95       	dec	r23
    3b2c:	d1 f7       	brne	.-12     	; 0x3b22 <CellDataConvertVoltage+0x26>
    3b2e:	70 2d       	mov	r23, r0
    3b30:	9f 5f       	subi	r25, 0xFF	; 255
    3b32:	af 4f       	sbci	r26, 0xFF	; 255
    3b34:	bf 4f       	sbci	r27, 0xFF	; 255
    3b36:	07 2e       	mov	r0, r23
    3b38:	79 e0       	ldi	r23, 0x09	; 9
    3b3a:	b6 95       	lsr	r27
    3b3c:	a7 95       	ror	r26
    3b3e:	97 95       	ror	r25
    3b40:	87 95       	ror	r24
    3b42:	7a 95       	dec	r23
    3b44:	d1 f7       	brne	.-12     	; 0x3b3a <CellDataConvertVoltage+0x3e>
    3b46:	70 2d       	mov	r23, r0
    3b48:	21 e0       	ldi	r18, 0x01	; 1
    3b4a:	03 c0       	rjmp	.+6      	; 0x3b52 <CellDataConvertVoltage+0x56>
    3b4c:	20 e0       	ldi	r18, 0x00	; 0
    3b4e:	80 e0       	ldi	r24, 0x00	; 0
    3b50:	90 e0       	ldi	r25, 0x00	; 0
    3b52:	30 97       	sbiw	r30, 0x00	; 0
    3b54:	11 f0       	breq	.+4      	; 0x3b5a <CellDataConvertVoltage+0x5e>
    3b56:	91 83       	std	Z+1, r25	; 0x01
    3b58:	80 83       	st	Z, r24
    3b5a:	82 2f       	mov	r24, r18
    3b5c:	08 95       	ret

Disassembly of section .text.CellDataConvertTemperature:

00003800 <CellDataConvertTemperature>:
    3800:	8f 3f       	cpi	r24, 0xFF	; 255
    3802:	2f ef       	ldi	r18, 0xFF	; 255
    3804:	92 07       	cpc	r25, r18
    3806:	61 f1       	breq	.+88     	; 0x3860 <CellDataConvertTemperature+0x60>
    3808:	28 2f       	mov	r18, r24
    380a:	2f 70       	andi	r18, 0x0F	; 15
    380c:	94 ff       	sbrs	r25, 4
    380e:	02 c0       	rjmp	.+4      	; 0x3814 <CellDataConvertTemperature+0x14>
    3810:	90 6f       	ori	r25, 0xF0	; 240
    3812:	01 c0       	rjmp	.+2      	; 0x3816 <CellDataConvertTemperature+0x16>
    3814:	9f 77       	andi	r25, 0x7F	; 127
    3816:	95 95       	asr	r25
    3818:	87 95       	ror	r24
    381a:	95 95       	asr	r25
    381c:	87 95       	ror	r24
    381e:	95 95       	asr	r25
    3820:	87 95       	ror	r24
    3822:	95 95       	asr	r25
    3824:	87 95       	ror	r24
    3826:	ac 01       	movw	r20, r24
    3828:	4c 5e       	subi	r20, 0xEC	; 236
    382a:	5f 4f       	sbci	r21, 0xFF	; 255
    382c:	4d 38       	cpi	r20, 0x8D	; 141
    382e:	51 05       	cpc	r21, r1
    3830:	c8 f4       	brcc	.+50     	; 0x3864 <CellDataConvertTemperature+0x64>
    3832:	34 e6       	ldi	r19, 0x64	; 100
    3834:	38 9f       	mul	r19, r24
    3836:	d0 01       	movw	r26, r0
    3838:	39 9f       	mul	r19, r25
    383a:	b0 0d       	add	r27, r0
    383c:	11 24       	eor	r1, r1
    383e:	30 e0       	ldi	r19, 0x00	; 0
    3840:	40 e0       	ldi	r20, 0x00	; 0
    3842:	22 58       	subi	r18, 0x82	; 130
    3844:	3e 4f       	sbci	r19, 0xFE	; 254
    3846:	4f 4f       	sbci	r20, 0xFF	; 255
    3848:	f9 01       	movw	r30, r18
    384a:	84 91       	lpm	r24, Z
    384c:	47 fd       	sbrc	r20, 7
    384e:	80 81       	ld	r24, Z
    3850:	fd 01       	movw	r30, r26
    3852:	e8 0f       	add	r30, r24
    3854:	f1 1d       	adc	r31, r1
    3856:	cf 01       	movw	r24, r30
    3858:	81 56       	subi	r24, 0x61	; 97
    385a:	9a 4e       	sbci	r25, 0xEA	; 234
    385c:	21 e0       	ldi	r18, 0x01	; 1
    385e:	05 c0       	rjmp	.+10     	; 0x386a <CellDataConvertTemperature+0x6a>
    3860:	20 e0       	ldi	r18, 0x00	; 0
    3862:	03 c0       	rjmp	.+6      	; 0x386a <CellDataConvertTemperature+0x6a>
    3864:	8f ef       	ldi	r24, 0xFF	; 255
    3866:	9f ef       	ldi	r25, 0xFF	; 255
    3868:	20 e0       	ldi	r18, 0x00	; 0
    386a:	61 15       	cp	r22, r1
    386c:	71 05       	cpc	r23, r1
    386e:	19 f0       	breq	.+6      	; 0x3876 <CellDataConvertTemperature+0x76>
    3870:	fb 01       	movw	r30, r22
    3872:	91 83       	std	Z+1, r25	; 0x01
    3874:	80 83       	st	Z, r24
    3876:	82 2f       	mov	r24, r18
    3878:	08 95       	ret

Disassembly of section .text.CellDataConvert:

000043d8 <CellDataConvert>:

static void CellDataConvert( CellData* pCellData,
							uint16_t* pu16Voltage,
							int16_t* ps16Temperature
							)
{
    43d8:	0f 93       	push	r16
    43da:	1f 93       	push	r17
    43dc:	cf 93       	push	r28
    43de:	df 93       	push	r29
    43e0:	ec 01       	movw	r28, r24
    43e2:	8a 01       	movw	r16, r20
	if (!CellDataConvertVoltage((*pCellData).voltage, pu16Voltage))
    43e4:	88 81       	ld	r24, Y
    43e6:	99 81       	ldd	r25, Y+1	; 0x01
    43e8:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <CellDataConvertVoltage>
	{
		// add error handling here if needed
	}
	if (!CellDataConvertTemperature((*pCellData).temperature, ps16Temperature))
    43ec:	b8 01       	movw	r22, r16
    43ee:	8a 81       	ldd	r24, Y+2	; 0x02
    43f0:	9b 81       	ldd	r25, Y+3	; 0x03
    43f2:	0e 94 00 1c 	call	0x3800	; 0x3800 <CellDataConvertTemperature>
	{
		// add error handling here if needed
	}
	
}
    43f6:	df 91       	pop	r29
    43f8:	cf 91       	pop	r28
    43fa:	1f 91       	pop	r17
    43fc:	0f 91       	pop	r16
    43fe:	08 95       	ret

Disassembly of section .text.ModuleCurrentConvertReadings:

000022c4 <ModuleCurrentConvertReadings>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    22c4:	a0 91 51 01 	lds	r26, 0x0151	; 0x800151 <sg_sFrame+0x45>
    22c8:	b0 91 52 01 	lds	r27, 0x0152	; 0x800152 <sg_sFrame+0x46>
    22cc:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <sg_sFrame+0x48>
    22d0:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <sg_sFrame+0x49>
    22d4:	e0 91 6d 07 	lds	r30, 0x076D	; 0x80076d <sg_u8CurrentBufferIndex>
    22d8:	ef 3f       	cpi	r30, 0xFF	; 255
    22da:	81 f4       	brne	.+32     	; 0x22fc <ModuleCurrentConvertReadings+0x38>
    22dc:	07 c0       	rjmp	.+14     	; 0x22ec <ModuleCurrentConvertReadings+0x28>
    22de:	f0 e0       	ldi	r31, 0x00	; 0
    22e0:	ee 0f       	add	r30, r30
    22e2:	ff 1f       	adc	r31, r31
    22e4:	eb 5e       	subi	r30, 0xEB	; 235
    22e6:	f8 4f       	sbci	r31, 0xF8	; 248
    22e8:	91 83       	std	Z+1, r25	; 0x01
    22ea:	80 83       	st	Z, r24
    22ec:	e0 91 6d 07 	lds	r30, 0x076D	; 0x80076d <sg_u8CurrentBufferIndex>
    22f0:	ef 5f       	subi	r30, 0xFF	; 255
    22f2:	e0 93 6d 07 	sts	0x076D, r30	; 0x80076d <sg_u8CurrentBufferIndex>
    22f6:	e8 30       	cpi	r30, 0x08	; 8
    22f8:	90 f3       	brcs	.-28     	; 0x22de <ModuleCurrentConvertReadings+0x1a>
    22fa:	0f c0       	rjmp	.+30     	; 0x231a <ModuleCurrentConvertReadings+0x56>
    22fc:	21 e0       	ldi	r18, 0x01	; 1
    22fe:	2e 0f       	add	r18, r30
    2300:	20 93 6d 07 	sts	0x076D, r18	; 0x80076d <sg_u8CurrentBufferIndex>
    2304:	f0 e0       	ldi	r31, 0x00	; 0
    2306:	ee 0f       	add	r30, r30
    2308:	ff 1f       	adc	r31, r31
    230a:	eb 5e       	subi	r30, 0xEB	; 235
    230c:	f8 4f       	sbci	r31, 0xF8	; 248
    230e:	91 83       	std	Z+1, r25	; 0x01
    2310:	80 83       	st	Z, r24
    2312:	28 30       	cpi	r18, 0x08	; 8
    2314:	10 f0       	brcs	.+4      	; 0x231a <ModuleCurrentConvertReadings+0x56>
    2316:	10 92 6d 07 	sts	0x076D, r1	; 0x80076d <sg_u8CurrentBufferIndex>
    231a:	80 e0       	ldi	r24, 0x00	; 0
    231c:	20 e0       	ldi	r18, 0x00	; 0
    231e:	30 e0       	ldi	r19, 0x00	; 0
    2320:	0b c0       	rjmp	.+22     	; 0x2338 <ModuleCurrentConvertReadings+0x74>
    2322:	e8 2f       	mov	r30, r24
    2324:	f0 e0       	ldi	r31, 0x00	; 0
    2326:	ee 0f       	add	r30, r30
    2328:	ff 1f       	adc	r31, r31
    232a:	eb 5e       	subi	r30, 0xEB	; 235
    232c:	f8 4f       	sbci	r31, 0xF8	; 248
    232e:	40 81       	ld	r20, Z
    2330:	51 81       	ldd	r21, Z+1	; 0x01
    2332:	24 0f       	add	r18, r20
    2334:	35 1f       	adc	r19, r21
    2336:	8f 5f       	subi	r24, 0xFF	; 255
    2338:	88 30       	cpi	r24, 0x08	; 8
    233a:	98 f3       	brcs	.-26     	; 0x2322 <ModuleCurrentConvertReadings+0x5e>
    233c:	c9 01       	movw	r24, r18
    233e:	99 23       	and	r25, r25
    2340:	0c f4       	brge	.+2      	; 0x2344 <ModuleCurrentConvertReadings+0x80>
    2342:	07 96       	adiw	r24, 0x07	; 7
    2344:	95 95       	asr	r25
    2346:	87 95       	ror	r24
    2348:	95 95       	asr	r25
    234a:	87 95       	ror	r24
    234c:	95 95       	asr	r25
    234e:	87 95       	ror	r24
    2350:	a8 1b       	sub	r26, r24
    2352:	b9 0b       	sbc	r27, r25
    2354:	20 e8       	ldi	r18, 0x80	; 128
    2356:	3c e0       	ldi	r19, 0x0C	; 12
    2358:	0e 94 ed 24 	call	0x49da	; 0x49da <__usmulhisi3>
    235c:	ab 01       	movw	r20, r22
    235e:	bc 01       	movw	r22, r24
    2360:	5f 5f       	subi	r21, 0xFF	; 255
    2362:	6f 4f       	sbci	r22, 0xFF	; 255
    2364:	7f 4f       	sbci	r23, 0xFF	; 255
    2366:	db 01       	movw	r26, r22
    2368:	ca 01       	movw	r24, r20
    236a:	77 23       	and	r23, r23
    236c:	24 f4       	brge	.+8      	; 0x2376 <ModuleCurrentConvertReadings+0xb2>
    236e:	81 50       	subi	r24, 0x01	; 1
    2370:	9e 4f       	sbci	r25, 0xFE	; 254
    2372:	af 4f       	sbci	r26, 0xFF	; 255
    2374:	bf 4f       	sbci	r27, 0xFF	; 255
    2376:	07 2e       	mov	r0, r23
    2378:	79 e0       	ldi	r23, 0x09	; 9
    237a:	b5 95       	asr	r27
    237c:	a7 95       	ror	r26
    237e:	97 95       	ror	r25
    2380:	87 95       	ror	r24
    2382:	7a 95       	dec	r23
    2384:	d1 f7       	brne	.-12     	; 0x237a <ModuleCurrentConvertReadings+0xb6>
    2386:	70 2d       	mov	r23, r0
    2388:	90 58       	subi	r25, 0x80	; 128
    238a:	af 4f       	sbci	r26, 0xFF	; 255
    238c:	bf 4f       	sbci	r27, 0xFF	; 255
    238e:	ec e0       	ldi	r30, 0x0C	; 12
    2390:	f1 e0       	ldi	r31, 0x01	; 1
    2392:	94 a7       	std	Z+44, r25	; 0x2c
    2394:	83 a7       	std	Z+43, r24	; 0x2b
    2396:	23 a5       	ldd	r18, Z+43	; 0x2b
    2398:	34 a5       	ldd	r19, Z+44	; 0x2c
    239a:	82 89       	ldd	r24, Z+18	; 0x12
    239c:	93 89       	ldd	r25, Z+19	; 0x13
    239e:	82 17       	cp	r24, r18
    23a0:	93 07       	cpc	r25, r19
    23a2:	20 f4       	brcc	.+8      	; 0x23ac <ModuleCurrentConvertReadings+0xe8>
    23a4:	83 a5       	ldd	r24, Z+43	; 0x2b
    23a6:	94 a5       	ldd	r25, Z+44	; 0x2c
    23a8:	93 8b       	std	Z+19, r25	; 0x13
    23aa:	82 8b       	std	Z+18, r24	; 0x12
    23ac:	ec e0       	ldi	r30, 0x0C	; 12
    23ae:	f1 e0       	ldi	r31, 0x01	; 1
    23b0:	23 a5       	ldd	r18, Z+43	; 0x2b
    23b2:	34 a5       	ldd	r19, Z+44	; 0x2c
    23b4:	84 89       	ldd	r24, Z+20	; 0x14
    23b6:	95 89       	ldd	r25, Z+21	; 0x15
    23b8:	28 17       	cp	r18, r24
    23ba:	39 07       	cpc	r19, r25
    23bc:	20 f4       	brcc	.+8      	; 0x23c6 <ModuleCurrentConvertReadings+0x102>
    23be:	83 a5       	ldd	r24, Z+43	; 0x2b
    23c0:	94 a5       	ldd	r25, Z+44	; 0x2c
    23c2:	95 8b       	std	Z+21, r25	; 0x15
    23c4:	84 8b       	std	Z+20, r24	; 0x14
    23c6:	08 95       	ret

Disassembly of section .text.__vector_1:

000044c4 <__vector_1>:

// NOTE: If you're getting unexpected AVR resets, uncomment these unused handlers to see
// if another interrupt is being taken that doesn't have a handler. AVR Defaults to jumping
// to 0 when not vector is programmed.
ISR(ANACOMP0_vect, ISR_BLOCK)
{
    44c4:	1f 92       	push	r1
    44c6:	0f 92       	push	r0
    44c8:	0f b6       	in	r0, 0x3f	; 63
    44ca:	0f 92       	push	r0
    44cc:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) ANACOMP0_vect;
    44ce:	82 e6       	ldi	r24, 0x62	; 98
    44d0:	92 e2       	ldi	r25, 0x22	; 34
    44d2:	80 93 62 07 	sts	0x0762, r24	; 0x800762 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    44d6:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    44da:	80 93 61 07 	sts	0x0761, r24	; 0x800761 <sg_u8PCMSK0>
    44de:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    44e2:	80 93 60 07 	sts	0x0760, r24	; 0x800760 <sg_u8PCMSK1>
    44e6:	ff cf       	rjmp	.-2      	; 0x44e6 <__vector_1+0x22>

Disassembly of section .text.__vector_2:

000044e8 <__vector_2>:
	while (1);
}

ISR(ANACOMP1_vect, ISR_BLOCK)
{
    44e8:	1f 92       	push	r1
    44ea:	0f 92       	push	r0
    44ec:	0f b6       	in	r0, 0x3f	; 63
    44ee:	0f 92       	push	r0
    44f0:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) ANACOMP1_vect;
    44f2:	84 e7       	ldi	r24, 0x74	; 116
    44f4:	92 e2       	ldi	r25, 0x22	; 34
    44f6:	80 93 62 07 	sts	0x0762, r24	; 0x800762 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    44fa:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    44fe:	80 93 61 07 	sts	0x0761, r24	; 0x800761 <sg_u8PCMSK0>
    4502:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4506:	80 93 60 07 	sts	0x0760, r24	; 0x800760 <sg_u8PCMSK1>
    450a:	ff cf       	rjmp	.-2      	; 0x450a <__vector_2+0x22>

Disassembly of section .text.__vector_3:

0000450c <__vector_3>:
	while (1);
}

ISR(ANACOMP2_vect, ISR_BLOCK)
{
    450c:	1f 92       	push	r1
    450e:	0f 92       	push	r0
    4510:	0f b6       	in	r0, 0x3f	; 63
    4512:	0f 92       	push	r0
    4514:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) ANACOMP2_vect;
    4516:	86 e8       	ldi	r24, 0x86	; 134
    4518:	92 e2       	ldi	r25, 0x22	; 34
    451a:	80 93 62 07 	sts	0x0762, r24	; 0x800762 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    451e:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4522:	80 93 61 07 	sts	0x0761, r24	; 0x800761 <sg_u8PCMSK0>
    4526:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    452a:	80 93 60 07 	sts	0x0760, r24	; 0x800760 <sg_u8PCMSK1>
    452e:	ff cf       	rjmp	.-2      	; 0x452e <__vector_3+0x22>

Disassembly of section .text.__vector_4:

00004530 <__vector_4>:
	while (1);
}

ISR(ANACOMP3_vect, ISR_BLOCK)
{
    4530:	1f 92       	push	r1
    4532:	0f 92       	push	r0
    4534:	0f b6       	in	r0, 0x3f	; 63
    4536:	0f 92       	push	r0
    4538:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) ANACOMP3_vect;
    453a:	88 e9       	ldi	r24, 0x98	; 152
    453c:	92 e2       	ldi	r25, 0x22	; 34
    453e:	80 93 62 07 	sts	0x0762, r24	; 0x800762 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4542:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4546:	80 93 61 07 	sts	0x0761, r24	; 0x800761 <sg_u8PCMSK0>
    454a:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    454e:	80 93 60 07 	sts	0x0760, r24	; 0x800760 <sg_u8PCMSK1>
    4552:	ff cf       	rjmp	.-2      	; 0x4552 <__vector_4+0x22>

Disassembly of section .text.__vector_5:

00004554 <__vector_5>:
	while (1);
}

ISR(PSC_FAULT_vect, ISR_BLOCK)
{
    4554:	1f 92       	push	r1
    4556:	0f 92       	push	r0
    4558:	0f b6       	in	r0, 0x3f	; 63
    455a:	0f 92       	push	r0
    455c:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) PSC_FAULT_vect;
    455e:	8a ea       	ldi	r24, 0xAA	; 170
    4560:	92 e2       	ldi	r25, 0x22	; 34
    4562:	80 93 62 07 	sts	0x0762, r24	; 0x800762 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4566:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    456a:	80 93 61 07 	sts	0x0761, r24	; 0x800761 <sg_u8PCMSK0>
    456e:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4572:	80 93 60 07 	sts	0x0760, r24	; 0x800760 <sg_u8PCMSK1>
    4576:	ff cf       	rjmp	.-2      	; 0x4576 <__vector_5+0x22>

Disassembly of section .text.__vector_6:

00004578 <__vector_6>:
	while (1);
}

ISR(PSC_EC_vect, ISR_BLOCK)
{
    4578:	1f 92       	push	r1
    457a:	0f 92       	push	r0
    457c:	0f b6       	in	r0, 0x3f	; 63
    457e:	0f 92       	push	r0
    4580:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) PSC_EC_vect;
    4582:	8c eb       	ldi	r24, 0xBC	; 188
    4584:	92 e2       	ldi	r25, 0x22	; 34
    4586:	80 93 62 07 	sts	0x0762, r24	; 0x800762 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    458a:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    458e:	80 93 61 07 	sts	0x0761, r24	; 0x800761 <sg_u8PCMSK0>
    4592:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4596:	80 93 60 07 	sts	0x0760, r24	; 0x800760 <sg_u8PCMSK1>
    459a:	ff cf       	rjmp	.-2      	; 0x459a <__vector_6+0x22>

Disassembly of section .text.__vector_22:

0000459c <__vector_22>:
	while (1);
}

ISR(PCINT0_vect, ISR_BLOCK)
{
    459c:	1f 92       	push	r1
    459e:	0f 92       	push	r0
    45a0:	0f b6       	in	r0, 0x3f	; 63
    45a2:	0f 92       	push	r0
    45a4:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) PCINT0_vect;
    45a6:	8e ec       	ldi	r24, 0xCE	; 206
    45a8:	92 e2       	ldi	r25, 0x22	; 34
    45aa:	80 93 62 07 	sts	0x0762, r24	; 0x800762 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    45ae:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    45b2:	80 93 61 07 	sts	0x0761, r24	; 0x800761 <sg_u8PCMSK0>
    45b6:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    45ba:	80 93 60 07 	sts	0x0760, r24	; 0x800760 <sg_u8PCMSK1>
    45be:	ff cf       	rjmp	.-2      	; 0x45be <__vector_22+0x22>

Disassembly of section .text.__vector_9:

000045c0 <__vector_9>:
// 	while (1);
// }
*/

ISR(INT2_vect, ISR_BLOCK)
{
    45c0:	1f 92       	push	r1
    45c2:	0f 92       	push	r0
    45c4:	0f b6       	in	r0, 0x3f	; 63
    45c6:	0f 92       	push	r0
    45c8:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) INT2_vect;
    45ca:	80 ee       	ldi	r24, 0xE0	; 224
    45cc:	92 e2       	ldi	r25, 0x22	; 34
    45ce:	80 93 62 07 	sts	0x0762, r24	; 0x800762 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    45d2:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    45d6:	80 93 61 07 	sts	0x0761, r24	; 0x800761 <sg_u8PCMSK0>
    45da:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    45de:	80 93 60 07 	sts	0x0760, r24	; 0x800760 <sg_u8PCMSK1>
    45e2:	ff cf       	rjmp	.-2      	; 0x45e2 <__vector_9+0x22>

Disassembly of section .text.__vector_11:

000045e4 <__vector_11>:
// 	while (1);
// }


ISR(TIMER1_CAPT_vect, ISR_BLOCK)
{
    45e4:	1f 92       	push	r1
    45e6:	0f 92       	push	r0
    45e8:	0f b6       	in	r0, 0x3f	; 63
    45ea:	0f 92       	push	r0
    45ec:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) TIMER1_CAPT_vect;
    45ee:	82 ef       	ldi	r24, 0xF2	; 242
    45f0:	92 e2       	ldi	r25, 0x22	; 34
    45f2:	80 93 62 07 	sts	0x0762, r24	; 0x800762 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    45f6:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    45fa:	80 93 61 07 	sts	0x0761, r24	; 0x800761 <sg_u8PCMSK0>
    45fe:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4602:	80 93 60 07 	sts	0x0760, r24	; 0x800760 <sg_u8PCMSK1>
    4606:	ff cf       	rjmp	.-2      	; 0x4606 <__vector_11+0x22>

Disassembly of section .text.__vector_13:

00004608 <__vector_13>:
// }



ISR(TIMER1_COMPB_vect, ISR_BLOCK)
{
    4608:	1f 92       	push	r1
    460a:	0f 92       	push	r0
    460c:	0f b6       	in	r0, 0x3f	; 63
    460e:	0f 92       	push	r0
    4610:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) TIMER1_COMPB_vect;
    4612:	84 e0       	ldi	r24, 0x04	; 4
    4614:	93 e2       	ldi	r25, 0x23	; 35
    4616:	80 93 62 07 	sts	0x0762, r24	; 0x800762 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    461a:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    461e:	80 93 61 07 	sts	0x0761, r24	; 0x800761 <sg_u8PCMSK0>
    4622:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4626:	80 93 60 07 	sts	0x0760, r24	; 0x800760 <sg_u8PCMSK1>
    462a:	ff cf       	rjmp	.-2      	; 0x462a <__vector_13+0x22>

Disassembly of section .text.__vector_14:

0000462c <__vector_14>:
	while (1);
}


ISR(TIMER1_OVF_vect, ISR_BLOCK)
{
    462c:	1f 92       	push	r1
    462e:	0f 92       	push	r0
    4630:	0f b6       	in	r0, 0x3f	; 63
    4632:	0f 92       	push	r0
    4634:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) TIMER1_OVF_vect;
    4636:	86 e1       	ldi	r24, 0x16	; 22
    4638:	93 e2       	ldi	r25, 0x23	; 35
    463a:	80 93 62 07 	sts	0x0762, r24	; 0x800762 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    463e:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4642:	80 93 61 07 	sts	0x0761, r24	; 0x800761 <sg_u8PCMSK0>
    4646:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    464a:	80 93 60 07 	sts	0x0760, r24	; 0x800760 <sg_u8PCMSK1>
    464e:	ff cf       	rjmp	.-2      	; 0x464e <__vector_14+0x22>

Disassembly of section .text.__vector_17:

00004650 <__vector_17>:
	while (1);
}

ISR(TIMER0_OVF_vect, ISR_BLOCK)
{
    4650:	1f 92       	push	r1
    4652:	0f 92       	push	r0
    4654:	0f b6       	in	r0, 0x3f	; 63
    4656:	0f 92       	push	r0
    4658:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) TIMER0_OVF_vect;
    465a:	88 e2       	ldi	r24, 0x28	; 40
    465c:	93 e2       	ldi	r25, 0x23	; 35
    465e:	80 93 62 07 	sts	0x0762, r24	; 0x800762 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4662:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4666:	80 93 61 07 	sts	0x0761, r24	; 0x800761 <sg_u8PCMSK0>
    466a:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    466e:	80 93 60 07 	sts	0x0760, r24	; 0x800760 <sg_u8PCMSK1>
    4672:	ff cf       	rjmp	.-2      	; 0x4672 <__vector_17+0x22>

Disassembly of section .text.__vector_19:

00004674 <__vector_19>:
	while (1);
}

ISR(CAN_TOVF_vect, ISR_BLOCK)
{
    4674:	1f 92       	push	r1
    4676:	0f 92       	push	r0
    4678:	0f b6       	in	r0, 0x3f	; 63
    467a:	0f 92       	push	r0
    467c:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) CAN_TOVF_vect;
    467e:	8a e3       	ldi	r24, 0x3A	; 58
    4680:	93 e2       	ldi	r25, 0x23	; 35
    4682:	80 93 62 07 	sts	0x0762, r24	; 0x800762 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4686:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    468a:	80 93 61 07 	sts	0x0761, r24	; 0x800761 <sg_u8PCMSK0>
    468e:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4692:	80 93 60 07 	sts	0x0760, r24	; 0x800760 <sg_u8PCMSK1>
    4696:	ff cf       	rjmp	.-2      	; 0x4696 <__vector_19+0x22>

Disassembly of section .text.__vector_21:

00004698 <__vector_21>:
	while (1);
}

ISR(LIN_ERR_vect, ISR_BLOCK)
{
    4698:	1f 92       	push	r1
    469a:	0f 92       	push	r0
    469c:	0f b6       	in	r0, 0x3f	; 63
    469e:	0f 92       	push	r0
    46a0:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) LIN_ERR_vect;
    46a2:	8c e4       	ldi	r24, 0x4C	; 76
    46a4:	93 e2       	ldi	r25, 0x23	; 35
    46a6:	80 93 62 07 	sts	0x0762, r24	; 0x800762 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    46aa:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    46ae:	80 93 61 07 	sts	0x0761, r24	; 0x800761 <sg_u8PCMSK0>
    46b2:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    46b6:	80 93 60 07 	sts	0x0760, r24	; 0x800760 <sg_u8PCMSK1>
    46ba:	ff cf       	rjmp	.-2      	; 0x46ba <__vector_21+0x22>

Disassembly of section .text.__vector_25:

000046bc <__vector_25>:
// 	while (1);
// }


ISR(PCINT3_vect, ISR_BLOCK)
{
    46bc:	1f 92       	push	r1
    46be:	0f 92       	push	r0
    46c0:	0f b6       	in	r0, 0x3f	; 63
    46c2:	0f 92       	push	r0
    46c4:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) PCINT3_vect;
    46c6:	8e e5       	ldi	r24, 0x5E	; 94
    46c8:	93 e2       	ldi	r25, 0x23	; 35
    46ca:	80 93 62 07 	sts	0x0762, r24	; 0x800762 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    46ce:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    46d2:	80 93 61 07 	sts	0x0761, r24	; 0x800761 <sg_u8PCMSK0>
    46d6:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    46da:	80 93 60 07 	sts	0x0760, r24	; 0x800760 <sg_u8PCMSK1>
    46de:	ff cf       	rjmp	.-2      	; 0x46de <__vector_25+0x22>

Disassembly of section .text.__vector_26:

000046e0 <__vector_26>:
	while (1);
}


ISR(SPI_STC_vect, ISR_BLOCK)
{
    46e0:	1f 92       	push	r1
    46e2:	0f 92       	push	r0
    46e4:	0f b6       	in	r0, 0x3f	; 63
    46e6:	0f 92       	push	r0
    46e8:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) SPI_STC_vect;
    46ea:	80 e7       	ldi	r24, 0x70	; 112
    46ec:	93 e2       	ldi	r25, 0x23	; 35
    46ee:	80 93 62 07 	sts	0x0762, r24	; 0x800762 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    46f2:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    46f6:	80 93 61 07 	sts	0x0761, r24	; 0x800761 <sg_u8PCMSK0>
    46fa:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    46fe:	80 93 60 07 	sts	0x0760, r24	; 0x800760 <sg_u8PCMSK1>
    4702:	ff cf       	rjmp	.-2      	; 0x4702 <__vector_26+0x22>

Disassembly of section .text.__vector_29:

00004704 <__vector_29>:
	while (1);
}

ISR(EE_READY_vect, ISR_BLOCK)
{
    4704:	1f 92       	push	r1
    4706:	0f 92       	push	r0
    4708:	0f b6       	in	r0, 0x3f	; 63
    470a:	0f 92       	push	r0
    470c:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) EE_READY_vect;
    470e:	82 e8       	ldi	r24, 0x82	; 130
    4710:	93 e2       	ldi	r25, 0x23	; 35
    4712:	80 93 62 07 	sts	0x0762, r24	; 0x800762 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4716:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    471a:	80 93 61 07 	sts	0x0761, r24	; 0x800761 <sg_u8PCMSK0>
    471e:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4722:	80 93 60 07 	sts	0x0760, r24	; 0x800760 <sg_u8PCMSK1>
    4726:	ff cf       	rjmp	.-2      	; 0x4726 <__vector_29+0x22>

Disassembly of section .text.__vector_30:

00004728 <__vector_30>:
	while (1);
}

ISR(SPM_READY_vect, ISR_BLOCK)
{
    4728:	1f 92       	push	r1
    472a:	0f 92       	push	r0
    472c:	0f b6       	in	r0, 0x3f	; 63
    472e:	0f 92       	push	r0
    4730:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) SPM_READY_vect;
    4732:	84 e9       	ldi	r24, 0x94	; 148
    4734:	93 e2       	ldi	r25, 0x23	; 35
    4736:	80 93 62 07 	sts	0x0762, r24	; 0x800762 <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    473a:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    473e:	80 93 61 07 	sts	0x0761, r24	; 0x800761 <sg_u8PCMSK0>
    4742:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4746:	80 93 60 07 	sts	0x0760, r24	; 0x800760 <sg_u8PCMSK1>
    474a:	ff cf       	rjmp	.-2      	; 0x474a <__vector_30+0x22>

Disassembly of section .text.CurrentThresholdsGet:

000031d4 <CurrentThresholdsGet>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    31d4:	0f 93       	push	r16
    31d6:	1f 93       	push	r17
    31d8:	cf 93       	push	r28
    31da:	df 93       	push	r29
    31dc:	8c 01       	movw	r16, r24
    31de:	eb 01       	movw	r28, r22
    31e0:	89 2b       	or	r24, r25
    31e2:	f9 f0       	breq	.+62     	; 0x3222 <CurrentThresholdsGet+0x4e>
    31e4:	87 e0       	ldi	r24, 0x07	; 7
    31e6:	90 e0       	ldi	r25, 0x00	; 0
    31e8:	0e 94 93 24 	call	0x4926	; 0x4926 <EEPROMRead>
    31ec:	90 e0       	ldi	r25, 0x00	; 0
    31ee:	f8 01       	movw	r30, r16
    31f0:	91 83       	std	Z+1, r25	; 0x01
    31f2:	80 83       	st	Z, r24
    31f4:	88 e0       	ldi	r24, 0x08	; 8
    31f6:	90 e0       	ldi	r25, 0x00	; 0
    31f8:	0e 94 93 24 	call	0x4926	; 0x4926 <EEPROMRead>
    31fc:	90 e0       	ldi	r25, 0x00	; 0
    31fe:	98 2f       	mov	r25, r24
    3200:	88 27       	eor	r24, r24
    3202:	f8 01       	movw	r30, r16
    3204:	20 81       	ld	r18, Z
    3206:	31 81       	ldd	r19, Z+1	; 0x01
    3208:	82 2b       	or	r24, r18
    320a:	93 2b       	or	r25, r19
    320c:	91 83       	std	Z+1, r25	; 0x01
    320e:	80 83       	st	Z, r24
    3210:	01 97       	sbiw	r24, 0x01	; 1
    3212:	8e 3f       	cpi	r24, 0xFE	; 254
    3214:	9f 4f       	sbci	r25, 0xFF	; 255
    3216:	28 f0       	brcs	.+10     	; 0x3222 <CurrentThresholdsGet+0x4e>
    3218:	8c ec       	ldi	r24, 0xCC	; 204
    321a:	97 e7       	ldi	r25, 0x77	; 119
    321c:	f8 01       	movw	r30, r16
    321e:	91 83       	std	Z+1, r25	; 0x01
    3220:	80 83       	st	Z, r24
    3222:	20 97       	sbiw	r28, 0x00	; 0
    3224:	e1 f0       	breq	.+56     	; 0x325e <CurrentThresholdsGet+0x8a>
    3226:	85 e0       	ldi	r24, 0x05	; 5
    3228:	90 e0       	ldi	r25, 0x00	; 0
    322a:	0e 94 93 24 	call	0x4926	; 0x4926 <EEPROMRead>
    322e:	90 e0       	ldi	r25, 0x00	; 0
    3230:	99 83       	std	Y+1, r25	; 0x01
    3232:	88 83       	st	Y, r24
    3234:	86 e0       	ldi	r24, 0x06	; 6
    3236:	90 e0       	ldi	r25, 0x00	; 0
    3238:	0e 94 93 24 	call	0x4926	; 0x4926 <EEPROMRead>
    323c:	90 e0       	ldi	r25, 0x00	; 0
    323e:	98 2f       	mov	r25, r24
    3240:	88 27       	eor	r24, r24
    3242:	28 81       	ld	r18, Y
    3244:	39 81       	ldd	r19, Y+1	; 0x01
    3246:	82 2b       	or	r24, r18
    3248:	93 2b       	or	r25, r19
    324a:	99 83       	std	Y+1, r25	; 0x01
    324c:	88 83       	st	Y, r24
    324e:	01 97       	sbiw	r24, 0x01	; 1
    3250:	8e 3f       	cpi	r24, 0xFE	; 254
    3252:	9f 4f       	sbci	r25, 0xFF	; 255
    3254:	20 f0       	brcs	.+8      	; 0x325e <CurrentThresholdsGet+0x8a>
    3256:	84 ef       	ldi	r24, 0xF4	; 244
    3258:	91 e8       	ldi	r25, 0x81	; 129
    325a:	99 83       	std	Y+1, r25	; 0x01
    325c:	88 83       	st	Y, r24
    325e:	df 91       	pop	r29
    3260:	cf 91       	pop	r28
    3262:	1f 91       	pop	r17
    3264:	0f 91       	pop	r16
    3266:	08 95       	ret

Disassembly of section .text.ControllerStatusMessagesSend:

00000684 <ControllerStatusMessagesSend>:
 684:	cf 92       	push	r12
 686:	df 92       	push	r13
 688:	ef 92       	push	r14
 68a:	ff 92       	push	r15
 68c:	0f 93       	push	r16
 68e:	1f 93       	push	r17
 690:	cf 93       	push	r28
 692:	df 93       	push	r29
 694:	00 d0       	rcall	.+0      	; 0x696 <ControllerStatusMessagesSend+0x12>
 696:	00 d0       	rcall	.+0      	; 0x698 <ControllerStatusMessagesSend+0x14>
 698:	cd b7       	in	r28, 0x3d	; 61
 69a:	de b7       	in	r29, 0x3e	; 62
 69c:	8c 01       	movw	r16, r24
 69e:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <sg_bSendTimeRequest>
 6a2:	88 23       	and	r24, r24
 6a4:	69 f0       	breq	.+26     	; 0x6c0 <ControllerStatusMessagesSend+0x3c>
 6a6:	88 e0       	ldi	r24, 0x08	; 8
 6a8:	d8 01       	movw	r26, r16
 6aa:	1d 92       	st	X+, r1
 6ac:	8a 95       	dec	r24
 6ae:	e9 f7       	brne	.-6      	; 0x6aa <ControllerStatusMessagesSend+0x26>
 6b0:	48 e0       	ldi	r20, 0x08	; 8
 6b2:	b8 01       	movw	r22, r16
 6b4:	88 e0       	ldi	r24, 0x08	; 8
 6b6:	0e 94 48 24 	call	0x4890	; 0x4890 <CANSendMessage>
 6ba:	81 11       	cpse	r24, r1
 6bc:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <sg_bSendTimeRequest>
 6c0:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <sg_bSendModuleControllerStatus>
 6c4:	88 23       	and	r24, r24
 6c6:	09 f4       	brne	.+2      	; 0x6ca <ControllerStatusMessagesSend+0x46>
 6c8:	00 c1       	rjmp	.+512    	; 0x8ca <__EEPROM_REGION_LENGTH__+0xca>
 6ca:	80 91 65 07 	lds	r24, 0x0765	; 0x800765 <sg_u8ControllerStatusMsgCount>
 6ce:	81 11       	cpse	r24, r1
 6d0:	80 c0       	rjmp	.+256    	; 0x7d2 <ControllerStatusMessagesSend+0x14e>
 6d2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <sg_eModuleControllerStateCurrent>
 6d6:	8f 70       	andi	r24, 0x0F	; 15
 6d8:	f8 01       	movw	r30, r16
 6da:	80 83       	st	Z, r24
 6dc:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <sg_u8SOC>
 6e0:	81 83       	std	Z+1, r24	; 0x01
 6e2:	80 91 1d 03 	lds	r24, 0x031D	; 0x80031d <sg_u8SOH>
 6e6:	82 83       	std	Z+2, r24	; 0x02
 6e8:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <sg_sFrame+0x11>
 6ec:	83 83       	std	Z+3, r24	; 0x03
 6ee:	84 e0       	ldi	r24, 0x04	; 4
 6f0:	34 96       	adiw	r30, 0x04	; 4
 6f2:	df 01       	movw	r26, r30
 6f4:	1d 92       	st	X+, r1
 6f6:	8a 95       	dec	r24
 6f8:	e9 f7       	brne	.-6      	; 0x6f4 <ControllerStatusMessagesSend+0x70>
 6fa:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <sg_sFrame+0x44>
 6fe:	88 23       	and	r24, r24
 700:	79 f0       	breq	.+30     	; 0x720 <ControllerStatusMessagesSend+0x9c>
 702:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <sg_sFrame+0x47>
 706:	88 23       	and	r24, r24
 708:	71 f0       	breq	.+28     	; 0x726 <ControllerStatusMessagesSend+0xa2>
 70a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <sg_eModuleControllerStateCurrent>
 70e:	83 30       	cpi	r24, 0x03	; 3
 710:	69 f4       	brne	.+26     	; 0x72c <ControllerStatusMessagesSend+0xa8>
 712:	0e 94 62 11 	call	0x22c4	; 0x22c4 <ModuleCurrentConvertReadings>
 716:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <sg_sFrame+0x2b>
 71a:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <sg_sFrame+0x2c>
 71e:	08 c0       	rjmp	.+16     	; 0x730 <ControllerStatusMessagesSend+0xac>
 720:	80 e0       	ldi	r24, 0x00	; 0
 722:	90 e8       	ldi	r25, 0x80	; 128
 724:	05 c0       	rjmp	.+10     	; 0x730 <ControllerStatusMessagesSend+0xac>
 726:	80 e0       	ldi	r24, 0x00	; 0
 728:	90 e8       	ldi	r25, 0x80	; 128
 72a:	02 c0       	rjmp	.+4      	; 0x730 <ControllerStatusMessagesSend+0xac>
 72c:	80 e0       	ldi	r24, 0x00	; 0
 72e:	90 e8       	ldi	r25, 0x80	; 128
 730:	f8 01       	movw	r30, r16
 732:	84 83       	std	Z+4, r24	; 0x04
 734:	95 83       	std	Z+5, r25	; 0x05
 736:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <sg_sFrame+0x41>
 73a:	88 23       	and	r24, r24
 73c:	79 f0       	breq	.+30     	; 0x75c <ControllerStatusMessagesSend+0xd8>
 73e:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <sg_sFrame+0x42>
 742:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <sg_sFrame+0x43>
 746:	4f ef       	ldi	r20, 0xFF	; 255
 748:	53 e0       	ldi	r21, 0x03	; 3
 74a:	60 e0       	ldi	r22, 0x00	; 0
 74c:	70 e0       	ldi	r23, 0x00	; 0
 74e:	9a 01       	movw	r18, r20
 750:	ab 01       	movw	r20, r22
 752:	28 1b       	sub	r18, r24
 754:	39 0b       	sbc	r19, r25
 756:	41 09       	sbc	r20, r1
 758:	51 09       	sbc	r21, r1
 75a:	03 c0       	rjmp	.+6      	; 0x762 <ControllerStatusMessagesSend+0xde>
 75c:	20 e0       	ldi	r18, 0x00	; 0
 75e:	30 e0       	ldi	r19, 0x00	; 0
 760:	a9 01       	movw	r20, r18
 762:	ec e0       	ldi	r30, 0x0C	; 12
 764:	f1 e0       	ldi	r31, 0x01	; 1
 766:	a1 a1       	ldd	r26, Z+33	; 0x21
 768:	b2 a1       	ldd	r27, Z+34	; 0x22
 76a:	0e 94 c8 24 	call	0x4990	; 0x4990 <__mulshisi3>
 76e:	dc 01       	movw	r26, r24
 770:	cb 01       	movw	r24, r22
 772:	68 94       	set
 774:	16 f8       	bld	r1, 6
 776:	b6 95       	lsr	r27
 778:	a7 95       	ror	r26
 77a:	97 95       	ror	r25
 77c:	87 95       	ror	r24
 77e:	16 94       	lsr	r1
 780:	d1 f7       	brne	.-12     	; 0x776 <ControllerStatusMessagesSend+0xf2>
 782:	c1 8c       	ldd	r12, Z+25	; 0x19
 784:	d2 8c       	ldd	r13, Z+26	; 0x1a
 786:	e3 8c       	ldd	r14, Z+27	; 0x1b
 788:	f4 8c       	ldd	r15, Z+28	; 0x1c
 78a:	bc 01       	movw	r22, r24
 78c:	cd 01       	movw	r24, r26
 78e:	6c 0d       	add	r22, r12
 790:	7d 1d       	adc	r23, r13
 792:	8e 1d       	adc	r24, r14
 794:	9f 1d       	adc	r25, r15
 796:	2f e0       	ldi	r18, 0x0F	; 15
 798:	30 e0       	ldi	r19, 0x00	; 0
 79a:	40 e0       	ldi	r20, 0x00	; 0
 79c:	50 e0       	ldi	r21, 0x00	; 0
 79e:	0e 94 a0 1f 	call	0x3f40	; 0x3f40 <__udivmodsi4>
 7a2:	20 93 49 01 	sts	0x0149, r18	; 0x800149 <sg_sFrame+0x3d>
 7a6:	30 93 4a 01 	sts	0x014A, r19	; 0x80014a <sg_sFrame+0x3e>
 7aa:	40 93 4b 01 	sts	0x014B, r20	; 0x80014b <sg_sFrame+0x3f>
 7ae:	50 93 4c 01 	sts	0x014C, r21	; 0x80014c <sg_sFrame+0x40>
 7b2:	d8 01       	movw	r26, r16
 7b4:	16 96       	adiw	r26, 0x06	; 6
 7b6:	2c 93       	st	X, r18
 7b8:	16 97       	sbiw	r26, 0x06	; 6
 7ba:	17 96       	adiw	r26, 0x07	; 7
 7bc:	3c 93       	st	X, r19
 7be:	48 e0       	ldi	r20, 0x08	; 8
 7c0:	b8 01       	movw	r22, r16
 7c2:	81 e0       	ldi	r24, 0x01	; 1
 7c4:	0e 94 48 24 	call	0x4890	; 0x4890 <CANSendMessage>
 7c8:	88 23       	and	r24, r24
 7ca:	09 f4       	brne	.+2      	; 0x7ce <ControllerStatusMessagesSend+0x14a>
 7cc:	67 c0       	rjmp	.+206    	; 0x89c <__EEPROM_REGION_LENGTH__+0x9c>
 7ce:	81 e0       	ldi	r24, 0x01	; 1
 7d0:	6c c0       	rjmp	.+216    	; 0x8aa <__EEPROM_REGION_LENGTH__+0xaa>
 7d2:	81 30       	cpi	r24, 0x01	; 1
 7d4:	a1 f5       	brne	.+104    	; 0x83e <__EEPROM_REGION_LENGTH__+0x3e>
 7d6:	ec e0       	ldi	r30, 0x0C	; 12
 7d8:	f1 e0       	ldi	r31, 0x01	; 1
 7da:	85 a9       	ldd	r24, Z+53	; 0x35
 7dc:	96 a9       	ldd	r25, Z+54	; 0x36
 7de:	d8 01       	movw	r26, r16
 7e0:	8c 93       	st	X, r24
 7e2:	85 a9       	ldd	r24, Z+53	; 0x35
 7e4:	96 a9       	ldd	r25, Z+54	; 0x36
 7e6:	11 96       	adiw	r26, 0x01	; 1
 7e8:	9c 93       	st	X, r25
 7ea:	11 97       	sbiw	r26, 0x01	; 1
 7ec:	83 a9       	ldd	r24, Z+51	; 0x33
 7ee:	94 a9       	ldd	r25, Z+52	; 0x34
 7f0:	12 96       	adiw	r26, 0x02	; 2
 7f2:	8c 93       	st	X, r24
 7f4:	12 97       	sbiw	r26, 0x02	; 2
 7f6:	83 a9       	ldd	r24, Z+51	; 0x33
 7f8:	94 a9       	ldd	r25, Z+52	; 0x34
 7fa:	13 96       	adiw	r26, 0x03	; 3
 7fc:	9c 93       	st	X, r25
 7fe:	13 97       	sbiw	r26, 0x03	; 3
 800:	87 a9       	ldd	r24, Z+55	; 0x37
 802:	90 ad       	ldd	r25, Z+56	; 0x38
 804:	14 96       	adiw	r26, 0x04	; 4
 806:	8c 93       	st	X, r24
 808:	14 97       	sbiw	r26, 0x04	; 4
 80a:	87 a9       	ldd	r24, Z+55	; 0x37
 80c:	90 ad       	ldd	r25, Z+56	; 0x38
 80e:	15 96       	adiw	r26, 0x05	; 5
 810:	9c 93       	st	X, r25
 812:	61 ad       	ldd	r22, Z+57	; 0x39
 814:	72 ad       	ldd	r23, Z+58	; 0x3a
 816:	83 ad       	ldd	r24, Z+59	; 0x3b
 818:	94 ad       	ldd	r25, Z+60	; 0x3c
 81a:	2f e0       	ldi	r18, 0x0F	; 15
 81c:	30 e0       	ldi	r19, 0x00	; 0
 81e:	40 e0       	ldi	r20, 0x00	; 0
 820:	50 e0       	ldi	r21, 0x00	; 0
 822:	0e 94 a0 1f 	call	0x3f40	; 0x3f40 <__udivmodsi4>
 826:	f8 01       	movw	r30, r16
 828:	26 83       	std	Z+6, r18	; 0x06
 82a:	37 83       	std	Z+7, r19	; 0x07
 82c:	48 e0       	ldi	r20, 0x08	; 8
 82e:	b8 01       	movw	r22, r16
 830:	82 e0       	ldi	r24, 0x02	; 2
 832:	0e 94 48 24 	call	0x4890	; 0x4890 <CANSendMessage>
 836:	88 23       	and	r24, r24
 838:	99 f1       	breq	.+102    	; 0x8a0 <__EEPROM_REGION_LENGTH__+0xa0>
 83a:	81 e0       	ldi	r24, 0x01	; 1
 83c:	36 c0       	rjmp	.+108    	; 0x8aa <__EEPROM_REGION_LENGTH__+0xaa>
 83e:	82 30       	cpi	r24, 0x02	; 2
 840:	89 f5       	brne	.+98     	; 0x8a4 <__EEPROM_REGION_LENGTH__+0xa4>
 842:	ec e0       	ldi	r30, 0x0C	; 12
 844:	f1 e0       	ldi	r31, 0x01	; 1
 846:	87 a5       	ldd	r24, Z+47	; 0x2f
 848:	90 a9       	ldd	r25, Z+48	; 0x30
 84a:	d8 01       	movw	r26, r16
 84c:	8c 93       	st	X, r24
 84e:	87 a5       	ldd	r24, Z+47	; 0x2f
 850:	90 a9       	ldd	r25, Z+48	; 0x30
 852:	11 96       	adiw	r26, 0x01	; 1
 854:	9c 93       	st	X, r25
 856:	11 97       	sbiw	r26, 0x01	; 1
 858:	85 a5       	ldd	r24, Z+45	; 0x2d
 85a:	96 a5       	ldd	r25, Z+46	; 0x2e
 85c:	12 96       	adiw	r26, 0x02	; 2
 85e:	8c 93       	st	X, r24
 860:	12 97       	sbiw	r26, 0x02	; 2
 862:	85 a5       	ldd	r24, Z+45	; 0x2d
 864:	96 a5       	ldd	r25, Z+46	; 0x2e
 866:	13 96       	adiw	r26, 0x03	; 3
 868:	9c 93       	st	X, r25
 86a:	13 97       	sbiw	r26, 0x03	; 3
 86c:	81 a9       	ldd	r24, Z+49	; 0x31
 86e:	92 a9       	ldd	r25, Z+50	; 0x32
 870:	14 96       	adiw	r26, 0x04	; 4
 872:	8c 93       	st	X, r24
 874:	14 97       	sbiw	r26, 0x04	; 4
 876:	81 a9       	ldd	r24, Z+49	; 0x31
 878:	92 a9       	ldd	r25, Z+50	; 0x32
 87a:	15 96       	adiw	r26, 0x05	; 5
 87c:	9c 93       	st	X, r25
 87e:	15 97       	sbiw	r26, 0x05	; 5
 880:	16 96       	adiw	r26, 0x06	; 6
 882:	1c 92       	st	X, r1
 884:	16 97       	sbiw	r26, 0x06	; 6
 886:	17 96       	adiw	r26, 0x07	; 7
 888:	1c 92       	st	X, r1
 88a:	48 e0       	ldi	r20, 0x08	; 8
 88c:	b8 01       	movw	r22, r16
 88e:	83 e0       	ldi	r24, 0x03	; 3
 890:	0e 94 48 24 	call	0x4890	; 0x4890 <CANSendMessage>
 894:	88 23       	and	r24, r24
 896:	41 f0       	breq	.+16     	; 0x8a8 <__EEPROM_REGION_LENGTH__+0xa8>
 898:	81 e0       	ldi	r24, 0x01	; 1
 89a:	07 c0       	rjmp	.+14     	; 0x8aa <__EEPROM_REGION_LENGTH__+0xaa>
 89c:	80 e0       	ldi	r24, 0x00	; 0
 89e:	05 c0       	rjmp	.+10     	; 0x8aa <__EEPROM_REGION_LENGTH__+0xaa>
 8a0:	80 e0       	ldi	r24, 0x00	; 0
 8a2:	03 c0       	rjmp	.+6      	; 0x8aa <__EEPROM_REGION_LENGTH__+0xaa>
 8a4:	81 e0       	ldi	r24, 0x01	; 1
 8a6:	01 c0       	rjmp	.+2      	; 0x8aa <__EEPROM_REGION_LENGTH__+0xaa>
 8a8:	80 e0       	ldi	r24, 0x00	; 0
 8aa:	88 23       	and	r24, r24
 8ac:	71 f0       	breq	.+28     	; 0x8ca <__EEPROM_REGION_LENGTH__+0xca>
 8ae:	80 91 65 07 	lds	r24, 0x0765	; 0x800765 <sg_u8ControllerStatusMsgCount>
 8b2:	8f 5f       	subi	r24, 0xFF	; 255
 8b4:	80 93 65 07 	sts	0x0765, r24	; 0x800765 <sg_u8ControllerStatusMsgCount>
 8b8:	83 30       	cpi	r24, 0x03	; 3
 8ba:	38 f0       	brcs	.+14     	; 0x8ca <__EEPROM_REGION_LENGTH__+0xca>
 8bc:	10 92 65 07 	sts	0x0765, r1	; 0x800765 <sg_u8ControllerStatusMsgCount>
 8c0:	10 92 16 03 	sts	0x0316, r1	; 0x800316 <sg_bSendModuleControllerStatus>
 8c4:	81 e0       	ldi	r24, 0x01	; 1
 8c6:	80 93 13 03 	sts	0x0313, r24	; 0x800313 <sg_bSendCellCommStatus>
 8ca:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <sg_bSendCellStatus>
 8ce:	88 23       	and	r24, r24
 8d0:	09 f4       	brne	.+2      	; 0x8d4 <__EEPROM_REGION_LENGTH__+0xd4>
 8d2:	6e c0       	rjmp	.+220    	; 0x9b0 <__EEPROM_REGION_LENGTH__+0x1b0>
 8d4:	1c 82       	std	Y+4, r1	; 0x04
 8d6:	1b 82       	std	Y+3, r1	; 0x03
 8d8:	1a 82       	std	Y+2, r1	; 0x02
 8da:	19 82       	std	Y+1, r1	; 0x01
 8dc:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <sg_sFrame+0x29>
 8e0:	80 91 1b 03 	lds	r24, 0x031B	; 0x80031b <sg_u8CellStatus>
 8e4:	89 17       	cp	r24, r25
 8e6:	08 f0       	brcs	.+2      	; 0x8ea <__EEPROM_REGION_LENGTH__+0xea>
 8e8:	5d c0       	rjmp	.+186    	; 0x9a4 <__EEPROM_REGION_LENGTH__+0x1a4>
 8ea:	80 91 1b 03 	lds	r24, 0x031B	; 0x80031b <sg_u8CellStatus>
 8ee:	90 e0       	ldi	r25, 0x00	; 0
 8f0:	44 96       	adiw	r24, 0x14	; 20
 8f2:	88 0f       	add	r24, r24
 8f4:	99 1f       	adc	r25, r25
 8f6:	88 0f       	add	r24, r24
 8f8:	99 1f       	adc	r25, r25
 8fa:	ae 01       	movw	r20, r28
 8fc:	4f 5f       	subi	r20, 0xFF	; 255
 8fe:	5f 4f       	sbci	r21, 0xFF	; 255
 900:	be 01       	movw	r22, r28
 902:	6d 5f       	subi	r22, 0xFD	; 253
 904:	7f 4f       	sbci	r23, 0xFF	; 255
 906:	84 5f       	subi	r24, 0xF4	; 244
 908:	9e 4f       	sbci	r25, 0xFE	; 254
 90a:	0e 94 ec 21 	call	0x43d8	; 0x43d8 <CellDataConvert>
 90e:	80 91 1b 03 	lds	r24, 0x031B	; 0x80031b <sg_u8CellStatus>
 912:	f8 01       	movw	r30, r16
 914:	80 83       	st	Z, r24
 916:	ec e0       	ldi	r30, 0x0C	; 12
 918:	f1 e0       	ldi	r31, 0x01	; 1
 91a:	81 89       	ldd	r24, Z+17	; 0x11
 91c:	d8 01       	movw	r26, r16
 91e:	11 96       	adiw	r26, 0x01	; 1
 920:	8c 93       	st	X, r24
 922:	11 97       	sbiw	r26, 0x01	; 1
 924:	99 81       	ldd	r25, Y+1	; 0x01
 926:	8a 81       	ldd	r24, Y+2	; 0x02
 928:	12 96       	adiw	r26, 0x02	; 2
 92a:	9c 93       	st	X, r25
 92c:	12 97       	sbiw	r26, 0x02	; 2
 92e:	13 96       	adiw	r26, 0x03	; 3
 930:	8c 93       	st	X, r24
 932:	13 97       	sbiw	r26, 0x03	; 3
 934:	3b 81       	ldd	r19, Y+3	; 0x03
 936:	2c 81       	ldd	r18, Y+4	; 0x04
 938:	14 96       	adiw	r26, 0x04	; 4
 93a:	3c 93       	st	X, r19
 93c:	14 97       	sbiw	r26, 0x04	; 4
 93e:	15 96       	adiw	r26, 0x05	; 5
 940:	2c 93       	st	X, r18
 942:	83 2f       	mov	r24, r19
 944:	92 2f       	mov	r25, r18
 946:	64 e0       	ldi	r22, 0x04	; 4
 948:	70 e1       	ldi	r23, 0x10	; 16
 94a:	0e 94 14 22 	call	0x4428	; 0x4428 <__udivmodhi4>
 94e:	44 e6       	ldi	r20, 0x64	; 100
 950:	64 9f       	mul	r22, r20
 952:	60 2d       	mov	r22, r0
 954:	11 24       	eor	r1, r1
 956:	d8 01       	movw	r26, r16
 958:	16 96       	adiw	r26, 0x06	; 6
 95a:	6c 93       	st	X, r22
 95c:	63 a9       	ldd	r22, Z+51	; 0x33
 95e:	74 a9       	ldd	r23, Z+52	; 0x34
 960:	85 a9       	ldd	r24, Z+53	; 0x35
 962:	96 a9       	ldd	r25, Z+54	; 0x36
 964:	68 1b       	sub	r22, r24
 966:	79 0b       	sbc	r23, r25
 968:	83 2f       	mov	r24, r19
 96a:	92 2f       	mov	r25, r18
 96c:	0e 94 14 22 	call	0x4428	; 0x4428 <__udivmodhi4>
 970:	64 9f       	mul	r22, r20
 972:	60 2d       	mov	r22, r0
 974:	11 24       	eor	r1, r1
 976:	f8 01       	movw	r30, r16
 978:	67 83       	std	Z+7, r22	; 0x07
 97a:	48 e0       	ldi	r20, 0x08	; 8
 97c:	b8 01       	movw	r22, r16
 97e:	84 e0       	ldi	r24, 0x04	; 4
 980:	0e 94 48 24 	call	0x4890	; 0x4890 <CANSendMessage>
 984:	88 23       	and	r24, r24
 986:	a1 f0       	breq	.+40     	; 0x9b0 <__EEPROM_REGION_LENGTH__+0x1b0>
 988:	80 91 1b 03 	lds	r24, 0x031B	; 0x80031b <sg_u8CellStatus>
 98c:	8f 5f       	subi	r24, 0xFF	; 255
 98e:	80 93 1b 03 	sts	0x031B, r24	; 0x80031b <sg_u8CellStatus>
 992:	90 91 1b 03 	lds	r25, 0x031B	; 0x80031b <sg_u8CellStatus>
 996:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <sg_u8CellStatusTarget>
 99a:	98 17       	cp	r25, r24
 99c:	48 f0       	brcs	.+18     	; 0x9b0 <__EEPROM_REGION_LENGTH__+0x1b0>
 99e:	10 92 15 03 	sts	0x0315, r1	; 0x800315 <sg_bSendCellStatus>
 9a2:	06 c0       	rjmp	.+12     	; 0x9b0 <__EEPROM_REGION_LENGTH__+0x1b0>
 9a4:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <sg_u8CellStatusTarget>
 9a8:	10 92 1b 03 	sts	0x031B, r1	; 0x80031b <sg_u8CellStatus>
 9ac:	10 92 15 03 	sts	0x0315, r1	; 0x800315 <sg_bSendCellStatus>
 9b0:	80 91 13 03 	lds	r24, 0x0313	; 0x800313 <sg_bSendCellCommStatus>
 9b4:	88 23       	and	r24, r24
 9b6:	89 f1       	breq	.+98     	; 0xa1a <__EEPROM_REGION_LENGTH__+0x21a>
 9b8:	ec e0       	ldi	r30, 0x0C	; 12
 9ba:	f1 e0       	ldi	r31, 0x01	; 1
 9bc:	87 85       	ldd	r24, Z+15	; 0x0f
 9be:	d8 01       	movw	r26, r16
 9c0:	8c 93       	st	X, r24
 9c2:	80 89       	ldd	r24, Z+16	; 0x10
 9c4:	11 96       	adiw	r26, 0x01	; 1
 9c6:	8c 93       	st	X, r24
 9c8:	11 97       	sbiw	r26, 0x01	; 1
 9ca:	84 a1       	ldd	r24, Z+36	; 0x24
 9cc:	95 a1       	ldd	r25, Z+37	; 0x25
 9ce:	12 96       	adiw	r26, 0x02	; 2
 9d0:	8c 93       	st	X, r24
 9d2:	12 97       	sbiw	r26, 0x02	; 2
 9d4:	84 a1       	ldd	r24, Z+36	; 0x24
 9d6:	95 a1       	ldd	r25, Z+37	; 0x25
 9d8:	13 96       	adiw	r26, 0x03	; 3
 9da:	9c 93       	st	X, r25
 9dc:	13 97       	sbiw	r26, 0x03	; 3
 9de:	82 a5       	ldd	r24, Z+42	; 0x2a
 9e0:	14 96       	adiw	r26, 0x04	; 4
 9e2:	8c 93       	st	X, r24
 9e4:	14 97       	sbiw	r26, 0x04	; 4
 9e6:	86 a1       	ldd	r24, Z+38	; 0x26
 9e8:	8f 3f       	cpi	r24, 0xFF	; 255
 9ea:	31 f0       	breq	.+12     	; 0x9f8 <__EEPROM_REGION_LENGTH__+0x1f8>
 9ec:	81 a5       	ldd	r24, Z+41	; 0x29
 9ee:	96 a1       	ldd	r25, Z+38	; 0x26
 9f0:	89 1b       	sub	r24, r25
 9f2:	15 96       	adiw	r26, 0x05	; 5
 9f4:	8c 93       	st	X, r24
 9f6:	03 c0       	rjmp	.+6      	; 0x9fe <__EEPROM_REGION_LENGTH__+0x1fe>
 9f8:	8f ef       	ldi	r24, 0xFF	; 255
 9fa:	f8 01       	movw	r30, r16
 9fc:	85 83       	std	Z+5, r24	; 0x05
 9fe:	d8 01       	movw	r26, r16
 a00:	16 96       	adiw	r26, 0x06	; 6
 a02:	1c 92       	st	X, r1
 a04:	16 97       	sbiw	r26, 0x06	; 6
 a06:	17 96       	adiw	r26, 0x07	; 7
 a08:	1c 92       	st	X, r1
 a0a:	48 e0       	ldi	r20, 0x08	; 8
 a0c:	b8 01       	movw	r22, r16
 a0e:	86 e0       	ldi	r24, 0x06	; 6
 a10:	0e 94 48 24 	call	0x4890	; 0x4890 <CANSendMessage>
 a14:	81 11       	cpse	r24, r1
 a16:	10 92 13 03 	sts	0x0313, r1	; 0x800313 <sg_bSendCellCommStatus>
 a1a:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <sg_bSendHardwareDetail>
 a1e:	88 23       	and	r24, r24
 a20:	91 f0       	breq	.+36     	; 0xa46 <__EEPROM_REGION_LENGTH__+0x246>
 a22:	b8 01       	movw	r22, r16
 a24:	c8 01       	movw	r24, r16
 a26:	02 96       	adiw	r24, 0x02	; 2
 a28:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <CurrentThresholdsGet>
 a2c:	f8 01       	movw	r30, r16
 a2e:	14 82       	std	Z+4, r1	; 0x04
 a30:	15 82       	std	Z+5, r1	; 0x05
 a32:	16 82       	std	Z+6, r1	; 0x06
 a34:	17 82       	std	Z+7, r1	; 0x07
 a36:	48 e0       	ldi	r20, 0x08	; 8
 a38:	b8 01       	movw	r22, r16
 a3a:	85 e0       	ldi	r24, 0x05	; 5
 a3c:	0e 94 48 24 	call	0x4890	; 0x4890 <CANSendMessage>
 a40:	81 11       	cpse	r24, r1
 a42:	10 92 14 03 	sts	0x0314, r1	; 0x800314 <sg_bSendHardwareDetail>
 a46:	0f 90       	pop	r0
 a48:	0f 90       	pop	r0
 a4a:	0f 90       	pop	r0
 a4c:	0f 90       	pop	r0
 a4e:	df 91       	pop	r29
 a50:	cf 91       	pop	r28
 a52:	1f 91       	pop	r17
 a54:	0f 91       	pop	r16
 a56:	ff 90       	pop	r15
 a58:	ef 90       	pop	r14
 a5a:	df 90       	pop	r13
 a5c:	cf 90       	pop	r12
 a5e:	08 95       	ret

Disassembly of section .text.CellStringProcess:

00000a60 <CellStringProcess>:
 a60:	3f 92       	push	r3
 a62:	4f 92       	push	r4
 a64:	5f 92       	push	r5
 a66:	6f 92       	push	r6
 a68:	7f 92       	push	r7
 a6a:	8f 92       	push	r8
 a6c:	9f 92       	push	r9
 a6e:	af 92       	push	r10
 a70:	bf 92       	push	r11
 a72:	cf 92       	push	r12
 a74:	df 92       	push	r13
 a76:	ef 92       	push	r14
 a78:	ff 92       	push	r15
 a7a:	0f 93       	push	r16
 a7c:	1f 93       	push	r17
 a7e:	cf 93       	push	r28
 a80:	df 93       	push	r29
 a82:	00 d0       	rcall	.+0      	; 0xa84 <CellStringProcess+0x24>
 a84:	00 d0       	rcall	.+0      	; 0xa86 <CellStringProcess+0x26>
 a86:	00 d0       	rcall	.+0      	; 0xa88 <CellStringProcess+0x28>
 a88:	cd b7       	in	r28, 0x3d	; 61
 a8a:	de b7       	in	r29, 0x3e	; 62
 a8c:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <sg_sFrame+0x27>
 a90:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <sg_sFrame+0x28>
 a94:	89 2b       	or	r24, r25
 a96:	09 f4       	brne	.+2      	; 0xa9a <CellStringProcess+0x3a>
 a98:	1e c1       	rjmp	.+572    	; 0xcd6 <CellStringProcess+0x276>
 a9a:	ec e0       	ldi	r30, 0x0C	; 12
 a9c:	f1 e0       	ldi	r31, 0x01	; 1
 a9e:	8f ef       	ldi	r24, 0xFF	; 255
 aa0:	86 a3       	std	Z+38, r24	; 0x26
 aa2:	97 85       	ldd	r25, Z+15	; 0x0f
 aa4:	81 a5       	ldd	r24, Z+41	; 0x29
 aa6:	89 17       	cp	r24, r25
 aa8:	28 f4       	brcc	.+10     	; 0xab4 <CellStringProcess+0x54>
 aaa:	81 a5       	ldd	r24, Z+41	; 0x29
 aac:	87 87       	std	Z+15, r24	; 0x0f
 aae:	81 e0       	ldi	r24, 0x01	; 1
 ab0:	80 93 13 03 	sts	0x0313, r24	; 0x800313 <sg_bSendCellCommStatus>
 ab4:	ec e0       	ldi	r30, 0x0C	; 12
 ab6:	f1 e0       	ldi	r31, 0x01	; 1
 ab8:	90 89       	ldd	r25, Z+16	; 0x10
 aba:	81 a5       	ldd	r24, Z+41	; 0x29
 abc:	98 17       	cp	r25, r24
 abe:	28 f4       	brcc	.+10     	; 0xaca <CellStringProcess+0x6a>
 ac0:	81 a5       	ldd	r24, Z+41	; 0x29
 ac2:	80 8b       	std	Z+16, r24	; 0x10
 ac4:	81 e0       	ldi	r24, 0x01	; 1
 ac6:	80 93 13 03 	sts	0x0313, r24	; 0x800313 <sg_bSendCellCommStatus>
 aca:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <sg_sFrame+0x27>
 ace:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <sg_sFrame+0x28>
 ad2:	83 70       	andi	r24, 0x03	; 3
 ad4:	99 27       	eor	r25, r25
 ad6:	89 2b       	or	r24, r25
 ad8:	61 f0       	breq	.+24     	; 0xaf2 <CellStringProcess+0x92>
 ada:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <sg_sFrame+0x2a>
 ade:	8f 3f       	cpi	r24, 0xFF	; 255
 ae0:	41 f0       	breq	.+16     	; 0xaf2 <CellStringProcess+0x92>
 ae2:	ec e0       	ldi	r30, 0x0C	; 12
 ae4:	f1 e0       	ldi	r31, 0x01	; 1
 ae6:	82 a5       	ldd	r24, Z+42	; 0x2a
 ae8:	8f 5f       	subi	r24, 0xFF	; 255
 aea:	82 a7       	std	Z+42, r24	; 0x2a
 aec:	81 e0       	ldi	r24, 0x01	; 1
 aee:	80 93 13 03 	sts	0x0313, r24	; 0x800313 <sg_bSendCellCommStatus>
 af2:	ec e0       	ldi	r30, 0x0C	; 12
 af4:	f1 e0       	ldi	r31, 0x01	; 1
 af6:	14 aa       	std	Z+52, r1	; 0x34
 af8:	13 aa       	std	Z+51, r1	; 0x33
 afa:	8f ef       	ldi	r24, 0xFF	; 255
 afc:	9f ef       	ldi	r25, 0xFF	; 255
 afe:	96 ab       	std	Z+54, r25	; 0x36
 b00:	85 ab       	std	Z+53, r24	; 0x35
 b02:	10 ae       	std	Z+56, r1	; 0x38
 b04:	17 aa       	std	Z+55, r1	; 0x37
 b06:	80 e0       	ldi	r24, 0x00	; 0
 b08:	90 e8       	ldi	r25, 0x80	; 128
 b0a:	96 a7       	std	Z+46, r25	; 0x2e
 b0c:	85 a7       	std	Z+45, r24	; 0x2d
 b0e:	8f ef       	ldi	r24, 0xFF	; 255
 b10:	9f e7       	ldi	r25, 0x7F	; 127
 b12:	90 ab       	std	Z+48, r25	; 0x30
 b14:	87 a7       	std	Z+47, r24	; 0x2f
 b16:	12 aa       	std	Z+50, r1	; 0x32
 b18:	11 aa       	std	Z+49, r1	; 0x31
 b1a:	d1 2c       	mov	r13, r1
 b1c:	31 2c       	mov	r3, r1
 b1e:	c1 2c       	mov	r12, r1
 b20:	41 2c       	mov	r4, r1
 b22:	51 2c       	mov	r5, r1
 b24:	32 01       	movw	r6, r4
 b26:	81 2c       	mov	r8, r1
 b28:	91 2c       	mov	r9, r1
 b2a:	54 01       	movw	r10, r8
 b2c:	2f ef       	ldi	r18, 0xFF	; 255
 b2e:	3f e7       	ldi	r19, 0x7F	; 127
 b30:	3e 83       	std	Y+6, r19	; 0x06
 b32:	2d 83       	std	Y+5, r18	; 0x05
 b34:	80 e0       	ldi	r24, 0x00	; 0
 b36:	90 e8       	ldi	r25, 0x80	; 128
 b38:	9c 83       	std	Y+4, r25	; 0x04
 b3a:	8b 83       	std	Y+3, r24	; 0x03
 b3c:	6b c0       	rjmp	.+214    	; 0xc14 <CellStringProcess+0x1b4>
 b3e:	0d 2d       	mov	r16, r13
 b40:	10 e0       	ldi	r17, 0x00	; 0
 b42:	f8 01       	movw	r30, r16
 b44:	74 96       	adiw	r30, 0x14	; 20
 b46:	ee 0f       	add	r30, r30
 b48:	ff 1f       	adc	r31, r31
 b4a:	ee 0f       	add	r30, r30
 b4c:	ff 1f       	adc	r31, r31
 b4e:	e4 5f       	subi	r30, 0xF4	; 244
 b50:	fe 4f       	sbci	r31, 0xFE	; 254
 b52:	80 81       	ld	r24, Z
 b54:	91 81       	ldd	r25, Z+1	; 0x01
 b56:	9a 83       	std	Y+2, r25	; 0x02
 b58:	89 83       	std	Y+1, r24	; 0x01
 b5a:	e2 80       	ldd	r14, Z+2	; 0x02
 b5c:	f3 80       	ldd	r15, Z+3	; 0x03
 b5e:	60 e0       	ldi	r22, 0x00	; 0
 b60:	70 e0       	ldi	r23, 0x00	; 0
 b62:	c7 01       	movw	r24, r14
 b64:	0e 94 00 1c 	call	0x3800	; 0x3800 <CellDataConvertTemperature>
 b68:	88 23       	and	r24, r24
 b6a:	f1 f0       	breq	.+60     	; 0xba8 <CellStringProcess+0x148>
 b6c:	f4 fe       	sbrs	r15, 4
 b6e:	03 c0       	rjmp	.+6      	; 0xb76 <CellStringProcess+0x116>
 b70:	c7 01       	movw	r24, r14
 b72:	90 6f       	ori	r25, 0xF0	; 240
 b74:	02 c0       	rjmp	.+4      	; 0xb7a <CellStringProcess+0x11a>
 b76:	c7 01       	movw	r24, r14
 b78:	9f 77       	andi	r25, 0x7F	; 127
 b7a:	eb 81       	ldd	r30, Y+3	; 0x03
 b7c:	fc 81       	ldd	r31, Y+4	; 0x04
 b7e:	e8 17       	cp	r30, r24
 b80:	f9 07       	cpc	r31, r25
 b82:	14 f4       	brge	.+4      	; 0xb88 <CellStringProcess+0x128>
 b84:	9c 83       	std	Y+4, r25	; 0x04
 b86:	8b 83       	std	Y+3, r24	; 0x03
 b88:	2d 81       	ldd	r18, Y+5	; 0x05
 b8a:	3e 81       	ldd	r19, Y+6	; 0x06
 b8c:	82 17       	cp	r24, r18
 b8e:	93 07       	cpc	r25, r19
 b90:	14 f4       	brge	.+4      	; 0xb96 <CellStringProcess+0x136>
 b92:	9e 83       	std	Y+6, r25	; 0x06
 b94:	8d 83       	std	Y+5, r24	; 0x05
 b96:	09 2e       	mov	r0, r25
 b98:	00 0c       	add	r0, r0
 b9a:	aa 0b       	sbc	r26, r26
 b9c:	bb 0b       	sbc	r27, r27
 b9e:	88 0e       	add	r8, r24
 ba0:	99 1e       	adc	r9, r25
 ba2:	aa 1e       	adc	r10, r26
 ba4:	bb 1e       	adc	r11, r27
 ba6:	33 94       	inc	r3
 ba8:	f8 01       	movw	r30, r16
 baa:	74 96       	adiw	r30, 0x14	; 20
 bac:	ee 0f       	add	r30, r30
 bae:	ff 1f       	adc	r31, r31
 bb0:	ee 0f       	add	r30, r30
 bb2:	ff 1f       	adc	r31, r31
 bb4:	e4 5f       	subi	r30, 0xF4	; 244
 bb6:	fe 4f       	sbci	r31, 0xFE	; 254
 bb8:	80 81       	ld	r24, Z
 bba:	91 81       	ldd	r25, Z+1	; 0x01
 bbc:	99 23       	and	r25, r25
 bbe:	1c f4       	brge	.+6      	; 0xbc6 <CellStringProcess+0x166>
 bc0:	81 e0       	ldi	r24, 0x01	; 1
 bc2:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <sg_sFrame+0x23>
 bc6:	be 01       	movw	r22, r28
 bc8:	6f 5f       	subi	r22, 0xFF	; 255
 bca:	7f 4f       	sbci	r23, 0xFF	; 255
 bcc:	89 81       	ldd	r24, Y+1	; 0x01
 bce:	9a 81       	ldd	r25, Y+2	; 0x02
 bd0:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <CellDataConvertVoltage>
 bd4:	88 23       	and	r24, r24
 bd6:	e9 f0       	breq	.+58     	; 0xc12 <CellStringProcess+0x1b2>
 bd8:	20 91 3f 01 	lds	r18, 0x013F	; 0x80013f <sg_sFrame+0x33>
 bdc:	30 91 40 01 	lds	r19, 0x0140	; 0x800140 <sg_sFrame+0x34>
 be0:	89 81       	ldd	r24, Y+1	; 0x01
 be2:	9a 81       	ldd	r25, Y+2	; 0x02
 be4:	28 17       	cp	r18, r24
 be6:	39 07       	cpc	r19, r25
 be8:	20 f4       	brcc	.+8      	; 0xbf2 <CellStringProcess+0x192>
 bea:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <sg_sFrame+0x34>
 bee:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <sg_sFrame+0x33>
 bf2:	20 91 41 01 	lds	r18, 0x0141	; 0x800141 <sg_sFrame+0x35>
 bf6:	30 91 42 01 	lds	r19, 0x0142	; 0x800142 <sg_sFrame+0x36>
 bfa:	82 17       	cp	r24, r18
 bfc:	93 07       	cpc	r25, r19
 bfe:	20 f4       	brcc	.+8      	; 0xc08 <CellStringProcess+0x1a8>
 c00:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <sg_sFrame+0x36>
 c04:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <sg_sFrame+0x35>
 c08:	48 0e       	add	r4, r24
 c0a:	59 1e       	adc	r5, r25
 c0c:	61 1c       	adc	r6, r1
 c0e:	71 1c       	adc	r7, r1
 c10:	c3 94       	inc	r12
 c12:	d3 94       	inc	r13
 c14:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <sg_sFrame+0x29>
 c18:	d8 16       	cp	r13, r24
 c1a:	08 f4       	brcc	.+2      	; 0xc1e <CellStringProcess+0x1be>
 c1c:	90 cf       	rjmp	.-224    	; 0xb3e <CellStringProcess+0xde>
 c1e:	cc 20       	and	r12, r12
 c20:	79 f1       	breq	.+94     	; 0xc80 <CellStringProcess+0x220>
 c22:	0c e0       	ldi	r16, 0x0C	; 12
 c24:	11 e0       	ldi	r17, 0x01	; 1
 c26:	f8 01       	movw	r30, r16
 c28:	41 ae       	std	Z+57, r4	; 0x39
 c2a:	52 ae       	std	Z+58, r5	; 0x3a
 c2c:	63 ae       	std	Z+59, r6	; 0x3b
 c2e:	74 ae       	std	Z+60, r7	; 0x3c
 c30:	61 ad       	ldd	r22, Z+57	; 0x39
 c32:	72 ad       	ldd	r23, Z+58	; 0x3a
 c34:	83 ad       	ldd	r24, Z+59	; 0x3b
 c36:	94 ad       	ldd	r25, Z+60	; 0x3c
 c38:	2c 2d       	mov	r18, r12
 c3a:	30 e0       	ldi	r19, 0x00	; 0
 c3c:	40 e0       	ldi	r20, 0x00	; 0
 c3e:	50 e0       	ldi	r21, 0x00	; 0
 c40:	0e 94 a0 1f 	call	0x3f40	; 0x3f40 <__udivmodsi4>
 c44:	f8 01       	movw	r30, r16
 c46:	30 af       	std	Z+56, r19	; 0x38
 c48:	27 ab       	std	Z+55, r18	; 0x37
 c4a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <sg_eModuleControllerStateCurrent>
 c4e:	83 30       	cpi	r24, 0x03	; 3
 c50:	b9 f0       	breq	.+46     	; 0xc80 <CellStringProcess+0x220>
 c52:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <sg_bCellBalancedOnce>
 c56:	81 11       	cpse	r24, r1
 c58:	13 c0       	rjmp	.+38     	; 0xc80 <CellStringProcess+0x220>
 c5a:	23 a9       	ldd	r18, Z+51	; 0x33
 c5c:	34 a9       	ldd	r19, Z+52	; 0x34
 c5e:	85 a9       	ldd	r24, Z+53	; 0x35
 c60:	96 a9       	ldd	r25, Z+54	; 0x36
 c62:	28 17       	cp	r18, r24
 c64:	39 07       	cpc	r19, r25
 c66:	60 f0       	brcs	.+24     	; 0xc80 <CellStringProcess+0x220>
 c68:	83 a9       	ldd	r24, Z+51	; 0x33
 c6a:	94 a9       	ldd	r25, Z+52	; 0x34
 c6c:	25 a9       	ldd	r18, Z+53	; 0x35
 c6e:	36 a9       	ldd	r19, Z+54	; 0x36
 c70:	82 1b       	sub	r24, r18
 c72:	93 0b       	sbc	r25, r19
 c74:	80 34       	cpi	r24, 0x40	; 64
 c76:	91 05       	cpc	r25, r1
 c78:	18 f0       	brcs	.+6      	; 0xc80 <CellStringProcess+0x220>
 c7a:	81 e0       	ldi	r24, 0x01	; 1
 c7c:	80 93 12 03 	sts	0x0312, r24	; 0x800312 <sg_bCellBalanceReady>
 c80:	33 20       	and	r3, r3
 c82:	c9 f0       	breq	.+50     	; 0xcb6 <CellStringProcess+0x256>
 c84:	23 2d       	mov	r18, r3
 c86:	30 e0       	ldi	r19, 0x00	; 0
 c88:	40 e0       	ldi	r20, 0x00	; 0
 c8a:	50 e0       	ldi	r21, 0x00	; 0
 c8c:	c5 01       	movw	r24, r10
 c8e:	b4 01       	movw	r22, r8
 c90:	0e 94 3e 21 	call	0x427c	; 0x427c <__divmodsi4>
 c94:	6d e3       	ldi	r22, 0x3D	; 61
 c96:	71 e0       	ldi	r23, 0x01	; 1
 c98:	c9 01       	movw	r24, r18
 c9a:	0e 94 00 1c 	call	0x3800	; 0x3800 <CellDataConvertTemperature>
 c9e:	69 e3       	ldi	r22, 0x39	; 57
 ca0:	71 e0       	ldi	r23, 0x01	; 1
 ca2:	8b 81       	ldd	r24, Y+3	; 0x03
 ca4:	9c 81       	ldd	r25, Y+4	; 0x04
 ca6:	0e 94 00 1c 	call	0x3800	; 0x3800 <CellDataConvertTemperature>
 caa:	6b e3       	ldi	r22, 0x3B	; 59
 cac:	71 e0       	ldi	r23, 0x01	; 1
 cae:	8d 81       	ldd	r24, Y+5	; 0x05
 cb0:	9e 81       	ldd	r25, Y+6	; 0x06
 cb2:	0e 94 00 1c 	call	0x3800	; 0x3800 <CellDataConvertTemperature>
 cb6:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_bSDCardReady>
 cba:	88 23       	and	r24, r24
 cbc:	51 f0       	breq	.+20     	; 0xcd2 <CellStringProcess+0x272>
 cbe:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <sg_eModuleControllerStateCurrent>
 cc2:	88 23       	and	r24, r24
 cc4:	31 f0       	breq	.+12     	; 0xcd2 <CellStringProcess+0x272>
 cc6:	8c e0       	ldi	r24, 0x0C	; 12
 cc8:	91 e0       	ldi	r25, 0x01	; 1
 cca:	0e 94 63 12 	call	0x24c6	; 0x24c6 <STORE_WriteFrame>
 cce:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <sg_bSDCardReady>
 cd2:	0e 94 fa 24 	call	0x49f4	; 0x49f4 <SendModuleControllerStatus>
 cd6:	26 96       	adiw	r28, 0x06	; 6
 cd8:	0f b6       	in	r0, 0x3f	; 63
 cda:	f8 94       	cli
 cdc:	de bf       	out	0x3e, r29	; 62
 cde:	0f be       	out	0x3f, r0	; 63
 ce0:	cd bf       	out	0x3d, r28	; 61
 ce2:	df 91       	pop	r29
 ce4:	cf 91       	pop	r28
 ce6:	1f 91       	pop	r17
 ce8:	0f 91       	pop	r16
 cea:	ff 90       	pop	r15
 cec:	ef 90       	pop	r14
 cee:	df 90       	pop	r13
 cf0:	cf 90       	pop	r12
 cf2:	bf 90       	pop	r11
 cf4:	af 90       	pop	r10
 cf6:	9f 90       	pop	r9
 cf8:	8f 90       	pop	r8
 cfa:	7f 90       	pop	r7
 cfc:	6f 90       	pop	r6
 cfe:	5f 90       	pop	r5
 d00:	4f 90       	pop	r4
 d02:	3f 90       	pop	r3
 d04:	08 95       	ret

Disassembly of section .text.Delay:

00003d6e <Delay>:
    3d6e:	ab 01       	movw	r20, r22
    3d70:	bc 01       	movw	r22, r24
    3d72:	4f 5f       	subi	r20, 0xFF	; 255
    3d74:	5f 4f       	sbci	r21, 0xFF	; 255
    3d76:	6f 4f       	sbci	r22, 0xFF	; 255
    3d78:	7f 4f       	sbci	r23, 0xFF	; 255
    3d7a:	76 95       	lsr	r23
    3d7c:	67 95       	ror	r22
    3d7e:	57 95       	ror	r21
    3d80:	47 95       	ror	r20
    3d82:	96 b5       	in	r25, 0x26	; 38
    3d84:	17 c0       	rjmp	.+46     	; 0x3db4 <Delay+0x46>
    3d86:	86 b5       	in	r24, 0x26	; 38
    3d88:	98 17       	cp	r25, r24
    3d8a:	e9 f3       	breq	.-6      	; 0x3d86 <Delay+0x18>
    3d8c:	26 b5       	in	r18, 0x26	; 38
    3d8e:	82 2f       	mov	r24, r18
    3d90:	89 1b       	sub	r24, r25
    3d92:	90 e0       	ldi	r25, 0x00	; 0
    3d94:	a0 e0       	ldi	r26, 0x00	; 0
    3d96:	b0 e0       	ldi	r27, 0x00	; 0
    3d98:	48 17       	cp	r20, r24
    3d9a:	59 07       	cpc	r21, r25
    3d9c:	6a 07       	cpc	r22, r26
    3d9e:	7b 07       	cpc	r23, r27
    3da0:	28 f0       	brcs	.+10     	; 0x3dac <Delay+0x3e>
    3da2:	48 1b       	sub	r20, r24
    3da4:	59 0b       	sbc	r21, r25
    3da6:	6a 0b       	sbc	r22, r26
    3da8:	7b 0b       	sbc	r23, r27
    3daa:	03 c0       	rjmp	.+6      	; 0x3db2 <Delay+0x44>
    3dac:	40 e0       	ldi	r20, 0x00	; 0
    3dae:	50 e0       	ldi	r21, 0x00	; 0
    3db0:	ba 01       	movw	r22, r20
    3db2:	92 2f       	mov	r25, r18
    3db4:	41 15       	cp	r20, r1
    3db6:	51 05       	cpc	r21, r1
    3db8:	61 05       	cpc	r22, r1
    3dba:	71 05       	cpc	r23, r1
    3dbc:	21 f7       	brne	.-56     	; 0x3d86 <Delay+0x18>
    3dbe:	08 95       	ret

Disassembly of section .text.PlatformAssert:

00004302 <PlatformAssert>:



void PlatformAssert( const char* peFilename, const int s32LineNumber )
{
	DebugOut("Assert %s: %d\n", peFilename, s32LineNumber);
    4302:	5f 93       	push	r21
    4304:	4f 93       	push	r20
    4306:	8f 93       	push	r24
    4308:	7f 93       	push	r23
    430a:	6f 93       	push	r22
    430c:	8f e4       	ldi	r24, 0x4F	; 79
    430e:	91 e0       	ldi	r25, 0x01	; 1
    4310:	a0 e0       	ldi	r26, 0x00	; 0
    4312:	af 93       	push	r26
    4314:	9f 93       	push	r25
    4316:	8f 93       	push	r24
    4318:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <DebugOut>
	
//	while(1);
}
    431c:	8d b7       	in	r24, 0x3d	; 61
    431e:	9e b7       	in	r25, 0x3e	; 62
    4320:	08 96       	adiw	r24, 0x08	; 8
    4322:	0f b6       	in	r0, 0x3f	; 63
    4324:	f8 94       	cli
    4326:	9e bf       	out	0x3e, r25	; 62
    4328:	0f be       	out	0x3f, r0	; 63
    432a:	8d bf       	out	0x3d, r24	; 61
    432c:	08 95       	ret

Disassembly of section .text.ModuleControllerStateHandle:

000015ce <ModuleControllerStateHandle>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    15ce:	1f 93       	push	r17
    15d0:	cf 93       	push	r28
    15d2:	df 93       	push	r29
    15d4:	d0 91 05 01 	lds	r29, 0x0105	; 0x800105 <sg_eModuleControllerStateTarget>
    15d8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <sg_eModuleControllerStateMax>
    15dc:	8d 17       	cp	r24, r29
    15de:	30 f0       	brcs	.+12     	; 0x15ec <ModuleControllerStateHandle+0x1e>
    15e0:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <sg_eModuleControllerStateCurrent>
    15e4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <sg_eModuleControllerStateMax>
    15e8:	89 17       	cp	r24, r25
    15ea:	10 f4       	brcc	.+4      	; 0x15f0 <ModuleControllerStateHandle+0x22>
    15ec:	d0 91 04 01 	lds	r29, 0x0104	; 0x800104 <sg_eModuleControllerStateMax>
    15f0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <sg_eModuleControllerStateCurrent>
    15f4:	d8 17       	cp	r29, r24
    15f6:	09 f4       	brne	.+2      	; 0x15fa <ModuleControllerStateHandle+0x2c>
    15f8:	e1 c0       	rjmp	.+450    	; 0x17bc <ModuleControllerStateHandle+0x1ee>
    15fa:	d2 30       	cpi	r29, 0x02	; 2
    15fc:	09 f4       	brne	.+2      	; 0x1600 <ModuleControllerStateHandle+0x32>
    15fe:	6e c0       	rjmp	.+220    	; 0x16dc <ModuleControllerStateHandle+0x10e>
    1600:	28 f4       	brcc	.+10     	; 0x160c <ModuleControllerStateHandle+0x3e>
    1602:	dd 23       	and	r29, r29
    1604:	89 f0       	breq	.+34     	; 0x1628 <ModuleControllerStateHandle+0x5a>
    1606:	d1 30       	cpi	r29, 0x01	; 1
    1608:	e1 f1       	breq	.+120    	; 0x1682 <ModuleControllerStateHandle+0xb4>
    160a:	cc c0       	rjmp	.+408    	; 0x17a4 <ModuleControllerStateHandle+0x1d6>
    160c:	d3 30       	cpi	r29, 0x03	; 3
    160e:	09 f4       	brne	.+2      	; 0x1612 <ModuleControllerStateHandle+0x44>
    1610:	9d c0       	rjmp	.+314    	; 0x174c <ModuleControllerStateHandle+0x17e>
    1612:	d5 30       	cpi	r29, 0x05	; 5
    1614:	09 f0       	breq	.+2      	; 0x1618 <ModuleControllerStateHandle+0x4a>
    1616:	c6 c0       	rjmp	.+396    	; 0x17a4 <ModuleControllerStateHandle+0x1d6>
    1618:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <sg_eModuleControllerStateCurrent>
    161c:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <sg_eModuleControllerStateTarget>
    1620:	d0 91 06 01 	lds	r29, 0x0106	; 0x800106 <sg_eModuleControllerStateCurrent>
    1624:	0e 94 f4 24 	call	0x49e8	; 0x49e8 <ADCSetPowerOn>
    1628:	88 b1       	in	r24, 0x08	; 8
    162a:	8f 7e       	andi	r24, 0xEF	; 239
    162c:	88 b9       	out	0x08, r24	; 8
    162e:	68 e8       	ldi	r22, 0x88	; 136
    1630:	73 e1       	ldi	r23, 0x13	; 19
    1632:	80 e0       	ldi	r24, 0x00	; 0
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <Delay>
    163a:	8e b1       	in	r24, 0x0e	; 14
    163c:	8d 7f       	andi	r24, 0xFD	; 253
    163e:	8e b9       	out	0x0e, r24	; 14
    1640:	68 e8       	ldi	r22, 0x88	; 136
    1642:	73 e1       	ldi	r23, 0x13	; 19
    1644:	80 e0       	ldi	r24, 0x00	; 0
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <Delay>
    164c:	eb e6       	ldi	r30, 0x6B	; 107
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	80 81       	ld	r24, Z
    1652:	8d 7f       	andi	r24, 0xFD	; 253
    1654:	80 83       	st	Z, r24
    1656:	e8 e6       	ldi	r30, 0x68	; 104
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	80 81       	ld	r24, Z
    165c:	8d 7f       	andi	r24, 0xFD	; 253
    165e:	80 83       	st	Z, r24
    1660:	81 e0       	ldi	r24, 0x01	; 1
    1662:	80 93 12 03 	sts	0x0312, r24	; 0x800312 <sg_bCellBalanceReady>
    1666:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <sg_bCellBalancedOnce>
    166a:	10 92 10 03 	sts	0x0310, r1	; 0x800310 <sg_bStopDischarge>
    166e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_bSDCardReady>
    1672:	88 23       	and	r24, r24
    1674:	09 f4       	brne	.+2      	; 0x1678 <ModuleControllerStateHandle+0xaa>
    1676:	9e c0       	rjmp	.+316    	; 0x17b4 <ModuleControllerStateHandle+0x1e6>
    1678:	0e 94 ad 21 	call	0x435a	; 0x435a <STORE_EndSession>
    167c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <sg_bSDCardReady>
    1680:	99 c0       	rjmp	.+306    	; 0x17b4 <ModuleControllerStateHandle+0x1e6>
    1682:	88 b1       	in	r24, 0x08	; 8
    1684:	8f 7e       	andi	r24, 0xEF	; 239
    1686:	88 b9       	out	0x08, r24	; 8
    1688:	68 e8       	ldi	r22, 0x88	; 136
    168a:	73 e1       	ldi	r23, 0x13	; 19
    168c:	80 e0       	ldi	r24, 0x00	; 0
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <Delay>
    1694:	eb e6       	ldi	r30, 0x6B	; 107
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	80 81       	ld	r24, Z
    169a:	8d 7f       	andi	r24, 0xFD	; 253
    169c:	80 83       	st	Z, r24
    169e:	e8 e6       	ldi	r30, 0x68	; 104
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	80 81       	ld	r24, Z
    16a4:	8d 7f       	andi	r24, 0xFD	; 253
    16a6:	80 83       	st	Z, r24
    16a8:	8e b1       	in	r24, 0x0e	; 14
    16aa:	82 60       	ori	r24, 0x02	; 2
    16ac:	8e b9       	out	0x0e, r24	; 14
    16ae:	68 e8       	ldi	r22, 0x88	; 136
    16b0:	73 e1       	ldi	r23, 0x13	; 19
    16b2:	80 e0       	ldi	r24, 0x00	; 0
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <Delay>
    16ba:	81 e0       	ldi	r24, 0x01	; 1
    16bc:	80 93 12 03 	sts	0x0312, r24	; 0x800312 <sg_bCellBalanceReady>
    16c0:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <sg_bCellBalancedOnce>
    16c4:	10 92 10 03 	sts	0x0310, r1	; 0x800310 <sg_bStopDischarge>
    16c8:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_bSDCardReady>
    16cc:	88 23       	and	r24, r24
    16ce:	09 f4       	brne	.+2      	; 0x16d2 <ModuleControllerStateHandle+0x104>
    16d0:	71 c0       	rjmp	.+226    	; 0x17b4 <ModuleControllerStateHandle+0x1e6>
    16d2:	0e 94 3a 20 	call	0x4074	; 0x4074 <STORE_StartNewSession>
    16d6:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <sg_bSDCardReady>
    16da:	6c c0       	rjmp	.+216    	; 0x17b4 <ModuleControllerStateHandle+0x1e6>
    16dc:	61 99       	sbic	0x0c, 1	; 12
    16de:	09 c0       	rjmp	.+18     	; 0x16f2 <ModuleControllerStateHandle+0x124>
    16e0:	8e b1       	in	r24, 0x0e	; 14
    16e2:	82 60       	ori	r24, 0x02	; 2
    16e4:	8e b9       	out	0x0e, r24	; 14
    16e6:	68 e8       	ldi	r22, 0x88	; 136
    16e8:	73 e1       	ldi	r23, 0x13	; 19
    16ea:	80 e0       	ldi	r24, 0x00	; 0
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <Delay>
    16f2:	cb e0       	ldi	r28, 0x0B	; 11
    16f4:	26 c0       	rjmp	.+76     	; 0x1742 <ModuleControllerStateHandle+0x174>
    16f6:	88 b1       	in	r24, 0x08	; 8
    16f8:	80 61       	ori	r24, 0x10	; 16
    16fa:	88 b9       	out	0x08, r24	; 8
    16fc:	88 b1       	in	r24, 0x08	; 8
    16fe:	8f 77       	andi	r24, 0x7F	; 127
    1700:	88 b9       	out	0x08, r24	; 8
    1702:	88 b1       	in	r24, 0x08	; 8
    1704:	80 68       	ori	r24, 0x80	; 128
    1706:	88 b9       	out	0x08, r24	; 8
    1708:	68 ee       	ldi	r22, 0xE8	; 232
    170a:	73 e0       	ldi	r23, 0x03	; 3
    170c:	80 e0       	ldi	r24, 0x00	; 0
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <Delay>
    1714:	88 b1       	in	r24, 0x08	; 8
    1716:	8f 7e       	andi	r24, 0xEF	; 239
    1718:	88 b9       	out	0x08, r24	; 8
    171a:	68 e8       	ldi	r22, 0x88	; 136
    171c:	73 e1       	ldi	r23, 0x13	; 19
    171e:	80 e0       	ldi	r24, 0x00	; 0
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <Delay>
    1726:	60 e5       	ldi	r22, 0x50	; 80
    1728:	73 ec       	ldi	r23, 0xC3	; 195
    172a:	80 e0       	ldi	r24, 0x00	; 0
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <Delay>
    1732:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <sg_bOvercurrentSignal>
    1736:	88 23       	and	r24, r24
    1738:	19 f0       	breq	.+6      	; 0x1740 <ModuleControllerStateHandle+0x172>
    173a:	10 92 0f 03 	sts	0x030F, r1	; 0x80030f <sg_bOvercurrentSignal>
    173e:	01 c0       	rjmp	.+2      	; 0x1742 <ModuleControllerStateHandle+0x174>
    1740:	c1 2f       	mov	r28, r17
    1742:	1f ef       	ldi	r17, 0xFF	; 255
    1744:	1c 0f       	add	r17, r28
    1746:	c1 11       	cpse	r28, r1
    1748:	d6 cf       	rjmp	.-84     	; 0x16f6 <ModuleControllerStateHandle+0x128>
    174a:	34 c0       	rjmp	.+104    	; 0x17b4 <ModuleControllerStateHandle+0x1e6>
    174c:	61 99       	sbic	0x0c, 1	; 12
    174e:	09 c0       	rjmp	.+18     	; 0x1762 <ModuleControllerStateHandle+0x194>
    1750:	8e b1       	in	r24, 0x0e	; 14
    1752:	82 60       	ori	r24, 0x02	; 2
    1754:	8e b9       	out	0x0e, r24	; 14
    1756:	68 e8       	ldi	r22, 0x88	; 136
    1758:	73 e1       	ldi	r23, 0x13	; 19
    175a:	80 e0       	ldi	r24, 0x00	; 0
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <Delay>
    1762:	88 b1       	in	r24, 0x08	; 8
    1764:	80 61       	ori	r24, 0x10	; 16
    1766:	88 b9       	out	0x08, r24	; 8
    1768:	88 b1       	in	r24, 0x08	; 8
    176a:	8f 77       	andi	r24, 0x7F	; 127
    176c:	88 b9       	out	0x08, r24	; 8
    176e:	88 b1       	in	r24, 0x08	; 8
    1770:	80 68       	ori	r24, 0x80	; 128
    1772:	88 b9       	out	0x08, r24	; 8
    1774:	68 e8       	ldi	r22, 0x88	; 136
    1776:	73 e1       	ldi	r23, 0x13	; 19
    1778:	80 e0       	ldi	r24, 0x00	; 0
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <Delay>
    1780:	10 92 12 03 	sts	0x0312, r1	; 0x800312 <sg_bCellBalanceReady>
    1784:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <sg_bCellBalancedOnce>
    1788:	81 e0       	ldi	r24, 0x01	; 1
    178a:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <sg_bStopDischarge>
    178e:	eb e6       	ldi	r30, 0x6B	; 107
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	80 81       	ld	r24, Z
    1794:	82 60       	ori	r24, 0x02	; 2
    1796:	80 83       	st	Z, r24
    1798:	e8 e6       	ldi	r30, 0x68	; 104
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	80 81       	ld	r24, Z
    179e:	82 60       	ori	r24, 0x02	; 2
    17a0:	80 83       	st	Z, r24
    17a2:	08 c0       	rjmp	.+16     	; 0x17b4 <ModuleControllerStateHandle+0x1e6>
    17a4:	4a ec       	ldi	r20, 0xCA	; 202
    17a6:	53 e0       	ldi	r21, 0x03	; 3
    17a8:	6e e5       	ldi	r22, 0x5E	; 94
    17aa:	71 e0       	ldi	r23, 0x01	; 1
    17ac:	80 e0       	ldi	r24, 0x00	; 0
    17ae:	0e 94 81 21 	call	0x4302	; 0x4302 <PlatformAssert>
    17b2:	d5 e0       	ldi	r29, 0x05	; 5
    17b4:	d0 93 06 01 	sts	0x0106, r29	; 0x800106 <sg_eModuleControllerStateCurrent>
    17b8:	0e 94 fa 24 	call	0x49f4	; 0x49f4 <SendModuleControllerStatus>
    17bc:	df 91       	pop	r29
    17be:	cf 91       	pop	r28
    17c0:	1f 91       	pop	r17
    17c2:	08 95       	ret

Disassembly of section .text.PlatformGetRegistrationID:

00004a34 <PlatformGetRegistrationID>:
}

uint8_t PlatformGetRegistrationID( void )
{
	return(sg_u8ModuleRegistrationID);
}
    4a34:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <sg_u8ModuleRegistrationID>
    4a38:	08 95       	ret

Disassembly of section .text.SetSysclock:

00004a00 <SetSysclock>:

void SetSysclock( void )
{
	// First set the prescaler enable
	CLKPR = (1 << CLKPCE);
    4a00:	e1 e6       	ldi	r30, 0x61	; 97
    4a02:	f0 e0       	ldi	r31, 0x00	; 0
    4a04:	80 e8       	ldi	r24, 0x80	; 128
    4a06:	80 83       	st	Z, r24
	
	// Now set the desired prescale value
	CLKPR = SYSCLOCK_PRESCALE;
    4a08:	10 82       	st	Z, r1
    4a0a:	08 95       	ret

Disassembly of section .text.ModuleControllerGetUniqueID:

00003592 <ModuleControllerGetUniqueID>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    3592:	cf 92       	push	r12
    3594:	df 92       	push	r13
    3596:	ef 92       	push	r14
    3598:	ff 92       	push	r15
    359a:	80 e0       	ldi	r24, 0x00	; 0
    359c:	90 e0       	ldi	r25, 0x00	; 0
    359e:	0e 94 93 24 	call	0x4926	; 0x4926 <EEPROMRead>
    35a2:	c8 2e       	mov	r12, r24
    35a4:	d1 2c       	mov	r13, r1
    35a6:	e1 2c       	mov	r14, r1
    35a8:	f1 2c       	mov	r15, r1
    35aa:	81 e0       	ldi	r24, 0x01	; 1
    35ac:	90 e0       	ldi	r25, 0x00	; 0
    35ae:	0e 94 93 24 	call	0x4926	; 0x4926 <EEPROMRead>
    35b2:	90 e0       	ldi	r25, 0x00	; 0
    35b4:	a0 e0       	ldi	r26, 0x00	; 0
    35b6:	b0 e0       	ldi	r27, 0x00	; 0
    35b8:	ba 2f       	mov	r27, r26
    35ba:	a9 2f       	mov	r26, r25
    35bc:	98 2f       	mov	r25, r24
    35be:	88 27       	eor	r24, r24
    35c0:	c8 2a       	or	r12, r24
    35c2:	d9 2a       	or	r13, r25
    35c4:	ea 2a       	or	r14, r26
    35c6:	fb 2a       	or	r15, r27
    35c8:	82 e0       	ldi	r24, 0x02	; 2
    35ca:	90 e0       	ldi	r25, 0x00	; 0
    35cc:	0e 94 93 24 	call	0x4926	; 0x4926 <EEPROMRead>
    35d0:	90 e0       	ldi	r25, 0x00	; 0
    35d2:	a0 e0       	ldi	r26, 0x00	; 0
    35d4:	b0 e0       	ldi	r27, 0x00	; 0
    35d6:	dc 01       	movw	r26, r24
    35d8:	99 27       	eor	r25, r25
    35da:	88 27       	eor	r24, r24
    35dc:	c8 2a       	or	r12, r24
    35de:	d9 2a       	or	r13, r25
    35e0:	ea 2a       	or	r14, r26
    35e2:	fb 2a       	or	r15, r27
    35e4:	83 e0       	ldi	r24, 0x03	; 3
    35e6:	90 e0       	ldi	r25, 0x00	; 0
    35e8:	0e 94 93 24 	call	0x4926	; 0x4926 <EEPROMRead>
    35ec:	90 e0       	ldi	r25, 0x00	; 0
    35ee:	a0 e0       	ldi	r26, 0x00	; 0
    35f0:	b0 e0       	ldi	r27, 0x00	; 0
    35f2:	b8 2f       	mov	r27, r24
    35f4:	aa 27       	eor	r26, r26
    35f6:	99 27       	eor	r25, r25
    35f8:	88 27       	eor	r24, r24
    35fa:	bc 01       	movw	r22, r24
    35fc:	cd 01       	movw	r24, r26
    35fe:	6c 29       	or	r22, r12
    3600:	7d 29       	or	r23, r13
    3602:	8e 29       	or	r24, r14
    3604:	9f 29       	or	r25, r15
    3606:	ff 90       	pop	r15
    3608:	ef 90       	pop	r14
    360a:	df 90       	pop	r13
    360c:	cf 90       	pop	r12
    360e:	08 95       	ret

Disassembly of section .text.CANReceiveCallback:

00001df2 <CANReceiveCallback>:
    1df2:	ef 92       	push	r14
    1df4:	ff 92       	push	r15
    1df6:	0f 93       	push	r16
    1df8:	1f 93       	push	r17
    1dfa:	cf 93       	push	r28
    1dfc:	df 93       	push	r29
    1dfe:	c8 2f       	mov	r28, r24
    1e00:	8b 01       	movw	r16, r22
    1e02:	d4 2f       	mov	r29, r20
    1e04:	f0 90 19 03 	lds	r15, 0x0319	; 0x800319 <sg_bModuleRegistered>
    1e08:	89 30       	cpi	r24, 0x09	; 9
    1e0a:	41 f5       	brne	.+80     	; 0x1e5c <CANReceiveCallback+0x6a>
    1e0c:	48 30       	cpi	r20, 0x08	; 8
    1e0e:	09 f0       	breq	.+2      	; 0x1e12 <CANReceiveCallback+0x20>
    1e10:	8d c0       	rjmp	.+282    	; 0x1f2c <CANReceiveCallback+0x13a>
    1e12:	fb 01       	movw	r30, r22
    1e14:	c0 81       	ld	r28, Z
    1e16:	82 81       	ldd	r24, Z+2	; 0x02
    1e18:	82 30       	cpi	r24, 0x02	; 2
    1e1a:	09 f0       	breq	.+2      	; 0x1e1e <CANReceiveCallback+0x2c>
    1e1c:	87 c0       	rjmp	.+270    	; 0x1f2c <CANReceiveCallback+0x13a>
    1e1e:	83 81       	ldd	r24, Z+3	; 0x03
    1e20:	83 30       	cpi	r24, 0x03	; 3
    1e22:	09 f0       	breq	.+2      	; 0x1e26 <CANReceiveCallback+0x34>
    1e24:	83 c0       	rjmp	.+262    	; 0x1f2c <CANReceiveCallback+0x13a>
    1e26:	0e 94 c9 1a 	call	0x3592	; 0x3592 <ModuleControllerGetUniqueID>
    1e2a:	f8 01       	movw	r30, r16
    1e2c:	04 81       	ldd	r16, Z+4	; 0x04
    1e2e:	15 81       	ldd	r17, Z+5	; 0x05
    1e30:	26 81       	ldd	r18, Z+6	; 0x06
    1e32:	37 81       	ldd	r19, Z+7	; 0x07
    1e34:	60 17       	cp	r22, r16
    1e36:	71 07       	cpc	r23, r17
    1e38:	82 07       	cpc	r24, r18
    1e3a:	93 07       	cpc	r25, r19
    1e3c:	09 f0       	breq	.+2      	; 0x1e40 <CANReceiveCallback+0x4e>
    1e3e:	76 c0       	rjmp	.+236    	; 0x1f2c <CANReceiveCallback+0x13a>
    1e40:	10 92 69 07 	sts	0x0769, r1	; 0x800769 <sg_u8TicksSinceLastPackControllerMessage>
    1e44:	c0 93 1f 03 	sts	0x031F, r28	; 0x80031f <sg_u8ModuleRegistrationID>
    1e48:	0e 94 fa 24 	call	0x49f4	; 0x49f4 <SendModuleControllerStatus>
    1e4c:	81 e0       	ldi	r24, 0x01	; 1
    1e4e:	80 93 14 03 	sts	0x0314, r24	; 0x800314 <sg_bSendHardwareDetail>
    1e52:	80 93 19 03 	sts	0x0319, r24	; 0x800319 <sg_bModuleRegistered>
    1e56:	80 93 18 03 	sts	0x0318, r24	; 0x800318 <sg_bSendTimeRequest>
    1e5a:	68 c0       	rjmp	.+208    	; 0x1f2c <CANReceiveCallback+0x13a>
    1e5c:	fb 01       	movw	r30, r22
    1e5e:	e0 80       	ld	r14, Z
    1e60:	44 23       	and	r20, r20
    1e62:	09 f4       	brne	.+2      	; 0x1e66 <CANReceiveCallback+0x74>
    1e64:	63 c0       	rjmp	.+198    	; 0x1f2c <CANReceiveCallback+0x13a>
    1e66:	10 92 69 07 	sts	0x0769, r1	; 0x800769 <sg_u8TicksSinceLastPackControllerMessage>
    1e6a:	80 31       	cpi	r24, 0x10	; 16
    1e6c:	21 f4       	brne	.+8      	; 0x1e76 <CANReceiveCallback+0x84>
    1e6e:	81 81       	ldd	r24, Z+1	; 0x01
    1e70:	8f 70       	andi	r24, 0x0F	; 15
    1e72:	0e 94 53 24 	call	0x48a6	; 0x48a6 <ModuleControllerStateSetMax>
    1e76:	ff 20       	and	r15, r15
    1e78:	e1 f1       	breq	.+120    	; 0x1ef2 <CANReceiveCallback+0x100>
    1e7a:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <sg_u8ModuleRegistrationID>
    1e7e:	e8 12       	cpse	r14, r24
    1e80:	38 c0       	rjmp	.+112    	; 0x1ef2 <CANReceiveCallback+0x100>
    1e82:	ca 30       	cpi	r28, 0x0A	; 10
    1e84:	29 f4       	brne	.+10     	; 0x1e90 <CANReceiveCallback+0x9e>
    1e86:	d1 30       	cpi	r29, 0x01	; 1
    1e88:	a1 f5       	brne	.+104    	; 0x1ef2 <CANReceiveCallback+0x100>
    1e8a:	0e 94 fa 24 	call	0x49f4	; 0x49f4 <SendModuleControllerStatus>
    1e8e:	31 c0       	rjmp	.+98     	; 0x1ef2 <CANReceiveCallback+0x100>
    1e90:	cb 30       	cpi	r28, 0x0B	; 11
    1e92:	f1 f4       	brne	.+60     	; 0x1ed0 <CANReceiveCallback+0xde>
    1e94:	d3 30       	cpi	r29, 0x03	; 3
    1e96:	69 f5       	brne	.+90     	; 0x1ef2 <CANReceiveCallback+0x100>
    1e98:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <sg_bSendCellStatus>
    1e9c:	81 11       	cpse	r24, r1
    1e9e:	29 c0       	rjmp	.+82     	; 0x1ef2 <CANReceiveCallback+0x100>
    1ea0:	f8 01       	movw	r30, r16
    1ea2:	81 81       	ldd	r24, Z+1	; 0x01
    1ea4:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <sg_sFrame+0x11>
    1ea8:	89 17       	cp	r24, r25
    1eaa:	18 f5       	brcc	.+70     	; 0x1ef2 <CANReceiveCallback+0x100>
    1eac:	80 93 1b 03 	sts	0x031B, r24	; 0x80031b <sg_u8CellStatus>
    1eb0:	90 91 1b 03 	lds	r25, 0x031B	; 0x80031b <sg_u8CellStatus>
    1eb4:	90 93 1c 03 	sts	0x031C, r25	; 0x80031c <sg_u8CellStatusTarget>
    1eb8:	8f 3f       	cpi	r24, 0xFF	; 255
    1eba:	31 f4       	brne	.+12     	; 0x1ec8 <CANReceiveCallback+0xd6>
    1ebc:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <sg_sFrame+0x11>
    1ec0:	80 93 1c 03 	sts	0x031C, r24	; 0x80031c <sg_u8CellStatusTarget>
    1ec4:	10 92 1b 03 	sts	0x031B, r1	; 0x80031b <sg_u8CellStatus>
    1ec8:	81 e0       	ldi	r24, 0x01	; 1
    1eca:	80 93 15 03 	sts	0x0315, r24	; 0x800315 <sg_bSendCellStatus>
    1ece:	11 c0       	rjmp	.+34     	; 0x1ef2 <CANReceiveCallback+0x100>
    1ed0:	cc 30       	cpi	r28, 0x0C	; 12
    1ed2:	51 f4       	brne	.+20     	; 0x1ee8 <CANReceiveCallback+0xf6>
    1ed4:	10 92 69 07 	sts	0x0769, r1	; 0x800769 <sg_u8TicksSinceLastPackControllerMessage>
    1ed8:	d2 30       	cpi	r29, 0x02	; 2
    1eda:	59 f4       	brne	.+22     	; 0x1ef2 <CANReceiveCallback+0x100>
    1edc:	f8 01       	movw	r30, r16
    1ede:	81 81       	ldd	r24, Z+1	; 0x01
    1ee0:	8f 70       	andi	r24, 0x0F	; 15
    1ee2:	0e 94 0b 25 	call	0x4a16	; 0x4a16 <ModuleControllerStateSet>
    1ee6:	05 c0       	rjmp	.+10     	; 0x1ef2 <CANReceiveCallback+0x100>
    1ee8:	c5 30       	cpi	r28, 0x05	; 5
    1eea:	19 f4       	brne	.+6      	; 0x1ef2 <CANReceiveCallback+0x100>
    1eec:	81 e0       	ldi	r24, 0x01	; 1
    1eee:	80 93 14 03 	sts	0x0314, r24	; 0x800314 <sg_bSendHardwareDetail>
    1ef2:	cd 30       	cpi	r28, 0x0D	; 13
    1ef4:	41 f4       	brne	.+16     	; 0x1f06 <CANReceiveCallback+0x114>
    1ef6:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <sg_u8ModuleRegistrationID>
    1efa:	10 92 19 03 	sts	0x0319, r1	; 0x800319 <sg_bModuleRegistered>
    1efe:	80 e0       	ldi	r24, 0x00	; 0
    1f00:	0e 94 0b 25 	call	0x4a16	; 0x4a16 <ModuleControllerStateSet>
    1f04:	13 c0       	rjmp	.+38     	; 0x1f2c <CANReceiveCallback+0x13a>
    1f06:	ce 30       	cpi	r28, 0x0E	; 14
    1f08:	21 f4       	brne	.+8      	; 0x1f12 <CANReceiveCallback+0x120>
    1f0a:	80 e0       	ldi	r24, 0x00	; 0
    1f0c:	0e 94 0b 25 	call	0x4a16	; 0x4a16 <ModuleControllerStateSet>
    1f10:	0d c0       	rjmp	.+26     	; 0x1f2c <CANReceiveCallback+0x13a>
    1f12:	cf 30       	cpi	r28, 0x0F	; 15
    1f14:	59 f4       	brne	.+22     	; 0x1f2c <CANReceiveCallback+0x13a>
    1f16:	f8 01       	movw	r30, r16
    1f18:	20 81       	ld	r18, Z
    1f1a:	31 81       	ldd	r19, Z+1	; 0x01
    1f1c:	42 81       	ldd	r20, Z+2	; 0x02
    1f1e:	53 81       	ldd	r21, Z+3	; 0x03
    1f20:	64 81       	ldd	r22, Z+4	; 0x04
    1f22:	75 81       	ldd	r23, Z+5	; 0x05
    1f24:	86 81       	ldd	r24, Z+6	; 0x06
    1f26:	97 81       	ldd	r25, Z+7	; 0x07
    1f28:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <RTCSetTime>
    1f2c:	df 91       	pop	r29
    1f2e:	cf 91       	pop	r28
    1f30:	1f 91       	pop	r17
    1f32:	0f 91       	pop	r16
    1f34:	ff 90       	pop	r15
    1f36:	ef 90       	pop	r14
    1f38:	08 95       	ret

Disassembly of section .text.TimerInit:

00003dc0 <TimerInit>:
    3dc0:	14 bc       	out	0x24, r1	; 36
    3dc2:	92 e0       	ldi	r25, 0x02	; 2
    3dc4:	95 bd       	out	0x25, r25	; 37
    3dc6:	a4 e6       	ldi	r26, 0x64	; 100
    3dc8:	b0 e0       	ldi	r27, 0x00	; 0
    3dca:	8c 91       	ld	r24, X
    3dcc:	87 7f       	andi	r24, 0xF7	; 247
    3dce:	8c 93       	st	X, r24
    3dd0:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f0080>
    3dd4:	84 e0       	ldi	r24, 0x04	; 4
    3dd6:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f0081>
    3dda:	96 bb       	out	0x16, r25	; 22
    3ddc:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f0084>
    3de0:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f0085>
    3de4:	8b 5c       	subi	r24, 0xCB	; 203
    3de6:	93 4f       	sbci	r25, 0xF3	; 243
    3de8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f0089>
    3dec:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f0088>
    3df0:	ef e6       	ldi	r30, 0x6F	; 111
    3df2:	f0 e0       	ldi	r31, 0x00	; 0
    3df4:	80 81       	ld	r24, Z
    3df6:	82 60       	ori	r24, 0x02	; 2
    3df8:	80 83       	st	Z, r24
    3dfa:	8c 91       	ld	r24, X
    3dfc:	8f 7e       	andi	r24, 0xEF	; 239
    3dfe:	8c 93       	st	X, r24
    3e00:	ae e6       	ldi	r26, 0x6E	; 110
    3e02:	b0 e0       	ldi	r27, 0x00	; 0
    3e04:	8c 91       	ld	r24, X
    3e06:	8e 7f       	andi	r24, 0xFE	; 254
    3e08:	8c 93       	st	X, r24
    3e0a:	80 81       	ld	r24, Z
    3e0c:	8e 7f       	andi	r24, 0xFE	; 254
    3e0e:	80 83       	st	Z, r24
    3e10:	08 95       	ret

Disassembly of section .text.__vector_12:

00002dde <__vector_12>:
    2dde:	78 94       	sei
    2de0:	1f 92       	push	r1
    2de2:	0f 92       	push	r0
    2de4:	0f b6       	in	r0, 0x3f	; 63
    2de6:	0f 92       	push	r0
    2de8:	11 24       	eor	r1, r1
    2dea:	8f 93       	push	r24
    2dec:	9f 93       	push	r25
    2dee:	ef 93       	push	r30
    2df0:	ff 93       	push	r31
    2df2:	82 e0       	ldi	r24, 0x02	; 2
    2df4:	86 bb       	out	0x16, r24	; 22
    2df6:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f0084>
    2dfa:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f0085>
    2dfe:	8b 5c       	subi	r24, 0xCB	; 203
    2e00:	93 4f       	sbci	r25, 0xF3	; 243
    2e02:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f0089>
    2e06:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f0088>
    2e0a:	ef e6       	ldi	r30, 0x6F	; 111
    2e0c:	f0 e0       	ldi	r31, 0x00	; 0
    2e0e:	80 81       	ld	r24, Z
    2e10:	82 60       	ori	r24, 0x02	; 2
    2e12:	80 83       	st	Z, r24
    2e14:	81 e0       	ldi	r24, 0x01	; 1
    2e16:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <sg_bNewTick>
    2e1a:	80 91 6c 07 	lds	r24, 0x076C	; 0x80076c <sg_u8CellFrameTimer>
    2e1e:	8f 5f       	subi	r24, 0xFF	; 255
    2e20:	80 93 6c 07 	sts	0x076C, r24	; 0x80076c <sg_u8CellFrameTimer>
    2e24:	80 91 6c 07 	lds	r24, 0x076C	; 0x80076c <sg_u8CellFrameTimer>
    2e28:	83 30       	cpi	r24, 0x03	; 3
    2e2a:	78 f0       	brcs	.+30     	; 0x2e4a <__vector_12+0x6c>
    2e2c:	10 92 6c 07 	sts	0x076C, r1	; 0x80076c <sg_u8CellFrameTimer>
    2e30:	81 e0       	ldi	r24, 0x01	; 1
    2e32:	80 93 6b 07 	sts	0x076B, r24	; 0x80076b <sg_bFrameStart>
    2e36:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <sg_eFrameStatus>
    2e3a:	81 30       	cpi	r24, 0x01	; 1
    2e3c:	19 f4       	brne	.+6      	; 0x2e44 <__vector_12+0x66>
    2e3e:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <sg_eFrameStatus>
    2e42:	03 c0       	rjmp	.+6      	; 0x2e4a <__vector_12+0x6c>
    2e44:	81 e0       	ldi	r24, 0x01	; 1
    2e46:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <sg_eFrameStatus>
    2e4a:	80 91 69 07 	lds	r24, 0x0769	; 0x800769 <sg_u8TicksSinceLastPackControllerMessage>
    2e4e:	8f 3f       	cpi	r24, 0xFF	; 255
    2e50:	29 f0       	breq	.+10     	; 0x2e5c <__vector_12+0x7e>
    2e52:	80 91 69 07 	lds	r24, 0x0769	; 0x800769 <sg_u8TicksSinceLastPackControllerMessage>
    2e56:	8f 5f       	subi	r24, 0xFF	; 255
    2e58:	80 93 69 07 	sts	0x0769, r24	; 0x800769 <sg_u8TicksSinceLastPackControllerMessage>
    2e5c:	80 91 69 07 	lds	r24, 0x0769	; 0x800769 <sg_u8TicksSinceLastPackControllerMessage>
    2e60:	8f 36       	cpi	r24, 0x6F	; 111
    2e62:	40 f0       	brcs	.+16     	; 0x2e74 <__vector_12+0x96>
    2e64:	80 91 69 07 	lds	r24, 0x0769	; 0x800769 <sg_u8TicksSinceLastPackControllerMessage>
    2e68:	8f 56       	subi	r24, 0x6F	; 111
    2e6a:	80 93 69 07 	sts	0x0769, r24	; 0x800769 <sg_u8TicksSinceLastPackControllerMessage>
    2e6e:	81 e0       	ldi	r24, 0x01	; 1
    2e70:	80 93 17 03 	sts	0x0317, r24	; 0x800317 <sg_bPackControllerTimeout>
    2e74:	80 91 6a 07 	lds	r24, 0x076A	; 0x80076a <sg_u8CellStringPowerTimer>
    2e78:	88 23       	and	r24, r24
    2e7a:	29 f0       	breq	.+10     	; 0x2e86 <__vector_12+0xa8>
    2e7c:	80 91 6a 07 	lds	r24, 0x076A	; 0x80076a <sg_u8CellStringPowerTimer>
    2e80:	81 50       	subi	r24, 0x01	; 1
    2e82:	80 93 6a 07 	sts	0x076A, r24	; 0x80076a <sg_u8CellStringPowerTimer>
    2e86:	ff 91       	pop	r31
    2e88:	ef 91       	pop	r30
    2e8a:	9f 91       	pop	r25
    2e8c:	8f 91       	pop	r24
    2e8e:	0f 90       	pop	r0
    2e90:	0f be       	out	0x3f, r0	; 63
    2e92:	0f 90       	pop	r0
    2e94:	1f 90       	pop	r1
    2e96:	18 95       	reti

Disassembly of section .text.WatchdogReset:

00004a42 <WatchdogReset>:
		sg_u8CellStringPowerTimer--;
	}
}

void WatchdogReset( void )
{
    4a42:	08 95       	ret

Disassembly of section .text.WatchdogOff:

0000482e <WatchdogOff>:
// }

// Assume interrupts are disabled
void WatchdogOff( void )  // turn it off even when WDT_ENABLE is not defined
{
	wdt_reset();
    482e:	a8 95       	wdr
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    4830:	0f b6       	in	r0, 0x3f	; 63
    4832:	f8 94       	cli
    4834:	a8 95       	wdr
    4836:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f0060>
    483a:	88 61       	ori	r24, 0x18	; 24
    483c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f0060>
    4840:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f0060>
    4844:	0f be       	out	0x3f, r0	; 63
    4846:	08 95       	ret

Disassembly of section .text.__vector_28:

00003e12 <__vector_28>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    3e12:	1f 92       	push	r1
    3e14:	0f 92       	push	r0
    3e16:	0f b6       	in	r0, 0x3f	; 63
    3e18:	0f 92       	push	r0
    3e1a:	11 24       	eor	r1, r1
    3e1c:	2f 93       	push	r18
    3e1e:	3f 93       	push	r19
    3e20:	4f 93       	push	r20
    3e22:	5f 93       	push	r21
    3e24:	6f 93       	push	r22
    3e26:	7f 93       	push	r23
    3e28:	8f 93       	push	r24
    3e2a:	9f 93       	push	r25
    3e2c:	af 93       	push	r26
    3e2e:	bf 93       	push	r27
    3e30:	ef 93       	push	r30
    3e32:	ff 93       	push	r31
    3e34:	4a ef       	ldi	r20, 0xFA	; 250
    3e36:	52 e0       	ldi	r21, 0x02	; 2
    3e38:	6e e5       	ldi	r22, 0x5E	; 94
    3e3a:	71 e0       	ldi	r23, 0x01	; 1
    3e3c:	80 e0       	ldi	r24, 0x00	; 0
    3e3e:	0e 94 81 21 	call	0x4302	; 0x4302 <PlatformAssert>
    3e42:	ff 91       	pop	r31
    3e44:	ef 91       	pop	r30
    3e46:	bf 91       	pop	r27
    3e48:	af 91       	pop	r26
    3e4a:	9f 91       	pop	r25
    3e4c:	8f 91       	pop	r24
    3e4e:	7f 91       	pop	r23
    3e50:	6f 91       	pop	r22
    3e52:	5f 91       	pop	r21
    3e54:	4f 91       	pop	r20
    3e56:	3f 91       	pop	r19
    3e58:	2f 91       	pop	r18
    3e5a:	0f 90       	pop	r0
    3e5c:	0f be       	out	0x3f, r0	; 63
    3e5e:	0f 90       	pop	r0
    3e60:	1f 90       	pop	r1
    3e62:	18 95       	reti

Disassembly of section .text.__vector_23:

00003268 <__vector_23>:
    3268:	78 94       	sei
    326a:	1f 92       	push	r1
    326c:	0f 92       	push	r0
    326e:	0f b6       	in	r0, 0x3f	; 63
    3270:	0f 92       	push	r0
    3272:	11 24       	eor	r1, r1
    3274:	2f 93       	push	r18
    3276:	3f 93       	push	r19
    3278:	4f 93       	push	r20
    327a:	5f 93       	push	r21
    327c:	6f 93       	push	r22
    327e:	7f 93       	push	r23
    3280:	8f 93       	push	r24
    3282:	9f 93       	push	r25
    3284:	af 93       	push	r26
    3286:	bf 93       	push	r27
    3288:	ef 93       	push	r30
    328a:	ff 93       	push	r31
    328c:	96 b1       	in	r25, 0x06	; 6
    328e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <sg_eModuleControllerStateCurrent>
    3292:	83 30       	cpi	r24, 0x03	; 3
    3294:	21 f0       	breq	.+8      	; 0x329e <__vector_23+0x36>
    3296:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <sg_eModuleControllerStateCurrent>
    329a:	82 30       	cpi	r24, 0x02	; 2
    329c:	c9 f4       	brne	.+50     	; 0x32d0 <__vector_23+0x68>
    329e:	91 ff       	sbrs	r25, 1
    32a0:	17 c0       	rjmp	.+46     	; 0x32d0 <__vector_23+0x68>
    32a2:	88 b1       	in	r24, 0x08	; 8
    32a4:	8f 7e       	andi	r24, 0xEF	; 239
    32a6:	88 b9       	out	0x08, r24	; 8
    32a8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <sg_eModuleControllerStateCurrent>
    32ac:	83 30       	cpi	r24, 0x03	; 3
    32ae:	19 f4       	brne	.+6      	; 0x32b6 <__vector_23+0x4e>
    32b0:	81 e0       	ldi	r24, 0x01	; 1
    32b2:	0e 94 0b 25 	call	0x4a16	; 0x4a16 <ModuleControllerStateSet>
    32b6:	eb e6       	ldi	r30, 0x6B	; 107
    32b8:	f0 e0       	ldi	r31, 0x00	; 0
    32ba:	80 81       	ld	r24, Z
    32bc:	8d 7f       	andi	r24, 0xFD	; 253
    32be:	80 83       	st	Z, r24
    32c0:	e8 e6       	ldi	r30, 0x68	; 104
    32c2:	f0 e0       	ldi	r31, 0x00	; 0
    32c4:	80 81       	ld	r24, Z
    32c6:	8d 7f       	andi	r24, 0xFD	; 253
    32c8:	80 83       	st	Z, r24
    32ca:	81 e0       	ldi	r24, 0x01	; 1
    32cc:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <sg_bOvercurrentSignal>
    32d0:	ff 91       	pop	r31
    32d2:	ef 91       	pop	r30
    32d4:	bf 91       	pop	r27
    32d6:	af 91       	pop	r26
    32d8:	9f 91       	pop	r25
    32da:	8f 91       	pop	r24
    32dc:	7f 91       	pop	r23
    32de:	6f 91       	pop	r22
    32e0:	5f 91       	pop	r21
    32e2:	4f 91       	pop	r20
    32e4:	3f 91       	pop	r19
    32e6:	2f 91       	pop	r18
    32e8:	0f 90       	pop	r0
    32ea:	0f be       	out	0x3f, r0	; 63
    32ec:	0f 90       	pop	r0
    32ee:	1f 90       	pop	r1
    32f0:	18 95       	reti

Disassembly of section .text.__vector_24:

00003e64 <__vector_24>:
    3e64:	78 94       	sei
    3e66:	1f 92       	push	r1
    3e68:	0f 92       	push	r0
    3e6a:	0f b6       	in	r0, 0x3f	; 63
    3e6c:	0f 92       	push	r0
    3e6e:	11 24       	eor	r1, r1
    3e70:	2f 93       	push	r18
    3e72:	3f 93       	push	r19
    3e74:	4f 93       	push	r20
    3e76:	5f 93       	push	r21
    3e78:	6f 93       	push	r22
    3e7a:	7f 93       	push	r23
    3e7c:	8f 93       	push	r24
    3e7e:	9f 93       	push	r25
    3e80:	af 93       	push	r26
    3e82:	bf 93       	push	r27
    3e84:	ef 93       	push	r30
    3e86:	ff 93       	push	r31
    3e88:	8b b1       	in	r24, 0x0b	; 11
    3e8a:	0e 94 24 24 	call	0x4848	; 0x4848 <Check5VLoss>
    3e8e:	ff 91       	pop	r31
    3e90:	ef 91       	pop	r30
    3e92:	bf 91       	pop	r27
    3e94:	af 91       	pop	r26
    3e96:	9f 91       	pop	r25
    3e98:	8f 91       	pop	r24
    3e9a:	7f 91       	pop	r23
    3e9c:	6f 91       	pop	r22
    3e9e:	5f 91       	pop	r21
    3ea0:	4f 91       	pop	r20
    3ea2:	3f 91       	pop	r19
    3ea4:	2f 91       	pop	r18
    3ea6:	0f 90       	pop	r0
    3ea8:	0f be       	out	0x3f, r0	; 63
    3eaa:	0f 90       	pop	r0
    3eac:	1f 90       	pop	r1
    3eae:	18 95       	reti

Disassembly of section .text.vUARTRXStart:

000048bc <vUARTRXStart>:
}

// Called at the start of cell string data via MC RX
void vUARTRXStart(void)
{
	sg_u8CellBufferRX = 0;
    48bc:	10 92 67 07 	sts	0x0767, r1	; 0x800767 <sg_u8CellBufferRX>
	sg_u8CellIndex = 0;
    48c0:	10 92 68 07 	sts	0x0768, r1	; 0x800768 <sg_u8CellIndex>
	sg_u16BytesReceived = 0;
    48c4:	10 92 55 07 	sts	0x0755, r1	; 0x800755 <sg_u16BytesReceived+0x1>
    48c8:	10 92 54 07 	sts	0x0754, r1	; 0x800754 <sg_u16BytesReceived>
	sg_u8CellReports = 0;
    48cc:	10 92 66 07 	sts	0x0766, r1	; 0x800766 <sg_u8CellReports>
    48d0:	08 95       	ret

Disassembly of section .text.vUARTRXEnd:

0000474c <vUARTRXEnd>:
	// disable the edge interrupt
//	VUART_RX_DISABLE();
	// disable bit timer interrupt, should already be off but just in case
//	TIMER_CHB_INT_DISABLE();
	// update bytes and cells received
	sg_sFrame.sg_u16BytesReceived = sg_u16BytesReceived;
    474c:	80 91 54 07 	lds	r24, 0x0754	; 0x800754 <sg_u16BytesReceived>
    4750:	90 91 55 07 	lds	r25, 0x0755	; 0x800755 <sg_u16BytesReceived+0x1>
    4754:	ec e0       	ldi	r30, 0x0C	; 12
    4756:	f1 e0       	ldi	r31, 0x01	; 1
    4758:	90 a7       	std	Z+40, r25	; 0x28
    475a:	87 a3       	std	Z+39, r24	; 0x27
	sg_sFrame.sg_u8CellCPUCount = sg_u8CellReports;
    475c:	80 91 66 07 	lds	r24, 0x0766	; 0x800766 <sg_u8CellReports>
    4760:	81 a7       	std	Z+41, r24	; 0x29
	sg_u16BytesReceived = 0;
    4762:	10 92 55 07 	sts	0x0755, r1	; 0x800755 <sg_u16BytesReceived+0x1>
    4766:	10 92 54 07 	sts	0x0754, r1	; 0x800754 <sg_u16BytesReceived>
	sg_u8CellReports = 0;
    476a:	10 92 66 07 	sts	0x0766, r1	; 0x800766 <sg_u8CellReports>
    476e:	08 95       	ret

Disassembly of section .text.vUARTRXData:

0000387a <vUARTRXData>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    387a:	e0 91 67 07 	lds	r30, 0x0767	; 0x800767 <sg_u8CellBufferRX>
    387e:	21 e0       	ldi	r18, 0x01	; 1
    3880:	2e 0f       	add	r18, r30
    3882:	20 93 67 07 	sts	0x0767, r18	; 0x800767 <sg_u8CellBufferRX>
    3886:	f0 e0       	ldi	r31, 0x00	; 0
    3888:	e8 5b       	subi	r30, 0xB8	; 184
    388a:	f8 4f       	sbci	r31, 0xF8	; 248
    388c:	80 83       	st	Z, r24
    388e:	80 91 54 07 	lds	r24, 0x0754	; 0x800754 <sg_u16BytesReceived>
    3892:	90 91 55 07 	lds	r25, 0x0755	; 0x800755 <sg_u16BytesReceived+0x1>
    3896:	01 96       	adiw	r24, 0x01	; 1
    3898:	90 93 55 07 	sts	0x0755, r25	; 0x800755 <sg_u16BytesReceived+0x1>
    389c:	80 93 54 07 	sts	0x0754, r24	; 0x800754 <sg_u16BytesReceived>
    38a0:	24 30       	cpi	r18, 0x04	; 4
    38a2:	38 f1       	brcs	.+78     	; 0x38f2 <vUARTRXData+0x78>
    38a4:	10 92 67 07 	sts	0x0767, r1	; 0x800767 <sg_u8CellBufferRX>
    38a8:	80 91 68 07 	lds	r24, 0x0768	; 0x800768 <sg_u8CellIndex>
    38ac:	8c 36       	cpi	r24, 0x6C	; 108
    38ae:	08 f5       	brcc	.+66     	; 0x38f2 <vUARTRXData+0x78>
    38b0:	e8 2f       	mov	r30, r24
    38b2:	f0 e0       	ldi	r31, 0x00	; 0
    38b4:	74 96       	adiw	r30, 0x14	; 20
    38b6:	ee 0f       	add	r30, r30
    38b8:	ff 1f       	adc	r31, r31
    38ba:	ee 0f       	add	r30, r30
    38bc:	ff 1f       	adc	r31, r31
    38be:	e4 5f       	subi	r30, 0xF4	; 244
    38c0:	fe 4f       	sbci	r31, 0xFE	; 254
    38c2:	a8 e4       	ldi	r26, 0x48	; 72
    38c4:	b7 e0       	ldi	r27, 0x07	; 7
    38c6:	4d 91       	ld	r20, X+
    38c8:	5d 91       	ld	r21, X+
    38ca:	6d 91       	ld	r22, X+
    38cc:	7c 91       	ld	r23, X
    38ce:	13 97       	sbiw	r26, 0x03	; 3
    38d0:	40 83       	st	Z, r20
    38d2:	51 83       	std	Z+1, r21	; 0x01
    38d4:	62 83       	std	Z+2, r22	; 0x02
    38d6:	73 83       	std	Z+3, r23	; 0x03
    38d8:	1d 92       	st	X+, r1
    38da:	1d 92       	st	X+, r1
    38dc:	1d 92       	st	X+, r1
    38de:	1c 92       	st	X, r1
    38e0:	13 97       	sbiw	r26, 0x03	; 3
    38e2:	8f 5f       	subi	r24, 0xFF	; 255
    38e4:	80 93 68 07 	sts	0x0768, r24	; 0x800768 <sg_u8CellIndex>
    38e8:	80 91 66 07 	lds	r24, 0x0766	; 0x800766 <sg_u8CellReports>
    38ec:	8f 5f       	subi	r24, 0xFF	; 255
    38ee:	80 93 66 07 	sts	0x0766, r24	; 0x800766 <sg_u8CellReports>
    38f2:	08 95       	ret

Disassembly of section .text.PlatformGetSendData:

00004400 <PlatformGetSendData>:
uint16_t PlatformGetSendData( bool bUpdateBalanceStatus )
{
	uint16_t u16SendValue = 0;
	
	
	if( sg_bStopDischarge )
    4400:	90 91 10 03 	lds	r25, 0x0310	; 0x800310 <sg_bStopDischarge>
    4404:	99 23       	and	r25, r25
    4406:	51 f0       	breq	.+20     	; 0x441c <PlatformGetSendData+0x1c>
	{
		if (bUpdateBalanceStatus)	// don't update if ony an availability check
    4408:	88 23       	and	r24, r24
    440a:	59 f0       	breq	.+22     	; 0x4422 <PlatformGetSendData+0x22>
		{
			sg_bStopDischarge = false;
    440c:	10 92 10 03 	sts	0x0310, r1	; 0x800310 <sg_bStopDischarge>
			sg_bCellBalancedOnce = true;
    4410:	81 e0       	ldi	r24, 0x01	; 1
    4412:	80 93 11 03 	sts	0x0311, r24	; 0x800311 <sg_bCellBalancedOnce>
		}
		u16SendValue = 0x3ff;
    4416:	8f ef       	ldi	r24, 0xFF	; 255
    4418:	93 e0       	ldi	r25, 0x03	; 3
    441a:	08 95       	ret
			}
		}
		else
#endif
		{
			u16SendValue |= MSG_CELL_SEND_REPORT;
    441c:	80 e0       	ldi	r24, 0x00	; 0
    441e:	90 e8       	ldi	r25, 0x80	; 128
    4420:	08 95       	ret
		if (bUpdateBalanceStatus)	// don't update if ony an availability check
		{
			sg_bStopDischarge = false;
			sg_bCellBalancedOnce = true;
		}
		u16SendValue = 0x3ff;
    4422:	8f ef       	ldi	r24, 0xFF	; 255
    4424:	93 e0       	ldi	r25, 0x03	; 3
#endif
		}
	}
	
	return( u16SendValue );
}
    4426:	08 95       	ret

Disassembly of section .text.ADCCallback:

0000449e <ADCCallback>:
// Called every time there's an ADC read since apparently ISR can't access global variables?  compiler fails
void ADCCallback(EADCType eType,
				 uint16_t u16Reading)
{
	// End of chain? Indicate it's time for an ADC update
	if ((EADCTYPE_COUNT-1) == eType)
    449e:	84 30       	cpi	r24, 0x04	; 4
    44a0:	19 f4       	brne	.+6      	; 0x44a8 <ADCCallback+0xa>
	{
		sg_bADCUpdate = true;
    44a2:	91 e0       	ldi	r25, 0x01	; 1
    44a4:	90 93 0e 03 	sts	0x030E, r25	; 0x80030e <sg_bADCUpdate>
	}
	sg_sFrame.ADCReadings[eType].u16Reading = u16Reading;
    44a8:	90 e0       	ldi	r25, 0x00	; 0
    44aa:	fc 01       	movw	r30, r24
    44ac:	ee 0f       	add	r30, r30
    44ae:	ff 1f       	adc	r31, r31
    44b0:	8e 0f       	add	r24, r30
    44b2:	9f 1f       	adc	r25, r31
    44b4:	fc 01       	movw	r30, r24
    44b6:	e3 5b       	subi	r30, 0xB3	; 179
    44b8:	fe 4f       	sbci	r31, 0xFE	; 254
    44ba:	72 83       	std	Z+2, r23	; 0x02
    44bc:	61 83       	std	Z+1, r22	; 0x01
	sg_sFrame.ADCReadings[eType].bValid = true;
    44be:	81 e0       	ldi	r24, 0x01	; 1
    44c0:	80 83       	st	Z, r24
    44c2:	08 95       	ret

Disassembly of section .text.FrameInit:

00002e98 <FrameInit>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    2e98:	cf 93       	push	r28
    2e9a:	df 93       	push	r29
    2e9c:	81 11       	cpse	r24, r1
    2e9e:	0d c0       	rjmp	.+26     	; 0x2eba <FrameInit+0x22>
    2ea0:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <sg_sFrame>
    2ea4:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <sg_sFrame+0x1>
    2ea8:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <sg_sFrame+0x2>
    2eac:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <sg_sFrame+0x3>
    2eb0:	8a 37       	cpi	r24, 0x7A	; 122
    2eb2:	9a 4d       	sbci	r25, 0xDA	; 218
    2eb4:	a7 47       	sbci	r26, 0x77	; 119
    2eb6:	ba 4b       	sbci	r27, 0xBA	; 186
    2eb8:	e9 f0       	breq	.+58     	; 0x2ef4 <FrameInit+0x5c>
    2eba:	ec e0       	ldi	r30, 0x0C	; 12
    2ebc:	f1 e0       	ldi	r31, 0x01	; 1
    2ebe:	80 e0       	ldi	r24, 0x00	; 0
    2ec0:	92 e0       	ldi	r25, 0x02	; 2
    2ec2:	df 01       	movw	r26, r30
    2ec4:	ec 01       	movw	r28, r24
    2ec6:	1d 92       	st	X+, r1
    2ec8:	21 97       	sbiw	r28, 0x01	; 1
    2eca:	e9 f7       	brne	.-6      	; 0x2ec6 <FrameInit+0x2e>
    2ecc:	95 83       	std	Z+5, r25	; 0x05
    2ece:	84 83       	std	Z+4, r24	; 0x04
    2ed0:	8a e7       	ldi	r24, 0x7A	; 122
    2ed2:	9a ed       	ldi	r25, 0xDA	; 218
    2ed4:	a7 e7       	ldi	r26, 0x77	; 119
    2ed6:	ba eb       	ldi	r27, 0xBA	; 186
    2ed8:	80 83       	st	Z, r24
    2eda:	91 83       	std	Z+1, r25	; 0x01
    2edc:	a2 83       	std	Z+2, r26	; 0x02
    2ede:	b3 83       	std	Z+3, r27	; 0x03
    2ee0:	8f ef       	ldi	r24, 0xFF	; 255
    2ee2:	86 a3       	std	Z+38, r24	; 0x26
    2ee4:	87 87       	std	Z+15, r24	; 0x0f
    2ee6:	84 e0       	ldi	r24, 0x04	; 4
    2ee8:	90 e0       	ldi	r25, 0x00	; 0
    2eea:	0e 94 93 24 	call	0x4926	; 0x4926 <EEPROMRead>
    2eee:	0e 94 ce 15 	call	0x2b9c	; 0x2b9c <CellCountExpectedSet>
    2ef2:	1c c0       	rjmp	.+56     	; 0x2f2c <FrameInit+0x94>
    2ef4:	ec e0       	ldi	r30, 0x0C	; 12
    2ef6:	f1 e0       	ldi	r31, 0x01	; 1
    2ef8:	11 ae       	std	Z+57, r1	; 0x39
    2efa:	12 ae       	std	Z+58, r1	; 0x3a
    2efc:	13 ae       	std	Z+59, r1	; 0x3b
    2efe:	14 ae       	std	Z+60, r1	; 0x3c
    2f00:	14 aa       	std	Z+52, r1	; 0x34
    2f02:	13 aa       	std	Z+51, r1	; 0x33
    2f04:	16 aa       	std	Z+54, r1	; 0x36
    2f06:	15 aa       	std	Z+53, r1	; 0x35
    2f08:	10 ae       	std	Z+56, r1	; 0x38
    2f0a:	17 aa       	std	Z+55, r1	; 0x37
    2f0c:	80 eb       	ldi	r24, 0xB0	; 176
    2f0e:	91 e0       	ldi	r25, 0x01	; 1
    2f10:	ac e5       	ldi	r26, 0x5C	; 92
    2f12:	b1 e0       	ldi	r27, 0x01	; 1
    2f14:	ed 01       	movw	r28, r26
    2f16:	9c 01       	movw	r18, r24
    2f18:	19 92       	st	Y+, r1
    2f1a:	21 50       	subi	r18, 0x01	; 1
    2f1c:	30 40       	sbci	r19, 0x00	; 0
    2f1e:	e1 f7       	brne	.-8      	; 0x2f18 <FrameInit+0x80>
    2f20:	13 a2       	std	Z+35, r1	; 0x23
    2f22:	15 a2       	std	Z+37, r1	; 0x25
    2f24:	14 a2       	std	Z+36, r1	; 0x24
    2f26:	16 a2       	std	Z+38, r1	; 0x26
    2f28:	11 a6       	std	Z+41, r1	; 0x29
    2f2a:	12 a6       	std	Z+42, r1	; 0x2a
    2f2c:	ec e0       	ldi	r30, 0x0C	; 12
    2f2e:	f1 e0       	ldi	r31, 0x01	; 1
    2f30:	8f e9       	ldi	r24, 0x9F	; 159
    2f32:	95 e1       	ldi	r25, 0x15	; 21
    2f34:	96 a7       	std	Z+46, r25	; 0x2e
    2f36:	85 a7       	std	Z+45, r24	; 0x2d
    2f38:	90 ab       	std	Z+48, r25	; 0x30
    2f3a:	87 a7       	std	Z+47, r24	; 0x2f
    2f3c:	92 ab       	std	Z+50, r25	; 0x32
    2f3e:	81 ab       	std	Z+49, r24	; 0x31
    2f40:	8f ef       	ldi	r24, 0xFF	; 255
    2f42:	80 93 6d 07 	sts	0x076D, r24	; 0x80076d <sg_u8CurrentBufferIndex>
    2f46:	df 91       	pop	r29
    2f48:	cf 91       	pop	r28
    2f4a:	08 95       	ret

Disassembly of section .text.CellStringPowerStateMachine:

0000337c <CellStringPowerStateMachine>:
    337c:	80 91 64 07 	lds	r24, 0x0764	; 0x800764 <sg_eStringPowerState>
    3380:	82 30       	cpi	r24, 0x02	; 2
    3382:	49 f1       	breq	.+82     	; 0x33d6 <CellStringPowerStateMachine+0x5a>
    3384:	28 f4       	brcc	.+10     	; 0x3390 <CellStringPowerStateMachine+0x14>
    3386:	88 23       	and	r24, r24
    3388:	41 f0       	breq	.+16     	; 0x339a <CellStringPowerStateMachine+0x1e>
    338a:	81 30       	cpi	r24, 0x01	; 1
    338c:	91 f0       	breq	.+36     	; 0x33b2 <CellStringPowerStateMachine+0x36>
    338e:	32 c0       	rjmp	.+100    	; 0x33f4 <CellStringPowerStateMachine+0x78>
    3390:	83 30       	cpi	r24, 0x03	; 3
    3392:	61 f1       	breq	.+88     	; 0x33ec <CellStringPowerStateMachine+0x70>
    3394:	84 30       	cpi	r24, 0x04	; 4
    3396:	a9 f1       	breq	.+106    	; 0x3402 <CellStringPowerStateMachine+0x86>
    3398:	2d c0       	rjmp	.+90     	; 0x33f4 <CellStringPowerStateMachine+0x78>
    339a:	85 b1       	in	r24, 0x05	; 5
    339c:	8f 7e       	andi	r24, 0xEF	; 239
    339e:	85 b9       	out	0x05, r24	; 5
    33a0:	81 e0       	ldi	r24, 0x01	; 1
    33a2:	80 93 64 07 	sts	0x0764, r24	; 0x800764 <sg_eStringPowerState>
    33a6:	80 e0       	ldi	r24, 0x00	; 0
    33a8:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <FrameInit>
    33ac:	0e 94 fa 24 	call	0x49f4	; 0x49f4 <SendModuleControllerStatus>
    33b0:	08 95       	ret
    33b2:	85 b1       	in	r24, 0x05	; 5
    33b4:	8f 7e       	andi	r24, 0xEF	; 239
    33b6:	85 b9       	out	0x05, r24	; 5
    33b8:	80 e0       	ldi	r24, 0x00	; 0
    33ba:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <FrameInit>
    33be:	82 e0       	ldi	r24, 0x02	; 2
    33c0:	80 93 64 07 	sts	0x0764, r24	; 0x800764 <sg_eStringPowerState>
    33c4:	81 e0       	ldi	r24, 0x01	; 1
    33c6:	80 93 6a 07 	sts	0x076A, r24	; 0x80076a <sg_u8CellStringPowerTimer>
    33ca:	ec e0       	ldi	r30, 0x0C	; 12
    33cc:	f1 e0       	ldi	r31, 0x01	; 1
    33ce:	8f ef       	ldi	r24, 0xFF	; 255
    33d0:	87 87       	std	Z+15, r24	; 0x0f
    33d2:	10 8a       	std	Z+16, r1	; 0x10
    33d4:	08 95       	ret
    33d6:	80 91 6a 07 	lds	r24, 0x076A	; 0x80076a <sg_u8CellStringPowerTimer>
    33da:	81 11       	cpse	r24, r1
    33dc:	12 c0       	rjmp	.+36     	; 0x3402 <CellStringPowerStateMachine+0x86>
    33de:	85 b1       	in	r24, 0x05	; 5
    33e0:	80 61       	ori	r24, 0x10	; 16
    33e2:	85 b9       	out	0x05, r24	; 5
    33e4:	83 e0       	ldi	r24, 0x03	; 3
    33e6:	80 93 64 07 	sts	0x0764, r24	; 0x800764 <sg_eStringPowerState>
    33ea:	08 95       	ret
    33ec:	84 e0       	ldi	r24, 0x04	; 4
    33ee:	80 93 64 07 	sts	0x0764, r24	; 0x800764 <sg_eStringPowerState>
    33f2:	08 95       	ret
    33f4:	41 e6       	ldi	r20, 0x61	; 97
    33f6:	52 e0       	ldi	r21, 0x02	; 2
    33f8:	6e e5       	ldi	r22, 0x5E	; 94
    33fa:	71 e0       	ldi	r23, 0x01	; 1
    33fc:	80 e0       	ldi	r24, 0x00	; 0
    33fe:	0e 94 81 21 	call	0x4302	; 0x4302 <PlatformAssert>
    3402:	08 95       	ret

Disassembly of section .text.main:

00000f5c <main>:
     f5c:	cf 93       	push	r28
     f5e:	df 93       	push	r29
     f60:	cd b7       	in	r28, 0x3d	; 61
     f62:	de b7       	in	r29, 0x3e	; 62
     f64:	28 97       	sbiw	r28, 0x08	; 8
     f66:	0f b6       	in	r0, 0x3f	; 63
     f68:	f8 94       	cli
     f6a:	de bf       	out	0x3e, r29	; 62
     f6c:	0f be       	out	0x3f, r0	; 63
     f6e:	cd bf       	out	0x3d, r28	; 61
     f70:	0e 94 17 24 	call	0x482e	; 0x482e <WatchdogOff>
     f74:	88 b1       	in	r24, 0x08	; 8
     f76:	8f 7e       	andi	r24, 0xEF	; 239
     f78:	88 b9       	out	0x08, r24	; 8
     f7a:	87 b1       	in	r24, 0x07	; 7
     f7c:	80 61       	ori	r24, 0x10	; 16
     f7e:	87 b9       	out	0x07, r24	; 7
     f80:	87 b1       	in	r24, 0x07	; 7
     f82:	8d 7f       	andi	r24, 0xFD	; 253
     f84:	87 b9       	out	0x07, r24	; 7
     f86:	88 b1       	in	r24, 0x08	; 8
     f88:	8f 7e       	andi	r24, 0xEF	; 239
     f8a:	88 b9       	out	0x08, r24	; 8
     f8c:	8d b1       	in	r24, 0x0d	; 13
     f8e:	82 60       	ori	r24, 0x02	; 2
     f90:	8d b9       	out	0x0d, r24	; 13
     f92:	8e b1       	in	r24, 0x0e	; 14
     f94:	8d 7f       	andi	r24, 0xFD	; 253
     f96:	8e b9       	out	0x0e, r24	; 14
     f98:	84 b1       	in	r24, 0x04	; 4
     f9a:	80 61       	ori	r24, 0x10	; 16
     f9c:	84 b9       	out	0x04, r24	; 4
     f9e:	85 b1       	in	r24, 0x05	; 5
     fa0:	8f 7e       	andi	r24, 0xEF	; 239
     fa2:	85 b9       	out	0x05, r24	; 5
     fa4:	e0 e0       	ldi	r30, 0x00	; 0
     fa6:	f8 e0       	ldi	r31, 0x08	; 8
     fa8:	02 c0       	rjmp	.+4      	; 0xfae <main+0x52>
     faa:	8a ea       	ldi	r24, 0xAA	; 170
     fac:	81 93       	st	Z+, r24
     fae:	e1 15       	cp	r30, r1
     fb0:	80 e1       	ldi	r24, 0x10	; 16
     fb2:	f8 07       	cpc	r31, r24
     fb4:	d0 f3       	brcs	.-12     	; 0xfaa <main+0x4e>
     fb6:	84 b7       	in	r24, 0x34	; 52
     fb8:	80 93 63 07 	sts	0x0763, r24	; 0x800763 <sg_u8Reason>
     fbc:	80 91 63 07 	lds	r24, 0x0763	; 0x800763 <sg_u8Reason>
     fc0:	83 ff       	sbrs	r24, 3
     fc2:	0a c0       	rjmp	.+20     	; 0xfd8 <main+0x7c>
     fc4:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <sg_eWDTCurrentStatus>
     fc8:	ec e0       	ldi	r30, 0x0C	; 12
     fca:	f1 e0       	ldi	r31, 0x01	; 1
     fcc:	86 85       	ldd	r24, Z+14	; 0x0e
     fce:	8f 5f       	subi	r24, 0xFF	; 255
     fd0:	86 87       	std	Z+14, r24	; 0x0e
     fd2:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <ModuleControllerStateHandle>
     fd6:	41 c0       	rjmp	.+130    	; 0x105a <__DATA_REGION_LENGTH__+0x5a>
     fd8:	80 91 63 07 	lds	r24, 0x0763	; 0x800763 <sg_u8Reason>
     fdc:	80 91 63 07 	lds	r24, 0x0763	; 0x800763 <sg_u8Reason>
     fe0:	80 91 63 07 	lds	r24, 0x0763	; 0x800763 <sg_u8Reason>
     fe4:	f8 94       	cli
     fe6:	0e 94 00 25 	call	0x4a00	; 0x4a00 <SetSysclock>
     fea:	0e 94 e0 1e 	call	0x3dc0	; 0x3dc0 <TimerInit>
     fee:	0e 94 26 21 	call	0x424c	; 0x424c <vUARTInit>
     ff2:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <ADCInit>
     ff6:	0e 94 88 1a 	call	0x3510	; 0x3510 <STORE_Init>
     ffa:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <sg_bSDCardReady>
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <FrameInit>
    1004:	89 e0       	ldi	r24, 0x09	; 9
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	0e 94 93 24 	call	0x4926	; 0x4926 <EEPROMRead>
    100c:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <sg_u8SequentailCountMismatchThreshold>
    1010:	8a b1       	in	r24, 0x0a	; 10
    1012:	8f 7b       	andi	r24, 0xBF	; 191
    1014:	8a b9       	out	0x0a, r24	; 10
    1016:	8b b1       	in	r24, 0x0b	; 11
    1018:	80 64       	ori	r24, 0x40	; 64
    101a:	8b b9       	out	0x0b, r24	; 11
    101c:	11 e0       	ldi	r17, 0x01	; 1
    101e:	1b bb       	out	0x1b, r17	; 27
    1020:	82 e0       	ldi	r24, 0x02	; 2
    1022:	8b bb       	out	0x1b, r24	; 27
    1024:	84 e0       	ldi	r24, 0x04	; 4
    1026:	8b bb       	out	0x1b, r24	; 27
    1028:	88 e0       	ldi	r24, 0x08	; 8
    102a:	8b bb       	out	0x1b, r24	; 27
    102c:	ec e6       	ldi	r30, 0x6C	; 108
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	80 81       	ld	r24, Z
    1032:	80 64       	ori	r24, 0x40	; 64
    1034:	80 83       	st	Z, r24
    1036:	8b b3       	in	r24, 0x1b	; 27
    1038:	84 60       	ori	r24, 0x04	; 4
    103a:	8b bb       	out	0x1b, r24	; 27
    103c:	89 ef       	ldi	r24, 0xF9	; 249
    103e:	9e e0       	ldi	r25, 0x0E	; 14
    1040:	0e 94 06 25 	call	0x4a0c	; 0x4a0c <CANSetRXCallback>
    1044:	0e 94 9c 18 	call	0x3138	; 0x3138 <CANInit>
    1048:	0e 94 d7 08 	call	0x11ae	; 0x11ae <RTCInit>
    104c:	85 e0       	ldi	r24, 0x05	; 5
    104e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <sg_eModuleControllerStateCurrent>
    1052:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <sg_eModuleControllerStateTarget>
    1056:	10 93 0b 01 	sts	0x010B, r17	; 0x80010b <sg_eFrameStatus>
    105a:	78 94       	sei
    105c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <sg_bNewTick>
    1060:	88 23       	and	r24, r24
    1062:	e1 f3       	breq	.-8      	; 0x105c <__DATA_REGION_LENGTH__+0x5c>
    1064:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <sg_bNewTick>
    1068:	80 91 19 03 	lds	r24, 0x0319	; 0x800319 <sg_bModuleRegistered>
    106c:	88 23       	and	r24, r24
    106e:	29 f0       	breq	.+10     	; 0x107a <__DATA_REGION_LENGTH__+0x7a>
    1070:	ce 01       	movw	r24, r28
    1072:	01 96       	adiw	r24, 0x01	; 1
    1074:	0e 94 42 03 	call	0x684	; 0x684 <ControllerStatusMessagesSend>
    1078:	03 c0       	rjmp	.+6      	; 0x1080 <__DATA_REGION_LENGTH__+0x80>
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <sg_bSendAnnouncement>
    1080:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <sg_bSendAnnouncement>
    1084:	88 23       	and	r24, r24
    1086:	c1 f0       	breq	.+48     	; 0x10b8 <__DATA_REGION_LENGTH__+0xb8>
    1088:	86 e5       	ldi	r24, 0x56	; 86
    108a:	89 83       	std	Y+1, r24	; 0x01
    108c:	80 e2       	ldi	r24, 0x20	; 32
    108e:	8a 83       	std	Y+2, r24	; 0x02
    1090:	82 e0       	ldi	r24, 0x02	; 2
    1092:	8b 83       	std	Y+3, r24	; 0x03
    1094:	83 e0       	ldi	r24, 0x03	; 3
    1096:	8c 83       	std	Y+4, r24	; 0x04
    1098:	0e 94 c9 1a 	call	0x3592	; 0x3592 <ModuleControllerGetUniqueID>
    109c:	6d 83       	std	Y+5, r22	; 0x05
    109e:	7e 83       	std	Y+6, r23	; 0x06
    10a0:	8f 83       	std	Y+7, r24	; 0x07
    10a2:	98 87       	std	Y+8, r25	; 0x08
    10a4:	48 e0       	ldi	r20, 0x08	; 8
    10a6:	be 01       	movw	r22, r28
    10a8:	6f 5f       	subi	r22, 0xFF	; 255
    10aa:	7f 4f       	sbci	r23, 0xFF	; 255
    10ac:	80 e0       	ldi	r24, 0x00	; 0
    10ae:	0e 94 48 24 	call	0x4890	; 0x4890 <CANSendMessage>
    10b2:	81 11       	cpse	r24, r1
    10b4:	10 92 1a 03 	sts	0x031A, r1	; 0x80031a <sg_bSendAnnouncement>
    10b8:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <sg_bPackControllerTimeout>
    10bc:	88 23       	and	r24, r24
    10be:	71 f0       	breq	.+28     	; 0x10dc <__DATA_REGION_LENGTH__+0xdc>
    10c0:	10 92 17 03 	sts	0x0317, r1	; 0x800317 <sg_bPackControllerTimeout>
    10c4:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <sg_u8ModuleRegistrationID>
    10c8:	10 92 19 03 	sts	0x0319, r1	; 0x800319 <sg_bModuleRegistered>
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <sg_bSendAnnouncement>
    10d2:	0e 94 fa 24 	call	0x49f4	; 0x49f4 <SendModuleControllerStatus>
    10d6:	80 e0       	ldi	r24, 0x00	; 0
    10d8:	0e 94 0b 25 	call	0x4a16	; 0x4a16 <ModuleControllerStateSet>
    10dc:	ef e6       	ldi	r30, 0x6F	; 111
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	90 81       	ld	r25, Z
    10e2:	80 81       	ld	r24, Z
    10e4:	8d 7f       	andi	r24, 0xFD	; 253
    10e6:	80 83       	st	Z, r24
    10e8:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <sg_eFrameStatus>
    10ec:	20 91 6b 07 	lds	r18, 0x076B	; 0x80076b <sg_bFrameStart>
    10f0:	90 83       	st	Z, r25
    10f2:	81 30       	cpi	r24, 0x01	; 1
    10f4:	f1 f5       	brne	.+124    	; 0x1172 <__stack+0x73>
    10f6:	22 23       	and	r18, r18
    10f8:	99 f1       	breq	.+102    	; 0x1160 <__stack+0x61>
    10fa:	10 92 6b 07 	sts	0x076B, r1	; 0x80076b <sg_bFrameStart>
    10fe:	0e 94 be 19 	call	0x337c	; 0x337c <CellStringPowerStateMachine>
    1102:	0e 94 a6 23 	call	0x474c	; 0x474c <vUARTRXEnd>
    1106:	ce 01       	movw	r24, r28
    1108:	01 96       	adiw	r24, 0x01	; 1
    110a:	0e 94 30 05 	call	0xa60	; 0xa60 <CellStringProcess>
    110e:	80 91 64 07 	lds	r24, 0x0764	; 0x800764 <sg_eStringPowerState>
    1112:	84 30       	cpi	r24, 0x04	; 4
    1114:	29 f5       	brne	.+74     	; 0x1160 <__stack+0x61>
    1116:	ec e0       	ldi	r30, 0x0C	; 12
    1118:	f1 e0       	ldi	r31, 0x01	; 1
    111a:	91 a5       	ldd	r25, Z+41	; 0x29
    111c:	81 89       	ldd	r24, Z+17	; 0x11
    111e:	98 17       	cp	r25, r24
    1120:	e9 f0       	breq	.+58     	; 0x115c <__stack+0x5d>
    1122:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <sg_sFrame+0x11>
    1126:	88 23       	and	r24, r24
    1128:	c9 f0       	breq	.+50     	; 0x115c <__stack+0x5d>
    112a:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <sg_u8SequentailCountMismatchThreshold>
    112e:	88 23       	and	r24, r24
    1130:	b9 f0       	breq	.+46     	; 0x1160 <__stack+0x61>
    1132:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <sg_u8SequentailCountMismatchThreshold>
    1136:	8f 3f       	cpi	r24, 0xFF	; 255
    1138:	99 f0       	breq	.+38     	; 0x1160 <__stack+0x61>
    113a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <sg_u8SequentailCellCountMismatches>
    113e:	8f 5f       	subi	r24, 0xFF	; 255
    1140:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <sg_u8SequentailCellCountMismatches>
    1144:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <sg_u8SequentailCellCountMismatches>
    1148:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <sg_u8SequentailCountMismatchThreshold>
    114c:	98 17       	cp	r25, r24
    114e:	40 f0       	brcs	.+16     	; 0x1160 <__stack+0x61>
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	80 93 64 07 	sts	0x0764, r24	; 0x800764 <sg_eStringPowerState>
    1156:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <sg_u8SequentailCellCountMismatches>
    115a:	02 c0       	rjmp	.+4      	; 0x1160 <__stack+0x61>
    115c:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <sg_u8SequentailCellCountMismatches>
    1160:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <ModuleControllerStateHandle>
    1164:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <sg_bOvercurrentSignal>
    1168:	88 23       	and	r24, r24
    116a:	b1 f0       	breq	.+44     	; 0x1198 <__stack+0x99>
    116c:	10 92 0f 03 	sts	0x030F, r1	; 0x80030f <sg_bOvercurrentSignal>
    1170:	13 c0       	rjmp	.+38     	; 0x1198 <__stack+0x99>
    1172:	22 23       	and	r18, r18
    1174:	89 f0       	breq	.+34     	; 0x1198 <__stack+0x99>
    1176:	10 92 6b 07 	sts	0x076B, r1	; 0x80076b <sg_bFrameStart>
    117a:	0e 94 be 19 	call	0x337c	; 0x337c <CellStringPowerStateMachine>
    117e:	80 e0       	ldi	r24, 0x00	; 0
    1180:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <FrameInit>
    1184:	80 91 64 07 	lds	r24, 0x0764	; 0x800764 <sg_eStringPowerState>
    1188:	84 30       	cpi	r24, 0x04	; 4
    118a:	31 f4       	brne	.+12     	; 0x1198 <__stack+0x99>
    118c:	0e 94 89 24 	call	0x4912	; 0x4912 <vUARTInitReceive>
    1190:	0e 94 10 25 	call	0x4a20	; 0x4a20 <vUARTRXReset>
    1194:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <vUARTStarttx>
    1198:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <sg_bADCUpdate>
    119c:	88 23       	and	r24, r24
    119e:	21 f0       	breq	.+8      	; 0x11a8 <__stack+0xa9>
    11a0:	10 92 0e 03 	sts	0x030E, r1	; 0x80030e <sg_bADCUpdate>
    11a4:	0e 94 62 11 	call	0x22c4	; 0x22c4 <ModuleCurrentConvertReadings>
    11a8:	0e 94 c3 21 	call	0x4386	; 0x4386 <ADCStartConversion>
    11ac:	57 cf       	rjmp	.-338    	; 0x105c <__DATA_REGION_LENGTH__+0x5c>

Disassembly of section .text.IsLeapYear:

0000411a <IsLeapYear>:
	return( bResult );
}

// Returns true if u16Year is a leap year
static bool IsLeapYear(uint16_t u16Year)
{
    411a:	9c 01       	movw	r18, r24
	bool bLeapYear = false;
	
	if ((u16Year % 400) == 0)
    411c:	60 e9       	ldi	r22, 0x90	; 144
    411e:	71 e0       	ldi	r23, 0x01	; 1
    4120:	0e 94 14 22 	call	0x4428	; 0x4428 <__udivmodhi4>
    4124:	89 2b       	or	r24, r25
    4126:	69 f0       	breq	.+26     	; 0x4142 <IsLeapYear+0x28>
	{
		bLeapYear = true;
	}
	else
	if ((u16Year % 100) == 0)
    4128:	c9 01       	movw	r24, r18
    412a:	64 e6       	ldi	r22, 0x64	; 100
    412c:	70 e0       	ldi	r23, 0x00	; 0
    412e:	0e 94 14 22 	call	0x4428	; 0x4428 <__udivmodhi4>
    4132:	89 2b       	or	r24, r25
    4134:	41 f0       	breq	.+16     	; 0x4146 <IsLeapYear+0x2c>
	{
		// Not a leap year if divisible by 100 but not by 400
	}
	else
	if ((u16Year % 4) == 0)
    4136:	23 70       	andi	r18, 0x03	; 3
    4138:	33 27       	eor	r19, r19
    413a:	23 2b       	or	r18, r19
    413c:	31 f0       	breq	.+12     	; 0x414a <IsLeapYear+0x30>
}

// Returns true if u16Year is a leap year
static bool IsLeapYear(uint16_t u16Year)
{
	bool bLeapYear = false;
    413e:	80 e0       	ldi	r24, 0x00	; 0
    4140:	08 95       	ret
	
	if ((u16Year % 400) == 0)
	{
		bLeapYear = true;
    4142:	81 e0       	ldi	r24, 0x01	; 1
    4144:	08 95       	ret
}

// Returns true if u16Year is a leap year
static bool IsLeapYear(uint16_t u16Year)
{
	bool bLeapYear = false;
    4146:	80 e0       	ldi	r24, 0x00	; 0
    4148:	08 95       	ret
		// Not a leap year if divisible by 100 but not by 400
	}
	else
	if ((u16Year % 4) == 0)
	{
		bLeapYear = true;
    414a:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return(bLeapYear);
}
    414c:	08 95       	ret

Disassembly of section .text.RTCStartTransaction:

00003efc <RTCStartTransaction>:
}

static bool RTCStartTransaction( uint8_t u8Address, 
								 bool bRead, 
								 bool bAllowUnstick )
{
    3efc:	ff 92       	push	r15
    3efe:	0f 93       	push	r16
    3f00:	1f 93       	push	r17
    3f02:	cf 93       	push	r28
    3f04:	df 93       	push	r29
    3f06:	f8 2e       	mov	r15, r24
    3f08:	06 2f       	mov	r16, r22
    3f0a:	14 2f       	mov	r17, r20
	bool bResult = false;
	uint8_t u8Tries = RTC_MAX_ADDRESS_TRIES;
    3f0c:	d3 e0       	ldi	r29, 0x03	; 3

static bool RTCStartTransaction( uint8_t u8Address, 
								 bool bRead, 
								 bool bAllowUnstick )
{
	bool bResult = false;
    3f0e:	c0 e0       	ldi	r28, 0x00	; 0
	uint8_t u8Tries = RTC_MAX_ADDRESS_TRIES;
	
	while( (false == bResult) && u8Tries )
    3f10:	0c c0       	rjmp	.+24     	; 0x3f2a <RTCStartTransaction+0x2e>
	{
		u8Tries--;
    3f12:	d1 50       	subi	r29, 0x01	; 1
		
		bResult = I2CStartTransaction( u8Address, bRead );
    3f14:	60 2f       	mov	r22, r16
    3f16:	8f 2d       	mov	r24, r15
    3f18:	0e 94 d8 21 	call	0x43b0	; 0x43b0 <I2CStartTransaction>
    3f1c:	c8 2f       	mov	r28, r24
	
		if( false == bAllowUnstick )
    3f1e:	11 23       	and	r17, r17
    3f20:	41 f0       	breq	.+16     	; 0x3f32 <RTCStartTransaction+0x36>
		{
			break;
		}
		
		// Unstick and retry on failure
		if( false == bResult )
    3f22:	81 11       	cpse	r24, r1
    3f24:	02 c0       	rjmp	.+4      	; 0x3f2a <RTCStartTransaction+0x2e>
		{
			I2CUnstick();
    3f26:	0e 94 e1 1f 	call	0x3fc2	; 0x3fc2 <I2CUnstick>
								 bool bAllowUnstick )
{
	bool bResult = false;
	uint8_t u8Tries = RTC_MAX_ADDRESS_TRIES;
	
	while( (false == bResult) && u8Tries )
    3f2a:	c1 11       	cpse	r28, r1
    3f2c:	02 c0       	rjmp	.+4      	; 0x3f32 <RTCStartTransaction+0x36>
    3f2e:	d1 11       	cpse	r29, r1
    3f30:	f0 cf       	rjmp	.-32     	; 0x3f12 <RTCStartTransaction+0x16>
			I2CUnstick();
		}
	}
	
	return( bResult );
}
    3f32:	8c 2f       	mov	r24, r28
    3f34:	df 91       	pop	r29
    3f36:	cf 91       	pop	r28
    3f38:	1f 91       	pop	r17
    3f3a:	0f 91       	pop	r16
    3f3c:	ff 90       	pop	r15
    3f3e:	08 95       	ret

Disassembly of section .text.StructTMToHW:

00003d1a <StructTMToHW>:
}

// Converts struct tm to SMCP7940NTime structure
static void StructTMToHW(struct tm *psTimeTM,
						 SMCP7940NTime *psTime)
{
    3d1a:	cf 93       	push	r28
    3d1c:	df 93       	push	r29
    3d1e:	dc 01       	movw	r26, r24
    3d20:	fb 01       	movw	r30, r22
	memset((void *) psTime, 0, sizeof(*psTime));
    3d22:	87 e0       	ldi	r24, 0x07	; 7
    3d24:	eb 01       	movw	r28, r22
    3d26:	19 92       	st	Y+, r1
    3d28:	8a 95       	dec	r24
    3d2a:	e9 f7       	brne	.-6      	; 0x3d26 <StructTMToHW+0xc>
	
	psTime->u8Seconds = psTimeTM->tm_sec;
    3d2c:	8c 91       	ld	r24, X
    3d2e:	80 83       	st	Z, r24
	psTime->u8Minutes = psTimeTM->tm_min;
    3d30:	12 96       	adiw	r26, 0x02	; 2
    3d32:	8c 91       	ld	r24, X
    3d34:	12 97       	sbiw	r26, 0x02	; 2
    3d36:	81 83       	std	Z+1, r24	; 0x01
	psTime->u8Hours = psTimeTM->tm_hour;
    3d38:	14 96       	adiw	r26, 0x04	; 4
    3d3a:	8c 91       	ld	r24, X
    3d3c:	14 97       	sbiw	r26, 0x04	; 4
    3d3e:	82 83       	std	Z+2, r24	; 0x02
	psTime->u8Day = psTimeTM->tm_mday;
    3d40:	16 96       	adiw	r26, 0x06	; 6
    3d42:	8c 91       	ld	r24, X
    3d44:	16 97       	sbiw	r26, 0x06	; 6
    3d46:	84 83       	std	Z+4, r24	; 0x04
	psTime->u8Month = psTimeTM->tm_mon;
    3d48:	18 96       	adiw	r26, 0x08	; 8
    3d4a:	8c 91       	ld	r24, X
    3d4c:	18 97       	sbiw	r26, 0x08	; 8
    3d4e:	85 83       	std	Z+5, r24	; 0x05
	
	if (psTimeTM->tm_year > (2099-1900))
    3d50:	1a 96       	adiw	r26, 0x0a	; 10
    3d52:	8d 91       	ld	r24, X+
    3d54:	9c 91       	ld	r25, X
    3d56:	1b 97       	sbiw	r26, 0x0b	; 11
    3d58:	88 3c       	cpi	r24, 0xC8	; 200
    3d5a:	91 05       	cpc	r25, r1
    3d5c:	1c f0       	brlt	.+6      	; 0x3d64 <StructTMToHW+0x4a>
	{
		psTime->u8Year = psTimeTM->tm_year - 2100;
    3d5e:	84 53       	subi	r24, 0x34	; 52
    3d60:	86 83       	std	Z+6, r24	; 0x06
    3d62:	02 c0       	rjmp	.+4      	; 0x3d68 <StructTMToHW+0x4e>
	}
	else
	{
		psTime->u8Year = psTimeTM->tm_year - 2000;
    3d64:	80 5d       	subi	r24, 0xD0	; 208
    3d66:	86 83       	std	Z+6, r24	; 0x06
	}
	
}
    3d68:	df 91       	pop	r29
    3d6a:	cf 91       	pop	r28
    3d6c:	08 95       	ret

Disassembly of section .text.HWToStructTM:

0000368e <HWToStructTM>:
}

// Converts an SMCP7940NTime structure to struct tm
static void HWToStructTM(SMCP7940NTime *psTime,
						 struct tm *psTimeTM)
{
    368e:	cf 93       	push	r28
    3690:	df 93       	push	r29
    3692:	dc 01       	movw	r26, r24
    3694:	fb 01       	movw	r30, r22
	// At this point, the time is in STime and we should
	// turn that in to time_t
	memset((void *) psTimeTM, 0, sizeof(*psTimeTM));
    3696:	89 e1       	ldi	r24, 0x19	; 25
    3698:	eb 01       	movw	r28, r22
    369a:	19 92       	st	Y+, r1
    369c:	8a 95       	dec	r24
    369e:	e9 f7       	brne	.-6      	; 0x369a <HWToStructTM+0xc>
	
	psTimeTM->tm_sec = psTime->u8Seconds;
    36a0:	8c 91       	ld	r24, X
    36a2:	90 e0       	ldi	r25, 0x00	; 0
    36a4:	91 83       	std	Z+1, r25	; 0x01
    36a6:	80 83       	st	Z, r24
	psTimeTM->tm_min = psTime->u8Minutes;
    36a8:	11 96       	adiw	r26, 0x01	; 1
    36aa:	8c 91       	ld	r24, X
    36ac:	11 97       	sbiw	r26, 0x01	; 1
    36ae:	90 e0       	ldi	r25, 0x00	; 0
    36b0:	93 83       	std	Z+3, r25	; 0x03
    36b2:	82 83       	std	Z+2, r24	; 0x02
	psTimeTM->tm_hour = psTime->u8Hours;
    36b4:	12 96       	adiw	r26, 0x02	; 2
    36b6:	8c 91       	ld	r24, X
    36b8:	12 97       	sbiw	r26, 0x02	; 2
    36ba:	90 e0       	ldi	r25, 0x00	; 0
    36bc:	95 83       	std	Z+5, r25	; 0x05
    36be:	84 83       	std	Z+4, r24	; 0x04
	psTimeTM->tm_mday = psTime->u8Day;
    36c0:	14 96       	adiw	r26, 0x04	; 4
    36c2:	8c 91       	ld	r24, X
    36c4:	14 97       	sbiw	r26, 0x04	; 4
    36c6:	90 e0       	ldi	r25, 0x00	; 0
    36c8:	97 83       	std	Z+7, r25	; 0x07
    36ca:	86 83       	std	Z+6, r24	; 0x06
	psTimeTM->tm_mon = psTime->u8Month - 1;
    36cc:	15 96       	adiw	r26, 0x05	; 5
    36ce:	8c 91       	ld	r24, X
    36d0:	15 97       	sbiw	r26, 0x05	; 5
    36d2:	90 e0       	ldi	r25, 0x00	; 0
    36d4:	01 97       	sbiw	r24, 0x01	; 1
    36d6:	91 87       	std	Z+9, r25	; 0x09
    36d8:	80 87       	std	Z+8, r24	; 0x08
	
	if (psTime->u8Year < YEAR_ROLLOVER_CUTOFF)
    36da:	16 96       	adiw	r26, 0x06	; 6
    36dc:	8c 91       	ld	r24, X
    36de:	84 31       	cpi	r24, 0x14	; 20
    36e0:	30 f4       	brcc	.+12     	; 0x36ee <HWToStructTM+0x60>
	{
		psTimeTM->tm_year = 2100 + psTime->u8Year;
    36e2:	90 e0       	ldi	r25, 0x00	; 0
    36e4:	8c 5c       	subi	r24, 0xCC	; 204
    36e6:	97 4f       	sbci	r25, 0xF7	; 247
    36e8:	93 87       	std	Z+11, r25	; 0x0b
    36ea:	82 87       	std	Z+10, r24	; 0x0a
    36ec:	05 c0       	rjmp	.+10     	; 0x36f8 <HWToStructTM+0x6a>
	}
	else
	{
		psTimeTM->tm_year = 2000 + psTime->u8Year;
    36ee:	90 e0       	ldi	r25, 0x00	; 0
    36f0:	80 53       	subi	r24, 0x30	; 48
    36f2:	98 4f       	sbci	r25, 0xF8	; 248
    36f4:	93 87       	std	Z+11, r25	; 0x0b
    36f6:	82 87       	std	Z+10, r24	; 0x0a
	}	
	
	psTimeTM->tm_year -= 1900;
    36f8:	82 85       	ldd	r24, Z+10	; 0x0a
    36fa:	93 85       	ldd	r25, Z+11	; 0x0b
    36fc:	8c 56       	subi	r24, 0x6C	; 108
    36fe:	97 40       	sbci	r25, 0x07	; 7
    3700:	93 87       	std	Z+11, r25	; 0x0b
    3702:	82 87       	std	Z+10, r24	; 0x0a
}
    3704:	df 91       	pop	r29
    3706:	cf 91       	pop	r28
    3708:	08 95       	ret

Disassembly of section .text.__vector_10:

00003404 <__vector_10>:
// # Of seconds since January 1, 1970
static volatile uint64_t sg_u64Time;

// Called once per second on rev 1 and newer hardware
ISR(INT3_vect, ISR_NOBLOCK)
{
    3404:	78 94       	sei
    3406:	1f 92       	push	r1
    3408:	0f 92       	push	r0
    340a:	0f b6       	in	r0, 0x3f	; 63
    340c:	0f 92       	push	r0
    340e:	11 24       	eor	r1, r1
    3410:	2f 93       	push	r18
    3412:	3f 93       	push	r19
    3414:	4f 93       	push	r20
    3416:	5f 93       	push	r21
    3418:	6f 93       	push	r22
    341a:	7f 93       	push	r23
    341c:	8f 93       	push	r24
    341e:	9f 93       	push	r25
    3420:	af 93       	push	r26
	EIFR |= (1 << INTF3);
    3422:	8c b3       	in	r24, 0x1c	; 28
    3424:	88 60       	ori	r24, 0x08	; 8
    3426:	8c bb       	out	0x1c, r24	; 28
	sg_u64Time++;
    3428:	20 91 3d 07 	lds	r18, 0x073D	; 0x80073d <sg_u64Time>
    342c:	30 91 3e 07 	lds	r19, 0x073E	; 0x80073e <sg_u64Time+0x1>
    3430:	40 91 3f 07 	lds	r20, 0x073F	; 0x80073f <sg_u64Time+0x2>
    3434:	50 91 40 07 	lds	r21, 0x0740	; 0x800740 <sg_u64Time+0x3>
    3438:	60 91 41 07 	lds	r22, 0x0741	; 0x800741 <sg_u64Time+0x4>
    343c:	70 91 42 07 	lds	r23, 0x0742	; 0x800742 <sg_u64Time+0x5>
    3440:	80 91 43 07 	lds	r24, 0x0743	; 0x800743 <sg_u64Time+0x6>
    3444:	90 91 44 07 	lds	r25, 0x0744	; 0x800744 <sg_u64Time+0x7>
    3448:	a1 e0       	ldi	r26, 0x01	; 1
    344a:	0e 94 3c 24 	call	0x4878	; 0x4878 <__adddi3_s8>
    344e:	20 93 3d 07 	sts	0x073D, r18	; 0x80073d <sg_u64Time>
    3452:	30 93 3e 07 	sts	0x073E, r19	; 0x80073e <sg_u64Time+0x1>
    3456:	40 93 3f 07 	sts	0x073F, r20	; 0x80073f <sg_u64Time+0x2>
    345a:	50 93 40 07 	sts	0x0740, r21	; 0x800740 <sg_u64Time+0x3>
    345e:	60 93 41 07 	sts	0x0741, r22	; 0x800741 <sg_u64Time+0x4>
    3462:	70 93 42 07 	sts	0x0742, r23	; 0x800742 <sg_u64Time+0x5>
    3466:	80 93 43 07 	sts	0x0743, r24	; 0x800743 <sg_u64Time+0x6>
    346a:	90 93 44 07 	sts	0x0744, r25	; 0x800744 <sg_u64Time+0x7>
}
    346e:	af 91       	pop	r26
    3470:	9f 91       	pop	r25
    3472:	8f 91       	pop	r24
    3474:	7f 91       	pop	r23
    3476:	6f 91       	pop	r22
    3478:	5f 91       	pop	r21
    347a:	4f 91       	pop	r20
    347c:	3f 91       	pop	r19
    347e:	2f 91       	pop	r18
    3480:	0f 90       	pop	r0
    3482:	0f be       	out	0x3f, r0	; 63
    3484:	0f 90       	pop	r0
    3486:	1f 90       	pop	r1
    3488:	18 95       	reti

Disassembly of section .text.RTCReadRegisters:

00003610 <RTCReadRegisters>:
}

bool RTCReadRegisters( uint8_t u8RegisterAddr, 
					   uint8_t* pu8Data, 
					   uint8_t u8Length )
{
    3610:	ff 92       	push	r15
    3612:	0f 93       	push	r16
    3614:	1f 93       	push	r17
    3616:	cf 93       	push	r28
    3618:	df 93       	push	r29
    361a:	f8 2e       	mov	r15, r24
    361c:	8b 01       	movw	r16, r22
    361e:	c4 2f       	mov	r28, r20
	bool bResult;
	
	MBASSERT( u8Length >= 1 );
    3620:	41 11       	cpse	r20, r1
    3622:	07 c0       	rjmp	.+14     	; 0x3632 <RTCReadRegisters+0x22>
    3624:	4f e5       	ldi	r20, 0x5F	; 95
    3626:	50 e0       	ldi	r21, 0x00	; 0
    3628:	6a e6       	ldi	r22, 0x6A	; 106
    362a:	71 e0       	ldi	r23, 0x01	; 1
    362c:	80 e0       	ldi	r24, 0x00	; 0
    362e:	0e 94 81 21 	call	0x4302	; 0x4302 <PlatformAssert>
	
	// First send device address and write register address
	bResult = RTCStartTransaction( RTC_ADDRESS, false, true );
    3632:	41 e0       	ldi	r20, 0x01	; 1
    3634:	60 e0       	ldi	r22, 0x00	; 0
    3636:	8e ed       	ldi	r24, 0xDE	; 222
    3638:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <RTCStartTransaction>
    363c:	d8 2f       	mov	r29, r24
	
	// Couldn't get an ACK?  Give up now
	if( false == bResult )
    363e:	88 23       	and	r24, r24
    3640:	e9 f0       	breq	.+58     	; 0x367c <RTCReadRegisters+0x6c>
	{
		goto errorExit;
	}
	
	// Send the register address
	bResult = I2CTxByte( u8RegisterAddr );
    3642:	8f 2d       	mov	r24, r15
    3644:	0e 94 b0 1c 	call	0x3960	; 0x3960 <I2CTxByte>
    3648:	d8 2f       	mov	r29, r24
	
	if( false == bResult )
    364a:	88 23       	and	r24, r24
    364c:	b9 f0       	breq	.+46     	; 0x367c <RTCReadRegisters+0x6c>
	{
		goto errorExit;
	}
	
	// Send repeated start with read
	bResult = RTCStartTransaction( RTC_ADDRESS, true, false );
    364e:	40 e0       	ldi	r20, 0x00	; 0
    3650:	61 e0       	ldi	r22, 0x01	; 1
    3652:	8e ed       	ldi	r24, 0xDE	; 222
    3654:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <RTCStartTransaction>
    3658:	d8 2f       	mov	r29, r24
	
	// Couldn't get an ACK?  Give up now
	if( false == bResult )
    365a:	81 11       	cpse	r24, r1
    365c:	08 c0       	rjmp	.+16     	; 0x366e <RTCReadRegisters+0x5e>
    365e:	0e c0       	rjmp	.+28     	; 0x367c <RTCReadRegisters+0x6c>
		goto errorExit;
	}
	
	while( u8Length >= 2 )
	{
		*pu8Data = I2CRxByte( true );
    3660:	81 e0       	ldi	r24, 0x01	; 1
    3662:	0e 94 c3 1b 	call	0x3786	; 0x3786 <I2CRxByte>
    3666:	f8 01       	movw	r30, r16
    3668:	81 93       	st	Z+, r24
    366a:	8f 01       	movw	r16, r30
		pu8Data++;
		u8Length--;
    366c:	c1 50       	subi	r28, 0x01	; 1
	if( false == bResult )
	{
		goto errorExit;
	}
	
	while( u8Length >= 2 )
    366e:	c2 30       	cpi	r28, 0x02	; 2
    3670:	b8 f7       	brcc	.-18     	; 0x3660 <RTCReadRegisters+0x50>
		pu8Data++;
		u8Length--;
	}
	
	// Final read with NACK
	*pu8Data = I2CRxByte( false );
    3672:	80 e0       	ldi	r24, 0x00	; 0
    3674:	0e 94 c3 1b 	call	0x3786	; 0x3786 <I2CRxByte>
    3678:	f8 01       	movw	r30, r16
    367a:	80 83       	st	Z, r24
	
errorExit:

	I2CStop();
    367c:	0e 94 3c 22 	call	0x4478	; 0x4478 <I2CStop>
	
	return(bResult);
}
    3680:	8d 2f       	mov	r24, r29
    3682:	df 91       	pop	r29
    3684:	cf 91       	pop	r28
    3686:	1f 91       	pop	r17
    3688:	0f 91       	pop	r16
    368a:	ff 90       	pop	r15
    368c:	08 95       	ret

Disassembly of section .text.RTCReadHW:

000025bc <RTCReadHW>:
	sei();
	
	psSrc = gmtime((const time_t *) &u64Time);
	memcpy((void *) psTime, (void *) psSrc, sizeof(*psTime));
	return(true);
}
    25bc:	cf 93       	push	r28
    25be:	df 93       	push	r29
    25c0:	ec 01       	movw	r28, r24
    25c2:	47 e0       	ldi	r20, 0x07	; 7
    25c4:	bc 01       	movw	r22, r24
    25c6:	80 e0       	ldi	r24, 0x00	; 0
    25c8:	0e 94 08 1b 	call	0x3610	; 0x3610 <RTCReadRegisters>
    25cc:	88 23       	and	r24, r24
    25ce:	09 f4       	brne	.+2      	; 0x25d2 <RTCReadHW+0x16>
    25d0:	63 c0       	rjmp	.+198    	; 0x2698 <RTCReadHW+0xdc>
    25d2:	98 81       	ld	r25, Y
    25d4:	29 2f       	mov	r18, r25
    25d6:	22 95       	swap	r18
    25d8:	2f 70       	andi	r18, 0x0F	; 15
    25da:	27 70       	andi	r18, 0x07	; 7
    25dc:	22 0f       	add	r18, r18
    25de:	32 2f       	mov	r19, r18
    25e0:	33 0f       	add	r19, r19
    25e2:	33 0f       	add	r19, r19
    25e4:	23 0f       	add	r18, r19
    25e6:	9f 70       	andi	r25, 0x0F	; 15
    25e8:	92 0f       	add	r25, r18
    25ea:	98 83       	st	Y, r25
    25ec:	99 81       	ldd	r25, Y+1	; 0x01
    25ee:	29 2f       	mov	r18, r25
    25f0:	22 95       	swap	r18
    25f2:	2f 70       	andi	r18, 0x0F	; 15
    25f4:	27 70       	andi	r18, 0x07	; 7
    25f6:	22 0f       	add	r18, r18
    25f8:	32 2f       	mov	r19, r18
    25fa:	33 0f       	add	r19, r19
    25fc:	33 0f       	add	r19, r19
    25fe:	23 0f       	add	r18, r19
    2600:	9f 70       	andi	r25, 0x0F	; 15
    2602:	92 0f       	add	r25, r18
    2604:	99 83       	std	Y+1, r25	; 0x01
    2606:	9a 81       	ldd	r25, Y+2	; 0x02
    2608:	96 ff       	sbrs	r25, 6
    260a:	11 c0       	rjmp	.+34     	; 0x262e <RTCReadHW+0x72>
    260c:	94 fb       	bst	r25, 4
    260e:	22 27       	eor	r18, r18
    2610:	20 f9       	bld	r18, 0
    2612:	22 0f       	add	r18, r18
    2614:	32 2f       	mov	r19, r18
    2616:	33 0f       	add	r19, r19
    2618:	33 0f       	add	r19, r19
    261a:	23 0f       	add	r18, r19
    261c:	39 2f       	mov	r19, r25
    261e:	3f 70       	andi	r19, 0x0F	; 15
    2620:	23 0f       	add	r18, r19
    2622:	2a 83       	std	Y+2, r18	; 0x02
    2624:	95 ff       	sbrs	r25, 5
    2626:	0f c0       	rjmp	.+30     	; 0x2646 <RTCReadHW+0x8a>
    2628:	24 5f       	subi	r18, 0xF4	; 244
    262a:	2a 83       	std	Y+2, r18	; 0x02
    262c:	0c c0       	rjmp	.+24     	; 0x2646 <RTCReadHW+0x8a>
    262e:	29 2f       	mov	r18, r25
    2630:	22 95       	swap	r18
    2632:	2f 70       	andi	r18, 0x0F	; 15
    2634:	23 70       	andi	r18, 0x03	; 3
    2636:	22 0f       	add	r18, r18
    2638:	32 2f       	mov	r19, r18
    263a:	33 0f       	add	r19, r19
    263c:	33 0f       	add	r19, r19
    263e:	23 0f       	add	r18, r19
    2640:	9f 70       	andi	r25, 0x0F	; 15
    2642:	92 0f       	add	r25, r18
    2644:	9a 83       	std	Y+2, r25	; 0x02
    2646:	9b 81       	ldd	r25, Y+3	; 0x03
    2648:	97 70       	andi	r25, 0x07	; 7
    264a:	9b 83       	std	Y+3, r25	; 0x03
    264c:	9c 81       	ldd	r25, Y+4	; 0x04
    264e:	29 2f       	mov	r18, r25
    2650:	22 95       	swap	r18
    2652:	2f 70       	andi	r18, 0x0F	; 15
    2654:	23 70       	andi	r18, 0x03	; 3
    2656:	22 0f       	add	r18, r18
    2658:	32 2f       	mov	r19, r18
    265a:	33 0f       	add	r19, r19
    265c:	33 0f       	add	r19, r19
    265e:	23 0f       	add	r18, r19
    2660:	9f 70       	andi	r25, 0x0F	; 15
    2662:	92 0f       	add	r25, r18
    2664:	9c 83       	std	Y+4, r25	; 0x04
    2666:	9d 81       	ldd	r25, Y+5	; 0x05
    2668:	94 fb       	bst	r25, 4
    266a:	22 27       	eor	r18, r18
    266c:	20 f9       	bld	r18, 0
    266e:	22 0f       	add	r18, r18
    2670:	32 2f       	mov	r19, r18
    2672:	33 0f       	add	r19, r19
    2674:	33 0f       	add	r19, r19
    2676:	23 0f       	add	r18, r19
    2678:	9f 70       	andi	r25, 0x0F	; 15
    267a:	92 0f       	add	r25, r18
    267c:	9d 83       	std	Y+5, r25	; 0x05
    267e:	9e 81       	ldd	r25, Y+6	; 0x06
    2680:	29 2f       	mov	r18, r25
    2682:	22 95       	swap	r18
    2684:	2f 70       	andi	r18, 0x0F	; 15
    2686:	22 0f       	add	r18, r18
    2688:	32 2f       	mov	r19, r18
    268a:	33 0f       	add	r19, r19
    268c:	33 0f       	add	r19, r19
    268e:	23 0f       	add	r18, r19
    2690:	9f 70       	andi	r25, 0x0F	; 15
    2692:	92 0f       	add	r25, r18
    2694:	9c 5e       	subi	r25, 0xEC	; 236
    2696:	9e 83       	std	Y+6, r25	; 0x06
    2698:	df 91       	pop	r29
    269a:	cf 91       	pop	r28
    269c:	08 95       	ret

Disassembly of section .text.RTCWriteRegisters:

000039ca <RTCWriteRegisters>:
}

bool RTCWriteRegisters( uint8_t u8RegisterAddr,
						uint8_t* pu8Data, 
						uint8_t u8Length )
{
    39ca:	ff 92       	push	r15
    39cc:	0f 93       	push	r16
    39ce:	1f 93       	push	r17
    39d0:	cf 93       	push	r28
    39d2:	df 93       	push	r29
    39d4:	f8 2e       	mov	r15, r24
    39d6:	8b 01       	movw	r16, r22
    39d8:	c4 2f       	mov	r28, r20
	bool bResult;
	
	MBASSERT( u8Length >= 1 );
    39da:	41 11       	cpse	r20, r1
    39dc:	07 c0       	rjmp	.+14     	; 0x39ec <RTCWriteRegisters+0x22>
    39de:	42 e9       	ldi	r20, 0x92	; 146
    39e0:	50 e0       	ldi	r21, 0x00	; 0
    39e2:	6a e6       	ldi	r22, 0x6A	; 106
    39e4:	71 e0       	ldi	r23, 0x01	; 1
    39e6:	80 e0       	ldi	r24, 0x00	; 0
    39e8:	0e 94 81 21 	call	0x4302	; 0x4302 <PlatformAssert>
	
	// First send device address and write register address
	bResult = RTCStartTransaction( RTC_ADDRESS, false, true );
    39ec:	41 e0       	ldi	r20, 0x01	; 1
    39ee:	60 e0       	ldi	r22, 0x00	; 0
    39f0:	8e ed       	ldi	r24, 0xDE	; 222
    39f2:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <RTCStartTransaction>
    39f6:	d8 2f       	mov	r29, r24
	
	// Couldn't get an ACK?  Give up now
	if( false == bResult )
    39f8:	88 23       	and	r24, r24
    39fa:	99 f0       	breq	.+38     	; 0x3a22 <RTCWriteRegisters+0x58>
	{
		goto errorExit;
	}
	
	// Send the register address
	bResult = I2CTxByte( u8RegisterAddr );
    39fc:	8f 2d       	mov	r24, r15
    39fe:	0e 94 b0 1c 	call	0x3960	; 0x3960 <I2CTxByte>
    3a02:	d8 2f       	mov	r29, r24
	
	if( false == bResult )
    3a04:	81 11       	cpse	r24, r1
    3a06:	0b c0       	rjmp	.+22     	; 0x3a1e <RTCWriteRegisters+0x54>
    3a08:	0c c0       	rjmp	.+24     	; 0x3a22 <RTCWriteRegisters+0x58>
	}
	
	// Now immediately send the sequential data
	while( u8Length )
	{
		bResult = I2CTxByte( *pu8Data );
    3a0a:	f8 01       	movw	r30, r16
    3a0c:	80 81       	ld	r24, Z
    3a0e:	0e 94 b0 1c 	call	0x3960	; 0x3960 <I2CTxByte>
    3a12:	d8 2f       	mov	r29, r24
		
		if( false == bResult )
    3a14:	88 23       	and	r24, r24
    3a16:	29 f0       	breq	.+10     	; 0x3a22 <RTCWriteRegisters+0x58>
		{
			goto errorExit;
		}
		
		pu8Data++;
    3a18:	0f 5f       	subi	r16, 0xFF	; 255
    3a1a:	1f 4f       	sbci	r17, 0xFF	; 255
		u8Length--;
    3a1c:	c1 50       	subi	r28, 0x01	; 1
	{
		goto errorExit;
	}
	
	// Now immediately send the sequential data
	while( u8Length )
    3a1e:	c1 11       	cpse	r28, r1
    3a20:	f4 cf       	rjmp	.-24     	; 0x3a0a <RTCWriteRegisters+0x40>
		u8Length--;
	}
	
errorExit:

	I2CStop();
    3a22:	0e 94 3c 22 	call	0x4478	; 0x4478 <I2CStop>
	
	return( bResult );
}
    3a26:	8d 2f       	mov	r24, r29
    3a28:	df 91       	pop	r29
    3a2a:	cf 91       	pop	r28
    3a2c:	1f 91       	pop	r17
    3a2e:	0f 91       	pop	r16
    3a30:	ff 90       	pop	r15
    3a32:	08 95       	ret

Disassembly of section .text.RTCWriteHW:

000023c8 <RTCWriteHW>:
	sei();
	
	psSrc = gmtime((const time_t *) &u64Time);
	memcpy((void *) psTime, (void *) psSrc, sizeof(*psTime));
	return(true);
}
    23c8:	fc 01       	movw	r30, r24
    23ca:	20 81       	ld	r18, Z
    23cc:	8d ec       	ldi	r24, 0xCD	; 205
    23ce:	28 9f       	mul	r18, r24
    23d0:	91 2d       	mov	r25, r1
    23d2:	11 24       	eor	r1, r1
    23d4:	96 95       	lsr	r25
    23d6:	96 95       	lsr	r25
    23d8:	96 95       	lsr	r25
    23da:	30 e1       	ldi	r19, 0x10	; 16
    23dc:	93 9f       	mul	r25, r19
    23de:	a0 01       	movw	r20, r0
    23e0:	11 24       	eor	r1, r1
    23e2:	99 0f       	add	r25, r25
    23e4:	39 2f       	mov	r19, r25
    23e6:	33 0f       	add	r19, r19
    23e8:	33 0f       	add	r19, r19
    23ea:	93 0f       	add	r25, r19
    23ec:	29 1b       	sub	r18, r25
    23ee:	24 2b       	or	r18, r20
    23f0:	20 83       	st	Z, r18
    23f2:	21 81       	ldd	r18, Z+1	; 0x01
    23f4:	28 9f       	mul	r18, r24
    23f6:	91 2d       	mov	r25, r1
    23f8:	11 24       	eor	r1, r1
    23fa:	96 95       	lsr	r25
    23fc:	96 95       	lsr	r25
    23fe:	96 95       	lsr	r25
    2400:	30 e1       	ldi	r19, 0x10	; 16
    2402:	93 9f       	mul	r25, r19
    2404:	a0 01       	movw	r20, r0
    2406:	11 24       	eor	r1, r1
    2408:	99 0f       	add	r25, r25
    240a:	39 2f       	mov	r19, r25
    240c:	33 0f       	add	r19, r19
    240e:	33 0f       	add	r19, r19
    2410:	93 0f       	add	r25, r19
    2412:	29 1b       	sub	r18, r25
    2414:	24 2b       	or	r18, r20
    2416:	21 83       	std	Z+1, r18	; 0x01
    2418:	42 81       	ldd	r20, Z+2	; 0x02
    241a:	48 9f       	mul	r20, r24
    241c:	91 2d       	mov	r25, r1
    241e:	11 24       	eor	r1, r1
    2420:	96 95       	lsr	r25
    2422:	96 95       	lsr	r25
    2424:	96 95       	lsr	r25
    2426:	50 e1       	ldi	r21, 0x10	; 16
    2428:	95 9f       	mul	r25, r21
    242a:	90 01       	movw	r18, r0
    242c:	11 24       	eor	r1, r1
    242e:	99 0f       	add	r25, r25
    2430:	39 2f       	mov	r19, r25
    2432:	33 0f       	add	r19, r19
    2434:	33 0f       	add	r19, r19
    2436:	93 0f       	add	r25, r19
    2438:	49 1b       	sub	r20, r25
    243a:	24 2b       	or	r18, r20
    243c:	2f 7b       	andi	r18, 0xBF	; 191
    243e:	22 83       	std	Z+2, r18	; 0x02
    2440:	93 81       	ldd	r25, Z+3	; 0x03
    2442:	97 70       	andi	r25, 0x07	; 7
    2444:	98 60       	ori	r25, 0x08	; 8
    2446:	93 83       	std	Z+3, r25	; 0x03
    2448:	24 81       	ldd	r18, Z+4	; 0x04
    244a:	28 9f       	mul	r18, r24
    244c:	91 2d       	mov	r25, r1
    244e:	11 24       	eor	r1, r1
    2450:	96 95       	lsr	r25
    2452:	96 95       	lsr	r25
    2454:	96 95       	lsr	r25
    2456:	30 e1       	ldi	r19, 0x10	; 16
    2458:	93 9f       	mul	r25, r19
    245a:	a0 01       	movw	r20, r0
    245c:	11 24       	eor	r1, r1
    245e:	99 0f       	add	r25, r25
    2460:	39 2f       	mov	r19, r25
    2462:	33 0f       	add	r19, r19
    2464:	33 0f       	add	r19, r19
    2466:	93 0f       	add	r25, r19
    2468:	29 1b       	sub	r18, r25
    246a:	24 2b       	or	r18, r20
    246c:	24 83       	std	Z+4, r18	; 0x04
    246e:	25 81       	ldd	r18, Z+5	; 0x05
    2470:	28 9f       	mul	r18, r24
    2472:	91 2d       	mov	r25, r1
    2474:	11 24       	eor	r1, r1
    2476:	96 95       	lsr	r25
    2478:	96 95       	lsr	r25
    247a:	96 95       	lsr	r25
    247c:	30 e1       	ldi	r19, 0x10	; 16
    247e:	93 9f       	mul	r25, r19
    2480:	a0 01       	movw	r20, r0
    2482:	11 24       	eor	r1, r1
    2484:	99 0f       	add	r25, r25
    2486:	39 2f       	mov	r19, r25
    2488:	33 0f       	add	r19, r19
    248a:	33 0f       	add	r19, r19
    248c:	93 0f       	add	r25, r19
    248e:	29 1b       	sub	r18, r25
    2490:	24 2b       	or	r18, r20
    2492:	25 83       	std	Z+5, r18	; 0x05
    2494:	96 81       	ldd	r25, Z+6	; 0x06
    2496:	98 9f       	mul	r25, r24
    2498:	81 2d       	mov	r24, r1
    249a:	11 24       	eor	r1, r1
    249c:	86 95       	lsr	r24
    249e:	86 95       	lsr	r24
    24a0:	86 95       	lsr	r24
    24a2:	40 e1       	ldi	r20, 0x10	; 16
    24a4:	84 9f       	mul	r24, r20
    24a6:	90 01       	movw	r18, r0
    24a8:	11 24       	eor	r1, r1
    24aa:	88 0f       	add	r24, r24
    24ac:	38 2f       	mov	r19, r24
    24ae:	33 0f       	add	r19, r19
    24b0:	33 0f       	add	r19, r19
    24b2:	83 0f       	add	r24, r19
    24b4:	98 1b       	sub	r25, r24
    24b6:	92 2b       	or	r25, r18
    24b8:	96 83       	std	Z+6, r25	; 0x06
    24ba:	47 e0       	ldi	r20, 0x07	; 7
    24bc:	bf 01       	movw	r22, r30
    24be:	80 e0       	ldi	r24, 0x00	; 0
    24c0:	0e 94 e5 1c 	call	0x39ca	; 0x39ca <RTCWriteRegisters>
    24c4:	08 95       	ret

Disassembly of section .text.RTCSetTime:

00002ad6 <RTCSetTime>:

// This sets the RTC to the specific time passed in. True is returned
// if it's 
bool RTCSetTime(uint64_t u64Timet)
{
    2ad6:	0f 93       	push	r16
    2ad8:	1f 93       	push	r17
    2ada:	cf 93       	push	r28
    2adc:	df 93       	push	r29
    2ade:	cd b7       	in	r28, 0x3d	; 61
    2ae0:	de b7       	in	r29, 0x3e	; 62
    2ae2:	a8 97       	sbiw	r28, 0x28	; 40
    2ae4:	0f b6       	in	r0, 0x3f	; 63
    2ae6:	f8 94       	cli
    2ae8:	de bf       	out	0x3e, r29	; 62
    2aea:	0f be       	out	0x3f, r0	; 63
    2aec:	cd bf       	out	0x3d, r28	; 61
    2aee:	29 a3       	std	Y+33, r18	; 0x21
    2af0:	3a a3       	std	Y+34, r19	; 0x22
    2af2:	4b a3       	std	Y+35, r20	; 0x23
    2af4:	5c a3       	std	Y+36, r21	; 0x24
    2af6:	6d a3       	std	Y+37, r22	; 0x25
    2af8:	7e a3       	std	Y+38, r23	; 0x26
    2afa:	8f a3       	std	Y+39, r24	; 0x27
    2afc:	98 a7       	std	Y+40, r25	; 0x28
	struct tm sTime;
	struct tm *psTime;
	SMCP7940NTime sTimeHW;

	// Convert to GMTime
	memset((void *) &sTime, 0, sizeof(sTime));
    2afe:	fe 01       	movw	r30, r28
    2b00:	31 96       	adiw	r30, 0x01	; 1
    2b02:	89 e1       	ldi	r24, 0x19	; 25
    2b04:	df 01       	movw	r26, r30
    2b06:	1d 92       	st	X+, r1
    2b08:	8a 95       	dec	r24
    2b0a:	e9 f7       	brne	.-6      	; 0x2b06 <RTCSetTime+0x30>
	psTime = gmtime((const time_t *) &u64Timet);
    2b0c:	be 01       	movw	r22, r28
    2b0e:	6f 5d       	subi	r22, 0xDF	; 223
    2b10:	7f 4f       	sbci	r23, 0xFF	; 255
    2b12:	80 e8       	ldi	r24, 0x80	; 128
    2b14:	0e 94 15 25 	call	0x4a2a	; 0x4a2a <gmtime>
    2b18:	8c 01       	movw	r16, r24
	MBASSERT(psTime);
    2b1a:	89 2b       	or	r24, r25
    2b1c:	39 f4       	brne	.+14     	; 0x2b2c <RTCSetTime+0x56>
    2b1e:	42 e8       	ldi	r20, 0x82	; 130
    2b20:	51 e0       	ldi	r21, 0x01	; 1
    2b22:	6a e6       	ldi	r22, 0x6A	; 106
    2b24:	71 e0       	ldi	r23, 0x01	; 1
    2b26:	80 e0       	ldi	r24, 0x00	; 0
    2b28:	0e 94 81 21 	call	0x4302	; 0x4302 <PlatformAssert>
	memcpy((void *) &sTime, (void *) psTime, sizeof(sTime));
    2b2c:	a8 01       	movw	r20, r16
    2b2e:	60 e8       	ldi	r22, 0x80	; 128
    2b30:	29 e1       	ldi	r18, 0x19	; 25
    2b32:	30 e0       	ldi	r19, 0x00	; 0
    2b34:	ce 01       	movw	r24, r28
    2b36:	01 96       	adiw	r24, 0x01	; 1
    2b38:	0e 94 0d 21 	call	0x421a	; 0x421a <memcpy>
	
	// Now convert to hardware
	StructTMToHW(&sTime,
    2b3c:	be 01       	movw	r22, r28
    2b3e:	66 5e       	subi	r22, 0xE6	; 230
    2b40:	7f 4f       	sbci	r23, 0xFF	; 255
    2b42:	ce 01       	movw	r24, r28
    2b44:	01 96       	adiw	r24, 0x01	; 1
    2b46:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <StructTMToHW>
				 &sTimeHW);
	
	// Set the time			 
	cli();
    2b4a:	f8 94       	cli
	sg_u64Time = u64Timet;
    2b4c:	79 a1       	ldd	r23, Y+33	; 0x21
    2b4e:	6a a1       	ldd	r22, Y+34	; 0x22
    2b50:	5b a1       	ldd	r21, Y+35	; 0x23
    2b52:	4c a1       	ldd	r20, Y+36	; 0x24
    2b54:	3d a1       	ldd	r19, Y+37	; 0x25
    2b56:	2e a1       	ldd	r18, Y+38	; 0x26
    2b58:	9f a1       	ldd	r25, Y+39	; 0x27
    2b5a:	88 a5       	ldd	r24, Y+40	; 0x28
    2b5c:	70 93 3d 07 	sts	0x073D, r23	; 0x80073d <sg_u64Time>
    2b60:	60 93 3e 07 	sts	0x073E, r22	; 0x80073e <sg_u64Time+0x1>
    2b64:	50 93 3f 07 	sts	0x073F, r21	; 0x80073f <sg_u64Time+0x2>
    2b68:	40 93 40 07 	sts	0x0740, r20	; 0x800740 <sg_u64Time+0x3>
    2b6c:	30 93 41 07 	sts	0x0741, r19	; 0x800741 <sg_u64Time+0x4>
    2b70:	20 93 42 07 	sts	0x0742, r18	; 0x800742 <sg_u64Time+0x5>
    2b74:	90 93 43 07 	sts	0x0743, r25	; 0x800743 <sg_u64Time+0x6>
    2b78:	80 93 44 07 	sts	0x0744, r24	; 0x800744 <sg_u64Time+0x7>
	sei();
    2b7c:	78 94       	sei
	
	// Now go tell the hardware about it
	return(RTCWriteHW(&sTimeHW));
    2b7e:	ce 01       	movw	r24, r28
    2b80:	4a 96       	adiw	r24, 0x1a	; 26
    2b82:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <RTCWriteHW>
}
    2b86:	a8 96       	adiw	r28, 0x28	; 40
    2b88:	0f b6       	in	r0, 0x3f	; 63
    2b8a:	f8 94       	cli
    2b8c:	de bf       	out	0x3e, r29	; 62
    2b8e:	0f be       	out	0x3f, r0	; 63
    2b90:	cd bf       	out	0x3d, r28	; 61
    2b92:	df 91       	pop	r29
    2b94:	cf 91       	pop	r28
    2b96:	1f 91       	pop	r17
    2b98:	0f 91       	pop	r16
    2b9a:	08 95       	ret

Disassembly of section .text.RTCInit:

000011ae <RTCInit>:
	sei();
	
	psSrc = gmtime((const time_t *) &u64Time);
	memcpy((void *) psTime, (void *) psSrc, sizeof(*psTime));
	return(true);
}
    11ae:	ff 92       	push	r15
    11b0:	0f 93       	push	r16
    11b2:	1f 93       	push	r17
    11b4:	cf 93       	push	r28
    11b6:	df 93       	push	r29
    11b8:	cd b7       	in	r28, 0x3d	; 61
    11ba:	de b7       	in	r29, 0x3e	; 62
    11bc:	a1 97       	sbiw	r28, 0x21	; 33
    11be:	0f b6       	in	r0, 0x3f	; 63
    11c0:	f8 94       	cli
    11c2:	de bf       	out	0x3e, r29	; 62
    11c4:	0f be       	out	0x3f, r0	; 63
    11c6:	cd bf       	out	0x3d, r28	; 61
    11c8:	19 82       	std	Y+1, r1	; 0x01
    11ca:	41 e0       	ldi	r20, 0x01	; 1
    11cc:	be 01       	movw	r22, r28
    11ce:	6f 5f       	subi	r22, 0xFF	; 255
    11d0:	7f 4f       	sbci	r23, 0xFF	; 255
    11d2:	87 e0       	ldi	r24, 0x07	; 7
    11d4:	0e 94 e5 1c 	call	0x39ca	; 0x39ca <RTCWriteRegisters>
    11d8:	18 2f       	mov	r17, r24
    11da:	88 23       	and	r24, r24
    11dc:	09 f4       	brne	.+2      	; 0x11e0 <RTCInit+0x32>
    11de:	eb c0       	rjmp	.+470    	; 0x13b6 <RTCInit+0x208>
    11e0:	80 e8       	ldi	r24, 0x80	; 128
    11e2:	89 83       	std	Y+1, r24	; 0x01
    11e4:	41 e0       	ldi	r20, 0x01	; 1
    11e6:	be 01       	movw	r22, r28
    11e8:	6f 5f       	subi	r22, 0xFF	; 255
    11ea:	7f 4f       	sbci	r23, 0xFF	; 255
    11ec:	80 e0       	ldi	r24, 0x00	; 0
    11ee:	0e 94 e5 1c 	call	0x39ca	; 0x39ca <RTCWriteRegisters>
    11f2:	18 2f       	mov	r17, r24
    11f4:	81 11       	cpse	r24, r1
    11f6:	17 c0       	rjmp	.+46     	; 0x1226 <RTCInit+0x78>
    11f8:	de c0       	rjmp	.+444    	; 0x13b6 <RTCInit+0x208>
    11fa:	19 82       	std	Y+1, r1	; 0x01
    11fc:	41 e0       	ldi	r20, 0x01	; 1
    11fe:	be 01       	movw	r22, r28
    1200:	6f 5f       	subi	r22, 0xFF	; 255
    1202:	7f 4f       	sbci	r23, 0xFF	; 255
    1204:	83 e0       	ldi	r24, 0x03	; 3
    1206:	0e 94 08 1b 	call	0x3610	; 0x3610 <RTCReadRegisters>
    120a:	18 2f       	mov	r17, r24
    120c:	88 23       	and	r24, r24
    120e:	09 f4       	brne	.+2      	; 0x1212 <RTCInit+0x64>
    1210:	d2 c0       	rjmp	.+420    	; 0x13b6 <RTCInit+0x208>
    1212:	89 81       	ldd	r24, Y+1	; 0x01
    1214:	85 fd       	sbrc	r24, 5
    1216:	0a c0       	rjmp	.+20     	; 0x122c <RTCInit+0x7e>
    1218:	60 e0       	ldi	r22, 0x00	; 0
    121a:	70 e0       	ldi	r23, 0x00	; 0
    121c:	cb 01       	movw	r24, r22
    121e:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <Delay>
    1222:	0f 5f       	subi	r16, 0xFF	; 255
    1224:	01 c0       	rjmp	.+2      	; 0x1228 <RTCInit+0x7a>
    1226:	00 e0       	ldi	r16, 0x00	; 0
    1228:	08 3c       	cpi	r16, 0xC8	; 200
    122a:	38 f3       	brcs	.-50     	; 0x11fa <RTCInit+0x4c>
    122c:	08 3c       	cpi	r16, 0xC8	; 200
    122e:	08 f0       	brcs	.+2      	; 0x1232 <RTCInit+0x84>
    1230:	c2 c0       	rjmp	.+388    	; 0x13b6 <RTCInit+0x208>
    1232:	89 81       	ldd	r24, Y+1	; 0x01
    1234:	88 60       	ori	r24, 0x08	; 8
    1236:	89 83       	std	Y+1, r24	; 0x01
    1238:	41 e0       	ldi	r20, 0x01	; 1
    123a:	be 01       	movw	r22, r28
    123c:	6f 5f       	subi	r22, 0xFF	; 255
    123e:	7f 4f       	sbci	r23, 0xFF	; 255
    1240:	83 e0       	ldi	r24, 0x03	; 3
    1242:	0e 94 e5 1c 	call	0x39ca	; 0x39ca <RTCWriteRegisters>
    1246:	18 2f       	mov	r17, r24
    1248:	88 23       	and	r24, r24
    124a:	09 f4       	brne	.+2      	; 0x124e <RTCInit+0xa0>
    124c:	b4 c0       	rjmp	.+360    	; 0x13b6 <RTCInit+0x208>
    124e:	41 e0       	ldi	r20, 0x01	; 1
    1250:	be 01       	movw	r22, r28
    1252:	6f 5f       	subi	r22, 0xFF	; 255
    1254:	7f 4f       	sbci	r23, 0xFF	; 255
    1256:	82 e0       	ldi	r24, 0x02	; 2
    1258:	0e 94 08 1b 	call	0x3610	; 0x3610 <RTCReadRegisters>
    125c:	18 2f       	mov	r17, r24
    125e:	88 23       	and	r24, r24
    1260:	09 f4       	brne	.+2      	; 0x1264 <RTCInit+0xb6>
    1262:	a9 c0       	rjmp	.+338    	; 0x13b6 <RTCInit+0x208>
    1264:	89 81       	ldd	r24, Y+1	; 0x01
    1266:	8f 7b       	andi	r24, 0xBF	; 191
    1268:	89 83       	std	Y+1, r24	; 0x01
    126a:	41 e0       	ldi	r20, 0x01	; 1
    126c:	be 01       	movw	r22, r28
    126e:	6f 5f       	subi	r22, 0xFF	; 255
    1270:	7f 4f       	sbci	r23, 0xFF	; 255
    1272:	82 e0       	ldi	r24, 0x02	; 2
    1274:	0e 94 e5 1c 	call	0x39ca	; 0x39ca <RTCWriteRegisters>
    1278:	18 2f       	mov	r17, r24
    127a:	88 23       	and	r24, r24
    127c:	09 f4       	brne	.+2      	; 0x1280 <RTCInit+0xd2>
    127e:	9b c0       	rjmp	.+310    	; 0x13b6 <RTCInit+0x208>
    1280:	ce 01       	movw	r24, r28
    1282:	02 96       	adiw	r24, 0x02	; 2
    1284:	0e 94 de 12 	call	0x25bc	; 0x25bc <RTCReadHW>
    1288:	18 2f       	mov	r17, r24
    128a:	88 23       	and	r24, r24
    128c:	09 f4       	brne	.+2      	; 0x1290 <RTCInit+0xe2>
    128e:	93 c0       	rjmp	.+294    	; 0x13b6 <RTCInit+0x208>
    1290:	8a 81       	ldd	r24, Y+2	; 0x02
    1292:	8c 33       	cpi	r24, 0x3C	; 60
    1294:	10 f4       	brcc	.+4      	; 0x129a <RTCInit+0xec>
    1296:	10 e0       	ldi	r17, 0x00	; 0
    1298:	01 c0       	rjmp	.+2      	; 0x129c <RTCInit+0xee>
    129a:	11 e0       	ldi	r17, 0x01	; 1
    129c:	8b 81       	ldd	r24, Y+3	; 0x03
    129e:	8c 33       	cpi	r24, 0x3C	; 60
    12a0:	08 f0       	brcs	.+2      	; 0x12a4 <RTCInit+0xf6>
    12a2:	11 e0       	ldi	r17, 0x01	; 1
    12a4:	8c 81       	ldd	r24, Y+4	; 0x04
    12a6:	8c 33       	cpi	r24, 0x3C	; 60
    12a8:	08 f0       	brcs	.+2      	; 0x12ac <RTCInit+0xfe>
    12aa:	11 e0       	ldi	r17, 0x01	; 1
    12ac:	8d 81       	ldd	r24, Y+5	; 0x05
    12ae:	81 50       	subi	r24, 0x01	; 1
    12b0:	87 30       	cpi	r24, 0x07	; 7
    12b2:	08 f0       	brcs	.+2      	; 0x12b6 <RTCInit+0x108>
    12b4:	11 e0       	ldi	r17, 0x01	; 1
    12b6:	2f 81       	ldd	r18, Y+7	; 0x07
    12b8:	8f ef       	ldi	r24, 0xFF	; 255
    12ba:	82 0f       	add	r24, r18
    12bc:	8c 30       	cpi	r24, 0x0C	; 12
    12be:	18 f5       	brcc	.+70     	; 0x1306 <RTCInit+0x158>
    12c0:	0e 81       	ldd	r16, Y+6	; 0x06
    12c2:	00 23       	and	r16, r16
    12c4:	11 f1       	breq	.+68     	; 0x130a <RTCInit+0x15c>
    12c6:	82 2f       	mov	r24, r18
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	01 97       	sbiw	r24, 0x01	; 1
    12cc:	09 2e       	mov	r0, r25
    12ce:	00 0c       	add	r0, r0
    12d0:	aa 0b       	sbc	r26, r26
    12d2:	83 56       	subi	r24, 0x63	; 99
    12d4:	9e 4f       	sbci	r25, 0xFE	; 254
    12d6:	af 4f       	sbci	r26, 0xFF	; 255
    12d8:	fc 01       	movw	r30, r24
    12da:	f4 90       	lpm	r15, Z
    12dc:	a7 fd       	sbrc	r26, 7
    12de:	f0 80       	ld	r15, Z
    12e0:	22 30       	cpi	r18, 0x02	; 2
    12e2:	71 f4       	brne	.+28     	; 0x1300 <RTCInit+0x152>
    12e4:	88 85       	ldd	r24, Y+8	; 0x08
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	84 31       	cpi	r24, 0x14	; 20
    12ea:	91 05       	cpc	r25, r1
    12ec:	18 f4       	brcc	.+6      	; 0x12f4 <RTCInit+0x146>
    12ee:	8c 5c       	subi	r24, 0xCC	; 204
    12f0:	97 4f       	sbci	r25, 0xF7	; 247
    12f2:	02 c0       	rjmp	.+4      	; 0x12f8 <RTCInit+0x14a>
    12f4:	80 53       	subi	r24, 0x30	; 48
    12f6:	98 4f       	sbci	r25, 0xF8	; 248
    12f8:	0e 94 8d 20 	call	0x411a	; 0x411a <IsLeapYear>
    12fc:	81 11       	cpse	r24, r1
    12fe:	f3 94       	inc	r15
    1300:	f0 16       	cp	r15, r16
    1302:	28 f0       	brcs	.+10     	; 0x130e <RTCInit+0x160>
    1304:	05 c0       	rjmp	.+10     	; 0x1310 <RTCInit+0x162>
    1306:	11 e0       	ldi	r17, 0x01	; 1
    1308:	03 c0       	rjmp	.+6      	; 0x1310 <RTCInit+0x162>
    130a:	11 e0       	ldi	r17, 0x01	; 1
    130c:	01 c0       	rjmp	.+2      	; 0x1310 <RTCInit+0x162>
    130e:	11 e0       	ldi	r17, 0x01	; 1
    1310:	11 23       	and	r17, r17
    1312:	b9 f0       	breq	.+46     	; 0x1342 <RTCInit+0x194>
    1314:	1a 82       	std	Y+2, r1	; 0x02
    1316:	1b 82       	std	Y+3, r1	; 0x03
    1318:	1c 82       	std	Y+4, r1	; 0x04
    131a:	81 e0       	ldi	r24, 0x01	; 1
    131c:	8e 83       	std	Y+6, r24	; 0x06
    131e:	8f 83       	std	Y+7, r24	; 0x07
    1320:	88 e1       	ldi	r24, 0x18	; 24
    1322:	88 87       	std	Y+8, r24	; 0x08
    1324:	ce 01       	movw	r24, r28
    1326:	02 96       	adiw	r24, 0x02	; 2
    1328:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <RTCWriteHW>
    132c:	18 2f       	mov	r17, r24
    132e:	88 23       	and	r24, r24
    1330:	09 f4       	brne	.+2      	; 0x1334 <RTCInit+0x186>
    1332:	41 c0       	rjmp	.+130    	; 0x13b6 <RTCInit+0x208>
    1334:	ce 01       	movw	r24, r28
    1336:	02 96       	adiw	r24, 0x02	; 2
    1338:	0e 94 de 12 	call	0x25bc	; 0x25bc <RTCReadHW>
    133c:	18 2f       	mov	r17, r24
    133e:	88 23       	and	r24, r24
    1340:	d1 f1       	breq	.+116    	; 0x13b6 <RTCInit+0x208>
    1342:	be 01       	movw	r22, r28
    1344:	67 5f       	subi	r22, 0xF7	; 247
    1346:	7f 4f       	sbci	r23, 0xFF	; 255
    1348:	ce 01       	movw	r24, r28
    134a:	02 96       	adiw	r24, 0x02	; 2
    134c:	0e 94 47 1b 	call	0x368e	; 0x368e <HWToStructTM>
    1350:	ce 01       	movw	r24, r28
    1352:	09 96       	adiw	r24, 0x09	; 9
    1354:	0e 94 45 1a 	call	0x348a	; 0x348a <mktime>
    1358:	8b 01       	movw	r16, r22
    135a:	9c 01       	movw	r18, r24
    135c:	f8 94       	cli
    135e:	00 93 3d 07 	sts	0x073D, r16	; 0x80073d <sg_u64Time>
    1362:	10 93 3e 07 	sts	0x073E, r17	; 0x80073e <sg_u64Time+0x1>
    1366:	20 93 3f 07 	sts	0x073F, r18	; 0x80073f <sg_u64Time+0x2>
    136a:	30 93 40 07 	sts	0x0740, r19	; 0x800740 <sg_u64Time+0x3>
    136e:	10 92 41 07 	sts	0x0741, r1	; 0x800741 <sg_u64Time+0x4>
    1372:	10 92 42 07 	sts	0x0742, r1	; 0x800742 <sg_u64Time+0x5>
    1376:	10 92 43 07 	sts	0x0743, r1	; 0x800743 <sg_u64Time+0x6>
    137a:	10 92 44 07 	sts	0x0744, r1	; 0x800744 <sg_u64Time+0x7>
    137e:	78 94       	sei
    1380:	87 b1       	in	r24, 0x07	; 7
    1382:	8e 7f       	andi	r24, 0xFE	; 254
    1384:	87 b9       	out	0x07, r24	; 7
    1386:	88 b1       	in	r24, 0x08	; 8
    1388:	81 60       	ori	r24, 0x01	; 1
    138a:	88 b9       	out	0x08, r24	; 8
    138c:	41 e0       	ldi	r20, 0x01	; 1
    138e:	be 01       	movw	r22, r28
    1390:	6f 5f       	subi	r22, 0xFF	; 255
    1392:	7f 4f       	sbci	r23, 0xFF	; 255
    1394:	87 e0       	ldi	r24, 0x07	; 7
    1396:	0e 94 08 1b 	call	0x3610	; 0x3610 <RTCReadRegisters>
    139a:	18 2f       	mov	r17, r24
    139c:	88 23       	and	r24, r24
    139e:	59 f0       	breq	.+22     	; 0x13b6 <RTCInit+0x208>
    13a0:	89 81       	ldd	r24, Y+1	; 0x01
    13a2:	80 64       	ori	r24, 0x40	; 64
    13a4:	89 83       	std	Y+1, r24	; 0x01
    13a6:	41 e0       	ldi	r20, 0x01	; 1
    13a8:	be 01       	movw	r22, r28
    13aa:	6f 5f       	subi	r22, 0xFF	; 255
    13ac:	7f 4f       	sbci	r23, 0xFF	; 255
    13ae:	87 e0       	ldi	r24, 0x07	; 7
    13b0:	0e 94 e5 1c 	call	0x39ca	; 0x39ca <RTCWriteRegisters>
    13b4:	18 2f       	mov	r17, r24
    13b6:	81 2f       	mov	r24, r17
    13b8:	a1 96       	adiw	r28, 0x21	; 33
    13ba:	0f b6       	in	r0, 0x3f	; 63
    13bc:	f8 94       	cli
    13be:	de bf       	out	0x3e, r29	; 62
    13c0:	0f be       	out	0x3f, r0	; 63
    13c2:	cd bf       	out	0x3d, r28	; 61
    13c4:	df 91       	pop	r29
    13c6:	cf 91       	pop	r28
    13c8:	1f 91       	pop	r17
    13ca:	0f 91       	pop	r16
    13cc:	ff 90       	pop	r15
    13ce:	08 95       	ret

Disassembly of section .text.SDSetCS:

000048fe <SDSetCS>:
static uint8_t sg_u8CSD[16];

// This will provide a !CS assertion or deassertion with pre/postamble clock
static void SDSetCS(bool bAsserted)
{
	if (bAsserted)
    48fe:	88 23       	and	r24, r24
    4900:	21 f0       	breq	.+8      	; 0x490a <SDSetCS+0xc>
	{
		SD_CS_ASSERT();
    4902:	88 b1       	in	r24, 0x08	; 8
    4904:	8f 7b       	andi	r24, 0xBF	; 191
    4906:	88 b9       	out	0x08, r24	; 8
    4908:	08 95       	ret
	}
	else
	{
		SD_CS_DEASSERT();
    490a:	88 b1       	in	r24, 0x08	; 8
    490c:	80 64       	ori	r24, 0x40	; 64
    490e:	88 b9       	out	0x08, r24	; 8
    4910:	08 95       	ret

Disassembly of section .text.SDPowerup:

0000403a <SDPowerup>:

// Sends SD powerup sequence to card and attempts to initialize it
static void SDPowerup(void)
{
	// Set SPI baud rate to (SD_SPEED_SLOW, which is the max for the init sequence)
	(void) SPISetBaudRate(SD_SPEED_SLOW);
    403a:	60 e8       	ldi	r22, 0x80	; 128
    403c:	7a e1       	ldi	r23, 0x1A	; 26
    403e:	86 e0       	ldi	r24, 0x06	; 6
    4040:	90 e0       	ldi	r25, 0x00	; 0
    4042:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <SPISetBaudRate>
	
	// Deassert chip select
	SD_CS_DEASSERT();
    4046:	88 b1       	in	r24, 0x08	; 8
    4048:	80 64       	ori	r24, 0x40	; 64
    404a:	88 b9       	out	0x08, r24	; 8
	
	// Delay time after possible deassertion (2ms)
	Delay(2000);
    404c:	60 ed       	ldi	r22, 0xD0	; 208
    404e:	77 e0       	ldi	r23, 0x07	; 7
    4050:	80 e0       	ldi	r24, 0x00	; 0
    4052:	90 e0       	ldi	r25, 0x00	; 0
    4054:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <Delay>
	
	// Send 74/80 bits of 0xff as a reset (80 bits required since we're byte-
	// sized transactions)
	SPIWritePattern(0xff,
    4058:	40 e1       	ldi	r20, 0x10	; 16
    405a:	50 e0       	ldi	r21, 0x00	; 0
    405c:	6f ef       	ldi	r22, 0xFF	; 255
    405e:	70 e0       	ldi	r23, 0x00	; 0
    4060:	82 e0       	ldi	r24, 0x02	; 2
    4062:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <SPITransaction>
				    128/8);

	// Delay time after write
	Delay(2000);
    4066:	60 ed       	ldi	r22, 0xD0	; 208
    4068:	77 e0       	ldi	r23, 0x07	; 7
    406a:	80 e0       	ldi	r24, 0x00	; 0
    406c:	90 e0       	ldi	r25, 0x00	; 0
    406e:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <Delay>
    4072:	08 95       	ret

Disassembly of section .text.SDCommand:

00002f4c <SDCommand>:
#define CMD8_CRC    0x87

// Sends a command to the SD card, including argument an CRC
static uint8_t SDCommand(uint8_t u8Cmd,
						 uint32_t u32Arg)
{
    2f4c:	df 92       	push	r13
    2f4e:	ef 92       	push	r14
    2f50:	ff 92       	push	r15
    2f52:	0f 93       	push	r16
    2f54:	1f 93       	push	r17
    2f56:	cf 93       	push	r28
    2f58:	df 93       	push	r29
    2f5a:	cd b7       	in	r28, 0x3d	; 61
    2f5c:	de b7       	in	r29, 0x3e	; 62
    2f5e:	27 97       	sbiw	r28, 0x07	; 7
    2f60:	0f b6       	in	r0, 0x3f	; 63
    2f62:	f8 94       	cli
    2f64:	de bf       	out	0x3e, r29	; 62
    2f66:	0f be       	out	0x3f, r0	; 63
    2f68:	cd bf       	out	0x3d, r28	; 61
    2f6a:	18 2f       	mov	r17, r24
    2f6c:	04 2f       	mov	r16, r20
    2f6e:	f5 2e       	mov	r15, r21
    2f70:	e6 2e       	mov	r14, r22
    2f72:	d7 2e       	mov	r13, r23
	uint8_t u8Buffer[sizeof(u8Cmd) + sizeof(u32Arg) + sizeof(u8CRC)];
	uint8_t u8Response;
	uint8_t u8Count;
	
	// If this is an ACMD, prefix a CMD55
	if (u8Cmd & 0x80)
    2f74:	88 23       	and	r24, r24
    2f76:	4c f4       	brge	.+18     	; 0x2f8a <SDCommand+0x3e>
	{
		u8Response = SDCommand(CMD55,
    2f78:	40 e0       	ldi	r20, 0x00	; 0
    2f7a:	50 e0       	ldi	r21, 0x00	; 0
    2f7c:	ba 01       	movw	r22, r20
    2f7e:	87 e3       	ldi	r24, 0x37	; 55
    2f80:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <SDCommand>
    2f84:	8f 83       	std	Y+7, r24	; 0x07
							   CMD55_ARG);
							   
		if (u8Response > 1)
    2f86:	82 30       	cpi	r24, 0x02	; 2
    2f88:	40 f5       	brcc	.+80     	; 0x2fda <SDCommand+0x8e>
			return(u8Response);
		}
	}
	
	// SD Command (OR in 0x40 so bit 47 is always a 1
	u8Buffer[0] = (u8Cmd & 0x7f) | 0x40;
    2f8a:	81 2f       	mov	r24, r17
    2f8c:	8f 73       	andi	r24, 0x3F	; 63
    2f8e:	80 64       	ori	r24, 0x40	; 64
    2f90:	89 83       	std	Y+1, r24	; 0x01
	
	// 32 Bits of argument
	u8Buffer[1] = (uint8_t) (u32Arg >> 24);
    2f92:	da 82       	std	Y+2, r13	; 0x02
	u8Buffer[2] = (uint8_t) (u32Arg >> 16);
    2f94:	eb 82       	std	Y+3, r14	; 0x03
	u8Buffer[3] = (uint8_t) (u32Arg >> 8);
    2f96:	fc 82       	std	Y+4, r15	; 0x04
	u8Buffer[4] = (uint8_t) (u32Arg >> 0);
    2f98:	0d 83       	std	Y+5, r16	; 0x05
	
	// Valid CRCs for specific commands
	u8CRC = 0;
	if (CMD0 == u8Cmd)
    2f9a:	11 23       	and	r17, r17
    2f9c:	11 f0       	breq	.+4      	; 0x2fa2 <SDCommand+0x56>
	u8Buffer[2] = (uint8_t) (u32Arg >> 16);
	u8Buffer[3] = (uint8_t) (u32Arg >> 8);
	u8Buffer[4] = (uint8_t) (u32Arg >> 0);
	
	// Valid CRCs for specific commands
	u8CRC = 0;
    2f9e:	80 e0       	ldi	r24, 0x00	; 0
    2fa0:	01 c0       	rjmp	.+2      	; 0x2fa4 <SDCommand+0x58>
	if (CMD0 == u8Cmd)
	{
		u8CRC = 0x95;
    2fa2:	85 e9       	ldi	r24, 0x95	; 149
	}
	
	if (CMD8 == u8Cmd)
    2fa4:	18 30       	cpi	r17, 0x08	; 8
    2fa6:	09 f4       	brne	.+2      	; 0x2faa <SDCommand+0x5e>
	{
		u8CRC = 0x87;
    2fa8:	87 e8       	ldi	r24, 0x87	; 135
	}
	
	// Now the CRC - Bit 0 means "ignore CRC"
	u8Buffer[5] = (uint8_t) (u8CRC | 0x01);
    2faa:	81 60       	ori	r24, 0x01	; 1
    2fac:	8e 83       	std	Y+6, r24	; 0x06
	
	// Send all bytes to the SD card
	SPIWrite(u8Buffer,
    2fae:	46 e0       	ldi	r20, 0x06	; 6
    2fb0:	50 e0       	ldi	r21, 0x00	; 0
    2fb2:	be 01       	movw	r22, r28
    2fb4:	6f 5f       	subi	r22, 0xFF	; 255
    2fb6:	7f 4f       	sbci	r23, 0xFF	; 255
    2fb8:	81 e0       	ldi	r24, 0x01	; 1
    2fba:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <SPITransaction>
			 sizeof(u8Buffer));
			 
	u8Count = 10;
    2fbe:	1a e0       	ldi	r17, 0x0A	; 10
	
	do 
	{
		SPIRead(&u8Response,
    2fc0:	41 e0       	ldi	r20, 0x01	; 1
    2fc2:	50 e0       	ldi	r21, 0x00	; 0
    2fc4:	be 01       	movw	r22, r28
    2fc6:	69 5f       	subi	r22, 0xF9	; 249
    2fc8:	7f 4f       	sbci	r23, 0xFF	; 255
    2fca:	83 e0       	ldi	r24, 0x03	; 3
    2fcc:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <SPITransaction>
				sizeof(u8Response));
	} while ((u8Response & 0x80) && --u8Count);
    2fd0:	8f 81       	ldd	r24, Y+7	; 0x07
    2fd2:	88 23       	and	r24, r24
    2fd4:	14 f4       	brge	.+4      	; 0x2fda <SDCommand+0x8e>
    2fd6:	11 50       	subi	r17, 0x01	; 1
    2fd8:	99 f7       	brne	.-26     	; 0x2fc0 <SDCommand+0x74>
	
	return(u8Response);
}
    2fda:	27 96       	adiw	r28, 0x07	; 7
    2fdc:	0f b6       	in	r0, 0x3f	; 63
    2fde:	f8 94       	cli
    2fe0:	de bf       	out	0x3e, r29	; 62
    2fe2:	0f be       	out	0x3f, r0	; 63
    2fe4:	cd bf       	out	0x3d, r28	; 61
    2fe6:	df 91       	pop	r29
    2fe8:	cf 91       	pop	r28
    2fea:	1f 91       	pop	r17
    2fec:	0f 91       	pop	r16
    2fee:	ff 90       	pop	r15
    2ff0:	ef 90       	pop	r14
    2ff2:	df 90       	pop	r13
    2ff4:	08 95       	ret

Disassembly of section .text.SDGoIdle:

00004794 <SDGoIdle>:
			sizeof(uint32_t));
}

// SD - Go idle!
static uint8_t SDGoIdle(uint8_t *pu8Response)
{
    4794:	cf 93       	push	r28
	uint8_t u8Response;
	
	SDSetCS(true);
    4796:	81 e0       	ldi	r24, 0x01	; 1
    4798:	0e 94 7f 24 	call	0x48fe	; 0x48fe <SDSetCS>
	
	// Send our CMD0 (go idle)
	u8Response = SDCommand(CMD0,
    479c:	40 e0       	ldi	r20, 0x00	; 0
    479e:	50 e0       	ldi	r21, 0x00	; 0
    47a0:	ba 01       	movw	r22, r20
    47a2:	80 e0       	ldi	r24, 0x00	; 0
    47a4:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <SDCommand>
    47a8:	c8 2f       	mov	r28, r24
						   CMD0_ARG);
						   
	SDSetCS(false);
    47aa:	80 e0       	ldi	r24, 0x00	; 0
    47ac:	0e 94 7f 24 	call	0x48fe	; 0x48fe <SDSetCS>

	return(u8Response);
}
    47b0:	8c 2f       	mov	r24, r28
    47b2:	cf 91       	pop	r28
    47b4:	08 95       	ret

Disassembly of section .text.SDSendOpCondition:

0000414e <SDSendOpCondition>:
#define ACMD41_CRC  0x00

// Send operation condition
static uint8_t SDSendOpCondition(uint8_t *pu8Response,
								 uint32_t u32Arg)
{
    414e:	cf 92       	push	r12
    4150:	df 92       	push	r13
    4152:	ef 92       	push	r14
    4154:	ff 92       	push	r15
    4156:	cf 93       	push	r28
    4158:	6a 01       	movw	r12, r20
    415a:	7b 01       	movw	r14, r22
	uint8_t u8Response;
	
	// Assert chip select
	SDSetCS(true);
    415c:	81 e0       	ldi	r24, 0x01	; 1
    415e:	0e 94 7f 24 	call	0x48fe	; 0x48fe <SDSetCS>
	
	// Send the app command
	u8Response = SDCommand(ACMD41,
    4162:	b7 01       	movw	r22, r14
    4164:	a6 01       	movw	r20, r12
    4166:	89 ea       	ldi	r24, 0xA9	; 169
    4168:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <SDCommand>
    416c:	c8 2f       	mov	r28, r24
						   u32Arg);
	// Deassert chip select
	SDSetCS(false);
    416e:	80 e0       	ldi	r24, 0x00	; 0
    4170:	0e 94 7f 24 	call	0x48fe	; 0x48fe <SDSetCS>
	
	return(u8Response);
}
    4174:	8c 2f       	mov	r24, r28
    4176:	cf 91       	pop	r28
    4178:	ff 90       	pop	r15
    417a:	ef 90       	pop	r14
    417c:	df 90       	pop	r13
    417e:	cf 90       	pop	r12
    4180:	08 95       	ret

Disassembly of section .text.SDSendOpConditionArg:

00003c18 <SDSendOpConditionArg>:
	return(u8Response);
}

static uint8_t SDSendOpConditionArg(uint8_t *pu8Resp,
									uint32_t u32Arg)
{
    3c18:	cf 92       	push	r12
    3c1a:	df 92       	push	r13
    3c1c:	ef 92       	push	r14
    3c1e:	ff 92       	push	r15
    3c20:	0f 93       	push	r16
    3c22:	1f 93       	push	r17
    3c24:	cf 93       	push	r28
    3c26:	df 93       	push	r29
    3c28:	8c 01       	movw	r16, r24
    3c2a:	6a 01       	movw	r12, r20
    3c2c:	7b 01       	movw	r14, r22
	uint8_t u8Attempts;
	uint8_t u8Response;
	
	u8Attempts = 0;
    3c2e:	c0 e0       	ldi	r28, 0x00	; 0
		
	// Loop until it comes alive - if it comes alive. Put the card in idle state.
	while (u8Attempts < SD_GO_IDLE_RETRIES)
    3c30:	0f c0       	rjmp	.+30     	; 0x3c50 <SDSendOpConditionArg+0x38>
	{
		u8Response = SDSendOpCondition(pu8Resp,
    3c32:	b7 01       	movw	r22, r14
    3c34:	a6 01       	movw	r20, r12
    3c36:	c8 01       	movw	r24, r16
    3c38:	0e 94 a7 20 	call	0x414e	; 0x414e <SDSendOpCondition>
    3c3c:	d8 2f       	mov	r29, r24
									   u32Arg);
		if (0 == u8Response)
    3c3e:	88 23       	and	r24, r24
    3c40:	49 f0       	breq	.+18     	; 0x3c54 <SDSendOpConditionArg+0x3c>
		{
			break;
		}
			
		// Give it a little time to settle
		Delay(10000);
    3c42:	60 e1       	ldi	r22, 0x10	; 16
    3c44:	77 e2       	ldi	r23, 0x27	; 39
    3c46:	80 e0       	ldi	r24, 0x00	; 0
    3c48:	90 e0       	ldi	r25, 0x00	; 0
    3c4a:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <Delay>
		u8Attempts++;
    3c4e:	cf 5f       	subi	r28, 0xFF	; 255
	uint8_t u8Response;
	
	u8Attempts = 0;
		
	// Loop until it comes alive - if it comes alive. Put the card in idle state.
	while (u8Attempts < SD_GO_IDLE_RETRIES)
    3c50:	c4 36       	cpi	r28, 0x64	; 100
    3c52:	78 f3       	brcs	.-34     	; 0x3c32 <SDSendOpConditionArg+0x1a>
		Delay(10000);
		u8Attempts++;
	}

	// If we've retried too much, bail out. We're done.
	if (SD_GO_IDLE_RETRIES == u8Attempts)
    3c54:	c4 36       	cpi	r28, 0x64	; 100
    3c56:	09 f4       	brne	.+2      	; 0x3c5a <SDSendOpConditionArg+0x42>
	{
		u8Response = 0x80;
    3c58:	d0 e8       	ldi	r29, 0x80	; 128
	}
	
	return(u8Response);
}
    3c5a:	8d 2f       	mov	r24, r29
    3c5c:	df 91       	pop	r29
    3c5e:	cf 91       	pop	r28
    3c60:	1f 91       	pop	r17
    3c62:	0f 91       	pop	r16
    3c64:	ff 90       	pop	r15
    3c66:	ef 90       	pop	r14
    3c68:	df 90       	pop	r13
    3c6a:	cf 90       	pop	r12
    3c6c:	08 95       	ret

Disassembly of section .text.SDWaitResponse7:

000049cc <SDWaitResponse7>:

// This will return true if a response 7 was received, otherwise false
static void SDWaitResponse7(uint8_t *pu8ResponseByte)
{
	// Go read the remaining 4 bytes
	SPIRead(pu8ResponseByte,
    49cc:	44 e0       	ldi	r20, 0x04	; 4
    49ce:	50 e0       	ldi	r21, 0x00	; 0
    49d0:	bc 01       	movw	r22, r24
    49d2:	83 e0       	ldi	r24, 0x03	; 3
    49d4:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <SPITransaction>
    49d8:	08 95       	ret

Disassembly of section .text.SDSendInterfaceCondition:

00004182 <SDSendInterfaceCondition>:
	return(u8Response);
}

// Send interface condition
static uint8_t SDSendInterfaceCondition(uint8_t *pu8Response)
{
    4182:	0f 93       	push	r16
    4184:	1f 93       	push	r17
    4186:	cf 93       	push	r28
    4188:	8c 01       	movw	r16, r24
	uint8_t u8Response;
	
	SDSetCS(true);
    418a:	81 e0       	ldi	r24, 0x01	; 1
    418c:	0e 94 7f 24 	call	0x48fe	; 0x48fe <SDSetCS>
	
	// Send our CMD8 Send interface condition
	u8Response = SDCommand(CMD8,
    4190:	4a ea       	ldi	r20, 0xAA	; 170
    4192:	51 e0       	ldi	r21, 0x01	; 1
    4194:	60 e0       	ldi	r22, 0x00	; 0
    4196:	70 e0       	ldi	r23, 0x00	; 0
    4198:	88 e0       	ldi	r24, 0x08	; 8
    419a:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <SDCommand>
    419e:	c8 2f       	mov	r28, r24
						   CMD8_ARG);
						   
	SDWaitResponse7(pu8Response);
    41a0:	c8 01       	movw	r24, r16
    41a2:	0e 94 e6 24 	call	0x49cc	; 0x49cc <SDWaitResponse7>
		
	SDSetCS(false);
    41a6:	80 e0       	ldi	r24, 0x00	; 0
    41a8:	0e 94 7f 24 	call	0x48fe	; 0x48fe <SDSetCS>

	return(u8Response);
}
    41ac:	8c 2f       	mov	r24, r28
    41ae:	cf 91       	pop	r28
    41b0:	1f 91       	pop	r17
    41b2:	0f 91       	pop	r16
    41b4:	08 95       	ret

Disassembly of section .text.SDReadOCR:

000041b6 <SDReadOCR>:
#define CMD58_ARG   0x00000000
#define CMD58_CRC   0x00

// Go read the OCR
static uint8_t SDReadOCR(uint8_t *pu8Response)
{
    41b6:	0f 93       	push	r16
    41b8:	1f 93       	push	r17
    41ba:	cf 93       	push	r28
    41bc:	8c 01       	movw	r16, r24
	uint8_t u8Response;
	
	// Assert chip select
	SDSetCS(true);
    41be:	81 e0       	ldi	r24, 0x01	; 1
    41c0:	0e 94 7f 24 	call	0x48fe	; 0x48fe <SDSetCS>
	
	// Send the app command
	u8Response = SDCommand(CMD58,
    41c4:	40 e0       	ldi	r20, 0x00	; 0
    41c6:	50 e0       	ldi	r21, 0x00	; 0
    41c8:	ba 01       	movw	r22, r20
    41ca:	8a e3       	ldi	r24, 0x3A	; 58
    41cc:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <SDCommand>
    41d0:	c8 2f       	mov	r28, r24
						   CMD58_ARG);

	// Read response
	SDWaitResponse7(pu8Response);
    41d2:	c8 01       	movw	r24, r16
    41d4:	0e 94 e6 24 	call	0x49cc	; 0x49cc <SDWaitResponse7>

	// Deassert chip select
	SDSetCS(false);
    41d8:	80 e0       	ldi	r24, 0x00	; 0
    41da:	0e 94 7f 24 	call	0x48fe	; 0x48fe <SDSetCS>
	
	return(u8Response);
}
    41de:	8c 2f       	mov	r24, r28
    41e0:	cf 91       	pop	r28
    41e2:	1f 91       	pop	r17
    41e4:	0f 91       	pop	r16
    41e6:	08 95       	ret

Disassembly of section .text.SDReadCSD:

0000370a <SDReadCSD>:
#define CMD9_ARG    0x000000000
#define CMD9_CRC    0x00

// Read CSD (card specific data) - CSD is 128 bits - see the SD spec for details.
static uint8_t SDReadCSD(uint8_t *pu8CSD)
{
    370a:	ef 92       	push	r14
    370c:	ff 92       	push	r15
    370e:	0f 93       	push	r16
    3710:	1f 93       	push	r17
    3712:	cf 93       	push	r28
    3714:	df 93       	push	r29
    3716:	0f 92       	push	r0
    3718:	cd b7       	in	r28, 0x3d	; 61
    371a:	de b7       	in	r29, 0x3e	; 62
    371c:	7c 01       	movw	r14, r24
	uint8_t u8Response;
	uint8_t u8CmdResponse;
	uint8_t u8Count = 8;
	
	SDSetCS(true);
    371e:	81 e0       	ldi	r24, 0x01	; 1
    3720:	0e 94 7f 24 	call	0x48fe	; 0x48fe <SDSetCS>
	
	// Send our CMD9 (read CSD)
	u8CmdResponse = SDCommand(CMD9,
    3724:	40 e0       	ldi	r20, 0x00	; 0
    3726:	50 e0       	ldi	r21, 0x00	; 0
    3728:	ba 01       	movw	r22, r20
    372a:	89 e0       	ldi	r24, 0x09	; 9
    372c:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <SDCommand>
    3730:	08 2f       	mov	r16, r24
							  CMD9_ARG);
	
	// Success! Let's get a response
	if (u8CmdResponse)
    3732:	81 11       	cpse	r24, r1
    3734:	1c c0       	rjmp	.+56     	; 0x376e <SDReadCSD+0x64>
    3736:	18 e0       	ldi	r17, 0x08	; 8
    3738:	01 c0       	rjmp	.+2      	; 0x373c <SDReadCSD+0x32>
	do 
	{
		SPIRead(&u8Response,
			    sizeof(u8Response));
	} while ((u8Response != SD_START_TOKEN) &&
			 (u8Count--));
    373a:	18 2f       	mov	r17, r24
	}
	
	// Wait until SD_START_TOKEN (start of data sector). We should easily see it in a few bytes.
	do 
	{
		SPIRead(&u8Response,
    373c:	41 e0       	ldi	r20, 0x01	; 1
    373e:	50 e0       	ldi	r21, 0x00	; 0
    3740:	be 01       	movw	r22, r28
    3742:	6f 5f       	subi	r22, 0xFF	; 255
    3744:	7f 4f       	sbci	r23, 0xFF	; 255
    3746:	83 e0       	ldi	r24, 0x03	; 3
    3748:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <SPITransaction>
			    sizeof(u8Response));
	} while ((u8Response != SD_START_TOKEN) &&
    374c:	89 81       	ldd	r24, Y+1	; 0x01
			 (u8Count--));
    374e:	8e 3f       	cpi	r24, 0xFE	; 254
    3750:	29 f0       	breq	.+10     	; 0x375c <SDReadCSD+0x52>
    3752:	8f ef       	ldi	r24, 0xFF	; 255
    3754:	81 0f       	add	r24, r17
	// Wait until SD_START_TOKEN (start of data sector). We should easily see it in a few bytes.
	do 
	{
		SPIRead(&u8Response,
			    sizeof(u8Response));
	} while ((u8Response != SD_START_TOKEN) &&
    3756:	11 11       	cpse	r17, r1
    3758:	f0 cf       	rjmp	.-32     	; 0x373a <SDReadCSD+0x30>
    375a:	01 c0       	rjmp	.+2      	; 0x375e <SDReadCSD+0x54>
    375c:	81 2f       	mov	r24, r17
			 (u8Count--));
			 
	// If we haven't seen it in u8Count bytes, then error the call
	if (0 == u8Count)
    375e:	88 23       	and	r24, r24
    3760:	31 f0       	breq	.+12     	; 0x376e <SDReadCSD+0x64>
	{
		goto errorExit;
	}
	
	// Go read the remaining 16 bytes
	SPIRead(pu8CSD,
    3762:	40 e1       	ldi	r20, 0x10	; 16
    3764:	50 e0       	ldi	r21, 0x00	; 0
    3766:	b7 01       	movw	r22, r14
    3768:	83 e0       	ldi	r24, 0x03	; 3
    376a:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <SPITransaction>
		    16);
	
errorExit:	
	SDSetCS(false);
    376e:	80 e0       	ldi	r24, 0x00	; 0
    3770:	0e 94 7f 24 	call	0x48fe	; 0x48fe <SDSetCS>
	return(u8CmdResponse);
	
}
    3774:	80 2f       	mov	r24, r16
    3776:	0f 90       	pop	r0
    3778:	df 91       	pop	r29
    377a:	cf 91       	pop	r28
    377c:	1f 91       	pop	r17
    377e:	0f 91       	pop	r16
    3780:	ff 90       	pop	r15
    3782:	ef 90       	pop	r14
    3784:	08 95       	ret

Disassembly of section .text.SDReceiveDataBlock:

000032f2 <SDReceiveDataBlock>:
}

// Receives a datablock during the data phase which may take some time
static bool SDReceiveDataBlock(uint8_t *pu8Buffer,
							   uint16_t u16RXCount)
{
    32f2:	cf 92       	push	r12
    32f4:	df 92       	push	r13
    32f6:	ef 92       	push	r14
    32f8:	ff 92       	push	r15
    32fa:	0f 93       	push	r16
    32fc:	1f 93       	push	r17
    32fe:	cf 93       	push	r28
    3300:	df 93       	push	r29
    3302:	0f 92       	push	r0
    3304:	cd b7       	in	r28, 0x3d	; 61
    3306:	de b7       	in	r29, 0x3e	; 62
    3308:	7c 01       	movw	r14, r24
    330a:	6b 01       	movw	r12, r22
	uint8_t u8Response;
	uint16_t u16Count = 4096;
    330c:	00 e0       	ldi	r16, 0x00	; 0
    330e:	10 e1       	ldi	r17, 0x10	; 16
    3310:	01 c0       	rjmp	.+2      	; 0x3314 <SDReceiveDataBlock+0x22>
	{
		SPIRead(&u8Response,
				sizeof(u8Response));
	} 
	while ((u8Response != SD_START_TOKEN) &&
		   (u16Count--));
    3312:	89 01       	movw	r16, r18
	uint16_t u16Count = 4096;
	
	// Wait for response token
	do 
	{
		SPIRead(&u8Response,
    3314:	41 e0       	ldi	r20, 0x01	; 1
    3316:	50 e0       	ldi	r21, 0x00	; 0
    3318:	be 01       	movw	r22, r28
    331a:	6f 5f       	subi	r22, 0xFF	; 255
    331c:	7f 4f       	sbci	r23, 0xFF	; 255
    331e:	83 e0       	ldi	r24, 0x03	; 3
    3320:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <SPITransaction>
				sizeof(u8Response));
	} 
	while ((u8Response != SD_START_TOKEN) &&
    3324:	89 81       	ldd	r24, Y+1	; 0x01
		   (u16Count--));
    3326:	8e 3f       	cpi	r24, 0xFE	; 254
    3328:	29 f0       	breq	.+10     	; 0x3334 <SDReceiveDataBlock+0x42>
    332a:	98 01       	movw	r18, r16
    332c:	21 50       	subi	r18, 0x01	; 1
    332e:	31 09       	sbc	r19, r1
	do 
	{
		SPIRead(&u8Response,
				sizeof(u8Response));
	} 
	while ((u8Response != SD_START_TOKEN) &&
    3330:	01 2b       	or	r16, r17
    3332:	79 f7       	brne	.-34     	; 0x3312 <SDReceiveDataBlock+0x20>
		   (u16Count--));
		   
	if (u8Response != SD_START_TOKEN)
    3334:	8e 3f       	cpi	r24, 0xFE	; 254
    3336:	b9 f4       	brne	.+46     	; 0x3366 <SDReceiveDataBlock+0x74>
	{
		return(false);
	}
	
	// Start of data. Pull it down.
	SPIRead(pu8Buffer,
    3338:	a6 01       	movw	r20, r12
    333a:	b7 01       	movw	r22, r14
    333c:	83 e0       	ldi	r24, 0x03	; 3
    333e:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <SPITransaction>
			u16RXCount);
			
	// Discard CRC
	SPIRead(&u8Response,
    3342:	41 e0       	ldi	r20, 0x01	; 1
    3344:	50 e0       	ldi	r21, 0x00	; 0
    3346:	be 01       	movw	r22, r28
    3348:	6f 5f       	subi	r22, 0xFF	; 255
    334a:	7f 4f       	sbci	r23, 0xFF	; 255
    334c:	83 e0       	ldi	r24, 0x03	; 3
    334e:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <SPITransaction>
			sizeof(u8Response));
	SPIRead(&u8Response,
    3352:	41 e0       	ldi	r20, 0x01	; 1
    3354:	50 e0       	ldi	r21, 0x00	; 0
    3356:	be 01       	movw	r22, r28
    3358:	6f 5f       	subi	r22, 0xFF	; 255
    335a:	7f 4f       	sbci	r23, 0xFF	; 255
    335c:	83 e0       	ldi	r24, 0x03	; 3
    335e:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <SPITransaction>
			sizeof(u8Response));
	return(true);			   
    3362:	81 e0       	ldi	r24, 0x01	; 1
    3364:	01 c0       	rjmp	.+2      	; 0x3368 <SDReceiveDataBlock+0x76>
	while ((u8Response != SD_START_TOKEN) &&
		   (u16Count--));
		   
	if (u8Response != SD_START_TOKEN)
	{
		return(false);
    3366:	80 e0       	ldi	r24, 0x00	; 0
	SPIRead(&u8Response,
			sizeof(u8Response));
	SPIRead(&u8Response,
			sizeof(u8Response));
	return(true);			   
}
    3368:	0f 90       	pop	r0
    336a:	df 91       	pop	r29
    336c:	cf 91       	pop	r28
    336e:	1f 91       	pop	r17
    3370:	0f 91       	pop	r16
    3372:	ff 90       	pop	r15
    3374:	ef 90       	pop	r14
    3376:	df 90       	pop	r13
    3378:	cf 90       	pop	r12
    337a:	08 95       	ret

Disassembly of section .text.SDTransmitDataBlock:

00002c60 <SDTransmitDataBlock>:

// Transmits a datablock during the data phase which may take some time
static bool SDTransmitDataBlock(uint8_t *pu8Buffer,
							    uint16_t u16TXCount,
								uint8_t u8DataPhaseToken)
{
    2c60:	ef 92       	push	r14
    2c62:	ff 92       	push	r15
    2c64:	0f 93       	push	r16
    2c66:	1f 93       	push	r17
    2c68:	cf 93       	push	r28
    2c6a:	df 93       	push	r29
    2c6c:	00 d0       	rcall	.+0      	; 0x2c6e <SDTransmitDataBlock+0xe>
    2c6e:	cd b7       	in	r28, 0x3d	; 61
    2c70:	de b7       	in	r29, 0x3e	; 62
    2c72:	8c 01       	movw	r16, r24
    2c74:	7b 01       	movw	r14, r22
    2c76:	4a 83       	std	Y+2, r20	; 0x02
	uint8_t u8Response;
	uint16_t u16Attempts;
	bool bResult = true;

	// Send the data phase token (whatever it is)
	SPIWrite(&u8DataPhaseToken,
    2c78:	41 e0       	ldi	r20, 0x01	; 1
    2c7a:	50 e0       	ldi	r21, 0x00	; 0
    2c7c:	be 01       	movw	r22, r28
    2c7e:	6e 5f       	subi	r22, 0xFE	; 254
    2c80:	7f 4f       	sbci	r23, 0xFF	; 255
    2c82:	81 e0       	ldi	r24, 0x01	; 1
    2c84:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <SPITransaction>
			 sizeof(u8DataPhaseToken));
	
	if (u8DataPhaseToken != SD_STOP_TRANSACTION)
    2c88:	8a 81       	ldd	r24, Y+2	; 0x02
    2c8a:	8d 3f       	cpi	r24, 0xFD	; 253
    2c8c:	e1 f1       	breq	.+120    	; 0x2d06 <SDTransmitDataBlock+0xa6>
	{
		// As long as we're not stopping a transaction, we're writing data
		SPIWrite(pu8Buffer,
    2c8e:	a7 01       	movw	r20, r14
    2c90:	b8 01       	movw	r22, r16
    2c92:	81 e0       	ldi	r24, 0x01	; 1
    2c94:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <SPITransaction>
				 u16TXCount);
				 
		// Wait for acceptance of the sector
		u16Attempts = 0;
    2c98:	00 e0       	ldi	r16, 0x00	; 0
    2c9a:	10 e0       	ldi	r17, 0x00	; 0
		while (u16Attempts < SD_MAX_WRITE_ATTEMPTS)
    2c9c:	0d c0       	rjmp	.+26     	; 0x2cb8 <SDTransmitDataBlock+0x58>
		{
			// Get some data
			SPIRead(&u8Response,
    2c9e:	41 e0       	ldi	r20, 0x01	; 1
    2ca0:	50 e0       	ldi	r21, 0x00	; 0
    2ca2:	be 01       	movw	r22, r28
    2ca4:	6f 5f       	subi	r22, 0xFF	; 255
    2ca6:	7f 4f       	sbci	r23, 0xFF	; 255
    2ca8:	83 e0       	ldi	r24, 0x03	; 3
    2caa:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <SPITransaction>
					sizeof(u8Response));
			if (u8Response != 0xff)
    2cae:	89 81       	ldd	r24, Y+1	; 0x01
    2cb0:	8f 3f       	cpi	r24, 0xFF	; 255
    2cb2:	31 f4       	brne	.+12     	; 0x2cc0 <SDTransmitDataBlock+0x60>
			{
				break;
			}
				
			++u16Attempts;
    2cb4:	0f 5f       	subi	r16, 0xFF	; 255
    2cb6:	1f 4f       	sbci	r17, 0xFF	; 255
		SPIWrite(pu8Buffer,
				 u16TXCount);
				 
		// Wait for acceptance of the sector
		u16Attempts = 0;
		while (u16Attempts < SD_MAX_WRITE_ATTEMPTS)
    2cb8:	0e 39       	cpi	r16, 0x9E	; 158
    2cba:	88 e9       	ldi	r24, 0x98	; 152
    2cbc:	18 07       	cpc	r17, r24
    2cbe:	78 f3       	brcs	.-34     	; 0x2c9e <SDTransmitDataBlock+0x3e>
				
			++u16Attempts;
		}
			
		// We've timed out or else the card is dead
		if (SD_MAX_WRITE_ATTEMPTS == u16Attempts)
    2cc0:	0e 39       	cpi	r16, 0x9E	; 158
    2cc2:	18 49       	sbci	r17, 0x98	; 152
    2cc4:	11 f1       	breq	.+68     	; 0x2d0a <SDTransmitDataBlock+0xaa>
			bResult = false;
			goto errorExit;
		}
			
		// See if the data was accepted
		u8Response &= 0x1f;
    2cc6:	89 81       	ldd	r24, Y+1	; 0x01
    2cc8:	8f 71       	andi	r24, 0x1F	; 31
    2cca:	89 83       	std	Y+1, r24	; 0x01
		if (0x05 == u8Response)
    2ccc:	85 30       	cpi	r24, 0x05	; 5
    2cce:	81 f0       	breq	.+32     	; 0x2cf0 <SDTransmitDataBlock+0x90>
			// Success!
		}
		else
		{
			// Sector not accepted
			bResult = false;
    2cd0:	80 e0       	ldi	r24, 0x00	; 0
    2cd2:	1e c0       	rjmp	.+60     	; 0x2d10 <SDTransmitDataBlock+0xb0>
			// Wait for the write to finish
			u16Attempts = 0;
			while (u16Attempts < SD_MAX_WRITE_ATTEMPTS)
			{
				// Wait for the card to accept writing the sector
				SPIRead(&u8Response,
    2cd4:	41 e0       	ldi	r20, 0x01	; 1
    2cd6:	50 e0       	ldi	r21, 0x00	; 0
    2cd8:	be 01       	movw	r22, r28
    2cda:	6f 5f       	subi	r22, 0xFF	; 255
    2cdc:	7f 4f       	sbci	r23, 0xFF	; 255
    2cde:	83 e0       	ldi	r24, 0x03	; 3
    2ce0:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <SPITransaction>
						sizeof(u8Response));
				if (u8Response)
    2ce4:	89 81       	ldd	r24, Y+1	; 0x01
    2ce6:	81 11       	cpse	r24, r1
    2ce8:	09 c0       	rjmp	.+18     	; 0x2cfc <SDTransmitDataBlock+0x9c>
				{
					break;
				}
					
				++u16Attempts;
    2cea:	0f 5f       	subi	r16, 0xFF	; 255
    2cec:	1f 4f       	sbci	r17, 0xFF	; 255
    2cee:	02 c0       	rjmp	.+4      	; 0x2cf4 <SDTransmitDataBlock+0x94>
    2cf0:	00 e0       	ldi	r16, 0x00	; 0
    2cf2:	10 e0       	ldi	r17, 0x00	; 0
		u8Response &= 0x1f;
		if (0x05 == u8Response)
		{
			// Wait for the write to finish
			u16Attempts = 0;
			while (u16Attempts < SD_MAX_WRITE_ATTEMPTS)
    2cf4:	0e 39       	cpi	r16, 0x9E	; 158
    2cf6:	88 e9       	ldi	r24, 0x98	; 152
    2cf8:	18 07       	cpc	r17, r24
    2cfa:	60 f3       	brcs	.-40     	; 0x2cd4 <SDTransmitDataBlock+0x74>
				}
					
				++u16Attempts;
			}
				
			if (SD_MAX_WRITE_ATTEMPTS == u16Attempts)
    2cfc:	0e 39       	cpi	r16, 0x9E	; 158
    2cfe:	18 49       	sbci	r17, 0x98	; 152
    2d00:	31 f0       	breq	.+12     	; 0x2d0e <SDTransmitDataBlock+0xae>
							    uint16_t u16TXCount,
								uint8_t u8DataPhaseToken)
{
	uint8_t u8Response;
	uint16_t u16Attempts;
	bool bResult = true;
    2d02:	81 e0       	ldi	r24, 0x01	; 1
    2d04:	05 c0       	rjmp	.+10     	; 0x2d10 <SDTransmitDataBlock+0xb0>
    2d06:	81 e0       	ldi	r24, 0x01	; 1
    2d08:	03 c0       	rjmp	.+6      	; 0x2d10 <SDTransmitDataBlock+0xb0>
		}
			
		// We've timed out or else the card is dead
		if (SD_MAX_WRITE_ATTEMPTS == u16Attempts)
		{
			bResult = false;
    2d0a:	80 e0       	ldi	r24, 0x00	; 0
    2d0c:	01 c0       	rjmp	.+2      	; 0x2d10 <SDTransmitDataBlock+0xb0>
				++u16Attempts;
			}
				
			if (SD_MAX_WRITE_ATTEMPTS == u16Attempts)
			{
				bResult = false;
    2d0e:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	
errorExit:
	return(bResult);
}
    2d10:	0f 90       	pop	r0
    2d12:	0f 90       	pop	r0
    2d14:	df 91       	pop	r29
    2d16:	cf 91       	pop	r28
    2d18:	1f 91       	pop	r17
    2d1a:	0f 91       	pop	r16
    2d1c:	ff 90       	pop	r15
    2d1e:	ef 90       	pop	r14
    2d20:	08 95       	ret

Disassembly of section .text.SDInit:

00001c8c <SDInit>:

bool SDGetBlockSize(uint32_t *pu32BlockSize)
{
	*pu32BlockSize = sg_u16BlockSize;
	return(true);
}
    1c8c:	1f 93       	push	r17
    1c8e:	cf 93       	push	r28
    1c90:	df 93       	push	r29
    1c92:	00 d0       	rcall	.+0      	; 0x1c94 <SDInit+0x8>
    1c94:	00 d0       	rcall	.+0      	; 0x1c96 <SDInit+0xa>
    1c96:	0f 92       	push	r0
    1c98:	cd b7       	in	r28, 0x3d	; 61
    1c9a:	de b7       	in	r29, 0x3e	; 62
    1c9c:	87 b1       	in	r24, 0x07	; 7
    1c9e:	80 64       	ori	r24, 0x40	; 64
    1ca0:	87 b9       	out	0x07, r24	; 7
    1ca2:	88 b1       	in	r24, 0x08	; 8
    1ca4:	80 64       	ori	r24, 0x40	; 64
    1ca6:	88 b9       	out	0x08, r24	; 8
    1ca8:	88 b1       	in	r24, 0x08	; 8
    1caa:	80 64       	ori	r24, 0x40	; 64
    1cac:	88 b9       	out	0x08, r24	; 8
    1cae:	0e 94 97 21 	call	0x432e	; 0x432e <SPIInit>
    1cb2:	0e 94 1d 20 	call	0x403a	; 0x403a <SDPowerup>
    1cb6:	10 e0       	ldi	r17, 0x00	; 0
    1cb8:	0d c0       	rjmp	.+26     	; 0x1cd4 <SDInit+0x48>
    1cba:	ce 01       	movw	r24, r28
    1cbc:	01 96       	adiw	r24, 0x01	; 1
    1cbe:	0e 94 ca 23 	call	0x4794	; 0x4794 <SDGoIdle>
    1cc2:	81 30       	cpi	r24, 0x01	; 1
    1cc4:	49 f0       	breq	.+18     	; 0x1cd8 <SDInit+0x4c>
    1cc6:	60 e1       	ldi	r22, 0x10	; 16
    1cc8:	77 e2       	ldi	r23, 0x27	; 39
    1cca:	80 e0       	ldi	r24, 0x00	; 0
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <Delay>
    1cd2:	1f 5f       	subi	r17, 0xFF	; 255
    1cd4:	14 36       	cpi	r17, 0x64	; 100
    1cd6:	88 f3       	brcs	.-30     	; 0x1cba <SDInit+0x2e>
    1cd8:	14 36       	cpi	r17, 0x64	; 100
    1cda:	09 f4       	brne	.+2      	; 0x1cde <SDInit+0x52>
    1cdc:	76 c0       	rjmp	.+236    	; 0x1dca <SDInit+0x13e>
    1cde:	ce 01       	movw	r24, r28
    1ce0:	01 96       	adiw	r24, 0x01	; 1
    1ce2:	25 e0       	ldi	r18, 0x05	; 5
    1ce4:	fc 01       	movw	r30, r24
    1ce6:	11 92       	st	Z+, r1
    1ce8:	2a 95       	dec	r18
    1cea:	e9 f7       	brne	.-6      	; 0x1ce6 <SDInit+0x5a>
    1cec:	0e 94 c1 20 	call	0x4182	; 0x4182 <SDSendInterfaceCondition>
    1cf0:	81 30       	cpi	r24, 0x01	; 1
    1cf2:	09 f0       	breq	.+2      	; 0x1cf6 <SDInit+0x6a>
    1cf4:	5e c0       	rjmp	.+188    	; 0x1db2 <SDInit+0x126>
    1cf6:	8c 81       	ldd	r24, Y+4	; 0x04
    1cf8:	8a 3a       	cpi	r24, 0xAA	; 170
    1cfa:	09 f0       	breq	.+2      	; 0x1cfe <SDInit+0x72>
    1cfc:	68 c0       	rjmp	.+208    	; 0x1dce <SDInit+0x142>
    1cfe:	40 e0       	ldi	r20, 0x00	; 0
    1d00:	50 e0       	ldi	r21, 0x00	; 0
    1d02:	60 e0       	ldi	r22, 0x00	; 0
    1d04:	70 e4       	ldi	r23, 0x40	; 64
    1d06:	ce 01       	movw	r24, r28
    1d08:	01 96       	adiw	r24, 0x01	; 1
    1d0a:	0e 94 0c 1e 	call	0x3c18	; 0x3c18 <SDSendOpConditionArg>
    1d0e:	81 11       	cpse	r24, r1
    1d10:	60 c0       	rjmp	.+192    	; 0x1dd2 <SDInit+0x146>
    1d12:	ce 01       	movw	r24, r28
    1d14:	01 96       	adiw	r24, 0x01	; 1
    1d16:	0e 94 db 20 	call	0x41b6	; 0x41b6 <SDReadOCR>
    1d1a:	88 23       	and	r24, r24
    1d1c:	0c f4       	brge	.+2      	; 0x1d20 <SDInit+0x94>
    1d1e:	5b c0       	rjmp	.+182    	; 0x1dd6 <SDInit+0x14a>
    1d20:	85 e2       	ldi	r24, 0x25	; 37
    1d22:	97 e0       	ldi	r25, 0x07	; 7
    1d24:	0e 94 85 1b 	call	0x370a	; 0x370a <SDReadCSD>
    1d28:	88 23       	and	r24, r24
    1d2a:	0c f4       	brge	.+2      	; 0x1d2e <SDInit+0xa2>
    1d2c:	56 c0       	rjmp	.+172    	; 0x1dda <SDInit+0x14e>
    1d2e:	e5 e2       	ldi	r30, 0x25	; 37
    1d30:	f7 e0       	ldi	r31, 0x07	; 7
    1d32:	87 81       	ldd	r24, Z+7	; 0x07
    1d34:	8f 73       	andi	r24, 0x3F	; 63
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	a0 e0       	ldi	r26, 0x00	; 0
    1d3a:	b0 e0       	ldi	r27, 0x00	; 0
    1d3c:	bc 01       	movw	r22, r24
    1d3e:	55 27       	eor	r21, r21
    1d40:	44 27       	eor	r20, r20
    1d42:	90 85       	ldd	r25, Z+8	; 0x08
    1d44:	89 2f       	mov	r24, r25
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	a0 e0       	ldi	r26, 0x00	; 0
    1d4a:	b0 e0       	ldi	r27, 0x00	; 0
    1d4c:	ba 2f       	mov	r27, r26
    1d4e:	a9 2f       	mov	r26, r25
    1d50:	98 2f       	mov	r25, r24
    1d52:	88 27       	eor	r24, r24
    1d54:	84 2b       	or	r24, r20
    1d56:	95 2b       	or	r25, r21
    1d58:	a6 2b       	or	r26, r22
    1d5a:	b7 2b       	or	r27, r23
    1d5c:	21 85       	ldd	r18, Z+9	; 0x09
    1d5e:	82 2b       	or	r24, r18
    1d60:	01 96       	adiw	r24, 0x01	; 1
    1d62:	a1 1d       	adc	r26, r1
    1d64:	b1 1d       	adc	r27, r1
    1d66:	07 2e       	mov	r0, r23
    1d68:	7a e0       	ldi	r23, 0x0A	; 10
    1d6a:	88 0f       	add	r24, r24
    1d6c:	99 1f       	adc	r25, r25
    1d6e:	aa 1f       	adc	r26, r26
    1d70:	bb 1f       	adc	r27, r27
    1d72:	7a 95       	dec	r23
    1d74:	d1 f7       	brne	.-12     	; 0x1d6a <SDInit+0xde>
    1d76:	70 2d       	mov	r23, r0
    1d78:	80 93 4c 07 	sts	0x074C, r24	; 0x80074c <sg_u32SDSectorCount>
    1d7c:	90 93 4d 07 	sts	0x074D, r25	; 0x80074d <sg_u32SDSectorCount+0x1>
    1d80:	a0 93 4e 07 	sts	0x074E, r26	; 0x80074e <sg_u32SDSectorCount+0x2>
    1d84:	b0 93 4f 07 	sts	0x074F, r27	; 0x80074f <sg_u32SDSectorCount+0x3>
    1d88:	25 81       	ldd	r18, Z+5	; 0x05
    1d8a:	2f 70       	andi	r18, 0x0F	; 15
    1d8c:	81 e0       	ldi	r24, 0x01	; 1
    1d8e:	90 e0       	ldi	r25, 0x00	; 0
    1d90:	02 c0       	rjmp	.+4      	; 0x1d96 <SDInit+0x10a>
    1d92:	88 0f       	add	r24, r24
    1d94:	99 1f       	adc	r25, r25
    1d96:	2a 95       	dec	r18
    1d98:	e2 f7       	brpl	.-8      	; 0x1d92 <SDInit+0x106>
    1d9a:	90 93 57 07 	sts	0x0757, r25	; 0x800757 <sg_u16BlockSize+0x1>
    1d9e:	80 93 56 07 	sts	0x0756, r24	; 0x800756 <sg_u16BlockSize>
    1da2:	60 ec       	ldi	r22, 0xC0	; 192
    1da4:	78 ed       	ldi	r23, 0xD8	; 216
    1da6:	87 ea       	ldi	r24, 0xA7	; 167
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <SPISetBaudRate>
    1dae:	81 e0       	ldi	r24, 0x01	; 1
    1db0:	17 c0       	rjmp	.+46     	; 0x1de0 <SDInit+0x154>
    1db2:	40 e0       	ldi	r20, 0x00	; 0
    1db4:	50 e0       	ldi	r21, 0x00	; 0
    1db6:	60 e0       	ldi	r22, 0x00	; 0
    1db8:	70 e4       	ldi	r23, 0x40	; 64
    1dba:	ce 01       	movw	r24, r28
    1dbc:	01 96       	adiw	r24, 0x01	; 1
    1dbe:	0e 94 0c 1e 	call	0x3c18	; 0x3c18 <SDSendOpConditionArg>
    1dc2:	81 11       	cpse	r24, r1
    1dc4:	0c c0       	rjmp	.+24     	; 0x1dde <SDInit+0x152>
    1dc6:	81 e0       	ldi	r24, 0x01	; 1
    1dc8:	0b c0       	rjmp	.+22     	; 0x1de0 <SDInit+0x154>
    1dca:	80 e0       	ldi	r24, 0x00	; 0
    1dcc:	09 c0       	rjmp	.+18     	; 0x1de0 <SDInit+0x154>
    1dce:	80 e0       	ldi	r24, 0x00	; 0
    1dd0:	07 c0       	rjmp	.+14     	; 0x1de0 <SDInit+0x154>
    1dd2:	80 e0       	ldi	r24, 0x00	; 0
    1dd4:	05 c0       	rjmp	.+10     	; 0x1de0 <SDInit+0x154>
    1dd6:	80 e0       	ldi	r24, 0x00	; 0
    1dd8:	03 c0       	rjmp	.+6      	; 0x1de0 <SDInit+0x154>
    1dda:	80 e0       	ldi	r24, 0x00	; 0
    1ddc:	01 c0       	rjmp	.+2      	; 0x1de0 <SDInit+0x154>
    1dde:	80 e0       	ldi	r24, 0x00	; 0
    1de0:	0f 90       	pop	r0
    1de2:	0f 90       	pop	r0
    1de4:	0f 90       	pop	r0
    1de6:	0f 90       	pop	r0
    1de8:	0f 90       	pop	r0
    1dea:	df 91       	pop	r29
    1dec:	cf 91       	pop	r28
    1dee:	1f 91       	pop	r17
    1df0:	08 95       	ret

Disassembly of section .text.SDRead:

00002934 <SDRead>:

// Read one or more sectors from SD
bool SDRead(uint32_t u32Sector,
			uint8_t *pu8Buffer,
			uint32_t u32SectorCount)
{
    2934:	8f 92       	push	r8
    2936:	9f 92       	push	r9
    2938:	af 92       	push	r10
    293a:	bf 92       	push	r11
    293c:	cf 92       	push	r12
    293e:	df 92       	push	r13
    2940:	ef 92       	push	r14
    2942:	ff 92       	push	r15
    2944:	0f 93       	push	r16
    2946:	1f 93       	push	r17
    2948:	cf 93       	push	r28
    294a:	df 93       	push	r29
    294c:	4b 01       	movw	r8, r22
    294e:	5c 01       	movw	r10, r24
    2950:	ea 01       	movw	r28, r20
    2952:	68 01       	movw	r12, r16
    2954:	79 01       	movw	r14, r18
	bool bResult = false;
	
	// Pet the watchdog
	WatchdogReset();
    2956:	0e 94 21 25 	call	0x4a42	; 0x4a42 <WatchdogReset>
		
	// Assert chip select
	SDSetCS(true);
    295a:	81 e0       	ldi	r24, 0x01	; 1
    295c:	0e 94 7f 24 	call	0x48fe	; 0x48fe <SDSetCS>

	if (1 == u32SectorCount)
    2960:	81 e0       	ldi	r24, 0x01	; 1
    2962:	c8 16       	cp	r12, r24
    2964:	d1 04       	cpc	r13, r1
    2966:	e1 04       	cpc	r14, r1
    2968:	f1 04       	cpc	r15, r1
    296a:	81 f4       	brne	.+32     	; 0x298c <SDRead+0x58>
	{
		if (0 == SDCommand(CMD17,
    296c:	b5 01       	movw	r22, r10
    296e:	a4 01       	movw	r20, r8
    2970:	81 e1       	ldi	r24, 0x11	; 17
    2972:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <SDCommand>
    2976:	81 11       	cpse	r24, r1
    2978:	35 c0       	rjmp	.+106    	; 0x29e4 <SDRead+0xb0>
						   u32Sector))
		{
			bResult = SDReceiveDataBlock(pu8Buffer,
    297a:	60 91 56 07 	lds	r22, 0x0756	; 0x800756 <sg_u16BlockSize>
    297e:	70 91 57 07 	lds	r23, 0x0757	; 0x800757 <sg_u16BlockSize+0x1>
    2982:	ce 01       	movw	r24, r28
    2984:	0e 94 79 19 	call	0x32f2	; 0x32f2 <SDReceiveDataBlock>
    2988:	18 2f       	mov	r17, r24
    298a:	2f c0       	rjmp	.+94     	; 0x29ea <SDRead+0xb6>
		}
	}
	else
	{
		// Multisector
		if (0 == SDCommand(CMD18,
    298c:	b5 01       	movw	r22, r10
    298e:	a4 01       	movw	r20, r8
    2990:	82 e1       	ldi	r24, 0x12	; 18
    2992:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <SDCommand>
    2996:	88 23       	and	r24, r24
    2998:	19 f0       	breq	.+6      	; 0x29a0 <SDRead+0x6c>
    299a:	26 c0       	rjmp	.+76     	; 0x29e8 <SDRead+0xb4>
				WatchdogReset();
				
				pu8Buffer += sg_u16BlockSize;
			} 
			while ((bResult) &&
				   (u32SectorCount--));
    299c:	6c 01       	movw	r12, r24
    299e:	7d 01       	movw	r14, r26
		if (0 == SDCommand(CMD18,
						   u32Sector))
		{
			do 
			{
				bResult = SDReceiveDataBlock(pu8Buffer,
    29a0:	60 91 56 07 	lds	r22, 0x0756	; 0x800756 <sg_u16BlockSize>
    29a4:	70 91 57 07 	lds	r23, 0x0757	; 0x800757 <sg_u16BlockSize+0x1>
    29a8:	ce 01       	movw	r24, r28
    29aa:	0e 94 79 19 	call	0x32f2	; 0x32f2 <SDReceiveDataBlock>
    29ae:	18 2f       	mov	r17, r24
							 				 sg_u16BlockSize);
				// Pet the watchdog
				WatchdogReset();
    29b0:	0e 94 21 25 	call	0x4a42	; 0x4a42 <WatchdogReset>
				
				pu8Buffer += sg_u16BlockSize;
    29b4:	80 91 56 07 	lds	r24, 0x0756	; 0x800756 <sg_u16BlockSize>
    29b8:	90 91 57 07 	lds	r25, 0x0757	; 0x800757 <sg_u16BlockSize+0x1>
    29bc:	c8 0f       	add	r28, r24
    29be:	d9 1f       	adc	r29, r25
			} 
			while ((bResult) &&
				   (u32SectorCount--));
    29c0:	11 23       	and	r17, r17
    29c2:	49 f0       	breq	.+18     	; 0x29d6 <SDRead+0xa2>
    29c4:	d7 01       	movw	r26, r14
    29c6:	c6 01       	movw	r24, r12
    29c8:	01 97       	sbiw	r24, 0x01	; 1
    29ca:	a1 09       	sbc	r26, r1
    29cc:	b1 09       	sbc	r27, r1
				// Pet the watchdog
				WatchdogReset();
				
				pu8Buffer += sg_u16BlockSize;
			} 
			while ((bResult) &&
    29ce:	cd 28       	or	r12, r13
    29d0:	ce 28       	or	r12, r14
    29d2:	cf 28       	or	r12, r15
    29d4:	19 f7       	brne	.-58     	; 0x299c <SDRead+0x68>
				   (u32SectorCount--));
				   
			// Regardless, send a stop command
			(void) SDCommand(CMD12,
    29d6:	40 e0       	ldi	r20, 0x00	; 0
    29d8:	50 e0       	ldi	r21, 0x00	; 0
    29da:	ba 01       	movw	r22, r20
    29dc:	8c e0       	ldi	r24, 0x0C	; 12
    29de:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <SDCommand>
    29e2:	03 c0       	rjmp	.+6      	; 0x29ea <SDRead+0xb6>
// Read one or more sectors from SD
bool SDRead(uint32_t u32Sector,
			uint8_t *pu8Buffer,
			uint32_t u32SectorCount)
{
	bool bResult = false;
    29e4:	10 e0       	ldi	r17, 0x00	; 0
    29e6:	01 c0       	rjmp	.+2      	; 0x29ea <SDRead+0xb6>
    29e8:	10 e0       	ldi	r17, 0x00	; 0
		{
			// Failed
		}
	}
	
	SDSetCS(false);
    29ea:	80 e0       	ldi	r24, 0x00	; 0
    29ec:	0e 94 7f 24 	call	0x48fe	; 0x48fe <SDSetCS>

	return(bResult);
}
    29f0:	81 2f       	mov	r24, r17
    29f2:	df 91       	pop	r29
    29f4:	cf 91       	pop	r28
    29f6:	1f 91       	pop	r17
    29f8:	0f 91       	pop	r16
    29fa:	ff 90       	pop	r15
    29fc:	ef 90       	pop	r14
    29fe:	df 90       	pop	r13
    2a00:	cf 90       	pop	r12
    2a02:	bf 90       	pop	r11
    2a04:	af 90       	pop	r10
    2a06:	9f 90       	pop	r9
    2a08:	8f 90       	pop	r8
    2a0a:	08 95       	ret

Disassembly of section .text.SDWrite:

0000277c <SDWrite>:

bool SDGetBlockSize(uint32_t *pu32BlockSize)
{
	*pu32BlockSize = sg_u16BlockSize;
	return(true);
}
    277c:	8f 92       	push	r8
    277e:	9f 92       	push	r9
    2780:	af 92       	push	r10
    2782:	bf 92       	push	r11
    2784:	cf 92       	push	r12
    2786:	df 92       	push	r13
    2788:	ef 92       	push	r14
    278a:	ff 92       	push	r15
    278c:	0f 93       	push	r16
    278e:	1f 93       	push	r17
    2790:	cf 93       	push	r28
    2792:	df 93       	push	r29
    2794:	4b 01       	movw	r8, r22
    2796:	5c 01       	movw	r10, r24
    2798:	ea 01       	movw	r28, r20
    279a:	68 01       	movw	r12, r16
    279c:	79 01       	movw	r14, r18
    279e:	0e 94 21 25 	call	0x4a42	; 0x4a42 <WatchdogReset>
    27a2:	81 e0       	ldi	r24, 0x01	; 1
    27a4:	0e 94 7f 24 	call	0x48fe	; 0x48fe <SDSetCS>
    27a8:	81 e0       	ldi	r24, 0x01	; 1
    27aa:	c8 16       	cp	r12, r24
    27ac:	d1 04       	cpc	r13, r1
    27ae:	e1 04       	cpc	r14, r1
    27b0:	f1 04       	cpc	r15, r1
    27b2:	89 f4       	brne	.+34     	; 0x27d6 <SDWrite+0x5a>
    27b4:	b5 01       	movw	r22, r10
    27b6:	a4 01       	movw	r20, r8
    27b8:	88 e1       	ldi	r24, 0x18	; 24
    27ba:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <SDCommand>
    27be:	81 11       	cpse	r24, r1
    27c0:	37 c0       	rjmp	.+110    	; 0x2830 <SDWrite+0xb4>
    27c2:	60 91 56 07 	lds	r22, 0x0756	; 0x800756 <sg_u16BlockSize>
    27c6:	70 91 57 07 	lds	r23, 0x0757	; 0x800757 <sg_u16BlockSize+0x1>
    27ca:	4e ef       	ldi	r20, 0xFE	; 254
    27cc:	ce 01       	movw	r24, r28
    27ce:	0e 94 30 16 	call	0x2c60	; 0x2c60 <SDTransmitDataBlock>
    27d2:	18 2f       	mov	r17, r24
    27d4:	30 c0       	rjmp	.+96     	; 0x2836 <SDWrite+0xba>
    27d6:	b5 01       	movw	r22, r10
    27d8:	a4 01       	movw	r20, r8
    27da:	89 e1       	ldi	r24, 0x19	; 25
    27dc:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <SDCommand>
    27e0:	88 23       	and	r24, r24
    27e2:	19 f0       	breq	.+6      	; 0x27ea <SDWrite+0x6e>
    27e4:	27 c0       	rjmp	.+78     	; 0x2834 <SDWrite+0xb8>
    27e6:	6c 01       	movw	r12, r24
    27e8:	7d 01       	movw	r14, r26
    27ea:	60 91 56 07 	lds	r22, 0x0756	; 0x800756 <sg_u16BlockSize>
    27ee:	70 91 57 07 	lds	r23, 0x0757	; 0x800757 <sg_u16BlockSize+0x1>
    27f2:	4c ef       	ldi	r20, 0xFC	; 252
    27f4:	ce 01       	movw	r24, r28
    27f6:	0e 94 30 16 	call	0x2c60	; 0x2c60 <SDTransmitDataBlock>
    27fa:	18 2f       	mov	r17, r24
    27fc:	0e 94 21 25 	call	0x4a42	; 0x4a42 <WatchdogReset>
    2800:	80 91 56 07 	lds	r24, 0x0756	; 0x800756 <sg_u16BlockSize>
    2804:	90 91 57 07 	lds	r25, 0x0757	; 0x800757 <sg_u16BlockSize+0x1>
    2808:	c8 0f       	add	r28, r24
    280a:	d9 1f       	adc	r29, r25
    280c:	11 23       	and	r17, r17
    280e:	49 f0       	breq	.+18     	; 0x2822 <SDWrite+0xa6>
    2810:	d7 01       	movw	r26, r14
    2812:	c6 01       	movw	r24, r12
    2814:	01 97       	sbiw	r24, 0x01	; 1
    2816:	a1 09       	sbc	r26, r1
    2818:	b1 09       	sbc	r27, r1
    281a:	cd 28       	or	r12, r13
    281c:	ce 28       	or	r12, r14
    281e:	cf 28       	or	r12, r15
    2820:	11 f7       	brne	.-60     	; 0x27e6 <SDWrite+0x6a>
    2822:	40 e0       	ldi	r20, 0x00	; 0
    2824:	50 e0       	ldi	r21, 0x00	; 0
    2826:	ba 01       	movw	r22, r20
    2828:	8c e0       	ldi	r24, 0x0C	; 12
    282a:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <SDCommand>
    282e:	03 c0       	rjmp	.+6      	; 0x2836 <SDWrite+0xba>
    2830:	10 e0       	ldi	r17, 0x00	; 0
    2832:	01 c0       	rjmp	.+2      	; 0x2836 <SDWrite+0xba>
    2834:	10 e0       	ldi	r17, 0x00	; 0
    2836:	80 e0       	ldi	r24, 0x00	; 0
    2838:	0e 94 7f 24 	call	0x48fe	; 0x48fe <SDSetCS>
    283c:	81 2f       	mov	r24, r17
    283e:	df 91       	pop	r29
    2840:	cf 91       	pop	r28
    2842:	1f 91       	pop	r17
    2844:	0f 91       	pop	r16
    2846:	ff 90       	pop	r15
    2848:	ef 90       	pop	r14
    284a:	df 90       	pop	r13
    284c:	cf 90       	pop	r12
    284e:	bf 90       	pop	r11
    2850:	af 90       	pop	r10
    2852:	9f 90       	pop	r9
    2854:	8f 90       	pop	r8
    2856:	08 95       	ret

Disassembly of section .text.SPITransaction:

00003bc0 <SPITransaction>:

// Do a SPI transaction - read or write (or write pattern)
void SPITransaction(ESPIBusState eSPIBusState,
					uint8_t *pu8Buffer,
					uint16_t u16ByteCount)
{
    3bc0:	fb 01       	movw	r30, r22
	// If we're transmitting, start the transaction
	if (ESTATE_RX_DATA == eSPIBusState)
    3bc2:	83 30       	cpi	r24, 0x03	; 3
    3bc4:	71 f4       	brne	.+28     	; 0x3be2 <SPITransaction+0x22>
    3bc6:	08 c0       	rjmp	.+16     	; 0x3bd8 <SPITransaction+0x18>
	{
		while (u16ByteCount--)
		{
			// Clock out 0xff so we can receive the data
			SPDR = 0xff;
    3bc8:	2f ef       	ldi	r18, 0xFF	; 255
    3bca:	2e bd       	out	0x2e, r18	; 46

			// Wait for data to be available
			while (0 == (SPSR & (1 << SPIF)));
    3bcc:	0d b4       	in	r0, 0x2d	; 45
    3bce:	07 fe       	sbrs	r0, 7
    3bd0:	fd cf       	rjmp	.-6      	; 0x3bcc <SPITransaction+0xc>
			
			// Read the byte
			*pu8Buffer = SPDR;
    3bd2:	2e b5       	in	r18, 0x2e	; 46
    3bd4:	21 93       	st	Z+, r18
					uint16_t u16ByteCount)
{
	// If we're transmitting, start the transaction
	if (ESTATE_RX_DATA == eSPIBusState)
	{
		while (u16ByteCount--)
    3bd6:	ac 01       	movw	r20, r24
    3bd8:	ca 01       	movw	r24, r20
    3bda:	01 97       	sbiw	r24, 0x01	; 1
    3bdc:	45 2b       	or	r20, r21
    3bde:	a1 f7       	brne	.-24     	; 0x3bc8 <SPITransaction+0x8>
    3be0:	08 95       	ret
			*pu8Buffer = SPDR;
			++pu8Buffer;
		}
	}
	else
	if (ESTATE_TX_DATA == eSPIBusState)
    3be2:	81 30       	cpi	r24, 0x01	; 1
    3be4:	61 f4       	brne	.+24     	; 0x3bfe <SPITransaction+0x3e>
    3be6:	06 c0       	rjmp	.+12     	; 0x3bf4 <SPITransaction+0x34>
	{
		// Clock out whatever our data is in our queue
		while (u16ByteCount--)
		{
			SPDR = *pu8Buffer;
    3be8:	21 91       	ld	r18, Z+
    3bea:	2e bd       	out	0x2e, r18	; 46
			++pu8Buffer;
			
			// Wait for the transmit to complete
			while (0 == (SPSR & (1 << SPIF)));
    3bec:	0d b4       	in	r0, 0x2d	; 45
    3bee:	07 fe       	sbrs	r0, 7
    3bf0:	fd cf       	rjmp	.-6      	; 0x3bec <SPITransaction+0x2c>
	}
	else
	if (ESTATE_TX_DATA == eSPIBusState)
	{
		// Clock out whatever our data is in our queue
		while (u16ByteCount--)
    3bf2:	ac 01       	movw	r20, r24
    3bf4:	ca 01       	movw	r24, r20
    3bf6:	01 97       	sbiw	r24, 0x01	; 1
    3bf8:	45 2b       	or	r20, r21
    3bfa:	b1 f7       	brne	.-20     	; 0x3be8 <SPITransaction+0x28>
    3bfc:	08 95       	ret
			// Wait for the transmit to complete
			while (0 == (SPSR & (1 << SPIF)));
		}
	}
	else
	if (ESTATE_TX_PATTERN == eSPIBusState)
    3bfe:	82 30       	cpi	r24, 0x02	; 2
    3c00:	51 f4       	brne	.+20     	; 0x3c16 <SPITransaction+0x56>
    3c02:	05 c0       	rjmp	.+10     	; 0x3c0e <SPITransaction+0x4e>
		// Clock out whatever our data is in our queue
		while (u16ByteCount--)
		{
			// This is OK - as the position where the pointer would normally
			// be is just the pattern (single byte)
			SPDR = (uint8_t) (pu8Buffer);
    3c04:	ee bd       	out	0x2e, r30	; 46
		
			// Wait for the transmit to complete
			while (0 == (SPSR & (1 << SPIF)));
    3c06:	0d b4       	in	r0, 0x2d	; 45
    3c08:	07 fe       	sbrs	r0, 7
    3c0a:	fd cf       	rjmp	.-6      	; 0x3c06 <SPITransaction+0x46>
	}
	else
	if (ESTATE_TX_PATTERN == eSPIBusState)
	{
		// Clock out whatever our data is in our queue
		while (u16ByteCount--)
    3c0c:	ac 01       	movw	r20, r24
    3c0e:	ca 01       	movw	r24, r20
    3c10:	01 97       	sbiw	r24, 0x01	; 1
    3c12:	45 2b       	or	r20, r21
    3c14:	b9 f7       	brne	.-18     	; 0x3c04 <SPITransaction+0x44>
    3c16:	08 95       	ret

Disassembly of section .text.SPISetBaudRate:

00002a0c <SPISetBaudRate>:
	{FCLKIO >> 7,	(1 << SPR1) | (0 << SPR0),	0},					// /128
};

// Sets the SPI baud rate and returns the actual baud rate selected
uint32_t SPISetBaudRate(uint32_t u32BaudRate)
{
    2a0c:	cf 92       	push	r12
    2a0e:	df 92       	push	r13
    2a10:	ef 92       	push	r14
    2a12:	ff 92       	push	r15
    2a14:	6b 01       	movw	r12, r22
    2a16:	7c 01       	movw	r14, r24
	uint8_t u8Loop;
	
	// Find the baud rate that's the closest
	for (u8Loop = 0; u8Loop < (sizeof(sg_sSPIBaudRates) / sizeof(sg_sSPIBaudRates[0])); u8Loop++)
    2a18:	20 e0       	ldi	r18, 0x00	; 0
    2a1a:	19 c0       	rjmp	.+50     	; 0x2a4e <SPISetBaudRate+0x42>
	{
		if (u32BaudRate >= sg_sSPIBaudRates[u8Loop].u32BaudRate)
    2a1c:	82 2f       	mov	r24, r18
    2a1e:	90 e0       	ldi	r25, 0x00	; 0
    2a20:	ac 01       	movw	r20, r24
    2a22:	44 0f       	add	r20, r20
    2a24:	55 1f       	adc	r21, r21
    2a26:	84 0f       	add	r24, r20
    2a28:	95 1f       	adc	r25, r21
    2a2a:	88 0f       	add	r24, r24
    2a2c:	99 1f       	adc	r25, r25
    2a2e:	09 2e       	mov	r0, r25
    2a30:	00 0c       	add	r0, r0
    2a32:	aa 0b       	sbc	r26, r26
    2a34:	86 5f       	subi	r24, 0xF6	; 246
    2a36:	9e 4f       	sbci	r25, 0xFE	; 254
    2a38:	af 4f       	sbci	r26, 0xFF	; 255
    2a3a:	fc 01       	movw	r30, r24
    2a3c:	5a 2f       	mov	r21, r26
    2a3e:	0e 94 30 24 	call	0x4860	; 0x4860 <__xload_4>
    2a42:	c6 16       	cp	r12, r22
    2a44:	d7 06       	cpc	r13, r23
    2a46:	e8 06       	cpc	r14, r24
    2a48:	f9 06       	cpc	r15, r25
    2a4a:	18 f4       	brcc	.+6      	; 0x2a52 <SPISetBaudRate+0x46>
uint32_t SPISetBaudRate(uint32_t u32BaudRate)
{
	uint8_t u8Loop;
	
	// Find the baud rate that's the closest
	for (u8Loop = 0; u8Loop < (sizeof(sg_sSPIBaudRates) / sizeof(sg_sSPIBaudRates[0])); u8Loop++)
    2a4c:	2f 5f       	subi	r18, 0xFF	; 255
    2a4e:	27 30       	cpi	r18, 0x07	; 7
    2a50:	28 f3       	brcs	.-54     	; 0x2a1c <SPISetBaudRate+0x10>
			break;
		}
	}

	// If we've hit the end, use the slowest speed
	if ((sizeof(sg_sSPIBaudRates) / sizeof(sg_sSPIBaudRates[0])) == u8Loop)
    2a52:	27 30       	cpi	r18, 0x07	; 7
    2a54:	09 f4       	brne	.+2      	; 0x2a58 <SPISetBaudRate+0x4c>
	{
		u8Loop--;
    2a56:	21 50       	subi	r18, 0x01	; 1
	}

	// Found one!
	SPCR = (SPCR & (uint8_t) ~((1 << SPR1) | (1 << SPR0))) | sg_sSPIBaudRates[u8Loop].u8SPCR;
    2a58:	6c b5       	in	r22, 0x2c	; 44
    2a5a:	30 e0       	ldi	r19, 0x00	; 0
    2a5c:	a9 01       	movw	r20, r18
    2a5e:	44 0f       	add	r20, r20
    2a60:	55 1f       	adc	r21, r21
    2a62:	ca 01       	movw	r24, r20
    2a64:	82 0f       	add	r24, r18
    2a66:	93 1f       	adc	r25, r19
    2a68:	88 0f       	add	r24, r24
    2a6a:	99 1f       	adc	r25, r25
    2a6c:	04 96       	adiw	r24, 0x04	; 4
    2a6e:	09 2e       	mov	r0, r25
    2a70:	00 0c       	add	r0, r0
    2a72:	aa 0b       	sbc	r26, r26
    2a74:	86 5f       	subi	r24, 0xF6	; 246
    2a76:	9e 4f       	sbci	r25, 0xFE	; 254
    2a78:	af 4f       	sbci	r26, 0xFF	; 255
    2a7a:	fc 01       	movw	r30, r24
    2a7c:	84 91       	lpm	r24, Z
    2a7e:	a7 fd       	sbrc	r26, 7
    2a80:	80 81       	ld	r24, Z
    2a82:	6c 7f       	andi	r22, 0xFC	; 252
    2a84:	86 2b       	or	r24, r22
    2a86:	8c bd       	out	0x2c, r24	; 44
	SPSR = (SPSR & (uint8_t) ~(1 << SPI2X)) | sg_sSPIBaudRates[u8Loop].u8SPSR;
    2a88:	6d b5       	in	r22, 0x2d	; 45
    2a8a:	ca 01       	movw	r24, r20
    2a8c:	82 0f       	add	r24, r18
    2a8e:	93 1f       	adc	r25, r19
    2a90:	88 0f       	add	r24, r24
    2a92:	99 1f       	adc	r25, r25
    2a94:	05 96       	adiw	r24, 0x05	; 5
    2a96:	09 2e       	mov	r0, r25
    2a98:	00 0c       	add	r0, r0
    2a9a:	aa 0b       	sbc	r26, r26
    2a9c:	86 5f       	subi	r24, 0xF6	; 246
    2a9e:	9e 4f       	sbci	r25, 0xFE	; 254
    2aa0:	af 4f       	sbci	r26, 0xFF	; 255
    2aa2:	fc 01       	movw	r30, r24
    2aa4:	84 91       	lpm	r24, Z
    2aa6:	a7 fd       	sbrc	r26, 7
    2aa8:	80 81       	ld	r24, Z
    2aaa:	6e 7f       	andi	r22, 0xFE	; 254
    2aac:	86 2b       	or	r24, r22
    2aae:	8d bd       	out	0x2d, r24	; 45
	return(sg_sSPIBaudRates[u8Loop].u32BaudRate);
    2ab0:	24 0f       	add	r18, r20
    2ab2:	35 1f       	adc	r19, r21
    2ab4:	22 0f       	add	r18, r18
    2ab6:	33 1f       	adc	r19, r19
    2ab8:	03 2e       	mov	r0, r19
    2aba:	00 0c       	add	r0, r0
    2abc:	44 0b       	sbc	r20, r20
    2abe:	26 5f       	subi	r18, 0xF6	; 246
    2ac0:	3e 4f       	sbci	r19, 0xFE	; 254
    2ac2:	4f 4f       	sbci	r20, 0xFF	; 255
    2ac4:	f9 01       	movw	r30, r18
    2ac6:	54 2f       	mov	r21, r20
    2ac8:	0e 94 30 24 	call	0x4860	; 0x4860 <__xload_4>
}
    2acc:	ff 90       	pop	r15
    2ace:	ef 90       	pop	r14
    2ad0:	df 90       	pop	r13
    2ad2:	cf 90       	pop	r12
    2ad4:	08 95       	ret

Disassembly of section .text.SPIInit:

0000432e <SPIInit>:

void SPIInit(void)
{
	// Set MOSI and SCK to output
	DDR_SPI |= (1 << MOSI) | (1 << SCK);
    432e:	84 b1       	in	r24, 0x04	; 4
    4330:	82 68       	ori	r24, 0x82	; 130
    4332:	84 b9       	out	0x04, r24	; 4
	DDR_SPI &= (uint8_t) ~(1 << MISO);
    4334:	84 b1       	in	r24, 0x04	; 4
    4336:	8e 7f       	andi	r24, 0xFE	; 254
    4338:	84 b9       	out	0x04, r24	; 4
	
	// MISO As input (need our pullup)
	PORT_SPI |= (1 << MISO);
    433a:	85 b1       	in	r24, 0x05	; 5
    433c:	81 60       	ori	r24, 0x01	; 1
    433e:	85 b9       	out	0x05, r24	; 5
	
	// Enable SPI engine, master only, and clock to fosc/128 and SPI mode 0 (which is what SD wants)
	SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR1) | (1 << SPR0);
    4340:	83 e5       	ldi	r24, 0x53	; 83
    4342:	8c bd       	out	0x2c, r24	; 44
	
	// Zero out SPSR (all zeroes)
	SPSR = 0;
    4344:	1d bc       	out	0x2d, r1	; 45
	
	// Zero out SPIPS so the SPI IP is connected to MISO, MOSI, SCK, and SS
	MCUCR &= (uint8_t) ~(1 << SPIPS);
    4346:	85 b7       	in	r24, 0x35	; 53
    4348:	8f 77       	andi	r24, 0x7F	; 127
    434a:	85 bf       	out	0x35, r24	; 53

	// Set to something slow/compatible
	(void) SPISetBaudRate(400000);
    434c:	60 e8       	ldi	r22, 0x80	; 128
    434e:	7a e1       	ldi	r23, 0x1A	; 26
    4350:	86 e0       	ldi	r24, 0x06	; 6
    4352:	90 e0       	ldi	r25, 0x00	; 0
    4354:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <SPISetBaudRate>
    4358:	08 95       	ret

Disassembly of section .text.readGlobalState:

00003f84 <readGlobalState>:

static GlobalState gState;
static uint32_t currentSector;
static uint8_t __attribute__((aligned(4))) frameBuffer[FRAME_BUFFER_SIZE];  // Enlarged to handle full frame

static bool readGlobalState(void) {
    3f84:	0f 93       	push	r16
    3f86:	1f 93       	push	r17
    3f88:	cf 93       	push	r28
	if (!SDRead(0, frameBuffer, 1)) {
    3f8a:	01 e0       	ldi	r16, 0x01	; 1
    3f8c:	10 e0       	ldi	r17, 0x00	; 0
    3f8e:	20 e0       	ldi	r18, 0x00	; 0
    3f90:	30 e0       	ldi	r19, 0x00	; 0
    3f92:	44 e2       	ldi	r20, 0x24	; 36
    3f94:	53 e0       	ldi	r21, 0x03	; 3
    3f96:	60 e0       	ldi	r22, 0x00	; 0
    3f98:	70 e0       	ldi	r23, 0x00	; 0
    3f9a:	cb 01       	movw	r24, r22
    3f9c:	0e 94 9a 14 	call	0x2934	; 0x2934 <SDRead>
    3fa0:	c8 2f       	mov	r28, r24
    3fa2:	88 23       	and	r24, r24
    3fa4:	49 f0       	breq	.+18     	; 0x3fb8 <readGlobalState+0x34>
		return false;
	}
	memcpy(&gState, frameBuffer, sizeof(GlobalState));
    3fa6:	44 e2       	ldi	r20, 0x24	; 36
    3fa8:	53 e0       	ldi	r21, 0x03	; 3
    3faa:	60 e8       	ldi	r22, 0x80	; 128
    3fac:	28 ed       	ldi	r18, 0xD8	; 216
    3fae:	31 e0       	ldi	r19, 0x01	; 1
    3fb0:	84 e2       	ldi	r24, 0x24	; 36
    3fb2:	95 e0       	ldi	r25, 0x05	; 5
    3fb4:	0e 94 0d 21 	call	0x421a	; 0x421a <memcpy>
	// TODO: Implement checksum verification
	return true;
}
    3fb8:	8c 2f       	mov	r24, r28
    3fba:	cf 91       	pop	r28
    3fbc:	1f 91       	pop	r17
    3fbe:	0f 91       	pop	r16
    3fc0:	08 95       	ret

Disassembly of section .text.writeGlobalState:

000041e8 <writeGlobalState>:

static bool writeGlobalState(void) {
    41e8:	0f 93       	push	r16
    41ea:	1f 93       	push	r17
	memcpy(frameBuffer, &gState, sizeof(GlobalState));
    41ec:	44 e2       	ldi	r20, 0x24	; 36
    41ee:	55 e0       	ldi	r21, 0x05	; 5
    41f0:	60 e8       	ldi	r22, 0x80	; 128
    41f2:	28 ed       	ldi	r18, 0xD8	; 216
    41f4:	31 e0       	ldi	r19, 0x01	; 1
    41f6:	84 e2       	ldi	r24, 0x24	; 36
    41f8:	93 e0       	ldi	r25, 0x03	; 3
    41fa:	0e 94 0d 21 	call	0x421a	; 0x421a <memcpy>
	// TODO: Calculate and update checksum
	return SDWrite(0, frameBuffer, 1);
    41fe:	01 e0       	ldi	r16, 0x01	; 1
    4200:	10 e0       	ldi	r17, 0x00	; 0
    4202:	20 e0       	ldi	r18, 0x00	; 0
    4204:	30 e0       	ldi	r19, 0x00	; 0
    4206:	44 e2       	ldi	r20, 0x24	; 36
    4208:	53 e0       	ldi	r21, 0x03	; 3
    420a:	60 e0       	ldi	r22, 0x00	; 0
    420c:	70 e0       	ldi	r23, 0x00	; 0
    420e:	cb 01       	movw	r24, r22
    4210:	0e 94 be 13 	call	0x277c	; 0x277c <SDWrite>
}
    4214:	1f 91       	pop	r17
    4216:	0f 91       	pop	r16
    4218:	08 95       	ret

Disassembly of section .text.updateSessionMap:

00002858 <updateSessionMap>:

static bool updateSessionMap(void) {
    2858:	8f 92       	push	r8
    285a:	9f 92       	push	r9
    285c:	af 92       	push	r10
    285e:	bf 92       	push	r11
    2860:	cf 92       	push	r12
    2862:	df 92       	push	r13
    2864:	ef 92       	push	r14
    2866:	ff 92       	push	r15
    2868:	0f 93       	push	r16
    286a:	1f 93       	push	r17
	uint32_t mapSector = gState.activeSessionMapSector;
    286c:	e4 e2       	ldi	r30, 0x24	; 36
    286e:	f5 e0       	ldi	r31, 0x05	; 5
    2870:	c4 8c       	ldd	r12, Z+28	; 0x1c
    2872:	d5 8c       	ldd	r13, Z+29	; 0x1d
    2874:	e6 8c       	ldd	r14, Z+30	; 0x1e
    2876:	f7 8c       	ldd	r15, Z+31	; 0x1f
	uint32_t mapOffset = gState.activeSessionMapOffset;
    2878:	80 a0       	ldd	r8, Z+32	; 0x20
    287a:	91 a0       	ldd	r9, Z+33	; 0x21
    287c:	a2 a0       	ldd	r10, Z+34	; 0x22
    287e:	b3 a0       	ldd	r11, Z+35	; 0x23

	if (!SDRead(mapSector, frameBuffer, 1)) {
    2880:	01 e0       	ldi	r16, 0x01	; 1
    2882:	10 e0       	ldi	r17, 0x00	; 0
    2884:	20 e0       	ldi	r18, 0x00	; 0
    2886:	30 e0       	ldi	r19, 0x00	; 0
    2888:	44 e2       	ldi	r20, 0x24	; 36
    288a:	53 e0       	ldi	r21, 0x03	; 3
    288c:	c7 01       	movw	r24, r14
    288e:	b6 01       	movw	r22, r12
    2890:	0e 94 9a 14 	call	0x2934	; 0x2934 <SDRead>
    2894:	88 23       	and	r24, r24
    2896:	09 f4       	brne	.+2      	; 0x289a <updateSessionMap+0x42>
    2898:	42 c0       	rjmp	.+132    	; 0x291e <updateSessionMap+0xc6>
		return false;
	}

	// Update session map
	*(uint64_t*)(frameBuffer + mapOffset) = gState.newSessionSector;
    289a:	f4 01       	movw	r30, r8
    289c:	ec 5d       	subi	r30, 0xDC	; 220
    289e:	fc 4f       	sbci	r31, 0xFC	; 252
    28a0:	00 91 3c 05 	lds	r16, 0x053C	; 0x80053c <gState+0x18>
    28a4:	10 91 3d 05 	lds	r17, 0x053D	; 0x80053d <gState+0x19>
    28a8:	20 91 3e 05 	lds	r18, 0x053E	; 0x80053e <gState+0x1a>
    28ac:	30 91 3f 05 	lds	r19, 0x053F	; 0x80053f <gState+0x1b>
    28b0:	00 83       	st	Z, r16
    28b2:	11 83       	std	Z+1, r17	; 0x01
    28b4:	22 83       	std	Z+2, r18	; 0x02
    28b6:	33 83       	std	Z+3, r19	; 0x03
    28b8:	14 82       	std	Z+4, r1	; 0x04
    28ba:	15 82       	std	Z+5, r1	; 0x05
    28bc:	16 82       	std	Z+6, r1	; 0x06
    28be:	17 82       	std	Z+7, r1	; 0x07

	if (!SDWrite(mapSector, frameBuffer, 1)) {
    28c0:	01 e0       	ldi	r16, 0x01	; 1
    28c2:	10 e0       	ldi	r17, 0x00	; 0
    28c4:	20 e0       	ldi	r18, 0x00	; 0
    28c6:	30 e0       	ldi	r19, 0x00	; 0
    28c8:	44 e2       	ldi	r20, 0x24	; 36
    28ca:	53 e0       	ldi	r21, 0x03	; 3
    28cc:	c7 01       	movw	r24, r14
    28ce:	b6 01       	movw	r22, r12
    28d0:	0e 94 be 13 	call	0x277c	; 0x277c <SDWrite>
    28d4:	88 23       	and	r24, r24
    28d6:	19 f1       	breq	.+70     	; 0x291e <updateSessionMap+0xc6>
		return false;
	}

	// Update map pointers
	gState.activeSessionMapOffset += sizeof(uint64_t);
    28d8:	e4 e2       	ldi	r30, 0x24	; 36
    28da:	f5 e0       	ldi	r31, 0x05	; 5
    28dc:	80 a1       	ldd	r24, Z+32	; 0x20
    28de:	91 a1       	ldd	r25, Z+33	; 0x21
    28e0:	a2 a1       	ldd	r26, Z+34	; 0x22
    28e2:	b3 a1       	ldd	r27, Z+35	; 0x23
    28e4:	08 96       	adiw	r24, 0x08	; 8
    28e6:	a1 1d       	adc	r26, r1
    28e8:	b1 1d       	adc	r27, r1
    28ea:	80 a3       	std	Z+32, r24	; 0x20
    28ec:	91 a3       	std	Z+33, r25	; 0x21
    28ee:	a2 a3       	std	Z+34, r26	; 0x22
    28f0:	b3 a3       	std	Z+35, r27	; 0x23
	if (gState.activeSessionMapOffset >= SECTOR_SIZE) {
    28f2:	81 15       	cp	r24, r1
    28f4:	92 40       	sbci	r25, 0x02	; 2
    28f6:	a1 05       	cpc	r26, r1
    28f8:	b1 05       	cpc	r27, r1
    28fa:	78 f0       	brcs	.+30     	; 0x291a <updateSessionMap+0xc2>
		gState.activeSessionMapSector++;
    28fc:	84 8d       	ldd	r24, Z+28	; 0x1c
    28fe:	95 8d       	ldd	r25, Z+29	; 0x1d
    2900:	a6 8d       	ldd	r26, Z+30	; 0x1e
    2902:	b7 8d       	ldd	r27, Z+31	; 0x1f
    2904:	01 96       	adiw	r24, 0x01	; 1
    2906:	a1 1d       	adc	r26, r1
    2908:	b1 1d       	adc	r27, r1
    290a:	84 8f       	std	Z+28, r24	; 0x1c
    290c:	95 8f       	std	Z+29, r25	; 0x1d
    290e:	a6 8f       	std	Z+30, r26	; 0x1e
    2910:	b7 8f       	std	Z+31, r27	; 0x1f
		gState.activeSessionMapOffset = 0;
    2912:	10 a2       	std	Z+32, r1	; 0x20
    2914:	11 a2       	std	Z+33, r1	; 0x21
    2916:	12 a2       	std	Z+34, r1	; 0x22
    2918:	13 a2       	std	Z+35, r1	; 0x23
	}

	return writeGlobalState();
    291a:	0e 94 f4 20 	call	0x41e8	; 0x41e8 <writeGlobalState>
}
    291e:	1f 91       	pop	r17
    2920:	0f 91       	pop	r16
    2922:	ff 90       	pop	r15
    2924:	ef 90       	pop	r14
    2926:	df 90       	pop	r13
    2928:	cf 90       	pop	r12
    292a:	bf 90       	pop	r11
    292c:	af 90       	pop	r10
    292e:	9f 90       	pop	r9
    2930:	8f 90       	pop	r8
    2932:	08 95       	ret

Disassembly of section .text.STORE_Init:

00003510 <STORE_Init>:

bool STORE_Init(void) {
    3510:	cf 93       	push	r28
	if (!SDInit()) {
    3512:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <SDInit>
    3516:	c8 2f       	mov	r28, r24
    3518:	88 23       	and	r24, r24
    351a:	c1 f1       	breq	.+112    	; 0x358c <STORE_Init+0x7c>
		return false;
	}

	if (!readGlobalState()) {
    351c:	0e 94 c2 1f 	call	0x3f84	; 0x3f84 <readGlobalState>
    3520:	81 11       	cpse	r24, r1
    3522:	22 c0       	rjmp	.+68     	; 0x3568 <STORE_Init+0x58>
		// Initialize global state if it doesn't exist
		memset(&gState, 0, sizeof(GlobalState));
    3524:	e4 e2       	ldi	r30, 0x24	; 36
    3526:	f5 e0       	ldi	r31, 0x05	; 5
    3528:	88 ed       	ldi	r24, 0xD8	; 216
    352a:	91 e0       	ldi	r25, 0x01	; 1
    352c:	df 01       	movw	r26, r30
    352e:	9c 01       	movw	r18, r24
    3530:	1d 92       	st	X+, r1
    3532:	21 50       	subi	r18, 0x01	; 1
    3534:	30 40       	sbci	r19, 0x00	; 0
    3536:	e1 f7       	brne	.-8      	; 0x3530 <STORE_Init+0x20>
		gState.firstSessionSector = 1;
    3538:	81 e0       	ldi	r24, 0x01	; 1
    353a:	90 e0       	ldi	r25, 0x00	; 0
    353c:	a0 e0       	ldi	r26, 0x00	; 0
    353e:	b0 e0       	ldi	r27, 0x00	; 0
    3540:	84 87       	std	Z+12, r24	; 0x0c
    3542:	95 87       	std	Z+13, r25	; 0x0d
    3544:	a6 87       	std	Z+14, r26	; 0x0e
    3546:	b7 87       	std	Z+15, r27	; 0x0f
		gState.newSessionSector = 1;
    3548:	80 8f       	std	Z+24, r24	; 0x18
    354a:	91 8f       	std	Z+25, r25	; 0x19
    354c:	a2 8f       	std	Z+26, r26	; 0x1a
    354e:	b3 8f       	std	Z+27, r27	; 0x1b
		gState.activeSessionMapSector = 4;
    3550:	84 e0       	ldi	r24, 0x04	; 4
    3552:	90 e0       	ldi	r25, 0x00	; 0
    3554:	a0 e0       	ldi	r26, 0x00	; 0
    3556:	b0 e0       	ldi	r27, 0x00	; 0
    3558:	84 8f       	std	Z+28, r24	; 0x1c
    355a:	95 8f       	std	Z+29, r25	; 0x1d
    355c:	a6 8f       	std	Z+30, r26	; 0x1e
    355e:	b7 8f       	std	Z+31, r27	; 0x1f
		gState.activeSessionMapOffset = 0;
		// TODO: Initialize other fields as needed
		if (!writeGlobalState()) {
    3560:	0e 94 f4 20 	call	0x41e8	; 0x41e8 <writeGlobalState>
    3564:	88 23       	and	r24, r24
    3566:	89 f0       	breq	.+34     	; 0x358a <STORE_Init+0x7a>
			return false;
		}
	}

	currentSector = gState.newSessionSector;
    3568:	80 91 3c 05 	lds	r24, 0x053C	; 0x80053c <gState+0x18>
    356c:	90 91 3d 05 	lds	r25, 0x053D	; 0x80053d <gState+0x19>
    3570:	a0 91 3e 05 	lds	r26, 0x053E	; 0x80053e <gState+0x1a>
    3574:	b0 91 3f 05 	lds	r27, 0x053F	; 0x80053f <gState+0x1b>
    3578:	80 93 50 07 	sts	0x0750, r24	; 0x800750 <currentSector>
    357c:	90 93 51 07 	sts	0x0751, r25	; 0x800751 <currentSector+0x1>
    3580:	a0 93 52 07 	sts	0x0752, r26	; 0x800752 <currentSector+0x2>
    3584:	b0 93 53 07 	sts	0x0753, r27	; 0x800753 <currentSector+0x3>
	return true;
    3588:	01 c0       	rjmp	.+2      	; 0x358c <STORE_Init+0x7c>
		gState.newSessionSector = 1;
		gState.activeSessionMapSector = 4;
		gState.activeSessionMapOffset = 0;
		// TODO: Initialize other fields as needed
		if (!writeGlobalState()) {
			return false;
    358a:	c8 2f       	mov	r28, r24
		}
	}

	currentSector = gState.newSessionSector;
	return true;
}
    358c:	8c 2f       	mov	r24, r28
    358e:	cf 91       	pop	r28
    3590:	08 95       	ret

Disassembly of section .text.STORE_WriteFrame:

000024c6 <STORE_WriteFrame>:

bool STORE_WriteFrame(volatile FrameData* frame) {
    24c6:	8f 92       	push	r8
    24c8:	9f 92       	push	r9
    24ca:	af 92       	push	r10
    24cc:	bf 92       	push	r11
    24ce:	cf 92       	push	r12
    24d0:	df 92       	push	r13
    24d2:	ef 92       	push	r14
    24d4:	ff 92       	push	r15
    24d6:	0f 93       	push	r16
    24d8:	1f 93       	push	r17
    24da:	cf 93       	push	r28
    24dc:	df 93       	push	r29
	uint32_t bytesWritten = 0;
	uint32_t currentOffset = 0;
	uint32_t sectorsToWrite;
	
	// Verify frame size
	if(frame->frameBytes > FRAME_BUFFER_SIZE) {
    24de:	fc 01       	movw	r30, r24
    24e0:	24 81       	ldd	r18, Z+4	; 0x04
    24e2:	35 81       	ldd	r19, Z+5	; 0x05
    24e4:	21 30       	cpi	r18, 0x01	; 1
    24e6:	32 40       	sbci	r19, 0x02	; 2
    24e8:	08 f0       	brcs	.+2      	; 0x24ec <STORE_WriteFrame+0x26>
    24ea:	5a c0       	rjmp	.+180    	; 0x25a0 <STORE_WriteFrame+0xda>
    24ec:	ec 01       	movw	r28, r24
		return false;
	}
	
	// Copy frame data to our buffer
	memcpy(frameBuffer, (const void*)frame, frame->frameBytes);
    24ee:	2c 81       	ldd	r18, Y+4	; 0x04
    24f0:	3d 81       	ldd	r19, Y+5	; 0x05
    24f2:	ac 01       	movw	r20, r24
    24f4:	60 e8       	ldi	r22, 0x80	; 128
    24f6:	84 e2       	ldi	r24, 0x24	; 36
    24f8:	93 e0       	ldi	r25, 0x03	; 3
    24fa:	0e 94 0d 21 	call	0x421a	; 0x421a <memcpy>
	
	// Zero out any remaining buffer space in last sector
	if(frame->frameBytes < FRAME_BUFFER_SIZE) {
    24fe:	8c 81       	ldd	r24, Y+4	; 0x04
    2500:	9d 81       	ldd	r25, Y+5	; 0x05
    2502:	81 15       	cp	r24, r1
    2504:	92 40       	sbci	r25, 0x02	; 2
    2506:	70 f4       	brcc	.+28     	; 0x2524 <STORE_WriteFrame+0x5e>
		memset(frameBuffer + frame->frameBytes, 0, FRAME_BUFFER_SIZE - frame->frameBytes);
    2508:	2c 81       	ldd	r18, Y+4	; 0x04
    250a:	3d 81       	ldd	r19, Y+5	; 0x05
    250c:	8c 81       	ldd	r24, Y+4	; 0x04
    250e:	9d 81       	ldd	r25, Y+5	; 0x05
    2510:	40 e0       	ldi	r20, 0x00	; 0
    2512:	52 e0       	ldi	r21, 0x02	; 2
    2514:	42 1b       	sub	r20, r18
    2516:	53 0b       	sbc	r21, r19
    2518:	60 e0       	ldi	r22, 0x00	; 0
    251a:	70 e0       	ldi	r23, 0x00	; 0
    251c:	8c 5d       	subi	r24, 0xDC	; 220
    251e:	9c 4f       	sbci	r25, 0xFC	; 252
    2520:	0e 94 9c 24 	call	0x4938	; 0x4938 <memset>

	currentSector = gState.newSessionSector;
	return true;
}

bool STORE_WriteFrame(volatile FrameData* frame) {
    2524:	c1 2c       	mov	r12, r1
    2526:	d1 2c       	mov	r13, r1
    2528:	76 01       	movw	r14, r12
    252a:	c3 94       	inc	r12
    252c:	81 2c       	mov	r8, r1
    252e:	91 2c       	mov	r9, r1
    2530:	54 01       	movw	r10, r8
    2532:	2f c0       	rjmp	.+94     	; 0x2592 <STORE_WriteFrame+0xcc>
	// Calculate how many complete sectors we need to write
	sectorsToWrite = SECTORS_PER_FRAME;
	
	// Write all sectors
	while(sectorsToWrite > 0) {
		if(!SDWrite(currentSector, frameBuffer + currentOffset, 1)) {
    2534:	60 91 50 07 	lds	r22, 0x0750	; 0x800750 <currentSector>
    2538:	70 91 51 07 	lds	r23, 0x0751	; 0x800751 <currentSector+0x1>
    253c:	80 91 52 07 	lds	r24, 0x0752	; 0x800752 <currentSector+0x2>
    2540:	90 91 53 07 	lds	r25, 0x0753	; 0x800753 <currentSector+0x3>
    2544:	01 e0       	ldi	r16, 0x01	; 1
    2546:	10 e0       	ldi	r17, 0x00	; 0
    2548:	20 e0       	ldi	r18, 0x00	; 0
    254a:	30 e0       	ldi	r19, 0x00	; 0
    254c:	a4 01       	movw	r20, r8
    254e:	4c 5d       	subi	r20, 0xDC	; 220
    2550:	5c 4f       	sbci	r21, 0xFC	; 252
    2552:	0e 94 be 13 	call	0x277c	; 0x277c <SDWrite>
    2556:	88 23       	and	r24, r24
    2558:	21 f1       	breq	.+72     	; 0x25a2 <STORE_WriteFrame+0xdc>
			return false;
		}
		currentSector++;
    255a:	80 91 50 07 	lds	r24, 0x0750	; 0x800750 <currentSector>
    255e:	90 91 51 07 	lds	r25, 0x0751	; 0x800751 <currentSector+0x1>
    2562:	a0 91 52 07 	lds	r26, 0x0752	; 0x800752 <currentSector+0x2>
    2566:	b0 91 53 07 	lds	r27, 0x0753	; 0x800753 <currentSector+0x3>
    256a:	01 96       	adiw	r24, 0x01	; 1
    256c:	a1 1d       	adc	r26, r1
    256e:	b1 1d       	adc	r27, r1
    2570:	80 93 50 07 	sts	0x0750, r24	; 0x800750 <currentSector>
    2574:	90 93 51 07 	sts	0x0751, r25	; 0x800751 <currentSector+0x1>
    2578:	a0 93 52 07 	sts	0x0752, r26	; 0x800752 <currentSector+0x2>
    257c:	b0 93 53 07 	sts	0x0753, r27	; 0x800753 <currentSector+0x3>
		currentOffset += SECTOR_SIZE;
    2580:	42 e0       	ldi	r20, 0x02	; 2
    2582:	94 0e       	add	r9, r20
    2584:	a1 1c       	adc	r10, r1
    2586:	b1 1c       	adc	r11, r1
		sectorsToWrite--;
    2588:	81 e0       	ldi	r24, 0x01	; 1
    258a:	c8 1a       	sub	r12, r24
    258c:	d1 08       	sbc	r13, r1
    258e:	e1 08       	sbc	r14, r1
    2590:	f1 08       	sbc	r15, r1
	
	// Calculate how many complete sectors we need to write
	sectorsToWrite = SECTORS_PER_FRAME;
	
	// Write all sectors
	while(sectorsToWrite > 0) {
    2592:	c1 14       	cp	r12, r1
    2594:	d1 04       	cpc	r13, r1
    2596:	e1 04       	cpc	r14, r1
    2598:	f1 04       	cpc	r15, r1
    259a:	61 f6       	brne	.-104    	; 0x2534 <STORE_WriteFrame+0x6e>
		currentSector++;
		currentOffset += SECTOR_SIZE;
		sectorsToWrite--;
	}
	
	return true;
    259c:	81 e0       	ldi	r24, 0x01	; 1
    259e:	01 c0       	rjmp	.+2      	; 0x25a2 <STORE_WriteFrame+0xdc>
	uint32_t currentOffset = 0;
	uint32_t sectorsToWrite;
	
	// Verify frame size
	if(frame->frameBytes > FRAME_BUFFER_SIZE) {
		return false;
    25a0:	80 e0       	ldi	r24, 0x00	; 0
		currentOffset += SECTOR_SIZE;
		sectorsToWrite--;
	}
	
	return true;
}
    25a2:	df 91       	pop	r29
    25a4:	cf 91       	pop	r28
    25a6:	1f 91       	pop	r17
    25a8:	0f 91       	pop	r16
    25aa:	ff 90       	pop	r15
    25ac:	ef 90       	pop	r14
    25ae:	df 90       	pop	r13
    25b0:	cf 90       	pop	r12
    25b2:	bf 90       	pop	r11
    25b4:	af 90       	pop	r10
    25b6:	9f 90       	pop	r9
    25b8:	8f 90       	pop	r8
    25ba:	08 95       	ret

Disassembly of section .text.STORE_StartNewSession:

00004074 <STORE_StartNewSession>:

bool STORE_StartNewSession(void) {
	// Update session info
	gState.sessionCount++;
    4074:	e4 e2       	ldi	r30, 0x24	; 36
    4076:	f5 e0       	ldi	r31, 0x05	; 5
    4078:	84 89       	ldd	r24, Z+20	; 0x14
    407a:	95 89       	ldd	r25, Z+21	; 0x15
    407c:	a6 89       	ldd	r26, Z+22	; 0x16
    407e:	b7 89       	ldd	r27, Z+23	; 0x17
    4080:	01 96       	adiw	r24, 0x01	; 1
    4082:	a1 1d       	adc	r26, r1
    4084:	b1 1d       	adc	r27, r1
    4086:	84 8b       	std	Z+20, r24	; 0x14
    4088:	95 8b       	std	Z+21, r25	; 0x15
    408a:	a6 8b       	std	Z+22, r26	; 0x16
    408c:	b7 8b       	std	Z+23, r27	; 0x17
	gState.newSessionSector = currentSector;
    408e:	80 91 50 07 	lds	r24, 0x0750	; 0x800750 <currentSector>
    4092:	90 91 51 07 	lds	r25, 0x0751	; 0x800751 <currentSector+0x1>
    4096:	a0 91 52 07 	lds	r26, 0x0752	; 0x800752 <currentSector+0x2>
    409a:	b0 91 53 07 	lds	r27, 0x0753	; 0x800753 <currentSector+0x3>
    409e:	80 8f       	std	Z+24, r24	; 0x18
    40a0:	91 8f       	std	Z+25, r25	; 0x19
    40a2:	a2 8f       	std	Z+26, r26	; 0x1a
    40a4:	b3 8f       	std	Z+27, r27	; 0x1b
	// Ensure sector alignment for new sessions
	if(currentSector % SECTORS_PER_FRAME != 0) {
		currentSector += SECTORS_PER_FRAME - (currentSector % SECTORS_PER_FRAME);
	}
	
	return updateSessionMap();
    40a6:	0e 94 2c 14 	call	0x2858	; 0x2858 <updateSessionMap>
}
    40aa:	08 95       	ret

Disassembly of section .text.STORE_EndSession:

0000435a <STORE_EndSession>:
	// Ensure we end on a frame boundary
	if(currentSector % SECTORS_PER_FRAME != 0) {
		currentSector += SECTORS_PER_FRAME - (currentSector % SECTORS_PER_FRAME);
	}
	
	gState.lastSessionSector = currentSector - 1;
    435a:	80 91 50 07 	lds	r24, 0x0750	; 0x800750 <currentSector>
    435e:	90 91 51 07 	lds	r25, 0x0751	; 0x800751 <currentSector+0x1>
    4362:	a0 91 52 07 	lds	r26, 0x0752	; 0x800752 <currentSector+0x2>
    4366:	b0 91 53 07 	lds	r27, 0x0753	; 0x800753 <currentSector+0x3>
    436a:	01 97       	sbiw	r24, 0x01	; 1
    436c:	a1 09       	sbc	r26, r1
    436e:	b1 09       	sbc	r27, r1
    4370:	80 93 34 05 	sts	0x0534, r24	; 0x800534 <gState+0x10>
    4374:	90 93 35 05 	sts	0x0535, r25	; 0x800535 <gState+0x11>
    4378:	a0 93 36 05 	sts	0x0536, r26	; 0x800536 <gState+0x12>
    437c:	b0 93 37 05 	sts	0x0537, r27	; 0x800537 <gState+0x13>
	return writeGlobalState();
    4380:	0e 94 f4 20 	call	0x41e8	; 0x41e8 <writeGlobalState>
}
    4384:	08 95       	ret

Disassembly of section .text.vUARTtxDataAvailable:

00004770 <vUARTtxDataAvailable>:
#endif

bool vUARTIsBusy(void) {
	return ((sg_etxState != ESTATE_IDLE) ||
		(sg_eCell_mc_rxState != ESTATE_IDLE));
}
    4770:	80 91 6f 07 	lds	r24, 0x076F	; 0x80076f <sg_u8SendIndex>
    4774:	81 11       	cpse	r24, r1
    4776:	06 c0       	rjmp	.+12     	; 0x4784 <vUARTtxDataAvailable+0x14>
    4778:	0e 94 00 22 	call	0x4400	; 0x4400 <PlatformGetSendData>
    477c:	90 93 59 07 	sts	0x0759, r25	; 0x800759 <sg_u8SendData+0x1>
    4780:	80 93 58 07 	sts	0x0758, r24	; 0x800758 <sg_u8SendData>
    4784:	80 91 6f 07 	lds	r24, 0x076F	; 0x80076f <sg_u8SendIndex>
    4788:	81 11       	cpse	r24, r1
    478a:	02 c0       	rjmp	.+4      	; 0x4790 <vUARTtxDataAvailable+0x20>
    478c:	81 e0       	ldi	r24, 0x01	; 1
    478e:	08 95       	ret
    4790:	80 e0       	ldi	r24, 0x00	; 0
    4792:	08 95       	ret

Disassembly of section .text.vUARTtxDataGet:

00003eb0 <vUARTtxDataGet>:
    3eb0:	80 91 6f 07 	lds	r24, 0x076F	; 0x80076f <sg_u8SendIndex>
    3eb4:	81 11       	cpse	r24, r1
    3eb6:	10 c0       	rjmp	.+32     	; 0x3ed8 <vUARTtxDataGet+0x28>
    3eb8:	81 e0       	ldi	r24, 0x01	; 1
    3eba:	0e 94 00 22 	call	0x4400	; 0x4400 <PlatformGetSendData>
    3ebe:	e8 e5       	ldi	r30, 0x58	; 88
    3ec0:	f7 e0       	ldi	r31, 0x07	; 7
    3ec2:	90 83       	st	Z, r25
    3ec4:	81 83       	std	Z+1, r24	; 0x01
    3ec6:	80 81       	ld	r24, Z
    3ec8:	88 23       	and	r24, r24
    3eca:	24 f4       	brge	.+8      	; 0x3ed4 <vUARTtxDataGet+0x24>
    3ecc:	81 e0       	ldi	r24, 0x01	; 1
    3ece:	80 93 71 07 	sts	0x0771, r24	; 0x800771 <sg_bCellReportsReuested>
    3ed2:	02 c0       	rjmp	.+4      	; 0x3ed8 <vUARTtxDataGet+0x28>
    3ed4:	10 92 71 07 	sts	0x0771, r1	; 0x800771 <sg_bCellReportsReuested>
    3ed8:	e0 91 6f 07 	lds	r30, 0x076F	; 0x80076f <sg_u8SendIndex>
    3edc:	f0 e0       	ldi	r31, 0x00	; 0
    3ede:	e8 5a       	subi	r30, 0xA8	; 168
    3ee0:	f8 4f       	sbci	r31, 0xF8	; 248
    3ee2:	80 81       	ld	r24, Z
    3ee4:	90 91 6f 07 	lds	r25, 0x076F	; 0x80076f <sg_u8SendIndex>
    3ee8:	9f 5f       	subi	r25, 0xFF	; 255
    3eea:	90 93 6f 07 	sts	0x076F, r25	; 0x80076f <sg_u8SendIndex>
    3eee:	90 91 6f 07 	lds	r25, 0x076F	; 0x80076f <sg_u8SendIndex>
    3ef2:	92 30       	cpi	r25, 0x02	; 2
    3ef4:	10 f0       	brcs	.+4      	; 0x3efa <vUARTtxDataGet+0x4a>
    3ef6:	10 92 6f 07 	sts	0x076F, r1	; 0x80076f <sg_u8SendIndex>
    3efa:	08 95       	ret

Disassembly of section .text.vUARTRXReset:

00004a20 <vUARTRXReset>:

// Called when we have a string timeout or need to reset the state machine
// for the MC RX side of things
void vUARTRXReset(void)
{
	sg_eCell_mc_rxState = ESTATE_IDLE;
    4a20:	10 92 78 07 	sts	0x0778, r1	; 0x800778 <sg_eCell_mc_rxState>
	vUARTRXStart();
    4a24:	0e 94 5e 24 	call	0x48bc	; 0x48bc <vUARTRXStart>
    4a28:	08 95       	ret

Disassembly of section .text.vUARTStarttx:

00003c6e <vUARTStarttx>:
#endif

bool vUARTIsBusy(void) {
	return ((sg_etxState != ESTATE_IDLE) ||
		(sg_eCell_mc_rxState != ESTATE_IDLE));
}
    3c6e:	80 91 72 07 	lds	r24, 0x0772	; 0x800772 <sg_etxState>
    3c72:	81 11       	cpse	r24, r1
    3c74:	23 c0       	rjmp	.+70     	; 0x3cbc <vUARTStarttx+0x4e>
    3c76:	80 91 78 07 	lds	r24, 0x0778	; 0x800778 <sg_eCell_mc_rxState>
    3c7a:	81 11       	cpse	r24, r1
    3c7c:	21 c0       	rjmp	.+66     	; 0x3cc0 <vUARTStarttx+0x52>
    3c7e:	82 e0       	ldi	r24, 0x02	; 2
    3c80:	80 93 72 07 	sts	0x0772, r24	; 0x800772 <sg_etxState>
    3c84:	10 92 6f 07 	sts	0x076F, r1	; 0x80076f <sg_u8SendIndex>
    3c88:	10 92 75 07 	sts	0x0775, r1	; 0x800775 <sg_u8txBitCount>
    3c8c:	81 e0       	ldi	r24, 0x01	; 1
    3c8e:	80 93 70 07 	sts	0x0770, r24	; 0x800770 <sg_bMCTxNextBit>
    3c92:	86 b5       	in	r24, 0x26	; 38
    3c94:	8e 5c       	subi	r24, 0xCE	; 206
    3c96:	87 bd       	out	0x27, r24	; 39
    3c98:	85 b3       	in	r24, 0x15	; 21
    3c9a:	82 60       	ori	r24, 0x02	; 2
    3c9c:	85 bb       	out	0x15, r24	; 21
    3c9e:	ee e6       	ldi	r30, 0x6E	; 110
    3ca0:	f0 e0       	ldi	r31, 0x00	; 0
    3ca2:	80 81       	ld	r24, Z
    3ca4:	82 60       	ori	r24, 0x02	; 2
    3ca6:	80 83       	st	Z, r24
    3ca8:	0e 94 b8 23 	call	0x4770	; 0x4770 <vUARTtxDataAvailable>
    3cac:	80 93 73 07 	sts	0x0773, r24	; 0x800773 <sg_btxMoreAvailable>
    3cb0:	0e 94 58 1f 	call	0x3eb0	; 0x3eb0 <vUARTtxDataGet>
    3cb4:	80 93 74 07 	sts	0x0774, r24	; 0x800774 <sg_u8txDataByte>
    3cb8:	81 e0       	ldi	r24, 0x01	; 1
    3cba:	08 95       	ret
    3cbc:	80 e0       	ldi	r24, 0x00	; 0
    3cbe:	08 95       	ret
    3cc0:	80 e0       	ldi	r24, 0x00	; 0
    3cc2:	08 95       	ret

Disassembly of section .text.__vector_8:

00003a34 <__vector_8>:
    3a34:	1f 92       	push	r1
    3a36:	0f 92       	push	r0
    3a38:	0f b6       	in	r0, 0x3f	; 63
    3a3a:	0f 92       	push	r0
    3a3c:	11 24       	eor	r1, r1
    3a3e:	8f 93       	push	r24
    3a40:	ef 93       	push	r30
    3a42:	ff 93       	push	r31
    3a44:	86 b5       	in	r24, 0x26	; 38
    3a46:	85 5c       	subi	r24, 0xC5	; 197
    3a48:	88 bd       	out	0x28, r24	; 40
    3a4a:	85 b3       	in	r24, 0x15	; 21
    3a4c:	84 60       	ori	r24, 0x04	; 4
    3a4e:	85 bb       	out	0x15, r24	; 21
    3a50:	ee e6       	ldi	r30, 0x6E	; 110
    3a52:	f0 e0       	ldi	r31, 0x00	; 0
    3a54:	80 81       	ld	r24, Z
    3a56:	84 60       	ori	r24, 0x04	; 4
    3a58:	80 83       	st	Z, r24
    3a5a:	8d b3       	in	r24, 0x1d	; 29
    3a5c:	8d 7f       	andi	r24, 0xFD	; 253
    3a5e:	8d bb       	out	0x1d, r24	; 29
    3a60:	80 91 6e 07 	lds	r24, 0x076E	; 0x80076e <sg_bState>
    3a64:	88 23       	and	r24, r24
    3a66:	31 f0       	breq	.+12     	; 0x3a74 <__vector_8+0x40>
    3a68:	88 b1       	in	r24, 0x08	; 8
    3a6a:	80 68       	ori	r24, 0x80	; 128
    3a6c:	88 b9       	out	0x08, r24	; 8
    3a6e:	10 92 6e 07 	sts	0x076E, r1	; 0x80076e <sg_bState>
    3a72:	06 c0       	rjmp	.+12     	; 0x3a80 <__vector_8+0x4c>
    3a74:	88 b1       	in	r24, 0x08	; 8
    3a76:	8f 77       	andi	r24, 0x7F	; 127
    3a78:	88 b9       	out	0x08, r24	; 8
    3a7a:	81 e0       	ldi	r24, 0x01	; 1
    3a7c:	80 93 6e 07 	sts	0x076E, r24	; 0x80076e <sg_bState>
    3a80:	81 e0       	ldi	r24, 0x01	; 1
    3a82:	80 93 78 07 	sts	0x0778, r24	; 0x800778 <sg_eCell_mc_rxState>
    3a86:	10 92 7a 07 	sts	0x077A, r1	; 0x80077a <sg_u8Cell_mc_rxBitCount>
    3a8a:	ff 91       	pop	r31
    3a8c:	ef 91       	pop	r30
    3a8e:	8f 91       	pop	r24
    3a90:	0f 90       	pop	r0
    3a92:	0f be       	out	0x3f, r0	; 63
    3a94:	0f 90       	pop	r0
    3a96:	1f 90       	pop	r1
    3a98:	18 95       	reti

Disassembly of section .text.__vector_16:

0000269e <__vector_16>:
    269e:	1f 92       	push	r1
    26a0:	0f 92       	push	r0
    26a2:	0f b6       	in	r0, 0x3f	; 63
    26a4:	0f 92       	push	r0
    26a6:	11 24       	eor	r1, r1
    26a8:	2f 93       	push	r18
    26aa:	3f 93       	push	r19
    26ac:	4f 93       	push	r20
    26ae:	5f 93       	push	r21
    26b0:	6f 93       	push	r22
    26b2:	7f 93       	push	r23
    26b4:	8f 93       	push	r24
    26b6:	9f 93       	push	r25
    26b8:	af 93       	push	r26
    26ba:	bf 93       	push	r27
    26bc:	ef 93       	push	r30
    26be:	ff 93       	push	r31
    26c0:	86 b5       	in	r24, 0x26	; 38
    26c2:	85 5d       	subi	r24, 0xD5	; 213
    26c4:	88 bd       	out	0x28, r24	; 40
    26c6:	85 b3       	in	r24, 0x15	; 21
    26c8:	84 60       	ori	r24, 0x04	; 4
    26ca:	85 bb       	out	0x15, r24	; 21
    26cc:	ee e6       	ldi	r30, 0x6E	; 110
    26ce:	f0 e0       	ldi	r31, 0x00	; 0
    26d0:	80 81       	ld	r24, Z
    26d2:	84 60       	ori	r24, 0x04	; 4
    26d4:	80 83       	st	Z, r24
    26d6:	20 91 77 07 	lds	r18, 0x0777	; 0x800777 <sg_bCell_mc_rxPriorState>
    26da:	83 b1       	in	r24, 0x03	; 3
    26dc:	82 fb       	bst	r24, 2
    26de:	88 27       	eor	r24, r24
    26e0:	80 f9       	bld	r24, 0
    26e2:	80 93 77 07 	sts	0x0777, r24	; 0x800777 <sg_bCell_mc_rxPriorState>
    26e6:	90 91 6e 07 	lds	r25, 0x076E	; 0x80076e <sg_bState>
    26ea:	99 23       	and	r25, r25
    26ec:	31 f0       	breq	.+12     	; 0x26fa <__vector_16+0x5c>
    26ee:	98 b1       	in	r25, 0x08	; 8
    26f0:	90 68       	ori	r25, 0x80	; 128
    26f2:	98 b9       	out	0x08, r25	; 8
    26f4:	10 92 6e 07 	sts	0x076E, r1	; 0x80076e <sg_bState>
    26f8:	06 c0       	rjmp	.+12     	; 0x2706 <__vector_16+0x68>
    26fa:	98 b1       	in	r25, 0x08	; 8
    26fc:	9f 77       	andi	r25, 0x7F	; 127
    26fe:	98 b9       	out	0x08, r25	; 8
    2700:	81 e0       	ldi	r24, 0x01	; 1
    2702:	80 93 6e 07 	sts	0x076E, r24	; 0x80076e <sg_bState>
    2706:	80 91 7a 07 	lds	r24, 0x077A	; 0x80077a <sg_u8Cell_mc_rxBitCount>
    270a:	8f 5f       	subi	r24, 0xFF	; 255
    270c:	80 93 7a 07 	sts	0x077A, r24	; 0x80077a <sg_u8Cell_mc_rxBitCount>
    2710:	81 30       	cpi	r24, 0x01	; 1
    2712:	19 f4       	brne	.+6      	; 0x271a <__vector_16+0x7c>
    2714:	10 92 79 07 	sts	0x0779, r1	; 0x800779 <sg_u8rxDataByte>
    2718:	20 c0       	rjmp	.+64     	; 0x275a <__vector_16+0xbc>
    271a:	8a 30       	cpi	r24, 0x0A	; 10
    271c:	38 f4       	brcc	.+14     	; 0x272c <__vector_16+0x8e>
    271e:	80 91 79 07 	lds	r24, 0x0779	; 0x800779 <sg_u8rxDataByte>
    2722:	88 0f       	add	r24, r24
    2724:	82 2b       	or	r24, r18
    2726:	80 93 79 07 	sts	0x0779, r24	; 0x800779 <sg_u8rxDataByte>
    272a:	17 c0       	rjmp	.+46     	; 0x275a <__vector_16+0xbc>
    272c:	20 93 76 07 	sts	0x0776, r18	; 0x800776 <sg_bCell_mc_rxMoreData>
    2730:	8c e0       	ldi	r24, 0x0C	; 12
    2732:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f0069>
    2736:	8c b3       	in	r24, 0x1c	; 28
    2738:	82 60       	ori	r24, 0x02	; 2
    273a:	8c bb       	out	0x1c, r24	; 28
    273c:	8d b3       	in	r24, 0x1d	; 29
    273e:	82 60       	ori	r24, 0x02	; 2
    2740:	8d bb       	out	0x1d, r24	; 29
    2742:	ee e6       	ldi	r30, 0x6E	; 110
    2744:	f0 e0       	ldi	r31, 0x00	; 0
    2746:	80 81       	ld	r24, Z
    2748:	8b 7f       	andi	r24, 0xFB	; 251
    274a:	80 83       	st	Z, r24
    274c:	80 91 79 07 	lds	r24, 0x0779	; 0x800779 <sg_u8rxDataByte>
    2750:	0e 94 3d 1c 	call	0x387a	; 0x387a <vUARTRXData>
    2754:	83 e0       	ldi	r24, 0x03	; 3
    2756:	80 93 78 07 	sts	0x0778, r24	; 0x800778 <sg_eCell_mc_rxState>
    275a:	ff 91       	pop	r31
    275c:	ef 91       	pop	r30
    275e:	bf 91       	pop	r27
    2760:	af 91       	pop	r26
    2762:	9f 91       	pop	r25
    2764:	8f 91       	pop	r24
    2766:	7f 91       	pop	r23
    2768:	6f 91       	pop	r22
    276a:	5f 91       	pop	r21
    276c:	4f 91       	pop	r20
    276e:	3f 91       	pop	r19
    2770:	2f 91       	pop	r18
    2772:	0f 90       	pop	r0
    2774:	0f be       	out	0x3f, r0	; 63
    2776:	0f 90       	pop	r0
    2778:	1f 90       	pop	r1
    277a:	18 95       	reti

Disassembly of section .text.__vector_15:

00002076 <__vector_15>:
    2076:	1f 92       	push	r1
    2078:	0f 92       	push	r0
    207a:	0f b6       	in	r0, 0x3f	; 63
    207c:	0f 92       	push	r0
    207e:	11 24       	eor	r1, r1
    2080:	2f 93       	push	r18
    2082:	3f 93       	push	r19
    2084:	4f 93       	push	r20
    2086:	5f 93       	push	r21
    2088:	6f 93       	push	r22
    208a:	7f 93       	push	r23
    208c:	8f 93       	push	r24
    208e:	9f 93       	push	r25
    2090:	af 93       	push	r26
    2092:	bf 93       	push	r27
    2094:	ef 93       	push	r30
    2096:	ff 93       	push	r31
    2098:	86 b5       	in	r24, 0x26	; 38
    209a:	83 5d       	subi	r24, 0xD3	; 211
    209c:	87 bd       	out	0x27, r24	; 39
    209e:	85 b3       	in	r24, 0x15	; 21
    20a0:	82 60       	ori	r24, 0x02	; 2
    20a2:	85 bb       	out	0x15, r24	; 21
    20a4:	ee e6       	ldi	r30, 0x6E	; 110
    20a6:	f0 e0       	ldi	r31, 0x00	; 0
    20a8:	80 81       	ld	r24, Z
    20aa:	82 60       	ori	r24, 0x02	; 2
    20ac:	80 83       	st	Z, r24
    20ae:	80 91 70 07 	lds	r24, 0x0770	; 0x800770 <sg_bMCTxNextBit>
    20b2:	88 23       	and	r24, r24
    20b4:	21 f0       	breq	.+8      	; 0x20be <__vector_15+0x48>
    20b6:	85 b1       	in	r24, 0x05	; 5
    20b8:	88 60       	ori	r24, 0x08	; 8
    20ba:	85 b9       	out	0x05, r24	; 5
    20bc:	03 c0       	rjmp	.+6      	; 0x20c4 <__vector_15+0x4e>
    20be:	85 b1       	in	r24, 0x05	; 5
    20c0:	87 7f       	andi	r24, 0xF7	; 247
    20c2:	85 b9       	out	0x05, r24	; 5
    20c4:	80 91 75 07 	lds	r24, 0x0775	; 0x800775 <sg_u8txBitCount>
    20c8:	8f 5f       	subi	r24, 0xFF	; 255
    20ca:	80 93 75 07 	sts	0x0775, r24	; 0x800775 <sg_u8txBitCount>
    20ce:	80 91 75 07 	lds	r24, 0x0775	; 0x800775 <sg_u8txBitCount>
    20d2:	83 30       	cpi	r24, 0x03	; 3
    20d4:	61 f4       	brne	.+24     	; 0x20ee <__vector_15+0x78>
    20d6:	80 91 71 07 	lds	r24, 0x0771	; 0x800771 <sg_bCellReportsReuested>
    20da:	88 23       	and	r24, r24
    20dc:	41 f0       	breq	.+16     	; 0x20ee <__vector_15+0x78>
    20de:	8b e0       	ldi	r24, 0x0B	; 11
    20e0:	80 93 75 07 	sts	0x0775, r24	; 0x800775 <sg_u8txBitCount>
    20e4:	10 92 70 07 	sts	0x0770, r1	; 0x800770 <sg_bMCTxNextBit>
    20e8:	10 92 73 07 	sts	0x0773, r1	; 0x800773 <sg_btxMoreAvailable>
    20ec:	4d c0       	rjmp	.+154    	; 0x2188 <__vector_15+0x112>
    20ee:	80 91 75 07 	lds	r24, 0x0775	; 0x800775 <sg_u8txBitCount>
    20f2:	8a 30       	cpi	r24, 0x0A	; 10
    20f4:	80 f4       	brcc	.+32     	; 0x2116 <__vector_15+0xa0>
    20f6:	80 91 74 07 	lds	r24, 0x0774	; 0x800774 <sg_u8txDataByte>
    20fa:	88 23       	and	r24, r24
    20fc:	24 f4       	brge	.+8      	; 0x2106 <__vector_15+0x90>
    20fe:	81 e0       	ldi	r24, 0x01	; 1
    2100:	80 93 70 07 	sts	0x0770, r24	; 0x800770 <sg_bMCTxNextBit>
    2104:	02 c0       	rjmp	.+4      	; 0x210a <__vector_15+0x94>
    2106:	10 92 70 07 	sts	0x0770, r1	; 0x800770 <sg_bMCTxNextBit>
    210a:	80 91 74 07 	lds	r24, 0x0774	; 0x800774 <sg_u8txDataByte>
    210e:	88 0f       	add	r24, r24
    2110:	80 93 74 07 	sts	0x0774, r24	; 0x800774 <sg_u8txDataByte>
    2114:	39 c0       	rjmp	.+114    	; 0x2188 <__vector_15+0x112>
    2116:	80 91 75 07 	lds	r24, 0x0775	; 0x800775 <sg_u8txBitCount>
    211a:	8a 30       	cpi	r24, 0x0A	; 10
    211c:	29 f4       	brne	.+10     	; 0x2128 <__vector_15+0xb2>
    211e:	80 91 73 07 	lds	r24, 0x0773	; 0x800773 <sg_btxMoreAvailable>
    2122:	80 93 70 07 	sts	0x0770, r24	; 0x800770 <sg_bMCTxNextBit>
    2126:	30 c0       	rjmp	.+96     	; 0x2188 <__vector_15+0x112>
    2128:	80 91 75 07 	lds	r24, 0x0775	; 0x800775 <sg_u8txBitCount>
    212c:	8b 30       	cpi	r24, 0x0B	; 11
    212e:	19 f4       	brne	.+6      	; 0x2136 <__vector_15+0xc0>
    2130:	10 92 70 07 	sts	0x0770, r1	; 0x800770 <sg_bMCTxNextBit>
    2134:	29 c0       	rjmp	.+82     	; 0x2188 <__vector_15+0x112>
    2136:	80 91 75 07 	lds	r24, 0x0775	; 0x800775 <sg_u8txBitCount>
    213a:	8c 30       	cpi	r24, 0x0C	; 12
    213c:	29 f5       	brne	.+74     	; 0x2188 <__vector_15+0x112>
    213e:	80 91 73 07 	lds	r24, 0x0773	; 0x800773 <sg_btxMoreAvailable>
    2142:	80 93 70 07 	sts	0x0770, r24	; 0x800770 <sg_bMCTxNextBit>
    2146:	10 92 75 07 	sts	0x0775, r1	; 0x800775 <sg_u8txBitCount>
    214a:	80 91 73 07 	lds	r24, 0x0773	; 0x800773 <sg_btxMoreAvailable>
    214e:	81 11       	cpse	r24, r1
    2150:	08 c0       	rjmp	.+16     	; 0x2162 <__vector_15+0xec>
    2152:	10 92 72 07 	sts	0x0772, r1	; 0x800772 <sg_etxState>
    2156:	ee e6       	ldi	r30, 0x6E	; 110
    2158:	f0 e0       	ldi	r31, 0x00	; 0
    215a:	80 81       	ld	r24, Z
    215c:	8d 7f       	andi	r24, 0xFD	; 253
    215e:	80 83       	st	Z, r24
    2160:	13 c0       	rjmp	.+38     	; 0x2188 <__vector_15+0x112>
    2162:	0e 94 b8 23 	call	0x4770	; 0x4770 <vUARTtxDataAvailable>
    2166:	80 93 73 07 	sts	0x0773, r24	; 0x800773 <sg_btxMoreAvailable>
    216a:	0e 94 58 1f 	call	0x3eb0	; 0x3eb0 <vUARTtxDataGet>
    216e:	80 93 74 07 	sts	0x0774, r24	; 0x800774 <sg_u8txDataByte>
    2172:	86 b5       	in	r24, 0x26	; 38
    2174:	88 53       	subi	r24, 0x38	; 56
    2176:	87 bd       	out	0x27, r24	; 39
    2178:	85 b3       	in	r24, 0x15	; 21
    217a:	82 60       	ori	r24, 0x02	; 2
    217c:	85 bb       	out	0x15, r24	; 21
    217e:	ee e6       	ldi	r30, 0x6E	; 110
    2180:	f0 e0       	ldi	r31, 0x00	; 0
    2182:	80 81       	ld	r24, Z
    2184:	82 60       	ori	r24, 0x02	; 2
    2186:	80 83       	st	Z, r24
    2188:	ff 91       	pop	r31
    218a:	ef 91       	pop	r30
    218c:	bf 91       	pop	r27
    218e:	af 91       	pop	r26
    2190:	9f 91       	pop	r25
    2192:	8f 91       	pop	r24
    2194:	7f 91       	pop	r23
    2196:	6f 91       	pop	r22
    2198:	5f 91       	pop	r21
    219a:	4f 91       	pop	r20
    219c:	3f 91       	pop	r19
    219e:	2f 91       	pop	r18
    21a0:	0f 90       	pop	r0
    21a2:	0f be       	out	0x3f, r0	; 63
    21a4:	0f 90       	pop	r0
    21a6:	1f 90       	pop	r1
    21a8:	18 95       	reti

Disassembly of section .text.vUARTInit:

0000424c <vUARTInit>:
    424c:	85 b7       	in	r24, 0x35	; 53
    424e:	8f 7e       	andi	r24, 0xEF	; 239
    4250:	85 bf       	out	0x35, r24	; 53
    4252:	84 b1       	in	r24, 0x04	; 4
    4254:	88 60       	ori	r24, 0x08	; 8
    4256:	84 b9       	out	0x04, r24	; 4
    4258:	84 b1       	in	r24, 0x04	; 4
    425a:	8b 7f       	andi	r24, 0xFB	; 251
    425c:	84 b9       	out	0x04, r24	; 4
    425e:	85 b1       	in	r24, 0x05	; 5
    4260:	8b 7f       	andi	r24, 0xFB	; 251
    4262:	85 b9       	out	0x05, r24	; 5
    4264:	87 b1       	in	r24, 0x07	; 7
    4266:	80 68       	ori	r24, 0x80	; 128
    4268:	87 b9       	out	0x07, r24	; 7
    426a:	8d b3       	in	r24, 0x1d	; 29
    426c:	8d 7f       	andi	r24, 0xFD	; 253
    426e:	8d bb       	out	0x1d, r24	; 29
    4270:	10 92 72 07 	sts	0x0772, r1	; 0x800772 <sg_etxState>
    4274:	85 b1       	in	r24, 0x05	; 5
    4276:	87 7f       	andi	r24, 0xF7	; 247
    4278:	85 b9       	out	0x05, r24	; 5
    427a:	08 95       	ret

Disassembly of section .text.vUARTInitReceive:

00004912 <vUARTInitReceive>:
    4912:	8c e0       	ldi	r24, 0x0C	; 12
    4914:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f0069>
    4918:	8c b3       	in	r24, 0x1c	; 28
    491a:	82 60       	ori	r24, 0x02	; 2
    491c:	8c bb       	out	0x1c, r24	; 28
    491e:	8d b3       	in	r24, 0x1d	; 29
    4920:	82 60       	ori	r24, 0x02	; 2
    4922:	8d bb       	out	0x1d, r24	; 29
    4924:	08 95       	ret

Disassembly of section .text.libgcc.div:

00004428 <__udivmodhi4>:
    4428:	aa 1b       	sub	r26, r26
    442a:	bb 1b       	sub	r27, r27
    442c:	51 e1       	ldi	r21, 0x11	; 17
    442e:	07 c0       	rjmp	.+14     	; 0x443e <__udivmodhi4_ep>

00004430 <__udivmodhi4_loop>:
    4430:	aa 1f       	adc	r26, r26
    4432:	bb 1f       	adc	r27, r27
    4434:	a6 17       	cp	r26, r22
    4436:	b7 07       	cpc	r27, r23
    4438:	10 f0       	brcs	.+4      	; 0x443e <__udivmodhi4_ep>
    443a:	a6 1b       	sub	r26, r22
    443c:	b7 0b       	sbc	r27, r23

0000443e <__udivmodhi4_ep>:
    443e:	88 1f       	adc	r24, r24
    4440:	99 1f       	adc	r25, r25
    4442:	5a 95       	dec	r21
    4444:	a9 f7       	brne	.-22     	; 0x4430 <__udivmodhi4_loop>
    4446:	80 95       	com	r24
    4448:	90 95       	com	r25
    444a:	bc 01       	movw	r22, r24
    444c:	cd 01       	movw	r24, r26
    444e:	08 95       	ret

Disassembly of section .text.libgcc.div:

00003f40 <__udivmodsi4>:
    3f40:	a1 e2       	ldi	r26, 0x21	; 33
    3f42:	1a 2e       	mov	r1, r26
    3f44:	aa 1b       	sub	r26, r26
    3f46:	bb 1b       	sub	r27, r27
    3f48:	fd 01       	movw	r30, r26
    3f4a:	0d c0       	rjmp	.+26     	; 0x3f66 <__udivmodsi4_ep>

00003f4c <__udivmodsi4_loop>:
    3f4c:	aa 1f       	adc	r26, r26
    3f4e:	bb 1f       	adc	r27, r27
    3f50:	ee 1f       	adc	r30, r30
    3f52:	ff 1f       	adc	r31, r31
    3f54:	a2 17       	cp	r26, r18
    3f56:	b3 07       	cpc	r27, r19
    3f58:	e4 07       	cpc	r30, r20
    3f5a:	f5 07       	cpc	r31, r21
    3f5c:	20 f0       	brcs	.+8      	; 0x3f66 <__udivmodsi4_ep>
    3f5e:	a2 1b       	sub	r26, r18
    3f60:	b3 0b       	sbc	r27, r19
    3f62:	e4 0b       	sbc	r30, r20
    3f64:	f5 0b       	sbc	r31, r21

00003f66 <__udivmodsi4_ep>:
    3f66:	66 1f       	adc	r22, r22
    3f68:	77 1f       	adc	r23, r23
    3f6a:	88 1f       	adc	r24, r24
    3f6c:	99 1f       	adc	r25, r25
    3f6e:	1a 94       	dec	r1
    3f70:	69 f7       	brne	.-38     	; 0x3f4c <__udivmodsi4_loop>
    3f72:	60 95       	com	r22
    3f74:	70 95       	com	r23
    3f76:	80 95       	com	r24
    3f78:	90 95       	com	r25
    3f7a:	9b 01       	movw	r18, r22
    3f7c:	ac 01       	movw	r20, r24
    3f7e:	bd 01       	movw	r22, r26
    3f80:	cf 01       	movw	r24, r30
    3f82:	08 95       	ret

Disassembly of section .text.libgcc.div:

0000427c <__divmodsi4>:
    427c:	05 2e       	mov	r0, r21
    427e:	97 fb       	bst	r25, 7
    4280:	1e f4       	brtc	.+6      	; 0x4288 <__divmodsi4+0xc>
    4282:	00 94       	com	r0
    4284:	0e 94 c0 24 	call	0x4980	; 0x4980 <__negsi2>
    4288:	57 fd       	sbrc	r21, 7
    428a:	07 d0       	rcall	.+14     	; 0x429a <__divmodsi4_neg2>
    428c:	0e 94 a0 1f 	call	0x3f40	; 0x3f40 <__udivmodsi4>
    4290:	07 fc       	sbrc	r0, 7
    4292:	03 d0       	rcall	.+6      	; 0x429a <__divmodsi4_neg2>
    4294:	4e f4       	brtc	.+18     	; 0x42a8 <__divmodsi4_exit>
    4296:	0c 94 c0 24 	jmp	0x4980	; 0x4980 <__negsi2>

0000429a <__divmodsi4_neg2>:
    429a:	50 95       	com	r21
    429c:	40 95       	com	r20
    429e:	30 95       	com	r19
    42a0:	21 95       	neg	r18
    42a2:	3f 4f       	sbci	r19, 0xFF	; 255
    42a4:	4f 4f       	sbci	r20, 0xFF	; 255
    42a6:	5f 4f       	sbci	r21, 0xFF	; 255

000042a8 <__divmodsi4_exit>:
    42a8:	08 95       	ret

Disassembly of section .text.libgcc.div:

00004980 <__negsi2>:
    4980:	90 95       	com	r25
    4982:	80 95       	com	r24
    4984:	70 95       	com	r23
    4986:	61 95       	neg	r22
    4988:	7f 4f       	sbci	r23, 0xFF	; 255
    498a:	8f 4f       	sbci	r24, 0xFF	; 255
    498c:	9f 4f       	sbci	r25, 0xFF	; 255
    498e:	08 95       	ret

Disassembly of section .text.libgcc.mul:

000047d6 <__umulhisi3>:
    47d6:	a2 9f       	mul	r26, r18
    47d8:	b0 01       	movw	r22, r0
    47da:	b3 9f       	mul	r27, r19
    47dc:	c0 01       	movw	r24, r0
    47de:	a3 9f       	mul	r26, r19
    47e0:	70 0d       	add	r23, r0
    47e2:	81 1d       	adc	r24, r1
    47e4:	11 24       	eor	r1, r1
    47e6:	91 1d       	adc	r25, r1
    47e8:	b2 9f       	mul	r27, r18
    47ea:	70 0d       	add	r23, r0
    47ec:	81 1d       	adc	r24, r1
    47ee:	11 24       	eor	r1, r1
    47f0:	91 1d       	adc	r25, r1
    47f2:	08 95       	ret

Disassembly of section .text.libgcc.mul:

000049da <__usmulhisi3>:
    49da:	0e 94 eb 23 	call	0x47d6	; 0x47d6 <__umulhisi3>

000049de <__usmulhisi3_tail>:
    49de:	b7 ff       	sbrs	r27, 7
    49e0:	08 95       	ret
    49e2:	82 1b       	sub	r24, r18
    49e4:	93 0b       	sbc	r25, r19
    49e6:	08 95       	ret

Disassembly of section .text.libgcc.mul:

000048d2 <__muluhisi3>:
    48d2:	0e 94 eb 23 	call	0x47d6	; 0x47d6 <__umulhisi3>
    48d6:	a5 9f       	mul	r26, r21
    48d8:	90 0d       	add	r25, r0
    48da:	b4 9f       	mul	r27, r20
    48dc:	90 0d       	add	r25, r0
    48de:	a4 9f       	mul	r26, r20
    48e0:	80 0d       	add	r24, r0
    48e2:	91 1d       	adc	r25, r1
    48e4:	11 24       	eor	r1, r1
    48e6:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00004990 <__mulshisi3>:
    4990:	b7 ff       	sbrs	r27, 7
    4992:	0c 94 69 24 	jmp	0x48d2	; 0x48d2 <__muluhisi3>

00004996 <__mulohisi3>:
    4996:	0e 94 69 24 	call	0x48d2	; 0x48d2 <__muluhisi3>
    499a:	82 1b       	sub	r24, r18
    499c:	93 0b       	sbc	r25, r19
    499e:	08 95       	ret

Disassembly of section .text.libgcc:

000049a0 <__xload_2>:
    49a0:	57 fd       	sbrc	r21, 7
    49a2:	03 c0       	rjmp	.+6      	; 0x49aa <__xload_2+0xa>
    49a4:	65 91       	lpm	r22, Z+
    49a6:	75 91       	lpm	r23, Z+
    49a8:	08 95       	ret
    49aa:	61 91       	ld	r22, Z+
    49ac:	71 91       	ld	r23, Z+
    49ae:	08 95       	ret

Disassembly of section .text.libgcc:

00004860 <__xload_4>:
    4860:	57 fd       	sbrc	r21, 7
    4862:	05 c0       	rjmp	.+10     	; 0x486e <__xload_4+0xe>
    4864:	65 91       	lpm	r22, Z+
    4866:	75 91       	lpm	r23, Z+
    4868:	85 91       	lpm	r24, Z+
    486a:	95 91       	lpm	r25, Z+
    486c:	08 95       	ret
    486e:	61 91       	ld	r22, Z+
    4870:	71 91       	ld	r23, Z+
    4872:	81 91       	ld	r24, Z+
    4874:	91 91       	ld	r25, Z+
    4876:	08 95       	ret

Disassembly of section .text.libgcc:

00004878 <__adddi3_s8>:
    4878:	00 24       	eor	r0, r0
    487a:	a7 fd       	sbrc	r26, 7
    487c:	00 94       	com	r0
    487e:	2a 0f       	add	r18, r26
    4880:	30 1d       	adc	r19, r0
    4882:	40 1d       	adc	r20, r0
    4884:	50 1d       	adc	r21, r0
    4886:	60 1d       	adc	r22, r0
    4888:	70 1d       	adc	r23, r0
    488a:	80 1d       	adc	r24, r0
    488c:	90 1d       	adc	r25, r0
    488e:	08 95       	ret

Disassembly of section .text.__dummy_fini:

00004a44 <_fini>:
    4a44:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00004a46 <__funcs_on_exit>:
    4a46:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00004a48 <__simulator_exit>:
    4a48:	08 95       	ret

Disassembly of section .text.exit:

000048e8 <exit>:
    48e8:	ec 01       	movw	r28, r24
    48ea:	0e 94 23 25 	call	0x4a46	; 0x4a46 <__funcs_on_exit>
    48ee:	0e 94 22 25 	call	0x4a44	; 0x4a44 <_fini>
    48f2:	ce 01       	movw	r24, r28
    48f4:	0e 94 24 25 	call	0x4a48	; 0x4a48 <__simulator_exit>
    48f8:	ce 01       	movw	r24, r28
    48fa:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <_Exit>

Disassembly of section .text.memcpy:

0000421a <memcpy>:
    421a:	cf 92       	push	r12
    421c:	df 92       	push	r13
    421e:	ef 92       	push	r14
    4220:	6a 01       	movw	r12, r20
    4222:	e6 2e       	mov	r14, r22
    4224:	dc 01       	movw	r26, r24
    4226:	28 0f       	add	r18, r24
    4228:	39 1f       	adc	r19, r25
    422a:	a2 17       	cp	r26, r18
    422c:	b3 07       	cpc	r27, r19
    422e:	51 f0       	breq	.+20     	; 0x4244 <memcpy+0x2a>
    4230:	f6 01       	movw	r30, r12
    4232:	44 91       	lpm	r20, Z
    4234:	e7 fc       	sbrc	r14, 7
    4236:	40 81       	ld	r20, Z
    4238:	4d 93       	st	X+, r20
    423a:	4f ef       	ldi	r20, 0xFF	; 255
    423c:	c4 1a       	sub	r12, r20
    423e:	d4 0a       	sbc	r13, r20
    4240:	e4 0a       	sbc	r14, r20
    4242:	f3 cf       	rjmp	.-26     	; 0x422a <memcpy+0x10>
    4244:	ef 90       	pop	r14
    4246:	df 90       	pop	r13
    4248:	cf 90       	pop	r12
    424a:	08 95       	ret

Disassembly of section .text.memset:

00004938 <memset>:
    4938:	fc 01       	movw	r30, r24
    493a:	48 0f       	add	r20, r24
    493c:	59 1f       	adc	r21, r25
    493e:	e4 17       	cp	r30, r20
    4940:	f5 07       	cpc	r31, r21
    4942:	11 f0       	breq	.+4      	; 0x4948 <memset+0x10>
    4944:	61 93       	st	Z+, r22
    4946:	fb cf       	rjmp	.-10     	; 0x493e <memset+0x6>
    4948:	08 95       	ret

Disassembly of section .text.gmtime:

00004a2a <gmtime>:
    4a2a:	4c ef       	ldi	r20, 0xFC	; 252
    4a2c:	56 e0       	ldi	r21, 0x06	; 6
    4a2e:	0e 94 7a 1c 	call	0x38f4	; 0x38f4 <__gmtime_r>
    4a32:	08 95       	ret

Disassembly of section .text.__gmtime_r:

000038f4 <__gmtime_r>:
    38f4:	a0 e0       	ldi	r26, 0x00	; 0
    38f6:	b0 e0       	ldi	r27, 0x00	; 0
    38f8:	e0 e8       	ldi	r30, 0x80	; 128
    38fa:	fc e1       	ldi	r31, 0x1C	; 28
    38fc:	0c 94 5c 20 	jmp	0x40b8	; 0x40b8 <__prologue_saves__+0xc>
    3900:	ea 01       	movw	r28, r20
    3902:	fb 01       	movw	r30, r22
    3904:	58 2f       	mov	r21, r24
    3906:	0e 94 30 24 	call	0x4860	; 0x4860 <__xload_4>
    390a:	4b 01       	movw	r8, r22
    390c:	5c 01       	movw	r10, r24
    390e:	c1 2c       	mov	r12, r1
    3910:	d1 2c       	mov	r13, r1
    3912:	76 01       	movw	r14, r12
    3914:	8e 01       	movw	r16, r28
    3916:	9b 01       	movw	r18, r22
    3918:	a5 01       	movw	r20, r10
    391a:	60 e0       	ldi	r22, 0x00	; 0
    391c:	70 e0       	ldi	r23, 0x00	; 0
    391e:	80 e0       	ldi	r24, 0x00	; 0
    3920:	90 e0       	ldi	r25, 0x00	; 0
    3922:	0e 94 16 01 	call	0x22c	; 0x22c <__secs_to_tm>
    3926:	97 ff       	sbrs	r25, 7
    3928:	09 c0       	rjmp	.+18     	; 0x393c <__gmtime_r+0x48>
    392a:	8f e4       	ldi	r24, 0x4F	; 79
    392c:	90 e0       	ldi	r25, 0x00	; 0
    392e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    3932:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    3936:	80 e0       	ldi	r24, 0x00	; 0
    3938:	90 e0       	ldi	r25, 0x00	; 0
    393a:	0d c0       	rjmp	.+26     	; 0x3956 <__gmtime_r+0x62>
    393c:	19 8a       	std	Y+17, r1	; 0x11
    393e:	18 8a       	std	Y+16, r1	; 0x10
    3940:	1a 8a       	std	Y+18, r1	; 0x12
    3942:	1b 8a       	std	Y+19, r1	; 0x13
    3944:	1c 8a       	std	Y+20, r1	; 0x14
    3946:	1d 8a       	std	Y+21, r1	; 0x15
    3948:	83 e2       	ldi	r24, 0x23	; 35
    394a:	92 e0       	ldi	r25, 0x02	; 2
    394c:	a0 e0       	ldi	r26, 0x00	; 0
    394e:	8e 8b       	std	Y+22, r24	; 0x16
    3950:	9f 8b       	std	Y+23, r25	; 0x17
    3952:	a8 8f       	std	Y+24, r26	; 0x18
    3954:	ce 01       	movw	r24, r28
    3956:	cd b7       	in	r28, 0x3d	; 61
    3958:	de b7       	in	r29, 0x3e	; 62
    395a:	ec e0       	ldi	r30, 0x0C	; 12
    395c:	0c 94 78 20 	jmp	0x40f0	; 0x40f0 <__epilogue_restores__+0xc>

Disassembly of section .text.mktime:

0000348a <mktime>:
    348a:	a9 e1       	ldi	r26, 0x19	; 25
    348c:	b0 e0       	ldi	r27, 0x00	; 0
    348e:	eb e4       	ldi	r30, 0x4B	; 75
    3490:	fa e1       	ldi	r31, 0x1A	; 26
    3492:	0c 94 58 20 	jmp	0x40b0	; 0x40b0 <__prologue_saves__+0x4>
    3496:	2c 01       	movw	r4, r24
    3498:	bc 01       	movw	r22, r24
    349a:	80 e8       	ldi	r24, 0x80	; 128
    349c:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <__tm_to_secs>
    34a0:	39 01       	movw	r6, r18
    34a2:	4a 01       	movw	r8, r20
    34a4:	59 01       	movw	r10, r18
    34a6:	6a 01       	movw	r12, r20
    34a8:	e1 2c       	mov	r14, r1
    34aa:	f1 2c       	mov	r15, r1
    34ac:	00 e0       	ldi	r16, 0x00	; 0
    34ae:	10 e0       	ldi	r17, 0x00	; 0
    34b0:	0e 94 b7 24 	call	0x496e	; 0x496e <__cmpdi2>
    34b4:	f9 f4       	brne	.+62     	; 0x34f4 <mktime+0x6a>
    34b6:	1a 8a       	std	Y+18, r1	; 0x12
    34b8:	19 8a       	std	Y+17, r1	; 0x11
    34ba:	1b 8a       	std	Y+19, r1	; 0x13
    34bc:	1c 8a       	std	Y+20, r1	; 0x14
    34be:	1d 8a       	std	Y+21, r1	; 0x15
    34c0:	1e 8a       	std	Y+22, r1	; 0x16
    34c2:	27 e2       	ldi	r18, 0x27	; 39
    34c4:	32 e0       	ldi	r19, 0x02	; 2
    34c6:	40 e0       	ldi	r20, 0x00	; 0
    34c8:	2f 8b       	std	Y+23, r18	; 0x17
    34ca:	38 8f       	std	Y+24, r19	; 0x18
    34cc:	49 8f       	std	Y+25, r20	; 0x19
    34ce:	8e 01       	movw	r16, r28
    34d0:	0f 5f       	subi	r16, 0xFF	; 255
    34d2:	1f 4f       	sbci	r17, 0xFF	; 255
    34d4:	93 01       	movw	r18, r6
    34d6:	48 2d       	mov	r20, r8
    34d8:	0e 94 16 01 	call	0x22c	; 0x22c <__secs_to_tm>
    34dc:	97 fd       	sbrc	r25, 7
    34de:	0a c0       	rjmp	.+20     	; 0x34f4 <mktime+0x6a>
    34e0:	89 e1       	ldi	r24, 0x19	; 25
    34e2:	f8 01       	movw	r30, r16
    34e4:	d2 01       	movw	r26, r4
    34e6:	01 90       	ld	r0, Z+
    34e8:	0d 92       	st	X+, r0
    34ea:	8a 95       	dec	r24
    34ec:	e1 f7       	brne	.-8      	; 0x34e6 <mktime+0x5c>
    34ee:	b3 01       	movw	r22, r6
    34f0:	c4 01       	movw	r24, r8
    34f2:	0a c0       	rjmp	.+20     	; 0x3508 <mktime+0x7e>
    34f4:	8f e4       	ldi	r24, 0x4F	; 79
    34f6:	90 e0       	ldi	r25, 0x00	; 0
    34f8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    34fc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    3500:	6f ef       	ldi	r22, 0xFF	; 255
    3502:	7f ef       	ldi	r23, 0xFF	; 255
    3504:	8f ef       	ldi	r24, 0xFF	; 255
    3506:	9f ef       	ldi	r25, 0xFF	; 255
    3508:	69 96       	adiw	r28, 0x19	; 25
    350a:	e0 e1       	ldi	r30, 0x10	; 16
    350c:	0c 94 74 20 	jmp	0x40e8	; 0x40e8 <__epilogue_restores__+0x4>

Disassembly of section .text._Exit:

00004a3e <_Exit>:
    4a3e:	0e 94 6b 00 	call	0xd6	; 0xd6 <_exit>

Disassembly of section .text.__tm_to_secs:

000017c4 <__tm_to_secs>:
    17c4:	a5 e0       	ldi	r26, 0x05	; 5
    17c6:	b0 e0       	ldi	r27, 0x00	; 0
    17c8:	e8 ee       	ldi	r30, 0xE8	; 232
    17ca:	fb e0       	ldi	r31, 0x0B	; 11
    17cc:	0c 94 56 20 	jmp	0x40ac	; 0x40ac <__prologue_saves__>
    17d0:	3b 01       	movw	r6, r22
    17d2:	88 2e       	mov	r8, r24
    17d4:	a8 2f       	mov	r26, r24
    17d6:	cb 01       	movw	r24, r22
    17d8:	0a 96       	adiw	r24, 0x0a	; 10
    17da:	a1 1d       	adc	r26, r1
    17dc:	fc 01       	movw	r30, r24
    17de:	5a 2f       	mov	r21, r26
    17e0:	0e 94 d0 24 	call	0x49a0	; 0x49a0 <__xload_2>
    17e4:	5b 01       	movw	r10, r22
    17e6:	9b 01       	movw	r18, r22
    17e8:	9b 2c       	mov	r9, r11
    17ea:	99 0c       	add	r9, r9
    17ec:	99 08       	sbc	r9, r9
    17ee:	f9 2c       	mov	r15, r9
    17f0:	b9 2d       	mov	r27, r9
    17f2:	a9 2d       	mov	r26, r9
    17f4:	89 2d       	mov	r24, r9
    17f6:	99 2d       	mov	r25, r9
    17f8:	e8 2c       	mov	r14, r8
    17fa:	63 01       	movw	r12, r6
    17fc:	48 e0       	ldi	r20, 0x08	; 8
    17fe:	c4 0e       	add	r12, r20
    1800:	d1 1c       	adc	r13, r1
    1802:	e1 1c       	adc	r14, r1
    1804:	f6 01       	movw	r30, r12
    1806:	5e 2d       	mov	r21, r14
    1808:	0e 94 d0 24 	call	0x49a0	; 0x49a0 <__xload_2>
    180c:	2b 01       	movw	r4, r22
    180e:	6c 30       	cpi	r22, 0x0C	; 12
    1810:	71 05       	cpc	r23, r1
    1812:	10 f1       	brcs	.+68     	; 0x1858 <__tm_to_secs+0x94>
    1814:	cb 01       	movw	r24, r22
    1816:	6c e0       	ldi	r22, 0x0C	; 12
    1818:	70 e0       	ldi	r23, 0x00	; 0
    181a:	0e 94 28 22 	call	0x4450	; 0x4450 <__divmodhi4>
    181e:	2c 01       	movw	r4, r24
    1820:	97 ff       	sbrs	r25, 7
    1822:	05 c0       	rjmp	.+10     	; 0x182e <__tm_to_secs+0x6a>
    1824:	61 50       	subi	r22, 0x01	; 1
    1826:	71 09       	sbc	r23, r1
    1828:	8c e0       	ldi	r24, 0x0C	; 12
    182a:	48 0e       	add	r4, r24
    182c:	51 1c       	adc	r5, r1
    182e:	97 2f       	mov	r25, r23
    1830:	99 0f       	add	r25, r25
    1832:	99 0b       	sbc	r25, r25
    1834:	9b 01       	movw	r18, r22
    1836:	49 2f       	mov	r20, r25
    1838:	59 2f       	mov	r21, r25
    183a:	69 2f       	mov	r22, r25
    183c:	79 2f       	mov	r23, r25
    183e:	89 2f       	mov	r24, r25
    1840:	c9 2c       	mov	r12, r9
    1842:	d9 2c       	mov	r13, r9
    1844:	e9 2c       	mov	r14, r9
    1846:	f9 2c       	mov	r15, r9
    1848:	09 2d       	mov	r16, r9
    184a:	19 2d       	mov	r17, r9
    184c:	0e 94 ae 24 	call	0x495c	; 0x495c <__adddi3>
    1850:	94 2e       	mov	r9, r20
    1852:	f5 2e       	mov	r15, r21
    1854:	b6 2f       	mov	r27, r22
    1856:	a7 2f       	mov	r26, r23
    1858:	8e 01       	movw	r16, r28
    185a:	0f 5f       	subi	r16, 0xFF	; 255
    185c:	1f 4f       	sbci	r17, 0xFF	; 255
    185e:	49 2d       	mov	r20, r9
    1860:	5f 2d       	mov	r21, r15
    1862:	6b 2f       	mov	r22, r27
    1864:	7a 2f       	mov	r23, r26
    1866:	0e 94 83 06 	call	0xd06	; 0xd06 <__year_to_secs>
    186a:	59 01       	movw	r10, r18
    186c:	6a 01       	movw	r12, r20
    186e:	7b 01       	movw	r14, r22
    1870:	8c 01       	movw	r16, r24
    1872:	69 81       	ldd	r22, Y+1	; 0x01
    1874:	7a 81       	ldd	r23, Y+2	; 0x02
    1876:	c2 01       	movw	r24, r4
    1878:	0e 94 ff 1f 	call	0x3ffe	; 0x3ffe <__month_to_secs>
    187c:	1b 01       	movw	r2, r22
    187e:	2c 01       	movw	r4, r24
    1880:	55 0c       	add	r5, r5
    1882:	22 08       	sbc	r2, r2
    1884:	32 2c       	mov	r3, r2
    1886:	21 01       	movw	r4, r2
    1888:	9b 01       	movw	r18, r22
    188a:	ac 01       	movw	r20, r24
    188c:	62 2d       	mov	r22, r2
    188e:	72 2d       	mov	r23, r2
    1890:	82 2d       	mov	r24, r2
    1892:	92 2d       	mov	r25, r2
    1894:	0e 94 ae 24 	call	0x495c	; 0x495c <__adddi3>
    1898:	19 01       	movw	r2, r18
    189a:	2a 01       	movw	r4, r20
    189c:	96 2e       	mov	r9, r22
    189e:	7b 83       	std	Y+3, r23	; 0x03
    18a0:	8c 83       	std	Y+4, r24	; 0x04
    18a2:	9d 83       	std	Y+5, r25	; 0x05
    18a4:	a8 2d       	mov	r26, r8
    18a6:	c3 01       	movw	r24, r6
    18a8:	06 96       	adiw	r24, 0x06	; 6
    18aa:	a1 1d       	adc	r26, r1
    18ac:	fc 01       	movw	r30, r24
    18ae:	5a 2f       	mov	r21, r26
    18b0:	0e 94 d0 24 	call	0x49a0	; 0x49a0 <__xload_2>
    18b4:	61 50       	subi	r22, 0x01	; 1
    18b6:	71 09       	sbc	r23, r1
    18b8:	97 2f       	mov	r25, r23
    18ba:	99 0f       	add	r25, r25
    18bc:	99 0b       	sbc	r25, r25
    18be:	30 e8       	ldi	r19, 0x80	; 128
    18c0:	a3 2e       	mov	r10, r19
    18c2:	41 e5       	ldi	r20, 0x51	; 81
    18c4:	b4 2e       	mov	r11, r20
    18c6:	cc 24       	eor	r12, r12
    18c8:	c3 94       	inc	r12
    18ca:	d1 2c       	mov	r13, r1
    18cc:	e1 2c       	mov	r14, r1
    18ce:	f1 2c       	mov	r15, r1
    18d0:	00 e0       	ldi	r16, 0x00	; 0
    18d2:	10 e0       	ldi	r17, 0x00	; 0
    18d4:	9b 01       	movw	r18, r22
    18d6:	49 2f       	mov	r20, r25
    18d8:	59 2f       	mov	r21, r25
    18da:	69 2f       	mov	r22, r25
    18dc:	79 2f       	mov	r23, r25
    18de:	89 2f       	mov	r24, r25
    18e0:	0e 94 4c 18 	call	0x3098	; 0x3098 <__muldi3>
    18e4:	51 01       	movw	r10, r2
    18e6:	62 01       	movw	r12, r4
    18e8:	e9 2c       	mov	r14, r9
    18ea:	fb 80       	ldd	r15, Y+3	; 0x03
    18ec:	0c 81       	ldd	r16, Y+4	; 0x04
    18ee:	1d 81       	ldd	r17, Y+5	; 0x05
    18f0:	0e 94 ae 24 	call	0x495c	; 0x495c <__adddi3>
    18f4:	59 01       	movw	r10, r18
    18f6:	6a 01       	movw	r12, r20
    18f8:	7b 01       	movw	r14, r22
    18fa:	8c 01       	movw	r16, r24
    18fc:	a8 2d       	mov	r26, r8
    18fe:	c3 01       	movw	r24, r6
    1900:	04 96       	adiw	r24, 0x04	; 4
    1902:	a1 1d       	adc	r26, r1
    1904:	fc 01       	movw	r30, r24
    1906:	5a 2f       	mov	r21, r26
    1908:	0e 94 d0 24 	call	0x49a0	; 0x49a0 <__xload_2>
    190c:	07 2e       	mov	r0, r23
    190e:	00 0c       	add	r0, r0
    1910:	88 0b       	sbc	r24, r24
    1912:	99 0b       	sbc	r25, r25
    1914:	20 e1       	ldi	r18, 0x10	; 16
    1916:	3e e0       	ldi	r19, 0x0E	; 14
    1918:	40 e0       	ldi	r20, 0x00	; 0
    191a:	50 e0       	ldi	r21, 0x00	; 0
    191c:	0e 94 fa 23 	call	0x47f4	; 0x47f4 <__mulsidi3>
    1920:	0e 94 ae 24 	call	0x495c	; 0x495c <__adddi3>
    1924:	59 01       	movw	r10, r18
    1926:	6a 01       	movw	r12, r20
    1928:	7b 01       	movw	r14, r22
    192a:	8c 01       	movw	r16, r24
    192c:	a8 2d       	mov	r26, r8
    192e:	c3 01       	movw	r24, r6
    1930:	02 96       	adiw	r24, 0x02	; 2
    1932:	a1 1d       	adc	r26, r1
    1934:	fc 01       	movw	r30, r24
    1936:	5a 2f       	mov	r21, r26
    1938:	0e 94 d0 24 	call	0x49a0	; 0x49a0 <__xload_2>
    193c:	07 2e       	mov	r0, r23
    193e:	00 0c       	add	r0, r0
    1940:	88 0b       	sbc	r24, r24
    1942:	99 0b       	sbc	r25, r25
    1944:	2c e3       	ldi	r18, 0x3C	; 60
    1946:	30 e0       	ldi	r19, 0x00	; 0
    1948:	40 e0       	ldi	r20, 0x00	; 0
    194a:	50 e0       	ldi	r21, 0x00	; 0
    194c:	0e 94 fa 23 	call	0x47f4	; 0x47f4 <__mulsidi3>
    1950:	0e 94 ae 24 	call	0x495c	; 0x495c <__adddi3>
    1954:	59 01       	movw	r10, r18
    1956:	6a 01       	movw	r12, r20
    1958:	7b 01       	movw	r14, r22
    195a:	8c 01       	movw	r16, r24
    195c:	f3 01       	movw	r30, r6
    195e:	58 2d       	mov	r21, r8
    1960:	0e 94 d0 24 	call	0x49a0	; 0x49a0 <__xload_2>
    1964:	9b 01       	movw	r18, r22
    1966:	93 2f       	mov	r25, r19
    1968:	99 0f       	add	r25, r25
    196a:	99 0b       	sbc	r25, r25
    196c:	49 2f       	mov	r20, r25
    196e:	59 2f       	mov	r21, r25
    1970:	69 2f       	mov	r22, r25
    1972:	79 2f       	mov	r23, r25
    1974:	89 2f       	mov	r24, r25
    1976:	0e 94 ae 24 	call	0x495c	; 0x495c <__adddi3>
    197a:	25 96       	adiw	r28, 0x05	; 5
    197c:	e2 e1       	ldi	r30, 0x12	; 18
    197e:	0c 94 72 20 	jmp	0x40e4	; 0x40e4 <__epilogue_restores__>

Disassembly of section .text.__year_to_secs:

00000d06 <__year_to_secs>:
 d06:	ac e0       	ldi	r26, 0x0C	; 12
 d08:	b0 e0       	ldi	r27, 0x00	; 0
 d0a:	e9 e8       	ldi	r30, 0x89	; 137
 d0c:	f6 e0       	ldi	r31, 0x06	; 6
 d0e:	0c 94 56 20 	jmp	0x40ac	; 0x40ac <__prologue_saves__>
 d12:	49 01       	movw	r8, r18
 d14:	5a 01       	movw	r10, r20
 d16:	6b 01       	movw	r12, r22
 d18:	7c 01       	movw	r14, r24
 d1a:	1c 83       	std	Y+4, r17	; 0x04
 d1c:	0b 83       	std	Y+3, r16	; 0x03
 d1e:	2a 38       	cpi	r18, 0x8A	; 138
 d20:	31 05       	cpc	r19, r1
 d22:	41 05       	cpc	r20, r1
 d24:	51 05       	cpc	r21, r1
 d26:	61 05       	cpc	r22, r1
 d28:	71 05       	cpc	r23, r1
 d2a:	81 05       	cpc	r24, r1
 d2c:	91 05       	cpc	r25, r1
 d2e:	11 f0       	breq	.+4      	; 0xd34 <__year_to_secs+0x2e>
 d30:	0c f0       	brlt	.+2      	; 0xd34 <__year_to_secs+0x2e>
 d32:	42 c0       	rjmp	.+132    	; 0xdb8 <__year_to_secs+0xb2>
 d34:	f9 01       	movw	r30, r18
 d36:	e4 54       	subi	r30, 0x44	; 68
 d38:	f1 09       	sbc	r31, r1
 d3a:	f5 95       	asr	r31
 d3c:	e7 95       	ror	r30
 d3e:	f5 95       	asr	r31
 d40:	e7 95       	ror	r30
 d42:	c9 01       	movw	r24, r18
 d44:	83 70       	andi	r24, 0x03	; 3
 d46:	99 27       	eor	r25, r25
 d48:	89 2b       	or	r24, r25
 d4a:	51 f4       	brne	.+20     	; 0xd60 <__year_to_secs+0x5a>
 d4c:	31 97       	sbiw	r30, 0x01	; 1
 d4e:	01 15       	cp	r16, r1
 d50:	11 05       	cpc	r17, r1
 d52:	69 f0       	breq	.+26     	; 0xd6e <__year_to_secs+0x68>
 d54:	81 e0       	ldi	r24, 0x01	; 1
 d56:	90 e0       	ldi	r25, 0x00	; 0
 d58:	d8 01       	movw	r26, r16
 d5a:	8d 93       	st	X+, r24
 d5c:	9c 93       	st	X, r25
 d5e:	07 c0       	rjmp	.+14     	; 0xd6e <__year_to_secs+0x68>
 d60:	8b 81       	ldd	r24, Y+3	; 0x03
 d62:	9c 81       	ldd	r25, Y+4	; 0x04
 d64:	00 97       	sbiw	r24, 0x00	; 0
 d66:	19 f0       	breq	.+6      	; 0xd6e <__year_to_secs+0x68>
 d68:	dc 01       	movw	r26, r24
 d6a:	1d 92       	st	X+, r1
 d6c:	1c 92       	st	X, r1
 d6e:	d9 01       	movw	r26, r18
 d70:	a6 54       	subi	r26, 0x46	; 70
 d72:	b1 09       	sbc	r27, r1
 d74:	20 e8       	ldi	r18, 0x80	; 128
 d76:	33 e3       	ldi	r19, 0x33	; 51
 d78:	41 ee       	ldi	r20, 0xE1	; 225
 d7a:	51 e0       	ldi	r21, 0x01	; 1
 d7c:	0e 94 c8 24 	call	0x4990	; 0x4990 <__mulshisi3>
 d80:	6b 01       	movw	r12, r22
 d82:	7c 01       	movw	r14, r24
 d84:	df 01       	movw	r26, r30
 d86:	20 e8       	ldi	r18, 0x80	; 128
 d88:	31 e5       	ldi	r19, 0x51	; 81
 d8a:	41 e0       	ldi	r20, 0x01	; 1
 d8c:	50 e0       	ldi	r21, 0x00	; 0
 d8e:	0e 94 c8 24 	call	0x4990	; 0x4990 <__mulshisi3>
 d92:	dc 01       	movw	r26, r24
 d94:	cb 01       	movw	r24, r22
 d96:	8c 0d       	add	r24, r12
 d98:	9d 1d       	adc	r25, r13
 d9a:	ae 1d       	adc	r26, r14
 d9c:	bf 1d       	adc	r27, r15
 d9e:	9c 01       	movw	r18, r24
 da0:	ad 01       	movw	r20, r26
 da2:	6c 01       	movw	r12, r24
 da4:	7d 01       	movw	r14, r26
 da6:	ff 0c       	add	r15, r15
 da8:	cc 08       	sbc	r12, r12
 daa:	dc 2c       	mov	r13, r12
 dac:	76 01       	movw	r14, r12
 dae:	ac 2d       	mov	r26, r12
 db0:	fc 2d       	mov	r31, r12
 db2:	ec 2d       	mov	r30, r12
 db4:	9c 2d       	mov	r25, r12
 db6:	cb c0       	rjmp	.+406    	; 0xf4e <__year_to_secs+0x248>
 db8:	eb 81       	ldd	r30, Y+3	; 0x03
 dba:	fc 81       	ldd	r31, Y+4	; 0x04
 dbc:	ef 2b       	or	r30, r31
 dbe:	31 f4       	brne	.+12     	; 0xdcc <__year_to_secs+0xc6>
 dc0:	1a 82       	std	Y+2, r1	; 0x02
 dc2:	19 82       	std	Y+1, r1	; 0x01
 dc4:	ce 01       	movw	r24, r28
 dc6:	01 96       	adiw	r24, 0x01	; 1
 dc8:	9c 83       	std	Y+4, r25	; 0x04
 dca:	8b 83       	std	Y+3, r24	; 0x03
 dcc:	c4 01       	movw	r24, r8
 dce:	84 56       	subi	r24, 0x64	; 100
 dd0:	91 09       	sbc	r25, r1
 dd2:	60 e9       	ldi	r22, 0x90	; 144
 dd4:	71 e0       	ldi	r23, 0x01	; 1
 dd6:	0e 94 28 22 	call	0x4450	; 0x4450 <__divmodhi4>
 dda:	7e 83       	std	Y+6, r23	; 0x06
 ddc:	6d 83       	std	Y+5, r22	; 0x05
 dde:	94 01       	movw	r18, r8
 de0:	a5 01       	movw	r20, r10
 de2:	b6 01       	movw	r22, r12
 de4:	c7 01       	movw	r24, r14
 de6:	ac e9       	ldi	r26, 0x9C	; 156
 de8:	0e 94 3c 24 	call	0x4878	; 0x4878 <__adddi3_s8>
 dec:	19 01       	movw	r2, r18
 dee:	2a 01       	movw	r4, r20
 df0:	3b 01       	movw	r6, r22
 df2:	8f 83       	std	Y+7, r24	; 0x07
 df4:	98 87       	std	Y+8, r25	; 0x08
 df6:	70 e9       	ldi	r23, 0x90	; 144
 df8:	a7 2e       	mov	r10, r23
 dfa:	bb 24       	eor	r11, r11
 dfc:	b3 94       	inc	r11
 dfe:	c1 2c       	mov	r12, r1
 e00:	d1 2c       	mov	r13, r1
 e02:	e1 2c       	mov	r14, r1
 e04:	f1 2c       	mov	r15, r1
 e06:	00 e0       	ldi	r16, 0x00	; 0
 e08:	10 e0       	ldi	r17, 0x00	; 0
 e0a:	91 01       	movw	r18, r2
 e0c:	a2 01       	movw	r20, r4
 e0e:	b3 01       	movw	r22, r6
 e10:	0e 94 af 1d 	call	0x3b5e	; 0x3b5e <__moddi3>
 e14:	c9 01       	movw	r24, r18
 e16:	00 97       	sbiw	r24, 0x00	; 0
 e18:	59 f4       	brne	.+22     	; 0xe30 <__year_to_secs+0x12a>
 e1a:	81 e0       	ldi	r24, 0x01	; 1
 e1c:	90 e0       	ldi	r25, 0x00	; 0
 e1e:	ab 81       	ldd	r26, Y+3	; 0x03
 e20:	bc 81       	ldd	r27, Y+4	; 0x04
 e22:	8d 93       	st	X+, r24
 e24:	9c 93       	st	X, r25
 e26:	20 e0       	ldi	r18, 0x00	; 0
 e28:	30 e0       	ldi	r19, 0x00	; 0
 e2a:	40 e0       	ldi	r20, 0x00	; 0
 e2c:	50 e0       	ldi	r21, 0x00	; 0
 e2e:	33 c0       	rjmp	.+102    	; 0xe96 <__year_to_secs+0x190>
 e30:	28 3c       	cpi	r18, 0xC8	; 200
 e32:	31 05       	cpc	r19, r1
 e34:	6c f0       	brlt	.+26     	; 0xe50 <__year_to_secs+0x14a>
 e36:	2c 32       	cpi	r18, 0x2C	; 44
 e38:	31 40       	sbci	r19, 0x01	; 1
 e3a:	2c f0       	brlt	.+10     	; 0xe46 <__year_to_secs+0x140>
 e3c:	8c 52       	subi	r24, 0x2C	; 44
 e3e:	91 40       	sbci	r25, 0x01	; 1
 e40:	43 e0       	ldi	r20, 0x03	; 3
 e42:	50 e0       	ldi	r21, 0x00	; 0
 e44:	0c c0       	rjmp	.+24     	; 0xe5e <__year_to_secs+0x158>
 e46:	88 5c       	subi	r24, 0xC8	; 200
 e48:	91 09       	sbc	r25, r1
 e4a:	42 e0       	ldi	r20, 0x02	; 2
 e4c:	50 e0       	ldi	r21, 0x00	; 0
 e4e:	07 c0       	rjmp	.+14     	; 0xe5e <__year_to_secs+0x158>
 e50:	24 36       	cpi	r18, 0x64	; 100
 e52:	31 05       	cpc	r19, r1
 e54:	6c f0       	brlt	.+26     	; 0xe70 <__year_to_secs+0x16a>
 e56:	84 56       	subi	r24, 0x64	; 100
 e58:	91 09       	sbc	r25, r1
 e5a:	41 e0       	ldi	r20, 0x01	; 1
 e5c:	50 e0       	ldi	r21, 0x00	; 0
 e5e:	00 97       	sbiw	r24, 0x00	; 0
 e60:	49 f4       	brne	.+18     	; 0xe74 <__year_to_secs+0x16e>
 e62:	eb 81       	ldd	r30, Y+3	; 0x03
 e64:	fc 81       	ldd	r31, Y+4	; 0x04
 e66:	11 82       	std	Z+1, r1	; 0x01
 e68:	10 82       	st	Z, r1
 e6a:	20 e0       	ldi	r18, 0x00	; 0
 e6c:	30 e0       	ldi	r19, 0x00	; 0
 e6e:	13 c0       	rjmp	.+38     	; 0xe96 <__year_to_secs+0x190>
 e70:	40 e0       	ldi	r20, 0x00	; 0
 e72:	50 e0       	ldi	r21, 0x00	; 0
 e74:	9c 01       	movw	r18, r24
 e76:	36 95       	lsr	r19
 e78:	27 95       	ror	r18
 e7a:	36 95       	lsr	r19
 e7c:	27 95       	ror	r18
 e7e:	83 70       	andi	r24, 0x03	; 3
 e80:	99 27       	eor	r25, r25
 e82:	61 e0       	ldi	r22, 0x01	; 1
 e84:	70 e0       	ldi	r23, 0x00	; 0
 e86:	89 2b       	or	r24, r25
 e88:	11 f0       	breq	.+4      	; 0xe8e <__year_to_secs+0x188>
 e8a:	60 e0       	ldi	r22, 0x00	; 0
 e8c:	70 e0       	ldi	r23, 0x00	; 0
 e8e:	ab 81       	ldd	r26, Y+3	; 0x03
 e90:	bc 81       	ldd	r27, Y+4	; 0x04
 e92:	6d 93       	st	X+, r22
 e94:	7c 93       	st	X, r23
 e96:	81 e6       	ldi	r24, 0x61	; 97
 e98:	ed 81       	ldd	r30, Y+5	; 0x05
 e9a:	fe 81       	ldd	r31, Y+6	; 0x06
 e9c:	8e 9f       	mul	r24, r30
 e9e:	b0 01       	movw	r22, r0
 ea0:	8f 9f       	mul	r24, r31
 ea2:	70 0d       	add	r23, r0
 ea4:	11 24       	eor	r1, r1
 ea6:	e8 e1       	ldi	r30, 0x18	; 24
 ea8:	e4 9f       	mul	r30, r20
 eaa:	c0 01       	movw	r24, r0
 eac:	e5 9f       	mul	r30, r21
 eae:	90 0d       	add	r25, r0
 eb0:	11 24       	eor	r1, r1
 eb2:	86 0f       	add	r24, r22
 eb4:	97 1f       	adc	r25, r23
 eb6:	ab 81       	ldd	r26, Y+3	; 0x03
 eb8:	bc 81       	ldd	r27, Y+4	; 0x04
 eba:	4d 91       	ld	r20, X+
 ebc:	5c 91       	ld	r21, X
 ebe:	84 1b       	sub	r24, r20
 ec0:	95 0b       	sbc	r25, r21
 ec2:	82 0f       	add	r24, r18
 ec4:	93 1f       	adc	r25, r19
 ec6:	e9 2f       	mov	r30, r25
 ec8:	ee 0f       	add	r30, r30
 eca:	ee 0b       	sbc	r30, r30
 ecc:	20 e8       	ldi	r18, 0x80	; 128
 ece:	a2 2e       	mov	r10, r18
 ed0:	31 e5       	ldi	r19, 0x51	; 81
 ed2:	b3 2e       	mov	r11, r19
 ed4:	cc 24       	eor	r12, r12
 ed6:	c3 94       	inc	r12
 ed8:	d1 2c       	mov	r13, r1
 eda:	e1 2c       	mov	r14, r1
 edc:	f1 2c       	mov	r15, r1
 ede:	00 e0       	ldi	r16, 0x00	; 0
 ee0:	10 e0       	ldi	r17, 0x00	; 0
 ee2:	9c 01       	movw	r18, r24
 ee4:	4e 2f       	mov	r20, r30
 ee6:	5e 2f       	mov	r21, r30
 ee8:	6e 2f       	mov	r22, r30
 eea:	7e 2f       	mov	r23, r30
 eec:	8e 2f       	mov	r24, r30
 eee:	9e 2f       	mov	r25, r30
 ef0:	0e 94 4c 18 	call	0x3098	; 0x3098 <__muldi3>
 ef4:	92 2e       	mov	r9, r18
 ef6:	83 2e       	mov	r8, r19
 ef8:	4b 83       	std	Y+3, r20	; 0x03
 efa:	5d 83       	std	Y+5, r21	; 0x05
 efc:	69 87       	std	Y+9, r22	; 0x09
 efe:	7a 87       	std	Y+10, r23	; 0x0a
 f00:	8b 87       	std	Y+11, r24	; 0x0b
 f02:	9c 87       	std	Y+12, r25	; 0x0c
 f04:	43 e3       	ldi	r20, 0x33	; 51
 f06:	b4 2e       	mov	r11, r20
 f08:	51 ee       	ldi	r21, 0xE1	; 225
 f0a:	c5 2e       	mov	r12, r21
 f0c:	dd 24       	eor	r13, r13
 f0e:	d3 94       	inc	r13
 f10:	91 01       	movw	r18, r2
 f12:	a2 01       	movw	r20, r4
 f14:	b3 01       	movw	r22, r6
 f16:	8f 81       	ldd	r24, Y+7	; 0x07
 f18:	98 85       	ldd	r25, Y+8	; 0x08
 f1a:	0e 94 4c 18 	call	0x3098	; 0x3098 <__muldi3>
 f1e:	59 01       	movw	r10, r18
 f20:	6a 01       	movw	r12, r20
 f22:	7b 01       	movw	r14, r22
 f24:	8c 01       	movw	r16, r24
 f26:	29 2d       	mov	r18, r9
 f28:	38 2d       	mov	r19, r8
 f2a:	4b 81       	ldd	r20, Y+3	; 0x03
 f2c:	5d 81       	ldd	r21, Y+5	; 0x05
 f2e:	69 85       	ldd	r22, Y+9	; 0x09
 f30:	7a 85       	ldd	r23, Y+10	; 0x0a
 f32:	8b 85       	ldd	r24, Y+11	; 0x0b
 f34:	9c 85       	ldd	r25, Y+12	; 0x0c
 f36:	0e 94 ae 24 	call	0x495c	; 0x495c <__adddi3>
 f3a:	3b 56       	subi	r19, 0x6B	; 107
 f3c:	41 49       	sbci	r20, 0x91	; 145
 f3e:	57 4c       	sbci	r21, 0xC7	; 199
 f40:	6f 4f       	sbci	r22, 0xFF	; 255
 f42:	7f 4f       	sbci	r23, 0xFF	; 255
 f44:	8f 4f       	sbci	r24, 0xFF	; 255
 f46:	9f 4f       	sbci	r25, 0xFF	; 255
 f48:	a6 2f       	mov	r26, r22
 f4a:	f7 2f       	mov	r31, r23
 f4c:	e8 2f       	mov	r30, r24
 f4e:	6a 2f       	mov	r22, r26
 f50:	7f 2f       	mov	r23, r31
 f52:	8e 2f       	mov	r24, r30
 f54:	2c 96       	adiw	r28, 0x0c	; 12
 f56:	e2 e1       	ldi	r30, 0x12	; 18
 f58:	0c 94 72 20 	jmp	0x40e4	; 0x40e4 <__epilogue_restores__>

Disassembly of section .text.__month_to_secs:

00003ffe <__month_to_secs>:
    3ffe:	cf 93       	push	r28
    4000:	df 93       	push	r29
    4002:	9c 01       	movw	r18, r24
    4004:	eb 01       	movw	r28, r22
    4006:	88 0f       	add	r24, r24
    4008:	99 1f       	adc	r25, r25
    400a:	88 0f       	add	r24, r24
    400c:	99 1f       	adc	r25, r25
    400e:	09 2e       	mov	r0, r25
    4010:	00 0c       	add	r0, r0
    4012:	aa 0b       	sbc	r26, r26
    4014:	86 52       	subi	r24, 0x26	; 38
    4016:	9f 4f       	sbci	r25, 0xFF	; 255
    4018:	af 4f       	sbci	r26, 0xFF	; 255
    401a:	fc 01       	movw	r30, r24
    401c:	5a 2f       	mov	r21, r26
    401e:	0e 94 30 24 	call	0x4860	; 0x4860 <__xload_4>
    4022:	cd 2b       	or	r28, r29
    4024:	39 f0       	breq	.+14     	; 0x4034 <__month_to_secs+0x36>
    4026:	22 30       	cpi	r18, 0x02	; 2
    4028:	31 05       	cpc	r19, r1
    402a:	24 f0       	brlt	.+8      	; 0x4034 <__month_to_secs+0x36>
    402c:	60 58       	subi	r22, 0x80	; 128
    402e:	7e 4a       	sbci	r23, 0xAE	; 174
    4030:	8e 4f       	sbci	r24, 0xFE	; 254
    4032:	9f 4f       	sbci	r25, 0xFF	; 255
    4034:	df 91       	pop	r29
    4036:	cf 91       	pop	r28
    4038:	08 95       	ret

Disassembly of section .text.__secs_to_tm:

0000022c <__secs_to_tm>:
 22c:	a6 e1       	ldi	r26, 0x16	; 22
 22e:	b0 e0       	ldi	r27, 0x00	; 0
 230:	ec e1       	ldi	r30, 0x1C	; 28
 232:	f1 e0       	ldi	r31, 0x01	; 1
 234:	0c 94 56 20 	jmp	0x40ac	; 0x40ac <__prologue_saves__>
 238:	79 01       	movw	r14, r18
 23a:	d4 2e       	mov	r13, r20
 23c:	c5 2e       	mov	r12, r21
 23e:	b6 2f       	mov	r27, r22
 240:	a7 2f       	mov	r26, r23
 242:	f8 2f       	mov	r31, r24
 244:	b9 2e       	mov	r11, r25
 246:	40 58       	subi	r20, 0x80	; 128
 248:	5d 4b       	sbci	r21, 0xBD	; 189
 24a:	6e 40       	sbci	r22, 0x0E	; 14
 24c:	7f 4f       	sbci	r23, 0xFF	; 255
 24e:	8f 4f       	sbci	r24, 0xFF	; 255
 250:	9f 4f       	sbci	r25, 0xFF	; 255
 252:	21 15       	cp	r18, r1
 254:	3b 47       	sbci	r19, 0x7B	; 123
 256:	4d 41       	sbci	r20, 0x1D	; 29
 258:	53 48       	sbci	r21, 0x83	; 131
 25a:	62 4e       	sbci	r22, 0xE2	; 226
 25c:	71 40       	sbci	r23, 0x01	; 1
 25e:	81 05       	cpc	r24, r1
 260:	91 05       	cpc	r25, r1
 262:	11 f0       	breq	.+4      	; 0x268 <__secs_to_tm+0x3c>
 264:	08 f0       	brcs	.+2      	; 0x268 <__secs_to_tm+0x3c>
 266:	08 c2       	rjmp	.+1040   	; 0x678 <__LOCK_REGION_LENGTH__+0x278>
 268:	18 8b       	std	Y+16, r17	; 0x10
 26a:	0f 87       	std	Y+15, r16	; 0x0f
 26c:	9b 2d       	mov	r25, r11
 26e:	8f 2f       	mov	r24, r31
 270:	7a 2f       	mov	r23, r26
 272:	6b 2f       	mov	r22, r27
 274:	5c 2d       	mov	r21, r12
 276:	4d 2d       	mov	r20, r13
 278:	97 01       	movw	r18, r14
 27a:	20 58       	subi	r18, 0x80	; 128
 27c:	3d 45       	sbci	r19, 0x5D	; 93
 27e:	4c 4b       	sbci	r20, 0xBC	; 188
 280:	58 43       	sbci	r21, 0x38	; 56
 282:	61 09       	sbc	r22, r1
 284:	71 09       	sbc	r23, r1
 286:	81 09       	sbc	r24, r1
 288:	91 09       	sbc	r25, r1
 28a:	19 01       	movw	r2, r18
 28c:	4d 83       	std	Y+5, r20	; 0x05
 28e:	59 87       	std	Y+9, r21	; 0x09
 290:	6d 87       	std	Y+13, r22	; 0x0d
 292:	79 83       	std	Y+1, r23	; 0x01
 294:	89 8b       	std	Y+17, r24	; 0x11
 296:	9a 8b       	std	Y+18, r25	; 0x12
 298:	f0 e8       	ldi	r31, 0x80	; 128
 29a:	af 2e       	mov	r10, r31
 29c:	a1 e5       	ldi	r26, 0x51	; 81
 29e:	ba 2e       	mov	r11, r26
 2a0:	cc 24       	eor	r12, r12
 2a2:	c3 94       	inc	r12
 2a4:	d1 2c       	mov	r13, r1
 2a6:	e1 2c       	mov	r14, r1
 2a8:	f1 2c       	mov	r15, r1
 2aa:	00 e0       	ldi	r16, 0x00	; 0
 2ac:	10 e0       	ldi	r17, 0x00	; 0
 2ae:	0e 94 b1 1d 	call	0x3b62	; 0x3b62 <__divdi3>
 2b2:	29 01       	movw	r4, r18
 2b4:	3a 01       	movw	r6, r20
 2b6:	4b 01       	movw	r8, r22
 2b8:	8e 8b       	std	Y+22, r24	; 0x16
 2ba:	9b 8b       	std	Y+19, r25	; 0x13
 2bc:	91 01       	movw	r18, r2
 2be:	4d 81       	ldd	r20, Y+5	; 0x05
 2c0:	59 85       	ldd	r21, Y+9	; 0x09
 2c2:	6d 85       	ldd	r22, Y+13	; 0x0d
 2c4:	79 81       	ldd	r23, Y+1	; 0x01
 2c6:	89 89       	ldd	r24, Y+17	; 0x11
 2c8:	9a 89       	ldd	r25, Y+18	; 0x12
 2ca:	0e 94 af 1d 	call	0x3b5e	; 0x3b5e <__moddi3>
 2ce:	2d 83       	std	Y+5, r18	; 0x05
 2d0:	3e 83       	std	Y+6, r19	; 0x06
 2d2:	4f 83       	std	Y+7, r20	; 0x07
 2d4:	58 87       	std	Y+8, r21	; 0x08
 2d6:	8d 81       	ldd	r24, Y+5	; 0x05
 2d8:	9e 81       	ldd	r25, Y+6	; 0x06
 2da:	af 81       	ldd	r26, Y+7	; 0x07
 2dc:	b8 85       	ldd	r27, Y+8	; 0x08
 2de:	b7 ff       	sbrs	r27, 7
 2e0:	15 c0       	rjmp	.+42     	; 0x30c <__secs_to_tm+0xe0>
 2e2:	80 58       	subi	r24, 0x80	; 128
 2e4:	9e 4a       	sbci	r25, 0xAE	; 174
 2e6:	ae 4f       	sbci	r26, 0xFE	; 254
 2e8:	bf 4f       	sbci	r27, 0xFF	; 255
 2ea:	8d 83       	std	Y+5, r24	; 0x05
 2ec:	9e 83       	std	Y+6, r25	; 0x06
 2ee:	af 83       	std	Y+7, r26	; 0x07
 2f0:	b8 87       	std	Y+8, r27	; 0x08
 2f2:	92 01       	movw	r18, r4
 2f4:	a3 01       	movw	r20, r6
 2f6:	b4 01       	movw	r22, r8
 2f8:	8e 89       	ldd	r24, Y+22	; 0x16
 2fa:	9b 89       	ldd	r25, Y+19	; 0x13
 2fc:	af ef       	ldi	r26, 0xFF	; 255
 2fe:	0e 94 3c 24 	call	0x4878	; 0x4878 <__adddi3_s8>
 302:	29 01       	movw	r4, r18
 304:	3a 01       	movw	r6, r20
 306:	4b 01       	movw	r8, r22
 308:	8e 8b       	std	Y+22, r24	; 0x16
 30a:	9b 8b       	std	Y+19, r25	; 0x13
 30c:	92 01       	movw	r18, r4
 30e:	a3 01       	movw	r20, r6
 310:	b4 01       	movw	r22, r8
 312:	8e 89       	ldd	r24, Y+22	; 0x16
 314:	9b 89       	ldd	r25, Y+19	; 0x13
 316:	a3 e0       	ldi	r26, 0x03	; 3
 318:	0e 94 3c 24 	call	0x4878	; 0x4878 <__adddi3_s8>
 31c:	e7 e0       	ldi	r30, 0x07	; 7
 31e:	ae 2e       	mov	r10, r30
 320:	b1 2c       	mov	r11, r1
 322:	c1 2c       	mov	r12, r1
 324:	d1 2c       	mov	r13, r1
 326:	e1 2c       	mov	r14, r1
 328:	f1 2c       	mov	r15, r1
 32a:	00 e0       	ldi	r16, 0x00	; 0
 32c:	10 e0       	ldi	r17, 0x00	; 0
 32e:	0e 94 af 1d 	call	0x3b5e	; 0x3b5e <__moddi3>
 332:	2d 87       	std	Y+13, r18	; 0x0d
 334:	3e 87       	std	Y+14, r19	; 0x0e
 336:	ad 85       	ldd	r26, Y+13	; 0x0d
 338:	be 85       	ldd	r27, Y+14	; 0x0e
 33a:	b7 ff       	sbrs	r27, 7
 33c:	03 c0       	rjmp	.+6      	; 0x344 <__secs_to_tm+0x118>
 33e:	17 96       	adiw	r26, 0x07	; 7
 340:	be 87       	std	Y+14, r27	; 0x0e
 342:	ad 87       	std	Y+13, r26	; 0x0d
 344:	51 eb       	ldi	r21, 0xB1	; 177
 346:	a5 2e       	mov	r10, r21
 348:	6a e3       	ldi	r22, 0x3A	; 58
 34a:	b6 2e       	mov	r11, r22
 34c:	72 e0       	ldi	r23, 0x02	; 2
 34e:	c7 2e       	mov	r12, r23
 350:	d1 2c       	mov	r13, r1
 352:	e1 2c       	mov	r14, r1
 354:	f1 2c       	mov	r15, r1
 356:	00 e0       	ldi	r16, 0x00	; 0
 358:	10 e0       	ldi	r17, 0x00	; 0
 35a:	92 01       	movw	r18, r4
 35c:	a3 01       	movw	r20, r6
 35e:	b4 01       	movw	r22, r8
 360:	8e 89       	ldd	r24, Y+22	; 0x16
 362:	9b 89       	ldd	r25, Y+19	; 0x13
 364:	0e 94 b1 1d 	call	0x3b62	; 0x3b62 <__divdi3>
 368:	29 87       	std	Y+9, r18	; 0x09
 36a:	3a 87       	std	Y+10, r19	; 0x0a
 36c:	4b 87       	std	Y+11, r20	; 0x0b
 36e:	5c 87       	std	Y+12, r21	; 0x0c
 370:	92 01       	movw	r18, r4
 372:	a3 01       	movw	r20, r6
 374:	b4 01       	movw	r22, r8
 376:	8e 89       	ldd	r24, Y+22	; 0x16
 378:	9b 89       	ldd	r25, Y+19	; 0x13
 37a:	0e 94 af 1d 	call	0x3b5e	; 0x3b5e <__moddi3>
 37e:	82 2e       	mov	r8, r18
 380:	93 2e       	mov	r9, r19
 382:	a4 2e       	mov	r10, r20
 384:	b5 2e       	mov	r11, r21
 386:	b7 fe       	sbrs	r11, 7
 388:	12 c0       	rjmp	.+36     	; 0x3ae <__secs_to_tm+0x182>
 38a:	b1 eb       	ldi	r27, 0xB1	; 177
 38c:	8b 0e       	add	r8, r27
 38e:	ba e3       	ldi	r27, 0x3A	; 58
 390:	9b 1e       	adc	r9, r27
 392:	b2 e0       	ldi	r27, 0x02	; 2
 394:	ab 1e       	adc	r10, r27
 396:	b1 1c       	adc	r11, r1
 398:	89 85       	ldd	r24, Y+9	; 0x09
 39a:	9a 85       	ldd	r25, Y+10	; 0x0a
 39c:	ab 85       	ldd	r26, Y+11	; 0x0b
 39e:	bc 85       	ldd	r27, Y+12	; 0x0c
 3a0:	01 97       	sbiw	r24, 0x01	; 1
 3a2:	a1 09       	sbc	r26, r1
 3a4:	b1 09       	sbc	r27, r1
 3a6:	89 87       	std	Y+9, r24	; 0x09
 3a8:	9a 87       	std	Y+10, r25	; 0x0a
 3aa:	ab 87       	std	Y+11, r26	; 0x0b
 3ac:	bc 87       	std	Y+12, r27	; 0x0c
 3ae:	c5 01       	movw	r24, r10
 3b0:	b4 01       	movw	r22, r8
 3b2:	2c ea       	ldi	r18, 0xAC	; 172
 3b4:	3e e8       	ldi	r19, 0x8E	; 142
 3b6:	40 e0       	ldi	r20, 0x00	; 0
 3b8:	50 e0       	ldi	r21, 0x00	; 0
 3ba:	0e 94 3e 21 	call	0x427c	; 0x427c <__divmodsi4>
 3be:	69 01       	movw	r12, r18
 3c0:	7a 01       	movw	r14, r20
 3c2:	24 30       	cpi	r18, 0x04	; 4
 3c4:	31 05       	cpc	r19, r1
 3c6:	41 05       	cpc	r20, r1
 3c8:	51 05       	cpc	r21, r1
 3ca:	29 f4       	brne	.+10     	; 0x3d6 <__secs_to_tm+0x1aa>
 3cc:	43 e0       	ldi	r20, 0x03	; 3
 3ce:	c4 2e       	mov	r12, r20
 3d0:	d1 2c       	mov	r13, r1
 3d2:	e1 2c       	mov	r14, r1
 3d4:	f1 2c       	mov	r15, r1
 3d6:	a4 e5       	ldi	r26, 0x54	; 84
 3d8:	b1 e7       	ldi	r27, 0x71	; 113
 3da:	a7 01       	movw	r20, r14
 3dc:	96 01       	movw	r18, r12
 3de:	0e 94 cb 24 	call	0x4996	; 0x4996 <__mulohisi3>
 3e2:	2b 01       	movw	r4, r22
 3e4:	3c 01       	movw	r6, r24
 3e6:	48 0c       	add	r4, r8
 3e8:	59 1c       	adc	r5, r9
 3ea:	6a 1c       	adc	r6, r10
 3ec:	7b 1c       	adc	r7, r11
 3ee:	c3 01       	movw	r24, r6
 3f0:	b2 01       	movw	r22, r4
 3f2:	25 eb       	ldi	r18, 0xB5	; 181
 3f4:	35 e0       	ldi	r19, 0x05	; 5
 3f6:	40 e0       	ldi	r20, 0x00	; 0
 3f8:	50 e0       	ldi	r21, 0x00	; 0
 3fa:	0e 94 3e 21 	call	0x427c	; 0x427c <__divmodsi4>
 3fe:	49 01       	movw	r8, r18
 400:	5a 01       	movw	r10, r20
 402:	29 31       	cpi	r18, 0x19	; 25
 404:	31 05       	cpc	r19, r1
 406:	41 05       	cpc	r20, r1
 408:	51 05       	cpc	r21, r1
 40a:	29 f4       	brne	.+10     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 40c:	38 e1       	ldi	r19, 0x18	; 24
 40e:	83 2e       	mov	r8, r19
 410:	91 2c       	mov	r9, r1
 412:	a1 2c       	mov	r10, r1
 414:	b1 2c       	mov	r11, r1
 416:	ab e4       	ldi	r26, 0x4B	; 75
 418:	ba ef       	ldi	r27, 0xFA	; 250
 41a:	a5 01       	movw	r20, r10
 41c:	94 01       	movw	r18, r8
 41e:	0e 94 cb 24 	call	0x4996	; 0x4996 <__mulohisi3>
 422:	46 0e       	add	r4, r22
 424:	57 1e       	adc	r5, r23
 426:	68 1e       	adc	r6, r24
 428:	79 1e       	adc	r7, r25
 42a:	c3 01       	movw	r24, r6
 42c:	b2 01       	movw	r22, r4
 42e:	2d e6       	ldi	r18, 0x6D	; 109
 430:	31 e0       	ldi	r19, 0x01	; 1
 432:	40 e0       	ldi	r20, 0x00	; 0
 434:	50 e0       	ldi	r21, 0x00	; 0
 436:	0e 94 3e 21 	call	0x427c	; 0x427c <__divmodsi4>
 43a:	29 83       	std	Y+1, r18	; 0x01
 43c:	3a 83       	std	Y+2, r19	; 0x02
 43e:	4b 83       	std	Y+3, r20	; 0x03
 440:	5c 83       	std	Y+4, r21	; 0x04
 442:	24 30       	cpi	r18, 0x04	; 4
 444:	31 05       	cpc	r19, r1
 446:	41 05       	cpc	r20, r1
 448:	51 05       	cpc	r21, r1
 44a:	41 f4       	brne	.+16     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 44c:	83 e0       	ldi	r24, 0x03	; 3
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	a0 e0       	ldi	r26, 0x00	; 0
 452:	b0 e0       	ldi	r27, 0x00	; 0
 454:	89 83       	std	Y+1, r24	; 0x01
 456:	9a 83       	std	Y+2, r25	; 0x02
 458:	ab 83       	std	Y+3, r26	; 0x03
 45a:	bc 83       	std	Y+4, r27	; 0x04
 45c:	a3 e9       	ldi	r26, 0x93	; 147
 45e:	be ef       	ldi	r27, 0xFE	; 254
 460:	29 81       	ldd	r18, Y+1	; 0x01
 462:	3a 81       	ldd	r19, Y+2	; 0x02
 464:	4b 81       	ldd	r20, Y+3	; 0x03
 466:	5c 81       	ldd	r21, Y+4	; 0x04
 468:	0e 94 cb 24 	call	0x4996	; 0x4996 <__mulohisi3>
 46c:	46 0e       	add	r4, r22
 46e:	57 1e       	adc	r5, r23
 470:	68 1e       	adc	r6, r24
 472:	79 1e       	adc	r7, r25
 474:	23 2b       	or	r18, r19
 476:	24 2b       	or	r18, r20
 478:	25 2b       	or	r18, r21
 47a:	81 f4       	brne	.+32     	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
 47c:	81 14       	cp	r8, r1
 47e:	91 04       	cpc	r9, r1
 480:	a1 04       	cpc	r10, r1
 482:	b1 04       	cpc	r11, r1
 484:	71 f4       	brne	.+28     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 486:	31 e0       	ldi	r19, 0x01	; 1
 488:	20 e0       	ldi	r18, 0x00	; 0
 48a:	c1 14       	cp	r12, r1
 48c:	d1 04       	cpc	r13, r1
 48e:	e1 04       	cpc	r14, r1
 490:	f1 04       	cpc	r15, r1
 492:	09 f0       	breq	.+2      	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
 494:	30 e0       	ldi	r19, 0x00	; 0
 496:	83 2f       	mov	r24, r19
 498:	92 2f       	mov	r25, r18
 49a:	05 c0       	rjmp	.+10     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 49c:	80 e0       	ldi	r24, 0x00	; 0
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	12 01       	movw	r2, r4
 4a8:	ab e3       	ldi	r26, 0x3B	; 59
 4aa:	2a 0e       	add	r2, r26
 4ac:	31 1c       	adc	r3, r1
 4ae:	28 0e       	add	r2, r24
 4b0:	39 1e       	adc	r3, r25
 4b2:	9c 01       	movw	r18, r24
 4b4:	24 59       	subi	r18, 0x94	; 148
 4b6:	3e 4f       	sbci	r19, 0xFE	; 254
 4b8:	22 15       	cp	r18, r2
 4ba:	33 05       	cpc	r19, r3
 4bc:	24 f4       	brge	.+8      	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
 4be:	83 59       	subi	r24, 0x93	; 147
 4c0:	9e 4f       	sbci	r25, 0xFE	; 254
 4c2:	28 1a       	sub	r2, r24
 4c4:	39 0a       	sbc	r3, r25
 4c6:	92 e0       	ldi	r25, 0x02	; 2
 4c8:	88 0c       	add	r8, r8
 4ca:	99 1c       	adc	r9, r9
 4cc:	aa 1c       	adc	r10, r10
 4ce:	bb 1c       	adc	r11, r11
 4d0:	9a 95       	dec	r25
 4d2:	d1 f7       	brne	.-12     	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
 4d4:	89 81       	ldd	r24, Y+1	; 0x01
 4d6:	9a 81       	ldd	r25, Y+2	; 0x02
 4d8:	ab 81       	ldd	r26, Y+3	; 0x03
 4da:	bc 81       	ldd	r27, Y+4	; 0x04
 4dc:	88 0e       	add	r8, r24
 4de:	99 1e       	adc	r9, r25
 4e0:	aa 1e       	adc	r10, r26
 4e2:	bb 1e       	adc	r11, r27
 4e4:	a4 e6       	ldi	r26, 0x64	; 100
 4e6:	b0 e0       	ldi	r27, 0x00	; 0
 4e8:	a7 01       	movw	r20, r14
 4ea:	96 01       	movw	r18, r12
 4ec:	0e 94 69 24 	call	0x48d2	; 0x48d2 <__muluhisi3>
 4f0:	86 0e       	add	r8, r22
 4f2:	97 1e       	adc	r9, r23
 4f4:	a8 1e       	adc	r10, r24
 4f6:	b9 1e       	adc	r11, r25
 4f8:	d5 01       	movw	r26, r10
 4fa:	c4 01       	movw	r24, r8
 4fc:	bb 0f       	add	r27, r27
 4fe:	88 0b       	sbc	r24, r24
 500:	98 2f       	mov	r25, r24
 502:	dc 01       	movw	r26, r24
 504:	89 83       	std	Y+1, r24	; 0x01
 506:	9a 83       	std	Y+2, r25	; 0x02
 508:	ab 83       	std	Y+3, r26	; 0x03
 50a:	bc 83       	std	Y+4, r27	; 0x04
 50c:	69 85       	ldd	r22, Y+9	; 0x09
 50e:	7a 85       	ldd	r23, Y+10	; 0x0a
 510:	8b 85       	ldd	r24, Y+11	; 0x0b
 512:	9c 85       	ldd	r25, Y+12	; 0x0c
 514:	20 e9       	ldi	r18, 0x90	; 144
 516:	31 e0       	ldi	r19, 0x01	; 1
 518:	40 e0       	ldi	r20, 0x00	; 0
 51a:	50 e0       	ldi	r21, 0x00	; 0
 51c:	0e 94 fa 23 	call	0x47f4	; 0x47f4 <__mulsidi3>
 520:	f2 2f       	mov	r31, r18
 522:	e3 2f       	mov	r30, r19
 524:	6a 01       	movw	r12, r20
 526:	7b 01       	movw	r14, r22
 528:	8c 01       	movw	r16, r24
 52a:	94 01       	movw	r18, r8
 52c:	a5 01       	movw	r20, r10
 52e:	69 81       	ldd	r22, Y+1	; 0x01
 530:	76 2f       	mov	r23, r22
 532:	86 2f       	mov	r24, r22
 534:	96 2f       	mov	r25, r22
 536:	af 2e       	mov	r10, r31
 538:	be 2e       	mov	r11, r30
 53a:	0e 94 ae 24 	call	0x495c	; 0x495c <__adddi3>
 53e:	49 01       	movw	r8, r18
 540:	5a 01       	movw	r10, r20
 542:	6b 01       	movw	r12, r22
 544:	7c 01       	movw	r14, r24
 546:	29 ea       	ldi	r18, 0xA9	; 169
 548:	31 e0       	ldi	r19, 0x01	; 1
 54a:	40 e0       	ldi	r20, 0x00	; 0
 54c:	1a 82       	std	Y+2, r1	; 0x02
 54e:	19 82       	std	Y+1, r1	; 0x01
 550:	f9 01       	movw	r30, r18
 552:	84 91       	lpm	r24, Z
 554:	47 fd       	sbrc	r20, 7
 556:	80 81       	ld	r24, Z
 558:	08 2e       	mov	r0, r24
 55a:	00 0c       	add	r0, r0
 55c:	99 0b       	sbc	r25, r25
 55e:	aa 0b       	sbc	r26, r26
 560:	bb 0b       	sbc	r27, r27
 562:	2f 5f       	subi	r18, 0xFF	; 255
 564:	3f 4f       	sbci	r19, 0xFF	; 255
 566:	4f 4f       	sbci	r20, 0xFF	; 255
 568:	48 16       	cp	r4, r24
 56a:	59 06       	cpc	r5, r25
 56c:	6a 06       	cpc	r6, r26
 56e:	7b 06       	cpc	r7, r27
 570:	54 f0       	brlt	.+20     	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
 572:	48 1a       	sub	r4, r24
 574:	59 0a       	sbc	r5, r25
 576:	6a 0a       	sbc	r6, r26
 578:	7b 0a       	sbc	r7, r27
 57a:	a9 81       	ldd	r26, Y+1	; 0x01
 57c:	ba 81       	ldd	r27, Y+2	; 0x02
 57e:	11 96       	adiw	r26, 0x01	; 1
 580:	ba 83       	std	Y+2, r27	; 0x02
 582:	a9 83       	std	Y+1, r26	; 0x01
 584:	e5 cf       	rjmp	.-54     	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
 586:	e9 81       	ldd	r30, Y+1	; 0x01
 588:	fa 81       	ldd	r31, Y+2	; 0x02
 58a:	ea 30       	cpi	r30, 0x0A	; 10
 58c:	f1 05       	cpc	r31, r1
 58e:	74 f0       	brlt	.+28     	; 0x5ac <__LOCK_REGION_LENGTH__+0x1ac>
 590:	3c 97       	sbiw	r30, 0x0c	; 12
 592:	fa 83       	std	Y+2, r31	; 0x02
 594:	e9 83       	std	Y+1, r30	; 0x01
 596:	94 01       	movw	r18, r8
 598:	a5 01       	movw	r20, r10
 59a:	b6 01       	movw	r22, r12
 59c:	c7 01       	movw	r24, r14
 59e:	a1 e0       	ldi	r26, 0x01	; 1
 5a0:	0e 94 3c 24 	call	0x4878	; 0x4878 <__adddi3_s8>
 5a4:	49 01       	movw	r8, r18
 5a6:	5a 01       	movw	r10, r20
 5a8:	6b 01       	movw	r12, r22
 5aa:	7c 01       	movw	r14, r24
 5ac:	94 01       	movw	r18, r8
 5ae:	a5 01       	movw	r20, r10
 5b0:	b6 01       	movw	r22, r12
 5b2:	c7 01       	movw	r24, r14
 5b4:	2c 59       	subi	r18, 0x9C	; 156
 5b6:	3f 47       	sbci	r19, 0x7F	; 127
 5b8:	4f 4f       	sbci	r20, 0xFF	; 255
 5ba:	5f 4f       	sbci	r21, 0xFF	; 255
 5bc:	6f 4f       	sbci	r22, 0xFF	; 255
 5be:	7f 4f       	sbci	r23, 0xFF	; 255
 5c0:	8f 4f       	sbci	r24, 0xFF	; 255
 5c2:	9f 4f       	sbci	r25, 0xFF	; 255
 5c4:	2f 3f       	cpi	r18, 0xFF	; 255
 5c6:	3f 4f       	sbci	r19, 0xFF	; 255
 5c8:	41 05       	cpc	r20, r1
 5ca:	51 05       	cpc	r21, r1
 5cc:	61 05       	cpc	r22, r1
 5ce:	71 05       	cpc	r23, r1
 5d0:	81 05       	cpc	r24, r1
 5d2:	91 05       	cpc	r25, r1
 5d4:	11 f0       	breq	.+4      	; 0x5da <__LOCK_REGION_LENGTH__+0x1da>
 5d6:	08 f0       	brcs	.+2      	; 0x5da <__LOCK_REGION_LENGTH__+0x1da>
 5d8:	4f c0       	rjmp	.+158    	; 0x678 <__LOCK_REGION_LENGTH__+0x278>
 5da:	24 e6       	ldi	r18, 0x64	; 100
 5dc:	82 0e       	add	r8, r18
 5de:	91 1c       	adc	r9, r1
 5e0:	af 85       	ldd	r26, Y+15	; 0x0f
 5e2:	b8 89       	ldd	r27, Y+16	; 0x10
 5e4:	1b 96       	adiw	r26, 0x0b	; 11
 5e6:	9c 92       	st	X, r9
 5e8:	8e 92       	st	-X, r8
 5ea:	1a 97       	sbiw	r26, 0x0a	; 10
 5ec:	e9 81       	ldd	r30, Y+1	; 0x01
 5ee:	fa 81       	ldd	r31, Y+2	; 0x02
 5f0:	32 96       	adiw	r30, 0x02	; 2
 5f2:	19 96       	adiw	r26, 0x09	; 9
 5f4:	fc 93       	st	X, r31
 5f6:	ee 93       	st	-X, r30
 5f8:	18 97       	sbiw	r26, 0x08	; 8
 5fa:	ff ef       	ldi	r31, 0xFF	; 255
 5fc:	4f 1a       	sub	r4, r31
 5fe:	5f 0a       	sbc	r5, r31
 600:	17 96       	adiw	r26, 0x07	; 7
 602:	5c 92       	st	X, r5
 604:	4e 92       	st	-X, r4
 606:	16 97       	sbiw	r26, 0x06	; 6
 608:	8d 85       	ldd	r24, Y+13	; 0x0d
 60a:	9e 85       	ldd	r25, Y+14	; 0x0e
 60c:	1d 96       	adiw	r26, 0x0d	; 13
 60e:	9c 93       	st	X, r25
 610:	8e 93       	st	-X, r24
 612:	1c 97       	sbiw	r26, 0x0c	; 12
 614:	1f 96       	adiw	r26, 0x0f	; 15
 616:	3c 92       	st	X, r3
 618:	2e 92       	st	-X, r2
 61a:	1e 97       	sbiw	r26, 0x0e	; 14
 61c:	6d 81       	ldd	r22, Y+5	; 0x05
 61e:	7e 81       	ldd	r23, Y+6	; 0x06
 620:	8f 81       	ldd	r24, Y+7	; 0x07
 622:	98 85       	ldd	r25, Y+8	; 0x08
 624:	20 e1       	ldi	r18, 0x10	; 16
 626:	3e e0       	ldi	r19, 0x0E	; 14
 628:	40 e0       	ldi	r20, 0x00	; 0
 62a:	50 e0       	ldi	r21, 0x00	; 0
 62c:	0e 94 3e 21 	call	0x427c	; 0x427c <__divmodsi4>
 630:	af 85       	ldd	r26, Y+15	; 0x0f
 632:	b8 89       	ldd	r27, Y+16	; 0x10
 634:	15 96       	adiw	r26, 0x05	; 5
 636:	3c 93       	st	X, r19
 638:	2e 93       	st	-X, r18
 63a:	14 97       	sbiw	r26, 0x04	; 4
 63c:	8c e3       	ldi	r24, 0x3C	; 60
 63e:	c8 2e       	mov	r12, r24
 640:	d1 2c       	mov	r13, r1
 642:	e1 2c       	mov	r14, r1
 644:	f1 2c       	mov	r15, r1
 646:	6d 81       	ldd	r22, Y+5	; 0x05
 648:	7e 81       	ldd	r23, Y+6	; 0x06
 64a:	8f 81       	ldd	r24, Y+7	; 0x07
 64c:	98 85       	ldd	r25, Y+8	; 0x08
 64e:	a7 01       	movw	r20, r14
 650:	96 01       	movw	r18, r12
 652:	0e 94 3e 21 	call	0x427c	; 0x427c <__divmodsi4>
 656:	4b 01       	movw	r8, r22
 658:	5c 01       	movw	r10, r24
 65a:	ca 01       	movw	r24, r20
 65c:	b9 01       	movw	r22, r18
 65e:	a7 01       	movw	r20, r14
 660:	96 01       	movw	r18, r12
 662:	0e 94 3e 21 	call	0x427c	; 0x427c <__divmodsi4>
 666:	ef 85       	ldd	r30, Y+15	; 0x0f
 668:	f8 89       	ldd	r31, Y+16	; 0x10
 66a:	73 83       	std	Z+3, r23	; 0x03
 66c:	62 83       	std	Z+2, r22	; 0x02
 66e:	91 82       	std	Z+1, r9	; 0x01
 670:	80 82       	st	Z, r8
 672:	80 e0       	ldi	r24, 0x00	; 0
 674:	90 e0       	ldi	r25, 0x00	; 0
 676:	02 c0       	rjmp	.+4      	; 0x67c <__LOCK_REGION_LENGTH__+0x27c>
 678:	8f ef       	ldi	r24, 0xFF	; 255
 67a:	9f ef       	ldi	r25, 0xFF	; 255
 67c:	66 96       	adiw	r28, 0x16	; 22
 67e:	e2 e1       	ldi	r30, 0x12	; 18
 680:	0c 94 72 20 	jmp	0x40e4	; 0x40e4 <__epilogue_restores__>

Disassembly of section .text.libgcc.div:

00004450 <__divmodhi4>:
    4450:	97 fb       	bst	r25, 7
    4452:	07 2e       	mov	r0, r23
    4454:	16 f4       	brtc	.+4      	; 0x445a <__divmodhi4+0xa>
    4456:	00 94       	com	r0
    4458:	07 d0       	rcall	.+14     	; 0x4468 <__divmodhi4_neg1>
    445a:	77 fd       	sbrc	r23, 7
    445c:	09 d0       	rcall	.+18     	; 0x4470 <__divmodhi4_neg2>
    445e:	0e 94 14 22 	call	0x4428	; 0x4428 <__udivmodhi4>
    4462:	07 fc       	sbrc	r0, 7
    4464:	05 d0       	rcall	.+10     	; 0x4470 <__divmodhi4_neg2>
    4466:	3e f4       	brtc	.+14     	; 0x4476 <__divmodhi4_exit>

00004468 <__divmodhi4_neg1>:
    4468:	90 95       	com	r25
    446a:	81 95       	neg	r24
    446c:	9f 4f       	sbci	r25, 0xFF	; 255
    446e:	08 95       	ret

00004470 <__divmodhi4_neg2>:
    4470:	70 95       	com	r23
    4472:	61 95       	neg	r22
    4474:	7f 4f       	sbci	r23, 0xFF	; 255

00004476 <__divmodhi4_exit>:
    4476:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00003098 <__muldi3>:
    3098:	df 93       	push	r29
    309a:	cf 93       	push	r28
    309c:	1f 93       	push	r17
    309e:	0f 93       	push	r16
    30a0:	9a 9d       	mul	r25, r10
    30a2:	f0 2d       	mov	r31, r0
    30a4:	21 9f       	mul	r18, r17
    30a6:	f0 0d       	add	r31, r0
    30a8:	8b 9d       	mul	r24, r11
    30aa:	f0 0d       	add	r31, r0
    30ac:	8a 9d       	mul	r24, r10
    30ae:	e0 2d       	mov	r30, r0
    30b0:	f1 0d       	add	r31, r1
    30b2:	03 9f       	mul	r16, r19
    30b4:	f0 0d       	add	r31, r0
    30b6:	02 9f       	mul	r16, r18
    30b8:	e0 0d       	add	r30, r0
    30ba:	f1 1d       	adc	r31, r1
    30bc:	4e 9d       	mul	r20, r14
    30be:	e0 0d       	add	r30, r0
    30c0:	f1 1d       	adc	r31, r1
    30c2:	5e 9d       	mul	r21, r14
    30c4:	f0 0d       	add	r31, r0
    30c6:	4f 9d       	mul	r20, r15
    30c8:	f0 0d       	add	r31, r0
    30ca:	7f 93       	push	r23
    30cc:	6f 93       	push	r22
    30ce:	bf 92       	push	r11
    30d0:	af 92       	push	r10
    30d2:	5f 93       	push	r21
    30d4:	4f 93       	push	r20
    30d6:	d5 01       	movw	r26, r10
    30d8:	0e 94 eb 23 	call	0x47d6	; 0x47d6 <__umulhisi3>
    30dc:	8b 01       	movw	r16, r22
    30de:	ac 01       	movw	r20, r24
    30e0:	d7 01       	movw	r26, r14
    30e2:	0e 94 eb 23 	call	0x47d6	; 0x47d6 <__umulhisi3>
    30e6:	eb 01       	movw	r28, r22
    30e8:	e8 0f       	add	r30, r24
    30ea:	f9 1f       	adc	r31, r25
    30ec:	d6 01       	movw	r26, r12
    30ee:	0e 94 a5 24 	call	0x494a	; 0x494a <__muldi3_6>
    30f2:	2f 91       	pop	r18
    30f4:	3f 91       	pop	r19
    30f6:	d6 01       	movw	r26, r12
    30f8:	0e 94 eb 23 	call	0x47d6	; 0x47d6 <__umulhisi3>
    30fc:	c6 0f       	add	r28, r22
    30fe:	d7 1f       	adc	r29, r23
    3100:	e8 1f       	adc	r30, r24
    3102:	f9 1f       	adc	r31, r25
    3104:	af 91       	pop	r26
    3106:	bf 91       	pop	r27
    3108:	0e 94 a5 24 	call	0x494a	; 0x494a <__muldi3_6>
    310c:	2f 91       	pop	r18
    310e:	3f 91       	pop	r19
    3110:	0e 94 eb 23 	call	0x47d6	; 0x47d6 <__umulhisi3>
    3114:	c6 0f       	add	r28, r22
    3116:	d7 1f       	adc	r29, r23
    3118:	e8 1f       	adc	r30, r24
    311a:	f9 1f       	adc	r31, r25
    311c:	d6 01       	movw	r26, r12
    311e:	0e 94 eb 23 	call	0x47d6	; 0x47d6 <__umulhisi3>
    3122:	e6 0f       	add	r30, r22
    3124:	f7 1f       	adc	r31, r23
    3126:	98 01       	movw	r18, r16
    3128:	be 01       	movw	r22, r28
    312a:	cf 01       	movw	r24, r30
    312c:	11 24       	eor	r1, r1
    312e:	0f 91       	pop	r16
    3130:	1f 91       	pop	r17
    3132:	cf 91       	pop	r28
    3134:	df 91       	pop	r29
    3136:	08 95       	ret

Disassembly of section .text.libgcc.mul:

0000494a <__muldi3_6>:
    494a:	0e 94 eb 23 	call	0x47d6	; 0x47d6 <__umulhisi3>
    494e:	46 0f       	add	r20, r22
    4950:	57 1f       	adc	r21, r23
    4952:	c8 1f       	adc	r28, r24
    4954:	d9 1f       	adc	r29, r25
    4956:	08 f4       	brcc	.+2      	; 0x495a <__muldi3_6+0x10>
    4958:	31 96       	adiw	r30, 0x01	; 1
    495a:	08 95       	ret

Disassembly of section .text.libgcc.mul:

000047f4 <__mulsidi3>:
    47f4:	97 fb       	bst	r25, 7
    47f6:	57 ff       	sbrs	r21, 7
    47f8:	0c 94 63 1e 	jmp	0x3cc6	; 0x3cc6 <__umulsidi3_helper>
    47fc:	9f 93       	push	r25
    47fe:	8f 93       	push	r24
    4800:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <__umulsidi3_helper>
    4804:	6e 1b       	sub	r22, r30
    4806:	7f 0b       	sbc	r23, r31
    4808:	af 91       	pop	r26
    480a:	bf 91       	pop	r27
    480c:	8a 0b       	sbc	r24, r26
    480e:	9b 0b       	sbc	r25, r27
    4810:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00003cc4 <__umulsidi3>:
    3cc4:	e8 94       	clt

00003cc6 <__umulsidi3_helper>:
    3cc6:	df 93       	push	r29
    3cc8:	cf 93       	push	r28
    3cca:	fc 01       	movw	r30, r24
    3ccc:	db 01       	movw	r26, r22
    3cce:	0e 94 eb 23 	call	0x47d6	; 0x47d6 <__umulhisi3>
    3cd2:	7f 93       	push	r23
    3cd4:	6f 93       	push	r22
    3cd6:	e9 01       	movw	r28, r18
    3cd8:	9a 01       	movw	r18, r20
    3cda:	ac 01       	movw	r20, r24
    3cdc:	bf 93       	push	r27
    3cde:	af 93       	push	r26
    3ce0:	3f 93       	push	r19
    3ce2:	2f 93       	push	r18
    3ce4:	df 01       	movw	r26, r30
    3ce6:	0e 94 eb 23 	call	0x47d6	; 0x47d6 <__umulhisi3>
    3cea:	26 f4       	brtc	.+8      	; 0x3cf4 <__umulsidi3_helper+0x2e>
    3cec:	6c 1b       	sub	r22, r28
    3cee:	7d 0b       	sbc	r23, r29
    3cf0:	82 0b       	sbc	r24, r18
    3cf2:	93 0b       	sbc	r25, r19
    3cf4:	9e 01       	movw	r18, r28
    3cf6:	eb 01       	movw	r28, r22
    3cf8:	fc 01       	movw	r30, r24
    3cfa:	0e 94 a5 24 	call	0x494a	; 0x494a <__muldi3_6>
    3cfe:	af 91       	pop	r26
    3d00:	bf 91       	pop	r27
    3d02:	2f 91       	pop	r18
    3d04:	3f 91       	pop	r19
    3d06:	0e 94 a5 24 	call	0x494a	; 0x494a <__muldi3_6>
    3d0a:	be 01       	movw	r22, r28
    3d0c:	cf 01       	movw	r24, r30
    3d0e:	f9 01       	movw	r30, r18
    3d10:	2f 91       	pop	r18
    3d12:	3f 91       	pop	r19
    3d14:	cf 91       	pop	r28
    3d16:	df 91       	pop	r29
    3d18:	08 95       	ret

Disassembly of section .text.libgcc.div:

00003b5e <__moddi3>:
    3b5e:	68 94       	set
    3b60:	01 c0       	rjmp	.+2      	; 0x3b64 <__divdi3_moddi3>

00003b62 <__divdi3>:
    3b62:	e8 94       	clt

00003b64 <__divdi3_moddi3>:
    3b64:	f9 2f       	mov	r31, r25
    3b66:	f1 2b       	or	r31, r17
    3b68:	12 f0       	brmi	.+4      	; 0x3b6e <__divdi3_moddi3+0xa>
    3b6a:	0c 94 0c 24 	jmp	0x4818	; 0x4818 <__udivdi3_umoddi3>
    3b6e:	a0 e0       	ldi	r26, 0x00	; 0
    3b70:	b0 e0       	ldi	r27, 0x00	; 0
    3b72:	ed eb       	ldi	r30, 0xBD	; 189
    3b74:	fd e1       	ldi	r31, 0x1D	; 29
    3b76:	0c 94 5c 20 	jmp	0x40b8	; 0x40b8 <__prologue_saves__+0xc>
    3b7a:	09 2e       	mov	r0, r25
    3b7c:	05 94       	asr	r0
    3b7e:	22 f4       	brpl	.+8      	; 0x3b88 <__divdi3_moddi3+0x24>
    3b80:	0e 94 db 23 	call	0x47b6	; 0x47b6 <__negdi2>
    3b84:	11 23       	and	r17, r17
    3b86:	92 f4       	brpl	.+36     	; 0x3bac <__divdi3_moddi3+0x48>
    3b88:	f0 e8       	ldi	r31, 0x80	; 128
    3b8a:	0f 26       	eor	r0, r31
    3b8c:	ff ef       	ldi	r31, 0xFF	; 255
    3b8e:	e0 94       	com	r14
    3b90:	f0 94       	com	r15
    3b92:	00 95       	com	r16
    3b94:	10 95       	com	r17
    3b96:	b0 94       	com	r11
    3b98:	c0 94       	com	r12
    3b9a:	d0 94       	com	r13
    3b9c:	a1 94       	neg	r10
    3b9e:	bf 0a       	sbc	r11, r31
    3ba0:	cf 0a       	sbc	r12, r31
    3ba2:	df 0a       	sbc	r13, r31
    3ba4:	ef 0a       	sbc	r14, r31
    3ba6:	ff 0a       	sbc	r15, r31
    3ba8:	0f 0b       	sbc	r16, r31
    3baa:	1f 0b       	sbc	r17, r31
    3bac:	0e 94 fb 17 	call	0x2ff6	; 0x2ff6 <__udivmod64>
    3bb0:	07 fc       	sbrc	r0, 7
    3bb2:	0e 94 db 23 	call	0x47b6	; 0x47b6 <__negdi2>
    3bb6:	cd b7       	in	r28, 0x3d	; 61
    3bb8:	de b7       	in	r29, 0x3e	; 62
    3bba:	ec e0       	ldi	r30, 0x0C	; 12
    3bbc:	0c 94 78 20 	jmp	0x40f0	; 0x40f0 <__epilogue_restores__+0xc>

Disassembly of section .text.libgcc.div:

00004812 <__umoddi3>:
    4812:	68 94       	set
    4814:	01 c0       	rjmp	.+2      	; 0x4818 <__udivdi3_umoddi3>

00004816 <__udivdi3>:
    4816:	e8 94       	clt

00004818 <__udivdi3_umoddi3>:
    4818:	8f 92       	push	r8
    481a:	9f 92       	push	r9
    481c:	cf 93       	push	r28
    481e:	df 93       	push	r29
    4820:	0e 94 fb 17 	call	0x2ff6	; 0x2ff6 <__udivmod64>
    4824:	df 91       	pop	r29
    4826:	cf 91       	pop	r28
    4828:	9f 90       	pop	r9
    482a:	8f 90       	pop	r8
    482c:	08 95       	ret

Disassembly of section .text.libgcc.div:

00002ff6 <__udivmod64>:
    2ff6:	88 24       	eor	r8, r8
    2ff8:	99 24       	eor	r9, r9
    2ffa:	f4 01       	movw	r30, r8
    2ffc:	e4 01       	movw	r28, r8
    2ffe:	b0 e4       	ldi	r27, 0x40	; 64
    3000:	9f 93       	push	r25
    3002:	aa 27       	eor	r26, r26
    3004:	9a 15       	cp	r25, r10
    3006:	8b 04       	cpc	r8, r11
    3008:	9c 04       	cpc	r9, r12
    300a:	ed 05       	cpc	r30, r13
    300c:	fe 05       	cpc	r31, r14
    300e:	cf 05       	cpc	r28, r15
    3010:	d0 07       	cpc	r29, r16
    3012:	a1 07       	cpc	r26, r17
    3014:	98 f4       	brcc	.+38     	; 0x303c <__udivmod64+0x46>
    3016:	ad 2f       	mov	r26, r29
    3018:	dc 2f       	mov	r29, r28
    301a:	cf 2f       	mov	r28, r31
    301c:	fe 2f       	mov	r31, r30
    301e:	e9 2d       	mov	r30, r9
    3020:	98 2c       	mov	r9, r8
    3022:	89 2e       	mov	r8, r25
    3024:	98 2f       	mov	r25, r24
    3026:	87 2f       	mov	r24, r23
    3028:	76 2f       	mov	r23, r22
    302a:	65 2f       	mov	r22, r21
    302c:	54 2f       	mov	r21, r20
    302e:	43 2f       	mov	r20, r19
    3030:	32 2f       	mov	r19, r18
    3032:	22 27       	eor	r18, r18
    3034:	b8 50       	subi	r27, 0x08	; 8
    3036:	31 f7       	brne	.-52     	; 0x3004 <__udivmod64+0xe>
    3038:	bf 91       	pop	r27
    303a:	27 c0       	rjmp	.+78     	; 0x308a <__udivmod64+0x94>
    303c:	1b 2e       	mov	r1, r27
    303e:	bf 91       	pop	r27
    3040:	bb 27       	eor	r27, r27
    3042:	22 0f       	add	r18, r18
    3044:	33 1f       	adc	r19, r19
    3046:	44 1f       	adc	r20, r20
    3048:	55 1f       	adc	r21, r21
    304a:	66 1f       	adc	r22, r22
    304c:	77 1f       	adc	r23, r23
    304e:	88 1f       	adc	r24, r24
    3050:	99 1f       	adc	r25, r25
    3052:	88 1c       	adc	r8, r8
    3054:	99 1c       	adc	r9, r9
    3056:	ee 1f       	adc	r30, r30
    3058:	ff 1f       	adc	r31, r31
    305a:	cc 1f       	adc	r28, r28
    305c:	dd 1f       	adc	r29, r29
    305e:	aa 1f       	adc	r26, r26
    3060:	bb 1f       	adc	r27, r27
    3062:	8a 14       	cp	r8, r10
    3064:	9b 04       	cpc	r9, r11
    3066:	ec 05       	cpc	r30, r12
    3068:	fd 05       	cpc	r31, r13
    306a:	ce 05       	cpc	r28, r14
    306c:	df 05       	cpc	r29, r15
    306e:	a0 07       	cpc	r26, r16
    3070:	b1 07       	cpc	r27, r17
    3072:	48 f0       	brcs	.+18     	; 0x3086 <__udivmod64+0x90>
    3074:	8a 18       	sub	r8, r10
    3076:	9b 08       	sbc	r9, r11
    3078:	ec 09       	sbc	r30, r12
    307a:	fd 09       	sbc	r31, r13
    307c:	ce 09       	sbc	r28, r14
    307e:	df 09       	sbc	r29, r15
    3080:	a0 0b       	sbc	r26, r16
    3082:	b1 0b       	sbc	r27, r17
    3084:	21 60       	ori	r18, 0x01	; 1
    3086:	1a 94       	dec	r1
    3088:	e1 f6       	brne	.-72     	; 0x3042 <__udivmod64+0x4c>
    308a:	2e f4       	brtc	.+10     	; 0x3096 <__udivmod64+0xa0>
    308c:	94 01       	movw	r18, r8
    308e:	af 01       	movw	r20, r30
    3090:	be 01       	movw	r22, r28
    3092:	cd 01       	movw	r24, r26
    3094:	00 0c       	add	r0, r0
    3096:	08 95       	ret

Disassembly of section .text.libgcc:

000047b6 <__negdi2>:
    47b6:	60 95       	com	r22
    47b8:	70 95       	com	r23
    47ba:	80 95       	com	r24
    47bc:	90 95       	com	r25
    47be:	30 95       	com	r19
    47c0:	40 95       	com	r20
    47c2:	50 95       	com	r21
    47c4:	21 95       	neg	r18
    47c6:	3f 4f       	sbci	r19, 0xFF	; 255
    47c8:	4f 4f       	sbci	r20, 0xFF	; 255
    47ca:	5f 4f       	sbci	r21, 0xFF	; 255
    47cc:	6f 4f       	sbci	r22, 0xFF	; 255
    47ce:	7f 4f       	sbci	r23, 0xFF	; 255
    47d0:	8f 4f       	sbci	r24, 0xFF	; 255
    47d2:	9f 4f       	sbci	r25, 0xFF	; 255
    47d4:	08 95       	ret

Disassembly of section .text.libgcc.prologue:

000040ac <__prologue_saves__>:
    40ac:	2f 92       	push	r2
    40ae:	3f 92       	push	r3
    40b0:	4f 92       	push	r4
    40b2:	5f 92       	push	r5
    40b4:	6f 92       	push	r6
    40b6:	7f 92       	push	r7
    40b8:	8f 92       	push	r8
    40ba:	9f 92       	push	r9
    40bc:	af 92       	push	r10
    40be:	bf 92       	push	r11
    40c0:	cf 92       	push	r12
    40c2:	df 92       	push	r13
    40c4:	ef 92       	push	r14
    40c6:	ff 92       	push	r15
    40c8:	0f 93       	push	r16
    40ca:	1f 93       	push	r17
    40cc:	cf 93       	push	r28
    40ce:	df 93       	push	r29
    40d0:	cd b7       	in	r28, 0x3d	; 61
    40d2:	de b7       	in	r29, 0x3e	; 62
    40d4:	ca 1b       	sub	r28, r26
    40d6:	db 0b       	sbc	r29, r27
    40d8:	0f b6       	in	r0, 0x3f	; 63
    40da:	f8 94       	cli
    40dc:	de bf       	out	0x3e, r29	; 62
    40de:	0f be       	out	0x3f, r0	; 63
    40e0:	cd bf       	out	0x3d, r28	; 61
    40e2:	09 94       	ijmp

Disassembly of section .text.libgcc.prologue:

000040e4 <__epilogue_restores__>:
    40e4:	2a 88       	ldd	r2, Y+18	; 0x12
    40e6:	39 88       	ldd	r3, Y+17	; 0x11
    40e8:	48 88       	ldd	r4, Y+16	; 0x10
    40ea:	5f 84       	ldd	r5, Y+15	; 0x0f
    40ec:	6e 84       	ldd	r6, Y+14	; 0x0e
    40ee:	7d 84       	ldd	r7, Y+13	; 0x0d
    40f0:	8c 84       	ldd	r8, Y+12	; 0x0c
    40f2:	9b 84       	ldd	r9, Y+11	; 0x0b
    40f4:	aa 84       	ldd	r10, Y+10	; 0x0a
    40f6:	b9 84       	ldd	r11, Y+9	; 0x09
    40f8:	c8 84       	ldd	r12, Y+8	; 0x08
    40fa:	df 80       	ldd	r13, Y+7	; 0x07
    40fc:	ee 80       	ldd	r14, Y+6	; 0x06
    40fe:	fd 80       	ldd	r15, Y+5	; 0x05
    4100:	0c 81       	ldd	r16, Y+4	; 0x04
    4102:	1b 81       	ldd	r17, Y+3	; 0x03
    4104:	aa 81       	ldd	r26, Y+2	; 0x02
    4106:	b9 81       	ldd	r27, Y+1	; 0x01
    4108:	ce 0f       	add	r28, r30
    410a:	d1 1d       	adc	r29, r1
    410c:	0f b6       	in	r0, 0x3f	; 63
    410e:	f8 94       	cli
    4110:	de bf       	out	0x3e, r29	; 62
    4112:	0f be       	out	0x3f, r0	; 63
    4114:	cd bf       	out	0x3d, r28	; 61
    4116:	ed 01       	movw	r28, r26
    4118:	08 95       	ret

Disassembly of section .text.libgcc:

0000495c <__adddi3>:
    495c:	2a 0d       	add	r18, r10
    495e:	3b 1d       	adc	r19, r11
    4960:	4c 1d       	adc	r20, r12
    4962:	5d 1d       	adc	r21, r13
    4964:	6e 1d       	adc	r22, r14
    4966:	7f 1d       	adc	r23, r15
    4968:	80 1f       	adc	r24, r16
    496a:	91 1f       	adc	r25, r17
    496c:	08 95       	ret

Disassembly of section .text.libgcc:

0000496e <__cmpdi2>:
    496e:	2a 15       	cp	r18, r10
    4970:	3b 05       	cpc	r19, r11
    4972:	4c 05       	cpc	r20, r12
    4974:	5d 05       	cpc	r21, r13
    4976:	6e 05       	cpc	r22, r14
    4978:	7f 05       	cpc	r23, r15
    497a:	80 07       	cpc	r24, r16
    497c:	91 07       	cpc	r25, r17
    497e:	08 95       	ret
