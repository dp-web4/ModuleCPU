
ModuleCPU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000511e  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000da  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00005120  2**0
                  ALLOC
  3 .noinit       0000022e  00800102  00800102  00005120  2**2
                  ALLOC
  4 .comment      0000002f  00000000  00000000  0000511e  2**0
                  CONTENTS, READONLY
  5 .stack.descriptors.hdr 00000142  00000000  00000000  0000514d  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000550  00000000  00000000  0000528f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000091b8  00000000  00000000  000057df  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001ace  00000000  00000000  0000e997  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003ac6  00000000  00000000  00010465  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000012c4  00000000  00000000  00013f2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000070d  00000000  00000000  000151f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000048dc  00000000  00000000  000158fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000530  00000000  00000000  0001a1d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .text         00000004  0000505a  0000505a  0000510e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0001a70c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .text.__vector_27 000000bc  00003326  00003326  000033da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.ADCSetPowerOn 0000000c  00005014  00005014  000050c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.ADCStartConversion 0000002a  00004a06  00004a06  00004aba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .progmemx.data 0000000b  00000341  00000341  000003f5  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 20 .text.ADCInit 0000013c  00002444  00002444  000024f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .progmemx.data.sg_sMuxSelectList 0000000f  0000031a  0000031a  000003ce  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 22 .bss.sg_eCurrentType 00000001  00800953  00800953  00005120  2**0
                  ALLOC
 23 .bss.sg_eState 00000001  00800970  00800970  00005120  2**0
                  ALLOC
 24 .text.CANLookupCommand 00000062  0000401a  0000401a  000040ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .progmemx.data 0000000b  0000034c  0000034c  00000400  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 26 .text.CANMOBSet 00000212  00001aea  00001aea  00001b9e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.CANSendMessageInternal 00000180  00001eba  00001eba  00001f6e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.CANMOBInterrupt 00000166  0000203a  0000203a  000020ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.__vector_18 0000013e  00002306  00002306  000023ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.CANSendMessage 0000002e  000048ce  000048ce  00004982  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.CANSetRXCallback 0000000a  0000502c  0000502c  000050e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.CANInit 0000009c  00003734  00003734  000037e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.CANCheckTxStatus 000000ac  0000349c  0000349c  00003550  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.CANCheckHealth 00000130  000026b4  000026b4  00002768  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .bss.lastREC.2007 00000001  00800971  00800971  00005120  2**0
                  ALLOC
 36 .bss.lastTEC.2006 00000001  00800972  00800972  00005120  2**0
                  ALLOC
 37 .progmemx.data.sg_sRXCommandList 00000021  000002d5  000002d5  00000389  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 38 .progmemx.data.sg_sMOBModuleRequestTime 00000008  00000357  00000357  0000040b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 39 .progmemx.data.sg_sMOBModuleHardwareDetail 00000008  0000035f  0000035f  00000413  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 40 .progmemx.data.sg_sMOBModuleCellDetail 00000008  00000367  00000367  0000041b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 41 .progmemx.data.sg_sMOBModuleCellCommStat2 00000008  0000036f  0000036f  00000423  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 42 .progmemx.data.sg_sMOBModuleCellCommStat1 00000008  00000377  00000377  0000042b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 43 .progmemx.data.sg_sMOBModuleStatus3 00000008  0000037f  0000037f  00000433  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 44 .progmemx.data.sg_sMOBModuleStatus2 00000008  00000387  00000387  0000043b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 45 .progmemx.data.sg_sMOBModuleStatus1 00000008  0000038f  0000038f  00000443  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 46 .progmemx.data.sg_sMOBModuleAnnouncement 00000008  00000397  00000397  0000044b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 47 .progmemx.data.sg_sMOBGenericReceive 00000008  0000039f  0000039f  00000453  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 48 .progmemx.data.sg_sMOBDisabled 00000008  000003a7  000003a7  0000045b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 49 .bss.sg_u8TxBackoffDelay 00000001  00800973  00800973  00005120  2**0
                  ALLOC
 50 .bss.sg_u8TxOnlyErrorCount 00000001  00800974  00800974  00005120  2**0
                  ALLOC
 51 .bss.sg_u8BusOffRecoveryDelay 00000001  00800975  00800975  00005120  2**0
                  ALLOC
 52 .bss.sg_u16ErrorPassive 00000002  00800951  00800951  00005120  2**0
                  ALLOC
 53 .bss.sg_u16BusOffEvents 00000002  00800960  00800960  00005120  2**0
                  ALLOC
 54 .bss.sg_u16TxOkPolled 00000002  00800962  00800962  00005120  2**0
                  ALLOC
 55 .bss.sg_u16TxErrors 00000002  00800964  00800964  00005120  2**0
                  ALLOC
 56 .bss.sg_u16TxTimeouts 00000002  00800966  00800966  00005120  2**0
                  ALLOC
 57 .bss.sg_bInRetransmit 00000001  00800976  00800976  00005120  2**0
                  ALLOC
 58 .bss.sg_u8LastTXDataLen 00000001  00800977  00800977  00005120  2**0
                  ALLOC
 59 .bss.sg_u8LastTXData 00000008  00800941  00800941  00005120  2**0
                  ALLOC
 60 .bss.sg_eLastTXType 00000001  00800978  00800978  00005120  2**0
                  ALLOC
 61 .bss.sg_u8TransmitAttempts 00000001  00800979  00800979  00005120  2**0
                  ALLOC
 62 .bss.sg_pfRXCallback 00000002  00800968  00800968  00005120  2**0
                  ALLOC
 63 .bss.sg_u8Busy 00000001  0080097a  0080097a  00005120  2**0
                  ALLOC
 64 .text.DebugOut 0000000e  00004fdc  00004fdc  00005090  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .text.EEPROMRead 00000012  00004f42  00004f42  00004ff6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 66 .text.I2CBitDelay 0000000e  00004fea  00004fea  0000509e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 67 .text.I2CStart 0000002c  0000492a  0000492a  000049de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 68 .text.I2CStop 00000026  00004ad0  00004ad0  00004b84  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 69 .text.I2CUnstick 0000003c  00004646  00004646  000046fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 70 .text.I2CTxByte 0000006a  00003ee2  00003ee2  00003f96  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 71 .text.I2CRxByte 0000007a  00003d82  00003d82  00003e36  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 72 .text.I2CSetup 0000002c  00004956  00004956  00004a0a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 73 .text.I2CStartTransaction 00000028  00004a30  00004a30  00004ae4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 74 .text.CellCountExpectedSet 000000c4  000031a0  000031a0  00003254  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 75 .text.SendModuleControllerStatus 00000010  00004f9c  00004f9c  00005050  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 76 .text.ModuleControllerStateSet 0000000a  00005036  00005036  000050ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 77 .text.ModuleControllerStateSetMax 00000016  00004ec2  00004ec2  00004f76  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 78 .text.Check5VLoss 00000018  00004e7a  00004e7a  00004f2e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 79 .text.CellDataConvertVoltage 0000005e  000040de  000040de  00004192  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 80 .text.CellDataConvertTemperature 00000064  00003fb6  00003fb6  0000406a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 81 .text.ModuleCurrentConvertReadings 00000104  000027e4  000027e4  00002898  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 82 .text.__vector_1 00000024  00004af6  00004af6  00004baa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 83 .text.__vector_2 00000024  00004b1a  00004b1a  00004bce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 84 .text.__vector_3 00000024  00004b3e  00004b3e  00004bf2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 85 .text.__vector_4 00000024  00004b62  00004b62  00004c16  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 86 .text.__vector_5 00000024  00004b86  00004b86  00004c3a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 87 .text.__vector_6 00000024  00004baa  00004baa  00004c5e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 88 .text.__vector_22 00000024  00004bce  00004bce  00004c82  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 89 .text.__vector_9 00000024  00004bf2  00004bf2  00004ca6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 90 .text.__vector_11 00000024  00004c16  00004c16  00004cca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 91 .text.__vector_13 00000024  00004c3a  00004c3a  00004cee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 92 .text.__vector_14 00000024  00004c5e  00004c5e  00004d12  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 93 .text.__vector_17 00000024  00004c82  00004c82  00004d36  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 94 .text.__vector_19 00000024  00004ca6  00004ca6  00004d5a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 95 .text.__vector_21 00000024  00004cca  00004cca  00004d7e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 96 .text.__vector_25 00000024  00004cee  00004cee  00004da2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 97 .text.__vector_26 00000024  00004d12  00004d12  00004dc6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 98 .text.__vector_29 00000024  00004d36  00004d36  00004dea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 99 .text.__vector_30 00000024  00004d5a  00004d5a  00004e0e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
100 .text.CurrentThresholdsGet 00000094  000037d0  000037d0  00003884  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
101 .progmemx.data 000001a1  000000da  000000da  0000018e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
102 .text.CANReceiveCallback 00000298  000011bc  000011bc  00001270  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
103 .text.ControllerStatusMessagesSend 00000404  00000810  00000810  000008c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
104 .text.CellStringProcess 000002ac  00000f10  00000f10  00000fc4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
105 .text.Delay   00000052  000043f2  000043f2  000044a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
106 .text.PlatformAssert 0000002c  00004982  00004982  00004a36  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
107 .text.ModuleControllerStateHandle 0000021e  000018cc  000018cc  00001980  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
108 .text.PlatformGetRegistrationID 00000006  00005054  00005054  00005108  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
109 .text.SetSysclock 0000000c  00005020  00005020  000050d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
110 .text.ModuleControllerGetUniqueID 0000007e  00003b8e  00003b8e  00003c42  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
111 .text.TimerInit 00000052  00004444  00004444  000044f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
112 .text.__vector_12 000000ba  000033e2  000033e2  00003496  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
113 .text.WatchdogReset 00000002  00005062  00005062  00005116  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
114 .text.WatchdogOff 0000001a  00004e60  00004e60  00004f14  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
115 .text.__vector_28 00000052  00004496  00004496  0000454a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
116 .text.__vector_23 0000008a  00003864  00003864  00003918  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
117 .text.__vector_24 0000004c  000044e8  000044e8  0000459c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
118 .text.vUARTRXStart 00000016  00004ed8  00004ed8  00004f8c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
119 .text.vUARTRXEnd 00000024  00004d7e  00004d7e  00004e32  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
120 .text.vUARTRXData 0000007a  00003dfc  00003dfc  00003eb0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
121 .text.PlatformGetSendData 00000028  00004a58  00004a58  00004b0c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
122 .text.ADCCallback 0000002c  000049ae  000049ae  00004a62  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
123 .text.FrameInit 000000cc  00002f44  00002f44  00002ff8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
124 .text.CellStringPowerStateMachine 00000088  00003978  00003978  00003a2c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
125 .text.main    000002fc  00000c14  00000c14  00000cc8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
126 .bss.sg_u8PCMSK1 00000001  0080097b  0080097b  00005120  2**0
                  ALLOC
127 .bss.sg_u8PCMSK0 00000001  0080097c  0080097c  00005120  2**0
                  ALLOC
128 .bss.sg_u8UnhandledInterruptVector 00000001  0080097d  0080097d  00005120  2**0
                  ALLOC
129 .bss.sg_u8Reason 00000001  0080097e  0080097e  00005120  2**0
                  ALLOC
130 .progmemx.data.sg_u8FractionalLookup 00000010  0000030a  0000030a  000003be  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
131 .bss.sg_u8ControllerStatusMsgCount 00000001  0080097f  0080097f  00005120  2**0
                  ALLOC
132 .bss.sg_u8CellReports 00000001  00800980  00800980  00005120  2**0
                  ALLOC
133 .bss.sg_u16BytesReceived 00000002  0080096a  0080096a  00005120  2**0
                  ALLOC
134 .bss.sg_u8CellBufferTemp 00000004  00800954  00800954  00005120  2**2
                  ALLOC
135 .bss.sg_u8CellBufferRX 00000001  00800981  00800981  00005120  2**0
                  ALLOC
136 .bss.sg_u8CellIndex 00000001  00800982  00800982  00005120  2**0
                  ALLOC
137 .bss.sg_u8TicksSinceLastPackControllerMessage 00000001  00800983  00800983  00005120  2**0
                  ALLOC
138 .bss.sg_u8CellStringPowerTimer 00000001  00800984  00800984  00005120  2**0
                  ALLOC
139 .bss.sg_bFrameStart 00000001  00800985  00800985  00005120  2**0
                  ALLOC
140 .bss.sg_u8CellFrameTimer 00000001  00800986  00800986  00005120  2**0
                  ALLOC
141 .bss.sg_bIgnoreStatusRequests 00000001  00800987  00800987  00005120  2**0
                  ALLOC
142 .bss.sg_u8AnnouncementDelayTicks 00000001  00800988  00800988  00005120  2**0
                  ALLOC
143 .bss.sg_bAnnouncementPending 00000001  00800989  00800989  00005120  2**0
                  ALLOC
144 .bss.sg_u8CurrentBufferIndex 00000001  0080098a  0080098a  00005120  2**0
                  ALLOC
145 .bss.sg_sCurrenBuffer 00000010  00800921  00800921  00005120  2**0
                  ALLOC
146 .text.IsLeapYear 00000034  0000479c  0000479c  00004850  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
147 .text.RTCStartTransaction 00000044  00004580  00004580  00004634  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
148 .text.StructTMToHW 00000054  0000434a  0000434a  000043fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
149 .text.HWToStructTM 0000007c  00003c8a  00003c8a  00003d3e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
150 .text.__vector_10 00000086  00003a00  00003a00  00003ab4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
151 .progmemx.data 00000014  000002f6  000002f6  000003aa  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
152 .text.RTCReadRegisters 0000007e  00003c0c  00003c0c  00003cc0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
153 .text.RTCReadHW 000000e2  00002bd2  00002bd2  00002c86  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
154 .text.RTCWriteRegisters 0000006a  00003f4c  00003f4c  00004000  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
155 .text.RTCWriteHW 000000fe  000028e8  000028e8  0000299c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
156 .text.RTCSetTime 000000c6  000030da  000030da  0000318e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
157 .text.RTCInit 00000222  000016aa  000016aa  0000175e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
158 .progmemx.data.sg_u8DaysInMonths 0000000c  00000329  00000329  000003dd  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
159 .bss.sg_u64Time 00000008  00800949  00800949  00005120  2**0
                  ALLOC
160 .text.SDSetCS 00000014  00004f1a  00004f1a  00004fce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
161 .text.SDPowerup 0000003a  000046be  000046be  00004772  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
162 .text.SDCommand 000000aa  00003548  00003548  000035fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
163 .text.SDGoIdle 00000022  00004dc6  00004dc6  00004e7a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
164 .text.SDSendOpCondition 00000034  000047d0  000047d0  00004884  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
165 .text.SDSendOpConditionArg 00000056  00004248  00004248  000042fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
166 .text.SDWaitResponse7 0000000e  00004ff8  00004ff8  000050ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
167 .text.SDSendInterfaceCondition 00000034  00004804  00004804  000048b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
168 .text.SDReadOCR 00000032  00004838  00004838  000048ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
169 .text.SDReadCSD 0000007c  00003d06  00003d06  00003dba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
170 .text.SDReceiveDataBlock 0000008a  000038ee  000038ee  000039a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
171 .text.SDTransmitDataBlock 000000c2  00003264  00003264  00003318  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
172 .text.SDInit  00000166  000021a0  000021a0  00002254  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
173 .text.SDRead  000000d8  00002e6c  00002e6c  00002f20  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
174 .text.SDWrite 000000dc  00002cb4  00002cb4  00002d68  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
175 .bss.sg_u8CSD 00000010  00800931  00800931  00005120  2**0
                  ALLOC
176 .bss.sg_u16BlockSize 00000002  0080096c  0080096c  00005120  2**0
                  ALLOC
177 .bss.sg_u32SDSectorCount 00000004  00800958  00800958  00005120  2**0
                  ALLOC
178 .text.SPITransaction 00000058  00004198  00004198  0000424c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
179 .text.SPISetBaudRate 000000ca  00003010  00003010  000030c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
180 .text.SPIInit 0000002c  000049da  000049da  00004a8e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
181 .progmemx.data.sg_sSPIBaudRates 0000002a  000002ab  000002ab  0000035f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
182 .text.readGlobalState 0000003e  00004608  00004608  000046bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
183 .text.writeGlobalState 00000032  0000486a  0000486a  0000491e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
184 .text.updateSessionMap 000000dc  00002d90  00002d90  00002e44  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
185 .text.STORE_Init 00000082  00003b0c  00003b0c  00003bc0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
186 .text.STORE_WriteFrame 000000f8  000029e6  000029e6  00002a9a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
187 .text.STORE_StartNewSession 00000054  0000439e  0000439e  00004452  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
188 .text.STORE_EndSession 00000058  000041f0  000041f0  000042a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
189 .bss.frameBuffer 00000400  00800330  00800330  00005120  2**2
                  ALLOC
190 .bss.currentSector 00000004  0080095c  0080095c  00005120  2**0
                  ALLOC
191 .bss.gState   000001d8  00800730  00800730  00005120  2**2
                  ALLOC
192 .text.vUARTtxDataAvailable 00000024  00004da2  00004da2  00004e56  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
193 .text.vUARTtxDataGet 0000004c  00004534  00004534  000045e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
194 .text.vUARTRXReset 0000000a  00005040  00005040  000050f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
195 .text.vUARTStarttx 00000056  0000429e  0000429e  00004352  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
196 .text.__vector_8 0000005c  0000413c  0000413c  000041f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
197 .text.__vector_16 000000f4  00002ade  00002ade  00002b92  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
198 .text.__vector_15 00000134  00002580  00002580  00002634  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
199 .text.vUARTInit 00000036  00004730  00004730  000047e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
200 .text.vUARTInitReceive 00000014  00004f2e  00004f2e  00004fe2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
201 .bss.sg_bState 00000001  0080098b  0080098b  00005120  2**0
                  ALLOC
202 .bss.sg_u8SendData 00000002  0080096e  0080096e  00005120  2**0
                  ALLOC
203 .bss.sg_u8SendIndex 00000001  0080098c  0080098c  00005120  2**0
                  ALLOC
204 .bss.sg_bMCTxNextBit 00000001  0080098d  0080098d  00005120  2**0
                  ALLOC
205 .bss.sg_bCellReportsReuested 00000001  0080098e  0080098e  00005120  2**0
                  ALLOC
206 .bss.sg_etxState 00000001  0080098f  0080098f  00005120  2**0
                  ALLOC
207 .bss.sg_btxMoreAvailable 00000001  00800990  00800990  00005120  2**0
                  ALLOC
208 .bss.sg_u8txDataByte 00000001  00800991  00800991  00005120  2**0
                  ALLOC
209 .bss.sg_u8txBitCount 00000001  00800992  00800992  00005120  2**0
                  ALLOC
210 .bss.sg_bCell_mc_rxMoreData 00000001  00800993  00800993  00005120  2**0
                  ALLOC
211 .bss.sg_bCell_mc_rxPriorState 00000001  00800994  00800994  00005120  2**0
                  ALLOC
212 .bss.sg_eCell_mc_rxState 00000001  00800995  00800995  00005120  2**0
                  ALLOC
213 .bss.sg_u8rxDataByte 00000001  00800996  00800996  00005120  2**0
                  ALLOC
214 .bss.sg_u8Cell_mc_rxBitCount 00000001  00800997  00800997  00005120  2**0
                  ALLOC
215 .text.libgcc.div 00000028  00004a80  00004a80  00004b34  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
216 .text.libgcc.div 00000044  000045c4  000045c4  00004678  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
217 .text.libgcc.div 0000002e  000048fc  000048fc  000049b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
218 .text.libgcc.div 00000010  00004fac  00004fac  00005060  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
219 .text.libgcc.mul 0000001e  00004e08  00004e08  00004ebc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
220 .text.libgcc.mul 0000000e  00005006  00005006  000050ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
221 .text.libgcc.mul 00000016  00004eee  00004eee  00004fa2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
222 .text.libgcc.mul 00000010  00004fbc  00004fbc  00005070  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
223 .text.libgcc  00000010  00004fcc  00004fcc  00005080  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
224 .text.libgcc  00000018  00004e92  00004e92  00004f46  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
225 .text.libgcc  00000018  00004eaa  00004eaa  00004f5e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
226 .text.__dummy_fini 00000002  00005064  00005064  00005118  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
227 .text.__dummy_funcs_on_exit 00000002  00005066  00005066  0000511a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
228 .text.__dummy_simulator_exit 00000002  00005068  00005068  0000511c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
229 .text.exit    00000016  00004f04  00004f04  00004fb8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
230 .text.memcpy  00000032  0000489c  0000489c  00004950  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
231 .text.memset  00000012  00004f54  00004f54  00005008  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
232 .text.gmtime  0000000a  0000504a  0000504a  000050fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
233 .bss.tm.1240  00000019  00800908  00800908  00005120  2**0
                  ALLOC
234 .progmemx.data 00000004  000003af  000003af  00000463  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
235 .text.__gmtime_r 0000006c  00003e76  00003e76  00003f2a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
236 .progmemx.data 00000004  000003b3  000003b3  00000467  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
237 .text.mktime  00000086  00003a86  00003a86  00003b3a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
238 .text._Exit   00000004  0000505e  0000505e  00005112  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
239 .text.__tm_to_secs 000001be  00001cfc  00001cfc  00001db0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
240 .text.__year_to_secs 00000256  00001454  00001454  00001508  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
241 .text.__month_to_secs 0000003c  00004682  00004682  00004736  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
242 .progmemx.data.secs_through_month.1090 00000030  0000027b  0000027b  0000032f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
243 .text.__secs_to_tm 00000458  000003b8  000003b8  0000046c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
244 .progmemx.data.days_in_month.1250 0000000c  00000335  00000335  000003e9  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
245 .text.libgcc.div 00000028  00004aa8  00004aa8  00004b5c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
246 .text.libgcc.mul 000000a0  00003694  00003694  00003748  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
247 .text.libgcc.mul 00000012  00004f66  00004f66  0000501a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
248 .text.libgcc.mul 0000001e  00004e26  00004e26  00004eda  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
249 .text.libgcc.mul 00000056  000042f4  000042f4  000043a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
250 .text.libgcc.div 00000062  0000407c  0000407c  00004130  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
251 .text.libgcc.div 0000001c  00004e44  00004e44  00004ef8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
252 .text.libgcc.div 000000a2  000035f2  000035f2  000036a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
253 .text.libgcc  00000020  00004de8  00004de8  00004e9c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
254 .text.libgcc.prologue 00000038  000046f8  000046f8  000047ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
255 .text.libgcc.prologue 00000036  00004766  00004766  0000481a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
256 .text.libgcc  00000012  00004f78  00004f78  0000502c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
257 .text.libgcc  00000012  00004f8a  00004f8a  0000503e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 43 00 	jmp	0x86	; 0x86 <__ctors_end>
   4:	0c 94 7b 25 	jmp	0x4af6	; 0x4af6 <__vector_1>
   8:	0c 94 8d 25 	jmp	0x4b1a	; 0x4b1a <__vector_2>
   c:	0c 94 9f 25 	jmp	0x4b3e	; 0x4b3e <__vector_3>
  10:	0c 94 b1 25 	jmp	0x4b62	; 0x4b62 <__vector_4>
  14:	0c 94 c3 25 	jmp	0x4b86	; 0x4b86 <__vector_5>
  18:	0c 94 d5 25 	jmp	0x4baa	; 0x4baa <__vector_6>
  1c:	0c 94 2d 28 	jmp	0x505a	; 0x505a <__bad_interrupt>
  20:	0c 94 9e 20 	jmp	0x413c	; 0x413c <__vector_8>
  24:	0c 94 f9 25 	jmp	0x4bf2	; 0x4bf2 <__vector_9>
  28:	0c 94 00 1d 	jmp	0x3a00	; 0x3a00 <__vector_10>
  2c:	0c 94 0b 26 	jmp	0x4c16	; 0x4c16 <__vector_11>
  30:	0c 94 f1 19 	jmp	0x33e2	; 0x33e2 <__vector_12>
  34:	0c 94 1d 26 	jmp	0x4c3a	; 0x4c3a <__vector_13>
  38:	0c 94 2f 26 	jmp	0x4c5e	; 0x4c5e <__vector_14>
  3c:	0c 94 c0 12 	jmp	0x2580	; 0x2580 <__vector_15>
  40:	0c 94 6f 15 	jmp	0x2ade	; 0x2ade <__vector_16>
  44:	0c 94 41 26 	jmp	0x4c82	; 0x4c82 <__vector_17>
  48:	0c 94 83 11 	jmp	0x2306	; 0x2306 <__vector_18>
  4c:	0c 94 53 26 	jmp	0x4ca6	; 0x4ca6 <__vector_19>
  50:	0c 94 2d 28 	jmp	0x505a	; 0x505a <__bad_interrupt>
  54:	0c 94 65 26 	jmp	0x4cca	; 0x4cca <__vector_21>
  58:	0c 94 e7 25 	jmp	0x4bce	; 0x4bce <__vector_22>
  5c:	0c 94 32 1c 	jmp	0x3864	; 0x3864 <__vector_23>
  60:	0c 94 74 22 	jmp	0x44e8	; 0x44e8 <__vector_24>
  64:	0c 94 77 26 	jmp	0x4cee	; 0x4cee <__vector_25>
  68:	0c 94 89 26 	jmp	0x4d12	; 0x4d12 <__vector_26>
  6c:	0c 94 93 19 	jmp	0x3326	; 0x3326 <__vector_27>
  70:	0c 94 4b 22 	jmp	0x4496	; 0x4496 <__vector_28>
  74:	0c 94 9b 26 	jmp	0x4d36	; 0x4d36 <__vector_29>
  78:	0c 94 ad 26 	jmp	0x4d5a	; 0x4d5a <__vector_30>

0000007c <.dinit>:
  7c:	01 00       	.word	0x0001	; ????
  7e:	01 02       	muls	r16, r17
  80:	80 01       	movw	r16, r0
  82:	04 09       	sbc	r16, r4
  84:	98 80       	ld	r9, Y

00000086 <__ctors_end>:
  86:	11 24       	eor	r1, r1
  88:	1f be       	out	0x3f, r1	; 63
  8a:	cf ef       	ldi	r28, 0xFF	; 255
  8c:	d0 e1       	ldi	r29, 0x10	; 16
  8e:	de bf       	out	0x3e, r29	; 62
  90:	cd bf       	out	0x3d, r28	; 61

00000092 <__do_copy_data>:
  92:	ec e7       	ldi	r30, 0x7C	; 124
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	40 e0       	ldi	r20, 0x00	; 0
  98:	17 c0       	rjmp	.+46     	; 0xc8 <__do_clear_bss+0x8>
  9a:	b5 91       	lpm	r27, Z+
  9c:	a5 91       	lpm	r26, Z+
  9e:	35 91       	lpm	r19, Z+
  a0:	25 91       	lpm	r18, Z+
  a2:	05 91       	lpm	r16, Z+
  a4:	07 fd       	sbrc	r16, 7
  a6:	0c c0       	rjmp	.+24     	; 0xc0 <__do_clear_bss>
  a8:	95 91       	lpm	r25, Z+
  aa:	85 91       	lpm	r24, Z+
  ac:	ef 01       	movw	r28, r30
  ae:	f9 2f       	mov	r31, r25
  b0:	e8 2f       	mov	r30, r24
  b2:	05 90       	lpm	r0, Z+
  b4:	0d 92       	st	X+, r0
  b6:	a2 17       	cp	r26, r18
  b8:	b3 07       	cpc	r27, r19
  ba:	d9 f7       	brne	.-10     	; 0xb2 <__do_copy_data+0x20>
  bc:	fe 01       	movw	r30, r28
  be:	04 c0       	rjmp	.+8      	; 0xc8 <__do_clear_bss+0x8>

000000c0 <__do_clear_bss>:
  c0:	1d 92       	st	X+, r1
  c2:	a2 17       	cp	r26, r18
  c4:	b3 07       	cpc	r27, r19
  c6:	e1 f7       	brne	.-8      	; 0xc0 <__do_clear_bss>
  c8:	e6 38       	cpi	r30, 0x86	; 134
  ca:	f4 07       	cpc	r31, r20
  cc:	31 f7       	brne	.-52     	; 0x9a <__do_copy_data+0x8>
  ce:	0e 94 0a 06 	call	0xc14	; 0xc14 <main>
  d2:	0c 94 82 27 	jmp	0x4f04	; 0x4f04 <exit>

000000d6 <_exit>:
  d6:	f8 94       	cli

000000d8 <__stop_program>:
  d8:	ff cf       	rjmp	.-2      	; 0xd8 <__stop_program>

Disassembly of section .text:

0000505a <__bad_interrupt>:
    505a:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.__vector_27:

00003326 <__vector_27>:

	// Disable the conversion complete interrupt
	ADCSRA &= (uint8_t)~(1 << ADIE);

	// Clear any pending interrupt	
	ADCSRA |= (1 << ADIF);
    3326:	78 94       	sei
    3328:	1f 92       	push	r1
    332a:	0f 92       	push	r0
    332c:	0f b6       	in	r0, 0x3f	; 63
    332e:	0f 92       	push	r0
    3330:	11 24       	eor	r1, r1
    3332:	2f 93       	push	r18
    3334:	3f 93       	push	r19
    3336:	4f 93       	push	r20
    3338:	5f 93       	push	r21
    333a:	6f 93       	push	r22
    333c:	7f 93       	push	r23
    333e:	8f 93       	push	r24
    3340:	9f 93       	push	r25
    3342:	af 93       	push	r26
    3344:	bf 93       	push	r27
    3346:	ef 93       	push	r30
    3348:	ff 93       	push	r31
    334a:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f0078>
    334e:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f0079>
    3352:	80 91 53 09 	lds	r24, 0x0953	; 0x800953 <sg_eCurrentType>
    3356:	91 e0       	ldi	r25, 0x01	; 1
    3358:	98 0f       	add	r25, r24
    335a:	90 93 53 09 	sts	0x0953, r25	; 0x800953 <sg_eCurrentType>
    335e:	95 30       	cpi	r25, 0x05	; 5
    3360:	10 f0       	brcs	.+4      	; 0x3366 <__vector_27+0x40>
    3362:	10 92 53 09 	sts	0x0953, r1	; 0x800953 <sg_eCurrentType>
    3366:	ac e7       	ldi	r26, 0x7C	; 124
    3368:	b0 e0       	ldi	r27, 0x00	; 0
    336a:	5c 91       	ld	r21, X
    336c:	20 91 53 09 	lds	r18, 0x0953	; 0x800953 <sg_eCurrentType>
    3370:	30 e0       	ldi	r19, 0x00	; 0
    3372:	f9 01       	movw	r30, r18
    3374:	ee 0f       	add	r30, r30
    3376:	ff 1f       	adc	r31, r31
    3378:	2e 0f       	add	r18, r30
    337a:	3f 1f       	adc	r19, r31
    337c:	03 2e       	mov	r0, r19
    337e:	00 0c       	add	r0, r0
    3380:	44 0b       	sbc	r20, r20
    3382:	26 5e       	subi	r18, 0xE6	; 230
    3384:	3c 4f       	sbci	r19, 0xFC	; 252
    3386:	4f 4f       	sbci	r20, 0xFF	; 255
    3388:	f9 01       	movw	r30, r18
    338a:	94 91       	lpm	r25, Z
    338c:	47 fd       	sbrc	r20, 7
    338e:	90 81       	ld	r25, Z
    3390:	50 7e       	andi	r21, 0xE0	; 224
    3392:	95 2b       	or	r25, r21
    3394:	90 6c       	ori	r25, 0xC0	; 192
    3396:	9c 93       	st	X, r25
    3398:	0e 94 d7 24 	call	0x49ae	; 0x49ae <ADCCallback>
    339c:	80 91 53 09 	lds	r24, 0x0953	; 0x800953 <sg_eCurrentType>
    33a0:	81 11       	cpse	r24, r1
    33a2:	09 c0       	rjmp	.+18     	; 0x33b6 <__vector_27+0x90>
    33a4:	ea e7       	ldi	r30, 0x7A	; 122
    33a6:	f0 e0       	ldi	r31, 0x00	; 0
    33a8:	80 81       	ld	r24, Z
    33aa:	87 7f       	andi	r24, 0xF7	; 247
    33ac:	80 83       	st	Z, r24
    33ae:	81 e0       	ldi	r24, 0x01	; 1
    33b0:	80 93 70 09 	sts	0x0970, r24	; 0x800970 <sg_eState>
    33b4:	05 c0       	rjmp	.+10     	; 0x33c0 <__vector_27+0x9a>
    33b6:	ea e7       	ldi	r30, 0x7A	; 122
    33b8:	f0 e0       	ldi	r31, 0x00	; 0
    33ba:	80 81       	ld	r24, Z
    33bc:	88 64       	ori	r24, 0x48	; 72
    33be:	80 83       	st	Z, r24
    33c0:	ff 91       	pop	r31
    33c2:	ef 91       	pop	r30
    33c4:	bf 91       	pop	r27
    33c6:	af 91       	pop	r26
    33c8:	9f 91       	pop	r25
    33ca:	8f 91       	pop	r24
    33cc:	7f 91       	pop	r23
    33ce:	6f 91       	pop	r22
    33d0:	5f 91       	pop	r21
    33d2:	4f 91       	pop	r20
    33d4:	3f 91       	pop	r19
    33d6:	2f 91       	pop	r18
    33d8:	0f 90       	pop	r0
    33da:	0f be       	out	0x3f, r0	; 63
    33dc:	0f 90       	pop	r0
    33de:	1f 90       	pop	r1
    33e0:	18 95       	reti

Disassembly of section .text.ADCSetPowerOn:

00005014 <ADCSetPowerOn>:
}

// Enable ADC
void ADCSetPowerOn( void )
{
	ADCSRA |= (1 << ADEN);
    5014:	ea e7       	ldi	r30, 0x7A	; 122
    5016:	f0 e0       	ldi	r31, 0x00	; 0
    5018:	80 81       	ld	r24, Z
    501a:	80 68       	ori	r24, 0x80	; 128
    501c:	80 83       	st	Z, r24
    501e:	08 95       	ret

Disassembly of section .text.ADCStartConversion:

00004a06 <ADCStartConversion>:
}

void ADCStartConversion(void)
{
	// Don't start anything if we're not idle
	if (EADCSTATE_IDLE != sg_eState)
    4a06:	80 91 70 09 	lds	r24, 0x0970	; 0x800970 <sg_eState>
    4a0a:	81 30       	cpi	r24, 0x01	; 1
    4a0c:	81 f4       	brne	.+32     	; 0x4a2e <ADCStartConversion+0x28>
	{
		return;
	}
	
	// Set back to the first channel
	sg_eCurrentType = EADCTYPE_FIRST;
    4a0e:	10 92 53 09 	sts	0x0953, r1	; 0x800953 <sg_eCurrentType>
	
	// Set the MUX
	ADMUX = (ADMUX & MUX_MASK) | (sg_sMuxSelectList[sg_eCurrentType].u8MuxSelect) | MUX_AREF;
    4a12:	ec e7       	ldi	r30, 0x7C	; 124
    4a14:	f0 e0       	ldi	r31, 0x00	; 0
    4a16:	80 81       	ld	r24, Z
    4a18:	80 7e       	andi	r24, 0xE0	; 224
    4a1a:	89 6c       	ori	r24, 0xC9	; 201
    4a1c:	80 83       	st	Z, r24
		
	sg_eState = EADCSTATE_READING;
    4a1e:	82 e0       	ldi	r24, 0x02	; 2
    4a20:	80 93 70 09 	sts	0x0970, r24	; 0x800970 <sg_eState>
	
	// Start a single conversion  - *dp run one at a time for now instead of continuous
	ADCSRA |= (1 << ADSC) | (1 << ADIE) | (1 << ADEN);  // turn power on if it isn't
    4a24:	ea e7       	ldi	r30, 0x7A	; 122
    4a26:	f0 e0       	ldi	r31, 0x00	; 0
    4a28:	80 81       	ld	r24, Z
    4a2a:	88 6c       	ori	r24, 0xC8	; 200
    4a2c:	80 83       	st	Z, r24
    4a2e:	08 95       	ret

Disassembly of section .text.ADCInit:

00002444 <ADCInit>:

	// Disable the conversion complete interrupt
	ADCSRA &= (uint8_t)~(1 << ADIE);

	// Clear any pending interrupt	
	ADCSRA |= (1 << ADIF);
    2444:	cf 93       	push	r28
    2446:	82 e0       	ldi	r24, 0x02	; 2
    2448:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f007a>
    244c:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
    2450:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7f0094>
    2454:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7f0095>
    2458:	10 92 96 00 	sts	0x0096, r1	; 0x800096 <__TEXT_REGION_LENGTH__+0x7f0096>
    245c:	10 92 97 00 	sts	0x0097, r1	; 0x800097 <__TEXT_REGION_LENGTH__+0x7f0097>
    2460:	80 ea       	ldi	r24, 0xA0	; 160
    2462:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f007b>
    2466:	c0 e0       	ldi	r28, 0x00	; 0
    2468:	83 c0       	rjmp	.+262    	; 0x2570 <ADCInit+0x12c>
    246a:	2c 2f       	mov	r18, r28
    246c:	30 e0       	ldi	r19, 0x00	; 0
    246e:	c9 01       	movw	r24, r18
    2470:	88 0f       	add	r24, r24
    2472:	99 1f       	adc	r25, r25
    2474:	82 0f       	add	r24, r18
    2476:	93 1f       	adc	r25, r19
    2478:	01 96       	adiw	r24, 0x01	; 1
    247a:	09 2e       	mov	r0, r25
    247c:	00 0c       	add	r0, r0
    247e:	aa 0b       	sbc	r26, r26
    2480:	86 5e       	subi	r24, 0xE6	; 230
    2482:	9c 4f       	sbci	r25, 0xFC	; 252
    2484:	af 4f       	sbci	r26, 0xFF	; 255
    2486:	fc 01       	movw	r30, r24
    2488:	84 91       	lpm	r24, Z
    248a:	a7 fd       	sbrc	r26, 7
    248c:	80 81       	ld	r24, Z
    248e:	81 30       	cpi	r24, 0x01	; 1
    2490:	41 f0       	breq	.+16     	; 0x24a2 <ADCInit+0x5e>
    2492:	08 f4       	brcc	.+2      	; 0x2496 <ADCInit+0x52>
    2494:	6c c0       	rjmp	.+216    	; 0x256e <ADCInit+0x12a>
    2496:	82 30       	cpi	r24, 0x02	; 2
    2498:	21 f1       	breq	.+72     	; 0x24e2 <ADCInit+0x9e>
    249a:	83 30       	cpi	r24, 0x03	; 3
    249c:	09 f4       	brne	.+2      	; 0x24a0 <ADCInit+0x5c>
    249e:	41 c0       	rjmp	.+130    	; 0x2522 <ADCInit+0xde>
    24a0:	5f c0       	rjmp	.+190    	; 0x2560 <ADCInit+0x11c>
    24a2:	54 b1       	in	r21, 0x04	; 4
    24a4:	c9 01       	movw	r24, r18
    24a6:	88 0f       	add	r24, r24
    24a8:	99 1f       	adc	r25, r25
    24aa:	28 0f       	add	r18, r24
    24ac:	39 1f       	adc	r19, r25
    24ae:	2e 5f       	subi	r18, 0xFE	; 254
    24b0:	3f 4f       	sbci	r19, 0xFF	; 255
    24b2:	03 2e       	mov	r0, r19
    24b4:	00 0c       	add	r0, r0
    24b6:	44 0b       	sbc	r20, r20
    24b8:	26 5e       	subi	r18, 0xE6	; 230
    24ba:	3c 4f       	sbci	r19, 0xFC	; 252
    24bc:	4f 4f       	sbci	r20, 0xFF	; 255
    24be:	f9 01       	movw	r30, r18
    24c0:	24 91       	lpm	r18, Z
    24c2:	47 fd       	sbrc	r20, 7
    24c4:	20 81       	ld	r18, Z
    24c6:	81 e0       	ldi	r24, 0x01	; 1
    24c8:	90 e0       	ldi	r25, 0x00	; 0
    24ca:	02 c0       	rjmp	.+4      	; 0x24d0 <ADCInit+0x8c>
    24cc:	88 0f       	add	r24, r24
    24ce:	99 1f       	adc	r25, r25
    24d0:	2a 95       	dec	r18
    24d2:	e2 f7       	brpl	.-8      	; 0x24cc <ADCInit+0x88>
    24d4:	80 95       	com	r24
    24d6:	58 23       	and	r21, r24
    24d8:	54 b9       	out	0x04, r21	; 4
    24da:	95 b1       	in	r25, 0x05	; 5
    24dc:	89 23       	and	r24, r25
    24de:	85 b9       	out	0x05, r24	; 5
    24e0:	46 c0       	rjmp	.+140    	; 0x256e <ADCInit+0x12a>
    24e2:	57 b1       	in	r21, 0x07	; 7
    24e4:	c9 01       	movw	r24, r18
    24e6:	88 0f       	add	r24, r24
    24e8:	99 1f       	adc	r25, r25
    24ea:	28 0f       	add	r18, r24
    24ec:	39 1f       	adc	r19, r25
    24ee:	2e 5f       	subi	r18, 0xFE	; 254
    24f0:	3f 4f       	sbci	r19, 0xFF	; 255
    24f2:	03 2e       	mov	r0, r19
    24f4:	00 0c       	add	r0, r0
    24f6:	44 0b       	sbc	r20, r20
    24f8:	26 5e       	subi	r18, 0xE6	; 230
    24fa:	3c 4f       	sbci	r19, 0xFC	; 252
    24fc:	4f 4f       	sbci	r20, 0xFF	; 255
    24fe:	f9 01       	movw	r30, r18
    2500:	24 91       	lpm	r18, Z
    2502:	47 fd       	sbrc	r20, 7
    2504:	20 81       	ld	r18, Z
    2506:	81 e0       	ldi	r24, 0x01	; 1
    2508:	90 e0       	ldi	r25, 0x00	; 0
    250a:	02 c0       	rjmp	.+4      	; 0x2510 <ADCInit+0xcc>
    250c:	88 0f       	add	r24, r24
    250e:	99 1f       	adc	r25, r25
    2510:	2a 95       	dec	r18
    2512:	e2 f7       	brpl	.-8      	; 0x250c <ADCInit+0xc8>
    2514:	80 95       	com	r24
    2516:	58 23       	and	r21, r24
    2518:	57 b9       	out	0x07, r21	; 7
    251a:	98 b1       	in	r25, 0x08	; 8
    251c:	89 23       	and	r24, r25
    251e:	88 b9       	out	0x08, r24	; 8
    2520:	26 c0       	rjmp	.+76     	; 0x256e <ADCInit+0x12a>
    2522:	4a b1       	in	r20, 0x0a	; 10
    2524:	c9 01       	movw	r24, r18
    2526:	88 0f       	add	r24, r24
    2528:	99 1f       	adc	r25, r25
    252a:	82 0f       	add	r24, r18
    252c:	93 1f       	adc	r25, r19
    252e:	02 96       	adiw	r24, 0x02	; 2
    2530:	09 2e       	mov	r0, r25
    2532:	00 0c       	add	r0, r0
    2534:	aa 0b       	sbc	r26, r26
    2536:	86 5e       	subi	r24, 0xE6	; 230
    2538:	9c 4f       	sbci	r25, 0xFC	; 252
    253a:	af 4f       	sbci	r26, 0xFF	; 255
    253c:	fc 01       	movw	r30, r24
    253e:	24 91       	lpm	r18, Z
    2540:	a7 fd       	sbrc	r26, 7
    2542:	20 81       	ld	r18, Z
    2544:	81 e0       	ldi	r24, 0x01	; 1
    2546:	90 e0       	ldi	r25, 0x00	; 0
    2548:	02 c0       	rjmp	.+4      	; 0x254e <ADCInit+0x10a>
    254a:	88 0f       	add	r24, r24
    254c:	99 1f       	adc	r25, r25
    254e:	2a 95       	dec	r18
    2550:	e2 f7       	brpl	.-8      	; 0x254a <ADCInit+0x106>
    2552:	80 95       	com	r24
    2554:	48 23       	and	r20, r24
    2556:	4a b9       	out	0x0a, r20	; 10
    2558:	9b b1       	in	r25, 0x0b	; 11
    255a:	89 23       	and	r24, r25
    255c:	8b b9       	out	0x0b, r24	; 11
    255e:	07 c0       	rjmp	.+14     	; 0x256e <ADCInit+0x12a>
    2560:	45 eb       	ldi	r20, 0xB5	; 181
    2562:	50 e0       	ldi	r21, 0x00	; 0
    2564:	61 e4       	ldi	r22, 0x41	; 65
    2566:	73 e0       	ldi	r23, 0x03	; 3
    2568:	80 e0       	ldi	r24, 0x00	; 0
    256a:	0e 94 c1 24 	call	0x4982	; 0x4982 <PlatformAssert>
    256e:	cf 5f       	subi	r28, 0xFF	; 255
    2570:	c5 30       	cpi	r28, 0x05	; 5
    2572:	08 f4       	brcc	.+2      	; 0x2576 <ADCInit+0x132>
    2574:	7a cf       	rjmp	.-268    	; 0x246a <ADCInit+0x26>
    2576:	81 e0       	ldi	r24, 0x01	; 1
    2578:	80 93 70 09 	sts	0x0970, r24	; 0x800970 <sg_eState>
    257c:	cf 91       	pop	r28
    257e:	08 95       	ret

Disassembly of section .text.CANLookupCommand:

0000401a <CANLookupCommand>:
	{PKT_MODULE_SET_TIME,		ECANMessageType_SetTime},
	{PKT_MODULE_MAX_STATE,		ECANMessageType_MaxState}
};

static ECANMessageType CANLookupCommand( uint16_t u16ID )
{
    401a:	cf 93       	push	r28
    401c:	df 93       	push	r29
    401e:	ec 01       	movw	r28, r24
	uint8_t u8Index = 0;
    4020:	90 e0       	ldi	r25, 0x00	; 0
	
	while( u8Index < (sizeof(sg_sRXCommandList)/sizeof(sg_sRXCommandList[0])) )
    4022:	26 c0       	rjmp	.+76     	; 0x4070 <CANLookupCommand+0x56>
	{
		if( sg_sRXCommandList[u8Index].u16ID == u16ID )
    4024:	a9 2f       	mov	r26, r25
    4026:	b0 e0       	ldi	r27, 0x00	; 0
    4028:	9d 01       	movw	r18, r26
    402a:	22 0f       	add	r18, r18
    402c:	33 1f       	adc	r19, r19
    402e:	2a 0f       	add	r18, r26
    4030:	3b 1f       	adc	r19, r27
    4032:	03 2e       	mov	r0, r19
    4034:	00 0c       	add	r0, r0
    4036:	44 0b       	sbc	r20, r20
    4038:	2b 52       	subi	r18, 0x2B	; 43
    403a:	3d 4f       	sbci	r19, 0xFD	; 253
    403c:	4f 4f       	sbci	r20, 0xFF	; 255
    403e:	f9 01       	movw	r30, r18
    4040:	54 2f       	mov	r21, r20
    4042:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <__xload_2>
    4046:	6c 17       	cp	r22, r28
    4048:	7d 07       	cpc	r23, r29
    404a:	89 f4       	brne	.+34     	; 0x406e <CANLookupCommand+0x54>
		{
			return( sg_sRXCommandList[u8Index].eType );
    404c:	cd 01       	movw	r24, r26
    404e:	88 0f       	add	r24, r24
    4050:	99 1f       	adc	r25, r25
    4052:	8a 0f       	add	r24, r26
    4054:	9b 1f       	adc	r25, r27
    4056:	02 96       	adiw	r24, 0x02	; 2
    4058:	09 2e       	mov	r0, r25
    405a:	00 0c       	add	r0, r0
    405c:	aa 0b       	sbc	r26, r26
    405e:	8b 52       	subi	r24, 0x2B	; 43
    4060:	9d 4f       	sbci	r25, 0xFD	; 253
    4062:	af 4f       	sbci	r26, 0xFF	; 255
    4064:	fc 01       	movw	r30, r24
    4066:	84 91       	lpm	r24, Z
    4068:	a7 fd       	sbrc	r26, 7
    406a:	80 81       	ld	r24, Z
    406c:	04 c0       	rjmp	.+8      	; 0x4076 <CANLookupCommand+0x5c>
		}
		
		u8Index++;
    406e:	9f 5f       	subi	r25, 0xFF	; 255

static ECANMessageType CANLookupCommand( uint16_t u16ID )
{
	uint8_t u8Index = 0;
	
	while( u8Index < (sizeof(sg_sRXCommandList)/sizeof(sg_sRXCommandList[0])) )
    4070:	9b 30       	cpi	r25, 0x0B	; 11
    4072:	c0 f2       	brcs	.-80     	; 0x4024 <CANLookupCommand+0xa>
		}
		
		u8Index++;
	}
	
	return( ECANMessageType_MAX );
    4074:	83 e1       	ldi	r24, 0x13	; 19
}
    4076:	df 91       	pop	r29
    4078:	cf 91       	pop	r28
    407a:	08 95       	ret

Disassembly of section .text.CANMOBSet:

00001aea <CANMOBSet>:
}

uint8_t CANGetTxBackoffDelay(void)
{
	return sg_u8TxBackoffDelay;
}
    1aea:	6f 92       	push	r6
    1aec:	7f 92       	push	r7
    1aee:	8f 92       	push	r8
    1af0:	9f 92       	push	r9
    1af2:	bf 92       	push	r11
    1af4:	cf 92       	push	r12
    1af6:	df 92       	push	r13
    1af8:	ef 92       	push	r14
    1afa:	ff 92       	push	r15
    1afc:	0f 93       	push	r16
    1afe:	1f 93       	push	r17
    1b00:	cf 93       	push	r28
    1b02:	df 93       	push	r29
    1b04:	f8 2e       	mov	r15, r24
    1b06:	6a 01       	movw	r12, r20
    1b08:	e6 2e       	mov	r14, r22
    1b0a:	e9 01       	movw	r28, r18
    1b0c:	0f 2e       	mov	r0, r31
    1b0e:	f5 e0       	ldi	r31, 0x05	; 5
    1b10:	6f 2e       	mov	r6, r31
    1b12:	f0 2d       	mov	r31, r0
    1b14:	68 16       	cp	r6, r24
    1b16:	38 f4       	brcc	.+14     	; 0x1b26 <CANMOBSet+0x3c>
    1b18:	4d ed       	ldi	r20, 0xDD	; 221
    1b1a:	50 e0       	ldi	r21, 0x00	; 0
    1b1c:	6c e4       	ldi	r22, 0x4C	; 76
    1b1e:	73 e0       	ldi	r23, 0x03	; 3
    1b20:	80 e0       	ldi	r24, 0x00	; 0
    1b22:	0e 94 c1 24 	call	0x4982	; 0x4982 <PlatformAssert>
    1b26:	09 30       	cpi	r16, 0x09	; 9
    1b28:	38 f0       	brcs	.+14     	; 0x1b38 <CANMOBSet+0x4e>
    1b2a:	4e ed       	ldi	r20, 0xDE	; 222
    1b2c:	50 e0       	ldi	r21, 0x00	; 0
    1b2e:	6c e4       	ldi	r22, 0x4C	; 76
    1b30:	73 e0       	ldi	r23, 0x03	; 3
    1b32:	80 e0       	ldi	r24, 0x00	; 0
    1b34:	0e 94 c1 24 	call	0x4982	; 0x4982 <PlatformAssert>
    1b38:	eb ed       	ldi	r30, 0xDB	; 219
    1b3a:	f0 e0       	ldi	r31, 0x00	; 0
    1b3c:	b0 80       	ld	r11, Z
    1b3e:	80 81       	ld	r24, Z
    1b40:	8f 77       	andi	r24, 0x7F	; 127
    1b42:	80 83       	st	Z, r24
    1b44:	8f 2d       	mov	r24, r15
    1b46:	82 95       	swap	r24
    1b48:	80 7f       	andi	r24, 0xF0	; 240
    1b4a:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f00ed>
    1b4e:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    1b52:	f6 01       	movw	r30, r12
    1b54:	84 91       	lpm	r24, Z
    1b56:	e7 fc       	sbrc	r14, 7
    1b58:	80 81       	ld	r24, Z
    1b5a:	20 e4       	ldi	r18, 0x40	; 64
    1b5c:	82 9f       	mul	r24, r18
    1b5e:	c0 01       	movw	r24, r0
    1b60:	11 24       	eor	r1, r1
    1b62:	10 2f       	mov	r17, r16
    1b64:	18 2b       	or	r17, r24
    1b66:	ae 2d       	mov	r26, r14
    1b68:	c6 01       	movw	r24, r12
    1b6a:	01 96       	adiw	r24, 0x01	; 1
    1b6c:	a1 1d       	adc	r26, r1
    1b6e:	fc 01       	movw	r30, r24
    1b70:	84 91       	lpm	r24, Z
    1b72:	a7 fd       	sbrc	r26, 7
    1b74:	80 81       	ld	r24, Z
    1b76:	81 11       	cpse	r24, r1
    1b78:	10 62       	ori	r17, 0x20	; 32
    1b7a:	10 61       	ori	r17, 0x10	; 16
    1b7c:	0e 94 2a 28 	call	0x5054	; 0x5054 <PlatformGetRegistrationID>
    1b80:	4e 2d       	mov	r20, r14
    1b82:	96 01       	movw	r18, r12
    1b84:	2e 5f       	subi	r18, 0xFE	; 254
    1b86:	3f 4f       	sbci	r19, 0xFF	; 255
    1b88:	4f 4f       	sbci	r20, 0xFF	; 255
    1b8a:	f9 01       	movw	r30, r18
    1b8c:	54 2f       	mov	r21, r20
    1b8e:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <__xload_2>
    1b92:	ab 01       	movw	r20, r22
    1b94:	57 70       	andi	r21, 0x07	; 7
    1b96:	60 e0       	ldi	r22, 0x00	; 0
    1b98:	70 e0       	ldi	r23, 0x00	; 0
    1b9a:	03 2e       	mov	r0, r19
    1b9c:	32 e1       	ldi	r19, 0x12	; 18
    1b9e:	44 0f       	add	r20, r20
    1ba0:	55 1f       	adc	r21, r21
    1ba2:	66 1f       	adc	r22, r22
    1ba4:	77 1f       	adc	r23, r23
    1ba6:	3a 95       	dec	r19
    1ba8:	d1 f7       	brne	.-12     	; 0x1b9e <CANMOBSet+0xb4>
    1baa:	30 2d       	mov	r19, r0
    1bac:	3a 01       	movw	r6, r20
    1bae:	4b 01       	movw	r8, r22
    1bb0:	68 2a       	or	r6, r24
    1bb2:	d4 01       	movw	r26, r8
    1bb4:	c3 01       	movw	r24, r6
    1bb6:	4e 2d       	mov	r20, r14
    1bb8:	96 01       	movw	r18, r12
    1bba:	2a 5f       	subi	r18, 0xFA	; 250
    1bbc:	3f 4f       	sbci	r19, 0xFF	; 255
    1bbe:	4f 4f       	sbci	r20, 0xFF	; 255
    1bc0:	f9 01       	movw	r30, r18
    1bc2:	24 91       	lpm	r18, Z
    1bc4:	47 fd       	sbrc	r20, 7
    1bc6:	20 81       	ld	r18, Z
    1bc8:	22 23       	and	r18, r18
    1bca:	11 f0       	breq	.+4      	; 0x1bd0 <CANMOBSet+0xe6>
    1bcc:	24 e0       	ldi	r18, 0x04	; 4
    1bce:	01 c0       	rjmp	.+2      	; 0x1bd2 <CANMOBSet+0xe8>
    1bd0:	20 e0       	ldi	r18, 0x00	; 0
    1bd2:	e0 ef       	ldi	r30, 0xF0	; 240
    1bd4:	f0 e0       	ldi	r31, 0x00	; 0
    1bd6:	20 83       	st	Z, r18
    1bd8:	20 81       	ld	r18, Z
    1bda:	38 2f       	mov	r19, r24
    1bdc:	33 0f       	add	r19, r19
    1bde:	33 0f       	add	r19, r19
    1be0:	33 0f       	add	r19, r19
    1be2:	23 2b       	or	r18, r19
    1be4:	20 83       	st	Z, r18
    1be6:	ac 01       	movw	r20, r24
    1be8:	bd 01       	movw	r22, r26
    1bea:	68 94       	set
    1bec:	14 f8       	bld	r1, 4
    1bee:	76 95       	lsr	r23
    1bf0:	67 95       	ror	r22
    1bf2:	57 95       	ror	r21
    1bf4:	47 95       	ror	r20
    1bf6:	16 94       	lsr	r1
    1bf8:	d1 f7       	brne	.-12     	; 0x1bee <CANMOBSet+0x104>
    1bfa:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f00f1>
    1bfe:	ac 01       	movw	r20, r24
    1c00:	bd 01       	movw	r22, r26
    1c02:	03 2e       	mov	r0, r19
    1c04:	3d e0       	ldi	r19, 0x0D	; 13
    1c06:	76 95       	lsr	r23
    1c08:	67 95       	ror	r22
    1c0a:	57 95       	ror	r21
    1c0c:	47 95       	ror	r20
    1c0e:	3a 95       	dec	r19
    1c10:	d1 f7       	brne	.-12     	; 0x1c06 <CANMOBSet+0x11c>
    1c12:	30 2d       	mov	r19, r0
    1c14:	40 93 f2 00 	sts	0x00F2, r20	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f00f2>
    1c18:	07 2e       	mov	r0, r23
    1c1a:	75 e1       	ldi	r23, 0x15	; 21
    1c1c:	b6 95       	lsr	r27
    1c1e:	a7 95       	ror	r26
    1c20:	97 95       	ror	r25
    1c22:	87 95       	ror	r24
    1c24:	7a 95       	dec	r23
    1c26:	d1 f7       	brne	.-12     	; 0x1c1c <CANMOBSet+0x132>
    1c28:	70 2d       	mov	r23, r0
    1c2a:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f00f3>
    1c2e:	ae 2d       	mov	r26, r14
    1c30:	c6 01       	movw	r24, r12
    1c32:	07 96       	adiw	r24, 0x07	; 7
    1c34:	a1 1d       	adc	r26, r1
    1c36:	fc 01       	movw	r30, r24
    1c38:	84 91       	lpm	r24, Z
    1c3a:	a7 fd       	sbrc	r26, 7
    1c3c:	80 81       	ld	r24, Z
    1c3e:	88 23       	and	r24, r24
    1c40:	11 f0       	breq	.+4      	; 0x1c46 <CANMOBSet+0x15c>
    1c42:	84 e0       	ldi	r24, 0x04	; 4
    1c44:	01 c0       	rjmp	.+2      	; 0x1c48 <CANMOBSet+0x15e>
    1c46:	80 e0       	ldi	r24, 0x00	; 0
    1c48:	e4 ef       	ldi	r30, 0xF4	; 244
    1c4a:	f0 e0       	ldi	r31, 0x00	; 0
    1c4c:	80 83       	st	Z, r24
    1c4e:	80 81       	ld	r24, Z
    1c50:	81 60       	ori	r24, 0x01	; 1
    1c52:	80 83       	st	Z, r24
    1c54:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7f00f5>
    1c58:	ae 2d       	mov	r26, r14
    1c5a:	c6 01       	movw	r24, r12
    1c5c:	04 96       	adiw	r24, 0x04	; 4
    1c5e:	a1 1d       	adc	r26, r1
    1c60:	fc 01       	movw	r30, r24
    1c62:	5a 2f       	mov	r21, r26
    1c64:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <__xload_2>
    1c68:	62 95       	swap	r22
    1c6a:	66 0f       	add	r22, r22
    1c6c:	60 7e       	andi	r22, 0xE0	; 224
    1c6e:	60 93 f6 00 	sts	0x00F6, r22	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7f00f6>
    1c72:	fc 01       	movw	r30, r24
    1c74:	5a 2f       	mov	r21, r26
    1c76:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <__xload_2>
    1c7a:	76 95       	lsr	r23
    1c7c:	67 95       	ror	r22
    1c7e:	76 95       	lsr	r23
    1c80:	67 95       	ror	r22
    1c82:	76 95       	lsr	r23
    1c84:	67 95       	ror	r22
    1c86:	60 93 f7 00 	sts	0x00F7, r22	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7f00f7>
    1c8a:	04 c0       	rjmp	.+8      	; 0x1c94 <CANMOBSet+0x1aa>
    1c8c:	89 91       	ld	r24, Y+
    1c8e:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
    1c92:	01 50       	subi	r16, 0x01	; 1
    1c94:	01 11       	cpse	r16, r1
    1c96:	fa cf       	rjmp	.-12     	; 0x1c8c <CANMOBSet+0x1a2>
    1c98:	10 93 ef 00 	sts	0x00EF, r17	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    1c9c:	f6 01       	movw	r30, r12
    1c9e:	84 91       	lpm	r24, Z
    1ca0:	e7 fc       	sbrc	r14, 7
    1ca2:	80 81       	ld	r24, Z
    1ca4:	88 23       	and	r24, r24
    1ca6:	69 f0       	breq	.+26     	; 0x1cc2 <CANMOBSet+0x1d8>
    1ca8:	ee ed       	ldi	r30, 0xDE	; 222
    1caa:	f0 e0       	ldi	r31, 0x00	; 0
    1cac:	20 81       	ld	r18, Z
    1cae:	81 e0       	ldi	r24, 0x01	; 1
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	02 c0       	rjmp	.+4      	; 0x1cb8 <CANMOBSet+0x1ce>
    1cb4:	88 0f       	add	r24, r24
    1cb6:	99 1f       	adc	r25, r25
    1cb8:	fa 94       	dec	r15
    1cba:	e2 f7       	brpl	.-8      	; 0x1cb4 <CANMOBSet+0x1ca>
    1cbc:	82 2b       	or	r24, r18
    1cbe:	80 83       	st	Z, r24
    1cc0:	0d c0       	rjmp	.+26     	; 0x1cdc <CANMOBSet+0x1f2>
    1cc2:	ee ed       	ldi	r30, 0xDE	; 222
    1cc4:	f0 e0       	ldi	r31, 0x00	; 0
    1cc6:	20 81       	ld	r18, Z
    1cc8:	81 e0       	ldi	r24, 0x01	; 1
    1cca:	90 e0       	ldi	r25, 0x00	; 0
    1ccc:	02 c0       	rjmp	.+4      	; 0x1cd2 <CANMOBSet+0x1e8>
    1cce:	88 0f       	add	r24, r24
    1cd0:	99 1f       	adc	r25, r25
    1cd2:	fa 94       	dec	r15
    1cd4:	e2 f7       	brpl	.-8      	; 0x1cce <CANMOBSet+0x1e4>
    1cd6:	80 95       	com	r24
    1cd8:	82 23       	and	r24, r18
    1cda:	80 83       	st	Z, r24
    1cdc:	b0 92 db 00 	sts	0x00DB, r11	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f00db>
    1ce0:	df 91       	pop	r29
    1ce2:	cf 91       	pop	r28
    1ce4:	1f 91       	pop	r17
    1ce6:	0f 91       	pop	r16
    1ce8:	ff 90       	pop	r15
    1cea:	ef 90       	pop	r14
    1cec:	df 90       	pop	r13
    1cee:	cf 90       	pop	r12
    1cf0:	bf 90       	pop	r11
    1cf2:	9f 90       	pop	r9
    1cf4:	8f 90       	pop	r8
    1cf6:	7f 90       	pop	r7
    1cf8:	6f 90       	pop	r6
    1cfa:	08 95       	ret

Disassembly of section .text.CANSendMessageInternal:

00001eba <CANSendMessageInternal>:
    1eba:	6f 92       	push	r6
    1ebc:	7f 92       	push	r7
    1ebe:	8f 92       	push	r8
    1ec0:	ef 92       	push	r14
    1ec2:	ff 92       	push	r15
    1ec4:	0f 93       	push	r16
    1ec6:	cf 93       	push	r28
    1ec8:	df 93       	push	r29
    1eca:	c8 2f       	mov	r28, r24
    1ecc:	7b 01       	movw	r14, r22
    1ece:	04 2f       	mov	r16, r20
    1ed0:	d2 2f       	mov	r29, r18
    1ed2:	88 23       	and	r24, r24
    1ed4:	f9 f0       	breq	.+62     	; 0x1f14 <CANSendMessageInternal+0x5a>
    1ed6:	81 30       	cpi	r24, 0x01	; 1
    1ed8:	31 f1       	breq	.+76     	; 0x1f26 <CANSendMessageInternal+0x6c>
    1eda:	82 30       	cpi	r24, 0x02	; 2
    1edc:	69 f1       	breq	.+90     	; 0x1f38 <CANSendMessageInternal+0x7e>
    1ede:	83 30       	cpi	r24, 0x03	; 3
    1ee0:	a1 f1       	breq	.+104    	; 0x1f4a <CANSendMessageInternal+0x90>
    1ee2:	86 30       	cpi	r24, 0x06	; 6
    1ee4:	d9 f1       	breq	.+118    	; 0x1f5c <CANSendMessageInternal+0xa2>
    1ee6:	87 30       	cpi	r24, 0x07	; 7
    1ee8:	09 f4       	brne	.+2      	; 0x1eec <CANSendMessageInternal+0x32>
    1eea:	41 c0       	rjmp	.+130    	; 0x1f6e <CANSendMessageInternal+0xb4>
    1eec:	85 30       	cpi	r24, 0x05	; 5
    1eee:	09 f4       	brne	.+2      	; 0x1ef2 <CANSendMessageInternal+0x38>
    1ef0:	47 c0       	rjmp	.+142    	; 0x1f80 <CANSendMessageInternal+0xc6>
    1ef2:	84 30       	cpi	r24, 0x04	; 4
    1ef4:	09 f4       	brne	.+2      	; 0x1ef8 <CANSendMessageInternal+0x3e>
    1ef6:	4d c0       	rjmp	.+154    	; 0x1f92 <CANSendMessageInternal+0xd8>
    1ef8:	88 30       	cpi	r24, 0x08	; 8
    1efa:	09 f4       	brne	.+2      	; 0x1efe <CANSendMessageInternal+0x44>
    1efc:	53 c0       	rjmp	.+166    	; 0x1fa4 <CANSendMessageInternal+0xea>
    1efe:	40 e5       	ldi	r20, 0x50	; 80
    1f00:	51 e0       	ldi	r21, 0x01	; 1
    1f02:	6c e4       	ldi	r22, 0x4C	; 76
    1f04:	73 e0       	ldi	r23, 0x03	; 3
    1f06:	80 e0       	ldi	r24, 0x00	; 0
    1f08:	0e 94 c1 24 	call	0x4982	; 0x4982 <PlatformAssert>
    1f0c:	61 2c       	mov	r6, r1
    1f0e:	71 2c       	mov	r7, r1
    1f10:	81 2c       	mov	r8, r1
    1f12:	50 c0       	rjmp	.+160    	; 0x1fb4 <CANSendMessageInternal+0xfa>
    1f14:	0f 2e       	mov	r0, r31
    1f16:	f7 e9       	ldi	r31, 0x97	; 151
    1f18:	6f 2e       	mov	r6, r31
    1f1a:	f3 e0       	ldi	r31, 0x03	; 3
    1f1c:	7f 2e       	mov	r7, r31
    1f1e:	f0 e0       	ldi	r31, 0x00	; 0
    1f20:	8f 2e       	mov	r8, r31
    1f22:	f0 2d       	mov	r31, r0
    1f24:	47 c0       	rjmp	.+142    	; 0x1fb4 <CANSendMessageInternal+0xfa>
    1f26:	0f 2e       	mov	r0, r31
    1f28:	ff e8       	ldi	r31, 0x8F	; 143
    1f2a:	6f 2e       	mov	r6, r31
    1f2c:	f3 e0       	ldi	r31, 0x03	; 3
    1f2e:	7f 2e       	mov	r7, r31
    1f30:	f0 e0       	ldi	r31, 0x00	; 0
    1f32:	8f 2e       	mov	r8, r31
    1f34:	f0 2d       	mov	r31, r0
    1f36:	3e c0       	rjmp	.+124    	; 0x1fb4 <CANSendMessageInternal+0xfa>
    1f38:	0f 2e       	mov	r0, r31
    1f3a:	f7 e8       	ldi	r31, 0x87	; 135
    1f3c:	6f 2e       	mov	r6, r31
    1f3e:	f3 e0       	ldi	r31, 0x03	; 3
    1f40:	7f 2e       	mov	r7, r31
    1f42:	f0 e0       	ldi	r31, 0x00	; 0
    1f44:	8f 2e       	mov	r8, r31
    1f46:	f0 2d       	mov	r31, r0
    1f48:	35 c0       	rjmp	.+106    	; 0x1fb4 <CANSendMessageInternal+0xfa>
    1f4a:	0f 2e       	mov	r0, r31
    1f4c:	ff e7       	ldi	r31, 0x7F	; 127
    1f4e:	6f 2e       	mov	r6, r31
    1f50:	f3 e0       	ldi	r31, 0x03	; 3
    1f52:	7f 2e       	mov	r7, r31
    1f54:	f0 e0       	ldi	r31, 0x00	; 0
    1f56:	8f 2e       	mov	r8, r31
    1f58:	f0 2d       	mov	r31, r0
    1f5a:	2c c0       	rjmp	.+88     	; 0x1fb4 <CANSendMessageInternal+0xfa>
    1f5c:	0f 2e       	mov	r0, r31
    1f5e:	f7 e7       	ldi	r31, 0x77	; 119
    1f60:	6f 2e       	mov	r6, r31
    1f62:	f3 e0       	ldi	r31, 0x03	; 3
    1f64:	7f 2e       	mov	r7, r31
    1f66:	f0 e0       	ldi	r31, 0x00	; 0
    1f68:	8f 2e       	mov	r8, r31
    1f6a:	f0 2d       	mov	r31, r0
    1f6c:	23 c0       	rjmp	.+70     	; 0x1fb4 <CANSendMessageInternal+0xfa>
    1f6e:	0f 2e       	mov	r0, r31
    1f70:	ff e6       	ldi	r31, 0x6F	; 111
    1f72:	6f 2e       	mov	r6, r31
    1f74:	f3 e0       	ldi	r31, 0x03	; 3
    1f76:	7f 2e       	mov	r7, r31
    1f78:	f0 e0       	ldi	r31, 0x00	; 0
    1f7a:	8f 2e       	mov	r8, r31
    1f7c:	f0 2d       	mov	r31, r0
    1f7e:	1a c0       	rjmp	.+52     	; 0x1fb4 <CANSendMessageInternal+0xfa>
    1f80:	0f 2e       	mov	r0, r31
    1f82:	ff e5       	ldi	r31, 0x5F	; 95
    1f84:	6f 2e       	mov	r6, r31
    1f86:	f3 e0       	ldi	r31, 0x03	; 3
    1f88:	7f 2e       	mov	r7, r31
    1f8a:	f0 e0       	ldi	r31, 0x00	; 0
    1f8c:	8f 2e       	mov	r8, r31
    1f8e:	f0 2d       	mov	r31, r0
    1f90:	11 c0       	rjmp	.+34     	; 0x1fb4 <CANSendMessageInternal+0xfa>
    1f92:	0f 2e       	mov	r0, r31
    1f94:	f7 e6       	ldi	r31, 0x67	; 103
    1f96:	6f 2e       	mov	r6, r31
    1f98:	f3 e0       	ldi	r31, 0x03	; 3
    1f9a:	7f 2e       	mov	r7, r31
    1f9c:	f0 e0       	ldi	r31, 0x00	; 0
    1f9e:	8f 2e       	mov	r8, r31
    1fa0:	f0 2d       	mov	r31, r0
    1fa2:	08 c0       	rjmp	.+16     	; 0x1fb4 <CANSendMessageInternal+0xfa>
    1fa4:	0f 2e       	mov	r0, r31
    1fa6:	f7 e5       	ldi	r31, 0x57	; 87
    1fa8:	6f 2e       	mov	r6, r31
    1faa:	f3 e0       	ldi	r31, 0x03	; 3
    1fac:	7f 2e       	mov	r7, r31
    1fae:	f0 e0       	ldi	r31, 0x00	; 0
    1fb0:	8f 2e       	mov	r8, r31
    1fb2:	f0 2d       	mov	r31, r0
    1fb4:	dd 23       	and	r29, r29
    1fb6:	21 f0       	breq	.+8      	; 0x1fc0 <CANSendMessageInternal+0x106>
    1fb8:	80 91 76 09 	lds	r24, 0x0976	; 0x800976 <sg_bInRetransmit>
    1fbc:	81 11       	cpse	r24, r1
    1fbe:	34 c0       	rjmp	.+104    	; 0x2028 <CANSendMessageInternal+0x16e>
    1fc0:	d1 11       	cpse	r29, r1
    1fc2:	04 c0       	rjmp	.+8      	; 0x1fcc <CANSendMessageInternal+0x112>
    1fc4:	80 91 7a 09 	lds	r24, 0x097A	; 0x80097a <sg_u8Busy>
    1fc8:	81 11       	cpse	r24, r1
    1fca:	2e c0       	rjmp	.+92     	; 0x2028 <CANSendMessageInternal+0x16e>
    1fcc:	80 91 7a 09 	lds	r24, 0x097A	; 0x80097a <sg_u8Busy>
    1fd0:	81 11       	cpse	r24, r1
    1fd2:	03 c0       	rjmp	.+6      	; 0x1fda <CANSendMessageInternal+0x120>
    1fd4:	82 e0       	ldi	r24, 0x02	; 2
    1fd6:	80 93 7a 09 	sts	0x097A, r24	; 0x80097a <sg_u8Busy>
    1fda:	d1 11       	cpse	r29, r1
    1fdc:	1a c0       	rjmp	.+52     	; 0x2012 <CANSendMessageInternal+0x158>
    1fde:	10 92 79 09 	sts	0x0979, r1	; 0x800979 <sg_u8TransmitAttempts>
    1fe2:	c0 93 78 09 	sts	0x0978, r28	; 0x800978 <sg_eLastTXType>
    1fe6:	09 30       	cpi	r16, 0x09	; 9
    1fe8:	38 f0       	brcs	.+14     	; 0x1ff8 <CANSendMessageInternal+0x13e>
    1fea:	45 e6       	ldi	r20, 0x65	; 101
    1fec:	51 e0       	ldi	r21, 0x01	; 1
    1fee:	6c e4       	ldi	r22, 0x4C	; 76
    1ff0:	73 e0       	ldi	r23, 0x03	; 3
    1ff2:	80 e0       	ldi	r24, 0x00	; 0
    1ff4:	0e 94 c1 24 	call	0x4982	; 0x4982 <PlatformAssert>
    1ff8:	20 2f       	mov	r18, r16
    1ffa:	30 e0       	ldi	r19, 0x00	; 0
    1ffc:	c7 01       	movw	r24, r14
    1ffe:	a0 e8       	ldi	r26, 0x80	; 128
    2000:	ac 01       	movw	r20, r24
    2002:	6a 2f       	mov	r22, r26
    2004:	81 e4       	ldi	r24, 0x41	; 65
    2006:	99 e0       	ldi	r25, 0x09	; 9
    2008:	0e 94 4e 24 	call	0x489c	; 0x489c <memcpy>
    200c:	00 93 77 09 	sts	0x0977, r16	; 0x800977 <sg_u8LastTXDataLen>
    2010:	05 c0       	rjmp	.+10     	; 0x201c <CANSendMessageInternal+0x162>
    2012:	80 91 79 09 	lds	r24, 0x0979	; 0x800979 <sg_u8TransmitAttempts>
    2016:	8f 5f       	subi	r24, 0xFF	; 255
    2018:	80 93 79 09 	sts	0x0979, r24	; 0x800979 <sg_u8TransmitAttempts>
    201c:	97 01       	movw	r18, r14
    201e:	68 2d       	mov	r22, r8
    2020:	a3 01       	movw	r20, r6
    2022:	81 e0       	ldi	r24, 0x01	; 1
    2024:	0e 94 75 0d 	call	0x1aea	; 0x1aea <CANMOBSet>
    2028:	df 91       	pop	r29
    202a:	cf 91       	pop	r28
    202c:	0f 91       	pop	r16
    202e:	ff 90       	pop	r15
    2030:	ef 90       	pop	r14
    2032:	8f 90       	pop	r8
    2034:	7f 90       	pop	r7
    2036:	6f 90       	pop	r6
    2038:	08 95       	ret

Disassembly of section .text.CANMOBInterrupt:

0000203a <CANMOBInterrupt>:
    203a:	cf 92       	push	r12
    203c:	df 92       	push	r13
    203e:	ff 92       	push	r15
    2040:	0f 93       	push	r16
    2042:	1f 93       	push	r17
    2044:	cf 93       	push	r28
    2046:	df 93       	push	r29
    2048:	cd b7       	in	r28, 0x3d	; 61
    204a:	de b7       	in	r29, 0x3e	; 62
    204c:	28 97       	sbiw	r28, 0x08	; 8
    204e:	0f b6       	in	r0, 0x3f	; 63
    2050:	f8 94       	cli
    2052:	de bf       	out	0x3e, r29	; 62
    2054:	0f be       	out	0x3f, r0	; 63
    2056:	cd bf       	out	0x3d, r28	; 61
    2058:	98 2f       	mov	r25, r24
    205a:	92 95       	swap	r25
    205c:	90 7f       	andi	r25, 0xF0	; 240
    205e:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f00ed>
    2062:	ee ed       	ldi	r30, 0xDE	; 222
    2064:	f0 e0       	ldi	r31, 0x00	; 0
    2066:	20 81       	ld	r18, Z
    2068:	01 e0       	ldi	r16, 0x01	; 1
    206a:	10 e0       	ldi	r17, 0x00	; 0
    206c:	08 2e       	mov	r0, r24
    206e:	02 c0       	rjmp	.+4      	; 0x2074 <CANMOBInterrupt+0x3a>
    2070:	00 0f       	add	r16, r16
    2072:	11 1f       	adc	r17, r17
    2074:	0a 94       	dec	r0
    2076:	e2 f7       	brpl	.-8      	; 0x2070 <CANMOBInterrupt+0x36>
    2078:	90 2f       	mov	r25, r16
    207a:	90 95       	com	r25
    207c:	92 23       	and	r25, r18
    207e:	90 83       	st	Z, r25
    2080:	ef ee       	ldi	r30, 0xEF	; 239
    2082:	f0 e0       	ldi	r31, 0x00	; 0
    2084:	90 81       	ld	r25, Z
    2086:	9f 73       	andi	r25, 0x3F	; 63
    2088:	90 83       	st	Z, r25
    208a:	81 11       	cpse	r24, r1
    208c:	50 c0       	rjmp	.+160    	; 0x212e <CANMOBInterrupt+0xf4>
    208e:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    2092:	85 ff       	sbrs	r24, 5
    2094:	38 c0       	rjmp	.+112    	; 0x2106 <CANMOBInterrupt+0xcc>
    2096:	ee ee       	ldi	r30, 0xEE	; 238
    2098:	f0 e0       	ldi	r31, 0x00	; 0
    209a:	80 81       	ld	r24, Z
    209c:	8f 7d       	andi	r24, 0xDF	; 223
    209e:	80 83       	st	Z, r24
    20a0:	c0 90 68 09 	lds	r12, 0x0968	; 0x800968 <sg_pfRXCallback>
    20a4:	d0 90 69 09 	lds	r13, 0x0969	; 0x800969 <sg_pfRXCallback+0x1>
    20a8:	c1 14       	cp	r12, r1
    20aa:	d1 04       	cpc	r13, r1
    20ac:	61 f1       	breq	.+88     	; 0x2106 <CANMOBInterrupt+0xcc>
    20ae:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    20b2:	8f 70       	andi	r24, 0x0F	; 15
    20b4:	f8 2e       	mov	r15, r24
    20b6:	40 91 f3 00 	lds	r20, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f00f3>
    20ba:	50 e0       	ldi	r21, 0x00	; 0
    20bc:	44 0f       	add	r20, r20
    20be:	55 1f       	adc	r21, r21
    20c0:	44 0f       	add	r20, r20
    20c2:	55 1f       	adc	r21, r21
    20c4:	44 0f       	add	r20, r20
    20c6:	55 1f       	adc	r21, r21
    20c8:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f00f2>
    20cc:	82 95       	swap	r24
    20ce:	86 95       	lsr	r24
    20d0:	87 70       	andi	r24, 0x07	; 7
    20d2:	48 2b       	or	r20, r24
    20d4:	90 e0       	ldi	r25, 0x00	; 0
    20d6:	0a c0       	rjmp	.+20     	; 0x20ec <CANMOBInterrupt+0xb2>
    20d8:	20 91 fa 00 	lds	r18, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
    20dc:	e1 e0       	ldi	r30, 0x01	; 1
    20de:	f0 e0       	ldi	r31, 0x00	; 0
    20e0:	ec 0f       	add	r30, r28
    20e2:	fd 1f       	adc	r31, r29
    20e4:	e9 0f       	add	r30, r25
    20e6:	f1 1d       	adc	r31, r1
    20e8:	20 83       	st	Z, r18
    20ea:	9f 5f       	subi	r25, 0xFF	; 255
    20ec:	9f 15       	cp	r25, r15
    20ee:	a0 f3       	brcs	.-24     	; 0x20d8 <CANMOBInterrupt+0x9e>
    20f0:	ca 01       	movw	r24, r20
    20f2:	0e 94 0d 20 	call	0x401a	; 0x401a <CANLookupCommand>
    20f6:	83 31       	cpi	r24, 0x13	; 19
    20f8:	31 f0       	breq	.+12     	; 0x2106 <CANMOBInterrupt+0xcc>
    20fa:	4f 2d       	mov	r20, r15
    20fc:	be 01       	movw	r22, r28
    20fe:	6f 5f       	subi	r22, 0xFF	; 255
    2100:	7f 4f       	sbci	r23, 0xFF	; 255
    2102:	f6 01       	movw	r30, r12
    2104:	09 95       	icall
    2106:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    210a:	8e 70       	andi	r24, 0x0E	; 14
    210c:	29 f0       	breq	.+10     	; 0x2118 <CANMOBInterrupt+0xde>
    210e:	ee ee       	ldi	r30, 0xEE	; 238
    2110:	f0 e0       	ldi	r31, 0x00	; 0
    2112:	80 81       	ld	r24, Z
    2114:	81 7f       	andi	r24, 0xF1	; 241
    2116:	80 83       	st	Z, r24
    2118:	ee ed       	ldi	r30, 0xDE	; 222
    211a:	f0 e0       	ldi	r31, 0x00	; 0
    211c:	80 81       	ld	r24, Z
    211e:	08 2b       	or	r16, r24
    2120:	00 83       	st	Z, r16
    2122:	ef ee       	ldi	r30, 0xEF	; 239
    2124:	f0 e0       	ldi	r31, 0x00	; 0
    2126:	80 81       	ld	r24, Z
    2128:	80 68       	ori	r24, 0x80	; 128
    212a:	80 83       	st	Z, r24
    212c:	2b c0       	rjmp	.+86     	; 0x2184 <CANMOBInterrupt+0x14a>
    212e:	81 30       	cpi	r24, 0x01	; 1
    2130:	49 f5       	brne	.+82     	; 0x2184 <CANMOBInterrupt+0x14a>
    2132:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    2136:	86 ff       	sbrs	r24, 6
    2138:	07 c0       	rjmp	.+14     	; 0x2148 <CANMOBInterrupt+0x10e>
    213a:	ee ee       	ldi	r30, 0xEE	; 238
    213c:	f0 e0       	ldi	r31, 0x00	; 0
    213e:	80 81       	ld	r24, Z
    2140:	8f 7b       	andi	r24, 0xBF	; 191
    2142:	80 83       	st	Z, r24
    2144:	10 92 7a 09 	sts	0x097A, r1	; 0x80097a <sg_u8Busy>
    2148:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    214c:	89 71       	andi	r24, 0x19	; 25
    214e:	d1 f0       	breq	.+52     	; 0x2184 <CANMOBInterrupt+0x14a>
    2150:	ee ee       	ldi	r30, 0xEE	; 238
    2152:	f0 e0       	ldi	r31, 0x00	; 0
    2154:	80 81       	ld	r24, Z
    2156:	86 7e       	andi	r24, 0xE6	; 230
    2158:	80 83       	st	Z, r24
    215a:	80 91 79 09 	lds	r24, 0x0979	; 0x800979 <sg_u8TransmitAttempts>
    215e:	84 31       	cpi	r24, 0x14	; 20
    2160:	68 f4       	brcc	.+26     	; 0x217c <CANMOBInterrupt+0x142>
    2162:	81 e0       	ldi	r24, 0x01	; 1
    2164:	80 93 76 09 	sts	0x0976, r24	; 0x800976 <sg_bInRetransmit>
    2168:	21 e0       	ldi	r18, 0x01	; 1
    216a:	40 91 77 09 	lds	r20, 0x0977	; 0x800977 <sg_u8LastTXDataLen>
    216e:	61 e4       	ldi	r22, 0x41	; 65
    2170:	79 e0       	ldi	r23, 0x09	; 9
    2172:	80 91 78 09 	lds	r24, 0x0978	; 0x800978 <sg_eLastTXType>
    2176:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <CANSendMessageInternal>
    217a:	04 c0       	rjmp	.+8      	; 0x2184 <CANMOBInterrupt+0x14a>
    217c:	10 92 7a 09 	sts	0x097A, r1	; 0x80097a <sg_u8Busy>
    2180:	10 92 76 09 	sts	0x0976, r1	; 0x800976 <sg_bInRetransmit>
    2184:	28 96       	adiw	r28, 0x08	; 8
    2186:	0f b6       	in	r0, 0x3f	; 63
    2188:	f8 94       	cli
    218a:	de bf       	out	0x3e, r29	; 62
    218c:	0f be       	out	0x3f, r0	; 63
    218e:	cd bf       	out	0x3d, r28	; 61
    2190:	df 91       	pop	r29
    2192:	cf 91       	pop	r28
    2194:	1f 91       	pop	r17
    2196:	0f 91       	pop	r16
    2198:	ff 90       	pop	r15
    219a:	df 90       	pop	r13
    219c:	cf 90       	pop	r12
    219e:	08 95       	ret

Disassembly of section .text.__vector_18:

00002306 <__vector_18>:
    2306:	1f 92       	push	r1
    2308:	0f 92       	push	r0
    230a:	0f b6       	in	r0, 0x3f	; 63
    230c:	0f 92       	push	r0
    230e:	11 24       	eor	r1, r1
    2310:	0f 93       	push	r16
    2312:	1f 93       	push	r17
    2314:	2f 93       	push	r18
    2316:	3f 93       	push	r19
    2318:	4f 93       	push	r20
    231a:	5f 93       	push	r21
    231c:	6f 93       	push	r22
    231e:	7f 93       	push	r23
    2320:	8f 93       	push	r24
    2322:	9f 93       	push	r25
    2324:	af 93       	push	r26
    2326:	bf 93       	push	r27
    2328:	cf 93       	push	r28
    232a:	df 93       	push	r29
    232c:	ef 93       	push	r30
    232e:	ff 93       	push	r31
    2330:	eb ed       	ldi	r30, 0xDB	; 219
    2332:	f0 e0       	ldi	r31, 0x00	; 0
    2334:	d0 81       	ld	r29, Z
    2336:	10 91 de 00 	lds	r17, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7f00de>
    233a:	80 81       	ld	r24, Z
    233c:	8f 77       	andi	r24, 0x7F	; 127
    233e:	80 83       	st	Z, r24
    2340:	c0 91 e0 00 	lds	r28, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f00e0>
    2344:	c0 ff       	sbrs	r28, 0
    2346:	0c c0       	rjmp	.+24     	; 0x2360 <__vector_18+0x5a>
    2348:	80 e0       	ldi	r24, 0x00	; 0
    234a:	0e 94 1d 10 	call	0x203a	; 0x203a <CANMOBInterrupt>
    234e:	00 e0       	ldi	r16, 0x00	; 0
    2350:	20 e0       	ldi	r18, 0x00	; 0
    2352:	30 e0       	ldi	r19, 0x00	; 0
    2354:	4f e9       	ldi	r20, 0x9F	; 159
    2356:	53 e0       	ldi	r21, 0x03	; 3
    2358:	60 e0       	ldi	r22, 0x00	; 0
    235a:	80 e0       	ldi	r24, 0x00	; 0
    235c:	0e 94 75 0d 	call	0x1aea	; 0x1aea <CANMOBSet>
    2360:	c1 ff       	sbrs	r28, 1
    2362:	03 c0       	rjmp	.+6      	; 0x236a <__vector_18+0x64>
    2364:	81 e0       	ldi	r24, 0x01	; 1
    2366:	0e 94 1d 10 	call	0x203a	; 0x203a <CANMOBInterrupt>
    236a:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    236e:	86 ff       	sbrs	r24, 6
    2370:	16 c0       	rjmp	.+44     	; 0x239e <__vector_18+0x98>
    2372:	80 e4       	ldi	r24, 0x40	; 64
    2374:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    2378:	80 91 60 09 	lds	r24, 0x0960	; 0x800960 <sg_u16BusOffEvents>
    237c:	90 91 61 09 	lds	r25, 0x0961	; 0x800961 <sg_u16BusOffEvents+0x1>
    2380:	01 96       	adiw	r24, 0x01	; 1
    2382:	90 93 61 09 	sts	0x0961, r25	; 0x800961 <sg_u16BusOffEvents+0x1>
    2386:	80 93 60 09 	sts	0x0960, r24	; 0x800960 <sg_u16BusOffEvents>
    238a:	82 e0       	ldi	r24, 0x02	; 2
    238c:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f00d8>
    2390:	10 92 7a 09 	sts	0x097A, r1	; 0x80097a <sg_u8Busy>
    2394:	10 92 76 09 	sts	0x0976, r1	; 0x800976 <sg_bInRetransmit>
    2398:	8a e0       	ldi	r24, 0x0A	; 10
    239a:	80 93 75 09 	sts	0x0975, r24	; 0x800975 <sg_u8BusOffRecoveryDelay>
    239e:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    23a2:	84 ff       	sbrs	r24, 4
    23a4:	0a c0       	rjmp	.+20     	; 0x23ba <__vector_18+0xb4>
    23a6:	45 e4       	ldi	r20, 0x45	; 69
    23a8:	52 e0       	ldi	r21, 0x02	; 2
    23aa:	6c e4       	ldi	r22, 0x4C	; 76
    23ac:	73 e0       	ldi	r23, 0x03	; 3
    23ae:	80 e0       	ldi	r24, 0x00	; 0
    23b0:	0e 94 c1 24 	call	0x4982	; 0x4982 <PlatformAssert>
    23b4:	80 e1       	ldi	r24, 0x10	; 16
    23b6:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    23ba:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    23be:	83 ff       	sbrs	r24, 3
    23c0:	03 c0       	rjmp	.+6      	; 0x23c8 <__vector_18+0xc2>
    23c2:	88 e0       	ldi	r24, 0x08	; 8
    23c4:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    23c8:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    23cc:	82 ff       	sbrs	r24, 2
    23ce:	03 c0       	rjmp	.+6      	; 0x23d6 <__vector_18+0xd0>
    23d0:	84 e0       	ldi	r24, 0x04	; 4
    23d2:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    23d6:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    23da:	81 ff       	sbrs	r24, 1
    23dc:	03 c0       	rjmp	.+6      	; 0x23e4 <__vector_18+0xde>
    23de:	82 e0       	ldi	r24, 0x02	; 2
    23e0:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    23e4:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    23e8:	80 ff       	sbrs	r24, 0
    23ea:	13 c0       	rjmp	.+38     	; 0x2412 <__vector_18+0x10c>
    23ec:	81 e0       	ldi	r24, 0x01	; 1
    23ee:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    23f2:	80 91 79 09 	lds	r24, 0x0979	; 0x800979 <sg_u8TransmitAttempts>
    23f6:	84 31       	cpi	r24, 0x14	; 20
    23f8:	50 f4       	brcc	.+20     	; 0x240e <__vector_18+0x108>
    23fa:	21 e0       	ldi	r18, 0x01	; 1
    23fc:	40 91 77 09 	lds	r20, 0x0977	; 0x800977 <sg_u8LastTXDataLen>
    2400:	61 e4       	ldi	r22, 0x41	; 65
    2402:	79 e0       	ldi	r23, 0x09	; 9
    2404:	80 91 78 09 	lds	r24, 0x0978	; 0x800978 <sg_eLastTXType>
    2408:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <CANSendMessageInternal>
    240c:	02 c0       	rjmp	.+4      	; 0x2412 <__vector_18+0x10c>
    240e:	10 92 7a 09 	sts	0x097A, r1	; 0x80097a <sg_u8Busy>
    2412:	10 93 de 00 	sts	0x00DE, r17	; 0x8000de <__TEXT_REGION_LENGTH__+0x7f00de>
    2416:	d0 93 db 00 	sts	0x00DB, r29	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f00db>
    241a:	ff 91       	pop	r31
    241c:	ef 91       	pop	r30
    241e:	df 91       	pop	r29
    2420:	cf 91       	pop	r28
    2422:	bf 91       	pop	r27
    2424:	af 91       	pop	r26
    2426:	9f 91       	pop	r25
    2428:	8f 91       	pop	r24
    242a:	7f 91       	pop	r23
    242c:	6f 91       	pop	r22
    242e:	5f 91       	pop	r21
    2430:	4f 91       	pop	r20
    2432:	3f 91       	pop	r19
    2434:	2f 91       	pop	r18
    2436:	1f 91       	pop	r17
    2438:	0f 91       	pop	r16
    243a:	0f 90       	pop	r0
    243c:	0f be       	out	0x3f, r0	; 63
    243e:	0f 90       	pop	r0
    2440:	1f 90       	pop	r1
    2442:	18 95       	reti

Disassembly of section .text.CANSendMessage:

000048ce <CANSendMessage>:
bool CANSendMessage( ECANMessageType eType,
					 uint8_t* pu8Data,
					 uint8_t u8DataLen )
{
	// Don't transmit during bus-off recovery period
	if (sg_u8BusOffRecoveryDelay > 0)
    48ce:	90 91 75 09 	lds	r25, 0x0975	; 0x800975 <sg_u8BusOffRecoveryDelay>
    48d2:	91 11       	cpse	r25, r1
    48d4:	0d c0       	rjmp	.+26     	; 0x48f0 <CANSendMessage+0x22>
	{
		return(false);
	}

	// Don't transmit during TX backoff period (adaptive backoff for persistent errors)
	if (sg_u8TxBackoffDelay > 0)
    48d6:	90 91 73 09 	lds	r25, 0x0973	; 0x800973 <sg_u8TxBackoffDelay>
    48da:	91 11       	cpse	r25, r1
    48dc:	0b c0       	rjmp	.+22     	; 0x48f4 <CANSendMessage+0x26>
		return(false);
	}

	// If we're busy, kick it back so we're cooperatively multitasking
	// rather than spin locking
	if (sg_u8Busy)
    48de:	90 91 7a 09 	lds	r25, 0x097A	; 0x80097a <sg_u8Busy>
    48e2:	91 11       	cpse	r25, r1
    48e4:	09 c0       	rjmp	.+18     	; 0x48f8 <CANSendMessage+0x2a>
	{
		return(false);
	}

	CANSendMessageInternal( eType, pu8Data, u8DataLen, false );
    48e6:	20 e0       	ldi	r18, 0x00	; 0
    48e8:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <CANSendMessageInternal>
	return( true );
    48ec:	81 e0       	ldi	r24, 0x01	; 1
    48ee:	08 95       	ret
					 uint8_t u8DataLen )
{
	// Don't transmit during bus-off recovery period
	if (sg_u8BusOffRecoveryDelay > 0)
	{
		return(false);
    48f0:	80 e0       	ldi	r24, 0x00	; 0
    48f2:	08 95       	ret
	}

	// Don't transmit during TX backoff period (adaptive backoff for persistent errors)
	if (sg_u8TxBackoffDelay > 0)
	{
		return(false);
    48f4:	80 e0       	ldi	r24, 0x00	; 0
    48f6:	08 95       	ret

	// If we're busy, kick it back so we're cooperatively multitasking
	// rather than spin locking
	if (sg_u8Busy)
	{
		return(false);
    48f8:	80 e0       	ldi	r24, 0x00	; 0
	}

	CANSendMessageInternal( eType, pu8Data, u8DataLen, false );
	return( true );
}
    48fa:	08 95       	ret

Disassembly of section .text.CANSetRXCallback:

0000502c <CANSetRXCallback>:

void CANSetRXCallback( void (*pfCallback)(ECANMessageType eType, uint8_t* pu8Data, uint8_t u8DataLen) )
{
	sg_pfRXCallback = pfCallback;
    502c:	90 93 69 09 	sts	0x0969, r25	; 0x800969 <sg_pfRXCallback+0x1>
    5030:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <sg_pfRXCallback>
    5034:	08 95       	ret

Disassembly of section .text.CANInit:

00003734 <CANInit>:
}

void CANInit( void )
{
    3734:	0f 93       	push	r16
    3736:	cf 93       	push	r28
	// Init clock
	// See datasheet table 16-2.
	// For 8Mhz, set CAN rate to 500 Kbps
	CANBT1 = 0x02;
    3738:	c2 e0       	ldi	r28, 0x02	; 2
    373a:	c0 93 e2 00 	sts	0x00E2, r28	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f00e2>
	CANBT2 = 0x04;
    373e:	84 e0       	ldi	r24, 0x04	; 4
    3740:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f00e3>
	CANBT3 = 0x12;
    3744:	82 e1       	ldi	r24, 0x12	; 18
    3746:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7f00e4>
	
	// Init message objects (MOBs) since there are no defaults at reset
	CANMOBSet( 0, &sg_sMOBDisabled, NULL, 0 );
    374a:	00 e0       	ldi	r16, 0x00	; 0
    374c:	20 e0       	ldi	r18, 0x00	; 0
    374e:	30 e0       	ldi	r19, 0x00	; 0
    3750:	47 ea       	ldi	r20, 0xA7	; 167
    3752:	53 e0       	ldi	r21, 0x03	; 3
    3754:	60 e0       	ldi	r22, 0x00	; 0
    3756:	80 e0       	ldi	r24, 0x00	; 0
    3758:	0e 94 75 0d 	call	0x1aea	; 0x1aea <CANMOBSet>
	CANMOBSet( 1, &sg_sMOBDisabled, NULL, 0 );
    375c:	20 e0       	ldi	r18, 0x00	; 0
    375e:	30 e0       	ldi	r19, 0x00	; 0
    3760:	47 ea       	ldi	r20, 0xA7	; 167
    3762:	53 e0       	ldi	r21, 0x03	; 3
    3764:	60 e0       	ldi	r22, 0x00	; 0
    3766:	81 e0       	ldi	r24, 0x01	; 1
    3768:	0e 94 75 0d 	call	0x1aea	; 0x1aea <CANMOBSet>
	CANMOBSet( 2, &sg_sMOBDisabled, NULL, 0 );
    376c:	20 e0       	ldi	r18, 0x00	; 0
    376e:	30 e0       	ldi	r19, 0x00	; 0
    3770:	47 ea       	ldi	r20, 0xA7	; 167
    3772:	53 e0       	ldi	r21, 0x03	; 3
    3774:	60 e0       	ldi	r22, 0x00	; 0
    3776:	82 e0       	ldi	r24, 0x02	; 2
    3778:	0e 94 75 0d 	call	0x1aea	; 0x1aea <CANMOBSet>
	CANMOBSet( 3, &sg_sMOBDisabled, NULL, 0 );
    377c:	20 e0       	ldi	r18, 0x00	; 0
    377e:	30 e0       	ldi	r19, 0x00	; 0
    3780:	47 ea       	ldi	r20, 0xA7	; 167
    3782:	53 e0       	ldi	r21, 0x03	; 3
    3784:	60 e0       	ldi	r22, 0x00	; 0
    3786:	83 e0       	ldi	r24, 0x03	; 3
    3788:	0e 94 75 0d 	call	0x1aea	; 0x1aea <CANMOBSet>
	CANMOBSet( 4, &sg_sMOBDisabled, NULL, 0 );
    378c:	20 e0       	ldi	r18, 0x00	; 0
    378e:	30 e0       	ldi	r19, 0x00	; 0
    3790:	47 ea       	ldi	r20, 0xA7	; 167
    3792:	53 e0       	ldi	r21, 0x03	; 3
    3794:	60 e0       	ldi	r22, 0x00	; 0
    3796:	84 e0       	ldi	r24, 0x04	; 4
    3798:	0e 94 75 0d 	call	0x1aea	; 0x1aea <CANMOBSet>
	CANMOBSet( 5, &sg_sMOBDisabled, NULL, 0 );
    379c:	20 e0       	ldi	r18, 0x00	; 0
    379e:	30 e0       	ldi	r19, 0x00	; 0
    37a0:	47 ea       	ldi	r20, 0xA7	; 167
    37a2:	53 e0       	ldi	r21, 0x03	; 3
    37a4:	60 e0       	ldi	r22, 0x00	; 0
    37a6:	85 e0       	ldi	r24, 0x05	; 5
    37a8:	0e 94 75 0d 	call	0x1aea	; 0x1aea <CANMOBSet>
	
	// Setup generic RX
	CANMOBSet( CANMOB_RX_IDX, &sg_sMOBGenericReceive, NULL, 0 );
    37ac:	20 e0       	ldi	r18, 0x00	; 0
    37ae:	30 e0       	ldi	r19, 0x00	; 0
    37b0:	4f e9       	ldi	r20, 0x9F	; 159
    37b2:	53 e0       	ldi	r21, 0x03	; 3
    37b4:	60 e0       	ldi	r22, 0x00	; 0
    37b6:	80 e0       	ldi	r24, 0x00	; 0
    37b8:	0e 94 75 0d 	call	0x1aea	; 0x1aea <CANMOBSet>
	
	// Enable general CAN interrupts
	CANGIE = (1 << ENIT) | (1 << ENRX) | (1 << ENTX) | (1 << ENERR) | (1 << ENBX) | (1 << ENERG);
    37bc:	8e eb       	ldi	r24, 0xBE	; 190
    37be:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f00db>

//	CANGIE &= ~(1 << ENOVRT);  // Disable CAN timer overflow interrupt

	// Enable the bus
	CANGCON = (1 << ENASTB);
    37c2:	c0 93 d8 00 	sts	0x00D8, r28	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f00d8>
	sg_u8Busy = 0;
    37c6:	10 92 7a 09 	sts	0x097A, r1	; 0x80097a <sg_u8Busy>
}
    37ca:	cf 91       	pop	r28
    37cc:	0f 91       	pop	r16
    37ce:	08 95       	ret

Disassembly of section .text.CANCheckTxStatus:

0000349c <CANCheckTxStatus>:

void CANCheckTxStatus(void)
{
	// Only check if we think we're busy
	if (sg_u8Busy > 0)
    349c:	80 91 7a 09 	lds	r24, 0x097A	; 0x80097a <sg_u8Busy>
    34a0:	88 23       	and	r24, r24
    34a2:	09 f4       	brne	.+2      	; 0x34a6 <CANCheckTxStatus+0xa>
    34a4:	50 c0       	rjmp	.+160    	; 0x3546 <CANCheckTxStatus+0xaa>
	{
		// Save current MOB and switch to TX MOB
		uint8_t savedMOB = CANPAGE;
    34a6:	ed ee       	ldi	r30, 0xED	; 237
    34a8:	f0 e0       	ldi	r31, 0x00	; 0
    34aa:	80 81       	ld	r24, Z
		CANPAGE = CANMOB_TX_IDX << MOBNB0;
    34ac:	90 e1       	ldi	r25, 0x10	; 16
    34ae:	90 83       	st	Z, r25

		// Check if transmission completed successfully
		if (CANSTMOB & (1 << TXOK))
    34b0:	90 91 ee 00 	lds	r25, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    34b4:	96 ff       	sbrs	r25, 6
    34b6:	12 c0       	rjmp	.+36     	; 0x34dc <CANCheckTxStatus+0x40>
		{
			// Clear the flag
			CANSTMOB &= ~(1 << TXOK);
    34b8:	ee ee       	ldi	r30, 0xEE	; 238
    34ba:	f0 e0       	ldi	r31, 0x00	; 0
    34bc:	90 81       	ld	r25, Z
    34be:	9f 7b       	andi	r25, 0xBF	; 191
    34c0:	90 83       	st	Z, r25
			sg_u8Busy = 0;
    34c2:	10 92 7a 09 	sts	0x097A, r1	; 0x80097a <sg_u8Busy>
			sg_u16TxOkPolled++;	// Diagnostic: we caught TXOK by polling
    34c6:	20 91 62 09 	lds	r18, 0x0962	; 0x800962 <sg_u16TxOkPolled>
    34ca:	30 91 63 09 	lds	r19, 0x0963	; 0x800963 <sg_u16TxOkPolled+0x1>
    34ce:	2f 5f       	subi	r18, 0xFF	; 255
    34d0:	3f 4f       	sbci	r19, 0xFF	; 255
    34d2:	30 93 63 09 	sts	0x0963, r19	; 0x800963 <sg_u16TxOkPolled+0x1>
    34d6:	20 93 62 09 	sts	0x0962, r18	; 0x800962 <sg_u16TxOkPolled>
    34da:	33 c0       	rjmp	.+102    	; 0x3542 <CANCheckTxStatus+0xa6>
		}
		// Check for transmission errors
		else if (CANSTMOB & ((1 << BERR) | (1 << SERR) | (1 << CERR) | (1 << FERR) | (1 << AERR)))
    34dc:	90 91 ee 00 	lds	r25, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    34e0:	9f 71       	andi	r25, 0x1F	; 31
    34e2:	89 f0       	breq	.+34     	; 0x3506 <CANCheckTxStatus+0x6a>
		{
			// Clear all error flags and reset busy flag
			CANSTMOB = 0x00;
    34e4:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
			sg_u8Busy = 0;
    34e8:	10 92 7a 09 	sts	0x097A, r1	; 0x80097a <sg_u8Busy>
			sg_u16TxErrors++;	// Diagnostic: error recovered
    34ec:	20 91 64 09 	lds	r18, 0x0964	; 0x800964 <sg_u16TxErrors>
    34f0:	30 91 65 09 	lds	r19, 0x0965	; 0x800965 <sg_u16TxErrors+0x1>
    34f4:	2f 5f       	subi	r18, 0xFF	; 255
    34f6:	3f 4f       	sbci	r19, 0xFF	; 255
    34f8:	30 93 65 09 	sts	0x0965, r19	; 0x800965 <sg_u16TxErrors+0x1>
    34fc:	20 93 64 09 	sts	0x0964, r18	; 0x800964 <sg_u16TxErrors>

			// Clear in-retransmit flag since we're giving up
			sg_bInRetransmit = false;
    3500:	10 92 76 09 	sts	0x0976, r1	; 0x800976 <sg_bInRetransmit>
    3504:	1e c0       	rjmp	.+60     	; 0x3542 <CANCheckTxStatus+0xa6>
		}
		else
		{
			// No completion or error yet, decrement timeout counter
			sg_u8Busy--;
    3506:	90 91 7a 09 	lds	r25, 0x097A	; 0x80097a <sg_u8Busy>
    350a:	91 50       	subi	r25, 0x01	; 1
    350c:	90 93 7a 09 	sts	0x097A, r25	; 0x80097a <sg_u8Busy>

			// If timeout expired, force clear
			if (sg_u8Busy == 0)
    3510:	90 91 7a 09 	lds	r25, 0x097A	; 0x80097a <sg_u8Busy>
    3514:	91 11       	cpse	r25, r1
    3516:	15 c0       	rjmp	.+42     	; 0x3542 <CANCheckTxStatus+0xa6>
			{
				// Clear any pending status and disable the MOB
				CANSTMOB = 0x00;
    3518:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
				CANCDMOB = 0x00;	// Disable the MOB
    351c:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>

				// Clear in-retransmit flag since we're giving up
				sg_bInRetransmit = false;
    3520:	10 92 76 09 	sts	0x0976, r1	; 0x800976 <sg_bInRetransmit>

				// Disable the MOB interrupt to prevent spurious interrupts
				CANIE2 &= ~(1 << CANMOB_TX_IDX);
    3524:	ee ed       	ldi	r30, 0xDE	; 222
    3526:	f0 e0       	ldi	r31, 0x00	; 0
    3528:	90 81       	ld	r25, Z
    352a:	9d 7f       	andi	r25, 0xFD	; 253
    352c:	90 83       	st	Z, r25

				sg_u16TxTimeouts++;	// Diagnostic: timeout occurred
    352e:	20 91 66 09 	lds	r18, 0x0966	; 0x800966 <sg_u16TxTimeouts>
    3532:	30 91 67 09 	lds	r19, 0x0967	; 0x800967 <sg_u16TxTimeouts+0x1>
    3536:	2f 5f       	subi	r18, 0xFF	; 255
    3538:	3f 4f       	sbci	r19, 0xFF	; 255
    353a:	30 93 67 09 	sts	0x0967, r19	; 0x800967 <sg_u16TxTimeouts+0x1>
    353e:	20 93 66 09 	sts	0x0966, r18	; 0x800966 <sg_u16TxTimeouts>
			}
		}

		// Restore MOB
		CANPAGE = savedMOB;
    3542:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f00ed>
    3546:	08 95       	ret

Disassembly of section .text.CANCheckHealth:

000026b4 <CANCheckHealth>:
{
	return sg_u8TxBackoffDelay;
}

void CANCheckHealth(void)
{
    26b4:	0f 93       	push	r16
	// Decrement bus-off recovery delay if active
	if (sg_u8BusOffRecoveryDelay > 0)
    26b6:	80 91 75 09 	lds	r24, 0x0975	; 0x800975 <sg_u8BusOffRecoveryDelay>
    26ba:	88 23       	and	r24, r24
    26bc:	19 f0       	breq	.+6      	; 0x26c4 <CANCheckHealth+0x10>
	{
		sg_u8BusOffRecoveryDelay--;
    26be:	81 50       	subi	r24, 0x01	; 1
    26c0:	80 93 75 09 	sts	0x0975, r24	; 0x800975 <sg_u8BusOffRecoveryDelay>
	}

	// Decrement TX backoff delay if active
	if (sg_u8TxBackoffDelay > 0)
    26c4:	80 91 73 09 	lds	r24, 0x0973	; 0x800973 <sg_u8TxBackoffDelay>
    26c8:	88 23       	and	r24, r24
    26ca:	19 f0       	breq	.+6      	; 0x26d2 <CANCheckHealth+0x1e>
	{
		sg_u8TxBackoffDelay--;
    26cc:	81 50       	subi	r24, 0x01	; 1
    26ce:	80 93 73 09 	sts	0x0973, r24	; 0x800973 <sg_u8TxBackoffDelay>
	}

	// Store current error counter values for diagnostics
	static uint8_t lastTEC = 0;
	static uint8_t lastREC = 0;
	uint8_t currentTEC = CANTEC;
    26d2:	20 91 ea 00 	lds	r18, 0x00EA	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7f00ea>
	uint8_t currentREC = CANREC;
    26d6:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f00eb>

	// Detect TX-only errors (TEC increasing but REC stays at 0)
	// This indicates the module can't transmit but isn't seeing bus activity
	// Likely a hardware issue with TX circuitry or transceiver
	if ((currentTEC > lastTEC) && (currentREC == 0) && (lastREC == 0))
    26da:	80 91 72 09 	lds	r24, 0x0972	; 0x800972 <lastTEC.2006>
    26de:	82 17       	cp	r24, r18
    26e0:	48 f5       	brcc	.+82     	; 0x2734 <CANCheckHealth+0x80>
    26e2:	31 11       	cpse	r19, r1
    26e4:	27 c0       	rjmp	.+78     	; 0x2734 <CANCheckHealth+0x80>
    26e6:	90 91 71 09 	lds	r25, 0x0971	; 0x800971 <lastREC.2007>
    26ea:	91 11       	cpse	r25, r1
    26ec:	23 c0       	rjmp	.+70     	; 0x2734 <CANCheckHealth+0x80>
	{
		sg_u8TxOnlyErrorCount++;
    26ee:	40 91 74 09 	lds	r20, 0x0974	; 0x800974 <sg_u8TxOnlyErrorCount>
    26f2:	4f 5f       	subi	r20, 0xFF	; 255
    26f4:	40 93 74 09 	sts	0x0974, r20	; 0x800974 <sg_u8TxOnlyErrorCount>

		// If we have persistent TX-only errors, apply adaptive backoff
		if (sg_u8TxOnlyErrorCount > 3)
    26f8:	44 30       	cpi	r20, 0x04	; 4
    26fa:	f8 f0       	brcs	.+62     	; 0x273a <CANCheckHealth+0x86>
		{
			// Exponential backoff: 2, 4, 8, 16 ticks (200ms to 1.6s)
			if (sg_u8TxBackoffDelay == 0)
    26fc:	90 91 73 09 	lds	r25, 0x0973	; 0x800973 <sg_u8TxBackoffDelay>
    2700:	91 11       	cpse	r25, r1
    2702:	1b c0       	rjmp	.+54     	; 0x273a <CANCheckHealth+0x86>
			{
				sg_u8TxBackoffDelay = 2 << ((sg_u8TxOnlyErrorCount - 3) > 3 ? 3 : (sg_u8TxOnlyErrorCount - 3));
    2704:	50 e0       	ldi	r21, 0x00	; 0
    2706:	43 50       	subi	r20, 0x03	; 3
    2708:	51 09       	sbc	r21, r1
    270a:	44 30       	cpi	r20, 0x04	; 4
    270c:	51 05       	cpc	r21, r1
    270e:	14 f0       	brlt	.+4      	; 0x2714 <CANCheckHealth+0x60>
    2710:	43 e0       	ldi	r20, 0x03	; 3
    2712:	50 e0       	ldi	r21, 0x00	; 0
    2714:	62 e0       	ldi	r22, 0x02	; 2
    2716:	70 e0       	ldi	r23, 0x00	; 0
    2718:	fb 01       	movw	r30, r22
    271a:	02 c0       	rjmp	.+4      	; 0x2720 <CANCheckHealth+0x6c>
    271c:	ee 0f       	add	r30, r30
    271e:	ff 1f       	adc	r31, r31
    2720:	4a 95       	dec	r20
    2722:	e2 f7       	brpl	.-8      	; 0x271c <CANCheckHealth+0x68>
    2724:	e0 93 73 09 	sts	0x0973, r30	; 0x800973 <sg_u8TxBackoffDelay>
				if (sg_u8TxBackoffDelay > 16)
    2728:	e1 31       	cpi	r30, 0x11	; 17
    272a:	38 f0       	brcs	.+14     	; 0x273a <CANCheckHealth+0x86>
				{
					sg_u8TxBackoffDelay = 16;	// Cap at 1.6 seconds
    272c:	90 e1       	ldi	r25, 0x10	; 16
    272e:	90 93 73 09 	sts	0x0973, r25	; 0x800973 <sg_u8TxBackoffDelay>
    2732:	03 c0       	rjmp	.+6      	; 0x273a <CANCheckHealth+0x86>
				}
			}
		}
	}
	else if (currentREC > 0)
    2734:	31 11       	cpse	r19, r1
	{
		// We're seeing bus activity - reset TX-only error counter
		sg_u8TxOnlyErrorCount = 0;
    2736:	10 92 74 09 	sts	0x0974, r1	; 0x800974 <sg_u8TxOnlyErrorCount>
	}

	// Check if error counters are increasing rapidly (sign of bus problems)
	if ((currentTEC > lastTEC + 10) || (currentREC > lastREC + 10))
    273a:	42 2f       	mov	r20, r18
    273c:	50 e0       	ldi	r21, 0x00	; 0
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	0a 96       	adiw	r24, 0x0a	; 10
    2742:	84 17       	cp	r24, r20
    2744:	95 07       	cpc	r25, r21
    2746:	4c f0       	brlt	.+18     	; 0x275a <CANCheckHealth+0xa6>
    2748:	43 2f       	mov	r20, r19
    274a:	50 e0       	ldi	r21, 0x00	; 0
    274c:	80 91 71 09 	lds	r24, 0x0971	; 0x800971 <lastREC.2007>
    2750:	90 e0       	ldi	r25, 0x00	; 0
    2752:	0a 96       	adiw	r24, 0x0a	; 10
    2754:	84 17       	cp	r24, r20
    2756:	95 07       	cpc	r25, r21
    2758:	3c f4       	brge	.+14     	; 0x2768 <CANCheckHealth+0xb4>
	{
		// Rapid error increase - likely physical bus problem
		// Apply temporary backoff
		if (sg_u8TxBackoffDelay < 5)
    275a:	80 91 73 09 	lds	r24, 0x0973	; 0x800973 <sg_u8TxBackoffDelay>
    275e:	85 30       	cpi	r24, 0x05	; 5
    2760:	18 f4       	brcc	.+6      	; 0x2768 <CANCheckHealth+0xb4>
		{
			sg_u8TxBackoffDelay = 5;	// 500ms backoff for rapid errors
    2762:	85 e0       	ldi	r24, 0x05	; 5
    2764:	80 93 73 09 	sts	0x0973, r24	; 0x800973 <sg_u8TxBackoffDelay>
		}
	}

	lastTEC = currentTEC;
    2768:	20 93 72 09 	sts	0x0972, r18	; 0x800972 <lastTEC.2006>
	lastREC = currentREC;
    276c:	30 93 71 09 	sts	0x0971, r19	; 0x800971 <lastREC.2007>

	// Check if CAN controller is in error passive state
	// TEC (Transmit Error Counter) or REC (Receive Error Counter) > 127
	if ((currentTEC > 127) || (currentREC > 127))
    2770:	22 23       	and	r18, r18
    2772:	14 f0       	brlt	.+4      	; 0x2778 <CANCheckHealth+0xc4>
    2774:	33 23       	and	r19, r19
    2776:	4c f4       	brge	.+18     	; 0x278a <CANCheckHealth+0xd6>
	{
		sg_u16ErrorPassive++;
    2778:	80 91 51 09 	lds	r24, 0x0951	; 0x800951 <sg_u16ErrorPassive>
    277c:	90 91 52 09 	lds	r25, 0x0952	; 0x800952 <sg_u16ErrorPassive+0x1>
    2780:	01 96       	adiw	r24, 0x01	; 1
    2782:	90 93 52 09 	sts	0x0952, r25	; 0x800952 <sg_u16ErrorPassive+0x1>
    2786:	80 93 51 09 	sts	0x0951, r24	; 0x800951 <sg_u16ErrorPassive>
		// Very close to bus-off (255) - try to prevent it
		// Could temporarily stop transmitting to let errors clear
	}

	// Check if CAN is disabled (should always be enabled)
	if (!(CANGSTA & (1 << ENFG)))
    278a:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7f00d9>
    278e:	82 fd       	sbrc	r24, 2
    2790:	12 c0       	rjmp	.+36     	; 0x27b6 <CANCheckHealth+0x102>
	{
		// CAN controller is disabled - re-enable it!
		CANGCON = (1 << ENASTB);
    2792:	82 e0       	ldi	r24, 0x02	; 2
    2794:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f00d8>

		// Re-initialize RX MOB since controller was disabled
		CANMOBSet(CANMOB_RX_IDX, &sg_sMOBGenericReceive, NULL, 0);
    2798:	00 e0       	ldi	r16, 0x00	; 0
    279a:	20 e0       	ldi	r18, 0x00	; 0
    279c:	30 e0       	ldi	r19, 0x00	; 0
    279e:	4f e9       	ldi	r20, 0x9F	; 159
    27a0:	53 e0       	ldi	r21, 0x03	; 3
    27a2:	60 e0       	ldi	r22, 0x00	; 0
    27a4:	80 e0       	ldi	r24, 0x00	; 0
    27a6:	0e 94 75 0d 	call	0x1aea	; 0x1aea <CANMOBSet>

		// After bus-off recovery, error counters should be at 0
		// If they're not, there's still a bus problem
		if ((CANTEC > 0) || (CANREC > 0))
    27aa:	80 91 ea 00 	lds	r24, 0x00EA	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7f00ea>
    27ae:	81 11       	cpse	r24, r1
    27b0:	02 c0       	rjmp	.+4      	; 0x27b6 <CANCheckHealth+0x102>
    27b2:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f00eb>
			// Still have errors after re-enable - bus problem persists
		}
	}

	// Check if RX MOB is still enabled
	uint8_t savedMOB = CANPAGE;
    27b6:	ed ee       	ldi	r30, 0xED	; 237
    27b8:	f0 e0       	ldi	r31, 0x00	; 0
    27ba:	90 81       	ld	r25, Z
	CANPAGE = CANMOB_RX_IDX << MOBNB0;
    27bc:	10 82       	st	Z, r1

	// If RX MOB is disabled (CONMOB bits are 0), re-enable it
	if ((CANCDMOB & 0xC0) == 0)
    27be:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    27c2:	80 7c       	andi	r24, 0xC0	; 192
    27c4:	59 f4       	brne	.+22     	; 0x27dc <CANCheckHealth+0x128>
	{
		// RX MOB is disabled - this shouldn't happen!
		// Re-enable it
		CANPAGE = savedMOB;  // Restore first
    27c6:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f00ed>
		CANMOBSet(CANMOB_RX_IDX, &sg_sMOBGenericReceive, NULL, 0);
    27ca:	00 e0       	ldi	r16, 0x00	; 0
    27cc:	20 e0       	ldi	r18, 0x00	; 0
    27ce:	30 e0       	ldi	r19, 0x00	; 0
    27d0:	4f e9       	ldi	r20, 0x9F	; 159
    27d2:	53 e0       	ldi	r21, 0x03	; 3
    27d4:	60 e0       	ldi	r22, 0x00	; 0
    27d6:	0e 94 75 0d 	call	0x1aea	; 0x1aea <CANMOBSet>
    27da:	02 c0       	rjmp	.+4      	; 0x27e0 <CANCheckHealth+0x12c>
	}
	else
	{
		CANPAGE = savedMOB;  // Restore MOB
    27dc:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f00ed>
	}
}
    27e0:	0f 91       	pop	r16
    27e2:	08 95       	ret

Disassembly of section .text.DebugOut:

00004fdc <DebugOut>:
}

#endif

void DebugOut( const char* peFormat, ... )
{
    4fdc:	cf 93       	push	r28
    4fde:	df 93       	push	r29
    4fe0:	cd b7       	in	r28, 0x3d	; 61
    4fe2:	de b7       	in	r29, 0x3e	; 62
	
	va_end( args );	 */
	
	//DebugSerialSend( (uint8_t*)u8Buffer, strlen(u8Buffer) );
#endif
}
    4fe4:	df 91       	pop	r29
    4fe6:	cf 91       	pop	r28
    4fe8:	08 95       	ret

Disassembly of section .text.EEPROMRead:

00004f42 <EEPROMRead>:
}

uint8_t EEPROMRead(uint16_t u16Address)
{
	// Wait for any completion of writes, etc..
	while (EECR & (1 << EEWE));
    4f42:	f9 99       	sbic	0x1f, 1	; 31
    4f44:	fe cf       	rjmp	.-4      	; 0x4f42 <EEPROMRead>

	// Set address	
	EEAR = u16Address;
    4f46:	92 bd       	out	0x22, r25	; 34
    4f48:	81 bd       	out	0x21, r24	; 33
	
	// Start EEPROM read
	EECR |= (1 << EERE);
    4f4a:	8f b3       	in	r24, 0x1f	; 31
    4f4c:	81 60       	ori	r24, 0x01	; 1
    4f4e:	8f bb       	out	0x1f, r24	; 31
	
	// Return the data
	return(EEDR);
    4f50:	80 b5       	in	r24, 0x20	; 32
    4f52:	08 95       	ret

Disassembly of section .text.I2CBitDelay:

00004fea <I2CBitDelay>:
#define SDA_SET_INPUT()			(I2C_PORT_DDR &= ((uint8_t) ~(1 << I2C_SDA_PIN))); SDA_HIGH()

// Delays for one I2C bit's worth of time
static void I2CBitDelay(void)
{
	Delay(10);
    4fea:	6a e0       	ldi	r22, 0x0A	; 10
    4fec:	70 e0       	ldi	r23, 0x00	; 0
    4fee:	80 e0       	ldi	r24, 0x00	; 0
    4ff0:	90 e0       	ldi	r25, 0x00	; 0
    4ff2:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <Delay>
    4ff6:	08 95       	ret

Disassembly of section .text.I2CStart:

0000492a <I2CStart>:

// Send an I2C start sequence and quantize foreground code to the overflow
// timer
void I2CStart(void)
{
	SDA_SET_OUTPUT();
    492a:	8a b1       	in	r24, 0x0a	; 10
    492c:	82 60       	ori	r24, 0x02	; 2
    492e:	8a b9       	out	0x0a, r24	; 10
	SDA_HIGH();
    4930:	8b b1       	in	r24, 0x0b	; 11
    4932:	82 60       	ori	r24, 0x02	; 2
    4934:	8b b9       	out	0x0b, r24	; 11
	SCL_HIGH();
    4936:	8b b1       	in	r24, 0x0b	; 11
    4938:	81 60       	ori	r24, 0x01	; 1
    493a:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    493c:	0e 94 f5 27 	call	0x4fea	; 0x4fea <I2CBitDelay>
	SDA_LOW();
    4940:	8b b1       	in	r24, 0x0b	; 11
    4942:	8d 7f       	andi	r24, 0xFD	; 253
    4944:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    4946:	0e 94 f5 27 	call	0x4fea	; 0x4fea <I2CBitDelay>
	SCL_LOW();
    494a:	8b b1       	in	r24, 0x0b	; 11
    494c:	8e 7f       	andi	r24, 0xFE	; 254
    494e:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    4950:	0e 94 f5 27 	call	0x4fea	; 0x4fea <I2CBitDelay>
    4954:	08 95       	ret

Disassembly of section .text.I2CStop:

00004ad0 <I2CStop>:
}

// Send an I2C stop sequence
void I2CStop(void)
{
	SDA_LOW();
    4ad0:	8b b1       	in	r24, 0x0b	; 11
    4ad2:	8d 7f       	andi	r24, 0xFD	; 253
    4ad4:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    4ad6:	0e 94 f5 27 	call	0x4fea	; 0x4fea <I2CBitDelay>
	SCL_HIGH();
    4ada:	8b b1       	in	r24, 0x0b	; 11
    4adc:	81 60       	ori	r24, 0x01	; 1
    4ade:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    4ae0:	0e 94 f5 27 	call	0x4fea	; 0x4fea <I2CBitDelay>
	SDA_SET_INPUT();
    4ae4:	8a b1       	in	r24, 0x0a	; 10
    4ae6:	8d 7f       	andi	r24, 0xFD	; 253
    4ae8:	8a b9       	out	0x0a, r24	; 10
    4aea:	8b b1       	in	r24, 0x0b	; 11
    4aec:	82 60       	ori	r24, 0x02	; 2
    4aee:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    4af0:	0e 94 f5 27 	call	0x4fea	; 0x4fea <I2CBitDelay>
    4af4:	08 95       	ret

Disassembly of section .text.I2CUnstick:

00004646 <I2CUnstick>:
}

// Unsticks an I2C bus
void I2CUnstick(void)
{
    4646:	cf 93       	push	r28
	uint8_t u8UnstickBits = 64;

	SCL_SET_OUTPUT();
    4648:	8a b1       	in	r24, 0x0a	; 10
    464a:	81 60       	ori	r24, 0x01	; 1
    464c:	8a b9       	out	0x0a, r24	; 10
	SDA_SET_OUTPUT();
    464e:	8a b1       	in	r24, 0x0a	; 10
    4650:	82 60       	ori	r24, 0x02	; 2
    4652:	8a b9       	out	0x0a, r24	; 10
}

// Unsticks an I2C bus
void I2CUnstick(void)
{
	uint8_t u8UnstickBits = 64;
    4654:	c0 e4       	ldi	r28, 0x40	; 64

	SCL_SET_OUTPUT();
	SDA_SET_OUTPUT();
	
	while (u8UnstickBits)
    4656:	11 c0       	rjmp	.+34     	; 0x467a <I2CUnstick+0x34>
	{
		SCL_LOW();
    4658:	8b b1       	in	r24, 0x0b	; 11
    465a:	8e 7f       	andi	r24, 0xFE	; 254
    465c:	8b b9       	out	0x0b, r24	; 11
		SDA_LOW();
    465e:	8b b1       	in	r24, 0x0b	; 11
    4660:	8d 7f       	andi	r24, 0xFD	; 253
    4662:	8b b9       	out	0x0b, r24	; 11
		I2CBitDelay();
    4664:	0e 94 f5 27 	call	0x4fea	; 0x4fea <I2CBitDelay>
		SCL_HIGH();
    4668:	8b b1       	in	r24, 0x0b	; 11
    466a:	81 60       	ori	r24, 0x01	; 1
    466c:	8b b9       	out	0x0b, r24	; 11
		SDA_HIGH();
    466e:	8b b1       	in	r24, 0x0b	; 11
    4670:	82 60       	ori	r24, 0x02	; 2
    4672:	8b b9       	out	0x0b, r24	; 11
		I2CBitDelay();
    4674:	0e 94 f5 27 	call	0x4fea	; 0x4fea <I2CBitDelay>
		u8UnstickBits--;
    4678:	c1 50       	subi	r28, 0x01	; 1
	uint8_t u8UnstickBits = 64;

	SCL_SET_OUTPUT();
	SDA_SET_OUTPUT();
	
	while (u8UnstickBits)
    467a:	c1 11       	cpse	r28, r1
    467c:	ed cf       	rjmp	.-38     	; 0x4658 <I2CUnstick+0x12>
		SCL_HIGH();
		SDA_HIGH();
		I2CBitDelay();
		u8UnstickBits--;
	}
}
    467e:	cf 91       	pop	r28
    4680:	08 95       	ret

Disassembly of section .text.I2CTxByte:

00003ee2 <I2CTxByte>:

// Sends a single I2C byte. Returns false if the byte is not acked, or true if it is.
bool I2CTxByte(uint8_t u8Byte)
{
    3ee2:	cf 93       	push	r28
    3ee4:	df 93       	push	r29
    3ee6:	d8 2f       	mov	r29, r24
	uint8_t u8Length = 8;			// 8 Bits to send
	bool bAck = false;

	SDA_SET_OUTPUT();
    3ee8:	8a b1       	in	r24, 0x0a	; 10
    3eea:	82 60       	ori	r24, 0x02	; 2
    3eec:	8a b9       	out	0x0a, r24	; 10
}

// Sends a single I2C byte. Returns false if the byte is not acked, or true if it is.
bool I2CTxByte(uint8_t u8Byte)
{
	uint8_t u8Length = 8;			// 8 Bits to send
    3eee:	c8 e0       	ldi	r28, 0x08	; 8
	bool bAck = false;

	SDA_SET_OUTPUT();

	while (u8Length)
    3ef0:	15 c0       	rjmp	.+42     	; 0x3f1c <I2CTxByte+0x3a>
	{
		if (u8Byte & 0x80)
    3ef2:	dd 23       	and	r29, r29
    3ef4:	24 f4       	brge	.+8      	; 0x3efe <I2CTxByte+0x1c>
		{
			SDA_HIGH();
    3ef6:	8b b1       	in	r24, 0x0b	; 11
    3ef8:	82 60       	ori	r24, 0x02	; 2
    3efa:	8b b9       	out	0x0b, r24	; 11
    3efc:	03 c0       	rjmp	.+6      	; 0x3f04 <I2CTxByte+0x22>
		}
		else
		{
			SDA_LOW();
    3efe:	8b b1       	in	r24, 0x0b	; 11
    3f00:	8d 7f       	andi	r24, 0xFD	; 253
    3f02:	8b b9       	out	0x0b, r24	; 11
		}
		
		// Drive SCL high
		SCL_HIGH();
    3f04:	8b b1       	in	r24, 0x0b	; 11
    3f06:	81 60       	ori	r24, 0x01	; 1
    3f08:	8b b9       	out	0x0b, r24	; 11
		
		I2CBitDelay();
    3f0a:	0e 94 f5 27 	call	0x4fea	; 0x4fea <I2CBitDelay>
		
		// Ensure SCL is low
		SCL_LOW();
    3f0e:	8b b1       	in	r24, 0x0b	; 11
    3f10:	8e 7f       	andi	r24, 0xFE	; 254
    3f12:	8b b9       	out	0x0b, r24	; 11
	
		// SDA Is now set. Delay.
		I2CBitDelay();
    3f14:	0e 94 f5 27 	call	0x4fea	; 0x4fea <I2CBitDelay>
		
		// Next bit
		u8Byte <<= 1;	
    3f18:	dd 0f       	add	r29, r29
		u8Length--;
    3f1a:	c1 50       	subi	r28, 0x01	; 1
	uint8_t u8Length = 8;			// 8 Bits to send
	bool bAck = false;

	SDA_SET_OUTPUT();

	while (u8Length)
    3f1c:	c1 11       	cpse	r28, r1
    3f1e:	e9 cf       	rjmp	.-46     	; 0x3ef2 <I2CTxByte+0x10>
		// Next bit
		u8Byte <<= 1;	
		u8Length--;
	}
	
	SDA_SET_INPUT();
    3f20:	8a b1       	in	r24, 0x0a	; 10
    3f22:	8d 7f       	andi	r24, 0xFD	; 253
    3f24:	8a b9       	out	0x0a, r24	; 10
    3f26:	8b b1       	in	r24, 0x0b	; 11
    3f28:	82 60       	ori	r24, 0x02	; 2
    3f2a:	8b b9       	out	0x0b, r24	; 11
	SCL_HIGH();
    3f2c:	8b b1       	in	r24, 0x0b	; 11
    3f2e:	81 60       	ori	r24, 0x01	; 1
    3f30:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    3f32:	0e 94 f5 27 	call	0x4fea	; 0x4fea <I2CBitDelay>
	
	// See if the byte was acknowledged
	if (SDA_READ())
    3f36:	49 9b       	sbis	0x09, 1	; 9
	{
		bAck = false;
	}
	else
	{
		bAck = true;
    3f38:	c1 e0       	ldi	r28, 0x01	; 1
	}
	
	SCL_LOW();
    3f3a:	8b b1       	in	r24, 0x0b	; 11
    3f3c:	8e 7f       	andi	r24, 0xFE	; 254
    3f3e:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    3f40:	0e 94 f5 27 	call	0x4fea	; 0x4fea <I2CBitDelay>
	return(bAck);
}
    3f44:	8c 2f       	mov	r24, r28
    3f46:	df 91       	pop	r29
    3f48:	cf 91       	pop	r28
    3f4a:	08 95       	ret

Disassembly of section .text.I2CRxByte:

00003d82 <I2CRxByte>:

// Receives a single I2C byte and will optionally generate an ack at the end
uint8_t I2CRxByte(bool bAck)
{
    3d82:	1f 93       	push	r17
    3d84:	cf 93       	push	r28
    3d86:	df 93       	push	r29
    3d88:	18 2f       	mov	r17, r24
	uint8_t u8Data = 0;
	uint8_t u8Count = 8;
	
	SDA_SET_INPUT();
    3d8a:	8a b1       	in	r24, 0x0a	; 10
    3d8c:	8d 7f       	andi	r24, 0xFD	; 253
    3d8e:	8a b9       	out	0x0a, r24	; 10
    3d90:	8b b1       	in	r24, 0x0b	; 11
    3d92:	82 60       	ori	r24, 0x02	; 2
    3d94:	8b b9       	out	0x0b, r24	; 11

// Receives a single I2C byte and will optionally generate an ack at the end
uint8_t I2CRxByte(bool bAck)
{
	uint8_t u8Data = 0;
	uint8_t u8Count = 8;
    3d96:	c8 e0       	ldi	r28, 0x08	; 8
}

// Receives a single I2C byte and will optionally generate an ack at the end
uint8_t I2CRxByte(bool bAck)
{
	uint8_t u8Data = 0;
    3d98:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t u8Count = 8;
	
	SDA_SET_INPUT();
	
	// Consume all 8 data bits
	while (u8Count)
    3d9a:	0e c0       	rjmp	.+28     	; 0x3db8 <I2CRxByte+0x36>
	{
		u8Data <<= 1;
    3d9c:	dd 0f       	add	r29, r29

		SCL_HIGH();
    3d9e:	8b b1       	in	r24, 0x0b	; 11
    3da0:	81 60       	ori	r24, 0x01	; 1
    3da2:	8b b9       	out	0x0b, r24	; 11
		I2CBitDelay();
    3da4:	0e 94 f5 27 	call	0x4fea	; 0x4fea <I2CBitDelay>
			
		if (SDA_READ())
    3da8:	49 99       	sbic	0x09, 1	; 9
		{
			u8Data |= 1;
    3daa:	d1 60       	ori	r29, 0x01	; 1
		}
		
		SCL_LOW();
    3dac:	8b b1       	in	r24, 0x0b	; 11
    3dae:	8e 7f       	andi	r24, 0xFE	; 254
    3db0:	8b b9       	out	0x0b, r24	; 11
		I2CBitDelay();
    3db2:	0e 94 f5 27 	call	0x4fea	; 0x4fea <I2CBitDelay>
		u8Count--;
    3db6:	c1 50       	subi	r28, 0x01	; 1
	uint8_t u8Count = 8;
	
	SDA_SET_INPUT();
	
	// Consume all 8 data bits
	while (u8Count)
    3db8:	c1 11       	cpse	r28, r1
    3dba:	f0 cf       	rjmp	.-32     	; 0x3d9c <I2CRxByte+0x1a>
		I2CBitDelay();
		u8Count--;
	}

	// See if we acknowledge this
	SDA_SET_OUTPUT();
    3dbc:	8a b1       	in	r24, 0x0a	; 10
    3dbe:	82 60       	ori	r24, 0x02	; 2
    3dc0:	8a b9       	out	0x0a, r24	; 10
	if (bAck)
    3dc2:	11 23       	and	r17, r17
    3dc4:	21 f0       	breq	.+8      	; 0x3dce <I2CRxByte+0x4c>
	{
		SDA_LOW();
    3dc6:	8b b1       	in	r24, 0x0b	; 11
    3dc8:	8d 7f       	andi	r24, 0xFD	; 253
    3dca:	8b b9       	out	0x0b, r24	; 11
    3dcc:	03 c0       	rjmp	.+6      	; 0x3dd4 <I2CRxByte+0x52>
	}
	else
	{
		SDA_HIGH();
    3dce:	8b b1       	in	r24, 0x0b	; 11
    3dd0:	82 60       	ori	r24, 0x02	; 2
    3dd2:	8b b9       	out	0x0b, r24	; 11
	}
	
	I2CBitDelay();
    3dd4:	0e 94 f5 27 	call	0x4fea	; 0x4fea <I2CBitDelay>
	SCL_HIGH();
    3dd8:	8b b1       	in	r24, 0x0b	; 11
    3dda:	81 60       	ori	r24, 0x01	; 1
    3ddc:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    3dde:	0e 94 f5 27 	call	0x4fea	; 0x4fea <I2CBitDelay>
	SCL_LOW();
    3de2:	8b b1       	in	r24, 0x0b	; 11
    3de4:	8e 7f       	andi	r24, 0xFE	; 254
    3de6:	8b b9       	out	0x0b, r24	; 11
	I2CBitDelay();
    3de8:	0e 94 f5 27 	call	0x4fea	; 0x4fea <I2CBitDelay>
	SDA_LOW();
    3dec:	8b b1       	in	r24, 0x0b	; 11
    3dee:	8d 7f       	andi	r24, 0xFD	; 253
    3df0:	8b b9       	out	0x0b, r24	; 11

	return(u8Data);	
}
    3df2:	8d 2f       	mov	r24, r29
    3df4:	df 91       	pop	r29
    3df6:	cf 91       	pop	r28
    3df8:	1f 91       	pop	r17
    3dfa:	08 95       	ret

Disassembly of section .text.I2CSetup:

00004956 <I2CSetup>:
// Prepares the SCL/SDA pins for I2C operation and returns when the CPU is
// quantized to the timer (for consistent bit alignment)
void I2CSetup(void)
{
	// Deassert SCL and SDA
	SCL_HIGH();
    4956:	8b b1       	in	r24, 0x0b	; 11
    4958:	81 60       	ori	r24, 0x01	; 1
    495a:	8b b9       	out	0x0b, r24	; 11
	SDA_HIGH();
    495c:	8b b1       	in	r24, 0x0b	; 11
    495e:	82 60       	ori	r24, 0x02	; 2
    4960:	8b b9       	out	0x0b, r24	; 11

	// Set SCL and SDA lines as push/pull output drives
	SCL_SET_OUTPUT();
    4962:	8a b1       	in	r24, 0x0a	; 10
    4964:	81 60       	ori	r24, 0x01	; 1
    4966:	8a b9       	out	0x0a, r24	; 10
	
	// Turn on SDA, set as an input
	SDA_SET_INPUT();
    4968:	8a b1       	in	r24, 0x0a	; 10
    496a:	8d 7f       	andi	r24, 0xFD	; 253
    496c:	8a b9       	out	0x0a, r24	; 10
    496e:	8b b1       	in	r24, 0x0b	; 11
    4970:	82 60       	ori	r24, 0x02	; 2
    4972:	8b b9       	out	0x0b, r24	; 11
	
	Delay(20);
    4974:	64 e1       	ldi	r22, 0x14	; 20
    4976:	70 e0       	ldi	r23, 0x00	; 0
    4978:	80 e0       	ldi	r24, 0x00	; 0
    497a:	90 e0       	ldi	r25, 0x00	; 0
    497c:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <Delay>
    4980:	08 95       	ret

Disassembly of section .text.I2CStartTransaction:

00004a30 <I2CStartTransaction>:

// Sets up the I2C pins, sends slave address/read/write byte, and waits for acknowledgment.
// Returns false if no device is responding.
bool I2CStartTransaction(uint8_t u8SlaveAddress,
						 bool bRead)
{
    4a30:	cf 93       	push	r28
    4a32:	df 93       	push	r29
    4a34:	c8 2f       	mov	r28, r24
    4a36:	d6 2f       	mov	r29, r22
	// Set up the pins for I2C operation
	I2CSetup();
    4a38:	0e 94 ab 24 	call	0x4956	; 0x4956 <I2CSetup>
	
	// I2C Start condition
	I2CStart();
    4a3c:	0e 94 95 24 	call	0x492a	; 0x492a <I2CStart>

	// If it's a read operation, clear the lower bit
	if (bRead)
    4a40:	dd 23       	and	r29, r29
    4a42:	19 f0       	breq	.+6      	; 0x4a4a <I2CStartTransaction+0x1a>
	{
		u8SlaveAddress |= 1;
    4a44:	8c 2f       	mov	r24, r28
    4a46:	81 60       	ori	r24, 0x01	; 1
    4a48:	02 c0       	rjmp	.+4      	; 0x4a4e <I2CStartTransaction+0x1e>
	}
	else
	{
		// Otherwise set it
		u8SlaveAddress &= (uint8_t) (~1);
    4a4a:	8c 2f       	mov	r24, r28
    4a4c:	8e 7f       	andi	r24, 0xFE	; 254
	}
	
	// Now send out the slave address + the read/write bit
	return(I2CTxByte(u8SlaveAddress));
    4a4e:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <I2CTxByte>
}
    4a52:	df 91       	pop	r29
    4a54:	cf 91       	pop	r28
    4a56:	08 95       	ret

Disassembly of section .text.CellCountExpectedSet:

000031a0 <CellCountExpectedSet>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    31a0:	cf 92       	push	r12
    31a2:	df 92       	push	r13
    31a4:	ef 92       	push	r14
    31a6:	ff 92       	push	r15
    31a8:	8f 35       	cpi	r24, 0x5F	; 95
    31aa:	08 f0       	brcs	.+2      	; 0x31ae <CellCountExpectedSet+0xe>
    31ac:	8e e5       	ldi	r24, 0x5E	; 94
    31ae:	e0 e1       	ldi	r30, 0x10	; 16
    31b0:	f1 e0       	ldi	r31, 0x01	; 1
    31b2:	85 8b       	std	Z+21, r24	; 0x15
    31b4:	c8 2e       	mov	r12, r24
    31b6:	d1 2c       	mov	r13, r1
    31b8:	e1 2c       	mov	r14, r1
    31ba:	f1 2c       	mov	r15, r1
    31bc:	aa ec       	ldi	r26, 0xCA	; 202
    31be:	b8 e0       	ldi	r27, 0x08	; 8
    31c0:	a7 01       	movw	r20, r14
    31c2:	96 01       	movw	r18, r12
    31c4:	0e 94 77 27 	call	0x4eee	; 0x4eee <__muluhisi3>
    31c8:	65 8f       	std	Z+29, r22	; 0x1d
    31ca:	76 8f       	std	Z+30, r23	; 0x1e
    31cc:	87 8f       	std	Z+31, r24	; 0x1f
    31ce:	90 a3       	std	Z+32, r25	; 0x20
    31d0:	a4 e9       	ldi	r26, 0x94	; 148
    31d2:	b1 e1       	ldi	r27, 0x11	; 17
    31d4:	0e 94 77 27 	call	0x4eee	; 0x4eee <__muluhisi3>
    31d8:	61 a3       	std	Z+33, r22	; 0x21
    31da:	72 a3       	std	Z+34, r23	; 0x22
    31dc:	83 a3       	std	Z+35, r24	; 0x23
    31de:	94 a3       	std	Z+36, r25	; 0x24
    31e0:	81 a1       	ldd	r24, Z+33	; 0x21
    31e2:	92 a1       	ldd	r25, Z+34	; 0x22
    31e4:	a3 a1       	ldd	r26, Z+35	; 0x23
    31e6:	b4 a1       	ldd	r27, Z+36	; 0x24
    31e8:	45 8d       	ldd	r20, Z+29	; 0x1d
    31ea:	56 8d       	ldd	r21, Z+30	; 0x1e
    31ec:	67 8d       	ldd	r22, Z+31	; 0x1f
    31ee:	70 a1       	ldd	r23, Z+32	; 0x20
    31f0:	84 1b       	sub	r24, r20
    31f2:	95 0b       	sbc	r25, r21
    31f4:	a6 0b       	sbc	r26, r22
    31f6:	b7 0b       	sbc	r27, r23
    31f8:	88 0f       	add	r24, r24
    31fa:	99 1f       	adc	r25, r25
    31fc:	aa 1f       	adc	r26, r26
    31fe:	bb 1f       	adc	r27, r27
    3200:	88 0f       	add	r24, r24
    3202:	99 1f       	adc	r25, r25
    3204:	aa 1f       	adc	r26, r26
    3206:	bb 1f       	adc	r27, r27
    3208:	88 0f       	add	r24, r24
    320a:	99 1f       	adc	r25, r25
    320c:	aa 1f       	adc	r26, r26
    320e:	bb 1f       	adc	r27, r27
    3210:	88 0f       	add	r24, r24
    3212:	99 1f       	adc	r25, r25
    3214:	aa 1f       	adc	r26, r26
    3216:	bb 1f       	adc	r27, r27
    3218:	88 0f       	add	r24, r24
    321a:	99 1f       	adc	r25, r25
    321c:	aa 1f       	adc	r26, r26
    321e:	bb 1f       	adc	r27, r27
    3220:	88 0f       	add	r24, r24
    3222:	99 1f       	adc	r25, r25
    3224:	aa 1f       	adc	r26, r26
    3226:	bb 1f       	adc	r27, r27
    3228:	88 0f       	add	r24, r24
    322a:	99 1f       	adc	r25, r25
    322c:	aa 1f       	adc	r26, r26
    322e:	bb 1f       	adc	r27, r27
    3230:	ac 01       	movw	r20, r24
    3232:	bd 01       	movw	r22, r26
    3234:	bb 23       	and	r27, r27
    3236:	24 f4       	brge	.+8      	; 0x3240 <CellCountExpectedSet+0xa0>
    3238:	41 50       	subi	r20, 0x01	; 1
    323a:	5c 4f       	sbci	r21, 0xFC	; 252
    323c:	6f 4f       	sbci	r22, 0xFF	; 255
    323e:	7f 4f       	sbci	r23, 0xFF	; 255
    3240:	03 2e       	mov	r0, r19
    3242:	3a e0       	ldi	r19, 0x0A	; 10
    3244:	75 95       	asr	r23
    3246:	67 95       	ror	r22
    3248:	57 95       	ror	r21
    324a:	47 95       	ror	r20
    324c:	3a 95       	dec	r19
    324e:	d1 f7       	brne	.-12     	; 0x3244 <CellCountExpectedSet+0xa4>
    3250:	30 2d       	mov	r19, r0
    3252:	50 93 36 01 	sts	0x0136, r21	; 0x800136 <sg_sFrame+0x26>
    3256:	40 93 35 01 	sts	0x0135, r20	; 0x800135 <sg_sFrame+0x25>
    325a:	ff 90       	pop	r15
    325c:	ef 90       	pop	r14
    325e:	df 90       	pop	r13
    3260:	cf 90       	pop	r12
    3262:	08 95       	ret

Disassembly of section .text.SendModuleControllerStatus:

00004f9c <SendModuleControllerStatus>:

static uint8_t sg_u8ControllerStatusMsgCount = 0;

static void SendModuleControllerStatus(void)
{
	sg_bSendModuleControllerStatus = true;
    4f9c:	81 e0       	ldi	r24, 0x01	; 1
    4f9e:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <sg_bSendModuleControllerStatus>
	sg_u8ControllerStatusMsgCount = 0;
    4fa2:	10 92 7f 09 	sts	0x097F, r1	; 0x80097f <sg_u8ControllerStatusMsgCount>
	sg_bIgnoreStatusRequests = true;  // Start ignoring new requests
    4fa6:	80 93 87 09 	sts	0x0987, r24	; 0x800987 <sg_bIgnoreStatusRequests>
    4faa:	08 95       	ret

Disassembly of section .text.ModuleControllerStateSet:

00005036 <ModuleControllerStateSet>:
	MBASSERT(0);
}

static void ModuleControllerStateSet( EModuleControllerState eNext )
{
	if(eNext < EMODSTATE_COUNT)
    5036:	84 30       	cpi	r24, 0x04	; 4
    5038:	10 f4       	brcc	.+4      	; 0x503e <ModuleControllerStateSet+0x8>
	{
		sg_eModuleControllerStateTarget = eNext;
    503a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <sg_eModuleControllerStateTarget>
    503e:	08 95       	ret

Disassembly of section .text.ModuleControllerStateSetMax:

00004ec2 <ModuleControllerStateSetMax>:



static void ModuleControllerStateSetMax( EModuleControllerState eNext )
{
	if(eNext < EMODSTATE_COUNT)
    4ec2:	84 30       	cpi	r24, 0x04	; 4
    4ec4:	40 f4       	brcc	.+16     	; 0x4ed6 <ModuleControllerStateSetMax+0x14>
	{
		sg_eModuleControllerStateMax = eNext;
    4ec6:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <sg_eModuleControllerStateMax>
		if (sg_eModuleControllerStateCurrent > eNext) // we are in a higher state than allowed
    4eca:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    4ece:	89 17       	cp	r24, r25
    4ed0:	10 f4       	brcc	.+4      	; 0x4ed6 <ModuleControllerStateSetMax+0x14>
		{
			sg_eModuleControllerStateTarget = eNext;
    4ed2:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <sg_eModuleControllerStateTarget>
    4ed6:	08 95       	ret

Disassembly of section .text.Check5VLoss:

00004e7a <Check5VLoss>:
}

// Checks for 5V loss
static void Check5VLoss(uint8_t u8NewState)
{
	if( u8NewState & (1 << PIN_5V_DET) )
    4e7a:	86 fd       	sbrc	r24, 6
    4e7c:	09 c0       	rjmp	.+18     	; 0x4e90 <Check5VLoss+0x16>
		// Not asserted
	}
	else
	{
		// 5V detect is low
		FET_EN_DEASSERT();
    4e7e:	88 b1       	in	r24, 0x08	; 8
    4e80:	8f 7e       	andi	r24, 0xEF	; 239
    4e82:	88 b9       	out	0x08, r24	; 8
		RELAY_EN_DEASSERT();
    4e84:	8e b1       	in	r24, 0x0e	; 14
    4e86:	8d 7f       	andi	r24, 0xFD	; 253
    4e88:	8e b9       	out	0x0e, r24	; 14
		ModuleControllerStateSet( EMODSTATE_OFF );
    4e8a:	80 e0       	ldi	r24, 0x00	; 0
    4e8c:	0e 94 1b 28 	call	0x5036	; 0x5036 <ModuleControllerStateSet>
    4e90:	08 95       	ret

Disassembly of section .text.CellDataConvertVoltage:

000040de <CellDataConvertVoltage>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    40de:	fb 01       	movw	r30, r22
    40e0:	dc 01       	movw	r26, r24
    40e2:	b3 70       	andi	r27, 0x03	; 3
    40e4:	2b ed       	ldi	r18, 0xDB	; 219
    40e6:	36 ea       	ldi	r19, 0xA6	; 166
    40e8:	43 e2       	ldi	r20, 0x23	; 35
    40ea:	50 e0       	ldi	r21, 0x00	; 0
    40ec:	0e 94 77 27 	call	0x4eee	; 0x4eee <__muluhisi3>
    40f0:	dc 01       	movw	r26, r24
    40f2:	cb 01       	movw	r24, r22
    40f4:	07 2e       	mov	r0, r23
    40f6:	7a e0       	ldi	r23, 0x0A	; 10
    40f8:	b6 95       	lsr	r27
    40fa:	a7 95       	ror	r26
    40fc:	97 95       	ror	r25
    40fe:	87 95       	ror	r24
    4100:	7a 95       	dec	r23
    4102:	d1 f7       	brne	.-12     	; 0x40f8 <CellDataConvertVoltage+0x1a>
    4104:	70 2d       	mov	r23, r0
    4106:	9f 5f       	subi	r25, 0xFF	; 255
    4108:	af 4f       	sbci	r26, 0xFF	; 255
    410a:	bf 4f       	sbci	r27, 0xFF	; 255
    410c:	07 2e       	mov	r0, r23
    410e:	79 e0       	ldi	r23, 0x09	; 9
    4110:	b6 95       	lsr	r27
    4112:	a7 95       	ror	r26
    4114:	97 95       	ror	r25
    4116:	87 95       	ror	r24
    4118:	7a 95       	dec	r23
    411a:	d1 f7       	brne	.-12     	; 0x4110 <CellDataConvertVoltage+0x32>
    411c:	70 2d       	mov	r23, r0
    411e:	9c 01       	movw	r18, r24
    4120:	01 97       	sbiw	r24, 0x01	; 1
    4122:	8e 3f       	cpi	r24, 0xFE	; 254
    4124:	9f 4f       	sbci	r25, 0xFF	; 255
    4126:	10 f4       	brcc	.+4      	; 0x412c <CellDataConvertVoltage+0x4e>
    4128:	81 e0       	ldi	r24, 0x01	; 1
    412a:	03 c0       	rjmp	.+6      	; 0x4132 <CellDataConvertVoltage+0x54>
    412c:	80 e0       	ldi	r24, 0x00	; 0
    412e:	20 e0       	ldi	r18, 0x00	; 0
    4130:	30 e0       	ldi	r19, 0x00	; 0
    4132:	30 97       	sbiw	r30, 0x00	; 0
    4134:	11 f0       	breq	.+4      	; 0x413a <CellDataConvertVoltage+0x5c>
    4136:	31 83       	std	Z+1, r19	; 0x01
    4138:	20 83       	st	Z, r18
    413a:	08 95       	ret

Disassembly of section .text.CellDataConvertTemperature:

00003fb6 <CellDataConvertTemperature>:
    3fb6:	8f 3f       	cpi	r24, 0xFF	; 255
    3fb8:	2f ef       	ldi	r18, 0xFF	; 255
    3fba:	92 07       	cpc	r25, r18
    3fbc:	29 f1       	breq	.+74     	; 0x4008 <CellDataConvertTemperature+0x52>
    3fbe:	28 2f       	mov	r18, r24
    3fc0:	2f 70       	andi	r18, 0x0F	; 15
    3fc2:	94 ff       	sbrs	r25, 4
    3fc4:	02 c0       	rjmp	.+4      	; 0x3fca <CellDataConvertTemperature+0x14>
    3fc6:	90 6f       	ori	r25, 0xF0	; 240
    3fc8:	01 c0       	rjmp	.+2      	; 0x3fcc <CellDataConvertTemperature+0x16>
    3fca:	9f 77       	andi	r25, 0x7F	; 127
    3fcc:	ac 01       	movw	r20, r24
    3fce:	55 95       	asr	r21
    3fd0:	47 95       	ror	r20
    3fd2:	55 95       	asr	r21
    3fd4:	47 95       	ror	r20
    3fd6:	55 95       	asr	r21
    3fd8:	47 95       	ror	r20
    3fda:	55 95       	asr	r21
    3fdc:	47 95       	ror	r20
    3fde:	34 e6       	ldi	r19, 0x64	; 100
    3fe0:	34 9f       	mul	r19, r20
    3fe2:	c0 01       	movw	r24, r0
    3fe4:	35 9f       	mul	r19, r21
    3fe6:	90 0d       	add	r25, r0
    3fe8:	11 24       	eor	r1, r1
    3fea:	30 e0       	ldi	r19, 0x00	; 0
    3fec:	40 e0       	ldi	r20, 0x00	; 0
    3fee:	26 5f       	subi	r18, 0xF6	; 246
    3ff0:	3c 4f       	sbci	r19, 0xFC	; 252
    3ff2:	4f 4f       	sbci	r20, 0xFF	; 255
    3ff4:	f9 01       	movw	r30, r18
    3ff6:	24 91       	lpm	r18, Z
    3ff8:	47 fd       	sbrc	r20, 7
    3ffa:	20 81       	ld	r18, Z
    3ffc:	82 0f       	add	r24, r18
    3ffe:	91 1d       	adc	r25, r1
    4000:	81 56       	subi	r24, 0x61	; 97
    4002:	9a 4e       	sbci	r25, 0xEA	; 234
    4004:	21 e0       	ldi	r18, 0x01	; 1
    4006:	01 c0       	rjmp	.+2      	; 0x400a <CellDataConvertTemperature+0x54>
    4008:	20 e0       	ldi	r18, 0x00	; 0
    400a:	61 15       	cp	r22, r1
    400c:	71 05       	cpc	r23, r1
    400e:	19 f0       	breq	.+6      	; 0x4016 <CellDataConvertTemperature+0x60>
    4010:	fb 01       	movw	r30, r22
    4012:	91 83       	std	Z+1, r25	; 0x01
    4014:	80 83       	st	Z, r24
    4016:	82 2f       	mov	r24, r18
    4018:	08 95       	ret

Disassembly of section .text.ModuleCurrentConvertReadings:

000027e4 <ModuleCurrentConvertReadings>:
    27e4:	a0 91 5a 01 	lds	r26, 0x015A	; 0x80015a <sg_sFrame+0x4a>
    27e8:	b0 91 5b 01 	lds	r27, 0x015B	; 0x80015b <sg_sFrame+0x4b>
    27ec:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <sg_sFrame+0x4d>
    27f0:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <sg_sFrame+0x4e>
    27f4:	e0 91 8a 09 	lds	r30, 0x098A	; 0x80098a <sg_u8CurrentBufferIndex>
    27f8:	ef 3f       	cpi	r30, 0xFF	; 255
    27fa:	81 f4       	brne	.+32     	; 0x281c <ModuleCurrentConvertReadings+0x38>
    27fc:	07 c0       	rjmp	.+14     	; 0x280c <ModuleCurrentConvertReadings+0x28>
    27fe:	f0 e0       	ldi	r31, 0x00	; 0
    2800:	ee 0f       	add	r30, r30
    2802:	ff 1f       	adc	r31, r31
    2804:	ef 5d       	subi	r30, 0xDF	; 223
    2806:	f6 4f       	sbci	r31, 0xF6	; 246
    2808:	91 83       	std	Z+1, r25	; 0x01
    280a:	80 83       	st	Z, r24
    280c:	e0 91 8a 09 	lds	r30, 0x098A	; 0x80098a <sg_u8CurrentBufferIndex>
    2810:	ef 5f       	subi	r30, 0xFF	; 255
    2812:	e0 93 8a 09 	sts	0x098A, r30	; 0x80098a <sg_u8CurrentBufferIndex>
    2816:	e8 30       	cpi	r30, 0x08	; 8
    2818:	90 f3       	brcs	.-28     	; 0x27fe <ModuleCurrentConvertReadings+0x1a>
    281a:	0f c0       	rjmp	.+30     	; 0x283a <ModuleCurrentConvertReadings+0x56>
    281c:	21 e0       	ldi	r18, 0x01	; 1
    281e:	2e 0f       	add	r18, r30
    2820:	20 93 8a 09 	sts	0x098A, r18	; 0x80098a <sg_u8CurrentBufferIndex>
    2824:	f0 e0       	ldi	r31, 0x00	; 0
    2826:	ee 0f       	add	r30, r30
    2828:	ff 1f       	adc	r31, r31
    282a:	ef 5d       	subi	r30, 0xDF	; 223
    282c:	f6 4f       	sbci	r31, 0xF6	; 246
    282e:	91 83       	std	Z+1, r25	; 0x01
    2830:	80 83       	st	Z, r24
    2832:	28 30       	cpi	r18, 0x08	; 8
    2834:	10 f0       	brcs	.+4      	; 0x283a <ModuleCurrentConvertReadings+0x56>
    2836:	10 92 8a 09 	sts	0x098A, r1	; 0x80098a <sg_u8CurrentBufferIndex>
    283a:	80 e0       	ldi	r24, 0x00	; 0
    283c:	20 e0       	ldi	r18, 0x00	; 0
    283e:	30 e0       	ldi	r19, 0x00	; 0
    2840:	0b c0       	rjmp	.+22     	; 0x2858 <ModuleCurrentConvertReadings+0x74>
    2842:	e8 2f       	mov	r30, r24
    2844:	f0 e0       	ldi	r31, 0x00	; 0
    2846:	ee 0f       	add	r30, r30
    2848:	ff 1f       	adc	r31, r31
    284a:	ef 5d       	subi	r30, 0xDF	; 223
    284c:	f6 4f       	sbci	r31, 0xF6	; 246
    284e:	40 81       	ld	r20, Z
    2850:	51 81       	ldd	r21, Z+1	; 0x01
    2852:	24 0f       	add	r18, r20
    2854:	35 1f       	adc	r19, r21
    2856:	8f 5f       	subi	r24, 0xFF	; 255
    2858:	88 30       	cpi	r24, 0x08	; 8
    285a:	98 f3       	brcs	.-26     	; 0x2842 <ModuleCurrentConvertReadings+0x5e>
    285c:	c9 01       	movw	r24, r18
    285e:	99 23       	and	r25, r25
    2860:	0c f4       	brge	.+2      	; 0x2864 <ModuleCurrentConvertReadings+0x80>
    2862:	07 96       	adiw	r24, 0x07	; 7
    2864:	95 95       	asr	r25
    2866:	87 95       	ror	r24
    2868:	95 95       	asr	r25
    286a:	87 95       	ror	r24
    286c:	95 95       	asr	r25
    286e:	87 95       	ror	r24
    2870:	a8 1b       	sub	r26, r24
    2872:	b9 0b       	sbc	r27, r25
    2874:	20 e8       	ldi	r18, 0x80	; 128
    2876:	3c e0       	ldi	r19, 0x0C	; 12
    2878:	0e 94 03 28 	call	0x5006	; 0x5006 <__usmulhisi3>
    287c:	ab 01       	movw	r20, r22
    287e:	bc 01       	movw	r22, r24
    2880:	5f 5f       	subi	r21, 0xFF	; 255
    2882:	6f 4f       	sbci	r22, 0xFF	; 255
    2884:	7f 4f       	sbci	r23, 0xFF	; 255
    2886:	db 01       	movw	r26, r22
    2888:	ca 01       	movw	r24, r20
    288a:	77 23       	and	r23, r23
    288c:	24 f4       	brge	.+8      	; 0x2896 <ModuleCurrentConvertReadings+0xb2>
    288e:	81 50       	subi	r24, 0x01	; 1
    2890:	9e 4f       	sbci	r25, 0xFE	; 254
    2892:	af 4f       	sbci	r26, 0xFF	; 255
    2894:	bf 4f       	sbci	r27, 0xFF	; 255
    2896:	07 2e       	mov	r0, r23
    2898:	79 e0       	ldi	r23, 0x09	; 9
    289a:	b5 95       	asr	r27
    289c:	a7 95       	ror	r26
    289e:	97 95       	ror	r25
    28a0:	87 95       	ror	r24
    28a2:	7a 95       	dec	r23
    28a4:	d1 f7       	brne	.-12     	; 0x289a <ModuleCurrentConvertReadings+0xb6>
    28a6:	70 2d       	mov	r23, r0
    28a8:	90 58       	subi	r25, 0x80	; 128
    28aa:	af 4f       	sbci	r26, 0xFF	; 255
    28ac:	bf 4f       	sbci	r27, 0xFF	; 255
    28ae:	e0 e1       	ldi	r30, 0x10	; 16
    28b0:	f1 e0       	ldi	r31, 0x01	; 1
    28b2:	91 ab       	std	Z+49, r25	; 0x31
    28b4:	80 ab       	std	Z+48, r24	; 0x30
    28b6:	20 a9       	ldd	r18, Z+48	; 0x30
    28b8:	31 a9       	ldd	r19, Z+49	; 0x31
    28ba:	86 89       	ldd	r24, Z+22	; 0x16
    28bc:	97 89       	ldd	r25, Z+23	; 0x17
    28be:	82 17       	cp	r24, r18
    28c0:	93 07       	cpc	r25, r19
    28c2:	20 f4       	brcc	.+8      	; 0x28cc <ModuleCurrentConvertReadings+0xe8>
    28c4:	80 a9       	ldd	r24, Z+48	; 0x30
    28c6:	91 a9       	ldd	r25, Z+49	; 0x31
    28c8:	97 8b       	std	Z+23, r25	; 0x17
    28ca:	86 8b       	std	Z+22, r24	; 0x16
    28cc:	e0 e1       	ldi	r30, 0x10	; 16
    28ce:	f1 e0       	ldi	r31, 0x01	; 1
    28d0:	20 a9       	ldd	r18, Z+48	; 0x30
    28d2:	31 a9       	ldd	r19, Z+49	; 0x31
    28d4:	80 8d       	ldd	r24, Z+24	; 0x18
    28d6:	91 8d       	ldd	r25, Z+25	; 0x19
    28d8:	28 17       	cp	r18, r24
    28da:	39 07       	cpc	r19, r25
    28dc:	20 f4       	brcc	.+8      	; 0x28e6 <ModuleCurrentConvertReadings+0x102>
    28de:	80 a9       	ldd	r24, Z+48	; 0x30
    28e0:	91 a9       	ldd	r25, Z+49	; 0x31
    28e2:	91 8f       	std	Z+25, r25	; 0x19
    28e4:	80 8f       	std	Z+24, r24	; 0x18
    28e6:	08 95       	ret

Disassembly of section .text.__vector_1:

00004af6 <__vector_1>:

// NOTE: If you're getting unexpected AVR resets, uncomment these unused handlers to see
// if another interrupt is being taken that doesn't have a handler. AVR Defaults to jumping
// to 0 when not vector is programmed.
ISR(ANACOMP0_vect, ISR_BLOCK)
{
    4af6:	1f 92       	push	r1
    4af8:	0f 92       	push	r0
    4afa:	0f b6       	in	r0, 0x3f	; 63
    4afc:	0f 92       	push	r0
    4afe:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) ANACOMP0_vect;
    4b00:	8b e7       	ldi	r24, 0x7B	; 123
    4b02:	95 e2       	ldi	r25, 0x25	; 37
    4b04:	80 93 7d 09 	sts	0x097D, r24	; 0x80097d <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4b08:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4b0c:	80 93 7c 09 	sts	0x097C, r24	; 0x80097c <sg_u8PCMSK0>
    4b10:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4b14:	80 93 7b 09 	sts	0x097B, r24	; 0x80097b <sg_u8PCMSK1>
    4b18:	ff cf       	rjmp	.-2      	; 0x4b18 <__vector_1+0x22>

Disassembly of section .text.__vector_2:

00004b1a <__vector_2>:
	while (1);
}

ISR(ANACOMP1_vect, ISR_BLOCK)
{
    4b1a:	1f 92       	push	r1
    4b1c:	0f 92       	push	r0
    4b1e:	0f b6       	in	r0, 0x3f	; 63
    4b20:	0f 92       	push	r0
    4b22:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) ANACOMP1_vect;
    4b24:	8d e8       	ldi	r24, 0x8D	; 141
    4b26:	95 e2       	ldi	r25, 0x25	; 37
    4b28:	80 93 7d 09 	sts	0x097D, r24	; 0x80097d <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4b2c:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4b30:	80 93 7c 09 	sts	0x097C, r24	; 0x80097c <sg_u8PCMSK0>
    4b34:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4b38:	80 93 7b 09 	sts	0x097B, r24	; 0x80097b <sg_u8PCMSK1>
    4b3c:	ff cf       	rjmp	.-2      	; 0x4b3c <__vector_2+0x22>

Disassembly of section .text.__vector_3:

00004b3e <__vector_3>:
	while (1);
}

ISR(ANACOMP2_vect, ISR_BLOCK)
{
    4b3e:	1f 92       	push	r1
    4b40:	0f 92       	push	r0
    4b42:	0f b6       	in	r0, 0x3f	; 63
    4b44:	0f 92       	push	r0
    4b46:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) ANACOMP2_vect;
    4b48:	8f e9       	ldi	r24, 0x9F	; 159
    4b4a:	95 e2       	ldi	r25, 0x25	; 37
    4b4c:	80 93 7d 09 	sts	0x097D, r24	; 0x80097d <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4b50:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4b54:	80 93 7c 09 	sts	0x097C, r24	; 0x80097c <sg_u8PCMSK0>
    4b58:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4b5c:	80 93 7b 09 	sts	0x097B, r24	; 0x80097b <sg_u8PCMSK1>
    4b60:	ff cf       	rjmp	.-2      	; 0x4b60 <__vector_3+0x22>

Disassembly of section .text.__vector_4:

00004b62 <__vector_4>:
	while (1);
}

ISR(ANACOMP3_vect, ISR_BLOCK)
{
    4b62:	1f 92       	push	r1
    4b64:	0f 92       	push	r0
    4b66:	0f b6       	in	r0, 0x3f	; 63
    4b68:	0f 92       	push	r0
    4b6a:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) ANACOMP3_vect;
    4b6c:	81 eb       	ldi	r24, 0xB1	; 177
    4b6e:	95 e2       	ldi	r25, 0x25	; 37
    4b70:	80 93 7d 09 	sts	0x097D, r24	; 0x80097d <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4b74:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4b78:	80 93 7c 09 	sts	0x097C, r24	; 0x80097c <sg_u8PCMSK0>
    4b7c:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4b80:	80 93 7b 09 	sts	0x097B, r24	; 0x80097b <sg_u8PCMSK1>
    4b84:	ff cf       	rjmp	.-2      	; 0x4b84 <__vector_4+0x22>

Disassembly of section .text.__vector_5:

00004b86 <__vector_5>:
	while (1);
}

ISR(PSC_FAULT_vect, ISR_BLOCK)
{
    4b86:	1f 92       	push	r1
    4b88:	0f 92       	push	r0
    4b8a:	0f b6       	in	r0, 0x3f	; 63
    4b8c:	0f 92       	push	r0
    4b8e:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) PSC_FAULT_vect;
    4b90:	83 ec       	ldi	r24, 0xC3	; 195
    4b92:	95 e2       	ldi	r25, 0x25	; 37
    4b94:	80 93 7d 09 	sts	0x097D, r24	; 0x80097d <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4b98:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4b9c:	80 93 7c 09 	sts	0x097C, r24	; 0x80097c <sg_u8PCMSK0>
    4ba0:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4ba4:	80 93 7b 09 	sts	0x097B, r24	; 0x80097b <sg_u8PCMSK1>
    4ba8:	ff cf       	rjmp	.-2      	; 0x4ba8 <__vector_5+0x22>

Disassembly of section .text.__vector_6:

00004baa <__vector_6>:
	while (1);
}

ISR(PSC_EC_vect, ISR_BLOCK)
{
    4baa:	1f 92       	push	r1
    4bac:	0f 92       	push	r0
    4bae:	0f b6       	in	r0, 0x3f	; 63
    4bb0:	0f 92       	push	r0
    4bb2:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) PSC_EC_vect;
    4bb4:	85 ed       	ldi	r24, 0xD5	; 213
    4bb6:	95 e2       	ldi	r25, 0x25	; 37
    4bb8:	80 93 7d 09 	sts	0x097D, r24	; 0x80097d <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4bbc:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4bc0:	80 93 7c 09 	sts	0x097C, r24	; 0x80097c <sg_u8PCMSK0>
    4bc4:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4bc8:	80 93 7b 09 	sts	0x097B, r24	; 0x80097b <sg_u8PCMSK1>
    4bcc:	ff cf       	rjmp	.-2      	; 0x4bcc <__vector_6+0x22>

Disassembly of section .text.__vector_22:

00004bce <__vector_22>:
	while (1);
}

ISR(PCINT0_vect, ISR_BLOCK)
{
    4bce:	1f 92       	push	r1
    4bd0:	0f 92       	push	r0
    4bd2:	0f b6       	in	r0, 0x3f	; 63
    4bd4:	0f 92       	push	r0
    4bd6:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) PCINT0_vect;
    4bd8:	87 ee       	ldi	r24, 0xE7	; 231
    4bda:	95 e2       	ldi	r25, 0x25	; 37
    4bdc:	80 93 7d 09 	sts	0x097D, r24	; 0x80097d <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4be0:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4be4:	80 93 7c 09 	sts	0x097C, r24	; 0x80097c <sg_u8PCMSK0>
    4be8:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4bec:	80 93 7b 09 	sts	0x097B, r24	; 0x80097b <sg_u8PCMSK1>
    4bf0:	ff cf       	rjmp	.-2      	; 0x4bf0 <__vector_22+0x22>

Disassembly of section .text.__vector_9:

00004bf2 <__vector_9>:
// 	while (1);
// }
*/

ISR(INT2_vect, ISR_BLOCK)
{
    4bf2:	1f 92       	push	r1
    4bf4:	0f 92       	push	r0
    4bf6:	0f b6       	in	r0, 0x3f	; 63
    4bf8:	0f 92       	push	r0
    4bfa:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) INT2_vect;
    4bfc:	89 ef       	ldi	r24, 0xF9	; 249
    4bfe:	95 e2       	ldi	r25, 0x25	; 37
    4c00:	80 93 7d 09 	sts	0x097D, r24	; 0x80097d <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4c04:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4c08:	80 93 7c 09 	sts	0x097C, r24	; 0x80097c <sg_u8PCMSK0>
    4c0c:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4c10:	80 93 7b 09 	sts	0x097B, r24	; 0x80097b <sg_u8PCMSK1>
    4c14:	ff cf       	rjmp	.-2      	; 0x4c14 <__vector_9+0x22>

Disassembly of section .text.__vector_11:

00004c16 <__vector_11>:
// 	while (1);
// }


ISR(TIMER1_CAPT_vect, ISR_BLOCK)
{
    4c16:	1f 92       	push	r1
    4c18:	0f 92       	push	r0
    4c1a:	0f b6       	in	r0, 0x3f	; 63
    4c1c:	0f 92       	push	r0
    4c1e:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) TIMER1_CAPT_vect;
    4c20:	8b e0       	ldi	r24, 0x0B	; 11
    4c22:	96 e2       	ldi	r25, 0x26	; 38
    4c24:	80 93 7d 09 	sts	0x097D, r24	; 0x80097d <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4c28:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4c2c:	80 93 7c 09 	sts	0x097C, r24	; 0x80097c <sg_u8PCMSK0>
    4c30:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4c34:	80 93 7b 09 	sts	0x097B, r24	; 0x80097b <sg_u8PCMSK1>
    4c38:	ff cf       	rjmp	.-2      	; 0x4c38 <__vector_11+0x22>

Disassembly of section .text.__vector_13:

00004c3a <__vector_13>:
// }



ISR(TIMER1_COMPB_vect, ISR_BLOCK)
{
    4c3a:	1f 92       	push	r1
    4c3c:	0f 92       	push	r0
    4c3e:	0f b6       	in	r0, 0x3f	; 63
    4c40:	0f 92       	push	r0
    4c42:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) TIMER1_COMPB_vect;
    4c44:	8d e1       	ldi	r24, 0x1D	; 29
    4c46:	96 e2       	ldi	r25, 0x26	; 38
    4c48:	80 93 7d 09 	sts	0x097D, r24	; 0x80097d <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4c4c:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4c50:	80 93 7c 09 	sts	0x097C, r24	; 0x80097c <sg_u8PCMSK0>
    4c54:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4c58:	80 93 7b 09 	sts	0x097B, r24	; 0x80097b <sg_u8PCMSK1>
    4c5c:	ff cf       	rjmp	.-2      	; 0x4c5c <__vector_13+0x22>

Disassembly of section .text.__vector_14:

00004c5e <__vector_14>:
	while (1);
}


ISR(TIMER1_OVF_vect, ISR_BLOCK)
{
    4c5e:	1f 92       	push	r1
    4c60:	0f 92       	push	r0
    4c62:	0f b6       	in	r0, 0x3f	; 63
    4c64:	0f 92       	push	r0
    4c66:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) TIMER1_OVF_vect;
    4c68:	8f e2       	ldi	r24, 0x2F	; 47
    4c6a:	96 e2       	ldi	r25, 0x26	; 38
    4c6c:	80 93 7d 09 	sts	0x097D, r24	; 0x80097d <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4c70:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4c74:	80 93 7c 09 	sts	0x097C, r24	; 0x80097c <sg_u8PCMSK0>
    4c78:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4c7c:	80 93 7b 09 	sts	0x097B, r24	; 0x80097b <sg_u8PCMSK1>
    4c80:	ff cf       	rjmp	.-2      	; 0x4c80 <__vector_14+0x22>

Disassembly of section .text.__vector_17:

00004c82 <__vector_17>:
	while (1);
}

ISR(TIMER0_OVF_vect, ISR_BLOCK)
{
    4c82:	1f 92       	push	r1
    4c84:	0f 92       	push	r0
    4c86:	0f b6       	in	r0, 0x3f	; 63
    4c88:	0f 92       	push	r0
    4c8a:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) TIMER0_OVF_vect;
    4c8c:	81 e4       	ldi	r24, 0x41	; 65
    4c8e:	96 e2       	ldi	r25, 0x26	; 38
    4c90:	80 93 7d 09 	sts	0x097D, r24	; 0x80097d <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4c94:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4c98:	80 93 7c 09 	sts	0x097C, r24	; 0x80097c <sg_u8PCMSK0>
    4c9c:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4ca0:	80 93 7b 09 	sts	0x097B, r24	; 0x80097b <sg_u8PCMSK1>
    4ca4:	ff cf       	rjmp	.-2      	; 0x4ca4 <__vector_17+0x22>

Disassembly of section .text.__vector_19:

00004ca6 <__vector_19>:
	while (1);
}

ISR(CAN_TOVF_vect, ISR_BLOCK)
{
    4ca6:	1f 92       	push	r1
    4ca8:	0f 92       	push	r0
    4caa:	0f b6       	in	r0, 0x3f	; 63
    4cac:	0f 92       	push	r0
    4cae:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) CAN_TOVF_vect;
    4cb0:	83 e5       	ldi	r24, 0x53	; 83
    4cb2:	96 e2       	ldi	r25, 0x26	; 38
    4cb4:	80 93 7d 09 	sts	0x097D, r24	; 0x80097d <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4cb8:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4cbc:	80 93 7c 09 	sts	0x097C, r24	; 0x80097c <sg_u8PCMSK0>
    4cc0:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4cc4:	80 93 7b 09 	sts	0x097B, r24	; 0x80097b <sg_u8PCMSK1>
    4cc8:	ff cf       	rjmp	.-2      	; 0x4cc8 <__vector_19+0x22>

Disassembly of section .text.__vector_21:

00004cca <__vector_21>:
	while (1);
}

ISR(LIN_ERR_vect, ISR_BLOCK)
{
    4cca:	1f 92       	push	r1
    4ccc:	0f 92       	push	r0
    4cce:	0f b6       	in	r0, 0x3f	; 63
    4cd0:	0f 92       	push	r0
    4cd2:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) LIN_ERR_vect;
    4cd4:	85 e6       	ldi	r24, 0x65	; 101
    4cd6:	96 e2       	ldi	r25, 0x26	; 38
    4cd8:	80 93 7d 09 	sts	0x097D, r24	; 0x80097d <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4cdc:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4ce0:	80 93 7c 09 	sts	0x097C, r24	; 0x80097c <sg_u8PCMSK0>
    4ce4:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4ce8:	80 93 7b 09 	sts	0x097B, r24	; 0x80097b <sg_u8PCMSK1>
    4cec:	ff cf       	rjmp	.-2      	; 0x4cec <__vector_21+0x22>

Disassembly of section .text.__vector_25:

00004cee <__vector_25>:
// 	while (1);
// }


ISR(PCINT3_vect, ISR_BLOCK)
{
    4cee:	1f 92       	push	r1
    4cf0:	0f 92       	push	r0
    4cf2:	0f b6       	in	r0, 0x3f	; 63
    4cf4:	0f 92       	push	r0
    4cf6:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) PCINT3_vect;
    4cf8:	87 e7       	ldi	r24, 0x77	; 119
    4cfa:	96 e2       	ldi	r25, 0x26	; 38
    4cfc:	80 93 7d 09 	sts	0x097D, r24	; 0x80097d <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4d00:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4d04:	80 93 7c 09 	sts	0x097C, r24	; 0x80097c <sg_u8PCMSK0>
    4d08:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4d0c:	80 93 7b 09 	sts	0x097B, r24	; 0x80097b <sg_u8PCMSK1>
    4d10:	ff cf       	rjmp	.-2      	; 0x4d10 <__vector_25+0x22>

Disassembly of section .text.__vector_26:

00004d12 <__vector_26>:
	while (1);
}


ISR(SPI_STC_vect, ISR_BLOCK)
{
    4d12:	1f 92       	push	r1
    4d14:	0f 92       	push	r0
    4d16:	0f b6       	in	r0, 0x3f	; 63
    4d18:	0f 92       	push	r0
    4d1a:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) SPI_STC_vect;
    4d1c:	89 e8       	ldi	r24, 0x89	; 137
    4d1e:	96 e2       	ldi	r25, 0x26	; 38
    4d20:	80 93 7d 09 	sts	0x097D, r24	; 0x80097d <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4d24:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4d28:	80 93 7c 09 	sts	0x097C, r24	; 0x80097c <sg_u8PCMSK0>
    4d2c:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4d30:	80 93 7b 09 	sts	0x097B, r24	; 0x80097b <sg_u8PCMSK1>
    4d34:	ff cf       	rjmp	.-2      	; 0x4d34 <__vector_26+0x22>

Disassembly of section .text.__vector_29:

00004d36 <__vector_29>:
	while (1);
}

ISR(EE_READY_vect, ISR_BLOCK)
{
    4d36:	1f 92       	push	r1
    4d38:	0f 92       	push	r0
    4d3a:	0f b6       	in	r0, 0x3f	; 63
    4d3c:	0f 92       	push	r0
    4d3e:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) EE_READY_vect;
    4d40:	8b e9       	ldi	r24, 0x9B	; 155
    4d42:	96 e2       	ldi	r25, 0x26	; 38
    4d44:	80 93 7d 09 	sts	0x097D, r24	; 0x80097d <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4d48:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4d4c:	80 93 7c 09 	sts	0x097C, r24	; 0x80097c <sg_u8PCMSK0>
    4d50:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4d54:	80 93 7b 09 	sts	0x097B, r24	; 0x80097b <sg_u8PCMSK1>
    4d58:	ff cf       	rjmp	.-2      	; 0x4d58 <__vector_29+0x22>

Disassembly of section .text.__vector_30:

00004d5a <__vector_30>:
	while (1);
}

ISR(SPM_READY_vect, ISR_BLOCK)
{
    4d5a:	1f 92       	push	r1
    4d5c:	0f 92       	push	r0
    4d5e:	0f b6       	in	r0, 0x3f	; 63
    4d60:	0f 92       	push	r0
    4d62:	11 24       	eor	r1, r1
	sg_u8UnhandledInterruptVector = (uint8_t) SPM_READY_vect;
    4d64:	8d ea       	ldi	r24, 0xAD	; 173
    4d66:	96 e2       	ldi	r25, 0x26	; 38
    4d68:	80 93 7d 09 	sts	0x097D, r24	; 0x80097d <sg_u8UnhandledInterruptVector>
	sg_u8PCMSK0 = PCMSK0; sg_u8PCMSK1 = PCMSK1;
    4d6c:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
    4d70:	80 93 7c 09 	sts	0x097C, r24	; 0x80097c <sg_u8PCMSK0>
    4d74:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f006b>
    4d78:	80 93 7b 09 	sts	0x097B, r24	; 0x80097b <sg_u8PCMSK1>
    4d7c:	ff cf       	rjmp	.-2      	; 0x4d7c <__vector_30+0x22>

Disassembly of section .text.CurrentThresholdsGet:

000037d0 <CurrentThresholdsGet>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    37d0:	0f 93       	push	r16
    37d2:	1f 93       	push	r17
    37d4:	cf 93       	push	r28
    37d6:	df 93       	push	r29
    37d8:	8c 01       	movw	r16, r24
    37da:	eb 01       	movw	r28, r22
    37dc:	89 2b       	or	r24, r25
    37de:	f9 f0       	breq	.+62     	; 0x381e <CurrentThresholdsGet+0x4e>
    37e0:	87 e0       	ldi	r24, 0x07	; 7
    37e2:	90 e0       	ldi	r25, 0x00	; 0
    37e4:	0e 94 a1 27 	call	0x4f42	; 0x4f42 <EEPROMRead>
    37e8:	90 e0       	ldi	r25, 0x00	; 0
    37ea:	f8 01       	movw	r30, r16
    37ec:	91 83       	std	Z+1, r25	; 0x01
    37ee:	80 83       	st	Z, r24
    37f0:	88 e0       	ldi	r24, 0x08	; 8
    37f2:	90 e0       	ldi	r25, 0x00	; 0
    37f4:	0e 94 a1 27 	call	0x4f42	; 0x4f42 <EEPROMRead>
    37f8:	90 e0       	ldi	r25, 0x00	; 0
    37fa:	98 2f       	mov	r25, r24
    37fc:	88 27       	eor	r24, r24
    37fe:	f8 01       	movw	r30, r16
    3800:	20 81       	ld	r18, Z
    3802:	31 81       	ldd	r19, Z+1	; 0x01
    3804:	82 2b       	or	r24, r18
    3806:	93 2b       	or	r25, r19
    3808:	91 83       	std	Z+1, r25	; 0x01
    380a:	80 83       	st	Z, r24
    380c:	01 97       	sbiw	r24, 0x01	; 1
    380e:	8e 3f       	cpi	r24, 0xFE	; 254
    3810:	9f 4f       	sbci	r25, 0xFF	; 255
    3812:	28 f0       	brcs	.+10     	; 0x381e <CurrentThresholdsGet+0x4e>
    3814:	8c ec       	ldi	r24, 0xCC	; 204
    3816:	97 e7       	ldi	r25, 0x77	; 119
    3818:	f8 01       	movw	r30, r16
    381a:	91 83       	std	Z+1, r25	; 0x01
    381c:	80 83       	st	Z, r24
    381e:	20 97       	sbiw	r28, 0x00	; 0
    3820:	e1 f0       	breq	.+56     	; 0x385a <CurrentThresholdsGet+0x8a>
    3822:	85 e0       	ldi	r24, 0x05	; 5
    3824:	90 e0       	ldi	r25, 0x00	; 0
    3826:	0e 94 a1 27 	call	0x4f42	; 0x4f42 <EEPROMRead>
    382a:	90 e0       	ldi	r25, 0x00	; 0
    382c:	99 83       	std	Y+1, r25	; 0x01
    382e:	88 83       	st	Y, r24
    3830:	86 e0       	ldi	r24, 0x06	; 6
    3832:	90 e0       	ldi	r25, 0x00	; 0
    3834:	0e 94 a1 27 	call	0x4f42	; 0x4f42 <EEPROMRead>
    3838:	90 e0       	ldi	r25, 0x00	; 0
    383a:	98 2f       	mov	r25, r24
    383c:	88 27       	eor	r24, r24
    383e:	28 81       	ld	r18, Y
    3840:	39 81       	ldd	r19, Y+1	; 0x01
    3842:	82 2b       	or	r24, r18
    3844:	93 2b       	or	r25, r19
    3846:	99 83       	std	Y+1, r25	; 0x01
    3848:	88 83       	st	Y, r24
    384a:	01 97       	sbiw	r24, 0x01	; 1
    384c:	8e 3f       	cpi	r24, 0xFE	; 254
    384e:	9f 4f       	sbci	r25, 0xFF	; 255
    3850:	20 f0       	brcs	.+8      	; 0x385a <CurrentThresholdsGet+0x8a>
    3852:	84 ef       	ldi	r24, 0xF4	; 244
    3854:	91 e8       	ldi	r25, 0x81	; 129
    3856:	99 83       	std	Y+1, r25	; 0x01
    3858:	88 83       	st	Y, r24
    385a:	df 91       	pop	r29
    385c:	cf 91       	pop	r28
    385e:	1f 91       	pop	r17
    3860:	0f 91       	pop	r16
    3862:	08 95       	ret

Disassembly of section .text.CANReceiveCallback:

000011bc <CANReceiveCallback>:
    11bc:	cf 92       	push	r12
    11be:	df 92       	push	r13
    11c0:	ef 92       	push	r14
    11c2:	ff 92       	push	r15
    11c4:	cf 93       	push	r28
    11c6:	fb 01       	movw	r30, r22
    11c8:	90 91 25 03 	lds	r25, 0x0325	; 0x800325 <sg_bModuleRegistered>
    11cc:	10 92 83 09 	sts	0x0983, r1	; 0x800983 <sg_u8TicksSinceLastPackControllerMessage>
    11d0:	82 31       	cpi	r24, 0x12	; 18
    11d2:	29 f4       	brne	.+10     	; 0x11de <CANReceiveCallback+0x22>
    11d4:	80 81       	ld	r24, Z
    11d6:	8f 70       	andi	r24, 0x0F	; 15
    11d8:	0e 94 61 27 	call	0x4ec2	; 0x4ec2 <ModuleControllerStateSetMax>
    11dc:	35 c1       	rjmp	.+618    	; 0x1448 <CANReceiveCallback+0x28c>
    11de:	8f 30       	cpi	r24, 0x0F	; 15
    11e0:	a9 f4       	brne	.+42     	; 0x120c <CANReceiveCallback+0x50>
    11e2:	8a ed       	ldi	r24, 0xDA	; 218
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	a0 e0       	ldi	r26, 0x00	; 0
    11e8:	af 93       	push	r26
    11ea:	9f 93       	push	r25
    11ec:	8f 93       	push	r24
    11ee:	0e 94 ee 27 	call	0x4fdc	; 0x4fdc <DebugOut>
    11f2:	10 92 2b 03 	sts	0x032B, r1	; 0x80032b <sg_u8ModuleRegistrationID>
    11f6:	10 92 25 03 	sts	0x0325, r1	; 0x800325 <sg_bModuleRegistered>
    11fa:	10 92 87 09 	sts	0x0987, r1	; 0x800987 <sg_bIgnoreStatusRequests>
    11fe:	80 e0       	ldi	r24, 0x00	; 0
    1200:	0e 94 1b 28 	call	0x5036	; 0x5036 <ModuleControllerStateSet>
    1204:	0f 90       	pop	r0
    1206:	0f 90       	pop	r0
    1208:	0f 90       	pop	r0
    120a:	1e c1       	rjmp	.+572    	; 0x1448 <CANReceiveCallback+0x28c>
    120c:	80 31       	cpi	r24, 0x10	; 16
    120e:	21 f4       	brne	.+8      	; 0x1218 <CANReceiveCallback+0x5c>
    1210:	80 e0       	ldi	r24, 0x00	; 0
    1212:	0e 94 1b 28 	call	0x5036	; 0x5036 <ModuleControllerStateSet>
    1216:	18 c1       	rjmp	.+560    	; 0x1448 <CANReceiveCallback+0x28c>
    1218:	81 31       	cpi	r24, 0x11	; 17
    121a:	59 f4       	brne	.+22     	; 0x1232 <CANReceiveCallback+0x76>
    121c:	20 81       	ld	r18, Z
    121e:	31 81       	ldd	r19, Z+1	; 0x01
    1220:	42 81       	ldd	r20, Z+2	; 0x02
    1222:	53 81       	ldd	r21, Z+3	; 0x03
    1224:	64 81       	ldd	r22, Z+4	; 0x04
    1226:	75 81       	ldd	r23, Z+5	; 0x05
    1228:	86 81       	ldd	r24, Z+6	; 0x06
    122a:	97 81       	ldd	r25, Z+7	; 0x07
    122c:	0e 94 6d 18 	call	0x30da	; 0x30da <RTCSetTime>
    1230:	0b c1       	rjmp	.+534    	; 0x1448 <CANReceiveCallback+0x28c>
    1232:	8d 30       	cpi	r24, 0x0D	; 13
    1234:	09 f0       	breq	.+2      	; 0x1238 <CANReceiveCallback+0x7c>
    1236:	4f c0       	rjmp	.+158    	; 0x12d6 <CANReceiveCallback+0x11a>
    1238:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <sg_bModuleRegistered>
    123c:	81 11       	cpse	r24, r1
    123e:	2f c0       	rjmp	.+94     	; 0x129e <CANReceiveCallback+0xe2>
    1240:	80 91 89 09 	lds	r24, 0x0989	; 0x800989 <sg_bAnnouncementPending>
    1244:	81 11       	cpse	r24, r1
    1246:	2b c0       	rjmp	.+86     	; 0x129e <CANReceiveCallback+0xe2>
    1248:	c0 90 1e 01 	lds	r12, 0x011E	; 0x80011e <sg_sFrame+0xe>
    124c:	d0 90 1f 01 	lds	r13, 0x011F	; 0x80011f <sg_sFrame+0xf>
    1250:	e0 90 20 01 	lds	r14, 0x0120	; 0x800120 <sg_sFrame+0x10>
    1254:	f0 90 21 01 	lds	r15, 0x0121	; 0x800121 <sg_sFrame+0x11>
    1258:	1f 92       	push	r1
    125a:	cf 92       	push	r12
    125c:	85 e0       	ldi	r24, 0x05	; 5
    125e:	91 e0       	ldi	r25, 0x01	; 1
    1260:	a0 e0       	ldi	r26, 0x00	; 0
    1262:	af 93       	push	r26
    1264:	9f 93       	push	r25
    1266:	8f 93       	push	r24
    1268:	0e 94 ee 27 	call	0x4fdc	; 0x4fdc <DebugOut>
    126c:	8d ec       	ldi	r24, 0xCD	; 205
    126e:	c8 9e       	mul	r12, r24
    1270:	c1 2c       	mov	r12, r1
    1272:	11 24       	eor	r1, r1
    1274:	c6 94       	lsr	r12
    1276:	c6 94       	lsr	r12
    1278:	c6 94       	lsr	r12
    127a:	c0 92 88 09 	sts	0x0988, r12	; 0x800988 <sg_u8AnnouncementDelayTicks>
    127e:	80 91 88 09 	lds	r24, 0x0988	; 0x800988 <sg_u8AnnouncementDelayTicks>
    1282:	0f 90       	pop	r0
    1284:	0f 90       	pop	r0
    1286:	0f 90       	pop	r0
    1288:	0f 90       	pop	r0
    128a:	0f 90       	pop	r0
    128c:	81 11       	cpse	r24, r1
    128e:	03 c0       	rjmp	.+6      	; 0x1296 <CANReceiveCallback+0xda>
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	80 93 88 09 	sts	0x0988, r24	; 0x800988 <sg_u8AnnouncementDelayTicks>
    1296:	81 e0       	ldi	r24, 0x01	; 1
    1298:	80 93 89 09 	sts	0x0989, r24	; 0x800989 <sg_bAnnouncementPending>
    129c:	d5 c0       	rjmp	.+426    	; 0x1448 <CANReceiveCallback+0x28c>
    129e:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <sg_bModuleRegistered>
    12a2:	88 23       	and	r24, r24
    12a4:	61 f0       	breq	.+24     	; 0x12be <CANReceiveCallback+0x102>
    12a6:	88 e4       	ldi	r24, 0x48	; 72
    12a8:	91 e0       	ldi	r25, 0x01	; 1
    12aa:	a0 e0       	ldi	r26, 0x00	; 0
    12ac:	af 93       	push	r26
    12ae:	9f 93       	push	r25
    12b0:	8f 93       	push	r24
    12b2:	0e 94 ee 27 	call	0x4fdc	; 0x4fdc <DebugOut>
    12b6:	0f 90       	pop	r0
    12b8:	0f 90       	pop	r0
    12ba:	0f 90       	pop	r0
    12bc:	c5 c0       	rjmp	.+394    	; 0x1448 <CANReceiveCallback+0x28c>
    12be:	86 e7       	ldi	r24, 0x76	; 118
    12c0:	91 e0       	ldi	r25, 0x01	; 1
    12c2:	a0 e0       	ldi	r26, 0x00	; 0
    12c4:	af 93       	push	r26
    12c6:	9f 93       	push	r25
    12c8:	8f 93       	push	r24
    12ca:	0e 94 ee 27 	call	0x4fdc	; 0x4fdc <DebugOut>
    12ce:	0f 90       	pop	r0
    12d0:	0f 90       	pop	r0
    12d2:	0f 90       	pop	r0
    12d4:	b9 c0       	rjmp	.+370    	; 0x1448 <CANReceiveCallback+0x28c>
    12d6:	89 30       	cpi	r24, 0x09	; 9
    12d8:	09 f0       	breq	.+2      	; 0x12dc <CANReceiveCallback+0x120>
    12da:	41 c0       	rjmp	.+130    	; 0x135e <CANReceiveCallback+0x1a2>
    12dc:	48 30       	cpi	r20, 0x08	; 8
    12de:	09 f0       	breq	.+2      	; 0x12e2 <CANReceiveCallback+0x126>
    12e0:	b3 c0       	rjmp	.+358    	; 0x1448 <CANReceiveCallback+0x28c>
    12e2:	f0 80       	ld	r15, Z
    12e4:	82 81       	ldd	r24, Z+2	; 0x02
    12e6:	82 30       	cpi	r24, 0x02	; 2
    12e8:	09 f0       	breq	.+2      	; 0x12ec <CANReceiveCallback+0x130>
    12ea:	ae c0       	rjmp	.+348    	; 0x1448 <CANReceiveCallback+0x28c>
    12ec:	83 81       	ldd	r24, Z+3	; 0x03
    12ee:	83 30       	cpi	r24, 0x03	; 3
    12f0:	09 f0       	breq	.+2      	; 0x12f4 <CANReceiveCallback+0x138>
    12f2:	aa c0       	rjmp	.+340    	; 0x1448 <CANReceiveCallback+0x28c>
    12f4:	40 91 1e 01 	lds	r20, 0x011E	; 0x80011e <sg_sFrame+0xe>
    12f8:	50 91 1f 01 	lds	r21, 0x011F	; 0x80011f <sg_sFrame+0xf>
    12fc:	60 91 20 01 	lds	r22, 0x0120	; 0x800120 <sg_sFrame+0x10>
    1300:	70 91 21 01 	lds	r23, 0x0121	; 0x800121 <sg_sFrame+0x11>
    1304:	84 81       	ldd	r24, Z+4	; 0x04
    1306:	95 81       	ldd	r25, Z+5	; 0x05
    1308:	a6 81       	ldd	r26, Z+6	; 0x06
    130a:	b7 81       	ldd	r27, Z+7	; 0x07
    130c:	48 17       	cp	r20, r24
    130e:	59 07       	cpc	r21, r25
    1310:	6a 07       	cpc	r22, r26
    1312:	7b 07       	cpc	r23, r27
    1314:	09 f0       	breq	.+2      	; 0x1318 <CANReceiveCallback+0x15c>
    1316:	98 c0       	rjmp	.+304    	; 0x1448 <CANReceiveCallback+0x28c>
    1318:	10 92 83 09 	sts	0x0983, r1	; 0x800983 <sg_u8TicksSinceLastPackControllerMessage>
    131c:	f0 92 2b 03 	sts	0x032B, r15	; 0x80032b <sg_u8ModuleRegistrationID>
    1320:	0e 94 ce 27 	call	0x4f9c	; 0x4f9c <SendModuleControllerStatus>
    1324:	c1 e0       	ldi	r28, 0x01	; 1
    1326:	c0 93 20 03 	sts	0x0320, r28	; 0x800320 <sg_bSendHardwareDetail>
    132a:	c0 93 25 03 	sts	0x0325, r28	; 0x800325 <sg_bModuleRegistered>
    132e:	10 92 87 09 	sts	0x0987, r1	; 0x800987 <sg_bIgnoreStatusRequests>
    1332:	1f 92       	push	r1
    1334:	ff 92       	push	r15
    1336:	8e e9       	ldi	r24, 0x9E	; 158
    1338:	91 e0       	ldi	r25, 0x01	; 1
    133a:	a0 e0       	ldi	r26, 0x00	; 0
    133c:	af 93       	push	r26
    133e:	9f 93       	push	r25
    1340:	8f 93       	push	r24
    1342:	0e 94 ee 27 	call	0x4fdc	; 0x4fdc <DebugOut>
    1346:	10 92 89 09 	sts	0x0989, r1	; 0x800989 <sg_bAnnouncementPending>
    134a:	10 92 88 09 	sts	0x0988, r1	; 0x800988 <sg_u8AnnouncementDelayTicks>
    134e:	c0 93 24 03 	sts	0x0324, r28	; 0x800324 <sg_bSendTimeRequest>
    1352:	0f 90       	pop	r0
    1354:	0f 90       	pop	r0
    1356:	0f 90       	pop	r0
    1358:	0f 90       	pop	r0
    135a:	0f 90       	pop	r0
    135c:	75 c0       	rjmp	.+234    	; 0x1448 <CANReceiveCallback+0x28c>
    135e:	44 23       	and	r20, r20
    1360:	09 f4       	brne	.+2      	; 0x1364 <CANReceiveCallback+0x1a8>
    1362:	72 c0       	rjmp	.+228    	; 0x1448 <CANReceiveCallback+0x28c>
    1364:	20 81       	ld	r18, Z
    1366:	91 11       	cpse	r25, r1
    1368:	08 c0       	rjmp	.+16     	; 0x137a <CANReceiveCallback+0x1be>
    136a:	8a 30       	cpi	r24, 0x0A	; 10
    136c:	09 f0       	breq	.+2      	; 0x1370 <CANReceiveCallback+0x1b4>
    136e:	6c c0       	rjmp	.+216    	; 0x1448 <CANReceiveCallback+0x28c>
    1370:	90 91 25 03 	lds	r25, 0x0325	; 0x800325 <sg_bModuleRegistered>
    1374:	99 23       	and	r25, r25
    1376:	09 f4       	brne	.+2      	; 0x137a <CANReceiveCallback+0x1be>
    1378:	67 c0       	rjmp	.+206    	; 0x1448 <CANReceiveCallback+0x28c>
    137a:	90 91 2b 03 	lds	r25, 0x032B	; 0x80032b <sg_u8ModuleRegistrationID>
    137e:	29 13       	cpse	r18, r25
    1380:	63 c0       	rjmp	.+198    	; 0x1448 <CANReceiveCallback+0x28c>
    1382:	8a 30       	cpi	r24, 0x0A	; 10
    1384:	a9 f4       	brne	.+42     	; 0x13b0 <CANReceiveCallback+0x1f4>
    1386:	41 30       	cpi	r20, 0x01	; 1
    1388:	09 f0       	breq	.+2      	; 0x138c <CANReceiveCallback+0x1d0>
    138a:	5e c0       	rjmp	.+188    	; 0x1448 <CANReceiveCallback+0x28c>
    138c:	80 91 87 09 	lds	r24, 0x0987	; 0x800987 <sg_bIgnoreStatusRequests>
    1390:	81 11       	cpse	r24, r1
    1392:	5a c0       	rjmp	.+180    	; 0x1448 <CANReceiveCallback+0x28c>
    1394:	89 ed       	ldi	r24, 0xD9	; 217
    1396:	91 e0       	ldi	r25, 0x01	; 1
    1398:	a0 e0       	ldi	r26, 0x00	; 0
    139a:	af 93       	push	r26
    139c:	9f 93       	push	r25
    139e:	8f 93       	push	r24
    13a0:	0e 94 ee 27 	call	0x4fdc	; 0x4fdc <DebugOut>
    13a4:	0e 94 ce 27 	call	0x4f9c	; 0x4f9c <SendModuleControllerStatus>
    13a8:	0f 90       	pop	r0
    13aa:	0f 90       	pop	r0
    13ac:	0f 90       	pop	r0
    13ae:	4c c0       	rjmp	.+152    	; 0x1448 <CANReceiveCallback+0x28c>
    13b0:	8b 30       	cpi	r24, 0x0B	; 11
    13b2:	f9 f4       	brne	.+62     	; 0x13f2 <CANReceiveCallback+0x236>
    13b4:	43 30       	cpi	r20, 0x03	; 3
    13b6:	09 f0       	breq	.+2      	; 0x13ba <CANReceiveCallback+0x1fe>
    13b8:	47 c0       	rjmp	.+142    	; 0x1448 <CANReceiveCallback+0x28c>
    13ba:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <sg_bSendCellStatus>
    13be:	81 11       	cpse	r24, r1
    13c0:	43 c0       	rjmp	.+134    	; 0x1448 <CANReceiveCallback+0x28c>
    13c2:	81 81       	ldd	r24, Z+1	; 0x01
    13c4:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <sg_sFrame+0x15>
    13c8:	89 17       	cp	r24, r25
    13ca:	f0 f5       	brcc	.+124    	; 0x1448 <CANReceiveCallback+0x28c>
    13cc:	80 93 27 03 	sts	0x0327, r24	; 0x800327 <sg_u8CellStatus>
    13d0:	90 91 27 03 	lds	r25, 0x0327	; 0x800327 <sg_u8CellStatus>
    13d4:	9f 5f       	subi	r25, 0xFF	; 255
    13d6:	90 93 28 03 	sts	0x0328, r25	; 0x800328 <sg_u8CellStatusTarget>
    13da:	8f 3f       	cpi	r24, 0xFF	; 255
    13dc:	31 f4       	brne	.+12     	; 0x13ea <CANReceiveCallback+0x22e>
    13de:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <sg_sFrame+0x15>
    13e2:	80 93 28 03 	sts	0x0328, r24	; 0x800328 <sg_u8CellStatusTarget>
    13e6:	10 92 27 03 	sts	0x0327, r1	; 0x800327 <sg_u8CellStatus>
    13ea:	81 e0       	ldi	r24, 0x01	; 1
    13ec:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <sg_bSendCellStatus>
    13f0:	2b c0       	rjmp	.+86     	; 0x1448 <CANReceiveCallback+0x28c>
    13f2:	8c 30       	cpi	r24, 0x0C	; 12
    13f4:	49 f4       	brne	.+18     	; 0x1408 <CANReceiveCallback+0x24c>
    13f6:	10 92 83 09 	sts	0x0983, r1	; 0x800983 <sg_u8TicksSinceLastPackControllerMessage>
    13fa:	42 30       	cpi	r20, 0x02	; 2
    13fc:	29 f5       	brne	.+74     	; 0x1448 <CANReceiveCallback+0x28c>
    13fe:	81 81       	ldd	r24, Z+1	; 0x01
    1400:	8f 70       	andi	r24, 0x0F	; 15
    1402:	0e 94 1b 28 	call	0x5036	; 0x5036 <ModuleControllerStateSet>
    1406:	20 c0       	rjmp	.+64     	; 0x1448 <CANReceiveCallback+0x28c>
    1408:	85 30       	cpi	r24, 0x05	; 5
    140a:	21 f4       	brne	.+8      	; 0x1414 <CANReceiveCallback+0x258>
    140c:	81 e0       	ldi	r24, 0x01	; 1
    140e:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <sg_bSendHardwareDetail>
    1412:	1a c0       	rjmp	.+52     	; 0x1448 <CANReceiveCallback+0x28c>
    1414:	8e 30       	cpi	r24, 0x0E	; 14
    1416:	c1 f4       	brne	.+48     	; 0x1448 <CANReceiveCallback+0x28c>
    1418:	1f 92       	push	r1
    141a:	2f 93       	push	r18
    141c:	8e ef       	ldi	r24, 0xFE	; 254
    141e:	91 e0       	ldi	r25, 0x01	; 1
    1420:	a0 e0       	ldi	r26, 0x00	; 0
    1422:	af 93       	push	r26
    1424:	9f 93       	push	r25
    1426:	8f 93       	push	r24
    1428:	0e 94 ee 27 	call	0x4fdc	; 0x4fdc <DebugOut>
    142c:	10 92 2b 03 	sts	0x032B, r1	; 0x80032b <sg_u8ModuleRegistrationID>
    1430:	10 92 25 03 	sts	0x0325, r1	; 0x800325 <sg_bModuleRegistered>
    1434:	10 92 87 09 	sts	0x0987, r1	; 0x800987 <sg_bIgnoreStatusRequests>
    1438:	80 e0       	ldi	r24, 0x00	; 0
    143a:	0e 94 1b 28 	call	0x5036	; 0x5036 <ModuleControllerStateSet>
    143e:	0f 90       	pop	r0
    1440:	0f 90       	pop	r0
    1442:	0f 90       	pop	r0
    1444:	0f 90       	pop	r0
    1446:	0f 90       	pop	r0
    1448:	cf 91       	pop	r28
    144a:	ff 90       	pop	r15
    144c:	ef 90       	pop	r14
    144e:	df 90       	pop	r13
    1450:	cf 90       	pop	r12
    1452:	08 95       	ret

Disassembly of section .text.ControllerStatusMessagesSend:

00000810 <ControllerStatusMessagesSend>:
 810:	cf 92       	push	r12
 812:	df 92       	push	r13
 814:	ef 92       	push	r14
 816:	ff 92       	push	r15
 818:	0f 93       	push	r16
 81a:	1f 93       	push	r17
 81c:	cf 93       	push	r28
 81e:	df 93       	push	r29
 820:	00 d0       	rcall	.+0      	; 0x822 <ControllerStatusMessagesSend+0x12>
 822:	00 d0       	rcall	.+0      	; 0x824 <ControllerStatusMessagesSend+0x14>
 824:	cd b7       	in	r28, 0x3d	; 61
 826:	de b7       	in	r29, 0x3e	; 62
 828:	8c 01       	movw	r16, r24
 82a:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <sg_bSendTimeRequest>
 82e:	88 23       	and	r24, r24
 830:	69 f0       	breq	.+26     	; 0x84c <ControllerStatusMessagesSend+0x3c>
 832:	88 e0       	ldi	r24, 0x08	; 8
 834:	d8 01       	movw	r26, r16
 836:	1d 92       	st	X+, r1
 838:	8a 95       	dec	r24
 83a:	e9 f7       	brne	.-6      	; 0x836 <ControllerStatusMessagesSend+0x26>
 83c:	48 e0       	ldi	r20, 0x08	; 8
 83e:	b8 01       	movw	r22, r16
 840:	88 e0       	ldi	r24, 0x08	; 8
 842:	0e 94 67 24 	call	0x48ce	; 0x48ce <CANSendMessage>
 846:	81 11       	cpse	r24, r1
 848:	10 92 24 03 	sts	0x0324, r1	; 0x800324 <sg_bSendTimeRequest>
 84c:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <sg_bSendModuleControllerStatus>
 850:	88 23       	and	r24, r24
 852:	09 f4       	brne	.+2      	; 0x856 <ControllerStatusMessagesSend+0x46>
 854:	06 c1       	rjmp	.+524    	; 0xa62 <ControllerStatusMessagesSend+0x252>
 856:	80 91 7f 09 	lds	r24, 0x097F	; 0x80097f <sg_u8ControllerStatusMsgCount>
 85a:	81 11       	cpse	r24, r1
 85c:	80 c0       	rjmp	.+256    	; 0x95e <ControllerStatusMessagesSend+0x14e>
 85e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
 862:	8f 70       	andi	r24, 0x0F	; 15
 864:	f8 01       	movw	r30, r16
 866:	80 83       	st	Z, r24
 868:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <sg_u8SOC>
 86c:	81 83       	std	Z+1, r24	; 0x01
 86e:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <sg_u8SOH>
 872:	82 83       	std	Z+2, r24	; 0x02
 874:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <sg_sFrame+0x15>
 878:	83 83       	std	Z+3, r24	; 0x03
 87a:	84 e0       	ldi	r24, 0x04	; 4
 87c:	34 96       	adiw	r30, 0x04	; 4
 87e:	df 01       	movw	r26, r30
 880:	1d 92       	st	X+, r1
 882:	8a 95       	dec	r24
 884:	e9 f7       	brne	.-6      	; 0x880 <ControllerStatusMessagesSend+0x70>
 886:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <sg_sFrame+0x49>
 88a:	88 23       	and	r24, r24
 88c:	79 f0       	breq	.+30     	; 0x8ac <ControllerStatusMessagesSend+0x9c>
 88e:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <sg_sFrame+0x4c>
 892:	88 23       	and	r24, r24
 894:	71 f0       	breq	.+28     	; 0x8b2 <ControllerStatusMessagesSend+0xa2>
 896:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
 89a:	83 30       	cpi	r24, 0x03	; 3
 89c:	69 f4       	brne	.+26     	; 0x8b8 <ControllerStatusMessagesSend+0xa8>
 89e:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <ModuleCurrentConvertReadings>
 8a2:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <sg_sFrame+0x30>
 8a6:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <sg_sFrame+0x31>
 8aa:	08 c0       	rjmp	.+16     	; 0x8bc <ControllerStatusMessagesSend+0xac>
 8ac:	80 e0       	ldi	r24, 0x00	; 0
 8ae:	90 e8       	ldi	r25, 0x80	; 128
 8b0:	05 c0       	rjmp	.+10     	; 0x8bc <ControllerStatusMessagesSend+0xac>
 8b2:	80 e0       	ldi	r24, 0x00	; 0
 8b4:	90 e8       	ldi	r25, 0x80	; 128
 8b6:	02 c0       	rjmp	.+4      	; 0x8bc <ControllerStatusMessagesSend+0xac>
 8b8:	80 e0       	ldi	r24, 0x00	; 0
 8ba:	90 e8       	ldi	r25, 0x80	; 128
 8bc:	f8 01       	movw	r30, r16
 8be:	84 83       	std	Z+4, r24	; 0x04
 8c0:	95 83       	std	Z+5, r25	; 0x05
 8c2:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <sg_sFrame+0x46>
 8c6:	88 23       	and	r24, r24
 8c8:	79 f0       	breq	.+30     	; 0x8e8 <ControllerStatusMessagesSend+0xd8>
 8ca:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <sg_sFrame+0x47>
 8ce:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <sg_sFrame+0x48>
 8d2:	4f ef       	ldi	r20, 0xFF	; 255
 8d4:	53 e0       	ldi	r21, 0x03	; 3
 8d6:	60 e0       	ldi	r22, 0x00	; 0
 8d8:	70 e0       	ldi	r23, 0x00	; 0
 8da:	9a 01       	movw	r18, r20
 8dc:	ab 01       	movw	r20, r22
 8de:	28 1b       	sub	r18, r24
 8e0:	39 0b       	sbc	r19, r25
 8e2:	41 09       	sbc	r20, r1
 8e4:	51 09       	sbc	r21, r1
 8e6:	03 c0       	rjmp	.+6      	; 0x8ee <ControllerStatusMessagesSend+0xde>
 8e8:	20 e0       	ldi	r18, 0x00	; 0
 8ea:	30 e0       	ldi	r19, 0x00	; 0
 8ec:	a9 01       	movw	r20, r18
 8ee:	e0 e1       	ldi	r30, 0x10	; 16
 8f0:	f1 e0       	ldi	r31, 0x01	; 1
 8f2:	a5 a1       	ldd	r26, Z+37	; 0x25
 8f4:	b6 a1       	ldd	r27, Z+38	; 0x26
 8f6:	0e 94 de 27 	call	0x4fbc	; 0x4fbc <__mulshisi3>
 8fa:	dc 01       	movw	r26, r24
 8fc:	cb 01       	movw	r24, r22
 8fe:	68 94       	set
 900:	16 f8       	bld	r1, 6
 902:	b6 95       	lsr	r27
 904:	a7 95       	ror	r26
 906:	97 95       	ror	r25
 908:	87 95       	ror	r24
 90a:	16 94       	lsr	r1
 90c:	d1 f7       	brne	.-12     	; 0x902 <ControllerStatusMessagesSend+0xf2>
 90e:	c5 8c       	ldd	r12, Z+29	; 0x1d
 910:	d6 8c       	ldd	r13, Z+30	; 0x1e
 912:	e7 8c       	ldd	r14, Z+31	; 0x1f
 914:	f0 a0       	ldd	r15, Z+32	; 0x20
 916:	bc 01       	movw	r22, r24
 918:	cd 01       	movw	r24, r26
 91a:	6c 0d       	add	r22, r12
 91c:	7d 1d       	adc	r23, r13
 91e:	8e 1d       	adc	r24, r14
 920:	9f 1d       	adc	r25, r15
 922:	2f e0       	ldi	r18, 0x0F	; 15
 924:	30 e0       	ldi	r19, 0x00	; 0
 926:	40 e0       	ldi	r20, 0x00	; 0
 928:	50 e0       	ldi	r21, 0x00	; 0
 92a:	0e 94 e2 22 	call	0x45c4	; 0x45c4 <__udivmodsi4>
 92e:	20 93 52 01 	sts	0x0152, r18	; 0x800152 <sg_sFrame+0x42>
 932:	30 93 53 01 	sts	0x0153, r19	; 0x800153 <sg_sFrame+0x43>
 936:	40 93 54 01 	sts	0x0154, r20	; 0x800154 <sg_sFrame+0x44>
 93a:	50 93 55 01 	sts	0x0155, r21	; 0x800155 <sg_sFrame+0x45>
 93e:	d8 01       	movw	r26, r16
 940:	16 96       	adiw	r26, 0x06	; 6
 942:	2c 93       	st	X, r18
 944:	16 97       	sbiw	r26, 0x06	; 6
 946:	17 96       	adiw	r26, 0x07	; 7
 948:	3c 93       	st	X, r19
 94a:	48 e0       	ldi	r20, 0x08	; 8
 94c:	b8 01       	movw	r22, r16
 94e:	81 e0       	ldi	r24, 0x01	; 1
 950:	0e 94 67 24 	call	0x48ce	; 0x48ce <CANSendMessage>
 954:	88 23       	and	r24, r24
 956:	09 f4       	brne	.+2      	; 0x95a <ControllerStatusMessagesSend+0x14a>
 958:	6b c0       	rjmp	.+214    	; 0xa30 <ControllerStatusMessagesSend+0x220>
 95a:	81 e0       	ldi	r24, 0x01	; 1
 95c:	70 c0       	rjmp	.+224    	; 0xa3e <ControllerStatusMessagesSend+0x22e>
 95e:	81 30       	cpi	r24, 0x01	; 1
 960:	c1 f5       	brne	.+112    	; 0x9d2 <ControllerStatusMessagesSend+0x1c2>
 962:	e0 e1       	ldi	r30, 0x10	; 16
 964:	f1 e0       	ldi	r31, 0x01	; 1
 966:	82 ad       	ldd	r24, Z+58	; 0x3a
 968:	93 ad       	ldd	r25, Z+59	; 0x3b
 96a:	d8 01       	movw	r26, r16
 96c:	8c 93       	st	X, r24
 96e:	82 ad       	ldd	r24, Z+58	; 0x3a
 970:	93 ad       	ldd	r25, Z+59	; 0x3b
 972:	11 96       	adiw	r26, 0x01	; 1
 974:	9c 93       	st	X, r25
 976:	11 97       	sbiw	r26, 0x01	; 1
 978:	80 ad       	ldd	r24, Z+56	; 0x38
 97a:	91 ad       	ldd	r25, Z+57	; 0x39
 97c:	12 96       	adiw	r26, 0x02	; 2
 97e:	8c 93       	st	X, r24
 980:	12 97       	sbiw	r26, 0x02	; 2
 982:	80 ad       	ldd	r24, Z+56	; 0x38
 984:	91 ad       	ldd	r25, Z+57	; 0x39
 986:	13 96       	adiw	r26, 0x03	; 3
 988:	9c 93       	st	X, r25
 98a:	13 97       	sbiw	r26, 0x03	; 3
 98c:	84 ad       	ldd	r24, Z+60	; 0x3c
 98e:	95 ad       	ldd	r25, Z+61	; 0x3d
 990:	14 96       	adiw	r26, 0x04	; 4
 992:	8c 93       	st	X, r24
 994:	14 97       	sbiw	r26, 0x04	; 4
 996:	84 ad       	ldd	r24, Z+60	; 0x3c
 998:	95 ad       	ldd	r25, Z+61	; 0x3d
 99a:	15 96       	adiw	r26, 0x05	; 5
 99c:	9c 93       	st	X, r25
 99e:	60 91 4e 01 	lds	r22, 0x014E	; 0x80014e <sg_sFrame+0x3e>
 9a2:	70 91 4f 01 	lds	r23, 0x014F	; 0x80014f <sg_sFrame+0x3f>
 9a6:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <sg_sFrame+0x40>
 9aa:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <sg_sFrame+0x41>
 9ae:	2f e0       	ldi	r18, 0x0F	; 15
 9b0:	30 e0       	ldi	r19, 0x00	; 0
 9b2:	40 e0       	ldi	r20, 0x00	; 0
 9b4:	50 e0       	ldi	r21, 0x00	; 0
 9b6:	0e 94 e2 22 	call	0x45c4	; 0x45c4 <__udivmodsi4>
 9ba:	f8 01       	movw	r30, r16
 9bc:	26 83       	std	Z+6, r18	; 0x06
 9be:	37 83       	std	Z+7, r19	; 0x07
 9c0:	48 e0       	ldi	r20, 0x08	; 8
 9c2:	b8 01       	movw	r22, r16
 9c4:	82 e0       	ldi	r24, 0x02	; 2
 9c6:	0e 94 67 24 	call	0x48ce	; 0x48ce <CANSendMessage>
 9ca:	88 23       	and	r24, r24
 9cc:	99 f1       	breq	.+102    	; 0xa34 <ControllerStatusMessagesSend+0x224>
 9ce:	81 e0       	ldi	r24, 0x01	; 1
 9d0:	36 c0       	rjmp	.+108    	; 0xa3e <ControllerStatusMessagesSend+0x22e>
 9d2:	82 30       	cpi	r24, 0x02	; 2
 9d4:	89 f5       	brne	.+98     	; 0xa38 <ControllerStatusMessagesSend+0x228>
 9d6:	e0 e1       	ldi	r30, 0x10	; 16
 9d8:	f1 e0       	ldi	r31, 0x01	; 1
 9da:	84 a9       	ldd	r24, Z+52	; 0x34
 9dc:	95 a9       	ldd	r25, Z+53	; 0x35
 9de:	d8 01       	movw	r26, r16
 9e0:	8c 93       	st	X, r24
 9e2:	84 a9       	ldd	r24, Z+52	; 0x34
 9e4:	95 a9       	ldd	r25, Z+53	; 0x35
 9e6:	11 96       	adiw	r26, 0x01	; 1
 9e8:	9c 93       	st	X, r25
 9ea:	11 97       	sbiw	r26, 0x01	; 1
 9ec:	82 a9       	ldd	r24, Z+50	; 0x32
 9ee:	93 a9       	ldd	r25, Z+51	; 0x33
 9f0:	12 96       	adiw	r26, 0x02	; 2
 9f2:	8c 93       	st	X, r24
 9f4:	12 97       	sbiw	r26, 0x02	; 2
 9f6:	82 a9       	ldd	r24, Z+50	; 0x32
 9f8:	93 a9       	ldd	r25, Z+51	; 0x33
 9fa:	13 96       	adiw	r26, 0x03	; 3
 9fc:	9c 93       	st	X, r25
 9fe:	13 97       	sbiw	r26, 0x03	; 3
 a00:	86 a9       	ldd	r24, Z+54	; 0x36
 a02:	97 a9       	ldd	r25, Z+55	; 0x37
 a04:	14 96       	adiw	r26, 0x04	; 4
 a06:	8c 93       	st	X, r24
 a08:	14 97       	sbiw	r26, 0x04	; 4
 a0a:	86 a9       	ldd	r24, Z+54	; 0x36
 a0c:	97 a9       	ldd	r25, Z+55	; 0x37
 a0e:	15 96       	adiw	r26, 0x05	; 5
 a10:	9c 93       	st	X, r25
 a12:	15 97       	sbiw	r26, 0x05	; 5
 a14:	16 96       	adiw	r26, 0x06	; 6
 a16:	1c 92       	st	X, r1
 a18:	16 97       	sbiw	r26, 0x06	; 6
 a1a:	17 96       	adiw	r26, 0x07	; 7
 a1c:	1c 92       	st	X, r1
 a1e:	48 e0       	ldi	r20, 0x08	; 8
 a20:	b8 01       	movw	r22, r16
 a22:	83 e0       	ldi	r24, 0x03	; 3
 a24:	0e 94 67 24 	call	0x48ce	; 0x48ce <CANSendMessage>
 a28:	88 23       	and	r24, r24
 a2a:	41 f0       	breq	.+16     	; 0xa3c <ControllerStatusMessagesSend+0x22c>
 a2c:	81 e0       	ldi	r24, 0x01	; 1
 a2e:	07 c0       	rjmp	.+14     	; 0xa3e <ControllerStatusMessagesSend+0x22e>
 a30:	80 e0       	ldi	r24, 0x00	; 0
 a32:	05 c0       	rjmp	.+10     	; 0xa3e <ControllerStatusMessagesSend+0x22e>
 a34:	80 e0       	ldi	r24, 0x00	; 0
 a36:	03 c0       	rjmp	.+6      	; 0xa3e <ControllerStatusMessagesSend+0x22e>
 a38:	81 e0       	ldi	r24, 0x01	; 1
 a3a:	01 c0       	rjmp	.+2      	; 0xa3e <ControllerStatusMessagesSend+0x22e>
 a3c:	80 e0       	ldi	r24, 0x00	; 0
 a3e:	88 23       	and	r24, r24
 a40:	81 f0       	breq	.+32     	; 0xa62 <ControllerStatusMessagesSend+0x252>
 a42:	80 91 7f 09 	lds	r24, 0x097F	; 0x80097f <sg_u8ControllerStatusMsgCount>
 a46:	8f 5f       	subi	r24, 0xFF	; 255
 a48:	80 93 7f 09 	sts	0x097F, r24	; 0x80097f <sg_u8ControllerStatusMsgCount>
 a4c:	83 30       	cpi	r24, 0x03	; 3
 a4e:	48 f0       	brcs	.+18     	; 0xa62 <ControllerStatusMessagesSend+0x252>
 a50:	10 92 7f 09 	sts	0x097F, r1	; 0x80097f <sg_u8ControllerStatusMsgCount>
 a54:	10 92 22 03 	sts	0x0322, r1	; 0x800322 <sg_bSendModuleControllerStatus>
 a58:	10 92 87 09 	sts	0x0987, r1	; 0x800987 <sg_bIgnoreStatusRequests>
 a5c:	81 e0       	ldi	r24, 0x01	; 1
 a5e:	80 93 1f 03 	sts	0x031F, r24	; 0x80031f <sg_bSendCellCommStatus>
 a62:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <sg_bSendCellStatus>
 a66:	88 23       	and	r24, r24
 a68:	09 f4       	brne	.+2      	; 0xa6c <ControllerStatusMessagesSend+0x25c>
 a6a:	7d c0       	rjmp	.+250    	; 0xb66 <ControllerStatusMessagesSend+0x356>
 a6c:	1c 82       	std	Y+4, r1	; 0x04
 a6e:	1b 82       	std	Y+3, r1	; 0x03
 a70:	1a 82       	std	Y+2, r1	; 0x02
 a72:	19 82       	std	Y+1, r1	; 0x01
 a74:	e0 90 27 03 	lds	r14, 0x0327	; 0x800327 <sg_u8CellStatus>
 a78:	f0 90 3f 01 	lds	r15, 0x013F	; 0x80013f <sg_sFrame+0x2f>
 a7c:	ef 14       	cp	r14, r15
 a7e:	30 f5       	brcc	.+76     	; 0xacc <ControllerStatusMessagesSend+0x2bc>
 a80:	ff 20       	and	r15, r15
 a82:	21 f1       	breq	.+72     	; 0xacc <ControllerStatusMessagesSend+0x2bc>
 a84:	ef 2d       	mov	r30, r15
 a86:	ee 19       	sub	r30, r14
 a88:	e1 50       	subi	r30, 0x01	; 1
 a8a:	ec 36       	cpi	r30, 0x6C	; 108
 a8c:	f8 f4       	brcc	.+62     	; 0xacc <ControllerStatusMessagesSend+0x2bc>
 a8e:	f0 e0       	ldi	r31, 0x00	; 0
 a90:	75 96       	adiw	r30, 0x15	; 21
 a92:	ee 0f       	add	r30, r30
 a94:	ff 1f       	adc	r31, r31
 a96:	ee 0f       	add	r30, r30
 a98:	ff 1f       	adc	r31, r31
 a9a:	e0 5f       	subi	r30, 0xF0	; 240
 a9c:	fe 4f       	sbci	r31, 0xFE	; 254
 a9e:	81 81       	ldd	r24, Z+1	; 0x01
 aa0:	92 81       	ldd	r25, Z+2	; 0x02
 aa2:	c3 80       	ldd	r12, Z+3	; 0x03
 aa4:	d4 80       	ldd	r13, Z+4	; 0x04
 aa6:	be 01       	movw	r22, r28
 aa8:	6d 5f       	subi	r22, 0xFD	; 253
 aaa:	7f 4f       	sbci	r23, 0xFF	; 255
 aac:	0e 94 6f 20 	call	0x40de	; 0x40de <CellDataConvertVoltage>
 ab0:	81 11       	cpse	r24, r1
 ab2:	02 c0       	rjmp	.+4      	; 0xab8 <ControllerStatusMessagesSend+0x2a8>
 ab4:	1c 82       	std	Y+4, r1	; 0x04
 ab6:	1b 82       	std	Y+3, r1	; 0x03
 ab8:	be 01       	movw	r22, r28
 aba:	6f 5f       	subi	r22, 0xFF	; 255
 abc:	7f 4f       	sbci	r23, 0xFF	; 255
 abe:	c6 01       	movw	r24, r12
 ac0:	0e 94 db 1f 	call	0x3fb6	; 0x3fb6 <CellDataConvertTemperature>
 ac4:	81 11       	cpse	r24, r1
 ac6:	02 c0       	rjmp	.+4      	; 0xacc <ControllerStatusMessagesSend+0x2bc>
 ac8:	1a 82       	std	Y+2, r1	; 0x02
 aca:	19 82       	std	Y+1, r1	; 0x01
 acc:	f8 01       	movw	r30, r16
 ace:	e0 82       	st	Z, r14
 ad0:	f1 82       	std	Z+1, r15	; 0x01
 ad2:	99 81       	ldd	r25, Y+1	; 0x01
 ad4:	8a 81       	ldd	r24, Y+2	; 0x02
 ad6:	92 83       	std	Z+2, r25	; 0x02
 ad8:	83 83       	std	Z+3, r24	; 0x03
 ada:	2b 81       	ldd	r18, Y+3	; 0x03
 adc:	3c 81       	ldd	r19, Y+4	; 0x04
 ade:	24 83       	std	Z+4, r18	; 0x04
 ae0:	35 83       	std	Z+5, r19	; 0x05
 ae2:	21 15       	cp	r18, r1
 ae4:	31 05       	cpc	r19, r1
 ae6:	59 f0       	breq	.+22     	; 0xafe <ControllerStatusMessagesSend+0x2ee>
 ae8:	c9 01       	movw	r24, r18
 aea:	64 e0       	ldi	r22, 0x04	; 4
 aec:	70 e1       	ldi	r23, 0x10	; 16
 aee:	0e 94 40 25 	call	0x4a80	; 0x4a80 <__udivmodhi4>
 af2:	84 e6       	ldi	r24, 0x64	; 100
 af4:	68 9f       	mul	r22, r24
 af6:	60 2d       	mov	r22, r0
 af8:	11 24       	eor	r1, r1
 afa:	66 83       	std	Z+6, r22	; 0x06
 afc:	01 c0       	rjmp	.+2      	; 0xb00 <ControllerStatusMessagesSend+0x2f0>
 afe:	16 82       	std	Z+6, r1	; 0x06
 b00:	e0 e1       	ldi	r30, 0x10	; 16
 b02:	f1 e0       	ldi	r31, 0x01	; 1
 b04:	40 ad       	ldd	r20, Z+56	; 0x38
 b06:	51 ad       	ldd	r21, Z+57	; 0x39
 b08:	82 ad       	ldd	r24, Z+58	; 0x3a
 b0a:	93 ad       	ldd	r25, Z+59	; 0x3b
 b0c:	84 17       	cp	r24, r20
 b0e:	95 07       	cpc	r25, r21
 b10:	98 f4       	brcc	.+38     	; 0xb38 <ControllerStatusMessagesSend+0x328>
 b12:	21 15       	cp	r18, r1
 b14:	31 05       	cpc	r19, r1
 b16:	81 f0       	breq	.+32     	; 0xb38 <ControllerStatusMessagesSend+0x328>
 b18:	60 ad       	ldd	r22, Z+56	; 0x38
 b1a:	71 ad       	ldd	r23, Z+57	; 0x39
 b1c:	82 ad       	ldd	r24, Z+58	; 0x3a
 b1e:	93 ad       	ldd	r25, Z+59	; 0x3b
 b20:	68 1b       	sub	r22, r24
 b22:	79 0b       	sbc	r23, r25
 b24:	c9 01       	movw	r24, r18
 b26:	0e 94 40 25 	call	0x4a80	; 0x4a80 <__udivmodhi4>
 b2a:	84 e6       	ldi	r24, 0x64	; 100
 b2c:	68 9f       	mul	r22, r24
 b2e:	60 2d       	mov	r22, r0
 b30:	11 24       	eor	r1, r1
 b32:	f8 01       	movw	r30, r16
 b34:	67 83       	std	Z+7, r22	; 0x07
 b36:	03 c0       	rjmp	.+6      	; 0xb3e <ControllerStatusMessagesSend+0x32e>
 b38:	d8 01       	movw	r26, r16
 b3a:	17 96       	adiw	r26, 0x07	; 7
 b3c:	1c 92       	st	X, r1
 b3e:	48 e0       	ldi	r20, 0x08	; 8
 b40:	b8 01       	movw	r22, r16
 b42:	84 e0       	ldi	r24, 0x04	; 4
 b44:	0e 94 67 24 	call	0x48ce	; 0x48ce <CANSendMessage>
 b48:	88 23       	and	r24, r24
 b4a:	69 f0       	breq	.+26     	; 0xb66 <ControllerStatusMessagesSend+0x356>
 b4c:	80 91 27 03 	lds	r24, 0x0327	; 0x800327 <sg_u8CellStatus>
 b50:	8f 5f       	subi	r24, 0xFF	; 255
 b52:	80 93 27 03 	sts	0x0327, r24	; 0x800327 <sg_u8CellStatus>
 b56:	90 91 27 03 	lds	r25, 0x0327	; 0x800327 <sg_u8CellStatus>
 b5a:	80 91 28 03 	lds	r24, 0x0328	; 0x800328 <sg_u8CellStatusTarget>
 b5e:	98 17       	cp	r25, r24
 b60:	10 f0       	brcs	.+4      	; 0xb66 <ControllerStatusMessagesSend+0x356>
 b62:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <sg_bSendCellStatus>
 b66:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <sg_bSendCellCommStatus>
 b6a:	88 23       	and	r24, r24
 b6c:	89 f1       	breq	.+98     	; 0xbd0 <ControllerStatusMessagesSend+0x3c0>
 b6e:	e0 e1       	ldi	r30, 0x10	; 16
 b70:	f1 e0       	ldi	r31, 0x01	; 1
 b72:	83 89       	ldd	r24, Z+19	; 0x13
 b74:	d8 01       	movw	r26, r16
 b76:	8c 93       	st	X, r24
 b78:	84 89       	ldd	r24, Z+20	; 0x14
 b7a:	11 96       	adiw	r26, 0x01	; 1
 b7c:	8c 93       	st	X, r24
 b7e:	11 97       	sbiw	r26, 0x01	; 1
 b80:	80 a5       	ldd	r24, Z+40	; 0x28
 b82:	91 a5       	ldd	r25, Z+41	; 0x29
 b84:	12 96       	adiw	r26, 0x02	; 2
 b86:	8c 93       	st	X, r24
 b88:	12 97       	sbiw	r26, 0x02	; 2
 b8a:	80 a5       	ldd	r24, Z+40	; 0x28
 b8c:	91 a5       	ldd	r25, Z+41	; 0x29
 b8e:	13 96       	adiw	r26, 0x03	; 3
 b90:	9c 93       	st	X, r25
 b92:	13 97       	sbiw	r26, 0x03	; 3
 b94:	86 a5       	ldd	r24, Z+46	; 0x2e
 b96:	14 96       	adiw	r26, 0x04	; 4
 b98:	8c 93       	st	X, r24
 b9a:	14 97       	sbiw	r26, 0x04	; 4
 b9c:	82 a5       	ldd	r24, Z+42	; 0x2a
 b9e:	8f 3f       	cpi	r24, 0xFF	; 255
 ba0:	31 f0       	breq	.+12     	; 0xbae <ControllerStatusMessagesSend+0x39e>
 ba2:	85 a5       	ldd	r24, Z+45	; 0x2d
 ba4:	92 a5       	ldd	r25, Z+42	; 0x2a
 ba6:	89 1b       	sub	r24, r25
 ba8:	15 96       	adiw	r26, 0x05	; 5
 baa:	8c 93       	st	X, r24
 bac:	03 c0       	rjmp	.+6      	; 0xbb4 <ControllerStatusMessagesSend+0x3a4>
 bae:	8f ef       	ldi	r24, 0xFF	; 255
 bb0:	f8 01       	movw	r30, r16
 bb2:	85 83       	std	Z+5, r24	; 0x05
 bb4:	d8 01       	movw	r26, r16
 bb6:	16 96       	adiw	r26, 0x06	; 6
 bb8:	1c 92       	st	X, r1
 bba:	16 97       	sbiw	r26, 0x06	; 6
 bbc:	17 96       	adiw	r26, 0x07	; 7
 bbe:	1c 92       	st	X, r1
 bc0:	48 e0       	ldi	r20, 0x08	; 8
 bc2:	b8 01       	movw	r22, r16
 bc4:	86 e0       	ldi	r24, 0x06	; 6
 bc6:	0e 94 67 24 	call	0x48ce	; 0x48ce <CANSendMessage>
 bca:	81 11       	cpse	r24, r1
 bcc:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <sg_bSendCellCommStatus>
 bd0:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <sg_bSendHardwareDetail>
 bd4:	88 23       	and	r24, r24
 bd6:	89 f0       	breq	.+34     	; 0xbfa <ControllerStatusMessagesSend+0x3ea>
 bd8:	b8 01       	movw	r22, r16
 bda:	c8 01       	movw	r24, r16
 bdc:	02 96       	adiw	r24, 0x02	; 2
 bde:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <CurrentThresholdsGet>
 be2:	f8 01       	movw	r30, r16
 be4:	14 82       	std	Z+4, r1	; 0x04
 be6:	15 82       	std	Z+5, r1	; 0x05
 be8:	16 82       	std	Z+6, r1	; 0x06
 bea:	17 82       	std	Z+7, r1	; 0x07
 bec:	48 e0       	ldi	r20, 0x08	; 8
 bee:	b8 01       	movw	r22, r16
 bf0:	85 e0       	ldi	r24, 0x05	; 5
 bf2:	0e 94 67 24 	call	0x48ce	; 0x48ce <CANSendMessage>
 bf6:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <sg_bSendHardwareDetail>
 bfa:	0f 90       	pop	r0
 bfc:	0f 90       	pop	r0
 bfe:	0f 90       	pop	r0
 c00:	0f 90       	pop	r0
 c02:	df 91       	pop	r29
 c04:	cf 91       	pop	r28
 c06:	1f 91       	pop	r17
 c08:	0f 91       	pop	r16
 c0a:	ff 90       	pop	r15
 c0c:	ef 90       	pop	r14
 c0e:	df 90       	pop	r13
 c10:	cf 90       	pop	r12
 c12:	08 95       	ret

Disassembly of section .text.CellStringProcess:

00000f10 <CellStringProcess>:
     f10:	3f 92       	push	r3
     f12:	4f 92       	push	r4
     f14:	5f 92       	push	r5
     f16:	6f 92       	push	r6
     f18:	7f 92       	push	r7
     f1a:	8f 92       	push	r8
     f1c:	9f 92       	push	r9
     f1e:	af 92       	push	r10
     f20:	bf 92       	push	r11
     f22:	cf 92       	push	r12
     f24:	df 92       	push	r13
     f26:	ef 92       	push	r14
     f28:	ff 92       	push	r15
     f2a:	0f 93       	push	r16
     f2c:	1f 93       	push	r17
     f2e:	cf 93       	push	r28
     f30:	df 93       	push	r29
     f32:	00 d0       	rcall	.+0      	; 0xf34 <CellStringProcess+0x24>
     f34:	00 d0       	rcall	.+0      	; 0xf36 <CellStringProcess+0x26>
     f36:	00 d0       	rcall	.+0      	; 0xf38 <CellStringProcess+0x28>
     f38:	cd b7       	in	r28, 0x3d	; 61
     f3a:	de b7       	in	r29, 0x3e	; 62
     f3c:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <sg_sFrame+0x2b>
     f40:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <sg_sFrame+0x2c>
     f44:	89 2b       	or	r24, r25
     f46:	09 f4       	brne	.+2      	; 0xf4a <CellStringProcess+0x3a>
     f48:	21 c1       	rjmp	.+578    	; 0x118c <__stack+0x8d>
     f4a:	e0 e1       	ldi	r30, 0x10	; 16
     f4c:	f1 e0       	ldi	r31, 0x01	; 1
     f4e:	8f ef       	ldi	r24, 0xFF	; 255
     f50:	82 a7       	std	Z+42, r24	; 0x2a
     f52:	93 89       	ldd	r25, Z+19	; 0x13
     f54:	85 a5       	ldd	r24, Z+45	; 0x2d
     f56:	89 17       	cp	r24, r25
     f58:	28 f4       	brcc	.+10     	; 0xf64 <CellStringProcess+0x54>
     f5a:	85 a5       	ldd	r24, Z+45	; 0x2d
     f5c:	83 8b       	std	Z+19, r24	; 0x13
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	80 93 1f 03 	sts	0x031F, r24	; 0x80031f <sg_bSendCellCommStatus>
     f64:	e0 e1       	ldi	r30, 0x10	; 16
     f66:	f1 e0       	ldi	r31, 0x01	; 1
     f68:	94 89       	ldd	r25, Z+20	; 0x14
     f6a:	85 a5       	ldd	r24, Z+45	; 0x2d
     f6c:	98 17       	cp	r25, r24
     f6e:	28 f4       	brcc	.+10     	; 0xf7a <CellStringProcess+0x6a>
     f70:	85 a5       	ldd	r24, Z+45	; 0x2d
     f72:	84 8b       	std	Z+20, r24	; 0x14
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	80 93 1f 03 	sts	0x031F, r24	; 0x80031f <sg_bSendCellCommStatus>
     f7a:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <sg_sFrame+0x2b>
     f7e:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <sg_sFrame+0x2c>
     f82:	83 70       	andi	r24, 0x03	; 3
     f84:	99 27       	eor	r25, r25
     f86:	89 2b       	or	r24, r25
     f88:	61 f0       	breq	.+24     	; 0xfa2 <CellStringProcess+0x92>
     f8a:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <sg_sFrame+0x2e>
     f8e:	8f 3f       	cpi	r24, 0xFF	; 255
     f90:	41 f0       	breq	.+16     	; 0xfa2 <CellStringProcess+0x92>
     f92:	e0 e1       	ldi	r30, 0x10	; 16
     f94:	f1 e0       	ldi	r31, 0x01	; 1
     f96:	86 a5       	ldd	r24, Z+46	; 0x2e
     f98:	8f 5f       	subi	r24, 0xFF	; 255
     f9a:	86 a7       	std	Z+46, r24	; 0x2e
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	80 93 1f 03 	sts	0x031F, r24	; 0x80031f <sg_bSendCellCommStatus>
     fa2:	e0 e1       	ldi	r30, 0x10	; 16
     fa4:	f1 e0       	ldi	r31, 0x01	; 1
     fa6:	11 ae       	std	Z+57, r1	; 0x39
     fa8:	10 ae       	std	Z+56, r1	; 0x38
     faa:	8f ef       	ldi	r24, 0xFF	; 255
     fac:	9f ef       	ldi	r25, 0xFF	; 255
     fae:	93 af       	std	Z+59, r25	; 0x3b
     fb0:	82 af       	std	Z+58, r24	; 0x3a
     fb2:	15 ae       	std	Z+61, r1	; 0x3d
     fb4:	14 ae       	std	Z+60, r1	; 0x3c
     fb6:	80 e0       	ldi	r24, 0x00	; 0
     fb8:	90 e8       	ldi	r25, 0x80	; 128
     fba:	93 ab       	std	Z+51, r25	; 0x33
     fbc:	82 ab       	std	Z+50, r24	; 0x32
     fbe:	8f ef       	ldi	r24, 0xFF	; 255
     fc0:	9f e7       	ldi	r25, 0x7F	; 127
     fc2:	95 ab       	std	Z+53, r25	; 0x35
     fc4:	84 ab       	std	Z+52, r24	; 0x34
     fc6:	17 aa       	std	Z+55, r1	; 0x37
     fc8:	16 aa       	std	Z+54, r1	; 0x36
     fca:	d1 2c       	mov	r13, r1
     fcc:	31 2c       	mov	r3, r1
     fce:	c1 2c       	mov	r12, r1
     fd0:	41 2c       	mov	r4, r1
     fd2:	51 2c       	mov	r5, r1
     fd4:	32 01       	movw	r6, r4
     fd6:	81 2c       	mov	r8, r1
     fd8:	91 2c       	mov	r9, r1
     fda:	54 01       	movw	r10, r8
     fdc:	2f ef       	ldi	r18, 0xFF	; 255
     fde:	3f e7       	ldi	r19, 0x7F	; 127
     fe0:	3e 83       	std	Y+6, r19	; 0x06
     fe2:	2d 83       	std	Y+5, r18	; 0x05
     fe4:	80 e0       	ldi	r24, 0x00	; 0
     fe6:	90 e8       	ldi	r25, 0x80	; 128
     fe8:	9c 83       	std	Y+4, r25	; 0x04
     fea:	8b 83       	std	Y+3, r24	; 0x03
     fec:	6b c0       	rjmp	.+214    	; 0x10c4 <__DATA_REGION_LENGTH__+0xc4>
     fee:	0d 2d       	mov	r16, r13
     ff0:	10 e0       	ldi	r17, 0x00	; 0
     ff2:	f8 01       	movw	r30, r16
     ff4:	75 96       	adiw	r30, 0x15	; 21
     ff6:	ee 0f       	add	r30, r30
     ff8:	ff 1f       	adc	r31, r31
     ffa:	ee 0f       	add	r30, r30
     ffc:	ff 1f       	adc	r31, r31
     ffe:	e0 5f       	subi	r30, 0xF0	; 240
    1000:	fe 4f       	sbci	r31, 0xFE	; 254
    1002:	81 81       	ldd	r24, Z+1	; 0x01
    1004:	92 81       	ldd	r25, Z+2	; 0x02
    1006:	9a 83       	std	Y+2, r25	; 0x02
    1008:	89 83       	std	Y+1, r24	; 0x01
    100a:	e3 80       	ldd	r14, Z+3	; 0x03
    100c:	f4 80       	ldd	r15, Z+4	; 0x04
    100e:	60 e0       	ldi	r22, 0x00	; 0
    1010:	70 e0       	ldi	r23, 0x00	; 0
    1012:	c7 01       	movw	r24, r14
    1014:	0e 94 db 1f 	call	0x3fb6	; 0x3fb6 <CellDataConvertTemperature>
    1018:	88 23       	and	r24, r24
    101a:	f1 f0       	breq	.+60     	; 0x1058 <__DATA_REGION_LENGTH__+0x58>
    101c:	f4 fe       	sbrs	r15, 4
    101e:	03 c0       	rjmp	.+6      	; 0x1026 <__DATA_REGION_LENGTH__+0x26>
    1020:	c7 01       	movw	r24, r14
    1022:	90 6f       	ori	r25, 0xF0	; 240
    1024:	02 c0       	rjmp	.+4      	; 0x102a <__DATA_REGION_LENGTH__+0x2a>
    1026:	c7 01       	movw	r24, r14
    1028:	9f 77       	andi	r25, 0x7F	; 127
    102a:	2b 81       	ldd	r18, Y+3	; 0x03
    102c:	3c 81       	ldd	r19, Y+4	; 0x04
    102e:	28 17       	cp	r18, r24
    1030:	39 07       	cpc	r19, r25
    1032:	14 f4       	brge	.+4      	; 0x1038 <__DATA_REGION_LENGTH__+0x38>
    1034:	9c 83       	std	Y+4, r25	; 0x04
    1036:	8b 83       	std	Y+3, r24	; 0x03
    1038:	2d 81       	ldd	r18, Y+5	; 0x05
    103a:	3e 81       	ldd	r19, Y+6	; 0x06
    103c:	82 17       	cp	r24, r18
    103e:	93 07       	cpc	r25, r19
    1040:	14 f4       	brge	.+4      	; 0x1046 <__DATA_REGION_LENGTH__+0x46>
    1042:	9e 83       	std	Y+6, r25	; 0x06
    1044:	8d 83       	std	Y+5, r24	; 0x05
    1046:	09 2e       	mov	r0, r25
    1048:	00 0c       	add	r0, r0
    104a:	aa 0b       	sbc	r26, r26
    104c:	bb 0b       	sbc	r27, r27
    104e:	88 0e       	add	r8, r24
    1050:	99 1e       	adc	r9, r25
    1052:	aa 1e       	adc	r10, r26
    1054:	bb 1e       	adc	r11, r27
    1056:	33 94       	inc	r3
    1058:	f8 01       	movw	r30, r16
    105a:	75 96       	adiw	r30, 0x15	; 21
    105c:	ee 0f       	add	r30, r30
    105e:	ff 1f       	adc	r31, r31
    1060:	ee 0f       	add	r30, r30
    1062:	ff 1f       	adc	r31, r31
    1064:	e0 5f       	subi	r30, 0xF0	; 240
    1066:	fe 4f       	sbci	r31, 0xFE	; 254
    1068:	81 81       	ldd	r24, Z+1	; 0x01
    106a:	92 81       	ldd	r25, Z+2	; 0x02
    106c:	99 23       	and	r25, r25
    106e:	1c f4       	brge	.+6      	; 0x1076 <__DATA_REGION_LENGTH__+0x76>
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <sg_sFrame+0x27>
    1076:	be 01       	movw	r22, r28
    1078:	6f 5f       	subi	r22, 0xFF	; 255
    107a:	7f 4f       	sbci	r23, 0xFF	; 255
    107c:	89 81       	ldd	r24, Y+1	; 0x01
    107e:	9a 81       	ldd	r25, Y+2	; 0x02
    1080:	0e 94 6f 20 	call	0x40de	; 0x40de <CellDataConvertVoltage>
    1084:	88 23       	and	r24, r24
    1086:	e9 f0       	breq	.+58     	; 0x10c2 <__DATA_REGION_LENGTH__+0xc2>
    1088:	20 91 48 01 	lds	r18, 0x0148	; 0x800148 <sg_sFrame+0x38>
    108c:	30 91 49 01 	lds	r19, 0x0149	; 0x800149 <sg_sFrame+0x39>
    1090:	89 81       	ldd	r24, Y+1	; 0x01
    1092:	9a 81       	ldd	r25, Y+2	; 0x02
    1094:	28 17       	cp	r18, r24
    1096:	39 07       	cpc	r19, r25
    1098:	20 f4       	brcc	.+8      	; 0x10a2 <__DATA_REGION_LENGTH__+0xa2>
    109a:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <sg_sFrame+0x39>
    109e:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <sg_sFrame+0x38>
    10a2:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <sg_sFrame+0x3a>
    10a6:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <sg_sFrame+0x3b>
    10aa:	82 17       	cp	r24, r18
    10ac:	93 07       	cpc	r25, r19
    10ae:	20 f4       	brcc	.+8      	; 0x10b8 <__DATA_REGION_LENGTH__+0xb8>
    10b0:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <sg_sFrame+0x3b>
    10b4:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <sg_sFrame+0x3a>
    10b8:	48 0e       	add	r4, r24
    10ba:	59 1e       	adc	r5, r25
    10bc:	61 1c       	adc	r6, r1
    10be:	71 1c       	adc	r7, r1
    10c0:	c3 94       	inc	r12
    10c2:	d3 94       	inc	r13
    10c4:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <sg_sFrame+0x2d>
    10c8:	d8 16       	cp	r13, r24
    10ca:	08 f4       	brcc	.+2      	; 0x10ce <__DATA_REGION_LENGTH__+0xce>
    10cc:	90 cf       	rjmp	.-224    	; 0xfee <CellStringProcess+0xde>
    10ce:	cc 20       	and	r12, r12
    10d0:	89 f1       	breq	.+98     	; 0x1134 <__stack+0x35>
    10d2:	ee e4       	ldi	r30, 0x4E	; 78
    10d4:	f1 e0       	ldi	r31, 0x01	; 1
    10d6:	40 82       	st	Z, r4
    10d8:	51 82       	std	Z+1, r5	; 0x01
    10da:	62 82       	std	Z+2, r6	; 0x02
    10dc:	73 82       	std	Z+3, r7	; 0x03
    10de:	60 81       	ld	r22, Z
    10e0:	71 81       	ldd	r23, Z+1	; 0x01
    10e2:	82 81       	ldd	r24, Z+2	; 0x02
    10e4:	93 81       	ldd	r25, Z+3	; 0x03
    10e6:	2c 2d       	mov	r18, r12
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	40 e0       	ldi	r20, 0x00	; 0
    10ec:	50 e0       	ldi	r21, 0x00	; 0
    10ee:	0e 94 e2 22 	call	0x45c4	; 0x45c4 <__udivmodsi4>
    10f2:	30 93 4d 01 	sts	0x014D, r19	; 0x80014d <sg_sFrame+0x3d>
    10f6:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <sg_sFrame+0x3c>
    10fa:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    10fe:	83 30       	cpi	r24, 0x03	; 3
    1100:	c9 f0       	breq	.+50     	; 0x1134 <__stack+0x35>
    1102:	80 91 1d 03 	lds	r24, 0x031D	; 0x80031d <sg_bCellBalancedOnce>
    1106:	81 11       	cpse	r24, r1
    1108:	15 c0       	rjmp	.+42     	; 0x1134 <__stack+0x35>
    110a:	e0 e1       	ldi	r30, 0x10	; 16
    110c:	f1 e0       	ldi	r31, 0x01	; 1
    110e:	20 ad       	ldd	r18, Z+56	; 0x38
    1110:	31 ad       	ldd	r19, Z+57	; 0x39
    1112:	82 ad       	ldd	r24, Z+58	; 0x3a
    1114:	93 ad       	ldd	r25, Z+59	; 0x3b
    1116:	28 17       	cp	r18, r24
    1118:	39 07       	cpc	r19, r25
    111a:	60 f0       	brcs	.+24     	; 0x1134 <__stack+0x35>
    111c:	80 ad       	ldd	r24, Z+56	; 0x38
    111e:	91 ad       	ldd	r25, Z+57	; 0x39
    1120:	22 ad       	ldd	r18, Z+58	; 0x3a
    1122:	33 ad       	ldd	r19, Z+59	; 0x3b
    1124:	82 1b       	sub	r24, r18
    1126:	93 0b       	sbc	r25, r19
    1128:	80 34       	cpi	r24, 0x40	; 64
    112a:	91 05       	cpc	r25, r1
    112c:	18 f0       	brcs	.+6      	; 0x1134 <__stack+0x35>
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <sg_bCellBalanceReady>
    1134:	33 20       	and	r3, r3
    1136:	c9 f0       	breq	.+50     	; 0x116a <__stack+0x6b>
    1138:	23 2d       	mov	r18, r3
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	40 e0       	ldi	r20, 0x00	; 0
    113e:	50 e0       	ldi	r21, 0x00	; 0
    1140:	c5 01       	movw	r24, r10
    1142:	b4 01       	movw	r22, r8
    1144:	0e 94 7e 24 	call	0x48fc	; 0x48fc <__divmodsi4>
    1148:	66 e4       	ldi	r22, 0x46	; 70
    114a:	71 e0       	ldi	r23, 0x01	; 1
    114c:	c9 01       	movw	r24, r18
    114e:	0e 94 db 1f 	call	0x3fb6	; 0x3fb6 <CellDataConvertTemperature>
    1152:	62 e4       	ldi	r22, 0x42	; 66
    1154:	71 e0       	ldi	r23, 0x01	; 1
    1156:	8b 81       	ldd	r24, Y+3	; 0x03
    1158:	9c 81       	ldd	r25, Y+4	; 0x04
    115a:	0e 94 db 1f 	call	0x3fb6	; 0x3fb6 <CellDataConvertTemperature>
    115e:	64 e4       	ldi	r22, 0x44	; 68
    1160:	71 e0       	ldi	r23, 0x01	; 1
    1162:	8d 81       	ldd	r24, Y+5	; 0x05
    1164:	9e 81       	ldd	r25, Y+6	; 0x06
    1166:	0e 94 db 1f 	call	0x3fb6	; 0x3fb6 <CellDataConvertTemperature>
    116a:	e0 e1       	ldi	r30, 0x10	; 16
    116c:	f1 e0       	ldi	r31, 0x01	; 1
    116e:	85 a5       	ldd	r24, Z+45	; 0x2d
    1170:	87 a7       	std	Z+47, r24	; 0x2f
    1172:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <sg_bSDCardReady>
    1176:	88 23       	and	r24, r24
    1178:	49 f0       	breq	.+18     	; 0x118c <__stack+0x8d>
    117a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    117e:	88 23       	and	r24, r24
    1180:	29 f0       	breq	.+10     	; 0x118c <__stack+0x8d>
    1182:	cf 01       	movw	r24, r30
    1184:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <STORE_WriteFrame>
    1188:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <sg_bSDCardReady>
    118c:	26 96       	adiw	r28, 0x06	; 6
    118e:	0f b6       	in	r0, 0x3f	; 63
    1190:	f8 94       	cli
    1192:	de bf       	out	0x3e, r29	; 62
    1194:	0f be       	out	0x3f, r0	; 63
    1196:	cd bf       	out	0x3d, r28	; 61
    1198:	df 91       	pop	r29
    119a:	cf 91       	pop	r28
    119c:	1f 91       	pop	r17
    119e:	0f 91       	pop	r16
    11a0:	ff 90       	pop	r15
    11a2:	ef 90       	pop	r14
    11a4:	df 90       	pop	r13
    11a6:	cf 90       	pop	r12
    11a8:	bf 90       	pop	r11
    11aa:	af 90       	pop	r10
    11ac:	9f 90       	pop	r9
    11ae:	8f 90       	pop	r8
    11b0:	7f 90       	pop	r7
    11b2:	6f 90       	pop	r6
    11b4:	5f 90       	pop	r5
    11b6:	4f 90       	pop	r4
    11b8:	3f 90       	pop	r3
    11ba:	08 95       	ret

Disassembly of section .text.Delay:

000043f2 <Delay>:
    43f2:	ab 01       	movw	r20, r22
    43f4:	bc 01       	movw	r22, r24
    43f6:	4f 5f       	subi	r20, 0xFF	; 255
    43f8:	5f 4f       	sbci	r21, 0xFF	; 255
    43fa:	6f 4f       	sbci	r22, 0xFF	; 255
    43fc:	7f 4f       	sbci	r23, 0xFF	; 255
    43fe:	76 95       	lsr	r23
    4400:	67 95       	ror	r22
    4402:	57 95       	ror	r21
    4404:	47 95       	ror	r20
    4406:	96 b5       	in	r25, 0x26	; 38
    4408:	17 c0       	rjmp	.+46     	; 0x4438 <Delay+0x46>
    440a:	86 b5       	in	r24, 0x26	; 38
    440c:	98 17       	cp	r25, r24
    440e:	e9 f3       	breq	.-6      	; 0x440a <Delay+0x18>
    4410:	26 b5       	in	r18, 0x26	; 38
    4412:	82 2f       	mov	r24, r18
    4414:	89 1b       	sub	r24, r25
    4416:	90 e0       	ldi	r25, 0x00	; 0
    4418:	a0 e0       	ldi	r26, 0x00	; 0
    441a:	b0 e0       	ldi	r27, 0x00	; 0
    441c:	48 17       	cp	r20, r24
    441e:	59 07       	cpc	r21, r25
    4420:	6a 07       	cpc	r22, r26
    4422:	7b 07       	cpc	r23, r27
    4424:	28 f0       	brcs	.+10     	; 0x4430 <Delay+0x3e>
    4426:	48 1b       	sub	r20, r24
    4428:	59 0b       	sbc	r21, r25
    442a:	6a 0b       	sbc	r22, r26
    442c:	7b 0b       	sbc	r23, r27
    442e:	03 c0       	rjmp	.+6      	; 0x4436 <Delay+0x44>
    4430:	40 e0       	ldi	r20, 0x00	; 0
    4432:	50 e0       	ldi	r21, 0x00	; 0
    4434:	ba 01       	movw	r22, r20
    4436:	92 2f       	mov	r25, r18
    4438:	41 15       	cp	r20, r1
    443a:	51 05       	cpc	r21, r1
    443c:	61 05       	cpc	r22, r1
    443e:	71 05       	cpc	r23, r1
    4440:	21 f7       	brne	.-56     	; 0x440a <Delay+0x18>
    4442:	08 95       	ret

Disassembly of section .text.PlatformAssert:

00004982 <PlatformAssert>:



void PlatformAssert( const char* peFilename, const int s32LineNumber )
{
	DebugOut("Assert %s: %d\n", peFilename, s32LineNumber);
    4982:	5f 93       	push	r21
    4984:	4f 93       	push	r20
    4986:	8f 93       	push	r24
    4988:	7f 93       	push	r23
    498a:	6f 93       	push	r22
    498c:	88 e3       	ldi	r24, 0x38	; 56
    498e:	92 e0       	ldi	r25, 0x02	; 2
    4990:	a0 e0       	ldi	r26, 0x00	; 0
    4992:	af 93       	push	r26
    4994:	9f 93       	push	r25
    4996:	8f 93       	push	r24
    4998:	0e 94 ee 27 	call	0x4fdc	; 0x4fdc <DebugOut>
	
//	while(1);
}
    499c:	8d b7       	in	r24, 0x3d	; 61
    499e:	9e b7       	in	r25, 0x3e	; 62
    49a0:	08 96       	adiw	r24, 0x08	; 8
    49a2:	0f b6       	in	r0, 0x3f	; 63
    49a4:	f8 94       	cli
    49a6:	9e bf       	out	0x3e, r25	; 62
    49a8:	0f be       	out	0x3f, r0	; 63
    49aa:	8d bf       	out	0x3d, r24	; 61
    49ac:	08 95       	ret

Disassembly of section .text.ModuleControllerStateHandle:

000018cc <ModuleControllerStateHandle>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    18cc:	1f 93       	push	r17
    18ce:	cf 93       	push	r28
    18d0:	df 93       	push	r29
    18d2:	d0 91 06 01 	lds	r29, 0x0106	; 0x800106 <sg_eModuleControllerStateTarget>
    18d6:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <sg_eModuleControllerStateMax>
    18da:	8d 17       	cp	r24, r29
    18dc:	30 f0       	brcs	.+12     	; 0x18ea <ModuleControllerStateHandle+0x1e>
    18de:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    18e2:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <sg_eModuleControllerStateMax>
    18e6:	89 17       	cp	r24, r25
    18e8:	10 f4       	brcc	.+4      	; 0x18ee <ModuleControllerStateHandle+0x22>
    18ea:	d0 91 05 01 	lds	r29, 0x0105	; 0x800105 <sg_eModuleControllerStateMax>
    18ee:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    18f2:	d8 17       	cp	r29, r24
    18f4:	09 f4       	brne	.+2      	; 0x18f8 <ModuleControllerStateHandle+0x2c>
    18f6:	f5 c0       	rjmp	.+490    	; 0x1ae2 <ModuleControllerStateHandle+0x216>
    18f8:	d2 30       	cpi	r29, 0x02	; 2
    18fa:	09 f4       	brne	.+2      	; 0x18fe <ModuleControllerStateHandle+0x32>
    18fc:	72 c0       	rjmp	.+228    	; 0x19e2 <ModuleControllerStateHandle+0x116>
    18fe:	28 f4       	brcc	.+10     	; 0x190a <ModuleControllerStateHandle+0x3e>
    1900:	dd 23       	and	r29, r29
    1902:	89 f0       	breq	.+34     	; 0x1926 <ModuleControllerStateHandle+0x5a>
    1904:	d1 30       	cpi	r29, 0x01	; 1
    1906:	e1 f1       	breq	.+120    	; 0x1980 <ModuleControllerStateHandle+0xb4>
    1908:	e0 c0       	rjmp	.+448    	; 0x1aca <ModuleControllerStateHandle+0x1fe>
    190a:	d3 30       	cpi	r29, 0x03	; 3
    190c:	09 f4       	brne	.+2      	; 0x1910 <ModuleControllerStateHandle+0x44>
    190e:	a9 c0       	rjmp	.+338    	; 0x1a62 <ModuleControllerStateHandle+0x196>
    1910:	d5 30       	cpi	r29, 0x05	; 5
    1912:	09 f0       	breq	.+2      	; 0x1916 <ModuleControllerStateHandle+0x4a>
    1914:	da c0       	rjmp	.+436    	; 0x1aca <ModuleControllerStateHandle+0x1fe>
    1916:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <sg_eModuleControllerStateCurrent>
    191a:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <sg_eModuleControllerStateTarget>
    191e:	d0 91 07 01 	lds	r29, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    1922:	0e 94 0a 28 	call	0x5014	; 0x5014 <ADCSetPowerOn>
    1926:	88 b1       	in	r24, 0x08	; 8
    1928:	8f 7e       	andi	r24, 0xEF	; 239
    192a:	88 b9       	out	0x08, r24	; 8
    192c:	68 e8       	ldi	r22, 0x88	; 136
    192e:	73 e1       	ldi	r23, 0x13	; 19
    1930:	80 e0       	ldi	r24, 0x00	; 0
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <Delay>
    1938:	8e b1       	in	r24, 0x0e	; 14
    193a:	8d 7f       	andi	r24, 0xFD	; 253
    193c:	8e b9       	out	0x0e, r24	; 14
    193e:	68 e8       	ldi	r22, 0x88	; 136
    1940:	73 e1       	ldi	r23, 0x13	; 19
    1942:	80 e0       	ldi	r24, 0x00	; 0
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <Delay>
    194a:	eb e6       	ldi	r30, 0x6B	; 107
    194c:	f0 e0       	ldi	r31, 0x00	; 0
    194e:	80 81       	ld	r24, Z
    1950:	8d 7f       	andi	r24, 0xFD	; 253
    1952:	80 83       	st	Z, r24
    1954:	e8 e6       	ldi	r30, 0x68	; 104
    1956:	f0 e0       	ldi	r31, 0x00	; 0
    1958:	80 81       	ld	r24, Z
    195a:	8d 7f       	andi	r24, 0xFD	; 253
    195c:	80 83       	st	Z, r24
    195e:	81 e0       	ldi	r24, 0x01	; 1
    1960:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <sg_bCellBalanceReady>
    1964:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <sg_bCellBalancedOnce>
    1968:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <sg_bStopDischarge>
    196c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <sg_bSDCardReady>
    1970:	88 23       	and	r24, r24
    1972:	09 f4       	brne	.+2      	; 0x1976 <ModuleControllerStateHandle+0xaa>
    1974:	b2 c0       	rjmp	.+356    	; 0x1ada <ModuleControllerStateHandle+0x20e>
    1976:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <STORE_EndSession>
    197a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <sg_bSDCardReady>
    197e:	ad c0       	rjmp	.+346    	; 0x1ada <ModuleControllerStateHandle+0x20e>
    1980:	88 b1       	in	r24, 0x08	; 8
    1982:	8f 7e       	andi	r24, 0xEF	; 239
    1984:	88 b9       	out	0x08, r24	; 8
    1986:	68 e8       	ldi	r22, 0x88	; 136
    1988:	73 e1       	ldi	r23, 0x13	; 19
    198a:	80 e0       	ldi	r24, 0x00	; 0
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <Delay>
    1992:	eb e6       	ldi	r30, 0x6B	; 107
    1994:	f0 e0       	ldi	r31, 0x00	; 0
    1996:	80 81       	ld	r24, Z
    1998:	8d 7f       	andi	r24, 0xFD	; 253
    199a:	80 83       	st	Z, r24
    199c:	e8 e6       	ldi	r30, 0x68	; 104
    199e:	f0 e0       	ldi	r31, 0x00	; 0
    19a0:	80 81       	ld	r24, Z
    19a2:	8d 7f       	andi	r24, 0xFD	; 253
    19a4:	80 83       	st	Z, r24
    19a6:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <sg_bModuleRegistered>
    19aa:	88 23       	and	r24, r24
    19ac:	19 f0       	breq	.+6      	; 0x19b4 <ModuleControllerStateHandle+0xe8>
    19ae:	8e b1       	in	r24, 0x0e	; 14
    19b0:	82 60       	ori	r24, 0x02	; 2
    19b2:	8e b9       	out	0x0e, r24	; 14
    19b4:	68 e8       	ldi	r22, 0x88	; 136
    19b6:	73 e1       	ldi	r23, 0x13	; 19
    19b8:	80 e0       	ldi	r24, 0x00	; 0
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <Delay>
    19c0:	81 e0       	ldi	r24, 0x01	; 1
    19c2:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <sg_bCellBalanceReady>
    19c6:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <sg_bCellBalancedOnce>
    19ca:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <sg_bStopDischarge>
    19ce:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <sg_bSDCardReady>
    19d2:	88 23       	and	r24, r24
    19d4:	09 f4       	brne	.+2      	; 0x19d8 <ModuleControllerStateHandle+0x10c>
    19d6:	81 c0       	rjmp	.+258    	; 0x1ada <ModuleControllerStateHandle+0x20e>
    19d8:	0e 94 cf 21 	call	0x439e	; 0x439e <STORE_StartNewSession>
    19dc:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <sg_bSDCardReady>
    19e0:	7c c0       	rjmp	.+248    	; 0x1ada <ModuleControllerStateHandle+0x20e>
    19e2:	61 99       	sbic	0x0c, 1	; 12
    19e4:	0d c0       	rjmp	.+26     	; 0x1a00 <ModuleControllerStateHandle+0x134>
    19e6:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <sg_bModuleRegistered>
    19ea:	88 23       	and	r24, r24
    19ec:	19 f0       	breq	.+6      	; 0x19f4 <ModuleControllerStateHandle+0x128>
    19ee:	8e b1       	in	r24, 0x0e	; 14
    19f0:	82 60       	ori	r24, 0x02	; 2
    19f2:	8e b9       	out	0x0e, r24	; 14
    19f4:	68 e8       	ldi	r22, 0x88	; 136
    19f6:	73 e1       	ldi	r23, 0x13	; 19
    19f8:	80 e0       	ldi	r24, 0x00	; 0
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <Delay>
    1a00:	cb e0       	ldi	r28, 0x0B	; 11
    1a02:	2a c0       	rjmp	.+84     	; 0x1a58 <ModuleControllerStateHandle+0x18c>
    1a04:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <sg_bModuleRegistered>
    1a08:	88 23       	and	r24, r24
    1a0a:	49 f0       	breq	.+18     	; 0x1a1e <ModuleControllerStateHandle+0x152>
    1a0c:	88 b1       	in	r24, 0x08	; 8
    1a0e:	80 61       	ori	r24, 0x10	; 16
    1a10:	88 b9       	out	0x08, r24	; 8
    1a12:	88 b1       	in	r24, 0x08	; 8
    1a14:	8f 77       	andi	r24, 0x7F	; 127
    1a16:	88 b9       	out	0x08, r24	; 8
    1a18:	88 b1       	in	r24, 0x08	; 8
    1a1a:	80 68       	ori	r24, 0x80	; 128
    1a1c:	88 b9       	out	0x08, r24	; 8
    1a1e:	68 ee       	ldi	r22, 0xE8	; 232
    1a20:	73 e0       	ldi	r23, 0x03	; 3
    1a22:	80 e0       	ldi	r24, 0x00	; 0
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <Delay>
    1a2a:	88 b1       	in	r24, 0x08	; 8
    1a2c:	8f 7e       	andi	r24, 0xEF	; 239
    1a2e:	88 b9       	out	0x08, r24	; 8
    1a30:	68 e8       	ldi	r22, 0x88	; 136
    1a32:	73 e1       	ldi	r23, 0x13	; 19
    1a34:	80 e0       	ldi	r24, 0x00	; 0
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <Delay>
    1a3c:	60 e5       	ldi	r22, 0x50	; 80
    1a3e:	73 ec       	ldi	r23, 0xC3	; 195
    1a40:	80 e0       	ldi	r24, 0x00	; 0
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <Delay>
    1a48:	80 91 1b 03 	lds	r24, 0x031B	; 0x80031b <sg_bOvercurrentSignal>
    1a4c:	88 23       	and	r24, r24
    1a4e:	19 f0       	breq	.+6      	; 0x1a56 <ModuleControllerStateHandle+0x18a>
    1a50:	10 92 1b 03 	sts	0x031B, r1	; 0x80031b <sg_bOvercurrentSignal>
    1a54:	01 c0       	rjmp	.+2      	; 0x1a58 <ModuleControllerStateHandle+0x18c>
    1a56:	c1 2f       	mov	r28, r17
    1a58:	1f ef       	ldi	r17, 0xFF	; 255
    1a5a:	1c 0f       	add	r17, r28
    1a5c:	c1 11       	cpse	r28, r1
    1a5e:	d2 cf       	rjmp	.-92     	; 0x1a04 <ModuleControllerStateHandle+0x138>
    1a60:	3c c0       	rjmp	.+120    	; 0x1ada <ModuleControllerStateHandle+0x20e>
    1a62:	61 99       	sbic	0x0c, 1	; 12
    1a64:	0d c0       	rjmp	.+26     	; 0x1a80 <ModuleControllerStateHandle+0x1b4>
    1a66:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <sg_bModuleRegistered>
    1a6a:	88 23       	and	r24, r24
    1a6c:	19 f0       	breq	.+6      	; 0x1a74 <ModuleControllerStateHandle+0x1a8>
    1a6e:	8e b1       	in	r24, 0x0e	; 14
    1a70:	82 60       	ori	r24, 0x02	; 2
    1a72:	8e b9       	out	0x0e, r24	; 14
    1a74:	68 e8       	ldi	r22, 0x88	; 136
    1a76:	73 e1       	ldi	r23, 0x13	; 19
    1a78:	80 e0       	ldi	r24, 0x00	; 0
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <Delay>
    1a80:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <sg_bModuleRegistered>
    1a84:	88 23       	and	r24, r24
    1a86:	49 f0       	breq	.+18     	; 0x1a9a <ModuleControllerStateHandle+0x1ce>
    1a88:	88 b1       	in	r24, 0x08	; 8
    1a8a:	80 61       	ori	r24, 0x10	; 16
    1a8c:	88 b9       	out	0x08, r24	; 8
    1a8e:	88 b1       	in	r24, 0x08	; 8
    1a90:	8f 77       	andi	r24, 0x7F	; 127
    1a92:	88 b9       	out	0x08, r24	; 8
    1a94:	88 b1       	in	r24, 0x08	; 8
    1a96:	80 68       	ori	r24, 0x80	; 128
    1a98:	88 b9       	out	0x08, r24	; 8
    1a9a:	68 e8       	ldi	r22, 0x88	; 136
    1a9c:	73 e1       	ldi	r23, 0x13	; 19
    1a9e:	80 e0       	ldi	r24, 0x00	; 0
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <Delay>
    1aa6:	10 92 1e 03 	sts	0x031E, r1	; 0x80031e <sg_bCellBalanceReady>
    1aaa:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <sg_bCellBalancedOnce>
    1aae:	81 e0       	ldi	r24, 0x01	; 1
    1ab0:	80 93 1c 03 	sts	0x031C, r24	; 0x80031c <sg_bStopDischarge>
    1ab4:	eb e6       	ldi	r30, 0x6B	; 107
    1ab6:	f0 e0       	ldi	r31, 0x00	; 0
    1ab8:	80 81       	ld	r24, Z
    1aba:	82 60       	ori	r24, 0x02	; 2
    1abc:	80 83       	st	Z, r24
    1abe:	e8 e6       	ldi	r30, 0x68	; 104
    1ac0:	f0 e0       	ldi	r31, 0x00	; 0
    1ac2:	80 81       	ld	r24, Z
    1ac4:	82 60       	ori	r24, 0x02	; 2
    1ac6:	80 83       	st	Z, r24
    1ac8:	08 c0       	rjmp	.+16     	; 0x1ada <ModuleControllerStateHandle+0x20e>
    1aca:	4a ef       	ldi	r20, 0xFA	; 250
    1acc:	53 e0       	ldi	r21, 0x03	; 3
    1ace:	67 e4       	ldi	r22, 0x47	; 71
    1ad0:	72 e0       	ldi	r23, 0x02	; 2
    1ad2:	80 e0       	ldi	r24, 0x00	; 0
    1ad4:	0e 94 c1 24 	call	0x4982	; 0x4982 <PlatformAssert>
    1ad8:	d5 e0       	ldi	r29, 0x05	; 5
    1ada:	d0 93 07 01 	sts	0x0107, r29	; 0x800107 <sg_eModuleControllerStateCurrent>
    1ade:	0e 94 ce 27 	call	0x4f9c	; 0x4f9c <SendModuleControllerStatus>
    1ae2:	df 91       	pop	r29
    1ae4:	cf 91       	pop	r28
    1ae6:	1f 91       	pop	r17
    1ae8:	08 95       	ret

Disassembly of section .text.PlatformGetRegistrationID:

00005054 <PlatformGetRegistrationID>:
}

uint8_t PlatformGetRegistrationID( void )
{
	return(sg_u8ModuleRegistrationID);
}
    5054:	80 91 2b 03 	lds	r24, 0x032B	; 0x80032b <sg_u8ModuleRegistrationID>
    5058:	08 95       	ret

Disassembly of section .text.SetSysclock:

00005020 <SetSysclock>:

void SetSysclock( void )
{
	// First set the prescaler enable
	CLKPR = (1 << CLKPCE);
    5020:	e1 e6       	ldi	r30, 0x61	; 97
    5022:	f0 e0       	ldi	r31, 0x00	; 0
    5024:	80 e8       	ldi	r24, 0x80	; 128
    5026:	80 83       	st	Z, r24
	
	// Now set the desired prescale value
	CLKPR = SYSCLOCK_PRESCALE;
    5028:	10 82       	st	Z, r1
    502a:	08 95       	ret

Disassembly of section .text.ModuleControllerGetUniqueID:

00003b8e <ModuleControllerGetUniqueID>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    3b8e:	cf 92       	push	r12
    3b90:	df 92       	push	r13
    3b92:	ef 92       	push	r14
    3b94:	ff 92       	push	r15
    3b96:	80 e0       	ldi	r24, 0x00	; 0
    3b98:	90 e0       	ldi	r25, 0x00	; 0
    3b9a:	0e 94 a1 27 	call	0x4f42	; 0x4f42 <EEPROMRead>
    3b9e:	c8 2e       	mov	r12, r24
    3ba0:	d1 2c       	mov	r13, r1
    3ba2:	e1 2c       	mov	r14, r1
    3ba4:	f1 2c       	mov	r15, r1
    3ba6:	81 e0       	ldi	r24, 0x01	; 1
    3ba8:	90 e0       	ldi	r25, 0x00	; 0
    3baa:	0e 94 a1 27 	call	0x4f42	; 0x4f42 <EEPROMRead>
    3bae:	90 e0       	ldi	r25, 0x00	; 0
    3bb0:	a0 e0       	ldi	r26, 0x00	; 0
    3bb2:	b0 e0       	ldi	r27, 0x00	; 0
    3bb4:	ba 2f       	mov	r27, r26
    3bb6:	a9 2f       	mov	r26, r25
    3bb8:	98 2f       	mov	r25, r24
    3bba:	88 27       	eor	r24, r24
    3bbc:	c8 2a       	or	r12, r24
    3bbe:	d9 2a       	or	r13, r25
    3bc0:	ea 2a       	or	r14, r26
    3bc2:	fb 2a       	or	r15, r27
    3bc4:	82 e0       	ldi	r24, 0x02	; 2
    3bc6:	90 e0       	ldi	r25, 0x00	; 0
    3bc8:	0e 94 a1 27 	call	0x4f42	; 0x4f42 <EEPROMRead>
    3bcc:	90 e0       	ldi	r25, 0x00	; 0
    3bce:	a0 e0       	ldi	r26, 0x00	; 0
    3bd0:	b0 e0       	ldi	r27, 0x00	; 0
    3bd2:	dc 01       	movw	r26, r24
    3bd4:	99 27       	eor	r25, r25
    3bd6:	88 27       	eor	r24, r24
    3bd8:	c8 2a       	or	r12, r24
    3bda:	d9 2a       	or	r13, r25
    3bdc:	ea 2a       	or	r14, r26
    3bde:	fb 2a       	or	r15, r27
    3be0:	83 e0       	ldi	r24, 0x03	; 3
    3be2:	90 e0       	ldi	r25, 0x00	; 0
    3be4:	0e 94 a1 27 	call	0x4f42	; 0x4f42 <EEPROMRead>
    3be8:	90 e0       	ldi	r25, 0x00	; 0
    3bea:	a0 e0       	ldi	r26, 0x00	; 0
    3bec:	b0 e0       	ldi	r27, 0x00	; 0
    3bee:	b8 2f       	mov	r27, r24
    3bf0:	aa 27       	eor	r26, r26
    3bf2:	99 27       	eor	r25, r25
    3bf4:	88 27       	eor	r24, r24
    3bf6:	bc 01       	movw	r22, r24
    3bf8:	cd 01       	movw	r24, r26
    3bfa:	6c 29       	or	r22, r12
    3bfc:	7d 29       	or	r23, r13
    3bfe:	8e 29       	or	r24, r14
    3c00:	9f 29       	or	r25, r15
    3c02:	ff 90       	pop	r15
    3c04:	ef 90       	pop	r14
    3c06:	df 90       	pop	r13
    3c08:	cf 90       	pop	r12
    3c0a:	08 95       	ret

Disassembly of section .text.TimerInit:

00004444 <TimerInit>:
    4444:	14 bc       	out	0x24, r1	; 36
    4446:	92 e0       	ldi	r25, 0x02	; 2
    4448:	95 bd       	out	0x25, r25	; 37
    444a:	a4 e6       	ldi	r26, 0x64	; 100
    444c:	b0 e0       	ldi	r27, 0x00	; 0
    444e:	8c 91       	ld	r24, X
    4450:	87 7f       	andi	r24, 0xF7	; 247
    4452:	8c 93       	st	X, r24
    4454:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f0080>
    4458:	84 e0       	ldi	r24, 0x04	; 4
    445a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f0081>
    445e:	96 bb       	out	0x16, r25	; 22
    4460:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f0084>
    4464:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f0085>
    4468:	8b 5c       	subi	r24, 0xCB	; 203
    446a:	93 4f       	sbci	r25, 0xF3	; 243
    446c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f0089>
    4470:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f0088>
    4474:	ef e6       	ldi	r30, 0x6F	; 111
    4476:	f0 e0       	ldi	r31, 0x00	; 0
    4478:	80 81       	ld	r24, Z
    447a:	82 60       	ori	r24, 0x02	; 2
    447c:	80 83       	st	Z, r24
    447e:	8c 91       	ld	r24, X
    4480:	8f 7e       	andi	r24, 0xEF	; 239
    4482:	8c 93       	st	X, r24
    4484:	ae e6       	ldi	r26, 0x6E	; 110
    4486:	b0 e0       	ldi	r27, 0x00	; 0
    4488:	8c 91       	ld	r24, X
    448a:	8e 7f       	andi	r24, 0xFE	; 254
    448c:	8c 93       	st	X, r24
    448e:	80 81       	ld	r24, Z
    4490:	8e 7f       	andi	r24, 0xFE	; 254
    4492:	80 83       	st	Z, r24
    4494:	08 95       	ret

Disassembly of section .text.__vector_12:

000033e2 <__vector_12>:
    33e2:	78 94       	sei
    33e4:	1f 92       	push	r1
    33e6:	0f 92       	push	r0
    33e8:	0f b6       	in	r0, 0x3f	; 63
    33ea:	0f 92       	push	r0
    33ec:	11 24       	eor	r1, r1
    33ee:	8f 93       	push	r24
    33f0:	9f 93       	push	r25
    33f2:	ef 93       	push	r30
    33f4:	ff 93       	push	r31
    33f6:	82 e0       	ldi	r24, 0x02	; 2
    33f8:	86 bb       	out	0x16, r24	; 22
    33fa:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f0084>
    33fe:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f0085>
    3402:	8b 5c       	subi	r24, 0xCB	; 203
    3404:	93 4f       	sbci	r25, 0xF3	; 243
    3406:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f0089>
    340a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f0088>
    340e:	ef e6       	ldi	r30, 0x6F	; 111
    3410:	f0 e0       	ldi	r31, 0x00	; 0
    3412:	80 81       	ld	r24, Z
    3414:	82 60       	ori	r24, 0x02	; 2
    3416:	80 83       	st	Z, r24
    3418:	81 e0       	ldi	r24, 0x01	; 1
    341a:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <sg_bNewTick>
    341e:	80 91 86 09 	lds	r24, 0x0986	; 0x800986 <sg_u8CellFrameTimer>
    3422:	8f 5f       	subi	r24, 0xFF	; 255
    3424:	80 93 86 09 	sts	0x0986, r24	; 0x800986 <sg_u8CellFrameTimer>
    3428:	80 91 86 09 	lds	r24, 0x0986	; 0x800986 <sg_u8CellFrameTimer>
    342c:	83 30       	cpi	r24, 0x03	; 3
    342e:	78 f0       	brcs	.+30     	; 0x344e <__vector_12+0x6c>
    3430:	10 92 86 09 	sts	0x0986, r1	; 0x800986 <sg_u8CellFrameTimer>
    3434:	81 e0       	ldi	r24, 0x01	; 1
    3436:	80 93 85 09 	sts	0x0985, r24	; 0x800985 <sg_bFrameStart>
    343a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <sg_eFrameStatus>
    343e:	81 30       	cpi	r24, 0x01	; 1
    3440:	19 f4       	brne	.+6      	; 0x3448 <__vector_12+0x66>
    3442:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <sg_eFrameStatus>
    3446:	03 c0       	rjmp	.+6      	; 0x344e <__vector_12+0x6c>
    3448:	81 e0       	ldi	r24, 0x01	; 1
    344a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <sg_eFrameStatus>
    344e:	80 91 83 09 	lds	r24, 0x0983	; 0x800983 <sg_u8TicksSinceLastPackControllerMessage>
    3452:	8f 3f       	cpi	r24, 0xFF	; 255
    3454:	29 f0       	breq	.+10     	; 0x3460 <__vector_12+0x7e>
    3456:	80 91 83 09 	lds	r24, 0x0983	; 0x800983 <sg_u8TicksSinceLastPackControllerMessage>
    345a:	8f 5f       	subi	r24, 0xFF	; 255
    345c:	80 93 83 09 	sts	0x0983, r24	; 0x800983 <sg_u8TicksSinceLastPackControllerMessage>
    3460:	80 91 83 09 	lds	r24, 0x0983	; 0x800983 <sg_u8TicksSinceLastPackControllerMessage>
    3464:	8f 36       	cpi	r24, 0x6F	; 111
    3466:	40 f0       	brcs	.+16     	; 0x3478 <__vector_12+0x96>
    3468:	80 91 83 09 	lds	r24, 0x0983	; 0x800983 <sg_u8TicksSinceLastPackControllerMessage>
    346c:	8f 56       	subi	r24, 0x6F	; 111
    346e:	80 93 83 09 	sts	0x0983, r24	; 0x800983 <sg_u8TicksSinceLastPackControllerMessage>
    3472:	81 e0       	ldi	r24, 0x01	; 1
    3474:	80 93 23 03 	sts	0x0323, r24	; 0x800323 <sg_bPackControllerTimeout>
    3478:	80 91 84 09 	lds	r24, 0x0984	; 0x800984 <sg_u8CellStringPowerTimer>
    347c:	88 23       	and	r24, r24
    347e:	29 f0       	breq	.+10     	; 0x348a <__vector_12+0xa8>
    3480:	80 91 84 09 	lds	r24, 0x0984	; 0x800984 <sg_u8CellStringPowerTimer>
    3484:	81 50       	subi	r24, 0x01	; 1
    3486:	80 93 84 09 	sts	0x0984, r24	; 0x800984 <sg_u8CellStringPowerTimer>
    348a:	ff 91       	pop	r31
    348c:	ef 91       	pop	r30
    348e:	9f 91       	pop	r25
    3490:	8f 91       	pop	r24
    3492:	0f 90       	pop	r0
    3494:	0f be       	out	0x3f, r0	; 63
    3496:	0f 90       	pop	r0
    3498:	1f 90       	pop	r1
    349a:	18 95       	reti

Disassembly of section .text.WatchdogReset:

00005062 <WatchdogReset>:
		sg_u8CellStringPowerTimer--;
	}
}

void WatchdogReset( void )
{
    5062:	08 95       	ret

Disassembly of section .text.WatchdogOff:

00004e60 <WatchdogOff>:
// }

// Assume interrupts are disabled
void WatchdogOff( void )  // turn it off even when WDT_ENABLE is not defined
{
	wdt_reset();
    4e60:	a8 95       	wdr
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    4e62:	0f b6       	in	r0, 0x3f	; 63
    4e64:	f8 94       	cli
    4e66:	a8 95       	wdr
    4e68:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f0060>
    4e6c:	88 61       	ori	r24, 0x18	; 24
    4e6e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f0060>
    4e72:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f0060>
    4e76:	0f be       	out	0x3f, r0	; 63
    4e78:	08 95       	ret

Disassembly of section .text.__vector_28:

00004496 <__vector_28>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    4496:	1f 92       	push	r1
    4498:	0f 92       	push	r0
    449a:	0f b6       	in	r0, 0x3f	; 63
    449c:	0f 92       	push	r0
    449e:	11 24       	eor	r1, r1
    44a0:	2f 93       	push	r18
    44a2:	3f 93       	push	r19
    44a4:	4f 93       	push	r20
    44a6:	5f 93       	push	r21
    44a8:	6f 93       	push	r22
    44aa:	7f 93       	push	r23
    44ac:	8f 93       	push	r24
    44ae:	9f 93       	push	r25
    44b0:	af 93       	push	r26
    44b2:	bf 93       	push	r27
    44b4:	ef 93       	push	r30
    44b6:	ff 93       	push	r31
    44b8:	46 e0       	ldi	r20, 0x06	; 6
    44ba:	53 e0       	ldi	r21, 0x03	; 3
    44bc:	67 e4       	ldi	r22, 0x47	; 71
    44be:	72 e0       	ldi	r23, 0x02	; 2
    44c0:	80 e0       	ldi	r24, 0x00	; 0
    44c2:	0e 94 c1 24 	call	0x4982	; 0x4982 <PlatformAssert>
    44c6:	ff 91       	pop	r31
    44c8:	ef 91       	pop	r30
    44ca:	bf 91       	pop	r27
    44cc:	af 91       	pop	r26
    44ce:	9f 91       	pop	r25
    44d0:	8f 91       	pop	r24
    44d2:	7f 91       	pop	r23
    44d4:	6f 91       	pop	r22
    44d6:	5f 91       	pop	r21
    44d8:	4f 91       	pop	r20
    44da:	3f 91       	pop	r19
    44dc:	2f 91       	pop	r18
    44de:	0f 90       	pop	r0
    44e0:	0f be       	out	0x3f, r0	; 63
    44e2:	0f 90       	pop	r0
    44e4:	1f 90       	pop	r1
    44e6:	18 95       	reti

Disassembly of section .text.__vector_23:

00003864 <__vector_23>:
    3864:	78 94       	sei
    3866:	1f 92       	push	r1
    3868:	0f 92       	push	r0
    386a:	0f b6       	in	r0, 0x3f	; 63
    386c:	0f 92       	push	r0
    386e:	11 24       	eor	r1, r1
    3870:	2f 93       	push	r18
    3872:	3f 93       	push	r19
    3874:	4f 93       	push	r20
    3876:	5f 93       	push	r21
    3878:	6f 93       	push	r22
    387a:	7f 93       	push	r23
    387c:	8f 93       	push	r24
    387e:	9f 93       	push	r25
    3880:	af 93       	push	r26
    3882:	bf 93       	push	r27
    3884:	ef 93       	push	r30
    3886:	ff 93       	push	r31
    3888:	96 b1       	in	r25, 0x06	; 6
    388a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    388e:	83 30       	cpi	r24, 0x03	; 3
    3890:	21 f0       	breq	.+8      	; 0x389a <__vector_23+0x36>
    3892:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    3896:	82 30       	cpi	r24, 0x02	; 2
    3898:	c9 f4       	brne	.+50     	; 0x38cc <__vector_23+0x68>
    389a:	91 ff       	sbrs	r25, 1
    389c:	17 c0       	rjmp	.+46     	; 0x38cc <__vector_23+0x68>
    389e:	88 b1       	in	r24, 0x08	; 8
    38a0:	8f 7e       	andi	r24, 0xEF	; 239
    38a2:	88 b9       	out	0x08, r24	; 8
    38a4:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sg_eModuleControllerStateCurrent>
    38a8:	83 30       	cpi	r24, 0x03	; 3
    38aa:	19 f4       	brne	.+6      	; 0x38b2 <__vector_23+0x4e>
    38ac:	81 e0       	ldi	r24, 0x01	; 1
    38ae:	0e 94 1b 28 	call	0x5036	; 0x5036 <ModuleControllerStateSet>
    38b2:	eb e6       	ldi	r30, 0x6B	; 107
    38b4:	f0 e0       	ldi	r31, 0x00	; 0
    38b6:	80 81       	ld	r24, Z
    38b8:	8d 7f       	andi	r24, 0xFD	; 253
    38ba:	80 83       	st	Z, r24
    38bc:	e8 e6       	ldi	r30, 0x68	; 104
    38be:	f0 e0       	ldi	r31, 0x00	; 0
    38c0:	80 81       	ld	r24, Z
    38c2:	8d 7f       	andi	r24, 0xFD	; 253
    38c4:	80 83       	st	Z, r24
    38c6:	81 e0       	ldi	r24, 0x01	; 1
    38c8:	80 93 1b 03 	sts	0x031B, r24	; 0x80031b <sg_bOvercurrentSignal>
    38cc:	ff 91       	pop	r31
    38ce:	ef 91       	pop	r30
    38d0:	bf 91       	pop	r27
    38d2:	af 91       	pop	r26
    38d4:	9f 91       	pop	r25
    38d6:	8f 91       	pop	r24
    38d8:	7f 91       	pop	r23
    38da:	6f 91       	pop	r22
    38dc:	5f 91       	pop	r21
    38de:	4f 91       	pop	r20
    38e0:	3f 91       	pop	r19
    38e2:	2f 91       	pop	r18
    38e4:	0f 90       	pop	r0
    38e6:	0f be       	out	0x3f, r0	; 63
    38e8:	0f 90       	pop	r0
    38ea:	1f 90       	pop	r1
    38ec:	18 95       	reti

Disassembly of section .text.__vector_24:

000044e8 <__vector_24>:
    44e8:	78 94       	sei
    44ea:	1f 92       	push	r1
    44ec:	0f 92       	push	r0
    44ee:	0f b6       	in	r0, 0x3f	; 63
    44f0:	0f 92       	push	r0
    44f2:	11 24       	eor	r1, r1
    44f4:	2f 93       	push	r18
    44f6:	3f 93       	push	r19
    44f8:	4f 93       	push	r20
    44fa:	5f 93       	push	r21
    44fc:	6f 93       	push	r22
    44fe:	7f 93       	push	r23
    4500:	8f 93       	push	r24
    4502:	9f 93       	push	r25
    4504:	af 93       	push	r26
    4506:	bf 93       	push	r27
    4508:	ef 93       	push	r30
    450a:	ff 93       	push	r31
    450c:	8b b1       	in	r24, 0x0b	; 11
    450e:	0e 94 3d 27 	call	0x4e7a	; 0x4e7a <Check5VLoss>
    4512:	ff 91       	pop	r31
    4514:	ef 91       	pop	r30
    4516:	bf 91       	pop	r27
    4518:	af 91       	pop	r26
    451a:	9f 91       	pop	r25
    451c:	8f 91       	pop	r24
    451e:	7f 91       	pop	r23
    4520:	6f 91       	pop	r22
    4522:	5f 91       	pop	r21
    4524:	4f 91       	pop	r20
    4526:	3f 91       	pop	r19
    4528:	2f 91       	pop	r18
    452a:	0f 90       	pop	r0
    452c:	0f be       	out	0x3f, r0	; 63
    452e:	0f 90       	pop	r0
    4530:	1f 90       	pop	r1
    4532:	18 95       	reti

Disassembly of section .text.vUARTRXStart:

00004ed8 <vUARTRXStart>:
}

// Called at the start of cell string data via MC RX
void vUARTRXStart(void)
{
	sg_u8CellBufferRX = 0;
    4ed8:	10 92 81 09 	sts	0x0981, r1	; 0x800981 <sg_u8CellBufferRX>
	sg_u8CellIndex = 0;
    4edc:	10 92 82 09 	sts	0x0982, r1	; 0x800982 <sg_u8CellIndex>
	sg_u16BytesReceived = 0;
    4ee0:	10 92 6b 09 	sts	0x096B, r1	; 0x80096b <sg_u16BytesReceived+0x1>
    4ee4:	10 92 6a 09 	sts	0x096A, r1	; 0x80096a <sg_u16BytesReceived>
	sg_u8CellReports = 0;
    4ee8:	10 92 80 09 	sts	0x0980, r1	; 0x800980 <sg_u8CellReports>
    4eec:	08 95       	ret

Disassembly of section .text.vUARTRXEnd:

00004d7e <vUARTRXEnd>:
	// disable the edge interrupt
//	VUART_RX_DISABLE();
	// disable bit timer interrupt, should already be off but just in case
//	TIMER_CHB_INT_DISABLE();
	// update bytes and cells received
	sg_sFrame.sg_u16BytesReceived = sg_u16BytesReceived;
    4d7e:	80 91 6a 09 	lds	r24, 0x096A	; 0x80096a <sg_u16BytesReceived>
    4d82:	90 91 6b 09 	lds	r25, 0x096B	; 0x80096b <sg_u16BytesReceived+0x1>
    4d86:	e0 e1       	ldi	r30, 0x10	; 16
    4d88:	f1 e0       	ldi	r31, 0x01	; 1
    4d8a:	94 a7       	std	Z+44, r25	; 0x2c
    4d8c:	83 a7       	std	Z+43, r24	; 0x2b
	sg_sFrame.sg_u8CellCPUCount = sg_u8CellReports;
    4d8e:	80 91 80 09 	lds	r24, 0x0980	; 0x800980 <sg_u8CellReports>
    4d92:	85 a7       	std	Z+45, r24	; 0x2d
	sg_u16BytesReceived = 0;
    4d94:	10 92 6b 09 	sts	0x096B, r1	; 0x80096b <sg_u16BytesReceived+0x1>
    4d98:	10 92 6a 09 	sts	0x096A, r1	; 0x80096a <sg_u16BytesReceived>
	sg_u8CellReports = 0;
    4d9c:	10 92 80 09 	sts	0x0980, r1	; 0x800980 <sg_u8CellReports>
    4da0:	08 95       	ret

Disassembly of section .text.vUARTRXData:

00003dfc <vUARTRXData>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    3dfc:	e0 91 81 09 	lds	r30, 0x0981	; 0x800981 <sg_u8CellBufferRX>
    3e00:	21 e0       	ldi	r18, 0x01	; 1
    3e02:	2e 0f       	add	r18, r30
    3e04:	20 93 81 09 	sts	0x0981, r18	; 0x800981 <sg_u8CellBufferRX>
    3e08:	f0 e0       	ldi	r31, 0x00	; 0
    3e0a:	ec 5a       	subi	r30, 0xAC	; 172
    3e0c:	f6 4f       	sbci	r31, 0xF6	; 246
    3e0e:	80 83       	st	Z, r24
    3e10:	80 91 6a 09 	lds	r24, 0x096A	; 0x80096a <sg_u16BytesReceived>
    3e14:	90 91 6b 09 	lds	r25, 0x096B	; 0x80096b <sg_u16BytesReceived+0x1>
    3e18:	01 96       	adiw	r24, 0x01	; 1
    3e1a:	90 93 6b 09 	sts	0x096B, r25	; 0x80096b <sg_u16BytesReceived+0x1>
    3e1e:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <sg_u16BytesReceived>
    3e22:	24 30       	cpi	r18, 0x04	; 4
    3e24:	38 f1       	brcs	.+78     	; 0x3e74 <vUARTRXData+0x78>
    3e26:	10 92 81 09 	sts	0x0981, r1	; 0x800981 <sg_u8CellBufferRX>
    3e2a:	80 91 82 09 	lds	r24, 0x0982	; 0x800982 <sg_u8CellIndex>
    3e2e:	8c 36       	cpi	r24, 0x6C	; 108
    3e30:	08 f5       	brcc	.+66     	; 0x3e74 <vUARTRXData+0x78>
    3e32:	e8 2f       	mov	r30, r24
    3e34:	f0 e0       	ldi	r31, 0x00	; 0
    3e36:	75 96       	adiw	r30, 0x15	; 21
    3e38:	ee 0f       	add	r30, r30
    3e3a:	ff 1f       	adc	r31, r31
    3e3c:	ee 0f       	add	r30, r30
    3e3e:	ff 1f       	adc	r31, r31
    3e40:	e0 5f       	subi	r30, 0xF0	; 240
    3e42:	fe 4f       	sbci	r31, 0xFE	; 254
    3e44:	a4 e5       	ldi	r26, 0x54	; 84
    3e46:	b9 e0       	ldi	r27, 0x09	; 9
    3e48:	4d 91       	ld	r20, X+
    3e4a:	5d 91       	ld	r21, X+
    3e4c:	6d 91       	ld	r22, X+
    3e4e:	7c 91       	ld	r23, X
    3e50:	13 97       	sbiw	r26, 0x03	; 3
    3e52:	41 83       	std	Z+1, r20	; 0x01
    3e54:	52 83       	std	Z+2, r21	; 0x02
    3e56:	63 83       	std	Z+3, r22	; 0x03
    3e58:	74 83       	std	Z+4, r23	; 0x04
    3e5a:	1d 92       	st	X+, r1
    3e5c:	1d 92       	st	X+, r1
    3e5e:	1d 92       	st	X+, r1
    3e60:	1c 92       	st	X, r1
    3e62:	13 97       	sbiw	r26, 0x03	; 3
    3e64:	8f 5f       	subi	r24, 0xFF	; 255
    3e66:	80 93 82 09 	sts	0x0982, r24	; 0x800982 <sg_u8CellIndex>
    3e6a:	80 91 80 09 	lds	r24, 0x0980	; 0x800980 <sg_u8CellReports>
    3e6e:	8f 5f       	subi	r24, 0xFF	; 255
    3e70:	80 93 80 09 	sts	0x0980, r24	; 0x800980 <sg_u8CellReports>
    3e74:	08 95       	ret

Disassembly of section .text.PlatformGetSendData:

00004a58 <PlatformGetSendData>:
uint16_t PlatformGetSendData( bool bUpdateBalanceStatus )
{
	uint16_t u16SendValue = 0;
	
	
	if( sg_bStopDischarge )
    4a58:	90 91 1c 03 	lds	r25, 0x031C	; 0x80031c <sg_bStopDischarge>
    4a5c:	99 23       	and	r25, r25
    4a5e:	51 f0       	breq	.+20     	; 0x4a74 <PlatformGetSendData+0x1c>
	{
		if (bUpdateBalanceStatus)	// don't update if ony an availability check
    4a60:	88 23       	and	r24, r24
    4a62:	59 f0       	breq	.+22     	; 0x4a7a <PlatformGetSendData+0x22>
		{
			sg_bStopDischarge = false;
    4a64:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <sg_bStopDischarge>
			sg_bCellBalancedOnce = true;
    4a68:	81 e0       	ldi	r24, 0x01	; 1
    4a6a:	80 93 1d 03 	sts	0x031D, r24	; 0x80031d <sg_bCellBalancedOnce>
		}
		u16SendValue = 0x3ff;
    4a6e:	8f ef       	ldi	r24, 0xFF	; 255
    4a70:	93 e0       	ldi	r25, 0x03	; 3
    4a72:	08 95       	ret
			}
		}
		else
#endif
		{
			u16SendValue |= MSG_CELL_SEND_REPORT;
    4a74:	80 e0       	ldi	r24, 0x00	; 0
    4a76:	90 e8       	ldi	r25, 0x80	; 128
    4a78:	08 95       	ret
		if (bUpdateBalanceStatus)	// don't update if ony an availability check
		{
			sg_bStopDischarge = false;
			sg_bCellBalancedOnce = true;
		}
		u16SendValue = 0x3ff;
    4a7a:	8f ef       	ldi	r24, 0xFF	; 255
    4a7c:	93 e0       	ldi	r25, 0x03	; 3
#endif
		}
	}
	
	return( u16SendValue );
}
    4a7e:	08 95       	ret

Disassembly of section .text.ADCCallback:

000049ae <ADCCallback>:
// Called every time there's an ADC read since apparently ISR can't access global variables?  compiler fails
void ADCCallback(EADCType eType,
				 uint16_t u16Reading)
{
	// End of chain? Indicate it's time for an ADC update
	if ((EADCTYPE_COUNT-1) == eType)
    49ae:	84 30       	cpi	r24, 0x04	; 4
    49b0:	19 f4       	brne	.+6      	; 0x49b8 <ADCCallback+0xa>
	{
		sg_bADCUpdate = true;
    49b2:	91 e0       	ldi	r25, 0x01	; 1
    49b4:	90 93 1a 03 	sts	0x031A, r25	; 0x80031a <sg_bADCUpdate>
	}
	sg_sFrame.ADCReadings[eType].u16Reading = u16Reading;
    49b8:	90 e0       	ldi	r25, 0x00	; 0
    49ba:	9c 01       	movw	r18, r24
    49bc:	22 0f       	add	r18, r18
    49be:	33 1f       	adc	r19, r19
    49c0:	82 0f       	add	r24, r18
    49c2:	93 1f       	adc	r25, r19
    49c4:	80 5f       	subi	r24, 0xF0	; 240
    49c6:	9e 4f       	sbci	r25, 0xFE	; 254
    49c8:	fc 01       	movw	r30, r24
    49ca:	e9 5b       	subi	r30, 0xB9	; 185
    49cc:	ff 4f       	sbci	r31, 0xFF	; 255
    49ce:	71 83       	std	Z+1, r23	; 0x01
    49d0:	60 83       	st	Z, r22
	sg_sFrame.ADCReadings[eType].bValid = true;
    49d2:	31 97       	sbiw	r30, 0x01	; 1
    49d4:	21 e0       	ldi	r18, 0x01	; 1
    49d6:	20 83       	st	Z, r18
    49d8:	08 95       	ret

Disassembly of section .text.FrameInit:

00002f44 <FrameInit>:
	while (ADCSRA & (1<<ADSC));

	// Return the ADC value
	temp = ((int32_t)(ADC * 100 - TEMP_OFFSET) * 100 / TEMP_SCALE);
	return temp;
}
    2f44:	cf 93       	push	r28
    2f46:	df 93       	push	r29
    2f48:	81 11       	cpse	r24, r1
    2f4a:	0d c0       	rjmp	.+26     	; 0x2f66 <FrameInit+0x22>
    2f4c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <sg_sFrame>
    2f50:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <sg_sFrame+0x1>
    2f54:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <sg_sFrame+0x2>
    2f58:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <sg_sFrame+0x3>
    2f5c:	8a 37       	cpi	r24, 0x7A	; 122
    2f5e:	9a 4d       	sbci	r25, 0xDA	; 218
    2f60:	a7 47       	sbci	r26, 0x77	; 119
    2f62:	ba 4b       	sbci	r27, 0xBA	; 186
    2f64:	29 f1       	breq	.+74     	; 0x2fb0 <FrameInit+0x6c>
    2f66:	c0 e1       	ldi	r28, 0x10	; 16
    2f68:	d1 e0       	ldi	r29, 0x01	; 1
    2f6a:	88 e0       	ldi	r24, 0x08	; 8
    2f6c:	92 e0       	ldi	r25, 0x02	; 2
    2f6e:	fe 01       	movw	r30, r28
    2f70:	9c 01       	movw	r18, r24
    2f72:	11 92       	st	Z+, r1
    2f74:	21 50       	subi	r18, 0x01	; 1
    2f76:	30 40       	sbci	r19, 0x00	; 0
    2f78:	e1 f7       	brne	.-8      	; 0x2f72 <FrameInit+0x2e>
    2f7a:	9d 83       	std	Y+5, r25	; 0x05
    2f7c:	8c 83       	std	Y+4, r24	; 0x04
    2f7e:	8a e7       	ldi	r24, 0x7A	; 122
    2f80:	9a ed       	ldi	r25, 0xDA	; 218
    2f82:	a7 e7       	ldi	r26, 0x77	; 119
    2f84:	ba eb       	ldi	r27, 0xBA	; 186
    2f86:	88 83       	st	Y, r24
    2f88:	99 83       	std	Y+1, r25	; 0x01
    2f8a:	aa 83       	std	Y+2, r26	; 0x02
    2f8c:	bb 83       	std	Y+3, r27	; 0x03
    2f8e:	0e 94 c7 1d 	call	0x3b8e	; 0x3b8e <ModuleControllerGetUniqueID>
    2f92:	6e 87       	std	Y+14, r22	; 0x0e
    2f94:	7f 87       	std	Y+15, r23	; 0x0f
    2f96:	88 8b       	std	Y+16, r24	; 0x10
    2f98:	99 8b       	std	Y+17, r25	; 0x11
    2f9a:	8f ef       	ldi	r24, 0xFF	; 255
    2f9c:	8a a7       	std	Y+42, r24	; 0x2a
    2f9e:	8b 8b       	std	Y+19, r24	; 0x13
    2fa0:	1c 8a       	std	Y+20, r1	; 0x14
    2fa2:	84 e0       	ldi	r24, 0x04	; 4
    2fa4:	90 e0       	ldi	r25, 0x00	; 0
    2fa6:	0e 94 a1 27 	call	0x4f42	; 0x4f42 <EEPROMRead>
    2faa:	0e 94 d0 18 	call	0x31a0	; 0x31a0 <CellCountExpectedSet>
    2fae:	2a c0       	rjmp	.+84     	; 0x3004 <FrameInit+0xc0>
    2fb0:	e0 e1       	ldi	r30, 0x10	; 16
    2fb2:	f1 e0       	ldi	r31, 0x01	; 1
    2fb4:	17 a2       	std	Z+39, r1	; 0x27
    2fb6:	11 a6       	std	Z+41, r1	; 0x29
    2fb8:	10 a6       	std	Z+40, r1	; 0x28
    2fba:	12 a6       	std	Z+42, r1	; 0x2a
    2fbc:	15 a6       	std	Z+45, r1	; 0x2d
    2fbe:	16 a6       	std	Z+46, r1	; 0x2e
    2fc0:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <sg_sFrame+0x3e>
    2fc4:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <sg_sFrame+0x3f>
    2fc8:	a0 91 50 01 	lds	r26, 0x0150	; 0x800150 <sg_sFrame+0x40>
    2fcc:	b0 91 51 01 	lds	r27, 0x0151	; 0x800151 <sg_sFrame+0x41>
    2fd0:	89 2b       	or	r24, r25
    2fd2:	8a 2b       	or	r24, r26
    2fd4:	8b 2b       	or	r24, r27
    2fd6:	b1 f4       	brne	.+44     	; 0x3004 <FrameInit+0xc0>
    2fd8:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <sg_sFrame+0x3e>
    2fdc:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <sg_sFrame+0x3f>
    2fe0:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <sg_sFrame+0x40>
    2fe4:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <sg_sFrame+0x41>
    2fe8:	11 ae       	std	Z+57, r1	; 0x39
    2fea:	10 ae       	std	Z+56, r1	; 0x38
    2fec:	13 ae       	std	Z+59, r1	; 0x3b
    2fee:	12 ae       	std	Z+58, r1	; 0x3a
    2ff0:	15 ae       	std	Z+61, r1	; 0x3d
    2ff2:	14 ae       	std	Z+60, r1	; 0x3c
    2ff4:	8f e9       	ldi	r24, 0x9F	; 159
    2ff6:	95 e1       	ldi	r25, 0x15	; 21
    2ff8:	93 ab       	std	Z+51, r25	; 0x33
    2ffa:	82 ab       	std	Z+50, r24	; 0x32
    2ffc:	95 ab       	std	Z+53, r25	; 0x35
    2ffe:	84 ab       	std	Z+52, r24	; 0x34
    3000:	97 ab       	std	Z+55, r25	; 0x37
    3002:	86 ab       	std	Z+54, r24	; 0x36
    3004:	8f ef       	ldi	r24, 0xFF	; 255
    3006:	80 93 8a 09 	sts	0x098A, r24	; 0x80098a <sg_u8CurrentBufferIndex>
    300a:	df 91       	pop	r29
    300c:	cf 91       	pop	r28
    300e:	08 95       	ret

Disassembly of section .text.CellStringPowerStateMachine:

00003978 <CellStringPowerStateMachine>:
    3978:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <sg_eStringPowerState>
    397c:	82 30       	cpi	r24, 0x02	; 2
    397e:	49 f1       	breq	.+82     	; 0x39d2 <CellStringPowerStateMachine+0x5a>
    3980:	28 f4       	brcc	.+10     	; 0x398c <CellStringPowerStateMachine+0x14>
    3982:	88 23       	and	r24, r24
    3984:	41 f0       	breq	.+16     	; 0x3996 <CellStringPowerStateMachine+0x1e>
    3986:	81 30       	cpi	r24, 0x01	; 1
    3988:	91 f0       	breq	.+36     	; 0x39ae <CellStringPowerStateMachine+0x36>
    398a:	32 c0       	rjmp	.+100    	; 0x39f0 <CellStringPowerStateMachine+0x78>
    398c:	83 30       	cpi	r24, 0x03	; 3
    398e:	61 f1       	breq	.+88     	; 0x39e8 <CellStringPowerStateMachine+0x70>
    3990:	84 30       	cpi	r24, 0x04	; 4
    3992:	a9 f1       	breq	.+106    	; 0x39fe <CellStringPowerStateMachine+0x86>
    3994:	2d c0       	rjmp	.+90     	; 0x39f0 <CellStringPowerStateMachine+0x78>
    3996:	85 b1       	in	r24, 0x05	; 5
    3998:	8f 7e       	andi	r24, 0xEF	; 239
    399a:	85 b9       	out	0x05, r24	; 5
    399c:	81 e0       	ldi	r24, 0x01	; 1
    399e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <sg_eStringPowerState>
    39a2:	80 e0       	ldi	r24, 0x00	; 0
    39a4:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <FrameInit>
    39a8:	0e 94 ce 27 	call	0x4f9c	; 0x4f9c <SendModuleControllerStatus>
    39ac:	08 95       	ret
    39ae:	85 b1       	in	r24, 0x05	; 5
    39b0:	8f 7e       	andi	r24, 0xEF	; 239
    39b2:	85 b9       	out	0x05, r24	; 5
    39b4:	80 e0       	ldi	r24, 0x00	; 0
    39b6:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <FrameInit>
    39ba:	82 e0       	ldi	r24, 0x02	; 2
    39bc:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <sg_eStringPowerState>
    39c0:	81 e0       	ldi	r24, 0x01	; 1
    39c2:	80 93 84 09 	sts	0x0984, r24	; 0x800984 <sg_u8CellStringPowerTimer>
    39c6:	e0 e1       	ldi	r30, 0x10	; 16
    39c8:	f1 e0       	ldi	r31, 0x01	; 1
    39ca:	8f ef       	ldi	r24, 0xFF	; 255
    39cc:	83 8b       	std	Z+19, r24	; 0x13
    39ce:	14 8a       	std	Z+20, r1	; 0x14
    39d0:	08 95       	ret
    39d2:	80 91 84 09 	lds	r24, 0x0984	; 0x800984 <sg_u8CellStringPowerTimer>
    39d6:	81 11       	cpse	r24, r1
    39d8:	12 c0       	rjmp	.+36     	; 0x39fe <CellStringPowerStateMachine+0x86>
    39da:	85 b1       	in	r24, 0x05	; 5
    39dc:	80 61       	ori	r24, 0x10	; 16
    39de:	85 b9       	out	0x05, r24	; 5
    39e0:	83 e0       	ldi	r24, 0x03	; 3
    39e2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <sg_eStringPowerState>
    39e6:	08 95       	ret
    39e8:	84 e0       	ldi	r24, 0x04	; 4
    39ea:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <sg_eStringPowerState>
    39ee:	08 95       	ret
    39f0:	4d e6       	ldi	r20, 0x6D	; 109
    39f2:	52 e0       	ldi	r21, 0x02	; 2
    39f4:	67 e4       	ldi	r22, 0x47	; 71
    39f6:	72 e0       	ldi	r23, 0x02	; 2
    39f8:	80 e0       	ldi	r24, 0x00	; 0
    39fa:	0e 94 c1 24 	call	0x4982	; 0x4982 <PlatformAssert>
    39fe:	08 95       	ret

Disassembly of section .text.main:

00000c14 <main>:
 c14:	cf 93       	push	r28
 c16:	df 93       	push	r29
 c18:	cd b7       	in	r28, 0x3d	; 61
 c1a:	de b7       	in	r29, 0x3e	; 62
 c1c:	28 97       	sbiw	r28, 0x08	; 8
 c1e:	0f b6       	in	r0, 0x3f	; 63
 c20:	f8 94       	cli
 c22:	de bf       	out	0x3e, r29	; 62
 c24:	0f be       	out	0x3f, r0	; 63
 c26:	cd bf       	out	0x3d, r28	; 61
 c28:	0e 94 30 27 	call	0x4e60	; 0x4e60 <WatchdogOff>
 c2c:	88 b1       	in	r24, 0x08	; 8
 c2e:	8f 7e       	andi	r24, 0xEF	; 239
 c30:	88 b9       	out	0x08, r24	; 8
 c32:	87 b1       	in	r24, 0x07	; 7
 c34:	80 61       	ori	r24, 0x10	; 16
 c36:	87 b9       	out	0x07, r24	; 7
 c38:	87 b1       	in	r24, 0x07	; 7
 c3a:	8d 7f       	andi	r24, 0xFD	; 253
 c3c:	87 b9       	out	0x07, r24	; 7
 c3e:	87 b1       	in	r24, 0x07	; 7
 c40:	80 68       	ori	r24, 0x80	; 128
 c42:	87 b9       	out	0x07, r24	; 7
 c44:	88 b1       	in	r24, 0x08	; 8
 c46:	8f 7e       	andi	r24, 0xEF	; 239
 c48:	88 b9       	out	0x08, r24	; 8
 c4a:	8d b1       	in	r24, 0x0d	; 13
 c4c:	82 60       	ori	r24, 0x02	; 2
 c4e:	8d b9       	out	0x0d, r24	; 13
 c50:	8e b1       	in	r24, 0x0e	; 14
 c52:	8d 7f       	andi	r24, 0xFD	; 253
 c54:	8e b9       	out	0x0e, r24	; 14
 c56:	84 b1       	in	r24, 0x04	; 4
 c58:	80 61       	ori	r24, 0x10	; 16
 c5a:	84 b9       	out	0x04, r24	; 4
 c5c:	85 b1       	in	r24, 0x05	; 5
 c5e:	8f 7e       	andi	r24, 0xEF	; 239
 c60:	85 b9       	out	0x05, r24	; 5
 c62:	84 b7       	in	r24, 0x34	; 52
 c64:	80 93 7e 09 	sts	0x097E, r24	; 0x80097e <sg_u8Reason>
 c68:	80 91 7e 09 	lds	r24, 0x097E	; 0x80097e <sg_u8Reason>
 c6c:	83 ff       	sbrs	r24, 3
 c6e:	0a c0       	rjmp	.+20     	; 0xc84 <main+0x70>
 c70:	80 91 2c 03 	lds	r24, 0x032C	; 0x80032c <sg_eWDTCurrentStatus>
 c74:	e0 e1       	ldi	r30, 0x10	; 16
 c76:	f1 e0       	ldi	r31, 0x01	; 1
 c78:	82 89       	ldd	r24, Z+18	; 0x12
 c7a:	8f 5f       	subi	r24, 0xFF	; 255
 c7c:	82 8b       	std	Z+18, r24	; 0x12
 c7e:	0e 94 66 0c 	call	0x18cc	; 0x18cc <ModuleControllerStateHandle>
 c82:	70 c0       	rjmp	.+224    	; 0xd64 <main+0x150>
 c84:	80 91 7e 09 	lds	r24, 0x097E	; 0x80097e <sg_u8Reason>
 c88:	80 91 7e 09 	lds	r24, 0x097E	; 0x80097e <sg_u8Reason>
 c8c:	80 91 7e 09 	lds	r24, 0x097E	; 0x80097e <sg_u8Reason>
 c90:	f8 94       	cli
 c92:	0e 94 10 28 	call	0x5020	; 0x5020 <SetSysclock>
 c96:	0e 94 22 22 	call	0x4444	; 0x4444 <TimerInit>
 c9a:	0e 94 98 23 	call	0x4730	; 0x4730 <vUARTInit>
 c9e:	0e 94 22 12 	call	0x2444	; 0x2444 <ADCInit>
 ca2:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <STORE_Init>
 ca6:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <sg_bSDCardReady>
 caa:	81 e0       	ldi	r24, 0x01	; 1
 cac:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <FrameInit>
 cb0:	89 e0       	ldi	r24, 0x09	; 9
 cb2:	90 e0       	ldi	r25, 0x00	; 0
 cb4:	0e 94 a1 27 	call	0x4f42	; 0x4f42 <EEPROMRead>
 cb8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <sg_u8SequentailCountMismatchThreshold>
 cbc:	8a b1       	in	r24, 0x0a	; 10
 cbe:	8f 7b       	andi	r24, 0xBF	; 191
 cc0:	8a b9       	out	0x0a, r24	; 10
 cc2:	8b b1       	in	r24, 0x0b	; 11
 cc4:	80 64       	ori	r24, 0x40	; 64
 cc6:	8b b9       	out	0x0b, r24	; 11
 cc8:	11 e0       	ldi	r17, 0x01	; 1
 cca:	1b bb       	out	0x1b, r17	; 27
 ccc:	82 e0       	ldi	r24, 0x02	; 2
 cce:	8b bb       	out	0x1b, r24	; 27
 cd0:	84 e0       	ldi	r24, 0x04	; 4
 cd2:	8b bb       	out	0x1b, r24	; 27
 cd4:	88 e0       	ldi	r24, 0x08	; 8
 cd6:	8b bb       	out	0x1b, r24	; 27
 cd8:	ec e6       	ldi	r30, 0x6C	; 108
 cda:	f0 e0       	ldi	r31, 0x00	; 0
 cdc:	80 81       	ld	r24, Z
 cde:	80 64       	ori	r24, 0x40	; 64
 ce0:	80 83       	st	Z, r24
 ce2:	8b b3       	in	r24, 0x1b	; 27
 ce4:	84 60       	ori	r24, 0x04	; 4
 ce6:	8b bb       	out	0x1b, r24	; 27
 ce8:	8e ed       	ldi	r24, 0xDE	; 222
 cea:	98 e0       	ldi	r25, 0x08	; 8
 cec:	0e 94 16 28 	call	0x502c	; 0x502c <CANSetRXCallback>
 cf0:	0e 94 9a 1b 	call	0x3734	; 0x3734 <CANInit>
 cf4:	10 92 2b 03 	sts	0x032B, r1	; 0x80032b <sg_u8ModuleRegistrationID>
 cf8:	10 92 25 03 	sts	0x0325, r1	; 0x800325 <sg_bModuleRegistered>
 cfc:	10 92 87 09 	sts	0x0987, r1	; 0x800987 <sg_bIgnoreStatusRequests>
 d00:	80 e0       	ldi	r24, 0x00	; 0
 d02:	0e 94 1b 28 	call	0x5036	; 0x5036 <ModuleControllerStateSet>
 d06:	10 93 26 03 	sts	0x0326, r17	; 0x800326 <sg_bSendAnnouncement>
 d0a:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <sg_bPackControllerTimeout>
 d0e:	10 92 22 03 	sts	0x0322, r1	; 0x800322 <sg_bSendModuleControllerStatus>
 d12:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <sg_bSendCellStatus>
 d16:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <sg_bSendHardwareDetail>
 d1a:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <sg_bSendCellCommStatus>
 d1e:	10 92 1e 03 	sts	0x031E, r1	; 0x80031e <sg_bCellBalanceReady>
 d22:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <sg_bCellBalancedOnce>
 d26:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <sg_bStopDischarge>
 d2a:	10 92 1b 03 	sts	0x031B, r1	; 0x80031b <sg_bOvercurrentSignal>
 d2e:	10 92 28 03 	sts	0x0328, r1	; 0x800328 <sg_u8CellStatusTarget>
 d32:	10 92 27 03 	sts	0x0327, r1	; 0x800327 <sg_u8CellStatus>
 d36:	10 92 2a 03 	sts	0x032A, r1	; 0x80032a <sg_u8SOC>
 d3a:	10 92 29 03 	sts	0x0329, r1	; 0x800329 <sg_u8SOH>
 d3e:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <sg_u8SequentailCountMismatchThreshold>
 d42:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <sg_u8SequentailCellCountMismatches>
 d46:	0e 94 55 0b 	call	0x16aa	; 0x16aa <RTCInit>
 d4a:	85 e0       	ldi	r24, 0x05	; 5
 d4c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <sg_eModuleControllerStateCurrent>
 d50:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <sg_eModuleControllerStateTarget>
 d54:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <sg_eModuleControllerStateMax>
 d58:	10 92 25 03 	sts	0x0325, r1	; 0x800325 <sg_bModuleRegistered>
 d5c:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <sg_eStringPowerState>
 d60:	10 93 0c 01 	sts	0x010C, r17	; 0x80010c <sg_eFrameStatus>
 d64:	78 94       	sei
 d66:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <sg_bNewTick>
 d6a:	88 23       	and	r24, r24
 d6c:	e1 f3       	breq	.-8      	; 0xd66 <main+0x152>
 d6e:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <sg_bNewTick>
 d72:	0e 94 4e 1a 	call	0x349c	; 0x349c <CANCheckTxStatus>
 d76:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <CANCheckHealth>
 d7a:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <sg_bModuleRegistered>
 d7e:	81 11       	cpse	r24, r1
 d80:	22 c0       	rjmp	.+68     	; 0xdc6 <main+0x1b2>
 d82:	80 91 89 09 	lds	r24, 0x0989	; 0x800989 <sg_bAnnouncementPending>
 d86:	88 23       	and	r24, r24
 d88:	11 f1       	breq	.+68     	; 0xdce <main+0x1ba>
 d8a:	80 91 88 09 	lds	r24, 0x0988	; 0x800988 <sg_u8AnnouncementDelayTicks>
 d8e:	88 23       	and	r24, r24
 d90:	29 f0       	breq	.+10     	; 0xd9c <main+0x188>
 d92:	80 91 88 09 	lds	r24, 0x0988	; 0x800988 <sg_u8AnnouncementDelayTicks>
 d96:	81 50       	subi	r24, 0x01	; 1
 d98:	80 93 88 09 	sts	0x0988, r24	; 0x800988 <sg_u8AnnouncementDelayTicks>
 d9c:	80 91 88 09 	lds	r24, 0x0988	; 0x800988 <sg_u8AnnouncementDelayTicks>
 da0:	81 11       	cpse	r24, r1
 da2:	15 c0       	rjmp	.+42     	; 0xdce <main+0x1ba>
 da4:	81 e0       	ldi	r24, 0x01	; 1
 da6:	80 93 26 03 	sts	0x0326, r24	; 0x800326 <sg_bSendAnnouncement>
 daa:	10 92 89 09 	sts	0x0989, r1	; 0x800989 <sg_bAnnouncementPending>
 dae:	83 e5       	ldi	r24, 0x53	; 83
 db0:	92 e0       	ldi	r25, 0x02	; 2
 db2:	a0 e0       	ldi	r26, 0x00	; 0
 db4:	af 93       	push	r26
 db6:	9f 93       	push	r25
 db8:	8f 93       	push	r24
 dba:	0e 94 ee 27 	call	0x4fdc	; 0x4fdc <DebugOut>
 dbe:	0f 90       	pop	r0
 dc0:	0f 90       	pop	r0
 dc2:	0f 90       	pop	r0
 dc4:	04 c0       	rjmp	.+8      	; 0xdce <main+0x1ba>
 dc6:	ce 01       	movw	r24, r28
 dc8:	01 96       	adiw	r24, 0x01	; 1
 dca:	0e 94 08 04 	call	0x810	; 0x810 <ControllerStatusMessagesSend>
 dce:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <sg_bPackControllerTimeout>
 dd2:	88 23       	and	r24, r24
 dd4:	81 f0       	breq	.+32     	; 0xdf6 <main+0x1e2>
 dd6:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <sg_bPackControllerTimeout>
 dda:	10 92 2b 03 	sts	0x032B, r1	; 0x80032b <sg_u8ModuleRegistrationID>
 dde:	10 92 25 03 	sts	0x0325, r1	; 0x800325 <sg_bModuleRegistered>
 de2:	10 92 87 09 	sts	0x0987, r1	; 0x800987 <sg_bIgnoreStatusRequests>
 de6:	81 e0       	ldi	r24, 0x01	; 1
 de8:	80 93 26 03 	sts	0x0326, r24	; 0x800326 <sg_bSendAnnouncement>
 dec:	0e 94 ce 27 	call	0x4f9c	; 0x4f9c <SendModuleControllerStatus>
 df0:	80 e0       	ldi	r24, 0x00	; 0
 df2:	0e 94 1b 28 	call	0x5036	; 0x5036 <ModuleControllerStateSet>
 df6:	ef e6       	ldi	r30, 0x6F	; 111
 df8:	f0 e0       	ldi	r31, 0x00	; 0
 dfa:	90 81       	ld	r25, Z
 dfc:	80 81       	ld	r24, Z
 dfe:	8d 7f       	andi	r24, 0xFD	; 253
 e00:	80 83       	st	Z, r24
 e02:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <sg_eFrameStatus>
 e06:	20 91 85 09 	lds	r18, 0x0985	; 0x800985 <sg_bFrameStart>
 e0a:	90 83       	st	Z, r25
 e0c:	81 30       	cpi	r24, 0x01	; 1
 e0e:	09 f0       	breq	.+2      	; 0xe12 <main+0x1fe>
 e10:	61 c0       	rjmp	.+194    	; 0xed4 <main+0x2c0>
 e12:	22 23       	and	r18, r18
 e14:	09 f4       	brne	.+2      	; 0xe18 <main+0x204>
 e16:	55 c0       	rjmp	.+170    	; 0xec2 <main+0x2ae>
 e18:	10 92 85 09 	sts	0x0985, r1	; 0x800985 <sg_bFrameStart>
 e1c:	0e 94 bc 1c 	call	0x3978	; 0x3978 <CellStringPowerStateMachine>
 e20:	0e 94 bf 26 	call	0x4d7e	; 0x4d7e <vUARTRXEnd>
 e24:	ce 01       	movw	r24, r28
 e26:	01 96       	adiw	r24, 0x01	; 1
 e28:	0e 94 88 07 	call	0xf10	; 0xf10 <CellStringProcess>
 e2c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <sg_eStringPowerState>
 e30:	84 30       	cpi	r24, 0x04	; 4
 e32:	29 f5       	brne	.+74     	; 0xe7e <main+0x26a>
 e34:	e0 e1       	ldi	r30, 0x10	; 16
 e36:	f1 e0       	ldi	r31, 0x01	; 1
 e38:	95 a5       	ldd	r25, Z+45	; 0x2d
 e3a:	85 89       	ldd	r24, Z+21	; 0x15
 e3c:	98 17       	cp	r25, r24
 e3e:	e9 f0       	breq	.+58     	; 0xe7a <main+0x266>
 e40:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <sg_sFrame+0x15>
 e44:	88 23       	and	r24, r24
 e46:	c9 f0       	breq	.+50     	; 0xe7a <main+0x266>
 e48:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <sg_u8SequentailCountMismatchThreshold>
 e4c:	88 23       	and	r24, r24
 e4e:	b9 f0       	breq	.+46     	; 0xe7e <main+0x26a>
 e50:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <sg_u8SequentailCountMismatchThreshold>
 e54:	8f 3f       	cpi	r24, 0xFF	; 255
 e56:	99 f0       	breq	.+38     	; 0xe7e <main+0x26a>
 e58:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <sg_u8SequentailCellCountMismatches>
 e5c:	8f 5f       	subi	r24, 0xFF	; 255
 e5e:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <sg_u8SequentailCellCountMismatches>
 e62:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <sg_u8SequentailCellCountMismatches>
 e66:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <sg_u8SequentailCountMismatchThreshold>
 e6a:	98 17       	cp	r25, r24
 e6c:	40 f0       	brcs	.+16     	; 0xe7e <main+0x26a>
 e6e:	81 e0       	ldi	r24, 0x01	; 1
 e70:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <sg_eStringPowerState>
 e74:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <sg_u8SequentailCellCountMismatches>
 e78:	02 c0       	rjmp	.+4      	; 0xe7e <main+0x26a>
 e7a:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <sg_u8SequentailCellCountMismatches>
 e7e:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <sg_bSendAnnouncement>
 e82:	88 23       	and	r24, r24
 e84:	f1 f0       	breq	.+60     	; 0xec2 <main+0x2ae>
 e86:	86 e5       	ldi	r24, 0x56	; 86
 e88:	89 83       	std	Y+1, r24	; 0x01
 e8a:	80 e2       	ldi	r24, 0x20	; 32
 e8c:	8a 83       	std	Y+2, r24	; 0x02
 e8e:	82 e0       	ldi	r24, 0x02	; 2
 e90:	8b 83       	std	Y+3, r24	; 0x03
 e92:	83 e0       	ldi	r24, 0x03	; 3
 e94:	8c 83       	std	Y+4, r24	; 0x04
 e96:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <sg_sFrame+0xe>
 e9a:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <sg_sFrame+0xf>
 e9e:	a0 91 20 01 	lds	r26, 0x0120	; 0x800120 <sg_sFrame+0x10>
 ea2:	b0 91 21 01 	lds	r27, 0x0121	; 0x800121 <sg_sFrame+0x11>
 ea6:	8d 83       	std	Y+5, r24	; 0x05
 ea8:	9e 83       	std	Y+6, r25	; 0x06
 eaa:	af 83       	std	Y+7, r26	; 0x07
 eac:	b8 87       	std	Y+8, r27	; 0x08
 eae:	48 e0       	ldi	r20, 0x08	; 8
 eb0:	be 01       	movw	r22, r28
 eb2:	6f 5f       	subi	r22, 0xFF	; 255
 eb4:	7f 4f       	sbci	r23, 0xFF	; 255
 eb6:	80 e0       	ldi	r24, 0x00	; 0
 eb8:	0e 94 67 24 	call	0x48ce	; 0x48ce <CANSendMessage>
 ebc:	81 11       	cpse	r24, r1
 ebe:	10 92 26 03 	sts	0x0326, r1	; 0x800326 <sg_bSendAnnouncement>
 ec2:	0e 94 66 0c 	call	0x18cc	; 0x18cc <ModuleControllerStateHandle>
 ec6:	80 91 1b 03 	lds	r24, 0x031B	; 0x80031b <sg_bOvercurrentSignal>
 eca:	88 23       	and	r24, r24
 ecc:	b1 f0       	breq	.+44     	; 0xefa <main+0x2e6>
 ece:	10 92 1b 03 	sts	0x031B, r1	; 0x80031b <sg_bOvercurrentSignal>
 ed2:	13 c0       	rjmp	.+38     	; 0xefa <main+0x2e6>
 ed4:	22 23       	and	r18, r18
 ed6:	89 f0       	breq	.+34     	; 0xefa <main+0x2e6>
 ed8:	10 92 85 09 	sts	0x0985, r1	; 0x800985 <sg_bFrameStart>
 edc:	0e 94 bc 1c 	call	0x3978	; 0x3978 <CellStringPowerStateMachine>
 ee0:	80 e0       	ldi	r24, 0x00	; 0
 ee2:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <FrameInit>
 ee6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <sg_eStringPowerState>
 eea:	84 30       	cpi	r24, 0x04	; 4
 eec:	31 f4       	brne	.+12     	; 0xefa <main+0x2e6>
 eee:	0e 94 97 27 	call	0x4f2e	; 0x4f2e <vUARTInitReceive>
 ef2:	0e 94 20 28 	call	0x5040	; 0x5040 <vUARTRXReset>
 ef6:	0e 94 4f 21 	call	0x429e	; 0x429e <vUARTStarttx>
 efa:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <sg_bADCUpdate>
 efe:	88 23       	and	r24, r24
 f00:	21 f0       	breq	.+8      	; 0xf0a <main+0x2f6>
 f02:	10 92 1a 03 	sts	0x031A, r1	; 0x80031a <sg_bADCUpdate>
 f06:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <ModuleCurrentConvertReadings>
 f0a:	0e 94 03 25 	call	0x4a06	; 0x4a06 <ADCStartConversion>
 f0e:	2b cf       	rjmp	.-426    	; 0xd66 <main+0x152>

Disassembly of section .text.IsLeapYear:

0000479c <IsLeapYear>:
	return( bResult );
}

// Returns true if u16Year is a leap year
static bool IsLeapYear(uint16_t u16Year)
{
    479c:	9c 01       	movw	r18, r24
	bool bLeapYear = false;
	
	if ((u16Year % 400) == 0)
    479e:	60 e9       	ldi	r22, 0x90	; 144
    47a0:	71 e0       	ldi	r23, 0x01	; 1
    47a2:	0e 94 40 25 	call	0x4a80	; 0x4a80 <__udivmodhi4>
    47a6:	89 2b       	or	r24, r25
    47a8:	69 f0       	breq	.+26     	; 0x47c4 <IsLeapYear+0x28>
	{
		bLeapYear = true;
	}
	else
	if ((u16Year % 100) == 0)
    47aa:	c9 01       	movw	r24, r18
    47ac:	64 e6       	ldi	r22, 0x64	; 100
    47ae:	70 e0       	ldi	r23, 0x00	; 0
    47b0:	0e 94 40 25 	call	0x4a80	; 0x4a80 <__udivmodhi4>
    47b4:	89 2b       	or	r24, r25
    47b6:	41 f0       	breq	.+16     	; 0x47c8 <IsLeapYear+0x2c>
	{
		// Not a leap year if divisible by 100 but not by 400
	}
	else
	if ((u16Year % 4) == 0)
    47b8:	23 70       	andi	r18, 0x03	; 3
    47ba:	33 27       	eor	r19, r19
    47bc:	23 2b       	or	r18, r19
    47be:	31 f0       	breq	.+12     	; 0x47cc <IsLeapYear+0x30>
}

// Returns true if u16Year is a leap year
static bool IsLeapYear(uint16_t u16Year)
{
	bool bLeapYear = false;
    47c0:	80 e0       	ldi	r24, 0x00	; 0
    47c2:	08 95       	ret
	
	if ((u16Year % 400) == 0)
	{
		bLeapYear = true;
    47c4:	81 e0       	ldi	r24, 0x01	; 1
    47c6:	08 95       	ret
}

// Returns true if u16Year is a leap year
static bool IsLeapYear(uint16_t u16Year)
{
	bool bLeapYear = false;
    47c8:	80 e0       	ldi	r24, 0x00	; 0
    47ca:	08 95       	ret
		// Not a leap year if divisible by 100 but not by 400
	}
	else
	if ((u16Year % 4) == 0)
	{
		bLeapYear = true;
    47cc:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return(bLeapYear);
}
    47ce:	08 95       	ret

Disassembly of section .text.RTCStartTransaction:

00004580 <RTCStartTransaction>:
}

static bool RTCStartTransaction( uint8_t u8Address, 
								 bool bRead, 
								 bool bAllowUnstick )
{
    4580:	ff 92       	push	r15
    4582:	0f 93       	push	r16
    4584:	1f 93       	push	r17
    4586:	cf 93       	push	r28
    4588:	df 93       	push	r29
    458a:	f8 2e       	mov	r15, r24
    458c:	06 2f       	mov	r16, r22
    458e:	14 2f       	mov	r17, r20
	bool bResult = false;
	uint8_t u8Tries = RTC_MAX_ADDRESS_TRIES;
    4590:	d3 e0       	ldi	r29, 0x03	; 3

static bool RTCStartTransaction( uint8_t u8Address, 
								 bool bRead, 
								 bool bAllowUnstick )
{
	bool bResult = false;
    4592:	c0 e0       	ldi	r28, 0x00	; 0
	uint8_t u8Tries = RTC_MAX_ADDRESS_TRIES;
	
	while( (false == bResult) && u8Tries )
    4594:	0c c0       	rjmp	.+24     	; 0x45ae <RTCStartTransaction+0x2e>
	{
		u8Tries--;
    4596:	d1 50       	subi	r29, 0x01	; 1
		
		bResult = I2CStartTransaction( u8Address, bRead );
    4598:	60 2f       	mov	r22, r16
    459a:	8f 2d       	mov	r24, r15
    459c:	0e 94 18 25 	call	0x4a30	; 0x4a30 <I2CStartTransaction>
    45a0:	c8 2f       	mov	r28, r24
	
		if( false == bAllowUnstick )
    45a2:	11 23       	and	r17, r17
    45a4:	41 f0       	breq	.+16     	; 0x45b6 <RTCStartTransaction+0x36>
		{
			break;
		}
		
		// Unstick and retry on failure
		if( false == bResult )
    45a6:	81 11       	cpse	r24, r1
    45a8:	02 c0       	rjmp	.+4      	; 0x45ae <RTCStartTransaction+0x2e>
		{
			I2CUnstick();
    45aa:	0e 94 23 23 	call	0x4646	; 0x4646 <I2CUnstick>
								 bool bAllowUnstick )
{
	bool bResult = false;
	uint8_t u8Tries = RTC_MAX_ADDRESS_TRIES;
	
	while( (false == bResult) && u8Tries )
    45ae:	c1 11       	cpse	r28, r1
    45b0:	02 c0       	rjmp	.+4      	; 0x45b6 <RTCStartTransaction+0x36>
    45b2:	d1 11       	cpse	r29, r1
    45b4:	f0 cf       	rjmp	.-32     	; 0x4596 <RTCStartTransaction+0x16>
			I2CUnstick();
		}
	}
	
	return( bResult );
}
    45b6:	8c 2f       	mov	r24, r28
    45b8:	df 91       	pop	r29
    45ba:	cf 91       	pop	r28
    45bc:	1f 91       	pop	r17
    45be:	0f 91       	pop	r16
    45c0:	ff 90       	pop	r15
    45c2:	08 95       	ret

Disassembly of section .text.StructTMToHW:

0000434a <StructTMToHW>:
}

// Converts struct tm to SMCP7940NTime structure
static void StructTMToHW(struct tm *psTimeTM,
						 SMCP7940NTime *psTime)
{
    434a:	cf 93       	push	r28
    434c:	df 93       	push	r29
    434e:	dc 01       	movw	r26, r24
    4350:	fb 01       	movw	r30, r22
	memset((void *) psTime, 0, sizeof(*psTime));
    4352:	87 e0       	ldi	r24, 0x07	; 7
    4354:	eb 01       	movw	r28, r22
    4356:	19 92       	st	Y+, r1
    4358:	8a 95       	dec	r24
    435a:	e9 f7       	brne	.-6      	; 0x4356 <StructTMToHW+0xc>
	
	psTime->u8Seconds = psTimeTM->tm_sec;
    435c:	8c 91       	ld	r24, X
    435e:	80 83       	st	Z, r24
	psTime->u8Minutes = psTimeTM->tm_min;
    4360:	12 96       	adiw	r26, 0x02	; 2
    4362:	8c 91       	ld	r24, X
    4364:	12 97       	sbiw	r26, 0x02	; 2
    4366:	81 83       	std	Z+1, r24	; 0x01
	psTime->u8Hours = psTimeTM->tm_hour;
    4368:	14 96       	adiw	r26, 0x04	; 4
    436a:	8c 91       	ld	r24, X
    436c:	14 97       	sbiw	r26, 0x04	; 4
    436e:	82 83       	std	Z+2, r24	; 0x02
	psTime->u8Day = psTimeTM->tm_mday;
    4370:	16 96       	adiw	r26, 0x06	; 6
    4372:	8c 91       	ld	r24, X
    4374:	16 97       	sbiw	r26, 0x06	; 6
    4376:	84 83       	std	Z+4, r24	; 0x04
	psTime->u8Month = psTimeTM->tm_mon;
    4378:	18 96       	adiw	r26, 0x08	; 8
    437a:	8c 91       	ld	r24, X
    437c:	18 97       	sbiw	r26, 0x08	; 8
    437e:	85 83       	std	Z+5, r24	; 0x05
	
	if (psTimeTM->tm_year > (2099-1900))
    4380:	1a 96       	adiw	r26, 0x0a	; 10
    4382:	8d 91       	ld	r24, X+
    4384:	9c 91       	ld	r25, X
    4386:	1b 97       	sbiw	r26, 0x0b	; 11
    4388:	88 3c       	cpi	r24, 0xC8	; 200
    438a:	91 05       	cpc	r25, r1
    438c:	1c f0       	brlt	.+6      	; 0x4394 <StructTMToHW+0x4a>
	{
		psTime->u8Year = psTimeTM->tm_year - 2100;
    438e:	84 53       	subi	r24, 0x34	; 52
    4390:	86 83       	std	Z+6, r24	; 0x06
    4392:	02 c0       	rjmp	.+4      	; 0x4398 <StructTMToHW+0x4e>
	}
	else
	{
		psTime->u8Year = psTimeTM->tm_year - 2000;
    4394:	80 5d       	subi	r24, 0xD0	; 208
    4396:	86 83       	std	Z+6, r24	; 0x06
	}
	
}
    4398:	df 91       	pop	r29
    439a:	cf 91       	pop	r28
    439c:	08 95       	ret

Disassembly of section .text.HWToStructTM:

00003c8a <HWToStructTM>:
}

// Converts an SMCP7940NTime structure to struct tm
static void HWToStructTM(SMCP7940NTime *psTime,
						 struct tm *psTimeTM)
{
    3c8a:	cf 93       	push	r28
    3c8c:	df 93       	push	r29
    3c8e:	dc 01       	movw	r26, r24
    3c90:	fb 01       	movw	r30, r22
	// At this point, the time is in STime and we should
	// turn that in to time_t
	memset((void *) psTimeTM, 0, sizeof(*psTimeTM));
    3c92:	89 e1       	ldi	r24, 0x19	; 25
    3c94:	eb 01       	movw	r28, r22
    3c96:	19 92       	st	Y+, r1
    3c98:	8a 95       	dec	r24
    3c9a:	e9 f7       	brne	.-6      	; 0x3c96 <HWToStructTM+0xc>
	
	psTimeTM->tm_sec = psTime->u8Seconds;
    3c9c:	8c 91       	ld	r24, X
    3c9e:	90 e0       	ldi	r25, 0x00	; 0
    3ca0:	91 83       	std	Z+1, r25	; 0x01
    3ca2:	80 83       	st	Z, r24
	psTimeTM->tm_min = psTime->u8Minutes;
    3ca4:	11 96       	adiw	r26, 0x01	; 1
    3ca6:	8c 91       	ld	r24, X
    3ca8:	11 97       	sbiw	r26, 0x01	; 1
    3caa:	90 e0       	ldi	r25, 0x00	; 0
    3cac:	93 83       	std	Z+3, r25	; 0x03
    3cae:	82 83       	std	Z+2, r24	; 0x02
	psTimeTM->tm_hour = psTime->u8Hours;
    3cb0:	12 96       	adiw	r26, 0x02	; 2
    3cb2:	8c 91       	ld	r24, X
    3cb4:	12 97       	sbiw	r26, 0x02	; 2
    3cb6:	90 e0       	ldi	r25, 0x00	; 0
    3cb8:	95 83       	std	Z+5, r25	; 0x05
    3cba:	84 83       	std	Z+4, r24	; 0x04
	psTimeTM->tm_mday = psTime->u8Day;
    3cbc:	14 96       	adiw	r26, 0x04	; 4
    3cbe:	8c 91       	ld	r24, X
    3cc0:	14 97       	sbiw	r26, 0x04	; 4
    3cc2:	90 e0       	ldi	r25, 0x00	; 0
    3cc4:	97 83       	std	Z+7, r25	; 0x07
    3cc6:	86 83       	std	Z+6, r24	; 0x06
	psTimeTM->tm_mon = psTime->u8Month - 1;
    3cc8:	15 96       	adiw	r26, 0x05	; 5
    3cca:	8c 91       	ld	r24, X
    3ccc:	15 97       	sbiw	r26, 0x05	; 5
    3cce:	90 e0       	ldi	r25, 0x00	; 0
    3cd0:	01 97       	sbiw	r24, 0x01	; 1
    3cd2:	91 87       	std	Z+9, r25	; 0x09
    3cd4:	80 87       	std	Z+8, r24	; 0x08
	
	if (psTime->u8Year < YEAR_ROLLOVER_CUTOFF)
    3cd6:	16 96       	adiw	r26, 0x06	; 6
    3cd8:	8c 91       	ld	r24, X
    3cda:	84 31       	cpi	r24, 0x14	; 20
    3cdc:	30 f4       	brcc	.+12     	; 0x3cea <HWToStructTM+0x60>
	{
		psTimeTM->tm_year = 2100 + psTime->u8Year;
    3cde:	90 e0       	ldi	r25, 0x00	; 0
    3ce0:	8c 5c       	subi	r24, 0xCC	; 204
    3ce2:	97 4f       	sbci	r25, 0xF7	; 247
    3ce4:	93 87       	std	Z+11, r25	; 0x0b
    3ce6:	82 87       	std	Z+10, r24	; 0x0a
    3ce8:	05 c0       	rjmp	.+10     	; 0x3cf4 <HWToStructTM+0x6a>
	}
	else
	{
		psTimeTM->tm_year = 2000 + psTime->u8Year;
    3cea:	90 e0       	ldi	r25, 0x00	; 0
    3cec:	80 53       	subi	r24, 0x30	; 48
    3cee:	98 4f       	sbci	r25, 0xF8	; 248
    3cf0:	93 87       	std	Z+11, r25	; 0x0b
    3cf2:	82 87       	std	Z+10, r24	; 0x0a
	}	
	
	psTimeTM->tm_year -= 1900;
    3cf4:	82 85       	ldd	r24, Z+10	; 0x0a
    3cf6:	93 85       	ldd	r25, Z+11	; 0x0b
    3cf8:	8c 56       	subi	r24, 0x6C	; 108
    3cfa:	97 40       	sbci	r25, 0x07	; 7
    3cfc:	93 87       	std	Z+11, r25	; 0x0b
    3cfe:	82 87       	std	Z+10, r24	; 0x0a
}
    3d00:	df 91       	pop	r29
    3d02:	cf 91       	pop	r28
    3d04:	08 95       	ret

Disassembly of section .text.__vector_10:

00003a00 <__vector_10>:
// # Of seconds since January 1, 1970
static volatile uint64_t sg_u64Time;

// Called once per second on rev 1 and newer hardware
ISR(INT3_vect, ISR_NOBLOCK)
{
    3a00:	78 94       	sei
    3a02:	1f 92       	push	r1
    3a04:	0f 92       	push	r0
    3a06:	0f b6       	in	r0, 0x3f	; 63
    3a08:	0f 92       	push	r0
    3a0a:	11 24       	eor	r1, r1
    3a0c:	2f 93       	push	r18
    3a0e:	3f 93       	push	r19
    3a10:	4f 93       	push	r20
    3a12:	5f 93       	push	r21
    3a14:	6f 93       	push	r22
    3a16:	7f 93       	push	r23
    3a18:	8f 93       	push	r24
    3a1a:	9f 93       	push	r25
    3a1c:	af 93       	push	r26
	EIFR |= (1 << INTF3);
    3a1e:	8c b3       	in	r24, 0x1c	; 28
    3a20:	88 60       	ori	r24, 0x08	; 8
    3a22:	8c bb       	out	0x1c, r24	; 28
	sg_u64Time++;
    3a24:	20 91 49 09 	lds	r18, 0x0949	; 0x800949 <sg_u64Time>
    3a28:	30 91 4a 09 	lds	r19, 0x094A	; 0x80094a <sg_u64Time+0x1>
    3a2c:	40 91 4b 09 	lds	r20, 0x094B	; 0x80094b <sg_u64Time+0x2>
    3a30:	50 91 4c 09 	lds	r21, 0x094C	; 0x80094c <sg_u64Time+0x3>
    3a34:	60 91 4d 09 	lds	r22, 0x094D	; 0x80094d <sg_u64Time+0x4>
    3a38:	70 91 4e 09 	lds	r23, 0x094E	; 0x80094e <sg_u64Time+0x5>
    3a3c:	80 91 4f 09 	lds	r24, 0x094F	; 0x80094f <sg_u64Time+0x6>
    3a40:	90 91 50 09 	lds	r25, 0x0950	; 0x800950 <sg_u64Time+0x7>
    3a44:	a1 e0       	ldi	r26, 0x01	; 1
    3a46:	0e 94 55 27 	call	0x4eaa	; 0x4eaa <__adddi3_s8>
    3a4a:	20 93 49 09 	sts	0x0949, r18	; 0x800949 <sg_u64Time>
    3a4e:	30 93 4a 09 	sts	0x094A, r19	; 0x80094a <sg_u64Time+0x1>
    3a52:	40 93 4b 09 	sts	0x094B, r20	; 0x80094b <sg_u64Time+0x2>
    3a56:	50 93 4c 09 	sts	0x094C, r21	; 0x80094c <sg_u64Time+0x3>
    3a5a:	60 93 4d 09 	sts	0x094D, r22	; 0x80094d <sg_u64Time+0x4>
    3a5e:	70 93 4e 09 	sts	0x094E, r23	; 0x80094e <sg_u64Time+0x5>
    3a62:	80 93 4f 09 	sts	0x094F, r24	; 0x80094f <sg_u64Time+0x6>
    3a66:	90 93 50 09 	sts	0x0950, r25	; 0x800950 <sg_u64Time+0x7>
}
    3a6a:	af 91       	pop	r26
    3a6c:	9f 91       	pop	r25
    3a6e:	8f 91       	pop	r24
    3a70:	7f 91       	pop	r23
    3a72:	6f 91       	pop	r22
    3a74:	5f 91       	pop	r21
    3a76:	4f 91       	pop	r20
    3a78:	3f 91       	pop	r19
    3a7a:	2f 91       	pop	r18
    3a7c:	0f 90       	pop	r0
    3a7e:	0f be       	out	0x3f, r0	; 63
    3a80:	0f 90       	pop	r0
    3a82:	1f 90       	pop	r1
    3a84:	18 95       	reti

Disassembly of section .text.RTCReadRegisters:

00003c0c <RTCReadRegisters>:
}

bool RTCReadRegisters( uint8_t u8RegisterAddr, 
					   uint8_t* pu8Data, 
					   uint8_t u8Length )
{
    3c0c:	ff 92       	push	r15
    3c0e:	0f 93       	push	r16
    3c10:	1f 93       	push	r17
    3c12:	cf 93       	push	r28
    3c14:	df 93       	push	r29
    3c16:	f8 2e       	mov	r15, r24
    3c18:	8b 01       	movw	r16, r22
    3c1a:	c4 2f       	mov	r28, r20
	bool bResult;
	
	MBASSERT( u8Length >= 1 );
    3c1c:	41 11       	cpse	r20, r1
    3c1e:	07 c0       	rjmp	.+14     	; 0x3c2e <RTCReadRegisters+0x22>
    3c20:	4f e5       	ldi	r20, 0x5F	; 95
    3c22:	50 e0       	ldi	r21, 0x00	; 0
    3c24:	66 ef       	ldi	r22, 0xF6	; 246
    3c26:	72 e0       	ldi	r23, 0x02	; 2
    3c28:	80 e0       	ldi	r24, 0x00	; 0
    3c2a:	0e 94 c1 24 	call	0x4982	; 0x4982 <PlatformAssert>
	
	// First send device address and write register address
	bResult = RTCStartTransaction( RTC_ADDRESS, false, true );
    3c2e:	41 e0       	ldi	r20, 0x01	; 1
    3c30:	60 e0       	ldi	r22, 0x00	; 0
    3c32:	8e ed       	ldi	r24, 0xDE	; 222
    3c34:	0e 94 c0 22 	call	0x4580	; 0x4580 <RTCStartTransaction>
    3c38:	d8 2f       	mov	r29, r24
	
	// Couldn't get an ACK?  Give up now
	if( false == bResult )
    3c3a:	88 23       	and	r24, r24
    3c3c:	e9 f0       	breq	.+58     	; 0x3c78 <RTCReadRegisters+0x6c>
	{
		goto errorExit;
	}
	
	// Send the register address
	bResult = I2CTxByte( u8RegisterAddr );
    3c3e:	8f 2d       	mov	r24, r15
    3c40:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <I2CTxByte>
    3c44:	d8 2f       	mov	r29, r24
	
	if( false == bResult )
    3c46:	88 23       	and	r24, r24
    3c48:	b9 f0       	breq	.+46     	; 0x3c78 <RTCReadRegisters+0x6c>
	{
		goto errorExit;
	}
	
	// Send repeated start with read
	bResult = RTCStartTransaction( RTC_ADDRESS, true, false );
    3c4a:	40 e0       	ldi	r20, 0x00	; 0
    3c4c:	61 e0       	ldi	r22, 0x01	; 1
    3c4e:	8e ed       	ldi	r24, 0xDE	; 222
    3c50:	0e 94 c0 22 	call	0x4580	; 0x4580 <RTCStartTransaction>
    3c54:	d8 2f       	mov	r29, r24
	
	// Couldn't get an ACK?  Give up now
	if( false == bResult )
    3c56:	81 11       	cpse	r24, r1
    3c58:	08 c0       	rjmp	.+16     	; 0x3c6a <RTCReadRegisters+0x5e>
    3c5a:	0e c0       	rjmp	.+28     	; 0x3c78 <RTCReadRegisters+0x6c>
		goto errorExit;
	}
	
	while( u8Length >= 2 )
	{
		*pu8Data = I2CRxByte( true );
    3c5c:	81 e0       	ldi	r24, 0x01	; 1
    3c5e:	0e 94 c1 1e 	call	0x3d82	; 0x3d82 <I2CRxByte>
    3c62:	f8 01       	movw	r30, r16
    3c64:	81 93       	st	Z+, r24
    3c66:	8f 01       	movw	r16, r30
		pu8Data++;
		u8Length--;
    3c68:	c1 50       	subi	r28, 0x01	; 1
	if( false == bResult )
	{
		goto errorExit;
	}
	
	while( u8Length >= 2 )
    3c6a:	c2 30       	cpi	r28, 0x02	; 2
    3c6c:	b8 f7       	brcc	.-18     	; 0x3c5c <RTCReadRegisters+0x50>
		pu8Data++;
		u8Length--;
	}
	
	// Final read with NACK
	*pu8Data = I2CRxByte( false );
    3c6e:	80 e0       	ldi	r24, 0x00	; 0
    3c70:	0e 94 c1 1e 	call	0x3d82	; 0x3d82 <I2CRxByte>
    3c74:	f8 01       	movw	r30, r16
    3c76:	80 83       	st	Z, r24
	
errorExit:

	I2CStop();
    3c78:	0e 94 68 25 	call	0x4ad0	; 0x4ad0 <I2CStop>
	
	return(bResult);
}
    3c7c:	8d 2f       	mov	r24, r29
    3c7e:	df 91       	pop	r29
    3c80:	cf 91       	pop	r28
    3c82:	1f 91       	pop	r17
    3c84:	0f 91       	pop	r16
    3c86:	ff 90       	pop	r15
    3c88:	08 95       	ret

Disassembly of section .text.RTCReadHW:

00002bd2 <RTCReadHW>:
	sei();
	
	psSrc = gmtime((const time_t *) &u64Time);
	memcpy((void *) psTime, (void *) psSrc, sizeof(*psTime));
	return(true);
}
    2bd2:	cf 93       	push	r28
    2bd4:	df 93       	push	r29
    2bd6:	ec 01       	movw	r28, r24
    2bd8:	47 e0       	ldi	r20, 0x07	; 7
    2bda:	bc 01       	movw	r22, r24
    2bdc:	80 e0       	ldi	r24, 0x00	; 0
    2bde:	0e 94 06 1e 	call	0x3c0c	; 0x3c0c <RTCReadRegisters>
    2be2:	88 23       	and	r24, r24
    2be4:	09 f4       	brne	.+2      	; 0x2be8 <RTCReadHW+0x16>
    2be6:	63 c0       	rjmp	.+198    	; 0x2cae <RTCReadHW+0xdc>
    2be8:	98 81       	ld	r25, Y
    2bea:	29 2f       	mov	r18, r25
    2bec:	22 95       	swap	r18
    2bee:	2f 70       	andi	r18, 0x0F	; 15
    2bf0:	27 70       	andi	r18, 0x07	; 7
    2bf2:	22 0f       	add	r18, r18
    2bf4:	32 2f       	mov	r19, r18
    2bf6:	33 0f       	add	r19, r19
    2bf8:	33 0f       	add	r19, r19
    2bfa:	23 0f       	add	r18, r19
    2bfc:	9f 70       	andi	r25, 0x0F	; 15
    2bfe:	92 0f       	add	r25, r18
    2c00:	98 83       	st	Y, r25
    2c02:	99 81       	ldd	r25, Y+1	; 0x01
    2c04:	29 2f       	mov	r18, r25
    2c06:	22 95       	swap	r18
    2c08:	2f 70       	andi	r18, 0x0F	; 15
    2c0a:	27 70       	andi	r18, 0x07	; 7
    2c0c:	22 0f       	add	r18, r18
    2c0e:	32 2f       	mov	r19, r18
    2c10:	33 0f       	add	r19, r19
    2c12:	33 0f       	add	r19, r19
    2c14:	23 0f       	add	r18, r19
    2c16:	9f 70       	andi	r25, 0x0F	; 15
    2c18:	92 0f       	add	r25, r18
    2c1a:	99 83       	std	Y+1, r25	; 0x01
    2c1c:	9a 81       	ldd	r25, Y+2	; 0x02
    2c1e:	96 ff       	sbrs	r25, 6
    2c20:	11 c0       	rjmp	.+34     	; 0x2c44 <RTCReadHW+0x72>
    2c22:	94 fb       	bst	r25, 4
    2c24:	22 27       	eor	r18, r18
    2c26:	20 f9       	bld	r18, 0
    2c28:	22 0f       	add	r18, r18
    2c2a:	32 2f       	mov	r19, r18
    2c2c:	33 0f       	add	r19, r19
    2c2e:	33 0f       	add	r19, r19
    2c30:	23 0f       	add	r18, r19
    2c32:	39 2f       	mov	r19, r25
    2c34:	3f 70       	andi	r19, 0x0F	; 15
    2c36:	23 0f       	add	r18, r19
    2c38:	2a 83       	std	Y+2, r18	; 0x02
    2c3a:	95 ff       	sbrs	r25, 5
    2c3c:	0f c0       	rjmp	.+30     	; 0x2c5c <RTCReadHW+0x8a>
    2c3e:	24 5f       	subi	r18, 0xF4	; 244
    2c40:	2a 83       	std	Y+2, r18	; 0x02
    2c42:	0c c0       	rjmp	.+24     	; 0x2c5c <RTCReadHW+0x8a>
    2c44:	29 2f       	mov	r18, r25
    2c46:	22 95       	swap	r18
    2c48:	2f 70       	andi	r18, 0x0F	; 15
    2c4a:	23 70       	andi	r18, 0x03	; 3
    2c4c:	22 0f       	add	r18, r18
    2c4e:	32 2f       	mov	r19, r18
    2c50:	33 0f       	add	r19, r19
    2c52:	33 0f       	add	r19, r19
    2c54:	23 0f       	add	r18, r19
    2c56:	9f 70       	andi	r25, 0x0F	; 15
    2c58:	92 0f       	add	r25, r18
    2c5a:	9a 83       	std	Y+2, r25	; 0x02
    2c5c:	9b 81       	ldd	r25, Y+3	; 0x03
    2c5e:	97 70       	andi	r25, 0x07	; 7
    2c60:	9b 83       	std	Y+3, r25	; 0x03
    2c62:	9c 81       	ldd	r25, Y+4	; 0x04
    2c64:	29 2f       	mov	r18, r25
    2c66:	22 95       	swap	r18
    2c68:	2f 70       	andi	r18, 0x0F	; 15
    2c6a:	23 70       	andi	r18, 0x03	; 3
    2c6c:	22 0f       	add	r18, r18
    2c6e:	32 2f       	mov	r19, r18
    2c70:	33 0f       	add	r19, r19
    2c72:	33 0f       	add	r19, r19
    2c74:	23 0f       	add	r18, r19
    2c76:	9f 70       	andi	r25, 0x0F	; 15
    2c78:	92 0f       	add	r25, r18
    2c7a:	9c 83       	std	Y+4, r25	; 0x04
    2c7c:	9d 81       	ldd	r25, Y+5	; 0x05
    2c7e:	94 fb       	bst	r25, 4
    2c80:	22 27       	eor	r18, r18
    2c82:	20 f9       	bld	r18, 0
    2c84:	22 0f       	add	r18, r18
    2c86:	32 2f       	mov	r19, r18
    2c88:	33 0f       	add	r19, r19
    2c8a:	33 0f       	add	r19, r19
    2c8c:	23 0f       	add	r18, r19
    2c8e:	9f 70       	andi	r25, 0x0F	; 15
    2c90:	92 0f       	add	r25, r18
    2c92:	9d 83       	std	Y+5, r25	; 0x05
    2c94:	9e 81       	ldd	r25, Y+6	; 0x06
    2c96:	29 2f       	mov	r18, r25
    2c98:	22 95       	swap	r18
    2c9a:	2f 70       	andi	r18, 0x0F	; 15
    2c9c:	22 0f       	add	r18, r18
    2c9e:	32 2f       	mov	r19, r18
    2ca0:	33 0f       	add	r19, r19
    2ca2:	33 0f       	add	r19, r19
    2ca4:	23 0f       	add	r18, r19
    2ca6:	9f 70       	andi	r25, 0x0F	; 15
    2ca8:	92 0f       	add	r25, r18
    2caa:	9c 5e       	subi	r25, 0xEC	; 236
    2cac:	9e 83       	std	Y+6, r25	; 0x06
    2cae:	df 91       	pop	r29
    2cb0:	cf 91       	pop	r28
    2cb2:	08 95       	ret

Disassembly of section .text.RTCWriteRegisters:

00003f4c <RTCWriteRegisters>:
}

bool RTCWriteRegisters( uint8_t u8RegisterAddr,
						uint8_t* pu8Data, 
						uint8_t u8Length )
{
    3f4c:	ff 92       	push	r15
    3f4e:	0f 93       	push	r16
    3f50:	1f 93       	push	r17
    3f52:	cf 93       	push	r28
    3f54:	df 93       	push	r29
    3f56:	f8 2e       	mov	r15, r24
    3f58:	8b 01       	movw	r16, r22
    3f5a:	c4 2f       	mov	r28, r20
	bool bResult;
	
	MBASSERT( u8Length >= 1 );
    3f5c:	41 11       	cpse	r20, r1
    3f5e:	07 c0       	rjmp	.+14     	; 0x3f6e <RTCWriteRegisters+0x22>
    3f60:	42 e9       	ldi	r20, 0x92	; 146
    3f62:	50 e0       	ldi	r21, 0x00	; 0
    3f64:	66 ef       	ldi	r22, 0xF6	; 246
    3f66:	72 e0       	ldi	r23, 0x02	; 2
    3f68:	80 e0       	ldi	r24, 0x00	; 0
    3f6a:	0e 94 c1 24 	call	0x4982	; 0x4982 <PlatformAssert>
	
	// First send device address and write register address
	bResult = RTCStartTransaction( RTC_ADDRESS, false, true );
    3f6e:	41 e0       	ldi	r20, 0x01	; 1
    3f70:	60 e0       	ldi	r22, 0x00	; 0
    3f72:	8e ed       	ldi	r24, 0xDE	; 222
    3f74:	0e 94 c0 22 	call	0x4580	; 0x4580 <RTCStartTransaction>
    3f78:	d8 2f       	mov	r29, r24
	
	// Couldn't get an ACK?  Give up now
	if( false == bResult )
    3f7a:	88 23       	and	r24, r24
    3f7c:	99 f0       	breq	.+38     	; 0x3fa4 <RTCWriteRegisters+0x58>
	{
		goto errorExit;
	}
	
	// Send the register address
	bResult = I2CTxByte( u8RegisterAddr );
    3f7e:	8f 2d       	mov	r24, r15
    3f80:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <I2CTxByte>
    3f84:	d8 2f       	mov	r29, r24
	
	if( false == bResult )
    3f86:	81 11       	cpse	r24, r1
    3f88:	0b c0       	rjmp	.+22     	; 0x3fa0 <RTCWriteRegisters+0x54>
    3f8a:	0c c0       	rjmp	.+24     	; 0x3fa4 <RTCWriteRegisters+0x58>
	}
	
	// Now immediately send the sequential data
	while( u8Length )
	{
		bResult = I2CTxByte( *pu8Data );
    3f8c:	f8 01       	movw	r30, r16
    3f8e:	80 81       	ld	r24, Z
    3f90:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <I2CTxByte>
    3f94:	d8 2f       	mov	r29, r24
		
		if( false == bResult )
    3f96:	88 23       	and	r24, r24
    3f98:	29 f0       	breq	.+10     	; 0x3fa4 <RTCWriteRegisters+0x58>
		{
			goto errorExit;
		}
		
		pu8Data++;
    3f9a:	0f 5f       	subi	r16, 0xFF	; 255
    3f9c:	1f 4f       	sbci	r17, 0xFF	; 255
		u8Length--;
    3f9e:	c1 50       	subi	r28, 0x01	; 1
	{
		goto errorExit;
	}
	
	// Now immediately send the sequential data
	while( u8Length )
    3fa0:	c1 11       	cpse	r28, r1
    3fa2:	f4 cf       	rjmp	.-24     	; 0x3f8c <RTCWriteRegisters+0x40>
		u8Length--;
	}
	
errorExit:

	I2CStop();
    3fa4:	0e 94 68 25 	call	0x4ad0	; 0x4ad0 <I2CStop>
	
	return( bResult );
}
    3fa8:	8d 2f       	mov	r24, r29
    3faa:	df 91       	pop	r29
    3fac:	cf 91       	pop	r28
    3fae:	1f 91       	pop	r17
    3fb0:	0f 91       	pop	r16
    3fb2:	ff 90       	pop	r15
    3fb4:	08 95       	ret

Disassembly of section .text.RTCWriteHW:

000028e8 <RTCWriteHW>:
	sei();
	
	psSrc = gmtime((const time_t *) &u64Time);
	memcpy((void *) psTime, (void *) psSrc, sizeof(*psTime));
	return(true);
}
    28e8:	fc 01       	movw	r30, r24
    28ea:	20 81       	ld	r18, Z
    28ec:	8d ec       	ldi	r24, 0xCD	; 205
    28ee:	28 9f       	mul	r18, r24
    28f0:	91 2d       	mov	r25, r1
    28f2:	11 24       	eor	r1, r1
    28f4:	96 95       	lsr	r25
    28f6:	96 95       	lsr	r25
    28f8:	96 95       	lsr	r25
    28fa:	30 e1       	ldi	r19, 0x10	; 16
    28fc:	93 9f       	mul	r25, r19
    28fe:	a0 01       	movw	r20, r0
    2900:	11 24       	eor	r1, r1
    2902:	99 0f       	add	r25, r25
    2904:	39 2f       	mov	r19, r25
    2906:	33 0f       	add	r19, r19
    2908:	33 0f       	add	r19, r19
    290a:	93 0f       	add	r25, r19
    290c:	29 1b       	sub	r18, r25
    290e:	24 2b       	or	r18, r20
    2910:	20 83       	st	Z, r18
    2912:	21 81       	ldd	r18, Z+1	; 0x01
    2914:	28 9f       	mul	r18, r24
    2916:	91 2d       	mov	r25, r1
    2918:	11 24       	eor	r1, r1
    291a:	96 95       	lsr	r25
    291c:	96 95       	lsr	r25
    291e:	96 95       	lsr	r25
    2920:	30 e1       	ldi	r19, 0x10	; 16
    2922:	93 9f       	mul	r25, r19
    2924:	a0 01       	movw	r20, r0
    2926:	11 24       	eor	r1, r1
    2928:	99 0f       	add	r25, r25
    292a:	39 2f       	mov	r19, r25
    292c:	33 0f       	add	r19, r19
    292e:	33 0f       	add	r19, r19
    2930:	93 0f       	add	r25, r19
    2932:	29 1b       	sub	r18, r25
    2934:	24 2b       	or	r18, r20
    2936:	21 83       	std	Z+1, r18	; 0x01
    2938:	42 81       	ldd	r20, Z+2	; 0x02
    293a:	48 9f       	mul	r20, r24
    293c:	91 2d       	mov	r25, r1
    293e:	11 24       	eor	r1, r1
    2940:	96 95       	lsr	r25
    2942:	96 95       	lsr	r25
    2944:	96 95       	lsr	r25
    2946:	50 e1       	ldi	r21, 0x10	; 16
    2948:	95 9f       	mul	r25, r21
    294a:	90 01       	movw	r18, r0
    294c:	11 24       	eor	r1, r1
    294e:	99 0f       	add	r25, r25
    2950:	39 2f       	mov	r19, r25
    2952:	33 0f       	add	r19, r19
    2954:	33 0f       	add	r19, r19
    2956:	93 0f       	add	r25, r19
    2958:	49 1b       	sub	r20, r25
    295a:	24 2b       	or	r18, r20
    295c:	2f 7b       	andi	r18, 0xBF	; 191
    295e:	22 83       	std	Z+2, r18	; 0x02
    2960:	93 81       	ldd	r25, Z+3	; 0x03
    2962:	97 70       	andi	r25, 0x07	; 7
    2964:	98 60       	ori	r25, 0x08	; 8
    2966:	93 83       	std	Z+3, r25	; 0x03
    2968:	24 81       	ldd	r18, Z+4	; 0x04
    296a:	28 9f       	mul	r18, r24
    296c:	91 2d       	mov	r25, r1
    296e:	11 24       	eor	r1, r1
    2970:	96 95       	lsr	r25
    2972:	96 95       	lsr	r25
    2974:	96 95       	lsr	r25
    2976:	30 e1       	ldi	r19, 0x10	; 16
    2978:	93 9f       	mul	r25, r19
    297a:	a0 01       	movw	r20, r0
    297c:	11 24       	eor	r1, r1
    297e:	99 0f       	add	r25, r25
    2980:	39 2f       	mov	r19, r25
    2982:	33 0f       	add	r19, r19
    2984:	33 0f       	add	r19, r19
    2986:	93 0f       	add	r25, r19
    2988:	29 1b       	sub	r18, r25
    298a:	24 2b       	or	r18, r20
    298c:	24 83       	std	Z+4, r18	; 0x04
    298e:	25 81       	ldd	r18, Z+5	; 0x05
    2990:	28 9f       	mul	r18, r24
    2992:	91 2d       	mov	r25, r1
    2994:	11 24       	eor	r1, r1
    2996:	96 95       	lsr	r25
    2998:	96 95       	lsr	r25
    299a:	96 95       	lsr	r25
    299c:	30 e1       	ldi	r19, 0x10	; 16
    299e:	93 9f       	mul	r25, r19
    29a0:	a0 01       	movw	r20, r0
    29a2:	11 24       	eor	r1, r1
    29a4:	99 0f       	add	r25, r25
    29a6:	39 2f       	mov	r19, r25
    29a8:	33 0f       	add	r19, r19
    29aa:	33 0f       	add	r19, r19
    29ac:	93 0f       	add	r25, r19
    29ae:	29 1b       	sub	r18, r25
    29b0:	24 2b       	or	r18, r20
    29b2:	25 83       	std	Z+5, r18	; 0x05
    29b4:	96 81       	ldd	r25, Z+6	; 0x06
    29b6:	98 9f       	mul	r25, r24
    29b8:	81 2d       	mov	r24, r1
    29ba:	11 24       	eor	r1, r1
    29bc:	86 95       	lsr	r24
    29be:	86 95       	lsr	r24
    29c0:	86 95       	lsr	r24
    29c2:	40 e1       	ldi	r20, 0x10	; 16
    29c4:	84 9f       	mul	r24, r20
    29c6:	90 01       	movw	r18, r0
    29c8:	11 24       	eor	r1, r1
    29ca:	88 0f       	add	r24, r24
    29cc:	38 2f       	mov	r19, r24
    29ce:	33 0f       	add	r19, r19
    29d0:	33 0f       	add	r19, r19
    29d2:	83 0f       	add	r24, r19
    29d4:	98 1b       	sub	r25, r24
    29d6:	92 2b       	or	r25, r18
    29d8:	96 83       	std	Z+6, r25	; 0x06
    29da:	47 e0       	ldi	r20, 0x07	; 7
    29dc:	bf 01       	movw	r22, r30
    29de:	80 e0       	ldi	r24, 0x00	; 0
    29e0:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <RTCWriteRegisters>
    29e4:	08 95       	ret

Disassembly of section .text.RTCSetTime:

000030da <RTCSetTime>:

// This sets the RTC to the specific time passed in. True is returned
// if it's 
bool RTCSetTime(uint64_t u64Timet)
{
    30da:	0f 93       	push	r16
    30dc:	1f 93       	push	r17
    30de:	cf 93       	push	r28
    30e0:	df 93       	push	r29
    30e2:	cd b7       	in	r28, 0x3d	; 61
    30e4:	de b7       	in	r29, 0x3e	; 62
    30e6:	a8 97       	sbiw	r28, 0x28	; 40
    30e8:	0f b6       	in	r0, 0x3f	; 63
    30ea:	f8 94       	cli
    30ec:	de bf       	out	0x3e, r29	; 62
    30ee:	0f be       	out	0x3f, r0	; 63
    30f0:	cd bf       	out	0x3d, r28	; 61
    30f2:	29 a3       	std	Y+33, r18	; 0x21
    30f4:	3a a3       	std	Y+34, r19	; 0x22
    30f6:	4b a3       	std	Y+35, r20	; 0x23
    30f8:	5c a3       	std	Y+36, r21	; 0x24
    30fa:	6d a3       	std	Y+37, r22	; 0x25
    30fc:	7e a3       	std	Y+38, r23	; 0x26
    30fe:	8f a3       	std	Y+39, r24	; 0x27
    3100:	98 a7       	std	Y+40, r25	; 0x28
	struct tm sTime;
	struct tm *psTime;
	SMCP7940NTime sTimeHW;

	// Convert to GMTime
	memset((void *) &sTime, 0, sizeof(sTime));
    3102:	fe 01       	movw	r30, r28
    3104:	31 96       	adiw	r30, 0x01	; 1
    3106:	89 e1       	ldi	r24, 0x19	; 25
    3108:	df 01       	movw	r26, r30
    310a:	1d 92       	st	X+, r1
    310c:	8a 95       	dec	r24
    310e:	e9 f7       	brne	.-6      	; 0x310a <RTCSetTime+0x30>
	psTime = gmtime((const time_t *) &u64Timet);
    3110:	be 01       	movw	r22, r28
    3112:	6f 5d       	subi	r22, 0xDF	; 223
    3114:	7f 4f       	sbci	r23, 0xFF	; 255
    3116:	80 e8       	ldi	r24, 0x80	; 128
    3118:	0e 94 25 28 	call	0x504a	; 0x504a <gmtime>
    311c:	8c 01       	movw	r16, r24
	MBASSERT(psTime);
    311e:	89 2b       	or	r24, r25
    3120:	39 f4       	brne	.+14     	; 0x3130 <RTCSetTime+0x56>
    3122:	42 e8       	ldi	r20, 0x82	; 130
    3124:	51 e0       	ldi	r21, 0x01	; 1
    3126:	66 ef       	ldi	r22, 0xF6	; 246
    3128:	72 e0       	ldi	r23, 0x02	; 2
    312a:	80 e0       	ldi	r24, 0x00	; 0
    312c:	0e 94 c1 24 	call	0x4982	; 0x4982 <PlatformAssert>
	memcpy((void *) &sTime, (void *) psTime, sizeof(sTime));
    3130:	a8 01       	movw	r20, r16
    3132:	60 e8       	ldi	r22, 0x80	; 128
    3134:	29 e1       	ldi	r18, 0x19	; 25
    3136:	30 e0       	ldi	r19, 0x00	; 0
    3138:	ce 01       	movw	r24, r28
    313a:	01 96       	adiw	r24, 0x01	; 1
    313c:	0e 94 4e 24 	call	0x489c	; 0x489c <memcpy>
	
	// Now convert to hardware
	StructTMToHW(&sTime,
    3140:	be 01       	movw	r22, r28
    3142:	66 5e       	subi	r22, 0xE6	; 230
    3144:	7f 4f       	sbci	r23, 0xFF	; 255
    3146:	ce 01       	movw	r24, r28
    3148:	01 96       	adiw	r24, 0x01	; 1
    314a:	0e 94 a5 21 	call	0x434a	; 0x434a <StructTMToHW>
				 &sTimeHW);
	
	// Set the time			 
	cli();
    314e:	f8 94       	cli
	sg_u64Time = u64Timet;
    3150:	79 a1       	ldd	r23, Y+33	; 0x21
    3152:	6a a1       	ldd	r22, Y+34	; 0x22
    3154:	5b a1       	ldd	r21, Y+35	; 0x23
    3156:	4c a1       	ldd	r20, Y+36	; 0x24
    3158:	3d a1       	ldd	r19, Y+37	; 0x25
    315a:	2e a1       	ldd	r18, Y+38	; 0x26
    315c:	9f a1       	ldd	r25, Y+39	; 0x27
    315e:	88 a5       	ldd	r24, Y+40	; 0x28
    3160:	70 93 49 09 	sts	0x0949, r23	; 0x800949 <sg_u64Time>
    3164:	60 93 4a 09 	sts	0x094A, r22	; 0x80094a <sg_u64Time+0x1>
    3168:	50 93 4b 09 	sts	0x094B, r21	; 0x80094b <sg_u64Time+0x2>
    316c:	40 93 4c 09 	sts	0x094C, r20	; 0x80094c <sg_u64Time+0x3>
    3170:	30 93 4d 09 	sts	0x094D, r19	; 0x80094d <sg_u64Time+0x4>
    3174:	20 93 4e 09 	sts	0x094E, r18	; 0x80094e <sg_u64Time+0x5>
    3178:	90 93 4f 09 	sts	0x094F, r25	; 0x80094f <sg_u64Time+0x6>
    317c:	80 93 50 09 	sts	0x0950, r24	; 0x800950 <sg_u64Time+0x7>
	sei();
    3180:	78 94       	sei
	
	// Now go tell the hardware about it
	return(RTCWriteHW(&sTimeHW));
    3182:	ce 01       	movw	r24, r28
    3184:	4a 96       	adiw	r24, 0x1a	; 26
    3186:	0e 94 74 14 	call	0x28e8	; 0x28e8 <RTCWriteHW>
}
    318a:	a8 96       	adiw	r28, 0x28	; 40
    318c:	0f b6       	in	r0, 0x3f	; 63
    318e:	f8 94       	cli
    3190:	de bf       	out	0x3e, r29	; 62
    3192:	0f be       	out	0x3f, r0	; 63
    3194:	cd bf       	out	0x3d, r28	; 61
    3196:	df 91       	pop	r29
    3198:	cf 91       	pop	r28
    319a:	1f 91       	pop	r17
    319c:	0f 91       	pop	r16
    319e:	08 95       	ret

Disassembly of section .text.RTCInit:

000016aa <RTCInit>:
	sei();
	
	psSrc = gmtime((const time_t *) &u64Time);
	memcpy((void *) psTime, (void *) psSrc, sizeof(*psTime));
	return(true);
}
    16aa:	ff 92       	push	r15
    16ac:	0f 93       	push	r16
    16ae:	1f 93       	push	r17
    16b0:	cf 93       	push	r28
    16b2:	df 93       	push	r29
    16b4:	cd b7       	in	r28, 0x3d	; 61
    16b6:	de b7       	in	r29, 0x3e	; 62
    16b8:	a1 97       	sbiw	r28, 0x21	; 33
    16ba:	0f b6       	in	r0, 0x3f	; 63
    16bc:	f8 94       	cli
    16be:	de bf       	out	0x3e, r29	; 62
    16c0:	0f be       	out	0x3f, r0	; 63
    16c2:	cd bf       	out	0x3d, r28	; 61
    16c4:	19 82       	std	Y+1, r1	; 0x01
    16c6:	41 e0       	ldi	r20, 0x01	; 1
    16c8:	be 01       	movw	r22, r28
    16ca:	6f 5f       	subi	r22, 0xFF	; 255
    16cc:	7f 4f       	sbci	r23, 0xFF	; 255
    16ce:	87 e0       	ldi	r24, 0x07	; 7
    16d0:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <RTCWriteRegisters>
    16d4:	18 2f       	mov	r17, r24
    16d6:	88 23       	and	r24, r24
    16d8:	09 f4       	brne	.+2      	; 0x16dc <RTCInit+0x32>
    16da:	eb c0       	rjmp	.+470    	; 0x18b2 <RTCInit+0x208>
    16dc:	80 e8       	ldi	r24, 0x80	; 128
    16de:	89 83       	std	Y+1, r24	; 0x01
    16e0:	41 e0       	ldi	r20, 0x01	; 1
    16e2:	be 01       	movw	r22, r28
    16e4:	6f 5f       	subi	r22, 0xFF	; 255
    16e6:	7f 4f       	sbci	r23, 0xFF	; 255
    16e8:	80 e0       	ldi	r24, 0x00	; 0
    16ea:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <RTCWriteRegisters>
    16ee:	18 2f       	mov	r17, r24
    16f0:	81 11       	cpse	r24, r1
    16f2:	17 c0       	rjmp	.+46     	; 0x1722 <RTCInit+0x78>
    16f4:	de c0       	rjmp	.+444    	; 0x18b2 <RTCInit+0x208>
    16f6:	19 82       	std	Y+1, r1	; 0x01
    16f8:	41 e0       	ldi	r20, 0x01	; 1
    16fa:	be 01       	movw	r22, r28
    16fc:	6f 5f       	subi	r22, 0xFF	; 255
    16fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1700:	83 e0       	ldi	r24, 0x03	; 3
    1702:	0e 94 06 1e 	call	0x3c0c	; 0x3c0c <RTCReadRegisters>
    1706:	18 2f       	mov	r17, r24
    1708:	88 23       	and	r24, r24
    170a:	09 f4       	brne	.+2      	; 0x170e <RTCInit+0x64>
    170c:	d2 c0       	rjmp	.+420    	; 0x18b2 <RTCInit+0x208>
    170e:	89 81       	ldd	r24, Y+1	; 0x01
    1710:	85 fd       	sbrc	r24, 5
    1712:	0a c0       	rjmp	.+20     	; 0x1728 <RTCInit+0x7e>
    1714:	60 e0       	ldi	r22, 0x00	; 0
    1716:	70 e0       	ldi	r23, 0x00	; 0
    1718:	cb 01       	movw	r24, r22
    171a:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <Delay>
    171e:	0f 5f       	subi	r16, 0xFF	; 255
    1720:	01 c0       	rjmp	.+2      	; 0x1724 <RTCInit+0x7a>
    1722:	00 e0       	ldi	r16, 0x00	; 0
    1724:	08 3c       	cpi	r16, 0xC8	; 200
    1726:	38 f3       	brcs	.-50     	; 0x16f6 <RTCInit+0x4c>
    1728:	08 3c       	cpi	r16, 0xC8	; 200
    172a:	08 f0       	brcs	.+2      	; 0x172e <RTCInit+0x84>
    172c:	c2 c0       	rjmp	.+388    	; 0x18b2 <RTCInit+0x208>
    172e:	89 81       	ldd	r24, Y+1	; 0x01
    1730:	88 60       	ori	r24, 0x08	; 8
    1732:	89 83       	std	Y+1, r24	; 0x01
    1734:	41 e0       	ldi	r20, 0x01	; 1
    1736:	be 01       	movw	r22, r28
    1738:	6f 5f       	subi	r22, 0xFF	; 255
    173a:	7f 4f       	sbci	r23, 0xFF	; 255
    173c:	83 e0       	ldi	r24, 0x03	; 3
    173e:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <RTCWriteRegisters>
    1742:	18 2f       	mov	r17, r24
    1744:	88 23       	and	r24, r24
    1746:	09 f4       	brne	.+2      	; 0x174a <RTCInit+0xa0>
    1748:	b4 c0       	rjmp	.+360    	; 0x18b2 <RTCInit+0x208>
    174a:	41 e0       	ldi	r20, 0x01	; 1
    174c:	be 01       	movw	r22, r28
    174e:	6f 5f       	subi	r22, 0xFF	; 255
    1750:	7f 4f       	sbci	r23, 0xFF	; 255
    1752:	82 e0       	ldi	r24, 0x02	; 2
    1754:	0e 94 06 1e 	call	0x3c0c	; 0x3c0c <RTCReadRegisters>
    1758:	18 2f       	mov	r17, r24
    175a:	88 23       	and	r24, r24
    175c:	09 f4       	brne	.+2      	; 0x1760 <RTCInit+0xb6>
    175e:	a9 c0       	rjmp	.+338    	; 0x18b2 <RTCInit+0x208>
    1760:	89 81       	ldd	r24, Y+1	; 0x01
    1762:	8f 7b       	andi	r24, 0xBF	; 191
    1764:	89 83       	std	Y+1, r24	; 0x01
    1766:	41 e0       	ldi	r20, 0x01	; 1
    1768:	be 01       	movw	r22, r28
    176a:	6f 5f       	subi	r22, 0xFF	; 255
    176c:	7f 4f       	sbci	r23, 0xFF	; 255
    176e:	82 e0       	ldi	r24, 0x02	; 2
    1770:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <RTCWriteRegisters>
    1774:	18 2f       	mov	r17, r24
    1776:	88 23       	and	r24, r24
    1778:	09 f4       	brne	.+2      	; 0x177c <RTCInit+0xd2>
    177a:	9b c0       	rjmp	.+310    	; 0x18b2 <RTCInit+0x208>
    177c:	ce 01       	movw	r24, r28
    177e:	02 96       	adiw	r24, 0x02	; 2
    1780:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <RTCReadHW>
    1784:	18 2f       	mov	r17, r24
    1786:	88 23       	and	r24, r24
    1788:	09 f4       	brne	.+2      	; 0x178c <RTCInit+0xe2>
    178a:	93 c0       	rjmp	.+294    	; 0x18b2 <RTCInit+0x208>
    178c:	8a 81       	ldd	r24, Y+2	; 0x02
    178e:	8c 33       	cpi	r24, 0x3C	; 60
    1790:	10 f4       	brcc	.+4      	; 0x1796 <RTCInit+0xec>
    1792:	10 e0       	ldi	r17, 0x00	; 0
    1794:	01 c0       	rjmp	.+2      	; 0x1798 <RTCInit+0xee>
    1796:	11 e0       	ldi	r17, 0x01	; 1
    1798:	8b 81       	ldd	r24, Y+3	; 0x03
    179a:	8c 33       	cpi	r24, 0x3C	; 60
    179c:	08 f0       	brcs	.+2      	; 0x17a0 <RTCInit+0xf6>
    179e:	11 e0       	ldi	r17, 0x01	; 1
    17a0:	8c 81       	ldd	r24, Y+4	; 0x04
    17a2:	8c 33       	cpi	r24, 0x3C	; 60
    17a4:	08 f0       	brcs	.+2      	; 0x17a8 <RTCInit+0xfe>
    17a6:	11 e0       	ldi	r17, 0x01	; 1
    17a8:	8d 81       	ldd	r24, Y+5	; 0x05
    17aa:	81 50       	subi	r24, 0x01	; 1
    17ac:	87 30       	cpi	r24, 0x07	; 7
    17ae:	08 f0       	brcs	.+2      	; 0x17b2 <RTCInit+0x108>
    17b0:	11 e0       	ldi	r17, 0x01	; 1
    17b2:	2f 81       	ldd	r18, Y+7	; 0x07
    17b4:	8f ef       	ldi	r24, 0xFF	; 255
    17b6:	82 0f       	add	r24, r18
    17b8:	8c 30       	cpi	r24, 0x0C	; 12
    17ba:	18 f5       	brcc	.+70     	; 0x1802 <RTCInit+0x158>
    17bc:	0e 81       	ldd	r16, Y+6	; 0x06
    17be:	00 23       	and	r16, r16
    17c0:	11 f1       	breq	.+68     	; 0x1806 <RTCInit+0x15c>
    17c2:	82 2f       	mov	r24, r18
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	01 97       	sbiw	r24, 0x01	; 1
    17c8:	09 2e       	mov	r0, r25
    17ca:	00 0c       	add	r0, r0
    17cc:	aa 0b       	sbc	r26, r26
    17ce:	87 5d       	subi	r24, 0xD7	; 215
    17d0:	9c 4f       	sbci	r25, 0xFC	; 252
    17d2:	af 4f       	sbci	r26, 0xFF	; 255
    17d4:	fc 01       	movw	r30, r24
    17d6:	f4 90       	lpm	r15, Z
    17d8:	a7 fd       	sbrc	r26, 7
    17da:	f0 80       	ld	r15, Z
    17dc:	22 30       	cpi	r18, 0x02	; 2
    17de:	71 f4       	brne	.+28     	; 0x17fc <RTCInit+0x152>
    17e0:	88 85       	ldd	r24, Y+8	; 0x08
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	84 31       	cpi	r24, 0x14	; 20
    17e6:	91 05       	cpc	r25, r1
    17e8:	18 f4       	brcc	.+6      	; 0x17f0 <RTCInit+0x146>
    17ea:	8c 5c       	subi	r24, 0xCC	; 204
    17ec:	97 4f       	sbci	r25, 0xF7	; 247
    17ee:	02 c0       	rjmp	.+4      	; 0x17f4 <RTCInit+0x14a>
    17f0:	80 53       	subi	r24, 0x30	; 48
    17f2:	98 4f       	sbci	r25, 0xF8	; 248
    17f4:	0e 94 ce 23 	call	0x479c	; 0x479c <IsLeapYear>
    17f8:	81 11       	cpse	r24, r1
    17fa:	f3 94       	inc	r15
    17fc:	f0 16       	cp	r15, r16
    17fe:	28 f0       	brcs	.+10     	; 0x180a <RTCInit+0x160>
    1800:	05 c0       	rjmp	.+10     	; 0x180c <RTCInit+0x162>
    1802:	11 e0       	ldi	r17, 0x01	; 1
    1804:	03 c0       	rjmp	.+6      	; 0x180c <RTCInit+0x162>
    1806:	11 e0       	ldi	r17, 0x01	; 1
    1808:	01 c0       	rjmp	.+2      	; 0x180c <RTCInit+0x162>
    180a:	11 e0       	ldi	r17, 0x01	; 1
    180c:	11 23       	and	r17, r17
    180e:	b9 f0       	breq	.+46     	; 0x183e <RTCInit+0x194>
    1810:	1a 82       	std	Y+2, r1	; 0x02
    1812:	1b 82       	std	Y+3, r1	; 0x03
    1814:	1c 82       	std	Y+4, r1	; 0x04
    1816:	81 e0       	ldi	r24, 0x01	; 1
    1818:	8e 83       	std	Y+6, r24	; 0x06
    181a:	8f 83       	std	Y+7, r24	; 0x07
    181c:	88 e1       	ldi	r24, 0x18	; 24
    181e:	88 87       	std	Y+8, r24	; 0x08
    1820:	ce 01       	movw	r24, r28
    1822:	02 96       	adiw	r24, 0x02	; 2
    1824:	0e 94 74 14 	call	0x28e8	; 0x28e8 <RTCWriteHW>
    1828:	18 2f       	mov	r17, r24
    182a:	88 23       	and	r24, r24
    182c:	09 f4       	brne	.+2      	; 0x1830 <RTCInit+0x186>
    182e:	41 c0       	rjmp	.+130    	; 0x18b2 <RTCInit+0x208>
    1830:	ce 01       	movw	r24, r28
    1832:	02 96       	adiw	r24, 0x02	; 2
    1834:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <RTCReadHW>
    1838:	18 2f       	mov	r17, r24
    183a:	88 23       	and	r24, r24
    183c:	d1 f1       	breq	.+116    	; 0x18b2 <RTCInit+0x208>
    183e:	be 01       	movw	r22, r28
    1840:	67 5f       	subi	r22, 0xF7	; 247
    1842:	7f 4f       	sbci	r23, 0xFF	; 255
    1844:	ce 01       	movw	r24, r28
    1846:	02 96       	adiw	r24, 0x02	; 2
    1848:	0e 94 45 1e 	call	0x3c8a	; 0x3c8a <HWToStructTM>
    184c:	ce 01       	movw	r24, r28
    184e:	09 96       	adiw	r24, 0x09	; 9
    1850:	0e 94 43 1d 	call	0x3a86	; 0x3a86 <mktime>
    1854:	8b 01       	movw	r16, r22
    1856:	9c 01       	movw	r18, r24
    1858:	f8 94       	cli
    185a:	00 93 49 09 	sts	0x0949, r16	; 0x800949 <sg_u64Time>
    185e:	10 93 4a 09 	sts	0x094A, r17	; 0x80094a <sg_u64Time+0x1>
    1862:	20 93 4b 09 	sts	0x094B, r18	; 0x80094b <sg_u64Time+0x2>
    1866:	30 93 4c 09 	sts	0x094C, r19	; 0x80094c <sg_u64Time+0x3>
    186a:	10 92 4d 09 	sts	0x094D, r1	; 0x80094d <sg_u64Time+0x4>
    186e:	10 92 4e 09 	sts	0x094E, r1	; 0x80094e <sg_u64Time+0x5>
    1872:	10 92 4f 09 	sts	0x094F, r1	; 0x80094f <sg_u64Time+0x6>
    1876:	10 92 50 09 	sts	0x0950, r1	; 0x800950 <sg_u64Time+0x7>
    187a:	78 94       	sei
    187c:	87 b1       	in	r24, 0x07	; 7
    187e:	8e 7f       	andi	r24, 0xFE	; 254
    1880:	87 b9       	out	0x07, r24	; 7
    1882:	88 b1       	in	r24, 0x08	; 8
    1884:	81 60       	ori	r24, 0x01	; 1
    1886:	88 b9       	out	0x08, r24	; 8
    1888:	41 e0       	ldi	r20, 0x01	; 1
    188a:	be 01       	movw	r22, r28
    188c:	6f 5f       	subi	r22, 0xFF	; 255
    188e:	7f 4f       	sbci	r23, 0xFF	; 255
    1890:	87 e0       	ldi	r24, 0x07	; 7
    1892:	0e 94 06 1e 	call	0x3c0c	; 0x3c0c <RTCReadRegisters>
    1896:	18 2f       	mov	r17, r24
    1898:	88 23       	and	r24, r24
    189a:	59 f0       	breq	.+22     	; 0x18b2 <RTCInit+0x208>
    189c:	89 81       	ldd	r24, Y+1	; 0x01
    189e:	80 64       	ori	r24, 0x40	; 64
    18a0:	89 83       	std	Y+1, r24	; 0x01
    18a2:	41 e0       	ldi	r20, 0x01	; 1
    18a4:	be 01       	movw	r22, r28
    18a6:	6f 5f       	subi	r22, 0xFF	; 255
    18a8:	7f 4f       	sbci	r23, 0xFF	; 255
    18aa:	87 e0       	ldi	r24, 0x07	; 7
    18ac:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <RTCWriteRegisters>
    18b0:	18 2f       	mov	r17, r24
    18b2:	81 2f       	mov	r24, r17
    18b4:	a1 96       	adiw	r28, 0x21	; 33
    18b6:	0f b6       	in	r0, 0x3f	; 63
    18b8:	f8 94       	cli
    18ba:	de bf       	out	0x3e, r29	; 62
    18bc:	0f be       	out	0x3f, r0	; 63
    18be:	cd bf       	out	0x3d, r28	; 61
    18c0:	df 91       	pop	r29
    18c2:	cf 91       	pop	r28
    18c4:	1f 91       	pop	r17
    18c6:	0f 91       	pop	r16
    18c8:	ff 90       	pop	r15
    18ca:	08 95       	ret

Disassembly of section .text.SDSetCS:

00004f1a <SDSetCS>:
static uint8_t sg_u8CSD[16];

// This will provide a !CS assertion or deassertion with pre/postamble clock
static void SDSetCS(bool bAsserted)
{
	if (bAsserted)
    4f1a:	88 23       	and	r24, r24
    4f1c:	21 f0       	breq	.+8      	; 0x4f26 <SDSetCS+0xc>
	{
		SD_CS_ASSERT();
    4f1e:	88 b1       	in	r24, 0x08	; 8
    4f20:	8f 7b       	andi	r24, 0xBF	; 191
    4f22:	88 b9       	out	0x08, r24	; 8
    4f24:	08 95       	ret
	}
	else
	{
		SD_CS_DEASSERT();
    4f26:	88 b1       	in	r24, 0x08	; 8
    4f28:	80 64       	ori	r24, 0x40	; 64
    4f2a:	88 b9       	out	0x08, r24	; 8
    4f2c:	08 95       	ret

Disassembly of section .text.SDPowerup:

000046be <SDPowerup>:

// Sends SD powerup sequence to card and attempts to initialize it
static void SDPowerup(void)
{
	// Set SPI baud rate to (SD_SPEED_SLOW, which is the max for the init sequence)
	(void) SPISetBaudRate(SD_SPEED_SLOW);
    46be:	60 e8       	ldi	r22, 0x80	; 128
    46c0:	7a e1       	ldi	r23, 0x1A	; 26
    46c2:	86 e0       	ldi	r24, 0x06	; 6
    46c4:	90 e0       	ldi	r25, 0x00	; 0
    46c6:	0e 94 08 18 	call	0x3010	; 0x3010 <SPISetBaudRate>
	
	// Deassert chip select
	SD_CS_DEASSERT();
    46ca:	88 b1       	in	r24, 0x08	; 8
    46cc:	80 64       	ori	r24, 0x40	; 64
    46ce:	88 b9       	out	0x08, r24	; 8
	
	// Delay time after possible deassertion (2ms)
	Delay(2000);
    46d0:	60 ed       	ldi	r22, 0xD0	; 208
    46d2:	77 e0       	ldi	r23, 0x07	; 7
    46d4:	80 e0       	ldi	r24, 0x00	; 0
    46d6:	90 e0       	ldi	r25, 0x00	; 0
    46d8:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <Delay>
	
	// Send 74/80 bits of 0xff as a reset (80 bits required since we're byte-
	// sized transactions)
	SPIWritePattern(0xff,
    46dc:	40 e1       	ldi	r20, 0x10	; 16
    46de:	50 e0       	ldi	r21, 0x00	; 0
    46e0:	6f ef       	ldi	r22, 0xFF	; 255
    46e2:	70 e0       	ldi	r23, 0x00	; 0
    46e4:	82 e0       	ldi	r24, 0x02	; 2
    46e6:	0e 94 cc 20 	call	0x4198	; 0x4198 <SPITransaction>
				    128/8);

	// Delay time after write
	Delay(2000);
    46ea:	60 ed       	ldi	r22, 0xD0	; 208
    46ec:	77 e0       	ldi	r23, 0x07	; 7
    46ee:	80 e0       	ldi	r24, 0x00	; 0
    46f0:	90 e0       	ldi	r25, 0x00	; 0
    46f2:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <Delay>
    46f6:	08 95       	ret

Disassembly of section .text.SDCommand:

00003548 <SDCommand>:
#define CMD8_CRC    0x87

// Sends a command to the SD card, including argument an CRC
static uint8_t SDCommand(uint8_t u8Cmd,
						 uint32_t u32Arg)
{
    3548:	df 92       	push	r13
    354a:	ef 92       	push	r14
    354c:	ff 92       	push	r15
    354e:	0f 93       	push	r16
    3550:	1f 93       	push	r17
    3552:	cf 93       	push	r28
    3554:	df 93       	push	r29
    3556:	cd b7       	in	r28, 0x3d	; 61
    3558:	de b7       	in	r29, 0x3e	; 62
    355a:	27 97       	sbiw	r28, 0x07	; 7
    355c:	0f b6       	in	r0, 0x3f	; 63
    355e:	f8 94       	cli
    3560:	de bf       	out	0x3e, r29	; 62
    3562:	0f be       	out	0x3f, r0	; 63
    3564:	cd bf       	out	0x3d, r28	; 61
    3566:	18 2f       	mov	r17, r24
    3568:	04 2f       	mov	r16, r20
    356a:	f5 2e       	mov	r15, r21
    356c:	e6 2e       	mov	r14, r22
    356e:	d7 2e       	mov	r13, r23
	uint8_t u8Buffer[sizeof(u8Cmd) + sizeof(u32Arg) + sizeof(u8CRC)];
	uint8_t u8Response;
	uint8_t u8Count;
	
	// If this is an ACMD, prefix a CMD55
	if (u8Cmd & 0x80)
    3570:	88 23       	and	r24, r24
    3572:	4c f4       	brge	.+18     	; 0x3586 <SDCommand+0x3e>
	{
		u8Response = SDCommand(CMD55,
    3574:	40 e0       	ldi	r20, 0x00	; 0
    3576:	50 e0       	ldi	r21, 0x00	; 0
    3578:	ba 01       	movw	r22, r20
    357a:	87 e3       	ldi	r24, 0x37	; 55
    357c:	0e 94 a4 1a 	call	0x3548	; 0x3548 <SDCommand>
    3580:	8f 83       	std	Y+7, r24	; 0x07
							   CMD55_ARG);
							   
		if (u8Response > 1)
    3582:	82 30       	cpi	r24, 0x02	; 2
    3584:	40 f5       	brcc	.+80     	; 0x35d6 <SDCommand+0x8e>
			return(u8Response);
		}
	}
	
	// SD Command (OR in 0x40 so bit 47 is always a 1
	u8Buffer[0] = (u8Cmd & 0x7f) | 0x40;
    3586:	81 2f       	mov	r24, r17
    3588:	8f 73       	andi	r24, 0x3F	; 63
    358a:	80 64       	ori	r24, 0x40	; 64
    358c:	89 83       	std	Y+1, r24	; 0x01
	
	// 32 Bits of argument
	u8Buffer[1] = (uint8_t) (u32Arg >> 24);
    358e:	da 82       	std	Y+2, r13	; 0x02
	u8Buffer[2] = (uint8_t) (u32Arg >> 16);
    3590:	eb 82       	std	Y+3, r14	; 0x03
	u8Buffer[3] = (uint8_t) (u32Arg >> 8);
    3592:	fc 82       	std	Y+4, r15	; 0x04
	u8Buffer[4] = (uint8_t) (u32Arg >> 0);
    3594:	0d 83       	std	Y+5, r16	; 0x05
	
	// Valid CRCs for specific commands
	u8CRC = 0;
	if (CMD0 == u8Cmd)
    3596:	11 23       	and	r17, r17
    3598:	11 f0       	breq	.+4      	; 0x359e <SDCommand+0x56>
	u8Buffer[2] = (uint8_t) (u32Arg >> 16);
	u8Buffer[3] = (uint8_t) (u32Arg >> 8);
	u8Buffer[4] = (uint8_t) (u32Arg >> 0);
	
	// Valid CRCs for specific commands
	u8CRC = 0;
    359a:	80 e0       	ldi	r24, 0x00	; 0
    359c:	01 c0       	rjmp	.+2      	; 0x35a0 <SDCommand+0x58>
	if (CMD0 == u8Cmd)
	{
		u8CRC = 0x95;
    359e:	85 e9       	ldi	r24, 0x95	; 149
	}
	
	if (CMD8 == u8Cmd)
    35a0:	18 30       	cpi	r17, 0x08	; 8
    35a2:	09 f4       	brne	.+2      	; 0x35a6 <SDCommand+0x5e>
	{
		u8CRC = 0x87;
    35a4:	87 e8       	ldi	r24, 0x87	; 135
	}
	
	// Now the CRC - Bit 0 means "ignore CRC"
	u8Buffer[5] = (uint8_t) (u8CRC | 0x01);
    35a6:	81 60       	ori	r24, 0x01	; 1
    35a8:	8e 83       	std	Y+6, r24	; 0x06
	
	// Send all bytes to the SD card
	SPIWrite(u8Buffer,
    35aa:	46 e0       	ldi	r20, 0x06	; 6
    35ac:	50 e0       	ldi	r21, 0x00	; 0
    35ae:	be 01       	movw	r22, r28
    35b0:	6f 5f       	subi	r22, 0xFF	; 255
    35b2:	7f 4f       	sbci	r23, 0xFF	; 255
    35b4:	81 e0       	ldi	r24, 0x01	; 1
    35b6:	0e 94 cc 20 	call	0x4198	; 0x4198 <SPITransaction>
			 sizeof(u8Buffer));
			 
	u8Count = 10;
    35ba:	1a e0       	ldi	r17, 0x0A	; 10
	
	do 
	{
		SPIRead(&u8Response,
    35bc:	41 e0       	ldi	r20, 0x01	; 1
    35be:	50 e0       	ldi	r21, 0x00	; 0
    35c0:	be 01       	movw	r22, r28
    35c2:	69 5f       	subi	r22, 0xF9	; 249
    35c4:	7f 4f       	sbci	r23, 0xFF	; 255
    35c6:	83 e0       	ldi	r24, 0x03	; 3
    35c8:	0e 94 cc 20 	call	0x4198	; 0x4198 <SPITransaction>
				sizeof(u8Response));
	} while ((u8Response & 0x80) && --u8Count);
    35cc:	8f 81       	ldd	r24, Y+7	; 0x07
    35ce:	88 23       	and	r24, r24
    35d0:	14 f4       	brge	.+4      	; 0x35d6 <SDCommand+0x8e>
    35d2:	11 50       	subi	r17, 0x01	; 1
    35d4:	99 f7       	brne	.-26     	; 0x35bc <SDCommand+0x74>
	
	return(u8Response);
}
    35d6:	27 96       	adiw	r28, 0x07	; 7
    35d8:	0f b6       	in	r0, 0x3f	; 63
    35da:	f8 94       	cli
    35dc:	de bf       	out	0x3e, r29	; 62
    35de:	0f be       	out	0x3f, r0	; 63
    35e0:	cd bf       	out	0x3d, r28	; 61
    35e2:	df 91       	pop	r29
    35e4:	cf 91       	pop	r28
    35e6:	1f 91       	pop	r17
    35e8:	0f 91       	pop	r16
    35ea:	ff 90       	pop	r15
    35ec:	ef 90       	pop	r14
    35ee:	df 90       	pop	r13
    35f0:	08 95       	ret

Disassembly of section .text.SDGoIdle:

00004dc6 <SDGoIdle>:
			sizeof(uint32_t));
}

// SD - Go idle!
static uint8_t SDGoIdle(uint8_t *pu8Response)
{
    4dc6:	cf 93       	push	r28
	uint8_t u8Response;
	
	SDSetCS(true);
    4dc8:	81 e0       	ldi	r24, 0x01	; 1
    4dca:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <SDSetCS>
	
	// Send our CMD0 (go idle)
	u8Response = SDCommand(CMD0,
    4dce:	40 e0       	ldi	r20, 0x00	; 0
    4dd0:	50 e0       	ldi	r21, 0x00	; 0
    4dd2:	ba 01       	movw	r22, r20
    4dd4:	80 e0       	ldi	r24, 0x00	; 0
    4dd6:	0e 94 a4 1a 	call	0x3548	; 0x3548 <SDCommand>
    4dda:	c8 2f       	mov	r28, r24
						   CMD0_ARG);
						   
	SDSetCS(false);
    4ddc:	80 e0       	ldi	r24, 0x00	; 0
    4dde:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <SDSetCS>

	return(u8Response);
}
    4de2:	8c 2f       	mov	r24, r28
    4de4:	cf 91       	pop	r28
    4de6:	08 95       	ret

Disassembly of section .text.SDSendOpCondition:

000047d0 <SDSendOpCondition>:
#define ACMD41_CRC  0x00

// Send operation condition
static uint8_t SDSendOpCondition(uint8_t *pu8Response,
								 uint32_t u32Arg)
{
    47d0:	cf 92       	push	r12
    47d2:	df 92       	push	r13
    47d4:	ef 92       	push	r14
    47d6:	ff 92       	push	r15
    47d8:	cf 93       	push	r28
    47da:	6a 01       	movw	r12, r20
    47dc:	7b 01       	movw	r14, r22
	uint8_t u8Response;
	
	// Assert chip select
	SDSetCS(true);
    47de:	81 e0       	ldi	r24, 0x01	; 1
    47e0:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <SDSetCS>
	
	// Send the app command
	u8Response = SDCommand(ACMD41,
    47e4:	b7 01       	movw	r22, r14
    47e6:	a6 01       	movw	r20, r12
    47e8:	89 ea       	ldi	r24, 0xA9	; 169
    47ea:	0e 94 a4 1a 	call	0x3548	; 0x3548 <SDCommand>
    47ee:	c8 2f       	mov	r28, r24
						   u32Arg);
	// Deassert chip select
	SDSetCS(false);
    47f0:	80 e0       	ldi	r24, 0x00	; 0
    47f2:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <SDSetCS>
	
	return(u8Response);
}
    47f6:	8c 2f       	mov	r24, r28
    47f8:	cf 91       	pop	r28
    47fa:	ff 90       	pop	r15
    47fc:	ef 90       	pop	r14
    47fe:	df 90       	pop	r13
    4800:	cf 90       	pop	r12
    4802:	08 95       	ret

Disassembly of section .text.SDSendOpConditionArg:

00004248 <SDSendOpConditionArg>:
	return(u8Response);
}

static uint8_t SDSendOpConditionArg(uint8_t *pu8Resp,
									uint32_t u32Arg)
{
    4248:	cf 92       	push	r12
    424a:	df 92       	push	r13
    424c:	ef 92       	push	r14
    424e:	ff 92       	push	r15
    4250:	0f 93       	push	r16
    4252:	1f 93       	push	r17
    4254:	cf 93       	push	r28
    4256:	df 93       	push	r29
    4258:	8c 01       	movw	r16, r24
    425a:	6a 01       	movw	r12, r20
    425c:	7b 01       	movw	r14, r22
	uint8_t u8Attempts;
	uint8_t u8Response;
	
	u8Attempts = 0;
    425e:	c0 e0       	ldi	r28, 0x00	; 0
		
	// Loop until it comes alive - if it comes alive. Put the card in idle state.
	while (u8Attempts < SD_GO_IDLE_RETRIES)
    4260:	0f c0       	rjmp	.+30     	; 0x4280 <SDSendOpConditionArg+0x38>
	{
		u8Response = SDSendOpCondition(pu8Resp,
    4262:	b7 01       	movw	r22, r14
    4264:	a6 01       	movw	r20, r12
    4266:	c8 01       	movw	r24, r16
    4268:	0e 94 e8 23 	call	0x47d0	; 0x47d0 <SDSendOpCondition>
    426c:	d8 2f       	mov	r29, r24
									   u32Arg);
		if (0 == u8Response)
    426e:	88 23       	and	r24, r24
    4270:	49 f0       	breq	.+18     	; 0x4284 <SDSendOpConditionArg+0x3c>
		{
			break;
		}
			
		// Give it a little time to settle
		Delay(10000);
    4272:	60 e1       	ldi	r22, 0x10	; 16
    4274:	77 e2       	ldi	r23, 0x27	; 39
    4276:	80 e0       	ldi	r24, 0x00	; 0
    4278:	90 e0       	ldi	r25, 0x00	; 0
    427a:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <Delay>
		u8Attempts++;
    427e:	cf 5f       	subi	r28, 0xFF	; 255
	uint8_t u8Response;
	
	u8Attempts = 0;
		
	// Loop until it comes alive - if it comes alive. Put the card in idle state.
	while (u8Attempts < SD_GO_IDLE_RETRIES)
    4280:	c4 36       	cpi	r28, 0x64	; 100
    4282:	78 f3       	brcs	.-34     	; 0x4262 <SDSendOpConditionArg+0x1a>
		Delay(10000);
		u8Attempts++;
	}

	// If we've retried too much, bail out. We're done.
	if (SD_GO_IDLE_RETRIES == u8Attempts)
    4284:	c4 36       	cpi	r28, 0x64	; 100
    4286:	09 f4       	brne	.+2      	; 0x428a <SDSendOpConditionArg+0x42>
	{
		u8Response = 0x80;
    4288:	d0 e8       	ldi	r29, 0x80	; 128
	}
	
	return(u8Response);
}
    428a:	8d 2f       	mov	r24, r29
    428c:	df 91       	pop	r29
    428e:	cf 91       	pop	r28
    4290:	1f 91       	pop	r17
    4292:	0f 91       	pop	r16
    4294:	ff 90       	pop	r15
    4296:	ef 90       	pop	r14
    4298:	df 90       	pop	r13
    429a:	cf 90       	pop	r12
    429c:	08 95       	ret

Disassembly of section .text.SDWaitResponse7:

00004ff8 <SDWaitResponse7>:

// This will return true if a response 7 was received, otherwise false
static void SDWaitResponse7(uint8_t *pu8ResponseByte)
{
	// Go read the remaining 4 bytes
	SPIRead(pu8ResponseByte,
    4ff8:	44 e0       	ldi	r20, 0x04	; 4
    4ffa:	50 e0       	ldi	r21, 0x00	; 0
    4ffc:	bc 01       	movw	r22, r24
    4ffe:	83 e0       	ldi	r24, 0x03	; 3
    5000:	0e 94 cc 20 	call	0x4198	; 0x4198 <SPITransaction>
    5004:	08 95       	ret

Disassembly of section .text.SDSendInterfaceCondition:

00004804 <SDSendInterfaceCondition>:
	return(u8Response);
}

// Send interface condition
static uint8_t SDSendInterfaceCondition(uint8_t *pu8Response)
{
    4804:	0f 93       	push	r16
    4806:	1f 93       	push	r17
    4808:	cf 93       	push	r28
    480a:	8c 01       	movw	r16, r24
	uint8_t u8Response;
	
	SDSetCS(true);
    480c:	81 e0       	ldi	r24, 0x01	; 1
    480e:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <SDSetCS>
	
	// Send our CMD8 Send interface condition
	u8Response = SDCommand(CMD8,
    4812:	4a ea       	ldi	r20, 0xAA	; 170
    4814:	51 e0       	ldi	r21, 0x01	; 1
    4816:	60 e0       	ldi	r22, 0x00	; 0
    4818:	70 e0       	ldi	r23, 0x00	; 0
    481a:	88 e0       	ldi	r24, 0x08	; 8
    481c:	0e 94 a4 1a 	call	0x3548	; 0x3548 <SDCommand>
    4820:	c8 2f       	mov	r28, r24
						   CMD8_ARG);
						   
	SDWaitResponse7(pu8Response);
    4822:	c8 01       	movw	r24, r16
    4824:	0e 94 fc 27 	call	0x4ff8	; 0x4ff8 <SDWaitResponse7>
		
	SDSetCS(false);
    4828:	80 e0       	ldi	r24, 0x00	; 0
    482a:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <SDSetCS>

	return(u8Response);
}
    482e:	8c 2f       	mov	r24, r28
    4830:	cf 91       	pop	r28
    4832:	1f 91       	pop	r17
    4834:	0f 91       	pop	r16
    4836:	08 95       	ret

Disassembly of section .text.SDReadOCR:

00004838 <SDReadOCR>:
#define CMD58_ARG   0x00000000
#define CMD58_CRC   0x00

// Go read the OCR
static uint8_t SDReadOCR(uint8_t *pu8Response)
{
    4838:	0f 93       	push	r16
    483a:	1f 93       	push	r17
    483c:	cf 93       	push	r28
    483e:	8c 01       	movw	r16, r24
	uint8_t u8Response;
	
	// Assert chip select
	SDSetCS(true);
    4840:	81 e0       	ldi	r24, 0x01	; 1
    4842:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <SDSetCS>
	
	// Send the app command
	u8Response = SDCommand(CMD58,
    4846:	40 e0       	ldi	r20, 0x00	; 0
    4848:	50 e0       	ldi	r21, 0x00	; 0
    484a:	ba 01       	movw	r22, r20
    484c:	8a e3       	ldi	r24, 0x3A	; 58
    484e:	0e 94 a4 1a 	call	0x3548	; 0x3548 <SDCommand>
    4852:	c8 2f       	mov	r28, r24
						   CMD58_ARG);

	// Read response
	SDWaitResponse7(pu8Response);
    4854:	c8 01       	movw	r24, r16
    4856:	0e 94 fc 27 	call	0x4ff8	; 0x4ff8 <SDWaitResponse7>

	// Deassert chip select
	SDSetCS(false);
    485a:	80 e0       	ldi	r24, 0x00	; 0
    485c:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <SDSetCS>
	
	return(u8Response);
}
    4860:	8c 2f       	mov	r24, r28
    4862:	cf 91       	pop	r28
    4864:	1f 91       	pop	r17
    4866:	0f 91       	pop	r16
    4868:	08 95       	ret

Disassembly of section .text.SDReadCSD:

00003d06 <SDReadCSD>:
#define CMD9_ARG    0x000000000
#define CMD9_CRC    0x00

// Read CSD (card specific data) - CSD is 128 bits - see the SD spec for details.
static uint8_t SDReadCSD(uint8_t *pu8CSD)
{
    3d06:	ef 92       	push	r14
    3d08:	ff 92       	push	r15
    3d0a:	0f 93       	push	r16
    3d0c:	1f 93       	push	r17
    3d0e:	cf 93       	push	r28
    3d10:	df 93       	push	r29
    3d12:	0f 92       	push	r0
    3d14:	cd b7       	in	r28, 0x3d	; 61
    3d16:	de b7       	in	r29, 0x3e	; 62
    3d18:	7c 01       	movw	r14, r24
	uint8_t u8Response;
	uint8_t u8CmdResponse;
	uint8_t u8Count = 8;
	
	SDSetCS(true);
    3d1a:	81 e0       	ldi	r24, 0x01	; 1
    3d1c:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <SDSetCS>
	
	// Send our CMD9 (read CSD)
	u8CmdResponse = SDCommand(CMD9,
    3d20:	40 e0       	ldi	r20, 0x00	; 0
    3d22:	50 e0       	ldi	r21, 0x00	; 0
    3d24:	ba 01       	movw	r22, r20
    3d26:	89 e0       	ldi	r24, 0x09	; 9
    3d28:	0e 94 a4 1a 	call	0x3548	; 0x3548 <SDCommand>
    3d2c:	08 2f       	mov	r16, r24
							  CMD9_ARG);
	
	// Success! Let's get a response
	if (u8CmdResponse)
    3d2e:	81 11       	cpse	r24, r1
    3d30:	1c c0       	rjmp	.+56     	; 0x3d6a <SDReadCSD+0x64>
    3d32:	18 e0       	ldi	r17, 0x08	; 8
    3d34:	01 c0       	rjmp	.+2      	; 0x3d38 <SDReadCSD+0x32>
	do 
	{
		SPIRead(&u8Response,
			    sizeof(u8Response));
	} while ((u8Response != SD_START_TOKEN) &&
			 (u8Count--));
    3d36:	18 2f       	mov	r17, r24
	}
	
	// Wait until SD_START_TOKEN (start of data sector). We should easily see it in a few bytes.
	do 
	{
		SPIRead(&u8Response,
    3d38:	41 e0       	ldi	r20, 0x01	; 1
    3d3a:	50 e0       	ldi	r21, 0x00	; 0
    3d3c:	be 01       	movw	r22, r28
    3d3e:	6f 5f       	subi	r22, 0xFF	; 255
    3d40:	7f 4f       	sbci	r23, 0xFF	; 255
    3d42:	83 e0       	ldi	r24, 0x03	; 3
    3d44:	0e 94 cc 20 	call	0x4198	; 0x4198 <SPITransaction>
			    sizeof(u8Response));
	} while ((u8Response != SD_START_TOKEN) &&
    3d48:	89 81       	ldd	r24, Y+1	; 0x01
			 (u8Count--));
    3d4a:	8e 3f       	cpi	r24, 0xFE	; 254
    3d4c:	29 f0       	breq	.+10     	; 0x3d58 <SDReadCSD+0x52>
    3d4e:	8f ef       	ldi	r24, 0xFF	; 255
    3d50:	81 0f       	add	r24, r17
	// Wait until SD_START_TOKEN (start of data sector). We should easily see it in a few bytes.
	do 
	{
		SPIRead(&u8Response,
			    sizeof(u8Response));
	} while ((u8Response != SD_START_TOKEN) &&
    3d52:	11 11       	cpse	r17, r1
    3d54:	f0 cf       	rjmp	.-32     	; 0x3d36 <SDReadCSD+0x30>
    3d56:	01 c0       	rjmp	.+2      	; 0x3d5a <SDReadCSD+0x54>
    3d58:	81 2f       	mov	r24, r17
			 (u8Count--));
			 
	// If we haven't seen it in u8Count bytes, then error the call
	if (0 == u8Count)
    3d5a:	88 23       	and	r24, r24
    3d5c:	31 f0       	breq	.+12     	; 0x3d6a <SDReadCSD+0x64>
	{
		goto errorExit;
	}
	
	// Go read the remaining 16 bytes
	SPIRead(pu8CSD,
    3d5e:	40 e1       	ldi	r20, 0x10	; 16
    3d60:	50 e0       	ldi	r21, 0x00	; 0
    3d62:	b7 01       	movw	r22, r14
    3d64:	83 e0       	ldi	r24, 0x03	; 3
    3d66:	0e 94 cc 20 	call	0x4198	; 0x4198 <SPITransaction>
		    16);
	
errorExit:	
	SDSetCS(false);
    3d6a:	80 e0       	ldi	r24, 0x00	; 0
    3d6c:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <SDSetCS>
	return(u8CmdResponse);
	
}
    3d70:	80 2f       	mov	r24, r16
    3d72:	0f 90       	pop	r0
    3d74:	df 91       	pop	r29
    3d76:	cf 91       	pop	r28
    3d78:	1f 91       	pop	r17
    3d7a:	0f 91       	pop	r16
    3d7c:	ff 90       	pop	r15
    3d7e:	ef 90       	pop	r14
    3d80:	08 95       	ret

Disassembly of section .text.SDReceiveDataBlock:

000038ee <SDReceiveDataBlock>:
}

// Receives a datablock during the data phase which may take some time
static bool SDReceiveDataBlock(uint8_t *pu8Buffer,
							   uint16_t u16RXCount)
{
    38ee:	cf 92       	push	r12
    38f0:	df 92       	push	r13
    38f2:	ef 92       	push	r14
    38f4:	ff 92       	push	r15
    38f6:	0f 93       	push	r16
    38f8:	1f 93       	push	r17
    38fa:	cf 93       	push	r28
    38fc:	df 93       	push	r29
    38fe:	0f 92       	push	r0
    3900:	cd b7       	in	r28, 0x3d	; 61
    3902:	de b7       	in	r29, 0x3e	; 62
    3904:	7c 01       	movw	r14, r24
    3906:	6b 01       	movw	r12, r22
	uint8_t u8Response;
	uint16_t u16Count = 4096;
    3908:	00 e0       	ldi	r16, 0x00	; 0
    390a:	10 e1       	ldi	r17, 0x10	; 16
    390c:	01 c0       	rjmp	.+2      	; 0x3910 <SDReceiveDataBlock+0x22>
	{
		SPIRead(&u8Response,
				sizeof(u8Response));
	} 
	while ((u8Response != SD_START_TOKEN) &&
		   (u16Count--));
    390e:	89 01       	movw	r16, r18
	uint16_t u16Count = 4096;
	
	// Wait for response token
	do 
	{
		SPIRead(&u8Response,
    3910:	41 e0       	ldi	r20, 0x01	; 1
    3912:	50 e0       	ldi	r21, 0x00	; 0
    3914:	be 01       	movw	r22, r28
    3916:	6f 5f       	subi	r22, 0xFF	; 255
    3918:	7f 4f       	sbci	r23, 0xFF	; 255
    391a:	83 e0       	ldi	r24, 0x03	; 3
    391c:	0e 94 cc 20 	call	0x4198	; 0x4198 <SPITransaction>
				sizeof(u8Response));
	} 
	while ((u8Response != SD_START_TOKEN) &&
    3920:	89 81       	ldd	r24, Y+1	; 0x01
		   (u16Count--));
    3922:	8e 3f       	cpi	r24, 0xFE	; 254
    3924:	29 f0       	breq	.+10     	; 0x3930 <SDReceiveDataBlock+0x42>
    3926:	98 01       	movw	r18, r16
    3928:	21 50       	subi	r18, 0x01	; 1
    392a:	31 09       	sbc	r19, r1
	do 
	{
		SPIRead(&u8Response,
				sizeof(u8Response));
	} 
	while ((u8Response != SD_START_TOKEN) &&
    392c:	01 2b       	or	r16, r17
    392e:	79 f7       	brne	.-34     	; 0x390e <SDReceiveDataBlock+0x20>
		   (u16Count--));
		   
	if (u8Response != SD_START_TOKEN)
    3930:	8e 3f       	cpi	r24, 0xFE	; 254
    3932:	b9 f4       	brne	.+46     	; 0x3962 <SDReceiveDataBlock+0x74>
	{
		return(false);
	}
	
	// Start of data. Pull it down.
	SPIRead(pu8Buffer,
    3934:	a6 01       	movw	r20, r12
    3936:	b7 01       	movw	r22, r14
    3938:	83 e0       	ldi	r24, 0x03	; 3
    393a:	0e 94 cc 20 	call	0x4198	; 0x4198 <SPITransaction>
			u16RXCount);
			
	// Discard CRC
	SPIRead(&u8Response,
    393e:	41 e0       	ldi	r20, 0x01	; 1
    3940:	50 e0       	ldi	r21, 0x00	; 0
    3942:	be 01       	movw	r22, r28
    3944:	6f 5f       	subi	r22, 0xFF	; 255
    3946:	7f 4f       	sbci	r23, 0xFF	; 255
    3948:	83 e0       	ldi	r24, 0x03	; 3
    394a:	0e 94 cc 20 	call	0x4198	; 0x4198 <SPITransaction>
			sizeof(u8Response));
	SPIRead(&u8Response,
    394e:	41 e0       	ldi	r20, 0x01	; 1
    3950:	50 e0       	ldi	r21, 0x00	; 0
    3952:	be 01       	movw	r22, r28
    3954:	6f 5f       	subi	r22, 0xFF	; 255
    3956:	7f 4f       	sbci	r23, 0xFF	; 255
    3958:	83 e0       	ldi	r24, 0x03	; 3
    395a:	0e 94 cc 20 	call	0x4198	; 0x4198 <SPITransaction>
			sizeof(u8Response));
	return(true);			   
    395e:	81 e0       	ldi	r24, 0x01	; 1
    3960:	01 c0       	rjmp	.+2      	; 0x3964 <SDReceiveDataBlock+0x76>
	while ((u8Response != SD_START_TOKEN) &&
		   (u16Count--));
		   
	if (u8Response != SD_START_TOKEN)
	{
		return(false);
    3962:	80 e0       	ldi	r24, 0x00	; 0
	SPIRead(&u8Response,
			sizeof(u8Response));
	SPIRead(&u8Response,
			sizeof(u8Response));
	return(true);			   
}
    3964:	0f 90       	pop	r0
    3966:	df 91       	pop	r29
    3968:	cf 91       	pop	r28
    396a:	1f 91       	pop	r17
    396c:	0f 91       	pop	r16
    396e:	ff 90       	pop	r15
    3970:	ef 90       	pop	r14
    3972:	df 90       	pop	r13
    3974:	cf 90       	pop	r12
    3976:	08 95       	ret

Disassembly of section .text.SDTransmitDataBlock:

00003264 <SDTransmitDataBlock>:

// Transmits a datablock during the data phase which may take some time
static bool SDTransmitDataBlock(uint8_t *pu8Buffer,
							    uint16_t u16TXCount,
								uint8_t u8DataPhaseToken)
{
    3264:	ef 92       	push	r14
    3266:	ff 92       	push	r15
    3268:	0f 93       	push	r16
    326a:	1f 93       	push	r17
    326c:	cf 93       	push	r28
    326e:	df 93       	push	r29
    3270:	00 d0       	rcall	.+0      	; 0x3272 <SDTransmitDataBlock+0xe>
    3272:	cd b7       	in	r28, 0x3d	; 61
    3274:	de b7       	in	r29, 0x3e	; 62
    3276:	8c 01       	movw	r16, r24
    3278:	7b 01       	movw	r14, r22
    327a:	4a 83       	std	Y+2, r20	; 0x02
	uint8_t u8Response;
	uint16_t u16Attempts;
	bool bResult = true;

	// Send the data phase token (whatever it is)
	SPIWrite(&u8DataPhaseToken,
    327c:	41 e0       	ldi	r20, 0x01	; 1
    327e:	50 e0       	ldi	r21, 0x00	; 0
    3280:	be 01       	movw	r22, r28
    3282:	6e 5f       	subi	r22, 0xFE	; 254
    3284:	7f 4f       	sbci	r23, 0xFF	; 255
    3286:	81 e0       	ldi	r24, 0x01	; 1
    3288:	0e 94 cc 20 	call	0x4198	; 0x4198 <SPITransaction>
			 sizeof(u8DataPhaseToken));
	
	if (u8DataPhaseToken != SD_STOP_TRANSACTION)
    328c:	8a 81       	ldd	r24, Y+2	; 0x02
    328e:	8d 3f       	cpi	r24, 0xFD	; 253
    3290:	e1 f1       	breq	.+120    	; 0x330a <SDTransmitDataBlock+0xa6>
	{
		// As long as we're not stopping a transaction, we're writing data
		SPIWrite(pu8Buffer,
    3292:	a7 01       	movw	r20, r14
    3294:	b8 01       	movw	r22, r16
    3296:	81 e0       	ldi	r24, 0x01	; 1
    3298:	0e 94 cc 20 	call	0x4198	; 0x4198 <SPITransaction>
				 u16TXCount);
				 
		// Wait for acceptance of the sector
		u16Attempts = 0;
    329c:	00 e0       	ldi	r16, 0x00	; 0
    329e:	10 e0       	ldi	r17, 0x00	; 0
		while (u16Attempts < SD_MAX_WRITE_ATTEMPTS)
    32a0:	0d c0       	rjmp	.+26     	; 0x32bc <SDTransmitDataBlock+0x58>
		{
			// Get some data
			SPIRead(&u8Response,
    32a2:	41 e0       	ldi	r20, 0x01	; 1
    32a4:	50 e0       	ldi	r21, 0x00	; 0
    32a6:	be 01       	movw	r22, r28
    32a8:	6f 5f       	subi	r22, 0xFF	; 255
    32aa:	7f 4f       	sbci	r23, 0xFF	; 255
    32ac:	83 e0       	ldi	r24, 0x03	; 3
    32ae:	0e 94 cc 20 	call	0x4198	; 0x4198 <SPITransaction>
					sizeof(u8Response));
			if (u8Response != 0xff)
    32b2:	89 81       	ldd	r24, Y+1	; 0x01
    32b4:	8f 3f       	cpi	r24, 0xFF	; 255
    32b6:	31 f4       	brne	.+12     	; 0x32c4 <SDTransmitDataBlock+0x60>
			{
				break;
			}
				
			++u16Attempts;
    32b8:	0f 5f       	subi	r16, 0xFF	; 255
    32ba:	1f 4f       	sbci	r17, 0xFF	; 255
		SPIWrite(pu8Buffer,
				 u16TXCount);
				 
		// Wait for acceptance of the sector
		u16Attempts = 0;
		while (u16Attempts < SD_MAX_WRITE_ATTEMPTS)
    32bc:	0e 39       	cpi	r16, 0x9E	; 158
    32be:	88 e9       	ldi	r24, 0x98	; 152
    32c0:	18 07       	cpc	r17, r24
    32c2:	78 f3       	brcs	.-34     	; 0x32a2 <SDTransmitDataBlock+0x3e>
				
			++u16Attempts;
		}
			
		// We've timed out or else the card is dead
		if (SD_MAX_WRITE_ATTEMPTS == u16Attempts)
    32c4:	0e 39       	cpi	r16, 0x9E	; 158
    32c6:	18 49       	sbci	r17, 0x98	; 152
    32c8:	11 f1       	breq	.+68     	; 0x330e <SDTransmitDataBlock+0xaa>
			bResult = false;
			goto errorExit;
		}
			
		// See if the data was accepted
		u8Response &= 0x1f;
    32ca:	89 81       	ldd	r24, Y+1	; 0x01
    32cc:	8f 71       	andi	r24, 0x1F	; 31
    32ce:	89 83       	std	Y+1, r24	; 0x01
		if (0x05 == u8Response)
    32d0:	85 30       	cpi	r24, 0x05	; 5
    32d2:	81 f0       	breq	.+32     	; 0x32f4 <SDTransmitDataBlock+0x90>
			// Success!
		}
		else
		{
			// Sector not accepted
			bResult = false;
    32d4:	80 e0       	ldi	r24, 0x00	; 0
    32d6:	1e c0       	rjmp	.+60     	; 0x3314 <SDTransmitDataBlock+0xb0>
			// Wait for the write to finish
			u16Attempts = 0;
			while (u16Attempts < SD_MAX_WRITE_ATTEMPTS)
			{
				// Wait for the card to accept writing the sector
				SPIRead(&u8Response,
    32d8:	41 e0       	ldi	r20, 0x01	; 1
    32da:	50 e0       	ldi	r21, 0x00	; 0
    32dc:	be 01       	movw	r22, r28
    32de:	6f 5f       	subi	r22, 0xFF	; 255
    32e0:	7f 4f       	sbci	r23, 0xFF	; 255
    32e2:	83 e0       	ldi	r24, 0x03	; 3
    32e4:	0e 94 cc 20 	call	0x4198	; 0x4198 <SPITransaction>
						sizeof(u8Response));
				if (u8Response)
    32e8:	89 81       	ldd	r24, Y+1	; 0x01
    32ea:	81 11       	cpse	r24, r1
    32ec:	09 c0       	rjmp	.+18     	; 0x3300 <SDTransmitDataBlock+0x9c>
				{
					break;
				}
					
				++u16Attempts;
    32ee:	0f 5f       	subi	r16, 0xFF	; 255
    32f0:	1f 4f       	sbci	r17, 0xFF	; 255
    32f2:	02 c0       	rjmp	.+4      	; 0x32f8 <SDTransmitDataBlock+0x94>
    32f4:	00 e0       	ldi	r16, 0x00	; 0
    32f6:	10 e0       	ldi	r17, 0x00	; 0
		u8Response &= 0x1f;
		if (0x05 == u8Response)
		{
			// Wait for the write to finish
			u16Attempts = 0;
			while (u16Attempts < SD_MAX_WRITE_ATTEMPTS)
    32f8:	0e 39       	cpi	r16, 0x9E	; 158
    32fa:	88 e9       	ldi	r24, 0x98	; 152
    32fc:	18 07       	cpc	r17, r24
    32fe:	60 f3       	brcs	.-40     	; 0x32d8 <SDTransmitDataBlock+0x74>
				}
					
				++u16Attempts;
			}
				
			if (SD_MAX_WRITE_ATTEMPTS == u16Attempts)
    3300:	0e 39       	cpi	r16, 0x9E	; 158
    3302:	18 49       	sbci	r17, 0x98	; 152
    3304:	31 f0       	breq	.+12     	; 0x3312 <SDTransmitDataBlock+0xae>
							    uint16_t u16TXCount,
								uint8_t u8DataPhaseToken)
{
	uint8_t u8Response;
	uint16_t u16Attempts;
	bool bResult = true;
    3306:	81 e0       	ldi	r24, 0x01	; 1
    3308:	05 c0       	rjmp	.+10     	; 0x3314 <SDTransmitDataBlock+0xb0>
    330a:	81 e0       	ldi	r24, 0x01	; 1
    330c:	03 c0       	rjmp	.+6      	; 0x3314 <SDTransmitDataBlock+0xb0>
		}
			
		// We've timed out or else the card is dead
		if (SD_MAX_WRITE_ATTEMPTS == u16Attempts)
		{
			bResult = false;
    330e:	80 e0       	ldi	r24, 0x00	; 0
    3310:	01 c0       	rjmp	.+2      	; 0x3314 <SDTransmitDataBlock+0xb0>
				++u16Attempts;
			}
				
			if (SD_MAX_WRITE_ATTEMPTS == u16Attempts)
			{
				bResult = false;
    3312:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	
errorExit:
	return(bResult);
}
    3314:	0f 90       	pop	r0
    3316:	0f 90       	pop	r0
    3318:	df 91       	pop	r29
    331a:	cf 91       	pop	r28
    331c:	1f 91       	pop	r17
    331e:	0f 91       	pop	r16
    3320:	ff 90       	pop	r15
    3322:	ef 90       	pop	r14
    3324:	08 95       	ret

Disassembly of section .text.SDInit:

000021a0 <SDInit>:

bool SDGetBlockSize(uint32_t *pu32BlockSize)
{
	*pu32BlockSize = sg_u16BlockSize;
	return(true);
}
    21a0:	1f 93       	push	r17
    21a2:	cf 93       	push	r28
    21a4:	df 93       	push	r29
    21a6:	00 d0       	rcall	.+0      	; 0x21a8 <SDInit+0x8>
    21a8:	00 d0       	rcall	.+0      	; 0x21aa <SDInit+0xa>
    21aa:	0f 92       	push	r0
    21ac:	cd b7       	in	r28, 0x3d	; 61
    21ae:	de b7       	in	r29, 0x3e	; 62
    21b0:	87 b1       	in	r24, 0x07	; 7
    21b2:	80 64       	ori	r24, 0x40	; 64
    21b4:	87 b9       	out	0x07, r24	; 7
    21b6:	88 b1       	in	r24, 0x08	; 8
    21b8:	80 64       	ori	r24, 0x40	; 64
    21ba:	88 b9       	out	0x08, r24	; 8
    21bc:	88 b1       	in	r24, 0x08	; 8
    21be:	80 64       	ori	r24, 0x40	; 64
    21c0:	88 b9       	out	0x08, r24	; 8
    21c2:	0e 94 ed 24 	call	0x49da	; 0x49da <SPIInit>
    21c6:	0e 94 5f 23 	call	0x46be	; 0x46be <SDPowerup>
    21ca:	10 e0       	ldi	r17, 0x00	; 0
    21cc:	0d c0       	rjmp	.+26     	; 0x21e8 <SDInit+0x48>
    21ce:	ce 01       	movw	r24, r28
    21d0:	01 96       	adiw	r24, 0x01	; 1
    21d2:	0e 94 e3 26 	call	0x4dc6	; 0x4dc6 <SDGoIdle>
    21d6:	81 30       	cpi	r24, 0x01	; 1
    21d8:	49 f0       	breq	.+18     	; 0x21ec <SDInit+0x4c>
    21da:	60 e1       	ldi	r22, 0x10	; 16
    21dc:	77 e2       	ldi	r23, 0x27	; 39
    21de:	80 e0       	ldi	r24, 0x00	; 0
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <Delay>
    21e6:	1f 5f       	subi	r17, 0xFF	; 255
    21e8:	14 36       	cpi	r17, 0x64	; 100
    21ea:	88 f3       	brcs	.-30     	; 0x21ce <SDInit+0x2e>
    21ec:	14 36       	cpi	r17, 0x64	; 100
    21ee:	09 f4       	brne	.+2      	; 0x21f2 <SDInit+0x52>
    21f0:	76 c0       	rjmp	.+236    	; 0x22de <SDInit+0x13e>
    21f2:	ce 01       	movw	r24, r28
    21f4:	01 96       	adiw	r24, 0x01	; 1
    21f6:	25 e0       	ldi	r18, 0x05	; 5
    21f8:	fc 01       	movw	r30, r24
    21fa:	11 92       	st	Z+, r1
    21fc:	2a 95       	dec	r18
    21fe:	e9 f7       	brne	.-6      	; 0x21fa <SDInit+0x5a>
    2200:	0e 94 02 24 	call	0x4804	; 0x4804 <SDSendInterfaceCondition>
    2204:	81 30       	cpi	r24, 0x01	; 1
    2206:	09 f0       	breq	.+2      	; 0x220a <SDInit+0x6a>
    2208:	5e c0       	rjmp	.+188    	; 0x22c6 <SDInit+0x126>
    220a:	8c 81       	ldd	r24, Y+4	; 0x04
    220c:	8a 3a       	cpi	r24, 0xAA	; 170
    220e:	09 f0       	breq	.+2      	; 0x2212 <SDInit+0x72>
    2210:	68 c0       	rjmp	.+208    	; 0x22e2 <SDInit+0x142>
    2212:	40 e0       	ldi	r20, 0x00	; 0
    2214:	50 e0       	ldi	r21, 0x00	; 0
    2216:	60 e0       	ldi	r22, 0x00	; 0
    2218:	70 e4       	ldi	r23, 0x40	; 64
    221a:	ce 01       	movw	r24, r28
    221c:	01 96       	adiw	r24, 0x01	; 1
    221e:	0e 94 24 21 	call	0x4248	; 0x4248 <SDSendOpConditionArg>
    2222:	81 11       	cpse	r24, r1
    2224:	60 c0       	rjmp	.+192    	; 0x22e6 <SDInit+0x146>
    2226:	ce 01       	movw	r24, r28
    2228:	01 96       	adiw	r24, 0x01	; 1
    222a:	0e 94 1c 24 	call	0x4838	; 0x4838 <SDReadOCR>
    222e:	88 23       	and	r24, r24
    2230:	0c f4       	brge	.+2      	; 0x2234 <SDInit+0x94>
    2232:	5b c0       	rjmp	.+182    	; 0x22ea <SDInit+0x14a>
    2234:	81 e3       	ldi	r24, 0x31	; 49
    2236:	99 e0       	ldi	r25, 0x09	; 9
    2238:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <SDReadCSD>
    223c:	88 23       	and	r24, r24
    223e:	0c f4       	brge	.+2      	; 0x2242 <SDInit+0xa2>
    2240:	56 c0       	rjmp	.+172    	; 0x22ee <SDInit+0x14e>
    2242:	e1 e3       	ldi	r30, 0x31	; 49
    2244:	f9 e0       	ldi	r31, 0x09	; 9
    2246:	87 81       	ldd	r24, Z+7	; 0x07
    2248:	8f 73       	andi	r24, 0x3F	; 63
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	a0 e0       	ldi	r26, 0x00	; 0
    224e:	b0 e0       	ldi	r27, 0x00	; 0
    2250:	bc 01       	movw	r22, r24
    2252:	55 27       	eor	r21, r21
    2254:	44 27       	eor	r20, r20
    2256:	90 85       	ldd	r25, Z+8	; 0x08
    2258:	89 2f       	mov	r24, r25
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	a0 e0       	ldi	r26, 0x00	; 0
    225e:	b0 e0       	ldi	r27, 0x00	; 0
    2260:	ba 2f       	mov	r27, r26
    2262:	a9 2f       	mov	r26, r25
    2264:	98 2f       	mov	r25, r24
    2266:	88 27       	eor	r24, r24
    2268:	84 2b       	or	r24, r20
    226a:	95 2b       	or	r25, r21
    226c:	a6 2b       	or	r26, r22
    226e:	b7 2b       	or	r27, r23
    2270:	21 85       	ldd	r18, Z+9	; 0x09
    2272:	82 2b       	or	r24, r18
    2274:	01 96       	adiw	r24, 0x01	; 1
    2276:	a1 1d       	adc	r26, r1
    2278:	b1 1d       	adc	r27, r1
    227a:	07 2e       	mov	r0, r23
    227c:	7a e0       	ldi	r23, 0x0A	; 10
    227e:	88 0f       	add	r24, r24
    2280:	99 1f       	adc	r25, r25
    2282:	aa 1f       	adc	r26, r26
    2284:	bb 1f       	adc	r27, r27
    2286:	7a 95       	dec	r23
    2288:	d1 f7       	brne	.-12     	; 0x227e <SDInit+0xde>
    228a:	70 2d       	mov	r23, r0
    228c:	80 93 58 09 	sts	0x0958, r24	; 0x800958 <sg_u32SDSectorCount>
    2290:	90 93 59 09 	sts	0x0959, r25	; 0x800959 <sg_u32SDSectorCount+0x1>
    2294:	a0 93 5a 09 	sts	0x095A, r26	; 0x80095a <sg_u32SDSectorCount+0x2>
    2298:	b0 93 5b 09 	sts	0x095B, r27	; 0x80095b <sg_u32SDSectorCount+0x3>
    229c:	25 81       	ldd	r18, Z+5	; 0x05
    229e:	2f 70       	andi	r18, 0x0F	; 15
    22a0:	81 e0       	ldi	r24, 0x01	; 1
    22a2:	90 e0       	ldi	r25, 0x00	; 0
    22a4:	02 c0       	rjmp	.+4      	; 0x22aa <SDInit+0x10a>
    22a6:	88 0f       	add	r24, r24
    22a8:	99 1f       	adc	r25, r25
    22aa:	2a 95       	dec	r18
    22ac:	e2 f7       	brpl	.-8      	; 0x22a6 <SDInit+0x106>
    22ae:	90 93 6d 09 	sts	0x096D, r25	; 0x80096d <sg_u16BlockSize+0x1>
    22b2:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <sg_u16BlockSize>
    22b6:	60 ec       	ldi	r22, 0xC0	; 192
    22b8:	78 ed       	ldi	r23, 0xD8	; 216
    22ba:	87 ea       	ldi	r24, 0xA7	; 167
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	0e 94 08 18 	call	0x3010	; 0x3010 <SPISetBaudRate>
    22c2:	81 e0       	ldi	r24, 0x01	; 1
    22c4:	17 c0       	rjmp	.+46     	; 0x22f4 <SDInit+0x154>
    22c6:	40 e0       	ldi	r20, 0x00	; 0
    22c8:	50 e0       	ldi	r21, 0x00	; 0
    22ca:	60 e0       	ldi	r22, 0x00	; 0
    22cc:	70 e4       	ldi	r23, 0x40	; 64
    22ce:	ce 01       	movw	r24, r28
    22d0:	01 96       	adiw	r24, 0x01	; 1
    22d2:	0e 94 24 21 	call	0x4248	; 0x4248 <SDSendOpConditionArg>
    22d6:	81 11       	cpse	r24, r1
    22d8:	0c c0       	rjmp	.+24     	; 0x22f2 <SDInit+0x152>
    22da:	81 e0       	ldi	r24, 0x01	; 1
    22dc:	0b c0       	rjmp	.+22     	; 0x22f4 <SDInit+0x154>
    22de:	80 e0       	ldi	r24, 0x00	; 0
    22e0:	09 c0       	rjmp	.+18     	; 0x22f4 <SDInit+0x154>
    22e2:	80 e0       	ldi	r24, 0x00	; 0
    22e4:	07 c0       	rjmp	.+14     	; 0x22f4 <SDInit+0x154>
    22e6:	80 e0       	ldi	r24, 0x00	; 0
    22e8:	05 c0       	rjmp	.+10     	; 0x22f4 <SDInit+0x154>
    22ea:	80 e0       	ldi	r24, 0x00	; 0
    22ec:	03 c0       	rjmp	.+6      	; 0x22f4 <SDInit+0x154>
    22ee:	80 e0       	ldi	r24, 0x00	; 0
    22f0:	01 c0       	rjmp	.+2      	; 0x22f4 <SDInit+0x154>
    22f2:	80 e0       	ldi	r24, 0x00	; 0
    22f4:	0f 90       	pop	r0
    22f6:	0f 90       	pop	r0
    22f8:	0f 90       	pop	r0
    22fa:	0f 90       	pop	r0
    22fc:	0f 90       	pop	r0
    22fe:	df 91       	pop	r29
    2300:	cf 91       	pop	r28
    2302:	1f 91       	pop	r17
    2304:	08 95       	ret

Disassembly of section .text.SDRead:

00002e6c <SDRead>:

// Read one or more sectors from SD
bool SDRead(uint32_t u32Sector,
			uint8_t *pu8Buffer,
			uint32_t u32SectorCount)
{
    2e6c:	8f 92       	push	r8
    2e6e:	9f 92       	push	r9
    2e70:	af 92       	push	r10
    2e72:	bf 92       	push	r11
    2e74:	cf 92       	push	r12
    2e76:	df 92       	push	r13
    2e78:	ef 92       	push	r14
    2e7a:	ff 92       	push	r15
    2e7c:	0f 93       	push	r16
    2e7e:	1f 93       	push	r17
    2e80:	cf 93       	push	r28
    2e82:	df 93       	push	r29
    2e84:	4b 01       	movw	r8, r22
    2e86:	5c 01       	movw	r10, r24
    2e88:	ea 01       	movw	r28, r20
    2e8a:	68 01       	movw	r12, r16
    2e8c:	79 01       	movw	r14, r18
	bool bResult = false;
	
	// Pet the watchdog
	WatchdogReset();
    2e8e:	0e 94 31 28 	call	0x5062	; 0x5062 <WatchdogReset>
		
	// Assert chip select
	SDSetCS(true);
    2e92:	81 e0       	ldi	r24, 0x01	; 1
    2e94:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <SDSetCS>

	if (1 == u32SectorCount)
    2e98:	81 e0       	ldi	r24, 0x01	; 1
    2e9a:	c8 16       	cp	r12, r24
    2e9c:	d1 04       	cpc	r13, r1
    2e9e:	e1 04       	cpc	r14, r1
    2ea0:	f1 04       	cpc	r15, r1
    2ea2:	81 f4       	brne	.+32     	; 0x2ec4 <SDRead+0x58>
	{
		if (0 == SDCommand(CMD17,
    2ea4:	b5 01       	movw	r22, r10
    2ea6:	a4 01       	movw	r20, r8
    2ea8:	81 e1       	ldi	r24, 0x11	; 17
    2eaa:	0e 94 a4 1a 	call	0x3548	; 0x3548 <SDCommand>
    2eae:	81 11       	cpse	r24, r1
    2eb0:	35 c0       	rjmp	.+106    	; 0x2f1c <SDRead+0xb0>
						   u32Sector))
		{
			bResult = SDReceiveDataBlock(pu8Buffer,
    2eb2:	60 91 6c 09 	lds	r22, 0x096C	; 0x80096c <sg_u16BlockSize>
    2eb6:	70 91 6d 09 	lds	r23, 0x096D	; 0x80096d <sg_u16BlockSize+0x1>
    2eba:	ce 01       	movw	r24, r28
    2ebc:	0e 94 77 1c 	call	0x38ee	; 0x38ee <SDReceiveDataBlock>
    2ec0:	18 2f       	mov	r17, r24
    2ec2:	2f c0       	rjmp	.+94     	; 0x2f22 <SDRead+0xb6>
		}
	}
	else
	{
		// Multisector
		if (0 == SDCommand(CMD18,
    2ec4:	b5 01       	movw	r22, r10
    2ec6:	a4 01       	movw	r20, r8
    2ec8:	82 e1       	ldi	r24, 0x12	; 18
    2eca:	0e 94 a4 1a 	call	0x3548	; 0x3548 <SDCommand>
    2ece:	88 23       	and	r24, r24
    2ed0:	19 f0       	breq	.+6      	; 0x2ed8 <SDRead+0x6c>
    2ed2:	26 c0       	rjmp	.+76     	; 0x2f20 <SDRead+0xb4>
				WatchdogReset();
				
				pu8Buffer += sg_u16BlockSize;
			} 
			while ((bResult) &&
				   (u32SectorCount--));
    2ed4:	6c 01       	movw	r12, r24
    2ed6:	7d 01       	movw	r14, r26
		if (0 == SDCommand(CMD18,
						   u32Sector))
		{
			do 
			{
				bResult = SDReceiveDataBlock(pu8Buffer,
    2ed8:	60 91 6c 09 	lds	r22, 0x096C	; 0x80096c <sg_u16BlockSize>
    2edc:	70 91 6d 09 	lds	r23, 0x096D	; 0x80096d <sg_u16BlockSize+0x1>
    2ee0:	ce 01       	movw	r24, r28
    2ee2:	0e 94 77 1c 	call	0x38ee	; 0x38ee <SDReceiveDataBlock>
    2ee6:	18 2f       	mov	r17, r24
							 				 sg_u16BlockSize);
				// Pet the watchdog
				WatchdogReset();
    2ee8:	0e 94 31 28 	call	0x5062	; 0x5062 <WatchdogReset>
				
				pu8Buffer += sg_u16BlockSize;
    2eec:	80 91 6c 09 	lds	r24, 0x096C	; 0x80096c <sg_u16BlockSize>
    2ef0:	90 91 6d 09 	lds	r25, 0x096D	; 0x80096d <sg_u16BlockSize+0x1>
    2ef4:	c8 0f       	add	r28, r24
    2ef6:	d9 1f       	adc	r29, r25
			} 
			while ((bResult) &&
				   (u32SectorCount--));
    2ef8:	11 23       	and	r17, r17
    2efa:	49 f0       	breq	.+18     	; 0x2f0e <SDRead+0xa2>
    2efc:	d7 01       	movw	r26, r14
    2efe:	c6 01       	movw	r24, r12
    2f00:	01 97       	sbiw	r24, 0x01	; 1
    2f02:	a1 09       	sbc	r26, r1
    2f04:	b1 09       	sbc	r27, r1
				// Pet the watchdog
				WatchdogReset();
				
				pu8Buffer += sg_u16BlockSize;
			} 
			while ((bResult) &&
    2f06:	cd 28       	or	r12, r13
    2f08:	ce 28       	or	r12, r14
    2f0a:	cf 28       	or	r12, r15
    2f0c:	19 f7       	brne	.-58     	; 0x2ed4 <SDRead+0x68>
				   (u32SectorCount--));
				   
			// Regardless, send a stop command
			(void) SDCommand(CMD12,
    2f0e:	40 e0       	ldi	r20, 0x00	; 0
    2f10:	50 e0       	ldi	r21, 0x00	; 0
    2f12:	ba 01       	movw	r22, r20
    2f14:	8c e0       	ldi	r24, 0x0C	; 12
    2f16:	0e 94 a4 1a 	call	0x3548	; 0x3548 <SDCommand>
    2f1a:	03 c0       	rjmp	.+6      	; 0x2f22 <SDRead+0xb6>
// Read one or more sectors from SD
bool SDRead(uint32_t u32Sector,
			uint8_t *pu8Buffer,
			uint32_t u32SectorCount)
{
	bool bResult = false;
    2f1c:	10 e0       	ldi	r17, 0x00	; 0
    2f1e:	01 c0       	rjmp	.+2      	; 0x2f22 <SDRead+0xb6>
    2f20:	10 e0       	ldi	r17, 0x00	; 0
		{
			// Failed
		}
	}
	
	SDSetCS(false);
    2f22:	80 e0       	ldi	r24, 0x00	; 0
    2f24:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <SDSetCS>

	return(bResult);
}
    2f28:	81 2f       	mov	r24, r17
    2f2a:	df 91       	pop	r29
    2f2c:	cf 91       	pop	r28
    2f2e:	1f 91       	pop	r17
    2f30:	0f 91       	pop	r16
    2f32:	ff 90       	pop	r15
    2f34:	ef 90       	pop	r14
    2f36:	df 90       	pop	r13
    2f38:	cf 90       	pop	r12
    2f3a:	bf 90       	pop	r11
    2f3c:	af 90       	pop	r10
    2f3e:	9f 90       	pop	r9
    2f40:	8f 90       	pop	r8
    2f42:	08 95       	ret

Disassembly of section .text.SDWrite:

00002cb4 <SDWrite>:

bool SDGetBlockSize(uint32_t *pu32BlockSize)
{
	*pu32BlockSize = sg_u16BlockSize;
	return(true);
}
    2cb4:	8f 92       	push	r8
    2cb6:	9f 92       	push	r9
    2cb8:	af 92       	push	r10
    2cba:	bf 92       	push	r11
    2cbc:	cf 92       	push	r12
    2cbe:	df 92       	push	r13
    2cc0:	ef 92       	push	r14
    2cc2:	ff 92       	push	r15
    2cc4:	0f 93       	push	r16
    2cc6:	1f 93       	push	r17
    2cc8:	cf 93       	push	r28
    2cca:	df 93       	push	r29
    2ccc:	4b 01       	movw	r8, r22
    2cce:	5c 01       	movw	r10, r24
    2cd0:	ea 01       	movw	r28, r20
    2cd2:	68 01       	movw	r12, r16
    2cd4:	79 01       	movw	r14, r18
    2cd6:	0e 94 31 28 	call	0x5062	; 0x5062 <WatchdogReset>
    2cda:	81 e0       	ldi	r24, 0x01	; 1
    2cdc:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <SDSetCS>
    2ce0:	81 e0       	ldi	r24, 0x01	; 1
    2ce2:	c8 16       	cp	r12, r24
    2ce4:	d1 04       	cpc	r13, r1
    2ce6:	e1 04       	cpc	r14, r1
    2ce8:	f1 04       	cpc	r15, r1
    2cea:	89 f4       	brne	.+34     	; 0x2d0e <SDWrite+0x5a>
    2cec:	b5 01       	movw	r22, r10
    2cee:	a4 01       	movw	r20, r8
    2cf0:	88 e1       	ldi	r24, 0x18	; 24
    2cf2:	0e 94 a4 1a 	call	0x3548	; 0x3548 <SDCommand>
    2cf6:	81 11       	cpse	r24, r1
    2cf8:	37 c0       	rjmp	.+110    	; 0x2d68 <SDWrite+0xb4>
    2cfa:	60 91 6c 09 	lds	r22, 0x096C	; 0x80096c <sg_u16BlockSize>
    2cfe:	70 91 6d 09 	lds	r23, 0x096D	; 0x80096d <sg_u16BlockSize+0x1>
    2d02:	4e ef       	ldi	r20, 0xFE	; 254
    2d04:	ce 01       	movw	r24, r28
    2d06:	0e 94 32 19 	call	0x3264	; 0x3264 <SDTransmitDataBlock>
    2d0a:	18 2f       	mov	r17, r24
    2d0c:	30 c0       	rjmp	.+96     	; 0x2d6e <SDWrite+0xba>
    2d0e:	b5 01       	movw	r22, r10
    2d10:	a4 01       	movw	r20, r8
    2d12:	89 e1       	ldi	r24, 0x19	; 25
    2d14:	0e 94 a4 1a 	call	0x3548	; 0x3548 <SDCommand>
    2d18:	88 23       	and	r24, r24
    2d1a:	19 f0       	breq	.+6      	; 0x2d22 <SDWrite+0x6e>
    2d1c:	27 c0       	rjmp	.+78     	; 0x2d6c <SDWrite+0xb8>
    2d1e:	6c 01       	movw	r12, r24
    2d20:	7d 01       	movw	r14, r26
    2d22:	60 91 6c 09 	lds	r22, 0x096C	; 0x80096c <sg_u16BlockSize>
    2d26:	70 91 6d 09 	lds	r23, 0x096D	; 0x80096d <sg_u16BlockSize+0x1>
    2d2a:	4c ef       	ldi	r20, 0xFC	; 252
    2d2c:	ce 01       	movw	r24, r28
    2d2e:	0e 94 32 19 	call	0x3264	; 0x3264 <SDTransmitDataBlock>
    2d32:	18 2f       	mov	r17, r24
    2d34:	0e 94 31 28 	call	0x5062	; 0x5062 <WatchdogReset>
    2d38:	80 91 6c 09 	lds	r24, 0x096C	; 0x80096c <sg_u16BlockSize>
    2d3c:	90 91 6d 09 	lds	r25, 0x096D	; 0x80096d <sg_u16BlockSize+0x1>
    2d40:	c8 0f       	add	r28, r24
    2d42:	d9 1f       	adc	r29, r25
    2d44:	11 23       	and	r17, r17
    2d46:	49 f0       	breq	.+18     	; 0x2d5a <SDWrite+0xa6>
    2d48:	d7 01       	movw	r26, r14
    2d4a:	c6 01       	movw	r24, r12
    2d4c:	01 97       	sbiw	r24, 0x01	; 1
    2d4e:	a1 09       	sbc	r26, r1
    2d50:	b1 09       	sbc	r27, r1
    2d52:	cd 28       	or	r12, r13
    2d54:	ce 28       	or	r12, r14
    2d56:	cf 28       	or	r12, r15
    2d58:	11 f7       	brne	.-60     	; 0x2d1e <SDWrite+0x6a>
    2d5a:	40 e0       	ldi	r20, 0x00	; 0
    2d5c:	50 e0       	ldi	r21, 0x00	; 0
    2d5e:	ba 01       	movw	r22, r20
    2d60:	8c e0       	ldi	r24, 0x0C	; 12
    2d62:	0e 94 a4 1a 	call	0x3548	; 0x3548 <SDCommand>
    2d66:	03 c0       	rjmp	.+6      	; 0x2d6e <SDWrite+0xba>
    2d68:	10 e0       	ldi	r17, 0x00	; 0
    2d6a:	01 c0       	rjmp	.+2      	; 0x2d6e <SDWrite+0xba>
    2d6c:	10 e0       	ldi	r17, 0x00	; 0
    2d6e:	80 e0       	ldi	r24, 0x00	; 0
    2d70:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <SDSetCS>
    2d74:	81 2f       	mov	r24, r17
    2d76:	df 91       	pop	r29
    2d78:	cf 91       	pop	r28
    2d7a:	1f 91       	pop	r17
    2d7c:	0f 91       	pop	r16
    2d7e:	ff 90       	pop	r15
    2d80:	ef 90       	pop	r14
    2d82:	df 90       	pop	r13
    2d84:	cf 90       	pop	r12
    2d86:	bf 90       	pop	r11
    2d88:	af 90       	pop	r10
    2d8a:	9f 90       	pop	r9
    2d8c:	8f 90       	pop	r8
    2d8e:	08 95       	ret

Disassembly of section .text.SPITransaction:

00004198 <SPITransaction>:

// Do a SPI transaction - read or write (or write pattern)
void SPITransaction(ESPIBusState eSPIBusState,
					uint8_t *pu8Buffer,
					uint16_t u16ByteCount)
{
    4198:	fb 01       	movw	r30, r22
	// If we're transmitting, start the transaction
	if (ESTATE_RX_DATA == eSPIBusState)
    419a:	83 30       	cpi	r24, 0x03	; 3
    419c:	71 f4       	brne	.+28     	; 0x41ba <SPITransaction+0x22>
    419e:	08 c0       	rjmp	.+16     	; 0x41b0 <SPITransaction+0x18>
	{
		while (u16ByteCount--)
		{
			// Clock out 0xff so we can receive the data
			SPDR = 0xff;
    41a0:	2f ef       	ldi	r18, 0xFF	; 255
    41a2:	2e bd       	out	0x2e, r18	; 46

			// Wait for data to be available
			while (0 == (SPSR & (1 << SPIF)));
    41a4:	0d b4       	in	r0, 0x2d	; 45
    41a6:	07 fe       	sbrs	r0, 7
    41a8:	fd cf       	rjmp	.-6      	; 0x41a4 <SPITransaction+0xc>
			
			// Read the byte
			*pu8Buffer = SPDR;
    41aa:	2e b5       	in	r18, 0x2e	; 46
    41ac:	21 93       	st	Z+, r18
					uint16_t u16ByteCount)
{
	// If we're transmitting, start the transaction
	if (ESTATE_RX_DATA == eSPIBusState)
	{
		while (u16ByteCount--)
    41ae:	ac 01       	movw	r20, r24
    41b0:	ca 01       	movw	r24, r20
    41b2:	01 97       	sbiw	r24, 0x01	; 1
    41b4:	45 2b       	or	r20, r21
    41b6:	a1 f7       	brne	.-24     	; 0x41a0 <SPITransaction+0x8>
    41b8:	08 95       	ret
			*pu8Buffer = SPDR;
			++pu8Buffer;
		}
	}
	else
	if (ESTATE_TX_DATA == eSPIBusState)
    41ba:	81 30       	cpi	r24, 0x01	; 1
    41bc:	61 f4       	brne	.+24     	; 0x41d6 <SPITransaction+0x3e>
    41be:	06 c0       	rjmp	.+12     	; 0x41cc <SPITransaction+0x34>
	{
		// Clock out whatever our data is in our queue
		while (u16ByteCount--)
		{
			SPDR = *pu8Buffer;
    41c0:	21 91       	ld	r18, Z+
    41c2:	2e bd       	out	0x2e, r18	; 46
			++pu8Buffer;
			
			// Wait for the transmit to complete
			while (0 == (SPSR & (1 << SPIF)));
    41c4:	0d b4       	in	r0, 0x2d	; 45
    41c6:	07 fe       	sbrs	r0, 7
    41c8:	fd cf       	rjmp	.-6      	; 0x41c4 <SPITransaction+0x2c>
	}
	else
	if (ESTATE_TX_DATA == eSPIBusState)
	{
		// Clock out whatever our data is in our queue
		while (u16ByteCount--)
    41ca:	ac 01       	movw	r20, r24
    41cc:	ca 01       	movw	r24, r20
    41ce:	01 97       	sbiw	r24, 0x01	; 1
    41d0:	45 2b       	or	r20, r21
    41d2:	b1 f7       	brne	.-20     	; 0x41c0 <SPITransaction+0x28>
    41d4:	08 95       	ret
			// Wait for the transmit to complete
			while (0 == (SPSR & (1 << SPIF)));
		}
	}
	else
	if (ESTATE_TX_PATTERN == eSPIBusState)
    41d6:	82 30       	cpi	r24, 0x02	; 2
    41d8:	51 f4       	brne	.+20     	; 0x41ee <SPITransaction+0x56>
    41da:	05 c0       	rjmp	.+10     	; 0x41e6 <SPITransaction+0x4e>
		// Clock out whatever our data is in our queue
		while (u16ByteCount--)
		{
			// This is OK - as the position where the pointer would normally
			// be is just the pattern (single byte)
			SPDR = (uint8_t) (pu8Buffer);
    41dc:	ee bd       	out	0x2e, r30	; 46
		
			// Wait for the transmit to complete
			while (0 == (SPSR & (1 << SPIF)));
    41de:	0d b4       	in	r0, 0x2d	; 45
    41e0:	07 fe       	sbrs	r0, 7
    41e2:	fd cf       	rjmp	.-6      	; 0x41de <SPITransaction+0x46>
	}
	else
	if (ESTATE_TX_PATTERN == eSPIBusState)
	{
		// Clock out whatever our data is in our queue
		while (u16ByteCount--)
    41e4:	ac 01       	movw	r20, r24
    41e6:	ca 01       	movw	r24, r20
    41e8:	01 97       	sbiw	r24, 0x01	; 1
    41ea:	45 2b       	or	r20, r21
    41ec:	b9 f7       	brne	.-18     	; 0x41dc <SPITransaction+0x44>
    41ee:	08 95       	ret

Disassembly of section .text.SPISetBaudRate:

00003010 <SPISetBaudRate>:
	{FCLKIO >> 7,	(1 << SPR1) | (0 << SPR0),	0},					// /128
};

// Sets the SPI baud rate and returns the actual baud rate selected
uint32_t SPISetBaudRate(uint32_t u32BaudRate)
{
    3010:	cf 92       	push	r12
    3012:	df 92       	push	r13
    3014:	ef 92       	push	r14
    3016:	ff 92       	push	r15
    3018:	6b 01       	movw	r12, r22
    301a:	7c 01       	movw	r14, r24
	uint8_t u8Loop;
	
	// Find the baud rate that's the closest
	for (u8Loop = 0; u8Loop < (sizeof(sg_sSPIBaudRates) / sizeof(sg_sSPIBaudRates[0])); u8Loop++)
    301c:	20 e0       	ldi	r18, 0x00	; 0
    301e:	19 c0       	rjmp	.+50     	; 0x3052 <SPISetBaudRate+0x42>
	{
		if (u32BaudRate >= sg_sSPIBaudRates[u8Loop].u32BaudRate)
    3020:	82 2f       	mov	r24, r18
    3022:	90 e0       	ldi	r25, 0x00	; 0
    3024:	ac 01       	movw	r20, r24
    3026:	44 0f       	add	r20, r20
    3028:	55 1f       	adc	r21, r21
    302a:	84 0f       	add	r24, r20
    302c:	95 1f       	adc	r25, r21
    302e:	88 0f       	add	r24, r24
    3030:	99 1f       	adc	r25, r25
    3032:	09 2e       	mov	r0, r25
    3034:	00 0c       	add	r0, r0
    3036:	aa 0b       	sbc	r26, r26
    3038:	85 55       	subi	r24, 0x55	; 85
    303a:	9d 4f       	sbci	r25, 0xFD	; 253
    303c:	af 4f       	sbci	r26, 0xFF	; 255
    303e:	fc 01       	movw	r30, r24
    3040:	5a 2f       	mov	r21, r26
    3042:	0e 94 49 27 	call	0x4e92	; 0x4e92 <__xload_4>
    3046:	c6 16       	cp	r12, r22
    3048:	d7 06       	cpc	r13, r23
    304a:	e8 06       	cpc	r14, r24
    304c:	f9 06       	cpc	r15, r25
    304e:	18 f4       	brcc	.+6      	; 0x3056 <SPISetBaudRate+0x46>
uint32_t SPISetBaudRate(uint32_t u32BaudRate)
{
	uint8_t u8Loop;
	
	// Find the baud rate that's the closest
	for (u8Loop = 0; u8Loop < (sizeof(sg_sSPIBaudRates) / sizeof(sg_sSPIBaudRates[0])); u8Loop++)
    3050:	2f 5f       	subi	r18, 0xFF	; 255
    3052:	27 30       	cpi	r18, 0x07	; 7
    3054:	28 f3       	brcs	.-54     	; 0x3020 <SPISetBaudRate+0x10>
			break;
		}
	}

	// If we've hit the end, use the slowest speed
	if ((sizeof(sg_sSPIBaudRates) / sizeof(sg_sSPIBaudRates[0])) == u8Loop)
    3056:	27 30       	cpi	r18, 0x07	; 7
    3058:	09 f4       	brne	.+2      	; 0x305c <SPISetBaudRate+0x4c>
	{
		u8Loop--;
    305a:	21 50       	subi	r18, 0x01	; 1
	}

	// Found one!
	SPCR = (SPCR & (uint8_t) ~((1 << SPR1) | (1 << SPR0))) | sg_sSPIBaudRates[u8Loop].u8SPCR;
    305c:	6c b5       	in	r22, 0x2c	; 44
    305e:	30 e0       	ldi	r19, 0x00	; 0
    3060:	a9 01       	movw	r20, r18
    3062:	44 0f       	add	r20, r20
    3064:	55 1f       	adc	r21, r21
    3066:	ca 01       	movw	r24, r20
    3068:	82 0f       	add	r24, r18
    306a:	93 1f       	adc	r25, r19
    306c:	88 0f       	add	r24, r24
    306e:	99 1f       	adc	r25, r25
    3070:	04 96       	adiw	r24, 0x04	; 4
    3072:	09 2e       	mov	r0, r25
    3074:	00 0c       	add	r0, r0
    3076:	aa 0b       	sbc	r26, r26
    3078:	85 55       	subi	r24, 0x55	; 85
    307a:	9d 4f       	sbci	r25, 0xFD	; 253
    307c:	af 4f       	sbci	r26, 0xFF	; 255
    307e:	fc 01       	movw	r30, r24
    3080:	84 91       	lpm	r24, Z
    3082:	a7 fd       	sbrc	r26, 7
    3084:	80 81       	ld	r24, Z
    3086:	6c 7f       	andi	r22, 0xFC	; 252
    3088:	86 2b       	or	r24, r22
    308a:	8c bd       	out	0x2c, r24	; 44
	SPSR = (SPSR & (uint8_t) ~(1 << SPI2X)) | sg_sSPIBaudRates[u8Loop].u8SPSR;
    308c:	6d b5       	in	r22, 0x2d	; 45
    308e:	ca 01       	movw	r24, r20
    3090:	82 0f       	add	r24, r18
    3092:	93 1f       	adc	r25, r19
    3094:	88 0f       	add	r24, r24
    3096:	99 1f       	adc	r25, r25
    3098:	05 96       	adiw	r24, 0x05	; 5
    309a:	09 2e       	mov	r0, r25
    309c:	00 0c       	add	r0, r0
    309e:	aa 0b       	sbc	r26, r26
    30a0:	85 55       	subi	r24, 0x55	; 85
    30a2:	9d 4f       	sbci	r25, 0xFD	; 253
    30a4:	af 4f       	sbci	r26, 0xFF	; 255
    30a6:	fc 01       	movw	r30, r24
    30a8:	84 91       	lpm	r24, Z
    30aa:	a7 fd       	sbrc	r26, 7
    30ac:	80 81       	ld	r24, Z
    30ae:	6e 7f       	andi	r22, 0xFE	; 254
    30b0:	86 2b       	or	r24, r22
    30b2:	8d bd       	out	0x2d, r24	; 45
	return(sg_sSPIBaudRates[u8Loop].u32BaudRate);
    30b4:	24 0f       	add	r18, r20
    30b6:	35 1f       	adc	r19, r21
    30b8:	22 0f       	add	r18, r18
    30ba:	33 1f       	adc	r19, r19
    30bc:	03 2e       	mov	r0, r19
    30be:	00 0c       	add	r0, r0
    30c0:	44 0b       	sbc	r20, r20
    30c2:	25 55       	subi	r18, 0x55	; 85
    30c4:	3d 4f       	sbci	r19, 0xFD	; 253
    30c6:	4f 4f       	sbci	r20, 0xFF	; 255
    30c8:	f9 01       	movw	r30, r18
    30ca:	54 2f       	mov	r21, r20
    30cc:	0e 94 49 27 	call	0x4e92	; 0x4e92 <__xload_4>
}
    30d0:	ff 90       	pop	r15
    30d2:	ef 90       	pop	r14
    30d4:	df 90       	pop	r13
    30d6:	cf 90       	pop	r12
    30d8:	08 95       	ret

Disassembly of section .text.SPIInit:

000049da <SPIInit>:

void SPIInit(void)
{
	// Set MOSI and SCK to output
	DDR_SPI |= (1 << MOSI) | (1 << SCK);
    49da:	84 b1       	in	r24, 0x04	; 4
    49dc:	82 68       	ori	r24, 0x82	; 130
    49de:	84 b9       	out	0x04, r24	; 4
	DDR_SPI &= (uint8_t) ~(1 << MISO);
    49e0:	84 b1       	in	r24, 0x04	; 4
    49e2:	8e 7f       	andi	r24, 0xFE	; 254
    49e4:	84 b9       	out	0x04, r24	; 4
	
	// MISO As input (need our pullup)
	PORT_SPI |= (1 << MISO);
    49e6:	85 b1       	in	r24, 0x05	; 5
    49e8:	81 60       	ori	r24, 0x01	; 1
    49ea:	85 b9       	out	0x05, r24	; 5
	
	// Enable SPI engine, master only, and clock to fosc/128 and SPI mode 0 (which is what SD wants)
	SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR1) | (1 << SPR0);
    49ec:	83 e5       	ldi	r24, 0x53	; 83
    49ee:	8c bd       	out	0x2c, r24	; 44
	
	// Zero out SPSR (all zeroes)
	SPSR = 0;
    49f0:	1d bc       	out	0x2d, r1	; 45
	
	// Zero out SPIPS so the SPI IP is connected to MISO, MOSI, SCK, and SS
	MCUCR &= (uint8_t) ~(1 << SPIPS);
    49f2:	85 b7       	in	r24, 0x35	; 53
    49f4:	8f 77       	andi	r24, 0x7F	; 127
    49f6:	85 bf       	out	0x35, r24	; 53

	// Set to something slow/compatible
	(void) SPISetBaudRate(400000);
    49f8:	60 e8       	ldi	r22, 0x80	; 128
    49fa:	7a e1       	ldi	r23, 0x1A	; 26
    49fc:	86 e0       	ldi	r24, 0x06	; 6
    49fe:	90 e0       	ldi	r25, 0x00	; 0
    4a00:	0e 94 08 18 	call	0x3010	; 0x3010 <SPISetBaudRate>
    4a04:	08 95       	ret

Disassembly of section .text.readGlobalState:

00004608 <readGlobalState>:

static GlobalState gState;
static uint32_t currentSector;
static uint8_t __attribute__((aligned(4))) frameBuffer[FRAME_BUFFER_SIZE];  // Enlarged to handle full frame

static bool readGlobalState(void) {
    4608:	0f 93       	push	r16
    460a:	1f 93       	push	r17
    460c:	cf 93       	push	r28
	if (!SDRead(0, frameBuffer, 1)) {
    460e:	01 e0       	ldi	r16, 0x01	; 1
    4610:	10 e0       	ldi	r17, 0x00	; 0
    4612:	20 e0       	ldi	r18, 0x00	; 0
    4614:	30 e0       	ldi	r19, 0x00	; 0
    4616:	40 e3       	ldi	r20, 0x30	; 48
    4618:	53 e0       	ldi	r21, 0x03	; 3
    461a:	60 e0       	ldi	r22, 0x00	; 0
    461c:	70 e0       	ldi	r23, 0x00	; 0
    461e:	cb 01       	movw	r24, r22
    4620:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <SDRead>
    4624:	c8 2f       	mov	r28, r24
    4626:	88 23       	and	r24, r24
    4628:	49 f0       	breq	.+18     	; 0x463c <readGlobalState+0x34>
		return false;
	}
	memcpy(&gState, frameBuffer, sizeof(GlobalState));
    462a:	40 e3       	ldi	r20, 0x30	; 48
    462c:	53 e0       	ldi	r21, 0x03	; 3
    462e:	60 e8       	ldi	r22, 0x80	; 128
    4630:	28 ed       	ldi	r18, 0xD8	; 216
    4632:	31 e0       	ldi	r19, 0x01	; 1
    4634:	80 e3       	ldi	r24, 0x30	; 48
    4636:	97 e0       	ldi	r25, 0x07	; 7
    4638:	0e 94 4e 24 	call	0x489c	; 0x489c <memcpy>
	// TODO: Implement checksum verification
	return true;
}
    463c:	8c 2f       	mov	r24, r28
    463e:	cf 91       	pop	r28
    4640:	1f 91       	pop	r17
    4642:	0f 91       	pop	r16
    4644:	08 95       	ret

Disassembly of section .text.writeGlobalState:

0000486a <writeGlobalState>:

static bool writeGlobalState(void) {
    486a:	0f 93       	push	r16
    486c:	1f 93       	push	r17
	memcpy(frameBuffer, &gState, sizeof(GlobalState));
    486e:	40 e3       	ldi	r20, 0x30	; 48
    4870:	57 e0       	ldi	r21, 0x07	; 7
    4872:	60 e8       	ldi	r22, 0x80	; 128
    4874:	28 ed       	ldi	r18, 0xD8	; 216
    4876:	31 e0       	ldi	r19, 0x01	; 1
    4878:	80 e3       	ldi	r24, 0x30	; 48
    487a:	93 e0       	ldi	r25, 0x03	; 3
    487c:	0e 94 4e 24 	call	0x489c	; 0x489c <memcpy>
	// TODO: Calculate and update checksum
	return SDWrite(0, frameBuffer, 1);
    4880:	01 e0       	ldi	r16, 0x01	; 1
    4882:	10 e0       	ldi	r17, 0x00	; 0
    4884:	20 e0       	ldi	r18, 0x00	; 0
    4886:	30 e0       	ldi	r19, 0x00	; 0
    4888:	40 e3       	ldi	r20, 0x30	; 48
    488a:	53 e0       	ldi	r21, 0x03	; 3
    488c:	60 e0       	ldi	r22, 0x00	; 0
    488e:	70 e0       	ldi	r23, 0x00	; 0
    4890:	cb 01       	movw	r24, r22
    4892:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <SDWrite>
}
    4896:	1f 91       	pop	r17
    4898:	0f 91       	pop	r16
    489a:	08 95       	ret

Disassembly of section .text.updateSessionMap:

00002d90 <updateSessionMap>:

static bool updateSessionMap(void) {
    2d90:	8f 92       	push	r8
    2d92:	9f 92       	push	r9
    2d94:	af 92       	push	r10
    2d96:	bf 92       	push	r11
    2d98:	cf 92       	push	r12
    2d9a:	df 92       	push	r13
    2d9c:	ef 92       	push	r14
    2d9e:	ff 92       	push	r15
    2da0:	0f 93       	push	r16
    2da2:	1f 93       	push	r17
	uint32_t mapSector = gState.activeSessionMapSector;
    2da4:	e0 e3       	ldi	r30, 0x30	; 48
    2da6:	f7 e0       	ldi	r31, 0x07	; 7
    2da8:	c4 8c       	ldd	r12, Z+28	; 0x1c
    2daa:	d5 8c       	ldd	r13, Z+29	; 0x1d
    2dac:	e6 8c       	ldd	r14, Z+30	; 0x1e
    2dae:	f7 8c       	ldd	r15, Z+31	; 0x1f
	uint32_t mapOffset = gState.activeSessionMapOffset;
    2db0:	80 a0       	ldd	r8, Z+32	; 0x20
    2db2:	91 a0       	ldd	r9, Z+33	; 0x21
    2db4:	a2 a0       	ldd	r10, Z+34	; 0x22
    2db6:	b3 a0       	ldd	r11, Z+35	; 0x23

	if (!SDRead(mapSector, frameBuffer, 1)) {
    2db8:	01 e0       	ldi	r16, 0x01	; 1
    2dba:	10 e0       	ldi	r17, 0x00	; 0
    2dbc:	20 e0       	ldi	r18, 0x00	; 0
    2dbe:	30 e0       	ldi	r19, 0x00	; 0
    2dc0:	40 e3       	ldi	r20, 0x30	; 48
    2dc2:	53 e0       	ldi	r21, 0x03	; 3
    2dc4:	c7 01       	movw	r24, r14
    2dc6:	b6 01       	movw	r22, r12
    2dc8:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <SDRead>
    2dcc:	88 23       	and	r24, r24
    2dce:	09 f4       	brne	.+2      	; 0x2dd2 <updateSessionMap+0x42>
    2dd0:	42 c0       	rjmp	.+132    	; 0x2e56 <updateSessionMap+0xc6>
		return false;
	}

	// Update session map
	*(uint64_t*)(frameBuffer + mapOffset) = gState.newSessionSector;
    2dd2:	f4 01       	movw	r30, r8
    2dd4:	e0 5d       	subi	r30, 0xD0	; 208
    2dd6:	fc 4f       	sbci	r31, 0xFC	; 252
    2dd8:	00 91 48 07 	lds	r16, 0x0748	; 0x800748 <gState+0x18>
    2ddc:	10 91 49 07 	lds	r17, 0x0749	; 0x800749 <gState+0x19>
    2de0:	20 91 4a 07 	lds	r18, 0x074A	; 0x80074a <gState+0x1a>
    2de4:	30 91 4b 07 	lds	r19, 0x074B	; 0x80074b <gState+0x1b>
    2de8:	00 83       	st	Z, r16
    2dea:	11 83       	std	Z+1, r17	; 0x01
    2dec:	22 83       	std	Z+2, r18	; 0x02
    2dee:	33 83       	std	Z+3, r19	; 0x03
    2df0:	14 82       	std	Z+4, r1	; 0x04
    2df2:	15 82       	std	Z+5, r1	; 0x05
    2df4:	16 82       	std	Z+6, r1	; 0x06
    2df6:	17 82       	std	Z+7, r1	; 0x07

	if (!SDWrite(mapSector, frameBuffer, 1)) {
    2df8:	01 e0       	ldi	r16, 0x01	; 1
    2dfa:	10 e0       	ldi	r17, 0x00	; 0
    2dfc:	20 e0       	ldi	r18, 0x00	; 0
    2dfe:	30 e0       	ldi	r19, 0x00	; 0
    2e00:	40 e3       	ldi	r20, 0x30	; 48
    2e02:	53 e0       	ldi	r21, 0x03	; 3
    2e04:	c7 01       	movw	r24, r14
    2e06:	b6 01       	movw	r22, r12
    2e08:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <SDWrite>
    2e0c:	88 23       	and	r24, r24
    2e0e:	19 f1       	breq	.+70     	; 0x2e56 <updateSessionMap+0xc6>
		return false;
	}

	// Update map pointers
	gState.activeSessionMapOffset += sizeof(uint64_t);
    2e10:	e0 e3       	ldi	r30, 0x30	; 48
    2e12:	f7 e0       	ldi	r31, 0x07	; 7
    2e14:	80 a1       	ldd	r24, Z+32	; 0x20
    2e16:	91 a1       	ldd	r25, Z+33	; 0x21
    2e18:	a2 a1       	ldd	r26, Z+34	; 0x22
    2e1a:	b3 a1       	ldd	r27, Z+35	; 0x23
    2e1c:	08 96       	adiw	r24, 0x08	; 8
    2e1e:	a1 1d       	adc	r26, r1
    2e20:	b1 1d       	adc	r27, r1
    2e22:	80 a3       	std	Z+32, r24	; 0x20
    2e24:	91 a3       	std	Z+33, r25	; 0x21
    2e26:	a2 a3       	std	Z+34, r26	; 0x22
    2e28:	b3 a3       	std	Z+35, r27	; 0x23
	if (gState.activeSessionMapOffset >= SECTOR_SIZE) {
    2e2a:	81 15       	cp	r24, r1
    2e2c:	92 40       	sbci	r25, 0x02	; 2
    2e2e:	a1 05       	cpc	r26, r1
    2e30:	b1 05       	cpc	r27, r1
    2e32:	78 f0       	brcs	.+30     	; 0x2e52 <updateSessionMap+0xc2>
		gState.activeSessionMapSector++;
    2e34:	84 8d       	ldd	r24, Z+28	; 0x1c
    2e36:	95 8d       	ldd	r25, Z+29	; 0x1d
    2e38:	a6 8d       	ldd	r26, Z+30	; 0x1e
    2e3a:	b7 8d       	ldd	r27, Z+31	; 0x1f
    2e3c:	01 96       	adiw	r24, 0x01	; 1
    2e3e:	a1 1d       	adc	r26, r1
    2e40:	b1 1d       	adc	r27, r1
    2e42:	84 8f       	std	Z+28, r24	; 0x1c
    2e44:	95 8f       	std	Z+29, r25	; 0x1d
    2e46:	a6 8f       	std	Z+30, r26	; 0x1e
    2e48:	b7 8f       	std	Z+31, r27	; 0x1f
		gState.activeSessionMapOffset = 0;
    2e4a:	10 a2       	std	Z+32, r1	; 0x20
    2e4c:	11 a2       	std	Z+33, r1	; 0x21
    2e4e:	12 a2       	std	Z+34, r1	; 0x22
    2e50:	13 a2       	std	Z+35, r1	; 0x23
	}

	return writeGlobalState();
    2e52:	0e 94 35 24 	call	0x486a	; 0x486a <writeGlobalState>
}
    2e56:	1f 91       	pop	r17
    2e58:	0f 91       	pop	r16
    2e5a:	ff 90       	pop	r15
    2e5c:	ef 90       	pop	r14
    2e5e:	df 90       	pop	r13
    2e60:	cf 90       	pop	r12
    2e62:	bf 90       	pop	r11
    2e64:	af 90       	pop	r10
    2e66:	9f 90       	pop	r9
    2e68:	8f 90       	pop	r8
    2e6a:	08 95       	ret

Disassembly of section .text.STORE_Init:

00003b0c <STORE_Init>:

bool STORE_Init(void) {
    3b0c:	cf 93       	push	r28
	if (!SDInit()) {
    3b0e:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <SDInit>
    3b12:	c8 2f       	mov	r28, r24
    3b14:	88 23       	and	r24, r24
    3b16:	c1 f1       	breq	.+112    	; 0x3b88 <STORE_Init+0x7c>
		return false;
	}

	if (!readGlobalState()) {
    3b18:	0e 94 04 23 	call	0x4608	; 0x4608 <readGlobalState>
    3b1c:	81 11       	cpse	r24, r1
    3b1e:	22 c0       	rjmp	.+68     	; 0x3b64 <STORE_Init+0x58>
		// Initialize global state if it doesn't exist
		memset(&gState, 0, sizeof(GlobalState));
    3b20:	e0 e3       	ldi	r30, 0x30	; 48
    3b22:	f7 e0       	ldi	r31, 0x07	; 7
    3b24:	88 ed       	ldi	r24, 0xD8	; 216
    3b26:	91 e0       	ldi	r25, 0x01	; 1
    3b28:	df 01       	movw	r26, r30
    3b2a:	9c 01       	movw	r18, r24
    3b2c:	1d 92       	st	X+, r1
    3b2e:	21 50       	subi	r18, 0x01	; 1
    3b30:	30 40       	sbci	r19, 0x00	; 0
    3b32:	e1 f7       	brne	.-8      	; 0x3b2c <STORE_Init+0x20>
		gState.firstSessionSector = 1;
    3b34:	81 e0       	ldi	r24, 0x01	; 1
    3b36:	90 e0       	ldi	r25, 0x00	; 0
    3b38:	a0 e0       	ldi	r26, 0x00	; 0
    3b3a:	b0 e0       	ldi	r27, 0x00	; 0
    3b3c:	84 87       	std	Z+12, r24	; 0x0c
    3b3e:	95 87       	std	Z+13, r25	; 0x0d
    3b40:	a6 87       	std	Z+14, r26	; 0x0e
    3b42:	b7 87       	std	Z+15, r27	; 0x0f
		gState.newSessionSector = 1;
    3b44:	80 8f       	std	Z+24, r24	; 0x18
    3b46:	91 8f       	std	Z+25, r25	; 0x19
    3b48:	a2 8f       	std	Z+26, r26	; 0x1a
    3b4a:	b3 8f       	std	Z+27, r27	; 0x1b
		gState.activeSessionMapSector = 4;
    3b4c:	84 e0       	ldi	r24, 0x04	; 4
    3b4e:	90 e0       	ldi	r25, 0x00	; 0
    3b50:	a0 e0       	ldi	r26, 0x00	; 0
    3b52:	b0 e0       	ldi	r27, 0x00	; 0
    3b54:	84 8f       	std	Z+28, r24	; 0x1c
    3b56:	95 8f       	std	Z+29, r25	; 0x1d
    3b58:	a6 8f       	std	Z+30, r26	; 0x1e
    3b5a:	b7 8f       	std	Z+31, r27	; 0x1f
		gState.activeSessionMapOffset = 0;
		// TODO: Initialize other fields as needed
		if (!writeGlobalState()) {
    3b5c:	0e 94 35 24 	call	0x486a	; 0x486a <writeGlobalState>
    3b60:	88 23       	and	r24, r24
    3b62:	89 f0       	breq	.+34     	; 0x3b86 <STORE_Init+0x7a>
			return false;
		}
	}

	currentSector = gState.newSessionSector;
    3b64:	80 91 48 07 	lds	r24, 0x0748	; 0x800748 <gState+0x18>
    3b68:	90 91 49 07 	lds	r25, 0x0749	; 0x800749 <gState+0x19>
    3b6c:	a0 91 4a 07 	lds	r26, 0x074A	; 0x80074a <gState+0x1a>
    3b70:	b0 91 4b 07 	lds	r27, 0x074B	; 0x80074b <gState+0x1b>
    3b74:	80 93 5c 09 	sts	0x095C, r24	; 0x80095c <currentSector>
    3b78:	90 93 5d 09 	sts	0x095D, r25	; 0x80095d <currentSector+0x1>
    3b7c:	a0 93 5e 09 	sts	0x095E, r26	; 0x80095e <currentSector+0x2>
    3b80:	b0 93 5f 09 	sts	0x095F, r27	; 0x80095f <currentSector+0x3>
	return true;
    3b84:	01 c0       	rjmp	.+2      	; 0x3b88 <STORE_Init+0x7c>
		gState.newSessionSector = 1;
		gState.activeSessionMapSector = 4;
		gState.activeSessionMapOffset = 0;
		// TODO: Initialize other fields as needed
		if (!writeGlobalState()) {
			return false;
    3b86:	c8 2f       	mov	r28, r24
		}
	}

	currentSector = gState.newSessionSector;
	return true;
}
    3b88:	8c 2f       	mov	r24, r28
    3b8a:	cf 91       	pop	r28
    3b8c:	08 95       	ret

Disassembly of section .text.STORE_WriteFrame:

000029e6 <STORE_WriteFrame>:

bool STORE_WriteFrame(volatile FrameData* frame) {
    29e6:	8f 92       	push	r8
    29e8:	9f 92       	push	r9
    29ea:	af 92       	push	r10
    29ec:	bf 92       	push	r11
    29ee:	cf 92       	push	r12
    29f0:	df 92       	push	r13
    29f2:	ef 92       	push	r14
    29f4:	ff 92       	push	r15
    29f6:	0f 93       	push	r16
    29f8:	1f 93       	push	r17
    29fa:	cf 93       	push	r28
    29fc:	df 93       	push	r29
	uint32_t bytesWritten = 0;
	uint32_t currentOffset = 0;
	uint32_t sectorsToWrite;
	
	// Verify frame size
	if(frame->frameBytes > FRAME_BUFFER_SIZE) {
    29fe:	fc 01       	movw	r30, r24
    2a00:	24 81       	ldd	r18, Z+4	; 0x04
    2a02:	35 81       	ldd	r19, Z+5	; 0x05
    2a04:	21 30       	cpi	r18, 0x01	; 1
    2a06:	34 40       	sbci	r19, 0x04	; 4
    2a08:	08 f0       	brcs	.+2      	; 0x2a0c <STORE_WriteFrame+0x26>
    2a0a:	5b c0       	rjmp	.+182    	; 0x2ac2 <STORE_WriteFrame+0xdc>
    2a0c:	ec 01       	movw	r28, r24
		return false;
	}
	
	// Copy frame data to our buffer
	memcpy(frameBuffer, (const void*)frame, frame->frameBytes);
    2a0e:	2c 81       	ldd	r18, Y+4	; 0x04
    2a10:	3d 81       	ldd	r19, Y+5	; 0x05
    2a12:	ac 01       	movw	r20, r24
    2a14:	60 e8       	ldi	r22, 0x80	; 128
    2a16:	80 e3       	ldi	r24, 0x30	; 48
    2a18:	93 e0       	ldi	r25, 0x03	; 3
    2a1a:	0e 94 4e 24 	call	0x489c	; 0x489c <memcpy>
	
	// Zero out any remaining buffer space in last sector
	if(frame->frameBytes < FRAME_BUFFER_SIZE) {
    2a1e:	8c 81       	ldd	r24, Y+4	; 0x04
    2a20:	9d 81       	ldd	r25, Y+5	; 0x05
    2a22:	81 15       	cp	r24, r1
    2a24:	94 40       	sbci	r25, 0x04	; 4
    2a26:	70 f4       	brcc	.+28     	; 0x2a44 <STORE_WriteFrame+0x5e>
		memset(frameBuffer + frame->frameBytes, 0, FRAME_BUFFER_SIZE - frame->frameBytes);
    2a28:	2c 81       	ldd	r18, Y+4	; 0x04
    2a2a:	3d 81       	ldd	r19, Y+5	; 0x05
    2a2c:	8c 81       	ldd	r24, Y+4	; 0x04
    2a2e:	9d 81       	ldd	r25, Y+5	; 0x05
    2a30:	40 e0       	ldi	r20, 0x00	; 0
    2a32:	54 e0       	ldi	r21, 0x04	; 4
    2a34:	42 1b       	sub	r20, r18
    2a36:	53 0b       	sbc	r21, r19
    2a38:	60 e0       	ldi	r22, 0x00	; 0
    2a3a:	70 e0       	ldi	r23, 0x00	; 0
    2a3c:	80 5d       	subi	r24, 0xD0	; 208
    2a3e:	9c 4f       	sbci	r25, 0xFC	; 252
    2a40:	0e 94 aa 27 	call	0x4f54	; 0x4f54 <memset>

	currentSector = gState.newSessionSector;
	return true;
}

bool STORE_WriteFrame(volatile FrameData* frame) {
    2a44:	c1 2c       	mov	r12, r1
    2a46:	d1 2c       	mov	r13, r1
    2a48:	76 01       	movw	r14, r12
    2a4a:	68 94       	set
    2a4c:	c1 f8       	bld	r12, 1
    2a4e:	81 2c       	mov	r8, r1
    2a50:	91 2c       	mov	r9, r1
    2a52:	54 01       	movw	r10, r8
    2a54:	2f c0       	rjmp	.+94     	; 0x2ab4 <STORE_WriteFrame+0xce>
	// Calculate how many complete sectors we need to write
	sectorsToWrite = SECTORS_PER_FRAME;
	
	// Write all sectors
	while(sectorsToWrite > 0) {
		if(!SDWrite(currentSector, frameBuffer + currentOffset, 1)) {
    2a56:	60 91 5c 09 	lds	r22, 0x095C	; 0x80095c <currentSector>
    2a5a:	70 91 5d 09 	lds	r23, 0x095D	; 0x80095d <currentSector+0x1>
    2a5e:	80 91 5e 09 	lds	r24, 0x095E	; 0x80095e <currentSector+0x2>
    2a62:	90 91 5f 09 	lds	r25, 0x095F	; 0x80095f <currentSector+0x3>
    2a66:	01 e0       	ldi	r16, 0x01	; 1
    2a68:	10 e0       	ldi	r17, 0x00	; 0
    2a6a:	20 e0       	ldi	r18, 0x00	; 0
    2a6c:	30 e0       	ldi	r19, 0x00	; 0
    2a6e:	a4 01       	movw	r20, r8
    2a70:	40 5d       	subi	r20, 0xD0	; 208
    2a72:	5c 4f       	sbci	r21, 0xFC	; 252
    2a74:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <SDWrite>
    2a78:	88 23       	and	r24, r24
    2a7a:	21 f1       	breq	.+72     	; 0x2ac4 <STORE_WriteFrame+0xde>
			return false;
		}
		currentSector++;
    2a7c:	80 91 5c 09 	lds	r24, 0x095C	; 0x80095c <currentSector>
    2a80:	90 91 5d 09 	lds	r25, 0x095D	; 0x80095d <currentSector+0x1>
    2a84:	a0 91 5e 09 	lds	r26, 0x095E	; 0x80095e <currentSector+0x2>
    2a88:	b0 91 5f 09 	lds	r27, 0x095F	; 0x80095f <currentSector+0x3>
    2a8c:	01 96       	adiw	r24, 0x01	; 1
    2a8e:	a1 1d       	adc	r26, r1
    2a90:	b1 1d       	adc	r27, r1
    2a92:	80 93 5c 09 	sts	0x095C, r24	; 0x80095c <currentSector>
    2a96:	90 93 5d 09 	sts	0x095D, r25	; 0x80095d <currentSector+0x1>
    2a9a:	a0 93 5e 09 	sts	0x095E, r26	; 0x80095e <currentSector+0x2>
    2a9e:	b0 93 5f 09 	sts	0x095F, r27	; 0x80095f <currentSector+0x3>
		currentOffset += SECTOR_SIZE;
    2aa2:	42 e0       	ldi	r20, 0x02	; 2
    2aa4:	94 0e       	add	r9, r20
    2aa6:	a1 1c       	adc	r10, r1
    2aa8:	b1 1c       	adc	r11, r1
		sectorsToWrite--;
    2aaa:	81 e0       	ldi	r24, 0x01	; 1
    2aac:	c8 1a       	sub	r12, r24
    2aae:	d1 08       	sbc	r13, r1
    2ab0:	e1 08       	sbc	r14, r1
    2ab2:	f1 08       	sbc	r15, r1
	
	// Calculate how many complete sectors we need to write
	sectorsToWrite = SECTORS_PER_FRAME;
	
	// Write all sectors
	while(sectorsToWrite > 0) {
    2ab4:	c1 14       	cp	r12, r1
    2ab6:	d1 04       	cpc	r13, r1
    2ab8:	e1 04       	cpc	r14, r1
    2aba:	f1 04       	cpc	r15, r1
    2abc:	61 f6       	brne	.-104    	; 0x2a56 <STORE_WriteFrame+0x70>
		currentSector++;
		currentOffset += SECTOR_SIZE;
		sectorsToWrite--;
	}
	
	return true;
    2abe:	81 e0       	ldi	r24, 0x01	; 1
    2ac0:	01 c0       	rjmp	.+2      	; 0x2ac4 <STORE_WriteFrame+0xde>
	uint32_t currentOffset = 0;
	uint32_t sectorsToWrite;
	
	// Verify frame size
	if(frame->frameBytes > FRAME_BUFFER_SIZE) {
		return false;
    2ac2:	80 e0       	ldi	r24, 0x00	; 0
		currentOffset += SECTOR_SIZE;
		sectorsToWrite--;
	}
	
	return true;
}
    2ac4:	df 91       	pop	r29
    2ac6:	cf 91       	pop	r28
    2ac8:	1f 91       	pop	r17
    2aca:	0f 91       	pop	r16
    2acc:	ff 90       	pop	r15
    2ace:	ef 90       	pop	r14
    2ad0:	df 90       	pop	r13
    2ad2:	cf 90       	pop	r12
    2ad4:	bf 90       	pop	r11
    2ad6:	af 90       	pop	r10
    2ad8:	9f 90       	pop	r9
    2ada:	8f 90       	pop	r8
    2adc:	08 95       	ret

Disassembly of section .text.STORE_StartNewSession:

0000439e <STORE_StartNewSession>:

bool STORE_StartNewSession(void) {
	// Update session info
	gState.sessionCount++;
    439e:	e0 e3       	ldi	r30, 0x30	; 48
    43a0:	f7 e0       	ldi	r31, 0x07	; 7
    43a2:	84 89       	ldd	r24, Z+20	; 0x14
    43a4:	95 89       	ldd	r25, Z+21	; 0x15
    43a6:	a6 89       	ldd	r26, Z+22	; 0x16
    43a8:	b7 89       	ldd	r27, Z+23	; 0x17
    43aa:	01 96       	adiw	r24, 0x01	; 1
    43ac:	a1 1d       	adc	r26, r1
    43ae:	b1 1d       	adc	r27, r1
    43b0:	84 8b       	std	Z+20, r24	; 0x14
    43b2:	95 8b       	std	Z+21, r25	; 0x15
    43b4:	a6 8b       	std	Z+22, r26	; 0x16
    43b6:	b7 8b       	std	Z+23, r27	; 0x17
	gState.newSessionSector = currentSector;
    43b8:	80 91 5c 09 	lds	r24, 0x095C	; 0x80095c <currentSector>
    43bc:	90 91 5d 09 	lds	r25, 0x095D	; 0x80095d <currentSector+0x1>
    43c0:	a0 91 5e 09 	lds	r26, 0x095E	; 0x80095e <currentSector+0x2>
    43c4:	b0 91 5f 09 	lds	r27, 0x095F	; 0x80095f <currentSector+0x3>
    43c8:	80 8f       	std	Z+24, r24	; 0x18
    43ca:	91 8f       	std	Z+25, r25	; 0x19
    43cc:	a2 8f       	std	Z+26, r26	; 0x1a
    43ce:	b3 8f       	std	Z+27, r27	; 0x1b
	
	// Ensure sector alignment for new sessions
	if(currentSector % SECTORS_PER_FRAME != 0) {
    43d0:	80 ff       	sbrs	r24, 0
    43d2:	0c c0       	rjmp	.+24     	; 0x43ec <STORE_StartNewSession+0x4e>
		currentSector += SECTORS_PER_FRAME - (currentSector % SECTORS_PER_FRAME);
    43d4:	8e 7f       	andi	r24, 0xFE	; 254
    43d6:	02 96       	adiw	r24, 0x02	; 2
    43d8:	a1 1d       	adc	r26, r1
    43da:	b1 1d       	adc	r27, r1
    43dc:	80 93 5c 09 	sts	0x095C, r24	; 0x80095c <currentSector>
    43e0:	90 93 5d 09 	sts	0x095D, r25	; 0x80095d <currentSector+0x1>
    43e4:	a0 93 5e 09 	sts	0x095E, r26	; 0x80095e <currentSector+0x2>
    43e8:	b0 93 5f 09 	sts	0x095F, r27	; 0x80095f <currentSector+0x3>
	}
	
	return updateSessionMap();
    43ec:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <updateSessionMap>
}
    43f0:	08 95       	ret

Disassembly of section .text.STORE_EndSession:

000041f0 <STORE_EndSession>:

bool STORE_EndSession(void) {
	// Ensure we end on a frame boundary
	if(currentSector % SECTORS_PER_FRAME != 0) {
    41f0:	80 91 5c 09 	lds	r24, 0x095C	; 0x80095c <currentSector>
    41f4:	90 91 5d 09 	lds	r25, 0x095D	; 0x80095d <currentSector+0x1>
    41f8:	a0 91 5e 09 	lds	r26, 0x095E	; 0x80095e <currentSector+0x2>
    41fc:	b0 91 5f 09 	lds	r27, 0x095F	; 0x80095f <currentSector+0x3>
    4200:	80 ff       	sbrs	r24, 0
    4202:	0c c0       	rjmp	.+24     	; 0x421c <STORE_EndSession+0x2c>
		currentSector += SECTORS_PER_FRAME - (currentSector % SECTORS_PER_FRAME);
    4204:	8e 7f       	andi	r24, 0xFE	; 254
    4206:	02 96       	adiw	r24, 0x02	; 2
    4208:	a1 1d       	adc	r26, r1
    420a:	b1 1d       	adc	r27, r1
    420c:	80 93 5c 09 	sts	0x095C, r24	; 0x80095c <currentSector>
    4210:	90 93 5d 09 	sts	0x095D, r25	; 0x80095d <currentSector+0x1>
    4214:	a0 93 5e 09 	sts	0x095E, r26	; 0x80095e <currentSector+0x2>
    4218:	b0 93 5f 09 	sts	0x095F, r27	; 0x80095f <currentSector+0x3>
	}
	
	gState.lastSessionSector = currentSector - 1;
    421c:	80 91 5c 09 	lds	r24, 0x095C	; 0x80095c <currentSector>
    4220:	90 91 5d 09 	lds	r25, 0x095D	; 0x80095d <currentSector+0x1>
    4224:	a0 91 5e 09 	lds	r26, 0x095E	; 0x80095e <currentSector+0x2>
    4228:	b0 91 5f 09 	lds	r27, 0x095F	; 0x80095f <currentSector+0x3>
    422c:	01 97       	sbiw	r24, 0x01	; 1
    422e:	a1 09       	sbc	r26, r1
    4230:	b1 09       	sbc	r27, r1
    4232:	80 93 40 07 	sts	0x0740, r24	; 0x800740 <gState+0x10>
    4236:	90 93 41 07 	sts	0x0741, r25	; 0x800741 <gState+0x11>
    423a:	a0 93 42 07 	sts	0x0742, r26	; 0x800742 <gState+0x12>
    423e:	b0 93 43 07 	sts	0x0743, r27	; 0x800743 <gState+0x13>
	return writeGlobalState();
    4242:	0e 94 35 24 	call	0x486a	; 0x486a <writeGlobalState>
}
    4246:	08 95       	ret

Disassembly of section .text.vUARTtxDataAvailable:

00004da2 <vUARTtxDataAvailable>:
#endif

bool vUARTIsBusy(void) {
	return ((sg_etxState != ESTATE_IDLE) ||
		(sg_eCell_mc_rxState != ESTATE_IDLE));
}
    4da2:	80 91 8c 09 	lds	r24, 0x098C	; 0x80098c <sg_u8SendIndex>
    4da6:	81 11       	cpse	r24, r1
    4da8:	06 c0       	rjmp	.+12     	; 0x4db6 <vUARTtxDataAvailable+0x14>
    4daa:	0e 94 2c 25 	call	0x4a58	; 0x4a58 <PlatformGetSendData>
    4dae:	90 93 6f 09 	sts	0x096F, r25	; 0x80096f <sg_u8SendData+0x1>
    4db2:	80 93 6e 09 	sts	0x096E, r24	; 0x80096e <sg_u8SendData>
    4db6:	80 91 8c 09 	lds	r24, 0x098C	; 0x80098c <sg_u8SendIndex>
    4dba:	81 11       	cpse	r24, r1
    4dbc:	02 c0       	rjmp	.+4      	; 0x4dc2 <vUARTtxDataAvailable+0x20>
    4dbe:	81 e0       	ldi	r24, 0x01	; 1
    4dc0:	08 95       	ret
    4dc2:	80 e0       	ldi	r24, 0x00	; 0
    4dc4:	08 95       	ret

Disassembly of section .text.vUARTtxDataGet:

00004534 <vUARTtxDataGet>:
    4534:	80 91 8c 09 	lds	r24, 0x098C	; 0x80098c <sg_u8SendIndex>
    4538:	81 11       	cpse	r24, r1
    453a:	10 c0       	rjmp	.+32     	; 0x455c <vUARTtxDataGet+0x28>
    453c:	81 e0       	ldi	r24, 0x01	; 1
    453e:	0e 94 2c 25 	call	0x4a58	; 0x4a58 <PlatformGetSendData>
    4542:	ee e6       	ldi	r30, 0x6E	; 110
    4544:	f9 e0       	ldi	r31, 0x09	; 9
    4546:	90 83       	st	Z, r25
    4548:	81 83       	std	Z+1, r24	; 0x01
    454a:	80 81       	ld	r24, Z
    454c:	88 23       	and	r24, r24
    454e:	24 f4       	brge	.+8      	; 0x4558 <vUARTtxDataGet+0x24>
    4550:	81 e0       	ldi	r24, 0x01	; 1
    4552:	80 93 8e 09 	sts	0x098E, r24	; 0x80098e <sg_bCellReportsReuested>
    4556:	02 c0       	rjmp	.+4      	; 0x455c <vUARTtxDataGet+0x28>
    4558:	10 92 8e 09 	sts	0x098E, r1	; 0x80098e <sg_bCellReportsReuested>
    455c:	e0 91 8c 09 	lds	r30, 0x098C	; 0x80098c <sg_u8SendIndex>
    4560:	f0 e0       	ldi	r31, 0x00	; 0
    4562:	e2 59       	subi	r30, 0x92	; 146
    4564:	f6 4f       	sbci	r31, 0xF6	; 246
    4566:	80 81       	ld	r24, Z
    4568:	90 91 8c 09 	lds	r25, 0x098C	; 0x80098c <sg_u8SendIndex>
    456c:	9f 5f       	subi	r25, 0xFF	; 255
    456e:	90 93 8c 09 	sts	0x098C, r25	; 0x80098c <sg_u8SendIndex>
    4572:	90 91 8c 09 	lds	r25, 0x098C	; 0x80098c <sg_u8SendIndex>
    4576:	92 30       	cpi	r25, 0x02	; 2
    4578:	10 f0       	brcs	.+4      	; 0x457e <vUARTtxDataGet+0x4a>
    457a:	10 92 8c 09 	sts	0x098C, r1	; 0x80098c <sg_u8SendIndex>
    457e:	08 95       	ret

Disassembly of section .text.vUARTRXReset:

00005040 <vUARTRXReset>:

// Called when we have a string timeout or need to reset the state machine
// for the MC RX side of things
void vUARTRXReset(void)
{
	sg_eCell_mc_rxState = ESTATE_IDLE;
    5040:	10 92 95 09 	sts	0x0995, r1	; 0x800995 <sg_eCell_mc_rxState>
	vUARTRXStart();
    5044:	0e 94 6c 27 	call	0x4ed8	; 0x4ed8 <vUARTRXStart>
    5048:	08 95       	ret

Disassembly of section .text.vUARTStarttx:

0000429e <vUARTStarttx>:
#endif

bool vUARTIsBusy(void) {
	return ((sg_etxState != ESTATE_IDLE) ||
		(sg_eCell_mc_rxState != ESTATE_IDLE));
}
    429e:	80 91 8f 09 	lds	r24, 0x098F	; 0x80098f <sg_etxState>
    42a2:	81 11       	cpse	r24, r1
    42a4:	23 c0       	rjmp	.+70     	; 0x42ec <vUARTStarttx+0x4e>
    42a6:	80 91 95 09 	lds	r24, 0x0995	; 0x800995 <sg_eCell_mc_rxState>
    42aa:	81 11       	cpse	r24, r1
    42ac:	21 c0       	rjmp	.+66     	; 0x42f0 <vUARTStarttx+0x52>
    42ae:	82 e0       	ldi	r24, 0x02	; 2
    42b0:	80 93 8f 09 	sts	0x098F, r24	; 0x80098f <sg_etxState>
    42b4:	10 92 8c 09 	sts	0x098C, r1	; 0x80098c <sg_u8SendIndex>
    42b8:	10 92 92 09 	sts	0x0992, r1	; 0x800992 <sg_u8txBitCount>
    42bc:	81 e0       	ldi	r24, 0x01	; 1
    42be:	80 93 8d 09 	sts	0x098D, r24	; 0x80098d <sg_bMCTxNextBit>
    42c2:	86 b5       	in	r24, 0x26	; 38
    42c4:	8e 5c       	subi	r24, 0xCE	; 206
    42c6:	87 bd       	out	0x27, r24	; 39
    42c8:	85 b3       	in	r24, 0x15	; 21
    42ca:	82 60       	ori	r24, 0x02	; 2
    42cc:	85 bb       	out	0x15, r24	; 21
    42ce:	ee e6       	ldi	r30, 0x6E	; 110
    42d0:	f0 e0       	ldi	r31, 0x00	; 0
    42d2:	80 81       	ld	r24, Z
    42d4:	82 60       	ori	r24, 0x02	; 2
    42d6:	80 83       	st	Z, r24
    42d8:	0e 94 d1 26 	call	0x4da2	; 0x4da2 <vUARTtxDataAvailable>
    42dc:	80 93 90 09 	sts	0x0990, r24	; 0x800990 <sg_btxMoreAvailable>
    42e0:	0e 94 9a 22 	call	0x4534	; 0x4534 <vUARTtxDataGet>
    42e4:	80 93 91 09 	sts	0x0991, r24	; 0x800991 <sg_u8txDataByte>
    42e8:	81 e0       	ldi	r24, 0x01	; 1
    42ea:	08 95       	ret
    42ec:	80 e0       	ldi	r24, 0x00	; 0
    42ee:	08 95       	ret
    42f0:	80 e0       	ldi	r24, 0x00	; 0
    42f2:	08 95       	ret

Disassembly of section .text.__vector_8:

0000413c <__vector_8>:
    413c:	1f 92       	push	r1
    413e:	0f 92       	push	r0
    4140:	0f b6       	in	r0, 0x3f	; 63
    4142:	0f 92       	push	r0
    4144:	11 24       	eor	r1, r1
    4146:	8f 93       	push	r24
    4148:	ef 93       	push	r30
    414a:	ff 93       	push	r31
    414c:	80 91 95 09 	lds	r24, 0x0995	; 0x800995 <sg_eCell_mc_rxState>
    4150:	88 23       	and	r24, r24
    4152:	11 f0       	breq	.+4      	; 0x4158 <__vector_8+0x1c>
    4154:	83 30       	cpi	r24, 0x03	; 3
    4156:	c1 f4       	brne	.+48     	; 0x4188 <__vector_8+0x4c>
    4158:	86 b5       	in	r24, 0x26	; 38
    415a:	85 5b       	subi	r24, 0xB5	; 181
    415c:	88 bd       	out	0x28, r24	; 40
    415e:	85 b3       	in	r24, 0x15	; 21
    4160:	84 60       	ori	r24, 0x04	; 4
    4162:	85 bb       	out	0x15, r24	; 21
    4164:	ee e6       	ldi	r30, 0x6E	; 110
    4166:	f0 e0       	ldi	r31, 0x00	; 0
    4168:	80 81       	ld	r24, Z
    416a:	84 60       	ori	r24, 0x04	; 4
    416c:	80 83       	st	Z, r24
    416e:	8d b3       	in	r24, 0x1d	; 29
    4170:	8d 7f       	andi	r24, 0xFD	; 253
    4172:	8d bb       	out	0x1d, r24	; 29
    4174:	8b b1       	in	r24, 0x0b	; 11
    4176:	80 62       	ori	r24, 0x20	; 32
    4178:	8b b9       	out	0x0b, r24	; 11
    417a:	10 92 8b 09 	sts	0x098B, r1	; 0x80098b <sg_bState>
    417e:	81 e0       	ldi	r24, 0x01	; 1
    4180:	80 93 95 09 	sts	0x0995, r24	; 0x800995 <sg_eCell_mc_rxState>
    4184:	10 92 97 09 	sts	0x0997, r1	; 0x800997 <sg_u8Cell_mc_rxBitCount>
    4188:	ff 91       	pop	r31
    418a:	ef 91       	pop	r30
    418c:	8f 91       	pop	r24
    418e:	0f 90       	pop	r0
    4190:	0f be       	out	0x3f, r0	; 63
    4192:	0f 90       	pop	r0
    4194:	1f 90       	pop	r1
    4196:	18 95       	reti

Disassembly of section .text.__vector_16:

00002ade <__vector_16>:
    2ade:	1f 92       	push	r1
    2ae0:	0f 92       	push	r0
    2ae2:	0f b6       	in	r0, 0x3f	; 63
    2ae4:	0f 92       	push	r0
    2ae6:	11 24       	eor	r1, r1
    2ae8:	2f 93       	push	r18
    2aea:	3f 93       	push	r19
    2aec:	4f 93       	push	r20
    2aee:	5f 93       	push	r21
    2af0:	6f 93       	push	r22
    2af2:	7f 93       	push	r23
    2af4:	8f 93       	push	r24
    2af6:	9f 93       	push	r25
    2af8:	af 93       	push	r26
    2afa:	bf 93       	push	r27
    2afc:	ef 93       	push	r30
    2afe:	ff 93       	push	r31
    2b00:	86 b5       	in	r24, 0x26	; 38
    2b02:	8e 5c       	subi	r24, 0xCE	; 206
    2b04:	88 bd       	out	0x28, r24	; 40
    2b06:	85 b3       	in	r24, 0x15	; 21
    2b08:	84 60       	ori	r24, 0x04	; 4
    2b0a:	85 bb       	out	0x15, r24	; 21
    2b0c:	ee e6       	ldi	r30, 0x6E	; 110
    2b0e:	f0 e0       	ldi	r31, 0x00	; 0
    2b10:	80 81       	ld	r24, Z
    2b12:	84 60       	ori	r24, 0x04	; 4
    2b14:	80 83       	st	Z, r24
    2b16:	20 91 94 09 	lds	r18, 0x0994	; 0x800994 <sg_bCell_mc_rxPriorState>
    2b1a:	83 b1       	in	r24, 0x03	; 3
    2b1c:	82 fb       	bst	r24, 2
    2b1e:	88 27       	eor	r24, r24
    2b20:	80 f9       	bld	r24, 0
    2b22:	80 93 94 09 	sts	0x0994, r24	; 0x800994 <sg_bCell_mc_rxPriorState>
    2b26:	90 91 8b 09 	lds	r25, 0x098B	; 0x80098b <sg_bState>
    2b2a:	99 23       	and	r25, r25
    2b2c:	31 f0       	breq	.+12     	; 0x2b3a <__vector_16+0x5c>
    2b2e:	9b b1       	in	r25, 0x0b	; 11
    2b30:	90 62       	ori	r25, 0x20	; 32
    2b32:	9b b9       	out	0x0b, r25	; 11
    2b34:	10 92 8b 09 	sts	0x098B, r1	; 0x80098b <sg_bState>
    2b38:	06 c0       	rjmp	.+12     	; 0x2b46 <__vector_16+0x68>
    2b3a:	9b b1       	in	r25, 0x0b	; 11
    2b3c:	9f 7d       	andi	r25, 0xDF	; 223
    2b3e:	9b b9       	out	0x0b, r25	; 11
    2b40:	81 e0       	ldi	r24, 0x01	; 1
    2b42:	80 93 8b 09 	sts	0x098B, r24	; 0x80098b <sg_bState>
    2b46:	80 91 97 09 	lds	r24, 0x0997	; 0x800997 <sg_u8Cell_mc_rxBitCount>
    2b4a:	8f 5f       	subi	r24, 0xFF	; 255
    2b4c:	80 93 97 09 	sts	0x0997, r24	; 0x800997 <sg_u8Cell_mc_rxBitCount>
    2b50:	81 30       	cpi	r24, 0x01	; 1
    2b52:	19 f4       	brne	.+6      	; 0x2b5a <__vector_16+0x7c>
    2b54:	10 92 96 09 	sts	0x0996, r1	; 0x800996 <sg_u8rxDataByte>
    2b58:	2b c0       	rjmp	.+86     	; 0x2bb0 <__vector_16+0xd2>
    2b5a:	8a 30       	cpi	r24, 0x0A	; 10
    2b5c:	38 f4       	brcc	.+14     	; 0x2b6c <__vector_16+0x8e>
    2b5e:	80 91 96 09 	lds	r24, 0x0996	; 0x800996 <sg_u8rxDataByte>
    2b62:	88 0f       	add	r24, r24
    2b64:	82 2b       	or	r24, r18
    2b66:	80 93 96 09 	sts	0x0996, r24	; 0x800996 <sg_u8rxDataByte>
    2b6a:	22 c0       	rjmp	.+68     	; 0x2bb0 <__vector_16+0xd2>
    2b6c:	20 93 93 09 	sts	0x0993, r18	; 0x800993 <sg_bCell_mc_rxMoreData>
    2b70:	8b b1       	in	r24, 0x0b	; 11
    2b72:	8f 7d       	andi	r24, 0xDF	; 223
    2b74:	8b b9       	out	0x0b, r24	; 11
    2b76:	81 e0       	ldi	r24, 0x01	; 1
    2b78:	80 93 8b 09 	sts	0x098B, r24	; 0x80098b <sg_bState>
    2b7c:	e9 e6       	ldi	r30, 0x69	; 105
    2b7e:	f0 e0       	ldi	r31, 0x00	; 0
    2b80:	9c e0       	ldi	r25, 0x0C	; 12
    2b82:	90 83       	st	Z, r25
    2b84:	8c b3       	in	r24, 0x1c	; 28
    2b86:	82 60       	ori	r24, 0x02	; 2
    2b88:	8c bb       	out	0x1c, r24	; 28
    2b8a:	90 83       	st	Z, r25
    2b8c:	8c b3       	in	r24, 0x1c	; 28
    2b8e:	82 60       	ori	r24, 0x02	; 2
    2b90:	8c bb       	out	0x1c, r24	; 28
    2b92:	8d b3       	in	r24, 0x1d	; 29
    2b94:	82 60       	ori	r24, 0x02	; 2
    2b96:	8d bb       	out	0x1d, r24	; 29
    2b98:	ee e6       	ldi	r30, 0x6E	; 110
    2b9a:	f0 e0       	ldi	r31, 0x00	; 0
    2b9c:	80 81       	ld	r24, Z
    2b9e:	8b 7f       	andi	r24, 0xFB	; 251
    2ba0:	80 83       	st	Z, r24
    2ba2:	80 91 96 09 	lds	r24, 0x0996	; 0x800996 <sg_u8rxDataByte>
    2ba6:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <vUARTRXData>
    2baa:	83 e0       	ldi	r24, 0x03	; 3
    2bac:	80 93 95 09 	sts	0x0995, r24	; 0x800995 <sg_eCell_mc_rxState>
    2bb0:	ff 91       	pop	r31
    2bb2:	ef 91       	pop	r30
    2bb4:	bf 91       	pop	r27
    2bb6:	af 91       	pop	r26
    2bb8:	9f 91       	pop	r25
    2bba:	8f 91       	pop	r24
    2bbc:	7f 91       	pop	r23
    2bbe:	6f 91       	pop	r22
    2bc0:	5f 91       	pop	r21
    2bc2:	4f 91       	pop	r20
    2bc4:	3f 91       	pop	r19
    2bc6:	2f 91       	pop	r18
    2bc8:	0f 90       	pop	r0
    2bca:	0f be       	out	0x3f, r0	; 63
    2bcc:	0f 90       	pop	r0
    2bce:	1f 90       	pop	r1
    2bd0:	18 95       	reti

Disassembly of section .text.__vector_15:

00002580 <__vector_15>:
    2580:	1f 92       	push	r1
    2582:	0f 92       	push	r0
    2584:	0f b6       	in	r0, 0x3f	; 63
    2586:	0f 92       	push	r0
    2588:	11 24       	eor	r1, r1
    258a:	2f 93       	push	r18
    258c:	3f 93       	push	r19
    258e:	4f 93       	push	r20
    2590:	5f 93       	push	r21
    2592:	6f 93       	push	r22
    2594:	7f 93       	push	r23
    2596:	8f 93       	push	r24
    2598:	9f 93       	push	r25
    259a:	af 93       	push	r26
    259c:	bf 93       	push	r27
    259e:	ef 93       	push	r30
    25a0:	ff 93       	push	r31
    25a2:	86 b5       	in	r24, 0x26	; 38
    25a4:	83 5d       	subi	r24, 0xD3	; 211
    25a6:	87 bd       	out	0x27, r24	; 39
    25a8:	85 b3       	in	r24, 0x15	; 21
    25aa:	82 60       	ori	r24, 0x02	; 2
    25ac:	85 bb       	out	0x15, r24	; 21
    25ae:	ee e6       	ldi	r30, 0x6E	; 110
    25b0:	f0 e0       	ldi	r31, 0x00	; 0
    25b2:	80 81       	ld	r24, Z
    25b4:	82 60       	ori	r24, 0x02	; 2
    25b6:	80 83       	st	Z, r24
    25b8:	80 91 8d 09 	lds	r24, 0x098D	; 0x80098d <sg_bMCTxNextBit>
    25bc:	88 23       	and	r24, r24
    25be:	21 f0       	breq	.+8      	; 0x25c8 <__vector_15+0x48>
    25c0:	85 b1       	in	r24, 0x05	; 5
    25c2:	88 60       	ori	r24, 0x08	; 8
    25c4:	85 b9       	out	0x05, r24	; 5
    25c6:	03 c0       	rjmp	.+6      	; 0x25ce <__vector_15+0x4e>
    25c8:	85 b1       	in	r24, 0x05	; 5
    25ca:	87 7f       	andi	r24, 0xF7	; 247
    25cc:	85 b9       	out	0x05, r24	; 5
    25ce:	80 91 92 09 	lds	r24, 0x0992	; 0x800992 <sg_u8txBitCount>
    25d2:	8f 5f       	subi	r24, 0xFF	; 255
    25d4:	80 93 92 09 	sts	0x0992, r24	; 0x800992 <sg_u8txBitCount>
    25d8:	80 91 92 09 	lds	r24, 0x0992	; 0x800992 <sg_u8txBitCount>
    25dc:	83 30       	cpi	r24, 0x03	; 3
    25de:	61 f4       	brne	.+24     	; 0x25f8 <__vector_15+0x78>
    25e0:	80 91 8e 09 	lds	r24, 0x098E	; 0x80098e <sg_bCellReportsReuested>
    25e4:	88 23       	and	r24, r24
    25e6:	41 f0       	breq	.+16     	; 0x25f8 <__vector_15+0x78>
    25e8:	8b e0       	ldi	r24, 0x0B	; 11
    25ea:	80 93 92 09 	sts	0x0992, r24	; 0x800992 <sg_u8txBitCount>
    25ee:	10 92 8d 09 	sts	0x098D, r1	; 0x80098d <sg_bMCTxNextBit>
    25f2:	10 92 90 09 	sts	0x0990, r1	; 0x800990 <sg_btxMoreAvailable>
    25f6:	4d c0       	rjmp	.+154    	; 0x2692 <__vector_15+0x112>
    25f8:	80 91 92 09 	lds	r24, 0x0992	; 0x800992 <sg_u8txBitCount>
    25fc:	8a 30       	cpi	r24, 0x0A	; 10
    25fe:	80 f4       	brcc	.+32     	; 0x2620 <__vector_15+0xa0>
    2600:	80 91 91 09 	lds	r24, 0x0991	; 0x800991 <sg_u8txDataByte>
    2604:	88 23       	and	r24, r24
    2606:	24 f4       	brge	.+8      	; 0x2610 <__vector_15+0x90>
    2608:	81 e0       	ldi	r24, 0x01	; 1
    260a:	80 93 8d 09 	sts	0x098D, r24	; 0x80098d <sg_bMCTxNextBit>
    260e:	02 c0       	rjmp	.+4      	; 0x2614 <__vector_15+0x94>
    2610:	10 92 8d 09 	sts	0x098D, r1	; 0x80098d <sg_bMCTxNextBit>
    2614:	80 91 91 09 	lds	r24, 0x0991	; 0x800991 <sg_u8txDataByte>
    2618:	88 0f       	add	r24, r24
    261a:	80 93 91 09 	sts	0x0991, r24	; 0x800991 <sg_u8txDataByte>
    261e:	39 c0       	rjmp	.+114    	; 0x2692 <__vector_15+0x112>
    2620:	80 91 92 09 	lds	r24, 0x0992	; 0x800992 <sg_u8txBitCount>
    2624:	8a 30       	cpi	r24, 0x0A	; 10
    2626:	29 f4       	brne	.+10     	; 0x2632 <__vector_15+0xb2>
    2628:	80 91 90 09 	lds	r24, 0x0990	; 0x800990 <sg_btxMoreAvailable>
    262c:	80 93 8d 09 	sts	0x098D, r24	; 0x80098d <sg_bMCTxNextBit>
    2630:	30 c0       	rjmp	.+96     	; 0x2692 <__vector_15+0x112>
    2632:	80 91 92 09 	lds	r24, 0x0992	; 0x800992 <sg_u8txBitCount>
    2636:	8b 30       	cpi	r24, 0x0B	; 11
    2638:	19 f4       	brne	.+6      	; 0x2640 <__vector_15+0xc0>
    263a:	10 92 8d 09 	sts	0x098D, r1	; 0x80098d <sg_bMCTxNextBit>
    263e:	29 c0       	rjmp	.+82     	; 0x2692 <__vector_15+0x112>
    2640:	80 91 92 09 	lds	r24, 0x0992	; 0x800992 <sg_u8txBitCount>
    2644:	8c 30       	cpi	r24, 0x0C	; 12
    2646:	29 f5       	brne	.+74     	; 0x2692 <__vector_15+0x112>
    2648:	80 91 90 09 	lds	r24, 0x0990	; 0x800990 <sg_btxMoreAvailable>
    264c:	80 93 8d 09 	sts	0x098D, r24	; 0x80098d <sg_bMCTxNextBit>
    2650:	10 92 92 09 	sts	0x0992, r1	; 0x800992 <sg_u8txBitCount>
    2654:	80 91 90 09 	lds	r24, 0x0990	; 0x800990 <sg_btxMoreAvailable>
    2658:	81 11       	cpse	r24, r1
    265a:	08 c0       	rjmp	.+16     	; 0x266c <__vector_15+0xec>
    265c:	10 92 8f 09 	sts	0x098F, r1	; 0x80098f <sg_etxState>
    2660:	ee e6       	ldi	r30, 0x6E	; 110
    2662:	f0 e0       	ldi	r31, 0x00	; 0
    2664:	80 81       	ld	r24, Z
    2666:	8d 7f       	andi	r24, 0xFD	; 253
    2668:	80 83       	st	Z, r24
    266a:	13 c0       	rjmp	.+38     	; 0x2692 <__vector_15+0x112>
    266c:	0e 94 d1 26 	call	0x4da2	; 0x4da2 <vUARTtxDataAvailable>
    2670:	80 93 90 09 	sts	0x0990, r24	; 0x800990 <sg_btxMoreAvailable>
    2674:	0e 94 9a 22 	call	0x4534	; 0x4534 <vUARTtxDataGet>
    2678:	80 93 91 09 	sts	0x0991, r24	; 0x800991 <sg_u8txDataByte>
    267c:	86 b5       	in	r24, 0x26	; 38
    267e:	88 53       	subi	r24, 0x38	; 56
    2680:	87 bd       	out	0x27, r24	; 39
    2682:	85 b3       	in	r24, 0x15	; 21
    2684:	82 60       	ori	r24, 0x02	; 2
    2686:	85 bb       	out	0x15, r24	; 21
    2688:	ee e6       	ldi	r30, 0x6E	; 110
    268a:	f0 e0       	ldi	r31, 0x00	; 0
    268c:	80 81       	ld	r24, Z
    268e:	82 60       	ori	r24, 0x02	; 2
    2690:	80 83       	st	Z, r24
    2692:	ff 91       	pop	r31
    2694:	ef 91       	pop	r30
    2696:	bf 91       	pop	r27
    2698:	af 91       	pop	r26
    269a:	9f 91       	pop	r25
    269c:	8f 91       	pop	r24
    269e:	7f 91       	pop	r23
    26a0:	6f 91       	pop	r22
    26a2:	5f 91       	pop	r21
    26a4:	4f 91       	pop	r20
    26a6:	3f 91       	pop	r19
    26a8:	2f 91       	pop	r18
    26aa:	0f 90       	pop	r0
    26ac:	0f be       	out	0x3f, r0	; 63
    26ae:	0f 90       	pop	r0
    26b0:	1f 90       	pop	r1
    26b2:	18 95       	reti

Disassembly of section .text.vUARTInit:

00004730 <vUARTInit>:
    4730:	85 b7       	in	r24, 0x35	; 53
    4732:	8f 7e       	andi	r24, 0xEF	; 239
    4734:	85 bf       	out	0x35, r24	; 53
    4736:	84 b1       	in	r24, 0x04	; 4
    4738:	88 60       	ori	r24, 0x08	; 8
    473a:	84 b9       	out	0x04, r24	; 4
    473c:	84 b1       	in	r24, 0x04	; 4
    473e:	8b 7f       	andi	r24, 0xFB	; 251
    4740:	84 b9       	out	0x04, r24	; 4
    4742:	85 b1       	in	r24, 0x05	; 5
    4744:	8b 7f       	andi	r24, 0xFB	; 251
    4746:	85 b9       	out	0x05, r24	; 5
    4748:	8a b1       	in	r24, 0x0a	; 10
    474a:	80 62       	ori	r24, 0x20	; 32
    474c:	8a b9       	out	0x0a, r24	; 10
    474e:	8b b1       	in	r24, 0x0b	; 11
    4750:	80 62       	ori	r24, 0x20	; 32
    4752:	8b b9       	out	0x0b, r24	; 11
    4754:	8d b3       	in	r24, 0x1d	; 29
    4756:	8d 7f       	andi	r24, 0xFD	; 253
    4758:	8d bb       	out	0x1d, r24	; 29
    475a:	10 92 8f 09 	sts	0x098F, r1	; 0x80098f <sg_etxState>
    475e:	85 b1       	in	r24, 0x05	; 5
    4760:	87 7f       	andi	r24, 0xF7	; 247
    4762:	85 b9       	out	0x05, r24	; 5
    4764:	08 95       	ret

Disassembly of section .text.vUARTInitReceive:

00004f2e <vUARTInitReceive>:
    4f2e:	8c e0       	ldi	r24, 0x0C	; 12
    4f30:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f0069>
    4f34:	8c b3       	in	r24, 0x1c	; 28
    4f36:	82 60       	ori	r24, 0x02	; 2
    4f38:	8c bb       	out	0x1c, r24	; 28
    4f3a:	8d b3       	in	r24, 0x1d	; 29
    4f3c:	82 60       	ori	r24, 0x02	; 2
    4f3e:	8d bb       	out	0x1d, r24	; 29
    4f40:	08 95       	ret

Disassembly of section .text.libgcc.div:

00004a80 <__udivmodhi4>:
    4a80:	aa 1b       	sub	r26, r26
    4a82:	bb 1b       	sub	r27, r27
    4a84:	51 e1       	ldi	r21, 0x11	; 17
    4a86:	07 c0       	rjmp	.+14     	; 0x4a96 <__udivmodhi4_ep>

00004a88 <__udivmodhi4_loop>:
    4a88:	aa 1f       	adc	r26, r26
    4a8a:	bb 1f       	adc	r27, r27
    4a8c:	a6 17       	cp	r26, r22
    4a8e:	b7 07       	cpc	r27, r23
    4a90:	10 f0       	brcs	.+4      	; 0x4a96 <__udivmodhi4_ep>
    4a92:	a6 1b       	sub	r26, r22
    4a94:	b7 0b       	sbc	r27, r23

00004a96 <__udivmodhi4_ep>:
    4a96:	88 1f       	adc	r24, r24
    4a98:	99 1f       	adc	r25, r25
    4a9a:	5a 95       	dec	r21
    4a9c:	a9 f7       	brne	.-22     	; 0x4a88 <__udivmodhi4_loop>
    4a9e:	80 95       	com	r24
    4aa0:	90 95       	com	r25
    4aa2:	bc 01       	movw	r22, r24
    4aa4:	cd 01       	movw	r24, r26
    4aa6:	08 95       	ret

Disassembly of section .text.libgcc.div:

000045c4 <__udivmodsi4>:
    45c4:	a1 e2       	ldi	r26, 0x21	; 33
    45c6:	1a 2e       	mov	r1, r26
    45c8:	aa 1b       	sub	r26, r26
    45ca:	bb 1b       	sub	r27, r27
    45cc:	fd 01       	movw	r30, r26
    45ce:	0d c0       	rjmp	.+26     	; 0x45ea <__udivmodsi4_ep>

000045d0 <__udivmodsi4_loop>:
    45d0:	aa 1f       	adc	r26, r26
    45d2:	bb 1f       	adc	r27, r27
    45d4:	ee 1f       	adc	r30, r30
    45d6:	ff 1f       	adc	r31, r31
    45d8:	a2 17       	cp	r26, r18
    45da:	b3 07       	cpc	r27, r19
    45dc:	e4 07       	cpc	r30, r20
    45de:	f5 07       	cpc	r31, r21
    45e0:	20 f0       	brcs	.+8      	; 0x45ea <__udivmodsi4_ep>
    45e2:	a2 1b       	sub	r26, r18
    45e4:	b3 0b       	sbc	r27, r19
    45e6:	e4 0b       	sbc	r30, r20
    45e8:	f5 0b       	sbc	r31, r21

000045ea <__udivmodsi4_ep>:
    45ea:	66 1f       	adc	r22, r22
    45ec:	77 1f       	adc	r23, r23
    45ee:	88 1f       	adc	r24, r24
    45f0:	99 1f       	adc	r25, r25
    45f2:	1a 94       	dec	r1
    45f4:	69 f7       	brne	.-38     	; 0x45d0 <__udivmodsi4_loop>
    45f6:	60 95       	com	r22
    45f8:	70 95       	com	r23
    45fa:	80 95       	com	r24
    45fc:	90 95       	com	r25
    45fe:	9b 01       	movw	r18, r22
    4600:	ac 01       	movw	r20, r24
    4602:	bd 01       	movw	r22, r26
    4604:	cf 01       	movw	r24, r30
    4606:	08 95       	ret

Disassembly of section .text.libgcc.div:

000048fc <__divmodsi4>:
    48fc:	05 2e       	mov	r0, r21
    48fe:	97 fb       	bst	r25, 7
    4900:	1e f4       	brtc	.+6      	; 0x4908 <__divmodsi4+0xc>
    4902:	00 94       	com	r0
    4904:	0e 94 d6 27 	call	0x4fac	; 0x4fac <__negsi2>
    4908:	57 fd       	sbrc	r21, 7
    490a:	07 d0       	rcall	.+14     	; 0x491a <__divmodsi4_neg2>
    490c:	0e 94 e2 22 	call	0x45c4	; 0x45c4 <__udivmodsi4>
    4910:	07 fc       	sbrc	r0, 7
    4912:	03 d0       	rcall	.+6      	; 0x491a <__divmodsi4_neg2>
    4914:	4e f4       	brtc	.+18     	; 0x4928 <__divmodsi4_exit>
    4916:	0c 94 d6 27 	jmp	0x4fac	; 0x4fac <__negsi2>

0000491a <__divmodsi4_neg2>:
    491a:	50 95       	com	r21
    491c:	40 95       	com	r20
    491e:	30 95       	com	r19
    4920:	21 95       	neg	r18
    4922:	3f 4f       	sbci	r19, 0xFF	; 255
    4924:	4f 4f       	sbci	r20, 0xFF	; 255
    4926:	5f 4f       	sbci	r21, 0xFF	; 255

00004928 <__divmodsi4_exit>:
    4928:	08 95       	ret

Disassembly of section .text.libgcc.div:

00004fac <__negsi2>:
    4fac:	90 95       	com	r25
    4fae:	80 95       	com	r24
    4fb0:	70 95       	com	r23
    4fb2:	61 95       	neg	r22
    4fb4:	7f 4f       	sbci	r23, 0xFF	; 255
    4fb6:	8f 4f       	sbci	r24, 0xFF	; 255
    4fb8:	9f 4f       	sbci	r25, 0xFF	; 255
    4fba:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00004e08 <__umulhisi3>:
    4e08:	a2 9f       	mul	r26, r18
    4e0a:	b0 01       	movw	r22, r0
    4e0c:	b3 9f       	mul	r27, r19
    4e0e:	c0 01       	movw	r24, r0
    4e10:	a3 9f       	mul	r26, r19
    4e12:	70 0d       	add	r23, r0
    4e14:	81 1d       	adc	r24, r1
    4e16:	11 24       	eor	r1, r1
    4e18:	91 1d       	adc	r25, r1
    4e1a:	b2 9f       	mul	r27, r18
    4e1c:	70 0d       	add	r23, r0
    4e1e:	81 1d       	adc	r24, r1
    4e20:	11 24       	eor	r1, r1
    4e22:	91 1d       	adc	r25, r1
    4e24:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00005006 <__usmulhisi3>:
    5006:	0e 94 04 27 	call	0x4e08	; 0x4e08 <__umulhisi3>

0000500a <__usmulhisi3_tail>:
    500a:	b7 ff       	sbrs	r27, 7
    500c:	08 95       	ret
    500e:	82 1b       	sub	r24, r18
    5010:	93 0b       	sbc	r25, r19
    5012:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00004eee <__muluhisi3>:
    4eee:	0e 94 04 27 	call	0x4e08	; 0x4e08 <__umulhisi3>
    4ef2:	a5 9f       	mul	r26, r21
    4ef4:	90 0d       	add	r25, r0
    4ef6:	b4 9f       	mul	r27, r20
    4ef8:	90 0d       	add	r25, r0
    4efa:	a4 9f       	mul	r26, r20
    4efc:	80 0d       	add	r24, r0
    4efe:	91 1d       	adc	r25, r1
    4f00:	11 24       	eor	r1, r1
    4f02:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00004fbc <__mulshisi3>:
    4fbc:	b7 ff       	sbrs	r27, 7
    4fbe:	0c 94 77 27 	jmp	0x4eee	; 0x4eee <__muluhisi3>

00004fc2 <__mulohisi3>:
    4fc2:	0e 94 77 27 	call	0x4eee	; 0x4eee <__muluhisi3>
    4fc6:	82 1b       	sub	r24, r18
    4fc8:	93 0b       	sbc	r25, r19
    4fca:	08 95       	ret

Disassembly of section .text.libgcc:

00004fcc <__xload_2>:
    4fcc:	57 fd       	sbrc	r21, 7
    4fce:	03 c0       	rjmp	.+6      	; 0x4fd6 <__xload_2+0xa>
    4fd0:	65 91       	lpm	r22, Z+
    4fd2:	75 91       	lpm	r23, Z+
    4fd4:	08 95       	ret
    4fd6:	61 91       	ld	r22, Z+
    4fd8:	71 91       	ld	r23, Z+
    4fda:	08 95       	ret

Disassembly of section .text.libgcc:

00004e92 <__xload_4>:
    4e92:	57 fd       	sbrc	r21, 7
    4e94:	05 c0       	rjmp	.+10     	; 0x4ea0 <__xload_4+0xe>
    4e96:	65 91       	lpm	r22, Z+
    4e98:	75 91       	lpm	r23, Z+
    4e9a:	85 91       	lpm	r24, Z+
    4e9c:	95 91       	lpm	r25, Z+
    4e9e:	08 95       	ret
    4ea0:	61 91       	ld	r22, Z+
    4ea2:	71 91       	ld	r23, Z+
    4ea4:	81 91       	ld	r24, Z+
    4ea6:	91 91       	ld	r25, Z+
    4ea8:	08 95       	ret

Disassembly of section .text.libgcc:

00004eaa <__adddi3_s8>:
    4eaa:	00 24       	eor	r0, r0
    4eac:	a7 fd       	sbrc	r26, 7
    4eae:	00 94       	com	r0
    4eb0:	2a 0f       	add	r18, r26
    4eb2:	30 1d       	adc	r19, r0
    4eb4:	40 1d       	adc	r20, r0
    4eb6:	50 1d       	adc	r21, r0
    4eb8:	60 1d       	adc	r22, r0
    4eba:	70 1d       	adc	r23, r0
    4ebc:	80 1d       	adc	r24, r0
    4ebe:	90 1d       	adc	r25, r0
    4ec0:	08 95       	ret

Disassembly of section .text.__dummy_fini:

00005064 <_fini>:
    5064:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00005066 <__funcs_on_exit>:
    5066:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00005068 <__simulator_exit>:
    5068:	08 95       	ret

Disassembly of section .text.exit:

00004f04 <exit>:
    4f04:	ec 01       	movw	r28, r24
    4f06:	0e 94 33 28 	call	0x5066	; 0x5066 <__funcs_on_exit>
    4f0a:	0e 94 32 28 	call	0x5064	; 0x5064 <_fini>
    4f0e:	ce 01       	movw	r24, r28
    4f10:	0e 94 34 28 	call	0x5068	; 0x5068 <__simulator_exit>
    4f14:	ce 01       	movw	r24, r28
    4f16:	0e 94 2f 28 	call	0x505e	; 0x505e <_Exit>

Disassembly of section .text.memcpy:

0000489c <memcpy>:
    489c:	cf 92       	push	r12
    489e:	df 92       	push	r13
    48a0:	ef 92       	push	r14
    48a2:	6a 01       	movw	r12, r20
    48a4:	e6 2e       	mov	r14, r22
    48a6:	dc 01       	movw	r26, r24
    48a8:	28 0f       	add	r18, r24
    48aa:	39 1f       	adc	r19, r25
    48ac:	a2 17       	cp	r26, r18
    48ae:	b3 07       	cpc	r27, r19
    48b0:	51 f0       	breq	.+20     	; 0x48c6 <memcpy+0x2a>
    48b2:	f6 01       	movw	r30, r12
    48b4:	44 91       	lpm	r20, Z
    48b6:	e7 fc       	sbrc	r14, 7
    48b8:	40 81       	ld	r20, Z
    48ba:	4d 93       	st	X+, r20
    48bc:	4f ef       	ldi	r20, 0xFF	; 255
    48be:	c4 1a       	sub	r12, r20
    48c0:	d4 0a       	sbc	r13, r20
    48c2:	e4 0a       	sbc	r14, r20
    48c4:	f3 cf       	rjmp	.-26     	; 0x48ac <memcpy+0x10>
    48c6:	ef 90       	pop	r14
    48c8:	df 90       	pop	r13
    48ca:	cf 90       	pop	r12
    48cc:	08 95       	ret

Disassembly of section .text.memset:

00004f54 <memset>:
    4f54:	fc 01       	movw	r30, r24
    4f56:	48 0f       	add	r20, r24
    4f58:	59 1f       	adc	r21, r25
    4f5a:	e4 17       	cp	r30, r20
    4f5c:	f5 07       	cpc	r31, r21
    4f5e:	11 f0       	breq	.+4      	; 0x4f64 <memset+0x10>
    4f60:	61 93       	st	Z+, r22
    4f62:	fb cf       	rjmp	.-10     	; 0x4f5a <memset+0x6>
    4f64:	08 95       	ret

Disassembly of section .text.gmtime:

0000504a <gmtime>:
    504a:	48 e0       	ldi	r20, 0x08	; 8
    504c:	59 e0       	ldi	r21, 0x09	; 9
    504e:	0e 94 3b 1f 	call	0x3e76	; 0x3e76 <__gmtime_r>
    5052:	08 95       	ret

Disassembly of section .text.__gmtime_r:

00003e76 <__gmtime_r>:
    3e76:	a0 e0       	ldi	r26, 0x00	; 0
    3e78:	b0 e0       	ldi	r27, 0x00	; 0
    3e7a:	e1 e4       	ldi	r30, 0x41	; 65
    3e7c:	ff e1       	ldi	r31, 0x1F	; 31
    3e7e:	0c 94 82 23 	jmp	0x4704	; 0x4704 <__prologue_saves__+0xc>
    3e82:	ea 01       	movw	r28, r20
    3e84:	fb 01       	movw	r30, r22
    3e86:	58 2f       	mov	r21, r24
    3e88:	0e 94 49 27 	call	0x4e92	; 0x4e92 <__xload_4>
    3e8c:	4b 01       	movw	r8, r22
    3e8e:	5c 01       	movw	r10, r24
    3e90:	c1 2c       	mov	r12, r1
    3e92:	d1 2c       	mov	r13, r1
    3e94:	76 01       	movw	r14, r12
    3e96:	8e 01       	movw	r16, r28
    3e98:	9b 01       	movw	r18, r22
    3e9a:	a5 01       	movw	r20, r10
    3e9c:	60 e0       	ldi	r22, 0x00	; 0
    3e9e:	70 e0       	ldi	r23, 0x00	; 0
    3ea0:	80 e0       	ldi	r24, 0x00	; 0
    3ea2:	90 e0       	ldi	r25, 0x00	; 0
    3ea4:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <__secs_to_tm>
    3ea8:	97 ff       	sbrs	r25, 7
    3eaa:	09 c0       	rjmp	.+18     	; 0x3ebe <__gmtime_r+0x48>
    3eac:	8f e4       	ldi	r24, 0x4F	; 79
    3eae:	90 e0       	ldi	r25, 0x00	; 0
    3eb0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    3eb4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    3eb8:	80 e0       	ldi	r24, 0x00	; 0
    3eba:	90 e0       	ldi	r25, 0x00	; 0
    3ebc:	0d c0       	rjmp	.+26     	; 0x3ed8 <__gmtime_r+0x62>
    3ebe:	19 8a       	std	Y+17, r1	; 0x11
    3ec0:	18 8a       	std	Y+16, r1	; 0x10
    3ec2:	1a 8a       	std	Y+18, r1	; 0x12
    3ec4:	1b 8a       	std	Y+19, r1	; 0x13
    3ec6:	1c 8a       	std	Y+20, r1	; 0x14
    3ec8:	1d 8a       	std	Y+21, r1	; 0x15
    3eca:	8f ea       	ldi	r24, 0xAF	; 175
    3ecc:	93 e0       	ldi	r25, 0x03	; 3
    3ece:	a0 e0       	ldi	r26, 0x00	; 0
    3ed0:	8e 8b       	std	Y+22, r24	; 0x16
    3ed2:	9f 8b       	std	Y+23, r25	; 0x17
    3ed4:	a8 8f       	std	Y+24, r26	; 0x18
    3ed6:	ce 01       	movw	r24, r28
    3ed8:	cd b7       	in	r28, 0x3d	; 61
    3eda:	de b7       	in	r29, 0x3e	; 62
    3edc:	ec e0       	ldi	r30, 0x0C	; 12
    3ede:	0c 94 b9 23 	jmp	0x4772	; 0x4772 <__epilogue_restores__+0xc>

Disassembly of section .text.mktime:

00003a86 <mktime>:
    3a86:	a9 e1       	ldi	r26, 0x19	; 25
    3a88:	b0 e0       	ldi	r27, 0x00	; 0
    3a8a:	e9 e4       	ldi	r30, 0x49	; 73
    3a8c:	fd e1       	ldi	r31, 0x1D	; 29
    3a8e:	0c 94 7e 23 	jmp	0x46fc	; 0x46fc <__prologue_saves__+0x4>
    3a92:	2c 01       	movw	r4, r24
    3a94:	bc 01       	movw	r22, r24
    3a96:	80 e8       	ldi	r24, 0x80	; 128
    3a98:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <__tm_to_secs>
    3a9c:	39 01       	movw	r6, r18
    3a9e:	4a 01       	movw	r8, r20
    3aa0:	59 01       	movw	r10, r18
    3aa2:	6a 01       	movw	r12, r20
    3aa4:	e1 2c       	mov	r14, r1
    3aa6:	f1 2c       	mov	r15, r1
    3aa8:	00 e0       	ldi	r16, 0x00	; 0
    3aaa:	10 e0       	ldi	r17, 0x00	; 0
    3aac:	0e 94 c5 27 	call	0x4f8a	; 0x4f8a <__cmpdi2>
    3ab0:	f9 f4       	brne	.+62     	; 0x3af0 <mktime+0x6a>
    3ab2:	1a 8a       	std	Y+18, r1	; 0x12
    3ab4:	19 8a       	std	Y+17, r1	; 0x11
    3ab6:	1b 8a       	std	Y+19, r1	; 0x13
    3ab8:	1c 8a       	std	Y+20, r1	; 0x14
    3aba:	1d 8a       	std	Y+21, r1	; 0x15
    3abc:	1e 8a       	std	Y+22, r1	; 0x16
    3abe:	23 eb       	ldi	r18, 0xB3	; 179
    3ac0:	33 e0       	ldi	r19, 0x03	; 3
    3ac2:	40 e0       	ldi	r20, 0x00	; 0
    3ac4:	2f 8b       	std	Y+23, r18	; 0x17
    3ac6:	38 8f       	std	Y+24, r19	; 0x18
    3ac8:	49 8f       	std	Y+25, r20	; 0x19
    3aca:	8e 01       	movw	r16, r28
    3acc:	0f 5f       	subi	r16, 0xFF	; 255
    3ace:	1f 4f       	sbci	r17, 0xFF	; 255
    3ad0:	93 01       	movw	r18, r6
    3ad2:	48 2d       	mov	r20, r8
    3ad4:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <__secs_to_tm>
    3ad8:	97 fd       	sbrc	r25, 7
    3ada:	0a c0       	rjmp	.+20     	; 0x3af0 <mktime+0x6a>
    3adc:	89 e1       	ldi	r24, 0x19	; 25
    3ade:	f8 01       	movw	r30, r16
    3ae0:	d2 01       	movw	r26, r4
    3ae2:	01 90       	ld	r0, Z+
    3ae4:	0d 92       	st	X+, r0
    3ae6:	8a 95       	dec	r24
    3ae8:	e1 f7       	brne	.-8      	; 0x3ae2 <mktime+0x5c>
    3aea:	b3 01       	movw	r22, r6
    3aec:	c4 01       	movw	r24, r8
    3aee:	0a c0       	rjmp	.+20     	; 0x3b04 <mktime+0x7e>
    3af0:	8f e4       	ldi	r24, 0x4F	; 79
    3af2:	90 e0       	ldi	r25, 0x00	; 0
    3af4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    3af8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    3afc:	6f ef       	ldi	r22, 0xFF	; 255
    3afe:	7f ef       	ldi	r23, 0xFF	; 255
    3b00:	8f ef       	ldi	r24, 0xFF	; 255
    3b02:	9f ef       	ldi	r25, 0xFF	; 255
    3b04:	69 96       	adiw	r28, 0x19	; 25
    3b06:	e0 e1       	ldi	r30, 0x10	; 16
    3b08:	0c 94 b5 23 	jmp	0x476a	; 0x476a <__epilogue_restores__+0x4>

Disassembly of section .text._Exit:

0000505e <_Exit>:
    505e:	0e 94 6b 00 	call	0xd6	; 0xd6 <_exit>

Disassembly of section .text.__tm_to_secs:

00001cfc <__tm_to_secs>:
    1cfc:	a5 e0       	ldi	r26, 0x05	; 5
    1cfe:	b0 e0       	ldi	r27, 0x00	; 0
    1d00:	e4 e8       	ldi	r30, 0x84	; 132
    1d02:	fe e0       	ldi	r31, 0x0E	; 14
    1d04:	0c 94 7c 23 	jmp	0x46f8	; 0x46f8 <__prologue_saves__>
    1d08:	3b 01       	movw	r6, r22
    1d0a:	88 2e       	mov	r8, r24
    1d0c:	a8 2f       	mov	r26, r24
    1d0e:	cb 01       	movw	r24, r22
    1d10:	0a 96       	adiw	r24, 0x0a	; 10
    1d12:	a1 1d       	adc	r26, r1
    1d14:	fc 01       	movw	r30, r24
    1d16:	5a 2f       	mov	r21, r26
    1d18:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <__xload_2>
    1d1c:	5b 01       	movw	r10, r22
    1d1e:	9b 01       	movw	r18, r22
    1d20:	9b 2c       	mov	r9, r11
    1d22:	99 0c       	add	r9, r9
    1d24:	99 08       	sbc	r9, r9
    1d26:	f9 2c       	mov	r15, r9
    1d28:	b9 2d       	mov	r27, r9
    1d2a:	a9 2d       	mov	r26, r9
    1d2c:	89 2d       	mov	r24, r9
    1d2e:	99 2d       	mov	r25, r9
    1d30:	e8 2c       	mov	r14, r8
    1d32:	63 01       	movw	r12, r6
    1d34:	48 e0       	ldi	r20, 0x08	; 8
    1d36:	c4 0e       	add	r12, r20
    1d38:	d1 1c       	adc	r13, r1
    1d3a:	e1 1c       	adc	r14, r1
    1d3c:	f6 01       	movw	r30, r12
    1d3e:	5e 2d       	mov	r21, r14
    1d40:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <__xload_2>
    1d44:	2b 01       	movw	r4, r22
    1d46:	6c 30       	cpi	r22, 0x0C	; 12
    1d48:	71 05       	cpc	r23, r1
    1d4a:	10 f1       	brcs	.+68     	; 0x1d90 <__tm_to_secs+0x94>
    1d4c:	cb 01       	movw	r24, r22
    1d4e:	6c e0       	ldi	r22, 0x0C	; 12
    1d50:	70 e0       	ldi	r23, 0x00	; 0
    1d52:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <__divmodhi4>
    1d56:	2c 01       	movw	r4, r24
    1d58:	97 ff       	sbrs	r25, 7
    1d5a:	05 c0       	rjmp	.+10     	; 0x1d66 <__tm_to_secs+0x6a>
    1d5c:	61 50       	subi	r22, 0x01	; 1
    1d5e:	71 09       	sbc	r23, r1
    1d60:	8c e0       	ldi	r24, 0x0C	; 12
    1d62:	48 0e       	add	r4, r24
    1d64:	51 1c       	adc	r5, r1
    1d66:	97 2f       	mov	r25, r23
    1d68:	99 0f       	add	r25, r25
    1d6a:	99 0b       	sbc	r25, r25
    1d6c:	9b 01       	movw	r18, r22
    1d6e:	49 2f       	mov	r20, r25
    1d70:	59 2f       	mov	r21, r25
    1d72:	69 2f       	mov	r22, r25
    1d74:	79 2f       	mov	r23, r25
    1d76:	89 2f       	mov	r24, r25
    1d78:	c9 2c       	mov	r12, r9
    1d7a:	d9 2c       	mov	r13, r9
    1d7c:	e9 2c       	mov	r14, r9
    1d7e:	f9 2c       	mov	r15, r9
    1d80:	09 2d       	mov	r16, r9
    1d82:	19 2d       	mov	r17, r9
    1d84:	0e 94 bc 27 	call	0x4f78	; 0x4f78 <__adddi3>
    1d88:	94 2e       	mov	r9, r20
    1d8a:	f5 2e       	mov	r15, r21
    1d8c:	b6 2f       	mov	r27, r22
    1d8e:	a7 2f       	mov	r26, r23
    1d90:	8e 01       	movw	r16, r28
    1d92:	0f 5f       	subi	r16, 0xFF	; 255
    1d94:	1f 4f       	sbci	r17, 0xFF	; 255
    1d96:	49 2d       	mov	r20, r9
    1d98:	5f 2d       	mov	r21, r15
    1d9a:	6b 2f       	mov	r22, r27
    1d9c:	7a 2f       	mov	r23, r26
    1d9e:	0e 94 2a 0a 	call	0x1454	; 0x1454 <__year_to_secs>
    1da2:	59 01       	movw	r10, r18
    1da4:	6a 01       	movw	r12, r20
    1da6:	7b 01       	movw	r14, r22
    1da8:	8c 01       	movw	r16, r24
    1daa:	69 81       	ldd	r22, Y+1	; 0x01
    1dac:	7a 81       	ldd	r23, Y+2	; 0x02
    1dae:	c2 01       	movw	r24, r4
    1db0:	0e 94 41 23 	call	0x4682	; 0x4682 <__month_to_secs>
    1db4:	1b 01       	movw	r2, r22
    1db6:	2c 01       	movw	r4, r24
    1db8:	55 0c       	add	r5, r5
    1dba:	22 08       	sbc	r2, r2
    1dbc:	32 2c       	mov	r3, r2
    1dbe:	21 01       	movw	r4, r2
    1dc0:	9b 01       	movw	r18, r22
    1dc2:	ac 01       	movw	r20, r24
    1dc4:	62 2d       	mov	r22, r2
    1dc6:	72 2d       	mov	r23, r2
    1dc8:	82 2d       	mov	r24, r2
    1dca:	92 2d       	mov	r25, r2
    1dcc:	0e 94 bc 27 	call	0x4f78	; 0x4f78 <__adddi3>
    1dd0:	19 01       	movw	r2, r18
    1dd2:	2a 01       	movw	r4, r20
    1dd4:	96 2e       	mov	r9, r22
    1dd6:	7b 83       	std	Y+3, r23	; 0x03
    1dd8:	8c 83       	std	Y+4, r24	; 0x04
    1dda:	9d 83       	std	Y+5, r25	; 0x05
    1ddc:	a8 2d       	mov	r26, r8
    1dde:	c3 01       	movw	r24, r6
    1de0:	06 96       	adiw	r24, 0x06	; 6
    1de2:	a1 1d       	adc	r26, r1
    1de4:	fc 01       	movw	r30, r24
    1de6:	5a 2f       	mov	r21, r26
    1de8:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <__xload_2>
    1dec:	61 50       	subi	r22, 0x01	; 1
    1dee:	71 09       	sbc	r23, r1
    1df0:	97 2f       	mov	r25, r23
    1df2:	99 0f       	add	r25, r25
    1df4:	99 0b       	sbc	r25, r25
    1df6:	30 e8       	ldi	r19, 0x80	; 128
    1df8:	a3 2e       	mov	r10, r19
    1dfa:	41 e5       	ldi	r20, 0x51	; 81
    1dfc:	b4 2e       	mov	r11, r20
    1dfe:	cc 24       	eor	r12, r12
    1e00:	c3 94       	inc	r12
    1e02:	d1 2c       	mov	r13, r1
    1e04:	e1 2c       	mov	r14, r1
    1e06:	f1 2c       	mov	r15, r1
    1e08:	00 e0       	ldi	r16, 0x00	; 0
    1e0a:	10 e0       	ldi	r17, 0x00	; 0
    1e0c:	9b 01       	movw	r18, r22
    1e0e:	49 2f       	mov	r20, r25
    1e10:	59 2f       	mov	r21, r25
    1e12:	69 2f       	mov	r22, r25
    1e14:	79 2f       	mov	r23, r25
    1e16:	89 2f       	mov	r24, r25
    1e18:	0e 94 4a 1b 	call	0x3694	; 0x3694 <__muldi3>
    1e1c:	51 01       	movw	r10, r2
    1e1e:	62 01       	movw	r12, r4
    1e20:	e9 2c       	mov	r14, r9
    1e22:	fb 80       	ldd	r15, Y+3	; 0x03
    1e24:	0c 81       	ldd	r16, Y+4	; 0x04
    1e26:	1d 81       	ldd	r17, Y+5	; 0x05
    1e28:	0e 94 bc 27 	call	0x4f78	; 0x4f78 <__adddi3>
    1e2c:	59 01       	movw	r10, r18
    1e2e:	6a 01       	movw	r12, r20
    1e30:	7b 01       	movw	r14, r22
    1e32:	8c 01       	movw	r16, r24
    1e34:	a8 2d       	mov	r26, r8
    1e36:	c3 01       	movw	r24, r6
    1e38:	04 96       	adiw	r24, 0x04	; 4
    1e3a:	a1 1d       	adc	r26, r1
    1e3c:	fc 01       	movw	r30, r24
    1e3e:	5a 2f       	mov	r21, r26
    1e40:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <__xload_2>
    1e44:	07 2e       	mov	r0, r23
    1e46:	00 0c       	add	r0, r0
    1e48:	88 0b       	sbc	r24, r24
    1e4a:	99 0b       	sbc	r25, r25
    1e4c:	20 e1       	ldi	r18, 0x10	; 16
    1e4e:	3e e0       	ldi	r19, 0x0E	; 14
    1e50:	40 e0       	ldi	r20, 0x00	; 0
    1e52:	50 e0       	ldi	r21, 0x00	; 0
    1e54:	0e 94 13 27 	call	0x4e26	; 0x4e26 <__mulsidi3>
    1e58:	0e 94 bc 27 	call	0x4f78	; 0x4f78 <__adddi3>
    1e5c:	59 01       	movw	r10, r18
    1e5e:	6a 01       	movw	r12, r20
    1e60:	7b 01       	movw	r14, r22
    1e62:	8c 01       	movw	r16, r24
    1e64:	a8 2d       	mov	r26, r8
    1e66:	c3 01       	movw	r24, r6
    1e68:	02 96       	adiw	r24, 0x02	; 2
    1e6a:	a1 1d       	adc	r26, r1
    1e6c:	fc 01       	movw	r30, r24
    1e6e:	5a 2f       	mov	r21, r26
    1e70:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <__xload_2>
    1e74:	07 2e       	mov	r0, r23
    1e76:	00 0c       	add	r0, r0
    1e78:	88 0b       	sbc	r24, r24
    1e7a:	99 0b       	sbc	r25, r25
    1e7c:	2c e3       	ldi	r18, 0x3C	; 60
    1e7e:	30 e0       	ldi	r19, 0x00	; 0
    1e80:	40 e0       	ldi	r20, 0x00	; 0
    1e82:	50 e0       	ldi	r21, 0x00	; 0
    1e84:	0e 94 13 27 	call	0x4e26	; 0x4e26 <__mulsidi3>
    1e88:	0e 94 bc 27 	call	0x4f78	; 0x4f78 <__adddi3>
    1e8c:	59 01       	movw	r10, r18
    1e8e:	6a 01       	movw	r12, r20
    1e90:	7b 01       	movw	r14, r22
    1e92:	8c 01       	movw	r16, r24
    1e94:	f3 01       	movw	r30, r6
    1e96:	58 2d       	mov	r21, r8
    1e98:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <__xload_2>
    1e9c:	9b 01       	movw	r18, r22
    1e9e:	93 2f       	mov	r25, r19
    1ea0:	99 0f       	add	r25, r25
    1ea2:	99 0b       	sbc	r25, r25
    1ea4:	49 2f       	mov	r20, r25
    1ea6:	59 2f       	mov	r21, r25
    1ea8:	69 2f       	mov	r22, r25
    1eaa:	79 2f       	mov	r23, r25
    1eac:	89 2f       	mov	r24, r25
    1eae:	0e 94 bc 27 	call	0x4f78	; 0x4f78 <__adddi3>
    1eb2:	25 96       	adiw	r28, 0x05	; 5
    1eb4:	e2 e1       	ldi	r30, 0x12	; 18
    1eb6:	0c 94 b3 23 	jmp	0x4766	; 0x4766 <__epilogue_restores__>

Disassembly of section .text.__year_to_secs:

00001454 <__year_to_secs>:
    1454:	ac e0       	ldi	r26, 0x0C	; 12
    1456:	b0 e0       	ldi	r27, 0x00	; 0
    1458:	e0 e3       	ldi	r30, 0x30	; 48
    145a:	fa e0       	ldi	r31, 0x0A	; 10
    145c:	0c 94 7c 23 	jmp	0x46f8	; 0x46f8 <__prologue_saves__>
    1460:	49 01       	movw	r8, r18
    1462:	5a 01       	movw	r10, r20
    1464:	6b 01       	movw	r12, r22
    1466:	7c 01       	movw	r14, r24
    1468:	1c 83       	std	Y+4, r17	; 0x04
    146a:	0b 83       	std	Y+3, r16	; 0x03
    146c:	2a 38       	cpi	r18, 0x8A	; 138
    146e:	31 05       	cpc	r19, r1
    1470:	41 05       	cpc	r20, r1
    1472:	51 05       	cpc	r21, r1
    1474:	61 05       	cpc	r22, r1
    1476:	71 05       	cpc	r23, r1
    1478:	81 05       	cpc	r24, r1
    147a:	91 05       	cpc	r25, r1
    147c:	11 f0       	breq	.+4      	; 0x1482 <__year_to_secs+0x2e>
    147e:	0c f0       	brlt	.+2      	; 0x1482 <__year_to_secs+0x2e>
    1480:	42 c0       	rjmp	.+132    	; 0x1506 <__year_to_secs+0xb2>
    1482:	f9 01       	movw	r30, r18
    1484:	e4 54       	subi	r30, 0x44	; 68
    1486:	f1 09       	sbc	r31, r1
    1488:	f5 95       	asr	r31
    148a:	e7 95       	ror	r30
    148c:	f5 95       	asr	r31
    148e:	e7 95       	ror	r30
    1490:	c9 01       	movw	r24, r18
    1492:	83 70       	andi	r24, 0x03	; 3
    1494:	99 27       	eor	r25, r25
    1496:	89 2b       	or	r24, r25
    1498:	51 f4       	brne	.+20     	; 0x14ae <__year_to_secs+0x5a>
    149a:	31 97       	sbiw	r30, 0x01	; 1
    149c:	01 15       	cp	r16, r1
    149e:	11 05       	cpc	r17, r1
    14a0:	69 f0       	breq	.+26     	; 0x14bc <__year_to_secs+0x68>
    14a2:	81 e0       	ldi	r24, 0x01	; 1
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	d8 01       	movw	r26, r16
    14a8:	8d 93       	st	X+, r24
    14aa:	9c 93       	st	X, r25
    14ac:	07 c0       	rjmp	.+14     	; 0x14bc <__year_to_secs+0x68>
    14ae:	8b 81       	ldd	r24, Y+3	; 0x03
    14b0:	9c 81       	ldd	r25, Y+4	; 0x04
    14b2:	00 97       	sbiw	r24, 0x00	; 0
    14b4:	19 f0       	breq	.+6      	; 0x14bc <__year_to_secs+0x68>
    14b6:	dc 01       	movw	r26, r24
    14b8:	1d 92       	st	X+, r1
    14ba:	1c 92       	st	X, r1
    14bc:	d9 01       	movw	r26, r18
    14be:	a6 54       	subi	r26, 0x46	; 70
    14c0:	b1 09       	sbc	r27, r1
    14c2:	20 e8       	ldi	r18, 0x80	; 128
    14c4:	33 e3       	ldi	r19, 0x33	; 51
    14c6:	41 ee       	ldi	r20, 0xE1	; 225
    14c8:	51 e0       	ldi	r21, 0x01	; 1
    14ca:	0e 94 de 27 	call	0x4fbc	; 0x4fbc <__mulshisi3>
    14ce:	6b 01       	movw	r12, r22
    14d0:	7c 01       	movw	r14, r24
    14d2:	df 01       	movw	r26, r30
    14d4:	20 e8       	ldi	r18, 0x80	; 128
    14d6:	31 e5       	ldi	r19, 0x51	; 81
    14d8:	41 e0       	ldi	r20, 0x01	; 1
    14da:	50 e0       	ldi	r21, 0x00	; 0
    14dc:	0e 94 de 27 	call	0x4fbc	; 0x4fbc <__mulshisi3>
    14e0:	dc 01       	movw	r26, r24
    14e2:	cb 01       	movw	r24, r22
    14e4:	8c 0d       	add	r24, r12
    14e6:	9d 1d       	adc	r25, r13
    14e8:	ae 1d       	adc	r26, r14
    14ea:	bf 1d       	adc	r27, r15
    14ec:	9c 01       	movw	r18, r24
    14ee:	ad 01       	movw	r20, r26
    14f0:	6c 01       	movw	r12, r24
    14f2:	7d 01       	movw	r14, r26
    14f4:	ff 0c       	add	r15, r15
    14f6:	cc 08       	sbc	r12, r12
    14f8:	dc 2c       	mov	r13, r12
    14fa:	76 01       	movw	r14, r12
    14fc:	ac 2d       	mov	r26, r12
    14fe:	fc 2d       	mov	r31, r12
    1500:	ec 2d       	mov	r30, r12
    1502:	9c 2d       	mov	r25, r12
    1504:	cb c0       	rjmp	.+406    	; 0x169c <__year_to_secs+0x248>
    1506:	eb 81       	ldd	r30, Y+3	; 0x03
    1508:	fc 81       	ldd	r31, Y+4	; 0x04
    150a:	ef 2b       	or	r30, r31
    150c:	31 f4       	brne	.+12     	; 0x151a <__year_to_secs+0xc6>
    150e:	1a 82       	std	Y+2, r1	; 0x02
    1510:	19 82       	std	Y+1, r1	; 0x01
    1512:	ce 01       	movw	r24, r28
    1514:	01 96       	adiw	r24, 0x01	; 1
    1516:	9c 83       	std	Y+4, r25	; 0x04
    1518:	8b 83       	std	Y+3, r24	; 0x03
    151a:	c4 01       	movw	r24, r8
    151c:	84 56       	subi	r24, 0x64	; 100
    151e:	91 09       	sbc	r25, r1
    1520:	60 e9       	ldi	r22, 0x90	; 144
    1522:	71 e0       	ldi	r23, 0x01	; 1
    1524:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <__divmodhi4>
    1528:	7e 83       	std	Y+6, r23	; 0x06
    152a:	6d 83       	std	Y+5, r22	; 0x05
    152c:	94 01       	movw	r18, r8
    152e:	a5 01       	movw	r20, r10
    1530:	b6 01       	movw	r22, r12
    1532:	c7 01       	movw	r24, r14
    1534:	ac e9       	ldi	r26, 0x9C	; 156
    1536:	0e 94 55 27 	call	0x4eaa	; 0x4eaa <__adddi3_s8>
    153a:	19 01       	movw	r2, r18
    153c:	2a 01       	movw	r4, r20
    153e:	3b 01       	movw	r6, r22
    1540:	8f 83       	std	Y+7, r24	; 0x07
    1542:	98 87       	std	Y+8, r25	; 0x08
    1544:	70 e9       	ldi	r23, 0x90	; 144
    1546:	a7 2e       	mov	r10, r23
    1548:	bb 24       	eor	r11, r11
    154a:	b3 94       	inc	r11
    154c:	c1 2c       	mov	r12, r1
    154e:	d1 2c       	mov	r13, r1
    1550:	e1 2c       	mov	r14, r1
    1552:	f1 2c       	mov	r15, r1
    1554:	00 e0       	ldi	r16, 0x00	; 0
    1556:	10 e0       	ldi	r17, 0x00	; 0
    1558:	91 01       	movw	r18, r2
    155a:	a2 01       	movw	r20, r4
    155c:	b3 01       	movw	r22, r6
    155e:	0e 94 3e 20 	call	0x407c	; 0x407c <__moddi3>
    1562:	c9 01       	movw	r24, r18
    1564:	00 97       	sbiw	r24, 0x00	; 0
    1566:	59 f4       	brne	.+22     	; 0x157e <__year_to_secs+0x12a>
    1568:	81 e0       	ldi	r24, 0x01	; 1
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	ab 81       	ldd	r26, Y+3	; 0x03
    156e:	bc 81       	ldd	r27, Y+4	; 0x04
    1570:	8d 93       	st	X+, r24
    1572:	9c 93       	st	X, r25
    1574:	20 e0       	ldi	r18, 0x00	; 0
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	40 e0       	ldi	r20, 0x00	; 0
    157a:	50 e0       	ldi	r21, 0x00	; 0
    157c:	33 c0       	rjmp	.+102    	; 0x15e4 <__year_to_secs+0x190>
    157e:	28 3c       	cpi	r18, 0xC8	; 200
    1580:	31 05       	cpc	r19, r1
    1582:	6c f0       	brlt	.+26     	; 0x159e <__year_to_secs+0x14a>
    1584:	2c 32       	cpi	r18, 0x2C	; 44
    1586:	31 40       	sbci	r19, 0x01	; 1
    1588:	2c f0       	brlt	.+10     	; 0x1594 <__year_to_secs+0x140>
    158a:	8c 52       	subi	r24, 0x2C	; 44
    158c:	91 40       	sbci	r25, 0x01	; 1
    158e:	43 e0       	ldi	r20, 0x03	; 3
    1590:	50 e0       	ldi	r21, 0x00	; 0
    1592:	0c c0       	rjmp	.+24     	; 0x15ac <__year_to_secs+0x158>
    1594:	88 5c       	subi	r24, 0xC8	; 200
    1596:	91 09       	sbc	r25, r1
    1598:	42 e0       	ldi	r20, 0x02	; 2
    159a:	50 e0       	ldi	r21, 0x00	; 0
    159c:	07 c0       	rjmp	.+14     	; 0x15ac <__year_to_secs+0x158>
    159e:	24 36       	cpi	r18, 0x64	; 100
    15a0:	31 05       	cpc	r19, r1
    15a2:	6c f0       	brlt	.+26     	; 0x15be <__year_to_secs+0x16a>
    15a4:	84 56       	subi	r24, 0x64	; 100
    15a6:	91 09       	sbc	r25, r1
    15a8:	41 e0       	ldi	r20, 0x01	; 1
    15aa:	50 e0       	ldi	r21, 0x00	; 0
    15ac:	00 97       	sbiw	r24, 0x00	; 0
    15ae:	49 f4       	brne	.+18     	; 0x15c2 <__year_to_secs+0x16e>
    15b0:	eb 81       	ldd	r30, Y+3	; 0x03
    15b2:	fc 81       	ldd	r31, Y+4	; 0x04
    15b4:	11 82       	std	Z+1, r1	; 0x01
    15b6:	10 82       	st	Z, r1
    15b8:	20 e0       	ldi	r18, 0x00	; 0
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	13 c0       	rjmp	.+38     	; 0x15e4 <__year_to_secs+0x190>
    15be:	40 e0       	ldi	r20, 0x00	; 0
    15c0:	50 e0       	ldi	r21, 0x00	; 0
    15c2:	9c 01       	movw	r18, r24
    15c4:	36 95       	lsr	r19
    15c6:	27 95       	ror	r18
    15c8:	36 95       	lsr	r19
    15ca:	27 95       	ror	r18
    15cc:	83 70       	andi	r24, 0x03	; 3
    15ce:	99 27       	eor	r25, r25
    15d0:	61 e0       	ldi	r22, 0x01	; 1
    15d2:	70 e0       	ldi	r23, 0x00	; 0
    15d4:	89 2b       	or	r24, r25
    15d6:	11 f0       	breq	.+4      	; 0x15dc <__year_to_secs+0x188>
    15d8:	60 e0       	ldi	r22, 0x00	; 0
    15da:	70 e0       	ldi	r23, 0x00	; 0
    15dc:	ab 81       	ldd	r26, Y+3	; 0x03
    15de:	bc 81       	ldd	r27, Y+4	; 0x04
    15e0:	6d 93       	st	X+, r22
    15e2:	7c 93       	st	X, r23
    15e4:	81 e6       	ldi	r24, 0x61	; 97
    15e6:	ed 81       	ldd	r30, Y+5	; 0x05
    15e8:	fe 81       	ldd	r31, Y+6	; 0x06
    15ea:	8e 9f       	mul	r24, r30
    15ec:	b0 01       	movw	r22, r0
    15ee:	8f 9f       	mul	r24, r31
    15f0:	70 0d       	add	r23, r0
    15f2:	11 24       	eor	r1, r1
    15f4:	e8 e1       	ldi	r30, 0x18	; 24
    15f6:	e4 9f       	mul	r30, r20
    15f8:	c0 01       	movw	r24, r0
    15fa:	e5 9f       	mul	r30, r21
    15fc:	90 0d       	add	r25, r0
    15fe:	11 24       	eor	r1, r1
    1600:	86 0f       	add	r24, r22
    1602:	97 1f       	adc	r25, r23
    1604:	ab 81       	ldd	r26, Y+3	; 0x03
    1606:	bc 81       	ldd	r27, Y+4	; 0x04
    1608:	4d 91       	ld	r20, X+
    160a:	5c 91       	ld	r21, X
    160c:	84 1b       	sub	r24, r20
    160e:	95 0b       	sbc	r25, r21
    1610:	82 0f       	add	r24, r18
    1612:	93 1f       	adc	r25, r19
    1614:	e9 2f       	mov	r30, r25
    1616:	ee 0f       	add	r30, r30
    1618:	ee 0b       	sbc	r30, r30
    161a:	20 e8       	ldi	r18, 0x80	; 128
    161c:	a2 2e       	mov	r10, r18
    161e:	31 e5       	ldi	r19, 0x51	; 81
    1620:	b3 2e       	mov	r11, r19
    1622:	cc 24       	eor	r12, r12
    1624:	c3 94       	inc	r12
    1626:	d1 2c       	mov	r13, r1
    1628:	e1 2c       	mov	r14, r1
    162a:	f1 2c       	mov	r15, r1
    162c:	00 e0       	ldi	r16, 0x00	; 0
    162e:	10 e0       	ldi	r17, 0x00	; 0
    1630:	9c 01       	movw	r18, r24
    1632:	4e 2f       	mov	r20, r30
    1634:	5e 2f       	mov	r21, r30
    1636:	6e 2f       	mov	r22, r30
    1638:	7e 2f       	mov	r23, r30
    163a:	8e 2f       	mov	r24, r30
    163c:	9e 2f       	mov	r25, r30
    163e:	0e 94 4a 1b 	call	0x3694	; 0x3694 <__muldi3>
    1642:	92 2e       	mov	r9, r18
    1644:	83 2e       	mov	r8, r19
    1646:	4b 83       	std	Y+3, r20	; 0x03
    1648:	5d 83       	std	Y+5, r21	; 0x05
    164a:	69 87       	std	Y+9, r22	; 0x09
    164c:	7a 87       	std	Y+10, r23	; 0x0a
    164e:	8b 87       	std	Y+11, r24	; 0x0b
    1650:	9c 87       	std	Y+12, r25	; 0x0c
    1652:	43 e3       	ldi	r20, 0x33	; 51
    1654:	b4 2e       	mov	r11, r20
    1656:	51 ee       	ldi	r21, 0xE1	; 225
    1658:	c5 2e       	mov	r12, r21
    165a:	dd 24       	eor	r13, r13
    165c:	d3 94       	inc	r13
    165e:	91 01       	movw	r18, r2
    1660:	a2 01       	movw	r20, r4
    1662:	b3 01       	movw	r22, r6
    1664:	8f 81       	ldd	r24, Y+7	; 0x07
    1666:	98 85       	ldd	r25, Y+8	; 0x08
    1668:	0e 94 4a 1b 	call	0x3694	; 0x3694 <__muldi3>
    166c:	59 01       	movw	r10, r18
    166e:	6a 01       	movw	r12, r20
    1670:	7b 01       	movw	r14, r22
    1672:	8c 01       	movw	r16, r24
    1674:	29 2d       	mov	r18, r9
    1676:	38 2d       	mov	r19, r8
    1678:	4b 81       	ldd	r20, Y+3	; 0x03
    167a:	5d 81       	ldd	r21, Y+5	; 0x05
    167c:	69 85       	ldd	r22, Y+9	; 0x09
    167e:	7a 85       	ldd	r23, Y+10	; 0x0a
    1680:	8b 85       	ldd	r24, Y+11	; 0x0b
    1682:	9c 85       	ldd	r25, Y+12	; 0x0c
    1684:	0e 94 bc 27 	call	0x4f78	; 0x4f78 <__adddi3>
    1688:	3b 56       	subi	r19, 0x6B	; 107
    168a:	41 49       	sbci	r20, 0x91	; 145
    168c:	57 4c       	sbci	r21, 0xC7	; 199
    168e:	6f 4f       	sbci	r22, 0xFF	; 255
    1690:	7f 4f       	sbci	r23, 0xFF	; 255
    1692:	8f 4f       	sbci	r24, 0xFF	; 255
    1694:	9f 4f       	sbci	r25, 0xFF	; 255
    1696:	a6 2f       	mov	r26, r22
    1698:	f7 2f       	mov	r31, r23
    169a:	e8 2f       	mov	r30, r24
    169c:	6a 2f       	mov	r22, r26
    169e:	7f 2f       	mov	r23, r31
    16a0:	8e 2f       	mov	r24, r30
    16a2:	2c 96       	adiw	r28, 0x0c	; 12
    16a4:	e2 e1       	ldi	r30, 0x12	; 18
    16a6:	0c 94 b3 23 	jmp	0x4766	; 0x4766 <__epilogue_restores__>

Disassembly of section .text.__month_to_secs:

00004682 <__month_to_secs>:
    4682:	cf 93       	push	r28
    4684:	df 93       	push	r29
    4686:	9c 01       	movw	r18, r24
    4688:	eb 01       	movw	r28, r22
    468a:	88 0f       	add	r24, r24
    468c:	99 1f       	adc	r25, r25
    468e:	88 0f       	add	r24, r24
    4690:	99 1f       	adc	r25, r25
    4692:	09 2e       	mov	r0, r25
    4694:	00 0c       	add	r0, r0
    4696:	aa 0b       	sbc	r26, r26
    4698:	85 58       	subi	r24, 0x85	; 133
    469a:	9d 4f       	sbci	r25, 0xFD	; 253
    469c:	af 4f       	sbci	r26, 0xFF	; 255
    469e:	fc 01       	movw	r30, r24
    46a0:	5a 2f       	mov	r21, r26
    46a2:	0e 94 49 27 	call	0x4e92	; 0x4e92 <__xload_4>
    46a6:	cd 2b       	or	r28, r29
    46a8:	39 f0       	breq	.+14     	; 0x46b8 <__month_to_secs+0x36>
    46aa:	22 30       	cpi	r18, 0x02	; 2
    46ac:	31 05       	cpc	r19, r1
    46ae:	24 f0       	brlt	.+8      	; 0x46b8 <__month_to_secs+0x36>
    46b0:	60 58       	subi	r22, 0x80	; 128
    46b2:	7e 4a       	sbci	r23, 0xAE	; 174
    46b4:	8e 4f       	sbci	r24, 0xFE	; 254
    46b6:	9f 4f       	sbci	r25, 0xFF	; 255
    46b8:	df 91       	pop	r29
    46ba:	cf 91       	pop	r28
    46bc:	08 95       	ret

Disassembly of section .text.__secs_to_tm:

000003b8 <__secs_to_tm>:
 3b8:	a6 e1       	ldi	r26, 0x16	; 22
 3ba:	b0 e0       	ldi	r27, 0x00	; 0
 3bc:	e2 ee       	ldi	r30, 0xE2	; 226
 3be:	f1 e0       	ldi	r31, 0x01	; 1
 3c0:	0c 94 7c 23 	jmp	0x46f8	; 0x46f8 <__prologue_saves__>
 3c4:	79 01       	movw	r14, r18
 3c6:	d4 2e       	mov	r13, r20
 3c8:	c5 2e       	mov	r12, r21
 3ca:	b6 2f       	mov	r27, r22
 3cc:	a7 2f       	mov	r26, r23
 3ce:	f8 2f       	mov	r31, r24
 3d0:	b9 2e       	mov	r11, r25
 3d2:	40 58       	subi	r20, 0x80	; 128
 3d4:	5d 4b       	sbci	r21, 0xBD	; 189
 3d6:	6e 40       	sbci	r22, 0x0E	; 14
 3d8:	7f 4f       	sbci	r23, 0xFF	; 255
 3da:	8f 4f       	sbci	r24, 0xFF	; 255
 3dc:	9f 4f       	sbci	r25, 0xFF	; 255
 3de:	21 15       	cp	r18, r1
 3e0:	3b 47       	sbci	r19, 0x7B	; 123
 3e2:	4d 41       	sbci	r20, 0x1D	; 29
 3e4:	53 48       	sbci	r21, 0x83	; 131
 3e6:	62 4e       	sbci	r22, 0xE2	; 226
 3e8:	71 40       	sbci	r23, 0x01	; 1
 3ea:	81 05       	cpc	r24, r1
 3ec:	91 05       	cpc	r25, r1
 3ee:	11 f0       	breq	.+4      	; 0x3f4 <__secs_to_tm+0x3c>
 3f0:	08 f0       	brcs	.+2      	; 0x3f4 <__secs_to_tm+0x3c>
 3f2:	08 c2       	rjmp	.+1040   	; 0x804 <__EEPROM_REGION_LENGTH__+0x4>
 3f4:	18 8b       	std	Y+16, r17	; 0x10
 3f6:	0f 87       	std	Y+15, r16	; 0x0f
 3f8:	9b 2d       	mov	r25, r11
 3fa:	8f 2f       	mov	r24, r31
 3fc:	7a 2f       	mov	r23, r26
 3fe:	6b 2f       	mov	r22, r27
 400:	5c 2d       	mov	r21, r12
 402:	4d 2d       	mov	r20, r13
 404:	97 01       	movw	r18, r14
 406:	20 58       	subi	r18, 0x80	; 128
 408:	3d 45       	sbci	r19, 0x5D	; 93
 40a:	4c 4b       	sbci	r20, 0xBC	; 188
 40c:	58 43       	sbci	r21, 0x38	; 56
 40e:	61 09       	sbc	r22, r1
 410:	71 09       	sbc	r23, r1
 412:	81 09       	sbc	r24, r1
 414:	91 09       	sbc	r25, r1
 416:	19 01       	movw	r2, r18
 418:	4d 83       	std	Y+5, r20	; 0x05
 41a:	59 87       	std	Y+9, r21	; 0x09
 41c:	6d 87       	std	Y+13, r22	; 0x0d
 41e:	79 83       	std	Y+1, r23	; 0x01
 420:	89 8b       	std	Y+17, r24	; 0x11
 422:	9a 8b       	std	Y+18, r25	; 0x12
 424:	f0 e8       	ldi	r31, 0x80	; 128
 426:	af 2e       	mov	r10, r31
 428:	a1 e5       	ldi	r26, 0x51	; 81
 42a:	ba 2e       	mov	r11, r26
 42c:	cc 24       	eor	r12, r12
 42e:	c3 94       	inc	r12
 430:	d1 2c       	mov	r13, r1
 432:	e1 2c       	mov	r14, r1
 434:	f1 2c       	mov	r15, r1
 436:	00 e0       	ldi	r16, 0x00	; 0
 438:	10 e0       	ldi	r17, 0x00	; 0
 43a:	0e 94 40 20 	call	0x4080	; 0x4080 <__divdi3>
 43e:	29 01       	movw	r4, r18
 440:	3a 01       	movw	r6, r20
 442:	4b 01       	movw	r8, r22
 444:	8e 8b       	std	Y+22, r24	; 0x16
 446:	9b 8b       	std	Y+19, r25	; 0x13
 448:	91 01       	movw	r18, r2
 44a:	4d 81       	ldd	r20, Y+5	; 0x05
 44c:	59 85       	ldd	r21, Y+9	; 0x09
 44e:	6d 85       	ldd	r22, Y+13	; 0x0d
 450:	79 81       	ldd	r23, Y+1	; 0x01
 452:	89 89       	ldd	r24, Y+17	; 0x11
 454:	9a 89       	ldd	r25, Y+18	; 0x12
 456:	0e 94 3e 20 	call	0x407c	; 0x407c <__moddi3>
 45a:	2d 83       	std	Y+5, r18	; 0x05
 45c:	3e 83       	std	Y+6, r19	; 0x06
 45e:	4f 83       	std	Y+7, r20	; 0x07
 460:	58 87       	std	Y+8, r21	; 0x08
 462:	8d 81       	ldd	r24, Y+5	; 0x05
 464:	9e 81       	ldd	r25, Y+6	; 0x06
 466:	af 81       	ldd	r26, Y+7	; 0x07
 468:	b8 85       	ldd	r27, Y+8	; 0x08
 46a:	b7 ff       	sbrs	r27, 7
 46c:	15 c0       	rjmp	.+42     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
 46e:	80 58       	subi	r24, 0x80	; 128
 470:	9e 4a       	sbci	r25, 0xAE	; 174
 472:	ae 4f       	sbci	r26, 0xFE	; 254
 474:	bf 4f       	sbci	r27, 0xFF	; 255
 476:	8d 83       	std	Y+5, r24	; 0x05
 478:	9e 83       	std	Y+6, r25	; 0x06
 47a:	af 83       	std	Y+7, r26	; 0x07
 47c:	b8 87       	std	Y+8, r27	; 0x08
 47e:	92 01       	movw	r18, r4
 480:	a3 01       	movw	r20, r6
 482:	b4 01       	movw	r22, r8
 484:	8e 89       	ldd	r24, Y+22	; 0x16
 486:	9b 89       	ldd	r25, Y+19	; 0x13
 488:	af ef       	ldi	r26, 0xFF	; 255
 48a:	0e 94 55 27 	call	0x4eaa	; 0x4eaa <__adddi3_s8>
 48e:	29 01       	movw	r4, r18
 490:	3a 01       	movw	r6, r20
 492:	4b 01       	movw	r8, r22
 494:	8e 8b       	std	Y+22, r24	; 0x16
 496:	9b 8b       	std	Y+19, r25	; 0x13
 498:	92 01       	movw	r18, r4
 49a:	a3 01       	movw	r20, r6
 49c:	b4 01       	movw	r22, r8
 49e:	8e 89       	ldd	r24, Y+22	; 0x16
 4a0:	9b 89       	ldd	r25, Y+19	; 0x13
 4a2:	a3 e0       	ldi	r26, 0x03	; 3
 4a4:	0e 94 55 27 	call	0x4eaa	; 0x4eaa <__adddi3_s8>
 4a8:	e7 e0       	ldi	r30, 0x07	; 7
 4aa:	ae 2e       	mov	r10, r30
 4ac:	b1 2c       	mov	r11, r1
 4ae:	c1 2c       	mov	r12, r1
 4b0:	d1 2c       	mov	r13, r1
 4b2:	e1 2c       	mov	r14, r1
 4b4:	f1 2c       	mov	r15, r1
 4b6:	00 e0       	ldi	r16, 0x00	; 0
 4b8:	10 e0       	ldi	r17, 0x00	; 0
 4ba:	0e 94 3e 20 	call	0x407c	; 0x407c <__moddi3>
 4be:	2d 87       	std	Y+13, r18	; 0x0d
 4c0:	3e 87       	std	Y+14, r19	; 0x0e
 4c2:	ad 85       	ldd	r26, Y+13	; 0x0d
 4c4:	be 85       	ldd	r27, Y+14	; 0x0e
 4c6:	b7 ff       	sbrs	r27, 7
 4c8:	03 c0       	rjmp	.+6      	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
 4ca:	17 96       	adiw	r26, 0x07	; 7
 4cc:	be 87       	std	Y+14, r27	; 0x0e
 4ce:	ad 87       	std	Y+13, r26	; 0x0d
 4d0:	51 eb       	ldi	r21, 0xB1	; 177
 4d2:	a5 2e       	mov	r10, r21
 4d4:	6a e3       	ldi	r22, 0x3A	; 58
 4d6:	b6 2e       	mov	r11, r22
 4d8:	72 e0       	ldi	r23, 0x02	; 2
 4da:	c7 2e       	mov	r12, r23
 4dc:	d1 2c       	mov	r13, r1
 4de:	e1 2c       	mov	r14, r1
 4e0:	f1 2c       	mov	r15, r1
 4e2:	00 e0       	ldi	r16, 0x00	; 0
 4e4:	10 e0       	ldi	r17, 0x00	; 0
 4e6:	92 01       	movw	r18, r4
 4e8:	a3 01       	movw	r20, r6
 4ea:	b4 01       	movw	r22, r8
 4ec:	8e 89       	ldd	r24, Y+22	; 0x16
 4ee:	9b 89       	ldd	r25, Y+19	; 0x13
 4f0:	0e 94 40 20 	call	0x4080	; 0x4080 <__divdi3>
 4f4:	29 87       	std	Y+9, r18	; 0x09
 4f6:	3a 87       	std	Y+10, r19	; 0x0a
 4f8:	4b 87       	std	Y+11, r20	; 0x0b
 4fa:	5c 87       	std	Y+12, r21	; 0x0c
 4fc:	92 01       	movw	r18, r4
 4fe:	a3 01       	movw	r20, r6
 500:	b4 01       	movw	r22, r8
 502:	8e 89       	ldd	r24, Y+22	; 0x16
 504:	9b 89       	ldd	r25, Y+19	; 0x13
 506:	0e 94 3e 20 	call	0x407c	; 0x407c <__moddi3>
 50a:	82 2e       	mov	r8, r18
 50c:	93 2e       	mov	r9, r19
 50e:	a4 2e       	mov	r10, r20
 510:	b5 2e       	mov	r11, r21
 512:	b7 fe       	sbrs	r11, 7
 514:	12 c0       	rjmp	.+36     	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
 516:	b1 eb       	ldi	r27, 0xB1	; 177
 518:	8b 0e       	add	r8, r27
 51a:	ba e3       	ldi	r27, 0x3A	; 58
 51c:	9b 1e       	adc	r9, r27
 51e:	b2 e0       	ldi	r27, 0x02	; 2
 520:	ab 1e       	adc	r10, r27
 522:	b1 1c       	adc	r11, r1
 524:	89 85       	ldd	r24, Y+9	; 0x09
 526:	9a 85       	ldd	r25, Y+10	; 0x0a
 528:	ab 85       	ldd	r26, Y+11	; 0x0b
 52a:	bc 85       	ldd	r27, Y+12	; 0x0c
 52c:	01 97       	sbiw	r24, 0x01	; 1
 52e:	a1 09       	sbc	r26, r1
 530:	b1 09       	sbc	r27, r1
 532:	89 87       	std	Y+9, r24	; 0x09
 534:	9a 87       	std	Y+10, r25	; 0x0a
 536:	ab 87       	std	Y+11, r26	; 0x0b
 538:	bc 87       	std	Y+12, r27	; 0x0c
 53a:	c5 01       	movw	r24, r10
 53c:	b4 01       	movw	r22, r8
 53e:	2c ea       	ldi	r18, 0xAC	; 172
 540:	3e e8       	ldi	r19, 0x8E	; 142
 542:	40 e0       	ldi	r20, 0x00	; 0
 544:	50 e0       	ldi	r21, 0x00	; 0
 546:	0e 94 7e 24 	call	0x48fc	; 0x48fc <__divmodsi4>
 54a:	69 01       	movw	r12, r18
 54c:	7a 01       	movw	r14, r20
 54e:	24 30       	cpi	r18, 0x04	; 4
 550:	31 05       	cpc	r19, r1
 552:	41 05       	cpc	r20, r1
 554:	51 05       	cpc	r21, r1
 556:	29 f4       	brne	.+10     	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
 558:	43 e0       	ldi	r20, 0x03	; 3
 55a:	c4 2e       	mov	r12, r20
 55c:	d1 2c       	mov	r13, r1
 55e:	e1 2c       	mov	r14, r1
 560:	f1 2c       	mov	r15, r1
 562:	a4 e5       	ldi	r26, 0x54	; 84
 564:	b1 e7       	ldi	r27, 0x71	; 113
 566:	a7 01       	movw	r20, r14
 568:	96 01       	movw	r18, r12
 56a:	0e 94 e1 27 	call	0x4fc2	; 0x4fc2 <__mulohisi3>
 56e:	2b 01       	movw	r4, r22
 570:	3c 01       	movw	r6, r24
 572:	48 0c       	add	r4, r8
 574:	59 1c       	adc	r5, r9
 576:	6a 1c       	adc	r6, r10
 578:	7b 1c       	adc	r7, r11
 57a:	c3 01       	movw	r24, r6
 57c:	b2 01       	movw	r22, r4
 57e:	25 eb       	ldi	r18, 0xB5	; 181
 580:	35 e0       	ldi	r19, 0x05	; 5
 582:	40 e0       	ldi	r20, 0x00	; 0
 584:	50 e0       	ldi	r21, 0x00	; 0
 586:	0e 94 7e 24 	call	0x48fc	; 0x48fc <__divmodsi4>
 58a:	49 01       	movw	r8, r18
 58c:	5a 01       	movw	r10, r20
 58e:	29 31       	cpi	r18, 0x19	; 25
 590:	31 05       	cpc	r19, r1
 592:	41 05       	cpc	r20, r1
 594:	51 05       	cpc	r21, r1
 596:	29 f4       	brne	.+10     	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
 598:	38 e1       	ldi	r19, 0x18	; 24
 59a:	83 2e       	mov	r8, r19
 59c:	91 2c       	mov	r9, r1
 59e:	a1 2c       	mov	r10, r1
 5a0:	b1 2c       	mov	r11, r1
 5a2:	ab e4       	ldi	r26, 0x4B	; 75
 5a4:	ba ef       	ldi	r27, 0xFA	; 250
 5a6:	a5 01       	movw	r20, r10
 5a8:	94 01       	movw	r18, r8
 5aa:	0e 94 e1 27 	call	0x4fc2	; 0x4fc2 <__mulohisi3>
 5ae:	46 0e       	add	r4, r22
 5b0:	57 1e       	adc	r5, r23
 5b2:	68 1e       	adc	r6, r24
 5b4:	79 1e       	adc	r7, r25
 5b6:	c3 01       	movw	r24, r6
 5b8:	b2 01       	movw	r22, r4
 5ba:	2d e6       	ldi	r18, 0x6D	; 109
 5bc:	31 e0       	ldi	r19, 0x01	; 1
 5be:	40 e0       	ldi	r20, 0x00	; 0
 5c0:	50 e0       	ldi	r21, 0x00	; 0
 5c2:	0e 94 7e 24 	call	0x48fc	; 0x48fc <__divmodsi4>
 5c6:	29 83       	std	Y+1, r18	; 0x01
 5c8:	3a 83       	std	Y+2, r19	; 0x02
 5ca:	4b 83       	std	Y+3, r20	; 0x03
 5cc:	5c 83       	std	Y+4, r21	; 0x04
 5ce:	24 30       	cpi	r18, 0x04	; 4
 5d0:	31 05       	cpc	r19, r1
 5d2:	41 05       	cpc	r20, r1
 5d4:	51 05       	cpc	r21, r1
 5d6:	41 f4       	brne	.+16     	; 0x5e8 <__LOCK_REGION_LENGTH__+0x1e8>
 5d8:	83 e0       	ldi	r24, 0x03	; 3
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	a0 e0       	ldi	r26, 0x00	; 0
 5de:	b0 e0       	ldi	r27, 0x00	; 0
 5e0:	89 83       	std	Y+1, r24	; 0x01
 5e2:	9a 83       	std	Y+2, r25	; 0x02
 5e4:	ab 83       	std	Y+3, r26	; 0x03
 5e6:	bc 83       	std	Y+4, r27	; 0x04
 5e8:	a3 e9       	ldi	r26, 0x93	; 147
 5ea:	be ef       	ldi	r27, 0xFE	; 254
 5ec:	29 81       	ldd	r18, Y+1	; 0x01
 5ee:	3a 81       	ldd	r19, Y+2	; 0x02
 5f0:	4b 81       	ldd	r20, Y+3	; 0x03
 5f2:	5c 81       	ldd	r21, Y+4	; 0x04
 5f4:	0e 94 e1 27 	call	0x4fc2	; 0x4fc2 <__mulohisi3>
 5f8:	46 0e       	add	r4, r22
 5fa:	57 1e       	adc	r5, r23
 5fc:	68 1e       	adc	r6, r24
 5fe:	79 1e       	adc	r7, r25
 600:	23 2b       	or	r18, r19
 602:	24 2b       	or	r18, r20
 604:	25 2b       	or	r18, r21
 606:	81 f4       	brne	.+32     	; 0x628 <__LOCK_REGION_LENGTH__+0x228>
 608:	81 14       	cp	r8, r1
 60a:	91 04       	cpc	r9, r1
 60c:	a1 04       	cpc	r10, r1
 60e:	b1 04       	cpc	r11, r1
 610:	71 f4       	brne	.+28     	; 0x62e <__LOCK_REGION_LENGTH__+0x22e>
 612:	31 e0       	ldi	r19, 0x01	; 1
 614:	20 e0       	ldi	r18, 0x00	; 0
 616:	c1 14       	cp	r12, r1
 618:	d1 04       	cpc	r13, r1
 61a:	e1 04       	cpc	r14, r1
 61c:	f1 04       	cpc	r15, r1
 61e:	09 f0       	breq	.+2      	; 0x622 <__LOCK_REGION_LENGTH__+0x222>
 620:	30 e0       	ldi	r19, 0x00	; 0
 622:	83 2f       	mov	r24, r19
 624:	92 2f       	mov	r25, r18
 626:	05 c0       	rjmp	.+10     	; 0x632 <__LOCK_REGION_LENGTH__+0x232>
 628:	80 e0       	ldi	r24, 0x00	; 0
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	02 c0       	rjmp	.+4      	; 0x632 <__LOCK_REGION_LENGTH__+0x232>
 62e:	81 e0       	ldi	r24, 0x01	; 1
 630:	90 e0       	ldi	r25, 0x00	; 0
 632:	12 01       	movw	r2, r4
 634:	ab e3       	ldi	r26, 0x3B	; 59
 636:	2a 0e       	add	r2, r26
 638:	31 1c       	adc	r3, r1
 63a:	28 0e       	add	r2, r24
 63c:	39 1e       	adc	r3, r25
 63e:	9c 01       	movw	r18, r24
 640:	24 59       	subi	r18, 0x94	; 148
 642:	3e 4f       	sbci	r19, 0xFE	; 254
 644:	22 15       	cp	r18, r2
 646:	33 05       	cpc	r19, r3
 648:	24 f4       	brge	.+8      	; 0x652 <__LOCK_REGION_LENGTH__+0x252>
 64a:	83 59       	subi	r24, 0x93	; 147
 64c:	9e 4f       	sbci	r25, 0xFE	; 254
 64e:	28 1a       	sub	r2, r24
 650:	39 0a       	sbc	r3, r25
 652:	92 e0       	ldi	r25, 0x02	; 2
 654:	88 0c       	add	r8, r8
 656:	99 1c       	adc	r9, r9
 658:	aa 1c       	adc	r10, r10
 65a:	bb 1c       	adc	r11, r11
 65c:	9a 95       	dec	r25
 65e:	d1 f7       	brne	.-12     	; 0x654 <__LOCK_REGION_LENGTH__+0x254>
 660:	89 81       	ldd	r24, Y+1	; 0x01
 662:	9a 81       	ldd	r25, Y+2	; 0x02
 664:	ab 81       	ldd	r26, Y+3	; 0x03
 666:	bc 81       	ldd	r27, Y+4	; 0x04
 668:	88 0e       	add	r8, r24
 66a:	99 1e       	adc	r9, r25
 66c:	aa 1e       	adc	r10, r26
 66e:	bb 1e       	adc	r11, r27
 670:	a4 e6       	ldi	r26, 0x64	; 100
 672:	b0 e0       	ldi	r27, 0x00	; 0
 674:	a7 01       	movw	r20, r14
 676:	96 01       	movw	r18, r12
 678:	0e 94 77 27 	call	0x4eee	; 0x4eee <__muluhisi3>
 67c:	86 0e       	add	r8, r22
 67e:	97 1e       	adc	r9, r23
 680:	a8 1e       	adc	r10, r24
 682:	b9 1e       	adc	r11, r25
 684:	d5 01       	movw	r26, r10
 686:	c4 01       	movw	r24, r8
 688:	bb 0f       	add	r27, r27
 68a:	88 0b       	sbc	r24, r24
 68c:	98 2f       	mov	r25, r24
 68e:	dc 01       	movw	r26, r24
 690:	89 83       	std	Y+1, r24	; 0x01
 692:	9a 83       	std	Y+2, r25	; 0x02
 694:	ab 83       	std	Y+3, r26	; 0x03
 696:	bc 83       	std	Y+4, r27	; 0x04
 698:	69 85       	ldd	r22, Y+9	; 0x09
 69a:	7a 85       	ldd	r23, Y+10	; 0x0a
 69c:	8b 85       	ldd	r24, Y+11	; 0x0b
 69e:	9c 85       	ldd	r25, Y+12	; 0x0c
 6a0:	20 e9       	ldi	r18, 0x90	; 144
 6a2:	31 e0       	ldi	r19, 0x01	; 1
 6a4:	40 e0       	ldi	r20, 0x00	; 0
 6a6:	50 e0       	ldi	r21, 0x00	; 0
 6a8:	0e 94 13 27 	call	0x4e26	; 0x4e26 <__mulsidi3>
 6ac:	f2 2f       	mov	r31, r18
 6ae:	e3 2f       	mov	r30, r19
 6b0:	6a 01       	movw	r12, r20
 6b2:	7b 01       	movw	r14, r22
 6b4:	8c 01       	movw	r16, r24
 6b6:	94 01       	movw	r18, r8
 6b8:	a5 01       	movw	r20, r10
 6ba:	69 81       	ldd	r22, Y+1	; 0x01
 6bc:	76 2f       	mov	r23, r22
 6be:	86 2f       	mov	r24, r22
 6c0:	96 2f       	mov	r25, r22
 6c2:	af 2e       	mov	r10, r31
 6c4:	be 2e       	mov	r11, r30
 6c6:	0e 94 bc 27 	call	0x4f78	; 0x4f78 <__adddi3>
 6ca:	49 01       	movw	r8, r18
 6cc:	5a 01       	movw	r10, r20
 6ce:	6b 01       	movw	r12, r22
 6d0:	7c 01       	movw	r14, r24
 6d2:	25 e3       	ldi	r18, 0x35	; 53
 6d4:	33 e0       	ldi	r19, 0x03	; 3
 6d6:	40 e0       	ldi	r20, 0x00	; 0
 6d8:	1a 82       	std	Y+2, r1	; 0x02
 6da:	19 82       	std	Y+1, r1	; 0x01
 6dc:	f9 01       	movw	r30, r18
 6de:	84 91       	lpm	r24, Z
 6e0:	47 fd       	sbrc	r20, 7
 6e2:	80 81       	ld	r24, Z
 6e4:	08 2e       	mov	r0, r24
 6e6:	00 0c       	add	r0, r0
 6e8:	99 0b       	sbc	r25, r25
 6ea:	aa 0b       	sbc	r26, r26
 6ec:	bb 0b       	sbc	r27, r27
 6ee:	2f 5f       	subi	r18, 0xFF	; 255
 6f0:	3f 4f       	sbci	r19, 0xFF	; 255
 6f2:	4f 4f       	sbci	r20, 0xFF	; 255
 6f4:	48 16       	cp	r4, r24
 6f6:	59 06       	cpc	r5, r25
 6f8:	6a 06       	cpc	r6, r26
 6fa:	7b 06       	cpc	r7, r27
 6fc:	54 f0       	brlt	.+20     	; 0x712 <__LOCK_REGION_LENGTH__+0x312>
 6fe:	48 1a       	sub	r4, r24
 700:	59 0a       	sbc	r5, r25
 702:	6a 0a       	sbc	r6, r26
 704:	7b 0a       	sbc	r7, r27
 706:	a9 81       	ldd	r26, Y+1	; 0x01
 708:	ba 81       	ldd	r27, Y+2	; 0x02
 70a:	11 96       	adiw	r26, 0x01	; 1
 70c:	ba 83       	std	Y+2, r27	; 0x02
 70e:	a9 83       	std	Y+1, r26	; 0x01
 710:	e5 cf       	rjmp	.-54     	; 0x6dc <__LOCK_REGION_LENGTH__+0x2dc>
 712:	e9 81       	ldd	r30, Y+1	; 0x01
 714:	fa 81       	ldd	r31, Y+2	; 0x02
 716:	ea 30       	cpi	r30, 0x0A	; 10
 718:	f1 05       	cpc	r31, r1
 71a:	74 f0       	brlt	.+28     	; 0x738 <__LOCK_REGION_LENGTH__+0x338>
 71c:	3c 97       	sbiw	r30, 0x0c	; 12
 71e:	fa 83       	std	Y+2, r31	; 0x02
 720:	e9 83       	std	Y+1, r30	; 0x01
 722:	94 01       	movw	r18, r8
 724:	a5 01       	movw	r20, r10
 726:	b6 01       	movw	r22, r12
 728:	c7 01       	movw	r24, r14
 72a:	a1 e0       	ldi	r26, 0x01	; 1
 72c:	0e 94 55 27 	call	0x4eaa	; 0x4eaa <__adddi3_s8>
 730:	49 01       	movw	r8, r18
 732:	5a 01       	movw	r10, r20
 734:	6b 01       	movw	r12, r22
 736:	7c 01       	movw	r14, r24
 738:	94 01       	movw	r18, r8
 73a:	a5 01       	movw	r20, r10
 73c:	b6 01       	movw	r22, r12
 73e:	c7 01       	movw	r24, r14
 740:	2c 59       	subi	r18, 0x9C	; 156
 742:	3f 47       	sbci	r19, 0x7F	; 127
 744:	4f 4f       	sbci	r20, 0xFF	; 255
 746:	5f 4f       	sbci	r21, 0xFF	; 255
 748:	6f 4f       	sbci	r22, 0xFF	; 255
 74a:	7f 4f       	sbci	r23, 0xFF	; 255
 74c:	8f 4f       	sbci	r24, 0xFF	; 255
 74e:	9f 4f       	sbci	r25, 0xFF	; 255
 750:	2f 3f       	cpi	r18, 0xFF	; 255
 752:	3f 4f       	sbci	r19, 0xFF	; 255
 754:	41 05       	cpc	r20, r1
 756:	51 05       	cpc	r21, r1
 758:	61 05       	cpc	r22, r1
 75a:	71 05       	cpc	r23, r1
 75c:	81 05       	cpc	r24, r1
 75e:	91 05       	cpc	r25, r1
 760:	11 f0       	breq	.+4      	; 0x766 <__LOCK_REGION_LENGTH__+0x366>
 762:	08 f0       	brcs	.+2      	; 0x766 <__LOCK_REGION_LENGTH__+0x366>
 764:	4f c0       	rjmp	.+158    	; 0x804 <__EEPROM_REGION_LENGTH__+0x4>
 766:	24 e6       	ldi	r18, 0x64	; 100
 768:	82 0e       	add	r8, r18
 76a:	91 1c       	adc	r9, r1
 76c:	af 85       	ldd	r26, Y+15	; 0x0f
 76e:	b8 89       	ldd	r27, Y+16	; 0x10
 770:	1b 96       	adiw	r26, 0x0b	; 11
 772:	9c 92       	st	X, r9
 774:	8e 92       	st	-X, r8
 776:	1a 97       	sbiw	r26, 0x0a	; 10
 778:	e9 81       	ldd	r30, Y+1	; 0x01
 77a:	fa 81       	ldd	r31, Y+2	; 0x02
 77c:	32 96       	adiw	r30, 0x02	; 2
 77e:	19 96       	adiw	r26, 0x09	; 9
 780:	fc 93       	st	X, r31
 782:	ee 93       	st	-X, r30
 784:	18 97       	sbiw	r26, 0x08	; 8
 786:	ff ef       	ldi	r31, 0xFF	; 255
 788:	4f 1a       	sub	r4, r31
 78a:	5f 0a       	sbc	r5, r31
 78c:	17 96       	adiw	r26, 0x07	; 7
 78e:	5c 92       	st	X, r5
 790:	4e 92       	st	-X, r4
 792:	16 97       	sbiw	r26, 0x06	; 6
 794:	8d 85       	ldd	r24, Y+13	; 0x0d
 796:	9e 85       	ldd	r25, Y+14	; 0x0e
 798:	1d 96       	adiw	r26, 0x0d	; 13
 79a:	9c 93       	st	X, r25
 79c:	8e 93       	st	-X, r24
 79e:	1c 97       	sbiw	r26, 0x0c	; 12
 7a0:	1f 96       	adiw	r26, 0x0f	; 15
 7a2:	3c 92       	st	X, r3
 7a4:	2e 92       	st	-X, r2
 7a6:	1e 97       	sbiw	r26, 0x0e	; 14
 7a8:	6d 81       	ldd	r22, Y+5	; 0x05
 7aa:	7e 81       	ldd	r23, Y+6	; 0x06
 7ac:	8f 81       	ldd	r24, Y+7	; 0x07
 7ae:	98 85       	ldd	r25, Y+8	; 0x08
 7b0:	20 e1       	ldi	r18, 0x10	; 16
 7b2:	3e e0       	ldi	r19, 0x0E	; 14
 7b4:	40 e0       	ldi	r20, 0x00	; 0
 7b6:	50 e0       	ldi	r21, 0x00	; 0
 7b8:	0e 94 7e 24 	call	0x48fc	; 0x48fc <__divmodsi4>
 7bc:	af 85       	ldd	r26, Y+15	; 0x0f
 7be:	b8 89       	ldd	r27, Y+16	; 0x10
 7c0:	15 96       	adiw	r26, 0x05	; 5
 7c2:	3c 93       	st	X, r19
 7c4:	2e 93       	st	-X, r18
 7c6:	14 97       	sbiw	r26, 0x04	; 4
 7c8:	8c e3       	ldi	r24, 0x3C	; 60
 7ca:	c8 2e       	mov	r12, r24
 7cc:	d1 2c       	mov	r13, r1
 7ce:	e1 2c       	mov	r14, r1
 7d0:	f1 2c       	mov	r15, r1
 7d2:	6d 81       	ldd	r22, Y+5	; 0x05
 7d4:	7e 81       	ldd	r23, Y+6	; 0x06
 7d6:	8f 81       	ldd	r24, Y+7	; 0x07
 7d8:	98 85       	ldd	r25, Y+8	; 0x08
 7da:	a7 01       	movw	r20, r14
 7dc:	96 01       	movw	r18, r12
 7de:	0e 94 7e 24 	call	0x48fc	; 0x48fc <__divmodsi4>
 7e2:	4b 01       	movw	r8, r22
 7e4:	5c 01       	movw	r10, r24
 7e6:	ca 01       	movw	r24, r20
 7e8:	b9 01       	movw	r22, r18
 7ea:	a7 01       	movw	r20, r14
 7ec:	96 01       	movw	r18, r12
 7ee:	0e 94 7e 24 	call	0x48fc	; 0x48fc <__divmodsi4>
 7f2:	ef 85       	ldd	r30, Y+15	; 0x0f
 7f4:	f8 89       	ldd	r31, Y+16	; 0x10
 7f6:	73 83       	std	Z+3, r23	; 0x03
 7f8:	62 83       	std	Z+2, r22	; 0x02
 7fa:	91 82       	std	Z+1, r9	; 0x01
 7fc:	80 82       	st	Z, r8
 7fe:	80 e0       	ldi	r24, 0x00	; 0
 800:	90 e0       	ldi	r25, 0x00	; 0
 802:	02 c0       	rjmp	.+4      	; 0x808 <__EEPROM_REGION_LENGTH__+0x8>
 804:	8f ef       	ldi	r24, 0xFF	; 255
 806:	9f ef       	ldi	r25, 0xFF	; 255
 808:	66 96       	adiw	r28, 0x16	; 22
 80a:	e2 e1       	ldi	r30, 0x12	; 18
 80c:	0c 94 b3 23 	jmp	0x4766	; 0x4766 <__epilogue_restores__>

Disassembly of section .text.libgcc.div:

00004aa8 <__divmodhi4>:
    4aa8:	97 fb       	bst	r25, 7
    4aaa:	07 2e       	mov	r0, r23
    4aac:	16 f4       	brtc	.+4      	; 0x4ab2 <__divmodhi4+0xa>
    4aae:	00 94       	com	r0
    4ab0:	07 d0       	rcall	.+14     	; 0x4ac0 <__divmodhi4_neg1>
    4ab2:	77 fd       	sbrc	r23, 7
    4ab4:	09 d0       	rcall	.+18     	; 0x4ac8 <__divmodhi4_neg2>
    4ab6:	0e 94 40 25 	call	0x4a80	; 0x4a80 <__udivmodhi4>
    4aba:	07 fc       	sbrc	r0, 7
    4abc:	05 d0       	rcall	.+10     	; 0x4ac8 <__divmodhi4_neg2>
    4abe:	3e f4       	brtc	.+14     	; 0x4ace <__divmodhi4_exit>

00004ac0 <__divmodhi4_neg1>:
    4ac0:	90 95       	com	r25
    4ac2:	81 95       	neg	r24
    4ac4:	9f 4f       	sbci	r25, 0xFF	; 255
    4ac6:	08 95       	ret

00004ac8 <__divmodhi4_neg2>:
    4ac8:	70 95       	com	r23
    4aca:	61 95       	neg	r22
    4acc:	7f 4f       	sbci	r23, 0xFF	; 255

00004ace <__divmodhi4_exit>:
    4ace:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00003694 <__muldi3>:
    3694:	df 93       	push	r29
    3696:	cf 93       	push	r28
    3698:	1f 93       	push	r17
    369a:	0f 93       	push	r16
    369c:	9a 9d       	mul	r25, r10
    369e:	f0 2d       	mov	r31, r0
    36a0:	21 9f       	mul	r18, r17
    36a2:	f0 0d       	add	r31, r0
    36a4:	8b 9d       	mul	r24, r11
    36a6:	f0 0d       	add	r31, r0
    36a8:	8a 9d       	mul	r24, r10
    36aa:	e0 2d       	mov	r30, r0
    36ac:	f1 0d       	add	r31, r1
    36ae:	03 9f       	mul	r16, r19
    36b0:	f0 0d       	add	r31, r0
    36b2:	02 9f       	mul	r16, r18
    36b4:	e0 0d       	add	r30, r0
    36b6:	f1 1d       	adc	r31, r1
    36b8:	4e 9d       	mul	r20, r14
    36ba:	e0 0d       	add	r30, r0
    36bc:	f1 1d       	adc	r31, r1
    36be:	5e 9d       	mul	r21, r14
    36c0:	f0 0d       	add	r31, r0
    36c2:	4f 9d       	mul	r20, r15
    36c4:	f0 0d       	add	r31, r0
    36c6:	7f 93       	push	r23
    36c8:	6f 93       	push	r22
    36ca:	bf 92       	push	r11
    36cc:	af 92       	push	r10
    36ce:	5f 93       	push	r21
    36d0:	4f 93       	push	r20
    36d2:	d5 01       	movw	r26, r10
    36d4:	0e 94 04 27 	call	0x4e08	; 0x4e08 <__umulhisi3>
    36d8:	8b 01       	movw	r16, r22
    36da:	ac 01       	movw	r20, r24
    36dc:	d7 01       	movw	r26, r14
    36de:	0e 94 04 27 	call	0x4e08	; 0x4e08 <__umulhisi3>
    36e2:	eb 01       	movw	r28, r22
    36e4:	e8 0f       	add	r30, r24
    36e6:	f9 1f       	adc	r31, r25
    36e8:	d6 01       	movw	r26, r12
    36ea:	0e 94 b3 27 	call	0x4f66	; 0x4f66 <__muldi3_6>
    36ee:	2f 91       	pop	r18
    36f0:	3f 91       	pop	r19
    36f2:	d6 01       	movw	r26, r12
    36f4:	0e 94 04 27 	call	0x4e08	; 0x4e08 <__umulhisi3>
    36f8:	c6 0f       	add	r28, r22
    36fa:	d7 1f       	adc	r29, r23
    36fc:	e8 1f       	adc	r30, r24
    36fe:	f9 1f       	adc	r31, r25
    3700:	af 91       	pop	r26
    3702:	bf 91       	pop	r27
    3704:	0e 94 b3 27 	call	0x4f66	; 0x4f66 <__muldi3_6>
    3708:	2f 91       	pop	r18
    370a:	3f 91       	pop	r19
    370c:	0e 94 04 27 	call	0x4e08	; 0x4e08 <__umulhisi3>
    3710:	c6 0f       	add	r28, r22
    3712:	d7 1f       	adc	r29, r23
    3714:	e8 1f       	adc	r30, r24
    3716:	f9 1f       	adc	r31, r25
    3718:	d6 01       	movw	r26, r12
    371a:	0e 94 04 27 	call	0x4e08	; 0x4e08 <__umulhisi3>
    371e:	e6 0f       	add	r30, r22
    3720:	f7 1f       	adc	r31, r23
    3722:	98 01       	movw	r18, r16
    3724:	be 01       	movw	r22, r28
    3726:	cf 01       	movw	r24, r30
    3728:	11 24       	eor	r1, r1
    372a:	0f 91       	pop	r16
    372c:	1f 91       	pop	r17
    372e:	cf 91       	pop	r28
    3730:	df 91       	pop	r29
    3732:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00004f66 <__muldi3_6>:
    4f66:	0e 94 04 27 	call	0x4e08	; 0x4e08 <__umulhisi3>
    4f6a:	46 0f       	add	r20, r22
    4f6c:	57 1f       	adc	r21, r23
    4f6e:	c8 1f       	adc	r28, r24
    4f70:	d9 1f       	adc	r29, r25
    4f72:	08 f4       	brcc	.+2      	; 0x4f76 <__muldi3_6+0x10>
    4f74:	31 96       	adiw	r30, 0x01	; 1
    4f76:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00004e26 <__mulsidi3>:
    4e26:	97 fb       	bst	r25, 7
    4e28:	57 ff       	sbrs	r21, 7
    4e2a:	0c 94 7b 21 	jmp	0x42f6	; 0x42f6 <__umulsidi3_helper>
    4e2e:	9f 93       	push	r25
    4e30:	8f 93       	push	r24
    4e32:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <__umulsidi3_helper>
    4e36:	6e 1b       	sub	r22, r30
    4e38:	7f 0b       	sbc	r23, r31
    4e3a:	af 91       	pop	r26
    4e3c:	bf 91       	pop	r27
    4e3e:	8a 0b       	sbc	r24, r26
    4e40:	9b 0b       	sbc	r25, r27
    4e42:	08 95       	ret

Disassembly of section .text.libgcc.mul:

000042f4 <__umulsidi3>:
    42f4:	e8 94       	clt

000042f6 <__umulsidi3_helper>:
    42f6:	df 93       	push	r29
    42f8:	cf 93       	push	r28
    42fa:	fc 01       	movw	r30, r24
    42fc:	db 01       	movw	r26, r22
    42fe:	0e 94 04 27 	call	0x4e08	; 0x4e08 <__umulhisi3>
    4302:	7f 93       	push	r23
    4304:	6f 93       	push	r22
    4306:	e9 01       	movw	r28, r18
    4308:	9a 01       	movw	r18, r20
    430a:	ac 01       	movw	r20, r24
    430c:	bf 93       	push	r27
    430e:	af 93       	push	r26
    4310:	3f 93       	push	r19
    4312:	2f 93       	push	r18
    4314:	df 01       	movw	r26, r30
    4316:	0e 94 04 27 	call	0x4e08	; 0x4e08 <__umulhisi3>
    431a:	26 f4       	brtc	.+8      	; 0x4324 <__umulsidi3_helper+0x2e>
    431c:	6c 1b       	sub	r22, r28
    431e:	7d 0b       	sbc	r23, r29
    4320:	82 0b       	sbc	r24, r18
    4322:	93 0b       	sbc	r25, r19
    4324:	9e 01       	movw	r18, r28
    4326:	eb 01       	movw	r28, r22
    4328:	fc 01       	movw	r30, r24
    432a:	0e 94 b3 27 	call	0x4f66	; 0x4f66 <__muldi3_6>
    432e:	af 91       	pop	r26
    4330:	bf 91       	pop	r27
    4332:	2f 91       	pop	r18
    4334:	3f 91       	pop	r19
    4336:	0e 94 b3 27 	call	0x4f66	; 0x4f66 <__muldi3_6>
    433a:	be 01       	movw	r22, r28
    433c:	cf 01       	movw	r24, r30
    433e:	f9 01       	movw	r30, r18
    4340:	2f 91       	pop	r18
    4342:	3f 91       	pop	r19
    4344:	cf 91       	pop	r28
    4346:	df 91       	pop	r29
    4348:	08 95       	ret

Disassembly of section .text.libgcc.div:

0000407c <__moddi3>:
    407c:	68 94       	set
    407e:	01 c0       	rjmp	.+2      	; 0x4082 <__divdi3_moddi3>

00004080 <__divdi3>:
    4080:	e8 94       	clt

00004082 <__divdi3_moddi3>:
    4082:	f9 2f       	mov	r31, r25
    4084:	f1 2b       	or	r31, r17
    4086:	12 f0       	brmi	.+4      	; 0x408c <__divdi3_moddi3+0xa>
    4088:	0c 94 25 27 	jmp	0x4e4a	; 0x4e4a <__udivdi3_umoddi3>
    408c:	a0 e0       	ldi	r26, 0x00	; 0
    408e:	b0 e0       	ldi	r27, 0x00	; 0
    4090:	ec e4       	ldi	r30, 0x4C	; 76
    4092:	f0 e2       	ldi	r31, 0x20	; 32
    4094:	0c 94 82 23 	jmp	0x4704	; 0x4704 <__prologue_saves__+0xc>
    4098:	09 2e       	mov	r0, r25
    409a:	05 94       	asr	r0
    409c:	22 f4       	brpl	.+8      	; 0x40a6 <__divdi3_moddi3+0x24>
    409e:	0e 94 f4 26 	call	0x4de8	; 0x4de8 <__negdi2>
    40a2:	11 23       	and	r17, r17
    40a4:	92 f4       	brpl	.+36     	; 0x40ca <__divdi3_moddi3+0x48>
    40a6:	f0 e8       	ldi	r31, 0x80	; 128
    40a8:	0f 26       	eor	r0, r31
    40aa:	ff ef       	ldi	r31, 0xFF	; 255
    40ac:	e0 94       	com	r14
    40ae:	f0 94       	com	r15
    40b0:	00 95       	com	r16
    40b2:	10 95       	com	r17
    40b4:	b0 94       	com	r11
    40b6:	c0 94       	com	r12
    40b8:	d0 94       	com	r13
    40ba:	a1 94       	neg	r10
    40bc:	bf 0a       	sbc	r11, r31
    40be:	cf 0a       	sbc	r12, r31
    40c0:	df 0a       	sbc	r13, r31
    40c2:	ef 0a       	sbc	r14, r31
    40c4:	ff 0a       	sbc	r15, r31
    40c6:	0f 0b       	sbc	r16, r31
    40c8:	1f 0b       	sbc	r17, r31
    40ca:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <__udivmod64>
    40ce:	07 fc       	sbrc	r0, 7
    40d0:	0e 94 f4 26 	call	0x4de8	; 0x4de8 <__negdi2>
    40d4:	cd b7       	in	r28, 0x3d	; 61
    40d6:	de b7       	in	r29, 0x3e	; 62
    40d8:	ec e0       	ldi	r30, 0x0C	; 12
    40da:	0c 94 b9 23 	jmp	0x4772	; 0x4772 <__epilogue_restores__+0xc>

Disassembly of section .text.libgcc.div:

00004e44 <__umoddi3>:
    4e44:	68 94       	set
    4e46:	01 c0       	rjmp	.+2      	; 0x4e4a <__udivdi3_umoddi3>

00004e48 <__udivdi3>:
    4e48:	e8 94       	clt

00004e4a <__udivdi3_umoddi3>:
    4e4a:	8f 92       	push	r8
    4e4c:	9f 92       	push	r9
    4e4e:	cf 93       	push	r28
    4e50:	df 93       	push	r29
    4e52:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <__udivmod64>
    4e56:	df 91       	pop	r29
    4e58:	cf 91       	pop	r28
    4e5a:	9f 90       	pop	r9
    4e5c:	8f 90       	pop	r8
    4e5e:	08 95       	ret

Disassembly of section .text.libgcc.div:

000035f2 <__udivmod64>:
    35f2:	88 24       	eor	r8, r8
    35f4:	99 24       	eor	r9, r9
    35f6:	f4 01       	movw	r30, r8
    35f8:	e4 01       	movw	r28, r8
    35fa:	b0 e4       	ldi	r27, 0x40	; 64
    35fc:	9f 93       	push	r25
    35fe:	aa 27       	eor	r26, r26
    3600:	9a 15       	cp	r25, r10
    3602:	8b 04       	cpc	r8, r11
    3604:	9c 04       	cpc	r9, r12
    3606:	ed 05       	cpc	r30, r13
    3608:	fe 05       	cpc	r31, r14
    360a:	cf 05       	cpc	r28, r15
    360c:	d0 07       	cpc	r29, r16
    360e:	a1 07       	cpc	r26, r17
    3610:	98 f4       	brcc	.+38     	; 0x3638 <__udivmod64+0x46>
    3612:	ad 2f       	mov	r26, r29
    3614:	dc 2f       	mov	r29, r28
    3616:	cf 2f       	mov	r28, r31
    3618:	fe 2f       	mov	r31, r30
    361a:	e9 2d       	mov	r30, r9
    361c:	98 2c       	mov	r9, r8
    361e:	89 2e       	mov	r8, r25
    3620:	98 2f       	mov	r25, r24
    3622:	87 2f       	mov	r24, r23
    3624:	76 2f       	mov	r23, r22
    3626:	65 2f       	mov	r22, r21
    3628:	54 2f       	mov	r21, r20
    362a:	43 2f       	mov	r20, r19
    362c:	32 2f       	mov	r19, r18
    362e:	22 27       	eor	r18, r18
    3630:	b8 50       	subi	r27, 0x08	; 8
    3632:	31 f7       	brne	.-52     	; 0x3600 <__udivmod64+0xe>
    3634:	bf 91       	pop	r27
    3636:	27 c0       	rjmp	.+78     	; 0x3686 <__udivmod64+0x94>
    3638:	1b 2e       	mov	r1, r27
    363a:	bf 91       	pop	r27
    363c:	bb 27       	eor	r27, r27
    363e:	22 0f       	add	r18, r18
    3640:	33 1f       	adc	r19, r19
    3642:	44 1f       	adc	r20, r20
    3644:	55 1f       	adc	r21, r21
    3646:	66 1f       	adc	r22, r22
    3648:	77 1f       	adc	r23, r23
    364a:	88 1f       	adc	r24, r24
    364c:	99 1f       	adc	r25, r25
    364e:	88 1c       	adc	r8, r8
    3650:	99 1c       	adc	r9, r9
    3652:	ee 1f       	adc	r30, r30
    3654:	ff 1f       	adc	r31, r31
    3656:	cc 1f       	adc	r28, r28
    3658:	dd 1f       	adc	r29, r29
    365a:	aa 1f       	adc	r26, r26
    365c:	bb 1f       	adc	r27, r27
    365e:	8a 14       	cp	r8, r10
    3660:	9b 04       	cpc	r9, r11
    3662:	ec 05       	cpc	r30, r12
    3664:	fd 05       	cpc	r31, r13
    3666:	ce 05       	cpc	r28, r14
    3668:	df 05       	cpc	r29, r15
    366a:	a0 07       	cpc	r26, r16
    366c:	b1 07       	cpc	r27, r17
    366e:	48 f0       	brcs	.+18     	; 0x3682 <__udivmod64+0x90>
    3670:	8a 18       	sub	r8, r10
    3672:	9b 08       	sbc	r9, r11
    3674:	ec 09       	sbc	r30, r12
    3676:	fd 09       	sbc	r31, r13
    3678:	ce 09       	sbc	r28, r14
    367a:	df 09       	sbc	r29, r15
    367c:	a0 0b       	sbc	r26, r16
    367e:	b1 0b       	sbc	r27, r17
    3680:	21 60       	ori	r18, 0x01	; 1
    3682:	1a 94       	dec	r1
    3684:	e1 f6       	brne	.-72     	; 0x363e <__udivmod64+0x4c>
    3686:	2e f4       	brtc	.+10     	; 0x3692 <__udivmod64+0xa0>
    3688:	94 01       	movw	r18, r8
    368a:	af 01       	movw	r20, r30
    368c:	be 01       	movw	r22, r28
    368e:	cd 01       	movw	r24, r26
    3690:	00 0c       	add	r0, r0
    3692:	08 95       	ret

Disassembly of section .text.libgcc:

00004de8 <__negdi2>:
    4de8:	60 95       	com	r22
    4dea:	70 95       	com	r23
    4dec:	80 95       	com	r24
    4dee:	90 95       	com	r25
    4df0:	30 95       	com	r19
    4df2:	40 95       	com	r20
    4df4:	50 95       	com	r21
    4df6:	21 95       	neg	r18
    4df8:	3f 4f       	sbci	r19, 0xFF	; 255
    4dfa:	4f 4f       	sbci	r20, 0xFF	; 255
    4dfc:	5f 4f       	sbci	r21, 0xFF	; 255
    4dfe:	6f 4f       	sbci	r22, 0xFF	; 255
    4e00:	7f 4f       	sbci	r23, 0xFF	; 255
    4e02:	8f 4f       	sbci	r24, 0xFF	; 255
    4e04:	9f 4f       	sbci	r25, 0xFF	; 255
    4e06:	08 95       	ret

Disassembly of section .text.libgcc.prologue:

000046f8 <__prologue_saves__>:
    46f8:	2f 92       	push	r2
    46fa:	3f 92       	push	r3
    46fc:	4f 92       	push	r4
    46fe:	5f 92       	push	r5
    4700:	6f 92       	push	r6
    4702:	7f 92       	push	r7
    4704:	8f 92       	push	r8
    4706:	9f 92       	push	r9
    4708:	af 92       	push	r10
    470a:	bf 92       	push	r11
    470c:	cf 92       	push	r12
    470e:	df 92       	push	r13
    4710:	ef 92       	push	r14
    4712:	ff 92       	push	r15
    4714:	0f 93       	push	r16
    4716:	1f 93       	push	r17
    4718:	cf 93       	push	r28
    471a:	df 93       	push	r29
    471c:	cd b7       	in	r28, 0x3d	; 61
    471e:	de b7       	in	r29, 0x3e	; 62
    4720:	ca 1b       	sub	r28, r26
    4722:	db 0b       	sbc	r29, r27
    4724:	0f b6       	in	r0, 0x3f	; 63
    4726:	f8 94       	cli
    4728:	de bf       	out	0x3e, r29	; 62
    472a:	0f be       	out	0x3f, r0	; 63
    472c:	cd bf       	out	0x3d, r28	; 61
    472e:	09 94       	ijmp

Disassembly of section .text.libgcc.prologue:

00004766 <__epilogue_restores__>:
    4766:	2a 88       	ldd	r2, Y+18	; 0x12
    4768:	39 88       	ldd	r3, Y+17	; 0x11
    476a:	48 88       	ldd	r4, Y+16	; 0x10
    476c:	5f 84       	ldd	r5, Y+15	; 0x0f
    476e:	6e 84       	ldd	r6, Y+14	; 0x0e
    4770:	7d 84       	ldd	r7, Y+13	; 0x0d
    4772:	8c 84       	ldd	r8, Y+12	; 0x0c
    4774:	9b 84       	ldd	r9, Y+11	; 0x0b
    4776:	aa 84       	ldd	r10, Y+10	; 0x0a
    4778:	b9 84       	ldd	r11, Y+9	; 0x09
    477a:	c8 84       	ldd	r12, Y+8	; 0x08
    477c:	df 80       	ldd	r13, Y+7	; 0x07
    477e:	ee 80       	ldd	r14, Y+6	; 0x06
    4780:	fd 80       	ldd	r15, Y+5	; 0x05
    4782:	0c 81       	ldd	r16, Y+4	; 0x04
    4784:	1b 81       	ldd	r17, Y+3	; 0x03
    4786:	aa 81       	ldd	r26, Y+2	; 0x02
    4788:	b9 81       	ldd	r27, Y+1	; 0x01
    478a:	ce 0f       	add	r28, r30
    478c:	d1 1d       	adc	r29, r1
    478e:	0f b6       	in	r0, 0x3f	; 63
    4790:	f8 94       	cli
    4792:	de bf       	out	0x3e, r29	; 62
    4794:	0f be       	out	0x3f, r0	; 63
    4796:	cd bf       	out	0x3d, r28	; 61
    4798:	ed 01       	movw	r28, r26
    479a:	08 95       	ret

Disassembly of section .text.libgcc:

00004f78 <__adddi3>:
    4f78:	2a 0d       	add	r18, r10
    4f7a:	3b 1d       	adc	r19, r11
    4f7c:	4c 1d       	adc	r20, r12
    4f7e:	5d 1d       	adc	r21, r13
    4f80:	6e 1d       	adc	r22, r14
    4f82:	7f 1d       	adc	r23, r15
    4f84:	80 1f       	adc	r24, r16
    4f86:	91 1f       	adc	r25, r17
    4f88:	08 95       	ret

Disassembly of section .text.libgcc:

00004f8a <__cmpdi2>:
    4f8a:	2a 15       	cp	r18, r10
    4f8c:	3b 05       	cpc	r19, r11
    4f8e:	4c 05       	cpc	r20, r12
    4f90:	5d 05       	cpc	r21, r13
    4f92:	6e 05       	cpc	r22, r14
    4f94:	7f 05       	cpc	r23, r15
    4f96:	80 07       	cpc	r24, r16
    4f98:	91 07       	cpc	r25, r17
    4f9a:	08 95       	ret
